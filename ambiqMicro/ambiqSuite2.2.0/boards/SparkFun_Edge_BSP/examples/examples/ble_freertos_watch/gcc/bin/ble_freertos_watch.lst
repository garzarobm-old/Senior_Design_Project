
bin/ble_freertos_watch.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 0d 19 02 00 75 19 02 00 85 07 02 00     .+......u.......
    c010:	7b 19 02 00 7b 19 02 00 7b 19 02 00 00 00 00 00     {...{...{.......
	...
    c02c:	b1 8b 01 00 81 19 02 00 00 00 00 00 91 8d 01 00     ................
    c03c:	f9 8d 01 00 81 19 02 00 81 19 02 00 81 19 02 00     ................
    c04c:	81 19 02 00 81 19 02 00 81 19 02 00 81 19 02 00     ................
    c05c:	81 19 02 00 81 19 02 00 81 19 02 00 81 19 02 00     ................
    c06c:	81 19 02 00 cd b3 01 00 81 19 02 00 75 b4 01 00     ............u...
    c07c:	a5 b3 01 00 81 19 02 00 81 19 02 00 81 19 02 00     ................
    c08c:	81 19 02 00 81 19 02 00 81 19 02 00 81 19 02 00     ................
    c09c:	49 90 01 00 81 19 02 00 81 19 02 00 81 19 02 00     I...............
    c0ac:	81 19 02 00 81 19 02 00 81 19 02 00 81 19 02 00     ................
    c0bc:	81 19 02 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcmp>:
    c100:	2a03      	cmp	r2, #3
    c102:	b470      	push	{r4, r5, r6}
    c104:	d922      	bls.n	c14c <memcmp+0x4c>
    c106:	ea40 0301 	orr.w	r3, r0, r1
    c10a:	079b      	lsls	r3, r3, #30
    c10c:	d011      	beq.n	c132 <memcmp+0x32>
    c10e:	7803      	ldrb	r3, [r0, #0]
    c110:	780c      	ldrb	r4, [r1, #0]
    c112:	42a3      	cmp	r3, r4
    c114:	d11d      	bne.n	c152 <memcmp+0x52>
    c116:	440a      	add	r2, r1
    c118:	3101      	adds	r1, #1
    c11a:	e005      	b.n	c128 <memcmp+0x28>
    c11c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c120:	f811 4b01 	ldrb.w	r4, [r1], #1
    c124:	42a3      	cmp	r3, r4
    c126:	d114      	bne.n	c152 <memcmp+0x52>
    c128:	4291      	cmp	r1, r2
    c12a:	d1f7      	bne.n	c11c <memcmp+0x1c>
    c12c:	2000      	movs	r0, #0
    c12e:	bc70      	pop	{r4, r5, r6}
    c130:	4770      	bx	lr
    c132:	680d      	ldr	r5, [r1, #0]
    c134:	6806      	ldr	r6, [r0, #0]
    c136:	42ae      	cmp	r6, r5
    c138:	460c      	mov	r4, r1
    c13a:	4603      	mov	r3, r0
    c13c:	f101 0104 	add.w	r1, r1, #4
    c140:	f100 0004 	add.w	r0, r0, #4
    c144:	d108      	bne.n	c158 <memcmp+0x58>
    c146:	3a04      	subs	r2, #4
    c148:	2a03      	cmp	r2, #3
    c14a:	d8f2      	bhi.n	c132 <memcmp+0x32>
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1de      	bne.n	c10e <memcmp+0xe>
    c150:	e7ec      	b.n	c12c <memcmp+0x2c>
    c152:	1b18      	subs	r0, r3, r4
    c154:	bc70      	pop	{r4, r5, r6}
    c156:	4770      	bx	lr
    c158:	4621      	mov	r1, r4
    c15a:	4618      	mov	r0, r3
    c15c:	e7d7      	b.n	c10e <memcmp+0xe>
    c15e:	bf00      	nop

0000c160 <memcpy>:
    c160:	4684      	mov	ip, r0
    c162:	ea41 0300 	orr.w	r3, r1, r0
    c166:	f013 0303 	ands.w	r3, r3, #3
    c16a:	d16d      	bne.n	c248 <memcpy+0xe8>
    c16c:	3a40      	subs	r2, #64	; 0x40
    c16e:	d341      	bcc.n	c1f4 <memcpy+0x94>
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	f851 3b04 	ldr.w	r3, [r1], #4
    c194:	f840 3b04 	str.w	r3, [r0], #4
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	3a40      	subs	r2, #64	; 0x40
    c1f2:	d2bd      	bcs.n	c170 <memcpy+0x10>
    c1f4:	3230      	adds	r2, #48	; 0x30
    c1f6:	d311      	bcc.n	c21c <memcpy+0xbc>
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	3a10      	subs	r2, #16
    c21a:	d2ed      	bcs.n	c1f8 <memcpy+0x98>
    c21c:	320c      	adds	r2, #12
    c21e:	d305      	bcc.n	c22c <memcpy+0xcc>
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	3a04      	subs	r2, #4
    c22a:	d2f9      	bcs.n	c220 <memcpy+0xc0>
    c22c:	3204      	adds	r2, #4
    c22e:	d008      	beq.n	c242 <memcpy+0xe2>
    c230:	07d2      	lsls	r2, r2, #31
    c232:	bf1c      	itt	ne
    c234:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c238:	f800 3b01 	strbne.w	r3, [r0], #1
    c23c:	d301      	bcc.n	c242 <memcpy+0xe2>
    c23e:	880b      	ldrh	r3, [r1, #0]
    c240:	8003      	strh	r3, [r0, #0]
    c242:	4660      	mov	r0, ip
    c244:	4770      	bx	lr
    c246:	bf00      	nop
    c248:	2a08      	cmp	r2, #8
    c24a:	d313      	bcc.n	c274 <memcpy+0x114>
    c24c:	078b      	lsls	r3, r1, #30
    c24e:	d08d      	beq.n	c16c <memcpy+0xc>
    c250:	f010 0303 	ands.w	r3, r0, #3
    c254:	d08a      	beq.n	c16c <memcpy+0xc>
    c256:	f1c3 0304 	rsb	r3, r3, #4
    c25a:	1ad2      	subs	r2, r2, r3
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	bf1c      	itt	ne
    c260:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c264:	f800 3b01 	strbne.w	r3, [r0], #1
    c268:	d380      	bcc.n	c16c <memcpy+0xc>
    c26a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c26e:	f820 3b02 	strh.w	r3, [r0], #2
    c272:	e77b      	b.n	c16c <memcpy+0xc>
    c274:	3a04      	subs	r2, #4
    c276:	d3d9      	bcc.n	c22c <memcpy+0xcc>
    c278:	3a01      	subs	r2, #1
    c27a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c27e:	f800 3b01 	strb.w	r3, [r0], #1
    c282:	d2f9      	bcs.n	c278 <memcpy+0x118>
    c284:	780b      	ldrb	r3, [r1, #0]
    c286:	7003      	strb	r3, [r0, #0]
    c288:	784b      	ldrb	r3, [r1, #1]
    c28a:	7043      	strb	r3, [r0, #1]
    c28c:	788b      	ldrb	r3, [r1, #2]
    c28e:	7083      	strb	r3, [r0, #2]
    c290:	4660      	mov	r0, ip
    c292:	4770      	bx	lr

0000c294 <memmove>:
    c294:	4288      	cmp	r0, r1
    c296:	b5f0      	push	{r4, r5, r6, r7, lr}
    c298:	d90d      	bls.n	c2b6 <memmove+0x22>
    c29a:	188b      	adds	r3, r1, r2
    c29c:	4298      	cmp	r0, r3
    c29e:	d20a      	bcs.n	c2b6 <memmove+0x22>
    c2a0:	1884      	adds	r4, r0, r2
    c2a2:	2a00      	cmp	r2, #0
    c2a4:	d051      	beq.n	c34a <memmove+0xb6>
    c2a6:	4622      	mov	r2, r4
    c2a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c2ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
    c2b0:	4299      	cmp	r1, r3
    c2b2:	d1f9      	bne.n	c2a8 <memmove+0x14>
    c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2b6:	2a0f      	cmp	r2, #15
    c2b8:	d948      	bls.n	c34c <memmove+0xb8>
    c2ba:	ea41 0300 	orr.w	r3, r1, r0
    c2be:	079b      	lsls	r3, r3, #30
    c2c0:	d146      	bne.n	c350 <memmove+0xbc>
    c2c2:	f100 0410 	add.w	r4, r0, #16
    c2c6:	f101 0310 	add.w	r3, r1, #16
    c2ca:	4615      	mov	r5, r2
    c2cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
    c2d0:	f844 6c10 	str.w	r6, [r4, #-16]
    c2d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    c2d8:	f844 6c0c 	str.w	r6, [r4, #-12]
    c2dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
    c2e0:	f844 6c08 	str.w	r6, [r4, #-8]
    c2e4:	3d10      	subs	r5, #16
    c2e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    c2ea:	f844 6c04 	str.w	r6, [r4, #-4]
    c2ee:	2d0f      	cmp	r5, #15
    c2f0:	f103 0310 	add.w	r3, r3, #16
    c2f4:	f104 0410 	add.w	r4, r4, #16
    c2f8:	d8e8      	bhi.n	c2cc <memmove+0x38>
    c2fa:	f1a2 0310 	sub.w	r3, r2, #16
    c2fe:	f023 030f 	bic.w	r3, r3, #15
    c302:	f002 0e0f 	and.w	lr, r2, #15
    c306:	3310      	adds	r3, #16
    c308:	f1be 0f03 	cmp.w	lr, #3
    c30c:	4419      	add	r1, r3
    c30e:	4403      	add	r3, r0
    c310:	d921      	bls.n	c356 <memmove+0xc2>
    c312:	1f1e      	subs	r6, r3, #4
    c314:	460d      	mov	r5, r1
    c316:	4674      	mov	r4, lr
    c318:	3c04      	subs	r4, #4
    c31a:	f855 7b04 	ldr.w	r7, [r5], #4
    c31e:	f846 7f04 	str.w	r7, [r6, #4]!
    c322:	2c03      	cmp	r4, #3
    c324:	d8f8      	bhi.n	c318 <memmove+0x84>
    c326:	f1ae 0404 	sub.w	r4, lr, #4
    c32a:	f024 0403 	bic.w	r4, r4, #3
    c32e:	3404      	adds	r4, #4
    c330:	4421      	add	r1, r4
    c332:	4423      	add	r3, r4
    c334:	f002 0203 	and.w	r2, r2, #3
    c338:	b162      	cbz	r2, c354 <memmove+0xc0>
    c33a:	3b01      	subs	r3, #1
    c33c:	440a      	add	r2, r1
    c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
    c342:	f803 4f01 	strb.w	r4, [r3, #1]!
    c346:	428a      	cmp	r2, r1
    c348:	d1f9      	bne.n	c33e <memmove+0xaa>
    c34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34c:	4603      	mov	r3, r0
    c34e:	e7f3      	b.n	c338 <memmove+0xa4>
    c350:	4603      	mov	r3, r0
    c352:	e7f2      	b.n	c33a <memmove+0xa6>
    c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c356:	4672      	mov	r2, lr
    c358:	e7ee      	b.n	c338 <memmove+0xa4>
    c35a:	bf00      	nop

0000c35c <memset>:
    c35c:	b470      	push	{r4, r5, r6}
    c35e:	0786      	lsls	r6, r0, #30
    c360:	d046      	beq.n	c3f0 <memset+0x94>
    c362:	1e54      	subs	r4, r2, #1
    c364:	2a00      	cmp	r2, #0
    c366:	d041      	beq.n	c3ec <memset+0x90>
    c368:	b2ca      	uxtb	r2, r1
    c36a:	4603      	mov	r3, r0
    c36c:	e002      	b.n	c374 <memset+0x18>
    c36e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c372:	d33b      	bcc.n	c3ec <memset+0x90>
    c374:	f803 2b01 	strb.w	r2, [r3], #1
    c378:	079d      	lsls	r5, r3, #30
    c37a:	d1f8      	bne.n	c36e <memset+0x12>
    c37c:	2c03      	cmp	r4, #3
    c37e:	d92e      	bls.n	c3de <memset+0x82>
    c380:	b2cd      	uxtb	r5, r1
    c382:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c386:	2c0f      	cmp	r4, #15
    c388:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c38c:	d919      	bls.n	c3c2 <memset+0x66>
    c38e:	f103 0210 	add.w	r2, r3, #16
    c392:	4626      	mov	r6, r4
    c394:	3e10      	subs	r6, #16
    c396:	2e0f      	cmp	r6, #15
    c398:	f842 5c10 	str.w	r5, [r2, #-16]
    c39c:	f842 5c0c 	str.w	r5, [r2, #-12]
    c3a0:	f842 5c08 	str.w	r5, [r2, #-8]
    c3a4:	f842 5c04 	str.w	r5, [r2, #-4]
    c3a8:	f102 0210 	add.w	r2, r2, #16
    c3ac:	d8f2      	bhi.n	c394 <memset+0x38>
    c3ae:	f1a4 0210 	sub.w	r2, r4, #16
    c3b2:	f022 020f 	bic.w	r2, r2, #15
    c3b6:	f004 040f 	and.w	r4, r4, #15
    c3ba:	3210      	adds	r2, #16
    c3bc:	2c03      	cmp	r4, #3
    c3be:	4413      	add	r3, r2
    c3c0:	d90d      	bls.n	c3de <memset+0x82>
    c3c2:	461e      	mov	r6, r3
    c3c4:	4622      	mov	r2, r4
    c3c6:	3a04      	subs	r2, #4
    c3c8:	2a03      	cmp	r2, #3
    c3ca:	f846 5b04 	str.w	r5, [r6], #4
    c3ce:	d8fa      	bhi.n	c3c6 <memset+0x6a>
    c3d0:	1f22      	subs	r2, r4, #4
    c3d2:	f022 0203 	bic.w	r2, r2, #3
    c3d6:	3204      	adds	r2, #4
    c3d8:	4413      	add	r3, r2
    c3da:	f004 0403 	and.w	r4, r4, #3
    c3de:	b12c      	cbz	r4, c3ec <memset+0x90>
    c3e0:	b2c9      	uxtb	r1, r1
    c3e2:	441c      	add	r4, r3
    c3e4:	f803 1b01 	strb.w	r1, [r3], #1
    c3e8:	429c      	cmp	r4, r3
    c3ea:	d1fb      	bne.n	c3e4 <memset+0x88>
    c3ec:	bc70      	pop	{r4, r5, r6}
    c3ee:	4770      	bx	lr
    c3f0:	4614      	mov	r4, r2
    c3f2:	4603      	mov	r3, r0
    c3f4:	e7c2      	b.n	c37c <memset+0x20>
    c3f6:	bf00      	nop

0000c3f8 <__aeabi_d2f>:
    c3f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c3fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c400:	bf24      	itt	cs
    c402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c40a:	d90d      	bls.n	c428 <__aeabi_d2f+0x30>
    c40c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c41c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c420:	bf08      	it	eq
    c422:	f020 0001 	biceq.w	r0, r0, #1
    c426:	4770      	bx	lr
    c428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c42c:	d121      	bne.n	c472 <__aeabi_d2f+0x7a>
    c42e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c432:	bfbc      	itt	lt
    c434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c438:	4770      	bxlt	lr
    c43a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c43e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c442:	f1c2 0218 	rsb	r2, r2, #24
    c446:	f1c2 0c20 	rsb	ip, r2, #32
    c44a:	fa10 f30c 	lsls.w	r3, r0, ip
    c44e:	fa20 f002 	lsr.w	r0, r0, r2
    c452:	bf18      	it	ne
    c454:	f040 0001 	orrne.w	r0, r0, #1
    c458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c45c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c460:	fa03 fc0c 	lsl.w	ip, r3, ip
    c464:	ea40 000c 	orr.w	r0, r0, ip
    c468:	fa23 f302 	lsr.w	r3, r3, r2
    c46c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c470:	e7cc      	b.n	c40c <__aeabi_d2f+0x14>
    c472:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c476:	d107      	bne.n	c488 <__aeabi_d2f+0x90>
    c478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c47c:	bf1e      	ittt	ne
    c47e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c486:	4770      	bxne	lr
    c488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c48c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c494:	4770      	bx	lr
    c496:	bf00      	nop

0000c498 <attDmConnCback>:
    c498:	7803      	ldrb	r3, [r0, #0]
    c49a:	7882      	ldrb	r2, [r0, #2]
    c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a0:	1e5f      	subs	r7, r3, #1
    c4a2:	4e16      	ldr	r6, [pc, #88]	; (c4fc <attDmConnCback+0x64>)
    c4a4:	017f      	lsls	r7, r7, #5
    c4a6:	2a27      	cmp	r2, #39	; 0x27
    c4a8:	4605      	mov	r5, r0
    c4aa:	eb06 0407 	add.w	r4, r6, r7
    c4ae:	d108      	bne.n	c4c2 <attDmConnCback+0x2a>
    c4b0:	88c2      	ldrh	r2, [r0, #6]
    c4b2:	8322      	strh	r2, [r4, #24]
    c4b4:	7723      	strb	r3, [r4, #28]
    c4b6:	2217      	movs	r2, #23
    c4b8:	2300      	movs	r3, #0
    c4ba:	8362      	strh	r2, [r4, #26]
    c4bc:	7763      	strb	r3, [r4, #29]
    c4be:	77a3      	strb	r3, [r4, #30]
    c4c0:	77e3      	strb	r3, [r4, #31]
    c4c2:	4437      	add	r7, r6
    c4c4:	7f3b      	ldrb	r3, [r7, #28]
    c4c6:	b183      	cbz	r3, c4ea <attDmConnCback+0x52>
    c4c8:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    c4cc:	4629      	mov	r1, r5
    c4ce:	68db      	ldr	r3, [r3, #12]
    c4d0:	4620      	mov	r0, r4
    c4d2:	4798      	blx	r3
    c4d4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    c4d8:	4629      	mov	r1, r5
    c4da:	68db      	ldr	r3, [r3, #12]
    c4dc:	4620      	mov	r0, r4
    c4de:	4798      	blx	r3
    c4e0:	78ab      	ldrb	r3, [r5, #2]
    c4e2:	2b28      	cmp	r3, #40	; 0x28
    c4e4:	bf04      	itt	eq
    c4e6:	2300      	moveq	r3, #0
    c4e8:	773b      	strbeq	r3, [r7, #28]
    c4ea:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
    c4ee:	b11b      	cbz	r3, c4f8 <attDmConnCback+0x60>
    c4f0:	4628      	mov	r0, r5
    c4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c4f6:	4718      	bx	r3
    c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4fc:	10003798 	.word	0x10003798

0000c500 <attEmptyHandler>:
    c500:	4770      	bx	lr

0000c502 <attEmptyConnCback>:
    c502:	4770      	bx	lr

0000c504 <attEmptyDataCback>:
    c504:	4770      	bx	lr

0000c506 <attL2cDataCback>:
    c506:	7a13      	ldrb	r3, [r2, #8]
    c508:	f013 0f01 	tst.w	r3, #1
    c50c:	4b03      	ldr	r3, [pc, #12]	; (c51c <attL2cDataCback+0x16>)
    c50e:	bf14      	ite	ne
    c510:	f8d3 3100 	ldrne.w	r3, [r3, #256]	; 0x100
    c514:	f8d3 3104 	ldreq.w	r3, [r3, #260]	; 0x104
    c518:	681b      	ldr	r3, [r3, #0]
    c51a:	4718      	bx	r3
    c51c:	10003798 	.word	0x10003798

0000c520 <attL2cCtrlCback>:
    c520:	b570      	push	{r4, r5, r6, lr}
    c522:	7804      	ldrb	r4, [r0, #0]
    c524:	4d0e      	ldr	r5, [pc, #56]	; (c560 <attL2cCtrlCback+0x40>)
    c526:	3c01      	subs	r4, #1
    c528:	0164      	lsls	r4, r4, #5
    c52a:	192b      	adds	r3, r5, r4
    c52c:	4606      	mov	r6, r0
    c52e:	7f1a      	ldrb	r2, [r3, #28]
    c530:	b1a2      	cbz	r2, c55c <attL2cCtrlCback+0x3c>
    c532:	7882      	ldrb	r2, [r0, #2]
    c534:	2a01      	cmp	r2, #1
    c536:	bf0c      	ite	eq
    c538:	2201      	moveq	r2, #1
    c53a:	2200      	movne	r2, #0
    c53c:	779a      	strb	r2, [r3, #30]
    c53e:	d003      	beq.n	c548 <attL2cCtrlCback+0x28>
    c540:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    c544:	685b      	ldr	r3, [r3, #4]
    c546:	4798      	blx	r3
    c548:	442c      	add	r4, r5
    c54a:	7fa3      	ldrb	r3, [r4, #30]
    c54c:	b933      	cbnz	r3, c55c <attL2cCtrlCback+0x3c>
    c54e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    c552:	4630      	mov	r0, r6
    c554:	685b      	ldr	r3, [r3, #4]
    c556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c55a:	4718      	bx	r3
    c55c:	bd70      	pop	{r4, r5, r6, pc}
    c55e:	bf00      	nop
    c560:	10003798 	.word	0x10003798

0000c564 <attCcbByHandle>:
    c564:	b508      	push	{r3, lr}
    c566:	f003 fa85 	bl	fa74 <DmConnIdByHandle>
    c56a:	b118      	cbz	r0, c574 <attCcbByHandle+0x10>
    c56c:	4b02      	ldr	r3, [pc, #8]	; (c578 <attCcbByHandle+0x14>)
    c56e:	3801      	subs	r0, #1
    c570:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c574:	bd08      	pop	{r3, pc}
    c576:	bf00      	nop
    c578:	10003798 	.word	0x10003798

0000c57c <attCcbByConnId>:
    c57c:	4b02      	ldr	r3, [pc, #8]	; (c588 <attCcbByConnId+0xc>)
    c57e:	3801      	subs	r0, #1
    c580:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c584:	4770      	bx	lr
    c586:	bf00      	nop
    c588:	10003798 	.word	0x10003798

0000c58c <attUuidCmp16to128>:
    c58c:	b508      	push	{r3, lr}
    c58e:	4b06      	ldr	r3, [pc, #24]	; (c5a8 <attUuidCmp16to128+0x1c>)
    c590:	7802      	ldrb	r2, [r0, #0]
    c592:	731a      	strb	r2, [r3, #12]
    c594:	7842      	ldrb	r2, [r0, #1]
    c596:	735a      	strb	r2, [r3, #13]
    c598:	4618      	mov	r0, r3
    c59a:	2210      	movs	r2, #16
    c59c:	f7ff fdb0 	bl	c100 <memcmp>
    c5a0:	fab0 f080 	clz	r0, r0
    c5a4:	0940      	lsrs	r0, r0, #5
    c5a6:	bd08      	pop	{r3, pc}
    c5a8:	10002b00 	.word	0x10002b00

0000c5ac <attExecCallback>:
    c5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c5ae:	f88d 3003 	strb.w	r3, [sp, #3]
    c5b2:	2300      	movs	r3, #0
    c5b4:	f8ad 3008 	strh.w	r3, [sp, #8]
    c5b8:	f88d 300c 	strb.w	r3, [sp, #12]
    c5bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    c5c0:	f8ad 300e 	strh.w	r3, [sp, #14]
    c5c4:	4b06      	ldr	r3, [pc, #24]	; (c5e0 <attExecCallback+0x34>)
    c5c6:	f8ad 0000 	strh.w	r0, [sp]
    c5ca:	f88d 1002 	strb.w	r1, [sp, #2]
    c5ce:	f8ad 200a 	strh.w	r2, [sp, #10]
    c5d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    c5d6:	4668      	mov	r0, sp
    c5d8:	4798      	blx	r3
    c5da:	b005      	add	sp, #20
    c5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e0:	10003798 	.word	0x10003798

0000c5e4 <attSetMtu>:
    c5e4:	428a      	cmp	r2, r1
    c5e6:	8b43      	ldrh	r3, [r0, #26]
    c5e8:	b507      	push	{r0, r1, r2, lr}
    c5ea:	bf28      	it	cs
    c5ec:	460a      	movcs	r2, r1
    c5ee:	4293      	cmp	r3, r2
    c5f0:	d007      	beq.n	c602 <attSetMtu+0x1e>
    c5f2:	2300      	movs	r3, #0
    c5f4:	8342      	strh	r2, [r0, #26]
    c5f6:	2111      	movs	r1, #17
    c5f8:	7f00      	ldrb	r0, [r0, #28]
    c5fa:	9200      	str	r2, [sp, #0]
    c5fc:	461a      	mov	r2, r3
    c5fe:	f7ff ffd5 	bl	c5ac <attExecCallback>
    c602:	b003      	add	sp, #12
    c604:	f85d fb04 	ldr.w	pc, [sp], #4

0000c608 <attMsgAlloc>:
    c608:	2100      	movs	r1, #0
    c60a:	f00e b97b 	b.w	1a904 <WsfMsgDataAlloc>

0000c60e <AttHandlerInit>:
    c60e:	b508      	push	{r3, lr}
    c610:	4b09      	ldr	r3, [pc, #36]	; (c638 <AttHandlerInit+0x2a>)
    c612:	4a0a      	ldr	r2, [pc, #40]	; (c63c <AttHandlerInit+0x2e>)
    c614:	f883 0110 	strb.w	r0, [r3, #272]	; 0x110
    c618:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c61c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c620:	4907      	ldr	r1, [pc, #28]	; (c640 <AttHandlerInit+0x32>)
    c622:	4a08      	ldr	r2, [pc, #32]	; (c644 <AttHandlerInit+0x36>)
    c624:	2004      	movs	r0, #4
    c626:	f004 facb 	bl	10bc0 <L2cRegister>
    c62a:	4907      	ldr	r1, [pc, #28]	; (c648 <AttHandlerInit+0x3a>)
    c62c:	2000      	movs	r0, #0
    c62e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c632:	f003 b909 	b.w	f848 <DmConnRegister>
    c636:	bf00      	nop
    c638:	10003798 	.word	0x10003798
    c63c:	00025b88 	.word	0x00025b88
    c640:	0000c507 	.word	0x0000c507
    c644:	0000c521 	.word	0x0000c521
    c648:	0000c499 	.word	0x0000c499

0000c64c <AttHandler>:
    c64c:	4608      	mov	r0, r1
    c64e:	b149      	cbz	r1, c664 <AttHandler+0x18>
    c650:	788b      	ldrb	r3, [r1, #2]
    c652:	2b1f      	cmp	r3, #31
    c654:	4b04      	ldr	r3, [pc, #16]	; (c668 <AttHandler+0x1c>)
    c656:	bf8c      	ite	hi
    c658:	f8d3 3104 	ldrhi.w	r3, [r3, #260]	; 0x104
    c65c:	f8d3 3100 	ldrls.w	r3, [r3, #256]	; 0x100
    c660:	689b      	ldr	r3, [r3, #8]
    c662:	4718      	bx	r3
    c664:	4770      	bx	lr
    c666:	bf00      	nop
    c668:	10003798 	.word	0x10003798

0000c66c <AttRegister>:
    c66c:	4b0a      	ldr	r3, [pc, #40]	; (c698 <AttRegister+0x2c>)
    c66e:	b507      	push	{r0, r1, r2, lr}
    c670:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    c674:	f009 fbea 	bl	15e4c <HciGetMaxRxAclLen>
    c678:	4b08      	ldr	r3, [pc, #32]	; (c69c <AttRegister+0x30>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	889b      	ldrh	r3, [r3, #4]
    c67e:	3803      	subs	r0, #3
    c680:	4298      	cmp	r0, r3
    c682:	dc06      	bgt.n	c692 <AttRegister+0x26>
    c684:	2200      	movs	r2, #0
    c686:	9200      	str	r2, [sp, #0]
    c688:	2302      	movs	r3, #2
    c68a:	2152      	movs	r1, #82	; 0x52
    c68c:	4610      	mov	r0, r2
    c68e:	f7ff ff8d 	bl	c5ac <attExecCallback>
    c692:	b003      	add	sp, #12
    c694:	f85d fb04 	ldr.w	pc, [sp], #4
    c698:	10003798 	.word	0x10003798
    c69c:	10002b84 	.word	0x10002b84

0000c6a0 <AttConnRegister>:
    c6a0:	4b01      	ldr	r3, [pc, #4]	; (c6a8 <AttConnRegister+0x8>)
    c6a2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    c6a6:	4770      	bx	lr
    c6a8:	10003798 	.word	0x10003798

0000c6ac <AttGetMtu>:
    c6ac:	4b02      	ldr	r3, [pc, #8]	; (c6b8 <AttGetMtu+0xc>)
    c6ae:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c6b2:	f830 0c06 	ldrh.w	r0, [r0, #-6]
    c6b6:	4770      	bx	lr
    c6b8:	10003798 	.word	0x10003798

0000c6bc <AttMsgAlloc>:
    c6bc:	291b      	cmp	r1, #27
    c6be:	b508      	push	{r3, lr}
    c6c0:	d001      	beq.n	c6c6 <AttMsgAlloc+0xa>
    c6c2:	291d      	cmp	r1, #29
    c6c4:	d106      	bne.n	c6d4 <AttMsgAlloc+0x18>
    c6c6:	300b      	adds	r0, #11
    c6c8:	b280      	uxth	r0, r0
    c6ca:	f7ff ff9d 	bl	c608 <attMsgAlloc>
    c6ce:	b100      	cbz	r0, c6d2 <AttMsgAlloc+0x16>
    c6d0:	300b      	adds	r0, #11
    c6d2:	bd08      	pop	{r3, pc}
    c6d4:	2000      	movs	r0, #0
    c6d6:	e7fc      	b.n	c6d2 <AttMsgAlloc+0x16>

0000c6d8 <AttMsgFree>:
    c6d8:	291b      	cmp	r1, #27
    c6da:	d005      	beq.n	c6e8 <AttMsgFree+0x10>
    c6dc:	291d      	cmp	r1, #29
    c6de:	d003      	beq.n	c6e8 <AttMsgFree+0x10>
    c6e0:	2300      	movs	r3, #0
    c6e2:	1ac0      	subs	r0, r0, r3
    c6e4:	f00e b93a 	b.w	1a95c <WsfMsgFree>
    c6e8:	230b      	movs	r3, #11
    c6ea:	e7fa      	b.n	c6e2 <AttMsgFree+0xa>

0000c6ec <attcDiscDescriptors>:
    c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6ee:	680e      	ldr	r6, [r1, #0]
    c6f0:	7c8d      	ldrb	r5, [r1, #18]
    c6f2:	2200      	movs	r2, #0
    c6f4:	460b      	mov	r3, r1
    c6f6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    c6fa:	4611      	mov	r1, r2
    c6fc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    c700:	4696      	mov	lr, r2
    c702:	7c9c      	ldrb	r4, [r3, #18]
    c704:	7b1f      	ldrb	r7, [r3, #12]
    c706:	42a7      	cmp	r7, r4
    c708:	d809      	bhi.n	c71e <attcDiscDescriptors+0x32>
    c70a:	7c9c      	ldrb	r4, [r3, #18]
    c70c:	7b1d      	ldrb	r5, [r3, #12]
    c70e:	42a5      	cmp	r5, r4
    c710:	d12e      	bne.n	c770 <attcDiscDescriptors+0x84>
    c712:	2200      	movs	r2, #0
    c714:	b2d1      	uxtb	r1, r2
    c716:	428c      	cmp	r4, r1
    c718:	d81f      	bhi.n	c75a <attcDiscDescriptors+0x6e>
    c71a:	2000      	movs	r0, #0
    c71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c71e:	682f      	ldr	r7, [r5, #0]
    c720:	793f      	ldrb	r7, [r7, #4]
    c722:	077f      	lsls	r7, r7, #29
    c724:	d516      	bpl.n	c754 <attcDiscDescriptors+0x68>
    c726:	685f      	ldr	r7, [r3, #4]
    c728:	4464      	add	r4, ip
    c72a:	0062      	lsls	r2, r4, #1
    c72c:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
    c730:	1c94      	adds	r4, r2, #2
    c732:	3101      	adds	r1, #1
    c734:	5b3a      	ldrh	r2, [r7, r4]
    c736:	f827 e004 	strh.w	lr, [r7, r4]
    c73a:	b289      	uxth	r1, r1
    c73c:	4291      	cmp	r1, r2
    c73e:	d9e4      	bls.n	c70a <attcDiscDescriptors+0x1e>
    c740:	7c9c      	ldrb	r4, [r3, #18]
    c742:	7b1f      	ldrb	r7, [r3, #12]
    c744:	3401      	adds	r4, #1
    c746:	b2e4      	uxtb	r4, r4
    c748:	42bc      	cmp	r4, r7
    c74a:	d301      	bcc.n	c750 <attcDiscDescriptors+0x64>
    c74c:	749c      	strb	r4, [r3, #18]
    c74e:	e7d8      	b.n	c702 <attcDiscDescriptors+0x16>
    c750:	3504      	adds	r5, #4
    c752:	e7f7      	b.n	c744 <attcDiscDescriptors+0x58>
    c754:	3504      	adds	r5, #4
    c756:	3401      	adds	r4, #1
    c758:	e7f8      	b.n	c74c <attcDiscDescriptors+0x60>
    c75a:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    c75e:	7909      	ldrb	r1, [r1, #4]
    c760:	0789      	lsls	r1, r1, #30
    c762:	d503      	bpl.n	c76c <attcDiscDescriptors+0x80>
    c764:	6859      	ldr	r1, [r3, #4]
    c766:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    c76a:	b131      	cbz	r1, c77a <attcDiscDescriptors+0x8e>
    c76c:	3201      	adds	r2, #1
    c76e:	e7d1      	b.n	c714 <attcDiscDescriptors+0x28>
    c770:	2301      	movs	r3, #1
    c772:	f000 fd13 	bl	d19c <AttcFindInfoReq>
    c776:	2078      	movs	r0, #120	; 0x78
    c778:	e7d0      	b.n	c71c <attcDiscDescriptors+0x30>
    c77a:	2076      	movs	r0, #118	; 0x76
    c77c:	e7ce      	b.n	c71c <attcDiscDescriptors+0x30>

0000c77e <attcDiscConfigNext>:
    c77e:	b570      	push	{r4, r5, r6, lr}
    c780:	460a      	mov	r2, r1
    c782:	7c89      	ldrb	r1, [r1, #18]
    c784:	6893      	ldr	r3, [r2, #8]
    c786:	7b55      	ldrb	r5, [r2, #13]
    c788:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    c78c:	7c94      	ldrb	r4, [r2, #18]
    c78e:	42ac      	cmp	r4, r5
    c790:	d301      	bcc.n	c796 <attcDiscConfigNext+0x18>
    c792:	2000      	movs	r0, #0
    c794:	e00a      	b.n	c7ac <attcDiscConfigNext+0x2e>
    c796:	795e      	ldrb	r6, [r3, #5]
    c798:	6851      	ldr	r1, [r2, #4]
    c79a:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
    c79e:	b149      	cbz	r1, c7b4 <attcDiscConfigNext+0x36>
    c7a0:	791a      	ldrb	r2, [r3, #4]
    c7a2:	b122      	cbz	r2, c7ae <attcDiscConfigNext+0x30>
    c7a4:	681b      	ldr	r3, [r3, #0]
    c7a6:	f000 fd29 	bl	d1fc <AttcWriteReq>
    c7aa:	2078      	movs	r0, #120	; 0x78
    c7ac:	bd70      	pop	{r4, r5, r6, pc}
    c7ae:	f000 fd0d 	bl	d1cc <AttcReadReq>
    c7b2:	e7fa      	b.n	c7aa <attcDiscConfigNext+0x2c>
    c7b4:	3401      	adds	r4, #1
    c7b6:	7494      	strb	r4, [r2, #18]
    c7b8:	3308      	adds	r3, #8
    c7ba:	e7e7      	b.n	c78c <attcDiscConfigNext+0xe>

0000c7bc <attcUuidCmp>:
    c7bc:	b508      	push	{r3, lr}
    c7be:	7903      	ldrb	r3, [r0, #4]
    c7c0:	f003 0301 	and.w	r3, r3, #1
    c7c4:	429a      	cmp	r2, r3
    c7c6:	d10a      	bne.n	c7de <attcUuidCmp+0x22>
    c7c8:	2a00      	cmp	r2, #0
    c7ca:	bf0c      	ite	eq
    c7cc:	2202      	moveq	r2, #2
    c7ce:	2210      	movne	r2, #16
    c7d0:	6800      	ldr	r0, [r0, #0]
    c7d2:	f7ff fc95 	bl	c100 <memcmp>
    c7d6:	fab0 f080 	clz	r0, r0
    c7da:	0940      	lsrs	r0, r0, #5
    c7dc:	bd08      	pop	{r3, pc}
    c7de:	2a01      	cmp	r2, #1
    c7e0:	d105      	bne.n	c7ee <attcUuidCmp+0x32>
    c7e2:	b923      	cbnz	r3, c7ee <attcUuidCmp+0x32>
    c7e4:	6800      	ldr	r0, [r0, #0]
    c7e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c7ea:	f7ff becf 	b.w	c58c <attUuidCmp16to128>
    c7ee:	2000      	movs	r0, #0
    c7f0:	e7f4      	b.n	c7dc <attcUuidCmp+0x20>

0000c7f2 <AttcDiscService>:
    c7f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c7f4:	2100      	movs	r1, #0
    c7f6:	e9cd 3101 	strd	r3, r1, [sp, #4]
    c7fa:	9200      	str	r2, [sp, #0]
    c7fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c800:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c804:	2101      	movs	r1, #1
    c806:	f000 fd87 	bl	d318 <AttcFindByTypeValueReq>
    c80a:	b005      	add	sp, #20
    c80c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c810 <AttcDiscServiceCmpl>:
    c810:	b510      	push	{r4, lr}
    c812:	788b      	ldrb	r3, [r1, #2]
    c814:	2b03      	cmp	r3, #3
    c816:	d110      	bne.n	c83a <AttcDiscServiceCmpl+0x2a>
    c818:	78cb      	ldrb	r3, [r1, #3]
    c81a:	b963      	cbnz	r3, c836 <AttcDiscServiceCmpl+0x26>
    c81c:	890a      	ldrh	r2, [r1, #8]
    c81e:	b172      	cbz	r2, c83e <AttcDiscServiceCmpl+0x2e>
    c820:	684a      	ldr	r2, [r1, #4]
    c822:	7854      	ldrb	r4, [r2, #1]
    c824:	7811      	ldrb	r1, [r2, #0]
    c826:	eb01 2104 	add.w	r1, r1, r4, lsl #8
    c82a:	81c1      	strh	r1, [r0, #14]
    c82c:	78d1      	ldrb	r1, [r2, #3]
    c82e:	7892      	ldrb	r2, [r2, #2]
    c830:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    c834:	8202      	strh	r2, [r0, #16]
    c836:	4618      	mov	r0, r3
    c838:	bd10      	pop	{r4, pc}
    c83a:	2375      	movs	r3, #117	; 0x75
    c83c:	e7fb      	b.n	c836 <AttcDiscServiceCmpl+0x26>
    c83e:	230a      	movs	r3, #10
    c840:	e7f9      	b.n	c836 <AttcDiscServiceCmpl+0x26>

0000c842 <AttcDiscCharStart>:
    c842:	b507      	push	{r0, r1, r2, lr}
    c844:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    c848:	824b      	strh	r3, [r1, #18]
    c84a:	2301      	movs	r3, #1
    c84c:	8a0a      	ldrh	r2, [r1, #16]
    c84e:	89c9      	ldrh	r1, [r1, #14]
    c850:	9301      	str	r3, [sp, #4]
    c852:	4b04      	ldr	r3, [pc, #16]	; (c864 <AttcDiscCharStart+0x22>)
    c854:	9300      	str	r3, [sp, #0]
    c856:	2302      	movs	r3, #2
    c858:	f000 fd8e 	bl	d378 <AttcReadByTypeReq>
    c85c:	b003      	add	sp, #12
    c85e:	f85d fb04 	ldr.w	pc, [sp], #4
    c862:	bf00      	nop
    c864:	00025c74 	.word	0x00025c74

0000c868 <AttcDiscCharCmpl>:
    c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c86c:	788b      	ldrb	r3, [r1, #2]
    c86e:	2b04      	cmp	r3, #4
    c870:	b085      	sub	sp, #20
    c872:	4604      	mov	r4, r0
    c874:	460d      	mov	r5, r1
    c876:	d004      	beq.n	c882 <AttcDiscCharCmpl+0x1a>
    c878:	2b02      	cmp	r3, #2
    c87a:	f000 8089 	beq.w	c990 <AttcDiscCharCmpl+0x128>
    c87e:	2575      	movs	r5, #117	; 0x75
    c880:	e00b      	b.n	c89a <AttcDiscCharCmpl+0x32>
    c882:	f891 a003 	ldrb.w	sl, [r1, #3]
    c886:	f1ba 0f00 	cmp.w	sl, #0
    c88a:	d00a      	beq.n	c8a2 <AttcDiscCharCmpl+0x3a>
    c88c:	78eb      	ldrb	r3, [r5, #3]
    c88e:	2b00      	cmp	r3, #0
    c890:	d16b      	bne.n	c96a <AttcDiscCharCmpl+0x102>
    c892:	7b2b      	ldrb	r3, [r5, #12]
    c894:	2b00      	cmp	r3, #0
    c896:	d068      	beq.n	c96a <AttcDiscCharCmpl+0x102>
    c898:	2578      	movs	r5, #120	; 0x78
    c89a:	4628      	mov	r0, r5
    c89c:	b005      	add	sp, #20
    c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8a2:	684b      	ldr	r3, [r1, #4]
    c8a4:	f893 b000 	ldrb.w	fp, [r3]
    c8a8:	f1bb 0f07 	cmp.w	fp, #7
    c8ac:	d058      	beq.n	c960 <AttcDiscCharCmpl+0xf8>
    c8ae:	f1bb 0f15 	cmp.w	fp, #21
    c8b2:	d053      	beq.n	c95c <AttcDiscCharCmpl+0xf4>
    c8b4:	2573      	movs	r5, #115	; 0x73
    c8b6:	7b22      	ldrb	r2, [r4, #12]
    c8b8:	6860      	ldr	r0, [r4, #4]
    c8ba:	0052      	lsls	r2, r2, #1
    c8bc:	2100      	movs	r1, #0
    c8be:	f7ff fd4d 	bl	c35c <memset>
    c8c2:	e7ea      	b.n	c89a <AttcDiscCharCmpl+0x32>
    c8c4:	7872      	ldrb	r2, [r6, #1]
    c8c6:	7833      	ldrb	r3, [r6, #0]
    c8c8:	78f7      	ldrb	r7, [r6, #3]
    c8ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    c8ce:	7932      	ldrb	r2, [r6, #4]
    c8d0:	eb07 2702 	add.w	r7, r7, r2, lsl #8
    c8d4:	7ce2      	ldrb	r2, [r4, #19]
    c8d6:	2aff      	cmp	r2, #255	; 0xff
    c8d8:	b29b      	uxth	r3, r3
    c8da:	b2bf      	uxth	r7, r7
    c8dc:	d006      	beq.n	c8ec <AttcDiscCharCmpl+0x84>
    c8de:	6861      	ldr	r1, [r4, #4]
    c8e0:	1e58      	subs	r0, r3, #1
    c8e2:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    c8e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c8ea:	74e2      	strb	r2, [r4, #19]
    c8ec:	42bb      	cmp	r3, r7
    c8ee:	d304      	bcc.n	c8fa <AttcDiscCharCmpl+0x92>
    c8f0:	445e      	add	r6, fp
    c8f2:	9b01      	ldr	r3, [sp, #4]
    c8f4:	429e      	cmp	r6, r3
    c8f6:	d3e5      	bcc.n	c8c4 <AttcDiscCharCmpl+0x5c>
    c8f8:	e7c8      	b.n	c88c <AttcDiscCharCmpl+0x24>
    c8fa:	8a23      	ldrh	r3, [r4, #16]
    c8fc:	42bb      	cmp	r3, r7
    c8fe:	d3f7      	bcc.n	c8f0 <AttcDiscCharCmpl+0x88>
    c900:	1d72      	adds	r2, r6, #5
    c902:	6823      	ldr	r3, [r4, #0]
    c904:	9202      	str	r2, [sp, #8]
    c906:	f04f 0900 	mov.w	r9, #0
    c90a:	7b22      	ldrb	r2, [r4, #12]
    c90c:	fa5f f889 	uxtb.w	r8, r9
    c910:	4542      	cmp	r2, r8
    c912:	d9ed      	bls.n	c8f0 <AttcDiscCharCmpl+0x88>
    c914:	f108 0201 	add.w	r2, r8, #1
    c918:	b2d2      	uxtb	r2, r2
    c91a:	9200      	str	r2, [sp, #0]
    c91c:	6862      	ldr	r2, [r4, #4]
    c91e:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
    c922:	b9c2      	cbnz	r2, c956 <AttcDiscCharCmpl+0xee>
    c924:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    c928:	9902      	ldr	r1, [sp, #8]
    c92a:	9303      	str	r3, [sp, #12]
    c92c:	4652      	mov	r2, sl
    c92e:	f7ff ff45 	bl	c7bc <attcUuidCmp>
    c932:	9b03      	ldr	r3, [sp, #12]
    c934:	b178      	cbz	r0, c956 <AttcDiscCharCmpl+0xee>
    c936:	6862      	ldr	r2, [r4, #4]
    c938:	f822 7018 	strh.w	r7, [r2, r8, lsl #1]
    c93c:	7b22      	ldrb	r2, [r4, #12]
    c93e:	3a01      	subs	r2, #1
    c940:	4590      	cmp	r8, r2
    c942:	da08      	bge.n	c956 <AttcDiscCharCmpl+0xee>
    c944:	eb03 0289 	add.w	r2, r3, r9, lsl #2
    c948:	6852      	ldr	r2, [r2, #4]
    c94a:	7912      	ldrb	r2, [r2, #4]
    c94c:	0752      	lsls	r2, r2, #29
    c94e:	bf44      	itt	mi
    c950:	f89d 2000 	ldrbmi.w	r2, [sp]
    c954:	74e2      	strbmi	r2, [r4, #19]
    c956:	f109 0901 	add.w	r9, r9, #1
    c95a:	e7d6      	b.n	c90a <AttcDiscCharCmpl+0xa2>
    c95c:	f04f 0a01 	mov.w	sl, #1
    c960:	892a      	ldrh	r2, [r5, #8]
    c962:	1c5e      	adds	r6, r3, #1
    c964:	4413      	add	r3, r2
    c966:	9301      	str	r3, [sp, #4]
    c968:	e7c3      	b.n	c8f2 <AttcDiscCharCmpl+0x8a>
    c96a:	7ce3      	ldrb	r3, [r4, #19]
    c96c:	2bff      	cmp	r3, #255	; 0xff
    c96e:	bf1e      	ittt	ne
    c970:	6862      	ldrne	r2, [r4, #4]
    c972:	8a21      	ldrhne	r1, [r4, #16]
    c974:	f822 1013 	strhne.w	r1, [r2, r3, lsl #1]
    c978:	2300      	movs	r3, #0
    c97a:	74a3      	strb	r3, [r4, #18]
    c97c:	7828      	ldrb	r0, [r5, #0]
    c97e:	4621      	mov	r1, r4
    c980:	f7ff feb4 	bl	c6ec <attcDiscDescriptors>
    c984:	4605      	mov	r5, r0
    c986:	2800      	cmp	r0, #0
    c988:	d087      	beq.n	c89a <AttcDiscCharCmpl+0x32>
    c98a:	2878      	cmp	r0, #120	; 0x78
    c98c:	d193      	bne.n	c8b6 <AttcDiscCharCmpl+0x4e>
    c98e:	e783      	b.n	c898 <AttcDiscCharCmpl+0x30>
    c990:	f891 9003 	ldrb.w	r9, [r1, #3]
    c994:	f1b9 0f00 	cmp.w	r9, #0
    c998:	d014      	beq.n	c9c4 <AttcDiscCharCmpl+0x15c>
    c99a:	78eb      	ldrb	r3, [r5, #3]
    c99c:	b91b      	cbnz	r3, c9a6 <AttcDiscCharCmpl+0x13e>
    c99e:	7b2b      	ldrb	r3, [r5, #12]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	f47f af79 	bne.w	c898 <AttcDiscCharCmpl+0x30>
    c9a6:	7ca3      	ldrb	r3, [r4, #18]
    c9a8:	6822      	ldr	r2, [r4, #0]
    c9aa:	7b20      	ldrb	r0, [r4, #12]
    c9ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c9b0:	3301      	adds	r3, #1
    c9b2:	b2db      	uxtb	r3, r3
    c9b4:	4283      	cmp	r3, r0
    c9b6:	d0e0      	beq.n	c97a <AttcDiscCharCmpl+0x112>
    c9b8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    c9bc:	7909      	ldrb	r1, [r1, #4]
    c9be:	0749      	lsls	r1, r1, #29
    c9c0:	d4f6      	bmi.n	c9b0 <AttcDiscCharCmpl+0x148>
    c9c2:	e7da      	b.n	c97a <AttcDiscCharCmpl+0x112>
    c9c4:	684b      	ldr	r3, [r1, #4]
    c9c6:	781a      	ldrb	r2, [r3, #0]
    c9c8:	2a01      	cmp	r2, #1
    c9ca:	d037      	beq.n	ca3c <AttcDiscCharCmpl+0x1d4>
    c9cc:	2a02      	cmp	r2, #2
    c9ce:	f47f af71 	bne.w	c8b4 <AttcDiscCharCmpl+0x4c>
    c9d2:	f04f 0901 	mov.w	r9, #1
    c9d6:	f04f 0b12 	mov.w	fp, #18
    c9da:	e031      	b.n	ca40 <AttcDiscCharCmpl+0x1d8>
    c9dc:	7ca6      	ldrb	r6, [r4, #18]
    c9de:	f817 3c02 	ldrb.w	r3, [r7, #-2]
    c9e2:	9300      	str	r3, [sp, #0]
    c9e4:	ea4f 0886 	mov.w	r8, r6, lsl #2
    c9e8:	6823      	ldr	r3, [r4, #0]
    c9ea:	f817 ac01 	ldrb.w	sl, [r7, #-1]
    c9ee:	f1a8 0804 	sub.w	r8, r8, #4
    c9f2:	4498      	add	r8, r3
    c9f4:	7b23      	ldrb	r3, [r4, #12]
    c9f6:	42b3      	cmp	r3, r6
    c9f8:	d917      	bls.n	ca2a <AttcDiscCharCmpl+0x1c2>
    c9fa:	f858 0f04 	ldr.w	r0, [r8, #4]!
    c9fe:	7903      	ldrb	r3, [r0, #4]
    ca00:	075b      	lsls	r3, r3, #29
    ca02:	d512      	bpl.n	ca2a <AttcDiscCharCmpl+0x1c2>
    ca04:	b232      	sxth	r2, r6
    ca06:	6861      	ldr	r1, [r4, #4]
    ca08:	0053      	lsls	r3, r2, #1
    ca0a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    ca0e:	b992      	cbnz	r2, ca36 <AttcDiscCharCmpl+0x1ce>
    ca10:	464a      	mov	r2, r9
    ca12:	4639      	mov	r1, r7
    ca14:	9302      	str	r3, [sp, #8]
    ca16:	f7ff fed1 	bl	c7bc <attcUuidCmp>
    ca1a:	9b02      	ldr	r3, [sp, #8]
    ca1c:	b158      	cbz	r0, ca36 <AttcDiscCharCmpl+0x1ce>
    ca1e:	9900      	ldr	r1, [sp, #0]
    ca20:	6862      	ldr	r2, [r4, #4]
    ca22:	eb01 2a0a 	add.w	sl, r1, sl, lsl #8
    ca26:	f822 a003 	strh.w	sl, [r2, r3]
    ca2a:	445f      	add	r7, fp
    ca2c:	9a01      	ldr	r2, [sp, #4]
    ca2e:	1ebb      	subs	r3, r7, #2
    ca30:	4293      	cmp	r3, r2
    ca32:	d3d3      	bcc.n	c9dc <AttcDiscCharCmpl+0x174>
    ca34:	e7b1      	b.n	c99a <AttcDiscCharCmpl+0x132>
    ca36:	3601      	adds	r6, #1
    ca38:	b2f6      	uxtb	r6, r6
    ca3a:	e7db      	b.n	c9f4 <AttcDiscCharCmpl+0x18c>
    ca3c:	f04f 0b04 	mov.w	fp, #4
    ca40:	892a      	ldrh	r2, [r5, #8]
    ca42:	1cdf      	adds	r7, r3, #3
    ca44:	4413      	add	r3, r2
    ca46:	9301      	str	r3, [sp, #4]
    ca48:	e7f0      	b.n	ca2c <AttcDiscCharCmpl+0x1c4>

0000ca4a <AttcDiscConfigStart>:
    ca4a:	2200      	movs	r2, #0
    ca4c:	748a      	strb	r2, [r1, #18]
    ca4e:	e696      	b.n	c77e <attcDiscConfigNext>

0000ca50 <AttcDiscConfigCmpl>:
    ca50:	7c8b      	ldrb	r3, [r1, #18]
    ca52:	3301      	adds	r3, #1
    ca54:	748b      	strb	r3, [r1, #18]
    ca56:	e692      	b.n	c77e <attcDiscConfigNext>

0000ca58 <AttcDiscConfigResume>:
    ca58:	e691      	b.n	c77e <attcDiscConfigNext>
    ca5a:	bf00      	nop

0000ca5c <attcSendSimpleReq>:
    ca5c:	b570      	push	{r4, r5, r6, lr}
    ca5e:	2300      	movs	r3, #0
    ca60:	6945      	ldr	r5, [r0, #20]
    ca62:	6143      	str	r3, [r0, #20]
    ca64:	7c83      	ldrb	r3, [r0, #18]
    ca66:	2b0a      	cmp	r3, #10
    ca68:	4604      	mov	r4, r0
    ca6a:	d008      	beq.n	ca7e <attcSendSimpleReq+0x22>
    ca6c:	2310      	movs	r3, #16
    ca6e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    ca72:	4b07      	ldr	r3, [pc, #28]	; (ca90 <attcSendSimpleReq+0x34>)
    ca74:	681b      	ldr	r3, [r3, #0]
    ca76:	3024      	adds	r0, #36	; 0x24
    ca78:	7999      	ldrb	r1, [r3, #6]
    ca7a:	f00e f911 	bl	1aca0 <WsfTimerStartSec>
    ca7e:	6821      	ldr	r1, [r4, #0]
    ca80:	882a      	ldrh	r2, [r5, #0]
    ca82:	8b09      	ldrh	r1, [r1, #24]
    ca84:	462b      	mov	r3, r5
    ca86:	2004      	movs	r0, #4
    ca88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca8c:	f004 b8a2 	b.w	10bd4 <L2cDataReq>
    ca90:	10002b84 	.word	0x10002b84

0000ca94 <attcSendReq>:
    ca94:	7c82      	ldrb	r2, [r0, #18]
    ca96:	4b02      	ldr	r3, [pc, #8]	; (caa0 <attcSendReq+0xc>)
    ca98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ca9c:	4718      	bx	r3
    ca9e:	bf00      	nop
    caa0:	00025ca8 	.word	0x00025ca8

0000caa4 <attcSetupReq>:
    caa4:	b430      	push	{r4, r5}
    caa6:	460b      	mov	r3, r1
    caa8:	4604      	mov	r4, r0
    caaa:	f100 0510 	add.w	r5, r0, #16
    caae:	c907      	ldmia	r1, {r0, r1, r2}
    cab0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    cab4:	685a      	ldr	r2, [r3, #4]
    cab6:	e892 0003 	ldmia.w	r2, {r0, r1}
    caba:	f104 031c 	add.w	r3, r4, #28
    cabe:	e883 0003 	stmia.w	r3, {r0, r1}
    cac2:	4620      	mov	r0, r4
    cac4:	bc30      	pop	{r4, r5}
    cac6:	f7ff bfe5 	b.w	ca94 <attcSendReq>

0000caca <attcCcbByConnId>:
    caca:	b510      	push	{r4, lr}
    cacc:	4604      	mov	r4, r0
    cace:	f002 ffe5 	bl	fa9c <DmConnInUse>
    cad2:	b120      	cbz	r0, cade <attcCcbByConnId+0x14>
    cad4:	4b02      	ldr	r3, [pc, #8]	; (cae0 <attcCcbByConnId+0x16>)
    cad6:	3c01      	subs	r4, #1
    cad8:	2038      	movs	r0, #56	; 0x38
    cada:	fb00 3004 	mla	r0, r0, r4, r3
    cade:	bd10      	pop	{r4, pc}
    cae0:	100038ac 	.word	0x100038ac

0000cae4 <attcCcbByHandle>:
    cae4:	b508      	push	{r3, lr}
    cae6:	f002 ffc5 	bl	fa74 <DmConnIdByHandle>
    caea:	b120      	cbz	r0, caf6 <attcCcbByHandle+0x12>
    caec:	4b02      	ldr	r3, [pc, #8]	; (caf8 <attcCcbByHandle+0x14>)
    caee:	3801      	subs	r0, #1
    caf0:	2238      	movs	r2, #56	; 0x38
    caf2:	fb02 3000 	mla	r0, r2, r0, r3
    caf6:	bd08      	pop	{r3, pc}
    caf8:	100038ac 	.word	0x100038ac

0000cafc <attcDataCback>:
    cafc:	b570      	push	{r4, r5, r6, lr}
    cafe:	460d      	mov	r5, r1
    cb00:	4614      	mov	r4, r2
    cb02:	f7ff ffef 	bl	cae4 <attcCcbByHandle>
    cb06:	4606      	mov	r6, r0
    cb08:	b198      	cbz	r0, cb32 <attcDataCback+0x36>
    cb0a:	7a23      	ldrb	r3, [r4, #8]
    cb0c:	2b19      	cmp	r3, #25
    cb0e:	d805      	bhi.n	cb1c <attcDataCback+0x20>
    cb10:	4622      	mov	r2, r4
    cb12:	4629      	mov	r1, r5
    cb14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb18:	f000 ba5e 	b.w	cfd8 <attcProcRsp>
    cb1c:	2b1b      	cmp	r3, #27
    cb1e:	d001      	beq.n	cb24 <attcDataCback+0x28>
    cb20:	2b1d      	cmp	r3, #29
    cb22:	d106      	bne.n	cb32 <attcDataCback+0x36>
    cb24:	4622      	mov	r2, r4
    cb26:	4629      	mov	r1, r5
    cb28:	4630      	mov	r0, r6
    cb2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb2e:	f000 baaf 	b.w	d090 <attcProcInd>
    cb32:	bd70      	pop	{r4, r5, r6, pc}

0000cb34 <attcFreePkt>:
    cb34:	b510      	push	{r4, lr}
    cb36:	4604      	mov	r4, r0
    cb38:	6840      	ldr	r0, [r0, #4]
    cb3a:	b118      	cbz	r0, cb44 <attcFreePkt+0x10>
    cb3c:	f00d ff0e 	bl	1a95c <WsfMsgFree>
    cb40:	2300      	movs	r3, #0
    cb42:	6063      	str	r3, [r4, #4]
    cb44:	bd10      	pop	{r4, pc}

0000cb46 <attcSendMtuReq>:
    cb46:	b510      	push	{r4, lr}
    cb48:	6803      	ldr	r3, [r0, #0]
    cb4a:	7f5a      	ldrb	r2, [r3, #29]
    cb4c:	4604      	mov	r4, r0
    cb4e:	b12a      	cbz	r2, cb5c <attcSendMtuReq+0x16>
    cb50:	3010      	adds	r0, #16
    cb52:	f7ff ffef 	bl	cb34 <attcFreePkt>
    cb56:	2300      	movs	r3, #0
    cb58:	74a3      	strb	r3, [r4, #18]
    cb5a:	bd10      	pop	{r4, pc}
    cb5c:	2201      	movs	r2, #1
    cb5e:	775a      	strb	r2, [r3, #29]
    cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb64:	e77a      	b.n	ca5c <attcSendSimpleReq>

0000cb66 <attcExecCallback>:
    cb66:	2901      	cmp	r1, #1
    cb68:	b513      	push	{r0, r1, r4, lr}
    cb6a:	d003      	beq.n	cb74 <attcExecCallback+0xe>
    cb6c:	2400      	movs	r4, #0
    cb6e:	9400      	str	r4, [sp, #0]
    cb70:	f7ff fd1c 	bl	c5ac <attExecCallback>
    cb74:	b002      	add	sp, #8
    cb76:	bd10      	pop	{r4, pc}

0000cb78 <attcSendWriteCmd>:
    cb78:	b510      	push	{r4, lr}
    cb7a:	4604      	mov	r4, r0
    cb7c:	f7ff ff6e 	bl	ca5c <attcSendSimpleReq>
    cb80:	6820      	ldr	r0, [r4, #0]
    cb82:	8b22      	ldrh	r2, [r4, #24]
    cb84:	7f00      	ldrb	r0, [r0, #28]
    cb86:	2300      	movs	r3, #0
    cb88:	210a      	movs	r1, #10
    cb8a:	f7ff ffec 	bl	cb66 <attcExecCallback>
    cb8e:	2300      	movs	r3, #0
    cb90:	74a3      	strb	r3, [r4, #18]
    cb92:	bd10      	pop	{r4, pc}

0000cb94 <attcReqClear>:
    cb94:	b570      	push	{r4, r5, r6, lr}
    cb96:	4606      	mov	r6, r0
    cb98:	4608      	mov	r0, r1
    cb9a:	460c      	mov	r4, r1
    cb9c:	4615      	mov	r5, r2
    cb9e:	f7ff ffc9 	bl	cb34 <attcFreePkt>
    cba2:	6830      	ldr	r0, [r6, #0]
    cba4:	8922      	ldrh	r2, [r4, #8]
    cba6:	78a1      	ldrb	r1, [r4, #2]
    cba8:	7f00      	ldrb	r0, [r0, #28]
    cbaa:	462b      	mov	r3, r5
    cbac:	f7ff ffdb 	bl	cb66 <attcExecCallback>
    cbb0:	2300      	movs	r3, #0
    cbb2:	70a3      	strb	r3, [r4, #2]
    cbb4:	bd70      	pop	{r4, r5, r6, pc}

0000cbb6 <attcSendPrepWriteReq>:
    cbb6:	b570      	push	{r4, r5, r6, lr}
    cbb8:	7cc3      	ldrb	r3, [r0, #19]
    cbba:	8b85      	ldrh	r5, [r0, #28]
    cbbc:	2b01      	cmp	r3, #1
    cbbe:	4604      	mov	r4, r0
    cbc0:	d149      	bne.n	cc56 <attcSendPrepWriteReq+0xa0>
    cbc2:	6803      	ldr	r3, [r0, #0]
    cbc4:	8b5b      	ldrh	r3, [r3, #26]
    cbc6:	3b05      	subs	r3, #5
    cbc8:	429d      	cmp	r5, r3
    cbca:	bfa8      	it	ge
    cbcc:	b29d      	uxthge	r5, r3
    cbce:	f105 000d 	add.w	r0, r5, #13
    cbd2:	b280      	uxth	r0, r0
    cbd4:	f7ff fd18 	bl	c608 <attMsgAlloc>
    cbd8:	4606      	mov	r6, r0
    cbda:	2800      	cmp	r0, #0
    cbdc:	d033      	beq.n	cc46 <attcSendPrepWriteReq+0x90>
    cbde:	6963      	ldr	r3, [r4, #20]
    cbe0:	4602      	mov	r2, r0
    cbe2:	f103 010c 	add.w	r1, r3, #12
    cbe6:	f853 0b04 	ldr.w	r0, [r3], #4
    cbea:	f842 0b04 	str.w	r0, [r2], #4
    cbee:	428b      	cmp	r3, r1
    cbf0:	d1f9      	bne.n	cbe6 <attcSendPrepWriteReq+0x30>
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	7013      	strb	r3, [r2, #0]
    cbf6:	6a21      	ldr	r1, [r4, #32]
    cbf8:	462a      	mov	r2, r5
    cbfa:	f106 000d 	add.w	r0, r6, #13
    cbfe:	f7ff faaf 	bl	c160 <memcpy>
    cc02:	6a23      	ldr	r3, [r4, #32]
    cc04:	442b      	add	r3, r5
    cc06:	6223      	str	r3, [r4, #32]
    cc08:	8ba3      	ldrh	r3, [r4, #28]
    cc0a:	1b5b      	subs	r3, r3, r5
    cc0c:	83a3      	strh	r3, [r4, #28]
    cc0e:	8be3      	ldrh	r3, [r4, #30]
    cc10:	72f3      	strb	r3, [r6, #11]
    cc12:	8be3      	ldrh	r3, [r4, #30]
    cc14:	0a1b      	lsrs	r3, r3, #8
    cc16:	7333      	strb	r3, [r6, #12]
    cc18:	8be3      	ldrh	r3, [r4, #30]
    cc1a:	442b      	add	r3, r5
    cc1c:	83e3      	strh	r3, [r4, #30]
    cc1e:	2310      	movs	r3, #16
    cc20:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cc24:	4b0e      	ldr	r3, [pc, #56]	; (cc60 <attcSendPrepWriteReq+0xaa>)
    cc26:	681b      	ldr	r3, [r3, #0]
    cc28:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cc2c:	7999      	ldrb	r1, [r3, #6]
    cc2e:	f00e f837 	bl	1aca0 <WsfTimerStartSec>
    cc32:	6821      	ldr	r1, [r4, #0]
    cc34:	1d6a      	adds	r2, r5, #5
    cc36:	4633      	mov	r3, r6
    cc38:	b292      	uxth	r2, r2
    cc3a:	8b09      	ldrh	r1, [r1, #24]
    cc3c:	2004      	movs	r0, #4
    cc3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc42:	f003 bfc7 	b.w	10bd4 <L2cDataReq>
    cc46:	f104 0110 	add.w	r1, r4, #16
    cc4a:	4620      	mov	r0, r4
    cc4c:	2270      	movs	r2, #112	; 0x70
    cc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc52:	f7ff bf9f 	b.w	cb94 <attcReqClear>
    cc56:	2300      	movs	r3, #0
    cc58:	6946      	ldr	r6, [r0, #20]
    cc5a:	6143      	str	r3, [r0, #20]
    cc5c:	e7d7      	b.n	cc0e <attcSendPrepWriteReq+0x58>
    cc5e:	bf00      	nop
    cc60:	10002b84 	.word	0x10002b84

0000cc64 <attcSendContinuingReq>:
    cc64:	b570      	push	{r4, r5, r6, lr}
    cc66:	7cc3      	ldrb	r3, [r0, #19]
    cc68:	6945      	ldr	r5, [r0, #20]
    cc6a:	2b01      	cmp	r3, #1
    cc6c:	4604      	mov	r4, r0
    cc6e:	d12e      	bne.n	ccce <attcSendContinuingReq+0x6a>
    cc70:	8828      	ldrh	r0, [r5, #0]
    cc72:	3008      	adds	r0, #8
    cc74:	b280      	uxth	r0, r0
    cc76:	f7ff fcc7 	bl	c608 <attMsgAlloc>
    cc7a:	4605      	mov	r5, r0
    cc7c:	b1f8      	cbz	r0, ccbe <attcSendContinuingReq+0x5a>
    cc7e:	6961      	ldr	r1, [r4, #20]
    cc80:	880a      	ldrh	r2, [r1, #0]
    cc82:	3208      	adds	r2, #8
    cc84:	f7ff fa6c 	bl	c160 <memcpy>
    cc88:	7ca2      	ldrb	r2, [r4, #18]
    cc8a:	7fa3      	ldrb	r3, [r4, #30]
    cc8c:	2a06      	cmp	r2, #6
    cc8e:	d121      	bne.n	ccd4 <attcSendContinuingReq+0x70>
    cc90:	72eb      	strb	r3, [r5, #11]
    cc92:	8be3      	ldrh	r3, [r4, #30]
    cc94:	0a1b      	lsrs	r3, r3, #8
    cc96:	732b      	strb	r3, [r5, #12]
    cc98:	2310      	movs	r3, #16
    cc9a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cc9e:	4b11      	ldr	r3, [pc, #68]	; (cce4 <attcSendContinuingReq+0x80>)
    cca0:	681b      	ldr	r3, [r3, #0]
    cca2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cca6:	7999      	ldrb	r1, [r3, #6]
    cca8:	f00d fffa 	bl	1aca0 <WsfTimerStartSec>
    ccac:	6821      	ldr	r1, [r4, #0]
    ccae:	882a      	ldrh	r2, [r5, #0]
    ccb0:	8b09      	ldrh	r1, [r1, #24]
    ccb2:	462b      	mov	r3, r5
    ccb4:	2004      	movs	r0, #4
    ccb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ccba:	f003 bf8b 	b.w	10bd4 <L2cDataReq>
    ccbe:	f104 0110 	add.w	r1, r4, #16
    ccc2:	4620      	mov	r0, r4
    ccc4:	2270      	movs	r2, #112	; 0x70
    ccc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ccca:	f7ff bf63 	b.w	cb94 <attcReqClear>
    ccce:	2300      	movs	r3, #0
    ccd0:	6143      	str	r3, [r0, #20]
    ccd2:	e7d9      	b.n	cc88 <attcSendContinuingReq+0x24>
    ccd4:	726b      	strb	r3, [r5, #9]
    ccd6:	8be3      	ldrh	r3, [r4, #30]
    ccd8:	0a1b      	lsrs	r3, r3, #8
    ccda:	72ab      	strb	r3, [r5, #10]
    ccdc:	8c23      	ldrh	r3, [r4, #32]
    ccde:	72eb      	strb	r3, [r5, #11]
    cce0:	8c23      	ldrh	r3, [r4, #32]
    cce2:	e7d7      	b.n	cc94 <attcSendContinuingReq+0x30>
    cce4:	10002b84 	.word	0x10002b84

0000cce8 <attcConnCback>:
    cce8:	788b      	ldrb	r3, [r1, #2]
    ccea:	2b27      	cmp	r3, #39	; 0x27
    ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccf0:	4605      	mov	r5, r0
    ccf2:	d11a      	bne.n	cd2a <attcConnCback+0x42>
    ccf4:	7f00      	ldrb	r0, [r0, #28]
    ccf6:	f002 ff49 	bl	fb8c <DmConnRole>
    ccfa:	2800      	cmp	r0, #0
    ccfc:	d14c      	bne.n	cd98 <attcConnCback+0xb0>
    ccfe:	4c27      	ldr	r4, [pc, #156]	; (cd9c <attcConnCback+0xb4>)
    cd00:	6823      	ldr	r3, [r4, #0]
    cd02:	889e      	ldrh	r6, [r3, #4]
    cd04:	f009 f8a2 	bl	15e4c <HciGetMaxRxAclLen>
    cd08:	3804      	subs	r0, #4
    cd0a:	4286      	cmp	r6, r0
    cd0c:	da08      	bge.n	cd20 <attcConnCback+0x38>
    cd0e:	6823      	ldr	r3, [r4, #0]
    cd10:	8899      	ldrh	r1, [r3, #4]
    cd12:	2917      	cmp	r1, #23
    cd14:	d040      	beq.n	cd98 <attcConnCback+0xb0>
    cd16:	7f28      	ldrb	r0, [r5, #28]
    cd18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd1c:	f000 ba9c 	b.w	d258 <AttcMtuReq>
    cd20:	f009 f894 	bl	15e4c <HciGetMaxRxAclLen>
    cd24:	1f01      	subs	r1, r0, #4
    cd26:	b289      	uxth	r1, r1
    cd28:	e7f3      	b.n	cd12 <attcConnCback+0x2a>
    cd2a:	2b28      	cmp	r3, #40	; 0x28
    cd2c:	d134      	bne.n	cd98 <attcConnCback+0xb0>
    cd2e:	78cc      	ldrb	r4, [r1, #3]
    cd30:	b904      	cbnz	r4, cd34 <attcConnCback+0x4c>
    cd32:	7a0c      	ldrb	r4, [r1, #8]
    cd34:	7f2e      	ldrb	r6, [r5, #28]
    cd36:	4d1a      	ldr	r5, [pc, #104]	; (cda0 <attcConnCback+0xb8>)
    cd38:	3e01      	subs	r6, #1
    cd3a:	2738      	movs	r7, #56	; 0x38
    cd3c:	4377      	muls	r7, r6
    cd3e:	eb05 0807 	add.w	r8, r5, r7
    cd42:	3420      	adds	r4, #32
    cd44:	f898 3012 	ldrb.w	r3, [r8, #18]
    cd48:	b2e4      	uxtb	r4, r4
    cd4a:	b15b      	cbz	r3, cd64 <attcConnCback+0x7c>
    cd4c:	f107 0024 	add.w	r0, r7, #36	; 0x24
    cd50:	4428      	add	r0, r5
    cd52:	f00d ffcb 	bl	1acec <WsfTimerStop>
    cd56:	f107 0110 	add.w	r1, r7, #16
    cd5a:	4622      	mov	r2, r4
    cd5c:	4429      	add	r1, r5
    cd5e:	4640      	mov	r0, r8
    cd60:	f7ff ff18 	bl	cb94 <attcReqClear>
    cd64:	2338      	movs	r3, #56	; 0x38
    cd66:	fb03 5306 	mla	r3, r3, r6, r5
    cd6a:	799b      	ldrb	r3, [r3, #6]
    cd6c:	b12b      	cbz	r3, cd7a <attcConnCback+0x92>
    cd6e:	1d39      	adds	r1, r7, #4
    cd70:	4622      	mov	r2, r4
    cd72:	4429      	add	r1, r5
    cd74:	4640      	mov	r0, r8
    cd76:	f7ff ff0d 	bl	cb94 <attcReqClear>
    cd7a:	2338      	movs	r3, #56	; 0x38
    cd7c:	fb03 5606 	mla	r6, r3, r6, r5
    cd80:	3630      	adds	r6, #48	; 0x30
    cd82:	2300      	movs	r3, #0
    cd84:	80b3      	strh	r3, [r6, #4]
    cd86:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
    cd8a:	b12b      	cbz	r3, cd98 <attcConnCback+0xb0>
    cd8c:	4621      	mov	r1, r4
    cd8e:	4640      	mov	r0, r8
    cd90:	685b      	ldr	r3, [r3, #4]
    cd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd96:	4718      	bx	r3
    cd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd9c:	10002b84 	.word	0x10002b84
    cda0:	100038ac 	.word	0x100038ac

0000cda4 <attcMsgCback>:
    cda4:	b570      	push	{r4, r5, r6, lr}
    cda6:	4605      	mov	r5, r0
    cda8:	7800      	ldrb	r0, [r0, #0]
    cdaa:	f7ff fe8e 	bl	caca <attcCcbByConnId>
    cdae:	78ab      	ldrb	r3, [r5, #2]
    cdb0:	4604      	mov	r4, r0
    cdb2:	b938      	cbnz	r0, cdc4 <attcMsgCback+0x20>
    cdb4:	3b01      	subs	r3, #1
    cdb6:	2b0c      	cmp	r3, #12
    cdb8:	d81b      	bhi.n	cdf2 <attcMsgCback+0x4e>
    cdba:	4628      	mov	r0, r5
    cdbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdc0:	f7ff beb8 	b.w	cb34 <attcFreePkt>
    cdc4:	2b0c      	cmp	r3, #12
    cdc6:	d81a      	bhi.n	cdfe <attcMsgCback+0x5a>
    cdc8:	7983      	ldrb	r3, [r0, #6]
    cdca:	b913      	cbnz	r3, cdd2 <attcMsgCback+0x2e>
    cdcc:	7c83      	ldrb	r3, [r0, #18]
    cdce:	2b01      	cmp	r3, #1
    cdd0:	d906      	bls.n	cde0 <attcMsgCback+0x3c>
    cdd2:	2272      	movs	r2, #114	; 0x72
    cdd4:	4629      	mov	r1, r5
    cdd6:	4620      	mov	r0, r4
    cdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cddc:	f7ff beda 	b.w	cb94 <attcReqClear>
    cde0:	d002      	beq.n	cde8 <attcMsgCback+0x44>
    cde2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    cde6:	b12b      	cbz	r3, cdf4 <attcMsgCback+0x50>
    cde8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    cdec:	3404      	adds	r4, #4
    cdee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cdf2:	bd70      	pop	{r4, r5, r6, pc}
    cdf4:	4629      	mov	r1, r5
    cdf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdfa:	f7ff be53 	b.w	caa4 <attcSetupReq>
    cdfe:	f1a3 020d 	sub.w	r2, r3, #13
    ce02:	2a01      	cmp	r2, #1
    ce04:	d809      	bhi.n	ce1a <attcMsgCback+0x76>
    ce06:	4b15      	ldr	r3, [pc, #84]	; (ce5c <attcMsgCback+0xb8>)
    ce08:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d0f0      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce10:	4629      	mov	r1, r5
    ce12:	681b      	ldr	r3, [r3, #0]
    ce14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ce18:	4718      	bx	r3
    ce1a:	2b0f      	cmp	r3, #15
    ce1c:	d10f      	bne.n	ce3e <attcMsgCback+0x9a>
    ce1e:	7c83      	ldrb	r3, [r0, #18]
    ce20:	2b01      	cmp	r3, #1
    ce22:	d906      	bls.n	ce32 <attcMsgCback+0x8e>
    ce24:	3024      	adds	r0, #36	; 0x24
    ce26:	f00d ff61 	bl	1acec <WsfTimerStop>
    ce2a:	2274      	movs	r2, #116	; 0x74
    ce2c:	f104 0110 	add.w	r1, r4, #16
    ce30:	e7d1      	b.n	cdd6 <attcMsgCback+0x32>
    ce32:	7983      	ldrb	r3, [r0, #6]
    ce34:	2b00      	cmp	r3, #0
    ce36:	d0dc      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce38:	2274      	movs	r2, #116	; 0x74
    ce3a:	1d01      	adds	r1, r0, #4
    ce3c:	e7cc      	b.n	cdd8 <attcMsgCback+0x34>
    ce3e:	2b10      	cmp	r3, #16
    ce40:	d1d7      	bne.n	cdf2 <attcMsgCback+0x4e>
    ce42:	7c83      	ldrb	r3, [r0, #18]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d0d4      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce48:	2271      	movs	r2, #113	; 0x71
    ce4a:	f100 0110 	add.w	r1, r0, #16
    ce4e:	f7ff fea1 	bl	cb94 <attcReqClear>
    ce52:	6823      	ldr	r3, [r4, #0]
    ce54:	2201      	movs	r2, #1
    ce56:	77da      	strb	r2, [r3, #31]
    ce58:	e7cb      	b.n	cdf2 <attcMsgCback+0x4e>
    ce5a:	bf00      	nop
    ce5c:	100038ac 	.word	0x100038ac

0000ce60 <AttcInit>:
    ce60:	b510      	push	{r4, lr}
    ce62:	490c      	ldr	r1, [pc, #48]	; (ce94 <AttcInit+0x34>)
    ce64:	4a0c      	ldr	r2, [pc, #48]	; (ce98 <AttcInit+0x38>)
    ce66:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    ce6a:	2300      	movs	r3, #0
    ce6c:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    ce70:	3238      	adds	r2, #56	; 0x38
    ce72:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    ce76:	3301      	adds	r3, #1
    ce78:	2b08      	cmp	r3, #8
    ce7a:	f842 4c38 	str.w	r4, [r2, #-56]
    ce7e:	f802 0c0c 	strb.w	r0, [r2, #-12]
    ce82:	f822 3c0a 	strh.w	r3, [r2, #-10]
    ce86:	f102 0238 	add.w	r2, r2, #56	; 0x38
    ce8a:	d1f2      	bne.n	ce72 <AttcInit+0x12>
    ce8c:	4b03      	ldr	r3, [pc, #12]	; (ce9c <AttcInit+0x3c>)
    ce8e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ce92:	bd10      	pop	{r4, pc}
    ce94:	10003798 	.word	0x10003798
    ce98:	100038ac 	.word	0x100038ac
    ce9c:	00025cdc 	.word	0x00025cdc

0000cea0 <attcProcErrRsp>:
    cea0:	7c81      	ldrb	r1, [r0, #18]
    cea2:	7099      	strb	r1, [r3, #2]
    cea4:	1f48      	subs	r0, r1, #5
    cea6:	2801      	cmp	r0, #1
    cea8:	d908      	bls.n	cebc <attcProcErrRsp+0x1c>
    ceaa:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    ceae:	2909      	cmp	r1, #9
    ceb0:	bf1f      	itttt	ne
    ceb2:	7ad0      	ldrbne	r0, [r2, #11]
    ceb4:	7a91      	ldrbne	r1, [r2, #10]
    ceb6:	eb01 2100 	addne.w	r1, r1, r0, lsl #8
    ceba:	8159      	strhne	r1, [r3, #10]
    cebc:	7b12      	ldrb	r2, [r2, #12]
    cebe:	b11a      	cbz	r2, cec8 <attcProcErrRsp+0x28>
    cec0:	70da      	strb	r2, [r3, #3]
    cec2:	2200      	movs	r2, #0
    cec4:	811a      	strh	r2, [r3, #8]
    cec6:	4770      	bx	lr
    cec8:	2275      	movs	r2, #117	; 0x75
    ceca:	e7f9      	b.n	cec0 <attcProcErrRsp+0x20>

0000cecc <attcProcFindOrReadRsp>:
    cecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ced0:	7c87      	ldrb	r7, [r0, #18]
    ced2:	7a55      	ldrb	r5, [r2, #9]
    ced4:	3108      	adds	r1, #8
    ced6:	2f02      	cmp	r7, #2
    ced8:	4411      	add	r1, r2
    ceda:	f102 020a 	add.w	r2, r2, #10
    cede:	d12a      	bne.n	cf36 <attcProcFindOrReadRsp+0x6a>
    cee0:	2d01      	cmp	r5, #1
    cee2:	bf14      	ite	ne
    cee4:	2510      	movne	r5, #16
    cee6:	2502      	moveq	r5, #2
    cee8:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    ceec:	f64f 7eff 	movw	lr, #65535	; 0xffff
    cef0:	428a      	cmp	r2, r1
    cef2:	d210      	bcs.n	cf16 <attcProcFindOrReadRsp+0x4a>
    cef4:	7854      	ldrb	r4, [r2, #1]
    cef6:	7816      	ldrb	r6, [r2, #0]
    cef8:	eb06 2604 	add.w	r6, r6, r4, lsl #8
    cefc:	b2b6      	uxth	r6, r6
    cefe:	b146      	cbz	r6, cf12 <attcProcFindOrReadRsp+0x46>
    cf00:	f1bc 0f00 	cmp.w	ip, #0
    cf04:	d005      	beq.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf06:	45b4      	cmp	ip, r6
    cf08:	d803      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf0a:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    cf0e:	45b0      	cmp	r8, r6
    cf10:	d217      	bcs.n	cf42 <attcProcFindOrReadRsp+0x76>
    cf12:	2273      	movs	r2, #115	; 0x73
    cf14:	70da      	strb	r2, [r3, #3]
    cf16:	78db      	ldrb	r3, [r3, #3]
    cf18:	b95b      	cbnz	r3, cf32 <attcProcFindOrReadRsp+0x66>
    cf1a:	7cc3      	ldrb	r3, [r0, #19]
    cf1c:	2b01      	cmp	r3, #1
    cf1e:	d108      	bne.n	cf32 <attcProcFindOrReadRsp+0x66>
    cf20:	f1bc 0f00 	cmp.w	ip, #0
    cf24:	d003      	beq.n	cf2e <attcProcFindOrReadRsp+0x62>
    cf26:	8c03      	ldrh	r3, [r0, #32]
    cf28:	3301      	adds	r3, #1
    cf2a:	459c      	cmp	ip, r3
    cf2c:	d129      	bne.n	cf82 <attcProcFindOrReadRsp+0xb6>
    cf2e:	2300      	movs	r3, #0
    cf30:	74c3      	strb	r3, [r0, #19]
    cf32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cf36:	2f04      	cmp	r7, #4
    cf38:	bf0c      	ite	eq
    cf3a:	3d02      	subeq	r5, #2
    cf3c:	3d04      	subne	r5, #4
    cf3e:	b2ed      	uxtb	r5, r5
    cf40:	e7d2      	b.n	cee8 <attcProcFindOrReadRsp+0x1c>
    cf42:	2f08      	cmp	r7, #8
    cf44:	d11a      	bne.n	cf7c <attcProcFindOrReadRsp+0xb0>
    cf46:	f892 9003 	ldrb.w	r9, [r2, #3]
    cf4a:	7894      	ldrb	r4, [r2, #2]
    cf4c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
    cf50:	b2a4      	uxth	r4, r4
    cf52:	3204      	adds	r2, #4
    cf54:	2c00      	cmp	r4, #0
    cf56:	d0dc      	beq.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf58:	42a6      	cmp	r6, r4
    cf5a:	d8da      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf5c:	45a4      	cmp	ip, r4
    cf5e:	d8d8      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf60:	45a0      	cmp	r8, r4
    cf62:	d3d6      	bcc.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf64:	4574      	cmp	r4, lr
    cf66:	bf18      	it	ne
    cf68:	3401      	addne	r4, #1
    cf6a:	442a      	add	r2, r5
    cf6c:	bf14      	ite	ne
    cf6e:	fa1f fc84 	uxthne.w	ip, r4
    cf72:	f04f 0c00 	moveq.w	ip, #0
    cf76:	4291      	cmp	r1, r2
    cf78:	d2ba      	bcs.n	cef0 <attcProcFindOrReadRsp+0x24>
    cf7a:	e7ca      	b.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf7c:	3202      	adds	r2, #2
    cf7e:	4634      	mov	r4, r6
    cf80:	e7f0      	b.n	cf64 <attcProcFindOrReadRsp+0x98>
    cf82:	f8a0 c01e 	strh.w	ip, [r0, #30]
    cf86:	f8a0 c018 	strh.w	ip, [r0, #24]
    cf8a:	e7d2      	b.n	cf32 <attcProcFindOrReadRsp+0x66>

0000cf8c <attcProcReadRsp>:
    cf8c:	4770      	bx	lr

0000cf8e <attcProcWriteRsp>:
    cf8e:	2200      	movs	r2, #0
    cf90:	811a      	strh	r2, [r3, #8]
    cf92:	4770      	bx	lr

0000cf94 <attcProcMtuRsp>:
    cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf96:	7a93      	ldrb	r3, [r2, #10]
    cf98:	7a54      	ldrb	r4, [r2, #9]
    cf9a:	4d0e      	ldr	r5, [pc, #56]	; (cfd4 <attcProcMtuRsp+0x40>)
    cf9c:	6806      	ldr	r6, [r0, #0]
    cf9e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    cfa2:	b2a4      	uxth	r4, r4
    cfa4:	682b      	ldr	r3, [r5, #0]
    cfa6:	2c17      	cmp	r4, #23
    cfa8:	bf38      	it	cc
    cfaa:	2417      	movcc	r4, #23
    cfac:	889f      	ldrh	r7, [r3, #4]
    cfae:	f008 ff4d 	bl	15e4c <HciGetMaxRxAclLen>
    cfb2:	3804      	subs	r0, #4
    cfb4:	4287      	cmp	r7, r0
    cfb6:	da07      	bge.n	cfc8 <attcProcMtuRsp+0x34>
    cfb8:	682b      	ldr	r3, [r5, #0]
    cfba:	889a      	ldrh	r2, [r3, #4]
    cfbc:	4621      	mov	r1, r4
    cfbe:	4630      	mov	r0, r6
    cfc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cfc4:	f7ff bb0e 	b.w	c5e4 <attSetMtu>
    cfc8:	f008 ff40 	bl	15e4c <HciGetMaxRxAclLen>
    cfcc:	1f02      	subs	r2, r0, #4
    cfce:	b292      	uxth	r2, r2
    cfd0:	e7f4      	b.n	cfbc <attcProcMtuRsp+0x28>
    cfd2:	bf00      	nop
    cfd4:	10002b84 	.word	0x10002b84

0000cfd8 <attcProcRsp>:
    cfd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cfdc:	460f      	mov	r7, r1
    cfde:	7c81      	ldrb	r1, [r0, #18]
    cfe0:	4604      	mov	r4, r0
    cfe2:	4616      	mov	r6, r2
    cfe4:	2900      	cmp	r1, #0
    cfe6:	d042      	beq.n	d06e <attcProcRsp+0x96>
    cfe8:	7a13      	ldrb	r3, [r2, #8]
    cfea:	105b      	asrs	r3, r3, #1
    cfec:	b2da      	uxtb	r2, r3
    cfee:	f88d 2002 	strb.w	r2, [sp, #2]
    cff2:	b10b      	cbz	r3, cff8 <attcProcRsp+0x20>
    cff4:	4291      	cmp	r1, r2
    cff6:	d13a      	bne.n	d06e <attcProcRsp+0x96>
    cff8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cffc:	f00d fe76 	bl	1acec <WsfTimerStop>
    d000:	f106 0309 	add.w	r3, r6, #9
    d004:	9301      	str	r3, [sp, #4]
    d006:	1e7b      	subs	r3, r7, #1
    d008:	f8ad 3008 	strh.w	r3, [sp, #8]
    d00c:	8b23      	ldrh	r3, [r4, #24]
    d00e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    d012:	f8ad 300a 	strh.w	r3, [sp, #10]
    d016:	4b1c      	ldr	r3, [pc, #112]	; (d088 <attcProcRsp+0xb0>)
    d018:	2500      	movs	r5, #0
    d01a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    d01e:	f88d 5003 	strb.w	r5, [sp, #3]
    d022:	466b      	mov	r3, sp
    d024:	4632      	mov	r2, r6
    d026:	4639      	mov	r1, r7
    d028:	4620      	mov	r0, r4
    d02a:	47c0      	blx	r8
    d02c:	7ce3      	ldrb	r3, [r4, #19]
    d02e:	b113      	cbz	r3, d036 <attcProcRsp+0x5e>
    d030:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d034:	b123      	cbz	r3, d040 <attcProcRsp+0x68>
    d036:	74a5      	strb	r5, [r4, #18]
    d038:	f104 0010 	add.w	r0, r4, #16
    d03c:	f7ff fd7a 	bl	cb34 <attcFreePkt>
    d040:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d044:	2b01      	cmp	r3, #1
    d046:	d00a      	beq.n	d05e <attcProcRsp+0x86>
    d048:	7ce3      	ldrb	r3, [r4, #19]
    d04a:	f88d 300c 	strb.w	r3, [sp, #12]
    d04e:	8a23      	ldrh	r3, [r4, #16]
    d050:	f8ad 3000 	strh.w	r3, [sp]
    d054:	4b0d      	ldr	r3, [pc, #52]	; (d08c <attcProcRsp+0xb4>)
    d056:	4668      	mov	r0, sp
    d058:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d05c:	4798      	blx	r3
    d05e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d062:	b923      	cbnz	r3, d06e <attcProcRsp+0x96>
    d064:	6965      	ldr	r5, [r4, #20]
    d066:	b12d      	cbz	r5, d074 <attcProcRsp+0x9c>
    d068:	4620      	mov	r0, r4
    d06a:	f7ff fd13 	bl	ca94 <attcSendReq>
    d06e:	b004      	add	sp, #16
    d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d074:	79a3      	ldrb	r3, [r4, #6]
    d076:	2b00      	cmp	r3, #0
    d078:	d0f9      	beq.n	d06e <attcProcRsp+0x96>
    d07a:	1d21      	adds	r1, r4, #4
    d07c:	4620      	mov	r0, r4
    d07e:	f7ff fd11 	bl	caa4 <attcSetupReq>
    d082:	71a5      	strb	r5, [r4, #6]
    d084:	e7f3      	b.n	d06e <attcProcRsp+0x96>
    d086:	bf00      	nop
    d088:	00025cec 	.word	0x00025cec
    d08c:	10003798 	.word	0x10003798

0000d090 <attcProcInd>:
    d090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d092:	7a13      	ldrb	r3, [r2, #8]
    d094:	4604      	mov	r4, r0
    d096:	105b      	asrs	r3, r3, #1
    d098:	7a90      	ldrb	r0, [r2, #10]
    d09a:	f88d 3002 	strb.w	r3, [sp, #2]
    d09e:	320b      	adds	r2, #11
    d0a0:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    d0a4:	9201      	str	r2, [sp, #4]
    d0a6:	6822      	ldr	r2, [r4, #0]
    d0a8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    d0ac:	7f12      	ldrb	r2, [r2, #28]
    d0ae:	f8ad 2000 	strh.w	r2, [sp]
    d0b2:	b29b      	uxth	r3, r3
    d0b4:	2200      	movs	r2, #0
    d0b6:	3903      	subs	r1, #3
    d0b8:	f8ad 300a 	strh.w	r3, [sp, #10]
    d0bc:	f8ad 1008 	strh.w	r1, [sp, #8]
    d0c0:	f88d 2003 	strb.w	r2, [sp, #3]
    d0c4:	f88d 200c 	strb.w	r2, [sp, #12]
    d0c8:	b123      	cbz	r3, d0d4 <attcProcInd+0x44>
    d0ca:	4b0f      	ldr	r3, [pc, #60]	; (d108 <attcProcInd+0x78>)
    d0cc:	4668      	mov	r0, sp
    d0ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d0d2:	4798      	blx	r3
    d0d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d0d8:	2b0e      	cmp	r3, #14
    d0da:	d10f      	bne.n	d0fc <attcProcInd+0x6c>
    d0dc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d0e0:	b973      	cbnz	r3, d100 <attcProcInd+0x70>
    d0e2:	2009      	movs	r0, #9
    d0e4:	f7ff fa90 	bl	c608 <attMsgAlloc>
    d0e8:	4603      	mov	r3, r0
    d0ea:	b138      	cbz	r0, d0fc <attcProcInd+0x6c>
    d0ec:	221e      	movs	r2, #30
    d0ee:	7202      	strb	r2, [r0, #8]
    d0f0:	6821      	ldr	r1, [r4, #0]
    d0f2:	2201      	movs	r2, #1
    d0f4:	8b09      	ldrh	r1, [r1, #24]
    d0f6:	2004      	movs	r0, #4
    d0f8:	f003 fd6c 	bl	10bd4 <L2cDataReq>
    d0fc:	b004      	add	sp, #16
    d0fe:	bd10      	pop	{r4, pc}
    d100:	2301      	movs	r3, #1
    d102:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    d106:	e7f9      	b.n	d0fc <attcProcInd+0x6c>
    d108:	10003798 	.word	0x10003798

0000d10c <attcSendMsg>:
    d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d110:	4605      	mov	r5, r0
    d112:	460f      	mov	r7, r1
    d114:	4616      	mov	r6, r2
    d116:	461c      	mov	r4, r3
    d118:	f89d 8020 	ldrb.w	r8, [sp, #32]
    d11c:	f00e fa52 	bl	1b5c4 <WsfTaskLock>
    d120:	4628      	mov	r0, r5
    d122:	f7ff fcd2 	bl	caca <attcCcbByConnId>
    d126:	b920      	cbnz	r0, d132 <attcSendMsg+0x26>
    d128:	f00e fa52 	bl	1b5d0 <WsfTaskUnlock>
    d12c:	bb7c      	cbnz	r4, d18e <attcSendMsg+0x82>
    d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d132:	6803      	ldr	r3, [r0, #0]
    d134:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    d138:	f00e fa4a 	bl	1b5d0 <WsfTaskUnlock>
    d13c:	f1b9 0f00 	cmp.w	r9, #0
    d140:	d0f4      	beq.n	d12c <attcSendMsg+0x20>
    d142:	b124      	cbz	r4, d14e <attcSendMsg+0x42>
    d144:	2e0b      	cmp	r6, #11
    d146:	d015      	beq.n	d174 <attcSendMsg+0x68>
    d148:	8823      	ldrh	r3, [r4, #0]
    d14a:	454b      	cmp	r3, r9
    d14c:	d819      	bhi.n	d182 <attcSendMsg+0x76>
    d14e:	200c      	movs	r0, #12
    d150:	f00d fbed 	bl	1a92e <WsfMsgAlloc>
    d154:	4601      	mov	r1, r0
    d156:	2800      	cmp	r0, #0
    d158:	d0e8      	beq.n	d12c <attcSendMsg+0x20>
    d15a:	4b0f      	ldr	r3, [pc, #60]	; (d198 <attcSendMsg+0x8c>)
    d15c:	8005      	strh	r5, [r0, #0]
    d15e:	f880 8003 	strb.w	r8, [r0, #3]
    d162:	7086      	strb	r6, [r0, #2]
    d164:	6044      	str	r4, [r0, #4]
    d166:	8107      	strh	r7, [r0, #8]
    d168:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d16c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d170:	f00d bc01 	b.w	1a976 <WsfMsgSend>
    d174:	f1b8 0f00 	cmp.w	r8, #0
    d178:	d1e9      	bne.n	d14e <attcSendMsg+0x42>
    d17a:	8823      	ldrh	r3, [r4, #0]
    d17c:	3305      	adds	r3, #5
    d17e:	b29b      	uxth	r3, r3
    d180:	e7e3      	b.n	d14a <attcSendMsg+0x3e>
    d182:	2377      	movs	r3, #119	; 0x77
    d184:	463a      	mov	r2, r7
    d186:	4631      	mov	r1, r6
    d188:	4628      	mov	r0, r5
    d18a:	f7ff fcec 	bl	cb66 <attcExecCallback>
    d18e:	4620      	mov	r0, r4
    d190:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d194:	f00d bbe2 	b.w	1a95c <WsfMsgFree>
    d198:	10003798 	.word	0x10003798

0000d19c <AttcFindInfoReq>:
    d19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d19e:	4605      	mov	r5, r0
    d1a0:	200d      	movs	r0, #13
    d1a2:	460c      	mov	r4, r1
    d1a4:	4617      	mov	r7, r2
    d1a6:	461e      	mov	r6, r3
    d1a8:	f7ff fa2e 	bl	c608 <attMsgAlloc>
    d1ac:	b160      	cbz	r0, d1c8 <AttcFindInfoReq+0x2c>
    d1ae:	2305      	movs	r3, #5
    d1b0:	8003      	strh	r3, [r0, #0]
    d1b2:	2304      	movs	r3, #4
    d1b4:	7203      	strb	r3, [r0, #8]
    d1b6:	8044      	strh	r4, [r0, #2]
    d1b8:	8087      	strh	r7, [r0, #4]
    d1ba:	4603      	mov	r3, r0
    d1bc:	9600      	str	r6, [sp, #0]
    d1be:	2202      	movs	r2, #2
    d1c0:	4621      	mov	r1, r4
    d1c2:	4628      	mov	r0, r5
    d1c4:	f7ff ffa2 	bl	d10c <attcSendMsg>
    d1c8:	b003      	add	sp, #12
    d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d1cc <AttcReadReq>:
    d1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d1ce:	4605      	mov	r5, r0
    d1d0:	200b      	movs	r0, #11
    d1d2:	460c      	mov	r4, r1
    d1d4:	f7ff fa18 	bl	c608 <attMsgAlloc>
    d1d8:	4603      	mov	r3, r0
    d1da:	b168      	cbz	r0, d1f8 <AttcReadReq+0x2c>
    d1dc:	2203      	movs	r2, #3
    d1de:	8002      	strh	r2, [r0, #0]
    d1e0:	220a      	movs	r2, #10
    d1e2:	7202      	strb	r2, [r0, #8]
    d1e4:	0a22      	lsrs	r2, r4, #8
    d1e6:	7282      	strb	r2, [r0, #10]
    d1e8:	2200      	movs	r2, #0
    d1ea:	7244      	strb	r4, [r0, #9]
    d1ec:	4621      	mov	r1, r4
    d1ee:	9200      	str	r2, [sp, #0]
    d1f0:	4628      	mov	r0, r5
    d1f2:	2205      	movs	r2, #5
    d1f4:	f7ff ff8a 	bl	d10c <attcSendMsg>
    d1f8:	b003      	add	sp, #12
    d1fa:	bd30      	pop	{r4, r5, pc}

0000d1fc <AttcWriteReq>:
    d1fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d200:	4607      	mov	r7, r0
    d202:	f102 000b 	add.w	r0, r2, #11
    d206:	b280      	uxth	r0, r0
    d208:	460d      	mov	r5, r1
    d20a:	4616      	mov	r6, r2
    d20c:	4698      	mov	r8, r3
    d20e:	f7ff f9fb 	bl	c608 <attMsgAlloc>
    d212:	4604      	mov	r4, r0
    d214:	b198      	cbz	r0, d23e <AttcWriteReq+0x42>
    d216:	1cf3      	adds	r3, r6, #3
    d218:	8003      	strh	r3, [r0, #0]
    d21a:	2312      	movs	r3, #18
    d21c:	7203      	strb	r3, [r0, #8]
    d21e:	0a2b      	lsrs	r3, r5, #8
    d220:	7283      	strb	r3, [r0, #10]
    d222:	7245      	strb	r5, [r0, #9]
    d224:	4632      	mov	r2, r6
    d226:	4641      	mov	r1, r8
    d228:	300b      	adds	r0, #11
    d22a:	f7fe ff99 	bl	c160 <memcpy>
    d22e:	2300      	movs	r3, #0
    d230:	9300      	str	r3, [sp, #0]
    d232:	2209      	movs	r2, #9
    d234:	4623      	mov	r3, r4
    d236:	4629      	mov	r1, r5
    d238:	4638      	mov	r0, r7
    d23a:	f7ff ff67 	bl	d10c <attcSendMsg>
    d23e:	b002      	add	sp, #8
    d240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d244 <AttcCancelReq>:
    d244:	b507      	push	{r0, r1, r2, lr}
    d246:	2300      	movs	r3, #0
    d248:	9300      	str	r3, [sp, #0]
    d24a:	220f      	movs	r2, #15
    d24c:	4619      	mov	r1, r3
    d24e:	f7ff ff5d 	bl	d10c <attcSendMsg>
    d252:	b003      	add	sp, #12
    d254:	f85d fb04 	ldr.w	pc, [sp], #4

0000d258 <AttcMtuReq>:
    d258:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d25a:	4605      	mov	r5, r0
    d25c:	200b      	movs	r0, #11
    d25e:	460c      	mov	r4, r1
    d260:	f7ff f9d2 	bl	c608 <attMsgAlloc>
    d264:	4603      	mov	r3, r0
    d266:	b160      	cbz	r0, d282 <AttcMtuReq+0x2a>
    d268:	2203      	movs	r2, #3
    d26a:	8002      	strh	r2, [r0, #0]
    d26c:	7244      	strb	r4, [r0, #9]
    d26e:	2202      	movs	r2, #2
    d270:	0a24      	lsrs	r4, r4, #8
    d272:	2100      	movs	r1, #0
    d274:	7202      	strb	r2, [r0, #8]
    d276:	7284      	strb	r4, [r0, #10]
    d278:	2201      	movs	r2, #1
    d27a:	9100      	str	r1, [sp, #0]
    d27c:	4628      	mov	r0, r5
    d27e:	f7ff ff45 	bl	d10c <attcSendMsg>
    d282:	b003      	add	sp, #12
    d284:	bd30      	pop	{r4, r5, pc}
    d286:	bf00      	nop

0000d288 <attcProcFindByTypeRsp>:
    d288:	b5f0      	push	{r4, r5, r6, r7, lr}
    d28a:	3108      	adds	r1, #8
    d28c:	8bc5      	ldrh	r5, [r0, #30]
    d28e:	f102 0609 	add.w	r6, r2, #9
    d292:	440a      	add	r2, r1
    d294:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d298:	4296      	cmp	r6, r2
    d29a:	d217      	bcs.n	d2cc <attcProcFindByTypeRsp+0x44>
    d29c:	7874      	ldrb	r4, [r6, #1]
    d29e:	7837      	ldrb	r7, [r6, #0]
    d2a0:	f896 c003 	ldrb.w	ip, [r6, #3]
    d2a4:	eb07 2704 	add.w	r7, r7, r4, lsl #8
    d2a8:	78b4      	ldrb	r4, [r6, #2]
    d2aa:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    d2ae:	b2bf      	uxth	r7, r7
    d2b0:	b2a4      	uxth	r4, r4
    d2b2:	42a7      	cmp	r7, r4
    d2b4:	f106 0604 	add.w	r6, r6, #4
    d2b8:	d806      	bhi.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2ba:	42bd      	cmp	r5, r7
    d2bc:	d804      	bhi.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2be:	f8b0 c020 	ldrh.w	ip, [r0, #32]
    d2c2:	45bc      	cmp	ip, r7
    d2c4:	d300      	bcc.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2c6:	b96d      	cbnz	r5, d2e4 <attcProcFindByTypeRsp+0x5c>
    d2c8:	2273      	movs	r2, #115	; 0x73
    d2ca:	70da      	strb	r2, [r3, #3]
    d2cc:	78db      	ldrb	r3, [r3, #3]
    d2ce:	b943      	cbnz	r3, d2e2 <attcProcFindByTypeRsp+0x5a>
    d2d0:	7cc3      	ldrb	r3, [r0, #19]
    d2d2:	2b01      	cmp	r3, #1
    d2d4:	d105      	bne.n	d2e2 <attcProcFindByTypeRsp+0x5a>
    d2d6:	b115      	cbz	r5, d2de <attcProcFindByTypeRsp+0x56>
    d2d8:	8c03      	ldrh	r3, [r0, #32]
    d2da:	42ab      	cmp	r3, r5
    d2dc:	d20a      	bcs.n	d2f4 <attcProcFindByTypeRsp+0x6c>
    d2de:	2300      	movs	r3, #0
    d2e0:	74c3      	strb	r3, [r0, #19]
    d2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2e4:	428c      	cmp	r4, r1
    d2e6:	bf1a      	itte	ne
    d2e8:	3401      	addne	r4, #1
    d2ea:	b2a5      	uxthne	r5, r4
    d2ec:	2500      	moveq	r5, #0
    d2ee:	42b2      	cmp	r2, r6
    d2f0:	d2d2      	bcs.n	d298 <attcProcFindByTypeRsp+0x10>
    d2f2:	e7e9      	b.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2f4:	83c5      	strh	r5, [r0, #30]
    d2f6:	8305      	strh	r5, [r0, #24]
    d2f8:	e7f3      	b.n	d2e2 <attcProcFindByTypeRsp+0x5a>

0000d2fa <attcProcReadLongRsp>:
    d2fa:	7cc2      	ldrb	r2, [r0, #19]
    d2fc:	2a01      	cmp	r2, #1
    d2fe:	d10a      	bne.n	d316 <attcProcReadLongRsp+0x1c>
    d300:	6802      	ldr	r2, [r0, #0]
    d302:	8b52      	ldrh	r2, [r2, #26]
    d304:	428a      	cmp	r2, r1
    d306:	d902      	bls.n	d30e <attcProcReadLongRsp+0x14>
    d308:	2300      	movs	r3, #0
    d30a:	74c3      	strb	r3, [r0, #19]
    d30c:	4770      	bx	lr
    d30e:	8bc2      	ldrh	r2, [r0, #30]
    d310:	891b      	ldrh	r3, [r3, #8]
    d312:	4413      	add	r3, r2
    d314:	83c3      	strh	r3, [r0, #30]
    d316:	4770      	bx	lr

0000d318 <AttcFindByTypeValueReq>:
    d318:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d31c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    d320:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    d324:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    d328:	4680      	mov	r8, r0
    d32a:	f106 000f 	add.w	r0, r6, #15
    d32e:	b280      	uxth	r0, r0
    d330:	460f      	mov	r7, r1
    d332:	4693      	mov	fp, r2
    d334:	461d      	mov	r5, r3
    d336:	f7ff f967 	bl	c608 <attMsgAlloc>
    d33a:	4604      	mov	r4, r0
    d33c:	b1c8      	cbz	r0, d372 <AttcFindByTypeValueReq+0x5a>
    d33e:	1df3      	adds	r3, r6, #7
    d340:	8003      	strh	r3, [r0, #0]
    d342:	7345      	strb	r5, [r0, #13]
    d344:	2306      	movs	r3, #6
    d346:	0a2d      	lsrs	r5, r5, #8
    d348:	8047      	strh	r7, [r0, #2]
    d34a:	f8a0 b004 	strh.w	fp, [r0, #4]
    d34e:	7203      	strb	r3, [r0, #8]
    d350:	7385      	strb	r5, [r0, #14]
    d352:	4632      	mov	r2, r6
    d354:	4651      	mov	r1, sl
    d356:	300f      	adds	r0, #15
    d358:	f7fe ff02 	bl	c160 <memcpy>
    d35c:	4623      	mov	r3, r4
    d35e:	2203      	movs	r2, #3
    d360:	4639      	mov	r1, r7
    d362:	4640      	mov	r0, r8
    d364:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d368:	b001      	add	sp, #4
    d36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d36e:	f7ff becd 	b.w	d10c <attcSendMsg>
    d372:	b001      	add	sp, #4
    d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d378 <AttcReadByTypeReq>:
    d378:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d37c:	b29d      	uxth	r5, r3
    d37e:	4680      	mov	r8, r0
    d380:	f105 000d 	add.w	r0, r5, #13
    d384:	460e      	mov	r6, r1
    d386:	4693      	mov	fp, r2
    d388:	461f      	mov	r7, r3
    d38a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d38e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d392:	f7ff f939 	bl	c608 <attMsgAlloc>
    d396:	4604      	mov	r4, r0
    d398:	b1b0      	cbz	r0, d3c8 <AttcReadByTypeReq+0x50>
    d39a:	2308      	movs	r3, #8
    d39c:	3505      	adds	r5, #5
    d39e:	8005      	strh	r5, [r0, #0]
    d3a0:	8046      	strh	r6, [r0, #2]
    d3a2:	f8a0 b004 	strh.w	fp, [r0, #4]
    d3a6:	7203      	strb	r3, [r0, #8]
    d3a8:	463a      	mov	r2, r7
    d3aa:	4651      	mov	r1, sl
    d3ac:	300d      	adds	r0, #13
    d3ae:	f7fe fed7 	bl	c160 <memcpy>
    d3b2:	4623      	mov	r3, r4
    d3b4:	2204      	movs	r2, #4
    d3b6:	4631      	mov	r1, r6
    d3b8:	4640      	mov	r0, r8
    d3ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d3be:	b001      	add	sp, #4
    d3c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3c4:	f7ff bea2 	b.w	d10c <attcSendMsg>
    d3c8:	b001      	add	sp, #4
    d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d3ce <AttcReadLongReq>:
    d3ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d3d0:	4605      	mov	r5, r0
    d3d2:	200d      	movs	r0, #13
    d3d4:	460c      	mov	r4, r1
    d3d6:	4617      	mov	r7, r2
    d3d8:	461e      	mov	r6, r3
    d3da:	f7ff f915 	bl	c608 <attMsgAlloc>
    d3de:	b170      	cbz	r0, d3fe <AttcReadLongReq+0x30>
    d3e0:	2305      	movs	r3, #5
    d3e2:	8003      	strh	r3, [r0, #0]
    d3e4:	230c      	movs	r3, #12
    d3e6:	7203      	strb	r3, [r0, #8]
    d3e8:	0a23      	lsrs	r3, r4, #8
    d3ea:	7283      	strb	r3, [r0, #10]
    d3ec:	8047      	strh	r7, [r0, #2]
    d3ee:	7244      	strb	r4, [r0, #9]
    d3f0:	4603      	mov	r3, r0
    d3f2:	9600      	str	r6, [sp, #0]
    d3f4:	2206      	movs	r2, #6
    d3f6:	4621      	mov	r1, r4
    d3f8:	4628      	mov	r0, r5
    d3fa:	f7ff fe87 	bl	d10c <attcSendMsg>
    d3fe:	b003      	add	sp, #12
    d400:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d402 <AttcReadMultipleReq>:
    d402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d404:	004e      	lsls	r6, r1, #1
    d406:	4607      	mov	r7, r0
    d408:	f106 0009 	add.w	r0, r6, #9
    d40c:	460d      	mov	r5, r1
    d40e:	4614      	mov	r4, r2
    d410:	f7ff f8fa 	bl	c608 <attMsgAlloc>
    d414:	4603      	mov	r3, r0
    d416:	b1a0      	cbz	r0, d442 <AttcReadMultipleReq+0x40>
    d418:	3601      	adds	r6, #1
    d41a:	4622      	mov	r2, r4
    d41c:	8006      	strh	r6, [r0, #0]
    d41e:	200e      	movs	r0, #14
    d420:	f832 1902 	ldrh.w	r1, [r2], #-2
    d424:	7218      	strb	r0, [r3, #8]
    d426:	f103 0009 	add.w	r0, r3, #9
    d42a:	3d01      	subs	r5, #1
    d42c:	b2ed      	uxtb	r5, r5
    d42e:	2dff      	cmp	r5, #255	; 0xff
    d430:	f100 0002 	add.w	r0, r0, #2
    d434:	d107      	bne.n	d446 <AttcReadMultipleReq+0x44>
    d436:	2200      	movs	r2, #0
    d438:	9200      	str	r2, [sp, #0]
    d43a:	4638      	mov	r0, r7
    d43c:	2207      	movs	r2, #7
    d43e:	f7ff fe65 	bl	d10c <attcSendMsg>
    d442:	b003      	add	sp, #12
    d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d446:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    d44a:	f800 4c02 	strb.w	r4, [r0, #-2]
    d44e:	8814      	ldrh	r4, [r2, #0]
    d450:	0a24      	lsrs	r4, r4, #8
    d452:	f800 4c01 	strb.w	r4, [r0, #-1]
    d456:	e7e8      	b.n	d42a <AttcReadMultipleReq+0x28>

0000d458 <AttcReadByGroupTypeReq>:
    d458:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d45c:	b29d      	uxth	r5, r3
    d45e:	4680      	mov	r8, r0
    d460:	f105 000d 	add.w	r0, r5, #13
    d464:	460e      	mov	r6, r1
    d466:	4693      	mov	fp, r2
    d468:	461f      	mov	r7, r3
    d46a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d46e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d472:	f7ff f8c9 	bl	c608 <attMsgAlloc>
    d476:	4604      	mov	r4, r0
    d478:	b1b0      	cbz	r0, d4a8 <AttcReadByGroupTypeReq+0x50>
    d47a:	2310      	movs	r3, #16
    d47c:	3505      	adds	r5, #5
    d47e:	8005      	strh	r5, [r0, #0]
    d480:	8046      	strh	r6, [r0, #2]
    d482:	f8a0 b004 	strh.w	fp, [r0, #4]
    d486:	7203      	strb	r3, [r0, #8]
    d488:	463a      	mov	r2, r7
    d48a:	4651      	mov	r1, sl
    d48c:	300d      	adds	r0, #13
    d48e:	f7fe fe67 	bl	c160 <memcpy>
    d492:	4623      	mov	r3, r4
    d494:	2208      	movs	r2, #8
    d496:	4631      	mov	r1, r6
    d498:	4640      	mov	r0, r8
    d49a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d49e:	b001      	add	sp, #4
    d4a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4a4:	f7ff be32 	b.w	d10c <attcSendMsg>
    d4a8:	b001      	add	sp, #4
    d4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d4ae <attcProcPrepWriteRsp>:
    d4ae:	7cc2      	ldrb	r2, [r0, #19]
    d4b0:	2a01      	cmp	r2, #1
    d4b2:	d102      	bne.n	d4ba <attcProcPrepWriteRsp+0xc>
    d4b4:	8b82      	ldrh	r2, [r0, #28]
    d4b6:	b902      	cbnz	r2, d4ba <attcProcPrepWriteRsp+0xc>
    d4b8:	74c2      	strb	r2, [r0, #19]
    d4ba:	2200      	movs	r2, #0
    d4bc:	811a      	strh	r2, [r3, #8]
    d4be:	4770      	bx	lr

0000d4c0 <AttcWriteCmd>:
    d4c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d4c4:	4607      	mov	r7, r0
    d4c6:	f102 000b 	add.w	r0, r2, #11
    d4ca:	b280      	uxth	r0, r0
    d4cc:	460d      	mov	r5, r1
    d4ce:	4616      	mov	r6, r2
    d4d0:	4698      	mov	r8, r3
    d4d2:	f7ff f899 	bl	c608 <attMsgAlloc>
    d4d6:	4604      	mov	r4, r0
    d4d8:	b198      	cbz	r0, d502 <AttcWriteCmd+0x42>
    d4da:	1cf3      	adds	r3, r6, #3
    d4dc:	8003      	strh	r3, [r0, #0]
    d4de:	2352      	movs	r3, #82	; 0x52
    d4e0:	7203      	strb	r3, [r0, #8]
    d4e2:	0a2b      	lsrs	r3, r5, #8
    d4e4:	7283      	strb	r3, [r0, #10]
    d4e6:	7245      	strb	r5, [r0, #9]
    d4e8:	4632      	mov	r2, r6
    d4ea:	4641      	mov	r1, r8
    d4ec:	300b      	adds	r0, #11
    d4ee:	f7fe fe37 	bl	c160 <memcpy>
    d4f2:	2300      	movs	r3, #0
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	220a      	movs	r2, #10
    d4f8:	4623      	mov	r3, r4
    d4fa:	4629      	mov	r1, r5
    d4fc:	4638      	mov	r0, r7
    d4fe:	f7ff fe05 	bl	d10c <attcSendMsg>
    d502:	b002      	add	sp, #8
    d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d508 <AttcPrepareWriteReq>:
    d508:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    d510:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d514:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    d518:	4607      	mov	r7, r0
    d51a:	460d      	mov	r5, r1
    d51c:	4693      	mov	fp, r2
    d51e:	4698      	mov	r8, r3
    d520:	b116      	cbz	r6, d528 <AttcPrepareWriteReq+0x20>
    d522:	f1ba 0f00 	cmp.w	sl, #0
    d526:	d11f      	bne.n	d568 <AttcPrepareWriteReq+0x60>
    d528:	f108 000d 	add.w	r0, r8, #13
    d52c:	b280      	uxth	r0, r0
    d52e:	f7ff f86b 	bl	c608 <attMsgAlloc>
    d532:	4604      	mov	r4, r0
    d534:	b310      	cbz	r0, d57c <AttcPrepareWriteReq+0x74>
    d536:	2316      	movs	r3, #22
    d538:	7203      	strb	r3, [r0, #8]
    d53a:	0a2b      	lsrs	r3, r5, #8
    d53c:	f8a0 8000 	strh.w	r8, [r0]
    d540:	f8a0 b002 	strh.w	fp, [r0, #2]
    d544:	7245      	strb	r5, [r0, #9]
    d546:	7283      	strb	r3, [r0, #10]
    d548:	b186      	cbz	r6, d56c <AttcPrepareWriteReq+0x64>
    d54a:	f1ba 0f00 	cmp.w	sl, #0
    d54e:	d00d      	beq.n	d56c <AttcPrepareWriteReq+0x64>
    d550:	f8c0 9004 	str.w	r9, [r0, #4]
    d554:	4623      	mov	r3, r4
    d556:	220b      	movs	r2, #11
    d558:	4629      	mov	r1, r5
    d55a:	4638      	mov	r0, r7
    d55c:	960a      	str	r6, [sp, #40]	; 0x28
    d55e:	b001      	add	sp, #4
    d560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d564:	f7ff bdd2 	b.w	d10c <attcSendMsg>
    d568:	200d      	movs	r0, #13
    d56a:	e7e0      	b.n	d52e <AttcPrepareWriteReq+0x26>
    d56c:	f104 000d 	add.w	r0, r4, #13
    d570:	4642      	mov	r2, r8
    d572:	4649      	mov	r1, r9
    d574:	f7fe fdf4 	bl	c160 <memcpy>
    d578:	6060      	str	r0, [r4, #4]
    d57a:	e7eb      	b.n	d554 <AttcPrepareWriteReq+0x4c>
    d57c:	b001      	add	sp, #4
    d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d582 <AttcExecuteWriteReq>:
    d582:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d584:	4604      	mov	r4, r0
    d586:	200a      	movs	r0, #10
    d588:	460d      	mov	r5, r1
    d58a:	f7ff f83d 	bl	c608 <attMsgAlloc>
    d58e:	4603      	mov	r3, r0
    d590:	b150      	cbz	r0, d5a8 <AttcExecuteWriteReq+0x26>
    d592:	2202      	movs	r2, #2
    d594:	8002      	strh	r2, [r0, #0]
    d596:	2100      	movs	r1, #0
    d598:	2218      	movs	r2, #24
    d59a:	7202      	strb	r2, [r0, #8]
    d59c:	7245      	strb	r5, [r0, #9]
    d59e:	220c      	movs	r2, #12
    d5a0:	9100      	str	r1, [sp, #0]
    d5a2:	4620      	mov	r0, r4
    d5a4:	f7ff fdb2 	bl	d10c <attcSendMsg>
    d5a8:	b003      	add	sp, #12
    d5aa:	bd30      	pop	{r4, r5, pc}

0000d5ac <attsCccMainCback>:
    d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5ae:	4d2e      	ldr	r5, [pc, #184]	; (d668 <attsCccMainCback+0xbc>)
    d5b0:	2905      	cmp	r1, #5
    d5b2:	b085      	sub	sp, #20
    d5b4:	6a2e      	ldr	r6, [r5, #32]
    d5b6:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
    d5ba:	f04f 0100 	mov.w	r1, #0
    d5be:	d041      	beq.n	d644 <attsCccMainCback+0x98>
    d5c0:	b2cf      	uxtb	r7, r1
    d5c2:	4567      	cmp	r7, ip
    d5c4:	d340      	bcc.n	d648 <attsCccMainCback+0x9c>
    d5c6:	d048      	beq.n	d65a <attsCccMainCback+0xae>
    d5c8:	785c      	ldrb	r4, [r3, #1]
    d5ca:	781b      	ldrb	r3, [r3, #0]
    d5cc:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    d5d0:	b29b      	uxth	r3, r3
    d5d2:	2b02      	cmp	r3, #2
    d5d4:	d844      	bhi.n	d660 <attsCccMainCback+0xb4>
    d5d6:	b113      	cbz	r3, d5de <attsCccMainCback+0x32>
    d5d8:	8874      	ldrh	r4, [r6, #2]
    d5da:	4223      	tst	r3, r4
    d5dc:	d040      	beq.n	d660 <attsCccMainCback+0xb4>
    d5de:	1e44      	subs	r4, r0, #1
    d5e0:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    d5e4:	2c00      	cmp	r4, #0
    d5e6:	d03d      	beq.n	d664 <attsCccMainCback+0xb8>
    d5e8:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
    d5ec:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
    d5f0:	42b3      	cmp	r3, r6
    d5f2:	d025      	beq.n	d640 <attsCccMainCback+0x94>
    d5f4:	2110      	movs	r1, #16
    d5f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    d5fa:	f8ad 300a 	strh.w	r3, [sp, #10]
    d5fe:	f88d 1006 	strb.w	r1, [sp, #6]
    d602:	f88d 700c 	strb.w	r7, [sp, #12]
    d606:	f8ad 2008 	strh.w	r2, [sp, #8]
    d60a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d60c:	a801      	add	r0, sp, #4
    d60e:	4798      	blx	r3
    d610:	e016      	b.n	d640 <attsCccMainCback+0x94>
    d612:	1c4c      	adds	r4, r1, #1
    d614:	fb07 6e04 	mla	lr, r7, r4, r6
    d618:	f83e ec06 	ldrh.w	lr, [lr, #-6]
    d61c:	4596      	cmp	lr, r2
    d61e:	d004      	beq.n	d62a <attsCccMainCback+0x7e>
    d620:	4621      	mov	r1, r4
    d622:	b2cc      	uxtb	r4, r1
    d624:	4564      	cmp	r4, ip
    d626:	d3f4      	bcc.n	d612 <attsCccMainCback+0x66>
    d628:	d017      	beq.n	d65a <attsCccMainCback+0xae>
    d62a:	3801      	subs	r0, #1
    d62c:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
    d630:	b1c2      	cbz	r2, d664 <attsCccMainCback+0xb8>
    d632:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    d636:	7018      	strb	r0, [r3, #0]
    d638:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    d63c:	0a12      	lsrs	r2, r2, #8
    d63e:	705a      	strb	r2, [r3, #1]
    d640:	2000      	movs	r0, #0
    d642:	e00b      	b.n	d65c <attsCccMainCback+0xb0>
    d644:	2706      	movs	r7, #6
    d646:	e7ec      	b.n	d622 <attsCccMainCback+0x76>
    d648:	f8b6 e000 	ldrh.w	lr, [r6]
    d64c:	4596      	cmp	lr, r2
    d64e:	f101 0401 	add.w	r4, r1, #1
    d652:	d0b9      	beq.n	d5c8 <attsCccMainCback+0x1c>
    d654:	3606      	adds	r6, #6
    d656:	4621      	mov	r1, r4
    d658:	e7b2      	b.n	d5c0 <attsCccMainCback+0x14>
    d65a:	200a      	movs	r0, #10
    d65c:	b005      	add	sp, #20
    d65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d660:	2080      	movs	r0, #128	; 0x80
    d662:	e7fb      	b.n	d65c <attsCccMainCback+0xb0>
    d664:	2011      	movs	r0, #17
    d666:	e7f9      	b.n	d65c <attsCccMainCback+0xb0>
    d668:	10003a70 	.word	0x10003a70

0000d66c <AttsCccRegister>:
    d66c:	4b04      	ldr	r3, [pc, #16]	; (d680 <AttsCccRegister+0x14>)
    d66e:	e9c3 1208 	strd	r1, r2, [r3, #32]
    d672:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    d676:	4b03      	ldr	r3, [pc, #12]	; (d684 <AttsCccRegister+0x18>)
    d678:	4a03      	ldr	r2, [pc, #12]	; (d688 <AttsCccRegister+0x1c>)
    d67a:	615a      	str	r2, [r3, #20]
    d67c:	4770      	bx	lr
    d67e:	bf00      	nop
    d680:	10003a70 	.word	0x10003a70
    d684:	10003bfc 	.word	0x10003bfc
    d688:	0000d5ad 	.word	0x0000d5ad

0000d68c <AttsCccInitTable>:
    d68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d690:	1e45      	subs	r5, r0, #1
    d692:	4c1e      	ldr	r4, [pc, #120]	; (d70c <AttsCccInitTable+0x80>)
    d694:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    d698:	4607      	mov	r7, r0
    d69a:	460e      	mov	r6, r1
    d69c:	b933      	cbnz	r3, d6ac <AttsCccInitTable+0x20>
    d69e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d6a2:	0040      	lsls	r0, r0, #1
    d6a4:	f00d f8b4 	bl	1a810 <WsfBufAlloc>
    d6a8:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    d6ac:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
    d6b0:	f1b8 0f00 	cmp.w	r8, #0
    d6b4:	d022      	beq.n	d6fc <AttsCccInitTable+0x70>
    d6b6:	bb26      	cbnz	r6, d702 <AttsCccInitTable+0x76>
    d6b8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d6bc:	4631      	mov	r1, r6
    d6be:	0052      	lsls	r2, r2, #1
    d6c0:	4640      	mov	r0, r8
    d6c2:	f7fe fe4b 	bl	c35c <memset>
    d6c6:	e019      	b.n	d6fc <AttsCccInitTable+0x70>
    d6c8:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d6cc:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    d6d0:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d6d4:	b162      	cbz	r2, d6f0 <AttsCccInitTable+0x64>
    d6d6:	f88d 300c 	strb.w	r3, [sp, #12]
    d6da:	f88d 9006 	strb.w	r9, [sp, #6]
    d6de:	f8ad 7004 	strh.w	r7, [sp, #4]
    d6e2:	f8ad a008 	strh.w	sl, [sp, #8]
    d6e6:	f8ad 200a 	strh.w	r2, [sp, #10]
    d6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d6ec:	a801      	add	r0, sp, #4
    d6ee:	4798      	blx	r3
    d6f0:	3501      	adds	r5, #1
    d6f2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d6f6:	b2eb      	uxtb	r3, r5
    d6f8:	429a      	cmp	r2, r3
    d6fa:	d8e5      	bhi.n	d6c8 <AttsCccInitTable+0x3c>
    d6fc:	b004      	add	sp, #16
    d6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d702:	2500      	movs	r5, #0
    d704:	f04f 0910 	mov.w	r9, #16
    d708:	46aa      	mov	sl, r5
    d70a:	e7f2      	b.n	d6f2 <AttsCccInitTable+0x66>
    d70c:	10003a70 	.word	0x10003a70

0000d710 <AttsCccClearTable>:
    d710:	b538      	push	{r3, r4, r5, lr}
    d712:	1e45      	subs	r5, r0, #1
    d714:	4c04      	ldr	r4, [pc, #16]	; (d728 <AttsCccClearTable+0x18>)
    d716:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    d71a:	b120      	cbz	r0, d726 <AttsCccClearTable+0x16>
    d71c:	f00d f8b8 	bl	1a890 <WsfBufFree>
    d720:	2300      	movs	r3, #0
    d722:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
    d726:	bd38      	pop	{r3, r4, r5, pc}
    d728:	10003a70 	.word	0x10003a70

0000d72c <AttsCccGet>:
    d72c:	3801      	subs	r0, #1
    d72e:	4b03      	ldr	r3, [pc, #12]	; (d73c <AttsCccGet+0x10>)
    d730:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    d734:	b108      	cbz	r0, d73a <AttsCccGet+0xe>
    d736:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    d73a:	4770      	bx	lr
    d73c:	10003a70 	.word	0x10003a70

0000d740 <AttsCccSet>:
    d740:	3801      	subs	r0, #1
    d742:	4b03      	ldr	r3, [pc, #12]	; (d750 <AttsCccSet+0x10>)
    d744:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d748:	b10b      	cbz	r3, d74e <AttsCccSet+0xe>
    d74a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    d74e:	4770      	bx	lr
    d750:	10003a70 	.word	0x10003a70

0000d754 <AttsCccEnabled>:
    d754:	b538      	push	{r3, r4, r5, lr}
    d756:	460c      	mov	r4, r1
    d758:	4605      	mov	r5, r0
    d75a:	f002 f9e3 	bl	fb24 <DmConnSecLevel>
    d75e:	4b08      	ldr	r3, [pc, #32]	; (d780 <AttsCccEnabled+0x2c>)
    d760:	6a1b      	ldr	r3, [r3, #32]
    d762:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d766:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    d76a:	791b      	ldrb	r3, [r3, #4]
    d76c:	4283      	cmp	r3, r0
    d76e:	d805      	bhi.n	d77c <AttsCccEnabled+0x28>
    d770:	4621      	mov	r1, r4
    d772:	4628      	mov	r0, r5
    d774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d778:	f7ff bfd8 	b.w	d72c <AttsCccGet>
    d77c:	2000      	movs	r0, #0
    d77e:	bd38      	pop	{r3, r4, r5, pc}
    d780:	10003a70 	.word	0x10003a70

0000d784 <attsIndCcbByConnId>:
    d784:	b510      	push	{r4, lr}
    d786:	4604      	mov	r4, r0
    d788:	f002 f988 	bl	fa9c <DmConnInUse>
    d78c:	b120      	cbz	r0, d798 <attsIndCcbByConnId+0x14>
    d78e:	4b03      	ldr	r3, [pc, #12]	; (d79c <attsIndCcbByConnId+0x18>)
    d790:	3c01      	subs	r4, #1
    d792:	202c      	movs	r0, #44	; 0x2c
    d794:	fb00 3004 	mla	r0, r0, r4, r3
    d798:	bd10      	pop	{r4, pc}
    d79a:	bf00      	nop
    d79c:	10003a9c 	.word	0x10003a9c

0000d7a0 <attsExecCallback>:
    d7a0:	b507      	push	{r0, r1, r2, lr}
    d7a2:	2300      	movs	r3, #0
    d7a4:	9300      	str	r3, [sp, #0]
    d7a6:	4613      	mov	r3, r2
    d7a8:	460a      	mov	r2, r1
    d7aa:	210f      	movs	r1, #15
    d7ac:	f7fe fefe 	bl	c5ac <attExecCallback>
    d7b0:	b003      	add	sp, #12
    d7b2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d7b6 <attsIndNtfCallback>:
    d7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7ba:	460c      	mov	r4, r1
    d7bc:	8ac9      	ldrh	r1, [r1, #22]
    d7be:	4606      	mov	r6, r0
    d7c0:	4617      	mov	r7, r2
    d7c2:	b119      	cbz	r1, d7cc <attsIndNtfCallback+0x16>
    d7c4:	f7ff ffec 	bl	d7a0 <attsExecCallback>
    d7c8:	2300      	movs	r3, #0
    d7ca:	82e3      	strh	r3, [r4, #22]
    d7cc:	f104 0518 	add.w	r5, r4, #24
    d7d0:	f04f 0800 	mov.w	r8, #0
    d7d4:	342c      	adds	r4, #44	; 0x2c
    d7d6:	f835 1b02 	ldrh.w	r1, [r5], #2
    d7da:	b129      	cbz	r1, d7e8 <attsIndNtfCallback+0x32>
    d7dc:	463a      	mov	r2, r7
    d7de:	4630      	mov	r0, r6
    d7e0:	f7ff ffde 	bl	d7a0 <attsExecCallback>
    d7e4:	f825 8c02 	strh.w	r8, [r5, #-2]
    d7e8:	42ac      	cmp	r4, r5
    d7ea:	d1f4      	bne.n	d7d6 <attsIndNtfCallback+0x20>
    d7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d7f0 <attsIndCtrlCback>:
    d7f0:	b510      	push	{r4, lr}
    d7f2:	4604      	mov	r4, r0
    d7f4:	7800      	ldrb	r0, [r0, #0]
    d7f6:	f7ff ffc5 	bl	d784 <attsIndCcbByConnId>
    d7fa:	4601      	mov	r1, r0
    d7fc:	b120      	cbz	r0, d808 <attsIndCtrlCback+0x18>
    d7fe:	7820      	ldrb	r0, [r4, #0]
    d800:	2200      	movs	r2, #0
    d802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d806:	e7d6      	b.n	d7b6 <attsIndNtfCallback>
    d808:	bd10      	pop	{r4, pc}

0000d80a <attsIndMsgCback>:
    d80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d80c:	4605      	mov	r5, r0
    d80e:	7800      	ldrb	r0, [r0, #0]
    d810:	f7ff ffb8 	bl	d784 <attsIndCcbByConnId>
    d814:	78ab      	ldrb	r3, [r5, #2]
    d816:	4604      	mov	r4, r0
    d818:	b930      	cbnz	r0, d828 <attsIndMsgCback+0x1e>
    d81a:	2b21      	cmp	r3, #33	; 0x21
    d81c:	d13d      	bne.n	d89a <attsIndMsgCback+0x90>
    d81e:	6868      	ldr	r0, [r5, #4]
    d820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d824:	f00d b89a 	b.w	1a95c <WsfMsgFree>
    d828:	2b21      	cmp	r3, #33	; 0x21
    d82a:	d13b      	bne.n	d8a4 <attsIndMsgCback+0x9a>
    d82c:	686b      	ldr	r3, [r5, #4]
    d82e:	7a1a      	ldrb	r2, [r3, #8]
    d830:	885e      	ldrh	r6, [r3, #2]
    d832:	2a1d      	cmp	r2, #29
    d834:	d113      	bne.n	d85e <attsIndMsgCback+0x54>
    d836:	8ac2      	ldrh	r2, [r0, #22]
    d838:	bb12      	cbnz	r2, d880 <attsIndMsgCback+0x76>
    d83a:	6901      	ldr	r1, [r0, #16]
    d83c:	881a      	ldrh	r2, [r3, #0]
    d83e:	8b09      	ldrh	r1, [r1, #24]
    d840:	2004      	movs	r0, #4
    d842:	f003 f9c7 	bl	10bd4 <L2cDataReq>
    d846:	2322      	movs	r3, #34	; 0x22
    d848:	7323      	strb	r3, [r4, #12]
    d84a:	4b27      	ldr	r3, [pc, #156]	; (d8e8 <attsIndMsgCback+0xde>)
    d84c:	82e6      	strh	r6, [r4, #22]
    d84e:	681b      	ldr	r3, [r3, #0]
    d850:	82a6      	strh	r6, [r4, #20]
    d852:	7999      	ldrb	r1, [r3, #6]
    d854:	4620      	mov	r0, r4
    d856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d85a:	f00d ba21 	b.w	1aca0 <WsfTimerStartSec>
    d85e:	f100 0118 	add.w	r1, r0, #24
    d862:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
    d866:	2200      	movs	r2, #0
    d868:	460f      	mov	r7, r1
    d86a:	f831 0b02 	ldrh.w	r0, [r1], #2
    d86e:	b118      	cbz	r0, d878 <attsIndMsgCback+0x6e>
    d870:	4286      	cmp	r6, r0
    d872:	d005      	beq.n	d880 <attsIndMsgCback+0x76>
    d874:	3201      	adds	r2, #1
    d876:	b2d2      	uxtb	r2, r2
    d878:	458c      	cmp	ip, r1
    d87a:	d1f6      	bne.n	d86a <attsIndMsgCback+0x60>
    d87c:	2a09      	cmp	r2, #9
    d87e:	d922      	bls.n	d8c6 <attsIndMsgCback+0xbc>
    d880:	2272      	movs	r2, #114	; 0x72
    d882:	4631      	mov	r1, r6
    d884:	7828      	ldrb	r0, [r5, #0]
    d886:	f7ff ff8b 	bl	d7a0 <attsExecCallback>
    d88a:	e7c8      	b.n	d81e <attsIndMsgCback+0x14>
    d88c:	2300      	movs	r3, #0
    d88e:	f837 2b02 	ldrh.w	r2, [r7], #2
    d892:	b91a      	cbnz	r2, d89c <attsIndMsgCback+0x92>
    d894:	330c      	adds	r3, #12
    d896:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
    d89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d89c:	3301      	adds	r3, #1
    d89e:	2b0a      	cmp	r3, #10
    d8a0:	d1f5      	bne.n	d88e <attsIndMsgCback+0x84>
    d8a2:	e7fa      	b.n	d89a <attsIndMsgCback+0x90>
    d8a4:	2b22      	cmp	r3, #34	; 0x22
    d8a6:	d1f8      	bne.n	d89a <attsIndMsgCback+0x90>
    d8a8:	8a83      	ldrh	r3, [r0, #20]
    d8aa:	2b00      	cmp	r3, #0
    d8ac:	d0f5      	beq.n	d89a <attsIndMsgCback+0x90>
    d8ae:	2600      	movs	r6, #0
    d8b0:	8286      	strh	r6, [r0, #20]
    d8b2:	2271      	movs	r2, #113	; 0x71
    d8b4:	8ac1      	ldrh	r1, [r0, #22]
    d8b6:	7828      	ldrb	r0, [r5, #0]
    d8b8:	f7ff ff72 	bl	d7a0 <attsExecCallback>
    d8bc:	6923      	ldr	r3, [r4, #16]
    d8be:	82e6      	strh	r6, [r4, #22]
    d8c0:	2201      	movs	r2, #1
    d8c2:	77da      	strb	r2, [r3, #31]
    d8c4:	e7e9      	b.n	d89a <attsIndMsgCback+0x90>
    d8c6:	6921      	ldr	r1, [r4, #16]
    d8c8:	881a      	ldrh	r2, [r3, #0]
    d8ca:	8b09      	ldrh	r1, [r1, #24]
    d8cc:	882d      	ldrh	r5, [r5, #0]
    d8ce:	2004      	movs	r0, #4
    d8d0:	f003 f980 	bl	10bd4 <L2cDataReq>
    d8d4:	6923      	ldr	r3, [r4, #16]
    d8d6:	7f9a      	ldrb	r2, [r3, #30]
    d8d8:	2a00      	cmp	r2, #0
    d8da:	d1d7      	bne.n	d88c <attsIndMsgCback+0x82>
    d8dc:	4631      	mov	r1, r6
    d8de:	b2e8      	uxtb	r0, r5
    d8e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d8e4:	e75c      	b.n	d7a0 <attsExecCallback>
    d8e6:	bf00      	nop
    d8e8:	10002b84 	.word	0x10002b84

0000d8ec <attsHandleValueIndNtf>:
    d8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d8f0:	4606      	mov	r6, r0
    d8f2:	460c      	mov	r4, r1
    d8f4:	4617      	mov	r7, r2
    d8f6:	4698      	mov	r8, r3
    d8f8:	f89d a020 	ldrb.w	sl, [sp, #32]
    d8fc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d900:	f00d fe60 	bl	1b5c4 <WsfTaskLock>
    d904:	4630      	mov	r0, r6
    d906:	f7ff ff3d 	bl	d784 <attsIndCcbByConnId>
    d90a:	b950      	cbnz	r0, d922 <attsHandleValueIndNtf+0x36>
    d90c:	f00d fe60 	bl	1b5d0 <WsfTaskUnlock>
    d910:	f1b9 0f00 	cmp.w	r9, #0
    d914:	d048      	beq.n	d9a8 <attsHandleValueIndNtf+0xbc>
    d916:	4651      	mov	r1, sl
    d918:	4640      	mov	r0, r8
    d91a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d91e:	f7fe bedb 	b.w	c6d8 <AttMsgFree>
    d922:	6903      	ldr	r3, [r0, #16]
    d924:	8b5d      	ldrh	r5, [r3, #26]
    d926:	f00d fe53 	bl	1b5d0 <WsfTaskUnlock>
    d92a:	2d00      	cmp	r5, #0
    d92c:	d0f0      	beq.n	d910 <attsHandleValueIndNtf+0x24>
    d92e:	1cbb      	adds	r3, r7, #2
    d930:	42ab      	cmp	r3, r5
    d932:	da37      	bge.n	d9a4 <attsHandleValueIndNtf+0xb8>
    d934:	2008      	movs	r0, #8
    d936:	f00c fffa 	bl	1a92e <WsfMsgAlloc>
    d93a:	4605      	mov	r5, r0
    d93c:	b360      	cbz	r0, d998 <attsHandleValueIndNtf+0xac>
    d93e:	2321      	movs	r3, #33	; 0x21
    d940:	8006      	strh	r6, [r0, #0]
    d942:	7083      	strb	r3, [r0, #2]
    d944:	f1b9 0f00 	cmp.w	r9, #0
    d948:	d01c      	beq.n	d984 <attsHandleValueIndNtf+0x98>
    d94a:	f1a8 030b 	sub.w	r3, r8, #11
    d94e:	6043      	str	r3, [r0, #4]
    d950:	6868      	ldr	r0, [r5, #4]
    d952:	b1f0      	cbz	r0, d992 <attsHandleValueIndNtf+0xa6>
    d954:	1cfb      	adds	r3, r7, #3
    d956:	8044      	strh	r4, [r0, #2]
    d958:	7244      	strb	r4, [r0, #9]
    d95a:	0a24      	lsrs	r4, r4, #8
    d95c:	8003      	strh	r3, [r0, #0]
    d95e:	f880 a008 	strb.w	sl, [r0, #8]
    d962:	7284      	strb	r4, [r0, #10]
    d964:	f1b9 0f00 	cmp.w	r9, #0
    d968:	d104      	bne.n	d974 <attsHandleValueIndNtf+0x88>
    d96a:	463a      	mov	r2, r7
    d96c:	4641      	mov	r1, r8
    d96e:	300b      	adds	r0, #11
    d970:	f7fe fbf6 	bl	c160 <memcpy>
    d974:	4b0d      	ldr	r3, [pc, #52]	; (d9ac <attsHandleValueIndNtf+0xc0>)
    d976:	4629      	mov	r1, r5
    d978:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d97c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d980:	f00c bff9 	b.w	1a976 <WsfMsgSend>
    d984:	f107 000b 	add.w	r0, r7, #11
    d988:	b280      	uxth	r0, r0
    d98a:	f7fe fe3d 	bl	c608 <attMsgAlloc>
    d98e:	6068      	str	r0, [r5, #4]
    d990:	e7de      	b.n	d950 <attsHandleValueIndNtf+0x64>
    d992:	4628      	mov	r0, r5
    d994:	f00c ffe2 	bl	1a95c <WsfMsgFree>
    d998:	2270      	movs	r2, #112	; 0x70
    d99a:	4621      	mov	r1, r4
    d99c:	4630      	mov	r0, r6
    d99e:	f7ff feff 	bl	d7a0 <attsExecCallback>
    d9a2:	e7b5      	b.n	d910 <attsHandleValueIndNtf+0x24>
    d9a4:	2277      	movs	r2, #119	; 0x77
    d9a6:	e7f8      	b.n	d99a <attsHandleValueIndNtf+0xae>
    d9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9ac:	10003798 	.word	0x10003798

0000d9b0 <attsIndConnCback>:
    d9b0:	788b      	ldrb	r3, [r1, #2]
    d9b2:	2b28      	cmp	r3, #40	; 0x28
    d9b4:	b570      	push	{r4, r5, r6, lr}
    d9b6:	4606      	mov	r6, r0
    d9b8:	d117      	bne.n	d9ea <attsIndConnCback+0x3a>
    d9ba:	78cc      	ldrb	r4, [r1, #3]
    d9bc:	b904      	cbnz	r4, d9c0 <attsIndConnCback+0x10>
    d9be:	7a0c      	ldrb	r4, [r1, #8]
    d9c0:	7f35      	ldrb	r5, [r6, #28]
    d9c2:	490a      	ldr	r1, [pc, #40]	; (d9ec <attsIndConnCback+0x3c>)
    d9c4:	232c      	movs	r3, #44	; 0x2c
    d9c6:	3d01      	subs	r5, #1
    d9c8:	fb03 1505 	mla	r5, r3, r5, r1
    d9cc:	3420      	adds	r4, #32
    d9ce:	8aab      	ldrh	r3, [r5, #20]
    d9d0:	b2e4      	uxtb	r4, r4
    d9d2:	b123      	cbz	r3, d9de <attsIndConnCback+0x2e>
    d9d4:	4628      	mov	r0, r5
    d9d6:	f00d f989 	bl	1acec <WsfTimerStop>
    d9da:	2300      	movs	r3, #0
    d9dc:	82ab      	strh	r3, [r5, #20]
    d9de:	4622      	mov	r2, r4
    d9e0:	4629      	mov	r1, r5
    d9e2:	7f30      	ldrb	r0, [r6, #28]
    d9e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d9e8:	e6e5      	b.n	d7b6 <attsIndNtfCallback>
    d9ea:	bd70      	pop	{r4, r5, r6, pc}
    d9ec:	10003a9c 	.word	0x10003a9c

0000d9f0 <attsProcValueCnf>:
    d9f0:	b570      	push	{r4, r5, r6, lr}
    d9f2:	4606      	mov	r6, r0
    d9f4:	7f00      	ldrb	r0, [r0, #28]
    d9f6:	f7ff fec5 	bl	d784 <attsIndCcbByConnId>
    d9fa:	4604      	mov	r4, r0
    d9fc:	b168      	cbz	r0, da1a <attsProcValueCnf+0x2a>
    d9fe:	8a83      	ldrh	r3, [r0, #20]
    da00:	b15b      	cbz	r3, da1a <attsProcValueCnf+0x2a>
    da02:	2300      	movs	r3, #0
    da04:	8283      	strh	r3, [r0, #20]
    da06:	f00d f971 	bl	1acec <WsfTimerStop>
    da0a:	7fb5      	ldrb	r5, [r6, #30]
    da0c:	b92d      	cbnz	r5, da1a <attsProcValueCnf+0x2a>
    da0e:	462a      	mov	r2, r5
    da10:	8ae1      	ldrh	r1, [r4, #22]
    da12:	7f30      	ldrb	r0, [r6, #28]
    da14:	f7ff fec4 	bl	d7a0 <attsExecCallback>
    da18:	82e5      	strh	r5, [r4, #22]
    da1a:	bd70      	pop	{r4, r5, r6, pc}

0000da1c <AttsIndInit>:
    da1c:	b510      	push	{r4, lr}
    da1e:	4909      	ldr	r1, [pc, #36]	; (da44 <AttsIndInit+0x28>)
    da20:	4a09      	ldr	r2, [pc, #36]	; (da48 <AttsIndInit+0x2c>)
    da22:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    da26:	2300      	movs	r3, #0
    da28:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    da2c:	3301      	adds	r3, #1
    da2e:	2b08      	cmp	r3, #8
    da30:	6114      	str	r4, [r2, #16]
    da32:	7210      	strb	r0, [r2, #8]
    da34:	8153      	strh	r3, [r2, #10]
    da36:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    da3a:	d1f5      	bne.n	da28 <AttsIndInit+0xc>
    da3c:	4b03      	ldr	r3, [pc, #12]	; (da4c <AttsIndInit+0x30>)
    da3e:	4a04      	ldr	r2, [pc, #16]	; (da50 <AttsIndInit+0x34>)
    da40:	609a      	str	r2, [r3, #8]
    da42:	bd10      	pop	{r4, pc}
    da44:	10003798 	.word	0x10003798
    da48:	10003a9c 	.word	0x10003a9c
    da4c:	10003bfc 	.word	0x10003bfc
    da50:	00025d20 	.word	0x00025d20

0000da54 <AttsHandleValueInd>:
    da54:	b513      	push	{r0, r1, r4, lr}
    da56:	f04f 0c00 	mov.w	ip, #0
    da5a:	241d      	movs	r4, #29
    da5c:	e9cd 4c00 	strd	r4, ip, [sp]
    da60:	f7ff ff44 	bl	d8ec <attsHandleValueIndNtf>
    da64:	b002      	add	sp, #8
    da66:	bd10      	pop	{r4, pc}

0000da68 <AttsHandleValueNtf>:
    da68:	b513      	push	{r0, r1, r4, lr}
    da6a:	f04f 0c00 	mov.w	ip, #0
    da6e:	241b      	movs	r4, #27
    da70:	e9cd 4c00 	strd	r4, ip, [sp]
    da74:	f7ff ff3a 	bl	d8ec <attsHandleValueIndNtf>
    da78:	b002      	add	sp, #8
    da7a:	bd10      	pop	{r4, pc}

0000da7c <AttsHandleValueIndZeroCpy>:
    da7c:	b513      	push	{r0, r1, r4, lr}
    da7e:	f04f 0c01 	mov.w	ip, #1
    da82:	241d      	movs	r4, #29
    da84:	e9cd 4c00 	strd	r4, ip, [sp]
    da88:	f7ff ff30 	bl	d8ec <attsHandleValueIndNtf>
    da8c:	b002      	add	sp, #8
    da8e:	bd10      	pop	{r4, pc}

0000da90 <AttsHandleValueNtfZeroCpy>:
    da90:	b513      	push	{r0, r1, r4, lr}
    da92:	f04f 0c01 	mov.w	ip, #1
    da96:	241b      	movs	r4, #27
    da98:	e9cd 4c00 	strd	r4, ip, [sp]
    da9c:	f7ff ff26 	bl	d8ec <attsHandleValueIndNtf>
    daa0:	b002      	add	sp, #8
    daa2:	bd10      	pop	{r4, pc}

0000daa4 <attsL2cCtrlCback>:
    daa4:	4b01      	ldr	r3, [pc, #4]	; (daac <attsL2cCtrlCback+0x8>)
    daa6:	689b      	ldr	r3, [r3, #8]
    daa8:	685b      	ldr	r3, [r3, #4]
    daaa:	4718      	bx	r3
    daac:	10003bfc 	.word	0x10003bfc

0000dab0 <attsMsgCback>:
    dab0:	b410      	push	{r4}
    dab2:	7883      	ldrb	r3, [r0, #2]
    dab4:	2b20      	cmp	r3, #32
    dab6:	d106      	bne.n	dac6 <attsMsgCback+0x16>
    dab8:	2200      	movs	r2, #0
    daba:	2104      	movs	r1, #4
    dabc:	7800      	ldrb	r0, [r0, #0]
    dabe:	f85d 4b04 	ldr.w	r4, [sp], #4
    dac2:	f002 b839 	b.w	fb38 <DmConnSetIdle>
    dac6:	2b22      	cmp	r3, #34	; 0x22
    dac8:	4b03      	ldr	r3, [pc, #12]	; (dad8 <attsMsgCback+0x28>)
    daca:	f85d 4b04 	ldr.w	r4, [sp], #4
    dace:	bf96      	itet	ls
    dad0:	689b      	ldrls	r3, [r3, #8]
    dad2:	68db      	ldrhi	r3, [r3, #12]
    dad4:	689b      	ldrls	r3, [r3, #8]
    dad6:	4718      	bx	r3
    dad8:	10003bfc 	.word	0x10003bfc

0000dadc <attsErrRsp>:
    dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dae0:	4605      	mov	r5, r0
    dae2:	200d      	movs	r0, #13
    dae4:	460f      	mov	r7, r1
    dae6:	4614      	mov	r4, r2
    dae8:	461e      	mov	r6, r3
    daea:	f7fe fd8d 	bl	c608 <attMsgAlloc>
    daee:	b170      	cbz	r0, db0e <attsErrRsp+0x32>
    daf0:	7284      	strb	r4, [r0, #10]
    daf2:	2301      	movs	r3, #1
    daf4:	0a24      	lsrs	r4, r4, #8
    daf6:	7203      	strb	r3, [r0, #8]
    daf8:	7247      	strb	r7, [r0, #9]
    dafa:	72c4      	strb	r4, [r0, #11]
    dafc:	7306      	strb	r6, [r0, #12]
    dafe:	4603      	mov	r3, r0
    db00:	4629      	mov	r1, r5
    db02:	2205      	movs	r2, #5
    db04:	2004      	movs	r0, #4
    db06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db0a:	f003 b863 	b.w	10bd4 <L2cDataReq>
    db0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db12 <attsDataCback>:
    db12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db16:	4680      	mov	r8, r0
    db18:	460e      	mov	r6, r1
    db1a:	4617      	mov	r7, r2
    db1c:	f7fe fd22 	bl	c564 <attCcbByHandle>
    db20:	b368      	cbz	r0, db7e <attsDataCback+0x6c>
    db22:	7a39      	ldrb	r1, [r7, #8]
    db24:	2912      	cmp	r1, #18
    db26:	d903      	bls.n	db30 <attsDataCback+0x1e>
    db28:	f1a1 0316 	sub.w	r3, r1, #22
    db2c:	2b08      	cmp	r3, #8
    db2e:	d80e      	bhi.n	db4e <attsDataCback+0x3c>
    db30:	084b      	lsrs	r3, r1, #1
    db32:	4a14      	ldr	r2, [pc, #80]	; (db84 <attsDataCback+0x72>)
    db34:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    db38:	b195      	cbz	r5, db60 <attsDataCback+0x4e>
    db3a:	4a13      	ldr	r2, [pc, #76]	; (db88 <attsDataCback+0x76>)
    db3c:	5cd3      	ldrb	r3, [r2, r3]
    db3e:	42b3      	cmp	r3, r6
    db40:	d81b      	bhi.n	db7a <attsDataCback+0x68>
    db42:	463a      	mov	r2, r7
    db44:	4631      	mov	r1, r6
    db46:	462b      	mov	r3, r5
    db48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db4c:	4718      	bx	r3
    db4e:	2952      	cmp	r1, #82	; 0x52
    db50:	d004      	beq.n	db5c <attsDataCback+0x4a>
    db52:	29d2      	cmp	r1, #210	; 0xd2
    db54:	bf0c      	ite	eq
    db56:	2310      	moveq	r3, #16
    db58:	2300      	movne	r3, #0
    db5a:	e7ea      	b.n	db32 <attsDataCback+0x20>
    db5c:	230a      	movs	r3, #10
    db5e:	e7e8      	b.n	db32 <attsDataCback+0x20>
    db60:	2306      	movs	r3, #6
    db62:	2902      	cmp	r1, #2
    db64:	d00b      	beq.n	db7e <attsDataCback+0x6c>
    db66:	291e      	cmp	r1, #30
    db68:	d009      	beq.n	db7e <attsDataCback+0x6c>
    db6a:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    db6e:	d106      	bne.n	db7e <attsDataCback+0x6c>
    db70:	4640      	mov	r0, r8
    db72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db76:	f7ff bfb1 	b.w	dadc <attsErrRsp>
    db7a:	2304      	movs	r3, #4
    db7c:	e7f1      	b.n	db62 <attsDataCback+0x50>
    db7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db82:	bf00      	nop
    db84:	10002b10 	.word	0x10002b10
    db88:	00025d30 	.word	0x00025d30

0000db8c <attsClearPrepWrites>:
    db8c:	b510      	push	{r4, lr}
    db8e:	4604      	mov	r4, r0
    db90:	4620      	mov	r0, r4
    db92:	f00c ff57 	bl	1aa44 <WsfQueueDeq>
    db96:	b900      	cbnz	r0, db9a <attsClearPrepWrites+0xe>
    db98:	bd10      	pop	{r4, pc}
    db9a:	f00c fe79 	bl	1a890 <WsfBufFree>
    db9e:	e7f7      	b.n	db90 <attsClearPrepWrites+0x4>

0000dba0 <attsConnCback>:
    dba0:	788b      	ldrb	r3, [r1, #2]
    dba2:	2b28      	cmp	r3, #40	; 0x28
    dba4:	b570      	push	{r4, r5, r6, lr}
    dba6:	4604      	mov	r4, r0
    dba8:	460d      	mov	r5, r1
    dbaa:	d10a      	bne.n	dbc2 <attsConnCback+0x22>
    dbac:	f7ff ffee 	bl	db8c <attsClearPrepWrites>
    dbb0:	7f20      	ldrb	r0, [r4, #28]
    dbb2:	f001 ffdb 	bl	fb6c <DmConnCheckIdle>
    dbb6:	0743      	lsls	r3, r0, #29
    dbb8:	d503      	bpl.n	dbc2 <attsConnCback+0x22>
    dbba:	f104 0008 	add.w	r0, r4, #8
    dbbe:	f00d f895 	bl	1acec <WsfTimerStop>
    dbc2:	4b04      	ldr	r3, [pc, #16]	; (dbd4 <attsConnCback+0x34>)
    dbc4:	689b      	ldr	r3, [r3, #8]
    dbc6:	4629      	mov	r1, r5
    dbc8:	4620      	mov	r0, r4
    dbca:	68db      	ldr	r3, [r3, #12]
    dbcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dbd0:	4718      	bx	r3
    dbd2:	bf00      	nop
    dbd4:	10003bfc 	.word	0x10003bfc

0000dbd8 <attsDiscBusy>:
    dbd8:	b538      	push	{r3, r4, r5, lr}
    dbda:	4d0d      	ldr	r5, [pc, #52]	; (dc10 <attsDiscBusy+0x38>)
    dbdc:	682b      	ldr	r3, [r5, #0]
    dbde:	681b      	ldr	r3, [r3, #0]
    dbe0:	4604      	mov	r4, r0
    dbe2:	b1a3      	cbz	r3, dc0e <attsDiscBusy+0x36>
    dbe4:	2104      	movs	r1, #4
    dbe6:	7f00      	ldrb	r0, [r0, #28]
    dbe8:	2201      	movs	r2, #1
    dbea:	f001 ffa5 	bl	fb38 <DmConnSetIdle>
    dbee:	4b09      	ldr	r3, [pc, #36]	; (dc14 <attsDiscBusy+0x3c>)
    dbf0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    dbf4:	7423      	strb	r3, [r4, #16]
    dbf6:	2320      	movs	r3, #32
    dbf8:	7523      	strb	r3, [r4, #20]
    dbfa:	7f23      	ldrb	r3, [r4, #28]
    dbfc:	8263      	strh	r3, [r4, #18]
    dbfe:	682b      	ldr	r3, [r5, #0]
    dc00:	f104 0008 	add.w	r0, r4, #8
    dc04:	6819      	ldr	r1, [r3, #0]
    dc06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dc0a:	f00d b849 	b.w	1aca0 <WsfTimerStartSec>
    dc0e:	bd38      	pop	{r3, r4, r5, pc}
    dc10:	10002b84 	.word	0x10002b84
    dc14:	10003798 	.word	0x10003798

0000dc18 <AttsInit>:
    dc18:	4b06      	ldr	r3, [pc, #24]	; (dc34 <AttsInit+0x1c>)
    dc1a:	2200      	movs	r2, #0
    dc1c:	e9c3 2200 	strd	r2, r2, [r3]
    dc20:	4a05      	ldr	r2, [pc, #20]	; (dc38 <AttsInit+0x20>)
    dc22:	609a      	str	r2, [r3, #8]
    dc24:	4a05      	ldr	r2, [pc, #20]	; (dc3c <AttsInit+0x24>)
    dc26:	60da      	str	r2, [r3, #12]
    dc28:	4b05      	ldr	r3, [pc, #20]	; (dc40 <AttsInit+0x28>)
    dc2a:	4a06      	ldr	r2, [pc, #24]	; (dc44 <AttsInit+0x2c>)
    dc2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    dc30:	4770      	bx	lr
    dc32:	bf00      	nop
    dc34:	10003bfc 	.word	0x10003bfc
    dc38:	00025b88 	.word	0x00025b88
    dc3c:	0000c501 	.word	0x0000c501
    dc40:	10003798 	.word	0x10003798
    dc44:	00025d44 	.word	0x00025d44

0000dc48 <AttsAuthorRegister>:
    dc48:	4b01      	ldr	r3, [pc, #4]	; (dc50 <AttsAuthorRegister+0x8>)
    dc4a:	6118      	str	r0, [r3, #16]
    dc4c:	4770      	bx	lr
    dc4e:	bf00      	nop
    dc50:	10003bfc 	.word	0x10003bfc

0000dc54 <AttsAddGroup>:
    dc54:	b510      	push	{r4, lr}
    dc56:	4604      	mov	r4, r0
    dc58:	f00d fcb4 	bl	1b5c4 <WsfTaskLock>
    dc5c:	4b09      	ldr	r3, [pc, #36]	; (dc84 <AttsAddGroup+0x30>)
    dc5e:	681b      	ldr	r3, [r3, #0]
    dc60:	2200      	movs	r2, #0
    dc62:	b11b      	cbz	r3, dc6c <AttsAddGroup+0x18>
    dc64:	8a20      	ldrh	r0, [r4, #16]
    dc66:	8a19      	ldrh	r1, [r3, #16]
    dc68:	4288      	cmp	r0, r1
    dc6a:	d207      	bcs.n	dc7c <AttsAddGroup+0x28>
    dc6c:	4621      	mov	r1, r4
    dc6e:	4805      	ldr	r0, [pc, #20]	; (dc84 <AttsAddGroup+0x30>)
    dc70:	f00c ff21 	bl	1aab6 <WsfQueueInsert>
    dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc78:	f00d bcaa 	b.w	1b5d0 <WsfTaskUnlock>
    dc7c:	461a      	mov	r2, r3
    dc7e:	681b      	ldr	r3, [r3, #0]
    dc80:	e7ef      	b.n	dc62 <AttsAddGroup+0xe>
    dc82:	bf00      	nop
    dc84:	10003bfc 	.word	0x10003bfc

0000dc88 <AttsRemoveGroup>:
    dc88:	b510      	push	{r4, lr}
    dc8a:	4604      	mov	r4, r0
    dc8c:	f00d fc9a 	bl	1b5c4 <WsfTaskLock>
    dc90:	4b08      	ldr	r3, [pc, #32]	; (dcb4 <AttsRemoveGroup+0x2c>)
    dc92:	6819      	ldr	r1, [r3, #0]
    dc94:	2200      	movs	r2, #0
    dc96:	b919      	cbnz	r1, dca0 <AttsRemoveGroup+0x18>
    dc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc9c:	f00d bc98 	b.w	1b5d0 <WsfTaskUnlock>
    dca0:	8a0b      	ldrh	r3, [r1, #16]
    dca2:	42a3      	cmp	r3, r4
    dca4:	d002      	beq.n	dcac <AttsRemoveGroup+0x24>
    dca6:	460a      	mov	r2, r1
    dca8:	6809      	ldr	r1, [r1, #0]
    dcaa:	e7f4      	b.n	dc96 <AttsRemoveGroup+0xe>
    dcac:	4801      	ldr	r0, [pc, #4]	; (dcb4 <AttsRemoveGroup+0x2c>)
    dcae:	f00c ff2d 	bl	1ab0c <WsfQueueRemove>
    dcb2:	e7f1      	b.n	dc98 <AttsRemoveGroup+0x10>
    dcb4:	10003bfc 	.word	0x10003bfc

0000dcb8 <AttsSetAttr>:
    dcb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dcba:	4605      	mov	r5, r0
    dcbc:	460e      	mov	r6, r1
    dcbe:	4614      	mov	r4, r2
    dcc0:	f00d fc80 	bl	1b5c4 <WsfTaskLock>
    dcc4:	4628      	mov	r0, r5
    dcc6:	a901      	add	r1, sp, #4
    dcc8:	f000 f862 	bl	dd90 <attsFindByHandle>
    dccc:	4605      	mov	r5, r0
    dcce:	b198      	cbz	r0, dcf8 <AttsSetAttr+0x40>
    dcd0:	8983      	ldrh	r3, [r0, #12]
    dcd2:	42b3      	cmp	r3, r6
    dcd4:	d312      	bcc.n	dcfc <AttsSetAttr+0x44>
    dcd6:	4621      	mov	r1, r4
    dcd8:	4632      	mov	r2, r6
    dcda:	6840      	ldr	r0, [r0, #4]
    dcdc:	f7fe fa40 	bl	c160 <memcpy>
    dce0:	7bac      	ldrb	r4, [r5, #14]
    dce2:	f014 0408 	ands.w	r4, r4, #8
    dce6:	d002      	beq.n	dcee <AttsSetAttr+0x36>
    dce8:	68ab      	ldr	r3, [r5, #8]
    dcea:	2400      	movs	r4, #0
    dcec:	801e      	strh	r6, [r3, #0]
    dcee:	f00d fc6f 	bl	1b5d0 <WsfTaskUnlock>
    dcf2:	4620      	mov	r0, r4
    dcf4:	b002      	add	sp, #8
    dcf6:	bd70      	pop	{r4, r5, r6, pc}
    dcf8:	240a      	movs	r4, #10
    dcfa:	e7f8      	b.n	dcee <AttsSetAttr+0x36>
    dcfc:	240d      	movs	r4, #13
    dcfe:	e7f6      	b.n	dcee <AttsSetAttr+0x36>

0000dd00 <AttsGetAttr>:
    dd00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd02:	460d      	mov	r5, r1
    dd04:	a901      	add	r1, sp, #4
    dd06:	4614      	mov	r4, r2
    dd08:	f000 f842 	bl	dd90 <attsFindByHandle>
    dd0c:	b138      	cbz	r0, dd1e <AttsGetAttr+0x1e>
    dd0e:	6883      	ldr	r3, [r0, #8]
    dd10:	881b      	ldrh	r3, [r3, #0]
    dd12:	802b      	strh	r3, [r5, #0]
    dd14:	6843      	ldr	r3, [r0, #4]
    dd16:	6023      	str	r3, [r4, #0]
    dd18:	2000      	movs	r0, #0
    dd1a:	b003      	add	sp, #12
    dd1c:	bd30      	pop	{r4, r5, pc}
    dd1e:	200a      	movs	r0, #10
    dd20:	e7fb      	b.n	dd1a <AttsGetAttr+0x1a>

0000dd22 <AttsErrorTest>:
    dd22:	4b02      	ldr	r3, [pc, #8]	; (dd2c <AttsErrorTest+0xa>)
    dd24:	f883 0111 	strb.w	r0, [r3, #273]	; 0x111
    dd28:	4770      	bx	lr
    dd2a:	bf00      	nop
    dd2c:	10003798 	.word	0x10003798

0000dd30 <attsUuidCmp>:
    dd30:	b510      	push	{r4, lr}
    dd32:	4604      	mov	r4, r0
    dd34:	4613      	mov	r3, r2
    dd36:	7ba2      	ldrb	r2, [r4, #14]
    dd38:	6800      	ldr	r0, [r0, #0]
    dd3a:	07d2      	lsls	r2, r2, #31
    dd3c:	d409      	bmi.n	dd52 <attsUuidCmp+0x22>
    dd3e:	2902      	cmp	r1, #2
    dd40:	d10c      	bne.n	dd5c <attsUuidCmp+0x2c>
    dd42:	460a      	mov	r2, r1
    dd44:	4619      	mov	r1, r3
    dd46:	f7fe f9db 	bl	c100 <memcmp>
    dd4a:	fab0 f080 	clz	r0, r0
    dd4e:	0940      	lsrs	r0, r0, #5
    dd50:	bd10      	pop	{r4, pc}
    dd52:	2910      	cmp	r1, #16
    dd54:	d0f5      	beq.n	dd42 <attsUuidCmp+0x12>
    dd56:	4601      	mov	r1, r0
    dd58:	4618      	mov	r0, r3
    dd5a:	e002      	b.n	dd62 <attsUuidCmp+0x32>
    dd5c:	2910      	cmp	r1, #16
    dd5e:	d1fa      	bne.n	dd56 <attsUuidCmp+0x26>
    dd60:	4619      	mov	r1, r3
    dd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd66:	f7fe bc11 	b.w	c58c <attUuidCmp16to128>

0000dd6a <attsUuid16Cmp>:
    dd6a:	2902      	cmp	r1, #2
    dd6c:	4603      	mov	r3, r0
    dd6e:	d10c      	bne.n	dd8a <attsUuid16Cmp+0x20>
    dd70:	7800      	ldrb	r0, [r0, #0]
    dd72:	7811      	ldrb	r1, [r2, #0]
    dd74:	4288      	cmp	r0, r1
    dd76:	d106      	bne.n	dd86 <attsUuid16Cmp+0x1c>
    dd78:	7858      	ldrb	r0, [r3, #1]
    dd7a:	7853      	ldrb	r3, [r2, #1]
    dd7c:	1ac3      	subs	r3, r0, r3
    dd7e:	4258      	negs	r0, r3
    dd80:	4158      	adcs	r0, r3
    dd82:	b2c0      	uxtb	r0, r0
    dd84:	4770      	bx	lr
    dd86:	2000      	movs	r0, #0
    dd88:	e7fb      	b.n	dd82 <attsUuid16Cmp+0x18>
    dd8a:	4611      	mov	r1, r2
    dd8c:	f7fe bbfe 	b.w	c58c <attUuidCmp16to128>

0000dd90 <attsFindByHandle>:
    dd90:	b510      	push	{r4, lr}
    dd92:	4b08      	ldr	r3, [pc, #32]	; (ddb4 <attsFindByHandle+0x24>)
    dd94:	681b      	ldr	r3, [r3, #0]
    dd96:	b90b      	cbnz	r3, dd9c <attsFindByHandle+0xc>
    dd98:	4618      	mov	r0, r3
    dd9a:	e00a      	b.n	ddb2 <attsFindByHandle+0x22>
    dd9c:	8a1a      	ldrh	r2, [r3, #16]
    dd9e:	4282      	cmp	r2, r0
    dda0:	d8f8      	bhi.n	dd94 <attsFindByHandle+0x4>
    dda2:	8a5c      	ldrh	r4, [r3, #18]
    dda4:	4284      	cmp	r4, r0
    dda6:	d3f5      	bcc.n	dd94 <attsFindByHandle+0x4>
    dda8:	600b      	str	r3, [r1, #0]
    ddaa:	685b      	ldr	r3, [r3, #4]
    ddac:	1a80      	subs	r0, r0, r2
    ddae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    ddb2:	bd10      	pop	{r4, pc}
    ddb4:	10003bfc 	.word	0x10003bfc

0000ddb8 <attsFindInRange>:
    ddb8:	b530      	push	{r4, r5, lr}
    ddba:	4b0a      	ldr	r3, [pc, #40]	; (dde4 <attsFindInRange+0x2c>)
    ddbc:	681b      	ldr	r3, [r3, #0]
    ddbe:	b90b      	cbnz	r3, ddc4 <attsFindInRange+0xc>
    ddc0:	4618      	mov	r0, r3
    ddc2:	e00d      	b.n	dde0 <attsFindInRange+0x28>
    ddc4:	8a1c      	ldrh	r4, [r3, #16]
    ddc6:	4284      	cmp	r4, r0
    ddc8:	d902      	bls.n	ddd0 <attsFindInRange+0x18>
    ddca:	428c      	cmp	r4, r1
    ddcc:	d8f6      	bhi.n	ddbc <attsFindInRange+0x4>
    ddce:	4620      	mov	r0, r4
    ddd0:	8a5d      	ldrh	r5, [r3, #18]
    ddd2:	4285      	cmp	r5, r0
    ddd4:	d3f2      	bcc.n	ddbc <attsFindInRange+0x4>
    ddd6:	685b      	ldr	r3, [r3, #4]
    ddd8:	1b04      	subs	r4, r0, r4
    ddda:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    ddde:	6014      	str	r4, [r2, #0]
    dde0:	bd30      	pop	{r4, r5, pc}
    dde2:	bf00      	nop
    dde4:	10003bfc 	.word	0x10003bfc

0000dde8 <attsPermissions>:
    dde8:	420b      	tst	r3, r1
    ddea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddee:	4606      	mov	r6, r0
    ddf0:	460d      	mov	r5, r1
    ddf2:	4617      	mov	r7, r2
    ddf4:	461c      	mov	r4, r3
    ddf6:	d105      	bne.n	de04 <attsPermissions+0x1c>
    ddf8:	2901      	cmp	r1, #1
    ddfa:	bf0c      	ite	eq
    ddfc:	2002      	moveq	r0, #2
    ddfe:	2003      	movne	r0, #3
    de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de04:	2910      	cmp	r1, #16
    de06:	bf08      	it	eq
    de08:	091c      	lsreq	r4, r3, #4
    de0a:	f014 0f0e 	tst.w	r4, #14
    de0e:	d101      	bne.n	de14 <attsPermissions+0x2c>
    de10:	2000      	movs	r0, #0
    de12:	e7f5      	b.n	de00 <attsPermissions+0x18>
    de14:	f001 fe86 	bl	fb24 <DmConnSecLevel>
    de18:	0722      	lsls	r2, r4, #28
    de1a:	d500      	bpl.n	de1e <attsPermissions+0x36>
    de1c:	b180      	cbz	r0, de40 <attsPermissions+0x58>
    de1e:	f004 030a 	and.w	r3, r4, #10
    de22:	2b0a      	cmp	r3, #10
    de24:	d101      	bne.n	de2a <attsPermissions+0x42>
    de26:	2801      	cmp	r0, #1
    de28:	d90a      	bls.n	de40 <attsPermissions+0x58>
    de2a:	0763      	lsls	r3, r4, #29
    de2c:	d5f0      	bpl.n	de10 <attsPermissions+0x28>
    de2e:	4b06      	ldr	r3, [pc, #24]	; (de48 <attsPermissions+0x60>)
    de30:	691b      	ldr	r3, [r3, #16]
    de32:	b13b      	cbz	r3, de44 <attsPermissions+0x5c>
    de34:	463a      	mov	r2, r7
    de36:	4629      	mov	r1, r5
    de38:	4630      	mov	r0, r6
    de3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de3e:	4718      	bx	r3
    de40:	2005      	movs	r0, #5
    de42:	e7dd      	b.n	de00 <attsPermissions+0x18>
    de44:	2008      	movs	r0, #8
    de46:	e7db      	b.n	de00 <attsPermissions+0x18>
    de48:	10003bfc 	.word	0x10003bfc

0000de4c <attsProcMtuReq>:
    de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de4e:	7a93      	ldrb	r3, [r2, #10]
    de50:	7a54      	ldrb	r4, [r2, #9]
    de52:	4d17      	ldr	r5, [pc, #92]	; (deb0 <attsProcMtuReq+0x64>)
    de54:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    de58:	b2a4      	uxth	r4, r4
    de5a:	682b      	ldr	r3, [r5, #0]
    de5c:	2c17      	cmp	r4, #23
    de5e:	bf38      	it	cc
    de60:	2417      	movcc	r4, #23
    de62:	889f      	ldrh	r7, [r3, #4]
    de64:	4606      	mov	r6, r0
    de66:	f007 fff1 	bl	15e4c <HciGetMaxRxAclLen>
    de6a:	3804      	subs	r0, #4
    de6c:	4287      	cmp	r7, r0
    de6e:	da1a      	bge.n	dea6 <attsProcMtuReq+0x5a>
    de70:	682b      	ldr	r3, [r5, #0]
    de72:	889d      	ldrh	r5, [r3, #4]
    de74:	42a5      	cmp	r5, r4
    de76:	f04f 000b 	mov.w	r0, #11
    de7a:	bf28      	it	cs
    de7c:	4625      	movcs	r5, r4
    de7e:	f7fe fbc3 	bl	c608 <attMsgAlloc>
    de82:	4603      	mov	r3, r0
    de84:	b140      	cbz	r0, de98 <attsProcMtuReq+0x4c>
    de86:	0a29      	lsrs	r1, r5, #8
    de88:	2203      	movs	r2, #3
    de8a:	7202      	strb	r2, [r0, #8]
    de8c:	7245      	strb	r5, [r0, #9]
    de8e:	7281      	strb	r1, [r0, #10]
    de90:	8b31      	ldrh	r1, [r6, #24]
    de92:	2004      	movs	r0, #4
    de94:	f002 fe9e 	bl	10bd4 <L2cDataReq>
    de98:	462a      	mov	r2, r5
    de9a:	4621      	mov	r1, r4
    de9c:	4630      	mov	r0, r6
    de9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dea2:	f7fe bb9f 	b.w	c5e4 <attSetMtu>
    dea6:	f007 ffd1 	bl	15e4c <HciGetMaxRxAclLen>
    deaa:	1f05      	subs	r5, r0, #4
    deac:	b2ad      	uxth	r5, r5
    deae:	e7e1      	b.n	de74 <attsProcMtuReq+0x28>
    deb0:	10002b84 	.word	0x10002b84

0000deb4 <attsProcFindInfoReq>:
    deb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    deb8:	7a93      	ldrb	r3, [r2, #10]
    deba:	7a57      	ldrb	r7, [r2, #9]
    debc:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    dec0:	b2bf      	uxth	r7, r7
    dec2:	4680      	mov	r8, r0
    dec4:	2f00      	cmp	r7, #0
    dec6:	d076      	beq.n	dfb6 <attsProcFindInfoReq+0x102>
    dec8:	7b13      	ldrb	r3, [r2, #12]
    deca:	f892 900b 	ldrb.w	r9, [r2, #11]
    dece:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    ded2:	fa1f f989 	uxth.w	r9, r9
    ded6:	454f      	cmp	r7, r9
    ded8:	d86d      	bhi.n	dfb6 <attsProcFindInfoReq+0x102>
    deda:	8b40      	ldrh	r0, [r0, #26]
    dedc:	3008      	adds	r0, #8
    dede:	b280      	uxth	r0, r0
    dee0:	f7fe fb92 	bl	c608 <attMsgAlloc>
    dee4:	4606      	mov	r6, r0
    dee6:	2800      	cmp	r0, #0
    dee8:	d067      	beq.n	dfba <attsProcFindInfoReq+0x106>
    deea:	2305      	movs	r3, #5
    deec:	7203      	strb	r3, [r0, #8]
    deee:	2301      	movs	r3, #1
    def0:	7243      	strb	r3, [r0, #9]
    def2:	f100 040e 	add.w	r4, r0, #14
    def6:	f64f 7aff 	movw	sl, #65535	; 0xffff
    defa:	4638      	mov	r0, r7
    defc:	aa01      	add	r2, sp, #4
    defe:	4649      	mov	r1, r9
    df00:	1f25      	subs	r5, r4, #4
    df02:	f7ff ff59 	bl	ddb8 <attsFindInRange>
    df06:	b1d0      	cbz	r0, df3e <attsProcFindInfoReq+0x8a>
    df08:	9b01      	ldr	r3, [sp, #4]
    df0a:	7b9b      	ldrb	r3, [r3, #14]
    df0c:	07db      	lsls	r3, r3, #31
    df0e:	d530      	bpl.n	df72 <attsProcFindInfoReq+0xbe>
    df10:	f106 030a 	add.w	r3, r6, #10
    df14:	429d      	cmp	r5, r3
    df16:	d112      	bne.n	df3e <attsProcFindInfoReq+0x8a>
    df18:	7028      	strb	r0, [r5, #0]
    df1a:	2302      	movs	r3, #2
    df1c:	0a00      	lsrs	r0, r0, #8
    df1e:	f805 3c01 	strb.w	r3, [r5, #-1]
    df22:	7068      	strb	r0, [r5, #1]
    df24:	9b01      	ldr	r3, [sp, #4]
    df26:	681b      	ldr	r3, [r3, #0]
    df28:	f106 020c 	add.w	r2, r6, #12
    df2c:	f103 0110 	add.w	r1, r3, #16
    df30:	f853 0b04 	ldr.w	r0, [r3], #4
    df34:	f842 0b04 	str.w	r0, [r2], #4
    df38:	428b      	cmp	r3, r1
    df3a:	d1f9      	bne.n	df30 <attsProcFindInfoReq+0x7c>
    df3c:	3512      	adds	r5, #18
    df3e:	f106 030a 	add.w	r3, r6, #10
    df42:	429d      	cmp	r5, r3
    df44:	d13b      	bne.n	dfbe <attsProcFindInfoReq+0x10a>
    df46:	4630      	mov	r0, r6
    df48:	f00c fd08 	bl	1a95c <WsfMsgFree>
    df4c:	240a      	movs	r4, #10
    df4e:	4640      	mov	r0, r8
    df50:	f7ff fe42 	bl	dbd8 <attsDiscBusy>
    df54:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    df58:	bb9c      	cbnz	r4, dfc2 <attsProcFindInfoReq+0x10e>
    df5a:	f106 0208 	add.w	r2, r6, #8
    df5e:	1aaa      	subs	r2, r5, r2
    df60:	4601      	mov	r1, r0
    df62:	4633      	mov	r3, r6
    df64:	b292      	uxth	r2, r2
    df66:	2004      	movs	r0, #4
    df68:	f002 fe34 	bl	10bd4 <L2cDataReq>
    df6c:	b002      	add	sp, #8
    df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df72:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    df76:	3308      	adds	r3, #8
    df78:	4433      	add	r3, r6
    df7a:	429c      	cmp	r4, r3
    df7c:	4622      	mov	r2, r4
    df7e:	d8de      	bhi.n	df3e <attsProcFindInfoReq+0x8a>
    df80:	0a03      	lsrs	r3, r0, #8
    df82:	f804 0c04 	strb.w	r0, [r4, #-4]
    df86:	f804 3c03 	strb.w	r3, [r4, #-3]
    df8a:	9b01      	ldr	r3, [sp, #4]
    df8c:	681b      	ldr	r3, [r3, #0]
    df8e:	781b      	ldrb	r3, [r3, #0]
    df90:	f804 3c02 	strb.w	r3, [r4, #-2]
    df94:	9b01      	ldr	r3, [sp, #4]
    df96:	681b      	ldr	r3, [r3, #0]
    df98:	4550      	cmp	r0, sl
    df9a:	785b      	ldrb	r3, [r3, #1]
    df9c:	f804 3c01 	strb.w	r3, [r4, #-1]
    dfa0:	d007      	beq.n	dfb2 <attsProcFindInfoReq+0xfe>
    dfa2:	3001      	adds	r0, #1
    dfa4:	b280      	uxth	r0, r0
    dfa6:	4581      	cmp	r9, r0
    dfa8:	f104 0404 	add.w	r4, r4, #4
    dfac:	d2a6      	bcs.n	defc <attsProcFindInfoReq+0x48>
    dfae:	4615      	mov	r5, r2
    dfb0:	e7c5      	b.n	df3e <attsProcFindInfoReq+0x8a>
    dfb2:	4625      	mov	r5, r4
    dfb4:	e7c3      	b.n	df3e <attsProcFindInfoReq+0x8a>
    dfb6:	2401      	movs	r4, #1
    dfb8:	e7c9      	b.n	df4e <attsProcFindInfoReq+0x9a>
    dfba:	2411      	movs	r4, #17
    dfbc:	e7c7      	b.n	df4e <attsProcFindInfoReq+0x9a>
    dfbe:	2400      	movs	r4, #0
    dfc0:	e7c5      	b.n	df4e <attsProcFindInfoReq+0x9a>
    dfc2:	4623      	mov	r3, r4
    dfc4:	463a      	mov	r2, r7
    dfc6:	2104      	movs	r1, #4
    dfc8:	f7ff fd88 	bl	dadc <attsErrRsp>
    dfcc:	e7ce      	b.n	df6c <attsProcFindInfoReq+0xb8>

0000dfce <attsProcReadReq>:
    dfce:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    dfd2:	7a93      	ldrb	r3, [r2, #10]
    dfd4:	7a54      	ldrb	r4, [r2, #9]
    dfd6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dfda:	b2a4      	uxth	r4, r4
    dfdc:	4606      	mov	r6, r0
    dfde:	a903      	add	r1, sp, #12
    dfe0:	4620      	mov	r0, r4
    dfe2:	f7ff fed5 	bl	dd90 <attsFindByHandle>
    dfe6:	4605      	mov	r5, r0
    dfe8:	2800      	cmp	r0, #0
    dfea:	d047      	beq.n	e07c <attsProcReadReq+0xae>
    dfec:	7bc3      	ldrb	r3, [r0, #15]
    dfee:	7f30      	ldrb	r0, [r6, #28]
    dff0:	4622      	mov	r2, r4
    dff2:	2101      	movs	r1, #1
    dff4:	f7ff fef8 	bl	dde8 <attsPermissions>
    dff8:	4603      	mov	r3, r0
    dffa:	b960      	cbnz	r0, e016 <attsProcReadReq+0x48>
    dffc:	7baa      	ldrb	r2, [r5, #14]
    dffe:	0751      	lsls	r1, r2, #29
    e000:	d50f      	bpl.n	e022 <attsProcReadReq+0x54>
    e002:	9903      	ldr	r1, [sp, #12]
    e004:	688f      	ldr	r7, [r1, #8]
    e006:	b167      	cbz	r7, e022 <attsProcReadReq+0x54>
    e008:	7f30      	ldrb	r0, [r6, #28]
    e00a:	9500      	str	r5, [sp, #0]
    e00c:	220a      	movs	r2, #10
    e00e:	4621      	mov	r1, r4
    e010:	47b8      	blx	r7
    e012:	4603      	mov	r3, r0
    e014:	b138      	cbz	r0, e026 <attsProcReadReq+0x58>
    e016:	4622      	mov	r2, r4
    e018:	210a      	movs	r1, #10
    e01a:	8b30      	ldrh	r0, [r6, #24]
    e01c:	f7ff fd5e 	bl	dadc <attsErrRsp>
    e020:	e010      	b.n	e044 <attsProcReadReq+0x76>
    e022:	0693      	lsls	r3, r2, #26
    e024:	d411      	bmi.n	e04a <attsProcReadReq+0x7c>
    e026:	68ab      	ldr	r3, [r5, #8]
    e028:	8b74      	ldrh	r4, [r6, #26]
    e02a:	881a      	ldrh	r2, [r3, #0]
    e02c:	3c01      	subs	r4, #1
    e02e:	4294      	cmp	r4, r2
    e030:	bfa8      	it	ge
    e032:	4614      	movge	r4, r2
    e034:	b2a7      	uxth	r7, r4
    e036:	f107 0009 	add.w	r0, r7, #9
    e03a:	b280      	uxth	r0, r0
    e03c:	f7fe fae4 	bl	c608 <attMsgAlloc>
    e040:	4680      	mov	r8, r0
    e042:	b960      	cbnz	r0, e05e <attsProcReadReq+0x90>
    e044:	b004      	add	sp, #16
    e046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e04a:	4b0d      	ldr	r3, [pc, #52]	; (e080 <attsProcReadReq+0xb2>)
    e04c:	695f      	ldr	r7, [r3, #20]
    e04e:	2f00      	cmp	r7, #0
    e050:	d0e9      	beq.n	e026 <attsProcReadReq+0x58>
    e052:	686b      	ldr	r3, [r5, #4]
    e054:	7f30      	ldrb	r0, [r6, #28]
    e056:	4622      	mov	r2, r4
    e058:	2105      	movs	r1, #5
    e05a:	47b8      	blx	r7
    e05c:	e7d9      	b.n	e012 <attsProcReadReq+0x44>
    e05e:	230b      	movs	r3, #11
    e060:	7203      	strb	r3, [r0, #8]
    e062:	b2a2      	uxth	r2, r4
    e064:	6869      	ldr	r1, [r5, #4]
    e066:	3009      	adds	r0, #9
    e068:	f7fe f87a 	bl	c160 <memcpy>
    e06c:	1c7a      	adds	r2, r7, #1
    e06e:	4643      	mov	r3, r8
    e070:	b292      	uxth	r2, r2
    e072:	8b31      	ldrh	r1, [r6, #24]
    e074:	2004      	movs	r0, #4
    e076:	f002 fdad 	bl	10bd4 <L2cDataReq>
    e07a:	e7e3      	b.n	e044 <attsProcReadReq+0x76>
    e07c:	2301      	movs	r3, #1
    e07e:	e7ca      	b.n	e016 <attsProcReadReq+0x48>
    e080:	10003bfc 	.word	0x10003bfc

0000e084 <attsFindUuidInRange>:
    e084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e088:	4699      	mov	r9, r3
    e08a:	4b1a      	ldr	r3, [pc, #104]	; (e0f4 <attsFindUuidInRange+0x70>)
    e08c:	9e08      	ldr	r6, [sp, #32]
    e08e:	681d      	ldr	r5, [r3, #0]
    e090:	460f      	mov	r7, r1
    e092:	4690      	mov	r8, r2
    e094:	4604      	mov	r4, r0
    e096:	f64f 7aff 	movw	sl, #65535	; 0xffff
    e09a:	b90d      	cbnz	r5, e0a0 <attsFindUuidInRange+0x1c>
    e09c:	462c      	mov	r4, r5
    e09e:	e025      	b.n	e0ec <attsFindUuidInRange+0x68>
    e0a0:	8a2a      	ldrh	r2, [r5, #16]
    e0a2:	42a2      	cmp	r2, r4
    e0a4:	d90c      	bls.n	e0c0 <attsFindUuidInRange+0x3c>
    e0a6:	42ba      	cmp	r2, r7
    e0a8:	d909      	bls.n	e0be <attsFindUuidInRange+0x3a>
    e0aa:	682d      	ldr	r5, [r5, #0]
    e0ac:	e7f5      	b.n	e09a <attsFindUuidInRange+0x16>
    e0ae:	4554      	cmp	r4, sl
    e0b0:	d0fb      	beq.n	e0aa <attsFindUuidInRange+0x26>
    e0b2:	6833      	ldr	r3, [r6, #0]
    e0b4:	3401      	adds	r4, #1
    e0b6:	3310      	adds	r3, #16
    e0b8:	b2a4      	uxth	r4, r4
    e0ba:	6033      	str	r3, [r6, #0]
    e0bc:	e008      	b.n	e0d0 <attsFindUuidInRange+0x4c>
    e0be:	4614      	mov	r4, r2
    e0c0:	8a6b      	ldrh	r3, [r5, #18]
    e0c2:	42a3      	cmp	r3, r4
    e0c4:	d3f1      	bcc.n	e0aa <attsFindUuidInRange+0x26>
    e0c6:	686b      	ldr	r3, [r5, #4]
    e0c8:	1aa2      	subs	r2, r4, r2
    e0ca:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e0ce:	6032      	str	r2, [r6, #0]
    e0d0:	8a6b      	ldrh	r3, [r5, #18]
    e0d2:	42a3      	cmp	r3, r4
    e0d4:	d3e9      	bcc.n	e0aa <attsFindUuidInRange+0x26>
    e0d6:	42bc      	cmp	r4, r7
    e0d8:	d8e7      	bhi.n	e0aa <attsFindUuidInRange+0x26>
    e0da:	464a      	mov	r2, r9
    e0dc:	4641      	mov	r1, r8
    e0de:	6830      	ldr	r0, [r6, #0]
    e0e0:	f7ff fe26 	bl	dd30 <attsUuidCmp>
    e0e4:	2800      	cmp	r0, #0
    e0e6:	d0e2      	beq.n	e0ae <attsFindUuidInRange+0x2a>
    e0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0ea:	601d      	str	r5, [r3, #0]
    e0ec:	4620      	mov	r0, r4
    e0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0f2:	bf00      	nop
    e0f4:	10003bfc 	.word	0x10003bfc

0000e0f8 <attsFindServiceGroupEnd>:
    e0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e0fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e0fe:	f8ad 3000 	strh.w	r3, [sp]
    e102:	4b1d      	ldr	r3, [pc, #116]	; (e178 <attsFindServiceGroupEnd+0x80>)
    e104:	881b      	ldrh	r3, [r3, #0]
    e106:	f8ad 3004 	strh.w	r3, [sp, #4]
    e10a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e10e:	4298      	cmp	r0, r3
    e110:	d104      	bne.n	e11c <attsFindServiceGroupEnd+0x24>
    e112:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e116:	4628      	mov	r0, r5
    e118:	b003      	add	sp, #12
    e11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e11c:	4b17      	ldr	r3, [pc, #92]	; (e17c <attsFindServiceGroupEnd+0x84>)
    e11e:	1c44      	adds	r4, r0, #1
    e120:	681f      	ldr	r7, [r3, #0]
    e122:	b2a4      	uxth	r4, r4
    e124:	4605      	mov	r5, r0
    e126:	2f00      	cmp	r7, #0
    e128:	d0f3      	beq.n	e112 <attsFindServiceGroupEnd+0x1a>
    e12a:	8a3e      	ldrh	r6, [r7, #16]
    e12c:	8a7b      	ldrh	r3, [r7, #18]
    e12e:	42b4      	cmp	r4, r6
    e130:	bf38      	it	cc
    e132:	4634      	movcc	r4, r6
    e134:	42a3      	cmp	r3, r4
    e136:	d306      	bcc.n	e146 <attsFindServiceGroupEnd+0x4e>
    e138:	1ba3      	subs	r3, r4, r6
    e13a:	687e      	ldr	r6, [r7, #4]
    e13c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    e140:	8a7b      	ldrh	r3, [r7, #18]
    e142:	42a3      	cmp	r3, r4
    e144:	d201      	bcs.n	e14a <attsFindServiceGroupEnd+0x52>
    e146:	683f      	ldr	r7, [r7, #0]
    e148:	e7ed      	b.n	e126 <attsFindServiceGroupEnd+0x2e>
    e14a:	466a      	mov	r2, sp
    e14c:	2102      	movs	r1, #2
    e14e:	4630      	mov	r0, r6
    e150:	f7ff fdee 	bl	dd30 <attsUuidCmp>
    e154:	2800      	cmp	r0, #0
    e156:	d1de      	bne.n	e116 <attsFindServiceGroupEnd+0x1e>
    e158:	aa01      	add	r2, sp, #4
    e15a:	2102      	movs	r1, #2
    e15c:	4630      	mov	r0, r6
    e15e:	f7ff fde7 	bl	dd30 <attsUuidCmp>
    e162:	2800      	cmp	r0, #0
    e164:	d1d7      	bne.n	e116 <attsFindServiceGroupEnd+0x1e>
    e166:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e16a:	429c      	cmp	r4, r3
    e16c:	d0d1      	beq.n	e112 <attsFindServiceGroupEnd+0x1a>
    e16e:	1c63      	adds	r3, r4, #1
    e170:	4625      	mov	r5, r4
    e172:	3610      	adds	r6, #16
    e174:	b29c      	uxth	r4, r3
    e176:	e7e3      	b.n	e140 <attsFindServiceGroupEnd+0x48>
    e178:	00025d54 	.word	0x00025d54
    e17c:	10003bfc 	.word	0x10003bfc

0000e180 <attsProcReadBlobReq>:
    e180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e184:	7a93      	ldrb	r3, [r2, #10]
    e186:	7a54      	ldrb	r4, [r2, #9]
    e188:	7ad5      	ldrb	r5, [r2, #11]
    e18a:	f892 800c 	ldrb.w	r8, [r2, #12]
    e18e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e192:	b085      	sub	sp, #20
    e194:	b2a4      	uxth	r4, r4
    e196:	4607      	mov	r7, r0
    e198:	a903      	add	r1, sp, #12
    e19a:	4620      	mov	r0, r4
    e19c:	f7ff fdf8 	bl	dd90 <attsFindByHandle>
    e1a0:	4606      	mov	r6, r0
    e1a2:	2800      	cmp	r0, #0
    e1a4:	d057      	beq.n	e256 <attsProcReadBlobReq+0xd6>
    e1a6:	7bc3      	ldrb	r3, [r0, #15]
    e1a8:	7f38      	ldrb	r0, [r7, #28]
    e1aa:	4622      	mov	r2, r4
    e1ac:	2101      	movs	r1, #1
    e1ae:	f7ff fe1b 	bl	dde8 <attsPermissions>
    e1b2:	b9b0      	cbnz	r0, e1e2 <attsProcReadBlobReq+0x62>
    e1b4:	68b3      	ldr	r3, [r6, #8]
    e1b6:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    e1ba:	881b      	ldrh	r3, [r3, #0]
    e1bc:	b2ad      	uxth	r5, r5
    e1be:	42ab      	cmp	r3, r5
    e1c0:	d34b      	bcc.n	e25a <attsProcReadBlobReq+0xda>
    e1c2:	7bb3      	ldrb	r3, [r6, #14]
    e1c4:	075a      	lsls	r2, r3, #29
    e1c6:	d513      	bpl.n	e1f0 <attsProcReadBlobReq+0x70>
    e1c8:	9a03      	ldr	r2, [sp, #12]
    e1ca:	f8d2 8008 	ldr.w	r8, [r2, #8]
    e1ce:	f1b8 0f00 	cmp.w	r8, #0
    e1d2:	d00d      	beq.n	e1f0 <attsProcReadBlobReq+0x70>
    e1d4:	7f38      	ldrb	r0, [r7, #28]
    e1d6:	9600      	str	r6, [sp, #0]
    e1d8:	462b      	mov	r3, r5
    e1da:	220c      	movs	r2, #12
    e1dc:	4621      	mov	r1, r4
    e1de:	47c0      	blx	r8
    e1e0:	b140      	cbz	r0, e1f4 <attsProcReadBlobReq+0x74>
    e1e2:	4603      	mov	r3, r0
    e1e4:	4622      	mov	r2, r4
    e1e6:	210c      	movs	r1, #12
    e1e8:	8b38      	ldrh	r0, [r7, #24]
    e1ea:	f7ff fc77 	bl	dadc <attsErrRsp>
    e1ee:	e012      	b.n	e216 <attsProcReadBlobReq+0x96>
    e1f0:	069b      	lsls	r3, r3, #26
    e1f2:	d413      	bmi.n	e21c <attsProcReadBlobReq+0x9c>
    e1f4:	68b3      	ldr	r3, [r6, #8]
    e1f6:	8b7a      	ldrh	r2, [r7, #26]
    e1f8:	881c      	ldrh	r4, [r3, #0]
    e1fa:	3a01      	subs	r2, #1
    e1fc:	1b64      	subs	r4, r4, r5
    e1fe:	4294      	cmp	r4, r2
    e200:	bfa8      	it	ge
    e202:	4614      	movge	r4, r2
    e204:	fa1f f884 	uxth.w	r8, r4
    e208:	f108 0009 	add.w	r0, r8, #9
    e20c:	b280      	uxth	r0, r0
    e20e:	f7fe f9fb 	bl	c608 <attMsgAlloc>
    e212:	4681      	mov	r9, r0
    e214:	b970      	cbnz	r0, e234 <attsProcReadBlobReq+0xb4>
    e216:	b005      	add	sp, #20
    e218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e21c:	4b10      	ldr	r3, [pc, #64]	; (e260 <attsProcReadBlobReq+0xe0>)
    e21e:	f8d3 8014 	ldr.w	r8, [r3, #20]
    e222:	f1b8 0f00 	cmp.w	r8, #0
    e226:	d0e5      	beq.n	e1f4 <attsProcReadBlobReq+0x74>
    e228:	6873      	ldr	r3, [r6, #4]
    e22a:	7f38      	ldrb	r0, [r7, #28]
    e22c:	4622      	mov	r2, r4
    e22e:	2105      	movs	r1, #5
    e230:	47c0      	blx	r8
    e232:	e7d5      	b.n	e1e0 <attsProcReadBlobReq+0x60>
    e234:	230d      	movs	r3, #13
    e236:	7203      	strb	r3, [r0, #8]
    e238:	6871      	ldr	r1, [r6, #4]
    e23a:	b2a2      	uxth	r2, r4
    e23c:	4429      	add	r1, r5
    e23e:	3009      	adds	r0, #9
    e240:	f7fd ff8e 	bl	c160 <memcpy>
    e244:	f108 0201 	add.w	r2, r8, #1
    e248:	464b      	mov	r3, r9
    e24a:	b292      	uxth	r2, r2
    e24c:	8b39      	ldrh	r1, [r7, #24]
    e24e:	2004      	movs	r0, #4
    e250:	f002 fcc0 	bl	10bd4 <L2cDataReq>
    e254:	e7df      	b.n	e216 <attsProcReadBlobReq+0x96>
    e256:	2001      	movs	r0, #1
    e258:	e7c3      	b.n	e1e2 <attsProcReadBlobReq+0x62>
    e25a:	2007      	movs	r0, #7
    e25c:	e7c1      	b.n	e1e2 <attsProcReadBlobReq+0x62>
    e25e:	bf00      	nop
    e260:	10003bfc 	.word	0x10003bfc

0000e264 <attsProcFindTypeReq>:
    e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e268:	7a93      	ldrb	r3, [r2, #10]
    e26a:	7a55      	ldrb	r5, [r2, #9]
    e26c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e270:	b2ad      	uxth	r5, r5
    e272:	b087      	sub	sp, #28
    e274:	4682      	mov	sl, r0
    e276:	4689      	mov	r9, r1
    e278:	4616      	mov	r6, r2
    e27a:	2d00      	cmp	r5, #0
    e27c:	d075      	beq.n	e36a <attsProcFindTypeReq+0x106>
    e27e:	7b13      	ldrb	r3, [r2, #12]
    e280:	f892 800b 	ldrb.w	r8, [r2, #11]
    e284:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    e288:	fa1f f888 	uxth.w	r8, r8
    e28c:	4545      	cmp	r5, r8
    e28e:	d86c      	bhi.n	e36a <attsProcFindTypeReq+0x106>
    e290:	8b40      	ldrh	r0, [r0, #26]
    e292:	3008      	adds	r0, #8
    e294:	b280      	uxth	r0, r0
    e296:	f7fe f9b7 	bl	c608 <attMsgAlloc>
    e29a:	4607      	mov	r7, r0
    e29c:	2800      	cmp	r0, #0
    e29e:	d066      	beq.n	e36e <attsProcFindTypeReq+0x10a>
    e2a0:	2307      	movs	r3, #7
    e2a2:	f100 0409 	add.w	r4, r0, #9
    e2a6:	7203      	strb	r3, [r0, #8]
    e2a8:	f1a9 0907 	sub.w	r9, r9, #7
    e2ac:	f106 030d 	add.w	r3, r6, #13
    e2b0:	fa1f f989 	uxth.w	r9, r9
    e2b4:	4628      	mov	r0, r5
    e2b6:	9403      	str	r4, [sp, #12]
    e2b8:	9302      	str	r3, [sp, #8]
    e2ba:	ab05      	add	r3, sp, #20
    e2bc:	9301      	str	r3, [sp, #4]
    e2be:	ab04      	add	r3, sp, #16
    e2c0:	9300      	str	r3, [sp, #0]
    e2c2:	2202      	movs	r2, #2
    e2c4:	9b02      	ldr	r3, [sp, #8]
    e2c6:	4641      	mov	r1, r8
    e2c8:	f7ff fedc 	bl	e084 <attsFindUuidInRange>
    e2cc:	4683      	mov	fp, r0
    e2ce:	b9c8      	cbnz	r0, e304 <attsProcFindTypeReq+0xa0>
    e2d0:	9b03      	ldr	r3, [sp, #12]
    e2d2:	429c      	cmp	r4, r3
    e2d4:	d14d      	bne.n	e372 <attsProcFindTypeReq+0x10e>
    e2d6:	4638      	mov	r0, r7
    e2d8:	f00c fb40 	bl	1a95c <WsfMsgFree>
    e2dc:	260a      	movs	r6, #10
    e2de:	4650      	mov	r0, sl
    e2e0:	f7ff fc7a 	bl	dbd8 <attsDiscBusy>
    e2e4:	f8ba 0018 	ldrh.w	r0, [sl, #24]
    e2e8:	2e00      	cmp	r6, #0
    e2ea:	d144      	bne.n	e376 <attsProcFindTypeReq+0x112>
    e2ec:	f107 0208 	add.w	r2, r7, #8
    e2f0:	1aa2      	subs	r2, r4, r2
    e2f2:	4601      	mov	r1, r0
    e2f4:	463b      	mov	r3, r7
    e2f6:	b292      	uxth	r2, r2
    e2f8:	2004      	movs	r0, #4
    e2fa:	f002 fc6b 	bl	10bd4 <L2cDataReq>
    e2fe:	b007      	add	sp, #28
    e300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e304:	9904      	ldr	r1, [sp, #16]
    e306:	7bca      	ldrb	r2, [r1, #15]
    e308:	07d3      	lsls	r3, r2, #31
    e30a:	d526      	bpl.n	e35a <attsProcFindTypeReq+0xf6>
    e30c:	f1b9 0f00 	cmp.w	r9, #0
    e310:	d00a      	beq.n	e328 <attsProcFindTypeReq+0xc4>
    e312:	688a      	ldr	r2, [r1, #8]
    e314:	8812      	ldrh	r2, [r2, #0]
    e316:	454a      	cmp	r2, r9
    e318:	d11f      	bne.n	e35a <attsProcFindTypeReq+0xf6>
    e31a:	464a      	mov	r2, r9
    e31c:	6849      	ldr	r1, [r1, #4]
    e31e:	f106 000f 	add.w	r0, r6, #15
    e322:	f7fd feed 	bl	c100 <memcmp>
    e326:	b9c0      	cbnz	r0, e35a <attsProcFindTypeReq+0xf6>
    e328:	7b72      	ldrb	r2, [r6, #13]
    e32a:	b9e2      	cbnz	r2, e366 <attsProcFindTypeReq+0x102>
    e32c:	7bb2      	ldrb	r2, [r6, #14]
    e32e:	2a28      	cmp	r2, #40	; 0x28
    e330:	4658      	mov	r0, fp
    e332:	d101      	bne.n	e338 <attsProcFindTypeReq+0xd4>
    e334:	f7ff fee0 	bl	e0f8 <attsFindServiceGroupEnd>
    e338:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    e33c:	3208      	adds	r2, #8
    e33e:	1d21      	adds	r1, r4, #4
    e340:	443a      	add	r2, r7
    e342:	4291      	cmp	r1, r2
    e344:	d8c4      	bhi.n	e2d0 <attsProcFindTypeReq+0x6c>
    e346:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e34a:	7063      	strb	r3, [r4, #1]
    e34c:	0a03      	lsrs	r3, r0, #8
    e34e:	f884 b000 	strb.w	fp, [r4]
    e352:	70a0      	strb	r0, [r4, #2]
    e354:	70e3      	strb	r3, [r4, #3]
    e356:	4683      	mov	fp, r0
    e358:	460c      	mov	r4, r1
    e35a:	45c3      	cmp	fp, r8
    e35c:	d2b8      	bcs.n	e2d0 <attsProcFindTypeReq+0x6c>
    e35e:	f10b 0001 	add.w	r0, fp, #1
    e362:	b280      	uxth	r0, r0
    e364:	e7a9      	b.n	e2ba <attsProcFindTypeReq+0x56>
    e366:	4658      	mov	r0, fp
    e368:	e7e6      	b.n	e338 <attsProcFindTypeReq+0xd4>
    e36a:	2601      	movs	r6, #1
    e36c:	e7b7      	b.n	e2de <attsProcFindTypeReq+0x7a>
    e36e:	2611      	movs	r6, #17
    e370:	e7b5      	b.n	e2de <attsProcFindTypeReq+0x7a>
    e372:	2600      	movs	r6, #0
    e374:	e7b3      	b.n	e2de <attsProcFindTypeReq+0x7a>
    e376:	4633      	mov	r3, r6
    e378:	462a      	mov	r2, r5
    e37a:	2106      	movs	r1, #6
    e37c:	f7ff fbae 	bl	dadc <attsErrRsp>
    e380:	e7bd      	b.n	e2fe <attsProcFindTypeReq+0x9a>

0000e382 <attsProcReadTypeReq>:
    e382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e386:	3905      	subs	r1, #5
    e388:	4606      	mov	r6, r0
    e38a:	7a54      	ldrb	r4, [r2, #9]
    e38c:	7a90      	ldrb	r0, [r2, #10]
    e38e:	fa5f fa81 	uxtb.w	sl, r1
    e392:	eb04 2400 	add.w	r4, r4, r0, lsl #8
    e396:	f1ba 0f02 	cmp.w	sl, #2
    e39a:	b089      	sub	sp, #36	; 0x24
    e39c:	b2a4      	uxth	r4, r4
    e39e:	d003      	beq.n	e3a8 <attsProcReadTypeReq+0x26>
    e3a0:	f1ba 0f10 	cmp.w	sl, #16
    e3a4:	f040 80d4 	bne.w	e550 <attsProcReadTypeReq+0x1ce>
    e3a8:	2c00      	cmp	r4, #0
    e3aa:	f000 80d3 	beq.w	e554 <attsProcReadTypeReq+0x1d2>
    e3ae:	7b13      	ldrb	r3, [r2, #12]
    e3b0:	f892 900b 	ldrb.w	r9, [r2, #11]
    e3b4:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    e3b8:	fa1f f989 	uxth.w	r9, r9
    e3bc:	454c      	cmp	r4, r9
    e3be:	f200 80c9 	bhi.w	e554 <attsProcReadTypeReq+0x1d2>
    e3c2:	f102 030d 	add.w	r3, r2, #13
    e3c6:	9304      	str	r3, [sp, #16]
    e3c8:	ab07      	add	r3, sp, #28
    e3ca:	9301      	str	r3, [sp, #4]
    e3cc:	ab06      	add	r3, sp, #24
    e3ce:	9300      	str	r3, [sp, #0]
    e3d0:	4620      	mov	r0, r4
    e3d2:	9b04      	ldr	r3, [sp, #16]
    e3d4:	4652      	mov	r2, sl
    e3d6:	4649      	mov	r1, r9
    e3d8:	f7ff fe54 	bl	e084 <attsFindUuidInRange>
    e3dc:	4604      	mov	r4, r0
    e3de:	2800      	cmp	r0, #0
    e3e0:	f000 80ba 	beq.w	e558 <attsProcReadTypeReq+0x1d6>
    e3e4:	9b06      	ldr	r3, [sp, #24]
    e3e6:	4602      	mov	r2, r0
    e3e8:	7bdb      	ldrb	r3, [r3, #15]
    e3ea:	7f30      	ldrb	r0, [r6, #28]
    e3ec:	2101      	movs	r1, #1
    e3ee:	f7ff fcfb 	bl	dde8 <attsPermissions>
    e3f2:	4603      	mov	r3, r0
    e3f4:	b9c0      	cbnz	r0, e428 <attsProcReadTypeReq+0xa6>
    e3f6:	9a06      	ldr	r2, [sp, #24]
    e3f8:	7b91      	ldrb	r1, [r2, #14]
    e3fa:	074d      	lsls	r5, r1, #29
    e3fc:	d50a      	bpl.n	e414 <attsProcReadTypeReq+0x92>
    e3fe:	9807      	ldr	r0, [sp, #28]
    e400:	6885      	ldr	r5, [r0, #8]
    e402:	b13d      	cbz	r5, e414 <attsProcReadTypeReq+0x92>
    e404:	9200      	str	r2, [sp, #0]
    e406:	7f30      	ldrb	r0, [r6, #28]
    e408:	2208      	movs	r2, #8
    e40a:	4621      	mov	r1, r4
    e40c:	47a8      	blx	r5
    e40e:	4603      	mov	r3, r0
    e410:	b950      	cbnz	r0, e428 <attsProcReadTypeReq+0xa6>
    e412:	e001      	b.n	e418 <attsProcReadTypeReq+0x96>
    e414:	0688      	lsls	r0, r1, #26
    e416:	d40d      	bmi.n	e434 <attsProcReadTypeReq+0xb2>
    e418:	8b70      	ldrh	r0, [r6, #26]
    e41a:	3008      	adds	r0, #8
    e41c:	b280      	uxth	r0, r0
    e41e:	f7fe f8f3 	bl	c608 <attMsgAlloc>
    e422:	4680      	mov	r8, r0
    e424:	b980      	cbnz	r0, e448 <attsProcReadTypeReq+0xc6>
    e426:	2311      	movs	r3, #17
    e428:	4622      	mov	r2, r4
    e42a:	2108      	movs	r1, #8
    e42c:	8b30      	ldrh	r0, [r6, #24]
    e42e:	f7ff fb55 	bl	dadc <attsErrRsp>
    e432:	e057      	b.n	e4e4 <attsProcReadTypeReq+0x162>
    e434:	4b49      	ldr	r3, [pc, #292]	; (e55c <attsProcReadTypeReq+0x1da>)
    e436:	695d      	ldr	r5, [r3, #20]
    e438:	2d00      	cmp	r5, #0
    e43a:	d0ed      	beq.n	e418 <attsProcReadTypeReq+0x96>
    e43c:	6853      	ldr	r3, [r2, #4]
    e43e:	7f30      	ldrb	r0, [r6, #28]
    e440:	4622      	mov	r2, r4
    e442:	2105      	movs	r1, #5
    e444:	47a8      	blx	r5
    e446:	e7e2      	b.n	e40e <attsProcReadTypeReq+0x8c>
    e448:	2309      	movs	r3, #9
    e44a:	7203      	strb	r3, [r0, #8]
    e44c:	9b06      	ldr	r3, [sp, #24]
    e44e:	8b77      	ldrh	r7, [r6, #26]
    e450:	689a      	ldr	r2, [r3, #8]
    e452:	8812      	ldrh	r2, [r2, #0]
    e454:	7284      	strb	r4, [r0, #10]
    e456:	3f04      	subs	r7, #4
    e458:	4297      	cmp	r7, r2
    e45a:	bf28      	it	cs
    e45c:	4617      	movcs	r7, r2
    e45e:	b2ff      	uxtb	r7, r7
    e460:	1cba      	adds	r2, r7, #2
    e462:	9205      	str	r2, [sp, #20]
    e464:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e468:	7242      	strb	r2, [r0, #9]
    e46a:	0a22      	lsrs	r2, r4, #8
    e46c:	72c2      	strb	r2, [r0, #11]
    e46e:	f100 050c 	add.w	r5, r0, #12
    e472:	6859      	ldr	r1, [r3, #4]
    e474:	4628      	mov	r0, r5
    e476:	463a      	mov	r2, r7
    e478:	f7fd fe72 	bl	c160 <memcpy>
    e47c:	3401      	adds	r4, #1
    e47e:	1cbb      	adds	r3, r7, #2
    e480:	b2a0      	uxth	r0, r4
    e482:	441d      	add	r5, r3
    e484:	1eab      	subs	r3, r5, #2
    e486:	9303      	str	r3, [sp, #12]
    e488:	ab07      	add	r3, sp, #28
    e48a:	9301      	str	r3, [sp, #4]
    e48c:	ab06      	add	r3, sp, #24
    e48e:	9300      	str	r3, [sp, #0]
    e490:	4652      	mov	r2, sl
    e492:	9b04      	ldr	r3, [sp, #16]
    e494:	4649      	mov	r1, r9
    e496:	f7ff fdf5 	bl	e084 <attsFindUuidInRange>
    e49a:	4604      	mov	r4, r0
    e49c:	b1c0      	cbz	r0, e4d0 <attsProcReadTypeReq+0x14e>
    e49e:	9b06      	ldr	r3, [sp, #24]
    e4a0:	7b9a      	ldrb	r2, [r3, #14]
    e4a2:	0751      	lsls	r1, r2, #29
    e4a4:	d50d      	bpl.n	e4c2 <attsProcReadTypeReq+0x140>
    e4a6:	9907      	ldr	r1, [sp, #28]
    e4a8:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e4ac:	f1bb 0f00 	cmp.w	fp, #0
    e4b0:	d007      	beq.n	e4c2 <attsProcReadTypeReq+0x140>
    e4b2:	9300      	str	r3, [sp, #0]
    e4b4:	7f30      	ldrb	r0, [r6, #28]
    e4b6:	2300      	movs	r3, #0
    e4b8:	2208      	movs	r2, #8
    e4ba:	4621      	mov	r1, r4
    e4bc:	47d8      	blx	fp
    e4be:	b110      	cbz	r0, e4c6 <attsProcReadTypeReq+0x144>
    e4c0:	e006      	b.n	e4d0 <attsProcReadTypeReq+0x14e>
    e4c2:	0692      	lsls	r2, r2, #26
    e4c4:	d411      	bmi.n	e4ea <attsProcReadTypeReq+0x168>
    e4c6:	9b06      	ldr	r3, [sp, #24]
    e4c8:	689a      	ldr	r2, [r3, #8]
    e4ca:	8812      	ldrh	r2, [r2, #0]
    e4cc:	42ba      	cmp	r2, r7
    e4ce:	d018      	beq.n	e502 <attsProcReadTypeReq+0x180>
    e4d0:	9b03      	ldr	r3, [sp, #12]
    e4d2:	8b31      	ldrh	r1, [r6, #24]
    e4d4:	f108 0208 	add.w	r2, r8, #8
    e4d8:	1a9a      	subs	r2, r3, r2
    e4da:	b292      	uxth	r2, r2
    e4dc:	4643      	mov	r3, r8
    e4de:	2004      	movs	r0, #4
    e4e0:	f002 fb78 	bl	10bd4 <L2cDataReq>
    e4e4:	b009      	add	sp, #36	; 0x24
    e4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4ea:	4a1c      	ldr	r2, [pc, #112]	; (e55c <attsProcReadTypeReq+0x1da>)
    e4ec:	f8d2 b014 	ldr.w	fp, [r2, #20]
    e4f0:	f1bb 0f00 	cmp.w	fp, #0
    e4f4:	d0e7      	beq.n	e4c6 <attsProcReadTypeReq+0x144>
    e4f6:	685b      	ldr	r3, [r3, #4]
    e4f8:	7f30      	ldrb	r0, [r6, #28]
    e4fa:	4622      	mov	r2, r4
    e4fc:	2105      	movs	r1, #5
    e4fe:	47d8      	blx	fp
    e500:	e7dd      	b.n	e4be <attsProcReadTypeReq+0x13c>
    e502:	7bdb      	ldrb	r3, [r3, #15]
    e504:	7f30      	ldrb	r0, [r6, #28]
    e506:	4622      	mov	r2, r4
    e508:	2101      	movs	r1, #1
    e50a:	f7ff fc6d 	bl	dde8 <attsPermissions>
    e50e:	2800      	cmp	r0, #0
    e510:	d1de      	bne.n	e4d0 <attsProcReadTypeReq+0x14e>
    e512:	8b73      	ldrh	r3, [r6, #26]
    e514:	3308      	adds	r3, #8
    e516:	eb07 0b05 	add.w	fp, r7, r5
    e51a:	4443      	add	r3, r8
    e51c:	459b      	cmp	fp, r3
    e51e:	d8d7      	bhi.n	e4d0 <attsProcReadTypeReq+0x14e>
    e520:	0a23      	lsrs	r3, r4, #8
    e522:	f805 4c02 	strb.w	r4, [r5, #-2]
    e526:	f805 3c01 	strb.w	r3, [r5, #-1]
    e52a:	9b06      	ldr	r3, [sp, #24]
    e52c:	463a      	mov	r2, r7
    e52e:	6859      	ldr	r1, [r3, #4]
    e530:	4628      	mov	r0, r5
    e532:	f7fd fe15 	bl	c160 <memcpy>
    e536:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e53a:	429c      	cmp	r4, r3
    e53c:	d005      	beq.n	e54a <attsProcReadTypeReq+0x1c8>
    e53e:	3401      	adds	r4, #1
    e540:	b2a0      	uxth	r0, r4
    e542:	9b05      	ldr	r3, [sp, #20]
    e544:	4581      	cmp	r9, r0
    e546:	441d      	add	r5, r3
    e548:	d29c      	bcs.n	e484 <attsProcReadTypeReq+0x102>
    e54a:	f8cd b00c 	str.w	fp, [sp, #12]
    e54e:	e7bf      	b.n	e4d0 <attsProcReadTypeReq+0x14e>
    e550:	2304      	movs	r3, #4
    e552:	e769      	b.n	e428 <attsProcReadTypeReq+0xa6>
    e554:	2301      	movs	r3, #1
    e556:	e767      	b.n	e428 <attsProcReadTypeReq+0xa6>
    e558:	230a      	movs	r3, #10
    e55a:	e765      	b.n	e428 <attsProcReadTypeReq+0xa6>
    e55c:	10003bfc 	.word	0x10003bfc

0000e560 <attsProcReadMultReq>:
    e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e564:	4607      	mov	r7, r0
    e566:	8b40      	ldrh	r0, [r0, #26]
    e568:	3008      	adds	r0, #8
    e56a:	b087      	sub	sp, #28
    e56c:	b280      	uxth	r0, r0
    e56e:	460c      	mov	r4, r1
    e570:	4693      	mov	fp, r2
    e572:	f7fe f849 	bl	c608 <attMsgAlloc>
    e576:	4605      	mov	r5, r0
    e578:	2800      	cmp	r0, #0
    e57a:	d060      	beq.n	e63e <attsProcReadMultReq+0xde>
    e57c:	230f      	movs	r3, #15
    e57e:	3408      	adds	r4, #8
    e580:	f10b 0909 	add.w	r9, fp, #9
    e584:	f100 0609 	add.w	r6, r0, #9
    e588:	7203      	strb	r3, [r0, #8]
    e58a:	44a3      	add	fp, r4
    e58c:	45d9      	cmp	r9, fp
    e58e:	d309      	bcc.n	e5a4 <attsProcReadMultReq+0x44>
    e590:	f105 0208 	add.w	r2, r5, #8
    e594:	1ab2      	subs	r2, r6, r2
    e596:	462b      	mov	r3, r5
    e598:	b292      	uxth	r2, r2
    e59a:	8b39      	ldrh	r1, [r7, #24]
    e59c:	2004      	movs	r0, #4
    e59e:	f002 fb19 	bl	10bd4 <L2cDataReq>
    e5a2:	e053      	b.n	e64c <attsProcReadMultReq+0xec>
    e5a4:	f899 3001 	ldrb.w	r3, [r9, #1]
    e5a8:	f819 4b02 	ldrb.w	r4, [r9], #2
    e5ac:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e5b0:	b2a4      	uxth	r4, r4
    e5b2:	a905      	add	r1, sp, #20
    e5b4:	4620      	mov	r0, r4
    e5b6:	f7ff fbeb 	bl	dd90 <attsFindByHandle>
    e5ba:	4680      	mov	r8, r0
    e5bc:	2800      	cmp	r0, #0
    e5be:	d048      	beq.n	e652 <attsProcReadMultReq+0xf2>
    e5c0:	7bc3      	ldrb	r3, [r0, #15]
    e5c2:	7f38      	ldrb	r0, [r7, #28]
    e5c4:	4622      	mov	r2, r4
    e5c6:	2101      	movs	r1, #1
    e5c8:	f7ff fc0e 	bl	dde8 <attsPermissions>
    e5cc:	4603      	mov	r3, r0
    e5ce:	2800      	cmp	r0, #0
    e5d0:	d140      	bne.n	e654 <attsProcReadMultReq+0xf4>
    e5d2:	f898 200e 	ldrb.w	r2, [r8, #14]
    e5d6:	0751      	lsls	r1, r2, #29
    e5d8:	d522      	bpl.n	e620 <attsProcReadMultReq+0xc0>
    e5da:	9905      	ldr	r1, [sp, #20]
    e5dc:	f8d1 a008 	ldr.w	sl, [r1, #8]
    e5e0:	f1ba 0f00 	cmp.w	sl, #0
    e5e4:	d01c      	beq.n	e620 <attsProcReadMultReq+0xc0>
    e5e6:	7f38      	ldrb	r0, [r7, #28]
    e5e8:	f8cd 8000 	str.w	r8, [sp]
    e5ec:	220e      	movs	r2, #14
    e5ee:	4621      	mov	r1, r4
    e5f0:	47d0      	blx	sl
    e5f2:	4603      	mov	r3, r0
    e5f4:	bb70      	cbnz	r0, e654 <attsProcReadMultReq+0xf4>
    e5f6:	8b7a      	ldrh	r2, [r7, #26]
    e5f8:	3208      	adds	r2, #8
    e5fa:	442a      	add	r2, r5
    e5fc:	42b2      	cmp	r2, r6
    e5fe:	d9c5      	bls.n	e58c <attsProcReadMultReq+0x2c>
    e600:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e604:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e608:	881c      	ldrh	r4, [r3, #0]
    e60a:	1b92      	subs	r2, r2, r6
    e60c:	b292      	uxth	r2, r2
    e60e:	4294      	cmp	r4, r2
    e610:	bf28      	it	cs
    e612:	4614      	movcs	r4, r2
    e614:	4630      	mov	r0, r6
    e616:	4622      	mov	r2, r4
    e618:	f7fd fda2 	bl	c160 <memcpy>
    e61c:	4426      	add	r6, r4
    e61e:	e7b5      	b.n	e58c <attsProcReadMultReq+0x2c>
    e620:	0693      	lsls	r3, r2, #26
    e622:	d5e8      	bpl.n	e5f6 <attsProcReadMultReq+0x96>
    e624:	4b0e      	ldr	r3, [pc, #56]	; (e660 <attsProcReadMultReq+0x100>)
    e626:	f8d3 a014 	ldr.w	sl, [r3, #20]
    e62a:	f1ba 0f00 	cmp.w	sl, #0
    e62e:	d0e2      	beq.n	e5f6 <attsProcReadMultReq+0x96>
    e630:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e634:	7f38      	ldrb	r0, [r7, #28]
    e636:	4622      	mov	r2, r4
    e638:	2105      	movs	r1, #5
    e63a:	47d0      	blx	sl
    e63c:	e7d9      	b.n	e5f2 <attsProcReadMultReq+0x92>
    e63e:	2311      	movs	r3, #17
    e640:	4604      	mov	r4, r0
    e642:	4622      	mov	r2, r4
    e644:	210e      	movs	r1, #14
    e646:	8b38      	ldrh	r0, [r7, #24]
    e648:	f7ff fa48 	bl	dadc <attsErrRsp>
    e64c:	b007      	add	sp, #28
    e64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e652:	2301      	movs	r3, #1
    e654:	4628      	mov	r0, r5
    e656:	9303      	str	r3, [sp, #12]
    e658:	f00c f980 	bl	1a95c <WsfMsgFree>
    e65c:	9b03      	ldr	r3, [sp, #12]
    e65e:	e7f0      	b.n	e642 <attsProcReadMultReq+0xe2>
    e660:	10003bfc 	.word	0x10003bfc

0000e664 <attsProcReadGroupTypeReq>:
    e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e668:	b08f      	sub	sp, #60	; 0x3c
    e66a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e66e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    e672:	7a57      	ldrb	r7, [r2, #9]
    e674:	7a93      	ldrb	r3, [r2, #10]
    e676:	3905      	subs	r1, #5
    e678:	fa5f fa81 	uxtb.w	sl, r1
    e67c:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    e680:	f1ba 0f02 	cmp.w	sl, #2
    e684:	4681      	mov	r9, r0
    e686:	b2bf      	uxth	r7, r7
    e688:	d003      	beq.n	e692 <attsProcReadGroupTypeReq+0x2e>
    e68a:	f1ba 0f10 	cmp.w	sl, #16
    e68e:	f040 80b6 	bne.w	e7fe <attsProcReadGroupTypeReq+0x19a>
    e692:	2f00      	cmp	r7, #0
    e694:	f000 80b8 	beq.w	e808 <attsProcReadGroupTypeReq+0x1a4>
    e698:	7b11      	ldrb	r1, [r2, #12]
    e69a:	7ad3      	ldrb	r3, [r2, #11]
    e69c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e6a0:	b29b      	uxth	r3, r3
    e6a2:	429f      	cmp	r7, r3
    e6a4:	9303      	str	r3, [sp, #12]
    e6a6:	f200 80c7 	bhi.w	e838 <attsProcReadGroupTypeReq+0x1d4>
    e6aa:	f102 030d 	add.w	r3, r2, #13
    e6ae:	461a      	mov	r2, r3
    e6b0:	4651      	mov	r1, sl
    e6b2:	a80b      	add	r0, sp, #44	; 0x2c
    e6b4:	9308      	str	r3, [sp, #32]
    e6b6:	f7ff fb58 	bl	dd6a <attsUuid16Cmp>
    e6ba:	2800      	cmp	r0, #0
    e6bc:	f000 80bf 	beq.w	e83e <attsProcReadGroupTypeReq+0x1da>
    e6c0:	ab0d      	add	r3, sp, #52	; 0x34
    e6c2:	9301      	str	r3, [sp, #4]
    e6c4:	ab0c      	add	r3, sp, #48	; 0x30
    e6c6:	9300      	str	r3, [sp, #0]
    e6c8:	4652      	mov	r2, sl
    e6ca:	9b08      	ldr	r3, [sp, #32]
    e6cc:	9903      	ldr	r1, [sp, #12]
    e6ce:	4638      	mov	r0, r7
    e6d0:	f7ff fcd8 	bl	e084 <attsFindUuidInRange>
    e6d4:	4604      	mov	r4, r0
    e6d6:	2800      	cmp	r0, #0
    e6d8:	f000 80b4 	beq.w	e844 <attsProcReadGroupTypeReq+0x1e0>
    e6dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6de:	4602      	mov	r2, r0
    e6e0:	7bdb      	ldrb	r3, [r3, #15]
    e6e2:	f899 001c 	ldrb.w	r0, [r9, #28]
    e6e6:	2101      	movs	r1, #1
    e6e8:	f7ff fb7e 	bl	dde8 <attsPermissions>
    e6ec:	4680      	mov	r8, r0
    e6ee:	2800      	cmp	r0, #0
    e6f0:	f040 80ab 	bne.w	e84a <attsProcReadGroupTypeReq+0x1e6>
    e6f4:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    e6f8:	3008      	adds	r0, #8
    e6fa:	b280      	uxth	r0, r0
    e6fc:	f7fd ff84 	bl	c608 <attMsgAlloc>
    e700:	2311      	movs	r3, #17
    e702:	4605      	mov	r5, r0
    e704:	2800      	cmp	r0, #0
    e706:	f000 80a2 	beq.w	e84e <attsProcReadGroupTypeReq+0x1ea>
    e70a:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    e70e:	7203      	strb	r3, [r0, #8]
    e710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e712:	f8b9 201a 	ldrh.w	r2, [r9, #26]
    e716:	689b      	ldr	r3, [r3, #8]
    e718:	881b      	ldrh	r3, [r3, #0]
    e71a:	7284      	strb	r4, [r0, #10]
    e71c:	3a06      	subs	r2, #6
    e71e:	4293      	cmp	r3, r2
    e720:	bf28      	it	cs
    e722:	4613      	movcs	r3, r2
    e724:	b2db      	uxtb	r3, r3
    e726:	9304      	str	r3, [sp, #16]
    e728:	3304      	adds	r3, #4
    e72a:	9305      	str	r3, [sp, #20]
    e72c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e730:	7243      	strb	r3, [r0, #9]
    e732:	0a23      	lsrs	r3, r4, #8
    e734:	72c3      	strb	r3, [r0, #11]
    e736:	4620      	mov	r0, r4
    e738:	f7ff fcde 	bl	e0f8 <attsFindServiceGroupEnd>
    e73c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e73e:	7328      	strb	r0, [r5, #12]
    e740:	0a02      	lsrs	r2, r0, #8
    e742:	f105 030e 	add.w	r3, r5, #14
    e746:	736a      	strb	r2, [r5, #13]
    e748:	4683      	mov	fp, r0
    e74a:	9a04      	ldr	r2, [sp, #16]
    e74c:	6849      	ldr	r1, [r1, #4]
    e74e:	4618      	mov	r0, r3
    e750:	f7fd fd06 	bl	c160 <memcpy>
    e754:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e758:	9206      	str	r2, [sp, #24]
    e75a:	3e06      	subs	r6, #6
    e75c:	1ab6      	subs	r6, r6, r2
    e75e:	9b06      	ldr	r3, [sp, #24]
    e760:	b2b2      	uxth	r2, r6
    e762:	9207      	str	r2, [sp, #28]
    e764:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
    e768:	9a05      	ldr	r2, [sp, #20]
    e76a:	33fc      	adds	r3, #252	; 0xfc
    e76c:	1886      	adds	r6, r0, r2
    e76e:	9309      	str	r3, [sp, #36]	; 0x24
    e770:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e774:	459b      	cmp	fp, r3
    e776:	f1a6 0404 	sub.w	r4, r6, #4
    e77a:	d049      	beq.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e77c:	f10b 0001 	add.w	r0, fp, #1
    e780:	9b03      	ldr	r3, [sp, #12]
    e782:	b280      	uxth	r0, r0
    e784:	4283      	cmp	r3, r0
    e786:	d343      	bcc.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e788:	ab0d      	add	r3, sp, #52	; 0x34
    e78a:	9301      	str	r3, [sp, #4]
    e78c:	ab0c      	add	r3, sp, #48	; 0x30
    e78e:	9300      	str	r3, [sp, #0]
    e790:	4652      	mov	r2, sl
    e792:	9b08      	ldr	r3, [sp, #32]
    e794:	9903      	ldr	r1, [sp, #12]
    e796:	f7ff fc75 	bl	e084 <attsFindUuidInRange>
    e79a:	4683      	mov	fp, r0
    e79c:	2800      	cmp	r0, #0
    e79e:	d037      	beq.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a2:	9906      	ldr	r1, [sp, #24]
    e7a4:	689a      	ldr	r2, [r3, #8]
    e7a6:	8812      	ldrh	r2, [r2, #0]
    e7a8:	428a      	cmp	r2, r1
    e7aa:	d131      	bne.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e7ac:	4602      	mov	r2, r0
    e7ae:	7bdb      	ldrb	r3, [r3, #15]
    e7b0:	f899 001c 	ldrb.w	r0, [r9, #28]
    e7b4:	2101      	movs	r1, #1
    e7b6:	f7ff fb17 	bl	dde8 <attsPermissions>
    e7ba:	bb48      	cbnz	r0, e810 <attsProcReadGroupTypeReq+0x1ac>
    e7bc:	9b07      	ldr	r3, [sp, #28]
    e7be:	9a05      	ldr	r2, [sp, #20]
    e7c0:	4293      	cmp	r3, r2
    e7c2:	d347      	bcc.n	e854 <attsProcReadGroupTypeReq+0x1f0>
    e7c4:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e7c8:	f806 bc04 	strb.w	fp, [r6, #-4]
    e7cc:	f806 3c03 	strb.w	r3, [r6, #-3]
    e7d0:	4658      	mov	r0, fp
    e7d2:	f7ff fc91 	bl	e0f8 <attsFindServiceGroupEnd>
    e7d6:	0a03      	lsrs	r3, r0, #8
    e7d8:	f806 0c02 	strb.w	r0, [r6, #-2]
    e7dc:	f806 3c01 	strb.w	r3, [r6, #-1]
    e7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7e2:	9a04      	ldr	r2, [sp, #16]
    e7e4:	6859      	ldr	r1, [r3, #4]
    e7e6:	4683      	mov	fp, r0
    e7e8:	4630      	mov	r0, r6
    e7ea:	f7fd fcb9 	bl	c160 <memcpy>
    e7ee:	9b07      	ldr	r3, [sp, #28]
    e7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e7f2:	4413      	add	r3, r2
    e7f4:	b29b      	uxth	r3, r3
    e7f6:	9307      	str	r3, [sp, #28]
    e7f8:	9b05      	ldr	r3, [sp, #20]
    e7fa:	441e      	add	r6, r3
    e7fc:	e7b8      	b.n	e770 <attsProcReadGroupTypeReq+0x10c>
    e7fe:	f04f 0804 	mov.w	r8, #4
    e802:	2400      	movs	r4, #0
    e804:	4625      	mov	r5, r4
    e806:	e003      	b.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e808:	f04f 0801 	mov.w	r8, #1
    e80c:	463c      	mov	r4, r7
    e80e:	463d      	mov	r5, r7
    e810:	4648      	mov	r0, r9
    e812:	f7ff f9e1 	bl	dbd8 <attsDiscBusy>
    e816:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    e81a:	f1b8 0f00 	cmp.w	r8, #0
    e81e:	d11b      	bne.n	e858 <attsProcReadGroupTypeReq+0x1f4>
    e820:	f105 0208 	add.w	r2, r5, #8
    e824:	1aa2      	subs	r2, r4, r2
    e826:	4601      	mov	r1, r0
    e828:	462b      	mov	r3, r5
    e82a:	b292      	uxth	r2, r2
    e82c:	2004      	movs	r0, #4
    e82e:	f002 f9d1 	bl	10bd4 <L2cDataReq>
    e832:	b00f      	add	sp, #60	; 0x3c
    e834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e838:	f04f 0801 	mov.w	r8, #1
    e83c:	e7e1      	b.n	e802 <attsProcReadGroupTypeReq+0x19e>
    e83e:	f04f 0810 	mov.w	r8, #16
    e842:	e7de      	b.n	e802 <attsProcReadGroupTypeReq+0x19e>
    e844:	f04f 080a 	mov.w	r8, #10
    e848:	e7dc      	b.n	e804 <attsProcReadGroupTypeReq+0x1a0>
    e84a:	4627      	mov	r7, r4
    e84c:	e7d9      	b.n	e802 <attsProcReadGroupTypeReq+0x19e>
    e84e:	4604      	mov	r4, r0
    e850:	4698      	mov	r8, r3
    e852:	e7dd      	b.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e854:	4680      	mov	r8, r0
    e856:	e7db      	b.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e858:	4643      	mov	r3, r8
    e85a:	463a      	mov	r2, r7
    e85c:	2110      	movs	r1, #16
    e85e:	f7ff f93d 	bl	dadc <attsErrRsp>
    e862:	e7e6      	b.n	e832 <attsProcReadGroupTypeReq+0x1ce>

0000e864 <attsSignedWriteStart>:
    e864:	6843      	ldr	r3, [r0, #4]
    e866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e868:	4606      	mov	r6, r0
    e86a:	460d      	mov	r5, r1
    e86c:	b1eb      	cbz	r3, e8aa <attsSignedWriteStart+0x46>
    e86e:	894c      	ldrh	r4, [r1, #10]
    e870:	3404      	adds	r4, #4
    e872:	b2a4      	uxth	r4, r4
    e874:	4620      	mov	r0, r4
    e876:	f00b ffcb 	bl	1a810 <WsfBufAlloc>
    e87a:	60b5      	str	r5, [r6, #8]
    e87c:	4607      	mov	r7, r0
    e87e:	b1a0      	cbz	r0, e8aa <attsSignedWriteStart+0x46>
    e880:	4622      	mov	r2, r4
    e882:	f105 0110 	add.w	r1, r5, #16
    e886:	f00b fa43 	bl	19d10 <WStrReverseCpy>
    e88a:	4b0c      	ldr	r3, [pc, #48]	; (e8bc <attsSignedWriteStart+0x58>)
    e88c:	6870      	ldr	r0, [r6, #4]
    e88e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    e892:	2223      	movs	r2, #35	; 0x23
    e894:	9201      	str	r2, [sp, #4]
    e896:	7b2a      	ldrb	r2, [r5, #12]
    e898:	9200      	str	r2, [sp, #0]
    e89a:	4639      	mov	r1, r7
    e89c:	b2e2      	uxtb	r2, r4
    e89e:	f009 fdfd 	bl	1849c <SecCmac>
    e8a2:	b940      	cbnz	r0, e8b6 <attsSignedWriteStart+0x52>
    e8a4:	4638      	mov	r0, r7
    e8a6:	f00b fff3 	bl	1a890 <WsfBufFree>
    e8aa:	4628      	mov	r0, r5
    e8ac:	b003      	add	sp, #12
    e8ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e8b2:	f00b bfed 	b.w	1a890 <WsfBufFree>
    e8b6:	b003      	add	sp, #12
    e8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8ba:	bf00      	nop
    e8bc:	10003798 	.word	0x10003798

0000e8c0 <attsProcSignedWrite>:
    e8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e8c4:	7a93      	ldrb	r3, [r2, #10]
    e8c6:	7a55      	ldrb	r5, [r2, #9]
    e8c8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e8cc:	b2ad      	uxth	r5, r5
    e8ce:	4607      	mov	r7, r0
    e8d0:	4689      	mov	r9, r1
    e8d2:	4628      	mov	r0, r5
    e8d4:	a901      	add	r1, sp, #4
    e8d6:	4690      	mov	r8, r2
    e8d8:	f7ff fa5a 	bl	dd90 <attsFindByHandle>
    e8dc:	4604      	mov	r4, r0
    e8de:	2800      	cmp	r0, #0
    e8e0:	d033      	beq.n	e94a <attsProcSignedWrite+0x8a>
    e8e2:	7bc3      	ldrb	r3, [r0, #15]
    e8e4:	7f38      	ldrb	r0, [r7, #28]
    e8e6:	462a      	mov	r2, r5
    e8e8:	2110      	movs	r1, #16
    e8ea:	f7ff fa7d 	bl	dde8 <attsPermissions>
    e8ee:	bb60      	cbnz	r0, e94a <attsProcSignedWrite+0x8a>
    e8f0:	7ba2      	ldrb	r2, [r4, #14]
    e8f2:	0651      	lsls	r1, r2, #25
    e8f4:	d529      	bpl.n	e94a <attsProcSignedWrite+0x8a>
    e8f6:	f1a9 060f 	sub.w	r6, r9, #15
    e8fa:	0712      	lsls	r2, r2, #28
    e8fc:	b2b6      	uxth	r6, r6
    e8fe:	89a3      	ldrh	r3, [r4, #12]
    e900:	d421      	bmi.n	e946 <attsProcSignedWrite+0x86>
    e902:	429e      	cmp	r6, r3
    e904:	d121      	bne.n	e94a <attsProcSignedWrite+0x8a>
    e906:	f109 000f 	add.w	r0, r9, #15
    e90a:	b280      	uxth	r0, r0
    e90c:	f00b ff80 	bl	1a810 <WsfBufAlloc>
    e910:	4604      	mov	r4, r0
    e912:	b1d0      	cbz	r0, e94a <attsProcSignedWrite+0x8a>
    e914:	6047      	str	r7, [r0, #4]
    e916:	8105      	strh	r5, [r0, #8]
    e918:	8146      	strh	r6, [r0, #10]
    e91a:	7f3b      	ldrb	r3, [r7, #28]
    e91c:	7303      	strb	r3, [r0, #12]
    e91e:	464a      	mov	r2, r9
    e920:	f108 0108 	add.w	r1, r8, #8
    e924:	300d      	adds	r0, #13
    e926:	f7fd fc1b 	bl	c160 <memcpy>
    e92a:	7f38      	ldrb	r0, [r7, #28]
    e92c:	4a0a      	ldr	r2, [pc, #40]	; (e958 <attsProcSignedWrite+0x98>)
    e92e:	1e43      	subs	r3, r0, #1
    e930:	200c      	movs	r0, #12
    e932:	fb00 2003 	mla	r0, r0, r3, r2
    e936:	4621      	mov	r1, r4
    e938:	6883      	ldr	r3, [r0, #8]
    e93a:	b14b      	cbz	r3, e950 <attsProcSignedWrite+0x90>
    e93c:	f102 0060 	add.w	r0, r2, #96	; 0x60
    e940:	f00c f85e 	bl	1aa00 <WsfQueueEnq>
    e944:	e001      	b.n	e94a <attsProcSignedWrite+0x8a>
    e946:	429e      	cmp	r6, r3
    e948:	d9dd      	bls.n	e906 <attsProcSignedWrite+0x46>
    e94a:	b003      	add	sp, #12
    e94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e950:	f7ff ff88 	bl	e864 <attsSignedWriteStart>
    e954:	e7f9      	b.n	e94a <attsProcSignedWrite+0x8a>
    e956:	bf00      	nop
    e958:	10003c14 	.word	0x10003c14

0000e95c <attsSignMsgCback>:
    e95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e960:	7883      	ldrb	r3, [r0, #2]
    e962:	2b23      	cmp	r3, #35	; 0x23
    e964:	b088      	sub	sp, #32
    e966:	d152      	bne.n	ea0e <attsSignMsgCback+0xb2>
    e968:	7806      	ldrb	r6, [r0, #0]
    e96a:	4d39      	ldr	r5, [pc, #228]	; (ea50 <attsSignMsgCback+0xf4>)
    e96c:	6841      	ldr	r1, [r0, #4]
    e96e:	3e01      	subs	r6, #1
    e970:	270c      	movs	r7, #12
    e972:	4377      	muls	r7, r6
    e974:	19eb      	adds	r3, r5, r7
    e976:	2208      	movs	r2, #8
    e978:	689c      	ldr	r4, [r3, #8]
    e97a:	a806      	add	r0, sp, #24
    e97c:	f00b f9c8 	bl	19d10 <WStrReverseCpy>
    e980:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
    e984:	f104 090d 	add.w	r9, r4, #13
    e988:	f10a 0107 	add.w	r1, sl, #7
    e98c:	2208      	movs	r2, #8
    e98e:	4449      	add	r1, r9
    e990:	a806      	add	r0, sp, #24
    e992:	f7fd fbb5 	bl	c100 <memcmp>
    e996:	4680      	mov	r8, r0
    e998:	bb50      	cbnz	r0, e9f0 <attsSignMsgCback+0x94>
    e99a:	eb09 030a 	add.w	r3, r9, sl
    e99e:	795a      	ldrb	r2, [r3, #5]
    e9a0:	7919      	ldrb	r1, [r3, #4]
    e9a2:	0412      	lsls	r2, r2, #16
    e9a4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    e9a8:	78d9      	ldrb	r1, [r3, #3]
    e9aa:	799b      	ldrb	r3, [r3, #6]
    e9ac:	440a      	add	r2, r1
    e9ae:	eb02 6203 	add.w	r2, r2, r3, lsl #24
    e9b2:	59eb      	ldr	r3, [r5, r7]
    e9b4:	429a      	cmp	r2, r3
    e9b6:	d31b      	bcc.n	e9f0 <attsSignMsgCback+0x94>
    e9b8:	3201      	adds	r2, #1
    e9ba:	51ea      	str	r2, [r5, r7]
    e9bc:	a905      	add	r1, sp, #20
    e9be:	8920      	ldrh	r0, [r4, #8]
    e9c0:	f7ff f9e6 	bl	dd90 <attsFindByHandle>
    e9c4:	4607      	mov	r7, r0
    e9c6:	b198      	cbz	r0, e9f0 <attsSignMsgCback+0x94>
    e9c8:	7b82      	ldrb	r2, [r0, #14]
    e9ca:	0791      	lsls	r1, r2, #30
    e9cc:	f104 0310 	add.w	r3, r4, #16
    e9d0:	d520      	bpl.n	ea14 <attsSignMsgCback+0xb8>
    e9d2:	9905      	ldr	r1, [sp, #20]
    e9d4:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e9d8:	f1b9 0f00 	cmp.w	r9, #0
    e9dc:	d01a      	beq.n	ea14 <attsSignMsgCback+0xb8>
    e9de:	8921      	ldrh	r1, [r4, #8]
    e9e0:	7b20      	ldrb	r0, [r4, #12]
    e9e2:	e9cd 3701 	strd	r3, r7, [sp, #4]
    e9e6:	8963      	ldrh	r3, [r4, #10]
    e9e8:	9300      	str	r3, [sp, #0]
    e9ea:	22d2      	movs	r2, #210	; 0xd2
    e9ec:	4643      	mov	r3, r8
    e9ee:	47c8      	blx	r9
    e9f0:	4620      	mov	r0, r4
    e9f2:	f00b ff4d 	bl	1a890 <WsfBufFree>
    e9f6:	4817      	ldr	r0, [pc, #92]	; (ea54 <attsSignMsgCback+0xf8>)
    e9f8:	f00c f824 	bl	1aa44 <WsfQueueDeq>
    e9fc:	4601      	mov	r1, r0
    e9fe:	200c      	movs	r0, #12
    ea00:	b309      	cbz	r1, ea46 <attsSignMsgCback+0xea>
    ea02:	7b0b      	ldrb	r3, [r1, #12]
    ea04:	3b01      	subs	r3, #1
    ea06:	fb00 5003 	mla	r0, r0, r3, r5
    ea0a:	f7ff ff2b 	bl	e864 <attsSignedWriteStart>
    ea0e:	b008      	add	sp, #32
    ea10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ea14:	0692      	lsls	r2, r2, #26
    ea16:	d50a      	bpl.n	ea2e <attsSignMsgCback+0xd2>
    ea18:	4a0f      	ldr	r2, [pc, #60]	; (ea58 <attsSignMsgCback+0xfc>)
    ea1a:	f8d2 8014 	ldr.w	r8, [r2, #20]
    ea1e:	f1b8 0f00 	cmp.w	r8, #0
    ea22:	d004      	beq.n	ea2e <attsSignMsgCback+0xd2>
    ea24:	8922      	ldrh	r2, [r4, #8]
    ea26:	7b20      	ldrb	r0, [r4, #12]
    ea28:	2109      	movs	r1, #9
    ea2a:	47c0      	blx	r8
    ea2c:	e7e0      	b.n	e9f0 <attsSignMsgCback+0x94>
    ea2e:	8962      	ldrh	r2, [r4, #10]
    ea30:	6878      	ldr	r0, [r7, #4]
    ea32:	4619      	mov	r1, r3
    ea34:	f7fd fb94 	bl	c160 <memcpy>
    ea38:	7bbb      	ldrb	r3, [r7, #14]
    ea3a:	071b      	lsls	r3, r3, #28
    ea3c:	bf42      	ittt	mi
    ea3e:	68bb      	ldrmi	r3, [r7, #8]
    ea40:	8962      	ldrhmi	r2, [r4, #10]
    ea42:	801a      	strhmi	r2, [r3, #0]
    ea44:	e7d4      	b.n	e9f0 <attsSignMsgCback+0x94>
    ea46:	fb00 5506 	mla	r5, r0, r6, r5
    ea4a:	60a9      	str	r1, [r5, #8]
    ea4c:	e7df      	b.n	ea0e <attsSignMsgCback+0xb2>
    ea4e:	bf00      	nop
    ea50:	10003c14 	.word	0x10003c14
    ea54:	10003c74 	.word	0x10003c74
    ea58:	10003bfc 	.word	0x10003bfc

0000ea5c <AttsSignInit>:
    ea5c:	4b05      	ldr	r3, [pc, #20]	; (ea74 <AttsSignInit+0x18>)
    ea5e:	2200      	movs	r2, #0
    ea60:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    ea64:	4b04      	ldr	r3, [pc, #16]	; (ea78 <AttsSignInit+0x1c>)
    ea66:	4a05      	ldr	r2, [pc, #20]	; (ea7c <AttsSignInit+0x20>)
    ea68:	60da      	str	r2, [r3, #12]
    ea6a:	4b05      	ldr	r3, [pc, #20]	; (ea80 <AttsSignInit+0x24>)
    ea6c:	4a05      	ldr	r2, [pc, #20]	; (ea84 <AttsSignInit+0x28>)
    ea6e:	641a      	str	r2, [r3, #64]	; 0x40
    ea70:	4770      	bx	lr
    ea72:	bf00      	nop
    ea74:	10003c14 	.word	0x10003c14
    ea78:	10003bfc 	.word	0x10003bfc
    ea7c:	0000e95d 	.word	0x0000e95d
    ea80:	10002b10 	.word	0x10002b10
    ea84:	0000e8c1 	.word	0x0000e8c1

0000ea88 <AttsSetCsrk>:
    ea88:	4b03      	ldr	r3, [pc, #12]	; (ea98 <AttsSetCsrk+0x10>)
    ea8a:	3801      	subs	r0, #1
    ea8c:	220c      	movs	r2, #12
    ea8e:	fb02 3000 	mla	r0, r2, r0, r3
    ea92:	6041      	str	r1, [r0, #4]
    ea94:	4770      	bx	lr
    ea96:	bf00      	nop
    ea98:	10003c14 	.word	0x10003c14

0000ea9c <AttsSetSignCounter>:
    ea9c:	230c      	movs	r3, #12
    ea9e:	3801      	subs	r0, #1
    eaa0:	4358      	muls	r0, r3
    eaa2:	4b01      	ldr	r3, [pc, #4]	; (eaa8 <AttsSetSignCounter+0xc>)
    eaa4:	5019      	str	r1, [r3, r0]
    eaa6:	4770      	bx	lr
    eaa8:	10003c14 	.word	0x10003c14

0000eaac <AttsGetSignCounter>:
    eaac:	230c      	movs	r3, #12
    eaae:	3801      	subs	r0, #1
    eab0:	4358      	muls	r0, r3
    eab2:	4b01      	ldr	r3, [pc, #4]	; (eab8 <AttsGetSignCounter+0xc>)
    eab4:	5818      	ldr	r0, [r3, r0]
    eab6:	4770      	bx	lr
    eab8:	10003c14 	.word	0x10003c14

0000eabc <attsProcWrite>:
    eabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eac0:	7a93      	ldrb	r3, [r2, #10]
    eac2:	7a54      	ldrb	r4, [r2, #9]
    eac4:	f892 9008 	ldrb.w	r9, [r2, #8]
    eac8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    eacc:	b087      	sub	sp, #28
    eace:	b2a4      	uxth	r4, r4
    ead0:	4680      	mov	r8, r0
    ead2:	460d      	mov	r5, r1
    ead4:	4620      	mov	r0, r4
    ead6:	a905      	add	r1, sp, #20
    ead8:	4617      	mov	r7, r2
    eada:	f7ff f959 	bl	dd90 <attsFindByHandle>
    eade:	4606      	mov	r6, r0
    eae0:	2800      	cmp	r0, #0
    eae2:	d057      	beq.n	eb94 <attsProcWrite+0xd8>
    eae4:	7bc3      	ldrb	r3, [r0, #15]
    eae6:	f898 001c 	ldrb.w	r0, [r8, #28]
    eaea:	4622      	mov	r2, r4
    eaec:	2110      	movs	r1, #16
    eaee:	f7ff f97b 	bl	dde8 <attsPermissions>
    eaf2:	b9c0      	cbnz	r0, eb26 <attsProcWrite+0x6a>
    eaf4:	7bb2      	ldrb	r2, [r6, #14]
    eaf6:	89b3      	ldrh	r3, [r6, #12]
    eaf8:	3d03      	subs	r5, #3
    eafa:	0710      	lsls	r0, r2, #28
    eafc:	b2ad      	uxth	r5, r5
    eafe:	d41d      	bmi.n	eb3c <attsProcWrite+0x80>
    eb00:	429d      	cmp	r5, r3
    eb02:	d11d      	bne.n	eb40 <attsProcWrite+0x84>
    eb04:	0791      	lsls	r1, r2, #30
    eb06:	f107 030b 	add.w	r3, r7, #11
    eb0a:	d51b      	bpl.n	eb44 <attsProcWrite+0x88>
    eb0c:	9905      	ldr	r1, [sp, #20]
    eb0e:	68cf      	ldr	r7, [r1, #12]
    eb10:	b1c7      	cbz	r7, eb44 <attsProcWrite+0x88>
    eb12:	e9cd 3601 	strd	r3, r6, [sp, #4]
    eb16:	f898 001c 	ldrb.w	r0, [r8, #28]
    eb1a:	9500      	str	r5, [sp, #0]
    eb1c:	2300      	movs	r3, #0
    eb1e:	464a      	mov	r2, r9
    eb20:	4621      	mov	r1, r4
    eb22:	47b8      	blx	r7
    eb24:	b318      	cbz	r0, eb6e <attsProcWrite+0xb2>
    eb26:	f1b9 0f12 	cmp.w	r9, #18
    eb2a:	d130      	bne.n	eb8e <attsProcWrite+0xd2>
    eb2c:	4603      	mov	r3, r0
    eb2e:	4622      	mov	r2, r4
    eb30:	4649      	mov	r1, r9
    eb32:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    eb36:	f7fe ffd1 	bl	dadc <attsErrRsp>
    eb3a:	e028      	b.n	eb8e <attsProcWrite+0xd2>
    eb3c:	429d      	cmp	r5, r3
    eb3e:	d9e1      	bls.n	eb04 <attsProcWrite+0x48>
    eb40:	200d      	movs	r0, #13
    eb42:	e7f0      	b.n	eb26 <attsProcWrite+0x6a>
    eb44:	0692      	lsls	r2, r2, #26
    eb46:	d508      	bpl.n	eb5a <attsProcWrite+0x9e>
    eb48:	4a13      	ldr	r2, [pc, #76]	; (eb98 <attsProcWrite+0xdc>)
    eb4a:	6957      	ldr	r7, [r2, #20]
    eb4c:	b12f      	cbz	r7, eb5a <attsProcWrite+0x9e>
    eb4e:	4622      	mov	r2, r4
    eb50:	2109      	movs	r1, #9
    eb52:	f898 001c 	ldrb.w	r0, [r8, #28]
    eb56:	47b8      	blx	r7
    eb58:	e7e4      	b.n	eb24 <attsProcWrite+0x68>
    eb5a:	4619      	mov	r1, r3
    eb5c:	462a      	mov	r2, r5
    eb5e:	6870      	ldr	r0, [r6, #4]
    eb60:	f7fd fafe 	bl	c160 <memcpy>
    eb64:	7bb3      	ldrb	r3, [r6, #14]
    eb66:	071b      	lsls	r3, r3, #28
    eb68:	d501      	bpl.n	eb6e <attsProcWrite+0xb2>
    eb6a:	68b3      	ldr	r3, [r6, #8]
    eb6c:	801d      	strh	r5, [r3, #0]
    eb6e:	f1b9 0f12 	cmp.w	r9, #18
    eb72:	d10c      	bne.n	eb8e <attsProcWrite+0xd2>
    eb74:	2009      	movs	r0, #9
    eb76:	f7fd fd47 	bl	c608 <attMsgAlloc>
    eb7a:	4603      	mov	r3, r0
    eb7c:	b138      	cbz	r0, eb8e <attsProcWrite+0xd2>
    eb7e:	2213      	movs	r2, #19
    eb80:	7202      	strb	r2, [r0, #8]
    eb82:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    eb86:	2201      	movs	r2, #1
    eb88:	2004      	movs	r0, #4
    eb8a:	f002 f823 	bl	10bd4 <L2cDataReq>
    eb8e:	b007      	add	sp, #28
    eb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eb94:	2001      	movs	r0, #1
    eb96:	e7c6      	b.n	eb26 <attsProcWrite+0x6a>
    eb98:	10003bfc 	.word	0x10003bfc

0000eb9c <attsProcPrepWriteReq>:
    eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eba0:	7a93      	ldrb	r3, [r2, #10]
    eba2:	7a54      	ldrb	r4, [r2, #9]
    eba4:	7ad5      	ldrb	r5, [r2, #11]
    eba6:	7b16      	ldrb	r6, [r2, #12]
    eba8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    ebac:	b089      	sub	sp, #36	; 0x24
    ebae:	b2a4      	uxth	r4, r4
    ebb0:	4607      	mov	r7, r0
    ebb2:	468a      	mov	sl, r1
    ebb4:	4620      	mov	r0, r4
    ebb6:	a907      	add	r1, sp, #28
    ebb8:	4693      	mov	fp, r2
    ebba:	f7ff f8e9 	bl	dd90 <attsFindByHandle>
    ebbe:	4680      	mov	r8, r0
    ebc0:	2800      	cmp	r0, #0
    ebc2:	d079      	beq.n	ecb8 <attsProcPrepWriteReq+0x11c>
    ebc4:	7bc3      	ldrb	r3, [r0, #15]
    ebc6:	7f38      	ldrb	r0, [r7, #28]
    ebc8:	4622      	mov	r2, r4
    ebca:	2110      	movs	r1, #16
    ebcc:	f7ff f90c 	bl	dde8 <attsPermissions>
    ebd0:	2800      	cmp	r0, #0
    ebd2:	d153      	bne.n	ec7c <attsProcPrepWriteReq+0xe0>
    ebd4:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    ebd8:	b2ab      	uxth	r3, r5
    ebda:	9305      	str	r3, [sp, #20]
    ebdc:	9a05      	ldr	r2, [sp, #20]
    ebde:	f898 300e 	ldrb.w	r3, [r8, #14]
    ebe2:	b10a      	cbz	r2, ebe8 <attsProcPrepWriteReq+0x4c>
    ebe4:	06d9      	lsls	r1, r3, #27
    ebe6:	d569      	bpl.n	ecbc <attsProcPrepWriteReq+0x120>
    ebe8:	f1aa 0605 	sub.w	r6, sl, #5
    ebec:	071a      	lsls	r2, r3, #28
    ebee:	b2b6      	uxth	r6, r6
    ebf0:	d403      	bmi.n	ebfa <attsProcPrepWriteReq+0x5e>
    ebf2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    ebf6:	42b3      	cmp	r3, r6
    ebf8:	d162      	bne.n	ecc0 <attsProcPrepWriteReq+0x124>
    ebfa:	4638      	mov	r0, r7
    ebfc:	f00b ffad 	bl	1ab5a <WsfQueueCount>
    ec00:	4b32      	ldr	r3, [pc, #200]	; (eccc <attsProcPrepWriteReq+0x130>)
    ec02:	681b      	ldr	r3, [r3, #0]
    ec04:	79db      	ldrb	r3, [r3, #7]
    ec06:	4283      	cmp	r3, r0
    ec08:	d95c      	bls.n	ecc4 <attsProcPrepWriteReq+0x128>
    ec0a:	f10a 0006 	add.w	r0, sl, #6
    ec0e:	b280      	uxth	r0, r0
    ec10:	f00b fdfe 	bl	1a810 <WsfBufAlloc>
    ec14:	4681      	mov	r9, r0
    ec16:	2800      	cmp	r0, #0
    ec18:	d056      	beq.n	ecc8 <attsProcPrepWriteReq+0x12c>
    ec1a:	f898 300e 	ldrb.w	r3, [r8, #14]
    ec1e:	079b      	lsls	r3, r3, #30
    ec20:	f10b 0b0d 	add.w	fp, fp, #13
    ec24:	d41b      	bmi.n	ec5e <attsProcPrepWriteReq+0xc2>
    ec26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    ec2a:	f8a9 3008 	strh.w	r3, [r9, #8]
    ec2e:	4632      	mov	r2, r6
    ec30:	4659      	mov	r1, fp
    ec32:	f8a9 6004 	strh.w	r6, [r9, #4]
    ec36:	f8a9 4006 	strh.w	r4, [r9, #6]
    ec3a:	f109 000a 	add.w	r0, r9, #10
    ec3e:	f7fd fa8f 	bl	c160 <memcpy>
    ec42:	4649      	mov	r1, r9
    ec44:	4638      	mov	r0, r7
    ec46:	f00b fedb 	bl	1aa00 <WsfQueueEnq>
    ec4a:	f10a 0008 	add.w	r0, sl, #8
    ec4e:	b280      	uxth	r0, r0
    ec50:	f7fd fcda 	bl	c608 <attMsgAlloc>
    ec54:	4680      	mov	r8, r0
    ec56:	b9c0      	cbnz	r0, ec8a <attsProcPrepWriteReq+0xee>
    ec58:	b009      	add	sp, #36	; 0x24
    ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec5e:	9b07      	ldr	r3, [sp, #28]
    ec60:	68db      	ldr	r3, [r3, #12]
    ec62:	461d      	mov	r5, r3
    ec64:	2b00      	cmp	r3, #0
    ec66:	d0de      	beq.n	ec26 <attsProcPrepWriteReq+0x8a>
    ec68:	7f38      	ldrb	r0, [r7, #28]
    ec6a:	9600      	str	r6, [sp, #0]
    ec6c:	e9cd b801 	strd	fp, r8, [sp, #4]
    ec70:	2300      	movs	r3, #0
    ec72:	2216      	movs	r2, #22
    ec74:	4621      	mov	r1, r4
    ec76:	47a8      	blx	r5
    ec78:	2800      	cmp	r0, #0
    ec7a:	d0d4      	beq.n	ec26 <attsProcPrepWriteReq+0x8a>
    ec7c:	4603      	mov	r3, r0
    ec7e:	4622      	mov	r2, r4
    ec80:	2116      	movs	r1, #22
    ec82:	8b38      	ldrh	r0, [r7, #24]
    ec84:	f7fe ff2a 	bl	dadc <attsErrRsp>
    ec88:	e7e6      	b.n	ec58 <attsProcPrepWriteReq+0xbc>
    ec8a:	2317      	movs	r3, #23
    ec8c:	7203      	strb	r3, [r0, #8]
    ec8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ec92:	72c3      	strb	r3, [r0, #11]
    ec94:	9b05      	ldr	r3, [sp, #20]
    ec96:	7244      	strb	r4, [r0, #9]
    ec98:	0a1d      	lsrs	r5, r3, #8
    ec9a:	0a24      	lsrs	r4, r4, #8
    ec9c:	7284      	strb	r4, [r0, #10]
    ec9e:	7305      	strb	r5, [r0, #12]
    eca0:	4632      	mov	r2, r6
    eca2:	4659      	mov	r1, fp
    eca4:	300d      	adds	r0, #13
    eca6:	f7fd fa5b 	bl	c160 <memcpy>
    ecaa:	4643      	mov	r3, r8
    ecac:	4652      	mov	r2, sl
    ecae:	8b39      	ldrh	r1, [r7, #24]
    ecb0:	2004      	movs	r0, #4
    ecb2:	f001 ff8f 	bl	10bd4 <L2cDataReq>
    ecb6:	e7cf      	b.n	ec58 <attsProcPrepWriteReq+0xbc>
    ecb8:	2001      	movs	r0, #1
    ecba:	e7df      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecbc:	200b      	movs	r0, #11
    ecbe:	e7dd      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecc0:	200d      	movs	r0, #13
    ecc2:	e7db      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecc4:	2009      	movs	r0, #9
    ecc6:	e7d9      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecc8:	2011      	movs	r0, #17
    ecca:	e7d7      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    eccc:	10002b84 	.word	0x10002b84

0000ecd0 <attsProcExecWriteReq>:
    ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecd4:	7a53      	ldrb	r3, [r2, #9]
    ecd6:	b086      	sub	sp, #24
    ecd8:	4606      	mov	r6, r0
    ecda:	b973      	cbnz	r3, ecfa <attsProcExecWriteReq+0x2a>
    ecdc:	f7fe ff56 	bl	db8c <attsClearPrepWrites>
    ece0:	2009      	movs	r0, #9
    ece2:	f7fd fc91 	bl	c608 <attMsgAlloc>
    ece6:	4603      	mov	r3, r0
    ece8:	b360      	cbz	r0, ed44 <attsProcExecWriteReq+0x74>
    ecea:	2219      	movs	r2, #25
    ecec:	7202      	strb	r2, [r0, #8]
    ecee:	8b31      	ldrh	r1, [r6, #24]
    ecf0:	2201      	movs	r2, #1
    ecf2:	2004      	movs	r0, #4
    ecf4:	f001 ff6e 	bl	10bd4 <L2cDataReq>
    ecf8:	e024      	b.n	ed44 <attsProcExecWriteReq+0x74>
    ecfa:	2b01      	cmp	r3, #1
    ecfc:	d16e      	bne.n	eddc <attsProcExecWriteReq+0x10c>
    ecfe:	6804      	ldr	r4, [r0, #0]
    ed00:	b94c      	cbnz	r4, ed16 <attsProcExecWriteReq+0x46>
    ed02:	f8df 80dc 	ldr.w	r8, [pc, #220]	; ede0 <attsProcExecWriteReq+0x110>
    ed06:	4630      	mov	r0, r6
    ed08:	f00b fe9c 	bl	1aa44 <WsfQueueDeq>
    ed0c:	4605      	mov	r5, r0
    ed0e:	bb00      	cbnz	r0, ed52 <attsProcExecWriteReq+0x82>
    ed10:	2c00      	cmp	r4, #0
    ed12:	d0e5      	beq.n	ece0 <attsProcExecWriteReq+0x10>
    ed14:	e010      	b.n	ed38 <attsProcExecWriteReq+0x68>
    ed16:	a904      	add	r1, sp, #16
    ed18:	88e0      	ldrh	r0, [r4, #6]
    ed1a:	f7ff f839 	bl	dd90 <attsFindByHandle>
    ed1e:	b1b0      	cbz	r0, ed4e <attsProcExecWriteReq+0x7e>
    ed20:	8921      	ldrh	r1, [r4, #8]
    ed22:	8982      	ldrh	r2, [r0, #12]
    ed24:	4291      	cmp	r1, r2
    ed26:	d810      	bhi.n	ed4a <attsProcExecWriteReq+0x7a>
    ed28:	88a3      	ldrh	r3, [r4, #4]
    ed2a:	440b      	add	r3, r1
    ed2c:	4293      	cmp	r3, r2
    ed2e:	dd0e      	ble.n	ed4e <attsProcExecWriteReq+0x7e>
    ed30:	240d      	movs	r4, #13
    ed32:	4630      	mov	r0, r6
    ed34:	f7fe ff2a 	bl	db8c <attsClearPrepWrites>
    ed38:	4623      	mov	r3, r4
    ed3a:	2200      	movs	r2, #0
    ed3c:	2118      	movs	r1, #24
    ed3e:	8b30      	ldrh	r0, [r6, #24]
    ed40:	f7fe fecc 	bl	dadc <attsErrRsp>
    ed44:	b006      	add	sp, #24
    ed46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed4a:	2407      	movs	r4, #7
    ed4c:	e7f1      	b.n	ed32 <attsProcExecWriteReq+0x62>
    ed4e:	6824      	ldr	r4, [r4, #0]
    ed50:	e7d6      	b.n	ed00 <attsProcExecWriteReq+0x30>
    ed52:	a905      	add	r1, sp, #20
    ed54:	88e8      	ldrh	r0, [r5, #6]
    ed56:	f7ff f81b 	bl	dd90 <attsFindByHandle>
    ed5a:	4607      	mov	r7, r0
    ed5c:	b920      	cbnz	r0, ed68 <attsProcExecWriteReq+0x98>
    ed5e:	240e      	movs	r4, #14
    ed60:	4630      	mov	r0, r6
    ed62:	f7fe ff13 	bl	db8c <attsClearPrepWrites>
    ed66:	e017      	b.n	ed98 <attsProcExecWriteReq+0xc8>
    ed68:	7bc3      	ldrb	r3, [r0, #15]
    ed6a:	06d8      	lsls	r0, r3, #27
    ed6c:	d534      	bpl.n	edd8 <attsProcExecWriteReq+0x108>
    ed6e:	7bba      	ldrb	r2, [r7, #14]
    ed70:	0791      	lsls	r1, r2, #30
    ed72:	f105 030a 	add.w	r3, r5, #10
    ed76:	d513      	bpl.n	eda0 <attsProcExecWriteReq+0xd0>
    ed78:	9905      	ldr	r1, [sp, #20]
    ed7a:	68cc      	ldr	r4, [r1, #12]
    ed7c:	b184      	cbz	r4, eda0 <attsProcExecWriteReq+0xd0>
    ed7e:	892a      	ldrh	r2, [r5, #8]
    ed80:	88e9      	ldrh	r1, [r5, #6]
    ed82:	7f30      	ldrb	r0, [r6, #28]
    ed84:	e9cd 3701 	strd	r3, r7, [sp, #4]
    ed88:	88ab      	ldrh	r3, [r5, #4]
    ed8a:	9300      	str	r3, [sp, #0]
    ed8c:	4613      	mov	r3, r2
    ed8e:	2218      	movs	r2, #24
    ed90:	47a0      	blx	r4
    ed92:	4604      	mov	r4, r0
    ed94:	2800      	cmp	r0, #0
    ed96:	d1e3      	bne.n	ed60 <attsProcExecWriteReq+0x90>
    ed98:	4628      	mov	r0, r5
    ed9a:	f00b fd79 	bl	1a890 <WsfBufFree>
    ed9e:	e7b2      	b.n	ed06 <attsProcExecWriteReq+0x36>
    eda0:	0692      	lsls	r2, r2, #26
    eda2:	d507      	bpl.n	edb4 <attsProcExecWriteReq+0xe4>
    eda4:	f8d8 4014 	ldr.w	r4, [r8, #20]
    eda8:	b124      	cbz	r4, edb4 <attsProcExecWriteReq+0xe4>
    edaa:	88ea      	ldrh	r2, [r5, #6]
    edac:	7f30      	ldrb	r0, [r6, #28]
    edae:	2109      	movs	r1, #9
    edb0:	47a0      	blx	r4
    edb2:	e7ee      	b.n	ed92 <attsProcExecWriteReq+0xc2>
    edb4:	892c      	ldrh	r4, [r5, #8]
    edb6:	6878      	ldr	r0, [r7, #4]
    edb8:	88aa      	ldrh	r2, [r5, #4]
    edba:	4420      	add	r0, r4
    edbc:	4619      	mov	r1, r3
    edbe:	f7fd f9cf 	bl	c160 <memcpy>
    edc2:	7bbc      	ldrb	r4, [r7, #14]
    edc4:	f014 0408 	ands.w	r4, r4, #8
    edc8:	d0e6      	beq.n	ed98 <attsProcExecWriteReq+0xc8>
    edca:	88ab      	ldrh	r3, [r5, #4]
    edcc:	8929      	ldrh	r1, [r5, #8]
    edce:	68ba      	ldr	r2, [r7, #8]
    edd0:	440b      	add	r3, r1
    edd2:	8013      	strh	r3, [r2, #0]
    edd4:	2400      	movs	r4, #0
    edd6:	e7df      	b.n	ed98 <attsProcExecWriteReq+0xc8>
    edd8:	2403      	movs	r4, #3
    edda:	e7c1      	b.n	ed60 <attsProcExecWriteReq+0x90>
    eddc:	2404      	movs	r4, #4
    edde:	e7ab      	b.n	ed38 <attsProcExecWriteReq+0x68>
    ede0:	10003bfc 	.word	0x10003bfc

0000ede4 <dmAdvCbInit>:
    ede4:	4b0b      	ldr	r3, [pc, #44]	; (ee14 <dmAdvCbInit+0x30>)
    ede6:	181a      	adds	r2, r3, r0
    ede8:	21ff      	movs	r1, #255	; 0xff
    edea:	b510      	push	{r4, lr}
    edec:	7511      	strb	r1, [r2, #20]
    edee:	f100 0108 	add.w	r1, r0, #8
    edf2:	f44f 64c8 	mov.w	r4, #1600	; 0x640
    edf6:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
    edfa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    edfe:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    ee02:	8059      	strh	r1, [r3, #2]
    ee04:	2307      	movs	r3, #7
    ee06:	7553      	strb	r3, [r2, #21]
    ee08:	4b03      	ldr	r3, [pc, #12]	; (ee18 <dmAdvCbInit+0x34>)
    ee0a:	4418      	add	r0, r3
    ee0c:	2300      	movs	r3, #0
    ee0e:	7443      	strb	r3, [r0, #17]
    ee10:	75d3      	strb	r3, [r2, #23]
    ee12:	bd10      	pop	{r4, pc}
    ee14:	10003c7c 	.word	0x10003c7c
    ee18:	10003e2c 	.word	0x10003e2c

0000ee1c <dmAdvInit>:
    ee1c:	b508      	push	{r3, lr}
    ee1e:	2000      	movs	r0, #0
    ee20:	f7ff ffe0 	bl	ede4 <dmAdvCbInit>
    ee24:	4b03      	ldr	r3, [pc, #12]	; (ee34 <dmAdvInit+0x18>)
    ee26:	4a04      	ldr	r2, [pc, #16]	; (ee38 <dmAdvInit+0x1c>)
    ee28:	7b19      	ldrb	r1, [r3, #12]
    ee2a:	7211      	strb	r1, [r2, #8]
    ee2c:	2200      	movs	r2, #0
    ee2e:	739a      	strb	r2, [r3, #14]
    ee30:	bd08      	pop	{r3, pc}
    ee32:	bf00      	nop
    ee34:	10003e2c 	.word	0x10003e2c
    ee38:	10003c7c 	.word	0x10003c7c

0000ee3c <DmAdvConfig>:
    ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee40:	4607      	mov	r7, r0
    ee42:	200e      	movs	r0, #14
    ee44:	4688      	mov	r8, r1
    ee46:	4616      	mov	r6, r2
    ee48:	461d      	mov	r5, r3
    ee4a:	f00b fd70 	bl	1a92e <WsfMsgAlloc>
    ee4e:	4604      	mov	r4, r0
    ee50:	b180      	cbz	r0, ee74 <DmAdvConfig+0x38>
    ee52:	2300      	movs	r3, #0
    ee54:	7083      	strb	r3, [r0, #2]
    ee56:	f880 8005 	strb.w	r8, [r0, #5]
    ee5a:	7107      	strb	r7, [r0, #4]
    ee5c:	7186      	strb	r6, [r0, #6]
    ee5e:	4629      	mov	r1, r5
    ee60:	3007      	adds	r0, #7
    ee62:	f00a fecf 	bl	19c04 <BdaCpy>
    ee66:	4b04      	ldr	r3, [pc, #16]	; (ee78 <DmAdvConfig+0x3c>)
    ee68:	4621      	mov	r1, r4
    ee6a:	7b18      	ldrb	r0, [r3, #12]
    ee6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ee70:	f00b bd81 	b.w	1a976 <WsfMsgSend>
    ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee78:	10003e2c 	.word	0x10003e2c

0000ee7c <DmAdvSetData>:
    ee7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee80:	4680      	mov	r8, r0
    ee82:	200c      	movs	r0, #12
    ee84:	460f      	mov	r7, r1
    ee86:	4616      	mov	r6, r2
    ee88:	461d      	mov	r5, r3
    ee8a:	9c06      	ldr	r4, [sp, #24]
    ee8c:	f00b fd4f 	bl	1a92e <WsfMsgAlloc>
    ee90:	b170      	cbz	r0, eeb0 <DmAdvSetData+0x34>
    ee92:	2301      	movs	r3, #1
    ee94:	7083      	strb	r3, [r0, #2]
    ee96:	4b07      	ldr	r3, [pc, #28]	; (eeb4 <DmAdvSetData+0x38>)
    ee98:	f880 8004 	strb.w	r8, [r0, #4]
    ee9c:	7147      	strb	r7, [r0, #5]
    ee9e:	7186      	strb	r6, [r0, #6]
    eea0:	71c5      	strb	r5, [r0, #7]
    eea2:	6084      	str	r4, [r0, #8]
    eea4:	4601      	mov	r1, r0
    eea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eeaa:	7b18      	ldrb	r0, [r3, #12]
    eeac:	f00b bd63 	b.w	1a976 <WsfMsgSend>
    eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eeb4:	10003e2c 	.word	0x10003e2c

0000eeb8 <DmAdvStart>:
    eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eeba:	4604      	mov	r4, r0
    eebc:	200a      	movs	r0, #10
    eebe:	460f      	mov	r7, r1
    eec0:	4616      	mov	r6, r2
    eec2:	461d      	mov	r5, r3
    eec4:	f00b fd33 	bl	1a92e <WsfMsgAlloc>
    eec8:	b180      	cbz	r0, eeec <DmAdvStart+0x34>
    eeca:	2302      	movs	r3, #2
    eecc:	7083      	strb	r3, [r0, #2]
    eece:	7104      	strb	r4, [r0, #4]
    eed0:	b12c      	cbz	r4, eede <DmAdvStart+0x26>
    eed2:	783b      	ldrb	r3, [r7, #0]
    eed4:	7143      	strb	r3, [r0, #5]
    eed6:	8833      	ldrh	r3, [r6, #0]
    eed8:	80c3      	strh	r3, [r0, #6]
    eeda:	782b      	ldrb	r3, [r5, #0]
    eedc:	7203      	strb	r3, [r0, #8]
    eede:	4b04      	ldr	r3, [pc, #16]	; (eef0 <DmAdvStart+0x38>)
    eee0:	4601      	mov	r1, r0
    eee2:	7b18      	ldrb	r0, [r3, #12]
    eee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eee8:	f00b bd45 	b.w	1a976 <WsfMsgSend>
    eeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eeee:	bf00      	nop
    eef0:	10003e2c 	.word	0x10003e2c

0000eef4 <DmAdvStop>:
    eef4:	b538      	push	{r3, r4, r5, lr}
    eef6:	4604      	mov	r4, r0
    eef8:	2006      	movs	r0, #6
    eefa:	460d      	mov	r5, r1
    eefc:	f00b fd17 	bl	1a92e <WsfMsgAlloc>
    ef00:	b1a0      	cbz	r0, ef2c <DmAdvStop+0x38>
    ef02:	2303      	movs	r3, #3
    ef04:	7104      	strb	r4, [r0, #4]
    ef06:	3405      	adds	r4, #5
    ef08:	7083      	strb	r3, [r0, #2]
    ef0a:	1e69      	subs	r1, r5, #1
    ef0c:	1d43      	adds	r3, r0, #5
    ef0e:	4404      	add	r4, r0
    ef10:	42a3      	cmp	r3, r4
    ef12:	d106      	bne.n	ef22 <DmAdvStop+0x2e>
    ef14:	4b06      	ldr	r3, [pc, #24]	; (ef30 <DmAdvStop+0x3c>)
    ef16:	4601      	mov	r1, r0
    ef18:	7b18      	ldrb	r0, [r3, #12]
    ef1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ef1e:	f00b bd2a 	b.w	1a976 <WsfMsgSend>
    ef22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ef26:	f803 2b01 	strb.w	r2, [r3], #1
    ef2a:	e7f1      	b.n	ef10 <DmAdvStop+0x1c>
    ef2c:	bd38      	pop	{r3, r4, r5, pc}
    ef2e:	bf00      	nop
    ef30:	10003e2c 	.word	0x10003e2c

0000ef34 <DmAdvRemoveAdvSet>:
    ef34:	b510      	push	{r4, lr}
    ef36:	4604      	mov	r4, r0
    ef38:	2006      	movs	r0, #6
    ef3a:	f00b fcf8 	bl	1a92e <WsfMsgAlloc>
    ef3e:	4601      	mov	r1, r0
    ef40:	b140      	cbz	r0, ef54 <DmAdvRemoveAdvSet+0x20>
    ef42:	2304      	movs	r3, #4
    ef44:	7083      	strb	r3, [r0, #2]
    ef46:	4b04      	ldr	r3, [pc, #16]	; (ef58 <DmAdvRemoveAdvSet+0x24>)
    ef48:	7104      	strb	r4, [r0, #4]
    ef4a:	7b18      	ldrb	r0, [r3, #12]
    ef4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef50:	f00b bd11 	b.w	1a976 <WsfMsgSend>
    ef54:	bd10      	pop	{r4, pc}
    ef56:	bf00      	nop
    ef58:	10003e2c 	.word	0x10003e2c

0000ef5c <DmAdvClearAdvSets>:
    ef5c:	b508      	push	{r3, lr}
    ef5e:	2004      	movs	r0, #4
    ef60:	f00b fce5 	bl	1a92e <WsfMsgAlloc>
    ef64:	4601      	mov	r1, r0
    ef66:	b138      	cbz	r0, ef78 <DmAdvClearAdvSets+0x1c>
    ef68:	2305      	movs	r3, #5
    ef6a:	7083      	strb	r3, [r0, #2]
    ef6c:	4b03      	ldr	r3, [pc, #12]	; (ef7c <DmAdvClearAdvSets+0x20>)
    ef6e:	7b18      	ldrb	r0, [r3, #12]
    ef70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ef74:	f00b bcff 	b.w	1a976 <WsfMsgSend>
    ef78:	bd08      	pop	{r3, pc}
    ef7a:	bf00      	nop
    ef7c:	10003e2c 	.word	0x10003e2c

0000ef80 <DmAdvSetInterval>:
    ef80:	b570      	push	{r4, r5, r6, lr}
    ef82:	4604      	mov	r4, r0
    ef84:	460e      	mov	r6, r1
    ef86:	4615      	mov	r5, r2
    ef88:	f00c fb1c 	bl	1b5c4 <WsfTaskLock>
    ef8c:	f104 0008 	add.w	r0, r4, #8
    ef90:	4b04      	ldr	r3, [pc, #16]	; (efa4 <DmAdvSetInterval+0x24>)
    ef92:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    ef96:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    ef9a:	805d      	strh	r5, [r3, #2]
    ef9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    efa0:	f00c bb16 	b.w	1b5d0 <WsfTaskUnlock>
    efa4:	10003c7c 	.word	0x10003c7c

0000efa8 <DmAdvSetChannelMap>:
    efa8:	b538      	push	{r3, r4, r5, lr}
    efaa:	4605      	mov	r5, r0
    efac:	460c      	mov	r4, r1
    efae:	f00c fb09 	bl	1b5c4 <WsfTaskLock>
    efb2:	4803      	ldr	r0, [pc, #12]	; (efc0 <DmAdvSetChannelMap+0x18>)
    efb4:	4428      	add	r0, r5
    efb6:	7544      	strb	r4, [r0, #21]
    efb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    efbc:	f00c bb08 	b.w	1b5d0 <WsfTaskUnlock>
    efc0:	10003c7c 	.word	0x10003c7c

0000efc4 <DmAdvSetAddrType>:
    efc4:	b510      	push	{r4, lr}
    efc6:	4604      	mov	r4, r0
    efc8:	f00c fafc 	bl	1b5c4 <WsfTaskLock>
    efcc:	4b02      	ldr	r3, [pc, #8]	; (efd8 <DmAdvSetAddrType+0x14>)
    efce:	739c      	strb	r4, [r3, #14]
    efd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efd4:	f00c bafc 	b.w	1b5d0 <WsfTaskUnlock>
    efd8:	10003e2c 	.word	0x10003e2c

0000efdc <DmAdvSetAdValue>:
    efdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efe0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    efe4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    efe8:	460c      	mov	r4, r1
    efea:	4691      	mov	r9, r2
    efec:	8819      	ldrh	r1, [r3, #0]
    efee:	4642      	mov	r2, r8
    eff0:	4683      	mov	fp, r0
    eff2:	461f      	mov	r7, r3
    eff4:	f000 ff50 	bl	fe98 <DmFindAdType>
    eff8:	b1f8      	cbz	r0, f03a <DmAdvSetAdValue+0x5e>
    effa:	7805      	ldrb	r5, [r0, #0]
    effc:	1c66      	adds	r6, r4, #1
    effe:	42ae      	cmp	r6, r5
    f000:	d107      	bne.n	f012 <DmAdvSetAdValue+0x36>
    f002:	4622      	mov	r2, r4
    f004:	4649      	mov	r1, r9
    f006:	3002      	adds	r0, #2
    f008:	f7fd f8aa 	bl	c160 <memcpy>
    f00c:	2001      	movs	r0, #1
    f00e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f012:	f8b7 c000 	ldrh.w	ip, [r7]
    f016:	b2ad      	uxth	r5, r5
    f018:	4466      	add	r6, ip
    f01a:	1b76      	subs	r6, r6, r5
    f01c:	b2b6      	uxth	r6, r6
    f01e:	4556      	cmp	r6, sl
    f020:	d80b      	bhi.n	f03a <DmAdvSetAdValue+0x5e>
    f022:	3501      	adds	r5, #1
    f024:	1941      	adds	r1, r0, r5
    f026:	eba1 0208 	sub.w	r2, r1, r8
    f02a:	b2d2      	uxtb	r2, r2
    f02c:	ebac 0202 	sub.w	r2, ip, r2
    f030:	f7fd f930 	bl	c294 <memmove>
    f034:	883b      	ldrh	r3, [r7, #0]
    f036:	1b5d      	subs	r5, r3, r5
    f038:	803d      	strh	r5, [r7, #0]
    f03a:	883b      	ldrh	r3, [r7, #0]
    f03c:	191a      	adds	r2, r3, r4
    f03e:	3201      	adds	r2, #1
    f040:	4552      	cmp	r2, sl
    f042:	da10      	bge.n	f066 <DmAdvSetAdValue+0x8a>
    f044:	eb08 0003 	add.w	r0, r8, r3
    f048:	1c62      	adds	r2, r4, #1
    f04a:	f808 2003 	strb.w	r2, [r8, r3]
    f04e:	4649      	mov	r1, r9
    f050:	f880 b001 	strb.w	fp, [r0, #1]
    f054:	4622      	mov	r2, r4
    f056:	3002      	adds	r0, #2
    f058:	f7fd f882 	bl	c160 <memcpy>
    f05c:	883b      	ldrh	r3, [r7, #0]
    f05e:	3402      	adds	r4, #2
    f060:	441c      	add	r4, r3
    f062:	803c      	strh	r4, [r7, #0]
    f064:	e7d2      	b.n	f00c <DmAdvSetAdValue+0x30>
    f066:	2000      	movs	r0, #0
    f068:	e7d1      	b.n	f00e <DmAdvSetAdValue+0x32>

0000f06a <DmAdvSetName>:
    f06a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f06e:	4614      	mov	r4, r2
    f070:	4606      	mov	r6, r0
    f072:	460f      	mov	r7, r1
    f074:	461a      	mov	r2, r3
    f076:	8821      	ldrh	r1, [r4, #0]
    f078:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    f07c:	2009      	movs	r0, #9
    f07e:	4698      	mov	r8, r3
    f080:	f000 ff0a 	bl	fe98 <DmFindAdType>
    f084:	b928      	cbnz	r0, f092 <DmAdvSetName+0x28>
    f086:	4642      	mov	r2, r8
    f088:	8821      	ldrh	r1, [r4, #0]
    f08a:	2008      	movs	r0, #8
    f08c:	f000 ff04 	bl	fe98 <DmFindAdType>
    f090:	b188      	cbz	r0, f0b6 <DmAdvSetName+0x4c>
    f092:	f890 9000 	ldrb.w	r9, [r0]
    f096:	8822      	ldrh	r2, [r4, #0]
    f098:	f109 0901 	add.w	r9, r9, #1
    f09c:	eb00 0109 	add.w	r1, r0, r9
    f0a0:	eba1 0308 	sub.w	r3, r1, r8
    f0a4:	b2db      	uxtb	r3, r3
    f0a6:	1ad2      	subs	r2, r2, r3
    f0a8:	f7fd f8f4 	bl	c294 <memmove>
    f0ac:	8823      	ldrh	r3, [r4, #0]
    f0ae:	eba3 0909 	sub.w	r9, r3, r9
    f0b2:	f8a4 9000 	strh.w	r9, [r4]
    f0b6:	8822      	ldrh	r2, [r4, #0]
    f0b8:	1e6b      	subs	r3, r5, #1
    f0ba:	4293      	cmp	r3, r2
    f0bc:	dd1c      	ble.n	f0f8 <DmAdvSetName+0x8e>
    f0be:	18b3      	adds	r3, r6, r2
    f0c0:	3301      	adds	r3, #1
    f0c2:	429d      	cmp	r5, r3
    f0c4:	bfde      	ittt	le
    f0c6:	3d02      	suble	r5, #2
    f0c8:	1aad      	suble	r5, r5, r2
    f0ca:	b2ee      	uxtble	r6, r5
    f0cc:	eb08 0002 	add.w	r0, r8, r2
    f0d0:	bfd4      	ite	le
    f0d2:	2308      	movle	r3, #8
    f0d4:	2309      	movgt	r3, #9
    f0d6:	1c71      	adds	r1, r6, #1
    f0d8:	f808 1002 	strb.w	r1, [r8, r2]
    f0dc:	3002      	adds	r0, #2
    f0de:	f800 3c01 	strb.w	r3, [r0, #-1]
    f0e2:	4632      	mov	r2, r6
    f0e4:	4639      	mov	r1, r7
    f0e6:	f7fd f83b 	bl	c160 <memcpy>
    f0ea:	8825      	ldrh	r5, [r4, #0]
    f0ec:	3502      	adds	r5, #2
    f0ee:	4435      	add	r5, r6
    f0f0:	8025      	strh	r5, [r4, #0]
    f0f2:	2001      	movs	r0, #1
    f0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f0f8:	2000      	movs	r0, #0
    f0fa:	e7fb      	b.n	f0f4 <DmAdvSetName+0x8a>

0000f0fc <dmAdvActRemoveSet>:
    f0fc:	4770      	bx	lr

0000f0fe <dmAdvMsgHandler>:
    f0fe:	7883      	ldrb	r3, [r0, #2]
    f100:	4a02      	ldr	r2, [pc, #8]	; (f10c <dmAdvMsgHandler+0xe>)
    f102:	f003 030f 	and.w	r3, r3, #15
    f106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f10a:	4718      	bx	r3
    f10c:	00025d58 	.word	0x00025d58

0000f110 <dmAdvConfig>:
    f110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f114:	4e0e      	ldr	r6, [pc, #56]	; (f150 <dmAdvConfig+0x40>)
    f116:	4c0f      	ldr	r4, [pc, #60]	; (f154 <dmAdvConfig+0x44>)
    f118:	4605      	mov	r5, r0
    f11a:	7bb0      	ldrb	r0, [r6, #14]
    f11c:	8a27      	ldrh	r7, [r4, #16]
    f11e:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    f122:	4689      	mov	r9, r1
    f124:	4692      	mov	sl, r2
    f126:	f000 fef1 	bl	ff0c <DmLlAddrType>
    f12a:	7c73      	ldrb	r3, [r6, #17]
    f12c:	9303      	str	r3, [sp, #12]
    f12e:	7d63      	ldrb	r3, [r4, #21]
    f130:	f8cd 9000 	str.w	r9, [sp]
    f134:	e9cd a301 	strd	sl, r3, [sp, #4]
    f138:	462a      	mov	r2, r5
    f13a:	4603      	mov	r3, r0
    f13c:	4641      	mov	r1, r8
    f13e:	4638      	mov	r0, r7
    f140:	f005 fda9 	bl	14c96 <HciLeSetAdvParamCmd>
    f144:	4b04      	ldr	r3, [pc, #16]	; (f158 <dmAdvConfig+0x48>)
    f146:	701d      	strb	r5, [r3, #0]
    f148:	b004      	add	sp, #16
    f14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f14e:	bf00      	nop
    f150:	10003e2c 	.word	0x10003e2c
    f154:	10003c7c 	.word	0x10003c7c
    f158:	10003c98 	.word	0x10003c98

0000f15c <dmAdvReset>:
    f15c:	b507      	push	{r0, r1, r2, lr}
    f15e:	4b0d      	ldr	r3, [pc, #52]	; (f194 <dmAdvReset+0x38>)
    f160:	7dda      	ldrb	r2, [r3, #23]
    f162:	2a05      	cmp	r2, #5
    f164:	d006      	beq.n	f174 <dmAdvReset+0x18>
    f166:	2a01      	cmp	r2, #1
    f168:	d10e      	bne.n	f188 <dmAdvReset+0x2c>
    f16a:	7d1b      	ldrb	r3, [r3, #20]
    f16c:	2b01      	cmp	r3, #1
    f16e:	d00b      	beq.n	f188 <dmAdvReset+0x2c>
    f170:	2b04      	cmp	r3, #4
    f172:	d009      	beq.n	f188 <dmAdvReset+0x2c>
    f174:	4807      	ldr	r0, [pc, #28]	; (f194 <dmAdvReset+0x38>)
    f176:	f00b fdb9 	bl	1acec <WsfTimerStop>
    f17a:	2322      	movs	r3, #34	; 0x22
    f17c:	f8ad 3006 	strh.w	r3, [sp, #6]
    f180:	4b05      	ldr	r3, [pc, #20]	; (f198 <dmAdvReset+0x3c>)
    f182:	a801      	add	r0, sp, #4
    f184:	689b      	ldr	r3, [r3, #8]
    f186:	4798      	blx	r3
    f188:	f7ff fe48 	bl	ee1c <dmAdvInit>
    f18c:	b003      	add	sp, #12
    f18e:	f85d fb04 	ldr.w	pc, [sp], #4
    f192:	bf00      	nop
    f194:	10003c7c 	.word	0x10003c7c
    f198:	10003e2c 	.word	0x10003e2c

0000f19c <dmAdvActConfig>:
    f19c:	4b06      	ldr	r3, [pc, #24]	; (f1b8 <dmAdvActConfig+0x1c>)
    f19e:	7dda      	ldrb	r2, [r3, #23]
    f1a0:	b942      	cbnz	r2, f1b4 <dmAdvActConfig+0x18>
    f1a2:	7d1b      	ldrb	r3, [r3, #20]
    f1a4:	2b01      	cmp	r3, #1
    f1a6:	d005      	beq.n	f1b4 <dmAdvActConfig+0x18>
    f1a8:	2b04      	cmp	r3, #4
    f1aa:	d003      	beq.n	f1b4 <dmAdvActConfig+0x18>
    f1ac:	1dc2      	adds	r2, r0, #7
    f1ae:	7981      	ldrb	r1, [r0, #6]
    f1b0:	7940      	ldrb	r0, [r0, #5]
    f1b2:	e7ad      	b.n	f110 <dmAdvConfig>
    f1b4:	4770      	bx	lr
    f1b6:	bf00      	nop
    f1b8:	10003c7c 	.word	0x10003c7c

0000f1bc <dmAdvActSetData>:
    f1bc:	4a06      	ldr	r2, [pc, #24]	; (f1d8 <dmAdvActSetData+0x1c>)
    f1be:	7dd2      	ldrb	r2, [r2, #23]
    f1c0:	4603      	mov	r3, r0
    f1c2:	b93a      	cbnz	r2, f1d4 <dmAdvActSetData+0x18>
    f1c4:	6899      	ldr	r1, [r3, #8]
    f1c6:	799b      	ldrb	r3, [r3, #6]
    f1c8:	79c0      	ldrb	r0, [r0, #7]
    f1ca:	b90b      	cbnz	r3, f1d0 <dmAdvActSetData+0x14>
    f1cc:	f005 bd33 	b.w	14c36 <HciLeSetAdvDataCmd>
    f1d0:	f005 be77 	b.w	14ec2 <HciLeSetScanRespDataCmd>
    f1d4:	4770      	bx	lr
    f1d6:	bf00      	nop
    f1d8:	10003c7c 	.word	0x10003c7c

0000f1dc <dmAdvActStart>:
    f1dc:	4b07      	ldr	r3, [pc, #28]	; (f1fc <dmAdvActStart+0x20>)
    f1de:	7dda      	ldrb	r2, [r3, #23]
    f1e0:	b95a      	cbnz	r2, f1fa <dmAdvActStart+0x1e>
    f1e2:	7d1a      	ldrb	r2, [r3, #20]
    f1e4:	2a01      	cmp	r2, #1
    f1e6:	d008      	beq.n	f1fa <dmAdvActStart+0x1e>
    f1e8:	2a04      	cmp	r2, #4
    f1ea:	d006      	beq.n	f1fa <dmAdvActStart+0x1e>
    f1ec:	2203      	movs	r2, #3
    f1ee:	75da      	strb	r2, [r3, #23]
    f1f0:	88c2      	ldrh	r2, [r0, #6]
    f1f2:	831a      	strh	r2, [r3, #24]
    f1f4:	2001      	movs	r0, #1
    f1f6:	f005 bd01 	b.w	14bfc <HciLeSetAdvEnableCmd>
    f1fa:	4770      	bx	lr
    f1fc:	10003c7c 	.word	0x10003c7c

0000f200 <dmAdvActStop>:
    f200:	4b07      	ldr	r3, [pc, #28]	; (f220 <dmAdvActStop+0x20>)
    f202:	7dda      	ldrb	r2, [r3, #23]
    f204:	2a01      	cmp	r2, #1
    f206:	d109      	bne.n	f21c <dmAdvActStop+0x1c>
    f208:	7d1a      	ldrb	r2, [r3, #20]
    f20a:	2a01      	cmp	r2, #1
    f20c:	d006      	beq.n	f21c <dmAdvActStop+0x1c>
    f20e:	2a04      	cmp	r2, #4
    f210:	d004      	beq.n	f21c <dmAdvActStop+0x1c>
    f212:	2205      	movs	r2, #5
    f214:	2000      	movs	r0, #0
    f216:	75da      	strb	r2, [r3, #23]
    f218:	f005 bcf0 	b.w	14bfc <HciLeSetAdvEnableCmd>
    f21c:	4770      	bx	lr
    f21e:	bf00      	nop
    f220:	10003c7c 	.word	0x10003c7c

0000f224 <dmAdvActTimeout>:
    f224:	f7ff bfec 	b.w	f200 <dmAdvActStop>

0000f228 <dmAdvHciHandler>:
    f228:	7883      	ldrb	r3, [r0, #2]
    f22a:	2b35      	cmp	r3, #53	; 0x35
    f22c:	b570      	push	{r4, r5, r6, lr}
    f22e:	4605      	mov	r5, r0
    f230:	d144      	bne.n	f2bc <dmAdvHciHandler+0x94>
    f232:	4c23      	ldr	r4, [pc, #140]	; (f2c0 <dmAdvHciHandler+0x98>)
    f234:	7de3      	ldrb	r3, [r4, #23]
    f236:	2b03      	cmp	r3, #3
    f238:	d01d      	beq.n	f276 <dmAdvHciHandler+0x4e>
    f23a:	2b05      	cmp	r3, #5
    f23c:	d138      	bne.n	f2b0 <dmAdvHciHandler+0x88>
    f23e:	2622      	movs	r6, #34	; 0x22
    f240:	78ea      	ldrb	r2, [r5, #3]
    f242:	2a00      	cmp	r2, #0
    f244:	d12e      	bne.n	f2a4 <dmAdvHciHandler+0x7c>
    f246:	2b05      	cmp	r3, #5
    f248:	d109      	bne.n	f25e <dmAdvHciHandler+0x36>
    f24a:	481d      	ldr	r0, [pc, #116]	; (f2c0 <dmAdvHciHandler+0x98>)
    f24c:	f00b fd4e 	bl	1acec <WsfTimerStop>
    f250:	2315      	movs	r3, #21
    f252:	70ab      	strb	r3, [r5, #2]
    f254:	4b1b      	ldr	r3, [pc, #108]	; (f2c4 <dmAdvHciHandler+0x9c>)
    f256:	685b      	ldr	r3, [r3, #4]
    f258:	4628      	mov	r0, r5
    f25a:	689b      	ldr	r3, [r3, #8]
    f25c:	4798      	blx	r3
    f25e:	23ff      	movs	r3, #255	; 0xff
    f260:	7523      	strb	r3, [r4, #20]
    f262:	2300      	movs	r3, #0
    f264:	75e3      	strb	r3, [r4, #23]
    f266:	b34e      	cbz	r6, f2bc <dmAdvHciHandler+0x94>
    f268:	4b17      	ldr	r3, [pc, #92]	; (f2c8 <dmAdvHciHandler+0xa0>)
    f26a:	70ae      	strb	r6, [r5, #2]
    f26c:	4628      	mov	r0, r5
    f26e:	689b      	ldr	r3, [r3, #8]
    f270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f274:	4718      	bx	r3
    f276:	2621      	movs	r6, #33	; 0x21
    f278:	78ea      	ldrb	r2, [r5, #3]
    f27a:	2a00      	cmp	r2, #0
    f27c:	d1f1      	bne.n	f262 <dmAdvHciHandler+0x3a>
    f27e:	2b03      	cmp	r3, #3
    f280:	d10d      	bne.n	f29e <dmAdvHciHandler+0x76>
    f282:	8b21      	ldrh	r1, [r4, #24]
    f284:	b121      	cbz	r1, f290 <dmAdvHciHandler+0x68>
    f286:	2306      	movs	r3, #6
    f288:	480d      	ldr	r0, [pc, #52]	; (f2c0 <dmAdvHciHandler+0x98>)
    f28a:	7323      	strb	r3, [r4, #12]
    f28c:	f00b fd1a 	bl	1acc4 <WsfTimerStartMs>
    f290:	2314      	movs	r3, #20
    f292:	70ab      	strb	r3, [r5, #2]
    f294:	4b0b      	ldr	r3, [pc, #44]	; (f2c4 <dmAdvHciHandler+0x9c>)
    f296:	685b      	ldr	r3, [r3, #4]
    f298:	4628      	mov	r0, r5
    f29a:	689b      	ldr	r3, [r3, #8]
    f29c:	4798      	blx	r3
    f29e:	4b0b      	ldr	r3, [pc, #44]	; (f2cc <dmAdvHciHandler+0xa4>)
    f2a0:	781b      	ldrb	r3, [r3, #0]
    f2a2:	7523      	strb	r3, [r4, #20]
    f2a4:	2301      	movs	r3, #1
    f2a6:	e7dd      	b.n	f264 <dmAdvHciHandler+0x3c>
    f2a8:	2600      	movs	r6, #0
    f2aa:	e7e5      	b.n	f278 <dmAdvHciHandler+0x50>
    f2ac:	2600      	movs	r6, #0
    f2ae:	e7c7      	b.n	f240 <dmAdvHciHandler+0x18>
    f2b0:	2b02      	cmp	r3, #2
    f2b2:	d303      	bcc.n	f2bc <dmAdvHciHandler+0x94>
    f2b4:	2b03      	cmp	r3, #3
    f2b6:	d9f7      	bls.n	f2a8 <dmAdvHciHandler+0x80>
    f2b8:	2b04      	cmp	r3, #4
    f2ba:	d0f7      	beq.n	f2ac <dmAdvHciHandler+0x84>
    f2bc:	bd70      	pop	{r4, r5, r6, pc}
    f2be:	bf00      	nop
    f2c0:	10003c7c 	.word	0x10003c7c
    f2c4:	10002b54 	.word	0x10002b54
    f2c8:	10003e2c 	.word	0x10003e2c
    f2cc:	10003c98 	.word	0x10003c98

0000f2d0 <dmAdvActClearSets>:
    f2d0:	4770      	bx	lr

0000f2d2 <dmAdvStartDirected>:
    f2d2:	b510      	push	{r4, lr}
    f2d4:	4c08      	ldr	r4, [pc, #32]	; (f2f8 <dmAdvStartDirected+0x26>)
    f2d6:	9a03      	ldr	r2, [sp, #12]
    f2d8:	7de3      	ldrb	r3, [r4, #23]
    f2da:	4608      	mov	r0, r1
    f2dc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f2e0:	b943      	cbnz	r3, f2f4 <dmAdvStartDirected+0x22>
    f2e2:	f7ff ff15 	bl	f110 <dmAdvConfig>
    f2e6:	2302      	movs	r3, #2
    f2e8:	75e3      	strb	r3, [r4, #23]
    f2ea:	2001      	movs	r0, #1
    f2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2f0:	f005 bc84 	b.w	14bfc <HciLeSetAdvEnableCmd>
    f2f4:	bd10      	pop	{r4, pc}
    f2f6:	bf00      	nop
    f2f8:	10003c7c 	.word	0x10003c7c

0000f2fc <dmAdvStopDirected>:
    f2fc:	4b04      	ldr	r3, [pc, #16]	; (f310 <dmAdvStopDirected+0x14>)
    f2fe:	7dda      	ldrb	r2, [r3, #23]
    f300:	2a01      	cmp	r2, #1
    f302:	d104      	bne.n	f30e <dmAdvStopDirected+0x12>
    f304:	2204      	movs	r2, #4
    f306:	2000      	movs	r0, #0
    f308:	75da      	strb	r2, [r3, #23]
    f30a:	f005 bc77 	b.w	14bfc <HciLeSetAdvEnableCmd>
    f30e:	4770      	bx	lr
    f310:	10003c7c 	.word	0x10003c7c

0000f314 <dmAdvConnected>:
    f314:	b510      	push	{r4, lr}
    f316:	4c04      	ldr	r4, [pc, #16]	; (f328 <dmAdvConnected+0x14>)
    f318:	4620      	mov	r0, r4
    f31a:	f00b fce7 	bl	1acec <WsfTimerStop>
    f31e:	23ff      	movs	r3, #255	; 0xff
    f320:	7523      	strb	r3, [r4, #20]
    f322:	2300      	movs	r3, #0
    f324:	75e3      	strb	r3, [r4, #23]
    f326:	bd10      	pop	{r4, pc}
    f328:	10003c7c 	.word	0x10003c7c

0000f32c <dmAdvConnectFailed>:
    f32c:	f7ff bff2 	b.w	f314 <dmAdvConnected>

0000f330 <DmAdvInit>:
    f330:	b508      	push	{r3, lr}
    f332:	f00c f947 	bl	1b5c4 <WsfTaskLock>
    f336:	4b04      	ldr	r3, [pc, #16]	; (f348 <DmAdvInit+0x18>)
    f338:	4a04      	ldr	r2, [pc, #16]	; (f34c <DmAdvInit+0x1c>)
    f33a:	601a      	str	r2, [r3, #0]
    f33c:	f7ff fd6e 	bl	ee1c <dmAdvInit>
    f340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f344:	f00c b944 	b.w	1b5d0 <WsfTaskUnlock>
    f348:	10002b54 	.word	0x10002b54
    f34c:	00025d74 	.word	0x00025d74

0000f350 <DmAdvModeLeg>:
    f350:	4b03      	ldr	r3, [pc, #12]	; (f360 <DmAdvModeLeg+0x10>)
    f352:	6818      	ldr	r0, [r3, #0]
    f354:	4b03      	ldr	r3, [pc, #12]	; (f364 <DmAdvModeLeg+0x14>)
    f356:	1ac3      	subs	r3, r0, r3
    f358:	4258      	negs	r0, r3
    f35a:	4158      	adcs	r0, r3
    f35c:	4770      	bx	lr
    f35e:	bf00      	nop
    f360:	10002b54 	.word	0x10002b54
    f364:	00025d74 	.word	0x00025d74

0000f368 <dmConnSmActNone>:
    f368:	4770      	bx	lr

0000f36a <dmConnSmActHciUpdated>:
    f36a:	2329      	movs	r3, #41	; 0x29
    f36c:	708b      	strb	r3, [r1, #2]
    f36e:	4b02      	ldr	r3, [pc, #8]	; (f378 <dmConnSmActHciUpdated+0xe>)
    f370:	4608      	mov	r0, r1
    f372:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f376:	4718      	bx	r3
    f378:	10003c9c 	.word	0x10003c9c

0000f37c <dmConnSmActClose>:
    f37c:	7909      	ldrb	r1, [r1, #4]
    f37e:	8980      	ldrh	r0, [r0, #12]
    f380:	f004 bfec 	b.w	1435c <HciDisconnectCmd>

0000f384 <dmConnReset>:
    f384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f386:	2339      	movs	r3, #57	; 0x39
    f388:	4d14      	ldr	r5, [pc, #80]	; (f3dc <dmConnReset+0x58>)
    f38a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f38e:	2400      	movs	r4, #0
    f390:	2316      	movs	r3, #22
    f392:	f88d 4008 	strb.w	r4, [sp, #8]
    f396:	f88d 300c 	strb.w	r3, [sp, #12]
    f39a:	462e      	mov	r6, r5
    f39c:	1928      	adds	r0, r5, r4
    f39e:	7d83      	ldrb	r3, [r0, #22]
    f3a0:	b13b      	cbz	r3, f3b2 <dmConnReset+0x2e>
    f3a2:	7c03      	ldrb	r3, [r0, #16]
    f3a4:	f8ad 300a 	strh.w	r3, [sp, #10]
    f3a8:	a901      	add	r1, sp, #4
    f3aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    f3ae:	f000 fca1 	bl	fcf4 <dmConnSmExecute>
    f3b2:	342c      	adds	r4, #44	; 0x2c
    f3b4:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f3b8:	d1f0      	bne.n	f39c <dmConnReset+0x18>
    f3ba:	4a09      	ldr	r2, [pc, #36]	; (f3e0 <dmConnReset+0x5c>)
    f3bc:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
    f3c0:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
    f3c4:	6810      	ldr	r0, [r2, #0]
    f3c6:	6851      	ldr	r1, [r2, #4]
    f3c8:	4b06      	ldr	r3, [pc, #24]	; (f3e4 <dmConnReset+0x60>)
    f3ca:	c303      	stmia	r3!, {r0, r1}
    f3cc:	6890      	ldr	r0, [r2, #8]
    f3ce:	6018      	str	r0, [r3, #0]
    f3d0:	4b05      	ldr	r3, [pc, #20]	; (f3e8 <dmConnReset+0x64>)
    f3d2:	2200      	movs	r2, #0
    f3d4:	74da      	strb	r2, [r3, #19]
    f3d6:	735a      	strb	r2, [r3, #13]
    f3d8:	b004      	add	sp, #16
    f3da:	bd70      	pop	{r4, r5, r6, pc}
    f3dc:	10003c9c 	.word	0x10003c9c
    f3e0:	00025d80 	.word	0x00025d80
    f3e4:	10003e10 	.word	0x10003e10
    f3e8:	10003e2c 	.word	0x10003e2c

0000f3ec <dmConnSetConnSpec>:
    f3ec:	b538      	push	{r3, r4, r5, lr}
    f3ee:	4605      	mov	r5, r0
    f3f0:	460c      	mov	r4, r1
    f3f2:	f00c f8e7 	bl	1b5c4 <WsfTaskLock>
    f3f6:	4628      	mov	r0, r5
    f3f8:	f000 fdc4 	bl	ff84 <DmInitPhyToIdx>
    f3fc:	4a07      	ldr	r2, [pc, #28]	; (f41c <dmConnSetConnSpec+0x30>)
    f3fe:	6861      	ldr	r1, [r4, #4]
    f400:	230c      	movs	r3, #12
    f402:	fb03 2300 	mla	r3, r3, r0, r2
    f406:	6820      	ldr	r0, [r4, #0]
    f408:	f503 73ba 	add.w	r3, r3, #372	; 0x174
    f40c:	c303      	stmia	r3!, {r0, r1}
    f40e:	68a0      	ldr	r0, [r4, #8]
    f410:	6018      	str	r0, [r3, #0]
    f412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f416:	f00c b8db 	b.w	1b5d0 <WsfTaskUnlock>
    f41a:	bf00      	nop
    f41c:	10003c9c 	.word	0x10003c9c

0000f420 <dmConnCcbAlloc>:
    f420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f422:	4c0f      	ldr	r4, [pc, #60]	; (f460 <dmConnCcbAlloc+0x40>)
    f424:	4607      	mov	r7, r0
    f426:	2500      	movs	r5, #0
    f428:	7da6      	ldrb	r6, [r4, #22]
    f42a:	3501      	adds	r5, #1
    f42c:	b2ed      	uxtb	r5, r5
    f42e:	b98e      	cbnz	r6, f454 <dmConnCcbAlloc+0x34>
    f430:	222c      	movs	r2, #44	; 0x2c
    f432:	4631      	mov	r1, r6
    f434:	4620      	mov	r0, r4
    f436:	f7fc ff91 	bl	c35c <memset>
    f43a:	4639      	mov	r1, r7
    f43c:	4620      	mov	r0, r4
    f43e:	f00a fbe1 	bl	19c04 <BdaCpy>
    f442:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f446:	81a3      	strh	r3, [r4, #12]
    f448:	2301      	movs	r3, #1
    f44a:	7425      	strb	r5, [r4, #16]
    f44c:	7466      	strb	r6, [r4, #17]
    f44e:	75a3      	strb	r3, [r4, #22]
    f450:	4620      	mov	r0, r4
    f452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f454:	2d08      	cmp	r5, #8
    f456:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    f45a:	d1e5      	bne.n	f428 <dmConnCcbAlloc+0x8>
    f45c:	2400      	movs	r4, #0
    f45e:	e7f7      	b.n	f450 <dmConnCcbAlloc+0x30>
    f460:	10003c9c 	.word	0x10003c9c

0000f464 <dmConnCcbDealloc>:
    f464:	2300      	movs	r3, #0
    f466:	7583      	strb	r3, [r0, #22]
    f468:	4770      	bx	lr

0000f46a <dmConnCcbByHandle>:
    f46a:	b510      	push	{r4, lr}
    f46c:	4907      	ldr	r1, [pc, #28]	; (f48c <dmConnCcbByHandle+0x22>)
    f46e:	2200      	movs	r2, #0
    f470:	188b      	adds	r3, r1, r2
    f472:	7d9c      	ldrb	r4, [r3, #22]
    f474:	b114      	cbz	r4, f47c <dmConnCcbByHandle+0x12>
    f476:	899c      	ldrh	r4, [r3, #12]
    f478:	4284      	cmp	r4, r0
    f47a:	d004      	beq.n	f486 <dmConnCcbByHandle+0x1c>
    f47c:	322c      	adds	r2, #44	; 0x2c
    f47e:	f5b2 7fb0 	cmp.w	r2, #352	; 0x160
    f482:	d1f5      	bne.n	f470 <dmConnCcbByHandle+0x6>
    f484:	2300      	movs	r3, #0
    f486:	4618      	mov	r0, r3
    f488:	bd10      	pop	{r4, pc}
    f48a:	bf00      	nop
    f48c:	10003c9c 	.word	0x10003c9c

0000f490 <dmConn2HciHandler>:
    f490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f492:	4604      	mov	r4, r0
    f494:	8800      	ldrh	r0, [r0, #0]
    f496:	f7ff ffe8 	bl	f46a <dmConnCcbByHandle>
    f49a:	b138      	cbz	r0, f4ac <dmConn2HciHandler+0x1c>
    f49c:	78a3      	ldrb	r3, [r4, #2]
    f49e:	2b23      	cmp	r3, #35	; 0x23
    f4a0:	d02a      	beq.n	f4f8 <dmConn2HciHandler+0x68>
    f4a2:	d805      	bhi.n	f4b0 <dmConn2HciHandler+0x20>
    f4a4:	2b07      	cmp	r3, #7
    f4a6:	d00f      	beq.n	f4c8 <dmConn2HciHandler+0x38>
    f4a8:	2b0b      	cmp	r3, #11
    f4aa:	d052      	beq.n	f552 <dmConn2HciHandler+0xc2>
    f4ac:	b004      	add	sp, #16
    f4ae:	bd10      	pop	{r4, pc}
    f4b0:	2b27      	cmp	r3, #39	; 0x27
    f4b2:	d037      	beq.n	f524 <dmConn2HciHandler+0x94>
    f4b4:	2b28      	cmp	r3, #40	; 0x28
    f4b6:	d042      	beq.n	f53e <dmConn2HciHandler+0xae>
    f4b8:	2b24      	cmp	r3, #36	; 0x24
    f4ba:	d1f7      	bne.n	f4ac <dmConn2HciHandler+0x1c>
    f4bc:	7c02      	ldrb	r2, [r0, #16]
    f4be:	8983      	ldrh	r3, [r0, #12]
    f4c0:	f8ad 2000 	strh.w	r2, [sp]
    f4c4:	2240      	movs	r2, #64	; 0x40
    f4c6:	e01c      	b.n	f502 <dmConn2HciHandler+0x72>
    f4c8:	8981      	ldrh	r1, [r0, #12]
    f4ca:	7923      	ldrb	r3, [r4, #4]
    f4cc:	7c00      	ldrb	r0, [r0, #16]
    f4ce:	f994 2008 	ldrsb.w	r2, [r4, #8]
    f4d2:	f8ad 0000 	strh.w	r0, [sp]
    f4d6:	2438      	movs	r4, #56	; 0x38
    f4d8:	f88d 4002 	strb.w	r4, [sp, #2]
    f4dc:	f88d 3003 	strb.w	r3, [sp, #3]
    f4e0:	f88d 3004 	strb.w	r3, [sp, #4]
    f4e4:	f8ad 1006 	strh.w	r1, [sp, #6]
    f4e8:	f88d 2008 	strb.w	r2, [sp, #8]
    f4ec:	4b26      	ldr	r3, [pc, #152]	; (f588 <dmConn2HciHandler+0xf8>)
    f4ee:	4668      	mov	r0, sp
    f4f0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f4f4:	4798      	blx	r3
    f4f6:	e7d9      	b.n	f4ac <dmConn2HciHandler+0x1c>
    f4f8:	7c02      	ldrb	r2, [r0, #16]
    f4fa:	8983      	ldrh	r3, [r0, #12]
    f4fc:	f8ad 2000 	strh.w	r2, [sp]
    f500:	223f      	movs	r2, #63	; 0x3f
    f502:	f8ad 2002 	strh.w	r2, [sp, #2]
    f506:	f8ad 3004 	strh.w	r3, [sp, #4]
    f50a:	88e3      	ldrh	r3, [r4, #6]
    f50c:	f8ad 3006 	strh.w	r3, [sp, #6]
    f510:	8923      	ldrh	r3, [r4, #8]
    f512:	f8ad 3008 	strh.w	r3, [sp, #8]
    f516:	8963      	ldrh	r3, [r4, #10]
    f518:	f8ad 300a 	strh.w	r3, [sp, #10]
    f51c:	89a3      	ldrh	r3, [r4, #12]
    f51e:	f8ad 300c 	strh.w	r3, [sp, #12]
    f522:	e7e3      	b.n	f4ec <dmConn2HciHandler+0x5c>
    f524:	7c01      	ldrb	r1, [r0, #16]
    f526:	7923      	ldrb	r3, [r4, #4]
    f528:	88e2      	ldrh	r2, [r4, #6]
    f52a:	f8ad 1000 	strh.w	r1, [sp]
    f52e:	2141      	movs	r1, #65	; 0x41
    f530:	f8ad 1002 	strh.w	r1, [sp, #2]
    f534:	f8ad 2006 	strh.w	r2, [sp, #6]
    f538:	f88d 3004 	strb.w	r3, [sp, #4]
    f53c:	e7d6      	b.n	f4ec <dmConn2HciHandler+0x5c>
    f53e:	7c02      	ldrb	r2, [r0, #16]
    f540:	88a3      	ldrh	r3, [r4, #4]
    f542:	f8ad 2000 	strh.w	r2, [sp]
    f546:	2242      	movs	r2, #66	; 0x42
    f548:	f8ad 2002 	strh.w	r2, [sp, #2]
    f54c:	f8ad 3004 	strh.w	r3, [sp, #4]
    f550:	e7cc      	b.n	f4ec <dmConn2HciHandler+0x5c>
    f552:	7a62      	ldrb	r2, [r4, #9]
    f554:	7a23      	ldrb	r3, [r4, #8]
    f556:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f55a:	7aa2      	ldrb	r2, [r4, #10]
    f55c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    f560:	6283      	str	r3, [r0, #40]	; 0x28
    f562:	7c03      	ldrb	r3, [r0, #16]
    f564:	f8ad 3000 	strh.w	r3, [sp]
    f568:	2351      	movs	r3, #81	; 0x51
    f56a:	f8ad 3002 	strh.w	r3, [sp, #2]
    f56e:	7923      	ldrb	r3, [r4, #4]
    f570:	f88d 3004 	strb.w	r3, [sp, #4]
    f574:	88e3      	ldrh	r3, [r4, #6]
    f576:	f854 0f08 	ldr.w	r0, [r4, #8]!
    f57a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f57e:	6861      	ldr	r1, [r4, #4]
    f580:	ab02      	add	r3, sp, #8
    f582:	c303      	stmia	r3!, {r0, r1}
    f584:	e7b2      	b.n	f4ec <dmConn2HciHandler+0x5c>
    f586:	bf00      	nop
    f588:	10003c9c 	.word	0x10003c9c

0000f58c <dmConnCcbByBdAddr>:
    f58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f58e:	4f0a      	ldr	r7, [pc, #40]	; (f5b8 <dmConnCcbByBdAddr+0x2c>)
    f590:	4606      	mov	r6, r0
    f592:	2500      	movs	r5, #0
    f594:	197c      	adds	r4, r7, r5
    f596:	7da3      	ldrb	r3, [r4, #22]
    f598:	b933      	cbnz	r3, f5a8 <dmConnCcbByBdAddr+0x1c>
    f59a:	352c      	adds	r5, #44	; 0x2c
    f59c:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
    f5a0:	d1f8      	bne.n	f594 <dmConnCcbByBdAddr+0x8>
    f5a2:	2400      	movs	r4, #0
    f5a4:	4620      	mov	r0, r4
    f5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5a8:	4631      	mov	r1, r6
    f5aa:	4620      	mov	r0, r4
    f5ac:	f00a fb38 	bl	19c20 <BdaCmp>
    f5b0:	2800      	cmp	r0, #0
    f5b2:	d0f2      	beq.n	f59a <dmConnCcbByBdAddr+0xe>
    f5b4:	e7f6      	b.n	f5a4 <dmConnCcbByBdAddr+0x18>
    f5b6:	bf00      	nop
    f5b8:	10003c9c 	.word	0x10003c9c

0000f5bc <dmConnHciHandler>:
    f5bc:	b538      	push	{r3, r4, r5, lr}
    f5be:	7884      	ldrb	r4, [r0, #2]
    f5c0:	1e63      	subs	r3, r4, #1
    f5c2:	2b01      	cmp	r3, #1
    f5c4:	4605      	mov	r5, r0
    f5c6:	d82d      	bhi.n	f624 <dmConnHciHandler+0x68>
    f5c8:	f100 040a 	add.w	r4, r0, #10
    f5cc:	4620      	mov	r0, r4
    f5ce:	f7ff ffdd 	bl	f58c <dmConnCcbByBdAddr>
    f5d2:	b9c8      	cbnz	r0, f608 <dmConnHciHandler+0x4c>
    f5d4:	4817      	ldr	r0, [pc, #92]	; (f634 <dmConnHciHandler+0x78>)
    f5d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f5da:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    f5de:	7d83      	ldrb	r3, [r0, #22]
    f5e0:	b13b      	cbz	r3, f5f2 <dmConnHciHandler+0x36>
    f5e2:	7d43      	ldrb	r3, [r0, #21]
    f5e4:	2b02      	cmp	r3, #2
    f5e6:	d00f      	beq.n	f608 <dmConnHciHandler+0x4c>
    f5e8:	2b04      	cmp	r3, #4
    f5ea:	d102      	bne.n	f5f2 <dmConnHciHandler+0x36>
    f5ec:	8983      	ldrh	r3, [r0, #12]
    f5ee:	428b      	cmp	r3, r1
    f5f0:	d00a      	beq.n	f608 <dmConnHciHandler+0x4c>
    f5f2:	302c      	adds	r0, #44	; 0x2c
    f5f4:	4290      	cmp	r0, r2
    f5f6:	d1f2      	bne.n	f5de <dmConnHciHandler+0x22>
    f5f8:	7a2b      	ldrb	r3, [r5, #8]
    f5fa:	2b01      	cmp	r3, #1
    f5fc:	d001      	beq.n	f602 <dmConnHciHandler+0x46>
    f5fe:	2000      	movs	r0, #0
    f600:	e002      	b.n	f608 <dmConnHciHandler+0x4c>
    f602:	4620      	mov	r0, r4
    f604:	f7ff ff0c 	bl	f420 <dmConnCcbAlloc>
    f608:	78eb      	ldrb	r3, [r5, #3]
    f60a:	b94b      	cbnz	r3, f620 <dmConnHciHandler+0x64>
    f60c:	2338      	movs	r3, #56	; 0x38
    f60e:	70ab      	strb	r3, [r5, #2]
    f610:	b170      	cbz	r0, f630 <dmConnHciHandler+0x74>
    f612:	7c03      	ldrb	r3, [r0, #16]
    f614:	802b      	strh	r3, [r5, #0]
    f616:	4629      	mov	r1, r5
    f618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f61c:	f000 bb6a 	b.w	fcf4 <dmConnSmExecute>
    f620:	2337      	movs	r3, #55	; 0x37
    f622:	e7f4      	b.n	f60e <dmConnHciHandler+0x52>
    f624:	8800      	ldrh	r0, [r0, #0]
    f626:	3436      	adds	r4, #54	; 0x36
    f628:	f7ff ff1f 	bl	f46a <dmConnCcbByHandle>
    f62c:	70ac      	strb	r4, [r5, #2]
    f62e:	e7ef      	b.n	f610 <dmConnHciHandler+0x54>
    f630:	bd38      	pop	{r3, r4, r5, pc}
    f632:	bf00      	nop
    f634:	10003c9c 	.word	0x10003c9c

0000f638 <dmConnCcbById>:
    f638:	3801      	subs	r0, #1
    f63a:	4a05      	ldr	r2, [pc, #20]	; (f650 <dmConnCcbById+0x18>)
    f63c:	b2c3      	uxtb	r3, r0
    f63e:	212c      	movs	r1, #44	; 0x2c
    f640:	fb01 2003 	mla	r0, r1, r3, r2
    f644:	7d80      	ldrb	r0, [r0, #22]
    f646:	b108      	cbz	r0, f64c <dmConnCcbById+0x14>
    f648:	fb03 2001 	mla	r0, r3, r1, r2
    f64c:	4770      	bx	lr
    f64e:	bf00      	nop
    f650:	10003c9c 	.word	0x10003c9c

0000f654 <dmConnMsgHandler>:
    f654:	b510      	push	{r4, lr}
    f656:	4604      	mov	r4, r0
    f658:	7800      	ldrb	r0, [r0, #0]
    f65a:	f7ff ffed 	bl	f638 <dmConnCcbById>
    f65e:	b120      	cbz	r0, f66a <dmConnMsgHandler+0x16>
    f660:	4621      	mov	r1, r4
    f662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f666:	f000 bb45 	b.w	fcf4 <dmConnSmExecute>
    f66a:	bd10      	pop	{r4, pc}

0000f66c <dmConn2MsgHandler>:
    f66c:	b530      	push	{r4, r5, lr}
    f66e:	4604      	mov	r4, r0
    f670:	b085      	sub	sp, #20
    f672:	7800      	ldrb	r0, [r0, #0]
    f674:	f7ff ffe0 	bl	f638 <dmConnCcbById>
    f678:	b1d0      	cbz	r0, f6b0 <dmConn2MsgHandler+0x44>
    f67a:	78a3      	ldrb	r3, [r4, #2]
    f67c:	3b41      	subs	r3, #65	; 0x41
    f67e:	2b04      	cmp	r3, #4
    f680:	d816      	bhi.n	f6b0 <dmConn2MsgHandler+0x44>
    f682:	e8df f003 	tbb	[pc, r3]
    f686:	0903      	.short	0x0903
    f688:	1e17      	.short	0x1e17
    f68a:	26          	.byte	0x26
    f68b:	00          	.byte	0x00
    f68c:	8980      	ldrh	r0, [r0, #12]
    f68e:	b005      	add	sp, #20
    f690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f694:	f005 bcb0 	b.w	14ff8 <HciReadRssiCmd>
    f698:	89e5      	ldrh	r5, [r4, #14]
    f69a:	8923      	ldrh	r3, [r4, #8]
    f69c:	88e2      	ldrh	r2, [r4, #6]
    f69e:	88a1      	ldrh	r1, [r4, #4]
    f6a0:	8980      	ldrh	r0, [r0, #12]
    f6a2:	9502      	str	r5, [sp, #8]
    f6a4:	89a5      	ldrh	r5, [r4, #12]
    f6a6:	9501      	str	r5, [sp, #4]
    f6a8:	8964      	ldrh	r4, [r4, #10]
    f6aa:	9400      	str	r4, [sp, #0]
    f6ac:	f005 f80c 	bl	146c8 <HciLeRemoteConnParamReqReply>
    f6b0:	b005      	add	sp, #20
    f6b2:	bd30      	pop	{r4, r5, pc}
    f6b4:	7921      	ldrb	r1, [r4, #4]
    f6b6:	8980      	ldrh	r0, [r0, #12]
    f6b8:	b005      	add	sp, #20
    f6ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f6be:	f005 b887 	b.w	147d0 <HciLeRemoteConnParamReqNegReply>
    f6c2:	88e2      	ldrh	r2, [r4, #6]
    f6c4:	88a1      	ldrh	r1, [r4, #4]
    f6c6:	8980      	ldrh	r0, [r0, #12]
    f6c8:	b005      	add	sp, #20
    f6ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f6ce:	f005 b8ad 	b.w	1482c <HciLeSetDataLen>
    f6d2:	88a1      	ldrh	r1, [r4, #4]
    f6d4:	8980      	ldrh	r0, [r0, #12]
    f6d6:	b005      	add	sp, #20
    f6d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f6dc:	f005 bd1c 	b.w	15118 <HciWriteAuthPayloadTimeout>

0000f6e0 <dmConnExecCback>:
    f6e0:	b570      	push	{r4, r5, r6, lr}
    f6e2:	4e06      	ldr	r6, [pc, #24]	; (f6fc <dmConnExecCback+0x1c>)
    f6e4:	4605      	mov	r5, r0
    f6e6:	2400      	movs	r4, #0
    f6e8:	1933      	adds	r3, r6, r4
    f6ea:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    f6ee:	b10b      	cbz	r3, f6f4 <dmConnExecCback+0x14>
    f6f0:	4628      	mov	r0, r5
    f6f2:	4798      	blx	r3
    f6f4:	3404      	adds	r4, #4
    f6f6:	2c14      	cmp	r4, #20
    f6f8:	d1f6      	bne.n	f6e8 <dmConnExecCback+0x8>
    f6fa:	bd70      	pop	{r4, r5, r6, pc}
    f6fc:	10003c9c 	.word	0x10003c9c

0000f700 <dmConnSmActConnOpened>:
    f700:	b570      	push	{r4, r5, r6, lr}
    f702:	460d      	mov	r5, r1
    f704:	4604      	mov	r4, r0
    f706:	310a      	adds	r1, #10
    f708:	f00a fa7c 	bl	19c04 <BdaCpy>
    f70c:	88eb      	ldrh	r3, [r5, #6]
    f70e:	81a3      	strh	r3, [r4, #12]
    f710:	7a68      	ldrb	r0, [r5, #9]
    f712:	f000 fc07 	bl	ff24 <DmHostAddrType>
    f716:	74e0      	strb	r0, [r4, #19]
    f718:	7a2a      	ldrb	r2, [r5, #8]
    f71a:	7662      	strb	r2, [r4, #25]
    f71c:	4b12      	ldr	r3, [pc, #72]	; (f768 <dmConnSmActConnOpened+0x68>)
    f71e:	b9fa      	cbnz	r2, f760 <dmConnSmActConnOpened+0x60>
    f720:	7b5b      	ldrb	r3, [r3, #13]
    f722:	7523      	strb	r3, [r4, #20]
    f724:	7d23      	ldrb	r3, [r4, #20]
    f726:	1da6      	adds	r6, r4, #6
    f728:	b9e3      	cbnz	r3, f764 <dmConnSmActConnOpened+0x64>
    f72a:	f006 fb69 	bl	15e00 <HciGetBdAddr>
    f72e:	4601      	mov	r1, r0
    f730:	4630      	mov	r0, r6
    f732:	f00a fa67 	bl	19c04 <BdaCpy>
    f736:	f105 0117 	add.w	r1, r5, #23
    f73a:	f104 001a 	add.w	r0, r4, #26
    f73e:	f00a fa61 	bl	19c04 <BdaCpy>
    f742:	f104 0020 	add.w	r0, r4, #32
    f746:	f105 011d 	add.w	r1, r5, #29
    f74a:	f00a fa5b 	bl	19c04 <BdaCpy>
    f74e:	2300      	movs	r3, #0
    f750:	81e3      	strh	r3, [r4, #14]
    f752:	2327      	movs	r3, #39	; 0x27
    f754:	70ab      	strb	r3, [r5, #2]
    f756:	4628      	mov	r0, r5
    f758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f75c:	f7ff bfc0 	b.w	f6e0 <dmConnExecCback>
    f760:	7b9b      	ldrb	r3, [r3, #14]
    f762:	e7de      	b.n	f722 <dmConnSmActConnOpened+0x22>
    f764:	4900      	ldr	r1, [pc, #0]	; (f768 <dmConnSmActConnOpened+0x68>)
    f766:	e7e3      	b.n	f730 <dmConnSmActConnOpened+0x30>
    f768:	10003e2c 	.word	0x10003e2c

0000f76c <dmConnSmActConnFailed>:
    f76c:	2300      	movs	r3, #0
    f76e:	7583      	strb	r3, [r0, #22]
    f770:	2328      	movs	r3, #40	; 0x28
    f772:	708b      	strb	r3, [r1, #2]
    f774:	4608      	mov	r0, r1
    f776:	f7ff bfb3 	b.w	f6e0 <dmConnExecCback>

0000f77a <dmConnSmActConnClosed>:
    f77a:	2300      	movs	r3, #0
    f77c:	7583      	strb	r3, [r0, #22]
    f77e:	2328      	movs	r3, #40	; 0x28
    f780:	708b      	strb	r3, [r1, #2]
    f782:	4608      	mov	r0, r1
    f784:	f7ff bfac 	b.w	f6e0 <dmConnExecCback>

0000f788 <dmConnOpenAccept>:
    f788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f78c:	4607      	mov	r7, r0
    f78e:	468a      	mov	sl, r1
    f790:	4691      	mov	r9, r2
    f792:	4698      	mov	r8, r3
    f794:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f798:	f00b ff14 	bl	1b5c4 <WsfTaskLock>
    f79c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f79e:	f7ff fef5 	bl	f58c <dmConnCcbByBdAddr>
    f7a2:	4605      	mov	r5, r0
    f7a4:	b918      	cbnz	r0, f7ae <dmConnOpenAccept+0x26>
    f7a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f7a8:	f7ff fe3a 	bl	f420 <dmConnCcbAlloc>
    f7ac:	4605      	mov	r5, r0
    f7ae:	f00b ff0f 	bl	1b5d0 <WsfTaskUnlock>
    f7b2:	b39d      	cbz	r5, f81c <dmConnOpenAccept+0x94>
    f7b4:	2014      	movs	r0, #20
    f7b6:	f00b f8ba 	bl	1a92e <WsfMsgAlloc>
    f7ba:	4604      	mov	r4, r0
    f7bc:	b338      	cbz	r0, f80e <dmConnOpenAccept+0x86>
    f7be:	7c2b      	ldrb	r3, [r5, #16]
    f7c0:	8003      	strh	r3, [r0, #0]
    f7c2:	2e00      	cmp	r6, #0
    f7c4:	bf0c      	ite	eq
    f7c6:	2330      	moveq	r3, #48	; 0x30
    f7c8:	2332      	movne	r3, #50	; 0x32
    f7ca:	7083      	strb	r3, [r0, #2]
    f7cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f7d0:	8103      	strh	r3, [r0, #8]
    f7d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f7d6:	7283      	strb	r3, [r0, #10]
    f7d8:	f880 a004 	strb.w	sl, [r0, #4]
    f7dc:	f880 9005 	strb.w	r9, [r0, #5]
    f7e0:	f880 8006 	strb.w	r8, [r0, #6]
    f7e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f7e6:	300b      	adds	r0, #11
    f7e8:	f00a fa0c 	bl	19c04 <BdaCpy>
    f7ec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f7f0:	7463      	strb	r3, [r4, #17]
    f7f2:	4b0b      	ldr	r3, [pc, #44]	; (f820 <dmConnOpenAccept+0x98>)
    f7f4:	74a7      	strb	r7, [r4, #18]
    f7f6:	7b18      	ldrb	r0, [r3, #12]
    f7f8:	4621      	mov	r1, r4
    f7fa:	f00b f8bc 	bl	1a976 <WsfMsgSend>
    f7fe:	f00b fee1 	bl	1b5c4 <WsfTaskLock>
    f802:	766e      	strb	r6, [r5, #25]
    f804:	f00b fee4 	bl	1b5d0 <WsfTaskUnlock>
    f808:	7c28      	ldrb	r0, [r5, #16]
    f80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f80e:	f00b fed9 	bl	1b5c4 <WsfTaskLock>
    f812:	75ac      	strb	r4, [r5, #22]
    f814:	f00b fedc 	bl	1b5d0 <WsfTaskUnlock>
    f818:	4620      	mov	r0, r4
    f81a:	e7f6      	b.n	f80a <dmConnOpenAccept+0x82>
    f81c:	4628      	mov	r0, r5
    f81e:	e7f4      	b.n	f80a <dmConnOpenAccept+0x82>
    f820:	10003e2c 	.word	0x10003e2c

0000f824 <DmConnInit>:
    f824:	4b05      	ldr	r3, [pc, #20]	; (f83c <DmConnInit+0x18>)
    f826:	4a06      	ldr	r2, [pc, #24]	; (f840 <DmConnInit+0x1c>)
    f828:	f103 010c 	add.w	r1, r3, #12
    f82c:	60d1      	str	r1, [r2, #12]
    f82e:	f103 0118 	add.w	r1, r3, #24
    f832:	6111      	str	r1, [r2, #16]
    f834:	4a03      	ldr	r2, [pc, #12]	; (f844 <DmConnInit+0x20>)
    f836:	3324      	adds	r3, #36	; 0x24
    f838:	6013      	str	r3, [r2, #0]
    f83a:	4770      	bx	lr
    f83c:	00025d80 	.word	0x00025d80
    f840:	10002b54 	.word	0x10002b54
    f844:	10003e20 	.word	0x10003e20

0000f848 <DmConnRegister>:
    f848:	b538      	push	{r3, r4, r5, lr}
    f84a:	4604      	mov	r4, r0
    f84c:	460d      	mov	r5, r1
    f84e:	3458      	adds	r4, #88	; 0x58
    f850:	f00b feb8 	bl	1b5c4 <WsfTaskLock>
    f854:	4b03      	ldr	r3, [pc, #12]	; (f864 <DmConnRegister+0x1c>)
    f856:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    f85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f85e:	f00b beb7 	b.w	1b5d0 <WsfTaskUnlock>
    f862:	bf00      	nop
    f864:	10003c9c 	.word	0x10003c9c

0000f868 <DmConnClose>:
    f868:	b570      	push	{r4, r5, r6, lr}
    f86a:	4604      	mov	r4, r0
    f86c:	2006      	movs	r0, #6
    f86e:	460e      	mov	r6, r1
    f870:	4615      	mov	r5, r2
    f872:	f00b f85c 	bl	1a92e <WsfMsgAlloc>
    f876:	b158      	cbz	r0, f890 <DmConnClose+0x28>
    f878:	2331      	movs	r3, #49	; 0x31
    f87a:	7083      	strb	r3, [r0, #2]
    f87c:	4b05      	ldr	r3, [pc, #20]	; (f894 <DmConnClose+0x2c>)
    f87e:	8006      	strh	r6, [r0, #0]
    f880:	7105      	strb	r5, [r0, #4]
    f882:	7144      	strb	r4, [r0, #5]
    f884:	4601      	mov	r1, r0
    f886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f88a:	7b18      	ldrb	r0, [r3, #12]
    f88c:	f00b b873 	b.w	1a976 <WsfMsgSend>
    f890:	bd70      	pop	{r4, r5, r6, pc}
    f892:	bf00      	nop
    f894:	10003e2c 	.word	0x10003e2c

0000f898 <DmReadRemoteFeatures>:
    f898:	b508      	push	{r3, lr}
    f89a:	f7ff fecd 	bl	f638 <dmConnCcbById>
    f89e:	b120      	cbz	r0, f8aa <DmReadRemoteFeatures+0x12>
    f8a0:	8980      	ldrh	r0, [r0, #12]
    f8a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f8a6:	f005 b938 	b.w	14b1a <HciLeReadRemoteFeatCmd>
    f8aa:	bd08      	pop	{r3, pc}

0000f8ac <DmConnUpdate>:
    f8ac:	b538      	push	{r3, r4, r5, lr}
    f8ae:	4605      	mov	r5, r0
    f8b0:	2010      	movs	r0, #16
    f8b2:	460c      	mov	r4, r1
    f8b4:	f00b f83b 	bl	1a92e <WsfMsgAlloc>
    f8b8:	b1d0      	cbz	r0, f8f0 <DmConnUpdate+0x44>
    f8ba:	4a0e      	ldr	r2, [pc, #56]	; (f8f4 <DmConnUpdate+0x48>)
    f8bc:	1e6b      	subs	r3, r5, #1
    f8be:	212c      	movs	r1, #44	; 0x2c
    f8c0:	fb01 2303 	mla	r3, r1, r3, r2
    f8c4:	4602      	mov	r2, r0
    f8c6:	7e5b      	ldrb	r3, [r3, #25]
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	bf0c      	ite	eq
    f8cc:	2333      	moveq	r3, #51	; 0x33
    f8ce:	2334      	movne	r3, #52	; 0x34
    f8d0:	7083      	strb	r3, [r0, #2]
    f8d2:	f822 5b04 	strh.w	r5, [r2], #4
    f8d6:	6823      	ldr	r3, [r4, #0]
    f8d8:	6043      	str	r3, [r0, #4]
    f8da:	6863      	ldr	r3, [r4, #4]
    f8dc:	6053      	str	r3, [r2, #4]
    f8de:	68a3      	ldr	r3, [r4, #8]
    f8e0:	6093      	str	r3, [r2, #8]
    f8e2:	4b05      	ldr	r3, [pc, #20]	; (f8f8 <DmConnUpdate+0x4c>)
    f8e4:	4601      	mov	r1, r0
    f8e6:	7b18      	ldrb	r0, [r3, #12]
    f8e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f8ec:	f00b b843 	b.w	1a976 <WsfMsgSend>
    f8f0:	bd38      	pop	{r3, r4, r5, pc}
    f8f2:	bf00      	nop
    f8f4:	10003c9c 	.word	0x10003c9c
    f8f8:	10003e2c 	.word	0x10003e2c

0000f8fc <DmConnSetScanInterval>:
    f8fc:	b538      	push	{r3, r4, r5, lr}
    f8fe:	4605      	mov	r5, r0
    f900:	460c      	mov	r4, r1
    f902:	f00b fe5f 	bl	1b5c4 <WsfTaskLock>
    f906:	2001      	movs	r0, #1
    f908:	f000 fb3c 	bl	ff84 <DmInitPhyToIdx>
    f90c:	4b05      	ldr	r3, [pc, #20]	; (f924 <DmConnSetScanInterval+0x28>)
    f90e:	30c0      	adds	r0, #192	; 0xc0
    f910:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
    f914:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f918:	805c      	strh	r4, [r3, #2]
    f91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f91e:	f00b be57 	b.w	1b5d0 <WsfTaskUnlock>
    f922:	bf00      	nop
    f924:	10003c9c 	.word	0x10003c9c

0000f928 <DmExtConnSetScanInterval>:
    f928:	b570      	push	{r4, r5, r6, lr}
    f92a:	2400      	movs	r4, #0
    f92c:	fa40 f304 	asr.w	r3, r0, r4
    f930:	07db      	lsls	r3, r3, #31
    f932:	d515      	bpl.n	f960 <DmExtConnSetScanInterval+0x38>
    f934:	880e      	ldrh	r6, [r1, #0]
    f936:	8815      	ldrh	r5, [r2, #0]
    f938:	f00b fe44 	bl	1b5c4 <WsfTaskLock>
    f93c:	2001      	movs	r0, #1
    f93e:	40a0      	lsls	r0, r4
    f940:	b2c0      	uxtb	r0, r0
    f942:	f000 fb1f 	bl	ff84 <DmInitPhyToIdx>
    f946:	4b08      	ldr	r3, [pc, #32]	; (f968 <DmExtConnSetScanInterval+0x40>)
    f948:	30c0      	adds	r0, #192	; 0xc0
    f94a:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    f94e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f952:	805d      	strh	r5, [r3, #2]
    f954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f958:	f00b be3a 	b.w	1b5d0 <WsfTaskUnlock>
    f95c:	3401      	adds	r4, #1
    f95e:	e7e5      	b.n	f92c <DmExtConnSetScanInterval+0x4>
    f960:	2c07      	cmp	r4, #7
    f962:	d1fb      	bne.n	f95c <DmExtConnSetScanInterval+0x34>
    f964:	bd70      	pop	{r4, r5, r6, pc}
    f966:	bf00      	nop
    f968:	10003c9c 	.word	0x10003c9c

0000f96c <DmConnSetConnSpec>:
    f96c:	4601      	mov	r1, r0
    f96e:	2001      	movs	r0, #1
    f970:	e53c      	b.n	f3ec <dmConnSetConnSpec>

0000f972 <DmExtConnSetConnSpec>:
    f972:	2300      	movs	r3, #0
    f974:	fa40 f203 	asr.w	r2, r0, r3
    f978:	07d2      	lsls	r2, r2, #31
    f97a:	d505      	bpl.n	f988 <DmExtConnSetConnSpec+0x16>
    f97c:	2001      	movs	r0, #1
    f97e:	4098      	lsls	r0, r3
    f980:	b2c0      	uxtb	r0, r0
    f982:	e533      	b.n	f3ec <dmConnSetConnSpec>
    f984:	3301      	adds	r3, #1
    f986:	e7f5      	b.n	f974 <DmExtConnSetConnSpec+0x2>
    f988:	2b07      	cmp	r3, #7
    f98a:	d1fb      	bne.n	f984 <DmExtConnSetConnSpec+0x12>
    f98c:	4770      	bx	lr

0000f98e <DmConnReadRssi>:
    f98e:	b510      	push	{r4, lr}
    f990:	4604      	mov	r4, r0
    f992:	2004      	movs	r0, #4
    f994:	f00a ffcb 	bl	1a92e <WsfMsgAlloc>
    f998:	4601      	mov	r1, r0
    f99a:	b140      	cbz	r0, f9ae <DmConnReadRssi+0x20>
    f99c:	2341      	movs	r3, #65	; 0x41
    f99e:	7083      	strb	r3, [r0, #2]
    f9a0:	4b03      	ldr	r3, [pc, #12]	; (f9b0 <DmConnReadRssi+0x22>)
    f9a2:	8004      	strh	r4, [r0, #0]
    f9a4:	7b18      	ldrb	r0, [r3, #12]
    f9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9aa:	f00a bfe4 	b.w	1a976 <WsfMsgSend>
    f9ae:	bd10      	pop	{r4, pc}
    f9b0:	10003e2c 	.word	0x10003e2c

0000f9b4 <DmRemoteConnParamReqReply>:
    f9b4:	b538      	push	{r3, r4, r5, lr}
    f9b6:	4605      	mov	r5, r0
    f9b8:	2010      	movs	r0, #16
    f9ba:	460c      	mov	r4, r1
    f9bc:	f00a ffb7 	bl	1a92e <WsfMsgAlloc>
    f9c0:	b188      	cbz	r0, f9e6 <DmRemoteConnParamReqReply+0x32>
    f9c2:	4602      	mov	r2, r0
    f9c4:	2342      	movs	r3, #66	; 0x42
    f9c6:	7083      	strb	r3, [r0, #2]
    f9c8:	f822 5b04 	strh.w	r5, [r2], #4
    f9cc:	6823      	ldr	r3, [r4, #0]
    f9ce:	6043      	str	r3, [r0, #4]
    f9d0:	6863      	ldr	r3, [r4, #4]
    f9d2:	6053      	str	r3, [r2, #4]
    f9d4:	68a3      	ldr	r3, [r4, #8]
    f9d6:	6093      	str	r3, [r2, #8]
    f9d8:	4b03      	ldr	r3, [pc, #12]	; (f9e8 <DmRemoteConnParamReqReply+0x34>)
    f9da:	4601      	mov	r1, r0
    f9dc:	7b18      	ldrb	r0, [r3, #12]
    f9de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f9e2:	f00a bfc8 	b.w	1a976 <WsfMsgSend>
    f9e6:	bd38      	pop	{r3, r4, r5, pc}
    f9e8:	10003e2c 	.word	0x10003e2c

0000f9ec <DmRemoteConnParamReqNegReply>:
    f9ec:	b538      	push	{r3, r4, r5, lr}
    f9ee:	4605      	mov	r5, r0
    f9f0:	2006      	movs	r0, #6
    f9f2:	460c      	mov	r4, r1
    f9f4:	f00a ff9b 	bl	1a92e <WsfMsgAlloc>
    f9f8:	b150      	cbz	r0, fa10 <DmRemoteConnParamReqNegReply+0x24>
    f9fa:	2343      	movs	r3, #67	; 0x43
    f9fc:	7083      	strb	r3, [r0, #2]
    f9fe:	4b05      	ldr	r3, [pc, #20]	; (fa14 <DmRemoteConnParamReqNegReply+0x28>)
    fa00:	8005      	strh	r5, [r0, #0]
    fa02:	7104      	strb	r4, [r0, #4]
    fa04:	4601      	mov	r1, r0
    fa06:	7b18      	ldrb	r0, [r3, #12]
    fa08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fa0c:	f00a bfb3 	b.w	1a976 <WsfMsgSend>
    fa10:	bd38      	pop	{r3, r4, r5, pc}
    fa12:	bf00      	nop
    fa14:	10003e2c 	.word	0x10003e2c

0000fa18 <DmConnSetDataLen>:
    fa18:	b570      	push	{r4, r5, r6, lr}
    fa1a:	4606      	mov	r6, r0
    fa1c:	2008      	movs	r0, #8
    fa1e:	460d      	mov	r5, r1
    fa20:	4614      	mov	r4, r2
    fa22:	f00a ff84 	bl	1a92e <WsfMsgAlloc>
    fa26:	b158      	cbz	r0, fa40 <DmConnSetDataLen+0x28>
    fa28:	2344      	movs	r3, #68	; 0x44
    fa2a:	7083      	strb	r3, [r0, #2]
    fa2c:	4b05      	ldr	r3, [pc, #20]	; (fa44 <DmConnSetDataLen+0x2c>)
    fa2e:	8006      	strh	r6, [r0, #0]
    fa30:	8085      	strh	r5, [r0, #4]
    fa32:	80c4      	strh	r4, [r0, #6]
    fa34:	4601      	mov	r1, r0
    fa36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fa3a:	7b18      	ldrb	r0, [r3, #12]
    fa3c:	f00a bf9b 	b.w	1a976 <WsfMsgSend>
    fa40:	bd70      	pop	{r4, r5, r6, pc}
    fa42:	bf00      	nop
    fa44:	10003e2c 	.word	0x10003e2c

0000fa48 <DmWriteAuthPayloadTimeout>:
    fa48:	b538      	push	{r3, r4, r5, lr}
    fa4a:	4605      	mov	r5, r0
    fa4c:	2006      	movs	r0, #6
    fa4e:	460c      	mov	r4, r1
    fa50:	f00a ff6d 	bl	1a92e <WsfMsgAlloc>
    fa54:	b150      	cbz	r0, fa6c <DmWriteAuthPayloadTimeout+0x24>
    fa56:	2345      	movs	r3, #69	; 0x45
    fa58:	7083      	strb	r3, [r0, #2]
    fa5a:	4b05      	ldr	r3, [pc, #20]	; (fa70 <DmWriteAuthPayloadTimeout+0x28>)
    fa5c:	8005      	strh	r5, [r0, #0]
    fa5e:	8084      	strh	r4, [r0, #4]
    fa60:	4601      	mov	r1, r0
    fa62:	7b18      	ldrb	r0, [r3, #12]
    fa64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fa68:	f00a bf85 	b.w	1a976 <WsfMsgSend>
    fa6c:	bd38      	pop	{r3, r4, r5, pc}
    fa6e:	bf00      	nop
    fa70:	10003e2c 	.word	0x10003e2c

0000fa74 <DmConnIdByHandle>:
    fa74:	b510      	push	{r4, lr}
    fa76:	4908      	ldr	r1, [pc, #32]	; (fa98 <DmConnIdByHandle+0x24>)
    fa78:	2300      	movs	r3, #0
    fa7a:	18ca      	adds	r2, r1, r3
    fa7c:	7d94      	ldrb	r4, [r2, #22]
    fa7e:	b124      	cbz	r4, fa8a <DmConnIdByHandle+0x16>
    fa80:	8994      	ldrh	r4, [r2, #12]
    fa82:	4284      	cmp	r4, r0
    fa84:	d101      	bne.n	fa8a <DmConnIdByHandle+0x16>
    fa86:	7c10      	ldrb	r0, [r2, #16]
    fa88:	bd10      	pop	{r4, pc}
    fa8a:	332c      	adds	r3, #44	; 0x2c
    fa8c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    fa90:	d1f3      	bne.n	fa7a <DmConnIdByHandle+0x6>
    fa92:	2000      	movs	r0, #0
    fa94:	e7f8      	b.n	fa88 <DmConnIdByHandle+0x14>
    fa96:	bf00      	nop
    fa98:	10003c9c 	.word	0x10003c9c

0000fa9c <DmConnInUse>:
    fa9c:	4b03      	ldr	r3, [pc, #12]	; (faac <DmConnInUse+0x10>)
    fa9e:	222c      	movs	r2, #44	; 0x2c
    faa0:	3801      	subs	r0, #1
    faa2:	fb02 3000 	mla	r0, r2, r0, r3
    faa6:	7d80      	ldrb	r0, [r0, #22]
    faa8:	4770      	bx	lr
    faaa:	bf00      	nop
    faac:	10003c9c 	.word	0x10003c9c

0000fab0 <DmConnPeerAddrType>:
    fab0:	4b03      	ldr	r3, [pc, #12]	; (fac0 <DmConnPeerAddrType+0x10>)
    fab2:	222c      	movs	r2, #44	; 0x2c
    fab4:	3801      	subs	r0, #1
    fab6:	fb02 3000 	mla	r0, r2, r0, r3
    faba:	7cc0      	ldrb	r0, [r0, #19]
    fabc:	4770      	bx	lr
    fabe:	bf00      	nop
    fac0:	10003c9c 	.word	0x10003c9c

0000fac4 <DmConnPeerAddr>:
    fac4:	4b02      	ldr	r3, [pc, #8]	; (fad0 <DmConnPeerAddr+0xc>)
    fac6:	222c      	movs	r2, #44	; 0x2c
    fac8:	3801      	subs	r0, #1
    faca:	fb02 3000 	mla	r0, r2, r0, r3
    face:	4770      	bx	lr
    fad0:	10003c9c 	.word	0x10003c9c

0000fad4 <DmConnLocalAddrType>:
    fad4:	4b03      	ldr	r3, [pc, #12]	; (fae4 <DmConnLocalAddrType+0x10>)
    fad6:	222c      	movs	r2, #44	; 0x2c
    fad8:	3801      	subs	r0, #1
    fada:	fb02 3000 	mla	r0, r2, r0, r3
    fade:	7d00      	ldrb	r0, [r0, #20]
    fae0:	4770      	bx	lr
    fae2:	bf00      	nop
    fae4:	10003c9c 	.word	0x10003c9c

0000fae8 <DmConnLocalAddr>:
    fae8:	4b03      	ldr	r3, [pc, #12]	; (faf8 <DmConnLocalAddr+0x10>)
    faea:	222c      	movs	r2, #44	; 0x2c
    faec:	3801      	subs	r0, #1
    faee:	fb02 3000 	mla	r0, r2, r0, r3
    faf2:	3006      	adds	r0, #6
    faf4:	4770      	bx	lr
    faf6:	bf00      	nop
    faf8:	10003c9c 	.word	0x10003c9c

0000fafc <DmConnPeerRpa>:
    fafc:	4b03      	ldr	r3, [pc, #12]	; (fb0c <DmConnPeerRpa+0x10>)
    fafe:	222c      	movs	r2, #44	; 0x2c
    fb00:	3801      	subs	r0, #1
    fb02:	fb02 3000 	mla	r0, r2, r0, r3
    fb06:	3020      	adds	r0, #32
    fb08:	4770      	bx	lr
    fb0a:	bf00      	nop
    fb0c:	10003c9c 	.word	0x10003c9c

0000fb10 <DmConnLocalRpa>:
    fb10:	4b03      	ldr	r3, [pc, #12]	; (fb20 <DmConnLocalRpa+0x10>)
    fb12:	222c      	movs	r2, #44	; 0x2c
    fb14:	3801      	subs	r0, #1
    fb16:	fb02 3000 	mla	r0, r2, r0, r3
    fb1a:	301a      	adds	r0, #26
    fb1c:	4770      	bx	lr
    fb1e:	bf00      	nop
    fb20:	10003c9c 	.word	0x10003c9c

0000fb24 <DmConnSecLevel>:
    fb24:	4b03      	ldr	r3, [pc, #12]	; (fb34 <DmConnSecLevel+0x10>)
    fb26:	222c      	movs	r2, #44	; 0x2c
    fb28:	3801      	subs	r0, #1
    fb2a:	fb02 3000 	mla	r0, r2, r0, r3
    fb2e:	7dc0      	ldrb	r0, [r0, #23]
    fb30:	4770      	bx	lr
    fb32:	bf00      	nop
    fb34:	10003c9c 	.word	0x10003c9c

0000fb38 <DmConnSetIdle>:
    fb38:	b570      	push	{r4, r5, r6, lr}
    fb3a:	4604      	mov	r4, r0
    fb3c:	4616      	mov	r6, r2
    fb3e:	460d      	mov	r5, r1
    fb40:	f00b fd40 	bl	1b5c4 <WsfTaskLock>
    fb44:	4b08      	ldr	r3, [pc, #32]	; (fb68 <DmConnSetIdle+0x30>)
    fb46:	1e60      	subs	r0, r4, #1
    fb48:	222c      	movs	r2, #44	; 0x2c
    fb4a:	fb02 3000 	mla	r0, r2, r0, r3
    fb4e:	7d83      	ldrb	r3, [r0, #22]
    fb50:	b123      	cbz	r3, fb5c <DmConnSetIdle+0x24>
    fb52:	89c1      	ldrh	r1, [r0, #14]
    fb54:	b936      	cbnz	r6, fb64 <DmConnSetIdle+0x2c>
    fb56:	ea21 0505 	bic.w	r5, r1, r5
    fb5a:	81c5      	strh	r5, [r0, #14]
    fb5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb60:	f00b bd36 	b.w	1b5d0 <WsfTaskUnlock>
    fb64:	430d      	orrs	r5, r1
    fb66:	e7f8      	b.n	fb5a <DmConnSetIdle+0x22>
    fb68:	10003c9c 	.word	0x10003c9c

0000fb6c <DmConnCheckIdle>:
    fb6c:	b510      	push	{r4, lr}
    fb6e:	4604      	mov	r4, r0
    fb70:	f00b fd28 	bl	1b5c4 <WsfTaskLock>
    fb74:	4804      	ldr	r0, [pc, #16]	; (fb88 <DmConnCheckIdle+0x1c>)
    fb76:	232c      	movs	r3, #44	; 0x2c
    fb78:	3c01      	subs	r4, #1
    fb7a:	fb03 0404 	mla	r4, r3, r4, r0
    fb7e:	89e4      	ldrh	r4, [r4, #14]
    fb80:	f00b fd26 	bl	1b5d0 <WsfTaskUnlock>
    fb84:	4620      	mov	r0, r4
    fb86:	bd10      	pop	{r4, pc}
    fb88:	10003c9c 	.word	0x10003c9c

0000fb8c <DmConnRole>:
    fb8c:	4b03      	ldr	r3, [pc, #12]	; (fb9c <DmConnRole+0x10>)
    fb8e:	222c      	movs	r2, #44	; 0x2c
    fb90:	3801      	subs	r0, #1
    fb92:	fb02 3000 	mla	r0, r2, r0, r3
    fb96:	7e40      	ldrb	r0, [r0, #25]
    fb98:	4770      	bx	lr
    fb9a:	bf00      	nop
    fb9c:	10003c9c 	.word	0x10003c9c

0000fba0 <dmConnSmActUpdateSlave>:
    fba0:	b530      	push	{r4, r5, lr}
    fba2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fba4:	079a      	lsls	r2, r3, #30
    fba6:	b085      	sub	sp, #20
    fba8:	4604      	mov	r4, r0
    fbaa:	460d      	mov	r5, r1
    fbac:	d509      	bpl.n	fbc2 <dmConnSmActUpdateSlave+0x22>
    fbae:	f006 f93d 	bl	15e2c <HciGetLeSupFeat>
    fbb2:	0783      	lsls	r3, r0, #30
    fbb4:	d505      	bpl.n	fbc2 <dmConnSmActUpdateSlave+0x22>
    fbb6:	1d29      	adds	r1, r5, #4
    fbb8:	89a0      	ldrh	r0, [r4, #12]
    fbba:	f004 fc35 	bl	14428 <HciLeConnUpdateCmd>
    fbbe:	b005      	add	sp, #20
    fbc0:	bd30      	pop	{r4, r5, pc}
    fbc2:	7c63      	ldrb	r3, [r4, #17]
    fbc4:	89a0      	ldrh	r0, [r4, #12]
    fbc6:	b92b      	cbnz	r3, fbd4 <dmConnSmActUpdateSlave+0x34>
    fbc8:	2301      	movs	r3, #1
    fbca:	7463      	strb	r3, [r4, #17]
    fbcc:	1d29      	adds	r1, r5, #4
    fbce:	f001 f865 	bl	10c9c <L2cDmConnUpdateReq>
    fbd2:	e7f4      	b.n	fbbe <dmConnSmActUpdateSlave+0x1e>
    fbd4:	7c23      	ldrb	r3, [r4, #16]
    fbd6:	f8ad 3000 	strh.w	r3, [sp]
    fbda:	f640 4329 	movw	r3, #3113	; 0xc29
    fbde:	f8ad 3002 	strh.w	r3, [sp, #2]
    fbe2:	230c      	movs	r3, #12
    fbe4:	f88d 3004 	strb.w	r3, [sp, #4]
    fbe8:	4b03      	ldr	r3, [pc, #12]	; (fbf8 <dmConnSmActUpdateSlave+0x58>)
    fbea:	f8ad 0006 	strh.w	r0, [sp, #6]
    fbee:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    fbf2:	4668      	mov	r0, sp
    fbf4:	4798      	blx	r3
    fbf6:	e7e2      	b.n	fbbe <dmConnSmActUpdateSlave+0x1e>
    fbf8:	10003c9c 	.word	0x10003c9c

0000fbfc <dmConnSmActL2cUpdateCnf>:
    fbfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fbfe:	7c43      	ldrb	r3, [r0, #17]
    fc00:	b1b3      	cbz	r3, fc30 <dmConnSmActL2cUpdateCnf+0x34>
    fc02:	2300      	movs	r3, #0
    fc04:	7443      	strb	r3, [r0, #17]
    fc06:	888b      	ldrh	r3, [r1, #4]
    fc08:	b193      	cbz	r3, fc30 <dmConnSmActL2cUpdateCnf+0x34>
    fc0a:	b2db      	uxtb	r3, r3
    fc0c:	f88d 3003 	strb.w	r3, [sp, #3]
    fc10:	f88d 3004 	strb.w	r3, [sp, #4]
    fc14:	4b08      	ldr	r3, [pc, #32]	; (fc38 <dmConnSmActL2cUpdateCnf+0x3c>)
    fc16:	8982      	ldrh	r2, [r0, #12]
    fc18:	7c01      	ldrb	r1, [r0, #16]
    fc1a:	f8ad 1000 	strh.w	r1, [sp]
    fc1e:	2029      	movs	r0, #41	; 0x29
    fc20:	f88d 0002 	strb.w	r0, [sp, #2]
    fc24:	f8ad 2006 	strh.w	r2, [sp, #6]
    fc28:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    fc2c:	4668      	mov	r0, sp
    fc2e:	4798      	blx	r3
    fc30:	b005      	add	sp, #20
    fc32:	f85d fb04 	ldr.w	pc, [sp], #4
    fc36:	bf00      	nop
    fc38:	10003c9c 	.word	0x10003c9c

0000fc3c <DmL2cConnUpdateCnf>:
    fc3c:	b513      	push	{r0, r1, r4, lr}
    fc3e:	460c      	mov	r4, r1
    fc40:	f7ff fc13 	bl	f46a <dmConnCcbByHandle>
    fc44:	b138      	cbz	r0, fc56 <DmL2cConnUpdateCnf+0x1a>
    fc46:	2336      	movs	r3, #54	; 0x36
    fc48:	4669      	mov	r1, sp
    fc4a:	f88d 3002 	strb.w	r3, [sp, #2]
    fc4e:	f8ad 4004 	strh.w	r4, [sp, #4]
    fc52:	f000 f84f 	bl	fcf4 <dmConnSmExecute>
    fc56:	b002      	add	sp, #8
    fc58:	bd10      	pop	{r4, pc}

0000fc5a <DmConnAccept>:
    fc5a:	b510      	push	{r4, lr}
    fc5c:	b086      	sub	sp, #24
    fc5e:	2401      	movs	r4, #1
    fc60:	9404      	str	r4, [sp, #16]
    fc62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fc64:	9403      	str	r4, [sp, #12]
    fc66:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    fc6a:	9402      	str	r4, [sp, #8]
    fc6c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    fc70:	e9cd 3400 	strd	r3, r4, [sp]
    fc74:	4613      	mov	r3, r2
    fc76:	460a      	mov	r2, r1
    fc78:	2100      	movs	r1, #0
    fc7a:	f7ff fd85 	bl	f788 <dmConnOpenAccept>
    fc7e:	b006      	add	sp, #24
    fc80:	bd10      	pop	{r4, pc}
    fc82:	bf00      	nop

0000fc84 <dmConnSmActAccept>:
    fc84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fc86:	f101 050b 	add.w	r5, r1, #11
    fc8a:	798c      	ldrb	r4, [r1, #6]
    fc8c:	7a8b      	ldrb	r3, [r1, #10]
    fc8e:	890a      	ldrh	r2, [r1, #8]
    fc90:	7948      	ldrb	r0, [r1, #5]
    fc92:	9501      	str	r5, [sp, #4]
    fc94:	7c49      	ldrb	r1, [r1, #17]
    fc96:	9100      	str	r1, [sp, #0]
    fc98:	4621      	mov	r1, r4
    fc9a:	f7ff fb1a 	bl	f2d2 <dmAdvStartDirected>
    fc9e:	b003      	add	sp, #12
    fca0:	bd30      	pop	{r4, r5, pc}

0000fca2 <dmConnSmActCancelAccept>:
    fca2:	b538      	push	{r3, r4, r5, lr}
    fca4:	4604      	mov	r4, r0
    fca6:	460d      	mov	r5, r1
    fca8:	f7ff fb28 	bl	f2fc <dmAdvStopDirected>
    fcac:	4629      	mov	r1, r5
    fcae:	4620      	mov	r0, r4
    fcb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fcb4:	f7ff bd5a 	b.w	f76c <dmConnSmActConnFailed>

0000fcb8 <dmConnSmActConnAccepted>:
    fcb8:	b538      	push	{r3, r4, r5, lr}
    fcba:	4604      	mov	r4, r0
    fcbc:	460d      	mov	r5, r1
    fcbe:	f7ff fb29 	bl	f314 <dmAdvConnected>
    fcc2:	4629      	mov	r1, r5
    fcc4:	4620      	mov	r0, r4
    fcc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fcca:	f7ff bd19 	b.w	f700 <dmConnSmActConnOpened>

0000fcce <dmConnSmActAcceptFailed>:
    fcce:	b538      	push	{r3, r4, r5, lr}
    fcd0:	4604      	mov	r4, r0
    fcd2:	460d      	mov	r5, r1
    fcd4:	f7ff fb2a 	bl	f32c <dmAdvConnectFailed>
    fcd8:	4629      	mov	r1, r5
    fcda:	4620      	mov	r0, r4
    fcdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fce0:	f7ff bd44 	b.w	f76c <dmConnSmActConnFailed>

0000fce4 <DmConnSlaveInit>:
    fce4:	4b01      	ldr	r3, [pc, #4]	; (fcec <DmConnSlaveInit+0x8>)
    fce6:	4a02      	ldr	r2, [pc, #8]	; (fcf0 <DmConnSlaveInit+0xc>)
    fce8:	609a      	str	r2, [r3, #8]
    fcea:	4770      	bx	lr
    fcec:	10003e20 	.word	0x10003e20
    fcf0:	00025dbc 	.word	0x00025dbc

0000fcf4 <dmConnSmExecute>:
    fcf4:	788b      	ldrb	r3, [r1, #2]
    fcf6:	7d42      	ldrb	r2, [r0, #21]
    fcf8:	b470      	push	{r4, r5, r6}
    fcfa:	f003 030f 	and.w	r3, r3, #15
    fcfe:	4d0c      	ldr	r5, [pc, #48]	; (fd30 <dmConnSmExecute+0x3c>)
    fd00:	260d      	movs	r6, #13
    fd02:	fb06 3202 	mla	r2, r6, r2, r3
    fd06:	eb05 0342 	add.w	r3, r5, r2, lsl #1
    fd0a:	f815 2012 	ldrb.w	r2, [r5, r2, lsl #1]
    fd0e:	785b      	ldrb	r3, [r3, #1]
    fd10:	7542      	strb	r2, [r0, #21]
    fd12:	091c      	lsrs	r4, r3, #4
    fd14:	4a07      	ldr	r2, [pc, #28]	; (fd34 <dmConnSmExecute+0x40>)
    fd16:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    fd1a:	b12a      	cbz	r2, fd28 <dmConnSmExecute+0x34>
    fd1c:	f003 030f 	and.w	r3, r3, #15
    fd20:	bc70      	pop	{r4, r5, r6}
    fd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd26:	4718      	bx	r3
    fd28:	bc70      	pop	{r4, r5, r6}
    fd2a:	f7ff bb1d 	b.w	f368 <dmConnSmActNone>
    fd2e:	bf00      	nop
    fd30:	00025dd4 	.word	0x00025dd4
    fd34:	10003e20 	.word	0x10003e20

0000fd38 <dmDevHciHandler>:
    fd38:	7882      	ldrb	r2, [r0, #2]
    fd3a:	4603      	mov	r3, r0
    fd3c:	b92a      	cbnz	r2, fd4a <dmDevHciHandler+0x12>
    fd3e:	490b      	ldr	r1, [pc, #44]	; (fd6c <dmDevHciHandler+0x34>)
    fd40:	740a      	strb	r2, [r1, #16]
    fd42:	688b      	ldr	r3, [r1, #8]
    fd44:	2220      	movs	r2, #32
    fd46:	7082      	strb	r2, [r0, #2]
    fd48:	4718      	bx	r3
    fd4a:	2a13      	cmp	r2, #19
    fd4c:	d104      	bne.n	fd58 <dmDevHciHandler+0x20>
    fd4e:	2253      	movs	r2, #83	; 0x53
    fd50:	709a      	strb	r2, [r3, #2]
    fd52:	4b06      	ldr	r3, [pc, #24]	; (fd6c <dmDevHciHandler+0x34>)
    fd54:	689b      	ldr	r3, [r3, #8]
    fd56:	e7f7      	b.n	fd48 <dmDevHciHandler+0x10>
    fd58:	2a14      	cmp	r2, #20
    fd5a:	d101      	bne.n	fd60 <dmDevHciHandler+0x28>
    fd5c:	2255      	movs	r2, #85	; 0x55
    fd5e:	e7f7      	b.n	fd50 <dmDevHciHandler+0x18>
    fd60:	2a12      	cmp	r2, #18
    fd62:	d101      	bne.n	fd68 <dmDevHciHandler+0x30>
    fd64:	2254      	movs	r2, #84	; 0x54
    fd66:	e7f3      	b.n	fd50 <dmDevHciHandler+0x18>
    fd68:	4770      	bx	lr
    fd6a:	bf00      	nop
    fd6c:	10003e2c 	.word	0x10003e2c

0000fd70 <dmDevActReset>:
    fd70:	b538      	push	{r3, r4, r5, lr}
    fd72:	4b08      	ldr	r3, [pc, #32]	; (fd94 <dmDevActReset+0x24>)
    fd74:	4d08      	ldr	r5, [pc, #32]	; (fd98 <dmDevActReset+0x28>)
    fd76:	2201      	movs	r2, #1
    fd78:	741a      	strb	r2, [r3, #16]
    fd7a:	2400      	movs	r4, #0
    fd7c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    fd80:	3401      	adds	r4, #1
    fd82:	681b      	ldr	r3, [r3, #0]
    fd84:	4798      	blx	r3
    fd86:	2c0c      	cmp	r4, #12
    fd88:	d1f8      	bne.n	fd7c <dmDevActReset+0xc>
    fd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fd8e:	f005 be9d 	b.w	15acc <HciResetSequence>
    fd92:	bf00      	nop
    fd94:	10003e2c 	.word	0x10003e2c
    fd98:	10002b54 	.word	0x10002b54

0000fd9c <dmDevMsgHandler>:
    fd9c:	f7ff bfe8 	b.w	fd70 <dmDevActReset>

0000fda0 <DmDevReset>:
    fda0:	b508      	push	{r3, lr}
    fda2:	2004      	movs	r0, #4
    fda4:	f00a fdc3 	bl	1a92e <WsfMsgAlloc>
    fda8:	4601      	mov	r1, r0
    fdaa:	b138      	cbz	r0, fdbc <DmDevReset+0x1c>
    fdac:	2370      	movs	r3, #112	; 0x70
    fdae:	7083      	strb	r3, [r0, #2]
    fdb0:	4b03      	ldr	r3, [pc, #12]	; (fdc0 <DmDevReset+0x20>)
    fdb2:	7b18      	ldrb	r0, [r3, #12]
    fdb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fdb8:	f00a bddd 	b.w	1a976 <WsfMsgSend>
    fdbc:	bd08      	pop	{r3, pc}
    fdbe:	bf00      	nop
    fdc0:	10003e2c 	.word	0x10003e2c

0000fdc4 <DmDevSetRandAddr>:
    fdc4:	b510      	push	{r4, lr}
    fdc6:	4601      	mov	r1, r0
    fdc8:	4604      	mov	r4, r0
    fdca:	4804      	ldr	r0, [pc, #16]	; (fddc <DmDevSetRandAddr+0x18>)
    fdcc:	f009 ff1a 	bl	19c04 <BdaCpy>
    fdd0:	4620      	mov	r0, r4
    fdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fdd6:	f004 bfe3 	b.w	14da0 <HciLeSetRandAddrCmd>
    fdda:	bf00      	nop
    fddc:	10003e2c 	.word	0x10003e2c

0000fde0 <DmDevWhiteListAdd>:
    fde0:	f004 baea 	b.w	143b8 <HciLeAddDevWhiteListCmd>

0000fde4 <DmDevWhiteListRemove>:
    fde4:	f004 bee5 	b.w	14bb2 <HciLeRemoveDevWhiteListCmd>

0000fde8 <DmDevWhiteListClear>:
    fde8:	f004 bb0b 	b.w	14402 <HciLeClearWhiteListCmd>

0000fdec <dmDevSetFilterPolicy>:
    fdec:	2901      	cmp	r1, #1
    fdee:	d00b      	beq.n	fe08 <dmDevSetFilterPolicy+0x1c>
    fdf0:	d303      	bcc.n	fdfa <dmDevSetFilterPolicy+0xe>
    fdf2:	2902      	cmp	r1, #2
    fdf4:	d00d      	beq.n	fe12 <dmDevSetFilterPolicy+0x26>
    fdf6:	2000      	movs	r0, #0
    fdf8:	4770      	bx	lr
    fdfa:	2a03      	cmp	r2, #3
    fdfc:	d8fb      	bhi.n	fdf6 <dmDevSetFilterPolicy+0xa>
    fdfe:	4b07      	ldr	r3, [pc, #28]	; (fe1c <dmDevSetFilterPolicy+0x30>)
    fe00:	4418      	add	r0, r3
    fe02:	7442      	strb	r2, [r0, #17]
    fe04:	2001      	movs	r0, #1
    fe06:	4770      	bx	lr
    fe08:	2a03      	cmp	r2, #3
    fe0a:	d8f4      	bhi.n	fdf6 <dmDevSetFilterPolicy+0xa>
    fe0c:	4b03      	ldr	r3, [pc, #12]	; (fe1c <dmDevSetFilterPolicy+0x30>)
    fe0e:	749a      	strb	r2, [r3, #18]
    fe10:	e7f8      	b.n	fe04 <dmDevSetFilterPolicy+0x18>
    fe12:	2a01      	cmp	r2, #1
    fe14:	d8ef      	bhi.n	fdf6 <dmDevSetFilterPolicy+0xa>
    fe16:	4b01      	ldr	r3, [pc, #4]	; (fe1c <dmDevSetFilterPolicy+0x30>)
    fe18:	74da      	strb	r2, [r3, #19]
    fe1a:	e7f3      	b.n	fe04 <dmDevSetFilterPolicy+0x18>
    fe1c:	10003e2c 	.word	0x10003e2c

0000fe20 <DmDevSetFilterPolicy>:
    fe20:	460a      	mov	r2, r1
    fe22:	4601      	mov	r1, r0
    fe24:	2000      	movs	r0, #0
    fe26:	f7ff bfe1 	b.w	fdec <dmDevSetFilterPolicy>

0000fe2a <DmDevSetExtFilterPolicy>:
    fe2a:	f7ff bfdf 	b.w	fdec <dmDevSetFilterPolicy>

0000fe2e <DmDevVsInit>:
    fe2e:	f008 b932 	b.w	18096 <HciVsInit>
    fe32:	bf00      	nop

0000fe34 <dmHciEvtCback>:
    fe34:	4a06      	ldr	r2, [pc, #24]	; (fe50 <dmHciEvtCback+0x1c>)
    fe36:	7883      	ldrb	r3, [r0, #2]
    fe38:	7c12      	ldrb	r2, [r2, #16]
    fe3a:	b102      	cbz	r2, fe3e <dmHciEvtCback+0xa>
    fe3c:	b933      	cbnz	r3, fe4c <dmHciEvtCback+0x18>
    fe3e:	4a05      	ldr	r2, [pc, #20]	; (fe54 <dmHciEvtCback+0x20>)
    fe40:	5cd2      	ldrb	r2, [r2, r3]
    fe42:	4b05      	ldr	r3, [pc, #20]	; (fe58 <dmHciEvtCback+0x24>)
    fe44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fe48:	685b      	ldr	r3, [r3, #4]
    fe4a:	4718      	bx	r3
    fe4c:	4770      	bx	lr
    fe4e:	bf00      	nop
    fe50:	10003e2c 	.word	0x10003e2c
    fe54:	00025e64 	.word	0x00025e64
    fe58:	10002b54 	.word	0x10002b54

0000fe5c <dmEmptyReset>:
    fe5c:	4770      	bx	lr

0000fe5e <dmEmptyHandler>:
    fe5e:	4770      	bx	lr

0000fe60 <DmRegister>:
    fe60:	b510      	push	{r4, lr}
    fe62:	4b0a      	ldr	r3, [pc, #40]	; (fe8c <DmRegister+0x2c>)
    fe64:	4c0a      	ldr	r4, [pc, #40]	; (fe90 <DmRegister+0x30>)
    fe66:	6a1a      	ldr	r2, [r3, #32]
    fe68:	4b0a      	ldr	r3, [pc, #40]	; (fe94 <DmRegister+0x34>)
    fe6a:	60a0      	str	r0, [r4, #8]
    fe6c:	429a      	cmp	r2, r3
    fe6e:	b09a      	sub	sp, #104	; 0x68
    fe70:	d00a      	beq.n	fe88 <DmRegister+0x28>
    fe72:	f005 ffeb 	bl	15e4c <HciGetMaxRxAclLen>
    fe76:	2844      	cmp	r0, #68	; 0x44
    fe78:	d806      	bhi.n	fe88 <DmRegister+0x28>
    fe7a:	a81a      	add	r0, sp, #104	; 0x68
    fe7c:	f04f 73a9 	mov.w	r3, #22151168	; 0x1520000
    fe80:	f840 3d64 	str.w	r3, [r0, #-100]!
    fe84:	68a3      	ldr	r3, [r4, #8]
    fe86:	4798      	blx	r3
    fe88:	b01a      	add	sp, #104	; 0x68
    fe8a:	bd10      	pop	{r4, pc}
    fe8c:	10002b54 	.word	0x10002b54
    fe90:	10003e2c 	.word	0x10003e2c
    fe94:	00025ea0 	.word	0x00025ea0

0000fe98 <DmFindAdType>:
    fe98:	b530      	push	{r4, r5, lr}
    fe9a:	b121      	cbz	r1, fea6 <DmFindAdType+0xe>
    fe9c:	7813      	ldrb	r3, [r2, #0]
    fe9e:	b173      	cbz	r3, febe <DmFindAdType+0x26>
    fea0:	b29c      	uxth	r4, r3
    fea2:	428c      	cmp	r4, r1
    fea4:	d302      	bcc.n	feac <DmFindAdType+0x14>
    fea6:	2200      	movs	r2, #0
    fea8:	4610      	mov	r0, r2
    feaa:	bd30      	pop	{r4, r5, pc}
    feac:	7855      	ldrb	r5, [r2, #1]
    feae:	4285      	cmp	r5, r0
    feb0:	d0fa      	beq.n	fea8 <DmFindAdType+0x10>
    feb2:	43e4      	mvns	r4, r4
    feb4:	4421      	add	r1, r4
    feb6:	3301      	adds	r3, #1
    feb8:	b289      	uxth	r1, r1
    feba:	441a      	add	r2, r3
    febc:	e7ed      	b.n	fe9a <DmFindAdType+0x2>
    febe:	461a      	mov	r2, r3
    fec0:	e7f2      	b.n	fea8 <DmFindAdType+0x10>

0000fec2 <DmHandlerInit>:
    fec2:	4b04      	ldr	r3, [pc, #16]	; (fed4 <DmHandlerInit+0x12>)
    fec4:	2200      	movs	r2, #0
    fec6:	7318      	strb	r0, [r3, #12]
    fec8:	4803      	ldr	r0, [pc, #12]	; (fed8 <DmHandlerInit+0x16>)
    feca:	751a      	strb	r2, [r3, #20]
    fecc:	741a      	strb	r2, [r3, #16]
    fece:	f00a bb9b 	b.w	1a608 <HciEvtRegister>
    fed2:	bf00      	nop
    fed4:	10003e2c 	.word	0x10003e2c
    fed8:	0000fe35 	.word	0x0000fe35

0000fedc <DmHandler>:
    fedc:	b151      	cbz	r1, fef4 <DmHandler+0x18>
    fede:	4b06      	ldr	r3, [pc, #24]	; (fef8 <DmHandler+0x1c>)
    fee0:	7c1b      	ldrb	r3, [r3, #16]
    fee2:	b93b      	cbnz	r3, fef4 <DmHandler+0x18>
    fee4:	788b      	ldrb	r3, [r1, #2]
    fee6:	4a05      	ldr	r2, [pc, #20]	; (fefc <DmHandler+0x20>)
    fee8:	091b      	lsrs	r3, r3, #4
    feea:	4608      	mov	r0, r1
    feec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fef0:	689b      	ldr	r3, [r3, #8]
    fef2:	4718      	bx	r3
    fef4:	4770      	bx	lr
    fef6:	bf00      	nop
    fef8:	10003e2c 	.word	0x10003e2c
    fefc:	10002b54 	.word	0x10002b54

0000ff00 <DmLlPrivEnabled>:
    ff00:	4b01      	ldr	r3, [pc, #4]	; (ff08 <DmLlPrivEnabled+0x8>)
    ff02:	7d18      	ldrb	r0, [r3, #20]
    ff04:	4770      	bx	lr
    ff06:	bf00      	nop
    ff08:	10003e2c 	.word	0x10003e2c

0000ff0c <DmLlAddrType>:
    ff0c:	4b04      	ldr	r3, [pc, #16]	; (ff20 <DmLlAddrType+0x14>)
    ff0e:	7d1b      	ldrb	r3, [r3, #20]
    ff10:	b12b      	cbz	r3, ff1e <DmLlAddrType+0x12>
    ff12:	b118      	cbz	r0, ff1c <DmLlAddrType+0x10>
    ff14:	2801      	cmp	r0, #1
    ff16:	bf08      	it	eq
    ff18:	2003      	moveq	r0, #3
    ff1a:	4770      	bx	lr
    ff1c:	2002      	movs	r0, #2
    ff1e:	4770      	bx	lr
    ff20:	10003e2c 	.word	0x10003e2c

0000ff24 <DmHostAddrType>:
    ff24:	4b05      	ldr	r3, [pc, #20]	; (ff3c <DmHostAddrType+0x18>)
    ff26:	7d1b      	ldrb	r3, [r3, #20]
    ff28:	b133      	cbz	r3, ff38 <DmHostAddrType+0x14>
    ff2a:	2802      	cmp	r0, #2
    ff2c:	d003      	beq.n	ff36 <DmHostAddrType+0x12>
    ff2e:	2803      	cmp	r0, #3
    ff30:	bf08      	it	eq
    ff32:	2001      	moveq	r0, #1
    ff34:	4770      	bx	lr
    ff36:	2000      	movs	r0, #0
    ff38:	4770      	bx	lr
    ff3a:	bf00      	nop
    ff3c:	10003e2c 	.word	0x10003e2c

0000ff40 <DmSizeOfEvt>:
    ff40:	7883      	ldrb	r3, [r0, #2]
    ff42:	3b20      	subs	r3, #32
    ff44:	b2da      	uxtb	r2, r3
    ff46:	2a35      	cmp	r2, #53	; 0x35
    ff48:	bf9d      	ittte	ls
    ff4a:	4a03      	ldrls	r2, [pc, #12]	; (ff58 <DmSizeOfEvt+0x18>)
    ff4c:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
    ff50:	f8b3 0048 	ldrhls.w	r0, [r3, #72]	; 0x48
    ff54:	2004      	movhi	r0, #4
    ff56:	4770      	bx	lr
    ff58:	00025e64 	.word	0x00025e64

0000ff5c <DmScanPhyToIdx>:
    ff5c:	2000      	movs	r0, #0
    ff5e:	4770      	bx	lr

0000ff60 <dmInitPhyToIdx>:
    ff60:	2801      	cmp	r0, #1
    ff62:	d00d      	beq.n	ff80 <dmInitPhyToIdx+0x20>
    ff64:	2802      	cmp	r0, #2
    ff66:	d104      	bne.n	ff72 <dmInitPhyToIdx+0x12>
    ff68:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    ff6c:	bf18      	it	ne
    ff6e:	2001      	movne	r0, #1
    ff70:	4770      	bx	lr
    ff72:	2901      	cmp	r1, #1
    ff74:	d004      	beq.n	ff80 <dmInitPhyToIdx+0x20>
    ff76:	2902      	cmp	r1, #2
    ff78:	bf0c      	ite	eq
    ff7a:	2001      	moveq	r0, #1
    ff7c:	2002      	movne	r0, #2
    ff7e:	4770      	bx	lr
    ff80:	2000      	movs	r0, #0
    ff82:	4770      	bx	lr

0000ff84 <DmInitPhyToIdx>:
    ff84:	2000      	movs	r0, #0
    ff86:	4770      	bx	lr

0000ff88 <dmPrivMsgHandler>:
    ff88:	7883      	ldrb	r3, [r0, #2]
    ff8a:	4a03      	ldr	r2, [pc, #12]	; (ff98 <dmPrivMsgHandler+0x10>)
    ff8c:	f003 030f 	and.w	r3, r3, #15
    ff90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff94:	4718      	bx	r3
    ff96:	bf00      	nop
    ff98:	00025f18 	.word	0x00025f18

0000ff9c <dmPrivReset>:
    ff9c:	4a02      	ldr	r2, [pc, #8]	; (ffa8 <dmPrivReset+0xc>)
    ff9e:	2300      	movs	r3, #0
    ffa0:	70d3      	strb	r3, [r2, #3]
    ffa2:	4a02      	ldr	r2, [pc, #8]	; (ffac <dmPrivReset+0x10>)
    ffa4:	7513      	strb	r3, [r2, #20]
    ffa6:	4770      	bx	lr
    ffa8:	10003e44 	.word	0x10003e44
    ffac:	10003e2c 	.word	0x10003e2c

0000ffb0 <dmPrivActAesCmpl>:
    ffb0:	b510      	push	{r4, lr}
    ffb2:	6841      	ldr	r1, [r0, #4]
    ffb4:	4604      	mov	r4, r0
    ffb6:	2203      	movs	r2, #3
    ffb8:	4809      	ldr	r0, [pc, #36]	; (ffe0 <dmPrivActAesCmpl+0x30>)
    ffba:	f7fc f8a1 	bl	c100 <memcmp>
    ffbe:	b958      	cbnz	r0, ffd8 <dmPrivActAesCmpl+0x28>
    ffc0:	70e0      	strb	r0, [r4, #3]
    ffc2:	4b07      	ldr	r3, [pc, #28]	; (ffe0 <dmPrivActAesCmpl+0x30>)
    ffc4:	2200      	movs	r2, #0
    ffc6:	70da      	strb	r2, [r3, #3]
    ffc8:	2337      	movs	r3, #55	; 0x37
    ffca:	70a3      	strb	r3, [r4, #2]
    ffcc:	4b05      	ldr	r3, [pc, #20]	; (ffe4 <dmPrivActAesCmpl+0x34>)
    ffce:	4620      	mov	r0, r4
    ffd0:	689b      	ldr	r3, [r3, #8]
    ffd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffd6:	4718      	bx	r3
    ffd8:	2305      	movs	r3, #5
    ffda:	70e3      	strb	r3, [r4, #3]
    ffdc:	e7f1      	b.n	ffc2 <dmPrivActAesCmpl+0x12>
    ffde:	bf00      	nop
    ffe0:	10003e44 	.word	0x10003e44
    ffe4:	10003e2c 	.word	0x10003e2c

0000ffe8 <dmPrivActAddDevToResList>:
    ffe8:	b510      	push	{r4, lr}
    ffea:	f100 031b 	add.w	r3, r0, #27
    ffee:	4604      	mov	r4, r0
    fff0:	f100 020b 	add.w	r2, r0, #11
    fff4:	1d41      	adds	r1, r0, #5
    fff6:	7900      	ldrb	r0, [r0, #4]
    fff8:	f005 f8c5 	bl	15186 <HciLeAddDeviceToResolvingListCmd>
    fffc:	4b03      	ldr	r3, [pc, #12]	; (1000c <dmPrivActAddDevToResList+0x24>)
    fffe:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   10002:	721a      	strb	r2, [r3, #8]
   10004:	8822      	ldrh	r2, [r4, #0]
   10006:	809a      	strh	r2, [r3, #4]
   10008:	bd10      	pop	{r4, pc}
   1000a:	bf00      	nop
   1000c:	10003e44 	.word	0x10003e44

00010010 <dmPrivActRemDevFromResList>:
   10010:	b510      	push	{r4, lr}
   10012:	1d41      	adds	r1, r0, #5
   10014:	4604      	mov	r4, r0
   10016:	7900      	ldrb	r0, [r0, #4]
   10018:	f005 f8e9 	bl	151ee <HciLeRemoveDeviceFromResolvingList>
   1001c:	4b01      	ldr	r3, [pc, #4]	; (10024 <dmPrivActRemDevFromResList+0x14>)
   1001e:	8822      	ldrh	r2, [r4, #0]
   10020:	80da      	strh	r2, [r3, #6]
   10022:	bd10      	pop	{r4, pc}
   10024:	10003e44 	.word	0x10003e44

00010028 <dmPrivActClearResList>:
   10028:	f005 b906 	b.w	15238 <HciLeClearResolvingList>

0001002c <dmPrivActSetPrivacyMode>:
   1002c:	7ac2      	ldrb	r2, [r0, #11]
   1002e:	1d41      	adds	r1, r0, #5
   10030:	7900      	ldrb	r0, [r0, #4]
   10032:	f005 b9b4 	b.w	1539e <HciLeSetPrivacyModeCmd>

00010036 <dmPrivActResolveAddr>:
   10036:	b570      	push	{r4, r5, r6, lr}
   10038:	4d15      	ldr	r5, [pc, #84]	; (10090 <dmPrivActResolveAddr+0x5a>)
   1003a:	4e16      	ldr	r6, [pc, #88]	; (10094 <dmPrivActResolveAddr+0x5e>)
   1003c:	78e9      	ldrb	r1, [r5, #3]
   1003e:	b086      	sub	sp, #24
   10040:	4604      	mov	r4, r0
   10042:	b9f9      	cbnz	r1, 10084 <dmPrivActResolveAddr+0x4e>
   10044:	4603      	mov	r3, r0
   10046:	f833 2f14 	ldrh.w	r2, [r3, #20]!
   1004a:	802a      	strh	r2, [r5, #0]
   1004c:	789b      	ldrb	r3, [r3, #2]
   1004e:	70ab      	strb	r3, [r5, #2]
   10050:	4603      	mov	r3, r0
   10052:	f10d 000b 	add.w	r0, sp, #11
   10056:	f833 2f17 	ldrh.w	r2, [r3, #23]!
   1005a:	f8ad 2008 	strh.w	r2, [sp, #8]
   1005e:	789b      	ldrb	r3, [r3, #2]
   10060:	f88d 300a 	strb.w	r3, [sp, #10]
   10064:	220d      	movs	r2, #13
   10066:	f7fc f979 	bl	c35c <memset>
   1006a:	2301      	movs	r3, #1
   1006c:	4620      	mov	r0, r4
   1006e:	2161      	movs	r1, #97	; 0x61
   10070:	70eb      	strb	r3, [r5, #3]
   10072:	f830 3b04 	ldrh.w	r3, [r0], #4
   10076:	7b32      	ldrb	r2, [r6, #12]
   10078:	9100      	str	r1, [sp, #0]
   1007a:	a902      	add	r1, sp, #8
   1007c:	f008 f838 	bl	180f0 <SecAes>
   10080:	b006      	add	sp, #24
   10082:	bd70      	pop	{r4, r5, r6, pc}
   10084:	f240 7337 	movw	r3, #1847	; 0x737
   10088:	8043      	strh	r3, [r0, #2]
   1008a:	68b3      	ldr	r3, [r6, #8]
   1008c:	4798      	blx	r3
   1008e:	e7f7      	b.n	10080 <dmPrivActResolveAddr+0x4a>
   10090:	10003e44 	.word	0x10003e44
   10094:	10003e2c 	.word	0x10003e2c

00010098 <dmPrivActSetAddrResEnable>:
   10098:	b510      	push	{r4, lr}
   1009a:	7904      	ldrb	r4, [r0, #4]
   1009c:	4620      	mov	r0, r4
   1009e:	f005 f93b 	bl	15318 <HciLeSetAddrResolutionEnable>
   100a2:	4b01      	ldr	r3, [pc, #4]	; (100a8 <dmPrivActSetAddrResEnable+0x10>)
   100a4:	725c      	strb	r4, [r3, #9]
   100a6:	bd10      	pop	{r4, pc}
   100a8:	10003e44 	.word	0x10003e44

000100ac <dmPrivHciHandler>:
   100ac:	7883      	ldrb	r3, [r0, #2]
   100ae:	3b15      	subs	r3, #21
   100b0:	b570      	push	{r4, r5, r6, lr}
   100b2:	4604      	mov	r4, r0
   100b4:	2b05      	cmp	r3, #5
   100b6:	d83f      	bhi.n	10138 <dmPrivHciHandler+0x8c>
   100b8:	e8df f003 	tbb	[pc, r3]
   100bc:	2f201a03 	.word	0x2f201a03
   100c0:	3432      	.short	0x3432
   100c2:	4d1e      	ldr	r5, [pc, #120]	; (1013c <dmPrivHciHandler+0x90>)
   100c4:	2339      	movs	r3, #57	; 0x39
   100c6:	7083      	strb	r3, [r0, #2]
   100c8:	88ab      	ldrh	r3, [r5, #4]
   100ca:	8003      	strh	r3, [r0, #0]
   100cc:	78c3      	ldrb	r3, [r0, #3]
   100ce:	b94b      	cbnz	r3, 100e4 <dmPrivHciHandler+0x38>
   100d0:	7a2b      	ldrb	r3, [r5, #8]
   100d2:	b13b      	cbz	r3, 100e4 <dmPrivHciHandler+0x38>
   100d4:	4b1a      	ldr	r3, [pc, #104]	; (10140 <dmPrivHciHandler+0x94>)
   100d6:	7d1b      	ldrb	r3, [r3, #20]
   100d8:	b923      	cbnz	r3, 100e4 <dmPrivHciHandler+0x38>
   100da:	2001      	movs	r0, #1
   100dc:	f005 f91c 	bl	15318 <HciLeSetAddrResolutionEnable>
   100e0:	2301      	movs	r3, #1
   100e2:	726b      	strb	r3, [r5, #9]
   100e4:	4b16      	ldr	r3, [pc, #88]	; (10140 <dmPrivHciHandler+0x94>)
   100e6:	4620      	mov	r0, r4
   100e8:	689b      	ldr	r3, [r3, #8]
   100ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   100ee:	4718      	bx	r3
   100f0:	233a      	movs	r3, #58	; 0x3a
   100f2:	7083      	strb	r3, [r0, #2]
   100f4:	4b11      	ldr	r3, [pc, #68]	; (1013c <dmPrivHciHandler+0x90>)
   100f6:	88db      	ldrh	r3, [r3, #6]
   100f8:	8003      	strh	r3, [r0, #0]
   100fa:	e7f3      	b.n	100e4 <dmPrivHciHandler+0x38>
   100fc:	78c5      	ldrb	r5, [r0, #3]
   100fe:	233b      	movs	r3, #59	; 0x3b
   10100:	7083      	strb	r3, [r0, #2]
   10102:	2d00      	cmp	r5, #0
   10104:	d1ee      	bne.n	100e4 <dmPrivHciHandler+0x38>
   10106:	4b0e      	ldr	r3, [pc, #56]	; (10140 <dmPrivHciHandler+0x94>)
   10108:	7d1b      	ldrb	r3, [r3, #20]
   1010a:	2b00      	cmp	r3, #0
   1010c:	d0ea      	beq.n	100e4 <dmPrivHciHandler+0x38>
   1010e:	4628      	mov	r0, r5
   10110:	f005 f902 	bl	15318 <HciLeSetAddrResolutionEnable>
   10114:	4b09      	ldr	r3, [pc, #36]	; (1013c <dmPrivHciHandler+0x90>)
   10116:	725d      	strb	r5, [r3, #9]
   10118:	e7e4      	b.n	100e4 <dmPrivHciHandler+0x38>
   1011a:	233c      	movs	r3, #60	; 0x3c
   1011c:	70a3      	strb	r3, [r4, #2]
   1011e:	e7e1      	b.n	100e4 <dmPrivHciHandler+0x38>
   10120:	233d      	movs	r3, #61	; 0x3d
   10122:	e7fb      	b.n	1011c <dmPrivHciHandler+0x70>
   10124:	233e      	movs	r3, #62	; 0x3e
   10126:	7083      	strb	r3, [r0, #2]
   10128:	78c3      	ldrb	r3, [r0, #3]
   1012a:	2b00      	cmp	r3, #0
   1012c:	d1da      	bne.n	100e4 <dmPrivHciHandler+0x38>
   1012e:	4b03      	ldr	r3, [pc, #12]	; (1013c <dmPrivHciHandler+0x90>)
   10130:	7a5a      	ldrb	r2, [r3, #9]
   10132:	4b03      	ldr	r3, [pc, #12]	; (10140 <dmPrivHciHandler+0x94>)
   10134:	751a      	strb	r2, [r3, #20]
   10136:	e7d5      	b.n	100e4 <dmPrivHciHandler+0x38>
   10138:	bd70      	pop	{r4, r5, r6, pc}
   1013a:	bf00      	nop
   1013c:	10003e44 	.word	0x10003e44
   10140:	10003e2c 	.word	0x10003e2c

00010144 <DmPrivInit>:
   10144:	4b01      	ldr	r3, [pc, #4]	; (1014c <DmPrivInit+0x8>)
   10146:	4a02      	ldr	r2, [pc, #8]	; (10150 <DmPrivInit+0xc>)
   10148:	619a      	str	r2, [r3, #24]
   1014a:	4770      	bx	lr
   1014c:	10002b54 	.word	0x10002b54
   10150:	00025f34 	.word	0x00025f34

00010154 <DmPrivResolveAddr>:
   10154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10156:	4605      	mov	r5, r0
   10158:	201a      	movs	r0, #26
   1015a:	460e      	mov	r6, r1
   1015c:	4617      	mov	r7, r2
   1015e:	f00a fbe6 	bl	1a92e <WsfMsgAlloc>
   10162:	4604      	mov	r4, r0
   10164:	b190      	cbz	r0, 1018c <DmPrivResolveAddr+0x38>
   10166:	2360      	movs	r3, #96	; 0x60
   10168:	7083      	strb	r3, [r0, #2]
   1016a:	4631      	mov	r1, r6
   1016c:	f820 7b04 	strh.w	r7, [r0], #4
   10170:	f009 fd93 	bl	19c9a <Calc128Cpy>
   10174:	4629      	mov	r1, r5
   10176:	f104 0014 	add.w	r0, r4, #20
   1017a:	f009 fd43 	bl	19c04 <BdaCpy>
   1017e:	4b04      	ldr	r3, [pc, #16]	; (10190 <DmPrivResolveAddr+0x3c>)
   10180:	4621      	mov	r1, r4
   10182:	7b18      	ldrb	r0, [r3, #12]
   10184:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10188:	f00a bbf5 	b.w	1a976 <WsfMsgSend>
   1018c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1018e:	bf00      	nop
   10190:	10003e2c 	.word	0x10003e2c

00010194 <DmPrivAddDevToResList>:
   10194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10198:	4681      	mov	r9, r0
   1019a:	202c      	movs	r0, #44	; 0x2c
   1019c:	4688      	mov	r8, r1
   1019e:	4617      	mov	r7, r2
   101a0:	461e      	mov	r6, r3
   101a2:	f89d 5020 	ldrb.w	r5, [sp, #32]
   101a6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
   101aa:	f00a fbc0 	bl	1a92e <WsfMsgAlloc>
   101ae:	4604      	mov	r4, r0
   101b0:	b1e0      	cbz	r0, 101ec <DmPrivAddDevToResList+0x58>
   101b2:	2362      	movs	r3, #98	; 0x62
   101b4:	7083      	strb	r3, [r0, #2]
   101b6:	f8a0 a000 	strh.w	sl, [r0]
   101ba:	f880 9004 	strb.w	r9, [r0, #4]
   101be:	4641      	mov	r1, r8
   101c0:	3005      	adds	r0, #5
   101c2:	f009 fd1f 	bl	19c04 <BdaCpy>
   101c6:	4639      	mov	r1, r7
   101c8:	f104 000b 	add.w	r0, r4, #11
   101cc:	f009 fd65 	bl	19c9a <Calc128Cpy>
   101d0:	4631      	mov	r1, r6
   101d2:	f104 001b 	add.w	r0, r4, #27
   101d6:	f009 fd60 	bl	19c9a <Calc128Cpy>
   101da:	4b05      	ldr	r3, [pc, #20]	; (101f0 <DmPrivAddDevToResList+0x5c>)
   101dc:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
   101e0:	4621      	mov	r1, r4
   101e2:	7b18      	ldrb	r0, [r3, #12]
   101e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101e8:	f00a bbc5 	b.w	1a976 <WsfMsgSend>
   101ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101f0:	10003e2c 	.word	0x10003e2c

000101f4 <DmPrivRemDevFromResList>:
   101f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101f6:	4606      	mov	r6, r0
   101f8:	200c      	movs	r0, #12
   101fa:	460d      	mov	r5, r1
   101fc:	4617      	mov	r7, r2
   101fe:	f00a fb96 	bl	1a92e <WsfMsgAlloc>
   10202:	4604      	mov	r4, r0
   10204:	b170      	cbz	r0, 10224 <DmPrivRemDevFromResList+0x30>
   10206:	2363      	movs	r3, #99	; 0x63
   10208:	7083      	strb	r3, [r0, #2]
   1020a:	8007      	strh	r7, [r0, #0]
   1020c:	7106      	strb	r6, [r0, #4]
   1020e:	4629      	mov	r1, r5
   10210:	3005      	adds	r0, #5
   10212:	f009 fcf7 	bl	19c04 <BdaCpy>
   10216:	4b04      	ldr	r3, [pc, #16]	; (10228 <DmPrivRemDevFromResList+0x34>)
   10218:	4621      	mov	r1, r4
   1021a:	7b18      	ldrb	r0, [r3, #12]
   1021c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10220:	f00a bba9 	b.w	1a976 <WsfMsgSend>
   10224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10226:	bf00      	nop
   10228:	10003e2c 	.word	0x10003e2c

0001022c <DmPrivClearResList>:
   1022c:	b508      	push	{r3, lr}
   1022e:	202c      	movs	r0, #44	; 0x2c
   10230:	f00a fb7d 	bl	1a92e <WsfMsgAlloc>
   10234:	4601      	mov	r1, r0
   10236:	b138      	cbz	r0, 10248 <DmPrivClearResList+0x1c>
   10238:	2364      	movs	r3, #100	; 0x64
   1023a:	7083      	strb	r3, [r0, #2]
   1023c:	4b03      	ldr	r3, [pc, #12]	; (1024c <DmPrivClearResList+0x20>)
   1023e:	7b18      	ldrb	r0, [r3, #12]
   10240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10244:	f00a bb97 	b.w	1a976 <WsfMsgSend>
   10248:	bd08      	pop	{r3, pc}
   1024a:	bf00      	nop
   1024c:	10003e2c 	.word	0x10003e2c

00010250 <DmPrivReadPeerResolvableAddr>:
   10250:	f005 b818 	b.w	15284 <HciLeReadPeerResolvableAddr>

00010254 <DmPrivReadLocalResolvableAddr>:
   10254:	f005 b83b 	b.w	152ce <HciLeReadLocalResolvableAddr>

00010258 <DmPrivSetAddrResEnable>:
   10258:	b510      	push	{r4, lr}
   1025a:	4604      	mov	r4, r0
   1025c:	202c      	movs	r0, #44	; 0x2c
   1025e:	f00a fb66 	bl	1a92e <WsfMsgAlloc>
   10262:	4601      	mov	r1, r0
   10264:	b150      	cbz	r0, 1027c <DmPrivSetAddrResEnable+0x24>
   10266:	2365      	movs	r3, #101	; 0x65
   10268:	7083      	strb	r3, [r0, #2]
   1026a:	2300      	movs	r3, #0
   1026c:	8003      	strh	r3, [r0, #0]
   1026e:	4b04      	ldr	r3, [pc, #16]	; (10280 <DmPrivSetAddrResEnable+0x28>)
   10270:	7104      	strb	r4, [r0, #4]
   10272:	7b18      	ldrb	r0, [r3, #12]
   10274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10278:	f00a bb7d 	b.w	1a976 <WsfMsgSend>
   1027c:	bd10      	pop	{r4, pc}
   1027e:	bf00      	nop
   10280:	10003e2c 	.word	0x10003e2c

00010284 <DmPrivSetResolvablePrivateAddrTimeout>:
   10284:	f005 b865 	b.w	15352 <HciLeSetResolvablePrivateAddrTimeout>

00010288 <DmPrivSetPrivacyMode>:
   10288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1028a:	4607      	mov	r7, r0
   1028c:	200c      	movs	r0, #12
   1028e:	460e      	mov	r6, r1
   10290:	4615      	mov	r5, r2
   10292:	f00a fb4c 	bl	1a92e <WsfMsgAlloc>
   10296:	4604      	mov	r4, r0
   10298:	b170      	cbz	r0, 102b8 <DmPrivSetPrivacyMode+0x30>
   1029a:	2366      	movs	r3, #102	; 0x66
   1029c:	7083      	strb	r3, [r0, #2]
   1029e:	7107      	strb	r7, [r0, #4]
   102a0:	4631      	mov	r1, r6
   102a2:	3005      	adds	r0, #5
   102a4:	f009 fcae 	bl	19c04 <BdaCpy>
   102a8:	4b04      	ldr	r3, [pc, #16]	; (102bc <DmPrivSetPrivacyMode+0x34>)
   102aa:	72e5      	strb	r5, [r4, #11]
   102ac:	4621      	mov	r1, r4
   102ae:	7b18      	ldrb	r0, [r3, #12]
   102b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   102b4:	f00a bb5f 	b.w	1a976 <WsfMsgSend>
   102b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102ba:	bf00      	nop
   102bc:	10003e2c 	.word	0x10003e2c

000102c0 <dmScanInit>:
   102c0:	4b05      	ldr	r3, [pc, #20]	; (102d8 <dmScanInit+0x18>)
   102c2:	4906      	ldr	r1, [pc, #24]	; (102dc <dmScanInit+0x1c>)
   102c4:	7b18      	ldrb	r0, [r3, #12]
   102c6:	7208      	strb	r0, [r1, #8]
   102c8:	2200      	movs	r2, #0
   102ca:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
   102ce:	749a      	strb	r2, [r3, #18]
   102d0:	6108      	str	r0, [r1, #16]
   102d2:	750a      	strb	r2, [r1, #20]
   102d4:	73da      	strb	r2, [r3, #15]
   102d6:	4770      	bx	lr
   102d8:	10003e2c 	.word	0x10003e2c
   102dc:	10003e50 	.word	0x10003e50

000102e0 <DmScanStart>:
   102e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   102e4:	4605      	mov	r5, r0
   102e6:	200e      	movs	r0, #14
   102e8:	460e      	mov	r6, r1
   102ea:	4692      	mov	sl, r2
   102ec:	461f      	mov	r7, r3
   102ee:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   102f2:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   102f6:	f00a fb1a 	bl	1a92e <WsfMsgAlloc>
   102fa:	b1d8      	cbz	r0, 10334 <DmScanStart+0x54>
   102fc:	2320      	movs	r3, #32
   102fe:	7083      	strb	r3, [r0, #2]
   10300:	7105      	strb	r5, [r0, #4]
   10302:	2400      	movs	r4, #0
   10304:	fa45 f304 	asr.w	r3, r5, r4
   10308:	07db      	lsls	r3, r3, #31
   1030a:	d50f      	bpl.n	1032c <DmScanStart+0x4c>
   1030c:	f89a 3000 	ldrb.w	r3, [sl]
   10310:	7143      	strb	r3, [r0, #5]
   10312:	4b09      	ldr	r3, [pc, #36]	; (10338 <DmScanStart+0x58>)
   10314:	7186      	strb	r6, [r0, #6]
   10316:	f8a0 8008 	strh.w	r8, [r0, #8]
   1031a:	f8a0 900a 	strh.w	r9, [r0, #10]
   1031e:	7307      	strb	r7, [r0, #12]
   10320:	4601      	mov	r1, r0
   10322:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10326:	7b18      	ldrb	r0, [r3, #12]
   10328:	f00a bb25 	b.w	1a976 <WsfMsgSend>
   1032c:	2c07      	cmp	r4, #7
   1032e:	d0f0      	beq.n	10312 <DmScanStart+0x32>
   10330:	3401      	adds	r4, #1
   10332:	e7e7      	b.n	10304 <DmScanStart+0x24>
   10334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10338:	10003e2c 	.word	0x10003e2c

0001033c <DmScanStop>:
   1033c:	b508      	push	{r3, lr}
   1033e:	2004      	movs	r0, #4
   10340:	f00a faf5 	bl	1a92e <WsfMsgAlloc>
   10344:	4601      	mov	r1, r0
   10346:	b138      	cbz	r0, 10358 <DmScanStop+0x1c>
   10348:	2321      	movs	r3, #33	; 0x21
   1034a:	7083      	strb	r3, [r0, #2]
   1034c:	4b03      	ldr	r3, [pc, #12]	; (1035c <DmScanStop+0x20>)
   1034e:	7b18      	ldrb	r0, [r3, #12]
   10350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10354:	f00a bb0f 	b.w	1a976 <WsfMsgSend>
   10358:	bd08      	pop	{r3, pc}
   1035a:	bf00      	nop
   1035c:	10003e2c 	.word	0x10003e2c

00010360 <DmScanSetInterval>:
   10360:	b570      	push	{r4, r5, r6, lr}
   10362:	2400      	movs	r4, #0
   10364:	fa40 f304 	asr.w	r3, r0, r4
   10368:	07db      	lsls	r3, r3, #31
   1036a:	d515      	bpl.n	10398 <DmScanSetInterval+0x38>
   1036c:	880e      	ldrh	r6, [r1, #0]
   1036e:	8815      	ldrh	r5, [r2, #0]
   10370:	f00b f928 	bl	1b5c4 <WsfTaskLock>
   10374:	2001      	movs	r0, #1
   10376:	40a0      	lsls	r0, r4
   10378:	b2c0      	uxtb	r0, r0
   1037a:	f7ff fdef 	bl	ff5c <DmScanPhyToIdx>
   1037e:	4b08      	ldr	r3, [pc, #32]	; (103a0 <DmScanSetInterval+0x40>)
   10380:	3008      	adds	r0, #8
   10382:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
   10386:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1038a:	805d      	strh	r5, [r3, #2]
   1038c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10390:	f00b b91e 	b.w	1b5d0 <WsfTaskUnlock>
   10394:	3401      	adds	r4, #1
   10396:	e7e5      	b.n	10364 <DmScanSetInterval+0x4>
   10398:	2c07      	cmp	r4, #7
   1039a:	d1fb      	bne.n	10394 <DmScanSetInterval+0x34>
   1039c:	bd70      	pop	{r4, r5, r6, pc}
   1039e:	bf00      	nop
   103a0:	10003e50 	.word	0x10003e50

000103a4 <DmScanSetAddrType>:
   103a4:	b510      	push	{r4, lr}
   103a6:	4604      	mov	r4, r0
   103a8:	f00b f90c 	bl	1b5c4 <WsfTaskLock>
   103ac:	4b02      	ldr	r3, [pc, #8]	; (103b8 <DmScanSetAddrType+0x14>)
   103ae:	73dc      	strb	r4, [r3, #15]
   103b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103b4:	f00b b90c 	b.w	1b5d0 <WsfTaskUnlock>
   103b8:	10003e2c 	.word	0x10003e2c

000103bc <dmScanMsgHandler>:
   103bc:	7883      	ldrb	r3, [r0, #2]
   103be:	4a03      	ldr	r2, [pc, #12]	; (103cc <dmScanMsgHandler+0x10>)
   103c0:	f003 030f 	and.w	r3, r3, #15
   103c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103c8:	4718      	bx	r3
   103ca:	bf00      	nop
   103cc:	00025f40 	.word	0x00025f40

000103d0 <dmScanReset>:
   103d0:	b513      	push	{r0, r1, r4, lr}
   103d2:	4c0a      	ldr	r4, [pc, #40]	; (103fc <dmScanReset+0x2c>)
   103d4:	7d23      	ldrb	r3, [r4, #20]
   103d6:	3b02      	subs	r3, #2
   103d8:	2b01      	cmp	r3, #1
   103da:	d80b      	bhi.n	103f4 <dmScanReset+0x24>
   103dc:	4620      	mov	r0, r4
   103de:	f00a fc85 	bl	1acec <WsfTimerStop>
   103e2:	2325      	movs	r3, #37	; 0x25
   103e4:	f8ad 3006 	strh.w	r3, [sp, #6]
   103e8:	4b05      	ldr	r3, [pc, #20]	; (10400 <dmScanReset+0x30>)
   103ea:	a801      	add	r0, sp, #4
   103ec:	689b      	ldr	r3, [r3, #8]
   103ee:	4798      	blx	r3
   103f0:	2300      	movs	r3, #0
   103f2:	7523      	strb	r3, [r4, #20]
   103f4:	f7ff ff64 	bl	102c0 <dmScanInit>
   103f8:	b002      	add	sp, #8
   103fa:	bd10      	pop	{r4, pc}
   103fc:	10003e50 	.word	0x10003e50
   10400:	10003e2c 	.word	0x10003e2c

00010404 <dmScanActStart>:
   10404:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10408:	4c1a      	ldr	r4, [pc, #104]	; (10474 <dmScanActStart+0x70>)
   1040a:	4605      	mov	r5, r0
   1040c:	2001      	movs	r0, #1
   1040e:	f7ff fda5 	bl	ff5c <DmScanPhyToIdx>
   10412:	7d26      	ldrb	r6, [r4, #20]
   10414:	bb5e      	cbnz	r6, 1046e <dmScanActStart+0x6a>
   10416:	182b      	adds	r3, r5, r0
   10418:	3008      	adds	r0, #8
   1041a:	4f17      	ldr	r7, [pc, #92]	; (10478 <dmScanActStart+0x74>)
   1041c:	f834 9010 	ldrh.w	r9, [r4, r0, lsl #1]
   10420:	f893 8005 	ldrb.w	r8, [r3, #5]
   10424:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   10428:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   1042c:	7bf8      	ldrb	r0, [r7, #15]
   1042e:	f7ff fd6d 	bl	ff0c <DmLlAddrType>
   10432:	7cbb      	ldrb	r3, [r7, #18]
   10434:	9300      	str	r3, [sp, #0]
   10436:	4652      	mov	r2, sl
   10438:	4603      	mov	r3, r0
   1043a:	4649      	mov	r1, r9
   1043c:	4640      	mov	r0, r8
   1043e:	f004 fcf2 	bl	14e26 <HciLeSetScanParamCmd>
   10442:	79ab      	ldrb	r3, [r5, #6]
   10444:	2b01      	cmp	r3, #1
   10446:	d10c      	bne.n	10462 <dmScanActStart+0x5e>
   10448:	7663      	strb	r3, [r4, #25]
   1044a:	2300      	movs	r3, #0
   1044c:	7623      	strb	r3, [r4, #24]
   1044e:	2001      	movs	r0, #1
   10450:	892b      	ldrh	r3, [r5, #8]
   10452:	7520      	strb	r0, [r4, #20]
   10454:	7b29      	ldrb	r1, [r5, #12]
   10456:	82e3      	strh	r3, [r4, #22]
   10458:	b002      	add	sp, #8
   1045a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1045e:	f004 bcbd 	b.w	14ddc <HciLeSetScanEnableCmd>
   10462:	2b02      	cmp	r3, #2
   10464:	d101      	bne.n	1046a <dmScanActStart+0x66>
   10466:	2303      	movs	r3, #3
   10468:	e7ee      	b.n	10448 <dmScanActStart+0x44>
   1046a:	7666      	strb	r6, [r4, #25]
   1046c:	e7ed      	b.n	1044a <dmScanActStart+0x46>
   1046e:	b002      	add	sp, #8
   10470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10474:	10003e50 	.word	0x10003e50
   10478:	10003e2c 	.word	0x10003e2c

0001047c <dmScanActStop>:
   1047c:	4b05      	ldr	r3, [pc, #20]	; (10494 <dmScanActStop+0x18>)
   1047e:	7d1a      	ldrb	r2, [r3, #20]
   10480:	2a02      	cmp	r2, #2
   10482:	d105      	bne.n	10490 <dmScanActStop+0x14>
   10484:	2100      	movs	r1, #0
   10486:	2203      	movs	r2, #3
   10488:	4608      	mov	r0, r1
   1048a:	751a      	strb	r2, [r3, #20]
   1048c:	f004 bca6 	b.w	14ddc <HciLeSetScanEnableCmd>
   10490:	4770      	bx	lr
   10492:	bf00      	nop
   10494:	10003e50 	.word	0x10003e50

00010498 <dmScanActTimeout>:
   10498:	f7ff bff0 	b.w	1047c <dmScanActStop>

0001049c <dmScanHciHandler>:
   1049c:	7883      	ldrb	r3, [r0, #2]
   1049e:	2b06      	cmp	r3, #6
   104a0:	b570      	push	{r4, r5, r6, lr}
   104a2:	4604      	mov	r4, r0
   104a4:	d11e      	bne.n	104e4 <dmScanHciHandler+0x48>
   104a6:	4b24      	ldr	r3, [pc, #144]	; (10538 <dmScanHciHandler+0x9c>)
   104a8:	7d1a      	ldrb	r2, [r3, #20]
   104aa:	2a02      	cmp	r2, #2
   104ac:	461d      	mov	r5, r3
   104ae:	d108      	bne.n	104c2 <dmScanHciHandler+0x26>
   104b0:	7e5a      	ldrb	r2, [r3, #25]
   104b2:	b1a2      	cbz	r2, 104de <dmScanHciHandler+0x42>
   104b4:	7a82      	ldrb	r2, [r0, #10]
   104b6:	2a04      	cmp	r2, #4
   104b8:	d104      	bne.n	104c4 <dmScanHciHandler+0x28>
   104ba:	7e1a      	ldrb	r2, [r3, #24]
   104bc:	b17a      	cbz	r2, 104de <dmScanHciHandler+0x42>
   104be:	2200      	movs	r2, #0
   104c0:	761a      	strb	r2, [r3, #24]
   104c2:	bd70      	pop	{r4, r5, r6, pc}
   104c4:	6842      	ldr	r2, [r0, #4]
   104c6:	7a01      	ldrb	r1, [r0, #8]
   104c8:	2001      	movs	r0, #1
   104ca:	f7ff fce5 	bl	fe98 <DmFindAdType>
   104ce:	b910      	cbnz	r0, 104d6 <dmScanHciHandler+0x3a>
   104d0:	2301      	movs	r3, #1
   104d2:	762b      	strb	r3, [r5, #24]
   104d4:	e7f5      	b.n	104c2 <dmScanHciHandler+0x26>
   104d6:	7882      	ldrb	r2, [r0, #2]
   104d8:	7e6b      	ldrb	r3, [r5, #25]
   104da:	421a      	tst	r2, r3
   104dc:	d0f8      	beq.n	104d0 <dmScanHciHandler+0x34>
   104de:	2326      	movs	r3, #38	; 0x26
   104e0:	70a3      	strb	r3, [r4, #2]
   104e2:	e008      	b.n	104f6 <dmScanHciHandler+0x5a>
   104e4:	2b34      	cmp	r3, #52	; 0x34
   104e6:	d1ec      	bne.n	104c2 <dmScanHciHandler+0x26>
   104e8:	4d13      	ldr	r5, [pc, #76]	; (10538 <dmScanHciHandler+0x9c>)
   104ea:	7d2b      	ldrb	r3, [r5, #20]
   104ec:	2b01      	cmp	r3, #1
   104ee:	462e      	mov	r6, r5
   104f0:	d007      	beq.n	10502 <dmScanHciHandler+0x66>
   104f2:	2b03      	cmp	r3, #3
   104f4:	d015      	beq.n	10522 <dmScanHciHandler+0x86>
   104f6:	4b11      	ldr	r3, [pc, #68]	; (1053c <dmScanHciHandler+0xa0>)
   104f8:	4620      	mov	r0, r4
   104fa:	689b      	ldr	r3, [r3, #8]
   104fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10500:	4718      	bx	r3
   10502:	78c3      	ldrb	r3, [r0, #3]
   10504:	b953      	cbnz	r3, 1051c <dmScanHciHandler+0x80>
   10506:	8ae9      	ldrh	r1, [r5, #22]
   10508:	b121      	cbz	r1, 10514 <dmScanHciHandler+0x78>
   1050a:	2322      	movs	r3, #34	; 0x22
   1050c:	4628      	mov	r0, r5
   1050e:	732b      	strb	r3, [r5, #12]
   10510:	f00a fbd8 	bl	1acc4 <WsfTimerStartMs>
   10514:	2302      	movs	r3, #2
   10516:	7533      	strb	r3, [r6, #20]
   10518:	2324      	movs	r3, #36	; 0x24
   1051a:	e7e1      	b.n	104e0 <dmScanHciHandler+0x44>
   1051c:	2300      	movs	r3, #0
   1051e:	752b      	strb	r3, [r5, #20]
   10520:	e7fa      	b.n	10518 <dmScanHciHandler+0x7c>
   10522:	78c6      	ldrb	r6, [r0, #3]
   10524:	b92e      	cbnz	r6, 10532 <dmScanHciHandler+0x96>
   10526:	4628      	mov	r0, r5
   10528:	f00a fbe0 	bl	1acec <WsfTimerStop>
   1052c:	752e      	strb	r6, [r5, #20]
   1052e:	2325      	movs	r3, #37	; 0x25
   10530:	e7d6      	b.n	104e0 <dmScanHciHandler+0x44>
   10532:	2302      	movs	r3, #2
   10534:	752b      	strb	r3, [r5, #20]
   10536:	e7fa      	b.n	1052e <dmScanHciHandler+0x92>
   10538:	10003e50 	.word	0x10003e50
   1053c:	10003e2c 	.word	0x10003e2c

00010540 <DmScanInit>:
   10540:	b508      	push	{r3, lr}
   10542:	f00b f83f 	bl	1b5c4 <WsfTaskLock>
   10546:	4b04      	ldr	r3, [pc, #16]	; (10558 <DmScanInit+0x18>)
   10548:	4a04      	ldr	r2, [pc, #16]	; (1055c <DmScanInit+0x1c>)
   1054a:	609a      	str	r2, [r3, #8]
   1054c:	f7ff feb8 	bl	102c0 <dmScanInit>
   10550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10554:	f00b b83c 	b.w	1b5d0 <WsfTaskUnlock>
   10558:	10002b54 	.word	0x10002b54
   1055c:	00025f4c 	.word	0x00025f4c

00010560 <DmScanModeLeg>:
   10560:	4b03      	ldr	r3, [pc, #12]	; (10570 <DmScanModeLeg+0x10>)
   10562:	6898      	ldr	r0, [r3, #8]
   10564:	4b03      	ldr	r3, [pc, #12]	; (10574 <DmScanModeLeg+0x14>)
   10566:	1ac3      	subs	r3, r0, r3
   10568:	4258      	negs	r0, r3
   1056a:	4158      	adcs	r0, r3
   1056c:	4770      	bx	lr
   1056e:	bf00      	nop
   10570:	10002b54 	.word	0x10002b54
   10574:	00025f4c 	.word	0x00025f4c

00010578 <dmSecMsgHandler>:
   10578:	b570      	push	{r4, r5, r6, lr}
   1057a:	4605      	mov	r5, r0
   1057c:	7800      	ldrb	r0, [r0, #0]
   1057e:	f7ff f85b 	bl	f638 <dmConnCcbById>
   10582:	4604      	mov	r4, r0
   10584:	b120      	cbz	r0, 10590 <dmSecMsgHandler+0x18>
   10586:	78ab      	ldrb	r3, [r5, #2]
   10588:	2b50      	cmp	r3, #80	; 0x50
   1058a:	d002      	beq.n	10592 <dmSecMsgHandler+0x1a>
   1058c:	2b51      	cmp	r3, #81	; 0x51
   1058e:	d012      	beq.n	105b6 <dmSecMsgHandler+0x3e>
   10590:	bd70      	pop	{r4, r5, r6, pc}
   10592:	2201      	movs	r2, #1
   10594:	2102      	movs	r1, #2
   10596:	7c00      	ldrb	r0, [r0, #16]
   10598:	f7ff face 	bl	fb38 <DmConnSetIdle>
   1059c:	7fab      	ldrb	r3, [r5, #30]
   1059e:	7623      	strb	r3, [r4, #24]
   105a0:	2301      	movs	r3, #1
   105a2:	74a3      	strb	r3, [r4, #18]
   105a4:	8baa      	ldrh	r2, [r5, #28]
   105a6:	89a0      	ldrh	r0, [r4, #12]
   105a8:	1d2b      	adds	r3, r5, #4
   105aa:	f105 0114 	add.w	r1, r5, #20
   105ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   105b2:	f004 bcb6 	b.w	14f22 <HciLeStartEncryptionCmd>
   105b6:	7d2a      	ldrb	r2, [r5, #20]
   105b8:	b13a      	cbz	r2, 105ca <dmSecMsgHandler+0x52>
   105ba:	7d6b      	ldrb	r3, [r5, #21]
   105bc:	7603      	strb	r3, [r0, #24]
   105be:	1d29      	adds	r1, r5, #4
   105c0:	8980      	ldrh	r0, [r0, #12]
   105c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   105c6:	f004 ba43 	b.w	14a50 <HciLeLtkReqReplCmd>
   105ca:	7c00      	ldrb	r0, [r0, #16]
   105cc:	2102      	movs	r1, #2
   105ce:	f7ff fab3 	bl	fb38 <DmConnSetIdle>
   105d2:	89a0      	ldrh	r0, [r4, #12]
   105d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   105d8:	f004 ba14 	b.w	14a04 <HciLeLtkReqNegReplCmd>

000105dc <dmSecApiLtkMsg>:
   105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105de:	4606      	mov	r6, r0
   105e0:	2020      	movs	r0, #32
   105e2:	460d      	mov	r5, r1
   105e4:	4614      	mov	r4, r2
   105e6:	461f      	mov	r7, r3
   105e8:	f00a f9a1 	bl	1a92e <WsfMsgAlloc>
   105ec:	b1a8      	cbz	r0, 1061a <dmSecApiLtkMsg+0x3e>
   105ee:	7087      	strb	r7, [r0, #2]
   105f0:	8006      	strh	r6, [r0, #0]
   105f2:	70c5      	strb	r5, [r0, #3]
   105f4:	4622      	mov	r2, r4
   105f6:	1d03      	adds	r3, r0, #4
   105f8:	f104 0118 	add.w	r1, r4, #24
   105fc:	f852 4b04 	ldr.w	r4, [r2], #4
   10600:	f843 4b04 	str.w	r4, [r3], #4
   10604:	428a      	cmp	r2, r1
   10606:	d1f9      	bne.n	105fc <dmSecApiLtkMsg+0x20>
   10608:	8812      	ldrh	r2, [r2, #0]
   1060a:	801a      	strh	r2, [r3, #0]
   1060c:	4b03      	ldr	r3, [pc, #12]	; (1061c <dmSecApiLtkMsg+0x40>)
   1060e:	4601      	mov	r1, r0
   10610:	7b18      	ldrb	r0, [r3, #12]
   10612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10616:	f00a b9ae 	b.w	1a976 <WsfMsgSend>
   1061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1061c:	10003e2c 	.word	0x10003e2c

00010620 <DmSmpCbackExec>:
   10620:	7883      	ldrb	r3, [r0, #2]
   10622:	2b2a      	cmp	r3, #42	; 0x2a
   10624:	b510      	push	{r4, lr}
   10626:	4604      	mov	r4, r0
   10628:	d001      	beq.n	1062e <DmSmpCbackExec+0xe>
   1062a:	2b2c      	cmp	r3, #44	; 0x2c
   1062c:	d105      	bne.n	1063a <DmSmpCbackExec+0x1a>
   1062e:	4b06      	ldr	r3, [pc, #24]	; (10648 <DmSmpCbackExec+0x28>)
   10630:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   10634:	b10b      	cbz	r3, 1063a <DmSmpCbackExec+0x1a>
   10636:	4620      	mov	r0, r4
   10638:	4798      	blx	r3
   1063a:	4b04      	ldr	r3, [pc, #16]	; (1064c <DmSmpCbackExec+0x2c>)
   1063c:	4620      	mov	r0, r4
   1063e:	689b      	ldr	r3, [r3, #8]
   10640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10644:	4718      	bx	r3
   10646:	bf00      	nop
   10648:	10003c9c 	.word	0x10003c9c
   1064c:	10003e2c 	.word	0x10003e2c

00010650 <dmSecHciHandler>:
   10650:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10652:	4605      	mov	r5, r0
   10654:	8800      	ldrh	r0, [r0, #0]
   10656:	f7fe ff08 	bl	f46a <dmConnCcbByHandle>
   1065a:	4604      	mov	r4, r0
   1065c:	b1c0      	cbz	r0, 10690 <dmSecHciHandler+0x40>
   1065e:	78ab      	ldrb	r3, [r5, #2]
   10660:	2b10      	cmp	r3, #16
   10662:	d127      	bne.n	106b4 <dmSecHciHandler+0x64>
   10664:	89eb      	ldrh	r3, [r5, #14]
   10666:	b9ab      	cbnz	r3, 10694 <dmSecHciHandler+0x44>
   10668:	2208      	movs	r2, #8
   1066a:	4926      	ldr	r1, [pc, #152]	; (10704 <dmSecHciHandler+0xb4>)
   1066c:	1da8      	adds	r0, r5, #6
   1066e:	f7fb fd47 	bl	c100 <memcmp>
   10672:	4606      	mov	r6, r0
   10674:	b970      	cbnz	r0, 10694 <dmSecHciHandler+0x44>
   10676:	4669      	mov	r1, sp
   10678:	7c20      	ldrb	r0, [r4, #16]
   1067a:	f000 fda3 	bl	111c4 <SmpDmGetStk>
   1067e:	4601      	mov	r1, r0
   10680:	b140      	cbz	r0, 10694 <dmSecHciHandler+0x44>
   10682:	f89d 3000 	ldrb.w	r3, [sp]
   10686:	7623      	strb	r3, [r4, #24]
   10688:	74a6      	strb	r6, [r4, #18]
   1068a:	8828      	ldrh	r0, [r5, #0]
   1068c:	f004 f9e0 	bl	14a50 <HciLeLtkReqReplCmd>
   10690:	b002      	add	sp, #8
   10692:	bd70      	pop	{r4, r5, r6, pc}
   10694:	7c20      	ldrb	r0, [r4, #16]
   10696:	2201      	movs	r2, #1
   10698:	2102      	movs	r1, #2
   1069a:	f7ff fa4d 	bl	fb38 <DmConnSetIdle>
   1069e:	2301      	movs	r3, #1
   106a0:	74a3      	strb	r3, [r4, #18]
   106a2:	7c23      	ldrb	r3, [r4, #16]
   106a4:	802b      	strh	r3, [r5, #0]
   106a6:	2330      	movs	r3, #48	; 0x30
   106a8:	70ab      	strb	r3, [r5, #2]
   106aa:	4b17      	ldr	r3, [pc, #92]	; (10708 <dmSecHciHandler+0xb8>)
   106ac:	4628      	mov	r0, r5
   106ae:	689b      	ldr	r3, [r3, #8]
   106b0:	4798      	blx	r3
   106b2:	e7ed      	b.n	10690 <dmSecHciHandler+0x40>
   106b4:	3b0e      	subs	r3, #14
   106b6:	2b01      	cmp	r3, #1
   106b8:	d8ea      	bhi.n	10690 <dmSecHciHandler+0x40>
   106ba:	2200      	movs	r2, #0
   106bc:	2102      	movs	r1, #2
   106be:	7c00      	ldrb	r0, [r0, #16]
   106c0:	f7ff fa3a 	bl	fb38 <DmConnSetIdle>
   106c4:	7c23      	ldrb	r3, [r4, #16]
   106c6:	f8ad 3000 	strh.w	r3, [sp]
   106ca:	78eb      	ldrb	r3, [r5, #3]
   106cc:	f88d 3003 	strb.w	r3, [sp, #3]
   106d0:	b9a3      	cbnz	r3, 106fc <dmSecHciHandler+0xac>
   106d2:	232c      	movs	r3, #44	; 0x2c
   106d4:	f88d 3002 	strb.w	r3, [sp, #2]
   106d8:	7e23      	ldrb	r3, [r4, #24]
   106da:	75e3      	strb	r3, [r4, #23]
   106dc:	7ca3      	ldrb	r3, [r4, #18]
   106de:	f88d 3004 	strb.w	r3, [sp, #4]
   106e2:	4668      	mov	r0, sp
   106e4:	f7ff ff9c 	bl	10620 <DmSmpCbackExec>
   106e8:	7c23      	ldrb	r3, [r4, #16]
   106ea:	f8ad 3000 	strh.w	r3, [sp]
   106ee:	4668      	mov	r0, sp
   106f0:	78eb      	ldrb	r3, [r5, #3]
   106f2:	f88d 3003 	strb.w	r3, [sp, #3]
   106f6:	f000 fddf 	bl	112b8 <SmpDmEncryptInd>
   106fa:	e7c9      	b.n	10690 <dmSecHciHandler+0x40>
   106fc:	232d      	movs	r3, #45	; 0x2d
   106fe:	f88d 3002 	strb.w	r3, [sp, #2]
   10702:	e7ee      	b.n	106e2 <dmSecHciHandler+0x92>
   10704:	00026ce0 	.word	0x00026ce0
   10708:	10003e2c 	.word	0x10003e2c

0001070c <DmSecCancelReq>:
   1070c:	b538      	push	{r3, r4, r5, lr}
   1070e:	4605      	mov	r5, r0
   10710:	2004      	movs	r0, #4
   10712:	460c      	mov	r4, r1
   10714:	f00a f90b 	bl	1a92e <WsfMsgAlloc>
   10718:	b138      	cbz	r0, 1072a <DmSecCancelReq+0x1e>
   1071a:	2203      	movs	r2, #3
   1071c:	7082      	strb	r2, [r0, #2]
   1071e:	70c4      	strb	r4, [r0, #3]
   10720:	8005      	strh	r5, [r0, #0]
   10722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10726:	f000 bd44 	b.w	111b2 <SmpDmMsgSend>
   1072a:	bd38      	pop	{r3, r4, r5, pc}

0001072c <DmSecAuthRsp>:
   1072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1072e:	4607      	mov	r7, r0
   10730:	2016      	movs	r0, #22
   10732:	460e      	mov	r6, r1
   10734:	4615      	mov	r5, r2
   10736:	f00a f8fa 	bl	1a92e <WsfMsgAlloc>
   1073a:	4604      	mov	r4, r0
   1073c:	b170      	cbz	r0, 1075c <DmSecAuthRsp+0x30>
   1073e:	2304      	movs	r3, #4
   10740:	7083      	strb	r3, [r0, #2]
   10742:	8007      	strh	r7, [r0, #0]
   10744:	7506      	strb	r6, [r0, #20]
   10746:	b125      	cbz	r5, 10752 <DmSecAuthRsp+0x26>
   10748:	4632      	mov	r2, r6
   1074a:	4629      	mov	r1, r5
   1074c:	4418      	add	r0, r3
   1074e:	f7fb fd07 	bl	c160 <memcpy>
   10752:	4620      	mov	r0, r4
   10754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10758:	f000 bd2b 	b.w	111b2 <SmpDmMsgSend>
   1075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001075e <DmSecInit>:
   1075e:	4b04      	ldr	r3, [pc, #16]	; (10770 <DmSecInit+0x12>)
   10760:	4a04      	ldr	r2, [pc, #16]	; (10774 <DmSecInit+0x16>)
   10762:	615a      	str	r2, [r3, #20]
   10764:	4b04      	ldr	r3, [pc, #16]	; (10778 <DmSecInit+0x1a>)
   10766:	4a05      	ldr	r2, [pc, #20]	; (1077c <DmSecInit+0x1e>)
   10768:	e9c3 2200 	strd	r2, r2, [r3]
   1076c:	4770      	bx	lr
   1076e:	bf00      	nop
   10770:	10002b54 	.word	0x10002b54
   10774:	00025f58 	.word	0x00025f58
   10778:	10003e6c 	.word	0x10003e6c
   1077c:	00026ce0 	.word	0x00026ce0

00010780 <DmSecSetLocalCsrk>:
   10780:	b510      	push	{r4, lr}
   10782:	4604      	mov	r4, r0
   10784:	f00a ff1e 	bl	1b5c4 <WsfTaskLock>
   10788:	4b02      	ldr	r3, [pc, #8]	; (10794 <DmSecSetLocalCsrk+0x14>)
   1078a:	605c      	str	r4, [r3, #4]
   1078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10790:	f00a bf1e 	b.w	1b5d0 <WsfTaskUnlock>
   10794:	10003e6c 	.word	0x10003e6c

00010798 <DmSecSetLocalIrk>:
   10798:	b510      	push	{r4, lr}
   1079a:	4604      	mov	r4, r0
   1079c:	f00a ff12 	bl	1b5c4 <WsfTaskLock>
   107a0:	4b02      	ldr	r3, [pc, #8]	; (107ac <DmSecSetLocalIrk+0x14>)
   107a2:	601c      	str	r4, [r3, #0]
   107a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107a8:	f00a bf12 	b.w	1b5d0 <WsfTaskUnlock>
   107ac:	10003e6c 	.word	0x10003e6c

000107b0 <DmSecGetLocalCsrk>:
   107b0:	4b01      	ldr	r3, [pc, #4]	; (107b8 <DmSecGetLocalCsrk+0x8>)
   107b2:	6858      	ldr	r0, [r3, #4]
   107b4:	4770      	bx	lr
   107b6:	bf00      	nop
   107b8:	10003e6c 	.word	0x10003e6c

000107bc <DmSecGetLocalIrk>:
   107bc:	4b01      	ldr	r3, [pc, #4]	; (107c4 <DmSecGetLocalIrk+0x8>)
   107be:	6818      	ldr	r0, [r3, #0]
   107c0:	4770      	bx	lr
   107c2:	bf00      	nop
   107c4:	10003e6c 	.word	0x10003e6c

000107c8 <dmSecLescMsgHandler>:
   107c8:	7883      	ldrb	r3, [r0, #2]
   107ca:	2b81      	cmp	r3, #129	; 0x81
   107cc:	b570      	push	{r4, r5, r6, lr}
   107ce:	4604      	mov	r4, r0
   107d0:	d106      	bne.n	107e0 <dmSecLescMsgHandler+0x18>
   107d2:	2334      	movs	r3, #52	; 0x34
   107d4:	7083      	strb	r3, [r0, #2]
   107d6:	4b0d      	ldr	r3, [pc, #52]	; (1080c <dmSecLescMsgHandler+0x44>)
   107d8:	689b      	ldr	r3, [r3, #8]
   107da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   107de:	4718      	bx	r3
   107e0:	2b80      	cmp	r3, #128	; 0x80
   107e2:	d112      	bne.n	1080a <dmSecLescMsgHandler+0x42>
   107e4:	2333      	movs	r3, #51	; 0x33
   107e6:	4d0a      	ldr	r5, [pc, #40]	; (10810 <dmSecLescMsgHandler+0x48>)
   107e8:	7083      	strb	r3, [r0, #2]
   107ea:	6841      	ldr	r1, [r0, #4]
   107ec:	3004      	adds	r0, #4
   107ee:	f009 fa54 	bl	19c9a <Calc128Cpy>
   107f2:	6829      	ldr	r1, [r5, #0]
   107f4:	f104 0014 	add.w	r0, r4, #20
   107f8:	f009 fa4f 	bl	19c9a <Calc128Cpy>
   107fc:	6828      	ldr	r0, [r5, #0]
   107fe:	f00a f847 	bl	1a890 <WsfBufFree>
   10802:	4b02      	ldr	r3, [pc, #8]	; (1080c <dmSecLescMsgHandler+0x44>)
   10804:	4620      	mov	r0, r4
   10806:	689b      	ldr	r3, [r3, #8]
   10808:	e7e7      	b.n	107da <dmSecLescMsgHandler+0x12>
   1080a:	bd70      	pop	{r4, r5, r6, pc}
   1080c:	10003e2c 	.word	0x10003e2c
   10810:	10003e74 	.word	0x10003e74

00010814 <DmSecKeypressReq>:
   10814:	b538      	push	{r3, r4, r5, lr}
   10816:	4604      	mov	r4, r0
   10818:	2006      	movs	r0, #6
   1081a:	460d      	mov	r5, r1
   1081c:	f00a f887 	bl	1a92e <WsfMsgAlloc>
   10820:	b138      	cbz	r0, 10832 <DmSecKeypressReq+0x1e>
   10822:	2216      	movs	r2, #22
   10824:	7105      	strb	r5, [r0, #4]
   10826:	7082      	strb	r2, [r0, #2]
   10828:	8004      	strh	r4, [r0, #0]
   1082a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1082e:	f000 bcc0 	b.w	111b2 <SmpDmMsgSend>
   10832:	bd38      	pop	{r3, r4, r5, pc}

00010834 <DmSecSetOob>:
   10834:	f000 bef9 	b.w	1162a <SmpScSetOobCfg>

00010838 <DmSecCalcOobReq>:
   10838:	b5f0      	push	{r4, r5, r6, r7, lr}
   1083a:	4605      	mov	r5, r0
   1083c:	b08d      	sub	sp, #52	; 0x34
   1083e:	2010      	movs	r0, #16
   10840:	460e      	mov	r6, r1
   10842:	f009 ffe5 	bl	1a810 <WsfBufAlloc>
   10846:	4c1a      	ldr	r4, [pc, #104]	; (108b0 <DmSecCalcOobReq+0x78>)
   10848:	4f1a      	ldr	r7, [pc, #104]	; (108b4 <DmSecCalcOobReq+0x7c>)
   1084a:	6020      	str	r0, [r4, #0]
   1084c:	b308      	cbz	r0, 10892 <DmSecCalcOobReq+0x5a>
   1084e:	4629      	mov	r1, r5
   10850:	f009 fa23 	bl	19c9a <Calc128Cpy>
   10854:	2041      	movs	r0, #65	; 0x41
   10856:	f009 ffdb 	bl	1a810 <WsfBufAlloc>
   1085a:	4605      	mov	r5, r0
   1085c:	b1b0      	cbz	r0, 1088c <DmSecCalcOobReq+0x54>
   1085e:	2220      	movs	r2, #32
   10860:	4631      	mov	r1, r6
   10862:	f000 fdff 	bl	11464 <SmpScCat>
   10866:	2220      	movs	r2, #32
   10868:	4631      	mov	r1, r6
   1086a:	f000 fdfb 	bl	11464 <SmpScCat>
   1086e:	2200      	movs	r2, #0
   10870:	7002      	strb	r2, [r0, #0]
   10872:	2180      	movs	r1, #128	; 0x80
   10874:	7b3b      	ldrb	r3, [r7, #12]
   10876:	6820      	ldr	r0, [r4, #0]
   10878:	e9cd 2100 	strd	r2, r1, [sp]
   1087c:	2241      	movs	r2, #65	; 0x41
   1087e:	4629      	mov	r1, r5
   10880:	f007 fe0c 	bl	1849c <SecCmac>
   10884:	b988      	cbnz	r0, 108aa <DmSecCalcOobReq+0x72>
   10886:	4628      	mov	r0, r5
   10888:	f00a f802 	bl	1a890 <WsfBufFree>
   1088c:	6820      	ldr	r0, [r4, #0]
   1088e:	f009 ffff 	bl	1a890 <WsfBufFree>
   10892:	2224      	movs	r2, #36	; 0x24
   10894:	2100      	movs	r1, #0
   10896:	a803      	add	r0, sp, #12
   10898:	f7fb fd60 	bl	c35c <memset>
   1089c:	f240 7333 	movw	r3, #1843	; 0x733
   108a0:	f8ad 300e 	strh.w	r3, [sp, #14]
   108a4:	a803      	add	r0, sp, #12
   108a6:	68bb      	ldr	r3, [r7, #8]
   108a8:	4798      	blx	r3
   108aa:	b00d      	add	sp, #52	; 0x34
   108ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108ae:	bf00      	nop
   108b0:	10003e74 	.word	0x10003e74
   108b4:	10003e2c 	.word	0x10003e2c

000108b8 <DmSecGenerateEccKeyReq>:
   108b8:	4b02      	ldr	r3, [pc, #8]	; (108c4 <DmSecGenerateEccKeyReq+0xc>)
   108ba:	2281      	movs	r2, #129	; 0x81
   108bc:	2100      	movs	r1, #0
   108be:	7b18      	ldrb	r0, [r3, #12]
   108c0:	f007 be9e 	b.w	18600 <SecEccGenKey>
   108c4:	10003e2c 	.word	0x10003e2c

000108c8 <DmSecSetDebugEccKey>:
   108c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108ca:	4b24      	ldr	r3, [pc, #144]	; (1095c <DmSecSetDebugEccKey+0x94>)
   108cc:	b099      	sub	sp, #100	; 0x64
   108ce:	466a      	mov	r2, sp
   108d0:	f103 0620 	add.w	r6, r3, #32
   108d4:	4615      	mov	r5, r2
   108d6:	6818      	ldr	r0, [r3, #0]
   108d8:	6859      	ldr	r1, [r3, #4]
   108da:	4614      	mov	r4, r2
   108dc:	c403      	stmia	r4!, {r0, r1}
   108de:	3308      	adds	r3, #8
   108e0:	42b3      	cmp	r3, r6
   108e2:	4622      	mov	r2, r4
   108e4:	d1f7      	bne.n	108d6 <DmSecSetDebugEccKey+0xe>
   108e6:	4b1e      	ldr	r3, [pc, #120]	; (10960 <DmSecSetDebugEccKey+0x98>)
   108e8:	ac08      	add	r4, sp, #32
   108ea:	f103 0720 	add.w	r7, r3, #32
   108ee:	4622      	mov	r2, r4
   108f0:	6818      	ldr	r0, [r3, #0]
   108f2:	6859      	ldr	r1, [r3, #4]
   108f4:	4626      	mov	r6, r4
   108f6:	c603      	stmia	r6!, {r0, r1}
   108f8:	3308      	adds	r3, #8
   108fa:	42bb      	cmp	r3, r7
   108fc:	4634      	mov	r4, r6
   108fe:	d1f7      	bne.n	108f0 <DmSecSetDebugEccKey+0x28>
   10900:	4c18      	ldr	r4, [pc, #96]	; (10964 <DmSecSetDebugEccKey+0x9c>)
   10902:	ae10      	add	r6, sp, #64	; 0x40
   10904:	f104 0c20 	add.w	ip, r4, #32
   10908:	4633      	mov	r3, r6
   1090a:	6820      	ldr	r0, [r4, #0]
   1090c:	6861      	ldr	r1, [r4, #4]
   1090e:	4637      	mov	r7, r6
   10910:	c703      	stmia	r7!, {r0, r1}
   10912:	3408      	adds	r4, #8
   10914:	4564      	cmp	r4, ip
   10916:	463e      	mov	r6, r7
   10918:	d1f7      	bne.n	1090a <DmSecSetDebugEccKey+0x42>
   1091a:	4e13      	ldr	r6, [pc, #76]	; (10968 <DmSecSetDebugEccKey+0xa0>)
   1091c:	462c      	mov	r4, r5
   1091e:	cc03      	ldmia	r4!, {r0, r1}
   10920:	4294      	cmp	r4, r2
   10922:	6030      	str	r0, [r6, #0]
   10924:	6071      	str	r1, [r6, #4]
   10926:	4625      	mov	r5, r4
   10928:	f106 0608 	add.w	r6, r6, #8
   1092c:	d1f6      	bne.n	1091c <DmSecSetDebugEccKey+0x54>
   1092e:	4d0f      	ldr	r5, [pc, #60]	; (1096c <DmSecSetDebugEccKey+0xa4>)
   10930:	4614      	mov	r4, r2
   10932:	cc03      	ldmia	r4!, {r0, r1}
   10934:	429c      	cmp	r4, r3
   10936:	6028      	str	r0, [r5, #0]
   10938:	6069      	str	r1, [r5, #4]
   1093a:	4622      	mov	r2, r4
   1093c:	f105 0508 	add.w	r5, r5, #8
   10940:	d1f6      	bne.n	10930 <DmSecSetDebugEccKey+0x68>
   10942:	4c0b      	ldr	r4, [pc, #44]	; (10970 <DmSecSetDebugEccKey+0xa8>)
   10944:	ad18      	add	r5, sp, #96	; 0x60
   10946:	461a      	mov	r2, r3
   10948:	ca03      	ldmia	r2!, {r0, r1}
   1094a:	42aa      	cmp	r2, r5
   1094c:	6020      	str	r0, [r4, #0]
   1094e:	6061      	str	r1, [r4, #4]
   10950:	4613      	mov	r3, r2
   10952:	f104 0408 	add.w	r4, r4, #8
   10956:	d1f6      	bne.n	10946 <DmSecSetDebugEccKey+0x7e>
   10958:	b019      	add	sp, #100	; 0x64
   1095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1095c:	00025f64 	.word	0x00025f64
   10960:	00025f84 	.word	0x00025f84
   10964:	00025fa4 	.word	0x00025fa4
   10968:	10003eb8 	.word	0x10003eb8
   1096c:	10003e78 	.word	0x10003e78
   10970:	10003e98 	.word	0x10003e98

00010974 <DmSecSetEccKey>:
   10974:	b508      	push	{r3, lr}
   10976:	4601      	mov	r1, r0
   10978:	2260      	movs	r2, #96	; 0x60
   1097a:	4802      	ldr	r0, [pc, #8]	; (10984 <DmSecSetEccKey+0x10>)
   1097c:	f7fb fbf0 	bl	c160 <memcpy>
   10980:	bd08      	pop	{r3, pc}
   10982:	bf00      	nop
   10984:	10003e78 	.word	0x10003e78

00010988 <DmSecGetEccKey>:
   10988:	4800      	ldr	r0, [pc, #0]	; (1098c <DmSecGetEccKey+0x4>)
   1098a:	4770      	bx	lr
   1098c:	10003e78 	.word	0x10003e78

00010990 <DmSecCompareRsp>:
   10990:	b538      	push	{r3, r4, r5, lr}
   10992:	4605      	mov	r5, r0
   10994:	2016      	movs	r0, #22
   10996:	460c      	mov	r4, r1
   10998:	f009 ffc9 	bl	1a92e <WsfMsgAlloc>
   1099c:	b158      	cbz	r0, 109b6 <DmSecCompareRsp+0x26>
   1099e:	8005      	strh	r5, [r0, #0]
   109a0:	b12c      	cbz	r4, 109ae <DmSecCompareRsp+0x1e>
   109a2:	2315      	movs	r3, #21
   109a4:	7083      	strb	r3, [r0, #2]
   109a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   109aa:	f000 bc02 	b.w	111b2 <SmpDmMsgSend>
   109ae:	f240 4303 	movw	r3, #1027	; 0x403
   109b2:	8043      	strh	r3, [r0, #2]
   109b4:	e7f7      	b.n	109a6 <DmSecCompareRsp+0x16>
   109b6:	bd38      	pop	{r3, r4, r5, pc}

000109b8 <DmSecGetCompareValue>:
   109b8:	7b43      	ldrb	r3, [r0, #13]
   109ba:	7b82      	ldrb	r2, [r0, #14]
   109bc:	041b      	lsls	r3, r3, #16
   109be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   109c2:	7bc2      	ldrb	r2, [r0, #15]
   109c4:	7b00      	ldrb	r0, [r0, #12]
   109c6:	4413      	add	r3, r2
   109c8:	4a03      	ldr	r2, [pc, #12]	; (109d8 <DmSecGetCompareValue+0x20>)
   109ca:	eb03 6300 	add.w	r3, r3, r0, lsl #24
   109ce:	fbb3 f0f2 	udiv	r0, r3, r2
   109d2:	fb02 3010 	mls	r0, r2, r0, r3
   109d6:	4770      	bx	lr
   109d8:	000f4240 	.word	0x000f4240

000109dc <DmSecLescInit>:
   109dc:	4b01      	ldr	r3, [pc, #4]	; (109e4 <DmSecLescInit+0x8>)
   109de:	4a02      	ldr	r2, [pc, #8]	; (109e8 <DmSecLescInit+0xc>)
   109e0:	621a      	str	r2, [r3, #32]
   109e2:	4770      	bx	lr
   109e4:	10002b54 	.word	0x10002b54
   109e8:	00025fc4 	.word	0x00025fc4

000109ec <DmSecPairRsp>:
   109ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   109f0:	4681      	mov	r9, r0
   109f2:	2008      	movs	r0, #8
   109f4:	4688      	mov	r8, r1
   109f6:	4617      	mov	r7, r2
   109f8:	461e      	mov	r6, r3
   109fa:	f89d 5020 	ldrb.w	r5, [sp, #32]
   109fe:	f009 ff96 	bl	1a92e <WsfMsgAlloc>
   10a02:	b180      	cbz	r0, 10a26 <DmSecPairRsp+0x3a>
   10a04:	2302      	movs	r3, #2
   10a06:	f006 0607 	and.w	r6, r6, #7
   10a0a:	f005 0507 	and.w	r5, r5, #7
   10a0e:	7083      	strb	r3, [r0, #2]
   10a10:	f880 8004 	strb.w	r8, [r0, #4]
   10a14:	7147      	strb	r7, [r0, #5]
   10a16:	7186      	strb	r6, [r0, #6]
   10a18:	71c5      	strb	r5, [r0, #7]
   10a1a:	f8a0 9000 	strh.w	r9, [r0]
   10a1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a22:	f000 bbc6 	b.w	111b2 <SmpDmMsgSend>
   10a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010a2a <DmSecSlaveReq>:
   10a2a:	b538      	push	{r3, r4, r5, lr}
   10a2c:	4605      	mov	r5, r0
   10a2e:	2006      	movs	r0, #6
   10a30:	460c      	mov	r4, r1
   10a32:	f009 ff7c 	bl	1a92e <WsfMsgAlloc>
   10a36:	b138      	cbz	r0, 10a48 <DmSecSlaveReq+0x1e>
   10a38:	2205      	movs	r2, #5
   10a3a:	7082      	strb	r2, [r0, #2]
   10a3c:	7104      	strb	r4, [r0, #4]
   10a3e:	8005      	strh	r5, [r0, #0]
   10a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10a44:	f000 bbb5 	b.w	111b2 <SmpDmMsgSend>
   10a48:	bd38      	pop	{r3, r4, r5, pc}

00010a4a <DmSecLtkRsp>:
   10a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a4e:	4680      	mov	r8, r0
   10a50:	2016      	movs	r0, #22
   10a52:	460d      	mov	r5, r1
   10a54:	4617      	mov	r7, r2
   10a56:	461e      	mov	r6, r3
   10a58:	f009 ff69 	bl	1a92e <WsfMsgAlloc>
   10a5c:	4604      	mov	r4, r0
   10a5e:	b188      	cbz	r0, 10a84 <DmSecLtkRsp+0x3a>
   10a60:	2351      	movs	r3, #81	; 0x51
   10a62:	7083      	strb	r3, [r0, #2]
   10a64:	f8a0 8000 	strh.w	r8, [r0]
   10a68:	7505      	strb	r5, [r0, #20]
   10a6a:	7547      	strb	r7, [r0, #21]
   10a6c:	b11d      	cbz	r5, 10a76 <DmSecLtkRsp+0x2c>
   10a6e:	4631      	mov	r1, r6
   10a70:	3004      	adds	r0, #4
   10a72:	f009 f912 	bl	19c9a <Calc128Cpy>
   10a76:	4b04      	ldr	r3, [pc, #16]	; (10a88 <DmSecLtkRsp+0x3e>)
   10a78:	4621      	mov	r1, r4
   10a7a:	7b18      	ldrb	r0, [r3, #12]
   10a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10a80:	f009 bf79 	b.w	1a976 <WsfMsgSend>
   10a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a88:	10003e2c 	.word	0x10003e2c

00010a8c <l2cDefaultDataCback>:
   10a8c:	4770      	bx	lr

00010a8e <l2cDefaultDataCidCback>:
   10a8e:	4770      	bx	lr

00010a90 <l2cDefaultCtrlCback>:
   10a90:	4770      	bx	lr

00010a92 <l2cHciFlowCback>:
   10a92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10a94:	460d      	mov	r5, r1
   10a96:	f7fe ffed 	bl	fa74 <DmConnIdByHandle>
   10a9a:	b280      	uxth	r0, r0
   10a9c:	f8ad 0004 	strh.w	r0, [sp, #4]
   10aa0:	b178      	cbz	r0, 10ac2 <l2cHciFlowCback+0x30>
   10aa2:	4c09      	ldr	r4, [pc, #36]	; (10ac8 <l2cHciFlowCback+0x36>)
   10aa4:	f88d 5006 	strb.w	r5, [sp, #6]
   10aa8:	68e3      	ldr	r3, [r4, #12]
   10aaa:	a801      	add	r0, sp, #4
   10aac:	4798      	blx	r3
   10aae:	6923      	ldr	r3, [r4, #16]
   10ab0:	f88d 5006 	strb.w	r5, [sp, #6]
   10ab4:	a801      	add	r0, sp, #4
   10ab6:	4798      	blx	r3
   10ab8:	f88d 5006 	strb.w	r5, [sp, #6]
   10abc:	6963      	ldr	r3, [r4, #20]
   10abe:	a801      	add	r0, sp, #4
   10ac0:	4798      	blx	r3
   10ac2:	b003      	add	sp, #12
   10ac4:	bd30      	pop	{r4, r5, pc}
   10ac6:	bf00      	nop
   10ac8:	10003ed8 	.word	0x10003ed8

00010acc <l2cHciAclCback>:
   10acc:	b570      	push	{r4, r5, r6, lr}
   10ace:	78c2      	ldrb	r2, [r0, #3]
   10ad0:	7883      	ldrb	r3, [r0, #2]
   10ad2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10ad6:	b29b      	uxth	r3, r3
   10ad8:	2b03      	cmp	r3, #3
   10ada:	bf83      	ittte	hi
   10adc:	7942      	ldrbhi	r2, [r0, #5]
   10ade:	7901      	ldrbhi	r1, [r0, #4]
   10ae0:	eb01 2102 	addhi.w	r1, r1, r2, lsl #8
   10ae4:	2100      	movls	r1, #0
   10ae6:	bf8a      	itet	hi
   10ae8:	b289      	uxthhi	r1, r1
   10aea:	1d02      	addls	r2, r0, #4
   10aec:	1d82      	addhi	r2, r0, #6
   10aee:	4604      	mov	r4, r0
   10af0:	1d08      	adds	r0, r1, #4
   10af2:	4283      	cmp	r3, r0
   10af4:	d116      	bne.n	10b24 <l2cHciAclCback+0x58>
   10af6:	7863      	ldrb	r3, [r4, #1]
   10af8:	7820      	ldrb	r0, [r4, #0]
   10afa:	7815      	ldrb	r5, [r2, #0]
   10afc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   10b00:	7853      	ldrb	r3, [r2, #1]
   10b02:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   10b06:	b2ad      	uxth	r5, r5
   10b08:	2d05      	cmp	r5, #5
   10b0a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   10b0e:	4b0c      	ldr	r3, [pc, #48]	; (10b40 <l2cHciAclCback+0x74>)
   10b10:	d005      	beq.n	10b1e <l2cHciAclCback+0x52>
   10b12:	2d06      	cmp	r5, #6
   10b14:	d00b      	beq.n	10b2e <l2cHciAclCback+0x62>
   10b16:	2d04      	cmp	r5, #4
   10b18:	d10b      	bne.n	10b32 <l2cHciAclCback+0x66>
   10b1a:	681b      	ldr	r3, [r3, #0]
   10b1c:	e000      	b.n	10b20 <l2cHciAclCback+0x54>
   10b1e:	689b      	ldr	r3, [r3, #8]
   10b20:	4622      	mov	r2, r4
   10b22:	4798      	blx	r3
   10b24:	4620      	mov	r0, r4
   10b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10b2a:	f009 bf17 	b.w	1a95c <WsfMsgFree>
   10b2e:	685b      	ldr	r3, [r3, #4]
   10b30:	e7f6      	b.n	10b20 <l2cHciAclCback+0x54>
   10b32:	6a1e      	ldr	r6, [r3, #32]
   10b34:	460a      	mov	r2, r1
   10b36:	4623      	mov	r3, r4
   10b38:	4629      	mov	r1, r5
   10b3a:	47b0      	blx	r6
   10b3c:	e7f2      	b.n	10b24 <l2cHciAclCback+0x58>
   10b3e:	bf00      	nop
   10b40:	10003ed8 	.word	0x10003ed8

00010b44 <l2cRxSignalingPkt>:
   10b44:	b570      	push	{r4, r5, r6, lr}
   10b46:	460d      	mov	r5, r1
   10b48:	4616      	mov	r6, r2
   10b4a:	4604      	mov	r4, r0
   10b4c:	f7fe ff92 	bl	fa74 <DmConnIdByHandle>
   10b50:	f7ff f81c 	bl	fb8c <DmConnRole>
   10b54:	b940      	cbnz	r0, 10b68 <l2cRxSignalingPkt+0x24>
   10b56:	4b07      	ldr	r3, [pc, #28]	; (10b74 <l2cRxSignalingPkt+0x30>)
   10b58:	699b      	ldr	r3, [r3, #24]
   10b5a:	b153      	cbz	r3, 10b72 <l2cRxSignalingPkt+0x2e>
   10b5c:	4632      	mov	r2, r6
   10b5e:	4629      	mov	r1, r5
   10b60:	4620      	mov	r0, r4
   10b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10b66:	4718      	bx	r3
   10b68:	2801      	cmp	r0, #1
   10b6a:	d102      	bne.n	10b72 <l2cRxSignalingPkt+0x2e>
   10b6c:	4b01      	ldr	r3, [pc, #4]	; (10b74 <l2cRxSignalingPkt+0x30>)
   10b6e:	69db      	ldr	r3, [r3, #28]
   10b70:	e7f3      	b.n	10b5a <l2cRxSignalingPkt+0x16>
   10b72:	bd70      	pop	{r4, r5, r6, pc}
   10b74:	10003ed8 	.word	0x10003ed8

00010b78 <l2cMsgAlloc>:
   10b78:	2100      	movs	r1, #0
   10b7a:	f009 bec3 	b.w	1a904 <WsfMsgDataAlloc>

00010b7e <L2cInit>:
   10b7e:	4b09      	ldr	r3, [pc, #36]	; (10ba4 <L2cInit+0x26>)
   10b80:	4a09      	ldr	r2, [pc, #36]	; (10ba8 <L2cInit+0x2a>)
   10b82:	490a      	ldr	r1, [pc, #40]	; (10bac <L2cInit+0x2e>)
   10b84:	480a      	ldr	r0, [pc, #40]	; (10bb0 <L2cInit+0x32>)
   10b86:	e9c3 2200 	strd	r2, r2, [r3]
   10b8a:	4a0a      	ldr	r2, [pc, #40]	; (10bb4 <L2cInit+0x36>)
   10b8c:	609a      	str	r2, [r3, #8]
   10b8e:	4a0a      	ldr	r2, [pc, #40]	; (10bb8 <L2cInit+0x3a>)
   10b90:	615a      	str	r2, [r3, #20]
   10b92:	e9c3 2203 	strd	r2, r2, [r3, #12]
   10b96:	4a09      	ldr	r2, [pc, #36]	; (10bbc <L2cInit+0x3e>)
   10b98:	621a      	str	r2, [r3, #32]
   10b9a:	2201      	movs	r2, #1
   10b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   10ba0:	f009 bd52 	b.w	1a648 <HciAclRegister>
   10ba4:	10003ed8 	.word	0x10003ed8
   10ba8:	00010a8d 	.word	0x00010a8d
   10bac:	00010a93 	.word	0x00010a93
   10bb0:	00010acd 	.word	0x00010acd
   10bb4:	00010b45 	.word	0x00010b45
   10bb8:	00010a91 	.word	0x00010a91
   10bbc:	00010a8f 	.word	0x00010a8f

00010bc0 <L2cRegister>:
   10bc0:	4b03      	ldr	r3, [pc, #12]	; (10bd0 <L2cRegister+0x10>)
   10bc2:	2804      	cmp	r0, #4
   10bc4:	bf07      	ittee	eq
   10bc6:	6019      	streq	r1, [r3, #0]
   10bc8:	60da      	streq	r2, [r3, #12]
   10bca:	6059      	strne	r1, [r3, #4]
   10bcc:	611a      	strne	r2, [r3, #16]
   10bce:	4770      	bx	lr
   10bd0:	10003ed8 	.word	0x10003ed8

00010bd4 <L2cDataReq>:
   10bd4:	b410      	push	{r4}
   10bd6:	7019      	strb	r1, [r3, #0]
   10bd8:	b2d4      	uxtb	r4, r2
   10bda:	0a09      	lsrs	r1, r1, #8
   10bdc:	7059      	strb	r1, [r3, #1]
   10bde:	1d21      	adds	r1, r4, #4
   10be0:	7099      	strb	r1, [r3, #2]
   10be2:	1d11      	adds	r1, r2, #4
   10be4:	1209      	asrs	r1, r1, #8
   10be6:	0a12      	lsrs	r2, r2, #8
   10be8:	7198      	strb	r0, [r3, #6]
   10bea:	0a00      	lsrs	r0, r0, #8
   10bec:	711c      	strb	r4, [r3, #4]
   10bee:	71d8      	strb	r0, [r3, #7]
   10bf0:	70d9      	strb	r1, [r3, #3]
   10bf2:	715a      	strb	r2, [r3, #5]
   10bf4:	4618      	mov	r0, r3
   10bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
   10bfa:	f004 bfc9 	b.w	15b90 <HciSendAclData>

00010bfe <l2cSendCmdReject>:
   10bfe:	b570      	push	{r4, r5, r6, lr}
   10c00:	4605      	mov	r5, r0
   10c02:	200e      	movs	r0, #14
   10c04:	460e      	mov	r6, r1
   10c06:	4614      	mov	r4, r2
   10c08:	f7ff ffb6 	bl	10b78 <l2cMsgAlloc>
   10c0c:	4603      	mov	r3, r0
   10c0e:	b180      	cbz	r0, 10c32 <l2cSendCmdReject+0x34>
   10c10:	2201      	movs	r2, #1
   10c12:	7202      	strb	r2, [r0, #8]
   10c14:	2202      	movs	r2, #2
   10c16:	7282      	strb	r2, [r0, #10]
   10c18:	7304      	strb	r4, [r0, #12]
   10c1a:	2200      	movs	r2, #0
   10c1c:	0a24      	lsrs	r4, r4, #8
   10c1e:	72c2      	strb	r2, [r0, #11]
   10c20:	7246      	strb	r6, [r0, #9]
   10c22:	7344      	strb	r4, [r0, #13]
   10c24:	4629      	mov	r1, r5
   10c26:	2206      	movs	r2, #6
   10c28:	2005      	movs	r0, #5
   10c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10c2e:	f7ff bfd1 	b.w	10bd4 <L2cDataReq>
   10c32:	bd70      	pop	{r4, r5, r6, pc}

00010c34 <l2cSlaveRxSignalingPkt>:
   10c34:	b538      	push	{r3, r4, r5, lr}
   10c36:	4605      	mov	r5, r0
   10c38:	4613      	mov	r3, r2
   10c3a:	7ad0      	ldrb	r0, [r2, #11]
   10c3c:	7a92      	ldrb	r2, [r2, #10]
   10c3e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   10c42:	b292      	uxth	r2, r2
   10c44:	1d10      	adds	r0, r2, #4
   10c46:	4281      	cmp	r1, r0
   10c48:	d116      	bne.n	10c78 <l2cSlaveRxSignalingPkt+0x44>
   10c4a:	7a19      	ldrb	r1, [r3, #8]
   10c4c:	2913      	cmp	r1, #19
   10c4e:	d10f      	bne.n	10c70 <l2cSlaveRxSignalingPkt+0x3c>
   10c50:	2a02      	cmp	r2, #2
   10c52:	d111      	bne.n	10c78 <l2cSlaveRxSignalingPkt+0x44>
   10c54:	7b5c      	ldrb	r4, [r3, #13]
   10c56:	7b19      	ldrb	r1, [r3, #12]
   10c58:	eb01 2104 	add.w	r1, r1, r4, lsl #8
   10c5c:	b28c      	uxth	r4, r1
   10c5e:	480a      	ldr	r0, [pc, #40]	; (10c88 <l2cSlaveRxSignalingPkt+0x54>)
   10c60:	f00a f844 	bl	1acec <WsfTimerStop>
   10c64:	4621      	mov	r1, r4
   10c66:	4628      	mov	r0, r5
   10c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c6c:	f7fe bfe6 	b.w	fc3c <DmL2cConnUpdateCnf>
   10c70:	2901      	cmp	r1, #1
   10c72:	d101      	bne.n	10c78 <l2cSlaveRxSignalingPkt+0x44>
   10c74:	460c      	mov	r4, r1
   10c76:	e7f2      	b.n	10c5e <l2cSlaveRxSignalingPkt+0x2a>
   10c78:	7a59      	ldrb	r1, [r3, #9]
   10c7a:	4628      	mov	r0, r5
   10c7c:	2200      	movs	r2, #0
   10c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c82:	f7ff bfbc 	b.w	10bfe <l2cSendCmdReject>
   10c86:	bf00      	nop
   10c88:	10003f00 	.word	0x10003f00

00010c8c <L2cSlaveInit>:
   10c8c:	4b01      	ldr	r3, [pc, #4]	; (10c94 <L2cSlaveInit+0x8>)
   10c8e:	4a02      	ldr	r2, [pc, #8]	; (10c98 <L2cSlaveInit+0xc>)
   10c90:	61da      	str	r2, [r3, #28]
   10c92:	4770      	bx	lr
   10c94:	10003ed8 	.word	0x10003ed8
   10c98:	00010c35 	.word	0x00010c35

00010c9c <L2cDmConnUpdateReq>:
   10c9c:	b570      	push	{r4, r5, r6, lr}
   10c9e:	4e1e      	ldr	r6, [pc, #120]	; (10d18 <L2cDmConnUpdateReq+0x7c>)
   10ca0:	4605      	mov	r5, r0
   10ca2:	460c      	mov	r4, r1
   10ca4:	4630      	mov	r0, r6
   10ca6:	211e      	movs	r1, #30
   10ca8:	f009 fffa 	bl	1aca0 <WsfTimerStartSec>
   10cac:	2014      	movs	r0, #20
   10cae:	8175      	strh	r5, [r6, #10]
   10cb0:	f7ff ff62 	bl	10b78 <l2cMsgAlloc>
   10cb4:	4603      	mov	r3, r0
   10cb6:	b368      	cbz	r0, 10d14 <L2cDmConnUpdateReq+0x78>
   10cb8:	4918      	ldr	r1, [pc, #96]	; (10d1c <L2cDmConnUpdateReq+0x80>)
   10cba:	2212      	movs	r2, #18
   10cbc:	7202      	strb	r2, [r0, #8]
   10cbe:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10cc2:	7242      	strb	r2, [r0, #9]
   10cc4:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10cc8:	2aff      	cmp	r2, #255	; 0xff
   10cca:	bf1a      	itte	ne
   10ccc:	3201      	addne	r2, #1
   10cce:	b2d2      	uxtbne	r2, r2
   10cd0:	2201      	moveq	r2, #1
   10cd2:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   10cd6:	2208      	movs	r2, #8
   10cd8:	7282      	strb	r2, [r0, #10]
   10cda:	2200      	movs	r2, #0
   10cdc:	72c2      	strb	r2, [r0, #11]
   10cde:	8822      	ldrh	r2, [r4, #0]
   10ce0:	7302      	strb	r2, [r0, #12]
   10ce2:	8822      	ldrh	r2, [r4, #0]
   10ce4:	0a12      	lsrs	r2, r2, #8
   10ce6:	7342      	strb	r2, [r0, #13]
   10ce8:	8862      	ldrh	r2, [r4, #2]
   10cea:	7382      	strb	r2, [r0, #14]
   10cec:	8862      	ldrh	r2, [r4, #2]
   10cee:	0a12      	lsrs	r2, r2, #8
   10cf0:	73c2      	strb	r2, [r0, #15]
   10cf2:	88a2      	ldrh	r2, [r4, #4]
   10cf4:	7402      	strb	r2, [r0, #16]
   10cf6:	88a2      	ldrh	r2, [r4, #4]
   10cf8:	0a12      	lsrs	r2, r2, #8
   10cfa:	7442      	strb	r2, [r0, #17]
   10cfc:	88e2      	ldrh	r2, [r4, #6]
   10cfe:	7482      	strb	r2, [r0, #18]
   10d00:	88e2      	ldrh	r2, [r4, #6]
   10d02:	0a12      	lsrs	r2, r2, #8
   10d04:	74c2      	strb	r2, [r0, #19]
   10d06:	4629      	mov	r1, r5
   10d08:	220c      	movs	r2, #12
   10d0a:	2005      	movs	r0, #5
   10d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10d10:	f7ff bf60 	b.w	10bd4 <L2cDataReq>
   10d14:	bd70      	pop	{r4, r5, r6, pc}
   10d16:	bf00      	nop
   10d18:	10003f00 	.word	0x10003f00
   10d1c:	10003ed8 	.word	0x10003ed8

00010d20 <L2cSlaveHandlerInit>:
   10d20:	4b02      	ldr	r3, [pc, #8]	; (10d2c <L2cSlaveHandlerInit+0xc>)
   10d22:	2201      	movs	r2, #1
   10d24:	731a      	strb	r2, [r3, #12]
   10d26:	7218      	strb	r0, [r3, #8]
   10d28:	7418      	strb	r0, [r3, #16]
   10d2a:	4770      	bx	lr
   10d2c:	10003f00 	.word	0x10003f00

00010d30 <L2cSlaveHandler>:
   10d30:	460b      	mov	r3, r1
   10d32:	b129      	cbz	r1, 10d40 <L2cSlaveHandler+0x10>
   10d34:	7889      	ldrb	r1, [r1, #2]
   10d36:	2901      	cmp	r1, #1
   10d38:	d102      	bne.n	10d40 <L2cSlaveHandler+0x10>
   10d3a:	8818      	ldrh	r0, [r3, #0]
   10d3c:	f7fe bf7e 	b.w	fc3c <DmL2cConnUpdateCnf>
   10d40:	4770      	bx	lr
   10d42:	bf00      	nop

00010d44 <smpDmConnCback>:
   10d44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10d46:	4605      	mov	r5, r0
   10d48:	8803      	ldrh	r3, [r0, #0]
   10d4a:	78aa      	ldrb	r2, [r5, #2]
   10d4c:	4e23      	ldr	r6, [pc, #140]	; (10ddc <smpDmConnCback+0x98>)
   10d4e:	b2d8      	uxtb	r0, r3
   10d50:	2a27      	cmp	r2, #39	; 0x27
   10d52:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   10d56:	d120      	bne.n	10d9a <smpDmConnCback+0x56>
   10d58:	f7fe ff18 	bl	fb8c <DmConnRole>
   10d5c:	2338      	movs	r3, #56	; 0x38
   10d5e:	fb03 6304 	mla	r3, r3, r4, r6
   10d62:	b9a8      	cbnz	r0, 10d90 <smpDmConnCback+0x4c>
   10d64:	2201      	movs	r2, #1
   10d66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   10d6a:	220b      	movs	r2, #11
   10d6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   10d70:	2338      	movs	r3, #56	; 0x38
   10d72:	fb03 6404 	mla	r4, r3, r4, r6
   10d76:	88eb      	ldrh	r3, [r5, #6]
   10d78:	8523      	strh	r3, [r4, #40]	; 0x28
   10d7a:	882b      	ldrh	r3, [r5, #0]
   10d7c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   10d80:	2300      	movs	r3, #0
   10d82:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   10d86:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10d8a:	8663      	strh	r3, [r4, #50]	; 0x32
   10d8c:	b002      	add	sp, #8
   10d8e:	bd70      	pop	{r4, r5, r6, pc}
   10d90:	2200      	movs	r2, #0
   10d92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   10d96:	2201      	movs	r2, #1
   10d98:	e7e8      	b.n	10d6c <smpDmConnCback+0x28>
   10d9a:	2138      	movs	r1, #56	; 0x38
   10d9c:	fb01 6404 	mla	r4, r1, r4, r6
   10da0:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   10da4:	2900      	cmp	r1, #0
   10da6:	d0f1      	beq.n	10d8c <smpDmConnCback+0x48>
   10da8:	2a28      	cmp	r2, #40	; 0x28
   10daa:	d1ef      	bne.n	10d8c <smpDmConnCback+0x48>
   10dac:	f8ad 3004 	strh.w	r3, [sp, #4]
   10db0:	230a      	movs	r3, #10
   10db2:	f88d 3006 	strb.w	r3, [sp, #6]
   10db6:	7a2b      	ldrb	r3, [r5, #8]
   10db8:	4620      	mov	r0, r4
   10dba:	3320      	adds	r3, #32
   10dbc:	a901      	add	r1, sp, #4
   10dbe:	f88d 3007 	strb.w	r3, [sp, #7]
   10dc2:	f001 fc10 	bl	125e6 <smpSmExecute>
   10dc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10dc8:	2500      	movs	r5, #0
   10dca:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
   10dce:	2800      	cmp	r0, #0
   10dd0:	d0dc      	beq.n	10d8c <smpDmConnCback+0x48>
   10dd2:	f009 fdc3 	bl	1a95c <WsfMsgFree>
   10dd6:	6265      	str	r5, [r4, #36]	; 0x24
   10dd8:	e7d8      	b.n	10d8c <smpDmConnCback+0x48>
   10dda:	bf00      	nop
   10ddc:	10003f14 	.word	0x10003f14

00010de0 <smpCcbByHandle>:
   10de0:	b508      	push	{r3, lr}
   10de2:	f7fe fe47 	bl	fa74 <DmConnIdByHandle>
   10de6:	b120      	cbz	r0, 10df2 <smpCcbByHandle+0x12>
   10de8:	4b02      	ldr	r3, [pc, #8]	; (10df4 <smpCcbByHandle+0x14>)
   10dea:	3801      	subs	r0, #1
   10dec:	2238      	movs	r2, #56	; 0x38
   10dee:	fb02 3000 	mla	r0, r2, r0, r3
   10df2:	bd08      	pop	{r3, pc}
   10df4:	10003f14 	.word	0x10003f14

00010df8 <smpL2cDataCback>:
   10df8:	b530      	push	{r4, r5, lr}
   10dfa:	b087      	sub	sp, #28
   10dfc:	460d      	mov	r5, r1
   10dfe:	4614      	mov	r4, r2
   10e00:	f7ff ffee 	bl	10de0 <smpCcbByHandle>
   10e04:	b1d8      	cbz	r0, 10e3e <smpL2cDataCback+0x46>
   10e06:	7a23      	ldrb	r3, [r4, #8]
   10e08:	1e5a      	subs	r2, r3, #1
   10e0a:	2a0d      	cmp	r2, #13
   10e0c:	d817      	bhi.n	10e3e <smpL2cDataCback+0x46>
   10e0e:	4a10      	ldr	r2, [pc, #64]	; (10e50 <smpL2cDataCback+0x58>)
   10e10:	5cd2      	ldrb	r2, [r2, r3]
   10e12:	42aa      	cmp	r2, r5
   10e14:	d113      	bne.n	10e3e <smpL2cDataCback+0x46>
   10e16:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
   10e1a:	429a      	cmp	r2, r3
   10e1c:	d011      	beq.n	10e42 <smpL2cDataCback+0x4a>
   10e1e:	2b05      	cmp	r3, #5
   10e20:	d10d      	bne.n	10e3e <smpL2cDataCback+0x46>
   10e22:	2307      	movs	r3, #7
   10e24:	f88d 3002 	strb.w	r3, [sp, #2]
   10e28:	7a63      	ldrb	r3, [r4, #9]
   10e2a:	f88d 3003 	strb.w	r3, [sp, #3]
   10e2e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   10e32:	f8ad 3000 	strh.w	r3, [sp]
   10e36:	4669      	mov	r1, sp
   10e38:	9401      	str	r4, [sp, #4]
   10e3a:	f001 fbd4 	bl	125e6 <smpSmExecute>
   10e3e:	b007      	add	sp, #28
   10e40:	bd30      	pop	{r4, r5, pc}
   10e42:	2a05      	cmp	r2, #5
   10e44:	d0ed      	beq.n	10e22 <smpL2cDataCback+0x2a>
   10e46:	2306      	movs	r3, #6
   10e48:	f88d 3002 	strb.w	r3, [sp, #2]
   10e4c:	e7ef      	b.n	10e2e <smpL2cDataCback+0x36>
   10e4e:	bf00      	nop
   10e50:	00025fd0 	.word	0x00025fd0

00010e54 <smpCcbByConnId>:
   10e54:	4b02      	ldr	r3, [pc, #8]	; (10e60 <smpCcbByConnId+0xc>)
   10e56:	2238      	movs	r2, #56	; 0x38
   10e58:	3801      	subs	r0, #1
   10e5a:	fb02 3000 	mla	r0, r2, r0, r3
   10e5e:	4770      	bx	lr
   10e60:	10003f14 	.word	0x10003f14

00010e64 <smpCalcC1Part1>:
   10e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e66:	4604      	mov	r4, r0
   10e68:	b089      	sub	sp, #36	; 0x24
   10e6a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10e6e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10e72:	460f      	mov	r7, r1
   10e74:	4615      	mov	r5, r2
   10e76:	2b00      	cmp	r3, #0
   10e78:	d05a      	beq.n	10f30 <smpCalcC1Part1+0xcc>
   10e7a:	f7fe fe49 	bl	fb10 <DmConnLocalRpa>
   10e7e:	f008 fef2 	bl	19c66 <BdaIsZeros>
   10e82:	2800      	cmp	r0, #0
   10e84:	d052      	beq.n	10f2c <smpCalcC1Part1+0xc8>
   10e86:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10e8a:	f7fe fe23 	bl	fad4 <DmConnLocalAddrType>
   10e8e:	4606      	mov	r6, r0
   10e90:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10e94:	f7fe fe32 	bl	fafc <DmConnPeerRpa>
   10e98:	f008 fee5 	bl	19c66 <BdaIsZeros>
   10e9c:	2800      	cmp	r0, #0
   10e9e:	d05f      	beq.n	10f60 <smpCalcC1Part1+0xfc>
   10ea0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10ea4:	f7fe fe04 	bl	fab0 <DmConnPeerAddrType>
   10ea8:	462b      	mov	r3, r5
   10eaa:	f10d 0112 	add.w	r1, sp, #18
   10eae:	f813 2b02 	ldrb.w	r2, [r3], #2
   10eb2:	4056      	eors	r6, r2
   10eb4:	786a      	ldrb	r2, [r5, #1]
   10eb6:	f88d 6010 	strb.w	r6, [sp, #16]
   10eba:	4050      	eors	r0, r2
   10ebc:	f88d 0011 	strb.w	r0, [sp, #17]
   10ec0:	f105 0609 	add.w	r6, r5, #9
   10ec4:	f104 0010 	add.w	r0, r4, #16
   10ec8:	f813 cb01 	ldrb.w	ip, [r3], #1
   10ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
   10ed0:	42b3      	cmp	r3, r6
   10ed2:	ea82 020c 	eor.w	r2, r2, ip
   10ed6:	f801 2b01 	strb.w	r2, [r1], #1
   10eda:	d1f5      	bne.n	10ec8 <smpCalcC1Part1+0x64>
   10edc:	f104 0017 	add.w	r0, r4, #23
   10ee0:	3510      	adds	r5, #16
   10ee2:	f10d 0119 	add.w	r1, sp, #25
   10ee6:	f813 6b01 	ldrb.w	r6, [r3], #1
   10eea:	f810 2b01 	ldrb.w	r2, [r0], #1
   10eee:	42ab      	cmp	r3, r5
   10ef0:	ea82 0206 	eor.w	r2, r2, r6
   10ef4:	f801 2b01 	strb.w	r2, [r1], #1
   10ef8:	d1f5      	bne.n	10ee6 <smpCalcC1Part1+0x82>
   10efa:	4a1a      	ldr	r2, [pc, #104]	; (10f64 <smpCalcC1Part1+0x100>)
   10efc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10f00:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10f04:	210b      	movs	r1, #11
   10f06:	9100      	str	r1, [sp, #0]
   10f08:	4638      	mov	r0, r7
   10f0a:	a904      	add	r1, sp, #16
   10f0c:	f007 f8f0 	bl	180f0 <SecAes>
   10f10:	28ff      	cmp	r0, #255	; 0xff
   10f12:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10f16:	d107      	bne.n	10f28 <smpCalcC1Part1+0xc4>
   10f18:	f640 0303 	movw	r3, #2051	; 0x803
   10f1c:	a903      	add	r1, sp, #12
   10f1e:	4620      	mov	r0, r4
   10f20:	f8ad 300e 	strh.w	r3, [sp, #14]
   10f24:	f001 fb5f 	bl	125e6 <smpSmExecute>
   10f28:	b009      	add	sp, #36	; 0x24
   10f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f2c:	2601      	movs	r6, #1
   10f2e:	e7af      	b.n	10e90 <smpCalcC1Part1+0x2c>
   10f30:	f7fe fde4 	bl	fafc <DmConnPeerRpa>
   10f34:	f008 fe97 	bl	19c66 <BdaIsZeros>
   10f38:	b180      	cbz	r0, 10f5c <smpCalcC1Part1+0xf8>
   10f3a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10f3e:	f7fe fdb7 	bl	fab0 <DmConnPeerAddrType>
   10f42:	4606      	mov	r6, r0
   10f44:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10f48:	f7fe fde2 	bl	fb10 <DmConnLocalRpa>
   10f4c:	f008 fe8b 	bl	19c66 <BdaIsZeros>
   10f50:	b130      	cbz	r0, 10f60 <smpCalcC1Part1+0xfc>
   10f52:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10f56:	f7fe fdbd 	bl	fad4 <DmConnLocalAddrType>
   10f5a:	e7a5      	b.n	10ea8 <smpCalcC1Part1+0x44>
   10f5c:	2601      	movs	r6, #1
   10f5e:	e7f1      	b.n	10f44 <smpCalcC1Part1+0xe0>
   10f60:	2001      	movs	r0, #1
   10f62:	e7a1      	b.n	10ea8 <smpCalcC1Part1+0x44>
   10f64:	10003f14 	.word	0x10003f14

00010f68 <smpCalcC1Part2>:
   10f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f6c:	4604      	mov	r4, r0
   10f6e:	b088      	sub	sp, #32
   10f70:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10f74:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10f78:	4688      	mov	r8, r1
   10f7a:	4615      	mov	r5, r2
   10f7c:	2b00      	cmp	r3, #0
   10f7e:	d058      	beq.n	11032 <smpCalcC1Part2+0xca>
   10f80:	f7fe fdc6 	bl	fb10 <DmConnLocalRpa>
   10f84:	4606      	mov	r6, r0
   10f86:	f008 fe6e 	bl	19c66 <BdaIsZeros>
   10f8a:	b120      	cbz	r0, 10f96 <smpCalcC1Part2+0x2e>
   10f8c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10f90:	f7fe fdaa 	bl	fae8 <DmConnLocalAddr>
   10f94:	4606      	mov	r6, r0
   10f96:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10f9a:	f7fe fdaf 	bl	fafc <DmConnPeerRpa>
   10f9e:	4607      	mov	r7, r0
   10fa0:	f008 fe61 	bl	19c66 <BdaIsZeros>
   10fa4:	b120      	cbz	r0, 10fb0 <smpCalcC1Part2+0x48>
   10fa6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10faa:	f7fe fd8b 	bl	fac4 <DmConnPeerAddr>
   10fae:	4607      	mov	r7, r0
   10fb0:	4628      	mov	r0, r5
   10fb2:	2300      	movs	r3, #0
   10fb4:	a904      	add	r1, sp, #16
   10fb6:	f817 2b01 	ldrb.w	r2, [r7], #1
   10fba:	f810 cb01 	ldrb.w	ip, [r0], #1
   10fbe:	ea82 020c 	eor.w	r2, r2, ip
   10fc2:	545a      	strb	r2, [r3, r1]
   10fc4:	3301      	adds	r3, #1
   10fc6:	2b06      	cmp	r3, #6
   10fc8:	d1f5      	bne.n	10fb6 <smpCalcC1Part2+0x4e>
   10fca:	1dab      	adds	r3, r5, #6
   10fcc:	f105 070c 	add.w	r7, r5, #12
   10fd0:	f10d 0016 	add.w	r0, sp, #22
   10fd4:	f816 2b01 	ldrb.w	r2, [r6], #1
   10fd8:	f813 cb01 	ldrb.w	ip, [r3], #1
   10fdc:	ea82 020c 	eor.w	r2, r2, ip
   10fe0:	42bb      	cmp	r3, r7
   10fe2:	f800 2b01 	strb.w	r2, [r0], #1
   10fe6:	d1f5      	bne.n	10fd4 <smpCalcC1Part2+0x6c>
   10fe8:	7b2b      	ldrb	r3, [r5, #12]
   10fea:	f88d 301c 	strb.w	r3, [sp, #28]
   10fee:	7b6b      	ldrb	r3, [r5, #13]
   10ff0:	f88d 301d 	strb.w	r3, [sp, #29]
   10ff4:	4a1b      	ldr	r2, [pc, #108]	; (11064 <smpCalcC1Part2+0xfc>)
   10ff6:	7bab      	ldrb	r3, [r5, #14]
   10ff8:	f88d 301e 	strb.w	r3, [sp, #30]
   10ffc:	200b      	movs	r0, #11
   10ffe:	7beb      	ldrb	r3, [r5, #15]
   11000:	f88d 301f 	strb.w	r3, [sp, #31]
   11004:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   11008:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1100c:	9000      	str	r0, [sp, #0]
   1100e:	4640      	mov	r0, r8
   11010:	f007 f86e 	bl	180f0 <SecAes>
   11014:	28ff      	cmp	r0, #255	; 0xff
   11016:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   1101a:	d107      	bne.n	1102c <smpCalcC1Part2+0xc4>
   1101c:	f640 0303 	movw	r3, #2051	; 0x803
   11020:	a903      	add	r1, sp, #12
   11022:	4620      	mov	r0, r4
   11024:	f8ad 300e 	strh.w	r3, [sp, #14]
   11028:	f001 fadd 	bl	125e6 <smpSmExecute>
   1102c:	b008      	add	sp, #32
   1102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11032:	f7fe fd63 	bl	fafc <DmConnPeerRpa>
   11036:	4606      	mov	r6, r0
   11038:	f008 fe15 	bl	19c66 <BdaIsZeros>
   1103c:	b120      	cbz	r0, 11048 <smpCalcC1Part2+0xe0>
   1103e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11042:	f7fe fd3f 	bl	fac4 <DmConnPeerAddr>
   11046:	4606      	mov	r6, r0
   11048:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1104c:	f7fe fd60 	bl	fb10 <DmConnLocalRpa>
   11050:	4607      	mov	r7, r0
   11052:	f008 fe08 	bl	19c66 <BdaIsZeros>
   11056:	2800      	cmp	r0, #0
   11058:	d0aa      	beq.n	10fb0 <smpCalcC1Part2+0x48>
   1105a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1105e:	f7fe fd43 	bl	fae8 <DmConnLocalAddr>
   11062:	e7a4      	b.n	10fae <smpCalcC1Part2+0x46>
   11064:	10003f14 	.word	0x10003f14

00011068 <smpCalcS1>:
   11068:	b570      	push	{r4, r5, r6, lr}
   1106a:	b088      	sub	sp, #32
   1106c:	4616      	mov	r6, r2
   1106e:	4604      	mov	r4, r0
   11070:	460d      	mov	r5, r1
   11072:	a804      	add	r0, sp, #16
   11074:	4619      	mov	r1, r3
   11076:	f008 fe1e 	bl	19cb6 <Calc128Cpy64>
   1107a:	4631      	mov	r1, r6
   1107c:	a806      	add	r0, sp, #24
   1107e:	f008 fe1a 	bl	19cb6 <Calc128Cpy64>
   11082:	4a0c      	ldr	r2, [pc, #48]	; (110b4 <smpCalcS1+0x4c>)
   11084:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11088:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   1108c:	210b      	movs	r1, #11
   1108e:	9100      	str	r1, [sp, #0]
   11090:	4628      	mov	r0, r5
   11092:	a904      	add	r1, sp, #16
   11094:	f007 f82c 	bl	180f0 <SecAes>
   11098:	28ff      	cmp	r0, #255	; 0xff
   1109a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   1109e:	d107      	bne.n	110b0 <smpCalcS1+0x48>
   110a0:	f640 0303 	movw	r3, #2051	; 0x803
   110a4:	a903      	add	r1, sp, #12
   110a6:	4620      	mov	r0, r4
   110a8:	f8ad 300e 	strh.w	r3, [sp, #14]
   110ac:	f001 fa9b 	bl	125e6 <smpSmExecute>
   110b0:	b008      	add	sp, #32
   110b2:	bd70      	pop	{r4, r5, r6, pc}
   110b4:	10003f14 	.word	0x10003f14

000110b8 <smpGenerateLtk>:
   110b8:	b570      	push	{r4, r5, r6, lr}
   110ba:	6a04      	ldr	r4, [r0, #32]
   110bc:	1d26      	adds	r6, r4, #4
   110be:	4605      	mov	r5, r0
   110c0:	f894 1020 	ldrb.w	r1, [r4, #32]
   110c4:	4630      	mov	r0, r6
   110c6:	f007 fbe5 	bl	18894 <SecRand>
   110ca:	f894 0020 	ldrb.w	r0, [r4, #32]
   110ce:	2100      	movs	r1, #0
   110d0:	f1c0 0210 	rsb	r2, r0, #16
   110d4:	4430      	add	r0, r6
   110d6:	f7fb f941 	bl	c35c <memset>
   110da:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   110de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   110e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   110e6:	4622      	mov	r2, r4
   110e8:	83a3      	strh	r3, [r4, #28]
   110ea:	f852 3f32 	ldr.w	r3, [r2, #50]!
   110ee:	6163      	str	r3, [r4, #20]
   110f0:	6853      	ldr	r3, [r2, #4]
   110f2:	61a3      	str	r3, [r4, #24]
   110f4:	2301      	movs	r3, #1
   110f6:	77a3      	strb	r3, [r4, #30]
   110f8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   110fc:	f013 0f04 	tst.w	r3, #4
   11100:	bf14      	ite	ne
   11102:	2302      	movne	r3, #2
   11104:	2301      	moveq	r3, #1
   11106:	77e3      	strb	r3, [r4, #31]
   11108:	232f      	movs	r3, #47	; 0x2f
   1110a:	70a3      	strb	r3, [r4, #2]
   1110c:	4620      	mov	r0, r4
   1110e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11112:	f7ff ba85 	b.w	10620 <DmSmpCbackExec>

00011116 <smpSendPkt>:
   11116:	b570      	push	{r4, r5, r6, lr}
   11118:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1111c:	4604      	mov	r4, r0
   1111e:	460d      	mov	r5, r1
   11120:	b12b      	cbz	r3, 1112e <smpSendPkt+0x18>
   11122:	6a40      	ldr	r0, [r0, #36]	; 0x24
   11124:	b108      	cbz	r0, 1112a <smpSendPkt+0x14>
   11126:	f009 fc19 	bl	1a95c <WsfMsgFree>
   1112a:	6265      	str	r5, [r4, #36]	; 0x24
   1112c:	bd70      	pop	{r4, r5, r6, pc}
   1112e:	7a0a      	ldrb	r2, [r1, #8]
   11130:	460b      	mov	r3, r1
   11132:	4904      	ldr	r1, [pc, #16]	; (11144 <smpSendPkt+0x2e>)
   11134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11138:	5c8a      	ldrb	r2, [r1, r2]
   1113a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   1113c:	2006      	movs	r0, #6
   1113e:	f7ff bd49 	b.w	10bd4 <L2cDataReq>
   11142:	bf00      	nop
   11144:	00025fd0 	.word	0x00025fd0

00011148 <smpL2cCtrlCback>:
   11148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1114a:	7805      	ldrb	r5, [r0, #0]
   1114c:	4f13      	ldr	r7, [pc, #76]	; (1119c <smpL2cCtrlCback+0x54>)
   1114e:	3d01      	subs	r5, #1
   11150:	2438      	movs	r4, #56	; 0x38
   11152:	fb04 7405 	mla	r4, r4, r5, r7
   11156:	4606      	mov	r6, r0
   11158:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1115c:	b1e2      	cbz	r2, 11198 <smpL2cCtrlCback+0x50>
   1115e:	7883      	ldrb	r3, [r0, #2]
   11160:	2b01      	cmp	r3, #1
   11162:	bf0c      	ite	eq
   11164:	2301      	moveq	r3, #1
   11166:	2300      	movne	r3, #0
   11168:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   1116c:	d014      	beq.n	11198 <smpL2cCtrlCback+0x50>
   1116e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11170:	b121      	cbz	r1, 1117c <smpL2cCtrlCback+0x34>
   11172:	2300      	movs	r3, #0
   11174:	6263      	str	r3, [r4, #36]	; 0x24
   11176:	4620      	mov	r0, r4
   11178:	f7ff ffcd 	bl	11116 <smpSendPkt>
   1117c:	2338      	movs	r3, #56	; 0x38
   1117e:	fb03 7505 	mla	r5, r3, r5, r7
   11182:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   11186:	b13b      	cbz	r3, 11198 <smpL2cCtrlCback+0x50>
   11188:	230c      	movs	r3, #12
   1118a:	70b3      	strb	r3, [r6, #2]
   1118c:	4631      	mov	r1, r6
   1118e:	4620      	mov	r0, r4
   11190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11194:	f001 ba27 	b.w	125e6 <smpSmExecute>
   11198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1119a:	bf00      	nop
   1119c:	10003f14 	.word	0x10003f14

000111a0 <smpStateIdle>:
   111a0:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   111a4:	fab0 f080 	clz	r0, r0
   111a8:	0940      	lsrs	r0, r0, #5
   111aa:	4770      	bx	lr

000111ac <smpMsgAlloc>:
   111ac:	2100      	movs	r1, #0
   111ae:	f009 bba9 	b.w	1a904 <WsfMsgDataAlloc>

000111b2 <SmpDmMsgSend>:
   111b2:	4b03      	ldr	r3, [pc, #12]	; (111c0 <SmpDmMsgSend+0xe>)
   111b4:	4601      	mov	r1, r0
   111b6:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   111ba:	f009 bbdc 	b.w	1a976 <WsfMsgSend>
   111be:	bf00      	nop
   111c0:	10003f14 	.word	0x10003f14

000111c4 <SmpDmGetStk>:
   111c4:	b530      	push	{r4, r5, lr}
   111c6:	4c12      	ldr	r4, [pc, #72]	; (11210 <SmpDmGetStk+0x4c>)
   111c8:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
   111cc:	3801      	subs	r0, #1
   111ce:	4623      	mov	r3, r4
   111d0:	b16a      	cbz	r2, 111ee <SmpDmGetStk+0x2a>
   111d2:	2238      	movs	r2, #56	; 0x38
   111d4:	fb02 4200 	mla	r2, r2, r0, r4
   111d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
   111da:	7825      	ldrb	r5, [r4, #0]
   111dc:	b13d      	cbz	r5, 111ee <SmpDmGetStk+0x2a>
   111de:	6924      	ldr	r4, [r4, #16]
   111e0:	b12c      	cbz	r4, 111ee <SmpDmGetStk+0x2a>
   111e2:	2303      	movs	r3, #3
   111e4:	700b      	strb	r3, [r1, #0]
   111e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
   111e8:	6918      	ldr	r0, [r3, #16]
   111ea:	3010      	adds	r0, #16
   111ec:	bd30      	pop	{r4, r5, pc}
   111ee:	2238      	movs	r2, #56	; 0x38
   111f0:	fb02 3300 	mla	r3, r2, r0, r3
   111f4:	6a18      	ldr	r0, [r3, #32]
   111f6:	2800      	cmp	r0, #0
   111f8:	d0f8      	beq.n	111ec <SmpDmGetStk+0x28>
   111fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   111fe:	f012 0f04 	tst.w	r2, #4
   11202:	bf14      	ite	ne
   11204:	2202      	movne	r2, #2
   11206:	2201      	moveq	r2, #1
   11208:	700a      	strb	r2, [r1, #0]
   1120a:	6a18      	ldr	r0, [r3, #32]
   1120c:	3020      	adds	r0, #32
   1120e:	e7ed      	b.n	111ec <SmpDmGetStk+0x28>
   11210:	10003f14 	.word	0x10003f14

00011214 <SmpDmGetLtk>:
   11214:	4a05      	ldr	r2, [pc, #20]	; (1122c <SmpDmGetLtk+0x18>)
   11216:	1e43      	subs	r3, r0, #1
   11218:	f892 01d4 	ldrb.w	r0, [r2, #468]	; 0x1d4
   1121c:	b128      	cbz	r0, 1122a <SmpDmGetLtk+0x16>
   1121e:	2038      	movs	r0, #56	; 0x38
   11220:	fb00 2003 	mla	r0, r0, r3, r2
   11224:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11226:	6918      	ldr	r0, [r3, #16]
   11228:	3010      	adds	r0, #16
   1122a:	4770      	bx	lr
   1122c:	10003f14 	.word	0x10003f14

00011230 <SmpHandlerInit>:
   11230:	b508      	push	{r3, lr}
   11232:	4b0d      	ldr	r3, [pc, #52]	; (11268 <SmpHandlerInit+0x38>)
   11234:	2201      	movs	r2, #1
   11236:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
   1123a:	3338      	adds	r3, #56	; 0x38
   1123c:	f823 2c2e 	strh.w	r2, [r3, #-46]
   11240:	3201      	adds	r2, #1
   11242:	b292      	uxth	r2, r2
   11244:	2a09      	cmp	r2, #9
   11246:	f803 0c30 	strb.w	r0, [r3, #-48]
   1124a:	f103 0338 	add.w	r3, r3, #56	; 0x38
   1124e:	d1f5      	bne.n	1123c <SmpHandlerInit+0xc>
   11250:	4906      	ldr	r1, [pc, #24]	; (1126c <SmpHandlerInit+0x3c>)
   11252:	4a07      	ldr	r2, [pc, #28]	; (11270 <SmpHandlerInit+0x40>)
   11254:	2006      	movs	r0, #6
   11256:	f7ff fcb3 	bl	10bc0 <L2cRegister>
   1125a:	4906      	ldr	r1, [pc, #24]	; (11274 <SmpHandlerInit+0x44>)
   1125c:	2001      	movs	r0, #1
   1125e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11262:	f7fe baf1 	b.w	f848 <DmConnRegister>
   11266:	bf00      	nop
   11268:	10003f14 	.word	0x10003f14
   1126c:	00010df9 	.word	0x00010df9
   11270:	00011149 	.word	0x00011149
   11274:	00010d45 	.word	0x00010d45

00011278 <SmpHandler>:
   11278:	b410      	push	{r4}
   1127a:	b1b9      	cbz	r1, 112ac <SmpHandler+0x34>
   1127c:	780b      	ldrb	r3, [r1, #0]
   1127e:	480d      	ldr	r0, [pc, #52]	; (112b4 <SmpHandler+0x3c>)
   11280:	3b01      	subs	r3, #1
   11282:	2238      	movs	r2, #56	; 0x38
   11284:	fb02 0203 	mla	r2, r2, r3, r0
   11288:	f892 402d 	ldrb.w	r4, [r2, #45]	; 0x2d
   1128c:	b174      	cbz	r4, 112ac <SmpHandler+0x34>
   1128e:	788c      	ldrb	r4, [r1, #2]
   11290:	2c0b      	cmp	r4, #11
   11292:	d104      	bne.n	1129e <SmpHandler+0x26>
   11294:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
   11298:	78ca      	ldrb	r2, [r1, #3]
   1129a:	4294      	cmp	r4, r2
   1129c:	d106      	bne.n	112ac <SmpHandler+0x34>
   1129e:	2238      	movs	r2, #56	; 0x38
   112a0:	fb02 0003 	mla	r0, r2, r3, r0
   112a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   112a8:	f001 b99d 	b.w	125e6 <smpSmExecute>
   112ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   112b0:	4770      	bx	lr
   112b2:	bf00      	nop
   112b4:	10003f14 	.word	0x10003f14

000112b8 <SmpDmEncryptInd>:
   112b8:	78c3      	ldrb	r3, [r0, #3]
   112ba:	2b00      	cmp	r3, #0
   112bc:	bf0c      	ite	eq
   112be:	2308      	moveq	r3, #8
   112c0:	2309      	movne	r3, #9
   112c2:	4601      	mov	r1, r0
   112c4:	7083      	strb	r3, [r0, #2]
   112c6:	2000      	movs	r0, #0
   112c8:	f7ff bfd6 	b.w	11278 <SmpHandler>

000112cc <SmpScAllocScratchBuffers>:
   112cc:	b538      	push	{r3, r4, r5, lr}
   112ce:	6b45      	ldr	r5, [r0, #52]	; 0x34
   112d0:	68eb      	ldr	r3, [r5, #12]
   112d2:	4604      	mov	r4, r0
   112d4:	b91b      	cbnz	r3, 112de <SmpScAllocScratchBuffers+0x12>
   112d6:	2060      	movs	r0, #96	; 0x60
   112d8:	f009 fa9a 	bl	1a810 <WsfBufAlloc>
   112dc:	60e8      	str	r0, [r5, #12]
   112de:	6b65      	ldr	r5, [r4, #52]	; 0x34
   112e0:	68ab      	ldr	r3, [r5, #8]
   112e2:	b91b      	cbnz	r3, 112ec <SmpScAllocScratchBuffers+0x20>
   112e4:	2040      	movs	r0, #64	; 0x40
   112e6:	f009 fa93 	bl	1a810 <WsfBufAlloc>
   112ea:	60a8      	str	r0, [r5, #8]
   112ec:	6b65      	ldr	r5, [r4, #52]	; 0x34
   112ee:	692b      	ldr	r3, [r5, #16]
   112f0:	b91b      	cbnz	r3, 112fa <SmpScAllocScratchBuffers+0x2e>
   112f2:	2020      	movs	r0, #32
   112f4:	f009 fa8c 	bl	1a810 <WsfBufAlloc>
   112f8:	6128      	str	r0, [r5, #16]
   112fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   112fc:	68d8      	ldr	r0, [r3, #12]
   112fe:	b128      	cbz	r0, 1130c <SmpScAllocScratchBuffers+0x40>
   11300:	6898      	ldr	r0, [r3, #8]
   11302:	b118      	cbz	r0, 1130c <SmpScAllocScratchBuffers+0x40>
   11304:	6918      	ldr	r0, [r3, #16]
   11306:	3000      	adds	r0, #0
   11308:	bf18      	it	ne
   1130a:	2001      	movne	r0, #1
   1130c:	bd38      	pop	{r3, r4, r5, pc}

0001130e <SmpScFreeScratchBuffers>:
   1130e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11310:	b510      	push	{r4, lr}
   11312:	4604      	mov	r4, r0
   11314:	68d8      	ldr	r0, [r3, #12]
   11316:	b120      	cbz	r0, 11322 <SmpScFreeScratchBuffers+0x14>
   11318:	f009 faba 	bl	1a890 <WsfBufFree>
   1131c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1131e:	2200      	movs	r2, #0
   11320:	60da      	str	r2, [r3, #12]
   11322:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11324:	6898      	ldr	r0, [r3, #8]
   11326:	b120      	cbz	r0, 11332 <SmpScFreeScratchBuffers+0x24>
   11328:	f009 fab2 	bl	1a890 <WsfBufFree>
   1132c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1132e:	2200      	movs	r2, #0
   11330:	609a      	str	r2, [r3, #8]
   11332:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11334:	6918      	ldr	r0, [r3, #16]
   11336:	b120      	cbz	r0, 11342 <SmpScFreeScratchBuffers+0x34>
   11338:	f009 faaa 	bl	1a890 <WsfBufFree>
   1133c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1133e:	2200      	movs	r2, #0
   11340:	611a      	str	r2, [r3, #16]
   11342:	bd10      	pop	{r4, pc}

00011344 <SmpScCmac>:
   11344:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11346:	461c      	mov	r4, r3
   11348:	4b0b      	ldr	r3, [pc, #44]	; (11378 <SmpScCmac+0x34>)
   1134a:	9d06      	ldr	r5, [sp, #24]
   1134c:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
   11350:	261b      	movs	r6, #27
   11352:	9601      	str	r6, [sp, #4]
   11354:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   11358:	9600      	str	r6, [sp, #0]
   1135a:	f007 f89f 	bl	1849c <SecCmac>
   1135e:	b948      	cbnz	r0, 11374 <SmpScCmac+0x30>
   11360:	f640 0303 	movw	r3, #2051	; 0x803
   11364:	4629      	mov	r1, r5
   11366:	4620      	mov	r0, r4
   11368:	806b      	strh	r3, [r5, #2]
   1136a:	b002      	add	sp, #8
   1136c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11370:	f001 b939 	b.w	125e6 <smpSmExecute>
   11374:	b002      	add	sp, #8
   11376:	bd70      	pop	{r4, r5, r6, pc}
   11378:	10003f14 	.word	0x10003f14

0001137c <SmpScAlloc>:
   1137c:	b570      	push	{r4, r5, r6, lr}
   1137e:	460e      	mov	r6, r1
   11380:	4615      	mov	r5, r2
   11382:	f009 fa45 	bl	1a810 <WsfBufAlloc>
   11386:	4604      	mov	r4, r0
   11388:	b930      	cbnz	r0, 11398 <SmpScAlloc+0x1c>
   1138a:	f640 0303 	movw	r3, #2051	; 0x803
   1138e:	806b      	strh	r3, [r5, #2]
   11390:	4629      	mov	r1, r5
   11392:	4630      	mov	r0, r6
   11394:	f001 f927 	bl	125e6 <smpSmExecute>
   11398:	4620      	mov	r0, r4
   1139a:	bd70      	pop	{r4, r5, r6, pc}

0001139c <SmpScFree>:
   1139c:	f009 ba78 	b.w	1a890 <WsfBufFree>

000113a0 <SmpScCalcF4>:
   113a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113a4:	4606      	mov	r6, r0
   113a6:	460f      	mov	r7, r1
   113a8:	4615      	mov	r5, r2
   113aa:	460a      	mov	r2, r1
   113ac:	4601      	mov	r1, r0
   113ae:	2041      	movs	r0, #65	; 0x41
   113b0:	461c      	mov	r4, r3
   113b2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   113b6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   113ba:	f7ff ffdf 	bl	1137c <SmpScAlloc>
   113be:	4601      	mov	r1, r0
   113c0:	b1f0      	cbz	r0, 11400 <SmpScCalcF4+0x60>
   113c2:	4603      	mov	r3, r0
   113c4:	462a      	mov	r2, r5
   113c6:	f105 0020 	add.w	r0, r5, #32
   113ca:	f852 5b04 	ldr.w	r5, [r2], #4
   113ce:	f843 5b04 	str.w	r5, [r3], #4
   113d2:	4282      	cmp	r2, r0
   113d4:	d1f9      	bne.n	113ca <SmpScCalcF4+0x2a>
   113d6:	4623      	mov	r3, r4
   113d8:	f101 0220 	add.w	r2, r1, #32
   113dc:	f104 0020 	add.w	r0, r4, #32
   113e0:	f853 4b04 	ldr.w	r4, [r3], #4
   113e4:	f842 4b04 	str.w	r4, [r2], #4
   113e8:	4283      	cmp	r3, r0
   113ea:	d1f9      	bne.n	113e0 <SmpScCalcF4+0x40>
   113ec:	f881 9040 	strb.w	r9, [r1, #64]	; 0x40
   113f0:	4633      	mov	r3, r6
   113f2:	9708      	str	r7, [sp, #32]
   113f4:	4640      	mov	r0, r8
   113f6:	2241      	movs	r2, #65	; 0x41
   113f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113fc:	f7ff bfa2 	b.w	11344 <SmpScCmac>
   11400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011404 <SmpScInit>:
   11404:	4a13      	ldr	r2, [pc, #76]	; (11454 <SmpScInit+0x50>)
   11406:	4b14      	ldr	r3, [pc, #80]	; (11458 <SmpScInit+0x54>)
   11408:	f102 0114 	add.w	r1, r2, #20
   1140c:	66d9      	str	r1, [r3, #108]	; 0x6c
   1140e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   11412:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
   11416:	f102 013c 	add.w	r1, r2, #60	; 0x3c
   1141a:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   1141e:	f102 0150 	add.w	r1, r2, #80	; 0x50
   11422:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
   11426:	f102 0164 	add.w	r1, r2, #100	; 0x64
   1142a:	635a      	str	r2, [r3, #52]	; 0x34
   1142c:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
   11430:	f102 0178 	add.w	r1, r2, #120	; 0x78
   11434:	328c      	adds	r2, #140	; 0x8c
   11436:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
   1143a:	4a08      	ldr	r2, [pc, #32]	; (1145c <SmpScInit+0x58>)
   1143c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   11440:	4a07      	ldr	r2, [pc, #28]	; (11460 <SmpScInit+0x5c>)
   11442:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   11446:	2201      	movs	r2, #1
   11448:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
   1144c:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   11450:	4770      	bx	lr
   11452:	bf00      	nop
   11454:	100040ec 	.word	0x100040ec
   11458:	10003f14 	.word	0x10003f14
   1145c:	0001178d 	.word	0x0001178d
   11460:	00011965 	.word	0x00011965

00011464 <SmpScCat>:
   11464:	b510      	push	{r4, lr}
   11466:	4614      	mov	r4, r2
   11468:	f7fa fe7a 	bl	c160 <memcpy>
   1146c:	4420      	add	r0, r4
   1146e:	bd10      	pop	{r4, pc}

00011470 <SmpScCat128>:
   11470:	b510      	push	{r4, lr}
   11472:	4604      	mov	r4, r0
   11474:	f008 fc11 	bl	19c9a <Calc128Cpy>
   11478:	f104 0010 	add.w	r0, r4, #16
   1147c:	bd10      	pop	{r4, pc}

0001147e <smpScSendPubKey>:
   1147e:	b570      	push	{r4, r5, r6, lr}
   11480:	2201      	movs	r2, #1
   11482:	4605      	mov	r5, r0
   11484:	460e      	mov	r6, r1
   11486:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1148a:	4611      	mov	r1, r2
   1148c:	f7fe fb54 	bl	fb38 <DmConnSetIdle>
   11490:	4628      	mov	r0, r5
   11492:	f000 fe95 	bl	121c0 <smpStartRspTimer>
   11496:	2049      	movs	r0, #73	; 0x49
   11498:	f7ff fe88 	bl	111ac <smpMsgAlloc>
   1149c:	4604      	mov	r4, r0
   1149e:	b1b8      	cbz	r0, 114d0 <smpScSendPubKey+0x52>
   114a0:	230c      	movs	r3, #12
   114a2:	7203      	strb	r3, [r0, #8]
   114a4:	f7ff fa70 	bl	10988 <DmSecGetEccKey>
   114a8:	2220      	movs	r2, #32
   114aa:	4601      	mov	r1, r0
   114ac:	f104 0009 	add.w	r0, r4, #9
   114b0:	f008 fc2e 	bl	19d10 <WStrReverseCpy>
   114b4:	f7ff fa68 	bl	10988 <DmSecGetEccKey>
   114b8:	2220      	movs	r2, #32
   114ba:	1881      	adds	r1, r0, r2
   114bc:	f104 0029 	add.w	r0, r4, #41	; 0x29
   114c0:	f008 fc26 	bl	19d10 <WStrReverseCpy>
   114c4:	4621      	mov	r1, r4
   114c6:	4628      	mov	r0, r5
   114c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   114cc:	f7ff be23 	b.w	11116 <smpSendPkt>
   114d0:	f640 0303 	movw	r3, #2051	; 0x803
   114d4:	8073      	strh	r3, [r6, #2]
   114d6:	4631      	mov	r1, r6
   114d8:	4628      	mov	r0, r5
   114da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   114de:	f001 b882 	b.w	125e6 <smpSmExecute>

000114e2 <smpScSendDHKeyCheck>:
   114e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114e4:	4617      	mov	r7, r2
   114e6:	2201      	movs	r2, #1
   114e8:	4604      	mov	r4, r0
   114ea:	460e      	mov	r6, r1
   114ec:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   114f0:	4611      	mov	r1, r2
   114f2:	f7fe fb21 	bl	fb38 <DmConnSetIdle>
   114f6:	4620      	mov	r0, r4
   114f8:	f000 fe62 	bl	121c0 <smpStartRspTimer>
   114fc:	2019      	movs	r0, #25
   114fe:	f7ff fe55 	bl	111ac <smpMsgAlloc>
   11502:	4605      	mov	r5, r0
   11504:	b160      	cbz	r0, 11520 <smpScSendDHKeyCheck+0x3e>
   11506:	230d      	movs	r3, #13
   11508:	7203      	strb	r3, [r0, #8]
   1150a:	4639      	mov	r1, r7
   1150c:	3009      	adds	r0, #9
   1150e:	2210      	movs	r2, #16
   11510:	f008 fbfe 	bl	19d10 <WStrReverseCpy>
   11514:	4629      	mov	r1, r5
   11516:	4620      	mov	r0, r4
   11518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1151c:	f7ff bdfb 	b.w	11116 <smpSendPkt>
   11520:	f640 0303 	movw	r3, #2051	; 0x803
   11524:	8073      	strh	r3, [r6, #2]
   11526:	4631      	mov	r1, r6
   11528:	4620      	mov	r0, r4
   1152a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1152e:	f001 b85a 	b.w	125e6 <smpSmExecute>

00011532 <smpScSendRand>:
   11532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11534:	4617      	mov	r7, r2
   11536:	2201      	movs	r2, #1
   11538:	4604      	mov	r4, r0
   1153a:	460e      	mov	r6, r1
   1153c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11540:	4611      	mov	r1, r2
   11542:	f7fe faf9 	bl	fb38 <DmConnSetIdle>
   11546:	4620      	mov	r0, r4
   11548:	f000 fe3a 	bl	121c0 <smpStartRspTimer>
   1154c:	2019      	movs	r0, #25
   1154e:	f7ff fe2d 	bl	111ac <smpMsgAlloc>
   11552:	4605      	mov	r5, r0
   11554:	b160      	cbz	r0, 11570 <smpScSendRand+0x3e>
   11556:	2304      	movs	r3, #4
   11558:	7203      	strb	r3, [r0, #8]
   1155a:	4639      	mov	r1, r7
   1155c:	3009      	adds	r0, #9
   1155e:	2210      	movs	r2, #16
   11560:	f008 fbd6 	bl	19d10 <WStrReverseCpy>
   11564:	4629      	mov	r1, r5
   11566:	4620      	mov	r0, r4
   11568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1156c:	f7ff bdd3 	b.w	11116 <smpSendPkt>
   11570:	f640 0303 	movw	r3, #2051	; 0x803
   11574:	8073      	strh	r3, [r6, #2]
   11576:	4631      	mov	r1, r6
   11578:	4620      	mov	r0, r4
   1157a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1157e:	f001 b832 	b.w	125e6 <smpSmExecute>

00011582 <smpScSendPairCnf>:
   11582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11584:	4617      	mov	r7, r2
   11586:	2201      	movs	r2, #1
   11588:	4604      	mov	r4, r0
   1158a:	460e      	mov	r6, r1
   1158c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11590:	4611      	mov	r1, r2
   11592:	f7fe fad1 	bl	fb38 <DmConnSetIdle>
   11596:	4620      	mov	r0, r4
   11598:	f000 fe12 	bl	121c0 <smpStartRspTimer>
   1159c:	2019      	movs	r0, #25
   1159e:	f7ff fe05 	bl	111ac <smpMsgAlloc>
   115a2:	4605      	mov	r5, r0
   115a4:	b160      	cbz	r0, 115c0 <smpScSendPairCnf+0x3e>
   115a6:	2303      	movs	r3, #3
   115a8:	7203      	strb	r3, [r0, #8]
   115aa:	4639      	mov	r1, r7
   115ac:	3009      	adds	r0, #9
   115ae:	2210      	movs	r2, #16
   115b0:	f008 fbae 	bl	19d10 <WStrReverseCpy>
   115b4:	4629      	mov	r1, r5
   115b6:	4620      	mov	r0, r4
   115b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   115bc:	f7ff bdab 	b.w	11116 <smpSendPkt>
   115c0:	f640 0303 	movw	r3, #2051	; 0x803
   115c4:	8073      	strh	r3, [r6, #2]
   115c6:	4631      	mov	r1, r6
   115c8:	4620      	mov	r0, r4
   115ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   115ce:	f001 b80a 	b.w	125e6 <smpSmExecute>

000115d2 <smpGetPkBit>:
   115d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   115d4:	78da      	ldrb	r2, [r3, #3]
   115d6:	68d9      	ldr	r1, [r3, #12]
   115d8:	08d3      	lsrs	r3, r2, #3
   115da:	f1c3 030f 	rsb	r3, r3, #15
   115de:	fa51 f383 	uxtab	r3, r1, r3
   115e2:	f002 0207 	and.w	r2, r2, #7
   115e6:	f893 3020 	ldrb.w	r3, [r3, #32]
   115ea:	fa43 f202 	asr.w	r2, r3, r2
   115ee:	f012 0f01 	tst.w	r2, #1
   115f2:	bf14      	ite	ne
   115f4:	2081      	movne	r0, #129	; 0x81
   115f6:	2080      	moveq	r0, #128	; 0x80
   115f8:	4770      	bx	lr

000115fa <smpGetPeerPublicKey>:
   115fa:	b508      	push	{r3, lr}
   115fc:	f7ff fc2a 	bl	10e54 <smpCcbByConnId>
   11600:	6b40      	ldr	r0, [r0, #52]	; 0x34
   11602:	b100      	cbz	r0, 11606 <smpGetPeerPublicKey+0xc>
   11604:	6880      	ldr	r0, [r0, #8]
   11606:	bd08      	pop	{r3, pc}

00011608 <smpSetPeerPublicKey>:
   11608:	b510      	push	{r4, lr}
   1160a:	460c      	mov	r4, r1
   1160c:	f7ff fc22 	bl	10e54 <smpCcbByConnId>
   11610:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11612:	b14b      	cbz	r3, 11628 <smpSetPeerPublicKey+0x20>
   11614:	689b      	ldr	r3, [r3, #8]
   11616:	4621      	mov	r1, r4
   11618:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1161c:	f851 0b04 	ldr.w	r0, [r1], #4
   11620:	f843 0b04 	str.w	r0, [r3], #4
   11624:	4291      	cmp	r1, r2
   11626:	d1f9      	bne.n	1161c <smpSetPeerPublicKey+0x14>
   11628:	bd10      	pop	{r4, pc}

0001162a <SmpScSetOobCfg>:
   1162a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1162c:	460d      	mov	r5, r1
   1162e:	f7ff fc11 	bl	10e54 <smpCcbByConnId>
   11632:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   11636:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11638:	4604      	mov	r4, r0
   1163a:	f105 0110 	add.w	r1, r5, #16
   1163e:	f105 0730 	add.w	r7, r5, #48	; 0x30
   11642:	f105 0620 	add.w	r6, r5, #32
   11646:	68d8      	ldr	r0, [r3, #12]
   11648:	b1b2      	cbz	r2, 11678 <SmpScSetOobCfg+0x4e>
   1164a:	3050      	adds	r0, #80	; 0x50
   1164c:	f008 fb25 	bl	19c9a <Calc128Cpy>
   11650:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11652:	68d8      	ldr	r0, [r3, #12]
   11654:	4629      	mov	r1, r5
   11656:	3020      	adds	r0, #32
   11658:	f008 fb1f 	bl	19c9a <Calc128Cpy>
   1165c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1165e:	68d8      	ldr	r0, [r3, #12]
   11660:	4639      	mov	r1, r7
   11662:	3040      	adds	r0, #64	; 0x40
   11664:	f008 fb19 	bl	19c9a <Calc128Cpy>
   11668:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1166a:	68d8      	ldr	r0, [r3, #12]
   1166c:	4631      	mov	r1, r6
   1166e:	3030      	adds	r0, #48	; 0x30
   11670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11674:	f008 bb11 	b.w	19c9a <Calc128Cpy>
   11678:	3040      	adds	r0, #64	; 0x40
   1167a:	f008 fb0e 	bl	19c9a <Calc128Cpy>
   1167e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11680:	68d8      	ldr	r0, [r3, #12]
   11682:	4629      	mov	r1, r5
   11684:	3030      	adds	r0, #48	; 0x30
   11686:	f008 fb08 	bl	19c9a <Calc128Cpy>
   1168a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1168c:	68d8      	ldr	r0, [r3, #12]
   1168e:	4639      	mov	r1, r7
   11690:	3050      	adds	r0, #80	; 0x50
   11692:	f008 fb02 	bl	19c9a <Calc128Cpy>
   11696:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11698:	68d8      	ldr	r0, [r3, #12]
   1169a:	4631      	mov	r1, r6
   1169c:	3020      	adds	r0, #32
   1169e:	e7e7      	b.n	11670 <SmpScSetOobCfg+0x46>

000116a0 <smpEventStr>:
   116a0:	3801      	subs	r0, #1
   116a2:	b2c0      	uxtb	r0, r0
   116a4:	281b      	cmp	r0, #27
   116a6:	bf9a      	itte	ls
   116a8:	4b02      	ldrls	r3, [pc, #8]	; (116b4 <smpEventStr+0x14>)
   116aa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   116ae:	4802      	ldrhi	r0, [pc, #8]	; (116b8 <smpEventStr+0x18>)
   116b0:	4770      	bx	lr
   116b2:	bf00      	nop
   116b4:	00025fe0 	.word	0x00025fe0
   116b8:	00026fa4 	.word	0x00026fa4

000116bc <smpStateStr>:
   116bc:	4b03      	ldr	r3, [pc, #12]	; (116cc <smpStateStr+0x10>)
   116be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   116c2:	b10b      	cbz	r3, 116c8 <smpStateStr+0xc>
   116c4:	f000 bbea 	b.w	11e9c <smpiStateStr>
   116c8:	f000 bc12 	b.w	11ef0 <smprStateStr>
   116cc:	10003f14 	.word	0x10003f14

000116d0 <smpLogByteArray>:
   116d0:	4770      	bx	lr
   116d2:	bf00      	nop

000116d4 <smpScCatInitiatorBdAddr>:
   116d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116d6:	4607      	mov	r7, r0
   116d8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   116dc:	460c      	mov	r4, r1
   116de:	f7fd ffab 	bl	f638 <dmConnCcbById>
   116e2:	4605      	mov	r5, r0
   116e4:	b1b0      	cbz	r0, 11714 <smpScCatInitiatorBdAddr+0x40>
   116e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   116ea:	1c66      	adds	r6, r4, #1
   116ec:	b1a3      	cbz	r3, 11718 <smpScCatInitiatorBdAddr+0x44>
   116ee:	f100 071a 	add.w	r7, r0, #26
   116f2:	4638      	mov	r0, r7
   116f4:	f008 fab7 	bl	19c66 <BdaIsZeros>
   116f8:	b920      	cbnz	r0, 11704 <smpScCatInitiatorBdAddr+0x30>
   116fa:	2301      	movs	r3, #1
   116fc:	7023      	strb	r3, [r4, #0]
   116fe:	2206      	movs	r2, #6
   11700:	4639      	mov	r1, r7
   11702:	e003      	b.n	1170c <smpScCatInitiatorBdAddr+0x38>
   11704:	7d2b      	ldrb	r3, [r5, #20]
   11706:	7023      	strb	r3, [r4, #0]
   11708:	2206      	movs	r2, #6
   1170a:	18a9      	adds	r1, r5, r2
   1170c:	4630      	mov	r0, r6
   1170e:	f008 faff 	bl	19d10 <WStrReverseCpy>
   11712:	3407      	adds	r4, #7
   11714:	4620      	mov	r0, r4
   11716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11718:	f100 0720 	add.w	r7, r0, #32
   1171c:	4638      	mov	r0, r7
   1171e:	f008 faa2 	bl	19c66 <BdaIsZeros>
   11722:	2800      	cmp	r0, #0
   11724:	d0e9      	beq.n	116fa <smpScCatInitiatorBdAddr+0x26>
   11726:	7ceb      	ldrb	r3, [r5, #19]
   11728:	7023      	strb	r3, [r4, #0]
   1172a:	2206      	movs	r2, #6
   1172c:	4629      	mov	r1, r5
   1172e:	e7ed      	b.n	1170c <smpScCatInitiatorBdAddr+0x38>

00011730 <smpScCatResponderBdAddr>:
   11730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11732:	4607      	mov	r7, r0
   11734:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11738:	460c      	mov	r4, r1
   1173a:	f7fd ff7d 	bl	f638 <dmConnCcbById>
   1173e:	4605      	mov	r5, r0
   11740:	b1b0      	cbz	r0, 11770 <smpScCatResponderBdAddr+0x40>
   11742:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   11746:	1c66      	adds	r6, r4, #1
   11748:	b1a3      	cbz	r3, 11774 <smpScCatResponderBdAddr+0x44>
   1174a:	f100 0720 	add.w	r7, r0, #32
   1174e:	4638      	mov	r0, r7
   11750:	f008 fa89 	bl	19c66 <BdaIsZeros>
   11754:	b920      	cbnz	r0, 11760 <smpScCatResponderBdAddr+0x30>
   11756:	2301      	movs	r3, #1
   11758:	7023      	strb	r3, [r4, #0]
   1175a:	2206      	movs	r2, #6
   1175c:	4639      	mov	r1, r7
   1175e:	e003      	b.n	11768 <smpScCatResponderBdAddr+0x38>
   11760:	7ceb      	ldrb	r3, [r5, #19]
   11762:	7023      	strb	r3, [r4, #0]
   11764:	2206      	movs	r2, #6
   11766:	4629      	mov	r1, r5
   11768:	4630      	mov	r0, r6
   1176a:	f008 fad1 	bl	19d10 <WStrReverseCpy>
   1176e:	3407      	adds	r4, #7
   11770:	4620      	mov	r0, r4
   11772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11774:	f100 071a 	add.w	r7, r0, #26
   11778:	4638      	mov	r0, r7
   1177a:	f008 fa74 	bl	19c66 <BdaIsZeros>
   1177e:	2800      	cmp	r0, #0
   11780:	d0e9      	beq.n	11756 <smpScCatResponderBdAddr+0x26>
   11782:	7d2b      	ldrb	r3, [r5, #20]
   11784:	7023      	strb	r3, [r4, #0]
   11786:	2206      	movs	r2, #6
   11788:	18a9      	adds	r1, r5, r2
   1178a:	e7ed      	b.n	11768 <smpScCatResponderBdAddr+0x38>

0001178c <smpScProcPairing>:
   1178c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1178e:	2300      	movs	r3, #0
   11790:	7013      	strb	r3, [r2, #0]
   11792:	700b      	strb	r3, [r1, #0]
   11794:	7cc3      	ldrb	r3, [r0, #19]
   11796:	7c85      	ldrb	r5, [r0, #18]
   11798:	f013 0f08 	tst.w	r3, #8
   1179c:	4604      	mov	r4, r0
   1179e:	d039      	beq.n	11814 <smpScProcPairing+0x88>
   117a0:	7e83      	ldrb	r3, [r0, #26]
   117a2:	071e      	lsls	r6, r3, #28
   117a4:	d536      	bpl.n	11814 <smpScProcPairing+0x88>
   117a6:	2d01      	cmp	r5, #1
   117a8:	d002      	beq.n	117b0 <smpScProcPairing+0x24>
   117aa:	7e43      	ldrb	r3, [r0, #25]
   117ac:	2b01      	cmp	r3, #1
   117ae:	d137      	bne.n	11820 <smpScProcPairing+0x94>
   117b0:	2301      	movs	r3, #1
   117b2:	700b      	strb	r3, [r1, #0]
   117b4:	2500      	movs	r5, #0
   117b6:	780b      	ldrb	r3, [r1, #0]
   117b8:	b97b      	cbnz	r3, 117da <smpScProcPairing+0x4e>
   117ba:	7ce3      	ldrb	r3, [r4, #19]
   117bc:	0758      	lsls	r0, r3, #29
   117be:	d402      	bmi.n	117c6 <smpScProcPairing+0x3a>
   117c0:	7ea3      	ldrb	r3, [r4, #26]
   117c2:	075b      	lsls	r3, r3, #29
   117c4:	d509      	bpl.n	117da <smpScProcPairing+0x4e>
   117c6:	7c60      	ldrb	r0, [r4, #17]
   117c8:	2803      	cmp	r0, #3
   117ca:	d006      	beq.n	117da <smpScProcPairing+0x4e>
   117cc:	7e23      	ldrb	r3, [r4, #24]
   117ce:	2b03      	cmp	r3, #3
   117d0:	d003      	beq.n	117da <smpScProcPairing+0x4e>
   117d2:	2801      	cmp	r0, #1
   117d4:	d826      	bhi.n	11824 <smpScProcPairing+0x98>
   117d6:	2b01      	cmp	r3, #1
   117d8:	d83d      	bhi.n	11856 <smpScProcPairing+0xca>
   117da:	f894 c013 	ldrb.w	ip, [r4, #19]
   117de:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   117e2:	f01c 0f08 	tst.w	ip, #8
   117e6:	f000 808e 	beq.w	11906 <smpScProcPairing+0x17a>
   117ea:	7ea7      	ldrb	r7, [r4, #26]
   117ec:	073e      	lsls	r6, r7, #28
   117ee:	f140 808a 	bpl.w	11906 <smpScProcPairing+0x17a>
   117f2:	4b5a      	ldr	r3, [pc, #360]	; (1195c <smpScProcPairing+0x1d0>)
   117f4:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
   117f8:	bb7e      	cbnz	r6, 1185a <smpScProcPairing+0xce>
   117fa:	f8ad 0004 	strh.w	r0, [sp, #4]
   117fe:	f240 3303 	movw	r3, #771	; 0x303
   11802:	a901      	add	r1, sp, #4
   11804:	4620      	mov	r0, r4
   11806:	f8ad 3006 	strh.w	r3, [sp, #6]
   1180a:	f000 feec 	bl	125e6 <smpSmExecute>
   1180e:	4630      	mov	r0, r6
   11810:	b003      	add	sp, #12
   11812:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11814:	2d01      	cmp	r5, #1
   11816:	d103      	bne.n	11820 <smpScProcPairing+0x94>
   11818:	7e63      	ldrb	r3, [r4, #25]
   1181a:	2b01      	cmp	r3, #1
   1181c:	d1cb      	bne.n	117b6 <smpScProcPairing+0x2a>
   1181e:	e7c7      	b.n	117b0 <smpScProcPairing+0x24>
   11820:	2501      	movs	r5, #1
   11822:	e7c8      	b.n	117b6 <smpScProcPairing+0x2a>
   11824:	2804      	cmp	r0, #4
   11826:	d114      	bne.n	11852 <smpScProcPairing+0xc6>
   11828:	2b02      	cmp	r3, #2
   1182a:	d014      	beq.n	11856 <smpScProcPairing+0xca>
   1182c:	1f1f      	subs	r7, r3, #4
   1182e:	427b      	negs	r3, r7
   11830:	417b      	adcs	r3, r7
   11832:	7013      	strb	r3, [r2, #0]
   11834:	7e20      	ldrb	r0, [r4, #24]
   11836:	2802      	cmp	r0, #2
   11838:	d102      	bne.n	11840 <smpScProcPairing+0xb4>
   1183a:	7c60      	ldrb	r0, [r4, #17]
   1183c:	2802      	cmp	r0, #2
   1183e:	d006      	beq.n	1184e <smpScProcPairing+0xc2>
   11840:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   11844:	2800      	cmp	r0, #0
   11846:	bf08      	it	eq
   11848:	f083 0301 	eoreq.w	r3, r3, #1
   1184c:	7013      	strb	r3, [r2, #0]
   1184e:	2500      	movs	r5, #0
   11850:	e7c3      	b.n	117da <smpScProcPairing+0x4e>
   11852:	2300      	movs	r3, #0
   11854:	e7ed      	b.n	11832 <smpScProcPairing+0xa6>
   11856:	2301      	movs	r3, #1
   11858:	e7eb      	b.n	11832 <smpScProcPairing+0xa6>
   1185a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1185c:	f240 1601 	movw	r6, #257	; 0x101
   11860:	801e      	strh	r6, [r3, #0]
   11862:	7812      	ldrb	r2, [r2, #0]
   11864:	711a      	strb	r2, [r3, #4]
   11866:	780a      	ldrb	r2, [r1, #0]
   11868:	b112      	cbz	r2, 11870 <smpScProcPairing+0xe4>
   1186a:	2202      	movs	r2, #2
   1186c:	705a      	strb	r2, [r3, #1]
   1186e:	e017      	b.n	118a0 <smpScProcPairing+0x114>
   11870:	7e22      	ldrb	r2, [r4, #24]
   11872:	b9fd      	cbnz	r5, 118b4 <smpScProcPairing+0x128>
   11874:	2103      	movs	r1, #3
   11876:	2a04      	cmp	r2, #4
   11878:	7059      	strb	r1, [r3, #1]
   1187a:	d106      	bne.n	1188a <smpScProcPairing+0xfe>
   1187c:	7c62      	ldrb	r2, [r4, #17]
   1187e:	2a01      	cmp	r2, #1
   11880:	d001      	beq.n	11886 <smpScProcPairing+0xfa>
   11882:	2a04      	cmp	r2, #4
   11884:	d105      	bne.n	11892 <smpScProcPairing+0x106>
   11886:	2204      	movs	r2, #4
   11888:	e7f0      	b.n	1186c <smpScProcPairing+0xe0>
   1188a:	2a01      	cmp	r2, #1
   1188c:	d101      	bne.n	11892 <smpScProcPairing+0x106>
   1188e:	7c62      	ldrb	r2, [r4, #17]
   11890:	e7f7      	b.n	11882 <smpScProcPairing+0xf6>
   11892:	f01c 0f10 	tst.w	ip, #16
   11896:	d003      	beq.n	118a0 <smpScProcPairing+0x114>
   11898:	06fa      	lsls	r2, r7, #27
   1189a:	d501      	bpl.n	118a0 <smpScProcPairing+0x114>
   1189c:	2201      	movs	r2, #1
   1189e:	709a      	strb	r2, [r3, #2]
   118a0:	f8ad 0004 	strh.w	r0, [sp, #4]
   118a4:	4620      	mov	r0, r4
   118a6:	f7ff fd11 	bl	112cc <SmpScAllocScratchBuffers>
   118aa:	b148      	cbz	r0, 118c0 <smpScProcPairing+0x134>
   118ac:	2310      	movs	r3, #16
   118ae:	f88d 3006 	strb.w	r3, [sp, #6]
   118b2:	e009      	b.n	118c8 <smpScProcPairing+0x13c>
   118b4:	2a01      	cmp	r2, #1
   118b6:	d1f3      	bne.n	118a0 <smpScProcPairing+0x114>
   118b8:	7c62      	ldrb	r2, [r4, #17]
   118ba:	2a01      	cmp	r2, #1
   118bc:	d1f0      	bne.n	118a0 <smpScProcPairing+0x114>
   118be:	e7e2      	b.n	11886 <smpScProcPairing+0xfa>
   118c0:	f640 0303 	movw	r3, #2051	; 0x803
   118c4:	f8ad 3006 	strh.w	r3, [sp, #6]
   118c8:	a901      	add	r1, sp, #4
   118ca:	4620      	mov	r0, r4
   118cc:	f000 fe8b 	bl	125e6 <smpSmExecute>
   118d0:	7ce2      	ldrb	r2, [r4, #19]
   118d2:	7ea1      	ldrb	r1, [r4, #26]
   118d4:	ea01 0302 	and.w	r3, r1, r2
   118d8:	bb6d      	cbnz	r5, 11936 <smpScProcPairing+0x1aa>
   118da:	f043 0304 	orr.w	r3, r3, #4
   118de:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   118e2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   118e6:	2b00      	cmp	r3, #0
   118e8:	bf08      	it	eq
   118ea:	460a      	moveq	r2, r1
   118ec:	4b1c      	ldr	r3, [pc, #112]	; (11960 <smpScProcPairing+0x1d4>)
   118ee:	6819      	ldr	r1, [r3, #0]
   118f0:	b325      	cbz	r5, 1193c <smpScProcPairing+0x1b0>
   118f2:	798b      	ldrb	r3, [r1, #6]
   118f4:	f003 0304 	and.w	r3, r3, #4
   118f8:	421a      	tst	r2, r3
   118fa:	d01f      	beq.n	1193c <smpScProcPairing+0x1b0>
   118fc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11900:	f8ad 3004 	strh.w	r3, [sp, #4]
   11904:	e007      	b.n	11916 <smpScProcPairing+0x18a>
   11906:	4b16      	ldr	r3, [pc, #88]	; (11960 <smpScProcPairing+0x1d4>)
   11908:	681b      	ldr	r3, [r3, #0]
   1190a:	799b      	ldrb	r3, [r3, #6]
   1190c:	f013 0308 	ands.w	r3, r3, #8
   11910:	d00b      	beq.n	1192a <smpScProcPairing+0x19e>
   11912:	f8ad 0004 	strh.w	r0, [sp, #4]
   11916:	f240 3303 	movw	r3, #771	; 0x303
   1191a:	a901      	add	r1, sp, #4
   1191c:	4620      	mov	r0, r4
   1191e:	f8ad 3006 	strh.w	r3, [sp, #6]
   11922:	2600      	movs	r6, #0
   11924:	f000 fe5f 	bl	125e6 <smpSmExecute>
   11928:	e771      	b.n	1180e <smpScProcPairing+0x82>
   1192a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1192c:	7013      	strb	r3, [r2, #0]
   1192e:	f8ad 0004 	strh.w	r0, [sp, #4]
   11932:	2311      	movs	r3, #17
   11934:	e7bb      	b.n	118ae <smpScProcPairing+0x122>
   11936:	f023 0304 	bic.w	r3, r3, #4
   1193a:	e7d0      	b.n	118de <smpScProcPairing+0x152>
   1193c:	78cb      	ldrb	r3, [r1, #3]
   1193e:	7d22      	ldrb	r2, [r4, #20]
   11940:	429a      	cmp	r2, r3
   11942:	d302      	bcc.n	1194a <smpScProcPairing+0x1be>
   11944:	7ee2      	ldrb	r2, [r4, #27]
   11946:	429a      	cmp	r2, r3
   11948:	d206      	bcs.n	11958 <smpScProcPairing+0x1cc>
   1194a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1194e:	f8ad 3004 	strh.w	r3, [sp, #4]
   11952:	f240 6303 	movw	r3, #1539	; 0x603
   11956:	e7e0      	b.n	1191a <smpScProcPairing+0x18e>
   11958:	2601      	movs	r6, #1
   1195a:	e758      	b.n	1180e <smpScProcPairing+0x82>
   1195c:	10003f14 	.word	0x10003f14
   11960:	10002b88 	.word	0x10002b88

00011964 <smpScAuthReq>:
   11964:	b530      	push	{r4, r5, lr}
   11966:	6b44      	ldr	r4, [r0, #52]	; 0x34
   11968:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1196c:	7825      	ldrb	r5, [r4, #0]
   1196e:	b087      	sub	sp, #28
   11970:	b98d      	cbnz	r5, 11996 <smpScAuthReq+0x32>
   11972:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
   11976:	0764      	lsls	r4, r4, #29
   11978:	d510      	bpl.n	1199c <smpScAuthReq+0x38>
   1197a:	f8ad 3000 	strh.w	r3, [sp]
   1197e:	4668      	mov	r0, sp
   11980:	232e      	movs	r3, #46	; 0x2e
   11982:	f88d 3002 	strb.w	r3, [sp, #2]
   11986:	f88d 1004 	strb.w	r1, [sp, #4]
   1198a:	f88d 2005 	strb.w	r2, [sp, #5]
   1198e:	f7fe fe47 	bl	10620 <DmSmpCbackExec>
   11992:	b007      	add	sp, #28
   11994:	bd30      	pop	{r4, r5, pc}
   11996:	7864      	ldrb	r4, [r4, #1]
   11998:	2c02      	cmp	r4, #2
   1199a:	d0ee      	beq.n	1197a <smpScAuthReq+0x16>
   1199c:	f8ad 3000 	strh.w	r3, [sp]
   119a0:	2304      	movs	r3, #4
   119a2:	f88d 3002 	strb.w	r3, [sp, #2]
   119a6:	2300      	movs	r3, #0
   119a8:	f8ad 3004 	strh.w	r3, [sp, #4]
   119ac:	f88d 3006 	strb.w	r3, [sp, #6]
   119b0:	4669      	mov	r1, sp
   119b2:	2303      	movs	r3, #3
   119b4:	f88d 3014 	strb.w	r3, [sp, #20]
   119b8:	f000 fe15 	bl	125e6 <smpSmExecute>
   119bc:	e7e9      	b.n	11992 <smpScAuthReq+0x2e>

000119be <smpScActCleanup>:
   119be:	b510      	push	{r4, lr}
   119c0:	4604      	mov	r4, r0
   119c2:	f000 fc1d 	bl	12200 <smpActCleanup>
   119c6:	4620      	mov	r0, r4
   119c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   119cc:	f7ff bc9f 	b.w	1130e <SmpScFreeScratchBuffers>

000119d0 <smpScActPairingFailed>:
   119d0:	b538      	push	{r3, r4, r5, lr}
   119d2:	4604      	mov	r4, r0
   119d4:	460d      	mov	r5, r1
   119d6:	f7ff fff2 	bl	119be <smpScActCleanup>
   119da:	4629      	mov	r1, r5
   119dc:	4620      	mov	r0, r4
   119de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   119e2:	f000 bc20 	b.w	12226 <smpActPairingFailed>

000119e6 <smpScActPairingCancel>:
   119e6:	b538      	push	{r3, r4, r5, lr}
   119e8:	4605      	mov	r5, r0
   119ea:	460c      	mov	r4, r1
   119ec:	78c9      	ldrb	r1, [r1, #3]
   119ee:	f000 fc09 	bl	12204 <smpSendPairingFailed>
   119f2:	4621      	mov	r1, r4
   119f4:	4628      	mov	r0, r5
   119f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   119fa:	f7ff bfe9 	b.w	119d0 <smpScActPairingFailed>

000119fe <smpScActAuthSelect>:
   119fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11a00:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11a02:	684d      	ldr	r5, [r1, #4]
   11a04:	4604      	mov	r4, r0
   11a06:	2220      	movs	r2, #32
   11a08:	6898      	ldr	r0, [r3, #8]
   11a0a:	f105 0109 	add.w	r1, r5, #9
   11a0e:	f008 f97f 	bl	19d10 <WStrReverseCpy>
   11a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a14:	6898      	ldr	r0, [r3, #8]
   11a16:	2220      	movs	r2, #32
   11a18:	f105 0129 	add.w	r1, r5, #41	; 0x29
   11a1c:	4410      	add	r0, r2
   11a1e:	f008 f977 	bl	19d10 <WStrReverseCpy>
   11a22:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11a26:	f8ad 3004 	strh.w	r3, [sp, #4]
   11a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a2c:	785b      	ldrb	r3, [r3, #1]
   11a2e:	3b01      	subs	r3, #1
   11a30:	2b03      	cmp	r3, #3
   11a32:	d810      	bhi.n	11a56 <smpScActAuthSelect+0x58>
   11a34:	e8df f003 	tbb	[pc, r3]
   11a38:	020d0b02 	.word	0x020d0b02
   11a3c:	2312      	movs	r3, #18
   11a3e:	f88d 3006 	strb.w	r3, [sp, #6]
   11a42:	a901      	add	r1, sp, #4
   11a44:	4620      	mov	r0, r4
   11a46:	f000 fdce 	bl	125e6 <smpSmExecute>
   11a4a:	b003      	add	sp, #12
   11a4c:	bd30      	pop	{r4, r5, pc}
   11a4e:	2314      	movs	r3, #20
   11a50:	e7f5      	b.n	11a3e <smpScActAuthSelect+0x40>
   11a52:	2313      	movs	r3, #19
   11a54:	e7f3      	b.n	11a3e <smpScActAuthSelect+0x40>
   11a56:	f640 0303 	movw	r3, #2051	; 0x803
   11a5a:	f8ad 3006 	strh.w	r3, [sp, #6]
   11a5e:	e7f0      	b.n	11a42 <smpScActAuthSelect+0x44>

00011a60 <smpScActPkSetup>:
   11a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11a62:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11a64:	2200      	movs	r2, #0
   11a66:	70da      	strb	r2, [r3, #3]
   11a68:	2103      	movs	r1, #3
   11a6a:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
   11a6e:	f88d 2004 	strb.w	r2, [sp, #4]
   11a72:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
   11a76:	f8ad 1000 	strh.w	r1, [sp]
   11a7a:	791b      	ldrb	r3, [r3, #4]
   11a7c:	f88d 3005 	strb.w	r3, [sp, #5]
   11a80:	212e      	movs	r1, #46	; 0x2e
   11a82:	4668      	mov	r0, sp
   11a84:	f88d 1002 	strb.w	r1, [sp, #2]
   11a88:	f7fe fdca 	bl	10620 <DmSmpCbackExec>
   11a8c:	b007      	add	sp, #28
   11a8e:	f85d fb04 	ldr.w	pc, [sp], #4

00011a92 <smpScActJwncCalcF4>:
   11a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11a94:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
   11a98:	4604      	mov	r4, r0
   11a9a:	460d      	mov	r5, r1
   11a9c:	b18e      	cbz	r6, 11ac2 <smpScActJwncCalcF4+0x30>
   11a9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11aa0:	689e      	ldr	r6, [r3, #8]
   11aa2:	f7fe ff71 	bl	10988 <DmSecGetEccKey>
   11aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11aa8:	68db      	ldr	r3, [r3, #12]
   11aaa:	3310      	adds	r3, #16
   11aac:	9301      	str	r3, [sp, #4]
   11aae:	2300      	movs	r3, #0
   11ab0:	9300      	str	r3, [sp, #0]
   11ab2:	4632      	mov	r2, r6
   11ab4:	4603      	mov	r3, r0
   11ab6:	4629      	mov	r1, r5
   11ab8:	4620      	mov	r0, r4
   11aba:	f7ff fc71 	bl	113a0 <SmpScCalcF4>
   11abe:	b002      	add	sp, #8
   11ac0:	bd70      	pop	{r4, r5, r6, pc}
   11ac2:	f7fe ff61 	bl	10988 <DmSecGetEccKey>
   11ac6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11ac8:	68d3      	ldr	r3, [r2, #12]
   11aca:	3310      	adds	r3, #16
   11acc:	e9cd 6300 	strd	r6, r3, [sp]
   11ad0:	6893      	ldr	r3, [r2, #8]
   11ad2:	4602      	mov	r2, r0
   11ad4:	e7ef      	b.n	11ab6 <smpScActJwncCalcF4+0x24>

00011ad6 <smpScActJwncCalcG2>:
   11ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11ad8:	460a      	mov	r2, r1
   11ada:	4604      	mov	r4, r0
   11adc:	460e      	mov	r6, r1
   11ade:	4601      	mov	r1, r0
   11ae0:	2050      	movs	r0, #80	; 0x50
   11ae2:	f7ff fc4b 	bl	1137c <SmpScAlloc>
   11ae6:	4605      	mov	r5, r0
   11ae8:	b1d8      	cbz	r0, 11b22 <smpScActJwncCalcG2+0x4c>
   11aea:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11aee:	b1d3      	cbz	r3, 11b26 <smpScActJwncCalcG2+0x50>
   11af0:	f7fe ff4a 	bl	10988 <DmSecGetEccKey>
   11af4:	2220      	movs	r2, #32
   11af6:	4601      	mov	r1, r0
   11af8:	4628      	mov	r0, r5
   11afa:	f7ff fcb3 	bl	11464 <SmpScCat>
   11afe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b00:	6899      	ldr	r1, [r3, #8]
   11b02:	2220      	movs	r2, #32
   11b04:	f7ff fcae 	bl	11464 <SmpScCat>
   11b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b0a:	68d9      	ldr	r1, [r3, #12]
   11b0c:	3110      	adds	r1, #16
   11b0e:	f7ff fcaf 	bl	11470 <SmpScCat128>
   11b12:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11b14:	9600      	str	r6, [sp, #0]
   11b16:	4623      	mov	r3, r4
   11b18:	2250      	movs	r2, #80	; 0x50
   11b1a:	4629      	mov	r1, r5
   11b1c:	68c0      	ldr	r0, [r0, #12]
   11b1e:	f7ff fc11 	bl	11344 <SmpScCmac>
   11b22:	b003      	add	sp, #12
   11b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b28:	2220      	movs	r2, #32
   11b2a:	6899      	ldr	r1, [r3, #8]
   11b2c:	f7ff fc9a 	bl	11464 <SmpScCat>
   11b30:	4607      	mov	r7, r0
   11b32:	f7fe ff29 	bl	10988 <DmSecGetEccKey>
   11b36:	2220      	movs	r2, #32
   11b38:	4601      	mov	r1, r0
   11b3a:	4638      	mov	r0, r7
   11b3c:	e7e2      	b.n	11b04 <smpScActJwncCalcG2+0x2e>

00011b3e <smpScActJwncDisplay>:
   11b3e:	b510      	push	{r4, lr}
   11b40:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11b42:	785b      	ldrb	r3, [r3, #1]
   11b44:	2b04      	cmp	r3, #4
   11b46:	b086      	sub	sp, #24
   11b48:	4604      	mov	r4, r0
   11b4a:	d10f      	bne.n	11b6c <smpScActJwncDisplay+0x2e>
   11b4c:	a802      	add	r0, sp, #8
   11b4e:	6849      	ldr	r1, [r1, #4]
   11b50:	f008 f8a3 	bl	19c9a <Calc128Cpy>
   11b54:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11b58:	f8ad 3004 	strh.w	r3, [sp, #4]
   11b5c:	a801      	add	r0, sp, #4
   11b5e:	2335      	movs	r3, #53	; 0x35
   11b60:	f88d 3006 	strb.w	r3, [sp, #6]
   11b64:	f7fe fd5c 	bl	10620 <DmSmpCbackExec>
   11b68:	b006      	add	sp, #24
   11b6a:	bd10      	pop	{r4, pc}
   11b6c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11b70:	f8ad 3004 	strh.w	r3, [sp, #4]
   11b74:	a901      	add	r1, sp, #4
   11b76:	2315      	movs	r3, #21
   11b78:	f88d 3006 	strb.w	r3, [sp, #6]
   11b7c:	f000 fd33 	bl	125e6 <smpSmExecute>
   11b80:	e7f2      	b.n	11b68 <smpScActJwncDisplay+0x2a>

00011b82 <smpScActPkKeypress>:
   11b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11b84:	684c      	ldr	r4, [r1, #4]
   11b86:	7a22      	ldrb	r2, [r4, #8]
   11b88:	2a0e      	cmp	r2, #14
   11b8a:	d10e      	bne.n	11baa <smpScActPkKeypress+0x28>
   11b8c:	7a63      	ldrb	r3, [r4, #9]
   11b8e:	f88d 3004 	strb.w	r3, [sp, #4]
   11b92:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11b96:	f8ad 3000 	strh.w	r3, [sp]
   11b9a:	4668      	mov	r0, sp
   11b9c:	2336      	movs	r3, #54	; 0x36
   11b9e:	f88d 3002 	strb.w	r3, [sp, #2]
   11ba2:	f7fe fd3d 	bl	10620 <DmSmpCbackExec>
   11ba6:	b003      	add	sp, #12
   11ba8:	bd30      	pop	{r4, r5, pc}
   11baa:	2a03      	cmp	r2, #3
   11bac:	d1fb      	bne.n	11ba6 <smpScActPkKeypress+0x24>
   11bae:	221d      	movs	r2, #29
   11bb0:	708a      	strb	r2, [r1, #2]
   11bb2:	f000 fd18 	bl	125e6 <smpSmExecute>
   11bb6:	e7f6      	b.n	11ba6 <smpScActPkKeypress+0x24>

00011bb8 <smpScActPkSendKeypress>:
   11bb8:	b538      	push	{r3, r4, r5, lr}
   11bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11bbc:	789b      	ldrb	r3, [r3, #2]
   11bbe:	4604      	mov	r4, r0
   11bc0:	460d      	mov	r5, r1
   11bc2:	b1c3      	cbz	r3, 11bf6 <smpScActPkSendKeypress+0x3e>
   11bc4:	f000 fafc 	bl	121c0 <smpStartRspTimer>
   11bc8:	200a      	movs	r0, #10
   11bca:	f7ff faef 	bl	111ac <smpMsgAlloc>
   11bce:	b148      	cbz	r0, 11be4 <smpScActPkSendKeypress+0x2c>
   11bd0:	230e      	movs	r3, #14
   11bd2:	7203      	strb	r3, [r0, #8]
   11bd4:	792b      	ldrb	r3, [r5, #4]
   11bd6:	7243      	strb	r3, [r0, #9]
   11bd8:	4601      	mov	r1, r0
   11bda:	4620      	mov	r0, r4
   11bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11be0:	f7ff ba99 	b.w	11116 <smpSendPkt>
   11be4:	f640 0303 	movw	r3, #2051	; 0x803
   11be8:	806b      	strh	r3, [r5, #2]
   11bea:	4629      	mov	r1, r5
   11bec:	4620      	mov	r0, r4
   11bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11bf2:	f000 bcf8 	b.w	125e6 <smpSmExecute>
   11bf6:	bd38      	pop	{r3, r4, r5, pc}

00011bf8 <smpScActCalcSharedSecret>:
   11bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bfa:	b099      	sub	sp, #100	; 0x64
   11bfc:	4605      	mov	r5, r0
   11bfe:	f7fe fec3 	bl	10988 <DmSecGetEccKey>
   11c02:	ae10      	add	r6, sp, #64	; 0x40
   11c04:	f100 0340 	add.w	r3, r0, #64	; 0x40
   11c08:	f100 0260 	add.w	r2, r0, #96	; 0x60
   11c0c:	6818      	ldr	r0, [r3, #0]
   11c0e:	6859      	ldr	r1, [r3, #4]
   11c10:	4634      	mov	r4, r6
   11c12:	c403      	stmia	r4!, {r0, r1}
   11c14:	3308      	adds	r3, #8
   11c16:	4293      	cmp	r3, r2
   11c18:	4626      	mov	r6, r4
   11c1a:	d1f7      	bne.n	11c0c <smpScActCalcSharedSecret+0x14>
   11c1c:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   11c1e:	68b3      	ldr	r3, [r6, #8]
   11c20:	466a      	mov	r2, sp
   11c22:	f103 0c20 	add.w	ip, r3, #32
   11c26:	4617      	mov	r7, r2
   11c28:	6818      	ldr	r0, [r3, #0]
   11c2a:	6859      	ldr	r1, [r3, #4]
   11c2c:	4614      	mov	r4, r2
   11c2e:	c403      	stmia	r4!, {r0, r1}
   11c30:	3308      	adds	r3, #8
   11c32:	4563      	cmp	r3, ip
   11c34:	4622      	mov	r2, r4
   11c36:	d1f7      	bne.n	11c28 <smpScActCalcSharedSecret+0x30>
   11c38:	68b3      	ldr	r3, [r6, #8]
   11c3a:	ac08      	add	r4, sp, #32
   11c3c:	f103 0640 	add.w	r6, r3, #64	; 0x40
   11c40:	3320      	adds	r3, #32
   11c42:	6818      	ldr	r0, [r3, #0]
   11c44:	6859      	ldr	r1, [r3, #4]
   11c46:	4622      	mov	r2, r4
   11c48:	c203      	stmia	r2!, {r0, r1}
   11c4a:	3308      	adds	r3, #8
   11c4c:	42b3      	cmp	r3, r6
   11c4e:	4614      	mov	r4, r2
   11c50:	d1f7      	bne.n	11c42 <smpScActCalcSharedSecret+0x4a>
   11c52:	4905      	ldr	r1, [pc, #20]	; (11c68 <smpScActCalcSharedSecret+0x70>)
   11c54:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   11c58:	f891 11c8 	ldrb.w	r1, [r1, #456]	; 0x1c8
   11c5c:	2318      	movs	r3, #24
   11c5e:	4638      	mov	r0, r7
   11c60:	f006 fcfc 	bl	1865c <SecEccGenSharedSecret>
   11c64:	b019      	add	sp, #100	; 0x64
   11c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c68:	10003f14 	.word	0x10003f14

00011c6c <smpScActCalcF5TKey>:
   11c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c70:	460a      	mov	r2, r1
   11c72:	b086      	sub	sp, #24
   11c74:	4680      	mov	r8, r0
   11c76:	460c      	mov	r4, r1
   11c78:	4601      	mov	r1, r0
   11c7a:	2020      	movs	r0, #32
   11c7c:	f7ff fb7e 	bl	1137c <SmpScAlloc>
   11c80:	4607      	mov	r7, r0
   11c82:	b1e8      	cbz	r0, 11cc0 <smpScActCalcF5TKey+0x54>
   11c84:	4a10      	ldr	r2, [pc, #64]	; (11cc8 <smpScActCalcF5TKey+0x5c>)
   11c86:	ad02      	add	r5, sp, #8
   11c88:	f102 0310 	add.w	r3, r2, #16
   11c8c:	46ac      	mov	ip, r5
   11c8e:	6810      	ldr	r0, [r2, #0]
   11c90:	6851      	ldr	r1, [r2, #4]
   11c92:	462e      	mov	r6, r5
   11c94:	c603      	stmia	r6!, {r0, r1}
   11c96:	3208      	adds	r2, #8
   11c98:	429a      	cmp	r2, r3
   11c9a:	4635      	mov	r5, r6
   11c9c:	d1f7      	bne.n	11c8e <smpScActCalcF5TKey+0x22>
   11c9e:	1d22      	adds	r2, r4, #4
   11ca0:	463b      	mov	r3, r7
   11ca2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   11ca6:	f852 0b04 	ldr.w	r0, [r2], #4
   11caa:	f843 0b04 	str.w	r0, [r3], #4
   11cae:	428a      	cmp	r2, r1
   11cb0:	d1f9      	bne.n	11ca6 <smpScActCalcF5TKey+0x3a>
   11cb2:	9400      	str	r4, [sp, #0]
   11cb4:	4643      	mov	r3, r8
   11cb6:	2220      	movs	r2, #32
   11cb8:	4639      	mov	r1, r7
   11cba:	4660      	mov	r0, ip
   11cbc:	f7ff fb42 	bl	11344 <SmpScCmac>
   11cc0:	b006      	add	sp, #24
   11cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cc6:	bf00      	nop
   11cc8:	00026050 	.word	0x00026050

00011ccc <smpScActCalcF5MacKey>:
   11ccc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11cce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11cd0:	4604      	mov	r4, r0
   11cd2:	6918      	ldr	r0, [r3, #16]
   11cd4:	460e      	mov	r6, r1
   11cd6:	3010      	adds	r0, #16
   11cd8:	6849      	ldr	r1, [r1, #4]
   11cda:	f007 ffde 	bl	19c9a <Calc128Cpy>
   11cde:	4632      	mov	r2, r6
   11ce0:	4621      	mov	r1, r4
   11ce2:	2035      	movs	r0, #53	; 0x35
   11ce4:	f7ff fb4a 	bl	1137c <SmpScAlloc>
   11ce8:	4605      	mov	r5, r0
   11cea:	b318      	cbz	r0, 11d34 <smpScActCalcF5MacKey+0x68>
   11cec:	2700      	movs	r7, #0
   11cee:	2204      	movs	r2, #4
   11cf0:	7007      	strb	r7, [r0, #0]
   11cf2:	4911      	ldr	r1, [pc, #68]	; (11d38 <smpScActCalcF5MacKey+0x6c>)
   11cf4:	3001      	adds	r0, #1
   11cf6:	f7ff fbb5 	bl	11464 <SmpScCat>
   11cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11cfc:	68d9      	ldr	r1, [r3, #12]
   11cfe:	f7ff fbb7 	bl	11470 <SmpScCat128>
   11d02:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d04:	68d9      	ldr	r1, [r3, #12]
   11d06:	3110      	adds	r1, #16
   11d08:	f7ff fbb2 	bl	11470 <SmpScCat128>
   11d0c:	4601      	mov	r1, r0
   11d0e:	4620      	mov	r0, r4
   11d10:	f7ff fce0 	bl	116d4 <smpScCatInitiatorBdAddr>
   11d14:	4601      	mov	r1, r0
   11d16:	4620      	mov	r0, r4
   11d18:	f7ff fd0a 	bl	11730 <smpScCatResponderBdAddr>
   11d1c:	2301      	movs	r3, #1
   11d1e:	7003      	strb	r3, [r0, #0]
   11d20:	7047      	strb	r7, [r0, #1]
   11d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d24:	6918      	ldr	r0, [r3, #16]
   11d26:	9600      	str	r6, [sp, #0]
   11d28:	4623      	mov	r3, r4
   11d2a:	2235      	movs	r2, #53	; 0x35
   11d2c:	4629      	mov	r1, r5
   11d2e:	3010      	adds	r0, #16
   11d30:	f7ff fb08 	bl	11344 <SmpScCmac>
   11d34:	b003      	add	sp, #12
   11d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d38:	00026060 	.word	0x00026060

00011d3c <smpScActCalcF5Ltk>:
   11d3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11d40:	4604      	mov	r4, r0
   11d42:	460e      	mov	r6, r1
   11d44:	6918      	ldr	r0, [r3, #16]
   11d46:	6849      	ldr	r1, [r1, #4]
   11d48:	f007 ffa7 	bl	19c9a <Calc128Cpy>
   11d4c:	4632      	mov	r2, r6
   11d4e:	4621      	mov	r1, r4
   11d50:	2035      	movs	r0, #53	; 0x35
   11d52:	f7ff fb13 	bl	1137c <SmpScAlloc>
   11d56:	4605      	mov	r5, r0
   11d58:	b318      	cbz	r0, 11da2 <smpScActCalcF5Ltk+0x66>
   11d5a:	2701      	movs	r7, #1
   11d5c:	2204      	movs	r2, #4
   11d5e:	7007      	strb	r7, [r0, #0]
   11d60:	4911      	ldr	r1, [pc, #68]	; (11da8 <smpScActCalcF5Ltk+0x6c>)
   11d62:	4438      	add	r0, r7
   11d64:	f7ff fb7e 	bl	11464 <SmpScCat>
   11d68:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d6a:	68d9      	ldr	r1, [r3, #12]
   11d6c:	f7ff fb80 	bl	11470 <SmpScCat128>
   11d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d72:	68d9      	ldr	r1, [r3, #12]
   11d74:	3110      	adds	r1, #16
   11d76:	f7ff fb7b 	bl	11470 <SmpScCat128>
   11d7a:	4601      	mov	r1, r0
   11d7c:	4620      	mov	r0, r4
   11d7e:	f7ff fca9 	bl	116d4 <smpScCatInitiatorBdAddr>
   11d82:	4601      	mov	r1, r0
   11d84:	4620      	mov	r0, r4
   11d86:	f7ff fcd3 	bl	11730 <smpScCatResponderBdAddr>
   11d8a:	2300      	movs	r3, #0
   11d8c:	7007      	strb	r7, [r0, #0]
   11d8e:	7043      	strb	r3, [r0, #1]
   11d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d92:	6918      	ldr	r0, [r3, #16]
   11d94:	9600      	str	r6, [sp, #0]
   11d96:	4623      	mov	r3, r4
   11d98:	2235      	movs	r2, #53	; 0x35
   11d9a:	4629      	mov	r1, r5
   11d9c:	3010      	adds	r0, #16
   11d9e:	f7ff fad1 	bl	11344 <SmpScCmac>
   11da2:	b003      	add	sp, #12
   11da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11da6:	bf00      	nop
   11da8:	00026060 	.word	0x00026060

00011dac <smpScActDHKeyCalcF6Ea>:
   11dac:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11db0:	4604      	mov	r4, r0
   11db2:	6918      	ldr	r0, [r3, #16]
   11db4:	2210      	movs	r2, #16
   11db6:	4410      	add	r0, r2
   11db8:	460d      	mov	r5, r1
   11dba:	6849      	ldr	r1, [r1, #4]
   11dbc:	f007 ffa8 	bl	19d10 <WStrReverseCpy>
   11dc0:	462a      	mov	r2, r5
   11dc2:	4621      	mov	r1, r4
   11dc4:	2041      	movs	r0, #65	; 0x41
   11dc6:	f7ff fad9 	bl	1137c <SmpScAlloc>
   11dca:	4606      	mov	r6, r0
   11dcc:	b318      	cbz	r0, 11e16 <smpScActDHKeyCalcF6Ea+0x6a>
   11dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11dd0:	68d9      	ldr	r1, [r3, #12]
   11dd2:	f7ff fb4d 	bl	11470 <SmpScCat128>
   11dd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11dd8:	68d9      	ldr	r1, [r3, #12]
   11dda:	3110      	adds	r1, #16
   11ddc:	f7ff fb48 	bl	11470 <SmpScCat128>
   11de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11de2:	68d9      	ldr	r1, [r3, #12]
   11de4:	3130      	adds	r1, #48	; 0x30
   11de6:	f7ff fb43 	bl	11470 <SmpScCat128>
   11dea:	7ce3      	ldrb	r3, [r4, #19]
   11dec:	7003      	strb	r3, [r0, #0]
   11dee:	7ca3      	ldrb	r3, [r4, #18]
   11df0:	7043      	strb	r3, [r0, #1]
   11df2:	7c63      	ldrb	r3, [r4, #17]
   11df4:	7083      	strb	r3, [r0, #2]
   11df6:	1cc1      	adds	r1, r0, #3
   11df8:	4620      	mov	r0, r4
   11dfa:	f7ff fc6b 	bl	116d4 <smpScCatInitiatorBdAddr>
   11dfe:	4601      	mov	r1, r0
   11e00:	4620      	mov	r0, r4
   11e02:	f7ff fc95 	bl	11730 <smpScCatResponderBdAddr>
   11e06:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11e08:	9500      	str	r5, [sp, #0]
   11e0a:	4623      	mov	r3, r4
   11e0c:	2241      	movs	r2, #65	; 0x41
   11e0e:	4631      	mov	r1, r6
   11e10:	6900      	ldr	r0, [r0, #16]
   11e12:	f7ff fa97 	bl	11344 <SmpScCmac>
   11e16:	b002      	add	sp, #8
   11e18:	bd70      	pop	{r4, r5, r6, pc}

00011e1a <smpScActDHKeyCalcF6Eb>:
   11e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11e1c:	460a      	mov	r2, r1
   11e1e:	4604      	mov	r4, r0
   11e20:	460d      	mov	r5, r1
   11e22:	4601      	mov	r1, r0
   11e24:	2041      	movs	r0, #65	; 0x41
   11e26:	f7ff faa9 	bl	1137c <SmpScAlloc>
   11e2a:	4606      	mov	r6, r0
   11e2c:	b318      	cbz	r0, 11e76 <smpScActDHKeyCalcF6Eb+0x5c>
   11e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e30:	68d9      	ldr	r1, [r3, #12]
   11e32:	3110      	adds	r1, #16
   11e34:	f7ff fb1c 	bl	11470 <SmpScCat128>
   11e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e3a:	68d9      	ldr	r1, [r3, #12]
   11e3c:	f7ff fb18 	bl	11470 <SmpScCat128>
   11e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e42:	68d9      	ldr	r1, [r3, #12]
   11e44:	3120      	adds	r1, #32
   11e46:	f7ff fb13 	bl	11470 <SmpScCat128>
   11e4a:	7ea3      	ldrb	r3, [r4, #26]
   11e4c:	7003      	strb	r3, [r0, #0]
   11e4e:	7e63      	ldrb	r3, [r4, #25]
   11e50:	7043      	strb	r3, [r0, #1]
   11e52:	7e23      	ldrb	r3, [r4, #24]
   11e54:	7083      	strb	r3, [r0, #2]
   11e56:	1cc1      	adds	r1, r0, #3
   11e58:	4620      	mov	r0, r4
   11e5a:	f7ff fc69 	bl	11730 <smpScCatResponderBdAddr>
   11e5e:	4601      	mov	r1, r0
   11e60:	4620      	mov	r0, r4
   11e62:	f7ff fc37 	bl	116d4 <smpScCatInitiatorBdAddr>
   11e66:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11e68:	9500      	str	r5, [sp, #0]
   11e6a:	4623      	mov	r3, r4
   11e6c:	2241      	movs	r2, #65	; 0x41
   11e6e:	4631      	mov	r1, r6
   11e70:	6900      	ldr	r0, [r0, #16]
   11e72:	f7ff fa67 	bl	11344 <SmpScCmac>
   11e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e78:	6869      	ldr	r1, [r5, #4]
   11e7a:	68d8      	ldr	r0, [r3, #12]
   11e7c:	b002      	add	sp, #8
   11e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11e82:	f007 bf0a 	b.w	19c9a <Calc128Cpy>
   11e86:	bf00      	nop

00011e88 <SmpiScInit>:
   11e88:	4b02      	ldr	r3, [pc, #8]	; (11e94 <SmpiScInit+0xc>)
   11e8a:	4a03      	ldr	r2, [pc, #12]	; (11e98 <SmpiScInit+0x10>)
   11e8c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   11e90:	f7ff bab8 	b.w	11404 <SmpScInit>
   11e94:	10003f14 	.word	0x10003f14
   11e98:	00026064 	.word	0x00026064

00011e9c <smpiStateStr>:
   11e9c:	2824      	cmp	r0, #36	; 0x24
   11e9e:	bf9d      	ittte	ls
   11ea0:	4b02      	ldrls	r3, [pc, #8]	; (11eac <smpiStateStr+0x10>)
   11ea2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   11ea6:	68c0      	ldrls	r0, [r0, #12]
   11ea8:	4801      	ldrhi	r0, [pc, #4]	; (11eb0 <smpiStateStr+0x14>)
   11eaa:	4770      	bx	lr
   11eac:	00026064 	.word	0x00026064
   11eb0:	00026fa2 	.word	0x00026fa2

00011eb4 <SmpiInit>:
   11eb4:	4b05      	ldr	r3, [pc, #20]	; (11ecc <SmpiInit+0x18>)
   11eb6:	4a06      	ldr	r2, [pc, #24]	; (11ed0 <SmpiInit+0x1c>)
   11eb8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   11ebc:	4a05      	ldr	r2, [pc, #20]	; (11ed4 <SmpiInit+0x20>)
   11ebe:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   11ec2:	4a05      	ldr	r2, [pc, #20]	; (11ed8 <SmpiInit+0x24>)
   11ec4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   11ec8:	4770      	bx	lr
   11eca:	bf00      	nop
   11ecc:	10003f14 	.word	0x10003f14
   11ed0:	00026390 	.word	0x00026390
   11ed4:	00012649 	.word	0x00012649
   11ed8:	00012735 	.word	0x00012735

00011edc <SmprScInit>:
   11edc:	4b02      	ldr	r3, [pc, #8]	; (11ee8 <SmprScInit+0xc>)
   11ede:	4a03      	ldr	r2, [pc, #12]	; (11eec <SmprScInit+0x10>)
   11ee0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11ee4:	f7ff ba8e 	b.w	11404 <SmpScInit>
   11ee8:	10003f14 	.word	0x10003f14
   11eec:	000264bc 	.word	0x000264bc

00011ef0 <smprStateStr>:
   11ef0:	2824      	cmp	r0, #36	; 0x24
   11ef2:	bf9d      	ittte	ls
   11ef4:	4b02      	ldrls	r3, [pc, #8]	; (11f00 <smprStateStr+0x10>)
   11ef6:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   11efa:	68c0      	ldrls	r0, [r0, #12]
   11efc:	4801      	ldrhi	r0, [pc, #4]	; (11f04 <smprStateStr+0x14>)
   11efe:	4770      	bx	lr
   11f00:	000264bc 	.word	0x000264bc
   11f04:	00027176 	.word	0x00027176

00011f08 <SmprInit>:
   11f08:	4b05      	ldr	r3, [pc, #20]	; (11f20 <SmprInit+0x18>)
   11f0a:	4a06      	ldr	r2, [pc, #24]	; (11f24 <SmprInit+0x1c>)
   11f0c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11f10:	4a05      	ldr	r2, [pc, #20]	; (11f28 <SmprInit+0x20>)
   11f12:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   11f16:	4a05      	ldr	r2, [pc, #20]	; (11f2c <SmprInit+0x24>)
   11f18:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   11f1c:	4770      	bx	lr
   11f1e:	bf00      	nop
   11f20:	10003f14 	.word	0x10003f14
   11f24:	00026808 	.word	0x00026808
   11f28:	00012649 	.word	0x00012649
   11f2c:	00012735 	.word	0x00012735

00011f30 <dmConnSmActCancelOpen>:
   11f30:	f002 bbb7 	b.w	146a2 <HciLeCreateConnCancelCmd>

00011f34 <dmConnSmActUpdateMaster>:
   11f34:	3104      	adds	r1, #4
   11f36:	8980      	ldrh	r0, [r0, #12]
   11f38:	f002 ba76 	b.w	14428 <HciLeConnUpdateCmd>

00011f3c <dmConnSmActL2cUpdateInd>:
   11f3c:	b538      	push	{r3, r4, r5, lr}
   11f3e:	460d      	mov	r5, r1
   11f40:	4604      	mov	r4, r0
   11f42:	8981      	ldrh	r1, [r0, #12]
   11f44:	7a28      	ldrb	r0, [r5, #8]
   11f46:	2200      	movs	r2, #0
   11f48:	f000 f8ca 	bl	120e0 <L2cDmConnUpdateRsp>
   11f4c:	6869      	ldr	r1, [r5, #4]
   11f4e:	89a0      	ldrh	r0, [r4, #12]
   11f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11f54:	f002 ba68 	b.w	14428 <HciLeConnUpdateCmd>

00011f58 <DmL2cConnUpdateInd>:
   11f58:	b530      	push	{r4, r5, lr}
   11f5a:	4604      	mov	r4, r0
   11f5c:	b085      	sub	sp, #20
   11f5e:	4608      	mov	r0, r1
   11f60:	4615      	mov	r5, r2
   11f62:	f7fd fa82 	bl	f46a <dmConnCcbByHandle>
   11f66:	b140      	cbz	r0, 11f7a <DmL2cConnUpdateInd+0x22>
   11f68:	2335      	movs	r3, #53	; 0x35
   11f6a:	a901      	add	r1, sp, #4
   11f6c:	f88d 3006 	strb.w	r3, [sp, #6]
   11f70:	9502      	str	r5, [sp, #8]
   11f72:	f88d 400c 	strb.w	r4, [sp, #12]
   11f76:	f7fd febd 	bl	fcf4 <dmConnSmExecute>
   11f7a:	b005      	add	sp, #20
   11f7c:	bd30      	pop	{r4, r5, pc}

00011f7e <DmConnOpen>:
   11f7e:	b510      	push	{r4, lr}
   11f80:	b086      	sub	sp, #24
   11f82:	2400      	movs	r4, #0
   11f84:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11f88:	e9cd 4201 	strd	r4, r2, [sp, #4]
   11f8c:	9400      	str	r4, [sp, #0]
   11f8e:	4623      	mov	r3, r4
   11f90:	4622      	mov	r2, r4
   11f92:	f7fd fbf9 	bl	f788 <dmConnOpenAccept>
   11f96:	b006      	add	sp, #24
   11f98:	bd10      	pop	{r4, pc}

00011f9a <DmConnSetAddrType>:
   11f9a:	b510      	push	{r4, lr}
   11f9c:	4604      	mov	r4, r0
   11f9e:	f009 fb11 	bl	1b5c4 <WsfTaskLock>
   11fa2:	4b03      	ldr	r3, [pc, #12]	; (11fb0 <DmConnSetAddrType+0x16>)
   11fa4:	735c      	strb	r4, [r3, #13]
   11fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11faa:	f009 bb11 	b.w	1b5d0 <WsfTaskUnlock>
   11fae:	bf00      	nop
   11fb0:	10003e2c 	.word	0x10003e2c

00011fb4 <dmConnSmActOpen>:
   11fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb8:	2001      	movs	r0, #1
   11fba:	b085      	sub	sp, #20
   11fbc:	f891 9011 	ldrb.w	r9, [r1, #17]
   11fc0:	4f12      	ldr	r7, [pc, #72]	; (1200c <dmConnSmActOpen+0x58>)
   11fc2:	460d      	mov	r5, r1
   11fc4:	f7fd ffca 	bl	ff5c <DmScanPhyToIdx>
   11fc8:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   11fcc:	4b10      	ldr	r3, [pc, #64]	; (12010 <dmConnSmActOpen+0x5c>)
   11fce:	f837 6012 	ldrh.w	r6, [r7, r2, lsl #1]
   11fd2:	f893 a013 	ldrb.w	sl, [r3, #19]
   11fd6:	eb07 0242 	add.w	r2, r7, r2, lsl #1
   11fda:	4683      	mov	fp, r0
   11fdc:	7b58      	ldrb	r0, [r3, #13]
   11fde:	f8b2 8002 	ldrh.w	r8, [r2, #2]
   11fe2:	240c      	movs	r4, #12
   11fe4:	f7fd ff92 	bl	ff0c <DmLlAddrType>
   11fe8:	f44f 73ba 	mov.w	r3, #372	; 0x174
   11fec:	fb14 340b 	smlabb	r4, r4, fp, r3
   11ff0:	443c      	add	r4, r7
   11ff2:	350b      	adds	r5, #11
   11ff4:	e9cd 0401 	strd	r0, r4, [sp, #4]
   11ff8:	9500      	str	r5, [sp, #0]
   11ffa:	464b      	mov	r3, r9
   11ffc:	4652      	mov	r2, sl
   11ffe:	4641      	mov	r1, r8
   12000:	4630      	mov	r0, r6
   12002:	f002 fa98 	bl	14536 <HciLeCreateConnCmd>
   12006:	b005      	add	sp, #20
   12008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1200c:	10003c9c 	.word	0x10003c9c
   12010:	10003e2c 	.word	0x10003e2c

00012014 <DmConnMasterInit>:
   12014:	4b01      	ldr	r3, [pc, #4]	; (1201c <DmConnMasterInit+0x8>)
   12016:	4a02      	ldr	r2, [pc, #8]	; (12020 <DmConnMasterInit+0xc>)
   12018:	605a      	str	r2, [r3, #4]
   1201a:	4770      	bx	lr
   1201c:	10003e20 	.word	0x10003e20
   12020:	0002694c 	.word	0x0002694c

00012024 <DmSmpEncryptReq>:
   12024:	b570      	push	{r4, r5, r6, lr}
   12026:	460d      	mov	r5, r1
   12028:	4614      	mov	r4, r2
   1202a:	f7fd fb05 	bl	f638 <dmConnCcbById>
   1202e:	b148      	cbz	r0, 12044 <DmSmpEncryptReq+0x20>
   12030:	2200      	movs	r2, #0
   12032:	7605      	strb	r5, [r0, #24]
   12034:	7482      	strb	r2, [r0, #18]
   12036:	4623      	mov	r3, r4
   12038:	4903      	ldr	r1, [pc, #12]	; (12048 <DmSmpEncryptReq+0x24>)
   1203a:	8980      	ldrh	r0, [r0, #12]
   1203c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12040:	f002 bf6f 	b.w	14f22 <HciLeStartEncryptionCmd>
   12044:	bd70      	pop	{r4, r5, r6, pc}
   12046:	bf00      	nop
   12048:	00026ce0 	.word	0x00026ce0

0001204c <DmSecPairReq>:
   1204c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12050:	4681      	mov	r9, r0
   12052:	2008      	movs	r0, #8
   12054:	4688      	mov	r8, r1
   12056:	4617      	mov	r7, r2
   12058:	461e      	mov	r6, r3
   1205a:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1205e:	f008 fc66 	bl	1a92e <WsfMsgAlloc>
   12062:	b180      	cbz	r0, 12086 <DmSecPairReq+0x3a>
   12064:	2301      	movs	r3, #1
   12066:	f006 0607 	and.w	r6, r6, #7
   1206a:	f005 0507 	and.w	r5, r5, #7
   1206e:	7083      	strb	r3, [r0, #2]
   12070:	f880 8004 	strb.w	r8, [r0, #4]
   12074:	7147      	strb	r7, [r0, #5]
   12076:	7186      	strb	r6, [r0, #6]
   12078:	71c5      	strb	r5, [r0, #7]
   1207a:	f8a0 9000 	strh.w	r9, [r0]
   1207e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12082:	f7ff b896 	b.w	111b2 <SmpDmMsgSend>
   12086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001208a <DmSecEncryptReq>:
   1208a:	b570      	push	{r4, r5, r6, lr}
   1208c:	4606      	mov	r6, r0
   1208e:	2020      	movs	r0, #32
   12090:	460d      	mov	r5, r1
   12092:	4614      	mov	r4, r2
   12094:	f008 fc4b 	bl	1a92e <WsfMsgAlloc>
   12098:	b1b8      	cbz	r0, 120ca <DmSecEncryptReq+0x40>
   1209a:	2350      	movs	r3, #80	; 0x50
   1209c:	7083      	strb	r3, [r0, #2]
   1209e:	4603      	mov	r3, r0
   120a0:	4622      	mov	r2, r4
   120a2:	f823 6b04 	strh.w	r6, [r3], #4
   120a6:	f104 0118 	add.w	r1, r4, #24
   120aa:	f852 4b04 	ldr.w	r4, [r2], #4
   120ae:	f843 4b04 	str.w	r4, [r3], #4
   120b2:	428a      	cmp	r2, r1
   120b4:	d1f9      	bne.n	120aa <DmSecEncryptReq+0x20>
   120b6:	8812      	ldrh	r2, [r2, #0]
   120b8:	801a      	strh	r2, [r3, #0]
   120ba:	4b04      	ldr	r3, [pc, #16]	; (120cc <DmSecEncryptReq+0x42>)
   120bc:	7785      	strb	r5, [r0, #30]
   120be:	4601      	mov	r1, r0
   120c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   120c4:	7b18      	ldrb	r0, [r3, #12]
   120c6:	f008 bc56 	b.w	1a976 <WsfMsgSend>
   120ca:	bd70      	pop	{r4, r5, r6, pc}
   120cc:	10003e2c 	.word	0x10003e2c

000120d0 <L2cMasterInit>:
   120d0:	4b01      	ldr	r3, [pc, #4]	; (120d8 <L2cMasterInit+0x8>)
   120d2:	4a02      	ldr	r2, [pc, #8]	; (120dc <L2cMasterInit+0xc>)
   120d4:	619a      	str	r2, [r3, #24]
   120d6:	4770      	bx	lr
   120d8:	10003ed8 	.word	0x10003ed8
   120dc:	00012117 	.word	0x00012117

000120e0 <L2cDmConnUpdateRsp>:
   120e0:	b570      	push	{r4, r5, r6, lr}
   120e2:	4606      	mov	r6, r0
   120e4:	200e      	movs	r0, #14
   120e6:	460d      	mov	r5, r1
   120e8:	4614      	mov	r4, r2
   120ea:	f7fe fd45 	bl	10b78 <l2cMsgAlloc>
   120ee:	4603      	mov	r3, r0
   120f0:	b180      	cbz	r0, 12114 <L2cDmConnUpdateRsp+0x34>
   120f2:	2213      	movs	r2, #19
   120f4:	7202      	strb	r2, [r0, #8]
   120f6:	2202      	movs	r2, #2
   120f8:	7282      	strb	r2, [r0, #10]
   120fa:	7304      	strb	r4, [r0, #12]
   120fc:	2200      	movs	r2, #0
   120fe:	0a24      	lsrs	r4, r4, #8
   12100:	72c2      	strb	r2, [r0, #11]
   12102:	7246      	strb	r6, [r0, #9]
   12104:	7344      	strb	r4, [r0, #13]
   12106:	4629      	mov	r1, r5
   12108:	2206      	movs	r2, #6
   1210a:	2005      	movs	r0, #5
   1210c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12110:	f7fe bd60 	b.w	10bd4 <L2cDataReq>
   12114:	bd70      	pop	{r4, r5, r6, pc}

00012116 <l2cMasterRxSignalingPkt>:
   12116:	b5f0      	push	{r4, r5, r6, r7, lr}
   12118:	7ad4      	ldrb	r4, [r2, #11]
   1211a:	7a93      	ldrb	r3, [r2, #10]
   1211c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   12120:	b29b      	uxth	r3, r3
   12122:	1d1c      	adds	r4, r3, #4
   12124:	42a1      	cmp	r1, r4
   12126:	4605      	mov	r5, r0
   12128:	b085      	sub	sp, #20
   1212a:	7a50      	ldrb	r0, [r2, #9]
   1212c:	d104      	bne.n	12138 <l2cMasterRxSignalingPkt+0x22>
   1212e:	7a11      	ldrb	r1, [r2, #8]
   12130:	2912      	cmp	r1, #18
   12132:	d101      	bne.n	12138 <l2cMasterRxSignalingPkt+0x22>
   12134:	2b08      	cmp	r3, #8
   12136:	d006      	beq.n	12146 <l2cMasterRxSignalingPkt+0x30>
   12138:	4601      	mov	r1, r0
   1213a:	2200      	movs	r2, #0
   1213c:	4628      	mov	r0, r5
   1213e:	f7fe fd5e 	bl	10bfe <l2cSendCmdReject>
   12142:	b005      	add	sp, #20
   12144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12146:	7b53      	ldrb	r3, [r2, #13]
   12148:	7b16      	ldrb	r6, [r2, #12]
   1214a:	7b91      	ldrb	r1, [r2, #14]
   1214c:	7c14      	ldrb	r4, [r2, #16]
   1214e:	7cd7      	ldrb	r7, [r2, #19]
   12150:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   12154:	7bd3      	ldrb	r3, [r2, #15]
   12156:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   1215a:	7c53      	ldrb	r3, [r2, #17]
   1215c:	b2b6      	uxth	r6, r6
   1215e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   12162:	7c93      	ldrb	r3, [r2, #18]
   12164:	f8ad 6004 	strh.w	r6, [sp, #4]
   12168:	2200      	movs	r2, #0
   1216a:	9203      	str	r2, [sp, #12]
   1216c:	1fb2      	subs	r2, r6, #6
   1216e:	eb03 2307 	add.w	r3, r3, r7, lsl #8
   12172:	b292      	uxth	r2, r2
   12174:	f640 477a 	movw	r7, #3194	; 0xc7a
   12178:	b289      	uxth	r1, r1
   1217a:	b2a4      	uxth	r4, r4
   1217c:	b29b      	uxth	r3, r3
   1217e:	42ba      	cmp	r2, r7
   12180:	f8ad 1006 	strh.w	r1, [sp, #6]
   12184:	f8ad 4008 	strh.w	r4, [sp, #8]
   12188:	f8ad 300a 	strh.w	r3, [sp, #10]
   1218c:	d80d      	bhi.n	121aa <l2cMasterRxSignalingPkt+0x94>
   1218e:	428e      	cmp	r6, r1
   12190:	d80b      	bhi.n	121aa <l2cMasterRxSignalingPkt+0x94>
   12192:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12196:	d808      	bhi.n	121aa <l2cMasterRxSignalingPkt+0x94>
   12198:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1219c:	d205      	bcs.n	121aa <l2cMasterRxSignalingPkt+0x94>
   1219e:	3b0a      	subs	r3, #10
   121a0:	b29b      	uxth	r3, r3
   121a2:	f640 4276 	movw	r2, #3190	; 0xc76
   121a6:	4293      	cmp	r3, r2
   121a8:	d904      	bls.n	121b4 <l2cMasterRxSignalingPkt+0x9e>
   121aa:	2201      	movs	r2, #1
   121ac:	4629      	mov	r1, r5
   121ae:	f7ff ff97 	bl	120e0 <L2cDmConnUpdateRsp>
   121b2:	e7c6      	b.n	12142 <l2cMasterRxSignalingPkt+0x2c>
   121b4:	aa01      	add	r2, sp, #4
   121b6:	4629      	mov	r1, r5
   121b8:	f7ff fece 	bl	11f58 <DmL2cConnUpdateInd>
   121bc:	e7c1      	b.n	12142 <l2cMasterRxSignalingPkt+0x2c>
   121be:	bf00      	nop

000121c0 <smpStartRspTimer>:
   121c0:	f24e 130f 	movw	r3, #57615	; 0xe10f
   121c4:	8183      	strh	r3, [r0, #12]
   121c6:	211e      	movs	r1, #30
   121c8:	f008 bd6a 	b.w	1aca0 <WsfTimerStartSec>

000121cc <smpActNone>:
   121cc:	4770      	bx	lr

000121ce <smpCleanup>:
   121ce:	b510      	push	{r4, lr}
   121d0:	4604      	mov	r4, r0
   121d2:	6a00      	ldr	r0, [r0, #32]
   121d4:	b118      	cbz	r0, 121de <smpCleanup+0x10>
   121d6:	f008 fb5b 	bl	1a890 <WsfBufFree>
   121da:	2300      	movs	r3, #0
   121dc:	6223      	str	r3, [r4, #32]
   121de:	4620      	mov	r0, r4
   121e0:	f008 fd84 	bl	1acec <WsfTimerStop>
   121e4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   121e8:	2300      	movs	r3, #0
   121ea:	429a      	cmp	r2, r3
   121ec:	bf14      	ite	ne
   121ee:	220b      	movne	r2, #11
   121f0:	2201      	moveq	r2, #1
   121f2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   121f6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   121fa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   121fe:	bd10      	pop	{r4, pc}

00012200 <smpActCleanup>:
   12200:	f7ff bfe5 	b.w	121ce <smpCleanup>

00012204 <smpSendPairingFailed>:
   12204:	b538      	push	{r3, r4, r5, lr}
   12206:	4604      	mov	r4, r0
   12208:	200a      	movs	r0, #10
   1220a:	460d      	mov	r5, r1
   1220c:	f7fe ffce 	bl	111ac <smpMsgAlloc>
   12210:	b140      	cbz	r0, 12224 <smpSendPairingFailed+0x20>
   12212:	2305      	movs	r3, #5
   12214:	7203      	strb	r3, [r0, #8]
   12216:	7245      	strb	r5, [r0, #9]
   12218:	4601      	mov	r1, r0
   1221a:	4620      	mov	r0, r4
   1221c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12220:	f7fe bf79 	b.w	11116 <smpSendPkt>
   12224:	bd38      	pop	{r3, r4, r5, pc}

00012226 <smpActPairingFailed>:
   12226:	b538      	push	{r3, r4, r5, lr}
   12228:	4605      	mov	r5, r0
   1222a:	460c      	mov	r4, r1
   1222c:	f7ff ffcf 	bl	121ce <smpCleanup>
   12230:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   12234:	2200      	movs	r2, #0
   12236:	2101      	movs	r1, #1
   12238:	f7fd fc7e 	bl	fb38 <DmConnSetIdle>
   1223c:	232b      	movs	r3, #43	; 0x2b
   1223e:	70a3      	strb	r3, [r4, #2]
   12240:	4620      	mov	r0, r4
   12242:	f7fe f9ed 	bl	10620 <DmSmpCbackExec>
   12246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1224a:	f7fe bb9d 	b.w	10988 <DmSecGetEccKey>

0001224e <smpActPairingCancel>:
   1224e:	b538      	push	{r3, r4, r5, lr}
   12250:	4605      	mov	r5, r0
   12252:	460c      	mov	r4, r1
   12254:	78c9      	ldrb	r1, [r1, #3]
   12256:	f7ff ffd5 	bl	12204 <smpSendPairingFailed>
   1225a:	4621      	mov	r1, r4
   1225c:	4628      	mov	r0, r5
   1225e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12262:	f7ff bfe0 	b.w	12226 <smpActPairingFailed>

00012266 <smpActStorePin>:
   12266:	b538      	push	{r3, r4, r5, lr}
   12268:	460c      	mov	r4, r1
   1226a:	7d0a      	ldrb	r2, [r1, #20]
   1226c:	4605      	mov	r5, r0
   1226e:	3104      	adds	r1, #4
   12270:	6a00      	ldr	r0, [r0, #32]
   12272:	f7f9 ff75 	bl	c160 <memcpy>
   12276:	7d23      	ldrb	r3, [r4, #20]
   12278:	2b03      	cmp	r3, #3
   1227a:	d107      	bne.n	1228c <smpActStorePin+0x26>
   1227c:	6a28      	ldr	r0, [r5, #32]
   1227e:	220d      	movs	r2, #13
   12280:	2100      	movs	r1, #0
   12282:	3003      	adds	r0, #3
   12284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12288:	f7fa b868 	b.w	c35c <memset>
   1228c:	bd38      	pop	{r3, r4, r5, pc}

0001228e <smpActPairCnfCalc1>:
   1228e:	b510      	push	{r4, lr}
   12290:	4604      	mov	r4, r0
   12292:	f7ff ffe8 	bl	12266 <smpActStorePin>
   12296:	6a20      	ldr	r0, [r4, #32]
   12298:	2110      	movs	r1, #16
   1229a:	3030      	adds	r0, #48	; 0x30
   1229c:	f006 fafa 	bl	18894 <SecRand>
   122a0:	6a21      	ldr	r1, [r4, #32]
   122a2:	4620      	mov	r0, r4
   122a4:	f101 0230 	add.w	r2, r1, #48	; 0x30
   122a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   122ac:	f7fe bdda 	b.w	10e64 <smpCalcC1Part1>

000122b0 <smpActPairCnfCalc2>:
   122b0:	684a      	ldr	r2, [r1, #4]
   122b2:	6a01      	ldr	r1, [r0, #32]
   122b4:	f7fe be58 	b.w	10f68 <smpCalcC1Part2>

000122b8 <smpActSendPairCnf>:
   122b8:	b538      	push	{r3, r4, r5, lr}
   122ba:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   122be:	2b00      	cmp	r3, #0
   122c0:	bf14      	ite	ne
   122c2:	2303      	movne	r3, #3
   122c4:	2304      	moveq	r3, #4
   122c6:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   122ca:	4604      	mov	r4, r0
   122cc:	460d      	mov	r5, r1
   122ce:	f7ff ff77 	bl	121c0 <smpStartRspTimer>
   122d2:	2019      	movs	r0, #25
   122d4:	f7fe ff6a 	bl	111ac <smpMsgAlloc>
   122d8:	b190      	cbz	r0, 12300 <smpActSendPairCnf+0x48>
   122da:	2303      	movs	r3, #3
   122dc:	7203      	strb	r3, [r0, #8]
   122de:	686b      	ldr	r3, [r5, #4]
   122e0:	f100 0209 	add.w	r2, r0, #9
   122e4:	f103 0110 	add.w	r1, r3, #16
   122e8:	f853 5b04 	ldr.w	r5, [r3], #4
   122ec:	f842 5b04 	str.w	r5, [r2], #4
   122f0:	428b      	cmp	r3, r1
   122f2:	d1f9      	bne.n	122e8 <smpActSendPairCnf+0x30>
   122f4:	4601      	mov	r1, r0
   122f6:	4620      	mov	r0, r4
   122f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   122fc:	f7fe bf0b 	b.w	11116 <smpSendPkt>
   12300:	bd38      	pop	{r3, r4, r5, pc}

00012302 <smpActPairCnfVerCalc1>:
   12302:	684b      	ldr	r3, [r1, #4]
   12304:	6a01      	ldr	r1, [r0, #32]
   12306:	f103 0209 	add.w	r2, r3, #9
   1230a:	b430      	push	{r4, r5}
   1230c:	3110      	adds	r1, #16
   1230e:	4614      	mov	r4, r2
   12310:	3319      	adds	r3, #25
   12312:	f854 5b04 	ldr.w	r5, [r4], #4
   12316:	f841 5b04 	str.w	r5, [r1], #4
   1231a:	429c      	cmp	r4, r3
   1231c:	d1f9      	bne.n	12312 <smpActPairCnfVerCalc1+0x10>
   1231e:	6a01      	ldr	r1, [r0, #32]
   12320:	bc30      	pop	{r4, r5}
   12322:	f7fe bd9f 	b.w	10e64 <smpCalcC1Part1>

00012326 <smpActPairCnfVerCalc2>:
   12326:	f7ff bfc3 	b.w	122b0 <smpActPairCnfCalc2>

0001232a <smpSendKey>:
   1232a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1232c:	4f5d      	ldr	r7, [pc, #372]	; (124a4 <smpSendKey+0x17a>)
   1232e:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
   12332:	b08b      	sub	sp, #44	; 0x2c
   12334:	4604      	mov	r4, r0
   12336:	460e      	mov	r6, r1
   12338:	b343      	cbz	r3, 1238c <smpSendKey+0x62>
   1233a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1233c:	781b      	ldrb	r3, [r3, #0]
   1233e:	b32b      	cbz	r3, 1238c <smpSendKey+0x62>
   12340:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   12344:	bb13      	cbnz	r3, 1238c <smpSendKey+0x62>
   12346:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1234a:	f7fd fc1f 	bl	fb8c <DmConnRole>
   1234e:	bb48      	cbnz	r0, 123a4 <smpSendKey+0x7a>
   12350:	2302      	movs	r3, #2
   12352:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   12356:	232f      	movs	r3, #47	; 0x2f
   12358:	f88d 3006 	strb.w	r3, [sp, #6]
   1235c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12360:	f8ad 3004 	strh.w	r3, [sp, #4]
   12364:	2303      	movs	r3, #3
   12366:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   1236a:	2300      	movs	r3, #0
   1236c:	e9cd 3306 	strd	r3, r3, [sp, #24]
   12370:	f8ad 3020 	strh.w	r3, [sp, #32]
   12374:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12376:	6919      	ldr	r1, [r3, #16]
   12378:	a802      	add	r0, sp, #8
   1237a:	3110      	adds	r1, #16
   1237c:	f007 fc8d 	bl	19c9a <Calc128Cpy>
   12380:	a801      	add	r0, sp, #4
   12382:	f7fe f94d 	bl	10620 <DmSmpCbackExec>
   12386:	2307      	movs	r3, #7
   12388:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   1238c:	2e00      	cmp	r6, #0
   1238e:	f000 8086 	beq.w	1249e <smpSendKey+0x174>
   12392:	2e01      	cmp	r6, #1
   12394:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   12398:	d106      	bne.n	123a8 <smpSendKey+0x7e>
   1239a:	2b07      	cmp	r3, #7
   1239c:	d106      	bne.n	123ac <smpSendKey+0x82>
   1239e:	4630      	mov	r0, r6
   123a0:	b00b      	add	sp, #44	; 0x2c
   123a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123a4:	2301      	movs	r3, #1
   123a6:	e7d4      	b.n	12352 <smpSendKey+0x28>
   123a8:	2e03      	cmp	r6, #3
   123aa:	d801      	bhi.n	123b0 <smpSendKey+0x86>
   123ac:	2b09      	cmp	r3, #9
   123ae:	d076      	beq.n	1249e <smpSendKey+0x174>
   123b0:	2b0a      	cmp	r3, #10
   123b2:	d074      	beq.n	1249e <smpSendKey+0x174>
   123b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   123b8:	b10b      	cbz	r3, 123be <smpSendKey+0x94>
   123ba:	2600      	movs	r6, #0
   123bc:	e7ef      	b.n	1239e <smpSendKey+0x74>
   123be:	2019      	movs	r0, #25
   123c0:	f7fe fef4 	bl	111ac <smpMsgAlloc>
   123c4:	4605      	mov	r5, r0
   123c6:	2800      	cmp	r0, #0
   123c8:	d0f7      	beq.n	123ba <smpSendKey+0x90>
   123ca:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   123ce:	b96b      	cbnz	r3, 123ec <smpSendKey+0xc2>
   123d0:	07f0      	lsls	r0, r6, #31
   123d2:	d539      	bpl.n	12448 <smpSendKey+0x11e>
   123d4:	4620      	mov	r0, r4
   123d6:	f7fe fe6f 	bl	110b8 <smpGenerateLtk>
   123da:	2306      	movs	r3, #6
   123dc:	722b      	strb	r3, [r5, #8]
   123de:	6a21      	ldr	r1, [r4, #32]
   123e0:	3104      	adds	r1, #4
   123e2:	f105 0009 	add.w	r0, r5, #9
   123e6:	f007 fc58 	bl	19c9a <Calc128Cpy>
   123ea:	e012      	b.n	12412 <smpSendKey+0xe8>
   123ec:	2b06      	cmp	r3, #6
   123ee:	d12b      	bne.n	12448 <smpSendKey+0x11e>
   123f0:	2307      	movs	r3, #7
   123f2:	7203      	strb	r3, [r0, #8]
   123f4:	6a23      	ldr	r3, [r4, #32]
   123f6:	8b9b      	ldrh	r3, [r3, #28]
   123f8:	7243      	strb	r3, [r0, #9]
   123fa:	6a23      	ldr	r3, [r4, #32]
   123fc:	8b9b      	ldrh	r3, [r3, #28]
   123fe:	0a1b      	lsrs	r3, r3, #8
   12400:	7283      	strb	r3, [r0, #10]
   12402:	6a22      	ldr	r2, [r4, #32]
   12404:	f852 3f14 	ldr.w	r3, [r2, #20]!
   12408:	f8c0 300b 	str.w	r3, [r0, #11]
   1240c:	6853      	ldr	r3, [r2, #4]
   1240e:	f8c0 300f 	str.w	r3, [r0, #15]
   12412:	7a2b      	ldrb	r3, [r5, #8]
   12414:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   12418:	4629      	mov	r1, r5
   1241a:	4620      	mov	r0, r4
   1241c:	f7fe fe7b 	bl	11116 <smpSendPkt>
   12420:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   12424:	2e00      	cmp	r6, #0
   12426:	d1c8      	bne.n	123ba <smpSendKey+0x90>
   12428:	2004      	movs	r0, #4
   1242a:	f008 fa80 	bl	1a92e <WsfMsgAlloc>
   1242e:	4601      	mov	r1, r0
   12430:	2800      	cmp	r0, #0
   12432:	d0c2      	beq.n	123ba <smpSendKey+0x90>
   12434:	230c      	movs	r3, #12
   12436:	7083      	strb	r3, [r0, #2]
   12438:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1243c:	8003      	strh	r3, [r0, #0]
   1243e:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
   12442:	f008 fa98 	bl	1a976 <WsfMsgSend>
   12446:	e7aa      	b.n	1239e <smpSendKey+0x74>
   12448:	07b1      	lsls	r1, r6, #30
   1244a:	d508      	bpl.n	1245e <smpSendKey+0x134>
   1244c:	b10b      	cbz	r3, 12452 <smpSendKey+0x128>
   1244e:	2b07      	cmp	r3, #7
   12450:	d105      	bne.n	1245e <smpSendKey+0x134>
   12452:	2308      	movs	r3, #8
   12454:	722b      	strb	r3, [r5, #8]
   12456:	f7fe f9b1 	bl	107bc <DmSecGetLocalIrk>
   1245a:	4601      	mov	r1, r0
   1245c:	e7c1      	b.n	123e2 <smpSendKey+0xb8>
   1245e:	2b08      	cmp	r3, #8
   12460:	d10b      	bne.n	1247a <smpSendKey+0x150>
   12462:	2309      	movs	r3, #9
   12464:	722b      	strb	r3, [r5, #8]
   12466:	2300      	movs	r3, #0
   12468:	726b      	strb	r3, [r5, #9]
   1246a:	f003 fcc9 	bl	15e00 <HciGetBdAddr>
   1246e:	4601      	mov	r1, r0
   12470:	f105 000a 	add.w	r0, r5, #10
   12474:	f007 fbc6 	bl	19c04 <BdaCpy>
   12478:	e7cb      	b.n	12412 <smpSendKey+0xe8>
   1247a:	0772      	lsls	r2, r6, #29
   1247c:	d50c      	bpl.n	12498 <smpSendKey+0x16e>
   1247e:	2b09      	cmp	r3, #9
   12480:	d80a      	bhi.n	12498 <smpSendKey+0x16e>
   12482:	f240 2281 	movw	r2, #641	; 0x281
   12486:	fa22 f303 	lsr.w	r3, r2, r3
   1248a:	07db      	lsls	r3, r3, #31
   1248c:	d504      	bpl.n	12498 <smpSendKey+0x16e>
   1248e:	230a      	movs	r3, #10
   12490:	722b      	strb	r3, [r5, #8]
   12492:	f7fe f98d 	bl	107b0 <DmSecGetLocalCsrk>
   12496:	e7e0      	b.n	1245a <smpSendKey+0x130>
   12498:	4628      	mov	r0, r5
   1249a:	f008 fa5f 	bl	1a95c <WsfMsgFree>
   1249e:	2601      	movs	r6, #1
   124a0:	e77d      	b.n	1239e <smpSendKey+0x74>
   124a2:	bf00      	nop
   124a4:	10003f14 	.word	0x10003f14

000124a8 <smpProcRcvKey>:
   124a8:	b570      	push	{r4, r5, r6, lr}
   124aa:	461e      	mov	r6, r3
   124ac:	7a13      	ldrb	r3, [r2, #8]
   124ae:	2b06      	cmp	r3, #6
   124b0:	460c      	mov	r4, r1
   124b2:	4605      	mov	r5, r0
   124b4:	f102 0109 	add.w	r1, r2, #9
   124b8:	d104      	bne.n	124c4 <smpProcRcvKey+0x1c>
   124ba:	1d20      	adds	r0, r4, #4
   124bc:	f007 fbed 	bl	19c9a <Calc128Cpy>
   124c0:	2200      	movs	r2, #0
   124c2:	e016      	b.n	124f2 <smpProcRcvKey+0x4a>
   124c4:	2b07      	cmp	r3, #7
   124c6:	d126      	bne.n	12516 <smpProcRcvKey+0x6e>
   124c8:	7a91      	ldrb	r1, [r2, #10]
   124ca:	7a53      	ldrb	r3, [r2, #9]
   124cc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   124d0:	83a3      	strh	r3, [r4, #28]
   124d2:	f852 3f0b 	ldr.w	r3, [r2, #11]!
   124d6:	6163      	str	r3, [r4, #20]
   124d8:	6853      	ldr	r3, [r2, #4]
   124da:	61a3      	str	r3, [r4, #24]
   124dc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   124e0:	f013 0f04 	tst.w	r3, #4
   124e4:	bf14      	ite	ne
   124e6:	2302      	movne	r3, #2
   124e8:	2301      	moveq	r3, #1
   124ea:	77e3      	strb	r3, [r4, #31]
   124ec:	2302      	movs	r3, #2
   124ee:	77a3      	strb	r3, [r4, #30]
   124f0:	2201      	movs	r2, #1
   124f2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   124f6:	2b06      	cmp	r3, #6
   124f8:	d001      	beq.n	124fe <smpProcRcvKey+0x56>
   124fa:	2b08      	cmp	r3, #8
   124fc:	d120      	bne.n	12540 <smpProcRcvKey+0x98>
   124fe:	3301      	adds	r3, #1
   12500:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   12504:	2500      	movs	r5, #0
   12506:	b122      	cbz	r2, 12512 <smpProcRcvKey+0x6a>
   12508:	232f      	movs	r3, #47	; 0x2f
   1250a:	70a3      	strb	r3, [r4, #2]
   1250c:	4620      	mov	r0, r4
   1250e:	f7fe f887 	bl	10620 <DmSmpCbackExec>
   12512:	4628      	mov	r0, r5
   12514:	bd70      	pop	{r4, r5, r6, pc}
   12516:	2b08      	cmp	r3, #8
   12518:	d0cf      	beq.n	124ba <smpProcRcvKey+0x12>
   1251a:	2b09      	cmp	r3, #9
   1251c:	d109      	bne.n	12532 <smpProcRcvKey+0x8a>
   1251e:	7a53      	ldrb	r3, [r2, #9]
   12520:	76a3      	strb	r3, [r4, #26]
   12522:	f102 010a 	add.w	r1, r2, #10
   12526:	f104 0014 	add.w	r0, r4, #20
   1252a:	f007 fb6b 	bl	19c04 <BdaCpy>
   1252e:	2304      	movs	r3, #4
   12530:	e7dd      	b.n	124ee <smpProcRcvKey+0x46>
   12532:	2b0a      	cmp	r3, #10
   12534:	d1c4      	bne.n	124c0 <smpProcRcvKey+0x18>
   12536:	1d20      	adds	r0, r4, #4
   12538:	f007 fbaf 	bl	19c9a <Calc128Cpy>
   1253c:	2308      	movs	r3, #8
   1253e:	e7d6      	b.n	124ee <smpProcRcvKey+0x46>
   12540:	07b0      	lsls	r0, r6, #30
   12542:	d503      	bpl.n	1254c <smpProcRcvKey+0xa4>
   12544:	2b07      	cmp	r3, #7
   12546:	d101      	bne.n	1254c <smpProcRcvKey+0xa4>
   12548:	2308      	movs	r3, #8
   1254a:	e7d9      	b.n	12500 <smpProcRcvKey+0x58>
   1254c:	0771      	lsls	r1, r6, #29
   1254e:	d505      	bpl.n	1255c <smpProcRcvKey+0xb4>
   12550:	2b07      	cmp	r3, #7
   12552:	d001      	beq.n	12558 <smpProcRcvKey+0xb0>
   12554:	2b09      	cmp	r3, #9
   12556:	d101      	bne.n	1255c <smpProcRcvKey+0xb4>
   12558:	230a      	movs	r3, #10
   1255a:	e7d1      	b.n	12500 <smpProcRcvKey+0x58>
   1255c:	2501      	movs	r5, #1
   1255e:	e7d2      	b.n	12506 <smpProcRcvKey+0x5e>

00012560 <smpActMaxAttempts>:
   12560:	b510      	push	{r4, lr}
   12562:	4604      	mov	r4, r0
   12564:	f7ff fe73 	bl	1224e <smpActPairingCancel>
   12568:	230f      	movs	r3, #15
   1256a:	7323      	strb	r3, [r4, #12]
   1256c:	4b04      	ldr	r3, [pc, #16]	; (12580 <smpActMaxAttempts+0x20>)
   1256e:	681b      	ldr	r3, [r3, #0]
   12570:	4620      	mov	r0, r4
   12572:	8819      	ldrh	r1, [r3, #0]
   12574:	f008 fba6 	bl	1acc4 <WsfTimerStartMs>
   12578:	2300      	movs	r3, #0
   1257a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   1257e:	bd10      	pop	{r4, pc}
   12580:	10002b88 	.word	0x10002b88

00012584 <smpActAttemptRcvd>:
   12584:	2301      	movs	r3, #1
   12586:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   1258a:	4770      	bx	lr

0001258c <smpActCheckAttempts>:
   1258c:	b510      	push	{r4, lr}
   1258e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   12592:	4604      	mov	r4, r0
   12594:	b153      	cbz	r3, 125ac <smpActCheckAttempts+0x20>
   12596:	2300      	movs	r3, #0
   12598:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   1259c:	2109      	movs	r1, #9
   1259e:	f7ff fe31 	bl	12204 <smpSendPairingFailed>
   125a2:	4620      	mov	r0, r4
   125a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   125a8:	f7ff be11 	b.w	121ce <smpCleanup>
   125ac:	bd10      	pop	{r4, pc}

000125ae <smpActPairingCmpl>:
   125ae:	b513      	push	{r0, r1, r4, lr}
   125b0:	4604      	mov	r4, r0
   125b2:	f7ff fe0c 	bl	121ce <smpCleanup>
   125b6:	2200      	movs	r2, #0
   125b8:	2101      	movs	r1, #1
   125ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   125be:	f7fd fabb 	bl	fb38 <DmConnSetIdle>
   125c2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   125c6:	f88d 3004 	strb.w	r3, [sp, #4]
   125ca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   125ce:	f8ad 3000 	strh.w	r3, [sp]
   125d2:	4668      	mov	r0, sp
   125d4:	232a      	movs	r3, #42	; 0x2a
   125d6:	f88d 3002 	strb.w	r3, [sp, #2]
   125da:	f7fe f821 	bl	10620 <DmSmpCbackExec>
   125de:	f7fe f9d3 	bl	10988 <DmSecGetEccKey>
   125e2:	b002      	add	sp, #8
   125e4:	bd10      	pop	{r4, pc}

000125e6 <smpSmExecute>:
   125e6:	b570      	push	{r4, r5, r6, lr}
   125e8:	4604      	mov	r4, r0
   125ea:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   125ee:	460d      	mov	r5, r1
   125f0:	f7fd facc 	bl	fb8c <DmConnRole>
   125f4:	4b13      	ldr	r3, [pc, #76]	; (12644 <smpSmExecute+0x5e>)
   125f6:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   125fa:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
   125fe:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   12602:	78ae      	ldrb	r6, [r5, #2]
   12604:	2801      	cmp	r0, #1
   12606:	bf18      	it	ne
   12608:	461a      	movne	r2, r3
   1260a:	6813      	ldr	r3, [r2, #0]
   1260c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   12610:	4603      	mov	r3, r0
   12612:	7819      	ldrb	r1, [r3, #0]
   12614:	42b1      	cmp	r1, r6
   12616:	d10b      	bne.n	12630 <smpSmExecute+0x4a>
   12618:	7859      	ldrb	r1, [r3, #1]
   1261a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   1261e:	7899      	ldrb	r1, [r3, #2]
   12620:	6853      	ldr	r3, [r2, #4]
   12622:	4620      	mov	r0, r4
   12624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   12628:	4629      	mov	r1, r5
   1262a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1262e:	4718      	bx	r3
   12630:	f813 1f03 	ldrb.w	r1, [r3, #3]!
   12634:	2900      	cmp	r1, #0
   12636:	d1ec      	bne.n	12612 <smpSmExecute+0x2c>
   12638:	6890      	ldr	r0, [r2, #8]
   1263a:	f100 010c 	add.w	r1, r0, #12
   1263e:	4299      	cmp	r1, r3
   12640:	d1e6      	bne.n	12610 <smpSmExecute+0x2a>
   12642:	bd70      	pop	{r4, r5, r6, pc}
   12644:	10003f14 	.word	0x10003f14

00012648 <smpProcPairing>:
   12648:	b513      	push	{r0, r1, r4, lr}
   1264a:	2300      	movs	r3, #0
   1264c:	7013      	strb	r3, [r2, #0]
   1264e:	700b      	strb	r3, [r1, #0]
   12650:	7c83      	ldrb	r3, [r0, #18]
   12652:	2b01      	cmp	r3, #1
   12654:	d127      	bne.n	126a6 <smpProcPairing+0x5e>
   12656:	7e43      	ldrb	r3, [r0, #25]
   12658:	2b01      	cmp	r3, #1
   1265a:	d124      	bne.n	126a6 <smpProcPairing+0x5e>
   1265c:	700b      	strb	r3, [r1, #0]
   1265e:	7cc3      	ldrb	r3, [r0, #19]
   12660:	7e82      	ldrb	r2, [r0, #26]
   12662:	4013      	ands	r3, r2
   12664:	f043 0304 	orr.w	r3, r3, #4
   12668:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   1266c:	2300      	movs	r3, #0
   1266e:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   12672:	2a00      	cmp	r2, #0
   12674:	d049      	beq.n	1270a <smpProcPairing+0xc2>
   12676:	7cc1      	ldrb	r1, [r0, #19]
   12678:	4a2d      	ldr	r2, [pc, #180]	; (12730 <smpProcPairing+0xe8>)
   1267a:	6812      	ldr	r2, [r2, #0]
   1267c:	2b00      	cmp	r3, #0
   1267e:	d046      	beq.n	1270e <smpProcPairing+0xc6>
   12680:	7993      	ldrb	r3, [r2, #6]
   12682:	f003 0304 	and.w	r3, r3, #4
   12686:	4219      	tst	r1, r3
   12688:	d041      	beq.n	1270e <smpProcPairing+0xc6>
   1268a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1268e:	f8ad 3004 	strh.w	r3, [sp, #4]
   12692:	f240 3303 	movw	r3, #771	; 0x303
   12696:	a901      	add	r1, sp, #4
   12698:	f8ad 3006 	strh.w	r3, [sp, #6]
   1269c:	f7ff ffa3 	bl	125e6 <smpSmExecute>
   126a0:	2000      	movs	r0, #0
   126a2:	b002      	add	sp, #8
   126a4:	bd10      	pop	{r4, pc}
   126a6:	7cc1      	ldrb	r1, [r0, #19]
   126a8:	074b      	lsls	r3, r1, #29
   126aa:	d402      	bmi.n	126b2 <smpProcPairing+0x6a>
   126ac:	7e83      	ldrb	r3, [r0, #26]
   126ae:	075c      	lsls	r4, r3, #29
   126b0:	d509      	bpl.n	126c6 <smpProcPairing+0x7e>
   126b2:	7c44      	ldrb	r4, [r0, #17]
   126b4:	2c03      	cmp	r4, #3
   126b6:	d006      	beq.n	126c6 <smpProcPairing+0x7e>
   126b8:	7e03      	ldrb	r3, [r0, #24]
   126ba:	2b03      	cmp	r3, #3
   126bc:	d003      	beq.n	126c6 <smpProcPairing+0x7e>
   126be:	2c01      	cmp	r4, #1
   126c0:	d809      	bhi.n	126d6 <smpProcPairing+0x8e>
   126c2:	2b01      	cmp	r3, #1
   126c4:	d81f      	bhi.n	12706 <smpProcPairing+0xbe>
   126c6:	7e83      	ldrb	r3, [r0, #26]
   126c8:	4019      	ands	r1, r3
   126ca:	f021 0104 	bic.w	r1, r1, #4
   126ce:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
   126d2:	2301      	movs	r3, #1
   126d4:	e7cb      	b.n	1266e <smpProcPairing+0x26>
   126d6:	2c04      	cmp	r4, #4
   126d8:	d113      	bne.n	12702 <smpProcPairing+0xba>
   126da:	2b02      	cmp	r3, #2
   126dc:	d013      	beq.n	12706 <smpProcPairing+0xbe>
   126de:	1f19      	subs	r1, r3, #4
   126e0:	424b      	negs	r3, r1
   126e2:	414b      	adcs	r3, r1
   126e4:	7013      	strb	r3, [r2, #0]
   126e6:	7e01      	ldrb	r1, [r0, #24]
   126e8:	2902      	cmp	r1, #2
   126ea:	d102      	bne.n	126f2 <smpProcPairing+0xaa>
   126ec:	7c41      	ldrb	r1, [r0, #17]
   126ee:	2902      	cmp	r1, #2
   126f0:	d0b5      	beq.n	1265e <smpProcPairing+0x16>
   126f2:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   126f6:	2900      	cmp	r1, #0
   126f8:	bf08      	it	eq
   126fa:	f083 0301 	eoreq.w	r3, r3, #1
   126fe:	7013      	strb	r3, [r2, #0]
   12700:	e7ad      	b.n	1265e <smpProcPairing+0x16>
   12702:	2300      	movs	r3, #0
   12704:	e7ee      	b.n	126e4 <smpProcPairing+0x9c>
   12706:	2301      	movs	r3, #1
   12708:	e7ec      	b.n	126e4 <smpProcPairing+0x9c>
   1270a:	7e81      	ldrb	r1, [r0, #26]
   1270c:	e7b4      	b.n	12678 <smpProcPairing+0x30>
   1270e:	78d3      	ldrb	r3, [r2, #3]
   12710:	7d02      	ldrb	r2, [r0, #20]
   12712:	429a      	cmp	r2, r3
   12714:	d302      	bcc.n	1271c <smpProcPairing+0xd4>
   12716:	7ec2      	ldrb	r2, [r0, #27]
   12718:	429a      	cmp	r2, r3
   1271a:	d206      	bcs.n	1272a <smpProcPairing+0xe2>
   1271c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12720:	f8ad 3004 	strh.w	r3, [sp, #4]
   12724:	f240 6303 	movw	r3, #1539	; 0x603
   12728:	e7b5      	b.n	12696 <smpProcPairing+0x4e>
   1272a:	2001      	movs	r0, #1
   1272c:	e7b9      	b.n	126a2 <smpProcPairing+0x5a>
   1272e:	bf00      	nop
   12730:	10002b88 	.word	0x10002b88

00012734 <smpAuthReq>:
   12734:	b510      	push	{r4, lr}
   12736:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1273a:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   1273e:	b086      	sub	sp, #24
   12740:	f013 0304 	ands.w	r3, r3, #4
   12744:	f8ad 4000 	strh.w	r4, [sp]
   12748:	d00b      	beq.n	12762 <smpAuthReq+0x2e>
   1274a:	232e      	movs	r3, #46	; 0x2e
   1274c:	4668      	mov	r0, sp
   1274e:	f88d 3002 	strb.w	r3, [sp, #2]
   12752:	f88d 1004 	strb.w	r1, [sp, #4]
   12756:	f88d 2005 	strb.w	r2, [sp, #5]
   1275a:	f7fd ff61 	bl	10620 <DmSmpCbackExec>
   1275e:	b006      	add	sp, #24
   12760:	bd10      	pop	{r4, pc}
   12762:	2204      	movs	r2, #4
   12764:	f8ad 3004 	strh.w	r3, [sp, #4]
   12768:	f88d 3006 	strb.w	r3, [sp, #6]
   1276c:	4669      	mov	r1, sp
   1276e:	2303      	movs	r3, #3
   12770:	f88d 2002 	strb.w	r2, [sp, #2]
   12774:	f88d 3014 	strb.w	r3, [sp, #20]
   12778:	f7ff ff35 	bl	125e6 <smpSmExecute>
   1277c:	e7ef      	b.n	1275e <smpAuthReq+0x2a>
   1277e:	bf00      	nop

00012780 <smpiActPairReq>:
   12780:	b538      	push	{r3, r4, r5, lr}
   12782:	2201      	movs	r2, #1
   12784:	4604      	mov	r4, r0
   12786:	460d      	mov	r5, r1
   12788:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1278c:	4611      	mov	r1, r2
   1278e:	f7fd f9d3 	bl	fb38 <DmConnSetIdle>
   12792:	2302      	movs	r3, #2
   12794:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12798:	4620      	mov	r0, r4
   1279a:	f7ff fd11 	bl	121c0 <smpStartRspTimer>
   1279e:	2040      	movs	r0, #64	; 0x40
   127a0:	f008 f836 	bl	1a810 <WsfBufAlloc>
   127a4:	6220      	str	r0, [r4, #32]
   127a6:	200f      	movs	r0, #15
   127a8:	f7fe fd00 	bl	111ac <smpMsgAlloc>
   127ac:	4601      	mov	r1, r0
   127ae:	b1e0      	cbz	r0, 127ea <smpiActPairReq+0x6a>
   127b0:	2301      	movs	r3, #1
   127b2:	7203      	strb	r3, [r0, #8]
   127b4:	4b0d      	ldr	r3, [pc, #52]	; (127ec <smpiActPairReq+0x6c>)
   127b6:	681b      	ldr	r3, [r3, #0]
   127b8:	789a      	ldrb	r2, [r3, #2]
   127ba:	7242      	strb	r2, [r0, #9]
   127bc:	792a      	ldrb	r2, [r5, #4]
   127be:	7282      	strb	r2, [r0, #10]
   127c0:	796a      	ldrb	r2, [r5, #5]
   127c2:	72c2      	strb	r2, [r0, #11]
   127c4:	791b      	ldrb	r3, [r3, #4]
   127c6:	7303      	strb	r3, [r0, #12]
   127c8:	79ab      	ldrb	r3, [r5, #6]
   127ca:	7343      	strb	r3, [r0, #13]
   127cc:	79eb      	ldrb	r3, [r5, #7]
   127ce:	7383      	strb	r3, [r0, #14]
   127d0:	4603      	mov	r3, r0
   127d2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   127d6:	6120      	str	r0, [r4, #16]
   127d8:	8898      	ldrh	r0, [r3, #4]
   127da:	82a0      	strh	r0, [r4, #20]
   127dc:	799b      	ldrb	r3, [r3, #6]
   127de:	75a3      	strb	r3, [r4, #22]
   127e0:	4620      	mov	r0, r4
   127e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127e6:	f7fe bc96 	b.w	11116 <smpSendPkt>
   127ea:	bd38      	pop	{r3, r4, r5, pc}
   127ec:	10002b88 	.word	0x10002b88

000127f0 <smpiActCheckSecurityReq>:
   127f0:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   127f4:	b12a      	cbz	r2, 12802 <smpiActCheckSecurityReq+0x12>
   127f6:	2200      	movs	r2, #0
   127f8:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
   127fc:	78c9      	ldrb	r1, [r1, #3]
   127fe:	f7ff bd01 	b.w	12204 <smpSendPairingFailed>
   12802:	4770      	bx	lr

00012804 <smpiActProcSecurityReq>:
   12804:	b507      	push	{r0, r1, r2, lr}
   12806:	2301      	movs	r3, #1
   12808:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   1280c:	684b      	ldr	r3, [r1, #4]
   1280e:	7a5b      	ldrb	r3, [r3, #9]
   12810:	f88d 3004 	strb.w	r3, [sp, #4]
   12814:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12818:	f8ad 3000 	strh.w	r3, [sp]
   1281c:	4668      	mov	r0, sp
   1281e:	2332      	movs	r3, #50	; 0x32
   12820:	f88d 3002 	strb.w	r3, [sp, #2]
   12824:	f7fd fefc 	bl	10620 <DmSmpCbackExec>
   12828:	b003      	add	sp, #12
   1282a:	f85d fb04 	ldr.w	pc, [sp], #4

0001282e <smpiActProcPairRsp>:
   1282e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12830:	684a      	ldr	r2, [r1, #4]
   12832:	7d45      	ldrb	r5, [r0, #21]
   12834:	4613      	mov	r3, r2
   12836:	4604      	mov	r4, r0
   12838:	f853 6f08 	ldr.w	r6, [r3, #8]!
   1283c:	f8c0 6017 	str.w	r6, [r0, #23]
   12840:	889e      	ldrh	r6, [r3, #4]
   12842:	f8a0 601b 	strh.w	r6, [r0, #27]
   12846:	799b      	ldrb	r3, [r3, #6]
   12848:	7743      	strb	r3, [r0, #29]
   1284a:	7b53      	ldrb	r3, [r2, #13]
   1284c:	43ab      	bics	r3, r5
   1284e:	d103      	bne.n	12858 <smpiActProcPairRsp+0x2a>
   12850:	7d85      	ldrb	r5, [r0, #22]
   12852:	7b93      	ldrb	r3, [r2, #14]
   12854:	43ab      	bics	r3, r5
   12856:	d007      	beq.n	12868 <smpiActProcPairRsp+0x3a>
   12858:	f640 2303 	movw	r3, #2563	; 0xa03
   1285c:	804b      	strh	r3, [r1, #2]
   1285e:	4620      	mov	r0, r4
   12860:	f7ff fec1 	bl	125e6 <smpSmExecute>
   12864:	b002      	add	sp, #8
   12866:	bd70      	pop	{r4, r5, r6, pc}
   12868:	4d09      	ldr	r5, [pc, #36]	; (12890 <smpiActProcPairRsp+0x62>)
   1286a:	f10d 0207 	add.w	r2, sp, #7
   1286e:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   12872:	f10d 0106 	add.w	r1, sp, #6
   12876:	4798      	blx	r3
   12878:	2800      	cmp	r0, #0
   1287a:	d0f3      	beq.n	12864 <smpiActProcPairRsp+0x36>
   1287c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   12880:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12884:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12888:	4620      	mov	r0, r4
   1288a:	4798      	blx	r3
   1288c:	e7ea      	b.n	12864 <smpiActProcPairRsp+0x36>
   1288e:	bf00      	nop
   12890:	10003f14 	.word	0x10003f14

00012894 <smpiActProcPairCnf>:
   12894:	b538      	push	{r3, r4, r5, lr}
   12896:	6a02      	ldr	r2, [r0, #32]
   12898:	684b      	ldr	r3, [r1, #4]
   1289a:	4604      	mov	r4, r0
   1289c:	f103 0109 	add.w	r1, r3, #9
   128a0:	3220      	adds	r2, #32
   128a2:	3319      	adds	r3, #25
   128a4:	f851 0b04 	ldr.w	r0, [r1], #4
   128a8:	f842 0b04 	str.w	r0, [r2], #4
   128ac:	4299      	cmp	r1, r3
   128ae:	d1f9      	bne.n	128a4 <smpiActProcPairCnf+0x10>
   128b0:	2504      	movs	r5, #4
   128b2:	4620      	mov	r0, r4
   128b4:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   128b8:	f7ff fc82 	bl	121c0 <smpStartRspTimer>
   128bc:	2019      	movs	r0, #25
   128be:	f7fe fc75 	bl	111ac <smpMsgAlloc>
   128c2:	4601      	mov	r1, r0
   128c4:	b180      	cbz	r0, 128e8 <smpiActProcPairCnf+0x54>
   128c6:	7205      	strb	r5, [r0, #8]
   128c8:	6a23      	ldr	r3, [r4, #32]
   128ca:	3009      	adds	r0, #9
   128cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
   128d0:	3340      	adds	r3, #64	; 0x40
   128d2:	f852 5b04 	ldr.w	r5, [r2], #4
   128d6:	f840 5b04 	str.w	r5, [r0], #4
   128da:	429a      	cmp	r2, r3
   128dc:	d1f9      	bne.n	128d2 <smpiActProcPairCnf+0x3e>
   128de:	4620      	mov	r0, r4
   128e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   128e4:	f7fe bc17 	b.w	11116 <smpSendPkt>
   128e8:	bd38      	pop	{r3, r4, r5, pc}

000128ea <smpiActCnfVerify>:
   128ea:	b570      	push	{r4, r5, r6, lr}
   128ec:	460e      	mov	r6, r1
   128ee:	6a05      	ldr	r5, [r0, #32]
   128f0:	4604      	mov	r4, r0
   128f2:	2210      	movs	r2, #16
   128f4:	f105 0120 	add.w	r1, r5, #32
   128f8:	6870      	ldr	r0, [r6, #4]
   128fa:	f7f9 fc01 	bl	c100 <memcmp>
   128fe:	b1c8      	cbz	r0, 12934 <smpiActCnfVerify+0x4a>
   12900:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   12904:	b19b      	cbz	r3, 1292e <smpiActCnfVerify+0x44>
   12906:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1290a:	4a0f      	ldr	r2, [pc, #60]	; (12948 <smpiActCnfVerify+0x5e>)
   1290c:	3301      	adds	r3, #1
   1290e:	b2db      	uxtb	r3, r3
   12910:	6812      	ldr	r2, [r2, #0]
   12912:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   12916:	7952      	ldrb	r2, [r2, #5]
   12918:	429a      	cmp	r2, r3
   1291a:	d108      	bne.n	1292e <smpiActCnfVerify+0x44>
   1291c:	f640 130d 	movw	r3, #2317	; 0x90d
   12920:	8073      	strh	r3, [r6, #2]
   12922:	4631      	mov	r1, r6
   12924:	4620      	mov	r0, r4
   12926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1292a:	f7ff be5c 	b.w	125e6 <smpSmExecute>
   1292e:	f240 4303 	movw	r3, #1027	; 0x403
   12932:	e7f5      	b.n	12920 <smpiActCnfVerify+0x36>
   12934:	f105 0330 	add.w	r3, r5, #48	; 0x30
   12938:	f105 0210 	add.w	r2, r5, #16
   1293c:	4629      	mov	r1, r5
   1293e:	4620      	mov	r0, r4
   12940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12944:	f7fe bb90 	b.w	11068 <smpCalcS1>
   12948:	10002b88 	.word	0x10002b88

0001294c <smpiActStkEncrypt>:
   1294c:	b530      	push	{r4, r5, lr}
   1294e:	7ec4      	ldrb	r4, [r0, #27]
   12950:	7d03      	ldrb	r3, [r0, #20]
   12952:	6849      	ldr	r1, [r1, #4]
   12954:	429c      	cmp	r4, r3
   12956:	b085      	sub	sp, #20
   12958:	bf28      	it	cs
   1295a:	461c      	movcs	r4, r3
   1295c:	4605      	mov	r5, r0
   1295e:	4622      	mov	r2, r4
   12960:	4668      	mov	r0, sp
   12962:	f7f9 fbfd 	bl	c160 <memcpy>
   12966:	2100      	movs	r1, #0
   12968:	f1c4 0210 	rsb	r2, r4, #16
   1296c:	eb0d 0004 	add.w	r0, sp, r4
   12970:	f7f9 fcf4 	bl	c35c <memset>
   12974:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   12978:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   1297c:	f013 0f04 	tst.w	r3, #4
   12980:	466a      	mov	r2, sp
   12982:	bf14      	ite	ne
   12984:	2102      	movne	r1, #2
   12986:	2101      	moveq	r1, #1
   12988:	f7ff fb4c 	bl	12024 <DmSmpEncryptReq>
   1298c:	b005      	add	sp, #20
   1298e:	bd30      	pop	{r4, r5, pc}

00012990 <smpiActSetupKeyDist>:
   12990:	b538      	push	{r3, r4, r5, lr}
   12992:	4604      	mov	r4, r0
   12994:	460d      	mov	r5, r1
   12996:	f7ff fc13 	bl	121c0 <smpStartRspTimer>
   1299a:	6a23      	ldr	r3, [r4, #32]
   1299c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   129a0:	801a      	strh	r2, [r3, #0]
   129a2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   129a6:	f012 0f04 	tst.w	r2, #4
   129aa:	bf14      	ite	ne
   129ac:	2202      	movne	r2, #2
   129ae:	2201      	moveq	r2, #1
   129b0:	77da      	strb	r2, [r3, #31]
   129b2:	7ee2      	ldrb	r2, [r4, #27]
   129b4:	7d21      	ldrb	r1, [r4, #20]
   129b6:	428a      	cmp	r2, r1
   129b8:	bf28      	it	cs
   129ba:	460a      	movcs	r2, r1
   129bc:	f883 2020 	strb.w	r2, [r3, #32]
   129c0:	2300      	movs	r3, #0
   129c2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   129c6:	7f62      	ldrb	r2, [r4, #29]
   129c8:	7da3      	ldrb	r3, [r4, #22]
   129ca:	4013      	ands	r3, r2
   129cc:	07d8      	lsls	r0, r3, #31
   129ce:	d518      	bpl.n	12a02 <smpiActSetupKeyDist+0x72>
   129d0:	4a0f      	ldr	r2, [pc, #60]	; (12a10 <smpiActSetupKeyDist+0x80>)
   129d2:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   129d6:	b192      	cbz	r2, 129fe <smpiActSetupKeyDist+0x6e>
   129d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
   129da:	7812      	ldrb	r2, [r2, #0]
   129dc:	b17a      	cbz	r2, 129fe <smpiActSetupKeyDist+0x6e>
   129de:	0799      	lsls	r1, r3, #30
   129e0:	d502      	bpl.n	129e8 <smpiActSetupKeyDist+0x58>
   129e2:	2308      	movs	r3, #8
   129e4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   129e8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   129ec:	b97b      	cbnz	r3, 12a0e <smpiActSetupKeyDist+0x7e>
   129ee:	230c      	movs	r3, #12
   129f0:	70ab      	strb	r3, [r5, #2]
   129f2:	4629      	mov	r1, r5
   129f4:	4620      	mov	r0, r4
   129f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   129fa:	f7ff bdf4 	b.w	125e6 <smpSmExecute>
   129fe:	2306      	movs	r3, #6
   12a00:	e7f0      	b.n	129e4 <smpiActSetupKeyDist+0x54>
   12a02:	079a      	lsls	r2, r3, #30
   12a04:	d4ed      	bmi.n	129e2 <smpiActSetupKeyDist+0x52>
   12a06:	075b      	lsls	r3, r3, #29
   12a08:	d5ee      	bpl.n	129e8 <smpiActSetupKeyDist+0x58>
   12a0a:	230a      	movs	r3, #10
   12a0c:	e7ea      	b.n	129e4 <smpiActSetupKeyDist+0x54>
   12a0e:	bd38      	pop	{r3, r4, r5, pc}
   12a10:	10003f14 	.word	0x10003f14

00012a14 <smpiActRcvKey>:
   12a14:	b538      	push	{r3, r4, r5, lr}
   12a16:	7d82      	ldrb	r2, [r0, #22]
   12a18:	7f43      	ldrb	r3, [r0, #29]
   12a1a:	460d      	mov	r5, r1
   12a1c:	4013      	ands	r3, r2
   12a1e:	684a      	ldr	r2, [r1, #4]
   12a20:	6a01      	ldr	r1, [r0, #32]
   12a22:	4604      	mov	r4, r0
   12a24:	f7ff fd40 	bl	124a8 <smpProcRcvKey>
   12a28:	b150      	cbz	r0, 12a40 <smpiActRcvKey+0x2c>
   12a2a:	2300      	movs	r3, #0
   12a2c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12a30:	230c      	movs	r3, #12
   12a32:	70ab      	strb	r3, [r5, #2]
   12a34:	4629      	mov	r1, r5
   12a36:	4620      	mov	r0, r4
   12a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12a3c:	f7ff bdd3 	b.w	125e6 <smpSmExecute>
   12a40:	bd38      	pop	{r3, r4, r5, pc}

00012a42 <smpiActSendKey>:
   12a42:	b538      	push	{r3, r4, r5, lr}
   12a44:	460d      	mov	r5, r1
   12a46:	7f03      	ldrb	r3, [r0, #28]
   12a48:	7d41      	ldrb	r1, [r0, #21]
   12a4a:	4019      	ands	r1, r3
   12a4c:	4604      	mov	r4, r0
   12a4e:	f7ff fc6c 	bl	1232a <smpSendKey>
   12a52:	b138      	cbz	r0, 12a64 <smpiActSendKey+0x22>
   12a54:	230e      	movs	r3, #14
   12a56:	70ab      	strb	r3, [r5, #2]
   12a58:	4629      	mov	r1, r5
   12a5a:	4620      	mov	r0, r4
   12a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12a60:	f7ff bdc1 	b.w	125e6 <smpSmExecute>
   12a64:	bd38      	pop	{r3, r4, r5, pc}
   12a66:	bf00      	nop

00012a68 <smpiScActAuthSelect>:
   12a68:	f7fe bfc9 	b.w	119fe <smpScActAuthSelect>

00012a6c <smpiScActSendPubKey>:
   12a6c:	230c      	movs	r3, #12
   12a6e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12a72:	f7fe bd04 	b.w	1147e <smpScSendPubKey>

00012a76 <smpiScActJwncSetup>:
   12a76:	b538      	push	{r3, r4, r5, lr}
   12a78:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a7a:	4d0b      	ldr	r5, [pc, #44]	; (12aa8 <smpiScActJwncSetup+0x32>)
   12a7c:	4604      	mov	r4, r0
   12a7e:	2110      	movs	r1, #16
   12a80:	68d8      	ldr	r0, [r3, #12]
   12a82:	f005 ff07 	bl	18894 <SecRand>
   12a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a88:	68d8      	ldr	r0, [r3, #12]
   12a8a:	4629      	mov	r1, r5
   12a8c:	3020      	adds	r0, #32
   12a8e:	f007 f904 	bl	19c9a <Calc128Cpy>
   12a92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a94:	68d8      	ldr	r0, [r3, #12]
   12a96:	4629      	mov	r1, r5
   12a98:	3030      	adds	r0, #48	; 0x30
   12a9a:	f007 f8fe 	bl	19c9a <Calc128Cpy>
   12a9e:	2303      	movs	r3, #3
   12aa0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12aa4:	bd38      	pop	{r3, r4, r5, pc}
   12aa6:	bf00      	nop
   12aa8:	00026ce0 	.word	0x00026ce0

00012aac <smpiScActJwncSendRand>:
   12aac:	b538      	push	{r3, r4, r5, lr}
   12aae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12ab0:	4604      	mov	r4, r0
   12ab2:	460d      	mov	r5, r1
   12ab4:	68d8      	ldr	r0, [r3, #12]
   12ab6:	6849      	ldr	r1, [r1, #4]
   12ab8:	2210      	movs	r2, #16
   12aba:	3109      	adds	r1, #9
   12abc:	3040      	adds	r0, #64	; 0x40
   12abe:	f007 f927 	bl	19d10 <WStrReverseCpy>
   12ac2:	2304      	movs	r3, #4
   12ac4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12aca:	4629      	mov	r1, r5
   12acc:	68da      	ldr	r2, [r3, #12]
   12ace:	4620      	mov	r0, r4
   12ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12ad4:	f7fe bd2d 	b.w	11532 <smpScSendRand>

00012ad8 <smpiScActJwncCalcF4>:
   12ad8:	b538      	push	{r3, r4, r5, lr}
   12ada:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12adc:	4604      	mov	r4, r0
   12ade:	460d      	mov	r5, r1
   12ae0:	68d8      	ldr	r0, [r3, #12]
   12ae2:	6849      	ldr	r1, [r1, #4]
   12ae4:	2210      	movs	r2, #16
   12ae6:	3109      	adds	r1, #9
   12ae8:	4410      	add	r0, r2
   12aea:	f007 f911 	bl	19d10 <WStrReverseCpy>
   12aee:	4629      	mov	r1, r5
   12af0:	4620      	mov	r0, r4
   12af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12af6:	f7fe bfcc 	b.w	11a92 <smpScActJwncCalcF4>

00012afa <smpiScActJwncCalcG2>:
   12afa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12afe:	4604      	mov	r4, r0
   12b00:	68d8      	ldr	r0, [r3, #12]
   12b02:	460d      	mov	r5, r1
   12b04:	2210      	movs	r2, #16
   12b06:	6849      	ldr	r1, [r1, #4]
   12b08:	3040      	adds	r0, #64	; 0x40
   12b0a:	f7f9 faf9 	bl	c100 <memcmp>
   12b0e:	b168      	cbz	r0, 12b2c <smpiScActJwncCalcG2+0x32>
   12b10:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12b14:	f8ad 3004 	strh.w	r3, [sp, #4]
   12b18:	a901      	add	r1, sp, #4
   12b1a:	f240 4303 	movw	r3, #1027	; 0x403
   12b1e:	4620      	mov	r0, r4
   12b20:	f8ad 3006 	strh.w	r3, [sp, #6]
   12b24:	f7ff fd5f 	bl	125e6 <smpSmExecute>
   12b28:	b003      	add	sp, #12
   12b2a:	bd30      	pop	{r4, r5, pc}
   12b2c:	4629      	mov	r1, r5
   12b2e:	4620      	mov	r0, r4
   12b30:	f7fe ffd1 	bl	11ad6 <smpScActJwncCalcG2>
   12b34:	e7f8      	b.n	12b28 <smpiScActJwncCalcG2+0x2e>

00012b36 <smpiScActPkCalcCa>:
   12b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b38:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b3a:	78da      	ldrb	r2, [r3, #3]
   12b3c:	4604      	mov	r4, r0
   12b3e:	460d      	mov	r5, r1
   12b40:	b9da      	cbnz	r2, 12b7a <smpiScActPkCalcCa+0x44>
   12b42:	68d8      	ldr	r0, [r3, #12]
   12b44:	4919      	ldr	r1, [pc, #100]	; (12bac <smpiScActPkCalcCa+0x76>)
   12b46:	3020      	adds	r0, #32
   12b48:	f007 f8a7 	bl	19c9a <Calc128Cpy>
   12b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b4e:	4917      	ldr	r1, [pc, #92]	; (12bac <smpiScActPkCalcCa+0x76>)
   12b50:	68d8      	ldr	r0, [r3, #12]
   12b52:	3030      	adds	r0, #48	; 0x30
   12b54:	f007 f8a1 	bl	19c9a <Calc128Cpy>
   12b58:	7d2a      	ldrb	r2, [r5, #20]
   12b5a:	2a03      	cmp	r2, #3
   12b5c:	d80d      	bhi.n	12b7a <smpiScActPkCalcCa+0x44>
   12b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b60:	68d8      	ldr	r0, [r3, #12]
   12b62:	1d2e      	adds	r6, r5, #4
   12b64:	4631      	mov	r1, r6
   12b66:	302d      	adds	r0, #45	; 0x2d
   12b68:	f007 f8d2 	bl	19d10 <WStrReverseCpy>
   12b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b6e:	7d2a      	ldrb	r2, [r5, #20]
   12b70:	68d8      	ldr	r0, [r3, #12]
   12b72:	4631      	mov	r1, r6
   12b74:	303d      	adds	r0, #61	; 0x3d
   12b76:	f007 f8cb 	bl	19d10 <WStrReverseCpy>
   12b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b7c:	2110      	movs	r1, #16
   12b7e:	68d8      	ldr	r0, [r3, #12]
   12b80:	f005 fe88 	bl	18894 <SecRand>
   12b84:	f7fd ff00 	bl	10988 <DmSecGetEccKey>
   12b88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b8a:	4606      	mov	r6, r0
   12b8c:	4620      	mov	r0, r4
   12b8e:	689f      	ldr	r7, [r3, #8]
   12b90:	f7fe fd1f 	bl	115d2 <smpGetPkBit>
   12b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b96:	68db      	ldr	r3, [r3, #12]
   12b98:	4632      	mov	r2, r6
   12b9a:	e9cd 0300 	strd	r0, r3, [sp]
   12b9e:	4629      	mov	r1, r5
   12ba0:	463b      	mov	r3, r7
   12ba2:	4620      	mov	r0, r4
   12ba4:	f7fe fbfc 	bl	113a0 <SmpScCalcF4>
   12ba8:	b003      	add	sp, #12
   12baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bac:	00026ce0 	.word	0x00026ce0

00012bb0 <smpiScActPkCalcCb>:
   12bb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12bb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bb4:	4604      	mov	r4, r0
   12bb6:	460d      	mov	r5, r1
   12bb8:	68d8      	ldr	r0, [r3, #12]
   12bba:	6849      	ldr	r1, [r1, #4]
   12bbc:	2210      	movs	r2, #16
   12bbe:	3109      	adds	r1, #9
   12bc0:	4410      	add	r0, r2
   12bc2:	f007 f8a5 	bl	19d10 <WStrReverseCpy>
   12bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bc8:	689e      	ldr	r6, [r3, #8]
   12bca:	f7fd fedd 	bl	10988 <DmSecGetEccKey>
   12bce:	4607      	mov	r7, r0
   12bd0:	4620      	mov	r0, r4
   12bd2:	f7fe fcfe 	bl	115d2 <smpGetPkBit>
   12bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bd8:	68d9      	ldr	r1, [r3, #12]
   12bda:	3110      	adds	r1, #16
   12bdc:	e9cd 0100 	strd	r0, r1, [sp]
   12be0:	463b      	mov	r3, r7
   12be2:	4632      	mov	r2, r6
   12be4:	4629      	mov	r1, r5
   12be6:	4620      	mov	r0, r4
   12be8:	f7fe fbda 	bl	113a0 <SmpScCalcF4>
   12bec:	b003      	add	sp, #12
   12bee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012bf0 <smpiScActPkSendCnf>:
   12bf0:	684a      	ldr	r2, [r1, #4]
   12bf2:	f7fe bcc6 	b.w	11582 <smpScSendPairCnf>

00012bf6 <smpiScActPkSendRand>:
   12bf6:	f7ff bf59 	b.w	12aac <smpiScActJwncSendRand>

00012bfa <smpiScActPkCheck>:
   12bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12bfc:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12bfe:	6849      	ldr	r1, [r1, #4]
   12c00:	4604      	mov	r4, r0
   12c02:	68e8      	ldr	r0, [r5, #12]
   12c04:	2210      	movs	r2, #16
   12c06:	3040      	adds	r0, #64	; 0x40
   12c08:	f7f9 fa7a 	bl	c100 <memcmp>
   12c0c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12c10:	b158      	cbz	r0, 12c2a <smpiScActPkCheck+0x30>
   12c12:	f240 4303 	movw	r3, #1027	; 0x403
   12c16:	f8ad 2004 	strh.w	r2, [sp, #4]
   12c1a:	f8ad 3006 	strh.w	r3, [sp, #6]
   12c1e:	a901      	add	r1, sp, #4
   12c20:	4620      	mov	r0, r4
   12c22:	f7ff fce0 	bl	125e6 <smpSmExecute>
   12c26:	b003      	add	sp, #12
   12c28:	bd30      	pop	{r4, r5, pc}
   12c2a:	78eb      	ldrb	r3, [r5, #3]
   12c2c:	3301      	adds	r3, #1
   12c2e:	b2db      	uxtb	r3, r3
   12c30:	2b13      	cmp	r3, #19
   12c32:	70eb      	strb	r3, [r5, #3]
   12c34:	bf97      	itett	ls
   12c36:	2303      	movls	r3, #3
   12c38:	231a      	movhi	r3, #26
   12c3a:	f884 302f 	strbls.w	r3, [r4, #47]	; 0x2f
   12c3e:	2319      	movls	r3, #25
   12c40:	f88d 3006 	strb.w	r3, [sp, #6]
   12c44:	f8ad 2004 	strh.w	r2, [sp, #4]
   12c48:	e7e9      	b.n	12c1e <smpiScActPkCheck+0x24>

00012c4a <smpiScActOobCalcCb>:
   12c4a:	b530      	push	{r4, r5, lr}
   12c4c:	7c83      	ldrb	r3, [r0, #18]
   12c4e:	2b01      	cmp	r3, #1
   12c50:	b085      	sub	sp, #20
   12c52:	4604      	mov	r4, r0
   12c54:	460d      	mov	r5, r1
   12c56:	d005      	beq.n	12c64 <smpiScActOobCalcCb+0x1a>
   12c58:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c5a:	4913      	ldr	r1, [pc, #76]	; (12ca8 <smpiScActOobCalcCb+0x5e>)
   12c5c:	68d8      	ldr	r0, [r3, #12]
   12c5e:	3020      	adds	r0, #32
   12c60:	f007 f81b 	bl	19c9a <Calc128Cpy>
   12c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c66:	7e62      	ldrb	r2, [r4, #25]
   12c68:	68d8      	ldr	r0, [r3, #12]
   12c6a:	2a01      	cmp	r2, #1
   12c6c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   12c70:	d10a      	bne.n	12c88 <smpiScActOobCalcCb+0x3e>
   12c72:	689b      	ldr	r3, [r3, #8]
   12c74:	9001      	str	r0, [sp, #4]
   12c76:	2200      	movs	r2, #0
   12c78:	9200      	str	r2, [sp, #0]
   12c7a:	4629      	mov	r1, r5
   12c7c:	461a      	mov	r2, r3
   12c7e:	4620      	mov	r0, r4
   12c80:	f7fe fb8e 	bl	113a0 <SmpScCalcF4>
   12c84:	b005      	add	sp, #20
   12c86:	bd30      	pop	{r4, r5, pc}
   12c88:	4907      	ldr	r1, [pc, #28]	; (12ca8 <smpiScActOobCalcCb+0x5e>)
   12c8a:	f007 f806 	bl	19c9a <Calc128Cpy>
   12c8e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12c92:	f8ad 300c 	strh.w	r3, [sp, #12]
   12c96:	a903      	add	r1, sp, #12
   12c98:	231b      	movs	r3, #27
   12c9a:	4620      	mov	r0, r4
   12c9c:	f88d 300e 	strb.w	r3, [sp, #14]
   12ca0:	f7ff fca1 	bl	125e6 <smpSmExecute>
   12ca4:	e7ee      	b.n	12c84 <smpiScActOobCalcCb+0x3a>
   12ca6:	bf00      	nop
   12ca8:	00026ce0 	.word	0x00026ce0

00012cac <smpiScActOobSendRand>:
   12cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12cae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12cb0:	68de      	ldr	r6, [r3, #12]
   12cb2:	7e43      	ldrb	r3, [r0, #25]
   12cb4:	2b01      	cmp	r3, #1
   12cb6:	4604      	mov	r4, r0
   12cb8:	460d      	mov	r5, r1
   12cba:	d114      	bne.n	12ce6 <smpiScActOobSendRand+0x3a>
   12cbc:	2210      	movs	r2, #16
   12cbe:	6849      	ldr	r1, [r1, #4]
   12cc0:	f106 0040 	add.w	r0, r6, #64	; 0x40
   12cc4:	f7f9 fa1c 	bl	c100 <memcmp>
   12cc8:	b168      	cbz	r0, 12ce6 <smpiScActOobSendRand+0x3a>
   12cca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12cce:	f8ad 3004 	strh.w	r3, [sp, #4]
   12cd2:	a901      	add	r1, sp, #4
   12cd4:	f240 4303 	movw	r3, #1027	; 0x403
   12cd8:	4620      	mov	r0, r4
   12cda:	f8ad 3006 	strh.w	r3, [sp, #6]
   12cde:	f7ff fc82 	bl	125e6 <smpSmExecute>
   12ce2:	b002      	add	sp, #8
   12ce4:	bd70      	pop	{r4, r5, r6, pc}
   12ce6:	2304      	movs	r3, #4
   12ce8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12cec:	4630      	mov	r0, r6
   12cee:	2110      	movs	r1, #16
   12cf0:	f005 fdd0 	bl	18894 <SecRand>
   12cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12cf6:	4629      	mov	r1, r5
   12cf8:	68da      	ldr	r2, [r3, #12]
   12cfa:	4620      	mov	r0, r4
   12cfc:	f7fe fc19 	bl	11532 <smpScSendRand>
   12d00:	e7ef      	b.n	12ce2 <smpiScActOobSendRand+0x36>

00012d02 <smpiScActOobProcRand>:
   12d02:	b538      	push	{r3, r4, r5, lr}
   12d04:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12d06:	4604      	mov	r4, r0
   12d08:	460d      	mov	r5, r1
   12d0a:	68d8      	ldr	r0, [r3, #12]
   12d0c:	6849      	ldr	r1, [r1, #4]
   12d0e:	2210      	movs	r2, #16
   12d10:	3109      	adds	r1, #9
   12d12:	4410      	add	r0, r2
   12d14:	f006 fffc 	bl	19d10 <WStrReverseCpy>
   12d18:	4629      	mov	r1, r5
   12d1a:	4620      	mov	r0, r4
   12d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12d20:	f7fe bf6a 	b.w	11bf8 <smpScActCalcSharedSecret>

00012d24 <smpiScActDHKeyCheckSend>:
   12d24:	b538      	push	{r3, r4, r5, lr}
   12d26:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12d28:	4604      	mov	r4, r0
   12d2a:	68d8      	ldr	r0, [r3, #12]
   12d2c:	2210      	movs	r2, #16
   12d2e:	460d      	mov	r5, r1
   12d30:	4410      	add	r0, r2
   12d32:	6849      	ldr	r1, [r1, #4]
   12d34:	f006 ffec 	bl	19d10 <WStrReverseCpy>
   12d38:	230d      	movs	r3, #13
   12d3a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12d40:	4629      	mov	r1, r5
   12d42:	68da      	ldr	r2, [r3, #12]
   12d44:	4620      	mov	r0, r4
   12d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12d4a:	f7fe bbca 	b.w	114e2 <smpScSendDHKeyCheck>

00012d4e <smpiScActDHKeyCheckVerify>:
   12d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d50:	6b47      	ldr	r7, [r0, #52]	; 0x34
   12d52:	4604      	mov	r4, r0
   12d54:	68fb      	ldr	r3, [r7, #12]
   12d56:	6848      	ldr	r0, [r1, #4]
   12d58:	2210      	movs	r2, #16
   12d5a:	b085      	sub	sp, #20
   12d5c:	1899      	adds	r1, r3, r2
   12d5e:	3009      	adds	r0, #9
   12d60:	f7f9 f9ce 	bl	c100 <memcmp>
   12d64:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   12d68:	4606      	mov	r6, r0
   12d6a:	b9c0      	cbnz	r0, 12d9e <smpiScActDHKeyCheckVerify+0x50>
   12d6c:	7ee3      	ldrb	r3, [r4, #27]
   12d6e:	7d24      	ldrb	r4, [r4, #20]
   12d70:	6939      	ldr	r1, [r7, #16]
   12d72:	429c      	cmp	r4, r3
   12d74:	bf28      	it	cs
   12d76:	461c      	movcs	r4, r3
   12d78:	4622      	mov	r2, r4
   12d7a:	3110      	adds	r1, #16
   12d7c:	4668      	mov	r0, sp
   12d7e:	f7f9 f9ef 	bl	c160 <memcpy>
   12d82:	f1c4 0210 	rsb	r2, r4, #16
   12d86:	4631      	mov	r1, r6
   12d88:	eb0d 0004 	add.w	r0, sp, r4
   12d8c:	f7f9 fae6 	bl	c35c <memset>
   12d90:	466a      	mov	r2, sp
   12d92:	2103      	movs	r1, #3
   12d94:	4628      	mov	r0, r5
   12d96:	f7ff f945 	bl	12024 <DmSmpEncryptReq>
   12d9a:	b005      	add	sp, #20
   12d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d9e:	f640 331c 	movw	r3, #2844	; 0xb1c
   12da2:	4669      	mov	r1, sp
   12da4:	4620      	mov	r0, r4
   12da6:	f8ad 5000 	strh.w	r5, [sp]
   12daa:	f8ad 3002 	strh.w	r3, [sp, #2]
   12dae:	f7ff fc1a 	bl	125e6 <smpSmExecute>
   12db2:	e7f2      	b.n	12d9a <smpiScActDHKeyCheckVerify+0x4c>

00012db4 <smprActSendSecurityReq>:
   12db4:	b538      	push	{r3, r4, r5, lr}
   12db6:	2301      	movs	r3, #1
   12db8:	4604      	mov	r4, r0
   12dba:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12dbe:	200a      	movs	r0, #10
   12dc0:	460d      	mov	r5, r1
   12dc2:	f7fe f9f3 	bl	111ac <smpMsgAlloc>
   12dc6:	b148      	cbz	r0, 12ddc <smprActSendSecurityReq+0x28>
   12dc8:	230b      	movs	r3, #11
   12dca:	7203      	strb	r3, [r0, #8]
   12dcc:	792b      	ldrb	r3, [r5, #4]
   12dce:	7243      	strb	r3, [r0, #9]
   12dd0:	4601      	mov	r1, r0
   12dd2:	4620      	mov	r0, r4
   12dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12dd8:	f7fe b99d 	b.w	11116 <smpSendPkt>
   12ddc:	bd38      	pop	{r3, r4, r5, pc}

00012dde <smprActCheckSecurityReq>:
   12dde:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   12de2:	b10b      	cbz	r3, 12de8 <smprActCheckSecurityReq+0xa>
   12de4:	f7ff ba1f 	b.w	12226 <smpActPairingFailed>
   12de8:	4770      	bx	lr

00012dea <smprActClearSecurityReq>:
   12dea:	2300      	movs	r3, #0
   12dec:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12df0:	4770      	bx	lr

00012df2 <smprActProcPairReq>:
   12df2:	6a03      	ldr	r3, [r0, #32]
   12df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12df6:	4604      	mov	r4, r0
   12df8:	460d      	mov	r5, r1
   12dfa:	b96b      	cbnz	r3, 12e18 <smprActProcPairReq+0x26>
   12dfc:	2040      	movs	r0, #64	; 0x40
   12dfe:	f007 fd07 	bl	1a810 <WsfBufAlloc>
   12e02:	6220      	str	r0, [r4, #32]
   12e04:	b940      	cbnz	r0, 12e18 <smprActProcPairReq+0x26>
   12e06:	f640 0303 	movw	r3, #2051	; 0x803
   12e0a:	806b      	strh	r3, [r5, #2]
   12e0c:	4629      	mov	r1, r5
   12e0e:	4620      	mov	r0, r4
   12e10:	f7ff fbe9 	bl	125e6 <smpSmExecute>
   12e14:	b003      	add	sp, #12
   12e16:	bd30      	pop	{r4, r5, pc}
   12e18:	2201      	movs	r2, #1
   12e1a:	4611      	mov	r1, r2
   12e1c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   12e20:	f7fc fe8a 	bl	fb38 <DmConnSetIdle>
   12e24:	686b      	ldr	r3, [r5, #4]
   12e26:	461a      	mov	r2, r3
   12e28:	f852 0f08 	ldr.w	r0, [r2, #8]!
   12e2c:	6120      	str	r0, [r4, #16]
   12e2e:	8890      	ldrh	r0, [r2, #4]
   12e30:	82a0      	strh	r0, [r4, #20]
   12e32:	7992      	ldrb	r2, [r2, #6]
   12e34:	75a2      	strb	r2, [r4, #22]
   12e36:	7a9a      	ldrb	r2, [r3, #10]
   12e38:	f88d 2005 	strb.w	r2, [sp, #5]
   12e3c:	7ada      	ldrb	r2, [r3, #11]
   12e3e:	f88d 2004 	strb.w	r2, [sp, #4]
   12e42:	7b5a      	ldrb	r2, [r3, #13]
   12e44:	7b9b      	ldrb	r3, [r3, #14]
   12e46:	f88d 3007 	strb.w	r3, [sp, #7]
   12e4a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12e4e:	f8ad 3000 	strh.w	r3, [sp]
   12e52:	4668      	mov	r0, sp
   12e54:	2331      	movs	r3, #49	; 0x31
   12e56:	f88d 2006 	strb.w	r2, [sp, #6]
   12e5a:	f88d 3002 	strb.w	r3, [sp, #2]
   12e5e:	f7fd fbdf 	bl	10620 <DmSmpCbackExec>
   12e62:	e7d7      	b.n	12e14 <smprActProcPairReq+0x22>

00012e64 <smprActSendPairRsp>:
   12e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12e66:	2302      	movs	r3, #2
   12e68:	75c3      	strb	r3, [r0, #23]
   12e6a:	4b20      	ldr	r3, [pc, #128]	; (12eec <smprActSendPairRsp+0x88>)
   12e6c:	4e20      	ldr	r6, [pc, #128]	; (12ef0 <smprActSendPairRsp+0x8c>)
   12e6e:	681b      	ldr	r3, [r3, #0]
   12e70:	789a      	ldrb	r2, [r3, #2]
   12e72:	7602      	strb	r2, [r0, #24]
   12e74:	790a      	ldrb	r2, [r1, #4]
   12e76:	7642      	strb	r2, [r0, #25]
   12e78:	794a      	ldrb	r2, [r1, #5]
   12e7a:	7682      	strb	r2, [r0, #26]
   12e7c:	791b      	ldrb	r3, [r3, #4]
   12e7e:	76c3      	strb	r3, [r0, #27]
   12e80:	798b      	ldrb	r3, [r1, #6]
   12e82:	7703      	strb	r3, [r0, #28]
   12e84:	79cb      	ldrb	r3, [r1, #7]
   12e86:	7743      	strb	r3, [r0, #29]
   12e88:	460d      	mov	r5, r1
   12e8a:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
   12e8e:	f10d 0207 	add.w	r2, sp, #7
   12e92:	f10d 0106 	add.w	r1, sp, #6
   12e96:	4604      	mov	r4, r0
   12e98:	4798      	blx	r3
   12e9a:	b320      	cbz	r0, 12ee6 <smprActSendPairRsp+0x82>
   12e9c:	796b      	ldrb	r3, [r5, #5]
   12e9e:	7ce2      	ldrb	r2, [r4, #19]
   12ea0:	f003 0308 	and.w	r3, r3, #8
   12ea4:	4213      	tst	r3, r2
   12ea6:	bf14      	ite	ne
   12ea8:	230c      	movne	r3, #12
   12eaa:	2303      	moveq	r3, #3
   12eac:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12eb0:	4620      	mov	r0, r4
   12eb2:	f7ff f985 	bl	121c0 <smpStartRspTimer>
   12eb6:	200f      	movs	r0, #15
   12eb8:	f7fe f978 	bl	111ac <smpMsgAlloc>
   12ebc:	4601      	mov	r1, r0
   12ebe:	b150      	cbz	r0, 12ed6 <smprActSendPairRsp+0x72>
   12ec0:	4623      	mov	r3, r4
   12ec2:	f853 0f17 	ldr.w	r0, [r3, #23]!
   12ec6:	6088      	str	r0, [r1, #8]
   12ec8:	8898      	ldrh	r0, [r3, #4]
   12eca:	8188      	strh	r0, [r1, #12]
   12ecc:	799b      	ldrb	r3, [r3, #6]
   12ece:	738b      	strb	r3, [r1, #14]
   12ed0:	4620      	mov	r0, r4
   12ed2:	f7fe f920 	bl	11116 <smpSendPkt>
   12ed6:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
   12eda:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12ede:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12ee2:	4620      	mov	r0, r4
   12ee4:	4798      	blx	r3
   12ee6:	b002      	add	sp, #8
   12ee8:	bd70      	pop	{r4, r5, r6, pc}
   12eea:	bf00      	nop
   12eec:	10002b88 	.word	0x10002b88
   12ef0:	10003f14 	.word	0x10003f14

00012ef4 <smprActProcPairCnf>:
   12ef4:	b510      	push	{r4, lr}
   12ef6:	684b      	ldr	r3, [r1, #4]
   12ef8:	6a02      	ldr	r2, [r0, #32]
   12efa:	f103 0109 	add.w	r1, r3, #9
   12efe:	3220      	adds	r2, #32
   12f00:	3319      	adds	r3, #25
   12f02:	f851 4b04 	ldr.w	r4, [r1], #4
   12f06:	f842 4b04 	str.w	r4, [r2], #4
   12f0a:	4299      	cmp	r1, r3
   12f0c:	d1f9      	bne.n	12f02 <smprActProcPairCnf+0xe>
   12f0e:	2300      	movs	r3, #0
   12f10:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12f14:	bd10      	pop	{r4, pc}

00012f16 <smprActProcPairCnfCalc1>:
   12f16:	b510      	push	{r4, lr}
   12f18:	4604      	mov	r4, r0
   12f1a:	f7ff ffeb 	bl	12ef4 <smprActProcPairCnf>
   12f1e:	6a00      	ldr	r0, [r0, #32]
   12f20:	2110      	movs	r1, #16
   12f22:	3030      	adds	r0, #48	; 0x30
   12f24:	f005 fcb6 	bl	18894 <SecRand>
   12f28:	6a21      	ldr	r1, [r4, #32]
   12f2a:	4620      	mov	r0, r4
   12f2c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f34:	f7fd bf96 	b.w	10e64 <smpCalcC1Part1>

00012f38 <smprActCnfVerify>:
   12f38:	b570      	push	{r4, r5, r6, lr}
   12f3a:	460e      	mov	r6, r1
   12f3c:	6a05      	ldr	r5, [r0, #32]
   12f3e:	4604      	mov	r4, r0
   12f40:	2210      	movs	r2, #16
   12f42:	f105 0120 	add.w	r1, r5, #32
   12f46:	6870      	ldr	r0, [r6, #4]
   12f48:	f7f9 f8da 	bl	c100 <memcmp>
   12f4c:	b1a8      	cbz	r0, 12f7a <smprActCnfVerify+0x42>
   12f4e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   12f52:	4a0f      	ldr	r2, [pc, #60]	; (12f90 <smprActCnfVerify+0x58>)
   12f54:	3301      	adds	r3, #1
   12f56:	b2db      	uxtb	r3, r3
   12f58:	6812      	ldr	r2, [r2, #0]
   12f5a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   12f5e:	7952      	ldrb	r2, [r2, #5]
   12f60:	429a      	cmp	r2, r3
   12f62:	bf0c      	ite	eq
   12f64:	f240 430d 	movweq	r3, #1037	; 0x40d
   12f68:	f240 4303 	movwne	r3, #1027	; 0x403
   12f6c:	8073      	strh	r3, [r6, #2]
   12f6e:	4631      	mov	r1, r6
   12f70:	4620      	mov	r0, r4
   12f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f76:	f7ff bb36 	b.w	125e6 <smpSmExecute>
   12f7a:	f105 0310 	add.w	r3, r5, #16
   12f7e:	f105 0230 	add.w	r2, r5, #48	; 0x30
   12f82:	4629      	mov	r1, r5
   12f84:	4620      	mov	r0, r4
   12f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f8a:	f7fe b86d 	b.w	11068 <smpCalcS1>
   12f8e:	bf00      	nop
   12f90:	10002b88 	.word	0x10002b88

00012f94 <smprActSendPairRandom>:
   12f94:	b538      	push	{r3, r4, r5, lr}
   12f96:	7ec5      	ldrb	r5, [r0, #27]
   12f98:	7d03      	ldrb	r3, [r0, #20]
   12f9a:	6849      	ldr	r1, [r1, #4]
   12f9c:	429d      	cmp	r5, r3
   12f9e:	4604      	mov	r4, r0
   12fa0:	6a00      	ldr	r0, [r0, #32]
   12fa2:	bf28      	it	cs
   12fa4:	461d      	movcs	r5, r3
   12fa6:	462a      	mov	r2, r5
   12fa8:	3020      	adds	r0, #32
   12faa:	f7f9 f8d9 	bl	c160 <memcpy>
   12fae:	6a20      	ldr	r0, [r4, #32]
   12fb0:	3020      	adds	r0, #32
   12fb2:	2100      	movs	r1, #0
   12fb4:	f1c5 0210 	rsb	r2, r5, #16
   12fb8:	4428      	add	r0, r5
   12fba:	f7f9 f9cf 	bl	c35c <memset>
   12fbe:	4620      	mov	r0, r4
   12fc0:	f7ff f8fe 	bl	121c0 <smpStartRspTimer>
   12fc4:	2019      	movs	r0, #25
   12fc6:	f7fe f8f1 	bl	111ac <smpMsgAlloc>
   12fca:	4601      	mov	r1, r0
   12fcc:	b188      	cbz	r0, 12ff2 <smprActSendPairRandom+0x5e>
   12fce:	2304      	movs	r3, #4
   12fd0:	7203      	strb	r3, [r0, #8]
   12fd2:	6a23      	ldr	r3, [r4, #32]
   12fd4:	3009      	adds	r0, #9
   12fd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12fda:	3340      	adds	r3, #64	; 0x40
   12fdc:	f852 5b04 	ldr.w	r5, [r2], #4
   12fe0:	f840 5b04 	str.w	r5, [r0], #4
   12fe4:	429a      	cmp	r2, r3
   12fe6:	d1f9      	bne.n	12fdc <smprActSendPairRandom+0x48>
   12fe8:	4620      	mov	r0, r4
   12fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12fee:	f7fe b892 	b.w	11116 <smpSendPkt>
   12ff2:	bd38      	pop	{r3, r4, r5, pc}

00012ff4 <smprActSendKey>:
   12ff4:	b538      	push	{r3, r4, r5, lr}
   12ff6:	460d      	mov	r5, r1
   12ff8:	7f43      	ldrb	r3, [r0, #29]
   12ffa:	7d81      	ldrb	r1, [r0, #22]
   12ffc:	4019      	ands	r1, r3
   12ffe:	4604      	mov	r4, r0
   13000:	f7ff f993 	bl	1232a <smpSendKey>
   13004:	b330      	cbz	r0, 13054 <smprActSendKey+0x60>
   13006:	2300      	movs	r3, #0
   13008:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1300c:	7f22      	ldrb	r2, [r4, #28]
   1300e:	7d63      	ldrb	r3, [r4, #21]
   13010:	4013      	ands	r3, r2
   13012:	07d8      	lsls	r0, r3, #31
   13014:	d518      	bpl.n	13048 <smprActSendKey+0x54>
   13016:	4a10      	ldr	r2, [pc, #64]	; (13058 <smprActSendKey+0x64>)
   13018:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   1301c:	b192      	cbz	r2, 13044 <smprActSendKey+0x50>
   1301e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   13020:	7812      	ldrb	r2, [r2, #0]
   13022:	b17a      	cbz	r2, 13044 <smprActSendKey+0x50>
   13024:	0799      	lsls	r1, r3, #30
   13026:	d502      	bpl.n	1302e <smprActSendKey+0x3a>
   13028:	2308      	movs	r3, #8
   1302a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1302e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   13032:	b97b      	cbnz	r3, 13054 <smprActSendKey+0x60>
   13034:	230e      	movs	r3, #14
   13036:	70ab      	strb	r3, [r5, #2]
   13038:	4629      	mov	r1, r5
   1303a:	4620      	mov	r0, r4
   1303c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13040:	f7ff bad1 	b.w	125e6 <smpSmExecute>
   13044:	2306      	movs	r3, #6
   13046:	e7f0      	b.n	1302a <smprActSendKey+0x36>
   13048:	079a      	lsls	r2, r3, #30
   1304a:	d4ed      	bmi.n	13028 <smprActSendKey+0x34>
   1304c:	075b      	lsls	r3, r3, #29
   1304e:	d5ee      	bpl.n	1302e <smprActSendKey+0x3a>
   13050:	230a      	movs	r3, #10
   13052:	e7ea      	b.n	1302a <smprActSendKey+0x36>
   13054:	bd38      	pop	{r3, r4, r5, pc}
   13056:	bf00      	nop
   13058:	10003f14 	.word	0x10003f14

0001305c <smprActSetupKeyDist>:
   1305c:	b538      	push	{r3, r4, r5, lr}
   1305e:	4604      	mov	r4, r0
   13060:	2300      	movs	r3, #0
   13062:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   13066:	460d      	mov	r5, r1
   13068:	f7ff f8aa 	bl	121c0 <smpStartRspTimer>
   1306c:	6a23      	ldr	r3, [r4, #32]
   1306e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   13072:	801a      	strh	r2, [r3, #0]
   13074:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   13078:	f012 0f04 	tst.w	r2, #4
   1307c:	bf14      	ite	ne
   1307e:	2202      	movne	r2, #2
   13080:	2201      	moveq	r2, #1
   13082:	77da      	strb	r2, [r3, #31]
   13084:	7d21      	ldrb	r1, [r4, #20]
   13086:	7ee2      	ldrb	r2, [r4, #27]
   13088:	428a      	cmp	r2, r1
   1308a:	bf28      	it	cs
   1308c:	460a      	movcs	r2, r1
   1308e:	f883 2020 	strb.w	r2, [r3, #32]
   13092:	4629      	mov	r1, r5
   13094:	4620      	mov	r0, r4
   13096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1309a:	f7ff bfab 	b.w	12ff4 <smprActSendKey>

0001309e <smprActRcvKey>:
   1309e:	b538      	push	{r3, r4, r5, lr}
   130a0:	7d42      	ldrb	r2, [r0, #21]
   130a2:	7f03      	ldrb	r3, [r0, #28]
   130a4:	460d      	mov	r5, r1
   130a6:	4013      	ands	r3, r2
   130a8:	684a      	ldr	r2, [r1, #4]
   130aa:	6a01      	ldr	r1, [r0, #32]
   130ac:	4604      	mov	r4, r0
   130ae:	f7ff f9fb 	bl	124a8 <smpProcRcvKey>
   130b2:	b138      	cbz	r0, 130c4 <smprActRcvKey+0x26>
   130b4:	230e      	movs	r3, #14
   130b6:	70ab      	strb	r3, [r5, #2]
   130b8:	4629      	mov	r1, r5
   130ba:	4620      	mov	r0, r4
   130bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   130c0:	f7ff ba91 	b.w	125e6 <smpSmExecute>
   130c4:	bd38      	pop	{r3, r4, r5, pc}
   130c6:	bf00      	nop

000130c8 <smprScActStoreLescPin>:
   130c8:	b570      	push	{r4, r5, r6, lr}
   130ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
   130cc:	785a      	ldrb	r2, [r3, #1]
   130ce:	2a03      	cmp	r2, #3
   130d0:	4604      	mov	r4, r0
   130d2:	460d      	mov	r5, r1
   130d4:	d11d      	bne.n	13112 <smprScActStoreLescPin+0x4a>
   130d6:	68d8      	ldr	r0, [r3, #12]
   130d8:	490e      	ldr	r1, [pc, #56]	; (13114 <smprScActStoreLescPin+0x4c>)
   130da:	3020      	adds	r0, #32
   130dc:	f006 fddd 	bl	19c9a <Calc128Cpy>
   130e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   130e2:	490c      	ldr	r1, [pc, #48]	; (13114 <smprScActStoreLescPin+0x4c>)
   130e4:	68d8      	ldr	r0, [r3, #12]
   130e6:	3030      	adds	r0, #48	; 0x30
   130e8:	f006 fdd7 	bl	19c9a <Calc128Cpy>
   130ec:	7d2a      	ldrb	r2, [r5, #20]
   130ee:	2a03      	cmp	r2, #3
   130f0:	d80f      	bhi.n	13112 <smprScActStoreLescPin+0x4a>
   130f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   130f4:	68d8      	ldr	r0, [r3, #12]
   130f6:	1d2e      	adds	r6, r5, #4
   130f8:	4631      	mov	r1, r6
   130fa:	302d      	adds	r0, #45	; 0x2d
   130fc:	f006 fe08 	bl	19d10 <WStrReverseCpy>
   13100:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13102:	7d2a      	ldrb	r2, [r5, #20]
   13104:	68d8      	ldr	r0, [r3, #12]
   13106:	4631      	mov	r1, r6
   13108:	303d      	adds	r0, #61	; 0x3d
   1310a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1310e:	f006 bdff 	b.w	19d10 <WStrReverseCpy>
   13112:	bd70      	pop	{r4, r5, r6, pc}
   13114:	00026ce0 	.word	0x00026ce0

00013118 <smprScActSendPubKey>:
   13118:	b538      	push	{r3, r4, r5, lr}
   1311a:	4604      	mov	r4, r0
   1311c:	460d      	mov	r5, r1
   1311e:	f7fe fc6e 	bl	119fe <smpScActAuthSelect>
   13122:	4629      	mov	r1, r5
   13124:	4620      	mov	r0, r4
   13126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1312a:	f7fe b9a8 	b.w	1147e <smpScSendPubKey>

0001312e <smprScActJwncSetup>:
   1312e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13130:	b570      	push	{r4, r5, r6, lr}
   13132:	4604      	mov	r4, r0
   13134:	68d8      	ldr	r0, [r3, #12]
   13136:	4d0d      	ldr	r5, [pc, #52]	; (1316c <smprScActJwncSetup+0x3e>)
   13138:	460e      	mov	r6, r1
   1313a:	2110      	movs	r1, #16
   1313c:	4408      	add	r0, r1
   1313e:	f005 fba9 	bl	18894 <SecRand>
   13142:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13144:	68d8      	ldr	r0, [r3, #12]
   13146:	4629      	mov	r1, r5
   13148:	3020      	adds	r0, #32
   1314a:	f006 fda6 	bl	19c9a <Calc128Cpy>
   1314e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13150:	68d8      	ldr	r0, [r3, #12]
   13152:	4629      	mov	r1, r5
   13154:	3030      	adds	r0, #48	; 0x30
   13156:	f006 fda0 	bl	19c9a <Calc128Cpy>
   1315a:	2304      	movs	r3, #4
   1315c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   13160:	4631      	mov	r1, r6
   13162:	4620      	mov	r0, r4
   13164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13168:	f7fe bc93 	b.w	11a92 <smpScActJwncCalcF4>
   1316c:	00026ce0 	.word	0x00026ce0

00013170 <smprScActJwncSendCnf>:
   13170:	684a      	ldr	r2, [r1, #4]
   13172:	f7fe ba06 	b.w	11582 <smpScSendPairCnf>

00013176 <smprScActJwncCalcG2>:
   13176:	b538      	push	{r3, r4, r5, lr}
   13178:	460d      	mov	r5, r1
   1317a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1317c:	6849      	ldr	r1, [r1, #4]
   1317e:	4604      	mov	r4, r0
   13180:	3109      	adds	r1, #9
   13182:	68d8      	ldr	r0, [r3, #12]
   13184:	2210      	movs	r2, #16
   13186:	f006 fdc3 	bl	19d10 <WStrReverseCpy>
   1318a:	4629      	mov	r1, r5
   1318c:	4620      	mov	r0, r4
   1318e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13192:	f7fe bca0 	b.w	11ad6 <smpScActJwncCalcG2>

00013196 <smprScActPkStoreCnf>:
   13196:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13198:	6849      	ldr	r1, [r1, #4]
   1319a:	68d8      	ldr	r0, [r3, #12]
   1319c:	2210      	movs	r2, #16
   1319e:	3109      	adds	r1, #9
   131a0:	3050      	adds	r0, #80	; 0x50
   131a2:	f006 bdb5 	b.w	19d10 <WStrReverseCpy>

000131a6 <smprScActPkCalcCb>:
   131a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   131a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   131aa:	4604      	mov	r4, r0
   131ac:	68d8      	ldr	r0, [r3, #12]
   131ae:	460d      	mov	r5, r1
   131b0:	2110      	movs	r1, #16
   131b2:	4408      	add	r0, r1
   131b4:	f005 fb6e 	bl	18894 <SecRand>
   131b8:	2304      	movs	r3, #4
   131ba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   131be:	f7fd fbe3 	bl	10988 <DmSecGetEccKey>
   131c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   131c4:	4606      	mov	r6, r0
   131c6:	4620      	mov	r0, r4
   131c8:	689f      	ldr	r7, [r3, #8]
   131ca:	f7fe fa02 	bl	115d2 <smpGetPkBit>
   131ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   131d0:	68d9      	ldr	r1, [r3, #12]
   131d2:	3110      	adds	r1, #16
   131d4:	e9cd 0100 	strd	r0, r1, [sp]
   131d8:	463b      	mov	r3, r7
   131da:	4632      	mov	r2, r6
   131dc:	4629      	mov	r1, r5
   131de:	4620      	mov	r0, r4
   131e0:	f7fe f8de 	bl	113a0 <SmpScCalcF4>
   131e4:	b003      	add	sp, #12
   131e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000131e8 <smprScActPkStoreCnfAndCalcCb>:
   131e8:	b538      	push	{r3, r4, r5, lr}
   131ea:	4604      	mov	r4, r0
   131ec:	460d      	mov	r5, r1
   131ee:	f7ff ffd2 	bl	13196 <smprScActPkStoreCnf>
   131f2:	4629      	mov	r1, r5
   131f4:	4620      	mov	r0, r4
   131f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   131fa:	f7ff bfd4 	b.w	131a6 <smprScActPkCalcCb>

000131fe <smprScActPkStorePinAndCalcCb>:
   131fe:	b538      	push	{r3, r4, r5, lr}
   13200:	4604      	mov	r4, r0
   13202:	460d      	mov	r5, r1
   13204:	f7ff ff60 	bl	130c8 <smprScActStoreLescPin>
   13208:	4629      	mov	r1, r5
   1320a:	4620      	mov	r0, r4
   1320c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13210:	f7ff bfc9 	b.w	131a6 <smprScActPkCalcCb>

00013214 <smprScActPkSendCnf>:
   13214:	f7ff bfac 	b.w	13170 <smprScActJwncSendCnf>

00013218 <smprScActPkCalcCa>:
   13218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1321a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1321c:	460d      	mov	r5, r1
   1321e:	6849      	ldr	r1, [r1, #4]
   13220:	4604      	mov	r4, r0
   13222:	2210      	movs	r2, #16
   13224:	3109      	adds	r1, #9
   13226:	68d8      	ldr	r0, [r3, #12]
   13228:	f006 fd72 	bl	19d10 <WStrReverseCpy>
   1322c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1322e:	689e      	ldr	r6, [r3, #8]
   13230:	f7fd fbaa 	bl	10988 <DmSecGetEccKey>
   13234:	4607      	mov	r7, r0
   13236:	4620      	mov	r0, r4
   13238:	f7fe f9cb 	bl	115d2 <smpGetPkBit>
   1323c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1323e:	68db      	ldr	r3, [r3, #12]
   13240:	4632      	mov	r2, r6
   13242:	e9cd 0300 	strd	r0, r3, [sp]
   13246:	4629      	mov	r1, r5
   13248:	463b      	mov	r3, r7
   1324a:	4620      	mov	r0, r4
   1324c:	f7fe f8a8 	bl	113a0 <SmpScCalcF4>
   13250:	b003      	add	sp, #12
   13252:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013254 <smprScActPkSendRand>:
   13254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13256:	6b45      	ldr	r5, [r0, #52]	; 0x34
   13258:	68ef      	ldr	r7, [r5, #12]
   1325a:	4604      	mov	r4, r0
   1325c:	460e      	mov	r6, r1
   1325e:	2210      	movs	r2, #16
   13260:	6849      	ldr	r1, [r1, #4]
   13262:	f107 0050 	add.w	r0, r7, #80	; 0x50
   13266:	f7f8 ff4b 	bl	c100 <memcmp>
   1326a:	b168      	cbz	r0, 13288 <smprScActPkSendRand+0x34>
   1326c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13270:	f8ad 3004 	strh.w	r3, [sp, #4]
   13274:	f240 4303 	movw	r3, #1027	; 0x403
   13278:	f8ad 3006 	strh.w	r3, [sp, #6]
   1327c:	a901      	add	r1, sp, #4
   1327e:	4620      	mov	r0, r4
   13280:	f7ff f9b1 	bl	125e6 <smpSmExecute>
   13284:	b003      	add	sp, #12
   13286:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13288:	78eb      	ldrb	r3, [r5, #3]
   1328a:	3301      	adds	r3, #1
   1328c:	b2db      	uxtb	r3, r3
   1328e:	2b13      	cmp	r3, #19
   13290:	70eb      	strb	r3, [r5, #3]
   13292:	d907      	bls.n	132a4 <smprScActPkSendRand+0x50>
   13294:	231a      	movs	r3, #26
   13296:	f88d 3006 	strb.w	r3, [sp, #6]
   1329a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1329e:	f8ad 3004 	strh.w	r3, [sp, #4]
   132a2:	e7eb      	b.n	1327c <smprScActPkSendRand+0x28>
   132a4:	2303      	movs	r3, #3
   132a6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   132aa:	f107 0210 	add.w	r2, r7, #16
   132ae:	2319      	movs	r3, #25
   132b0:	4631      	mov	r1, r6
   132b2:	4620      	mov	r0, r4
   132b4:	f88d 3006 	strb.w	r3, [sp, #6]
   132b8:	f7fe f93b 	bl	11532 <smpScSendRand>
   132bc:	e7ed      	b.n	1329a <smprScActPkSendRand+0x46>

000132be <smprScActOobSetup>:
   132be:	2304      	movs	r3, #4
   132c0:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   132c4:	4770      	bx	lr

000132c6 <smprScActOobCalcCa>:
   132c6:	b530      	push	{r4, r5, lr}
   132c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   132ca:	460d      	mov	r5, r1
   132cc:	6849      	ldr	r1, [r1, #4]
   132ce:	4604      	mov	r4, r0
   132d0:	b085      	sub	sp, #20
   132d2:	68d8      	ldr	r0, [r3, #12]
   132d4:	2210      	movs	r2, #16
   132d6:	3109      	adds	r1, #9
   132d8:	f006 fd1a 	bl	19d10 <WStrReverseCpy>
   132dc:	7e63      	ldrb	r3, [r4, #25]
   132de:	2b01      	cmp	r3, #1
   132e0:	d005      	beq.n	132ee <smprScActOobCalcCa+0x28>
   132e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132e4:	4912      	ldr	r1, [pc, #72]	; (13330 <smprScActOobCalcCa+0x6a>)
   132e6:	68d8      	ldr	r0, [r3, #12]
   132e8:	3030      	adds	r0, #48	; 0x30
   132ea:	f006 fcd6 	bl	19c9a <Calc128Cpy>
   132ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132f0:	7ca2      	ldrb	r2, [r4, #18]
   132f2:	68d8      	ldr	r0, [r3, #12]
   132f4:	2a01      	cmp	r2, #1
   132f6:	f100 0020 	add.w	r0, r0, #32
   132fa:	d10a      	bne.n	13312 <smprScActOobCalcCa+0x4c>
   132fc:	689b      	ldr	r3, [r3, #8]
   132fe:	9001      	str	r0, [sp, #4]
   13300:	2200      	movs	r2, #0
   13302:	9200      	str	r2, [sp, #0]
   13304:	4629      	mov	r1, r5
   13306:	461a      	mov	r2, r3
   13308:	4620      	mov	r0, r4
   1330a:	f7fe f849 	bl	113a0 <SmpScCalcF4>
   1330e:	b005      	add	sp, #20
   13310:	bd30      	pop	{r4, r5, pc}
   13312:	4907      	ldr	r1, [pc, #28]	; (13330 <smprScActOobCalcCa+0x6a>)
   13314:	f006 fcc1 	bl	19c9a <Calc128Cpy>
   13318:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1331c:	f8ad 300c 	strh.w	r3, [sp, #12]
   13320:	a903      	add	r1, sp, #12
   13322:	231b      	movs	r3, #27
   13324:	4620      	mov	r0, r4
   13326:	f88d 300e 	strb.w	r3, [sp, #14]
   1332a:	f7ff f95c 	bl	125e6 <smpSmExecute>
   1332e:	e7ee      	b.n	1330e <smprScActOobCalcCa+0x48>
   13330:	00026ce0 	.word	0x00026ce0

00013334 <smprScActOobSendRand>:
   13334:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13336:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13338:	68de      	ldr	r6, [r3, #12]
   1333a:	7c83      	ldrb	r3, [r0, #18]
   1333c:	2b01      	cmp	r3, #1
   1333e:	4604      	mov	r4, r0
   13340:	460d      	mov	r5, r1
   13342:	d114      	bne.n	1336e <smprScActOobSendRand+0x3a>
   13344:	2210      	movs	r2, #16
   13346:	6849      	ldr	r1, [r1, #4]
   13348:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1334c:	f7f8 fed8 	bl	c100 <memcmp>
   13350:	b168      	cbz	r0, 1336e <smprScActOobSendRand+0x3a>
   13352:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13356:	f8ad 3004 	strh.w	r3, [sp, #4]
   1335a:	a901      	add	r1, sp, #4
   1335c:	f240 4303 	movw	r3, #1027	; 0x403
   13360:	4620      	mov	r0, r4
   13362:	f8ad 3006 	strh.w	r3, [sp, #6]
   13366:	f7ff f93e 	bl	125e6 <smpSmExecute>
   1336a:	b002      	add	sp, #8
   1336c:	bd70      	pop	{r4, r5, r6, pc}
   1336e:	230d      	movs	r3, #13
   13370:	2110      	movs	r1, #16
   13372:	1870      	adds	r0, r6, r1
   13374:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   13378:	f005 fa8c 	bl	18894 <SecRand>
   1337c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1337e:	68da      	ldr	r2, [r3, #12]
   13380:	4629      	mov	r1, r5
   13382:	3210      	adds	r2, #16
   13384:	4620      	mov	r0, r4
   13386:	f7fe f8d4 	bl	11532 <smpScSendRand>
   1338a:	e7ee      	b.n	1336a <smprScActOobSendRand+0x36>

0001338c <smprScActWaitDhCheck>:
   1338c:	220d      	movs	r2, #13
   1338e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13390:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
   13394:	785a      	ldrb	r2, [r3, #1]
   13396:	2a02      	cmp	r2, #2
   13398:	d003      	beq.n	133a2 <smprScActWaitDhCheck+0x16>
   1339a:	68da      	ldr	r2, [r3, #12]
   1339c:	3210      	adds	r2, #16
   1339e:	f7fe b8c8 	b.w	11532 <smpScSendRand>
   133a2:	4770      	bx	lr

000133a4 <smprScActCalcDHKey>:
   133a4:	b538      	push	{r3, r4, r5, lr}
   133a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   133a8:	4604      	mov	r4, r0
   133aa:	460d      	mov	r5, r1
   133ac:	68d8      	ldr	r0, [r3, #12]
   133ae:	6849      	ldr	r1, [r1, #4]
   133b0:	3050      	adds	r0, #80	; 0x50
   133b2:	3109      	adds	r1, #9
   133b4:	2210      	movs	r2, #16
   133b6:	f006 fcab 	bl	19d10 <WStrReverseCpy>
   133ba:	4629      	mov	r1, r5
   133bc:	4620      	mov	r0, r4
   133be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   133c2:	f7fe bc19 	b.w	11bf8 <smpScActCalcSharedSecret>

000133c6 <smprScActDHKeyCheckSend>:
   133c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   133c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   133ca:	4604      	mov	r4, r0
   133cc:	68d8      	ldr	r0, [r3, #12]
   133ce:	460e      	mov	r6, r1
   133d0:	3010      	adds	r0, #16
   133d2:	6849      	ldr	r1, [r1, #4]
   133d4:	f006 fc61 	bl	19c9a <Calc128Cpy>
   133d8:	6b65      	ldr	r5, [r4, #52]	; 0x34
   133da:	68e9      	ldr	r1, [r5, #12]
   133dc:	2210      	movs	r2, #16
   133de:	f101 0050 	add.w	r0, r1, #80	; 0x50
   133e2:	f7f8 fe8d 	bl	c100 <memcmp>
   133e6:	4601      	mov	r1, r0
   133e8:	b9a0      	cbnz	r0, 13414 <smprScActDHKeyCheckSend+0x4e>
   133ea:	7d20      	ldrb	r0, [r4, #20]
   133ec:	7ee3      	ldrb	r3, [r4, #27]
   133ee:	692d      	ldr	r5, [r5, #16]
   133f0:	4298      	cmp	r0, r3
   133f2:	bf28      	it	cs
   133f4:	4618      	movcs	r0, r3
   133f6:	3510      	adds	r5, #16
   133f8:	f1c0 0210 	rsb	r2, r0, #16
   133fc:	4428      	add	r0, r5
   133fe:	f7f8 ffad 	bl	c35c <memset>
   13402:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13404:	68da      	ldr	r2, [r3, #12]
   13406:	4631      	mov	r1, r6
   13408:	3210      	adds	r2, #16
   1340a:	4620      	mov	r0, r4
   1340c:	f7fe f869 	bl	114e2 <smpScSendDHKeyCheck>
   13410:	b002      	add	sp, #8
   13412:	bd70      	pop	{r4, r5, r6, pc}
   13414:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13418:	f8ad 3004 	strh.w	r3, [sp, #4]
   1341c:	a901      	add	r1, sp, #4
   1341e:	f640 331c 	movw	r3, #2844	; 0xb1c
   13422:	4620      	mov	r0, r4
   13424:	f8ad 3006 	strh.w	r3, [sp, #6]
   13428:	f7ff f8dd 	bl	125e6 <smpSmExecute>
   1342c:	e7f0      	b.n	13410 <smprScActDHKeyCheckSend+0x4a>
   1342e:	bf00      	nop

00013430 <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   13430:	b580      	push	{r7, lr}
   13432:	b084      	sub	sp, #16
   13434:	af02      	add	r7, sp, #8
   13436:	4603      	mov	r3, r0
   13438:	6039      	str	r1, [r7, #0]
   1343a:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   1343c:	79f8      	ldrb	r0, [r7, #7]
   1343e:	683b      	ldr	r3, [r7, #0]
   13440:	9301      	str	r3, [sp, #4]
   13442:	4b05      	ldr	r3, [pc, #20]	; (13458 <GattDiscover+0x28>)
   13444:	9300      	str	r3, [sp, #0]
   13446:	2302      	movs	r3, #2
   13448:	4a04      	ldr	r2, [pc, #16]	; (1345c <GattDiscover+0x2c>)
   1344a:	2102      	movs	r1, #2
   1344c:	f00a fd80 	bl	1df50 <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   13450:	bf00      	nop
   13452:	3708      	adds	r7, #8
   13454:	46bd      	mov	sp, r7
   13456:	bd80      	pop	{r7, pc}
   13458:	10002b8c 	.word	0x10002b8c
   1345c:	00025ca4 	.word	0x00025ca4

00013460 <GattValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GattValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   13460:	b580      	push	{r7, lr}
   13462:	b084      	sub	sp, #16
   13464:	af00      	add	r7, sp, #0
   13466:	6078      	str	r0, [r7, #4]
   13468:	6039      	str	r1, [r7, #0]
  uint8_t status = ATT_SUCCESS;
   1346a:	2300      	movs	r3, #0
   1346c:	73fb      	strb	r3, [r7, #15]
  
  /* service changed */
  if (pMsg->handle == pHdlList[GATT_SC_HDL_IDX])
   1346e:	683b      	ldr	r3, [r7, #0]
   13470:	895a      	ldrh	r2, [r3, #10]
   13472:	687b      	ldr	r3, [r7, #4]
   13474:	881b      	ldrh	r3, [r3, #0]
   13476:	429a      	cmp	r2, r3
   13478:	d103      	bne.n	13482 <GattValueUpdate+0x22>
  {
    /* perform service changed */
    AppDiscServiceChanged(pMsg);
   1347a:	6838      	ldr	r0, [r7, #0]
   1347c:	f00a fe02 	bl	1e084 <AppDiscServiceChanged>
   13480:	e001      	b.n	13486 <GattValueUpdate+0x26>
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   13482:	230a      	movs	r3, #10
   13484:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
   13486:	7bfb      	ldrb	r3, [r7, #15]
}
   13488:	4618      	mov	r0, r3
   1348a:	3710      	adds	r7, #16
   1348c:	46bd      	mov	sp, r7
   1348e:	bd80      	pop	{r7, pc}

00013490 <watchDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchDmCback(dmEvt_t *pDmEvt)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
  dmEvt_t *pMsg;
  uint16_t  len;
  uint16_t  reportLen;

  len = DmSizeOfEvt(pDmEvt);
   13498:	6878      	ldr	r0, [r7, #4]
   1349a:	f7fc fd51 	bl	ff40 <DmSizeOfEvt>
   1349e:	4603      	mov	r3, r0
   134a0:	81bb      	strh	r3, [r7, #12]
  
   if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
   134a2:	687b      	ldr	r3, [r7, #4]
   134a4:	789b      	ldrb	r3, [r3, #2]
   134a6:	2b34      	cmp	r3, #52	; 0x34
   134a8:	d108      	bne.n	134bc <watchDmCback+0x2c>
  {
    DmSecSetEccKey(&pDmEvt->eccMsg.data.key);
   134aa:	687b      	ldr	r3, [r7, #4]
   134ac:	3304      	adds	r3, #4
   134ae:	4618      	mov	r0, r3
   134b0:	f7fd fa60 	bl	10974 <DmSecSetEccKey>
    watchSetup(NULL);
   134b4:	2000      	movs	r0, #0
   134b6:	f000 fa23 	bl	13900 <watchSetup>
	  return;
   134ba:	e032      	b.n	13522 <watchDmCback+0x92>
  }

  if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
   134bc:	687b      	ldr	r3, [r7, #4]
   134be:	789b      	ldrb	r3, [r3, #2]
   134c0:	2b26      	cmp	r3, #38	; 0x26
   134c2:	d103      	bne.n	134cc <watchDmCback+0x3c>
  {
    reportLen = pDmEvt->scanReport.len;
   134c4:	687b      	ldr	r3, [r7, #4]
   134c6:	7a1b      	ldrb	r3, [r3, #8]
   134c8:	81fb      	strh	r3, [r7, #14]
   134ca:	e001      	b.n	134d0 <watchDmCback+0x40>
  }
  else
  {
    reportLen = 0;
   134cc:	2300      	movs	r3, #0
   134ce:	81fb      	strh	r3, [r7, #14]
  }

  if ((pMsg = WsfMsgAlloc(len + reportLen)) != NULL)
   134d0:	89ba      	ldrh	r2, [r7, #12]
   134d2:	89fb      	ldrh	r3, [r7, #14]
   134d4:	4413      	add	r3, r2
   134d6:	b29b      	uxth	r3, r3
   134d8:	4618      	mov	r0, r3
   134da:	f007 fa28 	bl	1a92e <WsfMsgAlloc>
   134de:	60b8      	str	r0, [r7, #8]
   134e0:	68bb      	ldr	r3, [r7, #8]
   134e2:	2b00      	cmp	r3, #0
   134e4:	d01d      	beq.n	13522 <watchDmCback+0x92>
  {
    memcpy(pMsg, pDmEvt, len);
   134e6:	89bb      	ldrh	r3, [r7, #12]
   134e8:	461a      	mov	r2, r3
   134ea:	6879      	ldr	r1, [r7, #4]
   134ec:	68b8      	ldr	r0, [r7, #8]
   134ee:	f7f8 fe37 	bl	c160 <memcpy>

    if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
   134f2:	687b      	ldr	r3, [r7, #4]
   134f4:	789b      	ldrb	r3, [r3, #2]
   134f6:	2b26      	cmp	r3, #38	; 0x26
   134f8:	d10c      	bne.n	13514 <watchDmCback+0x84>
    {
      pMsg->scanReport.pData = (uint8_t *) ((uint8_t *) pMsg + len);
   134fa:	89bb      	ldrh	r3, [r7, #12]
   134fc:	68ba      	ldr	r2, [r7, #8]
   134fe:	441a      	add	r2, r3
   13500:	68bb      	ldr	r3, [r7, #8]
   13502:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->scanReport.pData, pDmEvt->scanReport.pData, reportLen);
   13504:	68bb      	ldr	r3, [r7, #8]
   13506:	6858      	ldr	r0, [r3, #4]
   13508:	687b      	ldr	r3, [r7, #4]
   1350a:	685b      	ldr	r3, [r3, #4]
   1350c:	89fa      	ldrh	r2, [r7, #14]
   1350e:	4619      	mov	r1, r3
   13510:	f7f8 fe26 	bl	c160 <memcpy>
    }

    WsfMsgSend(watchCb.handlerId, pMsg);
   13514:	4b04      	ldr	r3, [pc, #16]	; (13528 <watchDmCback+0x98>)
   13516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   1351a:	68b9      	ldr	r1, [r7, #8]
   1351c:	4618      	mov	r0, r3
   1351e:	f007 fa2a 	bl	1a976 <WsfMsgSend>
  }
}
   13522:	3710      	adds	r7, #16
   13524:	46bd      	mov	sp, r7
   13526:	bd80      	pop	{r7, pc}
   13528:	1000418c 	.word	0x1000418c

0001352c <watchAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchAttCback(attEvt_t *pEvt)
{
   1352c:	b580      	push	{r7, lr}
   1352e:	b084      	sub	sp, #16
   13530:	af00      	add	r7, sp, #0
   13532:	6078      	str	r0, [r7, #4]
  attEvt_t *pMsg;
  
  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   13534:	687b      	ldr	r3, [r7, #4]
   13536:	891b      	ldrh	r3, [r3, #8]
   13538:	3310      	adds	r3, #16
   1353a:	b29b      	uxth	r3, r3
   1353c:	4618      	mov	r0, r3
   1353e:	f007 f9f6 	bl	1a92e <WsfMsgAlloc>
   13542:	60f8      	str	r0, [r7, #12]
   13544:	68fb      	ldr	r3, [r7, #12]
   13546:	2b00      	cmp	r3, #0
   13548:	d019      	beq.n	1357e <watchAttCback+0x52>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   1354a:	2210      	movs	r2, #16
   1354c:	6879      	ldr	r1, [r7, #4]
   1354e:	68f8      	ldr	r0, [r7, #12]
   13550:	f7f8 fe06 	bl	c160 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   13554:	68fb      	ldr	r3, [r7, #12]
   13556:	f103 0210 	add.w	r2, r3, #16
   1355a:	68fb      	ldr	r3, [r7, #12]
   1355c:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   1355e:	68fb      	ldr	r3, [r7, #12]
   13560:	6858      	ldr	r0, [r3, #4]
   13562:	687b      	ldr	r3, [r7, #4]
   13564:	6859      	ldr	r1, [r3, #4]
   13566:	687b      	ldr	r3, [r7, #4]
   13568:	891b      	ldrh	r3, [r3, #8]
   1356a:	461a      	mov	r2, r3
   1356c:	f7f8 fdf8 	bl	c160 <memcpy>
    WsfMsgSend(watchCb.handlerId, pMsg);
   13570:	4b05      	ldr	r3, [pc, #20]	; (13588 <watchAttCback+0x5c>)
   13572:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   13576:	68f9      	ldr	r1, [r7, #12]
   13578:	4618      	mov	r0, r3
   1357a:	f007 f9fc 	bl	1a976 <WsfMsgSend>
  }
}
   1357e:	bf00      	nop
   13580:	3710      	adds	r7, #16
   13582:	46bd      	mov	sp, r7
   13584:	bd80      	pop	{r7, pc}
   13586:	bf00      	nop
   13588:	1000418c 	.word	0x1000418c

0001358c <watchScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchScanStart(dmEvt_t *pMsg)
{
   1358c:	b480      	push	{r7}
   1358e:	b083      	sub	sp, #12
   13590:	af00      	add	r7, sp, #0
   13592:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   13594:	687b      	ldr	r3, [r7, #4]
   13596:	78db      	ldrb	r3, [r3, #3]
   13598:	2b00      	cmp	r3, #0
   1359a:	d106      	bne.n	135aa <watchScanStart+0x1e>
  {
    watchCb.scan_state = WATCH_SCANNING;
   1359c:	4b06      	ldr	r3, [pc, #24]	; (135b8 <watchScanStart+0x2c>)
   1359e:	2202      	movs	r2, #2
   135a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    // set it to lowest possible value of RSSI
    watchConnInfo.rssi = -128;
   135a4:	4b05      	ldr	r3, [pc, #20]	; (135bc <watchScanStart+0x30>)
   135a6:	2280      	movs	r2, #128	; 0x80
   135a8:	731a      	strb	r2, [r3, #12]
  }
}
   135aa:	bf00      	nop
   135ac:	370c      	adds	r7, #12
   135ae:	46bd      	mov	sp, r7
   135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   135b4:	4770      	bx	lr
   135b6:	bf00      	nop
   135b8:	1000418c 	.word	0x1000418c
   135bc:	10009358 	.word	0x10009358

000135c0 <watchScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchScanStop(dmEvt_t *pMsg)
{
   135c0:	b580      	push	{r7, lr}
   135c2:	b082      	sub	sp, #8
   135c4:	af00      	add	r7, sp, #0
   135c6:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	78db      	ldrb	r3, [r3, #3]
   135cc:	2b00      	cmp	r3, #0
   135ce:	d11a      	bne.n	13606 <watchScanStop+0x46>
  {
    watchCb.scan_state = WATCH_SCAN_NONE;
   135d0:	4b0f      	ldr	r3, [pc, #60]	; (13610 <watchScanStop+0x50>)
   135d2:	2200      	movs	r2, #0
   135d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    watchCb.autoConnect = FALSE;
   135d8:	4b0d      	ldr	r3, [pc, #52]	; (13610 <watchScanStop+0x50>)
   135da:	2200      	movs	r2, #0
   135dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  
    /* Open connection */
    if (watchConnInfo.doConnect)
   135e0:	4b0c      	ldr	r3, [pc, #48]	; (13614 <watchScanStop+0x54>)
   135e2:	7adb      	ldrb	r3, [r3, #11]
   135e4:	2b00      	cmp	r3, #0
   135e6:	d00b      	beq.n	13600 <watchScanStop+0x40>
    {
      AppConnOpen(watchConnInfo.addrType, watchConnInfo.addr, watchConnInfo.dbHdl);
   135e8:	4b0a      	ldr	r3, [pc, #40]	; (13614 <watchScanStop+0x54>)
   135ea:	7918      	ldrb	r0, [r3, #4]
   135ec:	4b09      	ldr	r3, [pc, #36]	; (13614 <watchScanStop+0x54>)
   135ee:	681b      	ldr	r3, [r3, #0]
   135f0:	461a      	mov	r2, r3
   135f2:	4909      	ldr	r1, [pc, #36]	; (13618 <watchScanStop+0x58>)
   135f4:	f00b fd3c 	bl	1f070 <AppConnOpen>
      watchConnInfo.doConnect = FALSE;
   135f8:	4b06      	ldr	r3, [pc, #24]	; (13614 <watchScanStop+0x54>)
   135fa:	2200      	movs	r2, #0
   135fc:	72da      	strb	r2, [r3, #11]
    else
    {
        AppAdvStart(APP_MODE_AUTO_INIT);
    }
  }
}
   135fe:	e002      	b.n	13606 <watchScanStop+0x46>
        AppAdvStart(APP_MODE_AUTO_INIT);
   13600:	2002      	movs	r0, #2
   13602:	f00d f841 	bl	20688 <AppAdvStart>
}
   13606:	bf00      	nop
   13608:	3708      	adds	r7, #8
   1360a:	46bd      	mov	sp, r7
   1360c:	bd80      	pop	{r7, pc}
   1360e:	bf00      	nop
   13610:	1000418c 	.word	0x1000418c
   13614:	10009358 	.word	0x10009358
   13618:	1000935d 	.word	0x1000935d

0001361c <watchScanReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchScanReport(dmEvt_t *pMsg)
{
   1361c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1361e:	b095      	sub	sp, #84	; 0x54
   13620:	af06      	add	r7, sp, #24
   13622:	6078      	str	r0, [r7, #4]
  uint8_t  device_name[32] = {0};
   13624:	f107 0308 	add.w	r3, r7, #8
   13628:	2220      	movs	r2, #32
   1362a:	2100      	movs	r1, #0
   1362c:	4618      	mov	r0, r3
   1362e:	f7f8 fe95 	bl	c35c <memset>
  uint32_t name_length;
  uint8_t *pData;
  appDbHdl_t dbHdl;
  bool_t  connect = FALSE;
   13632:	2300      	movs	r3, #0
   13634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* disregard if not scanning or autoconnecting */
  if((watchCb.scan_state == WATCH_SCAN_NONE) || !watchCb.autoConnect)
   13638:	4b83      	ldr	r3, [pc, #524]	; (13848 <watchScanReport+0x22c>)
   1363a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   1363e:	2b00      	cmp	r3, #0
   13640:	f000 80fe 	beq.w	13840 <watchScanReport+0x224>
   13644:	4b80      	ldr	r3, [pc, #512]	; (13848 <watchScanReport+0x22c>)
   13646:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
   1364a:	2b00      	cmp	r3, #0
   1364c:	f000 80f8 	beq.w	13840 <watchScanReport+0x224>
  {
    return;
  }

  if ((pData = DmFindAdType(DM_ADV_TYPE_LOCAL_NAME, pMsg->scanReport.len,
   13650:	687b      	ldr	r3, [r7, #4]
   13652:	7a1b      	ldrb	r3, [r3, #8]
   13654:	b299      	uxth	r1, r3
   13656:	687b      	ldr	r3, [r7, #4]
   13658:	685b      	ldr	r3, [r3, #4]
   1365a:	461a      	mov	r2, r3
   1365c:	2009      	movs	r0, #9
   1365e:	f7fc fc1b 	bl	fe98 <DmFindAdType>
   13662:	6378      	str	r0, [r7, #52]	; 0x34
   13664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13666:	2b00      	cmp	r3, #0
   13668:	d00e      	beq.n	13688 <watchScanReport+0x6c>
                   pMsg->scanReport.pData)))
  {
    name_length = *pData;
   1366a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1366c:	781b      	ldrb	r3, [r3, #0]
   1366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    name_length--;
   13670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13672:	3b01      	subs	r3, #1
   13674:	62fb      	str	r3, [r7, #44]	; 0x2c

    memcpy(device_name, pData + 2, name_length);
   13676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13678:	1c99      	adds	r1, r3, #2
   1367a:	f107 0308 	add.w	r3, r7, #8
   1367e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13680:	4618      	mov	r0, r3
   13682:	f7f8 fd6d 	bl	c160 <memcpy>
   13686:	e01a      	b.n	136be <watchScanReport+0xa2>
  }
  else if ((pData = DmFindAdType(DM_ADV_TYPE_SHORT_NAME, pMsg->scanReport.len,
   13688:	687b      	ldr	r3, [r7, #4]
   1368a:	7a1b      	ldrb	r3, [r3, #8]
   1368c:	b299      	uxth	r1, r3
   1368e:	687b      	ldr	r3, [r7, #4]
   13690:	685b      	ldr	r3, [r3, #4]
   13692:	461a      	mov	r2, r3
   13694:	2008      	movs	r0, #8
   13696:	f7fc fbff 	bl	fe98 <DmFindAdType>
   1369a:	6378      	str	r0, [r7, #52]	; 0x34
   1369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1369e:	2b00      	cmp	r3, #0
   136a0:	d00d      	beq.n	136be <watchScanReport+0xa2>
                   pMsg->scanReport.pData)))
  {
    name_length = *pData;
   136a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136a4:	781b      	ldrb	r3, [r3, #0]
   136a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    name_length--;
   136a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136aa:	3b01      	subs	r3, #1
   136ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    memcpy(device_name, pData + 2, name_length);
   136ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136b0:	1c99      	adds	r1, r3, #2
   136b2:	f107 0308 	add.w	r3, r7, #8
   136b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   136b8:	4618      	mov	r0, r3
   136ba:	f7f8 fd51 	bl	c160 <memcpy>

  }

  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
    pMsg->scanReport.addr[5],
   136be:	687b      	ldr	r3, [r7, #4]
   136c0:	7c5b      	ldrb	r3, [r3, #17]
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
   136c2:	461d      	mov	r5, r3
    pMsg->scanReport.addr[4],
   136c4:	687b      	ldr	r3, [r7, #4]
   136c6:	7c1b      	ldrb	r3, [r3, #16]
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
   136c8:	461e      	mov	r6, r3
    pMsg->scanReport.addr[3],
   136ca:	687b      	ldr	r3, [r7, #4]
   136cc:	7bdb      	ldrb	r3, [r3, #15]
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
   136ce:	469e      	mov	lr, r3
    pMsg->scanReport.addr[2],
   136d0:	687b      	ldr	r3, [r7, #4]
   136d2:	7b9b      	ldrb	r3, [r3, #14]
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
   136d4:	461a      	mov	r2, r3
    pMsg->scanReport.addr[1],
   136d6:	687b      	ldr	r3, [r7, #4]
   136d8:	7b5b      	ldrb	r3, [r3, #13]
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
   136da:	4619      	mov	r1, r3
    pMsg->scanReport.addr[0],
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	7b1b      	ldrb	r3, [r3, #12]
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
   136e0:	4618      	mov	r0, r3
    pMsg->scanReport.rssi,
   136e2:	687b      	ldr	r3, [r7, #4]
   136e4:	f993 3009 	ldrsb.w	r3, [r3, #9]
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
   136e8:	461c      	mov	r4, r3
   136ea:	f107 0308 	add.w	r3, r7, #8
   136ee:	9304      	str	r3, [sp, #16]
   136f0:	9403      	str	r4, [sp, #12]
   136f2:	9002      	str	r0, [sp, #8]
   136f4:	9101      	str	r1, [sp, #4]
   136f6:	9200      	str	r2, [sp, #0]
   136f8:	4673      	mov	r3, lr
   136fa:	4632      	mov	r2, r6
   136fc:	4629      	mov	r1, r5
   136fe:	4853      	ldr	r0, [pc, #332]	; (1384c <watchScanReport+0x230>)
   13700:	f008 f8d6 	bl	1b8b0 <WsfTrace>
    device_name
    );

  /* if we already have a bond with this device then connect to it */
  if ((dbHdl = AppDbFindByAddr(pMsg->scanReport.addrType, pMsg->scanReport.addr)) != APP_DB_HDL_NONE)
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	7ada      	ldrb	r2, [r3, #11]
   13708:	687b      	ldr	r3, [r7, #4]
   1370a:	330c      	adds	r3, #12
   1370c:	4619      	mov	r1, r3
   1370e:	4610      	mov	r0, r2
   13710:	f005 feec 	bl	194ec <AppDbFindByAddr>
   13714:	62b8      	str	r0, [r7, #40]	; 0x28
   13716:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13718:	2b00      	cmp	r3, #0
   1371a:	d013      	beq.n	13744 <watchScanReport+0x128>
  {
    /* if this is a directed advertisement where the initiator address is an RPA */
    if (DM_RAND_ADDR_RPA(pMsg->scanReport.directAddr, pMsg->scanReport.directAddrType))
   1371c:	687b      	ldr	r3, [r7, #4]
   1371e:	7c9b      	ldrb	r3, [r3, #18]
   13720:	2b01      	cmp	r3, #1
   13722:	d10b      	bne.n	1373c <watchScanReport+0x120>
   13724:	687b      	ldr	r3, [r7, #4]
   13726:	7e1b      	ldrb	r3, [r3, #24]
   13728:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1372c:	2b40      	cmp	r3, #64	; 0x40
   1372e:	d105      	bne.n	1373c <watchScanReport+0x120>
    {
      /* resolve direct address to see if it's addressed to us */
      AppMasterResolveAddr(pMsg, dbHdl, APP_RESOLVE_DIRECT_RPA);
   13730:	2201      	movs	r2, #1
   13732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13734:	6878      	ldr	r0, [r7, #4]
   13736:	f00b fbe7 	bl	1ef08 <AppMasterResolveAddr>
   1373a:	e057      	b.n	137ec <watchScanReport+0x1d0>
    }
    else
    {
      connect = TRUE;
   1373c:	2301      	movs	r3, #1
   1373e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
   13742:	e053      	b.n	137ec <watchScanReport+0x1d0>
    }
  }
  /* if the peer device uses an RPA */
  else if (DM_RAND_ADDR_RPA(pMsg->scanReport.addr, pMsg->scanReport.addrType))
   13744:	687b      	ldr	r3, [r7, #4]
   13746:	7adb      	ldrb	r3, [r3, #11]
   13748:	2b01      	cmp	r3, #1
   1374a:	d10b      	bne.n	13764 <watchScanReport+0x148>
   1374c:	687b      	ldr	r3, [r7, #4]
   1374e:	7c5b      	ldrb	r3, [r3, #17]
   13750:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13754:	2b40      	cmp	r3, #64	; 0x40
   13756:	d105      	bne.n	13764 <watchScanReport+0x148>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    AppMasterResolveAddr(pMsg, APP_DB_HDL_NONE, APP_RESOLVE_ADV_RPA);
   13758:	2200      	movs	r2, #0
   1375a:	2100      	movs	r1, #0
   1375c:	6878      	ldr	r0, [r7, #4]
   1375e:	f00b fbd3 	bl	1ef08 <AppMasterResolveAddr>
   13762:	e043      	b.n	137ec <watchScanReport+0x1d0>
  }
  else
  {
    /* find Service UUID list; if full list not found search for partial */
    if ((pData = DmFindAdType(DM_ADV_TYPE_16_UUID, pMsg->scanReport.len,
   13764:	687b      	ldr	r3, [r7, #4]
   13766:	7a1b      	ldrb	r3, [r3, #8]
   13768:	b299      	uxth	r1, r3
   1376a:	687b      	ldr	r3, [r7, #4]
   1376c:	685b      	ldr	r3, [r3, #4]
   1376e:	461a      	mov	r2, r3
   13770:	2003      	movs	r0, #3
   13772:	f7fc fb91 	bl	fe98 <DmFindAdType>
   13776:	6378      	str	r0, [r7, #52]	; 0x34
   13778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1377a:	2b00      	cmp	r3, #0
   1377c:	d109      	bne.n	13792 <watchScanReport+0x176>
                              pMsg->scanReport.pData)) == NULL)
    {
      pData = DmFindAdType(DM_ADV_TYPE_16_UUID_PART, pMsg->scanReport.len,
   1377e:	687b      	ldr	r3, [r7, #4]
   13780:	7a1b      	ldrb	r3, [r3, #8]
   13782:	b299      	uxth	r1, r3
   13784:	687b      	ldr	r3, [r7, #4]
   13786:	685b      	ldr	r3, [r3, #4]
   13788:	461a      	mov	r2, r3
   1378a:	2002      	movs	r0, #2
   1378c:	f7fc fb84 	bl	fe98 <DmFindAdType>
   13790:	6378      	str	r0, [r7, #52]	; 0x34
                           pMsg->scanReport.pData);
    }
    
    /* if found and length checks out ok */
    if (pData != NULL && pData[DM_AD_LEN_IDX] >= (ATT_16_UUID_LEN + 1))
   13792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13794:	2b00      	cmp	r3, #0
   13796:	d029      	beq.n	137ec <watchScanReport+0x1d0>
   13798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1379a:	781b      	ldrb	r3, [r3, #0]
   1379c:	2b02      	cmp	r3, #2
   1379e:	d925      	bls.n	137ec <watchScanReport+0x1d0>
    {
      uint8_t len = pData[DM_AD_LEN_IDX] - 1;
   137a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	3b01      	subs	r3, #1
   137a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      pData += DM_AD_DATA_IDX;
   137aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137ac:	3302      	adds	r3, #2
   137ae:	637b      	str	r3, [r7, #52]	; 0x34
      
      while ((!connect) && (len >= ATT_16_UUID_LEN))
   137b0:	e014      	b.n	137dc <watchScanReport+0x1c0>
      {
        /* Connect if heart rate service is included */
        if (BYTES_UINT16_CMP(pData, ATT_UUID_HEART_RATE_SERVICE))
   137b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137b4:	3301      	adds	r3, #1
   137b6:	781b      	ldrb	r3, [r3, #0]
   137b8:	2b18      	cmp	r3, #24
   137ba:	d107      	bne.n	137cc <watchScanReport+0x1b0>
   137bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137be:	781b      	ldrb	r3, [r3, #0]
   137c0:	2b0d      	cmp	r3, #13
   137c2:	d103      	bne.n	137cc <watchScanReport+0x1b0>
        {
          connect = TRUE;
   137c4:	2301      	movs	r3, #1
   137c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
          break;
   137ca:	e00f      	b.n	137ec <watchScanReport+0x1d0>
        }
        
        pData += ATT_16_UUID_LEN;
   137cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137ce:	3302      	adds	r3, #2
   137d0:	637b      	str	r3, [r7, #52]	; 0x34
        len -= ATT_16_UUID_LEN;
   137d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   137d6:	3b02      	subs	r3, #2
   137d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      while ((!connect) && (len >= ATT_16_UUID_LEN))
   137dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   137e0:	2b00      	cmp	r3, #0
   137e2:	d103      	bne.n	137ec <watchScanReport+0x1d0>
   137e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   137e8:	2b01      	cmp	r3, #1
   137ea:	d8e2      	bhi.n	137b2 <watchScanReport+0x196>
      }
    }
  }

  if (connect)
   137ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   137f0:	2b00      	cmp	r3, #0
   137f2:	d026      	beq.n	13842 <watchScanReport+0x226>
  {

    if (pMsg->scanReport.rssi > watchConnInfo.rssi)
   137f4:	687b      	ldr	r3, [r7, #4]
   137f6:	f993 2009 	ldrsb.w	r2, [r3, #9]
   137fa:	4b15      	ldr	r3, [pc, #84]	; (13850 <watchScanReport+0x234>)
   137fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
   13800:	429a      	cmp	r2, r3
   13802:	dd1e      	ble.n	13842 <watchScanReport+0x226>
    {
      watchConnInfo.rssi = pMsg->scanReport.rssi;
   13804:	687b      	ldr	r3, [r7, #4]
   13806:	f993 2009 	ldrsb.w	r2, [r3, #9]
   1380a:	4b11      	ldr	r3, [pc, #68]	; (13850 <watchScanReport+0x234>)
   1380c:	731a      	strb	r2, [r3, #12]
      /* connect will start after scanning stops with expiration
       * of scan timer.
       */
      
      /* Store peer information for connect on scan stop */
      watchConnInfo.addrType = DmHostAddrType(pMsg->scanReport.addrType);
   1380e:	687b      	ldr	r3, [r7, #4]
   13810:	7adb      	ldrb	r3, [r3, #11]
   13812:	4618      	mov	r0, r3
   13814:	f7fc fb86 	bl	ff24 <DmHostAddrType>
   13818:	4603      	mov	r3, r0
   1381a:	461a      	mov	r2, r3
   1381c:	4b0c      	ldr	r3, [pc, #48]	; (13850 <watchScanReport+0x234>)
   1381e:	711a      	strb	r2, [r3, #4]
      memcpy(watchConnInfo.addr, pMsg->scanReport.addr, sizeof(bdAddr_t));
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	f103 020c 	add.w	r2, r3, #12
   13826:	4b0a      	ldr	r3, [pc, #40]	; (13850 <watchScanReport+0x234>)
   13828:	3305      	adds	r3, #5
   1382a:	6811      	ldr	r1, [r2, #0]
   1382c:	6019      	str	r1, [r3, #0]
   1382e:	8892      	ldrh	r2, [r2, #4]
   13830:	809a      	strh	r2, [r3, #4]
      watchConnInfo.dbHdl = dbHdl;
   13832:	4a07      	ldr	r2, [pc, #28]	; (13850 <watchScanReport+0x234>)
   13834:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13836:	6013      	str	r3, [r2, #0]
      watchConnInfo.doConnect = TRUE;
   13838:	4b05      	ldr	r3, [pc, #20]	; (13850 <watchScanReport+0x234>)
   1383a:	2201      	movs	r2, #1
   1383c:	72da      	strb	r2, [r3, #11]
   1383e:	e000      	b.n	13842 <watchScanReport+0x226>
    return;
   13840:	bf00      	nop
    }
  }
}
   13842:	373c      	adds	r7, #60	; 0x3c
   13844:	46bd      	mov	sp, r7
   13846:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13848:	1000418c 	.word	0x1000418c
   1384c:	00025228 	.word	0x00025228
   13850:	10009358 	.word	0x10009358

00013854 <watchCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchCccCback(attsCccEvt_t *pEvt)
{
   13854:	b580      	push	{r7, lr}
   13856:	b084      	sub	sp, #16
   13858:	af00      	add	r7, sp, #0
   1385a:	6078      	str	r0, [r7, #4]
  attsCccEvt_t  *pMsg;
  appDbHdl_t    dbHdl;
  
  /* if CCC not set from initialization and there's a device record */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	889b      	ldrh	r3, [r3, #4]
   13860:	2b00      	cmp	r3, #0
   13862:	d012      	beq.n	1388a <watchCccCback+0x36>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
   13864:	687b      	ldr	r3, [r7, #4]
   13866:	881b      	ldrh	r3, [r3, #0]
   13868:	b2db      	uxtb	r3, r3
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1386a:	4618      	mov	r0, r3
   1386c:	f00a fde0 	bl	1e430 <AppDbGetHdl>
   13870:	60f8      	str	r0, [r7, #12]
   13872:	68fb      	ldr	r3, [r7, #12]
   13874:	2b00      	cmp	r3, #0
   13876:	d008      	beq.n	1388a <watchCccCback+0x36>
  {
    /* store value in device database */  
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   13878:	687b      	ldr	r3, [r7, #4]
   1387a:	7a1b      	ldrb	r3, [r3, #8]
   1387c:	b299      	uxth	r1, r3
   1387e:	687b      	ldr	r3, [r7, #4]
   13880:	88db      	ldrh	r3, [r3, #6]
   13882:	461a      	mov	r2, r3
   13884:	68f8      	ldr	r0, [r7, #12]
   13886:	f005 ff6b 	bl	19760 <AppDbSetCccTblValue>
  }
  
  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   1388a:	200a      	movs	r0, #10
   1388c:	f007 f84f 	bl	1a92e <WsfMsgAlloc>
   13890:	60b8      	str	r0, [r7, #8]
   13892:	68bb      	ldr	r3, [r7, #8]
   13894:	2b00      	cmp	r3, #0
   13896:	d00b      	beq.n	138b0 <watchCccCback+0x5c>
  {
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   13898:	220a      	movs	r2, #10
   1389a:	6879      	ldr	r1, [r7, #4]
   1389c:	68b8      	ldr	r0, [r7, #8]
   1389e:	f7f8 fc5f 	bl	c160 <memcpy>
    WsfMsgSend(watchCb.handlerId, pMsg);
   138a2:	4b05      	ldr	r3, [pc, #20]	; (138b8 <watchCccCback+0x64>)
   138a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   138a8:	68b9      	ldr	r1, [r7, #8]
   138aa:	4618      	mov	r0, r3
   138ac:	f007 f863 	bl	1a976 <WsfMsgSend>
  }
}
   138b0:	bf00      	nop
   138b2:	3710      	adds	r7, #16
   138b4:	46bd      	mov	sp, r7
   138b6:	bd80      	pop	{r7, pc}
   138b8:	1000418c 	.word	0x1000418c

000138bc <watchOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchOpen(dmEvt_t *pMsg)
{
   138bc:	b580      	push	{r7, lr}
   138be:	b082      	sub	sp, #8
   138c0:	af00      	add	r7, sp, #0
   138c2:	6078      	str	r0, [r7, #4]
  if (pMsg->connOpen.role == DM_ROLE_SLAVE)
   138c4:	687b      	ldr	r3, [r7, #4]
   138c6:	7a1b      	ldrb	r3, [r3, #8]
   138c8:	2b01      	cmp	r3, #1
   138ca:	d10f      	bne.n	138ec <watchOpen+0x30>
  {
    /* if not bonded send a security request on connection open; devices must pair before
     * service discovery will be initiated
     */
    if (AppDbCheckBonded() == FALSE)
   138cc:	f005 fdce 	bl	1946c <AppDbCheckBonded>
   138d0:	4603      	mov	r3, r0
   138d2:	2b00      	cmp	r3, #0
   138d4:	d10d      	bne.n	138f2 <watchOpen+0x36>
    {
      DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   138d6:	687b      	ldr	r3, [r7, #4]
   138d8:	881b      	ldrh	r3, [r3, #0]
   138da:	b2da      	uxtb	r2, r3
   138dc:	4b07      	ldr	r3, [pc, #28]	; (138fc <watchOpen+0x40>)
   138de:	681b      	ldr	r3, [r3, #0]
   138e0:	781b      	ldrb	r3, [r3, #0]
   138e2:	4619      	mov	r1, r3
   138e4:	4610      	mov	r0, r2
   138e6:	f7fd f8a0 	bl	10a2a <DmSecSlaveReq>
  else {
    
    AppAdvStart(APP_MODE_AUTO_INIT);

  }
}
   138ea:	e002      	b.n	138f2 <watchOpen+0x36>
    AppAdvStart(APP_MODE_AUTO_INIT);
   138ec:	2002      	movs	r0, #2
   138ee:	f00c fecb 	bl	20688 <AppAdvStart>
}
   138f2:	bf00      	nop
   138f4:	3708      	adds	r7, #8
   138f6:	46bd      	mov	sp, r7
   138f8:	bd80      	pop	{r7, pc}
   138fa:	bf00      	nop
   138fc:	10009ed4 	.word	0x10009ed4

00013900 <watchSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchSetup(dmEvt_t *pMsg)
{
   13900:	b580      	push	{r7, lr}
   13902:	b082      	sub	sp, #8
   13904:	af00      	add	r7, sp, #0
   13906:	6078      	str	r0, [r7, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(watchAdvDataDisc), (uint8_t *) watchAdvDataDisc);
   13908:	4a0e      	ldr	r2, [pc, #56]	; (13944 <watchSetup+0x44>)
   1390a:	2112      	movs	r1, #18
   1390c:	2002      	movs	r0, #2
   1390e:	f00c fe99 	bl	20644 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(watchScanDataDisc), (uint8_t *) watchScanDataDisc);
   13912:	4a0d      	ldr	r2, [pc, #52]	; (13948 <watchSetup+0x48>)
   13914:	2107      	movs	r1, #7
   13916:	2003      	movs	r0, #3
   13918:	f00c fe94 	bl	20644 <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, sizeof(watchAdvDataDisc), (uint8_t *) watchAdvDataDisc);
   1391c:	4a09      	ldr	r2, [pc, #36]	; (13944 <watchSetup+0x44>)
   1391e:	2112      	movs	r1, #18
   13920:	2000      	movs	r0, #0
   13922:	f00c fe8f 	bl	20644 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(watchScanDataDisc), (uint8_t *) watchScanDataDisc);
   13926:	4a08      	ldr	r2, [pc, #32]	; (13948 <watchSetup+0x48>)
   13928:	2107      	movs	r1, #7
   1392a:	2001      	movs	r0, #1
   1392c:	f00c fe8a 	bl	20644 <AppAdvSetData>
  
  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   13930:	2002      	movs	r0, #2
   13932:	f00c fea9 	bl	20688 <AppAdvStart>

  DmConnSetConnSpec((hciConnSpec_t *) &watchConnCfg);
   13936:	4805      	ldr	r0, [pc, #20]	; (1394c <watchSetup+0x4c>)
   13938:	f7fc f818 	bl	f96c <DmConnSetConnSpec>
}
   1393c:	bf00      	nop
   1393e:	3708      	adds	r7, #8
   13940:	46bd      	mov	sp, r7
   13942:	bd80      	pop	{r7, pc}
   13944:	000269c8 	.word	0x000269c8
   13948:	000269dc 	.word	0x000269dc
   1394c:	000269a4 	.word	0x000269a4

00013950 <watchSlaveValueUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchSlaveValueUpdate(attEvt_t *pMsg)
{
   13950:	b580      	push	{r7, lr}
   13952:	b082      	sub	sp, #8
   13954:	af00      	add	r7, sp, #0
   13956:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == ATT_SUCCESS)
   13958:	687b      	ldr	r3, [r7, #4]
   1395a:	78db      	ldrb	r3, [r3, #3]
   1395c:	2b00      	cmp	r3, #0
   1395e:	d128      	bne.n	139b2 <watchSlaveValueUpdate+0x62>
  {
    /* determine which profile the handle belongs to; start with most likely */
    
    /* alert notification */
    if (AnpcAnsValueUpdate(pWatchAnsHdlList, pMsg) == ATT_SUCCESS)    
   13960:	4b15      	ldr	r3, [pc, #84]	; (139b8 <watchSlaveValueUpdate+0x68>)
   13962:	681b      	ldr	r3, [r3, #0]
   13964:	6879      	ldr	r1, [r7, #4]
   13966:	4618      	mov	r0, r3
   13968:	f005 fbda 	bl	19120 <AnpcAnsValueUpdate>
   1396c:	4603      	mov	r3, r0
   1396e:	2b00      	cmp	r3, #0
   13970:	d01a      	beq.n	139a8 <watchSlaveValueUpdate+0x58>
    {
      return;
    }

    /* phone alert status */
    if (PaspcPassValueUpdate(pWatchPassHdlList, pMsg) == ATT_SUCCESS)
   13972:	4b12      	ldr	r3, [pc, #72]	; (139bc <watchSlaveValueUpdate+0x6c>)
   13974:	681b      	ldr	r3, [r3, #0]
   13976:	6879      	ldr	r1, [r7, #4]
   13978:	4618      	mov	r0, r3
   1397a:	f006 fe15 	bl	1a5a8 <PaspcPassValueUpdate>
   1397e:	4603      	mov	r3, r0
   13980:	2b00      	cmp	r3, #0
   13982:	d013      	beq.n	139ac <watchSlaveValueUpdate+0x5c>
    {
      return;
    }

    /* current time */
    if (TipcCtsValueUpdate(pWatchCtsHdlList, pMsg) == ATT_SUCCESS)    
   13984:	4b0e      	ldr	r3, [pc, #56]	; (139c0 <watchSlaveValueUpdate+0x70>)
   13986:	681b      	ldr	r3, [r3, #0]
   13988:	6879      	ldr	r1, [r7, #4]
   1398a:	4618      	mov	r0, r3
   1398c:	f004 ffbe 	bl	1890c <TipcCtsValueUpdate>
   13990:	4603      	mov	r3, r0
   13992:	2b00      	cmp	r3, #0
   13994:	d00c      	beq.n	139b0 <watchSlaveValueUpdate+0x60>
    {
      return;
    }

    /* GATT */
    if (GattValueUpdate(pWatchSlvGattHdlList, pMsg) == ATT_SUCCESS)    
   13996:	4b0b      	ldr	r3, [pc, #44]	; (139c4 <watchSlaveValueUpdate+0x74>)
   13998:	681b      	ldr	r3, [r3, #0]
   1399a:	6879      	ldr	r1, [r7, #4]
   1399c:	4618      	mov	r0, r3
   1399e:	f7ff fd5f 	bl	13460 <GattValueUpdate>
   139a2:	4603      	mov	r3, r0
   139a4:	2b00      	cmp	r3, #0
   139a6:	e004      	b.n	139b2 <watchSlaveValueUpdate+0x62>
      return;
   139a8:	bf00      	nop
   139aa:	e002      	b.n	139b2 <watchSlaveValueUpdate+0x62>
      return;
   139ac:	bf00      	nop
   139ae:	e000      	b.n	139b2 <watchSlaveValueUpdate+0x62>
      return;
   139b0:	bf00      	nop
    {
      return;
    }
  }
} 
   139b2:	3708      	adds	r7, #8
   139b4:	46bd      	mov	sp, r7
   139b6:	bd80      	pop	{r7, pc}
   139b8:	10002b9c 	.word	0x10002b9c
   139bc:	10002ba0 	.word	0x10002ba0
   139c0:	10002b98 	.word	0x10002b98
   139c4:	10002b94 	.word	0x10002b94

000139c8 <watchMasterValueUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchMasterValueUpdate(attEvt_t *pMsg)
{
   139c8:	b580      	push	{r7, lr}
   139ca:	b082      	sub	sp, #8
   139cc:	af00      	add	r7, sp, #0
   139ce:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == ATT_SUCCESS)
   139d0:	687b      	ldr	r3, [r7, #4]
   139d2:	78db      	ldrb	r3, [r3, #3]
   139d4:	2b00      	cmp	r3, #0
   139d6:	d11d      	bne.n	13a14 <watchMasterValueUpdate+0x4c>
  {
    /* determine which profile the handle belongs to; start with most likely */
    
    /* heart rate */
    if (HrpcHrsValueUpdate(pWatchHrsHdlList, pMsg) == ATT_SUCCESS)    
   139d8:	4b10      	ldr	r3, [pc, #64]	; (13a1c <watchMasterValueUpdate+0x54>)
   139da:	681b      	ldr	r3, [r3, #0]
   139dc:	6879      	ldr	r1, [r7, #4]
   139de:	4618      	mov	r0, r3
   139e0:	f007 faca 	bl	1af78 <HrpcHrsValueUpdate>
   139e4:	4603      	mov	r3, r0
   139e6:	2b00      	cmp	r3, #0
   139e8:	d011      	beq.n	13a0e <watchMasterValueUpdate+0x46>
    {
      return;
    }

    /* device information */
    if (DisValueUpdate(pWatchDisHdlList, pMsg) == ATT_SUCCESS)
   139ea:	4b0d      	ldr	r3, [pc, #52]	; (13a20 <watchMasterValueUpdate+0x58>)
   139ec:	681b      	ldr	r3, [r3, #0]
   139ee:	6879      	ldr	r1, [r7, #4]
   139f0:	4618      	mov	r0, r3
   139f2:	f006 f85f 	bl	19ab4 <DisValueUpdate>
   139f6:	4603      	mov	r3, r0
   139f8:	2b00      	cmp	r3, #0
   139fa:	d00a      	beq.n	13a12 <watchMasterValueUpdate+0x4a>
    {
      return;
    }

    /* GATT */
    if (GattValueUpdate(pWatchMstGattHdlList, pMsg) == ATT_SUCCESS)    
   139fc:	4b09      	ldr	r3, [pc, #36]	; (13a24 <watchMasterValueUpdate+0x5c>)
   139fe:	681b      	ldr	r3, [r3, #0]
   13a00:	6879      	ldr	r1, [r7, #4]
   13a02:	4618      	mov	r0, r3
   13a04:	f7ff fd2c 	bl	13460 <GattValueUpdate>
   13a08:	4603      	mov	r3, r0
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	e002      	b.n	13a14 <watchMasterValueUpdate+0x4c>
      return;
   13a0e:	bf00      	nop
   13a10:	e000      	b.n	13a14 <watchMasterValueUpdate+0x4c>
      return;
   13a12:	bf00      	nop
    {
      return;
    }
  }
}
   13a14:	3708      	adds	r7, #8
   13a16:	46bd      	mov	sp, r7
   13a18:	bd80      	pop	{r7, pc}
   13a1a:	bf00      	nop
   13a1c:	10002bac 	.word	0x10002bac
   13a20:	10002ba8 	.word	0x10002ba8
   13a24:	10002ba4 	.word	0x10002ba4

00013a28 <watchGetConnIdByRole>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static dmConnId_t watchGetConnIdByRole(dmConnId_t *pConnIdList, uint8_t role)
{
   13a28:	b580      	push	{r7, lr}
   13a2a:	b084      	sub	sp, #16
   13a2c:	af00      	add	r7, sp, #0
   13a2e:	6078      	str	r0, [r7, #4]
   13a30:	460b      	mov	r3, r1
   13a32:	70fb      	strb	r3, [r7, #3]
  uint8_t i;

  for (i = 0; i < DM_CONN_MAX; i++)
   13a34:	2300      	movs	r3, #0
   13a36:	73fb      	strb	r3, [r7, #15]
   13a38:	e019      	b.n	13a6e <watchGetConnIdByRole+0x46>
  {
    if (pConnIdList[i] != DM_CONN_ID_NONE)
   13a3a:	7bfb      	ldrb	r3, [r7, #15]
   13a3c:	687a      	ldr	r2, [r7, #4]
   13a3e:	4413      	add	r3, r2
   13a40:	781b      	ldrb	r3, [r3, #0]
   13a42:	2b00      	cmp	r3, #0
   13a44:	d010      	beq.n	13a68 <watchGetConnIdByRole+0x40>
    {
      if (DmConnRole(pConnIdList[i]) == role)
   13a46:	7bfb      	ldrb	r3, [r7, #15]
   13a48:	687a      	ldr	r2, [r7, #4]
   13a4a:	4413      	add	r3, r2
   13a4c:	781b      	ldrb	r3, [r3, #0]
   13a4e:	4618      	mov	r0, r3
   13a50:	f7fc f89c 	bl	fb8c <DmConnRole>
   13a54:	4603      	mov	r3, r0
   13a56:	461a      	mov	r2, r3
   13a58:	78fb      	ldrb	r3, [r7, #3]
   13a5a:	4293      	cmp	r3, r2
   13a5c:	d104      	bne.n	13a68 <watchGetConnIdByRole+0x40>
      {
        return pConnIdList[i];
   13a5e:	7bfb      	ldrb	r3, [r7, #15]
   13a60:	687a      	ldr	r2, [r7, #4]
   13a62:	4413      	add	r3, r2
   13a64:	781b      	ldrb	r3, [r3, #0]
   13a66:	e006      	b.n	13a76 <watchGetConnIdByRole+0x4e>
  for (i = 0; i < DM_CONN_MAX; i++)
   13a68:	7bfb      	ldrb	r3, [r7, #15]
   13a6a:	3301      	adds	r3, #1
   13a6c:	73fb      	strb	r3, [r7, #15]
   13a6e:	7bfb      	ldrb	r3, [r7, #15]
   13a70:	2b07      	cmp	r3, #7
   13a72:	d9e2      	bls.n	13a3a <watchGetConnIdByRole+0x12>
      }
    }
  }

  return DM_CONN_ID_NONE;
   13a74:	2300      	movs	r3, #0
}
   13a76:	4618      	mov	r0, r3
   13a78:	3710      	adds	r7, #16
   13a7a:	46bd      	mov	sp, r7
   13a7c:	bd80      	pop	{r7, pc}
	...

00013a80 <watchBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchBtnCback(uint8_t btn)
{
   13a80:	b580      	push	{r7, lr}
   13a82:	b086      	sub	sp, #24
   13a84:	af00      	add	r7, sp, #0
   13a86:	4603      	mov	r3, r0
   13a88:	71fb      	strb	r3, [r7, #7]
  dmConnId_t      slaveConnId, masterConnId;
  static uint8_t  ringer = CH_RCP_SILENT;
  dmConnId_t      connIdList[DM_CONN_MAX];
  
  AppConnOpenList(connIdList);
   13a8a:	f107 030c 	add.w	r3, r7, #12
   13a8e:	4618      	mov	r0, r3
   13a90:	f00a fca0 	bl	1e3d4 <AppConnOpenList>

  slaveConnId = watchGetConnIdByRole(connIdList, DM_ROLE_SLAVE);
   13a94:	f107 030c 	add.w	r3, r7, #12
   13a98:	2101      	movs	r1, #1
   13a9a:	4618      	mov	r0, r3
   13a9c:	f7ff ffc4 	bl	13a28 <watchGetConnIdByRole>
   13aa0:	4603      	mov	r3, r0
   13aa2:	75fb      	strb	r3, [r7, #23]
  masterConnId = watchGetConnIdByRole(connIdList, DM_ROLE_MASTER);
   13aa4:	f107 030c 	add.w	r3, r7, #12
   13aa8:	2100      	movs	r1, #0
   13aaa:	4618      	mov	r0, r3
   13aac:	f7ff ffbc 	bl	13a28 <watchGetConnIdByRole>
   13ab0:	4603      	mov	r3, r0
   13ab2:	75bb      	strb	r3, [r7, #22]

  APP_TRACE_INFO3("btn: %d - master conn id: %d - slave conn id: %d", btn, masterConnId, slaveConnId);
   13ab4:	79f9      	ldrb	r1, [r7, #7]
   13ab6:	7dba      	ldrb	r2, [r7, #22]
   13ab8:	7dfb      	ldrb	r3, [r7, #23]
   13aba:	4840      	ldr	r0, [pc, #256]	; (13bbc <watchBtnCback+0x13c>)
   13abc:	f007 fef8 	bl	1b8b0 <WsfTrace>
  // as long as button 1 is short pressed, we'll scan and connect to 
  // a  new fit device.
  if (1) 
  {
    /* No connection as a master */
    switch (btn)
   13ac0:	79fb      	ldrb	r3, [r7, #7]
   13ac2:	2b02      	cmp	r3, #2
   13ac4:	d006      	beq.n	13ad4 <watchBtnCback+0x54>
   13ac6:	2b04      	cmp	r3, #4
   13ac8:	d02c      	beq.n	13b24 <watchBtnCback+0xa4>
        /* clear bonded device info */
        AppDbDeleteAllRecords();
        return;
      
      default:
        break;
   13aca:	bf00      	nop
    }
  }

  if (slaveConnId == DM_CONN_ID_NONE)
   13acc:	7dfb      	ldrb	r3, [r7, #23]
   13ace:	2b00      	cmp	r3, #0
   13ad0:	d144      	bne.n	13b5c <watchBtnCback+0xdc>
   13ad2:	e02a      	b.n	13b2a <watchBtnCback+0xaa>
        if(watchCb.scan_state!=WATCH_SCAN_NONE)
   13ad4:	4b3a      	ldr	r3, [pc, #232]	; (13bc0 <watchBtnCback+0x140>)
   13ad6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   13ada:	2b00      	cmp	r3, #0
   13adc:	d002      	beq.n	13ae4 <watchBtnCback+0x64>
          AppScanStop();
   13ade:	f00b fab5 	bl	1f04c <AppScanStop>
        return;
   13ae2:	e066      	b.n	13bb2 <watchBtnCback+0x132>
        else if (!watchCb.autoConnect)
   13ae4:	4b36      	ldr	r3, [pc, #216]	; (13bc0 <watchBtnCback+0x140>)
   13ae6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
   13aea:	2b00      	cmp	r3, #0
   13aec:	d161      	bne.n	13bb2 <watchBtnCback+0x132>
          watchCb.autoConnect = TRUE;
   13aee:	4b34      	ldr	r3, [pc, #208]	; (13bc0 <watchBtnCback+0x140>)
   13af0:	2201      	movs	r2, #1
   13af2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
          watchConnInfo.doConnect = FALSE;
   13af6:	4b33      	ldr	r3, [pc, #204]	; (13bc4 <watchBtnCback+0x144>)
   13af8:	2200      	movs	r2, #0
   13afa:	72da      	strb	r2, [r3, #11]
          watchCb.scan_state = WATCH_SCAN_START;
   13afc:	4b30      	ldr	r3, [pc, #192]	; (13bc0 <watchBtnCback+0x140>)
   13afe:	2201      	movs	r2, #1
   13b00:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
          if (AppSlaveIsAdvertising())
   13b04:	f00c fcbe 	bl	20484 <AppSlaveIsAdvertising>
   13b08:	4603      	mov	r3, r0
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d002      	beq.n	13b14 <watchBtnCback+0x94>
              AppAdvStop();
   13b0e:	f00c fde9 	bl	206e4 <AppAdvStop>
        return;
   13b12:	e04e      	b.n	13bb2 <watchBtnCback+0x132>
              AppScanStart(watchMasterCfg.discMode, watchMasterCfg.scanType,
   13b14:	2300      	movs	r3, #0
   13b16:	2101      	movs	r1, #1
   13b18:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   13b1c:	4618      	mov	r0, r3
   13b1e:	f00b fa6d 	bl	1effc <AppScanStart>
        return;
   13b22:	e046      	b.n	13bb2 <watchBtnCback+0x132>
        AppDbDeleteAllRecords();
   13b24:	f005 fcc4 	bl	194b0 <AppDbDeleteAllRecords>
        return;
   13b28:	e044      	b.n	13bb4 <watchBtnCback+0x134>
  {
    /* No connection as a slave */
    switch (btn)
   13b2a:	79fb      	ldrb	r3, [r7, #7]
   13b2c:	2b08      	cmp	r3, #8
   13b2e:	d008      	beq.n	13b42 <watchBtnCback+0xc2>
   13b30:	2b09      	cmp	r3, #9
   13b32:	d00d      	beq.n	13b50 <watchBtnCback+0xd0>
   13b34:	2b07      	cmp	r3, #7
   13b36:	d000      	beq.n	13b3a <watchBtnCback+0xba>
        AppDbDeleteAllRecords();
        AppAdvStart(APP_MODE_AUTO_INIT);
        return;

      default:
        break;
   13b38:	e03c      	b.n	13bb4 <watchBtnCback+0x134>
        AppAdvStart(APP_MODE_AUTO_INIT);
   13b3a:	2002      	movs	r0, #2
   13b3c:	f00c fda4 	bl	20688 <AppAdvStart>
        return;
   13b40:	e038      	b.n	13bb4 <watchBtnCback+0x134>
        AppSetBondable(TRUE);
   13b42:	2001      	movs	r0, #1
   13b44:	f00c fc5c 	bl	20400 <AppSetBondable>
        AppAdvStart(APP_MODE_DISCOVERABLE);
   13b48:	2001      	movs	r0, #1
   13b4a:	f00c fd9d 	bl	20688 <AppAdvStart>
        return;
   13b4e:	e031      	b.n	13bb4 <watchBtnCback+0x134>
        AppDbDeleteAllRecords();
   13b50:	f005 fcae 	bl	194b0 <AppDbDeleteAllRecords>
        AppAdvStart(APP_MODE_AUTO_INIT);
   13b54:	2002      	movs	r0, #2
   13b56:	f00c fd97 	bl	20688 <AppAdvStart>
        return;
   13b5a:	e02b      	b.n	13bb4 <watchBtnCback+0x134>
    }
  }
  else
  {
    /* Active connection to a slave */
    switch (btn)
   13b5c:	79fb      	ldrb	r3, [r7, #7]
   13b5e:	2b08      	cmp	r3, #8
   13b60:	d00e      	beq.n	13b80 <watchBtnCback+0x100>
   13b62:	2b09      	cmp	r3, #9
   13b64:	d020      	beq.n	13ba8 <watchBtnCback+0x128>
   13b66:	2b07      	cmp	r3, #7
   13b68:	d000      	beq.n	13b6c <watchBtnCback+0xec>
        /* disconnect slave connection */ 
        AppConnClose(slaveConnId);
        break;
                
      default:
        break;
   13b6a:	e023      	b.n	13bb4 <watchBtnCback+0x134>
        PaspcPassControl(slaveConnId, pWatchPassHdlList[PASPC_PASS_RCP_HDL_IDX], CH_RCP_MUTE_ONCE);
   13b6c:	4b16      	ldr	r3, [pc, #88]	; (13bc8 <watchBtnCback+0x148>)
   13b6e:	681b      	ldr	r3, [r3, #0]
   13b70:	3308      	adds	r3, #8
   13b72:	8819      	ldrh	r1, [r3, #0]
   13b74:	7dfb      	ldrb	r3, [r7, #23]
   13b76:	2202      	movs	r2, #2
   13b78:	4618      	mov	r0, r3
   13b7a:	f006 fcfb 	bl	1a574 <PaspcPassControl>
        return;
   13b7e:	e019      	b.n	13bb4 <watchBtnCback+0x134>
        PaspcPassControl(slaveConnId, pWatchPassHdlList[PASPC_PASS_RCP_HDL_IDX], ringer);
   13b80:	4b11      	ldr	r3, [pc, #68]	; (13bc8 <watchBtnCback+0x148>)
   13b82:	681b      	ldr	r3, [r3, #0]
   13b84:	3308      	adds	r3, #8
   13b86:	8819      	ldrh	r1, [r3, #0]
   13b88:	4b10      	ldr	r3, [pc, #64]	; (13bcc <watchBtnCback+0x14c>)
   13b8a:	781a      	ldrb	r2, [r3, #0]
   13b8c:	7dfb      	ldrb	r3, [r7, #23]
   13b8e:	4618      	mov	r0, r3
   13b90:	f006 fcf0 	bl	1a574 <PaspcPassControl>
        ringer = (ringer == CH_RCP_SILENT) ? CH_RCP_CANCEL_SILENT : CH_RCP_SILENT;
   13b94:	4b0d      	ldr	r3, [pc, #52]	; (13bcc <watchBtnCback+0x14c>)
   13b96:	781b      	ldrb	r3, [r3, #0]
   13b98:	2b01      	cmp	r3, #1
   13b9a:	d101      	bne.n	13ba0 <watchBtnCback+0x120>
   13b9c:	2203      	movs	r2, #3
   13b9e:	e000      	b.n	13ba2 <watchBtnCback+0x122>
   13ba0:	2201      	movs	r2, #1
   13ba2:	4b0a      	ldr	r3, [pc, #40]	; (13bcc <watchBtnCback+0x14c>)
   13ba4:	701a      	strb	r2, [r3, #0]
        return;
   13ba6:	e005      	b.n	13bb4 <watchBtnCback+0x134>
        AppConnClose(slaveConnId);
   13ba8:	7dfb      	ldrb	r3, [r7, #23]
   13baa:	4618      	mov	r0, r3
   13bac:	f00a fc02 	bl	1e3b4 <AppConnClose>
        break;
   13bb0:	e000      	b.n	13bb4 <watchBtnCback+0x134>
        return;
   13bb2:	bf00      	nop
    }    
  }
}
   13bb4:	3718      	adds	r7, #24
   13bb6:	46bd      	mov	sp, r7
   13bb8:	bd80      	pop	{r7, pc}
   13bba:	bf00      	nop
   13bbc:	0002525c 	.word	0x0002525c
   13bc0:	1000418c 	.word	0x1000418c
   13bc4:	10009358 	.word	0x10009358
   13bc8:	10002ba0 	.word	0x10002ba0
   13bcc:	10002bb0 	.word	0x10002bb0

00013bd0 <watchDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchDiscCback(dmConnId_t connId, uint8_t status)
{
   13bd0:	b580      	push	{r7, lr}
   13bd2:	b084      	sub	sp, #16
   13bd4:	af02      	add	r7, sp, #8
   13bd6:	4603      	mov	r3, r0
   13bd8:	460a      	mov	r2, r1
   13bda:	71fb      	strb	r3, [r7, #7]
   13bdc:	4613      	mov	r3, r2
   13bde:	71bb      	strb	r3, [r7, #6]
  switch(status)
   13be0:	79bb      	ldrb	r3, [r7, #6]
   13be2:	2b07      	cmp	r3, #7
   13be4:	f200 80ff 	bhi.w	13de6 <watchDiscCback+0x216>
   13be8:	a201      	add	r2, pc, #4	; (adr r2, 13bf0 <watchDiscCback+0x20>)
   13bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13bee:	bf00      	nop
   13bf0:	00013c11 	.word	0x00013c11
   13bf4:	00013c3b 	.word	0x00013c3b
   13bf8:	00013c5d 	.word	0x00013c5d
   13bfc:	00013c9b 	.word	0x00013c9b
   13c00:	00013c9b 	.word	0x00013c9b
   13c04:	00013d7b 	.word	0x00013d7b
   13c08:	00013dc3 	.word	0x00013dc3
   13c0c:	00013db5 	.word	0x00013db5
  {
    case APP_DISC_INIT:
      /* set handle list when initialization requested */
      if (DmConnRole(connId) == DM_ROLE_MASTER)
   13c10:	79fb      	ldrb	r3, [r7, #7]
   13c12:	4618      	mov	r0, r3
   13c14:	f7fb ffba 	bl	fb8c <DmConnRole>
   13c18:	4603      	mov	r3, r0
   13c1a:	2b00      	cmp	r3, #0
   13c1c:	d106      	bne.n	13c2c <watchDiscCback+0x5c>
      {
        AppDiscSetHdlList(connId, WATCH_DISC_MASTER_HDL_LIST_LEN, watchCb.hdlMasterList);
   13c1e:	79fb      	ldrb	r3, [r7, #7]
   13c20:	4a74      	ldr	r2, [pc, #464]	; (13df4 <watchDiscCback+0x224>)
   13c22:	210d      	movs	r1, #13
   13c24:	4618      	mov	r0, r3
   13c26:	f00a f915 	bl	1de54 <AppDiscSetHdlList>
      }
      else
      {
        AppDiscSetHdlList(connId, WATCH_DISC_SLAVE_HDL_LIST_LEN, watchCb.hdlSlaveList);
      }
      break;
   13c2a:	e0df      	b.n	13dec <watchDiscCback+0x21c>
        AppDiscSetHdlList(connId, WATCH_DISC_SLAVE_HDL_LIST_LEN, watchCb.hdlSlaveList);
   13c2c:	79fb      	ldrb	r3, [r7, #7]
   13c2e:	4a72      	ldr	r2, [pc, #456]	; (13df8 <watchDiscCback+0x228>)
   13c30:	2112      	movs	r1, #18
   13c32:	4618      	mov	r0, r3
   13c34:	f00a f90e 	bl	1de54 <AppDiscSetHdlList>
      break;
   13c38:	e0d8      	b.n	13dec <watchDiscCback+0x21c>

    case APP_DISC_SEC_REQUIRED:
      /* request security */
      if (DmConnRole(connId) == DM_ROLE_MASTER)
   13c3a:	79fb      	ldrb	r3, [r7, #7]
   13c3c:	4618      	mov	r0, r3
   13c3e:	f7fb ffa5 	bl	fb8c <DmConnRole>
   13c42:	4603      	mov	r3, r0
   13c44:	2b00      	cmp	r3, #0
   13c46:	d104      	bne.n	13c52 <watchDiscCback+0x82>
      {
        AppMasterSecurityReq(connId);
   13c48:	79fb      	ldrb	r3, [r7, #7]
   13c4a:	4618      	mov	r0, r3
   13c4c:	f00b f932 	bl	1eeb4 <AppMasterSecurityReq>
      }
      else
      {
        AppSlaveSecurityReq(connId);
      }
      break;
   13c50:	e0cc      	b.n	13dec <watchDiscCback+0x21c>
        AppSlaveSecurityReq(connId);
   13c52:	79fb      	ldrb	r3, [r7, #7]
   13c54:	4618      	mov	r0, r3
   13c56:	f00c fbfb 	bl	20450 <AppSlaveSecurityReq>
      break;
   13c5a:	e0c7      	b.n	13dec <watchDiscCback+0x21c>

    case APP_DISC_START:
      /* initialize discovery state */
      if (DmConnRole(connId) == DM_ROLE_MASTER)
   13c5c:	79fb      	ldrb	r3, [r7, #7]
   13c5e:	4618      	mov	r0, r3
   13c60:	f7fb ff94 	bl	fb8c <DmConnRole>
   13c64:	4603      	mov	r3, r0
   13c66:	2b00      	cmp	r3, #0
   13c68:	d10b      	bne.n	13c82 <watchDiscCback+0xb2>
      {
        /* discover GATT service - master role */
        watchCb.discState = WATCH_DISC_MASTER_GATT_SVC;
   13c6a:	4b62      	ldr	r3, [pc, #392]	; (13df4 <watchDiscCback+0x224>)
   13c6c:	2200      	movs	r2, #0
   13c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        GattDiscover(connId, pWatchMstGattHdlList);
   13c72:	4b62      	ldr	r3, [pc, #392]	; (13dfc <watchDiscCback+0x22c>)
   13c74:	681a      	ldr	r2, [r3, #0]
   13c76:	79fb      	ldrb	r3, [r7, #7]
   13c78:	4611      	mov	r1, r2
   13c7a:	4618      	mov	r0, r3
   13c7c:	f7ff fbd8 	bl	13430 <GattDiscover>
        /* discover GATT service - slave role */
        watchCb.discState = WATCH_DISC_SLAVE_GATT_SVC;
        GattDiscover(connId, pWatchSlvGattHdlList);
      }

      break;
   13c80:	e0b4      	b.n	13dec <watchDiscCback+0x21c>
        watchCb.discState = WATCH_DISC_SLAVE_GATT_SVC;
   13c82:	4b5c      	ldr	r3, [pc, #368]	; (13df4 <watchDiscCback+0x224>)
   13c84:	2200      	movs	r2, #0
   13c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        GattDiscover(connId, pWatchSlvGattHdlList);
   13c8a:	4b5d      	ldr	r3, [pc, #372]	; (13e00 <watchDiscCback+0x230>)
   13c8c:	681a      	ldr	r2, [r3, #0]
   13c8e:	79fb      	ldrb	r3, [r7, #7]
   13c90:	4611      	mov	r1, r2
   13c92:	4618      	mov	r0, r3
   13c94:	f7ff fbcc 	bl	13430 <GattDiscover>
      break;
   13c98:	e0a8      	b.n	13dec <watchDiscCback+0x21c>
      
    case APP_DISC_FAILED:      
    case APP_DISC_CMPL:
      /* next discovery state */
      watchCb.discState++;
   13c9a:	4b56      	ldr	r3, [pc, #344]	; (13df4 <watchDiscCback+0x224>)
   13c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   13ca0:	3301      	adds	r3, #1
   13ca2:	b2da      	uxtb	r2, r3
   13ca4:	4b53      	ldr	r3, [pc, #332]	; (13df4 <watchDiscCback+0x224>)
   13ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      if (DmConnRole(connId) == DM_ROLE_MASTER)
   13caa:	79fb      	ldrb	r3, [r7, #7]
   13cac:	4618      	mov	r0, r3
   13cae:	f7fb ff6d 	bl	fb8c <DmConnRole>
   13cb2:	4603      	mov	r3, r0
   13cb4:	2b00      	cmp	r3, #0
   13cb6:	d129      	bne.n	13d0c <watchDiscCback+0x13c>
      {
        if (watchCb.discState == WATCH_DISC_MASTER_DIS_SVC)
   13cb8:	4b4e      	ldr	r3, [pc, #312]	; (13df4 <watchDiscCback+0x224>)
   13cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   13cbe:	2b01      	cmp	r3, #1
   13cc0:	d107      	bne.n	13cd2 <watchDiscCback+0x102>
        {
          /* discover device information service */
          DisDiscover(connId, pWatchDisHdlList);
   13cc2:	4b50      	ldr	r3, [pc, #320]	; (13e04 <watchDiscCback+0x234>)
   13cc4:	681a      	ldr	r2, [r3, #0]
   13cc6:	79fb      	ldrb	r3, [r7, #7]
   13cc8:	4611      	mov	r1, r2
   13cca:	4618      	mov	r0, r3
   13ccc:	f005 feda 	bl	19a84 <DisDiscover>
          AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_SLAVE_CFG_LIST_LEN,
                           (attcDiscCfg_t *) watchDiscSlaveCfgList, 
                           WATCH_DISC_SLAVE_HDL_LIST_LEN, watchCb.hdlSlaveList);
        }
      }
      break;
   13cd0:	e08c      	b.n	13dec <watchDiscCback+0x21c>
        else if (watchCb.discState == WATCH_DISC_MASTER_HRS_SVC)
   13cd2:	4b48      	ldr	r3, [pc, #288]	; (13df4 <watchDiscCback+0x224>)
   13cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   13cd8:	2b02      	cmp	r3, #2
   13cda:	d107      	bne.n	13cec <watchDiscCback+0x11c>
          HrpcHrsDiscover(connId, pWatchHrsHdlList);
   13cdc:	4b4a      	ldr	r3, [pc, #296]	; (13e08 <watchDiscCback+0x238>)
   13cde:	681a      	ldr	r2, [r3, #0]
   13ce0:	79fb      	ldrb	r3, [r7, #7]
   13ce2:	4611      	mov	r1, r2
   13ce4:	4618      	mov	r0, r3
   13ce6:	f007 f92f 	bl	1af48 <HrpcHrsDiscover>
      break;
   13cea:	e07f      	b.n	13dec <watchDiscCback+0x21c>
          AppDiscComplete(connId, APP_DISC_CMPL);
   13cec:	79fb      	ldrb	r3, [r7, #7]
   13cee:	2103      	movs	r1, #3
   13cf0:	4618      	mov	r0, r3
   13cf2:	f00a f8cb 	bl	1de8c <AppDiscComplete>
          AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_MASTER_CFG_LIST_LEN,
   13cf6:	79f8      	ldrb	r0, [r7, #7]
   13cf8:	4b3e      	ldr	r3, [pc, #248]	; (13df4 <watchDiscCback+0x224>)
   13cfa:	9301      	str	r3, [sp, #4]
   13cfc:	230d      	movs	r3, #13
   13cfe:	9300      	str	r3, [sp, #0]
   13d00:	4b42      	ldr	r3, [pc, #264]	; (13e0c <watchDiscCback+0x23c>)
   13d02:	220a      	movs	r2, #10
   13d04:	2105      	movs	r1, #5
   13d06:	f00a f965 	bl	1dfd4 <AppDiscConfigure>
      break;
   13d0a:	e06f      	b.n	13dec <watchDiscCback+0x21c>
        if (watchCb.discState == WATCH_DISC_SLAVE_CTS_SVC)
   13d0c:	4b39      	ldr	r3, [pc, #228]	; (13df4 <watchDiscCback+0x224>)
   13d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   13d12:	2b01      	cmp	r3, #1
   13d14:	d107      	bne.n	13d26 <watchDiscCback+0x156>
          TipcCtsDiscover(connId, pWatchCtsHdlList);
   13d16:	4b3e      	ldr	r3, [pc, #248]	; (13e10 <watchDiscCback+0x240>)
   13d18:	681a      	ldr	r2, [r3, #0]
   13d1a:	79fb      	ldrb	r3, [r7, #7]
   13d1c:	4611      	mov	r1, r2
   13d1e:	4618      	mov	r0, r3
   13d20:	f004 fddc 	bl	188dc <TipcCtsDiscover>
      break;
   13d24:	e062      	b.n	13dec <watchDiscCback+0x21c>
        else if (watchCb.discState == WATCH_DISC_SLAVE_ANS_SVC)
   13d26:	4b33      	ldr	r3, [pc, #204]	; (13df4 <watchDiscCback+0x224>)
   13d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   13d2c:	2b02      	cmp	r3, #2
   13d2e:	d107      	bne.n	13d40 <watchDiscCback+0x170>
          AnpcAnsDiscover(connId, pWatchAnsHdlList);
   13d30:	4b38      	ldr	r3, [pc, #224]	; (13e14 <watchDiscCback+0x244>)
   13d32:	681a      	ldr	r2, [r3, #0]
   13d34:	79fb      	ldrb	r3, [r7, #7]
   13d36:	4611      	mov	r1, r2
   13d38:	4618      	mov	r0, r3
   13d3a:	f005 f9d9 	bl	190f0 <AnpcAnsDiscover>
      break;
   13d3e:	e055      	b.n	13dec <watchDiscCback+0x21c>
        else if (watchCb.discState == WATCH_DISC_SLAVE_PASS_SVC)
   13d40:	4b2c      	ldr	r3, [pc, #176]	; (13df4 <watchDiscCback+0x224>)
   13d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   13d46:	2b03      	cmp	r3, #3
   13d48:	d107      	bne.n	13d5a <watchDiscCback+0x18a>
          PaspcPassDiscover(connId, pWatchPassHdlList);
   13d4a:	4b33      	ldr	r3, [pc, #204]	; (13e18 <watchDiscCback+0x248>)
   13d4c:	681a      	ldr	r2, [r3, #0]
   13d4e:	79fb      	ldrb	r3, [r7, #7]
   13d50:	4611      	mov	r1, r2
   13d52:	4618      	mov	r0, r3
   13d54:	f006 fbf6 	bl	1a544 <PaspcPassDiscover>
      break;
   13d58:	e048      	b.n	13dec <watchDiscCback+0x21c>
          AppDiscComplete(connId, APP_DISC_CMPL);
   13d5a:	79fb      	ldrb	r3, [r7, #7]
   13d5c:	2103      	movs	r1, #3
   13d5e:	4618      	mov	r0, r3
   13d60:	f00a f894 	bl	1de8c <AppDiscComplete>
          AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_SLAVE_CFG_LIST_LEN,
   13d64:	79f8      	ldrb	r0, [r7, #7]
   13d66:	4b24      	ldr	r3, [pc, #144]	; (13df8 <watchDiscCback+0x228>)
   13d68:	9301      	str	r3, [sp, #4]
   13d6a:	2312      	movs	r3, #18
   13d6c:	9300      	str	r3, [sp, #0]
   13d6e:	4b2b      	ldr	r3, [pc, #172]	; (13e1c <watchDiscCback+0x24c>)
   13d70:	2211      	movs	r2, #17
   13d72:	2105      	movs	r1, #5
   13d74:	f00a f92e 	bl	1dfd4 <AppDiscConfigure>
      break;
   13d78:	e038      	b.n	13dec <watchDiscCback+0x21c>
      
    case APP_DISC_CFG_START:
      if (DmConnRole(connId) == DM_ROLE_MASTER)
   13d7a:	79fb      	ldrb	r3, [r7, #7]
   13d7c:	4618      	mov	r0, r3
   13d7e:	f7fb ff05 	bl	fb8c <DmConnRole>
   13d82:	4603      	mov	r3, r0
   13d84:	2b00      	cmp	r3, #0
   13d86:	d10a      	bne.n	13d9e <watchDiscCback+0x1ce>
      {
        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_MASTER_CFG_LIST_LEN,
   13d88:	79f8      	ldrb	r0, [r7, #7]
   13d8a:	4b1a      	ldr	r3, [pc, #104]	; (13df4 <watchDiscCback+0x224>)
   13d8c:	9301      	str	r3, [sp, #4]
   13d8e:	230d      	movs	r3, #13
   13d90:	9300      	str	r3, [sp, #0]
   13d92:	4b1e      	ldr	r3, [pc, #120]	; (13e0c <watchDiscCback+0x23c>)
   13d94:	220a      	movs	r2, #10
   13d96:	2105      	movs	r1, #5
   13d98:	f00a f91c 	bl	1dfd4 <AppDiscConfigure>
        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_SLAVE_CFG_LIST_LEN,
                         (attcDiscCfg_t *) watchDiscSlaveCfgList, 
                         WATCH_DISC_SLAVE_HDL_LIST_LEN, watchCb.hdlSlaveList);
      }
      break;
   13d9c:	e026      	b.n	13dec <watchDiscCback+0x21c>
        AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_SLAVE_CFG_LIST_LEN,
   13d9e:	79f8      	ldrb	r0, [r7, #7]
   13da0:	4b15      	ldr	r3, [pc, #84]	; (13df8 <watchDiscCback+0x228>)
   13da2:	9301      	str	r3, [sp, #4]
   13da4:	2312      	movs	r3, #18
   13da6:	9300      	str	r3, [sp, #0]
   13da8:	4b1c      	ldr	r3, [pc, #112]	; (13e1c <watchDiscCback+0x24c>)
   13daa:	2211      	movs	r2, #17
   13dac:	2105      	movs	r1, #5
   13dae:	f00a f911 	bl	1dfd4 <AppDiscConfigure>
      break;
   13db2:	e01b      	b.n	13dec <watchDiscCback+0x21c>
      
    case APP_DISC_CFG_CMPL: 
      AppDiscComplete(connId, status);
   13db4:	79ba      	ldrb	r2, [r7, #6]
   13db6:	79fb      	ldrb	r3, [r7, #7]
   13db8:	4611      	mov	r1, r2
   13dba:	4618      	mov	r0, r3
   13dbc:	f00a f866 	bl	1de8c <AppDiscComplete>
      break;
   13dc0:	e014      	b.n	13dec <watchDiscCback+0x21c>

    case APP_DISC_CFG_CONN_START:
      if (DmConnRole(connId) == DM_ROLE_SLAVE)
   13dc2:	79fb      	ldrb	r3, [r7, #7]
   13dc4:	4618      	mov	r0, r3
   13dc6:	f7fb fee1 	bl	fb8c <DmConnRole>
   13dca:	4603      	mov	r3, r0
   13dcc:	2b01      	cmp	r3, #1
   13dce:	d10c      	bne.n	13dea <watchDiscCback+0x21a>
      {
        /* start connection setup configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_CONN_START, WATCH_DISC_CONN_CFG_LIST_LEN,
   13dd0:	79f8      	ldrb	r0, [r7, #7]
   13dd2:	4b09      	ldr	r3, [pc, #36]	; (13df8 <watchDiscCback+0x228>)
   13dd4:	9301      	str	r3, [sp, #4]
   13dd6:	2307      	movs	r3, #7
   13dd8:	9300      	str	r3, [sp, #0]
   13dda:	4b11      	ldr	r3, [pc, #68]	; (13e20 <watchDiscCback+0x250>)
   13ddc:	2207      	movs	r2, #7
   13dde:	2106      	movs	r1, #6
   13de0:	f00a f8f8 	bl	1dfd4 <AppDiscConfigure>
                         (attcDiscCfg_t *) watchDiscConnCfgList, 
                         WATCH_DISC_CONN_CFG_LIST_LEN, watchCb.hdlSlaveList);
      }
      break;
   13de4:	e001      	b.n	13dea <watchDiscCback+0x21a>
      
    default:
      break;
   13de6:	bf00      	nop
   13de8:	e000      	b.n	13dec <watchDiscCback+0x21c>
      break;
   13dea:	bf00      	nop
  }
}
   13dec:	bf00      	nop
   13dee:	3708      	adds	r7, #8
   13df0:	46bd      	mov	sp, r7
   13df2:	bd80      	pop	{r7, pc}
   13df4:	1000418c 	.word	0x1000418c
   13df8:	100041b4 	.word	0x100041b4
   13dfc:	10002ba4 	.word	0x10002ba4
   13e00:	10002b94 	.word	0x10002b94
   13e04:	10002ba8 	.word	0x10002ba8
   13e08:	10002bac 	.word	0x10002bac
   13e0c:	00026a88 	.word	0x00026a88
   13e10:	10002b98 	.word	0x10002b98
   13e14:	10002b9c 	.word	0x10002b9c
   13e18:	10002ba0 	.word	0x10002ba0
   13e1c:	00026a00 	.word	0x00026a00
   13e20:	00026ad8 	.word	0x00026ad8

00013e24 <watchProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchProcMsg(dmEvt_t *pMsg)
{
   13e24:	b580      	push	{r7, lr}
   13e26:	b084      	sub	sp, #16
   13e28:	af00      	add	r7, sp, #0
   13e2a:	6078      	str	r0, [r7, #4]
  uint8_t uiEvent = APP_UI_NONE;
   13e2c:	2300      	movs	r3, #0
   13e2e:	73fb      	strb	r3, [r7, #15]
  
  switch(pMsg->hdr.event)
   13e30:	687b      	ldr	r3, [r7, #4]
   13e32:	789b      	ldrb	r3, [r3, #2]
   13e34:	3b05      	subs	r3, #5
   13e36:	2b4f      	cmp	r3, #79	; 0x4f
   13e38:	f200 8108 	bhi.w	1404c <watchProcMsg+0x228>
   13e3c:	a201      	add	r2, pc, #4	; (adr r2, 13e44 <watchProcMsg+0x20>)
   13e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e42:	bf00      	nop
   13e44:	00013f85 	.word	0x00013f85
   13e48:	0001404d 	.word	0x0001404d
   13e4c:	0001404d 	.word	0x0001404d
   13e50:	0001404d 	.word	0x0001404d
   13e54:	0001404d 	.word	0x0001404d
   13e58:	0001404d 	.word	0x0001404d
   13e5c:	0001404d 	.word	0x0001404d
   13e60:	0001404d 	.word	0x0001404d
   13e64:	00013f85 	.word	0x00013f85
   13e68:	00013f85 	.word	0x00013f85
   13e6c:	0001404d 	.word	0x0001404d
   13e70:	0001404d 	.word	0x0001404d
   13e74:	00013fa7 	.word	0x00013fa7
   13e78:	0001404d 	.word	0x0001404d
   13e7c:	0001404d 	.word	0x0001404d
   13e80:	0001404d 	.word	0x0001404d
   13e84:	0001404d 	.word	0x0001404d
   13e88:	0001404d 	.word	0x0001404d
   13e8c:	0001404d 	.word	0x0001404d
   13e90:	0001404d 	.word	0x0001404d
   13e94:	0001404d 	.word	0x0001404d
   13e98:	0001404d 	.word	0x0001404d
   13e9c:	0001404d 	.word	0x0001404d
   13ea0:	0001404d 	.word	0x0001404d
   13ea4:	0001404d 	.word	0x0001404d
   13ea8:	0001404d 	.word	0x0001404d
   13eac:	0001404d 	.word	0x0001404d
   13eb0:	00013fb5 	.word	0x00013fb5
   13eb4:	00013fbf 	.word	0x00013fbf
   13eb8:	00013fc5 	.word	0x00013fc5
   13ebc:	0001404d 	.word	0x0001404d
   13ec0:	00013feb 	.word	0x00013feb
   13ec4:	00013ff7 	.word	0x00013ff7
   13ec8:	00014003 	.word	0x00014003
   13ecc:	0001400b 	.word	0x0001400b
   13ed0:	00014017 	.word	0x00014017
   13ed4:	0001404d 	.word	0x0001404d
   13ed8:	0001402b 	.word	0x0001402b
   13edc:	00014031 	.word	0x00014031
   13ee0:	00014037 	.word	0x00014037
   13ee4:	0001403d 	.word	0x0001403d
   13ee8:	00014043 	.word	0x00014043
   13eec:	0001404d 	.word	0x0001404d
   13ef0:	0001404d 	.word	0x0001404d
   13ef4:	0001404d 	.word	0x0001404d
   13ef8:	0001404d 	.word	0x0001404d
   13efc:	0001404d 	.word	0x0001404d
   13f00:	0001404d 	.word	0x0001404d
   13f04:	0001404d 	.word	0x0001404d
   13f08:	0001404d 	.word	0x0001404d
   13f0c:	0001404d 	.word	0x0001404d
   13f10:	0001404d 	.word	0x0001404d
   13f14:	0001404d 	.word	0x0001404d
   13f18:	0001404d 	.word	0x0001404d
   13f1c:	0001404d 	.word	0x0001404d
   13f20:	0001404d 	.word	0x0001404d
   13f24:	0001404d 	.word	0x0001404d
   13f28:	0001404d 	.word	0x0001404d
   13f2c:	0001404d 	.word	0x0001404d
   13f30:	0001404d 	.word	0x0001404d
   13f34:	0001404d 	.word	0x0001404d
   13f38:	0001404d 	.word	0x0001404d
   13f3c:	0001404d 	.word	0x0001404d
   13f40:	0001404d 	.word	0x0001404d
   13f44:	0001404d 	.word	0x0001404d
   13f48:	0001404d 	.word	0x0001404d
   13f4c:	0001404d 	.word	0x0001404d
   13f50:	0001404d 	.word	0x0001404d
   13f54:	0001404d 	.word	0x0001404d
   13f58:	0001404d 	.word	0x0001404d
   13f5c:	0001404d 	.word	0x0001404d
   13f60:	0001404d 	.word	0x0001404d
   13f64:	0001404d 	.word	0x0001404d
   13f68:	0001404d 	.word	0x0001404d
   13f6c:	0001404d 	.word	0x0001404d
   13f70:	0001404d 	.word	0x0001404d
   13f74:	0001404d 	.word	0x0001404d
   13f78:	0001404d 	.word	0x0001404d
   13f7c:	0001404d 	.word	0x0001404d
   13f80:	0001404d 	.word	0x0001404d
  {
    case ATTC_READ_RSP:
    case ATTC_HANDLE_VALUE_NTF:
    case ATTC_HANDLE_VALUE_IND:
      if (DmConnRole((dmConnId_t) pMsg->hdr.param) == DM_ROLE_MASTER)
   13f84:	687b      	ldr	r3, [r7, #4]
   13f86:	881b      	ldrh	r3, [r3, #0]
   13f88:	b2db      	uxtb	r3, r3
   13f8a:	4618      	mov	r0, r3
   13f8c:	f7fb fdfe 	bl	fb8c <DmConnRole>
   13f90:	4603      	mov	r3, r0
   13f92:	2b00      	cmp	r3, #0
   13f94:	d103      	bne.n	13f9e <watchProcMsg+0x17a>
      {
        watchMasterValueUpdate((attEvt_t *) pMsg);
   13f96:	6878      	ldr	r0, [r7, #4]
   13f98:	f7ff fd16 	bl	139c8 <watchMasterValueUpdate>
      }
      else
      {
        watchSlaveValueUpdate((attEvt_t *) pMsg);
      }
      break;
   13f9c:	e057      	b.n	1404e <watchProcMsg+0x22a>
        watchSlaveValueUpdate((attEvt_t *) pMsg);
   13f9e:	6878      	ldr	r0, [r7, #4]
   13fa0:	f7ff fcd6 	bl	13950 <watchSlaveValueUpdate>
      break;
   13fa4:	e053      	b.n	1404e <watchProcMsg+0x22a>

    case ATT_MTU_UPDATE_IND:
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	89db      	ldrh	r3, [r3, #14]
   13faa:	4619      	mov	r1, r3
   13fac:	482d      	ldr	r0, [pc, #180]	; (14064 <watchProcMsg+0x240>)
   13fae:	f007 fc7f 	bl	1b8b0 <WsfTrace>
      break;  
   13fb2:	e04c      	b.n	1404e <watchProcMsg+0x22a>
      
    case DM_RESET_CMPL_IND:
      DmSecGenerateEccKeyReq();
   13fb4:	f7fc fc80 	bl	108b8 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_RESET_CMPL;
   13fb8:	2301      	movs	r3, #1
   13fba:	73fb      	strb	r3, [r7, #15]
      break;
   13fbc:	e047      	b.n	1404e <watchProcMsg+0x22a>

    case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   13fbe:	2303      	movs	r3, #3
   13fc0:	73fb      	strb	r3, [r7, #15]
      break;
   13fc2:	e044      	b.n	1404e <watchProcMsg+0x22a>
         
    case DM_ADV_STOP_IND:
      if(watchCb.scan_state == WATCH_SCAN_START)
   13fc4:	4b28      	ldr	r3, [pc, #160]	; (14068 <watchProcMsg+0x244>)
   13fc6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   13fca:	2b01      	cmp	r3, #1
   13fcc:	d107      	bne.n	13fde <watchProcMsg+0x1ba>
      {
          AppScanStart(watchMasterCfg.discMode, watchMasterCfg.scanType,
   13fce:	2300      	movs	r3, #0
   13fd0:	2101      	movs	r1, #1
   13fd2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   13fd6:	4618      	mov	r0, r3
   13fd8:	f00b f810 	bl	1effc <AppScanStart>
      else
      {
          AppAdvStart(APP_MODE_AUTO_INIT);
          uiEvent = APP_UI_ADV_STOP;
      }
      break;
   13fdc:	e037      	b.n	1404e <watchProcMsg+0x22a>
          AppAdvStart(APP_MODE_AUTO_INIT);
   13fde:	2002      	movs	r0, #2
   13fe0:	f00c fb52 	bl	20688 <AppAdvStart>
          uiEvent = APP_UI_ADV_STOP;
   13fe4:	2304      	movs	r3, #4
   13fe6:	73fb      	strb	r3, [r7, #15]
      break;
   13fe8:	e031      	b.n	1404e <watchProcMsg+0x22a>
   
    case DM_SCAN_START_IND:
      watchScanStart(pMsg);
   13fea:	6878      	ldr	r0, [r7, #4]
   13fec:	f7ff face 	bl	1358c <watchScanStart>
      uiEvent = APP_UI_SCAN_START;
   13ff0:	2305      	movs	r3, #5
   13ff2:	73fb      	strb	r3, [r7, #15]
      break;
   13ff4:	e02b      	b.n	1404e <watchProcMsg+0x22a>
         
    case DM_SCAN_STOP_IND:
      watchScanStop(pMsg);
   13ff6:	6878      	ldr	r0, [r7, #4]
   13ff8:	f7ff fae2 	bl	135c0 <watchScanStop>
      uiEvent = APP_UI_SCAN_STOP;
   13ffc:	2306      	movs	r3, #6
   13ffe:	73fb      	strb	r3, [r7, #15]
      break;
   14000:	e025      	b.n	1404e <watchProcMsg+0x22a>

    case DM_SCAN_REPORT_IND:
      watchScanReport(pMsg);
   14002:	6878      	ldr	r0, [r7, #4]
   14004:	f7ff fb0a 	bl	1361c <watchScanReport>
      break;
   14008:	e021      	b.n	1404e <watchProcMsg+0x22a>
      
    case DM_CONN_OPEN_IND:
      watchOpen(pMsg);
   1400a:	6878      	ldr	r0, [r7, #4]
   1400c:	f7ff fc56 	bl	138bc <watchOpen>
      uiEvent = APP_UI_CONN_OPEN;
   14010:	2308      	movs	r3, #8
   14012:	73fb      	strb	r3, [r7, #15]
      break;
   14014:	e01b      	b.n	1404e <watchProcMsg+0x22a>
         
    case DM_CONN_CLOSE_IND:
      // only when the connection we as slave is closed
      if (pMsg->connOpen.role == DM_ROLE_SLAVE)
   14016:	687b      	ldr	r3, [r7, #4]
   14018:	7a1b      	ldrb	r3, [r3, #8]
   1401a:	2b01      	cmp	r3, #1
   1401c:	d102      	bne.n	14024 <watchProcMsg+0x200>
      {
        AppAdvStart(APP_MODE_AUTO_INIT);
   1401e:	2002      	movs	r0, #2
   14020:	f00c fb32 	bl	20688 <AppAdvStart>
      }
      uiEvent = APP_UI_CONN_CLOSE;
   14024:	2309      	movs	r3, #9
   14026:	73fb      	strb	r3, [r7, #15]
      break;
   14028:	e011      	b.n	1404e <watchProcMsg+0x22a>
       
    case DM_SEC_PAIR_CMPL_IND:
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   1402a:	230a      	movs	r3, #10
   1402c:	73fb      	strb	r3, [r7, #15]
      break;
   1402e:	e00e      	b.n	1404e <watchProcMsg+0x22a>
     
    case DM_SEC_PAIR_FAIL_IND:
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   14030:	230b      	movs	r3, #11
   14032:	73fb      	strb	r3, [r7, #15]
      break;
   14034:	e00b      	b.n	1404e <watchProcMsg+0x22a>
     
    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   14036:	230c      	movs	r3, #12
   14038:	73fb      	strb	r3, [r7, #15]
      break;
   1403a:	e008      	b.n	1404e <watchProcMsg+0x22a>
       
    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   1403c:	230d      	movs	r3, #13
   1403e:	73fb      	strb	r3, [r7, #15]
      break;
   14040:	e005      	b.n	1404e <watchProcMsg+0x22a>

    case DM_SEC_AUTH_REQ_IND:
      AppHandlePasskey(&pMsg->authReq);
   14042:	687b      	ldr	r3, [r7, #4]
   14044:	4618      	mov	r0, r3
   14046:	f00a f979 	bl	1e33c <AppHandlePasskey>
      break;
   1404a:	e000      	b.n	1404e <watchProcMsg+0x22a>
        #endif
      }
      break;

    default:
      break;
   1404c:	bf00      	nop
  }
  
  if (uiEvent != APP_UI_NONE)
   1404e:	7bfb      	ldrb	r3, [r7, #15]
   14050:	2b00      	cmp	r3, #0
   14052:	d003      	beq.n	1405c <watchProcMsg+0x238>
  {
    AppUiAction(uiEvent);
   14054:	7bfb      	ldrb	r3, [r7, #15]
   14056:	4618      	mov	r0, r3
   14058:	f005 fc16 	bl	19888 <AppUiAction>
  }
}
   1405c:	bf00      	nop
   1405e:	3710      	adds	r7, #16
   14060:	46bd      	mov	sp, r7
   14062:	bd80      	pop	{r7, pc}
   14064:	00025290 	.word	0x00025290
   14068:	1000418c 	.word	0x1000418c

0001406c <WatchHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WatchHandlerInit(wsfHandlerId_t handlerId)
{
   1406c:	b580      	push	{r7, lr}
   1406e:	b082      	sub	sp, #8
   14070:	af00      	add	r7, sp, #0
   14072:	4603      	mov	r3, r0
   14074:	71fb      	strb	r3, [r7, #7]
  APP_TRACE_INFO0("WatchHandlerInit");
   14076:	4814      	ldr	r0, [pc, #80]	; (140c8 <WatchHandlerInit+0x5c>)
   14078:	f007 fc1a 	bl	1b8b0 <WsfTrace>
  
  /* store handler ID */
  watchCb.handlerId = handlerId;
   1407c:	4a13      	ldr	r2, [pc, #76]	; (140cc <WatchHandlerInit+0x60>)
   1407e:	79fb      	ldrb	r3, [r7, #7]
   14080:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  
  /* Set configuration pointers */
  pAppMasterCfg = (appMasterCfg_t *) &watchMasterCfg;
   14084:	4b12      	ldr	r3, [pc, #72]	; (140d0 <WatchHandlerInit+0x64>)
   14086:	4a13      	ldr	r2, [pc, #76]	; (140d4 <WatchHandlerInit+0x68>)
   14088:	601a      	str	r2, [r3, #0]
  pAppSlaveCfg = (appSlaveCfg_t *) &watchSlaveCfg;
   1408a:	4b13      	ldr	r3, [pc, #76]	; (140d8 <WatchHandlerInit+0x6c>)
   1408c:	4a13      	ldr	r2, [pc, #76]	; (140dc <WatchHandlerInit+0x70>)
   1408e:	601a      	str	r2, [r3, #0]
  pAppAdvCfg = (appAdvCfg_t *) &watchAdvCfg;
   14090:	4b13      	ldr	r3, [pc, #76]	; (140e0 <WatchHandlerInit+0x74>)
   14092:	4a14      	ldr	r2, [pc, #80]	; (140e4 <WatchHandlerInit+0x78>)
   14094:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &watchSecCfg;
   14096:	4b14      	ldr	r3, [pc, #80]	; (140e8 <WatchHandlerInit+0x7c>)
   14098:	4a14      	ldr	r2, [pc, #80]	; (140ec <WatchHandlerInit+0x80>)
   1409a:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &watchUpdateCfg;
   1409c:	4b14      	ldr	r3, [pc, #80]	; (140f0 <WatchHandlerInit+0x84>)
   1409e:	4a15      	ldr	r2, [pc, #84]	; (140f4 <WatchHandlerInit+0x88>)
   140a0:	601a      	str	r2, [r3, #0]
  pAppDiscCfg = (appDiscCfg_t *) &watchDiscCfg;
   140a2:	4b15      	ldr	r3, [pc, #84]	; (140f8 <WatchHandlerInit+0x8c>)
   140a4:	4a15      	ldr	r2, [pc, #84]	; (140fc <WatchHandlerInit+0x90>)
   140a6:	601a      	str	r2, [r3, #0]
  pAppCfg = (appCfg_t *) &watchAppCfg;
   140a8:	4b15      	ldr	r3, [pc, #84]	; (14100 <WatchHandlerInit+0x94>)
   140aa:	4a16      	ldr	r2, [pc, #88]	; (14104 <WatchHandlerInit+0x98>)
   140ac:	601a      	str	r2, [r3, #0]

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *) &watchSmpCfg;
   140ae:	4b16      	ldr	r3, [pc, #88]	; (14108 <WatchHandlerInit+0x9c>)
   140b0:	4a16      	ldr	r2, [pc, #88]	; (1410c <WatchHandlerInit+0xa0>)
   140b2:	601a      	str	r2, [r3, #0]
  
  /* Initialize application framework */
  AppMasterInit();
   140b4:	f00a fd64 	bl	1eb80 <AppMasterInit>
  AppSlaveInit();
   140b8:	f00b fe9a 	bl	1fdf0 <AppSlaveInit>
  AppDiscInit();
   140bc:	f009 fe98 	bl	1ddf0 <AppDiscInit>
}
   140c0:	bf00      	nop
   140c2:	3708      	adds	r7, #8
   140c4:	46bd      	mov	sp, r7
   140c6:	bd80      	pop	{r7, pc}
   140c8:	000252a4 	.word	0x000252a4
   140cc:	1000418c 	.word	0x1000418c
   140d0:	10009eb4 	.word	0x10009eb4
   140d4:	000269c0 	.word	0x000269c0
   140d8:	10009ebc 	.word	0x10009ebc
   140dc:	00026988 	.word	0x00026988
   140e0:	10009ee0 	.word	0x10009ee0
   140e4:	0002697c 	.word	0x0002697c
   140e8:	10009ed4 	.word	0x10009ed4
   140ec:	0002698c 	.word	0x0002698c
   140f0:	10009eb8 	.word	0x10009eb8
   140f4:	00026994 	.word	0x00026994
   140f8:	10009ec8 	.word	0x10009ec8
   140fc:	000269b8 	.word	0x000269b8
   14100:	10009ed8 	.word	0x10009ed8
   14104:	000269bc 	.word	0x000269bc
   14108:	10002b88 	.word	0x10002b88
   1410c:	000269b0 	.word	0x000269b0

00014110 <WatchHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WatchHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{ 
   14110:	b580      	push	{r7, lr}
   14112:	b082      	sub	sp, #8
   14114:	af00      	add	r7, sp, #0
   14116:	4603      	mov	r3, r0
   14118:	6039      	str	r1, [r7, #0]
   1411a:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1411c:	683b      	ldr	r3, [r7, #0]
   1411e:	2b00      	cmp	r3, #0
   14120:	d03d      	beq.n	1419e <WatchHandler+0x8e>
  {
    APP_TRACE_INFO1("Watch got evt %d", pMsg->event);
   14122:	683b      	ldr	r3, [r7, #0]
   14124:	789b      	ldrb	r3, [r3, #2]
   14126:	4619      	mov	r1, r3
   14128:	481f      	ldr	r0, [pc, #124]	; (141a8 <WatchHandler+0x98>)
   1412a:	f007 fbc1 	bl	1b8b0 <WsfTrace>

    /* process ATT messages */
    if (pMsg->event <= ATT_CBACK_END)
   1412e:	683b      	ldr	r3, [r7, #0]
   14130:	789b      	ldrb	r3, [r3, #2]
   14132:	2b11      	cmp	r3, #17
   14134:	d803      	bhi.n	1413e <WatchHandler+0x2e>
    {
      /* process discovery-related ATT messages */
      AppDiscProcAttMsg((attEvt_t *) pMsg);
   14136:	6838      	ldr	r0, [r7, #0]
   14138:	f009 fd8e 	bl	1dc58 <AppDiscProcAttMsg>
   1413c:	e02c      	b.n	14198 <WatchHandler+0x88>
    }
    /* process DM messages */
    else if (pMsg->event <= DM_CBACK_END)
   1413e:	683b      	ldr	r3, [r7, #0]
   14140:	789b      	ldrb	r3, [r3, #2]
   14142:	2b55      	cmp	r3, #85	; 0x55
   14144:	d828      	bhi.n	14198 <WatchHandler+0x88>
    {
      if (pMsg->param == DM_CONN_ID_NONE || DmConnRole((dmConnId_t) pMsg->param) == DM_ROLE_MASTER)
   14146:	683b      	ldr	r3, [r7, #0]
   14148:	881b      	ldrh	r3, [r3, #0]
   1414a:	2b00      	cmp	r3, #0
   1414c:	d008      	beq.n	14160 <WatchHandler+0x50>
   1414e:	683b      	ldr	r3, [r7, #0]
   14150:	881b      	ldrh	r3, [r3, #0]
   14152:	b2db      	uxtb	r3, r3
   14154:	4618      	mov	r0, r3
   14156:	f7fb fd19 	bl	fb8c <DmConnRole>
   1415a:	4603      	mov	r3, r0
   1415c:	2b00      	cmp	r3, #0
   1415e:	d105      	bne.n	1416c <WatchHandler+0x5c>
      {
        /* process advertising and connection-related messages */
        AppMasterProcDmMsg((dmEvt_t *) pMsg);
   14160:	6838      	ldr	r0, [r7, #0]
   14162:	f00a fd25 	bl	1ebb0 <AppMasterProcDmMsg>
      
        /* process security-related messages */
        AppMasterSecProcDmMsg((dmEvt_t *) pMsg);
   14166:	6838      	ldr	r0, [r7, #0]
   14168:	f00a fdb2 	bl	1ecd0 <AppMasterSecProcDmMsg>
      }

      if (pMsg->param == DM_CONN_ID_NONE || DmConnRole((dmConnId_t) pMsg->param) == DM_ROLE_SLAVE)
   1416c:	683b      	ldr	r3, [r7, #0]
   1416e:	881b      	ldrh	r3, [r3, #0]
   14170:	2b00      	cmp	r3, #0
   14172:	d008      	beq.n	14186 <WatchHandler+0x76>
   14174:	683b      	ldr	r3, [r7, #0]
   14176:	881b      	ldrh	r3, [r3, #0]
   14178:	b2db      	uxtb	r3, r3
   1417a:	4618      	mov	r0, r3
   1417c:	f7fb fd06 	bl	fb8c <DmConnRole>
   14180:	4603      	mov	r3, r0
   14182:	2b01      	cmp	r3, #1
   14184:	d105      	bne.n	14192 <WatchHandler+0x82>
      {
        /* process advertising and connection-related messages */
        AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   14186:	6838      	ldr	r0, [r7, #0]
   14188:	f00b fe72 	bl	1fe70 <AppSlaveProcDmMsg>
      
        /* process security-related messages */
        AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   1418c:	6838      	ldr	r0, [r7, #0]
   1418e:	f00c f8b5 	bl	202fc <AppSlaveSecProcDmMsg>
      }

      /* process discovery-related messages */
      AppDiscProcDmMsg((dmEvt_t *) pMsg);
   14192:	6838      	ldr	r0, [r7, #0]
   14194:	f009 fd32 	bl	1dbfc <AppDiscProcDmMsg>
    }
          
    /* perform profile and user interface-related operations */
    watchProcMsg((dmEvt_t *) pMsg);    
   14198:	6838      	ldr	r0, [r7, #0]
   1419a:	f7ff fe43 	bl	13e24 <watchProcMsg>
  }
}
   1419e:	bf00      	nop
   141a0:	3708      	adds	r7, #8
   141a2:	46bd      	mov	sp, r7
   141a4:	bd80      	pop	{r7, pc}
   141a6:	bf00      	nop
   141a8:	000252b8 	.word	0x000252b8

000141ac <WatchStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WatchStart(void)
{  
   141ac:	b580      	push	{r7, lr}
   141ae:	af00      	add	r7, sp, #0
  /* Register for stack callbacks */
  DmRegister(watchDmCback);
   141b0:	480e      	ldr	r0, [pc, #56]	; (141ec <WatchStart+0x40>)
   141b2:	f7fb fe55 	bl	fe60 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, watchDmCback);
   141b6:	490d      	ldr	r1, [pc, #52]	; (141ec <WatchStart+0x40>)
   141b8:	2003      	movs	r0, #3
   141ba:	f7fb fb45 	bl	f848 <DmConnRegister>
  AttRegister(watchAttCback);
   141be:	480c      	ldr	r0, [pc, #48]	; (141f0 <WatchStart+0x44>)
   141c0:	f7f8 fa54 	bl	c66c <AttRegister>
  AttConnRegister(AppServerConnCback);  
   141c4:	480b      	ldr	r0, [pc, #44]	; (141f4 <WatchStart+0x48>)
   141c6:	f7f8 fa6b 	bl	c6a0 <AttConnRegister>
  AttsCccRegister(WATCH_NUM_CCC_IDX, (attsCccSet_t *) watchCccSet, watchCccCback);
   141ca:	4a0b      	ldr	r2, [pc, #44]	; (141f8 <WatchStart+0x4c>)
   141cc:	490b      	ldr	r1, [pc, #44]	; (141fc <WatchStart+0x50>)
   141ce:	2001      	movs	r0, #1
   141d0:	f7f9 fa4c 	bl	d66c <AttsCccRegister>
  
  /* Register for app framework button callbacks */
  AppUiBtnRegister(watchBtnCback);
   141d4:	480a      	ldr	r0, [pc, #40]	; (14200 <WatchStart+0x54>)
   141d6:	f005 fc0d 	bl	199f4 <AppUiBtnRegister>

  /* Register for app framework discovery callbacks */
  AppDiscRegister(watchDiscCback);
   141da:	480a      	ldr	r0, [pc, #40]	; (14204 <WatchStart+0x58>)
   141dc:	f009 fe2a 	bl	1de34 <AppDiscRegister>
  
  /* Initialize attribute server database */
  SvcCoreAddGroup();
   141e0:	f007 fb92 	bl	1b908 <SvcCoreAddGroup>

  /* Reset the device */
  DmDevReset();  
   141e4:	f7fb fddc 	bl	fda0 <DmDevReset>
}
   141e8:	bf00      	nop
   141ea:	bd80      	pop	{r7, pc}
   141ec:	00013491 	.word	0x00013491
   141f0:	0001352d 	.word	0x0001352d
   141f4:	0001f0f5 	.word	0x0001f0f5
   141f8:	00013855 	.word	0x00013855
   141fc:	00026b10 	.word	0x00026b10
   14200:	00013a81 	.word	0x00013a81
   14204:	00013bd1 	.word	0x00013bd1

00014208 <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   14208:	b580      	push	{r7, lr}
   1420a:	b084      	sub	sp, #16
   1420c:	af00      	add	r7, sp, #0
   1420e:	4603      	mov	r3, r0
   14210:	460a      	mov	r2, r1
   14212:	80fb      	strh	r3, [r7, #6]
   14214:	4613      	mov	r3, r2
   14216:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   14218:	88bb      	ldrh	r3, [r7, #4]
   1421a:	3303      	adds	r3, #3
   1421c:	b29b      	uxth	r3, r3
   1421e:	4618      	mov	r0, r3
   14220:	f006 fb85 	bl	1a92e <WsfMsgAlloc>
   14224:	60f8      	str	r0, [r7, #12]
   14226:	68fb      	ldr	r3, [r7, #12]
   14228:	2b00      	cmp	r3, #0
   1422a:	d016      	beq.n	1425a <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   1422c:	68fb      	ldr	r3, [r7, #12]
   1422e:	1c5a      	adds	r2, r3, #1
   14230:	60fa      	str	r2, [r7, #12]
   14232:	88fa      	ldrh	r2, [r7, #6]
   14234:	b2d2      	uxtb	r2, r2
   14236:	701a      	strb	r2, [r3, #0]
   14238:	68fb      	ldr	r3, [r7, #12]
   1423a:	1c5a      	adds	r2, r3, #1
   1423c:	60fa      	str	r2, [r7, #12]
   1423e:	88fa      	ldrh	r2, [r7, #6]
   14240:	0a12      	lsrs	r2, r2, #8
   14242:	b292      	uxth	r2, r2
   14244:	b2d2      	uxtb	r2, r2
   14246:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   14248:	68fb      	ldr	r3, [r7, #12]
   1424a:	1c5a      	adds	r2, r3, #1
   1424c:	60fa      	str	r2, [r7, #12]
   1424e:	88ba      	ldrh	r2, [r7, #4]
   14250:	b2d2      	uxtb	r2, r2
   14252:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   14254:	68fb      	ldr	r3, [r7, #12]
   14256:	3b03      	subs	r3, #3
   14258:	60fb      	str	r3, [r7, #12]
  }

  return p;
   1425a:	68fb      	ldr	r3, [r7, #12]
}
   1425c:	4618      	mov	r0, r3
   1425e:	3710      	adds	r7, #16
   14260:	46bd      	mov	sp, r7
   14262:	bd80      	pop	{r7, pc}

00014264 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   14264:	b580      	push	{r7, lr}
   14266:	b084      	sub	sp, #16
   14268:	af00      	add	r7, sp, #0
   1426a:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   1426c:	687b      	ldr	r3, [r7, #4]
   1426e:	2b00      	cmp	r3, #0
   14270:	d004      	beq.n	1427c <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   14272:	687a      	ldr	r2, [r7, #4]
   14274:	2100      	movs	r1, #0
   14276:	4817      	ldr	r0, [pc, #92]	; (142d4 <hciCmdSend+0x70>)
   14278:	f006 fb95 	bl	1a9a6 <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   1427c:	4b16      	ldr	r3, [pc, #88]	; (142d8 <hciCmdSend+0x74>)
   1427e:	7e9b      	ldrb	r3, [r3, #26]
   14280:	2b00      	cmp	r3, #0
   14282:	d023      	beq.n	142cc <hciCmdSend+0x68>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   14284:	f107 030b 	add.w	r3, r7, #11
   14288:	4619      	mov	r1, r3
   1428a:	4812      	ldr	r0, [pc, #72]	; (142d4 <hciCmdSend+0x70>)
   1428c:	f006 fba0 	bl	1a9d0 <WsfMsgDeq>
   14290:	60f8      	str	r0, [r7, #12]
   14292:	68fb      	ldr	r3, [r7, #12]
   14294:	2b00      	cmp	r3, #0
   14296:	d019      	beq.n	142cc <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   14298:	4b0f      	ldr	r3, [pc, #60]	; (142d8 <hciCmdSend+0x74>)
   1429a:	7e9b      	ldrb	r3, [r3, #26]
   1429c:	3b01      	subs	r3, #1
   1429e:	b2da      	uxtb	r2, r3
   142a0:	4b0d      	ldr	r3, [pc, #52]	; (142d8 <hciCmdSend+0x74>)
   142a2:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   142a4:	68fb      	ldr	r3, [r7, #12]
   142a6:	781b      	ldrb	r3, [r3, #0]
   142a8:	b29a      	uxth	r2, r3
   142aa:	68fb      	ldr	r3, [r7, #12]
   142ac:	3301      	adds	r3, #1
   142ae:	781b      	ldrb	r3, [r3, #0]
   142b0:	b29b      	uxth	r3, r3
   142b2:	021b      	lsls	r3, r3, #8
   142b4:	b29b      	uxth	r3, r3
   142b6:	4413      	add	r3, r2
   142b8:	b29a      	uxth	r2, r3
   142ba:	4b07      	ldr	r3, [pc, #28]	; (142d8 <hciCmdSend+0x74>)
   142bc:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   142be:	210a      	movs	r1, #10
   142c0:	4805      	ldr	r0, [pc, #20]	; (142d8 <hciCmdSend+0x74>)
   142c2:	f006 fced 	bl	1aca0 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   142c6:	68f8      	ldr	r0, [r7, #12]
   142c8:	f003 fc09 	bl	17ade <hciTrSendCmd>
    }
  }
}
   142cc:	bf00      	nop
   142ce:	3710      	adds	r7, #16
   142d0:	46bd      	mov	sp, r7
   142d2:	bd80      	pop	{r7, pc}
   142d4:	10009378 	.word	0x10009378
   142d8:	10009368 	.word	0x10009368

000142dc <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
   142dc:	b480      	push	{r7}
   142de:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   142e0:	4b0a      	ldr	r3, [pc, #40]	; (1430c <hciCmdInit+0x30>)
   142e2:	2200      	movs	r2, #0
   142e4:	611a      	str	r2, [r3, #16]
   142e6:	4b09      	ldr	r3, [pc, #36]	; (1430c <hciCmdInit+0x30>)
   142e8:	2200      	movs	r2, #0
   142ea:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   142ec:	4b07      	ldr	r3, [pc, #28]	; (1430c <hciCmdInit+0x30>)
   142ee:	2201      	movs	r2, #1
   142f0:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   142f2:	4b06      	ldr	r3, [pc, #24]	; (1430c <hciCmdInit+0x30>)
   142f4:	2201      	movs	r2, #1
   142f6:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   142f8:	4b05      	ldr	r3, [pc, #20]	; (14310 <hciCmdInit+0x34>)
   142fa:	7e1a      	ldrb	r2, [r3, #24]
   142fc:	4b03      	ldr	r3, [pc, #12]	; (1430c <hciCmdInit+0x30>)
   142fe:	721a      	strb	r2, [r3, #8]
}
   14300:	bf00      	nop
   14302:	46bd      	mov	sp, r7
   14304:	f85d 7b04 	ldr.w	r7, [sp], #4
   14308:	4770      	bx	lr
   1430a:	bf00      	nop
   1430c:	10009368 	.word	0x10009368
   14310:	10009e2c 	.word	0x10009e2c

00014314 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   14314:	b580      	push	{r7, lr}
   14316:	b082      	sub	sp, #8
   14318:	af00      	add	r7, sp, #0
   1431a:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   1431c:	f005 fea8 	bl	1a070 <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   14320:	2000      	movs	r0, #0
   14322:	f005 fdab 	bl	19e7c <HciDrvRadioBoot>
  DmDevReset();
   14326:	f7fb fd3b 	bl	fda0 <DmDevReset>
}
   1432a:	bf00      	nop
   1432c:	3708      	adds	r7, #8
   1432e:	46bd      	mov	sp, r7
   14330:	bd80      	pop	{r7, pc}
	...

00014334 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   14334:	b580      	push	{r7, lr}
   14336:	b082      	sub	sp, #8
   14338:	af00      	add	r7, sp, #0
   1433a:	4603      	mov	r3, r0
   1433c:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   1433e:	4806      	ldr	r0, [pc, #24]	; (14358 <hciCmdRecvCmpl+0x24>)
   14340:	f006 fcd4 	bl	1acec <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   14344:	4b04      	ldr	r3, [pc, #16]	; (14358 <hciCmdRecvCmpl+0x24>)
   14346:	2201      	movs	r2, #1
   14348:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   1434a:	2000      	movs	r0, #0
   1434c:	f7ff ff8a 	bl	14264 <hciCmdSend>
}
   14350:	bf00      	nop
   14352:	3708      	adds	r7, #8
   14354:	46bd      	mov	sp, r7
   14356:	bd80      	pop	{r7, pc}
   14358:	10009368 	.word	0x10009368

0001435c <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   1435c:	b580      	push	{r7, lr}
   1435e:	b084      	sub	sp, #16
   14360:	af00      	add	r7, sp, #0
   14362:	4603      	mov	r3, r0
   14364:	460a      	mov	r2, r1
   14366:	80fb      	strh	r3, [r7, #6]
   14368:	4613      	mov	r3, r2
   1436a:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   1436c:	2103      	movs	r1, #3
   1436e:	f240 4006 	movw	r0, #1030	; 0x406
   14372:	f7ff ff49 	bl	14208 <hciCmdAlloc>
   14376:	60f8      	str	r0, [r7, #12]
   14378:	68fb      	ldr	r3, [r7, #12]
   1437a:	2b00      	cmp	r3, #0
   1437c:	d018      	beq.n	143b0 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1437e:	68fb      	ldr	r3, [r7, #12]
   14380:	3303      	adds	r3, #3
   14382:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14384:	68bb      	ldr	r3, [r7, #8]
   14386:	1c5a      	adds	r2, r3, #1
   14388:	60ba      	str	r2, [r7, #8]
   1438a:	88fa      	ldrh	r2, [r7, #6]
   1438c:	b2d2      	uxtb	r2, r2
   1438e:	701a      	strb	r2, [r3, #0]
   14390:	68bb      	ldr	r3, [r7, #8]
   14392:	1c5a      	adds	r2, r3, #1
   14394:	60ba      	str	r2, [r7, #8]
   14396:	88fa      	ldrh	r2, [r7, #6]
   14398:	0a12      	lsrs	r2, r2, #8
   1439a:	b292      	uxth	r2, r2
   1439c:	b2d2      	uxtb	r2, r2
   1439e:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   143a0:	68bb      	ldr	r3, [r7, #8]
   143a2:	1c5a      	adds	r2, r3, #1
   143a4:	60ba      	str	r2, [r7, #8]
   143a6:	797a      	ldrb	r2, [r7, #5]
   143a8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   143aa:	68f8      	ldr	r0, [r7, #12]
   143ac:	f7ff ff5a 	bl	14264 <hciCmdSend>
  }
}
   143b0:	bf00      	nop
   143b2:	3710      	adds	r7, #16
   143b4:	46bd      	mov	sp, r7
   143b6:	bd80      	pop	{r7, pc}

000143b8 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   143b8:	b580      	push	{r7, lr}
   143ba:	b084      	sub	sp, #16
   143bc:	af00      	add	r7, sp, #0
   143be:	4603      	mov	r3, r0
   143c0:	6039      	str	r1, [r7, #0]
   143c2:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   143c4:	2107      	movs	r1, #7
   143c6:	f242 0011 	movw	r0, #8209	; 0x2011
   143ca:	f7ff ff1d 	bl	14208 <hciCmdAlloc>
   143ce:	60f8      	str	r0, [r7, #12]
   143d0:	68fb      	ldr	r3, [r7, #12]
   143d2:	2b00      	cmp	r3, #0
   143d4:	d011      	beq.n	143fa <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   143d6:	68fb      	ldr	r3, [r7, #12]
   143d8:	3303      	adds	r3, #3
   143da:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   143dc:	68bb      	ldr	r3, [r7, #8]
   143de:	1c5a      	adds	r2, r3, #1
   143e0:	60ba      	str	r2, [r7, #8]
   143e2:	79fa      	ldrb	r2, [r7, #7]
   143e4:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   143e6:	6839      	ldr	r1, [r7, #0]
   143e8:	68b8      	ldr	r0, [r7, #8]
   143ea:	f005 fc0b 	bl	19c04 <BdaCpy>
   143ee:	68bb      	ldr	r3, [r7, #8]
   143f0:	3306      	adds	r3, #6
   143f2:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   143f4:	68f8      	ldr	r0, [r7, #12]
   143f6:	f7ff ff35 	bl	14264 <hciCmdSend>
  }
}
   143fa:	bf00      	nop
   143fc:	3710      	adds	r7, #16
   143fe:	46bd      	mov	sp, r7
   14400:	bd80      	pop	{r7, pc}

00014402 <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   14402:	b580      	push	{r7, lr}
   14404:	b082      	sub	sp, #8
   14406:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   14408:	2100      	movs	r1, #0
   1440a:	f242 0010 	movw	r0, #8208	; 0x2010
   1440e:	f7ff fefb 	bl	14208 <hciCmdAlloc>
   14412:	6078      	str	r0, [r7, #4]
   14414:	687b      	ldr	r3, [r7, #4]
   14416:	2b00      	cmp	r3, #0
   14418:	d002      	beq.n	14420 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1441a:	6878      	ldr	r0, [r7, #4]
   1441c:	f7ff ff22 	bl	14264 <hciCmdSend>
  }
}
   14420:	bf00      	nop
   14422:	3708      	adds	r7, #8
   14424:	46bd      	mov	sp, r7
   14426:	bd80      	pop	{r7, pc}

00014428 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   14428:	b580      	push	{r7, lr}
   1442a:	b084      	sub	sp, #16
   1442c:	af00      	add	r7, sp, #0
   1442e:	4603      	mov	r3, r0
   14430:	6039      	str	r1, [r7, #0]
   14432:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   14434:	210e      	movs	r1, #14
   14436:	f242 0013 	movw	r0, #8211	; 0x2013
   1443a:	f7ff fee5 	bl	14208 <hciCmdAlloc>
   1443e:	60f8      	str	r0, [r7, #12]
   14440:	68fb      	ldr	r3, [r7, #12]
   14442:	2b00      	cmp	r3, #0
   14444:	d073      	beq.n	1452e <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14446:	68fb      	ldr	r3, [r7, #12]
   14448:	3303      	adds	r3, #3
   1444a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1444c:	68bb      	ldr	r3, [r7, #8]
   1444e:	1c5a      	adds	r2, r3, #1
   14450:	60ba      	str	r2, [r7, #8]
   14452:	88fa      	ldrh	r2, [r7, #6]
   14454:	b2d2      	uxtb	r2, r2
   14456:	701a      	strb	r2, [r3, #0]
   14458:	68bb      	ldr	r3, [r7, #8]
   1445a:	1c5a      	adds	r2, r3, #1
   1445c:	60ba      	str	r2, [r7, #8]
   1445e:	88fa      	ldrh	r2, [r7, #6]
   14460:	0a12      	lsrs	r2, r2, #8
   14462:	b292      	uxth	r2, r2
   14464:	b2d2      	uxtb	r2, r2
   14466:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   14468:	68bb      	ldr	r3, [r7, #8]
   1446a:	1c5a      	adds	r2, r3, #1
   1446c:	60ba      	str	r2, [r7, #8]
   1446e:	683a      	ldr	r2, [r7, #0]
   14470:	8812      	ldrh	r2, [r2, #0]
   14472:	b2d2      	uxtb	r2, r2
   14474:	701a      	strb	r2, [r3, #0]
   14476:	68bb      	ldr	r3, [r7, #8]
   14478:	1c5a      	adds	r2, r3, #1
   1447a:	60ba      	str	r2, [r7, #8]
   1447c:	683a      	ldr	r2, [r7, #0]
   1447e:	8812      	ldrh	r2, [r2, #0]
   14480:	0a12      	lsrs	r2, r2, #8
   14482:	b292      	uxth	r2, r2
   14484:	b2d2      	uxtb	r2, r2
   14486:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   14488:	68bb      	ldr	r3, [r7, #8]
   1448a:	1c5a      	adds	r2, r3, #1
   1448c:	60ba      	str	r2, [r7, #8]
   1448e:	683a      	ldr	r2, [r7, #0]
   14490:	8852      	ldrh	r2, [r2, #2]
   14492:	b2d2      	uxtb	r2, r2
   14494:	701a      	strb	r2, [r3, #0]
   14496:	68bb      	ldr	r3, [r7, #8]
   14498:	1c5a      	adds	r2, r3, #1
   1449a:	60ba      	str	r2, [r7, #8]
   1449c:	683a      	ldr	r2, [r7, #0]
   1449e:	8852      	ldrh	r2, [r2, #2]
   144a0:	0a12      	lsrs	r2, r2, #8
   144a2:	b292      	uxth	r2, r2
   144a4:	b2d2      	uxtb	r2, r2
   144a6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   144a8:	68bb      	ldr	r3, [r7, #8]
   144aa:	1c5a      	adds	r2, r3, #1
   144ac:	60ba      	str	r2, [r7, #8]
   144ae:	683a      	ldr	r2, [r7, #0]
   144b0:	8892      	ldrh	r2, [r2, #4]
   144b2:	b2d2      	uxtb	r2, r2
   144b4:	701a      	strb	r2, [r3, #0]
   144b6:	68bb      	ldr	r3, [r7, #8]
   144b8:	1c5a      	adds	r2, r3, #1
   144ba:	60ba      	str	r2, [r7, #8]
   144bc:	683a      	ldr	r2, [r7, #0]
   144be:	8892      	ldrh	r2, [r2, #4]
   144c0:	0a12      	lsrs	r2, r2, #8
   144c2:	b292      	uxth	r2, r2
   144c4:	b2d2      	uxtb	r2, r2
   144c6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   144c8:	68bb      	ldr	r3, [r7, #8]
   144ca:	1c5a      	adds	r2, r3, #1
   144cc:	60ba      	str	r2, [r7, #8]
   144ce:	683a      	ldr	r2, [r7, #0]
   144d0:	88d2      	ldrh	r2, [r2, #6]
   144d2:	b2d2      	uxtb	r2, r2
   144d4:	701a      	strb	r2, [r3, #0]
   144d6:	68bb      	ldr	r3, [r7, #8]
   144d8:	1c5a      	adds	r2, r3, #1
   144da:	60ba      	str	r2, [r7, #8]
   144dc:	683a      	ldr	r2, [r7, #0]
   144de:	88d2      	ldrh	r2, [r2, #6]
   144e0:	0a12      	lsrs	r2, r2, #8
   144e2:	b292      	uxth	r2, r2
   144e4:	b2d2      	uxtb	r2, r2
   144e6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   144e8:	68bb      	ldr	r3, [r7, #8]
   144ea:	1c5a      	adds	r2, r3, #1
   144ec:	60ba      	str	r2, [r7, #8]
   144ee:	683a      	ldr	r2, [r7, #0]
   144f0:	8912      	ldrh	r2, [r2, #8]
   144f2:	b2d2      	uxtb	r2, r2
   144f4:	701a      	strb	r2, [r3, #0]
   144f6:	68bb      	ldr	r3, [r7, #8]
   144f8:	1c5a      	adds	r2, r3, #1
   144fa:	60ba      	str	r2, [r7, #8]
   144fc:	683a      	ldr	r2, [r7, #0]
   144fe:	8912      	ldrh	r2, [r2, #8]
   14500:	0a12      	lsrs	r2, r2, #8
   14502:	b292      	uxth	r2, r2
   14504:	b2d2      	uxtb	r2, r2
   14506:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   14508:	68bb      	ldr	r3, [r7, #8]
   1450a:	1c5a      	adds	r2, r3, #1
   1450c:	60ba      	str	r2, [r7, #8]
   1450e:	683a      	ldr	r2, [r7, #0]
   14510:	8952      	ldrh	r2, [r2, #10]
   14512:	b2d2      	uxtb	r2, r2
   14514:	701a      	strb	r2, [r3, #0]
   14516:	68bb      	ldr	r3, [r7, #8]
   14518:	1c5a      	adds	r2, r3, #1
   1451a:	60ba      	str	r2, [r7, #8]
   1451c:	683a      	ldr	r2, [r7, #0]
   1451e:	8952      	ldrh	r2, [r2, #10]
   14520:	0a12      	lsrs	r2, r2, #8
   14522:	b292      	uxth	r2, r2
   14524:	b2d2      	uxtb	r2, r2
   14526:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14528:	68f8      	ldr	r0, [r7, #12]
   1452a:	f7ff fe9b 	bl	14264 <hciCmdSend>
  }
}
   1452e:	bf00      	nop
   14530:	3710      	adds	r7, #16
   14532:	46bd      	mov	sp, r7
   14534:	bd80      	pop	{r7, pc}

00014536 <HciLeCreateConnCmd>:
 */
/*************************************************************************************************/
void HciLeCreateConnCmd(uint16_t scanInterval, uint16_t scanWindow, uint8_t filterPolicy,
                        uint8_t peerAddrType, uint8_t *pPeerAddr, uint8_t ownAddrType,
                        hciConnSpec_t *pConnSpec)
{
   14536:	b590      	push	{r4, r7, lr}
   14538:	b085      	sub	sp, #20
   1453a:	af00      	add	r7, sp, #0
   1453c:	4604      	mov	r4, r0
   1453e:	4608      	mov	r0, r1
   14540:	4611      	mov	r1, r2
   14542:	461a      	mov	r2, r3
   14544:	4623      	mov	r3, r4
   14546:	80fb      	strh	r3, [r7, #6]
   14548:	4603      	mov	r3, r0
   1454a:	80bb      	strh	r3, [r7, #4]
   1454c:	460b      	mov	r3, r1
   1454e:	70fb      	strb	r3, [r7, #3]
   14550:	4613      	mov	r3, r2
   14552:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN, HCI_LEN_LE_CREATE_CONN)) != NULL)
   14554:	2119      	movs	r1, #25
   14556:	f242 000d 	movw	r0, #8205	; 0x200d
   1455a:	f7ff fe55 	bl	14208 <hciCmdAlloc>
   1455e:	60f8      	str	r0, [r7, #12]
   14560:	68fb      	ldr	r3, [r7, #12]
   14562:	2b00      	cmp	r3, #0
   14564:	f000 8099 	beq.w	1469a <HciLeCreateConnCmd+0x164>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14568:	68fb      	ldr	r3, [r7, #12]
   1456a:	3303      	adds	r3, #3
   1456c:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, scanInterval);
   1456e:	68bb      	ldr	r3, [r7, #8]
   14570:	1c5a      	adds	r2, r3, #1
   14572:	60ba      	str	r2, [r7, #8]
   14574:	88fa      	ldrh	r2, [r7, #6]
   14576:	b2d2      	uxtb	r2, r2
   14578:	701a      	strb	r2, [r3, #0]
   1457a:	68bb      	ldr	r3, [r7, #8]
   1457c:	1c5a      	adds	r2, r3, #1
   1457e:	60ba      	str	r2, [r7, #8]
   14580:	88fa      	ldrh	r2, [r7, #6]
   14582:	0a12      	lsrs	r2, r2, #8
   14584:	b292      	uxth	r2, r2
   14586:	b2d2      	uxtb	r2, r2
   14588:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, scanWindow);
   1458a:	68bb      	ldr	r3, [r7, #8]
   1458c:	1c5a      	adds	r2, r3, #1
   1458e:	60ba      	str	r2, [r7, #8]
   14590:	88ba      	ldrh	r2, [r7, #4]
   14592:	b2d2      	uxtb	r2, r2
   14594:	701a      	strb	r2, [r3, #0]
   14596:	68bb      	ldr	r3, [r7, #8]
   14598:	1c5a      	adds	r2, r3, #1
   1459a:	60ba      	str	r2, [r7, #8]
   1459c:	88ba      	ldrh	r2, [r7, #4]
   1459e:	0a12      	lsrs	r2, r2, #8
   145a0:	b292      	uxth	r2, r2
   145a2:	b2d2      	uxtb	r2, r2
   145a4:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, filterPolicy);
   145a6:	68bb      	ldr	r3, [r7, #8]
   145a8:	1c5a      	adds	r2, r3, #1
   145aa:	60ba      	str	r2, [r7, #8]
   145ac:	78fa      	ldrb	r2, [r7, #3]
   145ae:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   145b0:	68bb      	ldr	r3, [r7, #8]
   145b2:	1c5a      	adds	r2, r3, #1
   145b4:	60ba      	str	r2, [r7, #8]
   145b6:	78ba      	ldrb	r2, [r7, #2]
   145b8:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerAddr);
   145ba:	6a39      	ldr	r1, [r7, #32]
   145bc:	68b8      	ldr	r0, [r7, #8]
   145be:	f005 fb21 	bl	19c04 <BdaCpy>
   145c2:	68bb      	ldr	r3, [r7, #8]
   145c4:	3306      	adds	r3, #6
   145c6:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, ownAddrType);
   145c8:	68bb      	ldr	r3, [r7, #8]
   145ca:	1c5a      	adds	r2, r3, #1
   145cc:	60ba      	str	r2, [r7, #8]
   145ce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   145d2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   145d4:	68bb      	ldr	r3, [r7, #8]
   145d6:	1c5a      	adds	r2, r3, #1
   145d8:	60ba      	str	r2, [r7, #8]
   145da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   145dc:	8812      	ldrh	r2, [r2, #0]
   145de:	b2d2      	uxtb	r2, r2
   145e0:	701a      	strb	r2, [r3, #0]
   145e2:	68bb      	ldr	r3, [r7, #8]
   145e4:	1c5a      	adds	r2, r3, #1
   145e6:	60ba      	str	r2, [r7, #8]
   145e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   145ea:	8812      	ldrh	r2, [r2, #0]
   145ec:	0a12      	lsrs	r2, r2, #8
   145ee:	b292      	uxth	r2, r2
   145f0:	b2d2      	uxtb	r2, r2
   145f2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   145f4:	68bb      	ldr	r3, [r7, #8]
   145f6:	1c5a      	adds	r2, r3, #1
   145f8:	60ba      	str	r2, [r7, #8]
   145fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   145fc:	8852      	ldrh	r2, [r2, #2]
   145fe:	b2d2      	uxtb	r2, r2
   14600:	701a      	strb	r2, [r3, #0]
   14602:	68bb      	ldr	r3, [r7, #8]
   14604:	1c5a      	adds	r2, r3, #1
   14606:	60ba      	str	r2, [r7, #8]
   14608:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1460a:	8852      	ldrh	r2, [r2, #2]
   1460c:	0a12      	lsrs	r2, r2, #8
   1460e:	b292      	uxth	r2, r2
   14610:	b2d2      	uxtb	r2, r2
   14612:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   14614:	68bb      	ldr	r3, [r7, #8]
   14616:	1c5a      	adds	r2, r3, #1
   14618:	60ba      	str	r2, [r7, #8]
   1461a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1461c:	8892      	ldrh	r2, [r2, #4]
   1461e:	b2d2      	uxtb	r2, r2
   14620:	701a      	strb	r2, [r3, #0]
   14622:	68bb      	ldr	r3, [r7, #8]
   14624:	1c5a      	adds	r2, r3, #1
   14626:	60ba      	str	r2, [r7, #8]
   14628:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1462a:	8892      	ldrh	r2, [r2, #4]
   1462c:	0a12      	lsrs	r2, r2, #8
   1462e:	b292      	uxth	r2, r2
   14630:	b2d2      	uxtb	r2, r2
   14632:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   14634:	68bb      	ldr	r3, [r7, #8]
   14636:	1c5a      	adds	r2, r3, #1
   14638:	60ba      	str	r2, [r7, #8]
   1463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1463c:	88d2      	ldrh	r2, [r2, #6]
   1463e:	b2d2      	uxtb	r2, r2
   14640:	701a      	strb	r2, [r3, #0]
   14642:	68bb      	ldr	r3, [r7, #8]
   14644:	1c5a      	adds	r2, r3, #1
   14646:	60ba      	str	r2, [r7, #8]
   14648:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1464a:	88d2      	ldrh	r2, [r2, #6]
   1464c:	0a12      	lsrs	r2, r2, #8
   1464e:	b292      	uxth	r2, r2
   14650:	b2d2      	uxtb	r2, r2
   14652:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   14654:	68bb      	ldr	r3, [r7, #8]
   14656:	1c5a      	adds	r2, r3, #1
   14658:	60ba      	str	r2, [r7, #8]
   1465a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1465c:	8912      	ldrh	r2, [r2, #8]
   1465e:	b2d2      	uxtb	r2, r2
   14660:	701a      	strb	r2, [r3, #0]
   14662:	68bb      	ldr	r3, [r7, #8]
   14664:	1c5a      	adds	r2, r3, #1
   14666:	60ba      	str	r2, [r7, #8]
   14668:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1466a:	8912      	ldrh	r2, [r2, #8]
   1466c:	0a12      	lsrs	r2, r2, #8
   1466e:	b292      	uxth	r2, r2
   14670:	b2d2      	uxtb	r2, r2
   14672:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   14674:	68bb      	ldr	r3, [r7, #8]
   14676:	1c5a      	adds	r2, r3, #1
   14678:	60ba      	str	r2, [r7, #8]
   1467a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1467c:	8952      	ldrh	r2, [r2, #10]
   1467e:	b2d2      	uxtb	r2, r2
   14680:	701a      	strb	r2, [r3, #0]
   14682:	68bb      	ldr	r3, [r7, #8]
   14684:	1c5a      	adds	r2, r3, #1
   14686:	60ba      	str	r2, [r7, #8]
   14688:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1468a:	8952      	ldrh	r2, [r2, #10]
   1468c:	0a12      	lsrs	r2, r2, #8
   1468e:	b292      	uxth	r2, r2
   14690:	b2d2      	uxtb	r2, r2
   14692:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14694:	68f8      	ldr	r0, [r7, #12]
   14696:	f7ff fde5 	bl	14264 <hciCmdSend>
  }
}
   1469a:	bf00      	nop
   1469c:	3714      	adds	r7, #20
   1469e:	46bd      	mov	sp, r7
   146a0:	bd90      	pop	{r4, r7, pc}

000146a2 <HciLeCreateConnCancelCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeCreateConnCancelCmd(void)
{
   146a2:	b580      	push	{r7, lr}
   146a4:	b082      	sub	sp, #8
   146a6:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN_CANCEL, HCI_LEN_LE_CREATE_CONN_CANCEL)) != NULL)
   146a8:	2100      	movs	r1, #0
   146aa:	f242 000e 	movw	r0, #8206	; 0x200e
   146ae:	f7ff fdab 	bl	14208 <hciCmdAlloc>
   146b2:	6078      	str	r0, [r7, #4]
   146b4:	687b      	ldr	r3, [r7, #4]
   146b6:	2b00      	cmp	r3, #0
   146b8:	d002      	beq.n	146c0 <HciLeCreateConnCancelCmd+0x1e>
  {
    hciCmdSend(pBuf);
   146ba:	6878      	ldr	r0, [r7, #4]
   146bc:	f7ff fdd2 	bl	14264 <hciCmdSend>
  }
}
   146c0:	bf00      	nop
   146c2:	3708      	adds	r7, #8
   146c4:	46bd      	mov	sp, r7
   146c6:	bd80      	pop	{r7, pc}

000146c8 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   146c8:	b590      	push	{r4, r7, lr}
   146ca:	b085      	sub	sp, #20
   146cc:	af00      	add	r7, sp, #0
   146ce:	4604      	mov	r4, r0
   146d0:	4608      	mov	r0, r1
   146d2:	4611      	mov	r1, r2
   146d4:	461a      	mov	r2, r3
   146d6:	4623      	mov	r3, r4
   146d8:	80fb      	strh	r3, [r7, #6]
   146da:	4603      	mov	r3, r0
   146dc:	80bb      	strh	r3, [r7, #4]
   146de:	460b      	mov	r3, r1
   146e0:	807b      	strh	r3, [r7, #2]
   146e2:	4613      	mov	r3, r2
   146e4:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   146e6:	210e      	movs	r1, #14
   146e8:	f242 0020 	movw	r0, #8224	; 0x2020
   146ec:	f7ff fd8c 	bl	14208 <hciCmdAlloc>
   146f0:	60f8      	str	r0, [r7, #12]
   146f2:	68fb      	ldr	r3, [r7, #12]
   146f4:	2b00      	cmp	r3, #0
   146f6:	d067      	beq.n	147c8 <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   146f8:	68fb      	ldr	r3, [r7, #12]
   146fa:	3303      	adds	r3, #3
   146fc:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   146fe:	68bb      	ldr	r3, [r7, #8]
   14700:	1c5a      	adds	r2, r3, #1
   14702:	60ba      	str	r2, [r7, #8]
   14704:	88fa      	ldrh	r2, [r7, #6]
   14706:	b2d2      	uxtb	r2, r2
   14708:	701a      	strb	r2, [r3, #0]
   1470a:	68bb      	ldr	r3, [r7, #8]
   1470c:	1c5a      	adds	r2, r3, #1
   1470e:	60ba      	str	r2, [r7, #8]
   14710:	88fa      	ldrh	r2, [r7, #6]
   14712:	0a12      	lsrs	r2, r2, #8
   14714:	b292      	uxth	r2, r2
   14716:	b2d2      	uxtb	r2, r2
   14718:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   1471a:	68bb      	ldr	r3, [r7, #8]
   1471c:	1c5a      	adds	r2, r3, #1
   1471e:	60ba      	str	r2, [r7, #8]
   14720:	88ba      	ldrh	r2, [r7, #4]
   14722:	b2d2      	uxtb	r2, r2
   14724:	701a      	strb	r2, [r3, #0]
   14726:	68bb      	ldr	r3, [r7, #8]
   14728:	1c5a      	adds	r2, r3, #1
   1472a:	60ba      	str	r2, [r7, #8]
   1472c:	88ba      	ldrh	r2, [r7, #4]
   1472e:	0a12      	lsrs	r2, r2, #8
   14730:	b292      	uxth	r2, r2
   14732:	b2d2      	uxtb	r2, r2
   14734:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   14736:	68bb      	ldr	r3, [r7, #8]
   14738:	1c5a      	adds	r2, r3, #1
   1473a:	60ba      	str	r2, [r7, #8]
   1473c:	887a      	ldrh	r2, [r7, #2]
   1473e:	b2d2      	uxtb	r2, r2
   14740:	701a      	strb	r2, [r3, #0]
   14742:	68bb      	ldr	r3, [r7, #8]
   14744:	1c5a      	adds	r2, r3, #1
   14746:	60ba      	str	r2, [r7, #8]
   14748:	887a      	ldrh	r2, [r7, #2]
   1474a:	0a12      	lsrs	r2, r2, #8
   1474c:	b292      	uxth	r2, r2
   1474e:	b2d2      	uxtb	r2, r2
   14750:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   14752:	68bb      	ldr	r3, [r7, #8]
   14754:	1c5a      	adds	r2, r3, #1
   14756:	60ba      	str	r2, [r7, #8]
   14758:	883a      	ldrh	r2, [r7, #0]
   1475a:	b2d2      	uxtb	r2, r2
   1475c:	701a      	strb	r2, [r3, #0]
   1475e:	68bb      	ldr	r3, [r7, #8]
   14760:	1c5a      	adds	r2, r3, #1
   14762:	60ba      	str	r2, [r7, #8]
   14764:	883a      	ldrh	r2, [r7, #0]
   14766:	0a12      	lsrs	r2, r2, #8
   14768:	b292      	uxth	r2, r2
   1476a:	b2d2      	uxtb	r2, r2
   1476c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1476e:	68bb      	ldr	r3, [r7, #8]
   14770:	1c5a      	adds	r2, r3, #1
   14772:	60ba      	str	r2, [r7, #8]
   14774:	8c3a      	ldrh	r2, [r7, #32]
   14776:	b2d2      	uxtb	r2, r2
   14778:	701a      	strb	r2, [r3, #0]
   1477a:	68bb      	ldr	r3, [r7, #8]
   1477c:	1c5a      	adds	r2, r3, #1
   1477e:	60ba      	str	r2, [r7, #8]
   14780:	8c3a      	ldrh	r2, [r7, #32]
   14782:	0a12      	lsrs	r2, r2, #8
   14784:	b292      	uxth	r2, r2
   14786:	b2d2      	uxtb	r2, r2
   14788:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   1478a:	68bb      	ldr	r3, [r7, #8]
   1478c:	1c5a      	adds	r2, r3, #1
   1478e:	60ba      	str	r2, [r7, #8]
   14790:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   14792:	b2d2      	uxtb	r2, r2
   14794:	701a      	strb	r2, [r3, #0]
   14796:	68bb      	ldr	r3, [r7, #8]
   14798:	1c5a      	adds	r2, r3, #1
   1479a:	60ba      	str	r2, [r7, #8]
   1479c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   1479e:	0a12      	lsrs	r2, r2, #8
   147a0:	b292      	uxth	r2, r2
   147a2:	b2d2      	uxtb	r2, r2
   147a4:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   147a6:	68bb      	ldr	r3, [r7, #8]
   147a8:	1c5a      	adds	r2, r3, #1
   147aa:	60ba      	str	r2, [r7, #8]
   147ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   147ae:	b2d2      	uxtb	r2, r2
   147b0:	701a      	strb	r2, [r3, #0]
   147b2:	68bb      	ldr	r3, [r7, #8]
   147b4:	1c5a      	adds	r2, r3, #1
   147b6:	60ba      	str	r2, [r7, #8]
   147b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   147ba:	0a12      	lsrs	r2, r2, #8
   147bc:	b292      	uxth	r2, r2
   147be:	b2d2      	uxtb	r2, r2
   147c0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   147c2:	68f8      	ldr	r0, [r7, #12]
   147c4:	f7ff fd4e 	bl	14264 <hciCmdSend>
  }
}
   147c8:	bf00      	nop
   147ca:	3714      	adds	r7, #20
   147cc:	46bd      	mov	sp, r7
   147ce:	bd90      	pop	{r4, r7, pc}

000147d0 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   147d0:	b580      	push	{r7, lr}
   147d2:	b084      	sub	sp, #16
   147d4:	af00      	add	r7, sp, #0
   147d6:	4603      	mov	r3, r0
   147d8:	460a      	mov	r2, r1
   147da:	80fb      	strh	r3, [r7, #6]
   147dc:	4613      	mov	r3, r2
   147de:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   147e0:	2103      	movs	r1, #3
   147e2:	f242 0021 	movw	r0, #8225	; 0x2021
   147e6:	f7ff fd0f 	bl	14208 <hciCmdAlloc>
   147ea:	60f8      	str	r0, [r7, #12]
   147ec:	68fb      	ldr	r3, [r7, #12]
   147ee:	2b00      	cmp	r3, #0
   147f0:	d018      	beq.n	14824 <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   147f2:	68fb      	ldr	r3, [r7, #12]
   147f4:	3303      	adds	r3, #3
   147f6:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   147f8:	68bb      	ldr	r3, [r7, #8]
   147fa:	1c5a      	adds	r2, r3, #1
   147fc:	60ba      	str	r2, [r7, #8]
   147fe:	88fa      	ldrh	r2, [r7, #6]
   14800:	b2d2      	uxtb	r2, r2
   14802:	701a      	strb	r2, [r3, #0]
   14804:	68bb      	ldr	r3, [r7, #8]
   14806:	1c5a      	adds	r2, r3, #1
   14808:	60ba      	str	r2, [r7, #8]
   1480a:	88fa      	ldrh	r2, [r7, #6]
   1480c:	0a12      	lsrs	r2, r2, #8
   1480e:	b292      	uxth	r2, r2
   14810:	b2d2      	uxtb	r2, r2
   14812:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   14814:	68bb      	ldr	r3, [r7, #8]
   14816:	1c5a      	adds	r2, r3, #1
   14818:	60ba      	str	r2, [r7, #8]
   1481a:	797a      	ldrb	r2, [r7, #5]
   1481c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1481e:	68f8      	ldr	r0, [r7, #12]
   14820:	f7ff fd20 	bl	14264 <hciCmdSend>
  }
}
   14824:	bf00      	nop
   14826:	3710      	adds	r7, #16
   14828:	46bd      	mov	sp, r7
   1482a:	bd80      	pop	{r7, pc}

0001482c <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   1482c:	b580      	push	{r7, lr}
   1482e:	b084      	sub	sp, #16
   14830:	af00      	add	r7, sp, #0
   14832:	4603      	mov	r3, r0
   14834:	80fb      	strh	r3, [r7, #6]
   14836:	460b      	mov	r3, r1
   14838:	80bb      	strh	r3, [r7, #4]
   1483a:	4613      	mov	r3, r2
   1483c:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   1483e:	2106      	movs	r1, #6
   14840:	f242 0022 	movw	r0, #8226	; 0x2022
   14844:	f7ff fce0 	bl	14208 <hciCmdAlloc>
   14848:	60f8      	str	r0, [r7, #12]
   1484a:	68fb      	ldr	r3, [r7, #12]
   1484c:	2b00      	cmp	r3, #0
   1484e:	d02f      	beq.n	148b0 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14850:	68fb      	ldr	r3, [r7, #12]
   14852:	3303      	adds	r3, #3
   14854:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14856:	68bb      	ldr	r3, [r7, #8]
   14858:	1c5a      	adds	r2, r3, #1
   1485a:	60ba      	str	r2, [r7, #8]
   1485c:	88fa      	ldrh	r2, [r7, #6]
   1485e:	b2d2      	uxtb	r2, r2
   14860:	701a      	strb	r2, [r3, #0]
   14862:	68bb      	ldr	r3, [r7, #8]
   14864:	1c5a      	adds	r2, r3, #1
   14866:	60ba      	str	r2, [r7, #8]
   14868:	88fa      	ldrh	r2, [r7, #6]
   1486a:	0a12      	lsrs	r2, r2, #8
   1486c:	b292      	uxth	r2, r2
   1486e:	b2d2      	uxtb	r2, r2
   14870:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   14872:	68bb      	ldr	r3, [r7, #8]
   14874:	1c5a      	adds	r2, r3, #1
   14876:	60ba      	str	r2, [r7, #8]
   14878:	88ba      	ldrh	r2, [r7, #4]
   1487a:	b2d2      	uxtb	r2, r2
   1487c:	701a      	strb	r2, [r3, #0]
   1487e:	68bb      	ldr	r3, [r7, #8]
   14880:	1c5a      	adds	r2, r3, #1
   14882:	60ba      	str	r2, [r7, #8]
   14884:	88ba      	ldrh	r2, [r7, #4]
   14886:	0a12      	lsrs	r2, r2, #8
   14888:	b292      	uxth	r2, r2
   1488a:	b2d2      	uxtb	r2, r2
   1488c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   1488e:	68bb      	ldr	r3, [r7, #8]
   14890:	1c5a      	adds	r2, r3, #1
   14892:	60ba      	str	r2, [r7, #8]
   14894:	887a      	ldrh	r2, [r7, #2]
   14896:	b2d2      	uxtb	r2, r2
   14898:	701a      	strb	r2, [r3, #0]
   1489a:	68bb      	ldr	r3, [r7, #8]
   1489c:	1c5a      	adds	r2, r3, #1
   1489e:	60ba      	str	r2, [r7, #8]
   148a0:	887a      	ldrh	r2, [r7, #2]
   148a2:	0a12      	lsrs	r2, r2, #8
   148a4:	b292      	uxth	r2, r2
   148a6:	b2d2      	uxtb	r2, r2
   148a8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   148aa:	68f8      	ldr	r0, [r7, #12]
   148ac:	f7ff fcda 	bl	14264 <hciCmdSend>
  }
}
   148b0:	bf00      	nop
   148b2:	3710      	adds	r7, #16
   148b4:	46bd      	mov	sp, r7
   148b6:	bd80      	pop	{r7, pc}

000148b8 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   148b8:	b580      	push	{r7, lr}
   148ba:	b084      	sub	sp, #16
   148bc:	af00      	add	r7, sp, #0
   148be:	4603      	mov	r3, r0
   148c0:	460a      	mov	r2, r1
   148c2:	80fb      	strh	r3, [r7, #6]
   148c4:	4613      	mov	r3, r2
   148c6:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   148c8:	2104      	movs	r1, #4
   148ca:	f242 0024 	movw	r0, #8228	; 0x2024
   148ce:	f7ff fc9b 	bl	14208 <hciCmdAlloc>
   148d2:	60f8      	str	r0, [r7, #12]
   148d4:	68fb      	ldr	r3, [r7, #12]
   148d6:	2b00      	cmp	r3, #0
   148d8:	d021      	beq.n	1491e <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   148da:	68fb      	ldr	r3, [r7, #12]
   148dc:	3303      	adds	r3, #3
   148de:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   148e0:	68bb      	ldr	r3, [r7, #8]
   148e2:	1c5a      	adds	r2, r3, #1
   148e4:	60ba      	str	r2, [r7, #8]
   148e6:	88fa      	ldrh	r2, [r7, #6]
   148e8:	b2d2      	uxtb	r2, r2
   148ea:	701a      	strb	r2, [r3, #0]
   148ec:	68bb      	ldr	r3, [r7, #8]
   148ee:	1c5a      	adds	r2, r3, #1
   148f0:	60ba      	str	r2, [r7, #8]
   148f2:	88fa      	ldrh	r2, [r7, #6]
   148f4:	0a12      	lsrs	r2, r2, #8
   148f6:	b292      	uxth	r2, r2
   148f8:	b2d2      	uxtb	r2, r2
   148fa:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   148fc:	68bb      	ldr	r3, [r7, #8]
   148fe:	1c5a      	adds	r2, r3, #1
   14900:	60ba      	str	r2, [r7, #8]
   14902:	88ba      	ldrh	r2, [r7, #4]
   14904:	b2d2      	uxtb	r2, r2
   14906:	701a      	strb	r2, [r3, #0]
   14908:	68bb      	ldr	r3, [r7, #8]
   1490a:	1c5a      	adds	r2, r3, #1
   1490c:	60ba      	str	r2, [r7, #8]
   1490e:	88ba      	ldrh	r2, [r7, #4]
   14910:	0a12      	lsrs	r2, r2, #8
   14912:	b292      	uxth	r2, r2
   14914:	b2d2      	uxtb	r2, r2
   14916:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14918:	68f8      	ldr	r0, [r7, #12]
   1491a:	f7ff fca3 	bl	14264 <hciCmdSend>
  }
}
   1491e:	bf00      	nop
   14920:	3710      	adds	r7, #16
   14922:	46bd      	mov	sp, r7
   14924:	bd80      	pop	{r7, pc}

00014926 <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
   14926:	b580      	push	{r7, lr}
   14928:	b082      	sub	sp, #8
   1492a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
   1492c:	2100      	movs	r1, #0
   1492e:	f242 0025 	movw	r0, #8229	; 0x2025
   14932:	f7ff fc69 	bl	14208 <hciCmdAlloc>
   14936:	6078      	str	r0, [r7, #4]
   14938:	687b      	ldr	r3, [r7, #4]
   1493a:	2b00      	cmp	r3, #0
   1493c:	d002      	beq.n	14944 <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
   1493e:	6878      	ldr	r0, [r7, #4]
   14940:	f7ff fc90 	bl	14264 <hciCmdSend>
  }
}
   14944:	bf00      	nop
   14946:	3708      	adds	r7, #8
   14948:	46bd      	mov	sp, r7
   1494a:	bd80      	pop	{r7, pc}

0001494c <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
   1494c:	b580      	push	{r7, lr}
   1494e:	b084      	sub	sp, #16
   14950:	af00      	add	r7, sp, #0
   14952:	6078      	str	r0, [r7, #4]
   14954:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
   14956:	2140      	movs	r1, #64	; 0x40
   14958:	f242 0026 	movw	r0, #8230	; 0x2026
   1495c:	f7ff fc54 	bl	14208 <hciCmdAlloc>
   14960:	60f8      	str	r0, [r7, #12]
   14962:	68fb      	ldr	r3, [r7, #12]
   14964:	2b00      	cmp	r3, #0
   14966:	d011      	beq.n	1498c <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14968:	68fb      	ldr	r3, [r7, #12]
   1496a:	3303      	adds	r3, #3
   1496c:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
   1496e:	2220      	movs	r2, #32
   14970:	6879      	ldr	r1, [r7, #4]
   14972:	68b8      	ldr	r0, [r7, #8]
   14974:	f7f7 fbf4 	bl	c160 <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
   14978:	68bb      	ldr	r3, [r7, #8]
   1497a:	3320      	adds	r3, #32
   1497c:	2220      	movs	r2, #32
   1497e:	6839      	ldr	r1, [r7, #0]
   14980:	4618      	mov	r0, r3
   14982:	f7f7 fbed 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14986:	68f8      	ldr	r0, [r7, #12]
   14988:	f7ff fc6c 	bl	14264 <hciCmdSend>
  }
}
   1498c:	bf00      	nop
   1498e:	3710      	adds	r7, #16
   14990:	46bd      	mov	sp, r7
   14992:	bd80      	pop	{r7, pc}

00014994 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   14994:	b580      	push	{r7, lr}
   14996:	b082      	sub	sp, #8
   14998:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   1499a:	2100      	movs	r1, #0
   1499c:	f242 002f 	movw	r0, #8239	; 0x202f
   149a0:	f7ff fc32 	bl	14208 <hciCmdAlloc>
   149a4:	6078      	str	r0, [r7, #4]
   149a6:	687b      	ldr	r3, [r7, #4]
   149a8:	2b00      	cmp	r3, #0
   149aa:	d002      	beq.n	149b2 <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
   149ac:	6878      	ldr	r0, [r7, #4]
   149ae:	f7ff fc59 	bl	14264 <hciCmdSend>
  }
}
   149b2:	bf00      	nop
   149b4:	3708      	adds	r7, #8
   149b6:	46bd      	mov	sp, r7
   149b8:	bd80      	pop	{r7, pc}

000149ba <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   149ba:	b580      	push	{r7, lr}
   149bc:	b084      	sub	sp, #16
   149be:	af00      	add	r7, sp, #0
   149c0:	6078      	str	r0, [r7, #4]
   149c2:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   149c4:	2120      	movs	r1, #32
   149c6:	f242 0017 	movw	r0, #8215	; 0x2017
   149ca:	f7ff fc1d 	bl	14208 <hciCmdAlloc>
   149ce:	60f8      	str	r0, [r7, #12]
   149d0:	68fb      	ldr	r3, [r7, #12]
   149d2:	2b00      	cmp	r3, #0
   149d4:	d012      	beq.n	149fc <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   149d6:	68fb      	ldr	r3, [r7, #12]
   149d8:	3303      	adds	r3, #3
   149da:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   149dc:	2210      	movs	r2, #16
   149de:	6879      	ldr	r1, [r7, #4]
   149e0:	68b8      	ldr	r0, [r7, #8]
   149e2:	f7f7 fbbd 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   149e6:	68bb      	ldr	r3, [r7, #8]
   149e8:	3310      	adds	r3, #16
   149ea:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   149ec:	2210      	movs	r2, #16
   149ee:	6839      	ldr	r1, [r7, #0]
   149f0:	68b8      	ldr	r0, [r7, #8]
   149f2:	f7f7 fbb5 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   149f6:	68f8      	ldr	r0, [r7, #12]
   149f8:	f7ff fc34 	bl	14264 <hciCmdSend>
  }
}
   149fc:	bf00      	nop
   149fe:	3710      	adds	r7, #16
   14a00:	46bd      	mov	sp, r7
   14a02:	bd80      	pop	{r7, pc}

00014a04 <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   14a04:	b580      	push	{r7, lr}
   14a06:	b084      	sub	sp, #16
   14a08:	af00      	add	r7, sp, #0
   14a0a:	4603      	mov	r3, r0
   14a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   14a0e:	2102      	movs	r1, #2
   14a10:	f242 001b 	movw	r0, #8219	; 0x201b
   14a14:	f7ff fbf8 	bl	14208 <hciCmdAlloc>
   14a18:	60f8      	str	r0, [r7, #12]
   14a1a:	68fb      	ldr	r3, [r7, #12]
   14a1c:	2b00      	cmp	r3, #0
   14a1e:	d013      	beq.n	14a48 <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14a20:	68fb      	ldr	r3, [r7, #12]
   14a22:	3303      	adds	r3, #3
   14a24:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14a26:	68bb      	ldr	r3, [r7, #8]
   14a28:	1c5a      	adds	r2, r3, #1
   14a2a:	60ba      	str	r2, [r7, #8]
   14a2c:	88fa      	ldrh	r2, [r7, #6]
   14a2e:	b2d2      	uxtb	r2, r2
   14a30:	701a      	strb	r2, [r3, #0]
   14a32:	68bb      	ldr	r3, [r7, #8]
   14a34:	1c5a      	adds	r2, r3, #1
   14a36:	60ba      	str	r2, [r7, #8]
   14a38:	88fa      	ldrh	r2, [r7, #6]
   14a3a:	0a12      	lsrs	r2, r2, #8
   14a3c:	b292      	uxth	r2, r2
   14a3e:	b2d2      	uxtb	r2, r2
   14a40:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14a42:	68f8      	ldr	r0, [r7, #12]
   14a44:	f7ff fc0e 	bl	14264 <hciCmdSend>
  }
}
   14a48:	bf00      	nop
   14a4a:	3710      	adds	r7, #16
   14a4c:	46bd      	mov	sp, r7
   14a4e:	bd80      	pop	{r7, pc}

00014a50 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   14a50:	b580      	push	{r7, lr}
   14a52:	b084      	sub	sp, #16
   14a54:	af00      	add	r7, sp, #0
   14a56:	4603      	mov	r3, r0
   14a58:	6039      	str	r1, [r7, #0]
   14a5a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   14a5c:	2112      	movs	r1, #18
   14a5e:	f242 001a 	movw	r0, #8218	; 0x201a
   14a62:	f7ff fbd1 	bl	14208 <hciCmdAlloc>
   14a66:	60f8      	str	r0, [r7, #12]
   14a68:	68fb      	ldr	r3, [r7, #12]
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	d018      	beq.n	14aa0 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14a6e:	68fb      	ldr	r3, [r7, #12]
   14a70:	3303      	adds	r3, #3
   14a72:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14a74:	68bb      	ldr	r3, [r7, #8]
   14a76:	1c5a      	adds	r2, r3, #1
   14a78:	60ba      	str	r2, [r7, #8]
   14a7a:	88fa      	ldrh	r2, [r7, #6]
   14a7c:	b2d2      	uxtb	r2, r2
   14a7e:	701a      	strb	r2, [r3, #0]
   14a80:	68bb      	ldr	r3, [r7, #8]
   14a82:	1c5a      	adds	r2, r3, #1
   14a84:	60ba      	str	r2, [r7, #8]
   14a86:	88fa      	ldrh	r2, [r7, #6]
   14a88:	0a12      	lsrs	r2, r2, #8
   14a8a:	b292      	uxth	r2, r2
   14a8c:	b2d2      	uxtb	r2, r2
   14a8e:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   14a90:	2210      	movs	r2, #16
   14a92:	6839      	ldr	r1, [r7, #0]
   14a94:	68b8      	ldr	r0, [r7, #8]
   14a96:	f7f7 fb63 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14a9a:	68f8      	ldr	r0, [r7, #12]
   14a9c:	f7ff fbe2 	bl	14264 <hciCmdSend>
  }
}
   14aa0:	bf00      	nop
   14aa2:	3710      	adds	r7, #16
   14aa4:	46bd      	mov	sp, r7
   14aa6:	bd80      	pop	{r7, pc}

00014aa8 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   14aa8:	b580      	push	{r7, lr}
   14aaa:	b082      	sub	sp, #8
   14aac:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   14aae:	2100      	movs	r1, #0
   14ab0:	f242 0018 	movw	r0, #8216	; 0x2018
   14ab4:	f7ff fba8 	bl	14208 <hciCmdAlloc>
   14ab8:	6078      	str	r0, [r7, #4]
   14aba:	687b      	ldr	r3, [r7, #4]
   14abc:	2b00      	cmp	r3, #0
   14abe:	d002      	beq.n	14ac6 <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14ac0:	6878      	ldr	r0, [r7, #4]
   14ac2:	f7ff fbcf 	bl	14264 <hciCmdSend>
  }
}
   14ac6:	bf00      	nop
   14ac8:	3708      	adds	r7, #8
   14aca:	46bd      	mov	sp, r7
   14acc:	bd80      	pop	{r7, pc}

00014ace <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   14ace:	b580      	push	{r7, lr}
   14ad0:	b082      	sub	sp, #8
   14ad2:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   14ad4:	2100      	movs	r1, #0
   14ad6:	f242 0002 	movw	r0, #8194	; 0x2002
   14ada:	f7ff fb95 	bl	14208 <hciCmdAlloc>
   14ade:	6078      	str	r0, [r7, #4]
   14ae0:	687b      	ldr	r3, [r7, #4]
   14ae2:	2b00      	cmp	r3, #0
   14ae4:	d002      	beq.n	14aec <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14ae6:	6878      	ldr	r0, [r7, #4]
   14ae8:	f7ff fbbc 	bl	14264 <hciCmdSend>
  }
}
   14aec:	bf00      	nop
   14aee:	3708      	adds	r7, #8
   14af0:	46bd      	mov	sp, r7
   14af2:	bd80      	pop	{r7, pc}

00014af4 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   14af4:	b580      	push	{r7, lr}
   14af6:	b082      	sub	sp, #8
   14af8:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   14afa:	2100      	movs	r1, #0
   14afc:	f242 0003 	movw	r0, #8195	; 0x2003
   14b00:	f7ff fb82 	bl	14208 <hciCmdAlloc>
   14b04:	6078      	str	r0, [r7, #4]
   14b06:	687b      	ldr	r3, [r7, #4]
   14b08:	2b00      	cmp	r3, #0
   14b0a:	d002      	beq.n	14b12 <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14b0c:	6878      	ldr	r0, [r7, #4]
   14b0e:	f7ff fba9 	bl	14264 <hciCmdSend>
  }
}
   14b12:	bf00      	nop
   14b14:	3708      	adds	r7, #8
   14b16:	46bd      	mov	sp, r7
   14b18:	bd80      	pop	{r7, pc}

00014b1a <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   14b1a:	b580      	push	{r7, lr}
   14b1c:	b084      	sub	sp, #16
   14b1e:	af00      	add	r7, sp, #0
   14b20:	4603      	mov	r3, r0
   14b22:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   14b24:	2102      	movs	r1, #2
   14b26:	f242 0016 	movw	r0, #8214	; 0x2016
   14b2a:	f7ff fb6d 	bl	14208 <hciCmdAlloc>
   14b2e:	60f8      	str	r0, [r7, #12]
   14b30:	68fb      	ldr	r3, [r7, #12]
   14b32:	2b00      	cmp	r3, #0
   14b34:	d013      	beq.n	14b5e <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14b36:	68fb      	ldr	r3, [r7, #12]
   14b38:	3303      	adds	r3, #3
   14b3a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14b3c:	68bb      	ldr	r3, [r7, #8]
   14b3e:	1c5a      	adds	r2, r3, #1
   14b40:	60ba      	str	r2, [r7, #8]
   14b42:	88fa      	ldrh	r2, [r7, #6]
   14b44:	b2d2      	uxtb	r2, r2
   14b46:	701a      	strb	r2, [r3, #0]
   14b48:	68bb      	ldr	r3, [r7, #8]
   14b4a:	1c5a      	adds	r2, r3, #1
   14b4c:	60ba      	str	r2, [r7, #8]
   14b4e:	88fa      	ldrh	r2, [r7, #6]
   14b50:	0a12      	lsrs	r2, r2, #8
   14b52:	b292      	uxth	r2, r2
   14b54:	b2d2      	uxtb	r2, r2
   14b56:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14b58:	68f8      	ldr	r0, [r7, #12]
   14b5a:	f7ff fb83 	bl	14264 <hciCmdSend>
  }
}
   14b5e:	bf00      	nop
   14b60:	3710      	adds	r7, #16
   14b62:	46bd      	mov	sp, r7
   14b64:	bd80      	pop	{r7, pc}

00014b66 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   14b66:	b580      	push	{r7, lr}
   14b68:	b082      	sub	sp, #8
   14b6a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   14b6c:	2100      	movs	r1, #0
   14b6e:	f242 001c 	movw	r0, #8220	; 0x201c
   14b72:	f7ff fb49 	bl	14208 <hciCmdAlloc>
   14b76:	6078      	str	r0, [r7, #4]
   14b78:	687b      	ldr	r3, [r7, #4]
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	d002      	beq.n	14b84 <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14b7e:	6878      	ldr	r0, [r7, #4]
   14b80:	f7ff fb70 	bl	14264 <hciCmdSend>
  }
}
   14b84:	bf00      	nop
   14b86:	3708      	adds	r7, #8
   14b88:	46bd      	mov	sp, r7
   14b8a:	bd80      	pop	{r7, pc}

00014b8c <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   14b8c:	b580      	push	{r7, lr}
   14b8e:	b082      	sub	sp, #8
   14b90:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   14b92:	2100      	movs	r1, #0
   14b94:	f242 000f 	movw	r0, #8207	; 0x200f
   14b98:	f7ff fb36 	bl	14208 <hciCmdAlloc>
   14b9c:	6078      	str	r0, [r7, #4]
   14b9e:	687b      	ldr	r3, [r7, #4]
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	d002      	beq.n	14baa <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14ba4:	6878      	ldr	r0, [r7, #4]
   14ba6:	f7ff fb5d 	bl	14264 <hciCmdSend>
  }
}
   14baa:	bf00      	nop
   14bac:	3708      	adds	r7, #8
   14bae:	46bd      	mov	sp, r7
   14bb0:	bd80      	pop	{r7, pc}

00014bb2 <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   14bb2:	b580      	push	{r7, lr}
   14bb4:	b084      	sub	sp, #16
   14bb6:	af00      	add	r7, sp, #0
   14bb8:	4603      	mov	r3, r0
   14bba:	6039      	str	r1, [r7, #0]
   14bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
   14bbe:	2107      	movs	r1, #7
   14bc0:	f242 0012 	movw	r0, #8210	; 0x2012
   14bc4:	f7ff fb20 	bl	14208 <hciCmdAlloc>
   14bc8:	60f8      	str	r0, [r7, #12]
   14bca:	68fb      	ldr	r3, [r7, #12]
   14bcc:	2b00      	cmp	r3, #0
   14bce:	d011      	beq.n	14bf4 <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14bd0:	68fb      	ldr	r3, [r7, #12]
   14bd2:	3303      	adds	r3, #3
   14bd4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   14bd6:	68bb      	ldr	r3, [r7, #8]
   14bd8:	1c5a      	adds	r2, r3, #1
   14bda:	60ba      	str	r2, [r7, #8]
   14bdc:	79fa      	ldrb	r2, [r7, #7]
   14bde:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   14be0:	6839      	ldr	r1, [r7, #0]
   14be2:	68b8      	ldr	r0, [r7, #8]
   14be4:	f005 f80e 	bl	19c04 <BdaCpy>
   14be8:	68bb      	ldr	r3, [r7, #8]
   14bea:	3306      	adds	r3, #6
   14bec:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   14bee:	68f8      	ldr	r0, [r7, #12]
   14bf0:	f7ff fb38 	bl	14264 <hciCmdSend>
  }
}
   14bf4:	bf00      	nop
   14bf6:	3710      	adds	r7, #16
   14bf8:	46bd      	mov	sp, r7
   14bfa:	bd80      	pop	{r7, pc}

00014bfc <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   14bfc:	b580      	push	{r7, lr}
   14bfe:	b084      	sub	sp, #16
   14c00:	af00      	add	r7, sp, #0
   14c02:	4603      	mov	r3, r0
   14c04:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   14c06:	2101      	movs	r1, #1
   14c08:	f242 000a 	movw	r0, #8202	; 0x200a
   14c0c:	f7ff fafc 	bl	14208 <hciCmdAlloc>
   14c10:	60f8      	str	r0, [r7, #12]
   14c12:	68fb      	ldr	r3, [r7, #12]
   14c14:	2b00      	cmp	r3, #0
   14c16:	d00a      	beq.n	14c2e <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14c18:	68fb      	ldr	r3, [r7, #12]
   14c1a:	3303      	adds	r3, #3
   14c1c:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   14c1e:	68bb      	ldr	r3, [r7, #8]
   14c20:	1c5a      	adds	r2, r3, #1
   14c22:	60ba      	str	r2, [r7, #8]
   14c24:	79fa      	ldrb	r2, [r7, #7]
   14c26:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14c28:	68f8      	ldr	r0, [r7, #12]
   14c2a:	f7ff fb1b 	bl	14264 <hciCmdSend>
  }
}
   14c2e:	bf00      	nop
   14c30:	3710      	adds	r7, #16
   14c32:	46bd      	mov	sp, r7
   14c34:	bd80      	pop	{r7, pc}

00014c36 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   14c36:	b580      	push	{r7, lr}
   14c38:	b084      	sub	sp, #16
   14c3a:	af00      	add	r7, sp, #0
   14c3c:	4603      	mov	r3, r0
   14c3e:	6039      	str	r1, [r7, #0]
   14c40:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   14c42:	2120      	movs	r1, #32
   14c44:	f242 0008 	movw	r0, #8200	; 0x2008
   14c48:	f7ff fade 	bl	14208 <hciCmdAlloc>
   14c4c:	60f8      	str	r0, [r7, #12]
   14c4e:	68fb      	ldr	r3, [r7, #12]
   14c50:	2b00      	cmp	r3, #0
   14c52:	d01c      	beq.n	14c8e <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14c54:	68fb      	ldr	r3, [r7, #12]
   14c56:	3303      	adds	r3, #3
   14c58:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   14c5a:	68bb      	ldr	r3, [r7, #8]
   14c5c:	1c5a      	adds	r2, r3, #1
   14c5e:	60ba      	str	r2, [r7, #8]
   14c60:	79fa      	ldrb	r2, [r7, #7]
   14c62:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   14c64:	79fb      	ldrb	r3, [r7, #7]
   14c66:	461a      	mov	r2, r3
   14c68:	6839      	ldr	r1, [r7, #0]
   14c6a:	68b8      	ldr	r0, [r7, #8]
   14c6c:	f7f7 fa78 	bl	c160 <memcpy>
    p += len;
   14c70:	79fb      	ldrb	r3, [r7, #7]
   14c72:	68ba      	ldr	r2, [r7, #8]
   14c74:	4413      	add	r3, r2
   14c76:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   14c78:	79fb      	ldrb	r3, [r7, #7]
   14c7a:	f1c3 031f 	rsb	r3, r3, #31
   14c7e:	461a      	mov	r2, r3
   14c80:	2100      	movs	r1, #0
   14c82:	68b8      	ldr	r0, [r7, #8]
   14c84:	f7f7 fb6a 	bl	c35c <memset>
    hciCmdSend(pBuf);
   14c88:	68f8      	ldr	r0, [r7, #12]
   14c8a:	f7ff faeb 	bl	14264 <hciCmdSend>
  }
}
   14c8e:	bf00      	nop
   14c90:	3710      	adds	r7, #16
   14c92:	46bd      	mov	sp, r7
   14c94:	bd80      	pop	{r7, pc}

00014c96 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   14c96:	b590      	push	{r4, r7, lr}
   14c98:	b085      	sub	sp, #20
   14c9a:	af00      	add	r7, sp, #0
   14c9c:	4604      	mov	r4, r0
   14c9e:	4608      	mov	r0, r1
   14ca0:	4611      	mov	r1, r2
   14ca2:	461a      	mov	r2, r3
   14ca4:	4623      	mov	r3, r4
   14ca6:	80fb      	strh	r3, [r7, #6]
   14ca8:	4603      	mov	r3, r0
   14caa:	80bb      	strh	r3, [r7, #4]
   14cac:	460b      	mov	r3, r1
   14cae:	70fb      	strb	r3, [r7, #3]
   14cb0:	4613      	mov	r3, r2
   14cb2:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   14cb4:	210f      	movs	r1, #15
   14cb6:	f242 0006 	movw	r0, #8198	; 0x2006
   14cba:	f7ff faa5 	bl	14208 <hciCmdAlloc>
   14cbe:	60b8      	str	r0, [r7, #8]
   14cc0:	68bb      	ldr	r3, [r7, #8]
   14cc2:	2b00      	cmp	r3, #0
   14cc4:	d04c      	beq.n	14d60 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14cc6:	68bb      	ldr	r3, [r7, #8]
   14cc8:	3303      	adds	r3, #3
   14cca:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   14ccc:	68fb      	ldr	r3, [r7, #12]
   14cce:	1c5a      	adds	r2, r3, #1
   14cd0:	60fa      	str	r2, [r7, #12]
   14cd2:	88fa      	ldrh	r2, [r7, #6]
   14cd4:	b2d2      	uxtb	r2, r2
   14cd6:	701a      	strb	r2, [r3, #0]
   14cd8:	68fb      	ldr	r3, [r7, #12]
   14cda:	1c5a      	adds	r2, r3, #1
   14cdc:	60fa      	str	r2, [r7, #12]
   14cde:	88fa      	ldrh	r2, [r7, #6]
   14ce0:	0a12      	lsrs	r2, r2, #8
   14ce2:	b292      	uxth	r2, r2
   14ce4:	b2d2      	uxtb	r2, r2
   14ce6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   14ce8:	68fb      	ldr	r3, [r7, #12]
   14cea:	1c5a      	adds	r2, r3, #1
   14cec:	60fa      	str	r2, [r7, #12]
   14cee:	88ba      	ldrh	r2, [r7, #4]
   14cf0:	b2d2      	uxtb	r2, r2
   14cf2:	701a      	strb	r2, [r3, #0]
   14cf4:	68fb      	ldr	r3, [r7, #12]
   14cf6:	1c5a      	adds	r2, r3, #1
   14cf8:	60fa      	str	r2, [r7, #12]
   14cfa:	88ba      	ldrh	r2, [r7, #4]
   14cfc:	0a12      	lsrs	r2, r2, #8
   14cfe:	b292      	uxth	r2, r2
   14d00:	b2d2      	uxtb	r2, r2
   14d02:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   14d04:	68fb      	ldr	r3, [r7, #12]
   14d06:	1c5a      	adds	r2, r3, #1
   14d08:	60fa      	str	r2, [r7, #12]
   14d0a:	78fa      	ldrb	r2, [r7, #3]
   14d0c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   14d0e:	68fb      	ldr	r3, [r7, #12]
   14d10:	1c5a      	adds	r2, r3, #1
   14d12:	60fa      	str	r2, [r7, #12]
   14d14:	78ba      	ldrb	r2, [r7, #2]
   14d16:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   14d18:	68fb      	ldr	r3, [r7, #12]
   14d1a:	1c5a      	adds	r2, r3, #1
   14d1c:	60fa      	str	r2, [r7, #12]
   14d1e:	f897 2020 	ldrb.w	r2, [r7, #32]
   14d22:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   14d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d26:	2b00      	cmp	r3, #0
   14d28:	d007      	beq.n	14d3a <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   14d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14d2c:	68f8      	ldr	r0, [r7, #12]
   14d2e:	f004 ff69 	bl	19c04 <BdaCpy>
   14d32:	68fb      	ldr	r3, [r7, #12]
   14d34:	3306      	adds	r3, #6
   14d36:	60fb      	str	r3, [r7, #12]
   14d38:	e003      	b.n	14d42 <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
   14d3a:	68f8      	ldr	r0, [r7, #12]
   14d3c:	f004 ff84 	bl	19c48 <BdaClr>
   14d40:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   14d42:	68fb      	ldr	r3, [r7, #12]
   14d44:	1c5a      	adds	r2, r3, #1
   14d46:	60fa      	str	r2, [r7, #12]
   14d48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   14d4c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   14d4e:	68fb      	ldr	r3, [r7, #12]
   14d50:	1c5a      	adds	r2, r3, #1
   14d52:	60fa      	str	r2, [r7, #12]
   14d54:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   14d58:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14d5a:	68b8      	ldr	r0, [r7, #8]
   14d5c:	f7ff fa82 	bl	14264 <hciCmdSend>
  }
}
   14d60:	bf00      	nop
   14d62:	3714      	adds	r7, #20
   14d64:	46bd      	mov	sp, r7
   14d66:	bd90      	pop	{r4, r7, pc}

00014d68 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   14d68:	b580      	push	{r7, lr}
   14d6a:	b084      	sub	sp, #16
   14d6c:	af00      	add	r7, sp, #0
   14d6e:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   14d70:	2108      	movs	r1, #8
   14d72:	f242 0001 	movw	r0, #8193	; 0x2001
   14d76:	f7ff fa47 	bl	14208 <hciCmdAlloc>
   14d7a:	60f8      	str	r0, [r7, #12]
   14d7c:	68fb      	ldr	r3, [r7, #12]
   14d7e:	2b00      	cmp	r3, #0
   14d80:	d00a      	beq.n	14d98 <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14d82:	68fb      	ldr	r3, [r7, #12]
   14d84:	3303      	adds	r3, #3
   14d86:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   14d88:	2208      	movs	r2, #8
   14d8a:	6879      	ldr	r1, [r7, #4]
   14d8c:	68b8      	ldr	r0, [r7, #8]
   14d8e:	f7f7 f9e7 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14d92:	68f8      	ldr	r0, [r7, #12]
   14d94:	f7ff fa66 	bl	14264 <hciCmdSend>
  }
}
   14d98:	bf00      	nop
   14d9a:	3710      	adds	r7, #16
   14d9c:	46bd      	mov	sp, r7
   14d9e:	bd80      	pop	{r7, pc}

00014da0 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
   14da0:	b580      	push	{r7, lr}
   14da2:	b084      	sub	sp, #16
   14da4:	af00      	add	r7, sp, #0
   14da6:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
   14da8:	2106      	movs	r1, #6
   14daa:	f242 0005 	movw	r0, #8197	; 0x2005
   14dae:	f7ff fa2b 	bl	14208 <hciCmdAlloc>
   14db2:	60f8      	str	r0, [r7, #12]
   14db4:	68fb      	ldr	r3, [r7, #12]
   14db6:	2b00      	cmp	r3, #0
   14db8:	d00c      	beq.n	14dd4 <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14dba:	68fb      	ldr	r3, [r7, #12]
   14dbc:	3303      	adds	r3, #3
   14dbe:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
   14dc0:	6879      	ldr	r1, [r7, #4]
   14dc2:	68b8      	ldr	r0, [r7, #8]
   14dc4:	f004 ff1e 	bl	19c04 <BdaCpy>
   14dc8:	68bb      	ldr	r3, [r7, #8]
   14dca:	3306      	adds	r3, #6
   14dcc:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   14dce:	68f8      	ldr	r0, [r7, #12]
   14dd0:	f7ff fa48 	bl	14264 <hciCmdSend>
  }
}
   14dd4:	bf00      	nop
   14dd6:	3710      	adds	r7, #16
   14dd8:	46bd      	mov	sp, r7
   14dda:	bd80      	pop	{r7, pc}

00014ddc <HciLeSetScanEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanEnableCmd(uint8_t enable, uint8_t filterDup)
{
   14ddc:	b580      	push	{r7, lr}
   14dde:	b084      	sub	sp, #16
   14de0:	af00      	add	r7, sp, #0
   14de2:	4603      	mov	r3, r0
   14de4:	460a      	mov	r2, r1
   14de6:	71fb      	strb	r3, [r7, #7]
   14de8:	4613      	mov	r3, r2
   14dea:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_ENABLE, HCI_LEN_LE_SET_SCAN_ENABLE)) != NULL)
   14dec:	2102      	movs	r1, #2
   14dee:	f242 000c 	movw	r0, #8204	; 0x200c
   14df2:	f7ff fa09 	bl	14208 <hciCmdAlloc>
   14df6:	60f8      	str	r0, [r7, #12]
   14df8:	68fb      	ldr	r3, [r7, #12]
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	d00f      	beq.n	14e1e <HciLeSetScanEnableCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14dfe:	68fb      	ldr	r3, [r7, #12]
   14e00:	3303      	adds	r3, #3
   14e02:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   14e04:	68bb      	ldr	r3, [r7, #8]
   14e06:	1c5a      	adds	r2, r3, #1
   14e08:	60ba      	str	r2, [r7, #8]
   14e0a:	79fa      	ldrb	r2, [r7, #7]
   14e0c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, filterDup);
   14e0e:	68bb      	ldr	r3, [r7, #8]
   14e10:	1c5a      	adds	r2, r3, #1
   14e12:	60ba      	str	r2, [r7, #8]
   14e14:	79ba      	ldrb	r2, [r7, #6]
   14e16:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14e18:	68f8      	ldr	r0, [r7, #12]
   14e1a:	f7ff fa23 	bl	14264 <hciCmdSend>
  }
}
   14e1e:	bf00      	nop
   14e20:	3710      	adds	r7, #16
   14e22:	46bd      	mov	sp, r7
   14e24:	bd80      	pop	{r7, pc}

00014e26 <HciLeSetScanParamCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanParamCmd(uint8_t scanType, uint16_t scanInterval, uint16_t scanWindow,
                          uint8_t ownAddrType, uint8_t scanFiltPolicy)
{
   14e26:	b590      	push	{r4, r7, lr}
   14e28:	b085      	sub	sp, #20
   14e2a:	af00      	add	r7, sp, #0
   14e2c:	4604      	mov	r4, r0
   14e2e:	4608      	mov	r0, r1
   14e30:	4611      	mov	r1, r2
   14e32:	461a      	mov	r2, r3
   14e34:	4623      	mov	r3, r4
   14e36:	71fb      	strb	r3, [r7, #7]
   14e38:	4603      	mov	r3, r0
   14e3a:	80bb      	strh	r3, [r7, #4]
   14e3c:	460b      	mov	r3, r1
   14e3e:	807b      	strh	r3, [r7, #2]
   14e40:	4613      	mov	r3, r2
   14e42:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_PARAM, HCI_LEN_LE_SET_SCAN_PARAM)) != NULL)
   14e44:	2107      	movs	r1, #7
   14e46:	f242 000b 	movw	r0, #8203	; 0x200b
   14e4a:	f7ff f9dd 	bl	14208 <hciCmdAlloc>
   14e4e:	60f8      	str	r0, [r7, #12]
   14e50:	68fb      	ldr	r3, [r7, #12]
   14e52:	2b00      	cmp	r3, #0
   14e54:	d031      	beq.n	14eba <HciLeSetScanParamCmd+0x94>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14e56:	68fb      	ldr	r3, [r7, #12]
   14e58:	3303      	adds	r3, #3
   14e5a:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, scanType);
   14e5c:	68bb      	ldr	r3, [r7, #8]
   14e5e:	1c5a      	adds	r2, r3, #1
   14e60:	60ba      	str	r2, [r7, #8]
   14e62:	79fa      	ldrb	r2, [r7, #7]
   14e64:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, scanInterval);
   14e66:	68bb      	ldr	r3, [r7, #8]
   14e68:	1c5a      	adds	r2, r3, #1
   14e6a:	60ba      	str	r2, [r7, #8]
   14e6c:	88ba      	ldrh	r2, [r7, #4]
   14e6e:	b2d2      	uxtb	r2, r2
   14e70:	701a      	strb	r2, [r3, #0]
   14e72:	68bb      	ldr	r3, [r7, #8]
   14e74:	1c5a      	adds	r2, r3, #1
   14e76:	60ba      	str	r2, [r7, #8]
   14e78:	88ba      	ldrh	r2, [r7, #4]
   14e7a:	0a12      	lsrs	r2, r2, #8
   14e7c:	b292      	uxth	r2, r2
   14e7e:	b2d2      	uxtb	r2, r2
   14e80:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, scanWindow);
   14e82:	68bb      	ldr	r3, [r7, #8]
   14e84:	1c5a      	adds	r2, r3, #1
   14e86:	60ba      	str	r2, [r7, #8]
   14e88:	887a      	ldrh	r2, [r7, #2]
   14e8a:	b2d2      	uxtb	r2, r2
   14e8c:	701a      	strb	r2, [r3, #0]
   14e8e:	68bb      	ldr	r3, [r7, #8]
   14e90:	1c5a      	adds	r2, r3, #1
   14e92:	60ba      	str	r2, [r7, #8]
   14e94:	887a      	ldrh	r2, [r7, #2]
   14e96:	0a12      	lsrs	r2, r2, #8
   14e98:	b292      	uxth	r2, r2
   14e9a:	b2d2      	uxtb	r2, r2
   14e9c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   14e9e:	68bb      	ldr	r3, [r7, #8]
   14ea0:	1c5a      	adds	r2, r3, #1
   14ea2:	60ba      	str	r2, [r7, #8]
   14ea4:	79ba      	ldrb	r2, [r7, #6]
   14ea6:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   14ea8:	68bb      	ldr	r3, [r7, #8]
   14eaa:	1c5a      	adds	r2, r3, #1
   14eac:	60ba      	str	r2, [r7, #8]
   14eae:	f897 2020 	ldrb.w	r2, [r7, #32]
   14eb2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14eb4:	68f8      	ldr	r0, [r7, #12]
   14eb6:	f7ff f9d5 	bl	14264 <hciCmdSend>
  }
}
   14eba:	bf00      	nop
   14ebc:	3714      	adds	r7, #20
   14ebe:	46bd      	mov	sp, r7
   14ec0:	bd90      	pop	{r4, r7, pc}

00014ec2 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   14ec2:	b580      	push	{r7, lr}
   14ec4:	b084      	sub	sp, #16
   14ec6:	af00      	add	r7, sp, #0
   14ec8:	4603      	mov	r3, r0
   14eca:	6039      	str	r1, [r7, #0]
   14ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   14ece:	2120      	movs	r1, #32
   14ed0:	f242 0009 	movw	r0, #8201	; 0x2009
   14ed4:	f7ff f998 	bl	14208 <hciCmdAlloc>
   14ed8:	60f8      	str	r0, [r7, #12]
   14eda:	68fb      	ldr	r3, [r7, #12]
   14edc:	2b00      	cmp	r3, #0
   14ede:	d01c      	beq.n	14f1a <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14ee0:	68fb      	ldr	r3, [r7, #12]
   14ee2:	3303      	adds	r3, #3
   14ee4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   14ee6:	68bb      	ldr	r3, [r7, #8]
   14ee8:	1c5a      	adds	r2, r3, #1
   14eea:	60ba      	str	r2, [r7, #8]
   14eec:	79fa      	ldrb	r2, [r7, #7]
   14eee:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   14ef0:	79fb      	ldrb	r3, [r7, #7]
   14ef2:	461a      	mov	r2, r3
   14ef4:	6839      	ldr	r1, [r7, #0]
   14ef6:	68b8      	ldr	r0, [r7, #8]
   14ef8:	f7f7 f932 	bl	c160 <memcpy>
    p += len;
   14efc:	79fb      	ldrb	r3, [r7, #7]
   14efe:	68ba      	ldr	r2, [r7, #8]
   14f00:	4413      	add	r3, r2
   14f02:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   14f04:	79fb      	ldrb	r3, [r7, #7]
   14f06:	f1c3 031f 	rsb	r3, r3, #31
   14f0a:	461a      	mov	r2, r3
   14f0c:	2100      	movs	r1, #0
   14f0e:	68b8      	ldr	r0, [r7, #8]
   14f10:	f7f7 fa24 	bl	c35c <memset>
    hciCmdSend(pBuf);
   14f14:	68f8      	ldr	r0, [r7, #12]
   14f16:	f7ff f9a5 	bl	14264 <hciCmdSend>
  }
}
   14f1a:	bf00      	nop
   14f1c:	3710      	adds	r7, #16
   14f1e:	46bd      	mov	sp, r7
   14f20:	bd80      	pop	{r7, pc}

00014f22 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   14f22:	b580      	push	{r7, lr}
   14f24:	b086      	sub	sp, #24
   14f26:	af00      	add	r7, sp, #0
   14f28:	60b9      	str	r1, [r7, #8]
   14f2a:	607b      	str	r3, [r7, #4]
   14f2c:	4603      	mov	r3, r0
   14f2e:	81fb      	strh	r3, [r7, #14]
   14f30:	4613      	mov	r3, r2
   14f32:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   14f34:	211c      	movs	r1, #28
   14f36:	f242 0019 	movw	r0, #8217	; 0x2019
   14f3a:	f7ff f965 	bl	14208 <hciCmdAlloc>
   14f3e:	6178      	str	r0, [r7, #20]
   14f40:	697b      	ldr	r3, [r7, #20]
   14f42:	2b00      	cmp	r3, #0
   14f44:	d02e      	beq.n	14fa4 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14f46:	697b      	ldr	r3, [r7, #20]
   14f48:	3303      	adds	r3, #3
   14f4a:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
   14f4c:	693b      	ldr	r3, [r7, #16]
   14f4e:	1c5a      	adds	r2, r3, #1
   14f50:	613a      	str	r2, [r7, #16]
   14f52:	89fa      	ldrh	r2, [r7, #14]
   14f54:	b2d2      	uxtb	r2, r2
   14f56:	701a      	strb	r2, [r3, #0]
   14f58:	693b      	ldr	r3, [r7, #16]
   14f5a:	1c5a      	adds	r2, r3, #1
   14f5c:	613a      	str	r2, [r7, #16]
   14f5e:	89fa      	ldrh	r2, [r7, #14]
   14f60:	0a12      	lsrs	r2, r2, #8
   14f62:	b292      	uxth	r2, r2
   14f64:	b2d2      	uxtb	r2, r2
   14f66:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   14f68:	2208      	movs	r2, #8
   14f6a:	68b9      	ldr	r1, [r7, #8]
   14f6c:	6938      	ldr	r0, [r7, #16]
   14f6e:	f7f7 f8f7 	bl	c160 <memcpy>
    p += HCI_RAND_LEN;
   14f72:	693b      	ldr	r3, [r7, #16]
   14f74:	3308      	adds	r3, #8
   14f76:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   14f78:	693b      	ldr	r3, [r7, #16]
   14f7a:	1c5a      	adds	r2, r3, #1
   14f7c:	613a      	str	r2, [r7, #16]
   14f7e:	89ba      	ldrh	r2, [r7, #12]
   14f80:	b2d2      	uxtb	r2, r2
   14f82:	701a      	strb	r2, [r3, #0]
   14f84:	693b      	ldr	r3, [r7, #16]
   14f86:	1c5a      	adds	r2, r3, #1
   14f88:	613a      	str	r2, [r7, #16]
   14f8a:	89ba      	ldrh	r2, [r7, #12]
   14f8c:	0a12      	lsrs	r2, r2, #8
   14f8e:	b292      	uxth	r2, r2
   14f90:	b2d2      	uxtb	r2, r2
   14f92:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   14f94:	2210      	movs	r2, #16
   14f96:	6879      	ldr	r1, [r7, #4]
   14f98:	6938      	ldr	r0, [r7, #16]
   14f9a:	f7f7 f8e1 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14f9e:	6978      	ldr	r0, [r7, #20]
   14fa0:	f7ff f960 	bl	14264 <hciCmdSend>
  }
}
   14fa4:	bf00      	nop
   14fa6:	3718      	adds	r7, #24
   14fa8:	46bd      	mov	sp, r7
   14faa:	bd80      	pop	{r7, pc}

00014fac <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   14fac:	b580      	push	{r7, lr}
   14fae:	b082      	sub	sp, #8
   14fb0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   14fb2:	2100      	movs	r1, #0
   14fb4:	f241 0009 	movw	r0, #4105	; 0x1009
   14fb8:	f7ff f926 	bl	14208 <hciCmdAlloc>
   14fbc:	6078      	str	r0, [r7, #4]
   14fbe:	687b      	ldr	r3, [r7, #4]
   14fc0:	2b00      	cmp	r3, #0
   14fc2:	d002      	beq.n	14fca <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14fc4:	6878      	ldr	r0, [r7, #4]
   14fc6:	f7ff f94d 	bl	14264 <hciCmdSend>
  }
}
   14fca:	bf00      	nop
   14fcc:	3708      	adds	r7, #8
   14fce:	46bd      	mov	sp, r7
   14fd0:	bd80      	pop	{r7, pc}

00014fd2 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   14fd2:	b580      	push	{r7, lr}
   14fd4:	b082      	sub	sp, #8
   14fd6:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   14fd8:	2100      	movs	r1, #0
   14fda:	f241 0001 	movw	r0, #4097	; 0x1001
   14fde:	f7ff f913 	bl	14208 <hciCmdAlloc>
   14fe2:	6078      	str	r0, [r7, #4]
   14fe4:	687b      	ldr	r3, [r7, #4]
   14fe6:	2b00      	cmp	r3, #0
   14fe8:	d002      	beq.n	14ff0 <HciReadLocalVerInfoCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14fea:	6878      	ldr	r0, [r7, #4]
   14fec:	f7ff f93a 	bl	14264 <hciCmdSend>
  }
}
   14ff0:	bf00      	nop
   14ff2:	3708      	adds	r7, #8
   14ff4:	46bd      	mov	sp, r7
   14ff6:	bd80      	pop	{r7, pc}

00014ff8 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   14ff8:	b580      	push	{r7, lr}
   14ffa:	b084      	sub	sp, #16
   14ffc:	af00      	add	r7, sp, #0
   14ffe:	4603      	mov	r3, r0
   15000:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   15002:	2102      	movs	r1, #2
   15004:	f241 4005 	movw	r0, #5125	; 0x1405
   15008:	f7ff f8fe 	bl	14208 <hciCmdAlloc>
   1500c:	60f8      	str	r0, [r7, #12]
   1500e:	68fb      	ldr	r3, [r7, #12]
   15010:	2b00      	cmp	r3, #0
   15012:	d013      	beq.n	1503c <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15014:	68fb      	ldr	r3, [r7, #12]
   15016:	3303      	adds	r3, #3
   15018:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1501a:	68bb      	ldr	r3, [r7, #8]
   1501c:	1c5a      	adds	r2, r3, #1
   1501e:	60ba      	str	r2, [r7, #8]
   15020:	88fa      	ldrh	r2, [r7, #6]
   15022:	b2d2      	uxtb	r2, r2
   15024:	701a      	strb	r2, [r3, #0]
   15026:	68bb      	ldr	r3, [r7, #8]
   15028:	1c5a      	adds	r2, r3, #1
   1502a:	60ba      	str	r2, [r7, #8]
   1502c:	88fa      	ldrh	r2, [r7, #6]
   1502e:	0a12      	lsrs	r2, r2, #8
   15030:	b292      	uxth	r2, r2
   15032:	b2d2      	uxtb	r2, r2
   15034:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15036:	68f8      	ldr	r0, [r7, #12]
   15038:	f7ff f914 	bl	14264 <hciCmdSend>
  }
}
   1503c:	bf00      	nop
   1503e:	3710      	adds	r7, #16
   15040:	46bd      	mov	sp, r7
   15042:	bd80      	pop	{r7, pc}

00015044 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   15044:	b580      	push	{r7, lr}
   15046:	b084      	sub	sp, #16
   15048:	af00      	add	r7, sp, #0
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   1504a:	2314      	movs	r3, #20
   1504c:	71bb      	strb	r3, [r7, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   1504e:	4b13      	ldr	r3, [pc, #76]	; (1509c <HciResetCmd+0x58>)
   15050:	68db      	ldr	r3, [r3, #12]
   15052:	1d3a      	adds	r2, r7, #4
   15054:	4610      	mov	r0, r2
   15056:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15058:	e002      	b.n	15060 <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   1505a:	68f8      	ldr	r0, [r7, #12]
   1505c:	f005 fc7e 	bl	1a95c <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15060:	f107 030b 	add.w	r3, r7, #11
   15064:	4619      	mov	r1, r3
   15066:	480e      	ldr	r0, [pc, #56]	; (150a0 <HciResetCmd+0x5c>)
   15068:	f005 fcb2 	bl	1a9d0 <WsfMsgDeq>
   1506c:	60f8      	str	r0, [r7, #12]
   1506e:	68fb      	ldr	r3, [r7, #12]
   15070:	2b00      	cmp	r3, #0
   15072:	d1f2      	bne.n	1505a <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   15074:	4b0b      	ldr	r3, [pc, #44]	; (150a4 <HciResetCmd+0x60>)
   15076:	2201      	movs	r2, #1
   15078:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   1507a:	2100      	movs	r1, #0
   1507c:	f640 4003 	movw	r0, #3075	; 0xc03
   15080:	f7ff f8c2 	bl	14208 <hciCmdAlloc>
   15084:	60f8      	str	r0, [r7, #12]
   15086:	68fb      	ldr	r3, [r7, #12]
   15088:	2b00      	cmp	r3, #0
   1508a:	d002      	beq.n	15092 <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   1508c:	68f8      	ldr	r0, [r7, #12]
   1508e:	f7ff f8e9 	bl	14264 <hciCmdSend>
  }
}
   15092:	bf00      	nop
   15094:	3710      	adds	r7, #16
   15096:	46bd      	mov	sp, r7
   15098:	bd80      	pop	{r7, pc}
   1509a:	bf00      	nop
   1509c:	10009e2c 	.word	0x10009e2c
   150a0:	10009378 	.word	0x10009378
   150a4:	10009368 	.word	0x10009368

000150a8 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   150a8:	b580      	push	{r7, lr}
   150aa:	b084      	sub	sp, #16
   150ac:	af00      	add	r7, sp, #0
   150ae:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   150b0:	2108      	movs	r1, #8
   150b2:	f640 4001 	movw	r0, #3073	; 0xc01
   150b6:	f7ff f8a7 	bl	14208 <hciCmdAlloc>
   150ba:	60f8      	str	r0, [r7, #12]
   150bc:	68fb      	ldr	r3, [r7, #12]
   150be:	2b00      	cmp	r3, #0
   150c0:	d00a      	beq.n	150d8 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   150c2:	68fb      	ldr	r3, [r7, #12]
   150c4:	3303      	adds	r3, #3
   150c6:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   150c8:	2208      	movs	r2, #8
   150ca:	6879      	ldr	r1, [r7, #4]
   150cc:	68b8      	ldr	r0, [r7, #8]
   150ce:	f7f7 f847 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   150d2:	68f8      	ldr	r0, [r7, #12]
   150d4:	f7ff f8c6 	bl	14264 <hciCmdSend>
  }
}
   150d8:	bf00      	nop
   150da:	3710      	adds	r7, #16
   150dc:	46bd      	mov	sp, r7
   150de:	bd80      	pop	{r7, pc}

000150e0 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   150e0:	b580      	push	{r7, lr}
   150e2:	b084      	sub	sp, #16
   150e4:	af00      	add	r7, sp, #0
   150e6:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   150e8:	2108      	movs	r1, #8
   150ea:	f640 4063 	movw	r0, #3171	; 0xc63
   150ee:	f7ff f88b 	bl	14208 <hciCmdAlloc>
   150f2:	60f8      	str	r0, [r7, #12]
   150f4:	68fb      	ldr	r3, [r7, #12]
   150f6:	2b00      	cmp	r3, #0
   150f8:	d00a      	beq.n	15110 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   150fa:	68fb      	ldr	r3, [r7, #12]
   150fc:	3303      	adds	r3, #3
   150fe:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   15100:	2208      	movs	r2, #8
   15102:	6879      	ldr	r1, [r7, #4]
   15104:	68b8      	ldr	r0, [r7, #8]
   15106:	f7f7 f82b 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1510a:	68f8      	ldr	r0, [r7, #12]
   1510c:	f7ff f8aa 	bl	14264 <hciCmdSend>
  }
}
   15110:	bf00      	nop
   15112:	3710      	adds	r7, #16
   15114:	46bd      	mov	sp, r7
   15116:	bd80      	pop	{r7, pc}

00015118 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   15118:	b580      	push	{r7, lr}
   1511a:	b084      	sub	sp, #16
   1511c:	af00      	add	r7, sp, #0
   1511e:	4603      	mov	r3, r0
   15120:	460a      	mov	r2, r1
   15122:	80fb      	strh	r3, [r7, #6]
   15124:	4613      	mov	r3, r2
   15126:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   15128:	2104      	movs	r1, #4
   1512a:	f640 407c 	movw	r0, #3196	; 0xc7c
   1512e:	f7ff f86b 	bl	14208 <hciCmdAlloc>
   15132:	60f8      	str	r0, [r7, #12]
   15134:	68fb      	ldr	r3, [r7, #12]
   15136:	2b00      	cmp	r3, #0
   15138:	d021      	beq.n	1517e <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1513a:	68fb      	ldr	r3, [r7, #12]
   1513c:	3303      	adds	r3, #3
   1513e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15140:	68bb      	ldr	r3, [r7, #8]
   15142:	1c5a      	adds	r2, r3, #1
   15144:	60ba      	str	r2, [r7, #8]
   15146:	88fa      	ldrh	r2, [r7, #6]
   15148:	b2d2      	uxtb	r2, r2
   1514a:	701a      	strb	r2, [r3, #0]
   1514c:	68bb      	ldr	r3, [r7, #8]
   1514e:	1c5a      	adds	r2, r3, #1
   15150:	60ba      	str	r2, [r7, #8]
   15152:	88fa      	ldrh	r2, [r7, #6]
   15154:	0a12      	lsrs	r2, r2, #8
   15156:	b292      	uxth	r2, r2
   15158:	b2d2      	uxtb	r2, r2
   1515a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1515c:	68bb      	ldr	r3, [r7, #8]
   1515e:	1c5a      	adds	r2, r3, #1
   15160:	60ba      	str	r2, [r7, #8]
   15162:	88ba      	ldrh	r2, [r7, #4]
   15164:	b2d2      	uxtb	r2, r2
   15166:	701a      	strb	r2, [r3, #0]
   15168:	68bb      	ldr	r3, [r7, #8]
   1516a:	1c5a      	adds	r2, r3, #1
   1516c:	60ba      	str	r2, [r7, #8]
   1516e:	88ba      	ldrh	r2, [r7, #4]
   15170:	0a12      	lsrs	r2, r2, #8
   15172:	b292      	uxth	r2, r2
   15174:	b2d2      	uxtb	r2, r2
   15176:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15178:	68f8      	ldr	r0, [r7, #12]
   1517a:	f7ff f873 	bl	14264 <hciCmdSend>
  }
}
   1517e:	bf00      	nop
   15180:	3710      	adds	r7, #16
   15182:	46bd      	mov	sp, r7
   15184:	bd80      	pop	{r7, pc}

00015186 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   15186:	b580      	push	{r7, lr}
   15188:	b086      	sub	sp, #24
   1518a:	af00      	add	r7, sp, #0
   1518c:	60b9      	str	r1, [r7, #8]
   1518e:	607a      	str	r2, [r7, #4]
   15190:	603b      	str	r3, [r7, #0]
   15192:	4603      	mov	r3, r0
   15194:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   15196:	2127      	movs	r1, #39	; 0x27
   15198:	f242 0027 	movw	r0, #8231	; 0x2027
   1519c:	f7ff f834 	bl	14208 <hciCmdAlloc>
   151a0:	6178      	str	r0, [r7, #20]
   151a2:	697b      	ldr	r3, [r7, #20]
   151a4:	2b00      	cmp	r3, #0
   151a6:	d01e      	beq.n	151e6 <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   151a8:	697b      	ldr	r3, [r7, #20]
   151aa:	3303      	adds	r3, #3
   151ac:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   151ae:	693b      	ldr	r3, [r7, #16]
   151b0:	1c5a      	adds	r2, r3, #1
   151b2:	613a      	str	r2, [r7, #16]
   151b4:	7bfa      	ldrb	r2, [r7, #15]
   151b6:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   151b8:	68b9      	ldr	r1, [r7, #8]
   151ba:	6938      	ldr	r0, [r7, #16]
   151bc:	f004 fd22 	bl	19c04 <BdaCpy>
   151c0:	693b      	ldr	r3, [r7, #16]
   151c2:	3306      	adds	r3, #6
   151c4:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   151c6:	2210      	movs	r2, #16
   151c8:	6879      	ldr	r1, [r7, #4]
   151ca:	6938      	ldr	r0, [r7, #16]
   151cc:	f7f6 ffc8 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   151d0:	693b      	ldr	r3, [r7, #16]
   151d2:	3310      	adds	r3, #16
   151d4:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   151d6:	2210      	movs	r2, #16
   151d8:	6839      	ldr	r1, [r7, #0]
   151da:	6938      	ldr	r0, [r7, #16]
   151dc:	f7f6 ffc0 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   151e0:	6978      	ldr	r0, [r7, #20]
   151e2:	f7ff f83f 	bl	14264 <hciCmdSend>
  }
}
   151e6:	bf00      	nop
   151e8:	3718      	adds	r7, #24
   151ea:	46bd      	mov	sp, r7
   151ec:	bd80      	pop	{r7, pc}

000151ee <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   151ee:	b580      	push	{r7, lr}
   151f0:	b084      	sub	sp, #16
   151f2:	af00      	add	r7, sp, #0
   151f4:	4603      	mov	r3, r0
   151f6:	6039      	str	r1, [r7, #0]
   151f8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   151fa:	2107      	movs	r1, #7
   151fc:	f242 0028 	movw	r0, #8232	; 0x2028
   15200:	f7ff f802 	bl	14208 <hciCmdAlloc>
   15204:	60f8      	str	r0, [r7, #12]
   15206:	68fb      	ldr	r3, [r7, #12]
   15208:	2b00      	cmp	r3, #0
   1520a:	d011      	beq.n	15230 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1520c:	68fb      	ldr	r3, [r7, #12]
   1520e:	3303      	adds	r3, #3
   15210:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   15212:	68bb      	ldr	r3, [r7, #8]
   15214:	1c5a      	adds	r2, r3, #1
   15216:	60ba      	str	r2, [r7, #8]
   15218:	79fa      	ldrb	r2, [r7, #7]
   1521a:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1521c:	6839      	ldr	r1, [r7, #0]
   1521e:	68b8      	ldr	r0, [r7, #8]
   15220:	f004 fcf0 	bl	19c04 <BdaCpy>
   15224:	68bb      	ldr	r3, [r7, #8]
   15226:	3306      	adds	r3, #6
   15228:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   1522a:	68f8      	ldr	r0, [r7, #12]
   1522c:	f7ff f81a 	bl	14264 <hciCmdSend>
  }
}
   15230:	bf00      	nop
   15232:	3710      	adds	r7, #16
   15234:	46bd      	mov	sp, r7
   15236:	bd80      	pop	{r7, pc}

00015238 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   15238:	b580      	push	{r7, lr}
   1523a:	b082      	sub	sp, #8
   1523c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   1523e:	2100      	movs	r1, #0
   15240:	f242 0029 	movw	r0, #8233	; 0x2029
   15244:	f7fe ffe0 	bl	14208 <hciCmdAlloc>
   15248:	6078      	str	r0, [r7, #4]
   1524a:	687b      	ldr	r3, [r7, #4]
   1524c:	2b00      	cmp	r3, #0
   1524e:	d002      	beq.n	15256 <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
   15250:	6878      	ldr	r0, [r7, #4]
   15252:	f7ff f807 	bl	14264 <hciCmdSend>
  }
}
   15256:	bf00      	nop
   15258:	3708      	adds	r7, #8
   1525a:	46bd      	mov	sp, r7
   1525c:	bd80      	pop	{r7, pc}

0001525e <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   1525e:	b580      	push	{r7, lr}
   15260:	b082      	sub	sp, #8
   15262:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   15264:	2100      	movs	r1, #0
   15266:	f242 002a 	movw	r0, #8234	; 0x202a
   1526a:	f7fe ffcd 	bl	14208 <hciCmdAlloc>
   1526e:	6078      	str	r0, [r7, #4]
   15270:	687b      	ldr	r3, [r7, #4]
   15272:	2b00      	cmp	r3, #0
   15274:	d002      	beq.n	1527c <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
   15276:	6878      	ldr	r0, [r7, #4]
   15278:	f7fe fff4 	bl	14264 <hciCmdSend>
  }
}
   1527c:	bf00      	nop
   1527e:	3708      	adds	r7, #8
   15280:	46bd      	mov	sp, r7
   15282:	bd80      	pop	{r7, pc}

00015284 <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   15284:	b580      	push	{r7, lr}
   15286:	b084      	sub	sp, #16
   15288:	af00      	add	r7, sp, #0
   1528a:	4603      	mov	r3, r0
   1528c:	6039      	str	r1, [r7, #0]
   1528e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
   15290:	2107      	movs	r1, #7
   15292:	f242 002b 	movw	r0, #8235	; 0x202b
   15296:	f7fe ffb7 	bl	14208 <hciCmdAlloc>
   1529a:	60f8      	str	r0, [r7, #12]
   1529c:	68fb      	ldr	r3, [r7, #12]
   1529e:	2b00      	cmp	r3, #0
   152a0:	d011      	beq.n	152c6 <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   152a2:	68fb      	ldr	r3, [r7, #12]
   152a4:	3303      	adds	r3, #3
   152a6:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   152a8:	68bb      	ldr	r3, [r7, #8]
   152aa:	1c5a      	adds	r2, r3, #1
   152ac:	60ba      	str	r2, [r7, #8]
   152ae:	79fa      	ldrb	r2, [r7, #7]
   152b0:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   152b2:	6839      	ldr	r1, [r7, #0]
   152b4:	68b8      	ldr	r0, [r7, #8]
   152b6:	f004 fca5 	bl	19c04 <BdaCpy>
   152ba:	68bb      	ldr	r3, [r7, #8]
   152bc:	3306      	adds	r3, #6
   152be:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   152c0:	68f8      	ldr	r0, [r7, #12]
   152c2:	f7fe ffcf 	bl	14264 <hciCmdSend>
  }
}
   152c6:	bf00      	nop
   152c8:	3710      	adds	r7, #16
   152ca:	46bd      	mov	sp, r7
   152cc:	bd80      	pop	{r7, pc}

000152ce <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   152ce:	b580      	push	{r7, lr}
   152d0:	b084      	sub	sp, #16
   152d2:	af00      	add	r7, sp, #0
   152d4:	4603      	mov	r3, r0
   152d6:	6039      	str	r1, [r7, #0]
   152d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
   152da:	2107      	movs	r1, #7
   152dc:	f242 002c 	movw	r0, #8236	; 0x202c
   152e0:	f7fe ff92 	bl	14208 <hciCmdAlloc>
   152e4:	60f8      	str	r0, [r7, #12]
   152e6:	68fb      	ldr	r3, [r7, #12]
   152e8:	2b00      	cmp	r3, #0
   152ea:	d011      	beq.n	15310 <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   152ec:	68fb      	ldr	r3, [r7, #12]
   152ee:	3303      	adds	r3, #3
   152f0:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   152f2:	68bb      	ldr	r3, [r7, #8]
   152f4:	1c5a      	adds	r2, r3, #1
   152f6:	60ba      	str	r2, [r7, #8]
   152f8:	79fa      	ldrb	r2, [r7, #7]
   152fa:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   152fc:	6839      	ldr	r1, [r7, #0]
   152fe:	68b8      	ldr	r0, [r7, #8]
   15300:	f004 fc80 	bl	19c04 <BdaCpy>
   15304:	68bb      	ldr	r3, [r7, #8]
   15306:	3306      	adds	r3, #6
   15308:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   1530a:	68f8      	ldr	r0, [r7, #12]
   1530c:	f7fe ffaa 	bl	14264 <hciCmdSend>
  }
}
   15310:	bf00      	nop
   15312:	3710      	adds	r7, #16
   15314:	46bd      	mov	sp, r7
   15316:	bd80      	pop	{r7, pc}

00015318 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   15318:	b580      	push	{r7, lr}
   1531a:	b084      	sub	sp, #16
   1531c:	af00      	add	r7, sp, #0
   1531e:	4603      	mov	r3, r0
   15320:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   15322:	2101      	movs	r1, #1
   15324:	f242 002d 	movw	r0, #8237	; 0x202d
   15328:	f7fe ff6e 	bl	14208 <hciCmdAlloc>
   1532c:	60f8      	str	r0, [r7, #12]
   1532e:	68fb      	ldr	r3, [r7, #12]
   15330:	2b00      	cmp	r3, #0
   15332:	d00a      	beq.n	1534a <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15334:	68fb      	ldr	r3, [r7, #12]
   15336:	3303      	adds	r3, #3
   15338:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   1533a:	68bb      	ldr	r3, [r7, #8]
   1533c:	1c5a      	adds	r2, r3, #1
   1533e:	60ba      	str	r2, [r7, #8]
   15340:	79fa      	ldrb	r2, [r7, #7]
   15342:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15344:	68f8      	ldr	r0, [r7, #12]
   15346:	f7fe ff8d 	bl	14264 <hciCmdSend>
  }
}
   1534a:	bf00      	nop
   1534c:	3710      	adds	r7, #16
   1534e:	46bd      	mov	sp, r7
   15350:	bd80      	pop	{r7, pc}

00015352 <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
   15352:	b580      	push	{r7, lr}
   15354:	b084      	sub	sp, #16
   15356:	af00      	add	r7, sp, #0
   15358:	4603      	mov	r3, r0
   1535a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
   1535c:	2102      	movs	r1, #2
   1535e:	f242 002e 	movw	r0, #8238	; 0x202e
   15362:	f7fe ff51 	bl	14208 <hciCmdAlloc>
   15366:	60f8      	str	r0, [r7, #12]
   15368:	68fb      	ldr	r3, [r7, #12]
   1536a:	2b00      	cmp	r3, #0
   1536c:	d013      	beq.n	15396 <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1536e:	68fb      	ldr	r3, [r7, #12]
   15370:	3303      	adds	r3, #3
   15372:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
   15374:	68bb      	ldr	r3, [r7, #8]
   15376:	1c5a      	adds	r2, r3, #1
   15378:	60ba      	str	r2, [r7, #8]
   1537a:	88fa      	ldrh	r2, [r7, #6]
   1537c:	b2d2      	uxtb	r2, r2
   1537e:	701a      	strb	r2, [r3, #0]
   15380:	68bb      	ldr	r3, [r7, #8]
   15382:	1c5a      	adds	r2, r3, #1
   15384:	60ba      	str	r2, [r7, #8]
   15386:	88fa      	ldrh	r2, [r7, #6]
   15388:	0a12      	lsrs	r2, r2, #8
   1538a:	b292      	uxth	r2, r2
   1538c:	b2d2      	uxtb	r2, r2
   1538e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15390:	68f8      	ldr	r0, [r7, #12]
   15392:	f7fe ff67 	bl	14264 <hciCmdSend>
  }
}
   15396:	bf00      	nop
   15398:	3710      	adds	r7, #16
   1539a:	46bd      	mov	sp, r7
   1539c:	bd80      	pop	{r7, pc}

0001539e <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   1539e:	b580      	push	{r7, lr}
   153a0:	b084      	sub	sp, #16
   153a2:	af00      	add	r7, sp, #0
   153a4:	4603      	mov	r3, r0
   153a6:	6039      	str	r1, [r7, #0]
   153a8:	71fb      	strb	r3, [r7, #7]
   153aa:	4613      	mov	r3, r2
   153ac:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   153ae:	2108      	movs	r1, #8
   153b0:	f242 004e 	movw	r0, #8270	; 0x204e
   153b4:	f7fe ff28 	bl	14208 <hciCmdAlloc>
   153b8:	60f8      	str	r0, [r7, #12]
   153ba:	68fb      	ldr	r3, [r7, #12]
   153bc:	2b00      	cmp	r3, #0
   153be:	d016      	beq.n	153ee <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   153c0:	68fb      	ldr	r3, [r7, #12]
   153c2:	3303      	adds	r3, #3
   153c4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   153c6:	68bb      	ldr	r3, [r7, #8]
   153c8:	1c5a      	adds	r2, r3, #1
   153ca:	60ba      	str	r2, [r7, #8]
   153cc:	79fa      	ldrb	r2, [r7, #7]
   153ce:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   153d0:	6839      	ldr	r1, [r7, #0]
   153d2:	68b8      	ldr	r0, [r7, #8]
   153d4:	f004 fc16 	bl	19c04 <BdaCpy>
   153d8:	68bb      	ldr	r3, [r7, #8]
   153da:	3306      	adds	r3, #6
   153dc:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
   153de:	68bb      	ldr	r3, [r7, #8]
   153e0:	1c5a      	adds	r2, r3, #1
   153e2:	60ba      	str	r2, [r7, #8]
   153e4:	79ba      	ldrb	r2, [r7, #6]
   153e6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   153e8:	68f8      	ldr	r0, [r7, #12]
   153ea:	f7fe ff3b 	bl	14264 <hciCmdSend>
  }
}
   153ee:	bf00      	nop
   153f0:	3710      	adds	r7, #16
   153f2:	46bd      	mov	sp, r7
   153f4:	bd80      	pop	{r7, pc}

000153f6 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   153f6:	b580      	push	{r7, lr}
   153f8:	b084      	sub	sp, #16
   153fa:	af00      	add	r7, sp, #0
   153fc:	4603      	mov	r3, r0
   153fe:	603a      	str	r2, [r7, #0]
   15400:	80fb      	strh	r3, [r7, #6]
   15402:	460b      	mov	r3, r1
   15404:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
   15406:	797b      	ldrb	r3, [r7, #5]
   15408:	b29a      	uxth	r2, r3
   1540a:	88fb      	ldrh	r3, [r7, #6]
   1540c:	4611      	mov	r1, r2
   1540e:	4618      	mov	r0, r3
   15410:	f7fe fefa 	bl	14208 <hciCmdAlloc>
   15414:	60f8      	str	r0, [r7, #12]
   15416:	68fb      	ldr	r3, [r7, #12]
   15418:	2b00      	cmp	r3, #0
   1541a:	d00b      	beq.n	15434 <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1541c:	68fb      	ldr	r3, [r7, #12]
   1541e:	3303      	adds	r3, #3
   15420:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
   15422:	797b      	ldrb	r3, [r7, #5]
   15424:	461a      	mov	r2, r3
   15426:	6839      	ldr	r1, [r7, #0]
   15428:	68b8      	ldr	r0, [r7, #8]
   1542a:	f7f6 fe99 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1542e:	68f8      	ldr	r0, [r7, #12]
   15430:	f7fe ff18 	bl	14264 <hciCmdSend>
  }
}
   15434:	bf00      	nop
   15436:	3710      	adds	r7, #16
   15438:	46bd      	mov	sp, r7
   1543a:	bd80      	pop	{r7, pc}

0001543c <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   1543c:	b480      	push	{r7}
   1543e:	b085      	sub	sp, #20
   15440:	af00      	add	r7, sp, #0
   15442:	4603      	mov	r3, r0
   15444:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   15446:	4b13      	ldr	r3, [pc, #76]	; (15494 <hciCoreConnAlloc+0x58>)
   15448:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1544a:	2308      	movs	r3, #8
   1544c:	73fb      	strb	r3, [r7, #15]
   1544e:	e018      	b.n	15482 <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   15450:	68bb      	ldr	r3, [r7, #8]
   15452:	8a1b      	ldrh	r3, [r3, #16]
   15454:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15458:	4293      	cmp	r3, r2
   1545a:	d10c      	bne.n	15476 <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   1545c:	68bb      	ldr	r3, [r7, #8]
   1545e:	88fa      	ldrh	r2, [r7, #6]
   15460:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   15462:	68bb      	ldr	r3, [r7, #8]
   15464:	2200      	movs	r2, #0
   15466:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   15468:	68bb      	ldr	r3, [r7, #8]
   1546a:	2200      	movs	r2, #0
   1546c:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   1546e:	68bb      	ldr	r3, [r7, #8]
   15470:	2200      	movs	r2, #0
   15472:	761a      	strb	r2, [r3, #24]

      return;
   15474:	e008      	b.n	15488 <hciCoreConnAlloc+0x4c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   15476:	7bfb      	ldrb	r3, [r7, #15]
   15478:	3b01      	subs	r3, #1
   1547a:	73fb      	strb	r3, [r7, #15]
   1547c:	68bb      	ldr	r3, [r7, #8]
   1547e:	331c      	adds	r3, #28
   15480:	60bb      	str	r3, [r7, #8]
   15482:	7bfb      	ldrb	r3, [r7, #15]
   15484:	2b00      	cmp	r3, #0
   15486:	d1e3      	bne.n	15450 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   15488:	3714      	adds	r7, #20
   1548a:	46bd      	mov	sp, r7
   1548c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15490:	4770      	bx	lr
   15492:	bf00      	nop
   15494:	10009384 	.word	0x10009384

00015498 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   15498:	b580      	push	{r7, lr}
   1549a:	b084      	sub	sp, #16
   1549c:	af00      	add	r7, sp, #0
   1549e:	4603      	mov	r3, r0
   154a0:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   154a2:	4b1d      	ldr	r3, [pc, #116]	; (15518 <hciCoreConnFree+0x80>)
   154a4:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   154a6:	2308      	movs	r3, #8
   154a8:	73fb      	strb	r3, [r7, #15]
   154aa:	e02f      	b.n	1550c <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
   154ac:	68bb      	ldr	r3, [r7, #8]
   154ae:	8a1b      	ldrh	r3, [r3, #16]
   154b0:	88fa      	ldrh	r2, [r7, #6]
   154b2:	429a      	cmp	r2, r3
   154b4:	d124      	bne.n	15500 <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   154b6:	68bb      	ldr	r3, [r7, #8]
   154b8:	681b      	ldr	r3, [r3, #0]
   154ba:	2b00      	cmp	r3, #0
   154bc:	d007      	beq.n	154ce <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   154be:	68bb      	ldr	r3, [r7, #8]
   154c0:	681b      	ldr	r3, [r3, #0]
   154c2:	4618      	mov	r0, r3
   154c4:	f005 fa4a 	bl	1a95c <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   154c8:	68bb      	ldr	r3, [r7, #8]
   154ca:	2200      	movs	r2, #0
   154cc:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   154ce:	68bb      	ldr	r3, [r7, #8]
   154d0:	2200      	movs	r2, #0
   154d2:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   154d4:	68bb      	ldr	r3, [r7, #8]
   154d6:	689b      	ldr	r3, [r3, #8]
   154d8:	2b00      	cmp	r3, #0
   154da:	d007      	beq.n	154ec <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   154dc:	68bb      	ldr	r3, [r7, #8]
   154de:	689b      	ldr	r3, [r3, #8]
   154e0:	4618      	mov	r0, r3
   154e2:	f005 fa3b 	bl	1a95c <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   154e6:	68bb      	ldr	r3, [r7, #8]
   154e8:	2200      	movs	r2, #0
   154ea:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   154ec:	68bb      	ldr	r3, [r7, #8]
   154ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   154f2:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   154f4:	68bb      	ldr	r3, [r7, #8]
   154f6:	7e5b      	ldrb	r3, [r3, #25]
   154f8:	4618      	mov	r0, r3
   154fa:	f000 f895 	bl	15628 <hciCoreTxReady>

      return;
   154fe:	e008      	b.n	15512 <hciCoreConnFree+0x7a>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   15500:	7bfb      	ldrb	r3, [r7, #15]
   15502:	3b01      	subs	r3, #1
   15504:	73fb      	strb	r3, [r7, #15]
   15506:	68bb      	ldr	r3, [r7, #8]
   15508:	331c      	adds	r3, #28
   1550a:	60bb      	str	r3, [r7, #8]
   1550c:	7bfb      	ldrb	r3, [r7, #15]
   1550e:	2b00      	cmp	r3, #0
   15510:	d1cc      	bne.n	154ac <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   15512:	3710      	adds	r7, #16
   15514:	46bd      	mov	sp, r7
   15516:	bd80      	pop	{r7, pc}
   15518:	10009384 	.word	0x10009384

0001551c <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   1551c:	b480      	push	{r7}
   1551e:	b085      	sub	sp, #20
   15520:	af00      	add	r7, sp, #0
   15522:	4603      	mov	r3, r0
   15524:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   15526:	4b0e      	ldr	r3, [pc, #56]	; (15560 <hciCoreConnByHandle+0x44>)
   15528:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1552a:	2308      	movs	r3, #8
   1552c:	73fb      	strb	r3, [r7, #15]
   1552e:	e00c      	b.n	1554a <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
   15530:	68bb      	ldr	r3, [r7, #8]
   15532:	8a1b      	ldrh	r3, [r3, #16]
   15534:	88fa      	ldrh	r2, [r7, #6]
   15536:	429a      	cmp	r2, r3
   15538:	d101      	bne.n	1553e <hciCoreConnByHandle+0x22>
    {
      return pConn;
   1553a:	68bb      	ldr	r3, [r7, #8]
   1553c:	e009      	b.n	15552 <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1553e:	7bfb      	ldrb	r3, [r7, #15]
   15540:	3b01      	subs	r3, #1
   15542:	73fb      	strb	r3, [r7, #15]
   15544:	68bb      	ldr	r3, [r7, #8]
   15546:	331c      	adds	r3, #28
   15548:	60bb      	str	r3, [r7, #8]
   1554a:	7bfb      	ldrb	r3, [r7, #15]
   1554c:	2b00      	cmp	r3, #0
   1554e:	d1ef      	bne.n	15530 <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   15550:	2300      	movs	r3, #0
}
   15552:	4618      	mov	r0, r3
   15554:	3714      	adds	r7, #20
   15556:	46bd      	mov	sp, r7
   15558:	f85d 7b04 	ldr.w	r7, [sp], #4
   1555c:	4770      	bx	lr
   1555e:	bf00      	nop
   15560:	10009384 	.word	0x10009384

00015564 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   15564:	b480      	push	{r7}
   15566:	b083      	sub	sp, #12
   15568:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1556a:	4b10      	ldr	r3, [pc, #64]	; (155ac <hciCoreNextConnFragment+0x48>)
   1556c:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1556e:	2308      	movs	r3, #8
   15570:	71fb      	strb	r3, [r7, #7]
   15572:	e011      	b.n	15598 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   15574:	683b      	ldr	r3, [r7, #0]
   15576:	8a1b      	ldrh	r3, [r3, #16]
   15578:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1557c:	4293      	cmp	r3, r2
   1557e:	d005      	beq.n	1558c <hciCoreNextConnFragment+0x28>
   15580:	683b      	ldr	r3, [r7, #0]
   15582:	7d9b      	ldrb	r3, [r3, #22]
   15584:	2b00      	cmp	r3, #0
   15586:	d001      	beq.n	1558c <hciCoreNextConnFragment+0x28>
    {
      return pConn;
   15588:	683b      	ldr	r3, [r7, #0]
   1558a:	e009      	b.n	155a0 <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1558c:	79fb      	ldrb	r3, [r7, #7]
   1558e:	3b01      	subs	r3, #1
   15590:	71fb      	strb	r3, [r7, #7]
   15592:	683b      	ldr	r3, [r7, #0]
   15594:	331c      	adds	r3, #28
   15596:	603b      	str	r3, [r7, #0]
   15598:	79fb      	ldrb	r3, [r7, #7]
   1559a:	2b00      	cmp	r3, #0
   1559c:	d1ea      	bne.n	15574 <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
   1559e:	2300      	movs	r3, #0
}
   155a0:	4618      	mov	r0, r3
   155a2:	370c      	adds	r7, #12
   155a4:	46bd      	mov	sp, r7
   155a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   155aa:	4770      	bx	lr
   155ac:	10009384 	.word	0x10009384

000155b0 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   155b0:	b580      	push	{r7, lr}
   155b2:	b082      	sub	sp, #8
   155b4:	af00      	add	r7, sp, #0
   155b6:	4603      	mov	r3, r0
   155b8:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   155ba:	88fb      	ldrh	r3, [r7, #6]
   155bc:	4618      	mov	r0, r3
   155be:	f7ff ff3d 	bl	1543c <hciCoreConnAlloc>
}
   155c2:	bf00      	nop
   155c4:	3708      	adds	r7, #8
   155c6:	46bd      	mov	sp, r7
   155c8:	bd80      	pop	{r7, pc}

000155ca <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   155ca:	b580      	push	{r7, lr}
   155cc:	b082      	sub	sp, #8
   155ce:	af00      	add	r7, sp, #0
   155d0:	4603      	mov	r3, r0
   155d2:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   155d4:	88fb      	ldrh	r3, [r7, #6]
   155d6:	4618      	mov	r0, r3
   155d8:	f7ff ff5e 	bl	15498 <hciCoreConnFree>
}
   155dc:	bf00      	nop
   155de:	3708      	adds	r7, #8
   155e0:	46bd      	mov	sp, r7
   155e2:	bd80      	pop	{r7, pc}

000155e4 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   155e4:	b580      	push	{r7, lr}
   155e6:	b082      	sub	sp, #8
   155e8:	af00      	add	r7, sp, #0
   155ea:	6078      	str	r0, [r7, #4]
   155ec:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   155ee:	687b      	ldr	r3, [r7, #4]
   155f0:	7e5b      	ldrb	r3, [r3, #25]
   155f2:	3301      	adds	r3, #1
   155f4:	b2da      	uxtb	r2, r3
   155f6:	687b      	ldr	r3, [r7, #4]
   155f8:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   155fa:	6839      	ldr	r1, [r7, #0]
   155fc:	6878      	ldr	r0, [r7, #4]
   155fe:	f002 fa47 	bl	17a90 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   15602:	4b08      	ldr	r3, [pc, #32]	; (15624 <hciCoreSendAclData+0x40>)
   15604:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   15608:	2b00      	cmp	r3, #0
   1560a:	d007      	beq.n	1561c <hciCoreSendAclData+0x38>
  {
    hciCoreCb.availBufs--;
   1560c:	4b05      	ldr	r3, [pc, #20]	; (15624 <hciCoreSendAclData+0x40>)
   1560e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   15612:	3b01      	subs	r3, #1
   15614:	b2da      	uxtb	r2, r3
   15616:	4b03      	ldr	r3, [pc, #12]	; (15624 <hciCoreSendAclData+0x40>)
   15618:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   1561c:	bf00      	nop
   1561e:	3708      	adds	r7, #8
   15620:	46bd      	mov	sp, r7
   15622:	bd80      	pop	{r7, pc}
   15624:	10009384 	.word	0x10009384

00015628 <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   15628:	b580      	push	{r7, lr}
   1562a:	b086      	sub	sp, #24
   1562c:	af00      	add	r7, sp, #0
   1562e:	4603      	mov	r3, r0
   15630:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   15632:	79fb      	ldrb	r3, [r7, #7]
   15634:	2b00      	cmp	r3, #0
   15636:	d050      	beq.n	156da <hciCoreTxReady+0xb2>
  {
    hciCoreCb.availBufs += bufs;
   15638:	4b2d      	ldr	r3, [pc, #180]	; (156f0 <hciCoreTxReady+0xc8>)
   1563a:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   1563e:	79fb      	ldrb	r3, [r7, #7]
   15640:	4413      	add	r3, r2
   15642:	b2da      	uxtb	r2, r3
   15644:	4b2a      	ldr	r3, [pc, #168]	; (156f0 <hciCoreTxReady+0xc8>)
   15646:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   1564a:	4b29      	ldr	r3, [pc, #164]	; (156f0 <hciCoreTxReady+0xc8>)
   1564c:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   15650:	4b27      	ldr	r3, [pc, #156]	; (156f0 <hciCoreTxReady+0xc8>)
   15652:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   15656:	429a      	cmp	r2, r3
   15658:	d93f      	bls.n	156da <hciCoreTxReady+0xb2>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   1565a:	4b25      	ldr	r3, [pc, #148]	; (156f0 <hciCoreTxReady+0xc8>)
   1565c:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   15660:	4b23      	ldr	r3, [pc, #140]	; (156f0 <hciCoreTxReady+0xc8>)
   15662:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   15666:	e038      	b.n	156da <hciCoreTxReady+0xb2>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   15668:	2000      	movs	r0, #0
   1566a:	f000 f88d 	bl	15788 <hciCoreTxAclContinue>
   1566e:	4603      	mov	r3, r0
   15670:	2b00      	cmp	r3, #0
   15672:	d132      	bne.n	156da <hciCoreTxReady+0xb2>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   15674:	f107 030b 	add.w	r3, r7, #11
   15678:	4619      	mov	r1, r3
   1567a:	481e      	ldr	r0, [pc, #120]	; (156f4 <hciCoreTxReady+0xcc>)
   1567c:	f005 f9a8 	bl	1a9d0 <WsfMsgDeq>
   15680:	6178      	str	r0, [r7, #20]
   15682:	697b      	ldr	r3, [r7, #20]
   15684:	2b00      	cmp	r3, #0
   15686:	d02e      	beq.n	156e6 <hciCoreTxReady+0xbe>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   15688:	697b      	ldr	r3, [r7, #20]
   1568a:	781b      	ldrb	r3, [r3, #0]
   1568c:	b29a      	uxth	r2, r3
   1568e:	697b      	ldr	r3, [r7, #20]
   15690:	3301      	adds	r3, #1
   15692:	781b      	ldrb	r3, [r3, #0]
   15694:	b29b      	uxth	r3, r3
   15696:	021b      	lsls	r3, r3, #8
   15698:	b29b      	uxth	r3, r3
   1569a:	4413      	add	r3, r2
   1569c:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   1569e:	697b      	ldr	r3, [r7, #20]
   156a0:	3302      	adds	r3, #2
   156a2:	781b      	ldrb	r3, [r3, #0]
   156a4:	b29a      	uxth	r2, r3
   156a6:	697b      	ldr	r3, [r7, #20]
   156a8:	3303      	adds	r3, #3
   156aa:	781b      	ldrb	r3, [r3, #0]
   156ac:	b29b      	uxth	r3, r3
   156ae:	021b      	lsls	r3, r3, #8
   156b0:	b29b      	uxth	r3, r3
   156b2:	4413      	add	r3, r2
   156b4:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   156b6:	8a7b      	ldrh	r3, [r7, #18]
   156b8:	4618      	mov	r0, r3
   156ba:	f7ff ff2f 	bl	1551c <hciCoreConnByHandle>
   156be:	60f8      	str	r0, [r7, #12]
   156c0:	68fb      	ldr	r3, [r7, #12]
   156c2:	2b00      	cmp	r3, #0
   156c4:	d006      	beq.n	156d4 <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
   156c6:	8a3b      	ldrh	r3, [r7, #16]
   156c8:	697a      	ldr	r2, [r7, #20]
   156ca:	4619      	mov	r1, r3
   156cc:	68f8      	ldr	r0, [r7, #12]
   156ce:	f000 f813 	bl	156f8 <hciCoreTxAclStart>
   156d2:	e002      	b.n	156da <hciCoreTxReady+0xb2>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   156d4:	6978      	ldr	r0, [r7, #20]
   156d6:	f005 f941 	bl	1a95c <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   156da:	4b05      	ldr	r3, [pc, #20]	; (156f0 <hciCoreTxReady+0xc8>)
   156dc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   156e0:	2b00      	cmp	r3, #0
   156e2:	d1c1      	bne.n	15668 <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   156e4:	e000      	b.n	156e8 <hciCoreTxReady+0xc0>
        break;
   156e6:	bf00      	nop
}
   156e8:	bf00      	nop
   156ea:	3718      	adds	r7, #24
   156ec:	46bd      	mov	sp, r7
   156ee:	bd80      	pop	{r7, pc}
   156f0:	10009384 	.word	0x10009384
   156f4:	10009474 	.word	0x10009474

000156f8 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   156f8:	b580      	push	{r7, lr}
   156fa:	b086      	sub	sp, #24
   156fc:	af00      	add	r7, sp, #0
   156fe:	60f8      	str	r0, [r7, #12]
   15700:	460b      	mov	r3, r1
   15702:	607a      	str	r2, [r7, #4]
   15704:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   15706:	f000 fb85 	bl	15e14 <HciGetBufSize>
   1570a:	4603      	mov	r3, r0
   1570c:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   1570e:	897a      	ldrh	r2, [r7, #10]
   15710:	8afb      	ldrh	r3, [r7, #22]
   15712:	429a      	cmp	r2, r3
   15714:	d92d      	bls.n	15772 <hciCoreTxAclStart+0x7a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   15716:	897a      	ldrh	r2, [r7, #10]
   15718:	8afb      	ldrh	r3, [r7, #22]
   1571a:	1ad3      	subs	r3, r2, r3
   1571c:	b29a      	uxth	r2, r3
   1571e:	68fb      	ldr	r3, [r7, #12]
   15720:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   15722:	8afb      	ldrh	r3, [r7, #22]
   15724:	687a      	ldr	r2, [r7, #4]
   15726:	441a      	add	r2, r3
   15728:	68fb      	ldr	r3, [r7, #12]
   1572a:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   1572c:	68fb      	ldr	r3, [r7, #12]
   1572e:	687a      	ldr	r2, [r7, #4]
   15730:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   15732:	68fb      	ldr	r3, [r7, #12]
   15734:	2201      	movs	r2, #1
   15736:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   15738:	687b      	ldr	r3, [r7, #4]
   1573a:	3302      	adds	r3, #2
   1573c:	8afa      	ldrh	r2, [r7, #22]
   1573e:	b2d2      	uxtb	r2, r2
   15740:	701a      	strb	r2, [r3, #0]
   15742:	687b      	ldr	r3, [r7, #4]
   15744:	3303      	adds	r3, #3
   15746:	8afa      	ldrh	r2, [r7, #22]
   15748:	0a12      	lsrs	r2, r2, #8
   1574a:	b292      	uxth	r2, r2
   1574c:	b2d2      	uxtb	r2, r2
   1574e:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   15750:	6879      	ldr	r1, [r7, #4]
   15752:	68f8      	ldr	r0, [r7, #12]
   15754:	f7ff ff46 	bl	155e4 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   15758:	bf00      	nop
   1575a:	4b0a      	ldr	r3, [pc, #40]	; (15784 <hciCoreTxAclStart+0x8c>)
   1575c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   15760:	2b00      	cmp	r3, #0
   15762:	d00a      	beq.n	1577a <hciCoreTxAclStart+0x82>
   15764:	68f8      	ldr	r0, [r7, #12]
   15766:	f000 f80f 	bl	15788 <hciCoreTxAclContinue>
   1576a:	4603      	mov	r3, r0
   1576c:	2b00      	cmp	r3, #0
   1576e:	d1f4      	bne.n	1575a <hciCoreTxAclStart+0x62>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   15770:	e003      	b.n	1577a <hciCoreTxAclStart+0x82>
    hciCoreSendAclData(pConn, pData);
   15772:	6879      	ldr	r1, [r7, #4]
   15774:	68f8      	ldr	r0, [r7, #12]
   15776:	f7ff ff35 	bl	155e4 <hciCoreSendAclData>
}
   1577a:	bf00      	nop
   1577c:	3718      	adds	r7, #24
   1577e:	46bd      	mov	sp, r7
   15780:	bd80      	pop	{r7, pc}
   15782:	bf00      	nop
   15784:	10009384 	.word	0x10009384

00015788 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   15788:	b590      	push	{r4, r7, lr}
   1578a:	b085      	sub	sp, #20
   1578c:	af00      	add	r7, sp, #0
   1578e:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   15790:	687b      	ldr	r3, [r7, #4]
   15792:	2b00      	cmp	r3, #0
   15794:	d102      	bne.n	1579c <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
   15796:	f7ff fee5 	bl	15564 <hciCoreNextConnFragment>
   1579a:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
   1579c:	687b      	ldr	r3, [r7, #4]
   1579e:	2b00      	cmp	r3, #0
   157a0:	d049      	beq.n	15836 <hciCoreTxAclContinue+0xae>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   157a2:	687b      	ldr	r3, [r7, #4]
   157a4:	8a5c      	ldrh	r4, [r3, #18]
   157a6:	f000 fb35 	bl	15e14 <HciGetBufSize>
   157aa:	4603      	mov	r3, r0
   157ac:	429c      	cmp	r4, r3
   157ae:	d202      	bcs.n	157b6 <hciCoreTxAclContinue+0x2e>
   157b0:	687b      	ldr	r3, [r7, #4]
   157b2:	8a5b      	ldrh	r3, [r3, #18]
   157b4:	e002      	b.n	157bc <hciCoreTxAclContinue+0x34>
   157b6:	f000 fb2d 	bl	15e14 <HciGetBufSize>
   157ba:	4603      	mov	r3, r0
   157bc:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
   157be:	89fb      	ldrh	r3, [r7, #14]
   157c0:	2b00      	cmp	r3, #0
   157c2:	d038      	beq.n	15836 <hciCoreTxAclContinue+0xae>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   157c4:	687b      	ldr	r3, [r7, #4]
   157c6:	8a5a      	ldrh	r2, [r3, #18]
   157c8:	89fb      	ldrh	r3, [r7, #14]
   157ca:	1ad3      	subs	r3, r2, r3
   157cc:	b29a      	uxth	r2, r3
   157ce:	687b      	ldr	r3, [r7, #4]
   157d0:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   157d2:	687b      	ldr	r3, [r7, #4]
   157d4:	685b      	ldr	r3, [r3, #4]
   157d6:	687a      	ldr	r2, [r7, #4]
   157d8:	8a12      	ldrh	r2, [r2, #16]
   157da:	b2d2      	uxtb	r2, r2
   157dc:	701a      	strb	r2, [r3, #0]
   157de:	687b      	ldr	r3, [r7, #4]
   157e0:	685b      	ldr	r3, [r3, #4]
   157e2:	3301      	adds	r3, #1
   157e4:	687a      	ldr	r2, [r7, #4]
   157e6:	8a12      	ldrh	r2, [r2, #16]
   157e8:	0a12      	lsrs	r2, r2, #8
   157ea:	b292      	uxth	r2, r2
   157ec:	f042 0210 	orr.w	r2, r2, #16
   157f0:	b292      	uxth	r2, r2
   157f2:	b2d2      	uxtb	r2, r2
   157f4:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   157f6:	687b      	ldr	r3, [r7, #4]
   157f8:	685b      	ldr	r3, [r3, #4]
   157fa:	3302      	adds	r3, #2
   157fc:	89fa      	ldrh	r2, [r7, #14]
   157fe:	b2d2      	uxtb	r2, r2
   15800:	701a      	strb	r2, [r3, #0]
   15802:	687b      	ldr	r3, [r7, #4]
   15804:	685b      	ldr	r3, [r3, #4]
   15806:	3303      	adds	r3, #3
   15808:	89fa      	ldrh	r2, [r7, #14]
   1580a:	0a12      	lsrs	r2, r2, #8
   1580c:	b292      	uxth	r2, r2
   1580e:	b2d2      	uxtb	r2, r2
   15810:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   15812:	687b      	ldr	r3, [r7, #4]
   15814:	685b      	ldr	r3, [r3, #4]
   15816:	4619      	mov	r1, r3
   15818:	6878      	ldr	r0, [r7, #4]
   1581a:	f7ff fee3 	bl	155e4 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   1581e:	687b      	ldr	r3, [r7, #4]
   15820:	8a5b      	ldrh	r3, [r3, #18]
   15822:	2b00      	cmp	r3, #0
   15824:	d005      	beq.n	15832 <hciCoreTxAclContinue+0xaa>
      {
        pConn->pNextTxFrag += aclLen;
   15826:	687b      	ldr	r3, [r7, #4]
   15828:	685a      	ldr	r2, [r3, #4]
   1582a:	89fb      	ldrh	r3, [r7, #14]
   1582c:	441a      	add	r2, r3
   1582e:	687b      	ldr	r3, [r7, #4]
   15830:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   15832:	2301      	movs	r3, #1
   15834:	e000      	b.n	15838 <hciCoreTxAclContinue+0xb0>
    }
  }

  return FALSE;
   15836:	2300      	movs	r3, #0
}
   15838:	4618      	mov	r0, r3
   1583a:	3714      	adds	r7, #20
   1583c:	46bd      	mov	sp, r7
   1583e:	bd90      	pop	{r4, r7, pc}

00015840 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   15840:	b580      	push	{r7, lr}
   15842:	b082      	sub	sp, #8
   15844:	af00      	add	r7, sp, #0
   15846:	6078      	str	r0, [r7, #4]
   15848:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   1584a:	687b      	ldr	r3, [r7, #4]
   1584c:	7d9b      	ldrb	r3, [r3, #22]
   1584e:	2b00      	cmp	r3, #0
   15850:	d00f      	beq.n	15872 <hciCoreTxAclComplete+0x32>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   15852:	687b      	ldr	r3, [r7, #4]
   15854:	8a5b      	ldrh	r3, [r3, #18]
   15856:	2b00      	cmp	r3, #0
   15858:	d111      	bne.n	1587e <hciCoreTxAclComplete+0x3e>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   1585a:	687b      	ldr	r3, [r7, #4]
   1585c:	681b      	ldr	r3, [r3, #0]
   1585e:	4618      	mov	r0, r3
   15860:	f005 f87c 	bl	1a95c <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   15864:	687b      	ldr	r3, [r7, #4]
   15866:	2200      	movs	r2, #0
   15868:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   1586a:	687b      	ldr	r3, [r7, #4]
   1586c:	2200      	movs	r2, #0
   1586e:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   15870:	e005      	b.n	1587e <hciCoreTxAclComplete+0x3e>
  else if (pData != NULL)
   15872:	683b      	ldr	r3, [r7, #0]
   15874:	2b00      	cmp	r3, #0
   15876:	d002      	beq.n	1587e <hciCoreTxAclComplete+0x3e>
    WsfMsgFree(pData);
   15878:	6838      	ldr	r0, [r7, #0]
   1587a:	f005 f86f 	bl	1a95c <WsfMsgFree>
}
   1587e:	bf00      	nop
   15880:	3708      	adds	r7, #8
   15882:	46bd      	mov	sp, r7
   15884:	bd80      	pop	{r7, pc}
	...

00015888 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   15888:	b580      	push	{r7, lr}
   1588a:	b088      	sub	sp, #32
   1588c:	af00      	add	r7, sp, #0
   1588e:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   15890:	2300      	movs	r3, #0
   15892:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   15894:	2301      	movs	r3, #1
   15896:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
   15898:	687b      	ldr	r3, [r7, #4]
   1589a:	781b      	ldrb	r3, [r3, #0]
   1589c:	b29a      	uxth	r2, r3
   1589e:	687b      	ldr	r3, [r7, #4]
   158a0:	3301      	adds	r3, #1
   158a2:	781b      	ldrb	r3, [r3, #0]
   158a4:	b29b      	uxth	r3, r3
   158a6:	021b      	lsls	r3, r3, #8
   158a8:	b29b      	uxth	r3, r3
   158aa:	4413      	add	r3, r2
   158ac:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   158ae:	8b3b      	ldrh	r3, [r7, #24]
   158b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   158b4:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
   158b6:	8b3b      	ldrh	r3, [r7, #24]
   158b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
   158bc:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   158be:	687b      	ldr	r3, [r7, #4]
   158c0:	3302      	adds	r3, #2
   158c2:	781b      	ldrb	r3, [r3, #0]
   158c4:	b29a      	uxth	r2, r3
   158c6:	687b      	ldr	r3, [r7, #4]
   158c8:	3303      	adds	r3, #3
   158ca:	781b      	ldrb	r3, [r3, #0]
   158cc:	b29b      	uxth	r3, r3
   158ce:	021b      	lsls	r3, r3, #8
   158d0:	b29b      	uxth	r3, r3
   158d2:	4413      	add	r3, r2
   158d4:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   158d6:	8b3b      	ldrh	r3, [r7, #24]
   158d8:	4618      	mov	r0, r3
   158da:	f7ff fe1f 	bl	1551c <hciCoreConnByHandle>
   158de:	6138      	str	r0, [r7, #16]
   158e0:	693b      	ldr	r3, [r7, #16]
   158e2:	2b00      	cmp	r3, #0
   158e4:	f000 80ad 	beq.w	15a42 <hciCoreAclReassembly+0x1ba>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   158e8:	8afb      	ldrh	r3, [r7, #22]
   158ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   158ee:	d17c      	bne.n	159ea <hciCoreAclReassembly+0x162>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   158f0:	693b      	ldr	r3, [r7, #16]
   158f2:	689b      	ldr	r3, [r3, #8]
   158f4:	2b00      	cmp	r3, #0
   158f6:	d007      	beq.n	15908 <hciCoreAclReassembly+0x80>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   158f8:	693b      	ldr	r3, [r7, #16]
   158fa:	689b      	ldr	r3, [r3, #8]
   158fc:	4618      	mov	r0, r3
   158fe:	f005 f82d 	bl	1a95c <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   15902:	693b      	ldr	r3, [r7, #16]
   15904:	2200      	movs	r2, #0
   15906:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   15908:	8abb      	ldrh	r3, [r7, #20]
   1590a:	2b03      	cmp	r3, #3
   1590c:	f240 8099 	bls.w	15a42 <hciCoreAclReassembly+0x1ba>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   15910:	687b      	ldr	r3, [r7, #4]
   15912:	3304      	adds	r3, #4
   15914:	781b      	ldrb	r3, [r3, #0]
   15916:	b29a      	uxth	r2, r3
   15918:	687b      	ldr	r3, [r7, #4]
   1591a:	3305      	adds	r3, #5
   1591c:	781b      	ldrb	r3, [r3, #0]
   1591e:	b29b      	uxth	r3, r3
   15920:	021b      	lsls	r3, r3, #8
   15922:	b29b      	uxth	r3, r3
   15924:	4413      	add	r3, r2
   15926:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   15928:	89fb      	ldrh	r3, [r7, #14]
   1592a:	3304      	adds	r3, #4
   1592c:	4a4a      	ldr	r2, [pc, #296]	; (15a58 <hciCoreAclReassembly+0x1d0>)
   1592e:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
   15932:	4293      	cmp	r3, r2
   15934:	f300 8085 	bgt.w	15a42 <hciCoreAclReassembly+0x1ba>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   15938:	89fb      	ldrh	r3, [r7, #14]
   1593a:	1d1a      	adds	r2, r3, #4
   1593c:	8abb      	ldrh	r3, [r7, #20]
   1593e:	429a      	cmp	r2, r3
   15940:	dd4e      	ble.n	159e0 <hciCoreAclReassembly+0x158>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   15942:	89fb      	ldrh	r3, [r7, #14]
   15944:	3308      	adds	r3, #8
   15946:	b29b      	uxth	r3, r3
   15948:	2100      	movs	r1, #0
   1594a:	4618      	mov	r0, r3
   1594c:	f004 ffda 	bl	1a904 <WsfMsgDataAlloc>
   15950:	4602      	mov	r2, r0
   15952:	693b      	ldr	r3, [r7, #16]
   15954:	609a      	str	r2, [r3, #8]
   15956:	693b      	ldr	r3, [r7, #16]
   15958:	689b      	ldr	r3, [r3, #8]
   1595a:	2b00      	cmp	r3, #0
   1595c:	d071      	beq.n	15a42 <hciCoreAclReassembly+0x1ba>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   1595e:	693b      	ldr	r3, [r7, #16]
   15960:	689a      	ldr	r2, [r3, #8]
   15962:	693b      	ldr	r3, [r7, #16]
   15964:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   15966:	693b      	ldr	r3, [r7, #16]
   15968:	68db      	ldr	r3, [r3, #12]
   1596a:	1c59      	adds	r1, r3, #1
   1596c:	693a      	ldr	r2, [r7, #16]
   1596e:	60d1      	str	r1, [r2, #12]
   15970:	8b3a      	ldrh	r2, [r7, #24]
   15972:	b2d2      	uxtb	r2, r2
   15974:	701a      	strb	r2, [r3, #0]
   15976:	693b      	ldr	r3, [r7, #16]
   15978:	68db      	ldr	r3, [r3, #12]
   1597a:	1c59      	adds	r1, r3, #1
   1597c:	693a      	ldr	r2, [r7, #16]
   1597e:	60d1      	str	r1, [r2, #12]
   15980:	8b3a      	ldrh	r2, [r7, #24]
   15982:	0a12      	lsrs	r2, r2, #8
   15984:	b292      	uxth	r2, r2
   15986:	b2d2      	uxtb	r2, r2
   15988:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   1598a:	693b      	ldr	r3, [r7, #16]
   1598c:	68db      	ldr	r3, [r3, #12]
   1598e:	1c59      	adds	r1, r3, #1
   15990:	693a      	ldr	r2, [r7, #16]
   15992:	60d1      	str	r1, [r2, #12]
   15994:	89fa      	ldrh	r2, [r7, #14]
   15996:	b2d2      	uxtb	r2, r2
   15998:	3204      	adds	r2, #4
   1599a:	b2d2      	uxtb	r2, r2
   1599c:	701a      	strb	r2, [r3, #0]
   1599e:	693b      	ldr	r3, [r7, #16]
   159a0:	68db      	ldr	r3, [r3, #12]
   159a2:	1c59      	adds	r1, r3, #1
   159a4:	693a      	ldr	r2, [r7, #16]
   159a6:	60d1      	str	r1, [r2, #12]
   159a8:	89fa      	ldrh	r2, [r7, #14]
   159aa:	3204      	adds	r2, #4
   159ac:	1212      	asrs	r2, r2, #8
   159ae:	b2d2      	uxtb	r2, r2
   159b0:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   159b2:	693b      	ldr	r3, [r7, #16]
   159b4:	68d8      	ldr	r0, [r3, #12]
   159b6:	687b      	ldr	r3, [r7, #4]
   159b8:	3304      	adds	r3, #4
   159ba:	8aba      	ldrh	r2, [r7, #20]
   159bc:	4619      	mov	r1, r3
   159be:	f7f6 fbcf 	bl	c160 <memcpy>
            pConn->pNextRxFrag += aclLen;
   159c2:	693b      	ldr	r3, [r7, #16]
   159c4:	68da      	ldr	r2, [r3, #12]
   159c6:	8abb      	ldrh	r3, [r7, #20]
   159c8:	441a      	add	r2, r3
   159ca:	693b      	ldr	r3, [r7, #16]
   159cc:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   159ce:	89fa      	ldrh	r2, [r7, #14]
   159d0:	8abb      	ldrh	r3, [r7, #20]
   159d2:	1ad3      	subs	r3, r2, r3
   159d4:	b29b      	uxth	r3, r3
   159d6:	3304      	adds	r3, #4
   159d8:	b29a      	uxth	r2, r3
   159da:	693b      	ldr	r3, [r7, #16]
   159dc:	829a      	strh	r2, [r3, #20]
   159de:	e030      	b.n	15a42 <hciCoreAclReassembly+0x1ba>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   159e0:	687b      	ldr	r3, [r7, #4]
   159e2:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
   159e4:	2300      	movs	r3, #0
   159e6:	76fb      	strb	r3, [r7, #27]
   159e8:	e02b      	b.n	15a42 <hciCoreAclReassembly+0x1ba>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   159ea:	8afb      	ldrh	r3, [r7, #22]
   159ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   159f0:	d127      	bne.n	15a42 <hciCoreAclReassembly+0x1ba>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   159f2:	693b      	ldr	r3, [r7, #16]
   159f4:	689b      	ldr	r3, [r3, #8]
   159f6:	2b00      	cmp	r3, #0
   159f8:	d023      	beq.n	15a42 <hciCoreAclReassembly+0x1ba>
      {
        if (aclLen <= pConn->rxAclRemLen)
   159fa:	693b      	ldr	r3, [r7, #16]
   159fc:	8a9b      	ldrh	r3, [r3, #20]
   159fe:	8aba      	ldrh	r2, [r7, #20]
   15a00:	429a      	cmp	r2, r3
   15a02:	d81e      	bhi.n	15a42 <hciCoreAclReassembly+0x1ba>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   15a04:	693b      	ldr	r3, [r7, #16]
   15a06:	68d8      	ldr	r0, [r3, #12]
   15a08:	687b      	ldr	r3, [r7, #4]
   15a0a:	3304      	adds	r3, #4
   15a0c:	8aba      	ldrh	r2, [r7, #20]
   15a0e:	4619      	mov	r1, r3
   15a10:	f7f6 fba6 	bl	c160 <memcpy>
          pConn->pNextRxFrag += aclLen;
   15a14:	693b      	ldr	r3, [r7, #16]
   15a16:	68da      	ldr	r2, [r3, #12]
   15a18:	8abb      	ldrh	r3, [r7, #20]
   15a1a:	441a      	add	r2, r3
   15a1c:	693b      	ldr	r3, [r7, #16]
   15a1e:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   15a20:	693b      	ldr	r3, [r7, #16]
   15a22:	8a9a      	ldrh	r2, [r3, #20]
   15a24:	8abb      	ldrh	r3, [r7, #20]
   15a26:	1ad3      	subs	r3, r2, r3
   15a28:	b29a      	uxth	r2, r3
   15a2a:	693b      	ldr	r3, [r7, #16]
   15a2c:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   15a2e:	693b      	ldr	r3, [r7, #16]
   15a30:	8a9b      	ldrh	r3, [r3, #20]
   15a32:	2b00      	cmp	r3, #0
   15a34:	d105      	bne.n	15a42 <hciCoreAclReassembly+0x1ba>
          {
            pDataRtn = pConn->pRxAclPkt;
   15a36:	693b      	ldr	r3, [r7, #16]
   15a38:	689b      	ldr	r3, [r3, #8]
   15a3a:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
   15a3c:	693b      	ldr	r3, [r7, #16]
   15a3e:	2200      	movs	r2, #0
   15a40:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   15a42:	7efb      	ldrb	r3, [r7, #27]
   15a44:	2b00      	cmp	r3, #0
   15a46:	d002      	beq.n	15a4e <hciCoreAclReassembly+0x1c6>
  {
    WsfMsgFree(pData);
   15a48:	6878      	ldr	r0, [r7, #4]
   15a4a:	f004 ff87 	bl	1a95c <WsfMsgFree>
  }

  return pDataRtn;
   15a4e:	69fb      	ldr	r3, [r7, #28]
}
   15a50:	4618      	mov	r0, r3
   15a52:	3720      	adds	r7, #32
   15a54:	46bd      	mov	sp, r7
   15a56:	bd80      	pop	{r7, pc}
   15a58:	10009384 	.word	0x10009384

00015a5c <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   15a5c:	b580      	push	{r7, lr}
   15a5e:	b082      	sub	sp, #8
   15a60:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   15a62:	4b19      	ldr	r3, [pc, #100]	; (15ac8 <HciCoreInit+0x6c>)
   15a64:	2200      	movs	r2, #0
   15a66:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   15a6a:	4b17      	ldr	r3, [pc, #92]	; (15ac8 <HciCoreInit+0x6c>)
   15a6c:	2200      	movs	r2, #0
   15a6e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
   15a72:	2300      	movs	r3, #0
   15a74:	71fb      	strb	r3, [r7, #7]
   15a76:	e00d      	b.n	15a94 <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   15a78:	79fa      	ldrb	r2, [r7, #7]
   15a7a:	4913      	ldr	r1, [pc, #76]	; (15ac8 <HciCoreInit+0x6c>)
   15a7c:	4613      	mov	r3, r2
   15a7e:	00db      	lsls	r3, r3, #3
   15a80:	1a9b      	subs	r3, r3, r2
   15a82:	009b      	lsls	r3, r3, #2
   15a84:	440b      	add	r3, r1
   15a86:	3310      	adds	r3, #16
   15a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15a8c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   15a8e:	79fb      	ldrb	r3, [r7, #7]
   15a90:	3301      	adds	r3, #1
   15a92:	71fb      	strb	r3, [r7, #7]
   15a94:	79fb      	ldrb	r3, [r7, #7]
   15a96:	2b07      	cmp	r3, #7
   15a98:	d9ee      	bls.n	15a78 <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   15a9a:	4b0b      	ldr	r3, [pc, #44]	; (15ac8 <HciCoreInit+0x6c>)
   15a9c:	221b      	movs	r2, #27
   15a9e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   15aa2:	4b09      	ldr	r3, [pc, #36]	; (15ac8 <HciCoreInit+0x6c>)
   15aa4:	2205      	movs	r2, #5
   15aa6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   15aaa:	4b07      	ldr	r3, [pc, #28]	; (15ac8 <HciCoreInit+0x6c>)
   15aac:	2203      	movs	r2, #3
   15aae:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
   15ab2:	4b05      	ldr	r3, [pc, #20]	; (15ac8 <HciCoreInit+0x6c>)
   15ab4:	2200      	movs	r2, #0
   15ab6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
   15aba:	f000 f8d5 	bl	15c68 <hciCoreInit>
}
   15abe:	bf00      	nop
   15ac0:	3708      	adds	r7, #8
   15ac2:	46bd      	mov	sp, r7
   15ac4:	bd80      	pop	{r7, pc}
   15ac6:	bf00      	nop
   15ac8:	10009384 	.word	0x10009384

00015acc <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   15acc:	b580      	push	{r7, lr}
   15ace:	b084      	sub	sp, #16
   15ad0:	af00      	add	r7, sp, #0
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   15ad2:	4b24      	ldr	r3, [pc, #144]	; (15b64 <HciResetSequence+0x98>)
   15ad4:	60bb      	str	r3, [r7, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   15ad6:	e002      	b.n	15ade <HciResetSequence+0x12>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   15ad8:	6878      	ldr	r0, [r7, #4]
   15ada:	f004 ff3f 	bl	1a95c <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   15ade:	1cfb      	adds	r3, r7, #3
   15ae0:	4619      	mov	r1, r3
   15ae2:	4821      	ldr	r0, [pc, #132]	; (15b68 <HciResetSequence+0x9c>)
   15ae4:	f004 ff74 	bl	1a9d0 <WsfMsgDeq>
   15ae8:	6078      	str	r0, [r7, #4]
   15aea:	687b      	ldr	r3, [r7, #4]
   15aec:	2b00      	cmp	r3, #0
   15aee:	d1f3      	bne.n	15ad8 <HciResetSequence+0xc>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   15af0:	2308      	movs	r3, #8
   15af2:	73fb      	strb	r3, [r7, #15]
   15af4:	e029      	b.n	15b4a <HciResetSequence+0x7e>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   15af6:	68bb      	ldr	r3, [r7, #8]
   15af8:	681b      	ldr	r3, [r3, #0]
   15afa:	2b00      	cmp	r3, #0
   15afc:	d007      	beq.n	15b0e <HciResetSequence+0x42>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   15afe:	68bb      	ldr	r3, [r7, #8]
   15b00:	681b      	ldr	r3, [r3, #0]
   15b02:	4618      	mov	r0, r3
   15b04:	f004 ff2a 	bl	1a95c <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   15b08:	68bb      	ldr	r3, [r7, #8]
   15b0a:	2200      	movs	r2, #0
   15b0c:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   15b0e:	68bb      	ldr	r3, [r7, #8]
   15b10:	2200      	movs	r2, #0
   15b12:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   15b14:	68bb      	ldr	r3, [r7, #8]
   15b16:	689b      	ldr	r3, [r3, #8]
   15b18:	2b00      	cmp	r3, #0
   15b1a:	d007      	beq.n	15b2c <HciResetSequence+0x60>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   15b1c:	68bb      	ldr	r3, [r7, #8]
   15b1e:	689b      	ldr	r3, [r3, #8]
   15b20:	4618      	mov	r0, r3
   15b22:	f004 ff1b 	bl	1a95c <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   15b26:	68bb      	ldr	r3, [r7, #8]
   15b28:	2200      	movs	r2, #0
   15b2a:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   15b2c:	68bb      	ldr	r3, [r7, #8]
   15b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15b32:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   15b34:	68bb      	ldr	r3, [r7, #8]
   15b36:	7e5b      	ldrb	r3, [r3, #25]
   15b38:	4618      	mov	r0, r3
   15b3a:	f7ff fd75 	bl	15628 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   15b3e:	7bfb      	ldrb	r3, [r7, #15]
   15b40:	3b01      	subs	r3, #1
   15b42:	73fb      	strb	r3, [r7, #15]
   15b44:	68bb      	ldr	r3, [r7, #8]
   15b46:	331c      	adds	r3, #28
   15b48:	60bb      	str	r3, [r7, #8]
   15b4a:	7bfb      	ldrb	r3, [r7, #15]
   15b4c:	2b00      	cmp	r3, #0
   15b4e:	d1d2      	bne.n	15af6 <HciResetSequence+0x2a>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   15b50:	4b05      	ldr	r3, [pc, #20]	; (15b68 <HciResetSequence+0x9c>)
   15b52:	2201      	movs	r2, #1
   15b54:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   15b56:	f002 f923 	bl	17da0 <hciCoreResetStart>
}
   15b5a:	bf00      	nop
   15b5c:	3710      	adds	r7, #16
   15b5e:	46bd      	mov	sp, r7
   15b60:	bd80      	pop	{r7, pc}
   15b62:	bf00      	nop
   15b64:	10009384 	.word	0x10009384
   15b68:	10009e2c 	.word	0x10009e2c

00015b6c <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   15b6c:	b480      	push	{r7}
   15b6e:	b083      	sub	sp, #12
   15b70:	af00      	add	r7, sp, #0
   15b72:	4603      	mov	r3, r0
   15b74:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
   15b76:	4a05      	ldr	r2, [pc, #20]	; (15b8c <HciSetMaxRxAclLen+0x20>)
   15b78:	88fb      	ldrh	r3, [r7, #6]
   15b7a:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
   15b7e:	bf00      	nop
   15b80:	370c      	adds	r7, #12
   15b82:	46bd      	mov	sp, r7
   15b84:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b88:	4770      	bx	lr
   15b8a:	bf00      	nop
   15b8c:	10009384 	.word	0x10009384

00015b90 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   15b90:	b590      	push	{r4, r7, lr}
   15b92:	b085      	sub	sp, #20
   15b94:	af00      	add	r7, sp, #0
   15b96:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   15b98:	687b      	ldr	r3, [r7, #4]
   15b9a:	781b      	ldrb	r3, [r3, #0]
   15b9c:	b29a      	uxth	r2, r3
   15b9e:	687b      	ldr	r3, [r7, #4]
   15ba0:	3301      	adds	r3, #1
   15ba2:	781b      	ldrb	r3, [r3, #0]
   15ba4:	b29b      	uxth	r3, r3
   15ba6:	021b      	lsls	r3, r3, #8
   15ba8:	b29b      	uxth	r3, r3
   15baa:	4413      	add	r3, r2
   15bac:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   15bae:	687b      	ldr	r3, [r7, #4]
   15bb0:	3302      	adds	r3, #2
   15bb2:	781b      	ldrb	r3, [r3, #0]
   15bb4:	b29a      	uxth	r2, r3
   15bb6:	687b      	ldr	r3, [r7, #4]
   15bb8:	3303      	adds	r3, #3
   15bba:	781b      	ldrb	r3, [r3, #0]
   15bbc:	b29b      	uxth	r3, r3
   15bbe:	021b      	lsls	r3, r3, #8
   15bc0:	b29b      	uxth	r3, r3
   15bc2:	4413      	add	r3, r2
   15bc4:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   15bc6:	89fb      	ldrh	r3, [r7, #14]
   15bc8:	4618      	mov	r0, r3
   15bca:	f7ff fca7 	bl	1551c <hciCoreConnByHandle>
   15bce:	60b8      	str	r0, [r7, #8]
   15bd0:	68bb      	ldr	r3, [r7, #8]
   15bd2:	2b00      	cmp	r3, #0
   15bd4:	d03a      	beq.n	15c4c <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   15bd6:	4821      	ldr	r0, [pc, #132]	; (15c5c <HciSendAclData+0xcc>)
   15bd8:	f004 ffdb 	bl	1ab92 <WsfQueueEmpty>
   15bdc:	4603      	mov	r3, r0
   15bde:	2b00      	cmp	r3, #0
   15be0:	d00b      	beq.n	15bfa <HciSendAclData+0x6a>
   15be2:	4b1f      	ldr	r3, [pc, #124]	; (15c60 <HciSendAclData+0xd0>)
   15be4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   15be8:	2b00      	cmp	r3, #0
   15bea:	d006      	beq.n	15bfa <HciSendAclData+0x6a>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   15bec:	89bb      	ldrh	r3, [r7, #12]
   15bee:	687a      	ldr	r2, [r7, #4]
   15bf0:	4619      	mov	r1, r3
   15bf2:	68b8      	ldr	r0, [r7, #8]
   15bf4:	f7ff fd80 	bl	156f8 <hciCoreTxAclStart>
   15bf8:	e004      	b.n	15c04 <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   15bfa:	687a      	ldr	r2, [r7, #4]
   15bfc:	2100      	movs	r1, #0
   15bfe:	4817      	ldr	r0, [pc, #92]	; (15c5c <HciSendAclData+0xcc>)
   15c00:	f004 fed1 	bl	1a9a6 <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   15c04:	89bb      	ldrh	r3, [r7, #12]
   15c06:	1e5c      	subs	r4, r3, #1
   15c08:	f000 f904 	bl	15e14 <HciGetBufSize>
   15c0c:	4603      	mov	r3, r0
   15c0e:	fb94 f3f3 	sdiv	r3, r4, r3
   15c12:	1c59      	adds	r1, r3, #1
   15c14:	68bb      	ldr	r3, [r7, #8]
   15c16:	7e1a      	ldrb	r2, [r3, #24]
   15c18:	b2cb      	uxtb	r3, r1
   15c1a:	4413      	add	r3, r2
   15c1c:	b2da      	uxtb	r2, r3
   15c1e:	68bb      	ldr	r3, [r7, #8]
   15c20:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   15c22:	68bb      	ldr	r3, [r7, #8]
   15c24:	7e1a      	ldrb	r2, [r3, #24]
   15c26:	4b0e      	ldr	r3, [pc, #56]	; (15c60 <HciSendAclData+0xd0>)
   15c28:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   15c2c:	429a      	cmp	r2, r3
   15c2e:	d310      	bcc.n	15c52 <HciSendAclData+0xc2>
   15c30:	68bb      	ldr	r3, [r7, #8]
   15c32:	7ddb      	ldrb	r3, [r3, #23]
   15c34:	2b00      	cmp	r3, #0
   15c36:	d10c      	bne.n	15c52 <HciSendAclData+0xc2>
    {
      pConn->flowDisabled = TRUE;
   15c38:	68bb      	ldr	r3, [r7, #8]
   15c3a:	2201      	movs	r2, #1
   15c3c:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   15c3e:	4b09      	ldr	r3, [pc, #36]	; (15c64 <HciSendAclData+0xd4>)
   15c40:	695b      	ldr	r3, [r3, #20]
   15c42:	89fa      	ldrh	r2, [r7, #14]
   15c44:	2101      	movs	r1, #1
   15c46:	4610      	mov	r0, r2
   15c48:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   15c4a:	e002      	b.n	15c52 <HciSendAclData+0xc2>
    WsfMsgFree(pData);
   15c4c:	6878      	ldr	r0, [r7, #4]
   15c4e:	f004 fe85 	bl	1a95c <WsfMsgFree>
}
   15c52:	bf00      	nop
   15c54:	3714      	adds	r7, #20
   15c56:	46bd      	mov	sp, r7
   15c58:	bd90      	pop	{r4, r7, pc}
   15c5a:	bf00      	nop
   15c5c:	10009474 	.word	0x10009474
   15c60:	10009384 	.word	0x10009384
   15c64:	10009e2c 	.word	0x10009e2c

00015c68 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   15c68:	b580      	push	{r7, lr}
   15c6a:	af00      	add	r7, sp, #0
  hciCmdInit();
   15c6c:	f7fe fb36 	bl	142dc <hciCmdInit>
}
   15c70:	bf00      	nop
   15c72:	bd80      	pop	{r7, pc}

00015c74 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   15c74:	b580      	push	{r7, lr}
   15c76:	b086      	sub	sp, #24
   15c78:	af00      	add	r7, sp, #0
   15c7a:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   15c7c:	2300      	movs	r3, #0
   15c7e:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   15c80:	687b      	ldr	r3, [r7, #4]
   15c82:	1c5a      	adds	r2, r3, #1
   15c84:	607a      	str	r2, [r7, #4]
   15c86:	781b      	ldrb	r3, [r3, #0]
   15c88:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   15c8a:	e04c      	b.n	15d26 <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   15c8c:	687b      	ldr	r3, [r7, #4]
   15c8e:	781b      	ldrb	r3, [r3, #0]
   15c90:	b29a      	uxth	r2, r3
   15c92:	687b      	ldr	r3, [r7, #4]
   15c94:	3301      	adds	r3, #1
   15c96:	781b      	ldrb	r3, [r3, #0]
   15c98:	b29b      	uxth	r3, r3
   15c9a:	021b      	lsls	r3, r3, #8
   15c9c:	b29b      	uxth	r3, r3
   15c9e:	4413      	add	r3, r2
   15ca0:	82bb      	strh	r3, [r7, #20]
   15ca2:	687b      	ldr	r3, [r7, #4]
   15ca4:	3302      	adds	r3, #2
   15ca6:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   15ca8:	687b      	ldr	r3, [r7, #4]
   15caa:	781b      	ldrb	r3, [r3, #0]
   15cac:	b29a      	uxth	r2, r3
   15cae:	687b      	ldr	r3, [r7, #4]
   15cb0:	3301      	adds	r3, #1
   15cb2:	781b      	ldrb	r3, [r3, #0]
   15cb4:	b29b      	uxth	r3, r3
   15cb6:	021b      	lsls	r3, r3, #8
   15cb8:	b29b      	uxth	r3, r3
   15cba:	4413      	add	r3, r2
   15cbc:	827b      	strh	r3, [r7, #18]
   15cbe:	687b      	ldr	r3, [r7, #4]
   15cc0:	3302      	adds	r3, #2
   15cc2:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   15cc4:	8abb      	ldrh	r3, [r7, #20]
   15cc6:	4618      	mov	r0, r3
   15cc8:	f7ff fc28 	bl	1551c <hciCoreConnByHandle>
   15ccc:	60f8      	str	r0, [r7, #12]
   15cce:	68fb      	ldr	r3, [r7, #12]
   15cd0:	2b00      	cmp	r3, #0
   15cd2:	d028      	beq.n	15d26 <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   15cd4:	68fb      	ldr	r3, [r7, #12]
   15cd6:	7e5a      	ldrb	r2, [r3, #25]
   15cd8:	8a7b      	ldrh	r3, [r7, #18]
   15cda:	b2db      	uxtb	r3, r3
   15cdc:	1ad3      	subs	r3, r2, r3
   15cde:	b2da      	uxtb	r2, r3
   15ce0:	68fb      	ldr	r3, [r7, #12]
   15ce2:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   15ce4:	68fb      	ldr	r3, [r7, #12]
   15ce6:	7e1a      	ldrb	r2, [r3, #24]
   15ce8:	8a7b      	ldrh	r3, [r7, #18]
   15cea:	b2db      	uxtb	r3, r3
   15cec:	1ad3      	subs	r3, r2, r3
   15cee:	b2da      	uxtb	r2, r3
   15cf0:	68fb      	ldr	r3, [r7, #12]
   15cf2:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   15cf4:	8a7b      	ldrh	r3, [r7, #18]
   15cf6:	b2da      	uxtb	r2, r3
   15cf8:	7dbb      	ldrb	r3, [r7, #22]
   15cfa:	4413      	add	r3, r2
   15cfc:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   15cfe:	68fb      	ldr	r3, [r7, #12]
   15d00:	7ddb      	ldrb	r3, [r3, #23]
   15d02:	2b00      	cmp	r3, #0
   15d04:	d00f      	beq.n	15d26 <hciCoreNumCmplPkts+0xb2>
   15d06:	68fb      	ldr	r3, [r7, #12]
   15d08:	7e1a      	ldrb	r2, [r3, #24]
   15d0a:	4b0d      	ldr	r3, [pc, #52]	; (15d40 <hciCoreNumCmplPkts+0xcc>)
   15d0c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   15d10:	429a      	cmp	r2, r3
   15d12:	d808      	bhi.n	15d26 <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
   15d14:	68fb      	ldr	r3, [r7, #12]
   15d16:	2200      	movs	r2, #0
   15d18:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   15d1a:	4b0a      	ldr	r3, [pc, #40]	; (15d44 <hciCoreNumCmplPkts+0xd0>)
   15d1c:	695b      	ldr	r3, [r3, #20]
   15d1e:	8aba      	ldrh	r2, [r7, #20]
   15d20:	2100      	movs	r1, #0
   15d22:	4610      	mov	r0, r2
   15d24:	4798      	blx	r3
  while (numHandles-- > 0)
   15d26:	7dfb      	ldrb	r3, [r7, #23]
   15d28:	1e5a      	subs	r2, r3, #1
   15d2a:	75fa      	strb	r2, [r7, #23]
   15d2c:	2b00      	cmp	r3, #0
   15d2e:	d1ad      	bne.n	15c8c <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   15d30:	7dbb      	ldrb	r3, [r7, #22]
   15d32:	4618      	mov	r0, r3
   15d34:	f7ff fc78 	bl	15628 <hciCoreTxReady>
}
   15d38:	bf00      	nop
   15d3a:	3718      	adds	r7, #24
   15d3c:	46bd      	mov	sp, r7
   15d3e:	bd80      	pop	{r7, pc}
   15d40:	10009384 	.word	0x10009384
   15d44:	10009e2c 	.word	0x10009e2c

00015d48 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   15d48:	b580      	push	{r7, lr}
   15d4a:	b082      	sub	sp, #8
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	4603      	mov	r3, r0
   15d50:	6039      	str	r1, [r7, #0]
   15d52:	71fb      	strb	r3, [r7, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   15d54:	79fb      	ldrb	r3, [r7, #7]
   15d56:	683a      	ldr	r2, [r7, #0]
   15d58:	4619      	mov	r1, r3
   15d5a:	4806      	ldr	r0, [pc, #24]	; (15d74 <hciCoreRecv+0x2c>)
   15d5c:	f004 fe23 	bl	1a9a6 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   15d60:	4b04      	ldr	r3, [pc, #16]	; (15d74 <hciCoreRecv+0x2c>)
   15d62:	7e1b      	ldrb	r3, [r3, #24]
   15d64:	2101      	movs	r1, #1
   15d66:	4618      	mov	r0, r3
   15d68:	f005 fc84 	bl	1b674 <WsfSetEvent>
}
   15d6c:	bf00      	nop
   15d6e:	3708      	adds	r7, #8
   15d70:	46bd      	mov	sp, r7
   15d72:	bd80      	pop	{r7, pc}
   15d74:	10009e2c 	.word	0x10009e2c

00015d78 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   15d78:	b580      	push	{r7, lr}
   15d7a:	b084      	sub	sp, #16
   15d7c:	af00      	add	r7, sp, #0
   15d7e:	4603      	mov	r3, r0
   15d80:	6039      	str	r1, [r7, #0]
   15d82:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   15d84:	683b      	ldr	r3, [r7, #0]
   15d86:	2b00      	cmp	r3, #0
   15d88:	d007      	beq.n	15d9a <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   15d8a:	683b      	ldr	r3, [r7, #0]
   15d8c:	789b      	ldrb	r3, [r3, #2]
   15d8e:	2b01      	cmp	r3, #1
   15d90:	d12f      	bne.n	15df2 <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
   15d92:	6838      	ldr	r0, [r7, #0]
   15d94:	f7fe fabe 	bl	14314 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   15d98:	e02b      	b.n	15df2 <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
   15d9a:	79fb      	ldrb	r3, [r7, #7]
   15d9c:	f003 0301 	and.w	r3, r3, #1
   15da0:	2b00      	cmp	r3, #0
   15da2:	d026      	beq.n	15df2 <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   15da4:	e01b      	b.n	15dde <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
   15da6:	7afb      	ldrb	r3, [r7, #11]
   15da8:	2b04      	cmp	r3, #4
   15daa:	d10d      	bne.n	15dc8 <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
   15dac:	68f8      	ldr	r0, [r7, #12]
   15dae:	f001 fcd5 	bl	1775c <hciEvtProcessMsg>
        if (hciCb.resetting)
   15db2:	4b12      	ldr	r3, [pc, #72]	; (15dfc <HciCoreHandler+0x84>)
   15db4:	7e5b      	ldrb	r3, [r3, #25]
   15db6:	2b00      	cmp	r3, #0
   15db8:	d002      	beq.n	15dc0 <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
   15dba:	68f8      	ldr	r0, [r7, #12]
   15dbc:	f001 fff6 	bl	17dac <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   15dc0:	68f8      	ldr	r0, [r7, #12]
   15dc2:	f004 fdcb 	bl	1a95c <WsfMsgFree>
   15dc6:	e00a      	b.n	15dde <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   15dc8:	68f8      	ldr	r0, [r7, #12]
   15dca:	f7ff fd5d 	bl	15888 <hciCoreAclReassembly>
   15dce:	60f8      	str	r0, [r7, #12]
   15dd0:	68fb      	ldr	r3, [r7, #12]
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	d003      	beq.n	15dde <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
   15dd6:	4b09      	ldr	r3, [pc, #36]	; (15dfc <HciCoreHandler+0x84>)
   15dd8:	691b      	ldr	r3, [r3, #16]
   15dda:	68f8      	ldr	r0, [r7, #12]
   15ddc:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   15dde:	f107 030b 	add.w	r3, r7, #11
   15de2:	4619      	mov	r1, r3
   15de4:	4805      	ldr	r0, [pc, #20]	; (15dfc <HciCoreHandler+0x84>)
   15de6:	f004 fdf3 	bl	1a9d0 <WsfMsgDeq>
   15dea:	60f8      	str	r0, [r7, #12]
   15dec:	68fb      	ldr	r3, [r7, #12]
   15dee:	2b00      	cmp	r3, #0
   15df0:	d1d9      	bne.n	15da6 <HciCoreHandler+0x2e>
}
   15df2:	bf00      	nop
   15df4:	3710      	adds	r7, #16
   15df6:	46bd      	mov	sp, r7
   15df8:	bd80      	pop	{r7, pc}
   15dfa:	bf00      	nop
   15dfc:	10009e2c 	.word	0x10009e2c

00015e00 <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
   15e00:	b480      	push	{r7}
   15e02:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
   15e04:	4b02      	ldr	r3, [pc, #8]	; (15e10 <HciGetBdAddr+0x10>)
}
   15e06:	4618      	mov	r0, r3
   15e08:	46bd      	mov	sp, r7
   15e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e0e:	4770      	bx	lr
   15e10:	1000946c 	.word	0x1000946c

00015e14 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
   15e14:	b480      	push	{r7}
   15e16:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
   15e18:	4b03      	ldr	r3, [pc, #12]	; (15e28 <HciGetBufSize+0x14>)
   15e1a:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
   15e1e:	4618      	mov	r0, r3
   15e20:	46bd      	mov	sp, r7
   15e22:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e26:	4770      	bx	lr
   15e28:	10009384 	.word	0x10009384

00015e2c <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
   15e2c:	b480      	push	{r7}
   15e2e:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   15e30:	4b05      	ldr	r3, [pc, #20]	; (15e48 <HciGetLeSupFeat+0x1c>)
   15e32:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   15e36:	f023 0302 	bic.w	r3, r3, #2
   15e3a:	b29b      	uxth	r3, r3
}
   15e3c:	4618      	mov	r0, r3
   15e3e:	46bd      	mov	sp, r7
   15e40:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e44:	4770      	bx	lr
   15e46:	bf00      	nop
   15e48:	10009384 	.word	0x10009384

00015e4c <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
   15e4c:	b480      	push	{r7}
   15e4e:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
   15e50:	4b03      	ldr	r3, [pc, #12]	; (15e60 <HciGetMaxRxAclLen+0x14>)
   15e52:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
   15e56:	4618      	mov	r0, r3
   15e58:	46bd      	mov	sp, r7
   15e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e5e:	4770      	bx	lr
   15e60:	10009384 	.word	0x10009384

00015e64 <HciLlPrivacySupported>:
 *
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
   15e64:	b480      	push	{r7}
   15e66:	af00      	add	r7, sp, #0
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   15e68:	4b06      	ldr	r3, [pc, #24]	; (15e84 <HciLlPrivacySupported+0x20>)
   15e6a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
   15e6e:	2b00      	cmp	r3, #0
   15e70:	bf14      	ite	ne
   15e72:	2301      	movne	r3, #1
   15e74:	2300      	moveq	r3, #0
   15e76:	b2db      	uxtb	r3, r3
}
   15e78:	4618      	mov	r0, r3
   15e7a:	46bd      	mov	sp, r7
   15e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e80:	4770      	bx	lr
   15e82:	bf00      	nop
   15e84:	10009384 	.word	0x10009384

00015e88 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15e88:	b580      	push	{r7, lr}
   15e8a:	b084      	sub	sp, #16
   15e8c:	af00      	add	r7, sp, #0
   15e8e:	60f8      	str	r0, [r7, #12]
   15e90:	60b9      	str	r1, [r7, #8]
   15e92:	4613      	mov	r3, r2
   15e94:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   15e96:	68bb      	ldr	r3, [r7, #8]
   15e98:	1c5a      	adds	r2, r3, #1
   15e9a:	60ba      	str	r2, [r7, #8]
   15e9c:	781a      	ldrb	r2, [r3, #0]
   15e9e:	68fb      	ldr	r3, [r7, #12]
   15ea0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   15ea2:	68bb      	ldr	r3, [r7, #8]
   15ea4:	781b      	ldrb	r3, [r3, #0]
   15ea6:	b29a      	uxth	r2, r3
   15ea8:	68bb      	ldr	r3, [r7, #8]
   15eaa:	3301      	adds	r3, #1
   15eac:	781b      	ldrb	r3, [r3, #0]
   15eae:	b29b      	uxth	r3, r3
   15eb0:	021b      	lsls	r3, r3, #8
   15eb2:	b29b      	uxth	r3, r3
   15eb4:	4413      	add	r3, r2
   15eb6:	b29a      	uxth	r2, r3
   15eb8:	68fb      	ldr	r3, [r7, #12]
   15eba:	80da      	strh	r2, [r3, #6]
   15ebc:	68bb      	ldr	r3, [r7, #8]
   15ebe:	3302      	adds	r3, #2
   15ec0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   15ec2:	68bb      	ldr	r3, [r7, #8]
   15ec4:	1c5a      	adds	r2, r3, #1
   15ec6:	60ba      	str	r2, [r7, #8]
   15ec8:	781a      	ldrb	r2, [r3, #0]
   15eca:	68fb      	ldr	r3, [r7, #12]
   15ecc:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   15ece:	68bb      	ldr	r3, [r7, #8]
   15ed0:	1c5a      	adds	r2, r3, #1
   15ed2:	60ba      	str	r2, [r7, #8]
   15ed4:	781a      	ldrb	r2, [r3, #0]
   15ed6:	68fb      	ldr	r3, [r7, #12]
   15ed8:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   15eda:	68fb      	ldr	r3, [r7, #12]
   15edc:	330a      	adds	r3, #10
   15ede:	68b9      	ldr	r1, [r7, #8]
   15ee0:	4618      	mov	r0, r3
   15ee2:	f003 fe8f 	bl	19c04 <BdaCpy>
   15ee6:	68bb      	ldr	r3, [r7, #8]
   15ee8:	3306      	adds	r3, #6
   15eea:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   15eec:	68bb      	ldr	r3, [r7, #8]
   15eee:	781b      	ldrb	r3, [r3, #0]
   15ef0:	b29a      	uxth	r2, r3
   15ef2:	68bb      	ldr	r3, [r7, #8]
   15ef4:	3301      	adds	r3, #1
   15ef6:	781b      	ldrb	r3, [r3, #0]
   15ef8:	b29b      	uxth	r3, r3
   15efa:	021b      	lsls	r3, r3, #8
   15efc:	b29b      	uxth	r3, r3
   15efe:	4413      	add	r3, r2
   15f00:	b29a      	uxth	r2, r3
   15f02:	68fb      	ldr	r3, [r7, #12]
   15f04:	821a      	strh	r2, [r3, #16]
   15f06:	68bb      	ldr	r3, [r7, #8]
   15f08:	3302      	adds	r3, #2
   15f0a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   15f0c:	68bb      	ldr	r3, [r7, #8]
   15f0e:	781b      	ldrb	r3, [r3, #0]
   15f10:	b29a      	uxth	r2, r3
   15f12:	68bb      	ldr	r3, [r7, #8]
   15f14:	3301      	adds	r3, #1
   15f16:	781b      	ldrb	r3, [r3, #0]
   15f18:	b29b      	uxth	r3, r3
   15f1a:	021b      	lsls	r3, r3, #8
   15f1c:	b29b      	uxth	r3, r3
   15f1e:	4413      	add	r3, r2
   15f20:	b29a      	uxth	r2, r3
   15f22:	68fb      	ldr	r3, [r7, #12]
   15f24:	825a      	strh	r2, [r3, #18]
   15f26:	68bb      	ldr	r3, [r7, #8]
   15f28:	3302      	adds	r3, #2
   15f2a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   15f2c:	68bb      	ldr	r3, [r7, #8]
   15f2e:	781b      	ldrb	r3, [r3, #0]
   15f30:	b29a      	uxth	r2, r3
   15f32:	68bb      	ldr	r3, [r7, #8]
   15f34:	3301      	adds	r3, #1
   15f36:	781b      	ldrb	r3, [r3, #0]
   15f38:	b29b      	uxth	r3, r3
   15f3a:	021b      	lsls	r3, r3, #8
   15f3c:	b29b      	uxth	r3, r3
   15f3e:	4413      	add	r3, r2
   15f40:	b29a      	uxth	r2, r3
   15f42:	68fb      	ldr	r3, [r7, #12]
   15f44:	829a      	strh	r2, [r3, #20]
   15f46:	68bb      	ldr	r3, [r7, #8]
   15f48:	3302      	adds	r3, #2
   15f4a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   15f4c:	68bb      	ldr	r3, [r7, #8]
   15f4e:	1c5a      	adds	r2, r3, #1
   15f50:	60ba      	str	r2, [r7, #8]
   15f52:	781a      	ldrb	r2, [r3, #0]
   15f54:	68fb      	ldr	r3, [r7, #12]
   15f56:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   15f58:	68fb      	ldr	r3, [r7, #12]
   15f5a:	3317      	adds	r3, #23
   15f5c:	2206      	movs	r2, #6
   15f5e:	2100      	movs	r1, #0
   15f60:	4618      	mov	r0, r3
   15f62:	f7f6 f9fb 	bl	c35c <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   15f66:	68fb      	ldr	r3, [r7, #12]
   15f68:	331d      	adds	r3, #29
   15f6a:	2206      	movs	r2, #6
   15f6c:	2100      	movs	r1, #0
   15f6e:	4618      	mov	r0, r3
   15f70:	f7f6 f9f4 	bl	c35c <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   15f74:	68fb      	ldr	r3, [r7, #12]
   15f76:	88da      	ldrh	r2, [r3, #6]
   15f78:	68fb      	ldr	r3, [r7, #12]
   15f7a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   15f7c:	68fb      	ldr	r3, [r7, #12]
   15f7e:	791a      	ldrb	r2, [r3, #4]
   15f80:	68fb      	ldr	r3, [r7, #12]
   15f82:	70da      	strb	r2, [r3, #3]
}
   15f84:	bf00      	nop
   15f86:	3710      	adds	r7, #16
   15f88:	46bd      	mov	sp, r7
   15f8a:	bd80      	pop	{r7, pc}

00015f8c <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15f8c:	b580      	push	{r7, lr}
   15f8e:	b084      	sub	sp, #16
   15f90:	af00      	add	r7, sp, #0
   15f92:	60f8      	str	r0, [r7, #12]
   15f94:	60b9      	str	r1, [r7, #8]
   15f96:	4613      	mov	r3, r2
   15f98:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   15f9a:	68bb      	ldr	r3, [r7, #8]
   15f9c:	1c5a      	adds	r2, r3, #1
   15f9e:	60ba      	str	r2, [r7, #8]
   15fa0:	781a      	ldrb	r2, [r3, #0]
   15fa2:	68fb      	ldr	r3, [r7, #12]
   15fa4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   15fa6:	68bb      	ldr	r3, [r7, #8]
   15fa8:	781b      	ldrb	r3, [r3, #0]
   15faa:	b29a      	uxth	r2, r3
   15fac:	68bb      	ldr	r3, [r7, #8]
   15fae:	3301      	adds	r3, #1
   15fb0:	781b      	ldrb	r3, [r3, #0]
   15fb2:	b29b      	uxth	r3, r3
   15fb4:	021b      	lsls	r3, r3, #8
   15fb6:	b29b      	uxth	r3, r3
   15fb8:	4413      	add	r3, r2
   15fba:	b29a      	uxth	r2, r3
   15fbc:	68fb      	ldr	r3, [r7, #12]
   15fbe:	80da      	strh	r2, [r3, #6]
   15fc0:	68bb      	ldr	r3, [r7, #8]
   15fc2:	3302      	adds	r3, #2
   15fc4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   15fc6:	68bb      	ldr	r3, [r7, #8]
   15fc8:	1c5a      	adds	r2, r3, #1
   15fca:	60ba      	str	r2, [r7, #8]
   15fcc:	781a      	ldrb	r2, [r3, #0]
   15fce:	68fb      	ldr	r3, [r7, #12]
   15fd0:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   15fd2:	68bb      	ldr	r3, [r7, #8]
   15fd4:	1c5a      	adds	r2, r3, #1
   15fd6:	60ba      	str	r2, [r7, #8]
   15fd8:	781a      	ldrb	r2, [r3, #0]
   15fda:	68fb      	ldr	r3, [r7, #12]
   15fdc:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   15fde:	68fb      	ldr	r3, [r7, #12]
   15fe0:	330a      	adds	r3, #10
   15fe2:	68b9      	ldr	r1, [r7, #8]
   15fe4:	4618      	mov	r0, r3
   15fe6:	f003 fe0d 	bl	19c04 <BdaCpy>
   15fea:	68bb      	ldr	r3, [r7, #8]
   15fec:	3306      	adds	r3, #6
   15fee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   15ff0:	68fb      	ldr	r3, [r7, #12]
   15ff2:	3317      	adds	r3, #23
   15ff4:	68b9      	ldr	r1, [r7, #8]
   15ff6:	4618      	mov	r0, r3
   15ff8:	f003 fe04 	bl	19c04 <BdaCpy>
   15ffc:	68bb      	ldr	r3, [r7, #8]
   15ffe:	3306      	adds	r3, #6
   16000:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   16002:	68fb      	ldr	r3, [r7, #12]
   16004:	331d      	adds	r3, #29
   16006:	68b9      	ldr	r1, [r7, #8]
   16008:	4618      	mov	r0, r3
   1600a:	f003 fdfb 	bl	19c04 <BdaCpy>
   1600e:	68bb      	ldr	r3, [r7, #8]
   16010:	3306      	adds	r3, #6
   16012:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   16014:	68bb      	ldr	r3, [r7, #8]
   16016:	781b      	ldrb	r3, [r3, #0]
   16018:	b29a      	uxth	r2, r3
   1601a:	68bb      	ldr	r3, [r7, #8]
   1601c:	3301      	adds	r3, #1
   1601e:	781b      	ldrb	r3, [r3, #0]
   16020:	b29b      	uxth	r3, r3
   16022:	021b      	lsls	r3, r3, #8
   16024:	b29b      	uxth	r3, r3
   16026:	4413      	add	r3, r2
   16028:	b29a      	uxth	r2, r3
   1602a:	68fb      	ldr	r3, [r7, #12]
   1602c:	821a      	strh	r2, [r3, #16]
   1602e:	68bb      	ldr	r3, [r7, #8]
   16030:	3302      	adds	r3, #2
   16032:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   16034:	68bb      	ldr	r3, [r7, #8]
   16036:	781b      	ldrb	r3, [r3, #0]
   16038:	b29a      	uxth	r2, r3
   1603a:	68bb      	ldr	r3, [r7, #8]
   1603c:	3301      	adds	r3, #1
   1603e:	781b      	ldrb	r3, [r3, #0]
   16040:	b29b      	uxth	r3, r3
   16042:	021b      	lsls	r3, r3, #8
   16044:	b29b      	uxth	r3, r3
   16046:	4413      	add	r3, r2
   16048:	b29a      	uxth	r2, r3
   1604a:	68fb      	ldr	r3, [r7, #12]
   1604c:	825a      	strh	r2, [r3, #18]
   1604e:	68bb      	ldr	r3, [r7, #8]
   16050:	3302      	adds	r3, #2
   16052:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   16054:	68bb      	ldr	r3, [r7, #8]
   16056:	781b      	ldrb	r3, [r3, #0]
   16058:	b29a      	uxth	r2, r3
   1605a:	68bb      	ldr	r3, [r7, #8]
   1605c:	3301      	adds	r3, #1
   1605e:	781b      	ldrb	r3, [r3, #0]
   16060:	b29b      	uxth	r3, r3
   16062:	021b      	lsls	r3, r3, #8
   16064:	b29b      	uxth	r3, r3
   16066:	4413      	add	r3, r2
   16068:	b29a      	uxth	r2, r3
   1606a:	68fb      	ldr	r3, [r7, #12]
   1606c:	829a      	strh	r2, [r3, #20]
   1606e:	68bb      	ldr	r3, [r7, #8]
   16070:	3302      	adds	r3, #2
   16072:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   16074:	68bb      	ldr	r3, [r7, #8]
   16076:	1c5a      	adds	r2, r3, #1
   16078:	60ba      	str	r2, [r7, #8]
   1607a:	781a      	ldrb	r2, [r3, #0]
   1607c:	68fb      	ldr	r3, [r7, #12]
   1607e:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   16080:	68fb      	ldr	r3, [r7, #12]
   16082:	88da      	ldrh	r2, [r3, #6]
   16084:	68fb      	ldr	r3, [r7, #12]
   16086:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   16088:	68fb      	ldr	r3, [r7, #12]
   1608a:	791a      	ldrb	r2, [r3, #4]
   1608c:	68fb      	ldr	r3, [r7, #12]
   1608e:	70da      	strb	r2, [r3, #3]
}
   16090:	bf00      	nop
   16092:	3710      	adds	r7, #16
   16094:	46bd      	mov	sp, r7
   16096:	bd80      	pop	{r7, pc}

00016098 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16098:	b480      	push	{r7}
   1609a:	b085      	sub	sp, #20
   1609c:	af00      	add	r7, sp, #0
   1609e:	60f8      	str	r0, [r7, #12]
   160a0:	60b9      	str	r1, [r7, #8]
   160a2:	4613      	mov	r3, r2
   160a4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   160a6:	68bb      	ldr	r3, [r7, #8]
   160a8:	1c5a      	adds	r2, r3, #1
   160aa:	60ba      	str	r2, [r7, #8]
   160ac:	781a      	ldrb	r2, [r3, #0]
   160ae:	68fb      	ldr	r3, [r7, #12]
   160b0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   160b2:	68bb      	ldr	r3, [r7, #8]
   160b4:	781b      	ldrb	r3, [r3, #0]
   160b6:	b29a      	uxth	r2, r3
   160b8:	68bb      	ldr	r3, [r7, #8]
   160ba:	3301      	adds	r3, #1
   160bc:	781b      	ldrb	r3, [r3, #0]
   160be:	b29b      	uxth	r3, r3
   160c0:	021b      	lsls	r3, r3, #8
   160c2:	b29b      	uxth	r3, r3
   160c4:	4413      	add	r3, r2
   160c6:	b29a      	uxth	r2, r3
   160c8:	68fb      	ldr	r3, [r7, #12]
   160ca:	80da      	strh	r2, [r3, #6]
   160cc:	68bb      	ldr	r3, [r7, #8]
   160ce:	3302      	adds	r3, #2
   160d0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   160d2:	68bb      	ldr	r3, [r7, #8]
   160d4:	1c5a      	adds	r2, r3, #1
   160d6:	60ba      	str	r2, [r7, #8]
   160d8:	781a      	ldrb	r2, [r3, #0]
   160da:	68fb      	ldr	r3, [r7, #12]
   160dc:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   160de:	68fb      	ldr	r3, [r7, #12]
   160e0:	88da      	ldrh	r2, [r3, #6]
   160e2:	68fb      	ldr	r3, [r7, #12]
   160e4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   160e6:	68fb      	ldr	r3, [r7, #12]
   160e8:	791a      	ldrb	r2, [r3, #4]
   160ea:	68fb      	ldr	r3, [r7, #12]
   160ec:	70da      	strb	r2, [r3, #3]
}
   160ee:	bf00      	nop
   160f0:	3714      	adds	r7, #20
   160f2:	46bd      	mov	sp, r7
   160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   160f8:	4770      	bx	lr

000160fa <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   160fa:	b480      	push	{r7}
   160fc:	b085      	sub	sp, #20
   160fe:	af00      	add	r7, sp, #0
   16100:	60f8      	str	r0, [r7, #12]
   16102:	60b9      	str	r1, [r7, #8]
   16104:	4613      	mov	r3, r2
   16106:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   16108:	68bb      	ldr	r3, [r7, #8]
   1610a:	1c5a      	adds	r2, r3, #1
   1610c:	60ba      	str	r2, [r7, #8]
   1610e:	781a      	ldrb	r2, [r3, #0]
   16110:	68fb      	ldr	r3, [r7, #12]
   16112:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   16114:	68bb      	ldr	r3, [r7, #8]
   16116:	781b      	ldrb	r3, [r3, #0]
   16118:	b29a      	uxth	r2, r3
   1611a:	68bb      	ldr	r3, [r7, #8]
   1611c:	3301      	adds	r3, #1
   1611e:	781b      	ldrb	r3, [r3, #0]
   16120:	b29b      	uxth	r3, r3
   16122:	021b      	lsls	r3, r3, #8
   16124:	b29b      	uxth	r3, r3
   16126:	4413      	add	r3, r2
   16128:	b29a      	uxth	r2, r3
   1612a:	68fb      	ldr	r3, [r7, #12]
   1612c:	80da      	strh	r2, [r3, #6]
   1612e:	68bb      	ldr	r3, [r7, #8]
   16130:	3302      	adds	r3, #2
   16132:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   16134:	68bb      	ldr	r3, [r7, #8]
   16136:	781b      	ldrb	r3, [r3, #0]
   16138:	b29a      	uxth	r2, r3
   1613a:	68bb      	ldr	r3, [r7, #8]
   1613c:	3301      	adds	r3, #1
   1613e:	781b      	ldrb	r3, [r3, #0]
   16140:	b29b      	uxth	r3, r3
   16142:	021b      	lsls	r3, r3, #8
   16144:	b29b      	uxth	r3, r3
   16146:	4413      	add	r3, r2
   16148:	b29a      	uxth	r2, r3
   1614a:	68fb      	ldr	r3, [r7, #12]
   1614c:	811a      	strh	r2, [r3, #8]
   1614e:	68bb      	ldr	r3, [r7, #8]
   16150:	3302      	adds	r3, #2
   16152:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   16154:	68bb      	ldr	r3, [r7, #8]
   16156:	781b      	ldrb	r3, [r3, #0]
   16158:	b29a      	uxth	r2, r3
   1615a:	68bb      	ldr	r3, [r7, #8]
   1615c:	3301      	adds	r3, #1
   1615e:	781b      	ldrb	r3, [r3, #0]
   16160:	b29b      	uxth	r3, r3
   16162:	021b      	lsls	r3, r3, #8
   16164:	b29b      	uxth	r3, r3
   16166:	4413      	add	r3, r2
   16168:	b29a      	uxth	r2, r3
   1616a:	68fb      	ldr	r3, [r7, #12]
   1616c:	815a      	strh	r2, [r3, #10]
   1616e:	68bb      	ldr	r3, [r7, #8]
   16170:	3302      	adds	r3, #2
   16172:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   16174:	68bb      	ldr	r3, [r7, #8]
   16176:	781b      	ldrb	r3, [r3, #0]
   16178:	b29a      	uxth	r2, r3
   1617a:	68bb      	ldr	r3, [r7, #8]
   1617c:	3301      	adds	r3, #1
   1617e:	781b      	ldrb	r3, [r3, #0]
   16180:	b29b      	uxth	r3, r3
   16182:	021b      	lsls	r3, r3, #8
   16184:	b29b      	uxth	r3, r3
   16186:	4413      	add	r3, r2
   16188:	b29a      	uxth	r2, r3
   1618a:	68fb      	ldr	r3, [r7, #12]
   1618c:	819a      	strh	r2, [r3, #12]
   1618e:	68bb      	ldr	r3, [r7, #8]
   16190:	3302      	adds	r3, #2
   16192:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   16194:	68fb      	ldr	r3, [r7, #12]
   16196:	88da      	ldrh	r2, [r3, #6]
   16198:	68fb      	ldr	r3, [r7, #12]
   1619a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   1619c:	68fb      	ldr	r3, [r7, #12]
   1619e:	791a      	ldrb	r2, [r3, #4]
   161a0:	68fb      	ldr	r3, [r7, #12]
   161a2:	70da      	strb	r2, [r3, #3]
}
   161a4:	bf00      	nop
   161a6:	3714      	adds	r7, #20
   161a8:	46bd      	mov	sp, r7
   161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   161ae:	4770      	bx	lr

000161b0 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   161b0:	b480      	push	{r7}
   161b2:	b085      	sub	sp, #20
   161b4:	af00      	add	r7, sp, #0
   161b6:	60f8      	str	r0, [r7, #12]
   161b8:	60b9      	str	r1, [r7, #8]
   161ba:	4613      	mov	r3, r2
   161bc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   161be:	68bb      	ldr	r3, [r7, #8]
   161c0:	1c5a      	adds	r2, r3, #1
   161c2:	60ba      	str	r2, [r7, #8]
   161c4:	781a      	ldrb	r2, [r3, #0]
   161c6:	68fb      	ldr	r3, [r7, #12]
   161c8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   161ca:	68fb      	ldr	r3, [r7, #12]
   161cc:	791a      	ldrb	r2, [r3, #4]
   161ce:	68fb      	ldr	r3, [r7, #12]
   161d0:	70da      	strb	r2, [r3, #3]
}
   161d2:	bf00      	nop
   161d4:	3714      	adds	r7, #20
   161d6:	46bd      	mov	sp, r7
   161d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   161dc:	4770      	bx	lr

000161de <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   161de:	b480      	push	{r7}
   161e0:	b085      	sub	sp, #20
   161e2:	af00      	add	r7, sp, #0
   161e4:	60f8      	str	r0, [r7, #12]
   161e6:	60b9      	str	r1, [r7, #8]
   161e8:	4613      	mov	r3, r2
   161ea:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   161ec:	68bb      	ldr	r3, [r7, #8]
   161ee:	1c5a      	adds	r2, r3, #1
   161f0:	60ba      	str	r2, [r7, #8]
   161f2:	781a      	ldrb	r2, [r3, #0]
   161f4:	68fb      	ldr	r3, [r7, #12]
   161f6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   161f8:	68bb      	ldr	r3, [r7, #8]
   161fa:	781b      	ldrb	r3, [r3, #0]
   161fc:	b29a      	uxth	r2, r3
   161fe:	68bb      	ldr	r3, [r7, #8]
   16200:	3301      	adds	r3, #1
   16202:	781b      	ldrb	r3, [r3, #0]
   16204:	b29b      	uxth	r3, r3
   16206:	021b      	lsls	r3, r3, #8
   16208:	b29b      	uxth	r3, r3
   1620a:	4413      	add	r3, r2
   1620c:	b29a      	uxth	r2, r3
   1620e:	68fb      	ldr	r3, [r7, #12]
   16210:	80da      	strh	r2, [r3, #6]
   16212:	68bb      	ldr	r3, [r7, #8]
   16214:	3302      	adds	r3, #2
   16216:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   16218:	68bb      	ldr	r3, [r7, #8]
   1621a:	1c5a      	adds	r2, r3, #1
   1621c:	60ba      	str	r2, [r7, #8]
   1621e:	781b      	ldrb	r3, [r3, #0]
   16220:	b25a      	sxtb	r2, r3
   16222:	68fb      	ldr	r3, [r7, #12]
   16224:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   16226:	68fb      	ldr	r3, [r7, #12]
   16228:	88da      	ldrh	r2, [r3, #6]
   1622a:	68fb      	ldr	r3, [r7, #12]
   1622c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   1622e:	68fb      	ldr	r3, [r7, #12]
   16230:	791a      	ldrb	r2, [r3, #4]
   16232:	68fb      	ldr	r3, [r7, #12]
   16234:	70da      	strb	r2, [r3, #3]
}
   16236:	bf00      	nop
   16238:	3714      	adds	r7, #20
   1623a:	46bd      	mov	sp, r7
   1623c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16240:	4770      	bx	lr

00016242 <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16242:	b580      	push	{r7, lr}
   16244:	b084      	sub	sp, #16
   16246:	af00      	add	r7, sp, #0
   16248:	60f8      	str	r0, [r7, #12]
   1624a:	60b9      	str	r1, [r7, #8]
   1624c:	4613      	mov	r3, r2
   1624e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   16250:	68bb      	ldr	r3, [r7, #8]
   16252:	1c5a      	adds	r2, r3, #1
   16254:	60ba      	str	r2, [r7, #8]
   16256:	781a      	ldrb	r2, [r3, #0]
   16258:	68fb      	ldr	r3, [r7, #12]
   1625a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   1625c:	68bb      	ldr	r3, [r7, #8]
   1625e:	781b      	ldrb	r3, [r3, #0]
   16260:	b29a      	uxth	r2, r3
   16262:	68bb      	ldr	r3, [r7, #8]
   16264:	3301      	adds	r3, #1
   16266:	781b      	ldrb	r3, [r3, #0]
   16268:	b29b      	uxth	r3, r3
   1626a:	021b      	lsls	r3, r3, #8
   1626c:	b29b      	uxth	r3, r3
   1626e:	4413      	add	r3, r2
   16270:	b29a      	uxth	r2, r3
   16272:	68fb      	ldr	r3, [r7, #12]
   16274:	80da      	strh	r2, [r3, #6]
   16276:	68bb      	ldr	r3, [r7, #8]
   16278:	3302      	adds	r3, #2
   1627a:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   1627c:	68fb      	ldr	r3, [r7, #12]
   1627e:	3308      	adds	r3, #8
   16280:	2205      	movs	r2, #5
   16282:	68b9      	ldr	r1, [r7, #8]
   16284:	4618      	mov	r0, r3
   16286:	f7f5 ff6b 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   1628a:	68fb      	ldr	r3, [r7, #12]
   1628c:	88da      	ldrh	r2, [r3, #6]
   1628e:	68fb      	ldr	r3, [r7, #12]
   16290:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   16292:	68fb      	ldr	r3, [r7, #12]
   16294:	791a      	ldrb	r2, [r3, #4]
   16296:	68fb      	ldr	r3, [r7, #12]
   16298:	70da      	strb	r2, [r3, #3]
}
   1629a:	bf00      	nop
   1629c:	3710      	adds	r7, #16
   1629e:	46bd      	mov	sp, r7
   162a0:	bd80      	pop	{r7, pc}

000162a2 <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   162a2:	b480      	push	{r7}
   162a4:	b085      	sub	sp, #20
   162a6:	af00      	add	r7, sp, #0
   162a8:	60f8      	str	r0, [r7, #12]
   162aa:	60b9      	str	r1, [r7, #8]
   162ac:	4613      	mov	r3, r2
   162ae:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   162b0:	68bb      	ldr	r3, [r7, #8]
   162b2:	1c5a      	adds	r2, r3, #1
   162b4:	60ba      	str	r2, [r7, #8]
   162b6:	781a      	ldrb	r2, [r3, #0]
   162b8:	68fb      	ldr	r3, [r7, #12]
   162ba:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   162bc:	68bb      	ldr	r3, [r7, #8]
   162be:	781a      	ldrb	r2, [r3, #0]
   162c0:	68fb      	ldr	r3, [r7, #12]
   162c2:	715a      	strb	r2, [r3, #5]
   162c4:	68bb      	ldr	r3, [r7, #8]
   162c6:	3302      	adds	r3, #2
   162c8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   162ca:	68bb      	ldr	r3, [r7, #8]
   162cc:	1c5a      	adds	r2, r3, #1
   162ce:	60ba      	str	r2, [r7, #8]
   162d0:	781b      	ldrb	r3, [r3, #0]
   162d2:	b25a      	sxtb	r2, r3
   162d4:	68fb      	ldr	r3, [r7, #12]
   162d6:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   162d8:	68fb      	ldr	r3, [r7, #12]
   162da:	795b      	ldrb	r3, [r3, #5]
   162dc:	b29a      	uxth	r2, r3
   162de:	68fb      	ldr	r3, [r7, #12]
   162e0:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   162e2:	68fb      	ldr	r3, [r7, #12]
   162e4:	791a      	ldrb	r2, [r3, #4]
   162e6:	68fb      	ldr	r3, [r7, #12]
   162e8:	70da      	strb	r2, [r3, #3]
}
   162ea:	bf00      	nop
   162ec:	3714      	adds	r7, #20
   162ee:	46bd      	mov	sp, r7
   162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   162f4:	4770      	bx	lr

000162f6 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   162f6:	b480      	push	{r7}
   162f8:	b085      	sub	sp, #20
   162fa:	af00      	add	r7, sp, #0
   162fc:	60f8      	str	r0, [r7, #12]
   162fe:	60b9      	str	r1, [r7, #8]
   16300:	4613      	mov	r3, r2
   16302:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   16304:	68bb      	ldr	r3, [r7, #8]
   16306:	1c5a      	adds	r2, r3, #1
   16308:	60ba      	str	r2, [r7, #8]
   1630a:	781a      	ldrb	r2, [r3, #0]
   1630c:	68fb      	ldr	r3, [r7, #12]
   1630e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   16310:	68bb      	ldr	r3, [r7, #8]
   16312:	781b      	ldrb	r3, [r3, #0]
   16314:	b29a      	uxth	r2, r3
   16316:	68bb      	ldr	r3, [r7, #8]
   16318:	3301      	adds	r3, #1
   1631a:	781b      	ldrb	r3, [r3, #0]
   1631c:	b29b      	uxth	r3, r3
   1631e:	021b      	lsls	r3, r3, #8
   16320:	b29b      	uxth	r3, r3
   16322:	4413      	add	r3, r2
   16324:	b29a      	uxth	r2, r3
   16326:	68fb      	ldr	r3, [r7, #12]
   16328:	80da      	strh	r2, [r3, #6]
   1632a:	68bb      	ldr	r3, [r7, #8]
   1632c:	3302      	adds	r3, #2
   1632e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   16330:	68bb      	ldr	r3, [r7, #8]
   16332:	1c5a      	adds	r2, r3, #1
   16334:	60ba      	str	r2, [r7, #8]
   16336:	781a      	ldrb	r2, [r3, #0]
   16338:	68fb      	ldr	r3, [r7, #12]
   1633a:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   1633c:	68bb      	ldr	r3, [r7, #8]
   1633e:	781b      	ldrb	r3, [r3, #0]
   16340:	b29a      	uxth	r2, r3
   16342:	68bb      	ldr	r3, [r7, #8]
   16344:	3301      	adds	r3, #1
   16346:	781b      	ldrb	r3, [r3, #0]
   16348:	b29b      	uxth	r3, r3
   1634a:	021b      	lsls	r3, r3, #8
   1634c:	b29b      	uxth	r3, r3
   1634e:	4413      	add	r3, r2
   16350:	b29a      	uxth	r2, r3
   16352:	68fb      	ldr	r3, [r7, #12]
   16354:	815a      	strh	r2, [r3, #10]
   16356:	68bb      	ldr	r3, [r7, #8]
   16358:	3302      	adds	r3, #2
   1635a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   1635c:	68bb      	ldr	r3, [r7, #8]
   1635e:	781b      	ldrb	r3, [r3, #0]
   16360:	b29a      	uxth	r2, r3
   16362:	68bb      	ldr	r3, [r7, #8]
   16364:	3301      	adds	r3, #1
   16366:	781b      	ldrb	r3, [r3, #0]
   16368:	b29b      	uxth	r3, r3
   1636a:	021b      	lsls	r3, r3, #8
   1636c:	b29b      	uxth	r3, r3
   1636e:	4413      	add	r3, r2
   16370:	b29a      	uxth	r2, r3
   16372:	68fb      	ldr	r3, [r7, #12]
   16374:	819a      	strh	r2, [r3, #12]
   16376:	68bb      	ldr	r3, [r7, #8]
   16378:	3302      	adds	r3, #2
   1637a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   1637c:	68fb      	ldr	r3, [r7, #12]
   1637e:	88da      	ldrh	r2, [r3, #6]
   16380:	68fb      	ldr	r3, [r7, #12]
   16382:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   16384:	68fb      	ldr	r3, [r7, #12]
   16386:	791a      	ldrb	r2, [r3, #4]
   16388:	68fb      	ldr	r3, [r7, #12]
   1638a:	70da      	strb	r2, [r3, #3]
}
   1638c:	bf00      	nop
   1638e:	3714      	adds	r7, #20
   16390:	46bd      	mov	sp, r7
   16392:	f85d 7b04 	ldr.w	r7, [sp], #4
   16396:	4770      	bx	lr

00016398 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16398:	b580      	push	{r7, lr}
   1639a:	b084      	sub	sp, #16
   1639c:	af00      	add	r7, sp, #0
   1639e:	60f8      	str	r0, [r7, #12]
   163a0:	60b9      	str	r1, [r7, #8]
   163a2:	4613      	mov	r3, r2
   163a4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   163a6:	68bb      	ldr	r3, [r7, #8]
   163a8:	1c5a      	adds	r2, r3, #1
   163aa:	60ba      	str	r2, [r7, #8]
   163ac:	781a      	ldrb	r2, [r3, #0]
   163ae:	68fb      	ldr	r3, [r7, #12]
   163b0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   163b2:	68bb      	ldr	r3, [r7, #8]
   163b4:	781b      	ldrb	r3, [r3, #0]
   163b6:	b29a      	uxth	r2, r3
   163b8:	68bb      	ldr	r3, [r7, #8]
   163ba:	3301      	adds	r3, #1
   163bc:	781b      	ldrb	r3, [r3, #0]
   163be:	b29b      	uxth	r3, r3
   163c0:	021b      	lsls	r3, r3, #8
   163c2:	b29b      	uxth	r3, r3
   163c4:	4413      	add	r3, r2
   163c6:	b29a      	uxth	r2, r3
   163c8:	68fb      	ldr	r3, [r7, #12]
   163ca:	80da      	strh	r2, [r3, #6]
   163cc:	68bb      	ldr	r3, [r7, #8]
   163ce:	3302      	adds	r3, #2
   163d0:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   163d2:	68fb      	ldr	r3, [r7, #12]
   163d4:	3308      	adds	r3, #8
   163d6:	2208      	movs	r2, #8
   163d8:	68b9      	ldr	r1, [r7, #8]
   163da:	4618      	mov	r0, r3
   163dc:	f7f5 fec0 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   163e0:	68fb      	ldr	r3, [r7, #12]
   163e2:	88da      	ldrh	r2, [r3, #6]
   163e4:	68fb      	ldr	r3, [r7, #12]
   163e6:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   163e8:	68fb      	ldr	r3, [r7, #12]
   163ea:	791a      	ldrb	r2, [r3, #4]
   163ec:	68fb      	ldr	r3, [r7, #12]
   163ee:	70da      	strb	r2, [r3, #3]
}
   163f0:	bf00      	nop
   163f2:	3710      	adds	r7, #16
   163f4:	46bd      	mov	sp, r7
   163f6:	bd80      	pop	{r7, pc}

000163f8 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   163f8:	b480      	push	{r7}
   163fa:	b085      	sub	sp, #20
   163fc:	af00      	add	r7, sp, #0
   163fe:	60f8      	str	r0, [r7, #12]
   16400:	60b9      	str	r1, [r7, #8]
   16402:	4613      	mov	r3, r2
   16404:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   16406:	68bb      	ldr	r3, [r7, #8]
   16408:	1c5a      	adds	r2, r3, #1
   1640a:	60ba      	str	r2, [r7, #8]
   1640c:	781a      	ldrb	r2, [r3, #0]
   1640e:	68fb      	ldr	r3, [r7, #12]
   16410:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   16412:	68bb      	ldr	r3, [r7, #8]
   16414:	781b      	ldrb	r3, [r3, #0]
   16416:	b29a      	uxth	r2, r3
   16418:	68bb      	ldr	r3, [r7, #8]
   1641a:	3301      	adds	r3, #1
   1641c:	781b      	ldrb	r3, [r3, #0]
   1641e:	b29b      	uxth	r3, r3
   16420:	021b      	lsls	r3, r3, #8
   16422:	b29b      	uxth	r3, r3
   16424:	4413      	add	r3, r2
   16426:	b29a      	uxth	r2, r3
   16428:	68fb      	ldr	r3, [r7, #12]
   1642a:	80da      	strh	r2, [r3, #6]
   1642c:	68bb      	ldr	r3, [r7, #8]
   1642e:	3302      	adds	r3, #2
   16430:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   16432:	68fb      	ldr	r3, [r7, #12]
   16434:	88da      	ldrh	r2, [r3, #6]
   16436:	68fb      	ldr	r3, [r7, #12]
   16438:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   1643a:	68fb      	ldr	r3, [r7, #12]
   1643c:	791a      	ldrb	r2, [r3, #4]
   1643e:	68fb      	ldr	r3, [r7, #12]
   16440:	70da      	strb	r2, [r3, #3]
}
   16442:	bf00      	nop
   16444:	3714      	adds	r7, #20
   16446:	46bd      	mov	sp, r7
   16448:	f85d 7b04 	ldr.w	r7, [sp], #4
   1644c:	4770      	bx	lr

0001644e <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1644e:	b480      	push	{r7}
   16450:	b085      	sub	sp, #20
   16452:	af00      	add	r7, sp, #0
   16454:	60f8      	str	r0, [r7, #12]
   16456:	60b9      	str	r1, [r7, #8]
   16458:	4613      	mov	r3, r2
   1645a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   1645c:	68bb      	ldr	r3, [r7, #8]
   1645e:	1c5a      	adds	r2, r3, #1
   16460:	60ba      	str	r2, [r7, #8]
   16462:	781a      	ldrb	r2, [r3, #0]
   16464:	68fb      	ldr	r3, [r7, #12]
   16466:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   16468:	68bb      	ldr	r3, [r7, #8]
   1646a:	781b      	ldrb	r3, [r3, #0]
   1646c:	b29a      	uxth	r2, r3
   1646e:	68bb      	ldr	r3, [r7, #8]
   16470:	3301      	adds	r3, #1
   16472:	781b      	ldrb	r3, [r3, #0]
   16474:	b29b      	uxth	r3, r3
   16476:	021b      	lsls	r3, r3, #8
   16478:	b29b      	uxth	r3, r3
   1647a:	4413      	add	r3, r2
   1647c:	b29a      	uxth	r2, r3
   1647e:	68fb      	ldr	r3, [r7, #12]
   16480:	80da      	strh	r2, [r3, #6]
   16482:	68bb      	ldr	r3, [r7, #8]
   16484:	3302      	adds	r3, #2
   16486:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   16488:	68fb      	ldr	r3, [r7, #12]
   1648a:	88da      	ldrh	r2, [r3, #6]
   1648c:	68fb      	ldr	r3, [r7, #12]
   1648e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   16490:	68fb      	ldr	r3, [r7, #12]
   16492:	791a      	ldrb	r2, [r3, #4]
   16494:	68fb      	ldr	r3, [r7, #12]
   16496:	70da      	strb	r2, [r3, #3]
}
   16498:	bf00      	nop
   1649a:	3714      	adds	r7, #20
   1649c:	46bd      	mov	sp, r7
   1649e:	f85d 7b04 	ldr.w	r7, [sp], #4
   164a2:	4770      	bx	lr

000164a4 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   164a4:	b480      	push	{r7}
   164a6:	b085      	sub	sp, #20
   164a8:	af00      	add	r7, sp, #0
   164aa:	60f8      	str	r0, [r7, #12]
   164ac:	60b9      	str	r1, [r7, #8]
   164ae:	4613      	mov	r3, r2
   164b0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   164b2:	68bb      	ldr	r3, [r7, #8]
   164b4:	1c5a      	adds	r2, r3, #1
   164b6:	60ba      	str	r2, [r7, #8]
   164b8:	781a      	ldrb	r2, [r3, #0]
   164ba:	68fb      	ldr	r3, [r7, #12]
   164bc:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   164be:	68bb      	ldr	r3, [r7, #8]
   164c0:	781b      	ldrb	r3, [r3, #0]
   164c2:	b29a      	uxth	r2, r3
   164c4:	68bb      	ldr	r3, [r7, #8]
   164c6:	3301      	adds	r3, #1
   164c8:	781b      	ldrb	r3, [r3, #0]
   164ca:	b29b      	uxth	r3, r3
   164cc:	021b      	lsls	r3, r3, #8
   164ce:	b29b      	uxth	r3, r3
   164d0:	4413      	add	r3, r2
   164d2:	b29a      	uxth	r2, r3
   164d4:	68fb      	ldr	r3, [r7, #12]
   164d6:	80da      	strh	r2, [r3, #6]
   164d8:	68bb      	ldr	r3, [r7, #8]
   164da:	3302      	adds	r3, #2
   164dc:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   164de:	68fb      	ldr	r3, [r7, #12]
   164e0:	88da      	ldrh	r2, [r3, #6]
   164e2:	68fb      	ldr	r3, [r7, #12]
   164e4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   164e6:	68fb      	ldr	r3, [r7, #12]
   164e8:	791a      	ldrb	r2, [r3, #4]
   164ea:	68fb      	ldr	r3, [r7, #12]
   164ec:	70da      	strb	r2, [r3, #3]
}
   164ee:	bf00      	nop
   164f0:	3714      	adds	r7, #20
   164f2:	46bd      	mov	sp, r7
   164f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   164f8:	4770      	bx	lr

000164fa <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   164fa:	b480      	push	{r7}
   164fc:	b085      	sub	sp, #20
   164fe:	af00      	add	r7, sp, #0
   16500:	60f8      	str	r0, [r7, #12]
   16502:	60b9      	str	r1, [r7, #8]
   16504:	4613      	mov	r3, r2
   16506:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   16508:	68bb      	ldr	r3, [r7, #8]
   1650a:	1c5a      	adds	r2, r3, #1
   1650c:	60ba      	str	r2, [r7, #8]
   1650e:	781a      	ldrb	r2, [r3, #0]
   16510:	68fb      	ldr	r3, [r7, #12]
   16512:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   16514:	68bb      	ldr	r3, [r7, #8]
   16516:	781b      	ldrb	r3, [r3, #0]
   16518:	b29a      	uxth	r2, r3
   1651a:	68bb      	ldr	r3, [r7, #8]
   1651c:	3301      	adds	r3, #1
   1651e:	781b      	ldrb	r3, [r3, #0]
   16520:	b29b      	uxth	r3, r3
   16522:	021b      	lsls	r3, r3, #8
   16524:	b29b      	uxth	r3, r3
   16526:	4413      	add	r3, r2
   16528:	b29a      	uxth	r2, r3
   1652a:	68fb      	ldr	r3, [r7, #12]
   1652c:	80da      	strh	r2, [r3, #6]
   1652e:	68bb      	ldr	r3, [r7, #8]
   16530:	3302      	adds	r3, #2
   16532:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   16534:	68bb      	ldr	r3, [r7, #8]
   16536:	1c5a      	adds	r2, r3, #1
   16538:	60ba      	str	r2, [r7, #8]
   1653a:	781a      	ldrb	r2, [r3, #0]
   1653c:	68fb      	ldr	r3, [r7, #12]
   1653e:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   16540:	68fb      	ldr	r3, [r7, #12]
   16542:	88da      	ldrh	r2, [r3, #6]
   16544:	68fb      	ldr	r3, [r7, #12]
   16546:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   16548:	68fb      	ldr	r3, [r7, #12]
   1654a:	791a      	ldrb	r2, [r3, #4]
   1654c:	68fb      	ldr	r3, [r7, #12]
   1654e:	70da      	strb	r2, [r3, #3]
}
   16550:	bf00      	nop
   16552:	3714      	adds	r7, #20
   16554:	46bd      	mov	sp, r7
   16556:	f85d 7b04 	ldr.w	r7, [sp], #4
   1655a:	4770      	bx	lr

0001655c <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1655c:	b580      	push	{r7, lr}
   1655e:	b084      	sub	sp, #16
   16560:	af00      	add	r7, sp, #0
   16562:	60f8      	str	r0, [r7, #12]
   16564:	60b9      	str	r1, [r7, #8]
   16566:	4613      	mov	r3, r2
   16568:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   1656a:	68bb      	ldr	r3, [r7, #8]
   1656c:	781b      	ldrb	r3, [r3, #0]
   1656e:	b29a      	uxth	r2, r3
   16570:	68bb      	ldr	r3, [r7, #8]
   16572:	3301      	adds	r3, #1
   16574:	781b      	ldrb	r3, [r3, #0]
   16576:	b29b      	uxth	r3, r3
   16578:	021b      	lsls	r3, r3, #8
   1657a:	b29b      	uxth	r3, r3
   1657c:	4413      	add	r3, r2
   1657e:	b29a      	uxth	r2, r3
   16580:	68fb      	ldr	r3, [r7, #12]
   16582:	809a      	strh	r2, [r3, #4]
   16584:	68bb      	ldr	r3, [r7, #8]
   16586:	3302      	adds	r3, #2
   16588:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   1658a:	68fb      	ldr	r3, [r7, #12]
   1658c:	3306      	adds	r3, #6
   1658e:	2208      	movs	r2, #8
   16590:	68b9      	ldr	r1, [r7, #8]
   16592:	4618      	mov	r0, r3
   16594:	f7f5 fde4 	bl	c160 <memcpy>
  p += HCI_RAND_LEN;
   16598:	68bb      	ldr	r3, [r7, #8]
   1659a:	3308      	adds	r3, #8
   1659c:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   1659e:	68bb      	ldr	r3, [r7, #8]
   165a0:	781b      	ldrb	r3, [r3, #0]
   165a2:	b29a      	uxth	r2, r3
   165a4:	68bb      	ldr	r3, [r7, #8]
   165a6:	3301      	adds	r3, #1
   165a8:	781b      	ldrb	r3, [r3, #0]
   165aa:	b29b      	uxth	r3, r3
   165ac:	021b      	lsls	r3, r3, #8
   165ae:	b29b      	uxth	r3, r3
   165b0:	4413      	add	r3, r2
   165b2:	b29a      	uxth	r2, r3
   165b4:	68fb      	ldr	r3, [r7, #12]
   165b6:	81da      	strh	r2, [r3, #14]
   165b8:	68bb      	ldr	r3, [r7, #8]
   165ba:	3302      	adds	r3, #2
   165bc:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   165be:	68fb      	ldr	r3, [r7, #12]
   165c0:	889a      	ldrh	r2, [r3, #4]
   165c2:	68fb      	ldr	r3, [r7, #12]
   165c4:	801a      	strh	r2, [r3, #0]
}
   165c6:	bf00      	nop
   165c8:	3710      	adds	r7, #16
   165ca:	46bd      	mov	sp, r7
   165cc:	bd80      	pop	{r7, pc}

000165ce <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   165ce:	b480      	push	{r7}
   165d0:	b085      	sub	sp, #20
   165d2:	af00      	add	r7, sp, #0
   165d4:	60f8      	str	r0, [r7, #12]
   165d6:	60b9      	str	r1, [r7, #8]
   165d8:	4613      	mov	r3, r2
   165da:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   165dc:	68bb      	ldr	r3, [r7, #8]
   165de:	781b      	ldrb	r3, [r3, #0]
   165e0:	b29a      	uxth	r2, r3
   165e2:	68bb      	ldr	r3, [r7, #8]
   165e4:	3301      	adds	r3, #1
   165e6:	781b      	ldrb	r3, [r3, #0]
   165e8:	b29b      	uxth	r3, r3
   165ea:	021b      	lsls	r3, r3, #8
   165ec:	b29b      	uxth	r3, r3
   165ee:	4413      	add	r3, r2
   165f0:	b29a      	uxth	r2, r3
   165f2:	68fb      	ldr	r3, [r7, #12]
   165f4:	809a      	strh	r2, [r3, #4]
   165f6:	68bb      	ldr	r3, [r7, #8]
   165f8:	3302      	adds	r3, #2
   165fa:	60bb      	str	r3, [r7, #8]
}
   165fc:	bf00      	nop
   165fe:	3714      	adds	r7, #20
   16600:	46bd      	mov	sp, r7
   16602:	f85d 7b04 	ldr.w	r7, [sp], #4
   16606:	4770      	bx	lr

00016608 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16608:	b580      	push	{r7, lr}
   1660a:	b084      	sub	sp, #16
   1660c:	af00      	add	r7, sp, #0
   1660e:	60f8      	str	r0, [r7, #12]
   16610:	60b9      	str	r1, [r7, #8]
   16612:	4613      	mov	r3, r2
   16614:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
   16616:	68bb      	ldr	r3, [r7, #8]
   16618:	3b02      	subs	r3, #2
   1661a:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   1661c:	68bb      	ldr	r3, [r7, #8]
   1661e:	781b      	ldrb	r3, [r3, #0]
   16620:	b29a      	uxth	r2, r3
   16622:	68bb      	ldr	r3, [r7, #8]
   16624:	3301      	adds	r3, #1
   16626:	781b      	ldrb	r3, [r3, #0]
   16628:	b29b      	uxth	r3, r3
   1662a:	021b      	lsls	r3, r3, #8
   1662c:	b29b      	uxth	r3, r3
   1662e:	4413      	add	r3, r2
   16630:	b29a      	uxth	r2, r3
   16632:	68fb      	ldr	r3, [r7, #12]
   16634:	809a      	strh	r2, [r3, #4]
   16636:	68bb      	ldr	r3, [r7, #8]
   16638:	3302      	adds	r3, #2
   1663a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1663c:	68bb      	ldr	r3, [r7, #8]
   1663e:	1c5a      	adds	r2, r3, #1
   16640:	60ba      	str	r2, [r7, #8]
   16642:	781a      	ldrb	r2, [r3, #0]
   16644:	68fb      	ldr	r3, [r7, #12]
   16646:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   16648:	68fb      	ldr	r3, [r7, #12]
   1664a:	1d98      	adds	r0, r3, #6
   1664c:	79fb      	ldrb	r3, [r7, #7]
   1664e:	3b04      	subs	r3, #4
   16650:	461a      	mov	r2, r3
   16652:	68b9      	ldr	r1, [r7, #8]
   16654:	f7f5 fd84 	bl	c160 <memcpy>
}
   16658:	bf00      	nop
   1665a:	3710      	adds	r7, #16
   1665c:	46bd      	mov	sp, r7
   1665e:	bd80      	pop	{r7, pc}

00016660 <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16660:	b580      	push	{r7, lr}
   16662:	b084      	sub	sp, #16
   16664:	af00      	add	r7, sp, #0
   16666:	60f8      	str	r0, [r7, #12]
   16668:	60b9      	str	r1, [r7, #8]
   1666a:	4613      	mov	r3, r2
   1666c:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   1666e:	68fb      	ldr	r3, [r7, #12]
   16670:	3304      	adds	r3, #4
   16672:	79fa      	ldrb	r2, [r7, #7]
   16674:	68b9      	ldr	r1, [r7, #8]
   16676:	4618      	mov	r0, r3
   16678:	f7f5 fd72 	bl	c160 <memcpy>
}
   1667c:	bf00      	nop
   1667e:	3710      	adds	r7, #16
   16680:	46bd      	mov	sp, r7
   16682:	bd80      	pop	{r7, pc}

00016684 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16684:	b480      	push	{r7}
   16686:	b085      	sub	sp, #20
   16688:	af00      	add	r7, sp, #0
   1668a:	60f8      	str	r0, [r7, #12]
   1668c:	60b9      	str	r1, [r7, #8]
   1668e:	4613      	mov	r3, r2
   16690:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   16692:	68bb      	ldr	r3, [r7, #8]
   16694:	1c5a      	adds	r2, r3, #1
   16696:	60ba      	str	r2, [r7, #8]
   16698:	781a      	ldrb	r2, [r3, #0]
   1669a:	68fb      	ldr	r3, [r7, #12]
   1669c:	711a      	strb	r2, [r3, #4]
}
   1669e:	bf00      	nop
   166a0:	3714      	adds	r7, #20
   166a2:	46bd      	mov	sp, r7
   166a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   166a8:	4770      	bx	lr

000166aa <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   166aa:	b580      	push	{r7, lr}
   166ac:	b084      	sub	sp, #16
   166ae:	af00      	add	r7, sp, #0
   166b0:	60f8      	str	r0, [r7, #12]
   166b2:	60b9      	str	r1, [r7, #8]
   166b4:	4613      	mov	r3, r2
   166b6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   166b8:	68bb      	ldr	r3, [r7, #8]
   166ba:	1c5a      	adds	r2, r3, #1
   166bc:	60ba      	str	r2, [r7, #8]
   166be:	781a      	ldrb	r2, [r3, #0]
   166c0:	68fb      	ldr	r3, [r7, #12]
   166c2:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   166c4:	68fb      	ldr	r3, [r7, #12]
   166c6:	3305      	adds	r3, #5
   166c8:	2210      	movs	r2, #16
   166ca:	68b9      	ldr	r1, [r7, #8]
   166cc:	4618      	mov	r0, r3
   166ce:	f7f5 fd47 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   166d2:	68fb      	ldr	r3, [r7, #12]
   166d4:	791a      	ldrb	r2, [r3, #4]
   166d6:	68fb      	ldr	r3, [r7, #12]
   166d8:	70da      	strb	r2, [r3, #3]
}
   166da:	bf00      	nop
   166dc:	3710      	adds	r7, #16
   166de:	46bd      	mov	sp, r7
   166e0:	bd80      	pop	{r7, pc}

000166e2 <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   166e2:	b580      	push	{r7, lr}
   166e4:	b084      	sub	sp, #16
   166e6:	af00      	add	r7, sp, #0
   166e8:	60f8      	str	r0, [r7, #12]
   166ea:	60b9      	str	r1, [r7, #8]
   166ec:	4613      	mov	r3, r2
   166ee:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   166f0:	68bb      	ldr	r3, [r7, #8]
   166f2:	1c5a      	adds	r2, r3, #1
   166f4:	60ba      	str	r2, [r7, #8]
   166f6:	781a      	ldrb	r2, [r3, #0]
   166f8:	68fb      	ldr	r3, [r7, #12]
   166fa:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   166fc:	68fb      	ldr	r3, [r7, #12]
   166fe:	3305      	adds	r3, #5
   16700:	2208      	movs	r2, #8
   16702:	68b9      	ldr	r1, [r7, #8]
   16704:	4618      	mov	r0, r3
   16706:	f7f5 fd2b 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   1670a:	68fb      	ldr	r3, [r7, #12]
   1670c:	791a      	ldrb	r2, [r3, #4]
   1670e:	68fb      	ldr	r3, [r7, #12]
   16710:	70da      	strb	r2, [r3, #3]
}
   16712:	bf00      	nop
   16714:	3710      	adds	r7, #16
   16716:	46bd      	mov	sp, r7
   16718:	bd80      	pop	{r7, pc}

0001671a <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1671a:	b480      	push	{r7}
   1671c:	b085      	sub	sp, #20
   1671e:	af00      	add	r7, sp, #0
   16720:	60f8      	str	r0, [r7, #12]
   16722:	60b9      	str	r1, [r7, #8]
   16724:	4613      	mov	r3, r2
   16726:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   16728:	68bb      	ldr	r3, [r7, #8]
   1672a:	1c5a      	adds	r2, r3, #1
   1672c:	60ba      	str	r2, [r7, #8]
   1672e:	781a      	ldrb	r2, [r3, #0]
   16730:	68fb      	ldr	r3, [r7, #12]
   16732:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   16734:	68fb      	ldr	r3, [r7, #12]
   16736:	791a      	ldrb	r2, [r3, #4]
   16738:	68fb      	ldr	r3, [r7, #12]
   1673a:	70da      	strb	r2, [r3, #3]
}
   1673c:	bf00      	nop
   1673e:	3714      	adds	r7, #20
   16740:	46bd      	mov	sp, r7
   16742:	f85d 7b04 	ldr.w	r7, [sp], #4
   16746:	4770      	bx	lr

00016748 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16748:	b480      	push	{r7}
   1674a:	b085      	sub	sp, #20
   1674c:	af00      	add	r7, sp, #0
   1674e:	60f8      	str	r0, [r7, #12]
   16750:	60b9      	str	r1, [r7, #8]
   16752:	4613      	mov	r3, r2
   16754:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   16756:	68bb      	ldr	r3, [r7, #8]
   16758:	1c5a      	adds	r2, r3, #1
   1675a:	60ba      	str	r2, [r7, #8]
   1675c:	781a      	ldrb	r2, [r3, #0]
   1675e:	68fb      	ldr	r3, [r7, #12]
   16760:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   16762:	68fb      	ldr	r3, [r7, #12]
   16764:	791a      	ldrb	r2, [r3, #4]
   16766:	68fb      	ldr	r3, [r7, #12]
   16768:	70da      	strb	r2, [r3, #3]
}
   1676a:	bf00      	nop
   1676c:	3714      	adds	r7, #20
   1676e:	46bd      	mov	sp, r7
   16770:	f85d 7b04 	ldr.w	r7, [sp], #4
   16774:	4770      	bx	lr

00016776 <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16776:	b480      	push	{r7}
   16778:	b085      	sub	sp, #20
   1677a:	af00      	add	r7, sp, #0
   1677c:	60f8      	str	r0, [r7, #12]
   1677e:	60b9      	str	r1, [r7, #8]
   16780:	4613      	mov	r3, r2
   16782:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   16784:	68bb      	ldr	r3, [r7, #8]
   16786:	1c5a      	adds	r2, r3, #1
   16788:	60ba      	str	r2, [r7, #8]
   1678a:	781a      	ldrb	r2, [r3, #0]
   1678c:	68fb      	ldr	r3, [r7, #12]
   1678e:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   16790:	68fb      	ldr	r3, [r7, #12]
   16792:	791a      	ldrb	r2, [r3, #4]
   16794:	68fb      	ldr	r3, [r7, #12]
   16796:	70da      	strb	r2, [r3, #3]
}
   16798:	bf00      	nop
   1679a:	3714      	adds	r7, #20
   1679c:	46bd      	mov	sp, r7
   1679e:	f85d 7b04 	ldr.w	r7, [sp], #4
   167a2:	4770      	bx	lr

000167a4 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   167a4:	b580      	push	{r7, lr}
   167a6:	b084      	sub	sp, #16
   167a8:	af00      	add	r7, sp, #0
   167aa:	60f8      	str	r0, [r7, #12]
   167ac:	60b9      	str	r1, [r7, #8]
   167ae:	4613      	mov	r3, r2
   167b0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   167b2:	68bb      	ldr	r3, [r7, #8]
   167b4:	1c5a      	adds	r2, r3, #1
   167b6:	60ba      	str	r2, [r7, #8]
   167b8:	781a      	ldrb	r2, [r3, #0]
   167ba:	68fb      	ldr	r3, [r7, #12]
   167bc:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   167be:	68fb      	ldr	r3, [r7, #12]
   167c0:	3305      	adds	r3, #5
   167c2:	68b9      	ldr	r1, [r7, #8]
   167c4:	4618      	mov	r0, r3
   167c6:	f003 fa1d 	bl	19c04 <BdaCpy>
   167ca:	68bb      	ldr	r3, [r7, #8]
   167cc:	3306      	adds	r3, #6
   167ce:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   167d0:	68fb      	ldr	r3, [r7, #12]
   167d2:	791a      	ldrb	r2, [r3, #4]
   167d4:	68fb      	ldr	r3, [r7, #12]
   167d6:	70da      	strb	r2, [r3, #3]
}
   167d8:	bf00      	nop
   167da:	3710      	adds	r7, #16
   167dc:	46bd      	mov	sp, r7
   167de:	bd80      	pop	{r7, pc}

000167e0 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   167e0:	b580      	push	{r7, lr}
   167e2:	b084      	sub	sp, #16
   167e4:	af00      	add	r7, sp, #0
   167e6:	60f8      	str	r0, [r7, #12]
   167e8:	60b9      	str	r1, [r7, #8]
   167ea:	4613      	mov	r3, r2
   167ec:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   167ee:	68bb      	ldr	r3, [r7, #8]
   167f0:	1c5a      	adds	r2, r3, #1
   167f2:	60ba      	str	r2, [r7, #8]
   167f4:	781a      	ldrb	r2, [r3, #0]
   167f6:	68fb      	ldr	r3, [r7, #12]
   167f8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   167fa:	68fb      	ldr	r3, [r7, #12]
   167fc:	3305      	adds	r3, #5
   167fe:	68b9      	ldr	r1, [r7, #8]
   16800:	4618      	mov	r0, r3
   16802:	f003 f9ff 	bl	19c04 <BdaCpy>
   16806:	68bb      	ldr	r3, [r7, #8]
   16808:	3306      	adds	r3, #6
   1680a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   1680c:	68fb      	ldr	r3, [r7, #12]
   1680e:	791a      	ldrb	r2, [r3, #4]
   16810:	68fb      	ldr	r3, [r7, #12]
   16812:	70da      	strb	r2, [r3, #3]
}
   16814:	bf00      	nop
   16816:	3710      	adds	r7, #16
   16818:	46bd      	mov	sp, r7
   1681a:	bd80      	pop	{r7, pc}

0001681c <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1681c:	b480      	push	{r7}
   1681e:	b085      	sub	sp, #20
   16820:	af00      	add	r7, sp, #0
   16822:	60f8      	str	r0, [r7, #12]
   16824:	60b9      	str	r1, [r7, #8]
   16826:	4613      	mov	r3, r2
   16828:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   1682a:	68bb      	ldr	r3, [r7, #8]
   1682c:	1c5a      	adds	r2, r3, #1
   1682e:	60ba      	str	r2, [r7, #8]
   16830:	781a      	ldrb	r2, [r3, #0]
   16832:	68fb      	ldr	r3, [r7, #12]
   16834:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   16836:	68fb      	ldr	r3, [r7, #12]
   16838:	791a      	ldrb	r2, [r3, #4]
   1683a:	68fb      	ldr	r3, [r7, #12]
   1683c:	70da      	strb	r2, [r3, #3]
}
   1683e:	bf00      	nop
   16840:	3714      	adds	r7, #20
   16842:	46bd      	mov	sp, r7
   16844:	f85d 7b04 	ldr.w	r7, [sp], #4
   16848:	4770      	bx	lr

0001684a <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1684a:	b480      	push	{r7}
   1684c:	b085      	sub	sp, #20
   1684e:	af00      	add	r7, sp, #0
   16850:	60f8      	str	r0, [r7, #12]
   16852:	60b9      	str	r1, [r7, #8]
   16854:	4613      	mov	r3, r2
   16856:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   16858:	68bb      	ldr	r3, [r7, #8]
   1685a:	1c5a      	adds	r2, r3, #1
   1685c:	60ba      	str	r2, [r7, #8]
   1685e:	781a      	ldrb	r2, [r3, #0]
   16860:	68fb      	ldr	r3, [r7, #12]
   16862:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   16864:	68bb      	ldr	r3, [r7, #8]
   16866:	781b      	ldrb	r3, [r3, #0]
   16868:	b29a      	uxth	r2, r3
   1686a:	68bb      	ldr	r3, [r7, #8]
   1686c:	3301      	adds	r3, #1
   1686e:	781b      	ldrb	r3, [r3, #0]
   16870:	b29b      	uxth	r3, r3
   16872:	021b      	lsls	r3, r3, #8
   16874:	b29b      	uxth	r3, r3
   16876:	4413      	add	r3, r2
   16878:	b29a      	uxth	r2, r3
   1687a:	68fb      	ldr	r3, [r7, #12]
   1687c:	80da      	strh	r2, [r3, #6]
   1687e:	68bb      	ldr	r3, [r7, #8]
   16880:	3302      	adds	r3, #2
   16882:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   16884:	68fb      	ldr	r3, [r7, #12]
   16886:	791a      	ldrb	r2, [r3, #4]
   16888:	68fb      	ldr	r3, [r7, #12]
   1688a:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   1688c:	68fb      	ldr	r3, [r7, #12]
   1688e:	88da      	ldrh	r2, [r3, #6]
   16890:	68fb      	ldr	r3, [r7, #12]
   16892:	801a      	strh	r2, [r3, #0]
}
   16894:	bf00      	nop
   16896:	3714      	adds	r7, #20
   16898:	46bd      	mov	sp, r7
   1689a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1689e:	4770      	bx	lr

000168a0 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   168a0:	b480      	push	{r7}
   168a2:	b085      	sub	sp, #20
   168a4:	af00      	add	r7, sp, #0
   168a6:	60f8      	str	r0, [r7, #12]
   168a8:	60b9      	str	r1, [r7, #8]
   168aa:	4613      	mov	r3, r2
   168ac:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   168ae:	68bb      	ldr	r3, [r7, #8]
   168b0:	1c5a      	adds	r2, r3, #1
   168b2:	60ba      	str	r2, [r7, #8]
   168b4:	781a      	ldrb	r2, [r3, #0]
   168b6:	68fb      	ldr	r3, [r7, #12]
   168b8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   168ba:	68bb      	ldr	r3, [r7, #8]
   168bc:	781b      	ldrb	r3, [r3, #0]
   168be:	b29a      	uxth	r2, r3
   168c0:	68bb      	ldr	r3, [r7, #8]
   168c2:	3301      	adds	r3, #1
   168c4:	781b      	ldrb	r3, [r3, #0]
   168c6:	b29b      	uxth	r3, r3
   168c8:	021b      	lsls	r3, r3, #8
   168ca:	b29b      	uxth	r3, r3
   168cc:	4413      	add	r3, r2
   168ce:	b29a      	uxth	r2, r3
   168d0:	68fb      	ldr	r3, [r7, #12]
   168d2:	80da      	strh	r2, [r3, #6]
   168d4:	68bb      	ldr	r3, [r7, #8]
   168d6:	3302      	adds	r3, #2
   168d8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   168da:	68fb      	ldr	r3, [r7, #12]
   168dc:	791a      	ldrb	r2, [r3, #4]
   168de:	68fb      	ldr	r3, [r7, #12]
   168e0:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   168e2:	68fb      	ldr	r3, [r7, #12]
   168e4:	88da      	ldrh	r2, [r3, #6]
   168e6:	68fb      	ldr	r3, [r7, #12]
   168e8:	801a      	strh	r2, [r3, #0]
}
   168ea:	bf00      	nop
   168ec:	3714      	adds	r7, #20
   168ee:	46bd      	mov	sp, r7
   168f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   168f4:	4770      	bx	lr

000168f6 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   168f6:	b480      	push	{r7}
   168f8:	b085      	sub	sp, #20
   168fa:	af00      	add	r7, sp, #0
   168fc:	60f8      	str	r0, [r7, #12]
   168fe:	60b9      	str	r1, [r7, #8]
   16900:	4613      	mov	r3, r2
   16902:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   16904:	68bb      	ldr	r3, [r7, #8]
   16906:	1c5a      	adds	r2, r3, #1
   16908:	60ba      	str	r2, [r7, #8]
   1690a:	781a      	ldrb	r2, [r3, #0]
   1690c:	68fb      	ldr	r3, [r7, #12]
   1690e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   16910:	68bb      	ldr	r3, [r7, #8]
   16912:	781b      	ldrb	r3, [r3, #0]
   16914:	b29a      	uxth	r2, r3
   16916:	68bb      	ldr	r3, [r7, #8]
   16918:	3301      	adds	r3, #1
   1691a:	781b      	ldrb	r3, [r3, #0]
   1691c:	b29b      	uxth	r3, r3
   1691e:	021b      	lsls	r3, r3, #8
   16920:	b29b      	uxth	r3, r3
   16922:	4413      	add	r3, r2
   16924:	b29a      	uxth	r2, r3
   16926:	68fb      	ldr	r3, [r7, #12]
   16928:	80da      	strh	r2, [r3, #6]
   1692a:	68bb      	ldr	r3, [r7, #8]
   1692c:	3302      	adds	r3, #2
   1692e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   16930:	68bb      	ldr	r3, [r7, #8]
   16932:	781b      	ldrb	r3, [r3, #0]
   16934:	b29a      	uxth	r2, r3
   16936:	68bb      	ldr	r3, [r7, #8]
   16938:	3301      	adds	r3, #1
   1693a:	781b      	ldrb	r3, [r3, #0]
   1693c:	b29b      	uxth	r3, r3
   1693e:	021b      	lsls	r3, r3, #8
   16940:	b29b      	uxth	r3, r3
   16942:	4413      	add	r3, r2
   16944:	b29a      	uxth	r2, r3
   16946:	68fb      	ldr	r3, [r7, #12]
   16948:	811a      	strh	r2, [r3, #8]
   1694a:	68bb      	ldr	r3, [r7, #8]
   1694c:	3302      	adds	r3, #2
   1694e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   16950:	68fb      	ldr	r3, [r7, #12]
   16952:	791a      	ldrb	r2, [r3, #4]
   16954:	68fb      	ldr	r3, [r7, #12]
   16956:	70da      	strb	r2, [r3, #3]
}
   16958:	bf00      	nop
   1695a:	3714      	adds	r7, #20
   1695c:	46bd      	mov	sp, r7
   1695e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16962:	4770      	bx	lr

00016964 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16964:	b480      	push	{r7}
   16966:	b085      	sub	sp, #20
   16968:	af00      	add	r7, sp, #0
   1696a:	60f8      	str	r0, [r7, #12]
   1696c:	60b9      	str	r1, [r7, #8]
   1696e:	4613      	mov	r3, r2
   16970:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   16972:	68bb      	ldr	r3, [r7, #8]
   16974:	1c5a      	adds	r2, r3, #1
   16976:	60ba      	str	r2, [r7, #8]
   16978:	781a      	ldrb	r2, [r3, #0]
   1697a:	68fb      	ldr	r3, [r7, #12]
   1697c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   1697e:	68fb      	ldr	r3, [r7, #12]
   16980:	791a      	ldrb	r2, [r3, #4]
   16982:	68fb      	ldr	r3, [r7, #12]
   16984:	70da      	strb	r2, [r3, #3]
}
   16986:	bf00      	nop
   16988:	3714      	adds	r7, #20
   1698a:	46bd      	mov	sp, r7
   1698c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16990:	4770      	bx	lr

00016992 <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16992:	b480      	push	{r7}
   16994:	b085      	sub	sp, #20
   16996:	af00      	add	r7, sp, #0
   16998:	60f8      	str	r0, [r7, #12]
   1699a:	60b9      	str	r1, [r7, #8]
   1699c:	4613      	mov	r3, r2
   1699e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   169a0:	68bb      	ldr	r3, [r7, #8]
   169a2:	1c5a      	adds	r2, r3, #1
   169a4:	60ba      	str	r2, [r7, #8]
   169a6:	781a      	ldrb	r2, [r3, #0]
   169a8:	68fb      	ldr	r3, [r7, #12]
   169aa:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   169ac:	68bb      	ldr	r3, [r7, #8]
   169ae:	781b      	ldrb	r3, [r3, #0]
   169b0:	b29a      	uxth	r2, r3
   169b2:	68bb      	ldr	r3, [r7, #8]
   169b4:	3301      	adds	r3, #1
   169b6:	781b      	ldrb	r3, [r3, #0]
   169b8:	b29b      	uxth	r3, r3
   169ba:	021b      	lsls	r3, r3, #8
   169bc:	b29b      	uxth	r3, r3
   169be:	4413      	add	r3, r2
   169c0:	b29a      	uxth	r2, r3
   169c2:	68fb      	ldr	r3, [r7, #12]
   169c4:	80da      	strh	r2, [r3, #6]
   169c6:	68bb      	ldr	r3, [r7, #8]
   169c8:	3302      	adds	r3, #2
   169ca:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   169cc:	68fb      	ldr	r3, [r7, #12]
   169ce:	791a      	ldrb	r2, [r3, #4]
   169d0:	68fb      	ldr	r3, [r7, #12]
   169d2:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   169d4:	68fb      	ldr	r3, [r7, #12]
   169d6:	88da      	ldrh	r2, [r3, #6]
   169d8:	68fb      	ldr	r3, [r7, #12]
   169da:	801a      	strh	r2, [r3, #0]
}
   169dc:	bf00      	nop
   169de:	3714      	adds	r7, #20
   169e0:	46bd      	mov	sp, r7
   169e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   169e6:	4770      	bx	lr

000169e8 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   169e8:	b480      	push	{r7}
   169ea:	b085      	sub	sp, #20
   169ec:	af00      	add	r7, sp, #0
   169ee:	60f8      	str	r0, [r7, #12]
   169f0:	60b9      	str	r1, [r7, #8]
   169f2:	4613      	mov	r3, r2
   169f4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   169f6:	68bb      	ldr	r3, [r7, #8]
   169f8:	1c5a      	adds	r2, r3, #1
   169fa:	60ba      	str	r2, [r7, #8]
   169fc:	781a      	ldrb	r2, [r3, #0]
   169fe:	68fb      	ldr	r3, [r7, #12]
   16a00:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   16a02:	68bb      	ldr	r3, [r7, #8]
   16a04:	781b      	ldrb	r3, [r3, #0]
   16a06:	b29a      	uxth	r2, r3
   16a08:	68bb      	ldr	r3, [r7, #8]
   16a0a:	3301      	adds	r3, #1
   16a0c:	781b      	ldrb	r3, [r3, #0]
   16a0e:	b29b      	uxth	r3, r3
   16a10:	021b      	lsls	r3, r3, #8
   16a12:	b29b      	uxth	r3, r3
   16a14:	4413      	add	r3, r2
   16a16:	b29a      	uxth	r2, r3
   16a18:	68fb      	ldr	r3, [r7, #12]
   16a1a:	80da      	strh	r2, [r3, #6]
   16a1c:	68bb      	ldr	r3, [r7, #8]
   16a1e:	3302      	adds	r3, #2
   16a20:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   16a22:	68bb      	ldr	r3, [r7, #8]
   16a24:	781b      	ldrb	r3, [r3, #0]
   16a26:	b29a      	uxth	r2, r3
   16a28:	68bb      	ldr	r3, [r7, #8]
   16a2a:	3301      	adds	r3, #1
   16a2c:	781b      	ldrb	r3, [r3, #0]
   16a2e:	b29b      	uxth	r3, r3
   16a30:	021b      	lsls	r3, r3, #8
   16a32:	b29b      	uxth	r3, r3
   16a34:	4413      	add	r3, r2
   16a36:	b29a      	uxth	r2, r3
   16a38:	68fb      	ldr	r3, [r7, #12]
   16a3a:	811a      	strh	r2, [r3, #8]
   16a3c:	68bb      	ldr	r3, [r7, #8]
   16a3e:	3302      	adds	r3, #2
   16a40:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   16a42:	68bb      	ldr	r3, [r7, #8]
   16a44:	781b      	ldrb	r3, [r3, #0]
   16a46:	b29a      	uxth	r2, r3
   16a48:	68bb      	ldr	r3, [r7, #8]
   16a4a:	3301      	adds	r3, #1
   16a4c:	781b      	ldrb	r3, [r3, #0]
   16a4e:	b29b      	uxth	r3, r3
   16a50:	021b      	lsls	r3, r3, #8
   16a52:	b29b      	uxth	r3, r3
   16a54:	4413      	add	r3, r2
   16a56:	b29a      	uxth	r2, r3
   16a58:	68fb      	ldr	r3, [r7, #12]
   16a5a:	815a      	strh	r2, [r3, #10]
   16a5c:	68bb      	ldr	r3, [r7, #8]
   16a5e:	3302      	adds	r3, #2
   16a60:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   16a62:	68bb      	ldr	r3, [r7, #8]
   16a64:	781b      	ldrb	r3, [r3, #0]
   16a66:	b29a      	uxth	r2, r3
   16a68:	68bb      	ldr	r3, [r7, #8]
   16a6a:	3301      	adds	r3, #1
   16a6c:	781b      	ldrb	r3, [r3, #0]
   16a6e:	b29b      	uxth	r3, r3
   16a70:	021b      	lsls	r3, r3, #8
   16a72:	b29b      	uxth	r3, r3
   16a74:	4413      	add	r3, r2
   16a76:	b29a      	uxth	r2, r3
   16a78:	68fb      	ldr	r3, [r7, #12]
   16a7a:	819a      	strh	r2, [r3, #12]
   16a7c:	68bb      	ldr	r3, [r7, #8]
   16a7e:	3302      	adds	r3, #2
   16a80:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   16a82:	68fb      	ldr	r3, [r7, #12]
   16a84:	791a      	ldrb	r2, [r3, #4]
   16a86:	68fb      	ldr	r3, [r7, #12]
   16a88:	70da      	strb	r2, [r3, #3]
}
   16a8a:	bf00      	nop
   16a8c:	3714      	adds	r7, #20
   16a8e:	46bd      	mov	sp, r7
   16a90:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a94:	4770      	bx	lr

00016a96 <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16a96:	b480      	push	{r7}
   16a98:	b085      	sub	sp, #20
   16a9a:	af00      	add	r7, sp, #0
   16a9c:	60f8      	str	r0, [r7, #12]
   16a9e:	60b9      	str	r1, [r7, #8]
   16aa0:	4613      	mov	r3, r2
   16aa2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   16aa4:	68bb      	ldr	r3, [r7, #8]
   16aa6:	781b      	ldrb	r3, [r3, #0]
   16aa8:	b29a      	uxth	r2, r3
   16aaa:	68bb      	ldr	r3, [r7, #8]
   16aac:	3301      	adds	r3, #1
   16aae:	781b      	ldrb	r3, [r3, #0]
   16ab0:	b29b      	uxth	r3, r3
   16ab2:	021b      	lsls	r3, r3, #8
   16ab4:	b29b      	uxth	r3, r3
   16ab6:	4413      	add	r3, r2
   16ab8:	b29a      	uxth	r2, r3
   16aba:	68fb      	ldr	r3, [r7, #12]
   16abc:	809a      	strh	r2, [r3, #4]
   16abe:	68bb      	ldr	r3, [r7, #8]
   16ac0:	3302      	adds	r3, #2
   16ac2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   16ac4:	68bb      	ldr	r3, [r7, #8]
   16ac6:	781b      	ldrb	r3, [r3, #0]
   16ac8:	b29a      	uxth	r2, r3
   16aca:	68bb      	ldr	r3, [r7, #8]
   16acc:	3301      	adds	r3, #1
   16ace:	781b      	ldrb	r3, [r3, #0]
   16ad0:	b29b      	uxth	r3, r3
   16ad2:	021b      	lsls	r3, r3, #8
   16ad4:	b29b      	uxth	r3, r3
   16ad6:	4413      	add	r3, r2
   16ad8:	b29a      	uxth	r2, r3
   16ada:	68fb      	ldr	r3, [r7, #12]
   16adc:	80da      	strh	r2, [r3, #6]
   16ade:	68bb      	ldr	r3, [r7, #8]
   16ae0:	3302      	adds	r3, #2
   16ae2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   16ae4:	68bb      	ldr	r3, [r7, #8]
   16ae6:	781b      	ldrb	r3, [r3, #0]
   16ae8:	b29a      	uxth	r2, r3
   16aea:	68bb      	ldr	r3, [r7, #8]
   16aec:	3301      	adds	r3, #1
   16aee:	781b      	ldrb	r3, [r3, #0]
   16af0:	b29b      	uxth	r3, r3
   16af2:	021b      	lsls	r3, r3, #8
   16af4:	b29b      	uxth	r3, r3
   16af6:	4413      	add	r3, r2
   16af8:	b29a      	uxth	r2, r3
   16afa:	68fb      	ldr	r3, [r7, #12]
   16afc:	811a      	strh	r2, [r3, #8]
   16afe:	68bb      	ldr	r3, [r7, #8]
   16b00:	3302      	adds	r3, #2
   16b02:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   16b04:	68bb      	ldr	r3, [r7, #8]
   16b06:	781b      	ldrb	r3, [r3, #0]
   16b08:	b29a      	uxth	r2, r3
   16b0a:	68bb      	ldr	r3, [r7, #8]
   16b0c:	3301      	adds	r3, #1
   16b0e:	781b      	ldrb	r3, [r3, #0]
   16b10:	b29b      	uxth	r3, r3
   16b12:	021b      	lsls	r3, r3, #8
   16b14:	b29b      	uxth	r3, r3
   16b16:	4413      	add	r3, r2
   16b18:	b29a      	uxth	r2, r3
   16b1a:	68fb      	ldr	r3, [r7, #12]
   16b1c:	815a      	strh	r2, [r3, #10]
   16b1e:	68bb      	ldr	r3, [r7, #8]
   16b20:	3302      	adds	r3, #2
   16b22:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   16b24:	68bb      	ldr	r3, [r7, #8]
   16b26:	781b      	ldrb	r3, [r3, #0]
   16b28:	b29a      	uxth	r2, r3
   16b2a:	68bb      	ldr	r3, [r7, #8]
   16b2c:	3301      	adds	r3, #1
   16b2e:	781b      	ldrb	r3, [r3, #0]
   16b30:	b29b      	uxth	r3, r3
   16b32:	021b      	lsls	r3, r3, #8
   16b34:	b29b      	uxth	r3, r3
   16b36:	4413      	add	r3, r2
   16b38:	b29a      	uxth	r2, r3
   16b3a:	68fb      	ldr	r3, [r7, #12]
   16b3c:	819a      	strh	r2, [r3, #12]
   16b3e:	68bb      	ldr	r3, [r7, #8]
   16b40:	3302      	adds	r3, #2
   16b42:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   16b44:	68fb      	ldr	r3, [r7, #12]
   16b46:	889a      	ldrh	r2, [r3, #4]
   16b48:	68fb      	ldr	r3, [r7, #12]
   16b4a:	801a      	strh	r2, [r3, #0]
}
   16b4c:	bf00      	nop
   16b4e:	3714      	adds	r7, #20
   16b50:	46bd      	mov	sp, r7
   16b52:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b56:	4770      	bx	lr

00016b58 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16b58:	b480      	push	{r7}
   16b5a:	b085      	sub	sp, #20
   16b5c:	af00      	add	r7, sp, #0
   16b5e:	60f8      	str	r0, [r7, #12]
   16b60:	60b9      	str	r1, [r7, #8]
   16b62:	4613      	mov	r3, r2
   16b64:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   16b66:	68bb      	ldr	r3, [r7, #8]
   16b68:	781b      	ldrb	r3, [r3, #0]
   16b6a:	b29a      	uxth	r2, r3
   16b6c:	68bb      	ldr	r3, [r7, #8]
   16b6e:	3301      	adds	r3, #1
   16b70:	781b      	ldrb	r3, [r3, #0]
   16b72:	b29b      	uxth	r3, r3
   16b74:	021b      	lsls	r3, r3, #8
   16b76:	b29b      	uxth	r3, r3
   16b78:	4413      	add	r3, r2
   16b7a:	b29a      	uxth	r2, r3
   16b7c:	68fb      	ldr	r3, [r7, #12]
   16b7e:	809a      	strh	r2, [r3, #4]
   16b80:	68bb      	ldr	r3, [r7, #8]
   16b82:	3302      	adds	r3, #2
   16b84:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   16b86:	68bb      	ldr	r3, [r7, #8]
   16b88:	781b      	ldrb	r3, [r3, #0]
   16b8a:	b29a      	uxth	r2, r3
   16b8c:	68bb      	ldr	r3, [r7, #8]
   16b8e:	3301      	adds	r3, #1
   16b90:	781b      	ldrb	r3, [r3, #0]
   16b92:	b29b      	uxth	r3, r3
   16b94:	021b      	lsls	r3, r3, #8
   16b96:	b29b      	uxth	r3, r3
   16b98:	4413      	add	r3, r2
   16b9a:	b29a      	uxth	r2, r3
   16b9c:	68fb      	ldr	r3, [r7, #12]
   16b9e:	80da      	strh	r2, [r3, #6]
   16ba0:	68bb      	ldr	r3, [r7, #8]
   16ba2:	3302      	adds	r3, #2
   16ba4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   16ba6:	68bb      	ldr	r3, [r7, #8]
   16ba8:	781b      	ldrb	r3, [r3, #0]
   16baa:	b29a      	uxth	r2, r3
   16bac:	68bb      	ldr	r3, [r7, #8]
   16bae:	3301      	adds	r3, #1
   16bb0:	781b      	ldrb	r3, [r3, #0]
   16bb2:	b29b      	uxth	r3, r3
   16bb4:	021b      	lsls	r3, r3, #8
   16bb6:	b29b      	uxth	r3, r3
   16bb8:	4413      	add	r3, r2
   16bba:	b29a      	uxth	r2, r3
   16bbc:	68fb      	ldr	r3, [r7, #12]
   16bbe:	811a      	strh	r2, [r3, #8]
   16bc0:	68bb      	ldr	r3, [r7, #8]
   16bc2:	3302      	adds	r3, #2
   16bc4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   16bc6:	68bb      	ldr	r3, [r7, #8]
   16bc8:	781b      	ldrb	r3, [r3, #0]
   16bca:	b29a      	uxth	r2, r3
   16bcc:	68bb      	ldr	r3, [r7, #8]
   16bce:	3301      	adds	r3, #1
   16bd0:	781b      	ldrb	r3, [r3, #0]
   16bd2:	b29b      	uxth	r3, r3
   16bd4:	021b      	lsls	r3, r3, #8
   16bd6:	b29b      	uxth	r3, r3
   16bd8:	4413      	add	r3, r2
   16bda:	b29a      	uxth	r2, r3
   16bdc:	68fb      	ldr	r3, [r7, #12]
   16bde:	815a      	strh	r2, [r3, #10]
   16be0:	68bb      	ldr	r3, [r7, #8]
   16be2:	3302      	adds	r3, #2
   16be4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   16be6:	68bb      	ldr	r3, [r7, #8]
   16be8:	781b      	ldrb	r3, [r3, #0]
   16bea:	b29a      	uxth	r2, r3
   16bec:	68bb      	ldr	r3, [r7, #8]
   16bee:	3301      	adds	r3, #1
   16bf0:	781b      	ldrb	r3, [r3, #0]
   16bf2:	b29b      	uxth	r3, r3
   16bf4:	021b      	lsls	r3, r3, #8
   16bf6:	b29b      	uxth	r3, r3
   16bf8:	4413      	add	r3, r2
   16bfa:	b29a      	uxth	r2, r3
   16bfc:	68fb      	ldr	r3, [r7, #12]
   16bfe:	819a      	strh	r2, [r3, #12]
   16c00:	68bb      	ldr	r3, [r7, #8]
   16c02:	3302      	adds	r3, #2
   16c04:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   16c06:	68fb      	ldr	r3, [r7, #12]
   16c08:	889a      	ldrh	r2, [r3, #4]
   16c0a:	68fb      	ldr	r3, [r7, #12]
   16c0c:	801a      	strh	r2, [r3, #0]
}
   16c0e:	bf00      	nop
   16c10:	3714      	adds	r7, #20
   16c12:	46bd      	mov	sp, r7
   16c14:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c18:	4770      	bx	lr

00016c1a <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16c1a:	b580      	push	{r7, lr}
   16c1c:	b084      	sub	sp, #16
   16c1e:	af00      	add	r7, sp, #0
   16c20:	60f8      	str	r0, [r7, #12]
   16c22:	60b9      	str	r1, [r7, #8]
   16c24:	4613      	mov	r3, r2
   16c26:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   16c28:	68bb      	ldr	r3, [r7, #8]
   16c2a:	1c5a      	adds	r2, r3, #1
   16c2c:	60ba      	str	r2, [r7, #8]
   16c2e:	781a      	ldrb	r2, [r3, #0]
   16c30:	68fb      	ldr	r3, [r7, #12]
   16c32:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   16c34:	68fb      	ldr	r3, [r7, #12]
   16c36:	3305      	adds	r3, #5
   16c38:	2240      	movs	r2, #64	; 0x40
   16c3a:	68b9      	ldr	r1, [r7, #8]
   16c3c:	4618      	mov	r0, r3
   16c3e:	f7f5 fa8f 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   16c42:	68fb      	ldr	r3, [r7, #12]
   16c44:	791a      	ldrb	r2, [r3, #4]
   16c46:	68fb      	ldr	r3, [r7, #12]
   16c48:	70da      	strb	r2, [r3, #3]
}
   16c4a:	bf00      	nop
   16c4c:	3710      	adds	r7, #16
   16c4e:	46bd      	mov	sp, r7
   16c50:	bd80      	pop	{r7, pc}

00016c52 <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16c52:	b580      	push	{r7, lr}
   16c54:	b084      	sub	sp, #16
   16c56:	af00      	add	r7, sp, #0
   16c58:	60f8      	str	r0, [r7, #12]
   16c5a:	60b9      	str	r1, [r7, #8]
   16c5c:	4613      	mov	r3, r2
   16c5e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   16c60:	68bb      	ldr	r3, [r7, #8]
   16c62:	1c5a      	adds	r2, r3, #1
   16c64:	60ba      	str	r2, [r7, #8]
   16c66:	781a      	ldrb	r2, [r3, #0]
   16c68:	68fb      	ldr	r3, [r7, #12]
   16c6a:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   16c6c:	68fb      	ldr	r3, [r7, #12]
   16c6e:	3305      	adds	r3, #5
   16c70:	2220      	movs	r2, #32
   16c72:	68b9      	ldr	r1, [r7, #8]
   16c74:	4618      	mov	r0, r3
   16c76:	f7f5 fa73 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   16c7a:	68fb      	ldr	r3, [r7, #12]
   16c7c:	791a      	ldrb	r2, [r3, #4]
   16c7e:	68fb      	ldr	r3, [r7, #12]
   16c80:	70da      	strb	r2, [r3, #3]
}
   16c82:	bf00      	nop
   16c84:	3710      	adds	r7, #16
   16c86:	46bd      	mov	sp, r7
   16c88:	bd80      	pop	{r7, pc}

00016c8a <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16c8a:	b480      	push	{r7}
   16c8c:	b085      	sub	sp, #20
   16c8e:	af00      	add	r7, sp, #0
   16c90:	60f8      	str	r0, [r7, #12]
   16c92:	60b9      	str	r1, [r7, #8]
   16c94:	4613      	mov	r3, r2
   16c96:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   16c98:	68bb      	ldr	r3, [r7, #8]
   16c9a:	1c5a      	adds	r2, r3, #1
   16c9c:	60ba      	str	r2, [r7, #8]
   16c9e:	781a      	ldrb	r2, [r3, #0]
   16ca0:	68fb      	ldr	r3, [r7, #12]
   16ca2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   16ca4:	68bb      	ldr	r3, [r7, #8]
   16ca6:	781b      	ldrb	r3, [r3, #0]
   16ca8:	b29a      	uxth	r2, r3
   16caa:	68bb      	ldr	r3, [r7, #8]
   16cac:	3301      	adds	r3, #1
   16cae:	781b      	ldrb	r3, [r3, #0]
   16cb0:	b29b      	uxth	r3, r3
   16cb2:	021b      	lsls	r3, r3, #8
   16cb4:	b29b      	uxth	r3, r3
   16cb6:	4413      	add	r3, r2
   16cb8:	b29a      	uxth	r2, r3
   16cba:	68fb      	ldr	r3, [r7, #12]
   16cbc:	80da      	strh	r2, [r3, #6]
   16cbe:	68bb      	ldr	r3, [r7, #8]
   16cc0:	3302      	adds	r3, #2
   16cc2:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   16cc4:	68fb      	ldr	r3, [r7, #12]
   16cc6:	791a      	ldrb	r2, [r3, #4]
   16cc8:	68fb      	ldr	r3, [r7, #12]
   16cca:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   16ccc:	68fb      	ldr	r3, [r7, #12]
   16cce:	88da      	ldrh	r2, [r3, #6]
   16cd0:	68fb      	ldr	r3, [r7, #12]
   16cd2:	801a      	strh	r2, [r3, #0]
}
   16cd4:	bf00      	nop
   16cd6:	3714      	adds	r7, #20
   16cd8:	46bd      	mov	sp, r7
   16cda:	f85d 7b04 	ldr.w	r7, [sp], #4
   16cde:	4770      	bx	lr

00016ce0 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16ce0:	b480      	push	{r7}
   16ce2:	b085      	sub	sp, #20
   16ce4:	af00      	add	r7, sp, #0
   16ce6:	60f8      	str	r0, [r7, #12]
   16ce8:	60b9      	str	r1, [r7, #8]
   16cea:	4613      	mov	r3, r2
   16cec:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   16cee:	68bb      	ldr	r3, [r7, #8]
   16cf0:	781b      	ldrb	r3, [r3, #0]
   16cf2:	b29a      	uxth	r2, r3
   16cf4:	68bb      	ldr	r3, [r7, #8]
   16cf6:	3301      	adds	r3, #1
   16cf8:	781b      	ldrb	r3, [r3, #0]
   16cfa:	b29b      	uxth	r3, r3
   16cfc:	021b      	lsls	r3, r3, #8
   16cfe:	b29b      	uxth	r3, r3
   16d00:	4413      	add	r3, r2
   16d02:	b29a      	uxth	r2, r3
   16d04:	68fb      	ldr	r3, [r7, #12]
   16d06:	809a      	strh	r2, [r3, #4]
   16d08:	68bb      	ldr	r3, [r7, #8]
   16d0a:	3302      	adds	r3, #2
   16d0c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   16d0e:	68fb      	ldr	r3, [r7, #12]
   16d10:	889a      	ldrh	r2, [r3, #4]
   16d12:	68fb      	ldr	r3, [r7, #12]
   16d14:	801a      	strh	r2, [r3, #0]
}
   16d16:	bf00      	nop
   16d18:	3714      	adds	r7, #20
   16d1a:	46bd      	mov	sp, r7
   16d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d20:	4770      	bx	lr

00016d22 <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16d22:	b480      	push	{r7}
   16d24:	b085      	sub	sp, #20
   16d26:	af00      	add	r7, sp, #0
   16d28:	60f8      	str	r0, [r7, #12]
   16d2a:	60b9      	str	r1, [r7, #8]
   16d2c:	4613      	mov	r3, r2
   16d2e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   16d30:	68bb      	ldr	r3, [r7, #8]
   16d32:	1c5a      	adds	r2, r3, #1
   16d34:	60ba      	str	r2, [r7, #8]
   16d36:	781a      	ldrb	r2, [r3, #0]
   16d38:	68fb      	ldr	r3, [r7, #12]
   16d3a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   16d3c:	68bb      	ldr	r3, [r7, #8]
   16d3e:	781b      	ldrb	r3, [r3, #0]
   16d40:	b29a      	uxth	r2, r3
   16d42:	68bb      	ldr	r3, [r7, #8]
   16d44:	3301      	adds	r3, #1
   16d46:	781b      	ldrb	r3, [r3, #0]
   16d48:	b29b      	uxth	r3, r3
   16d4a:	021b      	lsls	r3, r3, #8
   16d4c:	b29b      	uxth	r3, r3
   16d4e:	4413      	add	r3, r2
   16d50:	b29a      	uxth	r2, r3
   16d52:	68fb      	ldr	r3, [r7, #12]
   16d54:	80da      	strh	r2, [r3, #6]
   16d56:	68bb      	ldr	r3, [r7, #8]
   16d58:	3302      	adds	r3, #2
   16d5a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   16d5c:	68bb      	ldr	r3, [r7, #8]
   16d5e:	1c5a      	adds	r2, r3, #1
   16d60:	60ba      	str	r2, [r7, #8]
   16d62:	781a      	ldrb	r2, [r3, #0]
   16d64:	68fb      	ldr	r3, [r7, #12]
   16d66:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   16d68:	68bb      	ldr	r3, [r7, #8]
   16d6a:	1c5a      	adds	r2, r3, #1
   16d6c:	60ba      	str	r2, [r7, #8]
   16d6e:	781a      	ldrb	r2, [r3, #0]
   16d70:	68fb      	ldr	r3, [r7, #12]
   16d72:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   16d74:	68fb      	ldr	r3, [r7, #12]
   16d76:	791a      	ldrb	r2, [r3, #4]
   16d78:	68fb      	ldr	r3, [r7, #12]
   16d7a:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   16d7c:	68fb      	ldr	r3, [r7, #12]
   16d7e:	88da      	ldrh	r2, [r3, #6]
   16d80:	68fb      	ldr	r3, [r7, #12]
   16d82:	801a      	strh	r2, [r3, #0]
}
   16d84:	bf00      	nop
   16d86:	3714      	adds	r7, #20
   16d88:	46bd      	mov	sp, r7
   16d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d8e:	4770      	bx	lr

00016d90 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16d90:	b480      	push	{r7}
   16d92:	b085      	sub	sp, #20
   16d94:	af00      	add	r7, sp, #0
   16d96:	60f8      	str	r0, [r7, #12]
   16d98:	60b9      	str	r1, [r7, #8]
   16d9a:	4613      	mov	r3, r2
   16d9c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   16d9e:	68bb      	ldr	r3, [r7, #8]
   16da0:	1c5a      	adds	r2, r3, #1
   16da2:	60ba      	str	r2, [r7, #8]
   16da4:	781a      	ldrb	r2, [r3, #0]
   16da6:	68fb      	ldr	r3, [r7, #12]
   16da8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   16daa:	68fb      	ldr	r3, [r7, #12]
   16dac:	791a      	ldrb	r2, [r3, #4]
   16dae:	68fb      	ldr	r3, [r7, #12]
   16db0:	70da      	strb	r2, [r3, #3]
}
   16db2:	bf00      	nop
   16db4:	3714      	adds	r7, #20
   16db6:	46bd      	mov	sp, r7
   16db8:	f85d 7b04 	ldr.w	r7, [sp], #4
   16dbc:	4770      	bx	lr

00016dbe <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16dbe:	b480      	push	{r7}
   16dc0:	b085      	sub	sp, #20
   16dc2:	af00      	add	r7, sp, #0
   16dc4:	60f8      	str	r0, [r7, #12]
   16dc6:	60b9      	str	r1, [r7, #8]
   16dc8:	4613      	mov	r3, r2
   16dca:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   16dcc:	68bb      	ldr	r3, [r7, #8]
   16dce:	1c5a      	adds	r2, r3, #1
   16dd0:	60ba      	str	r2, [r7, #8]
   16dd2:	781a      	ldrb	r2, [r3, #0]
   16dd4:	68fb      	ldr	r3, [r7, #12]
   16dd6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   16dd8:	68bb      	ldr	r3, [r7, #8]
   16dda:	781b      	ldrb	r3, [r3, #0]
   16ddc:	b29a      	uxth	r2, r3
   16dde:	68bb      	ldr	r3, [r7, #8]
   16de0:	3301      	adds	r3, #1
   16de2:	781b      	ldrb	r3, [r3, #0]
   16de4:	b29b      	uxth	r3, r3
   16de6:	021b      	lsls	r3, r3, #8
   16de8:	b29b      	uxth	r3, r3
   16dea:	4413      	add	r3, r2
   16dec:	b29a      	uxth	r2, r3
   16dee:	68fb      	ldr	r3, [r7, #12]
   16df0:	80da      	strh	r2, [r3, #6]
   16df2:	68bb      	ldr	r3, [r7, #8]
   16df4:	3302      	adds	r3, #2
   16df6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   16df8:	68bb      	ldr	r3, [r7, #8]
   16dfa:	1c5a      	adds	r2, r3, #1
   16dfc:	60ba      	str	r2, [r7, #8]
   16dfe:	781a      	ldrb	r2, [r3, #0]
   16e00:	68fb      	ldr	r3, [r7, #12]
   16e02:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   16e04:	68bb      	ldr	r3, [r7, #8]
   16e06:	1c5a      	adds	r2, r3, #1
   16e08:	60ba      	str	r2, [r7, #8]
   16e0a:	781a      	ldrb	r2, [r3, #0]
   16e0c:	68fb      	ldr	r3, [r7, #12]
   16e0e:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   16e10:	68fb      	ldr	r3, [r7, #12]
   16e12:	791a      	ldrb	r2, [r3, #4]
   16e14:	68fb      	ldr	r3, [r7, #12]
   16e16:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   16e18:	68fb      	ldr	r3, [r7, #12]
   16e1a:	88da      	ldrh	r2, [r3, #6]
   16e1c:	68fb      	ldr	r3, [r7, #12]
   16e1e:	801a      	strh	r2, [r3, #0]
}
   16e20:	bf00      	nop
   16e22:	3714      	adds	r7, #20
   16e24:	46bd      	mov	sp, r7
   16e26:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e2a:	4770      	bx	lr

00016e2c <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   16e2c:	b580      	push	{r7, lr}
   16e2e:	b084      	sub	sp, #16
   16e30:	af00      	add	r7, sp, #0
   16e32:	6078      	str	r0, [r7, #4]
   16e34:	460b      	mov	r3, r1
   16e36:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   16e38:	687b      	ldr	r3, [r7, #4]
   16e3a:	1c5a      	adds	r2, r3, #1
   16e3c:	607a      	str	r2, [r7, #4]
   16e3e:	781b      	ldrb	r3, [r3, #0]
   16e40:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   16e42:	7bfb      	ldrb	r3, [r7, #15]
   16e44:	2b0f      	cmp	r3, #15
   16e46:	d862      	bhi.n	16f0e <hciEvtProcessLeAdvReport+0xe2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   16e48:	203b      	movs	r0, #59	; 0x3b
   16e4a:	f003 fce1 	bl	1a810 <WsfBufAlloc>
   16e4e:	60b8      	str	r0, [r7, #8]
   16e50:	68bb      	ldr	r3, [r7, #8]
   16e52:	2b00      	cmp	r3, #0
   16e54:	d05c      	beq.n	16f10 <hciEvtProcessLeAdvReport+0xe4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   16e56:	e04f      	b.n	16ef8 <hciEvtProcessLeAdvReport+0xcc>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   16e58:	687b      	ldr	r3, [r7, #4]
   16e5a:	1c5a      	adds	r2, r3, #1
   16e5c:	607a      	str	r2, [r7, #4]
   16e5e:	781a      	ldrb	r2, [r3, #0]
   16e60:	68bb      	ldr	r3, [r7, #8]
   16e62:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16e64:	687b      	ldr	r3, [r7, #4]
   16e66:	1c5a      	adds	r2, r3, #1
   16e68:	607a      	str	r2, [r7, #4]
   16e6a:	781a      	ldrb	r2, [r3, #0]
   16e6c:	68bb      	ldr	r3, [r7, #8]
   16e6e:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   16e70:	68bb      	ldr	r3, [r7, #8]
   16e72:	330c      	adds	r3, #12
   16e74:	6879      	ldr	r1, [r7, #4]
   16e76:	4618      	mov	r0, r3
   16e78:	f002 fec4 	bl	19c04 <BdaCpy>
   16e7c:	687b      	ldr	r3, [r7, #4]
   16e7e:	3306      	adds	r3, #6
   16e80:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   16e82:	687b      	ldr	r3, [r7, #4]
   16e84:	1c5a      	adds	r2, r3, #1
   16e86:	607a      	str	r2, [r7, #4]
   16e88:	781a      	ldrb	r2, [r3, #0]
   16e8a:	68bb      	ldr	r3, [r7, #8]
   16e8c:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   16e8e:	68bb      	ldr	r3, [r7, #8]
   16e90:	7a1b      	ldrb	r3, [r3, #8]
   16e92:	2b1f      	cmp	r3, #31
   16e94:	d836      	bhi.n	16f04 <hciEvtProcessLeAdvReport+0xd8>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   16e96:	68bb      	ldr	r3, [r7, #8]
   16e98:	f103 021c 	add.w	r2, r3, #28
   16e9c:	68bb      	ldr	r3, [r7, #8]
   16e9e:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   16ea0:	68bb      	ldr	r3, [r7, #8]
   16ea2:	6858      	ldr	r0, [r3, #4]
   16ea4:	68bb      	ldr	r3, [r7, #8]
   16ea6:	7a1b      	ldrb	r3, [r3, #8]
   16ea8:	461a      	mov	r2, r3
   16eaa:	6879      	ldr	r1, [r7, #4]
   16eac:	f7f5 f958 	bl	c160 <memcpy>
      p += pMsg->len;
   16eb0:	68bb      	ldr	r3, [r7, #8]
   16eb2:	7a1b      	ldrb	r3, [r3, #8]
   16eb4:	461a      	mov	r2, r3
   16eb6:	687b      	ldr	r3, [r7, #4]
   16eb8:	4413      	add	r3, r2
   16eba:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   16ebc:	687b      	ldr	r3, [r7, #4]
   16ebe:	1c5a      	adds	r2, r3, #1
   16ec0:	607a      	str	r2, [r7, #4]
   16ec2:	781b      	ldrb	r3, [r3, #0]
   16ec4:	b25a      	sxtb	r2, r3
   16ec6:	68bb      	ldr	r3, [r7, #8]
   16ec8:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   16eca:	68bb      	ldr	r3, [r7, #8]
   16ecc:	2200      	movs	r2, #0
   16ece:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   16ed0:	68bb      	ldr	r3, [r7, #8]
   16ed2:	3313      	adds	r3, #19
   16ed4:	2206      	movs	r2, #6
   16ed6:	2100      	movs	r1, #0
   16ed8:	4618      	mov	r0, r3
   16eda:	f7f5 fa3f 	bl	c35c <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   16ede:	68bb      	ldr	r3, [r7, #8]
   16ee0:	2200      	movs	r2, #0
   16ee2:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   16ee4:	68bb      	ldr	r3, [r7, #8]
   16ee6:	2206      	movs	r2, #6
   16ee8:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16eea:	68bb      	ldr	r3, [r7, #8]
   16eec:	2200      	movs	r2, #0
   16eee:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   16ef0:	4b09      	ldr	r3, [pc, #36]	; (16f18 <hciEvtProcessLeAdvReport+0xec>)
   16ef2:	689b      	ldr	r3, [r3, #8]
   16ef4:	68b8      	ldr	r0, [r7, #8]
   16ef6:	4798      	blx	r3
    while (i-- > 0)
   16ef8:	7bfb      	ldrb	r3, [r7, #15]
   16efa:	1e5a      	subs	r2, r3, #1
   16efc:	73fa      	strb	r2, [r7, #15]
   16efe:	2b00      	cmp	r3, #0
   16f00:	d1aa      	bne.n	16e58 <hciEvtProcessLeAdvReport+0x2c>
   16f02:	e000      	b.n	16f06 <hciEvtProcessLeAdvReport+0xda>
        break;
   16f04:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   16f06:	68b8      	ldr	r0, [r7, #8]
   16f08:	f003 fcc2 	bl	1a890 <WsfBufFree>
   16f0c:	e000      	b.n	16f10 <hciEvtProcessLeAdvReport+0xe4>
    return;
   16f0e:	bf00      	nop
  }
}
   16f10:	3710      	adds	r7, #16
   16f12:	46bd      	mov	sp, r7
   16f14:	bd80      	pop	{r7, pc}
   16f16:	bf00      	nop
   16f18:	10009e2c 	.word	0x10009e2c

00016f1c <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   16f1c:	b580      	push	{r7, lr}
   16f1e:	b086      	sub	sp, #24
   16f20:	af00      	add	r7, sp, #0
   16f22:	6078      	str	r0, [r7, #4]
   16f24:	460b      	mov	r3, r1
   16f26:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   16f28:	687b      	ldr	r3, [r7, #4]
   16f2a:	781b      	ldrb	r3, [r3, #0]
   16f2c:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   16f2e:	7dfb      	ldrb	r3, [r7, #23]
   16f30:	2b0f      	cmp	r3, #15
   16f32:	f200 80c4 	bhi.w	170be <hciEvtProcessLeExtAdvReport+0x1a2>
  {
    return;
  }

  ptr = p + 1;
   16f36:	687b      	ldr	r3, [r7, #4]
   16f38:	3301      	adds	r3, #1
   16f3a:	613b      	str	r3, [r7, #16]
  maxLen = 0;
   16f3c:	2300      	movs	r3, #0
   16f3e:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   16f40:	e011      	b.n	16f66 <hciEvtProcessLeExtAdvReport+0x4a>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   16f42:	693b      	ldr	r3, [r7, #16]
   16f44:	3317      	adds	r3, #23
   16f46:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   16f48:	693b      	ldr	r3, [r7, #16]
   16f4a:	1c5a      	adds	r2, r3, #1
   16f4c:	613a      	str	r2, [r7, #16]
   16f4e:	781b      	ldrb	r3, [r3, #0]
   16f50:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
   16f52:	7bbb      	ldrb	r3, [r7, #14]
   16f54:	693a      	ldr	r2, [r7, #16]
   16f56:	4413      	add	r3, r2
   16f58:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   16f5a:	7bba      	ldrb	r2, [r7, #14]
   16f5c:	7bfb      	ldrb	r3, [r7, #15]
   16f5e:	429a      	cmp	r2, r3
   16f60:	d901      	bls.n	16f66 <hciEvtProcessLeExtAdvReport+0x4a>
    {
      /* update max len */
      maxLen = dataLen;
   16f62:	7bbb      	ldrb	r3, [r7, #14]
   16f64:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
   16f66:	7dfb      	ldrb	r3, [r7, #23]
   16f68:	1e5a      	subs	r2, r3, #1
   16f6a:	75fa      	strb	r2, [r7, #23]
   16f6c:	2b00      	cmp	r3, #0
   16f6e:	d1e8      	bne.n	16f42 <hciEvtProcessLeExtAdvReport+0x26>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   16f70:	7bfb      	ldrb	r3, [r7, #15]
   16f72:	b29b      	uxth	r3, r3
   16f74:	3320      	adds	r3, #32
   16f76:	b29b      	uxth	r3, r3
   16f78:	4618      	mov	r0, r3
   16f7a:	f003 fc49 	bl	1a810 <WsfBufAlloc>
   16f7e:	60b8      	str	r0, [r7, #8]
   16f80:	68bb      	ldr	r3, [r7, #8]
   16f82:	2b00      	cmp	r3, #0
   16f84:	f000 809c 	beq.w	170c0 <hciEvtProcessLeExtAdvReport+0x1a4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   16f88:	687b      	ldr	r3, [r7, #4]
   16f8a:	1c5a      	adds	r2, r3, #1
   16f8c:	607a      	str	r2, [r7, #4]
   16f8e:	781b      	ldrb	r3, [r3, #0]
   16f90:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   16f92:	e088      	b.n	170a6 <hciEvtProcessLeExtAdvReport+0x18a>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   16f94:	687b      	ldr	r3, [r7, #4]
   16f96:	781b      	ldrb	r3, [r3, #0]
   16f98:	b29a      	uxth	r2, r3
   16f9a:	687b      	ldr	r3, [r7, #4]
   16f9c:	3301      	adds	r3, #1
   16f9e:	781b      	ldrb	r3, [r3, #0]
   16fa0:	b29b      	uxth	r3, r3
   16fa2:	021b      	lsls	r3, r3, #8
   16fa4:	b29b      	uxth	r3, r3
   16fa6:	4413      	add	r3, r2
   16fa8:	b29a      	uxth	r2, r3
   16faa:	68bb      	ldr	r3, [r7, #8]
   16fac:	809a      	strh	r2, [r3, #4]
   16fae:	687b      	ldr	r3, [r7, #4]
   16fb0:	3302      	adds	r3, #2
   16fb2:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16fb4:	687b      	ldr	r3, [r7, #4]
   16fb6:	1c5a      	adds	r2, r3, #1
   16fb8:	607a      	str	r2, [r7, #4]
   16fba:	781a      	ldrb	r2, [r3, #0]
   16fbc:	68bb      	ldr	r3, [r7, #8]
   16fbe:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   16fc0:	68bb      	ldr	r3, [r7, #8]
   16fc2:	3307      	adds	r3, #7
   16fc4:	6879      	ldr	r1, [r7, #4]
   16fc6:	4618      	mov	r0, r3
   16fc8:	f002 fe1c 	bl	19c04 <BdaCpy>
   16fcc:	687b      	ldr	r3, [r7, #4]
   16fce:	3306      	adds	r3, #6
   16fd0:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   16fd2:	687b      	ldr	r3, [r7, #4]
   16fd4:	1c5a      	adds	r2, r3, #1
   16fd6:	607a      	str	r2, [r7, #4]
   16fd8:	781a      	ldrb	r2, [r3, #0]
   16fda:	68bb      	ldr	r3, [r7, #8]
   16fdc:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   16fde:	687b      	ldr	r3, [r7, #4]
   16fe0:	1c5a      	adds	r2, r3, #1
   16fe2:	607a      	str	r2, [r7, #4]
   16fe4:	781a      	ldrb	r2, [r3, #0]
   16fe6:	68bb      	ldr	r3, [r7, #8]
   16fe8:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   16fea:	687b      	ldr	r3, [r7, #4]
   16fec:	1c5a      	adds	r2, r3, #1
   16fee:	607a      	str	r2, [r7, #4]
   16ff0:	781a      	ldrb	r2, [r3, #0]
   16ff2:	68bb      	ldr	r3, [r7, #8]
   16ff4:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   16ff6:	687b      	ldr	r3, [r7, #4]
   16ff8:	1c5a      	adds	r2, r3, #1
   16ffa:	607a      	str	r2, [r7, #4]
   16ffc:	781b      	ldrb	r3, [r3, #0]
   16ffe:	b25a      	sxtb	r2, r3
   17000:	68bb      	ldr	r3, [r7, #8]
   17002:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   17004:	687b      	ldr	r3, [r7, #4]
   17006:	1c5a      	adds	r2, r3, #1
   17008:	607a      	str	r2, [r7, #4]
   1700a:	781b      	ldrb	r3, [r3, #0]
   1700c:	b25a      	sxtb	r2, r3
   1700e:	68bb      	ldr	r3, [r7, #8]
   17010:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   17012:	687b      	ldr	r3, [r7, #4]
   17014:	781b      	ldrb	r3, [r3, #0]
   17016:	b29a      	uxth	r2, r3
   17018:	687b      	ldr	r3, [r7, #4]
   1701a:	3301      	adds	r3, #1
   1701c:	781b      	ldrb	r3, [r3, #0]
   1701e:	b29b      	uxth	r3, r3
   17020:	021b      	lsls	r3, r3, #8
   17022:	b29b      	uxth	r3, r3
   17024:	4413      	add	r3, r2
   17026:	b29b      	uxth	r3, r3
   17028:	b21a      	sxth	r2, r3
   1702a:	68bb      	ldr	r3, [r7, #8]
   1702c:	825a      	strh	r2, [r3, #18]
   1702e:	687b      	ldr	r3, [r7, #4]
   17030:	3302      	adds	r3, #2
   17032:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   17034:	687b      	ldr	r3, [r7, #4]
   17036:	1c5a      	adds	r2, r3, #1
   17038:	607a      	str	r2, [r7, #4]
   1703a:	781a      	ldrb	r2, [r3, #0]
   1703c:	68bb      	ldr	r3, [r7, #8]
   1703e:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   17040:	68bb      	ldr	r3, [r7, #8]
   17042:	3315      	adds	r3, #21
   17044:	6879      	ldr	r1, [r7, #4]
   17046:	4618      	mov	r0, r3
   17048:	f002 fddc 	bl	19c04 <BdaCpy>
   1704c:	687b      	ldr	r3, [r7, #4]
   1704e:	3306      	adds	r3, #6
   17050:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   17052:	687b      	ldr	r3, [r7, #4]
   17054:	1c5a      	adds	r2, r3, #1
   17056:	607a      	str	r2, [r7, #4]
   17058:	781a      	ldrb	r2, [r3, #0]
   1705a:	68bb      	ldr	r3, [r7, #8]
   1705c:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   1705e:	68bb      	ldr	r3, [r7, #8]
   17060:	7edb      	ldrb	r3, [r3, #27]
   17062:	2be5      	cmp	r3, #229	; 0xe5
   17064:	d826      	bhi.n	170b4 <hciEvtProcessLeExtAdvReport+0x198>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   17066:	68bb      	ldr	r3, [r7, #8]
   17068:	f103 0220 	add.w	r2, r3, #32
   1706c:	68bb      	ldr	r3, [r7, #8]
   1706e:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
   17070:	68bb      	ldr	r3, [r7, #8]
   17072:	69d8      	ldr	r0, [r3, #28]
   17074:	68bb      	ldr	r3, [r7, #8]
   17076:	7edb      	ldrb	r3, [r3, #27]
   17078:	461a      	mov	r2, r3
   1707a:	6879      	ldr	r1, [r7, #4]
   1707c:	f7f5 f870 	bl	c160 <memcpy>
      p += pMsg->len;
   17080:	68bb      	ldr	r3, [r7, #8]
   17082:	7edb      	ldrb	r3, [r3, #27]
   17084:	461a      	mov	r2, r3
   17086:	687b      	ldr	r3, [r7, #4]
   17088:	4413      	add	r3, r2
   1708a:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   1708c:	68bb      	ldr	r3, [r7, #8]
   1708e:	2200      	movs	r2, #0
   17090:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   17092:	68bb      	ldr	r3, [r7, #8]
   17094:	222c      	movs	r2, #44	; 0x2c
   17096:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   17098:	68bb      	ldr	r3, [r7, #8]
   1709a:	2200      	movs	r2, #0
   1709c:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1709e:	4b0a      	ldr	r3, [pc, #40]	; (170c8 <hciEvtProcessLeExtAdvReport+0x1ac>)
   170a0:	689b      	ldr	r3, [r3, #8]
   170a2:	68b8      	ldr	r0, [r7, #8]
   170a4:	4798      	blx	r3
    while (i-- > 0)
   170a6:	7dfb      	ldrb	r3, [r7, #23]
   170a8:	1e5a      	subs	r2, r3, #1
   170aa:	75fa      	strb	r2, [r7, #23]
   170ac:	2b00      	cmp	r3, #0
   170ae:	f47f af71 	bne.w	16f94 <hciEvtProcessLeExtAdvReport+0x78>
   170b2:	e000      	b.n	170b6 <hciEvtProcessLeExtAdvReport+0x19a>
        break;
   170b4:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   170b6:	68b8      	ldr	r0, [r7, #8]
   170b8:	f003 fbea 	bl	1a890 <WsfBufFree>
   170bc:	e000      	b.n	170c0 <hciEvtProcessLeExtAdvReport+0x1a4>
    return;
   170be:	bf00      	nop
  }
}
   170c0:	3718      	adds	r7, #24
   170c2:	46bd      	mov	sp, r7
   170c4:	bd80      	pop	{r7, pc}
   170c6:	bf00      	nop
   170c8:	10009e2c 	.word	0x10009e2c

000170cc <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   170cc:	b480      	push	{r7}
   170ce:	b085      	sub	sp, #20
   170d0:	af00      	add	r7, sp, #0
   170d2:	60f8      	str	r0, [r7, #12]
   170d4:	60b9      	str	r1, [r7, #8]
   170d6:	4613      	mov	r3, r2
   170d8:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
   170da:	bf00      	nop
   170dc:	3714      	adds	r7, #20
   170de:	46bd      	mov	sp, r7
   170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   170e4:	4770      	bx	lr

000170e6 <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   170e6:	b480      	push	{r7}
   170e8:	b085      	sub	sp, #20
   170ea:	af00      	add	r7, sp, #0
   170ec:	60f8      	str	r0, [r7, #12]
   170ee:	60b9      	str	r1, [r7, #8]
   170f0:	4613      	mov	r3, r2
   170f2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   170f4:	68bb      	ldr	r3, [r7, #8]
   170f6:	1c5a      	adds	r2, r3, #1
   170f8:	60ba      	str	r2, [r7, #8]
   170fa:	781a      	ldrb	r2, [r3, #0]
   170fc:	68fb      	ldr	r3, [r7, #12]
   170fe:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   17100:	68bb      	ldr	r3, [r7, #8]
   17102:	1c5a      	adds	r2, r3, #1
   17104:	60ba      	str	r2, [r7, #8]
   17106:	781a      	ldrb	r2, [r3, #0]
   17108:	68fb      	ldr	r3, [r7, #12]
   1710a:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   1710c:	68bb      	ldr	r3, [r7, #8]
   1710e:	781b      	ldrb	r3, [r3, #0]
   17110:	b29a      	uxth	r2, r3
   17112:	68bb      	ldr	r3, [r7, #8]
   17114:	3301      	adds	r3, #1
   17116:	781b      	ldrb	r3, [r3, #0]
   17118:	b29b      	uxth	r3, r3
   1711a:	021b      	lsls	r3, r3, #8
   1711c:	b29b      	uxth	r3, r3
   1711e:	4413      	add	r3, r2
   17120:	b29a      	uxth	r2, r3
   17122:	68fb      	ldr	r3, [r7, #12]
   17124:	80da      	strh	r2, [r3, #6]
   17126:	68bb      	ldr	r3, [r7, #8]
   17128:	3302      	adds	r3, #2
   1712a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   1712c:	68bb      	ldr	r3, [r7, #8]
   1712e:	1c5a      	adds	r2, r3, #1
   17130:	60ba      	str	r2, [r7, #8]
   17132:	781a      	ldrb	r2, [r3, #0]
   17134:	68fb      	ldr	r3, [r7, #12]
   17136:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   17138:	68fb      	ldr	r3, [r7, #12]
   1713a:	791a      	ldrb	r2, [r3, #4]
   1713c:	68fb      	ldr	r3, [r7, #12]
   1713e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   17140:	68fb      	ldr	r3, [r7, #12]
   17142:	88da      	ldrh	r2, [r3, #6]
   17144:	68fb      	ldr	r3, [r7, #12]
   17146:	801a      	strh	r2, [r3, #0]
}
   17148:	bf00      	nop
   1714a:	3714      	adds	r7, #20
   1714c:	46bd      	mov	sp, r7
   1714e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17152:	4770      	bx	lr

00017154 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17154:	b580      	push	{r7, lr}
   17156:	b084      	sub	sp, #16
   17158:	af00      	add	r7, sp, #0
   1715a:	60f8      	str	r0, [r7, #12]
   1715c:	60b9      	str	r1, [r7, #8]
   1715e:	4613      	mov	r3, r2
   17160:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   17162:	68bb      	ldr	r3, [r7, #8]
   17164:	1c5a      	adds	r2, r3, #1
   17166:	60ba      	str	r2, [r7, #8]
   17168:	781a      	ldrb	r2, [r3, #0]
   1716a:	68fb      	ldr	r3, [r7, #12]
   1716c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   1716e:	68bb      	ldr	r3, [r7, #8]
   17170:	1c5a      	adds	r2, r3, #1
   17172:	60ba      	str	r2, [r7, #8]
   17174:	781a      	ldrb	r2, [r3, #0]
   17176:	68fb      	ldr	r3, [r7, #12]
   17178:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   1717a:	68fb      	ldr	r3, [r7, #12]
   1717c:	3306      	adds	r3, #6
   1717e:	68b9      	ldr	r1, [r7, #8]
   17180:	4618      	mov	r0, r3
   17182:	f002 fd3f 	bl	19c04 <BdaCpy>
   17186:	68bb      	ldr	r3, [r7, #8]
   17188:	3306      	adds	r3, #6
   1718a:	60bb      	str	r3, [r7, #8]
}
   1718c:	bf00      	nop
   1718e:	3710      	adds	r7, #16
   17190:	46bd      	mov	sp, r7
   17192:	bd80      	pop	{r7, pc}

00017194 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17194:	b580      	push	{r7, lr}
   17196:	b084      	sub	sp, #16
   17198:	af00      	add	r7, sp, #0
   1719a:	60f8      	str	r0, [r7, #12]
   1719c:	60b9      	str	r1, [r7, #8]
   1719e:	4613      	mov	r3, r2
   171a0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   171a2:	68bb      	ldr	r3, [r7, #8]
   171a4:	1c5a      	adds	r2, r3, #1
   171a6:	60ba      	str	r2, [r7, #8]
   171a8:	781a      	ldrb	r2, [r3, #0]
   171aa:	68fb      	ldr	r3, [r7, #12]
   171ac:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   171ae:	68bb      	ldr	r3, [r7, #8]
   171b0:	781b      	ldrb	r3, [r3, #0]
   171b2:	b29a      	uxth	r2, r3
   171b4:	68bb      	ldr	r3, [r7, #8]
   171b6:	3301      	adds	r3, #1
   171b8:	781b      	ldrb	r3, [r3, #0]
   171ba:	b29b      	uxth	r3, r3
   171bc:	021b      	lsls	r3, r3, #8
   171be:	b29b      	uxth	r3, r3
   171c0:	4413      	add	r3, r2
   171c2:	b29a      	uxth	r2, r3
   171c4:	68fb      	ldr	r3, [r7, #12]
   171c6:	80da      	strh	r2, [r3, #6]
   171c8:	68bb      	ldr	r3, [r7, #8]
   171ca:	3302      	adds	r3, #2
   171cc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   171ce:	68bb      	ldr	r3, [r7, #8]
   171d0:	1c5a      	adds	r2, r3, #1
   171d2:	60ba      	str	r2, [r7, #8]
   171d4:	781a      	ldrb	r2, [r3, #0]
   171d6:	68fb      	ldr	r3, [r7, #12]
   171d8:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   171da:	68bb      	ldr	r3, [r7, #8]
   171dc:	1c5a      	adds	r2, r3, #1
   171de:	60ba      	str	r2, [r7, #8]
   171e0:	781a      	ldrb	r2, [r3, #0]
   171e2:	68fb      	ldr	r3, [r7, #12]
   171e4:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   171e6:	68fb      	ldr	r3, [r7, #12]
   171e8:	330a      	adds	r3, #10
   171ea:	68b9      	ldr	r1, [r7, #8]
   171ec:	4618      	mov	r0, r3
   171ee:	f002 fd09 	bl	19c04 <BdaCpy>
   171f2:	68bb      	ldr	r3, [r7, #8]
   171f4:	3306      	adds	r3, #6
   171f6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   171f8:	68bb      	ldr	r3, [r7, #8]
   171fa:	1c5a      	adds	r2, r3, #1
   171fc:	60ba      	str	r2, [r7, #8]
   171fe:	781a      	ldrb	r2, [r3, #0]
   17200:	68fb      	ldr	r3, [r7, #12]
   17202:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   17204:	68bb      	ldr	r3, [r7, #8]
   17206:	781b      	ldrb	r3, [r3, #0]
   17208:	b29a      	uxth	r2, r3
   1720a:	68bb      	ldr	r3, [r7, #8]
   1720c:	3301      	adds	r3, #1
   1720e:	781b      	ldrb	r3, [r3, #0]
   17210:	b29b      	uxth	r3, r3
   17212:	021b      	lsls	r3, r3, #8
   17214:	b29b      	uxth	r3, r3
   17216:	4413      	add	r3, r2
   17218:	b29a      	uxth	r2, r3
   1721a:	68fb      	ldr	r3, [r7, #12]
   1721c:	825a      	strh	r2, [r3, #18]
   1721e:	68bb      	ldr	r3, [r7, #8]
   17220:	3302      	adds	r3, #2
   17222:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   17224:	68bb      	ldr	r3, [r7, #8]
   17226:	1c5a      	adds	r2, r3, #1
   17228:	60ba      	str	r2, [r7, #8]
   1722a:	781a      	ldrb	r2, [r3, #0]
   1722c:	68fb      	ldr	r3, [r7, #12]
   1722e:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   17230:	68fb      	ldr	r3, [r7, #12]
   17232:	791a      	ldrb	r2, [r3, #4]
   17234:	68fb      	ldr	r3, [r7, #12]
   17236:	70da      	strb	r2, [r3, #3]
}
   17238:	bf00      	nop
   1723a:	3710      	adds	r7, #16
   1723c:	46bd      	mov	sp, r7
   1723e:	bd80      	pop	{r7, pc}

00017240 <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   17240:	b580      	push	{r7, lr}
   17242:	b084      	sub	sp, #16
   17244:	af00      	add	r7, sp, #0
   17246:	6078      	str	r0, [r7, #4]
   17248:	460b      	mov	r3, r1
   1724a:	70fb      	strb	r3, [r7, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   1724c:	687b      	ldr	r3, [r7, #4]
   1724e:	795b      	ldrb	r3, [r3, #5]
   17250:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   17252:	7bfb      	ldrb	r3, [r7, #15]
   17254:	2bf8      	cmp	r3, #248	; 0xf8
   17256:	d857      	bhi.n	17308 <hciEvtProcessLePerAdvReport+0xc8>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   17258:	7bfb      	ldrb	r3, [r7, #15]
   1725a:	b29b      	uxth	r3, r3
   1725c:	3310      	adds	r3, #16
   1725e:	b29b      	uxth	r3, r3
   17260:	4618      	mov	r0, r3
   17262:	f003 fad5 	bl	1a810 <WsfBufAlloc>
   17266:	60b8      	str	r0, [r7, #8]
   17268:	68bb      	ldr	r3, [r7, #8]
   1726a:	2b00      	cmp	r3, #0
   1726c:	d04d      	beq.n	1730a <hciEvtProcessLePerAdvReport+0xca>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   1726e:	687b      	ldr	r3, [r7, #4]
   17270:	781b      	ldrb	r3, [r3, #0]
   17272:	b29a      	uxth	r2, r3
   17274:	687b      	ldr	r3, [r7, #4]
   17276:	3301      	adds	r3, #1
   17278:	781b      	ldrb	r3, [r3, #0]
   1727a:	b29b      	uxth	r3, r3
   1727c:	021b      	lsls	r3, r3, #8
   1727e:	b29b      	uxth	r3, r3
   17280:	4413      	add	r3, r2
   17282:	b29a      	uxth	r2, r3
   17284:	68bb      	ldr	r3, [r7, #8]
   17286:	809a      	strh	r2, [r3, #4]
   17288:	687b      	ldr	r3, [r7, #4]
   1728a:	3302      	adds	r3, #2
   1728c:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   1728e:	687b      	ldr	r3, [r7, #4]
   17290:	1c5a      	adds	r2, r3, #1
   17292:	607a      	str	r2, [r7, #4]
   17294:	781a      	ldrb	r2, [r3, #0]
   17296:	68bb      	ldr	r3, [r7, #8]
   17298:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   1729a:	687b      	ldr	r3, [r7, #4]
   1729c:	1c5a      	adds	r2, r3, #1
   1729e:	607a      	str	r2, [r7, #4]
   172a0:	781a      	ldrb	r2, [r3, #0]
   172a2:	68bb      	ldr	r3, [r7, #8]
   172a4:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   172a6:	687b      	ldr	r3, [r7, #4]
   172a8:	1c5a      	adds	r2, r3, #1
   172aa:	607a      	str	r2, [r7, #4]
   172ac:	781a      	ldrb	r2, [r3, #0]
   172ae:	68bb      	ldr	r3, [r7, #8]
   172b0:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   172b2:	687b      	ldr	r3, [r7, #4]
   172b4:	1c5a      	adds	r2, r3, #1
   172b6:	607a      	str	r2, [r7, #4]
   172b8:	781a      	ldrb	r2, [r3, #0]
   172ba:	68bb      	ldr	r3, [r7, #8]
   172bc:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   172be:	687b      	ldr	r3, [r7, #4]
   172c0:	1c5a      	adds	r2, r3, #1
   172c2:	607a      	str	r2, [r7, #4]
   172c4:	781a      	ldrb	r2, [r3, #0]
   172c6:	68bb      	ldr	r3, [r7, #8]
   172c8:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   172ca:	68bb      	ldr	r3, [r7, #8]
   172cc:	f103 0210 	add.w	r2, r3, #16
   172d0:	68bb      	ldr	r3, [r7, #8]
   172d2:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   172d4:	68bb      	ldr	r3, [r7, #8]
   172d6:	68d8      	ldr	r0, [r3, #12]
   172d8:	68bb      	ldr	r3, [r7, #8]
   172da:	7a9b      	ldrb	r3, [r3, #10]
   172dc:	461a      	mov	r2, r3
   172de:	6879      	ldr	r1, [r7, #4]
   172e0:	f7f4 ff3e 	bl	c160 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   172e4:	68bb      	ldr	r3, [r7, #8]
   172e6:	2200      	movs	r2, #0
   172e8:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   172ea:	68bb      	ldr	r3, [r7, #8]
   172ec:	2231      	movs	r2, #49	; 0x31
   172ee:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   172f0:	68bb      	ldr	r3, [r7, #8]
   172f2:	7a5a      	ldrb	r2, [r3, #9]
   172f4:	68bb      	ldr	r3, [r7, #8]
   172f6:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   172f8:	4b05      	ldr	r3, [pc, #20]	; (17310 <hciEvtProcessLePerAdvReport+0xd0>)
   172fa:	689b      	ldr	r3, [r3, #8]
   172fc:	68b8      	ldr	r0, [r7, #8]
   172fe:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   17300:	68b8      	ldr	r0, [r7, #8]
   17302:	f003 fac5 	bl	1a890 <WsfBufFree>
   17306:	e000      	b.n	1730a <hciEvtProcessLePerAdvReport+0xca>
    return;
   17308:	bf00      	nop
  }
}
   1730a:	3710      	adds	r7, #16
   1730c:	46bd      	mov	sp, r7
   1730e:	bd80      	pop	{r7, pc}
   17310:	10009e2c 	.word	0x10009e2c

00017314 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17314:	b480      	push	{r7}
   17316:	b085      	sub	sp, #20
   17318:	af00      	add	r7, sp, #0
   1731a:	60f8      	str	r0, [r7, #12]
   1731c:	60b9      	str	r1, [r7, #8]
   1731e:	4613      	mov	r3, r2
   17320:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   17322:	68bb      	ldr	r3, [r7, #8]
   17324:	1c5a      	adds	r2, r3, #1
   17326:	60ba      	str	r2, [r7, #8]
   17328:	781a      	ldrb	r2, [r3, #0]
   1732a:	68fb      	ldr	r3, [r7, #12]
   1732c:	70da      	strb	r2, [r3, #3]
}
   1732e:	bf00      	nop
   17330:	3714      	adds	r7, #20
   17332:	46bd      	mov	sp, r7
   17334:	f85d 7b04 	ldr.w	r7, [sp], #4
   17338:	4770      	bx	lr

0001733a <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1733a:	b480      	push	{r7}
   1733c:	b085      	sub	sp, #20
   1733e:	af00      	add	r7, sp, #0
   17340:	60f8      	str	r0, [r7, #12]
   17342:	60b9      	str	r1, [r7, #8]
   17344:	4613      	mov	r3, r2
   17346:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   17348:	68bb      	ldr	r3, [r7, #8]
   1734a:	781b      	ldrb	r3, [r3, #0]
   1734c:	b29a      	uxth	r2, r3
   1734e:	68bb      	ldr	r3, [r7, #8]
   17350:	3301      	adds	r3, #1
   17352:	781b      	ldrb	r3, [r3, #0]
   17354:	b29b      	uxth	r3, r3
   17356:	021b      	lsls	r3, r3, #8
   17358:	b29b      	uxth	r3, r3
   1735a:	4413      	add	r3, r2
   1735c:	b29a      	uxth	r2, r3
   1735e:	68fb      	ldr	r3, [r7, #12]
   17360:	809a      	strh	r2, [r3, #4]
   17362:	68bb      	ldr	r3, [r7, #8]
   17364:	3302      	adds	r3, #2
   17366:	60bb      	str	r3, [r7, #8]
}
   17368:	bf00      	nop
   1736a:	3714      	adds	r7, #20
   1736c:	46bd      	mov	sp, r7
   1736e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17372:	4770      	bx	lr

00017374 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   17374:	b580      	push	{r7, lr}
   17376:	b084      	sub	sp, #16
   17378:	af00      	add	r7, sp, #0
   1737a:	6078      	str	r0, [r7, #4]
   1737c:	460b      	mov	r3, r1
   1737e:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   17380:	687b      	ldr	r3, [r7, #4]
   17382:	1c5a      	adds	r2, r3, #1
   17384:	607a      	str	r2, [r7, #4]
   17386:	781b      	ldrb	r3, [r3, #0]
   17388:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   1738a:	7bfb      	ldrb	r3, [r7, #15]
   1738c:	2b0f      	cmp	r3, #15
   1738e:	d84e      	bhi.n	1742e <hciEvtProcessLeDirectAdvReport+0xba>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   17390:	201c      	movs	r0, #28
   17392:	f003 fa3d 	bl	1a810 <WsfBufAlloc>
   17396:	60b8      	str	r0, [r7, #8]
   17398:	68bb      	ldr	r3, [r7, #8]
   1739a:	2b00      	cmp	r3, #0
   1739c:	d048      	beq.n	17430 <hciEvtProcessLeDirectAdvReport+0xbc>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   1739e:	e03d      	b.n	1741c <hciEvtProcessLeDirectAdvReport+0xa8>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   173a0:	687b      	ldr	r3, [r7, #4]
   173a2:	1c5a      	adds	r2, r3, #1
   173a4:	607a      	str	r2, [r7, #4]
   173a6:	781a      	ldrb	r2, [r3, #0]
   173a8:	68bb      	ldr	r3, [r7, #8]
   173aa:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   173ac:	687b      	ldr	r3, [r7, #4]
   173ae:	1c5a      	adds	r2, r3, #1
   173b0:	607a      	str	r2, [r7, #4]
   173b2:	781a      	ldrb	r2, [r3, #0]
   173b4:	68bb      	ldr	r3, [r7, #8]
   173b6:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   173b8:	68bb      	ldr	r3, [r7, #8]
   173ba:	330c      	adds	r3, #12
   173bc:	6879      	ldr	r1, [r7, #4]
   173be:	4618      	mov	r0, r3
   173c0:	f002 fc20 	bl	19c04 <BdaCpy>
   173c4:	687b      	ldr	r3, [r7, #4]
   173c6:	3306      	adds	r3, #6
   173c8:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   173ca:	687b      	ldr	r3, [r7, #4]
   173cc:	1c5a      	adds	r2, r3, #1
   173ce:	607a      	str	r2, [r7, #4]
   173d0:	781a      	ldrb	r2, [r3, #0]
   173d2:	68bb      	ldr	r3, [r7, #8]
   173d4:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   173d6:	68bb      	ldr	r3, [r7, #8]
   173d8:	3313      	adds	r3, #19
   173da:	6879      	ldr	r1, [r7, #4]
   173dc:	4618      	mov	r0, r3
   173de:	f002 fc11 	bl	19c04 <BdaCpy>
   173e2:	687b      	ldr	r3, [r7, #4]
   173e4:	3306      	adds	r3, #6
   173e6:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   173e8:	687b      	ldr	r3, [r7, #4]
   173ea:	1c5a      	adds	r2, r3, #1
   173ec:	607a      	str	r2, [r7, #4]
   173ee:	781b      	ldrb	r3, [r3, #0]
   173f0:	b25a      	sxtb	r2, r3
   173f2:	68bb      	ldr	r3, [r7, #8]
   173f4:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   173f6:	68bb      	ldr	r3, [r7, #8]
   173f8:	2200      	movs	r2, #0
   173fa:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   173fc:	68bb      	ldr	r3, [r7, #8]
   173fe:	2200      	movs	r2, #0
   17400:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   17402:	68bb      	ldr	r3, [r7, #8]
   17404:	2200      	movs	r2, #0
   17406:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   17408:	68bb      	ldr	r3, [r7, #8]
   1740a:	2206      	movs	r2, #6
   1740c:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1740e:	68bb      	ldr	r3, [r7, #8]
   17410:	2200      	movs	r2, #0
   17412:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   17414:	4b08      	ldr	r3, [pc, #32]	; (17438 <hciEvtProcessLeDirectAdvReport+0xc4>)
   17416:	689b      	ldr	r3, [r3, #8]
   17418:	68b8      	ldr	r0, [r7, #8]
   1741a:	4798      	blx	r3
    while (i-- > 0)
   1741c:	7bfb      	ldrb	r3, [r7, #15]
   1741e:	1e5a      	subs	r2, r3, #1
   17420:	73fa      	strb	r2, [r7, #15]
   17422:	2b00      	cmp	r3, #0
   17424:	d1bc      	bne.n	173a0 <hciEvtProcessLeDirectAdvReport+0x2c>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   17426:	68b8      	ldr	r0, [r7, #8]
   17428:	f003 fa32 	bl	1a890 <WsfBufFree>
   1742c:	e000      	b.n	17430 <hciEvtProcessLeDirectAdvReport+0xbc>
    return;
   1742e:	bf00      	nop
  }
}
   17430:	3710      	adds	r7, #16
   17432:	46bd      	mov	sp, r7
   17434:	bd80      	pop	{r7, pc}
   17436:	bf00      	nop
   17438:	10009e2c 	.word	0x10009e2c

0001743c <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   1743c:	b480      	push	{r7}
   1743e:	b083      	sub	sp, #12
   17440:	af00      	add	r7, sp, #0
   17442:	4603      	mov	r3, r0
   17444:	460a      	mov	r2, r1
   17446:	71fb      	strb	r3, [r7, #7]
   17448:	4613      	mov	r3, r2
   1744a:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   1744c:	bf00      	nop
   1744e:	370c      	adds	r7, #12
   17450:	46bd      	mov	sp, r7
   17452:	f85d 7b04 	ldr.w	r7, [sp], #4
   17456:	4770      	bx	lr

00017458 <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   17458:	b580      	push	{r7, lr}
   1745a:	b084      	sub	sp, #16
   1745c:	af00      	add	r7, sp, #0
   1745e:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   17460:	687b      	ldr	r3, [r7, #4]
   17462:	1c5a      	adds	r2, r3, #1
   17464:	607a      	str	r2, [r7, #4]
   17466:	781b      	ldrb	r3, [r3, #0]
   17468:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   1746a:	687b      	ldr	r3, [r7, #4]
   1746c:	1c5a      	adds	r2, r3, #1
   1746e:	607a      	str	r2, [r7, #4]
   17470:	781b      	ldrb	r3, [r3, #0]
   17472:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
   17474:	687b      	ldr	r3, [r7, #4]
   17476:	781b      	ldrb	r3, [r3, #0]
   17478:	b29a      	uxth	r2, r3
   1747a:	687b      	ldr	r3, [r7, #4]
   1747c:	3301      	adds	r3, #1
   1747e:	781b      	ldrb	r3, [r3, #0]
   17480:	b29b      	uxth	r3, r3
   17482:	021b      	lsls	r3, r3, #8
   17484:	b29b      	uxth	r3, r3
   17486:	4413      	add	r3, r2
   17488:	81bb      	strh	r3, [r7, #12]
   1748a:	687b      	ldr	r3, [r7, #4]
   1748c:	3302      	adds	r3, #2
   1748e:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   17490:	7bfb      	ldrb	r3, [r7, #15]
   17492:	2b00      	cmp	r3, #0
   17494:	d005      	beq.n	174a2 <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
   17496:	89ba      	ldrh	r2, [r7, #12]
   17498:	7bfb      	ldrb	r3, [r7, #15]
   1749a:	4611      	mov	r1, r2
   1749c:	4618      	mov	r0, r3
   1749e:	f7ff ffcd 	bl	1743c <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   174a2:	7bbb      	ldrb	r3, [r7, #14]
   174a4:	4618      	mov	r0, r3
   174a6:	f7fc ff45 	bl	14334 <hciCmdRecvCmpl>
}
   174aa:	bf00      	nop
   174ac:	3710      	adds	r7, #16
   174ae:	46bd      	mov	sp, r7
   174b0:	bd80      	pop	{r7, pc}
	...

000174b4 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   174b4:	b580      	push	{r7, lr}
   174b6:	b086      	sub	sp, #24
   174b8:	af00      	add	r7, sp, #0
   174ba:	6078      	str	r0, [r7, #4]
   174bc:	460b      	mov	r3, r1
   174be:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   174c0:	2300      	movs	r3, #0
   174c2:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   174c4:	4ba2      	ldr	r3, [pc, #648]	; (17750 <hciEvtProcessCmdCmpl+0x29c>)
   174c6:	689b      	ldr	r3, [r3, #8]
   174c8:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   174ca:	687b      	ldr	r3, [r7, #4]
   174cc:	1c5a      	adds	r2, r3, #1
   174ce:	607a      	str	r2, [r7, #4]
   174d0:	781b      	ldrb	r3, [r3, #0]
   174d2:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
   174d4:	687b      	ldr	r3, [r7, #4]
   174d6:	781b      	ldrb	r3, [r3, #0]
   174d8:	b29a      	uxth	r2, r3
   174da:	687b      	ldr	r3, [r7, #4]
   174dc:	3301      	adds	r3, #1
   174de:	781b      	ldrb	r3, [r3, #0]
   174e0:	b29b      	uxth	r3, r3
   174e2:	021b      	lsls	r3, r3, #8
   174e4:	b29b      	uxth	r3, r3
   174e6:	4413      	add	r3, r2
   174e8:	81bb      	strh	r3, [r7, #12]
   174ea:	687b      	ldr	r3, [r7, #4]
   174ec:	3302      	adds	r3, #2
   174ee:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   174f0:	89bb      	ldrh	r3, [r7, #12]
   174f2:	f242 0222 	movw	r2, #8226	; 0x2022
   174f6:	4293      	cmp	r3, r2
   174f8:	f000 80aa 	beq.w	17650 <hciEvtProcessCmdCmpl+0x19c>
   174fc:	f242 0222 	movw	r2, #8226	; 0x2022
   17500:	4293      	cmp	r3, r2
   17502:	dc49      	bgt.n	17598 <hciEvtProcessCmdCmpl+0xe4>
   17504:	f242 0215 	movw	r2, #8213	; 0x2015
   17508:	4293      	cmp	r3, r2
   1750a:	f000 80b3 	beq.w	17674 <hciEvtProcessCmdCmpl+0x1c0>
   1750e:	f242 0215 	movw	r2, #8213	; 0x2015
   17512:	4293      	cmp	r3, r2
   17514:	dc22      	bgt.n	1755c <hciEvtProcessCmdCmpl+0xa8>
   17516:	f241 4205 	movw	r2, #5125	; 0x1405
   1751a:	4293      	cmp	r3, r2
   1751c:	f000 80ad 	beq.w	1767a <hciEvtProcessCmdCmpl+0x1c6>
   17520:	f241 4205 	movw	r2, #5125	; 0x1405
   17524:	4293      	cmp	r3, r2
   17526:	dc0a      	bgt.n	1753e <hciEvtProcessCmdCmpl+0x8a>
   17528:	f640 422d 	movw	r2, #3117	; 0xc2d
   1752c:	4293      	cmp	r3, r2
   1752e:	f000 80a7 	beq.w	17680 <hciEvtProcessCmdCmpl+0x1cc>
   17532:	f640 427c 	movw	r2, #3196	; 0xc7c
   17536:	4293      	cmp	r3, r2
   17538:	f000 80b7 	beq.w	176aa <hciEvtProcessCmdCmpl+0x1f6>
   1753c:	e0cd      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
   1753e:	f242 020c 	movw	r2, #8204	; 0x200c
   17542:	4293      	cmp	r3, r2
   17544:	f000 80ba 	beq.w	176bc <hciEvtProcessCmdCmpl+0x208>
   17548:	f242 020e 	movw	r2, #8206	; 0x200e
   1754c:	4293      	cmp	r3, r2
   1754e:	d06a      	beq.n	17626 <hciEvtProcessCmdCmpl+0x172>
   17550:	f242 020a 	movw	r2, #8202	; 0x200a
   17554:	4293      	cmp	r3, r2
   17556:	f000 80b4 	beq.w	176c2 <hciEvtProcessCmdCmpl+0x20e>
   1755a:	e0be      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
   1755c:	f242 021a 	movw	r2, #8218	; 0x201a
   17560:	4293      	cmp	r3, r2
   17562:	d07b      	beq.n	1765c <hciEvtProcessCmdCmpl+0x1a8>
   17564:	f242 021a 	movw	r2, #8218	; 0x201a
   17568:	4293      	cmp	r3, r2
   1756a:	dc08      	bgt.n	1757e <hciEvtProcessCmdCmpl+0xca>
   1756c:	f242 0217 	movw	r2, #8215	; 0x2017
   17570:	4293      	cmp	r3, r2
   17572:	d05b      	beq.n	1762c <hciEvtProcessCmdCmpl+0x178>
   17574:	f242 0218 	movw	r2, #8216	; 0x2018
   17578:	4293      	cmp	r3, r2
   1757a:	d075      	beq.n	17668 <hciEvtProcessCmdCmpl+0x1b4>
   1757c:	e0ad      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
   1757e:	f242 0220 	movw	r2, #8224	; 0x2020
   17582:	4293      	cmp	r3, r2
   17584:	d058      	beq.n	17638 <hciEvtProcessCmdCmpl+0x184>
   17586:	f242 0220 	movw	r2, #8224	; 0x2020
   1758a:	4293      	cmp	r3, r2
   1758c:	dc57      	bgt.n	1763e <hciEvtProcessCmdCmpl+0x18a>
   1758e:	f242 021b 	movw	r2, #8219	; 0x201b
   17592:	4293      	cmp	r3, r2
   17594:	d065      	beq.n	17662 <hciEvtProcessCmdCmpl+0x1ae>
   17596:	e0a0      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
   17598:	f242 022c 	movw	r2, #8236	; 0x202c
   1759c:	4293      	cmp	r3, r2
   1759e:	d07e      	beq.n	1769e <hciEvtProcessCmdCmpl+0x1ea>
   175a0:	f242 022c 	movw	r2, #8236	; 0x202c
   175a4:	4293      	cmp	r3, r2
   175a6:	dc1d      	bgt.n	175e4 <hciEvtProcessCmdCmpl+0x130>
   175a8:	f242 0227 	movw	r2, #8231	; 0x2027
   175ac:	4293      	cmp	r3, r2
   175ae:	d06a      	beq.n	17686 <hciEvtProcessCmdCmpl+0x1d2>
   175b0:	f242 0227 	movw	r2, #8231	; 0x2027
   175b4:	4293      	cmp	r3, r2
   175b6:	dc08      	bgt.n	175ca <hciEvtProcessCmdCmpl+0x116>
   175b8:	f242 0223 	movw	r2, #8227	; 0x2023
   175bc:	4293      	cmp	r3, r2
   175be:	d041      	beq.n	17644 <hciEvtProcessCmdCmpl+0x190>
   175c0:	f242 0224 	movw	r2, #8228	; 0x2024
   175c4:	4293      	cmp	r3, r2
   175c6:	d040      	beq.n	1764a <hciEvtProcessCmdCmpl+0x196>
   175c8:	e087      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
   175ca:	f242 0229 	movw	r2, #8233	; 0x2029
   175ce:	4293      	cmp	r3, r2
   175d0:	d05f      	beq.n	17692 <hciEvtProcessCmdCmpl+0x1de>
   175d2:	f242 0229 	movw	r2, #8233	; 0x2029
   175d6:	4293      	cmp	r3, r2
   175d8:	db58      	blt.n	1768c <hciEvtProcessCmdCmpl+0x1d8>
   175da:	f242 022b 	movw	r2, #8235	; 0x202b
   175de:	4293      	cmp	r3, r2
   175e0:	d05a      	beq.n	17698 <hciEvtProcessCmdCmpl+0x1e4>
   175e2:	e07a      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
   175e4:	f242 0231 	movw	r2, #8241	; 0x2031
   175e8:	4293      	cmp	r3, r2
   175ea:	d064      	beq.n	176b6 <hciEvtProcessCmdCmpl+0x202>
   175ec:	f242 0231 	movw	r2, #8241	; 0x2031
   175f0:	4293      	cmp	r3, r2
   175f2:	dc0c      	bgt.n	1760e <hciEvtProcessCmdCmpl+0x15a>
   175f4:	f242 022f 	movw	r2, #8239	; 0x202f
   175f8:	4293      	cmp	r3, r2
   175fa:	d02c      	beq.n	17656 <hciEvtProcessCmdCmpl+0x1a2>
   175fc:	f242 022f 	movw	r2, #8239	; 0x202f
   17600:	4293      	cmp	r3, r2
   17602:	dc55      	bgt.n	176b0 <hciEvtProcessCmdCmpl+0x1fc>
   17604:	f242 022d 	movw	r2, #8237	; 0x202d
   17608:	4293      	cmp	r3, r2
   1760a:	d04b      	beq.n	176a4 <hciEvtProcessCmdCmpl+0x1f0>
   1760c:	e065      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
   1760e:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   17612:	d05f      	beq.n	176d4 <hciEvtProcessCmdCmpl+0x220>
   17614:	f242 0242 	movw	r2, #8258	; 0x2042
   17618:	4293      	cmp	r3, r2
   1761a:	d055      	beq.n	176c8 <hciEvtProcessCmdCmpl+0x214>
   1761c:	f242 0239 	movw	r2, #8249	; 0x2039
   17620:	4293      	cmp	r3, r2
   17622:	d054      	beq.n	176ce <hciEvtProcessCmdCmpl+0x21a>
   17624:	e059      	b.n	176da <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   17626:	2305      	movs	r3, #5
   17628:	75fb      	strb	r3, [r7, #23]
    break;
   1762a:	e064      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   1762c:	231b      	movs	r3, #27
   1762e:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   17630:	4b47      	ldr	r3, [pc, #284]	; (17750 <hciEvtProcessCmdCmpl+0x29c>)
   17632:	68db      	ldr	r3, [r3, #12]
   17634:	613b      	str	r3, [r7, #16]
    break;
   17636:	e05e      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   17638:	231d      	movs	r3, #29
   1763a:	75fb      	strb	r3, [r7, #23]
    break;
   1763c:	e05b      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   1763e:	231e      	movs	r3, #30
   17640:	75fb      	strb	r3, [r7, #23]
    break;
   17642:	e058      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   17644:	231f      	movs	r3, #31
   17646:	75fb      	strb	r3, [r7, #23]
    break;
   17648:	e055      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1764a:	2320      	movs	r3, #32
   1764c:	75fb      	strb	r3, [r7, #23]
    break;
   1764e:	e052      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   17650:	2321      	movs	r3, #33	; 0x21
   17652:	75fb      	strb	r3, [r7, #23]
    break;
   17654:	e04f      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   17656:	2322      	movs	r3, #34	; 0x22
   17658:	75fb      	strb	r3, [r7, #23]
    break;
   1765a:	e04c      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   1765c:	230c      	movs	r3, #12
   1765e:	75fb      	strb	r3, [r7, #23]
    break;
   17660:	e049      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   17662:	230d      	movs	r3, #13
   17664:	75fb      	strb	r3, [r7, #23]
    break;
   17666:	e046      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   17668:	231c      	movs	r3, #28
   1766a:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   1766c:	4b38      	ldr	r3, [pc, #224]	; (17750 <hciEvtProcessCmdCmpl+0x29c>)
   1766e:	68db      	ldr	r3, [r3, #12]
   17670:	613b      	str	r3, [r7, #16]
    break;
   17672:	e040      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   17674:	2308      	movs	r3, #8
   17676:	75fb      	strb	r3, [r7, #23]
    break;
   17678:	e03d      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   1767a:	2307      	movs	r3, #7
   1767c:	75fb      	strb	r3, [r7, #23]
    break;
   1767e:	e03a      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   17680:	2309      	movs	r3, #9
   17682:	75fb      	strb	r3, [r7, #23]
    break;
   17684:	e037      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   17686:	2315      	movs	r3, #21
   17688:	75fb      	strb	r3, [r7, #23]
    break;
   1768a:	e034      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   1768c:	2316      	movs	r3, #22
   1768e:	75fb      	strb	r3, [r7, #23]
    break;
   17690:	e031      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   17692:	2317      	movs	r3, #23
   17694:	75fb      	strb	r3, [r7, #23]
    break;
   17696:	e02e      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   17698:	2318      	movs	r3, #24
   1769a:	75fb      	strb	r3, [r7, #23]
    break;
   1769c:	e02b      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   1769e:	2319      	movs	r3, #25
   176a0:	75fb      	strb	r3, [r7, #23]
    break;
   176a2:	e028      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   176a4:	231a      	movs	r3, #26
   176a6:	75fb      	strb	r3, [r7, #23]
    break;
   176a8:	e025      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   176aa:	2327      	movs	r3, #39	; 0x27
   176ac:	75fb      	strb	r3, [r7, #23]
    break;
   176ae:	e022      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   176b0:	2329      	movs	r3, #41	; 0x29
   176b2:	75fb      	strb	r3, [r7, #23]
    break;
   176b4:	e01f      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   176b6:	232a      	movs	r3, #42	; 0x2a
   176b8:	75fb      	strb	r3, [r7, #23]
    break;
   176ba:	e01c      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
   176bc:	2334      	movs	r3, #52	; 0x34
   176be:	75fb      	strb	r3, [r7, #23]
    break;
   176c0:	e019      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
   176c2:	2335      	movs	r3, #53	; 0x35
   176c4:	75fb      	strb	r3, [r7, #23]
    break;
   176c6:	e016      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
   176c8:	2336      	movs	r3, #54	; 0x36
   176ca:	75fb      	strb	r3, [r7, #23]
    break;
   176cc:	e013      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
   176ce:	2337      	movs	r3, #55	; 0x37
   176d0:	75fb      	strb	r3, [r7, #23]
    break;
   176d2:	e010      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
   176d4:	2338      	movs	r3, #56	; 0x38
   176d6:	75fb      	strb	r3, [r7, #23]
    break;
   176d8:	e00d      	b.n	176f6 <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   176da:	89bb      	ldrh	r3, [r7, #12]
   176dc:	0a9b      	lsrs	r3, r3, #10
   176de:	b29b      	uxth	r3, r3
   176e0:	2b3f      	cmp	r3, #63	; 0x3f
   176e2:	d107      	bne.n	176f4 <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   176e4:	78fa      	ldrb	r2, [r7, #3]
   176e6:	89bb      	ldrh	r3, [r7, #12]
   176e8:	6879      	ldr	r1, [r7, #4]
   176ea:	4618      	mov	r0, r3
   176ec:	f000 fcc4 	bl	18078 <hciCoreVsCmdCmplRcvd>
   176f0:	4603      	mov	r3, r0
   176f2:	75fb      	strb	r3, [r7, #23]
    }
    break;
   176f4:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   176f6:	7dfb      	ldrb	r3, [r7, #23]
   176f8:	2b00      	cmp	r3, #0
   176fa:	d021      	beq.n	17740 <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   176fc:	7dfb      	ldrb	r3, [r7, #23]
   176fe:	4a15      	ldr	r2, [pc, #84]	; (17754 <hciEvtProcessCmdCmpl+0x2a0>)
   17700:	5cd3      	ldrb	r3, [r2, r3]
   17702:	b29b      	uxth	r3, r3
   17704:	4618      	mov	r0, r3
   17706:	f003 f883 	bl	1a810 <WsfBufAlloc>
   1770a:	60b8      	str	r0, [r7, #8]
   1770c:	68bb      	ldr	r3, [r7, #8]
   1770e:	2b00      	cmp	r3, #0
   17710:	d016      	beq.n	17740 <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   17712:	68bb      	ldr	r3, [r7, #8]
   17714:	2200      	movs	r2, #0
   17716:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   17718:	68bb      	ldr	r3, [r7, #8]
   1771a:	7dfa      	ldrb	r2, [r7, #23]
   1771c:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1771e:	68bb      	ldr	r3, [r7, #8]
   17720:	2200      	movs	r2, #0
   17722:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   17724:	7dfb      	ldrb	r3, [r7, #23]
   17726:	4a0c      	ldr	r2, [pc, #48]	; (17758 <hciEvtProcessCmdCmpl+0x2a4>)
   17728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1772c:	78fa      	ldrb	r2, [r7, #3]
   1772e:	6879      	ldr	r1, [r7, #4]
   17730:	68b8      	ldr	r0, [r7, #8]
   17732:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   17734:	693b      	ldr	r3, [r7, #16]
   17736:	68b8      	ldr	r0, [r7, #8]
   17738:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   1773a:	68b8      	ldr	r0, [r7, #8]
   1773c:	f003 f8a8 	bl	1a890 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   17740:	7bfb      	ldrb	r3, [r7, #15]
   17742:	4618      	mov	r0, r3
   17744:	f7fc fdf6 	bl	14334 <hciCmdRecvCmpl>
}
   17748:	bf00      	nop
   1774a:	3718      	adds	r7, #24
   1774c:	46bd      	mov	sp, r7
   1774e:	bd80      	pop	{r7, pc}
   17750:	10009e2c 	.word	0x10009e2c
   17754:	00026c14 	.word	0x00026c14
   17758:	00026b30 	.word	0x00026b30

0001775c <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   1775c:	b580      	push	{r7, lr}
   1775e:	b088      	sub	sp, #32
   17760:	af00      	add	r7, sp, #0
   17762:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   17764:	2300      	movs	r3, #0
   17766:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   17768:	4ba1      	ldr	r3, [pc, #644]	; (179f0 <hciEvtProcessMsg+0x294>)
   1776a:	689b      	ldr	r3, [r3, #8]
   1776c:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   1776e:	687b      	ldr	r3, [r7, #4]
   17770:	1c5a      	adds	r2, r3, #1
   17772:	607a      	str	r2, [r7, #4]
   17774:	781b      	ldrb	r3, [r3, #0]
   17776:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   17778:	687b      	ldr	r3, [r7, #4]
   1777a:	1c5a      	adds	r2, r3, #1
   1777c:	607a      	str	r2, [r7, #4]
   1777e:	781b      	ldrb	r3, [r3, #0]
   17780:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   17782:	7dfb      	ldrb	r3, [r7, #23]
   17784:	2b10      	cmp	r3, #16
   17786:	f000 8121 	beq.w	179cc <hciEvtProcessMsg+0x270>
   1778a:	2b10      	cmp	r3, #16
   1778c:	dc10      	bgt.n	177b0 <hciEvtProcessMsg+0x54>
   1778e:	2b0c      	cmp	r3, #12
   17790:	f000 8103 	beq.w	1799a <hciEvtProcessMsg+0x23e>
   17794:	2b0c      	cmp	r3, #12
   17796:	dc06      	bgt.n	177a6 <hciEvtProcessMsg+0x4a>
   17798:	2b05      	cmp	r3, #5
   1779a:	f000 80ec 	beq.w	17976 <hciEvtProcessMsg+0x21a>
   1779e:	2b08      	cmp	r3, #8
   177a0:	f000 80f2 	beq.w	17988 <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   177a4:	e131      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
  switch (evt)
   177a6:	2b0e      	cmp	r3, #14
   177a8:	d020      	beq.n	177ec <hciEvtProcessMsg+0x90>
   177aa:	2b0f      	cmp	r3, #15
   177ac:	d014      	beq.n	177d8 <hciEvtProcessMsg+0x7c>
      break;
   177ae:	e12c      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
  switch (evt)
   177b0:	2b30      	cmp	r3, #48	; 0x30
   177b2:	f000 80fb 	beq.w	179ac <hciEvtProcessMsg+0x250>
   177b6:	2b30      	cmp	r3, #48	; 0x30
   177b8:	dc05      	bgt.n	177c6 <hciEvtProcessMsg+0x6a>
   177ba:	2b13      	cmp	r3, #19
   177bc:	d022      	beq.n	17804 <hciEvtProcessMsg+0xa8>
   177be:	2b1a      	cmp	r3, #26
   177c0:	f000 80fd 	beq.w	179be <hciEvtProcessMsg+0x262>
      break;
   177c4:	e121      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
  switch (evt)
   177c6:	2b57      	cmp	r3, #87	; 0x57
   177c8:	f000 8109 	beq.w	179de <hciEvtProcessMsg+0x282>
   177cc:	2bff      	cmp	r3, #255	; 0xff
   177ce:	f000 8113 	beq.w	179f8 <hciEvtProcessMsg+0x29c>
   177d2:	2b3e      	cmp	r3, #62	; 0x3e
   177d4:	d020      	beq.n	17818 <hciEvtProcessMsg+0xbc>
      break;
   177d6:	e118      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
   177d8:	4b86      	ldr	r3, [pc, #536]	; (179f4 <hciEvtProcessMsg+0x298>)
   177da:	891b      	ldrh	r3, [r3, #8]
   177dc:	3301      	adds	r3, #1
   177de:	b29a      	uxth	r2, r3
   177e0:	4b84      	ldr	r3, [pc, #528]	; (179f4 <hciEvtProcessMsg+0x298>)
   177e2:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   177e4:	6878      	ldr	r0, [r7, #4]
   177e6:	f7ff fe37 	bl	17458 <hciEvtProcessCmdStatus>
      break;
   177ea:	e10e      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
   177ec:	4b81      	ldr	r3, [pc, #516]	; (179f4 <hciEvtProcessMsg+0x298>)
   177ee:	88db      	ldrh	r3, [r3, #6]
   177f0:	3301      	adds	r3, #1
   177f2:	b29a      	uxth	r2, r3
   177f4:	4b7f      	ldr	r3, [pc, #508]	; (179f4 <hciEvtProcessMsg+0x298>)
   177f6:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   177f8:	7dbb      	ldrb	r3, [r7, #22]
   177fa:	4619      	mov	r1, r3
   177fc:	6878      	ldr	r0, [r7, #4]
   177fe:	f7ff fe59 	bl	174b4 <hciEvtProcessCmdCmpl>
      break;
   17802:	e102      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
   17804:	6878      	ldr	r0, [r7, #4]
   17806:	f7fe fa35 	bl	15c74 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   1780a:	4b7a      	ldr	r3, [pc, #488]	; (179f4 <hciEvtProcessMsg+0x298>)
   1780c:	899b      	ldrh	r3, [r3, #12]
   1780e:	3301      	adds	r3, #1
   17810:	b29a      	uxth	r2, r3
   17812:	4b78      	ldr	r3, [pc, #480]	; (179f4 <hciEvtProcessMsg+0x298>)
   17814:	819a      	strh	r2, [r3, #12]
      break;
   17816:	e0f8      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   17818:	687b      	ldr	r3, [r7, #4]
   1781a:	1c5a      	adds	r2, r3, #1
   1781c:	607a      	str	r2, [r7, #4]
   1781e:	781b      	ldrb	r3, [r3, #0]
   17820:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
   17822:	4b74      	ldr	r3, [pc, #464]	; (179f4 <hciEvtProcessMsg+0x298>)
   17824:	8a5b      	ldrh	r3, [r3, #18]
   17826:	3301      	adds	r3, #1
   17828:	b29a      	uxth	r2, r3
   1782a:	4b72      	ldr	r3, [pc, #456]	; (179f4 <hciEvtProcessMsg+0x298>)
   1782c:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   1782e:	7d7b      	ldrb	r3, [r7, #21]
   17830:	3b01      	subs	r3, #1
   17832:	2b12      	cmp	r3, #18
   17834:	f200 809d 	bhi.w	17972 <hciEvtProcessMsg+0x216>
   17838:	a201      	add	r2, pc, #4	; (adr r2, 17840 <hciEvtProcessMsg+0xe4>)
   1783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1783e:	bf00      	nop
   17840:	0001788d 	.word	0x0001788d
   17844:	000178bb 	.word	0x000178bb
   17848:	000178c7 	.word	0x000178c7
   1784c:	000178cd 	.word	0x000178cd
   17850:	000178d3 	.word	0x000178d3
   17854:	00017913 	.word	0x00017913
   17858:	00017919 	.word	0x00017919
   1785c:	0001791f 	.word	0x0001791f
   17860:	0001792b 	.word	0x0001792b
   17864:	000178d9 	.word	0x000178d9
   17868:	00017907 	.word	0x00017907
   1786c:	00017937 	.word	0x00017937
   17870:	0001793d 	.word	0x0001793d
   17874:	0001795b 	.word	0x0001795b
   17878:	00017961 	.word	0x00017961
   1787c:	0001796d 	.word	0x0001796d
   17880:	00017949 	.word	0x00017949
   17884:	0001794f 	.word	0x0001794f
   17888:	00017955 	.word	0x00017955
          if (*pEvt == HCI_SUCCESS)
   1788c:	687b      	ldr	r3, [r7, #4]
   1788e:	781b      	ldrb	r3, [r3, #0]
   17890:	2b00      	cmp	r3, #0
   17892:	d10f      	bne.n	178b4 <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   17894:	687b      	ldr	r3, [r7, #4]
   17896:	3301      	adds	r3, #1
   17898:	781b      	ldrb	r3, [r3, #0]
   1789a:	b29a      	uxth	r2, r3
   1789c:	687b      	ldr	r3, [r7, #4]
   1789e:	3302      	adds	r3, #2
   178a0:	781b      	ldrb	r3, [r3, #0]
   178a2:	b29b      	uxth	r3, r3
   178a4:	021b      	lsls	r3, r3, #8
   178a6:	b29b      	uxth	r3, r3
   178a8:	4413      	add	r3, r2
   178aa:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   178ac:	8a7b      	ldrh	r3, [r7, #18]
   178ae:	4618      	mov	r0, r3
   178b0:	f7fd fe7e 	bl	155b0 <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   178b4:	2301      	movs	r3, #1
   178b6:	77fb      	strb	r3, [r7, #31]
          break;
   178b8:	e05c      	b.n	17974 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
   178ba:	7dbb      	ldrb	r3, [r7, #22]
   178bc:	4619      	mov	r1, r3
   178be:	6878      	ldr	r0, [r7, #4]
   178c0:	f7ff fab4 	bl	16e2c <hciEvtProcessLeAdvReport>
          break;
   178c4:	e056      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   178c6:	2304      	movs	r3, #4
   178c8:	77fb      	strb	r3, [r7, #31]
          break;
   178ca:	e053      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   178cc:	230b      	movs	r3, #11
   178ce:	77fb      	strb	r3, [r7, #31]
          break;
   178d0:	e050      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   178d2:	2310      	movs	r3, #16
   178d4:	77fb      	strb	r3, [r7, #31]
          break;
   178d6:	e04d      	b.n	17974 <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
   178d8:	687b      	ldr	r3, [r7, #4]
   178da:	781b      	ldrb	r3, [r3, #0]
   178dc:	2b00      	cmp	r3, #0
   178de:	d10f      	bne.n	17900 <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   178e0:	687b      	ldr	r3, [r7, #4]
   178e2:	3301      	adds	r3, #1
   178e4:	781b      	ldrb	r3, [r3, #0]
   178e6:	b29a      	uxth	r2, r3
   178e8:	687b      	ldr	r3, [r7, #4]
   178ea:	3302      	adds	r3, #2
   178ec:	781b      	ldrb	r3, [r3, #0]
   178ee:	b29b      	uxth	r3, r3
   178f0:	021b      	lsls	r3, r3, #8
   178f2:	b29b      	uxth	r3, r3
   178f4:	4413      	add	r3, r2
   178f6:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   178f8:	8a7b      	ldrh	r3, [r7, #18]
   178fa:	4618      	mov	r0, r3
   178fc:	f7fd fe58 	bl	155b0 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   17900:	2302      	movs	r3, #2
   17902:	77fb      	strb	r3, [r7, #31]
          break;
   17904:	e036      	b.n	17974 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   17906:	7dbb      	ldrb	r3, [r7, #22]
   17908:	4619      	mov	r1, r3
   1790a:	6878      	ldr	r0, [r7, #4]
   1790c:	f7ff fd32 	bl	17374 <hciEvtProcessLeDirectAdvReport>
          break;
   17910:	e030      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   17912:	2323      	movs	r3, #35	; 0x23
   17914:	77fb      	strb	r3, [r7, #31]
          break;
   17916:	e02d      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   17918:	2324      	movs	r3, #36	; 0x24
   1791a:	77fb      	strb	r3, [r7, #31]
          break;
   1791c:	e02a      	b.n	17974 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   1791e:	4b34      	ldr	r3, [pc, #208]	; (179f0 <hciEvtProcessMsg+0x294>)
   17920:	68db      	ldr	r3, [r3, #12]
   17922:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   17924:	2325      	movs	r3, #37	; 0x25
   17926:	77fb      	strb	r3, [r7, #31]
          break;
   17928:	e024      	b.n	17974 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   1792a:	4b31      	ldr	r3, [pc, #196]	; (179f0 <hciEvtProcessMsg+0x294>)
   1792c:	68db      	ldr	r3, [r3, #12]
   1792e:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   17930:	2326      	movs	r3, #38	; 0x26
   17932:	77fb      	strb	r3, [r7, #31]
          break;
   17934:	e01e      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   17936:	232b      	movs	r3, #43	; 0x2b
   17938:	77fb      	strb	r3, [r7, #31]
          break;
   1793a:	e01b      	b.n	17974 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   1793c:	7dbb      	ldrb	r3, [r7, #22]
   1793e:	4619      	mov	r1, r3
   17940:	6878      	ldr	r0, [r7, #4]
   17942:	f7ff faeb 	bl	16f1c <hciEvtProcessLeExtAdvReport>
          break;
   17946:	e015      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   17948:	232d      	movs	r3, #45	; 0x2d
   1794a:	77fb      	strb	r3, [r7, #31]
          break;
   1794c:	e012      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   1794e:	232e      	movs	r3, #46	; 0x2e
   17950:	77fb      	strb	r3, [r7, #31]
          break;
   17952:	e00f      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   17954:	232f      	movs	r3, #47	; 0x2f
   17956:	77fb      	strb	r3, [r7, #31]
          break;
   17958:	e00c      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   1795a:	2330      	movs	r3, #48	; 0x30
   1795c:	77fb      	strb	r3, [r7, #31]
          break;
   1795e:	e009      	b.n	17974 <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
   17960:	7dbb      	ldrb	r3, [r7, #22]
   17962:	4619      	mov	r1, r3
   17964:	6878      	ldr	r0, [r7, #4]
   17966:	f7ff fc6b 	bl	17240 <hciEvtProcessLePerAdvReport>
          break;
   1796a:	e003      	b.n	17974 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   1796c:	2332      	movs	r3, #50	; 0x32
   1796e:	77fb      	strb	r3, [r7, #31]
          break;
   17970:	e000      	b.n	17974 <hciEvtProcessMsg+0x218>
          break;
   17972:	bf00      	nop
      break;
   17974:	e049      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
   17976:	4b1f      	ldr	r3, [pc, #124]	; (179f4 <hciEvtProcessMsg+0x298>)
   17978:	881b      	ldrh	r3, [r3, #0]
   1797a:	3301      	adds	r3, #1
   1797c:	b29a      	uxth	r2, r3
   1797e:	4b1d      	ldr	r3, [pc, #116]	; (179f4 <hciEvtProcessMsg+0x298>)
   17980:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   17982:	2303      	movs	r3, #3
   17984:	77fb      	strb	r3, [r7, #31]
      break;
   17986:	e040      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
   17988:	4b1a      	ldr	r3, [pc, #104]	; (179f4 <hciEvtProcessMsg+0x298>)
   1798a:	885b      	ldrh	r3, [r3, #2]
   1798c:	3301      	adds	r3, #1
   1798e:	b29a      	uxth	r2, r3
   17990:	4b18      	ldr	r3, [pc, #96]	; (179f4 <hciEvtProcessMsg+0x298>)
   17992:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   17994:	230f      	movs	r3, #15
   17996:	77fb      	strb	r3, [r7, #31]
      break;
   17998:	e037      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   1799a:	4b16      	ldr	r3, [pc, #88]	; (179f4 <hciEvtProcessMsg+0x298>)
   1799c:	889b      	ldrh	r3, [r3, #4]
   1799e:	3301      	adds	r3, #1
   179a0:	b29a      	uxth	r2, r3
   179a2:	4b14      	ldr	r3, [pc, #80]	; (179f4 <hciEvtProcessMsg+0x298>)
   179a4:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   179a6:	230a      	movs	r3, #10
   179a8:	77fb      	strb	r3, [r7, #31]
      break;
   179aa:	e02e      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   179ac:	4b11      	ldr	r3, [pc, #68]	; (179f4 <hciEvtProcessMsg+0x298>)
   179ae:	8a1b      	ldrh	r3, [r3, #16]
   179b0:	3301      	adds	r3, #1
   179b2:	b29a      	uxth	r2, r3
   179b4:	4b0f      	ldr	r3, [pc, #60]	; (179f4 <hciEvtProcessMsg+0x298>)
   179b6:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   179b8:	230e      	movs	r3, #14
   179ba:	77fb      	strb	r3, [r7, #31]
      break;
   179bc:	e025      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
   179be:	4b0d      	ldr	r3, [pc, #52]	; (179f4 <hciEvtProcessMsg+0x298>)
   179c0:	89db      	ldrh	r3, [r3, #14]
   179c2:	3301      	adds	r3, #1
   179c4:	b29a      	uxth	r2, r3
   179c6:	4b0b      	ldr	r3, [pc, #44]	; (179f4 <hciEvtProcessMsg+0x298>)
   179c8:	81da      	strh	r2, [r3, #14]
      break;
   179ca:	e01e      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
   179cc:	4b09      	ldr	r3, [pc, #36]	; (179f4 <hciEvtProcessMsg+0x298>)
   179ce:	895b      	ldrh	r3, [r3, #10]
   179d0:	3301      	adds	r3, #1
   179d2:	b29a      	uxth	r2, r3
   179d4:	4b07      	ldr	r3, [pc, #28]	; (179f4 <hciEvtProcessMsg+0x298>)
   179d6:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   179d8:	2314      	movs	r3, #20
   179da:	77fb      	strb	r3, [r7, #31]
      break;
   179dc:	e015      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
   179de:	4b05      	ldr	r3, [pc, #20]	; (179f4 <hciEvtProcessMsg+0x298>)
   179e0:	8adb      	ldrh	r3, [r3, #22]
   179e2:	3301      	adds	r3, #1
   179e4:	b29a      	uxth	r2, r3
   179e6:	4b03      	ldr	r3, [pc, #12]	; (179f4 <hciEvtProcessMsg+0x298>)
   179e8:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   179ea:	2328      	movs	r3, #40	; 0x28
   179ec:	77fb      	strb	r3, [r7, #31]
      break;
   179ee:	e00c      	b.n	17a0a <hciEvtProcessMsg+0x2ae>
   179f0:	10009e2c 	.word	0x10009e2c
   179f4:	100041e0 	.word	0x100041e0
      hciEvtStats.numVendorSpecEvt++;
   179f8:	4b22      	ldr	r3, [pc, #136]	; (17a84 <hciEvtProcessMsg+0x328>)
   179fa:	8a9b      	ldrh	r3, [r3, #20]
   179fc:	3301      	adds	r3, #1
   179fe:	b29a      	uxth	r2, r3
   17a00:	4b20      	ldr	r3, [pc, #128]	; (17a84 <hciEvtProcessMsg+0x328>)
   17a02:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   17a04:	2313      	movs	r3, #19
   17a06:	77fb      	strb	r3, [r7, #31]
      break;
   17a08:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   17a0a:	7ffb      	ldrb	r3, [r7, #31]
   17a0c:	2b00      	cmp	r3, #0
   17a0e:	d034      	beq.n	17a7a <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   17a10:	7ffb      	ldrb	r3, [r7, #31]
   17a12:	4a1d      	ldr	r2, [pc, #116]	; (17a88 <hciEvtProcessMsg+0x32c>)
   17a14:	5cd3      	ldrb	r3, [r2, r3]
   17a16:	b29b      	uxth	r3, r3
   17a18:	4618      	mov	r0, r3
   17a1a:	f002 fef9 	bl	1a810 <WsfBufAlloc>
   17a1e:	60f8      	str	r0, [r7, #12]
   17a20:	68fb      	ldr	r3, [r7, #12]
   17a22:	2b00      	cmp	r3, #0
   17a24:	d016      	beq.n	17a54 <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   17a26:	68fb      	ldr	r3, [r7, #12]
   17a28:	2200      	movs	r2, #0
   17a2a:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   17a2c:	68fb      	ldr	r3, [r7, #12]
   17a2e:	7ffa      	ldrb	r2, [r7, #31]
   17a30:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   17a32:	68fb      	ldr	r3, [r7, #12]
   17a34:	2200      	movs	r2, #0
   17a36:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   17a38:	7ffb      	ldrb	r3, [r7, #31]
   17a3a:	4a14      	ldr	r2, [pc, #80]	; (17a8c <hciEvtProcessMsg+0x330>)
   17a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a40:	7dba      	ldrb	r2, [r7, #22]
   17a42:	6879      	ldr	r1, [r7, #4]
   17a44:	68f8      	ldr	r0, [r7, #12]
   17a46:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   17a48:	69bb      	ldr	r3, [r7, #24]
   17a4a:	68f8      	ldr	r0, [r7, #12]
   17a4c:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   17a4e:	68f8      	ldr	r0, [r7, #12]
   17a50:	f002 ff1e 	bl	1a890 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   17a54:	7ffb      	ldrb	r3, [r7, #31]
   17a56:	2b03      	cmp	r3, #3
   17a58:	d10f      	bne.n	17a7a <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	3301      	adds	r3, #1
   17a5e:	781b      	ldrb	r3, [r3, #0]
   17a60:	b29a      	uxth	r2, r3
   17a62:	687b      	ldr	r3, [r7, #4]
   17a64:	3302      	adds	r3, #2
   17a66:	781b      	ldrb	r3, [r3, #0]
   17a68:	b29b      	uxth	r3, r3
   17a6a:	021b      	lsls	r3, r3, #8
   17a6c:	b29b      	uxth	r3, r3
   17a6e:	4413      	add	r3, r2
   17a70:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
   17a72:	8a7b      	ldrh	r3, [r7, #18]
   17a74:	4618      	mov	r0, r3
   17a76:	f7fd fda8 	bl	155ca <hciCoreConnClose>
    }
  }
}
   17a7a:	bf00      	nop
   17a7c:	3720      	adds	r7, #32
   17a7e:	46bd      	mov	sp, r7
   17a80:	bd80      	pop	{r7, pc}
   17a82:	bf00      	nop
   17a84:	100041e0 	.word	0x100041e0
   17a88:	00026c14 	.word	0x00026c14
   17a8c:	00026b30 	.word	0x00026b30

00017a90 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   17a90:	b580      	push	{r7, lr}
   17a92:	b084      	sub	sp, #16
   17a94:	af00      	add	r7, sp, #0
   17a96:	6078      	str	r0, [r7, #4]
   17a98:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   17a9a:	683b      	ldr	r3, [r7, #0]
   17a9c:	3302      	adds	r3, #2
   17a9e:	781b      	ldrb	r3, [r3, #0]
   17aa0:	b29a      	uxth	r2, r3
   17aa2:	683b      	ldr	r3, [r7, #0]
   17aa4:	3303      	adds	r3, #3
   17aa6:	781b      	ldrb	r3, [r3, #0]
   17aa8:	b29b      	uxth	r3, r3
   17aaa:	021b      	lsls	r3, r3, #8
   17aac:	b29b      	uxth	r3, r3
   17aae:	4413      	add	r3, r2
   17ab0:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
   17ab2:	89fb      	ldrh	r3, [r7, #14]
   17ab4:	3304      	adds	r3, #4
   17ab6:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   17ab8:	89fb      	ldrh	r3, [r7, #14]
   17aba:	683a      	ldr	r2, [r7, #0]
   17abc:	4619      	mov	r1, r3
   17abe:	2002      	movs	r0, #2
   17ac0:	f002 fb20 	bl	1a104 <hciDrvWrite>
   17ac4:	4603      	mov	r3, r0
   17ac6:	461a      	mov	r2, r3
   17ac8:	89fb      	ldrh	r3, [r7, #14]
   17aca:	4293      	cmp	r3, r2
   17acc:	d103      	bne.n	17ad6 <hciTrSendAclData+0x46>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   17ace:	6839      	ldr	r1, [r7, #0]
   17ad0:	6878      	ldr	r0, [r7, #4]
   17ad2:	f7fd feb5 	bl	15840 <hciCoreTxAclComplete>
  }
}
   17ad6:	bf00      	nop
   17ad8:	3710      	adds	r7, #16
   17ada:	46bd      	mov	sp, r7
   17adc:	bd80      	pop	{r7, pc}

00017ade <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   17ade:	b580      	push	{r7, lr}
   17ae0:	b084      	sub	sp, #16
   17ae2:	af00      	add	r7, sp, #0
   17ae4:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   17ae6:	687b      	ldr	r3, [r7, #4]
   17ae8:	3302      	adds	r3, #2
   17aea:	781b      	ldrb	r3, [r3, #0]
   17aec:	3303      	adds	r3, #3
   17aee:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   17af0:	7bfb      	ldrb	r3, [r7, #15]
   17af2:	b29b      	uxth	r3, r3
   17af4:	687a      	ldr	r2, [r7, #4]
   17af6:	4619      	mov	r1, r3
   17af8:	2001      	movs	r0, #1
   17afa:	f002 fb03 	bl	1a104 <hciDrvWrite>
   17afe:	4603      	mov	r3, r0
   17b00:	461a      	mov	r2, r3
   17b02:	7bfb      	ldrb	r3, [r7, #15]
   17b04:	b29b      	uxth	r3, r3
   17b06:	429a      	cmp	r2, r3
   17b08:	d102      	bne.n	17b10 <hciTrSendCmd+0x32>
  {
    /* free buffer */
    WsfMsgFree(pData);
   17b0a:	6878      	ldr	r0, [r7, #4]
   17b0c:	f002 ff26 	bl	1a95c <WsfMsgFree>
  }
}
   17b10:	bf00      	nop
   17b12:	3710      	adds	r7, #16
   17b14:	46bd      	mov	sp, r7
   17b16:	bd80      	pop	{r7, pc}

00017b18 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   17b18:	b580      	push	{r7, lr}
   17b1a:	b084      	sub	sp, #16
   17b1c:	af00      	add	r7, sp, #0
   17b1e:	6078      	str	r0, [r7, #4]
   17b20:	460b      	mov	r3, r1
   17b22:	807b      	strh	r3, [r7, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   17b24:	2300      	movs	r3, #0
   17b26:	81fb      	strh	r3, [r7, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   17b28:	e0e9      	b.n	17cfe <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   17b2a:	687b      	ldr	r3, [r7, #4]
   17b2c:	781b      	ldrb	r3, [r3, #0]
   17b2e:	723b      	strb	r3, [r7, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   17b30:	4b77      	ldr	r3, [pc, #476]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17b32:	781b      	ldrb	r3, [r3, #0]
   17b34:	2b00      	cmp	r3, #0
   17b36:	d115      	bne.n	17b64 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   17b38:	4a76      	ldr	r2, [pc, #472]	; (17d14 <hciTrSerialRxIncoming+0x1fc>)
   17b3a:	7a3b      	ldrb	r3, [r7, #8]
   17b3c:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   17b3e:	4b76      	ldr	r3, [pc, #472]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17b40:	2200      	movs	r2, #0
   17b42:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   17b44:	4b72      	ldr	r3, [pc, #456]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17b46:	2201      	movs	r2, #1
   17b48:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   17b4a:	4b74      	ldr	r3, [pc, #464]	; (17d1c <hciTrSerialRxIncoming+0x204>)
   17b4c:	2201      	movs	r2, #1
   17b4e:	701a      	strb	r2, [r3, #0]
      pBuf++;
   17b50:	687b      	ldr	r3, [r7, #4]
   17b52:	3301      	adds	r3, #1
   17b54:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   17b56:	89fb      	ldrh	r3, [r7, #14]
   17b58:	3301      	adds	r3, #1
   17b5a:	81fb      	strh	r3, [r7, #14]
      len--;
   17b5c:	887b      	ldrh	r3, [r7, #2]
   17b5e:	3b01      	subs	r3, #1
   17b60:	807b      	strh	r3, [r7, #2]
   17b62:	e0b6      	b.n	17cd2 <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   17b64:	4b6a      	ldr	r3, [pc, #424]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17b66:	781b      	ldrb	r3, [r3, #0]
   17b68:	2b01      	cmp	r3, #1
   17b6a:	f040 8091 	bne.w	17c90 <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
   17b6e:	2300      	movs	r3, #0
   17b70:	737b      	strb	r3, [r7, #13]
      uint16_t dataLen = 0;
   17b72:	2300      	movs	r3, #0
   17b74:	817b      	strh	r3, [r7, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   17b76:	4b67      	ldr	r3, [pc, #412]	; (17d14 <hciTrSerialRxIncoming+0x1fc>)
   17b78:	781b      	ldrb	r3, [r3, #0]
   17b7a:	2b04      	cmp	r3, #4
   17b7c:	d102      	bne.n	17b84 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   17b7e:	2302      	movs	r3, #2
   17b80:	737b      	strb	r3, [r7, #13]
   17b82:	e008      	b.n	17b96 <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   17b84:	4b63      	ldr	r3, [pc, #396]	; (17d14 <hciTrSerialRxIncoming+0x1fc>)
   17b86:	781b      	ldrb	r3, [r3, #0]
   17b88:	2b02      	cmp	r3, #2
   17b8a:	d102      	bne.n	17b92 <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   17b8c:	2304      	movs	r3, #4
   17b8e:	737b      	strb	r3, [r7, #13]
   17b90:	e001      	b.n	17b96 <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   17b92:	89fb      	ldrh	r3, [r7, #14]
   17b94:	e0b8      	b.n	17d08 <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
   17b96:	7b7b      	ldrb	r3, [r7, #13]
   17b98:	b29a      	uxth	r2, r3
   17b9a:	4b5f      	ldr	r3, [pc, #380]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17b9c:	881b      	ldrh	r3, [r3, #0]
   17b9e:	429a      	cmp	r2, r3
   17ba0:	d012      	beq.n	17bc8 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   17ba2:	4b5d      	ldr	r3, [pc, #372]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17ba4:	881b      	ldrh	r3, [r3, #0]
   17ba6:	1c5a      	adds	r2, r3, #1
   17ba8:	b291      	uxth	r1, r2
   17baa:	4a5b      	ldr	r2, [pc, #364]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17bac:	8011      	strh	r1, [r2, #0]
   17bae:	4619      	mov	r1, r3
   17bb0:	4a5b      	ldr	r2, [pc, #364]	; (17d20 <hciTrSerialRxIncoming+0x208>)
   17bb2:	7a3b      	ldrb	r3, [r7, #8]
   17bb4:	5453      	strb	r3, [r2, r1]
        pBuf++;
   17bb6:	687b      	ldr	r3, [r7, #4]
   17bb8:	3301      	adds	r3, #1
   17bba:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
   17bbc:	89fb      	ldrh	r3, [r7, #14]
   17bbe:	3301      	adds	r3, #1
   17bc0:	81fb      	strh	r3, [r7, #14]
        len--;
   17bc2:	887b      	ldrh	r3, [r7, #2]
   17bc4:	3b01      	subs	r3, #1
   17bc6:	807b      	strh	r3, [r7, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   17bc8:	7b7b      	ldrb	r3, [r7, #13]
   17bca:	b29a      	uxth	r2, r3
   17bcc:	4b52      	ldr	r3, [pc, #328]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17bce:	881b      	ldrh	r3, [r3, #0]
   17bd0:	429a      	cmp	r2, r3
   17bd2:	d17e      	bne.n	17cd2 <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   17bd4:	4b4f      	ldr	r3, [pc, #316]	; (17d14 <hciTrSerialRxIncoming+0x1fc>)
   17bd6:	781b      	ldrb	r3, [r3, #0]
   17bd8:	2b04      	cmp	r3, #4
   17bda:	d103      	bne.n	17be4 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
   17bdc:	4b50      	ldr	r3, [pc, #320]	; (17d20 <hciTrSerialRxIncoming+0x208>)
   17bde:	785b      	ldrb	r3, [r3, #1]
   17be0:	817b      	strh	r3, [r7, #10]
   17be2:	e00d      	b.n	17c00 <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   17be4:	4b4b      	ldr	r3, [pc, #300]	; (17d14 <hciTrSerialRxIncoming+0x1fc>)
   17be6:	781b      	ldrb	r3, [r3, #0]
   17be8:	2b02      	cmp	r3, #2
   17bea:	d109      	bne.n	17c00 <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   17bec:	4b4c      	ldr	r3, [pc, #304]	; (17d20 <hciTrSerialRxIncoming+0x208>)
   17bee:	789b      	ldrb	r3, [r3, #2]
   17bf0:	b29a      	uxth	r2, r3
   17bf2:	4b4c      	ldr	r3, [pc, #304]	; (17d24 <hciTrSerialRxIncoming+0x20c>)
   17bf4:	781b      	ldrb	r3, [r3, #0]
   17bf6:	b29b      	uxth	r3, r3
   17bf8:	021b      	lsls	r3, r3, #8
   17bfa:	b29b      	uxth	r3, r3
   17bfc:	4413      	add	r3, r2
   17bfe:	817b      	strh	r3, [r7, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   17c00:	4b44      	ldr	r3, [pc, #272]	; (17d14 <hciTrSerialRxIncoming+0x1fc>)
   17c02:	781b      	ldrb	r3, [r3, #0]
   17c04:	2b02      	cmp	r3, #2
   17c06:	d10c      	bne.n	17c22 <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   17c08:	7b7b      	ldrb	r3, [r7, #13]
   17c0a:	b29a      	uxth	r2, r3
   17c0c:	897b      	ldrh	r3, [r7, #10]
   17c0e:	4413      	add	r3, r2
   17c10:	b29b      	uxth	r3, r3
   17c12:	2100      	movs	r1, #0
   17c14:	4618      	mov	r0, r3
   17c16:	f002 fe75 	bl	1a904 <WsfMsgDataAlloc>
   17c1a:	4602      	mov	r2, r0
   17c1c:	4b42      	ldr	r3, [pc, #264]	; (17d28 <hciTrSerialRxIncoming+0x210>)
   17c1e:	601a      	str	r2, [r3, #0]
   17c20:	e00a      	b.n	17c38 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   17c22:	7b7b      	ldrb	r3, [r7, #13]
   17c24:	b29a      	uxth	r2, r3
   17c26:	897b      	ldrh	r3, [r7, #10]
   17c28:	4413      	add	r3, r2
   17c2a:	b29b      	uxth	r3, r3
   17c2c:	4618      	mov	r0, r3
   17c2e:	f002 fe7e 	bl	1a92e <WsfMsgAlloc>
   17c32:	4602      	mov	r2, r0
   17c34:	4b3c      	ldr	r3, [pc, #240]	; (17d28 <hciTrSerialRxIncoming+0x210>)
   17c36:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   17c38:	4b3b      	ldr	r3, [pc, #236]	; (17d28 <hciTrSerialRxIncoming+0x210>)
   17c3a:	681b      	ldr	r3, [r3, #0]
   17c3c:	2b00      	cmp	r3, #0
   17c3e:	d025      	beq.n	17c8c <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
   17c40:	4b39      	ldr	r3, [pc, #228]	; (17d28 <hciTrSerialRxIncoming+0x210>)
   17c42:	681b      	ldr	r3, [r3, #0]
   17c44:	4a39      	ldr	r2, [pc, #228]	; (17d2c <hciTrSerialRxIncoming+0x214>)
   17c46:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   17c48:	2300      	movs	r3, #0
   17c4a:	727b      	strb	r3, [r7, #9]
   17c4c:	e00b      	b.n	17c66 <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
   17c4e:	4b37      	ldr	r3, [pc, #220]	; (17d2c <hciTrSerialRxIncoming+0x214>)
   17c50:	681b      	ldr	r3, [r3, #0]
   17c52:	1c5a      	adds	r2, r3, #1
   17c54:	4935      	ldr	r1, [pc, #212]	; (17d2c <hciTrSerialRxIncoming+0x214>)
   17c56:	600a      	str	r2, [r1, #0]
   17c58:	7a7a      	ldrb	r2, [r7, #9]
   17c5a:	4931      	ldr	r1, [pc, #196]	; (17d20 <hciTrSerialRxIncoming+0x208>)
   17c5c:	5c8a      	ldrb	r2, [r1, r2]
   17c5e:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   17c60:	7a7b      	ldrb	r3, [r7, #9]
   17c62:	3301      	adds	r3, #1
   17c64:	727b      	strb	r3, [r7, #9]
   17c66:	7a7a      	ldrb	r2, [r7, #9]
   17c68:	7b7b      	ldrb	r3, [r7, #13]
   17c6a:	429a      	cmp	r2, r3
   17c6c:	d3ef      	bcc.n	17c4e <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   17c6e:	4a2a      	ldr	r2, [pc, #168]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17c70:	897b      	ldrh	r3, [r7, #10]
   17c72:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   17c74:	4b28      	ldr	r3, [pc, #160]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17c76:	881b      	ldrh	r3, [r3, #0]
   17c78:	2b00      	cmp	r3, #0
   17c7a:	d103      	bne.n	17c84 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   17c7c:	4b24      	ldr	r3, [pc, #144]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17c7e:	2203      	movs	r2, #3
   17c80:	701a      	strb	r2, [r3, #0]
   17c82:	e026      	b.n	17cd2 <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   17c84:	4b22      	ldr	r3, [pc, #136]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17c86:	2202      	movs	r2, #2
   17c88:	701a      	strb	r2, [r3, #0]
   17c8a:	e022      	b.n	17cd2 <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   17c8c:	89fb      	ldrh	r3, [r7, #14]
   17c8e:	e03b      	b.n	17d08 <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   17c90:	4b1f      	ldr	r3, [pc, #124]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17c92:	781b      	ldrb	r3, [r3, #0]
   17c94:	2b02      	cmp	r3, #2
   17c96:	d11c      	bne.n	17cd2 <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   17c98:	4b24      	ldr	r3, [pc, #144]	; (17d2c <hciTrSerialRxIncoming+0x214>)
   17c9a:	681b      	ldr	r3, [r3, #0]
   17c9c:	1c5a      	adds	r2, r3, #1
   17c9e:	4923      	ldr	r1, [pc, #140]	; (17d2c <hciTrSerialRxIncoming+0x214>)
   17ca0:	600a      	str	r2, [r1, #0]
   17ca2:	7a3a      	ldrb	r2, [r7, #8]
   17ca4:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   17ca6:	4b1c      	ldr	r3, [pc, #112]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17ca8:	881b      	ldrh	r3, [r3, #0]
   17caa:	3b01      	subs	r3, #1
   17cac:	b29a      	uxth	r2, r3
   17cae:	4b1a      	ldr	r3, [pc, #104]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17cb0:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   17cb2:	4b19      	ldr	r3, [pc, #100]	; (17d18 <hciTrSerialRxIncoming+0x200>)
   17cb4:	881b      	ldrh	r3, [r3, #0]
   17cb6:	2b00      	cmp	r3, #0
   17cb8:	d102      	bne.n	17cc0 <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   17cba:	4b15      	ldr	r3, [pc, #84]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17cbc:	2203      	movs	r2, #3
   17cbe:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   17cc0:	687b      	ldr	r3, [r7, #4]
   17cc2:	3301      	adds	r3, #1
   17cc4:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   17cc6:	89fb      	ldrh	r3, [r7, #14]
   17cc8:	3301      	adds	r3, #1
   17cca:	81fb      	strh	r3, [r7, #14]
      len--;
   17ccc:	887b      	ldrh	r3, [r7, #2]
   17cce:	3b01      	subs	r3, #1
   17cd0:	807b      	strh	r3, [r7, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   17cd2:	4b0f      	ldr	r3, [pc, #60]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17cd4:	781b      	ldrb	r3, [r3, #0]
   17cd6:	2b03      	cmp	r3, #3
   17cd8:	d111      	bne.n	17cfe <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
   17cda:	4b10      	ldr	r3, [pc, #64]	; (17d1c <hciTrSerialRxIncoming+0x204>)
   17cdc:	2200      	movs	r2, #0
   17cde:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   17ce0:	4b11      	ldr	r3, [pc, #68]	; (17d28 <hciTrSerialRxIncoming+0x210>)
   17ce2:	681b      	ldr	r3, [r3, #0]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	d007      	beq.n	17cf8 <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   17ce8:	4b0a      	ldr	r3, [pc, #40]	; (17d14 <hciTrSerialRxIncoming+0x1fc>)
   17cea:	781a      	ldrb	r2, [r3, #0]
   17cec:	4b0e      	ldr	r3, [pc, #56]	; (17d28 <hciTrSerialRxIncoming+0x210>)
   17cee:	681b      	ldr	r3, [r3, #0]
   17cf0:	4619      	mov	r1, r3
   17cf2:	4610      	mov	r0, r2
   17cf4:	f7fe f828 	bl	15d48 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   17cf8:	4b05      	ldr	r3, [pc, #20]	; (17d10 <hciTrSerialRxIncoming+0x1f8>)
   17cfa:	2200      	movs	r2, #0
   17cfc:	701a      	strb	r2, [r3, #0]
  while (len)
   17cfe:	887b      	ldrh	r3, [r7, #2]
   17d00:	2b00      	cmp	r3, #0
   17d02:	f47f af12 	bne.w	17b2a <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
   17d06:	89fb      	ldrh	r3, [r7, #14]
}
   17d08:	4618      	mov	r0, r3
   17d0a:	3710      	adds	r7, #16
   17d0c:	46bd      	mov	sp, r7
   17d0e:	bd80      	pop	{r7, pc}
   17d10:	100041f9 	.word	0x100041f9
   17d14:	100041fa 	.word	0x100041fa
   17d18:	100041fc 	.word	0x100041fc
   17d1c:	100041f8 	.word	0x100041f8
   17d20:	10004200 	.word	0x10004200
   17d24:	10004203 	.word	0x10004203
   17d28:	10004204 	.word	0x10004204
   17d2c:	10004208 	.word	0x10004208

00017d30 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   17d30:	b580      	push	{r7, lr}
   17d32:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   17d34:	4b0b      	ldr	r3, [pc, #44]	; (17d64 <hciCoreReadResolvingListSize+0x34>)
   17d36:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   17d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17d3e:	2b00      	cmp	r3, #0
   17d40:	d008      	beq.n	17d54 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   17d42:	4b09      	ldr	r3, [pc, #36]	; (17d68 <hciCoreReadResolvingListSize+0x38>)
   17d44:	881b      	ldrh	r3, [r3, #0]
   17d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   17d4a:	2b00      	cmp	r3, #0
   17d4c:	d002      	beq.n	17d54 <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   17d4e:	f7fd fa86 	bl	1525e <HciLeReadResolvingListSize>
   17d52:	e005      	b.n	17d60 <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   17d54:	4b03      	ldr	r3, [pc, #12]	; (17d64 <hciCoreReadResolvingListSize+0x34>)
   17d56:	2200      	movs	r2, #0
   17d58:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   17d5c:	f000 f806 	bl	17d6c <hciCoreReadMaxDataLen>
  }
}
   17d60:	bf00      	nop
   17d62:	bd80      	pop	{r7, pc}
   17d64:	10009384 	.word	0x10009384
   17d68:	10002bb2 	.word	0x10002bb2

00017d6c <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   17d6c:	b580      	push	{r7, lr}
   17d6e:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   17d70:	4b09      	ldr	r3, [pc, #36]	; (17d98 <hciCoreReadMaxDataLen+0x2c>)
   17d72:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   17d76:	f003 0320 	and.w	r3, r3, #32
   17d7a:	2b00      	cmp	r3, #0
   17d7c:	d008      	beq.n	17d90 <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   17d7e:	4b07      	ldr	r3, [pc, #28]	; (17d9c <hciCoreReadMaxDataLen+0x30>)
   17d80:	881b      	ldrh	r3, [r3, #0]
   17d82:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   17d86:	2b00      	cmp	r3, #0
   17d88:	d002      	beq.n	17d90 <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   17d8a:	f7fc fe03 	bl	14994 <HciLeReadMaxDataLen>
   17d8e:	e001      	b.n	17d94 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   17d90:	f7fc fe8a 	bl	14aa8 <HciLeRandCmd>
  }
}
   17d94:	bf00      	nop
   17d96:	bd80      	pop	{r7, pc}
   17d98:	10009384 	.word	0x10009384
   17d9c:	10002bb2 	.word	0x10002bb2

00017da0 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   17da0:	b580      	push	{r7, lr}
   17da2:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   17da4:	f7fd f94e 	bl	15044 <HciResetCmd>
}
   17da8:	bf00      	nop
   17daa:	bd80      	pop	{r7, pc}

00017dac <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   17dac:	b580      	push	{r7, lr}
   17dae:	b086      	sub	sp, #24
   17db0:	af00      	add	r7, sp, #0
   17db2:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   17db4:	687b      	ldr	r3, [r7, #4]
   17db6:	781b      	ldrb	r3, [r3, #0]
   17db8:	2b0e      	cmp	r3, #14
   17dba:	f040 814b 	bne.w	18054 <hciCoreResetSequence+0x2a8>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   17dbe:	687b      	ldr	r3, [r7, #4]
   17dc0:	3302      	adds	r3, #2
   17dc2:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
   17dc4:	687b      	ldr	r3, [r7, #4]
   17dc6:	3301      	adds	r3, #1
   17dc8:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   17dca:	687b      	ldr	r3, [r7, #4]
   17dcc:	781b      	ldrb	r3, [r3, #0]
   17dce:	b29a      	uxth	r2, r3
   17dd0:	687b      	ldr	r3, [r7, #4]
   17dd2:	3301      	adds	r3, #1
   17dd4:	781b      	ldrb	r3, [r3, #0]
   17dd6:	b29b      	uxth	r3, r3
   17dd8:	021b      	lsls	r3, r3, #8
   17dda:	b29b      	uxth	r3, r3
   17ddc:	4413      	add	r3, r2
   17dde:	82fb      	strh	r3, [r7, #22]
   17de0:	687b      	ldr	r3, [r7, #4]
   17de2:	3302      	adds	r3, #2
   17de4:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
   17de6:	687b      	ldr	r3, [r7, #4]
   17de8:	3301      	adds	r3, #1
   17dea:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
   17dec:	8afb      	ldrh	r3, [r7, #22]
   17dee:	f242 020f 	movw	r2, #8207	; 0x200f
   17df2:	4293      	cmp	r3, r2
   17df4:	f000 809e 	beq.w	17f34 <hciCoreResetSequence+0x188>
   17df8:	f242 020f 	movw	r2, #8207	; 0x200f
   17dfc:	4293      	cmp	r3, r2
   17dfe:	dc22      	bgt.n	17e46 <hciCoreResetSequence+0x9a>
   17e00:	f241 0209 	movw	r2, #4105	; 0x1009
   17e04:	4293      	cmp	r3, r2
   17e06:	d05c      	beq.n	17ec2 <hciCoreResetSequence+0x116>
   17e08:	f241 0209 	movw	r2, #4105	; 0x1009
   17e0c:	4293      	cmp	r3, r2
   17e0e:	dc0c      	bgt.n	17e2a <hciCoreResetSequence+0x7e>
   17e10:	f640 4203 	movw	r2, #3075	; 0xc03
   17e14:	4293      	cmp	r3, r2
   17e16:	d042      	beq.n	17e9e <hciCoreResetSequence+0xf2>
   17e18:	f640 4263 	movw	r2, #3171	; 0xc63
   17e1c:	4293      	cmp	r3, r2
   17e1e:	d04d      	beq.n	17ebc <hciCoreResetSequence+0x110>
   17e20:	f640 4201 	movw	r2, #3073	; 0xc01
   17e24:	4293      	cmp	r3, r2
   17e26:	d041      	beq.n	17eac <hciCoreResetSequence+0x100>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   17e28:	e114      	b.n	18054 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17e2a:	f242 0202 	movw	r2, #8194	; 0x2002
   17e2e:	4293      	cmp	r3, r2
   17e30:	d04e      	beq.n	17ed0 <hciCoreResetSequence+0x124>
   17e32:	f242 0203 	movw	r2, #8195	; 0x2003
   17e36:	4293      	cmp	r3, r2
   17e38:	f000 8086 	beq.w	17f48 <hciCoreResetSequence+0x19c>
   17e3c:	f242 0201 	movw	r2, #8193	; 0x2001
   17e40:	4293      	cmp	r3, r2
   17e42:	d037      	beq.n	17eb4 <hciCoreResetSequence+0x108>
        break;
   17e44:	e106      	b.n	18054 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17e46:	f242 022a 	movw	r2, #8234	; 0x202a
   17e4a:	4293      	cmp	r3, r2
   17e4c:	f000 8090 	beq.w	17f70 <hciCoreResetSequence+0x1c4>
   17e50:	f242 022a 	movw	r2, #8234	; 0x202a
   17e54:	4293      	cmp	r3, r2
   17e56:	dc0e      	bgt.n	17e76 <hciCoreResetSequence+0xca>
   17e58:	f242 021c 	movw	r2, #8220	; 0x201c
   17e5c:	4293      	cmp	r3, r2
   17e5e:	d060      	beq.n	17f22 <hciCoreResetSequence+0x176>
   17e60:	f242 0224 	movw	r2, #8228	; 0x2024
   17e64:	4293      	cmp	r3, r2
   17e66:	f000 80b0 	beq.w	17fca <hciCoreResetSequence+0x21e>
   17e6a:	f242 0218 	movw	r2, #8216	; 0x2018
   17e6e:	4293      	cmp	r3, r2
   17e70:	f000 80d4 	beq.w	1801c <hciCoreResetSequence+0x270>
        break;
   17e74:	e0ee      	b.n	18054 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17e76:	f242 023b 	movw	r2, #8251	; 0x203b
   17e7a:	4293      	cmp	r3, r2
   17e7c:	dc09      	bgt.n	17e92 <hciCoreResetSequence+0xe6>
   17e7e:	f242 023a 	movw	r2, #8250	; 0x203a
   17e82:	4293      	cmp	r3, r2
   17e84:	f280 80bd 	bge.w	18002 <hciCoreResetSequence+0x256>
   17e88:	f242 022f 	movw	r2, #8239	; 0x202f
   17e8c:	4293      	cmp	r3, r2
   17e8e:	d079      	beq.n	17f84 <hciCoreResetSequence+0x1d8>
        break;
   17e90:	e0e0      	b.n	18054 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17e92:	f242 024a 	movw	r2, #8266	; 0x204a
   17e96:	4293      	cmp	r3, r2
   17e98:	f000 80b3 	beq.w	18002 <hciCoreResetSequence+0x256>
        break;
   17e9c:	e0da      	b.n	18054 <hciCoreResetSequence+0x2a8>
        randCnt = 0;
   17e9e:	4b6f      	ldr	r3, [pc, #444]	; (1805c <hciCoreResetSequence+0x2b0>)
   17ea0:	2200      	movs	r2, #0
   17ea2:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   17ea4:	486e      	ldr	r0, [pc, #440]	; (18060 <hciCoreResetSequence+0x2b4>)
   17ea6:	f7fd f8ff 	bl	150a8 <HciSetEventMaskCmd>
        break;
   17eaa:	e0d3      	b.n	18054 <hciCoreResetSequence+0x2a8>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   17eac:	486d      	ldr	r0, [pc, #436]	; (18064 <hciCoreResetSequence+0x2b8>)
   17eae:	f7fc ff5b 	bl	14d68 <HciLeSetEventMaskCmd>
        break;
   17eb2:	e0cf      	b.n	18054 <hciCoreResetSequence+0x2a8>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   17eb4:	486c      	ldr	r0, [pc, #432]	; (18068 <hciCoreResetSequence+0x2bc>)
   17eb6:	f7fd f913 	bl	150e0 <HciSetEventMaskPage2Cmd>
        break;
   17eba:	e0cb      	b.n	18054 <hciCoreResetSequence+0x2a8>
        HciReadBdAddrCmd();
   17ebc:	f7fd f876 	bl	14fac <HciReadBdAddrCmd>
        break;
   17ec0:	e0c8      	b.n	18054 <hciCoreResetSequence+0x2a8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   17ec2:	6879      	ldr	r1, [r7, #4]
   17ec4:	4869      	ldr	r0, [pc, #420]	; (1806c <hciCoreResetSequence+0x2c0>)
   17ec6:	f001 fe9d 	bl	19c04 <BdaCpy>
        HciLeReadBufSizeCmd();
   17eca:	f7fc fe00 	bl	14ace <HciLeReadBufSizeCmd>
        break;
   17ece:	e0c1      	b.n	18054 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   17ed0:	687b      	ldr	r3, [r7, #4]
   17ed2:	781b      	ldrb	r3, [r3, #0]
   17ed4:	b29a      	uxth	r2, r3
   17ed6:	687b      	ldr	r3, [r7, #4]
   17ed8:	3301      	adds	r3, #1
   17eda:	781b      	ldrb	r3, [r3, #0]
   17edc:	b29b      	uxth	r3, r3
   17ede:	021b      	lsls	r3, r3, #8
   17ee0:	b29b      	uxth	r3, r3
   17ee2:	4413      	add	r3, r2
   17ee4:	b29a      	uxth	r2, r3
   17ee6:	4b62      	ldr	r3, [pc, #392]	; (18070 <hciCoreResetSequence+0x2c4>)
   17ee8:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
   17eec:	687b      	ldr	r3, [r7, #4]
   17eee:	3302      	adds	r3, #2
   17ef0:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   17ef2:	687b      	ldr	r3, [r7, #4]
   17ef4:	1c5a      	adds	r2, r3, #1
   17ef6:	607a      	str	r2, [r7, #4]
   17ef8:	781a      	ldrb	r2, [r3, #0]
   17efa:	4b5d      	ldr	r3, [pc, #372]	; (18070 <hciCoreResetSequence+0x2c4>)
   17efc:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.numBufs--;
   17f00:	4b5b      	ldr	r3, [pc, #364]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f02:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   17f06:	3b01      	subs	r3, #1
   17f08:	b2da      	uxtb	r2, r3
   17f0a:	4b59      	ldr	r3, [pc, #356]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f0c:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   17f10:	4b57      	ldr	r3, [pc, #348]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f12:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   17f16:	4b56      	ldr	r3, [pc, #344]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f18:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
   17f1c:	f7fc fe23 	bl	14b66 <HciLeReadSupStatesCmd>
        break;
   17f20:	e098      	b.n	18054 <hciCoreResetSequence+0x2a8>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   17f22:	4b53      	ldr	r3, [pc, #332]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f24:	687a      	ldr	r2, [r7, #4]
   17f26:	33e0      	adds	r3, #224	; 0xe0
   17f28:	6810      	ldr	r0, [r2, #0]
   17f2a:	6851      	ldr	r1, [r2, #4]
   17f2c:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   17f2e:	f7fc fe2d 	bl	14b8c <HciLeReadWhiteListSizeCmd>
        break;
   17f32:	e08f      	b.n	18054 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   17f34:	687b      	ldr	r3, [r7, #4]
   17f36:	1c5a      	adds	r2, r3, #1
   17f38:	607a      	str	r2, [r7, #4]
   17f3a:	781a      	ldrb	r2, [r3, #0]
   17f3c:	4b4c      	ldr	r3, [pc, #304]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f3e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
   17f42:	f7fc fdd7 	bl	14af4 <HciLeReadLocalSupFeatCmd>
        break;
   17f46:	e085      	b.n	18054 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   17f48:	687b      	ldr	r3, [r7, #4]
   17f4a:	781b      	ldrb	r3, [r3, #0]
   17f4c:	b29a      	uxth	r2, r3
   17f4e:	687b      	ldr	r3, [r7, #4]
   17f50:	3301      	adds	r3, #1
   17f52:	781b      	ldrb	r3, [r3, #0]
   17f54:	b29b      	uxth	r3, r3
   17f56:	021b      	lsls	r3, r3, #8
   17f58:	b29b      	uxth	r3, r3
   17f5a:	4413      	add	r3, r2
   17f5c:	b29a      	uxth	r2, r3
   17f5e:	4b44      	ldr	r3, [pc, #272]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f60:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
   17f64:	687b      	ldr	r3, [r7, #4]
   17f66:	3302      	adds	r3, #2
   17f68:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
   17f6a:	f7ff fee1 	bl	17d30 <hciCoreReadResolvingListSize>
        break;
   17f6e:	e071      	b.n	18054 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   17f70:	687b      	ldr	r3, [r7, #4]
   17f72:	1c5a      	adds	r2, r3, #1
   17f74:	607a      	str	r2, [r7, #4]
   17f76:	781a      	ldrb	r2, [r3, #0]
   17f78:	4b3d      	ldr	r3, [pc, #244]	; (18070 <hciCoreResetSequence+0x2c4>)
   17f7a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
   17f7e:	f7ff fef5 	bl	17d6c <hciCoreReadMaxDataLen>
        break;
   17f82:	e067      	b.n	18054 <hciCoreResetSequence+0x2a8>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   17f84:	687b      	ldr	r3, [r7, #4]
   17f86:	781b      	ldrb	r3, [r3, #0]
   17f88:	b29a      	uxth	r2, r3
   17f8a:	687b      	ldr	r3, [r7, #4]
   17f8c:	3301      	adds	r3, #1
   17f8e:	781b      	ldrb	r3, [r3, #0]
   17f90:	b29b      	uxth	r3, r3
   17f92:	021b      	lsls	r3, r3, #8
   17f94:	b29b      	uxth	r3, r3
   17f96:	4413      	add	r3, r2
   17f98:	82bb      	strh	r3, [r7, #20]
   17f9a:	687b      	ldr	r3, [r7, #4]
   17f9c:	3302      	adds	r3, #2
   17f9e:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   17fa0:	687b      	ldr	r3, [r7, #4]
   17fa2:	781b      	ldrb	r3, [r3, #0]
   17fa4:	b29a      	uxth	r2, r3
   17fa6:	687b      	ldr	r3, [r7, #4]
   17fa8:	3301      	adds	r3, #1
   17faa:	781b      	ldrb	r3, [r3, #0]
   17fac:	b29b      	uxth	r3, r3
   17fae:	021b      	lsls	r3, r3, #8
   17fb0:	b29b      	uxth	r3, r3
   17fb2:	4413      	add	r3, r2
   17fb4:	827b      	strh	r3, [r7, #18]
   17fb6:	687b      	ldr	r3, [r7, #4]
   17fb8:	3302      	adds	r3, #2
   17fba:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   17fbc:	8a7a      	ldrh	r2, [r7, #18]
   17fbe:	8abb      	ldrh	r3, [r7, #20]
   17fc0:	4611      	mov	r1, r2
   17fc2:	4618      	mov	r0, r3
   17fc4:	f7fc fc78 	bl	148b8 <HciLeWriteDefDataLen>
        break;
   17fc8:	e044      	b.n	18054 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   17fca:	4b29      	ldr	r3, [pc, #164]	; (18070 <hciCoreResetSequence+0x2c4>)
   17fcc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   17fd0:	2b00      	cmp	r3, #0
   17fd2:	d007      	beq.n	17fe4 <hciCoreResetSequence+0x238>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   17fd4:	4b26      	ldr	r3, [pc, #152]	; (18070 <hciCoreResetSequence+0x2c4>)
   17fd6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   17fda:	8afa      	ldrh	r2, [r7, #22]
   17fdc:	4611      	mov	r1, r2
   17fde:	6878      	ldr	r0, [r7, #4]
   17fe0:	4798      	blx	r3
        break;
   17fe2:	e037      	b.n	18054 <hciCoreResetSequence+0x2a8>
          hciCoreCb.maxAdvDataLen = 0;
   17fe4:	4b22      	ldr	r3, [pc, #136]	; (18070 <hciCoreResetSequence+0x2c4>)
   17fe6:	2200      	movs	r2, #0
   17fe8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
   17fec:	4b20      	ldr	r3, [pc, #128]	; (18070 <hciCoreResetSequence+0x2c4>)
   17fee:	2200      	movs	r2, #0
   17ff0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
   17ff4:	4b1e      	ldr	r3, [pc, #120]	; (18070 <hciCoreResetSequence+0x2c4>)
   17ff6:	2200      	movs	r2, #0
   17ff8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
   17ffc:	f7fc fd54 	bl	14aa8 <HciLeRandCmd>
        break;
   18000:	e028      	b.n	18054 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   18002:	4b1b      	ldr	r3, [pc, #108]	; (18070 <hciCoreResetSequence+0x2c4>)
   18004:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   18008:	2b00      	cmp	r3, #0
   1800a:	d022      	beq.n	18052 <hciCoreResetSequence+0x2a6>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   1800c:	4b18      	ldr	r3, [pc, #96]	; (18070 <hciCoreResetSequence+0x2c4>)
   1800e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   18012:	8afa      	ldrh	r2, [r7, #22]
   18014:	4611      	mov	r1, r2
   18016:	6878      	ldr	r0, [r7, #4]
   18018:	4798      	blx	r3
        break;
   1801a:	e01a      	b.n	18052 <hciCoreResetSequence+0x2a6>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   1801c:	4b0f      	ldr	r3, [pc, #60]	; (1805c <hciCoreResetSequence+0x2b0>)
   1801e:	781b      	ldrb	r3, [r3, #0]
   18020:	2b02      	cmp	r3, #2
   18022:	d808      	bhi.n	18036 <hciCoreResetSequence+0x28a>
          randCnt++;
   18024:	4b0d      	ldr	r3, [pc, #52]	; (1805c <hciCoreResetSequence+0x2b0>)
   18026:	781b      	ldrb	r3, [r3, #0]
   18028:	3301      	adds	r3, #1
   1802a:	b2da      	uxtb	r2, r3
   1802c:	4b0b      	ldr	r3, [pc, #44]	; (1805c <hciCoreResetSequence+0x2b0>)
   1802e:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   18030:	f7fc fd3a 	bl	14aa8 <HciLeRandCmd>
        break;
   18034:	e00e      	b.n	18054 <hciCoreResetSequence+0x2a8>
          hciCb.resetting = FALSE;
   18036:	4b0f      	ldr	r3, [pc, #60]	; (18074 <hciCoreResetSequence+0x2c8>)
   18038:	2200      	movs	r2, #0
   1803a:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   1803c:	2300      	movs	r3, #0
   1803e:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   18040:	2300      	movs	r3, #0
   18042:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   18044:	4b0b      	ldr	r3, [pc, #44]	; (18074 <hciCoreResetSequence+0x2c8>)
   18046:	689b      	ldr	r3, [r3, #8]
   18048:	f107 020c 	add.w	r2, r7, #12
   1804c:	4610      	mov	r0, r2
   1804e:	4798      	blx	r3
        break;
   18050:	e000      	b.n	18054 <hciCoreResetSequence+0x2a8>
        break;
   18052:	bf00      	nop
    }
  }
}
   18054:	bf00      	nop
   18056:	3718      	adds	r7, #24
   18058:	46bd      	mov	sp, r7
   1805a:	bd80      	pop	{r7, pc}
   1805c:	1000420c 	.word	0x1000420c
   18060:	00026b18 	.word	0x00026b18
   18064:	00026b20 	.word	0x00026b20
   18068:	00026b28 	.word	0x00026b28
   1806c:	1000946c 	.word	0x1000946c
   18070:	10009384 	.word	0x10009384
   18074:	10009e2c 	.word	0x10009e2c

00018078 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   18078:	b480      	push	{r7}
   1807a:	b083      	sub	sp, #12
   1807c:	af00      	add	r7, sp, #0
   1807e:	4603      	mov	r3, r0
   18080:	6039      	str	r1, [r7, #0]
   18082:	80fb      	strh	r3, [r7, #6]
   18084:	4613      	mov	r3, r2
   18086:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   18088:	2312      	movs	r3, #18
}
   1808a:	4618      	mov	r0, r3
   1808c:	370c      	adds	r7, #12
   1808e:	46bd      	mov	sp, r7
   18090:	f85d 7b04 	ldr.w	r7, [sp], #4
   18094:	4770      	bx	lr

00018096 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   18096:	b480      	push	{r7}
   18098:	b083      	sub	sp, #12
   1809a:	af00      	add	r7, sp, #0
   1809c:	4603      	mov	r3, r0
   1809e:	71fb      	strb	r3, [r7, #7]

}
   180a0:	bf00      	nop
   180a2:	370c      	adds	r7, #12
   180a4:	46bd      	mov	sp, r7
   180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   180aa:	4770      	bx	lr

000180ac <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   180ac:	b480      	push	{r7}
   180ae:	b083      	sub	sp, #12
   180b0:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
   180b2:	4b0e      	ldr	r3, [pc, #56]	; (180ec <getNextToken+0x40>)
   180b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   180b8:	1c5a      	adds	r2, r3, #1
   180ba:	b2d1      	uxtb	r1, r2
   180bc:	4a0b      	ldr	r2, [pc, #44]	; (180ec <getNextToken+0x40>)
   180be:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   180c2:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
   180c4:	79fb      	ldrb	r3, [r7, #7]
   180c6:	2bff      	cmp	r3, #255	; 0xff
   180c8:	d108      	bne.n	180dc <getNextToken+0x30>
  {
    token = secCb.token++;
   180ca:	4b08      	ldr	r3, [pc, #32]	; (180ec <getNextToken+0x40>)
   180cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   180d0:	1c5a      	adds	r2, r3, #1
   180d2:	b2d1      	uxtb	r1, r2
   180d4:	4a05      	ldr	r2, [pc, #20]	; (180ec <getNextToken+0x40>)
   180d6:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   180da:	71fb      	strb	r3, [r7, #7]
  }

  return token;
   180dc:	79fb      	ldrb	r3, [r7, #7]
}
   180de:	4618      	mov	r0, r3
   180e0:	370c      	adds	r7, #12
   180e2:	46bd      	mov	sp, r7
   180e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   180e8:	4770      	bx	lr
   180ea:	bf00      	nop
   180ec:	10009498 	.word	0x10009498

000180f0 <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   180f0:	b580      	push	{r7, lr}
   180f2:	b086      	sub	sp, #24
   180f4:	af00      	add	r7, sp, #0
   180f6:	60f8      	str	r0, [r7, #12]
   180f8:	60b9      	str	r1, [r7, #8]
   180fa:	4611      	mov	r1, r2
   180fc:	461a      	mov	r2, r3
   180fe:	460b      	mov	r3, r1
   18100:	71fb      	strb	r3, [r7, #7]
   18102:	4613      	mov	r3, r2
   18104:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   18106:	2030      	movs	r0, #48	; 0x30
   18108:	f002 fc11 	bl	1a92e <WsfMsgAlloc>
   1810c:	6178      	str	r0, [r7, #20]
   1810e:	697b      	ldr	r3, [r7, #20]
   18110:	2b00      	cmp	r3, #0
   18112:	d01d      	beq.n	18150 <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
   18114:	f7ff ffca 	bl	180ac <getNextToken>
   18118:	4603      	mov	r3, r0
   1811a:	461a      	mov	r2, r3
   1811c:	697b      	ldr	r3, [r7, #20]
   1811e:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   18120:	697b      	ldr	r3, [r7, #20]
   18122:	88ba      	ldrh	r2, [r7, #4]
   18124:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   18126:	697b      	ldr	r3, [r7, #20]
   18128:	f897 2020 	ldrb.w	r2, [r7, #32]
   1812c:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
   1812e:	697b      	ldr	r3, [r7, #20]
   18130:	2200      	movs	r2, #0
   18132:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   18136:	79fb      	ldrb	r3, [r7, #7]
   18138:	697a      	ldr	r2, [r7, #20]
   1813a:	4619      	mov	r1, r3
   1813c:	4807      	ldr	r0, [pc, #28]	; (1815c <SecAes+0x6c>)
   1813e:	f002 fc32 	bl	1a9a6 <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   18142:	68b9      	ldr	r1, [r7, #8]
   18144:	68f8      	ldr	r0, [r7, #12]
   18146:	f7fc fc38 	bl	149ba <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   1814a:	697b      	ldr	r3, [r7, #20]
   1814c:	78db      	ldrb	r3, [r3, #3]
   1814e:	e000      	b.n	18152 <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
   18150:	23ff      	movs	r3, #255	; 0xff
}
   18152:	4618      	mov	r0, r3
   18154:	3718      	adds	r7, #24
   18156:	46bd      	mov	sp, r7
   18158:	bd80      	pop	{r7, pc}
   1815a:	bf00      	nop
   1815c:	100094b8 	.word	0x100094b8

00018160 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   18160:	b580      	push	{r7, lr}
   18162:	b086      	sub	sp, #24
   18164:	af00      	add	r7, sp, #0
   18166:	60f8      	str	r0, [r7, #12]
   18168:	60b9      	str	r1, [r7, #8]
   1816a:	4613      	mov	r3, r2
   1816c:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   1816e:	68fb      	ldr	r3, [r7, #12]
   18170:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   18172:	68fb      	ldr	r3, [r7, #12]
   18174:	f103 0208 	add.w	r2, r3, #8
   18178:	697b      	ldr	r3, [r7, #20]
   1817a:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   1817c:	697b      	ldr	r3, [r7, #20]
   1817e:	685a      	ldr	r2, [r3, #4]
   18180:	68bb      	ldr	r3, [r7, #8]
   18182:	3305      	adds	r3, #5
   18184:	4619      	mov	r1, r3
   18186:	4610      	mov	r0, r2
   18188:	f001 fd87 	bl	19c9a <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   1818c:	79fb      	ldrb	r3, [r7, #7]
   1818e:	6979      	ldr	r1, [r7, #20]
   18190:	4618      	mov	r0, r3
   18192:	f002 fbf0 	bl	1a976 <WsfMsgSend>
}
   18196:	bf00      	nop
   18198:	3718      	adds	r7, #24
   1819a:	46bd      	mov	sp, r7
   1819c:	bd80      	pop	{r7, pc}
	...

000181a0 <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
   181a0:	b480      	push	{r7}
   181a2:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   181a4:	4b03      	ldr	r3, [pc, #12]	; (181b4 <SecAesInit+0x14>)
   181a6:	4a04      	ldr	r2, [pc, #16]	; (181b8 <SecAesInit+0x18>)
   181a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
   181aa:	bf00      	nop
   181ac:	46bd      	mov	sp, r7
   181ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   181b2:	4770      	bx	lr
   181b4:	10009498 	.word	0x10009498
   181b8:	00018161 	.word	0x00018161

000181bc <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   181bc:	b580      	push	{r7, lr}
   181be:	b08a      	sub	sp, #40	; 0x28
   181c0:	af00      	add	r7, sp, #0
   181c2:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   181c4:	687b      	ldr	r3, [r7, #4]
   181c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   181c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   181ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   181cc:	681b      	ldr	r3, [r3, #0]
   181ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   181d0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   181d2:	4413      	add	r3, r2
   181d4:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
   181d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   181d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   181da:	b2da      	uxtb	r2, r3
   181dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   181de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   181e0:	b2db      	uxtb	r3, r3
   181e2:	1ad3      	subs	r3, r2, r3
   181e4:	b2db      	uxtb	r3, r3
   181e6:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   181e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
   181ec:	2b10      	cmp	r3, #16
   181ee:	dc2d      	bgt.n	1824c <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   181f0:	f107 030c 	add.w	r3, r7, #12
   181f4:	2210      	movs	r2, #16
   181f6:	6a39      	ldr	r1, [r7, #32]
   181f8:	4618      	mov	r0, r3
   181fa:	f001 fd89 	bl	19d10 <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   181fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18202:	2b10      	cmp	r3, #16
   18204:	d014      	beq.n	18230 <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
   18206:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1820a:	f1c3 0310 	rsb	r3, r3, #16
   1820e:	461a      	mov	r2, r3
   18210:	f107 030c 	add.w	r3, r7, #12
   18214:	2100      	movs	r1, #0
   18216:	4618      	mov	r0, r3
   18218:	f7f4 f8a0 	bl	c35c <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
   1821c:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18220:	f1c3 030f 	rsb	r3, r3, #15
   18224:	f107 0228 	add.w	r2, r7, #40	; 0x28
   18228:	4413      	add	r3, r2
   1822a:	2280      	movs	r2, #128	; 0x80
   1822c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
   18230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18232:	f103 0214 	add.w	r2, r3, #20
   18236:	f107 030c 	add.w	r3, r7, #12
   1823a:	4611      	mov	r1, r2
   1823c:	4618      	mov	r0, r3
   1823e:	f001 fd48 	bl	19cd2 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   18242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18244:	2202      	movs	r2, #2
   18246:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   1824a:	e006      	b.n	1825a <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   1824c:	f107 030c 	add.w	r3, r7, #12
   18250:	2210      	movs	r2, #16
   18252:	6a39      	ldr	r1, [r7, #32]
   18254:	4618      	mov	r0, r3
   18256:	f001 fd5b 	bl	19d10 <WStrReverseCpy>
  }

  if (pCmac->position != 0)
   1825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1825c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1825e:	2b00      	cmp	r3, #0
   18260:	d008      	beq.n	18274 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
   18262:	687b      	ldr	r3, [r7, #4]
   18264:	f103 0208 	add.w	r2, r3, #8
   18268:	f107 030c 	add.w	r3, r7, #12
   1826c:	4611      	mov	r1, r2
   1826e:	4618      	mov	r0, r3
   18270:	f001 fd2f 	bl	19cd2 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   18274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18276:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18278:	3310      	adds	r3, #16
   1827a:	b29a      	uxth	r2, r3
   1827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1827e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   18280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   18286:	687a      	ldr	r2, [r7, #4]
   18288:	4619      	mov	r1, r3
   1828a:	4807      	ldr	r0, [pc, #28]	; (182a8 <secCmacProcessBlock+0xec>)
   1828c:	f002 fb8b 	bl	1a9a6 <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   18290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18292:	3304      	adds	r3, #4
   18294:	f107 020c 	add.w	r2, r7, #12
   18298:	4611      	mov	r1, r2
   1829a:	4618      	mov	r0, r3
   1829c:	f7fc fb8d 	bl	149ba <HciLeEncryptCmd>
}
   182a0:	bf00      	nop
   182a2:	3728      	adds	r7, #40	; 0x28
   182a4:	46bd      	mov	sp, r7
   182a6:	bd80      	pop	{r7, pc}
   182a8:	100094b8 	.word	0x100094b8

000182ac <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   182ac:	b580      	push	{r7, lr}
   182ae:	b088      	sub	sp, #32
   182b0:	af00      	add	r7, sp, #0
   182b2:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   182b4:	687b      	ldr	r3, [r7, #4]
   182b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   182b8:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   182ba:	f107 030c 	add.w	r3, r7, #12
   182be:	2210      	movs	r2, #16
   182c0:	2100      	movs	r1, #0
   182c2:	4618      	mov	r0, r3
   182c4:	f7f4 f84a 	bl	c35c <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   182c8:	69fb      	ldr	r3, [r7, #28]
   182ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   182ce:	687a      	ldr	r2, [r7, #4]
   182d0:	4619      	mov	r1, r3
   182d2:	4807      	ldr	r0, [pc, #28]	; (182f0 <secCmacGenSubkey1+0x44>)
   182d4:	f002 fb67 	bl	1a9a6 <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   182d8:	69fb      	ldr	r3, [r7, #28]
   182da:	3304      	adds	r3, #4
   182dc:	f107 020c 	add.w	r2, r7, #12
   182e0:	4611      	mov	r1, r2
   182e2:	4618      	mov	r0, r3
   182e4:	f7fc fb69 	bl	149ba <HciLeEncryptCmd>
}
   182e8:	bf00      	nop
   182ea:	3720      	adds	r7, #32
   182ec:	46bd      	mov	sp, r7
   182ee:	bd80      	pop	{r7, pc}
   182f0:	100094b8 	.word	0x100094b8

000182f4 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   182f4:	b480      	push	{r7}
   182f6:	b085      	sub	sp, #20
   182f8:	af00      	add	r7, sp, #0
   182fa:	6078      	str	r0, [r7, #4]
   182fc:	460b      	mov	r3, r1
   182fe:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
   18300:	2300      	movs	r3, #0
   18302:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   18304:	2300      	movs	r3, #0
   18306:	73fb      	strb	r3, [r7, #15]
   18308:	e021      	b.n	1834e <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
   1830a:	7bfb      	ldrb	r3, [r7, #15]
   1830c:	687a      	ldr	r2, [r7, #4]
   1830e:	4413      	add	r3, r2
   18310:	781b      	ldrb	r3, [r3, #0]
   18312:	461a      	mov	r2, r3
   18314:	78fb      	ldrb	r3, [r7, #3]
   18316:	f1c3 0308 	rsb	r3, r3, #8
   1831a:	fa42 f303 	asr.w	r3, r2, r3
   1831e:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
   18320:	7bfb      	ldrb	r3, [r7, #15]
   18322:	687a      	ldr	r2, [r7, #4]
   18324:	4413      	add	r3, r2
   18326:	7bfa      	ldrb	r2, [r7, #15]
   18328:	6879      	ldr	r1, [r7, #4]
   1832a:	440a      	add	r2, r1
   1832c:	7812      	ldrb	r2, [r2, #0]
   1832e:	4611      	mov	r1, r2
   18330:	78fa      	ldrb	r2, [r7, #3]
   18332:	fa01 f202 	lsl.w	r2, r1, r2
   18336:	b251      	sxtb	r1, r2
   18338:	f997 200e 	ldrsb.w	r2, [r7, #14]
   1833c:	430a      	orrs	r2, r1
   1833e:	b252      	sxtb	r2, r2
   18340:	b2d2      	uxtb	r2, r2
   18342:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
   18344:	7b7b      	ldrb	r3, [r7, #13]
   18346:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   18348:	7bfb      	ldrb	r3, [r7, #15]
   1834a:	3301      	adds	r3, #1
   1834c:	73fb      	strb	r3, [r7, #15]
   1834e:	7bfb      	ldrb	r3, [r7, #15]
   18350:	2b0f      	cmp	r3, #15
   18352:	d9da      	bls.n	1830a <secCmacKeyShift+0x16>
  }

  return prevBits;
   18354:	7bbb      	ldrb	r3, [r7, #14]
}
   18356:	4618      	mov	r0, r3
   18358:	3714      	adds	r7, #20
   1835a:	46bd      	mov	sp, r7
   1835c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18360:	4770      	bx	lr

00018362 <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   18362:	b580      	push	{r7, lr}
   18364:	b084      	sub	sp, #16
   18366:	af00      	add	r7, sp, #0
   18368:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1836a:	687b      	ldr	r3, [r7, #4]
   1836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1836e:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   18370:	68fb      	ldr	r3, [r7, #12]
   18372:	f103 0214 	add.w	r2, r3, #20
   18376:	687b      	ldr	r3, [r7, #4]
   18378:	3308      	adds	r3, #8
   1837a:	4619      	mov	r1, r3
   1837c:	4610      	mov	r0, r2
   1837e:	f001 fc8c 	bl	19c9a <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   18382:	68fb      	ldr	r3, [r7, #12]
   18384:	3314      	adds	r3, #20
   18386:	2101      	movs	r1, #1
   18388:	4618      	mov	r0, r3
   1838a:	f7ff ffb3 	bl	182f4 <secCmacKeyShift>
   1838e:	4603      	mov	r3, r0
   18390:	72fb      	strb	r3, [r7, #11]

  if (overflow)
   18392:	7afb      	ldrb	r3, [r7, #11]
   18394:	2b00      	cmp	r3, #0
   18396:	d007      	beq.n	183a8 <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
   18398:	68fb      	ldr	r3, [r7, #12]
   1839a:	7d1b      	ldrb	r3, [r3, #20]
   1839c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   183a0:	43db      	mvns	r3, r3
   183a2:	b2da      	uxtb	r2, r3
   183a4:	68fb      	ldr	r3, [r7, #12]
   183a6:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   183a8:	68fb      	ldr	r3, [r7, #12]
   183aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   183ac:	f003 030f 	and.w	r3, r3, #15
   183b0:	b29b      	uxth	r3, r3
   183b2:	2b00      	cmp	r3, #0
   183b4:	d012      	beq.n	183dc <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   183b6:	68fb      	ldr	r3, [r7, #12]
   183b8:	3314      	adds	r3, #20
   183ba:	2101      	movs	r1, #1
   183bc:	4618      	mov	r0, r3
   183be:	f7ff ff99 	bl	182f4 <secCmacKeyShift>
   183c2:	4603      	mov	r3, r0
   183c4:	72fb      	strb	r3, [r7, #11]

    if (overflow)
   183c6:	7afb      	ldrb	r3, [r7, #11]
   183c8:	2b00      	cmp	r3, #0
   183ca:	d007      	beq.n	183dc <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
   183cc:	68fb      	ldr	r3, [r7, #12]
   183ce:	7d1b      	ldrb	r3, [r3, #20]
   183d0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   183d4:	43db      	mvns	r3, r3
   183d6:	b2da      	uxtb	r2, r3
   183d8:	68fb      	ldr	r3, [r7, #12]
   183da:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   183dc:	68fb      	ldr	r3, [r7, #12]
   183de:	2201      	movs	r2, #1
   183e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   183e4:	6878      	ldr	r0, [r7, #4]
   183e6:	f7ff fee9 	bl	181bc <secCmacProcessBlock>
}
   183ea:	bf00      	nop
   183ec:	3710      	adds	r7, #16
   183ee:	46bd      	mov	sp, r7
   183f0:	bd80      	pop	{r7, pc}

000183f2 <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   183f2:	b580      	push	{r7, lr}
   183f4:	b084      	sub	sp, #16
   183f6:	af00      	add	r7, sp, #0
   183f8:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   183fa:	687b      	ldr	r3, [r7, #4]
   183fc:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   183fe:	687b      	ldr	r3, [r7, #4]
   18400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18402:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
   18404:	687b      	ldr	r3, [r7, #4]
   18406:	3308      	adds	r3, #8
   18408:	2110      	movs	r1, #16
   1840a:	4618      	mov	r0, r3
   1840c:	f001 fca9 	bl	19d62 <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
   18410:	687b      	ldr	r3, [r7, #4]
   18412:	f103 0208 	add.w	r2, r3, #8
   18416:	68fb      	ldr	r3, [r7, #12]
   18418:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
   1841a:	68bb      	ldr	r3, [r7, #8]
   1841c:	681b      	ldr	r3, [r3, #0]
   1841e:	4618      	mov	r0, r3
   18420:	f002 fa36 	bl	1a890 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
   18424:	68bb      	ldr	r3, [r7, #8]
   18426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1842a:	68f9      	ldr	r1, [r7, #12]
   1842c:	4618      	mov	r0, r3
   1842e:	f002 faa2 	bl	1a976 <WsfMsgSend>
}
   18432:	bf00      	nop
   18434:	3710      	adds	r7, #16
   18436:	46bd      	mov	sp, r7
   18438:	bd80      	pop	{r7, pc}

0001843a <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1843a:	b580      	push	{r7, lr}
   1843c:	b086      	sub	sp, #24
   1843e:	af00      	add	r7, sp, #0
   18440:	60f8      	str	r0, [r7, #12]
   18442:	60b9      	str	r1, [r7, #8]
   18444:	4613      	mov	r3, r2
   18446:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   18448:	68fb      	ldr	r3, [r7, #12]
   1844a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1844c:	617b      	str	r3, [r7, #20]

  if (pCmac)
   1844e:	697b      	ldr	r3, [r7, #20]
   18450:	2b00      	cmp	r3, #0
   18452:	d01e      	beq.n	18492 <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   18454:	68fb      	ldr	r3, [r7, #12]
   18456:	f103 0208 	add.w	r2, r3, #8
   1845a:	68bb      	ldr	r3, [r7, #8]
   1845c:	3305      	adds	r3, #5
   1845e:	4619      	mov	r1, r3
   18460:	4610      	mov	r0, r2
   18462:	f001 fc1a 	bl	19c9a <Calc128Cpy>

    switch (pCmac->state)
   18466:	697b      	ldr	r3, [r7, #20]
   18468:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1846c:	2b01      	cmp	r3, #1
   1846e:	d008      	beq.n	18482 <SecCmacHciCback+0x48>
   18470:	2b02      	cmp	r3, #2
   18472:	d00a      	beq.n	1848a <SecCmacHciCback+0x50>
   18474:	2b00      	cmp	r3, #0
   18476:	d000      	beq.n	1847a <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   18478:	e00b      	b.n	18492 <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
   1847a:	68f8      	ldr	r0, [r7, #12]
   1847c:	f7ff ff71 	bl	18362 <secCmacGenSubkey2>
      break;
   18480:	e007      	b.n	18492 <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
   18482:	68f8      	ldr	r0, [r7, #12]
   18484:	f7ff fe9a 	bl	181bc <secCmacProcessBlock>
      break;
   18488:	e003      	b.n	18492 <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
   1848a:	68f8      	ldr	r0, [r7, #12]
   1848c:	f7ff ffb1 	bl	183f2 <secCmacComplete>
      break;
   18490:	bf00      	nop
}
   18492:	bf00      	nop
   18494:	3718      	adds	r7, #24
   18496:	46bd      	mov	sp, r7
   18498:	bd80      	pop	{r7, pc}
	...

0001849c <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1849c:	b580      	push	{r7, lr}
   1849e:	b088      	sub	sp, #32
   184a0:	af00      	add	r7, sp, #0
   184a2:	60f8      	str	r0, [r7, #12]
   184a4:	60b9      	str	r1, [r7, #8]
   184a6:	4611      	mov	r1, r2
   184a8:	461a      	mov	r2, r3
   184aa:	460b      	mov	r3, r1
   184ac:	71fb      	strb	r3, [r7, #7]
   184ae:	4613      	mov	r3, r2
   184b0:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   184b2:	235c      	movs	r3, #92	; 0x5c
   184b4:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   184b6:	8bfb      	ldrh	r3, [r7, #30]
   184b8:	4618      	mov	r0, r3
   184ba:	f002 fa38 	bl	1a92e <WsfMsgAlloc>
   184be:	61b8      	str	r0, [r7, #24]
   184c0:	69bb      	ldr	r3, [r7, #24]
   184c2:	2b00      	cmp	r3, #0
   184c4:	d038      	beq.n	18538 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   184c6:	69bb      	ldr	r3, [r7, #24]
   184c8:	3330      	adds	r3, #48	; 0x30
   184ca:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   184cc:	69bb      	ldr	r3, [r7, #24]
   184ce:	697a      	ldr	r2, [r7, #20]
   184d0:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
   184d2:	69bb      	ldr	r3, [r7, #24]
   184d4:	2201      	movs	r2, #1
   184d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
   184da:	4b1a      	ldr	r3, [pc, #104]	; (18544 <SecCmac+0xa8>)
   184dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   184e0:	1c5a      	adds	r2, r3, #1
   184e2:	b2d1      	uxtb	r1, r2
   184e4:	4a17      	ldr	r2, [pc, #92]	; (18544 <SecCmac+0xa8>)
   184e6:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   184ea:	69ba      	ldr	r2, [r7, #24]
   184ec:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   184ee:	69bb      	ldr	r3, [r7, #24]
   184f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   184f2:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   184f4:	69bb      	ldr	r3, [r7, #24]
   184f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   184fa:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   184fc:	697b      	ldr	r3, [r7, #20]
   184fe:	68ba      	ldr	r2, [r7, #8]
   18500:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   18502:	79fb      	ldrb	r3, [r7, #7]
   18504:	b29a      	uxth	r2, r3
   18506:	697b      	ldr	r3, [r7, #20]
   18508:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   1850a:	697b      	ldr	r3, [r7, #20]
   1850c:	2200      	movs	r2, #0
   1850e:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   18510:	697b      	ldr	r3, [r7, #20]
   18512:	79ba      	ldrb	r2, [r7, #6]
   18514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   18518:	697b      	ldr	r3, [r7, #20]
   1851a:	2200      	movs	r2, #0
   1851c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
   18520:	697b      	ldr	r3, [r7, #20]
   18522:	3304      	adds	r3, #4
   18524:	2210      	movs	r2, #16
   18526:	68f9      	ldr	r1, [r7, #12]
   18528:	4618      	mov	r0, r3
   1852a:	f001 fbf1 	bl	19d10 <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   1852e:	69b8      	ldr	r0, [r7, #24]
   18530:	f7ff febc 	bl	182ac <secCmacGenSubkey1>

    return TRUE;
   18534:	2301      	movs	r3, #1
   18536:	e000      	b.n	1853a <SecCmac+0x9e>
  }

  return FALSE;
   18538:	2300      	movs	r3, #0
}
   1853a:	4618      	mov	r0, r3
   1853c:	3720      	adds	r7, #32
   1853e:	46bd      	mov	sp, r7
   18540:	bd80      	pop	{r7, pc}
   18542:	bf00      	nop
   18544:	10009498 	.word	0x10009498

00018548 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
   18548:	b480      	push	{r7}
   1854a:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   1854c:	4b03      	ldr	r3, [pc, #12]	; (1855c <SecCmacInit+0x14>)
   1854e:	4a04      	ldr	r2, [pc, #16]	; (18560 <SecCmacInit+0x18>)
   18550:	631a      	str	r2, [r3, #48]	; 0x30
}
   18552:	bf00      	nop
   18554:	46bd      	mov	sp, r7
   18556:	f85d 7b04 	ldr.w	r7, [sp], #4
   1855a:	4770      	bx	lr
   1855c:	10009498 	.word	0x10009498
   18560:	0001843b 	.word	0x0001843b

00018564 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   18564:	b580      	push	{r7, lr}
   18566:	b086      	sub	sp, #24
   18568:	af00      	add	r7, sp, #0
   1856a:	60f8      	str	r0, [r7, #12]
   1856c:	60b9      	str	r1, [r7, #8]
   1856e:	4613      	mov	r3, r2
   18570:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
   18572:	68fb      	ldr	r3, [r7, #12]
   18574:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
   18576:	68bb      	ldr	r3, [r7, #8]
   18578:	789b      	ldrb	r3, [r3, #2]
   1857a:	2b25      	cmp	r3, #37	; 0x25
   1857c:	d11b      	bne.n	185b6 <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
   1857e:	697b      	ldr	r3, [r7, #20]
   18580:	1d18      	adds	r0, r3, #4
   18582:	68bb      	ldr	r3, [r7, #8]
   18584:	3305      	adds	r3, #5
   18586:	2220      	movs	r2, #32
   18588:	4619      	mov	r1, r3
   1858a:	f001 fbc1 	bl	19d10 <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
   1858e:	697b      	ldr	r3, [r7, #20]
   18590:	f103 0024 	add.w	r0, r3, #36	; 0x24
   18594:	68bb      	ldr	r3, [r7, #8]
   18596:	3305      	adds	r3, #5
   18598:	3320      	adds	r3, #32
   1859a:	2220      	movs	r2, #32
   1859c:	4619      	mov	r1, r3
   1859e:	f001 fbb7 	bl	19d10 <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
   185a2:	68bb      	ldr	r3, [r7, #8]
   185a4:	791a      	ldrb	r2, [r3, #4]
   185a6:	697b      	ldr	r3, [r7, #20]
   185a8:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   185aa:	79fb      	ldrb	r3, [r7, #7]
   185ac:	6979      	ldr	r1, [r7, #20]
   185ae:	4618      	mov	r0, r3
   185b0:	f002 f9e1 	bl	1a976 <WsfMsgSend>
    }
    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
   185b4:	e01f      	b.n	185f6 <SecEccHciCback+0x92>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   185b6:	68bb      	ldr	r3, [r7, #8]
   185b8:	789b      	ldrb	r3, [r3, #2]
   185ba:	2b26      	cmp	r3, #38	; 0x26
   185bc:	d11b      	bne.n	185f6 <SecEccHciCback+0x92>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
   185be:	697b      	ldr	r3, [r7, #20]
   185c0:	1d18      	adds	r0, r3, #4
   185c2:	68bb      	ldr	r3, [r7, #8]
   185c4:	3305      	adds	r3, #5
   185c6:	2220      	movs	r2, #32
   185c8:	4619      	mov	r1, r3
   185ca:	f001 fba1 	bl	19d10 <WStrReverseCpy>
    if(pEvent->leGenDHKey.status != HCI_SUCCESS) {
   185ce:	68bb      	ldr	r3, [r7, #8]
   185d0:	791b      	ldrb	r3, [r3, #4]
   185d2:	2b00      	cmp	r3, #0
   185d4:	d006      	beq.n	185e4 <SecEccHciCback+0x80>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   185d6:	697b      	ldr	r3, [r7, #20]
   185d8:	3304      	adds	r3, #4
   185da:	2220      	movs	r2, #32
   185dc:	21ff      	movs	r1, #255	; 0xff
   185de:	4618      	mov	r0, r3
   185e0:	f7f3 febc 	bl	c35c <memset>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
   185e4:	68bb      	ldr	r3, [r7, #8]
   185e6:	791a      	ldrb	r2, [r3, #4]
   185e8:	697b      	ldr	r3, [r7, #20]
   185ea:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   185ec:	79fb      	ldrb	r3, [r7, #7]
   185ee:	6979      	ldr	r1, [r7, #20]
   185f0:	4618      	mov	r0, r3
   185f2:	f002 f9c0 	bl	1a976 <WsfMsgSend>
}
   185f6:	bf00      	nop
   185f8:	3718      	adds	r7, #24
   185fa:	46bd      	mov	sp, r7
   185fc:	bd80      	pop	{r7, pc}
	...

00018600 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   18600:	b580      	push	{r7, lr}
   18602:	b084      	sub	sp, #16
   18604:	af00      	add	r7, sp, #0
   18606:	4603      	mov	r3, r0
   18608:	71fb      	strb	r3, [r7, #7]
   1860a:	460b      	mov	r3, r1
   1860c:	80bb      	strh	r3, [r7, #4]
   1860e:	4613      	mov	r3, r2
   18610:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   18612:	2394      	movs	r3, #148	; 0x94
   18614:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   18616:	89fb      	ldrh	r3, [r7, #14]
   18618:	4618      	mov	r0, r3
   1861a:	f002 f988 	bl	1a92e <WsfMsgAlloc>
   1861e:	60b8      	str	r0, [r7, #8]
   18620:	68bb      	ldr	r3, [r7, #8]
   18622:	2b00      	cmp	r3, #0
   18624:	d013      	beq.n	1864e <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   18626:	68bb      	ldr	r3, [r7, #8]
   18628:	88ba      	ldrh	r2, [r7, #4]
   1862a:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1862c:	68bb      	ldr	r3, [r7, #8]
   1862e:	79ba      	ldrb	r2, [r7, #6]
   18630:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   18632:	68bb      	ldr	r3, [r7, #8]
   18634:	2202      	movs	r2, #2
   18636:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1863a:	79fb      	ldrb	r3, [r7, #7]
   1863c:	68ba      	ldr	r2, [r7, #8]
   1863e:	4619      	mov	r1, r3
   18640:	4805      	ldr	r0, [pc, #20]	; (18658 <SecEccGenKey+0x58>)
   18642:	f002 f9b0 	bl	1a9a6 <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
   18646:	f7fc f96e 	bl	14926 <HciLeReadLocalP256PubKey>

    return TRUE;
   1864a:	2301      	movs	r3, #1
   1864c:	e000      	b.n	18650 <SecEccGenKey+0x50>
  }

  return FALSE;
   1864e:	2300      	movs	r3, #0
}
   18650:	4618      	mov	r0, r3
   18652:	3710      	adds	r7, #16
   18654:	46bd      	mov	sp, r7
   18656:	bd80      	pop	{r7, pc}
   18658:	100094b8 	.word	0x100094b8

0001865c <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1865c:	b580      	push	{r7, lr}
   1865e:	b09e      	sub	sp, #120	; 0x78
   18660:	af00      	add	r7, sp, #0
   18662:	6078      	str	r0, [r7, #4]
   18664:	4608      	mov	r0, r1
   18666:	4611      	mov	r1, r2
   18668:	461a      	mov	r2, r3
   1866a:	4603      	mov	r3, r0
   1866c:	70fb      	strb	r3, [r7, #3]
   1866e:	460b      	mov	r3, r1
   18670:	803b      	strh	r3, [r7, #0]
   18672:	4613      	mov	r3, r2
   18674:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   18676:	2394      	movs	r3, #148	; 0x94
   18678:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1867c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   18680:	4618      	mov	r0, r3
   18682:	f002 f954 	bl	1a92e <WsfMsgAlloc>
   18686:	6738      	str	r0, [r7, #112]	; 0x70
   18688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1868a:	2b00      	cmp	r3, #0
   1868c:	d060      	beq.n	18750 <SecEccGenSharedSecret+0xf4>
  {
	  secEccKey_t           temp_ecc_key;

    /* Reverse keys (to little endian) */
    WStrReverseCpy(temp_ecc_key.pubKey_x, pKey->pubKey_x, SEC_ECC_KEY_LEN);
   1868e:	6879      	ldr	r1, [r7, #4]
   18690:	f107 030c 	add.w	r3, r7, #12
   18694:	2220      	movs	r2, #32
   18696:	4618      	mov	r0, r3
   18698:	f001 fb3a 	bl	19d10 <WStrReverseCpy>
    WStrReverseCpy(temp_ecc_key.pubKey_y, pKey->pubKey_y, SEC_ECC_KEY_LEN);
   1869c:	687b      	ldr	r3, [r7, #4]
   1869e:	f103 0120 	add.w	r1, r3, #32
   186a2:	f107 030c 	add.w	r3, r7, #12
   186a6:	3320      	adds	r3, #32
   186a8:	2220      	movs	r2, #32
   186aa:	4618      	mov	r0, r3
   186ac:	f001 fb30 	bl	19d10 <WStrReverseCpy>
	
    #if defined(AM_PART_APOLLO) || defined(AM_PART_APOLLO2)
    {
    #else
    if(!APOLLO3_B0) 
   186b0:	4b2a      	ldr	r3, [pc, #168]	; (1875c <SecEccGenSharedSecret+0x100>)
   186b2:	68db      	ldr	r3, [r3, #12]
   186b4:	b2db      	uxtb	r3, r3
   186b6:	2b21      	cmp	r3, #33	; 0x21
   186b8:	d02e      	beq.n	18718 <SecEccGenSharedSecret+0xbc>
    {
    #endif
      // at this time only B0 has fix for the security vulnerability.
      if(!uECC_valid_public_key(temp_ecc_key.pubKey_x, uECC_secp256r1()))
   186ba:	f00c fd39 	bl	25130 <uECC_secp256r1>
   186be:	4602      	mov	r2, r0
   186c0:	f107 030c 	add.w	r3, r7, #12
   186c4:	4611      	mov	r1, r2
   186c6:	4618      	mov	r0, r3
   186c8:	f00c fdac 	bl	25224 <uECC_valid_public_key>
   186cc:	4603      	mov	r3, r0
   186ce:	2b00      	cmp	r3, #0
   186d0:	d122      	bne.n	18718 <SecEccGenSharedSecret+0xbc>
      {

        WsfMsgFree(pBuf);
   186d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
   186d4:	f002 f942 	bl	1a95c <WsfMsgFree>

        secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   186d8:	2064      	movs	r0, #100	; 0x64
   186da:	f002 f928 	bl	1a92e <WsfMsgAlloc>
   186de:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (pMsg)
   186e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   186e2:	2b00      	cmp	r3, #0
   186e4:	d016      	beq.n	18714 <SecEccGenSharedSecret+0xb8>
        {
          // set invalid shared key as suggested by the security errata
          memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   186e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   186e8:	3304      	adds	r3, #4
   186ea:	2220      	movs	r2, #32
   186ec:	21ff      	movs	r1, #255	; 0xff
   186ee:	4618      	mov	r0, r3
   186f0:	f7f3 fe34 	bl	c35c <memset>
          /* Send shared secret to handler */  
          pMsg->hdr.event = event;
   186f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   186f6:	78ba      	ldrb	r2, [r7, #2]
   186f8:	709a      	strb	r2, [r3, #2]
          pMsg->hdr.param = param;
   186fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   186fc:	883a      	ldrh	r2, [r7, #0]
   186fe:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = HCI_SUCCESS;
   18700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18702:	2200      	movs	r2, #0
   18704:	70da      	strb	r2, [r3, #3]
          WsfMsgSend(handlerId, pMsg);
   18706:	78fb      	ldrb	r3, [r7, #3]
   18708:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   1870a:	4618      	mov	r0, r3
   1870c:	f002 f933 	bl	1a976 <WsfMsgSend>
          return TRUE;
   18710:	2301      	movs	r3, #1
   18712:	e01e      	b.n	18752 <SecEccGenSharedSecret+0xf6>
        }
        else {
          return FALSE;
   18714:	2300      	movs	r3, #0
   18716:	e01c      	b.n	18752 <SecEccGenSharedSecret+0xf6>
    // At this point either remote public key is valid or controller has
    // the fix for the security vulnerability.
    // 

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   18718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1871a:	883a      	ldrh	r2, [r7, #0]
   1871c:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1871e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   18720:	78ba      	ldrb	r2, [r7, #2]
   18722:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   18724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   18726:	2202      	movs	r2, #2
   18728:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1872c:	78fb      	ldrb	r3, [r7, #3]
   1872e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   18730:	4619      	mov	r1, r3
   18732:	480b      	ldr	r0, [pc, #44]	; (18760 <SecEccGenSharedSecret+0x104>)
   18734:	f002 f937 	bl	1a9a6 <WsfMsgEnq>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(temp_ecc_key.pubKey_x, temp_ecc_key.pubKey_y);
   18738:	f107 030c 	add.w	r3, r7, #12
   1873c:	f103 0220 	add.w	r2, r3, #32
   18740:	f107 030c 	add.w	r3, r7, #12
   18744:	4611      	mov	r1, r2
   18746:	4618      	mov	r0, r3
   18748:	f7fc f900 	bl	1494c <HciLeGenerateDHKey>

    return TRUE;
   1874c:	2301      	movs	r3, #1
   1874e:	e000      	b.n	18752 <SecEccGenSharedSecret+0xf6>
  }

  return FALSE;
   18750:	2300      	movs	r3, #0
}
   18752:	4618      	mov	r0, r3
   18754:	3778      	adds	r7, #120	; 0x78
   18756:	46bd      	mov	sp, r7
   18758:	bd80      	pop	{r7, pc}
   1875a:	bf00      	nop
   1875c:	40020000 	.word	0x40020000
   18760:	100094b8 	.word	0x100094b8

00018764 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   18764:	b480      	push	{r7}
   18766:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
   18768:	4b03      	ldr	r3, [pc, #12]	; (18778 <SecEccInit+0x14>)
   1876a:	4a04      	ldr	r2, [pc, #16]	; (1877c <SecEccInit+0x18>)
   1876c:	635a      	str	r2, [r3, #52]	; 0x34
}
   1876e:	bf00      	nop
   18770:	46bd      	mov	sp, r7
   18772:	f85d 7b04 	ldr.w	r7, [sp], #4
   18776:	4770      	bx	lr
   18778:	10009498 	.word	0x10009498
   1877c:	00018565 	.word	0x00018565

00018780 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   18780:	b580      	push	{r7, lr}
   18782:	b084      	sub	sp, #16
   18784:	af00      	add	r7, sp, #0
   18786:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
   18788:	2300      	movs	r3, #0
   1878a:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
   1878c:	2300      	movs	r3, #0
   1878e:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
   18790:	687b      	ldr	r3, [r7, #4]
   18792:	789b      	ldrb	r3, [r3, #2]
   18794:	2b1c      	cmp	r3, #28
   18796:	d10c      	bne.n	187b2 <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memmove(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
   18798:	2218      	movs	r2, #24
   1879a:	492e      	ldr	r1, [pc, #184]	; (18854 <secHciCback+0xd4>)
   1879c:	482e      	ldr	r0, [pc, #184]	; (18858 <secHciCback+0xd8>)
   1879e:	f7f3 fd79 	bl	c294 <memmove>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   187a2:	687b      	ldr	r3, [r7, #4]
   187a4:	3305      	adds	r3, #5
   187a6:	2208      	movs	r2, #8
   187a8:	4619      	mov	r1, r3
   187aa:	482a      	ldr	r0, [pc, #168]	; (18854 <secHciCback+0xd4>)
   187ac:	f7f3 fcd8 	bl	c160 <memcpy>
      WsfMsgFree(pBuf);
    }  
    
    secCb.token = 0;
  }
}
   187b0:	e04b      	b.n	1884a <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   187b2:	687b      	ldr	r3, [r7, #4]
   187b4:	789b      	ldrb	r3, [r3, #2]
   187b6:	2b1b      	cmp	r3, #27
   187b8:	d007      	beq.n	187ca <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   187ba:	687b      	ldr	r3, [r7, #4]
   187bc:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   187be:	2b25      	cmp	r3, #37	; 0x25
   187c0:	d003      	beq.n	187ca <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   187c2:	687b      	ldr	r3, [r7, #4]
   187c4:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   187c6:	2b26      	cmp	r3, #38	; 0x26
   187c8:	d128      	bne.n	1881c <secHciCback+0x9c>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   187ca:	f107 030b 	add.w	r3, r7, #11
   187ce:	4619      	mov	r1, r3
   187d0:	4822      	ldr	r0, [pc, #136]	; (1885c <secHciCback+0xdc>)
   187d2:	f002 f8fd 	bl	1a9d0 <WsfMsgDeq>
   187d6:	60f8      	str	r0, [r7, #12]
   187d8:	68fb      	ldr	r3, [r7, #12]
   187da:	2b00      	cmp	r3, #0
   187dc:	d01a      	beq.n	18814 <secHciCback+0x94>
      if (secCb.hciCbackTbl[pBuf->type])
   187de:	68fb      	ldr	r3, [r7, #12]
   187e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   187e4:	4a1b      	ldr	r2, [pc, #108]	; (18854 <secHciCback+0xd4>)
   187e6:	330a      	adds	r3, #10
   187e8:	009b      	lsls	r3, r3, #2
   187ea:	4413      	add	r3, r2
   187ec:	685b      	ldr	r3, [r3, #4]
   187ee:	2b00      	cmp	r3, #0
   187f0:	d00c      	beq.n	1880c <secHciCback+0x8c>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   187f2:	68fb      	ldr	r3, [r7, #12]
   187f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   187f8:	4a16      	ldr	r2, [pc, #88]	; (18854 <secHciCback+0xd4>)
   187fa:	330a      	adds	r3, #10
   187fc:	009b      	lsls	r3, r3, #2
   187fe:	4413      	add	r3, r2
   18800:	685b      	ldr	r3, [r3, #4]
   18802:	7afa      	ldrb	r2, [r7, #11]
   18804:	6879      	ldr	r1, [r7, #4]
   18806:	68f8      	ldr	r0, [r7, #12]
   18808:	4798      	blx	r3
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1880a:	e01e      	b.n	1884a <secHciCback+0xca>
        WSF_TRACE_WARN0("WSF sec not registered");
   1880c:	4814      	ldr	r0, [pc, #80]	; (18860 <secHciCback+0xe0>)
   1880e:	f003 f84f 	bl	1b8b0 <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   18812:	e01a      	b.n	1884a <secHciCback+0xca>
      WSF_TRACE_WARN0("WSF sec queue empty!");
   18814:	4813      	ldr	r0, [pc, #76]	; (18864 <secHciCback+0xe4>)
   18816:	f003 f84b 	bl	1b8b0 <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1881a:	e016      	b.n	1884a <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
   1881c:	687b      	ldr	r3, [r7, #4]
   1881e:	789b      	ldrb	r3, [r3, #2]
   18820:	2b14      	cmp	r3, #20
   18822:	d112      	bne.n	1884a <secHciCback+0xca>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   18824:	e002      	b.n	1882c <secHciCback+0xac>
      WsfMsgFree(pBuf);
   18826:	68f8      	ldr	r0, [r7, #12]
   18828:	f002 f898 	bl	1a95c <WsfMsgFree>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1882c:	f107 030b 	add.w	r3, r7, #11
   18830:	4619      	mov	r1, r3
   18832:	480a      	ldr	r0, [pc, #40]	; (1885c <secHciCback+0xdc>)
   18834:	f002 f8cc 	bl	1a9d0 <WsfMsgDeq>
   18838:	60f8      	str	r0, [r7, #12]
   1883a:	68fb      	ldr	r3, [r7, #12]
   1883c:	2b00      	cmp	r3, #0
   1883e:	d1f2      	bne.n	18826 <secHciCback+0xa6>
    secCb.token = 0;
   18840:	4b04      	ldr	r3, [pc, #16]	; (18854 <secHciCback+0xd4>)
   18842:	2200      	movs	r2, #0
   18844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
   18848:	e7ff      	b.n	1884a <secHciCback+0xca>
   1884a:	bf00      	nop
   1884c:	3710      	adds	r7, #16
   1884e:	46bd      	mov	sp, r7
   18850:	bd80      	pop	{r7, pc}
   18852:	bf00      	nop
   18854:	10009498 	.word	0x10009498
   18858:	100094a0 	.word	0x100094a0
   1885c:	100094b8 	.word	0x100094b8
   18860:	000252cc 	.word	0x000252cc
   18864:	000252e4 	.word	0x000252e4

00018868 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   18868:	b580      	push	{r7, lr}
   1886a:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
   1886c:	4b07      	ldr	r3, [pc, #28]	; (1888c <SecInit+0x24>)
   1886e:	2200      	movs	r2, #0
   18870:	621a      	str	r2, [r3, #32]
   18872:	4b06      	ldr	r3, [pc, #24]	; (1888c <SecInit+0x24>)
   18874:	2200      	movs	r2, #0
   18876:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
   18878:	4b04      	ldr	r3, [pc, #16]	; (1888c <SecInit+0x24>)
   1887a:	2200      	movs	r2, #0
   1887c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   18880:	4803      	ldr	r0, [pc, #12]	; (18890 <SecInit+0x28>)
   18882:	f001 fed1 	bl	1a628 <HciSecRegister>
}
   18886:	bf00      	nop
   18888:	bd80      	pop	{r7, pc}
   1888a:	bf00      	nop
   1888c:	10009498 	.word	0x10009498
   18890:	00018781 	.word	0x00018781

00018894 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   18894:	b580      	push	{r7, lr}
   18896:	b084      	sub	sp, #16
   18898:	af00      	add	r7, sp, #0
   1889a:	6078      	str	r0, [r7, #4]
   1889c:	460b      	mov	r3, r1
   1889e:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   188a0:	78fb      	ldrb	r3, [r7, #3]
   188a2:	3307      	adds	r3, #7
   188a4:	2b00      	cmp	r3, #0
   188a6:	da00      	bge.n	188aa <SecRand+0x16>
   188a8:	3307      	adds	r3, #7
   188aa:	10db      	asrs	r3, r3, #3
   188ac:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
   188ae:	78fb      	ldrb	r3, [r7, #3]
   188b0:	461a      	mov	r2, r3
   188b2:	4909      	ldr	r1, [pc, #36]	; (188d8 <SecRand+0x44>)
   188b4:	6878      	ldr	r0, [r7, #4]
   188b6:	f7f3 fc53 	bl	c160 <memcpy>
  
  /* get new random numbers */
  while (count--)
   188ba:	e001      	b.n	188c0 <SecRand+0x2c>
  {
    HciLeRandCmd();
   188bc:	f7fc f8f4 	bl	14aa8 <HciLeRandCmd>
  while (count--)
   188c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   188c4:	b2da      	uxtb	r2, r3
   188c6:	3a01      	subs	r2, #1
   188c8:	b2d2      	uxtb	r2, r2
   188ca:	73fa      	strb	r2, [r7, #15]
   188cc:	2b00      	cmp	r3, #0
   188ce:	d1f5      	bne.n	188bc <SecRand+0x28>
  }
}
   188d0:	bf00      	nop
   188d2:	3710      	adds	r7, #16
   188d4:	46bd      	mov	sp, r7
   188d6:	bd80      	pop	{r7, pc}
   188d8:	10009498 	.word	0x10009498

000188dc <TipcCtsDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TipcCtsDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   188dc:	b580      	push	{r7, lr}
   188de:	b084      	sub	sp, #16
   188e0:	af02      	add	r7, sp, #8
   188e2:	4603      	mov	r3, r0
   188e4:	6039      	str	r1, [r7, #0]
   188e6:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attCtsSvcUuid,
   188e8:	79f8      	ldrb	r0, [r7, #7]
   188ea:	683b      	ldr	r3, [r7, #0]
   188ec:	9301      	str	r3, [sp, #4]
   188ee:	4b05      	ldr	r3, [pc, #20]	; (18904 <TipcCtsDiscover+0x28>)
   188f0:	9300      	str	r3, [sp, #0]
   188f2:	2304      	movs	r3, #4
   188f4:	4a04      	ldr	r2, [pc, #16]	; (18908 <TipcCtsDiscover+0x2c>)
   188f6:	2102      	movs	r1, #2
   188f8:	f005 fb2a 	bl	1df50 <AppDiscFindService>
                     TIPC_CTS_HDL_LIST_LEN, (attcDiscChar_t **) tipcCtsDiscCharList, pHdlList);
}
   188fc:	bf00      	nop
   188fe:	3708      	adds	r7, #8
   18900:	46bd      	mov	sp, r7
   18902:	bd80      	pop	{r7, pc}
   18904:	10002bb4 	.word	0x10002bb4
   18908:	00025c9c 	.word	0x00025c9c

0001890c <TipcCtsValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t TipcCtsValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   1890c:	b580      	push	{r7, lr}
   1890e:	b088      	sub	sp, #32
   18910:	af00      	add	r7, sp, #0
   18912:	6078      	str	r0, [r7, #4]
   18914:	6039      	str	r1, [r7, #0]
  uint8_t   status = ATT_SUCCESS;
   18916:	2300      	movs	r3, #0
   18918:	77fb      	strb	r3, [r7, #31]
  uint8_t   month, day, hour, min, sec, sec256, dayOfWeek, adjustReason;
  int8_t    timeZone;
  uint8_t   dstOffset, source, accuracy;
  
  /* current time */
  if (pMsg->handle == pHdlList[TIPC_CTS_CT_HDL_IDX])
   1891a:	683b      	ldr	r3, [r7, #0]
   1891c:	895a      	ldrh	r2, [r3, #10]
   1891e:	687b      	ldr	r3, [r7, #4]
   18920:	881b      	ldrh	r3, [r3, #0]
   18922:	429a      	cmp	r2, r3
   18924:	d14b      	bne.n	189be <TipcCtsValueUpdate+0xb2>
  {
    /* parse value */
    p = pMsg->pValue;
   18926:	683b      	ldr	r3, [r7, #0]
   18928:	685b      	ldr	r3, [r3, #4]
   1892a:	61bb      	str	r3, [r7, #24]
    BSTREAM_TO_UINT16(year, p);
   1892c:	69bb      	ldr	r3, [r7, #24]
   1892e:	781b      	ldrb	r3, [r3, #0]
   18930:	b29a      	uxth	r2, r3
   18932:	69bb      	ldr	r3, [r7, #24]
   18934:	3301      	adds	r3, #1
   18936:	781b      	ldrb	r3, [r3, #0]
   18938:	b29b      	uxth	r3, r3
   1893a:	021b      	lsls	r3, r3, #8
   1893c:	b29b      	uxth	r3, r3
   1893e:	4413      	add	r3, r2
   18940:	82fb      	strh	r3, [r7, #22]
   18942:	69bb      	ldr	r3, [r7, #24]
   18944:	3302      	adds	r3, #2
   18946:	61bb      	str	r3, [r7, #24]
    BSTREAM_TO_UINT8(month, p);
   18948:	69bb      	ldr	r3, [r7, #24]
   1894a:	1c5a      	adds	r2, r3, #1
   1894c:	61ba      	str	r2, [r7, #24]
   1894e:	781b      	ldrb	r3, [r3, #0]
   18950:	757b      	strb	r3, [r7, #21]
    BSTREAM_TO_UINT8(day, p);
   18952:	69bb      	ldr	r3, [r7, #24]
   18954:	1c5a      	adds	r2, r3, #1
   18956:	61ba      	str	r2, [r7, #24]
   18958:	781b      	ldrb	r3, [r3, #0]
   1895a:	753b      	strb	r3, [r7, #20]
    BSTREAM_TO_UINT8(hour, p);
   1895c:	69bb      	ldr	r3, [r7, #24]
   1895e:	1c5a      	adds	r2, r3, #1
   18960:	61ba      	str	r2, [r7, #24]
   18962:	781b      	ldrb	r3, [r3, #0]
   18964:	74fb      	strb	r3, [r7, #19]
    BSTREAM_TO_UINT8(min, p);
   18966:	69bb      	ldr	r3, [r7, #24]
   18968:	1c5a      	adds	r2, r3, #1
   1896a:	61ba      	str	r2, [r7, #24]
   1896c:	781b      	ldrb	r3, [r3, #0]
   1896e:	74bb      	strb	r3, [r7, #18]
    BSTREAM_TO_UINT8(sec, p);
   18970:	69bb      	ldr	r3, [r7, #24]
   18972:	1c5a      	adds	r2, r3, #1
   18974:	61ba      	str	r2, [r7, #24]
   18976:	781b      	ldrb	r3, [r3, #0]
   18978:	747b      	strb	r3, [r7, #17]
    BSTREAM_TO_UINT8(dayOfWeek, p);
   1897a:	69bb      	ldr	r3, [r7, #24]
   1897c:	1c5a      	adds	r2, r3, #1
   1897e:	61ba      	str	r2, [r7, #24]
   18980:	781b      	ldrb	r3, [r3, #0]
   18982:	743b      	strb	r3, [r7, #16]
    BSTREAM_TO_UINT8(sec256, p);
   18984:	69bb      	ldr	r3, [r7, #24]
   18986:	1c5a      	adds	r2, r3, #1
   18988:	61ba      	str	r2, [r7, #24]
   1898a:	781b      	ldrb	r3, [r3, #0]
   1898c:	73fb      	strb	r3, [r7, #15]
    BSTREAM_TO_UINT8(adjustReason, p);
   1898e:	69bb      	ldr	r3, [r7, #24]
   18990:	1c5a      	adds	r2, r3, #1
   18992:	61ba      	str	r2, [r7, #24]
   18994:	781b      	ldrb	r3, [r3, #0]
   18996:	73bb      	strb	r3, [r7, #14]

    APP_TRACE_INFO3("Date: %d/%d/%d", month, day, year);
   18998:	7d79      	ldrb	r1, [r7, #21]
   1899a:	7d3a      	ldrb	r2, [r7, #20]
   1899c:	8afb      	ldrh	r3, [r7, #22]
   1899e:	482f      	ldr	r0, [pc, #188]	; (18a5c <TipcCtsValueUpdate+0x150>)
   189a0:	f002 ff86 	bl	1b8b0 <WsfTrace>
    APP_TRACE_INFO3("Time: %02d:%02d:%02d", hour, min, sec);
   189a4:	7cf9      	ldrb	r1, [r7, #19]
   189a6:	7cba      	ldrb	r2, [r7, #18]
   189a8:	7c7b      	ldrb	r3, [r7, #17]
   189aa:	482d      	ldr	r0, [pc, #180]	; (18a60 <TipcCtsValueUpdate+0x154>)
   189ac:	f002 ff80 	bl	1b8b0 <WsfTrace>
    APP_TRACE_INFO3("dayOfWeek:%d sec256:%d adjustReason:%d",  dayOfWeek, sec256, adjustReason);    
   189b0:	7c39      	ldrb	r1, [r7, #16]
   189b2:	7bfa      	ldrb	r2, [r7, #15]
   189b4:	7bbb      	ldrb	r3, [r7, #14]
   189b6:	482b      	ldr	r0, [pc, #172]	; (18a64 <TipcCtsValueUpdate+0x158>)
   189b8:	f002 ff7a 	bl	1b8b0 <WsfTrace>
   189bc:	e048      	b.n	18a50 <TipcCtsValueUpdate+0x144>
  }
  /* local time information */
  else if (pMsg->handle == pHdlList[TIPC_CTS_LTI_HDL_IDX])
   189be:	683b      	ldr	r3, [r7, #0]
   189c0:	895a      	ldrh	r2, [r3, #10]
   189c2:	687b      	ldr	r3, [r7, #4]
   189c4:	3304      	adds	r3, #4
   189c6:	881b      	ldrh	r3, [r3, #0]
   189c8:	429a      	cmp	r2, r3
   189ca:	d114      	bne.n	189f6 <TipcCtsValueUpdate+0xea>
  {
    /* parse value */
    p = pMsg->pValue;
   189cc:	683b      	ldr	r3, [r7, #0]
   189ce:	685b      	ldr	r3, [r3, #4]
   189d0:	61bb      	str	r3, [r7, #24]
    BSTREAM_TO_UINT8(timeZone, p);
   189d2:	69bb      	ldr	r3, [r7, #24]
   189d4:	1c5a      	adds	r2, r3, #1
   189d6:	61ba      	str	r2, [r7, #24]
   189d8:	781b      	ldrb	r3, [r3, #0]
   189da:	737b      	strb	r3, [r7, #13]
    BSTREAM_TO_UINT8(dstOffset, p);
   189dc:	69bb      	ldr	r3, [r7, #24]
   189de:	1c5a      	adds	r2, r3, #1
   189e0:	61ba      	str	r2, [r7, #24]
   189e2:	781b      	ldrb	r3, [r3, #0]
   189e4:	733b      	strb	r3, [r7, #12]
      
    APP_TRACE_INFO2("timeZone:%d dstOffset:%d", timeZone, dstOffset);
   189e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
   189ea:	7b3a      	ldrb	r2, [r7, #12]
   189ec:	4619      	mov	r1, r3
   189ee:	481e      	ldr	r0, [pc, #120]	; (18a68 <TipcCtsValueUpdate+0x15c>)
   189f0:	f002 ff5e 	bl	1b8b0 <WsfTrace>
   189f4:	e02c      	b.n	18a50 <TipcCtsValueUpdate+0x144>
  }
  /* reference time information */
  else if (pMsg->handle == pHdlList[TIPC_CTS_RTI_HDL_IDX])
   189f6:	683b      	ldr	r3, [r7, #0]
   189f8:	895a      	ldrh	r2, [r3, #10]
   189fa:	687b      	ldr	r3, [r7, #4]
   189fc:	3306      	adds	r3, #6
   189fe:	881b      	ldrh	r3, [r3, #0]
   18a00:	429a      	cmp	r2, r3
   18a02:	d123      	bne.n	18a4c <TipcCtsValueUpdate+0x140>
  {
    /* parse value */
    p = pMsg->pValue;
   18a04:	683b      	ldr	r3, [r7, #0]
   18a06:	685b      	ldr	r3, [r3, #4]
   18a08:	61bb      	str	r3, [r7, #24]
    BSTREAM_TO_UINT8(source, p);
   18a0a:	69bb      	ldr	r3, [r7, #24]
   18a0c:	1c5a      	adds	r2, r3, #1
   18a0e:	61ba      	str	r2, [r7, #24]
   18a10:	781b      	ldrb	r3, [r3, #0]
   18a12:	72fb      	strb	r3, [r7, #11]
    BSTREAM_TO_UINT8(accuracy, p);
   18a14:	69bb      	ldr	r3, [r7, #24]
   18a16:	1c5a      	adds	r2, r3, #1
   18a18:	61ba      	str	r2, [r7, #24]
   18a1a:	781b      	ldrb	r3, [r3, #0]
   18a1c:	72bb      	strb	r3, [r7, #10]
    BSTREAM_TO_UINT8(day, p);
   18a1e:	69bb      	ldr	r3, [r7, #24]
   18a20:	1c5a      	adds	r2, r3, #1
   18a22:	61ba      	str	r2, [r7, #24]
   18a24:	781b      	ldrb	r3, [r3, #0]
   18a26:	753b      	strb	r3, [r7, #20]
    BSTREAM_TO_UINT8(hour, p);
   18a28:	69bb      	ldr	r3, [r7, #24]
   18a2a:	1c5a      	adds	r2, r3, #1
   18a2c:	61ba      	str	r2, [r7, #24]
   18a2e:	781b      	ldrb	r3, [r3, #0]
   18a30:	74fb      	strb	r3, [r7, #19]
      
    APP_TRACE_INFO2("Ref. time source:%d accuracy:%d", source, accuracy);
   18a32:	7afb      	ldrb	r3, [r7, #11]
   18a34:	7aba      	ldrb	r2, [r7, #10]
   18a36:	4619      	mov	r1, r3
   18a38:	480c      	ldr	r0, [pc, #48]	; (18a6c <TipcCtsValueUpdate+0x160>)
   18a3a:	f002 ff39 	bl	1b8b0 <WsfTrace>
    APP_TRACE_INFO2("Last update days:%d hours:%d", day, hour);
   18a3e:	7d3b      	ldrb	r3, [r7, #20]
   18a40:	7cfa      	ldrb	r2, [r7, #19]
   18a42:	4619      	mov	r1, r3
   18a44:	480a      	ldr	r0, [pc, #40]	; (18a70 <TipcCtsValueUpdate+0x164>)
   18a46:	f002 ff33 	bl	1b8b0 <WsfTrace>
   18a4a:	e001      	b.n	18a50 <TipcCtsValueUpdate+0x144>
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   18a4c:	230a      	movs	r3, #10
   18a4e:	77fb      	strb	r3, [r7, #31]
  }
  
  return status;
   18a50:	7ffb      	ldrb	r3, [r7, #31]
   18a52:	4618      	mov	r0, r3
   18a54:	3720      	adds	r7, #32
   18a56:	46bd      	mov	sp, r7
   18a58:	bd80      	pop	{r7, pc}
   18a5a:	bf00      	nop
   18a5c:	000252fc 	.word	0x000252fc
   18a60:	0002530c 	.word	0x0002530c
   18a64:	00025324 	.word	0x00025324
   18a68:	0002534c 	.word	0x0002534c
   18a6c:	00025368 	.word	0x00025368
   18a70:	00025388 	.word	0x00025388

00018a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   18a74:	b480      	push	{r7}
   18a76:	b083      	sub	sp, #12
   18a78:	af00      	add	r7, sp, #0
   18a7a:	4603      	mov	r3, r0
   18a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   18a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18a82:	2b00      	cmp	r3, #0
   18a84:	db0b      	blt.n	18a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a86:	4909      	ldr	r1, [pc, #36]	; (18aac <__NVIC_EnableIRQ+0x38>)
   18a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18a8c:	095b      	lsrs	r3, r3, #5
   18a8e:	79fa      	ldrb	r2, [r7, #7]
   18a90:	f002 021f 	and.w	r2, r2, #31
   18a94:	2001      	movs	r0, #1
   18a96:	fa00 f202 	lsl.w	r2, r0, r2
   18a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   18a9e:	bf00      	nop
   18aa0:	370c      	adds	r7, #12
   18aa2:	46bd      	mov	sp, r7
   18aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
   18aa8:	4770      	bx	lr
   18aaa:	bf00      	nop
   18aac:	e000e100 	.word	0xe000e100

00018ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   18ab0:	b480      	push	{r7}
   18ab2:	b083      	sub	sp, #12
   18ab4:	af00      	add	r7, sp, #0
   18ab6:	4603      	mov	r3, r0
   18ab8:	6039      	str	r1, [r7, #0]
   18aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   18abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18ac0:	2b00      	cmp	r3, #0
   18ac2:	db0a      	blt.n	18ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18ac4:	490d      	ldr	r1, [pc, #52]	; (18afc <__NVIC_SetPriority+0x4c>)
   18ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18aca:	683a      	ldr	r2, [r7, #0]
   18acc:	b2d2      	uxtb	r2, r2
   18ace:	0152      	lsls	r2, r2, #5
   18ad0:	b2d2      	uxtb	r2, r2
   18ad2:	440b      	add	r3, r1
   18ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   18ad8:	e00a      	b.n	18af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18ada:	4909      	ldr	r1, [pc, #36]	; (18b00 <__NVIC_SetPriority+0x50>)
   18adc:	79fb      	ldrb	r3, [r7, #7]
   18ade:	f003 030f 	and.w	r3, r3, #15
   18ae2:	3b04      	subs	r3, #4
   18ae4:	683a      	ldr	r2, [r7, #0]
   18ae6:	b2d2      	uxtb	r2, r2
   18ae8:	0152      	lsls	r2, r2, #5
   18aea:	b2d2      	uxtb	r2, r2
   18aec:	440b      	add	r3, r1
   18aee:	761a      	strb	r2, [r3, #24]
}
   18af0:	bf00      	nop
   18af2:	370c      	adds	r7, #12
   18af4:	46bd      	mov	sp, r7
   18af6:	f85d 7b04 	ldr.w	r7, [sp], #4
   18afa:	4770      	bx	lr
   18afc:	e000e100 	.word	0xe000e100
   18b00:	e000ed00 	.word	0xe000ed00

00018b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   18b04:	b480      	push	{r7}
   18b06:	b085      	sub	sp, #20
   18b08:	af00      	add	r7, sp, #0
   18b0a:	60f8      	str	r0, [r7, #12]
   18b0c:	60b9      	str	r1, [r7, #8]
   18b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   18b10:	68fb      	ldr	r3, [r7, #12]
   18b12:	3b04      	subs	r3, #4
   18b14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   18b16:	68fb      	ldr	r3, [r7, #12]
   18b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   18b1e:	68fb      	ldr	r3, [r7, #12]
   18b20:	3b04      	subs	r3, #4
   18b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   18b24:	68bb      	ldr	r3, [r7, #8]
   18b26:	f023 0201 	bic.w	r2, r3, #1
   18b2a:	68fb      	ldr	r3, [r7, #12]
   18b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   18b2e:	68fb      	ldr	r3, [r7, #12]
   18b30:	3b04      	subs	r3, #4
   18b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   18b34:	4a0c      	ldr	r2, [pc, #48]	; (18b68 <pxPortInitialiseStack+0x64>)
   18b36:	68fb      	ldr	r3, [r7, #12]
   18b38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   18b3a:	68fb      	ldr	r3, [r7, #12]
   18b3c:	3b14      	subs	r3, #20
   18b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   18b40:	687a      	ldr	r2, [r7, #4]
   18b42:	68fb      	ldr	r3, [r7, #12]
   18b44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   18b46:	68fb      	ldr	r3, [r7, #12]
   18b48:	3b04      	subs	r3, #4
   18b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   18b4c:	68fb      	ldr	r3, [r7, #12]
   18b4e:	f06f 0202 	mvn.w	r2, #2
   18b52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   18b54:	68fb      	ldr	r3, [r7, #12]
   18b56:	3b20      	subs	r3, #32
   18b58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   18b5a:	68fb      	ldr	r3, [r7, #12]
}
   18b5c:	4618      	mov	r0, r3
   18b5e:	3714      	adds	r7, #20
   18b60:	46bd      	mov	sp, r7
   18b62:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b66:	4770      	bx	lr
   18b68:	00018b6d 	.word	0x00018b6d

00018b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   18b6c:	b480      	push	{r7}
   18b6e:	b083      	sub	sp, #12
   18b70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
   18b72:	2300      	movs	r3, #0
   18b74:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   18b76:	4b0c      	ldr	r3, [pc, #48]	; (18ba8 <prvTaskExitError+0x3c>)
   18b78:	681b      	ldr	r3, [r3, #0]
   18b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18b7e:	d000      	beq.n	18b82 <prvTaskExitError+0x16>
   18b80:	e7fe      	b.n	18b80 <prvTaskExitError+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   18b82:	f04f 0380 	mov.w	r3, #128	; 0x80
   18b86:	f383 8811 	msr	BASEPRI, r3
   18b8a:	f3bf 8f6f 	isb	sy
   18b8e:	f3bf 8f4f 	dsb	sy
   18b92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   18b94:	bf00      	nop
   18b96:	683b      	ldr	r3, [r7, #0]
   18b98:	2b00      	cmp	r3, #0
   18b9a:	d0fc      	beq.n	18b96 <prvTaskExitError+0x2a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   18b9c:	bf00      	nop
   18b9e:	370c      	adds	r7, #12
   18ba0:	46bd      	mov	sp, r7
   18ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ba6:	4770      	bx	lr
   18ba8:	10002bc4 	.word	0x10002bc4
   18bac:	00000000 	.word	0x00000000

00018bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   18bb0:	4b07      	ldr	r3, [pc, #28]	; (18bd0 <pxCurrentTCBConst2>)
   18bb2:	6819      	ldr	r1, [r3, #0]
   18bb4:	6808      	ldr	r0, [r1, #0]
   18bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bba:	f380 8809 	msr	PSP, r0
   18bbe:	f3bf 8f6f 	isb	sy
   18bc2:	f04f 0000 	mov.w	r0, #0
   18bc6:	f380 8811 	msr	BASEPRI, r0
   18bca:	4770      	bx	lr
   18bcc:	f3af 8000 	nop.w

00018bd0 <pxCurrentTCBConst2>:
   18bd0:	1000501c 	.word	0x1000501c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   18bd4:	bf00      	nop
   18bd6:	bf00      	nop

00018bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   18bd8:	4808      	ldr	r0, [pc, #32]	; (18bfc <prvPortStartFirstTask+0x24>)
   18bda:	6800      	ldr	r0, [r0, #0]
   18bdc:	6800      	ldr	r0, [r0, #0]
   18bde:	f380 8808 	msr	MSP, r0
   18be2:	f04f 0000 	mov.w	r0, #0
   18be6:	f380 8814 	msr	CONTROL, r0
   18bea:	b662      	cpsie	i
   18bec:	b661      	cpsie	f
   18bee:	f3bf 8f4f 	dsb	sy
   18bf2:	f3bf 8f6f 	isb	sy
   18bf6:	df00      	svc	0
   18bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   18bfa:	bf00      	nop
   18bfc:	e000ed08 	.word	0xe000ed08

00018c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   18c00:	b580      	push	{r7, lr}
   18c02:	b084      	sub	sp, #16
   18c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   18c06:	4b37      	ldr	r3, [pc, #220]	; (18ce4 <xPortStartScheduler+0xe4>)
   18c08:	681b      	ldr	r3, [r3, #0]
   18c0a:	4a37      	ldr	r2, [pc, #220]	; (18ce8 <xPortStartScheduler+0xe8>)
   18c0c:	4293      	cmp	r3, r2
   18c0e:	d100      	bne.n	18c12 <xPortStartScheduler+0x12>
   18c10:	e7fe      	b.n	18c10 <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   18c12:	4b34      	ldr	r3, [pc, #208]	; (18ce4 <xPortStartScheduler+0xe4>)
   18c14:	681b      	ldr	r3, [r3, #0]
   18c16:	4a35      	ldr	r2, [pc, #212]	; (18cec <xPortStartScheduler+0xec>)
   18c18:	4293      	cmp	r3, r2
   18c1a:	d100      	bne.n	18c1e <xPortStartScheduler+0x1e>
   18c1c:	e7fe      	b.n	18c1c <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   18c1e:	4b34      	ldr	r3, [pc, #208]	; (18cf0 <xPortStartScheduler+0xf0>)
   18c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   18c22:	68fb      	ldr	r3, [r7, #12]
   18c24:	781b      	ldrb	r3, [r3, #0]
   18c26:	b2db      	uxtb	r3, r3
   18c28:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   18c2a:	68fb      	ldr	r3, [r7, #12]
   18c2c:	22ff      	movs	r2, #255	; 0xff
   18c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   18c30:	68fb      	ldr	r3, [r7, #12]
   18c32:	781b      	ldrb	r3, [r3, #0]
   18c34:	b2db      	uxtb	r3, r3
   18c36:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   18c38:	79fb      	ldrb	r3, [r7, #7]
   18c3a:	b2db      	uxtb	r3, r3
   18c3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   18c40:	b2da      	uxtb	r2, r3
   18c42:	4b2c      	ldr	r3, [pc, #176]	; (18cf4 <xPortStartScheduler+0xf4>)
   18c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   18c46:	4b2c      	ldr	r3, [pc, #176]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c48:	2207      	movs	r2, #7
   18c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   18c4c:	e009      	b.n	18c62 <xPortStartScheduler+0x62>
		{
			ulMaxPRIGROUPValue--;
   18c4e:	4b2a      	ldr	r3, [pc, #168]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c50:	681b      	ldr	r3, [r3, #0]
   18c52:	3b01      	subs	r3, #1
   18c54:	4a28      	ldr	r2, [pc, #160]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   18c58:	79fb      	ldrb	r3, [r7, #7]
   18c5a:	b2db      	uxtb	r3, r3
   18c5c:	005b      	lsls	r3, r3, #1
   18c5e:	b2db      	uxtb	r3, r3
   18c60:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   18c62:	79fb      	ldrb	r3, [r7, #7]
   18c64:	b2db      	uxtb	r3, r3
   18c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
   18c6a:	2b80      	cmp	r3, #128	; 0x80
   18c6c:	d0ef      	beq.n	18c4e <xPortStartScheduler+0x4e>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   18c6e:	4b22      	ldr	r3, [pc, #136]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c70:	681b      	ldr	r3, [r3, #0]
   18c72:	f1c3 0307 	rsb	r3, r3, #7
   18c76:	2b03      	cmp	r3, #3
   18c78:	d000      	beq.n	18c7c <xPortStartScheduler+0x7c>
   18c7a:	e7fe      	b.n	18c7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   18c7c:	4b1e      	ldr	r3, [pc, #120]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c7e:	681b      	ldr	r3, [r3, #0]
   18c80:	021b      	lsls	r3, r3, #8
   18c82:	4a1d      	ldr	r2, [pc, #116]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   18c86:	4b1c      	ldr	r3, [pc, #112]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c88:	681b      	ldr	r3, [r3, #0]
   18c8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   18c8e:	4a1a      	ldr	r2, [pc, #104]	; (18cf8 <xPortStartScheduler+0xf8>)
   18c90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   18c92:	68bb      	ldr	r3, [r7, #8]
   18c94:	b2da      	uxtb	r2, r3
   18c96:	68fb      	ldr	r3, [r7, #12]
   18c98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   18c9a:	4a18      	ldr	r2, [pc, #96]	; (18cfc <xPortStartScheduler+0xfc>)
   18c9c:	4b17      	ldr	r3, [pc, #92]	; (18cfc <xPortStartScheduler+0xfc>)
   18c9e:	681b      	ldr	r3, [r3, #0]
   18ca0:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   18ca4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   18ca6:	4a15      	ldr	r2, [pc, #84]	; (18cfc <xPortStartScheduler+0xfc>)
   18ca8:	4b14      	ldr	r3, [pc, #80]	; (18cfc <xPortStartScheduler+0xfc>)
   18caa:	681b      	ldr	r3, [r3, #0]
   18cac:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   18cb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   18cb2:	f000 f9df 	bl	19074 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   18cb6:	4b12      	ldr	r3, [pc, #72]	; (18d00 <xPortStartScheduler+0x100>)
   18cb8:	2200      	movs	r2, #0
   18cba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   18cbc:	f000 f8bc 	bl	18e38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   18cc0:	4a10      	ldr	r2, [pc, #64]	; (18d04 <xPortStartScheduler+0x104>)
   18cc2:	4b10      	ldr	r3, [pc, #64]	; (18d04 <xPortStartScheduler+0x104>)
   18cc4:	681b      	ldr	r3, [r3, #0]
   18cc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   18cca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   18ccc:	f7ff ff84 	bl	18bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   18cd0:	f003 ffc8 	bl	1cc64 <vTaskSwitchContext>
	prvTaskExitError();
   18cd4:	f7ff ff4a 	bl	18b6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
   18cd8:	2300      	movs	r3, #0
}
   18cda:	4618      	mov	r0, r3
   18cdc:	3710      	adds	r7, #16
   18cde:	46bd      	mov	sp, r7
   18ce0:	bd80      	pop	{r7, pc}
   18ce2:	bf00      	nop
   18ce4:	e000ed00 	.word	0xe000ed00
   18ce8:	410fc271 	.word	0x410fc271
   18cec:	410fc270 	.word	0x410fc270
   18cf0:	e000e400 	.word	0xe000e400
   18cf4:	10004214 	.word	0x10004214
   18cf8:	10004218 	.word	0x10004218
   18cfc:	e000ed20 	.word	0xe000ed20
   18d00:	10002bc4 	.word	0x10002bc4
   18d04:	e000ef34 	.word	0xe000ef34

00018d08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   18d08:	b480      	push	{r7}
   18d0a:	b083      	sub	sp, #12
   18d0c:	af00      	add	r7, sp, #0
   18d0e:	f04f 0380 	mov.w	r3, #128	; 0x80
   18d12:	f383 8811 	msr	BASEPRI, r3
   18d16:	f3bf 8f6f 	isb	sy
   18d1a:	f3bf 8f4f 	dsb	sy
   18d1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   18d20:	4b0a      	ldr	r3, [pc, #40]	; (18d4c <vPortEnterCritical+0x44>)
   18d22:	681b      	ldr	r3, [r3, #0]
   18d24:	3301      	adds	r3, #1
   18d26:	4a09      	ldr	r2, [pc, #36]	; (18d4c <vPortEnterCritical+0x44>)
   18d28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   18d2a:	4b08      	ldr	r3, [pc, #32]	; (18d4c <vPortEnterCritical+0x44>)
   18d2c:	681b      	ldr	r3, [r3, #0]
   18d2e:	2b01      	cmp	r3, #1
   18d30:	d105      	bne.n	18d3e <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   18d32:	4b07      	ldr	r3, [pc, #28]	; (18d50 <vPortEnterCritical+0x48>)
   18d34:	681b      	ldr	r3, [r3, #0]
   18d36:	b2db      	uxtb	r3, r3
   18d38:	2b00      	cmp	r3, #0
   18d3a:	d000      	beq.n	18d3e <vPortEnterCritical+0x36>
   18d3c:	e7fe      	b.n	18d3c <vPortEnterCritical+0x34>
	}
}
   18d3e:	bf00      	nop
   18d40:	370c      	adds	r7, #12
   18d42:	46bd      	mov	sp, r7
   18d44:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d48:	4770      	bx	lr
   18d4a:	bf00      	nop
   18d4c:	10002bc4 	.word	0x10002bc4
   18d50:	e000ed04 	.word	0xe000ed04

00018d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   18d54:	b480      	push	{r7}
   18d56:	b083      	sub	sp, #12
   18d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   18d5a:	4b0c      	ldr	r3, [pc, #48]	; (18d8c <vPortExitCritical+0x38>)
   18d5c:	681b      	ldr	r3, [r3, #0]
   18d5e:	2b00      	cmp	r3, #0
   18d60:	d100      	bne.n	18d64 <vPortExitCritical+0x10>
   18d62:	e7fe      	b.n	18d62 <vPortExitCritical+0xe>
	uxCriticalNesting--;
   18d64:	4b09      	ldr	r3, [pc, #36]	; (18d8c <vPortExitCritical+0x38>)
   18d66:	681b      	ldr	r3, [r3, #0]
   18d68:	3b01      	subs	r3, #1
   18d6a:	4a08      	ldr	r2, [pc, #32]	; (18d8c <vPortExitCritical+0x38>)
   18d6c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   18d6e:	4b07      	ldr	r3, [pc, #28]	; (18d8c <vPortExitCritical+0x38>)
   18d70:	681b      	ldr	r3, [r3, #0]
   18d72:	2b00      	cmp	r3, #0
   18d74:	d104      	bne.n	18d80 <vPortExitCritical+0x2c>
   18d76:	2300      	movs	r3, #0
   18d78:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   18d7a:	687b      	ldr	r3, [r7, #4]
   18d7c:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   18d80:	bf00      	nop
   18d82:	370c      	adds	r7, #12
   18d84:	46bd      	mov	sp, r7
   18d86:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d8a:	4770      	bx	lr
   18d8c:	10002bc4 	.word	0x10002bc4

00018d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   18d90:	f3ef 8009 	mrs	r0, PSP
   18d94:	f3bf 8f6f 	isb	sy
   18d98:	4b15      	ldr	r3, [pc, #84]	; (18df0 <pxCurrentTCBConst>)
   18d9a:	681a      	ldr	r2, [r3, #0]
   18d9c:	f01e 0f10 	tst.w	lr, #16
   18da0:	bf08      	it	eq
   18da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   18da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18daa:	6010      	str	r0, [r2, #0]
   18dac:	e92d 0009 	stmdb	sp!, {r0, r3}
   18db0:	f04f 0080 	mov.w	r0, #128	; 0x80
   18db4:	f380 8811 	msr	BASEPRI, r0
   18db8:	f3bf 8f4f 	dsb	sy
   18dbc:	f3bf 8f6f 	isb	sy
   18dc0:	f003 ff50 	bl	1cc64 <vTaskSwitchContext>
   18dc4:	f04f 0000 	mov.w	r0, #0
   18dc8:	f380 8811 	msr	BASEPRI, r0
   18dcc:	bc09      	pop	{r0, r3}
   18dce:	6819      	ldr	r1, [r3, #0]
   18dd0:	6808      	ldr	r0, [r1, #0]
   18dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dd6:	f01e 0f10 	tst.w	lr, #16
   18dda:	bf08      	it	eq
   18ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   18de0:	f380 8809 	msr	PSP, r0
   18de4:	f3bf 8f6f 	isb	sy
   18de8:	4770      	bx	lr
   18dea:	bf00      	nop
   18dec:	f3af 8000 	nop.w

00018df0 <pxCurrentTCBConst>:
   18df0:	1000501c 	.word	0x1000501c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   18df4:	bf00      	nop
   18df6:	bf00      	nop

00018df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   18df8:	b580      	push	{r7, lr}
   18dfa:	b082      	sub	sp, #8
   18dfc:	af00      	add	r7, sp, #0
	__asm volatile
   18dfe:	f04f 0380 	mov.w	r3, #128	; 0x80
   18e02:	f383 8811 	msr	BASEPRI, r3
   18e06:	f3bf 8f6f 	isb	sy
   18e0a:	f3bf 8f4f 	dsb	sy
   18e0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   18e10:	f003 fe88 	bl	1cb24 <xTaskIncrementTick>
   18e14:	4603      	mov	r3, r0
   18e16:	2b00      	cmp	r3, #0
   18e18:	d003      	beq.n	18e22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   18e1a:	4b06      	ldr	r3, [pc, #24]	; (18e34 <SysTick_Handler+0x3c>)
   18e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18e20:	601a      	str	r2, [r3, #0]
   18e22:	2300      	movs	r3, #0
   18e24:	603b      	str	r3, [r7, #0]
	__asm volatile
   18e26:	683b      	ldr	r3, [r7, #0]
   18e28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   18e2c:	bf00      	nop
   18e2e:	3708      	adds	r7, #8
   18e30:	46bd      	mov	sp, r7
   18e32:	bd80      	pop	{r7, pc}
   18e34:	e000ed04 	.word	0xe000ed04

00018e38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   18e38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 18e48 <vPortEnableVFP+0x10>
   18e3c:	6801      	ldr	r1, [r0, #0]
   18e3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18e42:	6001      	str	r1, [r0, #0]
   18e44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   18e46:	bf00      	nop
   18e48:	e000ed88 	.word	0xe000ed88

00018e4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   18e4c:	b480      	push	{r7}
   18e4e:	b083      	sub	sp, #12
   18e50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   18e52:	f3ef 8305 	mrs	r3, IPSR
   18e56:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   18e58:	687b      	ldr	r3, [r7, #4]
   18e5a:	2b0f      	cmp	r3, #15
   18e5c:	d90a      	bls.n	18e74 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   18e5e:	4a0d      	ldr	r2, [pc, #52]	; (18e94 <vPortValidateInterruptPriority+0x48>)
   18e60:	687b      	ldr	r3, [r7, #4]
   18e62:	4413      	add	r3, r2
   18e64:	781b      	ldrb	r3, [r3, #0]
   18e66:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   18e68:	4b0b      	ldr	r3, [pc, #44]	; (18e98 <vPortValidateInterruptPriority+0x4c>)
   18e6a:	781b      	ldrb	r3, [r3, #0]
   18e6c:	78fa      	ldrb	r2, [r7, #3]
   18e6e:	429a      	cmp	r2, r3
   18e70:	d200      	bcs.n	18e74 <vPortValidateInterruptPriority+0x28>
   18e72:	e7fe      	b.n	18e72 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   18e74:	4b09      	ldr	r3, [pc, #36]	; (18e9c <vPortValidateInterruptPriority+0x50>)
   18e76:	681b      	ldr	r3, [r3, #0]
   18e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   18e7c:	4b08      	ldr	r3, [pc, #32]	; (18ea0 <vPortValidateInterruptPriority+0x54>)
   18e7e:	681b      	ldr	r3, [r3, #0]
   18e80:	429a      	cmp	r2, r3
   18e82:	d900      	bls.n	18e86 <vPortValidateInterruptPriority+0x3a>
   18e84:	e7fe      	b.n	18e84 <vPortValidateInterruptPriority+0x38>
	}
   18e86:	bf00      	nop
   18e88:	370c      	adds	r7, #12
   18e8a:	46bd      	mov	sp, r7
   18e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e90:	4770      	bx	lr
   18e92:	bf00      	nop
   18e94:	e000e3f0 	.word	0xe000e3f0
   18e98:	10004214 	.word	0x10004214
   18e9c:	e000ed0c 	.word	0xe000ed0c
   18ea0:	10004218 	.word	0x10004218

00018ea4 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   18ea4:	b580      	push	{r7, lr}
   18ea6:	b088      	sub	sp, #32
   18ea8:	af00      	add	r7, sp, #0
   18eaa:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   18eac:	4b36      	ldr	r3, [pc, #216]	; (18f88 <vPortSuppressTicksAndSleep+0xe4>)
   18eae:	681b      	ldr	r3, [r3, #0]
   18eb0:	687a      	ldr	r2, [r7, #4]
   18eb2:	429a      	cmp	r2, r3
   18eb4:	d902      	bls.n	18ebc <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   18eb6:	4b34      	ldr	r3, [pc, #208]	; (18f88 <vPortSuppressTicksAndSleep+0xe4>)
   18eb8:	681b      	ldr	r3, [r3, #0]
   18eba:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   18ebc:	687b      	ldr	r3, [r7, #4]
   18ebe:	3b01      	subs	r3, #1
   18ec0:	4a32      	ldr	r2, [pc, #200]	; (18f8c <vPortSuppressTicksAndSleep+0xe8>)
   18ec2:	6812      	ldr	r2, [r2, #0]
   18ec4:	fb02 f303 	mul.w	r3, r2, r3
   18ec8:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   18eca:	b672      	cpsid	i
	__asm volatile( "dsb" );
   18ecc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   18ed0:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
   18ed4:	f00b f84a 	bl	23f6c <am_hal_stimer_counter_get>
   18ed8:	4602      	mov	r2, r0
   18eda:	4b2d      	ldr	r3, [pc, #180]	; (18f90 <vPortSuppressTicksAndSleep+0xec>)
   18edc:	681b      	ldr	r3, [r3, #0]
   18ede:	1ad3      	subs	r3, r2, r3
   18ee0:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   18ee2:	f004 f8eb 	bl	1d0bc <eTaskConfirmSleepModeStatus>
   18ee6:	4603      	mov	r3, r0
   18ee8:	2b00      	cmp	r3, #0
   18eea:	d006      	beq.n	18efa <vPortSuppressTicksAndSleep+0x56>
   18eec:	4b27      	ldr	r3, [pc, #156]	; (18f8c <vPortSuppressTicksAndSleep+0xe8>)
   18eee:	681a      	ldr	r2, [r3, #0]
   18ef0:	69bb      	ldr	r3, [r7, #24]
   18ef2:	441a      	add	r2, r3
   18ef4:	69fb      	ldr	r3, [r7, #28]
   18ef6:	429a      	cmp	r2, r3
   18ef8:	d901      	bls.n	18efe <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   18efa:	b662      	cpsie	i
   18efc:	e03f      	b.n	18f7e <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   18efe:	69fa      	ldr	r2, [r7, #28]
   18f00:	69bb      	ldr	r3, [r7, #24]
   18f02:	1ad3      	subs	r3, r2, r3
   18f04:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   18f06:	69f9      	ldr	r1, [r7, #28]
   18f08:	2000      	movs	r0, #0
   18f0a:	f00b f835 	bl	23f78 <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   18f0e:	687b      	ldr	r3, [r7, #4]
   18f10:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   18f12:	6978      	ldr	r0, [r7, #20]
   18f14:	f002 fabf 	bl	1b496 <am_freertos_sleep>
   18f18:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
   18f1a:	697b      	ldr	r3, [r7, #20]
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	d004      	beq.n	18f2a <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
   18f20:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   18f24:	bf30      	wfi
			__asm volatile( "isb" );
   18f26:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   18f2a:	6878      	ldr	r0, [r7, #4]
   18f2c:	f002 fabf 	bl	1b4ae <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   18f30:	f00b f81c 	bl	23f6c <am_hal_stimer_counter_get>
   18f34:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   18f36:	693b      	ldr	r3, [r7, #16]
   18f38:	4a15      	ldr	r2, [pc, #84]	; (18f90 <vPortSuppressTicksAndSleep+0xec>)
   18f3a:	6812      	ldr	r2, [r2, #0]
   18f3c:	1a9b      	subs	r3, r3, r2
   18f3e:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   18f40:	4b12      	ldr	r3, [pc, #72]	; (18f8c <vPortSuppressTicksAndSleep+0xe8>)
   18f42:	681a      	ldr	r2, [r3, #0]
   18f44:	68fb      	ldr	r3, [r7, #12]
   18f46:	fbb3 f1f2 	udiv	r1, r3, r2
   18f4a:	fb02 f201 	mul.w	r2, r2, r1
   18f4e:	1a9b      	subs	r3, r3, r2
   18f50:	693a      	ldr	r2, [r7, #16]
   18f52:	1ad3      	subs	r3, r2, r3
   18f54:	4a0e      	ldr	r2, [pc, #56]	; (18f90 <vPortSuppressTicksAndSleep+0xec>)
   18f56:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   18f58:	4b0c      	ldr	r3, [pc, #48]	; (18f8c <vPortSuppressTicksAndSleep+0xe8>)
   18f5a:	681b      	ldr	r3, [r3, #0]
   18f5c:	68fa      	ldr	r2, [r7, #12]
   18f5e:	fbb2 f3f3 	udiv	r3, r2, r3
   18f62:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   18f64:	68f8      	ldr	r0, [r7, #12]
   18f66:	f003 fdbf 	bl	1cae8 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   18f6a:	2001      	movs	r0, #1
   18f6c:	f00b f862 	bl	24034 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   18f70:	4b06      	ldr	r3, [pc, #24]	; (18f8c <vPortSuppressTicksAndSleep+0xe8>)
   18f72:	681b      	ldr	r3, [r3, #0]
   18f74:	4619      	mov	r1, r3
   18f76:	2000      	movs	r0, #0
   18f78:	f00a fffe 	bl	23f78 <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   18f7c:	b662      	cpsie	i

	}
}
   18f7e:	bf00      	nop
   18f80:	3720      	adds	r7, #32
   18f82:	46bd      	mov	sp, r7
   18f84:	bd80      	pop	{r7, pc}
   18f86:	bf00      	nop
   18f88:	10004220 	.word	0x10004220
   18f8c:	1000421c 	.word	0x1000421c
   18f90:	10004210 	.word	0x10004210

00018f94 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
   18f94:	b580      	push	{r7, lr}
   18f96:	b088      	sub	sp, #32
   18f98:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
   18f9a:	2300      	movs	r3, #0
   18f9c:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   18f9e:	2300      	movs	r3, #0
   18fa0:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
   18fa2:	f00a ffe3 	bl	23f6c <am_hal_stimer_counter_get>
   18fa6:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   18fa8:	4b24      	ldr	r3, [pc, #144]	; (1903c <xPortStimerTickHandler+0xa8>)
   18faa:	681b      	ldr	r3, [r3, #0]
   18fac:	4619      	mov	r1, r3
   18fae:	2000      	movs	r0, #0
   18fb0:	f00a ffe2 	bl	23f78 <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
   18fb4:	4b22      	ldr	r3, [pc, #136]	; (19040 <xPortStimerTickHandler+0xac>)
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	693a      	ldr	r2, [r7, #16]
   18fba:	1ad3      	subs	r3, r2, r3
   18fbc:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   18fbe:	4b1f      	ldr	r3, [pc, #124]	; (1903c <xPortStimerTickHandler+0xa8>)
   18fc0:	681b      	ldr	r3, [r3, #0]
   18fc2:	68fa      	ldr	r2, [r7, #12]
   18fc4:	fbb2 f3f3 	udiv	r3, r2, r3
   18fc8:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
   18fca:	4b1c      	ldr	r3, [pc, #112]	; (1903c <xPortStimerTickHandler+0xa8>)
   18fcc:	681a      	ldr	r2, [r3, #0]
   18fce:	68fb      	ldr	r3, [r7, #12]
   18fd0:	fbb3 f1f2 	udiv	r1, r3, r2
   18fd4:	fb02 f201 	mul.w	r2, r2, r1
   18fd8:	1a9b      	subs	r3, r3, r2
   18fda:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
   18fdc:	693a      	ldr	r2, [r7, #16]
   18fde:	697b      	ldr	r3, [r7, #20]
   18fe0:	1ad3      	subs	r3, r2, r3
   18fe2:	4a17      	ldr	r2, [pc, #92]	; (19040 <xPortStimerTickHandler+0xac>)
   18fe4:	6013      	str	r3, [r2, #0]
	__asm volatile
   18fe6:	f3ef 8211 	mrs	r2, BASEPRI
   18fea:	f04f 0380 	mov.w	r3, #128	; 0x80
   18fee:	f383 8811 	msr	BASEPRI, r3
   18ff2:	f3bf 8f6f 	isb	sy
   18ff6:	f3bf 8f4f 	dsb	sy
   18ffa:	60ba      	str	r2, [r7, #8]
   18ffc:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   18ffe:	e008      	b.n	19012 <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   19000:	f003 fd90 	bl	1cb24 <xTaskIncrementTick>
   19004:	4603      	mov	r3, r0
   19006:	2b00      	cmp	r3, #0
   19008:	d101      	bne.n	1900e <xPortStimerTickHandler+0x7a>
   1900a:	69bb      	ldr	r3, [r7, #24]
   1900c:	e000      	b.n	19010 <xPortStimerTickHandler+0x7c>
   1900e:	2301      	movs	r3, #1
   19010:	61bb      	str	r3, [r7, #24]
        while (numTicksElapsed--)
   19012:	69fb      	ldr	r3, [r7, #28]
   19014:	1e5a      	subs	r2, r3, #1
   19016:	61fa      	str	r2, [r7, #28]
   19018:	2b00      	cmp	r3, #0
   1901a:	d1f1      	bne.n	19000 <xPortStimerTickHandler+0x6c>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   1901c:	69bb      	ldr	r3, [r7, #24]
   1901e:	2b00      	cmp	r3, #0
   19020:	d003      	beq.n	1902a <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   19022:	4b08      	ldr	r3, [pc, #32]	; (19044 <xPortStimerTickHandler+0xb0>)
   19024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19028:	601a      	str	r2, [r3, #0]
   1902a:	2300      	movs	r3, #0
   1902c:	603b      	str	r3, [r7, #0]
	__asm volatile
   1902e:	683b      	ldr	r3, [r7, #0]
   19030:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   19034:	bf00      	nop
   19036:	3720      	adds	r7, #32
   19038:	46bd      	mov	sp, r7
   1903a:	bd80      	pop	{r7, pc}
   1903c:	1000421c 	.word	0x1000421c
   19040:	10004210 	.word	0x10004210
   19044:	e000ed04 	.word	0xe000ed04

00019048 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   19048:	b580      	push	{r7, lr}
   1904a:	b082      	sub	sp, #8
   1904c:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1904e:	2000      	movs	r0, #0
   19050:	f00a fff6 	bl	24040 <am_hal_stimer_int_status_get>
   19054:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   19056:	687b      	ldr	r3, [r7, #4]
   19058:	f003 0301 	and.w	r3, r3, #1
   1905c:	2b00      	cmp	r3, #0
   1905e:	d004      	beq.n	1906a <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   19060:	2001      	movs	r0, #1
   19062:	f00a ffe7 	bl	24034 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
   19066:	f7ff ff95 	bl	18f94 <xPortStimerTickHandler>
    }
}
   1906a:	bf00      	nop
   1906c:	3708      	adds	r7, #8
   1906e:	46bd      	mov	sp, r7
   19070:	bd80      	pop	{r7, pc}
	...

00019074 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   19074:	b580      	push	{r7, lr}
   19076:	b082      	sub	sp, #8
   19078:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1907a:	4b19      	ldr	r3, [pc, #100]	; (190e0 <vPortSetupTimerInterrupt+0x6c>)
   1907c:	2220      	movs	r2, #32
   1907e:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
   19080:	4b17      	ldr	r3, [pc, #92]	; (190e0 <vPortSetupTimerInterrupt+0x6c>)
   19082:	681b      	ldr	r3, [r3, #0]
   19084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19088:	fbb2 f3f3 	udiv	r3, r2, r3
   1908c:	4a15      	ldr	r2, [pc, #84]	; (190e4 <vPortSetupTimerInterrupt+0x70>)
   1908e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   19090:	2001      	movs	r0, #1
   19092:	f00a ffc5 	bl	24020 <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   19096:	2107      	movs	r1, #7
   19098:	2017      	movs	r0, #23
   1909a:	f7ff fd09 	bl	18ab0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   1909e:	2017      	movs	r0, #23
   190a0:	f7ff fce8 	bl	18a74 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   190a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   190a8:	f00a ff56 	bl	23f58 <am_hal_stimer_config>
   190ac:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   190ae:	f00a ff5d 	bl	23f6c <am_hal_stimer_counter_get>
   190b2:	4602      	mov	r2, r0
   190b4:	4b0c      	ldr	r3, [pc, #48]	; (190e8 <vPortSetupTimerInterrupt+0x74>)
   190b6:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   190b8:	4b09      	ldr	r3, [pc, #36]	; (190e0 <vPortSetupTimerInterrupt+0x6c>)
   190ba:	681b      	ldr	r3, [r3, #0]
   190bc:	4619      	mov	r1, r3
   190be:	2000      	movs	r0, #0
   190c0:	f00a ff5a 	bl	23f78 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
   190c4:	687a      	ldr	r2, [r7, #4]
   190c6:	4b09      	ldr	r3, [pc, #36]	; (190ec <vPortSetupTimerInterrupt+0x78>)
   190c8:	4013      	ands	r3, r2
   190ca:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   190ce:	f043 0301 	orr.w	r3, r3, #1
   190d2:	4618      	mov	r0, r3
   190d4:	f00a ff40 	bl	23f58 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   190d8:	bf00      	nop
   190da:	3708      	adds	r7, #8
   190dc:	46bd      	mov	sp, r7
   190de:	bd80      	pop	{r7, pc}
   190e0:	1000421c 	.word	0x1000421c
   190e4:	10004220 	.word	0x10004220
   190e8:	10004210 	.word	0x10004210
   190ec:	7ffffef0 	.word	0x7ffffef0

000190f0 <AnpcAnsDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnpcAnsDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   190f0:	b580      	push	{r7, lr}
   190f2:	b084      	sub	sp, #16
   190f4:	af02      	add	r7, sp, #8
   190f6:	4603      	mov	r3, r0
   190f8:	6039      	str	r1, [r7, #0]
   190fa:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attAnsSvcUuid,
   190fc:	79f8      	ldrb	r0, [r7, #7]
   190fe:	683b      	ldr	r3, [r7, #0]
   19100:	9301      	str	r3, [sp, #4]
   19102:	4b05      	ldr	r3, [pc, #20]	; (19118 <AnpcAnsDiscover+0x28>)
   19104:	9300      	str	r3, [sp, #0]
   19106:	2307      	movs	r3, #7
   19108:	4a04      	ldr	r2, [pc, #16]	; (1911c <AnpcAnsDiscover+0x2c>)
   1910a:	2102      	movs	r1, #2
   1910c:	f004 ff20 	bl	1df50 <AppDiscFindService>
                     ANPC_ANS_HDL_LIST_LEN, (attcDiscChar_t **) anpcAnsDiscCharList, pHdlList);
}
   19110:	bf00      	nop
   19112:	3708      	adds	r7, #8
   19114:	46bd      	mov	sp, r7
   19116:	bd80      	pop	{r7, pc}
   19118:	10002bc8 	.word	0x10002bc8
   1911c:	00025c84 	.word	0x00025c84

00019120 <AnpcAnsValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t AnpcAnsValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   19120:	b580      	push	{r7, lr}
   19122:	b08a      	sub	sp, #40	; 0x28
   19124:	af00      	add	r7, sp, #0
   19126:	6078      	str	r0, [r7, #4]
   19128:	6039      	str	r1, [r7, #0]
  uint8_t   *p;
  uint16_t  catIdMask;
  uint8_t   catId;
  uint8_t   numAlert;
  uint8_t   status = ATT_SUCCESS;
   1912a:	2300      	movs	r3, #0
   1912c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t   buf[19];
  
  /* new alert */
  if (pMsg->handle == pHdlList[ANPC_ANS_NA_HDL_IDX])
   19130:	683b      	ldr	r3, [r7, #0]
   19132:	895a      	ldrh	r2, [r3, #10]
   19134:	687b      	ldr	r3, [r7, #4]
   19136:	3302      	adds	r3, #2
   19138:	881b      	ldrh	r3, [r3, #0]
   1913a:	429a      	cmp	r2, r3
   1913c:	d12c      	bne.n	19198 <AnpcAnsValueUpdate+0x78>
  {
    /* parse value */
    p = pMsg->pValue;
   1913e:	683b      	ldr	r3, [r7, #0]
   19140:	685b      	ldr	r3, [r3, #4]
   19142:	623b      	str	r3, [r7, #32]
    BSTREAM_TO_UINT8(catId, p);
   19144:	6a3b      	ldr	r3, [r7, #32]
   19146:	1c5a      	adds	r2, r3, #1
   19148:	623a      	str	r2, [r7, #32]
   1914a:	781b      	ldrb	r3, [r3, #0]
   1914c:	77fb      	strb	r3, [r7, #31]
    BSTREAM_TO_UINT8(numAlert, p);
   1914e:	6a3b      	ldr	r3, [r7, #32]
   19150:	1c5a      	adds	r2, r3, #1
   19152:	623a      	str	r2, [r7, #32]
   19154:	781b      	ldrb	r3, [r3, #0]
   19156:	77bb      	strb	r3, [r7, #30]
    
    /* null terminate string before printing */
    memcpy(buf, p, pMsg->valueLen - 2);
   19158:	683b      	ldr	r3, [r7, #0]
   1915a:	891b      	ldrh	r3, [r3, #8]
   1915c:	3b02      	subs	r3, #2
   1915e:	461a      	mov	r2, r3
   19160:	f107 0308 	add.w	r3, r7, #8
   19164:	6a39      	ldr	r1, [r7, #32]
   19166:	4618      	mov	r0, r3
   19168:	f7f2 fffa 	bl	c160 <memcpy>
    buf[pMsg->valueLen - 2] = '\0';
   1916c:	683b      	ldr	r3, [r7, #0]
   1916e:	891b      	ldrh	r3, [r3, #8]
   19170:	3b02      	subs	r3, #2
   19172:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19176:	4413      	add	r3, r2
   19178:	2200      	movs	r2, #0
   1917a:	f803 2c20 	strb.w	r2, [r3, #-32]
    
    APP_TRACE_INFO2("New alert cat:%d num:%d", catId, numAlert);
   1917e:	7ffb      	ldrb	r3, [r7, #31]
   19180:	7fba      	ldrb	r2, [r7, #30]
   19182:	4619      	mov	r1, r3
   19184:	483e      	ldr	r0, [pc, #248]	; (19280 <AnpcAnsValueUpdate+0x160>)
   19186:	f002 fb93 	bl	1b8b0 <WsfTrace>
    APP_TRACE_INFO1("Msg:%s", buf);
   1918a:	f107 0308 	add.w	r3, r7, #8
   1918e:	4619      	mov	r1, r3
   19190:	483c      	ldr	r0, [pc, #240]	; (19284 <AnpcAnsValueUpdate+0x164>)
   19192:	f002 fb8d 	bl	1b8b0 <WsfTrace>
   19196:	e06c      	b.n	19272 <AnpcAnsValueUpdate+0x152>
  }
  /* unread alert status */
  else if (pMsg->handle == pHdlList[ANPC_ANS_UAS_HDL_IDX])
   19198:	683b      	ldr	r3, [r7, #0]
   1919a:	895a      	ldrh	r2, [r3, #10]
   1919c:	687b      	ldr	r3, [r7, #4]
   1919e:	3308      	adds	r3, #8
   191a0:	881b      	ldrh	r3, [r3, #0]
   191a2:	429a      	cmp	r2, r3
   191a4:	d113      	bne.n	191ce <AnpcAnsValueUpdate+0xae>
  {
    /* parse value */
    p = pMsg->pValue;
   191a6:	683b      	ldr	r3, [r7, #0]
   191a8:	685b      	ldr	r3, [r3, #4]
   191aa:	623b      	str	r3, [r7, #32]
    BSTREAM_TO_UINT8(catId, p);
   191ac:	6a3b      	ldr	r3, [r7, #32]
   191ae:	1c5a      	adds	r2, r3, #1
   191b0:	623a      	str	r2, [r7, #32]
   191b2:	781b      	ldrb	r3, [r3, #0]
   191b4:	77fb      	strb	r3, [r7, #31]
    BSTREAM_TO_UINT8(numAlert, p);
   191b6:	6a3b      	ldr	r3, [r7, #32]
   191b8:	1c5a      	adds	r2, r3, #1
   191ba:	623a      	str	r2, [r7, #32]
   191bc:	781b      	ldrb	r3, [r3, #0]
   191be:	77bb      	strb	r3, [r7, #30]
    
    APP_TRACE_INFO2("Unread alert status cat:%d num:%d", catId, numAlert);
   191c0:	7ffb      	ldrb	r3, [r7, #31]
   191c2:	7fba      	ldrb	r2, [r7, #30]
   191c4:	4619      	mov	r1, r3
   191c6:	4830      	ldr	r0, [pc, #192]	; (19288 <AnpcAnsValueUpdate+0x168>)
   191c8:	f002 fb72 	bl	1b8b0 <WsfTrace>
   191cc:	e051      	b.n	19272 <AnpcAnsValueUpdate+0x152>
  }
  /* supported new alert category */
  else if (pMsg->handle == pHdlList[ANPC_ANS_SNAC_HDL_IDX])
   191ce:	683b      	ldr	r3, [r7, #0]
   191d0:	895a      	ldrh	r2, [r3, #10]
   191d2:	687b      	ldr	r3, [r7, #4]
   191d4:	881b      	ldrh	r3, [r3, #0]
   191d6:	429a      	cmp	r2, r3
   191d8:	d120      	bne.n	1921c <AnpcAnsValueUpdate+0xfc>
  {
    /* parse value */
    p = pMsg->pValue;
   191da:	683b      	ldr	r3, [r7, #0]
   191dc:	685b      	ldr	r3, [r3, #4]
   191de:	623b      	str	r3, [r7, #32]
    if (pMsg->valueLen == 1)
   191e0:	683b      	ldr	r3, [r7, #0]
   191e2:	891b      	ldrh	r3, [r3, #8]
   191e4:	2b01      	cmp	r3, #1
   191e6:	d105      	bne.n	191f4 <AnpcAnsValueUpdate+0xd4>
    {
      BSTREAM_TO_UINT8(catIdMask, p);
   191e8:	6a3b      	ldr	r3, [r7, #32]
   191ea:	1c5a      	adds	r2, r3, #1
   191ec:	623a      	str	r2, [r7, #32]
   191ee:	781b      	ldrb	r3, [r3, #0]
   191f0:	84fb      	strh	r3, [r7, #38]	; 0x26
   191f2:	e00d      	b.n	19210 <AnpcAnsValueUpdate+0xf0>
    }
    else
    {
      BSTREAM_TO_UINT16(catIdMask, p);
   191f4:	6a3b      	ldr	r3, [r7, #32]
   191f6:	781b      	ldrb	r3, [r3, #0]
   191f8:	b29a      	uxth	r2, r3
   191fa:	6a3b      	ldr	r3, [r7, #32]
   191fc:	3301      	adds	r3, #1
   191fe:	781b      	ldrb	r3, [r3, #0]
   19200:	b29b      	uxth	r3, r3
   19202:	021b      	lsls	r3, r3, #8
   19204:	b29b      	uxth	r3, r3
   19206:	4413      	add	r3, r2
   19208:	84fb      	strh	r3, [r7, #38]	; 0x26
   1920a:	6a3b      	ldr	r3, [r7, #32]
   1920c:	3302      	adds	r3, #2
   1920e:	623b      	str	r3, [r7, #32]
    }
    
    APP_TRACE_INFO1("Supported new alert category: 0x%04x", catIdMask);
   19210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   19212:	4619      	mov	r1, r3
   19214:	481d      	ldr	r0, [pc, #116]	; (1928c <AnpcAnsValueUpdate+0x16c>)
   19216:	f002 fb4b 	bl	1b8b0 <WsfTrace>
   1921a:	e02a      	b.n	19272 <AnpcAnsValueUpdate+0x152>
  }
  /* supported unread alert category */
  else if (pMsg->handle == pHdlList[ANPC_ANS_SUAC_HDL_IDX])
   1921c:	683b      	ldr	r3, [r7, #0]
   1921e:	895a      	ldrh	r2, [r3, #10]
   19220:	687b      	ldr	r3, [r7, #4]
   19222:	3306      	adds	r3, #6
   19224:	881b      	ldrh	r3, [r3, #0]
   19226:	429a      	cmp	r2, r3
   19228:	d120      	bne.n	1926c <AnpcAnsValueUpdate+0x14c>
  {
    /* parse value */
    p = pMsg->pValue;
   1922a:	683b      	ldr	r3, [r7, #0]
   1922c:	685b      	ldr	r3, [r3, #4]
   1922e:	623b      	str	r3, [r7, #32]
    if (pMsg->valueLen == 1)
   19230:	683b      	ldr	r3, [r7, #0]
   19232:	891b      	ldrh	r3, [r3, #8]
   19234:	2b01      	cmp	r3, #1
   19236:	d105      	bne.n	19244 <AnpcAnsValueUpdate+0x124>
    {
      BSTREAM_TO_UINT8(catIdMask, p);
   19238:	6a3b      	ldr	r3, [r7, #32]
   1923a:	1c5a      	adds	r2, r3, #1
   1923c:	623a      	str	r2, [r7, #32]
   1923e:	781b      	ldrb	r3, [r3, #0]
   19240:	84fb      	strh	r3, [r7, #38]	; 0x26
   19242:	e00d      	b.n	19260 <AnpcAnsValueUpdate+0x140>
    }
    else
    {
      BSTREAM_TO_UINT16(catIdMask, p);
   19244:	6a3b      	ldr	r3, [r7, #32]
   19246:	781b      	ldrb	r3, [r3, #0]
   19248:	b29a      	uxth	r2, r3
   1924a:	6a3b      	ldr	r3, [r7, #32]
   1924c:	3301      	adds	r3, #1
   1924e:	781b      	ldrb	r3, [r3, #0]
   19250:	b29b      	uxth	r3, r3
   19252:	021b      	lsls	r3, r3, #8
   19254:	b29b      	uxth	r3, r3
   19256:	4413      	add	r3, r2
   19258:	84fb      	strh	r3, [r7, #38]	; 0x26
   1925a:	6a3b      	ldr	r3, [r7, #32]
   1925c:	3302      	adds	r3, #2
   1925e:	623b      	str	r3, [r7, #32]
    }
    
    APP_TRACE_INFO1("Supported unread alert category: 0x%04x", catIdMask);
   19260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   19262:	4619      	mov	r1, r3
   19264:	480a      	ldr	r0, [pc, #40]	; (19290 <AnpcAnsValueUpdate+0x170>)
   19266:	f002 fb23 	bl	1b8b0 <WsfTrace>
   1926a:	e002      	b.n	19272 <AnpcAnsValueUpdate+0x152>
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   1926c:	230a      	movs	r3, #10
   1926e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }
  
  return status;
   19272:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
   19276:	4618      	mov	r0, r3
   19278:	3728      	adds	r7, #40	; 0x28
   1927a:	46bd      	mov	sp, r7
   1927c:	bd80      	pop	{r7, pc}
   1927e:	bf00      	nop
   19280:	000253a8 	.word	0x000253a8
   19284:	000253c0 	.word	0x000253c0
   19288:	000253c8 	.word	0x000253c8
   1928c:	000253ec 	.word	0x000253ec
   19290:	00025414 	.word	0x00025414

00019294 <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
   19294:	b480      	push	{r7}
   19296:	af00      	add	r7, sp, #0
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
    return;
   19298:	bf00      	nop
}
   1929a:	46bd      	mov	sp, r7
   1929c:	f85d 7b04 	ldr.w	r7, [sp], #4
   192a0:	4770      	bx	lr
	...

000192a4 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr)
{
   192a4:	b580      	push	{r7, lr}
   192a6:	b084      	sub	sp, #16
   192a8:	af00      	add	r7, sp, #0
   192aa:	4603      	mov	r3, r0
   192ac:	6039      	str	r1, [r7, #0]
   192ae:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   192b0:	4b22      	ldr	r3, [pc, #136]	; (1933c <AppDbNewRecord+0x98>)
   192b2:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   192b4:	2303      	movs	r3, #3
   192b6:	72fb      	strb	r3, [r7, #11]
   192b8:	e00a      	b.n	192d0 <AppDbNewRecord+0x2c>
  {
    if (!pRec->inUse)
   192ba:	68fb      	ldr	r3, [r7, #12]
   192bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   192c0:	2b00      	cmp	r3, #0
   192c2:	d009      	beq.n	192d8 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   192c4:	7afb      	ldrb	r3, [r7, #11]
   192c6:	3b01      	subs	r3, #1
   192c8:	72fb      	strb	r3, [r7, #11]
   192ca:	68fb      	ldr	r3, [r7, #12]
   192cc:	33b0      	adds	r3, #176	; 0xb0
   192ce:	60fb      	str	r3, [r7, #12]
   192d0:	7afb      	ldrb	r3, [r7, #11]
   192d2:	2b00      	cmp	r3, #0
   192d4:	d1f1      	bne.n	192ba <AppDbNewRecord+0x16>
   192d6:	e000      	b.n	192da <AppDbNewRecord+0x36>
    {
      break;
   192d8:	bf00      	nop
    }
  }
  
  /* if all records were allocated */
  if (i == 0)
   192da:	7afb      	ldrb	r3, [r7, #11]
   192dc:	2b00      	cmp	r3, #0
   192de:	d10f      	bne.n	19300 <AppDbNewRecord+0x5c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   192e0:	4b17      	ldr	r3, [pc, #92]	; (19340 <AppDbNewRecord+0x9c>)
   192e2:	681b      	ldr	r3, [r3, #0]
   192e4:	60fb      	str	r3, [r7, #12]
    
    /* get next record to overwrite */
    pAppDbNewRec++;
   192e6:	4b16      	ldr	r3, [pc, #88]	; (19340 <AppDbNewRecord+0x9c>)
   192e8:	681b      	ldr	r3, [r3, #0]
   192ea:	33b0      	adds	r3, #176	; 0xb0
   192ec:	4a14      	ldr	r2, [pc, #80]	; (19340 <AppDbNewRecord+0x9c>)
   192ee:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   192f0:	4b13      	ldr	r3, [pc, #76]	; (19340 <AppDbNewRecord+0x9c>)
   192f2:	681b      	ldr	r3, [r3, #0]
   192f4:	4a13      	ldr	r2, [pc, #76]	; (19344 <AppDbNewRecord+0xa0>)
   192f6:	4293      	cmp	r3, r2
   192f8:	d102      	bne.n	19300 <AppDbNewRecord+0x5c>
    {
      pAppDbNewRec = appDb.rec;
   192fa:	4b11      	ldr	r3, [pc, #68]	; (19340 <AppDbNewRecord+0x9c>)
   192fc:	4a0f      	ldr	r2, [pc, #60]	; (1933c <AppDbNewRecord+0x98>)
   192fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   19300:	22b0      	movs	r2, #176	; 0xb0
   19302:	2100      	movs	r1, #0
   19304:	68f8      	ldr	r0, [r7, #12]
   19306:	f7f3 f829 	bl	c35c <memset>
  pRec->inUse = TRUE;
   1930a:	68fb      	ldr	r3, [r7, #12]
   1930c:	2201      	movs	r2, #1
   1930e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   19312:	68fb      	ldr	r3, [r7, #12]
   19314:	79fa      	ldrb	r2, [r7, #7]
   19316:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   19318:	68fb      	ldr	r3, [r7, #12]
   1931a:	6839      	ldr	r1, [r7, #0]
   1931c:	4618      	mov	r0, r3
   1931e:	f000 fc71 	bl	19c04 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   19322:	68fb      	ldr	r3, [r7, #12]
   19324:	2200      	movs	r2, #0
   19326:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   1932a:	68fb      	ldr	r3, [r7, #12]
   1932c:	2200      	movs	r2, #0
   1932e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return (appDbHdl_t) pRec;
   19332:	68fb      	ldr	r3, [r7, #12]
}
   19334:	4618      	mov	r0, r3
   19336:	3710      	adds	r7, #16
   19338:	46bd      	mov	sp, r7
   1933a:	bd80      	pop	{r7, pc}
   1933c:	10004224 	.word	0x10004224
   19340:	10002be4 	.word	0x10002be4
   19344:	10004434 	.word	0x10004434

00019348 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   19348:	b580      	push	{r7, lr}
   1934a:	b084      	sub	sp, #16
   1934c:	af00      	add	r7, sp, #0
   1934e:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   19350:	687b      	ldr	r3, [r7, #4]
   19352:	2b00      	cmp	r3, #0
   19354:	d102      	bne.n	1935c <AppDbGetNextRecord+0x14>
  {
    pRec = appDb.rec;
   19356:	4b14      	ldr	r3, [pc, #80]	; (193a8 <AppDbGetNextRecord+0x60>)
   19358:	60fb      	str	r3, [r7, #12]
   1935a:	e01c      	b.n	19396 <AppDbGetNextRecord+0x4e>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   1935c:	6878      	ldr	r0, [r7, #4]
   1935e:	f000 f859 	bl	19414 <AppDbRecordInUse>
   19362:	4603      	mov	r3, r0
   19364:	2b00      	cmp	r3, #0
   19366:	d005      	beq.n	19374 <AppDbGetNextRecord+0x2c>
  {
    pRec = (appDbRec_t *)hdl;
   19368:	687b      	ldr	r3, [r7, #4]
   1936a:	60fb      	str	r3, [r7, #12]
    pRec++;
   1936c:	68fb      	ldr	r3, [r7, #12]
   1936e:	33b0      	adds	r3, #176	; 0xb0
   19370:	60fb      	str	r3, [r7, #12]
   19372:	e010      	b.n	19396 <AppDbGetNextRecord+0x4e>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   19374:	2300      	movs	r3, #0
   19376:	e013      	b.n	193a0 <AppDbGetNextRecord+0x58>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   19378:	68fb      	ldr	r3, [r7, #12]
   1937a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1937e:	2b00      	cmp	r3, #0
   19380:	d006      	beq.n	19390 <AppDbGetNextRecord+0x48>
   19382:	68fb      	ldr	r3, [r7, #12]
   19384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19388:	2b00      	cmp	r3, #0
   1938a:	d001      	beq.n	19390 <AppDbGetNextRecord+0x48>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   1938c:	68fb      	ldr	r3, [r7, #12]
   1938e:	e007      	b.n	193a0 <AppDbGetNextRecord+0x58>
    }

    /* look for next record */
    pRec++;
   19390:	68fb      	ldr	r3, [r7, #12]
   19392:	33b0      	adds	r3, #176	; 0xb0
   19394:	60fb      	str	r3, [r7, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   19396:	68fb      	ldr	r3, [r7, #12]
   19398:	4a04      	ldr	r2, [pc, #16]	; (193ac <AppDbGetNextRecord+0x64>)
   1939a:	4293      	cmp	r3, r2
   1939c:	d3ec      	bcc.n	19378 <AppDbGetNextRecord+0x30>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   1939e:	2300      	movs	r3, #0
}
   193a0:	4618      	mov	r0, r3
   193a2:	3710      	adds	r7, #16
   193a4:	46bd      	mov	sp, r7
   193a6:	bd80      	pop	{r7, pc}
   193a8:	10004224 	.word	0x10004224
   193ac:	10004434 	.word	0x10004434

000193b0 <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   193b0:	b480      	push	{r7}
   193b2:	b083      	sub	sp, #12
   193b4:	af00      	add	r7, sp, #0
   193b6:	6078      	str	r0, [r7, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   193b8:	687b      	ldr	r3, [r7, #4]
   193ba:	2200      	movs	r2, #0
   193bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   193c0:	bf00      	nop
   193c2:	370c      	adds	r7, #12
   193c4:	46bd      	mov	sp, r7
   193c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   193ca:	4770      	bx	lr

000193cc <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   193cc:	b480      	push	{r7}
   193ce:	b083      	sub	sp, #12
   193d0:	af00      	add	r7, sp, #0
   193d2:	6078      	str	r0, [r7, #4]
   193d4:	460b      	mov	r3, r1
   193d6:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   193d8:	687b      	ldr	r3, [r7, #4]
   193da:	2201      	movs	r2, #1
   193dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   193e0:	687b      	ldr	r3, [r7, #4]
   193e2:	78fa      	ldrb	r2, [r7, #3]
   193e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
   193e8:	bf00      	nop
   193ea:	370c      	adds	r7, #12
   193ec:	46bd      	mov	sp, r7
   193ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   193f2:	4770      	bx	lr

000193f4 <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   193f4:	b580      	push	{r7, lr}
   193f6:	b082      	sub	sp, #8
   193f8:	af00      	add	r7, sp, #0
   193fa:	6078      	str	r0, [r7, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   193fc:	687b      	ldr	r3, [r7, #4]
   193fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19402:	2b00      	cmp	r3, #0
   19404:	d102      	bne.n	1940c <AppDbCheckValidRecord+0x18>
  {
    AppDbDeleteRecord(hdl);
   19406:	6878      	ldr	r0, [r7, #4]
   19408:	f7ff ffd2 	bl	193b0 <AppDbDeleteRecord>
  }
}
   1940c:	bf00      	nop
   1940e:	3708      	adds	r7, #8
   19410:	46bd      	mov	sp, r7
   19412:	bd80      	pop	{r7, pc}

00019414 <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   19414:	b480      	push	{r7}
   19416:	b085      	sub	sp, #20
   19418:	af00      	add	r7, sp, #0
   1941a:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec = appDb.rec;
   1941c:	4b12      	ldr	r3, [pc, #72]	; (19468 <AppDbRecordInUse+0x54>)
   1941e:	60fb      	str	r3, [r7, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19420:	2303      	movs	r3, #3
   19422:	72fb      	strb	r3, [r7, #11]
   19424:	e015      	b.n	19452 <AppDbRecordInUse+0x3e>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   19426:	68fb      	ldr	r3, [r7, #12]
   19428:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1942c:	2b00      	cmp	r3, #0
   1942e:	d00a      	beq.n	19446 <AppDbRecordInUse+0x32>
   19430:	68fb      	ldr	r3, [r7, #12]
   19432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19436:	2b00      	cmp	r3, #0
   19438:	d005      	beq.n	19446 <AppDbRecordInUse+0x32>
   1943a:	68fa      	ldr	r2, [r7, #12]
   1943c:	687b      	ldr	r3, [r7, #4]
   1943e:	429a      	cmp	r2, r3
   19440:	d101      	bne.n	19446 <AppDbRecordInUse+0x32>
    {
      return TRUE;
   19442:	2301      	movs	r3, #1
   19444:	e009      	b.n	1945a <AppDbRecordInUse+0x46>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19446:	7afb      	ldrb	r3, [r7, #11]
   19448:	3b01      	subs	r3, #1
   1944a:	72fb      	strb	r3, [r7, #11]
   1944c:	68fb      	ldr	r3, [r7, #12]
   1944e:	33b0      	adds	r3, #176	; 0xb0
   19450:	60fb      	str	r3, [r7, #12]
   19452:	7afb      	ldrb	r3, [r7, #11]
   19454:	2b00      	cmp	r3, #0
   19456:	d1e6      	bne.n	19426 <AppDbRecordInUse+0x12>
    }
  }

  return FALSE;
   19458:	2300      	movs	r3, #0
}
   1945a:	4618      	mov	r0, r3
   1945c:	3714      	adds	r7, #20
   1945e:	46bd      	mov	sp, r7
   19460:	f85d 7b04 	ldr.w	r7, [sp], #4
   19464:	4770      	bx	lr
   19466:	bf00      	nop
   19468:	10004224 	.word	0x10004224

0001946c <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   1946c:	b480      	push	{r7}
   1946e:	b083      	sub	sp, #12
   19470:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   19472:	4b0e      	ldr	r3, [pc, #56]	; (194ac <AppDbCheckBonded+0x40>)
   19474:	607b      	str	r3, [r7, #4]
  uint8_t     i;
  
  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19476:	2303      	movs	r3, #3
   19478:	70fb      	strb	r3, [r7, #3]
   1947a:	e00c      	b.n	19496 <AppDbCheckBonded+0x2a>
  {
    if (pRec->inUse)
   1947c:	687b      	ldr	r3, [r7, #4]
   1947e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19482:	2b00      	cmp	r3, #0
   19484:	d001      	beq.n	1948a <AppDbCheckBonded+0x1e>
    {
      return TRUE;
   19486:	2301      	movs	r3, #1
   19488:	e009      	b.n	1949e <AppDbCheckBonded+0x32>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1948a:	78fb      	ldrb	r3, [r7, #3]
   1948c:	3b01      	subs	r3, #1
   1948e:	70fb      	strb	r3, [r7, #3]
   19490:	687b      	ldr	r3, [r7, #4]
   19492:	33b0      	adds	r3, #176	; 0xb0
   19494:	607b      	str	r3, [r7, #4]
   19496:	78fb      	ldrb	r3, [r7, #3]
   19498:	2b00      	cmp	r3, #0
   1949a:	d1ef      	bne.n	1947c <AppDbCheckBonded+0x10>
    }
  }
  
  return FALSE;
   1949c:	2300      	movs	r3, #0
}
   1949e:	4618      	mov	r0, r3
   194a0:	370c      	adds	r7, #12
   194a2:	46bd      	mov	sp, r7
   194a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   194a8:	4770      	bx	lr
   194aa:	bf00      	nop
   194ac:	10004224 	.word	0x10004224

000194b0 <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
   194b0:	b480      	push	{r7}
   194b2:	b083      	sub	sp, #12
   194b4:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   194b6:	4b0c      	ldr	r3, [pc, #48]	; (194e8 <AppDbDeleteAllRecords+0x38>)
   194b8:	607b      	str	r3, [r7, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   194ba:	2303      	movs	r3, #3
   194bc:	70fb      	strb	r3, [r7, #3]
   194be:	e009      	b.n	194d4 <AppDbDeleteAllRecords+0x24>
  {
    pRec->inUse = FALSE;
   194c0:	687b      	ldr	r3, [r7, #4]
   194c2:	2200      	movs	r2, #0
   194c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   194c8:	78fb      	ldrb	r3, [r7, #3]
   194ca:	3b01      	subs	r3, #1
   194cc:	70fb      	strb	r3, [r7, #3]
   194ce:	687b      	ldr	r3, [r7, #4]
   194d0:	33b0      	adds	r3, #176	; 0xb0
   194d2:	607b      	str	r3, [r7, #4]
   194d4:	78fb      	ldrb	r3, [r7, #3]
   194d6:	2b00      	cmp	r3, #0
   194d8:	d1f2      	bne.n	194c0 <AppDbDeleteAllRecords+0x10>
  }  
}
   194da:	bf00      	nop
   194dc:	370c      	adds	r7, #12
   194de:	46bd      	mov	sp, r7
   194e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   194e4:	4770      	bx	lr
   194e6:	bf00      	nop
   194e8:	10004224 	.word	0x10004224

000194ec <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   194ec:	b580      	push	{r7, lr}
   194ee:	b084      	sub	sp, #16
   194f0:	af00      	add	r7, sp, #0
   194f2:	4603      	mov	r3, r0
   194f4:	6039      	str	r1, [r7, #0]
   194f6:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   194f8:	4b16      	ldr	r3, [pc, #88]	; (19554 <AppDbFindByAddr+0x68>)
   194fa:	60fb      	str	r3, [r7, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   194fc:	79fb      	ldrb	r3, [r7, #7]
   194fe:	4618      	mov	r0, r3
   19500:	f7f6 fd10 	bl	ff24 <DmHostAddrType>
   19504:	4603      	mov	r3, r0
   19506:	72bb      	strb	r3, [r7, #10]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19508:	2303      	movs	r3, #3
   1950a:	72fb      	strb	r3, [r7, #11]
   1950c:	e019      	b.n	19542 <AppDbFindByAddr+0x56>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1950e:	68fb      	ldr	r3, [r7, #12]
   19510:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19514:	2b00      	cmp	r3, #0
   19516:	d00e      	beq.n	19536 <AppDbFindByAddr+0x4a>
   19518:	68fb      	ldr	r3, [r7, #12]
   1951a:	799b      	ldrb	r3, [r3, #6]
   1951c:	7aba      	ldrb	r2, [r7, #10]
   1951e:	429a      	cmp	r2, r3
   19520:	d109      	bne.n	19536 <AppDbFindByAddr+0x4a>
   19522:	68fb      	ldr	r3, [r7, #12]
   19524:	6839      	ldr	r1, [r7, #0]
   19526:	4618      	mov	r0, r3
   19528:	f000 fb7a 	bl	19c20 <BdaCmp>
   1952c:	4603      	mov	r3, r0
   1952e:	2b00      	cmp	r3, #0
   19530:	d001      	beq.n	19536 <AppDbFindByAddr+0x4a>
    {
      return (appDbHdl_t) pRec;
   19532:	68fb      	ldr	r3, [r7, #12]
   19534:	e009      	b.n	1954a <AppDbFindByAddr+0x5e>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19536:	7afb      	ldrb	r3, [r7, #11]
   19538:	3b01      	subs	r3, #1
   1953a:	72fb      	strb	r3, [r7, #11]
   1953c:	68fb      	ldr	r3, [r7, #12]
   1953e:	33b0      	adds	r3, #176	; 0xb0
   19540:	60fb      	str	r3, [r7, #12]
   19542:	7afb      	ldrb	r3, [r7, #11]
   19544:	2b00      	cmp	r3, #0
   19546:	d1e2      	bne.n	1950e <AppDbFindByAddr+0x22>
    }
  }
  
  return APP_DB_HDL_NONE;
   19548:	2300      	movs	r3, #0
}
   1954a:	4618      	mov	r0, r3
   1954c:	3710      	adds	r7, #16
   1954e:	46bd      	mov	sp, r7
   19550:	bd80      	pop	{r7, pc}
   19552:	bf00      	nop
   19554:	10004224 	.word	0x10004224

00019558 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   19558:	b580      	push	{r7, lr}
   1955a:	b084      	sub	sp, #16
   1955c:	af00      	add	r7, sp, #0
   1955e:	4603      	mov	r3, r0
   19560:	6039      	str	r1, [r7, #0]
   19562:	80fb      	strh	r3, [r7, #6]
  appDbRec_t  *pRec = appDb.rec;
   19564:	4b14      	ldr	r3, [pc, #80]	; (195b8 <AppDbFindByLtkReq+0x60>)
   19566:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19568:	2303      	movs	r3, #3
   1956a:	72fb      	strb	r3, [r7, #11]
   1956c:	e01c      	b.n	195a8 <AppDbFindByLtkReq+0x50>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1956e:	68fb      	ldr	r3, [r7, #12]
   19570:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19574:	2b00      	cmp	r3, #0
   19576:	d011      	beq.n	1959c <AppDbFindByLtkReq+0x44>
   19578:	68fb      	ldr	r3, [r7, #12]
   1957a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   1957e:	88fa      	ldrh	r2, [r7, #6]
   19580:	429a      	cmp	r2, r3
   19582:	d10b      	bne.n	1959c <AppDbFindByLtkReq+0x44>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   19584:	68fb      	ldr	r3, [r7, #12]
   19586:	3344      	adds	r3, #68	; 0x44
   19588:	2208      	movs	r2, #8
   1958a:	6839      	ldr	r1, [r7, #0]
   1958c:	4618      	mov	r0, r3
   1958e:	f7f2 fdb7 	bl	c100 <memcmp>
   19592:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   19594:	2b00      	cmp	r3, #0
   19596:	d101      	bne.n	1959c <AppDbFindByLtkReq+0x44>
    {
      return (appDbHdl_t) pRec;
   19598:	68fb      	ldr	r3, [r7, #12]
   1959a:	e009      	b.n	195b0 <AppDbFindByLtkReq+0x58>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1959c:	7afb      	ldrb	r3, [r7, #11]
   1959e:	3b01      	subs	r3, #1
   195a0:	72fb      	strb	r3, [r7, #11]
   195a2:	68fb      	ldr	r3, [r7, #12]
   195a4:	33b0      	adds	r3, #176	; 0xb0
   195a6:	60fb      	str	r3, [r7, #12]
   195a8:	7afb      	ldrb	r3, [r7, #11]
   195aa:	2b00      	cmp	r3, #0
   195ac:	d1df      	bne.n	1956e <AppDbFindByLtkReq+0x16>
    }
  }
  
  return APP_DB_HDL_NONE;
   195ae:	2300      	movs	r3, #0
}
   195b0:	4618      	mov	r0, r3
   195b2:	3710      	adds	r7, #16
   195b4:	46bd      	mov	sp, r7
   195b6:	bd80      	pop	{r7, pc}
   195b8:	10004224 	.word	0x10004224

000195bc <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   195bc:	b480      	push	{r7}
   195be:	b087      	sub	sp, #28
   195c0:	af00      	add	r7, sp, #0
   195c2:	60f8      	str	r0, [r7, #12]
   195c4:	460b      	mov	r3, r1
   195c6:	607a      	str	r2, [r7, #4]
   195c8:	72fb      	strb	r3, [r7, #11]
  dmSecKey_t *pKey = NULL;
   195ca:	2300      	movs	r3, #0
   195cc:	617b      	str	r3, [r7, #20]
  
  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   195ce:	68fb      	ldr	r3, [r7, #12]
   195d0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   195d4:	7afb      	ldrb	r3, [r7, #11]
   195d6:	4013      	ands	r3, r2
   195d8:	b2db      	uxtb	r3, r3
   195da:	2b00      	cmp	r3, #0
   195dc:	d031      	beq.n	19642 <AppDbGetKey+0x86>
  {
    switch(type)
   195de:	7afb      	ldrb	r3, [r7, #11]
   195e0:	3b01      	subs	r3, #1
   195e2:	2b07      	cmp	r3, #7
   195e4:	d82c      	bhi.n	19640 <AppDbGetKey+0x84>
   195e6:	a201      	add	r2, pc, #4	; (adr r2, 195ec <AppDbGetKey+0x30>)
   195e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   195ec:	0001960d 	.word	0x0001960d
   195f0:	0001961f 	.word	0x0001961f
   195f4:	00019641 	.word	0x00019641
   195f8:	00019631 	.word	0x00019631
   195fc:	00019641 	.word	0x00019641
   19600:	00019641 	.word	0x00019641
   19604:	00019641 	.word	0x00019641
   19608:	00019639 	.word	0x00019639
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   1960c:	68fb      	ldr	r3, [r7, #12]
   1960e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   19612:	687b      	ldr	r3, [r7, #4]
   19614:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   19616:	68fb      	ldr	r3, [r7, #12]
   19618:	3334      	adds	r3, #52	; 0x34
   1961a:	617b      	str	r3, [r7, #20]
        break;
   1961c:	e011      	b.n	19642 <AppDbGetKey+0x86>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   1961e:	68fb      	ldr	r3, [r7, #12]
   19620:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   19624:	687b      	ldr	r3, [r7, #4]
   19626:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   19628:	68fb      	ldr	r3, [r7, #12]
   1962a:	3350      	adds	r3, #80	; 0x50
   1962c:	617b      	str	r3, [r7, #20]
        break;
   1962e:	e008      	b.n	19642 <AppDbGetKey+0x86>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   19630:	68fb      	ldr	r3, [r7, #12]
   19632:	3307      	adds	r3, #7
   19634:	617b      	str	r3, [r7, #20]
        break;
   19636:	e004      	b.n	19642 <AppDbGetKey+0x86>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   19638:	68fb      	ldr	r3, [r7, #12]
   1963a:	331e      	adds	r3, #30
   1963c:	617b      	str	r3, [r7, #20]
        break;
   1963e:	e000      	b.n	19642 <AppDbGetKey+0x86>
        
      default:
        break;
   19640:	bf00      	nop
    }
  }
  
  return pKey;
   19642:	697b      	ldr	r3, [r7, #20]
}
   19644:	4618      	mov	r0, r3
   19646:	371c      	adds	r7, #28
   19648:	46bd      	mov	sp, r7
   1964a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1964e:	4770      	bx	lr

00019650 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   19650:	b5b0      	push	{r4, r5, r7, lr}
   19652:	b082      	sub	sp, #8
   19654:	af00      	add	r7, sp, #0
   19656:	6078      	str	r0, [r7, #4]
   19658:	6039      	str	r1, [r7, #0]
  switch(pKey->type)
   1965a:	683b      	ldr	r3, [r7, #0]
   1965c:	7f9b      	ldrb	r3, [r3, #30]
   1965e:	3b01      	subs	r3, #1
   19660:	2b07      	cmp	r3, #7
   19662:	d86c      	bhi.n	1973e <AppDbSetKey+0xee>
   19664:	a201      	add	r2, pc, #4	; (adr r2, 1966c <AppDbSetKey+0x1c>)
   19666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1966a:	bf00      	nop
   1966c:	0001968d 	.word	0x0001968d
   19670:	000196b7 	.word	0x000196b7
   19674:	0001973f 	.word	0x0001973f
   19678:	000196e1 	.word	0x000196e1
   1967c:	0001973f 	.word	0x0001973f
   19680:	0001973f 	.word	0x0001973f
   19684:	0001973f 	.word	0x0001973f
   19688:	0001971d 	.word	0x0001971d
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   1968c:	683b      	ldr	r3, [r7, #0]
   1968e:	7fda      	ldrb	r2, [r3, #31]
   19690:	687b      	ldr	r3, [r7, #4]
   19692:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   19696:	687a      	ldr	r2, [r7, #4]
   19698:	683b      	ldr	r3, [r7, #0]
   1969a:	f102 0434 	add.w	r4, r2, #52	; 0x34
   1969e:	1d1d      	adds	r5, r3, #4
   196a0:	6828      	ldr	r0, [r5, #0]
   196a2:	6869      	ldr	r1, [r5, #4]
   196a4:	68aa      	ldr	r2, [r5, #8]
   196a6:	68eb      	ldr	r3, [r5, #12]
   196a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   196aa:	6928      	ldr	r0, [r5, #16]
   196ac:	6969      	ldr	r1, [r5, #20]
   196ae:	c403      	stmia	r4!, {r0, r1}
   196b0:	8b2b      	ldrh	r3, [r5, #24]
   196b2:	8023      	strh	r3, [r4, #0]
      break;
   196b4:	e044      	b.n	19740 <AppDbSetKey+0xf0>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   196b6:	683b      	ldr	r3, [r7, #0]
   196b8:	7fda      	ldrb	r2, [r3, #31]
   196ba:	687b      	ldr	r3, [r7, #4]
   196bc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   196c0:	687a      	ldr	r2, [r7, #4]
   196c2:	683b      	ldr	r3, [r7, #0]
   196c4:	f102 0450 	add.w	r4, r2, #80	; 0x50
   196c8:	1d1d      	adds	r5, r3, #4
   196ca:	6828      	ldr	r0, [r5, #0]
   196cc:	6869      	ldr	r1, [r5, #4]
   196ce:	68aa      	ldr	r2, [r5, #8]
   196d0:	68eb      	ldr	r3, [r5, #12]
   196d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   196d4:	6928      	ldr	r0, [r5, #16]
   196d6:	6969      	ldr	r1, [r5, #20]
   196d8:	c403      	stmia	r4!, {r0, r1}
   196da:	8b2b      	ldrh	r3, [r5, #24]
   196dc:	8023      	strh	r3, [r4, #0]
      break;
   196de:	e02f      	b.n	19740 <AppDbSetKey+0xf0>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   196e0:	687b      	ldr	r3, [r7, #4]
   196e2:	683a      	ldr	r2, [r7, #0]
   196e4:	3307      	adds	r3, #7
   196e6:	3204      	adds	r2, #4
   196e8:	6811      	ldr	r1, [r2, #0]
   196ea:	6855      	ldr	r5, [r2, #4]
   196ec:	6894      	ldr	r4, [r2, #8]
   196ee:	68d0      	ldr	r0, [r2, #12]
   196f0:	6019      	str	r1, [r3, #0]
   196f2:	605d      	str	r5, [r3, #4]
   196f4:	609c      	str	r4, [r3, #8]
   196f6:	60d8      	str	r0, [r3, #12]
   196f8:	6911      	ldr	r1, [r2, #16]
   196fa:	6119      	str	r1, [r3, #16]
   196fc:	8a91      	ldrh	r1, [r2, #20]
   196fe:	7d92      	ldrb	r2, [r2, #22]
   19700:	8299      	strh	r1, [r3, #20]
   19702:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   19704:	683b      	ldr	r3, [r7, #0]
   19706:	7e9a      	ldrb	r2, [r3, #26]
   19708:	687b      	ldr	r3, [r7, #4]
   1970a:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   1970c:	687a      	ldr	r2, [r7, #4]
   1970e:	683b      	ldr	r3, [r7, #0]
   19710:	3314      	adds	r3, #20
   19712:	4619      	mov	r1, r3
   19714:	4610      	mov	r0, r2
   19716:	f000 fa75 	bl	19c04 <BdaCpy>
      break;
   1971a:	e011      	b.n	19740 <AppDbSetKey+0xf0>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   1971c:	687b      	ldr	r3, [r7, #4]
   1971e:	683a      	ldr	r2, [r7, #0]
   19720:	331e      	adds	r3, #30
   19722:	3204      	adds	r2, #4
   19724:	6814      	ldr	r4, [r2, #0]
   19726:	6850      	ldr	r0, [r2, #4]
   19728:	6891      	ldr	r1, [r2, #8]
   1972a:	68d2      	ldr	r2, [r2, #12]
   1972c:	601c      	str	r4, [r3, #0]
   1972e:	6058      	str	r0, [r3, #4]
   19730:	6099      	str	r1, [r3, #8]
   19732:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   19734:	687b      	ldr	r3, [r7, #4]
   19736:	2200      	movs	r2, #0
   19738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   1973c:	e000      	b.n	19740 <AppDbSetKey+0xf0>
      
    default:
      break;
   1973e:	bf00      	nop
  }
}
   19740:	bf00      	nop
   19742:	3708      	adds	r7, #8
   19744:	46bd      	mov	sp, r7
   19746:	bdb0      	pop	{r4, r5, r7, pc}

00019748 <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   19748:	b480      	push	{r7}
   1974a:	b083      	sub	sp, #12
   1974c:	af00      	add	r7, sp, #0
   1974e:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   19750:	687b      	ldr	r3, [r7, #4]
   19752:	336c      	adds	r3, #108	; 0x6c
}
   19754:	4618      	mov	r0, r3
   19756:	370c      	adds	r7, #12
   19758:	46bd      	mov	sp, r7
   1975a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1975e:	4770      	bx	lr

00019760 <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   19760:	b480      	push	{r7}
   19762:	b083      	sub	sp, #12
   19764:	af00      	add	r7, sp, #0
   19766:	6078      	str	r0, [r7, #4]
   19768:	460b      	mov	r3, r1
   1976a:	807b      	strh	r3, [r7, #2]
   1976c:	4613      	mov	r3, r2
   1976e:	803b      	strh	r3, [r7, #0]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);
  
  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   19770:	887b      	ldrh	r3, [r7, #2]
   19772:	687a      	ldr	r2, [r7, #4]
   19774:	3334      	adds	r3, #52	; 0x34
   19776:	005b      	lsls	r3, r3, #1
   19778:	4413      	add	r3, r2
   1977a:	883a      	ldrh	r2, [r7, #0]
   1977c:	809a      	strh	r2, [r3, #4]
}
   1977e:	bf00      	nop
   19780:	370c      	adds	r7, #12
   19782:	46bd      	mov	sp, r7
   19784:	f85d 7b04 	ldr.w	r7, [sp], #4
   19788:	4770      	bx	lr

0001978a <AppDbGetDiscStatus>:
 *
 *  \return Discovery status.
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
   1978a:	b480      	push	{r7}
   1978c:	b083      	sub	sp, #12
   1978e:	af00      	add	r7, sp, #0
   19790:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->discStatus;
   19792:	687b      	ldr	r3, [r7, #4]
   19794:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
}
   19798:	4618      	mov	r0, r3
   1979a:	370c      	adds	r7, #12
   1979c:	46bd      	mov	sp, r7
   1979e:	f85d 7b04 	ldr.w	r7, [sp], #4
   197a2:	4770      	bx	lr

000197a4 <AppDbSetDiscStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
   197a4:	b480      	push	{r7}
   197a6:	b083      	sub	sp, #12
   197a8:	af00      	add	r7, sp, #0
   197aa:	6078      	str	r0, [r7, #4]
   197ac:	460b      	mov	r3, r1
   197ae:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->discStatus = status;
   197b0:	687b      	ldr	r3, [r7, #4]
   197b2:	78fa      	ldrb	r2, [r7, #3]
   197b4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
   197b8:	bf00      	nop
   197ba:	370c      	adds	r7, #12
   197bc:	46bd      	mov	sp, r7
   197be:	f85d 7b04 	ldr.w	r7, [sp], #4
   197c2:	4770      	bx	lr

000197c4 <AppDbGetHdlList>:
 *
 *  \return Pointer to handle list.
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
   197c4:	b480      	push	{r7}
   197c6:	b083      	sub	sp, #12
   197c8:	af00      	add	r7, sp, #0
   197ca:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->hdlList;
   197cc:	687b      	ldr	r3, [r7, #4]
   197ce:	3384      	adds	r3, #132	; 0x84
}
   197d0:	4618      	mov	r0, r3
   197d2:	370c      	adds	r7, #12
   197d4:	46bd      	mov	sp, r7
   197d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   197da:	4770      	bx	lr

000197dc <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   197dc:	b580      	push	{r7, lr}
   197de:	b082      	sub	sp, #8
   197e0:	af00      	add	r7, sp, #0
   197e2:	6078      	str	r0, [r7, #4]
   197e4:	6039      	str	r1, [r7, #0]
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   197e6:	687b      	ldr	r3, [r7, #4]
   197e8:	3384      	adds	r3, #132	; 0x84
   197ea:	2228      	movs	r2, #40	; 0x28
   197ec:	6839      	ldr	r1, [r7, #0]
   197ee:	4618      	mov	r0, r3
   197f0:	f7f2 fcb6 	bl	c160 <memcpy>
}
   197f4:	bf00      	nop
   197f6:	3708      	adds	r7, #8
   197f8:	46bd      	mov	sp, r7
   197fa:	bd80      	pop	{r7, pc}

000197fc <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   197fc:	b480      	push	{r7}
   197fe:	b083      	sub	sp, #12
   19800:	af00      	add	r7, sp, #0
   19802:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   19804:	687b      	ldr	r3, [r7, #4]
   19806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1980a:	4618      	mov	r0, r3
   1980c:	370c      	adds	r7, #12
   1980e:	46bd      	mov	sp, r7
   19810:	f85d 7b04 	ldr.w	r7, [sp], #4
   19814:	4770      	bx	lr

00019816 <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   19816:	b480      	push	{r7}
   19818:	b083      	sub	sp, #12
   1981a:	af00      	add	r7, sp, #0
   1981c:	6078      	str	r0, [r7, #4]
   1981e:	6039      	str	r1, [r7, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   19820:	687b      	ldr	r3, [r7, #4]
   19822:	683a      	ldr	r2, [r7, #0]
   19824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   19828:	bf00      	nop
   1982a:	370c      	adds	r7, #12
   1982c:	46bd      	mov	sp, r7
   1982e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19832:	4770      	bx	lr

00019834 <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   19834:	b480      	push	{r7}
   19836:	b083      	sub	sp, #12
   19838:	af00      	add	r7, sp, #0
   1983a:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   1983c:	687b      	ldr	r3, [r7, #4]
   1983e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   19842:	4618      	mov	r0, r3
   19844:	370c      	adds	r7, #12
   19846:	46bd      	mov	sp, r7
   19848:	f85d 7b04 	ldr.w	r7, [sp], #4
   1984c:	4770      	bx	lr

0001984e <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   1984e:	b480      	push	{r7}
   19850:	b083      	sub	sp, #12
   19852:	af00      	add	r7, sp, #0
   19854:	6078      	str	r0, [r7, #4]
   19856:	460b      	mov	r3, r1
   19858:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   1985a:	687b      	ldr	r3, [r7, #4]
   1985c:	78fa      	ldrb	r2, [r7, #3]
   1985e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   19862:	bf00      	nop
   19864:	370c      	adds	r7, #12
   19866:	46bd      	mov	sp, r7
   19868:	f85d 7b04 	ldr.w	r7, [sp], #4
   1986c:	4770      	bx	lr

0001986e <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   1986e:	b480      	push	{r7}
   19870:	b083      	sub	sp, #12
   19872:	af00      	add	r7, sp, #0
   19874:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   19876:	687b      	ldr	r3, [r7, #4]
   19878:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   1987c:	4618      	mov	r0, r3
   1987e:	370c      	adds	r7, #12
   19880:	46bd      	mov	sp, r7
   19882:	f85d 7b04 	ldr.w	r7, [sp], #4
   19886:	4770      	bx	lr

00019888 <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   19888:	b580      	push	{r7, lr}
   1988a:	b082      	sub	sp, #8
   1988c:	af00      	add	r7, sp, #0
   1988e:	4603      	mov	r3, r0
   19890:	71fb      	strb	r3, [r7, #7]
  switch (event)
   19892:	79fb      	ldrb	r3, [r7, #7]
   19894:	2b11      	cmp	r3, #17
   19896:	d868      	bhi.n	1996a <AppUiAction+0xe2>
   19898:	a201      	add	r2, pc, #4	; (adr r2, 198a0 <AppUiAction+0x18>)
   1989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1989e:	bf00      	nop
   198a0:	00019969 	.word	0x00019969
   198a4:	000198e9 	.word	0x000198e9
   198a8:	0001996b 	.word	0x0001996b
   198ac:	000198f1 	.word	0x000198f1
   198b0:	000198f9 	.word	0x000198f9
   198b4:	00019901 	.word	0x00019901
   198b8:	00019909 	.word	0x00019909
   198bc:	00019911 	.word	0x00019911
   198c0:	00019919 	.word	0x00019919
   198c4:	00019921 	.word	0x00019921
   198c8:	00019929 	.word	0x00019929
   198cc:	00019931 	.word	0x00019931
   198d0:	00019939 	.word	0x00019939
   198d4:	00019941 	.word	0x00019941
   198d8:	00019949 	.word	0x00019949
   198dc:	00019951 	.word	0x00019951
   198e0:	00019959 	.word	0x00019959
   198e4:	00019961 	.word	0x00019961
    case APP_UI_NONE:
      /* no action */
      break;
      
    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   198e8:	4822      	ldr	r0, [pc, #136]	; (19974 <AppUiAction+0xec>)
   198ea:	f001 ffe1 	bl	1b8b0 <WsfTrace>
      break;
   198ee:	e03c      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   198f0:	4821      	ldr	r0, [pc, #132]	; (19978 <AppUiAction+0xf0>)
   198f2:	f001 ffdd 	bl	1b8b0 <WsfTrace>
      break;
   198f6:	e038      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   198f8:	4820      	ldr	r0, [pc, #128]	; (1997c <AppUiAction+0xf4>)
   198fa:	f001 ffd9 	bl	1b8b0 <WsfTrace>
      break;
   198fe:	e034      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   19900:	481f      	ldr	r0, [pc, #124]	; (19980 <AppUiAction+0xf8>)
   19902:	f001 ffd5 	bl	1b8b0 <WsfTrace>
      break;
   19906:	e030      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   19908:	481e      	ldr	r0, [pc, #120]	; (19984 <AppUiAction+0xfc>)
   1990a:	f001 ffd1 	bl	1b8b0 <WsfTrace>
      break;
   1990e:	e02c      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   19910:	481d      	ldr	r0, [pc, #116]	; (19988 <AppUiAction+0x100>)
   19912:	f001 ffcd 	bl	1b8b0 <WsfTrace>
      break;
   19916:	e028      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   19918:	481c      	ldr	r0, [pc, #112]	; (1998c <AppUiAction+0x104>)
   1991a:	f001 ffc9 	bl	1b8b0 <WsfTrace>
      break;
   1991e:	e024      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   19920:	481b      	ldr	r0, [pc, #108]	; (19990 <AppUiAction+0x108>)
   19922:	f001 ffc5 	bl	1b8b0 <WsfTrace>
      break;
   19926:	e020      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   19928:	481a      	ldr	r0, [pc, #104]	; (19994 <AppUiAction+0x10c>)
   1992a:	f001 ffc1 	bl	1b8b0 <WsfTrace>
      break;
   1992e:	e01c      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   19930:	4819      	ldr	r0, [pc, #100]	; (19998 <AppUiAction+0x110>)
   19932:	f001 ffbd 	bl	1b8b0 <WsfTrace>
      break;
   19936:	e018      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   19938:	4818      	ldr	r0, [pc, #96]	; (1999c <AppUiAction+0x114>)
   1993a:	f001 ffb9 	bl	1b8b0 <WsfTrace>
      break;
   1993e:	e014      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   19940:	4817      	ldr	r0, [pc, #92]	; (199a0 <AppUiAction+0x118>)
   19942:	f001 ffb5 	bl	1b8b0 <WsfTrace>
      break;
   19946:	e010      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   19948:	4816      	ldr	r0, [pc, #88]	; (199a4 <AppUiAction+0x11c>)
   1994a:	f001 ffb1 	bl	1b8b0 <WsfTrace>
      break;
   1994e:	e00c      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   19950:	4815      	ldr	r0, [pc, #84]	; (199a8 <AppUiAction+0x120>)
   19952:	f001 ffad 	bl	1b8b0 <WsfTrace>
      break;
   19956:	e008      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   19958:	4814      	ldr	r0, [pc, #80]	; (199ac <AppUiAction+0x124>)
   1995a:	f001 ffa9 	bl	1b8b0 <WsfTrace>
      break;
   1995e:	e004      	b.n	1996a <AppUiAction+0xe2>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   19960:	4813      	ldr	r0, [pc, #76]	; (199b0 <AppUiAction+0x128>)
   19962:	f001 ffa5 	bl	1b8b0 <WsfTrace>
      break;
   19966:	e000      	b.n	1996a <AppUiAction+0xe2>
      break;
   19968:	bf00      	nop
  }
}
   1996a:	bf00      	nop
   1996c:	3708      	adds	r7, #8
   1996e:	46bd      	mov	sp, r7
   19970:	bd80      	pop	{r7, pc}
   19972:	bf00      	nop
   19974:	0002543c 	.word	0x0002543c
   19978:	00025454 	.word	0x00025454
   1997c:	00025470 	.word	0x00025470
   19980:	0002548c 	.word	0x0002548c
   19984:	000254a8 	.word	0x000254a8
   19988:	000254c4 	.word	0x000254c4
   1998c:	000254ec 	.word	0x000254ec
   19990:	00025508 	.word	0x00025508
   19994:	00025524 	.word	0x00025524
   19998:	0002554c 	.word	0x0002554c
   1999c:	00025564 	.word	0x00025564
   199a0:	00025584 	.word	0x00025584
   199a4:	000255a0 	.word	0x000255a0
   199a8:	000255c8 	.word	0x000255c8
   199ac:	000255ec 	.word	0x000255ec
   199b0:	00025600 	.word	0x00025600

000199b4 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   199b4:	b580      	push	{r7, lr}
   199b6:	b082      	sub	sp, #8
   199b8:	af00      	add	r7, sp, #0
   199ba:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   199bc:	6879      	ldr	r1, [r7, #4]
   199be:	4803      	ldr	r0, [pc, #12]	; (199cc <AppUiDisplayPasskey+0x18>)
   199c0:	f001 ff76 	bl	1b8b0 <WsfTrace>
}
   199c4:	bf00      	nop
   199c6:	3708      	adds	r7, #8
   199c8:	46bd      	mov	sp, r7
   199ca:	bd80      	pop	{r7, pc}
   199cc:	00025614 	.word	0x00025614

000199d0 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   199d0:	b480      	push	{r7}
   199d2:	b083      	sub	sp, #12
   199d4:	af00      	add	r7, sp, #0
   199d6:	6078      	str	r0, [r7, #4]

}
   199d8:	bf00      	nop
   199da:	370c      	adds	r7, #12
   199dc:	46bd      	mov	sp, r7
   199de:	f85d 7b04 	ldr.w	r7, [sp], #4
   199e2:	4770      	bx	lr

000199e4 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   199e4:	b480      	push	{r7}
   199e6:	af00      	add	r7, sp, #0

}
   199e8:	bf00      	nop
   199ea:	46bd      	mov	sp, r7
   199ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   199f0:	4770      	bx	lr
	...

000199f4 <AppUiBtnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t cback)
{
   199f4:	b480      	push	{r7}
   199f6:	b083      	sub	sp, #12
   199f8:	af00      	add	r7, sp, #0
   199fa:	6078      	str	r0, [r7, #4]
  appUiBtn.cback = cback;
   199fc:	4a04      	ldr	r2, [pc, #16]	; (19a10 <AppUiBtnRegister+0x1c>)
   199fe:	687b      	ldr	r3, [r7, #4]
   19a00:	6013      	str	r3, [r2, #0]
}
   19a02:	bf00      	nop
   19a04:	370c      	adds	r7, #12
   19a06:	46bd      	mov	sp, r7
   19a08:	f85d 7b04 	ldr.w	r7, [sp], #4
   19a0c:	4770      	bx	lr
   19a0e:	bf00      	nop
   19a10:	1000444c 	.word	0x1000444c

00019a14 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
   19a14:	b480      	push	{r7}
   19a16:	af00      	add	r7, sp, #0

}
   19a18:	bf00      	nop
   19a1a:	46bd      	mov	sp, r7
   19a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19a20:	4770      	bx	lr
	...

00019a24 <AppUiBtnTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
   19a24:	b580      	push	{r7, lr}
   19a26:	b082      	sub	sp, #8
   19a28:	af00      	add	r7, sp, #0
   19a2a:	4603      	mov	r3, r0
   19a2c:	71fb      	strb	r3, [r7, #7]
  if(appUiBtn.cback) {
   19a2e:	4b06      	ldr	r3, [pc, #24]	; (19a48 <AppUiBtnTest+0x24>)
   19a30:	681b      	ldr	r3, [r3, #0]
   19a32:	2b00      	cmp	r3, #0
   19a34:	d004      	beq.n	19a40 <AppUiBtnTest+0x1c>
    (*appUiBtn.cback)(btn);
   19a36:	4b04      	ldr	r3, [pc, #16]	; (19a48 <AppUiBtnTest+0x24>)
   19a38:	681b      	ldr	r3, [r3, #0]
   19a3a:	79fa      	ldrb	r2, [r7, #7]
   19a3c:	4610      	mov	r0, r2
   19a3e:	4798      	blx	r3
  }
}
   19a40:	bf00      	nop
   19a42:	3708      	adds	r7, #8
   19a44:	46bd      	mov	sp, r7
   19a46:	bd80      	pop	{r7, pc}
   19a48:	1000444c 	.word	0x1000444c

00019a4c <disFmtString>:
 *
 *  \return Buffer containing string.
 */
/*************************************************************************************************/
char *disFmtString(uint8_t *pValue, uint16_t len)
{
   19a4c:	b580      	push	{r7, lr}
   19a4e:	b082      	sub	sp, #8
   19a50:	af00      	add	r7, sp, #0
   19a52:	6078      	str	r0, [r7, #4]
   19a54:	460b      	mov	r3, r1
   19a56:	807b      	strh	r3, [r7, #2]
  static char buf[ATT_DEFAULT_PAYLOAD_LEN + 1];
   
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   19a58:	887b      	ldrh	r3, [r7, #2]
   19a5a:	2b14      	cmp	r3, #20
   19a5c:	bf28      	it	cs
   19a5e:	2314      	movcs	r3, #20
   19a60:	807b      	strh	r3, [r7, #2]
  
  memcpy(buf, pValue, len);
   19a62:	887b      	ldrh	r3, [r7, #2]
   19a64:	461a      	mov	r2, r3
   19a66:	6879      	ldr	r1, [r7, #4]
   19a68:	4805      	ldr	r0, [pc, #20]	; (19a80 <disFmtString+0x34>)
   19a6a:	f7f2 fb79 	bl	c160 <memcpy>
  buf[len] = '\0';
   19a6e:	887b      	ldrh	r3, [r7, #2]
   19a70:	4a03      	ldr	r2, [pc, #12]	; (19a80 <disFmtString+0x34>)
   19a72:	2100      	movs	r1, #0
   19a74:	54d1      	strb	r1, [r2, r3]
  
  return buf;
   19a76:	4b02      	ldr	r3, [pc, #8]	; (19a80 <disFmtString+0x34>)
}
   19a78:	4618      	mov	r0, r3
   19a7a:	3708      	adds	r7, #8
   19a7c:	46bd      	mov	sp, r7
   19a7e:	bd80      	pop	{r7, pc}
   19a80:	10004450 	.word	0x10004450

00019a84 <DisDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DisDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   19a84:	b580      	push	{r7, lr}
   19a86:	b084      	sub	sp, #16
   19a88:	af02      	add	r7, sp, #8
   19a8a:	4603      	mov	r3, r0
   19a8c:	6039      	str	r1, [r7, #0]
   19a8e:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attDisSvcUuid,
   19a90:	79f8      	ldrb	r0, [r7, #7]
   19a92:	683b      	ldr	r3, [r7, #0]
   19a94:	9301      	str	r3, [sp, #4]
   19a96:	4b05      	ldr	r3, [pc, #20]	; (19aac <DisDiscover+0x28>)
   19a98:	9300      	str	r3, [sp, #0]
   19a9a:	2307      	movs	r3, #7
   19a9c:	4a04      	ldr	r2, [pc, #16]	; (19ab0 <DisDiscover+0x2c>)
   19a9e:	2102      	movs	r1, #2
   19aa0:	f004 fa56 	bl	1df50 <AppDiscFindService>
                     DIS_HDL_LIST_LEN, (attcDiscChar_t **) disDiscCharList, pHdlList);
}
   19aa4:	bf00      	nop
   19aa6:	3708      	adds	r7, #8
   19aa8:	46bd      	mov	sp, r7
   19aaa:	bd80      	pop	{r7, pc}
   19aac:	10002be8 	.word	0x10002be8
   19ab0:	00025c92 	.word	0x00025c92

00019ab4 <DisValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t DisValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   19ab4:	b580      	push	{r7, lr}
   19ab6:	b084      	sub	sp, #16
   19ab8:	af00      	add	r7, sp, #0
   19aba:	6078      	str	r0, [r7, #4]
   19abc:	6039      	str	r1, [r7, #0]
  uint8_t status = ATT_SUCCESS;
   19abe:	2300      	movs	r3, #0
   19ac0:	73fb      	strb	r3, [r7, #15]
    
  /* manufacturer name string */
  if (pMsg->handle == pHdlList[DIS_MFNS_HDL_IDX])
   19ac2:	683b      	ldr	r3, [r7, #0]
   19ac4:	895a      	ldrh	r2, [r3, #10]
   19ac6:	687b      	ldr	r3, [r7, #4]
   19ac8:	881b      	ldrh	r3, [r3, #0]
   19aca:	429a      	cmp	r2, r3
   19acc:	d10d      	bne.n	19aea <DisValueUpdate+0x36>
  {
    APP_TRACE_INFO1("Mfgr: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   19ace:	683b      	ldr	r3, [r7, #0]
   19ad0:	685a      	ldr	r2, [r3, #4]
   19ad2:	683b      	ldr	r3, [r7, #0]
   19ad4:	891b      	ldrh	r3, [r3, #8]
   19ad6:	4619      	mov	r1, r3
   19ad8:	4610      	mov	r0, r2
   19ada:	f7ff ffb7 	bl	19a4c <disFmtString>
   19ade:	4603      	mov	r3, r0
   19ae0:	4619      	mov	r1, r3
   19ae2:	4841      	ldr	r0, [pc, #260]	; (19be8 <DisValueUpdate+0x134>)
   19ae4:	f001 fee4 	bl	1b8b0 <WsfTrace>
   19ae8:	e079      	b.n	19bde <DisValueUpdate+0x12a>
  }
  /* model number string */
  else if (pMsg->handle == pHdlList[DIS_MNS_HDL_IDX])
   19aea:	683b      	ldr	r3, [r7, #0]
   19aec:	895a      	ldrh	r2, [r3, #10]
   19aee:	687b      	ldr	r3, [r7, #4]
   19af0:	3302      	adds	r3, #2
   19af2:	881b      	ldrh	r3, [r3, #0]
   19af4:	429a      	cmp	r2, r3
   19af6:	d10d      	bne.n	19b14 <DisValueUpdate+0x60>
  {
    APP_TRACE_INFO1("Model num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   19af8:	683b      	ldr	r3, [r7, #0]
   19afa:	685a      	ldr	r2, [r3, #4]
   19afc:	683b      	ldr	r3, [r7, #0]
   19afe:	891b      	ldrh	r3, [r3, #8]
   19b00:	4619      	mov	r1, r3
   19b02:	4610      	mov	r0, r2
   19b04:	f7ff ffa2 	bl	19a4c <disFmtString>
   19b08:	4603      	mov	r3, r0
   19b0a:	4619      	mov	r1, r3
   19b0c:	4837      	ldr	r0, [pc, #220]	; (19bec <DisValueUpdate+0x138>)
   19b0e:	f001 fecf 	bl	1b8b0 <WsfTrace>
   19b12:	e064      	b.n	19bde <DisValueUpdate+0x12a>
  }
  /* serial number string */
  else if (pMsg->handle == pHdlList[DIS_SNS_HDL_IDX])
   19b14:	683b      	ldr	r3, [r7, #0]
   19b16:	895a      	ldrh	r2, [r3, #10]
   19b18:	687b      	ldr	r3, [r7, #4]
   19b1a:	3304      	adds	r3, #4
   19b1c:	881b      	ldrh	r3, [r3, #0]
   19b1e:	429a      	cmp	r2, r3
   19b20:	d10d      	bne.n	19b3e <DisValueUpdate+0x8a>
  {
    APP_TRACE_INFO1("Serial num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   19b22:	683b      	ldr	r3, [r7, #0]
   19b24:	685a      	ldr	r2, [r3, #4]
   19b26:	683b      	ldr	r3, [r7, #0]
   19b28:	891b      	ldrh	r3, [r3, #8]
   19b2a:	4619      	mov	r1, r3
   19b2c:	4610      	mov	r0, r2
   19b2e:	f7ff ff8d 	bl	19a4c <disFmtString>
   19b32:	4603      	mov	r3, r0
   19b34:	4619      	mov	r1, r3
   19b36:	482e      	ldr	r0, [pc, #184]	; (19bf0 <DisValueUpdate+0x13c>)
   19b38:	f001 feba 	bl	1b8b0 <WsfTrace>
   19b3c:	e04f      	b.n	19bde <DisValueUpdate+0x12a>
  }
  /* hardware revision string */
  else if (pMsg->handle == pHdlList[DIS_HRS_HDL_IDX])
   19b3e:	683b      	ldr	r3, [r7, #0]
   19b40:	895a      	ldrh	r2, [r3, #10]
   19b42:	687b      	ldr	r3, [r7, #4]
   19b44:	3306      	adds	r3, #6
   19b46:	881b      	ldrh	r3, [r3, #0]
   19b48:	429a      	cmp	r2, r3
   19b4a:	d10d      	bne.n	19b68 <DisValueUpdate+0xb4>
  {
    APP_TRACE_INFO1("Hardware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   19b4c:	683b      	ldr	r3, [r7, #0]
   19b4e:	685a      	ldr	r2, [r3, #4]
   19b50:	683b      	ldr	r3, [r7, #0]
   19b52:	891b      	ldrh	r3, [r3, #8]
   19b54:	4619      	mov	r1, r3
   19b56:	4610      	mov	r0, r2
   19b58:	f7ff ff78 	bl	19a4c <disFmtString>
   19b5c:	4603      	mov	r3, r0
   19b5e:	4619      	mov	r1, r3
   19b60:	4824      	ldr	r0, [pc, #144]	; (19bf4 <DisValueUpdate+0x140>)
   19b62:	f001 fea5 	bl	1b8b0 <WsfTrace>
   19b66:	e03a      	b.n	19bde <DisValueUpdate+0x12a>
  }
  /* firmware revision string */
  else if (pMsg->handle == pHdlList[DIS_FRS_HDL_IDX])
   19b68:	683b      	ldr	r3, [r7, #0]
   19b6a:	895a      	ldrh	r2, [r3, #10]
   19b6c:	687b      	ldr	r3, [r7, #4]
   19b6e:	3308      	adds	r3, #8
   19b70:	881b      	ldrh	r3, [r3, #0]
   19b72:	429a      	cmp	r2, r3
   19b74:	d10d      	bne.n	19b92 <DisValueUpdate+0xde>
  {
    APP_TRACE_INFO1("Firmware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   19b76:	683b      	ldr	r3, [r7, #0]
   19b78:	685a      	ldr	r2, [r3, #4]
   19b7a:	683b      	ldr	r3, [r7, #0]
   19b7c:	891b      	ldrh	r3, [r3, #8]
   19b7e:	4619      	mov	r1, r3
   19b80:	4610      	mov	r0, r2
   19b82:	f7ff ff63 	bl	19a4c <disFmtString>
   19b86:	4603      	mov	r3, r0
   19b88:	4619      	mov	r1, r3
   19b8a:	481b      	ldr	r0, [pc, #108]	; (19bf8 <DisValueUpdate+0x144>)
   19b8c:	f001 fe90 	bl	1b8b0 <WsfTrace>
   19b90:	e025      	b.n	19bde <DisValueUpdate+0x12a>
  }
  /* software revision string */
  else if (pMsg->handle == pHdlList[DIS_SRS_HDL_IDX])
   19b92:	683b      	ldr	r3, [r7, #0]
   19b94:	895a      	ldrh	r2, [r3, #10]
   19b96:	687b      	ldr	r3, [r7, #4]
   19b98:	330a      	adds	r3, #10
   19b9a:	881b      	ldrh	r3, [r3, #0]
   19b9c:	429a      	cmp	r2, r3
   19b9e:	d10d      	bne.n	19bbc <DisValueUpdate+0x108>
  {
    APP_TRACE_INFO1("Software rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   19ba0:	683b      	ldr	r3, [r7, #0]
   19ba2:	685a      	ldr	r2, [r3, #4]
   19ba4:	683b      	ldr	r3, [r7, #0]
   19ba6:	891b      	ldrh	r3, [r3, #8]
   19ba8:	4619      	mov	r1, r3
   19baa:	4610      	mov	r0, r2
   19bac:	f7ff ff4e 	bl	19a4c <disFmtString>
   19bb0:	4603      	mov	r3, r0
   19bb2:	4619      	mov	r1, r3
   19bb4:	4811      	ldr	r0, [pc, #68]	; (19bfc <DisValueUpdate+0x148>)
   19bb6:	f001 fe7b 	bl	1b8b0 <WsfTrace>
   19bba:	e010      	b.n	19bde <DisValueUpdate+0x12a>
  }
  /* system id */
  else if (pMsg->handle == pHdlList[DIS_SID_HDL_IDX])
   19bbc:	683b      	ldr	r3, [r7, #0]
   19bbe:	895a      	ldrh	r2, [r3, #10]
   19bc0:	687b      	ldr	r3, [r7, #4]
   19bc2:	330c      	adds	r3, #12
   19bc4:	881b      	ldrh	r3, [r3, #0]
   19bc6:	429a      	cmp	r2, r3
   19bc8:	d107      	bne.n	19bda <DisValueUpdate+0x126>
  {
    if (pMsg->valueLen == CH_SYSTEM_ID_LEN)
   19bca:	683b      	ldr	r3, [r7, #0]
   19bcc:	891b      	ldrh	r3, [r3, #8]
   19bce:	2b08      	cmp	r3, #8
   19bd0:	d105      	bne.n	19bde <DisValueUpdate+0x12a>
    {
      APP_TRACE_INFO0("System ID read ok");
   19bd2:	480b      	ldr	r0, [pc, #44]	; (19c00 <DisValueUpdate+0x14c>)
   19bd4:	f001 fe6c 	bl	1b8b0 <WsfTrace>
   19bd8:	e001      	b.n	19bde <DisValueUpdate+0x12a>
    }
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   19bda:	230a      	movs	r3, #10
   19bdc:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
   19bde:	7bfb      	ldrb	r3, [r7, #15]
}
   19be0:	4618      	mov	r0, r3
   19be2:	3710      	adds	r7, #16
   19be4:	46bd      	mov	sp, r7
   19be6:	bd80      	pop	{r7, pc}
   19be8:	00025658 	.word	0x00025658
   19bec:	00025664 	.word	0x00025664
   19bf0:	00025674 	.word	0x00025674
   19bf4:	00025684 	.word	0x00025684
   19bf8:	00025698 	.word	0x00025698
   19bfc:	000256ac 	.word	0x000256ac
   19c00:	000256c0 	.word	0x000256c0

00019c04 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   19c04:	b580      	push	{r7, lr}
   19c06:	b082      	sub	sp, #8
   19c08:	af00      	add	r7, sp, #0
   19c0a:	6078      	str	r0, [r7, #4]
   19c0c:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   19c0e:	2206      	movs	r2, #6
   19c10:	6839      	ldr	r1, [r7, #0]
   19c12:	6878      	ldr	r0, [r7, #4]
   19c14:	f7f2 faa4 	bl	c160 <memcpy>
}
   19c18:	bf00      	nop
   19c1a:	3708      	adds	r7, #8
   19c1c:	46bd      	mov	sp, r7
   19c1e:	bd80      	pop	{r7, pc}

00019c20 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   19c20:	b580      	push	{r7, lr}
   19c22:	b082      	sub	sp, #8
   19c24:	af00      	add	r7, sp, #0
   19c26:	6078      	str	r0, [r7, #4]
   19c28:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   19c2a:	2206      	movs	r2, #6
   19c2c:	6839      	ldr	r1, [r7, #0]
   19c2e:	6878      	ldr	r0, [r7, #4]
   19c30:	f7f2 fa66 	bl	c100 <memcmp>
   19c34:	4603      	mov	r3, r0
   19c36:	2b00      	cmp	r3, #0
   19c38:	bf0c      	ite	eq
   19c3a:	2301      	moveq	r3, #1
   19c3c:	2300      	movne	r3, #0
   19c3e:	b2db      	uxtb	r3, r3
}
   19c40:	4618      	mov	r0, r3
   19c42:	3708      	adds	r7, #8
   19c44:	46bd      	mov	sp, r7
   19c46:	bd80      	pop	{r7, pc}

00019c48 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   19c48:	b580      	push	{r7, lr}
   19c4a:	b082      	sub	sp, #8
   19c4c:	af00      	add	r7, sp, #0
   19c4e:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   19c50:	2206      	movs	r2, #6
   19c52:	2100      	movs	r1, #0
   19c54:	6878      	ldr	r0, [r7, #4]
   19c56:	f7f2 fb81 	bl	c35c <memset>

  return (pDst + BDA_ADDR_LEN);
   19c5a:	687b      	ldr	r3, [r7, #4]
   19c5c:	3306      	adds	r3, #6
}
   19c5e:	4618      	mov	r0, r3
   19c60:	3708      	adds	r7, #8
   19c62:	46bd      	mov	sp, r7
   19c64:	bd80      	pop	{r7, pc}

00019c66 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   19c66:	b580      	push	{r7, lr}
   19c68:	b084      	sub	sp, #16
   19c6a:	af00      	add	r7, sp, #0
   19c6c:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   19c6e:	f107 0308 	add.w	r3, r7, #8
   19c72:	2200      	movs	r2, #0
   19c74:	601a      	str	r2, [r3, #0]
   19c76:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   19c78:	f107 0308 	add.w	r3, r7, #8
   19c7c:	2206      	movs	r2, #6
   19c7e:	4619      	mov	r1, r3
   19c80:	6878      	ldr	r0, [r7, #4]
   19c82:	f7f2 fa3d 	bl	c100 <memcmp>
   19c86:	4603      	mov	r3, r0
   19c88:	2b00      	cmp	r3, #0
   19c8a:	bf0c      	ite	eq
   19c8c:	2301      	moveq	r3, #1
   19c8e:	2300      	movne	r3, #0
   19c90:	b2db      	uxtb	r3, r3
}
   19c92:	4618      	mov	r0, r3
   19c94:	3710      	adds	r7, #16
   19c96:	46bd      	mov	sp, r7
   19c98:	bd80      	pop	{r7, pc}

00019c9a <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   19c9a:	b580      	push	{r7, lr}
   19c9c:	b082      	sub	sp, #8
   19c9e:	af00      	add	r7, sp, #0
   19ca0:	6078      	str	r0, [r7, #4]
   19ca2:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   19ca4:	2210      	movs	r2, #16
   19ca6:	6839      	ldr	r1, [r7, #0]
   19ca8:	6878      	ldr	r0, [r7, #4]
   19caa:	f7f2 fa59 	bl	c160 <memcpy>
}
   19cae:	bf00      	nop
   19cb0:	3708      	adds	r7, #8
   19cb2:	46bd      	mov	sp, r7
   19cb4:	bd80      	pop	{r7, pc}

00019cb6 <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   19cb6:	b580      	push	{r7, lr}
   19cb8:	b082      	sub	sp, #8
   19cba:	af00      	add	r7, sp, #0
   19cbc:	6078      	str	r0, [r7, #4]
   19cbe:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   19cc0:	2208      	movs	r2, #8
   19cc2:	6839      	ldr	r1, [r7, #0]
   19cc4:	6878      	ldr	r0, [r7, #4]
   19cc6:	f7f2 fa4b 	bl	c160 <memcpy>
}
   19cca:	bf00      	nop
   19ccc:	3708      	adds	r7, #8
   19cce:	46bd      	mov	sp, r7
   19cd0:	bd80      	pop	{r7, pc}

00019cd2 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   19cd2:	b480      	push	{r7}
   19cd4:	b085      	sub	sp, #20
   19cd6:	af00      	add	r7, sp, #0
   19cd8:	6078      	str	r0, [r7, #4]
   19cda:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   19cdc:	2310      	movs	r3, #16
   19cde:	73fb      	strb	r3, [r7, #15]
   19ce0:	e00d      	b.n	19cfe <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
   19ce2:	683b      	ldr	r3, [r7, #0]
   19ce4:	1c5a      	adds	r2, r3, #1
   19ce6:	603a      	str	r2, [r7, #0]
   19ce8:	781a      	ldrb	r2, [r3, #0]
   19cea:	687b      	ldr	r3, [r7, #4]
   19cec:	1c59      	adds	r1, r3, #1
   19cee:	6079      	str	r1, [r7, #4]
   19cf0:	7819      	ldrb	r1, [r3, #0]
   19cf2:	404a      	eors	r2, r1
   19cf4:	b2d2      	uxtb	r2, r2
   19cf6:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   19cf8:	7bfb      	ldrb	r3, [r7, #15]
   19cfa:	3b01      	subs	r3, #1
   19cfc:	73fb      	strb	r3, [r7, #15]
   19cfe:	7bfb      	ldrb	r3, [r7, #15]
   19d00:	2b00      	cmp	r3, #0
   19d02:	d1ee      	bne.n	19ce2 <Calc128Xor+0x10>
  }
}
   19d04:	bf00      	nop
   19d06:	3714      	adds	r7, #20
   19d08:	46bd      	mov	sp, r7
   19d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d0e:	4770      	bx	lr

00019d10 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   19d10:	b480      	push	{r7}
   19d12:	b087      	sub	sp, #28
   19d14:	af00      	add	r7, sp, #0
   19d16:	60f8      	str	r0, [r7, #12]
   19d18:	60b9      	str	r1, [r7, #8]
   19d1a:	4613      	mov	r3, r2
   19d1c:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
   19d1e:	2300      	movs	r3, #0
   19d20:	82fb      	strh	r3, [r7, #22]
   19d22:	e013      	b.n	19d4c <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
   19d24:	88fb      	ldrh	r3, [r7, #6]
   19d26:	1e5a      	subs	r2, r3, #1
   19d28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   19d2c:	1ad3      	subs	r3, r2, r3
   19d2e:	461a      	mov	r2, r3
   19d30:	68fb      	ldr	r3, [r7, #12]
   19d32:	4413      	add	r3, r2
   19d34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   19d38:	68b9      	ldr	r1, [r7, #8]
   19d3a:	440a      	add	r2, r1
   19d3c:	7812      	ldrb	r2, [r2, #0]
   19d3e:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   19d40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   19d44:	b29b      	uxth	r3, r3
   19d46:	3301      	adds	r3, #1
   19d48:	b29b      	uxth	r3, r3
   19d4a:	82fb      	strh	r3, [r7, #22]
   19d4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   19d50:	88fb      	ldrh	r3, [r7, #6]
   19d52:	429a      	cmp	r2, r3
   19d54:	dbe6      	blt.n	19d24 <WStrReverseCpy+0x14>
  }
}
   19d56:	bf00      	nop
   19d58:	371c      	adds	r7, #28
   19d5a:	46bd      	mov	sp, r7
   19d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d60:	4770      	bx	lr

00019d62 <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   19d62:	b480      	push	{r7}
   19d64:	b085      	sub	sp, #20
   19d66:	af00      	add	r7, sp, #0
   19d68:	6078      	str	r0, [r7, #4]
   19d6a:	460b      	mov	r3, r1
   19d6c:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   19d6e:	2300      	movs	r3, #0
   19d70:	73fb      	strb	r3, [r7, #15]
   19d72:	e01a      	b.n	19daa <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
   19d74:	78fa      	ldrb	r2, [r7, #3]
   19d76:	7bfb      	ldrb	r3, [r7, #15]
   19d78:	1ad3      	subs	r3, r2, r3
   19d7a:	3b01      	subs	r3, #1
   19d7c:	687a      	ldr	r2, [r7, #4]
   19d7e:	4413      	add	r3, r2
   19d80:	781b      	ldrb	r3, [r3, #0]
   19d82:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
   19d84:	78fa      	ldrb	r2, [r7, #3]
   19d86:	7bfb      	ldrb	r3, [r7, #15]
   19d88:	1ad3      	subs	r3, r2, r3
   19d8a:	3b01      	subs	r3, #1
   19d8c:	687a      	ldr	r2, [r7, #4]
   19d8e:	4413      	add	r3, r2
   19d90:	7bfa      	ldrb	r2, [r7, #15]
   19d92:	6879      	ldr	r1, [r7, #4]
   19d94:	440a      	add	r2, r1
   19d96:	7812      	ldrb	r2, [r2, #0]
   19d98:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   19d9a:	7bfb      	ldrb	r3, [r7, #15]
   19d9c:	687a      	ldr	r2, [r7, #4]
   19d9e:	4413      	add	r3, r2
   19da0:	7bba      	ldrb	r2, [r7, #14]
   19da2:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   19da4:	7bfb      	ldrb	r3, [r7, #15]
   19da6:	3301      	adds	r3, #1
   19da8:	73fb      	strb	r3, [r7, #15]
   19daa:	78fb      	ldrb	r3, [r7, #3]
   19dac:	085b      	lsrs	r3, r3, #1
   19dae:	b2db      	uxtb	r3, r3
   19db0:	7bfa      	ldrb	r2, [r7, #15]
   19db2:	429a      	cmp	r2, r3
   19db4:	d3de      	bcc.n	19d74 <WStrReverse+0x12>
  }
}
   19db6:	bf00      	nop
   19db8:	3714      	adds	r7, #20
   19dba:	46bd      	mov	sp, r7
   19dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   19dc0:	4770      	bx	lr
	...

00019dc4 <__NVIC_EnableIRQ>:
{
   19dc4:	b480      	push	{r7}
   19dc6:	b083      	sub	sp, #12
   19dc8:	af00      	add	r7, sp, #0
   19dca:	4603      	mov	r3, r0
   19dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   19dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19dd2:	2b00      	cmp	r3, #0
   19dd4:	db0b      	blt.n	19dee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19dd6:	4909      	ldr	r1, [pc, #36]	; (19dfc <__NVIC_EnableIRQ+0x38>)
   19dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19ddc:	095b      	lsrs	r3, r3, #5
   19dde:	79fa      	ldrb	r2, [r7, #7]
   19de0:	f002 021f 	and.w	r2, r2, #31
   19de4:	2001      	movs	r0, #1
   19de6:	fa00 f202 	lsl.w	r2, r0, r2
   19dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   19dee:	bf00      	nop
   19df0:	370c      	adds	r7, #12
   19df2:	46bd      	mov	sp, r7
   19df4:	f85d 7b04 	ldr.w	r7, [sp], #4
   19df8:	4770      	bx	lr
   19dfa:	bf00      	nop
   19dfc:	e000e100 	.word	0xe000e100

00019e00 <__NVIC_DisableIRQ>:
{
   19e00:	b480      	push	{r7}
   19e02:	b083      	sub	sp, #12
   19e04:	af00      	add	r7, sp, #0
   19e06:	4603      	mov	r3, r0
   19e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   19e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19e0e:	2b00      	cmp	r3, #0
   19e10:	db10      	blt.n	19e34 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19e12:	490b      	ldr	r1, [pc, #44]	; (19e40 <__NVIC_DisableIRQ+0x40>)
   19e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19e18:	095b      	lsrs	r3, r3, #5
   19e1a:	79fa      	ldrb	r2, [r7, #7]
   19e1c:	f002 021f 	and.w	r2, r2, #31
   19e20:	2001      	movs	r0, #1
   19e22:	fa00 f202 	lsl.w	r2, r0, r2
   19e26:	3320      	adds	r3, #32
   19e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   19e2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19e30:	f3bf 8f6f 	isb	sy
}
   19e34:	bf00      	nop
   19e36:	370c      	adds	r7, #12
   19e38:	46bd      	mov	sp, r7
   19e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   19e3e:	4770      	bx	lr
   19e40:	e000e100 	.word	0xe000e100

00019e44 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   19e44:	b580      	push	{r7, lr}
   19e46:	b082      	sub	sp, #8
   19e48:	af00      	add	r7, sp, #0
   19e4a:	6078      	str	r0, [r7, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   19e4c:	687b      	ldr	r3, [r7, #4]
   19e4e:	2b00      	cmp	r3, #0
   19e50:	d00c      	beq.n	19e6c <error_check+0x28>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   19e52:	4a08      	ldr	r2, [pc, #32]	; (19e74 <error_check+0x30>)
   19e54:	687b      	ldr	r3, [r7, #4]
   19e56:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   19e58:	4b07      	ldr	r3, [pc, #28]	; (19e78 <error_check+0x34>)
   19e5a:	681b      	ldr	r3, [r3, #0]
   19e5c:	2b00      	cmp	r3, #0
   19e5e:	d005      	beq.n	19e6c <error_check+0x28>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   19e60:	4b05      	ldr	r3, [pc, #20]	; (19e78 <error_check+0x34>)
   19e62:	681b      	ldr	r3, [r3, #0]
   19e64:	4a03      	ldr	r2, [pc, #12]	; (19e74 <error_check+0x30>)
   19e66:	6812      	ldr	r2, [r2, #0]
   19e68:	4610      	mov	r0, r2
   19e6a:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   19e6c:	bf00      	nop
   19e6e:	3708      	adds	r7, #8
   19e70:	46bd      	mov	sp, r7
   19e72:	bd80      	pop	{r7, pc}
   19e74:	10004478 	.word	0x10004478
   19e78:	10004474 	.word	0x10004474

00019e7c <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   19e7c:	b5b0      	push	{r4, r5, r7, lr}
   19e7e:	b092      	sub	sp, #72	; 0x48
   19e80:	af00      	add	r7, sp, #0
   19e82:	4603      	mov	r3, r0
   19e84:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32NumXtalRetries = 0;
   19e86:	2300      	movs	r3, #0
   19e88:	647b      	str	r3, [r7, #68]	; 0x44


    g_ui32NumBytes     = 0;
   19e8a:	4b6c      	ldr	r3, [pc, #432]	; (1a03c <HciDrvRadioBoot+0x1c0>)
   19e8c:	2200      	movs	r2, #0
   19e8e:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   19e90:	4b6b      	ldr	r3, [pc, #428]	; (1a040 <HciDrvRadioBoot+0x1c4>)
   19e92:	2200      	movs	r2, #0
   19e94:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   19e96:	2301      	movs	r3, #1
   19e98:	643b      	str	r3, [r7, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   19e9a:	e0a1      	b.n	19fe0 <HciDrvRadioBoot+0x164>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   19e9c:	4969      	ldr	r1, [pc, #420]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19e9e:	2000      	movs	r0, #0
   19ea0:	f008 f84a 	bl	21f38 <am_hal_ble_initialize>
   19ea4:	63f8      	str	r0, [r7, #60]	; 0x3c
   19ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19ea8:	2b00      	cmp	r3, #0
   19eaa:	d006      	beq.n	19eba <HciDrvRadioBoot+0x3e>
   19eac:	4866      	ldr	r0, [pc, #408]	; (1a048 <HciDrvRadioBoot+0x1cc>)
   19eae:	f007 fb7b 	bl	215a8 <am_util_stdio_printf>
   19eb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   19eb4:	f7ff ffc6 	bl	19e44 <error_check>
   19eb8:	e0bd      	b.n	1a036 <HciDrvRadioBoot+0x1ba>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   19eba:	4b62      	ldr	r3, [pc, #392]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19ebc:	681b      	ldr	r3, [r3, #0]
   19ebe:	2100      	movs	r1, #0
   19ec0:	4618      	mov	r0, r3
   19ec2:	f008 f929 	bl	22118 <am_hal_ble_power_control>
   19ec6:	63b8      	str	r0, [r7, #56]	; 0x38
   19ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19eca:	2b00      	cmp	r3, #0
   19ecc:	d006      	beq.n	19edc <HciDrvRadioBoot+0x60>
   19ece:	485f      	ldr	r0, [pc, #380]	; (1a04c <HciDrvRadioBoot+0x1d0>)
   19ed0:	f007 fb6a 	bl	215a8 <am_util_stdio_printf>
   19ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   19ed6:	f7ff ffb5 	bl	19e44 <error_check>
   19eda:	e0ac      	b.n	1a036 <HciDrvRadioBoot+0x1ba>

        am_hal_ble_config_t sBleConfig =
   19edc:	4b5c      	ldr	r3, [pc, #368]	; (1a050 <HciDrvRadioBoot+0x1d4>)
   19ede:	f107 0408 	add.w	r4, r7, #8
   19ee2:	461d      	mov	r5, r3
   19ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19ee8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   19eec:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   19ef0:	4b54      	ldr	r3, [pc, #336]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19ef2:	681b      	ldr	r3, [r3, #0]
   19ef4:	f107 0208 	add.w	r2, r7, #8
   19ef8:	4611      	mov	r1, r2
   19efa:	4618      	mov	r0, r3
   19efc:	f008 f884 	bl	22008 <am_hal_ble_config>
   19f00:	6378      	str	r0, [r7, #52]	; 0x34
   19f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19f04:	2b00      	cmp	r3, #0
   19f06:	d006      	beq.n	19f16 <HciDrvRadioBoot+0x9a>
   19f08:	4852      	ldr	r0, [pc, #328]	; (1a054 <HciDrvRadioBoot+0x1d8>)
   19f0a:	f007 fb4d 	bl	215a8 <am_util_stdio_printf>
   19f0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   19f10:	f7ff ff98 	bl	19e44 <error_check>
   19f14:	e08f      	b.n	1a036 <HciDrvRadioBoot+0x1ba>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   19f16:	79fb      	ldrb	r3, [r7, #7]
   19f18:	2b00      	cmp	r3, #0
   19f1a:	d003      	beq.n	19f24 <HciDrvRadioBoot+0xa8>
        {
            am_util_delay_ms(1000);
   19f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   19f20:	f006 fbf4 	bl	2070c <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   19f24:	4b47      	ldr	r3, [pc, #284]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19f26:	681b      	ldr	r3, [r3, #0]
   19f28:	4618      	mov	r0, r3
   19f2a:	f008 ffeb 	bl	22f04 <am_hal_ble_boot>
   19f2e:	6438      	str	r0, [r7, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   19f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f32:	2b00      	cmp	r3, #0
   19f34:	d059      	beq.n	19fea <HciDrvRadioBoot+0x16e>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   19f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19f38:	4a47      	ldr	r2, [pc, #284]	; (1a058 <HciDrvRadioBoot+0x1dc>)
   19f3a:	4293      	cmp	r3, r2
   19f3c:	d12a      	bne.n	19f94 <HciDrvRadioBoot+0x118>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   19f3e:	4b41      	ldr	r3, [pc, #260]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19f40:	681b      	ldr	r3, [r3, #0]
   19f42:	2101      	movs	r1, #1
   19f44:	4618      	mov	r0, r3
   19f46:	f008 f8e7 	bl	22118 <am_hal_ble_power_control>
   19f4a:	6338      	str	r0, [r7, #48]	; 0x30
   19f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19f4e:	2b00      	cmp	r3, #0
   19f50:	d006      	beq.n	19f60 <HciDrvRadioBoot+0xe4>
   19f52:	4842      	ldr	r0, [pc, #264]	; (1a05c <HciDrvRadioBoot+0x1e0>)
   19f54:	f007 fb28 	bl	215a8 <am_util_stdio_printf>
   19f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
   19f5a:	f7ff ff73 	bl	19e44 <error_check>
   19f5e:	e06a      	b.n	1a036 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   19f60:	4b38      	ldr	r3, [pc, #224]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19f62:	681b      	ldr	r3, [r3, #0]
   19f64:	4618      	mov	r0, r3
   19f66:	f008 f823 	bl	21fb0 <am_hal_ble_deinitialize>
   19f6a:	62f8      	str	r0, [r7, #44]	; 0x2c
   19f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19f6e:	2b00      	cmp	r3, #0
   19f70:	d006      	beq.n	19f80 <HciDrvRadioBoot+0x104>
   19f72:	483b      	ldr	r0, [pc, #236]	; (1a060 <HciDrvRadioBoot+0x1e4>)
   19f74:	f007 fb18 	bl	215a8 <am_util_stdio_printf>
   19f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19f7a:	f7ff ff63 	bl	19e44 <error_check>
   19f7e:	e05a      	b.n	1a036 <HciDrvRadioBoot+0x1ba>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   19f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19f82:	1c5a      	adds	r2, r3, #1
   19f84:	647a      	str	r2, [r7, #68]	; 0x44
   19f86:	2b09      	cmp	r3, #9
   19f88:	d854      	bhi.n	1a034 <HciDrvRadioBoot+0x1b8>
            {
                am_util_delay_ms(1000);
   19f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   19f8e:	f006 fbbd 	bl	2070c <am_util_delay_ms>
   19f92:	e025      	b.n	19fe0 <HciDrvRadioBoot+0x164>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   19f94:	4b2b      	ldr	r3, [pc, #172]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19f96:	681b      	ldr	r3, [r3, #0]
   19f98:	2101      	movs	r1, #1
   19f9a:	4618      	mov	r0, r3
   19f9c:	f008 f8bc 	bl	22118 <am_hal_ble_power_control>
   19fa0:	62b8      	str	r0, [r7, #40]	; 0x28
   19fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19fa4:	2b00      	cmp	r3, #0
   19fa6:	d006      	beq.n	19fb6 <HciDrvRadioBoot+0x13a>
   19fa8:	482c      	ldr	r0, [pc, #176]	; (1a05c <HciDrvRadioBoot+0x1e0>)
   19faa:	f007 fafd 	bl	215a8 <am_util_stdio_printf>
   19fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19fb0:	f7ff ff48 	bl	19e44 <error_check>
   19fb4:	e03f      	b.n	1a036 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   19fb6:	4b23      	ldr	r3, [pc, #140]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19fb8:	681b      	ldr	r3, [r3, #0]
   19fba:	4618      	mov	r0, r3
   19fbc:	f007 fff8 	bl	21fb0 <am_hal_ble_deinitialize>
   19fc0:	6278      	str	r0, [r7, #36]	; 0x24
   19fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19fc4:	2b00      	cmp	r3, #0
   19fc6:	d006      	beq.n	19fd6 <HciDrvRadioBoot+0x15a>
   19fc8:	4825      	ldr	r0, [pc, #148]	; (1a060 <HciDrvRadioBoot+0x1e4>)
   19fca:	f007 faed 	bl	215a8 <am_util_stdio_printf>
   19fce:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19fd0:	f7ff ff38 	bl	19e44 <error_check>
   19fd4:	e02f      	b.n	1a036 <HciDrvRadioBoot+0x1ba>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   19fd6:	6c38      	ldr	r0, [r7, #64]	; 0x40
   19fd8:	f7ff ff34 	bl	19e44 <error_check>
            return;
   19fdc:	bf00      	nop
   19fde:	e02a      	b.n	1a036 <HciDrvRadioBoot+0x1ba>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   19fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19fe2:	2b00      	cmp	r3, #0
   19fe4:	f47f af5a 	bne.w	19e9c <HciDrvRadioBoot+0x20>
   19fe8:	e000      	b.n	19fec <HciDrvRadioBoot+0x170>
            break;
   19fea:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   19fec:	4b15      	ldr	r3, [pc, #84]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19fee:	681b      	ldr	r3, [r3, #0]
   19ff0:	2108      	movs	r1, #8
   19ff2:	4618      	mov	r0, r3
   19ff4:	f009 f85a 	bl	230ac <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   19ff8:	4b12      	ldr	r3, [pc, #72]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   19ffa:	681b      	ldr	r3, [r3, #0]
   19ffc:	f240 2181 	movw	r1, #641	; 0x281
   1a000:	4618      	mov	r0, r3
   1a002:	f008 fc63 	bl	228cc <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   1a006:	4b0f      	ldr	r3, [pc, #60]	; (1a044 <HciDrvRadioBoot+0x1c8>)
   1a008:	681b      	ldr	r3, [r3, #0]
   1a00a:	f240 2181 	movw	r1, #641	; 0x281
   1a00e:	4618      	mov	r0, r3
   1a010:	f008 fc2e 	bl	22870 <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   1a014:	200c      	movs	r0, #12
   1a016:	f7ff fed5 	bl	19dc4 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   1a01a:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1a01e:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a022:	4910      	ldr	r1, [pc, #64]	; (1a064 <HciDrvRadioBoot+0x1e8>)
   1a024:	4810      	ldr	r0, [pc, #64]	; (1a068 <HciDrvRadioBoot+0x1ec>)
   1a026:	f009 ff09 	bl	23e3c <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   1a02a:	4b10      	ldr	r3, [pc, #64]	; (1a06c <HciDrvRadioBoot+0x1f0>)
   1a02c:	2200      	movs	r2, #0
   1a02e:	601a      	str	r2, [r3, #0]

    return;
   1a030:	bf00      	nop
   1a032:	e000      	b.n	1a036 <HciDrvRadioBoot+0x1ba>
                return;
   1a034:	bf00      	nop
}
   1a036:	3748      	adds	r7, #72	; 0x48
   1a038:	46bd      	mov	sp, r7
   1a03a:	bdb0      	pop	{r4, r5, r7, pc}
   1a03c:	10004468 	.word	0x10004468
   1a040:	1000446c 	.word	0x1000446c
   1a044:	10009e18 	.word	0x10009e18
   1a048:	000256d4 	.word	0x000256d4
   1a04c:	00025708 	.word	0x00025708
   1a050:	00025804 	.word	0x00025804
   1a054:	00025754 	.word	0x00025754
   1a058:	0800000b 	.word	0x0800000b
   1a05c:	0002578c 	.word	0x0002578c
   1a060:	000257d4 	.word	0x000257d4
   1a064:	100095f8 	.word	0x100095f8
   1a068:	100094d0 	.word	0x100094d0
   1a06c:	10004470 	.word	0x10004470

0001a070 <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   1a070:	b580      	push	{r7, lr}
   1a072:	b082      	sub	sp, #8
   1a074:	af00      	add	r7, sp, #0
    BLE_HEARTBEAT_STOP();
   1a076:	481c      	ldr	r0, [pc, #112]	; (1a0e8 <HciDrvRadioShutdown+0x78>)
   1a078:	f000 fe38 	bl	1acec <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   1a07c:	200c      	movs	r0, #12
   1a07e:	f7ff febf 	bl	19e00 <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   1a082:	4b1a      	ldr	r3, [pc, #104]	; (1a0ec <HciDrvRadioShutdown+0x7c>)
   1a084:	681b      	ldr	r3, [r3, #0]
   1a086:	2101      	movs	r1, #1
   1a088:	4618      	mov	r0, r3
   1a08a:	f008 f845 	bl	22118 <am_hal_ble_power_control>
   1a08e:	6078      	str	r0, [r7, #4]
   1a090:	687b      	ldr	r3, [r7, #4]
   1a092:	2b00      	cmp	r3, #0
   1a094:	d006      	beq.n	1a0a4 <HciDrvRadioShutdown+0x34>
   1a096:	4816      	ldr	r0, [pc, #88]	; (1a0f0 <HciDrvRadioShutdown+0x80>)
   1a098:	f007 fa86 	bl	215a8 <am_util_stdio_printf>
   1a09c:	6878      	ldr	r0, [r7, #4]
   1a09e:	f7ff fed1 	bl	19e44 <error_check>
   1a0a2:	e01d      	b.n	1a0e0 <HciDrvRadioShutdown+0x70>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   1a0a4:	bf00      	nop
   1a0a6:	4b13      	ldr	r3, [pc, #76]	; (1a0f4 <HciDrvRadioShutdown+0x84>)
   1a0a8:	689b      	ldr	r3, [r3, #8]
   1a0aa:	f3c3 3340 	ubfx	r3, r3, #13, #1
   1a0ae:	b2db      	uxtb	r3, r3
   1a0b0:	2b00      	cmp	r3, #0
   1a0b2:	d1f8      	bne.n	1a0a6 <HciDrvRadioShutdown+0x36>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   1a0b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0ec <HciDrvRadioShutdown+0x7c>)
   1a0b6:	681b      	ldr	r3, [r3, #0]
   1a0b8:	4618      	mov	r0, r3
   1a0ba:	f007 ff79 	bl	21fb0 <am_hal_ble_deinitialize>
   1a0be:	6038      	str	r0, [r7, #0]
   1a0c0:	683b      	ldr	r3, [r7, #0]
   1a0c2:	2b00      	cmp	r3, #0
   1a0c4:	d006      	beq.n	1a0d4 <HciDrvRadioShutdown+0x64>
   1a0c6:	480c      	ldr	r0, [pc, #48]	; (1a0f8 <HciDrvRadioShutdown+0x88>)
   1a0c8:	f007 fa6e 	bl	215a8 <am_util_stdio_printf>
   1a0cc:	6838      	ldr	r0, [r7, #0]
   1a0ce:	f7ff feb9 	bl	19e44 <error_check>
   1a0d2:	e005      	b.n	1a0e0 <HciDrvRadioShutdown+0x70>

    g_ui32NumBytes   = 0;
   1a0d4:	4b09      	ldr	r3, [pc, #36]	; (1a0fc <HciDrvRadioShutdown+0x8c>)
   1a0d6:	2200      	movs	r2, #0
   1a0d8:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   1a0da:	4b09      	ldr	r3, [pc, #36]	; (1a100 <HciDrvRadioShutdown+0x90>)
   1a0dc:	2200      	movs	r2, #0
   1a0de:	601a      	str	r2, [r3, #0]
}
   1a0e0:	3708      	adds	r7, #8
   1a0e2:	46bd      	mov	sp, r7
   1a0e4:	bd80      	pop	{r7, pc}
   1a0e6:	bf00      	nop
   1a0e8:	100094e8 	.word	0x100094e8
   1a0ec:	10009e18 	.word	0x10009e18
   1a0f0:	0002578c 	.word	0x0002578c
   1a0f4:	40021000 	.word	0x40021000
   1a0f8:	000257d4 	.word	0x000257d4
   1a0fc:	10004468 	.word	0x10004468
   1a100:	1000446c 	.word	0x1000446c

0001a104 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   1a104:	b580      	push	{r7, lr}
   1a106:	b094      	sub	sp, #80	; 0x50
   1a108:	af00      	add	r7, sp, #0
   1a10a:	4603      	mov	r3, r0
   1a10c:	603a      	str	r2, [r7, #0]
   1a10e:	71fb      	strb	r3, [r7, #7]
   1a110:	460b      	mov	r3, r1
   1a112:	80bb      	strh	r3, [r7, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   1a114:	4b3b      	ldr	r3, [pc, #236]	; (1a204 <hciDrvWrite+0x100>)
   1a116:	689a      	ldr	r2, [r3, #8]
   1a118:	4b3a      	ldr	r3, [pc, #232]	; (1a204 <hciDrvWrite+0x100>)
   1a11a:	68db      	ldr	r3, [r3, #12]
   1a11c:	429a      	cmp	r2, r3
   1a11e:	d105      	bne.n	1a12c <hciDrvWrite+0x28>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   1a120:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   1a124:	f7ff fe8e 	bl	19e44 <error_check>
   1a128:	88bb      	ldrh	r3, [r7, #4]
   1a12a:	e067      	b.n	1a1fc <hciDrvWrite+0xf8>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   1a12c:	88bb      	ldrh	r3, [r7, #4]
   1a12e:	2bff      	cmp	r3, #255	; 0xff
   1a130:	d904      	bls.n	1a13c <hciDrvWrite+0x38>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   1a132:	4835      	ldr	r0, [pc, #212]	; (1a208 <hciDrvWrite+0x104>)
   1a134:	f7ff fe86 	bl	19e44 <error_check>
   1a138:	88bb      	ldrh	r3, [r7, #4]
   1a13a:	e05f      	b.n	1a1fc <hciDrvWrite+0xf8>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   1a13c:	4b31      	ldr	r3, [pc, #196]	; (1a204 <hciDrvWrite+0x100>)
   1a13e:	695a      	ldr	r2, [r3, #20]
   1a140:	4b30      	ldr	r3, [pc, #192]	; (1a204 <hciDrvWrite+0x100>)
   1a142:	681b      	ldr	r3, [r3, #0]
   1a144:	4413      	add	r3, r2
   1a146:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   1a148:	88bb      	ldrh	r3, [r7, #4]
   1a14a:	3301      	adds	r3, #1
   1a14c:	461a      	mov	r2, r3
   1a14e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a150:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   1a152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a154:	3304      	adds	r3, #4
   1a156:	647b      	str	r3, [r7, #68]	; 0x44

    *pui8Wptr++ = type;
   1a158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a15a:	1c5a      	adds	r2, r3, #1
   1a15c:	647a      	str	r2, [r7, #68]	; 0x44
   1a15e:	79fa      	ldrb	r2, [r7, #7]
   1a160:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   1a162:	2300      	movs	r3, #0
   1a164:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a166:	e00a      	b.n	1a17e <hciDrvWrite+0x7a>
    {
        pui8Wptr[i] = pData[i];
   1a168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a16c:	4413      	add	r3, r2
   1a16e:	6839      	ldr	r1, [r7, #0]
   1a170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1a172:	440a      	add	r2, r1
   1a174:	7812      	ldrb	r2, [r2, #0]
   1a176:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   1a178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a17a:	3301      	adds	r3, #1
   1a17c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a17e:	88ba      	ldrh	r2, [r7, #4]
   1a180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a182:	429a      	cmp	r2, r3
   1a184:	d8f0      	bhi.n	1a168 <hciDrvWrite+0x64>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   1a186:	2201      	movs	r2, #1
   1a188:	2100      	movs	r1, #0
   1a18a:	481e      	ldr	r0, [pc, #120]	; (1a204 <hciDrvWrite+0x100>)
   1a18c:	f009 fe62 	bl	23e54 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1a190:	4b1e      	ldr	r3, [pc, #120]	; (1a20c <hciDrvWrite+0x108>)
   1a192:	781b      	ldrb	r3, [r3, #0]
   1a194:	2101      	movs	r1, #1
   1a196:	4618      	mov	r0, r3
   1a198:	f001 fa6c 	bl	1b674 <WsfSetEvent>
#endif

#ifdef AM_CUSTOM_BDADDR
    if (type == HCI_CMD_TYPE)
   1a19c:	79fb      	ldrb	r3, [r7, #7]
   1a19e:	2b01      	cmp	r3, #1
   1a1a0:	d12b      	bne.n	1a1fa <hciDrvWrite+0xf6>
    {
        uint16_t opcode;
        BYTES_TO_UINT16(opcode, pData);
   1a1a2:	683b      	ldr	r3, [r7, #0]
   1a1a4:	781b      	ldrb	r3, [r3, #0]
   1a1a6:	b29a      	uxth	r2, r3
   1a1a8:	683b      	ldr	r3, [r7, #0]
   1a1aa:	3301      	adds	r3, #1
   1a1ac:	781b      	ldrb	r3, [r3, #0]
   1a1ae:	b29b      	uxth	r3, r3
   1a1b0:	021b      	lsls	r3, r3, #8
   1a1b2:	b29b      	uxth	r3, r3
   1a1b4:	4413      	add	r3, r2
   1a1b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if (HCI_OPCODE_RESET == opcode)
   1a1ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   1a1be:	f640 4203 	movw	r2, #3075	; 0xc03
   1a1c2:	4293      	cmp	r3, r2
   1a1c4:	d119      	bne.n	1a1fa <hciDrvWrite+0xf6>
        {

            extern uint8_t g_BLEMacAddress[6];
            am_hal_mcuctrl_device_t sDevice;
            am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   1a1c6:	f107 030c 	add.w	r3, r7, #12
   1a1ca:	4619      	mov	r1, r3
   1a1cc:	2001      	movs	r0, #1
   1a1ce:	f009 fcd7 	bl	23b80 <am_hal_mcuctrl_info_get>
            g_BLEMacAddress[0] = sDevice.ui32ChipID0;
   1a1d2:	693b      	ldr	r3, [r7, #16]
   1a1d4:	b2da      	uxtb	r2, r3
   1a1d6:	4b0e      	ldr	r3, [pc, #56]	; (1a210 <hciDrvWrite+0x10c>)
   1a1d8:	701a      	strb	r2, [r3, #0]
            g_BLEMacAddress[1] = sDevice.ui32ChipID0 >> 8;
   1a1da:	693b      	ldr	r3, [r7, #16]
   1a1dc:	0a1b      	lsrs	r3, r3, #8
   1a1de:	b2da      	uxtb	r2, r3
   1a1e0:	4b0b      	ldr	r3, [pc, #44]	; (1a210 <hciDrvWrite+0x10c>)
   1a1e2:	705a      	strb	r2, [r3, #1]
            g_BLEMacAddress[2] = sDevice.ui32ChipID0 >> 16;
   1a1e4:	693b      	ldr	r3, [r7, #16]
   1a1e6:	0c1b      	lsrs	r3, r3, #16
   1a1e8:	b2da      	uxtb	r2, r3
   1a1ea:	4b09      	ldr	r3, [pc, #36]	; (1a210 <hciDrvWrite+0x10c>)
   1a1ec:	709a      	strb	r2, [r3, #2]

            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   1a1ee:	4a08      	ldr	r2, [pc, #32]	; (1a210 <hciDrvWrite+0x10c>)
   1a1f0:	2106      	movs	r1, #6
   1a1f2:	f64f 4032 	movw	r0, #64562	; 0xfc32
   1a1f6:	f7fb f8fe 	bl	153f6 <HciVendorSpecificCmd>
        }
    }
#endif

    return len;
   1a1fa:	88bb      	ldrh	r3, [r7, #4]
}
   1a1fc:	4618      	mov	r0, r3
   1a1fe:	3750      	adds	r7, #80	; 0x50
   1a200:	46bd      	mov	sp, r7
   1a202:	bd80      	pop	{r7, pc}
   1a204:	100094d0 	.word	0x100094d0
   1a208:	09000001 	.word	0x09000001
   1a20c:	10004465 	.word	0x10004465
   1a210:	10002c04 	.word	0x10002c04

0001a214 <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   1a214:	b480      	push	{r7}
   1a216:	b083      	sub	sp, #12
   1a218:	af00      	add	r7, sp, #0
   1a21a:	4603      	mov	r3, r0
   1a21c:	71fb      	strb	r3, [r7, #7]
    g_HciDrvHandleID = handlerId;
   1a21e:	4a0a      	ldr	r2, [pc, #40]	; (1a248 <HciDrvHandlerInit+0x34>)
   1a220:	79fb      	ldrb	r3, [r7, #7]
   1a222:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   1a224:	4a09      	ldr	r2, [pc, #36]	; (1a24c <HciDrvHandlerInit+0x38>)
   1a226:	79fb      	ldrb	r3, [r7, #7]
   1a228:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   1a22a:	4b08      	ldr	r3, [pc, #32]	; (1a24c <HciDrvHandlerInit+0x38>)
   1a22c:	2202      	movs	r2, #2
   1a22e:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   1a230:	4a07      	ldr	r2, [pc, #28]	; (1a250 <HciDrvHandlerInit+0x3c>)
   1a232:	79fb      	ldrb	r3, [r7, #7]
   1a234:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   1a236:	4b06      	ldr	r3, [pc, #24]	; (1a250 <HciDrvHandlerInit+0x3c>)
   1a238:	2203      	movs	r2, #3
   1a23a:	731a      	strb	r2, [r3, #12]
}
   1a23c:	bf00      	nop
   1a23e:	370c      	adds	r7, #12
   1a240:	46bd      	mov	sp, r7
   1a242:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a246:	4770      	bx	lr
   1a248:	10004465 	.word	0x10004465
   1a24c:	100094e8 	.word	0x100094e8
   1a250:	10009e1c 	.word	0x10009e1c

0001a254 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   1a254:	b580      	push	{r7, lr}
   1a256:	b082      	sub	sp, #8
   1a258:	af00      	add	r7, sp, #0
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   1a25a:	4b0e      	ldr	r3, [pc, #56]	; (1a294 <HciDrvIntService+0x40>)
   1a25c:	681b      	ldr	r3, [r3, #0]
   1a25e:	2101      	movs	r1, #1
   1a260:	4618      	mov	r0, r3
   1a262:	f008 fb25 	bl	228b0 <am_hal_ble_int_status>
   1a266:	6078      	str	r0, [r7, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   1a268:	4b0a      	ldr	r3, [pc, #40]	; (1a294 <HciDrvIntService+0x40>)
   1a26a:	681b      	ldr	r3, [r3, #0]
   1a26c:	6879      	ldr	r1, [r7, #4]
   1a26e:	4618      	mov	r0, r3
   1a270:	f008 fb2c 	bl	228cc <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   1a274:	4b08      	ldr	r3, [pc, #32]	; (1a298 <HciDrvIntService+0x44>)
   1a276:	681b      	ldr	r3, [r3, #0]
   1a278:	3301      	adds	r3, #1
   1a27a:	4a07      	ldr	r2, [pc, #28]	; (1a298 <HciDrvIntService+0x44>)
   1a27c:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1a27e:	4b07      	ldr	r3, [pc, #28]	; (1a29c <HciDrvIntService+0x48>)
   1a280:	781b      	ldrb	r3, [r3, #0]
   1a282:	2101      	movs	r1, #1
   1a284:	4618      	mov	r0, r3
   1a286:	f001 f9f5 	bl	1b674 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   1a28a:	bf00      	nop
   1a28c:	3708      	adds	r7, #8
   1a28e:	46bd      	mov	sp, r7
   1a290:	bd80      	pop	{r7, pc}
   1a292:	bf00      	nop
   1a294:	10009e18 	.word	0x10009e18
   1a298:	10004470 	.word	0x10004470
   1a29c:	10004465 	.word	0x10004465

0001a2a0 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1a2a0:	b580      	push	{r7, lr}
   1a2a2:	b08a      	sub	sp, #40	; 0x28
   1a2a4:	af00      	add	r7, sp, #0
   1a2a6:	4603      	mov	r3, r0
   1a2a8:	6039      	str	r1, [r7, #0]
   1a2aa:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   1a2ac:	2300      	movs	r3, #0
   1a2ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   1a2b0:	2300      	movs	r3, #0
   1a2b2:	623b      	str	r3, [r7, #32]
    uint32_t read_hci_packet_count = 0;
   1a2b4:	2300      	movs	r3, #0
   1a2b6:	61fb      	str	r3, [r7, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   1a2b8:	683b      	ldr	r3, [r7, #0]
   1a2ba:	789b      	ldrb	r3, [r3, #2]
   1a2bc:	2b02      	cmp	r3, #2
   1a2be:	d107      	bne.n	1a2d0 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   1a2c0:	f7fa fe87 	bl	14fd2 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   1a2c4:	f242 7110 	movw	r1, #10000	; 0x2710
   1a2c8:	4889      	ldr	r0, [pc, #548]	; (1a4f0 <HciDrvHandler+0x250>)
   1a2ca:	f000 fcfb 	bl	1acc4 <WsfTimerStartMs>
        return;
   1a2ce:	e10c      	b.n	1a4ea <HciDrvHandler+0x24a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   1a2d0:	4b88      	ldr	r3, [pc, #544]	; (1a4f4 <HciDrvHandler+0x254>)
   1a2d2:	681a      	ldr	r2, [r3, #0]
   1a2d4:	4b88      	ldr	r3, [pc, #544]	; (1a4f8 <HciDrvHandler+0x258>)
   1a2d6:	681b      	ldr	r3, [r3, #0]
   1a2d8:	429a      	cmp	r2, r3
   1a2da:	f240 80ea 	bls.w	1a4b2 <HciDrvHandler+0x212>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   1a2de:	4b87      	ldr	r3, [pc, #540]	; (1a4fc <HciDrvHandler+0x25c>)
   1a2e0:	681a      	ldr	r2, [r3, #0]
   1a2e2:	4b85      	ldr	r3, [pc, #532]	; (1a4f8 <HciDrvHandler+0x258>)
   1a2e4:	681b      	ldr	r3, [r3, #0]
   1a2e6:	18d0      	adds	r0, r2, r3
   1a2e8:	4b82      	ldr	r3, [pc, #520]	; (1a4f4 <HciDrvHandler+0x254>)
   1a2ea:	681b      	ldr	r3, [r3, #0]
   1a2ec:	b29a      	uxth	r2, r3
   1a2ee:	4b82      	ldr	r3, [pc, #520]	; (1a4f8 <HciDrvHandler+0x258>)
   1a2f0:	681b      	ldr	r3, [r3, #0]
   1a2f2:	b29b      	uxth	r3, r3
   1a2f4:	1ad3      	subs	r3, r2, r3
   1a2f6:	b29b      	uxth	r3, r3
   1a2f8:	4619      	mov	r1, r3
   1a2fa:	f7fd fc0d 	bl	17b18 <hciTrSerialRxIncoming>
   1a2fe:	4603      	mov	r3, r0
   1a300:	461a      	mov	r2, r3
   1a302:	4b7d      	ldr	r3, [pc, #500]	; (1a4f8 <HciDrvHandler+0x258>)
   1a304:	681b      	ldr	r3, [r3, #0]
   1a306:	4413      	add	r3, r2
   1a308:	4a7b      	ldr	r2, [pc, #492]	; (1a4f8 <HciDrvHandler+0x258>)
   1a30a:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   1a30c:	4b7a      	ldr	r3, [pc, #488]	; (1a4f8 <HciDrvHandler+0x258>)
   1a30e:	681a      	ldr	r2, [r3, #0]
   1a310:	4b78      	ldr	r3, [pc, #480]	; (1a4f4 <HciDrvHandler+0x254>)
   1a312:	681b      	ldr	r3, [r3, #0]
   1a314:	429a      	cmp	r2, r3
   1a316:	d006      	beq.n	1a326 <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1a318:	4b79      	ldr	r3, [pc, #484]	; (1a500 <HciDrvHandler+0x260>)
   1a31a:	781b      	ldrb	r3, [r3, #0]
   1a31c:	2101      	movs	r1, #1
   1a31e:	4618      	mov	r0, r3
   1a320:	f001 f9a8 	bl	1b674 <WsfSetEvent>
            return;
   1a324:	e0e1      	b.n	1a4ea <HciDrvHandler+0x24a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   1a326:	4b73      	ldr	r3, [pc, #460]	; (1a4f4 <HciDrvHandler+0x254>)
   1a328:	2200      	movs	r2, #0
   1a32a:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   1a32c:	4b72      	ldr	r3, [pc, #456]	; (1a4f8 <HciDrvHandler+0x258>)
   1a32e:	2200      	movs	r2, #0
   1a330:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   1a332:	e0be      	b.n	1a4b2 <HciDrvHandler+0x212>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   1a334:	4b73      	ldr	r3, [pc, #460]	; (1a504 <HciDrvHandler+0x264>)
   1a336:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1a33a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1a33e:	b2db      	uxtb	r3, r3
   1a340:	2b00      	cmp	r3, #0
   1a342:	d07e      	beq.n	1a442 <HciDrvHandler+0x1a2>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   1a344:	4b70      	ldr	r3, [pc, #448]	; (1a508 <HciDrvHandler+0x268>)
   1a346:	681b      	ldr	r3, [r3, #0]
   1a348:	60fb      	str	r3, [r7, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   1a34a:	4869      	ldr	r0, [pc, #420]	; (1a4f0 <HciDrvHandler+0x250>)
   1a34c:	f000 fcce 	bl	1acec <WsfTimerStop>
   1a350:	f242 7110 	movw	r1, #10000	; 0x2710
   1a354:	4866      	ldr	r0, [pc, #408]	; (1a4f0 <HciDrvHandler+0x250>)
   1a356:	f000 fcb5 	bl	1acc4 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   1a35a:	4b66      	ldr	r3, [pc, #408]	; (1a4f4 <HciDrvHandler+0x254>)
   1a35c:	2200      	movs	r2, #0
   1a35e:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   1a360:	4b6a      	ldr	r3, [pc, #424]	; (1a50c <HciDrvHandler+0x26c>)
   1a362:	681b      	ldr	r3, [r3, #0]
   1a364:	4a63      	ldr	r2, [pc, #396]	; (1a4f4 <HciDrvHandler+0x254>)
   1a366:	496a      	ldr	r1, [pc, #424]	; (1a510 <HciDrvHandler+0x270>)
   1a368:	4618      	mov	r0, r3
   1a36a:	f008 f85d 	bl	22428 <am_hal_ble_blocking_hci_read>
   1a36e:	6138      	str	r0, [r7, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   1a370:	4b60      	ldr	r3, [pc, #384]	; (1a4f4 <HciDrvHandler+0x254>)
   1a372:	681b      	ldr	r3, [r3, #0]
   1a374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1a378:	d908      	bls.n	1a38c <HciDrvHandler+0xec>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   1a37a:	4b66      	ldr	r3, [pc, #408]	; (1a514 <HciDrvHandler+0x274>)
   1a37c:	60bb      	str	r3, [r7, #8]
   1a37e:	4866      	ldr	r0, [pc, #408]	; (1a518 <HciDrvHandler+0x278>)
   1a380:	f007 f912 	bl	215a8 <am_util_stdio_printf>
   1a384:	68b8      	ldr	r0, [r7, #8]
   1a386:	f7ff fd5d 	bl	19e44 <error_check>
   1a38a:	e0ae      	b.n	1a4ea <HciDrvHandler+0x24a>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   1a38c:	693b      	ldr	r3, [r7, #16]
   1a38e:	2b00      	cmp	r3, #0
   1a390:	d13d      	bne.n	1a40e <HciDrvHandler+0x16e>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   1a392:	2300      	movs	r3, #0
   1a394:	61bb      	str	r3, [r7, #24]
   1a396:	e012      	b.n	1a3be <HciDrvHandler+0x11e>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   1a398:	4b5a      	ldr	r3, [pc, #360]	; (1a504 <HciDrvHandler+0x264>)
   1a39a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1a39e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1a3a2:	b2db      	uxtb	r3, r3
   1a3a4:	2b00      	cmp	r3, #0
   1a3a6:	d00e      	beq.n	1a3c6 <HciDrvHandler+0x126>
   1a3a8:	4b57      	ldr	r3, [pc, #348]	; (1a508 <HciDrvHandler+0x268>)
   1a3aa:	681a      	ldr	r2, [r3, #0]
   1a3ac:	68fb      	ldr	r3, [r7, #12]
   1a3ae:	429a      	cmp	r2, r3
   1a3b0:	d109      	bne.n	1a3c6 <HciDrvHandler+0x126>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   1a3b2:	2001      	movs	r0, #1
   1a3b4:	f006 f9c8 	bl	20748 <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   1a3b8:	69bb      	ldr	r3, [r7, #24]
   1a3ba:	3301      	adds	r3, #1
   1a3bc:	61bb      	str	r3, [r7, #24]
   1a3be:	69bb      	ldr	r3, [r7, #24]
   1a3c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1a3c4:	d3e8      	bcc.n	1a398 <HciDrvHandler+0xf8>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   1a3c6:	4b4d      	ldr	r3, [pc, #308]	; (1a4fc <HciDrvHandler+0x25c>)
   1a3c8:	681a      	ldr	r2, [r3, #0]
   1a3ca:	4b4a      	ldr	r3, [pc, #296]	; (1a4f4 <HciDrvHandler+0x254>)
   1a3cc:	681b      	ldr	r3, [r3, #0]
   1a3ce:	b29b      	uxth	r3, r3
   1a3d0:	4619      	mov	r1, r3
   1a3d2:	4610      	mov	r0, r2
   1a3d4:	f7fd fba0 	bl	17b18 <hciTrSerialRxIncoming>
   1a3d8:	4603      	mov	r3, r0
   1a3da:	461a      	mov	r2, r3
   1a3dc:	4b46      	ldr	r3, [pc, #280]	; (1a4f8 <HciDrvHandler+0x258>)
   1a3de:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   1a3e0:	4b45      	ldr	r3, [pc, #276]	; (1a4f8 <HciDrvHandler+0x258>)
   1a3e2:	681a      	ldr	r2, [r3, #0]
   1a3e4:	4b43      	ldr	r3, [pc, #268]	; (1a4f4 <HciDrvHandler+0x254>)
   1a3e6:	681b      	ldr	r3, [r3, #0]
   1a3e8:	429a      	cmp	r2, r3
   1a3ea:	d006      	beq.n	1a3fa <HciDrvHandler+0x15a>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1a3ec:	4b44      	ldr	r3, [pc, #272]	; (1a500 <HciDrvHandler+0x260>)
   1a3ee:	781b      	ldrb	r3, [r3, #0]
   1a3f0:	2101      	movs	r1, #1
   1a3f2:	4618      	mov	r0, r3
   1a3f4:	f001 f93e 	bl	1b674 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   1a3f8:	e065      	b.n	1a4c6 <HciDrvHandler+0x226>
                }

                g_ui32NumBytes   = 0;
   1a3fa:	4b3e      	ldr	r3, [pc, #248]	; (1a4f4 <HciDrvHandler+0x254>)
   1a3fc:	2200      	movs	r2, #0
   1a3fe:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   1a400:	4b3d      	ldr	r3, [pc, #244]	; (1a4f8 <HciDrvHandler+0x258>)
   1a402:	2200      	movs	r2, #0
   1a404:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   1a406:	69fb      	ldr	r3, [r7, #28]
   1a408:	3301      	adds	r3, #1
   1a40a:	61fb      	str	r3, [r7, #28]
   1a40c:	e00f      	b.n	1a42e <HciDrvHandler+0x18e>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   1a40e:	693b      	ldr	r3, [r7, #16]
   1a410:	2b00      	cmp	r3, #0
   1a412:	d00c      	beq.n	1a42e <HciDrvHandler+0x18e>
   1a414:	6938      	ldr	r0, [r7, #16]
   1a416:	f7ff fd15 	bl	19e44 <error_check>
   1a41a:	f7ff fe29 	bl	1a070 <HciDrvRadioShutdown>
   1a41e:	2000      	movs	r0, #0
   1a420:	f7ff fd2c 	bl	19e7c <HciDrvRadioBoot>
   1a424:	f000 f87e 	bl	1a524 <HciDrvEmptyWriteQueue>
   1a428:	f7f5 fcba 	bl	fda0 <DmDevReset>
   1a42c:	e05d      	b.n	1a4ea <HciDrvHandler+0x24a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   1a42e:	69fb      	ldr	r3, [r7, #28]
   1a430:	2b03      	cmp	r3, #3
   1a432:	d93e      	bls.n	1a4b2 <HciDrvHandler+0x212>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1a434:	4b32      	ldr	r3, [pc, #200]	; (1a500 <HciDrvHandler+0x260>)
   1a436:	781b      	ldrb	r3, [r3, #0]
   1a438:	2101      	movs	r1, #1
   1a43a:	4618      	mov	r0, r3
   1a43c:	f001 f91a 	bl	1b674 <WsfSetEvent>

                break;
   1a440:	e041      	b.n	1a4c6 <HciDrvHandler+0x226>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   1a442:	4b36      	ldr	r3, [pc, #216]	; (1a51c <HciDrvHandler+0x27c>)
   1a444:	689b      	ldr	r3, [r3, #8]
   1a446:	2b00      	cmp	r3, #0
   1a448:	d03c      	beq.n	1a4c4 <HciDrvHandler+0x224>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   1a44a:	4b34      	ldr	r3, [pc, #208]	; (1a51c <HciDrvHandler+0x27c>)
   1a44c:	695a      	ldr	r2, [r3, #20]
   1a44e:	4b33      	ldr	r3, [pc, #204]	; (1a51c <HciDrvHandler+0x27c>)
   1a450:	685b      	ldr	r3, [r3, #4]
   1a452:	4413      	add	r3, r2
   1a454:	617b      	str	r3, [r7, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   1a456:	4b2d      	ldr	r3, [pc, #180]	; (1a50c <HciDrvHandler+0x26c>)
   1a458:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   1a45a:	697b      	ldr	r3, [r7, #20]
   1a45c:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   1a45e:	697b      	ldr	r3, [r7, #20]
   1a460:	681b      	ldr	r3, [r3, #0]
   1a462:	2100      	movs	r1, #0
   1a464:	f007 ffb0 	bl	223c8 <am_hal_ble_blocking_hci_write>
   1a468:	6138      	str	r0, [r7, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   1a46a:	693b      	ldr	r3, [r7, #16]
   1a46c:	2b00      	cmp	r3, #0
   1a46e:	d111      	bne.n	1a494 <HciDrvHandler+0x1f4>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   1a470:	481f      	ldr	r0, [pc, #124]	; (1a4f0 <HciDrvHandler+0x250>)
   1a472:	f000 fc3b 	bl	1acec <WsfTimerStop>
   1a476:	f242 7110 	movw	r1, #10000	; 0x2710
   1a47a:	481d      	ldr	r0, [pc, #116]	; (1a4f0 <HciDrvHandler+0x250>)
   1a47c:	f000 fc22 	bl	1acc4 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   1a480:	2201      	movs	r2, #1
   1a482:	2100      	movs	r1, #0
   1a484:	4825      	ldr	r0, [pc, #148]	; (1a51c <HciDrvHandler+0x27c>)
   1a486:	f009 fd1d 	bl	23ec4 <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   1a48a:	2300      	movs	r3, #0
   1a48c:	627b      	str	r3, [r7, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   1a48e:	2300      	movs	r3, #0
   1a490:	623b      	str	r3, [r7, #32]
   1a492:	e00e      	b.n	1a4b2 <HciDrvHandler+0x212>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   1a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a496:	3301      	adds	r3, #1
   1a498:	627b      	str	r3, [r7, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   1a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a49c:	f242 7210 	movw	r2, #10000	; 0x2710
   1a4a0:	4293      	cmp	r3, r2
   1a4a2:	d906      	bls.n	1a4b2 <HciDrvHandler+0x212>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1a4a4:	4b16      	ldr	r3, [pc, #88]	; (1a500 <HciDrvHandler+0x260>)
   1a4a6:	781b      	ldrb	r3, [r3, #0]
   1a4a8:	2101      	movs	r1, #1
   1a4aa:	4618      	mov	r0, r3
   1a4ac:	f001 f8e2 	bl	1b674 <WsfSetEvent>
                        break;
   1a4b0:	e009      	b.n	1a4c6 <HciDrvHandler+0x226>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   1a4b2:	6a3b      	ldr	r3, [r7, #32]
   1a4b4:	1c5a      	adds	r2, r3, #1
   1a4b6:	623a      	str	r2, [r7, #32]
   1a4b8:	f242 720f 	movw	r2, #9999	; 0x270f
   1a4bc:	4293      	cmp	r3, r2
   1a4be:	f67f af39 	bls.w	1a334 <HciDrvHandler+0x94>
   1a4c2:	e000      	b.n	1a4c6 <HciDrvHandler+0x226>
                break;
   1a4c4:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   1a4c6:	6a3b      	ldr	r3, [r7, #32]
   1a4c8:	f242 7210 	movw	r2, #10000	; 0x2710
   1a4cc:	4293      	cmp	r3, r2
   1a4ce:	d10c      	bne.n	1a4ea <HciDrvHandler+0x24a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   1a4d0:	4813      	ldr	r0, [pc, #76]	; (1a520 <HciDrvHandler+0x280>)
   1a4d2:	f7ff fcb7 	bl	19e44 <error_check>
   1a4d6:	f7ff fdcb 	bl	1a070 <HciDrvRadioShutdown>
   1a4da:	2000      	movs	r0, #0
   1a4dc:	f7ff fcce 	bl	19e7c <HciDrvRadioBoot>
   1a4e0:	f000 f820 	bl	1a524 <HciDrvEmptyWriteQueue>
   1a4e4:	f7f5 fc5c 	bl	fda0 <DmDevReset>
   1a4e8:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   1a4ea:	3728      	adds	r7, #40	; 0x28
   1a4ec:	46bd      	mov	sp, r7
   1a4ee:	bd80      	pop	{r7, pc}
   1a4f0:	100094e8 	.word	0x100094e8
   1a4f4:	10004468 	.word	0x10004468
   1a4f8:	1000446c 	.word	0x1000446c
   1a4fc:	10002c0c 	.word	0x10002c0c
   1a500:	10004465 	.word	0x10004465
   1a504:	5000c000 	.word	0x5000c000
   1a508:	10004470 	.word	0x10004470
   1a50c:	10009e18 	.word	0x10009e18
   1a510:	100094f8 	.word	0x100094f8
   1a514:	09000002 	.word	0x09000002
   1a518:	00025820 	.word	0x00025820
   1a51c:	100094d0 	.word	0x100094d0
   1a520:	09000006 	.word	0x09000006

0001a524 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   1a524:	b580      	push	{r7, lr}
   1a526:	af00      	add	r7, sp, #0
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   1a528:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1a52c:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a530:	4902      	ldr	r1, [pc, #8]	; (1a53c <HciDrvEmptyWriteQueue+0x18>)
   1a532:	4803      	ldr	r0, [pc, #12]	; (1a540 <HciDrvEmptyWriteQueue+0x1c>)
   1a534:	f009 fc82 	bl	23e3c <am_hal_queue_init>
}
   1a538:	bf00      	nop
   1a53a:	bd80      	pop	{r7, pc}
   1a53c:	100095f8 	.word	0x100095f8
   1a540:	100094d0 	.word	0x100094d0

0001a544 <PaspcPassDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void PaspcPassDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   1a544:	b580      	push	{r7, lr}
   1a546:	b084      	sub	sp, #16
   1a548:	af02      	add	r7, sp, #8
   1a54a:	4603      	mov	r3, r0
   1a54c:	6039      	str	r1, [r7, #0]
   1a54e:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attPassSvcUuid,
   1a550:	79f8      	ldrb	r0, [r7, #7]
   1a552:	683b      	ldr	r3, [r7, #0]
   1a554:	9301      	str	r3, [sp, #4]
   1a556:	4b05      	ldr	r3, [pc, #20]	; (1a56c <PaspcPassDiscover+0x28>)
   1a558:	9300      	str	r3, [sp, #0]
   1a55a:	2305      	movs	r3, #5
   1a55c:	4a04      	ldr	r2, [pc, #16]	; (1a570 <PaspcPassDiscover+0x2c>)
   1a55e:	2102      	movs	r1, #2
   1a560:	f003 fcf6 	bl	1df50 <AppDiscFindService>
                     PASPC_PASS_HDL_LIST_LEN, (attcDiscChar_t **) paspcPassDiscCharList, pHdlList);
}
   1a564:	bf00      	nop
   1a566:	3708      	adds	r7, #8
   1a568:	46bd      	mov	sp, r7
   1a56a:	bd80      	pop	{r7, pc}
   1a56c:	10002c10 	.word	0x10002c10
   1a570:	00025c8a 	.word	0x00025c8a

0001a574 <PaspcPassControl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void PaspcPassControl(dmConnId_t connId, uint16_t handle, uint8_t command)
{
   1a574:	b580      	push	{r7, lr}
   1a576:	b084      	sub	sp, #16
   1a578:	af00      	add	r7, sp, #0
   1a57a:	4603      	mov	r3, r0
   1a57c:	71fb      	strb	r3, [r7, #7]
   1a57e:	460b      	mov	r3, r1
   1a580:	80bb      	strh	r3, [r7, #4]
   1a582:	4613      	mov	r3, r2
   1a584:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[1];
  
  if (handle != ATT_HANDLE_NONE)
   1a586:	88bb      	ldrh	r3, [r7, #4]
   1a588:	2b00      	cmp	r3, #0
   1a58a:	d008      	beq.n	1a59e <PaspcPassControl+0x2a>
  {
    buf[0] = command;
   1a58c:	79bb      	ldrb	r3, [r7, #6]
   1a58e:	733b      	strb	r3, [r7, #12]
    AttcWriteCmd(connId, handle, sizeof(buf), buf);
   1a590:	f107 030c 	add.w	r3, r7, #12
   1a594:	88b9      	ldrh	r1, [r7, #4]
   1a596:	79f8      	ldrb	r0, [r7, #7]
   1a598:	2201      	movs	r2, #1
   1a59a:	f7f2 ff91 	bl	d4c0 <AttcWriteCmd>
  }
}
   1a59e:	bf00      	nop
   1a5a0:	3710      	adds	r7, #16
   1a5a2:	46bd      	mov	sp, r7
   1a5a4:	bd80      	pop	{r7, pc}
	...

0001a5a8 <PaspcPassValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t PaspcPassValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   1a5a8:	b580      	push	{r7, lr}
   1a5aa:	b084      	sub	sp, #16
   1a5ac:	af00      	add	r7, sp, #0
   1a5ae:	6078      	str	r0, [r7, #4]
   1a5b0:	6039      	str	r1, [r7, #0]
  uint8_t status = ATT_SUCCESS;
   1a5b2:	2300      	movs	r3, #0
   1a5b4:	73fb      	strb	r3, [r7, #15]
  
  /* alert status */
  if (pMsg->handle == pHdlList[PASPC_PASS_AS_HDL_IDX])
   1a5b6:	683b      	ldr	r3, [r7, #0]
   1a5b8:	895a      	ldrh	r2, [r3, #10]
   1a5ba:	687b      	ldr	r3, [r7, #4]
   1a5bc:	881b      	ldrh	r3, [r3, #0]
   1a5be:	429a      	cmp	r2, r3
   1a5c0:	d107      	bne.n	1a5d2 <PaspcPassValueUpdate+0x2a>
  {
    APP_TRACE_INFO1("Phone alert status: 0x%02x", *pMsg->pValue);
   1a5c2:	683b      	ldr	r3, [r7, #0]
   1a5c4:	685b      	ldr	r3, [r3, #4]
   1a5c6:	781b      	ldrb	r3, [r3, #0]
   1a5c8:	4619      	mov	r1, r3
   1a5ca:	480d      	ldr	r0, [pc, #52]	; (1a600 <PaspcPassValueUpdate+0x58>)
   1a5cc:	f001 f970 	bl	1b8b0 <WsfTrace>
   1a5d0:	e010      	b.n	1a5f4 <PaspcPassValueUpdate+0x4c>
  }
  /* ringer setting */
  else if (pMsg->handle == pHdlList[PASPC_PASS_RS_HDL_IDX])
   1a5d2:	683b      	ldr	r3, [r7, #0]
   1a5d4:	895a      	ldrh	r2, [r3, #10]
   1a5d6:	687b      	ldr	r3, [r7, #4]
   1a5d8:	3304      	adds	r3, #4
   1a5da:	881b      	ldrh	r3, [r3, #0]
   1a5dc:	429a      	cmp	r2, r3
   1a5de:	d107      	bne.n	1a5f0 <PaspcPassValueUpdate+0x48>
  {
    APP_TRACE_INFO1("Ringer setting: 0x%02x", *pMsg->pValue);
   1a5e0:	683b      	ldr	r3, [r7, #0]
   1a5e2:	685b      	ldr	r3, [r3, #4]
   1a5e4:	781b      	ldrb	r3, [r3, #0]
   1a5e6:	4619      	mov	r1, r3
   1a5e8:	4806      	ldr	r0, [pc, #24]	; (1a604 <PaspcPassValueUpdate+0x5c>)
   1a5ea:	f001 f961 	bl	1b8b0 <WsfTrace>
   1a5ee:	e001      	b.n	1a5f4 <PaspcPassValueUpdate+0x4c>
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   1a5f0:	230a      	movs	r3, #10
   1a5f2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
   1a5f4:	7bfb      	ldrb	r3, [r7, #15]
   1a5f6:	4618      	mov	r0, r3
   1a5f8:	3710      	adds	r7, #16
   1a5fa:	46bd      	mov	sp, r7
   1a5fc:	bd80      	pop	{r7, pc}
   1a5fe:	bf00      	nop
   1a600:	00025850 	.word	0x00025850
   1a604:	0002586c 	.word	0x0002586c

0001a608 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   1a608:	b480      	push	{r7}
   1a60a:	b083      	sub	sp, #12
   1a60c:	af00      	add	r7, sp, #0
   1a60e:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
   1a610:	4a04      	ldr	r2, [pc, #16]	; (1a624 <HciEvtRegister+0x1c>)
   1a612:	687b      	ldr	r3, [r7, #4]
   1a614:	6093      	str	r3, [r2, #8]
}
   1a616:	bf00      	nop
   1a618:	370c      	adds	r7, #12
   1a61a:	46bd      	mov	sp, r7
   1a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a620:	4770      	bx	lr
   1a622:	bf00      	nop
   1a624:	10009e2c 	.word	0x10009e2c

0001a628 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   1a628:	b480      	push	{r7}
   1a62a:	b083      	sub	sp, #12
   1a62c:	af00      	add	r7, sp, #0
   1a62e:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
   1a630:	4a04      	ldr	r2, [pc, #16]	; (1a644 <HciSecRegister+0x1c>)
   1a632:	687b      	ldr	r3, [r7, #4]
   1a634:	60d3      	str	r3, [r2, #12]
}
   1a636:	bf00      	nop
   1a638:	370c      	adds	r7, #12
   1a63a:	46bd      	mov	sp, r7
   1a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a640:	4770      	bx	lr
   1a642:	bf00      	nop
   1a644:	10009e2c 	.word	0x10009e2c

0001a648 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   1a648:	b480      	push	{r7}
   1a64a:	b083      	sub	sp, #12
   1a64c:	af00      	add	r7, sp, #0
   1a64e:	6078      	str	r0, [r7, #4]
   1a650:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
   1a652:	4a06      	ldr	r2, [pc, #24]	; (1a66c <HciAclRegister+0x24>)
   1a654:	687b      	ldr	r3, [r7, #4]
   1a656:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   1a658:	4a04      	ldr	r2, [pc, #16]	; (1a66c <HciAclRegister+0x24>)
   1a65a:	683b      	ldr	r3, [r7, #0]
   1a65c:	6153      	str	r3, [r2, #20]
}
   1a65e:	bf00      	nop
   1a660:	370c      	adds	r7, #12
   1a662:	46bd      	mov	sp, r7
   1a664:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a668:	4770      	bx	lr
   1a66a:	bf00      	nop
   1a66c:	10009e2c 	.word	0x10009e2c

0001a670 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   1a670:	b580      	push	{r7, lr}
   1a672:	b082      	sub	sp, #8
   1a674:	af00      	add	r7, sp, #0
   1a676:	4603      	mov	r3, r0
   1a678:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   1a67a:	4a07      	ldr	r2, [pc, #28]	; (1a698 <HciHandlerInit+0x28>)
   1a67c:	79fb      	ldrb	r3, [r7, #7]
   1a67e:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   1a680:	4b05      	ldr	r3, [pc, #20]	; (1a698 <HciHandlerInit+0x28>)
   1a682:	2200      	movs	r2, #0
   1a684:	601a      	str	r2, [r3, #0]
   1a686:	4b04      	ldr	r3, [pc, #16]	; (1a698 <HciHandlerInit+0x28>)
   1a688:	2200      	movs	r2, #0
   1a68a:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
   1a68c:	f7fb f9e6 	bl	15a5c <HciCoreInit>
}
   1a690:	bf00      	nop
   1a692:	3708      	adds	r7, #8
   1a694:	46bd      	mov	sp, r7
   1a696:	bd80      	pop	{r7, pc}
   1a698:	10009e2c 	.word	0x10009e2c

0001a69c <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1a69c:	b580      	push	{r7, lr}
   1a69e:	b082      	sub	sp, #8
   1a6a0:	af00      	add	r7, sp, #0
   1a6a2:	4603      	mov	r3, r0
   1a6a4:	6039      	str	r1, [r7, #0]
   1a6a6:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
   1a6a8:	79fb      	ldrb	r3, [r7, #7]
   1a6aa:	6839      	ldr	r1, [r7, #0]
   1a6ac:	4618      	mov	r0, r3
   1a6ae:	f7fb fb63 	bl	15d78 <HciCoreHandler>
}
   1a6b2:	bf00      	nop
   1a6b4:	3708      	adds	r7, #8
   1a6b6:	46bd      	mov	sp, r7
   1a6b8:	bd80      	pop	{r7, pc}
	...

0001a6bc <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   1a6bc:	b480      	push	{r7}
   1a6be:	b089      	sub	sp, #36	; 0x24
   1a6c0:	af00      	add	r7, sp, #0
   1a6c2:	60b9      	str	r1, [r7, #8]
   1a6c4:	607b      	str	r3, [r7, #4]
   1a6c6:	4603      	mov	r3, r0
   1a6c8:	81fb      	strh	r3, [r7, #14]
   1a6ca:	4613      	mov	r3, r2
   1a6cc:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1a6ce:	4a4d      	ldr	r2, [pc, #308]	; (1a804 <WsfBufInit+0x148>)
   1a6d0:	68bb      	ldr	r3, [r7, #8]
   1a6d2:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   1a6d4:	4b4b      	ldr	r3, [pc, #300]	; (1a804 <WsfBufInit+0x148>)
   1a6d6:	681b      	ldr	r3, [r3, #0]
   1a6d8:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1a6da:	7b7a      	ldrb	r2, [r7, #13]
   1a6dc:	4613      	mov	r3, r2
   1a6de:	005b      	lsls	r3, r3, #1
   1a6e0:	4413      	add	r3, r2
   1a6e2:	009b      	lsls	r3, r3, #2
   1a6e4:	461a      	mov	r2, r3
   1a6e6:	69fb      	ldr	r3, [r7, #28]
   1a6e8:	4413      	add	r3, r2
   1a6ea:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
   1a6ec:	4a46      	ldr	r2, [pc, #280]	; (1a808 <WsfBufInit+0x14c>)
   1a6ee:	7b7b      	ldrb	r3, [r7, #13]
   1a6f0:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a6f2:	4b44      	ldr	r3, [pc, #272]	; (1a804 <WsfBufInit+0x148>)
   1a6f4:	681a      	ldr	r2, [r3, #0]
   1a6f6:	89fb      	ldrh	r3, [r7, #14]
   1a6f8:	08db      	lsrs	r3, r3, #3
   1a6fa:	b29b      	uxth	r3, r3
   1a6fc:	00db      	lsls	r3, r3, #3
   1a6fe:	441a      	add	r2, r3
   1a700:	69bb      	ldr	r3, [r7, #24]
   1a702:	429a      	cmp	r2, r3
   1a704:	d201      	bcs.n	1a70a <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1a706:	2300      	movs	r3, #0
   1a708:	e075      	b.n	1a7f6 <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1a70a:	7b7b      	ldrb	r3, [r7, #13]
   1a70c:	1e5a      	subs	r2, r3, #1
   1a70e:	737a      	strb	r2, [r7, #13]
   1a710:	2b00      	cmp	r3, #0
   1a712:	d066      	beq.n	1a7e2 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   1a714:	687b      	ldr	r3, [r7, #4]
   1a716:	881b      	ldrh	r3, [r3, #0]
   1a718:	2b07      	cmp	r3, #7
   1a71a:	d803      	bhi.n	1a724 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   1a71c:	69fb      	ldr	r3, [r7, #28]
   1a71e:	2208      	movs	r2, #8
   1a720:	801a      	strh	r2, [r3, #0]
   1a722:	e014      	b.n	1a74e <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   1a724:	687b      	ldr	r3, [r7, #4]
   1a726:	881b      	ldrh	r3, [r3, #0]
   1a728:	f003 0307 	and.w	r3, r3, #7
   1a72c:	b29b      	uxth	r3, r3
   1a72e:	2b00      	cmp	r3, #0
   1a730:	d009      	beq.n	1a746 <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   1a732:	687b      	ldr	r3, [r7, #4]
   1a734:	881b      	ldrh	r3, [r3, #0]
   1a736:	f023 0307 	bic.w	r3, r3, #7
   1a73a:	b29b      	uxth	r3, r3
   1a73c:	3308      	adds	r3, #8
   1a73e:	b29a      	uxth	r2, r3
   1a740:	69fb      	ldr	r3, [r7, #28]
   1a742:	801a      	strh	r2, [r3, #0]
   1a744:	e003      	b.n	1a74e <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   1a746:	687b      	ldr	r3, [r7, #4]
   1a748:	881a      	ldrh	r2, [r3, #0]
   1a74a:	69fb      	ldr	r3, [r7, #28]
   1a74c:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   1a74e:	687b      	ldr	r3, [r7, #4]
   1a750:	789a      	ldrb	r2, [r3, #2]
   1a752:	69fb      	ldr	r3, [r7, #28]
   1a754:	709a      	strb	r2, [r3, #2]
    pDesc++;
   1a756:	687b      	ldr	r3, [r7, #4]
   1a758:	3304      	adds	r3, #4
   1a75a:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
   1a75c:	69fb      	ldr	r3, [r7, #28]
   1a75e:	69ba      	ldr	r2, [r7, #24]
   1a760:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   1a762:	69fb      	ldr	r3, [r7, #28]
   1a764:	69ba      	ldr	r2, [r7, #24]
   1a766:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   1a768:	69fb      	ldr	r3, [r7, #28]
   1a76a:	881b      	ldrh	r3, [r3, #0]
   1a76c:	08db      	lsrs	r3, r3, #3
   1a76e:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
   1a770:	69fb      	ldr	r3, [r7, #28]
   1a772:	789b      	ldrb	r3, [r3, #2]
   1a774:	75fb      	strb	r3, [r7, #23]
   1a776:	e019      	b.n	1a7ac <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a778:	4b22      	ldr	r3, [pc, #136]	; (1a804 <WsfBufInit+0x148>)
   1a77a:	681a      	ldr	r2, [r3, #0]
   1a77c:	89fb      	ldrh	r3, [r7, #14]
   1a77e:	08db      	lsrs	r3, r3, #3
   1a780:	b29b      	uxth	r3, r3
   1a782:	00db      	lsls	r3, r3, #3
   1a784:	441a      	add	r2, r3
   1a786:	69bb      	ldr	r3, [r7, #24]
   1a788:	429a      	cmp	r2, r3
   1a78a:	d201      	bcs.n	1a790 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   1a78c:	2300      	movs	r3, #0
   1a78e:	e032      	b.n	1a7f6 <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   1a790:	8abb      	ldrh	r3, [r7, #20]
   1a792:	00db      	lsls	r3, r3, #3
   1a794:	69ba      	ldr	r2, [r7, #24]
   1a796:	441a      	add	r2, r3
   1a798:	69bb      	ldr	r3, [r7, #24]
   1a79a:	601a      	str	r2, [r3, #0]
      pStart += len;
   1a79c:	8abb      	ldrh	r3, [r7, #20]
   1a79e:	00db      	lsls	r3, r3, #3
   1a7a0:	69ba      	ldr	r2, [r7, #24]
   1a7a2:	4413      	add	r3, r2
   1a7a4:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
   1a7a6:	7dfb      	ldrb	r3, [r7, #23]
   1a7a8:	3b01      	subs	r3, #1
   1a7aa:	75fb      	strb	r3, [r7, #23]
   1a7ac:	7dfb      	ldrb	r3, [r7, #23]
   1a7ae:	2b01      	cmp	r3, #1
   1a7b0:	d8e2      	bhi.n	1a778 <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a7b2:	4b14      	ldr	r3, [pc, #80]	; (1a804 <WsfBufInit+0x148>)
   1a7b4:	681a      	ldr	r2, [r3, #0]
   1a7b6:	89fb      	ldrh	r3, [r7, #14]
   1a7b8:	08db      	lsrs	r3, r3, #3
   1a7ba:	b29b      	uxth	r3, r3
   1a7bc:	00db      	lsls	r3, r3, #3
   1a7be:	441a      	add	r2, r3
   1a7c0:	69bb      	ldr	r3, [r7, #24]
   1a7c2:	429a      	cmp	r2, r3
   1a7c4:	d201      	bcs.n	1a7ca <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1a7c6:	2300      	movs	r3, #0
   1a7c8:	e015      	b.n	1a7f6 <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   1a7ca:	69bb      	ldr	r3, [r7, #24]
   1a7cc:	2200      	movs	r2, #0
   1a7ce:	601a      	str	r2, [r3, #0]
    pStart += len;
   1a7d0:	8abb      	ldrh	r3, [r7, #20]
   1a7d2:	00db      	lsls	r3, r3, #3
   1a7d4:	69ba      	ldr	r2, [r7, #24]
   1a7d6:	4413      	add	r3, r2
   1a7d8:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
   1a7da:	69fb      	ldr	r3, [r7, #28]
   1a7dc:	330c      	adds	r3, #12
   1a7de:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a7e0:	e787      	b.n	1a6f2 <WsfBufInit+0x36>
      break;
   1a7e2:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   1a7e4:	69bb      	ldr	r3, [r7, #24]
   1a7e6:	4a07      	ldr	r2, [pc, #28]	; (1a804 <WsfBufInit+0x148>)
   1a7e8:	6812      	ldr	r2, [r2, #0]
   1a7ea:	1a9b      	subs	r3, r3, r2
   1a7ec:	b29a      	uxth	r2, r3
   1a7ee:	4b07      	ldr	r3, [pc, #28]	; (1a80c <WsfBufInit+0x150>)
   1a7f0:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   1a7f2:	4b06      	ldr	r3, [pc, #24]	; (1a80c <WsfBufInit+0x150>)
   1a7f4:	881b      	ldrh	r3, [r3, #0]
}
   1a7f6:	4618      	mov	r0, r3
   1a7f8:	3724      	adds	r7, #36	; 0x24
   1a7fa:	46bd      	mov	sp, r7
   1a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a800:	4770      	bx	lr
   1a802:	bf00      	nop
   1a804:	1000447c 	.word	0x1000447c
   1a808:	10009e4a 	.word	0x10009e4a
   1a80c:	10009e48 	.word	0x10009e48

0001a810 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   1a810:	b580      	push	{r7, lr}
   1a812:	b086      	sub	sp, #24
   1a814:	af00      	add	r7, sp, #0
   1a816:	4603      	mov	r3, r0
   1a818:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   1a81a:	4b1a      	ldr	r3, [pc, #104]	; (1a884 <WsfBufAlloc+0x74>)
   1a81c:	681b      	ldr	r3, [r3, #0]
   1a81e:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1a820:	4b19      	ldr	r3, [pc, #100]	; (1a888 <WsfBufAlloc+0x78>)
   1a822:	781b      	ldrb	r3, [r3, #0]
   1a824:	74fb      	strb	r3, [r7, #19]
   1a826:	e020      	b.n	1a86a <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   1a828:	697b      	ldr	r3, [r7, #20]
   1a82a:	881b      	ldrh	r3, [r3, #0]
   1a82c:	88fa      	ldrh	r2, [r7, #6]
   1a82e:	429a      	cmp	r2, r3
   1a830:	d815      	bhi.n	1a85e <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1a832:	f000 fe9f 	bl	1b574 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   1a836:	697b      	ldr	r3, [r7, #20]
   1a838:	689b      	ldr	r3, [r3, #8]
   1a83a:	2b00      	cmp	r3, #0
   1a83c:	d00d      	beq.n	1a85a <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   1a83e:	697b      	ldr	r3, [r7, #20]
   1a840:	689b      	ldr	r3, [r3, #8]
   1a842:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   1a844:	68fb      	ldr	r3, [r7, #12]
   1a846:	681a      	ldr	r2, [r3, #0]
   1a848:	697b      	ldr	r3, [r7, #20]
   1a84a:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   1a84c:	68fb      	ldr	r3, [r7, #12]
   1a84e:	2200      	movs	r2, #0
   1a850:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   1a852:	f000 fea3 	bl	1b59c <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   1a856:	68fb      	ldr	r3, [r7, #12]
   1a858:	e010      	b.n	1a87c <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1a85a:	f000 fe9f 	bl	1b59c <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1a85e:	7cfb      	ldrb	r3, [r7, #19]
   1a860:	3b01      	subs	r3, #1
   1a862:	74fb      	strb	r3, [r7, #19]
   1a864:	697b      	ldr	r3, [r7, #20]
   1a866:	330c      	adds	r3, #12
   1a868:	617b      	str	r3, [r7, #20]
   1a86a:	7cfb      	ldrb	r3, [r7, #19]
   1a86c:	2b00      	cmp	r3, #0
   1a86e:	d1db      	bne.n	1a828 <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   1a870:	88fb      	ldrh	r3, [r7, #6]
   1a872:	4619      	mov	r1, r3
   1a874:	4805      	ldr	r0, [pc, #20]	; (1a88c <WsfBufAlloc+0x7c>)
   1a876:	f001 f81b 	bl	1b8b0 <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1a87a:	2300      	movs	r3, #0
}
   1a87c:	4618      	mov	r0, r3
   1a87e:	3718      	adds	r7, #24
   1a880:	46bd      	mov	sp, r7
   1a882:	bd80      	pop	{r7, pc}
   1a884:	1000447c 	.word	0x1000447c
   1a888:	10009e4a 	.word	0x10009e4a
   1a88c:	00025884 	.word	0x00025884

0001a890 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   1a890:	b580      	push	{r7, lr}
   1a892:	b084      	sub	sp, #16
   1a894:	af00      	add	r7, sp, #0
   1a896:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   1a898:	687b      	ldr	r3, [r7, #4]
   1a89a:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   1a89c:	4b16      	ldr	r3, [pc, #88]	; (1a8f8 <WsfBufFree+0x68>)
   1a89e:	681a      	ldr	r2, [r3, #0]
   1a8a0:	4b16      	ldr	r3, [pc, #88]	; (1a8fc <WsfBufFree+0x6c>)
   1a8a2:	781b      	ldrb	r3, [r3, #0]
   1a8a4:	4619      	mov	r1, r3
   1a8a6:	460b      	mov	r3, r1
   1a8a8:	005b      	lsls	r3, r3, #1
   1a8aa:	440b      	add	r3, r1
   1a8ac:	009b      	lsls	r3, r3, #2
   1a8ae:	3b0c      	subs	r3, #12
   1a8b0:	4413      	add	r3, r2
   1a8b2:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1a8b4:	e016      	b.n	1a8e4 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   1a8b6:	68fb      	ldr	r3, [r7, #12]
   1a8b8:	685a      	ldr	r2, [r3, #4]
   1a8ba:	68bb      	ldr	r3, [r7, #8]
   1a8bc:	429a      	cmp	r2, r3
   1a8be:	d80e      	bhi.n	1a8de <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1a8c0:	f000 fe58 	bl	1b574 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   1a8c4:	68bb      	ldr	r3, [r7, #8]
   1a8c6:	4a0e      	ldr	r2, [pc, #56]	; (1a900 <WsfBufFree+0x70>)
   1a8c8:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   1a8ca:	68fb      	ldr	r3, [r7, #12]
   1a8cc:	689a      	ldr	r2, [r3, #8]
   1a8ce:	68bb      	ldr	r3, [r7, #8]
   1a8d0:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   1a8d2:	68fb      	ldr	r3, [r7, #12]
   1a8d4:	68ba      	ldr	r2, [r7, #8]
   1a8d6:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1a8d8:	f000 fe60 	bl	1b59c <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   1a8dc:	e008      	b.n	1a8f0 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
   1a8de:	68fb      	ldr	r3, [r7, #12]
   1a8e0:	3b0c      	subs	r3, #12
   1a8e2:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1a8e4:	4b04      	ldr	r3, [pc, #16]	; (1a8f8 <WsfBufFree+0x68>)
   1a8e6:	681b      	ldr	r3, [r3, #0]
   1a8e8:	68fa      	ldr	r2, [r7, #12]
   1a8ea:	429a      	cmp	r2, r3
   1a8ec:	d2e3      	bcs.n	1a8b6 <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   1a8ee:	bf00      	nop
}
   1a8f0:	3710      	adds	r7, #16
   1a8f2:	46bd      	mov	sp, r7
   1a8f4:	bd80      	pop	{r7, pc}
   1a8f6:	bf00      	nop
   1a8f8:	1000447c 	.word	0x1000447c
   1a8fc:	10009e4a 	.word	0x10009e4a
   1a900:	faabd00d 	.word	0xfaabd00d

0001a904 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   1a904:	b580      	push	{r7, lr}
   1a906:	b082      	sub	sp, #8
   1a908:	af00      	add	r7, sp, #0
   1a90a:	4603      	mov	r3, r0
   1a90c:	460a      	mov	r2, r1
   1a90e:	80fb      	strh	r3, [r7, #6]
   1a910:	4613      	mov	r3, r2
   1a912:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
   1a914:	797b      	ldrb	r3, [r7, #5]
   1a916:	b29a      	uxth	r2, r3
   1a918:	88fb      	ldrh	r3, [r7, #6]
   1a91a:	4413      	add	r3, r2
   1a91c:	b29b      	uxth	r3, r3
   1a91e:	4618      	mov	r0, r3
   1a920:	f000 f805 	bl	1a92e <WsfMsgAlloc>
   1a924:	4603      	mov	r3, r0
}
   1a926:	4618      	mov	r0, r3
   1a928:	3708      	adds	r7, #8
   1a92a:	46bd      	mov	sp, r7
   1a92c:	bd80      	pop	{r7, pc}

0001a92e <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   1a92e:	b580      	push	{r7, lr}
   1a930:	b084      	sub	sp, #16
   1a932:	af00      	add	r7, sp, #0
   1a934:	4603      	mov	r3, r0
   1a936:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1a938:	88fb      	ldrh	r3, [r7, #6]
   1a93a:	3308      	adds	r3, #8
   1a93c:	b29b      	uxth	r3, r3
   1a93e:	4618      	mov	r0, r3
   1a940:	f7ff ff66 	bl	1a810 <WsfBufAlloc>
   1a944:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
   1a946:	68fb      	ldr	r3, [r7, #12]
   1a948:	2b00      	cmp	r3, #0
   1a94a:	d002      	beq.n	1a952 <WsfMsgAlloc+0x24>
  {
    pMsg++;
   1a94c:	68fb      	ldr	r3, [r7, #12]
   1a94e:	3308      	adds	r3, #8
   1a950:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   1a952:	68fb      	ldr	r3, [r7, #12]
}
   1a954:	4618      	mov	r0, r3
   1a956:	3710      	adds	r7, #16
   1a958:	46bd      	mov	sp, r7
   1a95a:	bd80      	pop	{r7, pc}

0001a95c <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   1a95c:	b580      	push	{r7, lr}
   1a95e:	b082      	sub	sp, #8
   1a960:	af00      	add	r7, sp, #0
   1a962:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   1a964:	687b      	ldr	r3, [r7, #4]
   1a966:	3b08      	subs	r3, #8
   1a968:	4618      	mov	r0, r3
   1a96a:	f7ff ff91 	bl	1a890 <WsfBufFree>
}
   1a96e:	bf00      	nop
   1a970:	3708      	adds	r7, #8
   1a972:	46bd      	mov	sp, r7
   1a974:	bd80      	pop	{r7, pc}

0001a976 <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1a976:	b580      	push	{r7, lr}
   1a978:	b082      	sub	sp, #8
   1a97a:	af00      	add	r7, sp, #0
   1a97c:	4603      	mov	r3, r0
   1a97e:	6039      	str	r1, [r7, #0]
   1a980:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   1a982:	79fb      	ldrb	r3, [r7, #7]
   1a984:	4618      	mov	r0, r3
   1a986:	f000 fec3 	bl	1b710 <WsfTaskMsgQueue>
   1a98a:	79fb      	ldrb	r3, [r7, #7]
   1a98c:	683a      	ldr	r2, [r7, #0]
   1a98e:	4619      	mov	r1, r3
   1a990:	f000 f809 	bl	1a9a6 <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   1a994:	79fb      	ldrb	r3, [r7, #7]
   1a996:	2101      	movs	r1, #1
   1a998:	4618      	mov	r0, r3
   1a99a:	f000 fe9b 	bl	1b6d4 <WsfTaskSetReady>
}
   1a99e:	bf00      	nop
   1a9a0:	3708      	adds	r7, #8
   1a9a2:	46bd      	mov	sp, r7
   1a9a4:	bd80      	pop	{r7, pc}

0001a9a6 <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   1a9a6:	b580      	push	{r7, lr}
   1a9a8:	b086      	sub	sp, #24
   1a9aa:	af00      	add	r7, sp, #0
   1a9ac:	60f8      	str	r0, [r7, #12]
   1a9ae:	460b      	mov	r3, r1
   1a9b0:	607a      	str	r2, [r7, #4]
   1a9b2:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   1a9b4:	687b      	ldr	r3, [r7, #4]
   1a9b6:	3b08      	subs	r3, #8
   1a9b8:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   1a9ba:	697b      	ldr	r3, [r7, #20]
   1a9bc:	7afa      	ldrb	r2, [r7, #11]
   1a9be:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   1a9c0:	6979      	ldr	r1, [r7, #20]
   1a9c2:	68f8      	ldr	r0, [r7, #12]
   1a9c4:	f000 f81c 	bl	1aa00 <WsfQueueEnq>
}
   1a9c8:	bf00      	nop
   1a9ca:	3718      	adds	r7, #24
   1a9cc:	46bd      	mov	sp, r7
   1a9ce:	bd80      	pop	{r7, pc}

0001a9d0 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   1a9d0:	b580      	push	{r7, lr}
   1a9d2:	b084      	sub	sp, #16
   1a9d4:	af00      	add	r7, sp, #0
   1a9d6:	6078      	str	r0, [r7, #4]
   1a9d8:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   1a9da:	6878      	ldr	r0, [r7, #4]
   1a9dc:	f000 f832 	bl	1aa44 <WsfQueueDeq>
   1a9e0:	60f8      	str	r0, [r7, #12]
   1a9e2:	68fb      	ldr	r3, [r7, #12]
   1a9e4:	2b00      	cmp	r3, #0
   1a9e6:	d006      	beq.n	1a9f6 <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
   1a9e8:	68fb      	ldr	r3, [r7, #12]
   1a9ea:	791a      	ldrb	r2, [r3, #4]
   1a9ec:	683b      	ldr	r3, [r7, #0]
   1a9ee:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   1a9f0:	68fb      	ldr	r3, [r7, #12]
   1a9f2:	3308      	adds	r3, #8
   1a9f4:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   1a9f6:	68fb      	ldr	r3, [r7, #12]
}
   1a9f8:	4618      	mov	r0, r3
   1a9fa:	3710      	adds	r7, #16
   1a9fc:	46bd      	mov	sp, r7
   1a9fe:	bd80      	pop	{r7, pc}

0001aa00 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   1aa00:	b580      	push	{r7, lr}
   1aa02:	b082      	sub	sp, #8
   1aa04:	af00      	add	r7, sp, #0
   1aa06:	6078      	str	r0, [r7, #4]
   1aa08:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   1aa0a:	683b      	ldr	r3, [r7, #0]
   1aa0c:	2200      	movs	r2, #0
   1aa0e:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1aa10:	f000 fdb0 	bl	1b574 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   1aa14:	687b      	ldr	r3, [r7, #4]
   1aa16:	681b      	ldr	r3, [r3, #0]
   1aa18:	2b00      	cmp	r3, #0
   1aa1a:	d106      	bne.n	1aa2a <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
   1aa1c:	687b      	ldr	r3, [r7, #4]
   1aa1e:	683a      	ldr	r2, [r7, #0]
   1aa20:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1aa22:	687b      	ldr	r3, [r7, #4]
   1aa24:	683a      	ldr	r2, [r7, #0]
   1aa26:	605a      	str	r2, [r3, #4]
   1aa28:	e006      	b.n	1aa38 <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1aa2a:	687b      	ldr	r3, [r7, #4]
   1aa2c:	685b      	ldr	r3, [r3, #4]
   1aa2e:	683a      	ldr	r2, [r7, #0]
   1aa30:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1aa32:	687b      	ldr	r3, [r7, #4]
   1aa34:	683a      	ldr	r2, [r7, #0]
   1aa36:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1aa38:	f000 fdb0 	bl	1b59c <WsfCsExit>
}
   1aa3c:	bf00      	nop
   1aa3e:	3708      	adds	r7, #8
   1aa40:	46bd      	mov	sp, r7
   1aa42:	bd80      	pop	{r7, pc}

0001aa44 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   1aa44:	b580      	push	{r7, lr}
   1aa46:	b084      	sub	sp, #16
   1aa48:	af00      	add	r7, sp, #0
   1aa4a:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1aa4c:	f000 fd92 	bl	1b574 <WsfCsEnter>

  pElem = pQueue->pHead;
   1aa50:	687b      	ldr	r3, [r7, #4]
   1aa52:	681b      	ldr	r3, [r3, #0]
   1aa54:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   1aa56:	68fb      	ldr	r3, [r7, #12]
   1aa58:	2b00      	cmp	r3, #0
   1aa5a:	d00a      	beq.n	1aa72 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1aa5c:	68fb      	ldr	r3, [r7, #12]
   1aa5e:	681a      	ldr	r2, [r3, #0]
   1aa60:	687b      	ldr	r3, [r7, #4]
   1aa62:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   1aa64:	687b      	ldr	r3, [r7, #4]
   1aa66:	681b      	ldr	r3, [r3, #0]
   1aa68:	2b00      	cmp	r3, #0
   1aa6a:	d102      	bne.n	1aa72 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
   1aa6c:	687b      	ldr	r3, [r7, #4]
   1aa6e:	2200      	movs	r2, #0
   1aa70:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1aa72:	f000 fd93 	bl	1b59c <WsfCsExit>

  return pElem;
   1aa76:	68fb      	ldr	r3, [r7, #12]
}
   1aa78:	4618      	mov	r0, r3
   1aa7a:	3710      	adds	r7, #16
   1aa7c:	46bd      	mov	sp, r7
   1aa7e:	bd80      	pop	{r7, pc}

0001aa80 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   1aa80:	b580      	push	{r7, lr}
   1aa82:	b082      	sub	sp, #8
   1aa84:	af00      	add	r7, sp, #0
   1aa86:	6078      	str	r0, [r7, #4]
   1aa88:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1aa8a:	f000 fd73 	bl	1b574 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   1aa8e:	687b      	ldr	r3, [r7, #4]
   1aa90:	681a      	ldr	r2, [r3, #0]
   1aa92:	683b      	ldr	r3, [r7, #0]
   1aa94:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   1aa96:	687b      	ldr	r3, [r7, #4]
   1aa98:	681b      	ldr	r3, [r3, #0]
   1aa9a:	2b00      	cmp	r3, #0
   1aa9c:	d102      	bne.n	1aaa4 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
   1aa9e:	687b      	ldr	r3, [r7, #4]
   1aaa0:	683a      	ldr	r2, [r7, #0]
   1aaa2:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   1aaa4:	687b      	ldr	r3, [r7, #4]
   1aaa6:	683a      	ldr	r2, [r7, #0]
   1aaa8:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1aaaa:	f000 fd77 	bl	1b59c <WsfCsExit>
}
   1aaae:	bf00      	nop
   1aab0:	3708      	adds	r7, #8
   1aab2:	46bd      	mov	sp, r7
   1aab4:	bd80      	pop	{r7, pc}

0001aab6 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1aab6:	b580      	push	{r7, lr}
   1aab8:	b084      	sub	sp, #16
   1aaba:	af00      	add	r7, sp, #0
   1aabc:	60f8      	str	r0, [r7, #12]
   1aabe:	60b9      	str	r1, [r7, #8]
   1aac0:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1aac2:	f000 fd57 	bl	1b574 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   1aac6:	68fb      	ldr	r3, [r7, #12]
   1aac8:	681b      	ldr	r3, [r3, #0]
   1aaca:	2b00      	cmp	r3, #0
   1aacc:	d004      	beq.n	1aad8 <WsfQueueInsert+0x22>
   1aace:	68fb      	ldr	r3, [r7, #12]
   1aad0:	685a      	ldr	r2, [r3, #4]
   1aad2:	687b      	ldr	r3, [r7, #4]
   1aad4:	429a      	cmp	r2, r3
   1aad6:	d104      	bne.n	1aae2 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   1aad8:	68b9      	ldr	r1, [r7, #8]
   1aada:	68f8      	ldr	r0, [r7, #12]
   1aadc:	f7ff ff90 	bl	1aa00 <WsfQueueEnq>
   1aae0:	e00e      	b.n	1ab00 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   1aae2:	687b      	ldr	r3, [r7, #4]
   1aae4:	2b00      	cmp	r3, #0
   1aae6:	d104      	bne.n	1aaf2 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   1aae8:	68b9      	ldr	r1, [r7, #8]
   1aaea:	68f8      	ldr	r0, [r7, #12]
   1aaec:	f7ff ffc8 	bl	1aa80 <WsfQueuePush>
   1aaf0:	e006      	b.n	1ab00 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   1aaf2:	687b      	ldr	r3, [r7, #4]
   1aaf4:	681a      	ldr	r2, [r3, #0]
   1aaf6:	68bb      	ldr	r3, [r7, #8]
   1aaf8:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1aafa:	687b      	ldr	r3, [r7, #4]
   1aafc:	68ba      	ldr	r2, [r7, #8]
   1aafe:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ab00:	f000 fd4c 	bl	1b59c <WsfCsExit>
}
   1ab04:	bf00      	nop
   1ab06:	3710      	adds	r7, #16
   1ab08:	46bd      	mov	sp, r7
   1ab0a:	bd80      	pop	{r7, pc}

0001ab0c <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1ab0c:	b580      	push	{r7, lr}
   1ab0e:	b084      	sub	sp, #16
   1ab10:	af00      	add	r7, sp, #0
   1ab12:	60f8      	str	r0, [r7, #12]
   1ab14:	60b9      	str	r1, [r7, #8]
   1ab16:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ab18:	f000 fd2c 	bl	1b574 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   1ab1c:	68fb      	ldr	r3, [r7, #12]
   1ab1e:	681a      	ldr	r2, [r3, #0]
   1ab20:	68bb      	ldr	r3, [r7, #8]
   1ab22:	429a      	cmp	r2, r3
   1ab24:	d104      	bne.n	1ab30 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1ab26:	68bb      	ldr	r3, [r7, #8]
   1ab28:	681a      	ldr	r2, [r3, #0]
   1ab2a:	68fb      	ldr	r3, [r7, #12]
   1ab2c:	601a      	str	r2, [r3, #0]
   1ab2e:	e006      	b.n	1ab3e <WsfQueueRemove+0x32>
  }
  else if (pPrev)
   1ab30:	687b      	ldr	r3, [r7, #4]
   1ab32:	2b00      	cmp	r3, #0
   1ab34:	d003      	beq.n	1ab3e <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   1ab36:	68bb      	ldr	r3, [r7, #8]
   1ab38:	681a      	ldr	r2, [r3, #0]
   1ab3a:	687b      	ldr	r3, [r7, #4]
   1ab3c:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   1ab3e:	68fb      	ldr	r3, [r7, #12]
   1ab40:	685a      	ldr	r2, [r3, #4]
   1ab42:	68bb      	ldr	r3, [r7, #8]
   1ab44:	429a      	cmp	r2, r3
   1ab46:	d102      	bne.n	1ab4e <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   1ab48:	68fb      	ldr	r3, [r7, #12]
   1ab4a:	687a      	ldr	r2, [r7, #4]
   1ab4c:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ab4e:	f000 fd25 	bl	1b59c <WsfCsExit>
}
   1ab52:	bf00      	nop
   1ab54:	3710      	adds	r7, #16
   1ab56:	46bd      	mov	sp, r7
   1ab58:	bd80      	pop	{r7, pc}

0001ab5a <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   1ab5a:	b580      	push	{r7, lr}
   1ab5c:	b084      	sub	sp, #16
   1ab5e:	af00      	add	r7, sp, #0
   1ab60:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   1ab62:	2300      	movs	r3, #0
   1ab64:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ab66:	f000 fd05 	bl	1b574 <WsfCsEnter>

  pElem = pQueue->pHead;
   1ab6a:	687b      	ldr	r3, [r7, #4]
   1ab6c:	681b      	ldr	r3, [r3, #0]
   1ab6e:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
   1ab70:	e005      	b.n	1ab7e <WsfQueueCount+0x24>
  {
    count++;
   1ab72:	897b      	ldrh	r3, [r7, #10]
   1ab74:	3301      	adds	r3, #1
   1ab76:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
   1ab78:	68fb      	ldr	r3, [r7, #12]
   1ab7a:	681b      	ldr	r3, [r3, #0]
   1ab7c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1ab7e:	68fb      	ldr	r3, [r7, #12]
   1ab80:	2b00      	cmp	r3, #0
   1ab82:	d1f6      	bne.n	1ab72 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ab84:	f000 fd0a 	bl	1b59c <WsfCsExit>

  return count;
   1ab88:	897b      	ldrh	r3, [r7, #10]
}
   1ab8a:	4618      	mov	r0, r3
   1ab8c:	3710      	adds	r7, #16
   1ab8e:	46bd      	mov	sp, r7
   1ab90:	bd80      	pop	{r7, pc}

0001ab92 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   1ab92:	b580      	push	{r7, lr}
   1ab94:	b084      	sub	sp, #16
   1ab96:	af00      	add	r7, sp, #0
   1ab98:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ab9a:	f000 fceb 	bl	1b574 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   1ab9e:	687b      	ldr	r3, [r7, #4]
   1aba0:	681b      	ldr	r3, [r3, #0]
   1aba2:	2b00      	cmp	r3, #0
   1aba4:	bf0c      	ite	eq
   1aba6:	2301      	moveq	r3, #1
   1aba8:	2300      	movne	r3, #0
   1abaa:	b2db      	uxtb	r3, r3
   1abac:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1abae:	f000 fcf5 	bl	1b59c <WsfCsExit>

  return empty;
   1abb2:	7bfb      	ldrb	r3, [r7, #15]
}
   1abb4:	4618      	mov	r0, r3
   1abb6:	3710      	adds	r7, #16
   1abb8:	46bd      	mov	sp, r7
   1abba:	bd80      	pop	{r7, pc}

0001abbc <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   1abbc:	b580      	push	{r7, lr}
   1abbe:	b084      	sub	sp, #16
   1abc0:	af00      	add	r7, sp, #0
   1abc2:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1abc4:	2300      	movs	r3, #0
   1abc6:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1abc8:	4b10      	ldr	r3, [pc, #64]	; (1ac0c <wsfTimerRemove+0x50>)
   1abca:	681b      	ldr	r3, [r3, #0]
   1abcc:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
   1abce:	e008      	b.n	1abe2 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
   1abd0:	68fa      	ldr	r2, [r7, #12]
   1abd2:	687b      	ldr	r3, [r7, #4]
   1abd4:	429a      	cmp	r2, r3
   1abd6:	d008      	beq.n	1abea <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
   1abd8:	68fb      	ldr	r3, [r7, #12]
   1abda:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   1abdc:	68fb      	ldr	r3, [r7, #12]
   1abde:	681b      	ldr	r3, [r3, #0]
   1abe0:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1abe2:	68fb      	ldr	r3, [r7, #12]
   1abe4:	2b00      	cmp	r3, #0
   1abe6:	d1f3      	bne.n	1abd0 <wsfTimerRemove+0x14>
   1abe8:	e000      	b.n	1abec <wsfTimerRemove+0x30>
      break;
   1abea:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   1abec:	68fb      	ldr	r3, [r7, #12]
   1abee:	2b00      	cmp	r3, #0
   1abf0:	d007      	beq.n	1ac02 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1abf2:	68ba      	ldr	r2, [r7, #8]
   1abf4:	6879      	ldr	r1, [r7, #4]
   1abf6:	4805      	ldr	r0, [pc, #20]	; (1ac0c <wsfTimerRemove+0x50>)
   1abf8:	f7ff ff88 	bl	1ab0c <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   1abfc:	687b      	ldr	r3, [r7, #4]
   1abfe:	2200      	movs	r2, #0
   1ac00:	725a      	strb	r2, [r3, #9]
  }
}
   1ac02:	bf00      	nop
   1ac04:	3710      	adds	r7, #16
   1ac06:	46bd      	mov	sp, r7
   1ac08:	bd80      	pop	{r7, pc}
   1ac0a:	bf00      	nop
   1ac0c:	10009e4c 	.word	0x10009e4c

0001ac10 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   1ac10:	b580      	push	{r7, lr}
   1ac12:	b084      	sub	sp, #16
   1ac14:	af00      	add	r7, sp, #0
   1ac16:	6078      	str	r0, [r7, #4]
   1ac18:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1ac1a:	2300      	movs	r3, #0
   1ac1c:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
   1ac1e:	f000 fcd1 	bl	1b5c4 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   1ac22:	687b      	ldr	r3, [r7, #4]
   1ac24:	7a5b      	ldrb	r3, [r3, #9]
   1ac26:	2b00      	cmp	r3, #0
   1ac28:	d002      	beq.n	1ac30 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
   1ac2a:	6878      	ldr	r0, [r7, #4]
   1ac2c:	f7ff ffc6 	bl	1abbc <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   1ac30:	687b      	ldr	r3, [r7, #4]
   1ac32:	2201      	movs	r2, #1
   1ac34:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   1ac36:	687b      	ldr	r3, [r7, #4]
   1ac38:	683a      	ldr	r2, [r7, #0]
   1ac3a:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1ac3c:	4b0f      	ldr	r3, [pc, #60]	; (1ac7c <wsfTimerInsert+0x6c>)
   1ac3e:	681b      	ldr	r3, [r3, #0]
   1ac40:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   1ac42:	e00a      	b.n	1ac5a <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
   1ac44:	687b      	ldr	r3, [r7, #4]
   1ac46:	685a      	ldr	r2, [r3, #4]
   1ac48:	68fb      	ldr	r3, [r7, #12]
   1ac4a:	685b      	ldr	r3, [r3, #4]
   1ac4c:	429a      	cmp	r2, r3
   1ac4e:	d308      	bcc.n	1ac62 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
   1ac50:	68fb      	ldr	r3, [r7, #12]
   1ac52:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   1ac54:	68fb      	ldr	r3, [r7, #12]
   1ac56:	681b      	ldr	r3, [r3, #0]
   1ac58:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1ac5a:	68fb      	ldr	r3, [r7, #12]
   1ac5c:	2b00      	cmp	r3, #0
   1ac5e:	d1f1      	bne.n	1ac44 <wsfTimerInsert+0x34>
   1ac60:	e000      	b.n	1ac64 <wsfTimerInsert+0x54>
      break;
   1ac62:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1ac64:	68ba      	ldr	r2, [r7, #8]
   1ac66:	6879      	ldr	r1, [r7, #4]
   1ac68:	4804      	ldr	r0, [pc, #16]	; (1ac7c <wsfTimerInsert+0x6c>)
   1ac6a:	f7ff ff24 	bl	1aab6 <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   1ac6e:	f000 fcaf 	bl	1b5d0 <WsfTaskUnlock>
}
   1ac72:	bf00      	nop
   1ac74:	3710      	adds	r7, #16
   1ac76:	46bd      	mov	sp, r7
   1ac78:	bd80      	pop	{r7, pc}
   1ac7a:	bf00      	nop
   1ac7c:	10009e4c 	.word	0x10009e4c

0001ac80 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   1ac80:	b480      	push	{r7}
   1ac82:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   1ac84:	4b05      	ldr	r3, [pc, #20]	; (1ac9c <WsfTimerInit+0x1c>)
   1ac86:	2200      	movs	r2, #0
   1ac88:	601a      	str	r2, [r3, #0]
   1ac8a:	4b04      	ldr	r3, [pc, #16]	; (1ac9c <WsfTimerInit+0x1c>)
   1ac8c:	2200      	movs	r2, #0
   1ac8e:	605a      	str	r2, [r3, #4]
}
   1ac90:	bf00      	nop
   1ac92:	46bd      	mov	sp, r7
   1ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ac98:	4770      	bx	lr
   1ac9a:	bf00      	nop
   1ac9c:	10009e4c 	.word	0x10009e4c

0001aca0 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   1aca0:	b580      	push	{r7, lr}
   1aca2:	b082      	sub	sp, #8
   1aca4:	af00      	add	r7, sp, #0
   1aca6:	6078      	str	r0, [r7, #4]
   1aca8:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   1acaa:	683b      	ldr	r3, [r7, #0]
   1acac:	2264      	movs	r2, #100	; 0x64
   1acae:	fb02 f303 	mul.w	r3, r2, r3
   1acb2:	4619      	mov	r1, r3
   1acb4:	6878      	ldr	r0, [r7, #4]
   1acb6:	f7ff ffab 	bl	1ac10 <wsfTimerInsert>
}
   1acba:	bf00      	nop
   1acbc:	3708      	adds	r7, #8
   1acbe:	46bd      	mov	sp, r7
   1acc0:	bd80      	pop	{r7, pc}
	...

0001acc4 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   1acc4:	b580      	push	{r7, lr}
   1acc6:	b082      	sub	sp, #8
   1acc8:	af00      	add	r7, sp, #0
   1acca:	6078      	str	r0, [r7, #4]
   1accc:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   1acce:	683b      	ldr	r3, [r7, #0]
   1acd0:	4a05      	ldr	r2, [pc, #20]	; (1ace8 <WsfTimerStartMs+0x24>)
   1acd2:	fba2 2303 	umull	r2, r3, r2, r3
   1acd6:	08db      	lsrs	r3, r3, #3
   1acd8:	4619      	mov	r1, r3
   1acda:	6878      	ldr	r0, [r7, #4]
   1acdc:	f7ff ff98 	bl	1ac10 <wsfTimerInsert>
}
   1ace0:	bf00      	nop
   1ace2:	3708      	adds	r7, #8
   1ace4:	46bd      	mov	sp, r7
   1ace6:	bd80      	pop	{r7, pc}
   1ace8:	cccccccd 	.word	0xcccccccd

0001acec <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   1acec:	b580      	push	{r7, lr}
   1acee:	b082      	sub	sp, #8
   1acf0:	af00      	add	r7, sp, #0
   1acf2:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   1acf4:	f000 fc66 	bl	1b5c4 <WsfTaskLock>

  wsfTimerRemove(pTimer);
   1acf8:	6878      	ldr	r0, [r7, #4]
   1acfa:	f7ff ff5f 	bl	1abbc <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   1acfe:	f000 fc67 	bl	1b5d0 <WsfTaskUnlock>
}
   1ad02:	bf00      	nop
   1ad04:	3708      	adds	r7, #8
   1ad06:	46bd      	mov	sp, r7
   1ad08:	bd80      	pop	{r7, pc}
	...

0001ad0c <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   1ad0c:	b580      	push	{r7, lr}
   1ad0e:	b084      	sub	sp, #16
   1ad10:	af00      	add	r7, sp, #0
   1ad12:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   1ad14:	f000 fc56 	bl	1b5c4 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1ad18:	4b12      	ldr	r3, [pc, #72]	; (1ad64 <WsfTimerUpdate+0x58>)
   1ad1a:	681b      	ldr	r3, [r3, #0]
   1ad1c:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   1ad1e:	e017      	b.n	1ad50 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   1ad20:	68fb      	ldr	r3, [r7, #12]
   1ad22:	685a      	ldr	r2, [r3, #4]
   1ad24:	687b      	ldr	r3, [r7, #4]
   1ad26:	429a      	cmp	r2, r3
   1ad28:	d906      	bls.n	1ad38 <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
   1ad2a:	68fb      	ldr	r3, [r7, #12]
   1ad2c:	685a      	ldr	r2, [r3, #4]
   1ad2e:	687b      	ldr	r3, [r7, #4]
   1ad30:	1ad2      	subs	r2, r2, r3
   1ad32:	68fb      	ldr	r3, [r7, #12]
   1ad34:	605a      	str	r2, [r3, #4]
   1ad36:	e008      	b.n	1ad4a <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
   1ad38:	68fb      	ldr	r3, [r7, #12]
   1ad3a:	2200      	movs	r2, #0
   1ad3c:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   1ad3e:	68fb      	ldr	r3, [r7, #12]
   1ad40:	7a1b      	ldrb	r3, [r3, #8]
   1ad42:	2102      	movs	r1, #2
   1ad44:	4618      	mov	r0, r3
   1ad46:	f000 fcc5 	bl	1b6d4 <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   1ad4a:	68fb      	ldr	r3, [r7, #12]
   1ad4c:	681b      	ldr	r3, [r3, #0]
   1ad4e:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1ad50:	68fb      	ldr	r3, [r7, #12]
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	d1e4      	bne.n	1ad20 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1ad56:	f000 fc3b 	bl	1b5d0 <WsfTaskUnlock>
}
   1ad5a:	bf00      	nop
   1ad5c:	3710      	adds	r7, #16
   1ad5e:	46bd      	mov	sp, r7
   1ad60:	bd80      	pop	{r7, pc}
   1ad62:	bf00      	nop
   1ad64:	10009e4c 	.word	0x10009e4c

0001ad68 <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   1ad68:	b580      	push	{r7, lr}
   1ad6a:	b084      	sub	sp, #16
   1ad6c:	af00      	add	r7, sp, #0
   1ad6e:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   1ad70:	f000 fc28 	bl	1b5c4 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   1ad74:	4b0b      	ldr	r3, [pc, #44]	; (1ada4 <WsfTimerNextExpiration+0x3c>)
   1ad76:	681b      	ldr	r3, [r3, #0]
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	d105      	bne.n	1ad88 <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
   1ad7c:	687b      	ldr	r3, [r7, #4]
   1ad7e:	2200      	movs	r2, #0
   1ad80:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   1ad82:	2300      	movs	r3, #0
   1ad84:	60fb      	str	r3, [r7, #12]
   1ad86:	e006      	b.n	1ad96 <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
   1ad88:	687b      	ldr	r3, [r7, #4]
   1ad8a:	2201      	movs	r2, #1
   1ad8c:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   1ad8e:	4b05      	ldr	r3, [pc, #20]	; (1ada4 <WsfTimerNextExpiration+0x3c>)
   1ad90:	681b      	ldr	r3, [r3, #0]
   1ad92:	685b      	ldr	r3, [r3, #4]
   1ad94:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1ad96:	f000 fc1b 	bl	1b5d0 <WsfTaskUnlock>

  return ticks;
   1ad9a:	68fb      	ldr	r3, [r7, #12]
}
   1ad9c:	4618      	mov	r0, r3
   1ad9e:	3710      	adds	r7, #16
   1ada0:	46bd      	mov	sp, r7
   1ada2:	bd80      	pop	{r7, pc}
   1ada4:	10009e4c 	.word	0x10009e4c

0001ada8 <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   1ada8:	b580      	push	{r7, lr}
   1adaa:	b084      	sub	sp, #16
   1adac:	af00      	add	r7, sp, #0
   1adae:	4603      	mov	r3, r0
   1adb0:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1adb2:	2300      	movs	r3, #0
   1adb4:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
   1adb6:	f000 fc05 	bl	1b5c4 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   1adba:	4b0e      	ldr	r3, [pc, #56]	; (1adf4 <WsfTimerServiceExpired+0x4c>)
   1adbc:	681b      	ldr	r3, [r3, #0]
   1adbe:	60bb      	str	r3, [r7, #8]
   1adc0:	68bb      	ldr	r3, [r7, #8]
   1adc2:	2b00      	cmp	r3, #0
   1adc4:	d00f      	beq.n	1ade6 <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   1adc6:	68bb      	ldr	r3, [r7, #8]
   1adc8:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   1adca:	2b00      	cmp	r3, #0
   1adcc:	d10b      	bne.n	1ade6 <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   1adce:	68fa      	ldr	r2, [r7, #12]
   1add0:	68b9      	ldr	r1, [r7, #8]
   1add2:	4808      	ldr	r0, [pc, #32]	; (1adf4 <WsfTimerServiceExpired+0x4c>)
   1add4:	f7ff fe9a 	bl	1ab0c <WsfQueueRemove>

    pElem->isStarted = FALSE;
   1add8:	68bb      	ldr	r3, [r7, #8]
   1adda:	2200      	movs	r2, #0
   1addc:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   1adde:	f000 fbf7 	bl	1b5d0 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   1ade2:	68bb      	ldr	r3, [r7, #8]
   1ade4:	e002      	b.n	1adec <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1ade6:	f000 fbf3 	bl	1b5d0 <WsfTaskUnlock>

  return NULL;
   1adea:	2300      	movs	r3, #0
}
   1adec:	4618      	mov	r0, r3
   1adee:	3710      	adds	r7, #16
   1adf0:	46bd      	mov	sp, r7
   1adf2:	bd80      	pop	{r7, pc}
   1adf4:	10009e4c 	.word	0x10009e4c

0001adf8 <hrcpHrsParseHrm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hrcpHrsParseHrm(uint8_t *pValue, uint16_t len)
{
   1adf8:	b580      	push	{r7, lr}
   1adfa:	b086      	sub	sp, #24
   1adfc:	af00      	add	r7, sp, #0
   1adfe:	6078      	str	r0, [r7, #4]
   1ae00:	460b      	mov	r3, r1
   1ae02:	807b      	strh	r3, [r7, #2]
  uint8_t   flags;
  uint16_t  minLen = 1 + CH_HRM_LEN_VALUE_8BIT;
   1ae04:	2302      	movs	r3, #2
   1ae06:	82bb      	strh	r3, [r7, #20]
  uint16_t  heartRate;
  uint16_t  energyExp;
  uint16_t  rrInterval;
  
  if (len > 0)
   1ae08:	887b      	ldrh	r3, [r7, #2]
   1ae0a:	2b00      	cmp	r3, #0
   1ae0c:	d01c      	beq.n	1ae48 <hrcpHrsParseHrm+0x50>
  {
    /* get flags */
    BSTREAM_TO_UINT8(flags, pValue);
   1ae0e:	687b      	ldr	r3, [r7, #4]
   1ae10:	1c5a      	adds	r2, r3, #1
   1ae12:	607a      	str	r2, [r7, #4]
   1ae14:	781b      	ldrb	r3, [r3, #0]
   1ae16:	75fb      	strb	r3, [r7, #23]
    
    /* determine expected minimum length based on flags */
    if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   1ae18:	7dfb      	ldrb	r3, [r7, #23]
   1ae1a:	f003 0301 	and.w	r3, r3, #1
   1ae1e:	2b00      	cmp	r3, #0
   1ae20:	d002      	beq.n	1ae28 <hrcpHrsParseHrm+0x30>
    {
      minLen++;
   1ae22:	8abb      	ldrh	r3, [r7, #20]
   1ae24:	3301      	adds	r3, #1
   1ae26:	82bb      	strh	r3, [r7, #20]
    }
    if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   1ae28:	7dfb      	ldrb	r3, [r7, #23]
   1ae2a:	f003 0308 	and.w	r3, r3, #8
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d002      	beq.n	1ae38 <hrcpHrsParseHrm+0x40>
    {
      minLen += CH_HRM_LEN_ENERGY_EXP;
   1ae32:	8abb      	ldrh	r3, [r7, #20]
   1ae34:	3302      	adds	r3, #2
   1ae36:	82bb      	strh	r3, [r7, #20]
    }
    if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   1ae38:	7dfb      	ldrb	r3, [r7, #23]
   1ae3a:	f003 0310 	and.w	r3, r3, #16
   1ae3e:	2b00      	cmp	r3, #0
   1ae40:	d002      	beq.n	1ae48 <hrcpHrsParseHrm+0x50>
    {
      minLen += CH_HRM_LEN_RR_INTERVAL;
   1ae42:	8abb      	ldrh	r3, [r7, #20]
   1ae44:	3302      	adds	r3, #2
   1ae46:	82bb      	strh	r3, [r7, #20]
    }
  }
    
  /* verify length */
  if (len < minLen)
   1ae48:	887a      	ldrh	r2, [r7, #2]
   1ae4a:	8abb      	ldrh	r3, [r7, #20]
   1ae4c:	429a      	cmp	r2, r3
   1ae4e:	d206      	bcs.n	1ae5e <hrcpHrsParseHrm+0x66>
  {
    APP_TRACE_INFO2("Heart Rate meas len:%d minLen:%d", len, minLen);
   1ae50:	887b      	ldrh	r3, [r7, #2]
   1ae52:	8aba      	ldrh	r2, [r7, #20]
   1ae54:	4619      	mov	r1, r3
   1ae56:	4837      	ldr	r0, [pc, #220]	; (1af34 <hrcpHrsParseHrm+0x13c>)
   1ae58:	f000 fd2a 	bl	1b8b0 <WsfTrace>
    return;
   1ae5c:	e066      	b.n	1af2c <hrcpHrsParseHrm+0x134>
  }
  
  /* heart rate */
  if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   1ae5e:	7dfb      	ldrb	r3, [r7, #23]
   1ae60:	f003 0301 	and.w	r3, r3, #1
   1ae64:	2b00      	cmp	r3, #0
   1ae66:	d00e      	beq.n	1ae86 <hrcpHrsParseHrm+0x8e>
  {
    BSTREAM_TO_UINT16(heartRate, pValue);
   1ae68:	687b      	ldr	r3, [r7, #4]
   1ae6a:	781b      	ldrb	r3, [r3, #0]
   1ae6c:	b29a      	uxth	r2, r3
   1ae6e:	687b      	ldr	r3, [r7, #4]
   1ae70:	3301      	adds	r3, #1
   1ae72:	781b      	ldrb	r3, [r3, #0]
   1ae74:	b29b      	uxth	r3, r3
   1ae76:	021b      	lsls	r3, r3, #8
   1ae78:	b29b      	uxth	r3, r3
   1ae7a:	4413      	add	r3, r2
   1ae7c:	827b      	strh	r3, [r7, #18]
   1ae7e:	687b      	ldr	r3, [r7, #4]
   1ae80:	3302      	adds	r3, #2
   1ae82:	607b      	str	r3, [r7, #4]
   1ae84:	e004      	b.n	1ae90 <hrcpHrsParseHrm+0x98>
  }  
  else
  {
    BSTREAM_TO_UINT8(heartRate, pValue);
   1ae86:	687b      	ldr	r3, [r7, #4]
   1ae88:	1c5a      	adds	r2, r3, #1
   1ae8a:	607a      	str	r2, [r7, #4]
   1ae8c:	781b      	ldrb	r3, [r3, #0]
   1ae8e:	827b      	strh	r3, [r7, #18]
  }
  APP_TRACE_INFO1("  Heart rate:   %d", heartRate);
   1ae90:	8a7b      	ldrh	r3, [r7, #18]
   1ae92:	4619      	mov	r1, r3
   1ae94:	4828      	ldr	r0, [pc, #160]	; (1af38 <hrcpHrsParseHrm+0x140>)
   1ae96:	f000 fd0b 	bl	1b8b0 <WsfTrace>
  
  /* energy expended */
  if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   1ae9a:	7dfb      	ldrb	r3, [r7, #23]
   1ae9c:	f003 0308 	and.w	r3, r3, #8
   1aea0:	2b00      	cmp	r3, #0
   1aea2:	d012      	beq.n	1aeca <hrcpHrsParseHrm+0xd2>
  {
    BSTREAM_TO_UINT16(energyExp, pValue);
   1aea4:	687b      	ldr	r3, [r7, #4]
   1aea6:	781b      	ldrb	r3, [r3, #0]
   1aea8:	b29a      	uxth	r2, r3
   1aeaa:	687b      	ldr	r3, [r7, #4]
   1aeac:	3301      	adds	r3, #1
   1aeae:	781b      	ldrb	r3, [r3, #0]
   1aeb0:	b29b      	uxth	r3, r3
   1aeb2:	021b      	lsls	r3, r3, #8
   1aeb4:	b29b      	uxth	r3, r3
   1aeb6:	4413      	add	r3, r2
   1aeb8:	823b      	strh	r3, [r7, #16]
   1aeba:	687b      	ldr	r3, [r7, #4]
   1aebc:	3302      	adds	r3, #2
   1aebe:	607b      	str	r3, [r7, #4]
    APP_TRACE_INFO1("  Energy Exp:   %d", energyExp);
   1aec0:	8a3b      	ldrh	r3, [r7, #16]
   1aec2:	4619      	mov	r1, r3
   1aec4:	481d      	ldr	r0, [pc, #116]	; (1af3c <hrcpHrsParseHrm+0x144>)
   1aec6:	f000 fcf3 	bl	1b8b0 <WsfTrace>
  }
  
  /* r-r interval */
  if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   1aeca:	7dfb      	ldrb	r3, [r7, #23]
   1aecc:	f003 0310 	and.w	r3, r3, #16
   1aed0:	2b00      	cmp	r3, #0
   1aed2:	d026      	beq.n	1af22 <hrcpHrsParseHrm+0x12a>
  {
    /* get length of r-r interval bytes */
    len = len + CH_HRM_LEN_RR_INTERVAL - minLen;
   1aed4:	887a      	ldrh	r2, [r7, #2]
   1aed6:	8abb      	ldrh	r3, [r7, #20]
   1aed8:	1ad3      	subs	r3, r2, r3
   1aeda:	b29b      	uxth	r3, r3
   1aedc:	3302      	adds	r3, #2
   1aede:	807b      	strh	r3, [r7, #2]
    
    /* if len is somehow missing a byte (len is odd) reduce by 1 */
    if (len & 1)
   1aee0:	887b      	ldrh	r3, [r7, #2]
   1aee2:	f003 0301 	and.w	r3, r3, #1
   1aee6:	2b00      	cmp	r3, #0
   1aee8:	d002      	beq.n	1aef0 <hrcpHrsParseHrm+0xf8>
    {
      len--;
   1aeea:	887b      	ldrh	r3, [r7, #2]
   1aeec:	3b01      	subs	r3, #1
   1aeee:	807b      	strh	r3, [r7, #2]
    }
    
    /* parse r-r intervals */
    do
    {
      BSTREAM_TO_UINT16(rrInterval, pValue);
   1aef0:	687b      	ldr	r3, [r7, #4]
   1aef2:	781b      	ldrb	r3, [r3, #0]
   1aef4:	b29a      	uxth	r2, r3
   1aef6:	687b      	ldr	r3, [r7, #4]
   1aef8:	3301      	adds	r3, #1
   1aefa:	781b      	ldrb	r3, [r3, #0]
   1aefc:	b29b      	uxth	r3, r3
   1aefe:	021b      	lsls	r3, r3, #8
   1af00:	b29b      	uxth	r3, r3
   1af02:	4413      	add	r3, r2
   1af04:	81fb      	strh	r3, [r7, #14]
   1af06:	687b      	ldr	r3, [r7, #4]
   1af08:	3302      	adds	r3, #2
   1af0a:	607b      	str	r3, [r7, #4]
      APP_TRACE_INFO1("  r-r Interval: %d", rrInterval);
   1af0c:	89fb      	ldrh	r3, [r7, #14]
   1af0e:	4619      	mov	r1, r3
   1af10:	480b      	ldr	r0, [pc, #44]	; (1af40 <hrcpHrsParseHrm+0x148>)
   1af12:	f000 fccd 	bl	1b8b0 <WsfTrace>
      len -= 2;
   1af16:	887b      	ldrh	r3, [r7, #2]
   1af18:	3b02      	subs	r3, #2
   1af1a:	807b      	strh	r3, [r7, #2]
    } while (len > 0);
   1af1c:	887b      	ldrh	r3, [r7, #2]
   1af1e:	2b00      	cmp	r3, #0
   1af20:	d1e6      	bne.n	1aef0 <hrcpHrsParseHrm+0xf8>
  }
  
  APP_TRACE_INFO1("  Flags:0x%02x", flags);    
   1af22:	7dfb      	ldrb	r3, [r7, #23]
   1af24:	4619      	mov	r1, r3
   1af26:	4807      	ldr	r0, [pc, #28]	; (1af44 <hrcpHrsParseHrm+0x14c>)
   1af28:	f000 fcc2 	bl	1b8b0 <WsfTrace>
}
   1af2c:	3718      	adds	r7, #24
   1af2e:	46bd      	mov	sp, r7
   1af30:	bd80      	pop	{r7, pc}
   1af32:	bf00      	nop
   1af34:	000258a0 	.word	0x000258a0
   1af38:	000258c4 	.word	0x000258c4
   1af3c:	000258d8 	.word	0x000258d8
   1af40:	000258ec 	.word	0x000258ec
   1af44:	00025900 	.word	0x00025900

0001af48 <HrpcHrsDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpcHrsDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   1af48:	b580      	push	{r7, lr}
   1af4a:	b084      	sub	sp, #16
   1af4c:	af02      	add	r7, sp, #8
   1af4e:	4603      	mov	r3, r0
   1af50:	6039      	str	r1, [r7, #0]
   1af52:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attHrsSvcUuid,
   1af54:	79f8      	ldrb	r0, [r7, #7]
   1af56:	683b      	ldr	r3, [r7, #0]
   1af58:	9301      	str	r3, [sp, #4]
   1af5a:	4b05      	ldr	r3, [pc, #20]	; (1af70 <HrpcHrsDiscover+0x28>)
   1af5c:	9300      	str	r3, [sp, #0]
   1af5e:	2304      	movs	r3, #4
   1af60:	4a04      	ldr	r2, [pc, #16]	; (1af74 <HrpcHrsDiscover+0x2c>)
   1af62:	2102      	movs	r1, #2
   1af64:	f002 fff4 	bl	1df50 <AppDiscFindService>
                     HRPC_HRS_HDL_LIST_LEN, (attcDiscChar_t **) hrpcHrsDiscCharList, pHdlList);
}
   1af68:	bf00      	nop
   1af6a:	3708      	adds	r7, #8
   1af6c:	46bd      	mov	sp, r7
   1af6e:	bd80      	pop	{r7, pc}
   1af70:	10002c24 	.word	0x10002c24
   1af74:	00025c8c 	.word	0x00025c8c

0001af78 <HrpcHrsValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t HrpcHrsValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   1af78:	b580      	push	{r7, lr}
   1af7a:	b086      	sub	sp, #24
   1af7c:	af00      	add	r7, sp, #0
   1af7e:	6078      	str	r0, [r7, #4]
   1af80:	6039      	str	r1, [r7, #0]
  uint8_t   *p;
  uint8_t   sensorLoc;
  uint8_t   status = ATT_SUCCESS;
   1af82:	2300      	movs	r3, #0
   1af84:	75fb      	strb	r3, [r7, #23]
  
  /* heart rate measurement */
  if (pMsg->handle == pHdlList[HRPC_HRS_HRM_HDL_IDX])
   1af86:	683b      	ldr	r3, [r7, #0]
   1af88:	895a      	ldrh	r2, [r3, #10]
   1af8a:	687b      	ldr	r3, [r7, #4]
   1af8c:	881b      	ldrh	r3, [r3, #0]
   1af8e:	429a      	cmp	r2, r3
   1af90:	d108      	bne.n	1afa4 <HrpcHrsValueUpdate+0x2c>
  {
    /* parse value */
    hrcpHrsParseHrm(pMsg->pValue, pMsg->valueLen);
   1af92:	683b      	ldr	r3, [r7, #0]
   1af94:	685a      	ldr	r2, [r3, #4]
   1af96:	683b      	ldr	r3, [r7, #0]
   1af98:	891b      	ldrh	r3, [r3, #8]
   1af9a:	4619      	mov	r1, r3
   1af9c:	4610      	mov	r0, r2
   1af9e:	f7ff ff2b 	bl	1adf8 <hrcpHrsParseHrm>
   1afa2:	e019      	b.n	1afd8 <HrpcHrsValueUpdate+0x60>
  }
  /* body sensor location */
  else if (pMsg->handle == pHdlList[HRPC_HRS_BSL_HDL_IDX])
   1afa4:	683b      	ldr	r3, [r7, #0]
   1afa6:	895a      	ldrh	r2, [r3, #10]
   1afa8:	687b      	ldr	r3, [r7, #4]
   1afaa:	3304      	adds	r3, #4
   1afac:	881b      	ldrh	r3, [r3, #0]
   1afae:	429a      	cmp	r2, r3
   1afb0:	d110      	bne.n	1afd4 <HrpcHrsValueUpdate+0x5c>
  {
    /* parse value */
    p = pMsg->pValue;
   1afb2:	683b      	ldr	r3, [r7, #0]
   1afb4:	685b      	ldr	r3, [r3, #4]
   1afb6:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(sensorLoc, p);
   1afb8:	693b      	ldr	r3, [r7, #16]
   1afba:	1c5a      	adds	r2, r3, #1
   1afbc:	613a      	str	r2, [r7, #16]
   1afbe:	781b      	ldrb	r3, [r3, #0]
   1afc0:	73fb      	strb	r3, [r7, #15]

    /* ignore if out of range */
    if (sensorLoc <= CH_BSENSOR_LOC_FOOT)
   1afc2:	7bfb      	ldrb	r3, [r7, #15]
   1afc4:	2b06      	cmp	r3, #6
   1afc6:	d807      	bhi.n	1afd8 <HrpcHrsValueUpdate+0x60>
    {
      APP_TRACE_INFO1("Body sensor location:%d", sensorLoc);
   1afc8:	7bfb      	ldrb	r3, [r7, #15]
   1afca:	4619      	mov	r1, r3
   1afcc:	4805      	ldr	r0, [pc, #20]	; (1afe4 <HrpcHrsValueUpdate+0x6c>)
   1afce:	f000 fc6f 	bl	1b8b0 <WsfTrace>
   1afd2:	e001      	b.n	1afd8 <HrpcHrsValueUpdate+0x60>
    }
  }
  else
  {
    status = ATT_ERR_NOT_FOUND;
   1afd4:	230a      	movs	r3, #10
   1afd6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
   1afd8:	7dfb      	ldrb	r3, [r7, #23]
}
   1afda:	4618      	mov	r0, r3
   1afdc:	3718      	adds	r7, #24
   1afde:	46bd      	mov	sp, r7
   1afe0:	bd80      	pop	{r7, pc}
   1afe2:	bf00      	nop
   1afe4:	00025910 	.word	0x00025910

0001afe8 <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
   1afe8:	b580      	push	{r7, lr}
   1afea:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
   1afec:	f006 fcfe 	bl	219ec <am_bsp_itm_printf_enable>
}
   1aff0:	bf00      	nop
   1aff2:	bd80      	pop	{r7, pc}

0001aff4 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
   1aff4:	b580      	push	{r7, lr}
   1aff6:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   1aff8:	2100      	movs	r1, #0
   1affa:	2000      	movs	r0, #0
   1affc:	f008 fa3c 	bl	23478 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   1b000:	4809      	ldr	r0, [pc, #36]	; (1b028 <main+0x34>)
   1b002:	f008 f897 	bl	23134 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   1b006:	f008 f8bb 	bl	23180 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   1b00a:	f009 f85d 	bl	240c8 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   1b00e:	2001      	movs	r0, #1
   1b010:	f009 f862 	bl	240d8 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   1b014:	f006 fcb8 	bl	21988 <am_bsp_low_power_init>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
   1b018:	f7ff ffe6 	bl	1afe8 <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Watch Example\n");
   1b01c:	4803      	ldr	r0, [pc, #12]	; (1b02c <main+0x38>)
   1b01e:	f006 fac3 	bl	215a8 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   1b022:	f000 fa79 	bl	1b518 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   1b026:	e7fe      	b.n	1b026 <main+0x32>
   1b028:	00028ba0 	.word	0x00028ba0
   1b02c:	00025928 	.word	0x00025928

0001b030 <__NVIC_SetPriority>:
{
   1b030:	b480      	push	{r7}
   1b032:	b083      	sub	sp, #12
   1b034:	af00      	add	r7, sp, #0
   1b036:	4603      	mov	r3, r0
   1b038:	6039      	str	r1, [r7, #0]
   1b03a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1b03c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1b040:	2b00      	cmp	r3, #0
   1b042:	db0a      	blt.n	1b05a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b044:	490d      	ldr	r1, [pc, #52]	; (1b07c <__NVIC_SetPriority+0x4c>)
   1b046:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1b04a:	683a      	ldr	r2, [r7, #0]
   1b04c:	b2d2      	uxtb	r2, r2
   1b04e:	0152      	lsls	r2, r2, #5
   1b050:	b2d2      	uxtb	r2, r2
   1b052:	440b      	add	r3, r1
   1b054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1b058:	e00a      	b.n	1b070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b05a:	4909      	ldr	r1, [pc, #36]	; (1b080 <__NVIC_SetPriority+0x50>)
   1b05c:	79fb      	ldrb	r3, [r7, #7]
   1b05e:	f003 030f 	and.w	r3, r3, #15
   1b062:	3b04      	subs	r3, #4
   1b064:	683a      	ldr	r2, [r7, #0]
   1b066:	b2d2      	uxtb	r2, r2
   1b068:	0152      	lsls	r2, r2, #5
   1b06a:	b2d2      	uxtb	r2, r2
   1b06c:	440b      	add	r3, r1
   1b06e:	761a      	strb	r2, [r3, #24]
}
   1b070:	bf00      	nop
   1b072:	370c      	adds	r7, #12
   1b074:	46bd      	mov	sp, r7
   1b076:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b07a:	4770      	bx	lr
   1b07c:	e000e100 	.word	0xe000e100
   1b080:	e000ed00 	.word	0xe000ed00

0001b084 <wsf_timer_handler>:
// Callback handler for the FreeRTOS Timer
//
//*****************************************************************************
void
wsf_timer_handler(TimerHandle_t xTimer)
{
   1b084:	b580      	push	{r7, lr}
   1b086:	b082      	sub	sp, #8
   1b088:	af00      	add	r7, sp, #0
   1b08a:	6078      	str	r0, [r7, #4]
    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1b08c:	2100      	movs	r1, #0
   1b08e:	2000      	movs	r0, #0
   1b090:	f000 fb20 	bl	1b6d4 <WsfTaskSetReady>
}
   1b094:	bf00      	nop
   1b096:	3708      	adds	r7, #8
   1b098:	46bd      	mov	sp, r7
   1b09a:	bd80      	pop	{r7, pc}

0001b09c <scheduler_timer_init>:
// Reuse FreeRTOS TIMER to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
   1b09c:	b580      	push	{r7, lr}
   1b09e:	b082      	sub	sp, #8
   1b0a0:	af02      	add	r7, sp, #8
    // Create a FreeRTOS Timer
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   1b0a2:	4b09      	ldr	r3, [pc, #36]	; (1b0c8 <scheduler_timer_init+0x2c>)
   1b0a4:	9300      	str	r3, [sp, #0]
   1b0a6:	2300      	movs	r3, #0
   1b0a8:	2200      	movs	r2, #0
   1b0aa:	210a      	movs	r1, #10
   1b0ac:	4807      	ldr	r0, [pc, #28]	; (1b0cc <scheduler_timer_init+0x30>)
   1b0ae:	f002 f947 	bl	1d340 <xTimerCreate>
   1b0b2:	4602      	mov	r2, r0
   1b0b4:	4b06      	ldr	r3, [pc, #24]	; (1b0d0 <scheduler_timer_init+0x34>)
   1b0b6:	601a      	str	r2, [r3, #0]
            pdFALSE, NULL, wsf_timer_handler);
    configASSERT(xWsfTimer);
   1b0b8:	4b05      	ldr	r3, [pc, #20]	; (1b0d0 <scheduler_timer_init+0x34>)
   1b0ba:	681b      	ldr	r3, [r3, #0]
   1b0bc:	2b00      	cmp	r3, #0
   1b0be:	d100      	bne.n	1b0c2 <scheduler_timer_init+0x26>
   1b0c0:	e7fe      	b.n	1b0c0 <scheduler_timer_init+0x24>
}
   1b0c2:	bf00      	nop
   1b0c4:	46bd      	mov	sp, r7
   1b0c6:	bd80      	pop	{r7, pc}
   1b0c8:	0001b085 	.word	0x0001b085
   1b0cc:	00025940 	.word	0x00025940
   1b0d0:	10009e58 	.word	0x10009e58

0001b0d4 <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
   1b0d4:	b580      	push	{r7, lr}
   1b0d6:	b082      	sub	sp, #8
   1b0d8:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   1b0da:	f001 fcf5 	bl	1cac8 <xTaskGetTickCount>
   1b0de:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   1b0e0:	4b0b      	ldr	r3, [pc, #44]	; (1b110 <update_scheduler_timers+0x3c>)
   1b0e2:	681b      	ldr	r3, [r3, #0]
   1b0e4:	687a      	ldr	r2, [r7, #4]
   1b0e6:	1ad3      	subs	r3, r2, r3
   1b0e8:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   1b0ea:	683b      	ldr	r3, [r7, #0]
   1b0ec:	2b09      	cmp	r3, #9
   1b0ee:	d90a      	bls.n	1b106 <update_scheduler_timers+0x32>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   1b0f0:	683b      	ldr	r3, [r7, #0]
   1b0f2:	4a08      	ldr	r2, [pc, #32]	; (1b114 <update_scheduler_timers+0x40>)
   1b0f4:	fba2 2303 	umull	r2, r3, r2, r3
   1b0f8:	08db      	lsrs	r3, r3, #3
   1b0fa:	4618      	mov	r0, r3
   1b0fc:	f7ff fe06 	bl	1ad0c <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   1b100:	4a03      	ldr	r2, [pc, #12]	; (1b110 <update_scheduler_timers+0x3c>)
   1b102:	687b      	ldr	r3, [r7, #4]
   1b104:	6013      	str	r3, [r2, #0]
    }
}
   1b106:	bf00      	nop
   1b108:	3708      	adds	r7, #8
   1b10a:	46bd      	mov	sp, r7
   1b10c:	bd80      	pop	{r7, pc}
   1b10e:	bf00      	nop
   1b110:	10005000 	.word	0x10005000
   1b114:	cccccccd 	.word	0xcccccccd

0001b118 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
   1b118:	b580      	push	{r7, lr}
   1b11a:	b084      	sub	sp, #16
   1b11c:	af02      	add	r7, sp, #8
    wsfTimerTicks_t xNextExpiration;

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   1b11e:	1cfb      	adds	r3, r7, #3
   1b120:	4618      	mov	r0, r3
   1b122:	f7ff fe21 	bl	1ad68 <WsfTimerNextExpiration>
   1b126:	6078      	str	r0, [r7, #4]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   1b128:	687b      	ldr	r3, [r7, #4]
   1b12a:	2b00      	cmp	r3, #0
   1b12c:	d014      	beq.n	1b158 <set_next_wakeup+0x40>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   1b12e:	4b0c      	ldr	r3, [pc, #48]	; (1b160 <set_next_wakeup+0x48>)
   1b130:	6818      	ldr	r0, [r3, #0]
   1b132:	687b      	ldr	r3, [r7, #4]
   1b134:	f242 7210 	movw	r2, #10000	; 0x2710
   1b138:	fb02 f303 	mul.w	r3, r2, r3
   1b13c:	4a09      	ldr	r2, [pc, #36]	; (1b164 <set_next_wakeup+0x4c>)
   1b13e:	fba2 2303 	umull	r2, r3, r2, r3
   1b142:	099a      	lsrs	r2, r3, #6
   1b144:	2364      	movs	r3, #100	; 0x64
   1b146:	9300      	str	r3, [sp, #0]
   1b148:	2300      	movs	r3, #0
   1b14a:	2104      	movs	r1, #4
   1b14c:	f002 f93e 	bl	1d3cc <xTimerGenericCommand>
   1b150:	4603      	mov	r3, r0
   1b152:	2b01      	cmp	r3, #1
   1b154:	d000      	beq.n	1b158 <set_next_wakeup+0x40>
   1b156:	e7fe      	b.n	1b156 <set_next_wakeup+0x3e>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   1b158:	bf00      	nop
   1b15a:	3708      	adds	r7, #8
   1b15c:	46bd      	mov	sp, r7
   1b15e:	bd80      	pop	{r7, pc}
   1b160:	10009e58 	.word	0x10009e58
   1b164:	10624dd3 	.word	0x10624dd3

0001b168 <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1b168:	b580      	push	{r7, lr}
   1b16a:	b082      	sub	sp, #8
   1b16c:	af00      	add	r7, sp, #0
   1b16e:	4603      	mov	r3, r0
   1b170:	6039      	str	r1, [r7, #0]
   1b172:	71fb      	strb	r3, [r7, #7]
    //
    // Restart the button timer.
    //
    WsfTimerStartMs(&ButtonTimer, 10);
   1b174:	210a      	movs	r1, #10
   1b176:	481e      	ldr	r0, [pc, #120]	; (1b1f0 <button_handler+0x88>)
   1b178:	f7ff fda4 	bl	1acc4 <WsfTimerStartMs>

    //
    // Every time we get a button timer tick, check all of our buttons.
    //
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   1b17c:	2101      	movs	r1, #1
   1b17e:	481d      	ldr	r0, [pc, #116]	; (1b1f4 <button_handler+0x8c>)
   1b180:	f006 fab4 	bl	216ec <am_devices_button_array_tick>

    //
    // If we got a a press, do something with it.
    //
    if ( am_devices_button_released(am_bsp_psButtons[0]) )
   1b184:	4b1b      	ldr	r3, [pc, #108]	; (1b1f4 <button_handler+0x8c>)
   1b186:	7b1b      	ldrb	r3, [r3, #12]
   1b188:	f083 0301 	eor.w	r3, r3, #1
   1b18c:	b2db      	uxtb	r3, r3
   1b18e:	2b00      	cmp	r3, #0
   1b190:	d009      	beq.n	1b1a6 <button_handler+0x3e>
   1b192:	4b18      	ldr	r3, [pc, #96]	; (1b1f4 <button_handler+0x8c>)
   1b194:	7b5b      	ldrb	r3, [r3, #13]
   1b196:	2b00      	cmp	r3, #0
   1b198:	d005      	beq.n	1b1a6 <button_handler+0x3e>
    {
        am_util_debug_printf("Got Button 0 Press\n");
   1b19a:	4817      	ldr	r0, [pc, #92]	; (1b1f8 <button_handler+0x90>)
   1b19c:	f006 fa04 	bl	215a8 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
   1b1a0:	2002      	movs	r0, #2
   1b1a2:	f7fe fc3f 	bl	19a24 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[1]) )
   1b1a6:	4b13      	ldr	r3, [pc, #76]	; (1b1f4 <button_handler+0x8c>)
   1b1a8:	7f1b      	ldrb	r3, [r3, #28]
   1b1aa:	f083 0301 	eor.w	r3, r3, #1
   1b1ae:	b2db      	uxtb	r3, r3
   1b1b0:	2b00      	cmp	r3, #0
   1b1b2:	d009      	beq.n	1b1c8 <button_handler+0x60>
   1b1b4:	4b0f      	ldr	r3, [pc, #60]	; (1b1f4 <button_handler+0x8c>)
   1b1b6:	7f5b      	ldrb	r3, [r3, #29]
   1b1b8:	2b00      	cmp	r3, #0
   1b1ba:	d005      	beq.n	1b1c8 <button_handler+0x60>
    {
        am_util_debug_printf("Got Button 1 Press\n");
   1b1bc:	480f      	ldr	r0, [pc, #60]	; (1b1fc <button_handler+0x94>)
   1b1be:	f006 f9f3 	bl	215a8 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
   1b1c2:	2002      	movs	r0, #2
   1b1c4:	f7fe fc2e 	bl	19a24 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[2]) )
   1b1c8:	4b0a      	ldr	r3, [pc, #40]	; (1b1f4 <button_handler+0x8c>)
   1b1ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1b1ce:	f083 0301 	eor.w	r3, r3, #1
   1b1d2:	b2db      	uxtb	r3, r3
   1b1d4:	2b00      	cmp	r3, #0
   1b1d6:	d007      	beq.n	1b1e8 <button_handler+0x80>
   1b1d8:	4b06      	ldr	r3, [pc, #24]	; (1b1f4 <button_handler+0x8c>)
   1b1da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1b1de:	2b00      	cmp	r3, #0
   1b1e0:	d002      	beq.n	1b1e8 <button_handler+0x80>
    {
        am_util_debug_printf("Got Button 2 Press\n");
   1b1e2:	4807      	ldr	r0, [pc, #28]	; (1b200 <button_handler+0x98>)
   1b1e4:	f006 f9e0 	bl	215a8 <am_util_stdio_printf>
    }
}
   1b1e8:	bf00      	nop
   1b1ea:	3708      	adds	r7, #8
   1b1ec:	46bd      	mov	sp, r7
   1b1ee:	bd80      	pop	{r7, pc}
   1b1f0:	10009e64 	.word	0x10009e64
   1b1f4:	10002c78 	.word	0x10002c78
   1b1f8:	0002594c 	.word	0x0002594c
   1b1fc:	00025960 	.word	0x00025960
   1b200:	00025974 	.word	0x00025974

0001b204 <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
   1b204:	b580      	push	{r7, lr}
   1b206:	af00      	add	r7, sp, #0
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   1b208:	2101      	movs	r1, #1
   1b20a:	4806      	ldr	r0, [pc, #24]	; (1b224 <setup_buttons+0x20>)
   1b20c:	f006 fa0a 	bl	21624 <am_devices_button_array_init>

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
   1b210:	4b05      	ldr	r3, [pc, #20]	; (1b228 <setup_buttons+0x24>)
   1b212:	781a      	ldrb	r2, [r3, #0]
   1b214:	4b05      	ldr	r3, [pc, #20]	; (1b22c <setup_buttons+0x28>)
   1b216:	721a      	strb	r2, [r3, #8]
    WsfTimerStartSec(&ButtonTimer, 2);
   1b218:	2102      	movs	r1, #2
   1b21a:	4804      	ldr	r0, [pc, #16]	; (1b22c <setup_buttons+0x28>)
   1b21c:	f7ff fd40 	bl	1aca0 <WsfTimerStartSec>
}
   1b220:	bf00      	nop
   1b222:	bd80      	pop	{r7, pc}
   1b224:	10002c78 	.word	0x10002c78
   1b228:	10009e54 	.word	0x10009e54
   1b22c:	10009e64 	.word	0x10009e64

0001b230 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   1b230:	b580      	push	{r7, lr}
   1b232:	b082      	sub	sp, #8
   1b234:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
   1b236:	f7ff ff31 	bl	1b09c <scheduler_timer_init>
    WsfTimerInit();
   1b23a:	f7ff fd21 	bl	1ac80 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   1b23e:	4b4c      	ldr	r3, [pc, #304]	; (1b370 <exactle_stack_init+0x140>)
   1b240:	2204      	movs	r2, #4
   1b242:	494c      	ldr	r1, [pc, #304]	; (1b374 <exactle_stack_init+0x144>)
   1b244:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   1b248:	f7ff fa38 	bl	1a6bc <WsfBufInit>
   1b24c:	4603      	mov	r3, r0
   1b24e:	80fb      	strh	r3, [r7, #6]
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   1b250:	88fb      	ldrh	r3, [r7, #6]
   1b252:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
   1b256:	d906      	bls.n	1b266 <exactle_stack_init+0x36>
    {
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   1b258:	88fb      	ldrh	r3, [r7, #6]
   1b25a:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
   1b25e:	4619      	mov	r1, r3
   1b260:	4845      	ldr	r0, [pc, #276]	; (1b378 <exactle_stack_init+0x148>)
   1b262:	f006 f9a1 	bl	215a8 <am_util_stdio_printf>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   1b266:	f7fd faff 	bl	18868 <SecInit>
    SecAesInit();
   1b26a:	f7fc ff99 	bl	181a0 <SecAesInit>
    SecCmacInit();
   1b26e:	f7fd f96b 	bl	18548 <SecCmacInit>
    SecEccInit();
   1b272:	f7fd fa77 	bl	18764 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   1b276:	4841      	ldr	r0, [pc, #260]	; (1b37c <exactle_stack_init+0x14c>)
   1b278:	f000 fa58 	bl	1b72c <WsfOsSetNextHandler>
   1b27c:	4603      	mov	r3, r0
   1b27e:	717b      	strb	r3, [r7, #5]
    HciHandlerInit(handlerId);
   1b280:	797b      	ldrb	r3, [r7, #5]
   1b282:	4618      	mov	r0, r3
   1b284:	f7ff f9f4 	bl	1a670 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   1b288:	483d      	ldr	r0, [pc, #244]	; (1b380 <exactle_stack_init+0x150>)
   1b28a:	f000 fa4f 	bl	1b72c <WsfOsSetNextHandler>
   1b28e:	4603      	mov	r3, r0
   1b290:	717b      	strb	r3, [r7, #5]
    DmDevVsInit(0);
   1b292:	2000      	movs	r0, #0
   1b294:	f7f4 fdcb 	bl	fe2e <DmDevVsInit>
    DmAdvInit();
   1b298:	f7f4 f84a 	bl	f330 <DmAdvInit>
    DmScanInit();
   1b29c:	f7f5 f950 	bl	10540 <DmScanInit>
    DmConnInit();
   1b2a0:	f7f4 fac0 	bl	f824 <DmConnInit>
    DmConnMasterInit();
   1b2a4:	f7f6 feb6 	bl	12014 <DmConnMasterInit>
    DmConnSlaveInit();
   1b2a8:	f7f4 fd1c 	bl	fce4 <DmConnSlaveInit>
    DmSecInit();
   1b2ac:	f7f5 fa57 	bl	1075e <DmSecInit>
    DmSecLescInit();
   1b2b0:	f7f5 fb94 	bl	109dc <DmSecLescInit>
    DmPrivInit();
   1b2b4:	f7f4 ff46 	bl	10144 <DmPrivInit>
    DmHandlerInit(handlerId);
   1b2b8:	797b      	ldrb	r3, [r7, #5]
   1b2ba:	4618      	mov	r0, r3
   1b2bc:	f7f4 fe01 	bl	fec2 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   1b2c0:	4830      	ldr	r0, [pc, #192]	; (1b384 <exactle_stack_init+0x154>)
   1b2c2:	f000 fa33 	bl	1b72c <WsfOsSetNextHandler>
   1b2c6:	4603      	mov	r3, r0
   1b2c8:	717b      	strb	r3, [r7, #5]
    L2cSlaveHandlerInit(handlerId);
   1b2ca:	797b      	ldrb	r3, [r7, #5]
   1b2cc:	4618      	mov	r0, r3
   1b2ce:	f7f5 fd27 	bl	10d20 <L2cSlaveHandlerInit>
    L2cInit();
   1b2d2:	f7f5 fc54 	bl	10b7e <L2cInit>
    L2cSlaveInit();
   1b2d6:	f7f5 fcd9 	bl	10c8c <L2cSlaveInit>
    L2cMasterInit();
   1b2da:	f7f6 fef9 	bl	120d0 <L2cMasterInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   1b2de:	482a      	ldr	r0, [pc, #168]	; (1b388 <exactle_stack_init+0x158>)
   1b2e0:	f000 fa24 	bl	1b72c <WsfOsSetNextHandler>
   1b2e4:	4603      	mov	r3, r0
   1b2e6:	717b      	strb	r3, [r7, #5]
    AttHandlerInit(handlerId);
   1b2e8:	797b      	ldrb	r3, [r7, #5]
   1b2ea:	4618      	mov	r0, r3
   1b2ec:	f7f1 f98f 	bl	c60e <AttHandlerInit>
    AttsInit();
   1b2f0:	f7f2 fc92 	bl	dc18 <AttsInit>
    AttsIndInit();
   1b2f4:	f7f2 fb92 	bl	da1c <AttsIndInit>
    AttcInit();
   1b2f8:	f7f1 fdb2 	bl	ce60 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   1b2fc:	4823      	ldr	r0, [pc, #140]	; (1b38c <exactle_stack_init+0x15c>)
   1b2fe:	f000 fa15 	bl	1b72c <WsfOsSetNextHandler>
   1b302:	4603      	mov	r3, r0
   1b304:	717b      	strb	r3, [r7, #5]
    SmpHandlerInit(handlerId);
   1b306:	797b      	ldrb	r3, [r7, #5]
   1b308:	4618      	mov	r0, r3
   1b30a:	f7f5 ff91 	bl	11230 <SmpHandlerInit>
    SmpiInit();
   1b30e:	f7f6 fdd1 	bl	11eb4 <SmpiInit>
    SmpiScInit();
   1b312:	f7f6 fdb9 	bl	11e88 <SmpiScInit>
    SmprInit();
   1b316:	f7f6 fdf7 	bl	11f08 <SmprInit>
    SmprScInit();
   1b31a:	f7f6 fddf 	bl	11edc <SmprScInit>
    HciSetMaxRxAclLen(251);
   1b31e:	20fb      	movs	r0, #251	; 0xfb
   1b320:	f7fa fc24 	bl	15b6c <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   1b324:	481a      	ldr	r0, [pc, #104]	; (1b390 <exactle_stack_init+0x160>)
   1b326:	f000 fa01 	bl	1b72c <WsfOsSetNextHandler>
   1b32a:	4603      	mov	r3, r0
   1b32c:	717b      	strb	r3, [r7, #5]
    AppHandlerInit(handlerId);
   1b32e:	797b      	ldrb	r3, [r7, #5]
   1b330:	4618      	mov	r0, r3
   1b332:	f002 ffc7 	bl	1e2c4 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(WatchHandler);
   1b336:	4817      	ldr	r0, [pc, #92]	; (1b394 <exactle_stack_init+0x164>)
   1b338:	f000 f9f8 	bl	1b72c <WsfOsSetNextHandler>
   1b33c:	4603      	mov	r3, r0
   1b33e:	717b      	strb	r3, [r7, #5]
    WatchHandlerInit(handlerId);
   1b340:	797b      	ldrb	r3, [r7, #5]
   1b342:	4618      	mov	r0, r3
   1b344:	f7f8 fe92 	bl	1406c <WatchHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   1b348:	4813      	ldr	r0, [pc, #76]	; (1b398 <exactle_stack_init+0x168>)
   1b34a:	f000 f9ef 	bl	1b72c <WsfOsSetNextHandler>
   1b34e:	4603      	mov	r3, r0
   1b350:	717b      	strb	r3, [r7, #5]
    HciDrvHandlerInit(handlerId);
   1b352:	797b      	ldrb	r3, [r7, #5]
   1b354:	4618      	mov	r0, r3
   1b356:	f7fe ff5d 	bl	1a214 <HciDrvHandlerInit>

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   1b35a:	4810      	ldr	r0, [pc, #64]	; (1b39c <exactle_stack_init+0x16c>)
   1b35c:	f000 f9e6 	bl	1b72c <WsfOsSetNextHandler>
   1b360:	4603      	mov	r3, r0
   1b362:	461a      	mov	r2, r3
   1b364:	4b0e      	ldr	r3, [pc, #56]	; (1b3a0 <exactle_stack_init+0x170>)
   1b366:	701a      	strb	r2, [r3, #0]

}
   1b368:	bf00      	nop
   1b36a:	3708      	adds	r7, #8
   1b36c:	46bd      	mov	sp, r7
   1b36e:	bd80      	pop	{r7, pc}
   1b370:	10002c34 	.word	0x10002c34
   1b374:	10004480 	.word	0x10004480
   1b378:	00025988 	.word	0x00025988
   1b37c:	0001a69d 	.word	0x0001a69d
   1b380:	0000fedd 	.word	0x0000fedd
   1b384:	00010d31 	.word	0x00010d31
   1b388:	0000c64d 	.word	0x0000c64d
   1b38c:	00011279 	.word	0x00011279
   1b390:	0001e2e5 	.word	0x0001e2e5
   1b394:	00014111 	.word	0x00014111
   1b398:	0001a2a1 	.word	0x0001a2a1
   1b39c:	0001b169 	.word	0x0001b169
   1b3a0:	10009e54 	.word	0x10009e54

0001b3a4 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   1b3a4:	b580      	push	{r7, lr}
   1b3a6:	b082      	sub	sp, #8
   1b3a8:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   1b3aa:	4b07      	ldr	r3, [pc, #28]	; (1b3c8 <am_uart_isr+0x24>)
   1b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3ae:	607b      	str	r3, [r7, #4]
    UARTn(0)->IEC = ui32Status;
   1b3b0:	4a05      	ldr	r2, [pc, #20]	; (1b3c8 <am_uart_isr+0x24>)
   1b3b2:	687b      	ldr	r3, [r7, #4]
   1b3b4:	6453      	str	r3, [r2, #68]	; 0x44
    //
    //HciDrvUartISR(ui32Status);

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1b3b6:	2100      	movs	r1, #0
   1b3b8:	2000      	movs	r0, #0
   1b3ba:	f000 f98b 	bl	1b6d4 <WsfTaskSetReady>
}
   1b3be:	bf00      	nop
   1b3c0:	3708      	adds	r7, #8
   1b3c2:	46bd      	mov	sp, r7
   1b3c4:	bd80      	pop	{r7, pc}
   1b3c6:	bf00      	nop
   1b3c8:	4001c000 	.word	0x4001c000

0001b3cc <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   1b3cc:	b580      	push	{r7, lr}
   1b3ce:	af00      	add	r7, sp, #0

    HciDrvIntService();
   1b3d0:	f7fe ff40 	bl	1a254 <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1b3d4:	2100      	movs	r1, #0
   1b3d6:	2000      	movs	r0, #0
   1b3d8:	f000 f97c 	bl	1b6d4 <WsfTaskSetReady>
}
   1b3dc:	bf00      	nop
   1b3de:	bd80      	pop	{r7, pc}

0001b3e0 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   1b3e0:	b580      	push	{r7, lr}
   1b3e2:	af00      	add	r7, sp, #0
    am_util_debug_printf("RadioTask: setup\r\n");
   1b3e4:	480d      	ldr	r0, [pc, #52]	; (1b41c <RadioTaskSetup+0x3c>)
   1b3e6:	f006 f8df 	bl	215a8 <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xRadioEventHandle = xEventGroupCreate();
   1b3ea:	f000 faab 	bl	1b944 <xEventGroupCreate>
   1b3ee:	4602      	mov	r2, r0
   1b3f0:	4b0b      	ldr	r3, [pc, #44]	; (1b420 <RadioTaskSetup+0x40>)
   1b3f2:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while ( xRadioEventHandle == NULL );
   1b3f4:	bf00      	nop
   1b3f6:	4b0a      	ldr	r3, [pc, #40]	; (1b420 <RadioTaskSetup+0x40>)
   1b3f8:	681b      	ldr	r3, [r3, #0]
   1b3fa:	2b00      	cmp	r3, #0
   1b3fc:	d0fb      	beq.n	1b3f6 <RadioTaskSetup+0x16>

    // Pass event object to WSF scheduler
    wsfOsSetEventObject((void*)xRadioEventHandle);
   1b3fe:	4b08      	ldr	r3, [pc, #32]	; (1b420 <RadioTaskSetup+0x40>)
   1b400:	681b      	ldr	r3, [r3, #0]
   1b402:	4618      	mov	r0, r3
   1b404:	f000 fa44 	bl	1b890 <wsfOsSetEventObject>

    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   1b408:	2104      	movs	r1, #4
   1b40a:	200c      	movs	r0, #12
   1b40c:	f7ff fe10 	bl	1b030 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   1b410:	2001      	movs	r0, #1
   1b412:	f7fe fd33 	bl	19e7c <HciDrvRadioBoot>
}
   1b416:	bf00      	nop
   1b418:	bd80      	pop	{r7, pc}
   1b41a:	bf00      	nop
   1b41c:	000259ac 	.word	0x000259ac
   1b420:	10009e60 	.word	0x10009e60

0001b424 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   1b424:	b580      	push	{r7, lr}
   1b426:	b084      	sub	sp, #16
   1b428:	af02      	add	r7, sp, #8
   1b42a:	6078      	str	r0, [r7, #4]
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   1b42c:	480f      	ldr	r0, [pc, #60]	; (1b46c <RadioTask+0x48>)
   1b42e:	f006 f8bb 	bl	215a8 <am_util_stdio_printf>
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   1b432:	f7ff fefd 	bl	1b230 <exactle_stack_init>

    //
    // Prep the buttons for use
    //

    setup_buttons();
   1b436:	f7ff fee5 	bl	1b204 <setup_buttons>

    //
    // Start the "Ancs" profile.
    //
    WatchStart();
   1b43a:	f7f8 feb7 	bl	141ac <WatchStart>

        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
   1b43e:	f7ff fe49 	bl	1b0d4 <update_scheduler_timers>
        wsfOsDispatcher();
   1b442:	f000 f9a1 	bl	1b788 <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled
        // event.
        //
        set_next_wakeup();
   1b446:	f7ff fe67 	bl	1b118 <set_next_wakeup>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
   1b44a:	f000 f98b 	bl	1b764 <wsfOsReadyToSleep>
   1b44e:	4603      	mov	r3, r0
   1b450:	2b00      	cmp	r3, #0
   1b452:	d0f4      	beq.n	1b43e <RadioTask+0x1a>
        {
            //
            // Wait for an event to be posted to the Radio Event Handle.
            //
            xEventGroupWaitBits(xRadioEventHandle, 1, pdTRUE,
   1b454:	4b06      	ldr	r3, [pc, #24]	; (1b470 <RadioTask+0x4c>)
   1b456:	6818      	ldr	r0, [r3, #0]
   1b458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b45c:	9300      	str	r3, [sp, #0]
   1b45e:	2300      	movs	r3, #0
   1b460:	2201      	movs	r2, #1
   1b462:	2101      	movs	r1, #1
   1b464:	f000 fa86 	bl	1b974 <xEventGroupWaitBits>
        update_scheduler_timers();
   1b468:	e7e9      	b.n	1b43e <RadioTask+0x1a>
   1b46a:	bf00      	nop
   1b46c:	000259c0 	.word	0x000259c0
   1b470:	10009e60 	.word	0x10009e60

0001b474 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   1b474:	b580      	push	{r7, lr}
   1b476:	b082      	sub	sp, #8
   1b478:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   1b47a:	2000      	movs	r0, #0
   1b47c:	f008 f8ce 	bl	2361c <am_hal_ctimer_int_status_get>
   1b480:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
   1b482:	6878      	ldr	r0, [r7, #4]
   1b484:	f008 f8ba 	bl	235fc <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   1b488:	6878      	ldr	r0, [r7, #4]
   1b48a:	f008 f89f 	bl	235cc <am_hal_ctimer_int_service>
}
   1b48e:	bf00      	nop
   1b490:	3708      	adds	r7, #8
   1b492:	46bd      	mov	sp, r7
   1b494:	bd80      	pop	{r7, pc}

0001b496 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   1b496:	b580      	push	{r7, lr}
   1b498:	b082      	sub	sp, #8
   1b49a:	af00      	add	r7, sp, #0
   1b49c:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   1b49e:	2001      	movs	r0, #1
   1b4a0:	f008 fdda 	bl	24058 <am_hal_sysctrl_sleep>
    return 0;
   1b4a4:	2300      	movs	r3, #0
}
   1b4a6:	4618      	mov	r0, r3
   1b4a8:	3708      	adds	r7, #8
   1b4aa:	46bd      	mov	sp, r7
   1b4ac:	bd80      	pop	{r7, pc}

0001b4ae <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
   1b4ae:	b480      	push	{r7}
   1b4b0:	b083      	sub	sp, #12
   1b4b2:	af00      	add	r7, sp, #0
   1b4b4:	6078      	str	r0, [r7, #4]
    return;
   1b4b6:	bf00      	nop
}
   1b4b8:	370c      	adds	r7, #12
   1b4ba:	46bd      	mov	sp, r7
   1b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b4c0:	4770      	bx	lr

0001b4c2 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
   1b4c2:	b480      	push	{r7}
   1b4c4:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   1b4c6:	e7fe      	b.n	1b4c6 <vApplicationMallocFailedHook+0x4>

0001b4c8 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   1b4c8:	b480      	push	{r7}
   1b4ca:	b083      	sub	sp, #12
   1b4cc:	af00      	add	r7, sp, #0
   1b4ce:	6078      	str	r0, [r7, #4]
   1b4d0:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   1b4d2:	be00      	bkpt	0x0000
   1b4d4:	e7fd      	b.n	1b4d2 <vApplicationStackOverflowHook+0xa>
	...

0001b4d8 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   1b4d8:	b580      	push	{r7, lr}
   1b4da:	b084      	sub	sp, #16
   1b4dc:	af02      	add	r7, sp, #8
   1b4de:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   1b4e0:	4809      	ldr	r0, [pc, #36]	; (1b508 <setup_task+0x30>)
   1b4e2:	f006 f861 	bl	215a8 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   1b4e6:	f7ff ff7b 	bl	1b3e0 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   1b4ea:	4b08      	ldr	r3, [pc, #32]	; (1b50c <setup_task+0x34>)
   1b4ec:	9301      	str	r3, [sp, #4]
   1b4ee:	2303      	movs	r3, #3
   1b4f0:	9300      	str	r3, [sp, #0]
   1b4f2:	2300      	movs	r3, #0
   1b4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b4f8:	4905      	ldr	r1, [pc, #20]	; (1b510 <setup_task+0x38>)
   1b4fa:	4806      	ldr	r0, [pc, #24]	; (1b514 <setup_task+0x3c>)
   1b4fc:	f001 f832 	bl	1c564 <xTaskCreate>

    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   1b500:	2000      	movs	r0, #0
   1b502:	f001 f957 	bl	1c7b4 <vTaskSuspend>

    while (1);
   1b506:	e7fe      	b.n	1b506 <setup_task+0x2e>
   1b508:	000259dc 	.word	0x000259dc
   1b50c:	10009e5c 	.word	0x10009e5c
   1b510:	000259f8 	.word	0x000259f8
   1b514:	0001b425 	.word	0x0001b425

0001b518 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   1b518:	b580      	push	{r7, lr}
   1b51a:	b082      	sub	sp, #8
   1b51c:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   1b51e:	4b08      	ldr	r3, [pc, #32]	; (1b540 <run_tasks+0x28>)
   1b520:	9301      	str	r3, [sp, #4]
   1b522:	2303      	movs	r3, #3
   1b524:	9300      	str	r3, [sp, #0]
   1b526:	2300      	movs	r3, #0
   1b528:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b52c:	4905      	ldr	r1, [pc, #20]	; (1b544 <run_tasks+0x2c>)
   1b52e:	4806      	ldr	r0, [pc, #24]	; (1b548 <run_tasks+0x30>)
   1b530:	f001 f818 	bl	1c564 <xTaskCreate>

    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   1b534:	f001 f9aa 	bl	1c88c <vTaskStartScheduler>
}
   1b538:	bf00      	nop
   1b53a:	46bd      	mov	sp, r7
   1b53c:	bd80      	pop	{r7, pc}
   1b53e:	bf00      	nop
   1b540:	10009e74 	.word	0x10009e74
   1b544:	00025a04 	.word	0x00025a04
   1b548:	0001b4d9 	.word	0x0001b4d9

0001b54c <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   1b54c:	b480      	push	{r7}
   1b54e:	b085      	sub	sp, #20
   1b550:	af00      	add	r7, sp, #0
   1b552:	6078      	str	r0, [r7, #4]
   1b554:	460b      	mov	r3, r1
   1b556:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
   1b558:	2300      	movs	r3, #0
   1b55a:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   1b55c:	7bfb      	ldrb	r3, [r7, #15]
   1b55e:	b2db      	uxtb	r3, r3
   1b560:	2b00      	cmp	r3, #0
   1b562:	d100      	bne.n	1b566 <WsfAssert+0x1a>
   1b564:	e7fa      	b.n	1b55c <WsfAssert+0x10>
    {
      break;
   1b566:	bf00      	nop
    }
  }
}
   1b568:	bf00      	nop
   1b56a:	3714      	adds	r7, #20
   1b56c:	46bd      	mov	sp, r7
   1b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b572:	4770      	bx	lr

0001b574 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
   1b574:	b480      	push	{r7}
   1b576:	af00      	add	r7, sp, #0
  if (csNesting == 0)
   1b578:	4b07      	ldr	r3, [pc, #28]	; (1b598 <WsfCsEnter+0x24>)
   1b57a:	781b      	ldrb	r3, [r3, #0]
   1b57c:	2b00      	cmp	r3, #0
   1b57e:	d100      	bne.n	1b582 <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   1b580:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   1b582:	4b05      	ldr	r3, [pc, #20]	; (1b598 <WsfCsEnter+0x24>)
   1b584:	781b      	ldrb	r3, [r3, #0]
   1b586:	3301      	adds	r3, #1
   1b588:	b2da      	uxtb	r2, r3
   1b58a:	4b03      	ldr	r3, [pc, #12]	; (1b598 <WsfCsEnter+0x24>)
   1b58c:	701a      	strb	r2, [r3, #0]
}
   1b58e:	bf00      	nop
   1b590:	46bd      	mov	sp, r7
   1b592:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b596:	4770      	bx	lr
   1b598:	10005004 	.word	0x10005004

0001b59c <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
   1b59c:	b480      	push	{r7}
   1b59e:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   1b5a0:	4b07      	ldr	r3, [pc, #28]	; (1b5c0 <WsfCsExit+0x24>)
   1b5a2:	781b      	ldrb	r3, [r3, #0]
   1b5a4:	3b01      	subs	r3, #1
   1b5a6:	b2da      	uxtb	r2, r3
   1b5a8:	4b05      	ldr	r3, [pc, #20]	; (1b5c0 <WsfCsExit+0x24>)
   1b5aa:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   1b5ac:	4b04      	ldr	r3, [pc, #16]	; (1b5c0 <WsfCsExit+0x24>)
   1b5ae:	781b      	ldrb	r3, [r3, #0]
   1b5b0:	2b00      	cmp	r3, #0
   1b5b2:	d100      	bne.n	1b5b6 <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   1b5b4:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   1b5b6:	bf00      	nop
   1b5b8:	46bd      	mov	sp, r7
   1b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b5be:	4770      	bx	lr
   1b5c0:	10005004 	.word	0x10005004

0001b5c4 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   1b5c4:	b580      	push	{r7, lr}
   1b5c6:	af00      	add	r7, sp, #0
  WsfCsEnter();
   1b5c8:	f7ff ffd4 	bl	1b574 <WsfCsEnter>
}
   1b5cc:	bf00      	nop
   1b5ce:	bd80      	pop	{r7, pc}

0001b5d0 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   1b5d0:	b580      	push	{r7, lr}
   1b5d2:	af00      	add	r7, sp, #0
  WsfCsExit();
   1b5d4:	f7ff ffe2 	bl	1b59c <WsfCsExit>
}
   1b5d8:	bf00      	nop
   1b5da:	bd80      	pop	{r7, pc}

0001b5dc <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   1b5dc:	b580      	push	{r7, lr}
   1b5de:	b084      	sub	sp, #16
   1b5e0:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS
  if(xRadioTaskEventObject != NULL) 
   1b5e2:	4b21      	ldr	r3, [pc, #132]	; (1b668 <WsfSetOsSpecificEvent+0x8c>)
   1b5e4:	681b      	ldr	r3, [r3, #0]
   1b5e6:	2b00      	cmp	r3, #0
   1b5e8:	d039      	beq.n	1b65e <WsfSetOsSpecificEvent+0x82>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1b5ea:	f3ef 8305 	mrs	r3, IPSR
   1b5ee:	60bb      	str	r3, [r7, #8]
	if( ulCurrentInterrupt == 0 )
   1b5f0:	68bb      	ldr	r3, [r7, #8]
   1b5f2:	2b00      	cmp	r3, #0
   1b5f4:	d102      	bne.n	1b5fc <WsfSetOsSpecificEvent+0x20>
		xReturn = pdFALSE;
   1b5f6:	2300      	movs	r3, #0
   1b5f8:	607b      	str	r3, [r7, #4]
   1b5fa:	e001      	b.n	1b600 <WsfSetOsSpecificEvent+0x24>
		xReturn = pdTRUE;
   1b5fc:	2301      	movs	r3, #1
   1b5fe:	607b      	str	r3, [r7, #4]
	return xReturn;
   1b600:	687b      	ldr	r3, [r7, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   1b602:	2b01      	cmp	r3, #1
   1b604:	d118      	bne.n	1b638 <WsfSetOsSpecificEvent+0x5c>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   1b606:	2300      	movs	r3, #0
   1b608:	603b      	str	r3, [r7, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1b60a:	4b17      	ldr	r3, [pc, #92]	; (1b668 <WsfSetOsSpecificEvent+0x8c>)
   1b60c:	6819      	ldr	r1, [r3, #0]
   1b60e:	463b      	mov	r3, r7
   1b610:	2201      	movs	r2, #1
   1b612:	4816      	ldr	r0, [pc, #88]	; (1b66c <WsfSetOsSpecificEvent+0x90>)
   1b614:	f002 f94e 	bl	1d8b4 <xTimerPendFunctionCallFromISR>
   1b618:	60f8      	str	r0, [r7, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   1b61a:	68fb      	ldr	r3, [r7, #12]
   1b61c:	2b00      	cmp	r3, #0
   1b61e:	d01e      	beq.n	1b65e <WsfSetOsSpecificEvent+0x82>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1b620:	683b      	ldr	r3, [r7, #0]
   1b622:	2b00      	cmp	r3, #0
   1b624:	d01b      	beq.n	1b65e <WsfSetOsSpecificEvent+0x82>
   1b626:	4b12      	ldr	r3, [pc, #72]	; (1b670 <WsfSetOsSpecificEvent+0x94>)
   1b628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b62c:	601a      	str	r2, [r3, #0]
   1b62e:	f3bf 8f4f 	dsb	sy
   1b632:	f3bf 8f6f 	isb	sy
          }
      }

  }    
#endif
}
   1b636:	e012      	b.n	1b65e <WsfSetOsSpecificEvent+0x82>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   1b638:	4b0b      	ldr	r3, [pc, #44]	; (1b668 <WsfSetOsSpecificEvent+0x8c>)
   1b63a:	681b      	ldr	r3, [r3, #0]
   1b63c:	2101      	movs	r1, #1
   1b63e:	4618      	mov	r0, r3
   1b640:	f000 fa3e 	bl	1bac0 <xEventGroupSetBits>
   1b644:	4603      	mov	r3, r0
   1b646:	60fb      	str	r3, [r7, #12]
          if ( xResult != pdFAIL )
   1b648:	68fb      	ldr	r3, [r7, #12]
   1b64a:	2b00      	cmp	r3, #0
   1b64c:	d007      	beq.n	1b65e <WsfSetOsSpecificEvent+0x82>
              portYIELD();
   1b64e:	4b08      	ldr	r3, [pc, #32]	; (1b670 <WsfSetOsSpecificEvent+0x94>)
   1b650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b654:	601a      	str	r2, [r3, #0]
   1b656:	f3bf 8f4f 	dsb	sy
   1b65a:	f3bf 8f6f 	isb	sy
}
   1b65e:	bf00      	nop
   1b660:	3710      	adds	r7, #16
   1b662:	46bd      	mov	sp, r7
   1b664:	bd80      	pop	{r7, pc}
   1b666:	bf00      	nop
   1b668:	10005008 	.word	0x10005008
   1b66c:	0001bbaf 	.word	0x0001bbaf
   1b670:	e000ed04 	.word	0xe000ed04

0001b674 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   1b674:	b580      	push	{r7, lr}
   1b676:	b082      	sub	sp, #8
   1b678:	af00      	add	r7, sp, #0
   1b67a:	4603      	mov	r3, r0
   1b67c:	460a      	mov	r2, r1
   1b67e:	71fb      	strb	r3, [r7, #7]
   1b680:	4613      	mov	r3, r2
   1b682:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   1b684:	f7ff ff76 	bl	1b574 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1b688:	79fb      	ldrb	r3, [r7, #7]
   1b68a:	f003 030f 	and.w	r3, r3, #15
   1b68e:	79fa      	ldrb	r2, [r7, #7]
   1b690:	f002 020f 	and.w	r2, r2, #15
   1b694:	490e      	ldr	r1, [pc, #56]	; (1b6d0 <WsfSetEvent+0x5c>)
   1b696:	440a      	add	r2, r1
   1b698:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1b69c:	79ba      	ldrb	r2, [r7, #6]
   1b69e:	430a      	orrs	r2, r1
   1b6a0:	b2d1      	uxtb	r1, r2
   1b6a2:	4a0b      	ldr	r2, [pc, #44]	; (1b6d0 <WsfSetEvent+0x5c>)
   1b6a4:	4413      	add	r3, r2
   1b6a6:	460a      	mov	r2, r1
   1b6a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1b6ac:	4b08      	ldr	r3, [pc, #32]	; (1b6d0 <WsfSetEvent+0x5c>)
   1b6ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1b6b2:	f043 0304 	orr.w	r3, r3, #4
   1b6b6:	b2da      	uxtb	r2, r3
   1b6b8:	4b05      	ldr	r3, [pc, #20]	; (1b6d0 <WsfSetEvent+0x5c>)
   1b6ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1b6be:	f7ff ff6d 	bl	1b59c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1b6c2:	f7ff ff8b 	bl	1b5dc <WsfSetOsSpecificEvent>
}
   1b6c6:	bf00      	nop
   1b6c8:	3708      	adds	r7, #8
   1b6ca:	46bd      	mov	sp, r7
   1b6cc:	bd80      	pop	{r7, pc}
   1b6ce:	bf00      	nop
   1b6d0:	10009e78 	.word	0x10009e78

0001b6d4 <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   1b6d4:	b580      	push	{r7, lr}
   1b6d6:	b082      	sub	sp, #8
   1b6d8:	af00      	add	r7, sp, #0
   1b6da:	4603      	mov	r3, r0
   1b6dc:	460a      	mov	r2, r1
   1b6de:	71fb      	strb	r3, [r7, #7]
   1b6e0:	4613      	mov	r3, r2
   1b6e2:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   1b6e4:	f7ff ff46 	bl	1b574 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   1b6e8:	4b08      	ldr	r3, [pc, #32]	; (1b70c <WsfTaskSetReady+0x38>)
   1b6ea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1b6ee:	79bb      	ldrb	r3, [r7, #6]
   1b6f0:	4313      	orrs	r3, r2
   1b6f2:	b2da      	uxtb	r2, r3
   1b6f4:	4b05      	ldr	r3, [pc, #20]	; (1b70c <WsfTaskSetReady+0x38>)
   1b6f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1b6fa:	f7ff ff4f 	bl	1b59c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1b6fe:	f7ff ff6d 	bl	1b5dc <WsfSetOsSpecificEvent>
}
   1b702:	bf00      	nop
   1b704:	3708      	adds	r7, #8
   1b706:	46bd      	mov	sp, r7
   1b708:	bd80      	pop	{r7, pc}
   1b70a:	bf00      	nop
   1b70c:	10009e78 	.word	0x10009e78

0001b710 <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   1b710:	b480      	push	{r7}
   1b712:	b083      	sub	sp, #12
   1b714:	af00      	add	r7, sp, #0
   1b716:	4603      	mov	r3, r0
   1b718:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
   1b71a:	4b03      	ldr	r3, [pc, #12]	; (1b728 <WsfTaskMsgQueue+0x18>)
}
   1b71c:	4618      	mov	r0, r3
   1b71e:	370c      	adds	r7, #12
   1b720:	46bd      	mov	sp, r7
   1b722:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b726:	4770      	bx	lr
   1b728:	10009ea8 	.word	0x10009ea8

0001b72c <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   1b72c:	b480      	push	{r7}
   1b72e:	b085      	sub	sp, #20
   1b730:	af00      	add	r7, sp, #0
   1b732:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   1b734:	4b0a      	ldr	r3, [pc, #40]	; (1b760 <WsfOsSetNextHandler+0x34>)
   1b736:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   1b73a:	1c5a      	adds	r2, r3, #1
   1b73c:	b2d1      	uxtb	r1, r2
   1b73e:	4a08      	ldr	r2, [pc, #32]	; (1b760 <WsfOsSetNextHandler+0x34>)
   1b740:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   1b744:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   1b746:	7bfb      	ldrb	r3, [r7, #15]
   1b748:	4905      	ldr	r1, [pc, #20]	; (1b760 <WsfOsSetNextHandler+0x34>)
   1b74a:	687a      	ldr	r2, [r7, #4]
   1b74c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   1b750:	7bfb      	ldrb	r3, [r7, #15]
}
   1b752:	4618      	mov	r0, r3
   1b754:	3714      	adds	r7, #20
   1b756:	46bd      	mov	sp, r7
   1b758:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b75c:	4770      	bx	lr
   1b75e:	bf00      	nop
   1b760:	10009e78 	.word	0x10009e78

0001b764 <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
   1b764:	b480      	push	{r7}
   1b766:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
   1b768:	4b06      	ldr	r3, [pc, #24]	; (1b784 <wsfOsReadyToSleep+0x20>)
   1b76a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1b76e:	2b00      	cmp	r3, #0
   1b770:	bf0c      	ite	eq
   1b772:	2301      	moveq	r3, #1
   1b774:	2300      	movne	r3, #0
   1b776:	b2db      	uxtb	r3, r3
}
   1b778:	4618      	mov	r0, r3
   1b77a:	46bd      	mov	sp, r7
   1b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b780:	4770      	bx	lr
   1b782:	bf00      	nop
   1b784:	10009e78 	.word	0x10009e78

0001b788 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   1b788:	b580      	push	{r7, lr}
   1b78a:	b086      	sub	sp, #24
   1b78c:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   1b78e:	4b3f      	ldr	r3, [pc, #252]	; (1b88c <wsfOsDispatcher+0x104>)
   1b790:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
   1b792:	e072      	b.n	1b87a <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   1b794:	f7ff feee 	bl	1b574 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   1b798:	693b      	ldr	r3, [r7, #16]
   1b79a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1b79e:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
   1b7a0:	693b      	ldr	r3, [r7, #16]
   1b7a2:	2200      	movs	r2, #0
   1b7a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   1b7a8:	f7ff fef8 	bl	1b59c <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   1b7ac:	7bfb      	ldrb	r3, [r7, #15]
   1b7ae:	f003 0301 	and.w	r3, r3, #1
   1b7b2:	2b00      	cmp	r3, #0
   1b7b4:	d016      	beq.n	1b7e4 <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1b7b6:	e00a      	b.n	1b7ce <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   1b7b8:	78bb      	ldrb	r3, [r7, #2]
   1b7ba:	461a      	mov	r2, r3
   1b7bc:	693b      	ldr	r3, [r7, #16]
   1b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b7c2:	68b9      	ldr	r1, [r7, #8]
   1b7c4:	2000      	movs	r0, #0
   1b7c6:	4798      	blx	r3
        WsfMsgFree(pMsg);
   1b7c8:	68b8      	ldr	r0, [r7, #8]
   1b7ca:	f7ff f8c7 	bl	1a95c <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1b7ce:	693b      	ldr	r3, [r7, #16]
   1b7d0:	3330      	adds	r3, #48	; 0x30
   1b7d2:	1cba      	adds	r2, r7, #2
   1b7d4:	4611      	mov	r1, r2
   1b7d6:	4618      	mov	r0, r3
   1b7d8:	f7ff f8fa 	bl	1a9d0 <WsfMsgDeq>
   1b7dc:	60b8      	str	r0, [r7, #8]
   1b7de:	68bb      	ldr	r3, [r7, #8]
   1b7e0:	2b00      	cmp	r3, #0
   1b7e2:	d1e9      	bne.n	1b7b8 <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   1b7e4:	7bfb      	ldrb	r3, [r7, #15]
   1b7e6:	f003 0302 	and.w	r3, r3, #2
   1b7ea:	2b00      	cmp	r3, #0
   1b7ec:	d012      	beq.n	1b814 <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1b7ee:	e00a      	b.n	1b806 <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   1b7f0:	687b      	ldr	r3, [r7, #4]
   1b7f2:	7a1b      	ldrb	r3, [r3, #8]
   1b7f4:	461a      	mov	r2, r3
   1b7f6:	693b      	ldr	r3, [r7, #16]
   1b7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b7fc:	687a      	ldr	r2, [r7, #4]
   1b7fe:	320a      	adds	r2, #10
   1b800:	4611      	mov	r1, r2
   1b802:	2000      	movs	r0, #0
   1b804:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1b806:	2000      	movs	r0, #0
   1b808:	f7ff face 	bl	1ada8 <WsfTimerServiceExpired>
   1b80c:	6078      	str	r0, [r7, #4]
   1b80e:	687b      	ldr	r3, [r7, #4]
   1b810:	2b00      	cmp	r3, #0
   1b812:	d1ed      	bne.n	1b7f0 <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   1b814:	7bfb      	ldrb	r3, [r7, #15]
   1b816:	f003 0304 	and.w	r3, r3, #4
   1b81a:	2b00      	cmp	r3, #0
   1b81c:	d02d      	beq.n	1b87a <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   1b81e:	2300      	movs	r3, #0
   1b820:	75fb      	strb	r3, [r7, #23]
   1b822:	e027      	b.n	1b874 <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   1b824:	7dfb      	ldrb	r3, [r7, #23]
   1b826:	693a      	ldr	r2, [r7, #16]
   1b828:	4413      	add	r3, r2
   1b82a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b82e:	2b00      	cmp	r3, #0
   1b830:	d01d      	beq.n	1b86e <wsfOsDispatcher+0xe6>
   1b832:	7dfa      	ldrb	r2, [r7, #23]
   1b834:	693b      	ldr	r3, [r7, #16]
   1b836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b83a:	2b00      	cmp	r3, #0
   1b83c:	d017      	beq.n	1b86e <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
   1b83e:	f7ff fe99 	bl	1b574 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   1b842:	7dfb      	ldrb	r3, [r7, #23]
   1b844:	693a      	ldr	r2, [r7, #16]
   1b846:	4413      	add	r3, r2
   1b848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b84c:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
   1b84e:	7dfb      	ldrb	r3, [r7, #23]
   1b850:	693a      	ldr	r2, [r7, #16]
   1b852:	4413      	add	r3, r2
   1b854:	2200      	movs	r2, #0
   1b856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   1b85a:	f7ff fe9f 	bl	1b59c <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   1b85e:	7dfa      	ldrb	r2, [r7, #23]
   1b860:	693b      	ldr	r3, [r7, #16]
   1b862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b866:	78fa      	ldrb	r2, [r7, #3]
   1b868:	2100      	movs	r1, #0
   1b86a:	4610      	mov	r0, r2
   1b86c:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   1b86e:	7dfb      	ldrb	r3, [r7, #23]
   1b870:	3301      	adds	r3, #1
   1b872:	75fb      	strb	r3, [r7, #23]
   1b874:	7dfb      	ldrb	r3, [r7, #23]
   1b876:	2b08      	cmp	r3, #8
   1b878:	d9d4      	bls.n	1b824 <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
   1b87a:	693b      	ldr	r3, [r7, #16]
   1b87c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1b880:	2b00      	cmp	r3, #0
   1b882:	d187      	bne.n	1b794 <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
   1b884:	bf00      	nop
   1b886:	3718      	adds	r7, #24
   1b888:	46bd      	mov	sp, r7
   1b88a:	bd80      	pop	{r7, pc}
   1b88c:	10009e78 	.word	0x10009e78

0001b890 <wsfOsSetEventObject>:


void wsfOsSetEventObject(void *event_object)
{
   1b890:	b480      	push	{r7}
   1b892:	b083      	sub	sp, #12
   1b894:	af00      	add	r7, sp, #0
   1b896:	6078      	str	r0, [r7, #4]
  #ifdef AM_FREERTOS
  xRadioTaskEventObject = (EventGroupHandle_t)event_object;
   1b898:	4a04      	ldr	r2, [pc, #16]	; (1b8ac <wsfOsSetEventObject+0x1c>)
   1b89a:	687b      	ldr	r3, [r7, #4]
   1b89c:	6013      	str	r3, [r2, #0]
  #endif
}
   1b89e:	bf00      	nop
   1b8a0:	370c      	adds	r7, #12
   1b8a2:	46bd      	mov	sp, r7
   1b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b8a8:	4770      	bx	lr
   1b8aa:	bf00      	nop
   1b8ac:	10005008 	.word	0x10005008

0001b8b0 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   1b8b0:	b40f      	push	{r0, r1, r2, r3}
   1b8b2:	b580      	push	{r7, lr}
   1b8b4:	b0c2      	sub	sp, #264	; 0x108
   1b8b6:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
   1b8b8:	f507 728a 	add.w	r2, r7, #276	; 0x114
   1b8bc:	463b      	mov	r3, r7
   1b8be:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   1b8c0:	463b      	mov	r3, r7
   1b8c2:	1d38      	adds	r0, r7, #4
   1b8c4:	681a      	ldr	r2, [r3, #0]
   1b8c6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
   1b8ca:	f005 fb61 	bl	20f90 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   1b8ce:	1d3b      	adds	r3, r7, #4
   1b8d0:	4618      	mov	r0, r3
   1b8d2:	f005 fe69 	bl	215a8 <am_util_stdio_printf>
   1b8d6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   1b8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   1b8de:	2bff      	cmp	r3, #255	; 0xff
   1b8e0:	d903      	bls.n	1b8ea <WsfTrace+0x3a>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   1b8e2:	2183      	movs	r1, #131	; 0x83
   1b8e4:	4806      	ldr	r0, [pc, #24]	; (1b900 <WsfTrace+0x50>)
   1b8e6:	f7ff fe31 	bl	1b54c <WsfAssert>
  am_util_debug_printf("\n");
   1b8ea:	4806      	ldr	r0, [pc, #24]	; (1b904 <WsfTrace+0x54>)
   1b8ec:	f005 fe5c 	bl	215a8 <am_util_stdio_printf>
}
   1b8f0:	bf00      	nop
   1b8f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
   1b8f6:	46bd      	mov	sp, r7
   1b8f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b8fc:	b004      	add	sp, #16
   1b8fe:	4770      	bx	lr
   1b900:	00025a1c 	.word	0x00025a1c
   1b904:	00025a14 	.word	0x00025a14

0001b908 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1b908:	b580      	push	{r7, lr}
   1b90a:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcGapGroup);
   1b90c:	4803      	ldr	r0, [pc, #12]	; (1b91c <SvcCoreAddGroup+0x14>)
   1b90e:	f7f2 f9a1 	bl	dc54 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   1b912:	4803      	ldr	r0, [pc, #12]	; (1b920 <SvcCoreAddGroup+0x18>)
   1b914:	f7f2 f99e 	bl	dc54 <AttsAddGroup>
}
   1b918:	bf00      	nop
   1b91a:	bd80      	pop	{r7, pc}
   1b91c:	10002c44 	.word	0x10002c44
   1b920:	10002c58 	.word	0x10002c58

0001b924 <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   1b924:	b480      	push	{r7}
   1b926:	b083      	sub	sp, #12
   1b928:	af00      	add	r7, sp, #0
   1b92a:	4603      	mov	r3, r0
   1b92c:	71fb      	strb	r3, [r7, #7]
  gapValCar[0] = value;
   1b92e:	4a04      	ldr	r2, [pc, #16]	; (1b940 <SvcCoreGapCentAddrResUpdate+0x1c>)
   1b930:	79fb      	ldrb	r3, [r7, #7]
   1b932:	7013      	strb	r3, [r2, #0]
}
   1b934:	bf00      	nop
   1b936:	370c      	adds	r7, #12
   1b938:	46bd      	mov	sp, r7
   1b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b93e:	4770      	bx	lr
   1b940:	10005010 	.word	0x10005010

0001b944 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1b944:	b580      	push	{r7, lr}
   1b946:	b082      	sub	sp, #8
   1b948:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   1b94a:	2018      	movs	r0, #24
   1b94c:	f005 fee8 	bl	21720 <pvPortMalloc>
   1b950:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
   1b952:	687b      	ldr	r3, [r7, #4]
   1b954:	2b00      	cmp	r3, #0
   1b956:	d007      	beq.n	1b968 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
   1b958:	687b      	ldr	r3, [r7, #4]
   1b95a:	2200      	movs	r2, #0
   1b95c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1b95e:	687b      	ldr	r3, [r7, #4]
   1b960:	3304      	adds	r3, #4
   1b962:	4618      	mov	r0, r3
   1b964:	f000 f952 	bl	1bc0c <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   1b968:	687b      	ldr	r3, [r7, #4]
	}
   1b96a:	4618      	mov	r0, r3
   1b96c:	3708      	adds	r7, #8
   1b96e:	46bd      	mov	sp, r7
   1b970:	bd80      	pop	{r7, pc}
	...

0001b974 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   1b974:	b580      	push	{r7, lr}
   1b976:	b08c      	sub	sp, #48	; 0x30
   1b978:	af00      	add	r7, sp, #0
   1b97a:	60f8      	str	r0, [r7, #12]
   1b97c:	60b9      	str	r1, [r7, #8]
   1b97e:	607a      	str	r2, [r7, #4]
   1b980:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
   1b982:	68fb      	ldr	r3, [r7, #12]
   1b984:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   1b986:	2300      	movs	r3, #0
   1b988:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   1b98a:	2300      	movs	r3, #0
   1b98c:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1b98e:	68fb      	ldr	r3, [r7, #12]
   1b990:	2b00      	cmp	r3, #0
   1b992:	d100      	bne.n	1b996 <xEventGroupWaitBits+0x22>
   1b994:	e7fe      	b.n	1b994 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1b996:	68bb      	ldr	r3, [r7, #8]
   1b998:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1b99c:	2b00      	cmp	r3, #0
   1b99e:	d000      	beq.n	1b9a2 <xEventGroupWaitBits+0x2e>
   1b9a0:	e7fe      	b.n	1b9a0 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
   1b9a2:	68bb      	ldr	r3, [r7, #8]
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	d100      	bne.n	1b9aa <xEventGroupWaitBits+0x36>
   1b9a8:	e7fe      	b.n	1b9a8 <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b9aa:	f001 fc17 	bl	1d1dc <xTaskGetSchedulerState>
   1b9ae:	4603      	mov	r3, r0
   1b9b0:	2b00      	cmp	r3, #0
   1b9b2:	d102      	bne.n	1b9ba <xEventGroupWaitBits+0x46>
   1b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b9b6:	2b00      	cmp	r3, #0
   1b9b8:	d101      	bne.n	1b9be <xEventGroupWaitBits+0x4a>
   1b9ba:	2301      	movs	r3, #1
   1b9bc:	e000      	b.n	1b9c0 <xEventGroupWaitBits+0x4c>
   1b9be:	2300      	movs	r3, #0
   1b9c0:	2b00      	cmp	r3, #0
   1b9c2:	d100      	bne.n	1b9c6 <xEventGroupWaitBits+0x52>
   1b9c4:	e7fe      	b.n	1b9c4 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
   1b9c6:	f000 ffa5 	bl	1c914 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b9cc:	681b      	ldr	r3, [r3, #0]
   1b9ce:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   1b9d0:	683a      	ldr	r2, [r7, #0]
   1b9d2:	68b9      	ldr	r1, [r7, #8]
   1b9d4:	69f8      	ldr	r0, [r7, #28]
   1b9d6:	f000 f8f7 	bl	1bbc8 <prvTestWaitCondition>
   1b9da:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
   1b9dc:	69bb      	ldr	r3, [r7, #24]
   1b9de:	2b00      	cmp	r3, #0
   1b9e0:	d00e      	beq.n	1ba00 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   1b9e2:	69fb      	ldr	r3, [r7, #28]
   1b9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   1b9e6:	2300      	movs	r3, #0
   1b9e8:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   1b9ea:	687b      	ldr	r3, [r7, #4]
   1b9ec:	2b00      	cmp	r3, #0
   1b9ee:	d028      	beq.n	1ba42 <xEventGroupWaitBits+0xce>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b9f2:	681a      	ldr	r2, [r3, #0]
   1b9f4:	68bb      	ldr	r3, [r7, #8]
   1b9f6:	43db      	mvns	r3, r3
   1b9f8:	401a      	ands	r2, r3
   1b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b9fc:	601a      	str	r2, [r3, #0]
   1b9fe:	e020      	b.n	1ba42 <xEventGroupWaitBits+0xce>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   1ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ba02:	2b00      	cmp	r3, #0
   1ba04:	d104      	bne.n	1ba10 <xEventGroupWaitBits+0x9c>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   1ba06:	69fb      	ldr	r3, [r7, #28]
   1ba08:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   1ba0a:	2301      	movs	r3, #1
   1ba0c:	623b      	str	r3, [r7, #32]
   1ba0e:	e018      	b.n	1ba42 <xEventGroupWaitBits+0xce>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   1ba10:	687b      	ldr	r3, [r7, #4]
   1ba12:	2b00      	cmp	r3, #0
   1ba14:	d003      	beq.n	1ba1e <xEventGroupWaitBits+0xaa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   1ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1ba1c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   1ba1e:	683b      	ldr	r3, [r7, #0]
   1ba20:	2b00      	cmp	r3, #0
   1ba22:	d003      	beq.n	1ba2c <xEventGroupWaitBits+0xb8>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   1ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1ba2a:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba2e:	1d18      	adds	r0, r3, #4
   1ba30:	68ba      	ldr	r2, [r7, #8]
   1ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba34:	4313      	orrs	r3, r2
   1ba36:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ba38:	4619      	mov	r1, r3
   1ba3a:	f001 f9a5 	bl	1cd88 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   1ba3e:	2300      	movs	r3, #0
   1ba40:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   1ba42:	f000 ffad 	bl	1c9a0 <xTaskResumeAll>
   1ba46:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   1ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ba4a:	2b00      	cmp	r3, #0
   1ba4c:	d031      	beq.n	1bab2 <xEventGroupWaitBits+0x13e>
	{
		if( xAlreadyYielded == pdFALSE )
   1ba4e:	697b      	ldr	r3, [r7, #20]
   1ba50:	2b00      	cmp	r3, #0
   1ba52:	d107      	bne.n	1ba64 <xEventGroupWaitBits+0xf0>
		{
			portYIELD_WITHIN_API();
   1ba54:	4b19      	ldr	r3, [pc, #100]	; (1babc <xEventGroupWaitBits+0x148>)
   1ba56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ba5a:	601a      	str	r2, [r3, #0]
   1ba5c:	f3bf 8f4f 	dsb	sy
   1ba60:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   1ba64:	f001 fbd8 	bl	1d218 <uxTaskResetEventItemValue>
   1ba68:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d11a      	bne.n	1baaa <xEventGroupWaitBits+0x136>
		{
			taskENTER_CRITICAL();
   1ba74:	f7fd f948 	bl	18d08 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   1ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba7a:	681b      	ldr	r3, [r3, #0]
   1ba7c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   1ba7e:	683a      	ldr	r2, [r7, #0]
   1ba80:	68b9      	ldr	r1, [r7, #8]
   1ba82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ba84:	f000 f8a0 	bl	1bbc8 <prvTestWaitCondition>
   1ba88:	4603      	mov	r3, r0
   1ba8a:	2b00      	cmp	r3, #0
   1ba8c:	d009      	beq.n	1baa2 <xEventGroupWaitBits+0x12e>
				{
					if( xClearOnExit != pdFALSE )
   1ba8e:	687b      	ldr	r3, [r7, #4]
   1ba90:	2b00      	cmp	r3, #0
   1ba92:	d006      	beq.n	1baa2 <xEventGroupWaitBits+0x12e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba96:	681a      	ldr	r2, [r3, #0]
   1ba98:	68bb      	ldr	r3, [r7, #8]
   1ba9a:	43db      	mvns	r3, r3
   1ba9c:	401a      	ands	r2, r3
   1ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1baa0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   1baa2:	2301      	movs	r3, #1
   1baa4:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
   1baa6:	f7fd f955 	bl	18d54 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1baac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   1bab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1bab4:	4618      	mov	r0, r3
   1bab6:	3730      	adds	r7, #48	; 0x30
   1bab8:	46bd      	mov	sp, r7
   1baba:	bd80      	pop	{r7, pc}
   1babc:	e000ed04 	.word	0xe000ed04

0001bac0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   1bac0:	b580      	push	{r7, lr}
   1bac2:	b08c      	sub	sp, #48	; 0x30
   1bac4:	af00      	add	r7, sp, #0
   1bac6:	6078      	str	r0, [r7, #4]
   1bac8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   1baca:	2300      	movs	r3, #0
   1bacc:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   1bace:	687b      	ldr	r3, [r7, #4]
   1bad0:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
   1bad2:	2300      	movs	r3, #0
   1bad4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   1bad6:	687b      	ldr	r3, [r7, #4]
   1bad8:	2b00      	cmp	r3, #0
   1bada:	d100      	bne.n	1bade <xEventGroupSetBits+0x1e>
   1badc:	e7fe      	b.n	1badc <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1bade:	683b      	ldr	r3, [r7, #0]
   1bae0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1bae4:	2b00      	cmp	r3, #0
   1bae6:	d000      	beq.n	1baea <xEventGroupSetBits+0x2a>
   1bae8:	e7fe      	b.n	1bae8 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   1baea:	6a3b      	ldr	r3, [r7, #32]
   1baec:	3304      	adds	r3, #4
   1baee:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1baf0:	69fb      	ldr	r3, [r7, #28]
   1baf2:	3308      	adds	r3, #8
   1baf4:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
   1baf6:	f000 ff0d 	bl	1c914 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   1bafa:	69fb      	ldr	r3, [r7, #28]
   1bafc:	68db      	ldr	r3, [r3, #12]
   1bafe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   1bb00:	6a3b      	ldr	r3, [r7, #32]
   1bb02:	681a      	ldr	r2, [r3, #0]
   1bb04:	683b      	ldr	r3, [r7, #0]
   1bb06:	431a      	orrs	r2, r3
   1bb08:	6a3b      	ldr	r3, [r7, #32]
   1bb0a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   1bb0c:	e03c      	b.n	1bb88 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
   1bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bb10:	685b      	ldr	r3, [r3, #4]
   1bb12:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bb16:	681b      	ldr	r3, [r3, #0]
   1bb18:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
   1bb1a:	2300      	movs	r3, #0
   1bb1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   1bb1e:	693b      	ldr	r3, [r7, #16]
   1bb20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1bb24:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1bb26:	693b      	ldr	r3, [r7, #16]
   1bb28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1bb2c:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1bb2e:	68fb      	ldr	r3, [r7, #12]
   1bb30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   1bb34:	2b00      	cmp	r3, #0
   1bb36:	d108      	bne.n	1bb4a <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1bb38:	6a3b      	ldr	r3, [r7, #32]
   1bb3a:	681a      	ldr	r2, [r3, #0]
   1bb3c:	693b      	ldr	r3, [r7, #16]
   1bb3e:	4013      	ands	r3, r2
   1bb40:	2b00      	cmp	r3, #0
   1bb42:	d00b      	beq.n	1bb5c <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
   1bb44:	2301      	movs	r3, #1
   1bb46:	627b      	str	r3, [r7, #36]	; 0x24
   1bb48:	e008      	b.n	1bb5c <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1bb4a:	6a3b      	ldr	r3, [r7, #32]
   1bb4c:	681a      	ldr	r2, [r3, #0]
   1bb4e:	693b      	ldr	r3, [r7, #16]
   1bb50:	401a      	ands	r2, r3
   1bb52:	693b      	ldr	r3, [r7, #16]
   1bb54:	429a      	cmp	r2, r3
   1bb56:	d101      	bne.n	1bb5c <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   1bb58:	2301      	movs	r3, #1
   1bb5a:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   1bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb5e:	2b00      	cmp	r3, #0
   1bb60:	d010      	beq.n	1bb84 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1bb62:	68fb      	ldr	r3, [r7, #12]
   1bb64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   1bb68:	2b00      	cmp	r3, #0
   1bb6a:	d003      	beq.n	1bb74 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   1bb6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bb6e:	693b      	ldr	r3, [r7, #16]
   1bb70:	4313      	orrs	r3, r2
   1bb72:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1bb74:	6a3b      	ldr	r3, [r7, #32]
   1bb76:	681b      	ldr	r3, [r3, #0]
   1bb78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1bb7c:	4619      	mov	r1, r3
   1bb7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1bb80:	f001 f9a8 	bl	1ced4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   1bb84:	697b      	ldr	r3, [r7, #20]
   1bb86:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   1bb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bb8a:	69bb      	ldr	r3, [r7, #24]
   1bb8c:	429a      	cmp	r2, r3
   1bb8e:	d1be      	bne.n	1bb0e <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1bb90:	6a3b      	ldr	r3, [r7, #32]
   1bb92:	681a      	ldr	r2, [r3, #0]
   1bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb96:	43db      	mvns	r3, r3
   1bb98:	401a      	ands	r2, r3
   1bb9a:	6a3b      	ldr	r3, [r7, #32]
   1bb9c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   1bb9e:	f000 feff 	bl	1c9a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   1bba2:	6a3b      	ldr	r3, [r7, #32]
   1bba4:	681b      	ldr	r3, [r3, #0]
}
   1bba6:	4618      	mov	r0, r3
   1bba8:	3730      	adds	r7, #48	; 0x30
   1bbaa:	46bd      	mov	sp, r7
   1bbac:	bd80      	pop	{r7, pc}

0001bbae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   1bbae:	b580      	push	{r7, lr}
   1bbb0:	b082      	sub	sp, #8
   1bbb2:	af00      	add	r7, sp, #0
   1bbb4:	6078      	str	r0, [r7, #4]
   1bbb6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   1bbb8:	6839      	ldr	r1, [r7, #0]
   1bbba:	6878      	ldr	r0, [r7, #4]
   1bbbc:	f7ff ff80 	bl	1bac0 <xEventGroupSetBits>
}
   1bbc0:	bf00      	nop
   1bbc2:	3708      	adds	r7, #8
   1bbc4:	46bd      	mov	sp, r7
   1bbc6:	bd80      	pop	{r7, pc}

0001bbc8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   1bbc8:	b480      	push	{r7}
   1bbca:	b087      	sub	sp, #28
   1bbcc:	af00      	add	r7, sp, #0
   1bbce:	60f8      	str	r0, [r7, #12]
   1bbd0:	60b9      	str	r1, [r7, #8]
   1bbd2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   1bbd4:	2300      	movs	r3, #0
   1bbd6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
   1bbd8:	687b      	ldr	r3, [r7, #4]
   1bbda:	2b00      	cmp	r3, #0
   1bbdc:	d107      	bne.n	1bbee <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1bbde:	68fa      	ldr	r2, [r7, #12]
   1bbe0:	68bb      	ldr	r3, [r7, #8]
   1bbe2:	4013      	ands	r3, r2
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d00a      	beq.n	1bbfe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1bbe8:	2301      	movs	r3, #1
   1bbea:	617b      	str	r3, [r7, #20]
   1bbec:	e007      	b.n	1bbfe <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1bbee:	68fa      	ldr	r2, [r7, #12]
   1bbf0:	68bb      	ldr	r3, [r7, #8]
   1bbf2:	401a      	ands	r2, r3
   1bbf4:	68bb      	ldr	r3, [r7, #8]
   1bbf6:	429a      	cmp	r2, r3
   1bbf8:	d101      	bne.n	1bbfe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1bbfa:	2301      	movs	r3, #1
   1bbfc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   1bbfe:	697b      	ldr	r3, [r7, #20]
}
   1bc00:	4618      	mov	r0, r3
   1bc02:	371c      	adds	r7, #28
   1bc04:	46bd      	mov	sp, r7
   1bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc0a:	4770      	bx	lr

0001bc0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1bc0c:	b480      	push	{r7}
   1bc0e:	b083      	sub	sp, #12
   1bc10:	af00      	add	r7, sp, #0
   1bc12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1bc14:	687b      	ldr	r3, [r7, #4]
   1bc16:	f103 0208 	add.w	r2, r3, #8
   1bc1a:	687b      	ldr	r3, [r7, #4]
   1bc1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1bc1e:	687b      	ldr	r3, [r7, #4]
   1bc20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bc24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1bc26:	687b      	ldr	r3, [r7, #4]
   1bc28:	f103 0208 	add.w	r2, r3, #8
   1bc2c:	687b      	ldr	r3, [r7, #4]
   1bc2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1bc30:	687b      	ldr	r3, [r7, #4]
   1bc32:	f103 0208 	add.w	r2, r3, #8
   1bc36:	687b      	ldr	r3, [r7, #4]
   1bc38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1bc3a:	687b      	ldr	r3, [r7, #4]
   1bc3c:	2200      	movs	r2, #0
   1bc3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1bc40:	bf00      	nop
   1bc42:	370c      	adds	r7, #12
   1bc44:	46bd      	mov	sp, r7
   1bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc4a:	4770      	bx	lr

0001bc4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1bc4c:	b480      	push	{r7}
   1bc4e:	b083      	sub	sp, #12
   1bc50:	af00      	add	r7, sp, #0
   1bc52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   1bc54:	687b      	ldr	r3, [r7, #4]
   1bc56:	2200      	movs	r2, #0
   1bc58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1bc5a:	bf00      	nop
   1bc5c:	370c      	adds	r7, #12
   1bc5e:	46bd      	mov	sp, r7
   1bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc64:	4770      	bx	lr

0001bc66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1bc66:	b480      	push	{r7}
   1bc68:	b085      	sub	sp, #20
   1bc6a:	af00      	add	r7, sp, #0
   1bc6c:	6078      	str	r0, [r7, #4]
   1bc6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1bc70:	687b      	ldr	r3, [r7, #4]
   1bc72:	685b      	ldr	r3, [r3, #4]
   1bc74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1bc76:	683b      	ldr	r3, [r7, #0]
   1bc78:	68fa      	ldr	r2, [r7, #12]
   1bc7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1bc7c:	68fb      	ldr	r3, [r7, #12]
   1bc7e:	689a      	ldr	r2, [r3, #8]
   1bc80:	683b      	ldr	r3, [r7, #0]
   1bc82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1bc84:	68fb      	ldr	r3, [r7, #12]
   1bc86:	689b      	ldr	r3, [r3, #8]
   1bc88:	683a      	ldr	r2, [r7, #0]
   1bc8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1bc8c:	68fb      	ldr	r3, [r7, #12]
   1bc8e:	683a      	ldr	r2, [r7, #0]
   1bc90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   1bc92:	683b      	ldr	r3, [r7, #0]
   1bc94:	687a      	ldr	r2, [r7, #4]
   1bc96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1bc98:	687b      	ldr	r3, [r7, #4]
   1bc9a:	681b      	ldr	r3, [r3, #0]
   1bc9c:	1c5a      	adds	r2, r3, #1
   1bc9e:	687b      	ldr	r3, [r7, #4]
   1bca0:	601a      	str	r2, [r3, #0]
}
   1bca2:	bf00      	nop
   1bca4:	3714      	adds	r7, #20
   1bca6:	46bd      	mov	sp, r7
   1bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bcac:	4770      	bx	lr

0001bcae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1bcae:	b480      	push	{r7}
   1bcb0:	b085      	sub	sp, #20
   1bcb2:	af00      	add	r7, sp, #0
   1bcb4:	6078      	str	r0, [r7, #4]
   1bcb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1bcb8:	683b      	ldr	r3, [r7, #0]
   1bcba:	681b      	ldr	r3, [r3, #0]
   1bcbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1bcbe:	68bb      	ldr	r3, [r7, #8]
   1bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bcc4:	d103      	bne.n	1bcce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1bcc6:	687b      	ldr	r3, [r7, #4]
   1bcc8:	691b      	ldr	r3, [r3, #16]
   1bcca:	60fb      	str	r3, [r7, #12]
   1bccc:	e00c      	b.n	1bce8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   1bcce:	687b      	ldr	r3, [r7, #4]
   1bcd0:	3308      	adds	r3, #8
   1bcd2:	60fb      	str	r3, [r7, #12]
   1bcd4:	e002      	b.n	1bcdc <vListInsert+0x2e>
   1bcd6:	68fb      	ldr	r3, [r7, #12]
   1bcd8:	685b      	ldr	r3, [r3, #4]
   1bcda:	60fb      	str	r3, [r7, #12]
   1bcdc:	68fb      	ldr	r3, [r7, #12]
   1bcde:	685b      	ldr	r3, [r3, #4]
   1bce0:	681a      	ldr	r2, [r3, #0]
   1bce2:	68bb      	ldr	r3, [r7, #8]
   1bce4:	429a      	cmp	r2, r3
   1bce6:	d9f6      	bls.n	1bcd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1bce8:	68fb      	ldr	r3, [r7, #12]
   1bcea:	685a      	ldr	r2, [r3, #4]
   1bcec:	683b      	ldr	r3, [r7, #0]
   1bcee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1bcf0:	683b      	ldr	r3, [r7, #0]
   1bcf2:	685b      	ldr	r3, [r3, #4]
   1bcf4:	683a      	ldr	r2, [r7, #0]
   1bcf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1bcf8:	683b      	ldr	r3, [r7, #0]
   1bcfa:	68fa      	ldr	r2, [r7, #12]
   1bcfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1bcfe:	68fb      	ldr	r3, [r7, #12]
   1bd00:	683a      	ldr	r2, [r7, #0]
   1bd02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   1bd04:	683b      	ldr	r3, [r7, #0]
   1bd06:	687a      	ldr	r2, [r7, #4]
   1bd08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1bd0a:	687b      	ldr	r3, [r7, #4]
   1bd0c:	681b      	ldr	r3, [r3, #0]
   1bd0e:	1c5a      	adds	r2, r3, #1
   1bd10:	687b      	ldr	r3, [r7, #4]
   1bd12:	601a      	str	r2, [r3, #0]
}
   1bd14:	bf00      	nop
   1bd16:	3714      	adds	r7, #20
   1bd18:	46bd      	mov	sp, r7
   1bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd1e:	4770      	bx	lr

0001bd20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1bd20:	b480      	push	{r7}
   1bd22:	b085      	sub	sp, #20
   1bd24:	af00      	add	r7, sp, #0
   1bd26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   1bd28:	687b      	ldr	r3, [r7, #4]
   1bd2a:	691b      	ldr	r3, [r3, #16]
   1bd2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1bd2e:	687b      	ldr	r3, [r7, #4]
   1bd30:	685b      	ldr	r3, [r3, #4]
   1bd32:	687a      	ldr	r2, [r7, #4]
   1bd34:	6892      	ldr	r2, [r2, #8]
   1bd36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1bd38:	687b      	ldr	r3, [r7, #4]
   1bd3a:	689b      	ldr	r3, [r3, #8]
   1bd3c:	687a      	ldr	r2, [r7, #4]
   1bd3e:	6852      	ldr	r2, [r2, #4]
   1bd40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1bd42:	68fb      	ldr	r3, [r7, #12]
   1bd44:	685a      	ldr	r2, [r3, #4]
   1bd46:	687b      	ldr	r3, [r7, #4]
   1bd48:	429a      	cmp	r2, r3
   1bd4a:	d103      	bne.n	1bd54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1bd4c:	687b      	ldr	r3, [r7, #4]
   1bd4e:	689a      	ldr	r2, [r3, #8]
   1bd50:	68fb      	ldr	r3, [r7, #12]
   1bd52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   1bd54:	687b      	ldr	r3, [r7, #4]
   1bd56:	2200      	movs	r2, #0
   1bd58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1bd5a:	68fb      	ldr	r3, [r7, #12]
   1bd5c:	681b      	ldr	r3, [r3, #0]
   1bd5e:	1e5a      	subs	r2, r3, #1
   1bd60:	68fb      	ldr	r3, [r7, #12]
   1bd62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1bd64:	68fb      	ldr	r3, [r7, #12]
   1bd66:	681b      	ldr	r3, [r3, #0]
}
   1bd68:	4618      	mov	r0, r3
   1bd6a:	3714      	adds	r7, #20
   1bd6c:	46bd      	mov	sp, r7
   1bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd72:	4770      	bx	lr

0001bd74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1bd74:	b580      	push	{r7, lr}
   1bd76:	b084      	sub	sp, #16
   1bd78:	af00      	add	r7, sp, #0
   1bd7a:	6078      	str	r0, [r7, #4]
   1bd7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
   1bd7e:	687b      	ldr	r3, [r7, #4]
   1bd80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1bd82:	68fb      	ldr	r3, [r7, #12]
   1bd84:	2b00      	cmp	r3, #0
   1bd86:	d100      	bne.n	1bd8a <xQueueGenericReset+0x16>
   1bd88:	e7fe      	b.n	1bd88 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
   1bd8a:	f7fc ffbd 	bl	18d08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1bd8e:	68fb      	ldr	r3, [r7, #12]
   1bd90:	681a      	ldr	r2, [r3, #0]
   1bd92:	68fb      	ldr	r3, [r7, #12]
   1bd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bd96:	68f9      	ldr	r1, [r7, #12]
   1bd98:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1bd9a:	fb01 f303 	mul.w	r3, r1, r3
   1bd9e:	441a      	add	r2, r3
   1bda0:	68fb      	ldr	r3, [r7, #12]
   1bda2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1bda4:	68fb      	ldr	r3, [r7, #12]
   1bda6:	2200      	movs	r2, #0
   1bda8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1bdaa:	68fb      	ldr	r3, [r7, #12]
   1bdac:	681a      	ldr	r2, [r3, #0]
   1bdae:	68fb      	ldr	r3, [r7, #12]
   1bdb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1bdb2:	68fb      	ldr	r3, [r7, #12]
   1bdb4:	681a      	ldr	r2, [r3, #0]
   1bdb6:	68fb      	ldr	r3, [r7, #12]
   1bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bdba:	3b01      	subs	r3, #1
   1bdbc:	68f9      	ldr	r1, [r7, #12]
   1bdbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1bdc0:	fb01 f303 	mul.w	r3, r1, r3
   1bdc4:	441a      	add	r2, r3
   1bdc6:	68fb      	ldr	r3, [r7, #12]
   1bdc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1bdca:	68fb      	ldr	r3, [r7, #12]
   1bdcc:	22ff      	movs	r2, #255	; 0xff
   1bdce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   1bdd2:	68fb      	ldr	r3, [r7, #12]
   1bdd4:	22ff      	movs	r2, #255	; 0xff
   1bdd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   1bdda:	683b      	ldr	r3, [r7, #0]
   1bddc:	2b00      	cmp	r3, #0
   1bdde:	d114      	bne.n	1be0a <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bde0:	68fb      	ldr	r3, [r7, #12]
   1bde2:	691b      	ldr	r3, [r3, #16]
   1bde4:	2b00      	cmp	r3, #0
   1bde6:	d01a      	beq.n	1be1e <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bde8:	68fb      	ldr	r3, [r7, #12]
   1bdea:	3310      	adds	r3, #16
   1bdec:	4618      	mov	r0, r3
   1bdee:	f001 f815 	bl	1ce1c <xTaskRemoveFromEventList>
   1bdf2:	4603      	mov	r3, r0
   1bdf4:	2b00      	cmp	r3, #0
   1bdf6:	d012      	beq.n	1be1e <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1bdf8:	4b0c      	ldr	r3, [pc, #48]	; (1be2c <xQueueGenericReset+0xb8>)
   1bdfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bdfe:	601a      	str	r2, [r3, #0]
   1be00:	f3bf 8f4f 	dsb	sy
   1be04:	f3bf 8f6f 	isb	sy
   1be08:	e009      	b.n	1be1e <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1be0a:	68fb      	ldr	r3, [r7, #12]
   1be0c:	3310      	adds	r3, #16
   1be0e:	4618      	mov	r0, r3
   1be10:	f7ff fefc 	bl	1bc0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1be14:	68fb      	ldr	r3, [r7, #12]
   1be16:	3324      	adds	r3, #36	; 0x24
   1be18:	4618      	mov	r0, r3
   1be1a:	f7ff fef7 	bl	1bc0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   1be1e:	f7fc ff99 	bl	18d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1be22:	2301      	movs	r3, #1
}
   1be24:	4618      	mov	r0, r3
   1be26:	3710      	adds	r7, #16
   1be28:	46bd      	mov	sp, r7
   1be2a:	bd80      	pop	{r7, pc}
   1be2c:	e000ed04 	.word	0xe000ed04

0001be30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1be30:	b580      	push	{r7, lr}
   1be32:	b08a      	sub	sp, #40	; 0x28
   1be34:	af02      	add	r7, sp, #8
   1be36:	60f8      	str	r0, [r7, #12]
   1be38:	60b9      	str	r1, [r7, #8]
   1be3a:	4613      	mov	r3, r2
   1be3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1be3e:	68fb      	ldr	r3, [r7, #12]
   1be40:	2b00      	cmp	r3, #0
   1be42:	d100      	bne.n	1be46 <xQueueGenericCreate+0x16>
   1be44:	e7fe      	b.n	1be44 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1be46:	68bb      	ldr	r3, [r7, #8]
   1be48:	2b00      	cmp	r3, #0
   1be4a:	d102      	bne.n	1be52 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1be4c:	2300      	movs	r3, #0
   1be4e:	61fb      	str	r3, [r7, #28]
   1be50:	e004      	b.n	1be5c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1be52:	68fb      	ldr	r3, [r7, #12]
   1be54:	68ba      	ldr	r2, [r7, #8]
   1be56:	fb02 f303 	mul.w	r3, r2, r3
   1be5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1be5c:	69fb      	ldr	r3, [r7, #28]
   1be5e:	3348      	adds	r3, #72	; 0x48
   1be60:	4618      	mov	r0, r3
   1be62:	f005 fc5d 	bl	21720 <pvPortMalloc>
   1be66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
   1be68:	69bb      	ldr	r3, [r7, #24]
   1be6a:	2b00      	cmp	r3, #0
   1be6c:	d00d      	beq.n	1be8a <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   1be6e:	69bb      	ldr	r3, [r7, #24]
   1be70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1be72:	697b      	ldr	r3, [r7, #20]
   1be74:	3348      	adds	r3, #72	; 0x48
   1be76:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1be78:	79fa      	ldrb	r2, [r7, #7]
   1be7a:	69bb      	ldr	r3, [r7, #24]
   1be7c:	9300      	str	r3, [sp, #0]
   1be7e:	4613      	mov	r3, r2
   1be80:	697a      	ldr	r2, [r7, #20]
   1be82:	68b9      	ldr	r1, [r7, #8]
   1be84:	68f8      	ldr	r0, [r7, #12]
   1be86:	f000 f805 	bl	1be94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   1be8a:	69bb      	ldr	r3, [r7, #24]
	}
   1be8c:	4618      	mov	r0, r3
   1be8e:	3720      	adds	r7, #32
   1be90:	46bd      	mov	sp, r7
   1be92:	bd80      	pop	{r7, pc}

0001be94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1be94:	b580      	push	{r7, lr}
   1be96:	b084      	sub	sp, #16
   1be98:	af00      	add	r7, sp, #0
   1be9a:	60f8      	str	r0, [r7, #12]
   1be9c:	60b9      	str	r1, [r7, #8]
   1be9e:	607a      	str	r2, [r7, #4]
   1bea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1bea2:	68bb      	ldr	r3, [r7, #8]
   1bea4:	2b00      	cmp	r3, #0
   1bea6:	d103      	bne.n	1beb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1bea8:	69bb      	ldr	r3, [r7, #24]
   1beaa:	69ba      	ldr	r2, [r7, #24]
   1beac:	601a      	str	r2, [r3, #0]
   1beae:	e002      	b.n	1beb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1beb0:	69bb      	ldr	r3, [r7, #24]
   1beb2:	687a      	ldr	r2, [r7, #4]
   1beb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1beb6:	69bb      	ldr	r3, [r7, #24]
   1beb8:	68fa      	ldr	r2, [r7, #12]
   1beba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1bebc:	69bb      	ldr	r3, [r7, #24]
   1bebe:	68ba      	ldr	r2, [r7, #8]
   1bec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1bec2:	2101      	movs	r1, #1
   1bec4:	69b8      	ldr	r0, [r7, #24]
   1bec6:	f7ff ff55 	bl	1bd74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1beca:	bf00      	nop
   1becc:	3710      	adds	r7, #16
   1bece:	46bd      	mov	sp, r7
   1bed0:	bd80      	pop	{r7, pc}
	...

0001bed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1bed4:	b580      	push	{r7, lr}
   1bed6:	b08a      	sub	sp, #40	; 0x28
   1bed8:	af00      	add	r7, sp, #0
   1beda:	60f8      	str	r0, [r7, #12]
   1bedc:	60b9      	str	r1, [r7, #8]
   1bede:	607a      	str	r2, [r7, #4]
   1bee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1bee2:	2300      	movs	r3, #0
   1bee4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1bee6:	68fb      	ldr	r3, [r7, #12]
   1bee8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1beea:	6a3b      	ldr	r3, [r7, #32]
   1beec:	2b00      	cmp	r3, #0
   1beee:	d100      	bne.n	1bef2 <xQueueGenericSend+0x1e>
   1bef0:	e7fe      	b.n	1bef0 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1bef2:	68bb      	ldr	r3, [r7, #8]
   1bef4:	2b00      	cmp	r3, #0
   1bef6:	d103      	bne.n	1bf00 <xQueueGenericSend+0x2c>
   1bef8:	6a3b      	ldr	r3, [r7, #32]
   1befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1befc:	2b00      	cmp	r3, #0
   1befe:	d101      	bne.n	1bf04 <xQueueGenericSend+0x30>
   1bf00:	2301      	movs	r3, #1
   1bf02:	e000      	b.n	1bf06 <xQueueGenericSend+0x32>
   1bf04:	2300      	movs	r3, #0
   1bf06:	2b00      	cmp	r3, #0
   1bf08:	d100      	bne.n	1bf0c <xQueueGenericSend+0x38>
   1bf0a:	e7fe      	b.n	1bf0a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1bf0c:	683b      	ldr	r3, [r7, #0]
   1bf0e:	2b02      	cmp	r3, #2
   1bf10:	d103      	bne.n	1bf1a <xQueueGenericSend+0x46>
   1bf12:	6a3b      	ldr	r3, [r7, #32]
   1bf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bf16:	2b01      	cmp	r3, #1
   1bf18:	d101      	bne.n	1bf1e <xQueueGenericSend+0x4a>
   1bf1a:	2301      	movs	r3, #1
   1bf1c:	e000      	b.n	1bf20 <xQueueGenericSend+0x4c>
   1bf1e:	2300      	movs	r3, #0
   1bf20:	2b00      	cmp	r3, #0
   1bf22:	d100      	bne.n	1bf26 <xQueueGenericSend+0x52>
   1bf24:	e7fe      	b.n	1bf24 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bf26:	f001 f959 	bl	1d1dc <xTaskGetSchedulerState>
   1bf2a:	4603      	mov	r3, r0
   1bf2c:	2b00      	cmp	r3, #0
   1bf2e:	d102      	bne.n	1bf36 <xQueueGenericSend+0x62>
   1bf30:	687b      	ldr	r3, [r7, #4]
   1bf32:	2b00      	cmp	r3, #0
   1bf34:	d101      	bne.n	1bf3a <xQueueGenericSend+0x66>
   1bf36:	2301      	movs	r3, #1
   1bf38:	e000      	b.n	1bf3c <xQueueGenericSend+0x68>
   1bf3a:	2300      	movs	r3, #0
   1bf3c:	2b00      	cmp	r3, #0
   1bf3e:	d100      	bne.n	1bf42 <xQueueGenericSend+0x6e>
   1bf40:	e7fe      	b.n	1bf40 <xQueueGenericSend+0x6c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1bf42:	f7fc fee1 	bl	18d08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1bf46:	6a3b      	ldr	r3, [r7, #32]
   1bf48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bf4a:	6a3b      	ldr	r3, [r7, #32]
   1bf4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bf4e:	429a      	cmp	r2, r3
   1bf50:	d302      	bcc.n	1bf58 <xQueueGenericSend+0x84>
   1bf52:	683b      	ldr	r3, [r7, #0]
   1bf54:	2b02      	cmp	r3, #2
   1bf56:	d129      	bne.n	1bfac <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1bf58:	683a      	ldr	r2, [r7, #0]
   1bf5a:	68b9      	ldr	r1, [r7, #8]
   1bf5c:	6a38      	ldr	r0, [r7, #32]
   1bf5e:	f000 f9cb 	bl	1c2f8 <prvCopyDataToQueue>
   1bf62:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bf64:	6a3b      	ldr	r3, [r7, #32]
   1bf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bf68:	2b00      	cmp	r3, #0
   1bf6a:	d010      	beq.n	1bf8e <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bf6c:	6a3b      	ldr	r3, [r7, #32]
   1bf6e:	3324      	adds	r3, #36	; 0x24
   1bf70:	4618      	mov	r0, r3
   1bf72:	f000 ff53 	bl	1ce1c <xTaskRemoveFromEventList>
   1bf76:	4603      	mov	r3, r0
   1bf78:	2b00      	cmp	r3, #0
   1bf7a:	d013      	beq.n	1bfa4 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   1bf7c:	4b3f      	ldr	r3, [pc, #252]	; (1c07c <xQueueGenericSend+0x1a8>)
   1bf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bf82:	601a      	str	r2, [r3, #0]
   1bf84:	f3bf 8f4f 	dsb	sy
   1bf88:	f3bf 8f6f 	isb	sy
   1bf8c:	e00a      	b.n	1bfa4 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   1bf8e:	69fb      	ldr	r3, [r7, #28]
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	d007      	beq.n	1bfa4 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   1bf94:	4b39      	ldr	r3, [pc, #228]	; (1c07c <xQueueGenericSend+0x1a8>)
   1bf96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bf9a:	601a      	str	r2, [r3, #0]
   1bf9c:	f3bf 8f4f 	dsb	sy
   1bfa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1bfa4:	f7fc fed6 	bl	18d54 <vPortExitCritical>
				return pdPASS;
   1bfa8:	2301      	movs	r3, #1
   1bfaa:	e063      	b.n	1c074 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bfac:	687b      	ldr	r3, [r7, #4]
   1bfae:	2b00      	cmp	r3, #0
   1bfb0:	d103      	bne.n	1bfba <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bfb2:	f7fc fecf 	bl	18d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1bfb6:	2300      	movs	r3, #0
   1bfb8:	e05c      	b.n	1c074 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bfbc:	2b00      	cmp	r3, #0
   1bfbe:	d106      	bne.n	1bfce <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bfc0:	f107 0314 	add.w	r3, r7, #20
   1bfc4:	4618      	mov	r0, r3
   1bfc6:	f000 ffd3 	bl	1cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1bfca:	2301      	movs	r3, #1
   1bfcc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bfce:	f7fc fec1 	bl	18d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bfd2:	f000 fc9f 	bl	1c914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1bfd6:	f7fc fe97 	bl	18d08 <vPortEnterCritical>
   1bfda:	6a3b      	ldr	r3, [r7, #32]
   1bfdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1bfe0:	b25b      	sxtb	r3, r3
   1bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bfe6:	d103      	bne.n	1bff0 <xQueueGenericSend+0x11c>
   1bfe8:	6a3b      	ldr	r3, [r7, #32]
   1bfea:	2200      	movs	r2, #0
   1bfec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1bff0:	6a3b      	ldr	r3, [r7, #32]
   1bff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1bff6:	b25b      	sxtb	r3, r3
   1bff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bffc:	d103      	bne.n	1c006 <xQueueGenericSend+0x132>
   1bffe:	6a3b      	ldr	r3, [r7, #32]
   1c000:	2200      	movs	r2, #0
   1c002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1c006:	f7fc fea5 	bl	18d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c00a:	1d3a      	adds	r2, r7, #4
   1c00c:	f107 0314 	add.w	r3, r7, #20
   1c010:	4611      	mov	r1, r2
   1c012:	4618      	mov	r0, r3
   1c014:	f000 ffc2 	bl	1cf9c <xTaskCheckForTimeOut>
   1c018:	4603      	mov	r3, r0
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	d124      	bne.n	1c068 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1c01e:	6a38      	ldr	r0, [r7, #32]
   1c020:	f000 fa54 	bl	1c4cc <prvIsQueueFull>
   1c024:	4603      	mov	r3, r0
   1c026:	2b00      	cmp	r3, #0
   1c028:	d018      	beq.n	1c05c <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1c02a:	6a3b      	ldr	r3, [r7, #32]
   1c02c:	3310      	adds	r3, #16
   1c02e:	687a      	ldr	r2, [r7, #4]
   1c030:	4611      	mov	r1, r2
   1c032:	4618      	mov	r0, r3
   1c034:	f000 fe8e 	bl	1cd54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1c038:	6a38      	ldr	r0, [r7, #32]
   1c03a:	f000 f9df 	bl	1c3fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1c03e:	f000 fcaf 	bl	1c9a0 <xTaskResumeAll>
   1c042:	4603      	mov	r3, r0
   1c044:	2b00      	cmp	r3, #0
   1c046:	f47f af7c 	bne.w	1bf42 <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
   1c04a:	4b0c      	ldr	r3, [pc, #48]	; (1c07c <xQueueGenericSend+0x1a8>)
   1c04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c050:	601a      	str	r2, [r3, #0]
   1c052:	f3bf 8f4f 	dsb	sy
   1c056:	f3bf 8f6f 	isb	sy
   1c05a:	e772      	b.n	1bf42 <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1c05c:	6a38      	ldr	r0, [r7, #32]
   1c05e:	f000 f9cd 	bl	1c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1c062:	f000 fc9d 	bl	1c9a0 <xTaskResumeAll>
   1c066:	e76c      	b.n	1bf42 <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1c068:	6a38      	ldr	r0, [r7, #32]
   1c06a:	f000 f9c7 	bl	1c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1c06e:	f000 fc97 	bl	1c9a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1c072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   1c074:	4618      	mov	r0, r3
   1c076:	3728      	adds	r7, #40	; 0x28
   1c078:	46bd      	mov	sp, r7
   1c07a:	bd80      	pop	{r7, pc}
   1c07c:	e000ed04 	.word	0xe000ed04

0001c080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1c080:	b580      	push	{r7, lr}
   1c082:	b08c      	sub	sp, #48	; 0x30
   1c084:	af00      	add	r7, sp, #0
   1c086:	60f8      	str	r0, [r7, #12]
   1c088:	60b9      	str	r1, [r7, #8]
   1c08a:	607a      	str	r2, [r7, #4]
   1c08c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   1c08e:	68fb      	ldr	r3, [r7, #12]
   1c090:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
   1c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c094:	2b00      	cmp	r3, #0
   1c096:	d100      	bne.n	1c09a <xQueueGenericSendFromISR+0x1a>
   1c098:	e7fe      	b.n	1c098 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1c09a:	68bb      	ldr	r3, [r7, #8]
   1c09c:	2b00      	cmp	r3, #0
   1c09e:	d103      	bne.n	1c0a8 <xQueueGenericSendFromISR+0x28>
   1c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c0a4:	2b00      	cmp	r3, #0
   1c0a6:	d101      	bne.n	1c0ac <xQueueGenericSendFromISR+0x2c>
   1c0a8:	2301      	movs	r3, #1
   1c0aa:	e000      	b.n	1c0ae <xQueueGenericSendFromISR+0x2e>
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d100      	bne.n	1c0b4 <xQueueGenericSendFromISR+0x34>
   1c0b2:	e7fe      	b.n	1c0b2 <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1c0b4:	683b      	ldr	r3, [r7, #0]
   1c0b6:	2b02      	cmp	r3, #2
   1c0b8:	d103      	bne.n	1c0c2 <xQueueGenericSendFromISR+0x42>
   1c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c0be:	2b01      	cmp	r3, #1
   1c0c0:	d101      	bne.n	1c0c6 <xQueueGenericSendFromISR+0x46>
   1c0c2:	2301      	movs	r3, #1
   1c0c4:	e000      	b.n	1c0c8 <xQueueGenericSendFromISR+0x48>
   1c0c6:	2300      	movs	r3, #0
   1c0c8:	2b00      	cmp	r3, #0
   1c0ca:	d100      	bne.n	1c0ce <xQueueGenericSendFromISR+0x4e>
   1c0cc:	e7fe      	b.n	1c0cc <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1c0ce:	f7fc febd 	bl	18e4c <vPortValidateInterruptPriority>
	__asm volatile
   1c0d2:	f3ef 8211 	mrs	r2, BASEPRI
   1c0d6:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c0da:	f383 8811 	msr	BASEPRI, r3
   1c0de:	f3bf 8f6f 	isb	sy
   1c0e2:	f3bf 8f4f 	dsb	sy
   1c0e6:	61fa      	str	r2, [r7, #28]
   1c0e8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
   1c0ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1c0ec:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c0f6:	429a      	cmp	r2, r3
   1c0f8:	d302      	bcc.n	1c100 <xQueueGenericSendFromISR+0x80>
   1c0fa:	683b      	ldr	r3, [r7, #0]
   1c0fc:	2b02      	cmp	r3, #2
   1c0fe:	d12c      	bne.n	1c15a <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1c10a:	683a      	ldr	r2, [r7, #0]
   1c10c:	68b9      	ldr	r1, [r7, #8]
   1c10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c110:	f000 f8f2 	bl	1c2f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1c114:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
   1c118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c11c:	d112      	bne.n	1c144 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c122:	2b00      	cmp	r3, #0
   1c124:	d016      	beq.n	1c154 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c128:	3324      	adds	r3, #36	; 0x24
   1c12a:	4618      	mov	r0, r3
   1c12c:	f000 fe76 	bl	1ce1c <xTaskRemoveFromEventList>
   1c130:	4603      	mov	r3, r0
   1c132:	2b00      	cmp	r3, #0
   1c134:	d00e      	beq.n	1c154 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1c136:	687b      	ldr	r3, [r7, #4]
   1c138:	2b00      	cmp	r3, #0
   1c13a:	d00b      	beq.n	1c154 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1c13c:	687b      	ldr	r3, [r7, #4]
   1c13e:	2201      	movs	r2, #1
   1c140:	601a      	str	r2, [r3, #0]
   1c142:	e007      	b.n	1c154 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1c148:	3301      	adds	r3, #1
   1c14a:	b2db      	uxtb	r3, r3
   1c14c:	b25a      	sxtb	r2, r3
   1c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   1c154:	2301      	movs	r3, #1
   1c156:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
   1c158:	e001      	b.n	1c15e <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1c15a:	2300      	movs	r3, #0
   1c15c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c160:	617b      	str	r3, [r7, #20]
	__asm volatile
   1c162:	697b      	ldr	r3, [r7, #20]
   1c164:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1c16a:	4618      	mov	r0, r3
   1c16c:	3730      	adds	r7, #48	; 0x30
   1c16e:	46bd      	mov	sp, r7
   1c170:	bd80      	pop	{r7, pc}
	...

0001c174 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1c174:	b580      	push	{r7, lr}
   1c176:	b08a      	sub	sp, #40	; 0x28
   1c178:	af00      	add	r7, sp, #0
   1c17a:	60f8      	str	r0, [r7, #12]
   1c17c:	60b9      	str	r1, [r7, #8]
   1c17e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1c180:	2300      	movs	r3, #0
   1c182:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1c184:	68fb      	ldr	r3, [r7, #12]
   1c186:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1c188:	6a3b      	ldr	r3, [r7, #32]
   1c18a:	2b00      	cmp	r3, #0
   1c18c:	d100      	bne.n	1c190 <xQueueReceive+0x1c>
   1c18e:	e7fe      	b.n	1c18e <xQueueReceive+0x1a>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1c190:	68bb      	ldr	r3, [r7, #8]
   1c192:	2b00      	cmp	r3, #0
   1c194:	d103      	bne.n	1c19e <xQueueReceive+0x2a>
   1c196:	6a3b      	ldr	r3, [r7, #32]
   1c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c19a:	2b00      	cmp	r3, #0
   1c19c:	d101      	bne.n	1c1a2 <xQueueReceive+0x2e>
   1c19e:	2301      	movs	r3, #1
   1c1a0:	e000      	b.n	1c1a4 <xQueueReceive+0x30>
   1c1a2:	2300      	movs	r3, #0
   1c1a4:	2b00      	cmp	r3, #0
   1c1a6:	d100      	bne.n	1c1aa <xQueueReceive+0x36>
   1c1a8:	e7fe      	b.n	1c1a8 <xQueueReceive+0x34>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c1aa:	f001 f817 	bl	1d1dc <xTaskGetSchedulerState>
   1c1ae:	4603      	mov	r3, r0
   1c1b0:	2b00      	cmp	r3, #0
   1c1b2:	d102      	bne.n	1c1ba <xQueueReceive+0x46>
   1c1b4:	687b      	ldr	r3, [r7, #4]
   1c1b6:	2b00      	cmp	r3, #0
   1c1b8:	d101      	bne.n	1c1be <xQueueReceive+0x4a>
   1c1ba:	2301      	movs	r3, #1
   1c1bc:	e000      	b.n	1c1c0 <xQueueReceive+0x4c>
   1c1be:	2300      	movs	r3, #0
   1c1c0:	2b00      	cmp	r3, #0
   1c1c2:	d100      	bne.n	1c1c6 <xQueueReceive+0x52>
   1c1c4:	e7fe      	b.n	1c1c4 <xQueueReceive+0x50>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1c1c6:	f7fc fd9f 	bl	18d08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c1ca:	6a3b      	ldr	r3, [r7, #32]
   1c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c1ce:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c1d0:	69fb      	ldr	r3, [r7, #28]
   1c1d2:	2b00      	cmp	r3, #0
   1c1d4:	d01f      	beq.n	1c216 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1c1d6:	68b9      	ldr	r1, [r7, #8]
   1c1d8:	6a38      	ldr	r0, [r7, #32]
   1c1da:	f000 f8e9 	bl	1c3b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1c1de:	69fb      	ldr	r3, [r7, #28]
   1c1e0:	1e5a      	subs	r2, r3, #1
   1c1e2:	6a3b      	ldr	r3, [r7, #32]
   1c1e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c1e6:	6a3b      	ldr	r3, [r7, #32]
   1c1e8:	691b      	ldr	r3, [r3, #16]
   1c1ea:	2b00      	cmp	r3, #0
   1c1ec:	d00f      	beq.n	1c20e <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c1ee:	6a3b      	ldr	r3, [r7, #32]
   1c1f0:	3310      	adds	r3, #16
   1c1f2:	4618      	mov	r0, r3
   1c1f4:	f000 fe12 	bl	1ce1c <xTaskRemoveFromEventList>
   1c1f8:	4603      	mov	r3, r0
   1c1fa:	2b00      	cmp	r3, #0
   1c1fc:	d007      	beq.n	1c20e <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c1fe:	4b3d      	ldr	r3, [pc, #244]	; (1c2f4 <xQueueReceive+0x180>)
   1c200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c204:	601a      	str	r2, [r3, #0]
   1c206:	f3bf 8f4f 	dsb	sy
   1c20a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c20e:	f7fc fda1 	bl	18d54 <vPortExitCritical>
				return pdPASS;
   1c212:	2301      	movs	r3, #1
   1c214:	e069      	b.n	1c2ea <xQueueReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c216:	687b      	ldr	r3, [r7, #4]
   1c218:	2b00      	cmp	r3, #0
   1c21a:	d103      	bne.n	1c224 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1c21c:	f7fc fd9a 	bl	18d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1c220:	2300      	movs	r3, #0
   1c222:	e062      	b.n	1c2ea <xQueueReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c226:	2b00      	cmp	r3, #0
   1c228:	d106      	bne.n	1c238 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c22a:	f107 0314 	add.w	r3, r7, #20
   1c22e:	4618      	mov	r0, r3
   1c230:	f000 fe9e 	bl	1cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1c234:	2301      	movs	r3, #1
   1c236:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c238:	f7fc fd8c 	bl	18d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c23c:	f000 fb6a 	bl	1c914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1c240:	f7fc fd62 	bl	18d08 <vPortEnterCritical>
   1c244:	6a3b      	ldr	r3, [r7, #32]
   1c246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1c24a:	b25b      	sxtb	r3, r3
   1c24c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c250:	d103      	bne.n	1c25a <xQueueReceive+0xe6>
   1c252:	6a3b      	ldr	r3, [r7, #32]
   1c254:	2200      	movs	r2, #0
   1c256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1c25a:	6a3b      	ldr	r3, [r7, #32]
   1c25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c260:	b25b      	sxtb	r3, r3
   1c262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c266:	d103      	bne.n	1c270 <xQueueReceive+0xfc>
   1c268:	6a3b      	ldr	r3, [r7, #32]
   1c26a:	2200      	movs	r2, #0
   1c26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1c270:	f7fc fd70 	bl	18d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c274:	1d3a      	adds	r2, r7, #4
   1c276:	f107 0314 	add.w	r3, r7, #20
   1c27a:	4611      	mov	r1, r2
   1c27c:	4618      	mov	r0, r3
   1c27e:	f000 fe8d 	bl	1cf9c <xTaskCheckForTimeOut>
   1c282:	4603      	mov	r3, r0
   1c284:	2b00      	cmp	r3, #0
   1c286:	d123      	bne.n	1c2d0 <xQueueReceive+0x15c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c288:	6a38      	ldr	r0, [r7, #32]
   1c28a:	f000 f909 	bl	1c4a0 <prvIsQueueEmpty>
   1c28e:	4603      	mov	r3, r0
   1c290:	2b00      	cmp	r3, #0
   1c292:	d017      	beq.n	1c2c4 <xQueueReceive+0x150>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c294:	6a3b      	ldr	r3, [r7, #32]
   1c296:	3324      	adds	r3, #36	; 0x24
   1c298:	687a      	ldr	r2, [r7, #4]
   1c29a:	4611      	mov	r1, r2
   1c29c:	4618      	mov	r0, r3
   1c29e:	f000 fd59 	bl	1cd54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   1c2a2:	6a38      	ldr	r0, [r7, #32]
   1c2a4:	f000 f8aa 	bl	1c3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1c2a8:	f000 fb7a 	bl	1c9a0 <xTaskResumeAll>
   1c2ac:	4603      	mov	r3, r0
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d189      	bne.n	1c1c6 <xQueueReceive+0x52>
				{
					portYIELD_WITHIN_API();
   1c2b2:	4b10      	ldr	r3, [pc, #64]	; (1c2f4 <xQueueReceive+0x180>)
   1c2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c2b8:	601a      	str	r2, [r3, #0]
   1c2ba:	f3bf 8f4f 	dsb	sy
   1c2be:	f3bf 8f6f 	isb	sy
   1c2c2:	e780      	b.n	1c1c6 <xQueueReceive+0x52>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1c2c4:	6a38      	ldr	r0, [r7, #32]
   1c2c6:	f000 f899 	bl	1c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1c2ca:	f000 fb69 	bl	1c9a0 <xTaskResumeAll>
   1c2ce:	e77a      	b.n	1c1c6 <xQueueReceive+0x52>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1c2d0:	6a38      	ldr	r0, [r7, #32]
   1c2d2:	f000 f893 	bl	1c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1c2d6:	f000 fb63 	bl	1c9a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c2da:	6a38      	ldr	r0, [r7, #32]
   1c2dc:	f000 f8e0 	bl	1c4a0 <prvIsQueueEmpty>
   1c2e0:	4603      	mov	r3, r0
   1c2e2:	2b00      	cmp	r3, #0
   1c2e4:	f43f af6f 	beq.w	1c1c6 <xQueueReceive+0x52>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1c2e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   1c2ea:	4618      	mov	r0, r3
   1c2ec:	3728      	adds	r7, #40	; 0x28
   1c2ee:	46bd      	mov	sp, r7
   1c2f0:	bd80      	pop	{r7, pc}
   1c2f2:	bf00      	nop
   1c2f4:	e000ed04 	.word	0xe000ed04

0001c2f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c2f8:	b580      	push	{r7, lr}
   1c2fa:	b086      	sub	sp, #24
   1c2fc:	af00      	add	r7, sp, #0
   1c2fe:	60f8      	str	r0, [r7, #12]
   1c300:	60b9      	str	r1, [r7, #8]
   1c302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c304:	2300      	movs	r3, #0
   1c306:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c308:	68fb      	ldr	r3, [r7, #12]
   1c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c30c:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c30e:	68fb      	ldr	r3, [r7, #12]
   1c310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c312:	2b00      	cmp	r3, #0
   1c314:	d043      	beq.n	1c39e <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c316:	687b      	ldr	r3, [r7, #4]
   1c318:	2b00      	cmp	r3, #0
   1c31a:	d119      	bne.n	1c350 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1c31c:	68fb      	ldr	r3, [r7, #12]
   1c31e:	6858      	ldr	r0, [r3, #4]
   1c320:	68fb      	ldr	r3, [r7, #12]
   1c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c324:	461a      	mov	r2, r3
   1c326:	68b9      	ldr	r1, [r7, #8]
   1c328:	f7ef ff1a 	bl	c160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1c32c:	68fb      	ldr	r3, [r7, #12]
   1c32e:	685a      	ldr	r2, [r3, #4]
   1c330:	68fb      	ldr	r3, [r7, #12]
   1c332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c334:	441a      	add	r2, r3
   1c336:	68fb      	ldr	r3, [r7, #12]
   1c338:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c33a:	68fb      	ldr	r3, [r7, #12]
   1c33c:	685a      	ldr	r2, [r3, #4]
   1c33e:	68fb      	ldr	r3, [r7, #12]
   1c340:	689b      	ldr	r3, [r3, #8]
   1c342:	429a      	cmp	r2, r3
   1c344:	d32b      	bcc.n	1c39e <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c346:	68fb      	ldr	r3, [r7, #12]
   1c348:	681a      	ldr	r2, [r3, #0]
   1c34a:	68fb      	ldr	r3, [r7, #12]
   1c34c:	605a      	str	r2, [r3, #4]
   1c34e:	e026      	b.n	1c39e <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1c350:	68fb      	ldr	r3, [r7, #12]
   1c352:	68d8      	ldr	r0, [r3, #12]
   1c354:	68fb      	ldr	r3, [r7, #12]
   1c356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c358:	461a      	mov	r2, r3
   1c35a:	68b9      	ldr	r1, [r7, #8]
   1c35c:	f7ef ff00 	bl	c160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1c360:	68fb      	ldr	r3, [r7, #12]
   1c362:	68da      	ldr	r2, [r3, #12]
   1c364:	68fb      	ldr	r3, [r7, #12]
   1c366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c368:	425b      	negs	r3, r3
   1c36a:	441a      	add	r2, r3
   1c36c:	68fb      	ldr	r3, [r7, #12]
   1c36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c370:	68fb      	ldr	r3, [r7, #12]
   1c372:	68da      	ldr	r2, [r3, #12]
   1c374:	68fb      	ldr	r3, [r7, #12]
   1c376:	681b      	ldr	r3, [r3, #0]
   1c378:	429a      	cmp	r2, r3
   1c37a:	d207      	bcs.n	1c38c <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1c37c:	68fb      	ldr	r3, [r7, #12]
   1c37e:	689a      	ldr	r2, [r3, #8]
   1c380:	68fb      	ldr	r3, [r7, #12]
   1c382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c384:	425b      	negs	r3, r3
   1c386:	441a      	add	r2, r3
   1c388:	68fb      	ldr	r3, [r7, #12]
   1c38a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c38c:	687b      	ldr	r3, [r7, #4]
   1c38e:	2b02      	cmp	r3, #2
   1c390:	d105      	bne.n	1c39e <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c392:	697b      	ldr	r3, [r7, #20]
   1c394:	2b00      	cmp	r3, #0
   1c396:	d002      	beq.n	1c39e <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c398:	697b      	ldr	r3, [r7, #20]
   1c39a:	3b01      	subs	r3, #1
   1c39c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c39e:	697b      	ldr	r3, [r7, #20]
   1c3a0:	1c5a      	adds	r2, r3, #1
   1c3a2:	68fb      	ldr	r3, [r7, #12]
   1c3a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c3a6:	693b      	ldr	r3, [r7, #16]
}
   1c3a8:	4618      	mov	r0, r3
   1c3aa:	3718      	adds	r7, #24
   1c3ac:	46bd      	mov	sp, r7
   1c3ae:	bd80      	pop	{r7, pc}

0001c3b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c3b0:	b580      	push	{r7, lr}
   1c3b2:	b082      	sub	sp, #8
   1c3b4:	af00      	add	r7, sp, #0
   1c3b6:	6078      	str	r0, [r7, #4]
   1c3b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c3ba:	687b      	ldr	r3, [r7, #4]
   1c3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3be:	2b00      	cmp	r3, #0
   1c3c0:	d018      	beq.n	1c3f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1c3c2:	687b      	ldr	r3, [r7, #4]
   1c3c4:	68da      	ldr	r2, [r3, #12]
   1c3c6:	687b      	ldr	r3, [r7, #4]
   1c3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3ca:	441a      	add	r2, r3
   1c3cc:	687b      	ldr	r3, [r7, #4]
   1c3ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c3d0:	687b      	ldr	r3, [r7, #4]
   1c3d2:	68da      	ldr	r2, [r3, #12]
   1c3d4:	687b      	ldr	r3, [r7, #4]
   1c3d6:	689b      	ldr	r3, [r3, #8]
   1c3d8:	429a      	cmp	r2, r3
   1c3da:	d303      	bcc.n	1c3e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   1c3dc:	687b      	ldr	r3, [r7, #4]
   1c3de:	681a      	ldr	r2, [r3, #0]
   1c3e0:	687b      	ldr	r3, [r7, #4]
   1c3e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1c3e4:	687b      	ldr	r3, [r7, #4]
   1c3e6:	68d9      	ldr	r1, [r3, #12]
   1c3e8:	687b      	ldr	r3, [r7, #4]
   1c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3ec:	461a      	mov	r2, r3
   1c3ee:	6838      	ldr	r0, [r7, #0]
   1c3f0:	f7ef feb6 	bl	c160 <memcpy>
	}
}
   1c3f4:	bf00      	nop
   1c3f6:	3708      	adds	r7, #8
   1c3f8:	46bd      	mov	sp, r7
   1c3fa:	bd80      	pop	{r7, pc}

0001c3fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c3fc:	b580      	push	{r7, lr}
   1c3fe:	b084      	sub	sp, #16
   1c400:	af00      	add	r7, sp, #0
   1c402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c404:	f7fc fc80 	bl	18d08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c408:	687b      	ldr	r3, [r7, #4]
   1c40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c40e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c410:	e011      	b.n	1c436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c412:	687b      	ldr	r3, [r7, #4]
   1c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c416:	2b00      	cmp	r3, #0
   1c418:	d012      	beq.n	1c440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c41a:	687b      	ldr	r3, [r7, #4]
   1c41c:	3324      	adds	r3, #36	; 0x24
   1c41e:	4618      	mov	r0, r3
   1c420:	f000 fcfc 	bl	1ce1c <xTaskRemoveFromEventList>
   1c424:	4603      	mov	r3, r0
   1c426:	2b00      	cmp	r3, #0
   1c428:	d001      	beq.n	1c42e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   1c42a:	f000 fe05 	bl	1d038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c42e:	7bfb      	ldrb	r3, [r7, #15]
   1c430:	3b01      	subs	r3, #1
   1c432:	b2db      	uxtb	r3, r3
   1c434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c436:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1c43a:	2b00      	cmp	r3, #0
   1c43c:	dce9      	bgt.n	1c412 <prvUnlockQueue+0x16>
   1c43e:	e000      	b.n	1c442 <prvUnlockQueue+0x46>
					break;
   1c440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c442:	687b      	ldr	r3, [r7, #4]
   1c444:	22ff      	movs	r2, #255	; 0xff
   1c446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   1c44a:	f7fc fc83 	bl	18d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c44e:	f7fc fc5b 	bl	18d08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c452:	687b      	ldr	r3, [r7, #4]
   1c454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1c458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c45a:	e011      	b.n	1c480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c45c:	687b      	ldr	r3, [r7, #4]
   1c45e:	691b      	ldr	r3, [r3, #16]
   1c460:	2b00      	cmp	r3, #0
   1c462:	d012      	beq.n	1c48a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c464:	687b      	ldr	r3, [r7, #4]
   1c466:	3310      	adds	r3, #16
   1c468:	4618      	mov	r0, r3
   1c46a:	f000 fcd7 	bl	1ce1c <xTaskRemoveFromEventList>
   1c46e:	4603      	mov	r3, r0
   1c470:	2b00      	cmp	r3, #0
   1c472:	d001      	beq.n	1c478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
   1c474:	f000 fde0 	bl	1d038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c478:	7bbb      	ldrb	r3, [r7, #14]
   1c47a:	3b01      	subs	r3, #1
   1c47c:	b2db      	uxtb	r3, r3
   1c47e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c480:	f997 300e 	ldrsb.w	r3, [r7, #14]
   1c484:	2b00      	cmp	r3, #0
   1c486:	dce9      	bgt.n	1c45c <prvUnlockQueue+0x60>
   1c488:	e000      	b.n	1c48c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
   1c48a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c48c:	687b      	ldr	r3, [r7, #4]
   1c48e:	22ff      	movs	r2, #255	; 0xff
   1c490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   1c494:	f7fc fc5e 	bl	18d54 <vPortExitCritical>
}
   1c498:	bf00      	nop
   1c49a:	3710      	adds	r7, #16
   1c49c:	46bd      	mov	sp, r7
   1c49e:	bd80      	pop	{r7, pc}

0001c4a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c4a0:	b580      	push	{r7, lr}
   1c4a2:	b084      	sub	sp, #16
   1c4a4:	af00      	add	r7, sp, #0
   1c4a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c4a8:	f7fc fc2e 	bl	18d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c4ac:	687b      	ldr	r3, [r7, #4]
   1c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c4b0:	2b00      	cmp	r3, #0
   1c4b2:	d102      	bne.n	1c4ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c4b4:	2301      	movs	r3, #1
   1c4b6:	60fb      	str	r3, [r7, #12]
   1c4b8:	e001      	b.n	1c4be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c4ba:	2300      	movs	r3, #0
   1c4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c4be:	f7fc fc49 	bl	18d54 <vPortExitCritical>

	return xReturn;
   1c4c2:	68fb      	ldr	r3, [r7, #12]
}
   1c4c4:	4618      	mov	r0, r3
   1c4c6:	3710      	adds	r7, #16
   1c4c8:	46bd      	mov	sp, r7
   1c4ca:	bd80      	pop	{r7, pc}

0001c4cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c4cc:	b580      	push	{r7, lr}
   1c4ce:	b084      	sub	sp, #16
   1c4d0:	af00      	add	r7, sp, #0
   1c4d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c4d4:	f7fc fc18 	bl	18d08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c4d8:	687b      	ldr	r3, [r7, #4]
   1c4da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c4dc:	687b      	ldr	r3, [r7, #4]
   1c4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c4e0:	429a      	cmp	r2, r3
   1c4e2:	d102      	bne.n	1c4ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c4e4:	2301      	movs	r3, #1
   1c4e6:	60fb      	str	r3, [r7, #12]
   1c4e8:	e001      	b.n	1c4ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c4ea:	2300      	movs	r3, #0
   1c4ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c4ee:	f7fc fc31 	bl	18d54 <vPortExitCritical>

	return xReturn;
   1c4f2:	68fb      	ldr	r3, [r7, #12]
}
   1c4f4:	4618      	mov	r0, r3
   1c4f6:	3710      	adds	r7, #16
   1c4f8:	46bd      	mov	sp, r7
   1c4fa:	bd80      	pop	{r7, pc}

0001c4fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c4fc:	b580      	push	{r7, lr}
   1c4fe:	b086      	sub	sp, #24
   1c500:	af00      	add	r7, sp, #0
   1c502:	60f8      	str	r0, [r7, #12]
   1c504:	60b9      	str	r1, [r7, #8]
   1c506:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
   1c508:	68fb      	ldr	r3, [r7, #12]
   1c50a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c50c:	f7fc fbfc 	bl	18d08 <vPortEnterCritical>
   1c510:	697b      	ldr	r3, [r7, #20]
   1c512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1c516:	b25b      	sxtb	r3, r3
   1c518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c51c:	d103      	bne.n	1c526 <vQueueWaitForMessageRestricted+0x2a>
   1c51e:	697b      	ldr	r3, [r7, #20]
   1c520:	2200      	movs	r2, #0
   1c522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1c526:	697b      	ldr	r3, [r7, #20]
   1c528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c52c:	b25b      	sxtb	r3, r3
   1c52e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c532:	d103      	bne.n	1c53c <vQueueWaitForMessageRestricted+0x40>
   1c534:	697b      	ldr	r3, [r7, #20]
   1c536:	2200      	movs	r2, #0
   1c538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1c53c:	f7fc fc0a 	bl	18d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c540:	697b      	ldr	r3, [r7, #20]
   1c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c544:	2b00      	cmp	r3, #0
   1c546:	d106      	bne.n	1c556 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c548:	697b      	ldr	r3, [r7, #20]
   1c54a:	3324      	adds	r3, #36	; 0x24
   1c54c:	687a      	ldr	r2, [r7, #4]
   1c54e:	68b9      	ldr	r1, [r7, #8]
   1c550:	4618      	mov	r0, r3
   1c552:	f000 fc41 	bl	1cdd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c556:	6978      	ldr	r0, [r7, #20]
   1c558:	f7ff ff50 	bl	1c3fc <prvUnlockQueue>
	}
   1c55c:	bf00      	nop
   1c55e:	3718      	adds	r7, #24
   1c560:	46bd      	mov	sp, r7
   1c562:	bd80      	pop	{r7, pc}

0001c564 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c564:	b580      	push	{r7, lr}
   1c566:	b08c      	sub	sp, #48	; 0x30
   1c568:	af04      	add	r7, sp, #16
   1c56a:	60f8      	str	r0, [r7, #12]
   1c56c:	60b9      	str	r1, [r7, #8]
   1c56e:	603b      	str	r3, [r7, #0]
   1c570:	4613      	mov	r3, r2
   1c572:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1c574:	88fb      	ldrh	r3, [r7, #6]
   1c576:	009b      	lsls	r3, r3, #2
   1c578:	4618      	mov	r0, r3
   1c57a:	f005 f8d1 	bl	21720 <pvPortMalloc>
   1c57e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
   1c580:	697b      	ldr	r3, [r7, #20]
   1c582:	2b00      	cmp	r3, #0
   1c584:	d00e      	beq.n	1c5a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1c586:	204c      	movs	r0, #76	; 0x4c
   1c588:	f005 f8ca 	bl	21720 <pvPortMalloc>
   1c58c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
   1c58e:	69fb      	ldr	r3, [r7, #28]
   1c590:	2b00      	cmp	r3, #0
   1c592:	d003      	beq.n	1c59c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c594:	69fb      	ldr	r3, [r7, #28]
   1c596:	697a      	ldr	r2, [r7, #20]
   1c598:	631a      	str	r2, [r3, #48]	; 0x30
   1c59a:	e005      	b.n	1c5a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c59c:	6978      	ldr	r0, [r7, #20]
   1c59e:	f005 f951 	bl	21844 <vPortFree>
   1c5a2:	e001      	b.n	1c5a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c5a4:	2300      	movs	r3, #0
   1c5a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c5a8:	69fb      	ldr	r3, [r7, #28]
   1c5aa:	2b00      	cmp	r3, #0
   1c5ac:	d013      	beq.n	1c5d6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c5ae:	88fa      	ldrh	r2, [r7, #6]
   1c5b0:	2300      	movs	r3, #0
   1c5b2:	9303      	str	r3, [sp, #12]
   1c5b4:	69fb      	ldr	r3, [r7, #28]
   1c5b6:	9302      	str	r3, [sp, #8]
   1c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c5ba:	9301      	str	r3, [sp, #4]
   1c5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5be:	9300      	str	r3, [sp, #0]
   1c5c0:	683b      	ldr	r3, [r7, #0]
   1c5c2:	68b9      	ldr	r1, [r7, #8]
   1c5c4:	68f8      	ldr	r0, [r7, #12]
   1c5c6:	f000 f80e 	bl	1c5e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   1c5ca:	69f8      	ldr	r0, [r7, #28]
   1c5cc:	f000 f886 	bl	1c6dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   1c5d0:	2301      	movs	r3, #1
   1c5d2:	61bb      	str	r3, [r7, #24]
   1c5d4:	e002      	b.n	1c5dc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c5d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c5da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c5dc:	69bb      	ldr	r3, [r7, #24]
	}
   1c5de:	4618      	mov	r0, r3
   1c5e0:	3720      	adds	r7, #32
   1c5e2:	46bd      	mov	sp, r7
   1c5e4:	bd80      	pop	{r7, pc}

0001c5e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c5e6:	b580      	push	{r7, lr}
   1c5e8:	b086      	sub	sp, #24
   1c5ea:	af00      	add	r7, sp, #0
   1c5ec:	60f8      	str	r0, [r7, #12]
   1c5ee:	60b9      	str	r1, [r7, #8]
   1c5f0:	607a      	str	r2, [r7, #4]
   1c5f2:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   1c5f4:	68bb      	ldr	r3, [r7, #8]
   1c5f6:	2b00      	cmp	r3, #0
   1c5f8:	d100      	bne.n	1c5fc <prvInitialiseNewTask+0x16>
   1c5fa:	e7fe      	b.n	1c5fa <prvInitialiseNewTask+0x14>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c600:	687b      	ldr	r3, [r7, #4]
   1c602:	009b      	lsls	r3, r3, #2
   1c604:	461a      	mov	r2, r3
   1c606:	21a5      	movs	r1, #165	; 0xa5
   1c608:	f7ef fea8 	bl	c35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c60e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c610:	687b      	ldr	r3, [r7, #4]
   1c612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c616:	3b01      	subs	r3, #1
   1c618:	009b      	lsls	r3, r3, #2
   1c61a:	4413      	add	r3, r2
   1c61c:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   1c61e:	693b      	ldr	r3, [r7, #16]
   1c620:	f023 0307 	bic.w	r3, r3, #7
   1c624:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c626:	693b      	ldr	r3, [r7, #16]
   1c628:	f003 0307 	and.w	r3, r3, #7
   1c62c:	2b00      	cmp	r3, #0
   1c62e:	d000      	beq.n	1c632 <prvInitialiseNewTask+0x4c>
   1c630:	e7fe      	b.n	1c630 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c632:	2300      	movs	r3, #0
   1c634:	617b      	str	r3, [r7, #20]
   1c636:	e012      	b.n	1c65e <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c638:	68ba      	ldr	r2, [r7, #8]
   1c63a:	697b      	ldr	r3, [r7, #20]
   1c63c:	4413      	add	r3, r2
   1c63e:	7819      	ldrb	r1, [r3, #0]
   1c640:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c642:	697b      	ldr	r3, [r7, #20]
   1c644:	4413      	add	r3, r2
   1c646:	3334      	adds	r3, #52	; 0x34
   1c648:	460a      	mov	r2, r1
   1c64a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   1c64c:	68ba      	ldr	r2, [r7, #8]
   1c64e:	697b      	ldr	r3, [r7, #20]
   1c650:	4413      	add	r3, r2
   1c652:	781b      	ldrb	r3, [r3, #0]
   1c654:	2b00      	cmp	r3, #0
   1c656:	d006      	beq.n	1c666 <prvInitialiseNewTask+0x80>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c658:	697b      	ldr	r3, [r7, #20]
   1c65a:	3301      	adds	r3, #1
   1c65c:	617b      	str	r3, [r7, #20]
   1c65e:	697b      	ldr	r3, [r7, #20]
   1c660:	2b0f      	cmp	r3, #15
   1c662:	d9e9      	bls.n	1c638 <prvInitialiseNewTask+0x52>
   1c664:	e000      	b.n	1c668 <prvInitialiseNewTask+0x82>
		{
			break;
   1c666:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c66a:	2200      	movs	r2, #0
   1c66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c670:	6a3b      	ldr	r3, [r7, #32]
   1c672:	2b03      	cmp	r3, #3
   1c674:	d901      	bls.n	1c67a <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c676:	2303      	movs	r3, #3
   1c678:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c67c:	6a3a      	ldr	r2, [r7, #32]
   1c67e:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c682:	3304      	adds	r3, #4
   1c684:	4618      	mov	r0, r3
   1c686:	f7ff fae1 	bl	1bc4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c68c:	3318      	adds	r3, #24
   1c68e:	4618      	mov	r0, r3
   1c690:	f7ff fadc 	bl	1bc4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c696:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c698:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c69a:	6a3b      	ldr	r3, [r7, #32]
   1c69c:	f1c3 0204 	rsb	r2, r3, #4
   1c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c6a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6ac:	2200      	movs	r2, #0
   1c6ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6b2:	2200      	movs	r2, #0
   1c6b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c6b8:	683a      	ldr	r2, [r7, #0]
   1c6ba:	68f9      	ldr	r1, [r7, #12]
   1c6bc:	6938      	ldr	r0, [r7, #16]
   1c6be:	f7fc fa21 	bl	18b04 <pxPortInitialiseStack>
   1c6c2:	4602      	mov	r2, r0
   1c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   1c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6ca:	2b00      	cmp	r3, #0
   1c6cc:	d002      	beq.n	1c6d4 <prvInitialiseNewTask+0xee>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c6d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c6d4:	bf00      	nop
   1c6d6:	3718      	adds	r7, #24
   1c6d8:	46bd      	mov	sp, r7
   1c6da:	bd80      	pop	{r7, pc}

0001c6dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c6dc:	b580      	push	{r7, lr}
   1c6de:	b082      	sub	sp, #8
   1c6e0:	af00      	add	r7, sp, #0
   1c6e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c6e4:	f7fc fb10 	bl	18d08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   1c6e8:	4b2b      	ldr	r3, [pc, #172]	; (1c798 <prvAddNewTaskToReadyList+0xbc>)
   1c6ea:	681b      	ldr	r3, [r3, #0]
   1c6ec:	3301      	adds	r3, #1
   1c6ee:	4a2a      	ldr	r2, [pc, #168]	; (1c798 <prvAddNewTaskToReadyList+0xbc>)
   1c6f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1c6f2:	4b2a      	ldr	r3, [pc, #168]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c6f4:	681b      	ldr	r3, [r3, #0]
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d109      	bne.n	1c70e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1c6fa:	4a28      	ldr	r2, [pc, #160]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c6fc:	687b      	ldr	r3, [r7, #4]
   1c6fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1c700:	4b25      	ldr	r3, [pc, #148]	; (1c798 <prvAddNewTaskToReadyList+0xbc>)
   1c702:	681b      	ldr	r3, [r3, #0]
   1c704:	2b01      	cmp	r3, #1
   1c706:	d110      	bne.n	1c72a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c708:	f000 fd06 	bl	1d118 <prvInitialiseTaskLists>
   1c70c:	e00d      	b.n	1c72a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c70e:	4b24      	ldr	r3, [pc, #144]	; (1c7a0 <prvAddNewTaskToReadyList+0xc4>)
   1c710:	681b      	ldr	r3, [r3, #0]
   1c712:	2b00      	cmp	r3, #0
   1c714:	d109      	bne.n	1c72a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c716:	4b21      	ldr	r3, [pc, #132]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c71c:	687b      	ldr	r3, [r7, #4]
   1c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c720:	429a      	cmp	r2, r3
   1c722:	d802      	bhi.n	1c72a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c724:	4a1d      	ldr	r2, [pc, #116]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c726:	687b      	ldr	r3, [r7, #4]
   1c728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c72a:	4b1e      	ldr	r3, [pc, #120]	; (1c7a4 <prvAddNewTaskToReadyList+0xc8>)
   1c72c:	681b      	ldr	r3, [r3, #0]
   1c72e:	3301      	adds	r3, #1
   1c730:	4a1c      	ldr	r2, [pc, #112]	; (1c7a4 <prvAddNewTaskToReadyList+0xc8>)
   1c732:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1c734:	687b      	ldr	r3, [r7, #4]
   1c736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c738:	4b1b      	ldr	r3, [pc, #108]	; (1c7a8 <prvAddNewTaskToReadyList+0xcc>)
   1c73a:	681b      	ldr	r3, [r3, #0]
   1c73c:	429a      	cmp	r2, r3
   1c73e:	d903      	bls.n	1c748 <prvAddNewTaskToReadyList+0x6c>
   1c740:	687b      	ldr	r3, [r7, #4]
   1c742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c744:	4a18      	ldr	r2, [pc, #96]	; (1c7a8 <prvAddNewTaskToReadyList+0xcc>)
   1c746:	6013      	str	r3, [r2, #0]
   1c748:	687b      	ldr	r3, [r7, #4]
   1c74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c74c:	4613      	mov	r3, r2
   1c74e:	009b      	lsls	r3, r3, #2
   1c750:	4413      	add	r3, r2
   1c752:	009b      	lsls	r3, r3, #2
   1c754:	4a15      	ldr	r2, [pc, #84]	; (1c7ac <prvAddNewTaskToReadyList+0xd0>)
   1c756:	441a      	add	r2, r3
   1c758:	687b      	ldr	r3, [r7, #4]
   1c75a:	3304      	adds	r3, #4
   1c75c:	4619      	mov	r1, r3
   1c75e:	4610      	mov	r0, r2
   1c760:	f7ff fa81 	bl	1bc66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c764:	f7fc faf6 	bl	18d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   1c768:	4b0d      	ldr	r3, [pc, #52]	; (1c7a0 <prvAddNewTaskToReadyList+0xc4>)
   1c76a:	681b      	ldr	r3, [r3, #0]
   1c76c:	2b00      	cmp	r3, #0
   1c76e:	d00e      	beq.n	1c78e <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c770:	4b0a      	ldr	r3, [pc, #40]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c772:	681b      	ldr	r3, [r3, #0]
   1c774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c776:	687b      	ldr	r3, [r7, #4]
   1c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c77a:	429a      	cmp	r2, r3
   1c77c:	d207      	bcs.n	1c78e <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c77e:	4b0c      	ldr	r3, [pc, #48]	; (1c7b0 <prvAddNewTaskToReadyList+0xd4>)
   1c780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c784:	601a      	str	r2, [r3, #0]
   1c786:	f3bf 8f4f 	dsb	sy
   1c78a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c78e:	bf00      	nop
   1c790:	3708      	adds	r7, #8
   1c792:	46bd      	mov	sp, r7
   1c794:	bd80      	pop	{r7, pc}
   1c796:	bf00      	nop
   1c798:	100050c8 	.word	0x100050c8
   1c79c:	1000501c 	.word	0x1000501c
   1c7a0:	100050d4 	.word	0x100050d4
   1c7a4:	100050e4 	.word	0x100050e4
   1c7a8:	100050d0 	.word	0x100050d0
   1c7ac:	10005020 	.word	0x10005020
   1c7b0:	e000ed04 	.word	0xe000ed04

0001c7b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c7b4:	b580      	push	{r7, lr}
   1c7b6:	b084      	sub	sp, #16
   1c7b8:	af00      	add	r7, sp, #0
   1c7ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c7bc:	f7fc faa4 	bl	18d08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c7c0:	687b      	ldr	r3, [r7, #4]
   1c7c2:	2b00      	cmp	r3, #0
   1c7c4:	d102      	bne.n	1c7cc <vTaskSuspend+0x18>
   1c7c6:	4b2b      	ldr	r3, [pc, #172]	; (1c874 <vTaskSuspend+0xc0>)
   1c7c8:	681b      	ldr	r3, [r3, #0]
   1c7ca:	e000      	b.n	1c7ce <vTaskSuspend+0x1a>
   1c7cc:	687b      	ldr	r3, [r7, #4]
   1c7ce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c7d0:	68fb      	ldr	r3, [r7, #12]
   1c7d2:	3304      	adds	r3, #4
   1c7d4:	4618      	mov	r0, r3
   1c7d6:	f7ff faa3 	bl	1bd20 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c7da:	68fb      	ldr	r3, [r7, #12]
   1c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c7de:	2b00      	cmp	r3, #0
   1c7e0:	d004      	beq.n	1c7ec <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c7e2:	68fb      	ldr	r3, [r7, #12]
   1c7e4:	3318      	adds	r3, #24
   1c7e6:	4618      	mov	r0, r3
   1c7e8:	f7ff fa9a 	bl	1bd20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c7ec:	68fb      	ldr	r3, [r7, #12]
   1c7ee:	3304      	adds	r3, #4
   1c7f0:	4619      	mov	r1, r3
   1c7f2:	4821      	ldr	r0, [pc, #132]	; (1c878 <vTaskSuspend+0xc4>)
   1c7f4:	f7ff fa37 	bl	1bc66 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c7f8:	68fb      	ldr	r3, [r7, #12]
   1c7fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   1c7fe:	b2db      	uxtb	r3, r3
   1c800:	2b01      	cmp	r3, #1
   1c802:	d103      	bne.n	1c80c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c804:	68fb      	ldr	r3, [r7, #12]
   1c806:	2200      	movs	r2, #0
   1c808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c80c:	f7fc faa2 	bl	18d54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   1c810:	4b1a      	ldr	r3, [pc, #104]	; (1c87c <vTaskSuspend+0xc8>)
   1c812:	681b      	ldr	r3, [r3, #0]
   1c814:	2b00      	cmp	r3, #0
   1c816:	d005      	beq.n	1c824 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c818:	f7fc fa76 	bl	18d08 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   1c81c:	f000 fcbe 	bl	1d19c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   1c820:	f7fc fa98 	bl	18d54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c824:	4b13      	ldr	r3, [pc, #76]	; (1c874 <vTaskSuspend+0xc0>)
   1c826:	681b      	ldr	r3, [r3, #0]
   1c828:	68fa      	ldr	r2, [r7, #12]
   1c82a:	429a      	cmp	r2, r3
   1c82c:	d11d      	bne.n	1c86a <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
   1c82e:	4b13      	ldr	r3, [pc, #76]	; (1c87c <vTaskSuspend+0xc8>)
   1c830:	681b      	ldr	r3, [r3, #0]
   1c832:	2b00      	cmp	r3, #0
   1c834:	d00d      	beq.n	1c852 <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c836:	4b12      	ldr	r3, [pc, #72]	; (1c880 <vTaskSuspend+0xcc>)
   1c838:	681b      	ldr	r3, [r3, #0]
   1c83a:	2b00      	cmp	r3, #0
   1c83c:	d000      	beq.n	1c840 <vTaskSuspend+0x8c>
   1c83e:	e7fe      	b.n	1c83e <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
   1c840:	4b10      	ldr	r3, [pc, #64]	; (1c884 <vTaskSuspend+0xd0>)
   1c842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c846:	601a      	str	r2, [r3, #0]
   1c848:	f3bf 8f4f 	dsb	sy
   1c84c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c850:	e00b      	b.n	1c86a <vTaskSuspend+0xb6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   1c852:	4b09      	ldr	r3, [pc, #36]	; (1c878 <vTaskSuspend+0xc4>)
   1c854:	681a      	ldr	r2, [r3, #0]
   1c856:	4b0c      	ldr	r3, [pc, #48]	; (1c888 <vTaskSuspend+0xd4>)
   1c858:	681b      	ldr	r3, [r3, #0]
   1c85a:	429a      	cmp	r2, r3
   1c85c:	d103      	bne.n	1c866 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   1c85e:	4b05      	ldr	r3, [pc, #20]	; (1c874 <vTaskSuspend+0xc0>)
   1c860:	2200      	movs	r2, #0
   1c862:	601a      	str	r2, [r3, #0]
	}
   1c864:	e001      	b.n	1c86a <vTaskSuspend+0xb6>
					vTaskSwitchContext();
   1c866:	f000 f9fd 	bl	1cc64 <vTaskSwitchContext>
	}
   1c86a:	bf00      	nop
   1c86c:	3710      	adds	r7, #16
   1c86e:	46bd      	mov	sp, r7
   1c870:	bd80      	pop	{r7, pc}
   1c872:	bf00      	nop
   1c874:	1000501c 	.word	0x1000501c
   1c878:	100050b4 	.word	0x100050b4
   1c87c:	100050d4 	.word	0x100050d4
   1c880:	100050f0 	.word	0x100050f0
   1c884:	e000ed04 	.word	0xe000ed04
   1c888:	100050c8 	.word	0x100050c8

0001c88c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c88c:	b580      	push	{r7, lr}
   1c88e:	b084      	sub	sp, #16
   1c890:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c892:	4b1a      	ldr	r3, [pc, #104]	; (1c8fc <vTaskStartScheduler+0x70>)
   1c894:	9301      	str	r3, [sp, #4]
   1c896:	2300      	movs	r3, #0
   1c898:	9300      	str	r3, [sp, #0]
   1c89a:	2300      	movs	r3, #0
   1c89c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c8a0:	4917      	ldr	r1, [pc, #92]	; (1c900 <vTaskStartScheduler+0x74>)
   1c8a2:	4818      	ldr	r0, [pc, #96]	; (1c904 <vTaskStartScheduler+0x78>)
   1c8a4:	f7ff fe5e 	bl	1c564 <xTaskCreate>
   1c8a8:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c8aa:	687b      	ldr	r3, [r7, #4]
   1c8ac:	2b01      	cmp	r3, #1
   1c8ae:	d102      	bne.n	1c8b6 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
   1c8b0:	f000 fd1e 	bl	1d2f0 <xTimerCreateTimerTask>
   1c8b4:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c8b6:	687b      	ldr	r3, [r7, #4]
   1c8b8:	2b01      	cmp	r3, #1
   1c8ba:	d115      	bne.n	1c8e8 <vTaskStartScheduler+0x5c>
	__asm volatile
   1c8bc:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c8c0:	f383 8811 	msr	BASEPRI, r3
   1c8c4:	f3bf 8f6f 	isb	sy
   1c8c8:	f3bf 8f4f 	dsb	sy
   1c8cc:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c8ce:	4b0e      	ldr	r3, [pc, #56]	; (1c908 <vTaskStartScheduler+0x7c>)
   1c8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c8d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c8d6:	4b0d      	ldr	r3, [pc, #52]	; (1c90c <vTaskStartScheduler+0x80>)
   1c8d8:	2201      	movs	r2, #1
   1c8da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1c8dc:	4b0c      	ldr	r3, [pc, #48]	; (1c910 <vTaskStartScheduler+0x84>)
   1c8de:	2200      	movs	r2, #0
   1c8e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c8e2:	f7fc f98d 	bl	18c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c8e6:	e004      	b.n	1c8f2 <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c8e8:	687b      	ldr	r3, [r7, #4]
   1c8ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c8ee:	d100      	bne.n	1c8f2 <vTaskStartScheduler+0x66>
   1c8f0:	e7fe      	b.n	1c8f0 <vTaskStartScheduler+0x64>
}
   1c8f2:	bf00      	nop
   1c8f4:	3708      	adds	r7, #8
   1c8f6:	46bd      	mov	sp, r7
   1c8f8:	bd80      	pop	{r7, pc}
   1c8fa:	bf00      	nop
   1c8fc:	100050ec 	.word	0x100050ec
   1c900:	00025a60 	.word	0x00025a60
   1c904:	0001d051 	.word	0x0001d051
   1c908:	100050e8 	.word	0x100050e8
   1c90c:	100050d4 	.word	0x100050d4
   1c910:	100050cc 	.word	0x100050cc

0001c914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c914:	b480      	push	{r7}
   1c916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c918:	4b04      	ldr	r3, [pc, #16]	; (1c92c <vTaskSuspendAll+0x18>)
   1c91a:	681b      	ldr	r3, [r3, #0]
   1c91c:	3301      	adds	r3, #1
   1c91e:	4a03      	ldr	r2, [pc, #12]	; (1c92c <vTaskSuspendAll+0x18>)
   1c920:	6013      	str	r3, [r2, #0]
}
   1c922:	bf00      	nop
   1c924:	46bd      	mov	sp, r7
   1c926:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c92a:	4770      	bx	lr
   1c92c:	100050f0 	.word	0x100050f0

0001c930 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   1c930:	b480      	push	{r7}
   1c932:	b083      	sub	sp, #12
   1c934:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   1c936:	2300      	movs	r3, #0
   1c938:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1c93a:	4b14      	ldr	r3, [pc, #80]	; (1c98c <prvGetExpectedIdleTime+0x5c>)
   1c93c:	681b      	ldr	r3, [r3, #0]
   1c93e:	2b00      	cmp	r3, #0
   1c940:	d001      	beq.n	1c946 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   1c942:	2301      	movs	r3, #1
   1c944:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1c946:	4b12      	ldr	r3, [pc, #72]	; (1c990 <prvGetExpectedIdleTime+0x60>)
   1c948:	681b      	ldr	r3, [r3, #0]
   1c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c94c:	2b00      	cmp	r3, #0
   1c94e:	d002      	beq.n	1c956 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
   1c950:	2300      	movs	r3, #0
   1c952:	607b      	str	r3, [r7, #4]
   1c954:	e012      	b.n	1c97c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1c956:	4b0f      	ldr	r3, [pc, #60]	; (1c994 <prvGetExpectedIdleTime+0x64>)
   1c958:	681b      	ldr	r3, [r3, #0]
   1c95a:	2b01      	cmp	r3, #1
   1c95c:	d902      	bls.n	1c964 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   1c95e:	2300      	movs	r3, #0
   1c960:	607b      	str	r3, [r7, #4]
   1c962:	e00b      	b.n	1c97c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   1c964:	683b      	ldr	r3, [r7, #0]
   1c966:	2b00      	cmp	r3, #0
   1c968:	d002      	beq.n	1c970 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   1c96a:	2300      	movs	r3, #0
   1c96c:	607b      	str	r3, [r7, #4]
   1c96e:	e005      	b.n	1c97c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   1c970:	4b09      	ldr	r3, [pc, #36]	; (1c998 <prvGetExpectedIdleTime+0x68>)
   1c972:	681a      	ldr	r2, [r3, #0]
   1c974:	4b09      	ldr	r3, [pc, #36]	; (1c99c <prvGetExpectedIdleTime+0x6c>)
   1c976:	681b      	ldr	r3, [r3, #0]
   1c978:	1ad3      	subs	r3, r2, r3
   1c97a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
   1c97c:	687b      	ldr	r3, [r7, #4]
	}
   1c97e:	4618      	mov	r0, r3
   1c980:	370c      	adds	r7, #12
   1c982:	46bd      	mov	sp, r7
   1c984:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c988:	4770      	bx	lr
   1c98a:	bf00      	nop
   1c98c:	100050d0 	.word	0x100050d0
   1c990:	1000501c 	.word	0x1000501c
   1c994:	10005020 	.word	0x10005020
   1c998:	100050e8 	.word	0x100050e8
   1c99c:	100050cc 	.word	0x100050cc

0001c9a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c9a0:	b580      	push	{r7, lr}
   1c9a2:	b084      	sub	sp, #16
   1c9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c9a6:	2300      	movs	r3, #0
   1c9a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c9aa:	2300      	movs	r3, #0
   1c9ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c9ae:	4b3d      	ldr	r3, [pc, #244]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9b0:	681b      	ldr	r3, [r3, #0]
   1c9b2:	2b00      	cmp	r3, #0
   1c9b4:	d100      	bne.n	1c9b8 <xTaskResumeAll+0x18>
   1c9b6:	e7fe      	b.n	1c9b6 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c9b8:	f7fc f9a6 	bl	18d08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   1c9bc:	4b39      	ldr	r3, [pc, #228]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9be:	681b      	ldr	r3, [r3, #0]
   1c9c0:	3b01      	subs	r3, #1
   1c9c2:	4a38      	ldr	r2, [pc, #224]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c9c6:	4b37      	ldr	r3, [pc, #220]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9c8:	681b      	ldr	r3, [r3, #0]
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d162      	bne.n	1ca94 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c9ce:	4b36      	ldr	r3, [pc, #216]	; (1caa8 <xTaskResumeAll+0x108>)
   1c9d0:	681b      	ldr	r3, [r3, #0]
   1c9d2:	2b00      	cmp	r3, #0
   1c9d4:	d05e      	beq.n	1ca94 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c9d6:	e02f      	b.n	1ca38 <xTaskResumeAll+0x98>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1c9d8:	4b34      	ldr	r3, [pc, #208]	; (1caac <xTaskResumeAll+0x10c>)
   1c9da:	68db      	ldr	r3, [r3, #12]
   1c9dc:	68db      	ldr	r3, [r3, #12]
   1c9de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c9e0:	68fb      	ldr	r3, [r7, #12]
   1c9e2:	3318      	adds	r3, #24
   1c9e4:	4618      	mov	r0, r3
   1c9e6:	f7ff f99b 	bl	1bd20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c9ea:	68fb      	ldr	r3, [r7, #12]
   1c9ec:	3304      	adds	r3, #4
   1c9ee:	4618      	mov	r0, r3
   1c9f0:	f7ff f996 	bl	1bd20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   1c9f4:	68fb      	ldr	r3, [r7, #12]
   1c9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9f8:	4b2d      	ldr	r3, [pc, #180]	; (1cab0 <xTaskResumeAll+0x110>)
   1c9fa:	681b      	ldr	r3, [r3, #0]
   1c9fc:	429a      	cmp	r2, r3
   1c9fe:	d903      	bls.n	1ca08 <xTaskResumeAll+0x68>
   1ca00:	68fb      	ldr	r3, [r7, #12]
   1ca02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ca04:	4a2a      	ldr	r2, [pc, #168]	; (1cab0 <xTaskResumeAll+0x110>)
   1ca06:	6013      	str	r3, [r2, #0]
   1ca08:	68fb      	ldr	r3, [r7, #12]
   1ca0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca0c:	4613      	mov	r3, r2
   1ca0e:	009b      	lsls	r3, r3, #2
   1ca10:	4413      	add	r3, r2
   1ca12:	009b      	lsls	r3, r3, #2
   1ca14:	4a27      	ldr	r2, [pc, #156]	; (1cab4 <xTaskResumeAll+0x114>)
   1ca16:	441a      	add	r2, r3
   1ca18:	68fb      	ldr	r3, [r7, #12]
   1ca1a:	3304      	adds	r3, #4
   1ca1c:	4619      	mov	r1, r3
   1ca1e:	4610      	mov	r0, r2
   1ca20:	f7ff f921 	bl	1bc66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ca24:	68fb      	ldr	r3, [r7, #12]
   1ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca28:	4b23      	ldr	r3, [pc, #140]	; (1cab8 <xTaskResumeAll+0x118>)
   1ca2a:	681b      	ldr	r3, [r3, #0]
   1ca2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ca2e:	429a      	cmp	r2, r3
   1ca30:	d302      	bcc.n	1ca38 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
   1ca32:	4b22      	ldr	r3, [pc, #136]	; (1cabc <xTaskResumeAll+0x11c>)
   1ca34:	2201      	movs	r2, #1
   1ca36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ca38:	4b1c      	ldr	r3, [pc, #112]	; (1caac <xTaskResumeAll+0x10c>)
   1ca3a:	681b      	ldr	r3, [r3, #0]
   1ca3c:	2b00      	cmp	r3, #0
   1ca3e:	d1cb      	bne.n	1c9d8 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1ca40:	68fb      	ldr	r3, [r7, #12]
   1ca42:	2b00      	cmp	r3, #0
   1ca44:	d001      	beq.n	1ca4a <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1ca46:	f000 fba9 	bl	1d19c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1ca4a:	4b1d      	ldr	r3, [pc, #116]	; (1cac0 <xTaskResumeAll+0x120>)
   1ca4c:	681b      	ldr	r3, [r3, #0]
   1ca4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1ca50:	687b      	ldr	r3, [r7, #4]
   1ca52:	2b00      	cmp	r3, #0
   1ca54:	d010      	beq.n	1ca78 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1ca56:	f000 f865 	bl	1cb24 <xTaskIncrementTick>
   1ca5a:	4603      	mov	r3, r0
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	d002      	beq.n	1ca66 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   1ca60:	4b16      	ldr	r3, [pc, #88]	; (1cabc <xTaskResumeAll+0x11c>)
   1ca62:	2201      	movs	r2, #1
   1ca64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1ca66:	687b      	ldr	r3, [r7, #4]
   1ca68:	3b01      	subs	r3, #1
   1ca6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1ca6c:	687b      	ldr	r3, [r7, #4]
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	d1f1      	bne.n	1ca56 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
   1ca72:	4b13      	ldr	r3, [pc, #76]	; (1cac0 <xTaskResumeAll+0x120>)
   1ca74:	2200      	movs	r2, #0
   1ca76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1ca78:	4b10      	ldr	r3, [pc, #64]	; (1cabc <xTaskResumeAll+0x11c>)
   1ca7a:	681b      	ldr	r3, [r3, #0]
   1ca7c:	2b00      	cmp	r3, #0
   1ca7e:	d009      	beq.n	1ca94 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1ca80:	2301      	movs	r3, #1
   1ca82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1ca84:	4b0f      	ldr	r3, [pc, #60]	; (1cac4 <xTaskResumeAll+0x124>)
   1ca86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ca8a:	601a      	str	r2, [r3, #0]
   1ca8c:	f3bf 8f4f 	dsb	sy
   1ca90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1ca94:	f7fc f95e 	bl	18d54 <vPortExitCritical>

	return xAlreadyYielded;
   1ca98:	68bb      	ldr	r3, [r7, #8]
}
   1ca9a:	4618      	mov	r0, r3
   1ca9c:	3710      	adds	r7, #16
   1ca9e:	46bd      	mov	sp, r7
   1caa0:	bd80      	pop	{r7, pc}
   1caa2:	bf00      	nop
   1caa4:	100050f0 	.word	0x100050f0
   1caa8:	100050c8 	.word	0x100050c8
   1caac:	100050a0 	.word	0x100050a0
   1cab0:	100050d0 	.word	0x100050d0
   1cab4:	10005020 	.word	0x10005020
   1cab8:	1000501c 	.word	0x1000501c
   1cabc:	100050dc 	.word	0x100050dc
   1cac0:	100050d8 	.word	0x100050d8
   1cac4:	e000ed04 	.word	0xe000ed04

0001cac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1cac8:	b480      	push	{r7}
   1caca:	b083      	sub	sp, #12
   1cacc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1cace:	4b05      	ldr	r3, [pc, #20]	; (1cae4 <xTaskGetTickCount+0x1c>)
   1cad0:	681b      	ldr	r3, [r3, #0]
   1cad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1cad4:	687b      	ldr	r3, [r7, #4]
}
   1cad6:	4618      	mov	r0, r3
   1cad8:	370c      	adds	r7, #12
   1cada:	46bd      	mov	sp, r7
   1cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cae0:	4770      	bx	lr
   1cae2:	bf00      	nop
   1cae4:	100050cc 	.word	0x100050cc

0001cae8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   1cae8:	b480      	push	{r7}
   1caea:	b083      	sub	sp, #12
   1caec:	af00      	add	r7, sp, #0
   1caee:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1caf0:	4b0a      	ldr	r3, [pc, #40]	; (1cb1c <vTaskStepTick+0x34>)
   1caf2:	681a      	ldr	r2, [r3, #0]
   1caf4:	687b      	ldr	r3, [r7, #4]
   1caf6:	441a      	add	r2, r3
   1caf8:	4b09      	ldr	r3, [pc, #36]	; (1cb20 <vTaskStepTick+0x38>)
   1cafa:	681b      	ldr	r3, [r3, #0]
   1cafc:	429a      	cmp	r2, r3
   1cafe:	d900      	bls.n	1cb02 <vTaskStepTick+0x1a>
   1cb00:	e7fe      	b.n	1cb00 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
   1cb02:	4b06      	ldr	r3, [pc, #24]	; (1cb1c <vTaskStepTick+0x34>)
   1cb04:	681a      	ldr	r2, [r3, #0]
   1cb06:	687b      	ldr	r3, [r7, #4]
   1cb08:	4413      	add	r3, r2
   1cb0a:	4a04      	ldr	r2, [pc, #16]	; (1cb1c <vTaskStepTick+0x34>)
   1cb0c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   1cb0e:	bf00      	nop
   1cb10:	370c      	adds	r7, #12
   1cb12:	46bd      	mov	sp, r7
   1cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cb18:	4770      	bx	lr
   1cb1a:	bf00      	nop
   1cb1c:	100050cc 	.word	0x100050cc
   1cb20:	100050e8 	.word	0x100050e8

0001cb24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1cb24:	b580      	push	{r7, lr}
   1cb26:	b086      	sub	sp, #24
   1cb28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1cb2a:	2300      	movs	r3, #0
   1cb2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cb2e:	4b42      	ldr	r3, [pc, #264]	; (1cc38 <xTaskIncrementTick+0x114>)
   1cb30:	681b      	ldr	r3, [r3, #0]
   1cb32:	2b00      	cmp	r3, #0
   1cb34:	d16f      	bne.n	1cc16 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1cb36:	4b41      	ldr	r3, [pc, #260]	; (1cc3c <xTaskIncrementTick+0x118>)
   1cb38:	681b      	ldr	r3, [r3, #0]
   1cb3a:	3301      	adds	r3, #1
   1cb3c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1cb3e:	4a3f      	ldr	r2, [pc, #252]	; (1cc3c <xTaskIncrementTick+0x118>)
   1cb40:	693b      	ldr	r3, [r7, #16]
   1cb42:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1cb44:	693b      	ldr	r3, [r7, #16]
   1cb46:	2b00      	cmp	r3, #0
   1cb48:	d116      	bne.n	1cb78 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
   1cb4a:	4b3d      	ldr	r3, [pc, #244]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb4c:	681b      	ldr	r3, [r3, #0]
   1cb4e:	681b      	ldr	r3, [r3, #0]
   1cb50:	2b00      	cmp	r3, #0
   1cb52:	d000      	beq.n	1cb56 <xTaskIncrementTick+0x32>
   1cb54:	e7fe      	b.n	1cb54 <xTaskIncrementTick+0x30>
   1cb56:	4b3a      	ldr	r3, [pc, #232]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb58:	681b      	ldr	r3, [r3, #0]
   1cb5a:	60fb      	str	r3, [r7, #12]
   1cb5c:	4b39      	ldr	r3, [pc, #228]	; (1cc44 <xTaskIncrementTick+0x120>)
   1cb5e:	681b      	ldr	r3, [r3, #0]
   1cb60:	4a37      	ldr	r2, [pc, #220]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb62:	6013      	str	r3, [r2, #0]
   1cb64:	4a37      	ldr	r2, [pc, #220]	; (1cc44 <xTaskIncrementTick+0x120>)
   1cb66:	68fb      	ldr	r3, [r7, #12]
   1cb68:	6013      	str	r3, [r2, #0]
   1cb6a:	4b37      	ldr	r3, [pc, #220]	; (1cc48 <xTaskIncrementTick+0x124>)
   1cb6c:	681b      	ldr	r3, [r3, #0]
   1cb6e:	3301      	adds	r3, #1
   1cb70:	4a35      	ldr	r2, [pc, #212]	; (1cc48 <xTaskIncrementTick+0x124>)
   1cb72:	6013      	str	r3, [r2, #0]
   1cb74:	f000 fb12 	bl	1d19c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1cb78:	4b34      	ldr	r3, [pc, #208]	; (1cc4c <xTaskIncrementTick+0x128>)
   1cb7a:	681b      	ldr	r3, [r3, #0]
   1cb7c:	693a      	ldr	r2, [r7, #16]
   1cb7e:	429a      	cmp	r2, r3
   1cb80:	d34e      	bcc.n	1cc20 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cb82:	4b2f      	ldr	r3, [pc, #188]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb84:	681b      	ldr	r3, [r3, #0]
   1cb86:	681b      	ldr	r3, [r3, #0]
   1cb88:	2b00      	cmp	r3, #0
   1cb8a:	d104      	bne.n	1cb96 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cb8c:	4b2f      	ldr	r3, [pc, #188]	; (1cc4c <xTaskIncrementTick+0x128>)
   1cb8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cb92:	601a      	str	r2, [r3, #0]
					break;
   1cb94:	e044      	b.n	1cc20 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1cb96:	4b2a      	ldr	r3, [pc, #168]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb98:	681b      	ldr	r3, [r3, #0]
   1cb9a:	68db      	ldr	r3, [r3, #12]
   1cb9c:	68db      	ldr	r3, [r3, #12]
   1cb9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1cba0:	68bb      	ldr	r3, [r7, #8]
   1cba2:	685b      	ldr	r3, [r3, #4]
   1cba4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1cba6:	693a      	ldr	r2, [r7, #16]
   1cba8:	687b      	ldr	r3, [r7, #4]
   1cbaa:	429a      	cmp	r2, r3
   1cbac:	d203      	bcs.n	1cbb6 <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1cbae:	4a27      	ldr	r2, [pc, #156]	; (1cc4c <xTaskIncrementTick+0x128>)
   1cbb0:	687b      	ldr	r3, [r7, #4]
   1cbb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   1cbb4:	e034      	b.n	1cc20 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cbb6:	68bb      	ldr	r3, [r7, #8]
   1cbb8:	3304      	adds	r3, #4
   1cbba:	4618      	mov	r0, r3
   1cbbc:	f7ff f8b0 	bl	1bd20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cbc0:	68bb      	ldr	r3, [r7, #8]
   1cbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cbc4:	2b00      	cmp	r3, #0
   1cbc6:	d004      	beq.n	1cbd2 <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cbc8:	68bb      	ldr	r3, [r7, #8]
   1cbca:	3318      	adds	r3, #24
   1cbcc:	4618      	mov	r0, r3
   1cbce:	f7ff f8a7 	bl	1bd20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1cbd2:	68bb      	ldr	r3, [r7, #8]
   1cbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbd6:	4b1e      	ldr	r3, [pc, #120]	; (1cc50 <xTaskIncrementTick+0x12c>)
   1cbd8:	681b      	ldr	r3, [r3, #0]
   1cbda:	429a      	cmp	r2, r3
   1cbdc:	d903      	bls.n	1cbe6 <xTaskIncrementTick+0xc2>
   1cbde:	68bb      	ldr	r3, [r7, #8]
   1cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cbe2:	4a1b      	ldr	r2, [pc, #108]	; (1cc50 <xTaskIncrementTick+0x12c>)
   1cbe4:	6013      	str	r3, [r2, #0]
   1cbe6:	68bb      	ldr	r3, [r7, #8]
   1cbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbea:	4613      	mov	r3, r2
   1cbec:	009b      	lsls	r3, r3, #2
   1cbee:	4413      	add	r3, r2
   1cbf0:	009b      	lsls	r3, r3, #2
   1cbf2:	4a18      	ldr	r2, [pc, #96]	; (1cc54 <xTaskIncrementTick+0x130>)
   1cbf4:	441a      	add	r2, r3
   1cbf6:	68bb      	ldr	r3, [r7, #8]
   1cbf8:	3304      	adds	r3, #4
   1cbfa:	4619      	mov	r1, r3
   1cbfc:	4610      	mov	r0, r2
   1cbfe:	f7ff f832 	bl	1bc66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cc02:	68bb      	ldr	r3, [r7, #8]
   1cc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc06:	4b14      	ldr	r3, [pc, #80]	; (1cc58 <xTaskIncrementTick+0x134>)
   1cc08:	681b      	ldr	r3, [r3, #0]
   1cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc0c:	429a      	cmp	r2, r3
   1cc0e:	d3b8      	bcc.n	1cb82 <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
   1cc10:	2301      	movs	r3, #1
   1cc12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cc14:	e7b5      	b.n	1cb82 <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1cc16:	4b11      	ldr	r3, [pc, #68]	; (1cc5c <xTaskIncrementTick+0x138>)
   1cc18:	681b      	ldr	r3, [r3, #0]
   1cc1a:	3301      	adds	r3, #1
   1cc1c:	4a0f      	ldr	r2, [pc, #60]	; (1cc5c <xTaskIncrementTick+0x138>)
   1cc1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1cc20:	4b0f      	ldr	r3, [pc, #60]	; (1cc60 <xTaskIncrementTick+0x13c>)
   1cc22:	681b      	ldr	r3, [r3, #0]
   1cc24:	2b00      	cmp	r3, #0
   1cc26:	d001      	beq.n	1cc2c <xTaskIncrementTick+0x108>
		{
			xSwitchRequired = pdTRUE;
   1cc28:	2301      	movs	r3, #1
   1cc2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1cc2c:	697b      	ldr	r3, [r7, #20]
}
   1cc2e:	4618      	mov	r0, r3
   1cc30:	3718      	adds	r7, #24
   1cc32:	46bd      	mov	sp, r7
   1cc34:	bd80      	pop	{r7, pc}
   1cc36:	bf00      	nop
   1cc38:	100050f0 	.word	0x100050f0
   1cc3c:	100050cc 	.word	0x100050cc
   1cc40:	10005098 	.word	0x10005098
   1cc44:	1000509c 	.word	0x1000509c
   1cc48:	100050e0 	.word	0x100050e0
   1cc4c:	100050e8 	.word	0x100050e8
   1cc50:	100050d0 	.word	0x100050d0
   1cc54:	10005020 	.word	0x10005020
   1cc58:	1000501c 	.word	0x1000501c
   1cc5c:	100050d8 	.word	0x100050d8
   1cc60:	100050dc 	.word	0x100050dc

0001cc64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1cc64:	b580      	push	{r7, lr}
   1cc66:	b084      	sub	sp, #16
   1cc68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1cc6a:	4b35      	ldr	r3, [pc, #212]	; (1cd40 <vTaskSwitchContext+0xdc>)
   1cc6c:	681b      	ldr	r3, [r3, #0]
   1cc6e:	2b00      	cmp	r3, #0
   1cc70:	d003      	beq.n	1cc7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1cc72:	4b34      	ldr	r3, [pc, #208]	; (1cd44 <vTaskSwitchContext+0xe0>)
   1cc74:	2201      	movs	r2, #1
   1cc76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1cc78:	e05e      	b.n	1cd38 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
   1cc7a:	4b32      	ldr	r3, [pc, #200]	; (1cd44 <vTaskSwitchContext+0xe0>)
   1cc7c:	2200      	movs	r2, #0
   1cc7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1cc80:	4b31      	ldr	r3, [pc, #196]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1cc82:	681b      	ldr	r3, [r3, #0]
   1cc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cc86:	60bb      	str	r3, [r7, #8]
   1cc88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   1cc8c:	607b      	str	r3, [r7, #4]
   1cc8e:	68bb      	ldr	r3, [r7, #8]
   1cc90:	681a      	ldr	r2, [r3, #0]
   1cc92:	687b      	ldr	r3, [r7, #4]
   1cc94:	429a      	cmp	r2, r3
   1cc96:	d111      	bne.n	1ccbc <vTaskSwitchContext+0x58>
   1cc98:	68bb      	ldr	r3, [r7, #8]
   1cc9a:	3304      	adds	r3, #4
   1cc9c:	681a      	ldr	r2, [r3, #0]
   1cc9e:	687b      	ldr	r3, [r7, #4]
   1cca0:	429a      	cmp	r2, r3
   1cca2:	d10b      	bne.n	1ccbc <vTaskSwitchContext+0x58>
   1cca4:	68bb      	ldr	r3, [r7, #8]
   1cca6:	3308      	adds	r3, #8
   1cca8:	681a      	ldr	r2, [r3, #0]
   1ccaa:	687b      	ldr	r3, [r7, #4]
   1ccac:	429a      	cmp	r2, r3
   1ccae:	d105      	bne.n	1ccbc <vTaskSwitchContext+0x58>
   1ccb0:	68bb      	ldr	r3, [r7, #8]
   1ccb2:	330c      	adds	r3, #12
   1ccb4:	681a      	ldr	r2, [r3, #0]
   1ccb6:	687b      	ldr	r3, [r7, #4]
   1ccb8:	429a      	cmp	r2, r3
   1ccba:	d008      	beq.n	1ccce <vTaskSwitchContext+0x6a>
   1ccbc:	4b22      	ldr	r3, [pc, #136]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1ccbe:	681a      	ldr	r2, [r3, #0]
   1ccc0:	4b21      	ldr	r3, [pc, #132]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1ccc2:	681b      	ldr	r3, [r3, #0]
   1ccc4:	3334      	adds	r3, #52	; 0x34
   1ccc6:	4619      	mov	r1, r3
   1ccc8:	4610      	mov	r0, r2
   1ccca:	f7fe fbfd 	bl	1b4c8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ccce:	4b1f      	ldr	r3, [pc, #124]	; (1cd4c <vTaskSwitchContext+0xe8>)
   1ccd0:	681b      	ldr	r3, [r3, #0]
   1ccd2:	60fb      	str	r3, [r7, #12]
   1ccd4:	e006      	b.n	1cce4 <vTaskSwitchContext+0x80>
   1ccd6:	68fb      	ldr	r3, [r7, #12]
   1ccd8:	2b00      	cmp	r3, #0
   1ccda:	d100      	bne.n	1ccde <vTaskSwitchContext+0x7a>
   1ccdc:	e7fe      	b.n	1ccdc <vTaskSwitchContext+0x78>
   1ccde:	68fb      	ldr	r3, [r7, #12]
   1cce0:	3b01      	subs	r3, #1
   1cce2:	60fb      	str	r3, [r7, #12]
   1cce4:	491a      	ldr	r1, [pc, #104]	; (1cd50 <vTaskSwitchContext+0xec>)
   1cce6:	68fa      	ldr	r2, [r7, #12]
   1cce8:	4613      	mov	r3, r2
   1ccea:	009b      	lsls	r3, r3, #2
   1ccec:	4413      	add	r3, r2
   1ccee:	009b      	lsls	r3, r3, #2
   1ccf0:	440b      	add	r3, r1
   1ccf2:	681b      	ldr	r3, [r3, #0]
   1ccf4:	2b00      	cmp	r3, #0
   1ccf6:	d0ee      	beq.n	1ccd6 <vTaskSwitchContext+0x72>
   1ccf8:	68fa      	ldr	r2, [r7, #12]
   1ccfa:	4613      	mov	r3, r2
   1ccfc:	009b      	lsls	r3, r3, #2
   1ccfe:	4413      	add	r3, r2
   1cd00:	009b      	lsls	r3, r3, #2
   1cd02:	4a13      	ldr	r2, [pc, #76]	; (1cd50 <vTaskSwitchContext+0xec>)
   1cd04:	4413      	add	r3, r2
   1cd06:	603b      	str	r3, [r7, #0]
   1cd08:	683b      	ldr	r3, [r7, #0]
   1cd0a:	685b      	ldr	r3, [r3, #4]
   1cd0c:	685a      	ldr	r2, [r3, #4]
   1cd0e:	683b      	ldr	r3, [r7, #0]
   1cd10:	605a      	str	r2, [r3, #4]
   1cd12:	683b      	ldr	r3, [r7, #0]
   1cd14:	685a      	ldr	r2, [r3, #4]
   1cd16:	683b      	ldr	r3, [r7, #0]
   1cd18:	3308      	adds	r3, #8
   1cd1a:	429a      	cmp	r2, r3
   1cd1c:	d104      	bne.n	1cd28 <vTaskSwitchContext+0xc4>
   1cd1e:	683b      	ldr	r3, [r7, #0]
   1cd20:	685b      	ldr	r3, [r3, #4]
   1cd22:	685a      	ldr	r2, [r3, #4]
   1cd24:	683b      	ldr	r3, [r7, #0]
   1cd26:	605a      	str	r2, [r3, #4]
   1cd28:	683b      	ldr	r3, [r7, #0]
   1cd2a:	685b      	ldr	r3, [r3, #4]
   1cd2c:	68db      	ldr	r3, [r3, #12]
   1cd2e:	4a06      	ldr	r2, [pc, #24]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1cd30:	6013      	str	r3, [r2, #0]
   1cd32:	4a06      	ldr	r2, [pc, #24]	; (1cd4c <vTaskSwitchContext+0xe8>)
   1cd34:	68fb      	ldr	r3, [r7, #12]
   1cd36:	6013      	str	r3, [r2, #0]
}
   1cd38:	bf00      	nop
   1cd3a:	3710      	adds	r7, #16
   1cd3c:	46bd      	mov	sp, r7
   1cd3e:	bd80      	pop	{r7, pc}
   1cd40:	100050f0 	.word	0x100050f0
   1cd44:	100050dc 	.word	0x100050dc
   1cd48:	1000501c 	.word	0x1000501c
   1cd4c:	100050d0 	.word	0x100050d0
   1cd50:	10005020 	.word	0x10005020

0001cd54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1cd54:	b580      	push	{r7, lr}
   1cd56:	b082      	sub	sp, #8
   1cd58:	af00      	add	r7, sp, #0
   1cd5a:	6078      	str	r0, [r7, #4]
   1cd5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1cd5e:	687b      	ldr	r3, [r7, #4]
   1cd60:	2b00      	cmp	r3, #0
   1cd62:	d100      	bne.n	1cd66 <vTaskPlaceOnEventList+0x12>
   1cd64:	e7fe      	b.n	1cd64 <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cd66:	4b07      	ldr	r3, [pc, #28]	; (1cd84 <vTaskPlaceOnEventList+0x30>)
   1cd68:	681b      	ldr	r3, [r3, #0]
   1cd6a:	3318      	adds	r3, #24
   1cd6c:	4619      	mov	r1, r3
   1cd6e:	6878      	ldr	r0, [r7, #4]
   1cd70:	f7fe ff9d 	bl	1bcae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cd74:	2101      	movs	r1, #1
   1cd76:	6838      	ldr	r0, [r7, #0]
   1cd78:	f000 fa66 	bl	1d248 <prvAddCurrentTaskToDelayedList>
}
   1cd7c:	bf00      	nop
   1cd7e:	3708      	adds	r7, #8
   1cd80:	46bd      	mov	sp, r7
   1cd82:	bd80      	pop	{r7, pc}
   1cd84:	1000501c 	.word	0x1000501c

0001cd88 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   1cd88:	b580      	push	{r7, lr}
   1cd8a:	b084      	sub	sp, #16
   1cd8c:	af00      	add	r7, sp, #0
   1cd8e:	60f8      	str	r0, [r7, #12]
   1cd90:	60b9      	str	r1, [r7, #8]
   1cd92:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
   1cd94:	68fb      	ldr	r3, [r7, #12]
   1cd96:	2b00      	cmp	r3, #0
   1cd98:	d100      	bne.n	1cd9c <vTaskPlaceOnUnorderedEventList+0x14>
   1cd9a:	e7fe      	b.n	1cd9a <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   1cd9c:	4b0c      	ldr	r3, [pc, #48]	; (1cdd0 <vTaskPlaceOnUnorderedEventList+0x48>)
   1cd9e:	681b      	ldr	r3, [r3, #0]
   1cda0:	2b00      	cmp	r3, #0
   1cda2:	d100      	bne.n	1cda6 <vTaskPlaceOnUnorderedEventList+0x1e>
   1cda4:	e7fe      	b.n	1cda4 <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1cda6:	4b0b      	ldr	r3, [pc, #44]	; (1cdd4 <vTaskPlaceOnUnorderedEventList+0x4c>)
   1cda8:	681b      	ldr	r3, [r3, #0]
   1cdaa:	68ba      	ldr	r2, [r7, #8]
   1cdac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1cdb0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cdb2:	4b08      	ldr	r3, [pc, #32]	; (1cdd4 <vTaskPlaceOnUnorderedEventList+0x4c>)
   1cdb4:	681b      	ldr	r3, [r3, #0]
   1cdb6:	3318      	adds	r3, #24
   1cdb8:	4619      	mov	r1, r3
   1cdba:	68f8      	ldr	r0, [r7, #12]
   1cdbc:	f7fe ff53 	bl	1bc66 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cdc0:	2101      	movs	r1, #1
   1cdc2:	6878      	ldr	r0, [r7, #4]
   1cdc4:	f000 fa40 	bl	1d248 <prvAddCurrentTaskToDelayedList>
}
   1cdc8:	bf00      	nop
   1cdca:	3710      	adds	r7, #16
   1cdcc:	46bd      	mov	sp, r7
   1cdce:	bd80      	pop	{r7, pc}
   1cdd0:	100050f0 	.word	0x100050f0
   1cdd4:	1000501c 	.word	0x1000501c

0001cdd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1cdd8:	b580      	push	{r7, lr}
   1cdda:	b084      	sub	sp, #16
   1cddc:	af00      	add	r7, sp, #0
   1cdde:	60f8      	str	r0, [r7, #12]
   1cde0:	60b9      	str	r1, [r7, #8]
   1cde2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1cde4:	68fb      	ldr	r3, [r7, #12]
   1cde6:	2b00      	cmp	r3, #0
   1cde8:	d100      	bne.n	1cdec <vTaskPlaceOnEventListRestricted+0x14>
   1cdea:	e7fe      	b.n	1cdea <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cdec:	4b0a      	ldr	r3, [pc, #40]	; (1ce18 <vTaskPlaceOnEventListRestricted+0x40>)
   1cdee:	681b      	ldr	r3, [r3, #0]
   1cdf0:	3318      	adds	r3, #24
   1cdf2:	4619      	mov	r1, r3
   1cdf4:	68f8      	ldr	r0, [r7, #12]
   1cdf6:	f7fe ff36 	bl	1bc66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1cdfa:	687b      	ldr	r3, [r7, #4]
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d002      	beq.n	1ce06 <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
   1ce00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ce06:	6879      	ldr	r1, [r7, #4]
   1ce08:	68b8      	ldr	r0, [r7, #8]
   1ce0a:	f000 fa1d 	bl	1d248 <prvAddCurrentTaskToDelayedList>
	}
   1ce0e:	bf00      	nop
   1ce10:	3710      	adds	r7, #16
   1ce12:	46bd      	mov	sp, r7
   1ce14:	bd80      	pop	{r7, pc}
   1ce16:	bf00      	nop
   1ce18:	1000501c 	.word	0x1000501c

0001ce1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ce1c:	b580      	push	{r7, lr}
   1ce1e:	b084      	sub	sp, #16
   1ce20:	af00      	add	r7, sp, #0
   1ce22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ce24:	687b      	ldr	r3, [r7, #4]
   1ce26:	68db      	ldr	r3, [r3, #12]
   1ce28:	68db      	ldr	r3, [r3, #12]
   1ce2a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ce2c:	68bb      	ldr	r3, [r7, #8]
   1ce2e:	2b00      	cmp	r3, #0
   1ce30:	d100      	bne.n	1ce34 <xTaskRemoveFromEventList+0x18>
   1ce32:	e7fe      	b.n	1ce32 <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ce34:	68bb      	ldr	r3, [r7, #8]
   1ce36:	3318      	adds	r3, #24
   1ce38:	4618      	mov	r0, r3
   1ce3a:	f7fe ff71 	bl	1bd20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ce3e:	4b1f      	ldr	r3, [pc, #124]	; (1cebc <xTaskRemoveFromEventList+0xa0>)
   1ce40:	681b      	ldr	r3, [r3, #0]
   1ce42:	2b00      	cmp	r3, #0
   1ce44:	d11d      	bne.n	1ce82 <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ce46:	68bb      	ldr	r3, [r7, #8]
   1ce48:	3304      	adds	r3, #4
   1ce4a:	4618      	mov	r0, r3
   1ce4c:	f7fe ff68 	bl	1bd20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ce50:	68bb      	ldr	r3, [r7, #8]
   1ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce54:	4b1a      	ldr	r3, [pc, #104]	; (1cec0 <xTaskRemoveFromEventList+0xa4>)
   1ce56:	681b      	ldr	r3, [r3, #0]
   1ce58:	429a      	cmp	r2, r3
   1ce5a:	d903      	bls.n	1ce64 <xTaskRemoveFromEventList+0x48>
   1ce5c:	68bb      	ldr	r3, [r7, #8]
   1ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce60:	4a17      	ldr	r2, [pc, #92]	; (1cec0 <xTaskRemoveFromEventList+0xa4>)
   1ce62:	6013      	str	r3, [r2, #0]
   1ce64:	68bb      	ldr	r3, [r7, #8]
   1ce66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce68:	4613      	mov	r3, r2
   1ce6a:	009b      	lsls	r3, r3, #2
   1ce6c:	4413      	add	r3, r2
   1ce6e:	009b      	lsls	r3, r3, #2
   1ce70:	4a14      	ldr	r2, [pc, #80]	; (1cec4 <xTaskRemoveFromEventList+0xa8>)
   1ce72:	441a      	add	r2, r3
   1ce74:	68bb      	ldr	r3, [r7, #8]
   1ce76:	3304      	adds	r3, #4
   1ce78:	4619      	mov	r1, r3
   1ce7a:	4610      	mov	r0, r2
   1ce7c:	f7fe fef3 	bl	1bc66 <vListInsertEnd>
   1ce80:	e005      	b.n	1ce8e <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1ce82:	68bb      	ldr	r3, [r7, #8]
   1ce84:	3318      	adds	r3, #24
   1ce86:	4619      	mov	r1, r3
   1ce88:	480f      	ldr	r0, [pc, #60]	; (1cec8 <xTaskRemoveFromEventList+0xac>)
   1ce8a:	f7fe feec 	bl	1bc66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1ce8e:	68bb      	ldr	r3, [r7, #8]
   1ce90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce92:	4b0e      	ldr	r3, [pc, #56]	; (1cecc <xTaskRemoveFromEventList+0xb0>)
   1ce94:	681b      	ldr	r3, [r3, #0]
   1ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce98:	429a      	cmp	r2, r3
   1ce9a:	d905      	bls.n	1cea8 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1ce9c:	2301      	movs	r3, #1
   1ce9e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1cea0:	4b0b      	ldr	r3, [pc, #44]	; (1ced0 <xTaskRemoveFromEventList+0xb4>)
   1cea2:	2201      	movs	r2, #1
   1cea4:	601a      	str	r2, [r3, #0]
   1cea6:	e001      	b.n	1ceac <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
   1cea8:	2300      	movs	r3, #0
   1ceaa:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   1ceac:	f000 f976 	bl	1d19c <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   1ceb0:	68fb      	ldr	r3, [r7, #12]
}
   1ceb2:	4618      	mov	r0, r3
   1ceb4:	3710      	adds	r7, #16
   1ceb6:	46bd      	mov	sp, r7
   1ceb8:	bd80      	pop	{r7, pc}
   1ceba:	bf00      	nop
   1cebc:	100050f0 	.word	0x100050f0
   1cec0:	100050d0 	.word	0x100050d0
   1cec4:	10005020 	.word	0x10005020
   1cec8:	100050a0 	.word	0x100050a0
   1cecc:	1000501c 	.word	0x1000501c
   1ced0:	100050dc 	.word	0x100050dc

0001ced4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   1ced4:	b580      	push	{r7, lr}
   1ced6:	b084      	sub	sp, #16
   1ced8:	af00      	add	r7, sp, #0
   1ceda:	6078      	str	r0, [r7, #4]
   1cedc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1cede:	4b1f      	ldr	r3, [pc, #124]	; (1cf5c <vTaskRemoveFromUnorderedEventList+0x88>)
   1cee0:	681b      	ldr	r3, [r3, #0]
   1cee2:	2b00      	cmp	r3, #0
   1cee4:	d100      	bne.n	1cee8 <vTaskRemoveFromUnorderedEventList+0x14>
   1cee6:	e7fe      	b.n	1cee6 <vTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1cee8:	683b      	ldr	r3, [r7, #0]
   1ceea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   1ceee:	687b      	ldr	r3, [r7, #4]
   1cef0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1cef2:	687b      	ldr	r3, [r7, #4]
   1cef4:	68db      	ldr	r3, [r3, #12]
   1cef6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
   1cef8:	68fb      	ldr	r3, [r7, #12]
   1cefa:	2b00      	cmp	r3, #0
   1cefc:	d100      	bne.n	1cf00 <vTaskRemoveFromUnorderedEventList+0x2c>
   1cefe:	e7fe      	b.n	1cefe <vTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
   1cf00:	6878      	ldr	r0, [r7, #4]
   1cf02:	f7fe ff0d 	bl	1bd20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1cf06:	68fb      	ldr	r3, [r7, #12]
   1cf08:	3304      	adds	r3, #4
   1cf0a:	4618      	mov	r0, r3
   1cf0c:	f7fe ff08 	bl	1bd20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   1cf10:	68fb      	ldr	r3, [r7, #12]
   1cf12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf14:	4b12      	ldr	r3, [pc, #72]	; (1cf60 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1cf16:	681b      	ldr	r3, [r3, #0]
   1cf18:	429a      	cmp	r2, r3
   1cf1a:	d903      	bls.n	1cf24 <vTaskRemoveFromUnorderedEventList+0x50>
   1cf1c:	68fb      	ldr	r3, [r7, #12]
   1cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf20:	4a0f      	ldr	r2, [pc, #60]	; (1cf60 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1cf22:	6013      	str	r3, [r2, #0]
   1cf24:	68fb      	ldr	r3, [r7, #12]
   1cf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf28:	4613      	mov	r3, r2
   1cf2a:	009b      	lsls	r3, r3, #2
   1cf2c:	4413      	add	r3, r2
   1cf2e:	009b      	lsls	r3, r3, #2
   1cf30:	4a0c      	ldr	r2, [pc, #48]	; (1cf64 <vTaskRemoveFromUnorderedEventList+0x90>)
   1cf32:	441a      	add	r2, r3
   1cf34:	68fb      	ldr	r3, [r7, #12]
   1cf36:	3304      	adds	r3, #4
   1cf38:	4619      	mov	r1, r3
   1cf3a:	4610      	mov	r0, r2
   1cf3c:	f7fe fe93 	bl	1bc66 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1cf40:	68fb      	ldr	r3, [r7, #12]
   1cf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf44:	4b08      	ldr	r3, [pc, #32]	; (1cf68 <vTaskRemoveFromUnorderedEventList+0x94>)
   1cf46:	681b      	ldr	r3, [r3, #0]
   1cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf4a:	429a      	cmp	r2, r3
   1cf4c:	d902      	bls.n	1cf54 <vTaskRemoveFromUnorderedEventList+0x80>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   1cf4e:	4b07      	ldr	r3, [pc, #28]	; (1cf6c <vTaskRemoveFromUnorderedEventList+0x98>)
   1cf50:	2201      	movs	r2, #1
   1cf52:	601a      	str	r2, [r3, #0]
	}
}
   1cf54:	bf00      	nop
   1cf56:	3710      	adds	r7, #16
   1cf58:	46bd      	mov	sp, r7
   1cf5a:	bd80      	pop	{r7, pc}
   1cf5c:	100050f0 	.word	0x100050f0
   1cf60:	100050d0 	.word	0x100050d0
   1cf64:	10005020 	.word	0x10005020
   1cf68:	1000501c 	.word	0x1000501c
   1cf6c:	100050dc 	.word	0x100050dc

0001cf70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cf70:	b480      	push	{r7}
   1cf72:	b083      	sub	sp, #12
   1cf74:	af00      	add	r7, sp, #0
   1cf76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cf78:	4b06      	ldr	r3, [pc, #24]	; (1cf94 <vTaskInternalSetTimeOutState+0x24>)
   1cf7a:	681a      	ldr	r2, [r3, #0]
   1cf7c:	687b      	ldr	r3, [r7, #4]
   1cf7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1cf80:	4b05      	ldr	r3, [pc, #20]	; (1cf98 <vTaskInternalSetTimeOutState+0x28>)
   1cf82:	681a      	ldr	r2, [r3, #0]
   1cf84:	687b      	ldr	r3, [r7, #4]
   1cf86:	605a      	str	r2, [r3, #4]
}
   1cf88:	bf00      	nop
   1cf8a:	370c      	adds	r7, #12
   1cf8c:	46bd      	mov	sp, r7
   1cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf92:	4770      	bx	lr
   1cf94:	100050e0 	.word	0x100050e0
   1cf98:	100050cc 	.word	0x100050cc

0001cf9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1cf9c:	b580      	push	{r7, lr}
   1cf9e:	b086      	sub	sp, #24
   1cfa0:	af00      	add	r7, sp, #0
   1cfa2:	6078      	str	r0, [r7, #4]
   1cfa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1cfa6:	687b      	ldr	r3, [r7, #4]
   1cfa8:	2b00      	cmp	r3, #0
   1cfaa:	d100      	bne.n	1cfae <xTaskCheckForTimeOut+0x12>
   1cfac:	e7fe      	b.n	1cfac <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
   1cfae:	683b      	ldr	r3, [r7, #0]
   1cfb0:	2b00      	cmp	r3, #0
   1cfb2:	d100      	bne.n	1cfb6 <xTaskCheckForTimeOut+0x1a>
   1cfb4:	e7fe      	b.n	1cfb4 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
   1cfb6:	f7fb fea7 	bl	18d08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1cfba:	4b1d      	ldr	r3, [pc, #116]	; (1d030 <xTaskCheckForTimeOut+0x94>)
   1cfbc:	681b      	ldr	r3, [r3, #0]
   1cfbe:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1cfc0:	687b      	ldr	r3, [r7, #4]
   1cfc2:	685b      	ldr	r3, [r3, #4]
   1cfc4:	693a      	ldr	r2, [r7, #16]
   1cfc6:	1ad3      	subs	r3, r2, r3
   1cfc8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1cfca:	683b      	ldr	r3, [r7, #0]
   1cfcc:	681b      	ldr	r3, [r3, #0]
   1cfce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cfd2:	d102      	bne.n	1cfda <xTaskCheckForTimeOut+0x3e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1cfd4:	2300      	movs	r3, #0
   1cfd6:	617b      	str	r3, [r7, #20]
   1cfd8:	e023      	b.n	1d022 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1cfda:	687b      	ldr	r3, [r7, #4]
   1cfdc:	681a      	ldr	r2, [r3, #0]
   1cfde:	4b15      	ldr	r3, [pc, #84]	; (1d034 <xTaskCheckForTimeOut+0x98>)
   1cfe0:	681b      	ldr	r3, [r3, #0]
   1cfe2:	429a      	cmp	r2, r3
   1cfe4:	d007      	beq.n	1cff6 <xTaskCheckForTimeOut+0x5a>
   1cfe6:	687b      	ldr	r3, [r7, #4]
   1cfe8:	685a      	ldr	r2, [r3, #4]
   1cfea:	693b      	ldr	r3, [r7, #16]
   1cfec:	429a      	cmp	r2, r3
   1cfee:	d802      	bhi.n	1cff6 <xTaskCheckForTimeOut+0x5a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1cff0:	2301      	movs	r3, #1
   1cff2:	617b      	str	r3, [r7, #20]
   1cff4:	e015      	b.n	1d022 <xTaskCheckForTimeOut+0x86>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1cff6:	683b      	ldr	r3, [r7, #0]
   1cff8:	681a      	ldr	r2, [r3, #0]
   1cffa:	68fb      	ldr	r3, [r7, #12]
   1cffc:	429a      	cmp	r2, r3
   1cffe:	d90b      	bls.n	1d018 <xTaskCheckForTimeOut+0x7c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d000:	683b      	ldr	r3, [r7, #0]
   1d002:	681a      	ldr	r2, [r3, #0]
   1d004:	68fb      	ldr	r3, [r7, #12]
   1d006:	1ad2      	subs	r2, r2, r3
   1d008:	683b      	ldr	r3, [r7, #0]
   1d00a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d00c:	6878      	ldr	r0, [r7, #4]
   1d00e:	f7ff ffaf 	bl	1cf70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   1d012:	2300      	movs	r3, #0
   1d014:	617b      	str	r3, [r7, #20]
   1d016:	e004      	b.n	1d022 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			*pxTicksToWait = 0;
   1d018:	683b      	ldr	r3, [r7, #0]
   1d01a:	2200      	movs	r2, #0
   1d01c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d01e:	2301      	movs	r3, #1
   1d020:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d022:	f7fb fe97 	bl	18d54 <vPortExitCritical>

	return xReturn;
   1d026:	697b      	ldr	r3, [r7, #20]
}
   1d028:	4618      	mov	r0, r3
   1d02a:	3718      	adds	r7, #24
   1d02c:	46bd      	mov	sp, r7
   1d02e:	bd80      	pop	{r7, pc}
   1d030:	100050cc 	.word	0x100050cc
   1d034:	100050e0 	.word	0x100050e0

0001d038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d038:	b480      	push	{r7}
   1d03a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d03c:	4b03      	ldr	r3, [pc, #12]	; (1d04c <vTaskMissedYield+0x14>)
   1d03e:	2201      	movs	r2, #1
   1d040:	601a      	str	r2, [r3, #0]
}
   1d042:	bf00      	nop
   1d044:	46bd      	mov	sp, r7
   1d046:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d04a:	4770      	bx	lr
   1d04c:	100050dc 	.word	0x100050dc

0001d050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d050:	b580      	push	{r7, lr}
   1d052:	b084      	sub	sp, #16
   1d054:	af00      	add	r7, sp, #0
   1d056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d058:	f000 f898 	bl	1d18c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d05c:	4b13      	ldr	r3, [pc, #76]	; (1d0ac <prvIdleTask+0x5c>)
   1d05e:	681b      	ldr	r3, [r3, #0]
   1d060:	2b01      	cmp	r3, #1
   1d062:	d907      	bls.n	1d074 <prvIdleTask+0x24>
			{
				taskYIELD();
   1d064:	4b12      	ldr	r3, [pc, #72]	; (1d0b0 <prvIdleTask+0x60>)
   1d066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d06a:	601a      	str	r2, [r3, #0]
   1d06c:	f3bf 8f4f 	dsb	sy
   1d070:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   1d074:	f7ff fc5c 	bl	1c930 <prvGetExpectedIdleTime>
   1d078:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1d07a:	68fb      	ldr	r3, [r7, #12]
   1d07c:	2b01      	cmp	r3, #1
   1d07e:	d9eb      	bls.n	1d058 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
   1d080:	f7ff fc48 	bl	1c914 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1d084:	4b0b      	ldr	r3, [pc, #44]	; (1d0b4 <prvIdleTask+0x64>)
   1d086:	681a      	ldr	r2, [r3, #0]
   1d088:	4b0b      	ldr	r3, [pc, #44]	; (1d0b8 <prvIdleTask+0x68>)
   1d08a:	681b      	ldr	r3, [r3, #0]
   1d08c:	429a      	cmp	r2, r3
   1d08e:	d200      	bcs.n	1d092 <prvIdleTask+0x42>
   1d090:	e7fe      	b.n	1d090 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   1d092:	f7ff fc4d 	bl	1c930 <prvGetExpectedIdleTime>
   1d096:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1d098:	68fb      	ldr	r3, [r7, #12]
   1d09a:	2b01      	cmp	r3, #1
   1d09c:	d902      	bls.n	1d0a4 <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   1d09e:	68f8      	ldr	r0, [r7, #12]
   1d0a0:	f7fb ff00 	bl	18ea4 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   1d0a4:	f7ff fc7c 	bl	1c9a0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   1d0a8:	e7d6      	b.n	1d058 <prvIdleTask+0x8>
   1d0aa:	bf00      	nop
   1d0ac:	10005020 	.word	0x10005020
   1d0b0:	e000ed04 	.word	0xe000ed04
   1d0b4:	100050e8 	.word	0x100050e8
   1d0b8:	100050cc 	.word	0x100050cc

0001d0bc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   1d0bc:	b480      	push	{r7}
   1d0be:	b083      	sub	sp, #12
   1d0c0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   1d0c2:	2301      	movs	r3, #1
   1d0c4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   1d0c6:	2301      	movs	r3, #1
   1d0c8:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   1d0ca:	4b0f      	ldr	r3, [pc, #60]	; (1d108 <eTaskConfirmSleepModeStatus+0x4c>)
   1d0cc:	681b      	ldr	r3, [r3, #0]
   1d0ce:	2b00      	cmp	r3, #0
   1d0d0:	d002      	beq.n	1d0d8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1d0d2:	2300      	movs	r3, #0
   1d0d4:	71fb      	strb	r3, [r7, #7]
   1d0d6:	e010      	b.n	1d0fa <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
   1d0d8:	4b0c      	ldr	r3, [pc, #48]	; (1d10c <eTaskConfirmSleepModeStatus+0x50>)
   1d0da:	681b      	ldr	r3, [r3, #0]
   1d0dc:	2b00      	cmp	r3, #0
   1d0de:	d002      	beq.n	1d0e6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1d0e0:	2300      	movs	r3, #0
   1d0e2:	71fb      	strb	r3, [r7, #7]
   1d0e4:	e009      	b.n	1d0fa <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   1d0e6:	4b0a      	ldr	r3, [pc, #40]	; (1d110 <eTaskConfirmSleepModeStatus+0x54>)
   1d0e8:	681a      	ldr	r2, [r3, #0]
   1d0ea:	4b0a      	ldr	r3, [pc, #40]	; (1d114 <eTaskConfirmSleepModeStatus+0x58>)
   1d0ec:	6819      	ldr	r1, [r3, #0]
   1d0ee:	683b      	ldr	r3, [r7, #0]
   1d0f0:	1acb      	subs	r3, r1, r3
   1d0f2:	429a      	cmp	r2, r3
   1d0f4:	d101      	bne.n	1d0fa <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
   1d0f6:	2302      	movs	r3, #2
   1d0f8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   1d0fa:	79fb      	ldrb	r3, [r7, #7]
	}
   1d0fc:	4618      	mov	r0, r3
   1d0fe:	370c      	adds	r7, #12
   1d100:	46bd      	mov	sp, r7
   1d102:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d106:	4770      	bx	lr
   1d108:	100050a0 	.word	0x100050a0
   1d10c:	100050dc 	.word	0x100050dc
   1d110:	100050b4 	.word	0x100050b4
   1d114:	100050c8 	.word	0x100050c8

0001d118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d118:	b580      	push	{r7, lr}
   1d11a:	b082      	sub	sp, #8
   1d11c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d11e:	2300      	movs	r3, #0
   1d120:	607b      	str	r3, [r7, #4]
   1d122:	e00c      	b.n	1d13e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d124:	687a      	ldr	r2, [r7, #4]
   1d126:	4613      	mov	r3, r2
   1d128:	009b      	lsls	r3, r3, #2
   1d12a:	4413      	add	r3, r2
   1d12c:	009b      	lsls	r3, r3, #2
   1d12e:	4a10      	ldr	r2, [pc, #64]	; (1d170 <prvInitialiseTaskLists+0x58>)
   1d130:	4413      	add	r3, r2
   1d132:	4618      	mov	r0, r3
   1d134:	f7fe fd6a 	bl	1bc0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d138:	687b      	ldr	r3, [r7, #4]
   1d13a:	3301      	adds	r3, #1
   1d13c:	607b      	str	r3, [r7, #4]
   1d13e:	687b      	ldr	r3, [r7, #4]
   1d140:	2b03      	cmp	r3, #3
   1d142:	d9ef      	bls.n	1d124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d144:	480b      	ldr	r0, [pc, #44]	; (1d174 <prvInitialiseTaskLists+0x5c>)
   1d146:	f7fe fd61 	bl	1bc0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1d14a:	480b      	ldr	r0, [pc, #44]	; (1d178 <prvInitialiseTaskLists+0x60>)
   1d14c:	f7fe fd5e 	bl	1bc0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1d150:	480a      	ldr	r0, [pc, #40]	; (1d17c <prvInitialiseTaskLists+0x64>)
   1d152:	f7fe fd5b 	bl	1bc0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d156:	480a      	ldr	r0, [pc, #40]	; (1d180 <prvInitialiseTaskLists+0x68>)
   1d158:	f7fe fd58 	bl	1bc0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d15c:	4b09      	ldr	r3, [pc, #36]	; (1d184 <prvInitialiseTaskLists+0x6c>)
   1d15e:	4a05      	ldr	r2, [pc, #20]	; (1d174 <prvInitialiseTaskLists+0x5c>)
   1d160:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d162:	4b09      	ldr	r3, [pc, #36]	; (1d188 <prvInitialiseTaskLists+0x70>)
   1d164:	4a04      	ldr	r2, [pc, #16]	; (1d178 <prvInitialiseTaskLists+0x60>)
   1d166:	601a      	str	r2, [r3, #0]
}
   1d168:	bf00      	nop
   1d16a:	3708      	adds	r7, #8
   1d16c:	46bd      	mov	sp, r7
   1d16e:	bd80      	pop	{r7, pc}
   1d170:	10005020 	.word	0x10005020
   1d174:	10005070 	.word	0x10005070
   1d178:	10005084 	.word	0x10005084
   1d17c:	100050a0 	.word	0x100050a0
   1d180:	100050b4 	.word	0x100050b4
   1d184:	10005098 	.word	0x10005098
   1d188:	1000509c 	.word	0x1000509c

0001d18c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d18c:	b480      	push	{r7}
   1d18e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d190:	bf00      	nop
   1d192:	46bd      	mov	sp, r7
   1d194:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d198:	4770      	bx	lr
	...

0001d19c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d19c:	b480      	push	{r7}
   1d19e:	b083      	sub	sp, #12
   1d1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d1a2:	4b0c      	ldr	r3, [pc, #48]	; (1d1d4 <prvResetNextTaskUnblockTime+0x38>)
   1d1a4:	681b      	ldr	r3, [r3, #0]
   1d1a6:	681b      	ldr	r3, [r3, #0]
   1d1a8:	2b00      	cmp	r3, #0
   1d1aa:	d104      	bne.n	1d1b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d1ac:	4b0a      	ldr	r3, [pc, #40]	; (1d1d8 <prvResetNextTaskUnblockTime+0x3c>)
   1d1ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d1b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d1b4:	e008      	b.n	1d1c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1d1b6:	4b07      	ldr	r3, [pc, #28]	; (1d1d4 <prvResetNextTaskUnblockTime+0x38>)
   1d1b8:	681b      	ldr	r3, [r3, #0]
   1d1ba:	68db      	ldr	r3, [r3, #12]
   1d1bc:	68db      	ldr	r3, [r3, #12]
   1d1be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d1c0:	687b      	ldr	r3, [r7, #4]
   1d1c2:	685b      	ldr	r3, [r3, #4]
   1d1c4:	4a04      	ldr	r2, [pc, #16]	; (1d1d8 <prvResetNextTaskUnblockTime+0x3c>)
   1d1c6:	6013      	str	r3, [r2, #0]
}
   1d1c8:	bf00      	nop
   1d1ca:	370c      	adds	r7, #12
   1d1cc:	46bd      	mov	sp, r7
   1d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d1d2:	4770      	bx	lr
   1d1d4:	10005098 	.word	0x10005098
   1d1d8:	100050e8 	.word	0x100050e8

0001d1dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d1dc:	b480      	push	{r7}
   1d1de:	b083      	sub	sp, #12
   1d1e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d1e2:	4b0b      	ldr	r3, [pc, #44]	; (1d210 <xTaskGetSchedulerState+0x34>)
   1d1e4:	681b      	ldr	r3, [r3, #0]
   1d1e6:	2b00      	cmp	r3, #0
   1d1e8:	d102      	bne.n	1d1f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d1ea:	2301      	movs	r3, #1
   1d1ec:	607b      	str	r3, [r7, #4]
   1d1ee:	e008      	b.n	1d202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d1f0:	4b08      	ldr	r3, [pc, #32]	; (1d214 <xTaskGetSchedulerState+0x38>)
   1d1f2:	681b      	ldr	r3, [r3, #0]
   1d1f4:	2b00      	cmp	r3, #0
   1d1f6:	d102      	bne.n	1d1fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d1f8:	2302      	movs	r3, #2
   1d1fa:	607b      	str	r3, [r7, #4]
   1d1fc:	e001      	b.n	1d202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d1fe:	2300      	movs	r3, #0
   1d200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d202:	687b      	ldr	r3, [r7, #4]
	}
   1d204:	4618      	mov	r0, r3
   1d206:	370c      	adds	r7, #12
   1d208:	46bd      	mov	sp, r7
   1d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d20e:	4770      	bx	lr
   1d210:	100050d4 	.word	0x100050d4
   1d214:	100050f0 	.word	0x100050f0

0001d218 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   1d218:	b480      	push	{r7}
   1d21a:	b083      	sub	sp, #12
   1d21c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1d21e:	4b09      	ldr	r3, [pc, #36]	; (1d244 <uxTaskResetEventItemValue+0x2c>)
   1d220:	681b      	ldr	r3, [r3, #0]
   1d222:	699b      	ldr	r3, [r3, #24]
   1d224:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d226:	4b07      	ldr	r3, [pc, #28]	; (1d244 <uxTaskResetEventItemValue+0x2c>)
   1d228:	681b      	ldr	r3, [r3, #0]
   1d22a:	4a06      	ldr	r2, [pc, #24]	; (1d244 <uxTaskResetEventItemValue+0x2c>)
   1d22c:	6812      	ldr	r2, [r2, #0]
   1d22e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1d230:	f1c2 0204 	rsb	r2, r2, #4
   1d234:	619a      	str	r2, [r3, #24]

	return uxReturn;
   1d236:	687b      	ldr	r3, [r7, #4]
}
   1d238:	4618      	mov	r0, r3
   1d23a:	370c      	adds	r7, #12
   1d23c:	46bd      	mov	sp, r7
   1d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d242:	4770      	bx	lr
   1d244:	1000501c 	.word	0x1000501c

0001d248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d248:	b580      	push	{r7, lr}
   1d24a:	b084      	sub	sp, #16
   1d24c:	af00      	add	r7, sp, #0
   1d24e:	6078      	str	r0, [r7, #4]
   1d250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d252:	4b21      	ldr	r3, [pc, #132]	; (1d2d8 <prvAddCurrentTaskToDelayedList+0x90>)
   1d254:	681b      	ldr	r3, [r3, #0]
   1d256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d258:	4b20      	ldr	r3, [pc, #128]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d25a:	681b      	ldr	r3, [r3, #0]
   1d25c:	3304      	adds	r3, #4
   1d25e:	4618      	mov	r0, r3
   1d260:	f7fe fd5e 	bl	1bd20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d264:	687b      	ldr	r3, [r7, #4]
   1d266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d26a:	d10a      	bne.n	1d282 <prvAddCurrentTaskToDelayedList+0x3a>
   1d26c:	683b      	ldr	r3, [r7, #0]
   1d26e:	2b00      	cmp	r3, #0
   1d270:	d007      	beq.n	1d282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d272:	4b1a      	ldr	r3, [pc, #104]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d274:	681b      	ldr	r3, [r3, #0]
   1d276:	3304      	adds	r3, #4
   1d278:	4619      	mov	r1, r3
   1d27a:	4819      	ldr	r0, [pc, #100]	; (1d2e0 <prvAddCurrentTaskToDelayedList+0x98>)
   1d27c:	f7fe fcf3 	bl	1bc66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d280:	e026      	b.n	1d2d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d282:	68fa      	ldr	r2, [r7, #12]
   1d284:	687b      	ldr	r3, [r7, #4]
   1d286:	4413      	add	r3, r2
   1d288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d28a:	4b14      	ldr	r3, [pc, #80]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d28c:	681b      	ldr	r3, [r3, #0]
   1d28e:	68ba      	ldr	r2, [r7, #8]
   1d290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d292:	68ba      	ldr	r2, [r7, #8]
   1d294:	68fb      	ldr	r3, [r7, #12]
   1d296:	429a      	cmp	r2, r3
   1d298:	d209      	bcs.n	1d2ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d29a:	4b12      	ldr	r3, [pc, #72]	; (1d2e4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d29c:	681a      	ldr	r2, [r3, #0]
   1d29e:	4b0f      	ldr	r3, [pc, #60]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d2a0:	681b      	ldr	r3, [r3, #0]
   1d2a2:	3304      	adds	r3, #4
   1d2a4:	4619      	mov	r1, r3
   1d2a6:	4610      	mov	r0, r2
   1d2a8:	f7fe fd01 	bl	1bcae <vListInsert>
}
   1d2ac:	e010      	b.n	1d2d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d2ae:	4b0e      	ldr	r3, [pc, #56]	; (1d2e8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d2b0:	681a      	ldr	r2, [r3, #0]
   1d2b2:	4b0a      	ldr	r3, [pc, #40]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d2b4:	681b      	ldr	r3, [r3, #0]
   1d2b6:	3304      	adds	r3, #4
   1d2b8:	4619      	mov	r1, r3
   1d2ba:	4610      	mov	r0, r2
   1d2bc:	f7fe fcf7 	bl	1bcae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1d2c0:	4b0a      	ldr	r3, [pc, #40]	; (1d2ec <prvAddCurrentTaskToDelayedList+0xa4>)
   1d2c2:	681b      	ldr	r3, [r3, #0]
   1d2c4:	68ba      	ldr	r2, [r7, #8]
   1d2c6:	429a      	cmp	r2, r3
   1d2c8:	d202      	bcs.n	1d2d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d2ca:	4a08      	ldr	r2, [pc, #32]	; (1d2ec <prvAddCurrentTaskToDelayedList+0xa4>)
   1d2cc:	68bb      	ldr	r3, [r7, #8]
   1d2ce:	6013      	str	r3, [r2, #0]
}
   1d2d0:	bf00      	nop
   1d2d2:	3710      	adds	r7, #16
   1d2d4:	46bd      	mov	sp, r7
   1d2d6:	bd80      	pop	{r7, pc}
   1d2d8:	100050cc 	.word	0x100050cc
   1d2dc:	1000501c 	.word	0x1000501c
   1d2e0:	100050b4 	.word	0x100050b4
   1d2e4:	1000509c 	.word	0x1000509c
   1d2e8:	10005098 	.word	0x10005098
   1d2ec:	100050e8 	.word	0x100050e8

0001d2f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d2f0:	b580      	push	{r7, lr}
   1d2f2:	b084      	sub	sp, #16
   1d2f4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d2f6:	2300      	movs	r3, #0
   1d2f8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d2fa:	f000 fab1 	bl	1d860 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   1d2fe:	4b0c      	ldr	r3, [pc, #48]	; (1d330 <xTimerCreateTimerTask+0x40>)
   1d300:	681b      	ldr	r3, [r3, #0]
   1d302:	2b00      	cmp	r3, #0
   1d304:	d00b      	beq.n	1d31e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d306:	4b0b      	ldr	r3, [pc, #44]	; (1d334 <xTimerCreateTimerTask+0x44>)
   1d308:	9301      	str	r3, [sp, #4]
   1d30a:	2303      	movs	r3, #3
   1d30c:	9300      	str	r3, [sp, #0]
   1d30e:	2300      	movs	r3, #0
   1d310:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d314:	4908      	ldr	r1, [pc, #32]	; (1d338 <xTimerCreateTimerTask+0x48>)
   1d316:	4809      	ldr	r0, [pc, #36]	; (1d33c <xTimerCreateTimerTask+0x4c>)
   1d318:	f7ff f924 	bl	1c564 <xTaskCreate>
   1d31c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d31e:	687b      	ldr	r3, [r7, #4]
   1d320:	2b00      	cmp	r3, #0
   1d322:	d100      	bne.n	1d326 <xTimerCreateTimerTask+0x36>
   1d324:	e7fe      	b.n	1d324 <xTimerCreateTimerTask+0x34>
	return xReturn;
   1d326:	687b      	ldr	r3, [r7, #4]
}
   1d328:	4618      	mov	r0, r3
   1d32a:	3708      	adds	r7, #8
   1d32c:	46bd      	mov	sp, r7
   1d32e:	bd80      	pop	{r7, pc}
   1d330:	10005124 	.word	0x10005124
   1d334:	10005128 	.word	0x10005128
   1d338:	00025a68 	.word	0x00025a68
   1d33c:	0001d4c1 	.word	0x0001d4c1

0001d340 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   1d340:	b580      	push	{r7, lr}
   1d342:	b088      	sub	sp, #32
   1d344:	af02      	add	r7, sp, #8
   1d346:	60f8      	str	r0, [r7, #12]
   1d348:	60b9      	str	r1, [r7, #8]
   1d34a:	607a      	str	r2, [r7, #4]
   1d34c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1d34e:	2028      	movs	r0, #40	; 0x28
   1d350:	f004 f9e6 	bl	21720 <pvPortMalloc>
   1d354:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
   1d356:	697b      	ldr	r3, [r7, #20]
   1d358:	2b00      	cmp	r3, #0
   1d35a:	d009      	beq.n	1d370 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   1d35c:	697b      	ldr	r3, [r7, #20]
   1d35e:	9301      	str	r3, [sp, #4]
   1d360:	6a3b      	ldr	r3, [r7, #32]
   1d362:	9300      	str	r3, [sp, #0]
   1d364:	683b      	ldr	r3, [r7, #0]
   1d366:	687a      	ldr	r2, [r7, #4]
   1d368:	68b9      	ldr	r1, [r7, #8]
   1d36a:	68f8      	ldr	r0, [r7, #12]
   1d36c:	f000 f805 	bl	1d37a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   1d370:	697b      	ldr	r3, [r7, #20]
	}
   1d372:	4618      	mov	r0, r3
   1d374:	3718      	adds	r7, #24
   1d376:	46bd      	mov	sp, r7
   1d378:	bd80      	pop	{r7, pc}

0001d37a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   1d37a:	b580      	push	{r7, lr}
   1d37c:	b084      	sub	sp, #16
   1d37e:	af00      	add	r7, sp, #0
   1d380:	60f8      	str	r0, [r7, #12]
   1d382:	60b9      	str	r1, [r7, #8]
   1d384:	607a      	str	r2, [r7, #4]
   1d386:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1d388:	68bb      	ldr	r3, [r7, #8]
   1d38a:	2b00      	cmp	r3, #0
   1d38c:	d100      	bne.n	1d390 <prvInitialiseNewTimer+0x16>
   1d38e:	e7fe      	b.n	1d38e <prvInitialiseNewTimer+0x14>

	if( pxNewTimer != NULL )
   1d390:	69fb      	ldr	r3, [r7, #28]
   1d392:	2b00      	cmp	r3, #0
   1d394:	d015      	beq.n	1d3c2 <prvInitialiseNewTimer+0x48>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   1d396:	f000 fa63 	bl	1d860 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   1d39a:	69fb      	ldr	r3, [r7, #28]
   1d39c:	68fa      	ldr	r2, [r7, #12]
   1d39e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   1d3a0:	69fb      	ldr	r3, [r7, #28]
   1d3a2:	68ba      	ldr	r2, [r7, #8]
   1d3a4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   1d3a6:	69fb      	ldr	r3, [r7, #28]
   1d3a8:	687a      	ldr	r2, [r7, #4]
   1d3aa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   1d3ac:	69fb      	ldr	r3, [r7, #28]
   1d3ae:	683a      	ldr	r2, [r7, #0]
   1d3b0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1d3b2:	69fb      	ldr	r3, [r7, #28]
   1d3b4:	69ba      	ldr	r2, [r7, #24]
   1d3b6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   1d3b8:	69fb      	ldr	r3, [r7, #28]
   1d3ba:	3304      	adds	r3, #4
   1d3bc:	4618      	mov	r0, r3
   1d3be:	f7fe fc45 	bl	1bc4c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   1d3c2:	bf00      	nop
   1d3c4:	3710      	adds	r7, #16
   1d3c6:	46bd      	mov	sp, r7
   1d3c8:	bd80      	pop	{r7, pc}
	...

0001d3cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d3cc:	b580      	push	{r7, lr}
   1d3ce:	b08a      	sub	sp, #40	; 0x28
   1d3d0:	af00      	add	r7, sp, #0
   1d3d2:	60f8      	str	r0, [r7, #12]
   1d3d4:	60b9      	str	r1, [r7, #8]
   1d3d6:	607a      	str	r2, [r7, #4]
   1d3d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d3da:	2300      	movs	r3, #0
   1d3dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d3de:	68fb      	ldr	r3, [r7, #12]
   1d3e0:	2b00      	cmp	r3, #0
   1d3e2:	d100      	bne.n	1d3e6 <xTimerGenericCommand+0x1a>
   1d3e4:	e7fe      	b.n	1d3e4 <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d3e6:	4b1a      	ldr	r3, [pc, #104]	; (1d450 <xTimerGenericCommand+0x84>)
   1d3e8:	681b      	ldr	r3, [r3, #0]
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	d02a      	beq.n	1d444 <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d3ee:	68bb      	ldr	r3, [r7, #8]
   1d3f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d3f2:	687b      	ldr	r3, [r7, #4]
   1d3f4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1d3f6:	68fb      	ldr	r3, [r7, #12]
   1d3f8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d3fa:	68bb      	ldr	r3, [r7, #8]
   1d3fc:	2b05      	cmp	r3, #5
   1d3fe:	dc18      	bgt.n	1d432 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d400:	f7ff feec 	bl	1d1dc <xTaskGetSchedulerState>
   1d404:	4603      	mov	r3, r0
   1d406:	2b02      	cmp	r3, #2
   1d408:	d109      	bne.n	1d41e <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d40a:	4b11      	ldr	r3, [pc, #68]	; (1d450 <xTimerGenericCommand+0x84>)
   1d40c:	6818      	ldr	r0, [r3, #0]
   1d40e:	f107 0114 	add.w	r1, r7, #20
   1d412:	2300      	movs	r3, #0
   1d414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d416:	f7fe fd5d 	bl	1bed4 <xQueueGenericSend>
   1d41a:	6278      	str	r0, [r7, #36]	; 0x24
   1d41c:	e012      	b.n	1d444 <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d41e:	4b0c      	ldr	r3, [pc, #48]	; (1d450 <xTimerGenericCommand+0x84>)
   1d420:	6818      	ldr	r0, [r3, #0]
   1d422:	f107 0114 	add.w	r1, r7, #20
   1d426:	2300      	movs	r3, #0
   1d428:	2200      	movs	r2, #0
   1d42a:	f7fe fd53 	bl	1bed4 <xQueueGenericSend>
   1d42e:	6278      	str	r0, [r7, #36]	; 0x24
   1d430:	e008      	b.n	1d444 <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d432:	4b07      	ldr	r3, [pc, #28]	; (1d450 <xTimerGenericCommand+0x84>)
   1d434:	6818      	ldr	r0, [r3, #0]
   1d436:	f107 0114 	add.w	r1, r7, #20
   1d43a:	2300      	movs	r3, #0
   1d43c:	683a      	ldr	r2, [r7, #0]
   1d43e:	f7fe fe1f 	bl	1c080 <xQueueGenericSendFromISR>
   1d442:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d446:	4618      	mov	r0, r3
   1d448:	3728      	adds	r7, #40	; 0x28
   1d44a:	46bd      	mov	sp, r7
   1d44c:	bd80      	pop	{r7, pc}
   1d44e:	bf00      	nop
   1d450:	10005124 	.word	0x10005124

0001d454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d454:	b580      	push	{r7, lr}
   1d456:	b086      	sub	sp, #24
   1d458:	af02      	add	r7, sp, #8
   1d45a:	6078      	str	r0, [r7, #4]
   1d45c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1d45e:	4b17      	ldr	r3, [pc, #92]	; (1d4bc <prvProcessExpiredTimer+0x68>)
   1d460:	681b      	ldr	r3, [r3, #0]
   1d462:	68db      	ldr	r3, [r3, #12]
   1d464:	68db      	ldr	r3, [r3, #12]
   1d466:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d468:	68fb      	ldr	r3, [r7, #12]
   1d46a:	3304      	adds	r3, #4
   1d46c:	4618      	mov	r0, r3
   1d46e:	f7fe fc57 	bl	1bd20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d472:	68fb      	ldr	r3, [r7, #12]
   1d474:	69db      	ldr	r3, [r3, #28]
   1d476:	2b01      	cmp	r3, #1
   1d478:	d118      	bne.n	1d4ac <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d47a:	68fb      	ldr	r3, [r7, #12]
   1d47c:	699a      	ldr	r2, [r3, #24]
   1d47e:	687b      	ldr	r3, [r7, #4]
   1d480:	18d1      	adds	r1, r2, r3
   1d482:	687b      	ldr	r3, [r7, #4]
   1d484:	683a      	ldr	r2, [r7, #0]
   1d486:	68f8      	ldr	r0, [r7, #12]
   1d488:	f000 f8be 	bl	1d608 <prvInsertTimerInActiveList>
   1d48c:	4603      	mov	r3, r0
   1d48e:	2b00      	cmp	r3, #0
   1d490:	d00c      	beq.n	1d4ac <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d492:	2300      	movs	r3, #0
   1d494:	9300      	str	r3, [sp, #0]
   1d496:	2300      	movs	r3, #0
   1d498:	687a      	ldr	r2, [r7, #4]
   1d49a:	2100      	movs	r1, #0
   1d49c:	68f8      	ldr	r0, [r7, #12]
   1d49e:	f7ff ff95 	bl	1d3cc <xTimerGenericCommand>
   1d4a2:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   1d4a4:	68bb      	ldr	r3, [r7, #8]
   1d4a6:	2b00      	cmp	r3, #0
   1d4a8:	d100      	bne.n	1d4ac <prvProcessExpiredTimer+0x58>
   1d4aa:	e7fe      	b.n	1d4aa <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d4ac:	68fb      	ldr	r3, [r7, #12]
   1d4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d4b0:	68f8      	ldr	r0, [r7, #12]
   1d4b2:	4798      	blx	r3
}
   1d4b4:	bf00      	nop
   1d4b6:	3710      	adds	r7, #16
   1d4b8:	46bd      	mov	sp, r7
   1d4ba:	bd80      	pop	{r7, pc}
   1d4bc:	1000511c 	.word	0x1000511c

0001d4c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d4c0:	b580      	push	{r7, lr}
   1d4c2:	b084      	sub	sp, #16
   1d4c4:	af00      	add	r7, sp, #0
   1d4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d4c8:	f107 0308 	add.w	r3, r7, #8
   1d4cc:	4618      	mov	r0, r3
   1d4ce:	f000 f857 	bl	1d580 <prvGetNextExpireTime>
   1d4d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d4d4:	68bb      	ldr	r3, [r7, #8]
   1d4d6:	4619      	mov	r1, r3
   1d4d8:	68f8      	ldr	r0, [r7, #12]
   1d4da:	f000 f803 	bl	1d4e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d4de:	f000 f8d5 	bl	1d68c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d4e2:	e7f1      	b.n	1d4c8 <prvTimerTask+0x8>

0001d4e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d4e4:	b580      	push	{r7, lr}
   1d4e6:	b084      	sub	sp, #16
   1d4e8:	af00      	add	r7, sp, #0
   1d4ea:	6078      	str	r0, [r7, #4]
   1d4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d4ee:	f7ff fa11 	bl	1c914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d4f2:	f107 0308 	add.w	r3, r7, #8
   1d4f6:	4618      	mov	r0, r3
   1d4f8:	f000 f866 	bl	1d5c8 <prvSampleTimeNow>
   1d4fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d4fe:	68bb      	ldr	r3, [r7, #8]
   1d500:	2b00      	cmp	r3, #0
   1d502:	d130      	bne.n	1d566 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d504:	683b      	ldr	r3, [r7, #0]
   1d506:	2b00      	cmp	r3, #0
   1d508:	d10a      	bne.n	1d520 <prvProcessTimerOrBlockTask+0x3c>
   1d50a:	687a      	ldr	r2, [r7, #4]
   1d50c:	68fb      	ldr	r3, [r7, #12]
   1d50e:	429a      	cmp	r2, r3
   1d510:	d806      	bhi.n	1d520 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   1d512:	f7ff fa45 	bl	1c9a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d516:	68f9      	ldr	r1, [r7, #12]
   1d518:	6878      	ldr	r0, [r7, #4]
   1d51a:	f7ff ff9b 	bl	1d454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d51e:	e024      	b.n	1d56a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
   1d520:	683b      	ldr	r3, [r7, #0]
   1d522:	2b00      	cmp	r3, #0
   1d524:	d008      	beq.n	1d538 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d526:	4b13      	ldr	r3, [pc, #76]	; (1d574 <prvProcessTimerOrBlockTask+0x90>)
   1d528:	681b      	ldr	r3, [r3, #0]
   1d52a:	681b      	ldr	r3, [r3, #0]
   1d52c:	2b00      	cmp	r3, #0
   1d52e:	d101      	bne.n	1d534 <prvProcessTimerOrBlockTask+0x50>
   1d530:	2301      	movs	r3, #1
   1d532:	e000      	b.n	1d536 <prvProcessTimerOrBlockTask+0x52>
   1d534:	2300      	movs	r3, #0
   1d536:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d538:	4b0f      	ldr	r3, [pc, #60]	; (1d578 <prvProcessTimerOrBlockTask+0x94>)
   1d53a:	6818      	ldr	r0, [r3, #0]
   1d53c:	687a      	ldr	r2, [r7, #4]
   1d53e:	68fb      	ldr	r3, [r7, #12]
   1d540:	1ad3      	subs	r3, r2, r3
   1d542:	683a      	ldr	r2, [r7, #0]
   1d544:	4619      	mov	r1, r3
   1d546:	f7fe ffd9 	bl	1c4fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   1d54a:	f7ff fa29 	bl	1c9a0 <xTaskResumeAll>
   1d54e:	4603      	mov	r3, r0
   1d550:	2b00      	cmp	r3, #0
   1d552:	d10a      	bne.n	1d56a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
   1d554:	4b09      	ldr	r3, [pc, #36]	; (1d57c <prvProcessTimerOrBlockTask+0x98>)
   1d556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d55a:	601a      	str	r2, [r3, #0]
   1d55c:	f3bf 8f4f 	dsb	sy
   1d560:	f3bf 8f6f 	isb	sy
}
   1d564:	e001      	b.n	1d56a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
   1d566:	f7ff fa1b 	bl	1c9a0 <xTaskResumeAll>
}
   1d56a:	bf00      	nop
   1d56c:	3710      	adds	r7, #16
   1d56e:	46bd      	mov	sp, r7
   1d570:	bd80      	pop	{r7, pc}
   1d572:	bf00      	nop
   1d574:	10005120 	.word	0x10005120
   1d578:	10005124 	.word	0x10005124
   1d57c:	e000ed04 	.word	0xe000ed04

0001d580 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d580:	b480      	push	{r7}
   1d582:	b085      	sub	sp, #20
   1d584:	af00      	add	r7, sp, #0
   1d586:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d588:	4b0e      	ldr	r3, [pc, #56]	; (1d5c4 <prvGetNextExpireTime+0x44>)
   1d58a:	681b      	ldr	r3, [r3, #0]
   1d58c:	681b      	ldr	r3, [r3, #0]
   1d58e:	2b00      	cmp	r3, #0
   1d590:	d101      	bne.n	1d596 <prvGetNextExpireTime+0x16>
   1d592:	2201      	movs	r2, #1
   1d594:	e000      	b.n	1d598 <prvGetNextExpireTime+0x18>
   1d596:	2200      	movs	r2, #0
   1d598:	687b      	ldr	r3, [r7, #4]
   1d59a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d59c:	687b      	ldr	r3, [r7, #4]
   1d59e:	681b      	ldr	r3, [r3, #0]
   1d5a0:	2b00      	cmp	r3, #0
   1d5a2:	d105      	bne.n	1d5b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d5a4:	4b07      	ldr	r3, [pc, #28]	; (1d5c4 <prvGetNextExpireTime+0x44>)
   1d5a6:	681b      	ldr	r3, [r3, #0]
   1d5a8:	68db      	ldr	r3, [r3, #12]
   1d5aa:	681b      	ldr	r3, [r3, #0]
   1d5ac:	60fb      	str	r3, [r7, #12]
   1d5ae:	e001      	b.n	1d5b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d5b0:	2300      	movs	r3, #0
   1d5b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d5b4:	68fb      	ldr	r3, [r7, #12]
}
   1d5b6:	4618      	mov	r0, r3
   1d5b8:	3714      	adds	r7, #20
   1d5ba:	46bd      	mov	sp, r7
   1d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d5c0:	4770      	bx	lr
   1d5c2:	bf00      	nop
   1d5c4:	1000511c 	.word	0x1000511c

0001d5c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d5c8:	b580      	push	{r7, lr}
   1d5ca:	b084      	sub	sp, #16
   1d5cc:	af00      	add	r7, sp, #0
   1d5ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d5d0:	f7ff fa7a 	bl	1cac8 <xTaskGetTickCount>
   1d5d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   1d5d6:	4b0b      	ldr	r3, [pc, #44]	; (1d604 <prvSampleTimeNow+0x3c>)
   1d5d8:	681b      	ldr	r3, [r3, #0]
   1d5da:	68fa      	ldr	r2, [r7, #12]
   1d5dc:	429a      	cmp	r2, r3
   1d5de:	d205      	bcs.n	1d5ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   1d5e0:	f000 f8e6 	bl	1d7b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   1d5e4:	687b      	ldr	r3, [r7, #4]
   1d5e6:	2201      	movs	r2, #1
   1d5e8:	601a      	str	r2, [r3, #0]
   1d5ea:	e002      	b.n	1d5f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d5ec:	687b      	ldr	r3, [r7, #4]
   1d5ee:	2200      	movs	r2, #0
   1d5f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d5f2:	4a04      	ldr	r2, [pc, #16]	; (1d604 <prvSampleTimeNow+0x3c>)
   1d5f4:	68fb      	ldr	r3, [r7, #12]
   1d5f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   1d5f8:	68fb      	ldr	r3, [r7, #12]
}
   1d5fa:	4618      	mov	r0, r3
   1d5fc:	3710      	adds	r7, #16
   1d5fe:	46bd      	mov	sp, r7
   1d600:	bd80      	pop	{r7, pc}
   1d602:	bf00      	nop
   1d604:	1000512c 	.word	0x1000512c

0001d608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d608:	b580      	push	{r7, lr}
   1d60a:	b086      	sub	sp, #24
   1d60c:	af00      	add	r7, sp, #0
   1d60e:	60f8      	str	r0, [r7, #12]
   1d610:	60b9      	str	r1, [r7, #8]
   1d612:	607a      	str	r2, [r7, #4]
   1d614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d616:	2300      	movs	r3, #0
   1d618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d61a:	68fb      	ldr	r3, [r7, #12]
   1d61c:	68ba      	ldr	r2, [r7, #8]
   1d61e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d620:	68fb      	ldr	r3, [r7, #12]
   1d622:	68fa      	ldr	r2, [r7, #12]
   1d624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d626:	68ba      	ldr	r2, [r7, #8]
   1d628:	687b      	ldr	r3, [r7, #4]
   1d62a:	429a      	cmp	r2, r3
   1d62c:	d812      	bhi.n	1d654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d62e:	687a      	ldr	r2, [r7, #4]
   1d630:	683b      	ldr	r3, [r7, #0]
   1d632:	1ad2      	subs	r2, r2, r3
   1d634:	68fb      	ldr	r3, [r7, #12]
   1d636:	699b      	ldr	r3, [r3, #24]
   1d638:	429a      	cmp	r2, r3
   1d63a:	d302      	bcc.n	1d642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d63c:	2301      	movs	r3, #1
   1d63e:	617b      	str	r3, [r7, #20]
   1d640:	e01b      	b.n	1d67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d642:	4b10      	ldr	r3, [pc, #64]	; (1d684 <prvInsertTimerInActiveList+0x7c>)
   1d644:	681a      	ldr	r2, [r3, #0]
   1d646:	68fb      	ldr	r3, [r7, #12]
   1d648:	3304      	adds	r3, #4
   1d64a:	4619      	mov	r1, r3
   1d64c:	4610      	mov	r0, r2
   1d64e:	f7fe fb2e 	bl	1bcae <vListInsert>
   1d652:	e012      	b.n	1d67a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d654:	687a      	ldr	r2, [r7, #4]
   1d656:	683b      	ldr	r3, [r7, #0]
   1d658:	429a      	cmp	r2, r3
   1d65a:	d206      	bcs.n	1d66a <prvInsertTimerInActiveList+0x62>
   1d65c:	68ba      	ldr	r2, [r7, #8]
   1d65e:	683b      	ldr	r3, [r7, #0]
   1d660:	429a      	cmp	r2, r3
   1d662:	d302      	bcc.n	1d66a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d664:	2301      	movs	r3, #1
   1d666:	617b      	str	r3, [r7, #20]
   1d668:	e007      	b.n	1d67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d66a:	4b07      	ldr	r3, [pc, #28]	; (1d688 <prvInsertTimerInActiveList+0x80>)
   1d66c:	681a      	ldr	r2, [r3, #0]
   1d66e:	68fb      	ldr	r3, [r7, #12]
   1d670:	3304      	adds	r3, #4
   1d672:	4619      	mov	r1, r3
   1d674:	4610      	mov	r0, r2
   1d676:	f7fe fb1a 	bl	1bcae <vListInsert>
		}
	}

	return xProcessTimerNow;
   1d67a:	697b      	ldr	r3, [r7, #20]
}
   1d67c:	4618      	mov	r0, r3
   1d67e:	3718      	adds	r7, #24
   1d680:	46bd      	mov	sp, r7
   1d682:	bd80      	pop	{r7, pc}
   1d684:	10005120 	.word	0x10005120
   1d688:	1000511c 	.word	0x1000511c

0001d68c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d68c:	b580      	push	{r7, lr}
   1d68e:	b08c      	sub	sp, #48	; 0x30
   1d690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d692:	e07a      	b.n	1d78a <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   1d694:	68bb      	ldr	r3, [r7, #8]
   1d696:	2b00      	cmp	r3, #0
   1d698:	da0f      	bge.n	1d6ba <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   1d69a:	f107 0308 	add.w	r3, r7, #8
   1d69e:	3304      	adds	r3, #4
   1d6a0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   1d6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d6a4:	2b00      	cmp	r3, #0
   1d6a6:	d100      	bne.n	1d6aa <prvProcessReceivedCommands+0x1e>
   1d6a8:	e7fe      	b.n	1d6a8 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   1d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d6ac:	681b      	ldr	r3, [r3, #0]
   1d6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d6b0:	6850      	ldr	r0, [r2, #4]
   1d6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d6b4:	6892      	ldr	r2, [r2, #8]
   1d6b6:	4611      	mov	r1, r2
   1d6b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d6ba:	68bb      	ldr	r3, [r7, #8]
   1d6bc:	2b00      	cmp	r3, #0
   1d6be:	db64      	blt.n	1d78a <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d6c0:	693b      	ldr	r3, [r7, #16]
   1d6c2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d6c4:	6a3b      	ldr	r3, [r7, #32]
   1d6c6:	695b      	ldr	r3, [r3, #20]
   1d6c8:	2b00      	cmp	r3, #0
   1d6ca:	d004      	beq.n	1d6d6 <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d6cc:	6a3b      	ldr	r3, [r7, #32]
   1d6ce:	3304      	adds	r3, #4
   1d6d0:	4618      	mov	r0, r3
   1d6d2:	f7fe fb25 	bl	1bd20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d6d6:	1d3b      	adds	r3, r7, #4
   1d6d8:	4618      	mov	r0, r3
   1d6da:	f7ff ff75 	bl	1d5c8 <prvSampleTimeNow>
   1d6de:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
   1d6e0:	68bb      	ldr	r3, [r7, #8]
   1d6e2:	2b09      	cmp	r3, #9
   1d6e4:	d850      	bhi.n	1d788 <prvProcessReceivedCommands+0xfc>
   1d6e6:	a201      	add	r2, pc, #4	; (adr r2, 1d6ec <prvProcessReceivedCommands+0x60>)
   1d6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d6ec:	0001d715 	.word	0x0001d715
   1d6f0:	0001d715 	.word	0x0001d715
   1d6f4:	0001d715 	.word	0x0001d715
   1d6f8:	0001d78b 	.word	0x0001d78b
   1d6fc:	0001d75d 	.word	0x0001d75d
   1d700:	0001d781 	.word	0x0001d781
   1d704:	0001d715 	.word	0x0001d715
   1d708:	0001d715 	.word	0x0001d715
   1d70c:	0001d78b 	.word	0x0001d78b
   1d710:	0001d75d 	.word	0x0001d75d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d714:	68fa      	ldr	r2, [r7, #12]
   1d716:	6a3b      	ldr	r3, [r7, #32]
   1d718:	699b      	ldr	r3, [r3, #24]
   1d71a:	18d1      	adds	r1, r2, r3
   1d71c:	68fb      	ldr	r3, [r7, #12]
   1d71e:	69fa      	ldr	r2, [r7, #28]
   1d720:	6a38      	ldr	r0, [r7, #32]
   1d722:	f7ff ff71 	bl	1d608 <prvInsertTimerInActiveList>
   1d726:	4603      	mov	r3, r0
   1d728:	2b00      	cmp	r3, #0
   1d72a:	d02e      	beq.n	1d78a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d72c:	6a3b      	ldr	r3, [r7, #32]
   1d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d730:	6a38      	ldr	r0, [r7, #32]
   1d732:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d734:	6a3b      	ldr	r3, [r7, #32]
   1d736:	69db      	ldr	r3, [r3, #28]
   1d738:	2b01      	cmp	r3, #1
   1d73a:	d126      	bne.n	1d78a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d73c:	68fa      	ldr	r2, [r7, #12]
   1d73e:	6a3b      	ldr	r3, [r7, #32]
   1d740:	699b      	ldr	r3, [r3, #24]
   1d742:	441a      	add	r2, r3
   1d744:	2300      	movs	r3, #0
   1d746:	9300      	str	r3, [sp, #0]
   1d748:	2300      	movs	r3, #0
   1d74a:	2100      	movs	r1, #0
   1d74c:	6a38      	ldr	r0, [r7, #32]
   1d74e:	f7ff fe3d 	bl	1d3cc <xTimerGenericCommand>
   1d752:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
   1d754:	69bb      	ldr	r3, [r7, #24]
   1d756:	2b00      	cmp	r3, #0
   1d758:	d117      	bne.n	1d78a <prvProcessReceivedCommands+0xfe>
   1d75a:	e7fe      	b.n	1d75a <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d75c:	68fa      	ldr	r2, [r7, #12]
   1d75e:	6a3b      	ldr	r3, [r7, #32]
   1d760:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d762:	6a3b      	ldr	r3, [r7, #32]
   1d764:	699b      	ldr	r3, [r3, #24]
   1d766:	2b00      	cmp	r3, #0
   1d768:	d100      	bne.n	1d76c <prvProcessReceivedCommands+0xe0>
   1d76a:	e7fe      	b.n	1d76a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d76c:	6a3b      	ldr	r3, [r7, #32]
   1d76e:	699a      	ldr	r2, [r3, #24]
   1d770:	69fb      	ldr	r3, [r7, #28]
   1d772:	18d1      	adds	r1, r2, r3
   1d774:	69fb      	ldr	r3, [r7, #28]
   1d776:	69fa      	ldr	r2, [r7, #28]
   1d778:	6a38      	ldr	r0, [r7, #32]
   1d77a:	f7ff ff45 	bl	1d608 <prvInsertTimerInActiveList>
					break;
   1d77e:	e004      	b.n	1d78a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d780:	6a38      	ldr	r0, [r7, #32]
   1d782:	f004 f85f 	bl	21844 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d786:	e000      	b.n	1d78a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
   1d788:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d78a:	4b08      	ldr	r3, [pc, #32]	; (1d7ac <prvProcessReceivedCommands+0x120>)
   1d78c:	681b      	ldr	r3, [r3, #0]
   1d78e:	f107 0108 	add.w	r1, r7, #8
   1d792:	2200      	movs	r2, #0
   1d794:	4618      	mov	r0, r3
   1d796:	f7fe fced 	bl	1c174 <xQueueReceive>
   1d79a:	4603      	mov	r3, r0
   1d79c:	2b00      	cmp	r3, #0
   1d79e:	f47f af79 	bne.w	1d694 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d7a2:	bf00      	nop
   1d7a4:	3728      	adds	r7, #40	; 0x28
   1d7a6:	46bd      	mov	sp, r7
   1d7a8:	bd80      	pop	{r7, pc}
   1d7aa:	bf00      	nop
   1d7ac:	10005124 	.word	0x10005124

0001d7b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d7b0:	b580      	push	{r7, lr}
   1d7b2:	b088      	sub	sp, #32
   1d7b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d7b6:	e03b      	b.n	1d830 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d7b8:	4b27      	ldr	r3, [pc, #156]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d7ba:	681b      	ldr	r3, [r3, #0]
   1d7bc:	68db      	ldr	r3, [r3, #12]
   1d7be:	681b      	ldr	r3, [r3, #0]
   1d7c0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1d7c2:	4b25      	ldr	r3, [pc, #148]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d7c4:	681b      	ldr	r3, [r3, #0]
   1d7c6:	68db      	ldr	r3, [r3, #12]
   1d7c8:	68db      	ldr	r3, [r3, #12]
   1d7ca:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d7cc:	693b      	ldr	r3, [r7, #16]
   1d7ce:	3304      	adds	r3, #4
   1d7d0:	4618      	mov	r0, r3
   1d7d2:	f7fe faa5 	bl	1bd20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d7d6:	693b      	ldr	r3, [r7, #16]
   1d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d7da:	6938      	ldr	r0, [r7, #16]
   1d7dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d7de:	693b      	ldr	r3, [r7, #16]
   1d7e0:	69db      	ldr	r3, [r3, #28]
   1d7e2:	2b01      	cmp	r3, #1
   1d7e4:	d124      	bne.n	1d830 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d7e6:	693b      	ldr	r3, [r7, #16]
   1d7e8:	699a      	ldr	r2, [r3, #24]
   1d7ea:	697b      	ldr	r3, [r7, #20]
   1d7ec:	4413      	add	r3, r2
   1d7ee:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d7f0:	68fa      	ldr	r2, [r7, #12]
   1d7f2:	697b      	ldr	r3, [r7, #20]
   1d7f4:	429a      	cmp	r2, r3
   1d7f6:	d90e      	bls.n	1d816 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d7f8:	693b      	ldr	r3, [r7, #16]
   1d7fa:	68fa      	ldr	r2, [r7, #12]
   1d7fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d7fe:	693b      	ldr	r3, [r7, #16]
   1d800:	693a      	ldr	r2, [r7, #16]
   1d802:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d804:	4b14      	ldr	r3, [pc, #80]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d806:	681a      	ldr	r2, [r3, #0]
   1d808:	693b      	ldr	r3, [r7, #16]
   1d80a:	3304      	adds	r3, #4
   1d80c:	4619      	mov	r1, r3
   1d80e:	4610      	mov	r0, r2
   1d810:	f7fe fa4d 	bl	1bcae <vListInsert>
   1d814:	e00c      	b.n	1d830 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d816:	2300      	movs	r3, #0
   1d818:	9300      	str	r3, [sp, #0]
   1d81a:	2300      	movs	r3, #0
   1d81c:	697a      	ldr	r2, [r7, #20]
   1d81e:	2100      	movs	r1, #0
   1d820:	6938      	ldr	r0, [r7, #16]
   1d822:	f7ff fdd3 	bl	1d3cc <xTimerGenericCommand>
   1d826:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   1d828:	68bb      	ldr	r3, [r7, #8]
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	d100      	bne.n	1d830 <prvSwitchTimerLists+0x80>
   1d82e:	e7fe      	b.n	1d82e <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d830:	4b09      	ldr	r3, [pc, #36]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d832:	681b      	ldr	r3, [r3, #0]
   1d834:	681b      	ldr	r3, [r3, #0]
   1d836:	2b00      	cmp	r3, #0
   1d838:	d1be      	bne.n	1d7b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d83a:	4b07      	ldr	r3, [pc, #28]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d83c:	681b      	ldr	r3, [r3, #0]
   1d83e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d840:	4b06      	ldr	r3, [pc, #24]	; (1d85c <prvSwitchTimerLists+0xac>)
   1d842:	681b      	ldr	r3, [r3, #0]
   1d844:	4a04      	ldr	r2, [pc, #16]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d846:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   1d848:	4a04      	ldr	r2, [pc, #16]	; (1d85c <prvSwitchTimerLists+0xac>)
   1d84a:	687b      	ldr	r3, [r7, #4]
   1d84c:	6013      	str	r3, [r2, #0]
}
   1d84e:	bf00      	nop
   1d850:	3718      	adds	r7, #24
   1d852:	46bd      	mov	sp, r7
   1d854:	bd80      	pop	{r7, pc}
   1d856:	bf00      	nop
   1d858:	1000511c 	.word	0x1000511c
   1d85c:	10005120 	.word	0x10005120

0001d860 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d860:	b580      	push	{r7, lr}
   1d862:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d864:	f7fb fa50 	bl	18d08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   1d868:	4b0d      	ldr	r3, [pc, #52]	; (1d8a0 <prvCheckForValidListAndQueue+0x40>)
   1d86a:	681b      	ldr	r3, [r3, #0]
   1d86c:	2b00      	cmp	r3, #0
   1d86e:	d113      	bne.n	1d898 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
   1d870:	480c      	ldr	r0, [pc, #48]	; (1d8a4 <prvCheckForValidListAndQueue+0x44>)
   1d872:	f7fe f9cb 	bl	1bc0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1d876:	480c      	ldr	r0, [pc, #48]	; (1d8a8 <prvCheckForValidListAndQueue+0x48>)
   1d878:	f7fe f9c8 	bl	1bc0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1d87c:	4b0b      	ldr	r3, [pc, #44]	; (1d8ac <prvCheckForValidListAndQueue+0x4c>)
   1d87e:	4a09      	ldr	r2, [pc, #36]	; (1d8a4 <prvCheckForValidListAndQueue+0x44>)
   1d880:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d882:	4b0b      	ldr	r3, [pc, #44]	; (1d8b0 <prvCheckForValidListAndQueue+0x50>)
   1d884:	4a08      	ldr	r2, [pc, #32]	; (1d8a8 <prvCheckForValidListAndQueue+0x48>)
   1d886:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d888:	2200      	movs	r2, #0
   1d88a:	2110      	movs	r1, #16
   1d88c:	2005      	movs	r0, #5
   1d88e:	f7fe facf 	bl	1be30 <xQueueGenericCreate>
   1d892:	4602      	mov	r2, r0
   1d894:	4b02      	ldr	r3, [pc, #8]	; (1d8a0 <prvCheckForValidListAndQueue+0x40>)
   1d896:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d898:	f7fb fa5c 	bl	18d54 <vPortExitCritical>
}
   1d89c:	bf00      	nop
   1d89e:	bd80      	pop	{r7, pc}
   1d8a0:	10005124 	.word	0x10005124
   1d8a4:	100050f4 	.word	0x100050f4
   1d8a8:	10005108 	.word	0x10005108
   1d8ac:	1000511c 	.word	0x1000511c
   1d8b0:	10005120 	.word	0x10005120

0001d8b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   1d8b4:	b580      	push	{r7, lr}
   1d8b6:	b08a      	sub	sp, #40	; 0x28
   1d8b8:	af00      	add	r7, sp, #0
   1d8ba:	60f8      	str	r0, [r7, #12]
   1d8bc:	60b9      	str	r1, [r7, #8]
   1d8be:	607a      	str	r2, [r7, #4]
   1d8c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   1d8c2:	f06f 0301 	mvn.w	r3, #1
   1d8c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   1d8c8:	68fb      	ldr	r3, [r7, #12]
   1d8ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   1d8cc:	68bb      	ldr	r3, [r7, #8]
   1d8ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   1d8d0:	687b      	ldr	r3, [r7, #4]
   1d8d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d8d4:	4b06      	ldr	r3, [pc, #24]	; (1d8f0 <xTimerPendFunctionCallFromISR+0x3c>)
   1d8d6:	6818      	ldr	r0, [r3, #0]
   1d8d8:	f107 0114 	add.w	r1, r7, #20
   1d8dc:	2300      	movs	r3, #0
   1d8de:	683a      	ldr	r2, [r7, #0]
   1d8e0:	f7fe fbce 	bl	1c080 <xQueueGenericSendFromISR>
   1d8e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   1d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
   1d8e8:	4618      	mov	r0, r3
   1d8ea:	3728      	adds	r7, #40	; 0x28
   1d8ec:	46bd      	mov	sp, r7
   1d8ee:	bd80      	pop	{r7, pc}
   1d8f0:	10005124 	.word	0x10005124

0001d8f4 <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   1d8f4:	b590      	push	{r4, r7, lr}
   1d8f6:	b087      	sub	sp, #28
   1d8f8:	af00      	add	r7, sp, #0
   1d8fa:	4603      	mov	r3, r0
   1d8fc:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1d8fe:	79fb      	ldrb	r3, [r7, #7]
   1d900:	3b01      	subs	r3, #1
   1d902:	011b      	lsls	r3, r3, #4
   1d904:	4a29      	ldr	r2, [pc, #164]	; (1d9ac <appDiscStart+0xb8>)
   1d906:	4413      	add	r3, r2
   1d908:	613b      	str	r3, [r7, #16]

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1d90a:	693b      	ldr	r3, [r7, #16]
   1d90c:	7adb      	ldrb	r3, [r3, #11]
   1d90e:	2b00      	cmp	r3, #0
   1d910:	d148      	bne.n	1d9a4 <appDiscStart+0xb0>
  {
    /* get discovery status */
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1d912:	79fb      	ldrb	r3, [r7, #7]
   1d914:	4618      	mov	r0, r3
   1d916:	f000 fd8b 	bl	1e430 <AppDbGetHdl>
   1d91a:	60f8      	str	r0, [r7, #12]
   1d91c:	68fb      	ldr	r3, [r7, #12]
   1d91e:	2b00      	cmp	r3, #0
   1d920:	d005      	beq.n	1d92e <appDiscStart+0x3a>
    {
      status = AppDbGetDiscStatus(hdl);
   1d922:	68f8      	ldr	r0, [r7, #12]
   1d924:	f7fb ff31 	bl	1978a <AppDbGetDiscStatus>
   1d928:	4603      	mov	r3, r0
   1d92a:	75fb      	strb	r3, [r7, #23]
   1d92c:	e002      	b.n	1d934 <appDiscStart+0x40>
    }
    else
    {
      status = pAppDiscCb->cmplStatus;
   1d92e:	693b      	ldr	r3, [r7, #16]
   1d930:	7a5b      	ldrb	r3, [r3, #9]
   1d932:	75fb      	strb	r3, [r7, #23]
    }
  
    /* if discovery not complete */
    if (status < APP_DISC_CMPL)
   1d934:	7dfb      	ldrb	r3, [r7, #23]
   1d936:	2b02      	cmp	r3, #2
   1d938:	d806      	bhi.n	1d948 <appDiscStart+0x54>
    {
      /* notify application to start discovery */
      (*appDiscCback)(connId, APP_DISC_START);      
   1d93a:	4b1d      	ldr	r3, [pc, #116]	; (1d9b0 <appDiscStart+0xbc>)
   1d93c:	681b      	ldr	r3, [r3, #0]
   1d93e:	79fa      	ldrb	r2, [r7, #7]
   1d940:	2102      	movs	r1, #2
   1d942:	4610      	mov	r0, r2
   1d944:	4798      	blx	r3
      {
        (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
      }
    }
  }
}
   1d946:	e02d      	b.n	1d9a4 <appDiscStart+0xb0>
    else if (status != APP_DISC_FAILED)
   1d948:	7dfb      	ldrb	r3, [r7, #23]
   1d94a:	2b04      	cmp	r3, #4
   1d94c:	d02a      	beq.n	1d9a4 <appDiscStart+0xb0>
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   1d94e:	68fb      	ldr	r3, [r7, #12]
   1d950:	2b00      	cmp	r3, #0
   1d952:	d010      	beq.n	1d976 <appDiscStart+0x82>
   1d954:	693b      	ldr	r3, [r7, #16]
   1d956:	685b      	ldr	r3, [r3, #4]
   1d958:	2b00      	cmp	r3, #0
   1d95a:	d00c      	beq.n	1d976 <appDiscStart+0x82>
        memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1d95c:	693b      	ldr	r3, [r7, #16]
   1d95e:	685c      	ldr	r4, [r3, #4]
   1d960:	68f8      	ldr	r0, [r7, #12]
   1d962:	f7fb ff2f 	bl	197c4 <AppDbGetHdlList>
   1d966:	4601      	mov	r1, r0
   1d968:	693b      	ldr	r3, [r7, #16]
   1d96a:	7a9b      	ldrb	r3, [r3, #10]
   1d96c:	005b      	lsls	r3, r3, #1
   1d96e:	461a      	mov	r2, r3
   1d970:	4620      	mov	r0, r4
   1d972:	f7ee fbf5 	bl	c160 <memcpy>
      if (status < APP_DISC_CFG_CMPL)
   1d976:	7dfb      	ldrb	r3, [r7, #23]
   1d978:	2b06      	cmp	r3, #6
   1d97a:	d806      	bhi.n	1d98a <appDiscStart+0x96>
        (*appDiscCback)(connId, APP_DISC_CFG_START);          
   1d97c:	4b0c      	ldr	r3, [pc, #48]	; (1d9b0 <appDiscStart+0xbc>)
   1d97e:	681b      	ldr	r3, [r3, #0]
   1d980:	79fa      	ldrb	r2, [r7, #7]
   1d982:	2105      	movs	r1, #5
   1d984:	4610      	mov	r0, r2
   1d986:	4798      	blx	r3
}
   1d988:	e00c      	b.n	1d9a4 <appDiscStart+0xb0>
      else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1d98a:	7dfb      	ldrb	r3, [r7, #23]
   1d98c:	2b07      	cmp	r3, #7
   1d98e:	d109      	bne.n	1d9a4 <appDiscStart+0xb0>
   1d990:	693b      	ldr	r3, [r7, #16]
   1d992:	7a1b      	ldrb	r3, [r3, #8]
   1d994:	2b00      	cmp	r3, #0
   1d996:	d105      	bne.n	1d9a4 <appDiscStart+0xb0>
        (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1d998:	4b05      	ldr	r3, [pc, #20]	; (1d9b0 <appDiscStart+0xbc>)
   1d99a:	681b      	ldr	r3, [r3, #0]
   1d99c:	79fa      	ldrb	r2, [r7, #7]
   1d99e:	2106      	movs	r1, #6
   1d9a0:	4610      	mov	r0, r2
   1d9a2:	4798      	blx	r3
}
   1d9a4:	bf00      	nop
   1d9a6:	371c      	adds	r7, #28
   1d9a8:	46bd      	mov	sp, r7
   1d9aa:	bd90      	pop	{r4, r7, pc}
   1d9ac:	10005130 	.word	0x10005130
   1d9b0:	100051b0 	.word	0x100051b0

0001d9b4 <appDiscConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnOpen(dmEvt_t *pMsg)
{
   1d9b4:	b580      	push	{r7, lr}
   1d9b6:	b084      	sub	sp, #16
   1d9b8:	af00      	add	r7, sp, #0
   1d9ba:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1d9bc:	687b      	ldr	r3, [r7, #4]
   1d9be:	881b      	ldrh	r3, [r3, #0]
   1d9c0:	b2db      	uxtb	r3, r3
   1d9c2:	3b01      	subs	r3, #1
   1d9c4:	011b      	lsls	r3, r3, #4
   1d9c6:	4a1b      	ldr	r2, [pc, #108]	; (1da34 <appDiscConnOpen+0x80>)
   1d9c8:	4413      	add	r3, r2
   1d9ca:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->alreadySecure = FALSE;
   1d9cc:	68fb      	ldr	r3, [r7, #12]
   1d9ce:	2200      	movs	r2, #0
   1d9d0:	731a      	strb	r2, [r3, #12]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1d9d2:	68fb      	ldr	r3, [r7, #12]
   1d9d4:	2200      	movs	r2, #0
   1d9d6:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   1d9d8:	68fb      	ldr	r3, [r7, #12]
   1d9da:	2200      	movs	r2, #0
   1d9dc:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   1d9de:	68fb      	ldr	r3, [r7, #12]
   1d9e0:	2200      	movs	r2, #0
   1d9e2:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   1d9e4:	68fb      	ldr	r3, [r7, #12]
   1d9e6:	2200      	movs	r2, #0
   1d9e8:	739a      	strb	r2, [r3, #14]
  
  /* tell app to set up handle list */
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1d9ea:	4b13      	ldr	r3, [pc, #76]	; (1da38 <appDiscConnOpen+0x84>)
   1d9ec:	681b      	ldr	r3, [r3, #0]
   1d9ee:	687a      	ldr	r2, [r7, #4]
   1d9f0:	8812      	ldrh	r2, [r2, #0]
   1d9f2:	b2d2      	uxtb	r2, r2
   1d9f4:	2100      	movs	r1, #0
   1d9f6:	4610      	mov	r0, r2
   1d9f8:	4798      	blx	r3
  
  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1d9fa:	68fb      	ldr	r3, [r7, #12]
   1d9fc:	685b      	ldr	r3, [r3, #4]
   1d9fe:	2b00      	cmp	r3, #0
   1da00:	d008      	beq.n	1da14 <appDiscConnOpen+0x60>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1da02:	68fb      	ldr	r3, [r7, #12]
   1da04:	6858      	ldr	r0, [r3, #4]
   1da06:	68fb      	ldr	r3, [r7, #12]
   1da08:	7a9b      	ldrb	r3, [r3, #10]
   1da0a:	005b      	lsls	r3, r3, #1
   1da0c:	461a      	mov	r2, r3
   1da0e:	2100      	movs	r1, #0
   1da10:	f7ee fca4 	bl	c35c <memset>
  }
  
  /* if not waiting for security start discovery/configuration */
  if (!pAppDiscCfg->waitForSec)
   1da14:	4b09      	ldr	r3, [pc, #36]	; (1da3c <appDiscConnOpen+0x88>)
   1da16:	681b      	ldr	r3, [r3, #0]
   1da18:	781b      	ldrb	r3, [r3, #0]
   1da1a:	2b00      	cmp	r3, #0
   1da1c:	d105      	bne.n	1da2a <appDiscConnOpen+0x76>
  {
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1da1e:	687b      	ldr	r3, [r7, #4]
   1da20:	881b      	ldrh	r3, [r3, #0]
   1da22:	b2db      	uxtb	r3, r3
   1da24:	4618      	mov	r0, r3
   1da26:	f7ff ff65 	bl	1d8f4 <appDiscStart>
  }
}
   1da2a:	bf00      	nop
   1da2c:	3710      	adds	r7, #16
   1da2e:	46bd      	mov	sp, r7
   1da30:	bd80      	pop	{r7, pc}
   1da32:	bf00      	nop
   1da34:	10005130 	.word	0x10005130
   1da38:	100051b0 	.word	0x100051b0
   1da3c:	10009ec8 	.word	0x10009ec8

0001da40 <appDiscConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnClose(dmEvt_t *pMsg)
{
   1da40:	b580      	push	{r7, lr}
   1da42:	b084      	sub	sp, #16
   1da44:	af00      	add	r7, sp, #0
   1da46:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1da48:	687b      	ldr	r3, [r7, #4]
   1da4a:	881b      	ldrh	r3, [r3, #0]
   1da4c:	b2db      	uxtb	r3, r3
   1da4e:	3b01      	subs	r3, #1
   1da50:	011b      	lsls	r3, r3, #4
   1da52:	4a12      	ldr	r2, [pc, #72]	; (1da9c <appDiscConnClose+0x5c>)
   1da54:	4413      	add	r3, r2
   1da56:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1da58:	68fb      	ldr	r3, [r7, #12]
   1da5a:	2200      	movs	r2, #0
   1da5c:	72da      	strb	r2, [r3, #11]

  appDbHdl_t  hdl;
  
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1da5e:	687b      	ldr	r3, [r7, #4]
   1da60:	881b      	ldrh	r3, [r3, #0]
   1da62:	b2db      	uxtb	r3, r3
   1da64:	4618      	mov	r0, r3
   1da66:	f000 fce3 	bl	1e430 <AppDbGetHdl>
   1da6a:	60b8      	str	r0, [r7, #8]
   1da6c:	68bb      	ldr	r3, [r7, #8]
   1da6e:	2b00      	cmp	r3, #0
   1da70:	d003      	beq.n	1da7a <appDiscConnClose+0x3a>
  {
    // reset discovery status
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   1da72:	2100      	movs	r1, #0
   1da74:	68b8      	ldr	r0, [r7, #8]
   1da76:	f7fb fe95 	bl	197a4 <AppDbSetDiscStatus>
  }


  if (pAppDiscCb->pDiscCb != NULL)
   1da7a:	68fb      	ldr	r3, [r7, #12]
   1da7c:	681b      	ldr	r3, [r3, #0]
   1da7e:	2b00      	cmp	r3, #0
   1da80:	d007      	beq.n	1da92 <appDiscConnClose+0x52>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1da82:	68fb      	ldr	r3, [r7, #12]
   1da84:	681b      	ldr	r3, [r3, #0]
   1da86:	4618      	mov	r0, r3
   1da88:	f7fc ff02 	bl	1a890 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1da8c:	68fb      	ldr	r3, [r7, #12]
   1da8e:	2200      	movs	r2, #0
   1da90:	601a      	str	r2, [r3, #0]
  }
}
   1da92:	bf00      	nop
   1da94:	3710      	adds	r7, #16
   1da96:	46bd      	mov	sp, r7
   1da98:	bd80      	pop	{r7, pc}
   1da9a:	bf00      	nop
   1da9c:	10005130 	.word	0x10005130

0001daa0 <appDiscPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscPairCmpl(dmEvt_t *pMsg)
{
   1daa0:	b580      	push	{r7, lr}
   1daa2:	b084      	sub	sp, #16
   1daa4:	af00      	add	r7, sp, #0
   1daa6:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1daa8:	687b      	ldr	r3, [r7, #4]
   1daaa:	881b      	ldrh	r3, [r3, #0]
   1daac:	b2db      	uxtb	r3, r3
   1daae:	3b01      	subs	r3, #1
   1dab0:	011b      	lsls	r3, r3, #4
   1dab2:	4a30      	ldr	r2, [pc, #192]	; (1db74 <appDiscPairCmpl+0xd4>)
   1dab4:	4413      	add	r3, r2
   1dab6:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* procedures triggered by security are only executed once */
  if (pAppDiscCb->alreadySecure)
   1dab8:	68fb      	ldr	r3, [r7, #12]
   1daba:	7b1b      	ldrb	r3, [r3, #12]
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	d154      	bne.n	1db6a <appDiscPairCmpl+0xca>
  {
    return;
  }

  /* if we are now bonded and discovery/configuration was performed before bonding */
  if (appCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   1dac0:	687b      	ldr	r3, [r7, #4]
   1dac2:	881b      	ldrh	r3, [r3, #0]
   1dac4:	b2db      	uxtb	r3, r3
   1dac6:	4618      	mov	r0, r3
   1dac8:	f000 fba6 	bl	1e218 <appCheckBonded>
   1dacc:	4603      	mov	r3, r0
   1dace:	2b00      	cmp	r3, #0
   1dad0:	d03a      	beq.n	1db48 <appDiscPairCmpl+0xa8>
   1dad2:	68fb      	ldr	r3, [r7, #12]
   1dad4:	7a5b      	ldrb	r3, [r3, #9]
   1dad6:	2b00      	cmp	r3, #0
   1dad8:	d036      	beq.n	1db48 <appDiscPairCmpl+0xa8>
  {
    if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1dada:	687b      	ldr	r3, [r7, #4]
   1dadc:	881b      	ldrh	r3, [r3, #0]
   1dade:	b2db      	uxtb	r3, r3
   1dae0:	4618      	mov	r0, r3
   1dae2:	f000 fca5 	bl	1e430 <AppDbGetHdl>
   1dae6:	60b8      	str	r0, [r7, #8]
   1dae8:	68bb      	ldr	r3, [r7, #8]
   1daea:	2b00      	cmp	r3, #0
   1daec:	d017      	beq.n	1db1e <appDiscPairCmpl+0x7e>
    {
      /* store discovery status */
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   1daee:	68fb      	ldr	r3, [r7, #12]
   1daf0:	7a5b      	ldrb	r3, [r3, #9]
   1daf2:	4619      	mov	r1, r3
   1daf4:	68b8      	ldr	r0, [r7, #8]
   1daf6:	f7fb fe55 	bl	197a4 <AppDbSetDiscStatus>

      /* store handle list */
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   1dafa:	68fb      	ldr	r3, [r7, #12]
   1dafc:	7a5b      	ldrb	r3, [r3, #9]
   1dafe:	2b03      	cmp	r3, #3
   1db00:	d003      	beq.n	1db0a <appDiscPairCmpl+0x6a>
   1db02:	68fb      	ldr	r3, [r7, #12]
   1db04:	7a5b      	ldrb	r3, [r3, #9]
   1db06:	2b07      	cmp	r3, #7
   1db08:	d109      	bne.n	1db1e <appDiscPairCmpl+0x7e>
      {
        if (pAppDiscCb->pHdlList != NULL)
   1db0a:	68fb      	ldr	r3, [r7, #12]
   1db0c:	685b      	ldr	r3, [r3, #4]
   1db0e:	2b00      	cmp	r3, #0
   1db10:	d005      	beq.n	1db1e <appDiscPairCmpl+0x7e>
        {
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1db12:	68fb      	ldr	r3, [r7, #12]
   1db14:	685b      	ldr	r3, [r3, #4]
   1db16:	4619      	mov	r1, r3
   1db18:	68b8      	ldr	r0, [r7, #8]
   1db1a:	f7fb fe5f 	bl	197dc <AppDbSetHdlList>
        }
      }
    }
    
    /* if configuration was waiting for security */
    if (pAppDiscCb->secRequired)
   1db1e:	68fb      	ldr	r3, [r7, #12]
   1db20:	7b5b      	ldrb	r3, [r3, #13]
   1db22:	2b00      	cmp	r3, #0
   1db24:	d01c      	beq.n	1db60 <appDiscPairCmpl+0xc0>
    {
      pAppDiscCb->secRequired = FALSE;
   1db26:	68fb      	ldr	r3, [r7, #12]
   1db28:	2200      	movs	r2, #0
   1db2a:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1db2c:	68fb      	ldr	r3, [r7, #12]
   1db2e:	681b      	ldr	r3, [r3, #0]
   1db30:	2b00      	cmp	r3, #0
   1db32:	d015      	beq.n	1db60 <appDiscPairCmpl+0xc0>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1db34:	687b      	ldr	r3, [r7, #4]
   1db36:	881b      	ldrh	r3, [r3, #0]
   1db38:	b2da      	uxtb	r2, r3
   1db3a:	68fb      	ldr	r3, [r7, #12]
   1db3c:	681b      	ldr	r3, [r3, #0]
   1db3e:	4619      	mov	r1, r3
   1db40:	4610      	mov	r0, r2
   1db42:	f7ee ff89 	bl	ca58 <AttcDiscConfigResume>
    if (pAppDiscCb->secRequired)
   1db46:	e00b      	b.n	1db60 <appDiscPairCmpl+0xc0>
    }
  } 
  else {
    
    /* if waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1db48:	4b0b      	ldr	r3, [pc, #44]	; (1db78 <appDiscPairCmpl+0xd8>)
   1db4a:	681b      	ldr	r3, [r3, #0]
   1db4c:	781b      	ldrb	r3, [r3, #0]
   1db4e:	2b00      	cmp	r3, #0
   1db50:	d007      	beq.n	1db62 <appDiscPairCmpl+0xc2>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1db52:	687b      	ldr	r3, [r7, #4]
   1db54:	881b      	ldrh	r3, [r3, #0]
   1db56:	b2db      	uxtb	r3, r3
   1db58:	4618      	mov	r0, r3
   1db5a:	f7ff fecb 	bl	1d8f4 <appDiscStart>
   1db5e:	e000      	b.n	1db62 <appDiscPairCmpl+0xc2>
    if (pAppDiscCb->secRequired)
   1db60:	bf00      	nop
    }
  }  
    
  pAppDiscCb->alreadySecure = TRUE;
   1db62:	68fb      	ldr	r3, [r7, #12]
   1db64:	2201      	movs	r2, #1
   1db66:	731a      	strb	r2, [r3, #12]
   1db68:	e000      	b.n	1db6c <appDiscPairCmpl+0xcc>
    return;
   1db6a:	bf00      	nop
}
   1db6c:	3710      	adds	r7, #16
   1db6e:	46bd      	mov	sp, r7
   1db70:	bd80      	pop	{r7, pc}
   1db72:	bf00      	nop
   1db74:	10005130 	.word	0x10005130
   1db78:	10009ec8 	.word	0x10009ec8

0001db7c <appDiscEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscEncryptInd(dmEvt_t *pMsg)
{
   1db7c:	b580      	push	{r7, lr}
   1db7e:	b084      	sub	sp, #16
   1db80:	af00      	add	r7, sp, #0
   1db82:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1db84:	687b      	ldr	r3, [r7, #4]
   1db86:	881b      	ldrh	r3, [r3, #0]
   1db88:	b2db      	uxtb	r3, r3
   1db8a:	3b01      	subs	r3, #1
   1db8c:	011b      	lsls	r3, r3, #4
   1db8e:	4a19      	ldr	r2, [pc, #100]	; (1dbf4 <appDiscEncryptInd+0x78>)
   1db90:	4413      	add	r3, r2
   1db92:	60fb      	str	r3, [r7, #12]

  /* if encrypted with ltk */
  if (pMsg->encryptInd.usingLtk)
   1db94:	687b      	ldr	r3, [r7, #4]
   1db96:	791b      	ldrb	r3, [r3, #4]
   1db98:	2b00      	cmp	r3, #0
   1db9a:	d028      	beq.n	1dbee <appDiscEncryptInd+0x72>
  {
    /* procedures triggered by security are only executed once */
    if (pAppDiscCb->alreadySecure)
   1db9c:	68fb      	ldr	r3, [r7, #12]
   1db9e:	7b1b      	ldrb	r3, [r3, #12]
   1dba0:	2b00      	cmp	r3, #0
   1dba2:	d123      	bne.n	1dbec <appDiscEncryptInd+0x70>
    {
      return;
    }

    /* if we waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1dba4:	4b14      	ldr	r3, [pc, #80]	; (1dbf8 <appDiscEncryptInd+0x7c>)
   1dba6:	681b      	ldr	r3, [r3, #0]
   1dba8:	781b      	ldrb	r3, [r3, #0]
   1dbaa:	2b00      	cmp	r3, #0
   1dbac:	d006      	beq.n	1dbbc <appDiscEncryptInd+0x40>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1dbae:	687b      	ldr	r3, [r7, #4]
   1dbb0:	881b      	ldrh	r3, [r3, #0]
   1dbb2:	b2db      	uxtb	r3, r3
   1dbb4:	4618      	mov	r0, r3
   1dbb6:	f7ff fe9d 	bl	1d8f4 <appDiscStart>
   1dbba:	e013      	b.n	1dbe4 <appDiscEncryptInd+0x68>
    }
    /* else if configuration was waiting for security */
    else if (pAppDiscCb->secRequired)
   1dbbc:	68fb      	ldr	r3, [r7, #12]
   1dbbe:	7b5b      	ldrb	r3, [r3, #13]
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	d00f      	beq.n	1dbe4 <appDiscEncryptInd+0x68>
    {
      pAppDiscCb->secRequired = FALSE;
   1dbc4:	68fb      	ldr	r3, [r7, #12]
   1dbc6:	2200      	movs	r2, #0
   1dbc8:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1dbca:	68fb      	ldr	r3, [r7, #12]
   1dbcc:	681b      	ldr	r3, [r3, #0]
   1dbce:	2b00      	cmp	r3, #0
   1dbd0:	d008      	beq.n	1dbe4 <appDiscEncryptInd+0x68>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1dbd2:	687b      	ldr	r3, [r7, #4]
   1dbd4:	881b      	ldrh	r3, [r3, #0]
   1dbd6:	b2da      	uxtb	r2, r3
   1dbd8:	68fb      	ldr	r3, [r7, #12]
   1dbda:	681b      	ldr	r3, [r3, #0]
   1dbdc:	4619      	mov	r1, r3
   1dbde:	4610      	mov	r0, r2
   1dbe0:	f7ee ff3a 	bl	ca58 <AttcDiscConfigResume>
      }
    }
      
    pAppDiscCb->alreadySecure = TRUE;
   1dbe4:	68fb      	ldr	r3, [r7, #12]
   1dbe6:	2201      	movs	r2, #1
   1dbe8:	731a      	strb	r2, [r3, #12]
   1dbea:	e000      	b.n	1dbee <appDiscEncryptInd+0x72>
      return;
   1dbec:	bf00      	nop
  }
}
   1dbee:	3710      	adds	r7, #16
   1dbf0:	46bd      	mov	sp, r7
   1dbf2:	bd80      	pop	{r7, pc}
   1dbf4:	10005130 	.word	0x10005130
   1dbf8:	10009ec8 	.word	0x10009ec8

0001dbfc <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   1dbfc:	b580      	push	{r7, lr}
   1dbfe:	b082      	sub	sp, #8
   1dc00:	af00      	add	r7, sp, #0
   1dc02:	6078      	str	r0, [r7, #4]
  switch(pMsg->hdr.event)
   1dc04:	687b      	ldr	r3, [r7, #4]
   1dc06:	789b      	ldrb	r3, [r3, #2]
   1dc08:	3b27      	subs	r3, #39	; 0x27
   1dc0a:	2b05      	cmp	r3, #5
   1dc0c:	d81e      	bhi.n	1dc4c <AppDiscProcDmMsg+0x50>
   1dc0e:	a201      	add	r2, pc, #4	; (adr r2, 1dc14 <AppDiscProcDmMsg+0x18>)
   1dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dc14:	0001dc2d 	.word	0x0001dc2d
   1dc18:	0001dc35 	.word	0x0001dc35
   1dc1c:	0001dc4d 	.word	0x0001dc4d
   1dc20:	0001dc3d 	.word	0x0001dc3d
   1dc24:	0001dc4d 	.word	0x0001dc4d
   1dc28:	0001dc45 	.word	0x0001dc45
  {
    case DM_CONN_OPEN_IND:
      appDiscConnOpen(pMsg);
   1dc2c:	6878      	ldr	r0, [r7, #4]
   1dc2e:	f7ff fec1 	bl	1d9b4 <appDiscConnOpen>
      break;
   1dc32:	e00c      	b.n	1dc4e <AppDiscProcDmMsg+0x52>

    case DM_CONN_CLOSE_IND:
      appDiscConnClose(pMsg);
   1dc34:	6878      	ldr	r0, [r7, #4]
   1dc36:	f7ff ff03 	bl	1da40 <appDiscConnClose>
      break;
   1dc3a:	e008      	b.n	1dc4e <AppDiscProcDmMsg+0x52>

    case DM_SEC_PAIR_CMPL_IND:
      appDiscPairCmpl(pMsg);
   1dc3c:	6878      	ldr	r0, [r7, #4]
   1dc3e:	f7ff ff2f 	bl	1daa0 <appDiscPairCmpl>
      break;
   1dc42:	e004      	b.n	1dc4e <AppDiscProcDmMsg+0x52>
      
    case DM_SEC_ENCRYPT_IND:
      appDiscEncryptInd(pMsg);
   1dc44:	6878      	ldr	r0, [r7, #4]
   1dc46:	f7ff ff99 	bl	1db7c <appDiscEncryptInd>
      break;
   1dc4a:	e000      	b.n	1dc4e <AppDiscProcDmMsg+0x52>
      
    default:
      break;
   1dc4c:	bf00      	nop
  }
}
   1dc4e:	bf00      	nop
   1dc50:	3708      	adds	r7, #8
   1dc52:	46bd      	mov	sp, r7
   1dc54:	bd80      	pop	{r7, pc}
   1dc56:	bf00      	nop

0001dc58 <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   1dc58:	b580      	push	{r7, lr}
   1dc5a:	b084      	sub	sp, #16
   1dc5c:	af00      	add	r7, sp, #0
   1dc5e:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1dc60:	687b      	ldr	r3, [r7, #4]
   1dc62:	881b      	ldrh	r3, [r3, #0]
   1dc64:	b2db      	uxtb	r3, r3
   1dc66:	3b01      	subs	r3, #1
   1dc68:	011b      	lsls	r3, r3, #4
   1dc6a:	4a5c      	ldr	r2, [pc, #368]	; (1dddc <AppDiscProcAttMsg+0x184>)
   1dc6c:	4413      	add	r3, r2
   1dc6e:	60fb      	str	r3, [r7, #12]
  uint8_t status;
  
  if (pAppDiscCb->inProgress == APP_DISC_IN_PROGRESS)
   1dc70:	68fb      	ldr	r3, [r7, #12]
   1dc72:	7adb      	ldrb	r3, [r3, #11]
   1dc74:	2b01      	cmp	r3, #1
   1dc76:	d157      	bne.n	1dd28 <AppDiscProcAttMsg+0xd0>
  {
    /* service discovery */
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   1dc78:	687b      	ldr	r3, [r7, #4]
   1dc7a:	789b      	ldrb	r3, [r3, #2]
   1dc7c:	2b03      	cmp	r3, #3
   1dc7e:	d126      	bne.n	1dcce <AppDiscProcAttMsg+0x76>
    {
      /* continue with service discovery */
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   1dc80:	68fb      	ldr	r3, [r7, #12]
   1dc82:	681b      	ldr	r3, [r3, #0]
   1dc84:	6879      	ldr	r1, [r7, #4]
   1dc86:	4618      	mov	r0, r3
   1dc88:	f7ee fdc2 	bl	c810 <AttcDiscServiceCmpl>
   1dc8c:	4603      	mov	r3, r0
   1dc8e:	72fb      	strb	r3, [r7, #11]
      
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   1dc90:	7afb      	ldrb	r3, [r7, #11]
   1dc92:	4619      	mov	r1, r3
   1dc94:	4852      	ldr	r0, [pc, #328]	; (1dde0 <AppDiscProcAttMsg+0x188>)
   1dc96:	f7fd fe0b 	bl	1b8b0 <WsfTrace>
      
      /* if discovery complete  and successful */
      if (status == ATT_SUCCESS)
   1dc9a:	7afb      	ldrb	r3, [r7, #11]
   1dc9c:	2b00      	cmp	r3, #0
   1dc9e:	d109      	bne.n	1dcb4 <AppDiscProcAttMsg+0x5c>
      {
        /* proceed with characteristic discovery */
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1dca0:	687b      	ldr	r3, [r7, #4]
   1dca2:	881b      	ldrh	r3, [r3, #0]
   1dca4:	b2da      	uxtb	r2, r3
   1dca6:	68fb      	ldr	r3, [r7, #12]
   1dca8:	681b      	ldr	r3, [r3, #0]
   1dcaa:	4619      	mov	r1, r3
   1dcac:	4610      	mov	r0, r2
   1dcae:	f7ee fdc8 	bl	c842 <AttcDiscCharStart>
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
      }
    }
  }
}
   1dcb2:	e08e      	b.n	1ddd2 <AppDiscProcAttMsg+0x17a>
      else if (status != ATT_CONTINUING)
   1dcb4:	7afb      	ldrb	r3, [r7, #11]
   1dcb6:	2b78      	cmp	r3, #120	; 0x78
   1dcb8:	f000 808b 	beq.w	1ddd2 <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1dcbc:	4b49      	ldr	r3, [pc, #292]	; (1dde4 <AppDiscProcAttMsg+0x18c>)
   1dcbe:	681b      	ldr	r3, [r3, #0]
   1dcc0:	687a      	ldr	r2, [r7, #4]
   1dcc2:	8812      	ldrh	r2, [r2, #0]
   1dcc4:	b2d2      	uxtb	r2, r2
   1dcc6:	2104      	movs	r1, #4
   1dcc8:	4610      	mov	r0, r2
   1dcca:	4798      	blx	r3
}
   1dccc:	e081      	b.n	1ddd2 <AppDiscProcAttMsg+0x17a>
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1dcce:	687b      	ldr	r3, [r7, #4]
   1dcd0:	789b      	ldrb	r3, [r3, #2]
   1dcd2:	2b04      	cmp	r3, #4
   1dcd4:	d003      	beq.n	1dcde <AppDiscProcAttMsg+0x86>
             pMsg->hdr.event == ATTC_FIND_INFO_RSP)
   1dcd6:	687b      	ldr	r3, [r7, #4]
   1dcd8:	789b      	ldrb	r3, [r3, #2]
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1dcda:	2b02      	cmp	r3, #2
   1dcdc:	d179      	bne.n	1ddd2 <AppDiscProcAttMsg+0x17a>
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   1dcde:	68fb      	ldr	r3, [r7, #12]
   1dce0:	681b      	ldr	r3, [r3, #0]
   1dce2:	6879      	ldr	r1, [r7, #4]
   1dce4:	4618      	mov	r0, r3
   1dce6:	f7ee fdbf 	bl	c868 <AttcDiscCharCmpl>
   1dcea:	4603      	mov	r3, r0
   1dcec:	72fb      	strb	r3, [r7, #11]
      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   1dcee:	7afb      	ldrb	r3, [r7, #11]
   1dcf0:	4619      	mov	r1, r3
   1dcf2:	483d      	ldr	r0, [pc, #244]	; (1dde8 <AppDiscProcAttMsg+0x190>)
   1dcf4:	f7fd fddc 	bl	1b8b0 <WsfTrace>
      if (status == ATT_SUCCESS)
   1dcf8:	7afb      	ldrb	r3, [r7, #11]
   1dcfa:	2b00      	cmp	r3, #0
   1dcfc:	d108      	bne.n	1dd10 <AppDiscProcAttMsg+0xb8>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   1dcfe:	4b39      	ldr	r3, [pc, #228]	; (1dde4 <AppDiscProcAttMsg+0x18c>)
   1dd00:	681b      	ldr	r3, [r3, #0]
   1dd02:	687a      	ldr	r2, [r7, #4]
   1dd04:	8812      	ldrh	r2, [r2, #0]
   1dd06:	b2d2      	uxtb	r2, r2
   1dd08:	2103      	movs	r1, #3
   1dd0a:	4610      	mov	r0, r2
   1dd0c:	4798      	blx	r3
}
   1dd0e:	e060      	b.n	1ddd2 <AppDiscProcAttMsg+0x17a>
      else if (status != ATT_CONTINUING)
   1dd10:	7afb      	ldrb	r3, [r7, #11]
   1dd12:	2b78      	cmp	r3, #120	; 0x78
   1dd14:	d05d      	beq.n	1ddd2 <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1dd16:	4b33      	ldr	r3, [pc, #204]	; (1dde4 <AppDiscProcAttMsg+0x18c>)
   1dd18:	681b      	ldr	r3, [r3, #0]
   1dd1a:	687a      	ldr	r2, [r7, #4]
   1dd1c:	8812      	ldrh	r2, [r2, #0]
   1dd1e:	b2d2      	uxtb	r2, r2
   1dd20:	2104      	movs	r1, #4
   1dd22:	4610      	mov	r0, r2
   1dd24:	4798      	blx	r3
}
   1dd26:	e054      	b.n	1ddd2 <AppDiscProcAttMsg+0x17a>
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1dd28:	68fb      	ldr	r3, [r7, #12]
   1dd2a:	7adb      	ldrb	r3, [r3, #11]
   1dd2c:	2b02      	cmp	r3, #2
   1dd2e:	d150      	bne.n	1ddd2 <AppDiscProcAttMsg+0x17a>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1dd30:	687b      	ldr	r3, [r7, #4]
   1dd32:	789b      	ldrb	r3, [r3, #2]
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1dd34:	2b05      	cmp	r3, #5
   1dd36:	d003      	beq.n	1dd40 <AppDiscProcAttMsg+0xe8>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1dd38:	687b      	ldr	r3, [r7, #4]
   1dd3a:	789b      	ldrb	r3, [r3, #2]
   1dd3c:	2b09      	cmp	r3, #9
   1dd3e:	d148      	bne.n	1ddd2 <AppDiscProcAttMsg+0x17a>
    if (pAppDiscCb->scPending)
   1dd40:	68fb      	ldr	r3, [r7, #12]
   1dd42:	7b9b      	ldrb	r3, [r3, #14]
   1dd44:	2b00      	cmp	r3, #0
   1dd46:	d00c      	beq.n	1dd62 <AppDiscProcAttMsg+0x10a>
      pAppDiscCb->scPending = FALSE;
   1dd48:	68fb      	ldr	r3, [r7, #12]
   1dd4a:	2200      	movs	r2, #0
   1dd4c:	739a      	strb	r2, [r3, #14]
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   1dd4e:	68fb      	ldr	r3, [r7, #12]
   1dd50:	2200      	movs	r2, #0
   1dd52:	72da      	strb	r2, [r3, #11]
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1dd54:	687b      	ldr	r3, [r7, #4]
   1dd56:	881b      	ldrh	r3, [r3, #0]
   1dd58:	b2db      	uxtb	r3, r3
   1dd5a:	4618      	mov	r0, r3
   1dd5c:	f7ff fdca 	bl	1d8f4 <appDiscStart>
}
   1dd60:	e037      	b.n	1ddd2 <AppDiscProcAttMsg+0x17a>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1dd62:	687b      	ldr	r3, [r7, #4]
   1dd64:	78db      	ldrb	r3, [r3, #3]
   1dd66:	2b05      	cmp	r3, #5
   1dd68:	d003      	beq.n	1dd72 <AppDiscProcAttMsg+0x11a>
   1dd6a:	687b      	ldr	r3, [r7, #4]
   1dd6c:	78db      	ldrb	r3, [r3, #3]
   1dd6e:	2b0f      	cmp	r3, #15
   1dd70:	d114      	bne.n	1dd9c <AppDiscProcAttMsg+0x144>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1dd72:	687b      	ldr	r3, [r7, #4]
   1dd74:	881b      	ldrh	r3, [r3, #0]
   1dd76:	b2db      	uxtb	r3, r3
   1dd78:	4618      	mov	r0, r3
   1dd7a:	f7f1 fed3 	bl	fb24 <DmConnSecLevel>
   1dd7e:	4603      	mov	r3, r0
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1dd80:	2b00      	cmp	r3, #0
   1dd82:	d10b      	bne.n	1dd9c <AppDiscProcAttMsg+0x144>
      pAppDiscCb->secRequired = TRUE;
   1dd84:	68fb      	ldr	r3, [r7, #12]
   1dd86:	2201      	movs	r2, #1
   1dd88:	735a      	strb	r2, [r3, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1dd8a:	4b16      	ldr	r3, [pc, #88]	; (1dde4 <AppDiscProcAttMsg+0x18c>)
   1dd8c:	681b      	ldr	r3, [r3, #0]
   1dd8e:	687a      	ldr	r2, [r7, #4]
   1dd90:	8812      	ldrh	r2, [r2, #0]
   1dd92:	b2d2      	uxtb	r2, r2
   1dd94:	2101      	movs	r1, #1
   1dd96:	4610      	mov	r0, r2
   1dd98:	4798      	blx	r3
}
   1dd9a:	e01a      	b.n	1ddd2 <AppDiscProcAttMsg+0x17a>
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1dd9c:	687b      	ldr	r3, [r7, #4]
   1dd9e:	881b      	ldrh	r3, [r3, #0]
   1dda0:	b2da      	uxtb	r2, r3
   1dda2:	68fb      	ldr	r3, [r7, #12]
   1dda4:	681b      	ldr	r3, [r3, #0]
   1dda6:	4619      	mov	r1, r3
   1dda8:	4610      	mov	r0, r2
   1ddaa:	f7ee fe51 	bl	ca50 <AttcDiscConfigCmpl>
   1ddae:	4603      	mov	r3, r0
   1ddb0:	72fb      	strb	r3, [r7, #11]
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   1ddb2:	7afb      	ldrb	r3, [r7, #11]
   1ddb4:	4619      	mov	r1, r3
   1ddb6:	480d      	ldr	r0, [pc, #52]	; (1ddec <AppDiscProcAttMsg+0x194>)
   1ddb8:	f7fd fd7a 	bl	1b8b0 <WsfTrace>
      if (status != ATT_CONTINUING)
   1ddbc:	7afb      	ldrb	r3, [r7, #11]
   1ddbe:	2b78      	cmp	r3, #120	; 0x78
   1ddc0:	d007      	beq.n	1ddd2 <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1ddc2:	4b08      	ldr	r3, [pc, #32]	; (1dde4 <AppDiscProcAttMsg+0x18c>)
   1ddc4:	681b      	ldr	r3, [r3, #0]
   1ddc6:	687a      	ldr	r2, [r7, #4]
   1ddc8:	8812      	ldrh	r2, [r2, #0]
   1ddca:	b2d2      	uxtb	r2, r2
   1ddcc:	2107      	movs	r1, #7
   1ddce:	4610      	mov	r0, r2
   1ddd0:	4798      	blx	r3
}
   1ddd2:	bf00      	nop
   1ddd4:	3710      	adds	r7, #16
   1ddd6:	46bd      	mov	sp, r7
   1ddd8:	bd80      	pop	{r7, pc}
   1ddda:	bf00      	nop
   1dddc:	10005130 	.word	0x10005130
   1dde0:	00025a70 	.word	0x00025a70
   1dde4:	100051b0 	.word	0x100051b0
   1dde8:	00025a94 	.word	0x00025a94
   1ddec:	00025ab4 	.word	0x00025ab4

0001ddf0 <AppDiscInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscInit(void)
{
   1ddf0:	b480      	push	{r7}
   1ddf2:	b083      	sub	sp, #12
   1ddf4:	af00      	add	r7, sp, #0
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
   1ddf6:	2300      	movs	r3, #0
   1ddf8:	71fb      	strb	r3, [r7, #7]
   1ddfa:	e00f      	b.n	1de1c <AppDiscInit+0x2c>
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1ddfc:	79fb      	ldrb	r3, [r7, #7]
   1ddfe:	4a0c      	ldr	r2, [pc, #48]	; (1de30 <AppDiscInit+0x40>)
   1de00:	011b      	lsls	r3, r3, #4
   1de02:	4413      	add	r3, r2
   1de04:	330b      	adds	r3, #11
   1de06:	2200      	movs	r2, #0
   1de08:	701a      	strb	r2, [r3, #0]
    appDiscCb[i].pDiscCb = NULL;
   1de0a:	79fb      	ldrb	r3, [r7, #7]
   1de0c:	4a08      	ldr	r2, [pc, #32]	; (1de30 <AppDiscInit+0x40>)
   1de0e:	011b      	lsls	r3, r3, #4
   1de10:	4413      	add	r3, r2
   1de12:	2200      	movs	r2, #0
   1de14:	601a      	str	r2, [r3, #0]
  for (i=0; i<DM_CONN_MAX; i++)
   1de16:	79fb      	ldrb	r3, [r7, #7]
   1de18:	3301      	adds	r3, #1
   1de1a:	71fb      	strb	r3, [r7, #7]
   1de1c:	79fb      	ldrb	r3, [r7, #7]
   1de1e:	2b07      	cmp	r3, #7
   1de20:	d9ec      	bls.n	1ddfc <AppDiscInit+0xc>
  }
}
   1de22:	bf00      	nop
   1de24:	370c      	adds	r7, #12
   1de26:	46bd      	mov	sp, r7
   1de28:	f85d 7b04 	ldr.w	r7, [sp], #4
   1de2c:	4770      	bx	lr
   1de2e:	bf00      	nop
   1de30:	10005130 	.word	0x10005130

0001de34 <AppDiscRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
   1de34:	b480      	push	{r7}
   1de36:	b083      	sub	sp, #12
   1de38:	af00      	add	r7, sp, #0
   1de3a:	6078      	str	r0, [r7, #4]
  appDiscCback = cback;
   1de3c:	4a04      	ldr	r2, [pc, #16]	; (1de50 <AppDiscRegister+0x1c>)
   1de3e:	687b      	ldr	r3, [r7, #4]
   1de40:	6013      	str	r3, [r2, #0]
}
   1de42:	bf00      	nop
   1de44:	370c      	adds	r7, #12
   1de46:	46bd      	mov	sp, r7
   1de48:	f85d 7b04 	ldr.w	r7, [sp], #4
   1de4c:	4770      	bx	lr
   1de4e:	bf00      	nop
   1de50:	100051b0 	.word	0x100051b0

0001de54 <AppDiscSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1de54:	b480      	push	{r7}
   1de56:	b085      	sub	sp, #20
   1de58:	af00      	add	r7, sp, #0
   1de5a:	4603      	mov	r3, r0
   1de5c:	603a      	str	r2, [r7, #0]
   1de5e:	71fb      	strb	r3, [r7, #7]
   1de60:	460b      	mov	r3, r1
   1de62:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1de64:	79fb      	ldrb	r3, [r7, #7]
   1de66:	3b01      	subs	r3, #1
   1de68:	011b      	lsls	r3, r3, #4
   1de6a:	4a07      	ldr	r2, [pc, #28]	; (1de88 <AppDiscSetHdlList+0x34>)
   1de6c:	4413      	add	r3, r2
   1de6e:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->hdlListLen = hdlListLen;
   1de70:	68fb      	ldr	r3, [r7, #12]
   1de72:	79ba      	ldrb	r2, [r7, #6]
   1de74:	729a      	strb	r2, [r3, #10]
  pAppDiscCb->pHdlList = pHdlList;
   1de76:	68fb      	ldr	r3, [r7, #12]
   1de78:	683a      	ldr	r2, [r7, #0]
   1de7a:	605a      	str	r2, [r3, #4]
}
   1de7c:	bf00      	nop
   1de7e:	3714      	adds	r7, #20
   1de80:	46bd      	mov	sp, r7
   1de82:	f85d 7b04 	ldr.w	r7, [sp], #4
   1de86:	4770      	bx	lr
   1de88:	10005130 	.word	0x10005130

0001de8c <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   1de8c:	b580      	push	{r7, lr}
   1de8e:	b084      	sub	sp, #16
   1de90:	af00      	add	r7, sp, #0
   1de92:	4603      	mov	r3, r0
   1de94:	460a      	mov	r2, r1
   1de96:	71fb      	strb	r3, [r7, #7]
   1de98:	4613      	mov	r3, r2
   1de9a:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1de9c:	79fb      	ldrb	r3, [r7, #7]
   1de9e:	3b01      	subs	r3, #1
   1dea0:	011b      	lsls	r3, r3, #4
   1dea2:	4a29      	ldr	r2, [pc, #164]	; (1df48 <AppDiscComplete+0xbc>)
   1dea4:	4413      	add	r3, r2
   1dea6:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1dea8:	79fb      	ldrb	r3, [r7, #7]
   1deaa:	2200      	movs	r2, #0
   1deac:	2108      	movs	r1, #8
   1deae:	4618      	mov	r0, r3
   1deb0:	f7f1 fe42 	bl	fb38 <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1deb4:	79bb      	ldrb	r3, [r7, #6]
   1deb6:	2b07      	cmp	r3, #7
   1deb8:	d103      	bne.n	1dec2 <AppDiscComplete+0x36>
   1deba:	68fb      	ldr	r3, [r7, #12]
   1debc:	7a1b      	ldrb	r3, [r3, #8]
   1debe:	2b06      	cmp	r3, #6
   1dec0:	d002      	beq.n	1dec8 <AppDiscComplete+0x3c>
  {
    pAppDiscCb->cmplStatus = status;
   1dec2:	68fb      	ldr	r3, [r7, #12]
   1dec4:	79ba      	ldrb	r2, [r7, #6]
   1dec6:	725a      	strb	r2, [r3, #9]
  }
  
  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1dec8:	68fb      	ldr	r3, [r7, #12]
   1deca:	2200      	movs	r2, #0
   1decc:	72da      	strb	r2, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   1dece:	68fb      	ldr	r3, [r7, #12]
   1ded0:	681b      	ldr	r3, [r3, #0]
   1ded2:	2b00      	cmp	r3, #0
   1ded4:	d007      	beq.n	1dee6 <AppDiscComplete+0x5a>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1ded6:	68fb      	ldr	r3, [r7, #12]
   1ded8:	681b      	ldr	r3, [r3, #0]
   1deda:	4618      	mov	r0, r3
   1dedc:	f7fc fcd8 	bl	1a890 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1dee0:	68fb      	ldr	r3, [r7, #12]
   1dee2:	2200      	movs	r2, #0
   1dee4:	601a      	str	r2, [r3, #0]
  }
  
  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1dee6:	79fb      	ldrb	r3, [r7, #7]
   1dee8:	4618      	mov	r0, r3
   1deea:	f000 faa1 	bl	1e430 <AppDbGetHdl>
   1deee:	60b8      	str	r0, [r7, #8]
   1def0:	68bb      	ldr	r3, [r7, #8]
   1def2:	2b00      	cmp	r3, #0
   1def4:	d018      	beq.n	1df28 <AppDiscComplete+0x9c>
  {
    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1def6:	79bb      	ldrb	r3, [r7, #6]
   1def8:	2b07      	cmp	r3, #7
   1defa:	d103      	bne.n	1df04 <AppDiscComplete+0x78>
   1defc:	68fb      	ldr	r3, [r7, #12]
   1defe:	7a1b      	ldrb	r3, [r3, #8]
   1df00:	2b06      	cmp	r3, #6
   1df02:	d004      	beq.n	1df0e <AppDiscComplete+0x82>
    {
      AppDbSetDiscStatus(hdl, status);
   1df04:	79bb      	ldrb	r3, [r7, #6]
   1df06:	4619      	mov	r1, r3
   1df08:	68b8      	ldr	r0, [r7, #8]
   1df0a:	f7fb fc4b 	bl	197a4 <AppDbSetDiscStatus>
    }

    if (pAppDiscCb->pHdlList != NULL)
   1df0e:	68fb      	ldr	r3, [r7, #12]
   1df10:	685b      	ldr	r3, [r3, #4]
   1df12:	2b00      	cmp	r3, #0
   1df14:	d008      	beq.n	1df28 <AppDiscComplete+0x9c>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   1df16:	79bb      	ldrb	r3, [r7, #6]
   1df18:	2b03      	cmp	r3, #3
   1df1a:	d105      	bne.n	1df28 <AppDiscComplete+0x9c>
      {
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1df1c:	68fb      	ldr	r3, [r7, #12]
   1df1e:	685b      	ldr	r3, [r3, #4]
   1df20:	4619      	mov	r1, r3
   1df22:	68b8      	ldr	r0, [r7, #8]
   1df24:	f7fb fc5a 	bl	197dc <AppDbSetHdlList>
  }
  
  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   1df28:	79bb      	ldrb	r3, [r7, #6]
   1df2a:	2b07      	cmp	r3, #7
   1df2c:	d102      	bne.n	1df34 <AppDiscComplete+0xa8>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   1df2e:	68fb      	ldr	r3, [r7, #12]
   1df30:	2207      	movs	r2, #7
   1df32:	721a      	strb	r2, [r3, #8]
  }
  
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1df34:	79fb      	ldrb	r3, [r7, #7]
   1df36:	79ba      	ldrb	r2, [r7, #6]
   1df38:	4619      	mov	r1, r3
   1df3a:	4804      	ldr	r0, [pc, #16]	; (1df4c <AppDiscComplete+0xc0>)
   1df3c:	f7fd fcb8 	bl	1b8b0 <WsfTrace>
}
   1df40:	bf00      	nop
   1df42:	3710      	adds	r7, #16
   1df44:	46bd      	mov	sp, r7
   1df46:	bd80      	pop	{r7, pc}
   1df48:	10005130 	.word	0x10005130
   1df4c:	00025ad8 	.word	0x00025ad8

0001df50 <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   1df50:	b580      	push	{r7, lr}
   1df52:	b084      	sub	sp, #16
   1df54:	af00      	add	r7, sp, #0
   1df56:	603a      	str	r2, [r7, #0]
   1df58:	461a      	mov	r2, r3
   1df5a:	4603      	mov	r3, r0
   1df5c:	71fb      	strb	r3, [r7, #7]
   1df5e:	460b      	mov	r3, r1
   1df60:	71bb      	strb	r3, [r7, #6]
   1df62:	4613      	mov	r3, r2
   1df64:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1df66:	79fb      	ldrb	r3, [r7, #7]
   1df68:	3b01      	subs	r3, #1
   1df6a:	011b      	lsls	r3, r3, #4
   1df6c:	4a18      	ldr	r2, [pc, #96]	; (1dfd0 <AppDiscFindService+0x80>)
   1df6e:	4413      	add	r3, r2
   1df70:	60fb      	str	r3, [r7, #12]

  if (pAppDiscCb->pDiscCb == NULL)
   1df72:	68fb      	ldr	r3, [r7, #12]
   1df74:	681b      	ldr	r3, [r3, #0]
   1df76:	2b00      	cmp	r3, #0
   1df78:	d105      	bne.n	1df86 <AppDiscFindService+0x36>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1df7a:	2014      	movs	r0, #20
   1df7c:	f7fc fc48 	bl	1a810 <WsfBufAlloc>
   1df80:	4602      	mov	r2, r0
   1df82:	68fb      	ldr	r3, [r7, #12]
   1df84:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1df86:	68fb      	ldr	r3, [r7, #12]
   1df88:	681b      	ldr	r3, [r3, #0]
   1df8a:	2b00      	cmp	r3, #0
   1df8c:	d01b      	beq.n	1dfc6 <AppDiscFindService+0x76>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1df8e:	79fb      	ldrb	r3, [r7, #7]
   1df90:	2201      	movs	r2, #1
   1df92:	2108      	movs	r1, #8
   1df94:	4618      	mov	r0, r3
   1df96:	f7f1 fdcf 	bl	fb38 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_IN_PROGRESS;
   1df9a:	68fb      	ldr	r3, [r7, #12]
   1df9c:	2201      	movs	r2, #1
   1df9e:	72da      	strb	r2, [r3, #11]
 
    pAppDiscCb->pDiscCb->pCharList = pCharList;
   1dfa0:	68fb      	ldr	r3, [r7, #12]
   1dfa2:	681b      	ldr	r3, [r3, #0]
   1dfa4:	69ba      	ldr	r2, [r7, #24]
   1dfa6:	601a      	str	r2, [r3, #0]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1dfa8:	68fb      	ldr	r3, [r7, #12]
   1dfaa:	681b      	ldr	r3, [r3, #0]
   1dfac:	69fa      	ldr	r2, [r7, #28]
   1dfae:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   1dfb0:	68fb      	ldr	r3, [r7, #12]
   1dfb2:	681b      	ldr	r3, [r3, #0]
   1dfb4:	797a      	ldrb	r2, [r7, #5]
   1dfb6:	731a      	strb	r2, [r3, #12]
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1dfb8:	68fb      	ldr	r3, [r7, #12]
   1dfba:	6819      	ldr	r1, [r3, #0]
   1dfbc:	79ba      	ldrb	r2, [r7, #6]
   1dfbe:	79f8      	ldrb	r0, [r7, #7]
   1dfc0:	683b      	ldr	r3, [r7, #0]
   1dfc2:	f7ee fc16 	bl	c7f2 <AttcDiscService>
  }
}
   1dfc6:	bf00      	nop
   1dfc8:	3710      	adds	r7, #16
   1dfca:	46bd      	mov	sp, r7
   1dfcc:	bd80      	pop	{r7, pc}
   1dfce:	bf00      	nop
   1dfd0:	10005130 	.word	0x10005130

0001dfd4 <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1dfd4:	b580      	push	{r7, lr}
   1dfd6:	b084      	sub	sp, #16
   1dfd8:	af00      	add	r7, sp, #0
   1dfda:	603b      	str	r3, [r7, #0]
   1dfdc:	4603      	mov	r3, r0
   1dfde:	71fb      	strb	r3, [r7, #7]
   1dfe0:	460b      	mov	r3, r1
   1dfe2:	71bb      	strb	r3, [r7, #6]
   1dfe4:	4613      	mov	r3, r2
   1dfe6:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1dfe8:	79fb      	ldrb	r3, [r7, #7]
   1dfea:	3b01      	subs	r3, #1
   1dfec:	011b      	lsls	r3, r3, #4
   1dfee:	4a23      	ldr	r2, [pc, #140]	; (1e07c <AppDiscConfigure+0xa8>)
   1dff0:	4413      	add	r3, r2
   1dff2:	60fb      	str	r3, [r7, #12]
  uint8_t ret;
  
  if (pAppDiscCb->pDiscCb == NULL)
   1dff4:	68fb      	ldr	r3, [r7, #12]
   1dff6:	681b      	ldr	r3, [r3, #0]
   1dff8:	2b00      	cmp	r3, #0
   1dffa:	d105      	bne.n	1e008 <AppDiscConfigure+0x34>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1dffc:	2014      	movs	r0, #20
   1dffe:	f7fc fc07 	bl	1a810 <WsfBufAlloc>
   1e002:	4602      	mov	r2, r0
   1e004:	68fb      	ldr	r3, [r7, #12]
   1e006:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1e008:	68fb      	ldr	r3, [r7, #12]
   1e00a:	681b      	ldr	r3, [r3, #0]
   1e00c:	2b00      	cmp	r3, #0
   1e00e:	d030      	beq.n	1e072 <AppDiscConfigure+0x9e>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1e010:	79fb      	ldrb	r3, [r7, #7]
   1e012:	2201      	movs	r2, #1
   1e014:	2108      	movs	r1, #8
   1e016:	4618      	mov	r0, r3
   1e018:	f7f1 fd8e 	bl	fb38 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1e01c:	68fb      	ldr	r3, [r7, #12]
   1e01e:	2202      	movs	r2, #2
   1e020:	72da      	strb	r2, [r3, #11]
 
    if (status == APP_DISC_CFG_CONN_START)
   1e022:	79bb      	ldrb	r3, [r7, #6]
   1e024:	2b06      	cmp	r3, #6
   1e026:	d102      	bne.n	1e02e <AppDiscConfigure+0x5a>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   1e028:	68fb      	ldr	r3, [r7, #12]
   1e02a:	2206      	movs	r2, #6
   1e02c:	721a      	strb	r2, [r3, #8]
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1e02e:	68fb      	ldr	r3, [r7, #12]
   1e030:	681b      	ldr	r3, [r3, #0]
   1e032:	683a      	ldr	r2, [r7, #0]
   1e034:	609a      	str	r2, [r3, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   1e036:	68fb      	ldr	r3, [r7, #12]
   1e038:	681b      	ldr	r3, [r3, #0]
   1e03a:	797a      	ldrb	r2, [r7, #5]
   1e03c:	735a      	strb	r2, [r3, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1e03e:	68fb      	ldr	r3, [r7, #12]
   1e040:	681b      	ldr	r3, [r3, #0]
   1e042:	69fa      	ldr	r2, [r7, #28]
   1e044:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   1e046:	68fb      	ldr	r3, [r7, #12]
   1e048:	681b      	ldr	r3, [r3, #0]
   1e04a:	7e3a      	ldrb	r2, [r7, #24]
   1e04c:	731a      	strb	r2, [r3, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1e04e:	68fb      	ldr	r3, [r7, #12]
   1e050:	681a      	ldr	r2, [r3, #0]
   1e052:	79fb      	ldrb	r3, [r7, #7]
   1e054:	4611      	mov	r1, r2
   1e056:	4618      	mov	r0, r3
   1e058:	f7ee fcf7 	bl	ca4a <AttcDiscConfigStart>
   1e05c:	4603      	mov	r3, r0
   1e05e:	72fb      	strb	r3, [r7, #11]
    
    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   1e060:	7afb      	ldrb	r3, [r7, #11]
   1e062:	2b00      	cmp	r3, #0
   1e064:	d105      	bne.n	1e072 <AppDiscConfigure+0x9e>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1e066:	4b06      	ldr	r3, [pc, #24]	; (1e080 <AppDiscConfigure+0xac>)
   1e068:	681b      	ldr	r3, [r3, #0]
   1e06a:	79fa      	ldrb	r2, [r7, #7]
   1e06c:	2107      	movs	r1, #7
   1e06e:	4610      	mov	r0, r2
   1e070:	4798      	blx	r3
    }    
  }
}
   1e072:	bf00      	nop
   1e074:	3710      	adds	r7, #16
   1e076:	46bd      	mov	sp, r7
   1e078:	bd80      	pop	{r7, pc}
   1e07a:	bf00      	nop
   1e07c:	10005130 	.word	0x10005130
   1e080:	100051b0 	.word	0x100051b0

0001e084 <AppDiscServiceChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscServiceChanged(attEvt_t *pMsg)
{
   1e084:	b580      	push	{r7, lr}
   1e086:	b088      	sub	sp, #32
   1e088:	af00      	add	r7, sp, #0
   1e08a:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   1e08c:	687b      	ldr	r3, [r7, #4]
   1e08e:	881b      	ldrh	r3, [r3, #0]
   1e090:	3b01      	subs	r3, #1
   1e092:	011b      	lsls	r3, r3, #4
   1e094:	4a53      	ldr	r2, [pc, #332]	; (1e1e4 <AppDiscServiceChanged+0x160>)
   1e096:	4413      	add	r3, r2
   1e098:	617b      	str	r3, [r7, #20]
  uint8_t     i;
  bool_t      foundHdl;
  appDbHdl_t  dbHdl;
  
  /* verify characteristic length */
  if (pMsg->valueLen != CH_SC_LEN)
   1e09a:	687b      	ldr	r3, [r7, #4]
   1e09c:	891b      	ldrh	r3, [r3, #8]
   1e09e:	2b04      	cmp	r3, #4
   1e0a0:	f040 8095 	bne.w	1e1ce <AppDiscServiceChanged+0x14a>
  {
    return;
  }
  
  /* parse and verify handles */
  p = pMsg->pValue;
   1e0a4:	687b      	ldr	r3, [r7, #4]
   1e0a6:	685b      	ldr	r3, [r3, #4]
   1e0a8:	613b      	str	r3, [r7, #16]
  BSTREAM_TO_UINT16(startHdl, p);
   1e0aa:	693b      	ldr	r3, [r7, #16]
   1e0ac:	781b      	ldrb	r3, [r3, #0]
   1e0ae:	b29a      	uxth	r2, r3
   1e0b0:	693b      	ldr	r3, [r7, #16]
   1e0b2:	3301      	adds	r3, #1
   1e0b4:	781b      	ldrb	r3, [r3, #0]
   1e0b6:	b29b      	uxth	r3, r3
   1e0b8:	021b      	lsls	r3, r3, #8
   1e0ba:	b29b      	uxth	r3, r3
   1e0bc:	4413      	add	r3, r2
   1e0be:	81fb      	strh	r3, [r7, #14]
   1e0c0:	693b      	ldr	r3, [r7, #16]
   1e0c2:	3302      	adds	r3, #2
   1e0c4:	613b      	str	r3, [r7, #16]
  BSTREAM_TO_UINT16(endHdl, p);
   1e0c6:	693b      	ldr	r3, [r7, #16]
   1e0c8:	781b      	ldrb	r3, [r3, #0]
   1e0ca:	b29a      	uxth	r2, r3
   1e0cc:	693b      	ldr	r3, [r7, #16]
   1e0ce:	3301      	adds	r3, #1
   1e0d0:	781b      	ldrb	r3, [r3, #0]
   1e0d2:	b29b      	uxth	r3, r3
   1e0d4:	021b      	lsls	r3, r3, #8
   1e0d6:	b29b      	uxth	r3, r3
   1e0d8:	4413      	add	r3, r2
   1e0da:	81bb      	strh	r3, [r7, #12]
   1e0dc:	693b      	ldr	r3, [r7, #16]
   1e0de:	3302      	adds	r3, #2
   1e0e0:	613b      	str	r3, [r7, #16]
  if (startHdl == 0 || endHdl < startHdl)
   1e0e2:	89fb      	ldrh	r3, [r7, #14]
   1e0e4:	2b00      	cmp	r3, #0
   1e0e6:	d074      	beq.n	1e1d2 <AppDiscServiceChanged+0x14e>
   1e0e8:	89ba      	ldrh	r2, [r7, #12]
   1e0ea:	89fb      	ldrh	r3, [r7, #14]
   1e0ec:	429a      	cmp	r2, r3
   1e0ee:	d370      	bcc.n	1e1d2 <AppDiscServiceChanged+0x14e>
  {
    return;
  }
  
  /* if we don't have any stored handles within service changed handle range, ignore */
  foundHdl = FALSE;
   1e0f0:	2300      	movs	r3, #0
   1e0f2:	76bb      	strb	r3, [r7, #26]
  if (pAppDiscCb->pHdlList != NULL)
   1e0f4:	697b      	ldr	r3, [r7, #20]
   1e0f6:	685b      	ldr	r3, [r3, #4]
   1e0f8:	2b00      	cmp	r3, #0
   1e0fa:	d01c      	beq.n	1e136 <AppDiscServiceChanged+0xb2>
  {
    pHdl = pAppDiscCb->pHdlList;
   1e0fc:	697b      	ldr	r3, [r7, #20]
   1e0fe:	685b      	ldr	r3, [r3, #4]
   1e100:	61fb      	str	r3, [r7, #28]
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1e102:	697b      	ldr	r3, [r7, #20]
   1e104:	7a9b      	ldrb	r3, [r3, #10]
   1e106:	76fb      	strb	r3, [r7, #27]
   1e108:	e012      	b.n	1e130 <AppDiscServiceChanged+0xac>
    {
      if (*pHdl >= startHdl && *pHdl <= endHdl)
   1e10a:	69fb      	ldr	r3, [r7, #28]
   1e10c:	881b      	ldrh	r3, [r3, #0]
   1e10e:	89fa      	ldrh	r2, [r7, #14]
   1e110:	429a      	cmp	r2, r3
   1e112:	d807      	bhi.n	1e124 <AppDiscServiceChanged+0xa0>
   1e114:	69fb      	ldr	r3, [r7, #28]
   1e116:	881b      	ldrh	r3, [r3, #0]
   1e118:	89ba      	ldrh	r2, [r7, #12]
   1e11a:	429a      	cmp	r2, r3
   1e11c:	d302      	bcc.n	1e124 <AppDiscServiceChanged+0xa0>
      {
        foundHdl = TRUE;
   1e11e:	2301      	movs	r3, #1
   1e120:	76bb      	strb	r3, [r7, #26]
        break;
   1e122:	e008      	b.n	1e136 <AppDiscServiceChanged+0xb2>
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1e124:	7efb      	ldrb	r3, [r7, #27]
   1e126:	3b01      	subs	r3, #1
   1e128:	76fb      	strb	r3, [r7, #27]
   1e12a:	69fb      	ldr	r3, [r7, #28]
   1e12c:	3302      	adds	r3, #2
   1e12e:	61fb      	str	r3, [r7, #28]
   1e130:	7efb      	ldrb	r3, [r7, #27]
   1e132:	2b00      	cmp	r3, #0
   1e134:	d1e9      	bne.n	1e10a <AppDiscServiceChanged+0x86>
      }
    }
  }
  if (foundHdl == FALSE)
   1e136:	7ebb      	ldrb	r3, [r7, #26]
   1e138:	2b00      	cmp	r3, #0
   1e13a:	d04c      	beq.n	1e1d6 <AppDiscServiceChanged+0x152>
  {
    return;
  }
  
  /* if discovery procedure already in progress */
  if (pAppDiscCb->inProgress == APP_DISC_IN_PROGRESS)
   1e13c:	697b      	ldr	r3, [r7, #20]
   1e13e:	7adb      	ldrb	r3, [r3, #11]
   1e140:	2b01      	cmp	r3, #1
   1e142:	d04a      	beq.n	1e1da <AppDiscServiceChanged+0x156>
    /* ignore service changed */
    return;
  }

  /* otherwise initialize discovery and configuration status */
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1e144:	697b      	ldr	r3, [r7, #20]
   1e146:	2200      	movs	r2, #0
   1e148:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   1e14a:	697b      	ldr	r3, [r7, #20]
   1e14c:	2200      	movs	r2, #0
   1e14e:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   1e150:	697b      	ldr	r3, [r7, #20]
   1e152:	2200      	movs	r2, #0
   1e154:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   1e156:	697b      	ldr	r3, [r7, #20]
   1e158:	2200      	movs	r2, #0
   1e15a:	739a      	strb	r2, [r3, #14]
  
  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1e15c:	697b      	ldr	r3, [r7, #20]
   1e15e:	685b      	ldr	r3, [r3, #4]
   1e160:	2b00      	cmp	r3, #0
   1e162:	d008      	beq.n	1e176 <AppDiscServiceChanged+0xf2>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1e164:	697b      	ldr	r3, [r7, #20]
   1e166:	6858      	ldr	r0, [r3, #4]
   1e168:	697b      	ldr	r3, [r7, #20]
   1e16a:	7a9b      	ldrb	r3, [r3, #10]
   1e16c:	005b      	lsls	r3, r3, #1
   1e16e:	461a      	mov	r2, r3
   1e170:	2100      	movs	r1, #0
   1e172:	f7ee f8f3 	bl	c35c <memset>
  }
 
  /* clear stored discovery status and handle list */
  if ((dbHdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1e176:	687b      	ldr	r3, [r7, #4]
   1e178:	881b      	ldrh	r3, [r3, #0]
   1e17a:	b2db      	uxtb	r3, r3
   1e17c:	4618      	mov	r0, r3
   1e17e:	f000 f957 	bl	1e430 <AppDbGetHdl>
   1e182:	60b8      	str	r0, [r7, #8]
   1e184:	68bb      	ldr	r3, [r7, #8]
   1e186:	2b00      	cmp	r3, #0
   1e188:	d009      	beq.n	1e19e <AppDiscServiceChanged+0x11a>
  {
      AppDbSetDiscStatus(dbHdl, APP_DISC_INIT);
   1e18a:	2100      	movs	r1, #0
   1e18c:	68b8      	ldr	r0, [r7, #8]
   1e18e:	f7fb fb09 	bl	197a4 <AppDbSetDiscStatus>
      AppDbSetHdlList(dbHdl, pAppDiscCb->pHdlList);
   1e192:	697b      	ldr	r3, [r7, #20]
   1e194:	685b      	ldr	r3, [r3, #4]
   1e196:	4619      	mov	r1, r3
   1e198:	68b8      	ldr	r0, [r7, #8]
   1e19a:	f7fb fb1f 	bl	197dc <AppDbSetHdlList>
  }
  
  /* if configuration in progress */
  if (pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS)
   1e19e:	697b      	ldr	r3, [r7, #20]
   1e1a0:	7adb      	ldrb	r3, [r3, #11]
   1e1a2:	2b02      	cmp	r3, #2
   1e1a4:	d103      	bne.n	1e1ae <AppDiscServiceChanged+0x12a>
  {
    /* set pending status to set up abort of configuration */
    pAppDiscCb->scPending = TRUE;
   1e1a6:	697b      	ldr	r3, [r7, #20]
   1e1a8:	2201      	movs	r2, #1
   1e1aa:	739a      	strb	r2, [r3, #14]
   1e1ac:	e016      	b.n	1e1dc <AppDiscServiceChanged+0x158>
  {
    /* if not waiting for security or connection is already secure, then
     * initiate discovery now; otherwise discovery will be initiated after
     * security is done
     */
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
   1e1ae:	4b0e      	ldr	r3, [pc, #56]	; (1e1e8 <AppDiscServiceChanged+0x164>)
   1e1b0:	681b      	ldr	r3, [r3, #0]
   1e1b2:	781b      	ldrb	r3, [r3, #0]
   1e1b4:	2b00      	cmp	r3, #0
   1e1b6:	d003      	beq.n	1e1c0 <AppDiscServiceChanged+0x13c>
   1e1b8:	697b      	ldr	r3, [r7, #20]
   1e1ba:	7b1b      	ldrb	r3, [r3, #12]
   1e1bc:	2b00      	cmp	r3, #0
   1e1be:	d00d      	beq.n	1e1dc <AppDiscServiceChanged+0x158>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1e1c0:	687b      	ldr	r3, [r7, #4]
   1e1c2:	881b      	ldrh	r3, [r3, #0]
   1e1c4:	b2db      	uxtb	r3, r3
   1e1c6:	4618      	mov	r0, r3
   1e1c8:	f7ff fb94 	bl	1d8f4 <appDiscStart>
   1e1cc:	e006      	b.n	1e1dc <AppDiscServiceChanged+0x158>
    return;
   1e1ce:	bf00      	nop
   1e1d0:	e004      	b.n	1e1dc <AppDiscServiceChanged+0x158>
    return;
   1e1d2:	bf00      	nop
   1e1d4:	e002      	b.n	1e1dc <AppDiscServiceChanged+0x158>
    return;
   1e1d6:	bf00      	nop
   1e1d8:	e000      	b.n	1e1dc <AppDiscServiceChanged+0x158>
    return;
   1e1da:	bf00      	nop
    }
  }
}
   1e1dc:	3720      	adds	r7, #32
   1e1de:	46bd      	mov	sp, r7
   1e1e0:	bd80      	pop	{r7, pc}
   1e1e2:	bf00      	nop
   1e1e4:	10005130 	.word	0x10005130
   1e1e8:	10009ec8 	.word	0x10009ec8

0001e1ec <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   1e1ec:	b580      	push	{r7, lr}
   1e1ee:	b082      	sub	sp, #8
   1e1f0:	af00      	add	r7, sp, #0
   1e1f2:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1e1f4:	687b      	ldr	r3, [r7, #4]
   1e1f6:	789b      	ldrb	r3, [r3, #2]
   1e1f8:	2b00      	cmp	r3, #0
   1e1fa:	d002      	beq.n	1e202 <appProcMsg+0x16>
   1e1fc:	2b01      	cmp	r3, #1
   1e1fe:	d003      	beq.n	1e208 <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
   1e200:	e006      	b.n	1e210 <appProcMsg+0x24>
      appUiBtnPoll();
   1e202:	f7fb fbef 	bl	199e4 <appUiBtnPoll>
      break;
   1e206:	e003      	b.n	1e210 <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
   1e208:	6878      	ldr	r0, [r7, #4]
   1e20a:	f7fb fbe1 	bl	199d0 <appUiTimerExpired>
      break;
   1e20e:	bf00      	nop
  }
}
   1e210:	bf00      	nop
   1e212:	3708      	adds	r7, #8
   1e214:	46bd      	mov	sp, r7
   1e216:	bd80      	pop	{r7, pc}

0001e218 <appCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t appCheckBonded(dmConnId_t connId)
{
   1e218:	b480      	push	{r7}
   1e21a:	b083      	sub	sp, #12
   1e21c:	af00      	add	r7, sp, #0
   1e21e:	4603      	mov	r3, r0
   1e220:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bonded;
   1e222:	79fb      	ldrb	r3, [r7, #7]
   1e224:	3b01      	subs	r3, #1
   1e226:	4a05      	ldr	r2, [pc, #20]	; (1e23c <appCheckBonded+0x24>)
   1e228:	015b      	lsls	r3, r3, #5
   1e22a:	4413      	add	r3, r2
   1e22c:	3305      	adds	r3, #5
   1e22e:	781b      	ldrb	r3, [r3, #0]
}
   1e230:	4618      	mov	r0, r3
   1e232:	370c      	adds	r7, #12
   1e234:	46bd      	mov	sp, r7
   1e236:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e23a:	4770      	bx	lr
   1e23c:	10009ee4 	.word	0x10009ee4

0001e240 <appCheckBondByLtk>:
 *
 *  \return Bond-by-LTK state.
 */
/*************************************************************************************************/
bool_t appCheckBondByLtk(dmConnId_t connId)
{
   1e240:	b480      	push	{r7}
   1e242:	b083      	sub	sp, #12
   1e244:	af00      	add	r7, sp, #0
   1e246:	4603      	mov	r3, r0
   1e248:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bondByLtk;
   1e24a:	79fb      	ldrb	r3, [r7, #7]
   1e24c:	3b01      	subs	r3, #1
   1e24e:	4a05      	ldr	r2, [pc, #20]	; (1e264 <appCheckBondByLtk+0x24>)
   1e250:	015b      	lsls	r3, r3, #5
   1e252:	4413      	add	r3, r2
   1e254:	3306      	adds	r3, #6
   1e256:	781b      	ldrb	r3, [r3, #0]
}
   1e258:	4618      	mov	r0, r3
   1e25a:	370c      	adds	r7, #12
   1e25c:	46bd      	mov	sp, r7
   1e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e262:	4770      	bx	lr
   1e264:	10009ee4 	.word	0x10009ee4

0001e268 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   1e268:	b580      	push	{r7, lr}
   1e26a:	b084      	sub	sp, #16
   1e26c:	af00      	add	r7, sp, #0
   1e26e:	4603      	mov	r3, r0
   1e270:	71fb      	strb	r3, [r7, #7]
  appConnCb_t   *pCcb = appConnCb;
   1e272:	4b13      	ldr	r3, [pc, #76]	; (1e2c0 <appNumConns+0x58>)
   1e274:	60fb      	str	r3, [r7, #12]
  uint8_t       i, j;
  
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1e276:	2308      	movs	r3, #8
   1e278:	72fb      	strb	r3, [r7, #11]
   1e27a:	2300      	movs	r3, #0
   1e27c:	72bb      	strb	r3, [r7, #10]
   1e27e:	e016      	b.n	1e2ae <appNumConns+0x46>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1e280:	68fb      	ldr	r3, [r7, #12]
   1e282:	791b      	ldrb	r3, [r3, #4]
   1e284:	2b00      	cmp	r3, #0
   1e286:	d00c      	beq.n	1e2a2 <appNumConns+0x3a>
   1e288:	68fb      	ldr	r3, [r7, #12]
   1e28a:	791b      	ldrb	r3, [r3, #4]
   1e28c:	4618      	mov	r0, r3
   1e28e:	f7f1 fc7d 	bl	fb8c <DmConnRole>
   1e292:	4603      	mov	r3, r0
   1e294:	461a      	mov	r2, r3
   1e296:	79fb      	ldrb	r3, [r7, #7]
   1e298:	4293      	cmp	r3, r2
   1e29a:	d102      	bne.n	1e2a2 <appNumConns+0x3a>
    {      
      j++;
   1e29c:	7abb      	ldrb	r3, [r7, #10]
   1e29e:	3301      	adds	r3, #1
   1e2a0:	72bb      	strb	r3, [r7, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1e2a2:	7afb      	ldrb	r3, [r7, #11]
   1e2a4:	3b01      	subs	r3, #1
   1e2a6:	72fb      	strb	r3, [r7, #11]
   1e2a8:	68fb      	ldr	r3, [r7, #12]
   1e2aa:	3320      	adds	r3, #32
   1e2ac:	60fb      	str	r3, [r7, #12]
   1e2ae:	7afb      	ldrb	r3, [r7, #11]
   1e2b0:	2b00      	cmp	r3, #0
   1e2b2:	d1e5      	bne.n	1e280 <appNumConns+0x18>
    }
  }

  return j;
   1e2b4:	7abb      	ldrb	r3, [r7, #10]
}
   1e2b6:	4618      	mov	r0, r3
   1e2b8:	3710      	adds	r7, #16
   1e2ba:	46bd      	mov	sp, r7
   1e2bc:	bd80      	pop	{r7, pc}
   1e2be:	bf00      	nop
   1e2c0:	10009ee4 	.word	0x10009ee4

0001e2c4 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   1e2c4:	b580      	push	{r7, lr}
   1e2c6:	b082      	sub	sp, #8
   1e2c8:	af00      	add	r7, sp, #0
   1e2ca:	4603      	mov	r3, r0
   1e2cc:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
   1e2ce:	4a04      	ldr	r2, [pc, #16]	; (1e2e0 <AppHandlerInit+0x1c>)
   1e2d0:	79fb      	ldrb	r3, [r7, #7]
   1e2d2:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
   1e2d4:	f7fa ffde 	bl	19294 <AppDbInit>
}
   1e2d8:	bf00      	nop
   1e2da:	3708      	adds	r7, #8
   1e2dc:	46bd      	mov	sp, r7
   1e2de:	bd80      	pop	{r7, pc}
   1e2e0:	10009ed0 	.word	0x10009ed0

0001e2e4 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1e2e4:	b580      	push	{r7, lr}
   1e2e6:	b082      	sub	sp, #8
   1e2e8:	af00      	add	r7, sp, #0
   1e2ea:	4603      	mov	r3, r0
   1e2ec:	6039      	str	r1, [r7, #0]
   1e2ee:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1e2f0:	683b      	ldr	r3, [r7, #0]
   1e2f2:	2b00      	cmp	r3, #0
   1e2f4:	d015      	beq.n	1e322 <AppHandler+0x3e>
  {
    // APP_TRACE_INFO1("App got evt %d", pMsg->event);
    
    if (pMsg->event >= APP_MASTER_MSG_START)
   1e2f6:	683b      	ldr	r3, [r7, #0]
   1e2f8:	789b      	ldrb	r3, [r3, #2]
   1e2fa:	2b1f      	cmp	r3, #31
   1e2fc:	d904      	bls.n	1e308 <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
   1e2fe:	4b0e      	ldr	r3, [pc, #56]	; (1e338 <AppHandler+0x54>)
   1e300:	685b      	ldr	r3, [r3, #4]
   1e302:	6838      	ldr	r0, [r7, #0]
   1e304:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1e306:	e013      	b.n	1e330 <AppHandler+0x4c>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1e308:	683b      	ldr	r3, [r7, #0]
   1e30a:	789b      	ldrb	r3, [r3, #2]
   1e30c:	2b0f      	cmp	r3, #15
   1e30e:	d904      	bls.n	1e31a <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);    
   1e310:	4b09      	ldr	r3, [pc, #36]	; (1e338 <AppHandler+0x54>)
   1e312:	681b      	ldr	r3, [r3, #0]
   1e314:	6838      	ldr	r0, [r7, #0]
   1e316:	4798      	blx	r3
}
   1e318:	e00a      	b.n	1e330 <AppHandler+0x4c>
      appProcMsg(pMsg);
   1e31a:	6838      	ldr	r0, [r7, #0]
   1e31c:	f7ff ff66 	bl	1e1ec <appProcMsg>
}
   1e320:	e006      	b.n	1e330 <AppHandler+0x4c>
    if (event & APP_BTN_DOWN_EVT)
   1e322:	79fb      	ldrb	r3, [r7, #7]
   1e324:	f003 0310 	and.w	r3, r3, #16
   1e328:	2b00      	cmp	r3, #0
   1e32a:	d001      	beq.n	1e330 <AppHandler+0x4c>
      AppUiBtnPressed();
   1e32c:	f7fb fb72 	bl	19a14 <AppUiBtnPressed>
}
   1e330:	bf00      	nop
   1e332:	3708      	adds	r7, #8
   1e334:	46bd      	mov	sp, r7
   1e336:	bd80      	pop	{r7, pc}
   1e338:	10009ec0 	.word	0x10009ec0

0001e33c <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   1e33c:	b580      	push	{r7, lr}
   1e33e:	b084      	sub	sp, #16
   1e340:	af00      	add	r7, sp, #0
   1e342:	6078      	str	r0, [r7, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];
  
  if (pAuthReq->display)
   1e344:	687b      	ldr	r3, [r7, #4]
   1e346:	795b      	ldrb	r3, [r3, #5]
   1e348:	2b00      	cmp	r3, #0
   1e34a:	d028      	beq.n	1e39e <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1e34c:	f107 030c 	add.w	r3, r7, #12
   1e350:	2104      	movs	r1, #4
   1e352:	4618      	mov	r0, r3
   1e354:	f7fa fa9e 	bl	18894 <SecRand>
    passkey %= 1000000;
   1e358:	68fa      	ldr	r2, [r7, #12]
   1e35a:	4b14      	ldr	r3, [pc, #80]	; (1e3ac <AppHandlePasskey+0x70>)
   1e35c:	fba3 1302 	umull	r1, r3, r3, r2
   1e360:	0c9b      	lsrs	r3, r3, #18
   1e362:	4913      	ldr	r1, [pc, #76]	; (1e3b0 <AppHandlePasskey+0x74>)
   1e364:	fb01 f303 	mul.w	r3, r1, r3
   1e368:	1ad3      	subs	r3, r2, r3
   1e36a:	60fb      	str	r3, [r7, #12]
    
    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   1e36c:	68fb      	ldr	r3, [r7, #12]
   1e36e:	b2db      	uxtb	r3, r3
   1e370:	723b      	strb	r3, [r7, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1e372:	68fb      	ldr	r3, [r7, #12]
   1e374:	0a1b      	lsrs	r3, r3, #8
   1e376:	b2db      	uxtb	r3, r3
   1e378:	727b      	strb	r3, [r7, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1e37a:	68fb      	ldr	r3, [r7, #12]
   1e37c:	0c1b      	lsrs	r3, r3, #16
   1e37e:	b2db      	uxtb	r3, r3
   1e380:	72bb      	strb	r3, [r7, #10]
    
    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1e382:	687b      	ldr	r3, [r7, #4]
   1e384:	881b      	ldrh	r3, [r3, #0]
   1e386:	b2db      	uxtb	r3, r3
   1e388:	f107 0208 	add.w	r2, r7, #8
   1e38c:	2103      	movs	r1, #3
   1e38e:	4618      	mov	r0, r3
   1e390:	f7f2 f9cc 	bl	1072c <DmSecAuthRsp>
    
    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1e394:	68fb      	ldr	r3, [r7, #12]
   1e396:	4618      	mov	r0, r3
   1e398:	f7fb fb0c 	bl	199b4 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  } 
}
   1e39c:	e002      	b.n	1e3a4 <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1e39e:	200e      	movs	r0, #14
   1e3a0:	f7fb fa72 	bl	19888 <AppUiAction>
}
   1e3a4:	bf00      	nop
   1e3a6:	3710      	adds	r7, #16
   1e3a8:	46bd      	mov	sp, r7
   1e3aa:	bd80      	pop	{r7, pc}
   1e3ac:	431bde83 	.word	0x431bde83
   1e3b0:	000f4240 	.word	0x000f4240

0001e3b4 <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1e3b4:	b580      	push	{r7, lr}
   1e3b6:	b082      	sub	sp, #8
   1e3b8:	af00      	add	r7, sp, #0
   1e3ba:	4603      	mov	r3, r0
   1e3bc:	71fb      	strb	r3, [r7, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1e3be:	79fb      	ldrb	r3, [r7, #7]
   1e3c0:	2213      	movs	r2, #19
   1e3c2:	4619      	mov	r1, r3
   1e3c4:	2003      	movs	r0, #3
   1e3c6:	f7f1 fa4f 	bl	f868 <DmConnClose>
}
   1e3ca:	bf00      	nop
   1e3cc:	3708      	adds	r7, #8
   1e3ce:	46bd      	mov	sp, r7
   1e3d0:	bd80      	pop	{r7, pc}
	...

0001e3d4 <AppConnOpenList>:
 *  \return Number of open connections.
 *
 */
/*************************************************************************************************/
uint8_t AppConnOpenList(dmConnId_t *pConnIdList)
{
   1e3d4:	b580      	push	{r7, lr}
   1e3d6:	b084      	sub	sp, #16
   1e3d8:	af00      	add	r7, sp, #0
   1e3da:	6078      	str	r0, [r7, #4]
  appConnCb_t   *pCcb = appConnCb;
   1e3dc:	4b13      	ldr	r3, [pc, #76]	; (1e42c <AppConnOpenList+0x58>)
   1e3de:	60fb      	str	r3, [r7, #12]
  uint8_t       i;
  uint8_t       pos = 0;
   1e3e0:	2300      	movs	r3, #0
   1e3e2:	72bb      	strb	r3, [r7, #10]

  memset(pConnIdList, DM_CONN_ID_NONE, DM_CONN_MAX);
   1e3e4:	2208      	movs	r2, #8
   1e3e6:	2100      	movs	r1, #0
   1e3e8:	6878      	ldr	r0, [r7, #4]
   1e3ea:	f7ed ffb7 	bl	c35c <memset>

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1e3ee:	2308      	movs	r3, #8
   1e3f0:	72fb      	strb	r3, [r7, #11]
   1e3f2:	e012      	b.n	1e41a <AppConnOpenList+0x46>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1e3f4:	68fb      	ldr	r3, [r7, #12]
   1e3f6:	791b      	ldrb	r3, [r3, #4]
   1e3f8:	2b00      	cmp	r3, #0
   1e3fa:	d008      	beq.n	1e40e <AppConnOpenList+0x3a>
    {      
      pConnIdList[pos++] = pCcb->connId;
   1e3fc:	7abb      	ldrb	r3, [r7, #10]
   1e3fe:	1c5a      	adds	r2, r3, #1
   1e400:	72ba      	strb	r2, [r7, #10]
   1e402:	461a      	mov	r2, r3
   1e404:	687b      	ldr	r3, [r7, #4]
   1e406:	4413      	add	r3, r2
   1e408:	68fa      	ldr	r2, [r7, #12]
   1e40a:	7912      	ldrb	r2, [r2, #4]
   1e40c:	701a      	strb	r2, [r3, #0]
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1e40e:	7afb      	ldrb	r3, [r7, #11]
   1e410:	3b01      	subs	r3, #1
   1e412:	72fb      	strb	r3, [r7, #11]
   1e414:	68fb      	ldr	r3, [r7, #12]
   1e416:	3320      	adds	r3, #32
   1e418:	60fb      	str	r3, [r7, #12]
   1e41a:	7afb      	ldrb	r3, [r7, #11]
   1e41c:	2b00      	cmp	r3, #0
   1e41e:	d1e9      	bne.n	1e3f4 <AppConnOpenList+0x20>
    }
  }

  return pos;
   1e420:	7abb      	ldrb	r3, [r7, #10]
}
   1e422:	4618      	mov	r0, r3
   1e424:	3710      	adds	r7, #16
   1e426:	46bd      	mov	sp, r7
   1e428:	bd80      	pop	{r7, pc}
   1e42a:	bf00      	nop
   1e42c:	10009ee4 	.word	0x10009ee4

0001e430 <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   1e430:	b480      	push	{r7}
   1e432:	b083      	sub	sp, #12
   1e434:	af00      	add	r7, sp, #0
   1e436:	4603      	mov	r3, r0
   1e438:	71fb      	strb	r3, [r7, #7]
  return appConnCb[connId-1].dbHdl;
   1e43a:	79fb      	ldrb	r3, [r7, #7]
   1e43c:	3b01      	subs	r3, #1
   1e43e:	4a05      	ldr	r2, [pc, #20]	; (1e454 <AppDbGetHdl+0x24>)
   1e440:	015b      	lsls	r3, r3, #5
   1e442:	4413      	add	r3, r2
   1e444:	681b      	ldr	r3, [r3, #0]
}
   1e446:	4618      	mov	r0, r3
   1e448:	370c      	adds	r7, #12
   1e44a:	46bd      	mov	sp, r7
   1e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e450:	4770      	bx	lr
   1e452:	bf00      	nop
   1e454:	10009ee4 	.word	0x10009ee4

0001e458 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1e458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e45a:	b087      	sub	sp, #28
   1e45c:	af02      	add	r7, sp, #8
   1e45e:	6078      	str	r0, [r7, #4]
   1e460:	460b      	mov	r3, r1
   1e462:	70fb      	strb	r3, [r7, #3]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1e464:	78fb      	ldrb	r3, [r7, #3]
   1e466:	3b01      	subs	r3, #1
   1e468:	4a15      	ldr	r2, [pc, #84]	; (1e4c0 <AppAddDevToResList+0x68>)
   1e46a:	015b      	lsls	r3, r3, #5
   1e46c:	4413      	add	r3, r2
   1e46e:	681b      	ldr	r3, [r3, #0]
   1e470:	60fb      	str	r3, [r7, #12]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1e472:	f7f7 fcf7 	bl	15e64 <HciLlPrivacySupported>
   1e476:	4603      	mov	r3, r0
   1e478:	2b00      	cmp	r3, #0
   1e47a:	d01c      	beq.n	1e4b6 <AppAddDevToResList+0x5e>
   1e47c:	2200      	movs	r2, #0
   1e47e:	2104      	movs	r1, #4
   1e480:	68f8      	ldr	r0, [r7, #12]
   1e482:	f7fb f89b 	bl	195bc <AppDbGetKey>
   1e486:	60b8      	str	r0, [r7, #8]
   1e488:	68bb      	ldr	r3, [r7, #8]
   1e48a:	2b00      	cmp	r3, #0
   1e48c:	d013      	beq.n	1e4b6 <AppAddDevToResList+0x5e>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1e48e:	68bb      	ldr	r3, [r7, #8]
   1e490:	7d9c      	ldrb	r4, [r3, #22]
   1e492:	68bb      	ldr	r3, [r7, #8]
   1e494:	f103 0510 	add.w	r5, r3, #16
   1e498:	68be      	ldr	r6, [r7, #8]
   1e49a:	f7f2 f98f 	bl	107bc <DmSecGetLocalIrk>
   1e49e:	4602      	mov	r2, r0
   1e4a0:	687b      	ldr	r3, [r7, #4]
   1e4a2:	881b      	ldrh	r3, [r3, #0]
   1e4a4:	9301      	str	r3, [sp, #4]
   1e4a6:	2301      	movs	r3, #1
   1e4a8:	9300      	str	r3, [sp, #0]
   1e4aa:	4613      	mov	r3, r2
   1e4ac:	4632      	mov	r2, r6
   1e4ae:	4629      	mov	r1, r5
   1e4b0:	4620      	mov	r0, r4
   1e4b2:	f7f1 fe6f 	bl	10194 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1e4b6:	bf00      	nop
   1e4b8:	3714      	adds	r7, #20
   1e4ba:	46bd      	mov	sp, r7
   1e4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4be:	bf00      	nop
   1e4c0:	10009ee4 	.word	0x10009ee4

0001e4c4 <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   1e4c4:	b580      	push	{r7, lr}
   1e4c6:	b084      	sub	sp, #16
   1e4c8:	af00      	add	r7, sp, #0
   1e4ca:	6078      	str	r0, [r7, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1e4cc:	687b      	ldr	r3, [r7, #4]
   1e4ce:	2b00      	cmp	r3, #0
   1e4d0:	d020      	beq.n	1e514 <AppUpdatePrivacyMode+0x50>
   1e4d2:	6878      	ldr	r0, [r7, #4]
   1e4d4:	f7fb f9ae 	bl	19834 <AppDbGetPeerAddedToRl>
   1e4d8:	4603      	mov	r3, r0
   1e4da:	2b00      	cmp	r3, #0
   1e4dc:	d01a      	beq.n	1e514 <AppUpdatePrivacyMode+0x50>
   1e4de:	6878      	ldr	r0, [r7, #4]
   1e4e0:	f7fb f9c5 	bl	1986e <AppDbGetPeerRpao>
   1e4e4:	4603      	mov	r3, r0
   1e4e6:	2b00      	cmp	r3, #0
   1e4e8:	d114      	bne.n	1e514 <AppUpdatePrivacyMode+0x50>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1e4ea:	2200      	movs	r2, #0
   1e4ec:	2104      	movs	r1, #4
   1e4ee:	6878      	ldr	r0, [r7, #4]
   1e4f0:	f7fb f864 	bl	195bc <AppDbGetKey>
   1e4f4:	60f8      	str	r0, [r7, #12]
    if (pPeerKey != NULL)
   1e4f6:	68fb      	ldr	r3, [r7, #12]
   1e4f8:	2b00      	cmp	r3, #0
   1e4fa:	d00b      	beq.n	1e514 <AppUpdatePrivacyMode+0x50>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1e4fc:	68fb      	ldr	r3, [r7, #12]
   1e4fe:	7d98      	ldrb	r0, [r3, #22]
   1e500:	68fb      	ldr	r3, [r7, #12]
   1e502:	3310      	adds	r3, #16
   1e504:	2201      	movs	r2, #1
   1e506:	4619      	mov	r1, r3
   1e508:	f7f1 febe 	bl	10288 <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1e50c:	2100      	movs	r1, #0
   1e50e:	6878      	ldr	r0, [r7, #4]
   1e510:	f7fb f99d 	bl	1984e <AppDbSetPeerAddedToRl>
    }
  }
}
   1e514:	bf00      	nop
   1e516:	3710      	adds	r7, #16
   1e518:	46bd      	mov	sp, r7
   1e51a:	bd80      	pop	{r7, pc}

0001e51c <appMasterInitiateSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterInitiateSec(dmConnId_t connId, bool_t initiatePairing, appConnCb_t *pCb)
{
   1e51c:	b590      	push	{r4, r7, lr}
   1e51e:	b089      	sub	sp, #36	; 0x24
   1e520:	af02      	add	r7, sp, #8
   1e522:	4603      	mov	r3, r0
   1e524:	603a      	str	r2, [r7, #0]
   1e526:	71fb      	strb	r3, [r7, #7]
   1e528:	460b      	mov	r3, r1
   1e52a:	71bb      	strb	r3, [r7, #6]
  uint8_t     rKeyDist;
  uint8_t     secLevel;
  dmSecKey_t  *pKey;

  /* if we have an LTK for peer device */
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   1e52c:	683b      	ldr	r3, [r7, #0]
   1e52e:	681b      	ldr	r3, [r3, #0]
   1e530:	2b00      	cmp	r3, #0
   1e532:	d018      	beq.n	1e566 <appMasterInitiateSec+0x4a>
      ((pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_PEER_LTK, &secLevel)) != NULL))
   1e534:	683b      	ldr	r3, [r7, #0]
   1e536:	681b      	ldr	r3, [r3, #0]
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   1e538:	f107 020f 	add.w	r2, r7, #15
   1e53c:	2102      	movs	r1, #2
   1e53e:	4618      	mov	r0, r3
   1e540:	f7fb f83c 	bl	195bc <AppDbGetKey>
   1e544:	6138      	str	r0, [r7, #16]
   1e546:	693b      	ldr	r3, [r7, #16]
   1e548:	2b00      	cmp	r3, #0
   1e54a:	d00c      	beq.n	1e566 <appMasterInitiateSec+0x4a>
  {
    pCb->bondByLtk = TRUE;
   1e54c:	683b      	ldr	r3, [r7, #0]
   1e54e:	2201      	movs	r2, #1
   1e550:	719a      	strb	r2, [r3, #6]
    pCb->initiatingSec = TRUE;
   1e552:	683b      	ldr	r3, [r7, #0]
   1e554:	2201      	movs	r2, #1
   1e556:	721a      	strb	r2, [r3, #8]
          
    /* encrypt with LTK */
    DmSecEncryptReq(connId, secLevel, &pKey->ltk);
   1e558:	7bf9      	ldrb	r1, [r7, #15]
   1e55a:	693a      	ldr	r2, [r7, #16]
   1e55c:	79fb      	ldrb	r3, [r7, #7]
   1e55e:	4618      	mov	r0, r3
   1e560:	f7f3 fd93 	bl	1208a <DmSecEncryptReq>
    pCb->initiatingSec = TRUE;
    
    /* initiate pairing */
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
  }
}
   1e564:	e04d      	b.n	1e602 <appMasterInitiateSec+0xe6>
  else if (initiatePairing)
   1e566:	79bb      	ldrb	r3, [r7, #6]
   1e568:	2b00      	cmp	r3, #0
   1e56a:	d04a      	beq.n	1e602 <appMasterInitiateSec+0xe6>
    pCb->bondByPairing = (pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1e56c:	4b27      	ldr	r3, [pc, #156]	; (1e60c <appMasterInitiateSec+0xf0>)
   1e56e:	681b      	ldr	r3, [r3, #0]
   1e570:	781b      	ldrb	r3, [r3, #0]
   1e572:	f003 0301 	and.w	r3, r3, #1
   1e576:	2b00      	cmp	r3, #0
   1e578:	bf14      	ite	ne
   1e57a:	2301      	movne	r3, #1
   1e57c:	2300      	moveq	r3, #0
   1e57e:	b2db      	uxtb	r3, r3
   1e580:	461a      	mov	r2, r3
   1e582:	683b      	ldr	r3, [r7, #0]
   1e584:	71da      	strb	r2, [r3, #7]
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1e586:	683b      	ldr	r3, [r7, #0]
   1e588:	79db      	ldrb	r3, [r3, #7]
   1e58a:	2b00      	cmp	r3, #0
   1e58c:	d015      	beq.n	1e5ba <appMasterInitiateSec+0x9e>
   1e58e:	683b      	ldr	r3, [r7, #0]
   1e590:	681b      	ldr	r3, [r3, #0]
   1e592:	2b00      	cmp	r3, #0
   1e594:	d111      	bne.n	1e5ba <appMasterInitiateSec+0x9e>
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId), DmConnPeerAddr(connId));
   1e596:	79fb      	ldrb	r3, [r7, #7]
   1e598:	4618      	mov	r0, r3
   1e59a:	f7f1 fa89 	bl	fab0 <DmConnPeerAddrType>
   1e59e:	4603      	mov	r3, r0
   1e5a0:	461c      	mov	r4, r3
   1e5a2:	79fb      	ldrb	r3, [r7, #7]
   1e5a4:	4618      	mov	r0, r3
   1e5a6:	f7f1 fa8d 	bl	fac4 <DmConnPeerAddr>
   1e5aa:	4603      	mov	r3, r0
   1e5ac:	4619      	mov	r1, r3
   1e5ae:	4620      	mov	r0, r4
   1e5b0:	f7fa fe78 	bl	192a4 <AppDbNewRecord>
   1e5b4:	4602      	mov	r2, r0
   1e5b6:	683b      	ldr	r3, [r7, #0]
   1e5b8:	601a      	str	r2, [r3, #0]
    pCb->rcvdKeys = 0;
   1e5ba:	683b      	ldr	r3, [r7, #0]
   1e5bc:	2200      	movs	r2, #0
   1e5be:	72da      	strb	r2, [r3, #11]
    rKeyDist = pAppSecCfg->rKeyDist;
   1e5c0:	4b12      	ldr	r3, [pc, #72]	; (1e60c <appMasterInitiateSec+0xf0>)
   1e5c2:	681b      	ldr	r3, [r3, #0]
   1e5c4:	789b      	ldrb	r3, [r3, #2]
   1e5c6:	75fb      	strb	r3, [r7, #23]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   1e5c8:	79fb      	ldrb	r3, [r7, #7]
   1e5ca:	4618      	mov	r0, r3
   1e5cc:	f7f1 fa70 	bl	fab0 <DmConnPeerAddrType>
   1e5d0:	4603      	mov	r3, r0
   1e5d2:	2b01      	cmp	r3, #1
   1e5d4:	d103      	bne.n	1e5de <appMasterInitiateSec+0xc2>
      rKeyDist |= DM_KEY_DIST_IRK;
   1e5d6:	7dfb      	ldrb	r3, [r7, #23]
   1e5d8:	f043 0302 	orr.w	r3, r3, #2
   1e5dc:	75fb      	strb	r3, [r7, #23]
    pCb->initiatingSec = TRUE;
   1e5de:	683b      	ldr	r3, [r7, #0]
   1e5e0:	2201      	movs	r2, #1
   1e5e2:	721a      	strb	r2, [r3, #8]
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
   1e5e4:	4b09      	ldr	r3, [pc, #36]	; (1e60c <appMasterInitiateSec+0xf0>)
   1e5e6:	681b      	ldr	r3, [r3, #0]
   1e5e8:	78d9      	ldrb	r1, [r3, #3]
   1e5ea:	4b08      	ldr	r3, [pc, #32]	; (1e60c <appMasterInitiateSec+0xf0>)
   1e5ec:	681b      	ldr	r3, [r3, #0]
   1e5ee:	781a      	ldrb	r2, [r3, #0]
   1e5f0:	4b06      	ldr	r3, [pc, #24]	; (1e60c <appMasterInitiateSec+0xf0>)
   1e5f2:	681b      	ldr	r3, [r3, #0]
   1e5f4:	785c      	ldrb	r4, [r3, #1]
   1e5f6:	79f8      	ldrb	r0, [r7, #7]
   1e5f8:	7dfb      	ldrb	r3, [r7, #23]
   1e5fa:	9300      	str	r3, [sp, #0]
   1e5fc:	4623      	mov	r3, r4
   1e5fe:	f7f3 fd25 	bl	1204c <DmSecPairReq>
}
   1e602:	bf00      	nop
   1e604:	371c      	adds	r7, #28
   1e606:	46bd      	mov	sp, r7
   1e608:	bd90      	pop	{r4, r7, pc}
   1e60a:	bf00      	nop
   1e60c:	10009ed4 	.word	0x10009ed4

0001e610 <appScanResultsClear>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appScanResultsClear(void)
{
   1e610:	b480      	push	{r7}
   1e612:	b083      	sub	sp, #12
   1e614:	af00      	add	r7, sp, #0
  uint8_t       i;
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1e616:	4b0f      	ldr	r3, [pc, #60]	; (1e654 <appScanResultsClear+0x44>)
   1e618:	603b      	str	r3, [r7, #0]
  
  appMasterCb.numScanResults = 0;
   1e61a:	4b0e      	ldr	r3, [pc, #56]	; (1e654 <appScanResultsClear+0x44>)
   1e61c:	2200      	movs	r2, #0
   1e61e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  for (i = APP_SCAN_RESULT_MAX; i > 0; i--, pDev++)
   1e622:	230a      	movs	r3, #10
   1e624:	71fb      	strb	r3, [r7, #7]
   1e626:	e008      	b.n	1e63a <appScanResultsClear+0x2a>
  {
    pDev->addrType = APP_ADDR_NONE;
   1e628:	683b      	ldr	r3, [r7, #0]
   1e62a:	22ff      	movs	r2, #255	; 0xff
   1e62c:	719a      	strb	r2, [r3, #6]
  for (i = APP_SCAN_RESULT_MAX; i > 0; i--, pDev++)
   1e62e:	79fb      	ldrb	r3, [r7, #7]
   1e630:	3b01      	subs	r3, #1
   1e632:	71fb      	strb	r3, [r7, #7]
   1e634:	683b      	ldr	r3, [r7, #0]
   1e636:	330e      	adds	r3, #14
   1e638:	603b      	str	r3, [r7, #0]
   1e63a:	79fb      	ldrb	r3, [r7, #7]
   1e63c:	2b00      	cmp	r3, #0
   1e63e:	d1f3      	bne.n	1e628 <appScanResultsClear+0x18>
  }

  /* end address resolution */
  appMasterCb.inProgress = FALSE;
   1e640:	4b04      	ldr	r3, [pc, #16]	; (1e654 <appScanResultsClear+0x44>)
   1e642:	2200      	movs	r2, #0
   1e644:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
   1e648:	bf00      	nop
   1e64a:	370c      	adds	r7, #12
   1e64c:	46bd      	mov	sp, r7
   1e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e652:	4770      	bx	lr
   1e654:	10009fe4 	.word	0x10009fe4

0001e658 <appScanResultAdd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appScanResultAdd(dmEvt_t *pMsg)
{
   1e658:	b580      	push	{r7, lr}
   1e65a:	b084      	sub	sp, #16
   1e65c:	af00      	add	r7, sp, #0
   1e65e:	6078      	str	r0, [r7, #4]
  uint8_t       i;
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1e660:	4b23      	ldr	r3, [pc, #140]	; (1e6f0 <appScanResultAdd+0x98>)
   1e662:	60bb      	str	r3, [r7, #8]
  
  /* see if device is in list already */
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1e664:	2300      	movs	r3, #0
   1e666:	73fb      	strb	r3, [r7, #15]
   1e668:	e03b      	b.n	1e6e2 <appScanResultAdd+0x8a>
  {
    /* if address matches list entry */
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1e66a:	68bb      	ldr	r3, [r7, #8]
   1e66c:	799a      	ldrb	r2, [r3, #6]
   1e66e:	687b      	ldr	r3, [r7, #4]
   1e670:	7adb      	ldrb	r3, [r3, #11]
   1e672:	429a      	cmp	r2, r3
   1e674:	d109      	bne.n	1e68a <appScanResultAdd+0x32>
        BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1e676:	68ba      	ldr	r2, [r7, #8]
   1e678:	687b      	ldr	r3, [r7, #4]
   1e67a:	330c      	adds	r3, #12
   1e67c:	4619      	mov	r1, r3
   1e67e:	4610      	mov	r0, r2
   1e680:	f7fb face 	bl	19c20 <BdaCmp>
   1e684:	4603      	mov	r3, r0
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1e686:	2b00      	cmp	r3, #0
   1e688:	d12e      	bne.n	1e6e8 <appScanResultAdd+0x90>
    {
      /* device already exists in list; we are done */
      break;
    }
    /* if entry is free end then of list has been reached */
    else if (pDev->addrType == APP_ADDR_NONE)
   1e68a:	68bb      	ldr	r3, [r7, #8]
   1e68c:	799b      	ldrb	r3, [r3, #6]
   1e68e:	2bff      	cmp	r3, #255	; 0xff
   1e690:	d121      	bne.n	1e6d6 <appScanResultAdd+0x7e>
    {
      /* add device to list */
      pDev->addrType = pMsg->scanReport.addrType;
   1e692:	687b      	ldr	r3, [r7, #4]
   1e694:	7ada      	ldrb	r2, [r3, #11]
   1e696:	68bb      	ldr	r3, [r7, #8]
   1e698:	719a      	strb	r2, [r3, #6]
      BdaCpy(pDev->addr, pMsg->scanReport.addr);
   1e69a:	68ba      	ldr	r2, [r7, #8]
   1e69c:	687b      	ldr	r3, [r7, #4]
   1e69e:	330c      	adds	r3, #12
   1e6a0:	4619      	mov	r1, r3
   1e6a2:	4610      	mov	r0, r2
   1e6a4:	f7fb faae 	bl	19c04 <BdaCpy>
      pDev->directAddrType = pMsg->scanReport.directAddrType;
   1e6a8:	687b      	ldr	r3, [r7, #4]
   1e6aa:	7c9a      	ldrb	r2, [r3, #18]
   1e6ac:	68bb      	ldr	r3, [r7, #8]
   1e6ae:	71da      	strb	r2, [r3, #7]
      BdaCpy(pDev->directAddr, pMsg->scanReport.directAddr);
   1e6b0:	68bb      	ldr	r3, [r7, #8]
   1e6b2:	f103 0208 	add.w	r2, r3, #8
   1e6b6:	687b      	ldr	r3, [r7, #4]
   1e6b8:	3313      	adds	r3, #19
   1e6ba:	4619      	mov	r1, r3
   1e6bc:	4610      	mov	r0, r2
   1e6be:	f7fb faa1 	bl	19c04 <BdaCpy>
      appMasterCb.numScanResults++;
   1e6c2:	4b0b      	ldr	r3, [pc, #44]	; (1e6f0 <appScanResultAdd+0x98>)
   1e6c4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   1e6c8:	3301      	adds	r3, #1
   1e6ca:	b2da      	uxtb	r2, r3
   1e6cc:	4b08      	ldr	r3, [pc, #32]	; (1e6f0 <appScanResultAdd+0x98>)
   1e6ce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      break;
   1e6d2:	bf00      	nop
    }
  }
}
   1e6d4:	e008      	b.n	1e6e8 <appScanResultAdd+0x90>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1e6d6:	7bfb      	ldrb	r3, [r7, #15]
   1e6d8:	3301      	adds	r3, #1
   1e6da:	73fb      	strb	r3, [r7, #15]
   1e6dc:	68bb      	ldr	r3, [r7, #8]
   1e6de:	330e      	adds	r3, #14
   1e6e0:	60bb      	str	r3, [r7, #8]
   1e6e2:	7bfb      	ldrb	r3, [r7, #15]
   1e6e4:	2b09      	cmp	r3, #9
   1e6e6:	d9c0      	bls.n	1e66a <appScanResultAdd+0x12>
}
   1e6e8:	bf00      	nop
   1e6ea:	3710      	adds	r7, #16
   1e6ec:	46bd      	mov	sp, r7
   1e6ee:	bd80      	pop	{r7, pc}
   1e6f0:	10009fe4 	.word	0x10009fe4

0001e6f4 <appScanResultFind>:
*
*  \return Index of result in scan result list. APP_SCAN_RESULT_MAX, otherwise.
*/
/*************************************************************************************************/
static uint8_t appScanResultFind(dmEvt_t *pMsg)
{
   1e6f4:	b580      	push	{r7, lr}
   1e6f6:	b084      	sub	sp, #16
   1e6f8:	af00      	add	r7, sp, #0
   1e6fa:	6078      	str	r0, [r7, #4]
  uint8_t       i;
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1e6fc:	4b12      	ldr	r3, [pc, #72]	; (1e748 <appScanResultFind+0x54>)
   1e6fe:	60bb      	str	r3, [r7, #8]

  /* see if device is in list already */
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1e700:	2300      	movs	r3, #0
   1e702:	73fb      	strb	r3, [r7, #15]
   1e704:	e015      	b.n	1e732 <appScanResultFind+0x3e>
  {
    /* if address matches list entry */
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1e706:	68bb      	ldr	r3, [r7, #8]
   1e708:	799a      	ldrb	r2, [r3, #6]
   1e70a:	687b      	ldr	r3, [r7, #4]
   1e70c:	7adb      	ldrb	r3, [r3, #11]
   1e70e:	429a      	cmp	r2, r3
   1e710:	d109      	bne.n	1e726 <appScanResultFind+0x32>
        BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1e712:	68ba      	ldr	r2, [r7, #8]
   1e714:	687b      	ldr	r3, [r7, #4]
   1e716:	330c      	adds	r3, #12
   1e718:	4619      	mov	r1, r3
   1e71a:	4610      	mov	r0, r2
   1e71c:	f7fb fa80 	bl	19c20 <BdaCmp>
   1e720:	4603      	mov	r3, r0
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1e722:	2b00      	cmp	r3, #0
   1e724:	d109      	bne.n	1e73a <appScanResultFind+0x46>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1e726:	7bfb      	ldrb	r3, [r7, #15]
   1e728:	3301      	adds	r3, #1
   1e72a:	73fb      	strb	r3, [r7, #15]
   1e72c:	68bb      	ldr	r3, [r7, #8]
   1e72e:	330e      	adds	r3, #14
   1e730:	60bb      	str	r3, [r7, #8]
   1e732:	7bfb      	ldrb	r3, [r7, #15]
   1e734:	2b09      	cmp	r3, #9
   1e736:	d9e6      	bls.n	1e706 <appScanResultFind+0x12>
   1e738:	e000      	b.n	1e73c <appScanResultFind+0x48>
    {
      /* device already exists in list; we are done */
      break;
   1e73a:	bf00      	nop
    }
  }

  return i;
   1e73c:	7bfb      	ldrb	r3, [r7, #15]
}
   1e73e:	4618      	mov	r0, r3
   1e740:	3710      	adds	r7, #16
   1e742:	46bd      	mov	sp, r7
   1e744:	bd80      	pop	{r7, pc}
   1e746:	bf00      	nop
   1e748:	10009fe4 	.word	0x10009fe4

0001e74c <appMasterScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterScanStart(dmEvt_t *pMsg)
{
   1e74c:	b580      	push	{r7, lr}
   1e74e:	b082      	sub	sp, #8
   1e750:	af00      	add	r7, sp, #0
   1e752:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1e754:	687b      	ldr	r3, [r7, #4]
   1e756:	78db      	ldrb	r3, [r3, #3]
   1e758:	2b00      	cmp	r3, #0
   1e75a:	d101      	bne.n	1e760 <appMasterScanStart+0x14>
  {
    /* clear current scan results */
    appScanResultsClear();
   1e75c:	f7ff ff58 	bl	1e610 <appScanResultsClear>
  }
}
   1e760:	bf00      	nop
   1e762:	3708      	adds	r7, #8
   1e764:	46bd      	mov	sp, r7
   1e766:	bd80      	pop	{r7, pc}

0001e768 <appMasterScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterScanStop(dmEvt_t *pMsg)
{
   1e768:	b580      	push	{r7, lr}
   1e76a:	b082      	sub	sp, #8
   1e76c:	af00      	add	r7, sp, #0
   1e76e:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1e770:	687b      	ldr	r3, [r7, #4]
   1e772:	78db      	ldrb	r3, [r3, #3]
   1e774:	2b00      	cmp	r3, #0
   1e776:	d106      	bne.n	1e786 <appMasterScanStop+0x1e>
  {
    APP_TRACE_INFO1("Scan results: %d", AppScanGetNumResults());
   1e778:	f000 fb5a 	bl	1ee30 <AppScanGetNumResults>
   1e77c:	4603      	mov	r3, r0
   1e77e:	4619      	mov	r1, r3
   1e780:	4803      	ldr	r0, [pc, #12]	; (1e790 <appMasterScanStop+0x28>)
   1e782:	f7fd f895 	bl	1b8b0 <WsfTrace>
  }
}
   1e786:	bf00      	nop
   1e788:	3708      	adds	r7, #8
   1e78a:	46bd      	mov	sp, r7
   1e78c:	bd80      	pop	{r7, pc}
   1e78e:	bf00      	nop
   1e790:	00025b00 	.word	0x00025b00

0001e794 <appMasterScanReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterScanReport(dmEvt_t *pMsg)
{
   1e794:	b580      	push	{r7, lr}
   1e796:	b082      	sub	sp, #8
   1e798:	af00      	add	r7, sp, #0
   1e79a:	6078      	str	r0, [r7, #4]
  /* add to scan result list */
  appScanResultAdd(pMsg);
   1e79c:	6878      	ldr	r0, [r7, #4]
   1e79e:	f7ff ff5b 	bl	1e658 <appScanResultAdd>
}
   1e7a2:	bf00      	nop
   1e7a4:	3708      	adds	r7, #8
   1e7a6:	46bd      	mov	sp, r7
   1e7a8:	bd80      	pop	{r7, pc}

0001e7aa <appMasterConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e7aa:	b480      	push	{r7}
   1e7ac:	b083      	sub	sp, #12
   1e7ae:	af00      	add	r7, sp, #0
   1e7b0:	6078      	str	r0, [r7, #4]
   1e7b2:	6039      	str	r1, [r7, #0]

}
   1e7b4:	bf00      	nop
   1e7b6:	370c      	adds	r7, #12
   1e7b8:	46bd      	mov	sp, r7
   1e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e7be:	4770      	bx	lr

0001e7c0 <appMasterConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e7c0:	b580      	push	{r7, lr}
   1e7c2:	b082      	sub	sp, #8
   1e7c4:	af00      	add	r7, sp, #0
   1e7c6:	6078      	str	r0, [r7, #4]
   1e7c8:	6039      	str	r1, [r7, #0]
  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   1e7ca:	683b      	ldr	r3, [r7, #0]
   1e7cc:	681b      	ldr	r3, [r3, #0]
   1e7ce:	4618      	mov	r0, r3
   1e7d0:	f7ff fe78 	bl	1e4c4 <AppUpdatePrivacyMode>

  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   1e7d4:	683b      	ldr	r3, [r7, #0]
   1e7d6:	2200      	movs	r2, #0
   1e7d8:	711a      	strb	r2, [r3, #4]

  /* cancel any address resolution in progress */
  appMasterCb.inProgress = FALSE;
   1e7da:	4b04      	ldr	r3, [pc, #16]	; (1e7ec <appMasterConnClose+0x2c>)
   1e7dc:	2200      	movs	r2, #0
   1e7de:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
   1e7e2:	bf00      	nop
   1e7e4:	3708      	adds	r7, #8
   1e7e6:	46bd      	mov	sp, r7
   1e7e8:	bd80      	pop	{r7, pc}
   1e7ea:	bf00      	nop
   1e7ec:	10009fe4 	.word	0x10009fe4

0001e7f0 <appMasterSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e7f0:	b580      	push	{r7, lr}
   1e7f2:	b082      	sub	sp, #8
   1e7f4:	af00      	add	r7, sp, #0
   1e7f6:	6078      	str	r0, [r7, #4]
   1e7f8:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  pCb->bonded = FALSE;
   1e7fa:	683b      	ldr	r3, [r7, #0]
   1e7fc:	2200      	movs	r2, #0
   1e7fe:	715a      	strb	r2, [r3, #5]
  pCb->bondByLtk = FALSE;
   1e800:	683b      	ldr	r3, [r7, #0]
   1e802:	2200      	movs	r2, #0
   1e804:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   1e806:	683b      	ldr	r3, [r7, #0]
   1e808:	2200      	movs	r2, #0
   1e80a:	71da      	strb	r2, [r3, #7]
  pCb->initiatingSec = FALSE;
   1e80c:	683b      	ldr	r3, [r7, #0]
   1e80e:	2200      	movs	r2, #0
   1e810:	721a      	strb	r2, [r3, #8]
  
  /* if master initiates security on connection open */
  appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, pAppSecCfg->initiateSec, pCb);
   1e812:	687b      	ldr	r3, [r7, #4]
   1e814:	881b      	ldrh	r3, [r3, #0]
   1e816:	b2d8      	uxtb	r0, r3
   1e818:	4b05      	ldr	r3, [pc, #20]	; (1e830 <appMasterSecConnOpen+0x40>)
   1e81a:	681b      	ldr	r3, [r3, #0]
   1e81c:	791b      	ldrb	r3, [r3, #4]
   1e81e:	683a      	ldr	r2, [r7, #0]
   1e820:	4619      	mov	r1, r3
   1e822:	f7ff fe7b 	bl	1e51c <appMasterInitiateSec>
}
   1e826:	bf00      	nop
   1e828:	3708      	adds	r7, #8
   1e82a:	46bd      	mov	sp, r7
   1e82c:	bd80      	pop	{r7, pc}
   1e82e:	bf00      	nop
   1e830:	10009ed4 	.word	0x10009ed4

0001e834 <appMasterSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e834:	b580      	push	{r7, lr}
   1e836:	b082      	sub	sp, #8
   1e838:	af00      	add	r7, sp, #0
   1e83a:	6078      	str	r0, [r7, #4]
   1e83c:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e83e:	683b      	ldr	r3, [r7, #0]
   1e840:	681b      	ldr	r3, [r3, #0]
   1e842:	2b00      	cmp	r3, #0
   1e844:	d004      	beq.n	1e850 <appMasterSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   1e846:	683b      	ldr	r3, [r7, #0]
   1e848:	681b      	ldr	r3, [r3, #0]
   1e84a:	4618      	mov	r0, r3
   1e84c:	f7fa fdd2 	bl	193f4 <AppDbCheckValidRecord>
  }
}
   1e850:	bf00      	nop
   1e852:	3708      	adds	r7, #8
   1e854:	46bd      	mov	sp, r7
   1e856:	bd80      	pop	{r7, pc}

0001e858 <appMasterSecSlaveReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecSlaveReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e858:	b580      	push	{r7, lr}
   1e85a:	b082      	sub	sp, #8
   1e85c:	af00      	add	r7, sp, #0
   1e85e:	6078      	str	r0, [r7, #4]
   1e860:	6039      	str	r1, [r7, #0]
  /* if master is not initiating security and not already secure */
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1e862:	4b0f      	ldr	r3, [pc, #60]	; (1e8a0 <appMasterSecSlaveReq+0x48>)
   1e864:	681b      	ldr	r3, [r3, #0]
   1e866:	791b      	ldrb	r3, [r3, #4]
   1e868:	2b00      	cmp	r3, #0
   1e86a:	d114      	bne.n	1e896 <appMasterSecSlaveReq+0x3e>
   1e86c:	683b      	ldr	r3, [r7, #0]
   1e86e:	7a1b      	ldrb	r3, [r3, #8]
   1e870:	2b00      	cmp	r3, #0
   1e872:	d110      	bne.n	1e896 <appMasterSecSlaveReq+0x3e>
      (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1e874:	687b      	ldr	r3, [r7, #4]
   1e876:	881b      	ldrh	r3, [r3, #0]
   1e878:	b2db      	uxtb	r3, r3
   1e87a:	4618      	mov	r0, r3
   1e87c:	f7f1 f952 	bl	fb24 <DmConnSecLevel>
   1e880:	4603      	mov	r3, r0
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1e882:	2b00      	cmp	r3, #0
   1e884:	d107      	bne.n	1e896 <appMasterSecSlaveReq+0x3e>
  {
    appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, TRUE, pCb);
   1e886:	687b      	ldr	r3, [r7, #4]
   1e888:	881b      	ldrh	r3, [r3, #0]
   1e88a:	b2db      	uxtb	r3, r3
   1e88c:	683a      	ldr	r2, [r7, #0]
   1e88e:	2101      	movs	r1, #1
   1e890:	4618      	mov	r0, r3
   1e892:	f7ff fe43 	bl	1e51c <appMasterInitiateSec>
  }
}
   1e896:	bf00      	nop
   1e898:	3708      	adds	r7, #8
   1e89a:	46bd      	mov	sp, r7
   1e89c:	bd80      	pop	{r7, pc}
   1e89e:	bf00      	nop
   1e8a0:	10009ed4 	.word	0x10009ed4

0001e8a4 <appPrivSetAddrResEnableInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   1e8a4:	b580      	push	{r7, lr}
   1e8a6:	b082      	sub	sp, #8
   1e8a8:	af00      	add	r7, sp, #0
   1e8aa:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1e8ac:	687b      	ldr	r3, [r7, #4]
   1e8ae:	78db      	ldrb	r3, [r3, #3]
   1e8b0:	2b00      	cmp	r3, #0
   1e8b2:	d105      	bne.n	1e8c0 <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1e8b4:	f7f1 fb24 	bl	ff00 <DmLlPrivEnabled>
   1e8b8:	4603      	mov	r3, r0
   1e8ba:	4618      	mov	r0, r3
   1e8bc:	f7fd f832 	bl	1b924 <SvcCoreGapCentAddrResUpdate>
  }
}
   1e8c0:	bf00      	nop
   1e8c2:	3708      	adds	r7, #8
   1e8c4:	46bd      	mov	sp, r7
   1e8c6:	bd80      	pop	{r7, pc}

0001e8c8 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e8c8:	b580      	push	{r7, lr}
   1e8ca:	b082      	sub	sp, #8
   1e8cc:	af00      	add	r7, sp, #0
   1e8ce:	6078      	str	r0, [r7, #4]
   1e8d0:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1e8d2:	687b      	ldr	r3, [r7, #4]
   1e8d4:	78db      	ldrb	r3, [r3, #3]
   1e8d6:	2b00      	cmp	r3, #0
   1e8d8:	d109      	bne.n	1e8ee <appPrivAddDevToResListInd+0x26>
   1e8da:	683b      	ldr	r3, [r7, #0]
   1e8dc:	681b      	ldr	r3, [r3, #0]
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	d005      	beq.n	1e8ee <appPrivAddDevToResListInd+0x26>
  {
    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1e8e2:	683b      	ldr	r3, [r7, #0]
   1e8e4:	681b      	ldr	r3, [r3, #0]
   1e8e6:	2101      	movs	r1, #1
   1e8e8:	4618      	mov	r0, r3
   1e8ea:	f7fa ffb0 	bl	1984e <AppDbSetPeerAddedToRl>
  }
}
   1e8ee:	bf00      	nop
   1e8f0:	3708      	adds	r7, #8
   1e8f2:	46bd      	mov	sp, r7
   1e8f4:	bd80      	pop	{r7, pc}

0001e8f6 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e8f6:	b580      	push	{r7, lr}
   1e8f8:	b082      	sub	sp, #8
   1e8fa:	af00      	add	r7, sp, #0
   1e8fc:	6078      	str	r0, [r7, #4]
   1e8fe:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1e900:	687b      	ldr	r3, [r7, #4]
   1e902:	78db      	ldrb	r3, [r3, #3]
   1e904:	2b00      	cmp	r3, #0
   1e906:	d109      	bne.n	1e91c <appPrivRemDevFromResListInd+0x26>
   1e908:	683b      	ldr	r3, [r7, #0]
   1e90a:	681b      	ldr	r3, [r3, #0]
   1e90c:	2b00      	cmp	r3, #0
   1e90e:	d005      	beq.n	1e91c <appPrivRemDevFromResListInd+0x26>
  {
    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1e910:	683b      	ldr	r3, [r7, #0]
   1e912:	681b      	ldr	r3, [r3, #0]
   1e914:	2100      	movs	r1, #0
   1e916:	4618      	mov	r0, r3
   1e918:	f7fa ff99 	bl	1984e <AppDbSetPeerAddedToRl>
  }
}
   1e91c:	bf00      	nop
   1e91e:	3708      	adds	r7, #8
   1e920:	46bd      	mov	sp, r7
   1e922:	bd80      	pop	{r7, pc}

0001e924 <appMasterSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e924:	b580      	push	{r7, lr}
   1e926:	b082      	sub	sp, #8
   1e928:	af00      	add	r7, sp, #0
   1e92a:	6078      	str	r0, [r7, #4]
   1e92c:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1e92e:	683b      	ldr	r3, [r7, #0]
   1e930:	79db      	ldrb	r3, [r3, #7]
   1e932:	2b00      	cmp	r3, #0
   1e934:	d012      	beq.n	1e95c <appMasterSecStoreKey+0x38>
   1e936:	683b      	ldr	r3, [r7, #0]
   1e938:	681b      	ldr	r3, [r3, #0]
   1e93a:	2b00      	cmp	r3, #0
   1e93c:	d00e      	beq.n	1e95c <appMasterSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1e93e:	683b      	ldr	r3, [r7, #0]
   1e940:	7ada      	ldrb	r2, [r3, #11]
   1e942:	687b      	ldr	r3, [r7, #4]
   1e944:	7f9b      	ldrb	r3, [r3, #30]
   1e946:	4313      	orrs	r3, r2
   1e948:	b2da      	uxtb	r2, r3
   1e94a:	683b      	ldr	r3, [r7, #0]
   1e94c:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1e94e:	683b      	ldr	r3, [r7, #0]
   1e950:	681b      	ldr	r3, [r3, #0]
   1e952:	687a      	ldr	r2, [r7, #4]
   1e954:	4611      	mov	r1, r2
   1e956:	4618      	mov	r0, r3
   1e958:	f7fa fe7a 	bl	19650 <AppDbSetKey>
  }
}
   1e95c:	bf00      	nop
   1e95e:	3708      	adds	r7, #8
   1e960:	46bd      	mov	sp, r7
   1e962:	bd80      	pop	{r7, pc}

0001e964 <appMasterSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e964:	b580      	push	{r7, lr}
   1e966:	b082      	sub	sp, #8
   1e968:	af00      	add	r7, sp, #0
   1e96a:	6078      	str	r0, [r7, #4]
   1e96c:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pMsg->pairCmpl.auth & DM_AUTH_BOND_FLAG)
   1e96e:	687b      	ldr	r3, [r7, #4]
   1e970:	791b      	ldrb	r3, [r3, #4]
   1e972:	f003 0301 	and.w	r3, r3, #1
   1e976:	2b00      	cmp	r3, #0
   1e978:	d018      	beq.n	1e9ac <appMasterSecPairCmpl+0x48>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   1e97a:	683b      	ldr	r3, [r7, #0]
   1e97c:	2201      	movs	r2, #1
   1e97e:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e980:	683b      	ldr	r3, [r7, #0]
   1e982:	681b      	ldr	r3, [r3, #0]
   1e984:	2b00      	cmp	r3, #0
   1e986:	d007      	beq.n	1e998 <appMasterSecPairCmpl+0x34>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1e988:	683b      	ldr	r3, [r7, #0]
   1e98a:	681a      	ldr	r2, [r3, #0]
   1e98c:	683b      	ldr	r3, [r7, #0]
   1e98e:	7adb      	ldrb	r3, [r3, #11]
   1e990:	4619      	mov	r1, r3
   1e992:	4610      	mov	r0, r2
   1e994:	f7fa fd1a 	bl	193cc <AppDbValidateRecord>
    }    

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e998:	683b      	ldr	r3, [r7, #0]
   1e99a:	681b      	ldr	r3, [r3, #0]
   1e99c:	2b00      	cmp	r3, #0
   1e99e:	d005      	beq.n	1e9ac <appMasterSecPairCmpl+0x48>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   1e9a0:	683b      	ldr	r3, [r7, #0]
   1e9a2:	791b      	ldrb	r3, [r3, #4]
   1e9a4:	4619      	mov	r1, r3
   1e9a6:	6878      	ldr	r0, [r7, #4]
   1e9a8:	f7ff fd56 	bl	1e458 <AppAddDevToResList>
    }
  }
  
  pCb->initiatingSec = FALSE;
   1e9ac:	683b      	ldr	r3, [r7, #0]
   1e9ae:	2200      	movs	r2, #0
   1e9b0:	721a      	strb	r2, [r3, #8]
}
   1e9b2:	bf00      	nop
   1e9b4:	3708      	adds	r7, #8
   1e9b6:	46bd      	mov	sp, r7
   1e9b8:	bd80      	pop	{r7, pc}

0001e9ba <appMasterSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e9ba:	b480      	push	{r7}
   1e9bc:	b083      	sub	sp, #12
   1e9be:	af00      	add	r7, sp, #0
   1e9c0:	6078      	str	r0, [r7, #4]
   1e9c2:	6039      	str	r1, [r7, #0]
  pCb->initiatingSec = FALSE;
   1e9c4:	683b      	ldr	r3, [r7, #0]
   1e9c6:	2200      	movs	r2, #0
   1e9c8:	721a      	strb	r2, [r3, #8]
  return;
   1e9ca:	bf00      	nop
}
   1e9cc:	370c      	adds	r7, #12
   1e9ce:	46bd      	mov	sp, r7
   1e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e9d4:	4770      	bx	lr

0001e9d6 <appMasterSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e9d6:	b480      	push	{r7}
   1e9d8:	b083      	sub	sp, #12
   1e9da:	af00      	add	r7, sp, #0
   1e9dc:	6078      	str	r0, [r7, #4]
   1e9de:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1e9e0:	683b      	ldr	r3, [r7, #0]
   1e9e2:	799b      	ldrb	r3, [r3, #6]
   1e9e4:	2b00      	cmp	r3, #0
   1e9e6:	d00c      	beq.n	1ea02 <appMasterSecEncryptInd+0x2c>
   1e9e8:	687b      	ldr	r3, [r7, #4]
   1e9ea:	791b      	ldrb	r3, [r3, #4]
   1e9ec:	2b00      	cmp	r3, #0
   1e9ee:	d008      	beq.n	1ea02 <appMasterSecEncryptInd+0x2c>
  {
    pCb->bonded = TRUE;
   1e9f0:	683b      	ldr	r3, [r7, #0]
   1e9f2:	2201      	movs	r2, #1
   1e9f4:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   1e9f6:	683b      	ldr	r3, [r7, #0]
   1e9f8:	2200      	movs	r2, #0
   1e9fa:	719a      	strb	r2, [r3, #6]
    pCb->initiatingSec = FALSE;
   1e9fc:	683b      	ldr	r3, [r7, #0]
   1e9fe:	2200      	movs	r2, #0
   1ea00:	721a      	strb	r2, [r3, #8]
  }
}
   1ea02:	bf00      	nop
   1ea04:	370c      	adds	r7, #12
   1ea06:	46bd      	mov	sp, r7
   1ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ea0c:	4770      	bx	lr

0001ea0e <appMasterProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appMasterProcMsg(wsfMsgHdr_t *pMsg)
{
   1ea0e:	b480      	push	{r7}
   1ea10:	b083      	sub	sp, #12
   1ea12:	af00      	add	r7, sp, #0
   1ea14:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1ea16:	687b      	ldr	r3, [r7, #4]
   1ea18:	789b      	ldrb	r3, [r3, #2]
   1ea1a:	2b10      	cmp	r3, #16
   1ea1c:	d000      	beq.n	1ea20 <appMasterProcMsg+0x12>
  {
    case APP_CONN_UPDATE_TIMEOUT_IND:
      break;

    default:
      break;
   1ea1e:	e000      	b.n	1ea22 <appMasterProcMsg+0x14>
      break;
   1ea20:	bf00      	nop
  }
}
   1ea22:	bf00      	nop
   1ea24:	370c      	adds	r7, #12
   1ea26:	46bd      	mov	sp, r7
   1ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ea2c:	4770      	bx	lr
	...

0001ea30 <appMasterResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterResolvedAddrInd(dmEvt_t *pMsg)
{
   1ea30:	b590      	push	{r4, r7, lr}
   1ea32:	b085      	sub	sp, #20
   1ea34:	af00      	add	r7, sp, #0
   1ea36:	6078      	str	r0, [r7, #4]
  appDevInfo_t *pDev;
  dmSecKey_t *pPeerKey;
  
  /* if address resolution is not in progress */
  if (!appMasterCb.inProgress)
   1ea38:	4b36      	ldr	r3, [pc, #216]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1ea3a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ea3e:	2b00      	cmp	r3, #0
   1ea40:	d064      	beq.n	1eb0c <appMasterResolvedAddrInd+0xdc>
  {
    return;
  }

  /* get device record */
  pDev = &appMasterCb.scanResults[appMasterCb.idx];
   1ea42:	4b34      	ldr	r3, [pc, #208]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1ea44:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   1ea48:	461a      	mov	r2, r3
   1ea4a:	4613      	mov	r3, r2
   1ea4c:	00db      	lsls	r3, r3, #3
   1ea4e:	1a9b      	subs	r3, r3, r2
   1ea50:	005b      	lsls	r3, r3, #1
   1ea52:	4a30      	ldr	r2, [pc, #192]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1ea54:	4413      	add	r3, r2
   1ea56:	60fb      	str	r3, [r7, #12]

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   1ea58:	687b      	ldr	r3, [r7, #4]
   1ea5a:	78db      	ldrb	r3, [r3, #3]
   1ea5c:	2b00      	cmp	r3, #0
   1ea5e:	d125      	bne.n	1eaac <appMasterResolvedAddrInd+0x7c>
  {
    /* if resolved advertising was directed with an RPA initiator address */
    if ((pMsg->hdr.param == APP_RESOLVE_ADV_RPA) && DM_RAND_ADDR_RPA(pDev->directAddr, pDev->directAddrType))
   1ea60:	687b      	ldr	r3, [r7, #4]
   1ea62:	881b      	ldrh	r3, [r3, #0]
   1ea64:	2b00      	cmp	r3, #0
   1ea66:	d115      	bne.n	1ea94 <appMasterResolvedAddrInd+0x64>
   1ea68:	68fb      	ldr	r3, [r7, #12]
   1ea6a:	79db      	ldrb	r3, [r3, #7]
   1ea6c:	2b01      	cmp	r3, #1
   1ea6e:	d111      	bne.n	1ea94 <appMasterResolvedAddrInd+0x64>
   1ea70:	68fb      	ldr	r3, [r7, #12]
   1ea72:	7b5b      	ldrb	r3, [r3, #13]
   1ea74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ea78:	2b40      	cmp	r3, #64	; 0x40
   1ea7a:	d10b      	bne.n	1ea94 <appMasterResolvedAddrInd+0x64>
    {
      /* reslove initiator's RPA to see if directed advertisement was addressed to us */
      DmPrivResolveAddr(pDev->directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   1ea7c:	68fb      	ldr	r3, [r7, #12]
   1ea7e:	f103 0408 	add.w	r4, r3, #8
   1ea82:	f7f1 fe9b 	bl	107bc <DmSecGetLocalIrk>
   1ea86:	4603      	mov	r3, r0
   1ea88:	2201      	movs	r2, #1
   1ea8a:	4619      	mov	r1, r3
   1ea8c:	4620      	mov	r0, r4
   1ea8e:	f7f1 fb61 	bl	10154 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1ea92:	e03c      	b.n	1eb0e <appMasterResolvedAddrInd+0xde>
    }

    /* stop scanning */
    AppScanStop();
   1ea94:	f000 fada 	bl	1f04c <AppScanStop>

    /* connect to peer device using its advertising address */
    AppConnOpen(pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   1ea98:	68fb      	ldr	r3, [r7, #12]
   1ea9a:	7998      	ldrb	r0, [r3, #6]
   1ea9c:	68f9      	ldr	r1, [r7, #12]
   1ea9e:	4b1d      	ldr	r3, [pc, #116]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1eaa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1eaa4:	461a      	mov	r2, r3
   1eaa6:	f000 fae3 	bl	1f070 <AppConnOpen>
   1eaaa:	e02a      	b.n	1eb02 <appMasterResolvedAddrInd+0xd2>
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appMasterCb.dbHdl != APP_DB_HDL_NONE))
   1eaac:	687b      	ldr	r3, [r7, #4]
   1eaae:	78db      	ldrb	r3, [r3, #3]
   1eab0:	2b05      	cmp	r3, #5
   1eab2:	d126      	bne.n	1eb02 <appMasterResolvedAddrInd+0xd2>
   1eab4:	4b17      	ldr	r3, [pc, #92]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1eab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1eaba:	2b00      	cmp	r3, #0
   1eabc:	d021      	beq.n	1eb02 <appMasterResolvedAddrInd+0xd2>
  {
    /* get the next database record */
    appMasterCb.dbHdl = AppDbGetNextRecord(appMasterCb.dbHdl);
   1eabe:	4b15      	ldr	r3, [pc, #84]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1eac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1eac4:	4618      	mov	r0, r3
   1eac6:	f7fa fc3f 	bl	19348 <AppDbGetNextRecord>
   1eaca:	4602      	mov	r2, r0
   1eacc:	4b11      	ldr	r3, [pc, #68]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1eace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* if there's another bond record */
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) && 
   1ead2:	4b10      	ldr	r3, [pc, #64]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1ead4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1ead8:	2b00      	cmp	r3, #0
   1eada:	d012      	beq.n	1eb02 <appMasterResolvedAddrInd+0xd2>
        ((pPeerKey = AppDbGetKey(appMasterCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1eadc:	4b0d      	ldr	r3, [pc, #52]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1eade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) && 
   1eae2:	2200      	movs	r2, #0
   1eae4:	2104      	movs	r1, #4
   1eae6:	4618      	mov	r0, r3
   1eae8:	f7fa fd68 	bl	195bc <AppDbGetKey>
   1eaec:	60b8      	str	r0, [r7, #8]
   1eaee:	68bb      	ldr	r3, [r7, #8]
   1eaf0:	2b00      	cmp	r3, #0
   1eaf2:	d006      	beq.n	1eb02 <appMasterResolvedAddrInd+0xd2>
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(pDev->addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1eaf4:	68fb      	ldr	r3, [r7, #12]
   1eaf6:	68b9      	ldr	r1, [r7, #8]
   1eaf8:	2200      	movs	r2, #0
   1eafa:	4618      	mov	r0, r3
   1eafc:	f7f1 fb2a 	bl	10154 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1eb00:	e005      	b.n	1eb0e <appMasterResolvedAddrInd+0xde>
    }
  }

  /* done with this address resolution */
  appMasterCb.inProgress = FALSE;
   1eb02:	4b04      	ldr	r3, [pc, #16]	; (1eb14 <appMasterResolvedAddrInd+0xe4>)
   1eb04:	2200      	movs	r2, #0
   1eb06:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   1eb0a:	e000      	b.n	1eb0e <appMasterResolvedAddrInd+0xde>
    return;
   1eb0c:	bf00      	nop
}
   1eb0e:	3714      	adds	r7, #20
   1eb10:	46bd      	mov	sp, r7
   1eb12:	bd90      	pop	{r4, r7, pc}
   1eb14:	10009fe4 	.word	0x10009fe4

0001eb18 <appMasterRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1eb18:	b580      	push	{r7, lr}
   1eb1a:	b086      	sub	sp, #24
   1eb1c:	af00      	add	r7, sp, #0
   1eb1e:	6078      	str	r0, [r7, #4]
   1eb20:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1eb22:	4b16      	ldr	r3, [pc, #88]	; (1eb7c <appMasterRemoteConnParamReq+0x64>)
   1eb24:	681b      	ldr	r3, [r3, #0]
   1eb26:	781b      	ldrb	r3, [r3, #0]
   1eb28:	2b00      	cmp	r3, #0
   1eb2a:	d118      	bne.n	1eb5e <appMasterRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1eb2c:	687b      	ldr	r3, [r7, #4]
   1eb2e:	88db      	ldrh	r3, [r3, #6]
   1eb30:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   1eb32:	687b      	ldr	r3, [r7, #4]
   1eb34:	891b      	ldrh	r3, [r3, #8]
   1eb36:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   1eb38:	687b      	ldr	r3, [r7, #4]
   1eb3a:	895b      	ldrh	r3, [r3, #10]
   1eb3c:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   1eb3e:	687b      	ldr	r3, [r7, #4]
   1eb40:	899b      	ldrh	r3, [r3, #12]
   1eb42:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1eb44:	2300      	movs	r3, #0
   1eb46:	82fb      	strh	r3, [r7, #22]
   1eb48:	8afb      	ldrh	r3, [r7, #22]
   1eb4a:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1eb4c:	683b      	ldr	r3, [r7, #0]
   1eb4e:	791b      	ldrb	r3, [r3, #4]
   1eb50:	f107 020c 	add.w	r2, r7, #12
   1eb54:	4611      	mov	r1, r2
   1eb56:	4618      	mov	r0, r3
   1eb58:	f7f0 ff2c 	bl	f9b4 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   1eb5c:	e00a      	b.n	1eb74 <appMasterRemoteConnParamReq+0x5c>
  else if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1eb5e:	4b07      	ldr	r3, [pc, #28]	; (1eb7c <appMasterRemoteConnParamReq+0x64>)
   1eb60:	681b      	ldr	r3, [r3, #0]
   1eb62:	781b      	ldrb	r3, [r3, #0]
   1eb64:	2b01      	cmp	r3, #1
   1eb66:	d105      	bne.n	1eb74 <appMasterRemoteConnParamReq+0x5c>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1eb68:	683b      	ldr	r3, [r7, #0]
   1eb6a:	791b      	ldrb	r3, [r3, #4]
   1eb6c:	2111      	movs	r1, #17
   1eb6e:	4618      	mov	r0, r3
   1eb70:	f7f0 ff3c 	bl	f9ec <DmRemoteConnParamReqNegReply>
}
   1eb74:	bf00      	nop
   1eb76:	3718      	adds	r7, #24
   1eb78:	46bd      	mov	sp, r7
   1eb7a:	bd80      	pop	{r7, pc}
   1eb7c:	10002c6c 	.word	0x10002c6c

0001eb80 <AppMasterInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterInit(void)
{
   1eb80:	b480      	push	{r7}
   1eb82:	af00      	add	r7, sp, #0
  appMasterCb.inProgress = FALSE;
   1eb84:	4b07      	ldr	r3, [pc, #28]	; (1eba4 <AppMasterInit+0x24>)
   1eb86:	2200      	movs	r2, #0
   1eb88:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

  /* initialize scan mode */
  appMasterCb.scanMode = APP_SCAN_MODE_NONE;
   1eb8c:	4b05      	ldr	r3, [pc, #20]	; (1eba4 <AppMasterInit+0x24>)
   1eb8e:	22ff      	movs	r2, #255	; 0xff
   1eb90:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* set up callback from main */
  appCb.masterCback = appMasterProcMsg;
   1eb94:	4b04      	ldr	r3, [pc, #16]	; (1eba8 <AppMasterInit+0x28>)
   1eb96:	4a05      	ldr	r2, [pc, #20]	; (1ebac <AppMasterInit+0x2c>)
   1eb98:	605a      	str	r2, [r3, #4]
}
   1eb9a:	bf00      	nop
   1eb9c:	46bd      	mov	sp, r7
   1eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1eba2:	4770      	bx	lr
   1eba4:	10009fe4 	.word	0x10009fe4
   1eba8:	10009ec0 	.word	0x10009ec0
   1ebac:	0001ea0f 	.word	0x0001ea0f

0001ebb0 <AppMasterProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterProcDmMsg(dmEvt_t *pMsg)
{
   1ebb0:	b580      	push	{r7, lr}
   1ebb2:	b084      	sub	sp, #16
   1ebb4:	af00      	add	r7, sp, #0
   1ebb6:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   1ebb8:	2300      	movs	r3, #0
   1ebba:	60fb      	str	r3, [r7, #12]
  
  /* look up app connection control block from DM connection ID */
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   1ebbc:	687b      	ldr	r3, [r7, #4]
   1ebbe:	789b      	ldrb	r3, [r3, #2]
   1ebc0:	2b27      	cmp	r3, #39	; 0x27
   1ebc2:	d007      	beq.n	1ebd4 <AppMasterProcDmMsg+0x24>
      pMsg->hdr.event == DM_CONN_CLOSE_IND ||
   1ebc4:	687b      	ldr	r3, [r7, #4]
   1ebc6:	789b      	ldrb	r3, [r3, #2]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   1ebc8:	2b28      	cmp	r3, #40	; 0x28
   1ebca:	d003      	beq.n	1ebd4 <AppMasterProcDmMsg+0x24>
      pMsg->hdr.event == DM_REM_CONN_PARAM_REQ_IND)
   1ebcc:	687b      	ldr	r3, [r7, #4]
   1ebce:	789b      	ldrb	r3, [r3, #2]
      pMsg->hdr.event == DM_CONN_CLOSE_IND ||
   1ebd0:	2b3f      	cmp	r3, #63	; 0x3f
   1ebd2:	d106      	bne.n	1ebe2 <AppMasterProcDmMsg+0x32>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1ebd4:	687b      	ldr	r3, [r7, #4]
   1ebd6:	881b      	ldrh	r3, [r3, #0]
   1ebd8:	3b01      	subs	r3, #1
   1ebda:	015b      	lsls	r3, r3, #5
   1ebdc:	4a3a      	ldr	r2, [pc, #232]	; (1ecc8 <AppMasterProcDmMsg+0x118>)
   1ebde:	4413      	add	r3, r2
   1ebe0:	60fb      	str	r3, [r7, #12]
  }
  
  switch(pMsg->hdr.event)
   1ebe2:	687b      	ldr	r3, [r7, #4]
   1ebe4:	789b      	ldrb	r3, [r3, #2]
   1ebe6:	3b20      	subs	r3, #32
   1ebe8:	2b1f      	cmp	r3, #31
   1ebea:	d867      	bhi.n	1ecbc <AppMasterProcDmMsg+0x10c>
   1ebec:	a201      	add	r2, pc, #4	; (adr r2, 1ebf4 <AppMasterProcDmMsg+0x44>)
   1ebee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ebf2:	bf00      	nop
   1ebf4:	0001ec75 	.word	0x0001ec75
   1ebf8:	0001ecbd 	.word	0x0001ecbd
   1ebfc:	0001ecbd 	.word	0x0001ecbd
   1ec00:	0001ecbd 	.word	0x0001ecbd
   1ec04:	0001ec7f 	.word	0x0001ec7f
   1ec08:	0001ec87 	.word	0x0001ec87
   1ec0c:	0001ec8f 	.word	0x0001ec8f
   1ec10:	0001ec97 	.word	0x0001ec97
   1ec14:	0001eca1 	.word	0x0001eca1
   1ec18:	0001ecbd 	.word	0x0001ecbd
   1ec1c:	0001ecbd 	.word	0x0001ecbd
   1ec20:	0001ecbd 	.word	0x0001ecbd
   1ec24:	0001ecbd 	.word	0x0001ecbd
   1ec28:	0001ecbd 	.word	0x0001ecbd
   1ec2c:	0001ecbd 	.word	0x0001ecbd
   1ec30:	0001ecbd 	.word	0x0001ecbd
   1ec34:	0001ecbd 	.word	0x0001ecbd
   1ec38:	0001ecbd 	.word	0x0001ecbd
   1ec3c:	0001ecbd 	.word	0x0001ecbd
   1ec40:	0001ecbd 	.word	0x0001ecbd
   1ec44:	0001ecbd 	.word	0x0001ecbd
   1ec48:	0001ecbd 	.word	0x0001ecbd
   1ec4c:	0001ecbd 	.word	0x0001ecbd
   1ec50:	0001ecab 	.word	0x0001ecab
   1ec54:	0001ecbd 	.word	0x0001ecbd
   1ec58:	0001ecbd 	.word	0x0001ecbd
   1ec5c:	0001ecbd 	.word	0x0001ecbd
   1ec60:	0001ecbd 	.word	0x0001ecbd
   1ec64:	0001ecbd 	.word	0x0001ecbd
   1ec68:	0001ecbd 	.word	0x0001ecbd
   1ec6c:	0001ecbd 	.word	0x0001ecbd
   1ec70:	0001ecb3 	.word	0x0001ecb3
  {
    case DM_RESET_CMPL_IND:
      /* reset scan mode */
      appMasterCb.scanMode = APP_SCAN_MODE_NONE;
   1ec74:	4b15      	ldr	r3, [pc, #84]	; (1eccc <AppMasterProcDmMsg+0x11c>)
   1ec76:	22ff      	movs	r2, #255	; 0xff
   1ec78:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      break;
   1ec7c:	e01f      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    case DM_SCAN_START_IND:
      appMasterScanStart(pMsg);
   1ec7e:	6878      	ldr	r0, [r7, #4]
   1ec80:	f7ff fd64 	bl	1e74c <appMasterScanStart>
      break;  
   1ec84:	e01b      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    case DM_SCAN_STOP_IND:
      appMasterScanStop(pMsg);
   1ec86:	6878      	ldr	r0, [r7, #4]
   1ec88:	f7ff fd6e 	bl	1e768 <appMasterScanStop>
      break;  
   1ec8c:	e017      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    case DM_SCAN_REPORT_IND:
      appMasterScanReport(pMsg);
   1ec8e:	6878      	ldr	r0, [r7, #4]
   1ec90:	f7ff fd80 	bl	1e794 <appMasterScanReport>
      break;  
   1ec94:	e013      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    case DM_CONN_OPEN_IND:
      appMasterConnOpen(pMsg, pCb);
   1ec96:	68f9      	ldr	r1, [r7, #12]
   1ec98:	6878      	ldr	r0, [r7, #4]
   1ec9a:	f7ff fd86 	bl	1e7aa <appMasterConnOpen>
      break;
   1ec9e:	e00e      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    case DM_CONN_CLOSE_IND:
      appMasterConnClose(pMsg, pCb);
   1eca0:	68f9      	ldr	r1, [r7, #12]
   1eca2:	6878      	ldr	r0, [r7, #4]
   1eca4:	f7ff fd8c 	bl	1e7c0 <appMasterConnClose>
      break;
   1eca8:	e009      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appMasterResolvedAddrInd(pMsg);
   1ecaa:	6878      	ldr	r0, [r7, #4]
   1ecac:	f7ff fec0 	bl	1ea30 <appMasterResolvedAddrInd>
      break;
   1ecb0:	e005      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    case DM_REM_CONN_PARAM_REQ_IND:
      appMasterRemoteConnParamReq(pMsg, pCb);
   1ecb2:	68f9      	ldr	r1, [r7, #12]
   1ecb4:	6878      	ldr	r0, [r7, #4]
   1ecb6:	f7ff ff2f 	bl	1eb18 <appMasterRemoteConnParamReq>
      break;
   1ecba:	e000      	b.n	1ecbe <AppMasterProcDmMsg+0x10e>

    default:
      break;
   1ecbc:	bf00      	nop
  }
}
   1ecbe:	bf00      	nop
   1ecc0:	3710      	adds	r7, #16
   1ecc2:	46bd      	mov	sp, r7
   1ecc4:	bd80      	pop	{r7, pc}
   1ecc6:	bf00      	nop
   1ecc8:	10009ee4 	.word	0x10009ee4
   1eccc:	10009fe4 	.word	0x10009fe4

0001ecd0 <AppMasterSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterSecProcDmMsg(dmEvt_t *pMsg)
{
   1ecd0:	b580      	push	{r7, lr}
   1ecd2:	b084      	sub	sp, #16
   1ecd4:	af00      	add	r7, sp, #0
   1ecd6:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1ecd8:	687b      	ldr	r3, [r7, #4]
   1ecda:	881b      	ldrh	r3, [r3, #0]
   1ecdc:	3b01      	subs	r3, #1
   1ecde:	015b      	lsls	r3, r3, #5
   1ece0:	4a52      	ldr	r2, [pc, #328]	; (1ee2c <AppMasterSecProcDmMsg+0x15c>)
   1ece2:	4413      	add	r3, r2
   1ece4:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   1ece6:	687b      	ldr	r3, [r7, #4]
   1ece8:	789b      	ldrb	r3, [r3, #2]
   1ecea:	3b27      	subs	r3, #39	; 0x27
   1ecec:	2b2e      	cmp	r3, #46	; 0x2e
   1ecee:	f200 8098 	bhi.w	1ee22 <AppMasterSecProcDmMsg+0x152>
   1ecf2:	a201      	add	r2, pc, #4	; (adr r2, 1ecf8 <AppMasterSecProcDmMsg+0x28>)
   1ecf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ecf8:	0001edb5 	.word	0x0001edb5
   1ecfc:	0001edbf 	.word	0x0001edbf
   1ed00:	0001ee23 	.word	0x0001ee23
   1ed04:	0001edc9 	.word	0x0001edc9
   1ed08:	0001edd3 	.word	0x0001edd3
   1ed0c:	0001eddd 	.word	0x0001eddd
   1ed10:	0001ee23 	.word	0x0001ee23
   1ed14:	0001ee23 	.word	0x0001ee23
   1ed18:	0001ede7 	.word	0x0001ede7
   1ed1c:	0001ee23 	.word	0x0001ee23
   1ed20:	0001ee23 	.word	0x0001ee23
   1ed24:	0001edf1 	.word	0x0001edf1
   1ed28:	0001ee23 	.word	0x0001ee23
   1ed2c:	0001ee23 	.word	0x0001ee23
   1ed30:	0001ee23 	.word	0x0001ee23
   1ed34:	0001ee23 	.word	0x0001ee23
   1ed38:	0001ee23 	.word	0x0001ee23
   1ed3c:	0001ee23 	.word	0x0001ee23
   1ed40:	0001ee03 	.word	0x0001ee03
   1ed44:	0001ee0d 	.word	0x0001ee0d
   1ed48:	0001ee23 	.word	0x0001ee23
   1ed4c:	0001ee23 	.word	0x0001ee23
   1ed50:	0001ee23 	.word	0x0001ee23
   1ed54:	0001edfb 	.word	0x0001edfb
   1ed58:	0001ee23 	.word	0x0001ee23
   1ed5c:	0001ee23 	.word	0x0001ee23
   1ed60:	0001ee23 	.word	0x0001ee23
   1ed64:	0001ee23 	.word	0x0001ee23
   1ed68:	0001ee23 	.word	0x0001ee23
   1ed6c:	0001ee23 	.word	0x0001ee23
   1ed70:	0001ee23 	.word	0x0001ee23
   1ed74:	0001ee23 	.word	0x0001ee23
   1ed78:	0001ee23 	.word	0x0001ee23
   1ed7c:	0001ee23 	.word	0x0001ee23
   1ed80:	0001ee23 	.word	0x0001ee23
   1ed84:	0001ee23 	.word	0x0001ee23
   1ed88:	0001ee23 	.word	0x0001ee23
   1ed8c:	0001ee23 	.word	0x0001ee23
   1ed90:	0001ee23 	.word	0x0001ee23
   1ed94:	0001ee23 	.word	0x0001ee23
   1ed98:	0001ee23 	.word	0x0001ee23
   1ed9c:	0001ee23 	.word	0x0001ee23
   1eda0:	0001ee23 	.word	0x0001ee23
   1eda4:	0001ee23 	.word	0x0001ee23
   1eda8:	0001ee23 	.word	0x0001ee23
   1edac:	0001ee23 	.word	0x0001ee23
   1edb0:	0001ee17 	.word	0x0001ee17
  {
    case DM_CONN_OPEN_IND:
      appMasterSecConnOpen(pMsg, pCb);
   1edb4:	68f9      	ldr	r1, [r7, #12]
   1edb6:	6878      	ldr	r0, [r7, #4]
   1edb8:	f7ff fd1a 	bl	1e7f0 <appMasterSecConnOpen>
      break;
   1edbc:	e032      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_CONN_CLOSE_IND:
      appMasterSecConnClose(pMsg, pCb);
   1edbe:	68f9      	ldr	r1, [r7, #12]
   1edc0:	6878      	ldr	r0, [r7, #4]
   1edc2:	f7ff fd37 	bl	1e834 <appMasterSecConnClose>
      break;
   1edc6:	e02d      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_SEC_PAIR_CMPL_IND:
      appMasterSecPairCmpl(pMsg, pCb);
   1edc8:	68f9      	ldr	r1, [r7, #12]
   1edca:	6878      	ldr	r0, [r7, #4]
   1edcc:	f7ff fdca 	bl	1e964 <appMasterSecPairCmpl>
      break;
   1edd0:	e028      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>
      
    case DM_SEC_PAIR_FAIL_IND:
      appMasterSecPairFailed(pMsg, pCb);
   1edd2:	68f9      	ldr	r1, [r7, #12]
   1edd4:	6878      	ldr	r0, [r7, #4]
   1edd6:	f7ff fdf0 	bl	1e9ba <appMasterSecPairFailed>
      break;
   1edda:	e023      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_SEC_ENCRYPT_IND:
      appMasterSecEncryptInd(pMsg, pCb);
   1eddc:	68f9      	ldr	r1, [r7, #12]
   1edde:	6878      	ldr	r0, [r7, #4]
   1ede0:	f7ff fdf9 	bl	1e9d6 <appMasterSecEncryptInd>
      break;
   1ede4:	e01e      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appMasterSecStoreKey(pMsg, pCb);
   1ede6:	68f9      	ldr	r1, [r7, #12]
   1ede8:	6878      	ldr	r0, [r7, #4]
   1edea:	f7ff fd9b 	bl	1e924 <appMasterSecStoreKey>
      break;
   1edee:	e019      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_SEC_SLAVE_REQ_IND:
      appMasterSecSlaveReq(pMsg, pCb);
   1edf0:	68f9      	ldr	r1, [r7, #12]
   1edf2:	6878      	ldr	r0, [r7, #4]
   1edf4:	f7ff fd30 	bl	1e858 <appMasterSecSlaveReq>
      break;
   1edf8:	e014      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   1edfa:	6878      	ldr	r0, [r7, #4]
   1edfc:	f7ff fd52 	bl	1e8a4 <appPrivSetAddrResEnableInd>
      break;
   1ee00:	e010      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   1ee02:	68f9      	ldr	r1, [r7, #12]
   1ee04:	6878      	ldr	r0, [r7, #4]
   1ee06:	f7ff fd5f 	bl	1e8c8 <appPrivAddDevToResListInd>
      break;
   1ee0a:	e00b      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   1ee0c:	68f9      	ldr	r1, [r7, #12]
   1ee0e:	6878      	ldr	r0, [r7, #4]
   1ee10:	f7ff fd71 	bl	1e8f6 <appPrivRemDevFromResListInd>
      break;
   1ee14:	e006      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   1ee16:	2000      	movs	r0, #0
   1ee18:	f7fb f830 	bl	19e7c <HciDrvRadioBoot>
      DmDevReset();
   1ee1c:	f7f0 ffc0 	bl	fda0 <DmDevReset>
      break;
   1ee20:	e000      	b.n	1ee24 <AppMasterSecProcDmMsg+0x154>

    default:
      break;
   1ee22:	bf00      	nop
  }
}
   1ee24:	bf00      	nop
   1ee26:	3710      	adds	r7, #16
   1ee28:	46bd      	mov	sp, r7
   1ee2a:	bd80      	pop	{r7, pc}
   1ee2c:	10009ee4 	.word	0x10009ee4

0001ee30 <AppScanGetNumResults>:
 *
 *  \return Number of stored scan results.
 */
/*************************************************************************************************/
uint8_t AppScanGetNumResults(void)
{
   1ee30:	b480      	push	{r7}
   1ee32:	af00      	add	r7, sp, #0
  return appMasterCb.numScanResults;
   1ee34:	4b03      	ldr	r3, [pc, #12]	; (1ee44 <AppScanGetNumResults+0x14>)
   1ee36:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
   1ee3a:	4618      	mov	r0, r3
   1ee3c:	46bd      	mov	sp, r7
   1ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ee42:	4770      	bx	lr
   1ee44:	10009fe4 	.word	0x10009fe4

0001ee48 <appConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t appConnOpen(uint8_t initPhys, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1ee48:	b580      	push	{r7, lr}
   1ee4a:	b086      	sub	sp, #24
   1ee4c:	af00      	add	r7, sp, #0
   1ee4e:	60ba      	str	r2, [r7, #8]
   1ee50:	607b      	str	r3, [r7, #4]
   1ee52:	4603      	mov	r3, r0
   1ee54:	73fb      	strb	r3, [r7, #15]
   1ee56:	460b      	mov	r3, r1
   1ee58:	73bb      	strb	r3, [r7, #14]
  dmConnId_t  connId;
  appConnCb_t *pCb;

  /* open connection */
  connId = DmConnOpen(DM_CLIENT_ID_APP, initPhys, addrType, pAddr);
   1ee5a:	7bba      	ldrb	r2, [r7, #14]
   1ee5c:	7bf9      	ldrb	r1, [r7, #15]
   1ee5e:	68bb      	ldr	r3, [r7, #8]
   1ee60:	2003      	movs	r0, #3
   1ee62:	f7f3 f88c 	bl	11f7e <DmConnOpen>
   1ee66:	4603      	mov	r3, r0
   1ee68:	75fb      	strb	r3, [r7, #23]

  /* set up conn. control block */
  pCb = &appConnCb[connId - 1];
   1ee6a:	7dfb      	ldrb	r3, [r7, #23]
   1ee6c:	3b01      	subs	r3, #1
   1ee6e:	015b      	lsls	r3, r3, #5
   1ee70:	4a0f      	ldr	r2, [pc, #60]	; (1eeb0 <appConnOpen+0x68>)
   1ee72:	4413      	add	r3, r2
   1ee74:	613b      	str	r3, [r7, #16]
  pCb->connId = connId;
   1ee76:	693b      	ldr	r3, [r7, #16]
   1ee78:	7dfa      	ldrb	r2, [r7, #23]
   1ee7a:	711a      	strb	r2, [r3, #4]

  /* if database record handle is in use */
  if ((dbHdl != APP_DB_HDL_NONE) && AppDbRecordInUse(dbHdl))
   1ee7c:	687b      	ldr	r3, [r7, #4]
   1ee7e:	2b00      	cmp	r3, #0
   1ee80:	d009      	beq.n	1ee96 <appConnOpen+0x4e>
   1ee82:	6878      	ldr	r0, [r7, #4]
   1ee84:	f7fa fac6 	bl	19414 <AppDbRecordInUse>
   1ee88:	4603      	mov	r3, r0
   1ee8a:	2b00      	cmp	r3, #0
   1ee8c:	d003      	beq.n	1ee96 <appConnOpen+0x4e>
  {
    pCb->dbHdl = dbHdl;
   1ee8e:	693b      	ldr	r3, [r7, #16]
   1ee90:	687a      	ldr	r2, [r7, #4]
   1ee92:	601a      	str	r2, [r3, #0]
   1ee94:	e007      	b.n	1eea6 <appConnOpen+0x5e>
  }
  else
  {
    pCb->dbHdl = AppDbFindByAddr(addrType, pAddr);
   1ee96:	7bbb      	ldrb	r3, [r7, #14]
   1ee98:	68b9      	ldr	r1, [r7, #8]
   1ee9a:	4618      	mov	r0, r3
   1ee9c:	f7fa fb26 	bl	194ec <AppDbFindByAddr>
   1eea0:	4602      	mov	r2, r0
   1eea2:	693b      	ldr	r3, [r7, #16]
   1eea4:	601a      	str	r2, [r3, #0]
  }

  return connId;
   1eea6:	7dfb      	ldrb	r3, [r7, #23]
}
   1eea8:	4618      	mov	r0, r3
   1eeaa:	3718      	adds	r7, #24
   1eeac:	46bd      	mov	sp, r7
   1eeae:	bd80      	pop	{r7, pc}
   1eeb0:	10009ee4 	.word	0x10009ee4

0001eeb4 <AppMasterSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterSecurityReq(dmConnId_t connId)
{
   1eeb4:	b580      	push	{r7, lr}
   1eeb6:	b084      	sub	sp, #16
   1eeb8:	af00      	add	r7, sp, #0
   1eeba:	4603      	mov	r3, r0
   1eebc:	71fb      	strb	r3, [r7, #7]
  appConnCb_t *pCb;

  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[connId - 1];
   1eebe:	79fb      	ldrb	r3, [r7, #7]
   1eec0:	3b01      	subs	r3, #1
   1eec2:	015b      	lsls	r3, r3, #5
   1eec4:	4a0e      	ldr	r2, [pc, #56]	; (1ef00 <AppMasterSecurityReq+0x4c>)
   1eec6:	4413      	add	r3, r2
   1eec8:	60fb      	str	r3, [r7, #12]

  /* if master is not initiating security and not already secure */
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1eeca:	4b0e      	ldr	r3, [pc, #56]	; (1ef04 <AppMasterSecurityReq+0x50>)
   1eecc:	681b      	ldr	r3, [r3, #0]
   1eece:	791b      	ldrb	r3, [r3, #4]
   1eed0:	2b00      	cmp	r3, #0
   1eed2:	d110      	bne.n	1eef6 <AppMasterSecurityReq+0x42>
   1eed4:	68fb      	ldr	r3, [r7, #12]
   1eed6:	7a1b      	ldrb	r3, [r3, #8]
   1eed8:	2b00      	cmp	r3, #0
   1eeda:	d10c      	bne.n	1eef6 <AppMasterSecurityReq+0x42>
      (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE))
   1eedc:	79fb      	ldrb	r3, [r7, #7]
   1eede:	4618      	mov	r0, r3
   1eee0:	f7f0 fe20 	bl	fb24 <DmConnSecLevel>
   1eee4:	4603      	mov	r3, r0
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1eee6:	2b00      	cmp	r3, #0
   1eee8:	d105      	bne.n	1eef6 <AppMasterSecurityReq+0x42>
  {
    appMasterInitiateSec(connId, TRUE, pCb);
   1eeea:	79fb      	ldrb	r3, [r7, #7]
   1eeec:	68fa      	ldr	r2, [r7, #12]
   1eeee:	2101      	movs	r1, #1
   1eef0:	4618      	mov	r0, r3
   1eef2:	f7ff fb13 	bl	1e51c <appMasterInitiateSec>
  }
}
   1eef6:	bf00      	nop
   1eef8:	3710      	adds	r7, #16
   1eefa:	46bd      	mov	sp, r7
   1eefc:	bd80      	pop	{r7, pc}
   1eefe:	bf00      	nop
   1ef00:	10009ee4 	.word	0x10009ee4
   1ef04:	10009ed4 	.word	0x10009ed4

0001ef08 <AppMasterResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterResolveAddr(dmEvt_t *pMsg, appDbHdl_t dbHdl, uint8_t resolveType)
{
   1ef08:	b590      	push	{r4, r7, lr}
   1ef0a:	b089      	sub	sp, #36	; 0x24
   1ef0c:	af00      	add	r7, sp, #0
   1ef0e:	60f8      	str	r0, [r7, #12]
   1ef10:	60b9      	str	r1, [r7, #8]
   1ef12:	4613      	mov	r3, r2
   1ef14:	71fb      	strb	r3, [r7, #7]
  uint8_t    idx;

  /* if address resolution's in progress or scan record is not found */
  if ((appMasterCb.inProgress) || ((idx = appScanResultFind(pMsg)) >= APP_SCAN_RESULT_MAX))
   1ef16:	4b29      	ldr	r3, [pc, #164]	; (1efbc <AppMasterResolveAddr+0xb4>)
   1ef18:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ef1c:	2b00      	cmp	r3, #0
   1ef1e:	d149      	bne.n	1efb4 <AppMasterResolveAddr+0xac>
   1ef20:	68f8      	ldr	r0, [r7, #12]
   1ef22:	f7ff fbe7 	bl	1e6f4 <appScanResultFind>
   1ef26:	4603      	mov	r3, r0
   1ef28:	77fb      	strb	r3, [r7, #31]
   1ef2a:	7ffb      	ldrb	r3, [r7, #31]
   1ef2c:	2b09      	cmp	r3, #9
   1ef2e:	d841      	bhi.n	1efb4 <AppMasterResolveAddr+0xac>
  {
    return;
  }

  /* if asked to resolve direct address */
  if (resolveType == APP_RESOLVE_DIRECT_RPA)
   1ef30:	79fb      	ldrb	r3, [r7, #7]
   1ef32:	2b01      	cmp	r3, #1
   1ef34:	d117      	bne.n	1ef66 <AppMasterResolveAddr+0x5e>
  {
    /* reslove initiator's RPA to see if the directed advertisement is addressed to us */
    DmPrivResolveAddr(pMsg->scanReport.directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   1ef36:	68fb      	ldr	r3, [r7, #12]
   1ef38:	f103 0413 	add.w	r4, r3, #19
   1ef3c:	f7f1 fc3e 	bl	107bc <DmSecGetLocalIrk>
   1ef40:	4603      	mov	r3, r0
   1ef42:	2201      	movs	r2, #1
   1ef44:	4619      	mov	r1, r3
   1ef46:	4620      	mov	r0, r4
   1ef48:	f7f1 f904 	bl	10154 <DmPrivResolveAddr>

    /* store scan record index and database record handle for later */
    appMasterCb.idx = idx;
   1ef4c:	4a1b      	ldr	r2, [pc, #108]	; (1efbc <AppMasterResolveAddr+0xb4>)
   1ef4e:	7ffb      	ldrb	r3, [r7, #31]
   1ef50:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    appMasterCb.dbHdl = dbHdl;
   1ef54:	4a19      	ldr	r2, [pc, #100]	; (1efbc <AppMasterResolveAddr+0xb4>)
   1ef56:	68bb      	ldr	r3, [r7, #8]
   1ef58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    appMasterCb.inProgress = TRUE;
   1ef5c:	4b17      	ldr	r3, [pc, #92]	; (1efbc <AppMasterResolveAddr+0xb4>)
   1ef5e:	2201      	movs	r2, #1
   1ef60:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   1ef64:	e027      	b.n	1efb6 <AppMasterResolveAddr+0xae>
  }
  /* if asked to resolve advertiser's address */
  else if (resolveType == APP_RESOLVE_ADV_RPA)
   1ef66:	79fb      	ldrb	r3, [r7, #7]
   1ef68:	2b00      	cmp	r3, #0
   1ef6a:	d124      	bne.n	1efb6 <AppMasterResolveAddr+0xae>
  {
    dmSecKey_t *pPeerKey;
    appDbHdl_t hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1ef6c:	2000      	movs	r0, #0
   1ef6e:	f7fa f9eb 	bl	19348 <AppDbGetNextRecord>
   1ef72:	61b8      	str	r0, [r7, #24]

    /* if we have any bond records */
    if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1ef74:	69bb      	ldr	r3, [r7, #24]
   1ef76:	2b00      	cmp	r3, #0
   1ef78:	d01d      	beq.n	1efb6 <AppMasterResolveAddr+0xae>
   1ef7a:	2200      	movs	r2, #0
   1ef7c:	2104      	movs	r1, #4
   1ef7e:	69b8      	ldr	r0, [r7, #24]
   1ef80:	f7fa fb1c 	bl	195bc <AppDbGetKey>
   1ef84:	6178      	str	r0, [r7, #20]
   1ef86:	697b      	ldr	r3, [r7, #20]
   1ef88:	2b00      	cmp	r3, #0
   1ef8a:	d014      	beq.n	1efb6 <AppMasterResolveAddr+0xae>
    {
      /* reslove advertiser's RPA to see if we already have a bond with this device */
      DmPrivResolveAddr(pMsg->scanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1ef8c:	68fb      	ldr	r3, [r7, #12]
   1ef8e:	330c      	adds	r3, #12
   1ef90:	6979      	ldr	r1, [r7, #20]
   1ef92:	2200      	movs	r2, #0
   1ef94:	4618      	mov	r0, r3
   1ef96:	f7f1 f8dd 	bl	10154 <DmPrivResolveAddr>

      /* store scan record index and database record handle for later */
      appMasterCb.idx = idx;
   1ef9a:	4a08      	ldr	r2, [pc, #32]	; (1efbc <AppMasterResolveAddr+0xb4>)
   1ef9c:	7ffb      	ldrb	r3, [r7, #31]
   1ef9e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      appMasterCb.dbHdl = hdl;
   1efa2:	4a06      	ldr	r2, [pc, #24]	; (1efbc <AppMasterResolveAddr+0xb4>)
   1efa4:	69bb      	ldr	r3, [r7, #24]
   1efa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      appMasterCb.inProgress = TRUE;
   1efaa:	4b04      	ldr	r3, [pc, #16]	; (1efbc <AppMasterResolveAddr+0xb4>)
   1efac:	2201      	movs	r2, #1
   1efae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   1efb2:	e000      	b.n	1efb6 <AppMasterResolveAddr+0xae>
    return;
   1efb4:	bf00      	nop
    }
  }
}
   1efb6:	3724      	adds	r7, #36	; 0x24
   1efb8:	46bd      	mov	sp, r7
   1efba:	bd90      	pop	{r4, r7, pc}
   1efbc:	10009fe4 	.word	0x10009fe4

0001efc0 <appMasterScanMode>:
 *
 *  \return TRUE if legacy scanning mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appMasterScanMode(void)
{
   1efc0:	b580      	push	{r7, lr}
   1efc2:	af00      	add	r7, sp, #0
  /* legacy master app works with both DM legacy and extended scanning */

  /* if first time since last power-on or reset */
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1efc4:	4b0b      	ldr	r3, [pc, #44]	; (1eff4 <appMasterScanMode+0x34>)
   1efc6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   1efca:	2bff      	cmp	r3, #255	; 0xff
   1efcc:	d105      	bne.n	1efda <appMasterScanMode+0x1a>
  {
    /* set scanning mode to legacy */
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   1efce:	4b09      	ldr	r3, [pc, #36]	; (1eff4 <appMasterScanMode+0x34>)
   1efd0:	2200      	movs	r2, #0
   1efd2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

    return TRUE;
   1efd6:	2301      	movs	r3, #1
   1efd8:	e00a      	b.n	1eff0 <appMasterScanMode+0x30>
  }

  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   1efda:	4b06      	ldr	r3, [pc, #24]	; (1eff4 <appMasterScanMode+0x34>)
   1efdc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   1efe0:	2b00      	cmp	r3, #0
   1efe2:	d101      	bne.n	1efe8 <appMasterScanMode+0x28>
  {
    return TRUE;
   1efe4:	2301      	movs	r3, #1
   1efe6:	e003      	b.n	1eff0 <appMasterScanMode+0x30>
  }

  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   1efe8:	4803      	ldr	r0, [pc, #12]	; (1eff8 <appMasterScanMode+0x38>)
   1efea:	f7fc fc61 	bl	1b8b0 <WsfTrace>

  return FALSE;
   1efee:	2300      	movs	r3, #0
}
   1eff0:	4618      	mov	r0, r3
   1eff2:	bd80      	pop	{r7, pc}
   1eff4:	10009fe4 	.word	0x10009fe4
   1eff8:	00025b14 	.word	0x00025b14

0001effc <AppScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppScanStart(uint8_t mode, uint8_t scanType, uint16_t duration)
{
   1effc:	b580      	push	{r7, lr}
   1effe:	b084      	sub	sp, #16
   1f000:	af02      	add	r7, sp, #8
   1f002:	4603      	mov	r3, r0
   1f004:	71fb      	strb	r3, [r7, #7]
   1f006:	460b      	mov	r3, r1
   1f008:	71bb      	strb	r3, [r7, #6]
   1f00a:	4613      	mov	r3, r2
   1f00c:	80bb      	strh	r3, [r7, #4]
  if (appMasterScanMode())
   1f00e:	f7ff ffd7 	bl	1efc0 <appMasterScanMode>
   1f012:	4603      	mov	r3, r0
   1f014:	2b00      	cmp	r3, #0
   1f016:	d013      	beq.n	1f040 <AppScanStart+0x44>
  {
    DmScanSetInterval(HCI_SCAN_PHY_LE_1M_BIT, &pAppMasterCfg->scanInterval, &pAppMasterCfg->scanWindow);
   1f018:	4b0b      	ldr	r3, [pc, #44]	; (1f048 <AppScanStart+0x4c>)
   1f01a:	681b      	ldr	r3, [r3, #0]
   1f01c:	4619      	mov	r1, r3
   1f01e:	4b0a      	ldr	r3, [pc, #40]	; (1f048 <AppScanStart+0x4c>)
   1f020:	681b      	ldr	r3, [r3, #0]
   1f022:	3302      	adds	r3, #2
   1f024:	461a      	mov	r2, r3
   1f026:	2001      	movs	r0, #1
   1f028:	f7f1 f99a 	bl	10360 <DmScanSetInterval>

    DmScanStart(HCI_SCAN_PHY_LE_1M_BIT, mode, &scanType, TRUE, duration, 0);
   1f02c:	1dba      	adds	r2, r7, #6
   1f02e:	79f9      	ldrb	r1, [r7, #7]
   1f030:	2300      	movs	r3, #0
   1f032:	9301      	str	r3, [sp, #4]
   1f034:	88bb      	ldrh	r3, [r7, #4]
   1f036:	9300      	str	r3, [sp, #0]
   1f038:	2301      	movs	r3, #1
   1f03a:	2001      	movs	r0, #1
   1f03c:	f7f1 f950 	bl	102e0 <DmScanStart>
  }
}
   1f040:	bf00      	nop
   1f042:	3708      	adds	r7, #8
   1f044:	46bd      	mov	sp, r7
   1f046:	bd80      	pop	{r7, pc}
   1f048:	10009eb4 	.word	0x10009eb4

0001f04c <AppScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppScanStop(void)
{
   1f04c:	b580      	push	{r7, lr}
   1f04e:	af00      	add	r7, sp, #0
  if (appMasterScanMode())
   1f050:	f7ff ffb6 	bl	1efc0 <appMasterScanMode>
   1f054:	4603      	mov	r3, r0
   1f056:	2b00      	cmp	r3, #0
   1f058:	d005      	beq.n	1f066 <AppScanStop+0x1a>
  {
    /* stop address resolution */
    appMasterCb.inProgress = FALSE;
   1f05a:	4b04      	ldr	r3, [pc, #16]	; (1f06c <AppScanStop+0x20>)
   1f05c:	2200      	movs	r2, #0
   1f05e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

    DmScanStop();
   1f062:	f7f1 f96b 	bl	1033c <DmScanStop>
  }
}
   1f066:	bf00      	nop
   1f068:	bd80      	pop	{r7, pc}
   1f06a:	bf00      	nop
   1f06c:	10009fe4 	.word	0x10009fe4

0001f070 <AppConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t AppConnOpen(uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1f070:	b580      	push	{r7, lr}
   1f072:	b084      	sub	sp, #16
   1f074:	af00      	add	r7, sp, #0
   1f076:	4603      	mov	r3, r0
   1f078:	60b9      	str	r1, [r7, #8]
   1f07a:	607a      	str	r2, [r7, #4]
   1f07c:	73fb      	strb	r3, [r7, #15]
  if (appMasterScanMode())
   1f07e:	f7ff ff9f 	bl	1efc0 <appMasterScanMode>
   1f082:	4603      	mov	r3, r0
   1f084:	2b00      	cmp	r3, #0
   1f086:	d007      	beq.n	1f098 <AppConnOpen+0x28>
  {
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   1f088:	7bf9      	ldrb	r1, [r7, #15]
   1f08a:	687b      	ldr	r3, [r7, #4]
   1f08c:	68ba      	ldr	r2, [r7, #8]
   1f08e:	2001      	movs	r0, #1
   1f090:	f7ff feda 	bl	1ee48 <appConnOpen>
   1f094:	4603      	mov	r3, r0
   1f096:	e000      	b.n	1f09a <AppConnOpen+0x2a>
  }

  /* wrong connect mode */
  return DM_CONN_ID_NONE;
   1f098:	2300      	movs	r3, #0
}
   1f09a:	4618      	mov	r0, r3
   1f09c:	3710      	adds	r7, #16
   1f09e:	46bd      	mov	sp, r7
   1f0a0:	bd80      	pop	{r7, pc}

0001f0a2 <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   1f0a2:	b580      	push	{r7, lr}
   1f0a4:	b084      	sub	sp, #16
   1f0a6:	af00      	add	r7, sp, #0
   1f0a8:	4603      	mov	r3, r0
   1f0aa:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1f0ac:	79fb      	ldrb	r3, [r7, #7]
   1f0ae:	4618      	mov	r0, r3
   1f0b0:	f7ff f9be 	bl	1e430 <AppDbGetHdl>
   1f0b4:	60f8      	str	r0, [r7, #12]
   1f0b6:	68fb      	ldr	r3, [r7, #12]
   1f0b8:	2b00      	cmp	r3, #0
   1f0ba:	d017      	beq.n	1f0ec <appServerSetSigningInfo+0x4a>
   1f0bc:	2200      	movs	r2, #0
   1f0be:	2108      	movs	r1, #8
   1f0c0:	68f8      	ldr	r0, [r7, #12]
   1f0c2:	f7fa fa7b 	bl	195bc <AppDbGetKey>
   1f0c6:	60b8      	str	r0, [r7, #8]
   1f0c8:	68bb      	ldr	r3, [r7, #8]
   1f0ca:	2b00      	cmp	r3, #0
   1f0cc:	d00e      	beq.n	1f0ec <appServerSetSigningInfo+0x4a>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key);
   1f0ce:	68ba      	ldr	r2, [r7, #8]
   1f0d0:	79fb      	ldrb	r3, [r7, #7]
   1f0d2:	4611      	mov	r1, r2
   1f0d4:	4618      	mov	r0, r3
   1f0d6:	f7ef fcd7 	bl	ea88 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1f0da:	68f8      	ldr	r0, [r7, #12]
   1f0dc:	f7fa fb8e 	bl	197fc <AppDbGetPeerSignCounter>
   1f0e0:	4602      	mov	r2, r0
   1f0e2:	79fb      	ldrb	r3, [r7, #7]
   1f0e4:	4611      	mov	r1, r2
   1f0e6:	4618      	mov	r0, r3
   1f0e8:	f7ef fcd8 	bl	ea9c <AttsSetSignCounter>
  }
}
   1f0ec:	bf00      	nop
   1f0ee:	3710      	adds	r7, #16
   1f0f0:	46bd      	mov	sp, r7
   1f0f2:	bd80      	pop	{r7, pc}

0001f0f4 <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   1f0f4:	b580      	push	{r7, lr}
   1f0f6:	b084      	sub	sp, #16
   1f0f8:	af00      	add	r7, sp, #0
   1f0fa:	6078      	str	r0, [r7, #4]
  bool_t      bonded;
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   1f0fc:	687b      	ldr	r3, [r7, #4]
   1f0fe:	881b      	ldrh	r3, [r3, #0]
   1f100:	73fb      	strb	r3, [r7, #15]
  
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1f102:	687b      	ldr	r3, [r7, #4]
   1f104:	789b      	ldrb	r3, [r3, #2]
   1f106:	2b27      	cmp	r3, #39	; 0x27
   1f108:	d109      	bne.n	1f11e <AppServerConnCback+0x2a>
  {
    /* set up CCC table with uninitialized (all zero) values */
    AttsCccInitTable(connId, NULL);
   1f10a:	7bfb      	ldrb	r3, [r7, #15]
   1f10c:	2100      	movs	r1, #0
   1f10e:	4618      	mov	r0, r3
   1f110:	f7ee fabc 	bl	d68c <AttsCccInitTable>

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   1f114:	7bfb      	ldrb	r3, [r7, #15]
   1f116:	4618      	mov	r0, r3
   1f118:	f7ff ffc3 	bl	1f0a2 <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   1f11c:	e067      	b.n	1f1ee <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   1f11e:	687b      	ldr	r3, [r7, #4]
   1f120:	789b      	ldrb	r3, [r3, #2]
   1f122:	2b2a      	cmp	r3, #42	; 0x2a
   1f124:	d129      	bne.n	1f17a <AppServerConnCback+0x86>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   1f126:	687b      	ldr	r3, [r7, #4]
   1f128:	791b      	ldrb	r3, [r3, #4]
   1f12a:	f003 0301 	and.w	r3, r3, #1
   1f12e:	2b00      	cmp	r3, #0
   1f130:	bf14      	ite	ne
   1f132:	2301      	movne	r3, #1
   1f134:	2300      	moveq	r3, #0
   1f136:	b2db      	uxtb	r3, r3
   1f138:	73bb      	strb	r3, [r7, #14]
    if (bonded && (appCheckBonded(connId) == FALSE))
   1f13a:	7bbb      	ldrb	r3, [r7, #14]
   1f13c:	2b00      	cmp	r3, #0
   1f13e:	d017      	beq.n	1f170 <AppServerConnCback+0x7c>
   1f140:	7bfb      	ldrb	r3, [r7, #15]
   1f142:	4618      	mov	r0, r3
   1f144:	f7ff f868 	bl	1e218 <appCheckBonded>
   1f148:	4603      	mov	r3, r0
   1f14a:	2b00      	cmp	r3, #0
   1f14c:	d110      	bne.n	1f170 <AppServerConnCback+0x7c>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1f14e:	7bfb      	ldrb	r3, [r7, #15]
   1f150:	4618      	mov	r0, r3
   1f152:	f7ff f96d 	bl	1e430 <AppDbGetHdl>
   1f156:	60b8      	str	r0, [r7, #8]
   1f158:	68bb      	ldr	r3, [r7, #8]
   1f15a:	2b00      	cmp	r3, #0
   1f15c:	d008      	beq.n	1f170 <AppServerConnCback+0x7c>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1f15e:	68b8      	ldr	r0, [r7, #8]
   1f160:	f7fa faf2 	bl	19748 <AppDbGetCccTbl>
   1f164:	4602      	mov	r2, r0
   1f166:	7bfb      	ldrb	r3, [r7, #15]
   1f168:	4611      	mov	r1, r2
   1f16a:	4618      	mov	r0, r3
   1f16c:	f7ee fa8e 	bl	d68c <AttsCccInitTable>
    appServerSetSigningInfo(connId);
   1f170:	7bfb      	ldrb	r3, [r7, #15]
   1f172:	4618      	mov	r0, r3
   1f174:	f7ff ff95 	bl	1f0a2 <appServerSetSigningInfo>
}
   1f178:	e039      	b.n	1f1ee <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   1f17a:	687b      	ldr	r3, [r7, #4]
   1f17c:	789b      	ldrb	r3, [r3, #2]
   1f17e:	2b2c      	cmp	r3, #44	; 0x2c
   1f180:	d11c      	bne.n	1f1bc <AppServerConnCback+0xc8>
    if (pDmEvt->encryptInd.usingLtk && appCheckBondByLtk(connId))
   1f182:	687b      	ldr	r3, [r7, #4]
   1f184:	791b      	ldrb	r3, [r3, #4]
   1f186:	2b00      	cmp	r3, #0
   1f188:	d031      	beq.n	1f1ee <AppServerConnCback+0xfa>
   1f18a:	7bfb      	ldrb	r3, [r7, #15]
   1f18c:	4618      	mov	r0, r3
   1f18e:	f7ff f857 	bl	1e240 <appCheckBondByLtk>
   1f192:	4603      	mov	r3, r0
   1f194:	2b00      	cmp	r3, #0
   1f196:	d02a      	beq.n	1f1ee <AppServerConnCback+0xfa>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1f198:	7bfb      	ldrb	r3, [r7, #15]
   1f19a:	4618      	mov	r0, r3
   1f19c:	f7ff f948 	bl	1e430 <AppDbGetHdl>
   1f1a0:	60b8      	str	r0, [r7, #8]
   1f1a2:	68bb      	ldr	r3, [r7, #8]
   1f1a4:	2b00      	cmp	r3, #0
   1f1a6:	d022      	beq.n	1f1ee <AppServerConnCback+0xfa>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1f1a8:	68b8      	ldr	r0, [r7, #8]
   1f1aa:	f7fa facd 	bl	19748 <AppDbGetCccTbl>
   1f1ae:	4602      	mov	r2, r0
   1f1b0:	7bfb      	ldrb	r3, [r7, #15]
   1f1b2:	4611      	mov	r1, r2
   1f1b4:	4618      	mov	r0, r3
   1f1b6:	f7ee fa69 	bl	d68c <AttsCccInitTable>
}
   1f1ba:	e018      	b.n	1f1ee <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1f1bc:	687b      	ldr	r3, [r7, #4]
   1f1be:	789b      	ldrb	r3, [r3, #2]
   1f1c0:	2b28      	cmp	r3, #40	; 0x28
   1f1c2:	d114      	bne.n	1f1ee <AppServerConnCback+0xfa>
    AttsCccClearTable(connId);
   1f1c4:	7bfb      	ldrb	r3, [r7, #15]
   1f1c6:	4618      	mov	r0, r3
   1f1c8:	f7ee faa2 	bl	d710 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1f1cc:	7bfb      	ldrb	r3, [r7, #15]
   1f1ce:	4618      	mov	r0, r3
   1f1d0:	f7ff f92e 	bl	1e430 <AppDbGetHdl>
   1f1d4:	60b8      	str	r0, [r7, #8]
   1f1d6:	68bb      	ldr	r3, [r7, #8]
   1f1d8:	2b00      	cmp	r3, #0
   1f1da:	d008      	beq.n	1f1ee <AppServerConnCback+0xfa>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1f1dc:	7bfb      	ldrb	r3, [r7, #15]
   1f1de:	4618      	mov	r0, r3
   1f1e0:	f7ef fc64 	bl	eaac <AttsGetSignCounter>
   1f1e4:	4603      	mov	r3, r0
   1f1e6:	4619      	mov	r1, r3
   1f1e8:	68b8      	ldr	r0, [r7, #8]
   1f1ea:	f7fa fb14 	bl	19816 <AppDbSetPeerSignCounter>
}
   1f1ee:	bf00      	nop
   1f1f0:	3710      	adds	r7, #16
   1f1f2:	46bd      	mov	sp, r7
   1f1f4:	bd80      	pop	{r7, pc}
	...

0001f1f8 <appSlaveAdvModeInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
   1f1f8:	b480      	push	{r7}
   1f1fa:	af00      	add	r7, sp, #0
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   1f1fc:	4b05      	ldr	r3, [pc, #20]	; (1f214 <appSlaveAdvModeInit+0x1c>)
   1f1fe:	2200      	movs	r2, #0
   1f200:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   1f202:	4b04      	ldr	r3, [pc, #16]	; (1f214 <appSlaveAdvModeInit+0x1c>)
   1f204:	2200      	movs	r2, #0
   1f206:	645a      	str	r2, [r3, #68]	; 0x44
}
   1f208:	bf00      	nop
   1f20a:	46bd      	mov	sp, r7
   1f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f210:	4770      	bx	lr
   1f212:	bf00      	nop
   1f214:	1000a07c 	.word	0x1000a07c

0001f218 <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   1f218:	b480      	push	{r7}
   1f21a:	b085      	sub	sp, #20
   1f21c:	af00      	add	r7, sp, #0
   1f21e:	4603      	mov	r3, r0
   1f220:	6039      	str	r1, [r7, #0]
   1f222:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   1f224:	2300      	movs	r3, #0
   1f226:	73fb      	strb	r3, [r7, #15]
   1f228:	e022      	b.n	1f270 <appSlaveConnectableAdv+0x58>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1f22a:	2300      	movs	r3, #0
   1f22c:	73bb      	strb	r3, [r7, #14]
   1f22e:	e019      	b.n	1f264 <appSlaveConnectableAdv+0x4c>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
   1f230:	7bfb      	ldrb	r3, [r7, #15]
   1f232:	683a      	ldr	r2, [r7, #0]
   1f234:	4413      	add	r3, r2
   1f236:	781b      	ldrb	r3, [r3, #0]
   1f238:	7bba      	ldrb	r2, [r7, #14]
   1f23a:	429a      	cmp	r2, r3
   1f23c:	d10f      	bne.n	1f25e <appSlaveConnectableAdv+0x46>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1f23e:	7bbb      	ldrb	r3, [r7, #14]
   1f240:	4a11      	ldr	r2, [pc, #68]	; (1f288 <appSlaveConnectableAdv+0x70>)
   1f242:	4413      	add	r3, r2
   1f244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
      if ((pAdvHandles[i] == j)                            &&
   1f248:	2b00      	cmp	r3, #0
   1f24a:	d006      	beq.n	1f25a <appSlaveConnectableAdv+0x42>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   1f24c:	7bbb      	ldrb	r3, [r7, #14]
   1f24e:	4a0e      	ldr	r2, [pc, #56]	; (1f288 <appSlaveConnectableAdv+0x70>)
   1f250:	4413      	add	r3, r2
   1f252:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1f256:	2b05      	cmp	r3, #5
   1f258:	d101      	bne.n	1f25e <appSlaveConnectableAdv+0x46>
      {
        return TRUE;
   1f25a:	2301      	movs	r3, #1
   1f25c:	e00d      	b.n	1f27a <appSlaveConnectableAdv+0x62>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1f25e:	7bbb      	ldrb	r3, [r7, #14]
   1f260:	3301      	adds	r3, #1
   1f262:	73bb      	strb	r3, [r7, #14]
   1f264:	7bbb      	ldrb	r3, [r7, #14]
   1f266:	2b00      	cmp	r3, #0
   1f268:	d0e2      	beq.n	1f230 <appSlaveConnectableAdv+0x18>
  for (i = 0; i < numSets; i++)
   1f26a:	7bfb      	ldrb	r3, [r7, #15]
   1f26c:	3301      	adds	r3, #1
   1f26e:	73fb      	strb	r3, [r7, #15]
   1f270:	7bfa      	ldrb	r2, [r7, #15]
   1f272:	79fb      	ldrb	r3, [r7, #7]
   1f274:	429a      	cmp	r2, r3
   1f276:	d3d8      	bcc.n	1f22a <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   1f278:	2300      	movs	r3, #0
}
   1f27a:	4618      	mov	r0, r3
   1f27c:	3714      	adds	r7, #20
   1f27e:	46bd      	mov	sp, r7
   1f280:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f284:	4770      	bx	lr
   1f286:	bf00      	nop
   1f288:	1000a07c 	.word	0x1000a07c

0001f28c <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   1f28c:	b480      	push	{r7}
   1f28e:	b085      	sub	sp, #20
   1f290:	af00      	add	r7, sp, #0
   1f292:	4603      	mov	r3, r0
   1f294:	460a      	mov	r2, r1
   1f296:	71fb      	strb	r3, [r7, #7]
   1f298:	4613      	mov	r3, r2
   1f29a:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1f29c:	79bb      	ldrb	r3, [r7, #6]
   1f29e:	005b      	lsls	r3, r3, #1
   1f2a0:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1f2a2:	79bb      	ldrb	r3, [r7, #6]
   1f2a4:	005b      	lsls	r3, r3, #1
   1f2a6:	b2db      	uxtb	r3, r3
   1f2a8:	3301      	adds	r3, #1
   1f2aa:	73bb      	strb	r3, [r7, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1f2ac:	79fa      	ldrb	r2, [r7, #7]
   1f2ae:	7bfb      	ldrb	r3, [r7, #15]
   1f2b0:	490d      	ldr	r1, [pc, #52]	; (1f2e8 <appSlaveForceAdvDataSync+0x5c>)
   1f2b2:	0092      	lsls	r2, r2, #2
   1f2b4:	4413      	add	r3, r2
   1f2b6:	3310      	adds	r3, #16
   1f2b8:	2200      	movs	r2, #0
   1f2ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1f2be:	79fa      	ldrb	r2, [r7, #7]
   1f2c0:	7bbb      	ldrb	r3, [r7, #14]
   1f2c2:	4909      	ldr	r1, [pc, #36]	; (1f2e8 <appSlaveForceAdvDataSync+0x5c>)
   1f2c4:	0092      	lsls	r2, r2, #2
   1f2c6:	4413      	add	r3, r2
   1f2c8:	3310      	adds	r3, #16
   1f2ca:	2200      	movs	r2, #0
   1f2cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1f2d0:	79fb      	ldrb	r3, [r7, #7]
   1f2d2:	4a05      	ldr	r2, [pc, #20]	; (1f2e8 <appSlaveForceAdvDataSync+0x5c>)
   1f2d4:	4413      	add	r3, r2
   1f2d6:	2200      	movs	r2, #0
   1f2d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   1f2dc:	bf00      	nop
   1f2de:	3714      	adds	r7, #20
   1f2e0:	46bd      	mov	sp, r7
   1f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f2e6:	4770      	bx	lr
   1f2e8:	1000a07c 	.word	0x1000a07c

0001f2ec <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   1f2ec:	b5b0      	push	{r4, r5, r7, lr}
   1f2ee:	b088      	sub	sp, #32
   1f2f0:	af02      	add	r7, sp, #8
   1f2f2:	4603      	mov	r3, r0
   1f2f4:	460a      	mov	r2, r1
   1f2f6:	71fb      	strb	r3, [r7, #7]
   1f2f8:	4613      	mov	r3, r2
   1f2fa:	71bb      	strb	r3, [r7, #6]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   1f2fc:	2301      	movs	r3, #1
   1f2fe:	747b      	strb	r3, [r7, #17]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1f300:	79fa      	ldrb	r2, [r7, #7]
   1f302:	79bb      	ldrb	r3, [r7, #6]
   1f304:	493a      	ldr	r1, [pc, #232]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f306:	0092      	lsls	r2, r2, #2
   1f308:	4413      	add	r3, r2
   1f30a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1f30e:	60fb      	str	r3, [r7, #12]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1f310:	79fa      	ldrb	r2, [r7, #7]
   1f312:	79bb      	ldrb	r3, [r7, #6]
   1f314:	4936      	ldr	r1, [pc, #216]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f316:	0092      	lsls	r2, r2, #2
   1f318:	4413      	add	r3, r2
   1f31a:	3308      	adds	r3, #8
   1f31c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1f320:	79f9      	ldrb	r1, [r7, #7]
   1f322:	79bb      	ldrb	r3, [r7, #6]
   1f324:	4832      	ldr	r0, [pc, #200]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f326:	0089      	lsls	r1, r1, #2
   1f328:	440b      	add	r3, r1
   1f32a:	3310      	adds	r3, #16
   1f32c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1f330:	1ad3      	subs	r3, r2, r3
   1f332:	827b      	strh	r3, [r7, #18]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1f334:	79fb      	ldrb	r3, [r7, #7]
   1f336:	4a2e      	ldr	r2, [pc, #184]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f338:	3314      	adds	r3, #20
   1f33a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1f33e:	8a7a      	ldrh	r2, [r7, #18]
   1f340:	429a      	cmp	r2, r3
   1f342:	d94e      	bls.n	1f3e2 <appSetAdvScanDataFrag+0xf6>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   1f344:	79fb      	ldrb	r3, [r7, #7]
   1f346:	4a2a      	ldr	r2, [pc, #168]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f348:	3314      	adds	r3, #20
   1f34a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1f34e:	827b      	strh	r3, [r7, #18]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1f350:	e047      	b.n	1f3e2 <appSetAdvScanDataFrag+0xf6>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1f352:	8a7b      	ldrh	r3, [r7, #18]
   1f354:	2bfb      	cmp	r3, #251	; 0xfb
   1f356:	d909      	bls.n	1f36c <appSetAdvScanDataFrag+0x80>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1f358:	23fb      	movs	r3, #251	; 0xfb
   1f35a:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   1f35c:	7c7b      	ldrb	r3, [r7, #17]
   1f35e:	2b00      	cmp	r3, #0
   1f360:	bf14      	ite	ne
   1f362:	2301      	movne	r3, #1
   1f364:	2300      	moveq	r3, #0
   1f366:	b2db      	uxtb	r3, r3
   1f368:	75fb      	strb	r3, [r7, #23]
   1f36a:	e008      	b.n	1f37e <appSetAdvScanDataFrag+0x92>
      
    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   1f36c:	8a7b      	ldrh	r3, [r7, #18]
   1f36e:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1f370:	7c7b      	ldrb	r3, [r7, #17]
   1f372:	2b00      	cmp	r3, #0
   1f374:	d001      	beq.n	1f37a <appSetAdvScanDataFrag+0x8e>
   1f376:	2303      	movs	r3, #3
   1f378:	e000      	b.n	1f37c <appSetAdvScanDataFrag+0x90>
   1f37a:	2302      	movs	r3, #2
   1f37c:	75fb      	strb	r3, [r7, #23]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1f37e:	79bb      	ldrb	r3, [r7, #6]
   1f380:	f003 0301 	and.w	r3, r3, #1
   1f384:	b2dc      	uxtb	r4, r3
   1f386:	8abb      	ldrh	r3, [r7, #20]
   1f388:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   1f38a:	79fa      	ldrb	r2, [r7, #7]
   1f38c:	79bb      	ldrb	r3, [r7, #6]
   1f38e:	4918      	ldr	r1, [pc, #96]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f390:	0092      	lsls	r2, r2, #2
   1f392:	4413      	add	r3, r2
   1f394:	3310      	adds	r3, #16
   1f396:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1f39a:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1f39c:	68fb      	ldr	r3, [r7, #12]
   1f39e:	4413      	add	r3, r2
   1f3a0:	7df9      	ldrb	r1, [r7, #23]
   1f3a2:	79f8      	ldrb	r0, [r7, #7]
   1f3a4:	9300      	str	r3, [sp, #0]
   1f3a6:	462b      	mov	r3, r5
   1f3a8:	4622      	mov	r2, r4
   1f3aa:	f7ef fd67 	bl	ee7c <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1f3ae:	79fa      	ldrb	r2, [r7, #7]
   1f3b0:	79bb      	ldrb	r3, [r7, #6]
   1f3b2:	79f8      	ldrb	r0, [r7, #7]
   1f3b4:	79b9      	ldrb	r1, [r7, #6]
   1f3b6:	4c0e      	ldr	r4, [pc, #56]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f3b8:	0080      	lsls	r0, r0, #2
   1f3ba:	4401      	add	r1, r0
   1f3bc:	3110      	adds	r1, #16
   1f3be:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   1f3c2:	8ab9      	ldrh	r1, [r7, #20]
   1f3c4:	4401      	add	r1, r0
   1f3c6:	b288      	uxth	r0, r1
   1f3c8:	4909      	ldr	r1, [pc, #36]	; (1f3f0 <appSetAdvScanDataFrag+0x104>)
   1f3ca:	0092      	lsls	r2, r2, #2
   1f3cc:	4413      	add	r3, r2
   1f3ce:	3310      	adds	r3, #16
   1f3d0:	4602      	mov	r2, r0
   1f3d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   1f3d6:	8a7a      	ldrh	r2, [r7, #18]
   1f3d8:	8abb      	ldrh	r3, [r7, #20]
   1f3da:	1ad3      	subs	r3, r2, r3
   1f3dc:	827b      	strh	r3, [r7, #18]
    firstFrag = FALSE;
   1f3de:	2300      	movs	r3, #0
   1f3e0:	747b      	strb	r3, [r7, #17]
  while (remainLen > 0)
   1f3e2:	8a7b      	ldrh	r3, [r7, #18]
   1f3e4:	2b00      	cmp	r3, #0
   1f3e6:	d1b4      	bne.n	1f352 <appSetAdvScanDataFrag+0x66>
  }
}
   1f3e8:	bf00      	nop
   1f3ea:	3718      	adds	r7, #24
   1f3ec:	46bd      	mov	sp, r7
   1f3ee:	bdb0      	pop	{r4, r5, r7, pc}
   1f3f0:	1000a07c 	.word	0x1000a07c

0001f3f4 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   1f3f4:	b580      	push	{r7, lr}
   1f3f6:	b084      	sub	sp, #16
   1f3f8:	af00      	add	r7, sp, #0
   1f3fa:	4603      	mov	r3, r0
   1f3fc:	460a      	mov	r2, r1
   1f3fe:	71fb      	strb	r3, [r7, #7]
   1f400:	4613      	mov	r3, r2
   1f402:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1f404:	79bb      	ldrb	r3, [r7, #6]
   1f406:	005b      	lsls	r3, r3, #1
   1f408:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1f40a:	79bb      	ldrb	r3, [r7, #6]
   1f40c:	005b      	lsls	r3, r3, #1
   1f40e:	b2db      	uxtb	r3, r3
   1f410:	3301      	adds	r3, #1
   1f412:	73bb      	strb	r3, [r7, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1f414:	79fa      	ldrb	r2, [r7, #7]
   1f416:	7bfb      	ldrb	r3, [r7, #15]
   1f418:	492d      	ldr	r1, [pc, #180]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f41a:	0092      	lsls	r2, r2, #2
   1f41c:	4413      	add	r3, r2
   1f41e:	3310      	adds	r3, #16
   1f420:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1f424:	79f9      	ldrb	r1, [r7, #7]
   1f426:	7bfb      	ldrb	r3, [r7, #15]
   1f428:	4829      	ldr	r0, [pc, #164]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f42a:	0089      	lsls	r1, r1, #2
   1f42c:	440b      	add	r3, r1
   1f42e:	3308      	adds	r3, #8
   1f430:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1f434:	429a      	cmp	r2, r3
   1f436:	d205      	bcs.n	1f444 <appSetAdvScanData+0x50>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   1f438:	7bfa      	ldrb	r2, [r7, #15]
   1f43a:	79fb      	ldrb	r3, [r7, #7]
   1f43c:	4611      	mov	r1, r2
   1f43e:	4618      	mov	r0, r3
   1f440:	f7ff ff54 	bl	1f2ec <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1f444:	79fa      	ldrb	r2, [r7, #7]
   1f446:	7bbb      	ldrb	r3, [r7, #14]
   1f448:	4921      	ldr	r1, [pc, #132]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f44a:	0092      	lsls	r2, r2, #2
   1f44c:	4413      	add	r3, r2
   1f44e:	3310      	adds	r3, #16
   1f450:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1f454:	79f9      	ldrb	r1, [r7, #7]
   1f456:	7bbb      	ldrb	r3, [r7, #14]
   1f458:	481d      	ldr	r0, [pc, #116]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f45a:	0089      	lsls	r1, r1, #2
   1f45c:	440b      	add	r3, r1
   1f45e:	3308      	adds	r3, #8
   1f460:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1f464:	429a      	cmp	r2, r3
   1f466:	d205      	bcs.n	1f474 <appSetAdvScanData+0x80>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1f468:	7bba      	ldrb	r2, [r7, #14]
   1f46a:	79fb      	ldrb	r3, [r7, #7]
   1f46c:	4611      	mov	r1, r2
   1f46e:	4618      	mov	r0, r3
   1f470:	f7ff ff3c 	bl	1f2ec <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1f474:	79fa      	ldrb	r2, [r7, #7]
   1f476:	7bfb      	ldrb	r3, [r7, #15]
   1f478:	4915      	ldr	r1, [pc, #84]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f47a:	0092      	lsls	r2, r2, #2
   1f47c:	4413      	add	r3, r2
   1f47e:	3310      	adds	r3, #16
   1f480:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1f484:	79f9      	ldrb	r1, [r7, #7]
   1f486:	7bfb      	ldrb	r3, [r7, #15]
   1f488:	4811      	ldr	r0, [pc, #68]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f48a:	0089      	lsls	r1, r1, #2
   1f48c:	440b      	add	r3, r1
   1f48e:	3308      	adds	r3, #8
   1f490:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1f494:	429a      	cmp	r2, r3
   1f496:	d317      	bcc.n	1f4c8 <appSetAdvScanData+0xd4>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1f498:	79fa      	ldrb	r2, [r7, #7]
   1f49a:	7bbb      	ldrb	r3, [r7, #14]
   1f49c:	490c      	ldr	r1, [pc, #48]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f49e:	0092      	lsls	r2, r2, #2
   1f4a0:	4413      	add	r3, r2
   1f4a2:	3310      	adds	r3, #16
   1f4a4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1f4a8:	79f9      	ldrb	r1, [r7, #7]
   1f4aa:	7bbb      	ldrb	r3, [r7, #14]
   1f4ac:	4808      	ldr	r0, [pc, #32]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f4ae:	0089      	lsls	r1, r1, #2
   1f4b0:	440b      	add	r3, r1
   1f4b2:	3308      	adds	r3, #8
   1f4b4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1f4b8:	429a      	cmp	r2, r3
   1f4ba:	d305      	bcc.n	1f4c8 <appSetAdvScanData+0xd4>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1f4bc:	79fb      	ldrb	r3, [r7, #7]
   1f4be:	4a04      	ldr	r2, [pc, #16]	; (1f4d0 <appSetAdvScanData+0xdc>)
   1f4c0:	4413      	add	r3, r2
   1f4c2:	2201      	movs	r2, #1
   1f4c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1f4c8:	bf00      	nop
   1f4ca:	3710      	adds	r7, #16
   1f4cc:	46bd      	mov	sp, r7
   1f4ce:	bd80      	pop	{r7, pc}
   1f4d0:	1000a07c 	.word	0x1000a07c

0001f4d4 <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   1f4d4:	b580      	push	{r7, lr}
   1f4d6:	b084      	sub	sp, #16
   1f4d8:	af00      	add	r7, sp, #0
   1f4da:	4603      	mov	r3, r0
   1f4dc:	71fb      	strb	r3, [r7, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1f4de:	79fb      	ldrb	r3, [r7, #7]
   1f4e0:	3b01      	subs	r3, #1
   1f4e2:	015b      	lsls	r3, r3, #5
   1f4e4:	4a0d      	ldr	r2, [pc, #52]	; (1f51c <appConnUpdateTimerStart+0x48>)
   1f4e6:	4413      	add	r3, r2
   1f4e8:	60fb      	str	r3, [r7, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   1f4ea:	4b0d      	ldr	r3, [pc, #52]	; (1f520 <appConnUpdateTimerStart+0x4c>)
   1f4ec:	781a      	ldrb	r2, [r3, #0]
   1f4ee:	68fb      	ldr	r3, [r7, #12]
   1f4f0:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1f4f2:	68fb      	ldr	r3, [r7, #12]
   1f4f4:	2210      	movs	r2, #16
   1f4f6:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   1f4f8:	79fb      	ldrb	r3, [r7, #7]
   1f4fa:	b29a      	uxth	r2, r3
   1f4fc:	68fb      	ldr	r3, [r7, #12]
   1f4fe:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1f500:	68fb      	ldr	r3, [r7, #12]
   1f502:	f103 0210 	add.w	r2, r3, #16
   1f506:	4b07      	ldr	r3, [pc, #28]	; (1f524 <appConnUpdateTimerStart+0x50>)
   1f508:	681b      	ldr	r3, [r3, #0]
   1f50a:	681b      	ldr	r3, [r3, #0]
   1f50c:	4619      	mov	r1, r3
   1f50e:	4610      	mov	r0, r2
   1f510:	f7fb fbd8 	bl	1acc4 <WsfTimerStartMs>
}
   1f514:	bf00      	nop
   1f516:	3710      	adds	r7, #16
   1f518:	46bd      	mov	sp, r7
   1f51a:	bd80      	pop	{r7, pc}
   1f51c:	10009ee4 	.word	0x10009ee4
   1f520:	10009ed0 	.word	0x10009ed0
   1f524:	10009eb8 	.word	0x10009eb8

0001f528 <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   1f528:	b580      	push	{r7, lr}
   1f52a:	b082      	sub	sp, #8
   1f52c:	af00      	add	r7, sp, #0
   1f52e:	6078      	str	r0, [r7, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   1f530:	4b06      	ldr	r3, [pc, #24]	; (1f54c <appConnUpdateTimerStop+0x24>)
   1f532:	681b      	ldr	r3, [r3, #0]
   1f534:	681b      	ldr	r3, [r3, #0]
   1f536:	2b00      	cmp	r3, #0
   1f538:	d004      	beq.n	1f544 <appConnUpdateTimerStop+0x1c>
  {
    WsfTimerStop(&pCb->updateTimer);
   1f53a:	687b      	ldr	r3, [r7, #4]
   1f53c:	3310      	adds	r3, #16
   1f53e:	4618      	mov	r0, r3
   1f540:	f7fb fbd4 	bl	1acec <WsfTimerStop>
  }  
}
   1f544:	bf00      	nop
   1f546:	3708      	adds	r7, #8
   1f548:	46bd      	mov	sp, r7
   1f54a:	bd80      	pop	{r7, pc}
   1f54c:	10009eb8 	.word	0x10009eb8

0001f550 <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   1f550:	b580      	push	{r7, lr}
   1f552:	b084      	sub	sp, #16
   1f554:	af00      	add	r7, sp, #0
   1f556:	6078      	str	r0, [r7, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   1f558:	4b16      	ldr	r3, [pc, #88]	; (1f5b4 <appSlaveResolveAddr+0x64>)
   1f55a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1f55e:	2b00      	cmp	r3, #0
   1f560:	d124      	bne.n	1f5ac <appSlaveResolveAddr+0x5c>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1f562:	2000      	movs	r0, #0
   1f564:	f7f9 fef0 	bl	19348 <AppDbGetNextRecord>
   1f568:	60f8      	str	r0, [r7, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1f56a:	68fb      	ldr	r3, [r7, #12]
   1f56c:	2b00      	cmp	r3, #0
   1f56e:	d01e      	beq.n	1f5ae <appSlaveResolveAddr+0x5e>
   1f570:	2200      	movs	r2, #0
   1f572:	2104      	movs	r1, #4
   1f574:	68f8      	ldr	r0, [r7, #12]
   1f576:	f7fa f821 	bl	195bc <AppDbGetKey>
   1f57a:	60b8      	str	r0, [r7, #8]
   1f57c:	68bb      	ldr	r3, [r7, #8]
   1f57e:	2b00      	cmp	r3, #0
   1f580:	d015      	beq.n	1f5ae <appSlaveResolveAddr+0x5e>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   1f582:	687b      	ldr	r3, [r7, #4]
   1f584:	f103 000a 	add.w	r0, r3, #10
   1f588:	68b9      	ldr	r1, [r7, #8]
   1f58a:	687b      	ldr	r3, [r7, #4]
   1f58c:	881b      	ldrh	r3, [r3, #0]
   1f58e:	461a      	mov	r2, r3
   1f590:	f7f0 fde0 	bl	10154 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   1f594:	4a07      	ldr	r2, [pc, #28]	; (1f5b4 <appSlaveResolveAddr+0x64>)
   1f596:	68fb      	ldr	r3, [r7, #12]
   1f598:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   1f59a:	4b06      	ldr	r3, [pc, #24]	; (1f5b4 <appSlaveResolveAddr+0x64>)
   1f59c:	2201      	movs	r2, #1
   1f59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   1f5a2:	4b04      	ldr	r3, [pc, #16]	; (1f5b4 <appSlaveResolveAddr+0x64>)
   1f5a4:	2200      	movs	r2, #0
   1f5a6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1f5aa:	e000      	b.n	1f5ae <appSlaveResolveAddr+0x5e>
    return;
   1f5ac:	bf00      	nop
  }
}
   1f5ae:	3710      	adds	r7, #16
   1f5b0:	46bd      	mov	sp, r7
   1f5b2:	bd80      	pop	{r7, pc}
   1f5b4:	1000a07c 	.word	0x1000a07c

0001f5b8 <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   1f5b8:	b580      	push	{r7, lr}
   1f5ba:	b084      	sub	sp, #16
   1f5bc:	af00      	add	r7, sp, #0
   1f5be:	6078      	str	r0, [r7, #4]
  dmSecKey_t  *pKey = NULL;
   1f5c0:	2300      	movs	r3, #0
   1f5c2:	60fb      	str	r3, [r7, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f5c4:	687b      	ldr	r3, [r7, #4]
   1f5c6:	681b      	ldr	r3, [r3, #0]
   1f5c8:	2b00      	cmp	r3, #0
   1f5ca:	d008      	beq.n	1f5de <appSecRspLtk+0x26>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1f5cc:	687b      	ldr	r3, [r7, #4]
   1f5ce:	681b      	ldr	r3, [r3, #0]
   1f5d0:	f107 020b 	add.w	r2, r7, #11
   1f5d4:	2101      	movs	r1, #1
   1f5d6:	4618      	mov	r0, r3
   1f5d8:	f7f9 fff0 	bl	195bc <AppDbGetKey>
   1f5dc:	60f8      	str	r0, [r7, #12]
  }

  if (pKey != NULL)
   1f5de:	68fb      	ldr	r3, [r7, #12]
   1f5e0:	2b00      	cmp	r3, #0
   1f5e2:	d011      	beq.n	1f608 <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   1f5e4:	687b      	ldr	r3, [r7, #4]
   1f5e6:	795b      	ldrb	r3, [r3, #5]
   1f5e8:	2b00      	cmp	r3, #0
   1f5ea:	bf0c      	ite	eq
   1f5ec:	2301      	moveq	r3, #1
   1f5ee:	2300      	movne	r3, #0
   1f5f0:	b2db      	uxtb	r3, r3
   1f5f2:	461a      	mov	r2, r3
   1f5f4:	687b      	ldr	r3, [r7, #4]
   1f5f6:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1f5f8:	687b      	ldr	r3, [r7, #4]
   1f5fa:	7918      	ldrb	r0, [r3, #4]
   1f5fc:	7afa      	ldrb	r2, [r7, #11]
   1f5fe:	68fb      	ldr	r3, [r7, #12]
   1f600:	2101      	movs	r1, #1
   1f602:	f7f1 fa22 	bl	10a4a <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   1f606:	e009      	b.n	1f61c <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   1f608:	687b      	ldr	r3, [r7, #4]
   1f60a:	2200      	movs	r2, #0
   1f60c:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1f60e:	687b      	ldr	r3, [r7, #4]
   1f610:	7918      	ldrb	r0, [r3, #4]
   1f612:	2300      	movs	r3, #0
   1f614:	2200      	movs	r2, #0
   1f616:	2100      	movs	r1, #0
   1f618:	f7f1 fa17 	bl	10a4a <DmSecLtkRsp>
}
   1f61c:	bf00      	nop
   1f61e:	3710      	adds	r7, #16
   1f620:	46bd      	mov	sp, r7
   1f622:	bd80      	pop	{r7, pc}

0001f624 <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f624:	b580      	push	{r7, lr}
   1f626:	b082      	sub	sp, #8
   1f628:	af00      	add	r7, sp, #0
   1f62a:	6078      	str	r0, [r7, #4]
   1f62c:	6039      	str	r1, [r7, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   1f62e:	6839      	ldr	r1, [r7, #0]
   1f630:	6878      	ldr	r0, [r7, #4]
   1f632:	f000 f83f 	bl	1f6b4 <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   1f636:	4b06      	ldr	r3, [pc, #24]	; (1f650 <appSlaveConnOpen+0x2c>)
   1f638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f63a:	2b00      	cmp	r3, #0
   1f63c:	d003      	beq.n	1f646 <appSlaveConnOpen+0x22>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   1f63e:	4b04      	ldr	r3, [pc, #16]	; (1f650 <appSlaveConnOpen+0x2c>)
   1f640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f642:	6878      	ldr	r0, [r7, #4]
   1f644:	4798      	blx	r3
  }
}
   1f646:	bf00      	nop
   1f648:	3708      	adds	r7, #8
   1f64a:	46bd      	mov	sp, r7
   1f64c:	bd80      	pop	{r7, pc}
   1f64e:	bf00      	nop
   1f650:	1000a07c 	.word	0x1000a07c

0001f654 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f654:	b580      	push	{r7, lr}
   1f656:	b084      	sub	sp, #16
   1f658:	af00      	add	r7, sp, #0
   1f65a:	6078      	str	r0, [r7, #4]
   1f65c:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   1f65e:	683b      	ldr	r3, [r7, #0]
   1f660:	681b      	ldr	r3, [r3, #0]
   1f662:	4618      	mov	r0, r3
   1f664:	f7fe ff2e 	bl	1e4c4 <AppUpdatePrivacyMode>

  /* if actually advertising has timed out (for high duty cycle connectable directed advertising) */
  if (pMsg->hdr.status == HCI_ERR_ADV_TIMEOUT)
   1f668:	687b      	ldr	r3, [r7, #4]
   1f66a:	78db      	ldrb	r3, [r3, #3]
   1f66c:	2b3c      	cmp	r3, #60	; 0x3c
   1f66e:	d10f      	bne.n	1f690 <appSlaveConnClose+0x3c>
  {
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1f670:	2300      	movs	r3, #0
   1f672:	73fb      	strb	r3, [r7, #15]
   1f674:	e008      	b.n	1f688 <appSlaveConnClose+0x34>
    {
      /* done advertising */
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1f676:	7bfb      	ldrb	r3, [r7, #15]
   1f678:	4a0d      	ldr	r2, [pc, #52]	; (1f6b0 <appSlaveConnClose+0x5c>)
   1f67a:	4413      	add	r3, r2
   1f67c:	2203      	movs	r2, #3
   1f67e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1f682:	7bfb      	ldrb	r3, [r7, #15]
   1f684:	3301      	adds	r3, #1
   1f686:	73fb      	strb	r3, [r7, #15]
   1f688:	7bfb      	ldrb	r3, [r7, #15]
   1f68a:	2b00      	cmp	r3, #0
   1f68c:	d0f3      	beq.n	1f676 <appSlaveConnClose+0x22>
    {
      /* restart advertising */
      (*appSlaveCb.advRestartCback)(pMsg);
    }
  }
}
   1f68e:	e00b      	b.n	1f6a8 <appSlaveConnClose+0x54>
    appSlaveProcConnClose(pMsg, pCb);
   1f690:	6839      	ldr	r1, [r7, #0]
   1f692:	6878      	ldr	r0, [r7, #4]
   1f694:	f000 f84a 	bl	1f72c <appSlaveProcConnClose>
    if (appSlaveCb.advRestartCback != NULL)
   1f698:	4b05      	ldr	r3, [pc, #20]	; (1f6b0 <appSlaveConnClose+0x5c>)
   1f69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f69c:	2b00      	cmp	r3, #0
   1f69e:	d003      	beq.n	1f6a8 <appSlaveConnClose+0x54>
      (*appSlaveCb.advRestartCback)(pMsg);
   1f6a0:	4b03      	ldr	r3, [pc, #12]	; (1f6b0 <appSlaveConnClose+0x5c>)
   1f6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f6a4:	6878      	ldr	r0, [r7, #4]
   1f6a6:	4798      	blx	r3
}
   1f6a8:	bf00      	nop
   1f6aa:	3710      	adds	r7, #16
   1f6ac:	46bd      	mov	sp, r7
   1f6ae:	bd80      	pop	{r7, pc}
   1f6b0:	1000a07c 	.word	0x1000a07c

0001f6b4 <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{ 
   1f6b4:	b580      	push	{r7, lr}
   1f6b6:	b082      	sub	sp, #8
   1f6b8:	af00      	add	r7, sp, #0
   1f6ba:	6078      	str	r0, [r7, #4]
   1f6bc:	6039      	str	r1, [r7, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   1f6be:	687b      	ldr	r3, [r7, #4]
   1f6c0:	881b      	ldrh	r3, [r3, #0]
   1f6c2:	b2da      	uxtb	r2, r3
   1f6c4:	683b      	ldr	r3, [r7, #0]
   1f6c6:	711a      	strb	r2, [r3, #4]
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1f6c8:	4b17      	ldr	r3, [pc, #92]	; (1f728 <appSlaveProcConnOpen+0x74>)
   1f6ca:	681b      	ldr	r3, [r3, #0]
   1f6cc:	681b      	ldr	r3, [r3, #0]
   1f6ce:	2b00      	cmp	r3, #0
   1f6d0:	d026      	beq.n	1f720 <appSlaveProcConnOpen+0x6c>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1f6d2:	687b      	ldr	r3, [r7, #4]
   1f6d4:	8a1a      	ldrh	r2, [r3, #16]
   1f6d6:	4b14      	ldr	r3, [pc, #80]	; (1f728 <appSlaveProcConnOpen+0x74>)
   1f6d8:	681b      	ldr	r3, [r3, #0]
   1f6da:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1f6dc:	429a      	cmp	r2, r3
   1f6de:	d314      	bcc.n	1f70a <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1f6e0:	687b      	ldr	r3, [r7, #4]
   1f6e2:	8a1a      	ldrh	r2, [r3, #16]
   1f6e4:	4b10      	ldr	r3, [pc, #64]	; (1f728 <appSlaveProcConnOpen+0x74>)
   1f6e6:	681b      	ldr	r3, [r3, #0]
   1f6e8:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1f6ea:	429a      	cmp	r2, r3
   1f6ec:	d80d      	bhi.n	1f70a <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1f6ee:	687b      	ldr	r3, [r7, #4]
   1f6f0:	8a5a      	ldrh	r2, [r3, #18]
   1f6f2:	4b0d      	ldr	r3, [pc, #52]	; (1f728 <appSlaveProcConnOpen+0x74>)
   1f6f4:	681b      	ldr	r3, [r3, #0]
   1f6f6:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1f6f8:	429a      	cmp	r2, r3
   1f6fa:	d106      	bne.n	1f70a <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   1f6fc:	687b      	ldr	r3, [r7, #4]
   1f6fe:	8a9a      	ldrh	r2, [r3, #20]
   1f700:	4b09      	ldr	r3, [pc, #36]	; (1f728 <appSlaveProcConnOpen+0x74>)
   1f702:	681b      	ldr	r3, [r3, #0]
   1f704:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1f706:	429a      	cmp	r2, r3
   1f708:	d00a      	beq.n	1f720 <appSlaveProcConnOpen+0x6c>
  {
    pCb->connWasIdle = FALSE;
   1f70a:	683b      	ldr	r3, [r7, #0]
   1f70c:	2200      	movs	r2, #0
   1f70e:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   1f710:	683b      	ldr	r3, [r7, #0]
   1f712:	2200      	movs	r2, #0
   1f714:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   1f716:	683b      	ldr	r3, [r7, #0]
   1f718:	791b      	ldrb	r3, [r3, #4]
   1f71a:	4618      	mov	r0, r3
   1f71c:	f7ff feda 	bl	1f4d4 <appConnUpdateTimerStart>
  }
}
   1f720:	bf00      	nop
   1f722:	3708      	adds	r7, #8
   1f724:	46bd      	mov	sp, r7
   1f726:	bd80      	pop	{r7, pc}
   1f728:	10009eb8 	.word	0x10009eb8

0001f72c <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f72c:	b580      	push	{r7, lr}
   1f72e:	b084      	sub	sp, #16
   1f730:	af00      	add	r7, sp, #0
   1f732:	6078      	str	r0, [r7, #4]
   1f734:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   1f736:	6838      	ldr	r0, [r7, #0]
   1f738:	f7ff fef6 	bl	1f528 <appConnUpdateTimerStop>
  
  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   1f73c:	683b      	ldr	r3, [r7, #0]
   1f73e:	2200      	movs	r2, #0
   1f740:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   1f742:	683b      	ldr	r3, [r7, #0]
   1f744:	2200      	movs	r2, #0
   1f746:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   1f748:	4b10      	ldr	r3, [pc, #64]	; (1f78c <appSlaveProcConnClose+0x60>)
   1f74a:	2200      	movs	r2, #0
   1f74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   1f750:	683b      	ldr	r3, [r7, #0]
   1f752:	7a5b      	ldrb	r3, [r3, #9]
   1f754:	2b00      	cmp	r3, #0
   1f756:	d014      	beq.n	1f782 <appSlaveProcConnClose+0x56>
  {
    pCb->setConnectable = FALSE;
   1f758:	683b      	ldr	r3, [r7, #0]
   1f75a:	2200      	movs	r2, #0
   1f75c:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1f75e:	4b0b      	ldr	r3, [pc, #44]	; (1f78c <appSlaveProcConnClose+0x60>)
   1f760:	2200      	movs	r2, #0
   1f762:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    
    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1f766:	2300      	movs	r3, #0
   1f768:	73fb      	strb	r3, [r7, #15]
   1f76a:	e007      	b.n	1f77c <appSlaveProcConnClose+0x50>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   1f76c:	7bfb      	ldrb	r3, [r7, #15]
   1f76e:	2100      	movs	r1, #0
   1f770:	4618      	mov	r0, r3
   1f772:	f7ff fd8b 	bl	1f28c <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1f776:	7bfb      	ldrb	r3, [r7, #15]
   1f778:	3301      	adds	r3, #1
   1f77a:	73fb      	strb	r3, [r7, #15]
   1f77c:	7bfb      	ldrb	r3, [r7, #15]
   1f77e:	2b00      	cmp	r3, #0
   1f780:	d0f4      	beq.n	1f76c <appSlaveProcConnClose+0x40>
    }
  }
}
   1f782:	bf00      	nop
   1f784:	3710      	adds	r7, #16
   1f786:	46bd      	mov	sp, r7
   1f788:	bd80      	pop	{r7, pc}
   1f78a:	bf00      	nop
   1f78c:	1000a07c 	.word	0x1000a07c

0001f790 <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f790:	b580      	push	{r7, lr}
   1f792:	b082      	sub	sp, #8
   1f794:	af00      	add	r7, sp, #0
   1f796:	6078      	str	r0, [r7, #4]
   1f798:	6039      	str	r1, [r7, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   1f79a:	4b1a      	ldr	r3, [pc, #104]	; (1f804 <appSlaveConnUpdate+0x74>)
   1f79c:	681b      	ldr	r3, [r3, #0]
   1f79e:	681b      	ldr	r3, [r3, #0]
   1f7a0:	2b00      	cmp	r3, #0
   1f7a2:	d02b      	beq.n	1f7fc <appSlaveConnUpdate+0x6c>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   1f7a4:	687b      	ldr	r3, [r7, #4]
   1f7a6:	78db      	ldrb	r3, [r3, #3]
   1f7a8:	2b00      	cmp	r3, #0
   1f7aa:	d117      	bne.n	1f7dc <appSlaveConnUpdate+0x4c>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   1f7ac:	4b15      	ldr	r3, [pc, #84]	; (1f804 <appSlaveConnUpdate+0x74>)
   1f7ae:	681b      	ldr	r3, [r3, #0]
   1f7b0:	889a      	ldrh	r2, [r3, #4]
   1f7b2:	687b      	ldr	r3, [r7, #4]
   1f7b4:	891b      	ldrh	r3, [r3, #8]
   1f7b6:	429a      	cmp	r2, r3
   1f7b8:	d80a      	bhi.n	1f7d0 <appSlaveConnUpdate+0x40>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   1f7ba:	4b12      	ldr	r3, [pc, #72]	; (1f804 <appSlaveConnUpdate+0x74>)
   1f7bc:	681b      	ldr	r3, [r3, #0]
   1f7be:	88da      	ldrh	r2, [r3, #6]
   1f7c0:	687b      	ldr	r3, [r7, #4]
   1f7c2:	891b      	ldrh	r3, [r3, #8]
   1f7c4:	429a      	cmp	r2, r3
   1f7c6:	d303      	bcc.n	1f7d0 <appSlaveConnUpdate+0x40>
      {
        appConnUpdateTimerStop(pCb);
   1f7c8:	6838      	ldr	r0, [r7, #0]
   1f7ca:	f7ff fead 	bl	1f528 <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   1f7ce:	e015      	b.n	1f7fc <appSlaveConnUpdate+0x6c>
        appConnUpdateTimerStart(pCb->connId);
   1f7d0:	683b      	ldr	r3, [r7, #0]
   1f7d2:	791b      	ldrb	r3, [r3, #4]
   1f7d4:	4618      	mov	r0, r3
   1f7d6:	f7ff fe7d 	bl	1f4d4 <appConnUpdateTimerStart>
}
   1f7da:	e00f      	b.n	1f7fc <appSlaveConnUpdate+0x6c>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   1f7dc:	687b      	ldr	r3, [r7, #4]
   1f7de:	78db      	ldrb	r3, [r3, #3]
   1f7e0:	2b0c      	cmp	r3, #12
   1f7e2:	d00b      	beq.n	1f7fc <appSlaveConnUpdate+0x6c>
   1f7e4:	683b      	ldr	r3, [r7, #0]
   1f7e6:	7b1a      	ldrb	r2, [r3, #12]
   1f7e8:	4b06      	ldr	r3, [pc, #24]	; (1f804 <appSlaveConnUpdate+0x74>)
   1f7ea:	681b      	ldr	r3, [r3, #0]
   1f7ec:	7b1b      	ldrb	r3, [r3, #12]
   1f7ee:	429a      	cmp	r2, r3
   1f7f0:	d204      	bcs.n	1f7fc <appSlaveConnUpdate+0x6c>
      appConnUpdateTimerStart(pCb->connId);
   1f7f2:	683b      	ldr	r3, [r7, #0]
   1f7f4:	791b      	ldrb	r3, [r3, #4]
   1f7f6:	4618      	mov	r0, r3
   1f7f8:	f7ff fe6c 	bl	1f4d4 <appConnUpdateTimerStart>
}
   1f7fc:	bf00      	nop
   1f7fe:	3708      	adds	r7, #8
   1f800:	46bd      	mov	sp, r7
   1f802:	bd80      	pop	{r7, pc}
   1f804:	10009eb8 	.word	0x10009eb8

0001f808 <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f808:	b580      	push	{r7, lr}
   1f80a:	b084      	sub	sp, #16
   1f80c:	af00      	add	r7, sp, #0
   1f80e:	6078      	str	r0, [r7, #4]
   1f810:	6039      	str	r1, [r7, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   1f812:	4b27      	ldr	r3, [pc, #156]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1f818:	2b00      	cmp	r3, #0
   1f81a:	d044      	beq.n	1f8a6 <appSlaveResolvedAddrInd+0x9e>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   1f81c:	687b      	ldr	r3, [r7, #4]
   1f81e:	78db      	ldrb	r3, [r3, #3]
   1f820:	2b00      	cmp	r3, #0
   1f822:	d110      	bne.n	1f846 <appSlaveResolvedAddrInd+0x3e>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   1f824:	4b22      	ldr	r3, [pc, #136]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f828:	683b      	ldr	r3, [r7, #0]
   1f82a:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   1f82c:	4b20      	ldr	r3, [pc, #128]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f82e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   1f832:	2b00      	cmp	r3, #0
   1f834:	d032      	beq.n	1f89c <appSlaveResolvedAddrInd+0x94>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   1f836:	6838      	ldr	r0, [r7, #0]
   1f838:	f7ff febe 	bl	1f5b8 <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   1f83c:	4b1c      	ldr	r3, [pc, #112]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f83e:	2200      	movs	r2, #0
   1f840:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1f844:	e02a      	b.n	1f89c <appSlaveResolvedAddrInd+0x94>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1f846:	687b      	ldr	r3, [r7, #4]
   1f848:	78db      	ldrb	r3, [r3, #3]
   1f84a:	2b05      	cmp	r3, #5
   1f84c:	d126      	bne.n	1f89c <appSlaveResolvedAddrInd+0x94>
   1f84e:	4b18      	ldr	r3, [pc, #96]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f852:	2b00      	cmp	r3, #0
   1f854:	d022      	beq.n	1f89c <appSlaveResolvedAddrInd+0x94>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   1f856:	4b16      	ldr	r3, [pc, #88]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f85a:	4618      	mov	r0, r3
   1f85c:	f7f9 fd74 	bl	19348 <AppDbGetNextRecord>
   1f860:	4602      	mov	r2, r0
   1f862:	4b13      	ldr	r3, [pc, #76]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f864:	639a      	str	r2, [r3, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1f866:	4b12      	ldr	r3, [pc, #72]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1f86a:	2b00      	cmp	r3, #0
   1f86c:	d016      	beq.n	1f89c <appSlaveResolvedAddrInd+0x94>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1f86e:	4b10      	ldr	r3, [pc, #64]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1f872:	2200      	movs	r2, #0
   1f874:	2104      	movs	r1, #4
   1f876:	4618      	mov	r0, r3
   1f878:	f7f9 fea0 	bl	195bc <AppDbGetKey>
   1f87c:	60f8      	str	r0, [r7, #12]
   1f87e:	68fb      	ldr	r3, [r7, #12]
   1f880:	2b00      	cmp	r3, #0
   1f882:	d00b      	beq.n	1f89c <appSlaveResolvedAddrInd+0x94>
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   1f884:	683b      	ldr	r3, [r7, #0]
   1f886:	791b      	ldrb	r3, [r3, #4]
   1f888:	4618      	mov	r0, r3
   1f88a:	f7f0 f91b 	bl	fac4 <DmConnPeerAddr>
   1f88e:	68f9      	ldr	r1, [r7, #12]
   1f890:	687b      	ldr	r3, [r7, #4]
   1f892:	881b      	ldrh	r3, [r3, #0]
   1f894:	461a      	mov	r2, r3
   1f896:	f7f0 fc5d 	bl	10154 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1f89a:	e005      	b.n	1f8a8 <appSlaveResolvedAddrInd+0xa0>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   1f89c:	4b04      	ldr	r3, [pc, #16]	; (1f8b0 <appSlaveResolvedAddrInd+0xa8>)
   1f89e:	2200      	movs	r2, #0
   1f8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   1f8a4:	e000      	b.n	1f8a8 <appSlaveResolvedAddrInd+0xa0>
    return;
   1f8a6:	bf00      	nop
}
   1f8a8:	3710      	adds	r7, #16
   1f8aa:	46bd      	mov	sp, r7
   1f8ac:	bd80      	pop	{r7, pc}
   1f8ae:	bf00      	nop
   1f8b0:	1000a07c 	.word	0x1000a07c

0001f8b4 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f8b4:	b580      	push	{r7, lr}
   1f8b6:	b086      	sub	sp, #24
   1f8b8:	af00      	add	r7, sp, #0
   1f8ba:	6078      	str	r0, [r7, #4]
   1f8bc:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1f8be:	4b16      	ldr	r3, [pc, #88]	; (1f918 <appSlaveRemoteConnParamReq+0x64>)
   1f8c0:	681b      	ldr	r3, [r3, #0]
   1f8c2:	781b      	ldrb	r3, [r3, #0]
   1f8c4:	2b00      	cmp	r3, #0
   1f8c6:	d118      	bne.n	1f8fa <appSlaveRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1f8c8:	687b      	ldr	r3, [r7, #4]
   1f8ca:	88db      	ldrh	r3, [r3, #6]
   1f8cc:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   1f8ce:	687b      	ldr	r3, [r7, #4]
   1f8d0:	891b      	ldrh	r3, [r3, #8]
   1f8d2:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   1f8d4:	687b      	ldr	r3, [r7, #4]
   1f8d6:	895b      	ldrh	r3, [r3, #10]
   1f8d8:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   1f8da:	687b      	ldr	r3, [r7, #4]
   1f8dc:	899b      	ldrh	r3, [r3, #12]
   1f8de:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1f8e0:	2300      	movs	r3, #0
   1f8e2:	82fb      	strh	r3, [r7, #22]
   1f8e4:	8afb      	ldrh	r3, [r7, #22]
   1f8e6:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1f8e8:	683b      	ldr	r3, [r7, #0]
   1f8ea:	791b      	ldrb	r3, [r3, #4]
   1f8ec:	f107 020c 	add.w	r2, r7, #12
   1f8f0:	4611      	mov	r1, r2
   1f8f2:	4618      	mov	r0, r3
   1f8f4:	f7f0 f85e 	bl	f9b4 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   1f8f8:	e00a      	b.n	1f910 <appSlaveRemoteConnParamReq+0x5c>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1f8fa:	4b07      	ldr	r3, [pc, #28]	; (1f918 <appSlaveRemoteConnParamReq+0x64>)
   1f8fc:	681b      	ldr	r3, [r3, #0]
   1f8fe:	781b      	ldrb	r3, [r3, #0]
   1f900:	2b01      	cmp	r3, #1
   1f902:	d105      	bne.n	1f910 <appSlaveRemoteConnParamReq+0x5c>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1f904:	683b      	ldr	r3, [r7, #0]
   1f906:	791b      	ldrb	r3, [r3, #4]
   1f908:	2111      	movs	r1, #17
   1f90a:	4618      	mov	r0, r3
   1f90c:	f7f0 f86e 	bl	f9ec <DmRemoteConnParamReqNegReply>
}
   1f910:	bf00      	nop
   1f912:	3718      	adds	r7, #24
   1f914:	46bd      	mov	sp, r7
   1f916:	bd80      	pop	{r7, pc}
   1f918:	10002c70 	.word	0x10002c70

0001f91c <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f91c:	b580      	push	{r7, lr}
   1f91e:	b082      	sub	sp, #8
   1f920:	af00      	add	r7, sp, #0
   1f922:	6078      	str	r0, [r7, #4]
   1f924:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  // don't reset bonded flag.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   1f926:	683b      	ldr	r3, [r7, #0]
   1f928:	2200      	movs	r2, #0
   1f92a:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   1f92c:	683b      	ldr	r3, [r7, #0]
   1f92e:	2200      	movs	r2, #0
   1f930:	71da      	strb	r2, [r3, #7]
    
  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1f932:	687b      	ldr	r3, [r7, #4]
   1f934:	7a5a      	ldrb	r2, [r3, #9]
   1f936:	687b      	ldr	r3, [r7, #4]
   1f938:	330a      	adds	r3, #10
   1f93a:	4619      	mov	r1, r3
   1f93c:	4610      	mov	r0, r2
   1f93e:	f7f9 fdd5 	bl	194ec <AppDbFindByAddr>
   1f942:	4602      	mov	r2, r0
   1f944:	683b      	ldr	r3, [r7, #0]
   1f946:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1f948:	683b      	ldr	r3, [r7, #0]
   1f94a:	681b      	ldr	r3, [r3, #0]
   1f94c:	2b00      	cmp	r3, #0
   1f94e:	d10c      	bne.n	1f96a <appSlaveSecConnOpen+0x4e>
   1f950:	687b      	ldr	r3, [r7, #4]
   1f952:	7a5b      	ldrb	r3, [r3, #9]
   1f954:	2b01      	cmp	r3, #1
   1f956:	d108      	bne.n	1f96a <appSlaveSecConnOpen+0x4e>
   1f958:	687b      	ldr	r3, [r7, #4]
   1f95a:	7bdb      	ldrb	r3, [r3, #15]
   1f95c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f960:	2b40      	cmp	r3, #64	; 0x40
   1f962:	d102      	bne.n	1f96a <appSlaveSecConnOpen+0x4e>
  {
    /* reslove master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   1f964:	6878      	ldr	r0, [r7, #4]
   1f966:	f7ff fdf3 	bl	1f550 <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1f96a:	4b0c      	ldr	r3, [pc, #48]	; (1f99c <appSlaveSecConnOpen+0x80>)
   1f96c:	681b      	ldr	r3, [r3, #0]
   1f96e:	791b      	ldrb	r3, [r3, #4]
   1f970:	2b00      	cmp	r3, #0
   1f972:	d00e      	beq.n	1f992 <appSlaveSecConnOpen+0x76>
   1f974:	f7f9 fd7a 	bl	1946c <AppDbCheckBonded>
   1f978:	4603      	mov	r3, r0
   1f97a:	2b00      	cmp	r3, #0
   1f97c:	d009      	beq.n	1f992 <appSlaveSecConnOpen+0x76>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1f97e:	687b      	ldr	r3, [r7, #4]
   1f980:	881b      	ldrh	r3, [r3, #0]
   1f982:	b2da      	uxtb	r2, r3
   1f984:	4b05      	ldr	r3, [pc, #20]	; (1f99c <appSlaveSecConnOpen+0x80>)
   1f986:	681b      	ldr	r3, [r3, #0]
   1f988:	781b      	ldrb	r3, [r3, #0]
   1f98a:	4619      	mov	r1, r3
   1f98c:	4610      	mov	r0, r2
   1f98e:	f7f1 f84c 	bl	10a2a <DmSecSlaveReq>
  }
}
   1f992:	bf00      	nop
   1f994:	3708      	adds	r7, #8
   1f996:	46bd      	mov	sp, r7
   1f998:	bd80      	pop	{r7, pc}
   1f99a:	bf00      	nop
   1f99c:	10009ed4 	.word	0x10009ed4

0001f9a0 <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f9a0:	b580      	push	{r7, lr}
   1f9a2:	b082      	sub	sp, #8
   1f9a4:	af00      	add	r7, sp, #0
   1f9a6:	6078      	str	r0, [r7, #4]
   1f9a8:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f9aa:	683b      	ldr	r3, [r7, #0]
   1f9ac:	681b      	ldr	r3, [r3, #0]
   1f9ae:	2b00      	cmp	r3, #0
   1f9b0:	d004      	beq.n	1f9bc <appSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   1f9b2:	683b      	ldr	r3, [r7, #0]
   1f9b4:	681b      	ldr	r3, [r3, #0]
   1f9b6:	4618      	mov	r0, r3
   1f9b8:	f7f9 fd1c 	bl	193f4 <AppDbCheckValidRecord>
  }
}
   1f9bc:	bf00      	nop
   1f9be:	3708      	adds	r7, #8
   1f9c0:	46bd      	mov	sp, r7
   1f9c2:	bd80      	pop	{r7, pc}

0001f9c4 <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1f9c4:	b590      	push	{r4, r7, lr}
   1f9c6:	b087      	sub	sp, #28
   1f9c8:	af02      	add	r7, sp, #8
   1f9ca:	6078      	str	r0, [r7, #4]
   1f9cc:	6039      	str	r1, [r7, #0]
  uint8_t rKeyDist;
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   1f9ce:	4b3f      	ldr	r3, [pc, #252]	; (1facc <appSecPairInd+0x108>)
   1f9d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1f9d4:	2b00      	cmp	r3, #0
   1f9d6:	d111      	bne.n	1f9fc <appSecPairInd+0x38>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1f9d8:	687b      	ldr	r3, [r7, #4]
   1f9da:	791b      	ldrb	r3, [r3, #4]
   1f9dc:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   1f9e0:	2b00      	cmp	r3, #0
   1f9e2:	d00b      	beq.n	1f9fc <appSecPairInd+0x38>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1f9e4:	683b      	ldr	r3, [r7, #0]
   1f9e6:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1f9e8:	2b00      	cmp	r3, #0
   1f9ea:	d064      	beq.n	1fab6 <appSecPairInd+0xf2>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1f9ec:	683b      	ldr	r3, [r7, #0]
   1f9ee:	791b      	ldrb	r3, [r3, #4]
   1f9f0:	4618      	mov	r0, r3
   1f9f2:	f7f0 f897 	bl	fb24 <DmConnSecLevel>
   1f9f6:	4603      	mov	r3, r0
   1f9f8:	2b00      	cmp	r3, #0
   1f9fa:	d15c      	bne.n	1fab6 <appSecPairInd+0xf2>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1f9fc:	687b      	ldr	r3, [r7, #4]
   1f9fe:	791a      	ldrb	r2, [r3, #4]
   1fa00:	4b33      	ldr	r3, [pc, #204]	; (1fad0 <appSecPairInd+0x10c>)
   1fa02:	681b      	ldr	r3, [r3, #0]
   1fa04:	781b      	ldrb	r3, [r3, #0]
   1fa06:	4013      	ands	r3, r2
   1fa08:	b2db      	uxtb	r3, r3
   1fa0a:	f003 0301 	and.w	r3, r3, #1
   1fa0e:	2b00      	cmp	r3, #0
   1fa10:	bf14      	ite	ne
   1fa12:	2301      	movne	r3, #1
   1fa14:	2300      	moveq	r3, #0
   1fa16:	b2db      	uxtb	r3, r3
   1fa18:	461a      	mov	r2, r3
   1fa1a:	683b      	ldr	r3, [r7, #0]
   1fa1c:	71da      	strb	r2, [r3, #7]
    
    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1fa1e:	683b      	ldr	r3, [r7, #0]
   1fa20:	79db      	ldrb	r3, [r3, #7]
   1fa22:	2b00      	cmp	r3, #0
   1fa24:	d017      	beq.n	1fa56 <appSecPairInd+0x92>
   1fa26:	683b      	ldr	r3, [r7, #0]
   1fa28:	681b      	ldr	r3, [r3, #0]
   1fa2a:	2b00      	cmp	r3, #0
   1fa2c:	d113      	bne.n	1fa56 <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId));
   1fa2e:	683b      	ldr	r3, [r7, #0]
   1fa30:	791b      	ldrb	r3, [r3, #4]
   1fa32:	4618      	mov	r0, r3
   1fa34:	f7f0 f83c 	bl	fab0 <DmConnPeerAddrType>
   1fa38:	4603      	mov	r3, r0
   1fa3a:	461c      	mov	r4, r3
   1fa3c:	683b      	ldr	r3, [r7, #0]
   1fa3e:	791b      	ldrb	r3, [r3, #4]
   1fa40:	4618      	mov	r0, r3
   1fa42:	f7f0 f83f 	bl	fac4 <DmConnPeerAddr>
   1fa46:	4603      	mov	r3, r0
   1fa48:	4619      	mov	r1, r3
   1fa4a:	4620      	mov	r0, r4
   1fa4c:	f7f9 fc2a 	bl	192a4 <AppDbNewRecord>
   1fa50:	4602      	mov	r2, r0
   1fa52:	683b      	ldr	r3, [r7, #0]
   1fa54:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   1fa56:	683b      	ldr	r3, [r7, #0]
   1fa58:	2200      	movs	r2, #0
   1fa5a:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   1fa5c:	4b1c      	ldr	r3, [pc, #112]	; (1fad0 <appSecPairInd+0x10c>)
   1fa5e:	681b      	ldr	r3, [r3, #0]
   1fa60:	789b      	ldrb	r3, [r3, #2]
   1fa62:	73bb      	strb	r3, [r7, #14]
    iKeyDist = pAppSecCfg->iKeyDist;
   1fa64:	4b1a      	ldr	r3, [pc, #104]	; (1fad0 <appSecPairInd+0x10c>)
   1fa66:	681b      	ldr	r3, [r3, #0]
   1fa68:	785b      	ldrb	r3, [r3, #1]
   1fa6a:	73fb      	strb	r3, [r7, #15]
    
    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1fa6c:	683b      	ldr	r3, [r7, #0]
   1fa6e:	791b      	ldrb	r3, [r3, #4]
   1fa70:	4618      	mov	r0, r3
   1fa72:	f7f0 f81d 	bl	fab0 <DmConnPeerAddrType>
   1fa76:	4603      	mov	r3, r0
   1fa78:	2b01      	cmp	r3, #1
   1fa7a:	d103      	bne.n	1fa84 <appSecPairInd+0xc0>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   1fa7c:	7bfb      	ldrb	r3, [r7, #15]
   1fa7e:	f043 0302 	orr.w	r3, r3, #2
   1fa82:	73fb      	strb	r3, [r7, #15]
    }
    
    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   1fa84:	687b      	ldr	r3, [r7, #4]
   1fa86:	79da      	ldrb	r2, [r3, #7]
   1fa88:	7bbb      	ldrb	r3, [r7, #14]
   1fa8a:	4013      	ands	r3, r2
   1fa8c:	73bb      	strb	r3, [r7, #14]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   1fa8e:	687b      	ldr	r3, [r7, #4]
   1fa90:	799a      	ldrb	r2, [r3, #6]
   1fa92:	7bfb      	ldrb	r3, [r7, #15]
   1fa94:	4013      	ands	r3, r2
   1fa96:	73fb      	strb	r3, [r7, #15]
    
    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1fa98:	683b      	ldr	r3, [r7, #0]
   1fa9a:	7918      	ldrb	r0, [r3, #4]
   1fa9c:	4b0c      	ldr	r3, [pc, #48]	; (1fad0 <appSecPairInd+0x10c>)
   1fa9e:	681b      	ldr	r3, [r3, #0]
   1faa0:	78d9      	ldrb	r1, [r3, #3]
   1faa2:	4b0b      	ldr	r3, [pc, #44]	; (1fad0 <appSecPairInd+0x10c>)
   1faa4:	681b      	ldr	r3, [r3, #0]
   1faa6:	781a      	ldrb	r2, [r3, #0]
   1faa8:	7bfc      	ldrb	r4, [r7, #15]
   1faaa:	7bbb      	ldrb	r3, [r7, #14]
   1faac:	9300      	str	r3, [sp, #0]
   1faae:	4623      	mov	r3, r4
   1fab0:	f7f0 ff9c 	bl	109ec <DmSecPairRsp>
   1fab4:	e005      	b.n	1fac2 <appSecPairInd+0xfe>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   1fab6:	683b      	ldr	r3, [r7, #0]
   1fab8:	791b      	ldrb	r3, [r3, #4]
   1faba:	2105      	movs	r1, #5
   1fabc:	4618      	mov	r0, r3
   1fabe:	f7f0 fe25 	bl	1070c <DmSecCancelReq>
  }
}
   1fac2:	bf00      	nop
   1fac4:	3714      	adds	r7, #20
   1fac6:	46bd      	mov	sp, r7
   1fac8:	bd90      	pop	{r4, r7, pc}
   1faca:	bf00      	nop
   1facc:	1000a07c 	.word	0x1000a07c
   1fad0:	10009ed4 	.word	0x10009ed4

0001fad4 <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1fad4:	b580      	push	{r7, lr}
   1fad6:	b082      	sub	sp, #8
   1fad8:	af00      	add	r7, sp, #0
   1fada:	6078      	str	r0, [r7, #4]
   1fadc:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1fade:	683b      	ldr	r3, [r7, #0]
   1fae0:	79db      	ldrb	r3, [r3, #7]
   1fae2:	2b00      	cmp	r3, #0
   1fae4:	d012      	beq.n	1fb0c <appSecStoreKey+0x38>
   1fae6:	683b      	ldr	r3, [r7, #0]
   1fae8:	681b      	ldr	r3, [r3, #0]
   1faea:	2b00      	cmp	r3, #0
   1faec:	d00e      	beq.n	1fb0c <appSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1faee:	683b      	ldr	r3, [r7, #0]
   1faf0:	7ada      	ldrb	r2, [r3, #11]
   1faf2:	687b      	ldr	r3, [r7, #4]
   1faf4:	7f9b      	ldrb	r3, [r3, #30]
   1faf6:	4313      	orrs	r3, r2
   1faf8:	b2da      	uxtb	r2, r3
   1fafa:	683b      	ldr	r3, [r7, #0]
   1fafc:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1fafe:	683b      	ldr	r3, [r7, #0]
   1fb00:	681b      	ldr	r3, [r3, #0]
   1fb02:	687a      	ldr	r2, [r7, #4]
   1fb04:	4611      	mov	r1, r2
   1fb06:	4618      	mov	r0, r3
   1fb08:	f7f9 fda2 	bl	19650 <AppDbSetKey>
  }
}
   1fb0c:	bf00      	nop
   1fb0e:	3708      	adds	r7, #8
   1fb10:	46bd      	mov	sp, r7
   1fb12:	bd80      	pop	{r7, pc}

0001fb14 <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1fb14:	b580      	push	{r7, lr}
   1fb16:	b082      	sub	sp, #8
   1fb18:	af00      	add	r7, sp, #0
   1fb1a:	6078      	str	r0, [r7, #4]
   1fb1c:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   1fb1e:	683b      	ldr	r3, [r7, #0]
   1fb20:	79db      	ldrb	r3, [r3, #7]
   1fb22:	2b00      	cmp	r3, #0
   1fb24:	d024      	beq.n	1fb70 <appSecPairCmpl+0x5c>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   1fb26:	683b      	ldr	r3, [r7, #0]
   1fb28:	2201      	movs	r2, #1
   1fb2a:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1fb2c:	683b      	ldr	r3, [r7, #0]
   1fb2e:	681b      	ldr	r3, [r3, #0]
   1fb30:	2b00      	cmp	r3, #0
   1fb32:	d007      	beq.n	1fb44 <appSecPairCmpl+0x30>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1fb34:	683b      	ldr	r3, [r7, #0]
   1fb36:	681a      	ldr	r2, [r3, #0]
   1fb38:	683b      	ldr	r3, [r7, #0]
   1fb3a:	7adb      	ldrb	r3, [r3, #11]
   1fb3c:	4619      	mov	r1, r3
   1fb3e:	4610      	mov	r0, r2
   1fb40:	f7f9 fc44 	bl	193cc <AppDbValidateRecord>
    }    

    /* if bonded clear bondable mode */
    appSlaveCb.bondable = FALSE;
   1fb44:	4b0c      	ldr	r3, [pc, #48]	; (1fb78 <appSecPairCmpl+0x64>)
   1fb46:	2200      	movs	r2, #0
   1fb48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    
    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   1fb4c:	4b0a      	ldr	r3, [pc, #40]	; (1fb78 <appSecPairCmpl+0x64>)
   1fb4e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1fb52:	2b01      	cmp	r3, #1
   1fb54:	d102      	bne.n	1fb5c <appSecPairCmpl+0x48>
    {
      pCb->setConnectable = TRUE;
   1fb56:	683b      	ldr	r3, [r7, #0]
   1fb58:	2201      	movs	r2, #1
   1fb5a:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1fb5c:	683b      	ldr	r3, [r7, #0]
   1fb5e:	681b      	ldr	r3, [r3, #0]
   1fb60:	2b00      	cmp	r3, #0
   1fb62:	d005      	beq.n	1fb70 <appSecPairCmpl+0x5c>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   1fb64:	683b      	ldr	r3, [r7, #0]
   1fb66:	791b      	ldrb	r3, [r3, #4]
   1fb68:	4619      	mov	r1, r3
   1fb6a:	6878      	ldr	r0, [r7, #4]
   1fb6c:	f7fe fc74 	bl	1e458 <AppAddDevToResList>
    }
  }
}
   1fb70:	bf00      	nop
   1fb72:	3708      	adds	r7, #8
   1fb74:	46bd      	mov	sp, r7
   1fb76:	bd80      	pop	{r7, pc}
   1fb78:	1000a07c 	.word	0x1000a07c

0001fb7c <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1fb7c:	b480      	push	{r7}
   1fb7e:	b083      	sub	sp, #12
   1fb80:	af00      	add	r7, sp, #0
   1fb82:	6078      	str	r0, [r7, #4]
   1fb84:	6039      	str	r1, [r7, #0]
  return;
   1fb86:	bf00      	nop
}
   1fb88:	370c      	adds	r7, #12
   1fb8a:	46bd      	mov	sp, r7
   1fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fb90:	4770      	bx	lr

0001fb92 <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1fb92:	b480      	push	{r7}
   1fb94:	b083      	sub	sp, #12
   1fb96:	af00      	add	r7, sp, #0
   1fb98:	6078      	str	r0, [r7, #4]
   1fb9a:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1fb9c:	683b      	ldr	r3, [r7, #0]
   1fb9e:	799b      	ldrb	r3, [r3, #6]
   1fba0:	2b00      	cmp	r3, #0
   1fba2:	d009      	beq.n	1fbb8 <appSecEncryptInd+0x26>
   1fba4:	687b      	ldr	r3, [r7, #4]
   1fba6:	791b      	ldrb	r3, [r3, #4]
   1fba8:	2b00      	cmp	r3, #0
   1fbaa:	d005      	beq.n	1fbb8 <appSecEncryptInd+0x26>
  {
    pCb->bonded = TRUE;
   1fbac:	683b      	ldr	r3, [r7, #0]
   1fbae:	2201      	movs	r2, #1
   1fbb0:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   1fbb2:	683b      	ldr	r3, [r7, #0]
   1fbb4:	2200      	movs	r2, #0
   1fbb6:	719a      	strb	r2, [r3, #6]
  }
}
   1fbb8:	bf00      	nop
   1fbba:	370c      	adds	r7, #12
   1fbbc:	46bd      	mov	sp, r7
   1fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fbc2:	4770      	bx	lr

0001fbc4 <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1fbc4:	b580      	push	{r7, lr}
   1fbc6:	b082      	sub	sp, #8
   1fbc8:	af00      	add	r7, sp, #0
   1fbca:	6078      	str	r0, [r7, #4]
   1fbcc:	6039      	str	r1, [r7, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   1fbce:	683b      	ldr	r3, [r7, #0]
   1fbd0:	681b      	ldr	r3, [r3, #0]
   1fbd2:	2b00      	cmp	r3, #0
   1fbd4:	d12b      	bne.n	1fc2e <appSecFindLtk+0x6a>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1fbd6:	687b      	ldr	r3, [r7, #4]
   1fbd8:	89db      	ldrh	r3, [r3, #14]
   1fbda:	2b00      	cmp	r3, #0
   1fbdc:	d109      	bne.n	1fbf2 <appSecFindLtk+0x2e>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   1fbde:	687b      	ldr	r3, [r7, #4]
   1fbe0:	3306      	adds	r3, #6
   1fbe2:	2208      	movs	r2, #8
   1fbe4:	4915      	ldr	r1, [pc, #84]	; (1fc3c <appSecFindLtk+0x78>)
   1fbe6:	4618      	mov	r0, r3
   1fbe8:	f7ec fa8a 	bl	c100 <memcmp>
   1fbec:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1fbee:	2b00      	cmp	r3, #0
   1fbf0:	d013      	beq.n	1fc1a <appSecFindLtk+0x56>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   1fbf2:	687b      	ldr	r3, [r7, #4]
   1fbf4:	89da      	ldrh	r2, [r3, #14]
   1fbf6:	687b      	ldr	r3, [r7, #4]
   1fbf8:	3306      	adds	r3, #6
   1fbfa:	4619      	mov	r1, r3
   1fbfc:	4610      	mov	r0, r2
   1fbfe:	f7f9 fcab 	bl	19558 <AppDbFindByLtkReq>
   1fc02:	4602      	mov	r2, r0
   1fc04:	683b      	ldr	r3, [r7, #0]
   1fc06:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1fc08:	683b      	ldr	r3, [r7, #0]
   1fc0a:	681b      	ldr	r3, [r3, #0]
   1fc0c:	2b00      	cmp	r3, #0
   1fc0e:	d00e      	beq.n	1fc2e <appSecFindLtk+0x6a>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   1fc10:	4b0b      	ldr	r3, [pc, #44]	; (1fc40 <appSecFindLtk+0x7c>)
   1fc12:	2200      	movs	r2, #0
   1fc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1fc18:	e009      	b.n	1fc2e <appSecFindLtk+0x6a>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   1fc1a:	4b09      	ldr	r3, [pc, #36]	; (1fc40 <appSecFindLtk+0x7c>)
   1fc1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1fc20:	2b00      	cmp	r3, #0
   1fc22:	d004      	beq.n	1fc2e <appSecFindLtk+0x6a>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   1fc24:	4b06      	ldr	r3, [pc, #24]	; (1fc40 <appSecFindLtk+0x7c>)
   1fc26:	2201      	movs	r2, #1
   1fc28:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   1fc2c:	e002      	b.n	1fc34 <appSecFindLtk+0x70>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   1fc2e:	6838      	ldr	r0, [r7, #0]
   1fc30:	f7ff fcc2 	bl	1f5b8 <appSecRspLtk>
}
   1fc34:	3708      	adds	r7, #8
   1fc36:	46bd      	mov	sp, r7
   1fc38:	bd80      	pop	{r7, pc}
   1fc3a:	bf00      	nop
   1fc3c:	00026ce0 	.word	0x00026ce0
   1fc40:	1000a07c 	.word	0x1000a07c

0001fc44 <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   1fc44:	b580      	push	{r7, lr}
   1fc46:	b082      	sub	sp, #8
   1fc48:	af00      	add	r7, sp, #0
   1fc4a:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1fc4c:	687b      	ldr	r3, [r7, #4]
   1fc4e:	78db      	ldrb	r3, [r3, #3]
   1fc50:	2b00      	cmp	r3, #0
   1fc52:	d105      	bne.n	1fc60 <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1fc54:	f7f0 f954 	bl	ff00 <DmLlPrivEnabled>
   1fc58:	4603      	mov	r3, r0
   1fc5a:	4618      	mov	r0, r3
   1fc5c:	f7fb fe62 	bl	1b924 <SvcCoreGapCentAddrResUpdate>
  }
}
   1fc60:	bf00      	nop
   1fc62:	3708      	adds	r7, #8
   1fc64:	46bd      	mov	sp, r7
   1fc66:	bd80      	pop	{r7, pc}

0001fc68 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1fc68:	b580      	push	{r7, lr}
   1fc6a:	b084      	sub	sp, #16
   1fc6c:	af00      	add	r7, sp, #0
   1fc6e:	6078      	str	r0, [r7, #4]
   1fc70:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1fc72:	687b      	ldr	r3, [r7, #4]
   1fc74:	78db      	ldrb	r3, [r3, #3]
   1fc76:	2b00      	cmp	r3, #0
   1fc78:	d11c      	bne.n	1fcb4 <appPrivAddDevToResListInd+0x4c>
   1fc7a:	683b      	ldr	r3, [r7, #0]
   1fc7c:	681b      	ldr	r3, [r3, #0]
   1fc7e:	2b00      	cmp	r3, #0
   1fc80:	d018      	beq.n	1fcb4 <appPrivAddDevToResListInd+0x4c>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(pCb->dbHdl, DM_KEY_IRK, NULL);
   1fc82:	683b      	ldr	r3, [r7, #0]
   1fc84:	681b      	ldr	r3, [r3, #0]
   1fc86:	2200      	movs	r2, #0
   1fc88:	2104      	movs	r1, #4
   1fc8a:	4618      	mov	r0, r3
   1fc8c:	f7f9 fc96 	bl	195bc <AppDbGetKey>
   1fc90:	60f8      	str	r0, [r7, #12]

    /* if peer IRK present */
    if (pPeerKey != NULL)
   1fc92:	68fb      	ldr	r3, [r7, #12]
   1fc94:	2b00      	cmp	r3, #0
   1fc96:	d007      	beq.n	1fca8 <appPrivAddDevToResListInd+0x40>
    {
      /* set advertising peer address */
      AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   1fc98:	68fb      	ldr	r3, [r7, #12]
   1fc9a:	7d9a      	ldrb	r2, [r3, #22]
   1fc9c:	68fb      	ldr	r3, [r7, #12]
   1fc9e:	3310      	adds	r3, #16
   1fca0:	4619      	mov	r1, r3
   1fca2:	4610      	mov	r0, r2
   1fca4:	f000 fbbe 	bl	20424 <AppSetAdvPeerAddr>
    }

    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1fca8:	683b      	ldr	r3, [r7, #0]
   1fcaa:	681b      	ldr	r3, [r3, #0]
   1fcac:	2101      	movs	r1, #1
   1fcae:	4618      	mov	r0, r3
   1fcb0:	f7f9 fdcd 	bl	1984e <AppDbSetPeerAddedToRl>
  }
}
   1fcb4:	bf00      	nop
   1fcb6:	3710      	adds	r7, #16
   1fcb8:	46bd      	mov	sp, r7
   1fcba:	bd80      	pop	{r7, pc}

0001fcbc <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1fcbc:	b580      	push	{r7, lr}
   1fcbe:	b082      	sub	sp, #8
   1fcc0:	af00      	add	r7, sp, #0
   1fcc2:	6078      	str	r0, [r7, #4]
   1fcc4:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1fcc6:	687b      	ldr	r3, [r7, #4]
   1fcc8:	78db      	ldrb	r3, [r3, #3]
   1fcca:	2b00      	cmp	r3, #0
   1fccc:	d112      	bne.n	1fcf4 <appPrivRemDevFromResListInd+0x38>
   1fcce:	683b      	ldr	r3, [r7, #0]
   1fcd0:	681b      	ldr	r3, [r3, #0]
   1fcd2:	2b00      	cmp	r3, #0
   1fcd4:	d00e      	beq.n	1fcf4 <appPrivRemDevFromResListInd+0x38>
  {
    /* clear advertising peer address and its type */
    appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1fcd6:	4b09      	ldr	r3, [pc, #36]	; (1fcfc <appPrivRemDevFromResListInd+0x40>)
   1fcd8:	2200      	movs	r2, #0
   1fcda:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1fcde:	2206      	movs	r2, #6
   1fce0:	2100      	movs	r1, #0
   1fce2:	4807      	ldr	r0, [pc, #28]	; (1fd00 <appPrivRemDevFromResListInd+0x44>)
   1fce4:	f7ec fb3a 	bl	c35c <memset>

    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1fce8:	683b      	ldr	r3, [r7, #0]
   1fcea:	681b      	ldr	r3, [r3, #0]
   1fcec:	2100      	movs	r1, #0
   1fcee:	4618      	mov	r0, r3
   1fcf0:	f7f9 fdad 	bl	1984e <AppDbSetPeerAddedToRl>
  }
}
   1fcf4:	bf00      	nop
   1fcf6:	3708      	adds	r7, #8
   1fcf8:	46bd      	mov	sp, r7
   1fcfa:	bd80      	pop	{r7, pc}
   1fcfc:	1000a07c 	.word	0x1000a07c
   1fd00:	1000a0ac 	.word	0x1000a0ac

0001fd04 <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   1fd04:	b580      	push	{r7, lr}
   1fd06:	b086      	sub	sp, #24
   1fd08:	af00      	add	r7, sp, #0
   1fd0a:	6078      	str	r0, [r7, #4]
   1fd0c:	6039      	str	r1, [r7, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;
  
  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   1fd0e:	683b      	ldr	r3, [r7, #0]
   1fd10:	2202      	movs	r2, #2
   1fd12:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1fd14:	683b      	ldr	r3, [r7, #0]
   1fd16:	791b      	ldrb	r3, [r3, #4]
   1fd18:	4618      	mov	r0, r3
   1fd1a:	f7ef ff27 	bl	fb6c <DmConnCheckIdle>
   1fd1e:	4603      	mov	r3, r0
   1fd20:	2b00      	cmp	r3, #0
   1fd22:	bf0c      	ite	eq
   1fd24:	2301      	moveq	r3, #1
   1fd26:	2300      	movne	r3, #0
   1fd28:	b2db      	uxtb	r3, r3
   1fd2a:	75fb      	strb	r3, [r7, #23]
  
  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   1fd2c:	7dfb      	ldrb	r3, [r7, #23]
   1fd2e:	2b00      	cmp	r3, #0
   1fd30:	d027      	beq.n	1fd82 <appSlaveConnUpdateTimeout+0x7e>
   1fd32:	683b      	ldr	r3, [r7, #0]
   1fd34:	7a9b      	ldrb	r3, [r3, #10]
   1fd36:	2b00      	cmp	r3, #0
   1fd38:	d023      	beq.n	1fd82 <appSlaveConnUpdateTimeout+0x7e>
  {
    /* do update */
    pCb->attempts++;
   1fd3a:	683b      	ldr	r3, [r7, #0]
   1fd3c:	7b1b      	ldrb	r3, [r3, #12]
   1fd3e:	3301      	adds	r3, #1
   1fd40:	b2da      	uxtb	r2, r3
   1fd42:	683b      	ldr	r3, [r7, #0]
   1fd44:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1fd46:	4b15      	ldr	r3, [pc, #84]	; (1fd9c <appSlaveConnUpdateTimeout+0x98>)
   1fd48:	681b      	ldr	r3, [r3, #0]
   1fd4a:	889b      	ldrh	r3, [r3, #4]
   1fd4c:	813b      	strh	r3, [r7, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   1fd4e:	4b13      	ldr	r3, [pc, #76]	; (1fd9c <appSlaveConnUpdateTimeout+0x98>)
   1fd50:	681b      	ldr	r3, [r3, #0]
   1fd52:	88db      	ldrh	r3, [r3, #6]
   1fd54:	817b      	strh	r3, [r7, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   1fd56:	4b11      	ldr	r3, [pc, #68]	; (1fd9c <appSlaveConnUpdateTimeout+0x98>)
   1fd58:	681b      	ldr	r3, [r3, #0]
   1fd5a:	891b      	ldrh	r3, [r3, #8]
   1fd5c:	81bb      	strh	r3, [r7, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   1fd5e:	4b0f      	ldr	r3, [pc, #60]	; (1fd9c <appSlaveConnUpdateTimeout+0x98>)
   1fd60:	681b      	ldr	r3, [r3, #0]
   1fd62:	895b      	ldrh	r3, [r3, #10]
   1fd64:	81fb      	strh	r3, [r7, #14]
    connSpec.minCeLen = 0;
   1fd66:	2300      	movs	r3, #0
   1fd68:	823b      	strh	r3, [r7, #16]
    connSpec.maxCeLen = 0xffff;
   1fd6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fd6e:	827b      	strh	r3, [r7, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   1fd70:	683b      	ldr	r3, [r7, #0]
   1fd72:	791b      	ldrb	r3, [r3, #4]
   1fd74:	f107 0208 	add.w	r2, r7, #8
   1fd78:	4611      	mov	r1, r2
   1fd7a:	4618      	mov	r0, r3
   1fd7c:	f7ef fd96 	bl	f8ac <DmConnUpdate>
   1fd80:	e007      	b.n	1fd92 <appSlaveConnUpdateTimeout+0x8e>
  }
  else
  {
    pCb->connWasIdle = idle;
   1fd82:	683b      	ldr	r3, [r7, #0]
   1fd84:	7dfa      	ldrb	r2, [r7, #23]
   1fd86:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   1fd88:	683b      	ldr	r3, [r7, #0]
   1fd8a:	791b      	ldrb	r3, [r3, #4]
   1fd8c:	4618      	mov	r0, r3
   1fd8e:	f7ff fba1 	bl	1f4d4 <appConnUpdateTimerStart>
  }
}
   1fd92:	bf00      	nop
   1fd94:	3718      	adds	r7, #24
   1fd96:	46bd      	mov	sp, r7
   1fd98:	bd80      	pop	{r7, pc}
   1fd9a:	bf00      	nop
   1fd9c:	10009eb8 	.word	0x10009eb8

0001fda0 <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   1fda0:	b580      	push	{r7, lr}
   1fda2:	b084      	sub	sp, #16
   1fda4:	af00      	add	r7, sp, #0
   1fda6:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   1fda8:	687b      	ldr	r3, [r7, #4]
   1fdaa:	881b      	ldrh	r3, [r3, #0]
   1fdac:	3b01      	subs	r3, #1
   1fdae:	015b      	lsls	r3, r3, #5
   1fdb0:	4a0e      	ldr	r2, [pc, #56]	; (1fdec <appSlaveProcMsg+0x4c>)
   1fdb2:	4413      	add	r3, r2
   1fdb4:	60fb      	str	r3, [r7, #12]

  switch(pMsg->event)
   1fdb6:	687b      	ldr	r3, [r7, #4]
   1fdb8:	789b      	ldrb	r3, [r3, #2]
   1fdba:	2b10      	cmp	r3, #16
   1fdbc:	d000      	beq.n	1fdc0 <appSlaveProcMsg+0x20>
        DmReadRemoteFeatures(pCb->connId);
      }
      break;

    default:
      break;
   1fdbe:	e011      	b.n	1fde4 <appSlaveProcMsg+0x44>
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1fdc0:	68fb      	ldr	r3, [r7, #12]
   1fdc2:	7b5b      	ldrb	r3, [r3, #13]
   1fdc4:	2b02      	cmp	r3, #2
   1fdc6:	d104      	bne.n	1fdd2 <appSlaveProcMsg+0x32>
        appSlaveConnUpdateTimeout(pMsg, pCb);
   1fdc8:	68f9      	ldr	r1, [r7, #12]
   1fdca:	6878      	ldr	r0, [r7, #4]
   1fdcc:	f7ff ff9a 	bl	1fd04 <appSlaveConnUpdateTimeout>
      break;
   1fdd0:	e007      	b.n	1fde2 <appSlaveProcMsg+0x42>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   1fdd2:	68fb      	ldr	r3, [r7, #12]
   1fdd4:	2201      	movs	r2, #1
   1fdd6:	735a      	strb	r2, [r3, #13]
        DmReadRemoteFeatures(pCb->connId);
   1fdd8:	68fb      	ldr	r3, [r7, #12]
   1fdda:	791b      	ldrb	r3, [r3, #4]
   1fddc:	4618      	mov	r0, r3
   1fdde:	f7ef fd5b 	bl	f898 <DmReadRemoteFeatures>
      break;
   1fde2:	bf00      	nop
  }
}
   1fde4:	bf00      	nop
   1fde6:	3710      	adds	r7, #16
   1fde8:	46bd      	mov	sp, r7
   1fdea:	bd80      	pop	{r7, pc}
   1fdec:	10009ee4 	.word	0x10009ee4

0001fdf0 <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   1fdf0:	b580      	push	{r7, lr}
   1fdf2:	b082      	sub	sp, #8
   1fdf4:	af00      	add	r7, sp, #0
  uint8_t i;
   
  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1fdf6:	2300      	movs	r3, #0
   1fdf8:	71fb      	strb	r3, [r7, #7]
   1fdfa:	e014      	b.n	1fe26 <AppSlaveInit+0x36>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1fdfc:	79fb      	ldrb	r3, [r7, #7]
   1fdfe:	4a18      	ldr	r2, [pc, #96]	; (1fe60 <AppSlaveInit+0x70>)
   1fe00:	4413      	add	r3, r2
   1fe02:	2203      	movs	r2, #3
   1fe04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   1fe08:	79fb      	ldrb	r3, [r7, #7]
   1fe0a:	4a15      	ldr	r2, [pc, #84]	; (1fe60 <AppSlaveInit+0x70>)
   1fe0c:	4413      	add	r3, r2
   1fe0e:	2200      	movs	r2, #0
   1fe10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   1fe14:	79fb      	ldrb	r3, [r7, #7]
   1fe16:	4a12      	ldr	r2, [pc, #72]	; (1fe60 <AppSlaveInit+0x70>)
   1fe18:	4413      	add	r3, r2
   1fe1a:	2200      	movs	r2, #0
   1fe1c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1fe20:	79fb      	ldrb	r3, [r7, #7]
   1fe22:	3301      	adds	r3, #1
   1fe24:	71fb      	strb	r3, [r7, #7]
   1fe26:	79fb      	ldrb	r3, [r7, #7]
   1fe28:	2b00      	cmp	r3, #0
   1fe2a:	d0e7      	beq.n	1fdfc <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   1fe2c:	4b0c      	ldr	r3, [pc, #48]	; (1fe60 <AppSlaveInit+0x70>)
   1fe2e:	22ff      	movs	r2, #255	; 0xff
   1fe30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   1fe34:	f7ff f9e0 	bl	1f1f8 <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   1fe38:	4b09      	ldr	r3, [pc, #36]	; (1fe60 <AppSlaveInit+0x70>)
   1fe3a:	2200      	movs	r2, #0
   1fe3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   1fe40:	4b08      	ldr	r3, [pc, #32]	; (1fe64 <AppSlaveInit+0x74>)
   1fe42:	4a09      	ldr	r2, [pc, #36]	; (1fe68 <AppSlaveInit+0x78>)
   1fe44:	601a      	str	r2, [r3, #0]

  appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1fe46:	4b06      	ldr	r3, [pc, #24]	; (1fe60 <AppSlaveInit+0x70>)
   1fe48:	2200      	movs	r2, #0
   1fe4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1fe4e:	2206      	movs	r2, #6
   1fe50:	2100      	movs	r1, #0
   1fe52:	4806      	ldr	r0, [pc, #24]	; (1fe6c <AppSlaveInit+0x7c>)
   1fe54:	f7ec fa82 	bl	c35c <memset>
}
   1fe58:	bf00      	nop
   1fe5a:	3708      	adds	r7, #8
   1fe5c:	46bd      	mov	sp, r7
   1fe5e:	bd80      	pop	{r7, pc}
   1fe60:	1000a07c 	.word	0x1000a07c
   1fe64:	10009ec0 	.word	0x10009ec0
   1fe68:	0001fda1 	.word	0x0001fda1
   1fe6c:	1000a0ac 	.word	0x1000a0ac

0001fe70 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   1fe70:	b580      	push	{r7, lr}
   1fe72:	b084      	sub	sp, #16
   1fe74:	af00      	add	r7, sp, #0
   1fe76:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   1fe78:	2300      	movs	r3, #0
   1fe7a:	60fb      	str	r3, [r7, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1fe7c:	687b      	ldr	r3, [r7, #4]
   1fe7e:	789b      	ldrb	r3, [r3, #2]
   1fe80:	2b22      	cmp	r3, #34	; 0x22
   1fe82:	d00a      	beq.n	1fe9a <AppSlaveProcDmMsg+0x2a>
    (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   1fe84:	687b      	ldr	r3, [r7, #4]
   1fe86:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1fe88:	2b47      	cmp	r3, #71	; 0x47
   1fe8a:	d006      	beq.n	1fe9a <AppSlaveProcDmMsg+0x2a>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1fe8c:	687b      	ldr	r3, [r7, #4]
   1fe8e:	881b      	ldrh	r3, [r3, #0]
   1fe90:	3b01      	subs	r3, #1
   1fe92:	015b      	lsls	r3, r3, #5
   1fe94:	4a5a      	ldr	r2, [pc, #360]	; (20000 <AppSlaveProcDmMsg+0x190>)
   1fe96:	4413      	add	r3, r2
   1fe98:	60fb      	str	r3, [r7, #12]
  }

  switch (pMsg->hdr.event)
   1fe9a:	687b      	ldr	r3, [r7, #4]
   1fe9c:	789b      	ldrb	r3, [r3, #2]
   1fe9e:	3b20      	subs	r3, #32
   1fea0:	2b35      	cmp	r3, #53	; 0x35
   1fea2:	f200 80a3 	bhi.w	1ffec <AppSlaveProcDmMsg+0x17c>
   1fea6:	a201      	add	r2, pc, #4	; (adr r2, 1feac <AppSlaveProcDmMsg+0x3c>)
   1fea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1feac:	0001ff85 	.word	0x0001ff85
   1feb0:	0001ffed 	.word	0x0001ffed
   1feb4:	0001ff8b 	.word	0x0001ff8b
   1feb8:	0001ffed 	.word	0x0001ffed
   1febc:	0001ffed 	.word	0x0001ffed
   1fec0:	0001ffed 	.word	0x0001ffed
   1fec4:	0001ffed 	.word	0x0001ffed
   1fec8:	0001ff9d 	.word	0x0001ff9d
   1fecc:	0001ffa7 	.word	0x0001ffa7
   1fed0:	0001ffb1 	.word	0x0001ffb1
   1fed4:	0001ffed 	.word	0x0001ffed
   1fed8:	0001ffed 	.word	0x0001ffed
   1fedc:	0001ffed 	.word	0x0001ffed
   1fee0:	0001ffed 	.word	0x0001ffed
   1fee4:	0001ffed 	.word	0x0001ffed
   1fee8:	0001ffed 	.word	0x0001ffed
   1feec:	0001ffed 	.word	0x0001ffed
   1fef0:	0001ffed 	.word	0x0001ffed
   1fef4:	0001ffed 	.word	0x0001ffed
   1fef8:	0001ffed 	.word	0x0001ffed
   1fefc:	0001ffed 	.word	0x0001ffed
   1ff00:	0001ffed 	.word	0x0001ffed
   1ff04:	0001ffed 	.word	0x0001ffed
   1ff08:	0001ffbb 	.word	0x0001ffbb
   1ff0c:	0001ffed 	.word	0x0001ffed
   1ff10:	0001ffed 	.word	0x0001ffed
   1ff14:	0001ffed 	.word	0x0001ffed
   1ff18:	0001ffed 	.word	0x0001ffed
   1ff1c:	0001ffed 	.word	0x0001ffed
   1ff20:	0001ffed 	.word	0x0001ffed
   1ff24:	0001ffed 	.word	0x0001ffed
   1ff28:	0001ffc5 	.word	0x0001ffc5
   1ff2c:	0001ffed 	.word	0x0001ffed
   1ff30:	0001ffed 	.word	0x0001ffed
   1ff34:	0001ffed 	.word	0x0001ffed
   1ff38:	0001ffed 	.word	0x0001ffed
   1ff3c:	0001ffed 	.word	0x0001ffed
   1ff40:	0001ffed 	.word	0x0001ffed
   1ff44:	0001ffed 	.word	0x0001ffed
   1ff48:	0001ff8b 	.word	0x0001ff8b
   1ff4c:	0001ffed 	.word	0x0001ffed
   1ff50:	0001ffed 	.word	0x0001ffed
   1ff54:	0001ffed 	.word	0x0001ffed
   1ff58:	0001ffed 	.word	0x0001ffed
   1ff5c:	0001ffed 	.word	0x0001ffed
   1ff60:	0001ffed 	.word	0x0001ffed
   1ff64:	0001ffed 	.word	0x0001ffed
   1ff68:	0001ffed 	.word	0x0001ffed
   1ff6c:	0001ffed 	.word	0x0001ffed
   1ff70:	0001ffcf 	.word	0x0001ffcf
   1ff74:	0001ffed 	.word	0x0001ffed
   1ff78:	0001ffed 	.word	0x0001ffed
   1ff7c:	0001ffed 	.word	0x0001ffed
   1ff80:	0001ffe1 	.word	0x0001ffe1
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   1ff84:	f7ff f938 	bl	1f1f8 <appSlaveAdvModeInit>
      break;
   1ff88:	e035      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   1ff8a:	4b1e      	ldr	r3, [pc, #120]	; (20004 <AppSlaveProcDmMsg+0x194>)
   1ff8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ff8e:	2b00      	cmp	r3, #0
   1ff90:	d02e      	beq.n	1fff0 <AppSlaveProcDmMsg+0x180>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   1ff92:	4b1c      	ldr	r3, [pc, #112]	; (20004 <AppSlaveProcDmMsg+0x194>)
   1ff94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ff96:	6878      	ldr	r0, [r7, #4]
   1ff98:	4798      	blx	r3
      }
      break;
   1ff9a:	e029      	b.n	1fff0 <AppSlaveProcDmMsg+0x180>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   1ff9c:	68f9      	ldr	r1, [r7, #12]
   1ff9e:	6878      	ldr	r0, [r7, #4]
   1ffa0:	f7ff fb40 	bl	1f624 <appSlaveConnOpen>
      break;
   1ffa4:	e027      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   1ffa6:	68f9      	ldr	r1, [r7, #12]
   1ffa8:	6878      	ldr	r0, [r7, #4]
   1ffaa:	f7ff fb53 	bl	1f654 <appSlaveConnClose>
      break;
   1ffae:	e022      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   1ffb0:	68f9      	ldr	r1, [r7, #12]
   1ffb2:	6878      	ldr	r0, [r7, #4]
   1ffb4:	f7ff fbec 	bl	1f790 <appSlaveConnUpdate>
      break;
   1ffb8:	e01d      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   1ffba:	68f9      	ldr	r1, [r7, #12]
   1ffbc:	6878      	ldr	r0, [r7, #4]
   1ffbe:	f7ff fc23 	bl	1f808 <appSlaveResolvedAddrInd>
      break;
   1ffc2:	e018      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   1ffc4:	68f9      	ldr	r1, [r7, #12]
   1ffc6:	6878      	ldr	r0, [r7, #4]
   1ffc8:	f7ff fc74 	bl	1f8b4 <appSlaveRemoteConnParamReq>
      break;
   1ffcc:	e013      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>
    
    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   1ffce:	68fb      	ldr	r3, [r7, #12]
   1ffd0:	7b5b      	ldrb	r3, [r3, #13]
   1ffd2:	2b01      	cmp	r3, #1
   1ffd4:	d10e      	bne.n	1fff4 <AppSlaveProcDmMsg+0x184>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   1ffd6:	68f9      	ldr	r1, [r7, #12]
   1ffd8:	6878      	ldr	r0, [r7, #4]
   1ffda:	f7ff fe93 	bl	1fd04 <appSlaveConnUpdateTimeout>
      }
      break;
   1ffde:	e009      	b.n	1fff4 <AppSlaveProcDmMsg+0x184>
    
    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   1ffe0:	2000      	movs	r0, #0
   1ffe2:	f7f9 ff4b 	bl	19e7c <HciDrvRadioBoot>
      DmDevReset();
   1ffe6:	f7ef fedb 	bl	fda0 <DmDevReset>
      break;
   1ffea:	e004      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>

    default:
      break;
   1ffec:	bf00      	nop
   1ffee:	e002      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>
      break;
   1fff0:	bf00      	nop
   1fff2:	e000      	b.n	1fff6 <AppSlaveProcDmMsg+0x186>
      break;
   1fff4:	bf00      	nop
  }
}
   1fff6:	bf00      	nop
   1fff8:	3710      	adds	r7, #16
   1fffa:	46bd      	mov	sp, r7
   1fffc:	bd80      	pop	{r7, pc}
   1fffe:	bf00      	nop
   20000:	10009ee4 	.word	0x10009ee4
   20004:	1000a07c 	.word	0x1000a07c

00020008 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   20008:	b580      	push	{r7, lr}
   2000a:	b082      	sub	sp, #8
   2000c:	af00      	add	r7, sp, #0
   2000e:	603b      	str	r3, [r7, #0]
   20010:	4603      	mov	r3, r0
   20012:	71fb      	strb	r3, [r7, #7]
   20014:	460b      	mov	r3, r1
   20016:	71bb      	strb	r3, [r7, #6]
   20018:	4613      	mov	r3, r2
   2001a:	80bb      	strh	r3, [r7, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   2001c:	79fa      	ldrb	r2, [r7, #7]
   2001e:	79bb      	ldrb	r3, [r7, #6]
   20020:	4926      	ldr	r1, [pc, #152]	; (200bc <appAdvSetData+0xb4>)
   20022:	0092      	lsls	r2, r2, #2
   20024:	4413      	add	r3, r2
   20026:	683a      	ldr	r2, [r7, #0]
   20028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   2002c:	79fa      	ldrb	r2, [r7, #7]
   2002e:	79bb      	ldrb	r3, [r7, #6]
   20030:	4922      	ldr	r1, [pc, #136]	; (200bc <appAdvSetData+0xb4>)
   20032:	0092      	lsls	r2, r2, #2
   20034:	4413      	add	r3, r2
   20036:	3308      	adds	r3, #8
   20038:	88ba      	ldrh	r2, [r7, #4]
   2003a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   2003e:	79fa      	ldrb	r2, [r7, #7]
   20040:	79bb      	ldrb	r3, [r7, #6]
   20042:	491e      	ldr	r1, [pc, #120]	; (200bc <appAdvSetData+0xb4>)
   20044:	0092      	lsls	r2, r2, #2
   20046:	4413      	add	r3, r2
   20048:	330c      	adds	r3, #12
   2004a:	8a3a      	ldrh	r2, [r7, #16]
   2004c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   20050:	79fb      	ldrb	r3, [r7, #7]
   20052:	491a      	ldr	r1, [pc, #104]	; (200bc <appAdvSetData+0xb4>)
   20054:	3314      	adds	r3, #20
   20056:	8aba      	ldrh	r2, [r7, #20]
   20058:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   2005c:	79fa      	ldrb	r2, [r7, #7]
   2005e:	79bb      	ldrb	r3, [r7, #6]
   20060:	4916      	ldr	r1, [pc, #88]	; (200bc <appAdvSetData+0xb4>)
   20062:	0092      	lsls	r2, r2, #2
   20064:	4413      	add	r3, r2
   20066:	3310      	adds	r3, #16
   20068:	2200      	movs	r2, #0
   2006a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   2006e:	79fb      	ldrb	r3, [r7, #7]
   20070:	4a12      	ldr	r2, [pc, #72]	; (200bc <appAdvSetData+0xb4>)
   20072:	4413      	add	r3, r2
   20074:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   20078:	2b03      	cmp	r3, #3
   2007a:	d015      	beq.n	200a8 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   2007c:	79bb      	ldrb	r3, [r7, #6]
   2007e:	085b      	lsrs	r3, r3, #1
   20080:	b2da      	uxtb	r2, r3
   20082:	4b0e      	ldr	r3, [pc, #56]	; (200bc <appAdvSetData+0xb4>)
   20084:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   20088:	429a      	cmp	r2, r3
   2008a:	d10d      	bne.n	200a8 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   2008c:	88bb      	ldrh	r3, [r7, #4]
   2008e:	2bfb      	cmp	r3, #251	; 0xfb
   20090:	d80a      	bhi.n	200a8 <appAdvSetData+0xa0>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   20092:	88ba      	ldrh	r2, [r7, #4]
   20094:	8abb      	ldrh	r3, [r7, #20]
   20096:	429a      	cmp	r2, r3
   20098:	d806      	bhi.n	200a8 <appAdvSetData+0xa0>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   2009a:	79ba      	ldrb	r2, [r7, #6]
   2009c:	79fb      	ldrb	r3, [r7, #7]
   2009e:	4611      	mov	r1, r2
   200a0:	4618      	mov	r0, r3
   200a2:	f7ff f923 	bl	1f2ec <appSetAdvScanDataFrag>
   200a6:	e005      	b.n	200b4 <appAdvSetData+0xac>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   200a8:	79fb      	ldrb	r3, [r7, #7]
   200aa:	4a04      	ldr	r2, [pc, #16]	; (200bc <appAdvSetData+0xb4>)
   200ac:	4413      	add	r3, r2
   200ae:	2200      	movs	r2, #0
   200b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   200b4:	bf00      	nop
   200b6:	3708      	adds	r7, #8
   200b8:	46bd      	mov	sp, r7
   200ba:	bd80      	pop	{r7, pc}
   200bc:	1000a07c 	.word	0x1000a07c

000200c0 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   200c0:	b580      	push	{r7, lr}
   200c2:	b086      	sub	sp, #24
   200c4:	af00      	add	r7, sp, #0
   200c6:	60b9      	str	r1, [r7, #8]
   200c8:	607a      	str	r2, [r7, #4]
   200ca:	603b      	str	r3, [r7, #0]
   200cc:	4603      	mov	r3, r0
   200ce:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) || (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   200d0:	7bfb      	ldrb	r3, [r7, #15]
   200d2:	68b9      	ldr	r1, [r7, #8]
   200d4:	4618      	mov	r0, r3
   200d6:	f7ff f89f 	bl	1f218 <appSlaveConnectableAdv>
   200da:	4603      	mov	r3, r0
   200dc:	2b00      	cmp	r3, #0
   200de:	d009      	beq.n	200f4 <appAdvStart+0x34>
   200e0:	2001      	movs	r0, #1
   200e2:	f7fe f8c1 	bl	1e268 <appNumConns>
   200e6:	4603      	mov	r3, r0
   200e8:	461a      	mov	r2, r3
   200ea:	4b35      	ldr	r3, [pc, #212]	; (201c0 <appAdvStart+0x100>)
   200ec:	681b      	ldr	r3, [r3, #0]
   200ee:	781b      	ldrb	r3, [r3, #0]
   200f0:	429a      	cmp	r2, r3
   200f2:	d24e      	bcs.n	20192 <appAdvStart+0xd2>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   200f4:	2300      	movs	r3, #0
   200f6:	75fb      	strb	r3, [r7, #23]
   200f8:	e040      	b.n	2017c <appAdvStart+0xbc>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   200fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   200fe:	2b00      	cmp	r3, #0
   20100:	d023      	beq.n	2014a <appAdvStart+0x8a>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   20102:	7dfb      	ldrb	r3, [r7, #23]
   20104:	68ba      	ldr	r2, [r7, #8]
   20106:	4413      	add	r3, r2
   20108:	7818      	ldrb	r0, [r3, #0]
   2010a:	7dfb      	ldrb	r3, [r7, #23]
   2010c:	005b      	lsls	r3, r3, #1
   2010e:	687a      	ldr	r2, [r7, #4]
   20110:	4413      	add	r3, r2
   20112:	8819      	ldrh	r1, [r3, #0]
   20114:	7dfb      	ldrb	r3, [r7, #23]
   20116:	005b      	lsls	r3, r3, #1
   20118:	687a      	ldr	r2, [r7, #4]
   2011a:	4413      	add	r3, r2
   2011c:	881b      	ldrh	r3, [r3, #0]
   2011e:	461a      	mov	r2, r3
   20120:	f7ee ff2e 	bl	ef80 <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]], appSlaveCb.peerAddrType,
   20124:	7dfb      	ldrb	r3, [r7, #23]
   20126:	68ba      	ldr	r2, [r7, #8]
   20128:	4413      	add	r3, r2
   2012a:	7818      	ldrb	r0, [r3, #0]
   2012c:	7dfb      	ldrb	r3, [r7, #23]
   2012e:	68ba      	ldr	r2, [r7, #8]
   20130:	4413      	add	r3, r2
   20132:	781b      	ldrb	r3, [r3, #0]
   20134:	461a      	mov	r2, r3
   20136:	4b23      	ldr	r3, [pc, #140]	; (201c4 <appAdvStart+0x104>)
   20138:	4413      	add	r3, r2
   2013a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
   2013e:	4b21      	ldr	r3, [pc, #132]	; (201c4 <appAdvStart+0x104>)
   20140:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   20144:	4b20      	ldr	r3, [pc, #128]	; (201c8 <appAdvStart+0x108>)
   20146:	f7ee fe79 	bl	ee3c <DmAdvConfig>
                    appSlaveCb.peerAddr);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   2014a:	7dfb      	ldrb	r3, [r7, #23]
   2014c:	68ba      	ldr	r2, [r7, #8]
   2014e:	4413      	add	r3, r2
   20150:	781b      	ldrb	r3, [r3, #0]
   20152:	461a      	mov	r2, r3
   20154:	4b1b      	ldr	r3, [pc, #108]	; (201c4 <appAdvStart+0x104>)
   20156:	4413      	add	r3, r2
   20158:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   2015c:	2b00      	cmp	r3, #0
   2015e:	d10a      	bne.n	20176 <appAdvStart+0xb6>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   20160:	7dfb      	ldrb	r3, [r7, #23]
   20162:	68ba      	ldr	r2, [r7, #8]
   20164:	4413      	add	r3, r2
   20166:	781a      	ldrb	r2, [r3, #0]
   20168:	4b16      	ldr	r3, [pc, #88]	; (201c4 <appAdvStart+0x104>)
   2016a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   2016e:	4619      	mov	r1, r3
   20170:	4610      	mov	r0, r2
   20172:	f7ff f93f 	bl	1f3f4 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   20176:	7dfb      	ldrb	r3, [r7, #23]
   20178:	3301      	adds	r3, #1
   2017a:	75fb      	strb	r3, [r7, #23]
   2017c:	7dfa      	ldrb	r2, [r7, #23]
   2017e:	7bfb      	ldrb	r3, [r7, #15]
   20180:	429a      	cmp	r2, r3
   20182:	d3ba      	bcc.n	200fa <appAdvStart+0x3a>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   20184:	7bf8      	ldrb	r0, [r7, #15]
   20186:	6a3b      	ldr	r3, [r7, #32]
   20188:	683a      	ldr	r2, [r7, #0]
   2018a:	68b9      	ldr	r1, [r7, #8]
   2018c:	f7ee fe94 	bl	eeb8 <DmAdvStart>

    return;
   20190:	e013      	b.n	201ba <appAdvStart+0xfa>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   20192:	2300      	movs	r3, #0
   20194:	75fb      	strb	r3, [r7, #23]
   20196:	e00c      	b.n	201b2 <appAdvStart+0xf2>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   20198:	7dfb      	ldrb	r3, [r7, #23]
   2019a:	68ba      	ldr	r2, [r7, #8]
   2019c:	4413      	add	r3, r2
   2019e:	781b      	ldrb	r3, [r3, #0]
   201a0:	461a      	mov	r2, r3
   201a2:	4b08      	ldr	r3, [pc, #32]	; (201c4 <appAdvStart+0x104>)
   201a4:	4413      	add	r3, r2
   201a6:	2203      	movs	r2, #3
   201a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < numSets; i++)
   201ac:	7dfb      	ldrb	r3, [r7, #23]
   201ae:	3301      	adds	r3, #1
   201b0:	75fb      	strb	r3, [r7, #23]
   201b2:	7dfa      	ldrb	r2, [r7, #23]
   201b4:	7bfb      	ldrb	r3, [r7, #15]
   201b6:	429a      	cmp	r2, r3
   201b8:	d3ee      	bcc.n	20198 <appAdvStart+0xd8>
  }
}
   201ba:	3718      	adds	r7, #24
   201bc:	46bd      	mov	sp, r7
   201be:	bd80      	pop	{r7, pc}
   201c0:	10009ebc 	.word	0x10009ebc
   201c4:	1000a07c 	.word	0x1000a07c
   201c8:	1000a0ac 	.word	0x1000a0ac

000201cc <appAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
   201cc:	b580      	push	{r7, lr}
   201ce:	b084      	sub	sp, #16
   201d0:	af00      	add	r7, sp, #0
   201d2:	4603      	mov	r3, r0
   201d4:	6039      	str	r1, [r7, #0]
   201d6:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  /* if number of advertising sets is 0 */
  if (numSets == 0)
   201d8:	79fb      	ldrb	r3, [r7, #7]
   201da:	2b00      	cmp	r3, #0
   201dc:	d10f      	bne.n	201fe <appAdvStop+0x32>
  {
    /* stop all advertising sets */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   201de:	2300      	movs	r3, #0
   201e0:	73fb      	strb	r3, [r7, #15]
   201e2:	e008      	b.n	201f6 <appAdvStop+0x2a>
    {
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   201e4:	7bfb      	ldrb	r3, [r7, #15]
   201e6:	4a19      	ldr	r2, [pc, #100]	; (2024c <appAdvStop+0x80>)
   201e8:	4413      	add	r3, r2
   201ea:	2203      	movs	r2, #3
   201ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   201f0:	7bfb      	ldrb	r3, [r7, #15]
   201f2:	3301      	adds	r3, #1
   201f4:	73fb      	strb	r3, [r7, #15]
   201f6:	7bfb      	ldrb	r3, [r7, #15]
   201f8:	2b00      	cmp	r3, #0
   201fa:	d0f3      	beq.n	201e4 <appAdvStop+0x18>
   201fc:	e013      	b.n	20226 <appAdvStop+0x5a>
    }
  }
  else
  {
    for (i = 0; i < numSets; i++)
   201fe:	2300      	movs	r3, #0
   20200:	73fb      	strb	r3, [r7, #15]
   20202:	e00c      	b.n	2021e <appAdvStop+0x52>
    {
      WSF_ASSERT(pAdvHandles[i] < DM_NUM_ADV_SETS);

      /* stop advertising */
      appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   20204:	7bfb      	ldrb	r3, [r7, #15]
   20206:	683a      	ldr	r2, [r7, #0]
   20208:	4413      	add	r3, r2
   2020a:	781b      	ldrb	r3, [r3, #0]
   2020c:	461a      	mov	r2, r3
   2020e:	4b0f      	ldr	r3, [pc, #60]	; (2024c <appAdvStop+0x80>)
   20210:	4413      	add	r3, r2
   20212:	2203      	movs	r2, #3
   20214:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < numSets; i++)
   20218:	7bfb      	ldrb	r3, [r7, #15]
   2021a:	3301      	adds	r3, #1
   2021c:	73fb      	strb	r3, [r7, #15]
   2021e:	7bfa      	ldrb	r2, [r7, #15]
   20220:	79fb      	ldrb	r3, [r7, #7]
   20222:	429a      	cmp	r2, r3
   20224:	d3ee      	bcc.n	20204 <appAdvStop+0x38>
    }
  }

  /* if no advertising set is active */
  if (!AppSlaveIsAdvertising())
   20226:	f000 f92d 	bl	20484 <AppSlaveIsAdvertising>
   2022a:	4603      	mov	r3, r0
   2022c:	2b00      	cmp	r3, #0
   2022e:	d103      	bne.n	20238 <appAdvStop+0x6c>
  {
    appSlaveCb.discMode = APP_MODE_NONE;
   20230:	4b06      	ldr	r3, [pc, #24]	; (2024c <appAdvStop+0x80>)
   20232:	22ff      	movs	r2, #255	; 0xff
   20234:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }

  DmAdvStop(numSets, pAdvHandles);
   20238:	79fb      	ldrb	r3, [r7, #7]
   2023a:	6839      	ldr	r1, [r7, #0]
   2023c:	4618      	mov	r0, r3
   2023e:	f7ee fe59 	bl	eef4 <DmAdvStop>
}
   20242:	bf00      	nop
   20244:	3710      	adds	r7, #16
   20246:	46bd      	mov	sp, r7
   20248:	bd80      	pop	{r7, pc}
   2024a:	bf00      	nop
   2024c:	1000a07c 	.word	0x1000a07c

00020250 <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   20250:	b580      	push	{r7, lr}
   20252:	b088      	sub	sp, #32
   20254:	af02      	add	r7, sp, #8
   20256:	60b9      	str	r1, [r7, #8]
   20258:	607a      	str	r2, [r7, #4]
   2025a:	603b      	str	r3, [r7, #0]
   2025c:	4603      	mov	r3, r0
   2025e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   20260:	4b25      	ldr	r3, [pc, #148]	; (202f8 <appSlaveAdvStart+0xa8>)
   20262:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   20266:	75bb      	strb	r3, [r7, #22]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   20268:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   2026c:	2b02      	cmp	r3, #2
   2026e:	d114      	bne.n	2029a <appSlaveAdvStart+0x4a>
  {
    if (AppDbCheckBonded() == FALSE)
   20270:	f7f9 f8fc 	bl	1946c <AppDbCheckBonded>
   20274:	4603      	mov	r3, r0
   20276:	2b00      	cmp	r3, #0
   20278:	d107      	bne.n	2028a <appSlaveAdvStart+0x3a>
    {
      AppSetBondable(TRUE);
   2027a:	2001      	movs	r0, #1
   2027c:	f000 f8c0 	bl	20400 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   20280:	4b1d      	ldr	r3, [pc, #116]	; (202f8 <appSlaveAdvStart+0xa8>)
   20282:	2201      	movs	r2, #1
   20284:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   20288:	e00c      	b.n	202a4 <appSlaveAdvStart+0x54>
    }
    else
    {
      AppSetBondable(FALSE);
   2028a:	2000      	movs	r0, #0
   2028c:	f000 f8b8 	bl	20400 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   20290:	4b19      	ldr	r3, [pc, #100]	; (202f8 <appSlaveAdvStart+0xa8>)
   20292:	2200      	movs	r2, #0
   20294:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   20298:	e004      	b.n	202a4 <appSlaveAdvStart+0x54>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   2029a:	4a17      	ldr	r2, [pc, #92]	; (202f8 <appSlaveAdvStart+0xa8>)
   2029c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   202a0:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   202a4:	4b14      	ldr	r3, [pc, #80]	; (202f8 <appSlaveAdvStart+0xa8>)
   202a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   202aa:	7dba      	ldrb	r2, [r7, #22]
   202ac:	429a      	cmp	r2, r3
   202ae:	d014      	beq.n	202da <appSlaveAdvStart+0x8a>
  {
    for (i = 0; i < numSets; i++)
   202b0:	2300      	movs	r3, #0
   202b2:	75fb      	strb	r3, [r7, #23]
   202b4:	e00d      	b.n	202d2 <appSlaveAdvStart+0x82>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   202b6:	7dfb      	ldrb	r3, [r7, #23]
   202b8:	68ba      	ldr	r2, [r7, #8]
   202ba:	4413      	add	r3, r2
   202bc:	781a      	ldrb	r2, [r3, #0]
   202be:	4b0e      	ldr	r3, [pc, #56]	; (202f8 <appSlaveAdvStart+0xa8>)
   202c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   202c4:	4619      	mov	r1, r3
   202c6:	4610      	mov	r0, r2
   202c8:	f7fe ffe0 	bl	1f28c <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   202cc:	7dfb      	ldrb	r3, [r7, #23]
   202ce:	3301      	adds	r3, #1
   202d0:	75fb      	strb	r3, [r7, #23]
   202d2:	7dfa      	ldrb	r2, [r7, #23]
   202d4:	7bfb      	ldrb	r3, [r7, #15]
   202d6:	429a      	cmp	r2, r3
   202d8:	d3ed      	bcc.n	202b6 <appSlaveAdvStart+0x66>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   202da:	7bf8      	ldrb	r0, [r7, #15]
   202dc:	2301      	movs	r3, #1
   202de:	9301      	str	r3, [sp, #4]
   202e0:	6a3b      	ldr	r3, [r7, #32]
   202e2:	9300      	str	r3, [sp, #0]
   202e4:	683b      	ldr	r3, [r7, #0]
   202e6:	687a      	ldr	r2, [r7, #4]
   202e8:	68b9      	ldr	r1, [r7, #8]
   202ea:	f7ff fee9 	bl	200c0 <appAdvStart>
}
   202ee:	bf00      	nop
   202f0:	3718      	adds	r7, #24
   202f2:	46bd      	mov	sp, r7
   202f4:	bd80      	pop	{r7, pc}
   202f6:	bf00      	nop
   202f8:	1000a07c 	.word	0x1000a07c

000202fc <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   202fc:	b580      	push	{r7, lr}
   202fe:	b084      	sub	sp, #16
   20300:	af00      	add	r7, sp, #0
   20302:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   20304:	687b      	ldr	r3, [r7, #4]
   20306:	881b      	ldrh	r3, [r3, #0]
   20308:	3b01      	subs	r3, #1
   2030a:	015b      	lsls	r3, r3, #5
   2030c:	4a3b      	ldr	r2, [pc, #236]	; (203fc <AppSlaveSecProcDmMsg+0x100>)
   2030e:	4413      	add	r3, r2
   20310:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   20312:	687b      	ldr	r3, [r7, #4]
   20314:	789b      	ldrb	r3, [r3, #2]
   20316:	3b27      	subs	r3, #39	; 0x27
   20318:	2b17      	cmp	r3, #23
   2031a:	d869      	bhi.n	203f0 <AppSlaveSecProcDmMsg+0xf4>
   2031c:	a201      	add	r2, pc, #4	; (adr r2, 20324 <AppSlaveSecProcDmMsg+0x28>)
   2031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20322:	bf00      	nop
   20324:	00020385 	.word	0x00020385
   20328:	0002038f 	.word	0x0002038f
   2032c:	000203f1 	.word	0x000203f1
   20330:	00020399 	.word	0x00020399
   20334:	000203a3 	.word	0x000203a3
   20338:	000203ad 	.word	0x000203ad
   2033c:	000203f1 	.word	0x000203f1
   20340:	000203f1 	.word	0x000203f1
   20344:	000203b7 	.word	0x000203b7
   20348:	000203cb 	.word	0x000203cb
   2034c:	000203c1 	.word	0x000203c1
   20350:	000203f1 	.word	0x000203f1
   20354:	000203f1 	.word	0x000203f1
   20358:	000203f1 	.word	0x000203f1
   2035c:	000203f1 	.word	0x000203f1
   20360:	000203f1 	.word	0x000203f1
   20364:	000203f1 	.word	0x000203f1
   20368:	000203f1 	.word	0x000203f1
   2036c:	000203dd 	.word	0x000203dd
   20370:	000203e7 	.word	0x000203e7
   20374:	000203f1 	.word	0x000203f1
   20378:	000203f1 	.word	0x000203f1
   2037c:	000203f1 	.word	0x000203f1
   20380:	000203d5 	.word	0x000203d5
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   20384:	68f9      	ldr	r1, [r7, #12]
   20386:	6878      	ldr	r0, [r7, #4]
   20388:	f7ff fac8 	bl	1f91c <appSlaveSecConnOpen>
      break;
   2038c:	e031      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   2038e:	68f9      	ldr	r1, [r7, #12]
   20390:	6878      	ldr	r0, [r7, #4]
   20392:	f7ff fb05 	bl	1f9a0 <appSecConnClose>
      break;
   20396:	e02c      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   20398:	68f9      	ldr	r1, [r7, #12]
   2039a:	6878      	ldr	r0, [r7, #4]
   2039c:	f7ff fbba 	bl	1fb14 <appSecPairCmpl>
      break;
   203a0:	e027      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   203a2:	68f9      	ldr	r1, [r7, #12]
   203a4:	6878      	ldr	r0, [r7, #4]
   203a6:	f7ff fbe9 	bl	1fb7c <appSecPairFailed>
      break;
   203aa:	e022      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   203ac:	68f9      	ldr	r1, [r7, #12]
   203ae:	6878      	ldr	r0, [r7, #4]
   203b0:	f7ff fbef 	bl	1fb92 <appSecEncryptInd>
      break;
   203b4:	e01d      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   203b6:	68f9      	ldr	r1, [r7, #12]
   203b8:	6878      	ldr	r0, [r7, #4]
   203ba:	f7ff fb8b 	bl	1fad4 <appSecStoreKey>
      break;
   203be:	e018      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   203c0:	68f9      	ldr	r1, [r7, #12]
   203c2:	6878      	ldr	r0, [r7, #4]
   203c4:	f7ff fafe 	bl	1f9c4 <appSecPairInd>
      break;
   203c8:	e013      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   203ca:	68f9      	ldr	r1, [r7, #12]
   203cc:	6878      	ldr	r0, [r7, #4]
   203ce:	f7ff fbf9 	bl	1fbc4 <appSecFindLtk>
      break;
   203d2:	e00e      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   203d4:	6878      	ldr	r0, [r7, #4]
   203d6:	f7ff fc35 	bl	1fc44 <appPrivSetAddrResEnableInd>
      break;
   203da:	e00a      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   203dc:	68f9      	ldr	r1, [r7, #12]
   203de:	6878      	ldr	r0, [r7, #4]
   203e0:	f7ff fc42 	bl	1fc68 <appPrivAddDevToResListInd>
      break;
   203e4:	e005      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   203e6:	68f9      	ldr	r1, [r7, #12]
   203e8:	6878      	ldr	r0, [r7, #4]
   203ea:	f7ff fc67 	bl	1fcbc <appPrivRemDevFromResListInd>
      break;
   203ee:	e000      	b.n	203f2 <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   203f0:	bf00      	nop
  }
}
   203f2:	bf00      	nop
   203f4:	3710      	adds	r7, #16
   203f6:	46bd      	mov	sp, r7
   203f8:	bd80      	pop	{r7, pc}
   203fa:	bf00      	nop
   203fc:	10009ee4 	.word	0x10009ee4

00020400 <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   20400:	b480      	push	{r7}
   20402:	b083      	sub	sp, #12
   20404:	af00      	add	r7, sp, #0
   20406:	4603      	mov	r3, r0
   20408:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.bondable = bondable;
   2040a:	4a05      	ldr	r2, [pc, #20]	; (20420 <AppSetBondable+0x20>)
   2040c:	79fb      	ldrb	r3, [r7, #7]
   2040e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   20412:	bf00      	nop
   20414:	370c      	adds	r7, #12
   20416:	46bd      	mov	sp, r7
   20418:	f85d 7b04 	ldr.w	r7, [sp], #4
   2041c:	4770      	bx	lr
   2041e:	bf00      	nop
   20420:	1000a07c 	.word	0x1000a07c

00020424 <AppSetAdvPeerAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   20424:	b580      	push	{r7, lr}
   20426:	b082      	sub	sp, #8
   20428:	af00      	add	r7, sp, #0
   2042a:	4603      	mov	r3, r0
   2042c:	6039      	str	r1, [r7, #0]
   2042e:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.peerAddrType = peerAddrType;
   20430:	4a05      	ldr	r2, [pc, #20]	; (20448 <AppSetAdvPeerAddr+0x24>)
   20432:	79fb      	ldrb	r3, [r7, #7]
   20434:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  BdaCpy(appSlaveCb.peerAddr, pPeerAddr);
   20438:	6839      	ldr	r1, [r7, #0]
   2043a:	4804      	ldr	r0, [pc, #16]	; (2044c <AppSetAdvPeerAddr+0x28>)
   2043c:	f7f9 fbe2 	bl	19c04 <BdaCpy>
}
   20440:	bf00      	nop
   20442:	3708      	adds	r7, #8
   20444:	46bd      	mov	sp, r7
   20446:	bd80      	pop	{r7, pc}
   20448:	1000a07c 	.word	0x1000a07c
   2044c:	1000a0ac 	.word	0x1000a0ac

00020450 <AppSlaveSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecurityReq(dmConnId_t connId)
{
   20450:	b580      	push	{r7, lr}
   20452:	b082      	sub	sp, #8
   20454:	af00      	add	r7, sp, #0
   20456:	4603      	mov	r3, r0
   20458:	71fb      	strb	r3, [r7, #7]
  if (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE)
   2045a:	79fb      	ldrb	r3, [r7, #7]
   2045c:	4618      	mov	r0, r3
   2045e:	f7ef fb61 	bl	fb24 <DmConnSecLevel>
   20462:	4603      	mov	r3, r0
   20464:	2b00      	cmp	r3, #0
   20466:	d107      	bne.n	20478 <AppSlaveSecurityReq+0x28>
  {
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   20468:	4b05      	ldr	r3, [pc, #20]	; (20480 <AppSlaveSecurityReq+0x30>)
   2046a:	681b      	ldr	r3, [r3, #0]
   2046c:	781a      	ldrb	r2, [r3, #0]
   2046e:	79fb      	ldrb	r3, [r7, #7]
   20470:	4611      	mov	r1, r2
   20472:	4618      	mov	r0, r3
   20474:	f7f0 fad9 	bl	10a2a <DmSecSlaveReq>
  }
}
   20478:	bf00      	nop
   2047a:	3708      	adds	r7, #8
   2047c:	46bd      	mov	sp, r7
   2047e:	bd80      	pop	{r7, pc}
   20480:	10009ed4 	.word	0x10009ed4

00020484 <AppSlaveIsAdvertising>:
 *
 *  \return TRUE if device's advertising. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppSlaveIsAdvertising(void)
{
   20484:	b480      	push	{r7}
   20486:	b083      	sub	sp, #12
   20488:	af00      	add	r7, sp, #0
  uint8_t i;

  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   2048a:	2300      	movs	r3, #0
   2048c:	71fb      	strb	r3, [r7, #7]
   2048e:	e00b      	b.n	204a8 <AppSlaveIsAdvertising+0x24>
  {
    /* if advertising */
    if (appSlaveCb.advState[i] < APP_ADV_STOPPED)
   20490:	79fb      	ldrb	r3, [r7, #7]
   20492:	4a0a      	ldr	r2, [pc, #40]	; (204bc <AppSlaveIsAdvertising+0x38>)
   20494:	4413      	add	r3, r2
   20496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2049a:	2b02      	cmp	r3, #2
   2049c:	d801      	bhi.n	204a2 <AppSlaveIsAdvertising+0x1e>
    {
      return TRUE;
   2049e:	2301      	movs	r3, #1
   204a0:	e006      	b.n	204b0 <AppSlaveIsAdvertising+0x2c>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   204a2:	79fb      	ldrb	r3, [r7, #7]
   204a4:	3301      	adds	r3, #1
   204a6:	71fb      	strb	r3, [r7, #7]
   204a8:	79fb      	ldrb	r3, [r7, #7]
   204aa:	2b00      	cmp	r3, #0
   204ac:	d0f0      	beq.n	20490 <AppSlaveIsAdvertising+0xc>
    }
  }

  return FALSE;
   204ae:	2300      	movs	r3, #0
}
   204b0:	4618      	mov	r0, r3
   204b2:	370c      	adds	r7, #12
   204b4:	46bd      	mov	sp, r7
   204b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   204ba:	4770      	bx	lr
   204bc:	1000a07c 	.word	0x1000a07c

000204c0 <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   204c0:	b580      	push	{r7, lr}
   204c2:	b084      	sub	sp, #16
   204c4:	af02      	add	r7, sp, #8
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   204c6:	4b15      	ldr	r3, [pc, #84]	; (2051c <appSlaveLegAdvStart+0x5c>)
   204c8:	681a      	ldr	r2, [r3, #0]
   204ca:	4b15      	ldr	r3, [pc, #84]	; (20520 <appSlaveLegAdvStart+0x60>)
   204cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   204d0:	005b      	lsls	r3, r3, #1
   204d2:	4413      	add	r3, r2
   204d4:	88db      	ldrh	r3, [r3, #6]
   204d6:	80bb      	strh	r3, [r7, #4]

  /* if this advertising state is being used */
  if (interval > 0)
   204d8:	88bb      	ldrh	r3, [r7, #4]
   204da:	2b00      	cmp	r3, #0
   204dc:	d015      	beq.n	2050a <appSlaveLegAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   204de:	2300      	movs	r3, #0
   204e0:	71fb      	strb	r3, [r7, #7]
    maxEaEvents = 0;
   204e2:	2300      	movs	r3, #0
   204e4:	71bb      	strb	r3, [r7, #6]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   204e6:	4b0d      	ldr	r3, [pc, #52]	; (2051c <appSlaveLegAdvStart+0x5c>)
   204e8:	681a      	ldr	r2, [r3, #0]
   204ea:	4b0d      	ldr	r3, [pc, #52]	; (20520 <appSlaveLegAdvStart+0x60>)
   204ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    appAdvStart(1, &advHandle, &interval,
   204f0:	005b      	lsls	r3, r3, #1
   204f2:	18d0      	adds	r0, r2, r3
   204f4:	1d3a      	adds	r2, r7, #4
   204f6:	1df9      	adds	r1, r7, #7
   204f8:	2301      	movs	r3, #1
   204fa:	9301      	str	r3, [sp, #4]
   204fc:	1dbb      	adds	r3, r7, #6
   204fe:	9300      	str	r3, [sp, #0]
   20500:	4603      	mov	r3, r0
   20502:	2001      	movs	r0, #1
   20504:	f7ff fddc 	bl	200c0 <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   20508:	e003      	b.n	20512 <appSlaveLegAdvStart+0x52>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   2050a:	4b05      	ldr	r3, [pc, #20]	; (20520 <appSlaveLegAdvStart+0x60>)
   2050c:	2203      	movs	r2, #3
   2050e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   20512:	bf00      	nop
   20514:	3708      	adds	r7, #8
   20516:	46bd      	mov	sp, r7
   20518:	bd80      	pop	{r7, pc}
   2051a:	bf00      	nop
   2051c:	10009ee0 	.word	0x10009ee0
   20520:	1000a07c 	.word	0x1000a07c

00020524 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   20524:	b580      	push	{r7, lr}
   20526:	b082      	sub	sp, #8
   20528:	af00      	add	r7, sp, #0
   2052a:	6078      	str	r0, [r7, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   2052c:	4b06      	ldr	r3, [pc, #24]	; (20548 <appSlaveLegAdvTypeChanged+0x24>)
   2052e:	2200      	movs	r2, #0
   20530:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   20534:	4b04      	ldr	r3, [pc, #16]	; (20548 <appSlaveLegAdvTypeChanged+0x24>)
   20536:	2200      	movs	r2, #0
   20538:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   2053c:	f7ff ffc0 	bl	204c0 <appSlaveLegAdvStart>
}
   20540:	bf00      	nop
   20542:	3708      	adds	r7, #8
   20544:	46bd      	mov	sp, r7
   20546:	bd80      	pop	{r7, pc}
   20548:	1000a07c 	.word	0x1000a07c

0002054c <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   2054c:	b580      	push	{r7, lr}
   2054e:	b082      	sub	sp, #8
   20550:	af00      	add	r7, sp, #0
   20552:	6078      	str	r0, [r7, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   20554:	4b09      	ldr	r3, [pc, #36]	; (2057c <appSlaveNextLegAdvState+0x30>)
   20556:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2055a:	3301      	adds	r3, #1
   2055c:	b2da      	uxtb	r2, r3
   2055e:	4b07      	ldr	r3, [pc, #28]	; (2057c <appSlaveNextLegAdvState+0x30>)
   20560:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   20564:	4b05      	ldr	r3, [pc, #20]	; (2057c <appSlaveNextLegAdvState+0x30>)
   20566:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2056a:	2b02      	cmp	r3, #2
   2056c:	d801      	bhi.n	20572 <appSlaveNextLegAdvState+0x26>
  {
    appSlaveLegAdvStart();
   2056e:	f7ff ffa7 	bl	204c0 <appSlaveLegAdvStart>
  }
}
   20572:	bf00      	nop
   20574:	3708      	adds	r7, #8
   20576:	46bd      	mov	sp, r7
   20578:	bd80      	pop	{r7, pc}
   2057a:	bf00      	nop
   2057c:	1000a07c 	.word	0x1000a07c

00020580 <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   20580:	b580      	push	{r7, lr}
   20582:	b082      	sub	sp, #8
   20584:	af00      	add	r7, sp, #0
   20586:	6078      	str	r0, [r7, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   20588:	687b      	ldr	r3, [r7, #4]
   2058a:	789b      	ldrb	r3, [r3, #2]
   2058c:	2b47      	cmp	r3, #71	; 0x47
   2058e:	d103      	bne.n	20598 <appSlaveLegAdvStop+0x18>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   20590:	687b      	ldr	r3, [r7, #4]
   20592:	791b      	ldrb	r3, [r3, #4]
   20594:	2b00      	cmp	r3, #0
   20596:	d00c      	beq.n	205b2 <appSlaveLegAdvStop+0x32>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   20598:	4b08      	ldr	r3, [pc, #32]	; (205bc <appSlaveLegAdvStop+0x3c>)
   2059a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   2059e:	2b00      	cmp	r3, #0
   205a0:	d003      	beq.n	205aa <appSlaveLegAdvStop+0x2a>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   205a2:	6878      	ldr	r0, [r7, #4]
   205a4:	f7ff ffbe 	bl	20524 <appSlaveLegAdvTypeChanged>
   205a8:	e004      	b.n	205b4 <appSlaveLegAdvStop+0x34>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   205aa:	6878      	ldr	r0, [r7, #4]
   205ac:	f7ff ffce 	bl	2054c <appSlaveNextLegAdvState>
   205b0:	e000      	b.n	205b4 <appSlaveLegAdvStop+0x34>
      return;
   205b2:	bf00      	nop
  }
}
   205b4:	3708      	adds	r7, #8
   205b6:	46bd      	mov	sp, r7
   205b8:	bd80      	pop	{r7, pc}
   205ba:	bf00      	nop
   205bc:	1000a07c 	.word	0x1000a07c

000205c0 <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   205c0:	b580      	push	{r7, lr}
   205c2:	b082      	sub	sp, #8
   205c4:	af00      	add	r7, sp, #0
   205c6:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   205c8:	687b      	ldr	r3, [r7, #4]
   205ca:	789b      	ldrb	r3, [r3, #2]
   205cc:	2b27      	cmp	r3, #39	; 0x27
   205ce:	d103      	bne.n	205d8 <appSlaveLegAdvRestart+0x18>
  {
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   205d0:	4b09      	ldr	r3, [pc, #36]	; (205f8 <appSlaveLegAdvRestart+0x38>)
   205d2:	2203      	movs	r2, #3
   205d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   205d8:	4b07      	ldr	r3, [pc, #28]	; (205f8 <appSlaveLegAdvRestart+0x38>)
   205da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   205de:	2b03      	cmp	r3, #3
   205e0:	d105      	bne.n	205ee <appSlaveLegAdvRestart+0x2e>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   205e2:	4b05      	ldr	r3, [pc, #20]	; (205f8 <appSlaveLegAdvRestart+0x38>)
   205e4:	2200      	movs	r2, #0
   205e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   205ea:	f7ff ff69 	bl	204c0 <appSlaveLegAdvStart>
  }
}
   205ee:	bf00      	nop
   205f0:	3708      	adds	r7, #8
   205f2:	46bd      	mov	sp, r7
   205f4:	bd80      	pop	{r7, pc}
   205f6:	bf00      	nop
   205f8:	1000a07c 	.word	0x1000a07c

000205fc <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   205fc:	b580      	push	{r7, lr}
   205fe:	af00      	add	r7, sp, #0
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   20600:	4b0c      	ldr	r3, [pc, #48]	; (20634 <appSlaveAdvMode+0x38>)
   20602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20604:	2b00      	cmp	r3, #0
   20606:	d107      	bne.n	20618 <appSlaveAdvMode+0x1c>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   20608:	4b0a      	ldr	r3, [pc, #40]	; (20634 <appSlaveAdvMode+0x38>)
   2060a:	4a0b      	ldr	r2, [pc, #44]	; (20638 <appSlaveAdvMode+0x3c>)
   2060c:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   2060e:	4b09      	ldr	r3, [pc, #36]	; (20634 <appSlaveAdvMode+0x38>)
   20610:	4a0a      	ldr	r2, [pc, #40]	; (2063c <appSlaveAdvMode+0x40>)
   20612:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   20614:	2301      	movs	r3, #1
   20616:	e00a      	b.n	2062e <appSlaveAdvMode+0x32>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   20618:	4b06      	ldr	r3, [pc, #24]	; (20634 <appSlaveAdvMode+0x38>)
   2061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2061c:	4a06      	ldr	r2, [pc, #24]	; (20638 <appSlaveAdvMode+0x3c>)
   2061e:	4293      	cmp	r3, r2
   20620:	d101      	bne.n	20626 <appSlaveAdvMode+0x2a>
  {
    return TRUE;
   20622:	2301      	movs	r3, #1
   20624:	e003      	b.n	2062e <appSlaveAdvMode+0x32>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   20626:	4806      	ldr	r0, [pc, #24]	; (20640 <appSlaveAdvMode+0x44>)
   20628:	f7fb f942 	bl	1b8b0 <WsfTrace>

  return FALSE;
   2062c:	2300      	movs	r3, #0
}
   2062e:	4618      	mov	r0, r3
   20630:	bd80      	pop	{r7, pc}
   20632:	bf00      	nop
   20634:	1000a07c 	.word	0x1000a07c
   20638:	00020581 	.word	0x00020581
   2063c:	000205c1 	.word	0x000205c1
   20640:	00025b4c 	.word	0x00025b4c

00020644 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   20644:	b580      	push	{r7, lr}
   20646:	b084      	sub	sp, #16
   20648:	af02      	add	r7, sp, #8
   2064a:	4603      	mov	r3, r0
   2064c:	603a      	str	r2, [r7, #0]
   2064e:	71fb      	strb	r3, [r7, #7]
   20650:	460b      	mov	r3, r1
   20652:	71bb      	strb	r3, [r7, #6]
  if (appSlaveAdvMode())
   20654:	f7ff ffd2 	bl	205fc <appSlaveAdvMode>
   20658:	4603      	mov	r3, r0
   2065a:	2b00      	cmp	r3, #0
   2065c:	d00f      	beq.n	2067e <AppAdvSetData+0x3a>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   2065e:	79bb      	ldrb	r3, [r7, #6]
   20660:	2b1f      	cmp	r3, #31
   20662:	d901      	bls.n	20668 <AppAdvSetData+0x24>
    {
      len = HCI_ADV_DATA_LEN;
   20664:	231f      	movs	r3, #31
   20666:	71bb      	strb	r3, [r7, #6]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   20668:	79bb      	ldrb	r3, [r7, #6]
   2066a:	b29a      	uxth	r2, r3
   2066c:	79f9      	ldrb	r1, [r7, #7]
   2066e:	231f      	movs	r3, #31
   20670:	9301      	str	r3, [sp, #4]
   20672:	231f      	movs	r3, #31
   20674:	9300      	str	r3, [sp, #0]
   20676:	683b      	ldr	r3, [r7, #0]
   20678:	2000      	movs	r0, #0
   2067a:	f7ff fcc5 	bl	20008 <appAdvSetData>
  }
}
   2067e:	bf00      	nop
   20680:	3708      	adds	r7, #8
   20682:	46bd      	mov	sp, r7
   20684:	bd80      	pop	{r7, pc}
	...

00020688 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   20688:	b580      	push	{r7, lr}
   2068a:	b088      	sub	sp, #32
   2068c:	af04      	add	r7, sp, #16
   2068e:	4603      	mov	r3, r0
   20690:	71fb      	strb	r3, [r7, #7]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   20692:	f7ff ffb3 	bl	205fc <appSlaveAdvMode>
   20696:	4603      	mov	r3, r0
   20698:	2b00      	cmp	r3, #0
   2069a:	d01a      	beq.n	206d2 <AppAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2069c:	2300      	movs	r3, #0
   2069e:	73fb      	strb	r3, [r7, #15]
    maxEaEvents = 0;
   206a0:	2300      	movs	r3, #0
   206a2:	73bb      	strb	r3, [r7, #14]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   206a4:	4b0d      	ldr	r3, [pc, #52]	; (206dc <AppAdvStart+0x54>)
   206a6:	2200      	movs	r2, #0
   206a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   206ac:	4b0c      	ldr	r3, [pc, #48]	; (206e0 <AppAdvStart+0x58>)
   206ae:	681b      	ldr	r3, [r3, #0]
   206b0:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   206b2:	4b0b      	ldr	r3, [pc, #44]	; (206e0 <AppAdvStart+0x58>)
   206b4:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   206b6:	4618      	mov	r0, r3
   206b8:	f107 010f 	add.w	r1, r7, #15
   206bc:	79fb      	ldrb	r3, [r7, #7]
   206be:	9302      	str	r3, [sp, #8]
   206c0:	2301      	movs	r3, #1
   206c2:	9301      	str	r3, [sp, #4]
   206c4:	f107 030e 	add.w	r3, r7, #14
   206c8:	9300      	str	r3, [sp, #0]
   206ca:	4603      	mov	r3, r0
   206cc:	2001      	movs	r0, #1
   206ce:	f7ff fdbf 	bl	20250 <appSlaveAdvStart>
  }
}
   206d2:	bf00      	nop
   206d4:	3710      	adds	r7, #16
   206d6:	46bd      	mov	sp, r7
   206d8:	bd80      	pop	{r7, pc}
   206da:	bf00      	nop
   206dc:	1000a07c 	.word	0x1000a07c
   206e0:	10009ee0 	.word	0x10009ee0

000206e4 <AppAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStop(void)
{
   206e4:	b580      	push	{r7, lr}
   206e6:	b082      	sub	sp, #8
   206e8:	af00      	add	r7, sp, #0
  uint8_t advHandle;

  if (appSlaveAdvMode())
   206ea:	f7ff ff87 	bl	205fc <appSlaveAdvMode>
   206ee:	4603      	mov	r3, r0
   206f0:	2b00      	cmp	r3, #0
   206f2:	d006      	beq.n	20702 <AppAdvStop+0x1e>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   206f4:	2300      	movs	r3, #0
   206f6:	71fb      	strb	r3, [r7, #7]

    appAdvStop(1, &advHandle);
   206f8:	1dfb      	adds	r3, r7, #7
   206fa:	4619      	mov	r1, r3
   206fc:	2001      	movs	r0, #1
   206fe:	f7ff fd65 	bl	201cc <appAdvStop>
  }
}
   20702:	bf00      	nop
   20704:	3708      	adds	r7, #8
   20706:	46bd      	mov	sp, r7
   20708:	bd80      	pop	{r7, pc}
	...

0002070c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   2070c:	b580      	push	{r7, lr}
   2070e:	b088      	sub	sp, #32
   20710:	af00      	add	r7, sp, #0
   20712:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   20714:	f107 030c 	add.w	r3, r7, #12
   20718:	4618      	mov	r0, r3
   2071a:	f002 ff39 	bl	23590 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   2071e:	68fb      	ldr	r3, [r7, #12]
   20720:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   20722:	69fb      	ldr	r3, [r7, #28]
   20724:	4a07      	ldr	r2, [pc, #28]	; (20744 <am_util_delay_ms+0x38>)
   20726:	fba2 2303 	umull	r2, r3, r2, r3
   2072a:	099b      	lsrs	r3, r3, #6
   2072c:	687a      	ldr	r2, [r7, #4]
   2072e:	fb02 f303 	mul.w	r3, r2, r3
   20732:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   20734:	69b8      	ldr	r0, [r7, #24]
   20736:	f002 ff89 	bl	2364c <am_hal_flash_delay>
}
   2073a:	bf00      	nop
   2073c:	3720      	adds	r7, #32
   2073e:	46bd      	mov	sp, r7
   20740:	bd80      	pop	{r7, pc}
   20742:	bf00      	nop
   20744:	057619f1 	.word	0x057619f1

00020748 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   20748:	b580      	push	{r7, lr}
   2074a:	b088      	sub	sp, #32
   2074c:	af00      	add	r7, sp, #0
   2074e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   20750:	f107 030c 	add.w	r3, r7, #12
   20754:	4618      	mov	r0, r3
   20756:	f002 ff1b 	bl	23590 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   2075a:	68fb      	ldr	r3, [r7, #12]
   2075c:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   2075e:	69fb      	ldr	r3, [r7, #28]
   20760:	4a07      	ldr	r2, [pc, #28]	; (20780 <am_util_delay_us+0x38>)
   20762:	fba2 2303 	umull	r2, r3, r2, r3
   20766:	0c9b      	lsrs	r3, r3, #18
   20768:	687a      	ldr	r2, [r7, #4]
   2076a:	fb02 f303 	mul.w	r3, r2, r3
   2076e:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   20770:	69b8      	ldr	r0, [r7, #24]
   20772:	f002 ff6b 	bl	2364c <am_hal_flash_delay>
}
   20776:	bf00      	nop
   20778:	3720      	adds	r7, #32
   2077a:	46bd      	mov	sp, r7
   2077c:	bd80      	pop	{r7, pc}
   2077e:	bf00      	nop
   20780:	165e9f81 	.word	0x165e9f81

00020784 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   20784:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   20786:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   2078a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   2078c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   20790:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   20794:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   20798:	f000 f80a 	bl	207b0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   2079c:	bd01      	pop	{r0, pc}
}
   2079e:	bf00      	nop
   207a0:	4618      	mov	r0, r3

000207a2 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   207a2:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   207a4:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   207a6:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   207a8:	4770      	bx	lr
}
   207aa:	bf00      	nop
   207ac:	4618      	mov	r0, r3
	...

000207b0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   207b0:	b580      	push	{r7, lr}
   207b2:	b096      	sub	sp, #88	; 0x58
   207b4:	af00      	add	r7, sp, #0
   207b6:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   207b8:	f107 030c 	add.w	r3, r7, #12
   207bc:	2200      	movs	r2, #0
   207be:	601a      	str	r2, [r3, #0]
   207c0:	605a      	str	r2, [r3, #4]
   207c2:	609a      	str	r2, [r3, #8]
   207c4:	60da      	str	r2, [r3, #12]
   207c6:	611a      	str	r2, [r3, #16]
   207c8:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   207ca:	2300      	movs	r3, #0
   207cc:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   207ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   207d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   207d2:	4b2e      	ldr	r3, [pc, #184]	; (2088c <am_util_faultisr_collect_data+0xdc>)
   207d4:	681b      	ldr	r3, [r3, #0]
   207d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   207d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   207da:	b2db      	uxtb	r3, r3
   207dc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   207e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   207e2:	0a1b      	lsrs	r3, r3, #8
   207e4:	b2db      	uxtb	r3, r3
   207e6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   207ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   207ec:	0c1b      	lsrs	r3, r3, #16
   207ee:	b29b      	uxth	r3, r3
   207f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   207f4:	4b26      	ldr	r3, [pc, #152]	; (20890 <am_util_faultisr_collect_data+0xe0>)
   207f6:	681b      	ldr	r3, [r3, #0]
   207f8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   207fa:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   207fe:	b2db      	uxtb	r3, r3
   20800:	f003 0302 	and.w	r3, r3, #2
   20804:	2b00      	cmp	r3, #0
   20806:	d005      	beq.n	20814 <am_util_faultisr_collect_data+0x64>
   20808:	6879      	ldr	r1, [r7, #4]
   2080a:	2006      	movs	r0, #6
   2080c:	f7ff ffc9 	bl	207a2 <getStackedReg>
   20810:	4603      	mov	r3, r0
   20812:	e001      	b.n	20818 <am_util_faultisr_collect_data+0x68>
   20814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20818:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   2081a:	6879      	ldr	r1, [r7, #4]
   2081c:	2000      	movs	r0, #0
   2081e:	f7ff ffc0 	bl	207a2 <getStackedReg>
   20822:	4603      	mov	r3, r0
   20824:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   20826:	6879      	ldr	r1, [r7, #4]
   20828:	2001      	movs	r0, #1
   2082a:	f7ff ffba 	bl	207a2 <getStackedReg>
   2082e:	4603      	mov	r3, r0
   20830:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   20832:	6879      	ldr	r1, [r7, #4]
   20834:	2002      	movs	r0, #2
   20836:	f7ff ffb4 	bl	207a2 <getStackedReg>
   2083a:	4603      	mov	r3, r0
   2083c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   2083e:	6879      	ldr	r1, [r7, #4]
   20840:	2003      	movs	r0, #3
   20842:	f7ff ffae 	bl	207a2 <getStackedReg>
   20846:	4603      	mov	r3, r0
   20848:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   2084a:	6879      	ldr	r1, [r7, #4]
   2084c:	2004      	movs	r0, #4
   2084e:	f7ff ffa8 	bl	207a2 <getStackedReg>
   20852:	4603      	mov	r3, r0
   20854:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   20856:	6879      	ldr	r1, [r7, #4]
   20858:	2005      	movs	r0, #5
   2085a:	f7ff ffa2 	bl	207a2 <getStackedReg>
   2085e:	4603      	mov	r3, r0
   20860:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   20862:	6879      	ldr	r1, [r7, #4]
   20864:	2006      	movs	r0, #6
   20866:	f7ff ff9c 	bl	207a2 <getStackedReg>
   2086a:	4603      	mov	r3, r0
   2086c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   2086e:	6879      	ldr	r1, [r7, #4]
   20870:	2007      	movs	r0, #7
   20872:	f7ff ff96 	bl	207a2 <getStackedReg>
   20876:	4603      	mov	r3, r0
   20878:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   2087a:	f107 030c 	add.w	r3, r7, #12
   2087e:	4619      	mov	r1, r3
   20880:	2002      	movs	r0, #2
   20882:	f003 f97d 	bl	23b80 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
   20886:	2300      	movs	r3, #0
   20888:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   2088a:	e7fe      	b.n	2088a <am_util_faultisr_collect_data+0xda>
   2088c:	e000ed28 	.word	0xe000ed28
   20890:	e000ed38 	.word	0xe000ed38

00020894 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   20894:	b480      	push	{r7}
   20896:	b083      	sub	sp, #12
   20898:	af00      	add	r7, sp, #0
   2089a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   2089c:	4a04      	ldr	r2, [pc, #16]	; (208b0 <am_util_stdio_printf_init+0x1c>)
   2089e:	687b      	ldr	r3, [r7, #4]
   208a0:	6013      	str	r3, [r2, #0]
}
   208a2:	bf00      	nop
   208a4:	370c      	adds	r7, #12
   208a6:	46bd      	mov	sp, r7
   208a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   208ac:	4770      	bx	lr
   208ae:	bf00      	nop
   208b0:	1000a0c4 	.word	0x1000a0c4

000208b4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   208b4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   208b8:	b096      	sub	sp, #88	; 0x58
   208ba:	af00      	add	r7, sp, #0
   208bc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   208c0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   208c4:	0025      	movs	r5, r4
   208c6:	2600      	movs	r6, #0
   208c8:	ea55 0306 	orrs.w	r3, r5, r6
   208cc:	f000 80a0 	beq.w	20a10 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   208d0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   208d4:	0862      	lsrs	r2, r4, #1
   208d6:	ea4f 0133 	mov.w	r1, r3, rrx
   208da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   208de:	ea4f 0893 	mov.w	r8, r3, lsr #2
   208e2:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
   208e6:	ea4f 0994 	mov.w	r9, r4, lsr #2
   208ea:	eb11 0308 	adds.w	r3, r1, r8
   208ee:	eb42 0409 	adc.w	r4, r2, r9
   208f2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
   208f6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   208fa:	ea4f 1a13 	mov.w	sl, r3, lsr #4
   208fe:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
   20902:	ea4f 1b14 	mov.w	fp, r4, lsr #4
   20906:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2090a:	eb13 030a 	adds.w	r3, r3, sl
   2090e:	eb44 040b 	adc.w	r4, r4, fp
   20912:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
   20916:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2091a:	0a1a      	lsrs	r2, r3, #8
   2091c:	62ba      	str	r2, [r7, #40]	; 0x28
   2091e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20920:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   20924:	62ba      	str	r2, [r7, #40]	; 0x28
   20926:	0a23      	lsrs	r3, r4, #8
   20928:	62fb      	str	r3, [r7, #44]	; 0x2c
   2092a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2092e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   20932:	18c9      	adds	r1, r1, r3
   20934:	eb42 0204 	adc.w	r2, r2, r4
   20938:	460b      	mov	r3, r1
   2093a:	4614      	mov	r4, r2
   2093c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
   20940:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   20944:	0c1a      	lsrs	r2, r3, #16
   20946:	623a      	str	r2, [r7, #32]
   20948:	6a3a      	ldr	r2, [r7, #32]
   2094a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   2094e:	623a      	str	r2, [r7, #32]
   20950:	0c23      	lsrs	r3, r4, #16
   20952:	627b      	str	r3, [r7, #36]	; 0x24
   20954:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   20958:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
   2095c:	18c9      	adds	r1, r1, r3
   2095e:	eb42 0204 	adc.w	r2, r2, r4
   20962:	460b      	mov	r3, r1
   20964:	4614      	mov	r4, r2
   20966:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
   2096a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2096e:	0023      	movs	r3, r4
   20970:	603b      	str	r3, [r7, #0]
   20972:	2300      	movs	r3, #0
   20974:	607b      	str	r3, [r7, #4]
   20976:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2097a:	e9d7 1200 	ldrd	r1, r2, [r7]
   2097e:	18c9      	adds	r1, r1, r3
   20980:	eb42 0204 	adc.w	r2, r2, r4
   20984:	460b      	mov	r3, r1
   20986:	4614      	mov	r4, r2
   20988:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
   2098c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   20990:	08da      	lsrs	r2, r3, #3
   20992:	613a      	str	r2, [r7, #16]
   20994:	693a      	ldr	r2, [r7, #16]
   20996:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
   2099a:	613a      	str	r2, [r7, #16]
   2099c:	08e3      	lsrs	r3, r4, #3
   2099e:	617b      	str	r3, [r7, #20]
   209a0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   209a4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
   209a8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
   209ac:	460b      	mov	r3, r1
   209ae:	4614      	mov	r4, r2
   209b0:	00a0      	lsls	r0, r4, #2
   209b2:	60f8      	str	r0, [r7, #12]
   209b4:	68f8      	ldr	r0, [r7, #12]
   209b6:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   209ba:	60f8      	str	r0, [r7, #12]
   209bc:	009b      	lsls	r3, r3, #2
   209be:	60bb      	str	r3, [r7, #8]
   209c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   209c4:	185b      	adds	r3, r3, r1
   209c6:	eb44 0402 	adc.w	r4, r4, r2
   209ca:	18db      	adds	r3, r3, r3
   209cc:	eb44 0404 	adc.w	r4, r4, r4
   209d0:	4619      	mov	r1, r3
   209d2:	4622      	mov	r2, r4
   209d4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   209d8:	1a5b      	subs	r3, r3, r1
   209da:	eb64 0402 	sbc.w	r4, r4, r2
   209de:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
   209e2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
   209e6:	3306      	adds	r3, #6
   209e8:	f144 0400 	adc.w	r4, r4, #0
   209ec:	091a      	lsrs	r2, r3, #4
   209ee:	61ba      	str	r2, [r7, #24]
   209f0:	69ba      	ldr	r2, [r7, #24]
   209f2:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
   209f6:	61ba      	str	r2, [r7, #24]
   209f8:	0923      	lsrs	r3, r4, #4
   209fa:	61fb      	str	r3, [r7, #28]
   209fc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   20a00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
   20a04:	18c9      	adds	r1, r1, r3
   20a06:	eb42 0204 	adc.w	r2, r2, r4
   20a0a:	460b      	mov	r3, r1
   20a0c:	4614      	mov	r4, r2
   20a0e:	e029      	b.n	20a64 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   20a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20a12:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
   20a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20a16:	085a      	lsrs	r2, r3, #1
   20a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20a1a:	089b      	lsrs	r3, r3, #2
   20a1c:	4413      	add	r3, r2
   20a1e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
   20a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20a22:	091b      	lsrs	r3, r3, #4
   20a24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   20a26:	4413      	add	r3, r2
   20a28:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
   20a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20a2c:	0a1b      	lsrs	r3, r3, #8
   20a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   20a30:	4413      	add	r3, r2
   20a32:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
   20a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20a36:	0c1b      	lsrs	r3, r3, #16
   20a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   20a3a:	4413      	add	r3, r2
   20a3c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
   20a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20a40:	08db      	lsrs	r3, r3, #3
   20a42:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
   20a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   20a46:	4613      	mov	r3, r2
   20a48:	009b      	lsls	r3, r3, #2
   20a4a:	4413      	add	r3, r2
   20a4c:	005b      	lsls	r3, r3, #1
   20a4e:	461a      	mov	r2, r3
   20a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20a52:	1a9b      	subs	r3, r3, r2
   20a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   20a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20a58:	3306      	adds	r3, #6
   20a5a:	091a      	lsrs	r2, r3, #4
   20a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20a5e:	4413      	add	r3, r2
   20a60:	f04f 0400 	mov.w	r4, #0
    }
}
   20a64:	4618      	mov	r0, r3
   20a66:	4621      	mov	r1, r4
   20a68:	3758      	adds	r7, #88	; 0x58
   20a6a:	46bd      	mov	sp, r7
   20a6c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   20a70:	4770      	bx	lr

00020a72 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   20a72:	b590      	push	{r4, r7, lr}
   20a74:	b085      	sub	sp, #20
   20a76:	af00      	add	r7, sp, #0
   20a78:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   20a7c:	683a      	ldr	r2, [r7, #0]
   20a7e:	687b      	ldr	r3, [r7, #4]
   20a80:	4313      	orrs	r3, r2
   20a82:	2b00      	cmp	r3, #0
   20a84:	bf0c      	ite	eq
   20a86:	2301      	moveq	r3, #1
   20a88:	2300      	movne	r3, #0
   20a8a:	b2db      	uxtb	r3, r3
   20a8c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   20a8e:	e008      	b.n	20aa2 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   20a90:	e9d7 0100 	ldrd	r0, r1, [r7]
   20a94:	f7ff ff0e 	bl	208b4 <divu64_10>
   20a98:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   20a9c:	68fb      	ldr	r3, [r7, #12]
   20a9e:	3301      	adds	r3, #1
   20aa0:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   20aa2:	e9d7 3400 	ldrd	r3, r4, [r7]
   20aa6:	4323      	orrs	r3, r4
   20aa8:	d1f2      	bne.n	20a90 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
   20aaa:	68fb      	ldr	r3, [r7, #12]
}
   20aac:	4618      	mov	r0, r3
   20aae:	3714      	adds	r7, #20
   20ab0:	46bd      	mov	sp, r7
   20ab2:	bd90      	pop	{r4, r7, pc}

00020ab4 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   20ab4:	b590      	push	{r4, r7, lr}
   20ab6:	b083      	sub	sp, #12
   20ab8:	af00      	add	r7, sp, #0
   20aba:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   20abe:	e9d7 3400 	ldrd	r3, r4, [r7]
   20ac2:	2b00      	cmp	r3, #0
   20ac4:	f174 0300 	sbcs.w	r3, r4, #0
   20ac8:	da06      	bge.n	20ad8 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   20aca:	e9d7 3400 	ldrd	r3, r4, [r7]
   20ace:	425b      	negs	r3, r3
   20ad0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   20ad4:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   20ad8:	e9d7 3400 	ldrd	r3, r4, [r7]
   20adc:	4618      	mov	r0, r3
   20ade:	4621      	mov	r1, r4
   20ae0:	f7ff ffc7 	bl	20a72 <ndigits_in_u64>
   20ae4:	4603      	mov	r3, r0
}
   20ae6:	4618      	mov	r0, r3
   20ae8:	370c      	adds	r7, #12
   20aea:	46bd      	mov	sp, r7
   20aec:	bd90      	pop	{r4, r7, pc}

00020aee <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   20aee:	b490      	push	{r4, r7}
   20af0:	b084      	sub	sp, #16
   20af2:	af00      	add	r7, sp, #0
   20af4:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   20af8:	6839      	ldr	r1, [r7, #0]
   20afa:	687a      	ldr	r2, [r7, #4]
   20afc:	430a      	orrs	r2, r1
   20afe:	2a00      	cmp	r2, #0
   20b00:	bf0c      	ite	eq
   20b02:	2201      	moveq	r2, #1
   20b04:	2200      	movne	r2, #0
   20b06:	b2d2      	uxtb	r2, r2
   20b08:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
   20b0a:	e00a      	b.n	20b22 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
   20b0c:	e9d7 1200 	ldrd	r1, r2, [r7]
   20b10:	090b      	lsrs	r3, r1, #4
   20b12:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   20b16:	0914      	lsrs	r4, r2, #4
   20b18:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
   20b1c:	68fa      	ldr	r2, [r7, #12]
   20b1e:	3201      	adds	r2, #1
   20b20:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
   20b22:	e9d7 1200 	ldrd	r1, r2, [r7]
   20b26:	430a      	orrs	r2, r1
   20b28:	d1f0      	bne.n	20b0c <ndigits_in_hex+0x1e>
    }

    return iDigits;
   20b2a:	68fb      	ldr	r3, [r7, #12]
}
   20b2c:	4618      	mov	r0, r3
   20b2e:	3710      	adds	r7, #16
   20b30:	46bd      	mov	sp, r7
   20b32:	bc90      	pop	{r4, r7}
   20b34:	4770      	bx	lr

00020b36 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   20b36:	b480      	push	{r7}
   20b38:	b087      	sub	sp, #28
   20b3a:	af00      	add	r7, sp, #0
   20b3c:	6078      	str	r0, [r7, #4]
   20b3e:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   20b40:	2300      	movs	r3, #0
   20b42:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   20b44:	2300      	movs	r3, #0
   20b46:	613b      	str	r3, [r7, #16]
   20b48:	2300      	movs	r3, #0
   20b4a:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   20b4c:	687b      	ldr	r3, [r7, #4]
   20b4e:	781b      	ldrb	r3, [r3, #0]
   20b50:	2b2d      	cmp	r3, #45	; 0x2d
   20b52:	d11b      	bne.n	20b8c <decstr_to_int+0x56>
    {
        bNeg = true;
   20b54:	2301      	movs	r3, #1
   20b56:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   20b58:	687b      	ldr	r3, [r7, #4]
   20b5a:	3301      	adds	r3, #1
   20b5c:	607b      	str	r3, [r7, #4]
        uCnt++;
   20b5e:	68fb      	ldr	r3, [r7, #12]
   20b60:	3301      	adds	r3, #1
   20b62:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20b64:	e012      	b.n	20b8c <decstr_to_int+0x56>
    {
        ++uCnt;
   20b66:	68fb      	ldr	r3, [r7, #12]
   20b68:	3301      	adds	r3, #1
   20b6a:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   20b6c:	693a      	ldr	r2, [r7, #16]
   20b6e:	4613      	mov	r3, r2
   20b70:	009b      	lsls	r3, r3, #2
   20b72:	4413      	add	r3, r2
   20b74:	005b      	lsls	r3, r3, #1
   20b76:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   20b78:	687b      	ldr	r3, [r7, #4]
   20b7a:	781b      	ldrb	r3, [r3, #0]
   20b7c:	461a      	mov	r2, r3
   20b7e:	693b      	ldr	r3, [r7, #16]
   20b80:	4413      	add	r3, r2
   20b82:	3b30      	subs	r3, #48	; 0x30
   20b84:	613b      	str	r3, [r7, #16]
        pcStr++;
   20b86:	687b      	ldr	r3, [r7, #4]
   20b88:	3301      	adds	r3, #1
   20b8a:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20b8c:	687b      	ldr	r3, [r7, #4]
   20b8e:	781b      	ldrb	r3, [r3, #0]
   20b90:	2b2f      	cmp	r3, #47	; 0x2f
   20b92:	d903      	bls.n	20b9c <decstr_to_int+0x66>
   20b94:	687b      	ldr	r3, [r7, #4]
   20b96:	781b      	ldrb	r3, [r3, #0]
   20b98:	2b39      	cmp	r3, #57	; 0x39
   20b9a:	d9e4      	bls.n	20b66 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   20b9c:	683b      	ldr	r3, [r7, #0]
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	d002      	beq.n	20ba8 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   20ba2:	683b      	ldr	r3, [r7, #0]
   20ba4:	68fa      	ldr	r2, [r7, #12]
   20ba6:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   20ba8:	7dfb      	ldrb	r3, [r7, #23]
   20baa:	2b00      	cmp	r3, #0
   20bac:	d002      	beq.n	20bb4 <decstr_to_int+0x7e>
   20bae:	693b      	ldr	r3, [r7, #16]
   20bb0:	425b      	negs	r3, r3
   20bb2:	e000      	b.n	20bb6 <decstr_to_int+0x80>
   20bb4:	693b      	ldr	r3, [r7, #16]
}
   20bb6:	4618      	mov	r0, r3
   20bb8:	371c      	adds	r7, #28
   20bba:	46bd      	mov	sp, r7
   20bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   20bc0:	4770      	bx	lr

00020bc2 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   20bc2:	b590      	push	{r4, r7, lr}
   20bc4:	b091      	sub	sp, #68	; 0x44
   20bc6:	af00      	add	r7, sp, #0
   20bc8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   20bcc:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   20bce:	2300      	movs	r3, #0
   20bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   20bd2:	2300      	movs	r3, #0
   20bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   20bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   20bda:	f7ff fe6b 	bl	208b4 <divu64_10>
   20bde:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   20be2:	68b9      	ldr	r1, [r7, #8]
   20be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20be6:	4613      	mov	r3, r2
   20be8:	009b      	lsls	r3, r3, #2
   20bea:	4413      	add	r3, r2
   20bec:	005b      	lsls	r3, r3, #1
   20bee:	1acb      	subs	r3, r1, r3
   20bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   20bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20bf4:	1c5a      	adds	r2, r3, #1
   20bf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   20bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20bfa:	b2d2      	uxtb	r2, r2
   20bfc:	3230      	adds	r2, #48	; 0x30
   20bfe:	b2d2      	uxtb	r2, r2
   20c00:	f107 0140 	add.w	r1, r7, #64	; 0x40
   20c04:	440b      	add	r3, r1
   20c06:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   20c0a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   20c0e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
   20c12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   20c16:	4323      	orrs	r3, r4
   20c18:	d1dd      	bne.n	20bd6 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   20c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20c1c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   20c1e:	687b      	ldr	r3, [r7, #4]
   20c20:	2b00      	cmp	r3, #0
   20c22:	d011      	beq.n	20c48 <uint64_to_str+0x86>
    {
        while ( ix-- )
   20c24:	e008      	b.n	20c38 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
   20c26:	687b      	ldr	r3, [r7, #4]
   20c28:	1c5a      	adds	r2, r3, #1
   20c2a:	607a      	str	r2, [r7, #4]
   20c2c:	f107 0110 	add.w	r1, r7, #16
   20c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   20c32:	440a      	add	r2, r1
   20c34:	7812      	ldrb	r2, [r2, #0]
   20c36:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   20c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20c3a:	1e5a      	subs	r2, r3, #1
   20c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   20c3e:	2b00      	cmp	r3, #0
   20c40:	d1f1      	bne.n	20c26 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   20c42:	687b      	ldr	r3, [r7, #4]
   20c44:	2200      	movs	r2, #0
   20c46:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   20c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   20c4a:	4618      	mov	r0, r3
   20c4c:	3744      	adds	r7, #68	; 0x44
   20c4e:	46bd      	mov	sp, r7
   20c50:	bd90      	pop	{r4, r7, pc}

00020c52 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   20c52:	b4b0      	push	{r4, r5, r7}
   20c54:	b08d      	sub	sp, #52	; 0x34
   20c56:	af00      	add	r7, sp, #0
   20c58:	e9c7 0102 	strd	r0, r1, [r7, #8]
   20c5c:	607a      	str	r2, [r7, #4]
   20c5e:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   20c60:	2300      	movs	r3, #0
   20c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   20c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20c68:	4313      	orrs	r3, r2
   20c6a:	d131      	bne.n	20cd0 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
   20c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20c6e:	1c5a      	adds	r2, r3, #1
   20c70:	62fa      	str	r2, [r7, #44]	; 0x2c
   20c72:	f107 0230 	add.w	r2, r7, #48	; 0x30
   20c76:	4413      	add	r3, r2
   20c78:	2230      	movs	r2, #48	; 0x30
   20c7a:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   20c7e:	e027      	b.n	20cd0 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
   20c80:	7a3b      	ldrb	r3, [r7, #8]
   20c82:	f003 030f 	and.w	r3, r3, #15
   20c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   20c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   20c8e:	2b09      	cmp	r3, #9
   20c90:	d90a      	bls.n	20ca8 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   20c92:	78fb      	ldrb	r3, [r7, #3]
   20c94:	2b00      	cmp	r3, #0
   20c96:	d001      	beq.n	20c9c <uint64_to_hexstr+0x4a>
   20c98:	2227      	movs	r2, #39	; 0x27
   20c9a:	e000      	b.n	20c9e <uint64_to_hexstr+0x4c>
   20c9c:	2207      	movs	r2, #7
   20c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   20ca2:	4413      	add	r3, r2
   20ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   20ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20caa:	1c5a      	adds	r2, r3, #1
   20cac:	62fa      	str	r2, [r7, #44]	; 0x2c
   20cae:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   20cb2:	3230      	adds	r2, #48	; 0x30
   20cb4:	b2d2      	uxtb	r2, r2
   20cb6:	f107 0130 	add.w	r1, r7, #48	; 0x30
   20cba:	440b      	add	r3, r1
   20cbc:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   20cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20cc4:	0914      	lsrs	r4, r2, #4
   20cc6:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
   20cca:	091d      	lsrs	r5, r3, #4
   20ccc:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
   20cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20cd4:	4313      	orrs	r3, r2
   20cd6:	d1d3      	bne.n	20c80 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   20cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20cda:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   20cdc:	687b      	ldr	r3, [r7, #4]
   20cde:	2b00      	cmp	r3, #0
   20ce0:	d011      	beq.n	20d06 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
   20ce2:	e008      	b.n	20cf6 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
   20ce4:	687b      	ldr	r3, [r7, #4]
   20ce6:	1c5a      	adds	r2, r3, #1
   20ce8:	607a      	str	r2, [r7, #4]
   20cea:	f107 0110 	add.w	r1, r7, #16
   20cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20cf0:	440a      	add	r2, r1
   20cf2:	7812      	ldrb	r2, [r2, #0]
   20cf4:	701a      	strb	r2, [r3, #0]
        while (ix--)
   20cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20cf8:	1e5a      	subs	r2, r3, #1
   20cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   20cfc:	2b00      	cmp	r3, #0
   20cfe:	d1f1      	bne.n	20ce4 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   20d00:	687b      	ldr	r3, [r7, #4]
   20d02:	2200      	movs	r2, #0
   20d04:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   20d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   20d08:	4618      	mov	r0, r3
   20d0a:	3734      	adds	r7, #52	; 0x34
   20d0c:	46bd      	mov	sp, r7
   20d0e:	bcb0      	pop	{r4, r5, r7}
   20d10:	4770      	bx	lr

00020d12 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   20d12:	b480      	push	{r7}
   20d14:	b085      	sub	sp, #20
   20d16:	af00      	add	r7, sp, #0
   20d18:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   20d1a:	2300      	movs	r3, #0
   20d1c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   20d1e:	687b      	ldr	r3, [r7, #4]
   20d20:	2b00      	cmp	r3, #0
   20d22:	d104      	bne.n	20d2e <simple_strlen+0x1c>
    {
        return ui32RetVal;
   20d24:	68fb      	ldr	r3, [r7, #12]
   20d26:	e009      	b.n	20d3c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   20d28:	68fb      	ldr	r3, [r7, #12]
   20d2a:	3301      	adds	r3, #1
   20d2c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
   20d2e:	687b      	ldr	r3, [r7, #4]
   20d30:	1c5a      	adds	r2, r3, #1
   20d32:	607a      	str	r2, [r7, #4]
   20d34:	781b      	ldrb	r3, [r3, #0]
   20d36:	2b00      	cmp	r3, #0
   20d38:	d1f6      	bne.n	20d28 <simple_strlen+0x16>
    }
    return ui32RetVal;
   20d3a:	68fb      	ldr	r3, [r7, #12]
}
   20d3c:	4618      	mov	r0, r3
   20d3e:	3714      	adds	r7, #20
   20d40:	46bd      	mov	sp, r7
   20d42:	f85d 7b04 	ldr.w	r7, [sp], #4
   20d46:	4770      	bx	lr

00020d48 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   20d48:	b480      	push	{r7}
   20d4a:	b087      	sub	sp, #28
   20d4c:	af00      	add	r7, sp, #0
   20d4e:	60f8      	str	r0, [r7, #12]
   20d50:	460b      	mov	r3, r1
   20d52:	607a      	str	r2, [r7, #4]
   20d54:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   20d56:	2300      	movs	r3, #0
   20d58:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   20d5a:	687b      	ldr	r3, [r7, #4]
   20d5c:	2b00      	cmp	r3, #0
   20d5e:	dc0c      	bgt.n	20d7a <padbuffer+0x32>
    {
        return i32Cnt;
   20d60:	697b      	ldr	r3, [r7, #20]
   20d62:	e010      	b.n	20d86 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   20d64:	68fb      	ldr	r3, [r7, #12]
   20d66:	2b00      	cmp	r3, #0
   20d68:	d004      	beq.n	20d74 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   20d6a:	68fb      	ldr	r3, [r7, #12]
   20d6c:	1c5a      	adds	r2, r3, #1
   20d6e:	60fa      	str	r2, [r7, #12]
   20d70:	7afa      	ldrb	r2, [r7, #11]
   20d72:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   20d74:	697b      	ldr	r3, [r7, #20]
   20d76:	3301      	adds	r3, #1
   20d78:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
   20d7a:	687b      	ldr	r3, [r7, #4]
   20d7c:	1e5a      	subs	r2, r3, #1
   20d7e:	607a      	str	r2, [r7, #4]
   20d80:	2b00      	cmp	r3, #0
   20d82:	d1ef      	bne.n	20d64 <padbuffer+0x1c>
    }

    return i32Cnt;
   20d84:	697b      	ldr	r3, [r7, #20]
}
   20d86:	4618      	mov	r0, r3
   20d88:	371c      	adds	r7, #28
   20d8a:	46bd      	mov	sp, r7
   20d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   20d90:	4770      	bx	lr
	...

00020d94 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   20d94:	b590      	push	{r4, r7, lr}
   20d96:	b08f      	sub	sp, #60	; 0x3c
   20d98:	af00      	add	r7, sp, #0
   20d9a:	ed87 0a03 	vstr	s0, [r7, #12]
   20d9e:	60b8      	str	r0, [r7, #8]
   20da0:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   20da2:	68bb      	ldr	r3, [r7, #8]
   20da4:	681b      	ldr	r3, [r3, #0]
   20da6:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   20da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20daa:	2b03      	cmp	r3, #3
   20dac:	dc02      	bgt.n	20db4 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
   20dae:	f06f 0302 	mvn.w	r3, #2
   20db2:	e0e7      	b.n	20f84 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
   20db4:	edd7 7a03 	vldr	s15, [r7, #12]
   20db8:	eef5 7a40 	vcmp.f32	s15, #0.0
   20dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20dc0:	d104      	bne.n	20dcc <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   20dc2:	68bb      	ldr	r3, [r7, #8]
   20dc4:	4a71      	ldr	r2, [pc, #452]	; (20f8c <ftoa+0x1f8>)
   20dc6:	601a      	str	r2, [r3, #0]
        return 3;
   20dc8:	2303      	movs	r3, #3
   20dca:	e0db      	b.n	20f84 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
   20dcc:	68bb      	ldr	r3, [r7, #8]
   20dce:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   20dd0:	68fb      	ldr	r3, [r7, #12]
   20dd2:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   20dd4:	693b      	ldr	r3, [r7, #16]
   20dd6:	15db      	asrs	r3, r3, #23
   20dd8:	b2db      	uxtb	r3, r3
   20dda:	3b7f      	subs	r3, #127	; 0x7f
   20ddc:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   20dde:	693b      	ldr	r3, [r7, #16]
   20de0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   20de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   20de8:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   20dea:	2300      	movs	r3, #0
   20dec:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   20dee:	2300      	movs	r3, #0
   20df0:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   20df2:	69fb      	ldr	r3, [r7, #28]
   20df4:	2b1e      	cmp	r3, #30
   20df6:	dd02      	ble.n	20dfe <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   20df8:	f06f 0301 	mvn.w	r3, #1
   20dfc:	e0c2      	b.n	20f84 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
   20dfe:	69fb      	ldr	r3, [r7, #28]
   20e00:	f113 0f17 	cmn.w	r3, #23
   20e04:	da02      	bge.n	20e0c <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   20e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e0a:	e0bb      	b.n	20f84 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
   20e0c:	69fb      	ldr	r3, [r7, #28]
   20e0e:	2b16      	cmp	r3, #22
   20e10:	dd06      	ble.n	20e20 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   20e12:	69fb      	ldr	r3, [r7, #28]
   20e14:	3b17      	subs	r3, #23
   20e16:	69ba      	ldr	r2, [r7, #24]
   20e18:	fa02 f303 	lsl.w	r3, r2, r3
   20e1c:	637b      	str	r3, [r7, #52]	; 0x34
   20e1e:	e01a      	b.n	20e56 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
   20e20:	69fb      	ldr	r3, [r7, #28]
   20e22:	2b00      	cmp	r3, #0
   20e24:	db0f      	blt.n	20e46 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   20e26:	69fb      	ldr	r3, [r7, #28]
   20e28:	f1c3 0317 	rsb	r3, r3, #23
   20e2c:	69ba      	ldr	r2, [r7, #24]
   20e2e:	fa42 f303 	asr.w	r3, r2, r3
   20e32:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   20e34:	69fb      	ldr	r3, [r7, #28]
   20e36:	3301      	adds	r3, #1
   20e38:	69ba      	ldr	r2, [r7, #24]
   20e3a:	fa02 f303 	lsl.w	r3, r2, r3
   20e3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20e42:	633b      	str	r3, [r7, #48]	; 0x30
   20e44:	e007      	b.n	20e56 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   20e46:	69bb      	ldr	r3, [r7, #24]
   20e48:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   20e4c:	69fb      	ldr	r3, [r7, #28]
   20e4e:	43db      	mvns	r3, r3
   20e50:	fa42 f303 	asr.w	r3, r2, r3
   20e54:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   20e56:	693b      	ldr	r3, [r7, #16]
   20e58:	2b00      	cmp	r3, #0
   20e5a:	da04      	bge.n	20e66 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
   20e5c:	68bb      	ldr	r3, [r7, #8]
   20e5e:	1c5a      	adds	r2, r3, #1
   20e60:	60ba      	str	r2, [r7, #8]
   20e62:	222d      	movs	r2, #45	; 0x2d
   20e64:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   20e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20e68:	2b00      	cmp	r3, #0
   20e6a:	d105      	bne.n	20e78 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
   20e6c:	68bb      	ldr	r3, [r7, #8]
   20e6e:	1c5a      	adds	r2, r3, #1
   20e70:	60ba      	str	r2, [r7, #8]
   20e72:	2230      	movs	r2, #48	; 0x30
   20e74:	701a      	strb	r2, [r3, #0]
   20e76:	e021      	b.n	20ebc <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
   20e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20e7a:	2b00      	cmp	r3, #0
   20e7c:	dd08      	ble.n	20e90 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
   20e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20e80:	ea4f 74e3 	mov.w	r4, r3, asr #31
   20e84:	68ba      	ldr	r2, [r7, #8]
   20e86:	4618      	mov	r0, r3
   20e88:	4621      	mov	r1, r4
   20e8a:	f7ff fe9a 	bl	20bc2 <uint64_to_str>
   20e8e:	e011      	b.n	20eb4 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
   20e90:	68bb      	ldr	r3, [r7, #8]
   20e92:	1c5a      	adds	r2, r3, #1
   20e94:	60ba      	str	r2, [r7, #8]
   20e96:	222d      	movs	r2, #45	; 0x2d
   20e98:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   20e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20e9c:	425b      	negs	r3, r3
   20e9e:	ea4f 74e3 	mov.w	r4, r3, asr #31
   20ea2:	68ba      	ldr	r2, [r7, #8]
   20ea4:	4618      	mov	r0, r3
   20ea6:	4621      	mov	r1, r4
   20ea8:	f7ff fe8b 	bl	20bc2 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   20eac:	e002      	b.n	20eb4 <ftoa+0x120>
        {
            pcBuf++;
   20eae:	68bb      	ldr	r3, [r7, #8]
   20eb0:	3301      	adds	r3, #1
   20eb2:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
   20eb4:	68bb      	ldr	r3, [r7, #8]
   20eb6:	781b      	ldrb	r3, [r3, #0]
   20eb8:	2b00      	cmp	r3, #0
   20eba:	d1f8      	bne.n	20eae <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   20ebc:	68bb      	ldr	r3, [r7, #8]
   20ebe:	1c5a      	adds	r2, r3, #1
   20ec0:	60ba      	str	r2, [r7, #8]
   20ec2:	222e      	movs	r2, #46	; 0x2e
   20ec4:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   20ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20ec8:	2b00      	cmp	r3, #0
   20eca:	d105      	bne.n	20ed8 <ftoa+0x144>
    {
        *pcBuf++ = '0';
   20ecc:	68bb      	ldr	r3, [r7, #8]
   20ece:	1c5a      	adds	r2, r3, #1
   20ed0:	60ba      	str	r2, [r7, #8]
   20ed2:	2230      	movs	r2, #48	; 0x30
   20ed4:	701a      	strb	r2, [r3, #0]
   20ed6:	e04f      	b.n	20f78 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   20ed8:	68ba      	ldr	r2, [r7, #8]
   20eda:	6a3b      	ldr	r3, [r7, #32]
   20edc:	1ad3      	subs	r3, r2, r3
   20ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20ee0:	1ad3      	subs	r3, r2, r3
   20ee2:	3b01      	subs	r3, #1
   20ee4:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   20ee6:	697a      	ldr	r2, [r7, #20]
   20ee8:	687b      	ldr	r3, [r7, #4]
   20eea:	4293      	cmp	r3, r2
   20eec:	bfa8      	it	ge
   20eee:	4613      	movge	r3, r2
   20ef0:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   20ef2:	2300      	movs	r3, #0
   20ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   20ef6:	e015      	b.n	20f24 <ftoa+0x190>
        {
            i32FracPart *= 10;
   20ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20efa:	4613      	mov	r3, r2
   20efc:	009b      	lsls	r3, r3, #2
   20efe:	4413      	add	r3, r2
   20f00:	005b      	lsls	r3, r3, #1
   20f02:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   20f04:	68bb      	ldr	r3, [r7, #8]
   20f06:	1c5a      	adds	r2, r3, #1
   20f08:	60ba      	str	r2, [r7, #8]
   20f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20f0c:	1612      	asrs	r2, r2, #24
   20f0e:	b2d2      	uxtb	r2, r2
   20f10:	3230      	adds	r2, #48	; 0x30
   20f12:	b2d2      	uxtb	r2, r2
   20f14:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   20f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20f18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20f1c:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   20f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20f20:	3301      	adds	r3, #1
   20f22:	62bb      	str	r3, [r7, #40]	; 0x28
   20f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20f26:	697b      	ldr	r3, [r7, #20]
   20f28:	429a      	cmp	r2, r3
   20f2a:	dbe5      	blt.n	20ef8 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   20f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20f2e:	4613      	mov	r3, r2
   20f30:	009b      	lsls	r3, r3, #2
   20f32:	4413      	add	r3, r2
   20f34:	005b      	lsls	r3, r3, #1
   20f36:	161b      	asrs	r3, r3, #24
   20f38:	2b04      	cmp	r3, #4
   20f3a:	dd1d      	ble.n	20f78 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   20f3c:	68bb      	ldr	r3, [r7, #8]
   20f3e:	3b01      	subs	r3, #1
   20f40:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   20f42:	e015      	b.n	20f70 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
   20f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20f46:	781b      	ldrb	r3, [r3, #0]
   20f48:	2b2e      	cmp	r3, #46	; 0x2e
   20f4a:	d00e      	beq.n	20f6a <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
   20f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20f4e:	781b      	ldrb	r3, [r3, #0]
   20f50:	2b39      	cmp	r3, #57	; 0x39
   20f52:	d103      	bne.n	20f5c <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
   20f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20f56:	2230      	movs	r2, #48	; 0x30
   20f58:	701a      	strb	r2, [r3, #0]
   20f5a:	e006      	b.n	20f6a <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
   20f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20f5e:	781b      	ldrb	r3, [r3, #0]
   20f60:	3301      	adds	r3, #1
   20f62:	b2da      	uxtb	r2, r3
   20f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20f66:	701a      	strb	r2, [r3, #0]
                    break;
   20f68:	e006      	b.n	20f78 <ftoa+0x1e4>
                }
                pcBuftmp--;
   20f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20f6c:	3b01      	subs	r3, #1
   20f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   20f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20f72:	6a3b      	ldr	r3, [r7, #32]
   20f74:	429a      	cmp	r2, r3
   20f76:	d2e5      	bcs.n	20f44 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   20f78:	68bb      	ldr	r3, [r7, #8]
   20f7a:	2200      	movs	r2, #0
   20f7c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   20f7e:	68ba      	ldr	r2, [r7, #8]
   20f80:	6a3b      	ldr	r3, [r7, #32]
   20f82:	1ad3      	subs	r3, r2, r3
} // ftoa()
   20f84:	4618      	mov	r0, r3
   20f86:	373c      	adds	r7, #60	; 0x3c
   20f88:	46bd      	mov	sp, r7
   20f8a:	bd90      	pop	{r4, r7, pc}
   20f8c:	00302e30 	.word	0x00302e30

00020f90 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   20f90:	b590      	push	{r4, r7, lr}
   20f92:	b095      	sub	sp, #84	; 0x54
   20f94:	af00      	add	r7, sp, #0
   20f96:	60f8      	str	r0, [r7, #12]
   20f98:	60b9      	str	r1, [r7, #8]
   20f9a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   20f9c:	2300      	movs	r3, #0
   20f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   20fa0:	2300      	movs	r3, #0
   20fa2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   20fa4:	e2e9      	b.n	2157a <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   20fa6:	2306      	movs	r3, #6
   20fa8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
   20faa:	68bb      	ldr	r3, [r7, #8]
   20fac:	781b      	ldrb	r3, [r3, #0]
   20fae:	2b25      	cmp	r3, #37	; 0x25
   20fb0:	d01f      	beq.n	20ff2 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   20fb2:	68fb      	ldr	r3, [r7, #12]
   20fb4:	2b00      	cmp	r3, #0
   20fb6:	d015      	beq.n	20fe4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   20fb8:	68bb      	ldr	r3, [r7, #8]
   20fba:	781b      	ldrb	r3, [r3, #0]
   20fbc:	2b0a      	cmp	r3, #10
   20fbe:	d10b      	bne.n	20fd8 <am_util_stdio_vsprintf+0x48>
   20fc0:	4bb2      	ldr	r3, [pc, #712]	; (2128c <am_util_stdio_vsprintf+0x2fc>)
   20fc2:	781b      	ldrb	r3, [r3, #0]
   20fc4:	2b00      	cmp	r3, #0
   20fc6:	d007      	beq.n	20fd8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
   20fc8:	68fb      	ldr	r3, [r7, #12]
   20fca:	1c5a      	adds	r2, r3, #1
   20fcc:	60fa      	str	r2, [r7, #12]
   20fce:	220d      	movs	r2, #13
   20fd0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   20fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20fd4:	3301      	adds	r3, #1
   20fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   20fd8:	68fb      	ldr	r3, [r7, #12]
   20fda:	1c5a      	adds	r2, r3, #1
   20fdc:	60fa      	str	r2, [r7, #12]
   20fde:	68ba      	ldr	r2, [r7, #8]
   20fe0:	7812      	ldrb	r2, [r2, #0]
   20fe2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   20fe4:	68bb      	ldr	r3, [r7, #8]
   20fe6:	3301      	adds	r3, #1
   20fe8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
   20fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20fec:	3301      	adds	r3, #1
   20fee:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
   20ff0:	e2c3      	b.n	2157a <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   20ff2:	68bb      	ldr	r3, [r7, #8]
   20ff4:	3301      	adds	r3, #1
   20ff6:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
   20ff8:	2300      	movs	r3, #0
   20ffa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   20ffe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   21002:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   21006:	2320      	movs	r3, #32
   21008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
   2100c:	68bb      	ldr	r3, [r7, #8]
   2100e:	781b      	ldrb	r3, [r3, #0]
   21010:	2b30      	cmp	r3, #48	; 0x30
   21012:	d105      	bne.n	21020 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
   21014:	2330      	movs	r3, #48	; 0x30
   21016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
   2101a:	68bb      	ldr	r3, [r7, #8]
   2101c:	3301      	adds	r3, #1
   2101e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   21020:	f107 0310 	add.w	r3, r7, #16
   21024:	4619      	mov	r1, r3
   21026:	68b8      	ldr	r0, [r7, #8]
   21028:	f7ff fd85 	bl	20b36 <decstr_to_int>
   2102c:	4603      	mov	r3, r0
   2102e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
   21030:	693b      	ldr	r3, [r7, #16]
   21032:	68ba      	ldr	r2, [r7, #8]
   21034:	4413      	add	r3, r2
   21036:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   21038:	68bb      	ldr	r3, [r7, #8]
   2103a:	781b      	ldrb	r3, [r3, #0]
   2103c:	2b73      	cmp	r3, #115	; 0x73
   2103e:	d005      	beq.n	2104c <am_util_stdio_vsprintf+0xbc>
   21040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21042:	2b00      	cmp	r3, #0
   21044:	da02      	bge.n	2104c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
   21046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21048:	425b      	negs	r3, r3
   2104a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   2104c:	68bb      	ldr	r3, [r7, #8]
   2104e:	781b      	ldrb	r3, [r3, #0]
   21050:	2b2e      	cmp	r3, #46	; 0x2e
   21052:	d10e      	bne.n	21072 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
   21054:	68bb      	ldr	r3, [r7, #8]
   21056:	3301      	adds	r3, #1
   21058:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   2105a:	f107 0310 	add.w	r3, r7, #16
   2105e:	4619      	mov	r1, r3
   21060:	68b8      	ldr	r0, [r7, #8]
   21062:	f7ff fd68 	bl	20b36 <decstr_to_int>
   21066:	4603      	mov	r3, r0
   21068:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
   2106a:	693b      	ldr	r3, [r7, #16]
   2106c:	68ba      	ldr	r2, [r7, #8]
   2106e:	4413      	add	r3, r2
   21070:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   21072:	68bb      	ldr	r3, [r7, #8]
   21074:	781b      	ldrb	r3, [r3, #0]
   21076:	2b6c      	cmp	r3, #108	; 0x6c
   21078:	d10c      	bne.n	21094 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
   2107a:	68bb      	ldr	r3, [r7, #8]
   2107c:	3301      	adds	r3, #1
   2107e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   21080:	68bb      	ldr	r3, [r7, #8]
   21082:	781b      	ldrb	r3, [r3, #0]
   21084:	2b6c      	cmp	r3, #108	; 0x6c
   21086:	d105      	bne.n	21094 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
   21088:	68bb      	ldr	r3, [r7, #8]
   2108a:	3301      	adds	r3, #1
   2108c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
   2108e:	2301      	movs	r3, #1
   21090:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   21094:	68bb      	ldr	r3, [r7, #8]
   21096:	781b      	ldrb	r3, [r3, #0]
   21098:	3b46      	subs	r3, #70	; 0x46
   2109a:	2b32      	cmp	r3, #50	; 0x32
   2109c:	f200 825a 	bhi.w	21554 <am_util_stdio_vsprintf+0x5c4>
   210a0:	a201      	add	r2, pc, #4	; (adr r2, 210a8 <am_util_stdio_vsprintf+0x118>)
   210a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   210a6:	bf00      	nop
   210a8:	000214db 	.word	0x000214db
   210ac:	00021555 	.word	0x00021555
   210b0:	00021555 	.word	0x00021555
   210b4:	00021555 	.word	0x00021555
   210b8:	00021555 	.word	0x00021555
   210bc:	00021555 	.word	0x00021555
   210c0:	00021555 	.word	0x00021555
   210c4:	00021555 	.word	0x00021555
   210c8:	00021555 	.word	0x00021555
   210cc:	00021555 	.word	0x00021555
   210d0:	00021555 	.word	0x00021555
   210d4:	00021555 	.word	0x00021555
   210d8:	00021555 	.word	0x00021555
   210dc:	00021555 	.word	0x00021555
   210e0:	00021555 	.word	0x00021555
   210e4:	00021555 	.word	0x00021555
   210e8:	00021555 	.word	0x00021555
   210ec:	00021555 	.word	0x00021555
   210f0:	0002126f 	.word	0x0002126f
   210f4:	00021555 	.word	0x00021555
   210f8:	00021555 	.word	0x00021555
   210fc:	00021555 	.word	0x00021555
   21100:	00021555 	.word	0x00021555
   21104:	00021555 	.word	0x00021555
   21108:	00021555 	.word	0x00021555
   2110c:	00021555 	.word	0x00021555
   21110:	00021555 	.word	0x00021555
   21114:	00021555 	.word	0x00021555
   21118:	00021555 	.word	0x00021555
   2111c:	00021175 	.word	0x00021175
   21120:	000213a1 	.word	0x000213a1
   21124:	00021555 	.word	0x00021555
   21128:	000214db 	.word	0x000214db
   2112c:	00021555 	.word	0x00021555
   21130:	00021555 	.word	0x00021555
   21134:	000213a1 	.word	0x000213a1
   21138:	00021555 	.word	0x00021555
   2113c:	00021555 	.word	0x00021555
   21140:	00021555 	.word	0x00021555
   21144:	00021555 	.word	0x00021555
   21148:	00021555 	.word	0x00021555
   2114c:	00021555 	.word	0x00021555
   21150:	00021555 	.word	0x00021555
   21154:	00021555 	.word	0x00021555
   21158:	00021555 	.word	0x00021555
   2115c:	0002119b 	.word	0x0002119b
   21160:	00021555 	.word	0x00021555
   21164:	0002130d 	.word	0x0002130d
   21168:	00021555 	.word	0x00021555
   2116c:	00021555 	.word	0x00021555
   21170:	00021269 	.word	0x00021269
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   21174:	687b      	ldr	r3, [r7, #4]
   21176:	1d1a      	adds	r2, r3, #4
   21178:	607a      	str	r2, [r7, #4]
   2117a:	681b      	ldr	r3, [r3, #0]
   2117c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
   21180:	68fb      	ldr	r3, [r7, #12]
   21182:	2b00      	cmp	r3, #0
   21184:	d005      	beq.n	21192 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   21186:	68fb      	ldr	r3, [r7, #12]
   21188:	1c5a      	adds	r2, r3, #1
   2118a:	60fa      	str	r2, [r7, #12]
   2118c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   21190:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   21192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21194:	3301      	adds	r3, #1
   21196:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   21198:	e1ec      	b.n	21574 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
   2119a:	687b      	ldr	r3, [r7, #4]
   2119c:	1d1a      	adds	r2, r3, #4
   2119e:	607a      	str	r2, [r7, #4]
   211a0:	681b      	ldr	r3, [r3, #0]
   211a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   211a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   211a6:	f7ff fdb4 	bl	20d12 <simple_strlen>
   211aa:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
   211ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   211ae:	2b00      	cmp	r3, #0
   211b0:	dd2e      	ble.n	21210 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   211b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   211b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   211b6:	429a      	cmp	r2, r3
   211b8:	d22a      	bcs.n	21210 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   211ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
   211bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   211be:	1ad3      	subs	r3, r2, r3
   211c0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   211c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   211c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   211c8:	4619      	mov	r1, r3
   211ca:	68f8      	ldr	r0, [r7, #12]
   211cc:	f7ff fdbc 	bl	20d48 <padbuffer>
   211d0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   211d2:	68fb      	ldr	r3, [r7, #12]
   211d4:	2b00      	cmp	r3, #0
   211d6:	d001      	beq.n	211dc <am_util_stdio_vsprintf+0x24c>
   211d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   211da:	e000      	b.n	211de <am_util_stdio_vsprintf+0x24e>
   211dc:	2300      	movs	r3, #0
   211de:	68fa      	ldr	r2, [r7, #12]
   211e0:	4413      	add	r3, r2
   211e2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   211e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   211e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   211e8:	4413      	add	r3, r2
   211ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   211ec:	2300      	movs	r3, #0
   211ee:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   211f0:	e00e      	b.n	21210 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   211f2:	68fb      	ldr	r3, [r7, #12]
   211f4:	2b00      	cmp	r3, #0
   211f6:	d005      	beq.n	21204 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   211f8:	68fb      	ldr	r3, [r7, #12]
   211fa:	1c5a      	adds	r2, r3, #1
   211fc:	60fa      	str	r2, [r7, #12]
   211fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   21200:	7812      	ldrb	r2, [r2, #0]
   21202:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   21204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21206:	3301      	adds	r3, #1
   21208:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
   2120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2120c:	3301      	adds	r3, #1
   2120e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
   21210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21212:	781b      	ldrb	r3, [r3, #0]
   21214:	2b00      	cmp	r3, #0
   21216:	d1ec      	bne.n	211f2 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
   21218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2121a:	2b00      	cmp	r3, #0
   2121c:	f000 81a7 	beq.w	2156e <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
   21220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21222:	425b      	negs	r3, r3
   21224:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   21226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2122a:	429a      	cmp	r2, r3
   2122c:	f080 819f 	bcs.w	2156e <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   21230:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21234:	1ad3      	subs	r3, r2, r3
   21236:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   2123c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2123e:	4619      	mov	r1, r3
   21240:	68f8      	ldr	r0, [r7, #12]
   21242:	f7ff fd81 	bl	20d48 <padbuffer>
   21246:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   21248:	68fb      	ldr	r3, [r7, #12]
   2124a:	2b00      	cmp	r3, #0
   2124c:	d001      	beq.n	21252 <am_util_stdio_vsprintf+0x2c2>
   2124e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21250:	e000      	b.n	21254 <am_util_stdio_vsprintf+0x2c4>
   21252:	2300      	movs	r3, #0
   21254:	68fa      	ldr	r2, [r7, #12]
   21256:	4413      	add	r3, r2
   21258:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   2125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2125c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2125e:	4413      	add	r3, r2
   21260:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   21262:	2300      	movs	r3, #0
   21264:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
   21266:	e182      	b.n	2156e <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
   21268:	2301      	movs	r3, #1
   2126a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2126e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   21272:	2b00      	cmp	r3, #0
   21274:	d00c      	beq.n	21290 <am_util_stdio_vsprintf+0x300>
   21276:	687b      	ldr	r3, [r7, #4]
   21278:	3307      	adds	r3, #7
   2127a:	f023 0307 	bic.w	r3, r3, #7
   2127e:	f103 0208 	add.w	r2, r3, #8
   21282:	607a      	str	r2, [r7, #4]
   21284:	e9d3 3400 	ldrd	r3, r4, [r3]
   21288:	e008      	b.n	2129c <am_util_stdio_vsprintf+0x30c>
   2128a:	bf00      	nop
   2128c:	100052b4 	.word	0x100052b4
                                      va_arg(pArgs, uint32_t);
   21290:	687b      	ldr	r3, [r7, #4]
   21292:	1d1a      	adds	r2, r3, #4
   21294:	607a      	str	r2, [r7, #4]
   21296:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21298:	f04f 0400 	mov.w	r4, #0
   2129c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   212a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   212a2:	2b00      	cmp	r3, #0
   212a4:	d01e      	beq.n	212e4 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   212a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   212aa:	f7ff fc20 	bl	20aee <ndigits_in_hex>
   212ae:	4602      	mov	r2, r0
   212b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   212b2:	1a9b      	subs	r3, r3, r2
   212b4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   212b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   212ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
   212bc:	4619      	mov	r1, r3
   212be:	68f8      	ldr	r0, [r7, #12]
   212c0:	f7ff fd42 	bl	20d48 <padbuffer>
   212c4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   212c6:	68fb      	ldr	r3, [r7, #12]
   212c8:	2b00      	cmp	r3, #0
   212ca:	d001      	beq.n	212d0 <am_util_stdio_vsprintf+0x340>
   212cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   212ce:	e000      	b.n	212d2 <am_util_stdio_vsprintf+0x342>
   212d0:	2300      	movs	r3, #0
   212d2:	68fa      	ldr	r2, [r7, #12]
   212d4:	4413      	add	r3, r2
   212d6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   212d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   212da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   212dc:	4413      	add	r3, r2
   212de:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   212e0:	2300      	movs	r3, #0
   212e2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   212e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   212e8:	68fa      	ldr	r2, [r7, #12]
   212ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   212ee:	f7ff fcb0 	bl	20c52 <uint64_to_hexstr>
   212f2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   212f4:	68fb      	ldr	r3, [r7, #12]
   212f6:	2b00      	cmp	r3, #0
   212f8:	d003      	beq.n	21302 <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
   212fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   212fc:	68fa      	ldr	r2, [r7, #12]
   212fe:	4413      	add	r3, r2
   21300:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   21302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21306:	4413      	add	r3, r2
   21308:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   2130a:	e133      	b.n	21574 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2130c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   21310:	2b00      	cmp	r3, #0
   21312:	d009      	beq.n	21328 <am_util_stdio_vsprintf+0x398>
   21314:	687b      	ldr	r3, [r7, #4]
   21316:	3307      	adds	r3, #7
   21318:	f023 0307 	bic.w	r3, r3, #7
   2131c:	f103 0208 	add.w	r2, r3, #8
   21320:	607a      	str	r2, [r7, #4]
   21322:	e9d3 3400 	ldrd	r3, r4, [r3]
   21326:	e005      	b.n	21334 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
   21328:	687b      	ldr	r3, [r7, #4]
   2132a:	1d1a      	adds	r2, r3, #4
   2132c:	607a      	str	r2, [r7, #4]
   2132e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21330:	f04f 0400 	mov.w	r4, #0
   21334:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   21338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2133a:	2b00      	cmp	r3, #0
   2133c:	d01e      	beq.n	2137c <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   2133e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   21342:	f7ff fb96 	bl	20a72 <ndigits_in_u64>
   21346:	4602      	mov	r2, r0
   21348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2134a:	1a9b      	subs	r3, r3, r2
   2134c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   2134e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21352:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21354:	4619      	mov	r1, r3
   21356:	68f8      	ldr	r0, [r7, #12]
   21358:	f7ff fcf6 	bl	20d48 <padbuffer>
   2135c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   2135e:	68fb      	ldr	r3, [r7, #12]
   21360:	2b00      	cmp	r3, #0
   21362:	d001      	beq.n	21368 <am_util_stdio_vsprintf+0x3d8>
   21364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21366:	e000      	b.n	2136a <am_util_stdio_vsprintf+0x3da>
   21368:	2300      	movs	r3, #0
   2136a:	68fa      	ldr	r2, [r7, #12]
   2136c:	4413      	add	r3, r2
   2136e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   21370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21374:	4413      	add	r3, r2
   21376:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   21378:	2300      	movs	r3, #0
   2137a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   2137c:	68fa      	ldr	r2, [r7, #12]
   2137e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   21382:	f7ff fc1e 	bl	20bc2 <uint64_to_str>
   21386:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   21388:	68fb      	ldr	r3, [r7, #12]
   2138a:	2b00      	cmp	r3, #0
   2138c:	d003      	beq.n	21396 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
   2138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21390:	68fa      	ldr	r2, [r7, #12]
   21392:	4413      	add	r3, r2
   21394:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   21396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2139a:	4413      	add	r3, r2
   2139c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   2139e:	e0e9      	b.n	21574 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   213a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   213a4:	2b00      	cmp	r3, #0
   213a6:	d009      	beq.n	213bc <am_util_stdio_vsprintf+0x42c>
   213a8:	687b      	ldr	r3, [r7, #4]
   213aa:	3307      	adds	r3, #7
   213ac:	f023 0307 	bic.w	r3, r3, #7
   213b0:	f103 0208 	add.w	r2, r3, #8
   213b4:	607a      	str	r2, [r7, #4]
   213b6:	e9d3 3400 	ldrd	r3, r4, [r3]
   213ba:	e005      	b.n	213c8 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
   213bc:	687b      	ldr	r3, [r7, #4]
   213be:	1d1a      	adds	r2, r3, #4
   213c0:	607a      	str	r2, [r7, #4]
   213c2:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   213c4:	ea4f 74e3 	mov.w	r4, r3, asr #31
   213c8:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   213cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   213d0:	2b00      	cmp	r3, #0
   213d2:	f174 0300 	sbcs.w	r3, r4, #0
   213d6:	da0a      	bge.n	213ee <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
   213d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   213dc:	425b      	negs	r3, r3
   213de:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   213e2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
   213e6:	2301      	movs	r3, #1
   213e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   213ec:	e006      	b.n	213fc <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
   213ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   213f2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
   213f6:	2300      	movs	r3, #0
   213f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
   213fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   213fe:	2b00      	cmp	r3, #0
   21400:	d04a      	beq.n	21498 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   21402:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
   21406:	4618      	mov	r0, r3
   21408:	4621      	mov	r1, r4
   2140a:	f7ff fb53 	bl	20ab4 <ndigits_in_i64>
   2140e:	4602      	mov	r2, r0
   21410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21412:	1a9b      	subs	r3, r3, r2
   21414:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
   21416:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   2141a:	2b00      	cmp	r3, #0
   2141c:	d011      	beq.n	21442 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
   2141e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21420:	3b01      	subs	r3, #1
   21422:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   21424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21428:	2b30      	cmp	r3, #48	; 0x30
   2142a:	d10a      	bne.n	21442 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   2142c:	68fb      	ldr	r3, [r7, #12]
   2142e:	2b00      	cmp	r3, #0
   21430:	d004      	beq.n	2143c <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
   21432:	68fb      	ldr	r3, [r7, #12]
   21434:	1c5a      	adds	r2, r3, #1
   21436:	60fa      	str	r2, [r7, #12]
   21438:	222d      	movs	r2, #45	; 0x2d
   2143a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   2143c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2143e:	3301      	adds	r3, #1
   21440:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21446:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21448:	4619      	mov	r1, r3
   2144a:	68f8      	ldr	r0, [r7, #12]
   2144c:	f7ff fc7c 	bl	20d48 <padbuffer>
   21450:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   21452:	68fb      	ldr	r3, [r7, #12]
   21454:	2b00      	cmp	r3, #0
   21456:	d001      	beq.n	2145c <am_util_stdio_vsprintf+0x4cc>
   21458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2145a:	e000      	b.n	2145e <am_util_stdio_vsprintf+0x4ce>
   2145c:	2300      	movs	r3, #0
   2145e:	68fa      	ldr	r2, [r7, #12]
   21460:	4413      	add	r3, r2
   21462:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   21464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21468:	4413      	add	r3, r2
   2146a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   2146c:	2300      	movs	r3, #0
   2146e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   21470:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   21474:	2b00      	cmp	r3, #0
   21476:	d01e      	beq.n	214b6 <am_util_stdio_vsprintf+0x526>
   21478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   2147c:	2b20      	cmp	r3, #32
   2147e:	d11a      	bne.n	214b6 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   21480:	68fb      	ldr	r3, [r7, #12]
   21482:	2b00      	cmp	r3, #0
   21484:	d004      	beq.n	21490 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
   21486:	68fb      	ldr	r3, [r7, #12]
   21488:	1c5a      	adds	r2, r3, #1
   2148a:	60fa      	str	r2, [r7, #12]
   2148c:	222d      	movs	r2, #45	; 0x2d
   2148e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   21490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21492:	3301      	adds	r3, #1
   21494:	63fb      	str	r3, [r7, #60]	; 0x3c
   21496:	e00e      	b.n	214b6 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
   21498:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   2149c:	2b00      	cmp	r3, #0
   2149e:	d00a      	beq.n	214b6 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
   214a0:	68fb      	ldr	r3, [r7, #12]
   214a2:	2b00      	cmp	r3, #0
   214a4:	d004      	beq.n	214b0 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
   214a6:	68fb      	ldr	r3, [r7, #12]
   214a8:	1c5a      	adds	r2, r3, #1
   214aa:	60fa      	str	r2, [r7, #12]
   214ac:	222d      	movs	r2, #45	; 0x2d
   214ae:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   214b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   214b2:	3301      	adds	r3, #1
   214b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   214b6:	68fa      	ldr	r2, [r7, #12]
   214b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   214bc:	f7ff fb81 	bl	20bc2 <uint64_to_str>
   214c0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   214c2:	68fb      	ldr	r3, [r7, #12]
   214c4:	2b00      	cmp	r3, #0
   214c6:	d003      	beq.n	214d0 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
   214c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   214ca:	68fa      	ldr	r2, [r7, #12]
   214cc:	4413      	add	r3, r2
   214ce:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   214d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   214d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   214d4:	4413      	add	r3, r2
   214d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   214d8:	e04c      	b.n	21574 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
   214da:	68fb      	ldr	r3, [r7, #12]
   214dc:	2b00      	cmp	r3, #0
   214de:	d048      	beq.n	21572 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
   214e0:	687b      	ldr	r3, [r7, #4]
   214e2:	3307      	adds	r3, #7
   214e4:	f023 0307 	bic.w	r3, r3, #7
   214e8:	f103 0208 	add.w	r2, r3, #8
   214ec:	607a      	str	r2, [r7, #4]
   214ee:	e9d3 3400 	ldrd	r3, r4, [r3]
   214f2:	4618      	mov	r0, r3
   214f4:	4621      	mov	r1, r4
   214f6:	f7ea ff7f 	bl	c3f8 <__aeabi_d2f>
   214fa:	4603      	mov	r3, r0
   214fc:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   214fe:	68fb      	ldr	r3, [r7, #12]
   21500:	2214      	movs	r2, #20
   21502:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   21504:	6b39      	ldr	r1, [r7, #48]	; 0x30
   21506:	68f8      	ldr	r0, [r7, #12]
   21508:	ed97 0a05 	vldr	s0, [r7, #20]
   2150c:	f7ff fc42 	bl	20d94 <ftoa>
   21510:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
   21512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21514:	2b00      	cmp	r3, #0
   21516:	da14      	bge.n	21542 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   21518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2151a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2151e:	d102      	bne.n	21526 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   21520:	4b1e      	ldr	r3, [pc, #120]	; (2159c <am_util_stdio_vsprintf+0x60c>)
   21522:	62bb      	str	r3, [r7, #40]	; 0x28
   21524:	e008      	b.n	21538 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   21526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21528:	f113 0f02 	cmn.w	r3, #2
   2152c:	d102      	bne.n	21534 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   2152e:	4b1c      	ldr	r3, [pc, #112]	; (215a0 <am_util_stdio_vsprintf+0x610>)
   21530:	62bb      	str	r3, [r7, #40]	; 0x28
   21532:	e001      	b.n	21538 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   21534:	4b1b      	ldr	r3, [pc, #108]	; (215a4 <am_util_stdio_vsprintf+0x614>)
   21536:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   21538:	68fb      	ldr	r3, [r7, #12]
   2153a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2153c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   2153e:	2303      	movs	r3, #3
   21540:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   21542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21546:	4413      	add	r3, r2
   21548:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
   2154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2154c:	68fa      	ldr	r2, [r7, #12]
   2154e:	4413      	add	r3, r2
   21550:	60fb      	str	r3, [r7, #12]
                }
                break;
   21552:	e00e      	b.n	21572 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   21554:	68fb      	ldr	r3, [r7, #12]
   21556:	2b00      	cmp	r3, #0
   21558:	d005      	beq.n	21566 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
   2155a:	68fb      	ldr	r3, [r7, #12]
   2155c:	1c5a      	adds	r2, r3, #1
   2155e:	60fa      	str	r2, [r7, #12]
   21560:	68ba      	ldr	r2, [r7, #8]
   21562:	7812      	ldrb	r2, [r2, #0]
   21564:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   21566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21568:	3301      	adds	r3, #1
   2156a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   2156c:	e002      	b.n	21574 <am_util_stdio_vsprintf+0x5e4>
                break;
   2156e:	bf00      	nop
   21570:	e000      	b.n	21574 <am_util_stdio_vsprintf+0x5e4>
                break;
   21572:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   21574:	68bb      	ldr	r3, [r7, #8]
   21576:	3301      	adds	r3, #1
   21578:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
   2157a:	68bb      	ldr	r3, [r7, #8]
   2157c:	781b      	ldrb	r3, [r3, #0]
   2157e:	2b00      	cmp	r3, #0
   21580:	f47f ad11 	bne.w	20fa6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   21584:	68fb      	ldr	r3, [r7, #12]
   21586:	2b00      	cmp	r3, #0
   21588:	d002      	beq.n	21590 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
   2158a:	68fb      	ldr	r3, [r7, #12]
   2158c:	2200      	movs	r2, #0
   2158e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   21590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   21592:	4618      	mov	r0, r3
   21594:	3754      	adds	r7, #84	; 0x54
   21596:	46bd      	mov	sp, r7
   21598:	bd90      	pop	{r4, r7, pc}
   2159a:	bf00      	nop
   2159c:	00302e30 	.word	0x00302e30
   215a0:	00232e23 	.word	0x00232e23
   215a4:	003f2e3f 	.word	0x003f2e3f

000215a8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   215a8:	b40f      	push	{r0, r1, r2, r3}
   215aa:	b580      	push	{r7, lr}
   215ac:	b082      	sub	sp, #8
   215ae:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   215b0:	4b0d      	ldr	r3, [pc, #52]	; (215e8 <am_util_stdio_printf+0x40>)
   215b2:	681b      	ldr	r3, [r3, #0]
   215b4:	2b00      	cmp	r3, #0
   215b6:	d101      	bne.n	215bc <am_util_stdio_printf+0x14>
    {
        return 0;
   215b8:	2300      	movs	r3, #0
   215ba:	e00d      	b.n	215d8 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   215bc:	f107 0314 	add.w	r3, r7, #20
   215c0:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   215c2:	683a      	ldr	r2, [r7, #0]
   215c4:	6939      	ldr	r1, [r7, #16]
   215c6:	4809      	ldr	r0, [pc, #36]	; (215ec <am_util_stdio_printf+0x44>)
   215c8:	f7ff fce2 	bl	20f90 <am_util_stdio_vsprintf>
   215cc:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   215ce:	4b06      	ldr	r3, [pc, #24]	; (215e8 <am_util_stdio_printf+0x40>)
   215d0:	681b      	ldr	r3, [r3, #0]
   215d2:	4806      	ldr	r0, [pc, #24]	; (215ec <am_util_stdio_printf+0x44>)
   215d4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   215d6:	687b      	ldr	r3, [r7, #4]
}
   215d8:	4618      	mov	r0, r3
   215da:	3708      	adds	r7, #8
   215dc:	46bd      	mov	sp, r7
   215de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   215e2:	b004      	add	sp, #16
   215e4:	4770      	bx	lr
   215e6:	bf00      	nop
   215e8:	1000a0c4 	.word	0x1000a0c4
   215ec:	100051b4 	.word	0x100051b4

000215f0 <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
   215f0:	b580      	push	{r7, lr}
   215f2:	b082      	sub	sp, #8
   215f4:	af00      	add	r7, sp, #0
   215f6:	6078      	str	r0, [r7, #4]
    //
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   215f8:	687b      	ldr	r3, [r7, #4]
   215fa:	681a      	ldr	r2, [r3, #0]
   215fc:	4b08      	ldr	r3, [pc, #32]	; (21620 <am_devices_button_init+0x30>)
   215fe:	6819      	ldr	r1, [r3, #0]
   21600:	4610      	mov	r0, r2
   21602:	f002 f877 	bl	236f4 <am_hal_gpio_pinconfig>


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
   21606:	687b      	ldr	r3, [r7, #4]
   21608:	2200      	movs	r2, #0
   2160a:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
   2160c:	687b      	ldr	r3, [r7, #4]
   2160e:	2200      	movs	r2, #0
   21610:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
   21612:	687b      	ldr	r3, [r7, #4]
   21614:	2200      	movs	r2, #0
   21616:	735a      	strb	r2, [r3, #13]
}
   21618:	bf00      	nop
   2161a:	3708      	adds	r7, #8
   2161c:	46bd      	mov	sp, r7
   2161e:	bd80      	pop	{r7, pc}
   21620:	00028cd8 	.word	0x00028cd8

00021624 <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   21624:	b580      	push	{r7, lr}
   21626:	b084      	sub	sp, #16
   21628:	af00      	add	r7, sp, #0
   2162a:	6078      	str	r0, [r7, #4]
   2162c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   2162e:	2300      	movs	r3, #0
   21630:	60fb      	str	r3, [r7, #12]
   21632:	e009      	b.n	21648 <am_devices_button_array_init+0x24>
    {
        am_devices_button_init(psButtons + i);
   21634:	68fb      	ldr	r3, [r7, #12]
   21636:	011b      	lsls	r3, r3, #4
   21638:	687a      	ldr	r2, [r7, #4]
   2163a:	4413      	add	r3, r2
   2163c:	4618      	mov	r0, r3
   2163e:	f7ff ffd7 	bl	215f0 <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
   21642:	68fb      	ldr	r3, [r7, #12]
   21644:	3301      	adds	r3, #1
   21646:	60fb      	str	r3, [r7, #12]
   21648:	68fa      	ldr	r2, [r7, #12]
   2164a:	683b      	ldr	r3, [r7, #0]
   2164c:	429a      	cmp	r2, r3
   2164e:	d3f1      	bcc.n	21634 <am_devices_button_array_init+0x10>
    }
}
   21650:	bf00      	nop
   21652:	3710      	adds	r7, #16
   21654:	46bd      	mov	sp, r7
   21656:	bd80      	pop	{r7, pc}

00021658 <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
   21658:	b580      	push	{r7, lr}
   2165a:	b084      	sub	sp, #16
   2165c:	af00      	add	r7, sp, #0
   2165e:	6078      	str	r0, [r7, #4]

    //
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   21660:	687b      	ldr	r3, [r7, #4]
   21662:	681a      	ldr	r2, [r3, #0]
   21664:	4b1f      	ldr	r3, [pc, #124]	; (216e4 <am_devices_button_tick+0x8c>)
   21666:	6819      	ldr	r1, [r3, #0]
   21668:	4610      	mov	r0, r2
   2166a:	f002 f843 	bl	236f4 <am_hal_gpio_pinconfig>
    //
    // Read the pin state. If the pin is in its normal (unpressed) state, set
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   2166e:	687b      	ldr	r3, [r7, #4]
   21670:	681b      	ldr	r3, [r3, #0]
   21672:	f107 0208 	add.w	r2, r7, #8
   21676:	2100      	movs	r1, #0
   21678:	4618      	mov	r0, r3
   2167a:	f002 f977 	bl	2396c <am_hal_gpio_state_read>
#endif // AM_APOLLO3_GPIO

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   2167e:	687b      	ldr	r3, [r7, #4]
   21680:	685a      	ldr	r2, [r3, #4]
   21682:	68bb      	ldr	r3, [r7, #8]
   21684:	429a      	cmp	r2, r3
   21686:	bf14      	ite	ne
   21688:	2301      	movne	r3, #1
   2168a:	2300      	moveq	r3, #0
   2168c:	73fb      	strb	r3, [r7, #15]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
   2168e:	687b      	ldr	r3, [r7, #4]
   21690:	7b1b      	ldrb	r3, [r3, #12]
   21692:	7bfa      	ldrb	r2, [r7, #15]
   21694:	429a      	cmp	r2, r3
   21696:	d005      	beq.n	216a4 <am_devices_button_tick+0x4c>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
   21698:	687b      	ldr	r3, [r7, #4]
   2169a:	689b      	ldr	r3, [r3, #8]
   2169c:	1c5a      	adds	r2, r3, #1
   2169e:	687b      	ldr	r3, [r7, #4]
   216a0:	609a      	str	r2, [r3, #8]
   216a2:	e002      	b.n	216aa <am_devices_button_tick+0x52>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
   216a4:	687b      	ldr	r3, [r7, #4]
   216a6:	2200      	movs	r2, #0
   216a8:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
   216aa:	687b      	ldr	r3, [r7, #4]
   216ac:	689b      	ldr	r3, [r3, #8]
   216ae:	2b03      	cmp	r3, #3
   216b0:	d909      	bls.n	216c6 <am_devices_button_tick+0x6e>
    {
        psButton->bPressed = bRawButtonPressed;
   216b2:	687b      	ldr	r3, [r7, #4]
   216b4:	7bfa      	ldrb	r2, [r7, #15]
   216b6:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
   216b8:	687b      	ldr	r3, [r7, #4]
   216ba:	2201      	movs	r2, #1
   216bc:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
   216be:	687b      	ldr	r3, [r7, #4]
   216c0:	2200      	movs	r2, #0
   216c2:	609a      	str	r2, [r3, #8]
   216c4:	e002      	b.n	216cc <am_devices_button_tick+0x74>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
   216c6:	687b      	ldr	r3, [r7, #4]
   216c8:	2200      	movs	r2, #0
   216ca:	735a      	strb	r2, [r3, #13]

    //
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   216cc:	687b      	ldr	r3, [r7, #4]
   216ce:	681a      	ldr	r2, [r3, #0]
   216d0:	4b05      	ldr	r3, [pc, #20]	; (216e8 <am_devices_button_tick+0x90>)
   216d2:	6819      	ldr	r1, [r3, #0]
   216d4:	4610      	mov	r0, r2
   216d6:	f002 f80d 	bl	236f4 <am_hal_gpio_pinconfig>
#else // AM_APOLLO3_GPIO
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
#endif // AM_APOLLO3_GPIO
}
   216da:	bf00      	nop
   216dc:	3710      	adds	r7, #16
   216de:	46bd      	mov	sp, r7
   216e0:	bd80      	pop	{r7, pc}
   216e2:	bf00      	nop
   216e4:	00028ba4 	.word	0x00028ba4
   216e8:	00028cd8 	.word	0x00028cd8

000216ec <am_devices_button_array_tick>:
//
//*****************************************************************************
void
am_devices_button_array_tick(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   216ec:	b580      	push	{r7, lr}
   216ee:	b084      	sub	sp, #16
   216f0:	af00      	add	r7, sp, #0
   216f2:	6078      	str	r0, [r7, #4]
   216f4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   216f6:	2300      	movs	r3, #0
   216f8:	60fb      	str	r3, [r7, #12]
   216fa:	e009      	b.n	21710 <am_devices_button_array_tick+0x24>
    {
        am_devices_button_tick(psButtons + i);
   216fc:	68fb      	ldr	r3, [r7, #12]
   216fe:	011b      	lsls	r3, r3, #4
   21700:	687a      	ldr	r2, [r7, #4]
   21702:	4413      	add	r3, r2
   21704:	4618      	mov	r0, r3
   21706:	f7ff ffa7 	bl	21658 <am_devices_button_tick>
    for ( i = 0; i < ui32NumButtons; i++ )
   2170a:	68fb      	ldr	r3, [r7, #12]
   2170c:	3301      	adds	r3, #1
   2170e:	60fb      	str	r3, [r7, #12]
   21710:	68fa      	ldr	r2, [r7, #12]
   21712:	683b      	ldr	r3, [r7, #0]
   21714:	429a      	cmp	r2, r3
   21716:	d3f1      	bcc.n	216fc <am_devices_button_array_tick+0x10>
    }
}
   21718:	bf00      	nop
   2171a:	3710      	adds	r7, #16
   2171c:	46bd      	mov	sp, r7
   2171e:	bd80      	pop	{r7, pc}

00021720 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   21720:	b580      	push	{r7, lr}
   21722:	b088      	sub	sp, #32
   21724:	af00      	add	r7, sp, #0
   21726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   21728:	2300      	movs	r3, #0
   2172a:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
   2172c:	f7fb f8f2 	bl	1c914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   21730:	4b40      	ldr	r3, [pc, #256]	; (21834 <pvPortMalloc+0x114>)
   21732:	681b      	ldr	r3, [r3, #0]
   21734:	2b00      	cmp	r3, #0
   21736:	d104      	bne.n	21742 <pvPortMalloc+0x22>
		{
			prvHeapInit();
   21738:	f000 f8be 	bl	218b8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   2173c:	4b3d      	ldr	r3, [pc, #244]	; (21834 <pvPortMalloc+0x114>)
   2173e:	2201      	movs	r2, #1
   21740:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   21742:	687b      	ldr	r3, [r7, #4]
   21744:	2b00      	cmp	r3, #0
   21746:	d00e      	beq.n	21766 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
   21748:	2308      	movs	r3, #8
   2174a:	461a      	mov	r2, r3
   2174c:	687b      	ldr	r3, [r7, #4]
   2174e:	4413      	add	r3, r2
   21750:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   21752:	687b      	ldr	r3, [r7, #4]
   21754:	f003 0307 	and.w	r3, r3, #7
   21758:	2b00      	cmp	r3, #0
   2175a:	d004      	beq.n	21766 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   2175c:	687b      	ldr	r3, [r7, #4]
   2175e:	f023 0307 	bic.w	r3, r3, #7
   21762:	3308      	adds	r3, #8
   21764:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   21766:	687b      	ldr	r3, [r7, #4]
   21768:	2b00      	cmp	r3, #0
   2176a:	d057      	beq.n	2181c <pvPortMalloc+0xfc>
   2176c:	687b      	ldr	r3, [r7, #4]
   2176e:	f643 72f7 	movw	r2, #16375	; 0x3ff7
   21772:	4293      	cmp	r3, r2
   21774:	d852      	bhi.n	2181c <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   21776:	4b30      	ldr	r3, [pc, #192]	; (21838 <pvPortMalloc+0x118>)
   21778:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
   2177a:	4b2f      	ldr	r3, [pc, #188]	; (21838 <pvPortMalloc+0x118>)
   2177c:	681b      	ldr	r3, [r3, #0]
   2177e:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   21780:	e004      	b.n	2178c <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
   21782:	69fb      	ldr	r3, [r7, #28]
   21784:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   21786:	69fb      	ldr	r3, [r7, #28]
   21788:	681b      	ldr	r3, [r3, #0]
   2178a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   2178c:	69fb      	ldr	r3, [r7, #28]
   2178e:	685a      	ldr	r2, [r3, #4]
   21790:	687b      	ldr	r3, [r7, #4]
   21792:	429a      	cmp	r2, r3
   21794:	d203      	bcs.n	2179e <pvPortMalloc+0x7e>
   21796:	69fb      	ldr	r3, [r7, #28]
   21798:	681b      	ldr	r3, [r3, #0]
   2179a:	2b00      	cmp	r3, #0
   2179c:	d1f1      	bne.n	21782 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   2179e:	69fb      	ldr	r3, [r7, #28]
   217a0:	4a26      	ldr	r2, [pc, #152]	; (2183c <pvPortMalloc+0x11c>)
   217a2:	4293      	cmp	r3, r2
   217a4:	d03a      	beq.n	2181c <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   217a6:	69bb      	ldr	r3, [r7, #24]
   217a8:	681b      	ldr	r3, [r3, #0]
   217aa:	2208      	movs	r2, #8
   217ac:	4413      	add	r3, r2
   217ae:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   217b0:	69fb      	ldr	r3, [r7, #28]
   217b2:	681a      	ldr	r2, [r3, #0]
   217b4:	69bb      	ldr	r3, [r7, #24]
   217b6:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   217b8:	69fb      	ldr	r3, [r7, #28]
   217ba:	685a      	ldr	r2, [r3, #4]
   217bc:	687b      	ldr	r3, [r7, #4]
   217be:	1ad3      	subs	r3, r2, r3
   217c0:	2208      	movs	r2, #8
   217c2:	0052      	lsls	r2, r2, #1
   217c4:	4293      	cmp	r3, r2
   217c6:	d922      	bls.n	2180e <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   217c8:	69fa      	ldr	r2, [r7, #28]
   217ca:	687b      	ldr	r3, [r7, #4]
   217cc:	4413      	add	r3, r2
   217ce:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   217d0:	69fb      	ldr	r3, [r7, #28]
   217d2:	685a      	ldr	r2, [r3, #4]
   217d4:	687b      	ldr	r3, [r7, #4]
   217d6:	1ad2      	subs	r2, r2, r3
   217d8:	68fb      	ldr	r3, [r7, #12]
   217da:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   217dc:	69fb      	ldr	r3, [r7, #28]
   217de:	687a      	ldr	r2, [r7, #4]
   217e0:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   217e2:	68fb      	ldr	r3, [r7, #12]
   217e4:	685b      	ldr	r3, [r3, #4]
   217e6:	60bb      	str	r3, [r7, #8]
   217e8:	4b13      	ldr	r3, [pc, #76]	; (21838 <pvPortMalloc+0x118>)
   217ea:	613b      	str	r3, [r7, #16]
   217ec:	e002      	b.n	217f4 <pvPortMalloc+0xd4>
   217ee:	693b      	ldr	r3, [r7, #16]
   217f0:	681b      	ldr	r3, [r3, #0]
   217f2:	613b      	str	r3, [r7, #16]
   217f4:	693b      	ldr	r3, [r7, #16]
   217f6:	681b      	ldr	r3, [r3, #0]
   217f8:	685a      	ldr	r2, [r3, #4]
   217fa:	68bb      	ldr	r3, [r7, #8]
   217fc:	429a      	cmp	r2, r3
   217fe:	d3f6      	bcc.n	217ee <pvPortMalloc+0xce>
   21800:	693b      	ldr	r3, [r7, #16]
   21802:	681a      	ldr	r2, [r3, #0]
   21804:	68fb      	ldr	r3, [r7, #12]
   21806:	601a      	str	r2, [r3, #0]
   21808:	693b      	ldr	r3, [r7, #16]
   2180a:	68fa      	ldr	r2, [r7, #12]
   2180c:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   2180e:	4b0c      	ldr	r3, [pc, #48]	; (21840 <pvPortMalloc+0x120>)
   21810:	681a      	ldr	r2, [r3, #0]
   21812:	69fb      	ldr	r3, [r7, #28]
   21814:	685b      	ldr	r3, [r3, #4]
   21816:	1ad3      	subs	r3, r2, r3
   21818:	4a09      	ldr	r2, [pc, #36]	; (21840 <pvPortMalloc+0x120>)
   2181a:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   2181c:	f7fb f8c0 	bl	1c9a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   21820:	697b      	ldr	r3, [r7, #20]
   21822:	2b00      	cmp	r3, #0
   21824:	d101      	bne.n	2182a <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   21826:	f7f9 fe4c 	bl	1b4c2 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   2182a:	697b      	ldr	r3, [r7, #20]
}
   2182c:	4618      	mov	r0, r3
   2182e:	3720      	adds	r7, #32
   21830:	46bd      	mov	sp, r7
   21832:	bd80      	pop	{r7, pc}
   21834:	100092c8 	.word	0x100092c8
   21838:	100092b8 	.word	0x100092b8
   2183c:	100092c0 	.word	0x100092c0
   21840:	10002c74 	.word	0x10002c74

00021844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   21844:	b580      	push	{r7, lr}
   21846:	b086      	sub	sp, #24
   21848:	af00      	add	r7, sp, #0
   2184a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   2184c:	687b      	ldr	r3, [r7, #4]
   2184e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   21850:	687b      	ldr	r3, [r7, #4]
   21852:	2b00      	cmp	r3, #0
   21854:	d027      	beq.n	218a6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   21856:	2308      	movs	r3, #8
   21858:	425b      	negs	r3, r3
   2185a:	693a      	ldr	r2, [r7, #16]
   2185c:	4413      	add	r3, r2
   2185e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   21860:	693b      	ldr	r3, [r7, #16]
   21862:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
   21864:	f7fb f856 	bl	1c914 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   21868:	68fb      	ldr	r3, [r7, #12]
   2186a:	685b      	ldr	r3, [r3, #4]
   2186c:	60bb      	str	r3, [r7, #8]
   2186e:	4b10      	ldr	r3, [pc, #64]	; (218b0 <vPortFree+0x6c>)
   21870:	617b      	str	r3, [r7, #20]
   21872:	e002      	b.n	2187a <vPortFree+0x36>
   21874:	697b      	ldr	r3, [r7, #20]
   21876:	681b      	ldr	r3, [r3, #0]
   21878:	617b      	str	r3, [r7, #20]
   2187a:	697b      	ldr	r3, [r7, #20]
   2187c:	681b      	ldr	r3, [r3, #0]
   2187e:	685a      	ldr	r2, [r3, #4]
   21880:	68bb      	ldr	r3, [r7, #8]
   21882:	429a      	cmp	r2, r3
   21884:	d3f6      	bcc.n	21874 <vPortFree+0x30>
   21886:	697b      	ldr	r3, [r7, #20]
   21888:	681a      	ldr	r2, [r3, #0]
   2188a:	68fb      	ldr	r3, [r7, #12]
   2188c:	601a      	str	r2, [r3, #0]
   2188e:	697b      	ldr	r3, [r7, #20]
   21890:	68fa      	ldr	r2, [r7, #12]
   21892:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   21894:	68fb      	ldr	r3, [r7, #12]
   21896:	685a      	ldr	r2, [r3, #4]
   21898:	4b06      	ldr	r3, [pc, #24]	; (218b4 <vPortFree+0x70>)
   2189a:	681b      	ldr	r3, [r3, #0]
   2189c:	4413      	add	r3, r2
   2189e:	4a05      	ldr	r2, [pc, #20]	; (218b4 <vPortFree+0x70>)
   218a0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   218a2:	f7fb f87d 	bl	1c9a0 <xTaskResumeAll>
	}
}
   218a6:	bf00      	nop
   218a8:	3718      	adds	r7, #24
   218aa:	46bd      	mov	sp, r7
   218ac:	bd80      	pop	{r7, pc}
   218ae:	bf00      	nop
   218b0:	100092b8 	.word	0x100092b8
   218b4:	10002c74 	.word	0x10002c74

000218b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   218b8:	b480      	push	{r7}
   218ba:	b083      	sub	sp, #12
   218bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   218be:	4b10      	ldr	r3, [pc, #64]	; (21900 <prvHeapInit+0x48>)
   218c0:	f023 0307 	bic.w	r3, r3, #7
   218c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   218c6:	4a0f      	ldr	r2, [pc, #60]	; (21904 <prvHeapInit+0x4c>)
   218c8:	687b      	ldr	r3, [r7, #4]
   218ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   218cc:	4b0d      	ldr	r3, [pc, #52]	; (21904 <prvHeapInit+0x4c>)
   218ce:	2200      	movs	r2, #0
   218d0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   218d2:	4b0d      	ldr	r3, [pc, #52]	; (21908 <prvHeapInit+0x50>)
   218d4:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   218d8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   218da:	4b0b      	ldr	r3, [pc, #44]	; (21908 <prvHeapInit+0x50>)
   218dc:	2200      	movs	r2, #0
   218de:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   218e0:	687b      	ldr	r3, [r7, #4]
   218e2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   218e4:	683b      	ldr	r3, [r7, #0]
   218e6:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   218ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   218ec:	683b      	ldr	r3, [r7, #0]
   218ee:	4a06      	ldr	r2, [pc, #24]	; (21908 <prvHeapInit+0x50>)
   218f0:	601a      	str	r2, [r3, #0]
}
   218f2:	bf00      	nop
   218f4:	370c      	adds	r7, #12
   218f6:	46bd      	mov	sp, r7
   218f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   218fc:	4770      	bx	lr
   218fe:	bf00      	nop
   21900:	100052c0 	.word	0x100052c0
   21904:	100092b8 	.word	0x100092b8
   21908:	100092c0 	.word	0x100092c0

0002190c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   2190c:	4811      	ldr	r0, [pc, #68]	; (21954 <zero_loop+0x12>)
   2190e:	4912      	ldr	r1, [pc, #72]	; (21958 <zero_loop+0x16>)
   21910:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   21912:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   21916:	4811      	ldr	r0, [pc, #68]	; (2195c <zero_loop+0x1a>)
   21918:	6801      	ldr	r1, [r0, #0]
   2191a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   2191e:	6001      	str	r1, [r0, #0]
   21920:	f3bf 8f4f 	dsb	sy
   21924:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   21928:	480d      	ldr	r0, [pc, #52]	; (21960 <zero_loop+0x1e>)
   2192a:	490e      	ldr	r1, [pc, #56]	; (21964 <zero_loop+0x22>)
   2192c:	4a0e      	ldr	r2, [pc, #56]	; (21968 <zero_loop+0x26>)

0002192e <copy_loop>:
   2192e:	f850 3b04 	ldr.w	r3, [r0], #4
   21932:	f841 3b04 	str.w	r3, [r1], #4
   21936:	4291      	cmp	r1, r2
   21938:	dbf9      	blt.n	2192e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   2193a:	480c      	ldr	r0, [pc, #48]	; (2196c <zero_loop+0x2a>)
   2193c:	490c      	ldr	r1, [pc, #48]	; (21970 <zero_loop+0x2e>)
   2193e:	f04f 0200 	mov.w	r2, #0

00021942 <zero_loop>:
   21942:	4288      	cmp	r0, r1
   21944:	bfb8      	it	lt
   21946:	f840 2b04 	strlt.w	r2, [r0], #4
   2194a:	dbfa      	blt.n	21942 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   2194c:	f7f9 fb52 	bl	1aff4 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   21950:	be00      	bkpt	0x0000
}
   21952:	bf00      	nop
   21954:	e000ed08 	.word	0xe000ed08
   21958:	0000c000 	.word	0x0000c000
   2195c:	e000ed88 	.word	0xe000ed88
   21960:	00028ef8 	.word	0x00028ef8
   21964:	10002b00 	.word	0x10002b00
   21968:	10003798 	.word	0x10003798
   2196c:	10003798 	.word	0x10003798
   21970:	1000a194 	.word	0x1000a194

00021974 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   21974:	b480      	push	{r7}
   21976:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   21978:	e7fe      	b.n	21978 <NMI_Handler+0x4>

0002197a <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   2197a:	b480      	push	{r7}
   2197c:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   2197e:	e7fe      	b.n	2197e <BusFault_Handler+0x4>

00021980 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   21980:	b480      	push	{r7}
   21982:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   21984:	e7fe      	b.n	21984 <DebugMon_Handler+0x4>
	...

00021988 <am_bsp_low_power_init>:
   21988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2198a:	f002 f88b 	bl	23aa4 <am_hal_itm_disable>
   2198e:	2000      	movs	r0, #0
   21990:	f7fe ff80 	bl	20894 <am_util_stdio_printf_init>
   21994:	4b12      	ldr	r3, [pc, #72]	; (219e0 <am_bsp_low_power_init+0x58>)
   21996:	4f13      	ldr	r7, [pc, #76]	; (219e4 <am_bsp_low_power_init+0x5c>)
   21998:	6819      	ldr	r1, [r3, #0]
   2199a:	2021      	movs	r0, #33	; 0x21
   2199c:	f001 feaa 	bl	236f4 <am_hal_gpio_pinconfig>
   219a0:	f002 f9da 	bl	23d58 <am_hal_pwrctrl_low_power_init>
   219a4:	2001      	movs	r0, #1
   219a6:	f002 fac5 	bl	23f34 <am_hal_rtc_osc_select>
   219aa:	2100      	movs	r1, #0
   219ac:	2003      	movs	r0, #3
   219ae:	f001 fd63 	bl	23478 <am_hal_clkgen_control>
   219b2:	f002 fac7 	bl	23f44 <am_hal_rtc_osc_disable>
   219b6:	4b0c      	ldr	r3, [pc, #48]	; (219e8 <am_bsp_low_power_init+0x60>)
   219b8:	681e      	ldr	r6, [r3, #0]
   219ba:	2400      	movs	r4, #0
   219bc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   219c0:	4631      	mov	r1, r6
   219c2:	4628      	mov	r0, r5
   219c4:	f001 fe96 	bl	236f4 <am_hal_gpio_pinconfig>
   219c8:	2103      	movs	r1, #3
   219ca:	4628      	mov	r0, r5
   219cc:	f002 f800 	bl	239d0 <am_hal_gpio_state_write>
   219d0:	3401      	adds	r4, #1
   219d2:	4628      	mov	r0, r5
   219d4:	2100      	movs	r1, #0
   219d6:	f001 fffb 	bl	239d0 <am_hal_gpio_state_write>
   219da:	2c04      	cmp	r4, #4
   219dc:	d1ee      	bne.n	219bc <am_bsp_low_power_init+0x34>
   219de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   219e0:	00028cd8 	.word	0x00028cd8
   219e4:	10002c88 	.word	0x10002c88
   219e8:	00028cdc 	.word	0x00028cdc

000219ec <am_bsp_itm_printf_enable>:
   219ec:	b500      	push	{lr}
   219ee:	4b0b      	ldr	r3, [pc, #44]	; (21a1c <am_bsp_itm_printf_enable+0x30>)
   219f0:	b087      	sub	sp, #28
   219f2:	2201      	movs	r2, #1
   219f4:	601a      	str	r2, [r3, #0]
   219f6:	f002 f837 	bl	23a68 <am_hal_itm_enable>
   219fa:	4b09      	ldr	r3, [pc, #36]	; (21a20 <am_bsp_itm_printf_enable+0x34>)
   219fc:	9301      	str	r3, [sp, #4]
   219fe:	a801      	add	r0, sp, #4
   21a00:	f002 fb84 	bl	2410c <am_hal_tpiu_enable>
   21a04:	4b07      	ldr	r3, [pc, #28]	; (21a24 <am_bsp_itm_printf_enable+0x38>)
   21a06:	2021      	movs	r0, #33	; 0x21
   21a08:	6819      	ldr	r1, [r3, #0]
   21a0a:	f001 fe73 	bl	236f4 <am_hal_gpio_pinconfig>
   21a0e:	4806      	ldr	r0, [pc, #24]	; (21a28 <am_bsp_itm_printf_enable+0x3c>)
   21a10:	f7fe ff40 	bl	20894 <am_util_stdio_printf_init>
   21a14:	b007      	add	sp, #28
   21a16:	f85d fb04 	ldr.w	pc, [sp], #4
   21a1a:	bf00      	nop
   21a1c:	100092cc 	.word	0x100092cc
   21a20:	000f4240 	.word	0x000f4240
   21a24:	00027348 	.word	0x00027348
   21a28:	00023b51 	.word	0x00023b51

00021a2c <am_hal_ble_blocking_transfer.part.7>:
   21a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a30:	4dcb      	ldr	r5, [pc, #812]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21a32:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   21a36:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21a3a:	f36f 13c7 	bfc	r3, #7, #1
   21a3e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21a42:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21a46:	f36f 2308 	bfc	r3, #8, #1
   21a4a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21a4e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21a52:	f36f 0300 	bfc	r3, #0, #1
   21a56:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21a5a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21a5e:	f36f 0341 	bfc	r3, #1, #1
   21a62:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21a66:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   21a6a:	f043 0301 	orr.w	r3, r3, #1
   21a6e:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   21a72:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   21a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21a7a:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   21a7e:	7a8b      	ldrb	r3, [r1, #10]
   21a80:	2b01      	cmp	r3, #1
   21a82:	b085      	sub	sp, #20
   21a84:	460e      	mov	r6, r1
   21a86:	4604      	mov	r4, r0
   21a88:	d00a      	beq.n	21aa0 <am_hal_ble_blocking_transfer.part.7+0x74>
   21a8a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21a8e:	061f      	lsls	r7, r3, #24
   21a90:	f100 8123 	bmi.w	21cda <am_hal_ble_blocking_transfer.part.7+0x2ae>
   21a94:	48b3      	ldr	r0, [pc, #716]	; (21d64 <am_hal_ble_blocking_transfer.part.7+0x338>)
   21a96:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   21a9a:	b005      	add	sp, #20
   21a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21aa0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   21aa4:	2b00      	cmp	r3, #0
   21aa6:	f000 80e6 	beq.w	21c76 <am_hal_ble_blocking_transfer.part.7+0x24a>
   21aaa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   21aae:	2b00      	cmp	r3, #0
   21ab0:	f000 81f2 	beq.w	21e98 <am_hal_ble_blocking_transfer.part.7+0x46c>
   21ab4:	2200      	movs	r2, #0
   21ab6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   21aba:	b1a3      	cbz	r3, 21ae6 <am_hal_ble_blocking_transfer.part.7+0xba>
   21abc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 21d60 <am_hal_ble_blocking_transfer.part.7+0x334>
   21ac0:	f240 152d 	movw	r5, #301	; 0x12d
   21ac4:	2700      	movs	r7, #0
   21ac6:	e006      	b.n	21ad6 <am_hal_ble_blocking_transfer.part.7+0xaa>
   21ac8:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
   21acc:	20a0      	movs	r0, #160	; 0xa0
   21ace:	f001 fdbd 	bl	2364c <am_hal_flash_delay>
   21ad2:	3d01      	subs	r5, #1
   21ad4:	d007      	beq.n	21ae6 <am_hal_ble_blocking_transfer.part.7+0xba>
   21ad6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   21ada:	2b00      	cmp	r3, #0
   21adc:	d1f4      	bne.n	21ac8 <am_hal_ble_blocking_transfer.part.7+0x9c>
   21ade:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   21ae2:	0718      	lsls	r0, r3, #28
   21ae4:	d4f2      	bmi.n	21acc <am_hal_ble_blocking_transfer.part.7+0xa0>
   21ae6:	4a9e      	ldr	r2, [pc, #632]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21ae8:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   21aec:	f043 0302 	orr.w	r3, r3, #2
   21af0:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   21af4:	2050      	movs	r0, #80	; 0x50
   21af6:	f001 fda9 	bl	2364c <am_hal_flash_delay>
   21afa:	6823      	ldr	r3, [r4, #0]
   21afc:	4a9a      	ldr	r2, [pc, #616]	; (21d68 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21afe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21b02:	4293      	cmp	r3, r2
   21b04:	f000 81d5 	beq.w	21eb2 <am_hal_ble_blocking_transfer.part.7+0x486>
   21b08:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   21b0c:	f8df 9250 	ldr.w	r9, [pc, #592]	; 21d60 <am_hal_ble_blocking_transfer.part.7+0x334>
   21b10:	2500      	movs	r5, #0
   21b12:	46aa      	mov	sl, r5
   21b14:	2b00      	cmp	r3, #0
   21b16:	f040 80c6 	bne.w	21ca6 <am_hal_ble_blocking_transfer.part.7+0x27a>
   21b1a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21b1e:	2b00      	cmp	r3, #0
   21b20:	f040 80ac 	bne.w	21c7c <am_hal_ble_blocking_transfer.part.7+0x250>
   21b24:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   21b28:	0719      	lsls	r1, r3, #28
   21b2a:	f140 80ac 	bpl.w	21c86 <am_hal_ble_blocking_transfer.part.7+0x25a>
   21b2e:	f001 ff93 	bl	23a58 <am_hal_interrupt_master_disable>
   21b32:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   21b36:	9002      	str	r0, [sp, #8]
   21b38:	9802      	ldr	r0, [sp, #8]
   21b3a:	2f00      	cmp	r7, #0
   21b3c:	f040 80b6 	bne.w	21cac <am_hal_ble_blocking_transfer.part.7+0x280>
   21b40:	2301      	movs	r3, #1
   21b42:	6463      	str	r3, [r4, #68]	; 0x44
   21b44:	f001 ff8c 	bl	23a60 <am_hal_interrupt_master_set>
   21b48:	4b85      	ldr	r3, [pc, #532]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21b4a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   21b4e:	f367 0241 	bfi	r2, r7, #1, #1
   21b52:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21b56:	7b33      	ldrb	r3, [r6, #12]
   21b58:	2b00      	cmp	r3, #0
   21b5a:	f000 80cb 	beq.w	21cf4 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   21b5e:	2301      	movs	r3, #1
   21b60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   21b64:	f104 070c 	add.w	r7, r4, #12
   21b68:	6833      	ldr	r3, [r6, #0]
   21b6a:	6872      	ldr	r2, [r6, #4]
   21b6c:	68b0      	ldr	r0, [r6, #8]
   21b6e:	68f1      	ldr	r1, [r6, #12]
   21b70:	60e3      	str	r3, [r4, #12]
   21b72:	607a      	str	r2, [r7, #4]
   21b74:	60b8      	str	r0, [r7, #8]
   21b76:	60f9      	str	r1, [r7, #12]
   21b78:	6933      	ldr	r3, [r6, #16]
   21b7a:	6972      	ldr	r2, [r6, #20]
   21b7c:	617a      	str	r2, [r7, #20]
   21b7e:	613b      	str	r3, [r7, #16]
   21b80:	f001 ff6a 	bl	23a58 <am_hal_interrupt_master_disable>
   21b84:	9001      	str	r0, [sp, #4]
   21b86:	6823      	ldr	r3, [r4, #0]
   21b88:	4a77      	ldr	r2, [pc, #476]	; (21d68 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21b8a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21b8e:	4293      	cmp	r3, r2
   21b90:	f000 8197 	beq.w	21ec2 <am_hal_ble_blocking_transfer.part.7+0x496>
   21b94:	7ab3      	ldrb	r3, [r6, #10]
   21b96:	2b01      	cmp	r3, #1
   21b98:	f000 8185 	beq.w	21ea6 <am_hal_ble_blocking_transfer.part.7+0x47a>
   21b9c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   21b9e:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   21ba2:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 21d68 <am_hal_ble_blocking_transfer.part.7+0x33c>
   21ba6:	496e      	ldr	r1, [pc, #440]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21ba8:	f04f 0e00 	mov.w	lr, #0
   21bac:	45a9      	cmp	r9, r5
   21bae:	d926      	bls.n	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21bb0:	6823      	ldr	r3, [r4, #0]
   21bb2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21bb6:	4563      	cmp	r3, ip
   21bb8:	d1f8      	bne.n	21bac <am_hal_ble_blocking_transfer.part.7+0x180>
   21bba:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   21bbe:	f3c0 4007 	ubfx	r0, r0, #16, #8
   21bc2:	2803      	cmp	r0, #3
   21bc4:	d9f2      	bls.n	21bac <am_hal_ble_blocking_transfer.part.7+0x180>
   21bc6:	4581      	cmp	r9, r0
   21bc8:	bf94      	ite	ls
   21bca:	ebc5 0009 	rsbls	r0, r5, r9
   21bce:	f020 0003 	bichi.w	r0, r0, #3
   21bd2:	68e2      	ldr	r2, [r4, #12]
   21bd4:	f025 0303 	bic.w	r3, r5, #3
   21bd8:	b168      	cbz	r0, 21bf6 <am_hal_ble_blocking_transfer.part.7+0x1ca>
   21bda:	441a      	add	r2, r3
   21bdc:	2300      	movs	r3, #0
   21bde:	3304      	adds	r3, #4
   21be0:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   21be4:	f842 5b04 	str.w	r5, [r2], #4
   21be8:	4283      	cmp	r3, r0
   21bea:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   21bee:	d3f6      	bcc.n	21bde <am_hal_ble_blocking_transfer.part.7+0x1b2>
   21bf0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   21bf2:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   21bf6:	4405      	add	r5, r0
   21bf8:	45a9      	cmp	r9, r5
   21bfa:	63e5      	str	r5, [r4, #60]	; 0x3c
   21bfc:	d8d8      	bhi.n	21bb0 <am_hal_ble_blocking_transfer.part.7+0x184>
   21bfe:	9801      	ldr	r0, [sp, #4]
   21c00:	f001 ff2e 	bl	23a60 <am_hal_interrupt_master_set>
   21c04:	4b56      	ldr	r3, [pc, #344]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21c06:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   21c0a:	07d2      	lsls	r2, r2, #31
   21c0c:	d40d      	bmi.n	21c2a <am_hal_ble_blocking_transfer.part.7+0x1fe>
   21c0e:	4699      	mov	r9, r3
   21c10:	f242 7510 	movw	r5, #10000	; 0x2710
   21c14:	e002      	b.n	21c1c <am_hal_ble_blocking_transfer.part.7+0x1f0>
   21c16:	3d01      	subs	r5, #1
   21c18:	f000 8149 	beq.w	21eae <am_hal_ble_blocking_transfer.part.7+0x482>
   21c1c:	2010      	movs	r0, #16
   21c1e:	f001 fd15 	bl	2364c <am_hal_flash_delay>
   21c22:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21c26:	07db      	lsls	r3, r3, #31
   21c28:	d5f5      	bpl.n	21c16 <am_hal_ble_blocking_transfer.part.7+0x1ea>
   21c2a:	4a4d      	ldr	r2, [pc, #308]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21c2c:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   21c30:	f043 0301 	orr.w	r3, r3, #1
   21c34:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   21c38:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   21c3c:	2300      	movs	r3, #0
   21c3e:	f041 0102 	orr.w	r1, r1, #2
   21c42:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   21c46:	603b      	str	r3, [r7, #0]
   21c48:	607b      	str	r3, [r7, #4]
   21c4a:	60bb      	str	r3, [r7, #8]
   21c4c:	60fb      	str	r3, [r7, #12]
   21c4e:	613b      	str	r3, [r7, #16]
   21c50:	617b      	str	r3, [r7, #20]
   21c52:	63e3      	str	r3, [r4, #60]	; 0x3c
   21c54:	7ab3      	ldrb	r3, [r6, #10]
   21c56:	2b01      	cmp	r3, #1
   21c58:	f000 8113 	beq.w	21e82 <am_hal_ble_blocking_transfer.part.7+0x456>
   21c5c:	2b02      	cmp	r3, #2
   21c5e:	f000 8107 	beq.w	21e70 <am_hal_ble_blocking_transfer.part.7+0x444>
   21c62:	2300      	movs	r3, #0
   21c64:	4a3e      	ldr	r2, [pc, #248]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21c66:	4618      	mov	r0, r3
   21c68:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   21c6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   21c70:	b005      	add	sp, #20
   21c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c76:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   21c7a:	e71e      	b.n	21aba <am_hal_ble_blocking_transfer.part.7+0x8e>
   21c7c:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21c80:	05da      	lsls	r2, r3, #23
   21c82:	f53f af54 	bmi.w	21b2e <am_hal_ble_blocking_transfer.part.7+0x102>
   21c86:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   21c8a:	d012      	beq.n	21cb2 <am_hal_ble_blocking_transfer.part.7+0x286>
   21c8c:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   21c90:	061b      	lsls	r3, r3, #24
   21c92:	d40e      	bmi.n	21cb2 <am_hal_ble_blocking_transfer.part.7+0x286>
   21c94:	20a0      	movs	r0, #160	; 0xa0
   21c96:	f001 fcd9 	bl	2364c <am_hal_flash_delay>
   21c9a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   21c9e:	3501      	adds	r5, #1
   21ca0:	2b00      	cmp	r3, #0
   21ca2:	f43f af3a 	beq.w	21b1a <am_hal_ble_blocking_transfer.part.7+0xee>
   21ca6:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   21caa:	e740      	b.n	21b2e <am_hal_ble_blocking_transfer.part.7+0x102>
   21cac:	f001 fed8 	bl	23a60 <am_hal_interrupt_master_set>
   21cb0:	e7f0      	b.n	21c94 <am_hal_ble_blocking_transfer.part.7+0x268>
   21cb2:	6823      	ldr	r3, [r4, #0]
   21cb4:	4a2c      	ldr	r2, [pc, #176]	; (21d68 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21cb6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21cba:	4293      	cmp	r3, r2
   21cbc:	f000 811e 	beq.w	21efc <am_hal_ble_blocking_transfer.part.7+0x4d0>
   21cc0:	4b27      	ldr	r3, [pc, #156]	; (21d60 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21cc2:	482a      	ldr	r0, [pc, #168]	; (21d6c <am_hal_ble_blocking_transfer.part.7+0x340>)
   21cc4:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   21cc8:	f36f 0241 	bfc	r2, #1, #1
   21ccc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21cd0:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   21cd4:	b005      	add	sp, #20
   21cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cda:	f001 febd 	bl	23a58 <am_hal_interrupt_master_disable>
   21cde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21ce2:	9003      	str	r0, [sp, #12]
   21ce4:	9803      	ldr	r0, [sp, #12]
   21ce6:	2b00      	cmp	r3, #0
   21ce8:	d157      	bne.n	21d9a <am_hal_ble_blocking_transfer.part.7+0x36e>
   21cea:	2301      	movs	r3, #1
   21cec:	6463      	str	r3, [r4, #68]	; 0x44
   21cee:	f001 feb7 	bl	23a60 <am_hal_interrupt_master_set>
   21cf2:	e730      	b.n	21b56 <am_hal_ble_blocking_transfer.part.7+0x12a>
   21cf4:	f104 070c 	add.w	r7, r4, #12
   21cf8:	6833      	ldr	r3, [r6, #0]
   21cfa:	6872      	ldr	r2, [r6, #4]
   21cfc:	68b0      	ldr	r0, [r6, #8]
   21cfe:	68f1      	ldr	r1, [r6, #12]
   21d00:	60e3      	str	r3, [r4, #12]
   21d02:	607a      	str	r2, [r7, #4]
   21d04:	60b8      	str	r0, [r7, #8]
   21d06:	60f9      	str	r1, [r7, #12]
   21d08:	6933      	ldr	r3, [r6, #16]
   21d0a:	6972      	ldr	r2, [r6, #20]
   21d0c:	617a      	str	r2, [r7, #20]
   21d0e:	613b      	str	r3, [r7, #16]
   21d10:	f001 fea2 	bl	23a58 <am_hal_interrupt_master_disable>
   21d14:	9001      	str	r0, [sp, #4]
   21d16:	2c00      	cmp	r4, #0
   21d18:	f47f af35 	bne.w	21b86 <am_hal_ble_blocking_transfer.part.7+0x15a>
   21d1c:	7ab3      	ldrb	r3, [r6, #10]
   21d1e:	2b01      	cmp	r3, #1
   21d20:	f47f af3c 	bne.w	21b9c <am_hal_ble_blocking_transfer.part.7+0x170>
   21d24:	6823      	ldr	r3, [r4, #0]
   21d26:	4a10      	ldr	r2, [pc, #64]	; (21d68 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21d28:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   21d2c:	68e5      	ldr	r5, [r4, #12]
   21d2e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21d32:	4293      	cmp	r3, r2
   21d34:	d06b      	beq.n	21e0e <am_hal_ble_blocking_transfer.part.7+0x3e2>
   21d36:	f1bb 0f00 	cmp.w	fp, #0
   21d3a:	f43f af60 	beq.w	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21d3e:	f8df a020 	ldr.w	sl, [pc, #32]	; 21d60 <am_hal_ble_blocking_transfer.part.7+0x334>
   21d42:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   21d46:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21d4a:	2b03      	cmp	r3, #3
   21d4c:	d833      	bhi.n	21db6 <am_hal_ble_blocking_transfer.part.7+0x38a>
   21d4e:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   21d52:	07d9      	lsls	r1, r3, #31
   21d54:	f53f af53 	bmi.w	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21d58:	f8df 9014 	ldr.w	r9, [pc, #20]	; 21d70 <am_hal_ble_blocking_transfer.part.7+0x344>
   21d5c:	e013      	b.n	21d86 <am_hal_ble_blocking_transfer.part.7+0x35a>
   21d5e:	bf00      	nop
   21d60:	5000c000 	.word	0x5000c000
   21d64:	08000001 	.word	0x08000001
   21d68:	01775230 	.word	0x01775230
   21d6c:	08000002 	.word	0x08000002
   21d70:	0007a120 	.word	0x0007a120
   21d74:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   21d78:	07d8      	lsls	r0, r3, #31
   21d7a:	f53f af40 	bmi.w	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21d7e:	f1b9 0901 	subs.w	r9, r9, #1
   21d82:	f43f af3c 	beq.w	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21d86:	2010      	movs	r0, #16
   21d88:	f001 fc60 	bl	2364c <am_hal_flash_delay>
   21d8c:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   21d90:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21d94:	2b03      	cmp	r3, #3
   21d96:	d9ed      	bls.n	21d74 <am_hal_ble_blocking_transfer.part.7+0x348>
   21d98:	e00d      	b.n	21db6 <am_hal_ble_blocking_transfer.part.7+0x38a>
   21d9a:	f001 fe61 	bl	23a60 <am_hal_interrupt_master_set>
   21d9e:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   21da2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   21da6:	e678      	b.n	21a9a <am_hal_ble_blocking_transfer.part.7+0x6e>
   21da8:	2b03      	cmp	r3, #3
   21daa:	f240 80b8 	bls.w	21f1e <am_hal_ble_blocking_transfer.part.7+0x4f2>
   21dae:	f1bb 0f00 	cmp.w	fp, #0
   21db2:	f43f af24 	beq.w	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21db6:	f855 2b04 	ldr.w	r2, [r5], #4
   21dba:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   21dbe:	f1bb 0f03 	cmp.w	fp, #3
   21dc2:	f1a3 0304 	sub.w	r3, r3, #4
   21dc6:	f1ab 0b04 	sub.w	fp, fp, #4
   21dca:	f67f af18 	bls.w	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21dce:	e7eb      	b.n	21da8 <am_hal_ble_blocking_transfer.part.7+0x37c>
   21dd0:	2000      	movs	r0, #0
   21dd2:	4602      	mov	r2, r0
   21dd4:	f896 c00c 	ldrb.w	ip, [r6, #12]
   21dd8:	f896 e00a 	ldrb.w	lr, [r6, #10]
   21ddc:	8935      	ldrh	r5, [r6, #8]
   21dde:	4952      	ldr	r1, [pc, #328]	; (21f28 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   21de0:	015b      	lsls	r3, r3, #5
   21de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
   21de6:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   21dea:	022d      	lsls	r5, r5, #8
   21dec:	4029      	ands	r1, r5
   21dee:	ea4e 0303 	orr.w	r3, lr, r3
   21df2:	430b      	orrs	r3, r1
   21df4:	494d      	ldr	r1, [pc, #308]	; (21f2c <am_hal_ble_blocking_transfer.part.7+0x500>)
   21df6:	4313      	orrs	r3, r2
   21df8:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   21dfc:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   21e00:	7ab3      	ldrb	r3, [r6, #10]
   21e02:	2b01      	cmp	r3, #1
   21e04:	f47f aeca 	bne.w	21b9c <am_hal_ble_blocking_transfer.part.7+0x170>
   21e08:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   21e0c:	68e5      	ldr	r5, [r4, #12]
   21e0e:	79f2      	ldrb	r2, [r6, #7]
   21e10:	2a03      	cmp	r2, #3
   21e12:	d890      	bhi.n	21d36 <am_hal_ble_blocking_transfer.part.7+0x30a>
   21e14:	e8df f002 	tbb	[pc, r2]
   21e18:	1e242802 	.word	0x1e242802
   21e1c:	2100      	movs	r1, #0
   21e1e:	460b      	mov	r3, r1
   21e20:	f896 e00c 	ldrb.w	lr, [r6, #12]
   21e24:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   21e28:	483f      	ldr	r0, [pc, #252]	; (21f28 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   21e2a:	0152      	lsls	r2, r2, #5
   21e2c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   21e30:	f002 0260 	and.w	r2, r2, #96	; 0x60
   21e34:	f04e 0e01 	orr.w	lr, lr, #1
   21e38:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   21e3c:	ea0c 0000 	and.w	r0, ip, r0
   21e40:	ea4e 0202 	orr.w	r2, lr, r2
   21e44:	4302      	orrs	r2, r0
   21e46:	4839      	ldr	r0, [pc, #228]	; (21f2c <am_hal_ble_blocking_transfer.part.7+0x500>)
   21e48:	4313      	orrs	r3, r2
   21e4a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   21e4e:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   21e52:	e770      	b.n	21d36 <am_hal_ble_blocking_transfer.part.7+0x30a>
   21e54:	88b1      	ldrh	r1, [r6, #4]
   21e56:	79b3      	ldrb	r3, [r6, #6]
   21e58:	ba49      	rev16	r1, r1
   21e5a:	b289      	uxth	r1, r1
   21e5c:	061b      	lsls	r3, r3, #24
   21e5e:	e7df      	b.n	21e20 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   21e60:	7973      	ldrb	r3, [r6, #5]
   21e62:	7931      	ldrb	r1, [r6, #4]
   21e64:	061b      	lsls	r3, r3, #24
   21e66:	e7db      	b.n	21e20 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   21e68:	7933      	ldrb	r3, [r6, #4]
   21e6a:	2100      	movs	r1, #0
   21e6c:	061b      	lsls	r3, r3, #24
   21e6e:	e7d7      	b.n	21e20 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   21e70:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21e74:	2b00      	cmp	r3, #0
   21e76:	f43f aef4 	beq.w	21c62 <am_hal_ble_blocking_transfer.part.7+0x236>
   21e7a:	2300      	movs	r3, #0
   21e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21e80:	e6ef      	b.n	21c62 <am_hal_ble_blocking_transfer.part.7+0x236>
   21e82:	6823      	ldr	r3, [r4, #0]
   21e84:	492a      	ldr	r1, [pc, #168]	; (21f30 <am_hal_ble_blocking_transfer.part.7+0x504>)
   21e86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21e8a:	428b      	cmp	r3, r1
   21e8c:	d03f      	beq.n	21f0e <am_hal_ble_blocking_transfer.part.7+0x4e2>
   21e8e:	2301      	movs	r3, #1
   21e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21e94:	7ab3      	ldrb	r3, [r6, #10]
   21e96:	e6e1      	b.n	21c5c <am_hal_ble_blocking_transfer.part.7+0x230>
   21e98:	f64b 3080 	movw	r0, #48000	; 0xbb80
   21e9c:	f001 fbd6 	bl	2364c <am_hal_flash_delay>
   21ea0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21ea4:	e606      	b.n	21ab4 <am_hal_ble_blocking_transfer.part.7+0x88>
   21ea6:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   21eaa:	68e5      	ldr	r5, [r4, #12]
   21eac:	e743      	b.n	21d36 <am_hal_ble_blocking_transfer.part.7+0x30a>
   21eae:	4821      	ldr	r0, [pc, #132]	; (21f34 <am_hal_ble_blocking_transfer.part.7+0x508>)
   21eb0:	e5f3      	b.n	21a9a <am_hal_ble_blocking_transfer.part.7+0x6e>
   21eb2:	4a1e      	ldr	r2, [pc, #120]	; (21f2c <am_hal_ble_blocking_transfer.part.7+0x500>)
   21eb4:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   21eb8:	f043 030c 	orr.w	r3, r3, #12
   21ebc:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   21ec0:	e622      	b.n	21b08 <am_hal_ble_blocking_transfer.part.7+0xdc>
   21ec2:	79f3      	ldrb	r3, [r6, #7]
   21ec4:	2b03      	cmp	r3, #3
   21ec6:	f63f af29 	bhi.w	21d1c <am_hal_ble_blocking_transfer.part.7+0x2f0>
   21eca:	a201      	add	r2, pc, #4	; (adr r2, 21ed0 <am_hal_ble_blocking_transfer.part.7+0x4a4>)
   21ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21ed0:	00021dd1 	.word	0x00021dd1
   21ed4:	00021ef5 	.word	0x00021ef5
   21ed8:	00021eed 	.word	0x00021eed
   21edc:	00021ee1 	.word	0x00021ee1
   21ee0:	88b0      	ldrh	r0, [r6, #4]
   21ee2:	79b2      	ldrb	r2, [r6, #6]
   21ee4:	ba40      	rev16	r0, r0
   21ee6:	b280      	uxth	r0, r0
   21ee8:	0612      	lsls	r2, r2, #24
   21eea:	e773      	b.n	21dd4 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   21eec:	7972      	ldrb	r2, [r6, #5]
   21eee:	7930      	ldrb	r0, [r6, #4]
   21ef0:	0612      	lsls	r2, r2, #24
   21ef2:	e76f      	b.n	21dd4 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   21ef4:	7932      	ldrb	r2, [r6, #4]
   21ef6:	2000      	movs	r0, #0
   21ef8:	0612      	lsls	r2, r2, #24
   21efa:	e76b      	b.n	21dd4 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   21efc:	4b0b      	ldr	r3, [pc, #44]	; (21f2c <am_hal_ble_blocking_transfer.part.7+0x500>)
   21efe:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   21f02:	2102      	movs	r1, #2
   21f04:	f361 0283 	bfi	r2, r1, #2, #2
   21f08:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21f0c:	e6d8      	b.n	21cc0 <am_hal_ble_blocking_transfer.part.7+0x294>
   21f0e:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   21f12:	2102      	movs	r1, #2
   21f14:	f361 0383 	bfi	r3, r1, #2, #2
   21f18:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   21f1c:	e7b7      	b.n	21e8e <am_hal_ble_blocking_transfer.part.7+0x462>
   21f1e:	f1bb 0f00 	cmp.w	fp, #0
   21f22:	f47f af0e 	bne.w	21d42 <am_hal_ble_blocking_transfer.part.7+0x316>
   21f26:	e66a      	b.n	21bfe <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21f28:	000fff00 	.word	0x000fff00
   21f2c:	5000c000 	.word	0x5000c000
   21f30:	01775230 	.word	0x01775230
   21f34:	08000009 	.word	0x08000009

00021f38 <am_hal_ble_initialize>:
   21f38:	b108      	cbz	r0, 21f3e <am_hal_ble_initialize+0x6>
   21f3a:	2005      	movs	r0, #5
   21f3c:	4770      	bx	lr
   21f3e:	b149      	cbz	r1, 21f54 <am_hal_ble_initialize+0x1c>
   21f40:	b4f0      	push	{r4, r5, r6, r7}
   21f42:	4b19      	ldr	r3, [pc, #100]	; (21fa8 <am_hal_ble_initialize+0x70>)
   21f44:	78dc      	ldrb	r4, [r3, #3]
   21f46:	f3c4 0200 	ubfx	r2, r4, #0, #1
   21f4a:	b2d0      	uxtb	r0, r2
   21f4c:	b120      	cbz	r0, 21f58 <am_hal_ble_initialize+0x20>
   21f4e:	2007      	movs	r0, #7
   21f50:	bcf0      	pop	{r4, r5, r6, r7}
   21f52:	4770      	bx	lr
   21f54:	2006      	movs	r0, #6
   21f56:	4770      	bx	lr
   21f58:	f044 0401 	orr.w	r4, r4, #1
   21f5c:	70dc      	strb	r4, [r3, #3]
   21f5e:	681e      	ldr	r6, [r3, #0]
   21f60:	4f12      	ldr	r7, [pc, #72]	; (21fac <am_hal_ble_initialize+0x74>)
   21f62:	60d8      	str	r0, [r3, #12]
   21f64:	f367 0617 	bfi	r6, r7, #0, #24
   21f68:	6258      	str	r0, [r3, #36]	; 0x24
   21f6a:	6058      	str	r0, [r3, #4]
   21f6c:	63d8      	str	r0, [r3, #60]	; 0x3c
   21f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   21f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   21f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   21f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   21f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   21f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   21f86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   21f8a:	721a      	strb	r2, [r3, #8]
   21f8c:	601e      	str	r6, [r3, #0]
   21f8e:	6118      	str	r0, [r3, #16]
   21f90:	6158      	str	r0, [r3, #20]
   21f92:	6198      	str	r0, [r3, #24]
   21f94:	61d8      	str	r0, [r3, #28]
   21f96:	6218      	str	r0, [r3, #32]
   21f98:	6298      	str	r0, [r3, #40]	; 0x28
   21f9a:	62d8      	str	r0, [r3, #44]	; 0x2c
   21f9c:	6318      	str	r0, [r3, #48]	; 0x30
   21f9e:	6358      	str	r0, [r3, #52]	; 0x34
   21fa0:	6398      	str	r0, [r3, #56]	; 0x38
   21fa2:	600b      	str	r3, [r1, #0]
   21fa4:	e7d4      	b.n	21f50 <am_hal_ble_initialize+0x18>
   21fa6:	bf00      	nop
   21fa8:	1000a0c8 	.word	0x1000a0c8
   21fac:	00775230 	.word	0x00775230

00021fb0 <am_hal_ble_deinitialize>:
   21fb0:	b128      	cbz	r0, 21fbe <am_hal_ble_deinitialize+0xe>
   21fb2:	6803      	ldr	r3, [r0, #0]
   21fb4:	4a13      	ldr	r2, [pc, #76]	; (22004 <am_hal_ble_deinitialize+0x54>)
   21fb6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21fba:	4293      	cmp	r3, r2
   21fbc:	d001      	beq.n	21fc2 <am_hal_ble_deinitialize+0x12>
   21fbe:	2002      	movs	r0, #2
   21fc0:	4770      	bx	lr
   21fc2:	78c2      	ldrb	r2, [r0, #3]
   21fc4:	2300      	movs	r3, #0
   21fc6:	f363 0200 	bfi	r2, r3, #0, #1
   21fca:	70c2      	strb	r2, [r0, #3]
   21fcc:	6802      	ldr	r2, [r0, #0]
   21fce:	60c3      	str	r3, [r0, #12]
   21fd0:	f363 0217 	bfi	r2, r3, #0, #24
   21fd4:	6103      	str	r3, [r0, #16]
   21fd6:	6143      	str	r3, [r0, #20]
   21fd8:	6183      	str	r3, [r0, #24]
   21fda:	61c3      	str	r3, [r0, #28]
   21fdc:	6203      	str	r3, [r0, #32]
   21fde:	6043      	str	r3, [r0, #4]
   21fe0:	63c3      	str	r3, [r0, #60]	; 0x3c
   21fe2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   21fe6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   21fea:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   21fee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   21ff2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   21ff6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   21ffa:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   21ffe:	6002      	str	r2, [r0, #0]
   22000:	4618      	mov	r0, r3
   22002:	4770      	bx	lr
   22004:	01775230 	.word	0x01775230

00022008 <am_hal_ble_config>:
   22008:	b128      	cbz	r0, 22016 <am_hal_ble_config+0xe>
   2200a:	6803      	ldr	r3, [r0, #0]
   2200c:	4a3c      	ldr	r2, [pc, #240]	; (22100 <am_hal_ble_config+0xf8>)
   2200e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22012:	4293      	cmp	r3, r2
   22014:	d001      	beq.n	2201a <am_hal_ble_config+0x12>
   22016:	2002      	movs	r0, #2
   22018:	4770      	bx	lr
   2201a:	b4f0      	push	{r4, r5, r6, r7}
   2201c:	4b39      	ldr	r3, [pc, #228]	; (22104 <am_hal_ble_config+0xfc>)
   2201e:	6844      	ldr	r4, [r0, #4]
   22020:	4d38      	ldr	r5, [pc, #224]	; (22104 <am_hal_ble_config+0xfc>)
   22022:	2203      	movs	r2, #3
   22024:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   22028:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2202c:	f36f 4251 	bfc	r2, #17, #1
   22030:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   22034:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   22038:	f36f 4210 	bfc	r2, #16, #1
   2203c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   22040:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   22044:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   22048:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   2204c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   22050:	6888      	ldr	r0, [r1, #8]
   22052:	f360 220d 	bfi	r2, r0, #8, #6
   22056:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   2205a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   2205e:	6848      	ldr	r0, [r1, #4]
   22060:	f360 0205 	bfi	r2, r0, #0, #6
   22064:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   22068:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2206c:	f042 0201 	orr.w	r2, r2, #1
   22070:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   22074:	680b      	ldr	r3, [r1, #0]
   22076:	68c8      	ldr	r0, [r1, #12]
   22078:	4a23      	ldr	r2, [pc, #140]	; (22108 <am_hal_ble_config+0x100>)
   2207a:	021b      	lsls	r3, r3, #8
   2207c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   22080:	2802      	cmp	r0, #2
   22082:	bf08      	it	eq
   22084:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   22088:	f043 0301 	orr.w	r3, r3, #1
   2208c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   22090:	68d3      	ldr	r3, [r2, #12]
   22092:	b2db      	uxtb	r3, r3
   22094:	2b12      	cmp	r3, #18
   22096:	d009      	beq.n	220ac <am_hal_ble_config+0xa4>
   22098:	4b1c      	ldr	r3, [pc, #112]	; (2210c <am_hal_ble_config+0x104>)
   2209a:	7e8a      	ldrb	r2, [r1, #26]
   2209c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   220a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   220a4:	2000      	movs	r0, #0
   220a6:	7222      	strb	r2, [r4, #8]
   220a8:	bcf0      	pop	{r4, r5, r6, r7}
   220aa:	4770      	bx	lr
   220ac:	4f18      	ldr	r7, [pc, #96]	; (22110 <am_hal_ble_config+0x108>)
   220ae:	68fa      	ldr	r2, [r7, #12]
   220b0:	687b      	ldr	r3, [r7, #4]
   220b2:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   220b6:	6908      	ldr	r0, [r1, #16]
   220b8:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   220bc:	6908      	ldr	r0, [r1, #16]
   220be:	0a00      	lsrs	r0, r0, #8
   220c0:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   220c4:	6948      	ldr	r0, [r1, #20]
   220c6:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   220ca:	6948      	ldr	r0, [r1, #20]
   220cc:	0a00      	lsrs	r0, r0, #8
   220ce:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   220d2:	7e48      	ldrb	r0, [r1, #25]
   220d4:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   220d8:	7e08      	ldrb	r0, [r1, #24]
   220da:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   220de:	b16b      	cbz	r3, 220fc <am_hal_ble_config+0xf4>
   220e0:	4e0c      	ldr	r6, [pc, #48]	; (22114 <am_hal_ble_config+0x10c>)
   220e2:	18d5      	adds	r5, r2, r3
   220e4:	2300      	movs	r3, #0
   220e6:	f812 0b01 	ldrb.w	r0, [r2], #1
   220ea:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   220ee:	4295      	cmp	r5, r2
   220f0:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   220f4:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   220f8:	b29b      	uxth	r3, r3
   220fa:	d1f4      	bne.n	220e6 <am_hal_ble_config+0xde>
   220fc:	60bb      	str	r3, [r7, #8]
   220fe:	e7cb      	b.n	22098 <am_hal_ble_config+0x90>
   22100:	01775230 	.word	0x01775230
   22104:	5000c000 	.word	0x5000c000
   22108:	40020000 	.word	0x40020000
   2210c:	1000a0c8 	.word	0x1000a0c8
   22110:	10002cbc 	.word	0x10002cbc
   22114:	0002734c 	.word	0x0002734c

00022118 <am_hal_ble_power_control>:
   22118:	b538      	push	{r3, r4, r5, lr}
   2211a:	4b52      	ldr	r3, [pc, #328]	; (22264 <am_hal_ble_power_control+0x14c>)
   2211c:	68db      	ldr	r3, [r3, #12]
   2211e:	b2db      	uxtb	r3, r3
   22120:	2b11      	cmp	r3, #17
   22122:	d903      	bls.n	2212c <am_hal_ble_power_control+0x14>
   22124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22128:	4a4f      	ldr	r2, [pc, #316]	; (22268 <am_hal_ble_power_control+0x150>)
   2212a:	63da      	str	r2, [r3, #60]	; 0x3c
   2212c:	b128      	cbz	r0, 2213a <am_hal_ble_power_control+0x22>
   2212e:	6803      	ldr	r3, [r0, #0]
   22130:	4a4e      	ldr	r2, [pc, #312]	; (2226c <am_hal_ble_power_control+0x154>)
   22132:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22136:	4293      	cmp	r3, r2
   22138:	d002      	beq.n	22140 <am_hal_ble_power_control+0x28>
   2213a:	2402      	movs	r4, #2
   2213c:	4620      	mov	r0, r4
   2213e:	bd38      	pop	{r3, r4, r5, pc}
   22140:	b9f9      	cbnz	r1, 22182 <am_hal_ble_power_control+0x6a>
   22142:	4b4b      	ldr	r3, [pc, #300]	; (22270 <am_hal_ble_power_control+0x158>)
   22144:	699b      	ldr	r3, [r3, #24]
   22146:	05db      	lsls	r3, r3, #23
   22148:	d454      	bmi.n	221f4 <am_hal_ble_power_control+0xdc>
   2214a:	4d46      	ldr	r5, [pc, #280]	; (22264 <am_hal_ble_power_control+0x14c>)
   2214c:	69ab      	ldr	r3, [r5, #24]
   2214e:	f043 0301 	orr.w	r3, r3, #1
   22152:	61ab      	str	r3, [r5, #24]
   22154:	69ab      	ldr	r3, [r5, #24]
   22156:	f003 0307 	and.w	r3, r3, #7
   2215a:	2b07      	cmp	r3, #7
   2215c:	d00b      	beq.n	22176 <am_hal_ble_power_control+0x5e>
   2215e:	4c45      	ldr	r4, [pc, #276]	; (22274 <am_hal_ble_power_control+0x15c>)
   22160:	e001      	b.n	22166 <am_hal_ble_power_control+0x4e>
   22162:	3c01      	subs	r4, #1
   22164:	d06b      	beq.n	2223e <am_hal_ble_power_control+0x126>
   22166:	2010      	movs	r0, #16
   22168:	f001 fa70 	bl	2364c <am_hal_flash_delay>
   2216c:	69ab      	ldr	r3, [r5, #24]
   2216e:	f003 0307 	and.w	r3, r3, #7
   22172:	2b07      	cmp	r3, #7
   22174:	d1f5      	bne.n	22162 <am_hal_ble_power_control+0x4a>
   22176:	200e      	movs	r0, #14
   22178:	f001 fd98 	bl	23cac <am_hal_pwrctrl_periph_enable>
   2217c:	b128      	cbz	r0, 2218a <am_hal_ble_power_control+0x72>
   2217e:	4c3e      	ldr	r4, [pc, #248]	; (22278 <am_hal_ble_power_control+0x160>)
   22180:	e7dc      	b.n	2213c <am_hal_ble_power_control+0x24>
   22182:	2901      	cmp	r1, #1
   22184:	d038      	beq.n	221f8 <am_hal_ble_power_control+0xe0>
   22186:	2407      	movs	r4, #7
   22188:	e7d8      	b.n	2213c <am_hal_ble_power_control+0x24>
   2218a:	4b3c      	ldr	r3, [pc, #240]	; (2227c <am_hal_ble_power_control+0x164>)
   2218c:	4935      	ldr	r1, [pc, #212]	; (22264 <am_hal_ble_power_control+0x14c>)
   2218e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22192:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   22196:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2219a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   2219e:	f360 02df 	bfi	r2, r0, #3, #29
   221a2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   221a6:	68cb      	ldr	r3, [r1, #12]
   221a8:	b2db      	uxtb	r3, r3
   221aa:	2b11      	cmp	r3, #17
   221ac:	d949      	bls.n	22242 <am_hal_ble_power_control+0x12a>
   221ae:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   221b2:	f043 0320 	orr.w	r3, r3, #32
   221b6:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   221ba:	4d30      	ldr	r5, [pc, #192]	; (2227c <am_hal_ble_power_control+0x164>)
   221bc:	4830      	ldr	r0, [pc, #192]	; (22280 <am_hal_ble_power_control+0x168>)
   221be:	f001 fa45 	bl	2364c <am_hal_flash_delay>
   221c2:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   221c6:	f043 0301 	orr.w	r3, r3, #1
   221ca:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   221ce:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   221d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
   221d6:	2b03      	cmp	r3, #3
   221d8:	d00c      	beq.n	221f4 <am_hal_ble_power_control+0xdc>
   221da:	4c2a      	ldr	r4, [pc, #168]	; (22284 <am_hal_ble_power_control+0x16c>)
   221dc:	e001      	b.n	221e2 <am_hal_ble_power_control+0xca>
   221de:	3c01      	subs	r4, #1
   221e0:	d039      	beq.n	22256 <am_hal_ble_power_control+0x13e>
   221e2:	2010      	movs	r0, #16
   221e4:	f001 fa32 	bl	2364c <am_hal_flash_delay>
   221e8:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   221ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
   221f0:	2b03      	cmp	r3, #3
   221f2:	d1f4      	bne.n	221de <am_hal_ble_power_control+0xc6>
   221f4:	2400      	movs	r4, #0
   221f6:	e7a1      	b.n	2213c <am_hal_ble_power_control+0x24>
   221f8:	4b20      	ldr	r3, [pc, #128]	; (2227c <am_hal_ble_power_control+0x164>)
   221fa:	481a      	ldr	r0, [pc, #104]	; (22264 <am_hal_ble_power_control+0x14c>)
   221fc:	2200      	movs	r2, #0
   221fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   22202:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   22206:	f362 01df 	bfi	r1, r2, #3, #29
   2220a:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   2220e:	68c3      	ldr	r3, [r0, #12]
   22210:	b2db      	uxtb	r3, r3
   22212:	2b11      	cmp	r3, #17
   22214:	d919      	bls.n	2224a <am_hal_ble_power_control+0x132>
   22216:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   2221a:	f362 1345 	bfi	r3, r2, #5, #1
   2221e:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   22222:	4b16      	ldr	r3, [pc, #88]	; (2227c <am_hal_ble_power_control+0x164>)
   22224:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   22228:	f36f 0200 	bfc	r2, #0, #1
   2222c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   22230:	200e      	movs	r0, #14
   22232:	f001 fd65 	bl	23d00 <am_hal_pwrctrl_periph_disable>
   22236:	4604      	mov	r4, r0
   22238:	b178      	cbz	r0, 2225a <am_hal_ble_power_control+0x142>
   2223a:	4c13      	ldr	r4, [pc, #76]	; (22288 <am_hal_ble_power_control+0x170>)
   2223c:	e77e      	b.n	2213c <am_hal_ble_power_control+0x24>
   2223e:	4c13      	ldr	r4, [pc, #76]	; (2228c <am_hal_ble_power_control+0x174>)
   22240:	e77c      	b.n	2213c <am_hal_ble_power_control+0x24>
   22242:	4b13      	ldr	r3, [pc, #76]	; (22290 <am_hal_ble_power_control+0x178>)
   22244:	2204      	movs	r2, #4
   22246:	601a      	str	r2, [r3, #0]
   22248:	e7b7      	b.n	221ba <am_hal_ble_power_control+0xa2>
   2224a:	4a11      	ldr	r2, [pc, #68]	; (22290 <am_hal_ble_power_control+0x178>)
   2224c:	6813      	ldr	r3, [r2, #0]
   2224e:	f023 0304 	bic.w	r3, r3, #4
   22252:	6013      	str	r3, [r2, #0]
   22254:	e7e5      	b.n	22222 <am_hal_ble_power_control+0x10a>
   22256:	4c0f      	ldr	r4, [pc, #60]	; (22294 <am_hal_ble_power_control+0x17c>)
   22258:	e770      	b.n	2213c <am_hal_ble_power_control+0x24>
   2225a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   2225e:	f001 f9f5 	bl	2364c <am_hal_flash_delay>
   22262:	e76b      	b.n	2213c <am_hal_ble_power_control+0x24>
   22264:	40020000 	.word	0x40020000
   22268:	0fc0400f 	.word	0x0fc0400f
   2226c:	01775230 	.word	0x01775230
   22270:	40021000 	.word	0x40021000
   22274:	000186a0 	.word	0x000186a0
   22278:	08000007 	.word	0x08000007
   2227c:	5000c000 	.word	0x5000c000
   22280:	00013880 	.word	0x00013880
   22284:	000f4240 	.word	0x000f4240
   22288:	08000006 	.word	0x08000006
   2228c:	08000005 	.word	0x08000005
   22290:	40020198 	.word	0x40020198
   22294:	08000008 	.word	0x08000008

00022298 <am_hal_ble_patch_copy_end_apply>:
   22298:	b128      	cbz	r0, 222a6 <am_hal_ble_patch_copy_end_apply+0xe>
   2229a:	6803      	ldr	r3, [r0, #0]
   2229c:	4a46      	ldr	r2, [pc, #280]	; (223b8 <am_hal_ble_patch_copy_end_apply+0x120>)
   2229e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   222a2:	4293      	cmp	r3, r2
   222a4:	d001      	beq.n	222aa <am_hal_ble_patch_copy_end_apply+0x12>
   222a6:	2002      	movs	r0, #2
   222a8:	4770      	bx	lr
   222aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   222ae:	b092      	sub	sp, #72	; 0x48
   222b0:	2501      	movs	r5, #1
   222b2:	2400      	movs	r4, #0
   222b4:	4606      	mov	r6, r0
   222b6:	21f1      	movs	r1, #241	; 0xf1
   222b8:	20ee      	movs	r0, #238	; 0xee
   222ba:	2202      	movs	r2, #2
   222bc:	f88d 5000 	strb.w	r5, [sp]
   222c0:	f88d 0001 	strb.w	r0, [sp, #1]
   222c4:	f88d 1002 	strb.w	r1, [sp, #2]
   222c8:	f88d 2003 	strb.w	r2, [sp, #3]
   222cc:	f88d 4004 	strb.w	r4, [sp, #4]
   222d0:	f88d 4005 	strb.w	r4, [sp, #5]
   222d4:	f241 3588 	movw	r5, #5000	; 0x1388
   222d8:	f04f 0806 	mov.w	r8, #6
   222dc:	461f      	mov	r7, r3
   222de:	2201      	movs	r2, #1
   222e0:	42bb      	cmp	r3, r7
   222e2:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   222e6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   222ea:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   222ee:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   222f2:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   222f6:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   222fa:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   222fe:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   22302:	940e      	str	r4, [sp, #56]	; 0x38
   22304:	940f      	str	r4, [sp, #60]	; 0x3c
   22306:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   2230a:	d029      	beq.n	22360 <am_hal_ble_patch_copy_end_apply+0xc8>
   2230c:	4b2b      	ldr	r3, [pc, #172]	; (223bc <am_hal_ble_patch_copy_end_apply+0x124>)
   2230e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   22312:	0612      	lsls	r2, r2, #24
   22314:	d40c      	bmi.n	22330 <am_hal_ble_patch_copy_end_apply+0x98>
   22316:	4d2a      	ldr	r5, [pc, #168]	; (223c0 <am_hal_ble_patch_copy_end_apply+0x128>)
   22318:	461c      	mov	r4, r3
   2231a:	2010      	movs	r0, #16
   2231c:	f001 f996 	bl	2364c <am_hal_flash_delay>
   22320:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   22324:	0619      	lsls	r1, r3, #24
   22326:	d403      	bmi.n	22330 <am_hal_ble_patch_copy_end_apply+0x98>
   22328:	3d01      	subs	r5, #1
   2232a:	d1f6      	bne.n	2231a <am_hal_ble_patch_copy_end_apply+0x82>
   2232c:	4825      	ldr	r0, [pc, #148]	; (223c4 <am_hal_ble_patch_copy_end_apply+0x12c>)
   2232e:	e014      	b.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   22330:	6832      	ldr	r2, [r6, #0]
   22332:	4921      	ldr	r1, [pc, #132]	; (223b8 <am_hal_ble_patch_copy_end_apply+0x120>)
   22334:	f8cd d010 	str.w	sp, [sp, #16]
   22338:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2233c:	2300      	movs	r3, #0
   2233e:	2402      	movs	r4, #2
   22340:	2005      	movs	r0, #5
   22342:	428a      	cmp	r2, r1
   22344:	9306      	str	r3, [sp, #24]
   22346:	9305      	str	r3, [sp, #20]
   22348:	9307      	str	r3, [sp, #28]
   2234a:	9308      	str	r3, [sp, #32]
   2234c:	9309      	str	r3, [sp, #36]	; 0x24
   2234e:	f88d 401a 	strb.w	r4, [sp, #26]
   22352:	f8ad 0018 	strh.w	r0, [sp, #24]
   22356:	d00f      	beq.n	22378 <am_hal_ble_patch_copy_end_apply+0xe0>
   22358:	2002      	movs	r0, #2
   2235a:	b012      	add	sp, #72	; 0x48
   2235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22360:	a90a      	add	r1, sp, #40	; 0x28
   22362:	4630      	mov	r0, r6
   22364:	f7ff fb62 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22368:	2800      	cmp	r0, #0
   2236a:	d0cf      	beq.n	2230c <am_hal_ble_patch_copy_end_apply+0x74>
   2236c:	3d01      	subs	r5, #1
   2236e:	d0f4      	beq.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   22370:	6833      	ldr	r3, [r6, #0]
   22372:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22376:	e7b2      	b.n	222de <am_hal_ble_patch_copy_end_apply+0x46>
   22378:	a904      	add	r1, sp, #16
   2237a:	4630      	mov	r0, r6
   2237c:	f7ff fb56 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22380:	2800      	cmp	r0, #0
   22382:	d1ea      	bne.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   22384:	f89d 3000 	ldrb.w	r3, [sp]
   22388:	2b04      	cmp	r3, #4
   2238a:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   2238e:	f04f 0001 	mov.w	r0, #1
   22392:	d1e2      	bne.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   22394:	f89d 3001 	ldrb.w	r3, [sp, #1]
   22398:	2bee      	cmp	r3, #238	; 0xee
   2239a:	d1de      	bne.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   2239c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   223a0:	429a      	cmp	r2, r3
   223a2:	d1da      	bne.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   223a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   223a8:	4283      	cmp	r3, r0
   223aa:	d1d6      	bne.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   223ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
   223b0:	3000      	adds	r0, #0
   223b2:	bf18      	it	ne
   223b4:	2001      	movne	r0, #1
   223b6:	e7d0      	b.n	2235a <am_hal_ble_patch_copy_end_apply+0xc2>
   223b8:	01775230 	.word	0x01775230
   223bc:	5000c000 	.word	0x5000c000
   223c0:	000f4240 	.word	0x000f4240
   223c4:	08000004 	.word	0x08000004

000223c8 <am_hal_ble_blocking_hci_write>:
   223c8:	b530      	push	{r4, r5, lr}
   223ca:	b087      	sub	sp, #28
   223cc:	2400      	movs	r4, #0
   223ce:	b29b      	uxth	r3, r3
   223d0:	2501      	movs	r5, #1
   223d2:	f88d 1004 	strb.w	r1, [sp, #4]
   223d6:	f8ad 3008 	strh.w	r3, [sp, #8]
   223da:	9200      	str	r2, [sp, #0]
   223dc:	f88d 4005 	strb.w	r4, [sp, #5]
   223e0:	f88d 4006 	strb.w	r4, [sp, #6]
   223e4:	f88d 4007 	strb.w	r4, [sp, #7]
   223e8:	f88d 400b 	strb.w	r4, [sp, #11]
   223ec:	f88d 400c 	strb.w	r4, [sp, #12]
   223f0:	9404      	str	r4, [sp, #16]
   223f2:	9405      	str	r4, [sp, #20]
   223f4:	f88d 500a 	strb.w	r5, [sp, #10]
   223f8:	b128      	cbz	r0, 22406 <am_hal_ble_blocking_hci_write+0x3e>
   223fa:	6802      	ldr	r2, [r0, #0]
   223fc:	4c09      	ldr	r4, [pc, #36]	; (22424 <am_hal_ble_blocking_hci_write+0x5c>)
   223fe:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   22402:	42a2      	cmp	r2, r4
   22404:	d002      	beq.n	2240c <am_hal_ble_blocking_hci_write+0x44>
   22406:	2000      	movs	r0, #0
   22408:	b007      	add	sp, #28
   2240a:	bd30      	pop	{r4, r5, pc}
   2240c:	b939      	cbnz	r1, 2241e <am_hal_ble_blocking_hci_write+0x56>
   2240e:	2b00      	cmp	r3, #0
   22410:	d0f9      	beq.n	22406 <am_hal_ble_blocking_hci_write+0x3e>
   22412:	4669      	mov	r1, sp
   22414:	f7ff fb0a 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22418:	2800      	cmp	r0, #0
   2241a:	d0f4      	beq.n	22406 <am_hal_ble_blocking_hci_write+0x3e>
   2241c:	e7f4      	b.n	22408 <am_hal_ble_blocking_hci_write+0x40>
   2241e:	f88d 5007 	strb.w	r5, [sp, #7]
   22422:	e7f4      	b.n	2240e <am_hal_ble_blocking_hci_write+0x46>
   22424:	01775230 	.word	0x01775230

00022428 <am_hal_ble_blocking_hci_read>:
   22428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2242c:	b089      	sub	sp, #36	; 0x24
   2242e:	2300      	movs	r3, #0
   22430:	2502      	movs	r5, #2
   22432:	ac01      	add	r4, sp, #4
   22434:	9402      	str	r4, [sp, #8]
   22436:	f88d 300c 	strb.w	r3, [sp, #12]
   2243a:	f88d 300d 	strb.w	r3, [sp, #13]
   2243e:	f88d 300e 	strb.w	r3, [sp, #14]
   22442:	f88d 300f 	strb.w	r3, [sp, #15]
   22446:	f88d 3013 	strb.w	r3, [sp, #19]
   2244a:	f88d 3014 	strb.w	r3, [sp, #20]
   2244e:	9306      	str	r3, [sp, #24]
   22450:	9307      	str	r3, [sp, #28]
   22452:	f8ad 5010 	strh.w	r5, [sp, #16]
   22456:	f88d 5012 	strb.w	r5, [sp, #18]
   2245a:	b128      	cbz	r0, 22468 <am_hal_ble_blocking_hci_read+0x40>
   2245c:	6804      	ldr	r4, [r0, #0]
   2245e:	4e1f      	ldr	r6, [pc, #124]	; (224dc <am_hal_ble_blocking_hci_read+0xb4>)
   22460:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   22464:	42b4      	cmp	r4, r6
   22466:	d003      	beq.n	22470 <am_hal_ble_blocking_hci_read+0x48>
   22468:	2000      	movs	r0, #0
   2246a:	b009      	add	sp, #36	; 0x24
   2246c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22470:	460f      	mov	r7, r1
   22472:	491b      	ldr	r1, [pc, #108]	; (224e0 <am_hal_ble_blocking_hci_read+0xb8>)
   22474:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   22478:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   2247c:	4681      	mov	r9, r0
   2247e:	4690      	mov	r8, r2
   22480:	b92e      	cbnz	r6, 2248e <am_hal_ble_blocking_hci_read+0x66>
   22482:	f1b8 0f00 	cmp.w	r8, #0
   22486:	d0ef      	beq.n	22468 <am_hal_ble_blocking_hci_read+0x40>
   22488:	f8c8 6000 	str.w	r6, [r8]
   2248c:	e7ec      	b.n	22468 <am_hal_ble_blocking_hci_read+0x40>
   2248e:	a902      	add	r1, sp, #8
   22490:	f7ff facc 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22494:	2800      	cmp	r0, #0
   22496:	d1e8      	bne.n	2246a <am_hal_ble_blocking_hci_read+0x42>
   22498:	f89d 0005 	ldrb.w	r0, [sp, #5]
   2249c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   224a0:	9702      	str	r7, [sp, #8]
   224a2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   224a6:	b289      	uxth	r1, r1
   224a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   224ac:	f8ad 1010 	strh.w	r1, [sp, #16]
   224b0:	d901      	bls.n	224b6 <am_hal_ble_blocking_hci_read+0x8e>
   224b2:	2005      	movs	r0, #5
   224b4:	e7d9      	b.n	2246a <am_hal_ble_blocking_hci_read+0x42>
   224b6:	f8d9 0000 	ldr.w	r0, [r9]
   224ba:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   224be:	42a0      	cmp	r0, r4
   224c0:	d001      	beq.n	224c6 <am_hal_ble_blocking_hci_read+0x9e>
   224c2:	4628      	mov	r0, r5
   224c4:	e7d1      	b.n	2246a <am_hal_ble_blocking_hci_read+0x42>
   224c6:	b129      	cbz	r1, 224d4 <am_hal_ble_blocking_hci_read+0xac>
   224c8:	a902      	add	r1, sp, #8
   224ca:	4648      	mov	r0, r9
   224cc:	f7ff faae 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   224d0:	2800      	cmp	r0, #0
   224d2:	d1ca      	bne.n	2246a <am_hal_ble_blocking_hci_read+0x42>
   224d4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   224d8:	e7d3      	b.n	22482 <am_hal_ble_blocking_hci_read+0x5a>
   224da:	bf00      	nop
   224dc:	01775230 	.word	0x01775230
   224e0:	5000c000 	.word	0x5000c000

000224e4 <am_hal_ble_blocking_transfer>:
   224e4:	b128      	cbz	r0, 224f2 <am_hal_ble_blocking_transfer+0xe>
   224e6:	6803      	ldr	r3, [r0, #0]
   224e8:	4a08      	ldr	r2, [pc, #32]	; (2250c <am_hal_ble_blocking_transfer+0x28>)
   224ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   224ee:	4293      	cmp	r3, r2
   224f0:	d001      	beq.n	224f6 <am_hal_ble_blocking_transfer+0x12>
   224f2:	2002      	movs	r0, #2
   224f4:	4770      	bx	lr
   224f6:	890b      	ldrh	r3, [r1, #8]
   224f8:	b410      	push	{r4}
   224fa:	b11b      	cbz	r3, 22504 <am_hal_ble_blocking_transfer+0x20>
   224fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   22500:	f7ff ba94 	b.w	21a2c <am_hal_ble_blocking_transfer.part.7>
   22504:	4618      	mov	r0, r3
   22506:	f85d 4b04 	ldr.w	r4, [sp], #4
   2250a:	4770      	bx	lr
   2250c:	01775230 	.word	0x01775230

00022510 <am_hal_ble_patch_apply>:
   22510:	b128      	cbz	r0, 2251e <am_hal_ble_patch_apply+0xe>
   22512:	6803      	ldr	r3, [r0, #0]
   22514:	4aae      	ldr	r2, [pc, #696]	; (227d0 <am_hal_ble_patch_apply+0x2c0>)
   22516:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2251a:	4293      	cmp	r3, r2
   2251c:	d002      	beq.n	22524 <am_hal_ble_patch_apply+0x14>
   2251e:	2302      	movs	r3, #2
   22520:	4618      	mov	r0, r3
   22522:	4770      	bx	lr
   22524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22528:	684a      	ldr	r2, [r1, #4]
   2252a:	680d      	ldr	r5, [r1, #0]
   2252c:	b095      	sub	sp, #84	; 0x54
   2252e:	2701      	movs	r7, #1
   22530:	4604      	mov	r4, r0
   22532:	460e      	mov	r6, r1
   22534:	f88d 200c 	strb.w	r2, [sp, #12]
   22538:	20f1      	movs	r0, #241	; 0xf1
   2253a:	0a12      	lsrs	r2, r2, #8
   2253c:	2102      	movs	r1, #2
   2253e:	f88d 7008 	strb.w	r7, [sp, #8]
   22542:	f88d 5009 	strb.w	r5, [sp, #9]
   22546:	f88d 200d 	strb.w	r2, [sp, #13]
   2254a:	f88d 000a 	strb.w	r0, [sp, #10]
   2254e:	f88d 100b 	strb.w	r1, [sp, #11]
   22552:	f241 3788 	movw	r7, #5000	; 0x1388
   22556:	2500      	movs	r5, #0
   22558:	f04f 0906 	mov.w	r9, #6
   2255c:	4698      	mov	r8, r3
   2255e:	2201      	movs	r2, #1
   22560:	a902      	add	r1, sp, #8
   22562:	4543      	cmp	r3, r8
   22564:	910c      	str	r1, [sp, #48]	; 0x30
   22566:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   2256a:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   2256e:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   22572:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   22576:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   2257a:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   2257e:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   22582:	9510      	str	r5, [sp, #64]	; 0x40
   22584:	9511      	str	r5, [sp, #68]	; 0x44
   22586:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   2258a:	d02b      	beq.n	225e4 <am_hal_ble_patch_apply+0xd4>
   2258c:	4b91      	ldr	r3, [pc, #580]	; (227d4 <am_hal_ble_patch_apply+0x2c4>)
   2258e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   22592:	0612      	lsls	r2, r2, #24
   22594:	d40c      	bmi.n	225b0 <am_hal_ble_patch_apply+0xa0>
   22596:	4f90      	ldr	r7, [pc, #576]	; (227d8 <am_hal_ble_patch_apply+0x2c8>)
   22598:	461d      	mov	r5, r3
   2259a:	2010      	movs	r0, #16
   2259c:	f001 f856 	bl	2364c <am_hal_flash_delay>
   225a0:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   225a4:	061b      	lsls	r3, r3, #24
   225a6:	d403      	bmi.n	225b0 <am_hal_ble_patch_apply+0xa0>
   225a8:	3f01      	subs	r7, #1
   225aa:	d1f6      	bne.n	2259a <am_hal_ble_patch_apply+0x8a>
   225ac:	4b8b      	ldr	r3, [pc, #556]	; (227dc <am_hal_ble_patch_apply+0x2cc>)
   225ae:	e015      	b.n	225dc <am_hal_ble_patch_apply+0xcc>
   225b0:	6825      	ldr	r5, [r4, #0]
   225b2:	4a87      	ldr	r2, [pc, #540]	; (227d0 <am_hal_ble_patch_apply+0x2c0>)
   225b4:	ab02      	add	r3, sp, #8
   225b6:	9306      	str	r3, [sp, #24]
   225b8:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   225bc:	2300      	movs	r3, #0
   225be:	9308      	str	r3, [sp, #32]
   225c0:	2102      	movs	r1, #2
   225c2:	9307      	str	r3, [sp, #28]
   225c4:	9309      	str	r3, [sp, #36]	; 0x24
   225c6:	930a      	str	r3, [sp, #40]	; 0x28
   225c8:	930b      	str	r3, [sp, #44]	; 0x2c
   225ca:	4295      	cmp	r5, r2
   225cc:	f04f 0305 	mov.w	r3, #5
   225d0:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   225d4:	f8ad 3020 	strh.w	r3, [sp, #32]
   225d8:	d011      	beq.n	225fe <am_hal_ble_patch_apply+0xee>
   225da:	2302      	movs	r3, #2
   225dc:	4618      	mov	r0, r3
   225de:	b015      	add	sp, #84	; 0x54
   225e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225e4:	a90c      	add	r1, sp, #48	; 0x30
   225e6:	4620      	mov	r0, r4
   225e8:	f7ff fa20 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   225ec:	4603      	mov	r3, r0
   225ee:	2800      	cmp	r0, #0
   225f0:	d0cc      	beq.n	2258c <am_hal_ble_patch_apply+0x7c>
   225f2:	3f01      	subs	r7, #1
   225f4:	d0f2      	beq.n	225dc <am_hal_ble_patch_apply+0xcc>
   225f6:	6823      	ldr	r3, [r4, #0]
   225f8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   225fc:	e7af      	b.n	2255e <am_hal_ble_patch_apply+0x4e>
   225fe:	a906      	add	r1, sp, #24
   22600:	4620      	mov	r0, r4
   22602:	f7ff fa13 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22606:	4603      	mov	r3, r0
   22608:	2800      	cmp	r0, #0
   2260a:	d1e7      	bne.n	225dc <am_hal_ble_patch_apply+0xcc>
   2260c:	2304      	movs	r3, #4
   2260e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   22612:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   22616:	23f1      	movs	r3, #241	; 0xf1
   22618:	7832      	ldrb	r2, [r6, #0]
   2261a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   2261e:	2904      	cmp	r1, #4
   22620:	f04f 0301 	mov.w	r3, #1
   22624:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   22628:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   2262c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   22630:	f040 811a 	bne.w	22868 <am_hal_ble_patch_apply+0x358>
   22634:	f89d 1009 	ldrb.w	r1, [sp, #9]
   22638:	b2d3      	uxtb	r3, r2
   2263a:	4299      	cmp	r1, r3
   2263c:	f040 8114 	bne.w	22868 <am_hal_ble_patch_apply+0x358>
   22640:	f89d 300a 	ldrb.w	r3, [sp, #10]
   22644:	2bf1      	cmp	r3, #241	; 0xf1
   22646:	f040 810f 	bne.w	22868 <am_hal_ble_patch_apply+0x358>
   2264a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2264e:	2b01      	cmp	r3, #1
   22650:	f040 810a 	bne.w	22868 <am_hal_ble_patch_apply+0x358>
   22654:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22658:	2b00      	cmp	r3, #0
   2265a:	f040 8105 	bne.w	22868 <am_hal_ble_patch_apply+0x358>
   2265e:	f8d6 a004 	ldr.w	sl, [r6, #4]
   22662:	f1ba 0f00 	cmp.w	sl, #0
   22666:	f000 8091 	beq.w	2278c <am_hal_ble_patch_apply+0x27c>
   2266a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 227e4 <am_hal_ble_patch_apply+0x2d4>
   2266e:	4f59      	ldr	r7, [pc, #356]	; (227d4 <am_hal_ble_patch_apply+0x2c4>)
   22670:	9501      	str	r5, [sp, #4]
   22672:	469b      	mov	fp, r3
   22674:	2201      	movs	r2, #1
   22676:	f889 2000 	strb.w	r2, [r9]
   2267a:	6833      	ldr	r3, [r6, #0]
   2267c:	f889 3001 	strb.w	r3, [r9, #1]
   22680:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   22684:	46d0      	mov	r8, sl
   22686:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   2268a:	bf28      	it	cs
   2268c:	f04f 0880 	movcs.w	r8, #128	; 0x80
   22690:	f889 3002 	strb.w	r3, [r9, #2]
   22694:	f889 8003 	strb.w	r8, [r9, #3]
   22698:	68f1      	ldr	r1, [r6, #12]
   2269a:	4851      	ldr	r0, [pc, #324]	; (227e0 <am_hal_ble_patch_apply+0x2d0>)
   2269c:	f8cd 9018 	str.w	r9, [sp, #24]
   226a0:	2300      	movs	r3, #0
   226a2:	f02b 0503 	bic.w	r5, fp, #3
   226a6:	9308      	str	r3, [sp, #32]
   226a8:	4429      	add	r1, r5
   226aa:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   226ae:	f108 0504 	add.w	r5, r8, #4
   226b2:	4642      	mov	r2, r8
   226b4:	9307      	str	r3, [sp, #28]
   226b6:	9309      	str	r3, [sp, #36]	; 0x24
   226b8:	930a      	str	r3, [sp, #40]	; 0x28
   226ba:	930b      	str	r3, [sp, #44]	; 0x2c
   226bc:	f8ad 5020 	strh.w	r5, [sp, #32]
   226c0:	f7e9 fd4e 	bl	c160 <memcpy>
   226c4:	6823      	ldr	r3, [r4, #0]
   226c6:	9a01      	ldr	r2, [sp, #4]
   226c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   226cc:	4293      	cmp	r3, r2
   226ce:	d184      	bne.n	225da <am_hal_ble_patch_apply+0xca>
   226d0:	a906      	add	r1, sp, #24
   226d2:	4620      	mov	r0, r4
   226d4:	f7ff f9aa 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   226d8:	4603      	mov	r3, r0
   226da:	2800      	cmp	r0, #0
   226dc:	f47f af7e 	bne.w	225dc <am_hal_ble_patch_apply+0xcc>
   226e0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   226e4:	061d      	lsls	r5, r3, #24
   226e6:	d40b      	bmi.n	22700 <am_hal_ble_patch_apply+0x1f0>
   226e8:	4d3b      	ldr	r5, [pc, #236]	; (227d8 <am_hal_ble_patch_apply+0x2c8>)
   226ea:	e002      	b.n	226f2 <am_hal_ble_patch_apply+0x1e2>
   226ec:	3d01      	subs	r5, #1
   226ee:	f43f af5d 	beq.w	225ac <am_hal_ble_patch_apply+0x9c>
   226f2:	2010      	movs	r0, #16
   226f4:	f000 ffaa 	bl	2364c <am_hal_flash_delay>
   226f8:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   226fc:	0618      	lsls	r0, r3, #24
   226fe:	d5f5      	bpl.n	226ec <am_hal_ble_patch_apply+0x1dc>
   22700:	ab02      	add	r3, sp, #8
   22702:	9306      	str	r3, [sp, #24]
   22704:	2300      	movs	r3, #0
   22706:	9308      	str	r3, [sp, #32]
   22708:	6822      	ldr	r2, [r4, #0]
   2270a:	9307      	str	r3, [sp, #28]
   2270c:	9309      	str	r3, [sp, #36]	; 0x24
   2270e:	930a      	str	r3, [sp, #40]	; 0x28
   22710:	930b      	str	r3, [sp, #44]	; 0x2c
   22712:	2305      	movs	r3, #5
   22714:	f8ad 3020 	strh.w	r3, [sp, #32]
   22718:	9b01      	ldr	r3, [sp, #4]
   2271a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2271e:	2102      	movs	r1, #2
   22720:	429a      	cmp	r2, r3
   22722:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   22726:	f47f af58 	bne.w	225da <am_hal_ble_patch_apply+0xca>
   2272a:	a906      	add	r1, sp, #24
   2272c:	4620      	mov	r0, r4
   2272e:	f7ff f97d 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22732:	4603      	mov	r3, r0
   22734:	2800      	cmp	r0, #0
   22736:	f47f af51 	bne.w	225dc <am_hal_ble_patch_apply+0xcc>
   2273a:	2304      	movs	r3, #4
   2273c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   22740:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   22744:	23f2      	movs	r3, #242	; 0xf2
   22746:	7832      	ldrb	r2, [r6, #0]
   22748:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   2274c:	2904      	cmp	r1, #4
   2274e:	f04f 0301 	mov.w	r3, #1
   22752:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   22756:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   2275a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2275e:	f040 8083 	bne.w	22868 <am_hal_ble_patch_apply+0x358>
   22762:	f89d 3009 	ldrb.w	r3, [sp, #9]
   22766:	4293      	cmp	r3, r2
   22768:	d17e      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   2276a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2276e:	2bf2      	cmp	r3, #242	; 0xf2
   22770:	d17a      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   22772:	f89d 300b 	ldrb.w	r3, [sp, #11]
   22776:	2b01      	cmp	r3, #1
   22778:	d176      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   2277a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2277e:	2b00      	cmp	r3, #0
   22780:	d172      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   22782:	ebba 0a08 	subs.w	sl, sl, r8
   22786:	44c3      	add	fp, r8
   22788:	f47f af74 	bne.w	22674 <am_hal_ble_patch_apply+0x164>
   2278c:	68b3      	ldr	r3, [r6, #8]
   2278e:	f88d 2009 	strb.w	r2, [sp, #9]
   22792:	2101      	movs	r1, #1
   22794:	0a1a      	lsrs	r2, r3, #8
   22796:	20f3      	movs	r0, #243	; 0xf3
   22798:	f88d 300c 	strb.w	r3, [sp, #12]
   2279c:	f88d 200d 	strb.w	r2, [sp, #13]
   227a0:	2306      	movs	r3, #6
   227a2:	f88d 1008 	strb.w	r1, [sp, #8]
   227a6:	f88d 000a 	strb.w	r0, [sp, #10]
   227aa:	2502      	movs	r5, #2
   227ac:	aa02      	add	r2, sp, #8
   227ae:	2100      	movs	r1, #0
   227b0:	4620      	mov	r0, r4
   227b2:	f88d 500b 	strb.w	r5, [sp, #11]
   227b6:	f7ff fe07 	bl	223c8 <am_hal_ble_blocking_hci_write>
   227ba:	4603      	mov	r3, r0
   227bc:	2800      	cmp	r0, #0
   227be:	d153      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   227c0:	4f04      	ldr	r7, [pc, #16]	; (227d4 <am_hal_ble_patch_apply+0x2c4>)
   227c2:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   227c6:	0611      	lsls	r1, r2, #24
   227c8:	d41b      	bmi.n	22802 <am_hal_ble_patch_apply+0x2f2>
   227ca:	4d03      	ldr	r5, [pc, #12]	; (227d8 <am_hal_ble_patch_apply+0x2c8>)
   227cc:	e00f      	b.n	227ee <am_hal_ble_patch_apply+0x2de>
   227ce:	bf00      	nop
   227d0:	01775230 	.word	0x01775230
   227d4:	5000c000 	.word	0x5000c000
   227d8:	000f4240 	.word	0x000f4240
   227dc:	08000004 	.word	0x08000004
   227e0:	1000a114 	.word	0x1000a114
   227e4:	1000a110 	.word	0x1000a110
   227e8:	3d01      	subs	r5, #1
   227ea:	f43f aedf 	beq.w	225ac <am_hal_ble_patch_apply+0x9c>
   227ee:	2010      	movs	r0, #16
   227f0:	9301      	str	r3, [sp, #4]
   227f2:	f000 ff2b 	bl	2364c <am_hal_flash_delay>
   227f6:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   227fa:	9b01      	ldr	r3, [sp, #4]
   227fc:	f012 0f80 	tst.w	r2, #128	; 0x80
   22800:	d0f2      	beq.n	227e8 <am_hal_ble_patch_apply+0x2d8>
   22802:	2200      	movs	r2, #0
   22804:	9301      	str	r3, [sp, #4]
   22806:	4620      	mov	r0, r4
   22808:	ab02      	add	r3, sp, #8
   2280a:	a906      	add	r1, sp, #24
   2280c:	2502      	movs	r5, #2
   2280e:	2405      	movs	r4, #5
   22810:	9208      	str	r2, [sp, #32]
   22812:	9306      	str	r3, [sp, #24]
   22814:	9207      	str	r2, [sp, #28]
   22816:	9209      	str	r2, [sp, #36]	; 0x24
   22818:	920a      	str	r2, [sp, #40]	; 0x28
   2281a:	920b      	str	r2, [sp, #44]	; 0x2c
   2281c:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   22820:	f8ad 4020 	strh.w	r4, [sp, #32]
   22824:	f7ff fe5e 	bl	224e4 <am_hal_ble_blocking_transfer>
   22828:	9b01      	ldr	r3, [sp, #4]
   2282a:	b9f8      	cbnz	r0, 2286c <am_hal_ble_patch_apply+0x35c>
   2282c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   22830:	6831      	ldr	r1, [r6, #0]
   22832:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   22836:	2a04      	cmp	r2, #4
   22838:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   2283c:	f04f 0101 	mov.w	r1, #1
   22840:	d112      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   22842:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   22846:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2284a:	4294      	cmp	r4, r2
   2284c:	d10c      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   2284e:	f89d 200a 	ldrb.w	r2, [sp, #10]
   22852:	4290      	cmp	r0, r2
   22854:	d108      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   22856:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2285a:	4291      	cmp	r1, r2
   2285c:	d104      	bne.n	22868 <am_hal_ble_patch_apply+0x358>
   2285e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   22862:	2a00      	cmp	r2, #0
   22864:	f43f aeba 	beq.w	225dc <am_hal_ble_patch_apply+0xcc>
   22868:	2301      	movs	r3, #1
   2286a:	e6b7      	b.n	225dc <am_hal_ble_patch_apply+0xcc>
   2286c:	4603      	mov	r3, r0
   2286e:	e6b5      	b.n	225dc <am_hal_ble_patch_apply+0xcc>

00022870 <am_hal_ble_int_enable>:
   22870:	b128      	cbz	r0, 2287e <am_hal_ble_int_enable+0xe>
   22872:	6803      	ldr	r3, [r0, #0]
   22874:	4a0c      	ldr	r2, [pc, #48]	; (228a8 <am_hal_ble_int_enable+0x38>)
   22876:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2287a:	4293      	cmp	r3, r2
   2287c:	d001      	beq.n	22882 <am_hal_ble_int_enable+0x12>
   2287e:	2002      	movs	r0, #2
   22880:	4770      	bx	lr
   22882:	b510      	push	{r4, lr}
   22884:	b082      	sub	sp, #8
   22886:	460c      	mov	r4, r1
   22888:	f001 f8e6 	bl	23a58 <am_hal_interrupt_master_disable>
   2288c:	4b07      	ldr	r3, [pc, #28]	; (228ac <am_hal_ble_int_enable+0x3c>)
   2288e:	9001      	str	r0, [sp, #4]
   22890:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   22894:	4321      	orrs	r1, r4
   22896:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   2289a:	9801      	ldr	r0, [sp, #4]
   2289c:	f001 f8e0 	bl	23a60 <am_hal_interrupt_master_set>
   228a0:	2000      	movs	r0, #0
   228a2:	b002      	add	sp, #8
   228a4:	bd10      	pop	{r4, pc}
   228a6:	bf00      	nop
   228a8:	01775230 	.word	0x01775230
   228ac:	5000c000 	.word	0x5000c000

000228b0 <am_hal_ble_int_status>:
   228b0:	4b05      	ldr	r3, [pc, #20]	; (228c8 <am_hal_ble_int_status+0x18>)
   228b2:	b911      	cbnz	r1, 228ba <am_hal_ble_int_status+0xa>
   228b4:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   228b8:	4770      	bx	lr
   228ba:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   228be:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   228c2:	4018      	ands	r0, r3
   228c4:	4770      	bx	lr
   228c6:	bf00      	nop
   228c8:	5000c000 	.word	0x5000c000

000228cc <am_hal_ble_int_clear>:
   228cc:	b128      	cbz	r0, 228da <am_hal_ble_int_clear+0xe>
   228ce:	6803      	ldr	r3, [r0, #0]
   228d0:	4a05      	ldr	r2, [pc, #20]	; (228e8 <am_hal_ble_int_clear+0x1c>)
   228d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   228d6:	4293      	cmp	r3, r2
   228d8:	d001      	beq.n	228de <am_hal_ble_int_clear+0x12>
   228da:	2002      	movs	r0, #2
   228dc:	4770      	bx	lr
   228de:	4b03      	ldr	r3, [pc, #12]	; (228ec <am_hal_ble_int_clear+0x20>)
   228e0:	2000      	movs	r0, #0
   228e2:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   228e6:	4770      	bx	lr
   228e8:	01775230 	.word	0x01775230
   228ec:	5000c000 	.word	0x5000c000

000228f0 <am_hal_ble_plf_reg_read>:
   228f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   228f4:	b092      	sub	sp, #72	; 0x48
   228f6:	0a0e      	lsrs	r6, r1, #8
   228f8:	0c0d      	lsrs	r5, r1, #16
   228fa:	2300      	movs	r3, #0
   228fc:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   22900:	f88d 100c 	strb.w	r1, [sp, #12]
   22904:	f88d 600d 	strb.w	r6, [sp, #13]
   22908:	f88d 500e 	strb.w	r5, [sp, #14]
   2290c:	2401      	movs	r4, #1
   2290e:	2702      	movs	r7, #2
   22910:	26fd      	movs	r6, #253	; 0xfd
   22912:	2504      	movs	r5, #4
   22914:	4952      	ldr	r1, [pc, #328]	; (22a60 <am_hal_ble_plf_reg_read+0x170>)
   22916:	f88d e00f 	strb.w	lr, [sp, #15]
   2291a:	f88d 7009 	strb.w	r7, [sp, #9]
   2291e:	f88d 500b 	strb.w	r5, [sp, #11]
   22922:	930a      	str	r3, [sp, #40]	; 0x28
   22924:	930b      	str	r3, [sp, #44]	; 0x2c
   22926:	930c      	str	r3, [sp, #48]	; 0x30
   22928:	f88d 4008 	strb.w	r4, [sp, #8]
   2292c:	f88d 600a 	strb.w	r6, [sp, #10]
   22930:	f10d 0e08 	add.w	lr, sp, #8
   22934:	2508      	movs	r5, #8
   22936:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   2293a:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   2293e:	4617      	mov	r7, r2
   22940:	f88d 3014 	strb.w	r3, [sp, #20]
   22944:	f88d 3015 	strb.w	r3, [sp, #21]
   22948:	f88d 3016 	strb.w	r3, [sp, #22]
   2294c:	f88d 3017 	strb.w	r3, [sp, #23]
   22950:	f88d 401a 	strb.w	r4, [sp, #26]
   22954:	f88d 301b 	strb.w	r3, [sp, #27]
   22958:	f88d 301c 	strb.w	r3, [sp, #28]
   2295c:	9308      	str	r3, [sp, #32]
   2295e:	9309      	str	r3, [sp, #36]	; 0x24
   22960:	f8cd e010 	str.w	lr, [sp, #16]
   22964:	f8ad 5018 	strh.w	r5, [sp, #24]
   22968:	4680      	mov	r8, r0
   2296a:	b128      	cbz	r0, 22978 <am_hal_ble_plf_reg_read+0x88>
   2296c:	6803      	ldr	r3, [r0, #0]
   2296e:	4a3d      	ldr	r2, [pc, #244]	; (22a64 <am_hal_ble_plf_reg_read+0x174>)
   22970:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22974:	4293      	cmp	r3, r2
   22976:	d06e      	beq.n	22a56 <am_hal_ble_plf_reg_read+0x166>
   22978:	4d39      	ldr	r5, [pc, #228]	; (22a60 <am_hal_ble_plf_reg_read+0x170>)
   2297a:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2297e:	f043 0302 	orr.w	r3, r3, #2
   22982:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   22986:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2298a:	0619      	lsls	r1, r3, #24
   2298c:	d40a      	bmi.n	229a4 <am_hal_ble_plf_reg_read+0xb4>
   2298e:	4c36      	ldr	r4, [pc, #216]	; (22a68 <am_hal_ble_plf_reg_read+0x178>)
   22990:	e001      	b.n	22996 <am_hal_ble_plf_reg_read+0xa6>
   22992:	3c01      	subs	r4, #1
   22994:	d05b      	beq.n	22a4e <am_hal_ble_plf_reg_read+0x15e>
   22996:	2010      	movs	r0, #16
   22998:	f000 fe58 	bl	2364c <am_hal_flash_delay>
   2299c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   229a0:	061a      	lsls	r2, r3, #24
   229a2:	d5f6      	bpl.n	22992 <am_hal_ble_plf_reg_read+0xa2>
   229a4:	2300      	movs	r3, #0
   229a6:	2202      	movs	r2, #2
   229a8:	a901      	add	r1, sp, #4
   229aa:	9104      	str	r1, [sp, #16]
   229ac:	f88d 3014 	strb.w	r3, [sp, #20]
   229b0:	f88d 3015 	strb.w	r3, [sp, #21]
   229b4:	f88d 3016 	strb.w	r3, [sp, #22]
   229b8:	f88d 3017 	strb.w	r3, [sp, #23]
   229bc:	f88d 301b 	strb.w	r3, [sp, #27]
   229c0:	f88d 301c 	strb.w	r3, [sp, #28]
   229c4:	9308      	str	r3, [sp, #32]
   229c6:	9309      	str	r3, [sp, #36]	; 0x24
   229c8:	f8ad 2018 	strh.w	r2, [sp, #24]
   229cc:	f88d 201a 	strb.w	r2, [sp, #26]
   229d0:	f1b8 0f00 	cmp.w	r8, #0
   229d4:	d006      	beq.n	229e4 <am_hal_ble_plf_reg_read+0xf4>
   229d6:	f8d8 4000 	ldr.w	r4, [r8]
   229da:	4b22      	ldr	r3, [pc, #136]	; (22a64 <am_hal_ble_plf_reg_read+0x174>)
   229dc:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   229e0:	429c      	cmp	r4, r3
   229e2:	d00e      	beq.n	22a02 <am_hal_ble_plf_reg_read+0x112>
   229e4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   229e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   229ea:	4a1d      	ldr	r2, [pc, #116]	; (22a60 <am_hal_ble_plf_reg_read+0x170>)
   229ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   229f0:	2000      	movs	r0, #0
   229f2:	603b      	str	r3, [r7, #0]
   229f4:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   229f8:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   229fc:	b012      	add	sp, #72	; 0x48
   229fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22a02:	4b17      	ldr	r3, [pc, #92]	; (22a60 <am_hal_ble_plf_reg_read+0x170>)
   22a04:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22a08:	061b      	lsls	r3, r3, #24
   22a0a:	d5eb      	bpl.n	229e4 <am_hal_ble_plf_reg_read+0xf4>
   22a0c:	a904      	add	r1, sp, #16
   22a0e:	4640      	mov	r0, r8
   22a10:	f7ff f80c 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22a14:	2800      	cmp	r0, #0
   22a16:	d1e5      	bne.n	229e4 <am_hal_ble_plf_reg_read+0xf4>
   22a18:	f89d 2005 	ldrb.w	r2, [sp, #5]
   22a1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   22a20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   22a24:	b29b      	uxth	r3, r3
   22a26:	aa0a      	add	r2, sp, #40	; 0x28
   22a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   22a2c:	f8ad 3018 	strh.w	r3, [sp, #24]
   22a30:	9204      	str	r2, [sp, #16]
   22a32:	d8d7      	bhi.n	229e4 <am_hal_ble_plf_reg_read+0xf4>
   22a34:	f8d8 2000 	ldr.w	r2, [r8]
   22a38:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   22a3c:	42a2      	cmp	r2, r4
   22a3e:	d1d1      	bne.n	229e4 <am_hal_ble_plf_reg_read+0xf4>
   22a40:	2b00      	cmp	r3, #0
   22a42:	d0cf      	beq.n	229e4 <am_hal_ble_plf_reg_read+0xf4>
   22a44:	a904      	add	r1, sp, #16
   22a46:	4640      	mov	r0, r8
   22a48:	f7fe fff0 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22a4c:	e7ca      	b.n	229e4 <am_hal_ble_plf_reg_read+0xf4>
   22a4e:	4807      	ldr	r0, [pc, #28]	; (22a6c <am_hal_ble_plf_reg_read+0x17c>)
   22a50:	b012      	add	sp, #72	; 0x48
   22a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22a56:	a904      	add	r1, sp, #16
   22a58:	f7fe ffe8 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22a5c:	e78c      	b.n	22978 <am_hal_ble_plf_reg_read+0x88>
   22a5e:	bf00      	nop
   22a60:	5000c000 	.word	0x5000c000
   22a64:	01775230 	.word	0x01775230
   22a68:	0007a120 	.word	0x0007a120
   22a6c:	08000004 	.word	0x08000004

00022a70 <am_hal_ble_plf_reg_write>:
   22a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a72:	b091      	sub	sp, #68	; 0x44
   22a74:	0c0f      	lsrs	r7, r1, #16
   22a76:	0e0e      	lsrs	r6, r1, #24
   22a78:	0c14      	lsrs	r4, r2, #16
   22a7a:	0e13      	lsrs	r3, r2, #24
   22a7c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   22a80:	0a15      	lsrs	r5, r2, #8
   22a82:	f88d 2008 	strb.w	r2, [sp, #8]
   22a86:	f88d 6007 	strb.w	r6, [sp, #7]
   22a8a:	f88d 400a 	strb.w	r4, [sp, #10]
   22a8e:	f88d 300b 	strb.w	r3, [sp, #11]
   22a92:	f88d 1004 	strb.w	r1, [sp, #4]
   22a96:	f88d e005 	strb.w	lr, [sp, #5]
   22a9a:	f88d 7006 	strb.w	r7, [sp, #6]
   22a9e:	f88d 5009 	strb.w	r5, [sp, #9]
   22aa2:	ab01      	add	r3, sp, #4
   22aa4:	4606      	mov	r6, r0
   22aa6:	e893 0003 	ldmia.w	r3, {r0, r1}
   22aaa:	ab04      	add	r3, sp, #16
   22aac:	e883 0003 	stmia.w	r3, {r0, r1}
   22ab0:	4a47      	ldr	r2, [pc, #284]	; (22bd0 <am_hal_ble_plf_reg_write+0x160>)
   22ab2:	4b48      	ldr	r3, [pc, #288]	; (22bd4 <am_hal_ble_plf_reg_write+0x164>)
   22ab4:	9303      	str	r3, [sp, #12]
   22ab6:	ac03      	add	r4, sp, #12
   22ab8:	2300      	movs	r3, #0
   22aba:	200c      	movs	r0, #12
   22abc:	2101      	movs	r1, #1
   22abe:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   22ac2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   22ac6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   22aca:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   22ace:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   22ad2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   22ad6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   22ada:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   22ade:	930e      	str	r3, [sp, #56]	; 0x38
   22ae0:	930f      	str	r3, [sp, #60]	; 0x3c
   22ae2:	940a      	str	r4, [sp, #40]	; 0x28
   22ae4:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   22ae8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   22aec:	b12e      	cbz	r6, 22afa <am_hal_ble_plf_reg_write+0x8a>
   22aee:	6833      	ldr	r3, [r6, #0]
   22af0:	4a39      	ldr	r2, [pc, #228]	; (22bd8 <am_hal_ble_plf_reg_write+0x168>)
   22af2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22af6:	4293      	cmp	r3, r2
   22af8:	d064      	beq.n	22bc4 <am_hal_ble_plf_reg_write+0x154>
   22afa:	4d35      	ldr	r5, [pc, #212]	; (22bd0 <am_hal_ble_plf_reg_write+0x160>)
   22afc:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   22b00:	f043 0302 	orr.w	r3, r3, #2
   22b04:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   22b08:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22b0c:	0619      	lsls	r1, r3, #24
   22b0e:	bf58      	it	pl
   22b10:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   22b14:	d502      	bpl.n	22b1c <am_hal_ble_plf_reg_write+0xac>
   22b16:	e008      	b.n	22b2a <am_hal_ble_plf_reg_write+0xba>
   22b18:	3c01      	subs	r4, #1
   22b1a:	d050      	beq.n	22bbe <am_hal_ble_plf_reg_write+0x14e>
   22b1c:	2010      	movs	r0, #16
   22b1e:	f000 fd95 	bl	2364c <am_hal_flash_delay>
   22b22:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22b26:	061a      	lsls	r2, r3, #24
   22b28:	d5f6      	bpl.n	22b18 <am_hal_ble_plf_reg_write+0xa8>
   22b2a:	2300      	movs	r3, #0
   22b2c:	2202      	movs	r2, #2
   22b2e:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   22b32:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   22b36:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   22b3a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   22b3e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   22b42:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   22b46:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   22b4a:	930e      	str	r3, [sp, #56]	; 0x38
   22b4c:	930f      	str	r3, [sp, #60]	; 0x3c
   22b4e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   22b52:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   22b56:	b12e      	cbz	r6, 22b64 <am_hal_ble_plf_reg_write+0xf4>
   22b58:	6834      	ldr	r4, [r6, #0]
   22b5a:	4b1f      	ldr	r3, [pc, #124]	; (22bd8 <am_hal_ble_plf_reg_write+0x168>)
   22b5c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   22b60:	429c      	cmp	r4, r3
   22b62:	d007      	beq.n	22b74 <am_hal_ble_plf_reg_write+0x104>
   22b64:	4b1a      	ldr	r3, [pc, #104]	; (22bd0 <am_hal_ble_plf_reg_write+0x160>)
   22b66:	2000      	movs	r0, #0
   22b68:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   22b6c:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   22b70:	b011      	add	sp, #68	; 0x44
   22b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22b74:	4b16      	ldr	r3, [pc, #88]	; (22bd0 <am_hal_ble_plf_reg_write+0x160>)
   22b76:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22b7a:	061b      	lsls	r3, r3, #24
   22b7c:	d5f2      	bpl.n	22b64 <am_hal_ble_plf_reg_write+0xf4>
   22b7e:	a90a      	add	r1, sp, #40	; 0x28
   22b80:	4630      	mov	r0, r6
   22b82:	f7fe ff53 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22b86:	2800      	cmp	r0, #0
   22b88:	d1ec      	bne.n	22b64 <am_hal_ble_plf_reg_write+0xf4>
   22b8a:	f89d 2001 	ldrb.w	r2, [sp, #1]
   22b8e:	f89d 3000 	ldrb.w	r3, [sp]
   22b92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   22b96:	b29b      	uxth	r3, r3
   22b98:	aa06      	add	r2, sp, #24
   22b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   22b9e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   22ba2:	920a      	str	r2, [sp, #40]	; 0x28
   22ba4:	d8de      	bhi.n	22b64 <am_hal_ble_plf_reg_write+0xf4>
   22ba6:	6832      	ldr	r2, [r6, #0]
   22ba8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   22bac:	42a2      	cmp	r2, r4
   22bae:	d1d9      	bne.n	22b64 <am_hal_ble_plf_reg_write+0xf4>
   22bb0:	2b00      	cmp	r3, #0
   22bb2:	d0d7      	beq.n	22b64 <am_hal_ble_plf_reg_write+0xf4>
   22bb4:	a90a      	add	r1, sp, #40	; 0x28
   22bb6:	4630      	mov	r0, r6
   22bb8:	f7fe ff38 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22bbc:	e7d2      	b.n	22b64 <am_hal_ble_plf_reg_write+0xf4>
   22bbe:	4807      	ldr	r0, [pc, #28]	; (22bdc <am_hal_ble_plf_reg_write+0x16c>)
   22bc0:	b011      	add	sp, #68	; 0x44
   22bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22bc4:	a90a      	add	r1, sp, #40	; 0x28
   22bc6:	4630      	mov	r0, r6
   22bc8:	f7fe ff30 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22bcc:	e795      	b.n	22afa <am_hal_ble_plf_reg_write+0x8a>
   22bce:	bf00      	nop
   22bd0:	5000c000 	.word	0x5000c000
   22bd4:	08fd0301 	.word	0x08fd0301
   22bd8:	01775230 	.word	0x01775230
   22bdc:	08000004 	.word	0x08000004

00022be0 <am_hal_ble_transmitter_modex_set>:
   22be0:	b530      	push	{r4, r5, lr}
   22be2:	b085      	sub	sp, #20
   22be4:	4604      	mov	r4, r0
   22be6:	2300      	movs	r3, #0
   22be8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   22bec:	466a      	mov	r2, sp
   22bee:	4927      	ldr	r1, [pc, #156]	; (22c8c <am_hal_ble_transmitter_modex_set+0xac>)
   22bf0:	9303      	str	r3, [sp, #12]
   22bf2:	f7ff fe7d 	bl	228f0 <am_hal_ble_plf_reg_read>
   22bf6:	4620      	mov	r0, r4
   22bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22bfc:	4923      	ldr	r1, [pc, #140]	; (22c8c <am_hal_ble_transmitter_modex_set+0xac>)
   22bfe:	f7ff ff37 	bl	22a70 <am_hal_ble_plf_reg_write>
   22c02:	aa03      	add	r2, sp, #12
   22c04:	4620      	mov	r0, r4
   22c06:	4922      	ldr	r1, [pc, #136]	; (22c90 <am_hal_ble_transmitter_modex_set+0xb0>)
   22c08:	f7ff fe72 	bl	228f0 <am_hal_ble_plf_reg_read>
   22c0c:	9b03      	ldr	r3, [sp, #12]
   22c0e:	aa02      	add	r2, sp, #8
   22c10:	f043 0308 	orr.w	r3, r3, #8
   22c14:	4620      	mov	r0, r4
   22c16:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   22c1a:	9303      	str	r3, [sp, #12]
   22c1c:	f7ff fe68 	bl	228f0 <am_hal_ble_plf_reg_read>
   22c20:	9b02      	ldr	r3, [sp, #8]
   22c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22c26:	461a      	mov	r2, r3
   22c28:	4620      	mov	r0, r4
   22c2a:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   22c2e:	9302      	str	r3, [sp, #8]
   22c30:	f7ff ff1e 	bl	22a70 <am_hal_ble_plf_reg_write>
   22c34:	aa01      	add	r2, sp, #4
   22c36:	4620      	mov	r0, r4
   22c38:	4916      	ldr	r1, [pc, #88]	; (22c94 <am_hal_ble_transmitter_modex_set+0xb4>)
   22c3a:	f7ff fe59 	bl	228f0 <am_hal_ble_plf_reg_read>
   22c3e:	9a01      	ldr	r2, [sp, #4]
   22c40:	4914      	ldr	r1, [pc, #80]	; (22c94 <am_hal_ble_transmitter_modex_set+0xb4>)
   22c42:	4620      	mov	r0, r4
   22c44:	f042 0208 	orr.w	r2, r2, #8
   22c48:	f7ff ff12 	bl	22a70 <am_hal_ble_plf_reg_write>
   22c4c:	006a      	lsls	r2, r5, #1
   22c4e:	f042 0201 	orr.w	r2, r2, #1
   22c52:	4620      	mov	r0, r4
   22c54:	4910      	ldr	r1, [pc, #64]	; (22c98 <am_hal_ble_transmitter_modex_set+0xb8>)
   22c56:	f7ff ff0b 	bl	22a70 <am_hal_ble_plf_reg_write>
   22c5a:	490d      	ldr	r1, [pc, #52]	; (22c90 <am_hal_ble_transmitter_modex_set+0xb0>)
   22c5c:	9a03      	ldr	r2, [sp, #12]
   22c5e:	4620      	mov	r0, r4
   22c60:	f7ff ff06 	bl	22a70 <am_hal_ble_plf_reg_write>
   22c64:	4b0d      	ldr	r3, [pc, #52]	; (22c9c <am_hal_ble_transmitter_modex_set+0xbc>)
   22c66:	68db      	ldr	r3, [r3, #12]
   22c68:	b2db      	uxtb	r3, r3
   22c6a:	2b21      	cmp	r3, #33	; 0x21
   22c6c:	bf0c      	ite	eq
   22c6e:	490c      	ldreq	r1, [pc, #48]	; (22ca0 <am_hal_ble_transmitter_modex_set+0xc0>)
   22c70:	490c      	ldrne	r1, [pc, #48]	; (22ca4 <am_hal_ble_transmitter_modex_set+0xc4>)
   22c72:	462a      	mov	r2, r5
   22c74:	4620      	mov	r0, r4
   22c76:	f7ff fefb 	bl	22a70 <am_hal_ble_plf_reg_write>
   22c7a:	4620      	mov	r0, r4
   22c7c:	9a00      	ldr	r2, [sp, #0]
   22c7e:	4903      	ldr	r1, [pc, #12]	; (22c8c <am_hal_ble_transmitter_modex_set+0xac>)
   22c80:	f7ff fef6 	bl	22a70 <am_hal_ble_plf_reg_write>
   22c84:	2000      	movs	r0, #0
   22c86:	b005      	add	sp, #20
   22c88:	bd30      	pop	{r4, r5, pc}
   22c8a:	bf00      	nop
   22c8c:	43000004 	.word	0x43000004
   22c90:	52000008 	.word	0x52000008
   22c94:	45800070 	.word	0x45800070
   22c98:	52000014 	.word	0x52000014
   22c9c:	40020000 	.word	0x40020000
   22ca0:	20006874 	.word	0x20006874
   22ca4:	20006070 	.word	0x20006070

00022ca8 <am_hal_ble_patch_complete.part.10>:
   22ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cac:	b08c      	sub	sp, #48	; 0x30
   22cae:	2300      	movs	r3, #0
   22cb0:	9308      	str	r3, [sp, #32]
   22cb2:	2201      	movs	r2, #1
   22cb4:	2506      	movs	r5, #6
   22cb6:	24ee      	movs	r4, #238	; 0xee
   22cb8:	21f1      	movs	r1, #241	; 0xf1
   22cba:	9307      	str	r3, [sp, #28]
   22cbc:	9309      	str	r3, [sp, #36]	; 0x24
   22cbe:	930a      	str	r3, [sp, #40]	; 0x28
   22cc0:	930b      	str	r3, [sp, #44]	; 0x2c
   22cc2:	f88d 3004 	strb.w	r3, [sp, #4]
   22cc6:	f88d 3005 	strb.w	r3, [sp, #5]
   22cca:	2302      	movs	r3, #2
   22ccc:	f8ad 5020 	strh.w	r5, [sp, #32]
   22cd0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   22cd4:	f88d 2000 	strb.w	r2, [sp]
   22cd8:	f8cd d018 	str.w	sp, [sp, #24]
   22cdc:	f88d 4001 	strb.w	r4, [sp, #1]
   22ce0:	f88d 1002 	strb.w	r1, [sp, #2]
   22ce4:	f88d 3003 	strb.w	r3, [sp, #3]
   22ce8:	4605      	mov	r5, r0
   22cea:	2800      	cmp	r0, #0
   22cec:	f000 80e4 	beq.w	22eb8 <am_hal_ble_patch_complete.part.10+0x210>
   22cf0:	4e7d      	ldr	r6, [pc, #500]	; (22ee8 <am_hal_ble_patch_complete.part.10+0x240>)
   22cf2:	f241 3488 	movw	r4, #5000	; 0x1388
   22cf6:	e001      	b.n	22cfc <am_hal_ble_patch_complete.part.10+0x54>
   22cf8:	3c01      	subs	r4, #1
   22cfa:	d00d      	beq.n	22d18 <am_hal_ble_patch_complete.part.10+0x70>
   22cfc:	682b      	ldr	r3, [r5, #0]
   22cfe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22d02:	42b3      	cmp	r3, r6
   22d04:	d1f8      	bne.n	22cf8 <am_hal_ble_patch_complete.part.10+0x50>
   22d06:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   22d0a:	a906      	add	r1, sp, #24
   22d0c:	4628      	mov	r0, r5
   22d0e:	b11b      	cbz	r3, 22d18 <am_hal_ble_patch_complete.part.10+0x70>
   22d10:	f7fe fe8c 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22d14:	2800      	cmp	r0, #0
   22d16:	d1ef      	bne.n	22cf8 <am_hal_ble_patch_complete.part.10+0x50>
   22d18:	4b74      	ldr	r3, [pc, #464]	; (22eec <am_hal_ble_patch_complete.part.10+0x244>)
   22d1a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22d1e:	061b      	lsls	r3, r3, #24
   22d20:	f100 80d1 	bmi.w	22ec6 <am_hal_ble_patch_complete.part.10+0x21e>
   22d24:	4c72      	ldr	r4, [pc, #456]	; (22ef0 <am_hal_ble_patch_complete.part.10+0x248>)
   22d26:	4e71      	ldr	r6, [pc, #452]	; (22eec <am_hal_ble_patch_complete.part.10+0x244>)
   22d28:	e001      	b.n	22d2e <am_hal_ble_patch_complete.part.10+0x86>
   22d2a:	3c01      	subs	r4, #1
   22d2c:	d019      	beq.n	22d62 <am_hal_ble_patch_complete.part.10+0xba>
   22d2e:	2010      	movs	r0, #16
   22d30:	f000 fc8c 	bl	2364c <am_hal_flash_delay>
   22d34:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22d38:	061f      	lsls	r7, r3, #24
   22d3a:	d5f6      	bpl.n	22d2a <am_hal_ble_patch_complete.part.10+0x82>
   22d3c:	2302      	movs	r3, #2
   22d3e:	af03      	add	r7, sp, #12
   22d40:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22d44:	f8ad 3020 	strh.w	r3, [sp, #32]
   22d48:	9706      	str	r7, [sp, #24]
   22d4a:	b12d      	cbz	r5, 22d58 <am_hal_ble_patch_complete.part.10+0xb0>
   22d4c:	682e      	ldr	r6, [r5, #0]
   22d4e:	4b66      	ldr	r3, [pc, #408]	; (22ee8 <am_hal_ble_patch_complete.part.10+0x240>)
   22d50:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   22d54:	429e      	cmp	r6, r3
   22d56:	d009      	beq.n	22d6c <am_hal_ble_patch_complete.part.10+0xc4>
   22d58:	2402      	movs	r4, #2
   22d5a:	4620      	mov	r0, r4
   22d5c:	b00c      	add	sp, #48	; 0x30
   22d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22d62:	4c64      	ldr	r4, [pc, #400]	; (22ef4 <am_hal_ble_patch_complete.part.10+0x24c>)
   22d64:	4620      	mov	r0, r4
   22d66:	b00c      	add	sp, #48	; 0x30
   22d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22d6c:	a906      	add	r1, sp, #24
   22d6e:	4628      	mov	r0, r5
   22d70:	f7fe fe5c 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22d74:	4604      	mov	r4, r0
   22d76:	2800      	cmp	r0, #0
   22d78:	d1ef      	bne.n	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22d7a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   22d7e:	29ee      	cmp	r1, #238	; 0xee
   22d80:	d01a      	beq.n	22db8 <am_hal_ble_patch_complete.part.10+0x110>
   22d82:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22d86:	682a      	ldr	r2, [r5, #0]
   22d88:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   22d8c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   22d90:	b29b      	uxth	r3, r3
   22d92:	42b2      	cmp	r2, r6
   22d94:	f8ad 3020 	strh.w	r3, [sp, #32]
   22d98:	d1de      	bne.n	22d58 <am_hal_ble_patch_complete.part.10+0xb0>
   22d9a:	b133      	cbz	r3, 22daa <am_hal_ble_patch_complete.part.10+0x102>
   22d9c:	a906      	add	r1, sp, #24
   22d9e:	4628      	mov	r0, r5
   22da0:	f7fe fe44 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22da4:	b108      	cbz	r0, 22daa <am_hal_ble_patch_complete.part.10+0x102>
   22da6:	4604      	mov	r4, r0
   22da8:	e7d7      	b.n	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22daa:	2301      	movs	r3, #1
   22dac:	4620      	mov	r0, r4
   22dae:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   22db2:	b00c      	add	sp, #48	; 0x30
   22db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22db8:	682b      	ldr	r3, [r5, #0]
   22dba:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   22dbe:	2203      	movs	r2, #3
   22dc0:	45b0      	cmp	r8, r6
   22dc2:	f8ad 2020 	strh.w	r2, [sp, #32]
   22dc6:	d1c7      	bne.n	22d58 <am_hal_ble_patch_complete.part.10+0xb0>
   22dc8:	a906      	add	r1, sp, #24
   22dca:	4628      	mov	r0, r5
   22dcc:	f7fe fe2e 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22dd0:	4604      	mov	r4, r0
   22dd2:	2800      	cmp	r0, #0
   22dd4:	d1c1      	bne.n	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22dd6:	2301      	movs	r3, #1
   22dd8:	2005      	movs	r0, #5
   22dda:	2104      	movs	r1, #4
   22ddc:	22fd      	movs	r2, #253	; 0xfd
   22dde:	9408      	str	r4, [sp, #32]
   22de0:	9407      	str	r4, [sp, #28]
   22de2:	9409      	str	r4, [sp, #36]	; 0x24
   22de4:	940a      	str	r4, [sp, #40]	; 0x28
   22de6:	940b      	str	r4, [sp, #44]	; 0x2c
   22de8:	f8cd d018 	str.w	sp, [sp, #24]
   22dec:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22df0:	f88d 3000 	strb.w	r3, [sp]
   22df4:	f88d 3003 	strb.w	r3, [sp, #3]
   22df8:	f88d 3004 	strb.w	r3, [sp, #4]
   22dfc:	f8ad 0020 	strh.w	r0, [sp, #32]
   22e00:	f88d 1001 	strb.w	r1, [sp, #1]
   22e04:	f88d 2002 	strb.w	r2, [sp, #2]
   22e08:	f241 3688 	movw	r6, #5000	; 0x1388
   22e0c:	e002      	b.n	22e14 <am_hal_ble_patch_complete.part.10+0x16c>
   22e0e:	2402      	movs	r4, #2
   22e10:	3e01      	subs	r6, #1
   22e12:	d0a2      	beq.n	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22e14:	682b      	ldr	r3, [r5, #0]
   22e16:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22e1a:	4543      	cmp	r3, r8
   22e1c:	d1f7      	bne.n	22e0e <am_hal_ble_patch_complete.part.10+0x166>
   22e1e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   22e22:	a906      	add	r1, sp, #24
   22e24:	4628      	mov	r0, r5
   22e26:	b123      	cbz	r3, 22e32 <am_hal_ble_patch_complete.part.10+0x18a>
   22e28:	f7fe fe00 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22e2c:	4604      	mov	r4, r0
   22e2e:	2800      	cmp	r0, #0
   22e30:	d1ee      	bne.n	22e10 <am_hal_ble_patch_complete.part.10+0x168>
   22e32:	4e2e      	ldr	r6, [pc, #184]	; (22eec <am_hal_ble_patch_complete.part.10+0x244>)
   22e34:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22e38:	0619      	lsls	r1, r3, #24
   22e3a:	d40a      	bmi.n	22e52 <am_hal_ble_patch_complete.part.10+0x1aa>
   22e3c:	4c2c      	ldr	r4, [pc, #176]	; (22ef0 <am_hal_ble_patch_complete.part.10+0x248>)
   22e3e:	e001      	b.n	22e44 <am_hal_ble_patch_complete.part.10+0x19c>
   22e40:	3c01      	subs	r4, #1
   22e42:	d08e      	beq.n	22d62 <am_hal_ble_patch_complete.part.10+0xba>
   22e44:	2010      	movs	r0, #16
   22e46:	f000 fc01 	bl	2364c <am_hal_flash_delay>
   22e4a:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22e4e:	0618      	lsls	r0, r3, #24
   22e50:	d5f6      	bpl.n	22e40 <am_hal_ble_patch_complete.part.10+0x198>
   22e52:	682e      	ldr	r6, [r5, #0]
   22e54:	4b24      	ldr	r3, [pc, #144]	; (22ee8 <am_hal_ble_patch_complete.part.10+0x240>)
   22e56:	9706      	str	r7, [sp, #24]
   22e58:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   22e5c:	2702      	movs	r7, #2
   22e5e:	2209      	movs	r2, #9
   22e60:	429e      	cmp	r6, r3
   22e62:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   22e66:	f8ad 2020 	strh.w	r2, [sp, #32]
   22e6a:	f47f af75 	bne.w	22d58 <am_hal_ble_patch_complete.part.10+0xb0>
   22e6e:	a906      	add	r1, sp, #24
   22e70:	4628      	mov	r0, r5
   22e72:	f7fe fddb 	bl	21a2c <am_hal_ble_blocking_transfer.part.7>
   22e76:	4604      	mov	r4, r0
   22e78:	2800      	cmp	r0, #0
   22e7a:	f47f af6e 	bne.w	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22e7e:	682b      	ldr	r3, [r5, #0]
   22e80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22e84:	42b3      	cmp	r3, r6
   22e86:	d026      	beq.n	22ed6 <am_hal_ble_patch_complete.part.10+0x22e>
   22e88:	2301      	movs	r3, #1
   22e8a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   22e8e:	481a      	ldr	r0, [pc, #104]	; (22ef8 <am_hal_ble_patch_complete.part.10+0x250>)
   22e90:	f000 fbdc 	bl	2364c <am_hal_flash_delay>
   22e94:	4a19      	ldr	r2, [pc, #100]	; (22efc <am_hal_ble_patch_complete.part.10+0x254>)
   22e96:	4b1a      	ldr	r3, [pc, #104]	; (22f00 <am_hal_ble_patch_complete.part.10+0x258>)
   22e98:	6811      	ldr	r1, [r2, #0]
   22e9a:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   22e9e:	429a      	cmp	r2, r3
   22ea0:	f47f af5b 	bne.w	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22ea4:	b2c9      	uxtb	r1, r1
   22ea6:	f1a1 0320 	sub.w	r3, r1, #32
   22eaa:	2b20      	cmp	r3, #32
   22eac:	f63f af55 	bhi.w	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22eb0:	4628      	mov	r0, r5
   22eb2:	f7ff fe95 	bl	22be0 <am_hal_ble_transmitter_modex_set>
   22eb6:	e750      	b.n	22d5a <am_hal_ble_patch_complete.part.10+0xb2>
   22eb8:	4b0c      	ldr	r3, [pc, #48]	; (22eec <am_hal_ble_patch_complete.part.10+0x244>)
   22eba:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22ebe:	061a      	lsls	r2, r3, #24
   22ec0:	f57f af30 	bpl.w	22d24 <am_hal_ble_patch_complete.part.10+0x7c>
   22ec4:	e748      	b.n	22d58 <am_hal_ble_patch_complete.part.10+0xb0>
   22ec6:	2302      	movs	r3, #2
   22ec8:	af03      	add	r7, sp, #12
   22eca:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22ece:	f8ad 3020 	strh.w	r3, [sp, #32]
   22ed2:	9706      	str	r7, [sp, #24]
   22ed4:	e73a      	b.n	22d4c <am_hal_ble_patch_complete.part.10+0xa4>
   22ed6:	4b05      	ldr	r3, [pc, #20]	; (22eec <am_hal_ble_patch_complete.part.10+0x244>)
   22ed8:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   22edc:	f367 0283 	bfi	r2, r7, #2, #2
   22ee0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   22ee4:	e7d0      	b.n	22e88 <am_hal_ble_patch_complete.part.10+0x1e0>
   22ee6:	bf00      	nop
   22ee8:	01775230 	.word	0x01775230
   22eec:	5000c000 	.word	0x5000c000
   22ef0:	000186a0 	.word	0x000186a0
   22ef4:	08000004 	.word	0x08000004
   22ef8:	007a1200 	.word	0x007a1200
   22efc:	50023808 	.word	0x50023808
   22f00:	18240600 	.word	0x18240600

00022f04 <am_hal_ble_boot>:
   22f04:	b128      	cbz	r0, 22f12 <am_hal_ble_boot+0xe>
   22f06:	6803      	ldr	r3, [r0, #0]
   22f08:	4a59      	ldr	r2, [pc, #356]	; (23070 <am_hal_ble_boot+0x16c>)
   22f0a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22f0e:	4293      	cmp	r3, r2
   22f10:	d001      	beq.n	22f16 <am_hal_ble_boot+0x12>
   22f12:	2002      	movs	r0, #2
   22f14:	4770      	bx	lr
   22f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f1a:	7a03      	ldrb	r3, [r0, #8]
   22f1c:	b082      	sub	sp, #8
   22f1e:	4604      	mov	r4, r0
   22f20:	2b00      	cmp	r3, #0
   22f22:	d065      	beq.n	22ff0 <am_hal_ble_boot+0xec>
   22f24:	4a53      	ldr	r2, [pc, #332]	; (23074 <am_hal_ble_boot+0x170>)
   22f26:	68d3      	ldr	r3, [r2, #12]
   22f28:	b2db      	uxtb	r3, r3
   22f2a:	2b11      	cmp	r3, #17
   22f2c:	d076      	beq.n	2301c <am_hal_ble_boot+0x118>
   22f2e:	68d3      	ldr	r3, [r2, #12]
   22f30:	b2db      	uxtb	r3, r3
   22f32:	2b12      	cmp	r3, #18
   22f34:	d072      	beq.n	2301c <am_hal_ble_boot+0x118>
   22f36:	4b4f      	ldr	r3, [pc, #316]	; (23074 <am_hal_ble_boot+0x170>)
   22f38:	68db      	ldr	r3, [r3, #12]
   22f3a:	b2db      	uxtb	r3, r3
   22f3c:	2b21      	cmp	r3, #33	; 0x21
   22f3e:	f000 808d 	beq.w	2305c <am_hal_ble_boot+0x158>
   22f42:	4b4d      	ldr	r3, [pc, #308]	; (23078 <am_hal_ble_boot+0x174>)
   22f44:	68da      	ldr	r2, [r3, #12]
   22f46:	4b4d      	ldr	r3, [pc, #308]	; (2307c <am_hal_ble_boot+0x178>)
   22f48:	681b      	ldr	r3, [r3, #0]
   22f4a:	ba1b      	rev	r3, r3
   22f4c:	1c5d      	adds	r5, r3, #1
   22f4e:	bf18      	it	ne
   22f50:	6093      	strne	r3, [r2, #8]
   22f52:	4b4b      	ldr	r3, [pc, #300]	; (23080 <am_hal_ble_boot+0x17c>)
   22f54:	681b      	ldr	r3, [r3, #0]
   22f56:	1c58      	adds	r0, r3, #1
   22f58:	d009      	beq.n	22f6e <am_hal_ble_boot+0x6a>
   22f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22f5e:	ba1b      	rev	r3, r3
   22f60:	1c59      	adds	r1, r3, #1
   22f62:	d004      	beq.n	22f6e <am_hal_ble_boot+0x6a>
   22f64:	68d1      	ldr	r1, [r2, #12]
   22f66:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   22f6a:	430b      	orrs	r3, r1
   22f6c:	60d3      	str	r3, [r2, #12]
   22f6e:	4a41      	ldr	r2, [pc, #260]	; (23074 <am_hal_ble_boot+0x170>)
   22f70:	68d3      	ldr	r3, [r2, #12]
   22f72:	b2db      	uxtb	r3, r3
   22f74:	2b11      	cmp	r3, #17
   22f76:	d031      	beq.n	22fdc <am_hal_ble_boot+0xd8>
   22f78:	68d3      	ldr	r3, [r2, #12]
   22f7a:	b2db      	uxtb	r3, r3
   22f7c:	2b12      	cmp	r3, #18
   22f7e:	d02d      	beq.n	22fdc <am_hal_ble_boot+0xd8>
   22f80:	4a40      	ldr	r2, [pc, #256]	; (23084 <am_hal_ble_boot+0x180>)
   22f82:	4b41      	ldr	r3, [pc, #260]	; (23088 <am_hal_ble_boot+0x184>)
   22f84:	6816      	ldr	r6, [r2, #0]
   22f86:	681b      	ldr	r3, [r3, #0]
   22f88:	b1f6      	cbz	r6, 22fc8 <am_hal_ble_boot+0xc4>
   22f8a:	4d40      	ldr	r5, [pc, #256]	; (2308c <am_hal_ble_boot+0x188>)
   22f8c:	f1a3 0804 	sub.w	r8, r3, #4
   22f90:	2700      	movs	r7, #0
   22f92:	f858 1f04 	ldr.w	r1, [r8, #4]!
   22f96:	684b      	ldr	r3, [r1, #4]
   22f98:	68c8      	ldr	r0, [r1, #12]
   22f9a:	b16b      	cbz	r3, 22fb8 <am_hal_ble_boot+0xb4>
   22f9c:	eb00 0e03 	add.w	lr, r0, r3
   22fa0:	2300      	movs	r3, #0
   22fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
   22fa6:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   22faa:	4570      	cmp	r0, lr
   22fac:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   22fb0:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   22fb4:	b29b      	uxth	r3, r3
   22fb6:	d1f4      	bne.n	22fa2 <am_hal_ble_boot+0x9e>
   22fb8:	608b      	str	r3, [r1, #8]
   22fba:	4620      	mov	r0, r4
   22fbc:	f7ff faa8 	bl	22510 <am_hal_ble_patch_apply>
   22fc0:	b948      	cbnz	r0, 22fd6 <am_hal_ble_boot+0xd2>
   22fc2:	3701      	adds	r7, #1
   22fc4:	42b7      	cmp	r7, r6
   22fc6:	d1e4      	bne.n	22f92 <am_hal_ble_boot+0x8e>
   22fc8:	6823      	ldr	r3, [r4, #0]
   22fca:	4a29      	ldr	r2, [pc, #164]	; (23070 <am_hal_ble_boot+0x16c>)
   22fcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22fd0:	4293      	cmp	r3, r2
   22fd2:	d008      	beq.n	22fe6 <am_hal_ble_boot+0xe2>
   22fd4:	2002      	movs	r0, #2
   22fd6:	b002      	add	sp, #8
   22fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22fdc:	4a2c      	ldr	r2, [pc, #176]	; (23090 <am_hal_ble_boot+0x18c>)
   22fde:	4b2d      	ldr	r3, [pc, #180]	; (23094 <am_hal_ble_boot+0x190>)
   22fe0:	6816      	ldr	r6, [r2, #0]
   22fe2:	681b      	ldr	r3, [r3, #0]
   22fe4:	e7d0      	b.n	22f88 <am_hal_ble_boot+0x84>
   22fe6:	4620      	mov	r0, r4
   22fe8:	f7ff fe5e 	bl	22ca8 <am_hal_ble_patch_complete.part.10>
   22fec:	2800      	cmp	r0, #0
   22fee:	d1f2      	bne.n	22fd6 <am_hal_ble_boot+0xd2>
   22ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22ff4:	4b1f      	ldr	r3, [pc, #124]	; (23074 <am_hal_ble_boot+0x170>)
   22ff6:	9201      	str	r2, [sp, #4]
   22ff8:	68db      	ldr	r3, [r3, #12]
   22ffa:	b2db      	uxtb	r3, r3
   22ffc:	2b21      	cmp	r3, #33	; 0x21
   22ffe:	d030      	beq.n	23062 <am_hal_ble_boot+0x15e>
   23000:	4620      	mov	r0, r4
   23002:	aa01      	add	r2, sp, #4
   23004:	4924      	ldr	r1, [pc, #144]	; (23098 <am_hal_ble_boot+0x194>)
   23006:	f7ff fc73 	bl	228f0 <am_hal_ble_plf_reg_read>
   2300a:	9b01      	ldr	r3, [sp, #4]
   2300c:	4823      	ldr	r0, [pc, #140]	; (2309c <am_hal_ble_boot+0x198>)
   2300e:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   23012:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   23016:	bf98      	it	ls
   23018:	2000      	movls	r0, #0
   2301a:	e7dc      	b.n	22fd6 <am_hal_ble_boot+0xd2>
   2301c:	4b20      	ldr	r3, [pc, #128]	; (230a0 <am_hal_ble_boot+0x19c>)
   2301e:	681b      	ldr	r3, [r3, #0]
   23020:	6819      	ldr	r1, [r3, #0]
   23022:	684b      	ldr	r3, [r1, #4]
   23024:	68c8      	ldr	r0, [r1, #12]
   23026:	b16b      	cbz	r3, 23044 <am_hal_ble_boot+0x140>
   23028:	4e18      	ldr	r6, [pc, #96]	; (2308c <am_hal_ble_boot+0x188>)
   2302a:	18c5      	adds	r5, r0, r3
   2302c:	2300      	movs	r3, #0
   2302e:	f810 2b01 	ldrb.w	r2, [r0], #1
   23032:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   23036:	4285      	cmp	r5, r0
   23038:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   2303c:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   23040:	b29b      	uxth	r3, r3
   23042:	d1f4      	bne.n	2302e <am_hal_ble_boot+0x12a>
   23044:	608b      	str	r3, [r1, #8]
   23046:	4620      	mov	r0, r4
   23048:	f7ff fa62 	bl	22510 <am_hal_ble_patch_apply>
   2304c:	2800      	cmp	r0, #0
   2304e:	d1c2      	bne.n	22fd6 <am_hal_ble_boot+0xd2>
   23050:	4620      	mov	r0, r4
   23052:	f7ff f921 	bl	22298 <am_hal_ble_patch_copy_end_apply>
   23056:	2800      	cmp	r0, #0
   23058:	d1bd      	bne.n	22fd6 <am_hal_ble_boot+0xd2>
   2305a:	e76c      	b.n	22f36 <am_hal_ble_boot+0x32>
   2305c:	4b11      	ldr	r3, [pc, #68]	; (230a4 <am_hal_ble_boot+0x1a0>)
   2305e:	68da      	ldr	r2, [r3, #12]
   23060:	e771      	b.n	22f46 <am_hal_ble_boot+0x42>
   23062:	4620      	mov	r0, r4
   23064:	aa01      	add	r2, sp, #4
   23066:	4910      	ldr	r1, [pc, #64]	; (230a8 <am_hal_ble_boot+0x1a4>)
   23068:	f7ff fc42 	bl	228f0 <am_hal_ble_plf_reg_read>
   2306c:	e7cd      	b.n	2300a <am_hal_ble_boot+0x106>
   2306e:	bf00      	nop
   23070:	01775230 	.word	0x01775230
   23074:	40020000 	.word	0x40020000
   23078:	10002ccc 	.word	0x10002ccc
   2307c:	50023800 	.word	0x50023800
   23080:	50023804 	.word	0x50023804
   23084:	00028b9c 	.word	0x00028b9c
   23088:	10003778 	.word	0x10003778
   2308c:	0002734c 	.word	0x0002734c
   23090:	00028284 	.word	0x00028284
   23094:	10002df0 	.word	0x10002df0
   23098:	20006054 	.word	0x20006054
   2309c:	0800000b 	.word	0x0800000b
   230a0:	10002cb8 	.word	0x10002cb8
   230a4:	1000377c 	.word	0x1000377c
   230a8:	20006858 	.word	0x20006858

000230ac <am_hal_ble_tx_power_set>:
   230ac:	b570      	push	{r4, r5, r6, lr}
   230ae:	b082      	sub	sp, #8
   230b0:	4605      	mov	r5, r0
   230b2:	2300      	movs	r3, #0
   230b4:	460e      	mov	r6, r1
   230b6:	466a      	mov	r2, sp
   230b8:	040c      	lsls	r4, r1, #16
   230ba:	4919      	ldr	r1, [pc, #100]	; (23120 <am_hal_ble_tx_power_set+0x74>)
   230bc:	9301      	str	r3, [sp, #4]
   230be:	f7ff fc17 	bl	228f0 <am_hal_ble_plf_reg_read>
   230c2:	4917      	ldr	r1, [pc, #92]	; (23120 <am_hal_ble_tx_power_set+0x74>)
   230c4:	4628      	mov	r0, r5
   230c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   230ca:	f7ff fcd1 	bl	22a70 <am_hal_ble_plf_reg_write>
   230ce:	4b15      	ldr	r3, [pc, #84]	; (23124 <am_hal_ble_tx_power_set+0x78>)
   230d0:	68db      	ldr	r3, [r3, #12]
   230d2:	b2db      	uxtb	r3, r3
   230d4:	2b21      	cmp	r3, #33	; 0x21
   230d6:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   230da:	bf0c      	ite	eq
   230dc:	4912      	ldreq	r1, [pc, #72]	; (23128 <am_hal_ble_tx_power_set+0x7c>)
   230de:	4913      	ldrne	r1, [pc, #76]	; (2312c <am_hal_ble_tx_power_set+0x80>)
   230e0:	aa01      	add	r2, sp, #4
   230e2:	f044 0408 	orr.w	r4, r4, #8
   230e6:	4628      	mov	r0, r5
   230e8:	f7ff fc02 	bl	228f0 <am_hal_ble_plf_reg_read>
   230ec:	4910      	ldr	r1, [pc, #64]	; (23130 <am_hal_ble_tx_power_set+0x84>)
   230ee:	f88d 6004 	strb.w	r6, [sp, #4]
   230f2:	4622      	mov	r2, r4
   230f4:	4628      	mov	r0, r5
   230f6:	f7ff fcbb 	bl	22a70 <am_hal_ble_plf_reg_write>
   230fa:	4b0a      	ldr	r3, [pc, #40]	; (23124 <am_hal_ble_tx_power_set+0x78>)
   230fc:	9a01      	ldr	r2, [sp, #4]
   230fe:	68db      	ldr	r3, [r3, #12]
   23100:	b2db      	uxtb	r3, r3
   23102:	2b21      	cmp	r3, #33	; 0x21
   23104:	bf0c      	ite	eq
   23106:	4908      	ldreq	r1, [pc, #32]	; (23128 <am_hal_ble_tx_power_set+0x7c>)
   23108:	4908      	ldrne	r1, [pc, #32]	; (2312c <am_hal_ble_tx_power_set+0x80>)
   2310a:	4628      	mov	r0, r5
   2310c:	f7ff fcb0 	bl	22a70 <am_hal_ble_plf_reg_write>
   23110:	4628      	mov	r0, r5
   23112:	9a00      	ldr	r2, [sp, #0]
   23114:	4902      	ldr	r1, [pc, #8]	; (23120 <am_hal_ble_tx_power_set+0x74>)
   23116:	f7ff fcab 	bl	22a70 <am_hal_ble_plf_reg_write>
   2311a:	2000      	movs	r0, #0
   2311c:	b002      	add	sp, #8
   2311e:	bd70      	pop	{r4, r5, r6, pc}
   23120:	43000004 	.word	0x43000004
   23124:	40020000 	.word	0x40020000
   23128:	20006838 	.word	0x20006838
   2312c:	20006038 	.word	0x20006038
   23130:	52400018 	.word	0x52400018

00023134 <am_hal_cachectrl_config>:
   23134:	b530      	push	{r4, r5, lr}
   23136:	b083      	sub	sp, #12
   23138:	4605      	mov	r5, r0
   2313a:	f000 fc8d 	bl	23a58 <am_hal_interrupt_master_disable>
   2313e:	4c0f      	ldr	r4, [pc, #60]	; (2317c <am_hal_cachectrl_config+0x48>)
   23140:	9001      	str	r0, [sp, #4]
   23142:	6823      	ldr	r3, [r4, #0]
   23144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   23148:	6023      	str	r3, [r4, #0]
   2314a:	9801      	ldr	r0, [sp, #4]
   2314c:	f000 fc88 	bl	23a60 <am_hal_interrupt_master_set>
   23150:	78ab      	ldrb	r3, [r5, #2]
   23152:	782a      	ldrb	r2, [r5, #0]
   23154:	7869      	ldrb	r1, [r5, #1]
   23156:	005b      	lsls	r3, r3, #1
   23158:	0112      	lsls	r2, r2, #4
   2315a:	b2d2      	uxtb	r2, r2
   2315c:	f003 0302 	and.w	r3, r3, #2
   23160:	4313      	orrs	r3, r2
   23162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23166:	020a      	lsls	r2, r1, #8
   23168:	f402 7240 	and.w	r2, r2, #768	; 0x300
   2316c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23170:	4313      	orrs	r3, r2
   23172:	2000      	movs	r0, #0
   23174:	6023      	str	r3, [r4, #0]
   23176:	b003      	add	sp, #12
   23178:	bd30      	pop	{r4, r5, pc}
   2317a:	bf00      	nop
   2317c:	40018000 	.word	0x40018000

00023180 <am_hal_cachectrl_enable>:
   23180:	4a03      	ldr	r2, [pc, #12]	; (23190 <am_hal_cachectrl_enable+0x10>)
   23182:	6813      	ldr	r3, [r2, #0]
   23184:	f043 0301 	orr.w	r3, r3, #1
   23188:	6013      	str	r3, [r2, #0]
   2318a:	2000      	movs	r0, #0
   2318c:	4770      	bx	lr
   2318e:	bf00      	nop
   23190:	40018000 	.word	0x40018000

00023194 <am_hal_cachectrl_control>:
   23194:	b510      	push	{r4, lr}
   23196:	3801      	subs	r0, #1
   23198:	b08e      	sub	sp, #56	; 0x38
   2319a:	2810      	cmp	r0, #16
   2319c:	f200 8143 	bhi.w	23426 <am_hal_cachectrl_control+0x292>
   231a0:	e8df f010 	tbh	[pc, r0, lsl #1]
   231a4:	01380136 	.word	0x01380136
   231a8:	0011013e 	.word	0x0011013e
   231ac:	001a0018 	.word	0x001a0018
   231b0:	001f001c 	.word	0x001f001c
   231b4:	00300022 	.word	0x00300022
   231b8:	0074003c 	.word	0x0074003c
   231bc:	00e400ac 	.word	0x00e400ac
   231c0:	011a00ff 	.word	0x011a00ff
   231c4:	0120      	.short	0x0120
   231c6:	f44f 7208 	mov.w	r2, #544	; 0x220
   231ca:	4ba8      	ldr	r3, [pc, #672]	; (2346c <am_hal_cachectrl_control+0x2d8>)
   231cc:	2000      	movs	r0, #0
   231ce:	609a      	str	r2, [r3, #8]
   231d0:	b00e      	add	sp, #56	; 0x38
   231d2:	bd10      	pop	{r4, pc}
   231d4:	2240      	movs	r2, #64	; 0x40
   231d6:	e7f8      	b.n	231ca <am_hal_cachectrl_control+0x36>
   231d8:	2220      	movs	r2, #32
   231da:	e7f6      	b.n	231ca <am_hal_cachectrl_control+0x36>
   231dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   231e0:	e7f3      	b.n	231ca <am_hal_cachectrl_control+0x36>
   231e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   231e6:	e7f0      	b.n	231ca <am_hal_cachectrl_control+0x36>
   231e8:	f000 fc36 	bl	23a58 <am_hal_interrupt_master_disable>
   231ec:	4a9f      	ldr	r2, [pc, #636]	; (2346c <am_hal_cachectrl_control+0x2d8>)
   231ee:	9000      	str	r0, [sp, #0]
   231f0:	6813      	ldr	r3, [r2, #0]
   231f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   231f6:	6013      	str	r3, [r2, #0]
   231f8:	9800      	ldr	r0, [sp, #0]
   231fa:	f000 fc31 	bl	23a60 <am_hal_interrupt_master_set>
   231fe:	2000      	movs	r0, #0
   23200:	b00e      	add	sp, #56	; 0x38
   23202:	bd10      	pop	{r4, pc}
   23204:	f000 fc28 	bl	23a58 <am_hal_interrupt_master_disable>
   23208:	4a98      	ldr	r2, [pc, #608]	; (2346c <am_hal_cachectrl_control+0x2d8>)
   2320a:	9001      	str	r0, [sp, #4]
   2320c:	6813      	ldr	r3, [r2, #0]
   2320e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   23212:	6013      	str	r3, [r2, #0]
   23214:	9801      	ldr	r0, [sp, #4]
   23216:	f000 fc23 	bl	23a60 <am_hal_interrupt_master_set>
   2321a:	e7f0      	b.n	231fe <am_hal_cachectrl_control+0x6a>
   2321c:	f000 fc1c 	bl	23a58 <am_hal_interrupt_master_disable>
   23220:	4603      	mov	r3, r0
   23222:	4893      	ldr	r0, [pc, #588]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23224:	9302      	str	r3, [sp, #8]
   23226:	f000 fa5b 	bl	236e0 <am_hal_flash_load_ui32>
   2322a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   2322e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   23232:	488f      	ldr	r0, [pc, #572]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23234:	f000 fa58 	bl	236e8 <am_hal_flash_store_ui32>
   23238:	9802      	ldr	r0, [sp, #8]
   2323a:	f000 fc11 	bl	23a60 <am_hal_interrupt_master_set>
   2323e:	f000 fc0b 	bl	23a58 <am_hal_interrupt_master_disable>
   23242:	4603      	mov	r3, r0
   23244:	488a      	ldr	r0, [pc, #552]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23246:	9303      	str	r3, [sp, #12]
   23248:	f000 fa4a 	bl	236e0 <am_hal_flash_load_ui32>
   2324c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   23250:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
   23254:	4886      	ldr	r0, [pc, #536]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23256:	f000 fa47 	bl	236e8 <am_hal_flash_store_ui32>
   2325a:	9803      	ldr	r0, [sp, #12]
   2325c:	f000 fc00 	bl	23a60 <am_hal_interrupt_master_set>
   23260:	f000 fbfa 	bl	23a58 <am_hal_interrupt_master_disable>
   23264:	4603      	mov	r3, r0
   23266:	4882      	ldr	r0, [pc, #520]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23268:	9304      	str	r3, [sp, #16]
   2326a:	f000 fa39 	bl	236e0 <am_hal_flash_load_ui32>
   2326e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   23272:	f021 010f 	bic.w	r1, r1, #15
   23276:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2327a:	f041 0103 	orr.w	r1, r1, #3
   2327e:	487c      	ldr	r0, [pc, #496]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23280:	f000 fa32 	bl	236e8 <am_hal_flash_store_ui32>
   23284:	9804      	ldr	r0, [sp, #16]
   23286:	f000 fbeb 	bl	23a60 <am_hal_interrupt_master_set>
   2328a:	e7b8      	b.n	231fe <am_hal_cachectrl_control+0x6a>
   2328c:	f000 fbe4 	bl	23a58 <am_hal_interrupt_master_disable>
   23290:	4603      	mov	r3, r0
   23292:	4877      	ldr	r0, [pc, #476]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23294:	9305      	str	r3, [sp, #20]
   23296:	f000 fa23 	bl	236e0 <am_hal_flash_load_ui32>
   2329a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   2329e:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   232a2:	4873      	ldr	r0, [pc, #460]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   232a4:	f000 fa20 	bl	236e8 <am_hal_flash_store_ui32>
   232a8:	9805      	ldr	r0, [sp, #20]
   232aa:	f000 fbd9 	bl	23a60 <am_hal_interrupt_master_set>
   232ae:	f000 fbd3 	bl	23a58 <am_hal_interrupt_master_disable>
   232b2:	4603      	mov	r3, r0
   232b4:	486e      	ldr	r0, [pc, #440]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   232b6:	9306      	str	r3, [sp, #24]
   232b8:	f000 fa12 	bl	236e0 <am_hal_flash_load_ui32>
   232bc:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   232c0:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
   232c4:	486a      	ldr	r0, [pc, #424]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   232c6:	f000 fa0f 	bl	236e8 <am_hal_flash_store_ui32>
   232ca:	9806      	ldr	r0, [sp, #24]
   232cc:	f000 fbc8 	bl	23a60 <am_hal_interrupt_master_set>
   232d0:	f000 fbc2 	bl	23a58 <am_hal_interrupt_master_disable>
   232d4:	4603      	mov	r3, r0
   232d6:	4866      	ldr	r0, [pc, #408]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   232d8:	9307      	str	r3, [sp, #28]
   232da:	f000 fa01 	bl	236e0 <am_hal_flash_load_ui32>
   232de:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   232e2:	f021 010f 	bic.w	r1, r1, #15
   232e6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   232ea:	f041 0101 	orr.w	r1, r1, #1
   232ee:	4860      	ldr	r0, [pc, #384]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   232f0:	f000 f9fa 	bl	236e8 <am_hal_flash_store_ui32>
   232f4:	9807      	ldr	r0, [sp, #28]
   232f6:	f000 fbb3 	bl	23a60 <am_hal_interrupt_master_set>
   232fa:	e780      	b.n	231fe <am_hal_cachectrl_control+0x6a>
   232fc:	f000 fbac 	bl	23a58 <am_hal_interrupt_master_disable>
   23300:	4603      	mov	r3, r0
   23302:	485b      	ldr	r0, [pc, #364]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23304:	9308      	str	r3, [sp, #32]
   23306:	f000 f9eb 	bl	236e0 <am_hal_flash_load_ui32>
   2330a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   2330e:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   23312:	4857      	ldr	r0, [pc, #348]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23314:	f000 f9e8 	bl	236e8 <am_hal_flash_store_ui32>
   23318:	9808      	ldr	r0, [sp, #32]
   2331a:	f000 fba1 	bl	23a60 <am_hal_interrupt_master_set>
   2331e:	f000 fb9b 	bl	23a58 <am_hal_interrupt_master_disable>
   23322:	4603      	mov	r3, r0
   23324:	4852      	ldr	r0, [pc, #328]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23326:	9309      	str	r3, [sp, #36]	; 0x24
   23328:	f000 f9da 	bl	236e0 <am_hal_flash_load_ui32>
   2332c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   23330:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
   23334:	484e      	ldr	r0, [pc, #312]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23336:	f000 f9d7 	bl	236e8 <am_hal_flash_store_ui32>
   2333a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2333c:	f000 fb90 	bl	23a60 <am_hal_interrupt_master_set>
   23340:	f000 fb8a 	bl	23a58 <am_hal_interrupt_master_disable>
   23344:	4603      	mov	r3, r0
   23346:	484a      	ldr	r0, [pc, #296]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23348:	930a      	str	r3, [sp, #40]	; 0x28
   2334a:	f000 f9c9 	bl	236e0 <am_hal_flash_load_ui32>
   2334e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   23352:	f021 010f 	bic.w	r1, r1, #15
   23356:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   2335a:	f041 0101 	orr.w	r1, r1, #1
   2335e:	4844      	ldr	r0, [pc, #272]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23360:	f000 f9c2 	bl	236e8 <am_hal_flash_store_ui32>
   23364:	980a      	ldr	r0, [sp, #40]	; 0x28
   23366:	f000 fb7b 	bl	23a60 <am_hal_interrupt_master_set>
   2336a:	e748      	b.n	231fe <am_hal_cachectrl_control+0x6a>
   2336c:	2900      	cmp	r1, #0
   2336e:	d05a      	beq.n	23426 <am_hal_cachectrl_control+0x292>
   23370:	680c      	ldr	r4, [r1, #0]
   23372:	2c03      	cmp	r4, #3
   23374:	d834      	bhi.n	233e0 <am_hal_cachectrl_control+0x24c>
   23376:	f000 fb6f 	bl	23a58 <am_hal_interrupt_master_disable>
   2337a:	4603      	mov	r3, r0
   2337c:	483c      	ldr	r0, [pc, #240]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   2337e:	930b      	str	r3, [sp, #44]	; 0x2c
   23380:	f000 f9ae 	bl	236e0 <am_hal_flash_load_ui32>
   23384:	0323      	lsls	r3, r4, #12
   23386:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   2338a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   2338e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   23392:	4319      	orrs	r1, r3
   23394:	4836      	ldr	r0, [pc, #216]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23396:	f000 f9a7 	bl	236e8 <am_hal_flash_store_ui32>
   2339a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2339c:	f000 fb60 	bl	23a60 <am_hal_interrupt_master_set>
   233a0:	e72d      	b.n	231fe <am_hal_cachectrl_control+0x6a>
   233a2:	2900      	cmp	r1, #0
   233a4:	d03f      	beq.n	23426 <am_hal_cachectrl_control+0x292>
   233a6:	680c      	ldr	r4, [r1, #0]
   233a8:	2c07      	cmp	r4, #7
   233aa:	d819      	bhi.n	233e0 <am_hal_cachectrl_control+0x24c>
   233ac:	f000 fb54 	bl	23a58 <am_hal_interrupt_master_disable>
   233b0:	4603      	mov	r3, r0
   233b2:	482f      	ldr	r0, [pc, #188]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   233b4:	930c      	str	r3, [sp, #48]	; 0x30
   233b6:	f000 f993 	bl	236e0 <am_hal_flash_load_ui32>
   233ba:	0123      	lsls	r3, r4, #4
   233bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   233c0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   233c4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   233c8:	4319      	orrs	r1, r3
   233ca:	4829      	ldr	r0, [pc, #164]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   233cc:	f000 f98c 	bl	236e8 <am_hal_flash_store_ui32>
   233d0:	980c      	ldr	r0, [sp, #48]	; 0x30
   233d2:	f000 fb45 	bl	23a60 <am_hal_interrupt_master_set>
   233d6:	e712      	b.n	231fe <am_hal_cachectrl_control+0x6a>
   233d8:	b329      	cbz	r1, 23426 <am_hal_cachectrl_control+0x292>
   233da:	680c      	ldr	r4, [r1, #0]
   233dc:	2c0f      	cmp	r4, #15
   233de:	d926      	bls.n	2342e <am_hal_cachectrl_control+0x29a>
   233e0:	2001      	movs	r0, #1
   233e2:	e6f5      	b.n	231d0 <am_hal_cachectrl_control+0x3c>
   233e4:	b1f9      	cbz	r1, 23426 <am_hal_cachectrl_control+0x292>
   233e6:	684a      	ldr	r2, [r1, #4]
   233e8:	4b22      	ldr	r3, [pc, #136]	; (23474 <am_hal_cachectrl_control+0x2e0>)
   233ea:	4013      	ands	r3, r2
   233ec:	b9db      	cbnz	r3, 23426 <am_hal_cachectrl_control+0x292>
   233ee:	688b      	ldr	r3, [r1, #8]
   233f0:	4820      	ldr	r0, [pc, #128]	; (23474 <am_hal_cachectrl_control+0x2e0>)
   233f2:	4018      	ands	r0, r3
   233f4:	b9b8      	cbnz	r0, 23426 <am_hal_cachectrl_control+0x292>
   233f6:	780c      	ldrb	r4, [r1, #0]
   233f8:	b374      	cbz	r4, 23458 <am_hal_cachectrl_control+0x2c4>
   233fa:	2c01      	cmp	r4, #1
   233fc:	d113      	bne.n	23426 <am_hal_cachectrl_control+0x292>
   233fe:	4c1b      	ldr	r4, [pc, #108]	; (2346c <am_hal_cachectrl_control+0x2d8>)
   23400:	61a2      	str	r2, [r4, #24]
   23402:	61e3      	str	r3, [r4, #28]
   23404:	784a      	ldrb	r2, [r1, #1]
   23406:	6823      	ldr	r3, [r4, #0]
   23408:	f362 03c3 	bfi	r3, r2, #3, #1
   2340c:	6023      	str	r3, [r4, #0]
   2340e:	e6df      	b.n	231d0 <am_hal_cachectrl_control+0x3c>
   23410:	2201      	movs	r2, #1
   23412:	e6da      	b.n	231ca <am_hal_cachectrl_control+0x36>
   23414:	4b15      	ldr	r3, [pc, #84]	; (2346c <am_hal_cachectrl_control+0x2d8>)
   23416:	681b      	ldr	r3, [r3, #0]
   23418:	01db      	lsls	r3, r3, #7
   2341a:	d406      	bmi.n	2342a <am_hal_cachectrl_control+0x296>
   2341c:	2007      	movs	r0, #7
   2341e:	e6d7      	b.n	231d0 <am_hal_cachectrl_control+0x3c>
   23420:	f44f 6288 	mov.w	r2, #1088	; 0x440
   23424:	e6d1      	b.n	231ca <am_hal_cachectrl_control+0x36>
   23426:	2006      	movs	r0, #6
   23428:	e6d2      	b.n	231d0 <am_hal_cachectrl_control+0x3c>
   2342a:	2202      	movs	r2, #2
   2342c:	e6cd      	b.n	231ca <am_hal_cachectrl_control+0x36>
   2342e:	f000 fb13 	bl	23a58 <am_hal_interrupt_master_disable>
   23432:	4603      	mov	r3, r0
   23434:	480e      	ldr	r0, [pc, #56]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   23436:	930d      	str	r3, [sp, #52]	; 0x34
   23438:	f000 f952 	bl	236e0 <am_hal_flash_load_ui32>
   2343c:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   23440:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   23444:	f021 010f 	bic.w	r1, r1, #15
   23448:	4321      	orrs	r1, r4
   2344a:	4809      	ldr	r0, [pc, #36]	; (23470 <am_hal_cachectrl_control+0x2dc>)
   2344c:	f000 f94c 	bl	236e8 <am_hal_flash_store_ui32>
   23450:	980d      	ldr	r0, [sp, #52]	; 0x34
   23452:	f000 fb05 	bl	23a60 <am_hal_interrupt_master_set>
   23456:	e6d2      	b.n	231fe <am_hal_cachectrl_control+0x6a>
   23458:	4c04      	ldr	r4, [pc, #16]	; (2346c <am_hal_cachectrl_control+0x2d8>)
   2345a:	6122      	str	r2, [r4, #16]
   2345c:	6163      	str	r3, [r4, #20]
   2345e:	784a      	ldrb	r2, [r1, #1]
   23460:	6823      	ldr	r3, [r4, #0]
   23462:	f362 0382 	bfi	r3, r2, #2, #1
   23466:	6023      	str	r3, [r4, #0]
   23468:	e6b2      	b.n	231d0 <am_hal_cachectrl_control+0x3c>
   2346a:	bf00      	nop
   2346c:	40018000 	.word	0x40018000
   23470:	40018004 	.word	0x40018004
   23474:	f800000f 	.word	0xf800000f

00023478 <am_hal_clkgen_control>:
   23478:	4b41      	ldr	r3, [pc, #260]	; (23580 <am_hal_clkgen_control+0x108>)
   2347a:	681a      	ldr	r2, [r3, #0]
   2347c:	b912      	cbnz	r2, 23484 <am_hal_clkgen_control+0xc>
   2347e:	4a41      	ldr	r2, [pc, #260]	; (23584 <am_hal_clkgen_control+0x10c>)
   23480:	6812      	ldr	r2, [r2, #0]
   23482:	601a      	str	r2, [r3, #0]
   23484:	2809      	cmp	r0, #9
   23486:	d878      	bhi.n	2357a <am_hal_clkgen_control+0x102>
   23488:	e8df f000 	tbb	[pc, r0]
   2348c:	261e160d 	.word	0x261e160d
   23490:	524c423a 	.word	0x524c423a
   23494:	055a      	.short	0x055a
   23496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2349a:	2000      	movs	r0, #0
   2349c:	6a1a      	ldr	r2, [r3, #32]
   2349e:	f36f 0200 	bfc	r2, #0, #1
   234a2:	621a      	str	r2, [r3, #32]
   234a4:	4770      	bx	lr
   234a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   234aa:	2200      	movs	r2, #0
   234ac:	2147      	movs	r1, #71	; 0x47
   234ae:	6159      	str	r1, [r3, #20]
   234b0:	4610      	mov	r0, r2
   234b2:	619a      	str	r2, [r3, #24]
   234b4:	615a      	str	r2, [r3, #20]
   234b6:	4770      	bx	lr
   234b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   234bc:	2000      	movs	r0, #0
   234be:	68d3      	ldr	r3, [r2, #12]
   234c0:	f023 0301 	bic.w	r3, r3, #1
   234c4:	60d3      	str	r3, [r2, #12]
   234c6:	4770      	bx	lr
   234c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   234cc:	2000      	movs	r0, #0
   234ce:	68d3      	ldr	r3, [r2, #12]
   234d0:	f023 0302 	bic.w	r3, r3, #2
   234d4:	60d3      	str	r3, [r2, #12]
   234d6:	4770      	bx	lr
   234d8:	4a2b      	ldr	r2, [pc, #172]	; (23588 <am_hal_clkgen_control+0x110>)
   234da:	68d3      	ldr	r3, [r2, #12]
   234dc:	b2db      	uxtb	r3, r3
   234de:	2b21      	cmp	r3, #33	; 0x21
   234e0:	d106      	bne.n	234f0 <am_hal_clkgen_control+0x78>
   234e2:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   234e6:	2101      	movs	r1, #1
   234e8:	f361 2309 	bfi	r3, r1, #8, #2
   234ec:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   234f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   234f4:	2000      	movs	r0, #0
   234f6:	68d3      	ldr	r3, [r2, #12]
   234f8:	f043 0301 	orr.w	r3, r3, #1
   234fc:	60d3      	str	r3, [r2, #12]
   234fe:	4770      	bx	lr
   23500:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   23504:	2000      	movs	r0, #0
   23506:	68d3      	ldr	r3, [r2, #12]
   23508:	f043 0302 	orr.w	r3, r3, #2
   2350c:	60d3      	str	r3, [r2, #12]
   2350e:	4770      	bx	lr
   23510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   23514:	2200      	movs	r2, #0
   23516:	2047      	movs	r0, #71	; 0x47
   23518:	2101      	movs	r1, #1
   2351a:	6158      	str	r0, [r3, #20]
   2351c:	6199      	str	r1, [r3, #24]
   2351e:	4610      	mov	r0, r2
   23520:	615a      	str	r2, [r3, #20]
   23522:	4770      	bx	lr
   23524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   23528:	2000      	movs	r0, #0
   2352a:	68da      	ldr	r2, [r3, #12]
   2352c:	60da      	str	r2, [r3, #12]
   2352e:	4770      	bx	lr
   23530:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   23534:	2000      	movs	r0, #0
   23536:	68d3      	ldr	r3, [r2, #12]
   23538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2353c:	60d3      	str	r3, [r2, #12]
   2353e:	4770      	bx	lr
   23540:	b510      	push	{r4, lr}
   23542:	4a11      	ldr	r2, [pc, #68]	; (23588 <am_hal_clkgen_control+0x110>)
   23544:	68d3      	ldr	r3, [r2, #12]
   23546:	b2db      	uxtb	r3, r3
   23548:	2b21      	cmp	r3, #33	; 0x21
   2354a:	460c      	mov	r4, r1
   2354c:	d008      	beq.n	23560 <am_hal_clkgen_control+0xe8>
   2354e:	b194      	cbz	r4, 23576 <am_hal_clkgen_control+0xfe>
   23550:	6823      	ldr	r3, [r4, #0]
   23552:	f043 0301 	orr.w	r3, r3, #1
   23556:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2355a:	2000      	movs	r0, #0
   2355c:	6213      	str	r3, [r2, #32]
   2355e:	bd10      	pop	{r4, pc}
   23560:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   23564:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   23568:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   2356c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   23570:	f000 f86c 	bl	2364c <am_hal_flash_delay>
   23574:	e7eb      	b.n	2354e <am_hal_clkgen_control+0xd6>
   23576:	4b05      	ldr	r3, [pc, #20]	; (2358c <am_hal_clkgen_control+0x114>)
   23578:	e7ed      	b.n	23556 <am_hal_clkgen_control+0xde>
   2357a:	2006      	movs	r0, #6
   2357c:	4770      	bx	lr
   2357e:	bf00      	nop
   23580:	10009350 	.word	0x10009350
   23584:	4ffff000 	.word	0x4ffff000
   23588:	40020000 	.word	0x40020000
   2358c:	0025b801 	.word	0x0025b801

00023590 <am_hal_clkgen_status_get>:
   23590:	b1a8      	cbz	r0, 235be <am_hal_clkgen_status_get+0x2e>
   23592:	b410      	push	{r4}
   23594:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   23598:	490a      	ldr	r1, [pc, #40]	; (235c4 <am_hal_clkgen_status_get+0x34>)
   2359a:	6994      	ldr	r4, [r2, #24]
   2359c:	4b0a      	ldr	r3, [pc, #40]	; (235c8 <am_hal_clkgen_status_get+0x38>)
   2359e:	f014 0f01 	tst.w	r4, #1
   235a2:	bf08      	it	eq
   235a4:	460b      	moveq	r3, r1
   235a6:	6003      	str	r3, [r0, #0]
   235a8:	69d3      	ldr	r3, [r2, #28]
   235aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   235ae:	f003 0201 	and.w	r2, r3, #1
   235b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   235b6:	6042      	str	r2, [r0, #4]
   235b8:	7203      	strb	r3, [r0, #8]
   235ba:	2000      	movs	r0, #0
   235bc:	4770      	bx	lr
   235be:	2006      	movs	r0, #6
   235c0:	4770      	bx	lr
   235c2:	bf00      	nop
   235c4:	02dc6c00 	.word	0x02dc6c00
   235c8:	016e3600 	.word	0x016e3600

000235cc <am_hal_ctimer_int_service>:
   235cc:	b198      	cbz	r0, 235f6 <am_hal_ctimer_int_service+0x2a>
   235ce:	b570      	push	{r4, r5, r6, lr}
   235d0:	4e09      	ldr	r6, [pc, #36]	; (235f8 <am_hal_ctimer_int_service+0x2c>)
   235d2:	4604      	mov	r4, r0
   235d4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   235d8:	fab4 f384 	clz	r3, r4
   235dc:	f1c3 021f 	rsb	r2, r3, #31
   235e0:	fa25 f303 	lsr.w	r3, r5, r3
   235e4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   235e8:	ea24 0403 	bic.w	r4, r4, r3
   235ec:	b102      	cbz	r2, 235f0 <am_hal_ctimer_int_service+0x24>
   235ee:	4790      	blx	r2
   235f0:	2c00      	cmp	r4, #0
   235f2:	d1f1      	bne.n	235d8 <am_hal_ctimer_int_service+0xc>
   235f4:	bd70      	pop	{r4, r5, r6, pc}
   235f6:	4770      	bx	lr
   235f8:	100092d0 	.word	0x100092d0

000235fc <am_hal_ctimer_int_clear>:
   235fc:	b510      	push	{r4, lr}
   235fe:	b082      	sub	sp, #8
   23600:	4604      	mov	r4, r0
   23602:	f000 fa29 	bl	23a58 <am_hal_interrupt_master_disable>
   23606:	4b04      	ldr	r3, [pc, #16]	; (23618 <am_hal_ctimer_int_clear+0x1c>)
   23608:	9001      	str	r0, [sp, #4]
   2360a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   2360e:	9801      	ldr	r0, [sp, #4]
   23610:	f000 fa26 	bl	23a60 <am_hal_interrupt_master_set>
   23614:	b002      	add	sp, #8
   23616:	bd10      	pop	{r4, pc}
   23618:	40008000 	.word	0x40008000

0002361c <am_hal_ctimer_int_status_get>:
   2361c:	b510      	push	{r4, lr}
   2361e:	b082      	sub	sp, #8
   23620:	4604      	mov	r4, r0
   23622:	f000 fa19 	bl	23a58 <am_hal_interrupt_master_disable>
   23626:	4b08      	ldr	r3, [pc, #32]	; (23648 <am_hal_ctimer_int_status_get+0x2c>)
   23628:	9001      	str	r0, [sp, #4]
   2362a:	b93c      	cbnz	r4, 2363c <am_hal_ctimer_int_status_get+0x20>
   2362c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   23630:	9801      	ldr	r0, [sp, #4]
   23632:	f000 fa15 	bl	23a60 <am_hal_interrupt_master_set>
   23636:	4620      	mov	r0, r4
   23638:	b002      	add	sp, #8
   2363a:	bd10      	pop	{r4, pc}
   2363c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   23640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   23644:	401c      	ands	r4, r3
   23646:	e7f3      	b.n	23630 <am_hal_ctimer_int_status_get+0x14>
   23648:	40008000 	.word	0x40008000

0002364c <am_hal_flash_delay>:
   2364c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   23650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   23652:	075b      	lsls	r3, r3, #29
   23654:	bf46      	itte	mi
   23656:	0040      	lslmi	r0, r0, #1
   23658:	230e      	movmi	r3, #14
   2365a:	230b      	movpl	r3, #11
   2365c:	4298      	cmp	r0, r3
   2365e:	d800      	bhi.n	23662 <am_hal_flash_delay+0x16>
   23660:	4770      	bx	lr
   23662:	1ac0      	subs	r0, r0, r3
   23664:	4b00      	ldr	r3, [pc, #0]	; (23668 <am_hal_flash_delay+0x1c>)
   23666:	4718      	bx	r3
   23668:	0800009d 	.word	0x0800009d

0002366c <am_hal_flash_delay_status_check>:
   2366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23670:	f89d 4020 	ldrb.w	r4, [sp, #32]
   23674:	460d      	mov	r5, r1
   23676:	4616      	mov	r6, r2
   23678:	461f      	mov	r7, r3
   2367a:	b1b4      	cbz	r4, 236aa <am_hal_flash_delay_status_check+0x3e>
   2367c:	4604      	mov	r4, r0
   2367e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   23682:	f8df 8058 	ldr.w	r8, [pc, #88]	; 236dc <am_hal_flash_delay_status_check+0x70>
   23686:	e009      	b.n	2369c <am_hal_flash_delay_status_check+0x30>
   23688:	b324      	cbz	r4, 236d4 <am_hal_flash_delay_status_check+0x68>
   2368a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   2368e:	f013 0f04 	tst.w	r3, #4
   23692:	bf14      	ite	ne
   23694:	2012      	movne	r0, #18
   23696:	2005      	moveq	r0, #5
   23698:	3c01      	subs	r4, #1
   2369a:	47c0      	blx	r8
   2369c:	682b      	ldr	r3, [r5, #0]
   2369e:	4033      	ands	r3, r6
   236a0:	429f      	cmp	r7, r3
   236a2:	d1f1      	bne.n	23688 <am_hal_flash_delay_status_check+0x1c>
   236a4:	2000      	movs	r0, #0
   236a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   236aa:	f8df 8030 	ldr.w	r8, [pc, #48]	; 236dc <am_hal_flash_delay_status_check+0x70>
   236ae:	4604      	mov	r4, r0
   236b0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   236b4:	e009      	b.n	236ca <am_hal_flash_delay_status_check+0x5e>
   236b6:	b16c      	cbz	r4, 236d4 <am_hal_flash_delay_status_check+0x68>
   236b8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   236bc:	f013 0f04 	tst.w	r3, #4
   236c0:	bf14      	ite	ne
   236c2:	2012      	movne	r0, #18
   236c4:	2005      	moveq	r0, #5
   236c6:	3c01      	subs	r4, #1
   236c8:	47c0      	blx	r8
   236ca:	682b      	ldr	r3, [r5, #0]
   236cc:	4033      	ands	r3, r6
   236ce:	429f      	cmp	r7, r3
   236d0:	d0f1      	beq.n	236b6 <am_hal_flash_delay_status_check+0x4a>
   236d2:	e7e7      	b.n	236a4 <am_hal_flash_delay_status_check+0x38>
   236d4:	2004      	movs	r0, #4
   236d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   236da:	bf00      	nop
   236dc:	0800009d 	.word	0x0800009d

000236e0 <am_hal_flash_load_ui32>:
   236e0:	4b00      	ldr	r3, [pc, #0]	; (236e4 <am_hal_flash_load_ui32+0x4>)
   236e2:	4718      	bx	r3
   236e4:	08000075 	.word	0x08000075

000236e8 <am_hal_flash_store_ui32>:
   236e8:	4b01      	ldr	r3, [pc, #4]	; (236f0 <am_hal_flash_store_ui32+0x8>)
   236ea:	f043 0301 	orr.w	r3, r3, #1
   236ee:	4718      	bx	r3
   236f0:	1000378c 	.word	0x1000378c

000236f4 <am_hal_gpio_pinconfig>:
   236f4:	2831      	cmp	r0, #49	; 0x31
   236f6:	d901      	bls.n	236fc <am_hal_gpio_pinconfig+0x8>
   236f8:	2006      	movs	r0, #6
   236fa:	4770      	bx	lr
   236fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23700:	f001 0307 	and.w	r3, r1, #7
   23704:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
   23708:	b085      	sub	sp, #20
   2370a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   2370e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   23712:	d014      	beq.n	2373e <am_hal_gpio_pinconfig+0x4a>
   23714:	f3c1 1742 	ubfx	r7, r1, #5, #3
   23718:	1dbd      	adds	r5, r7, #6
   2371a:	f005 0507 	and.w	r5, r5, #7
   2371e:	2d03      	cmp	r5, #3
   23720:	f042 0201 	orr.w	r2, r2, #1
   23724:	f200 80a7 	bhi.w	23876 <am_hal_gpio_pinconfig+0x182>
   23728:	4d82      	ldr	r5, [pc, #520]	; (23934 <am_hal_gpio_pinconfig+0x240>)
   2372a:	5c2d      	ldrb	r5, [r5, r0]
   2372c:	07ee      	lsls	r6, r5, #31
   2372e:	d403      	bmi.n	23738 <am_hal_gpio_pinconfig+0x44>
   23730:	4881      	ldr	r0, [pc, #516]	; (23938 <am_hal_gpio_pinconfig+0x244>)
   23732:	b005      	add	sp, #20
   23734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23738:	3f02      	subs	r7, #2
   2373a:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   2373e:	2c00      	cmp	r4, #0
   23740:	f040 8091 	bne.w	23866 <am_hal_gpio_pinconfig+0x172>
   23744:	4c7d      	ldr	r4, [pc, #500]	; (2393c <am_hal_gpio_pinconfig+0x248>)
   23746:	4d7e      	ldr	r5, [pc, #504]	; (23940 <am_hal_gpio_pinconfig+0x24c>)
   23748:	5c24      	ldrb	r4, [r4, r0]
   2374a:	5c2d      	ldrb	r5, [r5, r0]
   2374c:	411c      	asrs	r4, r3
   2374e:	f014 0f01 	tst.w	r4, #1
   23752:	bf0c      	ite	eq
   23754:	2400      	moveq	r4, #0
   23756:	2402      	movne	r4, #2
   23758:	42ab      	cmp	r3, r5
   2375a:	ea42 0204 	orr.w	r2, r2, r4
   2375e:	f000 8096 	beq.w	2388e <am_hal_gpio_pinconfig+0x19a>
   23762:	f3c1 3341 	ubfx	r3, r1, #13, #2
   23766:	105d      	asrs	r5, r3, #1
   23768:	f3c1 2681 	ubfx	r6, r1, #10, #2
   2376c:	00db      	lsls	r3, r3, #3
   2376e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
   23772:	f003 0408 	and.w	r4, r3, #8
   23776:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   2377a:	f00e 060c 	and.w	r6, lr, #12
   2377e:	f3c1 3500 	ubfx	r5, r1, #12, #1
   23782:	2e04      	cmp	r6, #4
   23784:	ea43 0304 	orr.w	r3, r3, r4
   23788:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   2378c:	462c      	mov	r4, r5
   2378e:	f000 808b 	beq.w	238a8 <am_hal_gpio_pinconfig+0x1b4>
   23792:	4c6c      	ldr	r4, [pc, #432]	; (23944 <am_hal_gpio_pinconfig+0x250>)
   23794:	6827      	ldr	r7, [r4, #0]
   23796:	1bcf      	subs	r7, r1, r7
   23798:	fab7 f787 	clz	r7, r7
   2379c:	097f      	lsrs	r7, r7, #5
   2379e:	f01e 0f60 	tst.w	lr, #96	; 0x60
   237a2:	bf04      	itt	eq
   237a4:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   237a8:	f364 0300 	bfieq	r3, r4, #0, #1
   237ac:	0084      	lsls	r4, r0, #2
   237ae:	f3c1 2101 	ubfx	r1, r1, #8, #2
   237b2:	2902      	cmp	r1, #2
   237b4:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   237b8:	d078      	beq.n	238ac <am_hal_gpio_pinconfig+0x1b8>
   237ba:	d87f      	bhi.n	238bc <am_hal_gpio_pinconfig+0x1c8>
   237bc:	2901      	cmp	r1, #1
   237be:	f04f 0100 	mov.w	r1, #0
   237c2:	bf08      	it	eq
   237c4:	f042 0204 	orreq.w	r2, r2, #4
   237c8:	f005 0518 	and.w	r5, r5, #24
   237cc:	9101      	str	r1, [sp, #4]
   237ce:	f004 041c 	and.w	r4, r4, #28
   237d2:	f020 0a03 	bic.w	sl, r0, #3
   237d6:	f04f 090f 	mov.w	r9, #15
   237da:	fa09 f904 	lsl.w	r9, r9, r4
   237de:	0841      	lsrs	r1, r0, #1
   237e0:	26ff      	movs	r6, #255	; 0xff
   237e2:	fa03 f404 	lsl.w	r4, r3, r4
   237e6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   237ea:	40ae      	lsls	r6, r5
   237ec:	9300      	str	r3, [sp, #0]
   237ee:	fa02 f505 	lsl.w	r5, r2, r5
   237f2:	4683      	mov	fp, r0
   237f4:	f021 0803 	bic.w	r8, r1, #3
   237f8:	f000 f92e 	bl	23a58 <am_hal_interrupt_master_disable>
   237fc:	9b00      	ldr	r3, [sp, #0]
   237fe:	9003      	str	r0, [sp, #12]
   23800:	ea6f 0909 	mvn.w	r9, r9
   23804:	43f6      	mvns	r6, r6
   23806:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2380a:	f8df e15c 	ldr.w	lr, [pc, #348]	; 23968 <am_hal_gpio_pinconfig+0x274>
   2380e:	4a4e      	ldr	r2, [pc, #312]	; (23948 <am_hal_gpio_pinconfig+0x254>)
   23810:	b15f      	cbz	r7, 2382a <am_hal_gpio_pinconfig+0x136>
   23812:	ea4f 07db 	mov.w	r7, fp, lsr #3
   23816:	f00b 001f 	and.w	r0, fp, #31
   2381a:	f007 0704 	and.w	r7, r7, #4
   2381e:	f04f 0b01 	mov.w	fp, #1
   23822:	494a      	ldr	r1, [pc, #296]	; (2394c <am_hal_gpio_pinconfig+0x258>)
   23824:	fa0b f000 	lsl.w	r0, fp, r0
   23828:	5078      	str	r0, [r7, r1]
   2382a:	4849      	ldr	r0, [pc, #292]	; (23950 <am_hal_gpio_pinconfig+0x25c>)
   2382c:	2773      	movs	r7, #115	; 0x73
   2382e:	6607      	str	r7, [r0, #96]	; 0x60
   23830:	681f      	ldr	r7, [r3, #0]
   23832:	4037      	ands	r7, r6
   23834:	433d      	orrs	r5, r7
   23836:	601d      	str	r5, [r3, #0]
   23838:	f858 300e 	ldr.w	r3, [r8, lr]
   2383c:	ea09 0303 	and.w	r3, r9, r3
   23840:	4323      	orrs	r3, r4
   23842:	f848 300e 	str.w	r3, [r8, lr]
   23846:	f85a 3002 	ldr.w	r3, [sl, r2]
   2384a:	401e      	ands	r6, r3
   2384c:	9b01      	ldr	r3, [sp, #4]
   2384e:	2400      	movs	r4, #0
   23850:	431e      	orrs	r6, r3
   23852:	f84a 6002 	str.w	r6, [sl, r2]
   23856:	6604      	str	r4, [r0, #96]	; 0x60
   23858:	9803      	ldr	r0, [sp, #12]
   2385a:	f000 f901 	bl	23a60 <am_hal_interrupt_master_set>
   2385e:	4620      	mov	r0, r4
   23860:	b005      	add	sp, #20
   23862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23866:	2c01      	cmp	r4, #1
   23868:	d017      	beq.n	2389a <am_hal_gpio_pinconfig+0x1a6>
   2386a:	2c02      	cmp	r4, #2
   2386c:	d035      	beq.n	238da <am_hal_gpio_pinconfig+0x1e6>
   2386e:	4839      	ldr	r0, [pc, #228]	; (23954 <am_hal_gpio_pinconfig+0x260>)
   23870:	b005      	add	sp, #20
   23872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23876:	2ec0      	cmp	r6, #192	; 0xc0
   23878:	d02a      	beq.n	238d0 <am_hal_gpio_pinconfig+0x1dc>
   2387a:	2e20      	cmp	r6, #32
   2387c:	f47f af5f 	bne.w	2373e <am_hal_gpio_pinconfig+0x4a>
   23880:	2814      	cmp	r0, #20
   23882:	f43f af55 	beq.w	23730 <am_hal_gpio_pinconfig+0x3c>
   23886:	2c00      	cmp	r4, #0
   23888:	f43f af5c 	beq.w	23744 <am_hal_gpio_pinconfig+0x50>
   2388c:	e7eb      	b.n	23866 <am_hal_gpio_pinconfig+0x172>
   2388e:	f3c1 4402 	ubfx	r4, r1, #16, #3
   23892:	2c07      	cmp	r4, #7
   23894:	d128      	bne.n	238e8 <am_hal_gpio_pinconfig+0x1f4>
   23896:	4830      	ldr	r0, [pc, #192]	; (23958 <am_hal_gpio_pinconfig+0x264>)
   23898:	e74b      	b.n	23732 <am_hal_gpio_pinconfig+0x3e>
   2389a:	4c26      	ldr	r4, [pc, #152]	; (23934 <am_hal_gpio_pinconfig+0x240>)
   2389c:	5c24      	ldrb	r4, [r4, r0]
   2389e:	07a5      	lsls	r5, r4, #30
   238a0:	d5e5      	bpl.n	2386e <am_hal_gpio_pinconfig+0x17a>
   238a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   238a6:	e74d      	b.n	23744 <am_hal_gpio_pinconfig+0x50>
   238a8:	2701      	movs	r7, #1
   238aa:	e778      	b.n	2379e <am_hal_gpio_pinconfig+0xaa>
   238ac:	f005 0518 	and.w	r5, r5, #24
   238b0:	f04f 0801 	mov.w	r8, #1
   238b4:	fa08 f105 	lsl.w	r1, r8, r5
   238b8:	9101      	str	r1, [sp, #4]
   238ba:	e788      	b.n	237ce <am_hal_gpio_pinconfig+0xda>
   238bc:	f005 0518 	and.w	r5, r5, #24
   238c0:	f04f 0801 	mov.w	r8, #1
   238c4:	fa08 f105 	lsl.w	r1, r8, r5
   238c8:	f042 0204 	orr.w	r2, r2, #4
   238cc:	9101      	str	r1, [sp, #4]
   238ce:	e77e      	b.n	237ce <am_hal_gpio_pinconfig+0xda>
   238d0:	2814      	cmp	r0, #20
   238d2:	f43f af34 	beq.w	2373e <am_hal_gpio_pinconfig+0x4a>
   238d6:	4821      	ldr	r0, [pc, #132]	; (2395c <am_hal_gpio_pinconfig+0x268>)
   238d8:	e72b      	b.n	23732 <am_hal_gpio_pinconfig+0x3e>
   238da:	4c16      	ldr	r4, [pc, #88]	; (23934 <am_hal_gpio_pinconfig+0x240>)
   238dc:	5c24      	ldrb	r4, [r4, r0]
   238de:	0764      	lsls	r4, r4, #29
   238e0:	d5c5      	bpl.n	2386e <am_hal_gpio_pinconfig+0x17a>
   238e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   238e6:	e72d      	b.n	23744 <am_hal_gpio_pinconfig+0x50>
   238e8:	4d1d      	ldr	r5, [pc, #116]	; (23960 <am_hal_gpio_pinconfig+0x26c>)
   238ea:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   238ee:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   238f2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   238f6:	429e      	cmp	r6, r3
   238f8:	d00c      	beq.n	23914 <am_hal_gpio_pinconfig+0x220>
   238fa:	0084      	lsls	r4, r0, #2
   238fc:	4425      	add	r5, r4
   238fe:	786e      	ldrb	r6, [r5, #1]
   23900:	429e      	cmp	r6, r3
   23902:	d012      	beq.n	2392a <am_hal_gpio_pinconfig+0x236>
   23904:	78ae      	ldrb	r6, [r5, #2]
   23906:	429e      	cmp	r6, r3
   23908:	d00d      	beq.n	23926 <am_hal_gpio_pinconfig+0x232>
   2390a:	78ed      	ldrb	r5, [r5, #3]
   2390c:	429d      	cmp	r5, r3
   2390e:	d00e      	beq.n	2392e <am_hal_gpio_pinconfig+0x23a>
   23910:	4814      	ldr	r0, [pc, #80]	; (23964 <am_hal_gpio_pinconfig+0x270>)
   23912:	e70e      	b.n	23732 <am_hal_gpio_pinconfig+0x3e>
   23914:	2300      	movs	r3, #0
   23916:	0084      	lsls	r4, r0, #2
   23918:	005b      	lsls	r3, r3, #1
   2391a:	f3c1 5540 	ubfx	r5, r1, #21, #1
   2391e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   23922:	2700      	movs	r7, #0
   23924:	e743      	b.n	237ae <am_hal_gpio_pinconfig+0xba>
   23926:	2302      	movs	r3, #2
   23928:	e7f6      	b.n	23918 <am_hal_gpio_pinconfig+0x224>
   2392a:	2301      	movs	r3, #1
   2392c:	e7f4      	b.n	23918 <am_hal_gpio_pinconfig+0x224>
   2392e:	2303      	movs	r3, #3
   23930:	e7f2      	b.n	23918 <am_hal_gpio_pinconfig+0x224>
   23932:	bf00      	nop
   23934:	00028ba8 	.word	0x00028ba8
   23938:	08000100 	.word	0x08000100
   2393c:	00028ca4 	.word	0x00028ca4
   23940:	00028ce0 	.word	0x00028ce0
   23944:	00028cd8 	.word	0x00028cd8
   23948:	400100e0 	.word	0x400100e0
   2394c:	400100b4 	.word	0x400100b4
   23950:	40010000 	.word	0x40010000
   23954:	08000102 	.word	0x08000102
   23958:	08000103 	.word	0x08000103
   2395c:	08000101 	.word	0x08000101
   23960:	00028bdc 	.word	0x00028bdc
   23964:	08000104 	.word	0x08000104
   23968:	40010040 	.word	0x40010040

0002396c <am_hal_gpio_state_read>:
   2396c:	b1ca      	cbz	r2, 239a2 <am_hal_gpio_state_read+0x36>
   2396e:	2831      	cmp	r0, #49	; 0x31
   23970:	d904      	bls.n	2397c <am_hal_gpio_state_read+0x10>
   23972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23976:	6013      	str	r3, [r2, #0]
   23978:	2005      	movs	r0, #5
   2397a:	4770      	bx	lr
   2397c:	08c3      	lsrs	r3, r0, #3
   2397e:	2901      	cmp	r1, #1
   23980:	f003 0304 	and.w	r3, r3, #4
   23984:	f000 001f 	and.w	r0, r0, #31
   23988:	d00d      	beq.n	239a6 <am_hal_gpio_state_read+0x3a>
   2398a:	d313      	bcc.n	239b4 <am_hal_gpio_state_read+0x48>
   2398c:	2902      	cmp	r1, #2
   2398e:	d108      	bne.n	239a2 <am_hal_gpio_state_read+0x36>
   23990:	490c      	ldr	r1, [pc, #48]	; (239c4 <am_hal_gpio_state_read+0x58>)
   23992:	585b      	ldr	r3, [r3, r1]
   23994:	fa23 f000 	lsr.w	r0, r3, r0
   23998:	f000 0001 	and.w	r0, r0, #1
   2399c:	6010      	str	r0, [r2, #0]
   2399e:	2000      	movs	r0, #0
   239a0:	4770      	bx	lr
   239a2:	2006      	movs	r0, #6
   239a4:	4770      	bx	lr
   239a6:	4908      	ldr	r1, [pc, #32]	; (239c8 <am_hal_gpio_state_read+0x5c>)
   239a8:	585b      	ldr	r3, [r3, r1]
   239aa:	fa23 f000 	lsr.w	r0, r3, r0
   239ae:	f000 0001 	and.w	r0, r0, #1
   239b2:	e7f3      	b.n	2399c <am_hal_gpio_state_read+0x30>
   239b4:	4905      	ldr	r1, [pc, #20]	; (239cc <am_hal_gpio_state_read+0x60>)
   239b6:	585b      	ldr	r3, [r3, r1]
   239b8:	fa23 f000 	lsr.w	r0, r3, r0
   239bc:	f000 0001 	and.w	r0, r0, #1
   239c0:	e7ec      	b.n	2399c <am_hal_gpio_state_read+0x30>
   239c2:	bf00      	nop
   239c4:	400100a0 	.word	0x400100a0
   239c8:	40010088 	.word	0x40010088
   239cc:	40010080 	.word	0x40010080

000239d0 <am_hal_gpio_state_write>:
   239d0:	2831      	cmp	r0, #49	; 0x31
   239d2:	d901      	bls.n	239d8 <am_hal_gpio_state_write+0x8>
   239d4:	2005      	movs	r0, #5
   239d6:	4770      	bx	lr
   239d8:	2905      	cmp	r1, #5
   239da:	d901      	bls.n	239e0 <am_hal_gpio_state_write+0x10>
   239dc:	2006      	movs	r0, #6
   239de:	4770      	bx	lr
   239e0:	b570      	push	{r4, r5, r6, lr}
   239e2:	f000 031f 	and.w	r3, r0, #31
   239e6:	b082      	sub	sp, #8
   239e8:	08c0      	lsrs	r0, r0, #3
   239ea:	2201      	movs	r2, #1
   239ec:	460d      	mov	r5, r1
   239ee:	f000 0404 	and.w	r4, r0, #4
   239f2:	fa02 f603 	lsl.w	r6, r2, r3
   239f6:	f000 f82f 	bl	23a58 <am_hal_interrupt_master_disable>
   239fa:	1e69      	subs	r1, r5, #1
   239fc:	9001      	str	r0, [sp, #4]
   239fe:	2904      	cmp	r1, #4
   23a00:	d817      	bhi.n	23a32 <am_hal_gpio_state_write+0x62>
   23a02:	e8df f001 	tbb	[pc, r1]
   23a06:	0e13      	.short	0x0e13
   23a08:	030b      	.short	0x030b
   23a0a:	19          	.byte	0x19
   23a0b:	00          	.byte	0x00
   23a0c:	4b0d      	ldr	r3, [pc, #52]	; (23a44 <am_hal_gpio_state_write+0x74>)
   23a0e:	50e6      	str	r6, [r4, r3]
   23a10:	9801      	ldr	r0, [sp, #4]
   23a12:	f000 f825 	bl	23a60 <am_hal_interrupt_master_set>
   23a16:	2000      	movs	r0, #0
   23a18:	b002      	add	sp, #8
   23a1a:	bd70      	pop	{r4, r5, r6, pc}
   23a1c:	4b0a      	ldr	r3, [pc, #40]	; (23a48 <am_hal_gpio_state_write+0x78>)
   23a1e:	50e6      	str	r6, [r4, r3]
   23a20:	e7f6      	b.n	23a10 <am_hal_gpio_state_write+0x40>
   23a22:	4a0a      	ldr	r2, [pc, #40]	; (23a4c <am_hal_gpio_state_write+0x7c>)
   23a24:	58a3      	ldr	r3, [r4, r2]
   23a26:	4073      	eors	r3, r6
   23a28:	50a3      	str	r3, [r4, r2]
   23a2a:	e7f1      	b.n	23a10 <am_hal_gpio_state_write+0x40>
   23a2c:	4b08      	ldr	r3, [pc, #32]	; (23a50 <am_hal_gpio_state_write+0x80>)
   23a2e:	50e6      	str	r6, [r4, r3]
   23a30:	e7ee      	b.n	23a10 <am_hal_gpio_state_write+0x40>
   23a32:	4b08      	ldr	r3, [pc, #32]	; (23a54 <am_hal_gpio_state_write+0x84>)
   23a34:	50e6      	str	r6, [r4, r3]
   23a36:	e7eb      	b.n	23a10 <am_hal_gpio_state_write+0x40>
   23a38:	4a03      	ldr	r2, [pc, #12]	; (23a48 <am_hal_gpio_state_write+0x78>)
   23a3a:	58a3      	ldr	r3, [r4, r2]
   23a3c:	4073      	eors	r3, r6
   23a3e:	50a3      	str	r3, [r4, r2]
   23a40:	e7e6      	b.n	23a10 <am_hal_gpio_state_write+0x40>
   23a42:	bf00      	nop
   23a44:	400100a8 	.word	0x400100a8
   23a48:	400100b4 	.word	0x400100b4
   23a4c:	40010088 	.word	0x40010088
   23a50:	40010090 	.word	0x40010090
   23a54:	40010098 	.word	0x40010098

00023a58 <am_hal_interrupt_master_disable>:
   23a58:	f3ef 8010 	mrs	r0, PRIMASK
   23a5c:	b672      	cpsid	i
   23a5e:	4770      	bx	lr

00023a60 <am_hal_interrupt_master_set>:
   23a60:	f380 8810 	msr	PRIMASK, r0
   23a64:	4770      	bx	lr
   23a66:	bf00      	nop

00023a68 <am_hal_itm_enable>:
   23a68:	4a0b      	ldr	r2, [pc, #44]	; (23a98 <am_hal_itm_enable+0x30>)
   23a6a:	68d3      	ldr	r3, [r2, #12]
   23a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   23a70:	60d3      	str	r3, [r2, #12]
   23a72:	68d3      	ldr	r3, [r2, #12]
   23a74:	01db      	lsls	r3, r3, #7
   23a76:	d5fc      	bpl.n	23a72 <am_hal_itm_enable+0xa>
   23a78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   23a7c:	4907      	ldr	r1, [pc, #28]	; (23a9c <am_hal_itm_enable+0x34>)
   23a7e:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   23a82:	4a07      	ldr	r2, [pc, #28]	; (23aa0 <am_hal_itm_enable+0x38>)
   23a84:	200f      	movs	r0, #15
   23a86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23a8a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   23a8e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   23a92:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   23a96:	4770      	bx	lr
   23a98:	e000edf0 	.word	0xe000edf0
   23a9c:	c5acce55 	.word	0xc5acce55
   23aa0:	00150511 	.word	0x00150511

00023aa4 <am_hal_itm_disable>:
   23aa4:	b510      	push	{r4, lr}
   23aa6:	4b25      	ldr	r3, [pc, #148]	; (23b3c <am_hal_itm_disable+0x98>)
   23aa8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   23aac:	b9b3      	cbnz	r3, 23adc <am_hal_itm_disable+0x38>
   23aae:	4b24      	ldr	r3, [pc, #144]	; (23b40 <am_hal_itm_disable+0x9c>)
   23ab0:	68da      	ldr	r2, [r3, #12]
   23ab2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   23ab6:	60da      	str	r2, [r3, #12]
   23ab8:	68da      	ldr	r2, [r3, #12]
   23aba:	01d2      	lsls	r2, r2, #7
   23abc:	d5fc      	bpl.n	23ab8 <am_hal_itm_disable+0x14>
   23abe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   23ac2:	4920      	ldr	r1, [pc, #128]	; (23b44 <am_hal_itm_disable+0xa0>)
   23ac4:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   23ac8:	4a1f      	ldr	r2, [pc, #124]	; (23b48 <am_hal_itm_disable+0xa4>)
   23aca:	200f      	movs	r0, #15
   23acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23ad0:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   23ad4:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   23ad8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   23adc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   23ae0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   23ae4:	021b      	lsls	r3, r3, #8
   23ae6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   23aea:	d4f9      	bmi.n	23ae0 <am_hal_itm_disable+0x3c>
   23aec:	f44f 7048 	mov.w	r0, #800	; 0x320
   23af0:	f7ff fdac 	bl	2364c <am_hal_flash_delay>
   23af4:	4b13      	ldr	r3, [pc, #76]	; (23b44 <am_hal_itm_disable+0xa0>)
   23af6:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   23afa:	4621      	mov	r1, r4
   23afc:	2064      	movs	r0, #100	; 0x64
   23afe:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
   23b02:	f023 0301 	bic.w	r3, r3, #1
   23b06:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
   23b0a:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
   23b0e:	4b0f      	ldr	r3, [pc, #60]	; (23b4c <am_hal_itm_disable+0xa8>)
   23b10:	4013      	ands	r3, r2
   23b12:	2b00      	cmp	r3, #0
   23b14:	d1f9      	bne.n	23b0a <am_hal_itm_disable+0x66>
   23b16:	3801      	subs	r0, #1
   23b18:	d1f1      	bne.n	23afe <am_hal_itm_disable+0x5a>
   23b1a:	4a09      	ldr	r2, [pc, #36]	; (23b40 <am_hal_itm_disable+0x9c>)
   23b1c:	68d3      	ldr	r3, [r2, #12]
   23b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   23b22:	60d3      	str	r3, [r2, #12]
   23b24:	68d3      	ldr	r3, [r2, #12]
   23b26:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   23b2a:	d1fb      	bne.n	23b24 <am_hal_itm_disable+0x80>
   23b2c:	4a03      	ldr	r2, [pc, #12]	; (23b3c <am_hal_itm_disable+0x98>)
   23b2e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   23b32:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   23b36:	2b00      	cmp	r3, #0
   23b38:	d1fb      	bne.n	23b32 <am_hal_itm_disable+0x8e>
   23b3a:	bd10      	pop	{r4, pc}
   23b3c:	40020000 	.word	0x40020000
   23b40:	e000edf0 	.word	0xe000edf0
   23b44:	c5acce55 	.word	0xc5acce55
   23b48:	00150511 	.word	0x00150511
   23b4c:	00800001 	.word	0x00800001

00023b50 <am_hal_itm_print>:
   23b50:	7803      	ldrb	r3, [r0, #0]
   23b52:	b1a3      	cbz	r3, 23b7e <am_hal_itm_print+0x2e>
   23b54:	4602      	mov	r2, r0
   23b56:	2300      	movs	r3, #0
   23b58:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   23b5c:	3301      	adds	r3, #1
   23b5e:	2900      	cmp	r1, #0
   23b60:	d1fa      	bne.n	23b58 <am_hal_itm_print+0x8>
   23b62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   23b66:	b430      	push	{r4, r5}
   23b68:	18c1      	adds	r1, r0, r3
   23b6a:	4615      	mov	r5, r2
   23b6c:	f810 4b01 	ldrb.w	r4, [r0], #1
   23b70:	6813      	ldr	r3, [r2, #0]
   23b72:	2b00      	cmp	r3, #0
   23b74:	d0fc      	beq.n	23b70 <am_hal_itm_print+0x20>
   23b76:	4288      	cmp	r0, r1
   23b78:	702c      	strb	r4, [r5, #0]
   23b7a:	d1f7      	bne.n	23b6c <am_hal_itm_print+0x1c>
   23b7c:	bc30      	pop	{r4, r5}
   23b7e:	4770      	bx	lr

00023b80 <am_hal_mcuctrl_info_get>:
   23b80:	b4f0      	push	{r4, r5, r6, r7}
   23b82:	b121      	cbz	r1, 23b8e <am_hal_mcuctrl_info_get+0xe>
   23b84:	2801      	cmp	r0, #1
   23b86:	d038      	beq.n	23bfa <am_hal_mcuctrl_info_get+0x7a>
   23b88:	d320      	bcc.n	23bcc <am_hal_mcuctrl_info_get+0x4c>
   23b8a:	2802      	cmp	r0, #2
   23b8c:	d002      	beq.n	23b94 <am_hal_mcuctrl_info_get+0x14>
   23b8e:	2006      	movs	r0, #6
   23b90:	bcf0      	pop	{r4, r5, r6, r7}
   23b92:	4770      	bx	lr
   23b94:	4a41      	ldr	r2, [pc, #260]	; (23c9c <am_hal_mcuctrl_info_get+0x11c>)
   23b96:	684d      	ldr	r5, [r1, #4]
   23b98:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   23b9c:	694c      	ldr	r4, [r1, #20]
   23b9e:	f003 0601 	and.w	r6, r3, #1
   23ba2:	f3c3 0040 	ubfx	r0, r3, #1, #1
   23ba6:	f3c3 0380 	ubfx	r3, r3, #2, #1
   23baa:	700e      	strb	r6, [r1, #0]
   23bac:	7208      	strb	r0, [r1, #8]
   23bae:	740b      	strb	r3, [r1, #16]
   23bb0:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   23bb4:	60cb      	str	r3, [r1, #12]
   23bb6:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   23bba:	4328      	orrs	r0, r5
   23bbc:	6048      	str	r0, [r1, #4]
   23bbe:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   23bc2:	4323      	orrs	r3, r4
   23bc4:	2000      	movs	r0, #0
   23bc6:	614b      	str	r3, [r1, #20]
   23bc8:	bcf0      	pop	{r4, r5, r6, r7}
   23bca:	4770      	bx	lr
   23bcc:	4a33      	ldr	r2, [pc, #204]	; (23c9c <am_hal_mcuctrl_info_get+0x11c>)
   23bce:	6993      	ldr	r3, [r2, #24]
   23bd0:	f3c3 1080 	ubfx	r0, r3, #6, #1
   23bd4:	f3c3 0380 	ubfx	r3, r3, #2, #1
   23bd8:	7008      	strb	r0, [r1, #0]
   23bda:	704b      	strb	r3, [r1, #1]
   23bdc:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   23be0:	f3c3 6381 	ubfx	r3, r3, #26, #2
   23be4:	710b      	strb	r3, [r1, #4]
   23be6:	6953      	ldr	r3, [r2, #20]
   23be8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   23bec:	f003 0301 	and.w	r3, r3, #1
   23bf0:	2000      	movs	r0, #0
   23bf2:	708a      	strb	r2, [r1, #2]
   23bf4:	70cb      	strb	r3, [r1, #3]
   23bf6:	bcf0      	pop	{r4, r5, r6, r7}
   23bf8:	4770      	bx	lr
   23bfa:	4b28      	ldr	r3, [pc, #160]	; (23c9c <am_hal_mcuctrl_info_get+0x11c>)
   23bfc:	4c28      	ldr	r4, [pc, #160]	; (23ca0 <am_hal_mcuctrl_info_get+0x120>)
   23bfe:	681a      	ldr	r2, [r3, #0]
   23c00:	600a      	str	r2, [r1, #0]
   23c02:	6858      	ldr	r0, [r3, #4]
   23c04:	6048      	str	r0, [r1, #4]
   23c06:	6898      	ldr	r0, [r3, #8]
   23c08:	6088      	str	r0, [r1, #8]
   23c0a:	68d8      	ldr	r0, [r3, #12]
   23c0c:	60c8      	str	r0, [r1, #12]
   23c0e:	691d      	ldr	r5, [r3, #16]
   23c10:	4824      	ldr	r0, [pc, #144]	; (23ca4 <am_hal_mcuctrl_info_get+0x124>)
   23c12:	610d      	str	r5, [r1, #16]
   23c14:	f3c2 5703 	ubfx	r7, r2, #20, #4
   23c18:	f3c2 4603 	ubfx	r6, r2, #16, #4
   23c1c:	695d      	ldr	r5, [r3, #20]
   23c1e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   23c22:	4b21      	ldr	r3, [pc, #132]	; (23ca8 <am_hal_mcuctrl_info_get+0x128>)
   23c24:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   23c28:	6208      	str	r0, [r1, #32]
   23c2a:	f002 0201 	and.w	r2, r2, #1
   23c2e:	614d      	str	r5, [r1, #20]
   23c30:	61cc      	str	r4, [r1, #28]
   23c32:	618a      	str	r2, [r1, #24]
   23c34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   23c38:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   23c3c:	b2d0      	uxtb	r0, r2
   23c3e:	f004 020f 	and.w	r2, r4, #15
   23c42:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   23c46:	624a      	str	r2, [r1, #36]	; 0x24
   23c48:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   23c4c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   23c50:	f3c2 1003 	ubfx	r0, r2, #4, #4
   23c54:	f004 020f 	and.w	r2, r4, #15
   23c58:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   23c5c:	628a      	str	r2, [r1, #40]	; 0x28
   23c5e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   23c62:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   23c66:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   23c6a:	f3c2 1203 	ubfx	r2, r2, #4, #4
   23c6e:	4302      	orrs	r2, r0
   23c70:	62ca      	str	r2, [r1, #44]	; 0x2c
   23c72:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   23c76:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   23c7a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   23c7e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   23c82:	b2c0      	uxtb	r0, r0
   23c84:	0400      	lsls	r0, r0, #16
   23c86:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   23c8a:	b2d2      	uxtb	r2, r2
   23c8c:	431a      	orrs	r2, r3
   23c8e:	b2e3      	uxtb	r3, r4
   23c90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   23c94:	630b      	str	r3, [r1, #48]	; 0x30
   23c96:	2000      	movs	r0, #0
   23c98:	bcf0      	pop	{r4, r5, r6, r7}
   23c9a:	4770      	bx	lr
   23c9c:	40020000 	.word	0x40020000
   23ca0:	00028d14 	.word	0x00028d14
   23ca4:	00028d54 	.word	0x00028d54
   23ca8:	f0000f00 	.word	0xf0000f00

00023cac <am_hal_pwrctrl_periph_enable>:
   23cac:	b570      	push	{r4, r5, r6, lr}
   23cae:	b082      	sub	sp, #8
   23cb0:	4604      	mov	r4, r0
   23cb2:	f7ff fed1 	bl	23a58 <am_hal_interrupt_master_disable>
   23cb6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23cba:	4d0f      	ldr	r5, [pc, #60]	; (23cf8 <am_hal_pwrctrl_periph_enable+0x4c>)
   23cbc:	4e0f      	ldr	r6, [pc, #60]	; (23cfc <am_hal_pwrctrl_periph_enable+0x50>)
   23cbe:	9001      	str	r0, [sp, #4]
   23cc0:	00a4      	lsls	r4, r4, #2
   23cc2:	68aa      	ldr	r2, [r5, #8]
   23cc4:	5933      	ldr	r3, [r6, r4]
   23cc6:	4313      	orrs	r3, r2
   23cc8:	60ab      	str	r3, [r5, #8]
   23cca:	9801      	ldr	r0, [sp, #4]
   23ccc:	4434      	add	r4, r6
   23cce:	f7ff fec7 	bl	23a60 <am_hal_interrupt_master_set>
   23cd2:	20a0      	movs	r0, #160	; 0xa0
   23cd4:	f7ff fcba 	bl	2364c <am_hal_flash_delay>
   23cd8:	69ab      	ldr	r3, [r5, #24]
   23cda:	6864      	ldr	r4, [r4, #4]
   23cdc:	4223      	tst	r3, r4
   23cde:	d103      	bne.n	23ce8 <am_hal_pwrctrl_periph_enable+0x3c>
   23ce0:	20a0      	movs	r0, #160	; 0xa0
   23ce2:	f7ff fcb3 	bl	2364c <am_hal_flash_delay>
   23ce6:	69ab      	ldr	r3, [r5, #24]
   23ce8:	4b03      	ldr	r3, [pc, #12]	; (23cf8 <am_hal_pwrctrl_periph_enable+0x4c>)
   23cea:	699b      	ldr	r3, [r3, #24]
   23cec:	4223      	tst	r3, r4
   23cee:	bf0c      	ite	eq
   23cf0:	2001      	moveq	r0, #1
   23cf2:	2000      	movne	r0, #0
   23cf4:	b002      	add	sp, #8
   23cf6:	bd70      	pop	{r4, r5, r6, pc}
   23cf8:	40021000 	.word	0x40021000
   23cfc:	00028d94 	.word	0x00028d94

00023d00 <am_hal_pwrctrl_periph_disable>:
   23d00:	b570      	push	{r4, r5, r6, lr}
   23d02:	b082      	sub	sp, #8
   23d04:	4604      	mov	r4, r0
   23d06:	f7ff fea7 	bl	23a58 <am_hal_interrupt_master_disable>
   23d0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23d0e:	4d10      	ldr	r5, [pc, #64]	; (23d50 <am_hal_pwrctrl_periph_disable+0x50>)
   23d10:	4e10      	ldr	r6, [pc, #64]	; (23d54 <am_hal_pwrctrl_periph_disable+0x54>)
   23d12:	9001      	str	r0, [sp, #4]
   23d14:	00a4      	lsls	r4, r4, #2
   23d16:	68ab      	ldr	r3, [r5, #8]
   23d18:	5932      	ldr	r2, [r6, r4]
   23d1a:	ea23 0302 	bic.w	r3, r3, r2
   23d1e:	60ab      	str	r3, [r5, #8]
   23d20:	9801      	ldr	r0, [sp, #4]
   23d22:	4434      	add	r4, r6
   23d24:	f7ff fe9c 	bl	23a60 <am_hal_interrupt_master_set>
   23d28:	20a0      	movs	r0, #160	; 0xa0
   23d2a:	f7ff fc8f 	bl	2364c <am_hal_flash_delay>
   23d2e:	69ab      	ldr	r3, [r5, #24]
   23d30:	6864      	ldr	r4, [r4, #4]
   23d32:	4223      	tst	r3, r4
   23d34:	d003      	beq.n	23d3e <am_hal_pwrctrl_periph_disable+0x3e>
   23d36:	20a0      	movs	r0, #160	; 0xa0
   23d38:	f7ff fc88 	bl	2364c <am_hal_flash_delay>
   23d3c:	69ab      	ldr	r3, [r5, #24]
   23d3e:	4b04      	ldr	r3, [pc, #16]	; (23d50 <am_hal_pwrctrl_periph_disable+0x50>)
   23d40:	699b      	ldr	r3, [r3, #24]
   23d42:	4223      	tst	r3, r4
   23d44:	bf14      	ite	ne
   23d46:	2001      	movne	r0, #1
   23d48:	2000      	moveq	r0, #0
   23d4a:	b002      	add	sp, #8
   23d4c:	bd70      	pop	{r4, r5, r6, pc}
   23d4e:	bf00      	nop
   23d50:	40021000 	.word	0x40021000
   23d54:	00028d94 	.word	0x00028d94

00023d58 <am_hal_pwrctrl_low_power_init>:
   23d58:	b530      	push	{r4, r5, lr}
   23d5a:	4b33      	ldr	r3, [pc, #204]	; (23e28 <am_hal_pwrctrl_low_power_init+0xd0>)
   23d5c:	681a      	ldr	r2, [r3, #0]
   23d5e:	b085      	sub	sp, #20
   23d60:	b912      	cbnz	r2, 23d68 <am_hal_pwrctrl_low_power_init+0x10>
   23d62:	4a32      	ldr	r2, [pc, #200]	; (23e2c <am_hal_pwrctrl_low_power_init+0xd4>)
   23d64:	6812      	ldr	r2, [r2, #0]
   23d66:	601a      	str	r2, [r3, #0]
   23d68:	4b31      	ldr	r3, [pc, #196]	; (23e30 <am_hal_pwrctrl_low_power_init+0xd8>)
   23d6a:	68db      	ldr	r3, [r3, #12]
   23d6c:	b2db      	uxtb	r3, r3
   23d6e:	2b12      	cmp	r3, #18
   23d70:	d00a      	beq.n	23d88 <am_hal_pwrctrl_low_power_init+0x30>
   23d72:	4c30      	ldr	r4, [pc, #192]	; (23e34 <am_hal_pwrctrl_low_power_init+0xdc>)
   23d74:	2100      	movs	r1, #0
   23d76:	200c      	movs	r0, #12
   23d78:	f7ff fa0c 	bl	23194 <am_hal_cachectrl_control>
   23d7c:	69a3      	ldr	r3, [r4, #24]
   23d7e:	05d8      	lsls	r0, r3, #23
   23d80:	d520      	bpl.n	23dc4 <am_hal_pwrctrl_low_power_init+0x6c>
   23d82:	2000      	movs	r0, #0
   23d84:	b005      	add	sp, #20
   23d86:	bd30      	pop	{r4, r5, pc}
   23d88:	4c2a      	ldr	r4, [pc, #168]	; (23e34 <am_hal_pwrctrl_low_power_init+0xdc>)
   23d8a:	6863      	ldr	r3, [r4, #4]
   23d8c:	07d9      	lsls	r1, r3, #31
   23d8e:	d5f0      	bpl.n	23d72 <am_hal_pwrctrl_low_power_init+0x1a>
   23d90:	f7ff fe62 	bl	23a58 <am_hal_interrupt_master_disable>
   23d94:	9003      	str	r0, [sp, #12]
   23d96:	68a3      	ldr	r3, [r4, #8]
   23d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   23d9c:	60a3      	str	r3, [r4, #8]
   23d9e:	9803      	ldr	r0, [sp, #12]
   23da0:	f7ff fe5e 	bl	23a60 <am_hal_interrupt_master_set>
   23da4:	20a0      	movs	r0, #160	; 0xa0
   23da6:	f7ff fc51 	bl	2364c <am_hal_flash_delay>
   23daa:	69a3      	ldr	r3, [r4, #24]
   23dac:	061a      	lsls	r2, r3, #24
   23dae:	d403      	bmi.n	23db8 <am_hal_pwrctrl_low_power_init+0x60>
   23db0:	20a0      	movs	r0, #160	; 0xa0
   23db2:	f7ff fc4b 	bl	2364c <am_hal_flash_delay>
   23db6:	69a3      	ldr	r3, [r4, #24]
   23db8:	4b1e      	ldr	r3, [pc, #120]	; (23e34 <am_hal_pwrctrl_low_power_init+0xdc>)
   23dba:	699b      	ldr	r3, [r3, #24]
   23dbc:	061b      	lsls	r3, r3, #24
   23dbe:	d4d8      	bmi.n	23d72 <am_hal_pwrctrl_low_power_init+0x1a>
   23dc0:	2001      	movs	r0, #1
   23dc2:	e7df      	b.n	23d84 <am_hal_pwrctrl_low_power_init+0x2c>
   23dc4:	4d1a      	ldr	r5, [pc, #104]	; (23e30 <am_hal_pwrctrl_low_power_init+0xd8>)
   23dc6:	491c      	ldr	r1, [pc, #112]	; (23e38 <am_hal_pwrctrl_low_power_init+0xe0>)
   23dc8:	7e2a      	ldrb	r2, [r5, #24]
   23dca:	2001      	movs	r0, #1
   23dcc:	4302      	orrs	r2, r0
   23dce:	2307      	movs	r3, #7
   23dd0:	762a      	strb	r2, [r5, #24]
   23dd2:	9000      	str	r0, [sp, #0]
   23dd4:	461a      	mov	r2, r3
   23dd6:	f242 7010 	movw	r0, #10000	; 0x2710
   23dda:	f7ff fc47 	bl	2366c <am_hal_flash_delay_status_check>
   23dde:	b110      	cbz	r0, 23de6 <am_hal_pwrctrl_low_power_init+0x8e>
   23de0:	2004      	movs	r0, #4
   23de2:	b005      	add	sp, #20
   23de4:	bd30      	pop	{r4, r5, pc}
   23de6:	6823      	ldr	r3, [r4, #0]
   23de8:	f043 0301 	orr.w	r3, r3, #1
   23dec:	6023      	str	r3, [r4, #0]
   23dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23df4:	6263      	str	r3, [r4, #36]	; 0x24
   23df6:	68eb      	ldr	r3, [r5, #12]
   23df8:	b2db      	uxtb	r3, r3
   23dfa:	2b11      	cmp	r3, #17
   23dfc:	d1c1      	bne.n	23d82 <am_hal_pwrctrl_low_power_init+0x2a>
   23dfe:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   23e02:	f360 5356 	bfi	r3, r0, #21, #2
   23e06:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   23e0a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   23e0e:	220f      	movs	r2, #15
   23e10:	f362 138b 	bfi	r3, r2, #6, #6
   23e14:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   23e18:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   23e1c:	f362 0305 	bfi	r3, r2, #0, #6
   23e20:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   23e24:	e7ae      	b.n	23d84 <am_hal_pwrctrl_low_power_init+0x2c>
   23e26:	bf00      	nop
   23e28:	10009350 	.word	0x10009350
   23e2c:	4ffff000 	.word	0x4ffff000
   23e30:	40020000 	.word	0x40020000
   23e34:	40021000 	.word	0x40021000
   23e38:	40020018 	.word	0x40020018

00023e3c <am_hal_queue_init>:
   23e3c:	b410      	push	{r4}
   23e3e:	2400      	movs	r4, #0
   23e40:	6004      	str	r4, [r0, #0]
   23e42:	6044      	str	r4, [r0, #4]
   23e44:	6084      	str	r4, [r0, #8]
   23e46:	60c3      	str	r3, [r0, #12]
   23e48:	6102      	str	r2, [r0, #16]
   23e4a:	6141      	str	r1, [r0, #20]
   23e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
   23e50:	4770      	bx	lr
   23e52:	bf00      	nop

00023e54 <am_hal_queue_item_add>:
   23e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e56:	4604      	mov	r4, r0
   23e58:	6906      	ldr	r6, [r0, #16]
   23e5a:	b083      	sub	sp, #12
   23e5c:	fb06 f602 	mul.w	r6, r6, r2
   23e60:	460d      	mov	r5, r1
   23e62:	f7ff fdf9 	bl	23a58 <am_hal_interrupt_master_disable>
   23e66:	68e7      	ldr	r7, [r4, #12]
   23e68:	68a2      	ldr	r2, [r4, #8]
   23e6a:	9001      	str	r0, [sp, #4]
   23e6c:	1abb      	subs	r3, r7, r2
   23e6e:	429e      	cmp	r6, r3
   23e70:	d826      	bhi.n	23ec0 <am_hal_queue_item_add+0x6c>
   23e72:	b196      	cbz	r6, 23e9a <am_hal_queue_item_add+0x46>
   23e74:	6823      	ldr	r3, [r4, #0]
   23e76:	4629      	mov	r1, r5
   23e78:	b1c5      	cbz	r5, 23eac <am_hal_queue_item_add+0x58>
   23e7a:	19af      	adds	r7, r5, r6
   23e7c:	6962      	ldr	r2, [r4, #20]
   23e7e:	f811 0b01 	ldrb.w	r0, [r1], #1
   23e82:	54d0      	strb	r0, [r2, r3]
   23e84:	6823      	ldr	r3, [r4, #0]
   23e86:	68e5      	ldr	r5, [r4, #12]
   23e88:	3301      	adds	r3, #1
   23e8a:	42b9      	cmp	r1, r7
   23e8c:	fbb3 f0f5 	udiv	r0, r3, r5
   23e90:	fb05 3310 	mls	r3, r5, r0, r3
   23e94:	6023      	str	r3, [r4, #0]
   23e96:	d1f1      	bne.n	23e7c <am_hal_queue_item_add+0x28>
   23e98:	68a2      	ldr	r2, [r4, #8]
   23e9a:	4432      	add	r2, r6
   23e9c:	60a2      	str	r2, [r4, #8]
   23e9e:	2401      	movs	r4, #1
   23ea0:	9801      	ldr	r0, [sp, #4]
   23ea2:	f7ff fddd 	bl	23a60 <am_hal_interrupt_master_set>
   23ea6:	4620      	mov	r0, r4
   23ea8:	b003      	add	sp, #12
   23eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23eac:	3101      	adds	r1, #1
   23eae:	3301      	adds	r3, #1
   23eb0:	428e      	cmp	r6, r1
   23eb2:	fbb3 f0f7 	udiv	r0, r3, r7
   23eb6:	fb07 3310 	mls	r3, r7, r0, r3
   23eba:	d1f7      	bne.n	23eac <am_hal_queue_item_add+0x58>
   23ebc:	6023      	str	r3, [r4, #0]
   23ebe:	e7ec      	b.n	23e9a <am_hal_queue_item_add+0x46>
   23ec0:	2400      	movs	r4, #0
   23ec2:	e7ed      	b.n	23ea0 <am_hal_queue_item_add+0x4c>

00023ec4 <am_hal_queue_item_get>:
   23ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ec6:	4604      	mov	r4, r0
   23ec8:	6906      	ldr	r6, [r0, #16]
   23eca:	b083      	sub	sp, #12
   23ecc:	fb06 f602 	mul.w	r6, r6, r2
   23ed0:	460d      	mov	r5, r1
   23ed2:	f7ff fdc1 	bl	23a58 <am_hal_interrupt_master_disable>
   23ed6:	68a2      	ldr	r2, [r4, #8]
   23ed8:	9001      	str	r0, [sp, #4]
   23eda:	4296      	cmp	r6, r2
   23edc:	d81c      	bhi.n	23f18 <am_hal_queue_item_get+0x54>
   23ede:	b196      	cbz	r6, 23f06 <am_hal_queue_item_get+0x42>
   23ee0:	6863      	ldr	r3, [r4, #4]
   23ee2:	b1dd      	cbz	r5, 23f1c <am_hal_queue_item_get+0x58>
   23ee4:	4629      	mov	r1, r5
   23ee6:	19af      	adds	r7, r5, r6
   23ee8:	6962      	ldr	r2, [r4, #20]
   23eea:	5cd3      	ldrb	r3, [r2, r3]
   23eec:	f801 3b01 	strb.w	r3, [r1], #1
   23ef0:	6863      	ldr	r3, [r4, #4]
   23ef2:	68e5      	ldr	r5, [r4, #12]
   23ef4:	3301      	adds	r3, #1
   23ef6:	428f      	cmp	r7, r1
   23ef8:	fbb3 f0f5 	udiv	r0, r3, r5
   23efc:	fb05 3310 	mls	r3, r5, r0, r3
   23f00:	6063      	str	r3, [r4, #4]
   23f02:	d1f1      	bne.n	23ee8 <am_hal_queue_item_get+0x24>
   23f04:	68a2      	ldr	r2, [r4, #8]
   23f06:	1b92      	subs	r2, r2, r6
   23f08:	60a2      	str	r2, [r4, #8]
   23f0a:	2401      	movs	r4, #1
   23f0c:	9801      	ldr	r0, [sp, #4]
   23f0e:	f7ff fda7 	bl	23a60 <am_hal_interrupt_master_set>
   23f12:	4620      	mov	r0, r4
   23f14:	b003      	add	sp, #12
   23f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23f18:	2400      	movs	r4, #0
   23f1a:	e7f7      	b.n	23f0c <am_hal_queue_item_get+0x48>
   23f1c:	68e0      	ldr	r0, [r4, #12]
   23f1e:	4629      	mov	r1, r5
   23f20:	3101      	adds	r1, #1
   23f22:	3301      	adds	r3, #1
   23f24:	428e      	cmp	r6, r1
   23f26:	fbb3 f5f0 	udiv	r5, r3, r0
   23f2a:	fb00 3315 	mls	r3, r0, r5, r3
   23f2e:	d1f7      	bne.n	23f20 <am_hal_queue_item_get+0x5c>
   23f30:	6063      	str	r3, [r4, #4]
   23f32:	e7e8      	b.n	23f06 <am_hal_queue_item_get+0x42>

00023f34 <am_hal_rtc_osc_select>:
   23f34:	b928      	cbnz	r0, 23f42 <am_hal_rtc_osc_select+0xe>
   23f36:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   23f3a:	68d3      	ldr	r3, [r2, #12]
   23f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   23f40:	60d3      	str	r3, [r2, #12]
   23f42:	4770      	bx	lr

00023f44 <am_hal_rtc_osc_disable>:
   23f44:	4a03      	ldr	r2, [pc, #12]	; (23f54 <am_hal_rtc_osc_disable+0x10>)
   23f46:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   23f4a:	f043 0310 	orr.w	r3, r3, #16
   23f4e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   23f52:	4770      	bx	lr
   23f54:	40004200 	.word	0x40004200

00023f58 <am_hal_stimer_config>:
   23f58:	4b03      	ldr	r3, [pc, #12]	; (23f68 <am_hal_stimer_config+0x10>)
   23f5a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   23f5e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   23f62:	4610      	mov	r0, r2
   23f64:	4770      	bx	lr
   23f66:	bf00      	nop
   23f68:	40008000 	.word	0x40008000

00023f6c <am_hal_stimer_counter_get>:
   23f6c:	4b01      	ldr	r3, [pc, #4]	; (23f74 <am_hal_stimer_counter_get+0x8>)
   23f6e:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   23f72:	4770      	bx	lr
   23f74:	40008000 	.word	0x40008000

00023f78 <am_hal_stimer_compare_delta_set>:
   23f78:	2807      	cmp	r0, #7
   23f7a:	d900      	bls.n	23f7e <am_hal_stimer_compare_delta_set+0x6>
   23f7c:	4770      	bx	lr
   23f7e:	b570      	push	{r4, r5, r6, lr}
   23f80:	b082      	sub	sp, #8
   23f82:	460c      	mov	r4, r1
   23f84:	4605      	mov	r5, r0
   23f86:	f7ff fd67 	bl	23a58 <am_hal_interrupt_master_disable>
   23f8a:	4923      	ldr	r1, [pc, #140]	; (24018 <am_hal_stimer_compare_delta_set+0xa0>)
   23f8c:	9001      	str	r0, [sp, #4]
   23f8e:	4b23      	ldr	r3, [pc, #140]	; (2401c <am_hal_stimer_compare_delta_set+0xa4>)
   23f90:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   23f94:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   23f98:	f44f 7280 	mov.w	r2, #256	; 0x100
   23f9c:	442b      	add	r3, r5
   23f9e:	40aa      	lsls	r2, r5
   23fa0:	ea26 0502 	bic.w	r5, r6, r2
   23fa4:	009b      	lsls	r3, r3, #2
   23fa6:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
   23faa:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   23fae:	601c      	str	r4, [r3, #0]
   23fb0:	681d      	ldr	r5, [r3, #0]
   23fb2:	4421      	add	r1, r4
   23fb4:	1a6e      	subs	r6, r5, r1
   23fb6:	2e00      	cmp	r6, #0
   23fb8:	db03      	blt.n	23fc2 <am_hal_stimer_compare_delta_set+0x4a>
   23fba:	310a      	adds	r1, #10
   23fbc:	1a69      	subs	r1, r5, r1
   23fbe:	2900      	cmp	r1, #0
   23fc0:	dd1e      	ble.n	24000 <am_hal_stimer_compare_delta_set+0x88>
   23fc2:	4915      	ldr	r1, [pc, #84]	; (24018 <am_hal_stimer_compare_delta_set+0xa0>)
   23fc4:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   23fc8:	601c      	str	r4, [r3, #0]
   23fca:	681d      	ldr	r5, [r3, #0]
   23fcc:	4421      	add	r1, r4
   23fce:	1a6e      	subs	r6, r5, r1
   23fd0:	2e00      	cmp	r6, #0
   23fd2:	db03      	blt.n	23fdc <am_hal_stimer_compare_delta_set+0x64>
   23fd4:	310a      	adds	r1, #10
   23fd6:	1a69      	subs	r1, r5, r1
   23fd8:	2900      	cmp	r1, #0
   23fda:	dd11      	ble.n	24000 <am_hal_stimer_compare_delta_set+0x88>
   23fdc:	490e      	ldr	r1, [pc, #56]	; (24018 <am_hal_stimer_compare_delta_set+0xa0>)
   23fde:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   23fe2:	601c      	str	r4, [r3, #0]
   23fe4:	681d      	ldr	r5, [r3, #0]
   23fe6:	4421      	add	r1, r4
   23fe8:	1a6e      	subs	r6, r5, r1
   23fea:	2e00      	cmp	r6, #0
   23fec:	db03      	blt.n	23ff6 <am_hal_stimer_compare_delta_set+0x7e>
   23fee:	310a      	adds	r1, #10
   23ff0:	1a69      	subs	r1, r5, r1
   23ff2:	2900      	cmp	r1, #0
   23ff4:	dd04      	ble.n	24000 <am_hal_stimer_compare_delta_set+0x88>
   23ff6:	4908      	ldr	r1, [pc, #32]	; (24018 <am_hal_stimer_compare_delta_set+0xa0>)
   23ff8:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   23ffc:	601c      	str	r4, [r3, #0]
   23ffe:	681b      	ldr	r3, [r3, #0]
   24000:	4905      	ldr	r1, [pc, #20]	; (24018 <am_hal_stimer_compare_delta_set+0xa0>)
   24002:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   24006:	4002      	ands	r2, r0
   24008:	431a      	orrs	r2, r3
   2400a:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
   2400e:	9801      	ldr	r0, [sp, #4]
   24010:	f7ff fd26 	bl	23a60 <am_hal_interrupt_master_set>
   24014:	b002      	add	sp, #8
   24016:	bd70      	pop	{r4, r5, r6, pc}
   24018:	40008000 	.word	0x40008000
   2401c:	10002054 	.word	0x10002054

00024020 <am_hal_stimer_int_enable>:
   24020:	4a03      	ldr	r2, [pc, #12]	; (24030 <am_hal_stimer_int_enable+0x10>)
   24022:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   24026:	4318      	orrs	r0, r3
   24028:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   2402c:	4770      	bx	lr
   2402e:	bf00      	nop
   24030:	40008000 	.word	0x40008000

00024034 <am_hal_stimer_int_clear>:
   24034:	4b01      	ldr	r3, [pc, #4]	; (2403c <am_hal_stimer_int_clear+0x8>)
   24036:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2403a:	4770      	bx	lr
   2403c:	40008000 	.word	0x40008000

00024040 <am_hal_stimer_int_status_get>:
   24040:	4a04      	ldr	r2, [pc, #16]	; (24054 <am_hal_stimer_int_status_get+0x14>)
   24042:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   24046:	b110      	cbz	r0, 2404e <am_hal_stimer_int_status_get+0xe>
   24048:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   2404c:	4013      	ands	r3, r2
   2404e:	4618      	mov	r0, r3
   24050:	4770      	bx	lr
   24052:	bf00      	nop
   24054:	40008000 	.word	0x40008000

00024058 <am_hal_sysctrl_sleep>:
   24058:	b510      	push	{r4, lr}
   2405a:	b082      	sub	sp, #8
   2405c:	4604      	mov	r4, r0
   2405e:	f7ff fcfb 	bl	23a58 <am_hal_interrupt_master_disable>
   24062:	9001      	str	r0, [sp, #4]
   24064:	b124      	cbz	r4, 24070 <am_hal_sysctrl_sleep+0x18>
   24066:	4b12      	ldr	r3, [pc, #72]	; (240b0 <am_hal_sysctrl_sleep+0x58>)
   24068:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   2406c:	07db      	lsls	r3, r3, #31
   2406e:	d512      	bpl.n	24096 <am_hal_sysctrl_sleep+0x3e>
   24070:	4a10      	ldr	r2, [pc, #64]	; (240b4 <am_hal_sysctrl_sleep+0x5c>)
   24072:	6913      	ldr	r3, [r2, #16]
   24074:	f023 0304 	bic.w	r3, r3, #4
   24078:	6113      	str	r3, [r2, #16]
   2407a:	f3bf 8f4f 	dsb	sy
   2407e:	4a0e      	ldr	r2, [pc, #56]	; (240b8 <am_hal_sysctrl_sleep+0x60>)
   24080:	4b0e      	ldr	r3, [pc, #56]	; (240bc <am_hal_sysctrl_sleep+0x64>)
   24082:	6812      	ldr	r2, [r2, #0]
   24084:	601a      	str	r2, [r3, #0]
   24086:	bf30      	wfi
   24088:	f3bf 8f6f 	isb	sy
   2408c:	9801      	ldr	r0, [sp, #4]
   2408e:	f7ff fce7 	bl	23a60 <am_hal_interrupt_master_set>
   24092:	b002      	add	sp, #8
   24094:	bd10      	pop	{r4, pc}
   24096:	4b0a      	ldr	r3, [pc, #40]	; (240c0 <am_hal_sysctrl_sleep+0x68>)
   24098:	681a      	ldr	r2, [r3, #0]
   2409a:	b912      	cbnz	r2, 240a2 <am_hal_sysctrl_sleep+0x4a>
   2409c:	4a09      	ldr	r2, [pc, #36]	; (240c4 <am_hal_sysctrl_sleep+0x6c>)
   2409e:	6812      	ldr	r2, [r2, #0]
   240a0:	601a      	str	r2, [r3, #0]
   240a2:	4a04      	ldr	r2, [pc, #16]	; (240b4 <am_hal_sysctrl_sleep+0x5c>)
   240a4:	6913      	ldr	r3, [r2, #16]
   240a6:	f043 0304 	orr.w	r3, r3, #4
   240aa:	6113      	str	r3, [r2, #16]
   240ac:	e7e5      	b.n	2407a <am_hal_sysctrl_sleep+0x22>
   240ae:	bf00      	nop
   240b0:	40020000 	.word	0x40020000
   240b4:	e000ed00 	.word	0xe000ed00
   240b8:	5fff0000 	.word	0x5fff0000
   240bc:	10009354 	.word	0x10009354
   240c0:	10009350 	.word	0x10009350
   240c4:	4ffff000 	.word	0x4ffff000

000240c8 <am_hal_sysctrl_fpu_enable>:
   240c8:	4b02      	ldr	r3, [pc, #8]	; (240d4 <am_hal_sysctrl_fpu_enable+0xc>)
   240ca:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   240ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   240d2:	4770      	bx	lr
   240d4:	e000ed00 	.word	0xe000ed00

000240d8 <am_hal_sysctrl_fpu_stacking_enable>:
   240d8:	b510      	push	{r4, lr}
   240da:	b082      	sub	sp, #8
   240dc:	4604      	mov	r4, r0
   240de:	f7ff fcbb 	bl	23a58 <am_hal_interrupt_master_disable>
   240e2:	4a09      	ldr	r2, [pc, #36]	; (24108 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   240e4:	9001      	str	r0, [sp, #4]
   240e6:	6853      	ldr	r3, [r2, #4]
   240e8:	2c00      	cmp	r4, #0
   240ea:	bf14      	ite	ne
   240ec:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
   240f0:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   240f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   240f8:	430b      	orrs	r3, r1
   240fa:	6053      	str	r3, [r2, #4]
   240fc:	9801      	ldr	r0, [sp, #4]
   240fe:	f7ff fcaf 	bl	23a60 <am_hal_interrupt_master_set>
   24102:	b002      	add	sp, #8
   24104:	bd10      	pop	{r4, pc}
   24106:	bf00      	nop
   24108:	e000ef30 	.word	0xe000ef30

0002410c <am_hal_tpiu_enable>:
   2410c:	b530      	push	{r4, r5, lr}
   2410e:	4a23      	ldr	r2, [pc, #140]	; (2419c <am_hal_tpiu_enable+0x90>)
   24110:	6804      	ldr	r4, [r0, #0]
   24112:	2300      	movs	r3, #0
   24114:	b085      	sub	sp, #20
   24116:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   2411a:	b334      	cbz	r4, 2416a <am_hal_tpiu_enable+0x5e>
   2411c:	4b20      	ldr	r3, [pc, #128]	; (241a0 <am_hal_tpiu_enable+0x94>)
   2411e:	4921      	ldr	r1, [pc, #132]	; (241a4 <am_hal_tpiu_enable+0x98>)
   24120:	2001      	movs	r0, #1
   24122:	6050      	str	r0, [r2, #4]
   24124:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   24128:	a801      	add	r0, sp, #4
   2412a:	428a      	cmp	r2, r1
   2412c:	bf88      	it	hi
   2412e:	461c      	movhi	r4, r3
   24130:	f7ff fa2e 	bl	23590 <am_hal_clkgen_status_get>
   24134:	9b01      	ldr	r3, [sp, #4]
   24136:	1c5a      	adds	r2, r3, #1
   24138:	d02d      	beq.n	24196 <am_hal_tpiu_enable+0x8a>
   2413a:	08db      	lsrs	r3, r3, #3
   2413c:	fbb3 f3f4 	udiv	r3, r3, r4
   24140:	3b01      	subs	r3, #1
   24142:	b29b      	uxth	r3, r3
   24144:	4a15      	ldr	r2, [pc, #84]	; (2419c <am_hal_tpiu_enable+0x90>)
   24146:	4918      	ldr	r1, [pc, #96]	; (241a8 <am_hal_tpiu_enable+0x9c>)
   24148:	6113      	str	r3, [r2, #16]
   2414a:	2402      	movs	r4, #2
   2414c:	f240 2301 	movw	r3, #513	; 0x201
   24150:	2000      	movs	r0, #0
   24152:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   24156:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   2415a:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   2415e:	f44f 7048 	mov.w	r0, #800	; 0x320
   24162:	f7ff fa73 	bl	2364c <am_hal_flash_delay>
   24166:	b005      	add	sp, #20
   24168:	bd30      	pop	{r4, r5, pc}
   2416a:	6903      	ldr	r3, [r0, #16]
   2416c:	6113      	str	r3, [r2, #16]
   2416e:	6883      	ldr	r3, [r0, #8]
   24170:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   24174:	68c3      	ldr	r3, [r0, #12]
   24176:	4d0c      	ldr	r5, [pc, #48]	; (241a8 <am_hal_tpiu_enable+0x9c>)
   24178:	1e59      	subs	r1, r3, #1
   2417a:	2301      	movs	r3, #1
   2417c:	408b      	lsls	r3, r1
   2417e:	6053      	str	r3, [r2, #4]
   24180:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   24184:	6843      	ldr	r3, [r0, #4]
   24186:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   2418a:	f44f 7048 	mov.w	r0, #800	; 0x320
   2418e:	f7ff fa5d 	bl	2364c <am_hal_flash_delay>
   24192:	b005      	add	sp, #20
   24194:	bd30      	pop	{r4, r5, pc}
   24196:	2305      	movs	r3, #5
   24198:	e7d4      	b.n	24144 <am_hal_tpiu_enable+0x38>
   2419a:	bf00      	nop
   2419c:	e0040000 	.word	0xe0040000
   241a0:	000f4240 	.word	0x000f4240
   241a4:	001da380 	.word	0x001da380
   241a8:	40020000 	.word	0x40020000
   241ac:	00000000 	.word	0x00000000

000241b0 <uECC_vli_sub>:
   241b0:	f1c3 0308 	rsb	r3, r3, #8
   241b4:	00db      	lsls	r3, r3, #3
   241b6:	b470      	push	{r4, r5, r6}
   241b8:	3301      	adds	r3, #1
   241ba:	2400      	movs	r4, #0
   241bc:	a503      	add	r5, pc, #12	; (adr r5, 241cc <uECC_vli_sub+0x1c>)
   241be:	bf00      	nop
   241c0:	195b      	adds	r3, r3, r5
   241c2:	c920      	ldmia	r1!, {r5}
   241c4:	ca40      	ldmia	r2!, {r6}
   241c6:	1bad      	subs	r5, r5, r6
   241c8:	c020      	stmia	r0!, {r5}
   241ca:	4718      	bx	r3
   241cc:	c920      	ldmia	r1!, {r5}
   241ce:	ca40      	ldmia	r2!, {r6}
   241d0:	41b5      	sbcs	r5, r6
   241d2:	c020      	stmia	r0!, {r5}
   241d4:	c920      	ldmia	r1!, {r5}
   241d6:	ca40      	ldmia	r2!, {r6}
   241d8:	41b5      	sbcs	r5, r6
   241da:	c020      	stmia	r0!, {r5}
   241dc:	c920      	ldmia	r1!, {r5}
   241de:	ca40      	ldmia	r2!, {r6}
   241e0:	41b5      	sbcs	r5, r6
   241e2:	c020      	stmia	r0!, {r5}
   241e4:	c920      	ldmia	r1!, {r5}
   241e6:	ca40      	ldmia	r2!, {r6}
   241e8:	41b5      	sbcs	r5, r6
   241ea:	c020      	stmia	r0!, {r5}
   241ec:	c920      	ldmia	r1!, {r5}
   241ee:	ca40      	ldmia	r2!, {r6}
   241f0:	41b5      	sbcs	r5, r6
   241f2:	c020      	stmia	r0!, {r5}
   241f4:	c920      	ldmia	r1!, {r5}
   241f6:	ca40      	ldmia	r2!, {r6}
   241f8:	41b5      	sbcs	r5, r6
   241fa:	c020      	stmia	r0!, {r5}
   241fc:	c920      	ldmia	r1!, {r5}
   241fe:	ca40      	ldmia	r2!, {r6}
   24200:	41b5      	sbcs	r5, r6
   24202:	c020      	stmia	r0!, {r5}
   24204:	4164      	adcs	r4, r4
   24206:	fab4 f084 	clz	r0, r4
   2420a:	0940      	lsrs	r0, r0, #5
   2420c:	bc70      	pop	{r4, r5, r6}
   2420e:	4770      	bx	lr

00024210 <uECC_vli_mult>:
   24210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24214:	b408      	push	{r3}
   24216:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
   24218:	b404      	push	{r2}
   2421a:	f851 2b04 	ldr.w	r2, [r1], #4
   2421e:	fba3 8902 	umull	r8, r9, r3, r2
   24222:	f840 8b04 	str.w	r8, [r0], #4
   24226:	f04f 0a00 	mov.w	sl, #0
   2422a:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2422e:	f04f 0b00 	mov.w	fp, #0
   24232:	fbe5 ab62 	umaal	sl, fp, r5, r2
   24236:	f04f 0c00 	mov.w	ip, #0
   2423a:	fbe6 bc62 	umaal	fp, ip, r6, r2
   2423e:	f04f 0e00 	mov.w	lr, #0
   24242:	fbe7 ce62 	umaal	ip, lr, r7, r2
   24246:	f851 2b04 	ldr.w	r2, [r1], #4
   2424a:	f04f 0800 	mov.w	r8, #0
   2424e:	fbe3 8962 	umaal	r8, r9, r3, r2
   24252:	f840 8b04 	str.w	r8, [r0], #4
   24256:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2425a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2425e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   24262:	fbe7 ce62 	umaal	ip, lr, r7, r2
   24266:	f851 2b04 	ldr.w	r2, [r1], #4
   2426a:	f04f 0800 	mov.w	r8, #0
   2426e:	fbe3 8962 	umaal	r8, r9, r3, r2
   24272:	f840 8b04 	str.w	r8, [r0], #4
   24276:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2427a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2427e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   24282:	fbe7 ce62 	umaal	ip, lr, r7, r2
   24286:	f851 2b04 	ldr.w	r2, [r1], #4
   2428a:	f04f 0800 	mov.w	r8, #0
   2428e:	fbe3 8962 	umaal	r8, r9, r3, r2
   24292:	f840 8b04 	str.w	r8, [r0], #4
   24296:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2429a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2429e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   242a2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   242a6:	f851 2b04 	ldr.w	r2, [r1], #4
   242aa:	f04f 0800 	mov.w	r8, #0
   242ae:	fbe3 8962 	umaal	r8, r9, r3, r2
   242b2:	f840 8b04 	str.w	r8, [r0], #4
   242b6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   242ba:	fbe5 ab62 	umaal	sl, fp, r5, r2
   242be:	fbe6 bc62 	umaal	fp, ip, r6, r2
   242c2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   242c6:	f840 9b04 	str.w	r9, [r0], #4
   242ca:	f840 ab04 	str.w	sl, [r0], #4
   242ce:	f840 bb04 	str.w	fp, [r0], #4
   242d2:	f840 cb04 	str.w	ip, [r0], #4
   242d6:	f840 eb04 	str.w	lr, [r0], #4
   242da:	bc0c      	pop	{r2, r3}
   242dc:	2b05      	cmp	r3, #5
   242de:	f000 811e 	beq.w	2451e <uECC_vli_mult+0x30e>
   242e2:	680c      	ldr	r4, [r1, #0]
   242e4:	f1a0 0014 	sub.w	r0, r0, #20
   242e8:	f1a1 0114 	sub.w	r1, r1, #20
   242ec:	f1a2 0214 	sub.w	r2, r2, #20
   242f0:	f852 eb04 	ldr.w	lr, [r2], #4
   242f4:	f04f 0500 	mov.w	r5, #0
   242f8:	f850 6b04 	ldr.w	r6, [r0], #4
   242fc:	fbe4 566e 	umaal	r5, r6, r4, lr
   24300:	f852 eb04 	ldr.w	lr, [r2], #4
   24304:	f850 7b04 	ldr.w	r7, [r0], #4
   24308:	fbe4 676e 	umaal	r6, r7, r4, lr
   2430c:	f852 eb04 	ldr.w	lr, [r2], #4
   24310:	f850 8b04 	ldr.w	r8, [r0], #4
   24314:	fbe4 786e 	umaal	r7, r8, r4, lr
   24318:	f852 eb04 	ldr.w	lr, [r2], #4
   2431c:	f850 9b04 	ldr.w	r9, [r0], #4
   24320:	fbe4 896e 	umaal	r8, r9, r4, lr
   24324:	f852 eb04 	ldr.w	lr, [r2], #4
   24328:	f850 ab04 	ldr.w	sl, [r0], #4
   2432c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   24330:	f1a0 0014 	sub.w	r0, r0, #20
   24334:	f852 4b04 	ldr.w	r4, [r2], #4
   24338:	f851 eb04 	ldr.w	lr, [r1], #4
   2433c:	f04f 0c00 	mov.w	ip, #0
   24340:	fbe4 c56e 	umaal	ip, r5, r4, lr
   24344:	f840 cb04 	str.w	ip, [r0], #4
   24348:	f851 eb04 	ldr.w	lr, [r1], #4
   2434c:	fbe4 566e 	umaal	r5, r6, r4, lr
   24350:	f840 5b04 	str.w	r5, [r0], #4
   24354:	f851 eb04 	ldr.w	lr, [r1], #4
   24358:	fbe4 676e 	umaal	r6, r7, r4, lr
   2435c:	f840 6b04 	str.w	r6, [r0], #4
   24360:	f851 eb04 	ldr.w	lr, [r1], #4
   24364:	fbe4 786e 	umaal	r7, r8, r4, lr
   24368:	f840 7b04 	str.w	r7, [r0], #4
   2436c:	f851 eb04 	ldr.w	lr, [r1], #4
   24370:	fbe4 896e 	umaal	r8, r9, r4, lr
   24374:	f840 8b04 	str.w	r8, [r0], #4
   24378:	f851 eb04 	ldr.w	lr, [r1], #4
   2437c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   24380:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   24384:	2b06      	cmp	r3, #6
   24386:	f000 80ca 	beq.w	2451e <uECC_vli_mult+0x30e>
   2438a:	680c      	ldr	r4, [r1, #0]
   2438c:	f1a0 0018 	sub.w	r0, r0, #24
   24390:	f1a1 0118 	sub.w	r1, r1, #24
   24394:	f1a2 0218 	sub.w	r2, r2, #24
   24398:	f852 eb04 	ldr.w	lr, [r2], #4
   2439c:	f04f 0500 	mov.w	r5, #0
   243a0:	f850 6b04 	ldr.w	r6, [r0], #4
   243a4:	fbe4 566e 	umaal	r5, r6, r4, lr
   243a8:	f852 eb04 	ldr.w	lr, [r2], #4
   243ac:	f850 7b04 	ldr.w	r7, [r0], #4
   243b0:	fbe4 676e 	umaal	r6, r7, r4, lr
   243b4:	f852 eb04 	ldr.w	lr, [r2], #4
   243b8:	f850 8b04 	ldr.w	r8, [r0], #4
   243bc:	fbe4 786e 	umaal	r7, r8, r4, lr
   243c0:	f852 eb04 	ldr.w	lr, [r2], #4
   243c4:	f850 9b04 	ldr.w	r9, [r0], #4
   243c8:	fbe4 896e 	umaal	r8, r9, r4, lr
   243cc:	f852 eb04 	ldr.w	lr, [r2], #4
   243d0:	f850 ab04 	ldr.w	sl, [r0], #4
   243d4:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   243d8:	f852 eb04 	ldr.w	lr, [r2], #4
   243dc:	f850 bb04 	ldr.w	fp, [r0], #4
   243e0:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   243e4:	f1a0 0018 	sub.w	r0, r0, #24
   243e8:	f852 4b04 	ldr.w	r4, [r2], #4
   243ec:	f851 eb04 	ldr.w	lr, [r1], #4
   243f0:	f04f 0c00 	mov.w	ip, #0
   243f4:	fbe4 c56e 	umaal	ip, r5, r4, lr
   243f8:	f840 cb04 	str.w	ip, [r0], #4
   243fc:	f851 eb04 	ldr.w	lr, [r1], #4
   24400:	fbe4 566e 	umaal	r5, r6, r4, lr
   24404:	f840 5b04 	str.w	r5, [r0], #4
   24408:	f851 eb04 	ldr.w	lr, [r1], #4
   2440c:	fbe4 676e 	umaal	r6, r7, r4, lr
   24410:	f840 6b04 	str.w	r6, [r0], #4
   24414:	f851 eb04 	ldr.w	lr, [r1], #4
   24418:	fbe4 786e 	umaal	r7, r8, r4, lr
   2441c:	f840 7b04 	str.w	r7, [r0], #4
   24420:	f851 eb04 	ldr.w	lr, [r1], #4
   24424:	fbe4 896e 	umaal	r8, r9, r4, lr
   24428:	f840 8b04 	str.w	r8, [r0], #4
   2442c:	f851 eb04 	ldr.w	lr, [r1], #4
   24430:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   24434:	f840 9b04 	str.w	r9, [r0], #4
   24438:	f851 eb04 	ldr.w	lr, [r1], #4
   2443c:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   24440:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   24444:	2b07      	cmp	r3, #7
   24446:	d06a      	beq.n	2451e <uECC_vli_mult+0x30e>
   24448:	b408      	push	{r3}
   2444a:	680c      	ldr	r4, [r1, #0]
   2444c:	f1a0 001c 	sub.w	r0, r0, #28
   24450:	f1a1 011c 	sub.w	r1, r1, #28
   24454:	f1a2 021c 	sub.w	r2, r2, #28
   24458:	f852 eb04 	ldr.w	lr, [r2], #4
   2445c:	f04f 0500 	mov.w	r5, #0
   24460:	f850 6b04 	ldr.w	r6, [r0], #4
   24464:	fbe4 566e 	umaal	r5, r6, r4, lr
   24468:	f852 eb04 	ldr.w	lr, [r2], #4
   2446c:	f850 7b04 	ldr.w	r7, [r0], #4
   24470:	fbe4 676e 	umaal	r6, r7, r4, lr
   24474:	f852 eb04 	ldr.w	lr, [r2], #4
   24478:	f850 8b04 	ldr.w	r8, [r0], #4
   2447c:	fbe4 786e 	umaal	r7, r8, r4, lr
   24480:	f852 eb04 	ldr.w	lr, [r2], #4
   24484:	f850 9b04 	ldr.w	r9, [r0], #4
   24488:	fbe4 896e 	umaal	r8, r9, r4, lr
   2448c:	f852 eb04 	ldr.w	lr, [r2], #4
   24490:	f850 ab04 	ldr.w	sl, [r0], #4
   24494:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   24498:	f852 eb04 	ldr.w	lr, [r2], #4
   2449c:	f850 bb04 	ldr.w	fp, [r0], #4
   244a0:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   244a4:	f852 eb04 	ldr.w	lr, [r2], #4
   244a8:	f850 cb04 	ldr.w	ip, [r0], #4
   244ac:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   244b0:	f1a0 001c 	sub.w	r0, r0, #28
   244b4:	f852 4b04 	ldr.w	r4, [r2], #4
   244b8:	f851 eb04 	ldr.w	lr, [r1], #4
   244bc:	f04f 0300 	mov.w	r3, #0
   244c0:	fbe4 356e 	umaal	r3, r5, r4, lr
   244c4:	f840 3b04 	str.w	r3, [r0], #4
   244c8:	f851 eb04 	ldr.w	lr, [r1], #4
   244cc:	fbe4 566e 	umaal	r5, r6, r4, lr
   244d0:	f840 5b04 	str.w	r5, [r0], #4
   244d4:	f851 eb04 	ldr.w	lr, [r1], #4
   244d8:	fbe4 676e 	umaal	r6, r7, r4, lr
   244dc:	f840 6b04 	str.w	r6, [r0], #4
   244e0:	f851 eb04 	ldr.w	lr, [r1], #4
   244e4:	fbe4 786e 	umaal	r7, r8, r4, lr
   244e8:	f840 7b04 	str.w	r7, [r0], #4
   244ec:	f851 eb04 	ldr.w	lr, [r1], #4
   244f0:	fbe4 896e 	umaal	r8, r9, r4, lr
   244f4:	f840 8b04 	str.w	r8, [r0], #4
   244f8:	f851 eb04 	ldr.w	lr, [r1], #4
   244fc:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   24500:	f840 9b04 	str.w	r9, [r0], #4
   24504:	f851 eb04 	ldr.w	lr, [r1], #4
   24508:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   2450c:	f840 ab04 	str.w	sl, [r0], #4
   24510:	f851 eb04 	ldr.w	lr, [r1], #4
   24514:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   24518:	e8a0 1800 	stmia.w	r0!, {fp, ip}
   2451c:	bc08      	pop	{r3}
   2451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24522:	bf00      	nop
	...

00024530 <uECC_vli_modAdd>:
   24530:	b5f0      	push	{r4, r5, r6, r7, lr}
   24532:	f99d c014 	ldrsb.w	ip, [sp, #20]
   24536:	f1cc 0408 	rsb	r4, ip, #8
   2453a:	00e4      	lsls	r4, r4, #3
   2453c:	3401      	adds	r4, #1
   2453e:	469e      	mov	lr, r3
   24540:	4623      	mov	r3, r4
   24542:	4604      	mov	r4, r0
   24544:	2700      	movs	r7, #0
   24546:	a505      	add	r5, pc, #20	; (adr r5, 2455c <uECC_vli_modAdd+0x2c>)
   24548:	f3af 8000 	nop.w
   2454c:	f3af 8000 	nop.w
   24550:	195b      	adds	r3, r3, r5
   24552:	c920      	ldmia	r1!, {r5}
   24554:	ca40      	ldmia	r2!, {r6}
   24556:	19ad      	adds	r5, r5, r6
   24558:	c420      	stmia	r4!, {r5}
   2455a:	4718      	bx	r3
   2455c:	c920      	ldmia	r1!, {r5}
   2455e:	ca40      	ldmia	r2!, {r6}
   24560:	4175      	adcs	r5, r6
   24562:	c420      	stmia	r4!, {r5}
   24564:	c920      	ldmia	r1!, {r5}
   24566:	ca40      	ldmia	r2!, {r6}
   24568:	4175      	adcs	r5, r6
   2456a:	c420      	stmia	r4!, {r5}
   2456c:	c920      	ldmia	r1!, {r5}
   2456e:	ca40      	ldmia	r2!, {r6}
   24570:	4175      	adcs	r5, r6
   24572:	c420      	stmia	r4!, {r5}
   24574:	c920      	ldmia	r1!, {r5}
   24576:	ca40      	ldmia	r2!, {r6}
   24578:	4175      	adcs	r5, r6
   2457a:	c420      	stmia	r4!, {r5}
   2457c:	c920      	ldmia	r1!, {r5}
   2457e:	ca40      	ldmia	r2!, {r6}
   24580:	4175      	adcs	r5, r6
   24582:	c420      	stmia	r4!, {r5}
   24584:	c920      	ldmia	r1!, {r5}
   24586:	ca40      	ldmia	r2!, {r6}
   24588:	4175      	adcs	r5, r6
   2458a:	c420      	stmia	r4!, {r5}
   2458c:	c920      	ldmia	r1!, {r5}
   2458e:	ca40      	ldmia	r2!, {r6}
   24590:	4175      	adcs	r5, r6
   24592:	c420      	stmia	r4!, {r5}
   24594:	417f      	adcs	r7, r7
   24596:	b9c7      	cbnz	r7, 245ca <uECC_vli_modAdd+0x9a>
   24598:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   2459c:	b25b      	sxtb	r3, r3
   2459e:	2b00      	cmp	r3, #0
   245a0:	db13      	blt.n	245ca <uECC_vli_modAdd+0x9a>
   245a2:	b21a      	sxth	r2, r3
   245a4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   245a8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   245ac:	4291      	cmp	r1, r2
   245ae:	d80b      	bhi.n	245c8 <uECC_vli_modAdd+0x98>
   245b0:	d30b      	bcc.n	245ca <uECC_vli_modAdd+0x9a>
   245b2:	3b01      	subs	r3, #1
   245b4:	b25b      	sxtb	r3, r3
   245b6:	1c59      	adds	r1, r3, #1
   245b8:	b21a      	sxth	r2, r3
   245ba:	d006      	beq.n	245ca <uECC_vli_modAdd+0x9a>
   245bc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   245c0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   245c4:	4291      	cmp	r1, r2
   245c6:	d9f3      	bls.n	245b0 <uECC_vli_modAdd+0x80>
   245c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   245ca:	4672      	mov	r2, lr
   245cc:	4663      	mov	r3, ip
   245ce:	4601      	mov	r1, r0
   245d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   245d4:	f7ff bdec 	b.w	241b0 <uECC_vli_sub>
	...

000245e0 <uECC_vli_modSub>:
   245e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   245e2:	f99d 4014 	ldrsb.w	r4, [sp, #20]
   245e6:	f1c4 0408 	rsb	r4, r4, #8
   245ea:	00e4      	lsls	r4, r4, #3
   245ec:	1c66      	adds	r6, r4, #1
   245ee:	4686      	mov	lr, r0
   245f0:	469c      	mov	ip, r3
   245f2:	4635      	mov	r5, r6
   245f4:	4604      	mov	r4, r0
   245f6:	2700      	movs	r7, #0
   245f8:	a304      	add	r3, pc, #16	; (adr r3, 2460c <uECC_vli_modSub+0x2c>)
   245fa:	bf00      	nop
   245fc:	f3af 8000 	nop.w
   24600:	18ed      	adds	r5, r5, r3
   24602:	c908      	ldmia	r1!, {r3}
   24604:	ca01      	ldmia	r2!, {r0}
   24606:	1a1b      	subs	r3, r3, r0
   24608:	c408      	stmia	r4!, {r3}
   2460a:	4728      	bx	r5
   2460c:	c908      	ldmia	r1!, {r3}
   2460e:	ca01      	ldmia	r2!, {r0}
   24610:	4183      	sbcs	r3, r0
   24612:	c408      	stmia	r4!, {r3}
   24614:	c908      	ldmia	r1!, {r3}
   24616:	ca01      	ldmia	r2!, {r0}
   24618:	4183      	sbcs	r3, r0
   2461a:	c408      	stmia	r4!, {r3}
   2461c:	c908      	ldmia	r1!, {r3}
   2461e:	ca01      	ldmia	r2!, {r0}
   24620:	4183      	sbcs	r3, r0
   24622:	c408      	stmia	r4!, {r3}
   24624:	c908      	ldmia	r1!, {r3}
   24626:	ca01      	ldmia	r2!, {r0}
   24628:	4183      	sbcs	r3, r0
   2462a:	c408      	stmia	r4!, {r3}
   2462c:	c908      	ldmia	r1!, {r3}
   2462e:	ca01      	ldmia	r2!, {r0}
   24630:	4183      	sbcs	r3, r0
   24632:	c408      	stmia	r4!, {r3}
   24634:	c908      	ldmia	r1!, {r3}
   24636:	ca01      	ldmia	r2!, {r0}
   24638:	4183      	sbcs	r3, r0
   2463a:	c408      	stmia	r4!, {r3}
   2463c:	c908      	ldmia	r1!, {r3}
   2463e:	ca01      	ldmia	r2!, {r0}
   24640:	4183      	sbcs	r3, r0
   24642:	c408      	stmia	r4!, {r3}
   24644:	417f      	adcs	r7, r7
   24646:	2f00      	cmp	r7, #0
   24648:	d12d      	bne.n	246a6 <uECC_vli_modSub+0xc6>
   2464a:	4670      	mov	r0, lr
   2464c:	4663      	mov	r3, ip
   2464e:	4634      	mov	r4, r6
   24650:	4672      	mov	r2, lr
   24652:	2100      	movs	r1, #0
   24654:	a505      	add	r5, pc, #20	; (adr r5, 2466c <uECC_vli_modSub+0x8c>)
   24656:	bf00      	nop
   24658:	f3af 8000 	nop.w
   2465c:	f3af 8000 	nop.w
   24660:	1964      	adds	r4, r4, r5
   24662:	ca20      	ldmia	r2!, {r5}
   24664:	cb40      	ldmia	r3!, {r6}
   24666:	19ad      	adds	r5, r5, r6
   24668:	c020      	stmia	r0!, {r5}
   2466a:	4720      	bx	r4
   2466c:	ca20      	ldmia	r2!, {r5}
   2466e:	cb40      	ldmia	r3!, {r6}
   24670:	4175      	adcs	r5, r6
   24672:	c020      	stmia	r0!, {r5}
   24674:	ca20      	ldmia	r2!, {r5}
   24676:	cb40      	ldmia	r3!, {r6}
   24678:	4175      	adcs	r5, r6
   2467a:	c020      	stmia	r0!, {r5}
   2467c:	ca20      	ldmia	r2!, {r5}
   2467e:	cb40      	ldmia	r3!, {r6}
   24680:	4175      	adcs	r5, r6
   24682:	c020      	stmia	r0!, {r5}
   24684:	ca20      	ldmia	r2!, {r5}
   24686:	cb40      	ldmia	r3!, {r6}
   24688:	4175      	adcs	r5, r6
   2468a:	c020      	stmia	r0!, {r5}
   2468c:	ca20      	ldmia	r2!, {r5}
   2468e:	cb40      	ldmia	r3!, {r6}
   24690:	4175      	adcs	r5, r6
   24692:	c020      	stmia	r0!, {r5}
   24694:	ca20      	ldmia	r2!, {r5}
   24696:	cb40      	ldmia	r3!, {r6}
   24698:	4175      	adcs	r5, r6
   2469a:	c020      	stmia	r0!, {r5}
   2469c:	ca20      	ldmia	r2!, {r5}
   2469e:	cb40      	ldmia	r3!, {r6}
   246a0:	4175      	adcs	r5, r6
   246a2:	c020      	stmia	r0!, {r5}
   246a4:	4149      	adcs	r1, r1
   246a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000246b0 <x_side_default>:
   246b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246b4:	4693      	mov	fp, r2
   246b6:	b09b      	sub	sp, #108	; 0x6c
   246b8:	4604      	mov	r4, r0
   246ba:	4689      	mov	r9, r1
   246bc:	a802      	add	r0, sp, #8
   246be:	2220      	movs	r2, #32
   246c0:	2100      	movs	r1, #0
   246c2:	f7e7 fe4b 	bl	c35c <memset>
   246c6:	f99b 3000 	ldrsb.w	r3, [fp]
   246ca:	9301      	str	r3, [sp, #4]
   246cc:	464a      	mov	r2, r9
   246ce:	4649      	mov	r1, r9
   246d0:	a80a      	add	r0, sp, #40	; 0x28
   246d2:	2503      	movs	r5, #3
   246d4:	461e      	mov	r6, r3
   246d6:	9502      	str	r5, [sp, #8]
   246d8:	f7ff fd9a 	bl	24210 <uECC_vli_mult>
   246dc:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   246e0:	a90a      	add	r1, sp, #40	; 0x28
   246e2:	4620      	mov	r0, r4
   246e4:	4798      	blx	r3
   246e6:	f1c6 0108 	rsb	r1, r6, #8
   246ea:	40a9      	lsls	r1, r5
   246ec:	f101 0801 	add.w	r8, r1, #1
   246f0:	aa02      	add	r2, sp, #8
   246f2:	4641      	mov	r1, r8
   246f4:	f10b 0a04 	add.w	sl, fp, #4
   246f8:	4623      	mov	r3, r4
   246fa:	4626      	mov	r6, r4
   246fc:	2000      	movs	r0, #0
   246fe:	a703      	add	r7, pc, #12	; (adr r7, 2470c <x_side_default+0x5c>)
   24700:	19c9      	adds	r1, r1, r7
   24702:	ce80      	ldmia	r6!, {r7}
   24704:	ca20      	ldmia	r2!, {r5}
   24706:	1b7f      	subs	r7, r7, r5
   24708:	c380      	stmia	r3!, {r7}
   2470a:	4708      	bx	r1
   2470c:	ce80      	ldmia	r6!, {r7}
   2470e:	ca20      	ldmia	r2!, {r5}
   24710:	41af      	sbcs	r7, r5
   24712:	c380      	stmia	r3!, {r7}
   24714:	ce80      	ldmia	r6!, {r7}
   24716:	ca20      	ldmia	r2!, {r5}
   24718:	41af      	sbcs	r7, r5
   2471a:	c380      	stmia	r3!, {r7}
   2471c:	ce80      	ldmia	r6!, {r7}
   2471e:	ca20      	ldmia	r2!, {r5}
   24720:	41af      	sbcs	r7, r5
   24722:	c380      	stmia	r3!, {r7}
   24724:	ce80      	ldmia	r6!, {r7}
   24726:	ca20      	ldmia	r2!, {r5}
   24728:	41af      	sbcs	r7, r5
   2472a:	c380      	stmia	r3!, {r7}
   2472c:	ce80      	ldmia	r6!, {r7}
   2472e:	ca20      	ldmia	r2!, {r5}
   24730:	41af      	sbcs	r7, r5
   24732:	c380      	stmia	r3!, {r7}
   24734:	ce80      	ldmia	r6!, {r7}
   24736:	ca20      	ldmia	r2!, {r5}
   24738:	41af      	sbcs	r7, r5
   2473a:	c380      	stmia	r3!, {r7}
   2473c:	ce80      	ldmia	r6!, {r7}
   2473e:	ca20      	ldmia	r2!, {r5}
   24740:	41af      	sbcs	r7, r5
   24742:	c380      	stmia	r3!, {r7}
   24744:	4140      	adcs	r0, r0
   24746:	2800      	cmp	r0, #0
   24748:	d12d      	bne.n	247a6 <x_side_default+0xf6>
   2474a:	4623      	mov	r3, r4
   2474c:	4652      	mov	r2, sl
   2474e:	4641      	mov	r1, r8
   24750:	4620      	mov	r0, r4
   24752:	2500      	movs	r5, #0
   24754:	a605      	add	r6, pc, #20	; (adr r6, 2476c <x_side_default+0xbc>)
   24756:	bf00      	nop
   24758:	f3af 8000 	nop.w
   2475c:	f3af 8000 	nop.w
   24760:	1989      	adds	r1, r1, r6
   24762:	c840      	ldmia	r0!, {r6}
   24764:	ca80      	ldmia	r2!, {r7}
   24766:	19f6      	adds	r6, r6, r7
   24768:	c340      	stmia	r3!, {r6}
   2476a:	4708      	bx	r1
   2476c:	c840      	ldmia	r0!, {r6}
   2476e:	ca80      	ldmia	r2!, {r7}
   24770:	417e      	adcs	r6, r7
   24772:	c340      	stmia	r3!, {r6}
   24774:	c840      	ldmia	r0!, {r6}
   24776:	ca80      	ldmia	r2!, {r7}
   24778:	417e      	adcs	r6, r7
   2477a:	c340      	stmia	r3!, {r6}
   2477c:	c840      	ldmia	r0!, {r6}
   2477e:	ca80      	ldmia	r2!, {r7}
   24780:	417e      	adcs	r6, r7
   24782:	c340      	stmia	r3!, {r6}
   24784:	c840      	ldmia	r0!, {r6}
   24786:	ca80      	ldmia	r2!, {r7}
   24788:	417e      	adcs	r6, r7
   2478a:	c340      	stmia	r3!, {r6}
   2478c:	c840      	ldmia	r0!, {r6}
   2478e:	ca80      	ldmia	r2!, {r7}
   24790:	417e      	adcs	r6, r7
   24792:	c340      	stmia	r3!, {r6}
   24794:	c840      	ldmia	r0!, {r6}
   24796:	ca80      	ldmia	r2!, {r7}
   24798:	417e      	adcs	r6, r7
   2479a:	c340      	stmia	r3!, {r6}
   2479c:	c840      	ldmia	r0!, {r6}
   2479e:	ca80      	ldmia	r2!, {r7}
   247a0:	417e      	adcs	r6, r7
   247a2:	c340      	stmia	r3!, {r6}
   247a4:	416d      	adcs	r5, r5
   247a6:	464a      	mov	r2, r9
   247a8:	f99b 3000 	ldrsb.w	r3, [fp]
   247ac:	4621      	mov	r1, r4
   247ae:	a80a      	add	r0, sp, #40	; 0x28
   247b0:	f7ff fd2e 	bl	24210 <uECC_vli_mult>
   247b4:	a90a      	add	r1, sp, #40	; 0x28
   247b6:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   247ba:	4620      	mov	r0, r4
   247bc:	4798      	blx	r3
   247be:	4626      	mov	r6, r4
   247c0:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   247c4:	4641      	mov	r1, r8
   247c6:	4622      	mov	r2, r4
   247c8:	2000      	movs	r0, #0
   247ca:	a504      	add	r5, pc, #16	; (adr r5, 247dc <x_side_default+0x12c>)
   247cc:	f3af 8000 	nop.w
   247d0:	1949      	adds	r1, r1, r5
   247d2:	ce20      	ldmia	r6!, {r5}
   247d4:	cb80      	ldmia	r3!, {r7}
   247d6:	19ed      	adds	r5, r5, r7
   247d8:	c220      	stmia	r2!, {r5}
   247da:	4708      	bx	r1
   247dc:	ce20      	ldmia	r6!, {r5}
   247de:	cb80      	ldmia	r3!, {r7}
   247e0:	417d      	adcs	r5, r7
   247e2:	c220      	stmia	r2!, {r5}
   247e4:	ce20      	ldmia	r6!, {r5}
   247e6:	cb80      	ldmia	r3!, {r7}
   247e8:	417d      	adcs	r5, r7
   247ea:	c220      	stmia	r2!, {r5}
   247ec:	ce20      	ldmia	r6!, {r5}
   247ee:	cb80      	ldmia	r3!, {r7}
   247f0:	417d      	adcs	r5, r7
   247f2:	c220      	stmia	r2!, {r5}
   247f4:	ce20      	ldmia	r6!, {r5}
   247f6:	cb80      	ldmia	r3!, {r7}
   247f8:	417d      	adcs	r5, r7
   247fa:	c220      	stmia	r2!, {r5}
   247fc:	ce20      	ldmia	r6!, {r5}
   247fe:	cb80      	ldmia	r3!, {r7}
   24800:	417d      	adcs	r5, r7
   24802:	c220      	stmia	r2!, {r5}
   24804:	ce20      	ldmia	r6!, {r5}
   24806:	cb80      	ldmia	r3!, {r7}
   24808:	417d      	adcs	r5, r7
   2480a:	c220      	stmia	r2!, {r5}
   2480c:	ce20      	ldmia	r6!, {r5}
   2480e:	cb80      	ldmia	r3!, {r7}
   24810:	417d      	adcs	r5, r7
   24812:	c220      	stmia	r2!, {r5}
   24814:	4140      	adcs	r0, r0
   24816:	b9d0      	cbnz	r0, 2484e <x_side_default+0x19e>
   24818:	9b01      	ldr	r3, [sp, #4]
   2481a:	3b01      	subs	r3, #1
   2481c:	b25b      	sxtb	r3, r3
   2481e:	2b00      	cmp	r3, #0
   24820:	db15      	blt.n	2484e <x_side_default+0x19e>
   24822:	b21a      	sxth	r2, r3
   24824:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   24828:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2482c:	4291      	cmp	r1, r2
   2482e:	d80b      	bhi.n	24848 <x_side_default+0x198>
   24830:	d30d      	bcc.n	2484e <x_side_default+0x19e>
   24832:	3b01      	subs	r3, #1
   24834:	b25b      	sxtb	r3, r3
   24836:	1c59      	adds	r1, r3, #1
   24838:	b21a      	sxth	r2, r3
   2483a:	d008      	beq.n	2484e <x_side_default+0x19e>
   2483c:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   24840:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   24844:	4291      	cmp	r1, r2
   24846:	d9f3      	bls.n	24830 <x_side_default+0x180>
   24848:	b01b      	add	sp, #108	; 0x6c
   2484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2484e:	9b01      	ldr	r3, [sp, #4]
   24850:	4652      	mov	r2, sl
   24852:	4621      	mov	r1, r4
   24854:	4620      	mov	r0, r4
   24856:	f7ff fcab 	bl	241b0 <uECC_vli_sub>
   2485a:	b01b      	add	sp, #108	; 0x6c
   2485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024860 <vli_mmod_fast_secp256r1>:
   24860:	680b      	ldr	r3, [r1, #0]
   24862:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24866:	6003      	str	r3, [r0, #0]
   24868:	684b      	ldr	r3, [r1, #4]
   2486a:	6043      	str	r3, [r0, #4]
   2486c:	688b      	ldr	r3, [r1, #8]
   2486e:	6083      	str	r3, [r0, #8]
   24870:	68cb      	ldr	r3, [r1, #12]
   24872:	60c3      	str	r3, [r0, #12]
   24874:	690b      	ldr	r3, [r1, #16]
   24876:	6103      	str	r3, [r0, #16]
   24878:	694b      	ldr	r3, [r1, #20]
   2487a:	6143      	str	r3, [r0, #20]
   2487c:	698b      	ldr	r3, [r1, #24]
   2487e:	6183      	str	r3, [r0, #24]
   24880:	69cb      	ldr	r3, [r1, #28]
   24882:	61c3      	str	r3, [r0, #28]
   24884:	b08d      	sub	sp, #52	; 0x34
   24886:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   24888:	6b0f      	ldr	r7, [r1, #48]	; 0x30
   2488a:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   2488c:	6b8d      	ldr	r5, [r1, #56]	; 0x38
   2488e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   24890:	940b      	str	r4, [sp, #44]	; 0x2c
   24892:	f04f 0a00 	mov.w	sl, #0
   24896:	ac04      	add	r4, sp, #16
   24898:	9708      	str	r7, [sp, #32]
   2489a:	9609      	str	r6, [sp, #36]	; 0x24
   2489c:	950a      	str	r5, [sp, #40]	; 0x28
   2489e:	4681      	mov	r9, r0
   248a0:	9307      	str	r3, [sp, #28]
   248a2:	f8cd a018 	str.w	sl, [sp, #24]
   248a6:	f8cd a014 	str.w	sl, [sp, #20]
   248aa:	f8cd a010 	str.w	sl, [sp, #16]
   248ae:	2501      	movs	r5, #1
   248b0:	4626      	mov	r6, r4
   248b2:	4627      	mov	r7, r4
   248b4:	2300      	movs	r3, #0
   248b6:	a205      	add	r2, pc, #20	; (adr r2, 248cc <vli_mmod_fast_secp256r1+0x6c>)
   248b8:	f3af 8000 	nop.w
   248bc:	f3af 8000 	nop.w
   248c0:	18ad      	adds	r5, r5, r2
   248c2:	ce04      	ldmia	r6!, {r2}
   248c4:	cf01      	ldmia	r7!, {r0}
   248c6:	1812      	adds	r2, r2, r0
   248c8:	c404      	stmia	r4!, {r2}
   248ca:	4728      	bx	r5
   248cc:	ce04      	ldmia	r6!, {r2}
   248ce:	cf01      	ldmia	r7!, {r0}
   248d0:	4142      	adcs	r2, r0
   248d2:	c404      	stmia	r4!, {r2}
   248d4:	ce04      	ldmia	r6!, {r2}
   248d6:	cf01      	ldmia	r7!, {r0}
   248d8:	4142      	adcs	r2, r0
   248da:	c404      	stmia	r4!, {r2}
   248dc:	ce04      	ldmia	r6!, {r2}
   248de:	cf01      	ldmia	r7!, {r0}
   248e0:	4142      	adcs	r2, r0
   248e2:	c404      	stmia	r4!, {r2}
   248e4:	ce04      	ldmia	r6!, {r2}
   248e6:	cf01      	ldmia	r7!, {r0}
   248e8:	4142      	adcs	r2, r0
   248ea:	c404      	stmia	r4!, {r2}
   248ec:	ce04      	ldmia	r6!, {r2}
   248ee:	cf01      	ldmia	r7!, {r0}
   248f0:	4142      	adcs	r2, r0
   248f2:	c404      	stmia	r4!, {r2}
   248f4:	ce04      	ldmia	r6!, {r2}
   248f6:	cf01      	ldmia	r7!, {r0}
   248f8:	4142      	adcs	r2, r0
   248fa:	c404      	stmia	r4!, {r2}
   248fc:	ce04      	ldmia	r6!, {r2}
   248fe:	cf01      	ldmia	r7!, {r0}
   24900:	4142      	adcs	r2, r0
   24902:	c404      	stmia	r4!, {r2}
   24904:	415b      	adcs	r3, r3
   24906:	2601      	movs	r6, #1
   24908:	9300      	str	r3, [sp, #0]
   2490a:	464c      	mov	r4, r9
   2490c:	ad04      	add	r5, sp, #16
   2490e:	464f      	mov	r7, r9
   24910:	2300      	movs	r3, #0
   24912:	a206      	add	r2, pc, #24	; (adr r2, 2492c <vli_mmod_fast_secp256r1+0xcc>)
   24914:	f3af 8000 	nop.w
   24918:	f3af 8000 	nop.w
   2491c:	f3af 8000 	nop.w
   24920:	18b6      	adds	r6, r6, r2
   24922:	cf04      	ldmia	r7!, {r2}
   24924:	cd01      	ldmia	r5!, {r0}
   24926:	1812      	adds	r2, r2, r0
   24928:	c404      	stmia	r4!, {r2}
   2492a:	4730      	bx	r6
   2492c:	cf04      	ldmia	r7!, {r2}
   2492e:	cd01      	ldmia	r5!, {r0}
   24930:	4142      	adcs	r2, r0
   24932:	c404      	stmia	r4!, {r2}
   24934:	cf04      	ldmia	r7!, {r2}
   24936:	cd01      	ldmia	r5!, {r0}
   24938:	4142      	adcs	r2, r0
   2493a:	c404      	stmia	r4!, {r2}
   2493c:	cf04      	ldmia	r7!, {r2}
   2493e:	cd01      	ldmia	r5!, {r0}
   24940:	4142      	adcs	r2, r0
   24942:	c404      	stmia	r4!, {r2}
   24944:	cf04      	ldmia	r7!, {r2}
   24946:	cd01      	ldmia	r5!, {r0}
   24948:	4142      	adcs	r2, r0
   2494a:	c404      	stmia	r4!, {r2}
   2494c:	cf04      	ldmia	r7!, {r2}
   2494e:	cd01      	ldmia	r5!, {r0}
   24950:	4142      	adcs	r2, r0
   24952:	c404      	stmia	r4!, {r2}
   24954:	cf04      	ldmia	r7!, {r2}
   24956:	cd01      	ldmia	r5!, {r0}
   24958:	4142      	adcs	r2, r0
   2495a:	c404      	stmia	r4!, {r2}
   2495c:	cf04      	ldmia	r7!, {r2}
   2495e:	cd01      	ldmia	r5!, {r0}
   24960:	4142      	adcs	r2, r0
   24962:	c404      	stmia	r4!, {r2}
   24964:	415b      	adcs	r3, r3
   24966:	f101 0434 	add.w	r4, r1, #52	; 0x34
   2496a:	ccd0      	ldmia	r4, {r4, r6, r7}
   2496c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
   2496e:	9408      	str	r4, [sp, #32]
   24970:	ac04      	add	r4, sp, #16
   24972:	9507      	str	r5, [sp, #28]
   24974:	9609      	str	r6, [sp, #36]	; 0x24
   24976:	970a      	str	r7, [sp, #40]	; 0x28
   24978:	4698      	mov	r8, r3
   2497a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   2497e:	2501      	movs	r5, #1
   24980:	4626      	mov	r6, r4
   24982:	4627      	mov	r7, r4
   24984:	2300      	movs	r3, #0
   24986:	a205      	add	r2, pc, #20	; (adr r2, 2499c <vli_mmod_fast_secp256r1+0x13c>)
   24988:	f3af 8000 	nop.w
   2498c:	f3af 8000 	nop.w
   24990:	18ad      	adds	r5, r5, r2
   24992:	ce04      	ldmia	r6!, {r2}
   24994:	cf01      	ldmia	r7!, {r0}
   24996:	1812      	adds	r2, r2, r0
   24998:	c404      	stmia	r4!, {r2}
   2499a:	4728      	bx	r5
   2499c:	ce04      	ldmia	r6!, {r2}
   2499e:	cf01      	ldmia	r7!, {r0}
   249a0:	4142      	adcs	r2, r0
   249a2:	c404      	stmia	r4!, {r2}
   249a4:	ce04      	ldmia	r6!, {r2}
   249a6:	cf01      	ldmia	r7!, {r0}
   249a8:	4142      	adcs	r2, r0
   249aa:	c404      	stmia	r4!, {r2}
   249ac:	ce04      	ldmia	r6!, {r2}
   249ae:	cf01      	ldmia	r7!, {r0}
   249b0:	4142      	adcs	r2, r0
   249b2:	c404      	stmia	r4!, {r2}
   249b4:	ce04      	ldmia	r6!, {r2}
   249b6:	cf01      	ldmia	r7!, {r0}
   249b8:	4142      	adcs	r2, r0
   249ba:	c404      	stmia	r4!, {r2}
   249bc:	ce04      	ldmia	r6!, {r2}
   249be:	cf01      	ldmia	r7!, {r0}
   249c0:	4142      	adcs	r2, r0
   249c2:	c404      	stmia	r4!, {r2}
   249c4:	ce04      	ldmia	r6!, {r2}
   249c6:	cf01      	ldmia	r7!, {r0}
   249c8:	4142      	adcs	r2, r0
   249ca:	c404      	stmia	r4!, {r2}
   249cc:	ce04      	ldmia	r6!, {r2}
   249ce:	cf01      	ldmia	r7!, {r0}
   249d0:	4142      	adcs	r2, r0
   249d2:	c404      	stmia	r4!, {r2}
   249d4:	415b      	adcs	r3, r3
   249d6:	2601      	movs	r6, #1
   249d8:	9301      	str	r3, [sp, #4]
   249da:	464c      	mov	r4, r9
   249dc:	ad04      	add	r5, sp, #16
   249de:	464f      	mov	r7, r9
   249e0:	2300      	movs	r3, #0
   249e2:	a206      	add	r2, pc, #24	; (adr r2, 249fc <vli_mmod_fast_secp256r1+0x19c>)
   249e4:	f3af 8000 	nop.w
   249e8:	f3af 8000 	nop.w
   249ec:	f3af 8000 	nop.w
   249f0:	18b6      	adds	r6, r6, r2
   249f2:	cf04      	ldmia	r7!, {r2}
   249f4:	cd01      	ldmia	r5!, {r0}
   249f6:	1812      	adds	r2, r2, r0
   249f8:	c404      	stmia	r4!, {r2}
   249fa:	4730      	bx	r6
   249fc:	cf04      	ldmia	r7!, {r2}
   249fe:	cd01      	ldmia	r5!, {r0}
   24a00:	4142      	adcs	r2, r0
   24a02:	c404      	stmia	r4!, {r2}
   24a04:	cf04      	ldmia	r7!, {r2}
   24a06:	cd01      	ldmia	r5!, {r0}
   24a08:	4142      	adcs	r2, r0
   24a0a:	c404      	stmia	r4!, {r2}
   24a0c:	cf04      	ldmia	r7!, {r2}
   24a0e:	cd01      	ldmia	r5!, {r0}
   24a10:	4142      	adcs	r2, r0
   24a12:	c404      	stmia	r4!, {r2}
   24a14:	cf04      	ldmia	r7!, {r2}
   24a16:	cd01      	ldmia	r5!, {r0}
   24a18:	4142      	adcs	r2, r0
   24a1a:	c404      	stmia	r4!, {r2}
   24a1c:	cf04      	ldmia	r7!, {r2}
   24a1e:	cd01      	ldmia	r5!, {r0}
   24a20:	4142      	adcs	r2, r0
   24a22:	c404      	stmia	r4!, {r2}
   24a24:	cf04      	ldmia	r7!, {r2}
   24a26:	cd01      	ldmia	r5!, {r0}
   24a28:	4142      	adcs	r2, r0
   24a2a:	c404      	stmia	r4!, {r2}
   24a2c:	cf04      	ldmia	r7!, {r2}
   24a2e:	cd01      	ldmia	r5!, {r0}
   24a30:	4142      	adcs	r2, r0
   24a32:	c404      	stmia	r4!, {r2}
   24a34:	415b      	adcs	r3, r3
   24a36:	f101 0420 	add.w	r4, r1, #32
   24a3a:	cc70      	ldmia	r4, {r4, r5, r6}
   24a3c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   24a3e:	9404      	str	r4, [sp, #16]
   24a40:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   24a42:	9505      	str	r5, [sp, #20]
   24a44:	9606      	str	r6, [sp, #24]
   24a46:	970a      	str	r7, [sp, #40]	; 0x28
   24a48:	940b      	str	r4, [sp, #44]	; 0x2c
   24a4a:	9302      	str	r3, [sp, #8]
   24a4c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   24a50:	f8cd a020 	str.w	sl, [sp, #32]
   24a54:	f8cd a01c 	str.w	sl, [sp, #28]
   24a58:	464c      	mov	r4, r9
   24a5a:	ad04      	add	r5, sp, #16
   24a5c:	2601      	movs	r6, #1
   24a5e:	464f      	mov	r7, r9
   24a60:	2300      	movs	r3, #0
   24a62:	a206      	add	r2, pc, #24	; (adr r2, 24a7c <vli_mmod_fast_secp256r1+0x21c>)
   24a64:	f3af 8000 	nop.w
   24a68:	f3af 8000 	nop.w
   24a6c:	f3af 8000 	nop.w
   24a70:	18b6      	adds	r6, r6, r2
   24a72:	cf04      	ldmia	r7!, {r2}
   24a74:	cd01      	ldmia	r5!, {r0}
   24a76:	1812      	adds	r2, r2, r0
   24a78:	c404      	stmia	r4!, {r2}
   24a7a:	4730      	bx	r6
   24a7c:	cf04      	ldmia	r7!, {r2}
   24a7e:	cd01      	ldmia	r5!, {r0}
   24a80:	4142      	adcs	r2, r0
   24a82:	c404      	stmia	r4!, {r2}
   24a84:	cf04      	ldmia	r7!, {r2}
   24a86:	cd01      	ldmia	r5!, {r0}
   24a88:	4142      	adcs	r2, r0
   24a8a:	c404      	stmia	r4!, {r2}
   24a8c:	cf04      	ldmia	r7!, {r2}
   24a8e:	cd01      	ldmia	r5!, {r0}
   24a90:	4142      	adcs	r2, r0
   24a92:	c404      	stmia	r4!, {r2}
   24a94:	cf04      	ldmia	r7!, {r2}
   24a96:	cd01      	ldmia	r5!, {r0}
   24a98:	4142      	adcs	r2, r0
   24a9a:	c404      	stmia	r4!, {r2}
   24a9c:	cf04      	ldmia	r7!, {r2}
   24a9e:	cd01      	ldmia	r5!, {r0}
   24aa0:	4142      	adcs	r2, r0
   24aa2:	c404      	stmia	r4!, {r2}
   24aa4:	cf04      	ldmia	r7!, {r2}
   24aa6:	cd01      	ldmia	r5!, {r0}
   24aa8:	4142      	adcs	r2, r0
   24aaa:	c404      	stmia	r4!, {r2}
   24aac:	cf04      	ldmia	r7!, {r2}
   24aae:	cd01      	ldmia	r5!, {r0}
   24ab0:	4142      	adcs	r2, r0
   24ab2:	c404      	stmia	r4!, {r2}
   24ab4:	415b      	adcs	r3, r3
   24ab6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   24ab8:	9505      	str	r5, [sp, #20]
   24aba:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   24abc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   24abe:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   24ac0:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   24ac2:	9303      	str	r3, [sp, #12]
   24ac4:	9509      	str	r5, [sp, #36]	; 0x24
   24ac6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   24ac8:	6a0d      	ldr	r5, [r1, #32]
   24aca:	9606      	str	r6, [sp, #24]
   24acc:	9708      	str	r7, [sp, #32]
   24ace:	950b      	str	r5, [sp, #44]	; 0x2c
   24ad0:	9407      	str	r4, [sp, #28]
   24ad2:	940a      	str	r4, [sp, #40]	; 0x28
   24ad4:	9304      	str	r3, [sp, #16]
   24ad6:	464c      	mov	r4, r9
   24ad8:	ad04      	add	r5, sp, #16
   24ada:	2601      	movs	r6, #1
   24adc:	464f      	mov	r7, r9
   24ade:	2300      	movs	r3, #0
   24ae0:	a206      	add	r2, pc, #24	; (adr r2, 24afc <vli_mmod_fast_secp256r1+0x29c>)
   24ae2:	bf00      	nop
   24ae4:	f3af 8000 	nop.w
   24ae8:	f3af 8000 	nop.w
   24aec:	f3af 8000 	nop.w
   24af0:	18b6      	adds	r6, r6, r2
   24af2:	cf04      	ldmia	r7!, {r2}
   24af4:	cd01      	ldmia	r5!, {r0}
   24af6:	1812      	adds	r2, r2, r0
   24af8:	c404      	stmia	r4!, {r2}
   24afa:	4730      	bx	r6
   24afc:	cf04      	ldmia	r7!, {r2}
   24afe:	cd01      	ldmia	r5!, {r0}
   24b00:	4142      	adcs	r2, r0
   24b02:	c404      	stmia	r4!, {r2}
   24b04:	cf04      	ldmia	r7!, {r2}
   24b06:	cd01      	ldmia	r5!, {r0}
   24b08:	4142      	adcs	r2, r0
   24b0a:	c404      	stmia	r4!, {r2}
   24b0c:	cf04      	ldmia	r7!, {r2}
   24b0e:	cd01      	ldmia	r5!, {r0}
   24b10:	4142      	adcs	r2, r0
   24b12:	c404      	stmia	r4!, {r2}
   24b14:	cf04      	ldmia	r7!, {r2}
   24b16:	cd01      	ldmia	r5!, {r0}
   24b18:	4142      	adcs	r2, r0
   24b1a:	c404      	stmia	r4!, {r2}
   24b1c:	cf04      	ldmia	r7!, {r2}
   24b1e:	cd01      	ldmia	r5!, {r0}
   24b20:	4142      	adcs	r2, r0
   24b22:	c404      	stmia	r4!, {r2}
   24b24:	cf04      	ldmia	r7!, {r2}
   24b26:	cd01      	ldmia	r5!, {r0}
   24b28:	4142      	adcs	r2, r0
   24b2a:	c404      	stmia	r4!, {r2}
   24b2c:	cf04      	ldmia	r7!, {r2}
   24b2e:	cd01      	ldmia	r5!, {r0}
   24b30:	4142      	adcs	r2, r0
   24b32:	c404      	stmia	r4!, {r2}
   24b34:	415b      	adcs	r3, r3
   24b36:	f101 042c 	add.w	r4, r1, #44	; 0x2c
   24b3a:	cc70      	ldmia	r4, {r4, r5, r6}
   24b3c:	6a0f      	ldr	r7, [r1, #32]
   24b3e:	9404      	str	r4, [sp, #16]
   24b40:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   24b42:	9505      	str	r5, [sp, #20]
   24b44:	9606      	str	r6, [sp, #24]
   24b46:	970a      	str	r7, [sp, #40]	; 0x28
   24b48:	940b      	str	r4, [sp, #44]	; 0x2c
   24b4a:	469b      	mov	fp, r3
   24b4c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   24b50:	f8cd a020 	str.w	sl, [sp, #32]
   24b54:	f8cd a01c 	str.w	sl, [sp, #28]
   24b58:	464c      	mov	r4, r9
   24b5a:	ad04      	add	r5, sp, #16
   24b5c:	2601      	movs	r6, #1
   24b5e:	464f      	mov	r7, r9
   24b60:	2300      	movs	r3, #0
   24b62:	a206      	add	r2, pc, #24	; (adr r2, 24b7c <vli_mmod_fast_secp256r1+0x31c>)
   24b64:	f3af 8000 	nop.w
   24b68:	f3af 8000 	nop.w
   24b6c:	f3af 8000 	nop.w
   24b70:	18b6      	adds	r6, r6, r2
   24b72:	cf04      	ldmia	r7!, {r2}
   24b74:	cd01      	ldmia	r5!, {r0}
   24b76:	1a12      	subs	r2, r2, r0
   24b78:	c404      	stmia	r4!, {r2}
   24b7a:	4730      	bx	r6
   24b7c:	cf04      	ldmia	r7!, {r2}
   24b7e:	cd01      	ldmia	r5!, {r0}
   24b80:	4182      	sbcs	r2, r0
   24b82:	c404      	stmia	r4!, {r2}
   24b84:	cf04      	ldmia	r7!, {r2}
   24b86:	cd01      	ldmia	r5!, {r0}
   24b88:	4182      	sbcs	r2, r0
   24b8a:	c404      	stmia	r4!, {r2}
   24b8c:	cf04      	ldmia	r7!, {r2}
   24b8e:	cd01      	ldmia	r5!, {r0}
   24b90:	4182      	sbcs	r2, r0
   24b92:	c404      	stmia	r4!, {r2}
   24b94:	cf04      	ldmia	r7!, {r2}
   24b96:	cd01      	ldmia	r5!, {r0}
   24b98:	4182      	sbcs	r2, r0
   24b9a:	c404      	stmia	r4!, {r2}
   24b9c:	cf04      	ldmia	r7!, {r2}
   24b9e:	cd01      	ldmia	r5!, {r0}
   24ba0:	4182      	sbcs	r2, r0
   24ba2:	c404      	stmia	r4!, {r2}
   24ba4:	cf04      	ldmia	r7!, {r2}
   24ba6:	cd01      	ldmia	r5!, {r0}
   24ba8:	4182      	sbcs	r2, r0
   24baa:	c404      	stmia	r4!, {r2}
   24bac:	cf04      	ldmia	r7!, {r2}
   24bae:	cd01      	ldmia	r5!, {r0}
   24bb0:	4182      	sbcs	r2, r0
   24bb2:	c404      	stmia	r4!, {r2}
   24bb4:	415b      	adcs	r3, r3
   24bb6:	f101 0430 	add.w	r4, r1, #48	; 0x30
   24bba:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
   24bbc:	9404      	str	r4, [sp, #16]
   24bbe:	9505      	str	r5, [sp, #20]
   24bc0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   24bc2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   24bc4:	9606      	str	r6, [sp, #24]
   24bc6:	9707      	str	r7, [sp, #28]
   24bc8:	950a      	str	r5, [sp, #40]	; 0x28
   24bca:	940b      	str	r4, [sp, #44]	; 0x2c
   24bcc:	469c      	mov	ip, r3
   24bce:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   24bd2:	f8cd a020 	str.w	sl, [sp, #32]
   24bd6:	464c      	mov	r4, r9
   24bd8:	ad04      	add	r5, sp, #16
   24bda:	2601      	movs	r6, #1
   24bdc:	464f      	mov	r7, r9
   24bde:	2300      	movs	r3, #0
   24be0:	a206      	add	r2, pc, #24	; (adr r2, 24bfc <vli_mmod_fast_secp256r1+0x39c>)
   24be2:	bf00      	nop
   24be4:	f3af 8000 	nop.w
   24be8:	f3af 8000 	nop.w
   24bec:	f3af 8000 	nop.w
   24bf0:	18b6      	adds	r6, r6, r2
   24bf2:	cf04      	ldmia	r7!, {r2}
   24bf4:	cd01      	ldmia	r5!, {r0}
   24bf6:	1a12      	subs	r2, r2, r0
   24bf8:	c404      	stmia	r4!, {r2}
   24bfa:	4730      	bx	r6
   24bfc:	cf04      	ldmia	r7!, {r2}
   24bfe:	cd01      	ldmia	r5!, {r0}
   24c00:	4182      	sbcs	r2, r0
   24c02:	c404      	stmia	r4!, {r2}
   24c04:	cf04      	ldmia	r7!, {r2}
   24c06:	cd01      	ldmia	r5!, {r0}
   24c08:	4182      	sbcs	r2, r0
   24c0a:	c404      	stmia	r4!, {r2}
   24c0c:	cf04      	ldmia	r7!, {r2}
   24c0e:	cd01      	ldmia	r5!, {r0}
   24c10:	4182      	sbcs	r2, r0
   24c12:	c404      	stmia	r4!, {r2}
   24c14:	cf04      	ldmia	r7!, {r2}
   24c16:	cd01      	ldmia	r5!, {r0}
   24c18:	4182      	sbcs	r2, r0
   24c1a:	c404      	stmia	r4!, {r2}
   24c1c:	cf04      	ldmia	r7!, {r2}
   24c1e:	cd01      	ldmia	r5!, {r0}
   24c20:	4182      	sbcs	r2, r0
   24c22:	c404      	stmia	r4!, {r2}
   24c24:	cf04      	ldmia	r7!, {r2}
   24c26:	cd01      	ldmia	r5!, {r0}
   24c28:	4182      	sbcs	r2, r0
   24c2a:	c404      	stmia	r4!, {r2}
   24c2c:	cf04      	ldmia	r7!, {r2}
   24c2e:	cd01      	ldmia	r5!, {r0}
   24c30:	4182      	sbcs	r2, r0
   24c32:	c404      	stmia	r4!, {r2}
   24c34:	415b      	adcs	r3, r3
   24c36:	f101 0434 	add.w	r4, r1, #52	; 0x34
   24c3a:	cc70      	ldmia	r4, {r4, r5, r6}
   24c3c:	6a0f      	ldr	r7, [r1, #32]
   24c3e:	9404      	str	r4, [sp, #16]
   24c40:	9505      	str	r5, [sp, #20]
   24c42:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   24c44:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   24c46:	9606      	str	r6, [sp, #24]
   24c48:	6b0e      	ldr	r6, [r1, #48]	; 0x30
   24c4a:	9408      	str	r4, [sp, #32]
   24c4c:	469e      	mov	lr, r3
   24c4e:	9509      	str	r5, [sp, #36]	; 0x24
   24c50:	960b      	str	r6, [sp, #44]	; 0x2c
   24c52:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   24c56:	9707      	str	r7, [sp, #28]
   24c58:	464c      	mov	r4, r9
   24c5a:	ad04      	add	r5, sp, #16
   24c5c:	2601      	movs	r6, #1
   24c5e:	464b      	mov	r3, r9
   24c60:	2700      	movs	r7, #0
   24c62:	a206      	add	r2, pc, #24	; (adr r2, 24c7c <vli_mmod_fast_secp256r1+0x41c>)
   24c64:	f3af 8000 	nop.w
   24c68:	f3af 8000 	nop.w
   24c6c:	f3af 8000 	nop.w
   24c70:	18b6      	adds	r6, r6, r2
   24c72:	cb04      	ldmia	r3!, {r2}
   24c74:	cd01      	ldmia	r5!, {r0}
   24c76:	1a12      	subs	r2, r2, r0
   24c78:	c404      	stmia	r4!, {r2}
   24c7a:	4730      	bx	r6
   24c7c:	cb04      	ldmia	r3!, {r2}
   24c7e:	cd01      	ldmia	r5!, {r0}
   24c80:	4182      	sbcs	r2, r0
   24c82:	c404      	stmia	r4!, {r2}
   24c84:	cb04      	ldmia	r3!, {r2}
   24c86:	cd01      	ldmia	r5!, {r0}
   24c88:	4182      	sbcs	r2, r0
   24c8a:	c404      	stmia	r4!, {r2}
   24c8c:	cb04      	ldmia	r3!, {r2}
   24c8e:	cd01      	ldmia	r5!, {r0}
   24c90:	4182      	sbcs	r2, r0
   24c92:	c404      	stmia	r4!, {r2}
   24c94:	cb04      	ldmia	r3!, {r2}
   24c96:	cd01      	ldmia	r5!, {r0}
   24c98:	4182      	sbcs	r2, r0
   24c9a:	c404      	stmia	r4!, {r2}
   24c9c:	cb04      	ldmia	r3!, {r2}
   24c9e:	cd01      	ldmia	r5!, {r0}
   24ca0:	4182      	sbcs	r2, r0
   24ca2:	c404      	stmia	r4!, {r2}
   24ca4:	cb04      	ldmia	r3!, {r2}
   24ca6:	cd01      	ldmia	r5!, {r0}
   24ca8:	4182      	sbcs	r2, r0
   24caa:	c404      	stmia	r4!, {r2}
   24cac:	cb04      	ldmia	r3!, {r2}
   24cae:	cd01      	ldmia	r5!, {r0}
   24cb0:	4182      	sbcs	r2, r0
   24cb2:	c404      	stmia	r4!, {r2}
   24cb4:	417f      	adcs	r7, r7
   24cb6:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   24cb8:	6a4e      	ldr	r6, [r1, #36]	; 0x24
   24cba:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   24cbc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   24cbe:	9404      	str	r4, [sp, #16]
   24cc0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   24cc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   24cc4:	9208      	str	r2, [sp, #32]
   24cc6:	9607      	str	r6, [sp, #28]
   24cc8:	9409      	str	r4, [sp, #36]	; 0x24
   24cca:	910b      	str	r1, [sp, #44]	; 0x2c
   24ccc:	f8cd a018 	str.w	sl, [sp, #24]
   24cd0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   24cd4:	9505      	str	r5, [sp, #20]
   24cd6:	aa04      	add	r2, sp, #16
   24cd8:	4649      	mov	r1, r9
   24cda:	2401      	movs	r4, #1
   24cdc:	464e      	mov	r6, r9
   24cde:	2500      	movs	r5, #0
   24ce0:	a006      	add	r0, pc, #24	; (adr r0, 24cfc <vli_mmod_fast_secp256r1+0x49c>)
   24ce2:	bf00      	nop
   24ce4:	f3af 8000 	nop.w
   24ce8:	f3af 8000 	nop.w
   24cec:	f3af 8000 	nop.w
   24cf0:	1824      	adds	r4, r4, r0
   24cf2:	ce01      	ldmia	r6!, {r0}
   24cf4:	ca08      	ldmia	r2!, {r3}
   24cf6:	1ac0      	subs	r0, r0, r3
   24cf8:	c101      	stmia	r1!, {r0}
   24cfa:	4720      	bx	r4
   24cfc:	ce01      	ldmia	r6!, {r0}
   24cfe:	ca08      	ldmia	r2!, {r3}
   24d00:	4198      	sbcs	r0, r3
   24d02:	c101      	stmia	r1!, {r0}
   24d04:	ce01      	ldmia	r6!, {r0}
   24d06:	ca08      	ldmia	r2!, {r3}
   24d08:	4198      	sbcs	r0, r3
   24d0a:	c101      	stmia	r1!, {r0}
   24d0c:	ce01      	ldmia	r6!, {r0}
   24d0e:	ca08      	ldmia	r2!, {r3}
   24d10:	4198      	sbcs	r0, r3
   24d12:	c101      	stmia	r1!, {r0}
   24d14:	ce01      	ldmia	r6!, {r0}
   24d16:	ca08      	ldmia	r2!, {r3}
   24d18:	4198      	sbcs	r0, r3
   24d1a:	c101      	stmia	r1!, {r0}
   24d1c:	ce01      	ldmia	r6!, {r0}
   24d1e:	ca08      	ldmia	r2!, {r3}
   24d20:	4198      	sbcs	r0, r3
   24d22:	c101      	stmia	r1!, {r0}
   24d24:	ce01      	ldmia	r6!, {r0}
   24d26:	ca08      	ldmia	r2!, {r3}
   24d28:	4198      	sbcs	r0, r3
   24d2a:	c101      	stmia	r1!, {r0}
   24d2c:	ce01      	ldmia	r6!, {r0}
   24d2e:	ca08      	ldmia	r2!, {r3}
   24d30:	4198      	sbcs	r0, r3
   24d32:	c101      	stmia	r1!, {r0}
   24d34:	416d      	adcs	r5, r5
   24d36:	9b00      	ldr	r3, [sp, #0]
   24d38:	eb08 0203 	add.w	r2, r8, r3
   24d3c:	9b01      	ldr	r3, [sp, #4]
   24d3e:	441a      	add	r2, r3
   24d40:	9b02      	ldr	r3, [sp, #8]
   24d42:	441a      	add	r2, r3
   24d44:	9b03      	ldr	r3, [sp, #12]
   24d46:	441a      	add	r2, r3
   24d48:	445a      	add	r2, fp
   24d4a:	45d4      	cmp	ip, sl
   24d4c:	bf14      	ite	ne
   24d4e:	4694      	movne	ip, r2
   24d50:	f1a2 0c01 	subeq.w	ip, r2, #1
   24d54:	45d6      	cmp	lr, sl
   24d56:	bf14      	ite	ne
   24d58:	46e6      	movne	lr, ip
   24d5a:	f1ac 0e01 	subeq.w	lr, ip, #1
   24d5e:	4557      	cmp	r7, sl
   24d60:	bf14      	ite	ne
   24d62:	4677      	movne	r7, lr
   24d64:	f1ae 0701 	subeq.w	r7, lr, #1
   24d68:	4555      	cmp	r5, sl
   24d6a:	bf14      	ite	ne
   24d6c:	463d      	movne	r5, r7
   24d6e:	1e7d      	subeq	r5, r7, #1
   24d70:	4555      	cmp	r5, sl
   24d72:	db4d      	blt.n	24e10 <vli_mmod_fast_secp256r1+0x5b0>
   24d74:	f8df c108 	ldr.w	ip, [pc, #264]	; 24e80 <vli_mmod_fast_secp256r1+0x620>
   24d78:	f04f 0801 	mov.w	r8, #1
   24d7c:	46ae      	mov	lr, r5
   24d7e:	4648      	mov	r0, r9
   24d80:	f1be 0f00 	cmp.w	lr, #0
   24d84:	d116      	bne.n	24db4 <vli_mmod_fast_secp256r1+0x554>
   24d86:	69c2      	ldr	r2, [r0, #28]
   24d88:	3201      	adds	r2, #1
   24d8a:	d176      	bne.n	24e7a <vli_mmod_fast_secp256r1+0x61a>
   24d8c:	6982      	ldr	r2, [r0, #24]
   24d8e:	2a00      	cmp	r2, #0
   24d90:	d073      	beq.n	24e7a <vli_mmod_fast_secp256r1+0x61a>
   24d92:	2a01      	cmp	r2, #1
   24d94:	d80e      	bhi.n	24db4 <vli_mmod_fast_secp256r1+0x554>
   24d96:	6942      	ldr	r2, [r0, #20]
   24d98:	b962      	cbnz	r2, 24db4 <vli_mmod_fast_secp256r1+0x554>
   24d9a:	6902      	ldr	r2, [r0, #16]
   24d9c:	b952      	cbnz	r2, 24db4 <vli_mmod_fast_secp256r1+0x554>
   24d9e:	68c2      	ldr	r2, [r0, #12]
   24da0:	b942      	cbnz	r2, 24db4 <vli_mmod_fast_secp256r1+0x554>
   24da2:	6882      	ldr	r2, [r0, #8]
   24da4:	3201      	adds	r2, #1
   24da6:	d168      	bne.n	24e7a <vli_mmod_fast_secp256r1+0x61a>
   24da8:	6842      	ldr	r2, [r0, #4]
   24daa:	3201      	adds	r2, #1
   24dac:	d165      	bne.n	24e7a <vli_mmod_fast_secp256r1+0x61a>
   24dae:	6802      	ldr	r2, [r0, #0]
   24db0:	3201      	adds	r2, #1
   24db2:	d162      	bne.n	24e7a <vli_mmod_fast_secp256r1+0x61a>
   24db4:	4602      	mov	r2, r0
   24db6:	4661      	mov	r1, ip
   24db8:	4644      	mov	r4, r8
   24dba:	4603      	mov	r3, r0
   24dbc:	2600      	movs	r6, #0
   24dbe:	a703      	add	r7, pc, #12	; (adr r7, 24dcc <vli_mmod_fast_secp256r1+0x56c>)
   24dc0:	19e4      	adds	r4, r4, r7
   24dc2:	cb80      	ldmia	r3!, {r7}
   24dc4:	c920      	ldmia	r1!, {r5}
   24dc6:	1b7f      	subs	r7, r7, r5
   24dc8:	c280      	stmia	r2!, {r7}
   24dca:	4720      	bx	r4
   24dcc:	cb80      	ldmia	r3!, {r7}
   24dce:	c920      	ldmia	r1!, {r5}
   24dd0:	41af      	sbcs	r7, r5
   24dd2:	c280      	stmia	r2!, {r7}
   24dd4:	cb80      	ldmia	r3!, {r7}
   24dd6:	c920      	ldmia	r1!, {r5}
   24dd8:	41af      	sbcs	r7, r5
   24dda:	c280      	stmia	r2!, {r7}
   24ddc:	cb80      	ldmia	r3!, {r7}
   24dde:	c920      	ldmia	r1!, {r5}
   24de0:	41af      	sbcs	r7, r5
   24de2:	c280      	stmia	r2!, {r7}
   24de4:	cb80      	ldmia	r3!, {r7}
   24de6:	c920      	ldmia	r1!, {r5}
   24de8:	41af      	sbcs	r7, r5
   24dea:	c280      	stmia	r2!, {r7}
   24dec:	cb80      	ldmia	r3!, {r7}
   24dee:	c920      	ldmia	r1!, {r5}
   24df0:	41af      	sbcs	r7, r5
   24df2:	c280      	stmia	r2!, {r7}
   24df4:	cb80      	ldmia	r3!, {r7}
   24df6:	c920      	ldmia	r1!, {r5}
   24df8:	41af      	sbcs	r7, r5
   24dfa:	c280      	stmia	r2!, {r7}
   24dfc:	cb80      	ldmia	r3!, {r7}
   24dfe:	c920      	ldmia	r1!, {r5}
   24e00:	41af      	sbcs	r7, r5
   24e02:	c280      	stmia	r2!, {r7}
   24e04:	4176      	adcs	r6, r6
   24e06:	2e00      	cmp	r6, #0
   24e08:	bf08      	it	eq
   24e0a:	f1ae 0e01 	subeq.w	lr, lr, #1
   24e0e:	e7b7      	b.n	24d80 <vli_mmod_fast_secp256r1+0x520>
   24e10:	f8df e06c 	ldr.w	lr, [pc, #108]	; 24e80 <vli_mmod_fast_secp256r1+0x620>
   24e14:	f04f 0c01 	mov.w	ip, #1
   24e18:	46c8      	mov	r8, r9
   24e1a:	4642      	mov	r2, r8
   24e1c:	4671      	mov	r1, lr
   24e1e:	4664      	mov	r4, ip
   24e20:	4643      	mov	r3, r8
   24e22:	2600      	movs	r6, #0
   24e24:	a705      	add	r7, pc, #20	; (adr r7, 24e3c <vli_mmod_fast_secp256r1+0x5dc>)
   24e26:	bf00      	nop
   24e28:	f3af 8000 	nop.w
   24e2c:	f3af 8000 	nop.w
   24e30:	19e4      	adds	r4, r4, r7
   24e32:	cb80      	ldmia	r3!, {r7}
   24e34:	c901      	ldmia	r1!, {r0}
   24e36:	183f      	adds	r7, r7, r0
   24e38:	c280      	stmia	r2!, {r7}
   24e3a:	4720      	bx	r4
   24e3c:	cb80      	ldmia	r3!, {r7}
   24e3e:	c901      	ldmia	r1!, {r0}
   24e40:	4147      	adcs	r7, r0
   24e42:	c280      	stmia	r2!, {r7}
   24e44:	cb80      	ldmia	r3!, {r7}
   24e46:	c901      	ldmia	r1!, {r0}
   24e48:	4147      	adcs	r7, r0
   24e4a:	c280      	stmia	r2!, {r7}
   24e4c:	cb80      	ldmia	r3!, {r7}
   24e4e:	c901      	ldmia	r1!, {r0}
   24e50:	4147      	adcs	r7, r0
   24e52:	c280      	stmia	r2!, {r7}
   24e54:	cb80      	ldmia	r3!, {r7}
   24e56:	c901      	ldmia	r1!, {r0}
   24e58:	4147      	adcs	r7, r0
   24e5a:	c280      	stmia	r2!, {r7}
   24e5c:	cb80      	ldmia	r3!, {r7}
   24e5e:	c901      	ldmia	r1!, {r0}
   24e60:	4147      	adcs	r7, r0
   24e62:	c280      	stmia	r2!, {r7}
   24e64:	cb80      	ldmia	r3!, {r7}
   24e66:	c901      	ldmia	r1!, {r0}
   24e68:	4147      	adcs	r7, r0
   24e6a:	c280      	stmia	r2!, {r7}
   24e6c:	cb80      	ldmia	r3!, {r7}
   24e6e:	c901      	ldmia	r1!, {r0}
   24e70:	4147      	adcs	r7, r0
   24e72:	c280      	stmia	r2!, {r7}
   24e74:	4176      	adcs	r6, r6
   24e76:	19ad      	adds	r5, r5, r6
   24e78:	d4cf      	bmi.n	24e1a <vli_mmod_fast_secp256r1+0x5ba>
   24e7a:	b00d      	add	sp, #52	; 0x34
   24e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e80:	00028e4c 	.word	0x00028e4c
	...

00024e90 <double_jacobian_default>:
   24e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e94:	f993 9000 	ldrsb.w	r9, [r3]
   24e98:	f1b9 0f00 	cmp.w	r9, #0
   24e9c:	b0a9      	sub	sp, #164	; 0xa4
   24e9e:	dd15      	ble.n	24ecc <double_jacobian_default+0x3c>
   24ea0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   24ea4:	b2e4      	uxtb	r4, r4
   24ea6:	1f15      	subs	r5, r2, #4
   24ea8:	9405      	str	r4, [sp, #20]
   24eaa:	00a4      	lsls	r4, r4, #2
   24eac:	462e      	mov	r6, r5
   24eae:	9406      	str	r4, [sp, #24]
   24eb0:	1914      	adds	r4, r2, r4
   24eb2:	4625      	mov	r5, r4
   24eb4:	46b6      	mov	lr, r6
   24eb6:	2400      	movs	r4, #0
   24eb8:	4637      	mov	r7, r6
   24eba:	f85e 6f04 	ldr.w	r6, [lr, #4]!
   24ebe:	4575      	cmp	r5, lr
   24ec0:	ea44 0406 	orr.w	r4, r4, r6
   24ec4:	d1f9      	bne.n	24eba <double_jacobian_default+0x2a>
   24ec6:	9703      	str	r7, [sp, #12]
   24ec8:	9504      	str	r5, [sp, #16]
   24eca:	b914      	cbnz	r4, 24ed2 <double_jacobian_default+0x42>
   24ecc:	b029      	add	sp, #164	; 0xa4
   24ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ed2:	4698      	mov	r8, r3
   24ed4:	4615      	mov	r5, r2
   24ed6:	4604      	mov	r4, r0
   24ed8:	9207      	str	r2, [sp, #28]
   24eda:	a818      	add	r0, sp, #96	; 0x60
   24edc:	460a      	mov	r2, r1
   24ede:	464b      	mov	r3, r9
   24ee0:	468a      	mov	sl, r1
   24ee2:	f7ff f995 	bl	24210 <uECC_vli_mult>
   24ee6:	a918      	add	r1, sp, #96	; 0x60
   24ee8:	a808      	add	r0, sp, #32
   24eea:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   24eee:	4798      	blx	r3
   24ef0:	aa08      	add	r2, sp, #32
   24ef2:	a818      	add	r0, sp, #96	; 0x60
   24ef4:	f998 3000 	ldrsb.w	r3, [r8]
   24ef8:	4621      	mov	r1, r4
   24efa:	f7ff f989 	bl	24210 <uECC_vli_mult>
   24efe:	a918      	add	r1, sp, #96	; 0x60
   24f00:	a810      	add	r0, sp, #64	; 0x40
   24f02:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   24f06:	4798      	blx	r3
   24f08:	aa08      	add	r2, sp, #32
   24f0a:	4611      	mov	r1, r2
   24f0c:	a818      	add	r0, sp, #96	; 0x60
   24f0e:	f998 3000 	ldrsb.w	r3, [r8]
   24f12:	f7ff f97d 	bl	24210 <uECC_vli_mult>
   24f16:	a918      	add	r1, sp, #96	; 0x60
   24f18:	a808      	add	r0, sp, #32
   24f1a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   24f1e:	4798      	blx	r3
   24f20:	462a      	mov	r2, r5
   24f22:	a818      	add	r0, sp, #96	; 0x60
   24f24:	f998 3000 	ldrsb.w	r3, [r8]
   24f28:	4651      	mov	r1, sl
   24f2a:	f7ff f971 	bl	24210 <uECC_vli_mult>
   24f2e:	a918      	add	r1, sp, #96	; 0x60
   24f30:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   24f34:	4650      	mov	r0, sl
   24f36:	4798      	blx	r3
   24f38:	462a      	mov	r2, r5
   24f3a:	a818      	add	r0, sp, #96	; 0x60
   24f3c:	f998 3000 	ldrsb.w	r3, [r8]
   24f40:	4629      	mov	r1, r5
   24f42:	f7ff f965 	bl	24210 <uECC_vli_mult>
   24f46:	f108 0b04 	add.w	fp, r8, #4
   24f4a:	a918      	add	r1, sp, #96	; 0x60
   24f4c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   24f50:	4628      	mov	r0, r5
   24f52:	4798      	blx	r3
   24f54:	465b      	mov	r3, fp
   24f56:	462a      	mov	r2, r5
   24f58:	4621      	mov	r1, r4
   24f5a:	4620      	mov	r0, r4
   24f5c:	f8cd 9000 	str.w	r9, [sp]
   24f60:	f7ff fae6 	bl	24530 <uECC_vli_modAdd>
   24f64:	465b      	mov	r3, fp
   24f66:	462a      	mov	r2, r5
   24f68:	4629      	mov	r1, r5
   24f6a:	4628      	mov	r0, r5
   24f6c:	f8cd 9000 	str.w	r9, [sp]
   24f70:	f7ff fade 	bl	24530 <uECC_vli_modAdd>
   24f74:	465b      	mov	r3, fp
   24f76:	462a      	mov	r2, r5
   24f78:	4621      	mov	r1, r4
   24f7a:	4628      	mov	r0, r5
   24f7c:	f8cd 9000 	str.w	r9, [sp]
   24f80:	f7ff fb2e 	bl	245e0 <uECC_vli_modSub>
   24f84:	462a      	mov	r2, r5
   24f86:	a818      	add	r0, sp, #96	; 0x60
   24f88:	f998 3000 	ldrsb.w	r3, [r8]
   24f8c:	4621      	mov	r1, r4
   24f8e:	f7ff f93f 	bl	24210 <uECC_vli_mult>
   24f92:	a918      	add	r1, sp, #96	; 0x60
   24f94:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   24f98:	4620      	mov	r0, r4
   24f9a:	4798      	blx	r3
   24f9c:	465b      	mov	r3, fp
   24f9e:	4622      	mov	r2, r4
   24fa0:	4621      	mov	r1, r4
   24fa2:	4628      	mov	r0, r5
   24fa4:	f8cd 9000 	str.w	r9, [sp]
   24fa8:	f7ff fac2 	bl	24530 <uECC_vli_modAdd>
   24fac:	465b      	mov	r3, fp
   24fae:	f8cd 9000 	str.w	r9, [sp]
   24fb2:	462a      	mov	r2, r5
   24fb4:	4621      	mov	r1, r4
   24fb6:	4620      	mov	r0, r4
   24fb8:	f7ff faba 	bl	24530 <uECC_vli_modAdd>
   24fbc:	6823      	ldr	r3, [r4, #0]
   24fbe:	f013 0301 	ands.w	r3, r3, #1
   24fc2:	d16a      	bne.n	2509a <double_jacobian_default+0x20a>
   24fc4:	eb04 0289 	add.w	r2, r4, r9, lsl #2
   24fc8:	4294      	cmp	r4, r2
   24fca:	d20e      	bcs.n	24fea <double_jacobian_default+0x15a>
   24fcc:	9f03      	ldr	r7, [sp, #12]
   24fce:	9d04      	ldr	r5, [sp, #16]
   24fd0:	9e07      	ldr	r6, [sp, #28]
   24fd2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   24fd6:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   24fda:	4294      	cmp	r4, r2
   24fdc:	6013      	str	r3, [r2, #0]
   24fde:	ea4f 73c1 	mov.w	r3, r1, lsl #31
   24fe2:	d3f6      	bcc.n	24fd2 <double_jacobian_default+0x142>
   24fe4:	9703      	str	r7, [sp, #12]
   24fe6:	9504      	str	r5, [sp, #16]
   24fe8:	9607      	str	r6, [sp, #28]
   24fea:	4622      	mov	r2, r4
   24fec:	4621      	mov	r1, r4
   24fee:	f998 3000 	ldrsb.w	r3, [r8]
   24ff2:	a818      	add	r0, sp, #96	; 0x60
   24ff4:	f7ff f90c 	bl	24210 <uECC_vli_mult>
   24ff8:	9d07      	ldr	r5, [sp, #28]
   24ffa:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   24ffe:	4628      	mov	r0, r5
   25000:	a918      	add	r1, sp, #96	; 0x60
   25002:	4798      	blx	r3
   25004:	4629      	mov	r1, r5
   25006:	4628      	mov	r0, r5
   25008:	465b      	mov	r3, fp
   2500a:	aa10      	add	r2, sp, #64	; 0x40
   2500c:	f8cd 9000 	str.w	r9, [sp]
   25010:	f7ff fae6 	bl	245e0 <uECC_vli_modSub>
   25014:	4629      	mov	r1, r5
   25016:	4628      	mov	r0, r5
   25018:	465b      	mov	r3, fp
   2501a:	aa10      	add	r2, sp, #64	; 0x40
   2501c:	f8cd 9000 	str.w	r9, [sp]
   25020:	f7ff fade 	bl	245e0 <uECC_vli_modSub>
   25024:	a910      	add	r1, sp, #64	; 0x40
   25026:	462a      	mov	r2, r5
   25028:	4608      	mov	r0, r1
   2502a:	465b      	mov	r3, fp
   2502c:	f8cd 9000 	str.w	r9, [sp]
   25030:	f7ff fad6 	bl	245e0 <uECC_vli_modSub>
   25034:	aa10      	add	r2, sp, #64	; 0x40
   25036:	4621      	mov	r1, r4
   25038:	f998 3000 	ldrsb.w	r3, [r8]
   2503c:	a818      	add	r0, sp, #96	; 0x60
   2503e:	f7ff f8e7 	bl	24210 <uECC_vli_mult>
   25042:	4620      	mov	r0, r4
   25044:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   25048:	a918      	add	r1, sp, #96	; 0x60
   2504a:	4798      	blx	r3
   2504c:	aa08      	add	r2, sp, #32
   2504e:	465b      	mov	r3, fp
   25050:	4621      	mov	r1, r4
   25052:	f8cd 9000 	str.w	r9, [sp]
   25056:	4610      	mov	r0, r2
   25058:	f7ff fac2 	bl	245e0 <uECC_vli_modSub>
   2505c:	9f03      	ldr	r7, [sp, #12]
   2505e:	9d04      	ldr	r5, [sp, #16]
   25060:	3c04      	subs	r4, #4
   25062:	463b      	mov	r3, r7
   25064:	f853 2f04 	ldr.w	r2, [r3, #4]!
   25068:	f844 2f04 	str.w	r2, [r4, #4]!
   2506c:	42ab      	cmp	r3, r5
   2506e:	d1f9      	bne.n	25064 <double_jacobian_default+0x1d4>
   25070:	9b06      	ldr	r3, [sp, #24]
   25072:	4453      	add	r3, sl
   25074:	4619      	mov	r1, r3
   25076:	f1aa 0304 	sub.w	r3, sl, #4
   2507a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2507e:	f847 2f04 	str.w	r2, [r7, #4]!
   25082:	428b      	cmp	r3, r1
   25084:	d1f9      	bne.n	2507a <double_jacobian_default+0x1ea>
   25086:	9a05      	ldr	r2, [sp, #20]
   25088:	3201      	adds	r2, #1
   2508a:	0092      	lsls	r2, r2, #2
   2508c:	a908      	add	r1, sp, #32
   2508e:	4650      	mov	r0, sl
   25090:	f7e7 f866 	bl	c160 <memcpy>
   25094:	b029      	add	sp, #164	; 0xa4
   25096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2509a:	f1c9 0208 	rsb	r2, r9, #8
   2509e:	00d2      	lsls	r2, r2, #3
   250a0:	3201      	adds	r2, #1
   250a2:	4623      	mov	r3, r4
   250a4:	4659      	mov	r1, fp
   250a6:	4620      	mov	r0, r4
   250a8:	2500      	movs	r5, #0
   250aa:	a704      	add	r7, pc, #16	; (adr r7, 250bc <double_jacobian_default+0x22c>)
   250ac:	f3af 8000 	nop.w
   250b0:	19d2      	adds	r2, r2, r7
   250b2:	c880      	ldmia	r0!, {r7}
   250b4:	c940      	ldmia	r1!, {r6}
   250b6:	19bf      	adds	r7, r7, r6
   250b8:	c380      	stmia	r3!, {r7}
   250ba:	4710      	bx	r2
   250bc:	c880      	ldmia	r0!, {r7}
   250be:	c940      	ldmia	r1!, {r6}
   250c0:	4177      	adcs	r7, r6
   250c2:	c380      	stmia	r3!, {r7}
   250c4:	c880      	ldmia	r0!, {r7}
   250c6:	c940      	ldmia	r1!, {r6}
   250c8:	4177      	adcs	r7, r6
   250ca:	c380      	stmia	r3!, {r7}
   250cc:	c880      	ldmia	r0!, {r7}
   250ce:	c940      	ldmia	r1!, {r6}
   250d0:	4177      	adcs	r7, r6
   250d2:	c380      	stmia	r3!, {r7}
   250d4:	c880      	ldmia	r0!, {r7}
   250d6:	c940      	ldmia	r1!, {r6}
   250d8:	4177      	adcs	r7, r6
   250da:	c380      	stmia	r3!, {r7}
   250dc:	c880      	ldmia	r0!, {r7}
   250de:	c940      	ldmia	r1!, {r6}
   250e0:	4177      	adcs	r7, r6
   250e2:	c380      	stmia	r3!, {r7}
   250e4:	c880      	ldmia	r0!, {r7}
   250e6:	c940      	ldmia	r1!, {r6}
   250e8:	4177      	adcs	r7, r6
   250ea:	c380      	stmia	r3!, {r7}
   250ec:	c880      	ldmia	r0!, {r7}
   250ee:	c940      	ldmia	r1!, {r6}
   250f0:	4177      	adcs	r7, r6
   250f2:	c380      	stmia	r3!, {r7}
   250f4:	416d      	adcs	r5, r5
   250f6:	ea4f 0189 	mov.w	r1, r9, lsl #2
   250fa:	1863      	adds	r3, r4, r1
   250fc:	429c      	cmp	r4, r3
   250fe:	46ae      	mov	lr, r5
   25100:	d20f      	bcs.n	25122 <double_jacobian_default+0x292>
   25102:	9f03      	ldr	r7, [sp, #12]
   25104:	9d04      	ldr	r5, [sp, #16]
   25106:	9e07      	ldr	r6, [sp, #28]
   25108:	2200      	movs	r2, #0
   2510a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   2510e:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   25112:	429c      	cmp	r4, r3
   25114:	601a      	str	r2, [r3, #0]
   25116:	ea4f 72c0 	mov.w	r2, r0, lsl #31
   2511a:	d3f6      	bcc.n	2510a <double_jacobian_default+0x27a>
   2511c:	9703      	str	r7, [sp, #12]
   2511e:	9504      	str	r5, [sp, #16]
   25120:	9607      	str	r6, [sp, #28]
   25122:	3904      	subs	r1, #4
   25124:	5863      	ldr	r3, [r4, r1]
   25126:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   2512a:	5063      	str	r3, [r4, r1]
   2512c:	e75d      	b.n	24fea <double_jacobian_default+0x15a>
   2512e:	bf00      	nop

00025130 <uECC_secp256r1>:
   25130:	4800      	ldr	r0, [pc, #0]	; (25134 <uECC_secp256r1+0x4>)
   25132:	4770      	bx	lr
   25134:	00028e48 	.word	0x00028e48

00025138 <uECC_valid_point>:
   25138:	b5f0      	push	{r4, r5, r6, r7, lr}
   2513a:	f991 3000 	ldrsb.w	r3, [r1]
   2513e:	b2da      	uxtb	r2, r3
   25140:	0057      	lsls	r7, r2, #1
   25142:	b2ff      	uxtb	r7, r7
   25144:	b27c      	sxtb	r4, r7
   25146:	2c00      	cmp	r4, #0
   25148:	b099      	sub	sp, #100	; 0x64
   2514a:	dd28      	ble.n	2519e <uECC_valid_point+0x66>
   2514c:	3f01      	subs	r7, #1
   2514e:	b2ff      	uxtb	r7, r7
   25150:	eb00 0787 	add.w	r7, r0, r7, lsl #2
   25154:	1f04      	subs	r4, r0, #4
   25156:	2500      	movs	r5, #0
   25158:	f854 6f04 	ldr.w	r6, [r4, #4]!
   2515c:	42bc      	cmp	r4, r7
   2515e:	ea45 0506 	orr.w	r5, r5, r6
   25162:	d1f9      	bne.n	25158 <uECC_valid_point+0x20>
   25164:	b1f5      	cbz	r5, 251a4 <uECC_valid_point+0x6c>
   25166:	1e55      	subs	r5, r2, #1
   25168:	b26d      	sxtb	r5, r5
   2516a:	2d00      	cmp	r5, #0
   2516c:	f101 0e04 	add.w	lr, r1, #4
   25170:	db15      	blt.n	2519e <uECC_valid_point+0x66>
   25172:	b22e      	sxth	r6, r5
   25174:	f85e c026 	ldr.w	ip, [lr, r6, lsl #2]
   25178:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
   2517c:	4594      	cmp	ip, r2
   2517e:	d814      	bhi.n	251aa <uECC_valid_point+0x72>
   25180:	d30d      	bcc.n	2519e <uECC_valid_point+0x66>
   25182:	462c      	mov	r4, r5
   25184:	e006      	b.n	25194 <uECC_valid_point+0x5c>
   25186:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
   2518a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   2518e:	4297      	cmp	r7, r2
   25190:	d80b      	bhi.n	251aa <uECC_valid_point+0x72>
   25192:	d304      	bcc.n	2519e <uECC_valid_point+0x66>
   25194:	3c01      	subs	r4, #1
   25196:	b264      	sxtb	r4, r4
   25198:	1c67      	adds	r7, r4, #1
   2519a:	b222      	sxth	r2, r4
   2519c:	d1f3      	bne.n	25186 <uECC_valid_point+0x4e>
   2519e:	2000      	movs	r0, #0
   251a0:	b019      	add	sp, #100	; 0x64
   251a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   251a4:	4628      	mov	r0, r5
   251a6:	b019      	add	sp, #100	; 0x64
   251a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   251aa:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   251ae:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   251b2:	4564      	cmp	r4, ip
   251b4:	d310      	bcc.n	251d8 <uECC_valid_point+0xa0>
   251b6:	d8f2      	bhi.n	2519e <uECC_valid_point+0x66>
   251b8:	462c      	mov	r4, r5
   251ba:	e006      	b.n	251ca <uECC_valid_point+0x92>
   251bc:	f85e c027 	ldr.w	ip, [lr, r7, lsl #2]
   251c0:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
   251c4:	45bc      	cmp	ip, r7
   251c6:	d807      	bhi.n	251d8 <uECC_valid_point+0xa0>
   251c8:	d3e9      	bcc.n	2519e <uECC_valid_point+0x66>
   251ca:	3c01      	subs	r4, #1
   251cc:	b264      	sxtb	r4, r4
   251ce:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   251d2:	b227      	sxth	r7, r4
   251d4:	d1f2      	bne.n	251bc <uECC_valid_point+0x84>
   251d6:	e7e2      	b.n	2519e <uECC_valid_point+0x66>
   251d8:	460f      	mov	r7, r1
   251da:	4604      	mov	r4, r0
   251dc:	4611      	mov	r1, r2
   251de:	a808      	add	r0, sp, #32
   251e0:	f7ff f816 	bl	24210 <uECC_vli_mult>
   251e4:	a908      	add	r1, sp, #32
   251e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   251ea:	4668      	mov	r0, sp
   251ec:	4798      	blx	r3
   251ee:	a808      	add	r0, sp, #32
   251f0:	4621      	mov	r1, r4
   251f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   251f6:	463a      	mov	r2, r7
   251f8:	4798      	blx	r3
   251fa:	2000      	movs	r0, #0
   251fc:	e000      	b.n	25200 <uECC_valid_point+0xc8>
   251fe:	b22e      	sxth	r6, r5
   25200:	ab18      	add	r3, sp, #96	; 0x60
   25202:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   25206:	3d01      	subs	r5, #1
   25208:	f856 2c60 	ldr.w	r2, [r6, #-96]
   2520c:	f856 3c40 	ldr.w	r3, [r6, #-64]
   25210:	b26d      	sxtb	r5, r5
   25212:	4053      	eors	r3, r2
   25214:	4318      	orrs	r0, r3
   25216:	1c6b      	adds	r3, r5, #1
   25218:	d1f1      	bne.n	251fe <uECC_valid_point+0xc6>
   2521a:	fab0 f080 	clz	r0, r0
   2521e:	0940      	lsrs	r0, r0, #5
   25220:	e7be      	b.n	251a0 <uECC_valid_point+0x68>
   25222:	bf00      	nop

00025224 <uECC_valid_public_key>:
   25224:	f7ff bf88 	b.w	25138 <uECC_valid_point>
   25228:	6e756f46 	.word	0x6e756f46
   2522c:	30203a64 	.word	0x30203a64
   25230:	32302578 	.word	0x32302578
   25234:	30253a78 	.word	0x30253a78
   25238:	253a7832 	.word	0x253a7832
   2523c:	3a783230 	.word	0x3a783230
   25240:	78323025 	.word	0x78323025
   25244:	3230253a 	.word	0x3230253a
   25248:	30253a78 	.word	0x30253a78
   2524c:	72207832 	.word	0x72207832
   25250:	3a697373 	.word	0x3a697373
   25254:	20642520 	.word	0x20642520
   25258:	00007325 	.word	0x00007325
   2525c:	3a6e7462 	.word	0x3a6e7462
   25260:	20642520 	.word	0x20642520
   25264:	616d202d 	.word	0x616d202d
   25268:	72657473 	.word	0x72657473
   2526c:	6e6f6320 	.word	0x6e6f6320
   25270:	6469206e 	.word	0x6469206e
   25274:	6425203a 	.word	0x6425203a
   25278:	73202d20 	.word	0x73202d20
   2527c:	6576616c 	.word	0x6576616c
   25280:	6e6f6320 	.word	0x6e6f6320
   25284:	6469206e 	.word	0x6469206e
   25288:	6425203a 	.word	0x6425203a
   2528c:	00000000 	.word	0x00000000
   25290:	6f67654e 	.word	0x6f67654e
   25294:	74616974 	.word	0x74616974
   25298:	4d206465 	.word	0x4d206465
   2529c:	25205554 	.word	0x25205554
   252a0:	00000064 	.word	0x00000064
   252a4:	63746157 	.word	0x63746157
   252a8:	6e614868 	.word	0x6e614868
   252ac:	72656c64 	.word	0x72656c64
   252b0:	74696e49 	.word	0x74696e49
   252b4:	00000000 	.word	0x00000000
   252b8:	63746157 	.word	0x63746157
   252bc:	6f672068 	.word	0x6f672068
   252c0:	76652074 	.word	0x76652074
   252c4:	64252074 	.word	0x64252074
   252c8:	00000000 	.word	0x00000000
   252cc:	20465357 	.word	0x20465357
   252d0:	20636573 	.word	0x20636573
   252d4:	20746f6e 	.word	0x20746f6e
   252d8:	69676572 	.word	0x69676572
   252dc:	72657473 	.word	0x72657473
   252e0:	00006465 	.word	0x00006465
   252e4:	20465357 	.word	0x20465357
   252e8:	20636573 	.word	0x20636573
   252ec:	75657571 	.word	0x75657571
   252f0:	6d652065 	.word	0x6d652065
   252f4:	21797470 	.word	0x21797470
   252f8:	00000000 	.word	0x00000000
   252fc:	65746144 	.word	0x65746144
   25300:	6425203a 	.word	0x6425203a
   25304:	2f64252f 	.word	0x2f64252f
   25308:	00006425 	.word	0x00006425
   2530c:	656d6954 	.word	0x656d6954
   25310:	3025203a 	.word	0x3025203a
   25314:	253a6432 	.word	0x253a6432
   25318:	3a643230 	.word	0x3a643230
   2531c:	64323025 	.word	0x64323025
   25320:	00000000 	.word	0x00000000
   25324:	4f796164 	.word	0x4f796164
   25328:	65655766 	.word	0x65655766
   2532c:	64253a6b 	.word	0x64253a6b
   25330:	63657320 	.word	0x63657320
   25334:	3a363532 	.word	0x3a363532
   25338:	61206425 	.word	0x61206425
   2533c:	73756a64 	.word	0x73756a64
   25340:	61655274 	.word	0x61655274
   25344:	3a6e6f73 	.word	0x3a6e6f73
   25348:	00006425 	.word	0x00006425
   2534c:	656d6974 	.word	0x656d6974
   25350:	656e6f5a 	.word	0x656e6f5a
   25354:	2064253a 	.word	0x2064253a
   25358:	4f747364 	.word	0x4f747364
   2535c:	65736666 	.word	0x65736666
   25360:	64253a74 	.word	0x64253a74
   25364:	00000000 	.word	0x00000000
   25368:	2e666552 	.word	0x2e666552
   2536c:	6d697420 	.word	0x6d697420
   25370:	6f732065 	.word	0x6f732065
   25374:	65637275 	.word	0x65637275
   25378:	2064253a 	.word	0x2064253a
   2537c:	75636361 	.word	0x75636361
   25380:	79636172 	.word	0x79636172
   25384:	0064253a 	.word	0x0064253a
   25388:	7473614c 	.word	0x7473614c
   2538c:	64707520 	.word	0x64707520
   25390:	20657461 	.word	0x20657461
   25394:	73796164 	.word	0x73796164
   25398:	2064253a 	.word	0x2064253a
   2539c:	72756f68 	.word	0x72756f68
   253a0:	64253a73 	.word	0x64253a73
   253a4:	00000000 	.word	0x00000000
   253a8:	2077654e 	.word	0x2077654e
   253ac:	72656c61 	.word	0x72656c61
   253b0:	61632074 	.word	0x61632074
   253b4:	64253a74 	.word	0x64253a74
   253b8:	6d756e20 	.word	0x6d756e20
   253bc:	0064253a 	.word	0x0064253a
   253c0:	3a67734d 	.word	0x3a67734d
   253c4:	00007325 	.word	0x00007325
   253c8:	65726e55 	.word	0x65726e55
   253cc:	61206461 	.word	0x61206461
   253d0:	7472656c 	.word	0x7472656c
   253d4:	61747320 	.word	0x61747320
   253d8:	20737574 	.word	0x20737574
   253dc:	3a746163 	.word	0x3a746163
   253e0:	6e206425 	.word	0x6e206425
   253e4:	253a6d75 	.word	0x253a6d75
   253e8:	00000064 	.word	0x00000064
   253ec:	70707553 	.word	0x70707553
   253f0:	6574726f 	.word	0x6574726f
   253f4:	656e2064 	.word	0x656e2064
   253f8:	6c612077 	.word	0x6c612077
   253fc:	20747265 	.word	0x20747265
   25400:	65746163 	.word	0x65746163
   25404:	79726f67 	.word	0x79726f67
   25408:	7830203a 	.word	0x7830203a
   2540c:	78343025 	.word	0x78343025
   25410:	00000000 	.word	0x00000000
   25414:	70707553 	.word	0x70707553
   25418:	6574726f 	.word	0x6574726f
   2541c:	6e752064 	.word	0x6e752064
   25420:	64616572 	.word	0x64616572
   25424:	656c6120 	.word	0x656c6120
   25428:	63207472 	.word	0x63207472
   2542c:	67657461 	.word	0x67657461
   25430:	3a79726f 	.word	0x3a79726f
   25434:	25783020 	.word	0x25783020
   25438:	00783430 	.word	0x00783430
   2543c:	203e3e3e 	.word	0x203e3e3e
   25440:	65736552 	.word	0x65736552
   25444:	6f632074 	.word	0x6f632074
   25448:	656c706d 	.word	0x656c706d
   2544c:	3c206574 	.word	0x3c206574
   25450:	00003c3c 	.word	0x00003c3c
   25454:	203e3e3e 	.word	0x203e3e3e
   25458:	65766441 	.word	0x65766441
   2545c:	73697472 	.word	0x73697472
   25460:	20676e69 	.word	0x20676e69
   25464:	72617473 	.word	0x72617473
   25468:	20646574 	.word	0x20646574
   2546c:	003c3c3c 	.word	0x003c3c3c
   25470:	203e3e3e 	.word	0x203e3e3e
   25474:	65766441 	.word	0x65766441
   25478:	73697472 	.word	0x73697472
   2547c:	20676e69 	.word	0x20676e69
   25480:	706f7473 	.word	0x706f7473
   25484:	20646570 	.word	0x20646570
   25488:	003c3c3c 	.word	0x003c3c3c
   2548c:	203e3e3e 	.word	0x203e3e3e
   25490:	6e616353 	.word	0x6e616353
   25494:	676e696e 	.word	0x676e696e
   25498:	61747320 	.word	0x61747320
   2549c:	64657472 	.word	0x64657472
   254a0:	3c3c3c20 	.word	0x3c3c3c20
   254a4:	00000000 	.word	0x00000000
   254a8:	203e3e3e 	.word	0x203e3e3e
   254ac:	6e616353 	.word	0x6e616353
   254b0:	676e696e 	.word	0x676e696e
   254b4:	6f747320 	.word	0x6f747320
   254b8:	64657070 	.word	0x64657070
   254bc:	3c3c3c20 	.word	0x3c3c3c20
   254c0:	00000000 	.word	0x00000000
   254c4:	203e3e3e 	.word	0x203e3e3e
   254c8:	6e616353 	.word	0x6e616353
   254cc:	74616420 	.word	0x74616420
   254d0:	65722061 	.word	0x65722061
   254d4:	76696563 	.word	0x76696563
   254d8:	66206465 	.word	0x66206465
   254dc:	206d6f72 	.word	0x206d6f72
   254e0:	72656570 	.word	0x72656570
   254e4:	3c3c3c20 	.word	0x3c3c3c20
   254e8:	00000000 	.word	0x00000000
   254ec:	203e3e3e 	.word	0x203e3e3e
   254f0:	6e6e6f43 	.word	0x6e6e6f43
   254f4:	69746365 	.word	0x69746365
   254f8:	6f206e6f 	.word	0x6f206e6f
   254fc:	656e6570 	.word	0x656e6570
   25500:	3c3c2064 	.word	0x3c3c2064
   25504:	0000003c 	.word	0x0000003c
   25508:	203e3e3e 	.word	0x203e3e3e
   2550c:	6e6e6f43 	.word	0x6e6e6f43
   25510:	69746365 	.word	0x69746365
   25514:	63206e6f 	.word	0x63206e6f
   25518:	65736f6c 	.word	0x65736f6c
   2551c:	3c3c2064 	.word	0x3c3c2064
   25520:	0000003c 	.word	0x0000003c
   25524:	203e3e3e 	.word	0x203e3e3e
   25528:	72696150 	.word	0x72696150
   2552c:	20676e69 	.word	0x20676e69
   25530:	706d6f63 	.word	0x706d6f63
   25534:	6574656c 	.word	0x6574656c
   25538:	75732064 	.word	0x75732064
   2553c:	73656363 	.word	0x73656363
   25540:	6c756673 	.word	0x6c756673
   25544:	3c20796c 	.word	0x3c20796c
   25548:	00003c3c 	.word	0x00003c3c
   2554c:	203e3e3e 	.word	0x203e3e3e
   25550:	72696150 	.word	0x72696150
   25554:	20676e69 	.word	0x20676e69
   25558:	6c696166 	.word	0x6c696166
   2555c:	3c206465 	.word	0x3c206465
   25560:	00003c3c 	.word	0x00003c3c
   25564:	203e3e3e 	.word	0x203e3e3e
   25568:	6e6e6f43 	.word	0x6e6e6f43
   2556c:	69746365 	.word	0x69746365
   25570:	65206e6f 	.word	0x65206e6f
   25574:	7972636e 	.word	0x7972636e
   25578:	64657470 	.word	0x64657470
   2557c:	3c3c3c20 	.word	0x3c3c3c20
   25580:	00000000 	.word	0x00000000
   25584:	203e3e3e 	.word	0x203e3e3e
   25588:	72636e45 	.word	0x72636e45
   2558c:	69747079 	.word	0x69747079
   25590:	66206e6f 	.word	0x66206e6f
   25594:	656c6961 	.word	0x656c6961
   25598:	3c3c2064 	.word	0x3c3c2064
   2559c:	0000003c 	.word	0x0000003c
   255a0:	203e3e3e 	.word	0x203e3e3e
   255a4:	6d6f7250 	.word	0x6d6f7250
   255a8:	75207470 	.word	0x75207470
   255ac:	20726573 	.word	0x20726573
   255b0:	65206f74 	.word	0x65206f74
   255b4:	7265746e 	.word	0x7265746e
   255b8:	73617020 	.word	0x73617020
   255bc:	79656b73 	.word	0x79656b73
   255c0:	3c3c3c20 	.word	0x3c3c3c20
   255c4:	00000000 	.word	0x00000000
   255c8:	203e3e3e 	.word	0x203e3e3e
   255cc:	636e6143 	.word	0x636e6143
   255d0:	61206c65 	.word	0x61206c65
   255d4:	776f6c20 	.word	0x776f6c20
   255d8:	20726f20 	.word	0x20726f20
   255dc:	68676968 	.word	0x68676968
   255e0:	656c6120 	.word	0x656c6120
   255e4:	3c207472 	.word	0x3c207472
   255e8:	00003c3c 	.word	0x00003c3c
   255ec:	203e3e3e 	.word	0x203e3e3e
   255f0:	20776f4c 	.word	0x20776f4c
   255f4:	72656c61 	.word	0x72656c61
   255f8:	3c3c2074 	.word	0x3c3c2074
   255fc:	0000003c 	.word	0x0000003c
   25600:	203e3e3e 	.word	0x203e3e3e
   25604:	68676948 	.word	0x68676948
   25608:	656c6120 	.word	0x656c6120
   2560c:	3c207472 	.word	0x3c207472
   25610:	00003c3c 	.word	0x00003c3c
   25614:	203e3e3e 	.word	0x203e3e3e
   25618:	73736150 	.word	0x73736150
   2561c:	3a79656b 	.word	0x3a79656b
   25620:	20642520 	.word	0x20642520
   25624:	003c3c3c 	.word	0x003c3c3c
   25628:	203e3e3e 	.word	0x203e3e3e
   2562c:	666e6f43 	.word	0x666e6f43
   25630:	206d7269 	.word	0x206d7269
   25634:	756c6156 	.word	0x756c6156
   25638:	25203a65 	.word	0x25203a65
   2563c:	3c3c2064 	.word	0x3c3c2064
   25640:	0000003c 	.word	0x0000003c
   25644:	203e3e3e 	.word	0x203e3e3e
   25648:	49535352 	.word	0x49535352
   2564c:	6425203a 	.word	0x6425203a
   25650:	6d426420 	.word	0x6d426420
   25654:	003c3c3c 	.word	0x003c3c3c
   25658:	7267664d 	.word	0x7267664d
   2565c:	7325203a 	.word	0x7325203a
   25660:	00000000 	.word	0x00000000
   25664:	65646f4d 	.word	0x65646f4d
   25668:	756e206c 	.word	0x756e206c
   2566c:	25203a6d 	.word	0x25203a6d
   25670:	00000073 	.word	0x00000073
   25674:	69726553 	.word	0x69726553
   25678:	6e206c61 	.word	0x6e206c61
   2567c:	203a6d75 	.word	0x203a6d75
   25680:	00007325 	.word	0x00007325
   25684:	64726148 	.word	0x64726148
   25688:	65726177 	.word	0x65726177
   2568c:	76657220 	.word	0x76657220
   25690:	7325203a 	.word	0x7325203a
   25694:	00000000 	.word	0x00000000
   25698:	6d726946 	.word	0x6d726946
   2569c:	65726177 	.word	0x65726177
   256a0:	76657220 	.word	0x76657220
   256a4:	7325203a 	.word	0x7325203a
   256a8:	00000000 	.word	0x00000000
   256ac:	74666f53 	.word	0x74666f53
   256b0:	65726177 	.word	0x65726177
   256b4:	76657220 	.word	0x76657220
   256b8:	7325203a 	.word	0x7325203a
   256bc:	00000000 	.word	0x00000000
   256c0:	74737953 	.word	0x74737953
   256c4:	49206d65 	.word	0x49206d65
   256c8:	65722044 	.word	0x65722044
   256cc:	6f206461 	.word	0x6f206461
   256d0:	0000006b 	.word	0x0000006b
   256d4:	4f525245 	.word	0x4f525245
   256d8:	48435f52 	.word	0x48435f52
   256dc:	5f4b4345 	.word	0x5f4b4345
   256e0:	44494f56 	.word	0x44494f56
   256e4:	5f6d6120 	.word	0x5f6d6120
   256e8:	5f6c6168 	.word	0x5f6c6168
   256ec:	5f656c62 	.word	0x5f656c62
   256f0:	74696e69 	.word	0x74696e69
   256f4:	696c6169 	.word	0x696c6169
   256f8:	3028657a 	.word	0x3028657a
   256fc:	4226202c 	.word	0x4226202c
   25700:	0a29454c 	.word	0x0a29454c
   25704:	00000000 	.word	0x00000000
   25708:	4f525245 	.word	0x4f525245
   2570c:	48435f52 	.word	0x48435f52
   25710:	5f4b4345 	.word	0x5f4b4345
   25714:	44494f56 	.word	0x44494f56
   25718:	5f6d6120 	.word	0x5f6d6120
   2571c:	5f6c6168 	.word	0x5f6c6168
   25720:	5f656c62 	.word	0x5f656c62
   25724:	65776f70 	.word	0x65776f70
   25728:	6f635f72 	.word	0x6f635f72
   2572c:	6f72746e 	.word	0x6f72746e
   25730:	4c42286c 	.word	0x4c42286c
   25734:	41202c45 	.word	0x41202c45
   25738:	41485f4d 	.word	0x41485f4d
   2573c:	4c425f4c 	.word	0x4c425f4c
   25740:	4f505f45 	.word	0x4f505f45
   25744:	5f524557 	.word	0x5f524557
   25748:	49544341 	.word	0x49544341
   2574c:	0a294556 	.word	0x0a294556
   25750:	00000000 	.word	0x00000000
   25754:	4f525245 	.word	0x4f525245
   25758:	48435f52 	.word	0x48435f52
   2575c:	5f4b4345 	.word	0x5f4b4345
   25760:	44494f56 	.word	0x44494f56
   25764:	5f6d6120 	.word	0x5f6d6120
   25768:	5f6c6168 	.word	0x5f6c6168
   2576c:	5f656c62 	.word	0x5f656c62
   25770:	666e6f63 	.word	0x666e6f63
   25774:	42286769 	.word	0x42286769
   25778:	202c454c 	.word	0x202c454c
   2577c:	6c427326 	.word	0x6c427326
   25780:	6e6f4365 	.word	0x6e6f4365
   25784:	29676966 	.word	0x29676966
   25788:	0000000a 	.word	0x0000000a
   2578c:	4f525245 	.word	0x4f525245
   25790:	48435f52 	.word	0x48435f52
   25794:	5f4b4345 	.word	0x5f4b4345
   25798:	44494f56 	.word	0x44494f56
   2579c:	5f6d6120 	.word	0x5f6d6120
   257a0:	5f6c6168 	.word	0x5f6c6168
   257a4:	5f656c62 	.word	0x5f656c62
   257a8:	65776f70 	.word	0x65776f70
   257ac:	6f635f72 	.word	0x6f635f72
   257b0:	6f72746e 	.word	0x6f72746e
   257b4:	4c42286c 	.word	0x4c42286c
   257b8:	41202c45 	.word	0x41202c45
   257bc:	41485f4d 	.word	0x41485f4d
   257c0:	4c425f4c 	.word	0x4c425f4c
   257c4:	4f505f45 	.word	0x4f505f45
   257c8:	5f524557 	.word	0x5f524557
   257cc:	2946464f 	.word	0x2946464f
   257d0:	0000000a 	.word	0x0000000a
   257d4:	4f525245 	.word	0x4f525245
   257d8:	48435f52 	.word	0x48435f52
   257dc:	5f4b4345 	.word	0x5f4b4345
   257e0:	44494f56 	.word	0x44494f56
   257e4:	5f6d6120 	.word	0x5f6d6120
   257e8:	5f6c6168 	.word	0x5f6c6168
   257ec:	5f656c62 	.word	0x5f656c62
   257f0:	6e696564 	.word	0x6e696564
   257f4:	61697469 	.word	0x61697469
   257f8:	657a696c 	.word	0x657a696c
   257fc:	454c4228 	.word	0x454c4228
   25800:	00000a29 	.word	0x00000a29
   25804:	00000004 	.word	0x00000004
   25808:	00000020 	.word	0x00000020
   2580c:	00000020 	.word	0x00000020
   25810:	00000002 	.word	0x00000002
   25814:	00000000 	.word	0x00000000
   25818:	00000032 	.word	0x00000032
   2581c:	00010101 	.word	0x00010101
   25820:	4f525245 	.word	0x4f525245
   25824:	48435f52 	.word	0x48435f52
   25828:	5f4b4345 	.word	0x5f4b4345
   2582c:	44494f56 	.word	0x44494f56
   25830:	49434820 	.word	0x49434820
   25834:	5652445f 	.word	0x5652445f
   25838:	5f58525f 	.word	0x5f58525f
   2583c:	4b434150 	.word	0x4b434150
   25840:	545f5445 	.word	0x545f5445
   25844:	4c5f4f4f 	.word	0x4c5f4f4f
   25848:	45475241 	.word	0x45475241
   2584c:	0000000a 	.word	0x0000000a
   25850:	6e6f6850 	.word	0x6e6f6850
   25854:	6c612065 	.word	0x6c612065
   25858:	20747265 	.word	0x20747265
   2585c:	74617473 	.word	0x74617473
   25860:	203a7375 	.word	0x203a7375
   25864:	30257830 	.word	0x30257830
   25868:	00007832 	.word	0x00007832
   2586c:	676e6952 	.word	0x676e6952
   25870:	73207265 	.word	0x73207265
   25874:	69747465 	.word	0x69747465
   25878:	203a676e 	.word	0x203a676e
   2587c:	30257830 	.word	0x30257830
   25880:	00007832 	.word	0x00007832
   25884:	42667357 	.word	0x42667357
   25888:	6c416675 	.word	0x6c416675
   2588c:	20636f6c 	.word	0x20636f6c
   25890:	6c696166 	.word	0x6c696166
   25894:	6c206465 	.word	0x6c206465
   25898:	253a6e65 	.word	0x253a6e65
   2589c:	00000075 	.word	0x00000075
   258a0:	72616548 	.word	0x72616548
   258a4:	61522074 	.word	0x61522074
   258a8:	6d206574 	.word	0x6d206574
   258ac:	20736165 	.word	0x20736165
   258b0:	3a6e656c 	.word	0x3a6e656c
   258b4:	6d206425 	.word	0x6d206425
   258b8:	654c6e69 	.word	0x654c6e69
   258bc:	64253a6e 	.word	0x64253a6e
   258c0:	00000000 	.word	0x00000000
   258c4:	65482020 	.word	0x65482020
   258c8:	20747261 	.word	0x20747261
   258cc:	65746172 	.word	0x65746172
   258d0:	2020203a 	.word	0x2020203a
   258d4:	00006425 	.word	0x00006425
   258d8:	6e452020 	.word	0x6e452020
   258dc:	79677265 	.word	0x79677265
   258e0:	70784520 	.word	0x70784520
   258e4:	2020203a 	.word	0x2020203a
   258e8:	00006425 	.word	0x00006425
   258ec:	2d722020 	.word	0x2d722020
   258f0:	6e492072 	.word	0x6e492072
   258f4:	76726574 	.word	0x76726574
   258f8:	203a6c61 	.word	0x203a6c61
   258fc:	00006425 	.word	0x00006425
   25900:	6c462020 	.word	0x6c462020
   25904:	3a736761 	.word	0x3a736761
   25908:	30257830 	.word	0x30257830
   2590c:	00007832 	.word	0x00007832
   25910:	79646f42 	.word	0x79646f42
   25914:	6e657320 	.word	0x6e657320
   25918:	20726f73 	.word	0x20726f73
   2591c:	61636f6c 	.word	0x61636f6c
   25920:	6e6f6974 	.word	0x6e6f6974
   25924:	0064253a 	.word	0x0064253a
   25928:	65657246 	.word	0x65657246
   2592c:	534f5452 	.word	0x534f5452
   25930:	74615720 	.word	0x74615720
   25934:	45206863 	.word	0x45206863
   25938:	706d6178 	.word	0x706d6178
   2593c:	000a656c 	.word	0x000a656c
   25940:	20465357 	.word	0x20465357
   25944:	656d6954 	.word	0x656d6954
   25948:	00000072 	.word	0x00000072
   2594c:	20746f47 	.word	0x20746f47
   25950:	74747542 	.word	0x74747542
   25954:	30206e6f 	.word	0x30206e6f
   25958:	65725020 	.word	0x65725020
   2595c:	000a7373 	.word	0x000a7373
   25960:	20746f47 	.word	0x20746f47
   25964:	74747542 	.word	0x74747542
   25968:	31206e6f 	.word	0x31206e6f
   2596c:	65725020 	.word	0x65725020
   25970:	000a7373 	.word	0x000a7373
   25974:	20746f47 	.word	0x20746f47
   25978:	74747542 	.word	0x74747542
   2597c:	32206e6f 	.word	0x32206e6f
   25980:	65725020 	.word	0x65725020
   25984:	000a7373 	.word	0x000a7373
   25988:	6f6d654d 	.word	0x6f6d654d
   2598c:	70207972 	.word	0x70207972
   25990:	206c6f6f 	.word	0x206c6f6f
   25994:	74207369 	.word	0x74207369
   25998:	73206f6f 	.word	0x73206f6f
   2599c:	6c6c616d 	.word	0x6c6c616d
   259a0:	20796220 	.word	0x20796220
   259a4:	0a0d6425 	.word	0x0a0d6425
   259a8:	00000000 	.word	0x00000000
   259ac:	69646152 	.word	0x69646152
   259b0:	7361546f 	.word	0x7361546f
   259b4:	73203a6b 	.word	0x73203a6b
   259b8:	70757465 	.word	0x70757465
   259bc:	00000a0d 	.word	0x00000a0d
   259c0:	72617453 	.word	0x72617453
   259c4:	676e6974 	.word	0x676e6974
   259c8:	63697720 	.word	0x63697720
   259cc:	72746e65 	.word	0x72746e65
   259d0:	74206369 	.word	0x74206369
   259d4:	65636172 	.word	0x65636172
   259d8:	000a0a3a 	.word	0x000a0a3a
   259dc:	6e6e7552 	.word	0x6e6e7552
   259e0:	20676e69 	.word	0x20676e69
   259e4:	75746573 	.word	0x75746573
   259e8:	61742070 	.word	0x61742070
   259ec:	2e736b73 	.word	0x2e736b73
   259f0:	0a0d2e2e 	.word	0x0a0d2e2e
   259f4:	00000000 	.word	0x00000000
   259f8:	69646152 	.word	0x69646152
   259fc:	7361546f 	.word	0x7361546f
   25a00:	0000006b 	.word	0x0000006b
   25a04:	75746553 	.word	0x75746553
   25a08:	00000070 	.word	0x00000070
   25a0c:	58323025 	.word	0x58323025
   25a10:	00000020 	.word	0x00000020
   25a14:	0000000a 	.word	0x0000000a
   25a18:	00000a0a 	.word	0x00000a0a
   25a1c:	2e2f2e2e 	.word	0x2e2f2e2e
   25a20:	2e2e2f2e 	.word	0x2e2e2f2e
   25a24:	2f2e2e2f 	.word	0x2f2e2e2f
   25a28:	742f2e2e 	.word	0x742f2e2e
   25a2c:	64726968 	.word	0x64726968
   25a30:	7261705f 	.word	0x7261705f
   25a34:	652f7974 	.word	0x652f7974
   25a38:	74636178 	.word	0x74636178
   25a3c:	772f656c 	.word	0x772f656c
   25a40:	6f632d73 	.word	0x6f632d73
   25a44:	732f6572 	.word	0x732f6572
   25a48:	73772f77 	.word	0x73772f77
   25a4c:	6d612f66 	.word	0x6d612f66
   25a50:	2f716962 	.word	0x2f716962
   25a54:	5f667377 	.word	0x5f667377
   25a58:	63617274 	.word	0x63617274
   25a5c:	00632e65 	.word	0x00632e65
   25a60:	454c4449 	.word	0x454c4449
   25a64:	00000000 	.word	0x00000000
   25a68:	20726d54 	.word	0x20726d54
   25a6c:	00637653 	.word	0x00637653
   25a70:	63747441 	.word	0x63747441
   25a74:	63736944 	.word	0x63736944
   25a78:	76726553 	.word	0x76726553
   25a7c:	43656369 	.word	0x43656369
   25a80:	206c706d 	.word	0x206c706d
   25a84:	74617473 	.word	0x74617473
   25a88:	30207375 	.word	0x30207375
   25a8c:	32302578 	.word	0x32302578
   25a90:	00000078 	.word	0x00000078
   25a94:	63747441 	.word	0x63747441
   25a98:	63736944 	.word	0x63736944
   25a9c:	72616843 	.word	0x72616843
   25aa0:	6c706d43 	.word	0x6c706d43
   25aa4:	61747320 	.word	0x61747320
   25aa8:	20737574 	.word	0x20737574
   25aac:	30257830 	.word	0x30257830
   25ab0:	00007832 	.word	0x00007832
   25ab4:	63747441 	.word	0x63747441
   25ab8:	63736944 	.word	0x63736944
   25abc:	666e6f43 	.word	0x666e6f43
   25ac0:	6d436769 	.word	0x6d436769
   25ac4:	73206c70 	.word	0x73206c70
   25ac8:	75746174 	.word	0x75746174
   25acc:	78302073 	.word	0x78302073
   25ad0:	78323025 	.word	0x78323025
   25ad4:	00000000 	.word	0x00000000
   25ad8:	44707041 	.word	0x44707041
   25adc:	43637369 	.word	0x43637369
   25ae0:	6c706d6f 	.word	0x6c706d6f
   25ae4:	20657465 	.word	0x20657465
   25ae8:	6e6e6f63 	.word	0x6e6e6f63
   25aec:	253a6449 	.word	0x253a6449
   25af0:	74732064 	.word	0x74732064
   25af4:	73757461 	.word	0x73757461
   25af8:	2578303a 	.word	0x2578303a
   25afc:	00783230 	.word	0x00783230
   25b00:	6e616353 	.word	0x6e616353
   25b04:	73657220 	.word	0x73657220
   25b08:	73746c75 	.word	0x73746c75
   25b0c:	6425203a 	.word	0x6425203a
   25b10:	00000000 	.word	0x00000000
   25b14:	61766e49 	.word	0x61766e49
   25b18:	2064696c 	.word	0x2064696c
   25b1c:	73204d44 	.word	0x73204d44
   25b20:	6e6e6163 	.word	0x6e6e6163
   25b24:	20676e69 	.word	0x20676e69
   25b28:	65646f6d 	.word	0x65646f6d
   25b2c:	6f6d203b 	.word	0x6f6d203b
   25b30:	63206564 	.word	0x63206564
   25b34:	69666e6f 	.word	0x69666e6f
   25b38:	65727567 	.word	0x65727567
   25b3c:	73612064 	.word	0x73612064
   25b40:	74786520 	.word	0x74786520
   25b44:	65646e65 	.word	0x65646e65
   25b48:	00000064 	.word	0x00000064
   25b4c:	61766e49 	.word	0x61766e49
   25b50:	2064696c 	.word	0x2064696c
   25b54:	61204d44 	.word	0x61204d44
   25b58:	72657664 	.word	0x72657664
   25b5c:	69736974 	.word	0x69736974
   25b60:	6d20676e 	.word	0x6d20676e
   25b64:	3b65646f 	.word	0x3b65646f
   25b68:	646f6d20 	.word	0x646f6d20
   25b6c:	6f632065 	.word	0x6f632065
   25b70:	6769666e 	.word	0x6769666e
   25b74:	64657275 	.word	0x64657275
   25b78:	20736120 	.word	0x20736120
   25b7c:	65747865 	.word	0x65747865
   25b80:	6465646e 	.word	0x6465646e
   25b84:	00000000 	.word	0x00000000

00025b88 <attFcnDefault>:
   25b88:	0000c505 0000c501 0000c501 0000c503     ................

00025b98 <attWsfChUuid>:
   25b98:	2a9d2a9e                                         .*

00025b9a <attWmChUuid>:
   25b9a:	181d2a9d                                         .*

00025b9c <attWssSvcUuid>:
   25b9c:	2a9f181d                                         ..

00025b9e <attUcpChUuid>:
   25b9e:	2a9a2a9f                                         .*

00025ba0 <attUiChUuid>:
   25ba0:	2a992a9a                                         .*

00025ba2 <attDbciChUuid>:
   25ba2:	2ac92a99                                         .*

00025ba4 <attRpaoChUuid>:
   25ba4:	2a5f2ac9                                         .*

00025ba6 <attPlxcmChUuid>:
   25ba6:	2a5e2a5f                                         _*

00025ba8 <attPlxscmChUuid>:
   25ba8:	2a602a5e                                         ^*

00025baa <attPlxfChUuid>:
   25baa:	2a5d2a60                                         `*

00025bac <attSlChUuid>:
   25bac:	2a5b2a5d                                         ]*

00025bae <attCsmChUuid>:
   25bae:	2a5c2a5b                                         [*

00025bb0 <attCsfChUuid>:
   25bb0:	2a632a5c                                         \*

00025bb2 <attCpmChUuid>:
   25bb2:	2a652a63                                         c*

00025bb4 <attCpfChUuid>:
   25bb4:	2a532a65                                         e*

00025bb6 <attRsmChUuid>:
   25bb6:	2a542a53                                         S*

00025bb8 <attRsfChUuid>:
   25bb8:	2aa62a54                                         T*

00025bba <attCarChUuid>:
   25bba:	2a522aa6                                         .*

00025bbc <attRacpChUuid>:
   25bbc:	2a512a52                                         R*

00025bbe <attGlfChUuid>:
   25bbe:	2a502a51                                         Q*

00025bc0 <attPnpChUuid>:
   25bc0:	2a4f2a50                                         P*

00025bc2 <attSiwChUuid>:
   25bc2:	2a4e2a4f                                         O*

00025bc4 <attHidPmChUuid>:
   25bc4:	2a4d2a4e                                         N*

00025bc6 <attHidRepChUuid>:
   25bc6:	2a4c2a4d                                         M*

00025bc8 <attHidcpChUuid>:
   25bc8:	2a4b2a4c                                         L*

00025bca <attHidRmChUuid>:
   25bca:	2a4a2a4b                                         K*

00025bcc <attHidiChUuid>:
   25bcc:	2a322a4a                                         J*

00025bce <attHidBkoChUuid>:
   25bce:	2a222a32                                         2*

00025bd0 <attHidBkiChUuid>:
   25bd0:	2a212a22                                         "*

00025bd2 <attHidBmiChUuid>:
   25bd2:	2a492a21                                         !*

00025bd4 <attBpfChUuid>:
   25bd4:	2a482a49                                         I*

00025bd6 <attSuacChUuid>:
   25bd6:	2a472a48                                         H*

00025bd8 <attSnacChUuid>:
   25bd8:	2a462a47                                         G*

00025bda <attNaChUuid>:
   25bda:	2a452a46                                         F*

00025bdc <attUasChUuid>:
   25bdc:	2a442a45                                         E*

00025bde <attAncpChUuid>:
   25bde:	2a432a44                                         D*

00025be0 <attAcChUuid>:
   25be0:	2a422a43                                         C*

00025be2 <attAcbmChUuid>:
   25be2:	2a412a42                                         B*

00025be4 <attRsChUuid>:
   25be4:	2a402a41                                         A*

00025be6 <attRcpChUuid>:
   25be6:	2a3f2a40                                         @*

00025be8 <attAsChUuid>:
   25be8:	2a3e2a3f                                         ?*

00025bea <attNwaChUuid>:
   25bea:	2a3d2a3e                                         >*

00025bec <attStrChUuid>:
   25bec:	2a3c2a3d                                         =*

00025bee <attStcChUuid>:
   25bee:	2a3b2a3c                                         <*

00025bf0 <attSrChUuid>:
   25bf0:	2a3a2a3b                                         ;*

00025bf2 <attRemChUuid>:
   25bf2:	2a392a3a                                         :*

00025bf4 <attHrcpChUuid>:
   25bf4:	2a382a39                                         9*

00025bf6 <attBslChUuid>:
   25bf6:	2a372a38                                         8*

00025bf8 <attHrmChUuid>:
   25bf8:	2a362a37                                         7*

00025bfa <attIcpChUuid>:
   25bfa:	2a352a36                                         6*

00025bfc <attBpmChUuid>:
   25bfc:	2a342a35                                         5*

00025bfe <attGlmcChUuid>:
   25bfe:	2a332a34                                         4*

00025c00 <attHbmiChUuid>:
   25c00:	2a312a33                                         3*

00025c02 <attVidChUuid>:
   25c02:	2a302a31                                         1*

00025c04 <attP3dChUuid>:
   25c04:	2a2f2a30                                         0*

00025c06 <attP2dChUuid>:
   25c06:	2a2e2a2f                                         /*

00025c08 <attLongChUuid>:
   25c08:	2a2d2a2e                                         .*

00025c0a <attLatChUuid>:
   25c0a:	2a2c2a2d                                         -*

00025c0c <attElChUuid>:
   25c0c:	2a2b2a2c                                         ,*

00025c0e <attCtChUuid>:
   25c0e:	2a2a2a2b                                         +*

00025c10 <attIeeeChUuid>:
   25c10:	2a292a2a                                         **

00025c12 <attMfnsChUuid>:
   25c12:	2a282a29                                         )*

00025c14 <attSrsChUuid>:
   25c14:	2a272a28                                         (*

00025c16 <attHrsChUuid>:
   25c16:	2a262a27                                         '*

00025c18 <attFrsChUuid>:
   25c18:	2a252a26                                         &*

00025c1a <attSnsChUuid>:
   25c1a:	2a242a25                                         %*

00025c1c <attMnsChUuid>:
   25c1c:	2a232a24                                         $*

00025c1e <attSidChUuid>:
   25c1e:	2a202a23                                         #*

00025c20 <attTfahChUuid>:
   25c20:	2a1f2a20                                          *

00025c22 <attTcelChUuid>:
   25c22:	2a1e2a1f                                         .*

00025c24 <attItChUuid>:
   25c24:	2a1d2a1e                                         .*

00025c26 <attTtChUuid>:
   25c26:	2a1c2a1d                                         .*

00025c28 <attTmChUuid>:
   25c28:	2a1b2a1c                                         .*

00025c2a <attBlsChUuid>:
   25c2a:	2a1a2a1b                                         .*

00025c2c <attBpsChUuid>:
   25c2c:	2a192a1a                                         .*

00025c2e <attBlChUuid>:
   25c2e:	2a182a19                                         .*

00025c30 <attGlmChUuid>:
   25c30:	2a172a18                                         .*

00025c32 <attTusChUuid>:
   25c32:	2a162a17                                         .*

00025c34 <attTucpChUuid>:
   25c34:	2a152a16                                         .*

00025c36 <attTbChUuid>:
   25c36:	2a142a15                                         .*

00025c38 <attRtiChUuid>:
   25c38:	2a132a14                                         .*

00025c3a <attTsChUuid>:
   25c3a:	2a122a13                                         .*

00025c3c <attTaChUuid>:
   25c3c:	2a112a12                                         .*

00025c3e <attTdstChUuid>:
   25c3e:	2a102a11                                         .*

00025c40 <attStzChUuid>:
   25c40:	2a0f2a10                                         .*

00025c42 <attLtiChUuid>:
   25c42:	2a0e2a0f                                         .*

00025c44 <attTzChUuid>:
   25c44:	2a0d2a0e                                         .*

00025c46 <attDstoChUuid>:
   25c46:	2a0c2a0d                                         .*

00025c48 <attEt256ChUuid>:
   25c48:	2a0b2a0c                                         .*

00025c4a <attEt100ChUuid>:
   25c4a:	2a0a2a0b                                         .*

00025c4c <attDdtChUuid>:
   25c4c:	2a092a0a                                         .*

00025c4e <attDwChUuid>:
   25c4e:	2a082a09                                         .*

00025c50 <attDtChUuid>:
   25c50:	2a072a08                                         .*

00025c52 <attTxpChUuid>:
   25c52:	2a062a07                                         .*

00025c54 <attAlChUuid>:
   25c54:	2a052a06                                         .*

00025c56 <attScChUuid>:
   25c56:	2a042a05                                         .*

00025c58 <attPpcpChUuid>:
   25c58:	2a032a04                                         .*

00025c5a <attRaChUuid>:
   25c5a:	2a022a03                                         .*

00025c5c <attPpfChUuid>:
   25c5c:	2a012a02                                         .*

00025c5e <attApChUuid>:
   25c5e:	2a002a01                                         .*

00025c60 <attDnChUuid>:
   25c60:	29082a00                                         .*

00025c62 <attHidRimUuid>:
   25c62:	29072908                                         .)

00025c64 <attHidErmUuid>:
   25c64:	29062907                                         .)

00025c66 <attValRangeUuid>:
   25c66:	29052906                                         .)

00025c68 <attAggFmtUuid>:
   25c68:	29042905                                         .)

00025c6a <attChPresFmtUuid>:
   25c6a:	29032904                                         .)

00025c6c <attSrvChCfgUuid>:
   25c6c:	29022903                                         .)

00025c6e <attCliChCfgUuid>:
   25c6e:	29012902                                         .)

00025c70 <attChUserDescUuid>:
   25c70:	29002901                                         .)

00025c72 <attChExtUuid>:
   25c72:	28032900                                         .)

00025c74 <attChUuid>:
   25c74:	28022803                                         .(

00025c76 <attIncUuid>:
   25c76:	28012802                                         .(

00025c78 <attSecSvcUuid>:
   25c78:	28002801                                         .(

00025c7a <attPrimSvcUuid>:
   25c7a:	181c2800                                         .(

00025c7c <attUdsSvcUuid>:
   25c7c:	1822181c                                         ..

00025c7e <attPlxsSvcUuid>:
   25c7e:	18131822                                         ".

00025c80 <attSpsSvcUuid>:
   25c80:	18121813                                         ..

00025c82 <attHidSvcUuid>:
   25c82:	18111812                                         ..

00025c84 <attAnsSvcUuid>:
   25c84:	18101811                                         ..

00025c86 <attBpsSvcUuid>:
   25c86:	180f1810                                         ..

00025c88 <attBasSvcUuid>:
   25c88:	180e180f                                         ..

00025c8a <attPassSvcUuid>:
   25c8a:	180d180e                                         ..

00025c8c <attHrsSvcUuid>:
   25c8c:	180c180d                                         ..

00025c8e <attWdsSvcUuid>:
   25c8e:	180b180c                                         ..

00025c90 <attNwaSvcUuid>:
   25c90:	180a180b                                         ..

00025c92 <attDisSvcUuid>:
   25c92:	1809180a                                         ..

00025c94 <attHtsSvcUuid>:
   25c94:	18081809                                         ..

00025c96 <attGlsSvcUuid>:
   25c96:	18071808                                         ..

00025c98 <attNdcsSvcUuid>:
   25c98:	18061807                                         ..

00025c9a <attRtusSvcUuid>:
   25c9a:	18051806                                         ..

00025c9c <attCtsSvcUuid>:
   25c9c:	18041805                                         ..

00025c9e <attTpsSvcUuid>:
   25c9e:	18031804                                         ..

00025ca0 <attLlsSvcUuid>:
   25ca0:	18021803                                         ..

00025ca2 <attIasSvcUuid>:
   25ca2:	18011802                                         ..

00025ca4 <attGattSvcUuid>:
   25ca4:	18001801                                         ..

00025ca6 <attGapSvcUuid>:
   25ca6:	00001800                                         ..

00025ca8 <attcSendReqTbl>:
   25ca8:	00000000 0000cb47 0000cc65 0000cc65     ....G...e...e...
   25cb8:	0000cc65 0000ca5d 0000cc65 0000ca5d     e...]...e...]...
   25cc8:	0000cc65 0000ca5d 0000cb79 0000cbb7     e...]...y.......
   25cd8:	0000ca5d                                ]...

00025cdc <attcFcnIf>:
   25cdc:	0000cafd 0000c501 0000cda5 0000cce9     ................

00025cec <attcProcRspTbl>:
   25cec:	0000cea1 0000cf95 0000cecd 0000d289     ................
   25cfc:	0000cecd 0000cf8d 0000d2fb 0000cf8d     ................
   25d0c:	0000cecd 0000cf8f 00000000 0000d4af     ................
   25d1c:	0000cf8f                                ....

00025d20 <attsIndFcnIf>:
   25d20:	0000c505 0000d7f1 0000d80b 0000d9b1     ................

00025d30 <attsMinPduLen>:
   25d30:	07050300 05050305 05030305 01000002     ................
   25d40:	0000000f                                ....

00025d44 <attsFcnIf>:
   25d44:	0000db13 0000daa5 0000dab1 0000dba1     ................
   25d54:	00002801                                .(..

00025d58 <dmAdvAct>:
   25d58:	0000f19d 0000f1bd 0000f1dd 0000f201     ................
   25d68:	0000f0fd 0000f2d1 0000f225              ........%...

00025d74 <dmAdvFcnIf>:
   25d74:	0000f15d 0000f229 0000f0ff              ]...).......

00025d80 <dmConnSpecDefaults>:
   25d80:	00280018 07d00000 00000000              ..(.........

00025d8c <dmConnFcnIf>:
   25d8c:	0000f385 0000f5bd 0000f655              ........U...

00025d98 <dmConn2FcnIf>:
   25d98:	0000fe5d 0000f491 0000f66d              ].......m...

00025da4 <dmConnActSetMain>:
   25da4:	0000f369 0000f37d 0000f701 0000f76d     i...}.......m...
   25db4:	0000f77b 0000f36b                       {...k...

00025dbc <dmConnActSetSlave>:
   25dbc:	0000fc85 0000fca3 0000fba1 0000fcb9     ................
   25dcc:	0000fccf 0000fbfd                       ........

00025dd4 <dmConnStateTbl>:
   25dd4:	00001001 00002002 00000000 00000000     ..... ..........
   25de4:	00002303 00000000 00010000 00011104     .#..............
   25df4:	00010001 00010001 02030300 00010300     ................
   25e04:	00010001 21000002 00020002 00020002     .......!........
   25e14:	24000002 24002303 00020002 00030002     ...$.#.$........
   25e24:	00030104 22031203 25031303 00030003     ......."...%....
   25e34:	05030400 05030003 00040004 00040004     ................
   25e44:	00040004 04000004 04000104 00040004     ................
   25e54:	00000004                                ....

00025e58 <dmDevFcnIf>:
   25e58:	0000fe5d 0000fd39 0000fd9d              ]...9.......

00025e64 <dmHciToIdTbl>:
   25e64:	03030307 04020303 04040404 05050505     ................
   25e74:	07070705 06060607 05060606 07040405     ................
   25e84:	04070407 04050504 09090904 00000202     ................
   25e94:	070b0b0b 00020002 0000000a              ............

00025ea0 <dmFcnDefault>:
   25ea0:	0000fe5d 0000fe5f 0000fe5f              ]..._..._...

00025eac <dmEvtCbackLen>:
   25eac:	00040004 000c0004 00040004 0024001c     ..............$.
   25ebc:	000e000a 00040006 00040006 00220006     ..............".
   25ecc:	00080010 00240006 00140064 00040006     ......$.d.......
   25edc:	0006000a 00060006 000c000c 000e0006     ................
   25eec:	0008000e 000a0006 000a0006 000a0006     ................
   25efc:	0004000c 00200004 00060006 00060016     ...... .........
   25f0c:	00100010 00440004 00040046              ......D.F...

00025f18 <dmPrivAct>:
   25f18:	00010037 0000ffb1 0000ffe9 00010011     7...............
   25f28:	00010029 00010099 0001002d              ).......-...

00025f34 <dmPrivFcnIf>:
   25f34:	0000ff9d 000100ad 0000ff89              ............

00025f40 <dmScanAct>:
   25f40:	00010405 0001047d 00010499              ....}.......

00025f4c <dmScanFcnIf>:
   25f4c:	000103d1 0001049d 000103bd              ............

00025f58 <dmSecFcnIf>:
   25f58:	0000fe5d 00010651 00010579 d4f6493f     ]...Q...y...?I..
   25f68:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   25f78:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   25f88:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   25f98:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   25fa8:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   25fb8:	2430ed8f d08e1c74 8bd28915              ..0$t.......

00025fc4 <dmSecLescFcnIf>:
   25fc4:	0000fe5d 0000fe5f 000107c9              ]..._.......

00025fd0 <smpPktLenTbl>:
   25fd0:	11070700 0b110211 02110811 00021141     ............A...

00025fe0 <CSWTCH.23>:
   25fe0:	00026e25 00027189 00026e32 00026e41     %n...q..2n..An..
   25ff0:	00026e4e 00026e5f 00026e67 00026e7a     Nn.._n..gn..zn..
   26000:	00026e8a 00026e9c 00026eaa 00026eb7     .n...n...n...n..
   26010:	00026ec9 00026eda 00026eeb 00026ef7     .n...n...n...n..
   26020:	00026f00 00026f0b 00026f15 00026f21     .o...o...o..!o..
   26030:	00026f29 00026f3a 00026f4c 00026f5e     )o..:o..Lo..^o..
   26040:	00026f6b 00026f77 00026f83 00026f91     ko..wo...o...o..
   26050:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

00026060 <smpScF5Key>:
   26060:	656c7462                                btle

00026064 <smpiScSmIf>:
   26064:	00026104 000262cc 000262bb              .a...b...b..

00026070 <CSWTCH.2>:
   26070:	00026fac 0002718b 00026fb3 00026fc1     .o...q...o...o..
   26080:	00026fcc 00026fd6 00026fe4 00026ff4     .o...o...o...o..
   26090:	00027000 0002700f 0002701e 0002702f     .p...p...p../p..
   260a0:	0002703d 00027047 00027050 0002705a     =p..Gp..Pp..Zp..
   260b0:	00027065 00027071 00027081 00026fa2     ep..qp...p...o..
   260c0:	00027091 000270a0 000270b1 000270bf     .p...p...p...p..
   260d0:	000270cc 000270d9 000270eb 000270f8     .p...p...p...p..
   260e0:	00027105 00027112 0002711d 00027129     .q...q...q..)q..
   260f0:	0002713a 0002714b 00027156 00027160     :q..Kq..Vq..`q..
   26100:	0002716b                                kq..

00026104 <smpiScStateTbl>:
   26104:	000262a6 000262a0 00026297 00026291     .b...b...b...b..
   26114:	0002628b 0002627f 00026279 00026273     .b...b..yb..sb..
   26124:	0002626d 00026267 00026261 00026255     mb..gb..ab..Ub..
   26134:	0002624f 00026249 00026243 0002623d     Ob..Ib..Cb..=b..
   26144:	00026234 0002622e 00026228 00026222     4b...b..(b.."b..
   26154:	0002621c 00026216 00026210 0002620a     .b...b...b...b..
   26164:	00026204 000261fe 000261f8 000261f2     .b...a...a...a..
   26174:	000261ec 000261e6 000261e0 000261da     .a...a...a...a..
   26184:	000261d4 000261cb 000261bc 000261ad     .a...a...a...a..
   26194:	00026198                                .a..

00026198 <smpiScStateTblAttempts>:
   26198:	060b000f 01010a24 01000a0d 07010003     ....$...........
   261a8:	00000024 15230600                                $....

000261ad <smpiScStateTblKeyDist>:
   261ad:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

000261bc <smpiScStateTblEncrypt>:
   261bc:	09142308 22030200 03001c00 0b000000              .#.....".......

000261cb <smpiScStateTblStkCalc>:
   261cb:	0d13220b 00000924 12210b00                       ."..$....

000261d4 <smpiScStateTblCnfVerCalc2>:
   261d4:	0012210b 200b0000                                .!....

000261da <smpiScStateTblCnfVerCalc1>:
   261da:	0008200b 1f060000                                . ....

000261e0 <smpiScStateTblPairRand>:
   261e0:	00071f06 1e060000                                ......

000261e6 <smpiScStateTblPairCnf>:
   261e6:	00111e06 1d0b0000                                ......

000261ec <smpiScStateTblCnfCalc2>:
   261ec:	00061d0b 1c0b0000                                ......

000261f2 <smpiScStateTblCnfCalc1>:
   261f2:	00051c0b 1b040000                                ......

000261f8 <smpiScStateTblLegacyPin>:
   261f8:	00041b04 22060000                                ......

000261fe <smpiScStateTblVerifyDHCheck>:
   261fe:	00302206 191b0000                                ."0...

00026204 <smpiScStateTblDhCalcF6Eb>:
   26204:	002f191b 181b0000                                ../...

0002620a <smpiScStateTblDhCalcF6Ea>:
   2620a:	002e181b 171b0000                                ......

00026210 <smpiScStateTblCalcF5LTK>:
   26210:	002d171b 161b0000                                ..-...

00026216 <smpiScStateTblCalcF5MacKey>:
   26216:	002c161b 151b0000                                ..,...

0002621c <smpiScStateTblCalcF5TKey>:
   2621c:	002b151b 14180000                                ..+...

00026222 <smpiScStateTblCalcDHKey>:
   26222:	002a1418 13060000                                ..*...

00026228 <smpiScStateTblOobWaitRand>:
   26228:	00281306 121b0000                                ..(...

0002622e <smpiScStateTblOobSendRand>:
   2622e:	0027121b 0c190000                                ..'...

00026234 <smpiScStateTblPasskeyRepeat>:
   26234:	1a210c19 00002913 25101b00                       ..!..)...

0002623d <smpiScStateTblPasskeyCheck>:
   2623d:	0025101b 0f060000                                ..%...

00026243 <smpiScStateTblPasskeyRand>:
   26243:	00220f06 0e060000                                .."...

00026249 <smpiScStateTblPasskeyCnf>:
   26249:	00240e06 0d1b0000                                ..$...

0002624f <smpiScStateTblPasskeyCalc>:
   2624f:	00230d1b 0b060000                                ..#...

00026255 <smprScStateTblPasskeyKeypress>:
   26255:	161f0b06 0c04200b 00000021              ..... ..!...

00026261 <smpiScStateTblJwNcWaitUser>:
   26261:	00291315 0a1b0000                                ..)...

00026267 <smpiScStateTblJwNcCheck2>:
   26267:	001d0a1b 091b0000                                ......

0002626d <smpiScStateTblJwNcCheck1>:
   2626d:	001c091b 08060000                                ......

00026273 <smpiScStateTblJwNcRand>:
   26273:	001b0806 07060000                                ......

00026279 <smpiScStateTblJwNcWaitCnf>:
   26279:	001a0706 06120000                                ......

0002627f <smpiScStateTblAuthSelect>:
   2627f:	13190612 11141e0b 00000026              ........&...

0002628b <smpiScStateTblPubKey>:
   2628b:	00180506 04040000                                ......

00026291 <smpiScStateTblLescPin>:
   26291:	00170404 03100000                                ......

00026297 <smpiScStateTblModeSelect>:
   26297:	11000310 0000001a 10020600                       .........

000262a0 <smpiScStateTblPairRsp>:
   262a0:	00100206 01010000                                ......

000262a6 <smpiScStateTblIdle>:
   262a6:	0a0d0101 00030100 0f00060e 0f000007     ................
   262b6:	00000000 02000a00                                .....

000262bb <smpiScStateTblCommon>:
   262bb:	0702000a 00030200 02000f03 00000000     ................
	...

000262cc <smpiScActionTbl>:
   262cc:	000121cd 000119bf 000119d1 000119e7     .!..............
   262dc:	0001228f 000122b1 000122b9 00012303     ."..."..."...#..
   262ec:	00012327 00012561 00012585 0001258d     '#..a%...%...%..
   262fc:	000125af 00012781 000127f1 00012805     .%...'...'...(..
   2630c:	0001282f 00012895 000128eb 0001294d     /(...(...(..M)..
   2631c:	00012991 00012a15 00012a43 00012a6d     .)...*..C*..m*..
   2632c:	00012a69 00012a77 00012aad 00012ad9     i*..w*...*...*..
   2633c:	00012afb 00011b3f 00011a61 00011b83     .*..?...a.......
   2634c:	00011bb9 00012b37 00012bb1 00012bf1     ....7+...+...+..
   2635c:	00012bf7 00012bfb 00012c4b 00012cad     .+...+..K,...,..
   2636c:	00012d03 00011bf9 00011c6d 00011ccd     .-......m.......
   2637c:	00011d3d 00011dad 00011e1b 00012d25     =...........%-..
   2638c:	00012d4f                                O-..

00026390 <smpiSmIf>:
   26390:	0002639c 00026460 0002644e              .c..`d..Nd..

0002639c <smpiStateTbl>:
   2639c:	00026439 00026433 0002642d 00026427     9d..3d..-d..'d..
   263ac:	00026421 0002641b 00026415 0002640f     !d...d...d...d..
   263bc:	00026409 00026400 000263f4 000263e5     .d...d...c...c..
   263cc:	000263d0                                .c..

000263d0 <smpiStateTblAttempts>:
   263d0:	060b000f 01010a0c 01000a0d 07010003     ................
   263e0:	0000000c 150b0600                                .....

000263e5 <smpiStateTblKeyDist>:
   263e5:	0c150b06 000e160b 000b030c 08000000              ...............

000263f4 <smpiStateTblEncrypt>:
   263f4:	09140b08 0a030200 00000000              ............

00026400 <smpiStateTblStkCalc>:
   26400:	0d130a0b 0000090c 12090b00                       .........

00026409 <smpiStateTblCnfVerCalc2>:
   26409:	0012090b 080b0000                                ......

0002640f <smpiStateTblCnfVerCalc1>:
   2640f:	0008080b 07060000                                ......

00026415 <smpiStateTblPairRand>:
   26415:	00070706 06060000                                ......

0002641b <smpiStateTblPairCnf>:
   2641b:	00110606 050b0000                                ......

00026421 <smpiStateTblCnfCalc2>:
   26421:	0006050b 040b0000                                ......

00026427 <smpiStateTblCnfCalc1>:
   26427:	0005040b 03040000                                ......

0002642d <smpiStateTblPin>:
   2642d:	00040304 02060000                                ......

00026433 <smpiStateTblPairRsp>:
   26433:	00100206 01010000                                ......

00026439 <smpiStateTblIdle>:
   26439:	0a0d0101 00030100 0f00060e 0f000007     ................
   26449:	00000000 02000a00                                .....

0002644e <smpiStateTblCommon>:
   2644e:	0702000a 00030200 02000f03 00000000     ................
	...

00026460 <smpiActionTbl>:
   26460:	000121cd 00012201 00012227 0001224f     .!..."..'"..O"..
   26470:	0001228f 000122b1 000122b9 00012303     ."..."..."...#..
   26480:	00012327 00012561 00012585 0001258d     '#..a%...%...%..
   26490:	000125af 00012781 000127f1 00012805     .%...'...'...(..
   264a0:	0001282f 00012895 000128eb 0001294d     /(...(...(..M)..
   264b0:	00012991 00012a15 00012a43              .)...*..C*..

000264bc <smprScSmIf>:
   264bc:	0002655c 00026734 00026722              \e..4g.."g..

000264c8 <CSWTCH.2>:
   264c8:	00027180 00027187 00027196 000271a4     .q...q...q...q..
   264d8:	00027176 000271ae 000271bc 000271c9     vq...q...q...q..
   264e8:	000271da 000271e9 000271fa 00027176     .q...q...q..vq..
   264f8:	00027208 00027216 00027220 0002722a     .r...r.. r..*r..
   26508:	00027235 00027241 00027251 00027261     5r..Ar..Qr..ar..
   26518:	00027176 00027271 00027280 00027291     vq..qr...r...r..
   26528:	0002729f 000272ac 000272b9 000272c6     .r...r...r...r..
   26538:	000272d3 000272e0 000272ed 000272f9     .r...r...r...r..
   26548:	0002730a 0002731b 00027326 00027330     .s...s..&s..0s..
   26558:	0002733b                                ;s..

0002655c <smprScStateTbl>:
   2655c:	00026707 00026701 000266f8 000266ec     .g...g...f...f..
   2656c:	000266f2 000266e0 000266da 000266d4     .f...f...f...f..
   2657c:	000266ce 000266c8 000266b9 000266b3     .f...f...f...f..
   2658c:	000266ad 000266a7 000266a1 0002669b     .f...f...f...f..
   2659c:	00026692 00026686 0002668c 00026680     .f...f...f...f..
   265ac:	0002667a 00026674 0002666e 00026668     zf..tf..nf..hf..
   265bc:	00026662 0002665c 00026653 0002664a     bf..\f..Sf..Jf..
   265cc:	00026644 0002663e 00026638 00026632     Df..>f..8f..2f..
   265dc:	0002662c 00026623 00026614 00026605     ,f..#f...f...f..
   265ec:	000265f0                                .e..

000265f0 <smprScStateTblAttempts>:
   265f0:	060e000f 00050f24 01000a10 07010003     ....$...........
   26600:	00000024 33230600                                $....

00026605 <smprScStateTblKeyDist>:
   26605:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

00026614 <smprScStateTblEncrypt>:
   26614:	09322308 22030200 03001c00 0b000000              .#2....".......

00026623 <smprScStateTblStkCalc>:
   26623:	0d31220b 00000c24 30210b00                       ."1.$....

0002662c <smprStateTblCnfVerCalc2>:
   2662c:	0030210b 200b0000                                .!0...

00026632 <smprStateTblCnfVerCalc1>:
   26632:	000b200b 1f060000                                . ....

00026638 <smprStateTblPairRand>:
   26638:	000a1f06 1e0b0000                                ......

0002663e <smprStateTblCnfCalc2>:
   2663e:	00091e0b 1d0b0000                                ......

00026644 <smprStateTblCnfCalc1>:
   26644:	00081d0b 1c040000                                ......

0002664a <smprStateTblPinPair2>:
   2664a:	06071c04 00002f1c 051b0400                       ...../...

00026653 <smprStateTblPinPair1>:
   26653:	06051b04 0000151b 2e221b00                       .........

0002665c <smprScStateTblDhCalcF6Eb>:
   2665c:	002e221b 191b0000                                ."....

00026662 <smprScStateTblDhCalcF6Ea>:
   26662:	002d191b 181b0000                                ..-...

00026668 <smprScStateTblCalcF5LTK>:
   26668:	002c181b 171b0000                                ..,...

0002666e <smprScStateTblCalcF5MacKey>:
   2666e:	002b171b 161b0000                                ..+...

00026674 <smprScStateTblCalcF5TKey>:
   26674:	002a161b 15180000                                ..*...

0002667a <smprScStateTblCalcDHKey>:
   2667a:	00291518 14060000                                ..)...

00026680 <smprScStateTblWaitDhCheck>:
   26680:	00281406 131b0000                                ..(...

00026686 <smprScStateTblOobSendRand>:
   26686:	0026131b 11060000                                ..&...

0002668c <smprScStateTblOobWaitRand>:
   2668c:	00251106 0c190000                                ..%...

00026692 <smprScStateTblPasskeyRepeat>:
   26692:	1a000c19 00002713 23101b00                       .....'...

0002669b <smprScStateTblPasskeyCheck>:
   2669b:	0023101b 0f060000                                ..#...

000266a1 <smprScStateTblPasskeyRand>:
   266a1:	00220f06 0e1b0000                                .."...

000266a7 <smprScStateTblPasskeyCalc>:
   266a7:	00210e1b 0d060000                                ..!...

000266ad <smprScStateTblPasskeyWaitCnf>:
   266ad:	001e0d06 0d040000                                ......

000266b3 <smprScStateTblPassWaitAuthRsp>:
   266b3:	001f0d04 0a060000                                ......

000266b9 <smprScStateTblPassKeyKeypress>:
   266b9:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

000266c8 <smprScStateTblJwNcWaitUser>:
   266c8:	00271315 091b0000                                ..'...

000266ce <smprScStateTblJwNcCalcG2>:
   266ce:	0019091b 08060000                                ......

000266d4 <smprScStateTblJwNcWaitRand>:
   266d4:	00180806 071b0000                                ......

000266da <smprScStateTblJwNcSetup>:
   266da:	0017071b 06120000                                ......

000266e0 <smprScStateTblAuthSelect>:
   266e0:	13160612 12141a0a 00000024              ........$...

000266ec <smprScStateTblPubKey>:
   266ec:	00040506 03040000                                ......

000266f2 <smprScStateTblLescPin>:
   266f2:	00060304 04100000                                ......

000266f8 <smprScStateTblModeSelect>:
   266f8:	11000410 0000001a 14020200                       .........

00026701 <smprScStateTblApiPairRsp>:
   26701:	00140202 00050000                                ......

00026707 <smprScStateTblIdle>:
   26707:	0a100005 00080100 12000912 07130106     ................
   26717:	00031100 00000f01 0a000000                       ...........

00026722 <smprScStateTblCommon>:
   26722:	0702000a 00030200 02000f03 00000000     ................
	...

00026734 <smprScActionTbl>:
   26734:	000121cd 000119bf 000119d1 000119e7     .!..............
   26744:	00013119 00012267 000130c9 0001228f     .1..g"...0..."..
   26754:	000122b1 000122b9 00012303 00012327     ."..."...#..'#..
   26764:	00012561 000125af 0001258d 00012585     a%...%...%...%..
   26774:	00012db5 00012ddf 00012deb 00012df3     .-...-...-...-..
   26784:	00012e65 00012ef5 0001312f 00013171     e......./1..q1..
   26794:	00013177 00011b3f 00011a61 00011b83     w1..?...a.......
   267a4:	00011bb9 00013197 000131e9 000131ff     .....1...1...1..
   267b4:	000131a7 00013215 00013219 00013255     .1...2...2..U2..
   267c4:	000132bf 000132c7 00013335 0001338d     .2...2..53...3..
   267d4:	000133a5 00011c6d 00011ccd 00011d3d     .3..m.......=...
   267e4:	00011dad 00011e1b 000133c7 00012f17     .........3.../..
   267f4:	00012f39 00012f95 0001305d 0001309f     9/.../..]0...0..
   26804:	00012ff5                                ./..

00026808 <smprSmIf>:
   26808:	00026814 000268e4 000268d2              .h...h...h..

00026814 <smprStateTbl>:
   26814:	000268b7 000268b1 000268a8 0002689f     .h...h...h...h..
   26824:	00026899 00026893 0002688d 00026887     .h...h...h...h..
   26834:	00026881 00026878 0002686c 0002685d     .h..xh..lh..]h..
   26844:	00026848                                Hh..

00026848 <smprStateTblAttempts>:
   26848:	060c000f 00050b0c 01000a0e 07010003     ................
   26858:	0000000c 180b0c00                                .....

0002685d <smprStateTblKeyDist>:
   2685d:	06180b0c 000e190b 000b030d 08000000              ...............

0002686c <smprStateTblEncrypt>:
   2686c:	09170b08 0a030200 00000000              ............

00026878 <smprStateTblStkCalc>:
   26878:	0d160a0b 00000a0c 15090b00                       .........

00026881 <smprStateTblCnfVerCalc2>:
   26881:	0015090b 080b0000                                ......

00026887 <smprStateTblCnfVerCalc1>:
   26887:	0009080b 07060000                                ......

0002688d <smprStateTblPairRand>:
   2688d:	00080706 060b0000                                ......

00026893 <smprStateTblCnfCalc2>:
   26893:	0007060b 050b0000                                ......

00026899 <smprStateTblCnfCalc1>:
   26899:	0006050b 04040000                                ......

0002689f <smprStateTblPinPair2>:
   2689f:	06050404 00001404 04030400                       .........

000268a8 <smprStateTblPinPair1>:
   268a8:	06040304 00001303 12020200                       .........

000268b1 <smprStateTblApiPairRsp>:
   268b1:	00120202 00050000                                ......

000268b7 <smprStateTblIdle>:
   268b7:	0a0e0005 00080100 10000910 07110106     ................
   268c7:	00030f00 00000f01 0a000000                       ...........

000268d2 <smprStateTblCommon>:
   268d2:	0702000a 00030200 02000f03 00000000     ................
	...

000268e4 <smprActionTbl>:
   268e4:	000121cd 00012201 00012227 0001224f     .!..."..'"..O"..
   268f4:	00012267 0001228f 000122b1 000122b9     g"..."..."..."..
   26904:	00012303 00012327 00012561 00012585     .#..'#..a%...%..
   26914:	0001258d 000125af 00012db5 00012ddf     .%...%...-...-..
   26924:	00012deb 00012df3 00012e65 00012ef5     .-...-..e.......
   26934:	00012f17 00012f39 00012f95 0001305d     ./..9/.../..]0..
   26944:	00012ff5 0001309f                       ./...0..

0002694c <dmConnActSetMaster>:
   2694c:	00011fb5 00011f31 00011f35 00011f3d     ....1...5...=...

0002695c <attCfg>:
   2695c:	0000000f 041e01e0                       ........

00026964 <smpCfg>:
   26964:	07030bb8 00000310                       ........

0002696c <gattSc>:
   2696c:	00025c56 00000000                       V\......

00026974 <gattScCcc>:
   26974:	00025c6e 00000004                       n\......

0002697c <watchAdvCfg>:
   2697c:	00000000 00300000 00000320              ......0. ...

00026988 <watchSlaveCfg>:
   26988:	00000001                                ....

0002698c <watchSecCfg>:
   2698c:	00010001 00000000                       ........

00026994 <watchUpdateCfg>:
   26994:	00000000 03200258 02580003 00000005     ....X. ...X.....

000269a4 <watchConnCfg>:
   269a4:	00a000a0 02580000 00000000              ......X.....

000269b0 <watchSmpCfg>:
   269b0:	07030bb8 00000310                       ........

000269b8 <watchDiscCfg>:
   269b8:	00000000                                ....

000269bc <watchAppCfg>:
   269bc:	00000101                                ....

000269c0 <watchMasterCfg>:
   269c0:	00300060 01000fa0                       `.0.....

000269c8 <watchAdvDataDisc>:
   269c8:	02050102 ff03000a 1407005f 18111805     ........_.......
   269d8:	0000180e                                ....

000269dc <watchScanDataDisc>:
   269dc:	61570906 00686374                       ..Watch.

000269e4 <watchCccIndVal>:
   269e4:	00000002                                ....

000269e8 <watchCccNtfVal>:
   269e8:	00000001                                ....

000269ec <watchAncpEnNewVal>:
   269ec:	0000ff00                                ....

000269f0 <watchAncpNotNewVal>:
   269f0:	0000ff04                                ....

000269f4 <watchAncpEnUnrVal>:
   269f4:	0000ff01                                ....

000269f8 <watchAncpNotUnrVal>:
   269f8:	0000ff05                                ....

000269fc <watchHrsRstEnExp>:
   269fc:	00000001                                ....

00026a00 <watchDiscSlaveCfgList>:
   26a00:	00000000 00000200 00000000 00000400     ................
   26a10:	00000000 00000500 00000000 00000600     ................
   26a20:	00000000 00000900 00000000 00000d00     ................
   26a30:	00000000 00000f00 000269e4 00000102     .........i......
   26a40:	000269e8 00000302 000269e8 00000802     .i.......i......
   26a50:	000269e8 00000b02 000269e8 00000e02     .i.......i......
   26a60:	000269e8 00001002 000269ec 00000c02     .i.......i......
   26a70:	000269f0 00000c02 000269f4 00000c02     .i.......i......
   26a80:	000269f8 00000c02                       .i......

00026a88 <watchDiscMasterCfgList>:
	...
   26a94:	00000100 00000000 00000200 00000000     ................
   26aa4:	00000300 00000000 00000400 00000000     ................
   26ab4:	00000500 00000000 00000600 00000000     ................
   26ac4:	00000200 000269fc 00000c01 000269e8     .....i.......i..
   26ad4:	00000a02                                ....

00026ad8 <watchDiscConnCfgList>:
   26ad8:	00000000 00000600 00000000 00000900     ................
   26ae8:	00000000 00000d00 000269ec 00000c02     .........i......
   26af8:	000269f0 00000c02 000269f4 00000c02     .i.......i......
   26b08:	000269f8 00000c02                       .i......

00026b10 <watchCccSet>:
   26b10:	00020013 00000001                       ........

00026b18 <hciEventMask>:
   26b18:	02008890 20008000                       ....... 

00026b20 <hciLeEventMask>:
   26b20:	000fffff 00000000                       ........

00026b28 <hciEventMaskPage2>:
   26b28:	00800000 00000000                       ........

00026b30 <hciEvtParseFcnTbl>:
   26b30:	00000000 00015e89 00015f8d 00016099     .....^..._...`..
   26b40:	000160fb 000161b1 00000000 000161df     .`...a.......a..
   26b50:	00016243 000162a3 000162f7 00016399     Cb...b...b...c..
   26b60:	000163f9 0001644f 000164a5 000164fb     .c..Od...d...d..
   26b70:	0001655d 000165cf 00016609 00016661     ]e...e...f..af..
   26b80:	00016685 0001671b 00016749 00016777     .f...g..Ig..wg..
   26b90:	000167a5 000167e1 0001681d 000166ab     .g...g...h...f..
   26ba0:	000166e3 0001684b 000168a1 000168f7     .f..Kh...h...h..
   26bb0:	00016965 00016993 000169e9 00016a97     ei...i...i...j..
   26bc0:	00016b59 00016c1b 00016c53 00016c8b     Yk...l..Sl...l..
   26bd0:	00016ce1 00016d23 00016d91 00016dbf     .l..#m...m...m..
   26be0:	00000000 000170cd 000170e7 00017155     .....p...p..Uq..
   26bf0:	00017195 00000000 0001733b 00000000     .q......;s......
   26c00:	00017315 00017315 00017315 00017315     .s...s...s...s..
   26c10:	00017315                                .s..

00026c14 <hciEvtCbackLen>:
   26c14:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   26c24:	44460610 06060606 16060c0c 0a08080e     ..FD............
   26c34:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   26c44:	04061016 04040404 00000004              ............

00026c50 <tipcCtsCt>:
   26c50:	00025c0e 00000002                       .\......

00026c58 <tipcCtsCtCcc>:
   26c58:	00025c6e 00000006                       n\......

00026c60 <tipcCtsLti>:
   26c60:	00025c42 00000000                       B\......

00026c68 <tipcCtsRti>:
   26c68:	00025c38 00000000                       8\......

00026c70 <anpcAnsSnac>:
   26c70:	00025bd8 00000002                       .[......

00026c78 <anpcAnsNa>:
   26c78:	00025bda 00000002                       .[......

00026c80 <anpcAnsNaCcc>:
   26c80:	00025c6e 00000006                       n\......

00026c88 <anpcAnsSuac>:
   26c88:	00025bd6 00000002                       .[......

00026c90 <anpcAnsUas>:
   26c90:	00025bdc 00000002                       .[......

00026c98 <anpcAnsUasCcc>:
   26c98:	00025c6e 00000006                       n\......

00026ca0 <anpcAnsAncp>:
   26ca0:	00025bde 00000002                       .[......

00026ca8 <disMfns>:
   26ca8:	00025c12 00000000                       .\......

00026cb0 <disMns>:
   26cb0:	00025c1c 00000000                       .\......

00026cb8 <disSns>:
   26cb8:	00025c1a 00000000                       .\......

00026cc0 <disHrs>:
   26cc0:	00025c16 00000000                       .\......

00026cc8 <disFrs>:
   26cc8:	00025c18 00000000                       .\......

00026cd0 <disSrs>:
   26cd0:	00025c14 00000000                       .\......

00026cd8 <disSid>:
   26cd8:	00025c1e 00000000                       .\......

00026ce0 <calc128Zeros>:
	...

00026cf0 <paspcPassAs>:
   26cf0:	00025be8 00000002                       .[......

00026cf8 <paspcPassAsCcc>:
   26cf8:	00025c6e 00000006                       n\......

00026d00 <paspcPassRs>:
   26d00:	00025be4 00000002                       .[......

00026d08 <paspcPassRsCcc>:
   26d08:	00025c6e 00000006                       n\......

00026d10 <paspcPassRcp>:
   26d10:	00025be6 00000000                       .[......

00026d18 <hrpcHrsHrm>:
   26d18:	00025bf8 00000002                       .[......

00026d20 <hrpcHrsHrmCcc>:
   26d20:	00025c6e 00000006                       n\......

00026d28 <hrpcHrsBsl>:
   26d28:	00025bf6 00000000                       .[......

00026d30 <hrpcHrsHrcp>:
   26d30:	00025bf4 00000000                       .[......

00026d38 <gapValSvc>:
   26d38:	00021800                                         ..

00026d3a <gapLenSvc>:
   26d3a:	05020002                                         ..

00026d3c <gapValApCh>:
   26d3c:	01000502 0005002a                                ....*.

00026d42 <gapLenApCh>:
   26d42:	00020005                                         ..

00026d44 <gapLenAp>:
   26d44:	00000002                                ....

00026d48 <gapValCarCh>:
   26d48:	a6000702 0005002a                                ....*.

00026d4e <gapLenCarCh>:
   26d4e:	00010005                                         ..

00026d50 <gapLenCar>:
   26d50:	00000001                                ....

00026d54 <gapValRpaoCh>:
   26d54:	c9000902 0005002a                                ....*.

00026d5a <gapLenRpaoCh>:
   26d5a:	00010005                                         ..

00026d5c <gapLenRpao>:
   26d5c:	00000001                                ....

00026d60 <gapList>:
   26d60:	00025c7a 00026d38 00026d3a 01000002     z\..8m..:m......
   26d70:	00025c74 00026d3c 00026d42 01000005     t\..<m..Bm......
   26d80:	00025c5e 1000500c 00026d44 01000002     ^\...P..Dm......
   26d90:	00025c74 00026d48 00026d4e 01000005     t\..Hm..Nm......
   26da0:	00025bba 10005010 00026d50 01000001     .[...P..Pm......
   26db0:	00025c74 00026d54 00026d5a 01000005     t\..Tm..Zm......
   26dc0:	00025ba4 10005014 00026d5c 01000001     .[...P..\m......

00026dd0 <gattValSvc>:
   26dd0:	00021801                                         ..

00026dd2 <gattLenSvc>:
   26dd2:	12200002                                         ..

00026dd4 <gattValScCh>:
   26dd4:	05001220 0005002a                                 ...*.

00026dda <gattLenScCh>:
   26dda:	00010005                                         ..

00026ddc <gattValSc>:
   26ddc:	ffff0001                                ....

00026de0 <gattLenSc>:
   26de0:	00020004                                         ..

00026de2 <gattLenScChCcc>:
   26de2:	5c7a0002                                         ..

00026de4 <gattList>:
   26de4:	00025c7a 00026dd0 00026dd2 01000002     z\...m...m......
   26df4:	00025c74 00026dd4 00026dda 01000005     t\...m...m......
   26e04:	00025c56 00026ddc 00026de0 00000004     V\...m...m......
   26e14:	00025c6e 10005018 00026de2 11200002     n\...P...m.... .

00026e24 <appReqActCfg>:
   26e24:	49504100 4941505f 45525f52 50410051     .API_PAIR_REQ.AP
   26e34:	41435f49 4c45434e 5145525f 49504100     I_CANCEL_REQ.API
   26e44:	5455415f 53525f48 50410050 45535f49     _AUTH_RSP.API_SE
   26e54:	49525543 525f5954 43005145 505f444d     CURITY_REQ.CMD_P
   26e64:	4300544b 505f444d 49524941 465f474e     KT.CMD_PAIRING_F
   26e74:	454c4941 4d440044 434e455f 54505952     AILED.DM_ENCRYPT
   26e84:	504d435f 4d44004c 434e455f 54505952     _CMPL.DM_ENCRYPT
   26e94:	4941465f 0044454c 435f4d44 5f4e4e4f     _FAILED.DM_CONN_
   26ea4:	534f4c43 53570045 45415f46 4d435f53     CLOSE.WSF_AES_CM
   26eb4:	49004c50 535f544e 5f444e45 5458454e     PL.INT_SEND_NEXT
   26ec4:	59454b5f 544e4900 58414d5f 5454415f     _KEY.INT_MAX_ATT
   26ed4:	54504d45 4e490053 41505f54 4e495249     EMPTS.INT_PAIRIN
   26ee4:	4d435f47 49004c50 545f544e 4f454d49     G_CMPL.INT_TIMEO
   26ef4:	49005455 4c5f544e 00435345 5f544e49     UT.INT_LESC.INT_
   26f04:	4147454c 49005943 4a5f544e 434e5f57     LEGACY.INT_JW_NC
   26f14:	544e4900 5341505f 59454b53 544e4900     .INT_PASSKEY.INT
   26f24:	424f4f5f 49504100 4553555f 4f435f52     _OOB.API_USER_CO
   26f34:	5249464e 5041004d 53555f49 4b5f5245     NFIRM.API_USER_K
   26f44:	52505945 00535345 5f495041 5059454b     EYPRESS.API_KEYP
   26f54:	53534552 504d435f 5357004c 43455f46     RESS_CMPL.WSF_EC
   26f64:	4d435f43 49004c50 505f544e 454e5f4b     C_CMPL.INT_PK_NE
   26f74:	49005458 505f544e 4d435f4b 57004c50     XT.INT_PK_CMPL.W
   26f84:	435f4653 5f43414d 4c504d43 5f484400     SF_CMAC_CMPL.DH_
   26f94:	43454843 41465f4b 52554c49 5f490045     CHECK_FAILURE.I_
   26fa4:	6e6b6e55 006e776f 44495f49 4900454c     Unknown.I_IDLE.I
   26fb4:	444f4d5f 45535f45 5443454c 4c5f4900     _MODE_SELECT.I_L
   26fc4:	5f435345 004e4950 55505f49 454b5f42     ESC_PIN.I_PUB_KE
   26fd4:	5f490059 48545541 4c45535f 00544345     Y.I_AUTH_SELECT.
   26fe4:	574a5f49 575f434e 5f544941 00464e43     I_JWNC_WAIT_CNF.
   26ff4:	574a5f49 525f434e 00444e41 574a5f49     I_JWNC_RAND.I_JW
   27004:	435f434e 4b434548 4900315f 4e574a5f     NC_CHECK_1.I_JWN
   27014:	48435f43 5f4b4345 5f490032 434e574a     C_CHECK_2.I_JWNC
   27024:	4941575f 53555f54 49005245 5f4b505f     _WAIT_USER.I_PK_
   27034:	5059454b 53534552 505f4900 41435f4b     KEYPRESS.I_PK_CA
   27044:	4900434c 5f4b505f 00464e43 4b505f49     LC.I_PK_CNF.I_PK
   27054:	4e41525f 5f490044 435f4b50 4b434548     _RAND.I_PK_CHECK
   27064:	505f4900 45525f4b 54414550 4f5f4900     .I_PK_REPEAT.I_O
   27074:	535f424f 5f444e45 444e4152 4f5f4900     OB_SEND_RAND.I_O
   27084:	575f424f 5f544941 444e4152 435f4900     OB_WAIT_RAND.I_C
   27094:	5f434c41 545f3546 0059454b 41435f49     ALC_F5_TKEY.I_CA
   270a4:	465f434c 414d5f35 59454b43 435f4900     LC_F5_MACKEY.I_C
   270b4:	5f434c41 4c5f3546 49004b54 4c41435f     ALC_F5_LTK.I_CAL
   270c4:	36465f43 0041455f 41435f49 465f434c     C_F6_EA.I_CALC_F
   270d4:	42455f36 565f4900 46495245 48445f59     6_EB.I_VERIFY_DH
   270e4:	4548435f 49004b43 47454c5f 5f594341     _CHECK.I_LEGACY_
   270f4:	004e4950 4e435f49 41435f46 315f434c     PIN.I_CNF_CALC_1
   27104:	435f4900 435f464e 5f434c41 5f490032     .I_CNF_CALC_2.I_
   27114:	52494150 464e435f 505f4900 5f524941     PAIR_CNF.I_PAIR_
   27124:	444e4152 435f4900 565f464e 435f5245     RAND.I_CNF_VER_C
   27134:	5f434c41 5f490031 5f464e43 5f524556     ALC_1.I_CNF_VER_
   27144:	434c4143 4900325f 4b54535f 4c41435f     CALC_2.I_STK_CAL
   27154:	5f490043 52434e45 00545059 454b5f49     C.I_ENCRYPT.I_KE
   27164:	49445f59 49005453 5454415f 54504d45     Y_DIST.I_ATTEMPT
   27174:	5f520053 6e6b6e55 006e776f 44495f52     S.R_Unknown.R_ID
   27184:	5200454c 4950415f 4941505f 53525f52     LE.R_API_PAIR_RS
   27194:	5f520050 45444f4d 4c45535f 00544345     P.R_MODE_SELECT.
   271a4:	55505f52 454b5f42 5f520059 48545541     R_PUB_KEY.R_AUTH
   271b4:	4c45535f 00544345 574a5f52 535f434e     _SELECT.R_JWNC_S
   271c4:	50555445 4a5f5200 5f434e57 54494157     ETUP.R_JWNC_WAIT
   271d4:	4e41525f 5f520044 434e574a 4c41435f     _RAND.R_JWNC_CAL
   271e4:	32475f43 4a5f5200 5f434e57 54494157     C_G2.R_JWNC_WAIT
   271f4:	4553555f 5f520052 4b5f4b50 52505945     _USER.R_PK_KEYPR
   27204:	00535345 4b505f52 4941575f 4e435f54     ESS.R_PK_WAIT_CN
   27214:	5f520046 435f4b50 00434c41 4b505f52     F.R_PK_CALC.R_PK
   27224:	4e41525f 5f520044 435f4b50 4b434548     _RAND.R_PK_CHECK
   27234:	505f5200 45525f4b 54414550 4f5f5200     .R_PK_REPEAT.R_O
   27244:	535f424f 5f444e45 444e4152 4f5f5200     OB_SEND_RAND.R_O
   27254:	575f424f 5f544941 444e4152 575f5200     OB_WAIT_RAND.R_W
   27264:	5f544941 435f4844 4b434548 435f5200     AIT_DH_CHECK.R_C
   27274:	5f434c41 545f3546 0059454b 41435f52     ALC_F5_TKEY.R_CA
   27284:	465f434c 414d5f35 59454b43 435f5200     LC_F5_MACKEY.R_C
   27294:	5f434c41 4c5f3546 52004b54 4c41435f     ALC_F5_LTK.R_CAL
   272a4:	36465f43 0041455f 41435f52 465f434c     C_F6_EA.R_CALC_F
   272b4:	42455f36 505f5200 505f4e49 5f524941     6_EB.R_PIN_PAIR_
   272c4:	5f520031 5f4e4950 52494150 5200325f     1.R_PIN_PAIR_2.R
   272d4:	464e435f 4c41435f 00315f43 4e435f52     _CNF_CALC_1.R_CN
   272e4:	41435f46 325f434c 505f5200 5f524941     F_CALC_2.R_PAIR_
   272f4:	444e4152 435f5200 565f464e 435f5245     RAND.R_CNF_VER_C
   27304:	5f434c41 5f520031 5f464e43 5f524556     ALC_1.R_CNF_VER_
   27314:	434c4143 5200325f 4b54535f 4c41435f     CALC_2.R_STK_CAL
   27324:	5f520043 52434e45 00545059 454b5f52     C.R_ENCRYPT.R_KE
   27334:	49445f59 52005453 5454415f 54504d45     Y_DIST.R_ATTEMPT
   27344:	00000053                                S...

00027348 <g_AM_BSP_GPIO_ITM_SWO>:
   27348:	00000007                                ....

0002734c <ccitt_table>:
   2734c:	80050000 000a800f 001e801b 80110014     ................
   2735c:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   2736c:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   2737c:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   2738c:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   2739c:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   273ac:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   273bc:	00968093 8099009c 808d0088 00828087     ................
   273cc:	01868183 8189018c 819d0198 01928197     ................
   273dc:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   273ec:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   273fc:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   2740c:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   2741c:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   2742c:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   2743c:	81150110 011a811f 010e810b 81010104     ................
   2744c:	03068303 8309030c 831d0318 03128317     ................
   2745c:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   2746c:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   2747c:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   2748c:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   2749c:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   274ac:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   274bc:	83950390 039a839f 038e838b 83810384     ................
   274cc:	82850280 028a828f 029e829b 82910294     ................
   274dc:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   274ec:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   274fc:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   2750c:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   2751c:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   2752c:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   2753c:	02168213 8219021c 820d0208 02028207     ................

0002754c <am_ble_buffer_patch_data>:
   2754c:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   2755c:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   2756c:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   2757c:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   2758c:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   275c8:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   275d8:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   275e8:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   275f8:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   27608:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   27618:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   27628:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   27638:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   27648:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   27658:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   27668:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   27678:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   27688:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   27698:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   276a8:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   276b8:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   276c8:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   276d8:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   276e8:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   276f8:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   27708:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   27718:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   27728:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   27738:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   27748:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   27758:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   27768:	8f809011 9812900e 900d3008 30309812     .........0....00
   27778:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   27788:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   27798:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   277a8:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   277b8:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   277c8:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   277d8:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   277e8:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   277f8:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   27808:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   27818:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   27828:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   27838:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   27858:	00000021 00000000 00000001 00000000     !...............
   27868:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   27878:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   27888:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   27898:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   278a8:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   278b8:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   278c8:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   278d8:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   278e8:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   278f8:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   27908:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   27918:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   27928:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   27938:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   27948:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   27958:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   27968:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   27978:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   27988:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   27998:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   279a8:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   279b8:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   279c8:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   279d8:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   279e8:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   279f8:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   27a08:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   27a18:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   27a28:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   27a38:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   27a48:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   27a58:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   27a68:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   27a78:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   27a88:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   27a98:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   27aa8:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   27ab8:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   27ac8:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   27ad8:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   27ae8:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   27af8:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   27b08:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   27b18:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   27b28:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   27b38:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   27b48:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   27b58:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   27b68:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   27b78:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   27b88:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   27b98:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   27ba8:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   27bb8:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   27bc8:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   27bd8:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   27be8:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   27bf8:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   27c08:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   27c18:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   27c28:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   27c38:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   27c48:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   27c58:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   27c68:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   27c78:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   27c88:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   27c98:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   27ca8:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   27cb8:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   27cc8:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   27cd8:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   27ce8:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   27cf8:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   27d08:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   27d18:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   27d28:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   27d38:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   27d48:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   27d58:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   27d68:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   27d78:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   27d88:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   27d98:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   27da8:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   27db8:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   27dc8:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   27dd8:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   27de8:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   27df8:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   27e08:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   27e18:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   27e28:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   27e38:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   27e48:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   27e58:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   27e68:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   27e78:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   27e88:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   27e98:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   27ea8:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   27eb8:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   27ec8:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   27ed8:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   27ee8:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   27ef8:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   27f08:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   27f18:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   27f28:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   27f38:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   27f48:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   27f58:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   27f68:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   27f78:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   27f88:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   27f98:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   27fa8:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   27fb8:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   27fc8:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   27fd8:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   27fe8:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   27ff8:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   28008:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   28018:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   28028:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   28038:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   28048:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   28058:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   28068:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   28078:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   28088:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   28098:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   280a8:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   280b8:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   280c8:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   280d8:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   280e8:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   280f8:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   28108:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   28118:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   28128:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   28138:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   28148:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   28158:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   28168:	00010341 50804000 000093a5 00000466     A....@.P....f...
   28178:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   28188:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   28198:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   281a8:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   281b8:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   281c8:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   281d8:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   281e8:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   281f8:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   28208:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   28218:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   28228:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   28238:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   28248:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   28258:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   28268:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   28278:	00004770 20006780 20006054              pG...g. T`. 

00028284 <am_hal_ble_num_default_patches>:
   28284:	00000003                                ....

00028288 <am_ble_performance_copy_patch_data>:
   28288:	006e1100 00000400 00000000 01c50101     ..n.............
   28298:	00000039 00000000 00000000 00000000     9...............
   282a8:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   282b8:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   282c8:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   282d8:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   282e8:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   282f8:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   28308:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   28318:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   28328:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   28338:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   28348:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   28358:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   28368:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   28378:	f000e00a e007fb94 b2c09801 fac7f000     ................
   28388:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   28398:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   283a8:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   283b8:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   283c8:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   283d8:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   283e8:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   283f8:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   28408:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   28418:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   28428:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   28438:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   28448:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   28458:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   28468:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   28478:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   28488:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   28498:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   284a8:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   284b8:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   284c8:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   284d8:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   284e8:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   284f8:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   28508:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   28518:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   28528:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   28538:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   28548:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   28558:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   28568:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   28578:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   28588:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   28598:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   285a8:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   285b8:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   285c8:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   285d8:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   285e8:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   285f8:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   28608:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   28618:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   28628:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   28638:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   28648:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   28658:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   28668:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   28678:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   28688:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   28698:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   286a8:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   286b8:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   286c8:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   286d8:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   286e8:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   286f8:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   28708:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   28718:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   28728:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   28738:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   28748:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   28758:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   28768:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   28778:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   28788:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   28798:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   287a8:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   287b8:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   287c8:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   287d8:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   287e8:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   287f8:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   28808:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   28818:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   28828:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   28838:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   28848:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   28858:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   28868:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   28878:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   28888:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   28898:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   288a8:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   288b8:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   288c8:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   288d8:	00400000 00804580 021e4580 00030000     ..@..E...E......
   288e8:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   288f8:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   28908:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   28918:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   28928:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   28938:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   28948:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   28958:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   28968:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   28978:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   28988:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   28998:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   289a8:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   289b8:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   289c8:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   289d8:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   289e8:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   289f8:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   28a08:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   28a18:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   28a28:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   28a38:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   28a48:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   28a58:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   28a68:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   28a78:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   28a88:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   28a98:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   28aa8:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   28ab8:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   28ac8:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   28ad8:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   28ae8:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   28af8:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   28b08:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   28b18:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   28b28:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   28b38:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   28b48:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   28b58:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   28b68:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   28b78:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   28b88:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   28b98:	00000001                                ....

00028b9c <am_hal_ble_num_default_patches_b0>:
   28b9c:	00000003                                ....

00028ba0 <am_hal_cachectrl_defaults>:
   28ba0:	00000308                                ....

00028ba4 <g_AM_HAL_GPIO_INPUT>:
   28ba4:	00001003                                ....

00028ba8 <g_ui8Bit76Capabilities>:
   28ba8:	02800101 80010180 80800101 80808080     ................
   28bb8:	80808080 80808008 01800180 80808080     ................
   28bc8:	80808080 01800402 01010401 80808080     ................
   28bd8:	00000101                                ....

00028bdc <g_ui8NCEtable>:
   28bdc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   28bec:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   28bfc:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   28c0c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   28c1c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   28c2c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   28c3c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   28c4c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   28c5c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   28c6c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   28c7c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   28c8c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   28c9c:	32221202 43231303                       .."2..#C

00028ca4 <g_ui8Inpen>:
   28ca4:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   28cb4:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   28cc4:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   28cd4:	00003130                                01..

00028cd8 <g_AM_HAL_GPIO_DISABLE>:
   28cd8:	00000003                                ....

00028cdc <g_AM_HAL_GPIO_OUTPUT>:
   28cdc:	00000403                                ....

00028ce0 <g_ui8nCEpins>:
   28ce0:	02070707 00080802 01020202 01010101     ................
   28cf0:	01010101 01010101 01010101 01010101     ................
   28d00:	01010101 08010101 01010008 01010101     ................
   28d10:	00000101                                ....

00028d14 <g_am_hal_mcuctrl_flash_size>:
   28d14:	00004000 00008000 00010000 00020000     .@..............
   28d24:	00040000 00080000 00100000 00200000     .............. .
   28d34:	00180000 00000000 00000000 00000000     ................
	...

00028d54 <g_am_hal_mcuctrl_sram_size>:
   28d54:	00004000 00008000 00010000 00020000     .@..............
   28d64:	00040000 00080000 00100000 00060000     ................
   28d74:	000c0000 00000000 00000000 00000000     ................
	...

00028d94 <am_hal_pwrctrl_peripheral_control>:
	...
   28da0:	00000001 00000004 00000004 00000002     ................
   28db0:	00000008 00000008 00000004 00000008     ................
   28dc0:	00000008 00000008 00000008 00000008     ................
   28dd0:	00000010 00000010 00000010 00000020     ............ ...
   28de0:	00000010 00000010 00000040 00000010     ........@.......
   28df0:	00000010 00000080 00000004 00000004     ................
   28e00:	00000100 00000004 00000004 00000200     ................
   28e10:	00000020 00000020 00000400 00000004      ... ...........
   28e20:	00000004 00000800 00000040 00000040     ........@...@...
   28e30:	00001000 00000080 00000080 00002000     ............. ..
   28e40:	00000100 00000100                       ........

00028e48 <curve_secp256r1>:
   28e48:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   28e64:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   28e74:	a7179e84 bce6faad ffffffff ffffffff     ................
   28e84:	00000000 ffffffff d898c296 f4a13945     ............E9..
   28e94:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   28ea4:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   28eb4:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   28ec4:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   28ed4:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   28ee4:	aa3a93e7 5ac635d8 00024e91 000246b1     ..:..5.Z.N...F..
   28ef4:	00024861                                aH..
