
bin/ble_freertos_amdtpc.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 a5 02 02 00 0d 03 02 00 09 bc 01 00     .+..............
    c010:	13 03 02 00 13 03 02 00 13 03 02 00 00 00 00 00     ................
	...
    c02c:	21 ae 01 00 19 03 02 00 00 00 00 00 01 b0 01 00     !...............
    c03c:	69 b0 01 00 19 03 02 00 19 03 02 00 19 03 02 00     i...............
    c04c:	19 03 02 00 19 03 02 00 19 03 02 00 19 03 02 00     ................
    c05c:	19 03 02 00 19 03 02 00 19 03 02 00 19 03 02 00     ................
    c06c:	19 03 02 00 41 34 01 00 19 03 02 00 e5 34 01 00     ....A4.......4..
    c07c:	a1 33 01 00 19 03 02 00 19 03 02 00 19 03 02 00     .3..............
    c08c:	19 03 02 00 19 03 02 00 19 03 02 00 19 03 02 00     ................
    c09c:	b9 b2 01 00 19 03 02 00 19 03 02 00 19 03 02 00     ................
    c0ac:	19 03 02 00 19 03 02 00 19 03 02 00 19 03 02 00     ................
    c0bc:	19 03 02 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcmp>:
    c100:	2a03      	cmp	r2, #3
    c102:	b470      	push	{r4, r5, r6}
    c104:	d922      	bls.n	c14c <memcmp+0x4c>
    c106:	ea40 0301 	orr.w	r3, r0, r1
    c10a:	079b      	lsls	r3, r3, #30
    c10c:	d011      	beq.n	c132 <memcmp+0x32>
    c10e:	7803      	ldrb	r3, [r0, #0]
    c110:	780c      	ldrb	r4, [r1, #0]
    c112:	42a3      	cmp	r3, r4
    c114:	d11d      	bne.n	c152 <memcmp+0x52>
    c116:	440a      	add	r2, r1
    c118:	3101      	adds	r1, #1
    c11a:	e005      	b.n	c128 <memcmp+0x28>
    c11c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c120:	f811 4b01 	ldrb.w	r4, [r1], #1
    c124:	42a3      	cmp	r3, r4
    c126:	d114      	bne.n	c152 <memcmp+0x52>
    c128:	4291      	cmp	r1, r2
    c12a:	d1f7      	bne.n	c11c <memcmp+0x1c>
    c12c:	2000      	movs	r0, #0
    c12e:	bc70      	pop	{r4, r5, r6}
    c130:	4770      	bx	lr
    c132:	680d      	ldr	r5, [r1, #0]
    c134:	6806      	ldr	r6, [r0, #0]
    c136:	42ae      	cmp	r6, r5
    c138:	460c      	mov	r4, r1
    c13a:	4603      	mov	r3, r0
    c13c:	f101 0104 	add.w	r1, r1, #4
    c140:	f100 0004 	add.w	r0, r0, #4
    c144:	d108      	bne.n	c158 <memcmp+0x58>
    c146:	3a04      	subs	r2, #4
    c148:	2a03      	cmp	r2, #3
    c14a:	d8f2      	bhi.n	c132 <memcmp+0x32>
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1de      	bne.n	c10e <memcmp+0xe>
    c150:	e7ec      	b.n	c12c <memcmp+0x2c>
    c152:	1b18      	subs	r0, r3, r4
    c154:	bc70      	pop	{r4, r5, r6}
    c156:	4770      	bx	lr
    c158:	4621      	mov	r1, r4
    c15a:	4618      	mov	r0, r3
    c15c:	e7d7      	b.n	c10e <memcmp+0xe>
    c15e:	bf00      	nop

0000c160 <memcpy>:
    c160:	4684      	mov	ip, r0
    c162:	ea41 0300 	orr.w	r3, r1, r0
    c166:	f013 0303 	ands.w	r3, r3, #3
    c16a:	d16d      	bne.n	c248 <memcpy+0xe8>
    c16c:	3a40      	subs	r2, #64	; 0x40
    c16e:	d341      	bcc.n	c1f4 <memcpy+0x94>
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	f851 3b04 	ldr.w	r3, [r1], #4
    c194:	f840 3b04 	str.w	r3, [r0], #4
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	3a40      	subs	r2, #64	; 0x40
    c1f2:	d2bd      	bcs.n	c170 <memcpy+0x10>
    c1f4:	3230      	adds	r2, #48	; 0x30
    c1f6:	d311      	bcc.n	c21c <memcpy+0xbc>
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	3a10      	subs	r2, #16
    c21a:	d2ed      	bcs.n	c1f8 <memcpy+0x98>
    c21c:	320c      	adds	r2, #12
    c21e:	d305      	bcc.n	c22c <memcpy+0xcc>
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	3a04      	subs	r2, #4
    c22a:	d2f9      	bcs.n	c220 <memcpy+0xc0>
    c22c:	3204      	adds	r2, #4
    c22e:	d008      	beq.n	c242 <memcpy+0xe2>
    c230:	07d2      	lsls	r2, r2, #31
    c232:	bf1c      	itt	ne
    c234:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c238:	f800 3b01 	strbne.w	r3, [r0], #1
    c23c:	d301      	bcc.n	c242 <memcpy+0xe2>
    c23e:	880b      	ldrh	r3, [r1, #0]
    c240:	8003      	strh	r3, [r0, #0]
    c242:	4660      	mov	r0, ip
    c244:	4770      	bx	lr
    c246:	bf00      	nop
    c248:	2a08      	cmp	r2, #8
    c24a:	d313      	bcc.n	c274 <memcpy+0x114>
    c24c:	078b      	lsls	r3, r1, #30
    c24e:	d08d      	beq.n	c16c <memcpy+0xc>
    c250:	f010 0303 	ands.w	r3, r0, #3
    c254:	d08a      	beq.n	c16c <memcpy+0xc>
    c256:	f1c3 0304 	rsb	r3, r3, #4
    c25a:	1ad2      	subs	r2, r2, r3
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	bf1c      	itt	ne
    c260:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c264:	f800 3b01 	strbne.w	r3, [r0], #1
    c268:	d380      	bcc.n	c16c <memcpy+0xc>
    c26a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c26e:	f820 3b02 	strh.w	r3, [r0], #2
    c272:	e77b      	b.n	c16c <memcpy+0xc>
    c274:	3a04      	subs	r2, #4
    c276:	d3d9      	bcc.n	c22c <memcpy+0xcc>
    c278:	3a01      	subs	r2, #1
    c27a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c27e:	f800 3b01 	strb.w	r3, [r0], #1
    c282:	d2f9      	bcs.n	c278 <memcpy+0x118>
    c284:	780b      	ldrb	r3, [r1, #0]
    c286:	7003      	strb	r3, [r0, #0]
    c288:	784b      	ldrb	r3, [r1, #1]
    c28a:	7043      	strb	r3, [r0, #1]
    c28c:	788b      	ldrb	r3, [r1, #2]
    c28e:	7083      	strb	r3, [r0, #2]
    c290:	4660      	mov	r0, ip
    c292:	4770      	bx	lr

0000c294 <memmove>:
    c294:	4288      	cmp	r0, r1
    c296:	b5f0      	push	{r4, r5, r6, r7, lr}
    c298:	d90d      	bls.n	c2b6 <memmove+0x22>
    c29a:	188b      	adds	r3, r1, r2
    c29c:	4298      	cmp	r0, r3
    c29e:	d20a      	bcs.n	c2b6 <memmove+0x22>
    c2a0:	1884      	adds	r4, r0, r2
    c2a2:	2a00      	cmp	r2, #0
    c2a4:	d051      	beq.n	c34a <memmove+0xb6>
    c2a6:	4622      	mov	r2, r4
    c2a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c2ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
    c2b0:	4299      	cmp	r1, r3
    c2b2:	d1f9      	bne.n	c2a8 <memmove+0x14>
    c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2b6:	2a0f      	cmp	r2, #15
    c2b8:	d948      	bls.n	c34c <memmove+0xb8>
    c2ba:	ea41 0300 	orr.w	r3, r1, r0
    c2be:	079b      	lsls	r3, r3, #30
    c2c0:	d146      	bne.n	c350 <memmove+0xbc>
    c2c2:	f100 0410 	add.w	r4, r0, #16
    c2c6:	f101 0310 	add.w	r3, r1, #16
    c2ca:	4615      	mov	r5, r2
    c2cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
    c2d0:	f844 6c10 	str.w	r6, [r4, #-16]
    c2d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    c2d8:	f844 6c0c 	str.w	r6, [r4, #-12]
    c2dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
    c2e0:	f844 6c08 	str.w	r6, [r4, #-8]
    c2e4:	3d10      	subs	r5, #16
    c2e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    c2ea:	f844 6c04 	str.w	r6, [r4, #-4]
    c2ee:	2d0f      	cmp	r5, #15
    c2f0:	f103 0310 	add.w	r3, r3, #16
    c2f4:	f104 0410 	add.w	r4, r4, #16
    c2f8:	d8e8      	bhi.n	c2cc <memmove+0x38>
    c2fa:	f1a2 0310 	sub.w	r3, r2, #16
    c2fe:	f023 030f 	bic.w	r3, r3, #15
    c302:	f002 0e0f 	and.w	lr, r2, #15
    c306:	3310      	adds	r3, #16
    c308:	f1be 0f03 	cmp.w	lr, #3
    c30c:	4419      	add	r1, r3
    c30e:	4403      	add	r3, r0
    c310:	d921      	bls.n	c356 <memmove+0xc2>
    c312:	1f1e      	subs	r6, r3, #4
    c314:	460d      	mov	r5, r1
    c316:	4674      	mov	r4, lr
    c318:	3c04      	subs	r4, #4
    c31a:	f855 7b04 	ldr.w	r7, [r5], #4
    c31e:	f846 7f04 	str.w	r7, [r6, #4]!
    c322:	2c03      	cmp	r4, #3
    c324:	d8f8      	bhi.n	c318 <memmove+0x84>
    c326:	f1ae 0404 	sub.w	r4, lr, #4
    c32a:	f024 0403 	bic.w	r4, r4, #3
    c32e:	3404      	adds	r4, #4
    c330:	4421      	add	r1, r4
    c332:	4423      	add	r3, r4
    c334:	f002 0203 	and.w	r2, r2, #3
    c338:	b162      	cbz	r2, c354 <memmove+0xc0>
    c33a:	3b01      	subs	r3, #1
    c33c:	440a      	add	r2, r1
    c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
    c342:	f803 4f01 	strb.w	r4, [r3, #1]!
    c346:	428a      	cmp	r2, r1
    c348:	d1f9      	bne.n	c33e <memmove+0xaa>
    c34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34c:	4603      	mov	r3, r0
    c34e:	e7f3      	b.n	c338 <memmove+0xa4>
    c350:	4603      	mov	r3, r0
    c352:	e7f2      	b.n	c33a <memmove+0xa6>
    c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c356:	4672      	mov	r2, lr
    c358:	e7ee      	b.n	c338 <memmove+0xa4>
    c35a:	bf00      	nop

0000c35c <memset>:
    c35c:	b470      	push	{r4, r5, r6}
    c35e:	0786      	lsls	r6, r0, #30
    c360:	d046      	beq.n	c3f0 <memset+0x94>
    c362:	1e54      	subs	r4, r2, #1
    c364:	2a00      	cmp	r2, #0
    c366:	d041      	beq.n	c3ec <memset+0x90>
    c368:	b2ca      	uxtb	r2, r1
    c36a:	4603      	mov	r3, r0
    c36c:	e002      	b.n	c374 <memset+0x18>
    c36e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c372:	d33b      	bcc.n	c3ec <memset+0x90>
    c374:	f803 2b01 	strb.w	r2, [r3], #1
    c378:	079d      	lsls	r5, r3, #30
    c37a:	d1f8      	bne.n	c36e <memset+0x12>
    c37c:	2c03      	cmp	r4, #3
    c37e:	d92e      	bls.n	c3de <memset+0x82>
    c380:	b2cd      	uxtb	r5, r1
    c382:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c386:	2c0f      	cmp	r4, #15
    c388:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c38c:	d919      	bls.n	c3c2 <memset+0x66>
    c38e:	f103 0210 	add.w	r2, r3, #16
    c392:	4626      	mov	r6, r4
    c394:	3e10      	subs	r6, #16
    c396:	2e0f      	cmp	r6, #15
    c398:	f842 5c10 	str.w	r5, [r2, #-16]
    c39c:	f842 5c0c 	str.w	r5, [r2, #-12]
    c3a0:	f842 5c08 	str.w	r5, [r2, #-8]
    c3a4:	f842 5c04 	str.w	r5, [r2, #-4]
    c3a8:	f102 0210 	add.w	r2, r2, #16
    c3ac:	d8f2      	bhi.n	c394 <memset+0x38>
    c3ae:	f1a4 0210 	sub.w	r2, r4, #16
    c3b2:	f022 020f 	bic.w	r2, r2, #15
    c3b6:	f004 040f 	and.w	r4, r4, #15
    c3ba:	3210      	adds	r2, #16
    c3bc:	2c03      	cmp	r4, #3
    c3be:	4413      	add	r3, r2
    c3c0:	d90d      	bls.n	c3de <memset+0x82>
    c3c2:	461e      	mov	r6, r3
    c3c4:	4622      	mov	r2, r4
    c3c6:	3a04      	subs	r2, #4
    c3c8:	2a03      	cmp	r2, #3
    c3ca:	f846 5b04 	str.w	r5, [r6], #4
    c3ce:	d8fa      	bhi.n	c3c6 <memset+0x6a>
    c3d0:	1f22      	subs	r2, r4, #4
    c3d2:	f022 0203 	bic.w	r2, r2, #3
    c3d6:	3204      	adds	r2, #4
    c3d8:	4413      	add	r3, r2
    c3da:	f004 0403 	and.w	r4, r4, #3
    c3de:	b12c      	cbz	r4, c3ec <memset+0x90>
    c3e0:	b2c9      	uxtb	r1, r1
    c3e2:	441c      	add	r4, r3
    c3e4:	f803 1b01 	strb.w	r1, [r3], #1
    c3e8:	429c      	cmp	r4, r3
    c3ea:	d1fb      	bne.n	c3e4 <memset+0x88>
    c3ec:	bc70      	pop	{r4, r5, r6}
    c3ee:	4770      	bx	lr
    c3f0:	4614      	mov	r4, r2
    c3f2:	4603      	mov	r3, r0
    c3f4:	e7c2      	b.n	c37c <memset+0x20>
    c3f6:	bf00      	nop

0000c3f8 <__aeabi_d2f>:
    c3f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c3fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c400:	bf24      	itt	cs
    c402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c40a:	d90d      	bls.n	c428 <__aeabi_d2f+0x30>
    c40c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c41c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c420:	bf08      	it	eq
    c422:	f020 0001 	biceq.w	r0, r0, #1
    c426:	4770      	bx	lr
    c428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c42c:	d121      	bne.n	c472 <__aeabi_d2f+0x7a>
    c42e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c432:	bfbc      	itt	lt
    c434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c438:	4770      	bxlt	lr
    c43a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c43e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c442:	f1c2 0218 	rsb	r2, r2, #24
    c446:	f1c2 0c20 	rsb	ip, r2, #32
    c44a:	fa10 f30c 	lsls.w	r3, r0, ip
    c44e:	fa20 f002 	lsr.w	r0, r0, r2
    c452:	bf18      	it	ne
    c454:	f040 0001 	orrne.w	r0, r0, #1
    c458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c45c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c460:	fa03 fc0c 	lsl.w	ip, r3, ip
    c464:	ea40 000c 	orr.w	r0, r0, ip
    c468:	fa23 f302 	lsr.w	r3, r3, r2
    c46c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c470:	e7cc      	b.n	c40c <__aeabi_d2f+0x14>
    c472:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c476:	d107      	bne.n	c488 <__aeabi_d2f+0x90>
    c478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c47c:	bf1e      	ittt	ne
    c47e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c486:	4770      	bxne	lr
    c488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c48c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c494:	4770      	bx	lr
    c496:	bf00      	nop

0000c498 <attDmConnCback>:
    c498:	7803      	ldrb	r3, [r0, #0]
    c49a:	7882      	ldrb	r2, [r0, #2]
    c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a0:	1e5f      	subs	r7, r3, #1
    c4a2:	4e16      	ldr	r6, [pc, #88]	; (c4fc <attDmConnCback+0x64>)
    c4a4:	017f      	lsls	r7, r7, #5
    c4a6:	2a27      	cmp	r2, #39	; 0x27
    c4a8:	4605      	mov	r5, r0
    c4aa:	eb06 0407 	add.w	r4, r6, r7
    c4ae:	d108      	bne.n	c4c2 <attDmConnCback+0x2a>
    c4b0:	88c2      	ldrh	r2, [r0, #6]
    c4b2:	8322      	strh	r2, [r4, #24]
    c4b4:	7723      	strb	r3, [r4, #28]
    c4b6:	2217      	movs	r2, #23
    c4b8:	2300      	movs	r3, #0
    c4ba:	8362      	strh	r2, [r4, #26]
    c4bc:	7763      	strb	r3, [r4, #29]
    c4be:	77a3      	strb	r3, [r4, #30]
    c4c0:	77e3      	strb	r3, [r4, #31]
    c4c2:	4437      	add	r7, r6
    c4c4:	7f3b      	ldrb	r3, [r7, #28]
    c4c6:	b183      	cbz	r3, c4ea <attDmConnCback+0x52>
    c4c8:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    c4cc:	4629      	mov	r1, r5
    c4ce:	68db      	ldr	r3, [r3, #12]
    c4d0:	4620      	mov	r0, r4
    c4d2:	4798      	blx	r3
    c4d4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    c4d8:	4629      	mov	r1, r5
    c4da:	68db      	ldr	r3, [r3, #12]
    c4dc:	4620      	mov	r0, r4
    c4de:	4798      	blx	r3
    c4e0:	78ab      	ldrb	r3, [r5, #2]
    c4e2:	2b28      	cmp	r3, #40	; 0x28
    c4e4:	bf04      	itt	eq
    c4e6:	2300      	moveq	r3, #0
    c4e8:	773b      	strbeq	r3, [r7, #28]
    c4ea:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
    c4ee:	b11b      	cbz	r3, c4f8 <attDmConnCback+0x60>
    c4f0:	4628      	mov	r0, r5
    c4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c4f6:	4718      	bx	r3
    c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4fc:	100039d4 	.word	0x100039d4

0000c500 <attEmptyHandler>:
    c500:	4770      	bx	lr

0000c502 <attEmptyConnCback>:
    c502:	4770      	bx	lr

0000c504 <attEmptyDataCback>:
    c504:	4770      	bx	lr

0000c506 <attL2cDataCback>:
    c506:	7a13      	ldrb	r3, [r2, #8]
    c508:	f013 0f01 	tst.w	r3, #1
    c50c:	4b03      	ldr	r3, [pc, #12]	; (c51c <attL2cDataCback+0x16>)
    c50e:	bf14      	ite	ne
    c510:	f8d3 3100 	ldrne.w	r3, [r3, #256]	; 0x100
    c514:	f8d3 3104 	ldreq.w	r3, [r3, #260]	; 0x104
    c518:	681b      	ldr	r3, [r3, #0]
    c51a:	4718      	bx	r3
    c51c:	100039d4 	.word	0x100039d4

0000c520 <attL2cCtrlCback>:
    c520:	b570      	push	{r4, r5, r6, lr}
    c522:	7804      	ldrb	r4, [r0, #0]
    c524:	4d0e      	ldr	r5, [pc, #56]	; (c560 <attL2cCtrlCback+0x40>)
    c526:	3c01      	subs	r4, #1
    c528:	0164      	lsls	r4, r4, #5
    c52a:	192b      	adds	r3, r5, r4
    c52c:	4606      	mov	r6, r0
    c52e:	7f1a      	ldrb	r2, [r3, #28]
    c530:	b1a2      	cbz	r2, c55c <attL2cCtrlCback+0x3c>
    c532:	7882      	ldrb	r2, [r0, #2]
    c534:	2a01      	cmp	r2, #1
    c536:	bf0c      	ite	eq
    c538:	2201      	moveq	r2, #1
    c53a:	2200      	movne	r2, #0
    c53c:	779a      	strb	r2, [r3, #30]
    c53e:	d003      	beq.n	c548 <attL2cCtrlCback+0x28>
    c540:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    c544:	685b      	ldr	r3, [r3, #4]
    c546:	4798      	blx	r3
    c548:	442c      	add	r4, r5
    c54a:	7fa3      	ldrb	r3, [r4, #30]
    c54c:	b933      	cbnz	r3, c55c <attL2cCtrlCback+0x3c>
    c54e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    c552:	4630      	mov	r0, r6
    c554:	685b      	ldr	r3, [r3, #4]
    c556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c55a:	4718      	bx	r3
    c55c:	bd70      	pop	{r4, r5, r6, pc}
    c55e:	bf00      	nop
    c560:	100039d4 	.word	0x100039d4

0000c564 <attCcbByHandle>:
    c564:	b508      	push	{r3, lr}
    c566:	f003 f975 	bl	f854 <DmConnIdByHandle>
    c56a:	b118      	cbz	r0, c574 <attCcbByHandle+0x10>
    c56c:	4b02      	ldr	r3, [pc, #8]	; (c578 <attCcbByHandle+0x14>)
    c56e:	3801      	subs	r0, #1
    c570:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c574:	bd08      	pop	{r3, pc}
    c576:	bf00      	nop
    c578:	100039d4 	.word	0x100039d4

0000c57c <attCcbByConnId>:
    c57c:	4b02      	ldr	r3, [pc, #8]	; (c588 <attCcbByConnId+0xc>)
    c57e:	3801      	subs	r0, #1
    c580:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c584:	4770      	bx	lr
    c586:	bf00      	nop
    c588:	100039d4 	.word	0x100039d4

0000c58c <attUuidCmp16to128>:
    c58c:	b508      	push	{r3, lr}
    c58e:	4b06      	ldr	r3, [pc, #24]	; (c5a8 <attUuidCmp16to128+0x1c>)
    c590:	7802      	ldrb	r2, [r0, #0]
    c592:	731a      	strb	r2, [r3, #12]
    c594:	7842      	ldrb	r2, [r0, #1]
    c596:	735a      	strb	r2, [r3, #13]
    c598:	4618      	mov	r0, r3
    c59a:	2210      	movs	r2, #16
    c59c:	f7ff fdb0 	bl	c100 <memcmp>
    c5a0:	fab0 f080 	clz	r0, r0
    c5a4:	0940      	lsrs	r0, r0, #5
    c5a6:	bd08      	pop	{r3, pc}
    c5a8:	10002b00 	.word	0x10002b00

0000c5ac <attExecCallback>:
    c5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c5ae:	f88d 3003 	strb.w	r3, [sp, #3]
    c5b2:	2300      	movs	r3, #0
    c5b4:	f8ad 3008 	strh.w	r3, [sp, #8]
    c5b8:	f88d 300c 	strb.w	r3, [sp, #12]
    c5bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    c5c0:	f8ad 300e 	strh.w	r3, [sp, #14]
    c5c4:	4b06      	ldr	r3, [pc, #24]	; (c5e0 <attExecCallback+0x34>)
    c5c6:	f8ad 0000 	strh.w	r0, [sp]
    c5ca:	f88d 1002 	strb.w	r1, [sp, #2]
    c5ce:	f8ad 200a 	strh.w	r2, [sp, #10]
    c5d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    c5d6:	4668      	mov	r0, sp
    c5d8:	4798      	blx	r3
    c5da:	b005      	add	sp, #20
    c5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e0:	100039d4 	.word	0x100039d4

0000c5e4 <attSetMtu>:
    c5e4:	428a      	cmp	r2, r1
    c5e6:	8b43      	ldrh	r3, [r0, #26]
    c5e8:	b507      	push	{r0, r1, r2, lr}
    c5ea:	bf28      	it	cs
    c5ec:	460a      	movcs	r2, r1
    c5ee:	4293      	cmp	r3, r2
    c5f0:	d007      	beq.n	c602 <attSetMtu+0x1e>
    c5f2:	2300      	movs	r3, #0
    c5f4:	8342      	strh	r2, [r0, #26]
    c5f6:	2111      	movs	r1, #17
    c5f8:	7f00      	ldrb	r0, [r0, #28]
    c5fa:	9200      	str	r2, [sp, #0]
    c5fc:	461a      	mov	r2, r3
    c5fe:	f7ff ffd5 	bl	c5ac <attExecCallback>
    c602:	b003      	add	sp, #12
    c604:	f85d fb04 	ldr.w	pc, [sp], #4

0000c608 <attMsgAlloc>:
    c608:	2100      	movs	r1, #0
    c60a:	f007 bfdd 	b.w	145c8 <WsfMsgDataAlloc>

0000c60e <AttHandlerInit>:
    c60e:	b508      	push	{r3, lr}
    c610:	4b09      	ldr	r3, [pc, #36]	; (c638 <AttHandlerInit+0x2a>)
    c612:	4a0a      	ldr	r2, [pc, #40]	; (c63c <AttHandlerInit+0x2e>)
    c614:	f883 0110 	strb.w	r0, [r3, #272]	; 0x110
    c618:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c61c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c620:	4907      	ldr	r1, [pc, #28]	; (c640 <AttHandlerInit+0x32>)
    c622:	4a08      	ldr	r2, [pc, #32]	; (c644 <AttHandlerInit+0x36>)
    c624:	2004      	movs	r0, #4
    c626:	f004 f8c1 	bl	107ac <L2cRegister>
    c62a:	4907      	ldr	r1, [pc, #28]	; (c648 <AttHandlerInit+0x3a>)
    c62c:	2000      	movs	r0, #0
    c62e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c632:	f002 bff9 	b.w	f628 <DmConnRegister>
    c636:	bf00      	nop
    c638:	100039d4 	.word	0x100039d4
    c63c:	00024ef8 	.word	0x00024ef8
    c640:	0000c507 	.word	0x0000c507
    c644:	0000c521 	.word	0x0000c521
    c648:	0000c499 	.word	0x0000c499

0000c64c <AttHandler>:
    c64c:	4608      	mov	r0, r1
    c64e:	b149      	cbz	r1, c664 <AttHandler+0x18>
    c650:	788b      	ldrb	r3, [r1, #2]
    c652:	2b1f      	cmp	r3, #31
    c654:	4b04      	ldr	r3, [pc, #16]	; (c668 <AttHandler+0x1c>)
    c656:	bf8c      	ite	hi
    c658:	f8d3 3104 	ldrhi.w	r3, [r3, #260]	; 0x104
    c65c:	f8d3 3100 	ldrls.w	r3, [r3, #256]	; 0x100
    c660:	689b      	ldr	r3, [r3, #8]
    c662:	4718      	bx	r3
    c664:	4770      	bx	lr
    c666:	bf00      	nop
    c668:	100039d4 	.word	0x100039d4

0000c66c <AttRegister>:
    c66c:	4b0a      	ldr	r3, [pc, #40]	; (c698 <AttRegister+0x2c>)
    c66e:	b507      	push	{r0, r1, r2, lr}
    c670:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    c674:	f00b ffd6 	bl	18624 <HciGetMaxRxAclLen>
    c678:	4b08      	ldr	r3, [pc, #32]	; (c69c <AttRegister+0x30>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	889b      	ldrh	r3, [r3, #4]
    c67e:	3803      	subs	r0, #3
    c680:	4298      	cmp	r0, r3
    c682:	dc06      	bgt.n	c692 <AttRegister+0x26>
    c684:	2200      	movs	r2, #0
    c686:	9200      	str	r2, [sp, #0]
    c688:	2302      	movs	r3, #2
    c68a:	2152      	movs	r1, #82	; 0x52
    c68c:	4610      	mov	r0, r2
    c68e:	f7ff ff8d 	bl	c5ac <attExecCallback>
    c692:	b003      	add	sp, #12
    c694:	f85d fb04 	ldr.w	pc, [sp], #4
    c698:	100039d4 	.word	0x100039d4
    c69c:	10002bd0 	.word	0x10002bd0

0000c6a0 <AttConnRegister>:
    c6a0:	4b01      	ldr	r3, [pc, #4]	; (c6a8 <AttConnRegister+0x8>)
    c6a2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    c6a6:	4770      	bx	lr
    c6a8:	100039d4 	.word	0x100039d4

0000c6ac <AttGetMtu>:
    c6ac:	4b02      	ldr	r3, [pc, #8]	; (c6b8 <AttGetMtu+0xc>)
    c6ae:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c6b2:	f830 0c06 	ldrh.w	r0, [r0, #-6]
    c6b6:	4770      	bx	lr
    c6b8:	100039d4 	.word	0x100039d4

0000c6bc <AttMsgAlloc>:
    c6bc:	291b      	cmp	r1, #27
    c6be:	b508      	push	{r3, lr}
    c6c0:	d001      	beq.n	c6c6 <AttMsgAlloc+0xa>
    c6c2:	291d      	cmp	r1, #29
    c6c4:	d106      	bne.n	c6d4 <AttMsgAlloc+0x18>
    c6c6:	300b      	adds	r0, #11
    c6c8:	b280      	uxth	r0, r0
    c6ca:	f7ff ff9d 	bl	c608 <attMsgAlloc>
    c6ce:	b100      	cbz	r0, c6d2 <AttMsgAlloc+0x16>
    c6d0:	300b      	adds	r0, #11
    c6d2:	bd08      	pop	{r3, pc}
    c6d4:	2000      	movs	r0, #0
    c6d6:	e7fc      	b.n	c6d2 <AttMsgAlloc+0x16>

0000c6d8 <AttMsgFree>:
    c6d8:	291b      	cmp	r1, #27
    c6da:	d005      	beq.n	c6e8 <AttMsgFree+0x10>
    c6dc:	291d      	cmp	r1, #29
    c6de:	d003      	beq.n	c6e8 <AttMsgFree+0x10>
    c6e0:	2300      	movs	r3, #0
    c6e2:	1ac0      	subs	r0, r0, r3
    c6e4:	f007 bf9c 	b.w	14620 <WsfMsgFree>
    c6e8:	230b      	movs	r3, #11
    c6ea:	e7fa      	b.n	c6e2 <AttMsgFree+0xa>

0000c6ec <attcDiscDescriptors>:
    c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6ee:	680e      	ldr	r6, [r1, #0]
    c6f0:	7c8d      	ldrb	r5, [r1, #18]
    c6f2:	2200      	movs	r2, #0
    c6f4:	460b      	mov	r3, r1
    c6f6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    c6fa:	4611      	mov	r1, r2
    c6fc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    c700:	4696      	mov	lr, r2
    c702:	7c9c      	ldrb	r4, [r3, #18]
    c704:	7b1f      	ldrb	r7, [r3, #12]
    c706:	42a7      	cmp	r7, r4
    c708:	d809      	bhi.n	c71e <attcDiscDescriptors+0x32>
    c70a:	7c9c      	ldrb	r4, [r3, #18]
    c70c:	7b1d      	ldrb	r5, [r3, #12]
    c70e:	42a5      	cmp	r5, r4
    c710:	d12e      	bne.n	c770 <attcDiscDescriptors+0x84>
    c712:	2200      	movs	r2, #0
    c714:	b2d1      	uxtb	r1, r2
    c716:	428c      	cmp	r4, r1
    c718:	d81f      	bhi.n	c75a <attcDiscDescriptors+0x6e>
    c71a:	2000      	movs	r0, #0
    c71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c71e:	682f      	ldr	r7, [r5, #0]
    c720:	793f      	ldrb	r7, [r7, #4]
    c722:	077f      	lsls	r7, r7, #29
    c724:	d516      	bpl.n	c754 <attcDiscDescriptors+0x68>
    c726:	685f      	ldr	r7, [r3, #4]
    c728:	4464      	add	r4, ip
    c72a:	0062      	lsls	r2, r4, #1
    c72c:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
    c730:	1c94      	adds	r4, r2, #2
    c732:	3101      	adds	r1, #1
    c734:	5b3a      	ldrh	r2, [r7, r4]
    c736:	f827 e004 	strh.w	lr, [r7, r4]
    c73a:	b289      	uxth	r1, r1
    c73c:	4291      	cmp	r1, r2
    c73e:	d9e4      	bls.n	c70a <attcDiscDescriptors+0x1e>
    c740:	7c9c      	ldrb	r4, [r3, #18]
    c742:	7b1f      	ldrb	r7, [r3, #12]
    c744:	3401      	adds	r4, #1
    c746:	b2e4      	uxtb	r4, r4
    c748:	42bc      	cmp	r4, r7
    c74a:	d301      	bcc.n	c750 <attcDiscDescriptors+0x64>
    c74c:	749c      	strb	r4, [r3, #18]
    c74e:	e7d8      	b.n	c702 <attcDiscDescriptors+0x16>
    c750:	3504      	adds	r5, #4
    c752:	e7f7      	b.n	c744 <attcDiscDescriptors+0x58>
    c754:	3504      	adds	r5, #4
    c756:	3401      	adds	r4, #1
    c758:	e7f8      	b.n	c74c <attcDiscDescriptors+0x60>
    c75a:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    c75e:	7909      	ldrb	r1, [r1, #4]
    c760:	0789      	lsls	r1, r1, #30
    c762:	d503      	bpl.n	c76c <attcDiscDescriptors+0x80>
    c764:	6859      	ldr	r1, [r3, #4]
    c766:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    c76a:	b131      	cbz	r1, c77a <attcDiscDescriptors+0x8e>
    c76c:	3201      	adds	r2, #1
    c76e:	e7d1      	b.n	c714 <attcDiscDescriptors+0x28>
    c770:	2301      	movs	r3, #1
    c772:	f000 fd13 	bl	d19c <AttcFindInfoReq>
    c776:	2078      	movs	r0, #120	; 0x78
    c778:	e7d0      	b.n	c71c <attcDiscDescriptors+0x30>
    c77a:	2076      	movs	r0, #118	; 0x76
    c77c:	e7ce      	b.n	c71c <attcDiscDescriptors+0x30>

0000c77e <attcDiscConfigNext>:
    c77e:	b570      	push	{r4, r5, r6, lr}
    c780:	460a      	mov	r2, r1
    c782:	7c89      	ldrb	r1, [r1, #18]
    c784:	6893      	ldr	r3, [r2, #8]
    c786:	7b55      	ldrb	r5, [r2, #13]
    c788:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    c78c:	7c94      	ldrb	r4, [r2, #18]
    c78e:	42ac      	cmp	r4, r5
    c790:	d301      	bcc.n	c796 <attcDiscConfigNext+0x18>
    c792:	2000      	movs	r0, #0
    c794:	e00a      	b.n	c7ac <attcDiscConfigNext+0x2e>
    c796:	795e      	ldrb	r6, [r3, #5]
    c798:	6851      	ldr	r1, [r2, #4]
    c79a:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
    c79e:	b149      	cbz	r1, c7b4 <attcDiscConfigNext+0x36>
    c7a0:	791a      	ldrb	r2, [r3, #4]
    c7a2:	b122      	cbz	r2, c7ae <attcDiscConfigNext+0x30>
    c7a4:	681b      	ldr	r3, [r3, #0]
    c7a6:	f000 fd29 	bl	d1fc <AttcWriteReq>
    c7aa:	2078      	movs	r0, #120	; 0x78
    c7ac:	bd70      	pop	{r4, r5, r6, pc}
    c7ae:	f000 fd0d 	bl	d1cc <AttcReadReq>
    c7b2:	e7fa      	b.n	c7aa <attcDiscConfigNext+0x2c>
    c7b4:	3401      	adds	r4, #1
    c7b6:	7494      	strb	r4, [r2, #18]
    c7b8:	3308      	adds	r3, #8
    c7ba:	e7e7      	b.n	c78c <attcDiscConfigNext+0xe>

0000c7bc <attcUuidCmp>:
    c7bc:	b508      	push	{r3, lr}
    c7be:	7903      	ldrb	r3, [r0, #4]
    c7c0:	f003 0301 	and.w	r3, r3, #1
    c7c4:	429a      	cmp	r2, r3
    c7c6:	d10a      	bne.n	c7de <attcUuidCmp+0x22>
    c7c8:	2a00      	cmp	r2, #0
    c7ca:	bf0c      	ite	eq
    c7cc:	2202      	moveq	r2, #2
    c7ce:	2210      	movne	r2, #16
    c7d0:	6800      	ldr	r0, [r0, #0]
    c7d2:	f7ff fc95 	bl	c100 <memcmp>
    c7d6:	fab0 f080 	clz	r0, r0
    c7da:	0940      	lsrs	r0, r0, #5
    c7dc:	bd08      	pop	{r3, pc}
    c7de:	2a01      	cmp	r2, #1
    c7e0:	d105      	bne.n	c7ee <attcUuidCmp+0x32>
    c7e2:	b923      	cbnz	r3, c7ee <attcUuidCmp+0x32>
    c7e4:	6800      	ldr	r0, [r0, #0]
    c7e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c7ea:	f7ff becf 	b.w	c58c <attUuidCmp16to128>
    c7ee:	2000      	movs	r0, #0
    c7f0:	e7f4      	b.n	c7dc <attcUuidCmp+0x20>

0000c7f2 <AttcDiscService>:
    c7f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c7f4:	2100      	movs	r1, #0
    c7f6:	e9cd 3101 	strd	r3, r1, [sp, #4]
    c7fa:	9200      	str	r2, [sp, #0]
    c7fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c800:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c804:	2101      	movs	r1, #1
    c806:	f000 fd87 	bl	d318 <AttcFindByTypeValueReq>
    c80a:	b005      	add	sp, #20
    c80c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c810 <AttcDiscServiceCmpl>:
    c810:	b510      	push	{r4, lr}
    c812:	788b      	ldrb	r3, [r1, #2]
    c814:	2b03      	cmp	r3, #3
    c816:	d110      	bne.n	c83a <AttcDiscServiceCmpl+0x2a>
    c818:	78cb      	ldrb	r3, [r1, #3]
    c81a:	b963      	cbnz	r3, c836 <AttcDiscServiceCmpl+0x26>
    c81c:	890a      	ldrh	r2, [r1, #8]
    c81e:	b172      	cbz	r2, c83e <AttcDiscServiceCmpl+0x2e>
    c820:	684a      	ldr	r2, [r1, #4]
    c822:	7854      	ldrb	r4, [r2, #1]
    c824:	7811      	ldrb	r1, [r2, #0]
    c826:	eb01 2104 	add.w	r1, r1, r4, lsl #8
    c82a:	81c1      	strh	r1, [r0, #14]
    c82c:	78d1      	ldrb	r1, [r2, #3]
    c82e:	7892      	ldrb	r2, [r2, #2]
    c830:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    c834:	8202      	strh	r2, [r0, #16]
    c836:	4618      	mov	r0, r3
    c838:	bd10      	pop	{r4, pc}
    c83a:	2375      	movs	r3, #117	; 0x75
    c83c:	e7fb      	b.n	c836 <AttcDiscServiceCmpl+0x26>
    c83e:	230a      	movs	r3, #10
    c840:	e7f9      	b.n	c836 <AttcDiscServiceCmpl+0x26>

0000c842 <AttcDiscCharStart>:
    c842:	b507      	push	{r0, r1, r2, lr}
    c844:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    c848:	824b      	strh	r3, [r1, #18]
    c84a:	2301      	movs	r3, #1
    c84c:	8a0a      	ldrh	r2, [r1, #16]
    c84e:	89c9      	ldrh	r1, [r1, #14]
    c850:	9301      	str	r3, [sp, #4]
    c852:	4b04      	ldr	r3, [pc, #16]	; (c864 <AttcDiscCharStart+0x22>)
    c854:	9300      	str	r3, [sp, #0]
    c856:	2302      	movs	r3, #2
    c858:	f000 fd8e 	bl	d378 <AttcReadByTypeReq>
    c85c:	b003      	add	sp, #12
    c85e:	f85d fb04 	ldr.w	pc, [sp], #4
    c862:	bf00      	nop
    c864:	00024fe4 	.word	0x00024fe4

0000c868 <AttcDiscCharCmpl>:
    c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c86c:	788b      	ldrb	r3, [r1, #2]
    c86e:	2b04      	cmp	r3, #4
    c870:	b085      	sub	sp, #20
    c872:	4604      	mov	r4, r0
    c874:	460d      	mov	r5, r1
    c876:	d004      	beq.n	c882 <AttcDiscCharCmpl+0x1a>
    c878:	2b02      	cmp	r3, #2
    c87a:	f000 8089 	beq.w	c990 <AttcDiscCharCmpl+0x128>
    c87e:	2575      	movs	r5, #117	; 0x75
    c880:	e00b      	b.n	c89a <AttcDiscCharCmpl+0x32>
    c882:	f891 a003 	ldrb.w	sl, [r1, #3]
    c886:	f1ba 0f00 	cmp.w	sl, #0
    c88a:	d00a      	beq.n	c8a2 <AttcDiscCharCmpl+0x3a>
    c88c:	78eb      	ldrb	r3, [r5, #3]
    c88e:	2b00      	cmp	r3, #0
    c890:	d16b      	bne.n	c96a <AttcDiscCharCmpl+0x102>
    c892:	7b2b      	ldrb	r3, [r5, #12]
    c894:	2b00      	cmp	r3, #0
    c896:	d068      	beq.n	c96a <AttcDiscCharCmpl+0x102>
    c898:	2578      	movs	r5, #120	; 0x78
    c89a:	4628      	mov	r0, r5
    c89c:	b005      	add	sp, #20
    c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8a2:	684b      	ldr	r3, [r1, #4]
    c8a4:	f893 b000 	ldrb.w	fp, [r3]
    c8a8:	f1bb 0f07 	cmp.w	fp, #7
    c8ac:	d058      	beq.n	c960 <AttcDiscCharCmpl+0xf8>
    c8ae:	f1bb 0f15 	cmp.w	fp, #21
    c8b2:	d053      	beq.n	c95c <AttcDiscCharCmpl+0xf4>
    c8b4:	2573      	movs	r5, #115	; 0x73
    c8b6:	7b22      	ldrb	r2, [r4, #12]
    c8b8:	6860      	ldr	r0, [r4, #4]
    c8ba:	0052      	lsls	r2, r2, #1
    c8bc:	2100      	movs	r1, #0
    c8be:	f7ff fd4d 	bl	c35c <memset>
    c8c2:	e7ea      	b.n	c89a <AttcDiscCharCmpl+0x32>
    c8c4:	7872      	ldrb	r2, [r6, #1]
    c8c6:	7833      	ldrb	r3, [r6, #0]
    c8c8:	78f7      	ldrb	r7, [r6, #3]
    c8ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    c8ce:	7932      	ldrb	r2, [r6, #4]
    c8d0:	eb07 2702 	add.w	r7, r7, r2, lsl #8
    c8d4:	7ce2      	ldrb	r2, [r4, #19]
    c8d6:	2aff      	cmp	r2, #255	; 0xff
    c8d8:	b29b      	uxth	r3, r3
    c8da:	b2bf      	uxth	r7, r7
    c8dc:	d006      	beq.n	c8ec <AttcDiscCharCmpl+0x84>
    c8de:	6861      	ldr	r1, [r4, #4]
    c8e0:	1e58      	subs	r0, r3, #1
    c8e2:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    c8e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c8ea:	74e2      	strb	r2, [r4, #19]
    c8ec:	42bb      	cmp	r3, r7
    c8ee:	d304      	bcc.n	c8fa <AttcDiscCharCmpl+0x92>
    c8f0:	445e      	add	r6, fp
    c8f2:	9b01      	ldr	r3, [sp, #4]
    c8f4:	429e      	cmp	r6, r3
    c8f6:	d3e5      	bcc.n	c8c4 <AttcDiscCharCmpl+0x5c>
    c8f8:	e7c8      	b.n	c88c <AttcDiscCharCmpl+0x24>
    c8fa:	8a23      	ldrh	r3, [r4, #16]
    c8fc:	42bb      	cmp	r3, r7
    c8fe:	d3f7      	bcc.n	c8f0 <AttcDiscCharCmpl+0x88>
    c900:	1d72      	adds	r2, r6, #5
    c902:	6823      	ldr	r3, [r4, #0]
    c904:	9202      	str	r2, [sp, #8]
    c906:	f04f 0900 	mov.w	r9, #0
    c90a:	7b22      	ldrb	r2, [r4, #12]
    c90c:	fa5f f889 	uxtb.w	r8, r9
    c910:	4542      	cmp	r2, r8
    c912:	d9ed      	bls.n	c8f0 <AttcDiscCharCmpl+0x88>
    c914:	f108 0201 	add.w	r2, r8, #1
    c918:	b2d2      	uxtb	r2, r2
    c91a:	9200      	str	r2, [sp, #0]
    c91c:	6862      	ldr	r2, [r4, #4]
    c91e:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
    c922:	b9c2      	cbnz	r2, c956 <AttcDiscCharCmpl+0xee>
    c924:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    c928:	9902      	ldr	r1, [sp, #8]
    c92a:	9303      	str	r3, [sp, #12]
    c92c:	4652      	mov	r2, sl
    c92e:	f7ff ff45 	bl	c7bc <attcUuidCmp>
    c932:	9b03      	ldr	r3, [sp, #12]
    c934:	b178      	cbz	r0, c956 <AttcDiscCharCmpl+0xee>
    c936:	6862      	ldr	r2, [r4, #4]
    c938:	f822 7018 	strh.w	r7, [r2, r8, lsl #1]
    c93c:	7b22      	ldrb	r2, [r4, #12]
    c93e:	3a01      	subs	r2, #1
    c940:	4590      	cmp	r8, r2
    c942:	da08      	bge.n	c956 <AttcDiscCharCmpl+0xee>
    c944:	eb03 0289 	add.w	r2, r3, r9, lsl #2
    c948:	6852      	ldr	r2, [r2, #4]
    c94a:	7912      	ldrb	r2, [r2, #4]
    c94c:	0752      	lsls	r2, r2, #29
    c94e:	bf44      	itt	mi
    c950:	f89d 2000 	ldrbmi.w	r2, [sp]
    c954:	74e2      	strbmi	r2, [r4, #19]
    c956:	f109 0901 	add.w	r9, r9, #1
    c95a:	e7d6      	b.n	c90a <AttcDiscCharCmpl+0xa2>
    c95c:	f04f 0a01 	mov.w	sl, #1
    c960:	892a      	ldrh	r2, [r5, #8]
    c962:	1c5e      	adds	r6, r3, #1
    c964:	4413      	add	r3, r2
    c966:	9301      	str	r3, [sp, #4]
    c968:	e7c3      	b.n	c8f2 <AttcDiscCharCmpl+0x8a>
    c96a:	7ce3      	ldrb	r3, [r4, #19]
    c96c:	2bff      	cmp	r3, #255	; 0xff
    c96e:	bf1e      	ittt	ne
    c970:	6862      	ldrne	r2, [r4, #4]
    c972:	8a21      	ldrhne	r1, [r4, #16]
    c974:	f822 1013 	strhne.w	r1, [r2, r3, lsl #1]
    c978:	2300      	movs	r3, #0
    c97a:	74a3      	strb	r3, [r4, #18]
    c97c:	7828      	ldrb	r0, [r5, #0]
    c97e:	4621      	mov	r1, r4
    c980:	f7ff feb4 	bl	c6ec <attcDiscDescriptors>
    c984:	4605      	mov	r5, r0
    c986:	2800      	cmp	r0, #0
    c988:	d087      	beq.n	c89a <AttcDiscCharCmpl+0x32>
    c98a:	2878      	cmp	r0, #120	; 0x78
    c98c:	d193      	bne.n	c8b6 <AttcDiscCharCmpl+0x4e>
    c98e:	e783      	b.n	c898 <AttcDiscCharCmpl+0x30>
    c990:	f891 9003 	ldrb.w	r9, [r1, #3]
    c994:	f1b9 0f00 	cmp.w	r9, #0
    c998:	d014      	beq.n	c9c4 <AttcDiscCharCmpl+0x15c>
    c99a:	78eb      	ldrb	r3, [r5, #3]
    c99c:	b91b      	cbnz	r3, c9a6 <AttcDiscCharCmpl+0x13e>
    c99e:	7b2b      	ldrb	r3, [r5, #12]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	f47f af79 	bne.w	c898 <AttcDiscCharCmpl+0x30>
    c9a6:	7ca3      	ldrb	r3, [r4, #18]
    c9a8:	6822      	ldr	r2, [r4, #0]
    c9aa:	7b20      	ldrb	r0, [r4, #12]
    c9ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c9b0:	3301      	adds	r3, #1
    c9b2:	b2db      	uxtb	r3, r3
    c9b4:	4283      	cmp	r3, r0
    c9b6:	d0e0      	beq.n	c97a <AttcDiscCharCmpl+0x112>
    c9b8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    c9bc:	7909      	ldrb	r1, [r1, #4]
    c9be:	0749      	lsls	r1, r1, #29
    c9c0:	d4f6      	bmi.n	c9b0 <AttcDiscCharCmpl+0x148>
    c9c2:	e7da      	b.n	c97a <AttcDiscCharCmpl+0x112>
    c9c4:	684b      	ldr	r3, [r1, #4]
    c9c6:	781a      	ldrb	r2, [r3, #0]
    c9c8:	2a01      	cmp	r2, #1
    c9ca:	d037      	beq.n	ca3c <AttcDiscCharCmpl+0x1d4>
    c9cc:	2a02      	cmp	r2, #2
    c9ce:	f47f af71 	bne.w	c8b4 <AttcDiscCharCmpl+0x4c>
    c9d2:	f04f 0901 	mov.w	r9, #1
    c9d6:	f04f 0b12 	mov.w	fp, #18
    c9da:	e031      	b.n	ca40 <AttcDiscCharCmpl+0x1d8>
    c9dc:	7ca6      	ldrb	r6, [r4, #18]
    c9de:	f817 3c02 	ldrb.w	r3, [r7, #-2]
    c9e2:	9300      	str	r3, [sp, #0]
    c9e4:	ea4f 0886 	mov.w	r8, r6, lsl #2
    c9e8:	6823      	ldr	r3, [r4, #0]
    c9ea:	f817 ac01 	ldrb.w	sl, [r7, #-1]
    c9ee:	f1a8 0804 	sub.w	r8, r8, #4
    c9f2:	4498      	add	r8, r3
    c9f4:	7b23      	ldrb	r3, [r4, #12]
    c9f6:	42b3      	cmp	r3, r6
    c9f8:	d917      	bls.n	ca2a <AttcDiscCharCmpl+0x1c2>
    c9fa:	f858 0f04 	ldr.w	r0, [r8, #4]!
    c9fe:	7903      	ldrb	r3, [r0, #4]
    ca00:	075b      	lsls	r3, r3, #29
    ca02:	d512      	bpl.n	ca2a <AttcDiscCharCmpl+0x1c2>
    ca04:	b232      	sxth	r2, r6
    ca06:	6861      	ldr	r1, [r4, #4]
    ca08:	0053      	lsls	r3, r2, #1
    ca0a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    ca0e:	b992      	cbnz	r2, ca36 <AttcDiscCharCmpl+0x1ce>
    ca10:	464a      	mov	r2, r9
    ca12:	4639      	mov	r1, r7
    ca14:	9302      	str	r3, [sp, #8]
    ca16:	f7ff fed1 	bl	c7bc <attcUuidCmp>
    ca1a:	9b02      	ldr	r3, [sp, #8]
    ca1c:	b158      	cbz	r0, ca36 <AttcDiscCharCmpl+0x1ce>
    ca1e:	9900      	ldr	r1, [sp, #0]
    ca20:	6862      	ldr	r2, [r4, #4]
    ca22:	eb01 2a0a 	add.w	sl, r1, sl, lsl #8
    ca26:	f822 a003 	strh.w	sl, [r2, r3]
    ca2a:	445f      	add	r7, fp
    ca2c:	9a01      	ldr	r2, [sp, #4]
    ca2e:	1ebb      	subs	r3, r7, #2
    ca30:	4293      	cmp	r3, r2
    ca32:	d3d3      	bcc.n	c9dc <AttcDiscCharCmpl+0x174>
    ca34:	e7b1      	b.n	c99a <AttcDiscCharCmpl+0x132>
    ca36:	3601      	adds	r6, #1
    ca38:	b2f6      	uxtb	r6, r6
    ca3a:	e7db      	b.n	c9f4 <AttcDiscCharCmpl+0x18c>
    ca3c:	f04f 0b04 	mov.w	fp, #4
    ca40:	892a      	ldrh	r2, [r5, #8]
    ca42:	1cdf      	adds	r7, r3, #3
    ca44:	4413      	add	r3, r2
    ca46:	9301      	str	r3, [sp, #4]
    ca48:	e7f0      	b.n	ca2c <AttcDiscCharCmpl+0x1c4>

0000ca4a <AttcDiscConfigStart>:
    ca4a:	2200      	movs	r2, #0
    ca4c:	748a      	strb	r2, [r1, #18]
    ca4e:	e696      	b.n	c77e <attcDiscConfigNext>

0000ca50 <AttcDiscConfigCmpl>:
    ca50:	7c8b      	ldrb	r3, [r1, #18]
    ca52:	3301      	adds	r3, #1
    ca54:	748b      	strb	r3, [r1, #18]
    ca56:	e692      	b.n	c77e <attcDiscConfigNext>

0000ca58 <AttcDiscConfigResume>:
    ca58:	e691      	b.n	c77e <attcDiscConfigNext>
    ca5a:	bf00      	nop

0000ca5c <attcSendSimpleReq>:
    ca5c:	b570      	push	{r4, r5, r6, lr}
    ca5e:	2300      	movs	r3, #0
    ca60:	6945      	ldr	r5, [r0, #20]
    ca62:	6143      	str	r3, [r0, #20]
    ca64:	7c83      	ldrb	r3, [r0, #18]
    ca66:	2b0a      	cmp	r3, #10
    ca68:	4604      	mov	r4, r0
    ca6a:	d008      	beq.n	ca7e <attcSendSimpleReq+0x22>
    ca6c:	2310      	movs	r3, #16
    ca6e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    ca72:	4b07      	ldr	r3, [pc, #28]	; (ca90 <attcSendSimpleReq+0x34>)
    ca74:	681b      	ldr	r3, [r3, #0]
    ca76:	3024      	adds	r0, #36	; 0x24
    ca78:	7999      	ldrb	r1, [r3, #6]
    ca7a:	f007 ff73 	bl	14964 <WsfTimerStartSec>
    ca7e:	6821      	ldr	r1, [r4, #0]
    ca80:	882a      	ldrh	r2, [r5, #0]
    ca82:	8b09      	ldrh	r1, [r1, #24]
    ca84:	462b      	mov	r3, r5
    ca86:	2004      	movs	r0, #4
    ca88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca8c:	f003 be98 	b.w	107c0 <L2cDataReq>
    ca90:	10002bd0 	.word	0x10002bd0

0000ca94 <attcSendReq>:
    ca94:	7c82      	ldrb	r2, [r0, #18]
    ca96:	4b02      	ldr	r3, [pc, #8]	; (caa0 <attcSendReq+0xc>)
    ca98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ca9c:	4718      	bx	r3
    ca9e:	bf00      	nop
    caa0:	00025018 	.word	0x00025018

0000caa4 <attcSetupReq>:
    caa4:	b430      	push	{r4, r5}
    caa6:	460b      	mov	r3, r1
    caa8:	4604      	mov	r4, r0
    caaa:	f100 0510 	add.w	r5, r0, #16
    caae:	c907      	ldmia	r1, {r0, r1, r2}
    cab0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    cab4:	685a      	ldr	r2, [r3, #4]
    cab6:	e892 0003 	ldmia.w	r2, {r0, r1}
    caba:	f104 031c 	add.w	r3, r4, #28
    cabe:	e883 0003 	stmia.w	r3, {r0, r1}
    cac2:	4620      	mov	r0, r4
    cac4:	bc30      	pop	{r4, r5}
    cac6:	f7ff bfe5 	b.w	ca94 <attcSendReq>

0000caca <attcCcbByConnId>:
    caca:	b510      	push	{r4, lr}
    cacc:	4604      	mov	r4, r0
    cace:	f002 fed5 	bl	f87c <DmConnInUse>
    cad2:	b120      	cbz	r0, cade <attcCcbByConnId+0x14>
    cad4:	4b02      	ldr	r3, [pc, #8]	; (cae0 <attcCcbByConnId+0x16>)
    cad6:	3c01      	subs	r4, #1
    cad8:	2038      	movs	r0, #56	; 0x38
    cada:	fb00 3004 	mla	r0, r0, r4, r3
    cade:	bd10      	pop	{r4, pc}
    cae0:	10003ae8 	.word	0x10003ae8

0000cae4 <attcCcbByHandle>:
    cae4:	b508      	push	{r3, lr}
    cae6:	f002 feb5 	bl	f854 <DmConnIdByHandle>
    caea:	b120      	cbz	r0, caf6 <attcCcbByHandle+0x12>
    caec:	4b02      	ldr	r3, [pc, #8]	; (caf8 <attcCcbByHandle+0x14>)
    caee:	3801      	subs	r0, #1
    caf0:	2238      	movs	r2, #56	; 0x38
    caf2:	fb02 3000 	mla	r0, r2, r0, r3
    caf6:	bd08      	pop	{r3, pc}
    caf8:	10003ae8 	.word	0x10003ae8

0000cafc <attcDataCback>:
    cafc:	b570      	push	{r4, r5, r6, lr}
    cafe:	460d      	mov	r5, r1
    cb00:	4614      	mov	r4, r2
    cb02:	f7ff ffef 	bl	cae4 <attcCcbByHandle>
    cb06:	4606      	mov	r6, r0
    cb08:	b198      	cbz	r0, cb32 <attcDataCback+0x36>
    cb0a:	7a23      	ldrb	r3, [r4, #8]
    cb0c:	2b19      	cmp	r3, #25
    cb0e:	d805      	bhi.n	cb1c <attcDataCback+0x20>
    cb10:	4622      	mov	r2, r4
    cb12:	4629      	mov	r1, r5
    cb14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb18:	f000 ba5e 	b.w	cfd8 <attcProcRsp>
    cb1c:	2b1b      	cmp	r3, #27
    cb1e:	d001      	beq.n	cb24 <attcDataCback+0x28>
    cb20:	2b1d      	cmp	r3, #29
    cb22:	d106      	bne.n	cb32 <attcDataCback+0x36>
    cb24:	4622      	mov	r2, r4
    cb26:	4629      	mov	r1, r5
    cb28:	4630      	mov	r0, r6
    cb2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb2e:	f000 baaf 	b.w	d090 <attcProcInd>
    cb32:	bd70      	pop	{r4, r5, r6, pc}

0000cb34 <attcFreePkt>:
    cb34:	b510      	push	{r4, lr}
    cb36:	4604      	mov	r4, r0
    cb38:	6840      	ldr	r0, [r0, #4]
    cb3a:	b118      	cbz	r0, cb44 <attcFreePkt+0x10>
    cb3c:	f007 fd70 	bl	14620 <WsfMsgFree>
    cb40:	2300      	movs	r3, #0
    cb42:	6063      	str	r3, [r4, #4]
    cb44:	bd10      	pop	{r4, pc}

0000cb46 <attcSendMtuReq>:
    cb46:	b510      	push	{r4, lr}
    cb48:	6803      	ldr	r3, [r0, #0]
    cb4a:	7f5a      	ldrb	r2, [r3, #29]
    cb4c:	4604      	mov	r4, r0
    cb4e:	b12a      	cbz	r2, cb5c <attcSendMtuReq+0x16>
    cb50:	3010      	adds	r0, #16
    cb52:	f7ff ffef 	bl	cb34 <attcFreePkt>
    cb56:	2300      	movs	r3, #0
    cb58:	74a3      	strb	r3, [r4, #18]
    cb5a:	bd10      	pop	{r4, pc}
    cb5c:	2201      	movs	r2, #1
    cb5e:	775a      	strb	r2, [r3, #29]
    cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb64:	e77a      	b.n	ca5c <attcSendSimpleReq>

0000cb66 <attcExecCallback>:
    cb66:	2901      	cmp	r1, #1
    cb68:	b513      	push	{r0, r1, r4, lr}
    cb6a:	d003      	beq.n	cb74 <attcExecCallback+0xe>
    cb6c:	2400      	movs	r4, #0
    cb6e:	9400      	str	r4, [sp, #0]
    cb70:	f7ff fd1c 	bl	c5ac <attExecCallback>
    cb74:	b002      	add	sp, #8
    cb76:	bd10      	pop	{r4, pc}

0000cb78 <attcSendWriteCmd>:
    cb78:	b510      	push	{r4, lr}
    cb7a:	4604      	mov	r4, r0
    cb7c:	f7ff ff6e 	bl	ca5c <attcSendSimpleReq>
    cb80:	6820      	ldr	r0, [r4, #0]
    cb82:	8b22      	ldrh	r2, [r4, #24]
    cb84:	7f00      	ldrb	r0, [r0, #28]
    cb86:	2300      	movs	r3, #0
    cb88:	210a      	movs	r1, #10
    cb8a:	f7ff ffec 	bl	cb66 <attcExecCallback>
    cb8e:	2300      	movs	r3, #0
    cb90:	74a3      	strb	r3, [r4, #18]
    cb92:	bd10      	pop	{r4, pc}

0000cb94 <attcReqClear>:
    cb94:	b570      	push	{r4, r5, r6, lr}
    cb96:	4606      	mov	r6, r0
    cb98:	4608      	mov	r0, r1
    cb9a:	460c      	mov	r4, r1
    cb9c:	4615      	mov	r5, r2
    cb9e:	f7ff ffc9 	bl	cb34 <attcFreePkt>
    cba2:	6830      	ldr	r0, [r6, #0]
    cba4:	8922      	ldrh	r2, [r4, #8]
    cba6:	78a1      	ldrb	r1, [r4, #2]
    cba8:	7f00      	ldrb	r0, [r0, #28]
    cbaa:	462b      	mov	r3, r5
    cbac:	f7ff ffdb 	bl	cb66 <attcExecCallback>
    cbb0:	2300      	movs	r3, #0
    cbb2:	70a3      	strb	r3, [r4, #2]
    cbb4:	bd70      	pop	{r4, r5, r6, pc}

0000cbb6 <attcSendPrepWriteReq>:
    cbb6:	b570      	push	{r4, r5, r6, lr}
    cbb8:	7cc3      	ldrb	r3, [r0, #19]
    cbba:	8b85      	ldrh	r5, [r0, #28]
    cbbc:	2b01      	cmp	r3, #1
    cbbe:	4604      	mov	r4, r0
    cbc0:	d149      	bne.n	cc56 <attcSendPrepWriteReq+0xa0>
    cbc2:	6803      	ldr	r3, [r0, #0]
    cbc4:	8b5b      	ldrh	r3, [r3, #26]
    cbc6:	3b05      	subs	r3, #5
    cbc8:	429d      	cmp	r5, r3
    cbca:	bfa8      	it	ge
    cbcc:	b29d      	uxthge	r5, r3
    cbce:	f105 000d 	add.w	r0, r5, #13
    cbd2:	b280      	uxth	r0, r0
    cbd4:	f7ff fd18 	bl	c608 <attMsgAlloc>
    cbd8:	4606      	mov	r6, r0
    cbda:	2800      	cmp	r0, #0
    cbdc:	d033      	beq.n	cc46 <attcSendPrepWriteReq+0x90>
    cbde:	6963      	ldr	r3, [r4, #20]
    cbe0:	4602      	mov	r2, r0
    cbe2:	f103 010c 	add.w	r1, r3, #12
    cbe6:	f853 0b04 	ldr.w	r0, [r3], #4
    cbea:	f842 0b04 	str.w	r0, [r2], #4
    cbee:	428b      	cmp	r3, r1
    cbf0:	d1f9      	bne.n	cbe6 <attcSendPrepWriteReq+0x30>
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	7013      	strb	r3, [r2, #0]
    cbf6:	6a21      	ldr	r1, [r4, #32]
    cbf8:	462a      	mov	r2, r5
    cbfa:	f106 000d 	add.w	r0, r6, #13
    cbfe:	f7ff faaf 	bl	c160 <memcpy>
    cc02:	6a23      	ldr	r3, [r4, #32]
    cc04:	442b      	add	r3, r5
    cc06:	6223      	str	r3, [r4, #32]
    cc08:	8ba3      	ldrh	r3, [r4, #28]
    cc0a:	1b5b      	subs	r3, r3, r5
    cc0c:	83a3      	strh	r3, [r4, #28]
    cc0e:	8be3      	ldrh	r3, [r4, #30]
    cc10:	72f3      	strb	r3, [r6, #11]
    cc12:	8be3      	ldrh	r3, [r4, #30]
    cc14:	0a1b      	lsrs	r3, r3, #8
    cc16:	7333      	strb	r3, [r6, #12]
    cc18:	8be3      	ldrh	r3, [r4, #30]
    cc1a:	442b      	add	r3, r5
    cc1c:	83e3      	strh	r3, [r4, #30]
    cc1e:	2310      	movs	r3, #16
    cc20:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cc24:	4b0e      	ldr	r3, [pc, #56]	; (cc60 <attcSendPrepWriteReq+0xaa>)
    cc26:	681b      	ldr	r3, [r3, #0]
    cc28:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cc2c:	7999      	ldrb	r1, [r3, #6]
    cc2e:	f007 fe99 	bl	14964 <WsfTimerStartSec>
    cc32:	6821      	ldr	r1, [r4, #0]
    cc34:	1d6a      	adds	r2, r5, #5
    cc36:	4633      	mov	r3, r6
    cc38:	b292      	uxth	r2, r2
    cc3a:	8b09      	ldrh	r1, [r1, #24]
    cc3c:	2004      	movs	r0, #4
    cc3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc42:	f003 bdbd 	b.w	107c0 <L2cDataReq>
    cc46:	f104 0110 	add.w	r1, r4, #16
    cc4a:	4620      	mov	r0, r4
    cc4c:	2270      	movs	r2, #112	; 0x70
    cc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc52:	f7ff bf9f 	b.w	cb94 <attcReqClear>
    cc56:	2300      	movs	r3, #0
    cc58:	6946      	ldr	r6, [r0, #20]
    cc5a:	6143      	str	r3, [r0, #20]
    cc5c:	e7d7      	b.n	cc0e <attcSendPrepWriteReq+0x58>
    cc5e:	bf00      	nop
    cc60:	10002bd0 	.word	0x10002bd0

0000cc64 <attcSendContinuingReq>:
    cc64:	b570      	push	{r4, r5, r6, lr}
    cc66:	7cc3      	ldrb	r3, [r0, #19]
    cc68:	6945      	ldr	r5, [r0, #20]
    cc6a:	2b01      	cmp	r3, #1
    cc6c:	4604      	mov	r4, r0
    cc6e:	d12e      	bne.n	ccce <attcSendContinuingReq+0x6a>
    cc70:	8828      	ldrh	r0, [r5, #0]
    cc72:	3008      	adds	r0, #8
    cc74:	b280      	uxth	r0, r0
    cc76:	f7ff fcc7 	bl	c608 <attMsgAlloc>
    cc7a:	4605      	mov	r5, r0
    cc7c:	b1f8      	cbz	r0, ccbe <attcSendContinuingReq+0x5a>
    cc7e:	6961      	ldr	r1, [r4, #20]
    cc80:	880a      	ldrh	r2, [r1, #0]
    cc82:	3208      	adds	r2, #8
    cc84:	f7ff fa6c 	bl	c160 <memcpy>
    cc88:	7ca2      	ldrb	r2, [r4, #18]
    cc8a:	7fa3      	ldrb	r3, [r4, #30]
    cc8c:	2a06      	cmp	r2, #6
    cc8e:	d121      	bne.n	ccd4 <attcSendContinuingReq+0x70>
    cc90:	72eb      	strb	r3, [r5, #11]
    cc92:	8be3      	ldrh	r3, [r4, #30]
    cc94:	0a1b      	lsrs	r3, r3, #8
    cc96:	732b      	strb	r3, [r5, #12]
    cc98:	2310      	movs	r3, #16
    cc9a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cc9e:	4b11      	ldr	r3, [pc, #68]	; (cce4 <attcSendContinuingReq+0x80>)
    cca0:	681b      	ldr	r3, [r3, #0]
    cca2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cca6:	7999      	ldrb	r1, [r3, #6]
    cca8:	f007 fe5c 	bl	14964 <WsfTimerStartSec>
    ccac:	6821      	ldr	r1, [r4, #0]
    ccae:	882a      	ldrh	r2, [r5, #0]
    ccb0:	8b09      	ldrh	r1, [r1, #24]
    ccb2:	462b      	mov	r3, r5
    ccb4:	2004      	movs	r0, #4
    ccb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ccba:	f003 bd81 	b.w	107c0 <L2cDataReq>
    ccbe:	f104 0110 	add.w	r1, r4, #16
    ccc2:	4620      	mov	r0, r4
    ccc4:	2270      	movs	r2, #112	; 0x70
    ccc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ccca:	f7ff bf63 	b.w	cb94 <attcReqClear>
    ccce:	2300      	movs	r3, #0
    ccd0:	6143      	str	r3, [r0, #20]
    ccd2:	e7d9      	b.n	cc88 <attcSendContinuingReq+0x24>
    ccd4:	726b      	strb	r3, [r5, #9]
    ccd6:	8be3      	ldrh	r3, [r4, #30]
    ccd8:	0a1b      	lsrs	r3, r3, #8
    ccda:	72ab      	strb	r3, [r5, #10]
    ccdc:	8c23      	ldrh	r3, [r4, #32]
    ccde:	72eb      	strb	r3, [r5, #11]
    cce0:	8c23      	ldrh	r3, [r4, #32]
    cce2:	e7d7      	b.n	cc94 <attcSendContinuingReq+0x30>
    cce4:	10002bd0 	.word	0x10002bd0

0000cce8 <attcConnCback>:
    cce8:	788b      	ldrb	r3, [r1, #2]
    ccea:	2b27      	cmp	r3, #39	; 0x27
    ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccf0:	4605      	mov	r5, r0
    ccf2:	d11a      	bne.n	cd2a <attcConnCback+0x42>
    ccf4:	7f00      	ldrb	r0, [r0, #28]
    ccf6:	f002 fe39 	bl	f96c <DmConnRole>
    ccfa:	2800      	cmp	r0, #0
    ccfc:	d14c      	bne.n	cd98 <attcConnCback+0xb0>
    ccfe:	4c27      	ldr	r4, [pc, #156]	; (cd9c <attcConnCback+0xb4>)
    cd00:	6823      	ldr	r3, [r4, #0]
    cd02:	889e      	ldrh	r6, [r3, #4]
    cd04:	f00b fc8e 	bl	18624 <HciGetMaxRxAclLen>
    cd08:	3804      	subs	r0, #4
    cd0a:	4286      	cmp	r6, r0
    cd0c:	da08      	bge.n	cd20 <attcConnCback+0x38>
    cd0e:	6823      	ldr	r3, [r4, #0]
    cd10:	8899      	ldrh	r1, [r3, #4]
    cd12:	2917      	cmp	r1, #23
    cd14:	d040      	beq.n	cd98 <attcConnCback+0xb0>
    cd16:	7f28      	ldrb	r0, [r5, #28]
    cd18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd1c:	f000 ba9c 	b.w	d258 <AttcMtuReq>
    cd20:	f00b fc80 	bl	18624 <HciGetMaxRxAclLen>
    cd24:	1f01      	subs	r1, r0, #4
    cd26:	b289      	uxth	r1, r1
    cd28:	e7f3      	b.n	cd12 <attcConnCback+0x2a>
    cd2a:	2b28      	cmp	r3, #40	; 0x28
    cd2c:	d134      	bne.n	cd98 <attcConnCback+0xb0>
    cd2e:	78cc      	ldrb	r4, [r1, #3]
    cd30:	b904      	cbnz	r4, cd34 <attcConnCback+0x4c>
    cd32:	7a0c      	ldrb	r4, [r1, #8]
    cd34:	7f2e      	ldrb	r6, [r5, #28]
    cd36:	4d1a      	ldr	r5, [pc, #104]	; (cda0 <attcConnCback+0xb8>)
    cd38:	3e01      	subs	r6, #1
    cd3a:	2738      	movs	r7, #56	; 0x38
    cd3c:	4377      	muls	r7, r6
    cd3e:	eb05 0807 	add.w	r8, r5, r7
    cd42:	3420      	adds	r4, #32
    cd44:	f898 3012 	ldrb.w	r3, [r8, #18]
    cd48:	b2e4      	uxtb	r4, r4
    cd4a:	b15b      	cbz	r3, cd64 <attcConnCback+0x7c>
    cd4c:	f107 0024 	add.w	r0, r7, #36	; 0x24
    cd50:	4428      	add	r0, r5
    cd52:	f007 fe2d 	bl	149b0 <WsfTimerStop>
    cd56:	f107 0110 	add.w	r1, r7, #16
    cd5a:	4622      	mov	r2, r4
    cd5c:	4429      	add	r1, r5
    cd5e:	4640      	mov	r0, r8
    cd60:	f7ff ff18 	bl	cb94 <attcReqClear>
    cd64:	2338      	movs	r3, #56	; 0x38
    cd66:	fb03 5306 	mla	r3, r3, r6, r5
    cd6a:	799b      	ldrb	r3, [r3, #6]
    cd6c:	b12b      	cbz	r3, cd7a <attcConnCback+0x92>
    cd6e:	1d39      	adds	r1, r7, #4
    cd70:	4622      	mov	r2, r4
    cd72:	4429      	add	r1, r5
    cd74:	4640      	mov	r0, r8
    cd76:	f7ff ff0d 	bl	cb94 <attcReqClear>
    cd7a:	2338      	movs	r3, #56	; 0x38
    cd7c:	fb03 5606 	mla	r6, r3, r6, r5
    cd80:	3630      	adds	r6, #48	; 0x30
    cd82:	2300      	movs	r3, #0
    cd84:	80b3      	strh	r3, [r6, #4]
    cd86:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
    cd8a:	b12b      	cbz	r3, cd98 <attcConnCback+0xb0>
    cd8c:	4621      	mov	r1, r4
    cd8e:	4640      	mov	r0, r8
    cd90:	685b      	ldr	r3, [r3, #4]
    cd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd96:	4718      	bx	r3
    cd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd9c:	10002bd0 	.word	0x10002bd0
    cda0:	10003ae8 	.word	0x10003ae8

0000cda4 <attcMsgCback>:
    cda4:	b570      	push	{r4, r5, r6, lr}
    cda6:	4605      	mov	r5, r0
    cda8:	7800      	ldrb	r0, [r0, #0]
    cdaa:	f7ff fe8e 	bl	caca <attcCcbByConnId>
    cdae:	78ab      	ldrb	r3, [r5, #2]
    cdb0:	4604      	mov	r4, r0
    cdb2:	b938      	cbnz	r0, cdc4 <attcMsgCback+0x20>
    cdb4:	3b01      	subs	r3, #1
    cdb6:	2b0c      	cmp	r3, #12
    cdb8:	d81b      	bhi.n	cdf2 <attcMsgCback+0x4e>
    cdba:	4628      	mov	r0, r5
    cdbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdc0:	f7ff beb8 	b.w	cb34 <attcFreePkt>
    cdc4:	2b0c      	cmp	r3, #12
    cdc6:	d81a      	bhi.n	cdfe <attcMsgCback+0x5a>
    cdc8:	7983      	ldrb	r3, [r0, #6]
    cdca:	b913      	cbnz	r3, cdd2 <attcMsgCback+0x2e>
    cdcc:	7c83      	ldrb	r3, [r0, #18]
    cdce:	2b01      	cmp	r3, #1
    cdd0:	d906      	bls.n	cde0 <attcMsgCback+0x3c>
    cdd2:	2272      	movs	r2, #114	; 0x72
    cdd4:	4629      	mov	r1, r5
    cdd6:	4620      	mov	r0, r4
    cdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cddc:	f7ff beda 	b.w	cb94 <attcReqClear>
    cde0:	d002      	beq.n	cde8 <attcMsgCback+0x44>
    cde2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    cde6:	b12b      	cbz	r3, cdf4 <attcMsgCback+0x50>
    cde8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    cdec:	3404      	adds	r4, #4
    cdee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cdf2:	bd70      	pop	{r4, r5, r6, pc}
    cdf4:	4629      	mov	r1, r5
    cdf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdfa:	f7ff be53 	b.w	caa4 <attcSetupReq>
    cdfe:	f1a3 020d 	sub.w	r2, r3, #13
    ce02:	2a01      	cmp	r2, #1
    ce04:	d809      	bhi.n	ce1a <attcMsgCback+0x76>
    ce06:	4b15      	ldr	r3, [pc, #84]	; (ce5c <attcMsgCback+0xb8>)
    ce08:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d0f0      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce10:	4629      	mov	r1, r5
    ce12:	681b      	ldr	r3, [r3, #0]
    ce14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ce18:	4718      	bx	r3
    ce1a:	2b0f      	cmp	r3, #15
    ce1c:	d10f      	bne.n	ce3e <attcMsgCback+0x9a>
    ce1e:	7c83      	ldrb	r3, [r0, #18]
    ce20:	2b01      	cmp	r3, #1
    ce22:	d906      	bls.n	ce32 <attcMsgCback+0x8e>
    ce24:	3024      	adds	r0, #36	; 0x24
    ce26:	f007 fdc3 	bl	149b0 <WsfTimerStop>
    ce2a:	2274      	movs	r2, #116	; 0x74
    ce2c:	f104 0110 	add.w	r1, r4, #16
    ce30:	e7d1      	b.n	cdd6 <attcMsgCback+0x32>
    ce32:	7983      	ldrb	r3, [r0, #6]
    ce34:	2b00      	cmp	r3, #0
    ce36:	d0dc      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce38:	2274      	movs	r2, #116	; 0x74
    ce3a:	1d01      	adds	r1, r0, #4
    ce3c:	e7cc      	b.n	cdd8 <attcMsgCback+0x34>
    ce3e:	2b10      	cmp	r3, #16
    ce40:	d1d7      	bne.n	cdf2 <attcMsgCback+0x4e>
    ce42:	7c83      	ldrb	r3, [r0, #18]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d0d4      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce48:	2271      	movs	r2, #113	; 0x71
    ce4a:	f100 0110 	add.w	r1, r0, #16
    ce4e:	f7ff fea1 	bl	cb94 <attcReqClear>
    ce52:	6823      	ldr	r3, [r4, #0]
    ce54:	2201      	movs	r2, #1
    ce56:	77da      	strb	r2, [r3, #31]
    ce58:	e7cb      	b.n	cdf2 <attcMsgCback+0x4e>
    ce5a:	bf00      	nop
    ce5c:	10003ae8 	.word	0x10003ae8

0000ce60 <AttcInit>:
    ce60:	b510      	push	{r4, lr}
    ce62:	490c      	ldr	r1, [pc, #48]	; (ce94 <AttcInit+0x34>)
    ce64:	4a0c      	ldr	r2, [pc, #48]	; (ce98 <AttcInit+0x38>)
    ce66:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    ce6a:	2300      	movs	r3, #0
    ce6c:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    ce70:	3238      	adds	r2, #56	; 0x38
    ce72:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    ce76:	3301      	adds	r3, #1
    ce78:	2b08      	cmp	r3, #8
    ce7a:	f842 4c38 	str.w	r4, [r2, #-56]
    ce7e:	f802 0c0c 	strb.w	r0, [r2, #-12]
    ce82:	f822 3c0a 	strh.w	r3, [r2, #-10]
    ce86:	f102 0238 	add.w	r2, r2, #56	; 0x38
    ce8a:	d1f2      	bne.n	ce72 <AttcInit+0x12>
    ce8c:	4b03      	ldr	r3, [pc, #12]	; (ce9c <AttcInit+0x3c>)
    ce8e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ce92:	bd10      	pop	{r4, pc}
    ce94:	100039d4 	.word	0x100039d4
    ce98:	10003ae8 	.word	0x10003ae8
    ce9c:	0002504c 	.word	0x0002504c

0000cea0 <attcProcErrRsp>:
    cea0:	7c81      	ldrb	r1, [r0, #18]
    cea2:	7099      	strb	r1, [r3, #2]
    cea4:	1f48      	subs	r0, r1, #5
    cea6:	2801      	cmp	r0, #1
    cea8:	d908      	bls.n	cebc <attcProcErrRsp+0x1c>
    ceaa:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    ceae:	2909      	cmp	r1, #9
    ceb0:	bf1f      	itttt	ne
    ceb2:	7ad0      	ldrbne	r0, [r2, #11]
    ceb4:	7a91      	ldrbne	r1, [r2, #10]
    ceb6:	eb01 2100 	addne.w	r1, r1, r0, lsl #8
    ceba:	8159      	strhne	r1, [r3, #10]
    cebc:	7b12      	ldrb	r2, [r2, #12]
    cebe:	b11a      	cbz	r2, cec8 <attcProcErrRsp+0x28>
    cec0:	70da      	strb	r2, [r3, #3]
    cec2:	2200      	movs	r2, #0
    cec4:	811a      	strh	r2, [r3, #8]
    cec6:	4770      	bx	lr
    cec8:	2275      	movs	r2, #117	; 0x75
    ceca:	e7f9      	b.n	cec0 <attcProcErrRsp+0x20>

0000cecc <attcProcFindOrReadRsp>:
    cecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ced0:	7c87      	ldrb	r7, [r0, #18]
    ced2:	7a55      	ldrb	r5, [r2, #9]
    ced4:	3108      	adds	r1, #8
    ced6:	2f02      	cmp	r7, #2
    ced8:	4411      	add	r1, r2
    ceda:	f102 020a 	add.w	r2, r2, #10
    cede:	d12a      	bne.n	cf36 <attcProcFindOrReadRsp+0x6a>
    cee0:	2d01      	cmp	r5, #1
    cee2:	bf14      	ite	ne
    cee4:	2510      	movne	r5, #16
    cee6:	2502      	moveq	r5, #2
    cee8:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    ceec:	f64f 7eff 	movw	lr, #65535	; 0xffff
    cef0:	428a      	cmp	r2, r1
    cef2:	d210      	bcs.n	cf16 <attcProcFindOrReadRsp+0x4a>
    cef4:	7854      	ldrb	r4, [r2, #1]
    cef6:	7816      	ldrb	r6, [r2, #0]
    cef8:	eb06 2604 	add.w	r6, r6, r4, lsl #8
    cefc:	b2b6      	uxth	r6, r6
    cefe:	b146      	cbz	r6, cf12 <attcProcFindOrReadRsp+0x46>
    cf00:	f1bc 0f00 	cmp.w	ip, #0
    cf04:	d005      	beq.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf06:	45b4      	cmp	ip, r6
    cf08:	d803      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf0a:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    cf0e:	45b0      	cmp	r8, r6
    cf10:	d217      	bcs.n	cf42 <attcProcFindOrReadRsp+0x76>
    cf12:	2273      	movs	r2, #115	; 0x73
    cf14:	70da      	strb	r2, [r3, #3]
    cf16:	78db      	ldrb	r3, [r3, #3]
    cf18:	b95b      	cbnz	r3, cf32 <attcProcFindOrReadRsp+0x66>
    cf1a:	7cc3      	ldrb	r3, [r0, #19]
    cf1c:	2b01      	cmp	r3, #1
    cf1e:	d108      	bne.n	cf32 <attcProcFindOrReadRsp+0x66>
    cf20:	f1bc 0f00 	cmp.w	ip, #0
    cf24:	d003      	beq.n	cf2e <attcProcFindOrReadRsp+0x62>
    cf26:	8c03      	ldrh	r3, [r0, #32]
    cf28:	3301      	adds	r3, #1
    cf2a:	459c      	cmp	ip, r3
    cf2c:	d129      	bne.n	cf82 <attcProcFindOrReadRsp+0xb6>
    cf2e:	2300      	movs	r3, #0
    cf30:	74c3      	strb	r3, [r0, #19]
    cf32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cf36:	2f04      	cmp	r7, #4
    cf38:	bf0c      	ite	eq
    cf3a:	3d02      	subeq	r5, #2
    cf3c:	3d04      	subne	r5, #4
    cf3e:	b2ed      	uxtb	r5, r5
    cf40:	e7d2      	b.n	cee8 <attcProcFindOrReadRsp+0x1c>
    cf42:	2f08      	cmp	r7, #8
    cf44:	d11a      	bne.n	cf7c <attcProcFindOrReadRsp+0xb0>
    cf46:	f892 9003 	ldrb.w	r9, [r2, #3]
    cf4a:	7894      	ldrb	r4, [r2, #2]
    cf4c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
    cf50:	b2a4      	uxth	r4, r4
    cf52:	3204      	adds	r2, #4
    cf54:	2c00      	cmp	r4, #0
    cf56:	d0dc      	beq.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf58:	42a6      	cmp	r6, r4
    cf5a:	d8da      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf5c:	45a4      	cmp	ip, r4
    cf5e:	d8d8      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf60:	45a0      	cmp	r8, r4
    cf62:	d3d6      	bcc.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf64:	4574      	cmp	r4, lr
    cf66:	bf18      	it	ne
    cf68:	3401      	addne	r4, #1
    cf6a:	442a      	add	r2, r5
    cf6c:	bf14      	ite	ne
    cf6e:	fa1f fc84 	uxthne.w	ip, r4
    cf72:	f04f 0c00 	moveq.w	ip, #0
    cf76:	4291      	cmp	r1, r2
    cf78:	d2ba      	bcs.n	cef0 <attcProcFindOrReadRsp+0x24>
    cf7a:	e7ca      	b.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf7c:	3202      	adds	r2, #2
    cf7e:	4634      	mov	r4, r6
    cf80:	e7f0      	b.n	cf64 <attcProcFindOrReadRsp+0x98>
    cf82:	f8a0 c01e 	strh.w	ip, [r0, #30]
    cf86:	f8a0 c018 	strh.w	ip, [r0, #24]
    cf8a:	e7d2      	b.n	cf32 <attcProcFindOrReadRsp+0x66>

0000cf8c <attcProcReadRsp>:
    cf8c:	4770      	bx	lr

0000cf8e <attcProcWriteRsp>:
    cf8e:	2200      	movs	r2, #0
    cf90:	811a      	strh	r2, [r3, #8]
    cf92:	4770      	bx	lr

0000cf94 <attcProcMtuRsp>:
    cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf96:	7a93      	ldrb	r3, [r2, #10]
    cf98:	7a54      	ldrb	r4, [r2, #9]
    cf9a:	4d0e      	ldr	r5, [pc, #56]	; (cfd4 <attcProcMtuRsp+0x40>)
    cf9c:	6806      	ldr	r6, [r0, #0]
    cf9e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    cfa2:	b2a4      	uxth	r4, r4
    cfa4:	682b      	ldr	r3, [r5, #0]
    cfa6:	2c17      	cmp	r4, #23
    cfa8:	bf38      	it	cc
    cfaa:	2417      	movcc	r4, #23
    cfac:	889f      	ldrh	r7, [r3, #4]
    cfae:	f00b fb39 	bl	18624 <HciGetMaxRxAclLen>
    cfb2:	3804      	subs	r0, #4
    cfb4:	4287      	cmp	r7, r0
    cfb6:	da07      	bge.n	cfc8 <attcProcMtuRsp+0x34>
    cfb8:	682b      	ldr	r3, [r5, #0]
    cfba:	889a      	ldrh	r2, [r3, #4]
    cfbc:	4621      	mov	r1, r4
    cfbe:	4630      	mov	r0, r6
    cfc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cfc4:	f7ff bb0e 	b.w	c5e4 <attSetMtu>
    cfc8:	f00b fb2c 	bl	18624 <HciGetMaxRxAclLen>
    cfcc:	1f02      	subs	r2, r0, #4
    cfce:	b292      	uxth	r2, r2
    cfd0:	e7f4      	b.n	cfbc <attcProcMtuRsp+0x28>
    cfd2:	bf00      	nop
    cfd4:	10002bd0 	.word	0x10002bd0

0000cfd8 <attcProcRsp>:
    cfd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cfdc:	460f      	mov	r7, r1
    cfde:	7c81      	ldrb	r1, [r0, #18]
    cfe0:	4604      	mov	r4, r0
    cfe2:	4616      	mov	r6, r2
    cfe4:	2900      	cmp	r1, #0
    cfe6:	d042      	beq.n	d06e <attcProcRsp+0x96>
    cfe8:	7a13      	ldrb	r3, [r2, #8]
    cfea:	105b      	asrs	r3, r3, #1
    cfec:	b2da      	uxtb	r2, r3
    cfee:	f88d 2002 	strb.w	r2, [sp, #2]
    cff2:	b10b      	cbz	r3, cff8 <attcProcRsp+0x20>
    cff4:	4291      	cmp	r1, r2
    cff6:	d13a      	bne.n	d06e <attcProcRsp+0x96>
    cff8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cffc:	f007 fcd8 	bl	149b0 <WsfTimerStop>
    d000:	f106 0309 	add.w	r3, r6, #9
    d004:	9301      	str	r3, [sp, #4]
    d006:	1e7b      	subs	r3, r7, #1
    d008:	f8ad 3008 	strh.w	r3, [sp, #8]
    d00c:	8b23      	ldrh	r3, [r4, #24]
    d00e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    d012:	f8ad 300a 	strh.w	r3, [sp, #10]
    d016:	4b1c      	ldr	r3, [pc, #112]	; (d088 <attcProcRsp+0xb0>)
    d018:	2500      	movs	r5, #0
    d01a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    d01e:	f88d 5003 	strb.w	r5, [sp, #3]
    d022:	466b      	mov	r3, sp
    d024:	4632      	mov	r2, r6
    d026:	4639      	mov	r1, r7
    d028:	4620      	mov	r0, r4
    d02a:	47c0      	blx	r8
    d02c:	7ce3      	ldrb	r3, [r4, #19]
    d02e:	b113      	cbz	r3, d036 <attcProcRsp+0x5e>
    d030:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d034:	b123      	cbz	r3, d040 <attcProcRsp+0x68>
    d036:	74a5      	strb	r5, [r4, #18]
    d038:	f104 0010 	add.w	r0, r4, #16
    d03c:	f7ff fd7a 	bl	cb34 <attcFreePkt>
    d040:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d044:	2b01      	cmp	r3, #1
    d046:	d00a      	beq.n	d05e <attcProcRsp+0x86>
    d048:	7ce3      	ldrb	r3, [r4, #19]
    d04a:	f88d 300c 	strb.w	r3, [sp, #12]
    d04e:	8a23      	ldrh	r3, [r4, #16]
    d050:	f8ad 3000 	strh.w	r3, [sp]
    d054:	4b0d      	ldr	r3, [pc, #52]	; (d08c <attcProcRsp+0xb4>)
    d056:	4668      	mov	r0, sp
    d058:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d05c:	4798      	blx	r3
    d05e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d062:	b923      	cbnz	r3, d06e <attcProcRsp+0x96>
    d064:	6965      	ldr	r5, [r4, #20]
    d066:	b12d      	cbz	r5, d074 <attcProcRsp+0x9c>
    d068:	4620      	mov	r0, r4
    d06a:	f7ff fd13 	bl	ca94 <attcSendReq>
    d06e:	b004      	add	sp, #16
    d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d074:	79a3      	ldrb	r3, [r4, #6]
    d076:	2b00      	cmp	r3, #0
    d078:	d0f9      	beq.n	d06e <attcProcRsp+0x96>
    d07a:	1d21      	adds	r1, r4, #4
    d07c:	4620      	mov	r0, r4
    d07e:	f7ff fd11 	bl	caa4 <attcSetupReq>
    d082:	71a5      	strb	r5, [r4, #6]
    d084:	e7f3      	b.n	d06e <attcProcRsp+0x96>
    d086:	bf00      	nop
    d088:	0002505c 	.word	0x0002505c
    d08c:	100039d4 	.word	0x100039d4

0000d090 <attcProcInd>:
    d090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d092:	7a13      	ldrb	r3, [r2, #8]
    d094:	4604      	mov	r4, r0
    d096:	105b      	asrs	r3, r3, #1
    d098:	7a90      	ldrb	r0, [r2, #10]
    d09a:	f88d 3002 	strb.w	r3, [sp, #2]
    d09e:	320b      	adds	r2, #11
    d0a0:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    d0a4:	9201      	str	r2, [sp, #4]
    d0a6:	6822      	ldr	r2, [r4, #0]
    d0a8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    d0ac:	7f12      	ldrb	r2, [r2, #28]
    d0ae:	f8ad 2000 	strh.w	r2, [sp]
    d0b2:	b29b      	uxth	r3, r3
    d0b4:	2200      	movs	r2, #0
    d0b6:	3903      	subs	r1, #3
    d0b8:	f8ad 300a 	strh.w	r3, [sp, #10]
    d0bc:	f8ad 1008 	strh.w	r1, [sp, #8]
    d0c0:	f88d 2003 	strb.w	r2, [sp, #3]
    d0c4:	f88d 200c 	strb.w	r2, [sp, #12]
    d0c8:	b123      	cbz	r3, d0d4 <attcProcInd+0x44>
    d0ca:	4b0f      	ldr	r3, [pc, #60]	; (d108 <attcProcInd+0x78>)
    d0cc:	4668      	mov	r0, sp
    d0ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d0d2:	4798      	blx	r3
    d0d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d0d8:	2b0e      	cmp	r3, #14
    d0da:	d10f      	bne.n	d0fc <attcProcInd+0x6c>
    d0dc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d0e0:	b973      	cbnz	r3, d100 <attcProcInd+0x70>
    d0e2:	2009      	movs	r0, #9
    d0e4:	f7ff fa90 	bl	c608 <attMsgAlloc>
    d0e8:	4603      	mov	r3, r0
    d0ea:	b138      	cbz	r0, d0fc <attcProcInd+0x6c>
    d0ec:	221e      	movs	r2, #30
    d0ee:	7202      	strb	r2, [r0, #8]
    d0f0:	6821      	ldr	r1, [r4, #0]
    d0f2:	2201      	movs	r2, #1
    d0f4:	8b09      	ldrh	r1, [r1, #24]
    d0f6:	2004      	movs	r0, #4
    d0f8:	f003 fb62 	bl	107c0 <L2cDataReq>
    d0fc:	b004      	add	sp, #16
    d0fe:	bd10      	pop	{r4, pc}
    d100:	2301      	movs	r3, #1
    d102:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    d106:	e7f9      	b.n	d0fc <attcProcInd+0x6c>
    d108:	100039d4 	.word	0x100039d4

0000d10c <attcSendMsg>:
    d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d110:	4605      	mov	r5, r0
    d112:	460f      	mov	r7, r1
    d114:	4616      	mov	r6, r2
    d116:	461c      	mov	r4, r3
    d118:	f89d 8020 	ldrb.w	r8, [sp, #32]
    d11c:	f008 fba6 	bl	1586c <WsfTaskLock>
    d120:	4628      	mov	r0, r5
    d122:	f7ff fcd2 	bl	caca <attcCcbByConnId>
    d126:	b920      	cbnz	r0, d132 <attcSendMsg+0x26>
    d128:	f008 fba6 	bl	15878 <WsfTaskUnlock>
    d12c:	bb7c      	cbnz	r4, d18e <attcSendMsg+0x82>
    d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d132:	6803      	ldr	r3, [r0, #0]
    d134:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    d138:	f008 fb9e 	bl	15878 <WsfTaskUnlock>
    d13c:	f1b9 0f00 	cmp.w	r9, #0
    d140:	d0f4      	beq.n	d12c <attcSendMsg+0x20>
    d142:	b124      	cbz	r4, d14e <attcSendMsg+0x42>
    d144:	2e0b      	cmp	r6, #11
    d146:	d015      	beq.n	d174 <attcSendMsg+0x68>
    d148:	8823      	ldrh	r3, [r4, #0]
    d14a:	454b      	cmp	r3, r9
    d14c:	d819      	bhi.n	d182 <attcSendMsg+0x76>
    d14e:	200c      	movs	r0, #12
    d150:	f007 fa4f 	bl	145f2 <WsfMsgAlloc>
    d154:	4601      	mov	r1, r0
    d156:	2800      	cmp	r0, #0
    d158:	d0e8      	beq.n	d12c <attcSendMsg+0x20>
    d15a:	4b0f      	ldr	r3, [pc, #60]	; (d198 <attcSendMsg+0x8c>)
    d15c:	8005      	strh	r5, [r0, #0]
    d15e:	f880 8003 	strb.w	r8, [r0, #3]
    d162:	7086      	strb	r6, [r0, #2]
    d164:	6044      	str	r4, [r0, #4]
    d166:	8107      	strh	r7, [r0, #8]
    d168:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d16c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d170:	f007 ba63 	b.w	1463a <WsfMsgSend>
    d174:	f1b8 0f00 	cmp.w	r8, #0
    d178:	d1e9      	bne.n	d14e <attcSendMsg+0x42>
    d17a:	8823      	ldrh	r3, [r4, #0]
    d17c:	3305      	adds	r3, #5
    d17e:	b29b      	uxth	r3, r3
    d180:	e7e3      	b.n	d14a <attcSendMsg+0x3e>
    d182:	2377      	movs	r3, #119	; 0x77
    d184:	463a      	mov	r2, r7
    d186:	4631      	mov	r1, r6
    d188:	4628      	mov	r0, r5
    d18a:	f7ff fcec 	bl	cb66 <attcExecCallback>
    d18e:	4620      	mov	r0, r4
    d190:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d194:	f007 ba44 	b.w	14620 <WsfMsgFree>
    d198:	100039d4 	.word	0x100039d4

0000d19c <AttcFindInfoReq>:
    d19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d19e:	4605      	mov	r5, r0
    d1a0:	200d      	movs	r0, #13
    d1a2:	460c      	mov	r4, r1
    d1a4:	4617      	mov	r7, r2
    d1a6:	461e      	mov	r6, r3
    d1a8:	f7ff fa2e 	bl	c608 <attMsgAlloc>
    d1ac:	b160      	cbz	r0, d1c8 <AttcFindInfoReq+0x2c>
    d1ae:	2305      	movs	r3, #5
    d1b0:	8003      	strh	r3, [r0, #0]
    d1b2:	2304      	movs	r3, #4
    d1b4:	7203      	strb	r3, [r0, #8]
    d1b6:	8044      	strh	r4, [r0, #2]
    d1b8:	8087      	strh	r7, [r0, #4]
    d1ba:	4603      	mov	r3, r0
    d1bc:	9600      	str	r6, [sp, #0]
    d1be:	2202      	movs	r2, #2
    d1c0:	4621      	mov	r1, r4
    d1c2:	4628      	mov	r0, r5
    d1c4:	f7ff ffa2 	bl	d10c <attcSendMsg>
    d1c8:	b003      	add	sp, #12
    d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d1cc <AttcReadReq>:
    d1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d1ce:	4605      	mov	r5, r0
    d1d0:	200b      	movs	r0, #11
    d1d2:	460c      	mov	r4, r1
    d1d4:	f7ff fa18 	bl	c608 <attMsgAlloc>
    d1d8:	4603      	mov	r3, r0
    d1da:	b168      	cbz	r0, d1f8 <AttcReadReq+0x2c>
    d1dc:	2203      	movs	r2, #3
    d1de:	8002      	strh	r2, [r0, #0]
    d1e0:	220a      	movs	r2, #10
    d1e2:	7202      	strb	r2, [r0, #8]
    d1e4:	0a22      	lsrs	r2, r4, #8
    d1e6:	7282      	strb	r2, [r0, #10]
    d1e8:	2200      	movs	r2, #0
    d1ea:	7244      	strb	r4, [r0, #9]
    d1ec:	4621      	mov	r1, r4
    d1ee:	9200      	str	r2, [sp, #0]
    d1f0:	4628      	mov	r0, r5
    d1f2:	2205      	movs	r2, #5
    d1f4:	f7ff ff8a 	bl	d10c <attcSendMsg>
    d1f8:	b003      	add	sp, #12
    d1fa:	bd30      	pop	{r4, r5, pc}

0000d1fc <AttcWriteReq>:
    d1fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d200:	4607      	mov	r7, r0
    d202:	f102 000b 	add.w	r0, r2, #11
    d206:	b280      	uxth	r0, r0
    d208:	460d      	mov	r5, r1
    d20a:	4616      	mov	r6, r2
    d20c:	4698      	mov	r8, r3
    d20e:	f7ff f9fb 	bl	c608 <attMsgAlloc>
    d212:	4604      	mov	r4, r0
    d214:	b198      	cbz	r0, d23e <AttcWriteReq+0x42>
    d216:	1cf3      	adds	r3, r6, #3
    d218:	8003      	strh	r3, [r0, #0]
    d21a:	2312      	movs	r3, #18
    d21c:	7203      	strb	r3, [r0, #8]
    d21e:	0a2b      	lsrs	r3, r5, #8
    d220:	7283      	strb	r3, [r0, #10]
    d222:	7245      	strb	r5, [r0, #9]
    d224:	4632      	mov	r2, r6
    d226:	4641      	mov	r1, r8
    d228:	300b      	adds	r0, #11
    d22a:	f7fe ff99 	bl	c160 <memcpy>
    d22e:	2300      	movs	r3, #0
    d230:	9300      	str	r3, [sp, #0]
    d232:	2209      	movs	r2, #9
    d234:	4623      	mov	r3, r4
    d236:	4629      	mov	r1, r5
    d238:	4638      	mov	r0, r7
    d23a:	f7ff ff67 	bl	d10c <attcSendMsg>
    d23e:	b002      	add	sp, #8
    d240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d244 <AttcCancelReq>:
    d244:	b507      	push	{r0, r1, r2, lr}
    d246:	2300      	movs	r3, #0
    d248:	9300      	str	r3, [sp, #0]
    d24a:	220f      	movs	r2, #15
    d24c:	4619      	mov	r1, r3
    d24e:	f7ff ff5d 	bl	d10c <attcSendMsg>
    d252:	b003      	add	sp, #12
    d254:	f85d fb04 	ldr.w	pc, [sp], #4

0000d258 <AttcMtuReq>:
    d258:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d25a:	4605      	mov	r5, r0
    d25c:	200b      	movs	r0, #11
    d25e:	460c      	mov	r4, r1
    d260:	f7ff f9d2 	bl	c608 <attMsgAlloc>
    d264:	4603      	mov	r3, r0
    d266:	b160      	cbz	r0, d282 <AttcMtuReq+0x2a>
    d268:	2203      	movs	r2, #3
    d26a:	8002      	strh	r2, [r0, #0]
    d26c:	7244      	strb	r4, [r0, #9]
    d26e:	2202      	movs	r2, #2
    d270:	0a24      	lsrs	r4, r4, #8
    d272:	2100      	movs	r1, #0
    d274:	7202      	strb	r2, [r0, #8]
    d276:	7284      	strb	r4, [r0, #10]
    d278:	2201      	movs	r2, #1
    d27a:	9100      	str	r1, [sp, #0]
    d27c:	4628      	mov	r0, r5
    d27e:	f7ff ff45 	bl	d10c <attcSendMsg>
    d282:	b003      	add	sp, #12
    d284:	bd30      	pop	{r4, r5, pc}
    d286:	bf00      	nop

0000d288 <attcProcFindByTypeRsp>:
    d288:	b5f0      	push	{r4, r5, r6, r7, lr}
    d28a:	3108      	adds	r1, #8
    d28c:	8bc5      	ldrh	r5, [r0, #30]
    d28e:	f102 0609 	add.w	r6, r2, #9
    d292:	440a      	add	r2, r1
    d294:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d298:	4296      	cmp	r6, r2
    d29a:	d217      	bcs.n	d2cc <attcProcFindByTypeRsp+0x44>
    d29c:	7874      	ldrb	r4, [r6, #1]
    d29e:	7837      	ldrb	r7, [r6, #0]
    d2a0:	f896 c003 	ldrb.w	ip, [r6, #3]
    d2a4:	eb07 2704 	add.w	r7, r7, r4, lsl #8
    d2a8:	78b4      	ldrb	r4, [r6, #2]
    d2aa:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    d2ae:	b2bf      	uxth	r7, r7
    d2b0:	b2a4      	uxth	r4, r4
    d2b2:	42a7      	cmp	r7, r4
    d2b4:	f106 0604 	add.w	r6, r6, #4
    d2b8:	d806      	bhi.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2ba:	42bd      	cmp	r5, r7
    d2bc:	d804      	bhi.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2be:	f8b0 c020 	ldrh.w	ip, [r0, #32]
    d2c2:	45bc      	cmp	ip, r7
    d2c4:	d300      	bcc.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2c6:	b96d      	cbnz	r5, d2e4 <attcProcFindByTypeRsp+0x5c>
    d2c8:	2273      	movs	r2, #115	; 0x73
    d2ca:	70da      	strb	r2, [r3, #3]
    d2cc:	78db      	ldrb	r3, [r3, #3]
    d2ce:	b943      	cbnz	r3, d2e2 <attcProcFindByTypeRsp+0x5a>
    d2d0:	7cc3      	ldrb	r3, [r0, #19]
    d2d2:	2b01      	cmp	r3, #1
    d2d4:	d105      	bne.n	d2e2 <attcProcFindByTypeRsp+0x5a>
    d2d6:	b115      	cbz	r5, d2de <attcProcFindByTypeRsp+0x56>
    d2d8:	8c03      	ldrh	r3, [r0, #32]
    d2da:	42ab      	cmp	r3, r5
    d2dc:	d20a      	bcs.n	d2f4 <attcProcFindByTypeRsp+0x6c>
    d2de:	2300      	movs	r3, #0
    d2e0:	74c3      	strb	r3, [r0, #19]
    d2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2e4:	428c      	cmp	r4, r1
    d2e6:	bf1a      	itte	ne
    d2e8:	3401      	addne	r4, #1
    d2ea:	b2a5      	uxthne	r5, r4
    d2ec:	2500      	moveq	r5, #0
    d2ee:	42b2      	cmp	r2, r6
    d2f0:	d2d2      	bcs.n	d298 <attcProcFindByTypeRsp+0x10>
    d2f2:	e7e9      	b.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2f4:	83c5      	strh	r5, [r0, #30]
    d2f6:	8305      	strh	r5, [r0, #24]
    d2f8:	e7f3      	b.n	d2e2 <attcProcFindByTypeRsp+0x5a>

0000d2fa <attcProcReadLongRsp>:
    d2fa:	7cc2      	ldrb	r2, [r0, #19]
    d2fc:	2a01      	cmp	r2, #1
    d2fe:	d10a      	bne.n	d316 <attcProcReadLongRsp+0x1c>
    d300:	6802      	ldr	r2, [r0, #0]
    d302:	8b52      	ldrh	r2, [r2, #26]
    d304:	428a      	cmp	r2, r1
    d306:	d902      	bls.n	d30e <attcProcReadLongRsp+0x14>
    d308:	2300      	movs	r3, #0
    d30a:	74c3      	strb	r3, [r0, #19]
    d30c:	4770      	bx	lr
    d30e:	8bc2      	ldrh	r2, [r0, #30]
    d310:	891b      	ldrh	r3, [r3, #8]
    d312:	4413      	add	r3, r2
    d314:	83c3      	strh	r3, [r0, #30]
    d316:	4770      	bx	lr

0000d318 <AttcFindByTypeValueReq>:
    d318:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d31c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    d320:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    d324:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    d328:	4680      	mov	r8, r0
    d32a:	f106 000f 	add.w	r0, r6, #15
    d32e:	b280      	uxth	r0, r0
    d330:	460f      	mov	r7, r1
    d332:	4693      	mov	fp, r2
    d334:	461d      	mov	r5, r3
    d336:	f7ff f967 	bl	c608 <attMsgAlloc>
    d33a:	4604      	mov	r4, r0
    d33c:	b1c8      	cbz	r0, d372 <AttcFindByTypeValueReq+0x5a>
    d33e:	1df3      	adds	r3, r6, #7
    d340:	8003      	strh	r3, [r0, #0]
    d342:	7345      	strb	r5, [r0, #13]
    d344:	2306      	movs	r3, #6
    d346:	0a2d      	lsrs	r5, r5, #8
    d348:	8047      	strh	r7, [r0, #2]
    d34a:	f8a0 b004 	strh.w	fp, [r0, #4]
    d34e:	7203      	strb	r3, [r0, #8]
    d350:	7385      	strb	r5, [r0, #14]
    d352:	4632      	mov	r2, r6
    d354:	4651      	mov	r1, sl
    d356:	300f      	adds	r0, #15
    d358:	f7fe ff02 	bl	c160 <memcpy>
    d35c:	4623      	mov	r3, r4
    d35e:	2203      	movs	r2, #3
    d360:	4639      	mov	r1, r7
    d362:	4640      	mov	r0, r8
    d364:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d368:	b001      	add	sp, #4
    d36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d36e:	f7ff becd 	b.w	d10c <attcSendMsg>
    d372:	b001      	add	sp, #4
    d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d378 <AttcReadByTypeReq>:
    d378:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d37c:	b29d      	uxth	r5, r3
    d37e:	4680      	mov	r8, r0
    d380:	f105 000d 	add.w	r0, r5, #13
    d384:	460e      	mov	r6, r1
    d386:	4693      	mov	fp, r2
    d388:	461f      	mov	r7, r3
    d38a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d38e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d392:	f7ff f939 	bl	c608 <attMsgAlloc>
    d396:	4604      	mov	r4, r0
    d398:	b1b0      	cbz	r0, d3c8 <AttcReadByTypeReq+0x50>
    d39a:	2308      	movs	r3, #8
    d39c:	3505      	adds	r5, #5
    d39e:	8005      	strh	r5, [r0, #0]
    d3a0:	8046      	strh	r6, [r0, #2]
    d3a2:	f8a0 b004 	strh.w	fp, [r0, #4]
    d3a6:	7203      	strb	r3, [r0, #8]
    d3a8:	463a      	mov	r2, r7
    d3aa:	4651      	mov	r1, sl
    d3ac:	300d      	adds	r0, #13
    d3ae:	f7fe fed7 	bl	c160 <memcpy>
    d3b2:	4623      	mov	r3, r4
    d3b4:	2204      	movs	r2, #4
    d3b6:	4631      	mov	r1, r6
    d3b8:	4640      	mov	r0, r8
    d3ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d3be:	b001      	add	sp, #4
    d3c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3c4:	f7ff bea2 	b.w	d10c <attcSendMsg>
    d3c8:	b001      	add	sp, #4
    d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d3ce <AttcReadLongReq>:
    d3ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d3d0:	4605      	mov	r5, r0
    d3d2:	200d      	movs	r0, #13
    d3d4:	460c      	mov	r4, r1
    d3d6:	4617      	mov	r7, r2
    d3d8:	461e      	mov	r6, r3
    d3da:	f7ff f915 	bl	c608 <attMsgAlloc>
    d3de:	b170      	cbz	r0, d3fe <AttcReadLongReq+0x30>
    d3e0:	2305      	movs	r3, #5
    d3e2:	8003      	strh	r3, [r0, #0]
    d3e4:	230c      	movs	r3, #12
    d3e6:	7203      	strb	r3, [r0, #8]
    d3e8:	0a23      	lsrs	r3, r4, #8
    d3ea:	7283      	strb	r3, [r0, #10]
    d3ec:	8047      	strh	r7, [r0, #2]
    d3ee:	7244      	strb	r4, [r0, #9]
    d3f0:	4603      	mov	r3, r0
    d3f2:	9600      	str	r6, [sp, #0]
    d3f4:	2206      	movs	r2, #6
    d3f6:	4621      	mov	r1, r4
    d3f8:	4628      	mov	r0, r5
    d3fa:	f7ff fe87 	bl	d10c <attcSendMsg>
    d3fe:	b003      	add	sp, #12
    d400:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d402 <AttcReadMultipleReq>:
    d402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d404:	004e      	lsls	r6, r1, #1
    d406:	4607      	mov	r7, r0
    d408:	f106 0009 	add.w	r0, r6, #9
    d40c:	460d      	mov	r5, r1
    d40e:	4614      	mov	r4, r2
    d410:	f7ff f8fa 	bl	c608 <attMsgAlloc>
    d414:	4603      	mov	r3, r0
    d416:	b1a0      	cbz	r0, d442 <AttcReadMultipleReq+0x40>
    d418:	3601      	adds	r6, #1
    d41a:	4622      	mov	r2, r4
    d41c:	8006      	strh	r6, [r0, #0]
    d41e:	200e      	movs	r0, #14
    d420:	f832 1902 	ldrh.w	r1, [r2], #-2
    d424:	7218      	strb	r0, [r3, #8]
    d426:	f103 0009 	add.w	r0, r3, #9
    d42a:	3d01      	subs	r5, #1
    d42c:	b2ed      	uxtb	r5, r5
    d42e:	2dff      	cmp	r5, #255	; 0xff
    d430:	f100 0002 	add.w	r0, r0, #2
    d434:	d107      	bne.n	d446 <AttcReadMultipleReq+0x44>
    d436:	2200      	movs	r2, #0
    d438:	9200      	str	r2, [sp, #0]
    d43a:	4638      	mov	r0, r7
    d43c:	2207      	movs	r2, #7
    d43e:	f7ff fe65 	bl	d10c <attcSendMsg>
    d442:	b003      	add	sp, #12
    d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d446:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    d44a:	f800 4c02 	strb.w	r4, [r0, #-2]
    d44e:	8814      	ldrh	r4, [r2, #0]
    d450:	0a24      	lsrs	r4, r4, #8
    d452:	f800 4c01 	strb.w	r4, [r0, #-1]
    d456:	e7e8      	b.n	d42a <AttcReadMultipleReq+0x28>

0000d458 <AttcReadByGroupTypeReq>:
    d458:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d45c:	b29d      	uxth	r5, r3
    d45e:	4680      	mov	r8, r0
    d460:	f105 000d 	add.w	r0, r5, #13
    d464:	460e      	mov	r6, r1
    d466:	4693      	mov	fp, r2
    d468:	461f      	mov	r7, r3
    d46a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d46e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d472:	f7ff f8c9 	bl	c608 <attMsgAlloc>
    d476:	4604      	mov	r4, r0
    d478:	b1b0      	cbz	r0, d4a8 <AttcReadByGroupTypeReq+0x50>
    d47a:	2310      	movs	r3, #16
    d47c:	3505      	adds	r5, #5
    d47e:	8005      	strh	r5, [r0, #0]
    d480:	8046      	strh	r6, [r0, #2]
    d482:	f8a0 b004 	strh.w	fp, [r0, #4]
    d486:	7203      	strb	r3, [r0, #8]
    d488:	463a      	mov	r2, r7
    d48a:	4651      	mov	r1, sl
    d48c:	300d      	adds	r0, #13
    d48e:	f7fe fe67 	bl	c160 <memcpy>
    d492:	4623      	mov	r3, r4
    d494:	2208      	movs	r2, #8
    d496:	4631      	mov	r1, r6
    d498:	4640      	mov	r0, r8
    d49a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d49e:	b001      	add	sp, #4
    d4a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4a4:	f7ff be32 	b.w	d10c <attcSendMsg>
    d4a8:	b001      	add	sp, #4
    d4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d4ae <attcProcPrepWriteRsp>:
    d4ae:	7cc2      	ldrb	r2, [r0, #19]
    d4b0:	2a01      	cmp	r2, #1
    d4b2:	d102      	bne.n	d4ba <attcProcPrepWriteRsp+0xc>
    d4b4:	8b82      	ldrh	r2, [r0, #28]
    d4b6:	b902      	cbnz	r2, d4ba <attcProcPrepWriteRsp+0xc>
    d4b8:	74c2      	strb	r2, [r0, #19]
    d4ba:	2200      	movs	r2, #0
    d4bc:	811a      	strh	r2, [r3, #8]
    d4be:	4770      	bx	lr

0000d4c0 <AttcWriteCmd>:
    d4c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d4c4:	4607      	mov	r7, r0
    d4c6:	f102 000b 	add.w	r0, r2, #11
    d4ca:	b280      	uxth	r0, r0
    d4cc:	460d      	mov	r5, r1
    d4ce:	4616      	mov	r6, r2
    d4d0:	4698      	mov	r8, r3
    d4d2:	f7ff f899 	bl	c608 <attMsgAlloc>
    d4d6:	4604      	mov	r4, r0
    d4d8:	b198      	cbz	r0, d502 <AttcWriteCmd+0x42>
    d4da:	1cf3      	adds	r3, r6, #3
    d4dc:	8003      	strh	r3, [r0, #0]
    d4de:	2352      	movs	r3, #82	; 0x52
    d4e0:	7203      	strb	r3, [r0, #8]
    d4e2:	0a2b      	lsrs	r3, r5, #8
    d4e4:	7283      	strb	r3, [r0, #10]
    d4e6:	7245      	strb	r5, [r0, #9]
    d4e8:	4632      	mov	r2, r6
    d4ea:	4641      	mov	r1, r8
    d4ec:	300b      	adds	r0, #11
    d4ee:	f7fe fe37 	bl	c160 <memcpy>
    d4f2:	2300      	movs	r3, #0
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	220a      	movs	r2, #10
    d4f8:	4623      	mov	r3, r4
    d4fa:	4629      	mov	r1, r5
    d4fc:	4638      	mov	r0, r7
    d4fe:	f7ff fe05 	bl	d10c <attcSendMsg>
    d502:	b002      	add	sp, #8
    d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d508 <AttcPrepareWriteReq>:
    d508:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    d510:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d514:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    d518:	4607      	mov	r7, r0
    d51a:	460d      	mov	r5, r1
    d51c:	4693      	mov	fp, r2
    d51e:	4698      	mov	r8, r3
    d520:	b116      	cbz	r6, d528 <AttcPrepareWriteReq+0x20>
    d522:	f1ba 0f00 	cmp.w	sl, #0
    d526:	d11f      	bne.n	d568 <AttcPrepareWriteReq+0x60>
    d528:	f108 000d 	add.w	r0, r8, #13
    d52c:	b280      	uxth	r0, r0
    d52e:	f7ff f86b 	bl	c608 <attMsgAlloc>
    d532:	4604      	mov	r4, r0
    d534:	b310      	cbz	r0, d57c <AttcPrepareWriteReq+0x74>
    d536:	2316      	movs	r3, #22
    d538:	7203      	strb	r3, [r0, #8]
    d53a:	0a2b      	lsrs	r3, r5, #8
    d53c:	f8a0 8000 	strh.w	r8, [r0]
    d540:	f8a0 b002 	strh.w	fp, [r0, #2]
    d544:	7245      	strb	r5, [r0, #9]
    d546:	7283      	strb	r3, [r0, #10]
    d548:	b186      	cbz	r6, d56c <AttcPrepareWriteReq+0x64>
    d54a:	f1ba 0f00 	cmp.w	sl, #0
    d54e:	d00d      	beq.n	d56c <AttcPrepareWriteReq+0x64>
    d550:	f8c0 9004 	str.w	r9, [r0, #4]
    d554:	4623      	mov	r3, r4
    d556:	220b      	movs	r2, #11
    d558:	4629      	mov	r1, r5
    d55a:	4638      	mov	r0, r7
    d55c:	960a      	str	r6, [sp, #40]	; 0x28
    d55e:	b001      	add	sp, #4
    d560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d564:	f7ff bdd2 	b.w	d10c <attcSendMsg>
    d568:	200d      	movs	r0, #13
    d56a:	e7e0      	b.n	d52e <AttcPrepareWriteReq+0x26>
    d56c:	f104 000d 	add.w	r0, r4, #13
    d570:	4642      	mov	r2, r8
    d572:	4649      	mov	r1, r9
    d574:	f7fe fdf4 	bl	c160 <memcpy>
    d578:	6060      	str	r0, [r4, #4]
    d57a:	e7eb      	b.n	d554 <AttcPrepareWriteReq+0x4c>
    d57c:	b001      	add	sp, #4
    d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d582 <AttcExecuteWriteReq>:
    d582:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d584:	4604      	mov	r4, r0
    d586:	200a      	movs	r0, #10
    d588:	460d      	mov	r5, r1
    d58a:	f7ff f83d 	bl	c608 <attMsgAlloc>
    d58e:	4603      	mov	r3, r0
    d590:	b150      	cbz	r0, d5a8 <AttcExecuteWriteReq+0x26>
    d592:	2202      	movs	r2, #2
    d594:	8002      	strh	r2, [r0, #0]
    d596:	2100      	movs	r1, #0
    d598:	2218      	movs	r2, #24
    d59a:	7202      	strb	r2, [r0, #8]
    d59c:	7245      	strb	r5, [r0, #9]
    d59e:	220c      	movs	r2, #12
    d5a0:	9100      	str	r1, [sp, #0]
    d5a2:	4620      	mov	r0, r4
    d5a4:	f7ff fdb2 	bl	d10c <attcSendMsg>
    d5a8:	b003      	add	sp, #12
    d5aa:	bd30      	pop	{r4, r5, pc}

0000d5ac <attsIndCcbByConnId>:
    d5ac:	b510      	push	{r4, lr}
    d5ae:	4604      	mov	r4, r0
    d5b0:	f002 f964 	bl	f87c <DmConnInUse>
    d5b4:	b120      	cbz	r0, d5c0 <attsIndCcbByConnId+0x14>
    d5b6:	4b03      	ldr	r3, [pc, #12]	; (d5c4 <attsIndCcbByConnId+0x18>)
    d5b8:	3c01      	subs	r4, #1
    d5ba:	202c      	movs	r0, #44	; 0x2c
    d5bc:	fb00 3004 	mla	r0, r0, r4, r3
    d5c0:	bd10      	pop	{r4, pc}
    d5c2:	bf00      	nop
    d5c4:	10003cac 	.word	0x10003cac

0000d5c8 <attsExecCallback>:
    d5c8:	b507      	push	{r0, r1, r2, lr}
    d5ca:	2300      	movs	r3, #0
    d5cc:	9300      	str	r3, [sp, #0]
    d5ce:	4613      	mov	r3, r2
    d5d0:	460a      	mov	r2, r1
    d5d2:	210f      	movs	r1, #15
    d5d4:	f7fe ffea 	bl	c5ac <attExecCallback>
    d5d8:	b003      	add	sp, #12
    d5da:	f85d fb04 	ldr.w	pc, [sp], #4

0000d5de <attsIndNtfCallback>:
    d5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5e2:	460c      	mov	r4, r1
    d5e4:	8ac9      	ldrh	r1, [r1, #22]
    d5e6:	4606      	mov	r6, r0
    d5e8:	4617      	mov	r7, r2
    d5ea:	b119      	cbz	r1, d5f4 <attsIndNtfCallback+0x16>
    d5ec:	f7ff ffec 	bl	d5c8 <attsExecCallback>
    d5f0:	2300      	movs	r3, #0
    d5f2:	82e3      	strh	r3, [r4, #22]
    d5f4:	f104 0518 	add.w	r5, r4, #24
    d5f8:	f04f 0800 	mov.w	r8, #0
    d5fc:	342c      	adds	r4, #44	; 0x2c
    d5fe:	f835 1b02 	ldrh.w	r1, [r5], #2
    d602:	b129      	cbz	r1, d610 <attsIndNtfCallback+0x32>
    d604:	463a      	mov	r2, r7
    d606:	4630      	mov	r0, r6
    d608:	f7ff ffde 	bl	d5c8 <attsExecCallback>
    d60c:	f825 8c02 	strh.w	r8, [r5, #-2]
    d610:	42ac      	cmp	r4, r5
    d612:	d1f4      	bne.n	d5fe <attsIndNtfCallback+0x20>
    d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d618 <attsIndCtrlCback>:
    d618:	b510      	push	{r4, lr}
    d61a:	4604      	mov	r4, r0
    d61c:	7800      	ldrb	r0, [r0, #0]
    d61e:	f7ff ffc5 	bl	d5ac <attsIndCcbByConnId>
    d622:	4601      	mov	r1, r0
    d624:	b120      	cbz	r0, d630 <attsIndCtrlCback+0x18>
    d626:	7820      	ldrb	r0, [r4, #0]
    d628:	2200      	movs	r2, #0
    d62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d62e:	e7d6      	b.n	d5de <attsIndNtfCallback>
    d630:	bd10      	pop	{r4, pc}

0000d632 <attsIndMsgCback>:
    d632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d634:	4605      	mov	r5, r0
    d636:	7800      	ldrb	r0, [r0, #0]
    d638:	f7ff ffb8 	bl	d5ac <attsIndCcbByConnId>
    d63c:	78ab      	ldrb	r3, [r5, #2]
    d63e:	4604      	mov	r4, r0
    d640:	b930      	cbnz	r0, d650 <attsIndMsgCback+0x1e>
    d642:	2b21      	cmp	r3, #33	; 0x21
    d644:	d13d      	bne.n	d6c2 <attsIndMsgCback+0x90>
    d646:	6868      	ldr	r0, [r5, #4]
    d648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d64c:	f006 bfe8 	b.w	14620 <WsfMsgFree>
    d650:	2b21      	cmp	r3, #33	; 0x21
    d652:	d13b      	bne.n	d6cc <attsIndMsgCback+0x9a>
    d654:	686b      	ldr	r3, [r5, #4]
    d656:	7a1a      	ldrb	r2, [r3, #8]
    d658:	885e      	ldrh	r6, [r3, #2]
    d65a:	2a1d      	cmp	r2, #29
    d65c:	d113      	bne.n	d686 <attsIndMsgCback+0x54>
    d65e:	8ac2      	ldrh	r2, [r0, #22]
    d660:	bb12      	cbnz	r2, d6a8 <attsIndMsgCback+0x76>
    d662:	6901      	ldr	r1, [r0, #16]
    d664:	881a      	ldrh	r2, [r3, #0]
    d666:	8b09      	ldrh	r1, [r1, #24]
    d668:	2004      	movs	r0, #4
    d66a:	f003 f8a9 	bl	107c0 <L2cDataReq>
    d66e:	2322      	movs	r3, #34	; 0x22
    d670:	7323      	strb	r3, [r4, #12]
    d672:	4b27      	ldr	r3, [pc, #156]	; (d710 <attsIndMsgCback+0xde>)
    d674:	82e6      	strh	r6, [r4, #22]
    d676:	681b      	ldr	r3, [r3, #0]
    d678:	82a6      	strh	r6, [r4, #20]
    d67a:	7999      	ldrb	r1, [r3, #6]
    d67c:	4620      	mov	r0, r4
    d67e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d682:	f007 b96f 	b.w	14964 <WsfTimerStartSec>
    d686:	f100 0118 	add.w	r1, r0, #24
    d68a:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
    d68e:	2200      	movs	r2, #0
    d690:	460f      	mov	r7, r1
    d692:	f831 0b02 	ldrh.w	r0, [r1], #2
    d696:	b118      	cbz	r0, d6a0 <attsIndMsgCback+0x6e>
    d698:	4286      	cmp	r6, r0
    d69a:	d005      	beq.n	d6a8 <attsIndMsgCback+0x76>
    d69c:	3201      	adds	r2, #1
    d69e:	b2d2      	uxtb	r2, r2
    d6a0:	458c      	cmp	ip, r1
    d6a2:	d1f6      	bne.n	d692 <attsIndMsgCback+0x60>
    d6a4:	2a09      	cmp	r2, #9
    d6a6:	d922      	bls.n	d6ee <attsIndMsgCback+0xbc>
    d6a8:	2272      	movs	r2, #114	; 0x72
    d6aa:	4631      	mov	r1, r6
    d6ac:	7828      	ldrb	r0, [r5, #0]
    d6ae:	f7ff ff8b 	bl	d5c8 <attsExecCallback>
    d6b2:	e7c8      	b.n	d646 <attsIndMsgCback+0x14>
    d6b4:	2300      	movs	r3, #0
    d6b6:	f837 2b02 	ldrh.w	r2, [r7], #2
    d6ba:	b91a      	cbnz	r2, d6c4 <attsIndMsgCback+0x92>
    d6bc:	330c      	adds	r3, #12
    d6be:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
    d6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6c4:	3301      	adds	r3, #1
    d6c6:	2b0a      	cmp	r3, #10
    d6c8:	d1f5      	bne.n	d6b6 <attsIndMsgCback+0x84>
    d6ca:	e7fa      	b.n	d6c2 <attsIndMsgCback+0x90>
    d6cc:	2b22      	cmp	r3, #34	; 0x22
    d6ce:	d1f8      	bne.n	d6c2 <attsIndMsgCback+0x90>
    d6d0:	8a83      	ldrh	r3, [r0, #20]
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	d0f5      	beq.n	d6c2 <attsIndMsgCback+0x90>
    d6d6:	2600      	movs	r6, #0
    d6d8:	8286      	strh	r6, [r0, #20]
    d6da:	2271      	movs	r2, #113	; 0x71
    d6dc:	8ac1      	ldrh	r1, [r0, #22]
    d6de:	7828      	ldrb	r0, [r5, #0]
    d6e0:	f7ff ff72 	bl	d5c8 <attsExecCallback>
    d6e4:	6923      	ldr	r3, [r4, #16]
    d6e6:	82e6      	strh	r6, [r4, #22]
    d6e8:	2201      	movs	r2, #1
    d6ea:	77da      	strb	r2, [r3, #31]
    d6ec:	e7e9      	b.n	d6c2 <attsIndMsgCback+0x90>
    d6ee:	6921      	ldr	r1, [r4, #16]
    d6f0:	881a      	ldrh	r2, [r3, #0]
    d6f2:	8b09      	ldrh	r1, [r1, #24]
    d6f4:	882d      	ldrh	r5, [r5, #0]
    d6f6:	2004      	movs	r0, #4
    d6f8:	f003 f862 	bl	107c0 <L2cDataReq>
    d6fc:	6923      	ldr	r3, [r4, #16]
    d6fe:	7f9a      	ldrb	r2, [r3, #30]
    d700:	2a00      	cmp	r2, #0
    d702:	d1d7      	bne.n	d6b4 <attsIndMsgCback+0x82>
    d704:	4631      	mov	r1, r6
    d706:	b2e8      	uxtb	r0, r5
    d708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d70c:	e75c      	b.n	d5c8 <attsExecCallback>
    d70e:	bf00      	nop
    d710:	10002bd0 	.word	0x10002bd0

0000d714 <attsHandleValueIndNtf>:
    d714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d718:	4606      	mov	r6, r0
    d71a:	460c      	mov	r4, r1
    d71c:	4617      	mov	r7, r2
    d71e:	4698      	mov	r8, r3
    d720:	f89d a020 	ldrb.w	sl, [sp, #32]
    d724:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d728:	f008 f8a0 	bl	1586c <WsfTaskLock>
    d72c:	4630      	mov	r0, r6
    d72e:	f7ff ff3d 	bl	d5ac <attsIndCcbByConnId>
    d732:	b950      	cbnz	r0, d74a <attsHandleValueIndNtf+0x36>
    d734:	f008 f8a0 	bl	15878 <WsfTaskUnlock>
    d738:	f1b9 0f00 	cmp.w	r9, #0
    d73c:	d048      	beq.n	d7d0 <attsHandleValueIndNtf+0xbc>
    d73e:	4651      	mov	r1, sl
    d740:	4640      	mov	r0, r8
    d742:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d746:	f7fe bfc7 	b.w	c6d8 <AttMsgFree>
    d74a:	6903      	ldr	r3, [r0, #16]
    d74c:	8b5d      	ldrh	r5, [r3, #26]
    d74e:	f008 f893 	bl	15878 <WsfTaskUnlock>
    d752:	2d00      	cmp	r5, #0
    d754:	d0f0      	beq.n	d738 <attsHandleValueIndNtf+0x24>
    d756:	1cbb      	adds	r3, r7, #2
    d758:	42ab      	cmp	r3, r5
    d75a:	da37      	bge.n	d7cc <attsHandleValueIndNtf+0xb8>
    d75c:	2008      	movs	r0, #8
    d75e:	f006 ff48 	bl	145f2 <WsfMsgAlloc>
    d762:	4605      	mov	r5, r0
    d764:	b360      	cbz	r0, d7c0 <attsHandleValueIndNtf+0xac>
    d766:	2321      	movs	r3, #33	; 0x21
    d768:	8006      	strh	r6, [r0, #0]
    d76a:	7083      	strb	r3, [r0, #2]
    d76c:	f1b9 0f00 	cmp.w	r9, #0
    d770:	d01c      	beq.n	d7ac <attsHandleValueIndNtf+0x98>
    d772:	f1a8 030b 	sub.w	r3, r8, #11
    d776:	6043      	str	r3, [r0, #4]
    d778:	6868      	ldr	r0, [r5, #4]
    d77a:	b1f0      	cbz	r0, d7ba <attsHandleValueIndNtf+0xa6>
    d77c:	1cfb      	adds	r3, r7, #3
    d77e:	8044      	strh	r4, [r0, #2]
    d780:	7244      	strb	r4, [r0, #9]
    d782:	0a24      	lsrs	r4, r4, #8
    d784:	8003      	strh	r3, [r0, #0]
    d786:	f880 a008 	strb.w	sl, [r0, #8]
    d78a:	7284      	strb	r4, [r0, #10]
    d78c:	f1b9 0f00 	cmp.w	r9, #0
    d790:	d104      	bne.n	d79c <attsHandleValueIndNtf+0x88>
    d792:	463a      	mov	r2, r7
    d794:	4641      	mov	r1, r8
    d796:	300b      	adds	r0, #11
    d798:	f7fe fce2 	bl	c160 <memcpy>
    d79c:	4b0d      	ldr	r3, [pc, #52]	; (d7d4 <attsHandleValueIndNtf+0xc0>)
    d79e:	4629      	mov	r1, r5
    d7a0:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d7a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7a8:	f006 bf47 	b.w	1463a <WsfMsgSend>
    d7ac:	f107 000b 	add.w	r0, r7, #11
    d7b0:	b280      	uxth	r0, r0
    d7b2:	f7fe ff29 	bl	c608 <attMsgAlloc>
    d7b6:	6068      	str	r0, [r5, #4]
    d7b8:	e7de      	b.n	d778 <attsHandleValueIndNtf+0x64>
    d7ba:	4628      	mov	r0, r5
    d7bc:	f006 ff30 	bl	14620 <WsfMsgFree>
    d7c0:	2270      	movs	r2, #112	; 0x70
    d7c2:	4621      	mov	r1, r4
    d7c4:	4630      	mov	r0, r6
    d7c6:	f7ff feff 	bl	d5c8 <attsExecCallback>
    d7ca:	e7b5      	b.n	d738 <attsHandleValueIndNtf+0x24>
    d7cc:	2277      	movs	r2, #119	; 0x77
    d7ce:	e7f8      	b.n	d7c2 <attsHandleValueIndNtf+0xae>
    d7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d7d4:	100039d4 	.word	0x100039d4

0000d7d8 <attsIndConnCback>:
    d7d8:	788b      	ldrb	r3, [r1, #2]
    d7da:	2b28      	cmp	r3, #40	; 0x28
    d7dc:	b570      	push	{r4, r5, r6, lr}
    d7de:	4606      	mov	r6, r0
    d7e0:	d117      	bne.n	d812 <attsIndConnCback+0x3a>
    d7e2:	78cc      	ldrb	r4, [r1, #3]
    d7e4:	b904      	cbnz	r4, d7e8 <attsIndConnCback+0x10>
    d7e6:	7a0c      	ldrb	r4, [r1, #8]
    d7e8:	7f35      	ldrb	r5, [r6, #28]
    d7ea:	490a      	ldr	r1, [pc, #40]	; (d814 <attsIndConnCback+0x3c>)
    d7ec:	232c      	movs	r3, #44	; 0x2c
    d7ee:	3d01      	subs	r5, #1
    d7f0:	fb03 1505 	mla	r5, r3, r5, r1
    d7f4:	3420      	adds	r4, #32
    d7f6:	8aab      	ldrh	r3, [r5, #20]
    d7f8:	b2e4      	uxtb	r4, r4
    d7fa:	b123      	cbz	r3, d806 <attsIndConnCback+0x2e>
    d7fc:	4628      	mov	r0, r5
    d7fe:	f007 f8d7 	bl	149b0 <WsfTimerStop>
    d802:	2300      	movs	r3, #0
    d804:	82ab      	strh	r3, [r5, #20]
    d806:	4622      	mov	r2, r4
    d808:	4629      	mov	r1, r5
    d80a:	7f30      	ldrb	r0, [r6, #28]
    d80c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d810:	e6e5      	b.n	d5de <attsIndNtfCallback>
    d812:	bd70      	pop	{r4, r5, r6, pc}
    d814:	10003cac 	.word	0x10003cac

0000d818 <attsProcValueCnf>:
    d818:	b570      	push	{r4, r5, r6, lr}
    d81a:	4606      	mov	r6, r0
    d81c:	7f00      	ldrb	r0, [r0, #28]
    d81e:	f7ff fec5 	bl	d5ac <attsIndCcbByConnId>
    d822:	4604      	mov	r4, r0
    d824:	b168      	cbz	r0, d842 <attsProcValueCnf+0x2a>
    d826:	8a83      	ldrh	r3, [r0, #20]
    d828:	b15b      	cbz	r3, d842 <attsProcValueCnf+0x2a>
    d82a:	2300      	movs	r3, #0
    d82c:	8283      	strh	r3, [r0, #20]
    d82e:	f007 f8bf 	bl	149b0 <WsfTimerStop>
    d832:	7fb5      	ldrb	r5, [r6, #30]
    d834:	b92d      	cbnz	r5, d842 <attsProcValueCnf+0x2a>
    d836:	462a      	mov	r2, r5
    d838:	8ae1      	ldrh	r1, [r4, #22]
    d83a:	7f30      	ldrb	r0, [r6, #28]
    d83c:	f7ff fec4 	bl	d5c8 <attsExecCallback>
    d840:	82e5      	strh	r5, [r4, #22]
    d842:	bd70      	pop	{r4, r5, r6, pc}

0000d844 <AttsIndInit>:
    d844:	b510      	push	{r4, lr}
    d846:	4909      	ldr	r1, [pc, #36]	; (d86c <AttsIndInit+0x28>)
    d848:	4a09      	ldr	r2, [pc, #36]	; (d870 <AttsIndInit+0x2c>)
    d84a:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    d84e:	2300      	movs	r3, #0
    d850:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    d854:	3301      	adds	r3, #1
    d856:	2b08      	cmp	r3, #8
    d858:	6114      	str	r4, [r2, #16]
    d85a:	7210      	strb	r0, [r2, #8]
    d85c:	8153      	strh	r3, [r2, #10]
    d85e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    d862:	d1f5      	bne.n	d850 <AttsIndInit+0xc>
    d864:	4b03      	ldr	r3, [pc, #12]	; (d874 <AttsIndInit+0x30>)
    d866:	4a04      	ldr	r2, [pc, #16]	; (d878 <AttsIndInit+0x34>)
    d868:	609a      	str	r2, [r3, #8]
    d86a:	bd10      	pop	{r4, pc}
    d86c:	100039d4 	.word	0x100039d4
    d870:	10003cac 	.word	0x10003cac
    d874:	10003e0c 	.word	0x10003e0c
    d878:	00025090 	.word	0x00025090

0000d87c <AttsHandleValueInd>:
    d87c:	b513      	push	{r0, r1, r4, lr}
    d87e:	f04f 0c00 	mov.w	ip, #0
    d882:	241d      	movs	r4, #29
    d884:	e9cd 4c00 	strd	r4, ip, [sp]
    d888:	f7ff ff44 	bl	d714 <attsHandleValueIndNtf>
    d88c:	b002      	add	sp, #8
    d88e:	bd10      	pop	{r4, pc}

0000d890 <AttsHandleValueNtf>:
    d890:	b513      	push	{r0, r1, r4, lr}
    d892:	f04f 0c00 	mov.w	ip, #0
    d896:	241b      	movs	r4, #27
    d898:	e9cd 4c00 	strd	r4, ip, [sp]
    d89c:	f7ff ff3a 	bl	d714 <attsHandleValueIndNtf>
    d8a0:	b002      	add	sp, #8
    d8a2:	bd10      	pop	{r4, pc}

0000d8a4 <AttsHandleValueIndZeroCpy>:
    d8a4:	b513      	push	{r0, r1, r4, lr}
    d8a6:	f04f 0c01 	mov.w	ip, #1
    d8aa:	241d      	movs	r4, #29
    d8ac:	e9cd 4c00 	strd	r4, ip, [sp]
    d8b0:	f7ff ff30 	bl	d714 <attsHandleValueIndNtf>
    d8b4:	b002      	add	sp, #8
    d8b6:	bd10      	pop	{r4, pc}

0000d8b8 <AttsHandleValueNtfZeroCpy>:
    d8b8:	b513      	push	{r0, r1, r4, lr}
    d8ba:	f04f 0c01 	mov.w	ip, #1
    d8be:	241b      	movs	r4, #27
    d8c0:	e9cd 4c00 	strd	r4, ip, [sp]
    d8c4:	f7ff ff26 	bl	d714 <attsHandleValueIndNtf>
    d8c8:	b002      	add	sp, #8
    d8ca:	bd10      	pop	{r4, pc}

0000d8cc <attsL2cCtrlCback>:
    d8cc:	4b01      	ldr	r3, [pc, #4]	; (d8d4 <attsL2cCtrlCback+0x8>)
    d8ce:	689b      	ldr	r3, [r3, #8]
    d8d0:	685b      	ldr	r3, [r3, #4]
    d8d2:	4718      	bx	r3
    d8d4:	10003e0c 	.word	0x10003e0c

0000d8d8 <attsMsgCback>:
    d8d8:	b410      	push	{r4}
    d8da:	7883      	ldrb	r3, [r0, #2]
    d8dc:	2b20      	cmp	r3, #32
    d8de:	d106      	bne.n	d8ee <attsMsgCback+0x16>
    d8e0:	2200      	movs	r2, #0
    d8e2:	2104      	movs	r1, #4
    d8e4:	7800      	ldrb	r0, [r0, #0]
    d8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    d8ea:	f002 b815 	b.w	f918 <DmConnSetIdle>
    d8ee:	2b22      	cmp	r3, #34	; 0x22
    d8f0:	4b03      	ldr	r3, [pc, #12]	; (d900 <attsMsgCback+0x28>)
    d8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    d8f6:	bf96      	itet	ls
    d8f8:	689b      	ldrls	r3, [r3, #8]
    d8fa:	68db      	ldrhi	r3, [r3, #12]
    d8fc:	689b      	ldrls	r3, [r3, #8]
    d8fe:	4718      	bx	r3
    d900:	10003e0c 	.word	0x10003e0c

0000d904 <attsErrRsp>:
    d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d908:	4605      	mov	r5, r0
    d90a:	200d      	movs	r0, #13
    d90c:	460f      	mov	r7, r1
    d90e:	4614      	mov	r4, r2
    d910:	461e      	mov	r6, r3
    d912:	f7fe fe79 	bl	c608 <attMsgAlloc>
    d916:	b170      	cbz	r0, d936 <attsErrRsp+0x32>
    d918:	7284      	strb	r4, [r0, #10]
    d91a:	2301      	movs	r3, #1
    d91c:	0a24      	lsrs	r4, r4, #8
    d91e:	7203      	strb	r3, [r0, #8]
    d920:	7247      	strb	r7, [r0, #9]
    d922:	72c4      	strb	r4, [r0, #11]
    d924:	7306      	strb	r6, [r0, #12]
    d926:	4603      	mov	r3, r0
    d928:	4629      	mov	r1, r5
    d92a:	2205      	movs	r2, #5
    d92c:	2004      	movs	r0, #4
    d92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d932:	f002 bf45 	b.w	107c0 <L2cDataReq>
    d936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d93a <attsDataCback>:
    d93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d93e:	4680      	mov	r8, r0
    d940:	460e      	mov	r6, r1
    d942:	4617      	mov	r7, r2
    d944:	f7fe fe0e 	bl	c564 <attCcbByHandle>
    d948:	b368      	cbz	r0, d9a6 <attsDataCback+0x6c>
    d94a:	7a39      	ldrb	r1, [r7, #8]
    d94c:	2912      	cmp	r1, #18
    d94e:	d903      	bls.n	d958 <attsDataCback+0x1e>
    d950:	f1a1 0316 	sub.w	r3, r1, #22
    d954:	2b08      	cmp	r3, #8
    d956:	d80e      	bhi.n	d976 <attsDataCback+0x3c>
    d958:	084b      	lsrs	r3, r1, #1
    d95a:	4a14      	ldr	r2, [pc, #80]	; (d9ac <attsDataCback+0x72>)
    d95c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    d960:	b195      	cbz	r5, d988 <attsDataCback+0x4e>
    d962:	4a13      	ldr	r2, [pc, #76]	; (d9b0 <attsDataCback+0x76>)
    d964:	5cd3      	ldrb	r3, [r2, r3]
    d966:	42b3      	cmp	r3, r6
    d968:	d81b      	bhi.n	d9a2 <attsDataCback+0x68>
    d96a:	463a      	mov	r2, r7
    d96c:	4631      	mov	r1, r6
    d96e:	462b      	mov	r3, r5
    d970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d974:	4718      	bx	r3
    d976:	2952      	cmp	r1, #82	; 0x52
    d978:	d004      	beq.n	d984 <attsDataCback+0x4a>
    d97a:	29d2      	cmp	r1, #210	; 0xd2
    d97c:	bf0c      	ite	eq
    d97e:	2310      	moveq	r3, #16
    d980:	2300      	movne	r3, #0
    d982:	e7ea      	b.n	d95a <attsDataCback+0x20>
    d984:	230a      	movs	r3, #10
    d986:	e7e8      	b.n	d95a <attsDataCback+0x20>
    d988:	2306      	movs	r3, #6
    d98a:	2902      	cmp	r1, #2
    d98c:	d00b      	beq.n	d9a6 <attsDataCback+0x6c>
    d98e:	291e      	cmp	r1, #30
    d990:	d009      	beq.n	d9a6 <attsDataCback+0x6c>
    d992:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    d996:	d106      	bne.n	d9a6 <attsDataCback+0x6c>
    d998:	4640      	mov	r0, r8
    d99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d99e:	f7ff bfb1 	b.w	d904 <attsErrRsp>
    d9a2:	2304      	movs	r3, #4
    d9a4:	e7f1      	b.n	d98a <attsDataCback+0x50>
    d9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9aa:	bf00      	nop
    d9ac:	10002b10 	.word	0x10002b10
    d9b0:	000250a0 	.word	0x000250a0

0000d9b4 <attsClearPrepWrites>:
    d9b4:	b510      	push	{r4, lr}
    d9b6:	4604      	mov	r4, r0
    d9b8:	4620      	mov	r0, r4
    d9ba:	f006 fea5 	bl	14708 <WsfQueueDeq>
    d9be:	b900      	cbnz	r0, d9c2 <attsClearPrepWrites+0xe>
    d9c0:	bd10      	pop	{r4, pc}
    d9c2:	f006 fdc7 	bl	14554 <WsfBufFree>
    d9c6:	e7f7      	b.n	d9b8 <attsClearPrepWrites+0x4>

0000d9c8 <attsConnCback>:
    d9c8:	788b      	ldrb	r3, [r1, #2]
    d9ca:	2b28      	cmp	r3, #40	; 0x28
    d9cc:	b570      	push	{r4, r5, r6, lr}
    d9ce:	4604      	mov	r4, r0
    d9d0:	460d      	mov	r5, r1
    d9d2:	d10a      	bne.n	d9ea <attsConnCback+0x22>
    d9d4:	f7ff ffee 	bl	d9b4 <attsClearPrepWrites>
    d9d8:	7f20      	ldrb	r0, [r4, #28]
    d9da:	f001 ffb7 	bl	f94c <DmConnCheckIdle>
    d9de:	0743      	lsls	r3, r0, #29
    d9e0:	d503      	bpl.n	d9ea <attsConnCback+0x22>
    d9e2:	f104 0008 	add.w	r0, r4, #8
    d9e6:	f006 ffe3 	bl	149b0 <WsfTimerStop>
    d9ea:	4b04      	ldr	r3, [pc, #16]	; (d9fc <attsConnCback+0x34>)
    d9ec:	689b      	ldr	r3, [r3, #8]
    d9ee:	4629      	mov	r1, r5
    d9f0:	4620      	mov	r0, r4
    d9f2:	68db      	ldr	r3, [r3, #12]
    d9f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d9f8:	4718      	bx	r3
    d9fa:	bf00      	nop
    d9fc:	10003e0c 	.word	0x10003e0c

0000da00 <attsDiscBusy>:
    da00:	b538      	push	{r3, r4, r5, lr}
    da02:	4d0d      	ldr	r5, [pc, #52]	; (da38 <attsDiscBusy+0x38>)
    da04:	682b      	ldr	r3, [r5, #0]
    da06:	681b      	ldr	r3, [r3, #0]
    da08:	4604      	mov	r4, r0
    da0a:	b1a3      	cbz	r3, da36 <attsDiscBusy+0x36>
    da0c:	2104      	movs	r1, #4
    da0e:	7f00      	ldrb	r0, [r0, #28]
    da10:	2201      	movs	r2, #1
    da12:	f001 ff81 	bl	f918 <DmConnSetIdle>
    da16:	4b09      	ldr	r3, [pc, #36]	; (da3c <attsDiscBusy+0x3c>)
    da18:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    da1c:	7423      	strb	r3, [r4, #16]
    da1e:	2320      	movs	r3, #32
    da20:	7523      	strb	r3, [r4, #20]
    da22:	7f23      	ldrb	r3, [r4, #28]
    da24:	8263      	strh	r3, [r4, #18]
    da26:	682b      	ldr	r3, [r5, #0]
    da28:	f104 0008 	add.w	r0, r4, #8
    da2c:	6819      	ldr	r1, [r3, #0]
    da2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da32:	f006 bf97 	b.w	14964 <WsfTimerStartSec>
    da36:	bd38      	pop	{r3, r4, r5, pc}
    da38:	10002bd0 	.word	0x10002bd0
    da3c:	100039d4 	.word	0x100039d4

0000da40 <AttsInit>:
    da40:	4b06      	ldr	r3, [pc, #24]	; (da5c <AttsInit+0x1c>)
    da42:	2200      	movs	r2, #0
    da44:	e9c3 2200 	strd	r2, r2, [r3]
    da48:	4a05      	ldr	r2, [pc, #20]	; (da60 <AttsInit+0x20>)
    da4a:	609a      	str	r2, [r3, #8]
    da4c:	4a05      	ldr	r2, [pc, #20]	; (da64 <AttsInit+0x24>)
    da4e:	60da      	str	r2, [r3, #12]
    da50:	4b05      	ldr	r3, [pc, #20]	; (da68 <AttsInit+0x28>)
    da52:	4a06      	ldr	r2, [pc, #24]	; (da6c <AttsInit+0x2c>)
    da54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    da58:	4770      	bx	lr
    da5a:	bf00      	nop
    da5c:	10003e0c 	.word	0x10003e0c
    da60:	00024ef8 	.word	0x00024ef8
    da64:	0000c501 	.word	0x0000c501
    da68:	100039d4 	.word	0x100039d4
    da6c:	000250b4 	.word	0x000250b4

0000da70 <AttsAuthorRegister>:
    da70:	4b01      	ldr	r3, [pc, #4]	; (da78 <AttsAuthorRegister+0x8>)
    da72:	6118      	str	r0, [r3, #16]
    da74:	4770      	bx	lr
    da76:	bf00      	nop
    da78:	10003e0c 	.word	0x10003e0c

0000da7c <AttsAddGroup>:
    da7c:	b510      	push	{r4, lr}
    da7e:	4604      	mov	r4, r0
    da80:	f007 fef4 	bl	1586c <WsfTaskLock>
    da84:	4b09      	ldr	r3, [pc, #36]	; (daac <AttsAddGroup+0x30>)
    da86:	681b      	ldr	r3, [r3, #0]
    da88:	2200      	movs	r2, #0
    da8a:	b11b      	cbz	r3, da94 <AttsAddGroup+0x18>
    da8c:	8a20      	ldrh	r0, [r4, #16]
    da8e:	8a19      	ldrh	r1, [r3, #16]
    da90:	4288      	cmp	r0, r1
    da92:	d207      	bcs.n	daa4 <AttsAddGroup+0x28>
    da94:	4621      	mov	r1, r4
    da96:	4805      	ldr	r0, [pc, #20]	; (daac <AttsAddGroup+0x30>)
    da98:	f006 fe6f 	bl	1477a <WsfQueueInsert>
    da9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    daa0:	f007 beea 	b.w	15878 <WsfTaskUnlock>
    daa4:	461a      	mov	r2, r3
    daa6:	681b      	ldr	r3, [r3, #0]
    daa8:	e7ef      	b.n	da8a <AttsAddGroup+0xe>
    daaa:	bf00      	nop
    daac:	10003e0c 	.word	0x10003e0c

0000dab0 <AttsRemoveGroup>:
    dab0:	b510      	push	{r4, lr}
    dab2:	4604      	mov	r4, r0
    dab4:	f007 feda 	bl	1586c <WsfTaskLock>
    dab8:	4b08      	ldr	r3, [pc, #32]	; (dadc <AttsRemoveGroup+0x2c>)
    daba:	6819      	ldr	r1, [r3, #0]
    dabc:	2200      	movs	r2, #0
    dabe:	b919      	cbnz	r1, dac8 <AttsRemoveGroup+0x18>
    dac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dac4:	f007 bed8 	b.w	15878 <WsfTaskUnlock>
    dac8:	8a0b      	ldrh	r3, [r1, #16]
    daca:	42a3      	cmp	r3, r4
    dacc:	d002      	beq.n	dad4 <AttsRemoveGroup+0x24>
    dace:	460a      	mov	r2, r1
    dad0:	6809      	ldr	r1, [r1, #0]
    dad2:	e7f4      	b.n	dabe <AttsRemoveGroup+0xe>
    dad4:	4801      	ldr	r0, [pc, #4]	; (dadc <AttsRemoveGroup+0x2c>)
    dad6:	f006 fe7b 	bl	147d0 <WsfQueueRemove>
    dada:	e7f1      	b.n	dac0 <AttsRemoveGroup+0x10>
    dadc:	10003e0c 	.word	0x10003e0c

0000dae0 <AttsSetAttr>:
    dae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dae2:	4605      	mov	r5, r0
    dae4:	460e      	mov	r6, r1
    dae6:	4614      	mov	r4, r2
    dae8:	f007 fec0 	bl	1586c <WsfTaskLock>
    daec:	4628      	mov	r0, r5
    daee:	a901      	add	r1, sp, #4
    daf0:	f000 f862 	bl	dbb8 <attsFindByHandle>
    daf4:	4605      	mov	r5, r0
    daf6:	b198      	cbz	r0, db20 <AttsSetAttr+0x40>
    daf8:	8983      	ldrh	r3, [r0, #12]
    dafa:	42b3      	cmp	r3, r6
    dafc:	d312      	bcc.n	db24 <AttsSetAttr+0x44>
    dafe:	4621      	mov	r1, r4
    db00:	4632      	mov	r2, r6
    db02:	6840      	ldr	r0, [r0, #4]
    db04:	f7fe fb2c 	bl	c160 <memcpy>
    db08:	7bac      	ldrb	r4, [r5, #14]
    db0a:	f014 0408 	ands.w	r4, r4, #8
    db0e:	d002      	beq.n	db16 <AttsSetAttr+0x36>
    db10:	68ab      	ldr	r3, [r5, #8]
    db12:	2400      	movs	r4, #0
    db14:	801e      	strh	r6, [r3, #0]
    db16:	f007 feaf 	bl	15878 <WsfTaskUnlock>
    db1a:	4620      	mov	r0, r4
    db1c:	b002      	add	sp, #8
    db1e:	bd70      	pop	{r4, r5, r6, pc}
    db20:	240a      	movs	r4, #10
    db22:	e7f8      	b.n	db16 <AttsSetAttr+0x36>
    db24:	240d      	movs	r4, #13
    db26:	e7f6      	b.n	db16 <AttsSetAttr+0x36>

0000db28 <AttsGetAttr>:
    db28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    db2a:	460d      	mov	r5, r1
    db2c:	a901      	add	r1, sp, #4
    db2e:	4614      	mov	r4, r2
    db30:	f000 f842 	bl	dbb8 <attsFindByHandle>
    db34:	b138      	cbz	r0, db46 <AttsGetAttr+0x1e>
    db36:	6883      	ldr	r3, [r0, #8]
    db38:	881b      	ldrh	r3, [r3, #0]
    db3a:	802b      	strh	r3, [r5, #0]
    db3c:	6843      	ldr	r3, [r0, #4]
    db3e:	6023      	str	r3, [r4, #0]
    db40:	2000      	movs	r0, #0
    db42:	b003      	add	sp, #12
    db44:	bd30      	pop	{r4, r5, pc}
    db46:	200a      	movs	r0, #10
    db48:	e7fb      	b.n	db42 <AttsGetAttr+0x1a>

0000db4a <AttsErrorTest>:
    db4a:	4b02      	ldr	r3, [pc, #8]	; (db54 <AttsErrorTest+0xa>)
    db4c:	f883 0111 	strb.w	r0, [r3, #273]	; 0x111
    db50:	4770      	bx	lr
    db52:	bf00      	nop
    db54:	100039d4 	.word	0x100039d4

0000db58 <attsUuidCmp>:
    db58:	b510      	push	{r4, lr}
    db5a:	4604      	mov	r4, r0
    db5c:	4613      	mov	r3, r2
    db5e:	7ba2      	ldrb	r2, [r4, #14]
    db60:	6800      	ldr	r0, [r0, #0]
    db62:	07d2      	lsls	r2, r2, #31
    db64:	d409      	bmi.n	db7a <attsUuidCmp+0x22>
    db66:	2902      	cmp	r1, #2
    db68:	d10c      	bne.n	db84 <attsUuidCmp+0x2c>
    db6a:	460a      	mov	r2, r1
    db6c:	4619      	mov	r1, r3
    db6e:	f7fe fac7 	bl	c100 <memcmp>
    db72:	fab0 f080 	clz	r0, r0
    db76:	0940      	lsrs	r0, r0, #5
    db78:	bd10      	pop	{r4, pc}
    db7a:	2910      	cmp	r1, #16
    db7c:	d0f5      	beq.n	db6a <attsUuidCmp+0x12>
    db7e:	4601      	mov	r1, r0
    db80:	4618      	mov	r0, r3
    db82:	e002      	b.n	db8a <attsUuidCmp+0x32>
    db84:	2910      	cmp	r1, #16
    db86:	d1fa      	bne.n	db7e <attsUuidCmp+0x26>
    db88:	4619      	mov	r1, r3
    db8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db8e:	f7fe bcfd 	b.w	c58c <attUuidCmp16to128>

0000db92 <attsUuid16Cmp>:
    db92:	2902      	cmp	r1, #2
    db94:	4603      	mov	r3, r0
    db96:	d10c      	bne.n	dbb2 <attsUuid16Cmp+0x20>
    db98:	7800      	ldrb	r0, [r0, #0]
    db9a:	7811      	ldrb	r1, [r2, #0]
    db9c:	4288      	cmp	r0, r1
    db9e:	d106      	bne.n	dbae <attsUuid16Cmp+0x1c>
    dba0:	7858      	ldrb	r0, [r3, #1]
    dba2:	7853      	ldrb	r3, [r2, #1]
    dba4:	1ac3      	subs	r3, r0, r3
    dba6:	4258      	negs	r0, r3
    dba8:	4158      	adcs	r0, r3
    dbaa:	b2c0      	uxtb	r0, r0
    dbac:	4770      	bx	lr
    dbae:	2000      	movs	r0, #0
    dbb0:	e7fb      	b.n	dbaa <attsUuid16Cmp+0x18>
    dbb2:	4611      	mov	r1, r2
    dbb4:	f7fe bcea 	b.w	c58c <attUuidCmp16to128>

0000dbb8 <attsFindByHandle>:
    dbb8:	b510      	push	{r4, lr}
    dbba:	4b08      	ldr	r3, [pc, #32]	; (dbdc <attsFindByHandle+0x24>)
    dbbc:	681b      	ldr	r3, [r3, #0]
    dbbe:	b90b      	cbnz	r3, dbc4 <attsFindByHandle+0xc>
    dbc0:	4618      	mov	r0, r3
    dbc2:	e00a      	b.n	dbda <attsFindByHandle+0x22>
    dbc4:	8a1a      	ldrh	r2, [r3, #16]
    dbc6:	4282      	cmp	r2, r0
    dbc8:	d8f8      	bhi.n	dbbc <attsFindByHandle+0x4>
    dbca:	8a5c      	ldrh	r4, [r3, #18]
    dbcc:	4284      	cmp	r4, r0
    dbce:	d3f5      	bcc.n	dbbc <attsFindByHandle+0x4>
    dbd0:	600b      	str	r3, [r1, #0]
    dbd2:	685b      	ldr	r3, [r3, #4]
    dbd4:	1a80      	subs	r0, r0, r2
    dbd6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    dbda:	bd10      	pop	{r4, pc}
    dbdc:	10003e0c 	.word	0x10003e0c

0000dbe0 <attsFindInRange>:
    dbe0:	b530      	push	{r4, r5, lr}
    dbe2:	4b0a      	ldr	r3, [pc, #40]	; (dc0c <attsFindInRange+0x2c>)
    dbe4:	681b      	ldr	r3, [r3, #0]
    dbe6:	b90b      	cbnz	r3, dbec <attsFindInRange+0xc>
    dbe8:	4618      	mov	r0, r3
    dbea:	e00d      	b.n	dc08 <attsFindInRange+0x28>
    dbec:	8a1c      	ldrh	r4, [r3, #16]
    dbee:	4284      	cmp	r4, r0
    dbf0:	d902      	bls.n	dbf8 <attsFindInRange+0x18>
    dbf2:	428c      	cmp	r4, r1
    dbf4:	d8f6      	bhi.n	dbe4 <attsFindInRange+0x4>
    dbf6:	4620      	mov	r0, r4
    dbf8:	8a5d      	ldrh	r5, [r3, #18]
    dbfa:	4285      	cmp	r5, r0
    dbfc:	d3f2      	bcc.n	dbe4 <attsFindInRange+0x4>
    dbfe:	685b      	ldr	r3, [r3, #4]
    dc00:	1b04      	subs	r4, r0, r4
    dc02:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    dc06:	6014      	str	r4, [r2, #0]
    dc08:	bd30      	pop	{r4, r5, pc}
    dc0a:	bf00      	nop
    dc0c:	10003e0c 	.word	0x10003e0c

0000dc10 <attsPermissions>:
    dc10:	420b      	tst	r3, r1
    dc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc16:	4606      	mov	r6, r0
    dc18:	460d      	mov	r5, r1
    dc1a:	4617      	mov	r7, r2
    dc1c:	461c      	mov	r4, r3
    dc1e:	d105      	bne.n	dc2c <attsPermissions+0x1c>
    dc20:	2901      	cmp	r1, #1
    dc22:	bf0c      	ite	eq
    dc24:	2002      	moveq	r0, #2
    dc26:	2003      	movne	r0, #3
    dc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc2c:	2910      	cmp	r1, #16
    dc2e:	bf08      	it	eq
    dc30:	091c      	lsreq	r4, r3, #4
    dc32:	f014 0f0e 	tst.w	r4, #14
    dc36:	d101      	bne.n	dc3c <attsPermissions+0x2c>
    dc38:	2000      	movs	r0, #0
    dc3a:	e7f5      	b.n	dc28 <attsPermissions+0x18>
    dc3c:	f001 fe62 	bl	f904 <DmConnSecLevel>
    dc40:	0722      	lsls	r2, r4, #28
    dc42:	d500      	bpl.n	dc46 <attsPermissions+0x36>
    dc44:	b180      	cbz	r0, dc68 <attsPermissions+0x58>
    dc46:	f004 030a 	and.w	r3, r4, #10
    dc4a:	2b0a      	cmp	r3, #10
    dc4c:	d101      	bne.n	dc52 <attsPermissions+0x42>
    dc4e:	2801      	cmp	r0, #1
    dc50:	d90a      	bls.n	dc68 <attsPermissions+0x58>
    dc52:	0763      	lsls	r3, r4, #29
    dc54:	d5f0      	bpl.n	dc38 <attsPermissions+0x28>
    dc56:	4b06      	ldr	r3, [pc, #24]	; (dc70 <attsPermissions+0x60>)
    dc58:	691b      	ldr	r3, [r3, #16]
    dc5a:	b13b      	cbz	r3, dc6c <attsPermissions+0x5c>
    dc5c:	463a      	mov	r2, r7
    dc5e:	4629      	mov	r1, r5
    dc60:	4630      	mov	r0, r6
    dc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc66:	4718      	bx	r3
    dc68:	2005      	movs	r0, #5
    dc6a:	e7dd      	b.n	dc28 <attsPermissions+0x18>
    dc6c:	2008      	movs	r0, #8
    dc6e:	e7db      	b.n	dc28 <attsPermissions+0x18>
    dc70:	10003e0c 	.word	0x10003e0c

0000dc74 <attsProcMtuReq>:
    dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc76:	7a93      	ldrb	r3, [r2, #10]
    dc78:	7a54      	ldrb	r4, [r2, #9]
    dc7a:	4d17      	ldr	r5, [pc, #92]	; (dcd8 <attsProcMtuReq+0x64>)
    dc7c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dc80:	b2a4      	uxth	r4, r4
    dc82:	682b      	ldr	r3, [r5, #0]
    dc84:	2c17      	cmp	r4, #23
    dc86:	bf38      	it	cc
    dc88:	2417      	movcc	r4, #23
    dc8a:	889f      	ldrh	r7, [r3, #4]
    dc8c:	4606      	mov	r6, r0
    dc8e:	f00a fcc9 	bl	18624 <HciGetMaxRxAclLen>
    dc92:	3804      	subs	r0, #4
    dc94:	4287      	cmp	r7, r0
    dc96:	da1a      	bge.n	dcce <attsProcMtuReq+0x5a>
    dc98:	682b      	ldr	r3, [r5, #0]
    dc9a:	889d      	ldrh	r5, [r3, #4]
    dc9c:	42a5      	cmp	r5, r4
    dc9e:	f04f 000b 	mov.w	r0, #11
    dca2:	bf28      	it	cs
    dca4:	4625      	movcs	r5, r4
    dca6:	f7fe fcaf 	bl	c608 <attMsgAlloc>
    dcaa:	4603      	mov	r3, r0
    dcac:	b140      	cbz	r0, dcc0 <attsProcMtuReq+0x4c>
    dcae:	0a29      	lsrs	r1, r5, #8
    dcb0:	2203      	movs	r2, #3
    dcb2:	7202      	strb	r2, [r0, #8]
    dcb4:	7245      	strb	r5, [r0, #9]
    dcb6:	7281      	strb	r1, [r0, #10]
    dcb8:	8b31      	ldrh	r1, [r6, #24]
    dcba:	2004      	movs	r0, #4
    dcbc:	f002 fd80 	bl	107c0 <L2cDataReq>
    dcc0:	462a      	mov	r2, r5
    dcc2:	4621      	mov	r1, r4
    dcc4:	4630      	mov	r0, r6
    dcc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dcca:	f7fe bc8b 	b.w	c5e4 <attSetMtu>
    dcce:	f00a fca9 	bl	18624 <HciGetMaxRxAclLen>
    dcd2:	1f05      	subs	r5, r0, #4
    dcd4:	b2ad      	uxth	r5, r5
    dcd6:	e7e1      	b.n	dc9c <attsProcMtuReq+0x28>
    dcd8:	10002bd0 	.word	0x10002bd0

0000dcdc <attsProcFindInfoReq>:
    dcdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    dce0:	7a93      	ldrb	r3, [r2, #10]
    dce2:	7a57      	ldrb	r7, [r2, #9]
    dce4:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    dce8:	b2bf      	uxth	r7, r7
    dcea:	4680      	mov	r8, r0
    dcec:	2f00      	cmp	r7, #0
    dcee:	d076      	beq.n	ddde <attsProcFindInfoReq+0x102>
    dcf0:	7b13      	ldrb	r3, [r2, #12]
    dcf2:	f892 900b 	ldrb.w	r9, [r2, #11]
    dcf6:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    dcfa:	fa1f f989 	uxth.w	r9, r9
    dcfe:	454f      	cmp	r7, r9
    dd00:	d86d      	bhi.n	ddde <attsProcFindInfoReq+0x102>
    dd02:	8b40      	ldrh	r0, [r0, #26]
    dd04:	3008      	adds	r0, #8
    dd06:	b280      	uxth	r0, r0
    dd08:	f7fe fc7e 	bl	c608 <attMsgAlloc>
    dd0c:	4606      	mov	r6, r0
    dd0e:	2800      	cmp	r0, #0
    dd10:	d067      	beq.n	dde2 <attsProcFindInfoReq+0x106>
    dd12:	2305      	movs	r3, #5
    dd14:	7203      	strb	r3, [r0, #8]
    dd16:	2301      	movs	r3, #1
    dd18:	7243      	strb	r3, [r0, #9]
    dd1a:	f100 040e 	add.w	r4, r0, #14
    dd1e:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dd22:	4638      	mov	r0, r7
    dd24:	aa01      	add	r2, sp, #4
    dd26:	4649      	mov	r1, r9
    dd28:	1f25      	subs	r5, r4, #4
    dd2a:	f7ff ff59 	bl	dbe0 <attsFindInRange>
    dd2e:	b1d0      	cbz	r0, dd66 <attsProcFindInfoReq+0x8a>
    dd30:	9b01      	ldr	r3, [sp, #4]
    dd32:	7b9b      	ldrb	r3, [r3, #14]
    dd34:	07db      	lsls	r3, r3, #31
    dd36:	d530      	bpl.n	dd9a <attsProcFindInfoReq+0xbe>
    dd38:	f106 030a 	add.w	r3, r6, #10
    dd3c:	429d      	cmp	r5, r3
    dd3e:	d112      	bne.n	dd66 <attsProcFindInfoReq+0x8a>
    dd40:	7028      	strb	r0, [r5, #0]
    dd42:	2302      	movs	r3, #2
    dd44:	0a00      	lsrs	r0, r0, #8
    dd46:	f805 3c01 	strb.w	r3, [r5, #-1]
    dd4a:	7068      	strb	r0, [r5, #1]
    dd4c:	9b01      	ldr	r3, [sp, #4]
    dd4e:	681b      	ldr	r3, [r3, #0]
    dd50:	f106 020c 	add.w	r2, r6, #12
    dd54:	f103 0110 	add.w	r1, r3, #16
    dd58:	f853 0b04 	ldr.w	r0, [r3], #4
    dd5c:	f842 0b04 	str.w	r0, [r2], #4
    dd60:	428b      	cmp	r3, r1
    dd62:	d1f9      	bne.n	dd58 <attsProcFindInfoReq+0x7c>
    dd64:	3512      	adds	r5, #18
    dd66:	f106 030a 	add.w	r3, r6, #10
    dd6a:	429d      	cmp	r5, r3
    dd6c:	d13b      	bne.n	dde6 <attsProcFindInfoReq+0x10a>
    dd6e:	4630      	mov	r0, r6
    dd70:	f006 fc56 	bl	14620 <WsfMsgFree>
    dd74:	240a      	movs	r4, #10
    dd76:	4640      	mov	r0, r8
    dd78:	f7ff fe42 	bl	da00 <attsDiscBusy>
    dd7c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    dd80:	bb9c      	cbnz	r4, ddea <attsProcFindInfoReq+0x10e>
    dd82:	f106 0208 	add.w	r2, r6, #8
    dd86:	1aaa      	subs	r2, r5, r2
    dd88:	4601      	mov	r1, r0
    dd8a:	4633      	mov	r3, r6
    dd8c:	b292      	uxth	r2, r2
    dd8e:	2004      	movs	r0, #4
    dd90:	f002 fd16 	bl	107c0 <L2cDataReq>
    dd94:	b002      	add	sp, #8
    dd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd9a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    dd9e:	3308      	adds	r3, #8
    dda0:	4433      	add	r3, r6
    dda2:	429c      	cmp	r4, r3
    dda4:	4622      	mov	r2, r4
    dda6:	d8de      	bhi.n	dd66 <attsProcFindInfoReq+0x8a>
    dda8:	0a03      	lsrs	r3, r0, #8
    ddaa:	f804 0c04 	strb.w	r0, [r4, #-4]
    ddae:	f804 3c03 	strb.w	r3, [r4, #-3]
    ddb2:	9b01      	ldr	r3, [sp, #4]
    ddb4:	681b      	ldr	r3, [r3, #0]
    ddb6:	781b      	ldrb	r3, [r3, #0]
    ddb8:	f804 3c02 	strb.w	r3, [r4, #-2]
    ddbc:	9b01      	ldr	r3, [sp, #4]
    ddbe:	681b      	ldr	r3, [r3, #0]
    ddc0:	4550      	cmp	r0, sl
    ddc2:	785b      	ldrb	r3, [r3, #1]
    ddc4:	f804 3c01 	strb.w	r3, [r4, #-1]
    ddc8:	d007      	beq.n	ddda <attsProcFindInfoReq+0xfe>
    ddca:	3001      	adds	r0, #1
    ddcc:	b280      	uxth	r0, r0
    ddce:	4581      	cmp	r9, r0
    ddd0:	f104 0404 	add.w	r4, r4, #4
    ddd4:	d2a6      	bcs.n	dd24 <attsProcFindInfoReq+0x48>
    ddd6:	4615      	mov	r5, r2
    ddd8:	e7c5      	b.n	dd66 <attsProcFindInfoReq+0x8a>
    ddda:	4625      	mov	r5, r4
    dddc:	e7c3      	b.n	dd66 <attsProcFindInfoReq+0x8a>
    ddde:	2401      	movs	r4, #1
    dde0:	e7c9      	b.n	dd76 <attsProcFindInfoReq+0x9a>
    dde2:	2411      	movs	r4, #17
    dde4:	e7c7      	b.n	dd76 <attsProcFindInfoReq+0x9a>
    dde6:	2400      	movs	r4, #0
    dde8:	e7c5      	b.n	dd76 <attsProcFindInfoReq+0x9a>
    ddea:	4623      	mov	r3, r4
    ddec:	463a      	mov	r2, r7
    ddee:	2104      	movs	r1, #4
    ddf0:	f7ff fd88 	bl	d904 <attsErrRsp>
    ddf4:	e7ce      	b.n	dd94 <attsProcFindInfoReq+0xb8>

0000ddf6 <attsProcReadReq>:
    ddf6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ddfa:	7a93      	ldrb	r3, [r2, #10]
    ddfc:	7a54      	ldrb	r4, [r2, #9]
    ddfe:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    de02:	b2a4      	uxth	r4, r4
    de04:	4606      	mov	r6, r0
    de06:	a903      	add	r1, sp, #12
    de08:	4620      	mov	r0, r4
    de0a:	f7ff fed5 	bl	dbb8 <attsFindByHandle>
    de0e:	4605      	mov	r5, r0
    de10:	2800      	cmp	r0, #0
    de12:	d047      	beq.n	dea4 <attsProcReadReq+0xae>
    de14:	7bc3      	ldrb	r3, [r0, #15]
    de16:	7f30      	ldrb	r0, [r6, #28]
    de18:	4622      	mov	r2, r4
    de1a:	2101      	movs	r1, #1
    de1c:	f7ff fef8 	bl	dc10 <attsPermissions>
    de20:	4603      	mov	r3, r0
    de22:	b960      	cbnz	r0, de3e <attsProcReadReq+0x48>
    de24:	7baa      	ldrb	r2, [r5, #14]
    de26:	0751      	lsls	r1, r2, #29
    de28:	d50f      	bpl.n	de4a <attsProcReadReq+0x54>
    de2a:	9903      	ldr	r1, [sp, #12]
    de2c:	688f      	ldr	r7, [r1, #8]
    de2e:	b167      	cbz	r7, de4a <attsProcReadReq+0x54>
    de30:	7f30      	ldrb	r0, [r6, #28]
    de32:	9500      	str	r5, [sp, #0]
    de34:	220a      	movs	r2, #10
    de36:	4621      	mov	r1, r4
    de38:	47b8      	blx	r7
    de3a:	4603      	mov	r3, r0
    de3c:	b138      	cbz	r0, de4e <attsProcReadReq+0x58>
    de3e:	4622      	mov	r2, r4
    de40:	210a      	movs	r1, #10
    de42:	8b30      	ldrh	r0, [r6, #24]
    de44:	f7ff fd5e 	bl	d904 <attsErrRsp>
    de48:	e010      	b.n	de6c <attsProcReadReq+0x76>
    de4a:	0693      	lsls	r3, r2, #26
    de4c:	d411      	bmi.n	de72 <attsProcReadReq+0x7c>
    de4e:	68ab      	ldr	r3, [r5, #8]
    de50:	8b74      	ldrh	r4, [r6, #26]
    de52:	881a      	ldrh	r2, [r3, #0]
    de54:	3c01      	subs	r4, #1
    de56:	4294      	cmp	r4, r2
    de58:	bfa8      	it	ge
    de5a:	4614      	movge	r4, r2
    de5c:	b2a7      	uxth	r7, r4
    de5e:	f107 0009 	add.w	r0, r7, #9
    de62:	b280      	uxth	r0, r0
    de64:	f7fe fbd0 	bl	c608 <attMsgAlloc>
    de68:	4680      	mov	r8, r0
    de6a:	b960      	cbnz	r0, de86 <attsProcReadReq+0x90>
    de6c:	b004      	add	sp, #16
    de6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de72:	4b0d      	ldr	r3, [pc, #52]	; (dea8 <attsProcReadReq+0xb2>)
    de74:	695f      	ldr	r7, [r3, #20]
    de76:	2f00      	cmp	r7, #0
    de78:	d0e9      	beq.n	de4e <attsProcReadReq+0x58>
    de7a:	686b      	ldr	r3, [r5, #4]
    de7c:	7f30      	ldrb	r0, [r6, #28]
    de7e:	4622      	mov	r2, r4
    de80:	2105      	movs	r1, #5
    de82:	47b8      	blx	r7
    de84:	e7d9      	b.n	de3a <attsProcReadReq+0x44>
    de86:	230b      	movs	r3, #11
    de88:	7203      	strb	r3, [r0, #8]
    de8a:	b2a2      	uxth	r2, r4
    de8c:	6869      	ldr	r1, [r5, #4]
    de8e:	3009      	adds	r0, #9
    de90:	f7fe f966 	bl	c160 <memcpy>
    de94:	1c7a      	adds	r2, r7, #1
    de96:	4643      	mov	r3, r8
    de98:	b292      	uxth	r2, r2
    de9a:	8b31      	ldrh	r1, [r6, #24]
    de9c:	2004      	movs	r0, #4
    de9e:	f002 fc8f 	bl	107c0 <L2cDataReq>
    dea2:	e7e3      	b.n	de6c <attsProcReadReq+0x76>
    dea4:	2301      	movs	r3, #1
    dea6:	e7ca      	b.n	de3e <attsProcReadReq+0x48>
    dea8:	10003e0c 	.word	0x10003e0c

0000deac <attsFindUuidInRange>:
    deac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    deb0:	4699      	mov	r9, r3
    deb2:	4b1a      	ldr	r3, [pc, #104]	; (df1c <attsFindUuidInRange+0x70>)
    deb4:	9e08      	ldr	r6, [sp, #32]
    deb6:	681d      	ldr	r5, [r3, #0]
    deb8:	460f      	mov	r7, r1
    deba:	4690      	mov	r8, r2
    debc:	4604      	mov	r4, r0
    debe:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dec2:	b90d      	cbnz	r5, dec8 <attsFindUuidInRange+0x1c>
    dec4:	462c      	mov	r4, r5
    dec6:	e025      	b.n	df14 <attsFindUuidInRange+0x68>
    dec8:	8a2a      	ldrh	r2, [r5, #16]
    deca:	42a2      	cmp	r2, r4
    decc:	d90c      	bls.n	dee8 <attsFindUuidInRange+0x3c>
    dece:	42ba      	cmp	r2, r7
    ded0:	d909      	bls.n	dee6 <attsFindUuidInRange+0x3a>
    ded2:	682d      	ldr	r5, [r5, #0]
    ded4:	e7f5      	b.n	dec2 <attsFindUuidInRange+0x16>
    ded6:	4554      	cmp	r4, sl
    ded8:	d0fb      	beq.n	ded2 <attsFindUuidInRange+0x26>
    deda:	6833      	ldr	r3, [r6, #0]
    dedc:	3401      	adds	r4, #1
    dede:	3310      	adds	r3, #16
    dee0:	b2a4      	uxth	r4, r4
    dee2:	6033      	str	r3, [r6, #0]
    dee4:	e008      	b.n	def8 <attsFindUuidInRange+0x4c>
    dee6:	4614      	mov	r4, r2
    dee8:	8a6b      	ldrh	r3, [r5, #18]
    deea:	42a3      	cmp	r3, r4
    deec:	d3f1      	bcc.n	ded2 <attsFindUuidInRange+0x26>
    deee:	686b      	ldr	r3, [r5, #4]
    def0:	1aa2      	subs	r2, r4, r2
    def2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    def6:	6032      	str	r2, [r6, #0]
    def8:	8a6b      	ldrh	r3, [r5, #18]
    defa:	42a3      	cmp	r3, r4
    defc:	d3e9      	bcc.n	ded2 <attsFindUuidInRange+0x26>
    defe:	42bc      	cmp	r4, r7
    df00:	d8e7      	bhi.n	ded2 <attsFindUuidInRange+0x26>
    df02:	464a      	mov	r2, r9
    df04:	4641      	mov	r1, r8
    df06:	6830      	ldr	r0, [r6, #0]
    df08:	f7ff fe26 	bl	db58 <attsUuidCmp>
    df0c:	2800      	cmp	r0, #0
    df0e:	d0e2      	beq.n	ded6 <attsFindUuidInRange+0x2a>
    df10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df12:	601d      	str	r5, [r3, #0]
    df14:	4620      	mov	r0, r4
    df16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df1a:	bf00      	nop
    df1c:	10003e0c 	.word	0x10003e0c

0000df20 <attsFindServiceGroupEnd>:
    df20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    df26:	f8ad 3000 	strh.w	r3, [sp]
    df2a:	4b1d      	ldr	r3, [pc, #116]	; (dfa0 <attsFindServiceGroupEnd+0x80>)
    df2c:	881b      	ldrh	r3, [r3, #0]
    df2e:	f8ad 3004 	strh.w	r3, [sp, #4]
    df32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df36:	4298      	cmp	r0, r3
    df38:	d104      	bne.n	df44 <attsFindServiceGroupEnd+0x24>
    df3a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    df3e:	4628      	mov	r0, r5
    df40:	b003      	add	sp, #12
    df42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df44:	4b17      	ldr	r3, [pc, #92]	; (dfa4 <attsFindServiceGroupEnd+0x84>)
    df46:	1c44      	adds	r4, r0, #1
    df48:	681f      	ldr	r7, [r3, #0]
    df4a:	b2a4      	uxth	r4, r4
    df4c:	4605      	mov	r5, r0
    df4e:	2f00      	cmp	r7, #0
    df50:	d0f3      	beq.n	df3a <attsFindServiceGroupEnd+0x1a>
    df52:	8a3e      	ldrh	r6, [r7, #16]
    df54:	8a7b      	ldrh	r3, [r7, #18]
    df56:	42b4      	cmp	r4, r6
    df58:	bf38      	it	cc
    df5a:	4634      	movcc	r4, r6
    df5c:	42a3      	cmp	r3, r4
    df5e:	d306      	bcc.n	df6e <attsFindServiceGroupEnd+0x4e>
    df60:	1ba3      	subs	r3, r4, r6
    df62:	687e      	ldr	r6, [r7, #4]
    df64:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    df68:	8a7b      	ldrh	r3, [r7, #18]
    df6a:	42a3      	cmp	r3, r4
    df6c:	d201      	bcs.n	df72 <attsFindServiceGroupEnd+0x52>
    df6e:	683f      	ldr	r7, [r7, #0]
    df70:	e7ed      	b.n	df4e <attsFindServiceGroupEnd+0x2e>
    df72:	466a      	mov	r2, sp
    df74:	2102      	movs	r1, #2
    df76:	4630      	mov	r0, r6
    df78:	f7ff fdee 	bl	db58 <attsUuidCmp>
    df7c:	2800      	cmp	r0, #0
    df7e:	d1de      	bne.n	df3e <attsFindServiceGroupEnd+0x1e>
    df80:	aa01      	add	r2, sp, #4
    df82:	2102      	movs	r1, #2
    df84:	4630      	mov	r0, r6
    df86:	f7ff fde7 	bl	db58 <attsUuidCmp>
    df8a:	2800      	cmp	r0, #0
    df8c:	d1d7      	bne.n	df3e <attsFindServiceGroupEnd+0x1e>
    df8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df92:	429c      	cmp	r4, r3
    df94:	d0d1      	beq.n	df3a <attsFindServiceGroupEnd+0x1a>
    df96:	1c63      	adds	r3, r4, #1
    df98:	4625      	mov	r5, r4
    df9a:	3610      	adds	r6, #16
    df9c:	b29c      	uxth	r4, r3
    df9e:	e7e3      	b.n	df68 <attsFindServiceGroupEnd+0x48>
    dfa0:	000250c4 	.word	0x000250c4
    dfa4:	10003e0c 	.word	0x10003e0c

0000dfa8 <attsProcReadBlobReq>:
    dfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dfac:	7a93      	ldrb	r3, [r2, #10]
    dfae:	7a54      	ldrb	r4, [r2, #9]
    dfb0:	7ad5      	ldrb	r5, [r2, #11]
    dfb2:	f892 800c 	ldrb.w	r8, [r2, #12]
    dfb6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dfba:	b085      	sub	sp, #20
    dfbc:	b2a4      	uxth	r4, r4
    dfbe:	4607      	mov	r7, r0
    dfc0:	a903      	add	r1, sp, #12
    dfc2:	4620      	mov	r0, r4
    dfc4:	f7ff fdf8 	bl	dbb8 <attsFindByHandle>
    dfc8:	4606      	mov	r6, r0
    dfca:	2800      	cmp	r0, #0
    dfcc:	d057      	beq.n	e07e <attsProcReadBlobReq+0xd6>
    dfce:	7bc3      	ldrb	r3, [r0, #15]
    dfd0:	7f38      	ldrb	r0, [r7, #28]
    dfd2:	4622      	mov	r2, r4
    dfd4:	2101      	movs	r1, #1
    dfd6:	f7ff fe1b 	bl	dc10 <attsPermissions>
    dfda:	b9b0      	cbnz	r0, e00a <attsProcReadBlobReq+0x62>
    dfdc:	68b3      	ldr	r3, [r6, #8]
    dfde:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    dfe2:	881b      	ldrh	r3, [r3, #0]
    dfe4:	b2ad      	uxth	r5, r5
    dfe6:	42ab      	cmp	r3, r5
    dfe8:	d34b      	bcc.n	e082 <attsProcReadBlobReq+0xda>
    dfea:	7bb3      	ldrb	r3, [r6, #14]
    dfec:	075a      	lsls	r2, r3, #29
    dfee:	d513      	bpl.n	e018 <attsProcReadBlobReq+0x70>
    dff0:	9a03      	ldr	r2, [sp, #12]
    dff2:	f8d2 8008 	ldr.w	r8, [r2, #8]
    dff6:	f1b8 0f00 	cmp.w	r8, #0
    dffa:	d00d      	beq.n	e018 <attsProcReadBlobReq+0x70>
    dffc:	7f38      	ldrb	r0, [r7, #28]
    dffe:	9600      	str	r6, [sp, #0]
    e000:	462b      	mov	r3, r5
    e002:	220c      	movs	r2, #12
    e004:	4621      	mov	r1, r4
    e006:	47c0      	blx	r8
    e008:	b140      	cbz	r0, e01c <attsProcReadBlobReq+0x74>
    e00a:	4603      	mov	r3, r0
    e00c:	4622      	mov	r2, r4
    e00e:	210c      	movs	r1, #12
    e010:	8b38      	ldrh	r0, [r7, #24]
    e012:	f7ff fc77 	bl	d904 <attsErrRsp>
    e016:	e012      	b.n	e03e <attsProcReadBlobReq+0x96>
    e018:	069b      	lsls	r3, r3, #26
    e01a:	d413      	bmi.n	e044 <attsProcReadBlobReq+0x9c>
    e01c:	68b3      	ldr	r3, [r6, #8]
    e01e:	8b7a      	ldrh	r2, [r7, #26]
    e020:	881c      	ldrh	r4, [r3, #0]
    e022:	3a01      	subs	r2, #1
    e024:	1b64      	subs	r4, r4, r5
    e026:	4294      	cmp	r4, r2
    e028:	bfa8      	it	ge
    e02a:	4614      	movge	r4, r2
    e02c:	fa1f f884 	uxth.w	r8, r4
    e030:	f108 0009 	add.w	r0, r8, #9
    e034:	b280      	uxth	r0, r0
    e036:	f7fe fae7 	bl	c608 <attMsgAlloc>
    e03a:	4681      	mov	r9, r0
    e03c:	b970      	cbnz	r0, e05c <attsProcReadBlobReq+0xb4>
    e03e:	b005      	add	sp, #20
    e040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e044:	4b10      	ldr	r3, [pc, #64]	; (e088 <attsProcReadBlobReq+0xe0>)
    e046:	f8d3 8014 	ldr.w	r8, [r3, #20]
    e04a:	f1b8 0f00 	cmp.w	r8, #0
    e04e:	d0e5      	beq.n	e01c <attsProcReadBlobReq+0x74>
    e050:	6873      	ldr	r3, [r6, #4]
    e052:	7f38      	ldrb	r0, [r7, #28]
    e054:	4622      	mov	r2, r4
    e056:	2105      	movs	r1, #5
    e058:	47c0      	blx	r8
    e05a:	e7d5      	b.n	e008 <attsProcReadBlobReq+0x60>
    e05c:	230d      	movs	r3, #13
    e05e:	7203      	strb	r3, [r0, #8]
    e060:	6871      	ldr	r1, [r6, #4]
    e062:	b2a2      	uxth	r2, r4
    e064:	4429      	add	r1, r5
    e066:	3009      	adds	r0, #9
    e068:	f7fe f87a 	bl	c160 <memcpy>
    e06c:	f108 0201 	add.w	r2, r8, #1
    e070:	464b      	mov	r3, r9
    e072:	b292      	uxth	r2, r2
    e074:	8b39      	ldrh	r1, [r7, #24]
    e076:	2004      	movs	r0, #4
    e078:	f002 fba2 	bl	107c0 <L2cDataReq>
    e07c:	e7df      	b.n	e03e <attsProcReadBlobReq+0x96>
    e07e:	2001      	movs	r0, #1
    e080:	e7c3      	b.n	e00a <attsProcReadBlobReq+0x62>
    e082:	2007      	movs	r0, #7
    e084:	e7c1      	b.n	e00a <attsProcReadBlobReq+0x62>
    e086:	bf00      	nop
    e088:	10003e0c 	.word	0x10003e0c

0000e08c <attsProcFindTypeReq>:
    e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e090:	7a93      	ldrb	r3, [r2, #10]
    e092:	7a55      	ldrb	r5, [r2, #9]
    e094:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e098:	b2ad      	uxth	r5, r5
    e09a:	b087      	sub	sp, #28
    e09c:	4682      	mov	sl, r0
    e09e:	4689      	mov	r9, r1
    e0a0:	4616      	mov	r6, r2
    e0a2:	2d00      	cmp	r5, #0
    e0a4:	d075      	beq.n	e192 <attsProcFindTypeReq+0x106>
    e0a6:	7b13      	ldrb	r3, [r2, #12]
    e0a8:	f892 800b 	ldrb.w	r8, [r2, #11]
    e0ac:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    e0b0:	fa1f f888 	uxth.w	r8, r8
    e0b4:	4545      	cmp	r5, r8
    e0b6:	d86c      	bhi.n	e192 <attsProcFindTypeReq+0x106>
    e0b8:	8b40      	ldrh	r0, [r0, #26]
    e0ba:	3008      	adds	r0, #8
    e0bc:	b280      	uxth	r0, r0
    e0be:	f7fe faa3 	bl	c608 <attMsgAlloc>
    e0c2:	4607      	mov	r7, r0
    e0c4:	2800      	cmp	r0, #0
    e0c6:	d066      	beq.n	e196 <attsProcFindTypeReq+0x10a>
    e0c8:	2307      	movs	r3, #7
    e0ca:	f100 0409 	add.w	r4, r0, #9
    e0ce:	7203      	strb	r3, [r0, #8]
    e0d0:	f1a9 0907 	sub.w	r9, r9, #7
    e0d4:	f106 030d 	add.w	r3, r6, #13
    e0d8:	fa1f f989 	uxth.w	r9, r9
    e0dc:	4628      	mov	r0, r5
    e0de:	9403      	str	r4, [sp, #12]
    e0e0:	9302      	str	r3, [sp, #8]
    e0e2:	ab05      	add	r3, sp, #20
    e0e4:	9301      	str	r3, [sp, #4]
    e0e6:	ab04      	add	r3, sp, #16
    e0e8:	9300      	str	r3, [sp, #0]
    e0ea:	2202      	movs	r2, #2
    e0ec:	9b02      	ldr	r3, [sp, #8]
    e0ee:	4641      	mov	r1, r8
    e0f0:	f7ff fedc 	bl	deac <attsFindUuidInRange>
    e0f4:	4683      	mov	fp, r0
    e0f6:	b9c8      	cbnz	r0, e12c <attsProcFindTypeReq+0xa0>
    e0f8:	9b03      	ldr	r3, [sp, #12]
    e0fa:	429c      	cmp	r4, r3
    e0fc:	d14d      	bne.n	e19a <attsProcFindTypeReq+0x10e>
    e0fe:	4638      	mov	r0, r7
    e100:	f006 fa8e 	bl	14620 <WsfMsgFree>
    e104:	260a      	movs	r6, #10
    e106:	4650      	mov	r0, sl
    e108:	f7ff fc7a 	bl	da00 <attsDiscBusy>
    e10c:	f8ba 0018 	ldrh.w	r0, [sl, #24]
    e110:	2e00      	cmp	r6, #0
    e112:	d144      	bne.n	e19e <attsProcFindTypeReq+0x112>
    e114:	f107 0208 	add.w	r2, r7, #8
    e118:	1aa2      	subs	r2, r4, r2
    e11a:	4601      	mov	r1, r0
    e11c:	463b      	mov	r3, r7
    e11e:	b292      	uxth	r2, r2
    e120:	2004      	movs	r0, #4
    e122:	f002 fb4d 	bl	107c0 <L2cDataReq>
    e126:	b007      	add	sp, #28
    e128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e12c:	9904      	ldr	r1, [sp, #16]
    e12e:	7bca      	ldrb	r2, [r1, #15]
    e130:	07d3      	lsls	r3, r2, #31
    e132:	d526      	bpl.n	e182 <attsProcFindTypeReq+0xf6>
    e134:	f1b9 0f00 	cmp.w	r9, #0
    e138:	d00a      	beq.n	e150 <attsProcFindTypeReq+0xc4>
    e13a:	688a      	ldr	r2, [r1, #8]
    e13c:	8812      	ldrh	r2, [r2, #0]
    e13e:	454a      	cmp	r2, r9
    e140:	d11f      	bne.n	e182 <attsProcFindTypeReq+0xf6>
    e142:	464a      	mov	r2, r9
    e144:	6849      	ldr	r1, [r1, #4]
    e146:	f106 000f 	add.w	r0, r6, #15
    e14a:	f7fd ffd9 	bl	c100 <memcmp>
    e14e:	b9c0      	cbnz	r0, e182 <attsProcFindTypeReq+0xf6>
    e150:	7b72      	ldrb	r2, [r6, #13]
    e152:	b9e2      	cbnz	r2, e18e <attsProcFindTypeReq+0x102>
    e154:	7bb2      	ldrb	r2, [r6, #14]
    e156:	2a28      	cmp	r2, #40	; 0x28
    e158:	4658      	mov	r0, fp
    e15a:	d101      	bne.n	e160 <attsProcFindTypeReq+0xd4>
    e15c:	f7ff fee0 	bl	df20 <attsFindServiceGroupEnd>
    e160:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    e164:	3208      	adds	r2, #8
    e166:	1d21      	adds	r1, r4, #4
    e168:	443a      	add	r2, r7
    e16a:	4291      	cmp	r1, r2
    e16c:	d8c4      	bhi.n	e0f8 <attsProcFindTypeReq+0x6c>
    e16e:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e172:	7063      	strb	r3, [r4, #1]
    e174:	0a03      	lsrs	r3, r0, #8
    e176:	f884 b000 	strb.w	fp, [r4]
    e17a:	70a0      	strb	r0, [r4, #2]
    e17c:	70e3      	strb	r3, [r4, #3]
    e17e:	4683      	mov	fp, r0
    e180:	460c      	mov	r4, r1
    e182:	45c3      	cmp	fp, r8
    e184:	d2b8      	bcs.n	e0f8 <attsProcFindTypeReq+0x6c>
    e186:	f10b 0001 	add.w	r0, fp, #1
    e18a:	b280      	uxth	r0, r0
    e18c:	e7a9      	b.n	e0e2 <attsProcFindTypeReq+0x56>
    e18e:	4658      	mov	r0, fp
    e190:	e7e6      	b.n	e160 <attsProcFindTypeReq+0xd4>
    e192:	2601      	movs	r6, #1
    e194:	e7b7      	b.n	e106 <attsProcFindTypeReq+0x7a>
    e196:	2611      	movs	r6, #17
    e198:	e7b5      	b.n	e106 <attsProcFindTypeReq+0x7a>
    e19a:	2600      	movs	r6, #0
    e19c:	e7b3      	b.n	e106 <attsProcFindTypeReq+0x7a>
    e19e:	4633      	mov	r3, r6
    e1a0:	462a      	mov	r2, r5
    e1a2:	2106      	movs	r1, #6
    e1a4:	f7ff fbae 	bl	d904 <attsErrRsp>
    e1a8:	e7bd      	b.n	e126 <attsProcFindTypeReq+0x9a>

0000e1aa <attsProcReadTypeReq>:
    e1aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1ae:	3905      	subs	r1, #5
    e1b0:	4606      	mov	r6, r0
    e1b2:	7a54      	ldrb	r4, [r2, #9]
    e1b4:	7a90      	ldrb	r0, [r2, #10]
    e1b6:	fa5f fa81 	uxtb.w	sl, r1
    e1ba:	eb04 2400 	add.w	r4, r4, r0, lsl #8
    e1be:	f1ba 0f02 	cmp.w	sl, #2
    e1c2:	b089      	sub	sp, #36	; 0x24
    e1c4:	b2a4      	uxth	r4, r4
    e1c6:	d003      	beq.n	e1d0 <attsProcReadTypeReq+0x26>
    e1c8:	f1ba 0f10 	cmp.w	sl, #16
    e1cc:	f040 80d4 	bne.w	e378 <attsProcReadTypeReq+0x1ce>
    e1d0:	2c00      	cmp	r4, #0
    e1d2:	f000 80d3 	beq.w	e37c <attsProcReadTypeReq+0x1d2>
    e1d6:	7b13      	ldrb	r3, [r2, #12]
    e1d8:	f892 900b 	ldrb.w	r9, [r2, #11]
    e1dc:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    e1e0:	fa1f f989 	uxth.w	r9, r9
    e1e4:	454c      	cmp	r4, r9
    e1e6:	f200 80c9 	bhi.w	e37c <attsProcReadTypeReq+0x1d2>
    e1ea:	f102 030d 	add.w	r3, r2, #13
    e1ee:	9304      	str	r3, [sp, #16]
    e1f0:	ab07      	add	r3, sp, #28
    e1f2:	9301      	str	r3, [sp, #4]
    e1f4:	ab06      	add	r3, sp, #24
    e1f6:	9300      	str	r3, [sp, #0]
    e1f8:	4620      	mov	r0, r4
    e1fa:	9b04      	ldr	r3, [sp, #16]
    e1fc:	4652      	mov	r2, sl
    e1fe:	4649      	mov	r1, r9
    e200:	f7ff fe54 	bl	deac <attsFindUuidInRange>
    e204:	4604      	mov	r4, r0
    e206:	2800      	cmp	r0, #0
    e208:	f000 80ba 	beq.w	e380 <attsProcReadTypeReq+0x1d6>
    e20c:	9b06      	ldr	r3, [sp, #24]
    e20e:	4602      	mov	r2, r0
    e210:	7bdb      	ldrb	r3, [r3, #15]
    e212:	7f30      	ldrb	r0, [r6, #28]
    e214:	2101      	movs	r1, #1
    e216:	f7ff fcfb 	bl	dc10 <attsPermissions>
    e21a:	4603      	mov	r3, r0
    e21c:	b9c0      	cbnz	r0, e250 <attsProcReadTypeReq+0xa6>
    e21e:	9a06      	ldr	r2, [sp, #24]
    e220:	7b91      	ldrb	r1, [r2, #14]
    e222:	074d      	lsls	r5, r1, #29
    e224:	d50a      	bpl.n	e23c <attsProcReadTypeReq+0x92>
    e226:	9807      	ldr	r0, [sp, #28]
    e228:	6885      	ldr	r5, [r0, #8]
    e22a:	b13d      	cbz	r5, e23c <attsProcReadTypeReq+0x92>
    e22c:	9200      	str	r2, [sp, #0]
    e22e:	7f30      	ldrb	r0, [r6, #28]
    e230:	2208      	movs	r2, #8
    e232:	4621      	mov	r1, r4
    e234:	47a8      	blx	r5
    e236:	4603      	mov	r3, r0
    e238:	b950      	cbnz	r0, e250 <attsProcReadTypeReq+0xa6>
    e23a:	e001      	b.n	e240 <attsProcReadTypeReq+0x96>
    e23c:	0688      	lsls	r0, r1, #26
    e23e:	d40d      	bmi.n	e25c <attsProcReadTypeReq+0xb2>
    e240:	8b70      	ldrh	r0, [r6, #26]
    e242:	3008      	adds	r0, #8
    e244:	b280      	uxth	r0, r0
    e246:	f7fe f9df 	bl	c608 <attMsgAlloc>
    e24a:	4680      	mov	r8, r0
    e24c:	b980      	cbnz	r0, e270 <attsProcReadTypeReq+0xc6>
    e24e:	2311      	movs	r3, #17
    e250:	4622      	mov	r2, r4
    e252:	2108      	movs	r1, #8
    e254:	8b30      	ldrh	r0, [r6, #24]
    e256:	f7ff fb55 	bl	d904 <attsErrRsp>
    e25a:	e057      	b.n	e30c <attsProcReadTypeReq+0x162>
    e25c:	4b49      	ldr	r3, [pc, #292]	; (e384 <attsProcReadTypeReq+0x1da>)
    e25e:	695d      	ldr	r5, [r3, #20]
    e260:	2d00      	cmp	r5, #0
    e262:	d0ed      	beq.n	e240 <attsProcReadTypeReq+0x96>
    e264:	6853      	ldr	r3, [r2, #4]
    e266:	7f30      	ldrb	r0, [r6, #28]
    e268:	4622      	mov	r2, r4
    e26a:	2105      	movs	r1, #5
    e26c:	47a8      	blx	r5
    e26e:	e7e2      	b.n	e236 <attsProcReadTypeReq+0x8c>
    e270:	2309      	movs	r3, #9
    e272:	7203      	strb	r3, [r0, #8]
    e274:	9b06      	ldr	r3, [sp, #24]
    e276:	8b77      	ldrh	r7, [r6, #26]
    e278:	689a      	ldr	r2, [r3, #8]
    e27a:	8812      	ldrh	r2, [r2, #0]
    e27c:	7284      	strb	r4, [r0, #10]
    e27e:	3f04      	subs	r7, #4
    e280:	4297      	cmp	r7, r2
    e282:	bf28      	it	cs
    e284:	4617      	movcs	r7, r2
    e286:	b2ff      	uxtb	r7, r7
    e288:	1cba      	adds	r2, r7, #2
    e28a:	9205      	str	r2, [sp, #20]
    e28c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e290:	7242      	strb	r2, [r0, #9]
    e292:	0a22      	lsrs	r2, r4, #8
    e294:	72c2      	strb	r2, [r0, #11]
    e296:	f100 050c 	add.w	r5, r0, #12
    e29a:	6859      	ldr	r1, [r3, #4]
    e29c:	4628      	mov	r0, r5
    e29e:	463a      	mov	r2, r7
    e2a0:	f7fd ff5e 	bl	c160 <memcpy>
    e2a4:	3401      	adds	r4, #1
    e2a6:	1cbb      	adds	r3, r7, #2
    e2a8:	b2a0      	uxth	r0, r4
    e2aa:	441d      	add	r5, r3
    e2ac:	1eab      	subs	r3, r5, #2
    e2ae:	9303      	str	r3, [sp, #12]
    e2b0:	ab07      	add	r3, sp, #28
    e2b2:	9301      	str	r3, [sp, #4]
    e2b4:	ab06      	add	r3, sp, #24
    e2b6:	9300      	str	r3, [sp, #0]
    e2b8:	4652      	mov	r2, sl
    e2ba:	9b04      	ldr	r3, [sp, #16]
    e2bc:	4649      	mov	r1, r9
    e2be:	f7ff fdf5 	bl	deac <attsFindUuidInRange>
    e2c2:	4604      	mov	r4, r0
    e2c4:	b1c0      	cbz	r0, e2f8 <attsProcReadTypeReq+0x14e>
    e2c6:	9b06      	ldr	r3, [sp, #24]
    e2c8:	7b9a      	ldrb	r2, [r3, #14]
    e2ca:	0751      	lsls	r1, r2, #29
    e2cc:	d50d      	bpl.n	e2ea <attsProcReadTypeReq+0x140>
    e2ce:	9907      	ldr	r1, [sp, #28]
    e2d0:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e2d4:	f1bb 0f00 	cmp.w	fp, #0
    e2d8:	d007      	beq.n	e2ea <attsProcReadTypeReq+0x140>
    e2da:	9300      	str	r3, [sp, #0]
    e2dc:	7f30      	ldrb	r0, [r6, #28]
    e2de:	2300      	movs	r3, #0
    e2e0:	2208      	movs	r2, #8
    e2e2:	4621      	mov	r1, r4
    e2e4:	47d8      	blx	fp
    e2e6:	b110      	cbz	r0, e2ee <attsProcReadTypeReq+0x144>
    e2e8:	e006      	b.n	e2f8 <attsProcReadTypeReq+0x14e>
    e2ea:	0692      	lsls	r2, r2, #26
    e2ec:	d411      	bmi.n	e312 <attsProcReadTypeReq+0x168>
    e2ee:	9b06      	ldr	r3, [sp, #24]
    e2f0:	689a      	ldr	r2, [r3, #8]
    e2f2:	8812      	ldrh	r2, [r2, #0]
    e2f4:	42ba      	cmp	r2, r7
    e2f6:	d018      	beq.n	e32a <attsProcReadTypeReq+0x180>
    e2f8:	9b03      	ldr	r3, [sp, #12]
    e2fa:	8b31      	ldrh	r1, [r6, #24]
    e2fc:	f108 0208 	add.w	r2, r8, #8
    e300:	1a9a      	subs	r2, r3, r2
    e302:	b292      	uxth	r2, r2
    e304:	4643      	mov	r3, r8
    e306:	2004      	movs	r0, #4
    e308:	f002 fa5a 	bl	107c0 <L2cDataReq>
    e30c:	b009      	add	sp, #36	; 0x24
    e30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e312:	4a1c      	ldr	r2, [pc, #112]	; (e384 <attsProcReadTypeReq+0x1da>)
    e314:	f8d2 b014 	ldr.w	fp, [r2, #20]
    e318:	f1bb 0f00 	cmp.w	fp, #0
    e31c:	d0e7      	beq.n	e2ee <attsProcReadTypeReq+0x144>
    e31e:	685b      	ldr	r3, [r3, #4]
    e320:	7f30      	ldrb	r0, [r6, #28]
    e322:	4622      	mov	r2, r4
    e324:	2105      	movs	r1, #5
    e326:	47d8      	blx	fp
    e328:	e7dd      	b.n	e2e6 <attsProcReadTypeReq+0x13c>
    e32a:	7bdb      	ldrb	r3, [r3, #15]
    e32c:	7f30      	ldrb	r0, [r6, #28]
    e32e:	4622      	mov	r2, r4
    e330:	2101      	movs	r1, #1
    e332:	f7ff fc6d 	bl	dc10 <attsPermissions>
    e336:	2800      	cmp	r0, #0
    e338:	d1de      	bne.n	e2f8 <attsProcReadTypeReq+0x14e>
    e33a:	8b73      	ldrh	r3, [r6, #26]
    e33c:	3308      	adds	r3, #8
    e33e:	eb07 0b05 	add.w	fp, r7, r5
    e342:	4443      	add	r3, r8
    e344:	459b      	cmp	fp, r3
    e346:	d8d7      	bhi.n	e2f8 <attsProcReadTypeReq+0x14e>
    e348:	0a23      	lsrs	r3, r4, #8
    e34a:	f805 4c02 	strb.w	r4, [r5, #-2]
    e34e:	f805 3c01 	strb.w	r3, [r5, #-1]
    e352:	9b06      	ldr	r3, [sp, #24]
    e354:	463a      	mov	r2, r7
    e356:	6859      	ldr	r1, [r3, #4]
    e358:	4628      	mov	r0, r5
    e35a:	f7fd ff01 	bl	c160 <memcpy>
    e35e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e362:	429c      	cmp	r4, r3
    e364:	d005      	beq.n	e372 <attsProcReadTypeReq+0x1c8>
    e366:	3401      	adds	r4, #1
    e368:	b2a0      	uxth	r0, r4
    e36a:	9b05      	ldr	r3, [sp, #20]
    e36c:	4581      	cmp	r9, r0
    e36e:	441d      	add	r5, r3
    e370:	d29c      	bcs.n	e2ac <attsProcReadTypeReq+0x102>
    e372:	f8cd b00c 	str.w	fp, [sp, #12]
    e376:	e7bf      	b.n	e2f8 <attsProcReadTypeReq+0x14e>
    e378:	2304      	movs	r3, #4
    e37a:	e769      	b.n	e250 <attsProcReadTypeReq+0xa6>
    e37c:	2301      	movs	r3, #1
    e37e:	e767      	b.n	e250 <attsProcReadTypeReq+0xa6>
    e380:	230a      	movs	r3, #10
    e382:	e765      	b.n	e250 <attsProcReadTypeReq+0xa6>
    e384:	10003e0c 	.word	0x10003e0c

0000e388 <attsProcReadMultReq>:
    e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e38c:	4607      	mov	r7, r0
    e38e:	8b40      	ldrh	r0, [r0, #26]
    e390:	3008      	adds	r0, #8
    e392:	b087      	sub	sp, #28
    e394:	b280      	uxth	r0, r0
    e396:	460c      	mov	r4, r1
    e398:	4693      	mov	fp, r2
    e39a:	f7fe f935 	bl	c608 <attMsgAlloc>
    e39e:	4605      	mov	r5, r0
    e3a0:	2800      	cmp	r0, #0
    e3a2:	d060      	beq.n	e466 <attsProcReadMultReq+0xde>
    e3a4:	230f      	movs	r3, #15
    e3a6:	3408      	adds	r4, #8
    e3a8:	f10b 0909 	add.w	r9, fp, #9
    e3ac:	f100 0609 	add.w	r6, r0, #9
    e3b0:	7203      	strb	r3, [r0, #8]
    e3b2:	44a3      	add	fp, r4
    e3b4:	45d9      	cmp	r9, fp
    e3b6:	d309      	bcc.n	e3cc <attsProcReadMultReq+0x44>
    e3b8:	f105 0208 	add.w	r2, r5, #8
    e3bc:	1ab2      	subs	r2, r6, r2
    e3be:	462b      	mov	r3, r5
    e3c0:	b292      	uxth	r2, r2
    e3c2:	8b39      	ldrh	r1, [r7, #24]
    e3c4:	2004      	movs	r0, #4
    e3c6:	f002 f9fb 	bl	107c0 <L2cDataReq>
    e3ca:	e053      	b.n	e474 <attsProcReadMultReq+0xec>
    e3cc:	f899 3001 	ldrb.w	r3, [r9, #1]
    e3d0:	f819 4b02 	ldrb.w	r4, [r9], #2
    e3d4:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e3d8:	b2a4      	uxth	r4, r4
    e3da:	a905      	add	r1, sp, #20
    e3dc:	4620      	mov	r0, r4
    e3de:	f7ff fbeb 	bl	dbb8 <attsFindByHandle>
    e3e2:	4680      	mov	r8, r0
    e3e4:	2800      	cmp	r0, #0
    e3e6:	d048      	beq.n	e47a <attsProcReadMultReq+0xf2>
    e3e8:	7bc3      	ldrb	r3, [r0, #15]
    e3ea:	7f38      	ldrb	r0, [r7, #28]
    e3ec:	4622      	mov	r2, r4
    e3ee:	2101      	movs	r1, #1
    e3f0:	f7ff fc0e 	bl	dc10 <attsPermissions>
    e3f4:	4603      	mov	r3, r0
    e3f6:	2800      	cmp	r0, #0
    e3f8:	d140      	bne.n	e47c <attsProcReadMultReq+0xf4>
    e3fa:	f898 200e 	ldrb.w	r2, [r8, #14]
    e3fe:	0751      	lsls	r1, r2, #29
    e400:	d522      	bpl.n	e448 <attsProcReadMultReq+0xc0>
    e402:	9905      	ldr	r1, [sp, #20]
    e404:	f8d1 a008 	ldr.w	sl, [r1, #8]
    e408:	f1ba 0f00 	cmp.w	sl, #0
    e40c:	d01c      	beq.n	e448 <attsProcReadMultReq+0xc0>
    e40e:	7f38      	ldrb	r0, [r7, #28]
    e410:	f8cd 8000 	str.w	r8, [sp]
    e414:	220e      	movs	r2, #14
    e416:	4621      	mov	r1, r4
    e418:	47d0      	blx	sl
    e41a:	4603      	mov	r3, r0
    e41c:	bb70      	cbnz	r0, e47c <attsProcReadMultReq+0xf4>
    e41e:	8b7a      	ldrh	r2, [r7, #26]
    e420:	3208      	adds	r2, #8
    e422:	442a      	add	r2, r5
    e424:	42b2      	cmp	r2, r6
    e426:	d9c5      	bls.n	e3b4 <attsProcReadMultReq+0x2c>
    e428:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e42c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e430:	881c      	ldrh	r4, [r3, #0]
    e432:	1b92      	subs	r2, r2, r6
    e434:	b292      	uxth	r2, r2
    e436:	4294      	cmp	r4, r2
    e438:	bf28      	it	cs
    e43a:	4614      	movcs	r4, r2
    e43c:	4630      	mov	r0, r6
    e43e:	4622      	mov	r2, r4
    e440:	f7fd fe8e 	bl	c160 <memcpy>
    e444:	4426      	add	r6, r4
    e446:	e7b5      	b.n	e3b4 <attsProcReadMultReq+0x2c>
    e448:	0693      	lsls	r3, r2, #26
    e44a:	d5e8      	bpl.n	e41e <attsProcReadMultReq+0x96>
    e44c:	4b0e      	ldr	r3, [pc, #56]	; (e488 <attsProcReadMultReq+0x100>)
    e44e:	f8d3 a014 	ldr.w	sl, [r3, #20]
    e452:	f1ba 0f00 	cmp.w	sl, #0
    e456:	d0e2      	beq.n	e41e <attsProcReadMultReq+0x96>
    e458:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e45c:	7f38      	ldrb	r0, [r7, #28]
    e45e:	4622      	mov	r2, r4
    e460:	2105      	movs	r1, #5
    e462:	47d0      	blx	sl
    e464:	e7d9      	b.n	e41a <attsProcReadMultReq+0x92>
    e466:	2311      	movs	r3, #17
    e468:	4604      	mov	r4, r0
    e46a:	4622      	mov	r2, r4
    e46c:	210e      	movs	r1, #14
    e46e:	8b38      	ldrh	r0, [r7, #24]
    e470:	f7ff fa48 	bl	d904 <attsErrRsp>
    e474:	b007      	add	sp, #28
    e476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e47a:	2301      	movs	r3, #1
    e47c:	4628      	mov	r0, r5
    e47e:	9303      	str	r3, [sp, #12]
    e480:	f006 f8ce 	bl	14620 <WsfMsgFree>
    e484:	9b03      	ldr	r3, [sp, #12]
    e486:	e7f0      	b.n	e46a <attsProcReadMultReq+0xe2>
    e488:	10003e0c 	.word	0x10003e0c

0000e48c <attsProcReadGroupTypeReq>:
    e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e490:	b08f      	sub	sp, #60	; 0x3c
    e492:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e496:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    e49a:	7a57      	ldrb	r7, [r2, #9]
    e49c:	7a93      	ldrb	r3, [r2, #10]
    e49e:	3905      	subs	r1, #5
    e4a0:	fa5f fa81 	uxtb.w	sl, r1
    e4a4:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    e4a8:	f1ba 0f02 	cmp.w	sl, #2
    e4ac:	4681      	mov	r9, r0
    e4ae:	b2bf      	uxth	r7, r7
    e4b0:	d003      	beq.n	e4ba <attsProcReadGroupTypeReq+0x2e>
    e4b2:	f1ba 0f10 	cmp.w	sl, #16
    e4b6:	f040 80b6 	bne.w	e626 <attsProcReadGroupTypeReq+0x19a>
    e4ba:	2f00      	cmp	r7, #0
    e4bc:	f000 80b8 	beq.w	e630 <attsProcReadGroupTypeReq+0x1a4>
    e4c0:	7b11      	ldrb	r1, [r2, #12]
    e4c2:	7ad3      	ldrb	r3, [r2, #11]
    e4c4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e4c8:	b29b      	uxth	r3, r3
    e4ca:	429f      	cmp	r7, r3
    e4cc:	9303      	str	r3, [sp, #12]
    e4ce:	f200 80c7 	bhi.w	e660 <attsProcReadGroupTypeReq+0x1d4>
    e4d2:	f102 030d 	add.w	r3, r2, #13
    e4d6:	461a      	mov	r2, r3
    e4d8:	4651      	mov	r1, sl
    e4da:	a80b      	add	r0, sp, #44	; 0x2c
    e4dc:	9308      	str	r3, [sp, #32]
    e4de:	f7ff fb58 	bl	db92 <attsUuid16Cmp>
    e4e2:	2800      	cmp	r0, #0
    e4e4:	f000 80bf 	beq.w	e666 <attsProcReadGroupTypeReq+0x1da>
    e4e8:	ab0d      	add	r3, sp, #52	; 0x34
    e4ea:	9301      	str	r3, [sp, #4]
    e4ec:	ab0c      	add	r3, sp, #48	; 0x30
    e4ee:	9300      	str	r3, [sp, #0]
    e4f0:	4652      	mov	r2, sl
    e4f2:	9b08      	ldr	r3, [sp, #32]
    e4f4:	9903      	ldr	r1, [sp, #12]
    e4f6:	4638      	mov	r0, r7
    e4f8:	f7ff fcd8 	bl	deac <attsFindUuidInRange>
    e4fc:	4604      	mov	r4, r0
    e4fe:	2800      	cmp	r0, #0
    e500:	f000 80b4 	beq.w	e66c <attsProcReadGroupTypeReq+0x1e0>
    e504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e506:	4602      	mov	r2, r0
    e508:	7bdb      	ldrb	r3, [r3, #15]
    e50a:	f899 001c 	ldrb.w	r0, [r9, #28]
    e50e:	2101      	movs	r1, #1
    e510:	f7ff fb7e 	bl	dc10 <attsPermissions>
    e514:	4680      	mov	r8, r0
    e516:	2800      	cmp	r0, #0
    e518:	f040 80ab 	bne.w	e672 <attsProcReadGroupTypeReq+0x1e6>
    e51c:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    e520:	3008      	adds	r0, #8
    e522:	b280      	uxth	r0, r0
    e524:	f7fe f870 	bl	c608 <attMsgAlloc>
    e528:	2311      	movs	r3, #17
    e52a:	4605      	mov	r5, r0
    e52c:	2800      	cmp	r0, #0
    e52e:	f000 80a2 	beq.w	e676 <attsProcReadGroupTypeReq+0x1ea>
    e532:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    e536:	7203      	strb	r3, [r0, #8]
    e538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e53a:	f8b9 201a 	ldrh.w	r2, [r9, #26]
    e53e:	689b      	ldr	r3, [r3, #8]
    e540:	881b      	ldrh	r3, [r3, #0]
    e542:	7284      	strb	r4, [r0, #10]
    e544:	3a06      	subs	r2, #6
    e546:	4293      	cmp	r3, r2
    e548:	bf28      	it	cs
    e54a:	4613      	movcs	r3, r2
    e54c:	b2db      	uxtb	r3, r3
    e54e:	9304      	str	r3, [sp, #16]
    e550:	3304      	adds	r3, #4
    e552:	9305      	str	r3, [sp, #20]
    e554:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e558:	7243      	strb	r3, [r0, #9]
    e55a:	0a23      	lsrs	r3, r4, #8
    e55c:	72c3      	strb	r3, [r0, #11]
    e55e:	4620      	mov	r0, r4
    e560:	f7ff fcde 	bl	df20 <attsFindServiceGroupEnd>
    e564:	990c      	ldr	r1, [sp, #48]	; 0x30
    e566:	7328      	strb	r0, [r5, #12]
    e568:	0a02      	lsrs	r2, r0, #8
    e56a:	f105 030e 	add.w	r3, r5, #14
    e56e:	736a      	strb	r2, [r5, #13]
    e570:	4683      	mov	fp, r0
    e572:	9a04      	ldr	r2, [sp, #16]
    e574:	6849      	ldr	r1, [r1, #4]
    e576:	4618      	mov	r0, r3
    e578:	f7fd fdf2 	bl	c160 <memcpy>
    e57c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e580:	9206      	str	r2, [sp, #24]
    e582:	3e06      	subs	r6, #6
    e584:	1ab6      	subs	r6, r6, r2
    e586:	9b06      	ldr	r3, [sp, #24]
    e588:	b2b2      	uxth	r2, r6
    e58a:	9207      	str	r2, [sp, #28]
    e58c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
    e590:	9a05      	ldr	r2, [sp, #20]
    e592:	33fc      	adds	r3, #252	; 0xfc
    e594:	1886      	adds	r6, r0, r2
    e596:	9309      	str	r3, [sp, #36]	; 0x24
    e598:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e59c:	459b      	cmp	fp, r3
    e59e:	f1a6 0404 	sub.w	r4, r6, #4
    e5a2:	d049      	beq.n	e638 <attsProcReadGroupTypeReq+0x1ac>
    e5a4:	f10b 0001 	add.w	r0, fp, #1
    e5a8:	9b03      	ldr	r3, [sp, #12]
    e5aa:	b280      	uxth	r0, r0
    e5ac:	4283      	cmp	r3, r0
    e5ae:	d343      	bcc.n	e638 <attsProcReadGroupTypeReq+0x1ac>
    e5b0:	ab0d      	add	r3, sp, #52	; 0x34
    e5b2:	9301      	str	r3, [sp, #4]
    e5b4:	ab0c      	add	r3, sp, #48	; 0x30
    e5b6:	9300      	str	r3, [sp, #0]
    e5b8:	4652      	mov	r2, sl
    e5ba:	9b08      	ldr	r3, [sp, #32]
    e5bc:	9903      	ldr	r1, [sp, #12]
    e5be:	f7ff fc75 	bl	deac <attsFindUuidInRange>
    e5c2:	4683      	mov	fp, r0
    e5c4:	2800      	cmp	r0, #0
    e5c6:	d037      	beq.n	e638 <attsProcReadGroupTypeReq+0x1ac>
    e5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e5ca:	9906      	ldr	r1, [sp, #24]
    e5cc:	689a      	ldr	r2, [r3, #8]
    e5ce:	8812      	ldrh	r2, [r2, #0]
    e5d0:	428a      	cmp	r2, r1
    e5d2:	d131      	bne.n	e638 <attsProcReadGroupTypeReq+0x1ac>
    e5d4:	4602      	mov	r2, r0
    e5d6:	7bdb      	ldrb	r3, [r3, #15]
    e5d8:	f899 001c 	ldrb.w	r0, [r9, #28]
    e5dc:	2101      	movs	r1, #1
    e5de:	f7ff fb17 	bl	dc10 <attsPermissions>
    e5e2:	bb48      	cbnz	r0, e638 <attsProcReadGroupTypeReq+0x1ac>
    e5e4:	9b07      	ldr	r3, [sp, #28]
    e5e6:	9a05      	ldr	r2, [sp, #20]
    e5e8:	4293      	cmp	r3, r2
    e5ea:	d347      	bcc.n	e67c <attsProcReadGroupTypeReq+0x1f0>
    e5ec:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e5f0:	f806 bc04 	strb.w	fp, [r6, #-4]
    e5f4:	f806 3c03 	strb.w	r3, [r6, #-3]
    e5f8:	4658      	mov	r0, fp
    e5fa:	f7ff fc91 	bl	df20 <attsFindServiceGroupEnd>
    e5fe:	0a03      	lsrs	r3, r0, #8
    e600:	f806 0c02 	strb.w	r0, [r6, #-2]
    e604:	f806 3c01 	strb.w	r3, [r6, #-1]
    e608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e60a:	9a04      	ldr	r2, [sp, #16]
    e60c:	6859      	ldr	r1, [r3, #4]
    e60e:	4683      	mov	fp, r0
    e610:	4630      	mov	r0, r6
    e612:	f7fd fda5 	bl	c160 <memcpy>
    e616:	9b07      	ldr	r3, [sp, #28]
    e618:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e61a:	4413      	add	r3, r2
    e61c:	b29b      	uxth	r3, r3
    e61e:	9307      	str	r3, [sp, #28]
    e620:	9b05      	ldr	r3, [sp, #20]
    e622:	441e      	add	r6, r3
    e624:	e7b8      	b.n	e598 <attsProcReadGroupTypeReq+0x10c>
    e626:	f04f 0804 	mov.w	r8, #4
    e62a:	2400      	movs	r4, #0
    e62c:	4625      	mov	r5, r4
    e62e:	e003      	b.n	e638 <attsProcReadGroupTypeReq+0x1ac>
    e630:	f04f 0801 	mov.w	r8, #1
    e634:	463c      	mov	r4, r7
    e636:	463d      	mov	r5, r7
    e638:	4648      	mov	r0, r9
    e63a:	f7ff f9e1 	bl	da00 <attsDiscBusy>
    e63e:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    e642:	f1b8 0f00 	cmp.w	r8, #0
    e646:	d11b      	bne.n	e680 <attsProcReadGroupTypeReq+0x1f4>
    e648:	f105 0208 	add.w	r2, r5, #8
    e64c:	1aa2      	subs	r2, r4, r2
    e64e:	4601      	mov	r1, r0
    e650:	462b      	mov	r3, r5
    e652:	b292      	uxth	r2, r2
    e654:	2004      	movs	r0, #4
    e656:	f002 f8b3 	bl	107c0 <L2cDataReq>
    e65a:	b00f      	add	sp, #60	; 0x3c
    e65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e660:	f04f 0801 	mov.w	r8, #1
    e664:	e7e1      	b.n	e62a <attsProcReadGroupTypeReq+0x19e>
    e666:	f04f 0810 	mov.w	r8, #16
    e66a:	e7de      	b.n	e62a <attsProcReadGroupTypeReq+0x19e>
    e66c:	f04f 080a 	mov.w	r8, #10
    e670:	e7dc      	b.n	e62c <attsProcReadGroupTypeReq+0x1a0>
    e672:	4627      	mov	r7, r4
    e674:	e7d9      	b.n	e62a <attsProcReadGroupTypeReq+0x19e>
    e676:	4604      	mov	r4, r0
    e678:	4698      	mov	r8, r3
    e67a:	e7dd      	b.n	e638 <attsProcReadGroupTypeReq+0x1ac>
    e67c:	4680      	mov	r8, r0
    e67e:	e7db      	b.n	e638 <attsProcReadGroupTypeReq+0x1ac>
    e680:	4643      	mov	r3, r8
    e682:	463a      	mov	r2, r7
    e684:	2110      	movs	r1, #16
    e686:	f7ff f93d 	bl	d904 <attsErrRsp>
    e68a:	e7e6      	b.n	e65a <attsProcReadGroupTypeReq+0x1ce>

0000e68c <attsProcWrite>:
    e68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e690:	7a93      	ldrb	r3, [r2, #10]
    e692:	7a54      	ldrb	r4, [r2, #9]
    e694:	f892 9008 	ldrb.w	r9, [r2, #8]
    e698:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e69c:	b087      	sub	sp, #28
    e69e:	b2a4      	uxth	r4, r4
    e6a0:	4680      	mov	r8, r0
    e6a2:	460d      	mov	r5, r1
    e6a4:	4620      	mov	r0, r4
    e6a6:	a905      	add	r1, sp, #20
    e6a8:	4617      	mov	r7, r2
    e6aa:	f7ff fa85 	bl	dbb8 <attsFindByHandle>
    e6ae:	4606      	mov	r6, r0
    e6b0:	2800      	cmp	r0, #0
    e6b2:	d057      	beq.n	e764 <attsProcWrite+0xd8>
    e6b4:	7bc3      	ldrb	r3, [r0, #15]
    e6b6:	f898 001c 	ldrb.w	r0, [r8, #28]
    e6ba:	4622      	mov	r2, r4
    e6bc:	2110      	movs	r1, #16
    e6be:	f7ff faa7 	bl	dc10 <attsPermissions>
    e6c2:	b9c0      	cbnz	r0, e6f6 <attsProcWrite+0x6a>
    e6c4:	7bb2      	ldrb	r2, [r6, #14]
    e6c6:	89b3      	ldrh	r3, [r6, #12]
    e6c8:	3d03      	subs	r5, #3
    e6ca:	0710      	lsls	r0, r2, #28
    e6cc:	b2ad      	uxth	r5, r5
    e6ce:	d41d      	bmi.n	e70c <attsProcWrite+0x80>
    e6d0:	429d      	cmp	r5, r3
    e6d2:	d11d      	bne.n	e710 <attsProcWrite+0x84>
    e6d4:	0791      	lsls	r1, r2, #30
    e6d6:	f107 030b 	add.w	r3, r7, #11
    e6da:	d51b      	bpl.n	e714 <attsProcWrite+0x88>
    e6dc:	9905      	ldr	r1, [sp, #20]
    e6de:	68cf      	ldr	r7, [r1, #12]
    e6e0:	b1c7      	cbz	r7, e714 <attsProcWrite+0x88>
    e6e2:	e9cd 3601 	strd	r3, r6, [sp, #4]
    e6e6:	f898 001c 	ldrb.w	r0, [r8, #28]
    e6ea:	9500      	str	r5, [sp, #0]
    e6ec:	2300      	movs	r3, #0
    e6ee:	464a      	mov	r2, r9
    e6f0:	4621      	mov	r1, r4
    e6f2:	47b8      	blx	r7
    e6f4:	b318      	cbz	r0, e73e <attsProcWrite+0xb2>
    e6f6:	f1b9 0f12 	cmp.w	r9, #18
    e6fa:	d130      	bne.n	e75e <attsProcWrite+0xd2>
    e6fc:	4603      	mov	r3, r0
    e6fe:	4622      	mov	r2, r4
    e700:	4649      	mov	r1, r9
    e702:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    e706:	f7ff f8fd 	bl	d904 <attsErrRsp>
    e70a:	e028      	b.n	e75e <attsProcWrite+0xd2>
    e70c:	429d      	cmp	r5, r3
    e70e:	d9e1      	bls.n	e6d4 <attsProcWrite+0x48>
    e710:	200d      	movs	r0, #13
    e712:	e7f0      	b.n	e6f6 <attsProcWrite+0x6a>
    e714:	0692      	lsls	r2, r2, #26
    e716:	d508      	bpl.n	e72a <attsProcWrite+0x9e>
    e718:	4a13      	ldr	r2, [pc, #76]	; (e768 <attsProcWrite+0xdc>)
    e71a:	6957      	ldr	r7, [r2, #20]
    e71c:	b12f      	cbz	r7, e72a <attsProcWrite+0x9e>
    e71e:	4622      	mov	r2, r4
    e720:	2109      	movs	r1, #9
    e722:	f898 001c 	ldrb.w	r0, [r8, #28]
    e726:	47b8      	blx	r7
    e728:	e7e4      	b.n	e6f4 <attsProcWrite+0x68>
    e72a:	4619      	mov	r1, r3
    e72c:	462a      	mov	r2, r5
    e72e:	6870      	ldr	r0, [r6, #4]
    e730:	f7fd fd16 	bl	c160 <memcpy>
    e734:	7bb3      	ldrb	r3, [r6, #14]
    e736:	071b      	lsls	r3, r3, #28
    e738:	d501      	bpl.n	e73e <attsProcWrite+0xb2>
    e73a:	68b3      	ldr	r3, [r6, #8]
    e73c:	801d      	strh	r5, [r3, #0]
    e73e:	f1b9 0f12 	cmp.w	r9, #18
    e742:	d10c      	bne.n	e75e <attsProcWrite+0xd2>
    e744:	2009      	movs	r0, #9
    e746:	f7fd ff5f 	bl	c608 <attMsgAlloc>
    e74a:	4603      	mov	r3, r0
    e74c:	b138      	cbz	r0, e75e <attsProcWrite+0xd2>
    e74e:	2213      	movs	r2, #19
    e750:	7202      	strb	r2, [r0, #8]
    e752:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    e756:	2201      	movs	r2, #1
    e758:	2004      	movs	r0, #4
    e75a:	f002 f831 	bl	107c0 <L2cDataReq>
    e75e:	b007      	add	sp, #28
    e760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e764:	2001      	movs	r0, #1
    e766:	e7c6      	b.n	e6f6 <attsProcWrite+0x6a>
    e768:	10003e0c 	.word	0x10003e0c

0000e76c <attsProcPrepWriteReq>:
    e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e770:	7a93      	ldrb	r3, [r2, #10]
    e772:	7a54      	ldrb	r4, [r2, #9]
    e774:	7ad5      	ldrb	r5, [r2, #11]
    e776:	7b16      	ldrb	r6, [r2, #12]
    e778:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e77c:	b089      	sub	sp, #36	; 0x24
    e77e:	b2a4      	uxth	r4, r4
    e780:	4607      	mov	r7, r0
    e782:	468a      	mov	sl, r1
    e784:	4620      	mov	r0, r4
    e786:	a907      	add	r1, sp, #28
    e788:	4693      	mov	fp, r2
    e78a:	f7ff fa15 	bl	dbb8 <attsFindByHandle>
    e78e:	4680      	mov	r8, r0
    e790:	2800      	cmp	r0, #0
    e792:	d079      	beq.n	e888 <attsProcPrepWriteReq+0x11c>
    e794:	7bc3      	ldrb	r3, [r0, #15]
    e796:	7f38      	ldrb	r0, [r7, #28]
    e798:	4622      	mov	r2, r4
    e79a:	2110      	movs	r1, #16
    e79c:	f7ff fa38 	bl	dc10 <attsPermissions>
    e7a0:	2800      	cmp	r0, #0
    e7a2:	d153      	bne.n	e84c <attsProcPrepWriteReq+0xe0>
    e7a4:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    e7a8:	b2ab      	uxth	r3, r5
    e7aa:	9305      	str	r3, [sp, #20]
    e7ac:	9a05      	ldr	r2, [sp, #20]
    e7ae:	f898 300e 	ldrb.w	r3, [r8, #14]
    e7b2:	b10a      	cbz	r2, e7b8 <attsProcPrepWriteReq+0x4c>
    e7b4:	06d9      	lsls	r1, r3, #27
    e7b6:	d569      	bpl.n	e88c <attsProcPrepWriteReq+0x120>
    e7b8:	f1aa 0605 	sub.w	r6, sl, #5
    e7bc:	071a      	lsls	r2, r3, #28
    e7be:	b2b6      	uxth	r6, r6
    e7c0:	d403      	bmi.n	e7ca <attsProcPrepWriteReq+0x5e>
    e7c2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    e7c6:	42b3      	cmp	r3, r6
    e7c8:	d162      	bne.n	e890 <attsProcPrepWriteReq+0x124>
    e7ca:	4638      	mov	r0, r7
    e7cc:	f006 f827 	bl	1481e <WsfQueueCount>
    e7d0:	4b32      	ldr	r3, [pc, #200]	; (e89c <attsProcPrepWriteReq+0x130>)
    e7d2:	681b      	ldr	r3, [r3, #0]
    e7d4:	79db      	ldrb	r3, [r3, #7]
    e7d6:	4283      	cmp	r3, r0
    e7d8:	d95c      	bls.n	e894 <attsProcPrepWriteReq+0x128>
    e7da:	f10a 0006 	add.w	r0, sl, #6
    e7de:	b280      	uxth	r0, r0
    e7e0:	f005 fe78 	bl	144d4 <WsfBufAlloc>
    e7e4:	4681      	mov	r9, r0
    e7e6:	2800      	cmp	r0, #0
    e7e8:	d056      	beq.n	e898 <attsProcPrepWriteReq+0x12c>
    e7ea:	f898 300e 	ldrb.w	r3, [r8, #14]
    e7ee:	079b      	lsls	r3, r3, #30
    e7f0:	f10b 0b0d 	add.w	fp, fp, #13
    e7f4:	d41b      	bmi.n	e82e <attsProcPrepWriteReq+0xc2>
    e7f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e7fa:	f8a9 3008 	strh.w	r3, [r9, #8]
    e7fe:	4632      	mov	r2, r6
    e800:	4659      	mov	r1, fp
    e802:	f8a9 6004 	strh.w	r6, [r9, #4]
    e806:	f8a9 4006 	strh.w	r4, [r9, #6]
    e80a:	f109 000a 	add.w	r0, r9, #10
    e80e:	f7fd fca7 	bl	c160 <memcpy>
    e812:	4649      	mov	r1, r9
    e814:	4638      	mov	r0, r7
    e816:	f005 ff55 	bl	146c4 <WsfQueueEnq>
    e81a:	f10a 0008 	add.w	r0, sl, #8
    e81e:	b280      	uxth	r0, r0
    e820:	f7fd fef2 	bl	c608 <attMsgAlloc>
    e824:	4680      	mov	r8, r0
    e826:	b9c0      	cbnz	r0, e85a <attsProcPrepWriteReq+0xee>
    e828:	b009      	add	sp, #36	; 0x24
    e82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e82e:	9b07      	ldr	r3, [sp, #28]
    e830:	68db      	ldr	r3, [r3, #12]
    e832:	461d      	mov	r5, r3
    e834:	2b00      	cmp	r3, #0
    e836:	d0de      	beq.n	e7f6 <attsProcPrepWriteReq+0x8a>
    e838:	7f38      	ldrb	r0, [r7, #28]
    e83a:	9600      	str	r6, [sp, #0]
    e83c:	e9cd b801 	strd	fp, r8, [sp, #4]
    e840:	2300      	movs	r3, #0
    e842:	2216      	movs	r2, #22
    e844:	4621      	mov	r1, r4
    e846:	47a8      	blx	r5
    e848:	2800      	cmp	r0, #0
    e84a:	d0d4      	beq.n	e7f6 <attsProcPrepWriteReq+0x8a>
    e84c:	4603      	mov	r3, r0
    e84e:	4622      	mov	r2, r4
    e850:	2116      	movs	r1, #22
    e852:	8b38      	ldrh	r0, [r7, #24]
    e854:	f7ff f856 	bl	d904 <attsErrRsp>
    e858:	e7e6      	b.n	e828 <attsProcPrepWriteReq+0xbc>
    e85a:	2317      	movs	r3, #23
    e85c:	7203      	strb	r3, [r0, #8]
    e85e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e862:	72c3      	strb	r3, [r0, #11]
    e864:	9b05      	ldr	r3, [sp, #20]
    e866:	7244      	strb	r4, [r0, #9]
    e868:	0a1d      	lsrs	r5, r3, #8
    e86a:	0a24      	lsrs	r4, r4, #8
    e86c:	7284      	strb	r4, [r0, #10]
    e86e:	7305      	strb	r5, [r0, #12]
    e870:	4632      	mov	r2, r6
    e872:	4659      	mov	r1, fp
    e874:	300d      	adds	r0, #13
    e876:	f7fd fc73 	bl	c160 <memcpy>
    e87a:	4643      	mov	r3, r8
    e87c:	4652      	mov	r2, sl
    e87e:	8b39      	ldrh	r1, [r7, #24]
    e880:	2004      	movs	r0, #4
    e882:	f001 ff9d 	bl	107c0 <L2cDataReq>
    e886:	e7cf      	b.n	e828 <attsProcPrepWriteReq+0xbc>
    e888:	2001      	movs	r0, #1
    e88a:	e7df      	b.n	e84c <attsProcPrepWriteReq+0xe0>
    e88c:	200b      	movs	r0, #11
    e88e:	e7dd      	b.n	e84c <attsProcPrepWriteReq+0xe0>
    e890:	200d      	movs	r0, #13
    e892:	e7db      	b.n	e84c <attsProcPrepWriteReq+0xe0>
    e894:	2009      	movs	r0, #9
    e896:	e7d9      	b.n	e84c <attsProcPrepWriteReq+0xe0>
    e898:	2011      	movs	r0, #17
    e89a:	e7d7      	b.n	e84c <attsProcPrepWriteReq+0xe0>
    e89c:	10002bd0 	.word	0x10002bd0

0000e8a0 <attsProcExecWriteReq>:
    e8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8a4:	7a53      	ldrb	r3, [r2, #9]
    e8a6:	b086      	sub	sp, #24
    e8a8:	4606      	mov	r6, r0
    e8aa:	b973      	cbnz	r3, e8ca <attsProcExecWriteReq+0x2a>
    e8ac:	f7ff f882 	bl	d9b4 <attsClearPrepWrites>
    e8b0:	2009      	movs	r0, #9
    e8b2:	f7fd fea9 	bl	c608 <attMsgAlloc>
    e8b6:	4603      	mov	r3, r0
    e8b8:	b360      	cbz	r0, e914 <attsProcExecWriteReq+0x74>
    e8ba:	2219      	movs	r2, #25
    e8bc:	7202      	strb	r2, [r0, #8]
    e8be:	8b31      	ldrh	r1, [r6, #24]
    e8c0:	2201      	movs	r2, #1
    e8c2:	2004      	movs	r0, #4
    e8c4:	f001 ff7c 	bl	107c0 <L2cDataReq>
    e8c8:	e024      	b.n	e914 <attsProcExecWriteReq+0x74>
    e8ca:	2b01      	cmp	r3, #1
    e8cc:	d16e      	bne.n	e9ac <attsProcExecWriteReq+0x10c>
    e8ce:	6804      	ldr	r4, [r0, #0]
    e8d0:	b94c      	cbnz	r4, e8e6 <attsProcExecWriteReq+0x46>
    e8d2:	f8df 80dc 	ldr.w	r8, [pc, #220]	; e9b0 <attsProcExecWriteReq+0x110>
    e8d6:	4630      	mov	r0, r6
    e8d8:	f005 ff16 	bl	14708 <WsfQueueDeq>
    e8dc:	4605      	mov	r5, r0
    e8de:	bb00      	cbnz	r0, e922 <attsProcExecWriteReq+0x82>
    e8e0:	2c00      	cmp	r4, #0
    e8e2:	d0e5      	beq.n	e8b0 <attsProcExecWriteReq+0x10>
    e8e4:	e010      	b.n	e908 <attsProcExecWriteReq+0x68>
    e8e6:	a904      	add	r1, sp, #16
    e8e8:	88e0      	ldrh	r0, [r4, #6]
    e8ea:	f7ff f965 	bl	dbb8 <attsFindByHandle>
    e8ee:	b1b0      	cbz	r0, e91e <attsProcExecWriteReq+0x7e>
    e8f0:	8921      	ldrh	r1, [r4, #8]
    e8f2:	8982      	ldrh	r2, [r0, #12]
    e8f4:	4291      	cmp	r1, r2
    e8f6:	d810      	bhi.n	e91a <attsProcExecWriteReq+0x7a>
    e8f8:	88a3      	ldrh	r3, [r4, #4]
    e8fa:	440b      	add	r3, r1
    e8fc:	4293      	cmp	r3, r2
    e8fe:	dd0e      	ble.n	e91e <attsProcExecWriteReq+0x7e>
    e900:	240d      	movs	r4, #13
    e902:	4630      	mov	r0, r6
    e904:	f7ff f856 	bl	d9b4 <attsClearPrepWrites>
    e908:	4623      	mov	r3, r4
    e90a:	2200      	movs	r2, #0
    e90c:	2118      	movs	r1, #24
    e90e:	8b30      	ldrh	r0, [r6, #24]
    e910:	f7fe fff8 	bl	d904 <attsErrRsp>
    e914:	b006      	add	sp, #24
    e916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e91a:	2407      	movs	r4, #7
    e91c:	e7f1      	b.n	e902 <attsProcExecWriteReq+0x62>
    e91e:	6824      	ldr	r4, [r4, #0]
    e920:	e7d6      	b.n	e8d0 <attsProcExecWriteReq+0x30>
    e922:	a905      	add	r1, sp, #20
    e924:	88e8      	ldrh	r0, [r5, #6]
    e926:	f7ff f947 	bl	dbb8 <attsFindByHandle>
    e92a:	4607      	mov	r7, r0
    e92c:	b920      	cbnz	r0, e938 <attsProcExecWriteReq+0x98>
    e92e:	240e      	movs	r4, #14
    e930:	4630      	mov	r0, r6
    e932:	f7ff f83f 	bl	d9b4 <attsClearPrepWrites>
    e936:	e017      	b.n	e968 <attsProcExecWriteReq+0xc8>
    e938:	7bc3      	ldrb	r3, [r0, #15]
    e93a:	06d8      	lsls	r0, r3, #27
    e93c:	d534      	bpl.n	e9a8 <attsProcExecWriteReq+0x108>
    e93e:	7bba      	ldrb	r2, [r7, #14]
    e940:	0791      	lsls	r1, r2, #30
    e942:	f105 030a 	add.w	r3, r5, #10
    e946:	d513      	bpl.n	e970 <attsProcExecWriteReq+0xd0>
    e948:	9905      	ldr	r1, [sp, #20]
    e94a:	68cc      	ldr	r4, [r1, #12]
    e94c:	b184      	cbz	r4, e970 <attsProcExecWriteReq+0xd0>
    e94e:	892a      	ldrh	r2, [r5, #8]
    e950:	88e9      	ldrh	r1, [r5, #6]
    e952:	7f30      	ldrb	r0, [r6, #28]
    e954:	e9cd 3701 	strd	r3, r7, [sp, #4]
    e958:	88ab      	ldrh	r3, [r5, #4]
    e95a:	9300      	str	r3, [sp, #0]
    e95c:	4613      	mov	r3, r2
    e95e:	2218      	movs	r2, #24
    e960:	47a0      	blx	r4
    e962:	4604      	mov	r4, r0
    e964:	2800      	cmp	r0, #0
    e966:	d1e3      	bne.n	e930 <attsProcExecWriteReq+0x90>
    e968:	4628      	mov	r0, r5
    e96a:	f005 fdf3 	bl	14554 <WsfBufFree>
    e96e:	e7b2      	b.n	e8d6 <attsProcExecWriteReq+0x36>
    e970:	0692      	lsls	r2, r2, #26
    e972:	d507      	bpl.n	e984 <attsProcExecWriteReq+0xe4>
    e974:	f8d8 4014 	ldr.w	r4, [r8, #20]
    e978:	b124      	cbz	r4, e984 <attsProcExecWriteReq+0xe4>
    e97a:	88ea      	ldrh	r2, [r5, #6]
    e97c:	7f30      	ldrb	r0, [r6, #28]
    e97e:	2109      	movs	r1, #9
    e980:	47a0      	blx	r4
    e982:	e7ee      	b.n	e962 <attsProcExecWriteReq+0xc2>
    e984:	892c      	ldrh	r4, [r5, #8]
    e986:	6878      	ldr	r0, [r7, #4]
    e988:	88aa      	ldrh	r2, [r5, #4]
    e98a:	4420      	add	r0, r4
    e98c:	4619      	mov	r1, r3
    e98e:	f7fd fbe7 	bl	c160 <memcpy>
    e992:	7bbc      	ldrb	r4, [r7, #14]
    e994:	f014 0408 	ands.w	r4, r4, #8
    e998:	d0e6      	beq.n	e968 <attsProcExecWriteReq+0xc8>
    e99a:	88ab      	ldrh	r3, [r5, #4]
    e99c:	8929      	ldrh	r1, [r5, #8]
    e99e:	68ba      	ldr	r2, [r7, #8]
    e9a0:	440b      	add	r3, r1
    e9a2:	8013      	strh	r3, [r2, #0]
    e9a4:	2400      	movs	r4, #0
    e9a6:	e7df      	b.n	e968 <attsProcExecWriteReq+0xc8>
    e9a8:	2403      	movs	r4, #3
    e9aa:	e7c1      	b.n	e930 <attsProcExecWriteReq+0x90>
    e9ac:	2404      	movs	r4, #4
    e9ae:	e7ab      	b.n	e908 <attsProcExecWriteReq+0x68>
    e9b0:	10003e0c 	.word	0x10003e0c

0000e9b4 <dmAdvCbInit>:
    e9b4:	4b0b      	ldr	r3, [pc, #44]	; (e9e4 <dmAdvCbInit+0x30>)
    e9b6:	181a      	adds	r2, r3, r0
    e9b8:	21ff      	movs	r1, #255	; 0xff
    e9ba:	b510      	push	{r4, lr}
    e9bc:	7511      	strb	r1, [r2, #20]
    e9be:	f100 0108 	add.w	r1, r0, #8
    e9c2:	f44f 64c8 	mov.w	r4, #1600	; 0x640
    e9c6:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
    e9ca:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    e9ce:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    e9d2:	8059      	strh	r1, [r3, #2]
    e9d4:	2307      	movs	r3, #7
    e9d6:	7553      	strb	r3, [r2, #21]
    e9d8:	4b03      	ldr	r3, [pc, #12]	; (e9e8 <dmAdvCbInit+0x34>)
    e9da:	4418      	add	r0, r3
    e9dc:	2300      	movs	r3, #0
    e9de:	7443      	strb	r3, [r0, #17]
    e9e0:	75d3      	strb	r3, [r2, #23]
    e9e2:	bd10      	pop	{r4, pc}
    e9e4:	10003e24 	.word	0x10003e24
    e9e8:	10003fec 	.word	0x10003fec

0000e9ec <dmAdvInit>:
    e9ec:	b508      	push	{r3, lr}
    e9ee:	2000      	movs	r0, #0
    e9f0:	f7ff ffe0 	bl	e9b4 <dmAdvCbInit>
    e9f4:	4b03      	ldr	r3, [pc, #12]	; (ea04 <dmAdvInit+0x18>)
    e9f6:	4a04      	ldr	r2, [pc, #16]	; (ea08 <dmAdvInit+0x1c>)
    e9f8:	7b19      	ldrb	r1, [r3, #12]
    e9fa:	7211      	strb	r1, [r2, #8]
    e9fc:	2200      	movs	r2, #0
    e9fe:	739a      	strb	r2, [r3, #14]
    ea00:	bd08      	pop	{r3, pc}
    ea02:	bf00      	nop
    ea04:	10003fec 	.word	0x10003fec
    ea08:	10003e24 	.word	0x10003e24

0000ea0c <DmAdvConfig>:
    ea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea10:	4607      	mov	r7, r0
    ea12:	200e      	movs	r0, #14
    ea14:	4688      	mov	r8, r1
    ea16:	4616      	mov	r6, r2
    ea18:	461d      	mov	r5, r3
    ea1a:	f005 fdea 	bl	145f2 <WsfMsgAlloc>
    ea1e:	4604      	mov	r4, r0
    ea20:	b180      	cbz	r0, ea44 <DmAdvConfig+0x38>
    ea22:	2300      	movs	r3, #0
    ea24:	7083      	strb	r3, [r0, #2]
    ea26:	f880 8005 	strb.w	r8, [r0, #5]
    ea2a:	7107      	strb	r7, [r0, #4]
    ea2c:	7186      	strb	r6, [r0, #6]
    ea2e:	4629      	mov	r1, r5
    ea30:	3007      	adds	r0, #7
    ea32:	f005 f931 	bl	13c98 <BdaCpy>
    ea36:	4b04      	ldr	r3, [pc, #16]	; (ea48 <DmAdvConfig+0x3c>)
    ea38:	4621      	mov	r1, r4
    ea3a:	7b18      	ldrb	r0, [r3, #12]
    ea3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea40:	f005 bdfb 	b.w	1463a <WsfMsgSend>
    ea44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea48:	10003fec 	.word	0x10003fec

0000ea4c <DmAdvSetData>:
    ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea50:	4680      	mov	r8, r0
    ea52:	200c      	movs	r0, #12
    ea54:	460f      	mov	r7, r1
    ea56:	4616      	mov	r6, r2
    ea58:	461d      	mov	r5, r3
    ea5a:	9c06      	ldr	r4, [sp, #24]
    ea5c:	f005 fdc9 	bl	145f2 <WsfMsgAlloc>
    ea60:	b170      	cbz	r0, ea80 <DmAdvSetData+0x34>
    ea62:	2301      	movs	r3, #1
    ea64:	7083      	strb	r3, [r0, #2]
    ea66:	4b07      	ldr	r3, [pc, #28]	; (ea84 <DmAdvSetData+0x38>)
    ea68:	f880 8004 	strb.w	r8, [r0, #4]
    ea6c:	7147      	strb	r7, [r0, #5]
    ea6e:	7186      	strb	r6, [r0, #6]
    ea70:	71c5      	strb	r5, [r0, #7]
    ea72:	6084      	str	r4, [r0, #8]
    ea74:	4601      	mov	r1, r0
    ea76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea7a:	7b18      	ldrb	r0, [r3, #12]
    ea7c:	f005 bddd 	b.w	1463a <WsfMsgSend>
    ea80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea84:	10003fec 	.word	0x10003fec

0000ea88 <DmAdvStart>:
    ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea8a:	4604      	mov	r4, r0
    ea8c:	200a      	movs	r0, #10
    ea8e:	460f      	mov	r7, r1
    ea90:	4616      	mov	r6, r2
    ea92:	461d      	mov	r5, r3
    ea94:	f005 fdad 	bl	145f2 <WsfMsgAlloc>
    ea98:	b180      	cbz	r0, eabc <DmAdvStart+0x34>
    ea9a:	2302      	movs	r3, #2
    ea9c:	7083      	strb	r3, [r0, #2]
    ea9e:	7104      	strb	r4, [r0, #4]
    eaa0:	b12c      	cbz	r4, eaae <DmAdvStart+0x26>
    eaa2:	783b      	ldrb	r3, [r7, #0]
    eaa4:	7143      	strb	r3, [r0, #5]
    eaa6:	8833      	ldrh	r3, [r6, #0]
    eaa8:	80c3      	strh	r3, [r0, #6]
    eaaa:	782b      	ldrb	r3, [r5, #0]
    eaac:	7203      	strb	r3, [r0, #8]
    eaae:	4b04      	ldr	r3, [pc, #16]	; (eac0 <DmAdvStart+0x38>)
    eab0:	4601      	mov	r1, r0
    eab2:	7b18      	ldrb	r0, [r3, #12]
    eab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eab8:	f005 bdbf 	b.w	1463a <WsfMsgSend>
    eabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eabe:	bf00      	nop
    eac0:	10003fec 	.word	0x10003fec

0000eac4 <DmAdvStop>:
    eac4:	b538      	push	{r3, r4, r5, lr}
    eac6:	4604      	mov	r4, r0
    eac8:	2006      	movs	r0, #6
    eaca:	460d      	mov	r5, r1
    eacc:	f005 fd91 	bl	145f2 <WsfMsgAlloc>
    ead0:	b1a0      	cbz	r0, eafc <DmAdvStop+0x38>
    ead2:	2303      	movs	r3, #3
    ead4:	7104      	strb	r4, [r0, #4]
    ead6:	3405      	adds	r4, #5
    ead8:	7083      	strb	r3, [r0, #2]
    eada:	1e69      	subs	r1, r5, #1
    eadc:	1d43      	adds	r3, r0, #5
    eade:	4404      	add	r4, r0
    eae0:	42a3      	cmp	r3, r4
    eae2:	d106      	bne.n	eaf2 <DmAdvStop+0x2e>
    eae4:	4b06      	ldr	r3, [pc, #24]	; (eb00 <DmAdvStop+0x3c>)
    eae6:	4601      	mov	r1, r0
    eae8:	7b18      	ldrb	r0, [r3, #12]
    eaea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    eaee:	f005 bda4 	b.w	1463a <WsfMsgSend>
    eaf2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    eaf6:	f803 2b01 	strb.w	r2, [r3], #1
    eafa:	e7f1      	b.n	eae0 <DmAdvStop+0x1c>
    eafc:	bd38      	pop	{r3, r4, r5, pc}
    eafe:	bf00      	nop
    eb00:	10003fec 	.word	0x10003fec

0000eb04 <DmAdvRemoveAdvSet>:
    eb04:	b510      	push	{r4, lr}
    eb06:	4604      	mov	r4, r0
    eb08:	2006      	movs	r0, #6
    eb0a:	f005 fd72 	bl	145f2 <WsfMsgAlloc>
    eb0e:	4601      	mov	r1, r0
    eb10:	b140      	cbz	r0, eb24 <DmAdvRemoveAdvSet+0x20>
    eb12:	2304      	movs	r3, #4
    eb14:	7083      	strb	r3, [r0, #2]
    eb16:	4b04      	ldr	r3, [pc, #16]	; (eb28 <DmAdvRemoveAdvSet+0x24>)
    eb18:	7104      	strb	r4, [r0, #4]
    eb1a:	7b18      	ldrb	r0, [r3, #12]
    eb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb20:	f005 bd8b 	b.w	1463a <WsfMsgSend>
    eb24:	bd10      	pop	{r4, pc}
    eb26:	bf00      	nop
    eb28:	10003fec 	.word	0x10003fec

0000eb2c <DmAdvClearAdvSets>:
    eb2c:	b508      	push	{r3, lr}
    eb2e:	2004      	movs	r0, #4
    eb30:	f005 fd5f 	bl	145f2 <WsfMsgAlloc>
    eb34:	4601      	mov	r1, r0
    eb36:	b138      	cbz	r0, eb48 <DmAdvClearAdvSets+0x1c>
    eb38:	2305      	movs	r3, #5
    eb3a:	7083      	strb	r3, [r0, #2]
    eb3c:	4b03      	ldr	r3, [pc, #12]	; (eb4c <DmAdvClearAdvSets+0x20>)
    eb3e:	7b18      	ldrb	r0, [r3, #12]
    eb40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    eb44:	f005 bd79 	b.w	1463a <WsfMsgSend>
    eb48:	bd08      	pop	{r3, pc}
    eb4a:	bf00      	nop
    eb4c:	10003fec 	.word	0x10003fec

0000eb50 <DmAdvSetInterval>:
    eb50:	b570      	push	{r4, r5, r6, lr}
    eb52:	4604      	mov	r4, r0
    eb54:	460e      	mov	r6, r1
    eb56:	4615      	mov	r5, r2
    eb58:	f006 fe88 	bl	1586c <WsfTaskLock>
    eb5c:	f104 0008 	add.w	r0, r4, #8
    eb60:	4b04      	ldr	r3, [pc, #16]	; (eb74 <DmAdvSetInterval+0x24>)
    eb62:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    eb66:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    eb6a:	805d      	strh	r5, [r3, #2]
    eb6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eb70:	f006 be82 	b.w	15878 <WsfTaskUnlock>
    eb74:	10003e24 	.word	0x10003e24

0000eb78 <DmAdvSetChannelMap>:
    eb78:	b538      	push	{r3, r4, r5, lr}
    eb7a:	4605      	mov	r5, r0
    eb7c:	460c      	mov	r4, r1
    eb7e:	f006 fe75 	bl	1586c <WsfTaskLock>
    eb82:	4803      	ldr	r0, [pc, #12]	; (eb90 <DmAdvSetChannelMap+0x18>)
    eb84:	4428      	add	r0, r5
    eb86:	7544      	strb	r4, [r0, #21]
    eb88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    eb8c:	f006 be74 	b.w	15878 <WsfTaskUnlock>
    eb90:	10003e24 	.word	0x10003e24

0000eb94 <DmAdvSetAddrType>:
    eb94:	b510      	push	{r4, lr}
    eb96:	4604      	mov	r4, r0
    eb98:	f006 fe68 	bl	1586c <WsfTaskLock>
    eb9c:	4b02      	ldr	r3, [pc, #8]	; (eba8 <DmAdvSetAddrType+0x14>)
    eb9e:	739c      	strb	r4, [r3, #14]
    eba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eba4:	f006 be68 	b.w	15878 <WsfTaskUnlock>
    eba8:	10003fec 	.word	0x10003fec

0000ebac <DmAdvSetAdValue>:
    ebac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebb0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ebb4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    ebb8:	460c      	mov	r4, r1
    ebba:	4691      	mov	r9, r2
    ebbc:	8819      	ldrh	r1, [r3, #0]
    ebbe:	4642      	mov	r2, r8
    ebc0:	4683      	mov	fp, r0
    ebc2:	461f      	mov	r7, r3
    ebc4:	f000 ffae 	bl	fb24 <DmFindAdType>
    ebc8:	b1f8      	cbz	r0, ec0a <DmAdvSetAdValue+0x5e>
    ebca:	7805      	ldrb	r5, [r0, #0]
    ebcc:	1c66      	adds	r6, r4, #1
    ebce:	42ae      	cmp	r6, r5
    ebd0:	d107      	bne.n	ebe2 <DmAdvSetAdValue+0x36>
    ebd2:	4622      	mov	r2, r4
    ebd4:	4649      	mov	r1, r9
    ebd6:	3002      	adds	r0, #2
    ebd8:	f7fd fac2 	bl	c160 <memcpy>
    ebdc:	2001      	movs	r0, #1
    ebde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebe2:	f8b7 c000 	ldrh.w	ip, [r7]
    ebe6:	b2ad      	uxth	r5, r5
    ebe8:	4466      	add	r6, ip
    ebea:	1b76      	subs	r6, r6, r5
    ebec:	b2b6      	uxth	r6, r6
    ebee:	4556      	cmp	r6, sl
    ebf0:	d80b      	bhi.n	ec0a <DmAdvSetAdValue+0x5e>
    ebf2:	3501      	adds	r5, #1
    ebf4:	1941      	adds	r1, r0, r5
    ebf6:	eba1 0208 	sub.w	r2, r1, r8
    ebfa:	b2d2      	uxtb	r2, r2
    ebfc:	ebac 0202 	sub.w	r2, ip, r2
    ec00:	f7fd fb48 	bl	c294 <memmove>
    ec04:	883b      	ldrh	r3, [r7, #0]
    ec06:	1b5d      	subs	r5, r3, r5
    ec08:	803d      	strh	r5, [r7, #0]
    ec0a:	883b      	ldrh	r3, [r7, #0]
    ec0c:	191a      	adds	r2, r3, r4
    ec0e:	3201      	adds	r2, #1
    ec10:	4552      	cmp	r2, sl
    ec12:	da10      	bge.n	ec36 <DmAdvSetAdValue+0x8a>
    ec14:	eb08 0003 	add.w	r0, r8, r3
    ec18:	1c62      	adds	r2, r4, #1
    ec1a:	f808 2003 	strb.w	r2, [r8, r3]
    ec1e:	4649      	mov	r1, r9
    ec20:	f880 b001 	strb.w	fp, [r0, #1]
    ec24:	4622      	mov	r2, r4
    ec26:	3002      	adds	r0, #2
    ec28:	f7fd fa9a 	bl	c160 <memcpy>
    ec2c:	883b      	ldrh	r3, [r7, #0]
    ec2e:	3402      	adds	r4, #2
    ec30:	441c      	add	r4, r3
    ec32:	803c      	strh	r4, [r7, #0]
    ec34:	e7d2      	b.n	ebdc <DmAdvSetAdValue+0x30>
    ec36:	2000      	movs	r0, #0
    ec38:	e7d1      	b.n	ebde <DmAdvSetAdValue+0x32>

0000ec3a <DmAdvSetName>:
    ec3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec3e:	4614      	mov	r4, r2
    ec40:	4606      	mov	r6, r0
    ec42:	460f      	mov	r7, r1
    ec44:	461a      	mov	r2, r3
    ec46:	8821      	ldrh	r1, [r4, #0]
    ec48:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    ec4c:	2009      	movs	r0, #9
    ec4e:	4698      	mov	r8, r3
    ec50:	f000 ff68 	bl	fb24 <DmFindAdType>
    ec54:	b928      	cbnz	r0, ec62 <DmAdvSetName+0x28>
    ec56:	4642      	mov	r2, r8
    ec58:	8821      	ldrh	r1, [r4, #0]
    ec5a:	2008      	movs	r0, #8
    ec5c:	f000 ff62 	bl	fb24 <DmFindAdType>
    ec60:	b188      	cbz	r0, ec86 <DmAdvSetName+0x4c>
    ec62:	f890 9000 	ldrb.w	r9, [r0]
    ec66:	8822      	ldrh	r2, [r4, #0]
    ec68:	f109 0901 	add.w	r9, r9, #1
    ec6c:	eb00 0109 	add.w	r1, r0, r9
    ec70:	eba1 0308 	sub.w	r3, r1, r8
    ec74:	b2db      	uxtb	r3, r3
    ec76:	1ad2      	subs	r2, r2, r3
    ec78:	f7fd fb0c 	bl	c294 <memmove>
    ec7c:	8823      	ldrh	r3, [r4, #0]
    ec7e:	eba3 0909 	sub.w	r9, r3, r9
    ec82:	f8a4 9000 	strh.w	r9, [r4]
    ec86:	8822      	ldrh	r2, [r4, #0]
    ec88:	1e6b      	subs	r3, r5, #1
    ec8a:	4293      	cmp	r3, r2
    ec8c:	dd1c      	ble.n	ecc8 <DmAdvSetName+0x8e>
    ec8e:	18b3      	adds	r3, r6, r2
    ec90:	3301      	adds	r3, #1
    ec92:	429d      	cmp	r5, r3
    ec94:	bfde      	ittt	le
    ec96:	3d02      	suble	r5, #2
    ec98:	1aad      	suble	r5, r5, r2
    ec9a:	b2ee      	uxtble	r6, r5
    ec9c:	eb08 0002 	add.w	r0, r8, r2
    eca0:	bfd4      	ite	le
    eca2:	2308      	movle	r3, #8
    eca4:	2309      	movgt	r3, #9
    eca6:	1c71      	adds	r1, r6, #1
    eca8:	f808 1002 	strb.w	r1, [r8, r2]
    ecac:	3002      	adds	r0, #2
    ecae:	f800 3c01 	strb.w	r3, [r0, #-1]
    ecb2:	4632      	mov	r2, r6
    ecb4:	4639      	mov	r1, r7
    ecb6:	f7fd fa53 	bl	c160 <memcpy>
    ecba:	8825      	ldrh	r5, [r4, #0]
    ecbc:	3502      	adds	r5, #2
    ecbe:	4435      	add	r5, r6
    ecc0:	8025      	strh	r5, [r4, #0]
    ecc2:	2001      	movs	r0, #1
    ecc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ecc8:	2000      	movs	r0, #0
    ecca:	e7fb      	b.n	ecc4 <DmAdvSetName+0x8a>

0000eccc <dmAdvActRemoveSet>:
    eccc:	4770      	bx	lr

0000ecce <dmAdvMsgHandler>:
    ecce:	7883      	ldrb	r3, [r0, #2]
    ecd0:	4a02      	ldr	r2, [pc, #8]	; (ecdc <dmAdvMsgHandler+0xe>)
    ecd2:	f003 030f 	and.w	r3, r3, #15
    ecd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecda:	4718      	bx	r3
    ecdc:	000250c8 	.word	0x000250c8

0000ece0 <dmAdvConfig>:
    ece0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ece4:	4e0e      	ldr	r6, [pc, #56]	; (ed20 <dmAdvConfig+0x40>)
    ece6:	4c0f      	ldr	r4, [pc, #60]	; (ed24 <dmAdvConfig+0x44>)
    ece8:	4605      	mov	r5, r0
    ecea:	7bb0      	ldrb	r0, [r6, #14]
    ecec:	8a27      	ldrh	r7, [r4, #16]
    ecee:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    ecf2:	4689      	mov	r9, r1
    ecf4:	4692      	mov	sl, r2
    ecf6:	f000 ff4f 	bl	fb98 <DmLlAddrType>
    ecfa:	7c73      	ldrb	r3, [r6, #17]
    ecfc:	9303      	str	r3, [sp, #12]
    ecfe:	7d63      	ldrb	r3, [r4, #21]
    ed00:	f8cd 9000 	str.w	r9, [sp]
    ed04:	e9cd a301 	strd	sl, r3, [sp, #4]
    ed08:	462a      	mov	r2, r5
    ed0a:	4603      	mov	r3, r0
    ed0c:	4641      	mov	r1, r8
    ed0e:	4638      	mov	r0, r7
    ed10:	f008 fbbd 	bl	1748e <HciLeSetAdvParamCmd>
    ed14:	4b04      	ldr	r3, [pc, #16]	; (ed28 <dmAdvConfig+0x48>)
    ed16:	701d      	strb	r5, [r3, #0]
    ed18:	b004      	add	sp, #16
    ed1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed1e:	bf00      	nop
    ed20:	10003fec 	.word	0x10003fec
    ed24:	10003e24 	.word	0x10003e24
    ed28:	10003e40 	.word	0x10003e40

0000ed2c <dmAdvReset>:
    ed2c:	b507      	push	{r0, r1, r2, lr}
    ed2e:	4b0d      	ldr	r3, [pc, #52]	; (ed64 <dmAdvReset+0x38>)
    ed30:	7dda      	ldrb	r2, [r3, #23]
    ed32:	2a05      	cmp	r2, #5
    ed34:	d006      	beq.n	ed44 <dmAdvReset+0x18>
    ed36:	2a01      	cmp	r2, #1
    ed38:	d10e      	bne.n	ed58 <dmAdvReset+0x2c>
    ed3a:	7d1b      	ldrb	r3, [r3, #20]
    ed3c:	2b01      	cmp	r3, #1
    ed3e:	d00b      	beq.n	ed58 <dmAdvReset+0x2c>
    ed40:	2b04      	cmp	r3, #4
    ed42:	d009      	beq.n	ed58 <dmAdvReset+0x2c>
    ed44:	4807      	ldr	r0, [pc, #28]	; (ed64 <dmAdvReset+0x38>)
    ed46:	f005 fe33 	bl	149b0 <WsfTimerStop>
    ed4a:	2322      	movs	r3, #34	; 0x22
    ed4c:	f8ad 3006 	strh.w	r3, [sp, #6]
    ed50:	4b05      	ldr	r3, [pc, #20]	; (ed68 <dmAdvReset+0x3c>)
    ed52:	a801      	add	r0, sp, #4
    ed54:	689b      	ldr	r3, [r3, #8]
    ed56:	4798      	blx	r3
    ed58:	f7ff fe48 	bl	e9ec <dmAdvInit>
    ed5c:	b003      	add	sp, #12
    ed5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed62:	bf00      	nop
    ed64:	10003e24 	.word	0x10003e24
    ed68:	10003fec 	.word	0x10003fec

0000ed6c <dmAdvActConfig>:
    ed6c:	4b06      	ldr	r3, [pc, #24]	; (ed88 <dmAdvActConfig+0x1c>)
    ed6e:	7dda      	ldrb	r2, [r3, #23]
    ed70:	b942      	cbnz	r2, ed84 <dmAdvActConfig+0x18>
    ed72:	7d1b      	ldrb	r3, [r3, #20]
    ed74:	2b01      	cmp	r3, #1
    ed76:	d005      	beq.n	ed84 <dmAdvActConfig+0x18>
    ed78:	2b04      	cmp	r3, #4
    ed7a:	d003      	beq.n	ed84 <dmAdvActConfig+0x18>
    ed7c:	1dc2      	adds	r2, r0, #7
    ed7e:	7981      	ldrb	r1, [r0, #6]
    ed80:	7940      	ldrb	r0, [r0, #5]
    ed82:	e7ad      	b.n	ece0 <dmAdvConfig>
    ed84:	4770      	bx	lr
    ed86:	bf00      	nop
    ed88:	10003e24 	.word	0x10003e24

0000ed8c <dmAdvActSetData>:
    ed8c:	4a06      	ldr	r2, [pc, #24]	; (eda8 <dmAdvActSetData+0x1c>)
    ed8e:	7dd2      	ldrb	r2, [r2, #23]
    ed90:	4603      	mov	r3, r0
    ed92:	b93a      	cbnz	r2, eda4 <dmAdvActSetData+0x18>
    ed94:	6899      	ldr	r1, [r3, #8]
    ed96:	799b      	ldrb	r3, [r3, #6]
    ed98:	79c0      	ldrb	r0, [r0, #7]
    ed9a:	b90b      	cbnz	r3, eda0 <dmAdvActSetData+0x14>
    ed9c:	f008 bb47 	b.w	1742e <HciLeSetAdvDataCmd>
    eda0:	f008 bc8b 	b.w	176ba <HciLeSetScanRespDataCmd>
    eda4:	4770      	bx	lr
    eda6:	bf00      	nop
    eda8:	10003e24 	.word	0x10003e24

0000edac <dmAdvActStart>:
    edac:	4b07      	ldr	r3, [pc, #28]	; (edcc <dmAdvActStart+0x20>)
    edae:	7dda      	ldrb	r2, [r3, #23]
    edb0:	b95a      	cbnz	r2, edca <dmAdvActStart+0x1e>
    edb2:	7d1a      	ldrb	r2, [r3, #20]
    edb4:	2a01      	cmp	r2, #1
    edb6:	d008      	beq.n	edca <dmAdvActStart+0x1e>
    edb8:	2a04      	cmp	r2, #4
    edba:	d006      	beq.n	edca <dmAdvActStart+0x1e>
    edbc:	2203      	movs	r2, #3
    edbe:	75da      	strb	r2, [r3, #23]
    edc0:	88c2      	ldrh	r2, [r0, #6]
    edc2:	831a      	strh	r2, [r3, #24]
    edc4:	2001      	movs	r0, #1
    edc6:	f008 bb15 	b.w	173f4 <HciLeSetAdvEnableCmd>
    edca:	4770      	bx	lr
    edcc:	10003e24 	.word	0x10003e24

0000edd0 <dmAdvActStop>:
    edd0:	4b07      	ldr	r3, [pc, #28]	; (edf0 <dmAdvActStop+0x20>)
    edd2:	7dda      	ldrb	r2, [r3, #23]
    edd4:	2a01      	cmp	r2, #1
    edd6:	d109      	bne.n	edec <dmAdvActStop+0x1c>
    edd8:	7d1a      	ldrb	r2, [r3, #20]
    edda:	2a01      	cmp	r2, #1
    eddc:	d006      	beq.n	edec <dmAdvActStop+0x1c>
    edde:	2a04      	cmp	r2, #4
    ede0:	d004      	beq.n	edec <dmAdvActStop+0x1c>
    ede2:	2205      	movs	r2, #5
    ede4:	2000      	movs	r0, #0
    ede6:	75da      	strb	r2, [r3, #23]
    ede8:	f008 bb04 	b.w	173f4 <HciLeSetAdvEnableCmd>
    edec:	4770      	bx	lr
    edee:	bf00      	nop
    edf0:	10003e24 	.word	0x10003e24

0000edf4 <dmAdvActTimeout>:
    edf4:	f7ff bfec 	b.w	edd0 <dmAdvActStop>

0000edf8 <dmAdvHciHandler>:
    edf8:	7883      	ldrb	r3, [r0, #2]
    edfa:	2b35      	cmp	r3, #53	; 0x35
    edfc:	b570      	push	{r4, r5, r6, lr}
    edfe:	4605      	mov	r5, r0
    ee00:	d144      	bne.n	ee8c <dmAdvHciHandler+0x94>
    ee02:	4c23      	ldr	r4, [pc, #140]	; (ee90 <dmAdvHciHandler+0x98>)
    ee04:	7de3      	ldrb	r3, [r4, #23]
    ee06:	2b03      	cmp	r3, #3
    ee08:	d01d      	beq.n	ee46 <dmAdvHciHandler+0x4e>
    ee0a:	2b05      	cmp	r3, #5
    ee0c:	d138      	bne.n	ee80 <dmAdvHciHandler+0x88>
    ee0e:	2622      	movs	r6, #34	; 0x22
    ee10:	78ea      	ldrb	r2, [r5, #3]
    ee12:	2a00      	cmp	r2, #0
    ee14:	d12e      	bne.n	ee74 <dmAdvHciHandler+0x7c>
    ee16:	2b05      	cmp	r3, #5
    ee18:	d109      	bne.n	ee2e <dmAdvHciHandler+0x36>
    ee1a:	481d      	ldr	r0, [pc, #116]	; (ee90 <dmAdvHciHandler+0x98>)
    ee1c:	f005 fdc8 	bl	149b0 <WsfTimerStop>
    ee20:	2315      	movs	r3, #21
    ee22:	70ab      	strb	r3, [r5, #2]
    ee24:	4b1b      	ldr	r3, [pc, #108]	; (ee94 <dmAdvHciHandler+0x9c>)
    ee26:	685b      	ldr	r3, [r3, #4]
    ee28:	4628      	mov	r0, r5
    ee2a:	689b      	ldr	r3, [r3, #8]
    ee2c:	4798      	blx	r3
    ee2e:	23ff      	movs	r3, #255	; 0xff
    ee30:	7523      	strb	r3, [r4, #20]
    ee32:	2300      	movs	r3, #0
    ee34:	75e3      	strb	r3, [r4, #23]
    ee36:	b34e      	cbz	r6, ee8c <dmAdvHciHandler+0x94>
    ee38:	4b17      	ldr	r3, [pc, #92]	; (ee98 <dmAdvHciHandler+0xa0>)
    ee3a:	70ae      	strb	r6, [r5, #2]
    ee3c:	4628      	mov	r0, r5
    ee3e:	689b      	ldr	r3, [r3, #8]
    ee40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee44:	4718      	bx	r3
    ee46:	2621      	movs	r6, #33	; 0x21
    ee48:	78ea      	ldrb	r2, [r5, #3]
    ee4a:	2a00      	cmp	r2, #0
    ee4c:	d1f1      	bne.n	ee32 <dmAdvHciHandler+0x3a>
    ee4e:	2b03      	cmp	r3, #3
    ee50:	d10d      	bne.n	ee6e <dmAdvHciHandler+0x76>
    ee52:	8b21      	ldrh	r1, [r4, #24]
    ee54:	b121      	cbz	r1, ee60 <dmAdvHciHandler+0x68>
    ee56:	2306      	movs	r3, #6
    ee58:	480d      	ldr	r0, [pc, #52]	; (ee90 <dmAdvHciHandler+0x98>)
    ee5a:	7323      	strb	r3, [r4, #12]
    ee5c:	f005 fd94 	bl	14988 <WsfTimerStartMs>
    ee60:	2314      	movs	r3, #20
    ee62:	70ab      	strb	r3, [r5, #2]
    ee64:	4b0b      	ldr	r3, [pc, #44]	; (ee94 <dmAdvHciHandler+0x9c>)
    ee66:	685b      	ldr	r3, [r3, #4]
    ee68:	4628      	mov	r0, r5
    ee6a:	689b      	ldr	r3, [r3, #8]
    ee6c:	4798      	blx	r3
    ee6e:	4b0b      	ldr	r3, [pc, #44]	; (ee9c <dmAdvHciHandler+0xa4>)
    ee70:	781b      	ldrb	r3, [r3, #0]
    ee72:	7523      	strb	r3, [r4, #20]
    ee74:	2301      	movs	r3, #1
    ee76:	e7dd      	b.n	ee34 <dmAdvHciHandler+0x3c>
    ee78:	2600      	movs	r6, #0
    ee7a:	e7e5      	b.n	ee48 <dmAdvHciHandler+0x50>
    ee7c:	2600      	movs	r6, #0
    ee7e:	e7c7      	b.n	ee10 <dmAdvHciHandler+0x18>
    ee80:	2b02      	cmp	r3, #2
    ee82:	d303      	bcc.n	ee8c <dmAdvHciHandler+0x94>
    ee84:	2b03      	cmp	r3, #3
    ee86:	d9f7      	bls.n	ee78 <dmAdvHciHandler+0x80>
    ee88:	2b04      	cmp	r3, #4
    ee8a:	d0f7      	beq.n	ee7c <dmAdvHciHandler+0x84>
    ee8c:	bd70      	pop	{r4, r5, r6, pc}
    ee8e:	bf00      	nop
    ee90:	10003e24 	.word	0x10003e24
    ee94:	10002b54 	.word	0x10002b54
    ee98:	10003fec 	.word	0x10003fec
    ee9c:	10003e40 	.word	0x10003e40

0000eea0 <dmAdvActClearSets>:
    eea0:	4770      	bx	lr

0000eea2 <dmAdvStartDirected>:
    eea2:	b510      	push	{r4, lr}
    eea4:	4c08      	ldr	r4, [pc, #32]	; (eec8 <dmAdvStartDirected+0x26>)
    eea6:	9a03      	ldr	r2, [sp, #12]
    eea8:	7de3      	ldrb	r3, [r4, #23]
    eeaa:	4608      	mov	r0, r1
    eeac:	f89d 1008 	ldrb.w	r1, [sp, #8]
    eeb0:	b943      	cbnz	r3, eec4 <dmAdvStartDirected+0x22>
    eeb2:	f7ff ff15 	bl	ece0 <dmAdvConfig>
    eeb6:	2302      	movs	r3, #2
    eeb8:	75e3      	strb	r3, [r4, #23]
    eeba:	2001      	movs	r0, #1
    eebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eec0:	f008 ba98 	b.w	173f4 <HciLeSetAdvEnableCmd>
    eec4:	bd10      	pop	{r4, pc}
    eec6:	bf00      	nop
    eec8:	10003e24 	.word	0x10003e24

0000eecc <dmAdvStopDirected>:
    eecc:	4b04      	ldr	r3, [pc, #16]	; (eee0 <dmAdvStopDirected+0x14>)
    eece:	7dda      	ldrb	r2, [r3, #23]
    eed0:	2a01      	cmp	r2, #1
    eed2:	d104      	bne.n	eede <dmAdvStopDirected+0x12>
    eed4:	2204      	movs	r2, #4
    eed6:	2000      	movs	r0, #0
    eed8:	75da      	strb	r2, [r3, #23]
    eeda:	f008 ba8b 	b.w	173f4 <HciLeSetAdvEnableCmd>
    eede:	4770      	bx	lr
    eee0:	10003e24 	.word	0x10003e24

0000eee4 <dmAdvConnected>:
    eee4:	b510      	push	{r4, lr}
    eee6:	4c04      	ldr	r4, [pc, #16]	; (eef8 <dmAdvConnected+0x14>)
    eee8:	4620      	mov	r0, r4
    eeea:	f005 fd61 	bl	149b0 <WsfTimerStop>
    eeee:	23ff      	movs	r3, #255	; 0xff
    eef0:	7523      	strb	r3, [r4, #20]
    eef2:	2300      	movs	r3, #0
    eef4:	75e3      	strb	r3, [r4, #23]
    eef6:	bd10      	pop	{r4, pc}
    eef8:	10003e24 	.word	0x10003e24

0000eefc <dmAdvConnectFailed>:
    eefc:	f7ff bff2 	b.w	eee4 <dmAdvConnected>

0000ef00 <DmAdvInit>:
    ef00:	b508      	push	{r3, lr}
    ef02:	f006 fcb3 	bl	1586c <WsfTaskLock>
    ef06:	4b04      	ldr	r3, [pc, #16]	; (ef18 <DmAdvInit+0x18>)
    ef08:	4a04      	ldr	r2, [pc, #16]	; (ef1c <DmAdvInit+0x1c>)
    ef0a:	601a      	str	r2, [r3, #0]
    ef0c:	f7ff fd6e 	bl	e9ec <dmAdvInit>
    ef10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ef14:	f006 bcb0 	b.w	15878 <WsfTaskUnlock>
    ef18:	10002b54 	.word	0x10002b54
    ef1c:	000250e4 	.word	0x000250e4

0000ef20 <DmAdvModeLeg>:
    ef20:	4b03      	ldr	r3, [pc, #12]	; (ef30 <DmAdvModeLeg+0x10>)
    ef22:	6818      	ldr	r0, [r3, #0]
    ef24:	4b03      	ldr	r3, [pc, #12]	; (ef34 <DmAdvModeLeg+0x14>)
    ef26:	1ac3      	subs	r3, r0, r3
    ef28:	4258      	negs	r0, r3
    ef2a:	4158      	adcs	r0, r3
    ef2c:	4770      	bx	lr
    ef2e:	bf00      	nop
    ef30:	10002b54 	.word	0x10002b54
    ef34:	000250e4 	.word	0x000250e4

0000ef38 <dmAdvPrivMsgHandler>:
    ef38:	7883      	ldrb	r3, [r0, #2]
    ef3a:	4a03      	ldr	r2, [pc, #12]	; (ef48 <dmAdvPrivMsgHandler+0x10>)
    ef3c:	f003 030f 	and.w	r3, r3, #15
    ef40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef44:	4718      	bx	r3
    ef46:	bf00      	nop
    ef48:	000250f0 	.word	0x000250f0

0000ef4c <dmAdvPrivAddrCalc>:
    ef4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ef4e:	2103      	movs	r1, #3
    ef50:	a802      	add	r0, sp, #8
    ef52:	f00c fdf9 	bl	1bb48 <SecRand>
    ef56:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ef5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ef5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef62:	220d      	movs	r2, #13
    ef64:	2100      	movs	r1, #0
    ef66:	f10d 000b 	add.w	r0, sp, #11
    ef6a:	f88d 300a 	strb.w	r3, [sp, #10]
    ef6e:	f7fd f9f5 	bl	c35c <memset>
    ef72:	f001 fa69 	bl	10448 <DmSecGetLocalIrk>
    ef76:	4b08      	ldr	r3, [pc, #32]	; (ef98 <dmAdvPrivAddrCalc+0x4c>)
    ef78:	7b1a      	ldrb	r2, [r3, #12]
    ef7a:	2313      	movs	r3, #19
    ef7c:	9300      	str	r3, [sp, #0]
    ef7e:	a902      	add	r1, sp, #8
    ef80:	2300      	movs	r3, #0
    ef82:	f00c fa0f 	bl	1b3a4 <SecAes>
    ef86:	4a05      	ldr	r2, [pc, #20]	; (ef9c <dmAdvPrivAddrCalc+0x50>)
    ef88:	9b02      	ldr	r3, [sp, #8]
    ef8a:	8213      	strh	r3, [r2, #16]
    ef8c:	0c1b      	lsrs	r3, r3, #16
    ef8e:	7493      	strb	r3, [r2, #18]
    ef90:	b007      	add	sp, #28
    ef92:	f85d fb04 	ldr.w	pc, [sp], #4
    ef96:	bf00      	nop
    ef98:	10003fec 	.word	0x10003fec
    ef9c:	10003e44 	.word	0x10003e44

0000efa0 <dmAdvPrivActStart>:
    efa0:	b538      	push	{r3, r4, r5, lr}
    efa2:	4c12      	ldr	r4, [pc, #72]	; (efec <dmAdvPrivActStart+0x4c>)
    efa4:	2501      	movs	r5, #1
    efa6:	75a5      	strb	r5, [r4, #22]
    efa8:	8883      	ldrh	r3, [r0, #4]
    efaa:	82a3      	strh	r3, [r4, #20]
    efac:	4628      	mov	r0, r5
    efae:	f7ff fdf1 	bl	eb94 <DmAdvSetAddrType>
    efb2:	4628      	mov	r0, r5
    efb4:	f001 f83c 	bl	10030 <DmScanSetAddrType>
    efb8:	4628      	mov	r0, r5
    efba:	f002 fd48 	bl	11a4e <DmConnSetAddrType>
    efbe:	8aa1      	ldrh	r1, [r4, #20]
    efc0:	b169      	cbz	r1, efde <dmAdvPrivActStart+0x3e>
    efc2:	4b0b      	ldr	r3, [pc, #44]	; (eff0 <dmAdvPrivActStart+0x50>)
    efc4:	7b1b      	ldrb	r3, [r3, #12]
    efc6:	7223      	strb	r3, [r4, #8]
    efc8:	4620      	mov	r0, r4
    efca:	2312      	movs	r3, #18
    efcc:	7323      	strb	r3, [r4, #12]
    efce:	f005 fcc9 	bl	14964 <WsfTimerStartSec>
    efd2:	f009 fb33 	bl	1863c <HciLlPrivacySupported>
    efd6:	b110      	cbz	r0, efde <dmAdvPrivActStart+0x3e>
    efd8:	8aa0      	ldrh	r0, [r4, #20]
    efda:	f000 ff99 	bl	ff10 <DmPrivSetResolvablePrivateAddrTimeout>
    efde:	7de3      	ldrb	r3, [r4, #23]
    efe0:	b913      	cbnz	r3, efe8 <dmAdvPrivActStart+0x48>
    efe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    efe6:	e7b1      	b.n	ef4c <dmAdvPrivAddrCalc>
    efe8:	bd38      	pop	{r3, r4, r5, pc}
    efea:	bf00      	nop
    efec:	10003e44 	.word	0x10003e44
    eff0:	10003fec 	.word	0x10003fec

0000eff4 <dmAdvPrivActAdvStop>:
    eff4:	4802      	ldr	r0, [pc, #8]	; (f000 <dmAdvPrivActAdvStop+0xc>)
    eff6:	7d83      	ldrb	r3, [r0, #22]
    eff8:	b10b      	cbz	r3, effe <dmAdvPrivActAdvStop+0xa>
    effa:	f005 bcd9 	b.w	149b0 <WsfTimerStop>
    effe:	4770      	bx	lr
    f000:	10003e44 	.word	0x10003e44

0000f004 <dmAdvPrivActStop>:
    f004:	b538      	push	{r3, r4, r5, lr}
    f006:	4d0b      	ldr	r5, [pc, #44]	; (f034 <dmAdvPrivActStop+0x30>)
    f008:	2400      	movs	r4, #0
    f00a:	4628      	mov	r0, r5
    f00c:	f005 fcd0 	bl	149b0 <WsfTimerStop>
    f010:	4620      	mov	r0, r4
    f012:	75ac      	strb	r4, [r5, #22]
    f014:	f7ff fdbe 	bl	eb94 <DmAdvSetAddrType>
    f018:	4620      	mov	r0, r4
    f01a:	f001 f809 	bl	10030 <DmScanSetAddrType>
    f01e:	4620      	mov	r0, r4
    f020:	f002 fd15 	bl	11a4e <DmConnSetAddrType>
    f024:	f009 fb0a 	bl	1863c <HciLlPrivacySupported>
    f028:	b118      	cbz	r0, f032 <dmAdvPrivActStop+0x2e>
    f02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f02e:	f000 bf43 	b.w	feb8 <DmPrivClearResList>
    f032:	bd38      	pop	{r3, r4, r5, pc}
    f034:	10003e44 	.word	0x10003e44

0000f038 <dmAdvPrivActAdvStart>:
    f038:	4804      	ldr	r0, [pc, #16]	; (f04c <dmAdvPrivActAdvStart+0x14>)
    f03a:	7d83      	ldrb	r3, [r0, #22]
    f03c:	b123      	cbz	r3, f048 <dmAdvPrivActAdvStart+0x10>
    f03e:	2312      	movs	r3, #18
    f040:	8a81      	ldrh	r1, [r0, #20]
    f042:	7303      	strb	r3, [r0, #12]
    f044:	f005 bc8e 	b.w	14964 <WsfTimerStartSec>
    f048:	4770      	bx	lr
    f04a:	bf00      	nop
    f04c:	10003e44 	.word	0x10003e44

0000f050 <dmAdvPrivActTimeout>:
    f050:	b508      	push	{r3, lr}
    f052:	4806      	ldr	r0, [pc, #24]	; (f06c <dmAdvPrivActTimeout+0x1c>)
    f054:	7d83      	ldrb	r3, [r0, #22]
    f056:	b13b      	cbz	r3, f068 <dmAdvPrivActTimeout+0x18>
    f058:	2312      	movs	r3, #18
    f05a:	8a81      	ldrh	r1, [r0, #20]
    f05c:	7303      	strb	r3, [r0, #12]
    f05e:	f005 fc81 	bl	14964 <WsfTimerStartSec>
    f062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f066:	e771      	b.n	ef4c <dmAdvPrivAddrCalc>
    f068:	bd08      	pop	{r3, pc}
    f06a:	bf00      	nop
    f06c:	10003e44 	.word	0x10003e44

0000f070 <dmAdvPrivReset>:
    f070:	4804      	ldr	r0, [pc, #16]	; (f084 <dmAdvPrivReset+0x14>)
    f072:	7d82      	ldrb	r2, [r0, #22]
    f074:	2300      	movs	r3, #0
    f076:	75c3      	strb	r3, [r0, #23]
    f078:	b112      	cbz	r2, f080 <dmAdvPrivReset+0x10>
    f07a:	7583      	strb	r3, [r0, #22]
    f07c:	f005 bc98 	b.w	149b0 <WsfTimerStop>
    f080:	4770      	bx	lr
    f082:	bf00      	nop
    f084:	10003e44 	.word	0x10003e44

0000f088 <dmAdvPrivActAesCmpl>:
    f088:	b530      	push	{r4, r5, lr}
    f08a:	4d16      	ldr	r5, [pc, #88]	; (f0e4 <dmAdvPrivActAesCmpl+0x5c>)
    f08c:	7dab      	ldrb	r3, [r5, #22]
    f08e:	b085      	sub	sp, #20
    f090:	b32b      	cbz	r3, f0de <dmAdvPrivActAesCmpl+0x56>
    f092:	6843      	ldr	r3, [r0, #4]
    f094:	4c14      	ldr	r4, [pc, #80]	; (f0e8 <dmAdvPrivActAesCmpl+0x60>)
    f096:	881a      	ldrh	r2, [r3, #0]
    f098:	789b      	ldrb	r3, [r3, #2]
    f09a:	70a3      	strb	r3, [r4, #2]
    f09c:	462b      	mov	r3, r5
    f09e:	8022      	strh	r2, [r4, #0]
    f0a0:	f833 2f10 	ldrh.w	r2, [r3, #16]!
    f0a4:	f8a4 2003 	strh.w	r2, [r4, #3]
    f0a8:	789b      	ldrb	r3, [r3, #2]
    f0aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0b2:	4620      	mov	r0, r4
    f0b4:	7163      	strb	r3, [r4, #5]
    f0b6:	f008 fa6f 	bl	17598 <HciLeSetRandAddrCmd>
    f0ba:	2323      	movs	r3, #35	; 0x23
    f0bc:	4621      	mov	r1, r4
    f0be:	a802      	add	r0, sp, #8
    f0c0:	f88d 3006 	strb.w	r3, [sp, #6]
    f0c4:	f004 fde8 	bl	13c98 <BdaCpy>
    f0c8:	7deb      	ldrb	r3, [r5, #23]
    f0ca:	fab3 f383 	clz	r3, r3
    f0ce:	095b      	lsrs	r3, r3, #5
    f0d0:	f88d 300e 	strb.w	r3, [sp, #14]
    f0d4:	a801      	add	r0, sp, #4
    f0d6:	68a3      	ldr	r3, [r4, #8]
    f0d8:	4798      	blx	r3
    f0da:	2301      	movs	r3, #1
    f0dc:	75eb      	strb	r3, [r5, #23]
    f0de:	b005      	add	sp, #20
    f0e0:	bd30      	pop	{r4, r5, pc}
    f0e2:	bf00      	nop
    f0e4:	10003e44 	.word	0x10003e44
    f0e8:	10003fec 	.word	0x10003fec

0000f0ec <DmAdvPrivInit>:
    f0ec:	4b01      	ldr	r3, [pc, #4]	; (f0f4 <DmAdvPrivInit+0x8>)
    f0ee:	4a02      	ldr	r2, [pc, #8]	; (f0f8 <DmAdvPrivInit+0xc>)
    f0f0:	605a      	str	r2, [r3, #4]
    f0f2:	4770      	bx	lr
    f0f4:	10002b54 	.word	0x10002b54
    f0f8:	00025108 	.word	0x00025108

0000f0fc <DmAdvPrivStart>:
    f0fc:	b510      	push	{r4, lr}
    f0fe:	4604      	mov	r4, r0
    f100:	2006      	movs	r0, #6
    f102:	f005 fa76 	bl	145f2 <WsfMsgAlloc>
    f106:	4601      	mov	r1, r0
    f108:	b140      	cbz	r0, f11c <DmAdvPrivStart+0x20>
    f10a:	2310      	movs	r3, #16
    f10c:	7083      	strb	r3, [r0, #2]
    f10e:	4b04      	ldr	r3, [pc, #16]	; (f120 <DmAdvPrivStart+0x24>)
    f110:	8084      	strh	r4, [r0, #4]
    f112:	7b18      	ldrb	r0, [r3, #12]
    f114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f118:	f005 ba8f 	b.w	1463a <WsfMsgSend>
    f11c:	bd10      	pop	{r4, pc}
    f11e:	bf00      	nop
    f120:	10003fec 	.word	0x10003fec

0000f124 <DmAdvPrivStop>:
    f124:	b508      	push	{r3, lr}
    f126:	2004      	movs	r0, #4
    f128:	f005 fa63 	bl	145f2 <WsfMsgAlloc>
    f12c:	4601      	mov	r1, r0
    f12e:	b138      	cbz	r0, f140 <DmAdvPrivStop+0x1c>
    f130:	2311      	movs	r3, #17
    f132:	7083      	strb	r3, [r0, #2]
    f134:	4b03      	ldr	r3, [pc, #12]	; (f144 <DmAdvPrivStop+0x20>)
    f136:	7b18      	ldrb	r0, [r3, #12]
    f138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f13c:	f005 ba7d 	b.w	1463a <WsfMsgSend>
    f140:	bd08      	pop	{r3, pc}
    f142:	bf00      	nop
    f144:	10003fec 	.word	0x10003fec

0000f148 <dmConnSmActNone>:
    f148:	4770      	bx	lr

0000f14a <dmConnSmActHciUpdated>:
    f14a:	2329      	movs	r3, #41	; 0x29
    f14c:	708b      	strb	r3, [r1, #2]
    f14e:	4b02      	ldr	r3, [pc, #8]	; (f158 <dmConnSmActHciUpdated+0xe>)
    f150:	4608      	mov	r0, r1
    f152:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f156:	4718      	bx	r3
    f158:	10003e5c 	.word	0x10003e5c

0000f15c <dmConnSmActClose>:
    f15c:	7909      	ldrb	r1, [r1, #4]
    f15e:	8980      	ldrh	r0, [r0, #12]
    f160:	f007 bcf8 	b.w	16b54 <HciDisconnectCmd>

0000f164 <dmConnReset>:
    f164:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f166:	2339      	movs	r3, #57	; 0x39
    f168:	4d14      	ldr	r5, [pc, #80]	; (f1bc <dmConnReset+0x58>)
    f16a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f16e:	2400      	movs	r4, #0
    f170:	2316      	movs	r3, #22
    f172:	f88d 4008 	strb.w	r4, [sp, #8]
    f176:	f88d 300c 	strb.w	r3, [sp, #12]
    f17a:	462e      	mov	r6, r5
    f17c:	1928      	adds	r0, r5, r4
    f17e:	7d83      	ldrb	r3, [r0, #22]
    f180:	b13b      	cbz	r3, f192 <dmConnReset+0x2e>
    f182:	7c03      	ldrb	r3, [r0, #16]
    f184:	f8ad 300a 	strh.w	r3, [sp, #10]
    f188:	a901      	add	r1, sp, #4
    f18a:	f8ad 3004 	strh.w	r3, [sp, #4]
    f18e:	f000 fbf7 	bl	f980 <dmConnSmExecute>
    f192:	342c      	adds	r4, #44	; 0x2c
    f194:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f198:	d1f0      	bne.n	f17c <dmConnReset+0x18>
    f19a:	4a09      	ldr	r2, [pc, #36]	; (f1c0 <dmConnReset+0x5c>)
    f19c:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
    f1a0:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
    f1a4:	6810      	ldr	r0, [r2, #0]
    f1a6:	6851      	ldr	r1, [r2, #4]
    f1a8:	4b06      	ldr	r3, [pc, #24]	; (f1c4 <dmConnReset+0x60>)
    f1aa:	c303      	stmia	r3!, {r0, r1}
    f1ac:	6890      	ldr	r0, [r2, #8]
    f1ae:	6018      	str	r0, [r3, #0]
    f1b0:	4b05      	ldr	r3, [pc, #20]	; (f1c8 <dmConnReset+0x64>)
    f1b2:	2200      	movs	r2, #0
    f1b4:	74da      	strb	r2, [r3, #19]
    f1b6:	735a      	strb	r2, [r3, #13]
    f1b8:	b004      	add	sp, #16
    f1ba:	bd70      	pop	{r4, r5, r6, pc}
    f1bc:	10003e5c 	.word	0x10003e5c
    f1c0:	00025114 	.word	0x00025114
    f1c4:	10003fd0 	.word	0x10003fd0
    f1c8:	10003fec 	.word	0x10003fec

0000f1cc <dmConnSetConnSpec>:
    f1cc:	b538      	push	{r3, r4, r5, lr}
    f1ce:	4605      	mov	r5, r0
    f1d0:	460c      	mov	r4, r1
    f1d2:	f006 fb4b 	bl	1586c <WsfTaskLock>
    f1d6:	4628      	mov	r0, r5
    f1d8:	f000 fd1a 	bl	fc10 <DmInitPhyToIdx>
    f1dc:	4a07      	ldr	r2, [pc, #28]	; (f1fc <dmConnSetConnSpec+0x30>)
    f1de:	6861      	ldr	r1, [r4, #4]
    f1e0:	230c      	movs	r3, #12
    f1e2:	fb03 2300 	mla	r3, r3, r0, r2
    f1e6:	6820      	ldr	r0, [r4, #0]
    f1e8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
    f1ec:	c303      	stmia	r3!, {r0, r1}
    f1ee:	68a0      	ldr	r0, [r4, #8]
    f1f0:	6018      	str	r0, [r3, #0]
    f1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f1f6:	f006 bb3f 	b.w	15878 <WsfTaskUnlock>
    f1fa:	bf00      	nop
    f1fc:	10003e5c 	.word	0x10003e5c

0000f200 <dmConnCcbAlloc>:
    f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f202:	4c0f      	ldr	r4, [pc, #60]	; (f240 <dmConnCcbAlloc+0x40>)
    f204:	4607      	mov	r7, r0
    f206:	2500      	movs	r5, #0
    f208:	7da6      	ldrb	r6, [r4, #22]
    f20a:	3501      	adds	r5, #1
    f20c:	b2ed      	uxtb	r5, r5
    f20e:	b98e      	cbnz	r6, f234 <dmConnCcbAlloc+0x34>
    f210:	222c      	movs	r2, #44	; 0x2c
    f212:	4631      	mov	r1, r6
    f214:	4620      	mov	r0, r4
    f216:	f7fd f8a1 	bl	c35c <memset>
    f21a:	4639      	mov	r1, r7
    f21c:	4620      	mov	r0, r4
    f21e:	f004 fd3b 	bl	13c98 <BdaCpy>
    f222:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f226:	81a3      	strh	r3, [r4, #12]
    f228:	2301      	movs	r3, #1
    f22a:	7425      	strb	r5, [r4, #16]
    f22c:	7466      	strb	r6, [r4, #17]
    f22e:	75a3      	strb	r3, [r4, #22]
    f230:	4620      	mov	r0, r4
    f232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f234:	2d08      	cmp	r5, #8
    f236:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    f23a:	d1e5      	bne.n	f208 <dmConnCcbAlloc+0x8>
    f23c:	2400      	movs	r4, #0
    f23e:	e7f7      	b.n	f230 <dmConnCcbAlloc+0x30>
    f240:	10003e5c 	.word	0x10003e5c

0000f244 <dmConnCcbDealloc>:
    f244:	2300      	movs	r3, #0
    f246:	7583      	strb	r3, [r0, #22]
    f248:	4770      	bx	lr

0000f24a <dmConnCcbByHandle>:
    f24a:	b510      	push	{r4, lr}
    f24c:	4907      	ldr	r1, [pc, #28]	; (f26c <dmConnCcbByHandle+0x22>)
    f24e:	2200      	movs	r2, #0
    f250:	188b      	adds	r3, r1, r2
    f252:	7d9c      	ldrb	r4, [r3, #22]
    f254:	b114      	cbz	r4, f25c <dmConnCcbByHandle+0x12>
    f256:	899c      	ldrh	r4, [r3, #12]
    f258:	4284      	cmp	r4, r0
    f25a:	d004      	beq.n	f266 <dmConnCcbByHandle+0x1c>
    f25c:	322c      	adds	r2, #44	; 0x2c
    f25e:	f5b2 7fb0 	cmp.w	r2, #352	; 0x160
    f262:	d1f5      	bne.n	f250 <dmConnCcbByHandle+0x6>
    f264:	2300      	movs	r3, #0
    f266:	4618      	mov	r0, r3
    f268:	bd10      	pop	{r4, pc}
    f26a:	bf00      	nop
    f26c:	10003e5c 	.word	0x10003e5c

0000f270 <dmConn2HciHandler>:
    f270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f272:	4604      	mov	r4, r0
    f274:	8800      	ldrh	r0, [r0, #0]
    f276:	f7ff ffe8 	bl	f24a <dmConnCcbByHandle>
    f27a:	b138      	cbz	r0, f28c <dmConn2HciHandler+0x1c>
    f27c:	78a3      	ldrb	r3, [r4, #2]
    f27e:	2b23      	cmp	r3, #35	; 0x23
    f280:	d02a      	beq.n	f2d8 <dmConn2HciHandler+0x68>
    f282:	d805      	bhi.n	f290 <dmConn2HciHandler+0x20>
    f284:	2b07      	cmp	r3, #7
    f286:	d00f      	beq.n	f2a8 <dmConn2HciHandler+0x38>
    f288:	2b0b      	cmp	r3, #11
    f28a:	d052      	beq.n	f332 <dmConn2HciHandler+0xc2>
    f28c:	b004      	add	sp, #16
    f28e:	bd10      	pop	{r4, pc}
    f290:	2b27      	cmp	r3, #39	; 0x27
    f292:	d037      	beq.n	f304 <dmConn2HciHandler+0x94>
    f294:	2b28      	cmp	r3, #40	; 0x28
    f296:	d042      	beq.n	f31e <dmConn2HciHandler+0xae>
    f298:	2b24      	cmp	r3, #36	; 0x24
    f29a:	d1f7      	bne.n	f28c <dmConn2HciHandler+0x1c>
    f29c:	7c02      	ldrb	r2, [r0, #16]
    f29e:	8983      	ldrh	r3, [r0, #12]
    f2a0:	f8ad 2000 	strh.w	r2, [sp]
    f2a4:	2240      	movs	r2, #64	; 0x40
    f2a6:	e01c      	b.n	f2e2 <dmConn2HciHandler+0x72>
    f2a8:	8981      	ldrh	r1, [r0, #12]
    f2aa:	7923      	ldrb	r3, [r4, #4]
    f2ac:	7c00      	ldrb	r0, [r0, #16]
    f2ae:	f994 2008 	ldrsb.w	r2, [r4, #8]
    f2b2:	f8ad 0000 	strh.w	r0, [sp]
    f2b6:	2438      	movs	r4, #56	; 0x38
    f2b8:	f88d 4002 	strb.w	r4, [sp, #2]
    f2bc:	f88d 3003 	strb.w	r3, [sp, #3]
    f2c0:	f88d 3004 	strb.w	r3, [sp, #4]
    f2c4:	f8ad 1006 	strh.w	r1, [sp, #6]
    f2c8:	f88d 2008 	strb.w	r2, [sp, #8]
    f2cc:	4b26      	ldr	r3, [pc, #152]	; (f368 <dmConn2HciHandler+0xf8>)
    f2ce:	4668      	mov	r0, sp
    f2d0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f2d4:	4798      	blx	r3
    f2d6:	e7d9      	b.n	f28c <dmConn2HciHandler+0x1c>
    f2d8:	7c02      	ldrb	r2, [r0, #16]
    f2da:	8983      	ldrh	r3, [r0, #12]
    f2dc:	f8ad 2000 	strh.w	r2, [sp]
    f2e0:	223f      	movs	r2, #63	; 0x3f
    f2e2:	f8ad 2002 	strh.w	r2, [sp, #2]
    f2e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    f2ea:	88e3      	ldrh	r3, [r4, #6]
    f2ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    f2f0:	8923      	ldrh	r3, [r4, #8]
    f2f2:	f8ad 3008 	strh.w	r3, [sp, #8]
    f2f6:	8963      	ldrh	r3, [r4, #10]
    f2f8:	f8ad 300a 	strh.w	r3, [sp, #10]
    f2fc:	89a3      	ldrh	r3, [r4, #12]
    f2fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    f302:	e7e3      	b.n	f2cc <dmConn2HciHandler+0x5c>
    f304:	7c01      	ldrb	r1, [r0, #16]
    f306:	7923      	ldrb	r3, [r4, #4]
    f308:	88e2      	ldrh	r2, [r4, #6]
    f30a:	f8ad 1000 	strh.w	r1, [sp]
    f30e:	2141      	movs	r1, #65	; 0x41
    f310:	f8ad 1002 	strh.w	r1, [sp, #2]
    f314:	f8ad 2006 	strh.w	r2, [sp, #6]
    f318:	f88d 3004 	strb.w	r3, [sp, #4]
    f31c:	e7d6      	b.n	f2cc <dmConn2HciHandler+0x5c>
    f31e:	7c02      	ldrb	r2, [r0, #16]
    f320:	88a3      	ldrh	r3, [r4, #4]
    f322:	f8ad 2000 	strh.w	r2, [sp]
    f326:	2242      	movs	r2, #66	; 0x42
    f328:	f8ad 2002 	strh.w	r2, [sp, #2]
    f32c:	f8ad 3004 	strh.w	r3, [sp, #4]
    f330:	e7cc      	b.n	f2cc <dmConn2HciHandler+0x5c>
    f332:	7a62      	ldrb	r2, [r4, #9]
    f334:	7a23      	ldrb	r3, [r4, #8]
    f336:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f33a:	7aa2      	ldrb	r2, [r4, #10]
    f33c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    f340:	6283      	str	r3, [r0, #40]	; 0x28
    f342:	7c03      	ldrb	r3, [r0, #16]
    f344:	f8ad 3000 	strh.w	r3, [sp]
    f348:	2351      	movs	r3, #81	; 0x51
    f34a:	f8ad 3002 	strh.w	r3, [sp, #2]
    f34e:	7923      	ldrb	r3, [r4, #4]
    f350:	f88d 3004 	strb.w	r3, [sp, #4]
    f354:	88e3      	ldrh	r3, [r4, #6]
    f356:	f854 0f08 	ldr.w	r0, [r4, #8]!
    f35a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f35e:	6861      	ldr	r1, [r4, #4]
    f360:	ab02      	add	r3, sp, #8
    f362:	c303      	stmia	r3!, {r0, r1}
    f364:	e7b2      	b.n	f2cc <dmConn2HciHandler+0x5c>
    f366:	bf00      	nop
    f368:	10003e5c 	.word	0x10003e5c

0000f36c <dmConnCcbByBdAddr>:
    f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f36e:	4f0a      	ldr	r7, [pc, #40]	; (f398 <dmConnCcbByBdAddr+0x2c>)
    f370:	4606      	mov	r6, r0
    f372:	2500      	movs	r5, #0
    f374:	197c      	adds	r4, r7, r5
    f376:	7da3      	ldrb	r3, [r4, #22]
    f378:	b933      	cbnz	r3, f388 <dmConnCcbByBdAddr+0x1c>
    f37a:	352c      	adds	r5, #44	; 0x2c
    f37c:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
    f380:	d1f8      	bne.n	f374 <dmConnCcbByBdAddr+0x8>
    f382:	2400      	movs	r4, #0
    f384:	4620      	mov	r0, r4
    f386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f388:	4631      	mov	r1, r6
    f38a:	4620      	mov	r0, r4
    f38c:	f004 fc92 	bl	13cb4 <BdaCmp>
    f390:	2800      	cmp	r0, #0
    f392:	d0f2      	beq.n	f37a <dmConnCcbByBdAddr+0xe>
    f394:	e7f6      	b.n	f384 <dmConnCcbByBdAddr+0x18>
    f396:	bf00      	nop
    f398:	10003e5c 	.word	0x10003e5c

0000f39c <dmConnHciHandler>:
    f39c:	b538      	push	{r3, r4, r5, lr}
    f39e:	7884      	ldrb	r4, [r0, #2]
    f3a0:	1e63      	subs	r3, r4, #1
    f3a2:	2b01      	cmp	r3, #1
    f3a4:	4605      	mov	r5, r0
    f3a6:	d82d      	bhi.n	f404 <dmConnHciHandler+0x68>
    f3a8:	f100 040a 	add.w	r4, r0, #10
    f3ac:	4620      	mov	r0, r4
    f3ae:	f7ff ffdd 	bl	f36c <dmConnCcbByBdAddr>
    f3b2:	b9c8      	cbnz	r0, f3e8 <dmConnHciHandler+0x4c>
    f3b4:	4817      	ldr	r0, [pc, #92]	; (f414 <dmConnHciHandler+0x78>)
    f3b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f3ba:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    f3be:	7d83      	ldrb	r3, [r0, #22]
    f3c0:	b13b      	cbz	r3, f3d2 <dmConnHciHandler+0x36>
    f3c2:	7d43      	ldrb	r3, [r0, #21]
    f3c4:	2b02      	cmp	r3, #2
    f3c6:	d00f      	beq.n	f3e8 <dmConnHciHandler+0x4c>
    f3c8:	2b04      	cmp	r3, #4
    f3ca:	d102      	bne.n	f3d2 <dmConnHciHandler+0x36>
    f3cc:	8983      	ldrh	r3, [r0, #12]
    f3ce:	428b      	cmp	r3, r1
    f3d0:	d00a      	beq.n	f3e8 <dmConnHciHandler+0x4c>
    f3d2:	302c      	adds	r0, #44	; 0x2c
    f3d4:	4290      	cmp	r0, r2
    f3d6:	d1f2      	bne.n	f3be <dmConnHciHandler+0x22>
    f3d8:	7a2b      	ldrb	r3, [r5, #8]
    f3da:	2b01      	cmp	r3, #1
    f3dc:	d001      	beq.n	f3e2 <dmConnHciHandler+0x46>
    f3de:	2000      	movs	r0, #0
    f3e0:	e002      	b.n	f3e8 <dmConnHciHandler+0x4c>
    f3e2:	4620      	mov	r0, r4
    f3e4:	f7ff ff0c 	bl	f200 <dmConnCcbAlloc>
    f3e8:	78eb      	ldrb	r3, [r5, #3]
    f3ea:	b94b      	cbnz	r3, f400 <dmConnHciHandler+0x64>
    f3ec:	2338      	movs	r3, #56	; 0x38
    f3ee:	70ab      	strb	r3, [r5, #2]
    f3f0:	b170      	cbz	r0, f410 <dmConnHciHandler+0x74>
    f3f2:	7c03      	ldrb	r3, [r0, #16]
    f3f4:	802b      	strh	r3, [r5, #0]
    f3f6:	4629      	mov	r1, r5
    f3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f3fc:	f000 bac0 	b.w	f980 <dmConnSmExecute>
    f400:	2337      	movs	r3, #55	; 0x37
    f402:	e7f4      	b.n	f3ee <dmConnHciHandler+0x52>
    f404:	8800      	ldrh	r0, [r0, #0]
    f406:	3436      	adds	r4, #54	; 0x36
    f408:	f7ff ff1f 	bl	f24a <dmConnCcbByHandle>
    f40c:	70ac      	strb	r4, [r5, #2]
    f40e:	e7ef      	b.n	f3f0 <dmConnHciHandler+0x54>
    f410:	bd38      	pop	{r3, r4, r5, pc}
    f412:	bf00      	nop
    f414:	10003e5c 	.word	0x10003e5c

0000f418 <dmConnCcbById>:
    f418:	3801      	subs	r0, #1
    f41a:	4a05      	ldr	r2, [pc, #20]	; (f430 <dmConnCcbById+0x18>)
    f41c:	b2c3      	uxtb	r3, r0
    f41e:	212c      	movs	r1, #44	; 0x2c
    f420:	fb01 2003 	mla	r0, r1, r3, r2
    f424:	7d80      	ldrb	r0, [r0, #22]
    f426:	b108      	cbz	r0, f42c <dmConnCcbById+0x14>
    f428:	fb03 2001 	mla	r0, r3, r1, r2
    f42c:	4770      	bx	lr
    f42e:	bf00      	nop
    f430:	10003e5c 	.word	0x10003e5c

0000f434 <dmConnMsgHandler>:
    f434:	b510      	push	{r4, lr}
    f436:	4604      	mov	r4, r0
    f438:	7800      	ldrb	r0, [r0, #0]
    f43a:	f7ff ffed 	bl	f418 <dmConnCcbById>
    f43e:	b120      	cbz	r0, f44a <dmConnMsgHandler+0x16>
    f440:	4621      	mov	r1, r4
    f442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f446:	f000 ba9b 	b.w	f980 <dmConnSmExecute>
    f44a:	bd10      	pop	{r4, pc}

0000f44c <dmConn2MsgHandler>:
    f44c:	b530      	push	{r4, r5, lr}
    f44e:	4604      	mov	r4, r0
    f450:	b085      	sub	sp, #20
    f452:	7800      	ldrb	r0, [r0, #0]
    f454:	f7ff ffe0 	bl	f418 <dmConnCcbById>
    f458:	b1d0      	cbz	r0, f490 <dmConn2MsgHandler+0x44>
    f45a:	78a3      	ldrb	r3, [r4, #2]
    f45c:	3b41      	subs	r3, #65	; 0x41
    f45e:	2b04      	cmp	r3, #4
    f460:	d816      	bhi.n	f490 <dmConn2MsgHandler+0x44>
    f462:	e8df f003 	tbb	[pc, r3]
    f466:	0903      	.short	0x0903
    f468:	1e17      	.short	0x1e17
    f46a:	26          	.byte	0x26
    f46b:	00          	.byte	0x00
    f46c:	8980      	ldrh	r0, [r0, #12]
    f46e:	b005      	add	sp, #20
    f470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f474:	f008 b9bc 	b.w	177f0 <HciReadRssiCmd>
    f478:	89e5      	ldrh	r5, [r4, #14]
    f47a:	8923      	ldrh	r3, [r4, #8]
    f47c:	88e2      	ldrh	r2, [r4, #6]
    f47e:	88a1      	ldrh	r1, [r4, #4]
    f480:	8980      	ldrh	r0, [r0, #12]
    f482:	9502      	str	r5, [sp, #8]
    f484:	89a5      	ldrh	r5, [r4, #12]
    f486:	9501      	str	r5, [sp, #4]
    f488:	8964      	ldrh	r4, [r4, #10]
    f48a:	9400      	str	r4, [sp, #0]
    f48c:	f007 fd18 	bl	16ec0 <HciLeRemoteConnParamReqReply>
    f490:	b005      	add	sp, #20
    f492:	bd30      	pop	{r4, r5, pc}
    f494:	7921      	ldrb	r1, [r4, #4]
    f496:	8980      	ldrh	r0, [r0, #12]
    f498:	b005      	add	sp, #20
    f49a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f49e:	f007 bd93 	b.w	16fc8 <HciLeRemoteConnParamReqNegReply>
    f4a2:	88e2      	ldrh	r2, [r4, #6]
    f4a4:	88a1      	ldrh	r1, [r4, #4]
    f4a6:	8980      	ldrh	r0, [r0, #12]
    f4a8:	b005      	add	sp, #20
    f4aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f4ae:	f007 bdb9 	b.w	17024 <HciLeSetDataLen>
    f4b2:	88a1      	ldrh	r1, [r4, #4]
    f4b4:	8980      	ldrh	r0, [r0, #12]
    f4b6:	b005      	add	sp, #20
    f4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f4bc:	f008 ba28 	b.w	17910 <HciWriteAuthPayloadTimeout>

0000f4c0 <dmConnExecCback>:
    f4c0:	b570      	push	{r4, r5, r6, lr}
    f4c2:	4e06      	ldr	r6, [pc, #24]	; (f4dc <dmConnExecCback+0x1c>)
    f4c4:	4605      	mov	r5, r0
    f4c6:	2400      	movs	r4, #0
    f4c8:	1933      	adds	r3, r6, r4
    f4ca:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    f4ce:	b10b      	cbz	r3, f4d4 <dmConnExecCback+0x14>
    f4d0:	4628      	mov	r0, r5
    f4d2:	4798      	blx	r3
    f4d4:	3404      	adds	r4, #4
    f4d6:	2c14      	cmp	r4, #20
    f4d8:	d1f6      	bne.n	f4c8 <dmConnExecCback+0x8>
    f4da:	bd70      	pop	{r4, r5, r6, pc}
    f4dc:	10003e5c 	.word	0x10003e5c

0000f4e0 <dmConnSmActConnOpened>:
    f4e0:	b570      	push	{r4, r5, r6, lr}
    f4e2:	460d      	mov	r5, r1
    f4e4:	4604      	mov	r4, r0
    f4e6:	310a      	adds	r1, #10
    f4e8:	f004 fbd6 	bl	13c98 <BdaCpy>
    f4ec:	88eb      	ldrh	r3, [r5, #6]
    f4ee:	81a3      	strh	r3, [r4, #12]
    f4f0:	7a68      	ldrb	r0, [r5, #9]
    f4f2:	f000 fb5d 	bl	fbb0 <DmHostAddrType>
    f4f6:	74e0      	strb	r0, [r4, #19]
    f4f8:	7a2a      	ldrb	r2, [r5, #8]
    f4fa:	7662      	strb	r2, [r4, #25]
    f4fc:	4b12      	ldr	r3, [pc, #72]	; (f548 <dmConnSmActConnOpened+0x68>)
    f4fe:	b9fa      	cbnz	r2, f540 <dmConnSmActConnOpened+0x60>
    f500:	7b5b      	ldrb	r3, [r3, #13]
    f502:	7523      	strb	r3, [r4, #20]
    f504:	7d23      	ldrb	r3, [r4, #20]
    f506:	1da6      	adds	r6, r4, #6
    f508:	b9e3      	cbnz	r3, f544 <dmConnSmActConnOpened+0x64>
    f50a:	f009 f875 	bl	185f8 <HciGetBdAddr>
    f50e:	4601      	mov	r1, r0
    f510:	4630      	mov	r0, r6
    f512:	f004 fbc1 	bl	13c98 <BdaCpy>
    f516:	f105 0117 	add.w	r1, r5, #23
    f51a:	f104 001a 	add.w	r0, r4, #26
    f51e:	f004 fbbb 	bl	13c98 <BdaCpy>
    f522:	f104 0020 	add.w	r0, r4, #32
    f526:	f105 011d 	add.w	r1, r5, #29
    f52a:	f004 fbb5 	bl	13c98 <BdaCpy>
    f52e:	2300      	movs	r3, #0
    f530:	81e3      	strh	r3, [r4, #14]
    f532:	2327      	movs	r3, #39	; 0x27
    f534:	70ab      	strb	r3, [r5, #2]
    f536:	4628      	mov	r0, r5
    f538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f53c:	f7ff bfc0 	b.w	f4c0 <dmConnExecCback>
    f540:	7b9b      	ldrb	r3, [r3, #14]
    f542:	e7de      	b.n	f502 <dmConnSmActConnOpened+0x22>
    f544:	4900      	ldr	r1, [pc, #0]	; (f548 <dmConnSmActConnOpened+0x68>)
    f546:	e7e3      	b.n	f510 <dmConnSmActConnOpened+0x30>
    f548:	10003fec 	.word	0x10003fec

0000f54c <dmConnSmActConnFailed>:
    f54c:	2300      	movs	r3, #0
    f54e:	7583      	strb	r3, [r0, #22]
    f550:	2328      	movs	r3, #40	; 0x28
    f552:	708b      	strb	r3, [r1, #2]
    f554:	4608      	mov	r0, r1
    f556:	f7ff bfb3 	b.w	f4c0 <dmConnExecCback>

0000f55a <dmConnSmActConnClosed>:
    f55a:	2300      	movs	r3, #0
    f55c:	7583      	strb	r3, [r0, #22]
    f55e:	2328      	movs	r3, #40	; 0x28
    f560:	708b      	strb	r3, [r1, #2]
    f562:	4608      	mov	r0, r1
    f564:	f7ff bfac 	b.w	f4c0 <dmConnExecCback>

0000f568 <dmConnOpenAccept>:
    f568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f56c:	4607      	mov	r7, r0
    f56e:	468a      	mov	sl, r1
    f570:	4691      	mov	r9, r2
    f572:	4698      	mov	r8, r3
    f574:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f578:	f006 f978 	bl	1586c <WsfTaskLock>
    f57c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f57e:	f7ff fef5 	bl	f36c <dmConnCcbByBdAddr>
    f582:	4605      	mov	r5, r0
    f584:	b918      	cbnz	r0, f58e <dmConnOpenAccept+0x26>
    f586:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f588:	f7ff fe3a 	bl	f200 <dmConnCcbAlloc>
    f58c:	4605      	mov	r5, r0
    f58e:	f006 f973 	bl	15878 <WsfTaskUnlock>
    f592:	b39d      	cbz	r5, f5fc <dmConnOpenAccept+0x94>
    f594:	2014      	movs	r0, #20
    f596:	f005 f82c 	bl	145f2 <WsfMsgAlloc>
    f59a:	4604      	mov	r4, r0
    f59c:	b338      	cbz	r0, f5ee <dmConnOpenAccept+0x86>
    f59e:	7c2b      	ldrb	r3, [r5, #16]
    f5a0:	8003      	strh	r3, [r0, #0]
    f5a2:	2e00      	cmp	r6, #0
    f5a4:	bf0c      	ite	eq
    f5a6:	2330      	moveq	r3, #48	; 0x30
    f5a8:	2332      	movne	r3, #50	; 0x32
    f5aa:	7083      	strb	r3, [r0, #2]
    f5ac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f5b0:	8103      	strh	r3, [r0, #8]
    f5b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f5b6:	7283      	strb	r3, [r0, #10]
    f5b8:	f880 a004 	strb.w	sl, [r0, #4]
    f5bc:	f880 9005 	strb.w	r9, [r0, #5]
    f5c0:	f880 8006 	strb.w	r8, [r0, #6]
    f5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f5c6:	300b      	adds	r0, #11
    f5c8:	f004 fb66 	bl	13c98 <BdaCpy>
    f5cc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f5d0:	7463      	strb	r3, [r4, #17]
    f5d2:	4b0b      	ldr	r3, [pc, #44]	; (f600 <dmConnOpenAccept+0x98>)
    f5d4:	74a7      	strb	r7, [r4, #18]
    f5d6:	7b18      	ldrb	r0, [r3, #12]
    f5d8:	4621      	mov	r1, r4
    f5da:	f005 f82e 	bl	1463a <WsfMsgSend>
    f5de:	f006 f945 	bl	1586c <WsfTaskLock>
    f5e2:	766e      	strb	r6, [r5, #25]
    f5e4:	f006 f948 	bl	15878 <WsfTaskUnlock>
    f5e8:	7c28      	ldrb	r0, [r5, #16]
    f5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5ee:	f006 f93d 	bl	1586c <WsfTaskLock>
    f5f2:	75ac      	strb	r4, [r5, #22]
    f5f4:	f006 f940 	bl	15878 <WsfTaskUnlock>
    f5f8:	4620      	mov	r0, r4
    f5fa:	e7f6      	b.n	f5ea <dmConnOpenAccept+0x82>
    f5fc:	4628      	mov	r0, r5
    f5fe:	e7f4      	b.n	f5ea <dmConnOpenAccept+0x82>
    f600:	10003fec 	.word	0x10003fec

0000f604 <DmConnInit>:
    f604:	4b05      	ldr	r3, [pc, #20]	; (f61c <DmConnInit+0x18>)
    f606:	4a06      	ldr	r2, [pc, #24]	; (f620 <DmConnInit+0x1c>)
    f608:	f103 010c 	add.w	r1, r3, #12
    f60c:	60d1      	str	r1, [r2, #12]
    f60e:	f103 0118 	add.w	r1, r3, #24
    f612:	6111      	str	r1, [r2, #16]
    f614:	4a03      	ldr	r2, [pc, #12]	; (f624 <DmConnInit+0x20>)
    f616:	3324      	adds	r3, #36	; 0x24
    f618:	6013      	str	r3, [r2, #0]
    f61a:	4770      	bx	lr
    f61c:	00025114 	.word	0x00025114
    f620:	10002b54 	.word	0x10002b54
    f624:	10003fe0 	.word	0x10003fe0

0000f628 <DmConnRegister>:
    f628:	b538      	push	{r3, r4, r5, lr}
    f62a:	4604      	mov	r4, r0
    f62c:	460d      	mov	r5, r1
    f62e:	3458      	adds	r4, #88	; 0x58
    f630:	f006 f91c 	bl	1586c <WsfTaskLock>
    f634:	4b03      	ldr	r3, [pc, #12]	; (f644 <DmConnRegister+0x1c>)
    f636:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    f63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f63e:	f006 b91b 	b.w	15878 <WsfTaskUnlock>
    f642:	bf00      	nop
    f644:	10003e5c 	.word	0x10003e5c

0000f648 <DmConnClose>:
    f648:	b570      	push	{r4, r5, r6, lr}
    f64a:	4604      	mov	r4, r0
    f64c:	2006      	movs	r0, #6
    f64e:	460e      	mov	r6, r1
    f650:	4615      	mov	r5, r2
    f652:	f004 ffce 	bl	145f2 <WsfMsgAlloc>
    f656:	b158      	cbz	r0, f670 <DmConnClose+0x28>
    f658:	2331      	movs	r3, #49	; 0x31
    f65a:	7083      	strb	r3, [r0, #2]
    f65c:	4b05      	ldr	r3, [pc, #20]	; (f674 <DmConnClose+0x2c>)
    f65e:	8006      	strh	r6, [r0, #0]
    f660:	7105      	strb	r5, [r0, #4]
    f662:	7144      	strb	r4, [r0, #5]
    f664:	4601      	mov	r1, r0
    f666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f66a:	7b18      	ldrb	r0, [r3, #12]
    f66c:	f004 bfe5 	b.w	1463a <WsfMsgSend>
    f670:	bd70      	pop	{r4, r5, r6, pc}
    f672:	bf00      	nop
    f674:	10003fec 	.word	0x10003fec

0000f678 <DmReadRemoteFeatures>:
    f678:	b508      	push	{r3, lr}
    f67a:	f7ff fecd 	bl	f418 <dmConnCcbById>
    f67e:	b120      	cbz	r0, f68a <DmReadRemoteFeatures+0x12>
    f680:	8980      	ldrh	r0, [r0, #12]
    f682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f686:	f007 be44 	b.w	17312 <HciLeReadRemoteFeatCmd>
    f68a:	bd08      	pop	{r3, pc}

0000f68c <DmConnUpdate>:
    f68c:	b538      	push	{r3, r4, r5, lr}
    f68e:	4605      	mov	r5, r0
    f690:	2010      	movs	r0, #16
    f692:	460c      	mov	r4, r1
    f694:	f004 ffad 	bl	145f2 <WsfMsgAlloc>
    f698:	b1d0      	cbz	r0, f6d0 <DmConnUpdate+0x44>
    f69a:	4a0e      	ldr	r2, [pc, #56]	; (f6d4 <DmConnUpdate+0x48>)
    f69c:	1e6b      	subs	r3, r5, #1
    f69e:	212c      	movs	r1, #44	; 0x2c
    f6a0:	fb01 2303 	mla	r3, r1, r3, r2
    f6a4:	4602      	mov	r2, r0
    f6a6:	7e5b      	ldrb	r3, [r3, #25]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	bf0c      	ite	eq
    f6ac:	2333      	moveq	r3, #51	; 0x33
    f6ae:	2334      	movne	r3, #52	; 0x34
    f6b0:	7083      	strb	r3, [r0, #2]
    f6b2:	f822 5b04 	strh.w	r5, [r2], #4
    f6b6:	6823      	ldr	r3, [r4, #0]
    f6b8:	6043      	str	r3, [r0, #4]
    f6ba:	6863      	ldr	r3, [r4, #4]
    f6bc:	6053      	str	r3, [r2, #4]
    f6be:	68a3      	ldr	r3, [r4, #8]
    f6c0:	6093      	str	r3, [r2, #8]
    f6c2:	4b05      	ldr	r3, [pc, #20]	; (f6d8 <DmConnUpdate+0x4c>)
    f6c4:	4601      	mov	r1, r0
    f6c6:	7b18      	ldrb	r0, [r3, #12]
    f6c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f6cc:	f004 bfb5 	b.w	1463a <WsfMsgSend>
    f6d0:	bd38      	pop	{r3, r4, r5, pc}
    f6d2:	bf00      	nop
    f6d4:	10003e5c 	.word	0x10003e5c
    f6d8:	10003fec 	.word	0x10003fec

0000f6dc <DmConnSetScanInterval>:
    f6dc:	b538      	push	{r3, r4, r5, lr}
    f6de:	4605      	mov	r5, r0
    f6e0:	460c      	mov	r4, r1
    f6e2:	f006 f8c3 	bl	1586c <WsfTaskLock>
    f6e6:	2001      	movs	r0, #1
    f6e8:	f000 fa92 	bl	fc10 <DmInitPhyToIdx>
    f6ec:	4b05      	ldr	r3, [pc, #20]	; (f704 <DmConnSetScanInterval+0x28>)
    f6ee:	30c0      	adds	r0, #192	; 0xc0
    f6f0:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
    f6f4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f6f8:	805c      	strh	r4, [r3, #2]
    f6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f6fe:	f006 b8bb 	b.w	15878 <WsfTaskUnlock>
    f702:	bf00      	nop
    f704:	10003e5c 	.word	0x10003e5c

0000f708 <DmExtConnSetScanInterval>:
    f708:	b570      	push	{r4, r5, r6, lr}
    f70a:	2400      	movs	r4, #0
    f70c:	fa40 f304 	asr.w	r3, r0, r4
    f710:	07db      	lsls	r3, r3, #31
    f712:	d515      	bpl.n	f740 <DmExtConnSetScanInterval+0x38>
    f714:	880e      	ldrh	r6, [r1, #0]
    f716:	8815      	ldrh	r5, [r2, #0]
    f718:	f006 f8a8 	bl	1586c <WsfTaskLock>
    f71c:	2001      	movs	r0, #1
    f71e:	40a0      	lsls	r0, r4
    f720:	b2c0      	uxtb	r0, r0
    f722:	f000 fa75 	bl	fc10 <DmInitPhyToIdx>
    f726:	4b08      	ldr	r3, [pc, #32]	; (f748 <DmExtConnSetScanInterval+0x40>)
    f728:	30c0      	adds	r0, #192	; 0xc0
    f72a:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    f72e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f732:	805d      	strh	r5, [r3, #2]
    f734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f738:	f006 b89e 	b.w	15878 <WsfTaskUnlock>
    f73c:	3401      	adds	r4, #1
    f73e:	e7e5      	b.n	f70c <DmExtConnSetScanInterval+0x4>
    f740:	2c07      	cmp	r4, #7
    f742:	d1fb      	bne.n	f73c <DmExtConnSetScanInterval+0x34>
    f744:	bd70      	pop	{r4, r5, r6, pc}
    f746:	bf00      	nop
    f748:	10003e5c 	.word	0x10003e5c

0000f74c <DmConnSetConnSpec>:
    f74c:	4601      	mov	r1, r0
    f74e:	2001      	movs	r0, #1
    f750:	e53c      	b.n	f1cc <dmConnSetConnSpec>

0000f752 <DmExtConnSetConnSpec>:
    f752:	2300      	movs	r3, #0
    f754:	fa40 f203 	asr.w	r2, r0, r3
    f758:	07d2      	lsls	r2, r2, #31
    f75a:	d505      	bpl.n	f768 <DmExtConnSetConnSpec+0x16>
    f75c:	2001      	movs	r0, #1
    f75e:	4098      	lsls	r0, r3
    f760:	b2c0      	uxtb	r0, r0
    f762:	e533      	b.n	f1cc <dmConnSetConnSpec>
    f764:	3301      	adds	r3, #1
    f766:	e7f5      	b.n	f754 <DmExtConnSetConnSpec+0x2>
    f768:	2b07      	cmp	r3, #7
    f76a:	d1fb      	bne.n	f764 <DmExtConnSetConnSpec+0x12>
    f76c:	4770      	bx	lr

0000f76e <DmConnReadRssi>:
    f76e:	b510      	push	{r4, lr}
    f770:	4604      	mov	r4, r0
    f772:	2004      	movs	r0, #4
    f774:	f004 ff3d 	bl	145f2 <WsfMsgAlloc>
    f778:	4601      	mov	r1, r0
    f77a:	b140      	cbz	r0, f78e <DmConnReadRssi+0x20>
    f77c:	2341      	movs	r3, #65	; 0x41
    f77e:	7083      	strb	r3, [r0, #2]
    f780:	4b03      	ldr	r3, [pc, #12]	; (f790 <DmConnReadRssi+0x22>)
    f782:	8004      	strh	r4, [r0, #0]
    f784:	7b18      	ldrb	r0, [r3, #12]
    f786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f78a:	f004 bf56 	b.w	1463a <WsfMsgSend>
    f78e:	bd10      	pop	{r4, pc}
    f790:	10003fec 	.word	0x10003fec

0000f794 <DmRemoteConnParamReqReply>:
    f794:	b538      	push	{r3, r4, r5, lr}
    f796:	4605      	mov	r5, r0
    f798:	2010      	movs	r0, #16
    f79a:	460c      	mov	r4, r1
    f79c:	f004 ff29 	bl	145f2 <WsfMsgAlloc>
    f7a0:	b188      	cbz	r0, f7c6 <DmRemoteConnParamReqReply+0x32>
    f7a2:	4602      	mov	r2, r0
    f7a4:	2342      	movs	r3, #66	; 0x42
    f7a6:	7083      	strb	r3, [r0, #2]
    f7a8:	f822 5b04 	strh.w	r5, [r2], #4
    f7ac:	6823      	ldr	r3, [r4, #0]
    f7ae:	6043      	str	r3, [r0, #4]
    f7b0:	6863      	ldr	r3, [r4, #4]
    f7b2:	6053      	str	r3, [r2, #4]
    f7b4:	68a3      	ldr	r3, [r4, #8]
    f7b6:	6093      	str	r3, [r2, #8]
    f7b8:	4b03      	ldr	r3, [pc, #12]	; (f7c8 <DmRemoteConnParamReqReply+0x34>)
    f7ba:	4601      	mov	r1, r0
    f7bc:	7b18      	ldrb	r0, [r3, #12]
    f7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f7c2:	f004 bf3a 	b.w	1463a <WsfMsgSend>
    f7c6:	bd38      	pop	{r3, r4, r5, pc}
    f7c8:	10003fec 	.word	0x10003fec

0000f7cc <DmRemoteConnParamReqNegReply>:
    f7cc:	b538      	push	{r3, r4, r5, lr}
    f7ce:	4605      	mov	r5, r0
    f7d0:	2006      	movs	r0, #6
    f7d2:	460c      	mov	r4, r1
    f7d4:	f004 ff0d 	bl	145f2 <WsfMsgAlloc>
    f7d8:	b150      	cbz	r0, f7f0 <DmRemoteConnParamReqNegReply+0x24>
    f7da:	2343      	movs	r3, #67	; 0x43
    f7dc:	7083      	strb	r3, [r0, #2]
    f7de:	4b05      	ldr	r3, [pc, #20]	; (f7f4 <DmRemoteConnParamReqNegReply+0x28>)
    f7e0:	8005      	strh	r5, [r0, #0]
    f7e2:	7104      	strb	r4, [r0, #4]
    f7e4:	4601      	mov	r1, r0
    f7e6:	7b18      	ldrb	r0, [r3, #12]
    f7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f7ec:	f004 bf25 	b.w	1463a <WsfMsgSend>
    f7f0:	bd38      	pop	{r3, r4, r5, pc}
    f7f2:	bf00      	nop
    f7f4:	10003fec 	.word	0x10003fec

0000f7f8 <DmConnSetDataLen>:
    f7f8:	b570      	push	{r4, r5, r6, lr}
    f7fa:	4606      	mov	r6, r0
    f7fc:	2008      	movs	r0, #8
    f7fe:	460d      	mov	r5, r1
    f800:	4614      	mov	r4, r2
    f802:	f004 fef6 	bl	145f2 <WsfMsgAlloc>
    f806:	b158      	cbz	r0, f820 <DmConnSetDataLen+0x28>
    f808:	2344      	movs	r3, #68	; 0x44
    f80a:	7083      	strb	r3, [r0, #2]
    f80c:	4b05      	ldr	r3, [pc, #20]	; (f824 <DmConnSetDataLen+0x2c>)
    f80e:	8006      	strh	r6, [r0, #0]
    f810:	8085      	strh	r5, [r0, #4]
    f812:	80c4      	strh	r4, [r0, #6]
    f814:	4601      	mov	r1, r0
    f816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f81a:	7b18      	ldrb	r0, [r3, #12]
    f81c:	f004 bf0d 	b.w	1463a <WsfMsgSend>
    f820:	bd70      	pop	{r4, r5, r6, pc}
    f822:	bf00      	nop
    f824:	10003fec 	.word	0x10003fec

0000f828 <DmWriteAuthPayloadTimeout>:
    f828:	b538      	push	{r3, r4, r5, lr}
    f82a:	4605      	mov	r5, r0
    f82c:	2006      	movs	r0, #6
    f82e:	460c      	mov	r4, r1
    f830:	f004 fedf 	bl	145f2 <WsfMsgAlloc>
    f834:	b150      	cbz	r0, f84c <DmWriteAuthPayloadTimeout+0x24>
    f836:	2345      	movs	r3, #69	; 0x45
    f838:	7083      	strb	r3, [r0, #2]
    f83a:	4b05      	ldr	r3, [pc, #20]	; (f850 <DmWriteAuthPayloadTimeout+0x28>)
    f83c:	8005      	strh	r5, [r0, #0]
    f83e:	8084      	strh	r4, [r0, #4]
    f840:	4601      	mov	r1, r0
    f842:	7b18      	ldrb	r0, [r3, #12]
    f844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f848:	f004 bef7 	b.w	1463a <WsfMsgSend>
    f84c:	bd38      	pop	{r3, r4, r5, pc}
    f84e:	bf00      	nop
    f850:	10003fec 	.word	0x10003fec

0000f854 <DmConnIdByHandle>:
    f854:	b510      	push	{r4, lr}
    f856:	4908      	ldr	r1, [pc, #32]	; (f878 <DmConnIdByHandle+0x24>)
    f858:	2300      	movs	r3, #0
    f85a:	18ca      	adds	r2, r1, r3
    f85c:	7d94      	ldrb	r4, [r2, #22]
    f85e:	b124      	cbz	r4, f86a <DmConnIdByHandle+0x16>
    f860:	8994      	ldrh	r4, [r2, #12]
    f862:	4284      	cmp	r4, r0
    f864:	d101      	bne.n	f86a <DmConnIdByHandle+0x16>
    f866:	7c10      	ldrb	r0, [r2, #16]
    f868:	bd10      	pop	{r4, pc}
    f86a:	332c      	adds	r3, #44	; 0x2c
    f86c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    f870:	d1f3      	bne.n	f85a <DmConnIdByHandle+0x6>
    f872:	2000      	movs	r0, #0
    f874:	e7f8      	b.n	f868 <DmConnIdByHandle+0x14>
    f876:	bf00      	nop
    f878:	10003e5c 	.word	0x10003e5c

0000f87c <DmConnInUse>:
    f87c:	4b03      	ldr	r3, [pc, #12]	; (f88c <DmConnInUse+0x10>)
    f87e:	222c      	movs	r2, #44	; 0x2c
    f880:	3801      	subs	r0, #1
    f882:	fb02 3000 	mla	r0, r2, r0, r3
    f886:	7d80      	ldrb	r0, [r0, #22]
    f888:	4770      	bx	lr
    f88a:	bf00      	nop
    f88c:	10003e5c 	.word	0x10003e5c

0000f890 <DmConnPeerAddrType>:
    f890:	4b03      	ldr	r3, [pc, #12]	; (f8a0 <DmConnPeerAddrType+0x10>)
    f892:	222c      	movs	r2, #44	; 0x2c
    f894:	3801      	subs	r0, #1
    f896:	fb02 3000 	mla	r0, r2, r0, r3
    f89a:	7cc0      	ldrb	r0, [r0, #19]
    f89c:	4770      	bx	lr
    f89e:	bf00      	nop
    f8a0:	10003e5c 	.word	0x10003e5c

0000f8a4 <DmConnPeerAddr>:
    f8a4:	4b02      	ldr	r3, [pc, #8]	; (f8b0 <DmConnPeerAddr+0xc>)
    f8a6:	222c      	movs	r2, #44	; 0x2c
    f8a8:	3801      	subs	r0, #1
    f8aa:	fb02 3000 	mla	r0, r2, r0, r3
    f8ae:	4770      	bx	lr
    f8b0:	10003e5c 	.word	0x10003e5c

0000f8b4 <DmConnLocalAddrType>:
    f8b4:	4b03      	ldr	r3, [pc, #12]	; (f8c4 <DmConnLocalAddrType+0x10>)
    f8b6:	222c      	movs	r2, #44	; 0x2c
    f8b8:	3801      	subs	r0, #1
    f8ba:	fb02 3000 	mla	r0, r2, r0, r3
    f8be:	7d00      	ldrb	r0, [r0, #20]
    f8c0:	4770      	bx	lr
    f8c2:	bf00      	nop
    f8c4:	10003e5c 	.word	0x10003e5c

0000f8c8 <DmConnLocalAddr>:
    f8c8:	4b03      	ldr	r3, [pc, #12]	; (f8d8 <DmConnLocalAddr+0x10>)
    f8ca:	222c      	movs	r2, #44	; 0x2c
    f8cc:	3801      	subs	r0, #1
    f8ce:	fb02 3000 	mla	r0, r2, r0, r3
    f8d2:	3006      	adds	r0, #6
    f8d4:	4770      	bx	lr
    f8d6:	bf00      	nop
    f8d8:	10003e5c 	.word	0x10003e5c

0000f8dc <DmConnPeerRpa>:
    f8dc:	4b03      	ldr	r3, [pc, #12]	; (f8ec <DmConnPeerRpa+0x10>)
    f8de:	222c      	movs	r2, #44	; 0x2c
    f8e0:	3801      	subs	r0, #1
    f8e2:	fb02 3000 	mla	r0, r2, r0, r3
    f8e6:	3020      	adds	r0, #32
    f8e8:	4770      	bx	lr
    f8ea:	bf00      	nop
    f8ec:	10003e5c 	.word	0x10003e5c

0000f8f0 <DmConnLocalRpa>:
    f8f0:	4b03      	ldr	r3, [pc, #12]	; (f900 <DmConnLocalRpa+0x10>)
    f8f2:	222c      	movs	r2, #44	; 0x2c
    f8f4:	3801      	subs	r0, #1
    f8f6:	fb02 3000 	mla	r0, r2, r0, r3
    f8fa:	301a      	adds	r0, #26
    f8fc:	4770      	bx	lr
    f8fe:	bf00      	nop
    f900:	10003e5c 	.word	0x10003e5c

0000f904 <DmConnSecLevel>:
    f904:	4b03      	ldr	r3, [pc, #12]	; (f914 <DmConnSecLevel+0x10>)
    f906:	222c      	movs	r2, #44	; 0x2c
    f908:	3801      	subs	r0, #1
    f90a:	fb02 3000 	mla	r0, r2, r0, r3
    f90e:	7dc0      	ldrb	r0, [r0, #23]
    f910:	4770      	bx	lr
    f912:	bf00      	nop
    f914:	10003e5c 	.word	0x10003e5c

0000f918 <DmConnSetIdle>:
    f918:	b570      	push	{r4, r5, r6, lr}
    f91a:	4604      	mov	r4, r0
    f91c:	4616      	mov	r6, r2
    f91e:	460d      	mov	r5, r1
    f920:	f005 ffa4 	bl	1586c <WsfTaskLock>
    f924:	4b08      	ldr	r3, [pc, #32]	; (f948 <DmConnSetIdle+0x30>)
    f926:	1e60      	subs	r0, r4, #1
    f928:	222c      	movs	r2, #44	; 0x2c
    f92a:	fb02 3000 	mla	r0, r2, r0, r3
    f92e:	7d83      	ldrb	r3, [r0, #22]
    f930:	b123      	cbz	r3, f93c <DmConnSetIdle+0x24>
    f932:	89c1      	ldrh	r1, [r0, #14]
    f934:	b936      	cbnz	r6, f944 <DmConnSetIdle+0x2c>
    f936:	ea21 0505 	bic.w	r5, r1, r5
    f93a:	81c5      	strh	r5, [r0, #14]
    f93c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f940:	f005 bf9a 	b.w	15878 <WsfTaskUnlock>
    f944:	430d      	orrs	r5, r1
    f946:	e7f8      	b.n	f93a <DmConnSetIdle+0x22>
    f948:	10003e5c 	.word	0x10003e5c

0000f94c <DmConnCheckIdle>:
    f94c:	b510      	push	{r4, lr}
    f94e:	4604      	mov	r4, r0
    f950:	f005 ff8c 	bl	1586c <WsfTaskLock>
    f954:	4804      	ldr	r0, [pc, #16]	; (f968 <DmConnCheckIdle+0x1c>)
    f956:	232c      	movs	r3, #44	; 0x2c
    f958:	3c01      	subs	r4, #1
    f95a:	fb03 0404 	mla	r4, r3, r4, r0
    f95e:	89e4      	ldrh	r4, [r4, #14]
    f960:	f005 ff8a 	bl	15878 <WsfTaskUnlock>
    f964:	4620      	mov	r0, r4
    f966:	bd10      	pop	{r4, pc}
    f968:	10003e5c 	.word	0x10003e5c

0000f96c <DmConnRole>:
    f96c:	4b03      	ldr	r3, [pc, #12]	; (f97c <DmConnRole+0x10>)
    f96e:	222c      	movs	r2, #44	; 0x2c
    f970:	3801      	subs	r0, #1
    f972:	fb02 3000 	mla	r0, r2, r0, r3
    f976:	7e40      	ldrb	r0, [r0, #25]
    f978:	4770      	bx	lr
    f97a:	bf00      	nop
    f97c:	10003e5c 	.word	0x10003e5c

0000f980 <dmConnSmExecute>:
    f980:	788b      	ldrb	r3, [r1, #2]
    f982:	7d42      	ldrb	r2, [r0, #21]
    f984:	b470      	push	{r4, r5, r6}
    f986:	f003 030f 	and.w	r3, r3, #15
    f98a:	4d0c      	ldr	r5, [pc, #48]	; (f9bc <dmConnSmExecute+0x3c>)
    f98c:	260d      	movs	r6, #13
    f98e:	fb06 3202 	mla	r2, r6, r2, r3
    f992:	eb05 0342 	add.w	r3, r5, r2, lsl #1
    f996:	f815 2012 	ldrb.w	r2, [r5, r2, lsl #1]
    f99a:	785b      	ldrb	r3, [r3, #1]
    f99c:	7542      	strb	r2, [r0, #21]
    f99e:	091c      	lsrs	r4, r3, #4
    f9a0:	4a07      	ldr	r2, [pc, #28]	; (f9c0 <dmConnSmExecute+0x40>)
    f9a2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    f9a6:	b12a      	cbz	r2, f9b4 <dmConnSmExecute+0x34>
    f9a8:	f003 030f 	and.w	r3, r3, #15
    f9ac:	bc70      	pop	{r4, r5, r6}
    f9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b2:	4718      	bx	r3
    f9b4:	bc70      	pop	{r4, r5, r6}
    f9b6:	f7ff bbc7 	b.w	f148 <dmConnSmActNone>
    f9ba:	bf00      	nop
    f9bc:	00025150 	.word	0x00025150
    f9c0:	10003fe0 	.word	0x10003fe0

0000f9c4 <dmDevHciHandler>:
    f9c4:	7882      	ldrb	r2, [r0, #2]
    f9c6:	4603      	mov	r3, r0
    f9c8:	b92a      	cbnz	r2, f9d6 <dmDevHciHandler+0x12>
    f9ca:	490b      	ldr	r1, [pc, #44]	; (f9f8 <dmDevHciHandler+0x34>)
    f9cc:	740a      	strb	r2, [r1, #16]
    f9ce:	688b      	ldr	r3, [r1, #8]
    f9d0:	2220      	movs	r2, #32
    f9d2:	7082      	strb	r2, [r0, #2]
    f9d4:	4718      	bx	r3
    f9d6:	2a13      	cmp	r2, #19
    f9d8:	d104      	bne.n	f9e4 <dmDevHciHandler+0x20>
    f9da:	2253      	movs	r2, #83	; 0x53
    f9dc:	709a      	strb	r2, [r3, #2]
    f9de:	4b06      	ldr	r3, [pc, #24]	; (f9f8 <dmDevHciHandler+0x34>)
    f9e0:	689b      	ldr	r3, [r3, #8]
    f9e2:	e7f7      	b.n	f9d4 <dmDevHciHandler+0x10>
    f9e4:	2a14      	cmp	r2, #20
    f9e6:	d101      	bne.n	f9ec <dmDevHciHandler+0x28>
    f9e8:	2255      	movs	r2, #85	; 0x55
    f9ea:	e7f7      	b.n	f9dc <dmDevHciHandler+0x18>
    f9ec:	2a12      	cmp	r2, #18
    f9ee:	d101      	bne.n	f9f4 <dmDevHciHandler+0x30>
    f9f0:	2254      	movs	r2, #84	; 0x54
    f9f2:	e7f3      	b.n	f9dc <dmDevHciHandler+0x18>
    f9f4:	4770      	bx	lr
    f9f6:	bf00      	nop
    f9f8:	10003fec 	.word	0x10003fec

0000f9fc <dmDevActReset>:
    f9fc:	b538      	push	{r3, r4, r5, lr}
    f9fe:	4b08      	ldr	r3, [pc, #32]	; (fa20 <dmDevActReset+0x24>)
    fa00:	4d08      	ldr	r5, [pc, #32]	; (fa24 <dmDevActReset+0x28>)
    fa02:	2201      	movs	r2, #1
    fa04:	741a      	strb	r2, [r3, #16]
    fa06:	2400      	movs	r4, #0
    fa08:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    fa0c:	3401      	adds	r4, #1
    fa0e:	681b      	ldr	r3, [r3, #0]
    fa10:	4798      	blx	r3
    fa12:	2c0c      	cmp	r4, #12
    fa14:	d1f8      	bne.n	fa08 <dmDevActReset+0xc>
    fa16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fa1a:	f008 bc53 	b.w	182c4 <HciResetSequence>
    fa1e:	bf00      	nop
    fa20:	10003fec 	.word	0x10003fec
    fa24:	10002b54 	.word	0x10002b54

0000fa28 <dmDevMsgHandler>:
    fa28:	f7ff bfe8 	b.w	f9fc <dmDevActReset>

0000fa2c <DmDevReset>:
    fa2c:	b508      	push	{r3, lr}
    fa2e:	2004      	movs	r0, #4
    fa30:	f004 fddf 	bl	145f2 <WsfMsgAlloc>
    fa34:	4601      	mov	r1, r0
    fa36:	b138      	cbz	r0, fa48 <DmDevReset+0x1c>
    fa38:	2370      	movs	r3, #112	; 0x70
    fa3a:	7083      	strb	r3, [r0, #2]
    fa3c:	4b03      	ldr	r3, [pc, #12]	; (fa4c <DmDevReset+0x20>)
    fa3e:	7b18      	ldrb	r0, [r3, #12]
    fa40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fa44:	f004 bdf9 	b.w	1463a <WsfMsgSend>
    fa48:	bd08      	pop	{r3, pc}
    fa4a:	bf00      	nop
    fa4c:	10003fec 	.word	0x10003fec

0000fa50 <DmDevSetRandAddr>:
    fa50:	b510      	push	{r4, lr}
    fa52:	4601      	mov	r1, r0
    fa54:	4604      	mov	r4, r0
    fa56:	4804      	ldr	r0, [pc, #16]	; (fa68 <DmDevSetRandAddr+0x18>)
    fa58:	f004 f91e 	bl	13c98 <BdaCpy>
    fa5c:	4620      	mov	r0, r4
    fa5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa62:	f007 bd99 	b.w	17598 <HciLeSetRandAddrCmd>
    fa66:	bf00      	nop
    fa68:	10003fec 	.word	0x10003fec

0000fa6c <DmDevWhiteListAdd>:
    fa6c:	f007 b8a0 	b.w	16bb0 <HciLeAddDevWhiteListCmd>

0000fa70 <DmDevWhiteListRemove>:
    fa70:	f007 bc9b 	b.w	173aa <HciLeRemoveDevWhiteListCmd>

0000fa74 <DmDevWhiteListClear>:
    fa74:	f007 b8c1 	b.w	16bfa <HciLeClearWhiteListCmd>

0000fa78 <dmDevSetFilterPolicy>:
    fa78:	2901      	cmp	r1, #1
    fa7a:	d00b      	beq.n	fa94 <dmDevSetFilterPolicy+0x1c>
    fa7c:	d303      	bcc.n	fa86 <dmDevSetFilterPolicy+0xe>
    fa7e:	2902      	cmp	r1, #2
    fa80:	d00d      	beq.n	fa9e <dmDevSetFilterPolicy+0x26>
    fa82:	2000      	movs	r0, #0
    fa84:	4770      	bx	lr
    fa86:	2a03      	cmp	r2, #3
    fa88:	d8fb      	bhi.n	fa82 <dmDevSetFilterPolicy+0xa>
    fa8a:	4b07      	ldr	r3, [pc, #28]	; (faa8 <dmDevSetFilterPolicy+0x30>)
    fa8c:	4418      	add	r0, r3
    fa8e:	7442      	strb	r2, [r0, #17]
    fa90:	2001      	movs	r0, #1
    fa92:	4770      	bx	lr
    fa94:	2a03      	cmp	r2, #3
    fa96:	d8f4      	bhi.n	fa82 <dmDevSetFilterPolicy+0xa>
    fa98:	4b03      	ldr	r3, [pc, #12]	; (faa8 <dmDevSetFilterPolicy+0x30>)
    fa9a:	749a      	strb	r2, [r3, #18]
    fa9c:	e7f8      	b.n	fa90 <dmDevSetFilterPolicy+0x18>
    fa9e:	2a01      	cmp	r2, #1
    faa0:	d8ef      	bhi.n	fa82 <dmDevSetFilterPolicy+0xa>
    faa2:	4b01      	ldr	r3, [pc, #4]	; (faa8 <dmDevSetFilterPolicy+0x30>)
    faa4:	74da      	strb	r2, [r3, #19]
    faa6:	e7f3      	b.n	fa90 <dmDevSetFilterPolicy+0x18>
    faa8:	10003fec 	.word	0x10003fec

0000faac <DmDevSetFilterPolicy>:
    faac:	460a      	mov	r2, r1
    faae:	4601      	mov	r1, r0
    fab0:	2000      	movs	r0, #0
    fab2:	f7ff bfe1 	b.w	fa78 <dmDevSetFilterPolicy>

0000fab6 <DmDevSetExtFilterPolicy>:
    fab6:	f7ff bfdf 	b.w	fa78 <dmDevSetFilterPolicy>

0000faba <DmDevVsInit>:
    faba:	f00a bed8 	b.w	1a86e <HciVsInit>
    fabe:	bf00      	nop

0000fac0 <dmHciEvtCback>:
    fac0:	4a06      	ldr	r2, [pc, #24]	; (fadc <dmHciEvtCback+0x1c>)
    fac2:	7883      	ldrb	r3, [r0, #2]
    fac4:	7c12      	ldrb	r2, [r2, #16]
    fac6:	b102      	cbz	r2, faca <dmHciEvtCback+0xa>
    fac8:	b933      	cbnz	r3, fad8 <dmHciEvtCback+0x18>
    faca:	4a05      	ldr	r2, [pc, #20]	; (fae0 <dmHciEvtCback+0x20>)
    facc:	5cd2      	ldrb	r2, [r2, r3]
    face:	4b05      	ldr	r3, [pc, #20]	; (fae4 <dmHciEvtCback+0x24>)
    fad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fad4:	685b      	ldr	r3, [r3, #4]
    fad6:	4718      	bx	r3
    fad8:	4770      	bx	lr
    fada:	bf00      	nop
    fadc:	10003fec 	.word	0x10003fec
    fae0:	000251e0 	.word	0x000251e0
    fae4:	10002b54 	.word	0x10002b54

0000fae8 <dmEmptyReset>:
    fae8:	4770      	bx	lr

0000faea <dmEmptyHandler>:
    faea:	4770      	bx	lr

0000faec <DmRegister>:
    faec:	b510      	push	{r4, lr}
    faee:	4b0a      	ldr	r3, [pc, #40]	; (fb18 <DmRegister+0x2c>)
    faf0:	4c0a      	ldr	r4, [pc, #40]	; (fb1c <DmRegister+0x30>)
    faf2:	6a1a      	ldr	r2, [r3, #32]
    faf4:	4b0a      	ldr	r3, [pc, #40]	; (fb20 <DmRegister+0x34>)
    faf6:	60a0      	str	r0, [r4, #8]
    faf8:	429a      	cmp	r2, r3
    fafa:	b09a      	sub	sp, #104	; 0x68
    fafc:	d00a      	beq.n	fb14 <DmRegister+0x28>
    fafe:	f008 fd91 	bl	18624 <HciGetMaxRxAclLen>
    fb02:	2844      	cmp	r0, #68	; 0x44
    fb04:	d806      	bhi.n	fb14 <DmRegister+0x28>
    fb06:	a81a      	add	r0, sp, #104	; 0x68
    fb08:	f04f 73a9 	mov.w	r3, #22151168	; 0x1520000
    fb0c:	f840 3d64 	str.w	r3, [r0, #-100]!
    fb10:	68a3      	ldr	r3, [r4, #8]
    fb12:	4798      	blx	r3
    fb14:	b01a      	add	sp, #104	; 0x68
    fb16:	bd10      	pop	{r4, pc}
    fb18:	10002b54 	.word	0x10002b54
    fb1c:	10003fec 	.word	0x10003fec
    fb20:	0002521c 	.word	0x0002521c

0000fb24 <DmFindAdType>:
    fb24:	b530      	push	{r4, r5, lr}
    fb26:	b121      	cbz	r1, fb32 <DmFindAdType+0xe>
    fb28:	7813      	ldrb	r3, [r2, #0]
    fb2a:	b173      	cbz	r3, fb4a <DmFindAdType+0x26>
    fb2c:	b29c      	uxth	r4, r3
    fb2e:	428c      	cmp	r4, r1
    fb30:	d302      	bcc.n	fb38 <DmFindAdType+0x14>
    fb32:	2200      	movs	r2, #0
    fb34:	4610      	mov	r0, r2
    fb36:	bd30      	pop	{r4, r5, pc}
    fb38:	7855      	ldrb	r5, [r2, #1]
    fb3a:	4285      	cmp	r5, r0
    fb3c:	d0fa      	beq.n	fb34 <DmFindAdType+0x10>
    fb3e:	43e4      	mvns	r4, r4
    fb40:	4421      	add	r1, r4
    fb42:	3301      	adds	r3, #1
    fb44:	b289      	uxth	r1, r1
    fb46:	441a      	add	r2, r3
    fb48:	e7ed      	b.n	fb26 <DmFindAdType+0x2>
    fb4a:	461a      	mov	r2, r3
    fb4c:	e7f2      	b.n	fb34 <DmFindAdType+0x10>

0000fb4e <DmHandlerInit>:
    fb4e:	4b04      	ldr	r3, [pc, #16]	; (fb60 <DmHandlerInit+0x12>)
    fb50:	2200      	movs	r2, #0
    fb52:	7318      	strb	r0, [r3, #12]
    fb54:	4803      	ldr	r0, [pc, #12]	; (fb64 <DmHandlerInit+0x16>)
    fb56:	751a      	strb	r2, [r3, #20]
    fb58:	741a      	strb	r2, [r3, #16]
    fb5a:	f005 bdf1 	b.w	15740 <HciEvtRegister>
    fb5e:	bf00      	nop
    fb60:	10003fec 	.word	0x10003fec
    fb64:	0000fac1 	.word	0x0000fac1

0000fb68 <DmHandler>:
    fb68:	b151      	cbz	r1, fb80 <DmHandler+0x18>
    fb6a:	4b06      	ldr	r3, [pc, #24]	; (fb84 <DmHandler+0x1c>)
    fb6c:	7c1b      	ldrb	r3, [r3, #16]
    fb6e:	b93b      	cbnz	r3, fb80 <DmHandler+0x18>
    fb70:	788b      	ldrb	r3, [r1, #2]
    fb72:	4a05      	ldr	r2, [pc, #20]	; (fb88 <DmHandler+0x20>)
    fb74:	091b      	lsrs	r3, r3, #4
    fb76:	4608      	mov	r0, r1
    fb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb7c:	689b      	ldr	r3, [r3, #8]
    fb7e:	4718      	bx	r3
    fb80:	4770      	bx	lr
    fb82:	bf00      	nop
    fb84:	10003fec 	.word	0x10003fec
    fb88:	10002b54 	.word	0x10002b54

0000fb8c <DmLlPrivEnabled>:
    fb8c:	4b01      	ldr	r3, [pc, #4]	; (fb94 <DmLlPrivEnabled+0x8>)
    fb8e:	7d18      	ldrb	r0, [r3, #20]
    fb90:	4770      	bx	lr
    fb92:	bf00      	nop
    fb94:	10003fec 	.word	0x10003fec

0000fb98 <DmLlAddrType>:
    fb98:	4b04      	ldr	r3, [pc, #16]	; (fbac <DmLlAddrType+0x14>)
    fb9a:	7d1b      	ldrb	r3, [r3, #20]
    fb9c:	b12b      	cbz	r3, fbaa <DmLlAddrType+0x12>
    fb9e:	b118      	cbz	r0, fba8 <DmLlAddrType+0x10>
    fba0:	2801      	cmp	r0, #1
    fba2:	bf08      	it	eq
    fba4:	2003      	moveq	r0, #3
    fba6:	4770      	bx	lr
    fba8:	2002      	movs	r0, #2
    fbaa:	4770      	bx	lr
    fbac:	10003fec 	.word	0x10003fec

0000fbb0 <DmHostAddrType>:
    fbb0:	4b05      	ldr	r3, [pc, #20]	; (fbc8 <DmHostAddrType+0x18>)
    fbb2:	7d1b      	ldrb	r3, [r3, #20]
    fbb4:	b133      	cbz	r3, fbc4 <DmHostAddrType+0x14>
    fbb6:	2802      	cmp	r0, #2
    fbb8:	d003      	beq.n	fbc2 <DmHostAddrType+0x12>
    fbba:	2803      	cmp	r0, #3
    fbbc:	bf08      	it	eq
    fbbe:	2001      	moveq	r0, #1
    fbc0:	4770      	bx	lr
    fbc2:	2000      	movs	r0, #0
    fbc4:	4770      	bx	lr
    fbc6:	bf00      	nop
    fbc8:	10003fec 	.word	0x10003fec

0000fbcc <DmSizeOfEvt>:
    fbcc:	7883      	ldrb	r3, [r0, #2]
    fbce:	3b20      	subs	r3, #32
    fbd0:	b2da      	uxtb	r2, r3
    fbd2:	2a35      	cmp	r2, #53	; 0x35
    fbd4:	bf9d      	ittte	ls
    fbd6:	4a03      	ldrls	r2, [pc, #12]	; (fbe4 <DmSizeOfEvt+0x18>)
    fbd8:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
    fbdc:	f8b3 0048 	ldrhls.w	r0, [r3, #72]	; 0x48
    fbe0:	2004      	movhi	r0, #4
    fbe2:	4770      	bx	lr
    fbe4:	000251e0 	.word	0x000251e0

0000fbe8 <DmScanPhyToIdx>:
    fbe8:	2000      	movs	r0, #0
    fbea:	4770      	bx	lr

0000fbec <dmInitPhyToIdx>:
    fbec:	2801      	cmp	r0, #1
    fbee:	d00d      	beq.n	fc0c <dmInitPhyToIdx+0x20>
    fbf0:	2802      	cmp	r0, #2
    fbf2:	d104      	bne.n	fbfe <dmInitPhyToIdx+0x12>
    fbf4:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    fbf8:	bf18      	it	ne
    fbfa:	2001      	movne	r0, #1
    fbfc:	4770      	bx	lr
    fbfe:	2901      	cmp	r1, #1
    fc00:	d004      	beq.n	fc0c <dmInitPhyToIdx+0x20>
    fc02:	2902      	cmp	r1, #2
    fc04:	bf0c      	ite	eq
    fc06:	2001      	moveq	r0, #1
    fc08:	2002      	movne	r0, #2
    fc0a:	4770      	bx	lr
    fc0c:	2000      	movs	r0, #0
    fc0e:	4770      	bx	lr

0000fc10 <DmInitPhyToIdx>:
    fc10:	2000      	movs	r0, #0
    fc12:	4770      	bx	lr

0000fc14 <dmPrivMsgHandler>:
    fc14:	7883      	ldrb	r3, [r0, #2]
    fc16:	4a03      	ldr	r2, [pc, #12]	; (fc24 <dmPrivMsgHandler+0x10>)
    fc18:	f003 030f 	and.w	r3, r3, #15
    fc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc20:	4718      	bx	r3
    fc22:	bf00      	nop
    fc24:	00025294 	.word	0x00025294

0000fc28 <dmPrivReset>:
    fc28:	4a02      	ldr	r2, [pc, #8]	; (fc34 <dmPrivReset+0xc>)
    fc2a:	2300      	movs	r3, #0
    fc2c:	70d3      	strb	r3, [r2, #3]
    fc2e:	4a02      	ldr	r2, [pc, #8]	; (fc38 <dmPrivReset+0x10>)
    fc30:	7513      	strb	r3, [r2, #20]
    fc32:	4770      	bx	lr
    fc34:	10004004 	.word	0x10004004
    fc38:	10003fec 	.word	0x10003fec

0000fc3c <dmPrivActAesCmpl>:
    fc3c:	b510      	push	{r4, lr}
    fc3e:	6841      	ldr	r1, [r0, #4]
    fc40:	4604      	mov	r4, r0
    fc42:	2203      	movs	r2, #3
    fc44:	4809      	ldr	r0, [pc, #36]	; (fc6c <dmPrivActAesCmpl+0x30>)
    fc46:	f7fc fa5b 	bl	c100 <memcmp>
    fc4a:	b958      	cbnz	r0, fc64 <dmPrivActAesCmpl+0x28>
    fc4c:	70e0      	strb	r0, [r4, #3]
    fc4e:	4b07      	ldr	r3, [pc, #28]	; (fc6c <dmPrivActAesCmpl+0x30>)
    fc50:	2200      	movs	r2, #0
    fc52:	70da      	strb	r2, [r3, #3]
    fc54:	2337      	movs	r3, #55	; 0x37
    fc56:	70a3      	strb	r3, [r4, #2]
    fc58:	4b05      	ldr	r3, [pc, #20]	; (fc70 <dmPrivActAesCmpl+0x34>)
    fc5a:	4620      	mov	r0, r4
    fc5c:	689b      	ldr	r3, [r3, #8]
    fc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc62:	4718      	bx	r3
    fc64:	2305      	movs	r3, #5
    fc66:	70e3      	strb	r3, [r4, #3]
    fc68:	e7f1      	b.n	fc4e <dmPrivActAesCmpl+0x12>
    fc6a:	bf00      	nop
    fc6c:	10004004 	.word	0x10004004
    fc70:	10003fec 	.word	0x10003fec

0000fc74 <dmPrivActAddDevToResList>:
    fc74:	b510      	push	{r4, lr}
    fc76:	f100 031b 	add.w	r3, r0, #27
    fc7a:	4604      	mov	r4, r0
    fc7c:	f100 020b 	add.w	r2, r0, #11
    fc80:	1d41      	adds	r1, r0, #5
    fc82:	7900      	ldrb	r0, [r0, #4]
    fc84:	f007 fe7b 	bl	1797e <HciLeAddDeviceToResolvingListCmd>
    fc88:	4b03      	ldr	r3, [pc, #12]	; (fc98 <dmPrivActAddDevToResList+0x24>)
    fc8a:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    fc8e:	721a      	strb	r2, [r3, #8]
    fc90:	8822      	ldrh	r2, [r4, #0]
    fc92:	809a      	strh	r2, [r3, #4]
    fc94:	bd10      	pop	{r4, pc}
    fc96:	bf00      	nop
    fc98:	10004004 	.word	0x10004004

0000fc9c <dmPrivActRemDevFromResList>:
    fc9c:	b510      	push	{r4, lr}
    fc9e:	1d41      	adds	r1, r0, #5
    fca0:	4604      	mov	r4, r0
    fca2:	7900      	ldrb	r0, [r0, #4]
    fca4:	f007 fe9f 	bl	179e6 <HciLeRemoveDeviceFromResolvingList>
    fca8:	4b01      	ldr	r3, [pc, #4]	; (fcb0 <dmPrivActRemDevFromResList+0x14>)
    fcaa:	8822      	ldrh	r2, [r4, #0]
    fcac:	80da      	strh	r2, [r3, #6]
    fcae:	bd10      	pop	{r4, pc}
    fcb0:	10004004 	.word	0x10004004

0000fcb4 <dmPrivActClearResList>:
    fcb4:	f007 bebc 	b.w	17a30 <HciLeClearResolvingList>

0000fcb8 <dmPrivActSetPrivacyMode>:
    fcb8:	7ac2      	ldrb	r2, [r0, #11]
    fcba:	1d41      	adds	r1, r0, #5
    fcbc:	7900      	ldrb	r0, [r0, #4]
    fcbe:	f007 bf6a 	b.w	17b96 <HciLeSetPrivacyModeCmd>

0000fcc2 <dmPrivActResolveAddr>:
    fcc2:	b570      	push	{r4, r5, r6, lr}
    fcc4:	4d15      	ldr	r5, [pc, #84]	; (fd1c <dmPrivActResolveAddr+0x5a>)
    fcc6:	4e16      	ldr	r6, [pc, #88]	; (fd20 <dmPrivActResolveAddr+0x5e>)
    fcc8:	78e9      	ldrb	r1, [r5, #3]
    fcca:	b086      	sub	sp, #24
    fccc:	4604      	mov	r4, r0
    fcce:	b9f9      	cbnz	r1, fd10 <dmPrivActResolveAddr+0x4e>
    fcd0:	4603      	mov	r3, r0
    fcd2:	f833 2f14 	ldrh.w	r2, [r3, #20]!
    fcd6:	802a      	strh	r2, [r5, #0]
    fcd8:	789b      	ldrb	r3, [r3, #2]
    fcda:	70ab      	strb	r3, [r5, #2]
    fcdc:	4603      	mov	r3, r0
    fcde:	f10d 000b 	add.w	r0, sp, #11
    fce2:	f833 2f17 	ldrh.w	r2, [r3, #23]!
    fce6:	f8ad 2008 	strh.w	r2, [sp, #8]
    fcea:	789b      	ldrb	r3, [r3, #2]
    fcec:	f88d 300a 	strb.w	r3, [sp, #10]
    fcf0:	220d      	movs	r2, #13
    fcf2:	f7fc fb33 	bl	c35c <memset>
    fcf6:	2301      	movs	r3, #1
    fcf8:	4620      	mov	r0, r4
    fcfa:	2161      	movs	r1, #97	; 0x61
    fcfc:	70eb      	strb	r3, [r5, #3]
    fcfe:	f830 3b04 	ldrh.w	r3, [r0], #4
    fd02:	7b32      	ldrb	r2, [r6, #12]
    fd04:	9100      	str	r1, [sp, #0]
    fd06:	a902      	add	r1, sp, #8
    fd08:	f00b fb4c 	bl	1b3a4 <SecAes>
    fd0c:	b006      	add	sp, #24
    fd0e:	bd70      	pop	{r4, r5, r6, pc}
    fd10:	f240 7337 	movw	r3, #1847	; 0x737
    fd14:	8043      	strh	r3, [r0, #2]
    fd16:	68b3      	ldr	r3, [r6, #8]
    fd18:	4798      	blx	r3
    fd1a:	e7f7      	b.n	fd0c <dmPrivActResolveAddr+0x4a>
    fd1c:	10004004 	.word	0x10004004
    fd20:	10003fec 	.word	0x10003fec

0000fd24 <dmPrivActSetAddrResEnable>:
    fd24:	b510      	push	{r4, lr}
    fd26:	7904      	ldrb	r4, [r0, #4]
    fd28:	4620      	mov	r0, r4
    fd2a:	f007 fef1 	bl	17b10 <HciLeSetAddrResolutionEnable>
    fd2e:	4b01      	ldr	r3, [pc, #4]	; (fd34 <dmPrivActSetAddrResEnable+0x10>)
    fd30:	725c      	strb	r4, [r3, #9]
    fd32:	bd10      	pop	{r4, pc}
    fd34:	10004004 	.word	0x10004004

0000fd38 <dmPrivHciHandler>:
    fd38:	7883      	ldrb	r3, [r0, #2]
    fd3a:	3b15      	subs	r3, #21
    fd3c:	b570      	push	{r4, r5, r6, lr}
    fd3e:	4604      	mov	r4, r0
    fd40:	2b05      	cmp	r3, #5
    fd42:	d83f      	bhi.n	fdc4 <dmPrivHciHandler+0x8c>
    fd44:	e8df f003 	tbb	[pc, r3]
    fd48:	2f201a03 	.word	0x2f201a03
    fd4c:	3432      	.short	0x3432
    fd4e:	4d1e      	ldr	r5, [pc, #120]	; (fdc8 <dmPrivHciHandler+0x90>)
    fd50:	2339      	movs	r3, #57	; 0x39
    fd52:	7083      	strb	r3, [r0, #2]
    fd54:	88ab      	ldrh	r3, [r5, #4]
    fd56:	8003      	strh	r3, [r0, #0]
    fd58:	78c3      	ldrb	r3, [r0, #3]
    fd5a:	b94b      	cbnz	r3, fd70 <dmPrivHciHandler+0x38>
    fd5c:	7a2b      	ldrb	r3, [r5, #8]
    fd5e:	b13b      	cbz	r3, fd70 <dmPrivHciHandler+0x38>
    fd60:	4b1a      	ldr	r3, [pc, #104]	; (fdcc <dmPrivHciHandler+0x94>)
    fd62:	7d1b      	ldrb	r3, [r3, #20]
    fd64:	b923      	cbnz	r3, fd70 <dmPrivHciHandler+0x38>
    fd66:	2001      	movs	r0, #1
    fd68:	f007 fed2 	bl	17b10 <HciLeSetAddrResolutionEnable>
    fd6c:	2301      	movs	r3, #1
    fd6e:	726b      	strb	r3, [r5, #9]
    fd70:	4b16      	ldr	r3, [pc, #88]	; (fdcc <dmPrivHciHandler+0x94>)
    fd72:	4620      	mov	r0, r4
    fd74:	689b      	ldr	r3, [r3, #8]
    fd76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd7a:	4718      	bx	r3
    fd7c:	233a      	movs	r3, #58	; 0x3a
    fd7e:	7083      	strb	r3, [r0, #2]
    fd80:	4b11      	ldr	r3, [pc, #68]	; (fdc8 <dmPrivHciHandler+0x90>)
    fd82:	88db      	ldrh	r3, [r3, #6]
    fd84:	8003      	strh	r3, [r0, #0]
    fd86:	e7f3      	b.n	fd70 <dmPrivHciHandler+0x38>
    fd88:	78c5      	ldrb	r5, [r0, #3]
    fd8a:	233b      	movs	r3, #59	; 0x3b
    fd8c:	7083      	strb	r3, [r0, #2]
    fd8e:	2d00      	cmp	r5, #0
    fd90:	d1ee      	bne.n	fd70 <dmPrivHciHandler+0x38>
    fd92:	4b0e      	ldr	r3, [pc, #56]	; (fdcc <dmPrivHciHandler+0x94>)
    fd94:	7d1b      	ldrb	r3, [r3, #20]
    fd96:	2b00      	cmp	r3, #0
    fd98:	d0ea      	beq.n	fd70 <dmPrivHciHandler+0x38>
    fd9a:	4628      	mov	r0, r5
    fd9c:	f007 feb8 	bl	17b10 <HciLeSetAddrResolutionEnable>
    fda0:	4b09      	ldr	r3, [pc, #36]	; (fdc8 <dmPrivHciHandler+0x90>)
    fda2:	725d      	strb	r5, [r3, #9]
    fda4:	e7e4      	b.n	fd70 <dmPrivHciHandler+0x38>
    fda6:	233c      	movs	r3, #60	; 0x3c
    fda8:	70a3      	strb	r3, [r4, #2]
    fdaa:	e7e1      	b.n	fd70 <dmPrivHciHandler+0x38>
    fdac:	233d      	movs	r3, #61	; 0x3d
    fdae:	e7fb      	b.n	fda8 <dmPrivHciHandler+0x70>
    fdb0:	233e      	movs	r3, #62	; 0x3e
    fdb2:	7083      	strb	r3, [r0, #2]
    fdb4:	78c3      	ldrb	r3, [r0, #3]
    fdb6:	2b00      	cmp	r3, #0
    fdb8:	d1da      	bne.n	fd70 <dmPrivHciHandler+0x38>
    fdba:	4b03      	ldr	r3, [pc, #12]	; (fdc8 <dmPrivHciHandler+0x90>)
    fdbc:	7a5a      	ldrb	r2, [r3, #9]
    fdbe:	4b03      	ldr	r3, [pc, #12]	; (fdcc <dmPrivHciHandler+0x94>)
    fdc0:	751a      	strb	r2, [r3, #20]
    fdc2:	e7d5      	b.n	fd70 <dmPrivHciHandler+0x38>
    fdc4:	bd70      	pop	{r4, r5, r6, pc}
    fdc6:	bf00      	nop
    fdc8:	10004004 	.word	0x10004004
    fdcc:	10003fec 	.word	0x10003fec

0000fdd0 <DmPrivInit>:
    fdd0:	4b01      	ldr	r3, [pc, #4]	; (fdd8 <DmPrivInit+0x8>)
    fdd2:	4a02      	ldr	r2, [pc, #8]	; (fddc <DmPrivInit+0xc>)
    fdd4:	619a      	str	r2, [r3, #24]
    fdd6:	4770      	bx	lr
    fdd8:	10002b54 	.word	0x10002b54
    fddc:	000252b0 	.word	0x000252b0

0000fde0 <DmPrivResolveAddr>:
    fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fde2:	4605      	mov	r5, r0
    fde4:	201a      	movs	r0, #26
    fde6:	460e      	mov	r6, r1
    fde8:	4617      	mov	r7, r2
    fdea:	f004 fc02 	bl	145f2 <WsfMsgAlloc>
    fdee:	4604      	mov	r4, r0
    fdf0:	b190      	cbz	r0, fe18 <DmPrivResolveAddr+0x38>
    fdf2:	2360      	movs	r3, #96	; 0x60
    fdf4:	7083      	strb	r3, [r0, #2]
    fdf6:	4631      	mov	r1, r6
    fdf8:	f820 7b04 	strh.w	r7, [r0], #4
    fdfc:	f003 ff97 	bl	13d2e <Calc128Cpy>
    fe00:	4629      	mov	r1, r5
    fe02:	f104 0014 	add.w	r0, r4, #20
    fe06:	f003 ff47 	bl	13c98 <BdaCpy>
    fe0a:	4b04      	ldr	r3, [pc, #16]	; (fe1c <DmPrivResolveAddr+0x3c>)
    fe0c:	4621      	mov	r1, r4
    fe0e:	7b18      	ldrb	r0, [r3, #12]
    fe10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fe14:	f004 bc11 	b.w	1463a <WsfMsgSend>
    fe18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe1a:	bf00      	nop
    fe1c:	10003fec 	.word	0x10003fec

0000fe20 <DmPrivAddDevToResList>:
    fe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe24:	4681      	mov	r9, r0
    fe26:	202c      	movs	r0, #44	; 0x2c
    fe28:	4688      	mov	r8, r1
    fe2a:	4617      	mov	r7, r2
    fe2c:	461e      	mov	r6, r3
    fe2e:	f89d 5020 	ldrb.w	r5, [sp, #32]
    fe32:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
    fe36:	f004 fbdc 	bl	145f2 <WsfMsgAlloc>
    fe3a:	4604      	mov	r4, r0
    fe3c:	b1e0      	cbz	r0, fe78 <DmPrivAddDevToResList+0x58>
    fe3e:	2362      	movs	r3, #98	; 0x62
    fe40:	7083      	strb	r3, [r0, #2]
    fe42:	f8a0 a000 	strh.w	sl, [r0]
    fe46:	f880 9004 	strb.w	r9, [r0, #4]
    fe4a:	4641      	mov	r1, r8
    fe4c:	3005      	adds	r0, #5
    fe4e:	f003 ff23 	bl	13c98 <BdaCpy>
    fe52:	4639      	mov	r1, r7
    fe54:	f104 000b 	add.w	r0, r4, #11
    fe58:	f003 ff69 	bl	13d2e <Calc128Cpy>
    fe5c:	4631      	mov	r1, r6
    fe5e:	f104 001b 	add.w	r0, r4, #27
    fe62:	f003 ff64 	bl	13d2e <Calc128Cpy>
    fe66:	4b05      	ldr	r3, [pc, #20]	; (fe7c <DmPrivAddDevToResList+0x5c>)
    fe68:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
    fe6c:	4621      	mov	r1, r4
    fe6e:	7b18      	ldrb	r0, [r3, #12]
    fe70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe74:	f004 bbe1 	b.w	1463a <WsfMsgSend>
    fe78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe7c:	10003fec 	.word	0x10003fec

0000fe80 <DmPrivRemDevFromResList>:
    fe80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe82:	4606      	mov	r6, r0
    fe84:	200c      	movs	r0, #12
    fe86:	460d      	mov	r5, r1
    fe88:	4617      	mov	r7, r2
    fe8a:	f004 fbb2 	bl	145f2 <WsfMsgAlloc>
    fe8e:	4604      	mov	r4, r0
    fe90:	b170      	cbz	r0, feb0 <DmPrivRemDevFromResList+0x30>
    fe92:	2363      	movs	r3, #99	; 0x63
    fe94:	7083      	strb	r3, [r0, #2]
    fe96:	8007      	strh	r7, [r0, #0]
    fe98:	7106      	strb	r6, [r0, #4]
    fe9a:	4629      	mov	r1, r5
    fe9c:	3005      	adds	r0, #5
    fe9e:	f003 fefb 	bl	13c98 <BdaCpy>
    fea2:	4b04      	ldr	r3, [pc, #16]	; (feb4 <DmPrivRemDevFromResList+0x34>)
    fea4:	4621      	mov	r1, r4
    fea6:	7b18      	ldrb	r0, [r3, #12]
    fea8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    feac:	f004 bbc5 	b.w	1463a <WsfMsgSend>
    feb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    feb2:	bf00      	nop
    feb4:	10003fec 	.word	0x10003fec

0000feb8 <DmPrivClearResList>:
    feb8:	b508      	push	{r3, lr}
    feba:	202c      	movs	r0, #44	; 0x2c
    febc:	f004 fb99 	bl	145f2 <WsfMsgAlloc>
    fec0:	4601      	mov	r1, r0
    fec2:	b138      	cbz	r0, fed4 <DmPrivClearResList+0x1c>
    fec4:	2364      	movs	r3, #100	; 0x64
    fec6:	7083      	strb	r3, [r0, #2]
    fec8:	4b03      	ldr	r3, [pc, #12]	; (fed8 <DmPrivClearResList+0x20>)
    feca:	7b18      	ldrb	r0, [r3, #12]
    fecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fed0:	f004 bbb3 	b.w	1463a <WsfMsgSend>
    fed4:	bd08      	pop	{r3, pc}
    fed6:	bf00      	nop
    fed8:	10003fec 	.word	0x10003fec

0000fedc <DmPrivReadPeerResolvableAddr>:
    fedc:	f007 bdce 	b.w	17a7c <HciLeReadPeerResolvableAddr>

0000fee0 <DmPrivReadLocalResolvableAddr>:
    fee0:	f007 bdf1 	b.w	17ac6 <HciLeReadLocalResolvableAddr>

0000fee4 <DmPrivSetAddrResEnable>:
    fee4:	b510      	push	{r4, lr}
    fee6:	4604      	mov	r4, r0
    fee8:	202c      	movs	r0, #44	; 0x2c
    feea:	f004 fb82 	bl	145f2 <WsfMsgAlloc>
    feee:	4601      	mov	r1, r0
    fef0:	b150      	cbz	r0, ff08 <DmPrivSetAddrResEnable+0x24>
    fef2:	2365      	movs	r3, #101	; 0x65
    fef4:	7083      	strb	r3, [r0, #2]
    fef6:	2300      	movs	r3, #0
    fef8:	8003      	strh	r3, [r0, #0]
    fefa:	4b04      	ldr	r3, [pc, #16]	; (ff0c <DmPrivSetAddrResEnable+0x28>)
    fefc:	7104      	strb	r4, [r0, #4]
    fefe:	7b18      	ldrb	r0, [r3, #12]
    ff00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff04:	f004 bb99 	b.w	1463a <WsfMsgSend>
    ff08:	bd10      	pop	{r4, pc}
    ff0a:	bf00      	nop
    ff0c:	10003fec 	.word	0x10003fec

0000ff10 <DmPrivSetResolvablePrivateAddrTimeout>:
    ff10:	f007 be1b 	b.w	17b4a <HciLeSetResolvablePrivateAddrTimeout>

0000ff14 <DmPrivSetPrivacyMode>:
    ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff16:	4607      	mov	r7, r0
    ff18:	200c      	movs	r0, #12
    ff1a:	460e      	mov	r6, r1
    ff1c:	4615      	mov	r5, r2
    ff1e:	f004 fb68 	bl	145f2 <WsfMsgAlloc>
    ff22:	4604      	mov	r4, r0
    ff24:	b170      	cbz	r0, ff44 <DmPrivSetPrivacyMode+0x30>
    ff26:	2366      	movs	r3, #102	; 0x66
    ff28:	7083      	strb	r3, [r0, #2]
    ff2a:	7107      	strb	r7, [r0, #4]
    ff2c:	4631      	mov	r1, r6
    ff2e:	3005      	adds	r0, #5
    ff30:	f003 feb2 	bl	13c98 <BdaCpy>
    ff34:	4b04      	ldr	r3, [pc, #16]	; (ff48 <DmPrivSetPrivacyMode+0x34>)
    ff36:	72e5      	strb	r5, [r4, #11]
    ff38:	4621      	mov	r1, r4
    ff3a:	7b18      	ldrb	r0, [r3, #12]
    ff3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ff40:	f004 bb7b 	b.w	1463a <WsfMsgSend>
    ff44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff46:	bf00      	nop
    ff48:	10003fec 	.word	0x10003fec

0000ff4c <dmScanInit>:
    ff4c:	4b05      	ldr	r3, [pc, #20]	; (ff64 <dmScanInit+0x18>)
    ff4e:	4906      	ldr	r1, [pc, #24]	; (ff68 <dmScanInit+0x1c>)
    ff50:	7b18      	ldrb	r0, [r3, #12]
    ff52:	7208      	strb	r0, [r1, #8]
    ff54:	2200      	movs	r2, #0
    ff56:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
    ff5a:	749a      	strb	r2, [r3, #18]
    ff5c:	6108      	str	r0, [r1, #16]
    ff5e:	750a      	strb	r2, [r1, #20]
    ff60:	73da      	strb	r2, [r3, #15]
    ff62:	4770      	bx	lr
    ff64:	10003fec 	.word	0x10003fec
    ff68:	10004010 	.word	0x10004010

0000ff6c <DmScanStart>:
    ff6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff70:	4605      	mov	r5, r0
    ff72:	200e      	movs	r0, #14
    ff74:	460e      	mov	r6, r1
    ff76:	4692      	mov	sl, r2
    ff78:	461f      	mov	r7, r3
    ff7a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    ff7e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    ff82:	f004 fb36 	bl	145f2 <WsfMsgAlloc>
    ff86:	b1d8      	cbz	r0, ffc0 <DmScanStart+0x54>
    ff88:	2320      	movs	r3, #32
    ff8a:	7083      	strb	r3, [r0, #2]
    ff8c:	7105      	strb	r5, [r0, #4]
    ff8e:	2400      	movs	r4, #0
    ff90:	fa45 f304 	asr.w	r3, r5, r4
    ff94:	07db      	lsls	r3, r3, #31
    ff96:	d50f      	bpl.n	ffb8 <DmScanStart+0x4c>
    ff98:	f89a 3000 	ldrb.w	r3, [sl]
    ff9c:	7143      	strb	r3, [r0, #5]
    ff9e:	4b09      	ldr	r3, [pc, #36]	; (ffc4 <DmScanStart+0x58>)
    ffa0:	7186      	strb	r6, [r0, #6]
    ffa2:	f8a0 8008 	strh.w	r8, [r0, #8]
    ffa6:	f8a0 900a 	strh.w	r9, [r0, #10]
    ffaa:	7307      	strb	r7, [r0, #12]
    ffac:	4601      	mov	r1, r0
    ffae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffb2:	7b18      	ldrb	r0, [r3, #12]
    ffb4:	f004 bb41 	b.w	1463a <WsfMsgSend>
    ffb8:	2c07      	cmp	r4, #7
    ffba:	d0f0      	beq.n	ff9e <DmScanStart+0x32>
    ffbc:	3401      	adds	r4, #1
    ffbe:	e7e7      	b.n	ff90 <DmScanStart+0x24>
    ffc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ffc4:	10003fec 	.word	0x10003fec

0000ffc8 <DmScanStop>:
    ffc8:	b508      	push	{r3, lr}
    ffca:	2004      	movs	r0, #4
    ffcc:	f004 fb11 	bl	145f2 <WsfMsgAlloc>
    ffd0:	4601      	mov	r1, r0
    ffd2:	b138      	cbz	r0, ffe4 <DmScanStop+0x1c>
    ffd4:	2321      	movs	r3, #33	; 0x21
    ffd6:	7083      	strb	r3, [r0, #2]
    ffd8:	4b03      	ldr	r3, [pc, #12]	; (ffe8 <DmScanStop+0x20>)
    ffda:	7b18      	ldrb	r0, [r3, #12]
    ffdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ffe0:	f004 bb2b 	b.w	1463a <WsfMsgSend>
    ffe4:	bd08      	pop	{r3, pc}
    ffe6:	bf00      	nop
    ffe8:	10003fec 	.word	0x10003fec

0000ffec <DmScanSetInterval>:
    ffec:	b570      	push	{r4, r5, r6, lr}
    ffee:	2400      	movs	r4, #0
    fff0:	fa40 f304 	asr.w	r3, r0, r4
    fff4:	07db      	lsls	r3, r3, #31
    fff6:	d515      	bpl.n	10024 <DmScanSetInterval+0x38>
    fff8:	880e      	ldrh	r6, [r1, #0]
    fffa:	8815      	ldrh	r5, [r2, #0]
    fffc:	f005 fc36 	bl	1586c <WsfTaskLock>
   10000:	2001      	movs	r0, #1
   10002:	40a0      	lsls	r0, r4
   10004:	b2c0      	uxtb	r0, r0
   10006:	f7ff fdef 	bl	fbe8 <DmScanPhyToIdx>
   1000a:	4b08      	ldr	r3, [pc, #32]	; (1002c <DmScanSetInterval+0x40>)
   1000c:	3008      	adds	r0, #8
   1000e:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
   10012:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   10016:	805d      	strh	r5, [r3, #2]
   10018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1001c:	f005 bc2c 	b.w	15878 <WsfTaskUnlock>
   10020:	3401      	adds	r4, #1
   10022:	e7e5      	b.n	fff0 <DmScanSetInterval+0x4>
   10024:	2c07      	cmp	r4, #7
   10026:	d1fb      	bne.n	10020 <DmScanSetInterval+0x34>
   10028:	bd70      	pop	{r4, r5, r6, pc}
   1002a:	bf00      	nop
   1002c:	10004010 	.word	0x10004010

00010030 <DmScanSetAddrType>:
   10030:	b510      	push	{r4, lr}
   10032:	4604      	mov	r4, r0
   10034:	f005 fc1a 	bl	1586c <WsfTaskLock>
   10038:	4b02      	ldr	r3, [pc, #8]	; (10044 <DmScanSetAddrType+0x14>)
   1003a:	73dc      	strb	r4, [r3, #15]
   1003c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10040:	f005 bc1a 	b.w	15878 <WsfTaskUnlock>
   10044:	10003fec 	.word	0x10003fec

00010048 <dmScanMsgHandler>:
   10048:	7883      	ldrb	r3, [r0, #2]
   1004a:	4a03      	ldr	r2, [pc, #12]	; (10058 <dmScanMsgHandler+0x10>)
   1004c:	f003 030f 	and.w	r3, r3, #15
   10050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10054:	4718      	bx	r3
   10056:	bf00      	nop
   10058:	000252bc 	.word	0x000252bc

0001005c <dmScanReset>:
   1005c:	b513      	push	{r0, r1, r4, lr}
   1005e:	4c0a      	ldr	r4, [pc, #40]	; (10088 <dmScanReset+0x2c>)
   10060:	7d23      	ldrb	r3, [r4, #20]
   10062:	3b02      	subs	r3, #2
   10064:	2b01      	cmp	r3, #1
   10066:	d80b      	bhi.n	10080 <dmScanReset+0x24>
   10068:	4620      	mov	r0, r4
   1006a:	f004 fca1 	bl	149b0 <WsfTimerStop>
   1006e:	2325      	movs	r3, #37	; 0x25
   10070:	f8ad 3006 	strh.w	r3, [sp, #6]
   10074:	4b05      	ldr	r3, [pc, #20]	; (1008c <dmScanReset+0x30>)
   10076:	a801      	add	r0, sp, #4
   10078:	689b      	ldr	r3, [r3, #8]
   1007a:	4798      	blx	r3
   1007c:	2300      	movs	r3, #0
   1007e:	7523      	strb	r3, [r4, #20]
   10080:	f7ff ff64 	bl	ff4c <dmScanInit>
   10084:	b002      	add	sp, #8
   10086:	bd10      	pop	{r4, pc}
   10088:	10004010 	.word	0x10004010
   1008c:	10003fec 	.word	0x10003fec

00010090 <dmScanActStart>:
   10090:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10094:	4c1a      	ldr	r4, [pc, #104]	; (10100 <dmScanActStart+0x70>)
   10096:	4605      	mov	r5, r0
   10098:	2001      	movs	r0, #1
   1009a:	f7ff fda5 	bl	fbe8 <DmScanPhyToIdx>
   1009e:	7d26      	ldrb	r6, [r4, #20]
   100a0:	bb5e      	cbnz	r6, 100fa <dmScanActStart+0x6a>
   100a2:	182b      	adds	r3, r5, r0
   100a4:	3008      	adds	r0, #8
   100a6:	4f17      	ldr	r7, [pc, #92]	; (10104 <dmScanActStart+0x74>)
   100a8:	f834 9010 	ldrh.w	r9, [r4, r0, lsl #1]
   100ac:	f893 8005 	ldrb.w	r8, [r3, #5]
   100b0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
   100b4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   100b8:	7bf8      	ldrb	r0, [r7, #15]
   100ba:	f7ff fd6d 	bl	fb98 <DmLlAddrType>
   100be:	7cbb      	ldrb	r3, [r7, #18]
   100c0:	9300      	str	r3, [sp, #0]
   100c2:	4652      	mov	r2, sl
   100c4:	4603      	mov	r3, r0
   100c6:	4649      	mov	r1, r9
   100c8:	4640      	mov	r0, r8
   100ca:	f007 faa8 	bl	1761e <HciLeSetScanParamCmd>
   100ce:	79ab      	ldrb	r3, [r5, #6]
   100d0:	2b01      	cmp	r3, #1
   100d2:	d10c      	bne.n	100ee <dmScanActStart+0x5e>
   100d4:	7663      	strb	r3, [r4, #25]
   100d6:	2300      	movs	r3, #0
   100d8:	7623      	strb	r3, [r4, #24]
   100da:	2001      	movs	r0, #1
   100dc:	892b      	ldrh	r3, [r5, #8]
   100de:	7520      	strb	r0, [r4, #20]
   100e0:	7b29      	ldrb	r1, [r5, #12]
   100e2:	82e3      	strh	r3, [r4, #22]
   100e4:	b002      	add	sp, #8
   100e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100ea:	f007 ba73 	b.w	175d4 <HciLeSetScanEnableCmd>
   100ee:	2b02      	cmp	r3, #2
   100f0:	d101      	bne.n	100f6 <dmScanActStart+0x66>
   100f2:	2303      	movs	r3, #3
   100f4:	e7ee      	b.n	100d4 <dmScanActStart+0x44>
   100f6:	7666      	strb	r6, [r4, #25]
   100f8:	e7ed      	b.n	100d6 <dmScanActStart+0x46>
   100fa:	b002      	add	sp, #8
   100fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10100:	10004010 	.word	0x10004010
   10104:	10003fec 	.word	0x10003fec

00010108 <dmScanActStop>:
   10108:	4b05      	ldr	r3, [pc, #20]	; (10120 <dmScanActStop+0x18>)
   1010a:	7d1a      	ldrb	r2, [r3, #20]
   1010c:	2a02      	cmp	r2, #2
   1010e:	d105      	bne.n	1011c <dmScanActStop+0x14>
   10110:	2100      	movs	r1, #0
   10112:	2203      	movs	r2, #3
   10114:	4608      	mov	r0, r1
   10116:	751a      	strb	r2, [r3, #20]
   10118:	f007 ba5c 	b.w	175d4 <HciLeSetScanEnableCmd>
   1011c:	4770      	bx	lr
   1011e:	bf00      	nop
   10120:	10004010 	.word	0x10004010

00010124 <dmScanActTimeout>:
   10124:	f7ff bff0 	b.w	10108 <dmScanActStop>

00010128 <dmScanHciHandler>:
   10128:	7883      	ldrb	r3, [r0, #2]
   1012a:	2b06      	cmp	r3, #6
   1012c:	b570      	push	{r4, r5, r6, lr}
   1012e:	4604      	mov	r4, r0
   10130:	d11e      	bne.n	10170 <dmScanHciHandler+0x48>
   10132:	4b24      	ldr	r3, [pc, #144]	; (101c4 <dmScanHciHandler+0x9c>)
   10134:	7d1a      	ldrb	r2, [r3, #20]
   10136:	2a02      	cmp	r2, #2
   10138:	461d      	mov	r5, r3
   1013a:	d108      	bne.n	1014e <dmScanHciHandler+0x26>
   1013c:	7e5a      	ldrb	r2, [r3, #25]
   1013e:	b1a2      	cbz	r2, 1016a <dmScanHciHandler+0x42>
   10140:	7a82      	ldrb	r2, [r0, #10]
   10142:	2a04      	cmp	r2, #4
   10144:	d104      	bne.n	10150 <dmScanHciHandler+0x28>
   10146:	7e1a      	ldrb	r2, [r3, #24]
   10148:	b17a      	cbz	r2, 1016a <dmScanHciHandler+0x42>
   1014a:	2200      	movs	r2, #0
   1014c:	761a      	strb	r2, [r3, #24]
   1014e:	bd70      	pop	{r4, r5, r6, pc}
   10150:	6842      	ldr	r2, [r0, #4]
   10152:	7a01      	ldrb	r1, [r0, #8]
   10154:	2001      	movs	r0, #1
   10156:	f7ff fce5 	bl	fb24 <DmFindAdType>
   1015a:	b910      	cbnz	r0, 10162 <dmScanHciHandler+0x3a>
   1015c:	2301      	movs	r3, #1
   1015e:	762b      	strb	r3, [r5, #24]
   10160:	e7f5      	b.n	1014e <dmScanHciHandler+0x26>
   10162:	7882      	ldrb	r2, [r0, #2]
   10164:	7e6b      	ldrb	r3, [r5, #25]
   10166:	421a      	tst	r2, r3
   10168:	d0f8      	beq.n	1015c <dmScanHciHandler+0x34>
   1016a:	2326      	movs	r3, #38	; 0x26
   1016c:	70a3      	strb	r3, [r4, #2]
   1016e:	e008      	b.n	10182 <dmScanHciHandler+0x5a>
   10170:	2b34      	cmp	r3, #52	; 0x34
   10172:	d1ec      	bne.n	1014e <dmScanHciHandler+0x26>
   10174:	4d13      	ldr	r5, [pc, #76]	; (101c4 <dmScanHciHandler+0x9c>)
   10176:	7d2b      	ldrb	r3, [r5, #20]
   10178:	2b01      	cmp	r3, #1
   1017a:	462e      	mov	r6, r5
   1017c:	d007      	beq.n	1018e <dmScanHciHandler+0x66>
   1017e:	2b03      	cmp	r3, #3
   10180:	d015      	beq.n	101ae <dmScanHciHandler+0x86>
   10182:	4b11      	ldr	r3, [pc, #68]	; (101c8 <dmScanHciHandler+0xa0>)
   10184:	4620      	mov	r0, r4
   10186:	689b      	ldr	r3, [r3, #8]
   10188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1018c:	4718      	bx	r3
   1018e:	78c3      	ldrb	r3, [r0, #3]
   10190:	b953      	cbnz	r3, 101a8 <dmScanHciHandler+0x80>
   10192:	8ae9      	ldrh	r1, [r5, #22]
   10194:	b121      	cbz	r1, 101a0 <dmScanHciHandler+0x78>
   10196:	2322      	movs	r3, #34	; 0x22
   10198:	4628      	mov	r0, r5
   1019a:	732b      	strb	r3, [r5, #12]
   1019c:	f004 fbf4 	bl	14988 <WsfTimerStartMs>
   101a0:	2302      	movs	r3, #2
   101a2:	7533      	strb	r3, [r6, #20]
   101a4:	2324      	movs	r3, #36	; 0x24
   101a6:	e7e1      	b.n	1016c <dmScanHciHandler+0x44>
   101a8:	2300      	movs	r3, #0
   101aa:	752b      	strb	r3, [r5, #20]
   101ac:	e7fa      	b.n	101a4 <dmScanHciHandler+0x7c>
   101ae:	78c6      	ldrb	r6, [r0, #3]
   101b0:	b92e      	cbnz	r6, 101be <dmScanHciHandler+0x96>
   101b2:	4628      	mov	r0, r5
   101b4:	f004 fbfc 	bl	149b0 <WsfTimerStop>
   101b8:	752e      	strb	r6, [r5, #20]
   101ba:	2325      	movs	r3, #37	; 0x25
   101bc:	e7d6      	b.n	1016c <dmScanHciHandler+0x44>
   101be:	2302      	movs	r3, #2
   101c0:	752b      	strb	r3, [r5, #20]
   101c2:	e7fa      	b.n	101ba <dmScanHciHandler+0x92>
   101c4:	10004010 	.word	0x10004010
   101c8:	10003fec 	.word	0x10003fec

000101cc <DmScanInit>:
   101cc:	b508      	push	{r3, lr}
   101ce:	f005 fb4d 	bl	1586c <WsfTaskLock>
   101d2:	4b04      	ldr	r3, [pc, #16]	; (101e4 <DmScanInit+0x18>)
   101d4:	4a04      	ldr	r2, [pc, #16]	; (101e8 <DmScanInit+0x1c>)
   101d6:	609a      	str	r2, [r3, #8]
   101d8:	f7ff feb8 	bl	ff4c <dmScanInit>
   101dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   101e0:	f005 bb4a 	b.w	15878 <WsfTaskUnlock>
   101e4:	10002b54 	.word	0x10002b54
   101e8:	000252c8 	.word	0x000252c8

000101ec <DmScanModeLeg>:
   101ec:	4b03      	ldr	r3, [pc, #12]	; (101fc <DmScanModeLeg+0x10>)
   101ee:	6898      	ldr	r0, [r3, #8]
   101f0:	4b03      	ldr	r3, [pc, #12]	; (10200 <DmScanModeLeg+0x14>)
   101f2:	1ac3      	subs	r3, r0, r3
   101f4:	4258      	negs	r0, r3
   101f6:	4158      	adcs	r0, r3
   101f8:	4770      	bx	lr
   101fa:	bf00      	nop
   101fc:	10002b54 	.word	0x10002b54
   10200:	000252c8 	.word	0x000252c8

00010204 <dmSecMsgHandler>:
   10204:	b570      	push	{r4, r5, r6, lr}
   10206:	4605      	mov	r5, r0
   10208:	7800      	ldrb	r0, [r0, #0]
   1020a:	f7ff f905 	bl	f418 <dmConnCcbById>
   1020e:	4604      	mov	r4, r0
   10210:	b120      	cbz	r0, 1021c <dmSecMsgHandler+0x18>
   10212:	78ab      	ldrb	r3, [r5, #2]
   10214:	2b50      	cmp	r3, #80	; 0x50
   10216:	d002      	beq.n	1021e <dmSecMsgHandler+0x1a>
   10218:	2b51      	cmp	r3, #81	; 0x51
   1021a:	d012      	beq.n	10242 <dmSecMsgHandler+0x3e>
   1021c:	bd70      	pop	{r4, r5, r6, pc}
   1021e:	2201      	movs	r2, #1
   10220:	2102      	movs	r1, #2
   10222:	7c00      	ldrb	r0, [r0, #16]
   10224:	f7ff fb78 	bl	f918 <DmConnSetIdle>
   10228:	7fab      	ldrb	r3, [r5, #30]
   1022a:	7623      	strb	r3, [r4, #24]
   1022c:	2301      	movs	r3, #1
   1022e:	74a3      	strb	r3, [r4, #18]
   10230:	8baa      	ldrh	r2, [r5, #28]
   10232:	89a0      	ldrh	r0, [r4, #12]
   10234:	1d2b      	adds	r3, r5, #4
   10236:	f105 0114 	add.w	r1, r5, #20
   1023a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1023e:	f007 ba6c 	b.w	1771a <HciLeStartEncryptionCmd>
   10242:	7d2a      	ldrb	r2, [r5, #20]
   10244:	b13a      	cbz	r2, 10256 <dmSecMsgHandler+0x52>
   10246:	7d6b      	ldrb	r3, [r5, #21]
   10248:	7603      	strb	r3, [r0, #24]
   1024a:	1d29      	adds	r1, r5, #4
   1024c:	8980      	ldrh	r0, [r0, #12]
   1024e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10252:	f006 bff9 	b.w	17248 <HciLeLtkReqReplCmd>
   10256:	7c00      	ldrb	r0, [r0, #16]
   10258:	2102      	movs	r1, #2
   1025a:	f7ff fb5d 	bl	f918 <DmConnSetIdle>
   1025e:	89a0      	ldrh	r0, [r4, #12]
   10260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10264:	f006 bfca 	b.w	171fc <HciLeLtkReqNegReplCmd>

00010268 <dmSecApiLtkMsg>:
   10268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1026a:	4606      	mov	r6, r0
   1026c:	2020      	movs	r0, #32
   1026e:	460d      	mov	r5, r1
   10270:	4614      	mov	r4, r2
   10272:	461f      	mov	r7, r3
   10274:	f004 f9bd 	bl	145f2 <WsfMsgAlloc>
   10278:	b1a8      	cbz	r0, 102a6 <dmSecApiLtkMsg+0x3e>
   1027a:	7087      	strb	r7, [r0, #2]
   1027c:	8006      	strh	r6, [r0, #0]
   1027e:	70c5      	strb	r5, [r0, #3]
   10280:	4622      	mov	r2, r4
   10282:	1d03      	adds	r3, r0, #4
   10284:	f104 0118 	add.w	r1, r4, #24
   10288:	f852 4b04 	ldr.w	r4, [r2], #4
   1028c:	f843 4b04 	str.w	r4, [r3], #4
   10290:	428a      	cmp	r2, r1
   10292:	d1f9      	bne.n	10288 <dmSecApiLtkMsg+0x20>
   10294:	8812      	ldrh	r2, [r2, #0]
   10296:	801a      	strh	r2, [r3, #0]
   10298:	4b03      	ldr	r3, [pc, #12]	; (102a8 <dmSecApiLtkMsg+0x40>)
   1029a:	4601      	mov	r1, r0
   1029c:	7b18      	ldrb	r0, [r3, #12]
   1029e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   102a2:	f004 b9ca 	b.w	1463a <WsfMsgSend>
   102a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102a8:	10003fec 	.word	0x10003fec

000102ac <DmSmpCbackExec>:
   102ac:	7883      	ldrb	r3, [r0, #2]
   102ae:	2b2a      	cmp	r3, #42	; 0x2a
   102b0:	b510      	push	{r4, lr}
   102b2:	4604      	mov	r4, r0
   102b4:	d001      	beq.n	102ba <DmSmpCbackExec+0xe>
   102b6:	2b2c      	cmp	r3, #44	; 0x2c
   102b8:	d105      	bne.n	102c6 <DmSmpCbackExec+0x1a>
   102ba:	4b06      	ldr	r3, [pc, #24]	; (102d4 <DmSmpCbackExec+0x28>)
   102bc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   102c0:	b10b      	cbz	r3, 102c6 <DmSmpCbackExec+0x1a>
   102c2:	4620      	mov	r0, r4
   102c4:	4798      	blx	r3
   102c6:	4b04      	ldr	r3, [pc, #16]	; (102d8 <DmSmpCbackExec+0x2c>)
   102c8:	4620      	mov	r0, r4
   102ca:	689b      	ldr	r3, [r3, #8]
   102cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102d0:	4718      	bx	r3
   102d2:	bf00      	nop
   102d4:	10003e5c 	.word	0x10003e5c
   102d8:	10003fec 	.word	0x10003fec

000102dc <dmSecHciHandler>:
   102dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   102de:	4605      	mov	r5, r0
   102e0:	8800      	ldrh	r0, [r0, #0]
   102e2:	f7fe ffb2 	bl	f24a <dmConnCcbByHandle>
   102e6:	4604      	mov	r4, r0
   102e8:	b1c0      	cbz	r0, 1031c <dmSecHciHandler+0x40>
   102ea:	78ab      	ldrb	r3, [r5, #2]
   102ec:	2b10      	cmp	r3, #16
   102ee:	d127      	bne.n	10340 <dmSecHciHandler+0x64>
   102f0:	89eb      	ldrh	r3, [r5, #14]
   102f2:	b9ab      	cbnz	r3, 10320 <dmSecHciHandler+0x44>
   102f4:	2208      	movs	r2, #8
   102f6:	4926      	ldr	r1, [pc, #152]	; (10390 <dmSecHciHandler+0xb4>)
   102f8:	1da8      	adds	r0, r5, #6
   102fa:	f7fb ff01 	bl	c100 <memcmp>
   102fe:	4606      	mov	r6, r0
   10300:	b970      	cbnz	r0, 10320 <dmSecHciHandler+0x44>
   10302:	4669      	mov	r1, sp
   10304:	7c20      	ldrb	r0, [r4, #16]
   10306:	f000 fccb 	bl	10ca0 <SmpDmGetStk>
   1030a:	4601      	mov	r1, r0
   1030c:	b140      	cbz	r0, 10320 <dmSecHciHandler+0x44>
   1030e:	f89d 3000 	ldrb.w	r3, [sp]
   10312:	7623      	strb	r3, [r4, #24]
   10314:	74a6      	strb	r6, [r4, #18]
   10316:	8828      	ldrh	r0, [r5, #0]
   10318:	f006 ff96 	bl	17248 <HciLeLtkReqReplCmd>
   1031c:	b002      	add	sp, #8
   1031e:	bd70      	pop	{r4, r5, r6, pc}
   10320:	7c20      	ldrb	r0, [r4, #16]
   10322:	2201      	movs	r2, #1
   10324:	2102      	movs	r1, #2
   10326:	f7ff faf7 	bl	f918 <DmConnSetIdle>
   1032a:	2301      	movs	r3, #1
   1032c:	74a3      	strb	r3, [r4, #18]
   1032e:	7c23      	ldrb	r3, [r4, #16]
   10330:	802b      	strh	r3, [r5, #0]
   10332:	2330      	movs	r3, #48	; 0x30
   10334:	70ab      	strb	r3, [r5, #2]
   10336:	4b17      	ldr	r3, [pc, #92]	; (10394 <dmSecHciHandler+0xb8>)
   10338:	4628      	mov	r0, r5
   1033a:	689b      	ldr	r3, [r3, #8]
   1033c:	4798      	blx	r3
   1033e:	e7ed      	b.n	1031c <dmSecHciHandler+0x40>
   10340:	3b0e      	subs	r3, #14
   10342:	2b01      	cmp	r3, #1
   10344:	d8ea      	bhi.n	1031c <dmSecHciHandler+0x40>
   10346:	2200      	movs	r2, #0
   10348:	2102      	movs	r1, #2
   1034a:	7c00      	ldrb	r0, [r0, #16]
   1034c:	f7ff fae4 	bl	f918 <DmConnSetIdle>
   10350:	7c23      	ldrb	r3, [r4, #16]
   10352:	f8ad 3000 	strh.w	r3, [sp]
   10356:	78eb      	ldrb	r3, [r5, #3]
   10358:	f88d 3003 	strb.w	r3, [sp, #3]
   1035c:	b9a3      	cbnz	r3, 10388 <dmSecHciHandler+0xac>
   1035e:	232c      	movs	r3, #44	; 0x2c
   10360:	f88d 3002 	strb.w	r3, [sp, #2]
   10364:	7e23      	ldrb	r3, [r4, #24]
   10366:	75e3      	strb	r3, [r4, #23]
   10368:	7ca3      	ldrb	r3, [r4, #18]
   1036a:	f88d 3004 	strb.w	r3, [sp, #4]
   1036e:	4668      	mov	r0, sp
   10370:	f7ff ff9c 	bl	102ac <DmSmpCbackExec>
   10374:	7c23      	ldrb	r3, [r4, #16]
   10376:	f8ad 3000 	strh.w	r3, [sp]
   1037a:	4668      	mov	r0, sp
   1037c:	78eb      	ldrb	r3, [r5, #3]
   1037e:	f88d 3003 	strb.w	r3, [sp, #3]
   10382:	f000 fd07 	bl	10d94 <SmpDmEncryptInd>
   10386:	e7c9      	b.n	1031c <dmSecHciHandler+0x40>
   10388:	232d      	movs	r3, #45	; 0x2d
   1038a:	f88d 3002 	strb.w	r3, [sp, #2]
   1038e:	e7ee      	b.n	1036e <dmSecHciHandler+0x92>
   10390:	00025ba4 	.word	0x00025ba4
   10394:	10003fec 	.word	0x10003fec

00010398 <DmSecCancelReq>:
   10398:	b538      	push	{r3, r4, r5, lr}
   1039a:	4605      	mov	r5, r0
   1039c:	2004      	movs	r0, #4
   1039e:	460c      	mov	r4, r1
   103a0:	f004 f927 	bl	145f2 <WsfMsgAlloc>
   103a4:	b138      	cbz	r0, 103b6 <DmSecCancelReq+0x1e>
   103a6:	2203      	movs	r2, #3
   103a8:	7082      	strb	r2, [r0, #2]
   103aa:	70c4      	strb	r4, [r0, #3]
   103ac:	8005      	strh	r5, [r0, #0]
   103ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   103b2:	f000 bc6c 	b.w	10c8e <SmpDmMsgSend>
   103b6:	bd38      	pop	{r3, r4, r5, pc}

000103b8 <DmSecAuthRsp>:
   103b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103ba:	4607      	mov	r7, r0
   103bc:	2016      	movs	r0, #22
   103be:	460e      	mov	r6, r1
   103c0:	4615      	mov	r5, r2
   103c2:	f004 f916 	bl	145f2 <WsfMsgAlloc>
   103c6:	4604      	mov	r4, r0
   103c8:	b170      	cbz	r0, 103e8 <DmSecAuthRsp+0x30>
   103ca:	2304      	movs	r3, #4
   103cc:	7083      	strb	r3, [r0, #2]
   103ce:	8007      	strh	r7, [r0, #0]
   103d0:	7506      	strb	r6, [r0, #20]
   103d2:	b125      	cbz	r5, 103de <DmSecAuthRsp+0x26>
   103d4:	4632      	mov	r2, r6
   103d6:	4629      	mov	r1, r5
   103d8:	4418      	add	r0, r3
   103da:	f7fb fec1 	bl	c160 <memcpy>
   103de:	4620      	mov	r0, r4
   103e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   103e4:	f000 bc53 	b.w	10c8e <SmpDmMsgSend>
   103e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000103ea <DmSecInit>:
   103ea:	4b04      	ldr	r3, [pc, #16]	; (103fc <DmSecInit+0x12>)
   103ec:	4a04      	ldr	r2, [pc, #16]	; (10400 <DmSecInit+0x16>)
   103ee:	615a      	str	r2, [r3, #20]
   103f0:	4b04      	ldr	r3, [pc, #16]	; (10404 <DmSecInit+0x1a>)
   103f2:	4a05      	ldr	r2, [pc, #20]	; (10408 <DmSecInit+0x1e>)
   103f4:	e9c3 2200 	strd	r2, r2, [r3]
   103f8:	4770      	bx	lr
   103fa:	bf00      	nop
   103fc:	10002b54 	.word	0x10002b54
   10400:	000252d4 	.word	0x000252d4
   10404:	1000402c 	.word	0x1000402c
   10408:	00025ba4 	.word	0x00025ba4

0001040c <DmSecSetLocalCsrk>:
   1040c:	b510      	push	{r4, lr}
   1040e:	4604      	mov	r4, r0
   10410:	f005 fa2c 	bl	1586c <WsfTaskLock>
   10414:	4b02      	ldr	r3, [pc, #8]	; (10420 <DmSecSetLocalCsrk+0x14>)
   10416:	605c      	str	r4, [r3, #4]
   10418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1041c:	f005 ba2c 	b.w	15878 <WsfTaskUnlock>
   10420:	1000402c 	.word	0x1000402c

00010424 <DmSecSetLocalIrk>:
   10424:	b510      	push	{r4, lr}
   10426:	4604      	mov	r4, r0
   10428:	f005 fa20 	bl	1586c <WsfTaskLock>
   1042c:	4b02      	ldr	r3, [pc, #8]	; (10438 <DmSecSetLocalIrk+0x14>)
   1042e:	601c      	str	r4, [r3, #0]
   10430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10434:	f005 ba20 	b.w	15878 <WsfTaskUnlock>
   10438:	1000402c 	.word	0x1000402c

0001043c <DmSecGetLocalCsrk>:
   1043c:	4b01      	ldr	r3, [pc, #4]	; (10444 <DmSecGetLocalCsrk+0x8>)
   1043e:	6858      	ldr	r0, [r3, #4]
   10440:	4770      	bx	lr
   10442:	bf00      	nop
   10444:	1000402c 	.word	0x1000402c

00010448 <DmSecGetLocalIrk>:
   10448:	4b01      	ldr	r3, [pc, #4]	; (10450 <DmSecGetLocalIrk+0x8>)
   1044a:	6818      	ldr	r0, [r3, #0]
   1044c:	4770      	bx	lr
   1044e:	bf00      	nop
   10450:	1000402c 	.word	0x1000402c

00010454 <dmSecLescMsgHandler>:
   10454:	7883      	ldrb	r3, [r0, #2]
   10456:	2b81      	cmp	r3, #129	; 0x81
   10458:	b570      	push	{r4, r5, r6, lr}
   1045a:	4604      	mov	r4, r0
   1045c:	d106      	bne.n	1046c <dmSecLescMsgHandler+0x18>
   1045e:	2334      	movs	r3, #52	; 0x34
   10460:	7083      	strb	r3, [r0, #2]
   10462:	4b0d      	ldr	r3, [pc, #52]	; (10498 <dmSecLescMsgHandler+0x44>)
   10464:	689b      	ldr	r3, [r3, #8]
   10466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1046a:	4718      	bx	r3
   1046c:	2b80      	cmp	r3, #128	; 0x80
   1046e:	d112      	bne.n	10496 <dmSecLescMsgHandler+0x42>
   10470:	2333      	movs	r3, #51	; 0x33
   10472:	4d0a      	ldr	r5, [pc, #40]	; (1049c <dmSecLescMsgHandler+0x48>)
   10474:	7083      	strb	r3, [r0, #2]
   10476:	6841      	ldr	r1, [r0, #4]
   10478:	3004      	adds	r0, #4
   1047a:	f003 fc58 	bl	13d2e <Calc128Cpy>
   1047e:	6829      	ldr	r1, [r5, #0]
   10480:	f104 0014 	add.w	r0, r4, #20
   10484:	f003 fc53 	bl	13d2e <Calc128Cpy>
   10488:	6828      	ldr	r0, [r5, #0]
   1048a:	f004 f863 	bl	14554 <WsfBufFree>
   1048e:	4b02      	ldr	r3, [pc, #8]	; (10498 <dmSecLescMsgHandler+0x44>)
   10490:	4620      	mov	r0, r4
   10492:	689b      	ldr	r3, [r3, #8]
   10494:	e7e7      	b.n	10466 <dmSecLescMsgHandler+0x12>
   10496:	bd70      	pop	{r4, r5, r6, pc}
   10498:	10003fec 	.word	0x10003fec
   1049c:	10004034 	.word	0x10004034

000104a0 <DmSecKeypressReq>:
   104a0:	b538      	push	{r3, r4, r5, lr}
   104a2:	4604      	mov	r4, r0
   104a4:	2006      	movs	r0, #6
   104a6:	460d      	mov	r5, r1
   104a8:	f004 f8a3 	bl	145f2 <WsfMsgAlloc>
   104ac:	b138      	cbz	r0, 104be <DmSecKeypressReq+0x1e>
   104ae:	2216      	movs	r2, #22
   104b0:	7105      	strb	r5, [r0, #4]
   104b2:	7082      	strb	r2, [r0, #2]
   104b4:	8004      	strh	r4, [r0, #0]
   104b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   104ba:	f000 bbe8 	b.w	10c8e <SmpDmMsgSend>
   104be:	bd38      	pop	{r3, r4, r5, pc}

000104c0 <DmSecSetOob>:
   104c0:	f000 be21 	b.w	11106 <SmpScSetOobCfg>

000104c4 <DmSecCalcOobReq>:
   104c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   104c6:	4605      	mov	r5, r0
   104c8:	b08d      	sub	sp, #52	; 0x34
   104ca:	2010      	movs	r0, #16
   104cc:	460e      	mov	r6, r1
   104ce:	f004 f801 	bl	144d4 <WsfBufAlloc>
   104d2:	4c1a      	ldr	r4, [pc, #104]	; (1053c <DmSecCalcOobReq+0x78>)
   104d4:	4f1a      	ldr	r7, [pc, #104]	; (10540 <DmSecCalcOobReq+0x7c>)
   104d6:	6020      	str	r0, [r4, #0]
   104d8:	b308      	cbz	r0, 1051e <DmSecCalcOobReq+0x5a>
   104da:	4629      	mov	r1, r5
   104dc:	f003 fc27 	bl	13d2e <Calc128Cpy>
   104e0:	2041      	movs	r0, #65	; 0x41
   104e2:	f003 fff7 	bl	144d4 <WsfBufAlloc>
   104e6:	4605      	mov	r5, r0
   104e8:	b1b0      	cbz	r0, 10518 <DmSecCalcOobReq+0x54>
   104ea:	2220      	movs	r2, #32
   104ec:	4631      	mov	r1, r6
   104ee:	f000 fd27 	bl	10f40 <SmpScCat>
   104f2:	2220      	movs	r2, #32
   104f4:	4631      	mov	r1, r6
   104f6:	f000 fd23 	bl	10f40 <SmpScCat>
   104fa:	2200      	movs	r2, #0
   104fc:	7002      	strb	r2, [r0, #0]
   104fe:	2180      	movs	r1, #128	; 0x80
   10500:	7b3b      	ldrb	r3, [r7, #12]
   10502:	6820      	ldr	r0, [r4, #0]
   10504:	e9cd 2100 	strd	r2, r1, [sp]
   10508:	2241      	movs	r2, #65	; 0x41
   1050a:	4629      	mov	r1, r5
   1050c:	f00b f920 	bl	1b750 <SecCmac>
   10510:	b988      	cbnz	r0, 10536 <DmSecCalcOobReq+0x72>
   10512:	4628      	mov	r0, r5
   10514:	f004 f81e 	bl	14554 <WsfBufFree>
   10518:	6820      	ldr	r0, [r4, #0]
   1051a:	f004 f81b 	bl	14554 <WsfBufFree>
   1051e:	2224      	movs	r2, #36	; 0x24
   10520:	2100      	movs	r1, #0
   10522:	a803      	add	r0, sp, #12
   10524:	f7fb ff1a 	bl	c35c <memset>
   10528:	f240 7333 	movw	r3, #1843	; 0x733
   1052c:	f8ad 300e 	strh.w	r3, [sp, #14]
   10530:	a803      	add	r0, sp, #12
   10532:	68bb      	ldr	r3, [r7, #8]
   10534:	4798      	blx	r3
   10536:	b00d      	add	sp, #52	; 0x34
   10538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1053a:	bf00      	nop
   1053c:	10004034 	.word	0x10004034
   10540:	10003fec 	.word	0x10003fec

00010544 <DmSecGenerateEccKeyReq>:
   10544:	4b02      	ldr	r3, [pc, #8]	; (10550 <DmSecGenerateEccKeyReq+0xc>)
   10546:	2281      	movs	r2, #129	; 0x81
   10548:	2100      	movs	r1, #0
   1054a:	7b18      	ldrb	r0, [r3, #12]
   1054c:	f00b b9b2 	b.w	1b8b4 <SecEccGenKey>
   10550:	10003fec 	.word	0x10003fec

00010554 <DmSecSetDebugEccKey>:
   10554:	b5f0      	push	{r4, r5, r6, r7, lr}
   10556:	4b24      	ldr	r3, [pc, #144]	; (105e8 <DmSecSetDebugEccKey+0x94>)
   10558:	b099      	sub	sp, #100	; 0x64
   1055a:	466a      	mov	r2, sp
   1055c:	f103 0620 	add.w	r6, r3, #32
   10560:	4615      	mov	r5, r2
   10562:	6818      	ldr	r0, [r3, #0]
   10564:	6859      	ldr	r1, [r3, #4]
   10566:	4614      	mov	r4, r2
   10568:	c403      	stmia	r4!, {r0, r1}
   1056a:	3308      	adds	r3, #8
   1056c:	42b3      	cmp	r3, r6
   1056e:	4622      	mov	r2, r4
   10570:	d1f7      	bne.n	10562 <DmSecSetDebugEccKey+0xe>
   10572:	4b1e      	ldr	r3, [pc, #120]	; (105ec <DmSecSetDebugEccKey+0x98>)
   10574:	ac08      	add	r4, sp, #32
   10576:	f103 0720 	add.w	r7, r3, #32
   1057a:	4622      	mov	r2, r4
   1057c:	6818      	ldr	r0, [r3, #0]
   1057e:	6859      	ldr	r1, [r3, #4]
   10580:	4626      	mov	r6, r4
   10582:	c603      	stmia	r6!, {r0, r1}
   10584:	3308      	adds	r3, #8
   10586:	42bb      	cmp	r3, r7
   10588:	4634      	mov	r4, r6
   1058a:	d1f7      	bne.n	1057c <DmSecSetDebugEccKey+0x28>
   1058c:	4c18      	ldr	r4, [pc, #96]	; (105f0 <DmSecSetDebugEccKey+0x9c>)
   1058e:	ae10      	add	r6, sp, #64	; 0x40
   10590:	f104 0c20 	add.w	ip, r4, #32
   10594:	4633      	mov	r3, r6
   10596:	6820      	ldr	r0, [r4, #0]
   10598:	6861      	ldr	r1, [r4, #4]
   1059a:	4637      	mov	r7, r6
   1059c:	c703      	stmia	r7!, {r0, r1}
   1059e:	3408      	adds	r4, #8
   105a0:	4564      	cmp	r4, ip
   105a2:	463e      	mov	r6, r7
   105a4:	d1f7      	bne.n	10596 <DmSecSetDebugEccKey+0x42>
   105a6:	4e13      	ldr	r6, [pc, #76]	; (105f4 <DmSecSetDebugEccKey+0xa0>)
   105a8:	462c      	mov	r4, r5
   105aa:	cc03      	ldmia	r4!, {r0, r1}
   105ac:	4294      	cmp	r4, r2
   105ae:	6030      	str	r0, [r6, #0]
   105b0:	6071      	str	r1, [r6, #4]
   105b2:	4625      	mov	r5, r4
   105b4:	f106 0608 	add.w	r6, r6, #8
   105b8:	d1f6      	bne.n	105a8 <DmSecSetDebugEccKey+0x54>
   105ba:	4d0f      	ldr	r5, [pc, #60]	; (105f8 <DmSecSetDebugEccKey+0xa4>)
   105bc:	4614      	mov	r4, r2
   105be:	cc03      	ldmia	r4!, {r0, r1}
   105c0:	429c      	cmp	r4, r3
   105c2:	6028      	str	r0, [r5, #0]
   105c4:	6069      	str	r1, [r5, #4]
   105c6:	4622      	mov	r2, r4
   105c8:	f105 0508 	add.w	r5, r5, #8
   105cc:	d1f6      	bne.n	105bc <DmSecSetDebugEccKey+0x68>
   105ce:	4c0b      	ldr	r4, [pc, #44]	; (105fc <DmSecSetDebugEccKey+0xa8>)
   105d0:	ad18      	add	r5, sp, #96	; 0x60
   105d2:	461a      	mov	r2, r3
   105d4:	ca03      	ldmia	r2!, {r0, r1}
   105d6:	42aa      	cmp	r2, r5
   105d8:	6020      	str	r0, [r4, #0]
   105da:	6061      	str	r1, [r4, #4]
   105dc:	4613      	mov	r3, r2
   105de:	f104 0408 	add.w	r4, r4, #8
   105e2:	d1f6      	bne.n	105d2 <DmSecSetDebugEccKey+0x7e>
   105e4:	b019      	add	sp, #100	; 0x64
   105e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105e8:	000252e0 	.word	0x000252e0
   105ec:	00025300 	.word	0x00025300
   105f0:	00025320 	.word	0x00025320
   105f4:	10004078 	.word	0x10004078
   105f8:	10004038 	.word	0x10004038
   105fc:	10004058 	.word	0x10004058

00010600 <DmSecSetEccKey>:
   10600:	b508      	push	{r3, lr}
   10602:	4601      	mov	r1, r0
   10604:	2260      	movs	r2, #96	; 0x60
   10606:	4802      	ldr	r0, [pc, #8]	; (10610 <DmSecSetEccKey+0x10>)
   10608:	f7fb fdaa 	bl	c160 <memcpy>
   1060c:	bd08      	pop	{r3, pc}
   1060e:	bf00      	nop
   10610:	10004038 	.word	0x10004038

00010614 <DmSecGetEccKey>:
   10614:	4800      	ldr	r0, [pc, #0]	; (10618 <DmSecGetEccKey+0x4>)
   10616:	4770      	bx	lr
   10618:	10004038 	.word	0x10004038

0001061c <DmSecCompareRsp>:
   1061c:	b538      	push	{r3, r4, r5, lr}
   1061e:	4605      	mov	r5, r0
   10620:	2016      	movs	r0, #22
   10622:	460c      	mov	r4, r1
   10624:	f003 ffe5 	bl	145f2 <WsfMsgAlloc>
   10628:	b158      	cbz	r0, 10642 <DmSecCompareRsp+0x26>
   1062a:	8005      	strh	r5, [r0, #0]
   1062c:	b12c      	cbz	r4, 1063a <DmSecCompareRsp+0x1e>
   1062e:	2315      	movs	r3, #21
   10630:	7083      	strb	r3, [r0, #2]
   10632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10636:	f000 bb2a 	b.w	10c8e <SmpDmMsgSend>
   1063a:	f240 4303 	movw	r3, #1027	; 0x403
   1063e:	8043      	strh	r3, [r0, #2]
   10640:	e7f7      	b.n	10632 <DmSecCompareRsp+0x16>
   10642:	bd38      	pop	{r3, r4, r5, pc}

00010644 <DmSecGetCompareValue>:
   10644:	7b43      	ldrb	r3, [r0, #13]
   10646:	7b82      	ldrb	r2, [r0, #14]
   10648:	041b      	lsls	r3, r3, #16
   1064a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1064e:	7bc2      	ldrb	r2, [r0, #15]
   10650:	7b00      	ldrb	r0, [r0, #12]
   10652:	4413      	add	r3, r2
   10654:	4a03      	ldr	r2, [pc, #12]	; (10664 <DmSecGetCompareValue+0x20>)
   10656:	eb03 6300 	add.w	r3, r3, r0, lsl #24
   1065a:	fbb3 f0f2 	udiv	r0, r3, r2
   1065e:	fb02 3010 	mls	r0, r2, r0, r3
   10662:	4770      	bx	lr
   10664:	000f4240 	.word	0x000f4240

00010668 <DmSecLescInit>:
   10668:	4b01      	ldr	r3, [pc, #4]	; (10670 <DmSecLescInit+0x8>)
   1066a:	4a02      	ldr	r2, [pc, #8]	; (10674 <DmSecLescInit+0xc>)
   1066c:	621a      	str	r2, [r3, #32]
   1066e:	4770      	bx	lr
   10670:	10002b54 	.word	0x10002b54
   10674:	00025340 	.word	0x00025340

00010678 <l2cDefaultDataCback>:
   10678:	4770      	bx	lr

0001067a <l2cDefaultDataCidCback>:
   1067a:	4770      	bx	lr

0001067c <l2cDefaultCtrlCback>:
   1067c:	4770      	bx	lr

0001067e <l2cHciFlowCback>:
   1067e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10680:	460d      	mov	r5, r1
   10682:	f7ff f8e7 	bl	f854 <DmConnIdByHandle>
   10686:	b280      	uxth	r0, r0
   10688:	f8ad 0004 	strh.w	r0, [sp, #4]
   1068c:	b178      	cbz	r0, 106ae <l2cHciFlowCback+0x30>
   1068e:	4c09      	ldr	r4, [pc, #36]	; (106b4 <l2cHciFlowCback+0x36>)
   10690:	f88d 5006 	strb.w	r5, [sp, #6]
   10694:	68e3      	ldr	r3, [r4, #12]
   10696:	a801      	add	r0, sp, #4
   10698:	4798      	blx	r3
   1069a:	6923      	ldr	r3, [r4, #16]
   1069c:	f88d 5006 	strb.w	r5, [sp, #6]
   106a0:	a801      	add	r0, sp, #4
   106a2:	4798      	blx	r3
   106a4:	f88d 5006 	strb.w	r5, [sp, #6]
   106a8:	6963      	ldr	r3, [r4, #20]
   106aa:	a801      	add	r0, sp, #4
   106ac:	4798      	blx	r3
   106ae:	b003      	add	sp, #12
   106b0:	bd30      	pop	{r4, r5, pc}
   106b2:	bf00      	nop
   106b4:	10004098 	.word	0x10004098

000106b8 <l2cHciAclCback>:
   106b8:	b570      	push	{r4, r5, r6, lr}
   106ba:	78c2      	ldrb	r2, [r0, #3]
   106bc:	7883      	ldrb	r3, [r0, #2]
   106be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   106c2:	b29b      	uxth	r3, r3
   106c4:	2b03      	cmp	r3, #3
   106c6:	bf83      	ittte	hi
   106c8:	7942      	ldrbhi	r2, [r0, #5]
   106ca:	7901      	ldrbhi	r1, [r0, #4]
   106cc:	eb01 2102 	addhi.w	r1, r1, r2, lsl #8
   106d0:	2100      	movls	r1, #0
   106d2:	bf8a      	itet	hi
   106d4:	b289      	uxthhi	r1, r1
   106d6:	1d02      	addls	r2, r0, #4
   106d8:	1d82      	addhi	r2, r0, #6
   106da:	4604      	mov	r4, r0
   106dc:	1d08      	adds	r0, r1, #4
   106de:	4283      	cmp	r3, r0
   106e0:	d116      	bne.n	10710 <l2cHciAclCback+0x58>
   106e2:	7863      	ldrb	r3, [r4, #1]
   106e4:	7820      	ldrb	r0, [r4, #0]
   106e6:	7815      	ldrb	r5, [r2, #0]
   106e8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   106ec:	7853      	ldrb	r3, [r2, #1]
   106ee:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   106f2:	b2ad      	uxth	r5, r5
   106f4:	2d05      	cmp	r5, #5
   106f6:	f3c0 000b 	ubfx	r0, r0, #0, #12
   106fa:	4b0c      	ldr	r3, [pc, #48]	; (1072c <l2cHciAclCback+0x74>)
   106fc:	d005      	beq.n	1070a <l2cHciAclCback+0x52>
   106fe:	2d06      	cmp	r5, #6
   10700:	d00b      	beq.n	1071a <l2cHciAclCback+0x62>
   10702:	2d04      	cmp	r5, #4
   10704:	d10b      	bne.n	1071e <l2cHciAclCback+0x66>
   10706:	681b      	ldr	r3, [r3, #0]
   10708:	e000      	b.n	1070c <l2cHciAclCback+0x54>
   1070a:	689b      	ldr	r3, [r3, #8]
   1070c:	4622      	mov	r2, r4
   1070e:	4798      	blx	r3
   10710:	4620      	mov	r0, r4
   10712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10716:	f003 bf83 	b.w	14620 <WsfMsgFree>
   1071a:	685b      	ldr	r3, [r3, #4]
   1071c:	e7f6      	b.n	1070c <l2cHciAclCback+0x54>
   1071e:	6a1e      	ldr	r6, [r3, #32]
   10720:	460a      	mov	r2, r1
   10722:	4623      	mov	r3, r4
   10724:	4629      	mov	r1, r5
   10726:	47b0      	blx	r6
   10728:	e7f2      	b.n	10710 <l2cHciAclCback+0x58>
   1072a:	bf00      	nop
   1072c:	10004098 	.word	0x10004098

00010730 <l2cRxSignalingPkt>:
   10730:	b570      	push	{r4, r5, r6, lr}
   10732:	460d      	mov	r5, r1
   10734:	4616      	mov	r6, r2
   10736:	4604      	mov	r4, r0
   10738:	f7ff f88c 	bl	f854 <DmConnIdByHandle>
   1073c:	f7ff f916 	bl	f96c <DmConnRole>
   10740:	b940      	cbnz	r0, 10754 <l2cRxSignalingPkt+0x24>
   10742:	4b07      	ldr	r3, [pc, #28]	; (10760 <l2cRxSignalingPkt+0x30>)
   10744:	699b      	ldr	r3, [r3, #24]
   10746:	b153      	cbz	r3, 1075e <l2cRxSignalingPkt+0x2e>
   10748:	4632      	mov	r2, r6
   1074a:	4629      	mov	r1, r5
   1074c:	4620      	mov	r0, r4
   1074e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10752:	4718      	bx	r3
   10754:	2801      	cmp	r0, #1
   10756:	d102      	bne.n	1075e <l2cRxSignalingPkt+0x2e>
   10758:	4b01      	ldr	r3, [pc, #4]	; (10760 <l2cRxSignalingPkt+0x30>)
   1075a:	69db      	ldr	r3, [r3, #28]
   1075c:	e7f3      	b.n	10746 <l2cRxSignalingPkt+0x16>
   1075e:	bd70      	pop	{r4, r5, r6, pc}
   10760:	10004098 	.word	0x10004098

00010764 <l2cMsgAlloc>:
   10764:	2100      	movs	r1, #0
   10766:	f003 bf2f 	b.w	145c8 <WsfMsgDataAlloc>

0001076a <L2cInit>:
   1076a:	4b09      	ldr	r3, [pc, #36]	; (10790 <L2cInit+0x26>)
   1076c:	4a09      	ldr	r2, [pc, #36]	; (10794 <L2cInit+0x2a>)
   1076e:	490a      	ldr	r1, [pc, #40]	; (10798 <L2cInit+0x2e>)
   10770:	480a      	ldr	r0, [pc, #40]	; (1079c <L2cInit+0x32>)
   10772:	e9c3 2200 	strd	r2, r2, [r3]
   10776:	4a0a      	ldr	r2, [pc, #40]	; (107a0 <L2cInit+0x36>)
   10778:	609a      	str	r2, [r3, #8]
   1077a:	4a0a      	ldr	r2, [pc, #40]	; (107a4 <L2cInit+0x3a>)
   1077c:	615a      	str	r2, [r3, #20]
   1077e:	e9c3 2203 	strd	r2, r2, [r3, #12]
   10782:	4a09      	ldr	r2, [pc, #36]	; (107a8 <L2cInit+0x3e>)
   10784:	621a      	str	r2, [r3, #32]
   10786:	2201      	movs	r2, #1
   10788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   1078c:	f004 bff8 	b.w	15780 <HciAclRegister>
   10790:	10004098 	.word	0x10004098
   10794:	00010679 	.word	0x00010679
   10798:	0001067f 	.word	0x0001067f
   1079c:	000106b9 	.word	0x000106b9
   107a0:	00010731 	.word	0x00010731
   107a4:	0001067d 	.word	0x0001067d
   107a8:	0001067b 	.word	0x0001067b

000107ac <L2cRegister>:
   107ac:	4b03      	ldr	r3, [pc, #12]	; (107bc <L2cRegister+0x10>)
   107ae:	2804      	cmp	r0, #4
   107b0:	bf07      	ittee	eq
   107b2:	6019      	streq	r1, [r3, #0]
   107b4:	60da      	streq	r2, [r3, #12]
   107b6:	6059      	strne	r1, [r3, #4]
   107b8:	611a      	strne	r2, [r3, #16]
   107ba:	4770      	bx	lr
   107bc:	10004098 	.word	0x10004098

000107c0 <L2cDataReq>:
   107c0:	b410      	push	{r4}
   107c2:	7019      	strb	r1, [r3, #0]
   107c4:	b2d4      	uxtb	r4, r2
   107c6:	0a09      	lsrs	r1, r1, #8
   107c8:	7059      	strb	r1, [r3, #1]
   107ca:	1d21      	adds	r1, r4, #4
   107cc:	7099      	strb	r1, [r3, #2]
   107ce:	1d11      	adds	r1, r2, #4
   107d0:	1209      	asrs	r1, r1, #8
   107d2:	0a12      	lsrs	r2, r2, #8
   107d4:	7198      	strb	r0, [r3, #6]
   107d6:	0a00      	lsrs	r0, r0, #8
   107d8:	711c      	strb	r4, [r3, #4]
   107da:	71d8      	strb	r0, [r3, #7]
   107dc:	70d9      	strb	r1, [r3, #3]
   107de:	715a      	strb	r2, [r3, #5]
   107e0:	4618      	mov	r0, r3
   107e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   107e6:	f007 bdcf 	b.w	18388 <HciSendAclData>

000107ea <l2cSendCmdReject>:
   107ea:	b570      	push	{r4, r5, r6, lr}
   107ec:	4605      	mov	r5, r0
   107ee:	200e      	movs	r0, #14
   107f0:	460e      	mov	r6, r1
   107f2:	4614      	mov	r4, r2
   107f4:	f7ff ffb6 	bl	10764 <l2cMsgAlloc>
   107f8:	4603      	mov	r3, r0
   107fa:	b180      	cbz	r0, 1081e <l2cSendCmdReject+0x34>
   107fc:	2201      	movs	r2, #1
   107fe:	7202      	strb	r2, [r0, #8]
   10800:	2202      	movs	r2, #2
   10802:	7282      	strb	r2, [r0, #10]
   10804:	7304      	strb	r4, [r0, #12]
   10806:	2200      	movs	r2, #0
   10808:	0a24      	lsrs	r4, r4, #8
   1080a:	72c2      	strb	r2, [r0, #11]
   1080c:	7246      	strb	r6, [r0, #9]
   1080e:	7344      	strb	r4, [r0, #13]
   10810:	4629      	mov	r1, r5
   10812:	2206      	movs	r2, #6
   10814:	2005      	movs	r0, #5
   10816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1081a:	f7ff bfd1 	b.w	107c0 <L2cDataReq>
   1081e:	bd70      	pop	{r4, r5, r6, pc}

00010820 <smpDmConnCback>:
   10820:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10822:	4605      	mov	r5, r0
   10824:	8803      	ldrh	r3, [r0, #0]
   10826:	78aa      	ldrb	r2, [r5, #2]
   10828:	4e23      	ldr	r6, [pc, #140]	; (108b8 <smpDmConnCback+0x98>)
   1082a:	b2d8      	uxtb	r0, r3
   1082c:	2a27      	cmp	r2, #39	; 0x27
   1082e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   10832:	d120      	bne.n	10876 <smpDmConnCback+0x56>
   10834:	f7ff f89a 	bl	f96c <DmConnRole>
   10838:	2338      	movs	r3, #56	; 0x38
   1083a:	fb03 6304 	mla	r3, r3, r4, r6
   1083e:	b9a8      	cbnz	r0, 1086c <smpDmConnCback+0x4c>
   10840:	2201      	movs	r2, #1
   10842:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   10846:	220b      	movs	r2, #11
   10848:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1084c:	2338      	movs	r3, #56	; 0x38
   1084e:	fb03 6404 	mla	r4, r3, r4, r6
   10852:	88eb      	ldrh	r3, [r5, #6]
   10854:	8523      	strh	r3, [r4, #40]	; 0x28
   10856:	882b      	ldrh	r3, [r5, #0]
   10858:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   1085c:	2300      	movs	r3, #0
   1085e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   10862:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10866:	8663      	strh	r3, [r4, #50]	; 0x32
   10868:	b002      	add	sp, #8
   1086a:	bd70      	pop	{r4, r5, r6, pc}
   1086c:	2200      	movs	r2, #0
   1086e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   10872:	2201      	movs	r2, #1
   10874:	e7e8      	b.n	10848 <smpDmConnCback+0x28>
   10876:	2138      	movs	r1, #56	; 0x38
   10878:	fb01 6404 	mla	r4, r1, r4, r6
   1087c:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   10880:	2900      	cmp	r1, #0
   10882:	d0f1      	beq.n	10868 <smpDmConnCback+0x48>
   10884:	2a28      	cmp	r2, #40	; 0x28
   10886:	d1ef      	bne.n	10868 <smpDmConnCback+0x48>
   10888:	f8ad 3004 	strh.w	r3, [sp, #4]
   1088c:	230a      	movs	r3, #10
   1088e:	f88d 3006 	strb.w	r3, [sp, #6]
   10892:	7a2b      	ldrb	r3, [r5, #8]
   10894:	4620      	mov	r0, r4
   10896:	3320      	adds	r3, #32
   10898:	a901      	add	r1, sp, #4
   1089a:	f88d 3007 	strb.w	r3, [sp, #7]
   1089e:	f001 fbfc 	bl	1209a <smpSmExecute>
   108a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   108a4:	2500      	movs	r5, #0
   108a6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
   108aa:	2800      	cmp	r0, #0
   108ac:	d0dc      	beq.n	10868 <smpDmConnCback+0x48>
   108ae:	f003 feb7 	bl	14620 <WsfMsgFree>
   108b2:	6265      	str	r5, [r4, #36]	; 0x24
   108b4:	e7d8      	b.n	10868 <smpDmConnCback+0x48>
   108b6:	bf00      	nop
   108b8:	100040c0 	.word	0x100040c0

000108bc <smpCcbByHandle>:
   108bc:	b508      	push	{r3, lr}
   108be:	f7fe ffc9 	bl	f854 <DmConnIdByHandle>
   108c2:	b120      	cbz	r0, 108ce <smpCcbByHandle+0x12>
   108c4:	4b02      	ldr	r3, [pc, #8]	; (108d0 <smpCcbByHandle+0x14>)
   108c6:	3801      	subs	r0, #1
   108c8:	2238      	movs	r2, #56	; 0x38
   108ca:	fb02 3000 	mla	r0, r2, r0, r3
   108ce:	bd08      	pop	{r3, pc}
   108d0:	100040c0 	.word	0x100040c0

000108d4 <smpL2cDataCback>:
   108d4:	b530      	push	{r4, r5, lr}
   108d6:	b087      	sub	sp, #28
   108d8:	460d      	mov	r5, r1
   108da:	4614      	mov	r4, r2
   108dc:	f7ff ffee 	bl	108bc <smpCcbByHandle>
   108e0:	b1d8      	cbz	r0, 1091a <smpL2cDataCback+0x46>
   108e2:	7a23      	ldrb	r3, [r4, #8]
   108e4:	1e5a      	subs	r2, r3, #1
   108e6:	2a0d      	cmp	r2, #13
   108e8:	d817      	bhi.n	1091a <smpL2cDataCback+0x46>
   108ea:	4a10      	ldr	r2, [pc, #64]	; (1092c <smpL2cDataCback+0x58>)
   108ec:	5cd2      	ldrb	r2, [r2, r3]
   108ee:	42aa      	cmp	r2, r5
   108f0:	d113      	bne.n	1091a <smpL2cDataCback+0x46>
   108f2:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
   108f6:	429a      	cmp	r2, r3
   108f8:	d011      	beq.n	1091e <smpL2cDataCback+0x4a>
   108fa:	2b05      	cmp	r3, #5
   108fc:	d10d      	bne.n	1091a <smpL2cDataCback+0x46>
   108fe:	2307      	movs	r3, #7
   10900:	f88d 3002 	strb.w	r3, [sp, #2]
   10904:	7a63      	ldrb	r3, [r4, #9]
   10906:	f88d 3003 	strb.w	r3, [sp, #3]
   1090a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1090e:	f8ad 3000 	strh.w	r3, [sp]
   10912:	4669      	mov	r1, sp
   10914:	9401      	str	r4, [sp, #4]
   10916:	f001 fbc0 	bl	1209a <smpSmExecute>
   1091a:	b007      	add	sp, #28
   1091c:	bd30      	pop	{r4, r5, pc}
   1091e:	2a05      	cmp	r2, #5
   10920:	d0ed      	beq.n	108fe <smpL2cDataCback+0x2a>
   10922:	2306      	movs	r3, #6
   10924:	f88d 3002 	strb.w	r3, [sp, #2]
   10928:	e7ef      	b.n	1090a <smpL2cDataCback+0x36>
   1092a:	bf00      	nop
   1092c:	0002534c 	.word	0x0002534c

00010930 <smpCcbByConnId>:
   10930:	4b02      	ldr	r3, [pc, #8]	; (1093c <smpCcbByConnId+0xc>)
   10932:	2238      	movs	r2, #56	; 0x38
   10934:	3801      	subs	r0, #1
   10936:	fb02 3000 	mla	r0, r2, r0, r3
   1093a:	4770      	bx	lr
   1093c:	100040c0 	.word	0x100040c0

00010940 <smpCalcC1Part1>:
   10940:	b5f0      	push	{r4, r5, r6, r7, lr}
   10942:	4604      	mov	r4, r0
   10944:	b089      	sub	sp, #36	; 0x24
   10946:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1094a:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1094e:	460f      	mov	r7, r1
   10950:	4615      	mov	r5, r2
   10952:	2b00      	cmp	r3, #0
   10954:	d05a      	beq.n	10a0c <smpCalcC1Part1+0xcc>
   10956:	f7fe ffcb 	bl	f8f0 <DmConnLocalRpa>
   1095a:	f003 f9ce 	bl	13cfa <BdaIsZeros>
   1095e:	2800      	cmp	r0, #0
   10960:	d052      	beq.n	10a08 <smpCalcC1Part1+0xc8>
   10962:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10966:	f7fe ffa5 	bl	f8b4 <DmConnLocalAddrType>
   1096a:	4606      	mov	r6, r0
   1096c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10970:	f7fe ffb4 	bl	f8dc <DmConnPeerRpa>
   10974:	f003 f9c1 	bl	13cfa <BdaIsZeros>
   10978:	2800      	cmp	r0, #0
   1097a:	d05f      	beq.n	10a3c <smpCalcC1Part1+0xfc>
   1097c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10980:	f7fe ff86 	bl	f890 <DmConnPeerAddrType>
   10984:	462b      	mov	r3, r5
   10986:	f10d 0112 	add.w	r1, sp, #18
   1098a:	f813 2b02 	ldrb.w	r2, [r3], #2
   1098e:	4056      	eors	r6, r2
   10990:	786a      	ldrb	r2, [r5, #1]
   10992:	f88d 6010 	strb.w	r6, [sp, #16]
   10996:	4050      	eors	r0, r2
   10998:	f88d 0011 	strb.w	r0, [sp, #17]
   1099c:	f105 0609 	add.w	r6, r5, #9
   109a0:	f104 0010 	add.w	r0, r4, #16
   109a4:	f813 cb01 	ldrb.w	ip, [r3], #1
   109a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   109ac:	42b3      	cmp	r3, r6
   109ae:	ea82 020c 	eor.w	r2, r2, ip
   109b2:	f801 2b01 	strb.w	r2, [r1], #1
   109b6:	d1f5      	bne.n	109a4 <smpCalcC1Part1+0x64>
   109b8:	f104 0017 	add.w	r0, r4, #23
   109bc:	3510      	adds	r5, #16
   109be:	f10d 0119 	add.w	r1, sp, #25
   109c2:	f813 6b01 	ldrb.w	r6, [r3], #1
   109c6:	f810 2b01 	ldrb.w	r2, [r0], #1
   109ca:	42ab      	cmp	r3, r5
   109cc:	ea82 0206 	eor.w	r2, r2, r6
   109d0:	f801 2b01 	strb.w	r2, [r1], #1
   109d4:	d1f5      	bne.n	109c2 <smpCalcC1Part1+0x82>
   109d6:	4a1a      	ldr	r2, [pc, #104]	; (10a40 <smpCalcC1Part1+0x100>)
   109d8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   109dc:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   109e0:	210b      	movs	r1, #11
   109e2:	9100      	str	r1, [sp, #0]
   109e4:	4638      	mov	r0, r7
   109e6:	a904      	add	r1, sp, #16
   109e8:	f00a fcdc 	bl	1b3a4 <SecAes>
   109ec:	28ff      	cmp	r0, #255	; 0xff
   109ee:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   109f2:	d107      	bne.n	10a04 <smpCalcC1Part1+0xc4>
   109f4:	f640 0303 	movw	r3, #2051	; 0x803
   109f8:	a903      	add	r1, sp, #12
   109fa:	4620      	mov	r0, r4
   109fc:	f8ad 300e 	strh.w	r3, [sp, #14]
   10a00:	f001 fb4b 	bl	1209a <smpSmExecute>
   10a04:	b009      	add	sp, #36	; 0x24
   10a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a08:	2601      	movs	r6, #1
   10a0a:	e7af      	b.n	1096c <smpCalcC1Part1+0x2c>
   10a0c:	f7fe ff66 	bl	f8dc <DmConnPeerRpa>
   10a10:	f003 f973 	bl	13cfa <BdaIsZeros>
   10a14:	b180      	cbz	r0, 10a38 <smpCalcC1Part1+0xf8>
   10a16:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a1a:	f7fe ff39 	bl	f890 <DmConnPeerAddrType>
   10a1e:	4606      	mov	r6, r0
   10a20:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a24:	f7fe ff64 	bl	f8f0 <DmConnLocalRpa>
   10a28:	f003 f967 	bl	13cfa <BdaIsZeros>
   10a2c:	b130      	cbz	r0, 10a3c <smpCalcC1Part1+0xfc>
   10a2e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a32:	f7fe ff3f 	bl	f8b4 <DmConnLocalAddrType>
   10a36:	e7a5      	b.n	10984 <smpCalcC1Part1+0x44>
   10a38:	2601      	movs	r6, #1
   10a3a:	e7f1      	b.n	10a20 <smpCalcC1Part1+0xe0>
   10a3c:	2001      	movs	r0, #1
   10a3e:	e7a1      	b.n	10984 <smpCalcC1Part1+0x44>
   10a40:	100040c0 	.word	0x100040c0

00010a44 <smpCalcC1Part2>:
   10a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a48:	4604      	mov	r4, r0
   10a4a:	b088      	sub	sp, #32
   10a4c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10a50:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10a54:	4688      	mov	r8, r1
   10a56:	4615      	mov	r5, r2
   10a58:	2b00      	cmp	r3, #0
   10a5a:	d058      	beq.n	10b0e <smpCalcC1Part2+0xca>
   10a5c:	f7fe ff48 	bl	f8f0 <DmConnLocalRpa>
   10a60:	4606      	mov	r6, r0
   10a62:	f003 f94a 	bl	13cfa <BdaIsZeros>
   10a66:	b120      	cbz	r0, 10a72 <smpCalcC1Part2+0x2e>
   10a68:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a6c:	f7fe ff2c 	bl	f8c8 <DmConnLocalAddr>
   10a70:	4606      	mov	r6, r0
   10a72:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a76:	f7fe ff31 	bl	f8dc <DmConnPeerRpa>
   10a7a:	4607      	mov	r7, r0
   10a7c:	f003 f93d 	bl	13cfa <BdaIsZeros>
   10a80:	b120      	cbz	r0, 10a8c <smpCalcC1Part2+0x48>
   10a82:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a86:	f7fe ff0d 	bl	f8a4 <DmConnPeerAddr>
   10a8a:	4607      	mov	r7, r0
   10a8c:	4628      	mov	r0, r5
   10a8e:	2300      	movs	r3, #0
   10a90:	a904      	add	r1, sp, #16
   10a92:	f817 2b01 	ldrb.w	r2, [r7], #1
   10a96:	f810 cb01 	ldrb.w	ip, [r0], #1
   10a9a:	ea82 020c 	eor.w	r2, r2, ip
   10a9e:	545a      	strb	r2, [r3, r1]
   10aa0:	3301      	adds	r3, #1
   10aa2:	2b06      	cmp	r3, #6
   10aa4:	d1f5      	bne.n	10a92 <smpCalcC1Part2+0x4e>
   10aa6:	1dab      	adds	r3, r5, #6
   10aa8:	f105 070c 	add.w	r7, r5, #12
   10aac:	f10d 0016 	add.w	r0, sp, #22
   10ab0:	f816 2b01 	ldrb.w	r2, [r6], #1
   10ab4:	f813 cb01 	ldrb.w	ip, [r3], #1
   10ab8:	ea82 020c 	eor.w	r2, r2, ip
   10abc:	42bb      	cmp	r3, r7
   10abe:	f800 2b01 	strb.w	r2, [r0], #1
   10ac2:	d1f5      	bne.n	10ab0 <smpCalcC1Part2+0x6c>
   10ac4:	7b2b      	ldrb	r3, [r5, #12]
   10ac6:	f88d 301c 	strb.w	r3, [sp, #28]
   10aca:	7b6b      	ldrb	r3, [r5, #13]
   10acc:	f88d 301d 	strb.w	r3, [sp, #29]
   10ad0:	4a1b      	ldr	r2, [pc, #108]	; (10b40 <smpCalcC1Part2+0xfc>)
   10ad2:	7bab      	ldrb	r3, [r5, #14]
   10ad4:	f88d 301e 	strb.w	r3, [sp, #30]
   10ad8:	200b      	movs	r0, #11
   10ada:	7beb      	ldrb	r3, [r5, #15]
   10adc:	f88d 301f 	strb.w	r3, [sp, #31]
   10ae0:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10ae4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10ae8:	9000      	str	r0, [sp, #0]
   10aea:	4640      	mov	r0, r8
   10aec:	f00a fc5a 	bl	1b3a4 <SecAes>
   10af0:	28ff      	cmp	r0, #255	; 0xff
   10af2:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10af6:	d107      	bne.n	10b08 <smpCalcC1Part2+0xc4>
   10af8:	f640 0303 	movw	r3, #2051	; 0x803
   10afc:	a903      	add	r1, sp, #12
   10afe:	4620      	mov	r0, r4
   10b00:	f8ad 300e 	strh.w	r3, [sp, #14]
   10b04:	f001 fac9 	bl	1209a <smpSmExecute>
   10b08:	b008      	add	sp, #32
   10b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b0e:	f7fe fee5 	bl	f8dc <DmConnPeerRpa>
   10b12:	4606      	mov	r6, r0
   10b14:	f003 f8f1 	bl	13cfa <BdaIsZeros>
   10b18:	b120      	cbz	r0, 10b24 <smpCalcC1Part2+0xe0>
   10b1a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10b1e:	f7fe fec1 	bl	f8a4 <DmConnPeerAddr>
   10b22:	4606      	mov	r6, r0
   10b24:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10b28:	f7fe fee2 	bl	f8f0 <DmConnLocalRpa>
   10b2c:	4607      	mov	r7, r0
   10b2e:	f003 f8e4 	bl	13cfa <BdaIsZeros>
   10b32:	2800      	cmp	r0, #0
   10b34:	d0aa      	beq.n	10a8c <smpCalcC1Part2+0x48>
   10b36:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10b3a:	f7fe fec5 	bl	f8c8 <DmConnLocalAddr>
   10b3e:	e7a4      	b.n	10a8a <smpCalcC1Part2+0x46>
   10b40:	100040c0 	.word	0x100040c0

00010b44 <smpCalcS1>:
   10b44:	b570      	push	{r4, r5, r6, lr}
   10b46:	b088      	sub	sp, #32
   10b48:	4616      	mov	r6, r2
   10b4a:	4604      	mov	r4, r0
   10b4c:	460d      	mov	r5, r1
   10b4e:	a804      	add	r0, sp, #16
   10b50:	4619      	mov	r1, r3
   10b52:	f003 f8fa 	bl	13d4a <Calc128Cpy64>
   10b56:	4631      	mov	r1, r6
   10b58:	a806      	add	r0, sp, #24
   10b5a:	f003 f8f6 	bl	13d4a <Calc128Cpy64>
   10b5e:	4a0c      	ldr	r2, [pc, #48]	; (10b90 <smpCalcS1+0x4c>)
   10b60:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10b64:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10b68:	210b      	movs	r1, #11
   10b6a:	9100      	str	r1, [sp, #0]
   10b6c:	4628      	mov	r0, r5
   10b6e:	a904      	add	r1, sp, #16
   10b70:	f00a fc18 	bl	1b3a4 <SecAes>
   10b74:	28ff      	cmp	r0, #255	; 0xff
   10b76:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10b7a:	d107      	bne.n	10b8c <smpCalcS1+0x48>
   10b7c:	f640 0303 	movw	r3, #2051	; 0x803
   10b80:	a903      	add	r1, sp, #12
   10b82:	4620      	mov	r0, r4
   10b84:	f8ad 300e 	strh.w	r3, [sp, #14]
   10b88:	f001 fa87 	bl	1209a <smpSmExecute>
   10b8c:	b008      	add	sp, #32
   10b8e:	bd70      	pop	{r4, r5, r6, pc}
   10b90:	100040c0 	.word	0x100040c0

00010b94 <smpGenerateLtk>:
   10b94:	b570      	push	{r4, r5, r6, lr}
   10b96:	6a04      	ldr	r4, [r0, #32]
   10b98:	1d26      	adds	r6, r4, #4
   10b9a:	4605      	mov	r5, r0
   10b9c:	f894 1020 	ldrb.w	r1, [r4, #32]
   10ba0:	4630      	mov	r0, r6
   10ba2:	f00a ffd1 	bl	1bb48 <SecRand>
   10ba6:	f894 0020 	ldrb.w	r0, [r4, #32]
   10baa:	2100      	movs	r1, #0
   10bac:	f1c0 0210 	rsb	r2, r0, #16
   10bb0:	4430      	add	r0, r6
   10bb2:	f7fb fbd3 	bl	c35c <memset>
   10bb6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   10bba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   10bbe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10bc2:	4622      	mov	r2, r4
   10bc4:	83a3      	strh	r3, [r4, #28]
   10bc6:	f852 3f32 	ldr.w	r3, [r2, #50]!
   10bca:	6163      	str	r3, [r4, #20]
   10bcc:	6853      	ldr	r3, [r2, #4]
   10bce:	61a3      	str	r3, [r4, #24]
   10bd0:	2301      	movs	r3, #1
   10bd2:	77a3      	strb	r3, [r4, #30]
   10bd4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   10bd8:	f013 0f04 	tst.w	r3, #4
   10bdc:	bf14      	ite	ne
   10bde:	2302      	movne	r3, #2
   10be0:	2301      	moveq	r3, #1
   10be2:	77e3      	strb	r3, [r4, #31]
   10be4:	232f      	movs	r3, #47	; 0x2f
   10be6:	70a3      	strb	r3, [r4, #2]
   10be8:	4620      	mov	r0, r4
   10bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10bee:	f7ff bb5d 	b.w	102ac <DmSmpCbackExec>

00010bf2 <smpSendPkt>:
   10bf2:	b570      	push	{r4, r5, r6, lr}
   10bf4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   10bf8:	4604      	mov	r4, r0
   10bfa:	460d      	mov	r5, r1
   10bfc:	b12b      	cbz	r3, 10c0a <smpSendPkt+0x18>
   10bfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
   10c00:	b108      	cbz	r0, 10c06 <smpSendPkt+0x14>
   10c02:	f003 fd0d 	bl	14620 <WsfMsgFree>
   10c06:	6265      	str	r5, [r4, #36]	; 0x24
   10c08:	bd70      	pop	{r4, r5, r6, pc}
   10c0a:	7a0a      	ldrb	r2, [r1, #8]
   10c0c:	460b      	mov	r3, r1
   10c0e:	4904      	ldr	r1, [pc, #16]	; (10c20 <smpSendPkt+0x2e>)
   10c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10c14:	5c8a      	ldrb	r2, [r1, r2]
   10c16:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   10c18:	2006      	movs	r0, #6
   10c1a:	f7ff bdd1 	b.w	107c0 <L2cDataReq>
   10c1e:	bf00      	nop
   10c20:	0002534c 	.word	0x0002534c

00010c24 <smpL2cCtrlCback>:
   10c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c26:	7805      	ldrb	r5, [r0, #0]
   10c28:	4f13      	ldr	r7, [pc, #76]	; (10c78 <smpL2cCtrlCback+0x54>)
   10c2a:	3d01      	subs	r5, #1
   10c2c:	2438      	movs	r4, #56	; 0x38
   10c2e:	fb04 7405 	mla	r4, r4, r5, r7
   10c32:	4606      	mov	r6, r0
   10c34:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   10c38:	b1e2      	cbz	r2, 10c74 <smpL2cCtrlCback+0x50>
   10c3a:	7883      	ldrb	r3, [r0, #2]
   10c3c:	2b01      	cmp	r3, #1
   10c3e:	bf0c      	ite	eq
   10c40:	2301      	moveq	r3, #1
   10c42:	2300      	movne	r3, #0
   10c44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10c48:	d014      	beq.n	10c74 <smpL2cCtrlCback+0x50>
   10c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10c4c:	b121      	cbz	r1, 10c58 <smpL2cCtrlCback+0x34>
   10c4e:	2300      	movs	r3, #0
   10c50:	6263      	str	r3, [r4, #36]	; 0x24
   10c52:	4620      	mov	r0, r4
   10c54:	f7ff ffcd 	bl	10bf2 <smpSendPkt>
   10c58:	2338      	movs	r3, #56	; 0x38
   10c5a:	fb03 7505 	mla	r5, r3, r5, r7
   10c5e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   10c62:	b13b      	cbz	r3, 10c74 <smpL2cCtrlCback+0x50>
   10c64:	230c      	movs	r3, #12
   10c66:	70b3      	strb	r3, [r6, #2]
   10c68:	4631      	mov	r1, r6
   10c6a:	4620      	mov	r0, r4
   10c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10c70:	f001 ba13 	b.w	1209a <smpSmExecute>
   10c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c76:	bf00      	nop
   10c78:	100040c0 	.word	0x100040c0

00010c7c <smpStateIdle>:
   10c7c:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10c80:	fab0 f080 	clz	r0, r0
   10c84:	0940      	lsrs	r0, r0, #5
   10c86:	4770      	bx	lr

00010c88 <smpMsgAlloc>:
   10c88:	2100      	movs	r1, #0
   10c8a:	f003 bc9d 	b.w	145c8 <WsfMsgDataAlloc>

00010c8e <SmpDmMsgSend>:
   10c8e:	4b03      	ldr	r3, [pc, #12]	; (10c9c <SmpDmMsgSend+0xe>)
   10c90:	4601      	mov	r1, r0
   10c92:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   10c96:	f003 bcd0 	b.w	1463a <WsfMsgSend>
   10c9a:	bf00      	nop
   10c9c:	100040c0 	.word	0x100040c0

00010ca0 <SmpDmGetStk>:
   10ca0:	b530      	push	{r4, r5, lr}
   10ca2:	4c12      	ldr	r4, [pc, #72]	; (10cec <SmpDmGetStk+0x4c>)
   10ca4:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
   10ca8:	3801      	subs	r0, #1
   10caa:	4623      	mov	r3, r4
   10cac:	b16a      	cbz	r2, 10cca <SmpDmGetStk+0x2a>
   10cae:	2238      	movs	r2, #56	; 0x38
   10cb0:	fb02 4200 	mla	r2, r2, r0, r4
   10cb4:	6b54      	ldr	r4, [r2, #52]	; 0x34
   10cb6:	7825      	ldrb	r5, [r4, #0]
   10cb8:	b13d      	cbz	r5, 10cca <SmpDmGetStk+0x2a>
   10cba:	6924      	ldr	r4, [r4, #16]
   10cbc:	b12c      	cbz	r4, 10cca <SmpDmGetStk+0x2a>
   10cbe:	2303      	movs	r3, #3
   10cc0:	700b      	strb	r3, [r1, #0]
   10cc2:	6b53      	ldr	r3, [r2, #52]	; 0x34
   10cc4:	6918      	ldr	r0, [r3, #16]
   10cc6:	3010      	adds	r0, #16
   10cc8:	bd30      	pop	{r4, r5, pc}
   10cca:	2238      	movs	r2, #56	; 0x38
   10ccc:	fb02 3300 	mla	r3, r2, r0, r3
   10cd0:	6a18      	ldr	r0, [r3, #32]
   10cd2:	2800      	cmp	r0, #0
   10cd4:	d0f8      	beq.n	10cc8 <SmpDmGetStk+0x28>
   10cd6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   10cda:	f012 0f04 	tst.w	r2, #4
   10cde:	bf14      	ite	ne
   10ce0:	2202      	movne	r2, #2
   10ce2:	2201      	moveq	r2, #1
   10ce4:	700a      	strb	r2, [r1, #0]
   10ce6:	6a18      	ldr	r0, [r3, #32]
   10ce8:	3020      	adds	r0, #32
   10cea:	e7ed      	b.n	10cc8 <SmpDmGetStk+0x28>
   10cec:	100040c0 	.word	0x100040c0

00010cf0 <SmpDmGetLtk>:
   10cf0:	4a05      	ldr	r2, [pc, #20]	; (10d08 <SmpDmGetLtk+0x18>)
   10cf2:	1e43      	subs	r3, r0, #1
   10cf4:	f892 01d4 	ldrb.w	r0, [r2, #468]	; 0x1d4
   10cf8:	b128      	cbz	r0, 10d06 <SmpDmGetLtk+0x16>
   10cfa:	2038      	movs	r0, #56	; 0x38
   10cfc:	fb00 2003 	mla	r0, r0, r3, r2
   10d00:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10d02:	6918      	ldr	r0, [r3, #16]
   10d04:	3010      	adds	r0, #16
   10d06:	4770      	bx	lr
   10d08:	100040c0 	.word	0x100040c0

00010d0c <SmpHandlerInit>:
   10d0c:	b508      	push	{r3, lr}
   10d0e:	4b0d      	ldr	r3, [pc, #52]	; (10d44 <SmpHandlerInit+0x38>)
   10d10:	2201      	movs	r2, #1
   10d12:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
   10d16:	3338      	adds	r3, #56	; 0x38
   10d18:	f823 2c2e 	strh.w	r2, [r3, #-46]
   10d1c:	3201      	adds	r2, #1
   10d1e:	b292      	uxth	r2, r2
   10d20:	2a09      	cmp	r2, #9
   10d22:	f803 0c30 	strb.w	r0, [r3, #-48]
   10d26:	f103 0338 	add.w	r3, r3, #56	; 0x38
   10d2a:	d1f5      	bne.n	10d18 <SmpHandlerInit+0xc>
   10d2c:	4906      	ldr	r1, [pc, #24]	; (10d48 <SmpHandlerInit+0x3c>)
   10d2e:	4a07      	ldr	r2, [pc, #28]	; (10d4c <SmpHandlerInit+0x40>)
   10d30:	2006      	movs	r0, #6
   10d32:	f7ff fd3b 	bl	107ac <L2cRegister>
   10d36:	4906      	ldr	r1, [pc, #24]	; (10d50 <SmpHandlerInit+0x44>)
   10d38:	2001      	movs	r0, #1
   10d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10d3e:	f7fe bc73 	b.w	f628 <DmConnRegister>
   10d42:	bf00      	nop
   10d44:	100040c0 	.word	0x100040c0
   10d48:	000108d5 	.word	0x000108d5
   10d4c:	00010c25 	.word	0x00010c25
   10d50:	00010821 	.word	0x00010821

00010d54 <SmpHandler>:
   10d54:	b410      	push	{r4}
   10d56:	b1b9      	cbz	r1, 10d88 <SmpHandler+0x34>
   10d58:	780b      	ldrb	r3, [r1, #0]
   10d5a:	480d      	ldr	r0, [pc, #52]	; (10d90 <SmpHandler+0x3c>)
   10d5c:	3b01      	subs	r3, #1
   10d5e:	2238      	movs	r2, #56	; 0x38
   10d60:	fb02 0203 	mla	r2, r2, r3, r0
   10d64:	f892 402d 	ldrb.w	r4, [r2, #45]	; 0x2d
   10d68:	b174      	cbz	r4, 10d88 <SmpHandler+0x34>
   10d6a:	788c      	ldrb	r4, [r1, #2]
   10d6c:	2c0b      	cmp	r4, #11
   10d6e:	d104      	bne.n	10d7a <SmpHandler+0x26>
   10d70:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
   10d74:	78ca      	ldrb	r2, [r1, #3]
   10d76:	4294      	cmp	r4, r2
   10d78:	d106      	bne.n	10d88 <SmpHandler+0x34>
   10d7a:	2238      	movs	r2, #56	; 0x38
   10d7c:	fb02 0003 	mla	r0, r2, r3, r0
   10d80:	f85d 4b04 	ldr.w	r4, [sp], #4
   10d84:	f001 b989 	b.w	1209a <smpSmExecute>
   10d88:	f85d 4b04 	ldr.w	r4, [sp], #4
   10d8c:	4770      	bx	lr
   10d8e:	bf00      	nop
   10d90:	100040c0 	.word	0x100040c0

00010d94 <SmpDmEncryptInd>:
   10d94:	78c3      	ldrb	r3, [r0, #3]
   10d96:	2b00      	cmp	r3, #0
   10d98:	bf0c      	ite	eq
   10d9a:	2308      	moveq	r3, #8
   10d9c:	2309      	movne	r3, #9
   10d9e:	4601      	mov	r1, r0
   10da0:	7083      	strb	r3, [r0, #2]
   10da2:	2000      	movs	r0, #0
   10da4:	f7ff bfd6 	b.w	10d54 <SmpHandler>

00010da8 <SmpScAllocScratchBuffers>:
   10da8:	b538      	push	{r3, r4, r5, lr}
   10daa:	6b45      	ldr	r5, [r0, #52]	; 0x34
   10dac:	68eb      	ldr	r3, [r5, #12]
   10dae:	4604      	mov	r4, r0
   10db0:	b91b      	cbnz	r3, 10dba <SmpScAllocScratchBuffers+0x12>
   10db2:	2060      	movs	r0, #96	; 0x60
   10db4:	f003 fb8e 	bl	144d4 <WsfBufAlloc>
   10db8:	60e8      	str	r0, [r5, #12]
   10dba:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10dbc:	68ab      	ldr	r3, [r5, #8]
   10dbe:	b91b      	cbnz	r3, 10dc8 <SmpScAllocScratchBuffers+0x20>
   10dc0:	2040      	movs	r0, #64	; 0x40
   10dc2:	f003 fb87 	bl	144d4 <WsfBufAlloc>
   10dc6:	60a8      	str	r0, [r5, #8]
   10dc8:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10dca:	692b      	ldr	r3, [r5, #16]
   10dcc:	b91b      	cbnz	r3, 10dd6 <SmpScAllocScratchBuffers+0x2e>
   10dce:	2020      	movs	r0, #32
   10dd0:	f003 fb80 	bl	144d4 <WsfBufAlloc>
   10dd4:	6128      	str	r0, [r5, #16]
   10dd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10dd8:	68d8      	ldr	r0, [r3, #12]
   10dda:	b128      	cbz	r0, 10de8 <SmpScAllocScratchBuffers+0x40>
   10ddc:	6898      	ldr	r0, [r3, #8]
   10dde:	b118      	cbz	r0, 10de8 <SmpScAllocScratchBuffers+0x40>
   10de0:	6918      	ldr	r0, [r3, #16]
   10de2:	3000      	adds	r0, #0
   10de4:	bf18      	it	ne
   10de6:	2001      	movne	r0, #1
   10de8:	bd38      	pop	{r3, r4, r5, pc}

00010dea <SmpScFreeScratchBuffers>:
   10dea:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10dec:	b510      	push	{r4, lr}
   10dee:	4604      	mov	r4, r0
   10df0:	68d8      	ldr	r0, [r3, #12]
   10df2:	b120      	cbz	r0, 10dfe <SmpScFreeScratchBuffers+0x14>
   10df4:	f003 fbae 	bl	14554 <WsfBufFree>
   10df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10dfa:	2200      	movs	r2, #0
   10dfc:	60da      	str	r2, [r3, #12]
   10dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10e00:	6898      	ldr	r0, [r3, #8]
   10e02:	b120      	cbz	r0, 10e0e <SmpScFreeScratchBuffers+0x24>
   10e04:	f003 fba6 	bl	14554 <WsfBufFree>
   10e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10e0a:	2200      	movs	r2, #0
   10e0c:	609a      	str	r2, [r3, #8]
   10e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10e10:	6918      	ldr	r0, [r3, #16]
   10e12:	b120      	cbz	r0, 10e1e <SmpScFreeScratchBuffers+0x34>
   10e14:	f003 fb9e 	bl	14554 <WsfBufFree>
   10e18:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10e1a:	2200      	movs	r2, #0
   10e1c:	611a      	str	r2, [r3, #16]
   10e1e:	bd10      	pop	{r4, pc}

00010e20 <SmpScCmac>:
   10e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10e22:	461c      	mov	r4, r3
   10e24:	4b0b      	ldr	r3, [pc, #44]	; (10e54 <SmpScCmac+0x34>)
   10e26:	9d06      	ldr	r5, [sp, #24]
   10e28:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
   10e2c:	261b      	movs	r6, #27
   10e2e:	9601      	str	r6, [sp, #4]
   10e30:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   10e34:	9600      	str	r6, [sp, #0]
   10e36:	f00a fc8b 	bl	1b750 <SecCmac>
   10e3a:	b948      	cbnz	r0, 10e50 <SmpScCmac+0x30>
   10e3c:	f640 0303 	movw	r3, #2051	; 0x803
   10e40:	4629      	mov	r1, r5
   10e42:	4620      	mov	r0, r4
   10e44:	806b      	strh	r3, [r5, #2]
   10e46:	b002      	add	sp, #8
   10e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10e4c:	f001 b925 	b.w	1209a <smpSmExecute>
   10e50:	b002      	add	sp, #8
   10e52:	bd70      	pop	{r4, r5, r6, pc}
   10e54:	100040c0 	.word	0x100040c0

00010e58 <SmpScAlloc>:
   10e58:	b570      	push	{r4, r5, r6, lr}
   10e5a:	460e      	mov	r6, r1
   10e5c:	4615      	mov	r5, r2
   10e5e:	f003 fb39 	bl	144d4 <WsfBufAlloc>
   10e62:	4604      	mov	r4, r0
   10e64:	b930      	cbnz	r0, 10e74 <SmpScAlloc+0x1c>
   10e66:	f640 0303 	movw	r3, #2051	; 0x803
   10e6a:	806b      	strh	r3, [r5, #2]
   10e6c:	4629      	mov	r1, r5
   10e6e:	4630      	mov	r0, r6
   10e70:	f001 f913 	bl	1209a <smpSmExecute>
   10e74:	4620      	mov	r0, r4
   10e76:	bd70      	pop	{r4, r5, r6, pc}

00010e78 <SmpScFree>:
   10e78:	f003 bb6c 	b.w	14554 <WsfBufFree>

00010e7c <SmpScCalcF4>:
   10e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10e80:	4606      	mov	r6, r0
   10e82:	460f      	mov	r7, r1
   10e84:	4615      	mov	r5, r2
   10e86:	460a      	mov	r2, r1
   10e88:	4601      	mov	r1, r0
   10e8a:	2041      	movs	r0, #65	; 0x41
   10e8c:	461c      	mov	r4, r3
   10e8e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   10e92:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10e96:	f7ff ffdf 	bl	10e58 <SmpScAlloc>
   10e9a:	4601      	mov	r1, r0
   10e9c:	b1f0      	cbz	r0, 10edc <SmpScCalcF4+0x60>
   10e9e:	4603      	mov	r3, r0
   10ea0:	462a      	mov	r2, r5
   10ea2:	f105 0020 	add.w	r0, r5, #32
   10ea6:	f852 5b04 	ldr.w	r5, [r2], #4
   10eaa:	f843 5b04 	str.w	r5, [r3], #4
   10eae:	4282      	cmp	r2, r0
   10eb0:	d1f9      	bne.n	10ea6 <SmpScCalcF4+0x2a>
   10eb2:	4623      	mov	r3, r4
   10eb4:	f101 0220 	add.w	r2, r1, #32
   10eb8:	f104 0020 	add.w	r0, r4, #32
   10ebc:	f853 4b04 	ldr.w	r4, [r3], #4
   10ec0:	f842 4b04 	str.w	r4, [r2], #4
   10ec4:	4283      	cmp	r3, r0
   10ec6:	d1f9      	bne.n	10ebc <SmpScCalcF4+0x40>
   10ec8:	f881 9040 	strb.w	r9, [r1, #64]	; 0x40
   10ecc:	4633      	mov	r3, r6
   10ece:	9708      	str	r7, [sp, #32]
   10ed0:	4640      	mov	r0, r8
   10ed2:	2241      	movs	r2, #65	; 0x41
   10ed4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ed8:	f7ff bfa2 	b.w	10e20 <SmpScCmac>
   10edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010ee0 <SmpScInit>:
   10ee0:	4a13      	ldr	r2, [pc, #76]	; (10f30 <SmpScInit+0x50>)
   10ee2:	4b14      	ldr	r3, [pc, #80]	; (10f34 <SmpScInit+0x54>)
   10ee4:	f102 0114 	add.w	r1, r2, #20
   10ee8:	66d9      	str	r1, [r3, #108]	; 0x6c
   10eea:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10eee:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
   10ef2:	f102 013c 	add.w	r1, r2, #60	; 0x3c
   10ef6:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   10efa:	f102 0150 	add.w	r1, r2, #80	; 0x50
   10efe:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
   10f02:	f102 0164 	add.w	r1, r2, #100	; 0x64
   10f06:	635a      	str	r2, [r3, #52]	; 0x34
   10f08:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
   10f0c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   10f10:	328c      	adds	r2, #140	; 0x8c
   10f12:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
   10f16:	4a08      	ldr	r2, [pc, #32]	; (10f38 <SmpScInit+0x58>)
   10f18:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   10f1c:	4a07      	ldr	r2, [pc, #28]	; (10f3c <SmpScInit+0x5c>)
   10f1e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   10f22:	2201      	movs	r2, #1
   10f24:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
   10f28:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   10f2c:	4770      	bx	lr
   10f2e:	bf00      	nop
   10f30:	10004298 	.word	0x10004298
   10f34:	100040c0 	.word	0x100040c0
   10f38:	00011269 	.word	0x00011269
   10f3c:	00011441 	.word	0x00011441

00010f40 <SmpScCat>:
   10f40:	b510      	push	{r4, lr}
   10f42:	4614      	mov	r4, r2
   10f44:	f7fb f90c 	bl	c160 <memcpy>
   10f48:	4420      	add	r0, r4
   10f4a:	bd10      	pop	{r4, pc}

00010f4c <SmpScCat128>:
   10f4c:	b510      	push	{r4, lr}
   10f4e:	4604      	mov	r4, r0
   10f50:	f002 feed 	bl	13d2e <Calc128Cpy>
   10f54:	f104 0010 	add.w	r0, r4, #16
   10f58:	bd10      	pop	{r4, pc}

00010f5a <smpScSendPubKey>:
   10f5a:	b570      	push	{r4, r5, r6, lr}
   10f5c:	2201      	movs	r2, #1
   10f5e:	4605      	mov	r5, r0
   10f60:	460e      	mov	r6, r1
   10f62:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10f66:	4611      	mov	r1, r2
   10f68:	f7fe fcd6 	bl	f918 <DmConnSetIdle>
   10f6c:	4628      	mov	r0, r5
   10f6e:	f000 fe81 	bl	11c74 <smpStartRspTimer>
   10f72:	2049      	movs	r0, #73	; 0x49
   10f74:	f7ff fe88 	bl	10c88 <smpMsgAlloc>
   10f78:	4604      	mov	r4, r0
   10f7a:	b1b8      	cbz	r0, 10fac <smpScSendPubKey+0x52>
   10f7c:	230c      	movs	r3, #12
   10f7e:	7203      	strb	r3, [r0, #8]
   10f80:	f7ff fb48 	bl	10614 <DmSecGetEccKey>
   10f84:	2220      	movs	r2, #32
   10f86:	4601      	mov	r1, r0
   10f88:	f104 0009 	add.w	r0, r4, #9
   10f8c:	f002 ff36 	bl	13dfc <WStrReverseCpy>
   10f90:	f7ff fb40 	bl	10614 <DmSecGetEccKey>
   10f94:	2220      	movs	r2, #32
   10f96:	1881      	adds	r1, r0, r2
   10f98:	f104 0029 	add.w	r0, r4, #41	; 0x29
   10f9c:	f002 ff2e 	bl	13dfc <WStrReverseCpy>
   10fa0:	4621      	mov	r1, r4
   10fa2:	4628      	mov	r0, r5
   10fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10fa8:	f7ff be23 	b.w	10bf2 <smpSendPkt>
   10fac:	f640 0303 	movw	r3, #2051	; 0x803
   10fb0:	8073      	strh	r3, [r6, #2]
   10fb2:	4631      	mov	r1, r6
   10fb4:	4628      	mov	r0, r5
   10fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10fba:	f001 b86e 	b.w	1209a <smpSmExecute>

00010fbe <smpScSendDHKeyCheck>:
   10fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10fc0:	4617      	mov	r7, r2
   10fc2:	2201      	movs	r2, #1
   10fc4:	4604      	mov	r4, r0
   10fc6:	460e      	mov	r6, r1
   10fc8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10fcc:	4611      	mov	r1, r2
   10fce:	f7fe fca3 	bl	f918 <DmConnSetIdle>
   10fd2:	4620      	mov	r0, r4
   10fd4:	f000 fe4e 	bl	11c74 <smpStartRspTimer>
   10fd8:	2019      	movs	r0, #25
   10fda:	f7ff fe55 	bl	10c88 <smpMsgAlloc>
   10fde:	4605      	mov	r5, r0
   10fe0:	b160      	cbz	r0, 10ffc <smpScSendDHKeyCheck+0x3e>
   10fe2:	230d      	movs	r3, #13
   10fe4:	7203      	strb	r3, [r0, #8]
   10fe6:	4639      	mov	r1, r7
   10fe8:	3009      	adds	r0, #9
   10fea:	2210      	movs	r2, #16
   10fec:	f002 ff06 	bl	13dfc <WStrReverseCpy>
   10ff0:	4629      	mov	r1, r5
   10ff2:	4620      	mov	r0, r4
   10ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10ff8:	f7ff bdfb 	b.w	10bf2 <smpSendPkt>
   10ffc:	f640 0303 	movw	r3, #2051	; 0x803
   11000:	8073      	strh	r3, [r6, #2]
   11002:	4631      	mov	r1, r6
   11004:	4620      	mov	r0, r4
   11006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1100a:	f001 b846 	b.w	1209a <smpSmExecute>

0001100e <smpScSendRand>:
   1100e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11010:	4617      	mov	r7, r2
   11012:	2201      	movs	r2, #1
   11014:	4604      	mov	r4, r0
   11016:	460e      	mov	r6, r1
   11018:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1101c:	4611      	mov	r1, r2
   1101e:	f7fe fc7b 	bl	f918 <DmConnSetIdle>
   11022:	4620      	mov	r0, r4
   11024:	f000 fe26 	bl	11c74 <smpStartRspTimer>
   11028:	2019      	movs	r0, #25
   1102a:	f7ff fe2d 	bl	10c88 <smpMsgAlloc>
   1102e:	4605      	mov	r5, r0
   11030:	b160      	cbz	r0, 1104c <smpScSendRand+0x3e>
   11032:	2304      	movs	r3, #4
   11034:	7203      	strb	r3, [r0, #8]
   11036:	4639      	mov	r1, r7
   11038:	3009      	adds	r0, #9
   1103a:	2210      	movs	r2, #16
   1103c:	f002 fede 	bl	13dfc <WStrReverseCpy>
   11040:	4629      	mov	r1, r5
   11042:	4620      	mov	r0, r4
   11044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11048:	f7ff bdd3 	b.w	10bf2 <smpSendPkt>
   1104c:	f640 0303 	movw	r3, #2051	; 0x803
   11050:	8073      	strh	r3, [r6, #2]
   11052:	4631      	mov	r1, r6
   11054:	4620      	mov	r0, r4
   11056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1105a:	f001 b81e 	b.w	1209a <smpSmExecute>

0001105e <smpScSendPairCnf>:
   1105e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11060:	4617      	mov	r7, r2
   11062:	2201      	movs	r2, #1
   11064:	4604      	mov	r4, r0
   11066:	460e      	mov	r6, r1
   11068:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1106c:	4611      	mov	r1, r2
   1106e:	f7fe fc53 	bl	f918 <DmConnSetIdle>
   11072:	4620      	mov	r0, r4
   11074:	f000 fdfe 	bl	11c74 <smpStartRspTimer>
   11078:	2019      	movs	r0, #25
   1107a:	f7ff fe05 	bl	10c88 <smpMsgAlloc>
   1107e:	4605      	mov	r5, r0
   11080:	b160      	cbz	r0, 1109c <smpScSendPairCnf+0x3e>
   11082:	2303      	movs	r3, #3
   11084:	7203      	strb	r3, [r0, #8]
   11086:	4639      	mov	r1, r7
   11088:	3009      	adds	r0, #9
   1108a:	2210      	movs	r2, #16
   1108c:	f002 feb6 	bl	13dfc <WStrReverseCpy>
   11090:	4629      	mov	r1, r5
   11092:	4620      	mov	r0, r4
   11094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11098:	f7ff bdab 	b.w	10bf2 <smpSendPkt>
   1109c:	f640 0303 	movw	r3, #2051	; 0x803
   110a0:	8073      	strh	r3, [r6, #2]
   110a2:	4631      	mov	r1, r6
   110a4:	4620      	mov	r0, r4
   110a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   110aa:	f000 bff6 	b.w	1209a <smpSmExecute>

000110ae <smpGetPkBit>:
   110ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   110b0:	78da      	ldrb	r2, [r3, #3]
   110b2:	68d9      	ldr	r1, [r3, #12]
   110b4:	08d3      	lsrs	r3, r2, #3
   110b6:	f1c3 030f 	rsb	r3, r3, #15
   110ba:	fa51 f383 	uxtab	r3, r1, r3
   110be:	f002 0207 	and.w	r2, r2, #7
   110c2:	f893 3020 	ldrb.w	r3, [r3, #32]
   110c6:	fa43 f202 	asr.w	r2, r3, r2
   110ca:	f012 0f01 	tst.w	r2, #1
   110ce:	bf14      	ite	ne
   110d0:	2081      	movne	r0, #129	; 0x81
   110d2:	2080      	moveq	r0, #128	; 0x80
   110d4:	4770      	bx	lr

000110d6 <smpGetPeerPublicKey>:
   110d6:	b508      	push	{r3, lr}
   110d8:	f7ff fc2a 	bl	10930 <smpCcbByConnId>
   110dc:	6b40      	ldr	r0, [r0, #52]	; 0x34
   110de:	b100      	cbz	r0, 110e2 <smpGetPeerPublicKey+0xc>
   110e0:	6880      	ldr	r0, [r0, #8]
   110e2:	bd08      	pop	{r3, pc}

000110e4 <smpSetPeerPublicKey>:
   110e4:	b510      	push	{r4, lr}
   110e6:	460c      	mov	r4, r1
   110e8:	f7ff fc22 	bl	10930 <smpCcbByConnId>
   110ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
   110ee:	b14b      	cbz	r3, 11104 <smpSetPeerPublicKey+0x20>
   110f0:	689b      	ldr	r3, [r3, #8]
   110f2:	4621      	mov	r1, r4
   110f4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   110f8:	f851 0b04 	ldr.w	r0, [r1], #4
   110fc:	f843 0b04 	str.w	r0, [r3], #4
   11100:	4291      	cmp	r1, r2
   11102:	d1f9      	bne.n	110f8 <smpSetPeerPublicKey+0x14>
   11104:	bd10      	pop	{r4, pc}

00011106 <SmpScSetOobCfg>:
   11106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11108:	460d      	mov	r5, r1
   1110a:	f7ff fc11 	bl	10930 <smpCcbByConnId>
   1110e:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   11112:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11114:	4604      	mov	r4, r0
   11116:	f105 0110 	add.w	r1, r5, #16
   1111a:	f105 0730 	add.w	r7, r5, #48	; 0x30
   1111e:	f105 0620 	add.w	r6, r5, #32
   11122:	68d8      	ldr	r0, [r3, #12]
   11124:	b1b2      	cbz	r2, 11154 <SmpScSetOobCfg+0x4e>
   11126:	3050      	adds	r0, #80	; 0x50
   11128:	f002 fe01 	bl	13d2e <Calc128Cpy>
   1112c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1112e:	68d8      	ldr	r0, [r3, #12]
   11130:	4629      	mov	r1, r5
   11132:	3020      	adds	r0, #32
   11134:	f002 fdfb 	bl	13d2e <Calc128Cpy>
   11138:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1113a:	68d8      	ldr	r0, [r3, #12]
   1113c:	4639      	mov	r1, r7
   1113e:	3040      	adds	r0, #64	; 0x40
   11140:	f002 fdf5 	bl	13d2e <Calc128Cpy>
   11144:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11146:	68d8      	ldr	r0, [r3, #12]
   11148:	4631      	mov	r1, r6
   1114a:	3030      	adds	r0, #48	; 0x30
   1114c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11150:	f002 bded 	b.w	13d2e <Calc128Cpy>
   11154:	3040      	adds	r0, #64	; 0x40
   11156:	f002 fdea 	bl	13d2e <Calc128Cpy>
   1115a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1115c:	68d8      	ldr	r0, [r3, #12]
   1115e:	4629      	mov	r1, r5
   11160:	3030      	adds	r0, #48	; 0x30
   11162:	f002 fde4 	bl	13d2e <Calc128Cpy>
   11166:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11168:	68d8      	ldr	r0, [r3, #12]
   1116a:	4639      	mov	r1, r7
   1116c:	3050      	adds	r0, #80	; 0x50
   1116e:	f002 fdde 	bl	13d2e <Calc128Cpy>
   11172:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11174:	68d8      	ldr	r0, [r3, #12]
   11176:	4631      	mov	r1, r6
   11178:	3020      	adds	r0, #32
   1117a:	e7e7      	b.n	1114c <SmpScSetOobCfg+0x46>

0001117c <smpEventStr>:
   1117c:	3801      	subs	r0, #1
   1117e:	b2c0      	uxtb	r0, r0
   11180:	281b      	cmp	r0, #27
   11182:	bf9a      	itte	ls
   11184:	4b02      	ldrls	r3, [pc, #8]	; (11190 <smpEventStr+0x14>)
   11186:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1118a:	4802      	ldrhi	r0, [pc, #8]	; (11194 <smpEventStr+0x18>)
   1118c:	4770      	bx	lr
   1118e:	bf00      	nop
   11190:	0002535c 	.word	0x0002535c
   11194:	00026433 	.word	0x00026433

00011198 <smpStateStr>:
   11198:	4b03      	ldr	r3, [pc, #12]	; (111a8 <smpStateStr+0x10>)
   1119a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1119e:	b10b      	cbz	r3, 111a4 <smpStateStr+0xc>
   111a0:	f000 bbea 	b.w	11978 <smpiStateStr>
   111a4:	f000 bc12 	b.w	119cc <smprStateStr>
   111a8:	100040c0 	.word	0x100040c0

000111ac <smpLogByteArray>:
   111ac:	4770      	bx	lr
   111ae:	bf00      	nop

000111b0 <smpScCatInitiatorBdAddr>:
   111b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111b2:	4607      	mov	r7, r0
   111b4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   111b8:	460c      	mov	r4, r1
   111ba:	f7fe f92d 	bl	f418 <dmConnCcbById>
   111be:	4605      	mov	r5, r0
   111c0:	b1b0      	cbz	r0, 111f0 <smpScCatInitiatorBdAddr+0x40>
   111c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   111c6:	1c66      	adds	r6, r4, #1
   111c8:	b1a3      	cbz	r3, 111f4 <smpScCatInitiatorBdAddr+0x44>
   111ca:	f100 071a 	add.w	r7, r0, #26
   111ce:	4638      	mov	r0, r7
   111d0:	f002 fd93 	bl	13cfa <BdaIsZeros>
   111d4:	b920      	cbnz	r0, 111e0 <smpScCatInitiatorBdAddr+0x30>
   111d6:	2301      	movs	r3, #1
   111d8:	7023      	strb	r3, [r4, #0]
   111da:	2206      	movs	r2, #6
   111dc:	4639      	mov	r1, r7
   111de:	e003      	b.n	111e8 <smpScCatInitiatorBdAddr+0x38>
   111e0:	7d2b      	ldrb	r3, [r5, #20]
   111e2:	7023      	strb	r3, [r4, #0]
   111e4:	2206      	movs	r2, #6
   111e6:	18a9      	adds	r1, r5, r2
   111e8:	4630      	mov	r0, r6
   111ea:	f002 fe07 	bl	13dfc <WStrReverseCpy>
   111ee:	3407      	adds	r4, #7
   111f0:	4620      	mov	r0, r4
   111f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111f4:	f100 0720 	add.w	r7, r0, #32
   111f8:	4638      	mov	r0, r7
   111fa:	f002 fd7e 	bl	13cfa <BdaIsZeros>
   111fe:	2800      	cmp	r0, #0
   11200:	d0e9      	beq.n	111d6 <smpScCatInitiatorBdAddr+0x26>
   11202:	7ceb      	ldrb	r3, [r5, #19]
   11204:	7023      	strb	r3, [r4, #0]
   11206:	2206      	movs	r2, #6
   11208:	4629      	mov	r1, r5
   1120a:	e7ed      	b.n	111e8 <smpScCatInitiatorBdAddr+0x38>

0001120c <smpScCatResponderBdAddr>:
   1120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1120e:	4607      	mov	r7, r0
   11210:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11214:	460c      	mov	r4, r1
   11216:	f7fe f8ff 	bl	f418 <dmConnCcbById>
   1121a:	4605      	mov	r5, r0
   1121c:	b1b0      	cbz	r0, 1124c <smpScCatResponderBdAddr+0x40>
   1121e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   11222:	1c66      	adds	r6, r4, #1
   11224:	b1a3      	cbz	r3, 11250 <smpScCatResponderBdAddr+0x44>
   11226:	f100 0720 	add.w	r7, r0, #32
   1122a:	4638      	mov	r0, r7
   1122c:	f002 fd65 	bl	13cfa <BdaIsZeros>
   11230:	b920      	cbnz	r0, 1123c <smpScCatResponderBdAddr+0x30>
   11232:	2301      	movs	r3, #1
   11234:	7023      	strb	r3, [r4, #0]
   11236:	2206      	movs	r2, #6
   11238:	4639      	mov	r1, r7
   1123a:	e003      	b.n	11244 <smpScCatResponderBdAddr+0x38>
   1123c:	7ceb      	ldrb	r3, [r5, #19]
   1123e:	7023      	strb	r3, [r4, #0]
   11240:	2206      	movs	r2, #6
   11242:	4629      	mov	r1, r5
   11244:	4630      	mov	r0, r6
   11246:	f002 fdd9 	bl	13dfc <WStrReverseCpy>
   1124a:	3407      	adds	r4, #7
   1124c:	4620      	mov	r0, r4
   1124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11250:	f100 071a 	add.w	r7, r0, #26
   11254:	4638      	mov	r0, r7
   11256:	f002 fd50 	bl	13cfa <BdaIsZeros>
   1125a:	2800      	cmp	r0, #0
   1125c:	d0e9      	beq.n	11232 <smpScCatResponderBdAddr+0x26>
   1125e:	7d2b      	ldrb	r3, [r5, #20]
   11260:	7023      	strb	r3, [r4, #0]
   11262:	2206      	movs	r2, #6
   11264:	18a9      	adds	r1, r5, r2
   11266:	e7ed      	b.n	11244 <smpScCatResponderBdAddr+0x38>

00011268 <smpScProcPairing>:
   11268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1126a:	2300      	movs	r3, #0
   1126c:	7013      	strb	r3, [r2, #0]
   1126e:	700b      	strb	r3, [r1, #0]
   11270:	7cc3      	ldrb	r3, [r0, #19]
   11272:	7c85      	ldrb	r5, [r0, #18]
   11274:	f013 0f08 	tst.w	r3, #8
   11278:	4604      	mov	r4, r0
   1127a:	d039      	beq.n	112f0 <smpScProcPairing+0x88>
   1127c:	7e83      	ldrb	r3, [r0, #26]
   1127e:	071e      	lsls	r6, r3, #28
   11280:	d536      	bpl.n	112f0 <smpScProcPairing+0x88>
   11282:	2d01      	cmp	r5, #1
   11284:	d002      	beq.n	1128c <smpScProcPairing+0x24>
   11286:	7e43      	ldrb	r3, [r0, #25]
   11288:	2b01      	cmp	r3, #1
   1128a:	d137      	bne.n	112fc <smpScProcPairing+0x94>
   1128c:	2301      	movs	r3, #1
   1128e:	700b      	strb	r3, [r1, #0]
   11290:	2500      	movs	r5, #0
   11292:	780b      	ldrb	r3, [r1, #0]
   11294:	b97b      	cbnz	r3, 112b6 <smpScProcPairing+0x4e>
   11296:	7ce3      	ldrb	r3, [r4, #19]
   11298:	0758      	lsls	r0, r3, #29
   1129a:	d402      	bmi.n	112a2 <smpScProcPairing+0x3a>
   1129c:	7ea3      	ldrb	r3, [r4, #26]
   1129e:	075b      	lsls	r3, r3, #29
   112a0:	d509      	bpl.n	112b6 <smpScProcPairing+0x4e>
   112a2:	7c60      	ldrb	r0, [r4, #17]
   112a4:	2803      	cmp	r0, #3
   112a6:	d006      	beq.n	112b6 <smpScProcPairing+0x4e>
   112a8:	7e23      	ldrb	r3, [r4, #24]
   112aa:	2b03      	cmp	r3, #3
   112ac:	d003      	beq.n	112b6 <smpScProcPairing+0x4e>
   112ae:	2801      	cmp	r0, #1
   112b0:	d826      	bhi.n	11300 <smpScProcPairing+0x98>
   112b2:	2b01      	cmp	r3, #1
   112b4:	d83d      	bhi.n	11332 <smpScProcPairing+0xca>
   112b6:	f894 c013 	ldrb.w	ip, [r4, #19]
   112ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   112be:	f01c 0f08 	tst.w	ip, #8
   112c2:	f000 808e 	beq.w	113e2 <smpScProcPairing+0x17a>
   112c6:	7ea7      	ldrb	r7, [r4, #26]
   112c8:	073e      	lsls	r6, r7, #28
   112ca:	f140 808a 	bpl.w	113e2 <smpScProcPairing+0x17a>
   112ce:	4b5a      	ldr	r3, [pc, #360]	; (11438 <smpScProcPairing+0x1d0>)
   112d0:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
   112d4:	bb7e      	cbnz	r6, 11336 <smpScProcPairing+0xce>
   112d6:	f8ad 0004 	strh.w	r0, [sp, #4]
   112da:	f240 3303 	movw	r3, #771	; 0x303
   112de:	a901      	add	r1, sp, #4
   112e0:	4620      	mov	r0, r4
   112e2:	f8ad 3006 	strh.w	r3, [sp, #6]
   112e6:	f000 fed8 	bl	1209a <smpSmExecute>
   112ea:	4630      	mov	r0, r6
   112ec:	b003      	add	sp, #12
   112ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112f0:	2d01      	cmp	r5, #1
   112f2:	d103      	bne.n	112fc <smpScProcPairing+0x94>
   112f4:	7e63      	ldrb	r3, [r4, #25]
   112f6:	2b01      	cmp	r3, #1
   112f8:	d1cb      	bne.n	11292 <smpScProcPairing+0x2a>
   112fa:	e7c7      	b.n	1128c <smpScProcPairing+0x24>
   112fc:	2501      	movs	r5, #1
   112fe:	e7c8      	b.n	11292 <smpScProcPairing+0x2a>
   11300:	2804      	cmp	r0, #4
   11302:	d114      	bne.n	1132e <smpScProcPairing+0xc6>
   11304:	2b02      	cmp	r3, #2
   11306:	d014      	beq.n	11332 <smpScProcPairing+0xca>
   11308:	1f1f      	subs	r7, r3, #4
   1130a:	427b      	negs	r3, r7
   1130c:	417b      	adcs	r3, r7
   1130e:	7013      	strb	r3, [r2, #0]
   11310:	7e20      	ldrb	r0, [r4, #24]
   11312:	2802      	cmp	r0, #2
   11314:	d102      	bne.n	1131c <smpScProcPairing+0xb4>
   11316:	7c60      	ldrb	r0, [r4, #17]
   11318:	2802      	cmp	r0, #2
   1131a:	d006      	beq.n	1132a <smpScProcPairing+0xc2>
   1131c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   11320:	2800      	cmp	r0, #0
   11322:	bf08      	it	eq
   11324:	f083 0301 	eoreq.w	r3, r3, #1
   11328:	7013      	strb	r3, [r2, #0]
   1132a:	2500      	movs	r5, #0
   1132c:	e7c3      	b.n	112b6 <smpScProcPairing+0x4e>
   1132e:	2300      	movs	r3, #0
   11330:	e7ed      	b.n	1130e <smpScProcPairing+0xa6>
   11332:	2301      	movs	r3, #1
   11334:	e7eb      	b.n	1130e <smpScProcPairing+0xa6>
   11336:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11338:	f240 1601 	movw	r6, #257	; 0x101
   1133c:	801e      	strh	r6, [r3, #0]
   1133e:	7812      	ldrb	r2, [r2, #0]
   11340:	711a      	strb	r2, [r3, #4]
   11342:	780a      	ldrb	r2, [r1, #0]
   11344:	b112      	cbz	r2, 1134c <smpScProcPairing+0xe4>
   11346:	2202      	movs	r2, #2
   11348:	705a      	strb	r2, [r3, #1]
   1134a:	e017      	b.n	1137c <smpScProcPairing+0x114>
   1134c:	7e22      	ldrb	r2, [r4, #24]
   1134e:	b9fd      	cbnz	r5, 11390 <smpScProcPairing+0x128>
   11350:	2103      	movs	r1, #3
   11352:	2a04      	cmp	r2, #4
   11354:	7059      	strb	r1, [r3, #1]
   11356:	d106      	bne.n	11366 <smpScProcPairing+0xfe>
   11358:	7c62      	ldrb	r2, [r4, #17]
   1135a:	2a01      	cmp	r2, #1
   1135c:	d001      	beq.n	11362 <smpScProcPairing+0xfa>
   1135e:	2a04      	cmp	r2, #4
   11360:	d105      	bne.n	1136e <smpScProcPairing+0x106>
   11362:	2204      	movs	r2, #4
   11364:	e7f0      	b.n	11348 <smpScProcPairing+0xe0>
   11366:	2a01      	cmp	r2, #1
   11368:	d101      	bne.n	1136e <smpScProcPairing+0x106>
   1136a:	7c62      	ldrb	r2, [r4, #17]
   1136c:	e7f7      	b.n	1135e <smpScProcPairing+0xf6>
   1136e:	f01c 0f10 	tst.w	ip, #16
   11372:	d003      	beq.n	1137c <smpScProcPairing+0x114>
   11374:	06fa      	lsls	r2, r7, #27
   11376:	d501      	bpl.n	1137c <smpScProcPairing+0x114>
   11378:	2201      	movs	r2, #1
   1137a:	709a      	strb	r2, [r3, #2]
   1137c:	f8ad 0004 	strh.w	r0, [sp, #4]
   11380:	4620      	mov	r0, r4
   11382:	f7ff fd11 	bl	10da8 <SmpScAllocScratchBuffers>
   11386:	b148      	cbz	r0, 1139c <smpScProcPairing+0x134>
   11388:	2310      	movs	r3, #16
   1138a:	f88d 3006 	strb.w	r3, [sp, #6]
   1138e:	e009      	b.n	113a4 <smpScProcPairing+0x13c>
   11390:	2a01      	cmp	r2, #1
   11392:	d1f3      	bne.n	1137c <smpScProcPairing+0x114>
   11394:	7c62      	ldrb	r2, [r4, #17]
   11396:	2a01      	cmp	r2, #1
   11398:	d1f0      	bne.n	1137c <smpScProcPairing+0x114>
   1139a:	e7e2      	b.n	11362 <smpScProcPairing+0xfa>
   1139c:	f640 0303 	movw	r3, #2051	; 0x803
   113a0:	f8ad 3006 	strh.w	r3, [sp, #6]
   113a4:	a901      	add	r1, sp, #4
   113a6:	4620      	mov	r0, r4
   113a8:	f000 fe77 	bl	1209a <smpSmExecute>
   113ac:	7ce2      	ldrb	r2, [r4, #19]
   113ae:	7ea1      	ldrb	r1, [r4, #26]
   113b0:	ea01 0302 	and.w	r3, r1, r2
   113b4:	bb6d      	cbnz	r5, 11412 <smpScProcPairing+0x1aa>
   113b6:	f043 0304 	orr.w	r3, r3, #4
   113ba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   113be:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   113c2:	2b00      	cmp	r3, #0
   113c4:	bf08      	it	eq
   113c6:	460a      	moveq	r2, r1
   113c8:	4b1c      	ldr	r3, [pc, #112]	; (1143c <smpScProcPairing+0x1d4>)
   113ca:	6819      	ldr	r1, [r3, #0]
   113cc:	b325      	cbz	r5, 11418 <smpScProcPairing+0x1b0>
   113ce:	798b      	ldrb	r3, [r1, #6]
   113d0:	f003 0304 	and.w	r3, r3, #4
   113d4:	421a      	tst	r2, r3
   113d6:	d01f      	beq.n	11418 <smpScProcPairing+0x1b0>
   113d8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   113dc:	f8ad 3004 	strh.w	r3, [sp, #4]
   113e0:	e007      	b.n	113f2 <smpScProcPairing+0x18a>
   113e2:	4b16      	ldr	r3, [pc, #88]	; (1143c <smpScProcPairing+0x1d4>)
   113e4:	681b      	ldr	r3, [r3, #0]
   113e6:	799b      	ldrb	r3, [r3, #6]
   113e8:	f013 0308 	ands.w	r3, r3, #8
   113ec:	d00b      	beq.n	11406 <smpScProcPairing+0x19e>
   113ee:	f8ad 0004 	strh.w	r0, [sp, #4]
   113f2:	f240 3303 	movw	r3, #771	; 0x303
   113f6:	a901      	add	r1, sp, #4
   113f8:	4620      	mov	r0, r4
   113fa:	f8ad 3006 	strh.w	r3, [sp, #6]
   113fe:	2600      	movs	r6, #0
   11400:	f000 fe4b 	bl	1209a <smpSmExecute>
   11404:	e771      	b.n	112ea <smpScProcPairing+0x82>
   11406:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11408:	7013      	strb	r3, [r2, #0]
   1140a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1140e:	2311      	movs	r3, #17
   11410:	e7bb      	b.n	1138a <smpScProcPairing+0x122>
   11412:	f023 0304 	bic.w	r3, r3, #4
   11416:	e7d0      	b.n	113ba <smpScProcPairing+0x152>
   11418:	78cb      	ldrb	r3, [r1, #3]
   1141a:	7d22      	ldrb	r2, [r4, #20]
   1141c:	429a      	cmp	r2, r3
   1141e:	d302      	bcc.n	11426 <smpScProcPairing+0x1be>
   11420:	7ee2      	ldrb	r2, [r4, #27]
   11422:	429a      	cmp	r2, r3
   11424:	d206      	bcs.n	11434 <smpScProcPairing+0x1cc>
   11426:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1142a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1142e:	f240 6303 	movw	r3, #1539	; 0x603
   11432:	e7e0      	b.n	113f6 <smpScProcPairing+0x18e>
   11434:	2601      	movs	r6, #1
   11436:	e758      	b.n	112ea <smpScProcPairing+0x82>
   11438:	100040c0 	.word	0x100040c0
   1143c:	10002bd4 	.word	0x10002bd4

00011440 <smpScAuthReq>:
   11440:	b530      	push	{r4, r5, lr}
   11442:	6b44      	ldr	r4, [r0, #52]	; 0x34
   11444:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11448:	7825      	ldrb	r5, [r4, #0]
   1144a:	b087      	sub	sp, #28
   1144c:	b98d      	cbnz	r5, 11472 <smpScAuthReq+0x32>
   1144e:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
   11452:	0764      	lsls	r4, r4, #29
   11454:	d510      	bpl.n	11478 <smpScAuthReq+0x38>
   11456:	f8ad 3000 	strh.w	r3, [sp]
   1145a:	4668      	mov	r0, sp
   1145c:	232e      	movs	r3, #46	; 0x2e
   1145e:	f88d 3002 	strb.w	r3, [sp, #2]
   11462:	f88d 1004 	strb.w	r1, [sp, #4]
   11466:	f88d 2005 	strb.w	r2, [sp, #5]
   1146a:	f7fe ff1f 	bl	102ac <DmSmpCbackExec>
   1146e:	b007      	add	sp, #28
   11470:	bd30      	pop	{r4, r5, pc}
   11472:	7864      	ldrb	r4, [r4, #1]
   11474:	2c02      	cmp	r4, #2
   11476:	d0ee      	beq.n	11456 <smpScAuthReq+0x16>
   11478:	f8ad 3000 	strh.w	r3, [sp]
   1147c:	2304      	movs	r3, #4
   1147e:	f88d 3002 	strb.w	r3, [sp, #2]
   11482:	2300      	movs	r3, #0
   11484:	f8ad 3004 	strh.w	r3, [sp, #4]
   11488:	f88d 3006 	strb.w	r3, [sp, #6]
   1148c:	4669      	mov	r1, sp
   1148e:	2303      	movs	r3, #3
   11490:	f88d 3014 	strb.w	r3, [sp, #20]
   11494:	f000 fe01 	bl	1209a <smpSmExecute>
   11498:	e7e9      	b.n	1146e <smpScAuthReq+0x2e>

0001149a <smpScActCleanup>:
   1149a:	b510      	push	{r4, lr}
   1149c:	4604      	mov	r4, r0
   1149e:	f000 fc09 	bl	11cb4 <smpActCleanup>
   114a2:	4620      	mov	r0, r4
   114a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114a8:	f7ff bc9f 	b.w	10dea <SmpScFreeScratchBuffers>

000114ac <smpScActPairingFailed>:
   114ac:	b538      	push	{r3, r4, r5, lr}
   114ae:	4604      	mov	r4, r0
   114b0:	460d      	mov	r5, r1
   114b2:	f7ff fff2 	bl	1149a <smpScActCleanup>
   114b6:	4629      	mov	r1, r5
   114b8:	4620      	mov	r0, r4
   114ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   114be:	f000 bc0c 	b.w	11cda <smpActPairingFailed>

000114c2 <smpScActPairingCancel>:
   114c2:	b538      	push	{r3, r4, r5, lr}
   114c4:	4605      	mov	r5, r0
   114c6:	460c      	mov	r4, r1
   114c8:	78c9      	ldrb	r1, [r1, #3]
   114ca:	f000 fbf5 	bl	11cb8 <smpSendPairingFailed>
   114ce:	4621      	mov	r1, r4
   114d0:	4628      	mov	r0, r5
   114d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   114d6:	f7ff bfe9 	b.w	114ac <smpScActPairingFailed>

000114da <smpScActAuthSelect>:
   114da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   114dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   114de:	684d      	ldr	r5, [r1, #4]
   114e0:	4604      	mov	r4, r0
   114e2:	2220      	movs	r2, #32
   114e4:	6898      	ldr	r0, [r3, #8]
   114e6:	f105 0109 	add.w	r1, r5, #9
   114ea:	f002 fc87 	bl	13dfc <WStrReverseCpy>
   114ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   114f0:	6898      	ldr	r0, [r3, #8]
   114f2:	2220      	movs	r2, #32
   114f4:	f105 0129 	add.w	r1, r5, #41	; 0x29
   114f8:	4410      	add	r0, r2
   114fa:	f002 fc7f 	bl	13dfc <WStrReverseCpy>
   114fe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11502:	f8ad 3004 	strh.w	r3, [sp, #4]
   11506:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11508:	785b      	ldrb	r3, [r3, #1]
   1150a:	3b01      	subs	r3, #1
   1150c:	2b03      	cmp	r3, #3
   1150e:	d810      	bhi.n	11532 <smpScActAuthSelect+0x58>
   11510:	e8df f003 	tbb	[pc, r3]
   11514:	020d0b02 	.word	0x020d0b02
   11518:	2312      	movs	r3, #18
   1151a:	f88d 3006 	strb.w	r3, [sp, #6]
   1151e:	a901      	add	r1, sp, #4
   11520:	4620      	mov	r0, r4
   11522:	f000 fdba 	bl	1209a <smpSmExecute>
   11526:	b003      	add	sp, #12
   11528:	bd30      	pop	{r4, r5, pc}
   1152a:	2314      	movs	r3, #20
   1152c:	e7f5      	b.n	1151a <smpScActAuthSelect+0x40>
   1152e:	2313      	movs	r3, #19
   11530:	e7f3      	b.n	1151a <smpScActAuthSelect+0x40>
   11532:	f640 0303 	movw	r3, #2051	; 0x803
   11536:	f8ad 3006 	strh.w	r3, [sp, #6]
   1153a:	e7f0      	b.n	1151e <smpScActAuthSelect+0x44>

0001153c <smpScActPkSetup>:
   1153c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1153e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11540:	2200      	movs	r2, #0
   11542:	70da      	strb	r2, [r3, #3]
   11544:	2103      	movs	r1, #3
   11546:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
   1154a:	f88d 2004 	strb.w	r2, [sp, #4]
   1154e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
   11552:	f8ad 1000 	strh.w	r1, [sp]
   11556:	791b      	ldrb	r3, [r3, #4]
   11558:	f88d 3005 	strb.w	r3, [sp, #5]
   1155c:	212e      	movs	r1, #46	; 0x2e
   1155e:	4668      	mov	r0, sp
   11560:	f88d 1002 	strb.w	r1, [sp, #2]
   11564:	f7fe fea2 	bl	102ac <DmSmpCbackExec>
   11568:	b007      	add	sp, #28
   1156a:	f85d fb04 	ldr.w	pc, [sp], #4

0001156e <smpScActJwncCalcF4>:
   1156e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11570:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
   11574:	4604      	mov	r4, r0
   11576:	460d      	mov	r5, r1
   11578:	b18e      	cbz	r6, 1159e <smpScActJwncCalcF4+0x30>
   1157a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1157c:	689e      	ldr	r6, [r3, #8]
   1157e:	f7ff f849 	bl	10614 <DmSecGetEccKey>
   11582:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11584:	68db      	ldr	r3, [r3, #12]
   11586:	3310      	adds	r3, #16
   11588:	9301      	str	r3, [sp, #4]
   1158a:	2300      	movs	r3, #0
   1158c:	9300      	str	r3, [sp, #0]
   1158e:	4632      	mov	r2, r6
   11590:	4603      	mov	r3, r0
   11592:	4629      	mov	r1, r5
   11594:	4620      	mov	r0, r4
   11596:	f7ff fc71 	bl	10e7c <SmpScCalcF4>
   1159a:	b002      	add	sp, #8
   1159c:	bd70      	pop	{r4, r5, r6, pc}
   1159e:	f7ff f839 	bl	10614 <DmSecGetEccKey>
   115a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   115a4:	68d3      	ldr	r3, [r2, #12]
   115a6:	3310      	adds	r3, #16
   115a8:	e9cd 6300 	strd	r6, r3, [sp]
   115ac:	6893      	ldr	r3, [r2, #8]
   115ae:	4602      	mov	r2, r0
   115b0:	e7ef      	b.n	11592 <smpScActJwncCalcF4+0x24>

000115b2 <smpScActJwncCalcG2>:
   115b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   115b4:	460a      	mov	r2, r1
   115b6:	4604      	mov	r4, r0
   115b8:	460e      	mov	r6, r1
   115ba:	4601      	mov	r1, r0
   115bc:	2050      	movs	r0, #80	; 0x50
   115be:	f7ff fc4b 	bl	10e58 <SmpScAlloc>
   115c2:	4605      	mov	r5, r0
   115c4:	b1d8      	cbz	r0, 115fe <smpScActJwncCalcG2+0x4c>
   115c6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   115ca:	b1d3      	cbz	r3, 11602 <smpScActJwncCalcG2+0x50>
   115cc:	f7ff f822 	bl	10614 <DmSecGetEccKey>
   115d0:	2220      	movs	r2, #32
   115d2:	4601      	mov	r1, r0
   115d4:	4628      	mov	r0, r5
   115d6:	f7ff fcb3 	bl	10f40 <SmpScCat>
   115da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   115dc:	6899      	ldr	r1, [r3, #8]
   115de:	2220      	movs	r2, #32
   115e0:	f7ff fcae 	bl	10f40 <SmpScCat>
   115e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   115e6:	68d9      	ldr	r1, [r3, #12]
   115e8:	3110      	adds	r1, #16
   115ea:	f7ff fcaf 	bl	10f4c <SmpScCat128>
   115ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
   115f0:	9600      	str	r6, [sp, #0]
   115f2:	4623      	mov	r3, r4
   115f4:	2250      	movs	r2, #80	; 0x50
   115f6:	4629      	mov	r1, r5
   115f8:	68c0      	ldr	r0, [r0, #12]
   115fa:	f7ff fc11 	bl	10e20 <SmpScCmac>
   115fe:	b003      	add	sp, #12
   11600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11602:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11604:	2220      	movs	r2, #32
   11606:	6899      	ldr	r1, [r3, #8]
   11608:	f7ff fc9a 	bl	10f40 <SmpScCat>
   1160c:	4607      	mov	r7, r0
   1160e:	f7ff f801 	bl	10614 <DmSecGetEccKey>
   11612:	2220      	movs	r2, #32
   11614:	4601      	mov	r1, r0
   11616:	4638      	mov	r0, r7
   11618:	e7e2      	b.n	115e0 <smpScActJwncCalcG2+0x2e>

0001161a <smpScActJwncDisplay>:
   1161a:	b510      	push	{r4, lr}
   1161c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1161e:	785b      	ldrb	r3, [r3, #1]
   11620:	2b04      	cmp	r3, #4
   11622:	b086      	sub	sp, #24
   11624:	4604      	mov	r4, r0
   11626:	d10f      	bne.n	11648 <smpScActJwncDisplay+0x2e>
   11628:	a802      	add	r0, sp, #8
   1162a:	6849      	ldr	r1, [r1, #4]
   1162c:	f002 fb7f 	bl	13d2e <Calc128Cpy>
   11630:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11634:	f8ad 3004 	strh.w	r3, [sp, #4]
   11638:	a801      	add	r0, sp, #4
   1163a:	2335      	movs	r3, #53	; 0x35
   1163c:	f88d 3006 	strb.w	r3, [sp, #6]
   11640:	f7fe fe34 	bl	102ac <DmSmpCbackExec>
   11644:	b006      	add	sp, #24
   11646:	bd10      	pop	{r4, pc}
   11648:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1164c:	f8ad 3004 	strh.w	r3, [sp, #4]
   11650:	a901      	add	r1, sp, #4
   11652:	2315      	movs	r3, #21
   11654:	f88d 3006 	strb.w	r3, [sp, #6]
   11658:	f000 fd1f 	bl	1209a <smpSmExecute>
   1165c:	e7f2      	b.n	11644 <smpScActJwncDisplay+0x2a>

0001165e <smpScActPkKeypress>:
   1165e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11660:	684c      	ldr	r4, [r1, #4]
   11662:	7a22      	ldrb	r2, [r4, #8]
   11664:	2a0e      	cmp	r2, #14
   11666:	d10e      	bne.n	11686 <smpScActPkKeypress+0x28>
   11668:	7a63      	ldrb	r3, [r4, #9]
   1166a:	f88d 3004 	strb.w	r3, [sp, #4]
   1166e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11672:	f8ad 3000 	strh.w	r3, [sp]
   11676:	4668      	mov	r0, sp
   11678:	2336      	movs	r3, #54	; 0x36
   1167a:	f88d 3002 	strb.w	r3, [sp, #2]
   1167e:	f7fe fe15 	bl	102ac <DmSmpCbackExec>
   11682:	b003      	add	sp, #12
   11684:	bd30      	pop	{r4, r5, pc}
   11686:	2a03      	cmp	r2, #3
   11688:	d1fb      	bne.n	11682 <smpScActPkKeypress+0x24>
   1168a:	221d      	movs	r2, #29
   1168c:	708a      	strb	r2, [r1, #2]
   1168e:	f000 fd04 	bl	1209a <smpSmExecute>
   11692:	e7f6      	b.n	11682 <smpScActPkKeypress+0x24>

00011694 <smpScActPkSendKeypress>:
   11694:	b538      	push	{r3, r4, r5, lr}
   11696:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11698:	789b      	ldrb	r3, [r3, #2]
   1169a:	4604      	mov	r4, r0
   1169c:	460d      	mov	r5, r1
   1169e:	b1c3      	cbz	r3, 116d2 <smpScActPkSendKeypress+0x3e>
   116a0:	f000 fae8 	bl	11c74 <smpStartRspTimer>
   116a4:	200a      	movs	r0, #10
   116a6:	f7ff faef 	bl	10c88 <smpMsgAlloc>
   116aa:	b148      	cbz	r0, 116c0 <smpScActPkSendKeypress+0x2c>
   116ac:	230e      	movs	r3, #14
   116ae:	7203      	strb	r3, [r0, #8]
   116b0:	792b      	ldrb	r3, [r5, #4]
   116b2:	7243      	strb	r3, [r0, #9]
   116b4:	4601      	mov	r1, r0
   116b6:	4620      	mov	r0, r4
   116b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   116bc:	f7ff ba99 	b.w	10bf2 <smpSendPkt>
   116c0:	f640 0303 	movw	r3, #2051	; 0x803
   116c4:	806b      	strh	r3, [r5, #2]
   116c6:	4629      	mov	r1, r5
   116c8:	4620      	mov	r0, r4
   116ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   116ce:	f000 bce4 	b.w	1209a <smpSmExecute>
   116d2:	bd38      	pop	{r3, r4, r5, pc}

000116d4 <smpScActCalcSharedSecret>:
   116d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   116d6:	b099      	sub	sp, #100	; 0x64
   116d8:	4605      	mov	r5, r0
   116da:	f7fe ff9b 	bl	10614 <DmSecGetEccKey>
   116de:	ae10      	add	r6, sp, #64	; 0x40
   116e0:	f100 0340 	add.w	r3, r0, #64	; 0x40
   116e4:	f100 0260 	add.w	r2, r0, #96	; 0x60
   116e8:	6818      	ldr	r0, [r3, #0]
   116ea:	6859      	ldr	r1, [r3, #4]
   116ec:	4634      	mov	r4, r6
   116ee:	c403      	stmia	r4!, {r0, r1}
   116f0:	3308      	adds	r3, #8
   116f2:	4293      	cmp	r3, r2
   116f4:	4626      	mov	r6, r4
   116f6:	d1f7      	bne.n	116e8 <smpScActCalcSharedSecret+0x14>
   116f8:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   116fa:	68b3      	ldr	r3, [r6, #8]
   116fc:	466a      	mov	r2, sp
   116fe:	f103 0c20 	add.w	ip, r3, #32
   11702:	4617      	mov	r7, r2
   11704:	6818      	ldr	r0, [r3, #0]
   11706:	6859      	ldr	r1, [r3, #4]
   11708:	4614      	mov	r4, r2
   1170a:	c403      	stmia	r4!, {r0, r1}
   1170c:	3308      	adds	r3, #8
   1170e:	4563      	cmp	r3, ip
   11710:	4622      	mov	r2, r4
   11712:	d1f7      	bne.n	11704 <smpScActCalcSharedSecret+0x30>
   11714:	68b3      	ldr	r3, [r6, #8]
   11716:	ac08      	add	r4, sp, #32
   11718:	f103 0640 	add.w	r6, r3, #64	; 0x40
   1171c:	3320      	adds	r3, #32
   1171e:	6818      	ldr	r0, [r3, #0]
   11720:	6859      	ldr	r1, [r3, #4]
   11722:	4622      	mov	r2, r4
   11724:	c203      	stmia	r2!, {r0, r1}
   11726:	3308      	adds	r3, #8
   11728:	42b3      	cmp	r3, r6
   1172a:	4614      	mov	r4, r2
   1172c:	d1f7      	bne.n	1171e <smpScActCalcSharedSecret+0x4a>
   1172e:	4905      	ldr	r1, [pc, #20]	; (11744 <smpScActCalcSharedSecret+0x70>)
   11730:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   11734:	f891 11c8 	ldrb.w	r1, [r1, #456]	; 0x1c8
   11738:	2318      	movs	r3, #24
   1173a:	4638      	mov	r0, r7
   1173c:	f00a f8e8 	bl	1b910 <SecEccGenSharedSecret>
   11740:	b019      	add	sp, #100	; 0x64
   11742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11744:	100040c0 	.word	0x100040c0

00011748 <smpScActCalcF5TKey>:
   11748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1174c:	460a      	mov	r2, r1
   1174e:	b086      	sub	sp, #24
   11750:	4680      	mov	r8, r0
   11752:	460c      	mov	r4, r1
   11754:	4601      	mov	r1, r0
   11756:	2020      	movs	r0, #32
   11758:	f7ff fb7e 	bl	10e58 <SmpScAlloc>
   1175c:	4607      	mov	r7, r0
   1175e:	b1e8      	cbz	r0, 1179c <smpScActCalcF5TKey+0x54>
   11760:	4a10      	ldr	r2, [pc, #64]	; (117a4 <smpScActCalcF5TKey+0x5c>)
   11762:	ad02      	add	r5, sp, #8
   11764:	f102 0310 	add.w	r3, r2, #16
   11768:	46ac      	mov	ip, r5
   1176a:	6810      	ldr	r0, [r2, #0]
   1176c:	6851      	ldr	r1, [r2, #4]
   1176e:	462e      	mov	r6, r5
   11770:	c603      	stmia	r6!, {r0, r1}
   11772:	3208      	adds	r2, #8
   11774:	429a      	cmp	r2, r3
   11776:	4635      	mov	r5, r6
   11778:	d1f7      	bne.n	1176a <smpScActCalcF5TKey+0x22>
   1177a:	1d22      	adds	r2, r4, #4
   1177c:	463b      	mov	r3, r7
   1177e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   11782:	f852 0b04 	ldr.w	r0, [r2], #4
   11786:	f843 0b04 	str.w	r0, [r3], #4
   1178a:	428a      	cmp	r2, r1
   1178c:	d1f9      	bne.n	11782 <smpScActCalcF5TKey+0x3a>
   1178e:	9400      	str	r4, [sp, #0]
   11790:	4643      	mov	r3, r8
   11792:	2220      	movs	r2, #32
   11794:	4639      	mov	r1, r7
   11796:	4660      	mov	r0, ip
   11798:	f7ff fb42 	bl	10e20 <SmpScCmac>
   1179c:	b006      	add	sp, #24
   1179e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117a2:	bf00      	nop
   117a4:	000253cc 	.word	0x000253cc

000117a8 <smpScActCalcF5MacKey>:
   117a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   117aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117ac:	4604      	mov	r4, r0
   117ae:	6918      	ldr	r0, [r3, #16]
   117b0:	460e      	mov	r6, r1
   117b2:	3010      	adds	r0, #16
   117b4:	6849      	ldr	r1, [r1, #4]
   117b6:	f002 faba 	bl	13d2e <Calc128Cpy>
   117ba:	4632      	mov	r2, r6
   117bc:	4621      	mov	r1, r4
   117be:	2035      	movs	r0, #53	; 0x35
   117c0:	f7ff fb4a 	bl	10e58 <SmpScAlloc>
   117c4:	4605      	mov	r5, r0
   117c6:	b318      	cbz	r0, 11810 <smpScActCalcF5MacKey+0x68>
   117c8:	2700      	movs	r7, #0
   117ca:	2204      	movs	r2, #4
   117cc:	7007      	strb	r7, [r0, #0]
   117ce:	4911      	ldr	r1, [pc, #68]	; (11814 <smpScActCalcF5MacKey+0x6c>)
   117d0:	3001      	adds	r0, #1
   117d2:	f7ff fbb5 	bl	10f40 <SmpScCat>
   117d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117d8:	68d9      	ldr	r1, [r3, #12]
   117da:	f7ff fbb7 	bl	10f4c <SmpScCat128>
   117de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117e0:	68d9      	ldr	r1, [r3, #12]
   117e2:	3110      	adds	r1, #16
   117e4:	f7ff fbb2 	bl	10f4c <SmpScCat128>
   117e8:	4601      	mov	r1, r0
   117ea:	4620      	mov	r0, r4
   117ec:	f7ff fce0 	bl	111b0 <smpScCatInitiatorBdAddr>
   117f0:	4601      	mov	r1, r0
   117f2:	4620      	mov	r0, r4
   117f4:	f7ff fd0a 	bl	1120c <smpScCatResponderBdAddr>
   117f8:	2301      	movs	r3, #1
   117fa:	7003      	strb	r3, [r0, #0]
   117fc:	7047      	strb	r7, [r0, #1]
   117fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11800:	6918      	ldr	r0, [r3, #16]
   11802:	9600      	str	r6, [sp, #0]
   11804:	4623      	mov	r3, r4
   11806:	2235      	movs	r2, #53	; 0x35
   11808:	4629      	mov	r1, r5
   1180a:	3010      	adds	r0, #16
   1180c:	f7ff fb08 	bl	10e20 <SmpScCmac>
   11810:	b003      	add	sp, #12
   11812:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11814:	000253dc 	.word	0x000253dc

00011818 <smpScActCalcF5Ltk>:
   11818:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1181a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1181c:	4604      	mov	r4, r0
   1181e:	460e      	mov	r6, r1
   11820:	6918      	ldr	r0, [r3, #16]
   11822:	6849      	ldr	r1, [r1, #4]
   11824:	f002 fa83 	bl	13d2e <Calc128Cpy>
   11828:	4632      	mov	r2, r6
   1182a:	4621      	mov	r1, r4
   1182c:	2035      	movs	r0, #53	; 0x35
   1182e:	f7ff fb13 	bl	10e58 <SmpScAlloc>
   11832:	4605      	mov	r5, r0
   11834:	b318      	cbz	r0, 1187e <smpScActCalcF5Ltk+0x66>
   11836:	2701      	movs	r7, #1
   11838:	2204      	movs	r2, #4
   1183a:	7007      	strb	r7, [r0, #0]
   1183c:	4911      	ldr	r1, [pc, #68]	; (11884 <smpScActCalcF5Ltk+0x6c>)
   1183e:	4438      	add	r0, r7
   11840:	f7ff fb7e 	bl	10f40 <SmpScCat>
   11844:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11846:	68d9      	ldr	r1, [r3, #12]
   11848:	f7ff fb80 	bl	10f4c <SmpScCat128>
   1184c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1184e:	68d9      	ldr	r1, [r3, #12]
   11850:	3110      	adds	r1, #16
   11852:	f7ff fb7b 	bl	10f4c <SmpScCat128>
   11856:	4601      	mov	r1, r0
   11858:	4620      	mov	r0, r4
   1185a:	f7ff fca9 	bl	111b0 <smpScCatInitiatorBdAddr>
   1185e:	4601      	mov	r1, r0
   11860:	4620      	mov	r0, r4
   11862:	f7ff fcd3 	bl	1120c <smpScCatResponderBdAddr>
   11866:	2300      	movs	r3, #0
   11868:	7007      	strb	r7, [r0, #0]
   1186a:	7043      	strb	r3, [r0, #1]
   1186c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1186e:	6918      	ldr	r0, [r3, #16]
   11870:	9600      	str	r6, [sp, #0]
   11872:	4623      	mov	r3, r4
   11874:	2235      	movs	r2, #53	; 0x35
   11876:	4629      	mov	r1, r5
   11878:	3010      	adds	r0, #16
   1187a:	f7ff fad1 	bl	10e20 <SmpScCmac>
   1187e:	b003      	add	sp, #12
   11880:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11882:	bf00      	nop
   11884:	000253dc 	.word	0x000253dc

00011888 <smpScActDHKeyCalcF6Ea>:
   11888:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1188a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1188c:	4604      	mov	r4, r0
   1188e:	6918      	ldr	r0, [r3, #16]
   11890:	2210      	movs	r2, #16
   11892:	4410      	add	r0, r2
   11894:	460d      	mov	r5, r1
   11896:	6849      	ldr	r1, [r1, #4]
   11898:	f002 fab0 	bl	13dfc <WStrReverseCpy>
   1189c:	462a      	mov	r2, r5
   1189e:	4621      	mov	r1, r4
   118a0:	2041      	movs	r0, #65	; 0x41
   118a2:	f7ff fad9 	bl	10e58 <SmpScAlloc>
   118a6:	4606      	mov	r6, r0
   118a8:	b318      	cbz	r0, 118f2 <smpScActDHKeyCalcF6Ea+0x6a>
   118aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   118ac:	68d9      	ldr	r1, [r3, #12]
   118ae:	f7ff fb4d 	bl	10f4c <SmpScCat128>
   118b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   118b4:	68d9      	ldr	r1, [r3, #12]
   118b6:	3110      	adds	r1, #16
   118b8:	f7ff fb48 	bl	10f4c <SmpScCat128>
   118bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   118be:	68d9      	ldr	r1, [r3, #12]
   118c0:	3130      	adds	r1, #48	; 0x30
   118c2:	f7ff fb43 	bl	10f4c <SmpScCat128>
   118c6:	7ce3      	ldrb	r3, [r4, #19]
   118c8:	7003      	strb	r3, [r0, #0]
   118ca:	7ca3      	ldrb	r3, [r4, #18]
   118cc:	7043      	strb	r3, [r0, #1]
   118ce:	7c63      	ldrb	r3, [r4, #17]
   118d0:	7083      	strb	r3, [r0, #2]
   118d2:	1cc1      	adds	r1, r0, #3
   118d4:	4620      	mov	r0, r4
   118d6:	f7ff fc6b 	bl	111b0 <smpScCatInitiatorBdAddr>
   118da:	4601      	mov	r1, r0
   118dc:	4620      	mov	r0, r4
   118de:	f7ff fc95 	bl	1120c <smpScCatResponderBdAddr>
   118e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
   118e4:	9500      	str	r5, [sp, #0]
   118e6:	4623      	mov	r3, r4
   118e8:	2241      	movs	r2, #65	; 0x41
   118ea:	4631      	mov	r1, r6
   118ec:	6900      	ldr	r0, [r0, #16]
   118ee:	f7ff fa97 	bl	10e20 <SmpScCmac>
   118f2:	b002      	add	sp, #8
   118f4:	bd70      	pop	{r4, r5, r6, pc}

000118f6 <smpScActDHKeyCalcF6Eb>:
   118f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   118f8:	460a      	mov	r2, r1
   118fa:	4604      	mov	r4, r0
   118fc:	460d      	mov	r5, r1
   118fe:	4601      	mov	r1, r0
   11900:	2041      	movs	r0, #65	; 0x41
   11902:	f7ff faa9 	bl	10e58 <SmpScAlloc>
   11906:	4606      	mov	r6, r0
   11908:	b318      	cbz	r0, 11952 <smpScActDHKeyCalcF6Eb+0x5c>
   1190a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1190c:	68d9      	ldr	r1, [r3, #12]
   1190e:	3110      	adds	r1, #16
   11910:	f7ff fb1c 	bl	10f4c <SmpScCat128>
   11914:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11916:	68d9      	ldr	r1, [r3, #12]
   11918:	f7ff fb18 	bl	10f4c <SmpScCat128>
   1191c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1191e:	68d9      	ldr	r1, [r3, #12]
   11920:	3120      	adds	r1, #32
   11922:	f7ff fb13 	bl	10f4c <SmpScCat128>
   11926:	7ea3      	ldrb	r3, [r4, #26]
   11928:	7003      	strb	r3, [r0, #0]
   1192a:	7e63      	ldrb	r3, [r4, #25]
   1192c:	7043      	strb	r3, [r0, #1]
   1192e:	7e23      	ldrb	r3, [r4, #24]
   11930:	7083      	strb	r3, [r0, #2]
   11932:	1cc1      	adds	r1, r0, #3
   11934:	4620      	mov	r0, r4
   11936:	f7ff fc69 	bl	1120c <smpScCatResponderBdAddr>
   1193a:	4601      	mov	r1, r0
   1193c:	4620      	mov	r0, r4
   1193e:	f7ff fc37 	bl	111b0 <smpScCatInitiatorBdAddr>
   11942:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11944:	9500      	str	r5, [sp, #0]
   11946:	4623      	mov	r3, r4
   11948:	2241      	movs	r2, #65	; 0x41
   1194a:	4631      	mov	r1, r6
   1194c:	6900      	ldr	r0, [r0, #16]
   1194e:	f7ff fa67 	bl	10e20 <SmpScCmac>
   11952:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11954:	6869      	ldr	r1, [r5, #4]
   11956:	68d8      	ldr	r0, [r3, #12]
   11958:	b002      	add	sp, #8
   1195a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1195e:	f002 b9e6 	b.w	13d2e <Calc128Cpy>
   11962:	bf00      	nop

00011964 <SmpiScInit>:
   11964:	4b02      	ldr	r3, [pc, #8]	; (11970 <SmpiScInit+0xc>)
   11966:	4a03      	ldr	r2, [pc, #12]	; (11974 <SmpiScInit+0x10>)
   11968:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1196c:	f7ff bab8 	b.w	10ee0 <SmpScInit>
   11970:	100040c0 	.word	0x100040c0
   11974:	000253e0 	.word	0x000253e0

00011978 <smpiStateStr>:
   11978:	2824      	cmp	r0, #36	; 0x24
   1197a:	bf9d      	ittte	ls
   1197c:	4b02      	ldrls	r3, [pc, #8]	; (11988 <smpiStateStr+0x10>)
   1197e:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   11982:	68c0      	ldrls	r0, [r0, #12]
   11984:	4801      	ldrhi	r0, [pc, #4]	; (1198c <smpiStateStr+0x14>)
   11986:	4770      	bx	lr
   11988:	000253e0 	.word	0x000253e0
   1198c:	00026431 	.word	0x00026431

00011990 <SmpiInit>:
   11990:	4b05      	ldr	r3, [pc, #20]	; (119a8 <SmpiInit+0x18>)
   11992:	4a06      	ldr	r2, [pc, #24]	; (119ac <SmpiInit+0x1c>)
   11994:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   11998:	4a05      	ldr	r2, [pc, #20]	; (119b0 <SmpiInit+0x20>)
   1199a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   1199e:	4a05      	ldr	r2, [pc, #20]	; (119b4 <SmpiInit+0x24>)
   119a0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   119a4:	4770      	bx	lr
   119a6:	bf00      	nop
   119a8:	100040c0 	.word	0x100040c0
   119ac:	0002570c 	.word	0x0002570c
   119b0:	000120fd 	.word	0x000120fd
   119b4:	000121e9 	.word	0x000121e9

000119b8 <SmprScInit>:
   119b8:	4b02      	ldr	r3, [pc, #8]	; (119c4 <SmprScInit+0xc>)
   119ba:	4a03      	ldr	r2, [pc, #12]	; (119c8 <SmprScInit+0x10>)
   119bc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   119c0:	f7ff ba8e 	b.w	10ee0 <SmpScInit>
   119c4:	100040c0 	.word	0x100040c0
   119c8:	00025838 	.word	0x00025838

000119cc <smprStateStr>:
   119cc:	2824      	cmp	r0, #36	; 0x24
   119ce:	bf9d      	ittte	ls
   119d0:	4b02      	ldrls	r3, [pc, #8]	; (119dc <smprStateStr+0x10>)
   119d2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   119d6:	68c0      	ldrls	r0, [r0, #12]
   119d8:	4801      	ldrhi	r0, [pc, #4]	; (119e0 <smprStateStr+0x14>)
   119da:	4770      	bx	lr
   119dc:	00025838 	.word	0x00025838
   119e0:	00026605 	.word	0x00026605

000119e4 <dmConnSmActCancelOpen>:
   119e4:	f005 ba59 	b.w	16e9a <HciLeCreateConnCancelCmd>

000119e8 <dmConnSmActUpdateMaster>:
   119e8:	3104      	adds	r1, #4
   119ea:	8980      	ldrh	r0, [r0, #12]
   119ec:	f005 b918 	b.w	16c20 <HciLeConnUpdateCmd>

000119f0 <dmConnSmActL2cUpdateInd>:
   119f0:	b538      	push	{r3, r4, r5, lr}
   119f2:	460d      	mov	r5, r1
   119f4:	4604      	mov	r4, r0
   119f6:	8981      	ldrh	r1, [r0, #12]
   119f8:	7a28      	ldrb	r0, [r5, #8]
   119fa:	2200      	movs	r2, #0
   119fc:	f000 f8ca 	bl	11b94 <L2cDmConnUpdateRsp>
   11a00:	6869      	ldr	r1, [r5, #4]
   11a02:	89a0      	ldrh	r0, [r4, #12]
   11a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a08:	f005 b90a 	b.w	16c20 <HciLeConnUpdateCmd>

00011a0c <DmL2cConnUpdateInd>:
   11a0c:	b530      	push	{r4, r5, lr}
   11a0e:	4604      	mov	r4, r0
   11a10:	b085      	sub	sp, #20
   11a12:	4608      	mov	r0, r1
   11a14:	4615      	mov	r5, r2
   11a16:	f7fd fc18 	bl	f24a <dmConnCcbByHandle>
   11a1a:	b140      	cbz	r0, 11a2e <DmL2cConnUpdateInd+0x22>
   11a1c:	2335      	movs	r3, #53	; 0x35
   11a1e:	a901      	add	r1, sp, #4
   11a20:	f88d 3006 	strb.w	r3, [sp, #6]
   11a24:	9502      	str	r5, [sp, #8]
   11a26:	f88d 400c 	strb.w	r4, [sp, #12]
   11a2a:	f7fd ffa9 	bl	f980 <dmConnSmExecute>
   11a2e:	b005      	add	sp, #20
   11a30:	bd30      	pop	{r4, r5, pc}

00011a32 <DmConnOpen>:
   11a32:	b510      	push	{r4, lr}
   11a34:	b086      	sub	sp, #24
   11a36:	2400      	movs	r4, #0
   11a38:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11a3c:	e9cd 4201 	strd	r4, r2, [sp, #4]
   11a40:	9400      	str	r4, [sp, #0]
   11a42:	4623      	mov	r3, r4
   11a44:	4622      	mov	r2, r4
   11a46:	f7fd fd8f 	bl	f568 <dmConnOpenAccept>
   11a4a:	b006      	add	sp, #24
   11a4c:	bd10      	pop	{r4, pc}

00011a4e <DmConnSetAddrType>:
   11a4e:	b510      	push	{r4, lr}
   11a50:	4604      	mov	r4, r0
   11a52:	f003 ff0b 	bl	1586c <WsfTaskLock>
   11a56:	4b03      	ldr	r3, [pc, #12]	; (11a64 <DmConnSetAddrType+0x16>)
   11a58:	735c      	strb	r4, [r3, #13]
   11a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a5e:	f003 bf0b 	b.w	15878 <WsfTaskUnlock>
   11a62:	bf00      	nop
   11a64:	10003fec 	.word	0x10003fec

00011a68 <dmConnSmActOpen>:
   11a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a6c:	2001      	movs	r0, #1
   11a6e:	b085      	sub	sp, #20
   11a70:	f891 9011 	ldrb.w	r9, [r1, #17]
   11a74:	4f12      	ldr	r7, [pc, #72]	; (11ac0 <dmConnSmActOpen+0x58>)
   11a76:	460d      	mov	r5, r1
   11a78:	f7fe f8b6 	bl	fbe8 <DmScanPhyToIdx>
   11a7c:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   11a80:	4b10      	ldr	r3, [pc, #64]	; (11ac4 <dmConnSmActOpen+0x5c>)
   11a82:	f837 6012 	ldrh.w	r6, [r7, r2, lsl #1]
   11a86:	f893 a013 	ldrb.w	sl, [r3, #19]
   11a8a:	eb07 0242 	add.w	r2, r7, r2, lsl #1
   11a8e:	4683      	mov	fp, r0
   11a90:	7b58      	ldrb	r0, [r3, #13]
   11a92:	f8b2 8002 	ldrh.w	r8, [r2, #2]
   11a96:	240c      	movs	r4, #12
   11a98:	f7fe f87e 	bl	fb98 <DmLlAddrType>
   11a9c:	f44f 73ba 	mov.w	r3, #372	; 0x174
   11aa0:	fb14 340b 	smlabb	r4, r4, fp, r3
   11aa4:	443c      	add	r4, r7
   11aa6:	350b      	adds	r5, #11
   11aa8:	e9cd 0401 	strd	r0, r4, [sp, #4]
   11aac:	9500      	str	r5, [sp, #0]
   11aae:	464b      	mov	r3, r9
   11ab0:	4652      	mov	r2, sl
   11ab2:	4641      	mov	r1, r8
   11ab4:	4630      	mov	r0, r6
   11ab6:	f005 f93a 	bl	16d2e <HciLeCreateConnCmd>
   11aba:	b005      	add	sp, #20
   11abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ac0:	10003e5c 	.word	0x10003e5c
   11ac4:	10003fec 	.word	0x10003fec

00011ac8 <DmConnMasterInit>:
   11ac8:	4b01      	ldr	r3, [pc, #4]	; (11ad0 <DmConnMasterInit+0x8>)
   11aca:	4a02      	ldr	r2, [pc, #8]	; (11ad4 <DmConnMasterInit+0xc>)
   11acc:	605a      	str	r2, [r3, #4]
   11ace:	4770      	bx	lr
   11ad0:	10003fe0 	.word	0x10003fe0
   11ad4:	00025b84 	.word	0x00025b84

00011ad8 <DmSmpEncryptReq>:
   11ad8:	b570      	push	{r4, r5, r6, lr}
   11ada:	460d      	mov	r5, r1
   11adc:	4614      	mov	r4, r2
   11ade:	f7fd fc9b 	bl	f418 <dmConnCcbById>
   11ae2:	b148      	cbz	r0, 11af8 <DmSmpEncryptReq+0x20>
   11ae4:	2200      	movs	r2, #0
   11ae6:	7605      	strb	r5, [r0, #24]
   11ae8:	7482      	strb	r2, [r0, #18]
   11aea:	4623      	mov	r3, r4
   11aec:	4903      	ldr	r1, [pc, #12]	; (11afc <DmSmpEncryptReq+0x24>)
   11aee:	8980      	ldrh	r0, [r0, #12]
   11af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11af4:	f005 be11 	b.w	1771a <HciLeStartEncryptionCmd>
   11af8:	bd70      	pop	{r4, r5, r6, pc}
   11afa:	bf00      	nop
   11afc:	00025ba4 	.word	0x00025ba4

00011b00 <DmSecPairReq>:
   11b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b04:	4681      	mov	r9, r0
   11b06:	2008      	movs	r0, #8
   11b08:	4688      	mov	r8, r1
   11b0a:	4617      	mov	r7, r2
   11b0c:	461e      	mov	r6, r3
   11b0e:	f89d 5020 	ldrb.w	r5, [sp, #32]
   11b12:	f002 fd6e 	bl	145f2 <WsfMsgAlloc>
   11b16:	b180      	cbz	r0, 11b3a <DmSecPairReq+0x3a>
   11b18:	2301      	movs	r3, #1
   11b1a:	f006 0607 	and.w	r6, r6, #7
   11b1e:	f005 0507 	and.w	r5, r5, #7
   11b22:	7083      	strb	r3, [r0, #2]
   11b24:	f880 8004 	strb.w	r8, [r0, #4]
   11b28:	7147      	strb	r7, [r0, #5]
   11b2a:	7186      	strb	r6, [r0, #6]
   11b2c:	71c5      	strb	r5, [r0, #7]
   11b2e:	f8a0 9000 	strh.w	r9, [r0]
   11b32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b36:	f7ff b8aa 	b.w	10c8e <SmpDmMsgSend>
   11b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011b3e <DmSecEncryptReq>:
   11b3e:	b570      	push	{r4, r5, r6, lr}
   11b40:	4606      	mov	r6, r0
   11b42:	2020      	movs	r0, #32
   11b44:	460d      	mov	r5, r1
   11b46:	4614      	mov	r4, r2
   11b48:	f002 fd53 	bl	145f2 <WsfMsgAlloc>
   11b4c:	b1b8      	cbz	r0, 11b7e <DmSecEncryptReq+0x40>
   11b4e:	2350      	movs	r3, #80	; 0x50
   11b50:	7083      	strb	r3, [r0, #2]
   11b52:	4603      	mov	r3, r0
   11b54:	4622      	mov	r2, r4
   11b56:	f823 6b04 	strh.w	r6, [r3], #4
   11b5a:	f104 0118 	add.w	r1, r4, #24
   11b5e:	f852 4b04 	ldr.w	r4, [r2], #4
   11b62:	f843 4b04 	str.w	r4, [r3], #4
   11b66:	428a      	cmp	r2, r1
   11b68:	d1f9      	bne.n	11b5e <DmSecEncryptReq+0x20>
   11b6a:	8812      	ldrh	r2, [r2, #0]
   11b6c:	801a      	strh	r2, [r3, #0]
   11b6e:	4b04      	ldr	r3, [pc, #16]	; (11b80 <DmSecEncryptReq+0x42>)
   11b70:	7785      	strb	r5, [r0, #30]
   11b72:	4601      	mov	r1, r0
   11b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11b78:	7b18      	ldrb	r0, [r3, #12]
   11b7a:	f002 bd5e 	b.w	1463a <WsfMsgSend>
   11b7e:	bd70      	pop	{r4, r5, r6, pc}
   11b80:	10003fec 	.word	0x10003fec

00011b84 <L2cMasterInit>:
   11b84:	4b01      	ldr	r3, [pc, #4]	; (11b8c <L2cMasterInit+0x8>)
   11b86:	4a02      	ldr	r2, [pc, #8]	; (11b90 <L2cMasterInit+0xc>)
   11b88:	619a      	str	r2, [r3, #24]
   11b8a:	4770      	bx	lr
   11b8c:	10004098 	.word	0x10004098
   11b90:	00011bcb 	.word	0x00011bcb

00011b94 <L2cDmConnUpdateRsp>:
   11b94:	b570      	push	{r4, r5, r6, lr}
   11b96:	4606      	mov	r6, r0
   11b98:	200e      	movs	r0, #14
   11b9a:	460d      	mov	r5, r1
   11b9c:	4614      	mov	r4, r2
   11b9e:	f7fe fde1 	bl	10764 <l2cMsgAlloc>
   11ba2:	4603      	mov	r3, r0
   11ba4:	b180      	cbz	r0, 11bc8 <L2cDmConnUpdateRsp+0x34>
   11ba6:	2213      	movs	r2, #19
   11ba8:	7202      	strb	r2, [r0, #8]
   11baa:	2202      	movs	r2, #2
   11bac:	7282      	strb	r2, [r0, #10]
   11bae:	7304      	strb	r4, [r0, #12]
   11bb0:	2200      	movs	r2, #0
   11bb2:	0a24      	lsrs	r4, r4, #8
   11bb4:	72c2      	strb	r2, [r0, #11]
   11bb6:	7246      	strb	r6, [r0, #9]
   11bb8:	7344      	strb	r4, [r0, #13]
   11bba:	4629      	mov	r1, r5
   11bbc:	2206      	movs	r2, #6
   11bbe:	2005      	movs	r0, #5
   11bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11bc4:	f7fe bdfc 	b.w	107c0 <L2cDataReq>
   11bc8:	bd70      	pop	{r4, r5, r6, pc}

00011bca <l2cMasterRxSignalingPkt>:
   11bca:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bcc:	7ad4      	ldrb	r4, [r2, #11]
   11bce:	7a93      	ldrb	r3, [r2, #10]
   11bd0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   11bd4:	b29b      	uxth	r3, r3
   11bd6:	1d1c      	adds	r4, r3, #4
   11bd8:	42a1      	cmp	r1, r4
   11bda:	4605      	mov	r5, r0
   11bdc:	b085      	sub	sp, #20
   11bde:	7a50      	ldrb	r0, [r2, #9]
   11be0:	d104      	bne.n	11bec <l2cMasterRxSignalingPkt+0x22>
   11be2:	7a11      	ldrb	r1, [r2, #8]
   11be4:	2912      	cmp	r1, #18
   11be6:	d101      	bne.n	11bec <l2cMasterRxSignalingPkt+0x22>
   11be8:	2b08      	cmp	r3, #8
   11bea:	d006      	beq.n	11bfa <l2cMasterRxSignalingPkt+0x30>
   11bec:	4601      	mov	r1, r0
   11bee:	2200      	movs	r2, #0
   11bf0:	4628      	mov	r0, r5
   11bf2:	f7fe fdfa 	bl	107ea <l2cSendCmdReject>
   11bf6:	b005      	add	sp, #20
   11bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bfa:	7b53      	ldrb	r3, [r2, #13]
   11bfc:	7b16      	ldrb	r6, [r2, #12]
   11bfe:	7b91      	ldrb	r1, [r2, #14]
   11c00:	7c14      	ldrb	r4, [r2, #16]
   11c02:	7cd7      	ldrb	r7, [r2, #19]
   11c04:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   11c08:	7bd3      	ldrb	r3, [r2, #15]
   11c0a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   11c0e:	7c53      	ldrb	r3, [r2, #17]
   11c10:	b2b6      	uxth	r6, r6
   11c12:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   11c16:	7c93      	ldrb	r3, [r2, #18]
   11c18:	f8ad 6004 	strh.w	r6, [sp, #4]
   11c1c:	2200      	movs	r2, #0
   11c1e:	9203      	str	r2, [sp, #12]
   11c20:	1fb2      	subs	r2, r6, #6
   11c22:	eb03 2307 	add.w	r3, r3, r7, lsl #8
   11c26:	b292      	uxth	r2, r2
   11c28:	f640 477a 	movw	r7, #3194	; 0xc7a
   11c2c:	b289      	uxth	r1, r1
   11c2e:	b2a4      	uxth	r4, r4
   11c30:	b29b      	uxth	r3, r3
   11c32:	42ba      	cmp	r2, r7
   11c34:	f8ad 1006 	strh.w	r1, [sp, #6]
   11c38:	f8ad 4008 	strh.w	r4, [sp, #8]
   11c3c:	f8ad 300a 	strh.w	r3, [sp, #10]
   11c40:	d80d      	bhi.n	11c5e <l2cMasterRxSignalingPkt+0x94>
   11c42:	428e      	cmp	r6, r1
   11c44:	d80b      	bhi.n	11c5e <l2cMasterRxSignalingPkt+0x94>
   11c46:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   11c4a:	d808      	bhi.n	11c5e <l2cMasterRxSignalingPkt+0x94>
   11c4c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   11c50:	d205      	bcs.n	11c5e <l2cMasterRxSignalingPkt+0x94>
   11c52:	3b0a      	subs	r3, #10
   11c54:	b29b      	uxth	r3, r3
   11c56:	f640 4276 	movw	r2, #3190	; 0xc76
   11c5a:	4293      	cmp	r3, r2
   11c5c:	d904      	bls.n	11c68 <l2cMasterRxSignalingPkt+0x9e>
   11c5e:	2201      	movs	r2, #1
   11c60:	4629      	mov	r1, r5
   11c62:	f7ff ff97 	bl	11b94 <L2cDmConnUpdateRsp>
   11c66:	e7c6      	b.n	11bf6 <l2cMasterRxSignalingPkt+0x2c>
   11c68:	aa01      	add	r2, sp, #4
   11c6a:	4629      	mov	r1, r5
   11c6c:	f7ff fece 	bl	11a0c <DmL2cConnUpdateInd>
   11c70:	e7c1      	b.n	11bf6 <l2cMasterRxSignalingPkt+0x2c>
   11c72:	bf00      	nop

00011c74 <smpStartRspTimer>:
   11c74:	f24e 130f 	movw	r3, #57615	; 0xe10f
   11c78:	8183      	strh	r3, [r0, #12]
   11c7a:	211e      	movs	r1, #30
   11c7c:	f002 be72 	b.w	14964 <WsfTimerStartSec>

00011c80 <smpActNone>:
   11c80:	4770      	bx	lr

00011c82 <smpCleanup>:
   11c82:	b510      	push	{r4, lr}
   11c84:	4604      	mov	r4, r0
   11c86:	6a00      	ldr	r0, [r0, #32]
   11c88:	b118      	cbz	r0, 11c92 <smpCleanup+0x10>
   11c8a:	f002 fc63 	bl	14554 <WsfBufFree>
   11c8e:	2300      	movs	r3, #0
   11c90:	6223      	str	r3, [r4, #32]
   11c92:	4620      	mov	r0, r4
   11c94:	f002 fe8c 	bl	149b0 <WsfTimerStop>
   11c98:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   11c9c:	2300      	movs	r3, #0
   11c9e:	429a      	cmp	r2, r3
   11ca0:	bf14      	ite	ne
   11ca2:	220b      	movne	r2, #11
   11ca4:	2201      	moveq	r2, #1
   11ca6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   11caa:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   11cae:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11cb2:	bd10      	pop	{r4, pc}

00011cb4 <smpActCleanup>:
   11cb4:	f7ff bfe5 	b.w	11c82 <smpCleanup>

00011cb8 <smpSendPairingFailed>:
   11cb8:	b538      	push	{r3, r4, r5, lr}
   11cba:	4604      	mov	r4, r0
   11cbc:	200a      	movs	r0, #10
   11cbe:	460d      	mov	r5, r1
   11cc0:	f7fe ffe2 	bl	10c88 <smpMsgAlloc>
   11cc4:	b140      	cbz	r0, 11cd8 <smpSendPairingFailed+0x20>
   11cc6:	2305      	movs	r3, #5
   11cc8:	7203      	strb	r3, [r0, #8]
   11cca:	7245      	strb	r5, [r0, #9]
   11ccc:	4601      	mov	r1, r0
   11cce:	4620      	mov	r0, r4
   11cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11cd4:	f7fe bf8d 	b.w	10bf2 <smpSendPkt>
   11cd8:	bd38      	pop	{r3, r4, r5, pc}

00011cda <smpActPairingFailed>:
   11cda:	b538      	push	{r3, r4, r5, lr}
   11cdc:	4605      	mov	r5, r0
   11cde:	460c      	mov	r4, r1
   11ce0:	f7ff ffcf 	bl	11c82 <smpCleanup>
   11ce4:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   11ce8:	2200      	movs	r2, #0
   11cea:	2101      	movs	r1, #1
   11cec:	f7fd fe14 	bl	f918 <DmConnSetIdle>
   11cf0:	232b      	movs	r3, #43	; 0x2b
   11cf2:	70a3      	strb	r3, [r4, #2]
   11cf4:	4620      	mov	r0, r4
   11cf6:	f7fe fad9 	bl	102ac <DmSmpCbackExec>
   11cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11cfe:	f7fe bc89 	b.w	10614 <DmSecGetEccKey>

00011d02 <smpActPairingCancel>:
   11d02:	b538      	push	{r3, r4, r5, lr}
   11d04:	4605      	mov	r5, r0
   11d06:	460c      	mov	r4, r1
   11d08:	78c9      	ldrb	r1, [r1, #3]
   11d0a:	f7ff ffd5 	bl	11cb8 <smpSendPairingFailed>
   11d0e:	4621      	mov	r1, r4
   11d10:	4628      	mov	r0, r5
   11d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11d16:	f7ff bfe0 	b.w	11cda <smpActPairingFailed>

00011d1a <smpActStorePin>:
   11d1a:	b538      	push	{r3, r4, r5, lr}
   11d1c:	460c      	mov	r4, r1
   11d1e:	7d0a      	ldrb	r2, [r1, #20]
   11d20:	4605      	mov	r5, r0
   11d22:	3104      	adds	r1, #4
   11d24:	6a00      	ldr	r0, [r0, #32]
   11d26:	f7fa fa1b 	bl	c160 <memcpy>
   11d2a:	7d23      	ldrb	r3, [r4, #20]
   11d2c:	2b03      	cmp	r3, #3
   11d2e:	d107      	bne.n	11d40 <smpActStorePin+0x26>
   11d30:	6a28      	ldr	r0, [r5, #32]
   11d32:	220d      	movs	r2, #13
   11d34:	2100      	movs	r1, #0
   11d36:	3003      	adds	r0, #3
   11d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11d3c:	f7fa bb0e 	b.w	c35c <memset>
   11d40:	bd38      	pop	{r3, r4, r5, pc}

00011d42 <smpActPairCnfCalc1>:
   11d42:	b510      	push	{r4, lr}
   11d44:	4604      	mov	r4, r0
   11d46:	f7ff ffe8 	bl	11d1a <smpActStorePin>
   11d4a:	6a20      	ldr	r0, [r4, #32]
   11d4c:	2110      	movs	r1, #16
   11d4e:	3030      	adds	r0, #48	; 0x30
   11d50:	f009 fefa 	bl	1bb48 <SecRand>
   11d54:	6a21      	ldr	r1, [r4, #32]
   11d56:	4620      	mov	r0, r4
   11d58:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11d60:	f7fe bdee 	b.w	10940 <smpCalcC1Part1>

00011d64 <smpActPairCnfCalc2>:
   11d64:	684a      	ldr	r2, [r1, #4]
   11d66:	6a01      	ldr	r1, [r0, #32]
   11d68:	f7fe be6c 	b.w	10a44 <smpCalcC1Part2>

00011d6c <smpActSendPairCnf>:
   11d6c:	b538      	push	{r3, r4, r5, lr}
   11d6e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   11d72:	2b00      	cmp	r3, #0
   11d74:	bf14      	ite	ne
   11d76:	2303      	movne	r3, #3
   11d78:	2304      	moveq	r3, #4
   11d7a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   11d7e:	4604      	mov	r4, r0
   11d80:	460d      	mov	r5, r1
   11d82:	f7ff ff77 	bl	11c74 <smpStartRspTimer>
   11d86:	2019      	movs	r0, #25
   11d88:	f7fe ff7e 	bl	10c88 <smpMsgAlloc>
   11d8c:	b190      	cbz	r0, 11db4 <smpActSendPairCnf+0x48>
   11d8e:	2303      	movs	r3, #3
   11d90:	7203      	strb	r3, [r0, #8]
   11d92:	686b      	ldr	r3, [r5, #4]
   11d94:	f100 0209 	add.w	r2, r0, #9
   11d98:	f103 0110 	add.w	r1, r3, #16
   11d9c:	f853 5b04 	ldr.w	r5, [r3], #4
   11da0:	f842 5b04 	str.w	r5, [r2], #4
   11da4:	428b      	cmp	r3, r1
   11da6:	d1f9      	bne.n	11d9c <smpActSendPairCnf+0x30>
   11da8:	4601      	mov	r1, r0
   11daa:	4620      	mov	r0, r4
   11dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11db0:	f7fe bf1f 	b.w	10bf2 <smpSendPkt>
   11db4:	bd38      	pop	{r3, r4, r5, pc}

00011db6 <smpActPairCnfVerCalc1>:
   11db6:	684b      	ldr	r3, [r1, #4]
   11db8:	6a01      	ldr	r1, [r0, #32]
   11dba:	f103 0209 	add.w	r2, r3, #9
   11dbe:	b430      	push	{r4, r5}
   11dc0:	3110      	adds	r1, #16
   11dc2:	4614      	mov	r4, r2
   11dc4:	3319      	adds	r3, #25
   11dc6:	f854 5b04 	ldr.w	r5, [r4], #4
   11dca:	f841 5b04 	str.w	r5, [r1], #4
   11dce:	429c      	cmp	r4, r3
   11dd0:	d1f9      	bne.n	11dc6 <smpActPairCnfVerCalc1+0x10>
   11dd2:	6a01      	ldr	r1, [r0, #32]
   11dd4:	bc30      	pop	{r4, r5}
   11dd6:	f7fe bdb3 	b.w	10940 <smpCalcC1Part1>

00011dda <smpActPairCnfVerCalc2>:
   11dda:	f7ff bfc3 	b.w	11d64 <smpActPairCnfCalc2>

00011dde <smpSendKey>:
   11dde:	b5f0      	push	{r4, r5, r6, r7, lr}
   11de0:	4f5d      	ldr	r7, [pc, #372]	; (11f58 <smpSendKey+0x17a>)
   11de2:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
   11de6:	b08b      	sub	sp, #44	; 0x2c
   11de8:	4604      	mov	r4, r0
   11dea:	460e      	mov	r6, r1
   11dec:	b343      	cbz	r3, 11e40 <smpSendKey+0x62>
   11dee:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11df0:	781b      	ldrb	r3, [r3, #0]
   11df2:	b32b      	cbz	r3, 11e40 <smpSendKey+0x62>
   11df4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   11df8:	bb13      	cbnz	r3, 11e40 <smpSendKey+0x62>
   11dfa:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11dfe:	f7fd fdb5 	bl	f96c <DmConnRole>
   11e02:	bb48      	cbnz	r0, 11e58 <smpSendKey+0x7a>
   11e04:	2302      	movs	r3, #2
   11e06:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   11e0a:	232f      	movs	r3, #47	; 0x2f
   11e0c:	f88d 3006 	strb.w	r3, [sp, #6]
   11e10:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11e14:	f8ad 3004 	strh.w	r3, [sp, #4]
   11e18:	2303      	movs	r3, #3
   11e1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   11e1e:	2300      	movs	r3, #0
   11e20:	e9cd 3306 	strd	r3, r3, [sp, #24]
   11e24:	f8ad 3020 	strh.w	r3, [sp, #32]
   11e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e2a:	6919      	ldr	r1, [r3, #16]
   11e2c:	a802      	add	r0, sp, #8
   11e2e:	3110      	adds	r1, #16
   11e30:	f001 ff7d 	bl	13d2e <Calc128Cpy>
   11e34:	a801      	add	r0, sp, #4
   11e36:	f7fe fa39 	bl	102ac <DmSmpCbackExec>
   11e3a:	2307      	movs	r3, #7
   11e3c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11e40:	2e00      	cmp	r6, #0
   11e42:	f000 8086 	beq.w	11f52 <smpSendKey+0x174>
   11e46:	2e01      	cmp	r6, #1
   11e48:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11e4c:	d106      	bne.n	11e5c <smpSendKey+0x7e>
   11e4e:	2b07      	cmp	r3, #7
   11e50:	d106      	bne.n	11e60 <smpSendKey+0x82>
   11e52:	4630      	mov	r0, r6
   11e54:	b00b      	add	sp, #44	; 0x2c
   11e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e58:	2301      	movs	r3, #1
   11e5a:	e7d4      	b.n	11e06 <smpSendKey+0x28>
   11e5c:	2e03      	cmp	r6, #3
   11e5e:	d801      	bhi.n	11e64 <smpSendKey+0x86>
   11e60:	2b09      	cmp	r3, #9
   11e62:	d076      	beq.n	11f52 <smpSendKey+0x174>
   11e64:	2b0a      	cmp	r3, #10
   11e66:	d074      	beq.n	11f52 <smpSendKey+0x174>
   11e68:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   11e6c:	b10b      	cbz	r3, 11e72 <smpSendKey+0x94>
   11e6e:	2600      	movs	r6, #0
   11e70:	e7ef      	b.n	11e52 <smpSendKey+0x74>
   11e72:	2019      	movs	r0, #25
   11e74:	f7fe ff08 	bl	10c88 <smpMsgAlloc>
   11e78:	4605      	mov	r5, r0
   11e7a:	2800      	cmp	r0, #0
   11e7c:	d0f7      	beq.n	11e6e <smpSendKey+0x90>
   11e7e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11e82:	b96b      	cbnz	r3, 11ea0 <smpSendKey+0xc2>
   11e84:	07f0      	lsls	r0, r6, #31
   11e86:	d539      	bpl.n	11efc <smpSendKey+0x11e>
   11e88:	4620      	mov	r0, r4
   11e8a:	f7fe fe83 	bl	10b94 <smpGenerateLtk>
   11e8e:	2306      	movs	r3, #6
   11e90:	722b      	strb	r3, [r5, #8]
   11e92:	6a21      	ldr	r1, [r4, #32]
   11e94:	3104      	adds	r1, #4
   11e96:	f105 0009 	add.w	r0, r5, #9
   11e9a:	f001 ff48 	bl	13d2e <Calc128Cpy>
   11e9e:	e012      	b.n	11ec6 <smpSendKey+0xe8>
   11ea0:	2b06      	cmp	r3, #6
   11ea2:	d12b      	bne.n	11efc <smpSendKey+0x11e>
   11ea4:	2307      	movs	r3, #7
   11ea6:	7203      	strb	r3, [r0, #8]
   11ea8:	6a23      	ldr	r3, [r4, #32]
   11eaa:	8b9b      	ldrh	r3, [r3, #28]
   11eac:	7243      	strb	r3, [r0, #9]
   11eae:	6a23      	ldr	r3, [r4, #32]
   11eb0:	8b9b      	ldrh	r3, [r3, #28]
   11eb2:	0a1b      	lsrs	r3, r3, #8
   11eb4:	7283      	strb	r3, [r0, #10]
   11eb6:	6a22      	ldr	r2, [r4, #32]
   11eb8:	f852 3f14 	ldr.w	r3, [r2, #20]!
   11ebc:	f8c0 300b 	str.w	r3, [r0, #11]
   11ec0:	6853      	ldr	r3, [r2, #4]
   11ec2:	f8c0 300f 	str.w	r3, [r0, #15]
   11ec6:	7a2b      	ldrb	r3, [r5, #8]
   11ec8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11ecc:	4629      	mov	r1, r5
   11ece:	4620      	mov	r0, r4
   11ed0:	f7fe fe8f 	bl	10bf2 <smpSendPkt>
   11ed4:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   11ed8:	2e00      	cmp	r6, #0
   11eda:	d1c8      	bne.n	11e6e <smpSendKey+0x90>
   11edc:	2004      	movs	r0, #4
   11ede:	f002 fb88 	bl	145f2 <WsfMsgAlloc>
   11ee2:	4601      	mov	r1, r0
   11ee4:	2800      	cmp	r0, #0
   11ee6:	d0c2      	beq.n	11e6e <smpSendKey+0x90>
   11ee8:	230c      	movs	r3, #12
   11eea:	7083      	strb	r3, [r0, #2]
   11eec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11ef0:	8003      	strh	r3, [r0, #0]
   11ef2:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
   11ef6:	f002 fba0 	bl	1463a <WsfMsgSend>
   11efa:	e7aa      	b.n	11e52 <smpSendKey+0x74>
   11efc:	07b1      	lsls	r1, r6, #30
   11efe:	d508      	bpl.n	11f12 <smpSendKey+0x134>
   11f00:	b10b      	cbz	r3, 11f06 <smpSendKey+0x128>
   11f02:	2b07      	cmp	r3, #7
   11f04:	d105      	bne.n	11f12 <smpSendKey+0x134>
   11f06:	2308      	movs	r3, #8
   11f08:	722b      	strb	r3, [r5, #8]
   11f0a:	f7fe fa9d 	bl	10448 <DmSecGetLocalIrk>
   11f0e:	4601      	mov	r1, r0
   11f10:	e7c1      	b.n	11e96 <smpSendKey+0xb8>
   11f12:	2b08      	cmp	r3, #8
   11f14:	d10b      	bne.n	11f2e <smpSendKey+0x150>
   11f16:	2309      	movs	r3, #9
   11f18:	722b      	strb	r3, [r5, #8]
   11f1a:	2300      	movs	r3, #0
   11f1c:	726b      	strb	r3, [r5, #9]
   11f1e:	f006 fb6b 	bl	185f8 <HciGetBdAddr>
   11f22:	4601      	mov	r1, r0
   11f24:	f105 000a 	add.w	r0, r5, #10
   11f28:	f001 feb6 	bl	13c98 <BdaCpy>
   11f2c:	e7cb      	b.n	11ec6 <smpSendKey+0xe8>
   11f2e:	0772      	lsls	r2, r6, #29
   11f30:	d50c      	bpl.n	11f4c <smpSendKey+0x16e>
   11f32:	2b09      	cmp	r3, #9
   11f34:	d80a      	bhi.n	11f4c <smpSendKey+0x16e>
   11f36:	f240 2281 	movw	r2, #641	; 0x281
   11f3a:	fa22 f303 	lsr.w	r3, r2, r3
   11f3e:	07db      	lsls	r3, r3, #31
   11f40:	d504      	bpl.n	11f4c <smpSendKey+0x16e>
   11f42:	230a      	movs	r3, #10
   11f44:	722b      	strb	r3, [r5, #8]
   11f46:	f7fe fa79 	bl	1043c <DmSecGetLocalCsrk>
   11f4a:	e7e0      	b.n	11f0e <smpSendKey+0x130>
   11f4c:	4628      	mov	r0, r5
   11f4e:	f002 fb67 	bl	14620 <WsfMsgFree>
   11f52:	2601      	movs	r6, #1
   11f54:	e77d      	b.n	11e52 <smpSendKey+0x74>
   11f56:	bf00      	nop
   11f58:	100040c0 	.word	0x100040c0

00011f5c <smpProcRcvKey>:
   11f5c:	b570      	push	{r4, r5, r6, lr}
   11f5e:	461e      	mov	r6, r3
   11f60:	7a13      	ldrb	r3, [r2, #8]
   11f62:	2b06      	cmp	r3, #6
   11f64:	460c      	mov	r4, r1
   11f66:	4605      	mov	r5, r0
   11f68:	f102 0109 	add.w	r1, r2, #9
   11f6c:	d104      	bne.n	11f78 <smpProcRcvKey+0x1c>
   11f6e:	1d20      	adds	r0, r4, #4
   11f70:	f001 fedd 	bl	13d2e <Calc128Cpy>
   11f74:	2200      	movs	r2, #0
   11f76:	e016      	b.n	11fa6 <smpProcRcvKey+0x4a>
   11f78:	2b07      	cmp	r3, #7
   11f7a:	d126      	bne.n	11fca <smpProcRcvKey+0x6e>
   11f7c:	7a91      	ldrb	r1, [r2, #10]
   11f7e:	7a53      	ldrb	r3, [r2, #9]
   11f80:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   11f84:	83a3      	strh	r3, [r4, #28]
   11f86:	f852 3f0b 	ldr.w	r3, [r2, #11]!
   11f8a:	6163      	str	r3, [r4, #20]
   11f8c:	6853      	ldr	r3, [r2, #4]
   11f8e:	61a3      	str	r3, [r4, #24]
   11f90:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   11f94:	f013 0f04 	tst.w	r3, #4
   11f98:	bf14      	ite	ne
   11f9a:	2302      	movne	r3, #2
   11f9c:	2301      	moveq	r3, #1
   11f9e:	77e3      	strb	r3, [r4, #31]
   11fa0:	2302      	movs	r3, #2
   11fa2:	77a3      	strb	r3, [r4, #30]
   11fa4:	2201      	movs	r2, #1
   11fa6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   11faa:	2b06      	cmp	r3, #6
   11fac:	d001      	beq.n	11fb2 <smpProcRcvKey+0x56>
   11fae:	2b08      	cmp	r3, #8
   11fb0:	d120      	bne.n	11ff4 <smpProcRcvKey+0x98>
   11fb2:	3301      	adds	r3, #1
   11fb4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   11fb8:	2500      	movs	r5, #0
   11fba:	b122      	cbz	r2, 11fc6 <smpProcRcvKey+0x6a>
   11fbc:	232f      	movs	r3, #47	; 0x2f
   11fbe:	70a3      	strb	r3, [r4, #2]
   11fc0:	4620      	mov	r0, r4
   11fc2:	f7fe f973 	bl	102ac <DmSmpCbackExec>
   11fc6:	4628      	mov	r0, r5
   11fc8:	bd70      	pop	{r4, r5, r6, pc}
   11fca:	2b08      	cmp	r3, #8
   11fcc:	d0cf      	beq.n	11f6e <smpProcRcvKey+0x12>
   11fce:	2b09      	cmp	r3, #9
   11fd0:	d109      	bne.n	11fe6 <smpProcRcvKey+0x8a>
   11fd2:	7a53      	ldrb	r3, [r2, #9]
   11fd4:	76a3      	strb	r3, [r4, #26]
   11fd6:	f102 010a 	add.w	r1, r2, #10
   11fda:	f104 0014 	add.w	r0, r4, #20
   11fde:	f001 fe5b 	bl	13c98 <BdaCpy>
   11fe2:	2304      	movs	r3, #4
   11fe4:	e7dd      	b.n	11fa2 <smpProcRcvKey+0x46>
   11fe6:	2b0a      	cmp	r3, #10
   11fe8:	d1c4      	bne.n	11f74 <smpProcRcvKey+0x18>
   11fea:	1d20      	adds	r0, r4, #4
   11fec:	f001 fe9f 	bl	13d2e <Calc128Cpy>
   11ff0:	2308      	movs	r3, #8
   11ff2:	e7d6      	b.n	11fa2 <smpProcRcvKey+0x46>
   11ff4:	07b0      	lsls	r0, r6, #30
   11ff6:	d503      	bpl.n	12000 <smpProcRcvKey+0xa4>
   11ff8:	2b07      	cmp	r3, #7
   11ffa:	d101      	bne.n	12000 <smpProcRcvKey+0xa4>
   11ffc:	2308      	movs	r3, #8
   11ffe:	e7d9      	b.n	11fb4 <smpProcRcvKey+0x58>
   12000:	0771      	lsls	r1, r6, #29
   12002:	d505      	bpl.n	12010 <smpProcRcvKey+0xb4>
   12004:	2b07      	cmp	r3, #7
   12006:	d001      	beq.n	1200c <smpProcRcvKey+0xb0>
   12008:	2b09      	cmp	r3, #9
   1200a:	d101      	bne.n	12010 <smpProcRcvKey+0xb4>
   1200c:	230a      	movs	r3, #10
   1200e:	e7d1      	b.n	11fb4 <smpProcRcvKey+0x58>
   12010:	2501      	movs	r5, #1
   12012:	e7d2      	b.n	11fba <smpProcRcvKey+0x5e>

00012014 <smpActMaxAttempts>:
   12014:	b510      	push	{r4, lr}
   12016:	4604      	mov	r4, r0
   12018:	f7ff fe73 	bl	11d02 <smpActPairingCancel>
   1201c:	230f      	movs	r3, #15
   1201e:	7323      	strb	r3, [r4, #12]
   12020:	4b04      	ldr	r3, [pc, #16]	; (12034 <smpActMaxAttempts+0x20>)
   12022:	681b      	ldr	r3, [r3, #0]
   12024:	4620      	mov	r0, r4
   12026:	8819      	ldrh	r1, [r3, #0]
   12028:	f002 fcae 	bl	14988 <WsfTimerStartMs>
   1202c:	2300      	movs	r3, #0
   1202e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   12032:	bd10      	pop	{r4, pc}
   12034:	10002bd4 	.word	0x10002bd4

00012038 <smpActAttemptRcvd>:
   12038:	2301      	movs	r3, #1
   1203a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   1203e:	4770      	bx	lr

00012040 <smpActCheckAttempts>:
   12040:	b510      	push	{r4, lr}
   12042:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   12046:	4604      	mov	r4, r0
   12048:	b153      	cbz	r3, 12060 <smpActCheckAttempts+0x20>
   1204a:	2300      	movs	r3, #0
   1204c:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   12050:	2109      	movs	r1, #9
   12052:	f7ff fe31 	bl	11cb8 <smpSendPairingFailed>
   12056:	4620      	mov	r0, r4
   12058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1205c:	f7ff be11 	b.w	11c82 <smpCleanup>
   12060:	bd10      	pop	{r4, pc}

00012062 <smpActPairingCmpl>:
   12062:	b513      	push	{r0, r1, r4, lr}
   12064:	4604      	mov	r4, r0
   12066:	f7ff fe0c 	bl	11c82 <smpCleanup>
   1206a:	2200      	movs	r2, #0
   1206c:	2101      	movs	r1, #1
   1206e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   12072:	f7fd fc51 	bl	f918 <DmConnSetIdle>
   12076:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1207a:	f88d 3004 	strb.w	r3, [sp, #4]
   1207e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12082:	f8ad 3000 	strh.w	r3, [sp]
   12086:	4668      	mov	r0, sp
   12088:	232a      	movs	r3, #42	; 0x2a
   1208a:	f88d 3002 	strb.w	r3, [sp, #2]
   1208e:	f7fe f90d 	bl	102ac <DmSmpCbackExec>
   12092:	f7fe fabf 	bl	10614 <DmSecGetEccKey>
   12096:	b002      	add	sp, #8
   12098:	bd10      	pop	{r4, pc}

0001209a <smpSmExecute>:
   1209a:	b570      	push	{r4, r5, r6, lr}
   1209c:	4604      	mov	r4, r0
   1209e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   120a2:	460d      	mov	r5, r1
   120a4:	f7fd fc62 	bl	f96c <DmConnRole>
   120a8:	4b13      	ldr	r3, [pc, #76]	; (120f8 <smpSmExecute+0x5e>)
   120aa:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   120ae:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
   120b2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   120b6:	78ae      	ldrb	r6, [r5, #2]
   120b8:	2801      	cmp	r0, #1
   120ba:	bf18      	it	ne
   120bc:	461a      	movne	r2, r3
   120be:	6813      	ldr	r3, [r2, #0]
   120c0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   120c4:	4603      	mov	r3, r0
   120c6:	7819      	ldrb	r1, [r3, #0]
   120c8:	42b1      	cmp	r1, r6
   120ca:	d10b      	bne.n	120e4 <smpSmExecute+0x4a>
   120cc:	7859      	ldrb	r1, [r3, #1]
   120ce:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   120d2:	7899      	ldrb	r1, [r3, #2]
   120d4:	6853      	ldr	r3, [r2, #4]
   120d6:	4620      	mov	r0, r4
   120d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   120dc:	4629      	mov	r1, r5
   120de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   120e2:	4718      	bx	r3
   120e4:	f813 1f03 	ldrb.w	r1, [r3, #3]!
   120e8:	2900      	cmp	r1, #0
   120ea:	d1ec      	bne.n	120c6 <smpSmExecute+0x2c>
   120ec:	6890      	ldr	r0, [r2, #8]
   120ee:	f100 010c 	add.w	r1, r0, #12
   120f2:	4299      	cmp	r1, r3
   120f4:	d1e6      	bne.n	120c4 <smpSmExecute+0x2a>
   120f6:	bd70      	pop	{r4, r5, r6, pc}
   120f8:	100040c0 	.word	0x100040c0

000120fc <smpProcPairing>:
   120fc:	b513      	push	{r0, r1, r4, lr}
   120fe:	2300      	movs	r3, #0
   12100:	7013      	strb	r3, [r2, #0]
   12102:	700b      	strb	r3, [r1, #0]
   12104:	7c83      	ldrb	r3, [r0, #18]
   12106:	2b01      	cmp	r3, #1
   12108:	d127      	bne.n	1215a <smpProcPairing+0x5e>
   1210a:	7e43      	ldrb	r3, [r0, #25]
   1210c:	2b01      	cmp	r3, #1
   1210e:	d124      	bne.n	1215a <smpProcPairing+0x5e>
   12110:	700b      	strb	r3, [r1, #0]
   12112:	7cc3      	ldrb	r3, [r0, #19]
   12114:	7e82      	ldrb	r2, [r0, #26]
   12116:	4013      	ands	r3, r2
   12118:	f043 0304 	orr.w	r3, r3, #4
   1211c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   12120:	2300      	movs	r3, #0
   12122:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   12126:	2a00      	cmp	r2, #0
   12128:	d049      	beq.n	121be <smpProcPairing+0xc2>
   1212a:	7cc1      	ldrb	r1, [r0, #19]
   1212c:	4a2d      	ldr	r2, [pc, #180]	; (121e4 <smpProcPairing+0xe8>)
   1212e:	6812      	ldr	r2, [r2, #0]
   12130:	2b00      	cmp	r3, #0
   12132:	d046      	beq.n	121c2 <smpProcPairing+0xc6>
   12134:	7993      	ldrb	r3, [r2, #6]
   12136:	f003 0304 	and.w	r3, r3, #4
   1213a:	4219      	tst	r1, r3
   1213c:	d041      	beq.n	121c2 <smpProcPairing+0xc6>
   1213e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12142:	f8ad 3004 	strh.w	r3, [sp, #4]
   12146:	f240 3303 	movw	r3, #771	; 0x303
   1214a:	a901      	add	r1, sp, #4
   1214c:	f8ad 3006 	strh.w	r3, [sp, #6]
   12150:	f7ff ffa3 	bl	1209a <smpSmExecute>
   12154:	2000      	movs	r0, #0
   12156:	b002      	add	sp, #8
   12158:	bd10      	pop	{r4, pc}
   1215a:	7cc1      	ldrb	r1, [r0, #19]
   1215c:	074b      	lsls	r3, r1, #29
   1215e:	d402      	bmi.n	12166 <smpProcPairing+0x6a>
   12160:	7e83      	ldrb	r3, [r0, #26]
   12162:	075c      	lsls	r4, r3, #29
   12164:	d509      	bpl.n	1217a <smpProcPairing+0x7e>
   12166:	7c44      	ldrb	r4, [r0, #17]
   12168:	2c03      	cmp	r4, #3
   1216a:	d006      	beq.n	1217a <smpProcPairing+0x7e>
   1216c:	7e03      	ldrb	r3, [r0, #24]
   1216e:	2b03      	cmp	r3, #3
   12170:	d003      	beq.n	1217a <smpProcPairing+0x7e>
   12172:	2c01      	cmp	r4, #1
   12174:	d809      	bhi.n	1218a <smpProcPairing+0x8e>
   12176:	2b01      	cmp	r3, #1
   12178:	d81f      	bhi.n	121ba <smpProcPairing+0xbe>
   1217a:	7e83      	ldrb	r3, [r0, #26]
   1217c:	4019      	ands	r1, r3
   1217e:	f021 0104 	bic.w	r1, r1, #4
   12182:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
   12186:	2301      	movs	r3, #1
   12188:	e7cb      	b.n	12122 <smpProcPairing+0x26>
   1218a:	2c04      	cmp	r4, #4
   1218c:	d113      	bne.n	121b6 <smpProcPairing+0xba>
   1218e:	2b02      	cmp	r3, #2
   12190:	d013      	beq.n	121ba <smpProcPairing+0xbe>
   12192:	1f19      	subs	r1, r3, #4
   12194:	424b      	negs	r3, r1
   12196:	414b      	adcs	r3, r1
   12198:	7013      	strb	r3, [r2, #0]
   1219a:	7e01      	ldrb	r1, [r0, #24]
   1219c:	2902      	cmp	r1, #2
   1219e:	d102      	bne.n	121a6 <smpProcPairing+0xaa>
   121a0:	7c41      	ldrb	r1, [r0, #17]
   121a2:	2902      	cmp	r1, #2
   121a4:	d0b5      	beq.n	12112 <smpProcPairing+0x16>
   121a6:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   121aa:	2900      	cmp	r1, #0
   121ac:	bf08      	it	eq
   121ae:	f083 0301 	eoreq.w	r3, r3, #1
   121b2:	7013      	strb	r3, [r2, #0]
   121b4:	e7ad      	b.n	12112 <smpProcPairing+0x16>
   121b6:	2300      	movs	r3, #0
   121b8:	e7ee      	b.n	12198 <smpProcPairing+0x9c>
   121ba:	2301      	movs	r3, #1
   121bc:	e7ec      	b.n	12198 <smpProcPairing+0x9c>
   121be:	7e81      	ldrb	r1, [r0, #26]
   121c0:	e7b4      	b.n	1212c <smpProcPairing+0x30>
   121c2:	78d3      	ldrb	r3, [r2, #3]
   121c4:	7d02      	ldrb	r2, [r0, #20]
   121c6:	429a      	cmp	r2, r3
   121c8:	d302      	bcc.n	121d0 <smpProcPairing+0xd4>
   121ca:	7ec2      	ldrb	r2, [r0, #27]
   121cc:	429a      	cmp	r2, r3
   121ce:	d206      	bcs.n	121de <smpProcPairing+0xe2>
   121d0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   121d4:	f8ad 3004 	strh.w	r3, [sp, #4]
   121d8:	f240 6303 	movw	r3, #1539	; 0x603
   121dc:	e7b5      	b.n	1214a <smpProcPairing+0x4e>
   121de:	2001      	movs	r0, #1
   121e0:	e7b9      	b.n	12156 <smpProcPairing+0x5a>
   121e2:	bf00      	nop
   121e4:	10002bd4 	.word	0x10002bd4

000121e8 <smpAuthReq>:
   121e8:	b510      	push	{r4, lr}
   121ea:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   121ee:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   121f2:	b086      	sub	sp, #24
   121f4:	f013 0304 	ands.w	r3, r3, #4
   121f8:	f8ad 4000 	strh.w	r4, [sp]
   121fc:	d00b      	beq.n	12216 <smpAuthReq+0x2e>
   121fe:	232e      	movs	r3, #46	; 0x2e
   12200:	4668      	mov	r0, sp
   12202:	f88d 3002 	strb.w	r3, [sp, #2]
   12206:	f88d 1004 	strb.w	r1, [sp, #4]
   1220a:	f88d 2005 	strb.w	r2, [sp, #5]
   1220e:	f7fe f84d 	bl	102ac <DmSmpCbackExec>
   12212:	b006      	add	sp, #24
   12214:	bd10      	pop	{r4, pc}
   12216:	2204      	movs	r2, #4
   12218:	f8ad 3004 	strh.w	r3, [sp, #4]
   1221c:	f88d 3006 	strb.w	r3, [sp, #6]
   12220:	4669      	mov	r1, sp
   12222:	2303      	movs	r3, #3
   12224:	f88d 2002 	strb.w	r2, [sp, #2]
   12228:	f88d 3014 	strb.w	r3, [sp, #20]
   1222c:	f7ff ff35 	bl	1209a <smpSmExecute>
   12230:	e7ef      	b.n	12212 <smpAuthReq+0x2a>
   12232:	bf00      	nop

00012234 <smpiActPairReq>:
   12234:	b538      	push	{r3, r4, r5, lr}
   12236:	2201      	movs	r2, #1
   12238:	4604      	mov	r4, r0
   1223a:	460d      	mov	r5, r1
   1223c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   12240:	4611      	mov	r1, r2
   12242:	f7fd fb69 	bl	f918 <DmConnSetIdle>
   12246:	2302      	movs	r3, #2
   12248:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1224c:	4620      	mov	r0, r4
   1224e:	f7ff fd11 	bl	11c74 <smpStartRspTimer>
   12252:	2040      	movs	r0, #64	; 0x40
   12254:	f002 f93e 	bl	144d4 <WsfBufAlloc>
   12258:	6220      	str	r0, [r4, #32]
   1225a:	200f      	movs	r0, #15
   1225c:	f7fe fd14 	bl	10c88 <smpMsgAlloc>
   12260:	4601      	mov	r1, r0
   12262:	b1e0      	cbz	r0, 1229e <smpiActPairReq+0x6a>
   12264:	2301      	movs	r3, #1
   12266:	7203      	strb	r3, [r0, #8]
   12268:	4b0d      	ldr	r3, [pc, #52]	; (122a0 <smpiActPairReq+0x6c>)
   1226a:	681b      	ldr	r3, [r3, #0]
   1226c:	789a      	ldrb	r2, [r3, #2]
   1226e:	7242      	strb	r2, [r0, #9]
   12270:	792a      	ldrb	r2, [r5, #4]
   12272:	7282      	strb	r2, [r0, #10]
   12274:	796a      	ldrb	r2, [r5, #5]
   12276:	72c2      	strb	r2, [r0, #11]
   12278:	791b      	ldrb	r3, [r3, #4]
   1227a:	7303      	strb	r3, [r0, #12]
   1227c:	79ab      	ldrb	r3, [r5, #6]
   1227e:	7343      	strb	r3, [r0, #13]
   12280:	79eb      	ldrb	r3, [r5, #7]
   12282:	7383      	strb	r3, [r0, #14]
   12284:	4603      	mov	r3, r0
   12286:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1228a:	6120      	str	r0, [r4, #16]
   1228c:	8898      	ldrh	r0, [r3, #4]
   1228e:	82a0      	strh	r0, [r4, #20]
   12290:	799b      	ldrb	r3, [r3, #6]
   12292:	75a3      	strb	r3, [r4, #22]
   12294:	4620      	mov	r0, r4
   12296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1229a:	f7fe bcaa 	b.w	10bf2 <smpSendPkt>
   1229e:	bd38      	pop	{r3, r4, r5, pc}
   122a0:	10002bd4 	.word	0x10002bd4

000122a4 <smpiActCheckSecurityReq>:
   122a4:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   122a8:	b12a      	cbz	r2, 122b6 <smpiActCheckSecurityReq+0x12>
   122aa:	2200      	movs	r2, #0
   122ac:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
   122b0:	78c9      	ldrb	r1, [r1, #3]
   122b2:	f7ff bd01 	b.w	11cb8 <smpSendPairingFailed>
   122b6:	4770      	bx	lr

000122b8 <smpiActProcSecurityReq>:
   122b8:	b507      	push	{r0, r1, r2, lr}
   122ba:	2301      	movs	r3, #1
   122bc:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   122c0:	684b      	ldr	r3, [r1, #4]
   122c2:	7a5b      	ldrb	r3, [r3, #9]
   122c4:	f88d 3004 	strb.w	r3, [sp, #4]
   122c8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   122cc:	f8ad 3000 	strh.w	r3, [sp]
   122d0:	4668      	mov	r0, sp
   122d2:	2332      	movs	r3, #50	; 0x32
   122d4:	f88d 3002 	strb.w	r3, [sp, #2]
   122d8:	f7fd ffe8 	bl	102ac <DmSmpCbackExec>
   122dc:	b003      	add	sp, #12
   122de:	f85d fb04 	ldr.w	pc, [sp], #4

000122e2 <smpiActProcPairRsp>:
   122e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   122e4:	684a      	ldr	r2, [r1, #4]
   122e6:	7d45      	ldrb	r5, [r0, #21]
   122e8:	4613      	mov	r3, r2
   122ea:	4604      	mov	r4, r0
   122ec:	f853 6f08 	ldr.w	r6, [r3, #8]!
   122f0:	f8c0 6017 	str.w	r6, [r0, #23]
   122f4:	889e      	ldrh	r6, [r3, #4]
   122f6:	f8a0 601b 	strh.w	r6, [r0, #27]
   122fa:	799b      	ldrb	r3, [r3, #6]
   122fc:	7743      	strb	r3, [r0, #29]
   122fe:	7b53      	ldrb	r3, [r2, #13]
   12300:	43ab      	bics	r3, r5
   12302:	d103      	bne.n	1230c <smpiActProcPairRsp+0x2a>
   12304:	7d85      	ldrb	r5, [r0, #22]
   12306:	7b93      	ldrb	r3, [r2, #14]
   12308:	43ab      	bics	r3, r5
   1230a:	d007      	beq.n	1231c <smpiActProcPairRsp+0x3a>
   1230c:	f640 2303 	movw	r3, #2563	; 0xa03
   12310:	804b      	strh	r3, [r1, #2]
   12312:	4620      	mov	r0, r4
   12314:	f7ff fec1 	bl	1209a <smpSmExecute>
   12318:	b002      	add	sp, #8
   1231a:	bd70      	pop	{r4, r5, r6, pc}
   1231c:	4d09      	ldr	r5, [pc, #36]	; (12344 <smpiActProcPairRsp+0x62>)
   1231e:	f10d 0207 	add.w	r2, sp, #7
   12322:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   12326:	f10d 0106 	add.w	r1, sp, #6
   1232a:	4798      	blx	r3
   1232c:	2800      	cmp	r0, #0
   1232e:	d0f3      	beq.n	12318 <smpiActProcPairRsp+0x36>
   12330:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   12334:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12338:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1233c:	4620      	mov	r0, r4
   1233e:	4798      	blx	r3
   12340:	e7ea      	b.n	12318 <smpiActProcPairRsp+0x36>
   12342:	bf00      	nop
   12344:	100040c0 	.word	0x100040c0

00012348 <smpiActProcPairCnf>:
   12348:	b538      	push	{r3, r4, r5, lr}
   1234a:	6a02      	ldr	r2, [r0, #32]
   1234c:	684b      	ldr	r3, [r1, #4]
   1234e:	4604      	mov	r4, r0
   12350:	f103 0109 	add.w	r1, r3, #9
   12354:	3220      	adds	r2, #32
   12356:	3319      	adds	r3, #25
   12358:	f851 0b04 	ldr.w	r0, [r1], #4
   1235c:	f842 0b04 	str.w	r0, [r2], #4
   12360:	4299      	cmp	r1, r3
   12362:	d1f9      	bne.n	12358 <smpiActProcPairCnf+0x10>
   12364:	2504      	movs	r5, #4
   12366:	4620      	mov	r0, r4
   12368:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   1236c:	f7ff fc82 	bl	11c74 <smpStartRspTimer>
   12370:	2019      	movs	r0, #25
   12372:	f7fe fc89 	bl	10c88 <smpMsgAlloc>
   12376:	4601      	mov	r1, r0
   12378:	b180      	cbz	r0, 1239c <smpiActProcPairCnf+0x54>
   1237a:	7205      	strb	r5, [r0, #8]
   1237c:	6a23      	ldr	r3, [r4, #32]
   1237e:	3009      	adds	r0, #9
   12380:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12384:	3340      	adds	r3, #64	; 0x40
   12386:	f852 5b04 	ldr.w	r5, [r2], #4
   1238a:	f840 5b04 	str.w	r5, [r0], #4
   1238e:	429a      	cmp	r2, r3
   12390:	d1f9      	bne.n	12386 <smpiActProcPairCnf+0x3e>
   12392:	4620      	mov	r0, r4
   12394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12398:	f7fe bc2b 	b.w	10bf2 <smpSendPkt>
   1239c:	bd38      	pop	{r3, r4, r5, pc}

0001239e <smpiActCnfVerify>:
   1239e:	b570      	push	{r4, r5, r6, lr}
   123a0:	460e      	mov	r6, r1
   123a2:	6a05      	ldr	r5, [r0, #32]
   123a4:	4604      	mov	r4, r0
   123a6:	2210      	movs	r2, #16
   123a8:	f105 0120 	add.w	r1, r5, #32
   123ac:	6870      	ldr	r0, [r6, #4]
   123ae:	f7f9 fea7 	bl	c100 <memcmp>
   123b2:	b1c8      	cbz	r0, 123e8 <smpiActCnfVerify+0x4a>
   123b4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   123b8:	b19b      	cbz	r3, 123e2 <smpiActCnfVerify+0x44>
   123ba:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   123be:	4a0f      	ldr	r2, [pc, #60]	; (123fc <smpiActCnfVerify+0x5e>)
   123c0:	3301      	adds	r3, #1
   123c2:	b2db      	uxtb	r3, r3
   123c4:	6812      	ldr	r2, [r2, #0]
   123c6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   123ca:	7952      	ldrb	r2, [r2, #5]
   123cc:	429a      	cmp	r2, r3
   123ce:	d108      	bne.n	123e2 <smpiActCnfVerify+0x44>
   123d0:	f640 130d 	movw	r3, #2317	; 0x90d
   123d4:	8073      	strh	r3, [r6, #2]
   123d6:	4631      	mov	r1, r6
   123d8:	4620      	mov	r0, r4
   123da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   123de:	f7ff be5c 	b.w	1209a <smpSmExecute>
   123e2:	f240 4303 	movw	r3, #1027	; 0x403
   123e6:	e7f5      	b.n	123d4 <smpiActCnfVerify+0x36>
   123e8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   123ec:	f105 0210 	add.w	r2, r5, #16
   123f0:	4629      	mov	r1, r5
   123f2:	4620      	mov	r0, r4
   123f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   123f8:	f7fe bba4 	b.w	10b44 <smpCalcS1>
   123fc:	10002bd4 	.word	0x10002bd4

00012400 <smpiActStkEncrypt>:
   12400:	b530      	push	{r4, r5, lr}
   12402:	7ec4      	ldrb	r4, [r0, #27]
   12404:	7d03      	ldrb	r3, [r0, #20]
   12406:	6849      	ldr	r1, [r1, #4]
   12408:	429c      	cmp	r4, r3
   1240a:	b085      	sub	sp, #20
   1240c:	bf28      	it	cs
   1240e:	461c      	movcs	r4, r3
   12410:	4605      	mov	r5, r0
   12412:	4622      	mov	r2, r4
   12414:	4668      	mov	r0, sp
   12416:	f7f9 fea3 	bl	c160 <memcpy>
   1241a:	2100      	movs	r1, #0
   1241c:	f1c4 0210 	rsb	r2, r4, #16
   12420:	eb0d 0004 	add.w	r0, sp, r4
   12424:	f7f9 ff9a 	bl	c35c <memset>
   12428:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1242c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   12430:	f013 0f04 	tst.w	r3, #4
   12434:	466a      	mov	r2, sp
   12436:	bf14      	ite	ne
   12438:	2102      	movne	r1, #2
   1243a:	2101      	moveq	r1, #1
   1243c:	f7ff fb4c 	bl	11ad8 <DmSmpEncryptReq>
   12440:	b005      	add	sp, #20
   12442:	bd30      	pop	{r4, r5, pc}

00012444 <smpiActSetupKeyDist>:
   12444:	b538      	push	{r3, r4, r5, lr}
   12446:	4604      	mov	r4, r0
   12448:	460d      	mov	r5, r1
   1244a:	f7ff fc13 	bl	11c74 <smpStartRspTimer>
   1244e:	6a23      	ldr	r3, [r4, #32]
   12450:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12454:	801a      	strh	r2, [r3, #0]
   12456:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1245a:	f012 0f04 	tst.w	r2, #4
   1245e:	bf14      	ite	ne
   12460:	2202      	movne	r2, #2
   12462:	2201      	moveq	r2, #1
   12464:	77da      	strb	r2, [r3, #31]
   12466:	7ee2      	ldrb	r2, [r4, #27]
   12468:	7d21      	ldrb	r1, [r4, #20]
   1246a:	428a      	cmp	r2, r1
   1246c:	bf28      	it	cs
   1246e:	460a      	movcs	r2, r1
   12470:	f883 2020 	strb.w	r2, [r3, #32]
   12474:	2300      	movs	r3, #0
   12476:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1247a:	7f62      	ldrb	r2, [r4, #29]
   1247c:	7da3      	ldrb	r3, [r4, #22]
   1247e:	4013      	ands	r3, r2
   12480:	07d8      	lsls	r0, r3, #31
   12482:	d518      	bpl.n	124b6 <smpiActSetupKeyDist+0x72>
   12484:	4a0f      	ldr	r2, [pc, #60]	; (124c4 <smpiActSetupKeyDist+0x80>)
   12486:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   1248a:	b192      	cbz	r2, 124b2 <smpiActSetupKeyDist+0x6e>
   1248c:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1248e:	7812      	ldrb	r2, [r2, #0]
   12490:	b17a      	cbz	r2, 124b2 <smpiActSetupKeyDist+0x6e>
   12492:	0799      	lsls	r1, r3, #30
   12494:	d502      	bpl.n	1249c <smpiActSetupKeyDist+0x58>
   12496:	2308      	movs	r3, #8
   12498:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1249c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   124a0:	b97b      	cbnz	r3, 124c2 <smpiActSetupKeyDist+0x7e>
   124a2:	230c      	movs	r3, #12
   124a4:	70ab      	strb	r3, [r5, #2]
   124a6:	4629      	mov	r1, r5
   124a8:	4620      	mov	r0, r4
   124aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   124ae:	f7ff bdf4 	b.w	1209a <smpSmExecute>
   124b2:	2306      	movs	r3, #6
   124b4:	e7f0      	b.n	12498 <smpiActSetupKeyDist+0x54>
   124b6:	079a      	lsls	r2, r3, #30
   124b8:	d4ed      	bmi.n	12496 <smpiActSetupKeyDist+0x52>
   124ba:	075b      	lsls	r3, r3, #29
   124bc:	d5ee      	bpl.n	1249c <smpiActSetupKeyDist+0x58>
   124be:	230a      	movs	r3, #10
   124c0:	e7ea      	b.n	12498 <smpiActSetupKeyDist+0x54>
   124c2:	bd38      	pop	{r3, r4, r5, pc}
   124c4:	100040c0 	.word	0x100040c0

000124c8 <smpiActRcvKey>:
   124c8:	b538      	push	{r3, r4, r5, lr}
   124ca:	7d82      	ldrb	r2, [r0, #22]
   124cc:	7f43      	ldrb	r3, [r0, #29]
   124ce:	460d      	mov	r5, r1
   124d0:	4013      	ands	r3, r2
   124d2:	684a      	ldr	r2, [r1, #4]
   124d4:	6a01      	ldr	r1, [r0, #32]
   124d6:	4604      	mov	r4, r0
   124d8:	f7ff fd40 	bl	11f5c <smpProcRcvKey>
   124dc:	b150      	cbz	r0, 124f4 <smpiActRcvKey+0x2c>
   124de:	2300      	movs	r3, #0
   124e0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   124e4:	230c      	movs	r3, #12
   124e6:	70ab      	strb	r3, [r5, #2]
   124e8:	4629      	mov	r1, r5
   124ea:	4620      	mov	r0, r4
   124ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   124f0:	f7ff bdd3 	b.w	1209a <smpSmExecute>
   124f4:	bd38      	pop	{r3, r4, r5, pc}

000124f6 <smpiActSendKey>:
   124f6:	b538      	push	{r3, r4, r5, lr}
   124f8:	460d      	mov	r5, r1
   124fa:	7f03      	ldrb	r3, [r0, #28]
   124fc:	7d41      	ldrb	r1, [r0, #21]
   124fe:	4019      	ands	r1, r3
   12500:	4604      	mov	r4, r0
   12502:	f7ff fc6c 	bl	11dde <smpSendKey>
   12506:	b138      	cbz	r0, 12518 <smpiActSendKey+0x22>
   12508:	230e      	movs	r3, #14
   1250a:	70ab      	strb	r3, [r5, #2]
   1250c:	4629      	mov	r1, r5
   1250e:	4620      	mov	r0, r4
   12510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12514:	f7ff bdc1 	b.w	1209a <smpSmExecute>
   12518:	bd38      	pop	{r3, r4, r5, pc}
   1251a:	bf00      	nop

0001251c <smpiScActAuthSelect>:
   1251c:	f7fe bfdd 	b.w	114da <smpScActAuthSelect>

00012520 <smpiScActSendPubKey>:
   12520:	230c      	movs	r3, #12
   12522:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12526:	f7fe bd18 	b.w	10f5a <smpScSendPubKey>

0001252a <smpiScActJwncSetup>:
   1252a:	b538      	push	{r3, r4, r5, lr}
   1252c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1252e:	4d0b      	ldr	r5, [pc, #44]	; (1255c <smpiScActJwncSetup+0x32>)
   12530:	4604      	mov	r4, r0
   12532:	2110      	movs	r1, #16
   12534:	68d8      	ldr	r0, [r3, #12]
   12536:	f009 fb07 	bl	1bb48 <SecRand>
   1253a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1253c:	68d8      	ldr	r0, [r3, #12]
   1253e:	4629      	mov	r1, r5
   12540:	3020      	adds	r0, #32
   12542:	f001 fbf4 	bl	13d2e <Calc128Cpy>
   12546:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12548:	68d8      	ldr	r0, [r3, #12]
   1254a:	4629      	mov	r1, r5
   1254c:	3030      	adds	r0, #48	; 0x30
   1254e:	f001 fbee 	bl	13d2e <Calc128Cpy>
   12552:	2303      	movs	r3, #3
   12554:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12558:	bd38      	pop	{r3, r4, r5, pc}
   1255a:	bf00      	nop
   1255c:	00025ba4 	.word	0x00025ba4

00012560 <smpiScActJwncSendRand>:
   12560:	b538      	push	{r3, r4, r5, lr}
   12562:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12564:	4604      	mov	r4, r0
   12566:	460d      	mov	r5, r1
   12568:	68d8      	ldr	r0, [r3, #12]
   1256a:	6849      	ldr	r1, [r1, #4]
   1256c:	2210      	movs	r2, #16
   1256e:	3109      	adds	r1, #9
   12570:	3040      	adds	r0, #64	; 0x40
   12572:	f001 fc43 	bl	13dfc <WStrReverseCpy>
   12576:	2304      	movs	r3, #4
   12578:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1257c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1257e:	4629      	mov	r1, r5
   12580:	68da      	ldr	r2, [r3, #12]
   12582:	4620      	mov	r0, r4
   12584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12588:	f7fe bd41 	b.w	1100e <smpScSendRand>

0001258c <smpiScActJwncCalcF4>:
   1258c:	b538      	push	{r3, r4, r5, lr}
   1258e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12590:	4604      	mov	r4, r0
   12592:	460d      	mov	r5, r1
   12594:	68d8      	ldr	r0, [r3, #12]
   12596:	6849      	ldr	r1, [r1, #4]
   12598:	2210      	movs	r2, #16
   1259a:	3109      	adds	r1, #9
   1259c:	4410      	add	r0, r2
   1259e:	f001 fc2d 	bl	13dfc <WStrReverseCpy>
   125a2:	4629      	mov	r1, r5
   125a4:	4620      	mov	r0, r4
   125a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   125aa:	f7fe bfe0 	b.w	1156e <smpScActJwncCalcF4>

000125ae <smpiScActJwncCalcG2>:
   125ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   125b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   125b2:	4604      	mov	r4, r0
   125b4:	68d8      	ldr	r0, [r3, #12]
   125b6:	460d      	mov	r5, r1
   125b8:	2210      	movs	r2, #16
   125ba:	6849      	ldr	r1, [r1, #4]
   125bc:	3040      	adds	r0, #64	; 0x40
   125be:	f7f9 fd9f 	bl	c100 <memcmp>
   125c2:	b168      	cbz	r0, 125e0 <smpiScActJwncCalcG2+0x32>
   125c4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   125c8:	f8ad 3004 	strh.w	r3, [sp, #4]
   125cc:	a901      	add	r1, sp, #4
   125ce:	f240 4303 	movw	r3, #1027	; 0x403
   125d2:	4620      	mov	r0, r4
   125d4:	f8ad 3006 	strh.w	r3, [sp, #6]
   125d8:	f7ff fd5f 	bl	1209a <smpSmExecute>
   125dc:	b003      	add	sp, #12
   125de:	bd30      	pop	{r4, r5, pc}
   125e0:	4629      	mov	r1, r5
   125e2:	4620      	mov	r0, r4
   125e4:	f7fe ffe5 	bl	115b2 <smpScActJwncCalcG2>
   125e8:	e7f8      	b.n	125dc <smpiScActJwncCalcG2+0x2e>

000125ea <smpiScActPkCalcCa>:
   125ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
   125ee:	78da      	ldrb	r2, [r3, #3]
   125f0:	4604      	mov	r4, r0
   125f2:	460d      	mov	r5, r1
   125f4:	b9da      	cbnz	r2, 1262e <smpiScActPkCalcCa+0x44>
   125f6:	68d8      	ldr	r0, [r3, #12]
   125f8:	4919      	ldr	r1, [pc, #100]	; (12660 <smpiScActPkCalcCa+0x76>)
   125fa:	3020      	adds	r0, #32
   125fc:	f001 fb97 	bl	13d2e <Calc128Cpy>
   12600:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12602:	4917      	ldr	r1, [pc, #92]	; (12660 <smpiScActPkCalcCa+0x76>)
   12604:	68d8      	ldr	r0, [r3, #12]
   12606:	3030      	adds	r0, #48	; 0x30
   12608:	f001 fb91 	bl	13d2e <Calc128Cpy>
   1260c:	7d2a      	ldrb	r2, [r5, #20]
   1260e:	2a03      	cmp	r2, #3
   12610:	d80d      	bhi.n	1262e <smpiScActPkCalcCa+0x44>
   12612:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12614:	68d8      	ldr	r0, [r3, #12]
   12616:	1d2e      	adds	r6, r5, #4
   12618:	4631      	mov	r1, r6
   1261a:	302d      	adds	r0, #45	; 0x2d
   1261c:	f001 fbee 	bl	13dfc <WStrReverseCpy>
   12620:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12622:	7d2a      	ldrb	r2, [r5, #20]
   12624:	68d8      	ldr	r0, [r3, #12]
   12626:	4631      	mov	r1, r6
   12628:	303d      	adds	r0, #61	; 0x3d
   1262a:	f001 fbe7 	bl	13dfc <WStrReverseCpy>
   1262e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12630:	2110      	movs	r1, #16
   12632:	68d8      	ldr	r0, [r3, #12]
   12634:	f009 fa88 	bl	1bb48 <SecRand>
   12638:	f7fd ffec 	bl	10614 <DmSecGetEccKey>
   1263c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1263e:	4606      	mov	r6, r0
   12640:	4620      	mov	r0, r4
   12642:	689f      	ldr	r7, [r3, #8]
   12644:	f7fe fd33 	bl	110ae <smpGetPkBit>
   12648:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1264a:	68db      	ldr	r3, [r3, #12]
   1264c:	4632      	mov	r2, r6
   1264e:	e9cd 0300 	strd	r0, r3, [sp]
   12652:	4629      	mov	r1, r5
   12654:	463b      	mov	r3, r7
   12656:	4620      	mov	r0, r4
   12658:	f7fe fc10 	bl	10e7c <SmpScCalcF4>
   1265c:	b003      	add	sp, #12
   1265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12660:	00025ba4 	.word	0x00025ba4

00012664 <smpiScActPkCalcCb>:
   12664:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12668:	4604      	mov	r4, r0
   1266a:	460d      	mov	r5, r1
   1266c:	68d8      	ldr	r0, [r3, #12]
   1266e:	6849      	ldr	r1, [r1, #4]
   12670:	2210      	movs	r2, #16
   12672:	3109      	adds	r1, #9
   12674:	4410      	add	r0, r2
   12676:	f001 fbc1 	bl	13dfc <WStrReverseCpy>
   1267a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1267c:	689e      	ldr	r6, [r3, #8]
   1267e:	f7fd ffc9 	bl	10614 <DmSecGetEccKey>
   12682:	4607      	mov	r7, r0
   12684:	4620      	mov	r0, r4
   12686:	f7fe fd12 	bl	110ae <smpGetPkBit>
   1268a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1268c:	68d9      	ldr	r1, [r3, #12]
   1268e:	3110      	adds	r1, #16
   12690:	e9cd 0100 	strd	r0, r1, [sp]
   12694:	463b      	mov	r3, r7
   12696:	4632      	mov	r2, r6
   12698:	4629      	mov	r1, r5
   1269a:	4620      	mov	r0, r4
   1269c:	f7fe fbee 	bl	10e7c <SmpScCalcF4>
   126a0:	b003      	add	sp, #12
   126a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000126a4 <smpiScActPkSendCnf>:
   126a4:	684a      	ldr	r2, [r1, #4]
   126a6:	f7fe bcda 	b.w	1105e <smpScSendPairCnf>

000126aa <smpiScActPkSendRand>:
   126aa:	f7ff bf59 	b.w	12560 <smpiScActJwncSendRand>

000126ae <smpiScActPkCheck>:
   126ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   126b0:	6b45      	ldr	r5, [r0, #52]	; 0x34
   126b2:	6849      	ldr	r1, [r1, #4]
   126b4:	4604      	mov	r4, r0
   126b6:	68e8      	ldr	r0, [r5, #12]
   126b8:	2210      	movs	r2, #16
   126ba:	3040      	adds	r0, #64	; 0x40
   126bc:	f7f9 fd20 	bl	c100 <memcmp>
   126c0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   126c4:	b158      	cbz	r0, 126de <smpiScActPkCheck+0x30>
   126c6:	f240 4303 	movw	r3, #1027	; 0x403
   126ca:	f8ad 2004 	strh.w	r2, [sp, #4]
   126ce:	f8ad 3006 	strh.w	r3, [sp, #6]
   126d2:	a901      	add	r1, sp, #4
   126d4:	4620      	mov	r0, r4
   126d6:	f7ff fce0 	bl	1209a <smpSmExecute>
   126da:	b003      	add	sp, #12
   126dc:	bd30      	pop	{r4, r5, pc}
   126de:	78eb      	ldrb	r3, [r5, #3]
   126e0:	3301      	adds	r3, #1
   126e2:	b2db      	uxtb	r3, r3
   126e4:	2b13      	cmp	r3, #19
   126e6:	70eb      	strb	r3, [r5, #3]
   126e8:	bf97      	itett	ls
   126ea:	2303      	movls	r3, #3
   126ec:	231a      	movhi	r3, #26
   126ee:	f884 302f 	strbls.w	r3, [r4, #47]	; 0x2f
   126f2:	2319      	movls	r3, #25
   126f4:	f88d 3006 	strb.w	r3, [sp, #6]
   126f8:	f8ad 2004 	strh.w	r2, [sp, #4]
   126fc:	e7e9      	b.n	126d2 <smpiScActPkCheck+0x24>

000126fe <smpiScActOobCalcCb>:
   126fe:	b530      	push	{r4, r5, lr}
   12700:	7c83      	ldrb	r3, [r0, #18]
   12702:	2b01      	cmp	r3, #1
   12704:	b085      	sub	sp, #20
   12706:	4604      	mov	r4, r0
   12708:	460d      	mov	r5, r1
   1270a:	d005      	beq.n	12718 <smpiScActOobCalcCb+0x1a>
   1270c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1270e:	4913      	ldr	r1, [pc, #76]	; (1275c <smpiScActOobCalcCb+0x5e>)
   12710:	68d8      	ldr	r0, [r3, #12]
   12712:	3020      	adds	r0, #32
   12714:	f001 fb0b 	bl	13d2e <Calc128Cpy>
   12718:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1271a:	7e62      	ldrb	r2, [r4, #25]
   1271c:	68d8      	ldr	r0, [r3, #12]
   1271e:	2a01      	cmp	r2, #1
   12720:	f100 0030 	add.w	r0, r0, #48	; 0x30
   12724:	d10a      	bne.n	1273c <smpiScActOobCalcCb+0x3e>
   12726:	689b      	ldr	r3, [r3, #8]
   12728:	9001      	str	r0, [sp, #4]
   1272a:	2200      	movs	r2, #0
   1272c:	9200      	str	r2, [sp, #0]
   1272e:	4629      	mov	r1, r5
   12730:	461a      	mov	r2, r3
   12732:	4620      	mov	r0, r4
   12734:	f7fe fba2 	bl	10e7c <SmpScCalcF4>
   12738:	b005      	add	sp, #20
   1273a:	bd30      	pop	{r4, r5, pc}
   1273c:	4907      	ldr	r1, [pc, #28]	; (1275c <smpiScActOobCalcCb+0x5e>)
   1273e:	f001 faf6 	bl	13d2e <Calc128Cpy>
   12742:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12746:	f8ad 300c 	strh.w	r3, [sp, #12]
   1274a:	a903      	add	r1, sp, #12
   1274c:	231b      	movs	r3, #27
   1274e:	4620      	mov	r0, r4
   12750:	f88d 300e 	strb.w	r3, [sp, #14]
   12754:	f7ff fca1 	bl	1209a <smpSmExecute>
   12758:	e7ee      	b.n	12738 <smpiScActOobCalcCb+0x3a>
   1275a:	bf00      	nop
   1275c:	00025ba4 	.word	0x00025ba4

00012760 <smpiScActOobSendRand>:
   12760:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12762:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12764:	68de      	ldr	r6, [r3, #12]
   12766:	7e43      	ldrb	r3, [r0, #25]
   12768:	2b01      	cmp	r3, #1
   1276a:	4604      	mov	r4, r0
   1276c:	460d      	mov	r5, r1
   1276e:	d114      	bne.n	1279a <smpiScActOobSendRand+0x3a>
   12770:	2210      	movs	r2, #16
   12772:	6849      	ldr	r1, [r1, #4]
   12774:	f106 0040 	add.w	r0, r6, #64	; 0x40
   12778:	f7f9 fcc2 	bl	c100 <memcmp>
   1277c:	b168      	cbz	r0, 1279a <smpiScActOobSendRand+0x3a>
   1277e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12782:	f8ad 3004 	strh.w	r3, [sp, #4]
   12786:	a901      	add	r1, sp, #4
   12788:	f240 4303 	movw	r3, #1027	; 0x403
   1278c:	4620      	mov	r0, r4
   1278e:	f8ad 3006 	strh.w	r3, [sp, #6]
   12792:	f7ff fc82 	bl	1209a <smpSmExecute>
   12796:	b002      	add	sp, #8
   12798:	bd70      	pop	{r4, r5, r6, pc}
   1279a:	2304      	movs	r3, #4
   1279c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   127a0:	4630      	mov	r0, r6
   127a2:	2110      	movs	r1, #16
   127a4:	f009 f9d0 	bl	1bb48 <SecRand>
   127a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   127aa:	4629      	mov	r1, r5
   127ac:	68da      	ldr	r2, [r3, #12]
   127ae:	4620      	mov	r0, r4
   127b0:	f7fe fc2d 	bl	1100e <smpScSendRand>
   127b4:	e7ef      	b.n	12796 <smpiScActOobSendRand+0x36>

000127b6 <smpiScActOobProcRand>:
   127b6:	b538      	push	{r3, r4, r5, lr}
   127b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   127ba:	4604      	mov	r4, r0
   127bc:	460d      	mov	r5, r1
   127be:	68d8      	ldr	r0, [r3, #12]
   127c0:	6849      	ldr	r1, [r1, #4]
   127c2:	2210      	movs	r2, #16
   127c4:	3109      	adds	r1, #9
   127c6:	4410      	add	r0, r2
   127c8:	f001 fb18 	bl	13dfc <WStrReverseCpy>
   127cc:	4629      	mov	r1, r5
   127ce:	4620      	mov	r0, r4
   127d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127d4:	f7fe bf7e 	b.w	116d4 <smpScActCalcSharedSecret>

000127d8 <smpiScActDHKeyCheckSend>:
   127d8:	b538      	push	{r3, r4, r5, lr}
   127da:	6b43      	ldr	r3, [r0, #52]	; 0x34
   127dc:	4604      	mov	r4, r0
   127de:	68d8      	ldr	r0, [r3, #12]
   127e0:	2210      	movs	r2, #16
   127e2:	460d      	mov	r5, r1
   127e4:	4410      	add	r0, r2
   127e6:	6849      	ldr	r1, [r1, #4]
   127e8:	f001 fb08 	bl	13dfc <WStrReverseCpy>
   127ec:	230d      	movs	r3, #13
   127ee:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   127f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   127f4:	4629      	mov	r1, r5
   127f6:	68da      	ldr	r2, [r3, #12]
   127f8:	4620      	mov	r0, r4
   127fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127fe:	f7fe bbde 	b.w	10fbe <smpScSendDHKeyCheck>

00012802 <smpiScActDHKeyCheckVerify>:
   12802:	b5f0      	push	{r4, r5, r6, r7, lr}
   12804:	6b47      	ldr	r7, [r0, #52]	; 0x34
   12806:	4604      	mov	r4, r0
   12808:	68fb      	ldr	r3, [r7, #12]
   1280a:	6848      	ldr	r0, [r1, #4]
   1280c:	2210      	movs	r2, #16
   1280e:	b085      	sub	sp, #20
   12810:	1899      	adds	r1, r3, r2
   12812:	3009      	adds	r0, #9
   12814:	f7f9 fc74 	bl	c100 <memcmp>
   12818:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   1281c:	4606      	mov	r6, r0
   1281e:	b9c0      	cbnz	r0, 12852 <smpiScActDHKeyCheckVerify+0x50>
   12820:	7ee3      	ldrb	r3, [r4, #27]
   12822:	7d24      	ldrb	r4, [r4, #20]
   12824:	6939      	ldr	r1, [r7, #16]
   12826:	429c      	cmp	r4, r3
   12828:	bf28      	it	cs
   1282a:	461c      	movcs	r4, r3
   1282c:	4622      	mov	r2, r4
   1282e:	3110      	adds	r1, #16
   12830:	4668      	mov	r0, sp
   12832:	f7f9 fc95 	bl	c160 <memcpy>
   12836:	f1c4 0210 	rsb	r2, r4, #16
   1283a:	4631      	mov	r1, r6
   1283c:	eb0d 0004 	add.w	r0, sp, r4
   12840:	f7f9 fd8c 	bl	c35c <memset>
   12844:	466a      	mov	r2, sp
   12846:	2103      	movs	r1, #3
   12848:	4628      	mov	r0, r5
   1284a:	f7ff f945 	bl	11ad8 <DmSmpEncryptReq>
   1284e:	b005      	add	sp, #20
   12850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12852:	f640 331c 	movw	r3, #2844	; 0xb1c
   12856:	4669      	mov	r1, sp
   12858:	4620      	mov	r0, r4
   1285a:	f8ad 5000 	strh.w	r5, [sp]
   1285e:	f8ad 3002 	strh.w	r3, [sp, #2]
   12862:	f7ff fc1a 	bl	1209a <smpSmExecute>
   12866:	e7f2      	b.n	1284e <smpiScActDHKeyCheckVerify+0x4c>

00012868 <smprActSendSecurityReq>:
   12868:	b538      	push	{r3, r4, r5, lr}
   1286a:	2301      	movs	r3, #1
   1286c:	4604      	mov	r4, r0
   1286e:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12872:	200a      	movs	r0, #10
   12874:	460d      	mov	r5, r1
   12876:	f7fe fa07 	bl	10c88 <smpMsgAlloc>
   1287a:	b148      	cbz	r0, 12890 <smprActSendSecurityReq+0x28>
   1287c:	230b      	movs	r3, #11
   1287e:	7203      	strb	r3, [r0, #8]
   12880:	792b      	ldrb	r3, [r5, #4]
   12882:	7243      	strb	r3, [r0, #9]
   12884:	4601      	mov	r1, r0
   12886:	4620      	mov	r0, r4
   12888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1288c:	f7fe b9b1 	b.w	10bf2 <smpSendPkt>
   12890:	bd38      	pop	{r3, r4, r5, pc}

00012892 <smprActCheckSecurityReq>:
   12892:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   12896:	b10b      	cbz	r3, 1289c <smprActCheckSecurityReq+0xa>
   12898:	f7ff ba1f 	b.w	11cda <smpActPairingFailed>
   1289c:	4770      	bx	lr

0001289e <smprActClearSecurityReq>:
   1289e:	2300      	movs	r3, #0
   128a0:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   128a4:	4770      	bx	lr

000128a6 <smprActProcPairReq>:
   128a6:	6a03      	ldr	r3, [r0, #32]
   128a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   128aa:	4604      	mov	r4, r0
   128ac:	460d      	mov	r5, r1
   128ae:	b96b      	cbnz	r3, 128cc <smprActProcPairReq+0x26>
   128b0:	2040      	movs	r0, #64	; 0x40
   128b2:	f001 fe0f 	bl	144d4 <WsfBufAlloc>
   128b6:	6220      	str	r0, [r4, #32]
   128b8:	b940      	cbnz	r0, 128cc <smprActProcPairReq+0x26>
   128ba:	f640 0303 	movw	r3, #2051	; 0x803
   128be:	806b      	strh	r3, [r5, #2]
   128c0:	4629      	mov	r1, r5
   128c2:	4620      	mov	r0, r4
   128c4:	f7ff fbe9 	bl	1209a <smpSmExecute>
   128c8:	b003      	add	sp, #12
   128ca:	bd30      	pop	{r4, r5, pc}
   128cc:	2201      	movs	r2, #1
   128ce:	4611      	mov	r1, r2
   128d0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   128d4:	f7fd f820 	bl	f918 <DmConnSetIdle>
   128d8:	686b      	ldr	r3, [r5, #4]
   128da:	461a      	mov	r2, r3
   128dc:	f852 0f08 	ldr.w	r0, [r2, #8]!
   128e0:	6120      	str	r0, [r4, #16]
   128e2:	8890      	ldrh	r0, [r2, #4]
   128e4:	82a0      	strh	r0, [r4, #20]
   128e6:	7992      	ldrb	r2, [r2, #6]
   128e8:	75a2      	strb	r2, [r4, #22]
   128ea:	7a9a      	ldrb	r2, [r3, #10]
   128ec:	f88d 2005 	strb.w	r2, [sp, #5]
   128f0:	7ada      	ldrb	r2, [r3, #11]
   128f2:	f88d 2004 	strb.w	r2, [sp, #4]
   128f6:	7b5a      	ldrb	r2, [r3, #13]
   128f8:	7b9b      	ldrb	r3, [r3, #14]
   128fa:	f88d 3007 	strb.w	r3, [sp, #7]
   128fe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12902:	f8ad 3000 	strh.w	r3, [sp]
   12906:	4668      	mov	r0, sp
   12908:	2331      	movs	r3, #49	; 0x31
   1290a:	f88d 2006 	strb.w	r2, [sp, #6]
   1290e:	f88d 3002 	strb.w	r3, [sp, #2]
   12912:	f7fd fccb 	bl	102ac <DmSmpCbackExec>
   12916:	e7d7      	b.n	128c8 <smprActProcPairReq+0x22>

00012918 <smprActSendPairRsp>:
   12918:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1291a:	2302      	movs	r3, #2
   1291c:	75c3      	strb	r3, [r0, #23]
   1291e:	4b20      	ldr	r3, [pc, #128]	; (129a0 <smprActSendPairRsp+0x88>)
   12920:	4e20      	ldr	r6, [pc, #128]	; (129a4 <smprActSendPairRsp+0x8c>)
   12922:	681b      	ldr	r3, [r3, #0]
   12924:	789a      	ldrb	r2, [r3, #2]
   12926:	7602      	strb	r2, [r0, #24]
   12928:	790a      	ldrb	r2, [r1, #4]
   1292a:	7642      	strb	r2, [r0, #25]
   1292c:	794a      	ldrb	r2, [r1, #5]
   1292e:	7682      	strb	r2, [r0, #26]
   12930:	791b      	ldrb	r3, [r3, #4]
   12932:	76c3      	strb	r3, [r0, #27]
   12934:	798b      	ldrb	r3, [r1, #6]
   12936:	7703      	strb	r3, [r0, #28]
   12938:	79cb      	ldrb	r3, [r1, #7]
   1293a:	7743      	strb	r3, [r0, #29]
   1293c:	460d      	mov	r5, r1
   1293e:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
   12942:	f10d 0207 	add.w	r2, sp, #7
   12946:	f10d 0106 	add.w	r1, sp, #6
   1294a:	4604      	mov	r4, r0
   1294c:	4798      	blx	r3
   1294e:	b320      	cbz	r0, 1299a <smprActSendPairRsp+0x82>
   12950:	796b      	ldrb	r3, [r5, #5]
   12952:	7ce2      	ldrb	r2, [r4, #19]
   12954:	f003 0308 	and.w	r3, r3, #8
   12958:	4213      	tst	r3, r2
   1295a:	bf14      	ite	ne
   1295c:	230c      	movne	r3, #12
   1295e:	2303      	moveq	r3, #3
   12960:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12964:	4620      	mov	r0, r4
   12966:	f7ff f985 	bl	11c74 <smpStartRspTimer>
   1296a:	200f      	movs	r0, #15
   1296c:	f7fe f98c 	bl	10c88 <smpMsgAlloc>
   12970:	4601      	mov	r1, r0
   12972:	b150      	cbz	r0, 1298a <smprActSendPairRsp+0x72>
   12974:	4623      	mov	r3, r4
   12976:	f853 0f17 	ldr.w	r0, [r3, #23]!
   1297a:	6088      	str	r0, [r1, #8]
   1297c:	8898      	ldrh	r0, [r3, #4]
   1297e:	8188      	strh	r0, [r1, #12]
   12980:	799b      	ldrb	r3, [r3, #6]
   12982:	738b      	strb	r3, [r1, #14]
   12984:	4620      	mov	r0, r4
   12986:	f7fe f934 	bl	10bf2 <smpSendPkt>
   1298a:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
   1298e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12992:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12996:	4620      	mov	r0, r4
   12998:	4798      	blx	r3
   1299a:	b002      	add	sp, #8
   1299c:	bd70      	pop	{r4, r5, r6, pc}
   1299e:	bf00      	nop
   129a0:	10002bd4 	.word	0x10002bd4
   129a4:	100040c0 	.word	0x100040c0

000129a8 <smprActProcPairCnf>:
   129a8:	b510      	push	{r4, lr}
   129aa:	684b      	ldr	r3, [r1, #4]
   129ac:	6a02      	ldr	r2, [r0, #32]
   129ae:	f103 0109 	add.w	r1, r3, #9
   129b2:	3220      	adds	r2, #32
   129b4:	3319      	adds	r3, #25
   129b6:	f851 4b04 	ldr.w	r4, [r1], #4
   129ba:	f842 4b04 	str.w	r4, [r2], #4
   129be:	4299      	cmp	r1, r3
   129c0:	d1f9      	bne.n	129b6 <smprActProcPairCnf+0xe>
   129c2:	2300      	movs	r3, #0
   129c4:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   129c8:	bd10      	pop	{r4, pc}

000129ca <smprActProcPairCnfCalc1>:
   129ca:	b510      	push	{r4, lr}
   129cc:	4604      	mov	r4, r0
   129ce:	f7ff ffeb 	bl	129a8 <smprActProcPairCnf>
   129d2:	6a00      	ldr	r0, [r0, #32]
   129d4:	2110      	movs	r1, #16
   129d6:	3030      	adds	r0, #48	; 0x30
   129d8:	f009 f8b6 	bl	1bb48 <SecRand>
   129dc:	6a21      	ldr	r1, [r4, #32]
   129de:	4620      	mov	r0, r4
   129e0:	f101 0230 	add.w	r2, r1, #48	; 0x30
   129e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   129e8:	f7fd bfaa 	b.w	10940 <smpCalcC1Part1>

000129ec <smprActCnfVerify>:
   129ec:	b570      	push	{r4, r5, r6, lr}
   129ee:	460e      	mov	r6, r1
   129f0:	6a05      	ldr	r5, [r0, #32]
   129f2:	4604      	mov	r4, r0
   129f4:	2210      	movs	r2, #16
   129f6:	f105 0120 	add.w	r1, r5, #32
   129fa:	6870      	ldr	r0, [r6, #4]
   129fc:	f7f9 fb80 	bl	c100 <memcmp>
   12a00:	b1a8      	cbz	r0, 12a2e <smprActCnfVerify+0x42>
   12a02:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   12a06:	4a0f      	ldr	r2, [pc, #60]	; (12a44 <smprActCnfVerify+0x58>)
   12a08:	3301      	adds	r3, #1
   12a0a:	b2db      	uxtb	r3, r3
   12a0c:	6812      	ldr	r2, [r2, #0]
   12a0e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   12a12:	7952      	ldrb	r2, [r2, #5]
   12a14:	429a      	cmp	r2, r3
   12a16:	bf0c      	ite	eq
   12a18:	f240 430d 	movweq	r3, #1037	; 0x40d
   12a1c:	f240 4303 	movwne	r3, #1027	; 0x403
   12a20:	8073      	strh	r3, [r6, #2]
   12a22:	4631      	mov	r1, r6
   12a24:	4620      	mov	r0, r4
   12a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12a2a:	f7ff bb36 	b.w	1209a <smpSmExecute>
   12a2e:	f105 0310 	add.w	r3, r5, #16
   12a32:	f105 0230 	add.w	r2, r5, #48	; 0x30
   12a36:	4629      	mov	r1, r5
   12a38:	4620      	mov	r0, r4
   12a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12a3e:	f7fe b881 	b.w	10b44 <smpCalcS1>
   12a42:	bf00      	nop
   12a44:	10002bd4 	.word	0x10002bd4

00012a48 <smprActSendPairRandom>:
   12a48:	b538      	push	{r3, r4, r5, lr}
   12a4a:	7ec5      	ldrb	r5, [r0, #27]
   12a4c:	7d03      	ldrb	r3, [r0, #20]
   12a4e:	6849      	ldr	r1, [r1, #4]
   12a50:	429d      	cmp	r5, r3
   12a52:	4604      	mov	r4, r0
   12a54:	6a00      	ldr	r0, [r0, #32]
   12a56:	bf28      	it	cs
   12a58:	461d      	movcs	r5, r3
   12a5a:	462a      	mov	r2, r5
   12a5c:	3020      	adds	r0, #32
   12a5e:	f7f9 fb7f 	bl	c160 <memcpy>
   12a62:	6a20      	ldr	r0, [r4, #32]
   12a64:	3020      	adds	r0, #32
   12a66:	2100      	movs	r1, #0
   12a68:	f1c5 0210 	rsb	r2, r5, #16
   12a6c:	4428      	add	r0, r5
   12a6e:	f7f9 fc75 	bl	c35c <memset>
   12a72:	4620      	mov	r0, r4
   12a74:	f7ff f8fe 	bl	11c74 <smpStartRspTimer>
   12a78:	2019      	movs	r0, #25
   12a7a:	f7fe f905 	bl	10c88 <smpMsgAlloc>
   12a7e:	4601      	mov	r1, r0
   12a80:	b188      	cbz	r0, 12aa6 <smprActSendPairRandom+0x5e>
   12a82:	2304      	movs	r3, #4
   12a84:	7203      	strb	r3, [r0, #8]
   12a86:	6a23      	ldr	r3, [r4, #32]
   12a88:	3009      	adds	r0, #9
   12a8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12a8e:	3340      	adds	r3, #64	; 0x40
   12a90:	f852 5b04 	ldr.w	r5, [r2], #4
   12a94:	f840 5b04 	str.w	r5, [r0], #4
   12a98:	429a      	cmp	r2, r3
   12a9a:	d1f9      	bne.n	12a90 <smprActSendPairRandom+0x48>
   12a9c:	4620      	mov	r0, r4
   12a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12aa2:	f7fe b8a6 	b.w	10bf2 <smpSendPkt>
   12aa6:	bd38      	pop	{r3, r4, r5, pc}

00012aa8 <smprActSendKey>:
   12aa8:	b538      	push	{r3, r4, r5, lr}
   12aaa:	460d      	mov	r5, r1
   12aac:	7f43      	ldrb	r3, [r0, #29]
   12aae:	7d81      	ldrb	r1, [r0, #22]
   12ab0:	4019      	ands	r1, r3
   12ab2:	4604      	mov	r4, r0
   12ab4:	f7ff f993 	bl	11dde <smpSendKey>
   12ab8:	b330      	cbz	r0, 12b08 <smprActSendKey+0x60>
   12aba:	2300      	movs	r3, #0
   12abc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ac0:	7f22      	ldrb	r2, [r4, #28]
   12ac2:	7d63      	ldrb	r3, [r4, #21]
   12ac4:	4013      	ands	r3, r2
   12ac6:	07d8      	lsls	r0, r3, #31
   12ac8:	d518      	bpl.n	12afc <smprActSendKey+0x54>
   12aca:	4a10      	ldr	r2, [pc, #64]	; (12b0c <smprActSendKey+0x64>)
   12acc:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   12ad0:	b192      	cbz	r2, 12af8 <smprActSendKey+0x50>
   12ad2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12ad4:	7812      	ldrb	r2, [r2, #0]
   12ad6:	b17a      	cbz	r2, 12af8 <smprActSendKey+0x50>
   12ad8:	0799      	lsls	r1, r3, #30
   12ada:	d502      	bpl.n	12ae2 <smprActSendKey+0x3a>
   12adc:	2308      	movs	r3, #8
   12ade:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ae2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   12ae6:	b97b      	cbnz	r3, 12b08 <smprActSendKey+0x60>
   12ae8:	230e      	movs	r3, #14
   12aea:	70ab      	strb	r3, [r5, #2]
   12aec:	4629      	mov	r1, r5
   12aee:	4620      	mov	r0, r4
   12af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12af4:	f7ff bad1 	b.w	1209a <smpSmExecute>
   12af8:	2306      	movs	r3, #6
   12afa:	e7f0      	b.n	12ade <smprActSendKey+0x36>
   12afc:	079a      	lsls	r2, r3, #30
   12afe:	d4ed      	bmi.n	12adc <smprActSendKey+0x34>
   12b00:	075b      	lsls	r3, r3, #29
   12b02:	d5ee      	bpl.n	12ae2 <smprActSendKey+0x3a>
   12b04:	230a      	movs	r3, #10
   12b06:	e7ea      	b.n	12ade <smprActSendKey+0x36>
   12b08:	bd38      	pop	{r3, r4, r5, pc}
   12b0a:	bf00      	nop
   12b0c:	100040c0 	.word	0x100040c0

00012b10 <smprActSetupKeyDist>:
   12b10:	b538      	push	{r3, r4, r5, lr}
   12b12:	4604      	mov	r4, r0
   12b14:	2300      	movs	r3, #0
   12b16:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12b1a:	460d      	mov	r5, r1
   12b1c:	f7ff f8aa 	bl	11c74 <smpStartRspTimer>
   12b20:	6a23      	ldr	r3, [r4, #32]
   12b22:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12b26:	801a      	strh	r2, [r3, #0]
   12b28:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   12b2c:	f012 0f04 	tst.w	r2, #4
   12b30:	bf14      	ite	ne
   12b32:	2202      	movne	r2, #2
   12b34:	2201      	moveq	r2, #1
   12b36:	77da      	strb	r2, [r3, #31]
   12b38:	7d21      	ldrb	r1, [r4, #20]
   12b3a:	7ee2      	ldrb	r2, [r4, #27]
   12b3c:	428a      	cmp	r2, r1
   12b3e:	bf28      	it	cs
   12b40:	460a      	movcs	r2, r1
   12b42:	f883 2020 	strb.w	r2, [r3, #32]
   12b46:	4629      	mov	r1, r5
   12b48:	4620      	mov	r0, r4
   12b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b4e:	f7ff bfab 	b.w	12aa8 <smprActSendKey>

00012b52 <smprActRcvKey>:
   12b52:	b538      	push	{r3, r4, r5, lr}
   12b54:	7d42      	ldrb	r2, [r0, #21]
   12b56:	7f03      	ldrb	r3, [r0, #28]
   12b58:	460d      	mov	r5, r1
   12b5a:	4013      	ands	r3, r2
   12b5c:	684a      	ldr	r2, [r1, #4]
   12b5e:	6a01      	ldr	r1, [r0, #32]
   12b60:	4604      	mov	r4, r0
   12b62:	f7ff f9fb 	bl	11f5c <smpProcRcvKey>
   12b66:	b138      	cbz	r0, 12b78 <smprActRcvKey+0x26>
   12b68:	230e      	movs	r3, #14
   12b6a:	70ab      	strb	r3, [r5, #2]
   12b6c:	4629      	mov	r1, r5
   12b6e:	4620      	mov	r0, r4
   12b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b74:	f7ff ba91 	b.w	1209a <smpSmExecute>
   12b78:	bd38      	pop	{r3, r4, r5, pc}
   12b7a:	bf00      	nop

00012b7c <smprScActStoreLescPin>:
   12b7c:	b570      	push	{r4, r5, r6, lr}
   12b7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b80:	785a      	ldrb	r2, [r3, #1]
   12b82:	2a03      	cmp	r2, #3
   12b84:	4604      	mov	r4, r0
   12b86:	460d      	mov	r5, r1
   12b88:	d11d      	bne.n	12bc6 <smprScActStoreLescPin+0x4a>
   12b8a:	68d8      	ldr	r0, [r3, #12]
   12b8c:	490e      	ldr	r1, [pc, #56]	; (12bc8 <smprScActStoreLescPin+0x4c>)
   12b8e:	3020      	adds	r0, #32
   12b90:	f001 f8cd 	bl	13d2e <Calc128Cpy>
   12b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b96:	490c      	ldr	r1, [pc, #48]	; (12bc8 <smprScActStoreLescPin+0x4c>)
   12b98:	68d8      	ldr	r0, [r3, #12]
   12b9a:	3030      	adds	r0, #48	; 0x30
   12b9c:	f001 f8c7 	bl	13d2e <Calc128Cpy>
   12ba0:	7d2a      	ldrb	r2, [r5, #20]
   12ba2:	2a03      	cmp	r2, #3
   12ba4:	d80f      	bhi.n	12bc6 <smprScActStoreLescPin+0x4a>
   12ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12ba8:	68d8      	ldr	r0, [r3, #12]
   12baa:	1d2e      	adds	r6, r5, #4
   12bac:	4631      	mov	r1, r6
   12bae:	302d      	adds	r0, #45	; 0x2d
   12bb0:	f001 f924 	bl	13dfc <WStrReverseCpy>
   12bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bb6:	7d2a      	ldrb	r2, [r5, #20]
   12bb8:	68d8      	ldr	r0, [r3, #12]
   12bba:	4631      	mov	r1, r6
   12bbc:	303d      	adds	r0, #61	; 0x3d
   12bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12bc2:	f001 b91b 	b.w	13dfc <WStrReverseCpy>
   12bc6:	bd70      	pop	{r4, r5, r6, pc}
   12bc8:	00025ba4 	.word	0x00025ba4

00012bcc <smprScActSendPubKey>:
   12bcc:	b538      	push	{r3, r4, r5, lr}
   12bce:	4604      	mov	r4, r0
   12bd0:	460d      	mov	r5, r1
   12bd2:	f7fe fc82 	bl	114da <smpScActAuthSelect>
   12bd6:	4629      	mov	r1, r5
   12bd8:	4620      	mov	r0, r4
   12bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12bde:	f7fe b9bc 	b.w	10f5a <smpScSendPubKey>

00012be2 <smprScActJwncSetup>:
   12be2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12be4:	b570      	push	{r4, r5, r6, lr}
   12be6:	4604      	mov	r4, r0
   12be8:	68d8      	ldr	r0, [r3, #12]
   12bea:	4d0d      	ldr	r5, [pc, #52]	; (12c20 <smprScActJwncSetup+0x3e>)
   12bec:	460e      	mov	r6, r1
   12bee:	2110      	movs	r1, #16
   12bf0:	4408      	add	r0, r1
   12bf2:	f008 ffa9 	bl	1bb48 <SecRand>
   12bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bf8:	68d8      	ldr	r0, [r3, #12]
   12bfa:	4629      	mov	r1, r5
   12bfc:	3020      	adds	r0, #32
   12bfe:	f001 f896 	bl	13d2e <Calc128Cpy>
   12c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c04:	68d8      	ldr	r0, [r3, #12]
   12c06:	4629      	mov	r1, r5
   12c08:	3030      	adds	r0, #48	; 0x30
   12c0a:	f001 f890 	bl	13d2e <Calc128Cpy>
   12c0e:	2304      	movs	r3, #4
   12c10:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12c14:	4631      	mov	r1, r6
   12c16:	4620      	mov	r0, r4
   12c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12c1c:	f7fe bca7 	b.w	1156e <smpScActJwncCalcF4>
   12c20:	00025ba4 	.word	0x00025ba4

00012c24 <smprScActJwncSendCnf>:
   12c24:	684a      	ldr	r2, [r1, #4]
   12c26:	f7fe ba1a 	b.w	1105e <smpScSendPairCnf>

00012c2a <smprScActJwncCalcG2>:
   12c2a:	b538      	push	{r3, r4, r5, lr}
   12c2c:	460d      	mov	r5, r1
   12c2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c30:	6849      	ldr	r1, [r1, #4]
   12c32:	4604      	mov	r4, r0
   12c34:	3109      	adds	r1, #9
   12c36:	68d8      	ldr	r0, [r3, #12]
   12c38:	2210      	movs	r2, #16
   12c3a:	f001 f8df 	bl	13dfc <WStrReverseCpy>
   12c3e:	4629      	mov	r1, r5
   12c40:	4620      	mov	r0, r4
   12c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12c46:	f7fe bcb4 	b.w	115b2 <smpScActJwncCalcG2>

00012c4a <smprScActPkStoreCnf>:
   12c4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c4c:	6849      	ldr	r1, [r1, #4]
   12c4e:	68d8      	ldr	r0, [r3, #12]
   12c50:	2210      	movs	r2, #16
   12c52:	3109      	adds	r1, #9
   12c54:	3050      	adds	r0, #80	; 0x50
   12c56:	f001 b8d1 	b.w	13dfc <WStrReverseCpy>

00012c5a <smprScActPkCalcCb>:
   12c5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12c5e:	4604      	mov	r4, r0
   12c60:	68d8      	ldr	r0, [r3, #12]
   12c62:	460d      	mov	r5, r1
   12c64:	2110      	movs	r1, #16
   12c66:	4408      	add	r0, r1
   12c68:	f008 ff6e 	bl	1bb48 <SecRand>
   12c6c:	2304      	movs	r3, #4
   12c6e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12c72:	f7fd fccf 	bl	10614 <DmSecGetEccKey>
   12c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c78:	4606      	mov	r6, r0
   12c7a:	4620      	mov	r0, r4
   12c7c:	689f      	ldr	r7, [r3, #8]
   12c7e:	f7fe fa16 	bl	110ae <smpGetPkBit>
   12c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c84:	68d9      	ldr	r1, [r3, #12]
   12c86:	3110      	adds	r1, #16
   12c88:	e9cd 0100 	strd	r0, r1, [sp]
   12c8c:	463b      	mov	r3, r7
   12c8e:	4632      	mov	r2, r6
   12c90:	4629      	mov	r1, r5
   12c92:	4620      	mov	r0, r4
   12c94:	f7fe f8f2 	bl	10e7c <SmpScCalcF4>
   12c98:	b003      	add	sp, #12
   12c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012c9c <smprScActPkStoreCnfAndCalcCb>:
   12c9c:	b538      	push	{r3, r4, r5, lr}
   12c9e:	4604      	mov	r4, r0
   12ca0:	460d      	mov	r5, r1
   12ca2:	f7ff ffd2 	bl	12c4a <smprScActPkStoreCnf>
   12ca6:	4629      	mov	r1, r5
   12ca8:	4620      	mov	r0, r4
   12caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12cae:	f7ff bfd4 	b.w	12c5a <smprScActPkCalcCb>

00012cb2 <smprScActPkStorePinAndCalcCb>:
   12cb2:	b538      	push	{r3, r4, r5, lr}
   12cb4:	4604      	mov	r4, r0
   12cb6:	460d      	mov	r5, r1
   12cb8:	f7ff ff60 	bl	12b7c <smprScActStoreLescPin>
   12cbc:	4629      	mov	r1, r5
   12cbe:	4620      	mov	r0, r4
   12cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12cc4:	f7ff bfc9 	b.w	12c5a <smprScActPkCalcCb>

00012cc8 <smprScActPkSendCnf>:
   12cc8:	f7ff bfac 	b.w	12c24 <smprScActJwncSendCnf>

00012ccc <smprScActPkCalcCa>:
   12ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12cce:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12cd0:	460d      	mov	r5, r1
   12cd2:	6849      	ldr	r1, [r1, #4]
   12cd4:	4604      	mov	r4, r0
   12cd6:	2210      	movs	r2, #16
   12cd8:	3109      	adds	r1, #9
   12cda:	68d8      	ldr	r0, [r3, #12]
   12cdc:	f001 f88e 	bl	13dfc <WStrReverseCpy>
   12ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12ce2:	689e      	ldr	r6, [r3, #8]
   12ce4:	f7fd fc96 	bl	10614 <DmSecGetEccKey>
   12ce8:	4607      	mov	r7, r0
   12cea:	4620      	mov	r0, r4
   12cec:	f7fe f9df 	bl	110ae <smpGetPkBit>
   12cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12cf2:	68db      	ldr	r3, [r3, #12]
   12cf4:	4632      	mov	r2, r6
   12cf6:	e9cd 0300 	strd	r0, r3, [sp]
   12cfa:	4629      	mov	r1, r5
   12cfc:	463b      	mov	r3, r7
   12cfe:	4620      	mov	r0, r4
   12d00:	f7fe f8bc 	bl	10e7c <SmpScCalcF4>
   12d04:	b003      	add	sp, #12
   12d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012d08 <smprScActPkSendRand>:
   12d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12d0a:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12d0c:	68ef      	ldr	r7, [r5, #12]
   12d0e:	4604      	mov	r4, r0
   12d10:	460e      	mov	r6, r1
   12d12:	2210      	movs	r2, #16
   12d14:	6849      	ldr	r1, [r1, #4]
   12d16:	f107 0050 	add.w	r0, r7, #80	; 0x50
   12d1a:	f7f9 f9f1 	bl	c100 <memcmp>
   12d1e:	b168      	cbz	r0, 12d3c <smprScActPkSendRand+0x34>
   12d20:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12d24:	f8ad 3004 	strh.w	r3, [sp, #4]
   12d28:	f240 4303 	movw	r3, #1027	; 0x403
   12d2c:	f8ad 3006 	strh.w	r3, [sp, #6]
   12d30:	a901      	add	r1, sp, #4
   12d32:	4620      	mov	r0, r4
   12d34:	f7ff f9b1 	bl	1209a <smpSmExecute>
   12d38:	b003      	add	sp, #12
   12d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d3c:	78eb      	ldrb	r3, [r5, #3]
   12d3e:	3301      	adds	r3, #1
   12d40:	b2db      	uxtb	r3, r3
   12d42:	2b13      	cmp	r3, #19
   12d44:	70eb      	strb	r3, [r5, #3]
   12d46:	d907      	bls.n	12d58 <smprScActPkSendRand+0x50>
   12d48:	231a      	movs	r3, #26
   12d4a:	f88d 3006 	strb.w	r3, [sp, #6]
   12d4e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12d52:	f8ad 3004 	strh.w	r3, [sp, #4]
   12d56:	e7eb      	b.n	12d30 <smprScActPkSendRand+0x28>
   12d58:	2303      	movs	r3, #3
   12d5a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12d5e:	f107 0210 	add.w	r2, r7, #16
   12d62:	2319      	movs	r3, #25
   12d64:	4631      	mov	r1, r6
   12d66:	4620      	mov	r0, r4
   12d68:	f88d 3006 	strb.w	r3, [sp, #6]
   12d6c:	f7fe f94f 	bl	1100e <smpScSendRand>
   12d70:	e7ed      	b.n	12d4e <smprScActPkSendRand+0x46>

00012d72 <smprScActOobSetup>:
   12d72:	2304      	movs	r3, #4
   12d74:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12d78:	4770      	bx	lr

00012d7a <smprScActOobCalcCa>:
   12d7a:	b530      	push	{r4, r5, lr}
   12d7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12d7e:	460d      	mov	r5, r1
   12d80:	6849      	ldr	r1, [r1, #4]
   12d82:	4604      	mov	r4, r0
   12d84:	b085      	sub	sp, #20
   12d86:	68d8      	ldr	r0, [r3, #12]
   12d88:	2210      	movs	r2, #16
   12d8a:	3109      	adds	r1, #9
   12d8c:	f001 f836 	bl	13dfc <WStrReverseCpy>
   12d90:	7e63      	ldrb	r3, [r4, #25]
   12d92:	2b01      	cmp	r3, #1
   12d94:	d005      	beq.n	12da2 <smprScActOobCalcCa+0x28>
   12d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12d98:	4912      	ldr	r1, [pc, #72]	; (12de4 <smprScActOobCalcCa+0x6a>)
   12d9a:	68d8      	ldr	r0, [r3, #12]
   12d9c:	3030      	adds	r0, #48	; 0x30
   12d9e:	f000 ffc6 	bl	13d2e <Calc128Cpy>
   12da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12da4:	7ca2      	ldrb	r2, [r4, #18]
   12da6:	68d8      	ldr	r0, [r3, #12]
   12da8:	2a01      	cmp	r2, #1
   12daa:	f100 0020 	add.w	r0, r0, #32
   12dae:	d10a      	bne.n	12dc6 <smprScActOobCalcCa+0x4c>
   12db0:	689b      	ldr	r3, [r3, #8]
   12db2:	9001      	str	r0, [sp, #4]
   12db4:	2200      	movs	r2, #0
   12db6:	9200      	str	r2, [sp, #0]
   12db8:	4629      	mov	r1, r5
   12dba:	461a      	mov	r2, r3
   12dbc:	4620      	mov	r0, r4
   12dbe:	f7fe f85d 	bl	10e7c <SmpScCalcF4>
   12dc2:	b005      	add	sp, #20
   12dc4:	bd30      	pop	{r4, r5, pc}
   12dc6:	4907      	ldr	r1, [pc, #28]	; (12de4 <smprScActOobCalcCa+0x6a>)
   12dc8:	f000 ffb1 	bl	13d2e <Calc128Cpy>
   12dcc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12dd0:	f8ad 300c 	strh.w	r3, [sp, #12]
   12dd4:	a903      	add	r1, sp, #12
   12dd6:	231b      	movs	r3, #27
   12dd8:	4620      	mov	r0, r4
   12dda:	f88d 300e 	strb.w	r3, [sp, #14]
   12dde:	f7ff f95c 	bl	1209a <smpSmExecute>
   12de2:	e7ee      	b.n	12dc2 <smprScActOobCalcCa+0x48>
   12de4:	00025ba4 	.word	0x00025ba4

00012de8 <smprScActOobSendRand>:
   12de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12dea:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12dec:	68de      	ldr	r6, [r3, #12]
   12dee:	7c83      	ldrb	r3, [r0, #18]
   12df0:	2b01      	cmp	r3, #1
   12df2:	4604      	mov	r4, r0
   12df4:	460d      	mov	r5, r1
   12df6:	d114      	bne.n	12e22 <smprScActOobSendRand+0x3a>
   12df8:	2210      	movs	r2, #16
   12dfa:	6849      	ldr	r1, [r1, #4]
   12dfc:	f106 0050 	add.w	r0, r6, #80	; 0x50
   12e00:	f7f9 f97e 	bl	c100 <memcmp>
   12e04:	b168      	cbz	r0, 12e22 <smprScActOobSendRand+0x3a>
   12e06:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12e0a:	f8ad 3004 	strh.w	r3, [sp, #4]
   12e0e:	a901      	add	r1, sp, #4
   12e10:	f240 4303 	movw	r3, #1027	; 0x403
   12e14:	4620      	mov	r0, r4
   12e16:	f8ad 3006 	strh.w	r3, [sp, #6]
   12e1a:	f7ff f93e 	bl	1209a <smpSmExecute>
   12e1e:	b002      	add	sp, #8
   12e20:	bd70      	pop	{r4, r5, r6, pc}
   12e22:	230d      	movs	r3, #13
   12e24:	2110      	movs	r1, #16
   12e26:	1870      	adds	r0, r6, r1
   12e28:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12e2c:	f008 fe8c 	bl	1bb48 <SecRand>
   12e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12e32:	68da      	ldr	r2, [r3, #12]
   12e34:	4629      	mov	r1, r5
   12e36:	3210      	adds	r2, #16
   12e38:	4620      	mov	r0, r4
   12e3a:	f7fe f8e8 	bl	1100e <smpScSendRand>
   12e3e:	e7ee      	b.n	12e1e <smprScActOobSendRand+0x36>

00012e40 <smprScActWaitDhCheck>:
   12e40:	220d      	movs	r2, #13
   12e42:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12e44:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
   12e48:	785a      	ldrb	r2, [r3, #1]
   12e4a:	2a02      	cmp	r2, #2
   12e4c:	d003      	beq.n	12e56 <smprScActWaitDhCheck+0x16>
   12e4e:	68da      	ldr	r2, [r3, #12]
   12e50:	3210      	adds	r2, #16
   12e52:	f7fe b8dc 	b.w	1100e <smpScSendRand>
   12e56:	4770      	bx	lr

00012e58 <smprScActCalcDHKey>:
   12e58:	b538      	push	{r3, r4, r5, lr}
   12e5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12e5c:	4604      	mov	r4, r0
   12e5e:	460d      	mov	r5, r1
   12e60:	68d8      	ldr	r0, [r3, #12]
   12e62:	6849      	ldr	r1, [r1, #4]
   12e64:	3050      	adds	r0, #80	; 0x50
   12e66:	3109      	adds	r1, #9
   12e68:	2210      	movs	r2, #16
   12e6a:	f000 ffc7 	bl	13dfc <WStrReverseCpy>
   12e6e:	4629      	mov	r1, r5
   12e70:	4620      	mov	r0, r4
   12e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e76:	f7fe bc2d 	b.w	116d4 <smpScActCalcSharedSecret>

00012e7a <smprScActDHKeyCheckSend>:
   12e7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12e7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12e7e:	4604      	mov	r4, r0
   12e80:	68d8      	ldr	r0, [r3, #12]
   12e82:	460e      	mov	r6, r1
   12e84:	3010      	adds	r0, #16
   12e86:	6849      	ldr	r1, [r1, #4]
   12e88:	f000 ff51 	bl	13d2e <Calc128Cpy>
   12e8c:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12e8e:	68e9      	ldr	r1, [r5, #12]
   12e90:	2210      	movs	r2, #16
   12e92:	f101 0050 	add.w	r0, r1, #80	; 0x50
   12e96:	f7f9 f933 	bl	c100 <memcmp>
   12e9a:	4601      	mov	r1, r0
   12e9c:	b9a0      	cbnz	r0, 12ec8 <smprScActDHKeyCheckSend+0x4e>
   12e9e:	7d20      	ldrb	r0, [r4, #20]
   12ea0:	7ee3      	ldrb	r3, [r4, #27]
   12ea2:	692d      	ldr	r5, [r5, #16]
   12ea4:	4298      	cmp	r0, r3
   12ea6:	bf28      	it	cs
   12ea8:	4618      	movcs	r0, r3
   12eaa:	3510      	adds	r5, #16
   12eac:	f1c0 0210 	rsb	r2, r0, #16
   12eb0:	4428      	add	r0, r5
   12eb2:	f7f9 fa53 	bl	c35c <memset>
   12eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12eb8:	68da      	ldr	r2, [r3, #12]
   12eba:	4631      	mov	r1, r6
   12ebc:	3210      	adds	r2, #16
   12ebe:	4620      	mov	r0, r4
   12ec0:	f7fe f87d 	bl	10fbe <smpScSendDHKeyCheck>
   12ec4:	b002      	add	sp, #8
   12ec6:	bd70      	pop	{r4, r5, r6, pc}
   12ec8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12ecc:	f8ad 3004 	strh.w	r3, [sp, #4]
   12ed0:	a901      	add	r1, sp, #4
   12ed2:	f640 331c 	movw	r3, #2844	; 0xb1c
   12ed6:	4620      	mov	r0, r4
   12ed8:	f8ad 3006 	strh.w	r3, [sp, #6]
   12edc:	f7ff f8dd 	bl	1209a <smpSmExecute>
   12ee0:	e7f0      	b.n	12ec4 <smprScActDHKeyCheckSend+0x4a>
   12ee2:	bf00      	nop

00012ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   12ee4:	b480      	push	{r7}
   12ee6:	b083      	sub	sp, #12
   12ee8:	af00      	add	r7, sp, #0
   12eea:	4603      	mov	r3, r0
   12eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   12eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
   12ef2:	2b00      	cmp	r3, #0
   12ef4:	db0b      	blt.n	12f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12ef6:	4909      	ldr	r1, [pc, #36]	; (12f1c <__NVIC_EnableIRQ+0x38>)
   12ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   12efc:	095b      	lsrs	r3, r3, #5
   12efe:	79fa      	ldrb	r2, [r7, #7]
   12f00:	f002 021f 	and.w	r2, r2, #31
   12f04:	2001      	movs	r0, #1
   12f06:	fa00 f202 	lsl.w	r2, r0, r2
   12f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   12f0e:	bf00      	nop
   12f10:	370c      	adds	r7, #12
   12f12:	46bd      	mov	sp, r7
   12f14:	f85d 7b04 	ldr.w	r7, [sp], #4
   12f18:	4770      	bx	lr
   12f1a:	bf00      	nop
   12f1c:	e000e100 	.word	0xe000e100

00012f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12f20:	b480      	push	{r7}
   12f22:	b083      	sub	sp, #12
   12f24:	af00      	add	r7, sp, #0
   12f26:	4603      	mov	r3, r0
   12f28:	6039      	str	r1, [r7, #0]
   12f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   12f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   12f30:	2b00      	cmp	r3, #0
   12f32:	db0a      	blt.n	12f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f34:	490d      	ldr	r1, [pc, #52]	; (12f6c <__NVIC_SetPriority+0x4c>)
   12f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
   12f3a:	683a      	ldr	r2, [r7, #0]
   12f3c:	b2d2      	uxtb	r2, r2
   12f3e:	0152      	lsls	r2, r2, #5
   12f40:	b2d2      	uxtb	r2, r2
   12f42:	440b      	add	r3, r1
   12f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12f48:	e00a      	b.n	12f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12f4a:	4909      	ldr	r1, [pc, #36]	; (12f70 <__NVIC_SetPriority+0x50>)
   12f4c:	79fb      	ldrb	r3, [r7, #7]
   12f4e:	f003 030f 	and.w	r3, r3, #15
   12f52:	3b04      	subs	r3, #4
   12f54:	683a      	ldr	r2, [r7, #0]
   12f56:	b2d2      	uxtb	r2, r2
   12f58:	0152      	lsls	r2, r2, #5
   12f5a:	b2d2      	uxtb	r2, r2
   12f5c:	440b      	add	r3, r1
   12f5e:	761a      	strb	r2, [r3, #24]
}
   12f60:	bf00      	nop
   12f62:	370c      	adds	r7, #12
   12f64:	46bd      	mov	sp, r7
   12f66:	f85d 7b04 	ldr.w	r7, [sp], #4
   12f6a:	4770      	bx	lr
   12f6c:	e000e100 	.word	0xe000e100
   12f70:	e000ed00 	.word	0xe000ed00

00012f74 <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
   12f74:	b580      	push	{r7, lr}
   12f76:	af00      	add	r7, sp, #0
    am_bsp_uart_printf_enable();
#else
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
   12f78:	f00e fa40 	bl	213fc <am_bsp_itm_printf_enable>
#endif
    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
   12f7c:	f009 fd7a 	bl	1ca74 <am_util_stdio_terminal_clear>
}
   12f80:	bf00      	nop
   12f82:	bd80      	pop	{r7, pc}

00012f84 <setup_serial>:
// UART configuration settings.
//
//*****************************************************************************
void
setup_serial(int32_t i32Module)
{
   12f84:	b5b0      	push	{r4, r5, r7, lr}
   12f86:	b08c      	sub	sp, #48	; 0x30
   12f88:	af00      	add	r7, sp, #0
   12f8a:	6078      	str	r0, [r7, #4]
    //
    // Enable a UART to use for the menu.
    //
    const am_hal_uart_config_t sUartConfig =
   12f8c:	4b1f      	ldr	r3, [pc, #124]	; (1300c <setup_serial+0x88>)
   12f8e:	f107 0408 	add.w	r4, r7, #8
   12f92:	461d      	mov	r5, r3
   12f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12f9c:	e895 0003 	ldmia.w	r5, {r0, r1}
   12fa0:	e884 0003 	stmia.w	r4, {r0, r1}
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    am_hal_uart_initialize(0, &UART);
   12fa4:	491a      	ldr	r1, [pc, #104]	; (13010 <setup_serial+0x8c>)
   12fa6:	2000      	movs	r0, #0
   12fa8:	f010 fdd6 	bl	23b58 <am_hal_uart_initialize>
    am_hal_uart_power_control(UART, AM_HAL_SYSCTRL_WAKE, false);
   12fac:	4b18      	ldr	r3, [pc, #96]	; (13010 <setup_serial+0x8c>)
   12fae:	681b      	ldr	r3, [r3, #0]
   12fb0:	2200      	movs	r2, #0
   12fb2:	2100      	movs	r1, #0
   12fb4:	4618      	mov	r0, r3
   12fb6:	f010 fdf7 	bl	23ba8 <am_hal_uart_power_control>
    am_hal_uart_configure(UART, &sUartConfig);
   12fba:	4b15      	ldr	r3, [pc, #84]	; (13010 <setup_serial+0x8c>)
   12fbc:	681b      	ldr	r3, [r3, #0]
   12fbe:	f107 0208 	add.w	r2, r7, #8
   12fc2:	4611      	mov	r1, r2
   12fc4:	4618      	mov	r0, r3
   12fc6:	f010 fe61 	bl	23c8c <am_hal_uart_configure>

    //
    // Make sure the UART interrupt priority is set low enough to allow
    // FreeRTOS API calls.
    //
    NVIC_SetPriority(UART0_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   12fca:	2104      	movs	r1, #4
   12fcc:	200f      	movs	r0, #15
   12fce:	f7ff ffa7 	bl	12f20 <__NVIC_SetPriority>


    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
   12fd2:	4b10      	ldr	r3, [pc, #64]	; (13014 <setup_serial+0x90>)
   12fd4:	6819      	ldr	r1, [r3, #0]
   12fd6:	2030      	movs	r0, #48	; 0x30
   12fd8:	f010 f894 	bl	23104 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
   12fdc:	4b0e      	ldr	r3, [pc, #56]	; (13018 <setup_serial+0x94>)
   12fde:	6819      	ldr	r1, [r3, #0]
   12fe0:	2031      	movs	r0, #49	; 0x31
   12fe2:	f010 f88f 	bl	23104 <am_hal_gpio_pinconfig>

    //
    // Enable UART RX interrupts manually.
    //
    am_hal_uart_interrupt_clear(UART, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
   12fe6:	4b0a      	ldr	r3, [pc, #40]	; (13010 <setup_serial+0x8c>)
   12fe8:	681b      	ldr	r3, [r3, #0]
   12fea:	2150      	movs	r1, #80	; 0x50
   12fec:	4618      	mov	r0, r3
   12fee:	f011 f9bf 	bl	24370 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_enable(UART, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
   12ff2:	4b07      	ldr	r3, [pc, #28]	; (13010 <setup_serial+0x8c>)
   12ff4:	681b      	ldr	r3, [r3, #0]
   12ff6:	2150      	movs	r1, #80	; 0x50
   12ff8:	4618      	mov	r0, r3
   12ffa:	f011 f9a5 	bl	24348 <am_hal_uart_interrupt_enable>
    NVIC_EnableIRQ(UART0_IRQn);
   12ffe:	200f      	movs	r0, #15
   13000:	f7ff ff70 	bl	12ee4 <__NVIC_EnableIRQ>
}
   13004:	bf00      	nop
   13006:	3730      	adds	r7, #48	; 0x30
   13008:	46bd      	mov	sp, r7
   1300a:	bdb0      	pop	{r4, r5, r7, pc}
   1300c:	000243cc 	.word	0x000243cc
   13010:	10009600 	.word	0x10009600
   13014:	0002688c 	.word	0x0002688c
   13018:	00026888 	.word	0x00026888

0001301c <am_menu_printf>:
// buffer for printf
static char g_prfbuf[AM_PRINTF_BUFSIZE];

uint32_t
am_menu_printf(const char *pcFmt, ...)
{
   1301c:	b40f      	push	{r0, r1, r2, r3}
   1301e:	b580      	push	{r7, lr}
   13020:	b088      	sub	sp, #32
   13022:	af00      	add	r7, sp, #0

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   13024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13028:	61bb      	str	r3, [r7, #24]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1302a:	69ba      	ldr	r2, [r7, #24]
   1302c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1302e:	480f      	ldr	r0, [pc, #60]	; (1306c <am_menu_printf+0x50>)
   13030:	f009 f9f0 	bl	1c414 <am_util_stdio_vsprintf>
   13034:	61f8      	str	r0, [r7, #28]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    am_hal_uart_transfer_t sSend =
   13036:	2300      	movs	r3, #0
   13038:	607b      	str	r3, [r7, #4]
   1303a:	4b0c      	ldr	r3, [pc, #48]	; (1306c <am_menu_printf+0x50>)
   1303c:	60bb      	str	r3, [r7, #8]
   1303e:	69fb      	ldr	r3, [r7, #28]
   13040:	60fb      	str	r3, [r7, #12]
   13042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13046:	613b      	str	r3, [r7, #16]
   13048:	2300      	movs	r3, #0
   1304a:	617b      	str	r3, [r7, #20]
        .ui32NumBytes = ui32NumChars,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = 0,
    };

    am_hal_uart_transfer(UART, &sSend);
   1304c:	4b08      	ldr	r3, [pc, #32]	; (13070 <am_menu_printf+0x54>)
   1304e:	681b      	ldr	r3, [r3, #0]
   13050:	1d3a      	adds	r2, r7, #4
   13052:	4611      	mov	r1, r2
   13054:	4618      	mov	r0, r3
   13056:	f010 ff3d 	bl	23ed4 <am_hal_uart_transfer>

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   1305a:	69fb      	ldr	r3, [r7, #28]
}
   1305c:	4618      	mov	r0, r3
   1305e:	3720      	adds	r7, #32
   13060:	46bd      	mov	sp, r7
   13062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   13066:	b004      	add	sp, #16
   13068:	4770      	bx	lr
   1306a:	bf00      	nop
   1306c:	10004338 	.word	0x10004338
   13070:	10009600 	.word	0x10009600

00013074 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
   13074:	b580      	push	{r7, lr}
   13076:	b082      	sub	sp, #8
   13078:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   1307a:	2100      	movs	r1, #0
   1307c:	2000      	movs	r0, #0
   1307e:	f00f ff03 	bl	22e88 <am_hal_clkgen_control>
        //32.6 - MOSI
        //33.4 - CSN
        //35.7 - SPI_STATUS
        //41.1 - IRQ (not configured, also SWO)

        am_hal_gpio_pincfg_t sPincfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   13082:	2300      	movs	r3, #0
   13084:	607b      	str	r3, [r7, #4]

        sPincfg.uFuncSel = 6;
   13086:	793b      	ldrb	r3, [r7, #4]
   13088:	2206      	movs	r2, #6
   1308a:	f362 0302 	bfi	r3, r2, #0, #3
   1308e:	713b      	strb	r3, [r7, #4]
        am_hal_gpio_pinconfig(30, sPincfg);
   13090:	6879      	ldr	r1, [r7, #4]
   13092:	201e      	movs	r0, #30
   13094:	f010 f836 	bl	23104 <am_hal_gpio_pinconfig>
        am_hal_gpio_pinconfig(31, sPincfg);
   13098:	6879      	ldr	r1, [r7, #4]
   1309a:	201f      	movs	r0, #31
   1309c:	f010 f832 	bl	23104 <am_hal_gpio_pinconfig>
        am_hal_gpio_pinconfig(32, sPincfg);
   130a0:	6879      	ldr	r1, [r7, #4]
   130a2:	2020      	movs	r0, #32
   130a4:	f010 f82e 	bl	23104 <am_hal_gpio_pinconfig>
        sPincfg.uFuncSel = 4;
   130a8:	793b      	ldrb	r3, [r7, #4]
   130aa:	2204      	movs	r2, #4
   130ac:	f362 0302 	bfi	r3, r2, #0, #3
   130b0:	713b      	strb	r3, [r7, #4]
        am_hal_gpio_pinconfig(33, sPincfg);
   130b2:	6879      	ldr	r1, [r7, #4]
   130b4:	2021      	movs	r0, #33	; 0x21
   130b6:	f010 f825 	bl	23104 <am_hal_gpio_pinconfig>
        sPincfg.uFuncSel = 7;
   130ba:	793b      	ldrb	r3, [r7, #4]
   130bc:	f043 0307 	orr.w	r3, r3, #7
   130c0:	713b      	strb	r3, [r7, #4]
        am_hal_gpio_pinconfig(35, sPincfg);
   130c2:	6879      	ldr	r1, [r7, #4]
   130c4:	2023      	movs	r0, #35	; 0x23
   130c6:	f010 f81d 	bl	23104 <am_hal_gpio_pinconfig>
        //sPincfg.uFuncSel = 1;
        //am_hal_gpio_pinconfig(41, sPincfg);

    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   130ca:	480b      	ldr	r0, [pc, #44]	; (130f8 <main+0x84>)
   130cc:	f00f fd3a 	bl	22b44 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   130d0:	f00f fd5e 	bl	22b90 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   130d4:	f010 fcce 	bl	23a74 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   130d8:	2001      	movs	r0, #1
   130da:	f010 fcd3 	bl	23a84 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   130de:	f00e f95b 	bl	21398 <am_bsp_low_power_init>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
   130e2:	f7ff ff47 	bl	12f74 <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS AMDTP Example\n");
   130e6:	4805      	ldr	r0, [pc, #20]	; (130fc <main+0x88>)
   130e8:	f009 fca0 	bl	1ca2c <am_util_stdio_printf>

#ifdef BLE_MENU
    setup_serial(0);
   130ec:	2000      	movs	r0, #0
   130ee:	f7ff ff49 	bl	12f84 <setup_serial>
#endif

    //
    // Run the application.
    //
    run_tasks();
   130f2:	f000 fa49 	bl	13588 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   130f6:	e7fe      	b.n	130f6 <main+0x82>
   130f8:	000280e8 	.word	0x000280e8
   130fc:	000243f4 	.word	0x000243f4

00013100 <__NVIC_SetPriority>:
{
   13100:	b480      	push	{r7}
   13102:	b083      	sub	sp, #12
   13104:	af00      	add	r7, sp, #0
   13106:	4603      	mov	r3, r0
   13108:	6039      	str	r1, [r7, #0]
   1310a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   13110:	2b00      	cmp	r3, #0
   13112:	db0a      	blt.n	1312a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13114:	490d      	ldr	r1, [pc, #52]	; (1314c <__NVIC_SetPriority+0x4c>)
   13116:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1311a:	683a      	ldr	r2, [r7, #0]
   1311c:	b2d2      	uxtb	r2, r2
   1311e:	0152      	lsls	r2, r2, #5
   13120:	b2d2      	uxtb	r2, r2
   13122:	440b      	add	r3, r1
   13124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   13128:	e00a      	b.n	13140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1312a:	4909      	ldr	r1, [pc, #36]	; (13150 <__NVIC_SetPriority+0x50>)
   1312c:	79fb      	ldrb	r3, [r7, #7]
   1312e:	f003 030f 	and.w	r3, r3, #15
   13132:	3b04      	subs	r3, #4
   13134:	683a      	ldr	r2, [r7, #0]
   13136:	b2d2      	uxtb	r2, r2
   13138:	0152      	lsls	r2, r2, #5
   1313a:	b2d2      	uxtb	r2, r2
   1313c:	440b      	add	r3, r1
   1313e:	761a      	strb	r2, [r3, #24]
}
   13140:	bf00      	nop
   13142:	370c      	adds	r7, #12
   13144:	46bd      	mov	sp, r7
   13146:	f85d 7b04 	ldr.w	r7, [sp], #4
   1314a:	4770      	bx	lr
   1314c:	e000e100 	.word	0xe000e100
   13150:	e000ed00 	.word	0xe000ed00

00013154 <uart_data_ready_handler>:
};

#ifdef BLE_MENU
wsfHandlerId_t g_uartDataReadyHandlerId;
void uart_data_ready_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   13154:	b580      	push	{r7, lr}
   13156:	b082      	sub	sp, #8
   13158:	af00      	add	r7, sp, #0
   1315a:	4603      	mov	r3, r0
   1315c:	6039      	str	r1, [r7, #0]
   1315e:	71fb      	strb	r3, [r7, #7]
    BleMenuRx();
   13160:	f007 fcc0 	bl	1aae4 <BleMenuRx>
}
   13164:	bf00      	nop
   13166:	3708      	adds	r7, #8
   13168:	46bd      	mov	sp, r7
   1316a:	bd80      	pop	{r7, pc}

0001316c <wsf_timer_handler>:
// Callback handler for the FreeRTOS Timer
//
//*****************************************************************************
void
wsf_timer_handler(TimerHandle_t xTimer)
{
   1316c:	b580      	push	{r7, lr}
   1316e:	b082      	sub	sp, #8
   13170:	af00      	add	r7, sp, #0
   13172:	6078      	str	r0, [r7, #4]
    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   13174:	2100      	movs	r1, #0
   13176:	2000      	movs	r0, #0
   13178:	f002 fc00 	bl	1597c <WsfTaskSetReady>
}
   1317c:	bf00      	nop
   1317e:	3708      	adds	r7, #8
   13180:	46bd      	mov	sp, r7
   13182:	bd80      	pop	{r7, pc}

00013184 <scheduler_timer_init>:
// Reuse FreeRTOS TIMER to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
   13184:	b580      	push	{r7, lr}
   13186:	b082      	sub	sp, #8
   13188:	af02      	add	r7, sp, #8
    // Create a FreeRTOS Timer
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   1318a:	4b09      	ldr	r3, [pc, #36]	; (131b0 <scheduler_timer_init+0x2c>)
   1318c:	9300      	str	r3, [sp, #0]
   1318e:	2300      	movs	r3, #0
   13190:	2200      	movs	r2, #0
   13192:	210a      	movs	r1, #10
   13194:	4807      	ldr	r0, [pc, #28]	; (131b4 <scheduler_timer_init+0x30>)
   13196:	f00c fdab 	bl	1fcf0 <xTimerCreate>
   1319a:	4602      	mov	r2, r0
   1319c:	4b06      	ldr	r3, [pc, #24]	; (131b8 <scheduler_timer_init+0x34>)
   1319e:	601a      	str	r2, [r3, #0]
            pdFALSE, NULL, wsf_timer_handler);
    configASSERT(xWsfTimer);
   131a0:	4b05      	ldr	r3, [pc, #20]	; (131b8 <scheduler_timer_init+0x34>)
   131a2:	681b      	ldr	r3, [r3, #0]
   131a4:	2b00      	cmp	r3, #0
   131a6:	d100      	bne.n	131aa <scheduler_timer_init+0x26>
   131a8:	e7fe      	b.n	131a8 <scheduler_timer_init+0x24>
}
   131aa:	bf00      	nop
   131ac:	46bd      	mov	sp, r7
   131ae:	bd80      	pop	{r7, pc}
   131b0:	0001316d 	.word	0x0001316d
   131b4:	0002440c 	.word	0x0002440c
   131b8:	10009608 	.word	0x10009608

000131bc <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
   131bc:	b580      	push	{r7, lr}
   131be:	b082      	sub	sp, #8
   131c0:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   131c2:	f00c f959 	bl	1f478 <xTaskGetTickCount>
   131c6:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   131c8:	4b0b      	ldr	r3, [pc, #44]	; (131f8 <update_scheduler_timers+0x3c>)
   131ca:	681b      	ldr	r3, [r3, #0]
   131cc:	687a      	ldr	r2, [r7, #4]
   131ce:	1ad3      	subs	r3, r2, r3
   131d0:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   131d2:	683b      	ldr	r3, [r7, #0]
   131d4:	2b09      	cmp	r3, #9
   131d6:	d90a      	bls.n	131ee <update_scheduler_timers+0x32>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   131d8:	683b      	ldr	r3, [r7, #0]
   131da:	4a08      	ldr	r2, [pc, #32]	; (131fc <update_scheduler_timers+0x40>)
   131dc:	fba2 2303 	umull	r2, r3, r2, r3
   131e0:	08db      	lsrs	r3, r3, #3
   131e2:	4618      	mov	r0, r3
   131e4:	f001 fbf4 	bl	149d0 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   131e8:	4a03      	ldr	r2, [pc, #12]	; (131f8 <update_scheduler_timers+0x3c>)
   131ea:	687b      	ldr	r3, [r7, #4]
   131ec:	6013      	str	r3, [r2, #0]
    }
}
   131ee:	bf00      	nop
   131f0:	3708      	adds	r7, #8
   131f2:	46bd      	mov	sp, r7
   131f4:	bd80      	pop	{r7, pc}
   131f6:	bf00      	nop
   131f8:	10004fb8 	.word	0x10004fb8
   131fc:	cccccccd 	.word	0xcccccccd

00013200 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
   13200:	b580      	push	{r7, lr}
   13202:	b084      	sub	sp, #16
   13204:	af02      	add	r7, sp, #8
    wsfTimerTicks_t xNextExpiration;

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   13206:	1cfb      	adds	r3, r7, #3
   13208:	4618      	mov	r0, r3
   1320a:	f001 fc0f 	bl	14a2c <WsfTimerNextExpiration>
   1320e:	6078      	str	r0, [r7, #4]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   13210:	687b      	ldr	r3, [r7, #4]
   13212:	2b00      	cmp	r3, #0
   13214:	d014      	beq.n	13240 <set_next_wakeup+0x40>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   13216:	4b0c      	ldr	r3, [pc, #48]	; (13248 <set_next_wakeup+0x48>)
   13218:	6818      	ldr	r0, [r3, #0]
   1321a:	687b      	ldr	r3, [r7, #4]
   1321c:	f242 7210 	movw	r2, #10000	; 0x2710
   13220:	fb02 f303 	mul.w	r3, r2, r3
   13224:	4a09      	ldr	r2, [pc, #36]	; (1324c <set_next_wakeup+0x4c>)
   13226:	fba2 2303 	umull	r2, r3, r2, r3
   1322a:	099a      	lsrs	r2, r3, #6
   1322c:	2364      	movs	r3, #100	; 0x64
   1322e:	9300      	str	r3, [sp, #0]
   13230:	2300      	movs	r3, #0
   13232:	2104      	movs	r1, #4
   13234:	f00c fda2 	bl	1fd7c <xTimerGenericCommand>
   13238:	4603      	mov	r3, r0
   1323a:	2b01      	cmp	r3, #1
   1323c:	d000      	beq.n	13240 <set_next_wakeup+0x40>
   1323e:	e7fe      	b.n	1323e <set_next_wakeup+0x3e>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   13240:	bf00      	nop
   13242:	3708      	adds	r7, #8
   13244:	46bd      	mov	sp, r7
   13246:	bd80      	pop	{r7, pc}
   13248:	10009608 	.word	0x10009608
   1324c:	10624dd3 	.word	0x10624dd3

00013250 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   13250:	b580      	push	{r7, lr}
   13252:	b082      	sub	sp, #8
   13254:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
   13256:	f7ff ff95 	bl	13184 <scheduler_timer_init>
    WsfTimerInit();
   1325a:	f001 fb73 	bl	14944 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   1325e:	4b44      	ldr	r3, [pc, #272]	; (13370 <exactle_stack_init+0x120>)
   13260:	2204      	movs	r2, #4
   13262:	4944      	ldr	r1, [pc, #272]	; (13374 <exactle_stack_init+0x124>)
   13264:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   13268:	f001 f88a 	bl	14380 <WsfBufInit>
   1326c:	4603      	mov	r3, r0
   1326e:	80fb      	strh	r3, [r7, #6]
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   13270:	88fb      	ldrh	r3, [r7, #6]
   13272:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
   13276:	d906      	bls.n	13286 <exactle_stack_init+0x36>
    {
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   13278:	88fb      	ldrh	r3, [r7, #6]
   1327a:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
   1327e:	4619      	mov	r1, r3
   13280:	483d      	ldr	r0, [pc, #244]	; (13378 <exactle_stack_init+0x128>)
   13282:	f009 fbd3 	bl	1ca2c <am_util_stdio_printf>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   13286:	f008 fc49 	bl	1bb1c <SecInit>
    SecAesInit();
   1328a:	f008 f8e3 	bl	1b454 <SecAesInit>
    SecCmacInit();
   1328e:	f008 fab5 	bl	1b7fc <SecCmacInit>
    SecEccInit();
   13292:	f008 fbc1 	bl	1ba18 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   13296:	4839      	ldr	r0, [pc, #228]	; (1337c <exactle_stack_init+0x12c>)
   13298:	f002 fb9c 	bl	159d4 <WsfOsSetNextHandler>
   1329c:	4603      	mov	r3, r0
   1329e:	717b      	strb	r3, [r7, #5]
    HciHandlerInit(handlerId);
   132a0:	797b      	ldrb	r3, [r7, #5]
   132a2:	4618      	mov	r0, r3
   132a4:	f002 fa80 	bl	157a8 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   132a8:	4835      	ldr	r0, [pc, #212]	; (13380 <exactle_stack_init+0x130>)
   132aa:	f002 fb93 	bl	159d4 <WsfOsSetNextHandler>
   132ae:	4603      	mov	r3, r0
   132b0:	717b      	strb	r3, [r7, #5]
    DmDevVsInit(0);
   132b2:	2000      	movs	r0, #0
   132b4:	f7fc fc01 	bl	faba <DmDevVsInit>
    DmAdvInit();
   132b8:	f7fb fe22 	bl	ef00 <DmAdvInit>
    DmScanInit();
   132bc:	f7fc ff86 	bl	101cc <DmScanInit>
    DmConnInit();
   132c0:	f7fc f9a0 	bl	f604 <DmConnInit>
    DmConnMasterInit();
   132c4:	f7fe fc00 	bl	11ac8 <DmConnMasterInit>
    DmSecInit();
   132c8:	f7fd f88f 	bl	103ea <DmSecInit>
    DmSecLescInit();
   132cc:	f7fd f9cc 	bl	10668 <DmSecLescInit>
    DmPrivInit();
   132d0:	f7fc fd7e 	bl	fdd0 <DmPrivInit>
    DmHandlerInit(handlerId);
   132d4:	797b      	ldrb	r3, [r7, #5]
   132d6:	4618      	mov	r0, r3
   132d8:	f7fc fc39 	bl	fb4e <DmHandlerInit>

    L2cInit();
   132dc:	f7fd fa45 	bl	1076a <L2cInit>
    L2cMasterInit();
   132e0:	f7fe fc50 	bl	11b84 <L2cMasterInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   132e4:	4827      	ldr	r0, [pc, #156]	; (13384 <exactle_stack_init+0x134>)
   132e6:	f002 fb75 	bl	159d4 <WsfOsSetNextHandler>
   132ea:	4603      	mov	r3, r0
   132ec:	717b      	strb	r3, [r7, #5]
    AttHandlerInit(handlerId);
   132ee:	797b      	ldrb	r3, [r7, #5]
   132f0:	4618      	mov	r0, r3
   132f2:	f7f9 f98c 	bl	c60e <AttHandlerInit>
    AttsInit();
   132f6:	f7fa fba3 	bl	da40 <AttsInit>
    AttsIndInit();
   132fa:	f7fa faa3 	bl	d844 <AttsIndInit>
    AttcInit();
   132fe:	f7f9 fdaf 	bl	ce60 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   13302:	4821      	ldr	r0, [pc, #132]	; (13388 <exactle_stack_init+0x138>)
   13304:	f002 fb66 	bl	159d4 <WsfOsSetNextHandler>
   13308:	4603      	mov	r3, r0
   1330a:	717b      	strb	r3, [r7, #5]
    SmpHandlerInit(handlerId);
   1330c:	797b      	ldrb	r3, [r7, #5]
   1330e:	4618      	mov	r0, r3
   13310:	f7fd fcfc 	bl	10d0c <SmpHandlerInit>
    SmpiInit();
   13314:	f7fe fb3c 	bl	11990 <SmpiInit>
    SmpiScInit();
   13318:	f7fe fb24 	bl	11964 <SmpiScInit>
    HciSetMaxRxAclLen(251);
   1331c:	20fb      	movs	r0, #251	; 0xfb
   1331e:	f005 f821 	bl	18364 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   13322:	481a      	ldr	r0, [pc, #104]	; (1338c <exactle_stack_init+0x13c>)
   13324:	f002 fb56 	bl	159d4 <WsfOsSetNextHandler>
   13328:	4603      	mov	r3, r0
   1332a:	717b      	strb	r3, [r7, #5]
    AppHandlerInit(handlerId);
   1332c:	797b      	ldrb	r3, [r7, #5]
   1332e:	4618      	mov	r0, r3
   13330:	f009 ff9c 	bl	1d26c <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(AmdtpcHandler);
   13334:	4816      	ldr	r0, [pc, #88]	; (13390 <exactle_stack_init+0x140>)
   13336:	f002 fb4d 	bl	159d4 <WsfOsSetNextHandler>
   1333a:	4603      	mov	r3, r0
   1333c:	717b      	strb	r3, [r7, #5]
    AmdtpcHandlerInit(handlerId);
   1333e:	797b      	ldrb	r3, [r7, #5]
   13340:	4618      	mov	r0, r3
   13342:	f002 f959 	bl	155f8 <AmdtpcHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   13346:	4813      	ldr	r0, [pc, #76]	; (13394 <exactle_stack_init+0x144>)
   13348:	f002 fb44 	bl	159d4 <WsfOsSetNextHandler>
   1334c:	4603      	mov	r3, r0
   1334e:	717b      	strb	r3, [r7, #5]
    HciDrvHandlerInit(handlerId);
   13350:	797b      	ldrb	r3, [r7, #5]
   13352:	4618      	mov	r0, r3
   13354:	f003 f9bc 	bl	166d0 <HciDrvHandlerInit>

#ifdef BLE_MENU
    g_uartDataReadyHandlerId = WsfOsSetNextHandler(uart_data_ready_handler);
   13358:	480f      	ldr	r0, [pc, #60]	; (13398 <exactle_stack_init+0x148>)
   1335a:	f002 fb3b 	bl	159d4 <WsfOsSetNextHandler>
   1335e:	4603      	mov	r3, r0
   13360:	461a      	mov	r2, r3
   13362:	4b0e      	ldr	r3, [pc, #56]	; (1339c <exactle_stack_init+0x14c>)
   13364:	701a      	strb	r2, [r3, #0]
#endif
}
   13366:	bf00      	nop
   13368:	3708      	adds	r7, #8
   1336a:	46bd      	mov	sp, r7
   1336c:	bd80      	pop	{r7, pc}
   1336e:	bf00      	nop
   13370:	10002b84 	.word	0x10002b84
   13374:	10004438 	.word	0x10004438
   13378:	00024418 	.word	0x00024418
   1337c:	000157d5 	.word	0x000157d5
   13380:	0000fb69 	.word	0x0000fb69
   13384:	0000c64d 	.word	0x0000c64d
   13388:	00010d55 	.word	0x00010d55
   1338c:	0001d28d 	.word	0x0001d28d
   13390:	000156a5 	.word	0x000156a5
   13394:	0001675d 	.word	0x0001675d
   13398:	00013155 	.word	0x00013155
   1339c:	10009604 	.word	0x10009604

000133a0 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   133a0:	b580      	push	{r7, lr}
   133a2:	b088      	sub	sp, #32
   133a4:	af00      	add	r7, sp, #0

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    am_hal_uart_interrupt_status_get(UART, &ui32Status, true);
   133a6:	4b22      	ldr	r3, [pc, #136]	; (13430 <am_uart_isr+0x90>)
   133a8:	681b      	ldr	r3, [r3, #0]
   133aa:	f107 0118 	add.w	r1, r7, #24
   133ae:	2201      	movs	r2, #1
   133b0:	4618      	mov	r0, r3
   133b2:	f010 ffef 	bl	24394 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(UART, ui32Status);
   133b6:	4b1e      	ldr	r3, [pc, #120]	; (13430 <am_uart_isr+0x90>)
   133b8:	681b      	ldr	r3, [r3, #0]
   133ba:	69ba      	ldr	r2, [r7, #24]
   133bc:	4611      	mov	r1, r2
   133be:	4618      	mov	r0, r3
   133c0:	f010 ffd6 	bl	24370 <am_hal_uart_interrupt_clear>

    //
    // Service the uart FIFO.
    //
    const am_hal_uart_transfer_t sGetChar =
   133c4:	2301      	movs	r3, #1
   133c6:	603b      	str	r3, [r7, #0]
   133c8:	f107 0317 	add.w	r3, r7, #23
   133cc:	607b      	str	r3, [r7, #4]
   133ce:	2301      	movs	r3, #1
   133d0:	60bb      	str	r3, [r7, #8]
   133d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   133d6:	60fb      	str	r3, [r7, #12]
   133d8:	2300      	movs	r3, #0
   133da:	613b      	str	r3, [r7, #16]
        .ui32NumBytes = 1,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = 0,
    };

    am_hal_uart_transfer(UART, &sGetChar);
   133dc:	4b14      	ldr	r3, [pc, #80]	; (13430 <am_uart_isr+0x90>)
   133de:	681b      	ldr	r3, [r3, #0]
   133e0:	463a      	mov	r2, r7
   133e2:	4611      	mov	r1, r2
   133e4:	4618      	mov	r0, r3
   133e6:	f010 fd75 	bl	23ed4 <am_hal_uart_transfer>

    if ((rxData == '\n') || (rxData == '\r'))
   133ea:	7dfb      	ldrb	r3, [r7, #23]
   133ec:	2b0a      	cmp	r3, #10
   133ee:	d002      	beq.n	133f6 <am_uart_isr+0x56>
   133f0:	7dfb      	ldrb	r3, [r7, #23]
   133f2:	2b0d      	cmp	r3, #13
   133f4:	d10d      	bne.n	13412 <am_uart_isr+0x72>
    {
        wsfMsgHdr_t  *pMsg;
        if ( (pMsg = WsfMsgAlloc(0)) != NULL )
   133f6:	2000      	movs	r0, #0
   133f8:	f001 f8fb 	bl	145f2 <WsfMsgAlloc>
   133fc:	61f8      	str	r0, [r7, #28]
   133fe:	69fb      	ldr	r3, [r7, #28]
   13400:	2b00      	cmp	r3, #0
   13402:	d00f      	beq.n	13424 <am_uart_isr+0x84>
        {
            WsfMsgSend(g_uartDataReadyHandlerId, pMsg);
   13404:	4b0b      	ldr	r3, [pc, #44]	; (13434 <am_uart_isr+0x94>)
   13406:	781b      	ldrb	r3, [r3, #0]
   13408:	69f9      	ldr	r1, [r7, #28]
   1340a:	4618      	mov	r0, r3
   1340c:	f001 f915 	bl	1463a <WsfMsgSend>
    {
   13410:	e008      	b.n	13424 <am_uart_isr+0x84>
        }
    }
    else
    {
        menuRxData[menuRxDataLen++] = rxData;
   13412:	4b09      	ldr	r3, [pc, #36]	; (13438 <am_uart_isr+0x98>)
   13414:	681b      	ldr	r3, [r3, #0]
   13416:	1c5a      	adds	r2, r3, #1
   13418:	4907      	ldr	r1, [pc, #28]	; (13438 <am_uart_isr+0x98>)
   1341a:	600a      	str	r2, [r1, #0]
   1341c:	7df9      	ldrb	r1, [r7, #23]
   1341e:	4a07      	ldr	r2, [pc, #28]	; (1343c <am_uart_isr+0x9c>)
   13420:	54d1      	strb	r1, [r2, r3]
    }
}
   13422:	e000      	b.n	13426 <am_uart_isr+0x86>
    {
   13424:	bf00      	nop
}
   13426:	bf00      	nop
   13428:	3720      	adds	r7, #32
   1342a:	46bd      	mov	sp, r7
   1342c:	bd80      	pop	{r7, pc}
   1342e:	bf00      	nop
   13430:	10009600 	.word	0x10009600
   13434:	10009604 	.word	0x10009604
   13438:	1000529c 	.word	0x1000529c
   1343c:	1000b178 	.word	0x1000b178

00013440 <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   13440:	b580      	push	{r7, lr}
   13442:	af00      	add	r7, sp, #0

    HciDrvIntService();
   13444:	f003 f964 	bl	16710 <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   13448:	2100      	movs	r1, #0
   1344a:	2000      	movs	r0, #0
   1344c:	f002 fa96 	bl	1597c <WsfTaskSetReady>
}
   13450:	bf00      	nop
   13452:	bd80      	pop	{r7, pc}

00013454 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   13454:	b580      	push	{r7, lr}
   13456:	af00      	add	r7, sp, #0
    am_util_debug_printf("RadioTask: setup\r\n");
   13458:	480d      	ldr	r0, [pc, #52]	; (13490 <RadioTaskSetup+0x3c>)
   1345a:	f009 fae7 	bl	1ca2c <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xRadioEventHandle = xEventGroupCreate();
   1345e:	f00a ff49 	bl	1e2f4 <xEventGroupCreate>
   13462:	4602      	mov	r2, r0
   13464:	4b0b      	ldr	r3, [pc, #44]	; (13494 <RadioTaskSetup+0x40>)
   13466:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while ( xRadioEventHandle == NULL );
   13468:	bf00      	nop
   1346a:	4b0a      	ldr	r3, [pc, #40]	; (13494 <RadioTaskSetup+0x40>)
   1346c:	681b      	ldr	r3, [r3, #0]
   1346e:	2b00      	cmp	r3, #0
   13470:	d0fb      	beq.n	1346a <RadioTaskSetup+0x16>

    // Pass event object to WSF scheduler
    wsfOsSetEventObject((void*)xRadioEventHandle);
   13472:	4b08      	ldr	r3, [pc, #32]	; (13494 <RadioTaskSetup+0x40>)
   13474:	681b      	ldr	r3, [r3, #0]
   13476:	4618      	mov	r0, r3
   13478:	f002 fb5e 	bl	15b38 <wsfOsSetEventObject>

    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   1347c:	2104      	movs	r1, #4
   1347e:	200c      	movs	r0, #12
   13480:	f7ff fe3e 	bl	13100 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   13484:	2001      	movs	r0, #1
   13486:	f002 ff57 	bl	16338 <HciDrvRadioBoot>
}
   1348a:	bf00      	nop
   1348c:	bd80      	pop	{r7, pc}
   1348e:	bf00      	nop
   13490:	0002443c 	.word	0x0002443c
   13494:	10009610 	.word	0x10009610

00013498 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   13498:	b580      	push	{r7, lr}
   1349a:	b084      	sub	sp, #16
   1349c:	af02      	add	r7, sp, #8
   1349e:	6078      	str	r0, [r7, #4]
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   134a0:	480e      	ldr	r0, [pc, #56]	; (134dc <RadioTask+0x44>)
   134a2:	f009 fac3 	bl	1ca2c <am_util_stdio_printf>
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   134a6:	f7ff fed3 	bl	13250 <exactle_stack_init>

    //
    // Start the "Amdtp" profile.
    //
    AmdtpcStart();
   134aa:	f002 f929 	bl	15700 <AmdtpcStart>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
   134ae:	f7ff fe85 	bl	131bc <update_scheduler_timers>
        wsfOsDispatcher();
   134b2:	f002 fabd 	bl	15a30 <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled
        // event.
        //
        set_next_wakeup();
   134b6:	f7ff fea3 	bl	13200 <set_next_wakeup>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
   134ba:	f002 faa7 	bl	15a0c <wsfOsReadyToSleep>
   134be:	4603      	mov	r3, r0
   134c0:	2b00      	cmp	r3, #0
   134c2:	d0f4      	beq.n	134ae <RadioTask+0x16>
        {
            //
            // Wait for an event to be posted to the Radio Event Handle.
            //
            xEventGroupWaitBits(xRadioEventHandle, 1, pdTRUE,
   134c4:	4b06      	ldr	r3, [pc, #24]	; (134e0 <RadioTask+0x48>)
   134c6:	6818      	ldr	r0, [r3, #0]
   134c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   134cc:	9300      	str	r3, [sp, #0]
   134ce:	2300      	movs	r3, #0
   134d0:	2201      	movs	r2, #1
   134d2:	2101      	movs	r1, #1
   134d4:	f00a ff26 	bl	1e324 <xEventGroupWaitBits>
        update_scheduler_timers();
   134d8:	e7e9      	b.n	134ae <RadioTask+0x16>
   134da:	bf00      	nop
   134dc:	00024450 	.word	0x00024450
   134e0:	10009610 	.word	0x10009610

000134e4 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   134e4:	b580      	push	{r7, lr}
   134e6:	b082      	sub	sp, #8
   134e8:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   134ea:	2000      	movs	r0, #0
   134ec:	f00f fd9e 	bl	2302c <am_hal_ctimer_int_status_get>
   134f0:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
   134f2:	6878      	ldr	r0, [r7, #4]
   134f4:	f00f fd8a 	bl	2300c <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   134f8:	6878      	ldr	r0, [r7, #4]
   134fa:	f00f fd6f 	bl	22fdc <am_hal_ctimer_int_service>
}
   134fe:	bf00      	nop
   13500:	3708      	adds	r7, #8
   13502:	46bd      	mov	sp, r7
   13504:	bd80      	pop	{r7, pc}

00013506 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   13506:	b580      	push	{r7, lr}
   13508:	b082      	sub	sp, #8
   1350a:	af00      	add	r7, sp, #0
   1350c:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   1350e:	2001      	movs	r0, #1
   13510:	f010 fa78 	bl	23a04 <am_hal_sysctrl_sleep>
    return 0;
   13514:	2300      	movs	r3, #0
}
   13516:	4618      	mov	r0, r3
   13518:	3708      	adds	r7, #8
   1351a:	46bd      	mov	sp, r7
   1351c:	bd80      	pop	{r7, pc}

0001351e <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
   1351e:	b480      	push	{r7}
   13520:	b083      	sub	sp, #12
   13522:	af00      	add	r7, sp, #0
   13524:	6078      	str	r0, [r7, #4]
    return;
   13526:	bf00      	nop
}
   13528:	370c      	adds	r7, #12
   1352a:	46bd      	mov	sp, r7
   1352c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13530:	4770      	bx	lr

00013532 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
   13532:	b480      	push	{r7}
   13534:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   13536:	e7fe      	b.n	13536 <vApplicationMallocFailedHook+0x4>

00013538 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   13538:	b480      	push	{r7}
   1353a:	b083      	sub	sp, #12
   1353c:	af00      	add	r7, sp, #0
   1353e:	6078      	str	r0, [r7, #4]
   13540:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   13542:	be00      	bkpt	0x0000
   13544:	e7fd      	b.n	13542 <vApplicationStackOverflowHook+0xa>
	...

00013548 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   13548:	b580      	push	{r7, lr}
   1354a:	b084      	sub	sp, #16
   1354c:	af02      	add	r7, sp, #8
   1354e:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   13550:	4809      	ldr	r0, [pc, #36]	; (13578 <setup_task+0x30>)
   13552:	f009 fa6b 	bl	1ca2c <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   13556:	f7ff ff7d 	bl	13454 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   1355a:	4b08      	ldr	r3, [pc, #32]	; (1357c <setup_task+0x34>)
   1355c:	9301      	str	r3, [sp, #4]
   1355e:	2303      	movs	r3, #3
   13560:	9300      	str	r3, [sp, #0]
   13562:	2300      	movs	r3, #0
   13564:	f44f 7200 	mov.w	r2, #512	; 0x200
   13568:	4905      	ldr	r1, [pc, #20]	; (13580 <setup_task+0x38>)
   1356a:	4806      	ldr	r0, [pc, #24]	; (13584 <setup_task+0x3c>)
   1356c:	f00b fcd2 	bl	1ef14 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   13570:	2000      	movs	r0, #0
   13572:	f00b fdf7 	bl	1f164 <vTaskSuspend>

    while (1);
   13576:	e7fe      	b.n	13576 <setup_task+0x2e>
   13578:	0002446c 	.word	0x0002446c
   1357c:	1000960c 	.word	0x1000960c
   13580:	00024488 	.word	0x00024488
   13584:	00013499 	.word	0x00013499

00013588 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   13588:	b580      	push	{r7, lr}
   1358a:	b082      	sub	sp, #8
   1358c:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   1358e:	4b08      	ldr	r3, [pc, #32]	; (135b0 <run_tasks+0x28>)
   13590:	9301      	str	r3, [sp, #4]
   13592:	2303      	movs	r3, #3
   13594:	9300      	str	r3, [sp, #0]
   13596:	2300      	movs	r3, #0
   13598:	f44f 7200 	mov.w	r2, #512	; 0x200
   1359c:	4905      	ldr	r1, [pc, #20]	; (135b4 <run_tasks+0x2c>)
   1359e:	4806      	ldr	r0, [pc, #24]	; (135b8 <run_tasks+0x30>)
   135a0:	f00b fcb8 	bl	1ef14 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   135a4:	f00b fe4a 	bl	1f23c <vTaskStartScheduler>
}
   135a8:	bf00      	nop
   135aa:	46bd      	mov	sp, r7
   135ac:	bd80      	pop	{r7, pc}
   135ae:	bf00      	nop
   135b0:	10009614 	.word	0x10009614
   135b4:	00024494 	.word	0x00024494
   135b8:	00013549 	.word	0x00013549

000135bc <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
   135bc:	b480      	push	{r7}
   135be:	af00      	add	r7, sp, #0
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
    return;
   135c0:	bf00      	nop
}
   135c2:	46bd      	mov	sp, r7
   135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   135c8:	4770      	bx	lr
	...

000135cc <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr)
{
   135cc:	b580      	push	{r7, lr}
   135ce:	b084      	sub	sp, #16
   135d0:	af00      	add	r7, sp, #0
   135d2:	4603      	mov	r3, r0
   135d4:	6039      	str	r1, [r7, #0]
   135d6:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   135d8:	4b22      	ldr	r3, [pc, #136]	; (13664 <AppDbNewRecord+0x98>)
   135da:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   135dc:	2303      	movs	r3, #3
   135de:	72fb      	strb	r3, [r7, #11]
   135e0:	e00a      	b.n	135f8 <AppDbNewRecord+0x2c>
  {
    if (!pRec->inUse)
   135e2:	68fb      	ldr	r3, [r7, #12]
   135e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   135e8:	2b00      	cmp	r3, #0
   135ea:	d009      	beq.n	13600 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   135ec:	7afb      	ldrb	r3, [r7, #11]
   135ee:	3b01      	subs	r3, #1
   135f0:	72fb      	strb	r3, [r7, #11]
   135f2:	68fb      	ldr	r3, [r7, #12]
   135f4:	33b0      	adds	r3, #176	; 0xb0
   135f6:	60fb      	str	r3, [r7, #12]
   135f8:	7afb      	ldrb	r3, [r7, #11]
   135fa:	2b00      	cmp	r3, #0
   135fc:	d1f1      	bne.n	135e2 <AppDbNewRecord+0x16>
   135fe:	e000      	b.n	13602 <AppDbNewRecord+0x36>
    {
      break;
   13600:	bf00      	nop
    }
  }
  
  /* if all records were allocated */
  if (i == 0)
   13602:	7afb      	ldrb	r3, [r7, #11]
   13604:	2b00      	cmp	r3, #0
   13606:	d10f      	bne.n	13628 <AppDbNewRecord+0x5c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   13608:	4b17      	ldr	r3, [pc, #92]	; (13668 <AppDbNewRecord+0x9c>)
   1360a:	681b      	ldr	r3, [r3, #0]
   1360c:	60fb      	str	r3, [r7, #12]
    
    /* get next record to overwrite */
    pAppDbNewRec++;
   1360e:	4b16      	ldr	r3, [pc, #88]	; (13668 <AppDbNewRecord+0x9c>)
   13610:	681b      	ldr	r3, [r3, #0]
   13612:	33b0      	adds	r3, #176	; 0xb0
   13614:	4a14      	ldr	r2, [pc, #80]	; (13668 <AppDbNewRecord+0x9c>)
   13616:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   13618:	4b13      	ldr	r3, [pc, #76]	; (13668 <AppDbNewRecord+0x9c>)
   1361a:	681b      	ldr	r3, [r3, #0]
   1361c:	4a13      	ldr	r2, [pc, #76]	; (1366c <AppDbNewRecord+0xa0>)
   1361e:	4293      	cmp	r3, r2
   13620:	d102      	bne.n	13628 <AppDbNewRecord+0x5c>
    {
      pAppDbNewRec = appDb.rec;
   13622:	4b11      	ldr	r3, [pc, #68]	; (13668 <AppDbNewRecord+0x9c>)
   13624:	4a0f      	ldr	r2, [pc, #60]	; (13664 <AppDbNewRecord+0x98>)
   13626:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   13628:	22b0      	movs	r2, #176	; 0xb0
   1362a:	2100      	movs	r1, #0
   1362c:	68f8      	ldr	r0, [r7, #12]
   1362e:	f7f8 fe95 	bl	c35c <memset>
  pRec->inUse = TRUE;
   13632:	68fb      	ldr	r3, [r7, #12]
   13634:	2201      	movs	r2, #1
   13636:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   1363a:	68fb      	ldr	r3, [r7, #12]
   1363c:	79fa      	ldrb	r2, [r7, #7]
   1363e:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   13640:	68fb      	ldr	r3, [r7, #12]
   13642:	6839      	ldr	r1, [r7, #0]
   13644:	4618      	mov	r0, r3
   13646:	f000 fb27 	bl	13c98 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   1364a:	68fb      	ldr	r3, [r7, #12]
   1364c:	2200      	movs	r2, #0
   1364e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   13652:	68fb      	ldr	r3, [r7, #12]
   13654:	2200      	movs	r2, #0
   13656:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return (appDbHdl_t) pRec;
   1365a:	68fb      	ldr	r3, [r7, #12]
}
   1365c:	4618      	mov	r0, r3
   1365e:	3710      	adds	r7, #16
   13660:	46bd      	mov	sp, r7
   13662:	bd80      	pop	{r7, pc}
   13664:	10004fbc 	.word	0x10004fbc
   13668:	10002b94 	.word	0x10002b94
   1366c:	100051cc 	.word	0x100051cc

00013670 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   13670:	b580      	push	{r7, lr}
   13672:	b084      	sub	sp, #16
   13674:	af00      	add	r7, sp, #0
   13676:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   13678:	687b      	ldr	r3, [r7, #4]
   1367a:	2b00      	cmp	r3, #0
   1367c:	d102      	bne.n	13684 <AppDbGetNextRecord+0x14>
  {
    pRec = appDb.rec;
   1367e:	4b14      	ldr	r3, [pc, #80]	; (136d0 <AppDbGetNextRecord+0x60>)
   13680:	60fb      	str	r3, [r7, #12]
   13682:	e01c      	b.n	136be <AppDbGetNextRecord+0x4e>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   13684:	6878      	ldr	r0, [r7, #4]
   13686:	f000 f859 	bl	1373c <AppDbRecordInUse>
   1368a:	4603      	mov	r3, r0
   1368c:	2b00      	cmp	r3, #0
   1368e:	d005      	beq.n	1369c <AppDbGetNextRecord+0x2c>
  {
    pRec = (appDbRec_t *)hdl;
   13690:	687b      	ldr	r3, [r7, #4]
   13692:	60fb      	str	r3, [r7, #12]
    pRec++;
   13694:	68fb      	ldr	r3, [r7, #12]
   13696:	33b0      	adds	r3, #176	; 0xb0
   13698:	60fb      	str	r3, [r7, #12]
   1369a:	e010      	b.n	136be <AppDbGetNextRecord+0x4e>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   1369c:	2300      	movs	r3, #0
   1369e:	e013      	b.n	136c8 <AppDbGetNextRecord+0x58>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   136a0:	68fb      	ldr	r3, [r7, #12]
   136a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   136a6:	2b00      	cmp	r3, #0
   136a8:	d006      	beq.n	136b8 <AppDbGetNextRecord+0x48>
   136aa:	68fb      	ldr	r3, [r7, #12]
   136ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   136b0:	2b00      	cmp	r3, #0
   136b2:	d001      	beq.n	136b8 <AppDbGetNextRecord+0x48>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   136b4:	68fb      	ldr	r3, [r7, #12]
   136b6:	e007      	b.n	136c8 <AppDbGetNextRecord+0x58>
    }

    /* look for next record */
    pRec++;
   136b8:	68fb      	ldr	r3, [r7, #12]
   136ba:	33b0      	adds	r3, #176	; 0xb0
   136bc:	60fb      	str	r3, [r7, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   136be:	68fb      	ldr	r3, [r7, #12]
   136c0:	4a04      	ldr	r2, [pc, #16]	; (136d4 <AppDbGetNextRecord+0x64>)
   136c2:	4293      	cmp	r3, r2
   136c4:	d3ec      	bcc.n	136a0 <AppDbGetNextRecord+0x30>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   136c6:	2300      	movs	r3, #0
}
   136c8:	4618      	mov	r0, r3
   136ca:	3710      	adds	r7, #16
   136cc:	46bd      	mov	sp, r7
   136ce:	bd80      	pop	{r7, pc}
   136d0:	10004fbc 	.word	0x10004fbc
   136d4:	100051cc 	.word	0x100051cc

000136d8 <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   136d8:	b480      	push	{r7}
   136da:	b083      	sub	sp, #12
   136dc:	af00      	add	r7, sp, #0
   136de:	6078      	str	r0, [r7, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   136e0:	687b      	ldr	r3, [r7, #4]
   136e2:	2200      	movs	r2, #0
   136e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   136e8:	bf00      	nop
   136ea:	370c      	adds	r7, #12
   136ec:	46bd      	mov	sp, r7
   136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   136f2:	4770      	bx	lr

000136f4 <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   136f4:	b480      	push	{r7}
   136f6:	b083      	sub	sp, #12
   136f8:	af00      	add	r7, sp, #0
   136fa:	6078      	str	r0, [r7, #4]
   136fc:	460b      	mov	r3, r1
   136fe:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   13700:	687b      	ldr	r3, [r7, #4]
   13702:	2201      	movs	r2, #1
   13704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   13708:	687b      	ldr	r3, [r7, #4]
   1370a:	78fa      	ldrb	r2, [r7, #3]
   1370c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
   13710:	bf00      	nop
   13712:	370c      	adds	r7, #12
   13714:	46bd      	mov	sp, r7
   13716:	f85d 7b04 	ldr.w	r7, [sp], #4
   1371a:	4770      	bx	lr

0001371c <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   1371c:	b580      	push	{r7, lr}
   1371e:	b082      	sub	sp, #8
   13720:	af00      	add	r7, sp, #0
   13722:	6078      	str	r0, [r7, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   13724:	687b      	ldr	r3, [r7, #4]
   13726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1372a:	2b00      	cmp	r3, #0
   1372c:	d102      	bne.n	13734 <AppDbCheckValidRecord+0x18>
  {
    AppDbDeleteRecord(hdl);
   1372e:	6878      	ldr	r0, [r7, #4]
   13730:	f7ff ffd2 	bl	136d8 <AppDbDeleteRecord>
  }
}
   13734:	bf00      	nop
   13736:	3708      	adds	r7, #8
   13738:	46bd      	mov	sp, r7
   1373a:	bd80      	pop	{r7, pc}

0001373c <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   1373c:	b480      	push	{r7}
   1373e:	b085      	sub	sp, #20
   13740:	af00      	add	r7, sp, #0
   13742:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec = appDb.rec;
   13744:	4b12      	ldr	r3, [pc, #72]	; (13790 <AppDbRecordInUse+0x54>)
   13746:	60fb      	str	r3, [r7, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13748:	2303      	movs	r3, #3
   1374a:	72fb      	strb	r3, [r7, #11]
   1374c:	e015      	b.n	1377a <AppDbRecordInUse+0x3e>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   1374e:	68fb      	ldr	r3, [r7, #12]
   13750:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   13754:	2b00      	cmp	r3, #0
   13756:	d00a      	beq.n	1376e <AppDbRecordInUse+0x32>
   13758:	68fb      	ldr	r3, [r7, #12]
   1375a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1375e:	2b00      	cmp	r3, #0
   13760:	d005      	beq.n	1376e <AppDbRecordInUse+0x32>
   13762:	68fa      	ldr	r2, [r7, #12]
   13764:	687b      	ldr	r3, [r7, #4]
   13766:	429a      	cmp	r2, r3
   13768:	d101      	bne.n	1376e <AppDbRecordInUse+0x32>
    {
      return TRUE;
   1376a:	2301      	movs	r3, #1
   1376c:	e009      	b.n	13782 <AppDbRecordInUse+0x46>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1376e:	7afb      	ldrb	r3, [r7, #11]
   13770:	3b01      	subs	r3, #1
   13772:	72fb      	strb	r3, [r7, #11]
   13774:	68fb      	ldr	r3, [r7, #12]
   13776:	33b0      	adds	r3, #176	; 0xb0
   13778:	60fb      	str	r3, [r7, #12]
   1377a:	7afb      	ldrb	r3, [r7, #11]
   1377c:	2b00      	cmp	r3, #0
   1377e:	d1e6      	bne.n	1374e <AppDbRecordInUse+0x12>
    }
  }

  return FALSE;
   13780:	2300      	movs	r3, #0
}
   13782:	4618      	mov	r0, r3
   13784:	3714      	adds	r7, #20
   13786:	46bd      	mov	sp, r7
   13788:	f85d 7b04 	ldr.w	r7, [sp], #4
   1378c:	4770      	bx	lr
   1378e:	bf00      	nop
   13790:	10004fbc 	.word	0x10004fbc

00013794 <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
   13794:	b480      	push	{r7}
   13796:	b083      	sub	sp, #12
   13798:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   1379a:	4b0c      	ldr	r3, [pc, #48]	; (137cc <AppDbDeleteAllRecords+0x38>)
   1379c:	607b      	str	r3, [r7, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1379e:	2303      	movs	r3, #3
   137a0:	70fb      	strb	r3, [r7, #3]
   137a2:	e009      	b.n	137b8 <AppDbDeleteAllRecords+0x24>
  {
    pRec->inUse = FALSE;
   137a4:	687b      	ldr	r3, [r7, #4]
   137a6:	2200      	movs	r2, #0
   137a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   137ac:	78fb      	ldrb	r3, [r7, #3]
   137ae:	3b01      	subs	r3, #1
   137b0:	70fb      	strb	r3, [r7, #3]
   137b2:	687b      	ldr	r3, [r7, #4]
   137b4:	33b0      	adds	r3, #176	; 0xb0
   137b6:	607b      	str	r3, [r7, #4]
   137b8:	78fb      	ldrb	r3, [r7, #3]
   137ba:	2b00      	cmp	r3, #0
   137bc:	d1f2      	bne.n	137a4 <AppDbDeleteAllRecords+0x10>
  }  
}
   137be:	bf00      	nop
   137c0:	370c      	adds	r7, #12
   137c2:	46bd      	mov	sp, r7
   137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   137c8:	4770      	bx	lr
   137ca:	bf00      	nop
   137cc:	10004fbc 	.word	0x10004fbc

000137d0 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   137d0:	b580      	push	{r7, lr}
   137d2:	b084      	sub	sp, #16
   137d4:	af00      	add	r7, sp, #0
   137d6:	4603      	mov	r3, r0
   137d8:	6039      	str	r1, [r7, #0]
   137da:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   137dc:	4b16      	ldr	r3, [pc, #88]	; (13838 <AppDbFindByAddr+0x68>)
   137de:	60fb      	str	r3, [r7, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   137e0:	79fb      	ldrb	r3, [r7, #7]
   137e2:	4618      	mov	r0, r3
   137e4:	f7fc f9e4 	bl	fbb0 <DmHostAddrType>
   137e8:	4603      	mov	r3, r0
   137ea:	72bb      	strb	r3, [r7, #10]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   137ec:	2303      	movs	r3, #3
   137ee:	72fb      	strb	r3, [r7, #11]
   137f0:	e019      	b.n	13826 <AppDbFindByAddr+0x56>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   137f2:	68fb      	ldr	r3, [r7, #12]
   137f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   137f8:	2b00      	cmp	r3, #0
   137fa:	d00e      	beq.n	1381a <AppDbFindByAddr+0x4a>
   137fc:	68fb      	ldr	r3, [r7, #12]
   137fe:	799b      	ldrb	r3, [r3, #6]
   13800:	7aba      	ldrb	r2, [r7, #10]
   13802:	429a      	cmp	r2, r3
   13804:	d109      	bne.n	1381a <AppDbFindByAddr+0x4a>
   13806:	68fb      	ldr	r3, [r7, #12]
   13808:	6839      	ldr	r1, [r7, #0]
   1380a:	4618      	mov	r0, r3
   1380c:	f000 fa52 	bl	13cb4 <BdaCmp>
   13810:	4603      	mov	r3, r0
   13812:	2b00      	cmp	r3, #0
   13814:	d001      	beq.n	1381a <AppDbFindByAddr+0x4a>
    {
      return (appDbHdl_t) pRec;
   13816:	68fb      	ldr	r3, [r7, #12]
   13818:	e009      	b.n	1382e <AppDbFindByAddr+0x5e>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1381a:	7afb      	ldrb	r3, [r7, #11]
   1381c:	3b01      	subs	r3, #1
   1381e:	72fb      	strb	r3, [r7, #11]
   13820:	68fb      	ldr	r3, [r7, #12]
   13822:	33b0      	adds	r3, #176	; 0xb0
   13824:	60fb      	str	r3, [r7, #12]
   13826:	7afb      	ldrb	r3, [r7, #11]
   13828:	2b00      	cmp	r3, #0
   1382a:	d1e2      	bne.n	137f2 <AppDbFindByAddr+0x22>
    }
  }
  
  return APP_DB_HDL_NONE;
   1382c:	2300      	movs	r3, #0
}
   1382e:	4618      	mov	r0, r3
   13830:	3710      	adds	r7, #16
   13832:	46bd      	mov	sp, r7
   13834:	bd80      	pop	{r7, pc}
   13836:	bf00      	nop
   13838:	10004fbc 	.word	0x10004fbc

0001383c <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   1383c:	b480      	push	{r7}
   1383e:	b087      	sub	sp, #28
   13840:	af00      	add	r7, sp, #0
   13842:	60f8      	str	r0, [r7, #12]
   13844:	460b      	mov	r3, r1
   13846:	607a      	str	r2, [r7, #4]
   13848:	72fb      	strb	r3, [r7, #11]
  dmSecKey_t *pKey = NULL;
   1384a:	2300      	movs	r3, #0
   1384c:	617b      	str	r3, [r7, #20]
  
  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   1384e:	68fb      	ldr	r3, [r7, #12]
   13850:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   13854:	7afb      	ldrb	r3, [r7, #11]
   13856:	4013      	ands	r3, r2
   13858:	b2db      	uxtb	r3, r3
   1385a:	2b00      	cmp	r3, #0
   1385c:	d031      	beq.n	138c2 <AppDbGetKey+0x86>
  {
    switch(type)
   1385e:	7afb      	ldrb	r3, [r7, #11]
   13860:	3b01      	subs	r3, #1
   13862:	2b07      	cmp	r3, #7
   13864:	d82c      	bhi.n	138c0 <AppDbGetKey+0x84>
   13866:	a201      	add	r2, pc, #4	; (adr r2, 1386c <AppDbGetKey+0x30>)
   13868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1386c:	0001388d 	.word	0x0001388d
   13870:	0001389f 	.word	0x0001389f
   13874:	000138c1 	.word	0x000138c1
   13878:	000138b1 	.word	0x000138b1
   1387c:	000138c1 	.word	0x000138c1
   13880:	000138c1 	.word	0x000138c1
   13884:	000138c1 	.word	0x000138c1
   13888:	000138b9 	.word	0x000138b9
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   1388c:	68fb      	ldr	r3, [r7, #12]
   1388e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   13892:	687b      	ldr	r3, [r7, #4]
   13894:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   13896:	68fb      	ldr	r3, [r7, #12]
   13898:	3334      	adds	r3, #52	; 0x34
   1389a:	617b      	str	r3, [r7, #20]
        break;
   1389c:	e011      	b.n	138c2 <AppDbGetKey+0x86>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   1389e:	68fb      	ldr	r3, [r7, #12]
   138a0:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   138a4:	687b      	ldr	r3, [r7, #4]
   138a6:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   138a8:	68fb      	ldr	r3, [r7, #12]
   138aa:	3350      	adds	r3, #80	; 0x50
   138ac:	617b      	str	r3, [r7, #20]
        break;
   138ae:	e008      	b.n	138c2 <AppDbGetKey+0x86>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   138b0:	68fb      	ldr	r3, [r7, #12]
   138b2:	3307      	adds	r3, #7
   138b4:	617b      	str	r3, [r7, #20]
        break;
   138b6:	e004      	b.n	138c2 <AppDbGetKey+0x86>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   138b8:	68fb      	ldr	r3, [r7, #12]
   138ba:	331e      	adds	r3, #30
   138bc:	617b      	str	r3, [r7, #20]
        break;
   138be:	e000      	b.n	138c2 <AppDbGetKey+0x86>
        
      default:
        break;
   138c0:	bf00      	nop
    }
  }
  
  return pKey;
   138c2:	697b      	ldr	r3, [r7, #20]
}
   138c4:	4618      	mov	r0, r3
   138c6:	371c      	adds	r7, #28
   138c8:	46bd      	mov	sp, r7
   138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   138ce:	4770      	bx	lr

000138d0 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   138d0:	b5b0      	push	{r4, r5, r7, lr}
   138d2:	b082      	sub	sp, #8
   138d4:	af00      	add	r7, sp, #0
   138d6:	6078      	str	r0, [r7, #4]
   138d8:	6039      	str	r1, [r7, #0]
  switch(pKey->type)
   138da:	683b      	ldr	r3, [r7, #0]
   138dc:	7f9b      	ldrb	r3, [r3, #30]
   138de:	3b01      	subs	r3, #1
   138e0:	2b07      	cmp	r3, #7
   138e2:	d86c      	bhi.n	139be <AppDbSetKey+0xee>
   138e4:	a201      	add	r2, pc, #4	; (adr r2, 138ec <AppDbSetKey+0x1c>)
   138e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   138ea:	bf00      	nop
   138ec:	0001390d 	.word	0x0001390d
   138f0:	00013937 	.word	0x00013937
   138f4:	000139bf 	.word	0x000139bf
   138f8:	00013961 	.word	0x00013961
   138fc:	000139bf 	.word	0x000139bf
   13900:	000139bf 	.word	0x000139bf
   13904:	000139bf 	.word	0x000139bf
   13908:	0001399d 	.word	0x0001399d
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   1390c:	683b      	ldr	r3, [r7, #0]
   1390e:	7fda      	ldrb	r2, [r3, #31]
   13910:	687b      	ldr	r3, [r7, #4]
   13912:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   13916:	687a      	ldr	r2, [r7, #4]
   13918:	683b      	ldr	r3, [r7, #0]
   1391a:	f102 0434 	add.w	r4, r2, #52	; 0x34
   1391e:	1d1d      	adds	r5, r3, #4
   13920:	6828      	ldr	r0, [r5, #0]
   13922:	6869      	ldr	r1, [r5, #4]
   13924:	68aa      	ldr	r2, [r5, #8]
   13926:	68eb      	ldr	r3, [r5, #12]
   13928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1392a:	6928      	ldr	r0, [r5, #16]
   1392c:	6969      	ldr	r1, [r5, #20]
   1392e:	c403      	stmia	r4!, {r0, r1}
   13930:	8b2b      	ldrh	r3, [r5, #24]
   13932:	8023      	strh	r3, [r4, #0]
      break;
   13934:	e044      	b.n	139c0 <AppDbSetKey+0xf0>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   13936:	683b      	ldr	r3, [r7, #0]
   13938:	7fda      	ldrb	r2, [r3, #31]
   1393a:	687b      	ldr	r3, [r7, #4]
   1393c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   13940:	687a      	ldr	r2, [r7, #4]
   13942:	683b      	ldr	r3, [r7, #0]
   13944:	f102 0450 	add.w	r4, r2, #80	; 0x50
   13948:	1d1d      	adds	r5, r3, #4
   1394a:	6828      	ldr	r0, [r5, #0]
   1394c:	6869      	ldr	r1, [r5, #4]
   1394e:	68aa      	ldr	r2, [r5, #8]
   13950:	68eb      	ldr	r3, [r5, #12]
   13952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13954:	6928      	ldr	r0, [r5, #16]
   13956:	6969      	ldr	r1, [r5, #20]
   13958:	c403      	stmia	r4!, {r0, r1}
   1395a:	8b2b      	ldrh	r3, [r5, #24]
   1395c:	8023      	strh	r3, [r4, #0]
      break;
   1395e:	e02f      	b.n	139c0 <AppDbSetKey+0xf0>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   13960:	687b      	ldr	r3, [r7, #4]
   13962:	683a      	ldr	r2, [r7, #0]
   13964:	3307      	adds	r3, #7
   13966:	3204      	adds	r2, #4
   13968:	6811      	ldr	r1, [r2, #0]
   1396a:	6855      	ldr	r5, [r2, #4]
   1396c:	6894      	ldr	r4, [r2, #8]
   1396e:	68d0      	ldr	r0, [r2, #12]
   13970:	6019      	str	r1, [r3, #0]
   13972:	605d      	str	r5, [r3, #4]
   13974:	609c      	str	r4, [r3, #8]
   13976:	60d8      	str	r0, [r3, #12]
   13978:	6911      	ldr	r1, [r2, #16]
   1397a:	6119      	str	r1, [r3, #16]
   1397c:	8a91      	ldrh	r1, [r2, #20]
   1397e:	7d92      	ldrb	r2, [r2, #22]
   13980:	8299      	strh	r1, [r3, #20]
   13982:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   13984:	683b      	ldr	r3, [r7, #0]
   13986:	7e9a      	ldrb	r2, [r3, #26]
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   1398c:	687a      	ldr	r2, [r7, #4]
   1398e:	683b      	ldr	r3, [r7, #0]
   13990:	3314      	adds	r3, #20
   13992:	4619      	mov	r1, r3
   13994:	4610      	mov	r0, r2
   13996:	f000 f97f 	bl	13c98 <BdaCpy>
      break;
   1399a:	e011      	b.n	139c0 <AppDbSetKey+0xf0>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	683a      	ldr	r2, [r7, #0]
   139a0:	331e      	adds	r3, #30
   139a2:	3204      	adds	r2, #4
   139a4:	6814      	ldr	r4, [r2, #0]
   139a6:	6850      	ldr	r0, [r2, #4]
   139a8:	6891      	ldr	r1, [r2, #8]
   139aa:	68d2      	ldr	r2, [r2, #12]
   139ac:	601c      	str	r4, [r3, #0]
   139ae:	6058      	str	r0, [r3, #4]
   139b0:	6099      	str	r1, [r3, #8]
   139b2:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	2200      	movs	r2, #0
   139b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   139bc:	e000      	b.n	139c0 <AppDbSetKey+0xf0>
      
    default:
      break;
   139be:	bf00      	nop
  }
}
   139c0:	bf00      	nop
   139c2:	3708      	adds	r7, #8
   139c4:	46bd      	mov	sp, r7
   139c6:	bdb0      	pop	{r4, r5, r7, pc}

000139c8 <AppDbGetDiscStatus>:
 *
 *  \return Discovery status.
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
   139c8:	b480      	push	{r7}
   139ca:	b083      	sub	sp, #12
   139cc:	af00      	add	r7, sp, #0
   139ce:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->discStatus;
   139d0:	687b      	ldr	r3, [r7, #4]
   139d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
}
   139d6:	4618      	mov	r0, r3
   139d8:	370c      	adds	r7, #12
   139da:	46bd      	mov	sp, r7
   139dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   139e0:	4770      	bx	lr

000139e2 <AppDbSetDiscStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
   139e2:	b480      	push	{r7}
   139e4:	b083      	sub	sp, #12
   139e6:	af00      	add	r7, sp, #0
   139e8:	6078      	str	r0, [r7, #4]
   139ea:	460b      	mov	r3, r1
   139ec:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->discStatus = status;
   139ee:	687b      	ldr	r3, [r7, #4]
   139f0:	78fa      	ldrb	r2, [r7, #3]
   139f2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
   139f6:	bf00      	nop
   139f8:	370c      	adds	r7, #12
   139fa:	46bd      	mov	sp, r7
   139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a00:	4770      	bx	lr

00013a02 <AppDbGetHdlList>:
 *
 *  \return Pointer to handle list.
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
   13a02:	b480      	push	{r7}
   13a04:	b083      	sub	sp, #12
   13a06:	af00      	add	r7, sp, #0
   13a08:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->hdlList;
   13a0a:	687b      	ldr	r3, [r7, #4]
   13a0c:	3384      	adds	r3, #132	; 0x84
}
   13a0e:	4618      	mov	r0, r3
   13a10:	370c      	adds	r7, #12
   13a12:	46bd      	mov	sp, r7
   13a14:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a18:	4770      	bx	lr

00013a1a <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   13a1a:	b580      	push	{r7, lr}
   13a1c:	b082      	sub	sp, #8
   13a1e:	af00      	add	r7, sp, #0
   13a20:	6078      	str	r0, [r7, #4]
   13a22:	6039      	str	r1, [r7, #0]
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   13a24:	687b      	ldr	r3, [r7, #4]
   13a26:	3384      	adds	r3, #132	; 0x84
   13a28:	2228      	movs	r2, #40	; 0x28
   13a2a:	6839      	ldr	r1, [r7, #0]
   13a2c:	4618      	mov	r0, r3
   13a2e:	f7f8 fb97 	bl	c160 <memcpy>
}
   13a32:	bf00      	nop
   13a34:	3708      	adds	r7, #8
   13a36:	46bd      	mov	sp, r7
   13a38:	bd80      	pop	{r7, pc}

00013a3a <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   13a3a:	b480      	push	{r7}
   13a3c:	b083      	sub	sp, #12
   13a3e:	af00      	add	r7, sp, #0
   13a40:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   13a42:	687b      	ldr	r3, [r7, #4]
   13a44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   13a48:	4618      	mov	r0, r3
   13a4a:	370c      	adds	r7, #12
   13a4c:	46bd      	mov	sp, r7
   13a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a52:	4770      	bx	lr

00013a54 <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   13a54:	b480      	push	{r7}
   13a56:	b083      	sub	sp, #12
   13a58:	af00      	add	r7, sp, #0
   13a5a:	6078      	str	r0, [r7, #4]
   13a5c:	460b      	mov	r3, r1
   13a5e:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   13a60:	687b      	ldr	r3, [r7, #4]
   13a62:	78fa      	ldrb	r2, [r7, #3]
   13a64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   13a68:	bf00      	nop
   13a6a:	370c      	adds	r7, #12
   13a6c:	46bd      	mov	sp, r7
   13a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a72:	4770      	bx	lr

00013a74 <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   13a74:	b480      	push	{r7}
   13a76:	b083      	sub	sp, #12
   13a78:	af00      	add	r7, sp, #0
   13a7a:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   13a7c:	687b      	ldr	r3, [r7, #4]
   13a7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   13a82:	4618      	mov	r0, r3
   13a84:	370c      	adds	r7, #12
   13a86:	46bd      	mov	sp, r7
   13a88:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a8c:	4770      	bx	lr

00013a8e <AppDbSetPeerRpao>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerRpao(appDbHdl_t hdl, bool_t peerRpao)
{
   13a8e:	b480      	push	{r7}
   13a90:	b083      	sub	sp, #12
   13a92:	af00      	add	r7, sp, #0
   13a94:	6078      	str	r0, [r7, #4]
   13a96:	460b      	mov	r3, r1
   13a98:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerRpao = peerRpao;
   13a9a:	687b      	ldr	r3, [r7, #4]
   13a9c:	78fa      	ldrb	r2, [r7, #3]
   13a9e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   13aa2:	bf00      	nop
   13aa4:	370c      	adds	r7, #12
   13aa6:	46bd      	mov	sp, r7
   13aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
   13aac:	4770      	bx	lr
	...

00013ab0 <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   13ab0:	b580      	push	{r7, lr}
   13ab2:	b082      	sub	sp, #8
   13ab4:	af00      	add	r7, sp, #0
   13ab6:	4603      	mov	r3, r0
   13ab8:	71fb      	strb	r3, [r7, #7]
  switch (event)
   13aba:	79fb      	ldrb	r3, [r7, #7]
   13abc:	2b11      	cmp	r3, #17
   13abe:	d868      	bhi.n	13b92 <AppUiAction+0xe2>
   13ac0:	a201      	add	r2, pc, #4	; (adr r2, 13ac8 <AppUiAction+0x18>)
   13ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13ac6:	bf00      	nop
   13ac8:	00013b91 	.word	0x00013b91
   13acc:	00013b11 	.word	0x00013b11
   13ad0:	00013b93 	.word	0x00013b93
   13ad4:	00013b19 	.word	0x00013b19
   13ad8:	00013b21 	.word	0x00013b21
   13adc:	00013b29 	.word	0x00013b29
   13ae0:	00013b31 	.word	0x00013b31
   13ae4:	00013b39 	.word	0x00013b39
   13ae8:	00013b41 	.word	0x00013b41
   13aec:	00013b49 	.word	0x00013b49
   13af0:	00013b51 	.word	0x00013b51
   13af4:	00013b59 	.word	0x00013b59
   13af8:	00013b61 	.word	0x00013b61
   13afc:	00013b69 	.word	0x00013b69
   13b00:	00013b71 	.word	0x00013b71
   13b04:	00013b79 	.word	0x00013b79
   13b08:	00013b81 	.word	0x00013b81
   13b0c:	00013b89 	.word	0x00013b89
    case APP_UI_NONE:
      /* no action */
      break;
      
    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   13b10:	4822      	ldr	r0, [pc, #136]	; (13b9c <AppUiAction+0xec>)
   13b12:	f002 f821 	bl	15b58 <WsfTrace>
      break;
   13b16:	e03c      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   13b18:	4821      	ldr	r0, [pc, #132]	; (13ba0 <AppUiAction+0xf0>)
   13b1a:	f002 f81d 	bl	15b58 <WsfTrace>
      break;
   13b1e:	e038      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   13b20:	4820      	ldr	r0, [pc, #128]	; (13ba4 <AppUiAction+0xf4>)
   13b22:	f002 f819 	bl	15b58 <WsfTrace>
      break;
   13b26:	e034      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   13b28:	481f      	ldr	r0, [pc, #124]	; (13ba8 <AppUiAction+0xf8>)
   13b2a:	f002 f815 	bl	15b58 <WsfTrace>
      break;
   13b2e:	e030      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   13b30:	481e      	ldr	r0, [pc, #120]	; (13bac <AppUiAction+0xfc>)
   13b32:	f002 f811 	bl	15b58 <WsfTrace>
      break;
   13b36:	e02c      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   13b38:	481d      	ldr	r0, [pc, #116]	; (13bb0 <AppUiAction+0x100>)
   13b3a:	f002 f80d 	bl	15b58 <WsfTrace>
      break;
   13b3e:	e028      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   13b40:	481c      	ldr	r0, [pc, #112]	; (13bb4 <AppUiAction+0x104>)
   13b42:	f002 f809 	bl	15b58 <WsfTrace>
      break;
   13b46:	e024      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   13b48:	481b      	ldr	r0, [pc, #108]	; (13bb8 <AppUiAction+0x108>)
   13b4a:	f002 f805 	bl	15b58 <WsfTrace>
      break;
   13b4e:	e020      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   13b50:	481a      	ldr	r0, [pc, #104]	; (13bbc <AppUiAction+0x10c>)
   13b52:	f002 f801 	bl	15b58 <WsfTrace>
      break;
   13b56:	e01c      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   13b58:	4819      	ldr	r0, [pc, #100]	; (13bc0 <AppUiAction+0x110>)
   13b5a:	f001 fffd 	bl	15b58 <WsfTrace>
      break;
   13b5e:	e018      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   13b60:	4818      	ldr	r0, [pc, #96]	; (13bc4 <AppUiAction+0x114>)
   13b62:	f001 fff9 	bl	15b58 <WsfTrace>
      break;
   13b66:	e014      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   13b68:	4817      	ldr	r0, [pc, #92]	; (13bc8 <AppUiAction+0x118>)
   13b6a:	f001 fff5 	bl	15b58 <WsfTrace>
      break;
   13b6e:	e010      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   13b70:	4816      	ldr	r0, [pc, #88]	; (13bcc <AppUiAction+0x11c>)
   13b72:	f001 fff1 	bl	15b58 <WsfTrace>
      break;
   13b76:	e00c      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   13b78:	4815      	ldr	r0, [pc, #84]	; (13bd0 <AppUiAction+0x120>)
   13b7a:	f001 ffed 	bl	15b58 <WsfTrace>
      break;
   13b7e:	e008      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   13b80:	4814      	ldr	r0, [pc, #80]	; (13bd4 <AppUiAction+0x124>)
   13b82:	f001 ffe9 	bl	15b58 <WsfTrace>
      break;
   13b86:	e004      	b.n	13b92 <AppUiAction+0xe2>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   13b88:	4813      	ldr	r0, [pc, #76]	; (13bd8 <AppUiAction+0x128>)
   13b8a:	f001 ffe5 	bl	15b58 <WsfTrace>
      break;
   13b8e:	e000      	b.n	13b92 <AppUiAction+0xe2>
      break;
   13b90:	bf00      	nop
  }
}
   13b92:	bf00      	nop
   13b94:	3708      	adds	r7, #8
   13b96:	46bd      	mov	sp, r7
   13b98:	bd80      	pop	{r7, pc}
   13b9a:	bf00      	nop
   13b9c:	0002449c 	.word	0x0002449c
   13ba0:	000244b4 	.word	0x000244b4
   13ba4:	000244d0 	.word	0x000244d0
   13ba8:	000244ec 	.word	0x000244ec
   13bac:	00024508 	.word	0x00024508
   13bb0:	00024524 	.word	0x00024524
   13bb4:	0002454c 	.word	0x0002454c
   13bb8:	00024568 	.word	0x00024568
   13bbc:	00024584 	.word	0x00024584
   13bc0:	000245ac 	.word	0x000245ac
   13bc4:	000245c4 	.word	0x000245c4
   13bc8:	000245e4 	.word	0x000245e4
   13bcc:	00024600 	.word	0x00024600
   13bd0:	00024628 	.word	0x00024628
   13bd4:	0002464c 	.word	0x0002464c
   13bd8:	00024660 	.word	0x00024660

00013bdc <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   13bdc:	b580      	push	{r7, lr}
   13bde:	b082      	sub	sp, #8
   13be0:	af00      	add	r7, sp, #0
   13be2:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   13be4:	6879      	ldr	r1, [r7, #4]
   13be6:	4803      	ldr	r0, [pc, #12]	; (13bf4 <AppUiDisplayPasskey+0x18>)
   13be8:	f001 ffb6 	bl	15b58 <WsfTrace>
}
   13bec:	bf00      	nop
   13bee:	3708      	adds	r7, #8
   13bf0:	46bd      	mov	sp, r7
   13bf2:	bd80      	pop	{r7, pc}
   13bf4:	00024674 	.word	0x00024674

00013bf8 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   13bf8:	b580      	push	{r7, lr}
   13bfa:	b082      	sub	sp, #8
   13bfc:	af00      	add	r7, sp, #0
   13bfe:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   13c00:	6879      	ldr	r1, [r7, #4]
   13c02:	4803      	ldr	r0, [pc, #12]	; (13c10 <AppUiDisplayConfirmValue+0x18>)
   13c04:	f001 ffa8 	bl	15b58 <WsfTrace>
}
   13c08:	bf00      	nop
   13c0a:	3708      	adds	r7, #8
   13c0c:	46bd      	mov	sp, r7
   13c0e:	bd80      	pop	{r7, pc}
   13c10:	00024688 	.word	0x00024688

00013c14 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   13c14:	b480      	push	{r7}
   13c16:	b083      	sub	sp, #12
   13c18:	af00      	add	r7, sp, #0
   13c1a:	6078      	str	r0, [r7, #4]

}
   13c1c:	bf00      	nop
   13c1e:	370c      	adds	r7, #12
   13c20:	46bd      	mov	sp, r7
   13c22:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c26:	4770      	bx	lr

00013c28 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   13c28:	b480      	push	{r7}
   13c2a:	af00      	add	r7, sp, #0

}
   13c2c:	bf00      	nop
   13c2e:	46bd      	mov	sp, r7
   13c30:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c34:	4770      	bx	lr
	...

00013c38 <AppUiBtnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t cback)
{
   13c38:	b480      	push	{r7}
   13c3a:	b083      	sub	sp, #12
   13c3c:	af00      	add	r7, sp, #0
   13c3e:	6078      	str	r0, [r7, #4]
  appUiBtn.cback = cback;
   13c40:	4a04      	ldr	r2, [pc, #16]	; (13c54 <AppUiBtnRegister+0x1c>)
   13c42:	687b      	ldr	r3, [r7, #4]
   13c44:	6013      	str	r3, [r2, #0]
}
   13c46:	bf00      	nop
   13c48:	370c      	adds	r7, #12
   13c4a:	46bd      	mov	sp, r7
   13c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c50:	4770      	bx	lr
   13c52:	bf00      	nop
   13c54:	100051e4 	.word	0x100051e4

00013c58 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
   13c58:	b480      	push	{r7}
   13c5a:	af00      	add	r7, sp, #0

}
   13c5c:	bf00      	nop
   13c5e:	46bd      	mov	sp, r7
   13c60:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c64:	4770      	bx	lr
	...

00013c68 <GapDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GapDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   13c68:	b580      	push	{r7, lr}
   13c6a:	b084      	sub	sp, #16
   13c6c:	af02      	add	r7, sp, #8
   13c6e:	4603      	mov	r3, r0
   13c70:	6039      	str	r1, [r7, #0]
   13c72:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGapSvcUuid,
   13c74:	79f8      	ldrb	r0, [r7, #7]
   13c76:	683b      	ldr	r3, [r7, #0]
   13c78:	9301      	str	r3, [sp, #4]
   13c7a:	4b05      	ldr	r3, [pc, #20]	; (13c90 <GapDiscover+0x28>)
   13c7c:	9300      	str	r3, [sp, #0]
   13c7e:	2302      	movs	r3, #2
   13c80:	4a04      	ldr	r2, [pc, #16]	; (13c94 <GapDiscover+0x2c>)
   13c82:	2102      	movs	r1, #2
   13c84:	f009 fa2e 	bl	1d0e4 <AppDiscFindService>
                     GAP_HDL_LIST_LEN, (attcDiscChar_t **) gapDiscCharList, pHdlList);
}
   13c88:	bf00      	nop
   13c8a:	3708      	adds	r7, #8
   13c8c:	46bd      	mov	sp, r7
   13c8e:	bd80      	pop	{r7, pc}
   13c90:	10002b98 	.word	0x10002b98
   13c94:	00025016 	.word	0x00025016

00013c98 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   13c98:	b580      	push	{r7, lr}
   13c9a:	b082      	sub	sp, #8
   13c9c:	af00      	add	r7, sp, #0
   13c9e:	6078      	str	r0, [r7, #4]
   13ca0:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   13ca2:	2206      	movs	r2, #6
   13ca4:	6839      	ldr	r1, [r7, #0]
   13ca6:	6878      	ldr	r0, [r7, #4]
   13ca8:	f7f8 fa5a 	bl	c160 <memcpy>
}
   13cac:	bf00      	nop
   13cae:	3708      	adds	r7, #8
   13cb0:	46bd      	mov	sp, r7
   13cb2:	bd80      	pop	{r7, pc}

00013cb4 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   13cb4:	b580      	push	{r7, lr}
   13cb6:	b082      	sub	sp, #8
   13cb8:	af00      	add	r7, sp, #0
   13cba:	6078      	str	r0, [r7, #4]
   13cbc:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   13cbe:	2206      	movs	r2, #6
   13cc0:	6839      	ldr	r1, [r7, #0]
   13cc2:	6878      	ldr	r0, [r7, #4]
   13cc4:	f7f8 fa1c 	bl	c100 <memcmp>
   13cc8:	4603      	mov	r3, r0
   13cca:	2b00      	cmp	r3, #0
   13ccc:	bf0c      	ite	eq
   13cce:	2301      	moveq	r3, #1
   13cd0:	2300      	movne	r3, #0
   13cd2:	b2db      	uxtb	r3, r3
}
   13cd4:	4618      	mov	r0, r3
   13cd6:	3708      	adds	r7, #8
   13cd8:	46bd      	mov	sp, r7
   13cda:	bd80      	pop	{r7, pc}

00013cdc <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   13cdc:	b580      	push	{r7, lr}
   13cde:	b082      	sub	sp, #8
   13ce0:	af00      	add	r7, sp, #0
   13ce2:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   13ce4:	2206      	movs	r2, #6
   13ce6:	2100      	movs	r1, #0
   13ce8:	6878      	ldr	r0, [r7, #4]
   13cea:	f7f8 fb37 	bl	c35c <memset>

  return (pDst + BDA_ADDR_LEN);
   13cee:	687b      	ldr	r3, [r7, #4]
   13cf0:	3306      	adds	r3, #6
}
   13cf2:	4618      	mov	r0, r3
   13cf4:	3708      	adds	r7, #8
   13cf6:	46bd      	mov	sp, r7
   13cf8:	bd80      	pop	{r7, pc}

00013cfa <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   13cfa:	b580      	push	{r7, lr}
   13cfc:	b084      	sub	sp, #16
   13cfe:	af00      	add	r7, sp, #0
   13d00:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   13d02:	f107 0308 	add.w	r3, r7, #8
   13d06:	2200      	movs	r2, #0
   13d08:	601a      	str	r2, [r3, #0]
   13d0a:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   13d0c:	f107 0308 	add.w	r3, r7, #8
   13d10:	2206      	movs	r2, #6
   13d12:	4619      	mov	r1, r3
   13d14:	6878      	ldr	r0, [r7, #4]
   13d16:	f7f8 f9f3 	bl	c100 <memcmp>
   13d1a:	4603      	mov	r3, r0
   13d1c:	2b00      	cmp	r3, #0
   13d1e:	bf0c      	ite	eq
   13d20:	2301      	moveq	r3, #1
   13d22:	2300      	movne	r3, #0
   13d24:	b2db      	uxtb	r3, r3
}
   13d26:	4618      	mov	r0, r3
   13d28:	3710      	adds	r7, #16
   13d2a:	46bd      	mov	sp, r7
   13d2c:	bd80      	pop	{r7, pc}

00013d2e <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   13d2e:	b580      	push	{r7, lr}
   13d30:	b082      	sub	sp, #8
   13d32:	af00      	add	r7, sp, #0
   13d34:	6078      	str	r0, [r7, #4]
   13d36:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   13d38:	2210      	movs	r2, #16
   13d3a:	6839      	ldr	r1, [r7, #0]
   13d3c:	6878      	ldr	r0, [r7, #4]
   13d3e:	f7f8 fa0f 	bl	c160 <memcpy>
}
   13d42:	bf00      	nop
   13d44:	3708      	adds	r7, #8
   13d46:	46bd      	mov	sp, r7
   13d48:	bd80      	pop	{r7, pc}

00013d4a <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   13d4a:	b580      	push	{r7, lr}
   13d4c:	b082      	sub	sp, #8
   13d4e:	af00      	add	r7, sp, #0
   13d50:	6078      	str	r0, [r7, #4]
   13d52:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   13d54:	2208      	movs	r2, #8
   13d56:	6839      	ldr	r1, [r7, #0]
   13d58:	6878      	ldr	r0, [r7, #4]
   13d5a:	f7f8 fa01 	bl	c160 <memcpy>
}
   13d5e:	bf00      	nop
   13d60:	3708      	adds	r7, #8
   13d62:	46bd      	mov	sp, r7
   13d64:	bd80      	pop	{r7, pc}

00013d66 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   13d66:	b480      	push	{r7}
   13d68:	b085      	sub	sp, #20
   13d6a:	af00      	add	r7, sp, #0
   13d6c:	6078      	str	r0, [r7, #4]
   13d6e:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   13d70:	2310      	movs	r3, #16
   13d72:	73fb      	strb	r3, [r7, #15]
   13d74:	e00d      	b.n	13d92 <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
   13d76:	683b      	ldr	r3, [r7, #0]
   13d78:	1c5a      	adds	r2, r3, #1
   13d7a:	603a      	str	r2, [r7, #0]
   13d7c:	781a      	ldrb	r2, [r3, #0]
   13d7e:	687b      	ldr	r3, [r7, #4]
   13d80:	1c59      	adds	r1, r3, #1
   13d82:	6079      	str	r1, [r7, #4]
   13d84:	7819      	ldrb	r1, [r3, #0]
   13d86:	404a      	eors	r2, r1
   13d88:	b2d2      	uxtb	r2, r2
   13d8a:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   13d8c:	7bfb      	ldrb	r3, [r7, #15]
   13d8e:	3b01      	subs	r3, #1
   13d90:	73fb      	strb	r3, [r7, #15]
   13d92:	7bfb      	ldrb	r3, [r7, #15]
   13d94:	2b00      	cmp	r3, #0
   13d96:	d1ee      	bne.n	13d76 <Calc128Xor+0x10>
  }
}
   13d98:	bf00      	nop
   13d9a:	3714      	adds	r7, #20
   13d9c:	46bd      	mov	sp, r7
   13d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13da2:	4770      	bx	lr

00013da4 <CalcCrc32>:
 *    - polynomial 0x104C11DB7
 *    - bit reverse algorithm
 */
/*************************************************************************************************/
uint32_t CalcCrc32(uint32_t crcInit, uint32_t len, uint8_t *pBuf)
{
   13da4:	b480      	push	{r7}
   13da6:	b087      	sub	sp, #28
   13da8:	af00      	add	r7, sp, #0
   13daa:	60f8      	str	r0, [r7, #12]
   13dac:	60b9      	str	r1, [r7, #8]
   13dae:	607a      	str	r2, [r7, #4]
  uint32_t crc = crcInit;
   13db0:	68fb      	ldr	r3, [r7, #12]
   13db2:	617b      	str	r3, [r7, #20]

  while (len > 0)
   13db4:	e013      	b.n	13dde <CalcCrc32+0x3a>
  {
    crc = crc32Table[*pBuf ^ (uint8_t)crc] ^ (crc >> 8);
   13db6:	687b      	ldr	r3, [r7, #4]
   13db8:	781a      	ldrb	r2, [r3, #0]
   13dba:	697b      	ldr	r3, [r7, #20]
   13dbc:	b2db      	uxtb	r3, r3
   13dbe:	4053      	eors	r3, r2
   13dc0:	b2db      	uxtb	r3, r3
   13dc2:	461a      	mov	r2, r3
   13dc4:	4b0c      	ldr	r3, [pc, #48]	; (13df8 <CalcCrc32+0x54>)
   13dc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13dca:	697b      	ldr	r3, [r7, #20]
   13dcc:	0a1b      	lsrs	r3, r3, #8
   13dce:	4053      	eors	r3, r2
   13dd0:	617b      	str	r3, [r7, #20]
    pBuf++;
   13dd2:	687b      	ldr	r3, [r7, #4]
   13dd4:	3301      	adds	r3, #1
   13dd6:	607b      	str	r3, [r7, #4]
    len--;
   13dd8:	68bb      	ldr	r3, [r7, #8]
   13dda:	3b01      	subs	r3, #1
   13ddc:	60bb      	str	r3, [r7, #8]
  while (len > 0)
   13dde:	68bb      	ldr	r3, [r7, #8]
   13de0:	2b00      	cmp	r3, #0
   13de2:	d1e8      	bne.n	13db6 <CalcCrc32+0x12>
  }

  crc = crc ^ 0xFFFFFFFFU;
   13de4:	697b      	ldr	r3, [r7, #20]
   13de6:	43db      	mvns	r3, r3
   13de8:	617b      	str	r3, [r7, #20]

  return crc;
   13dea:	697b      	ldr	r3, [r7, #20]
}
   13dec:	4618      	mov	r0, r3
   13dee:	371c      	adds	r7, #28
   13df0:	46bd      	mov	sp, r7
   13df2:	f85d 7b04 	ldr.w	r7, [sp], #4
   13df6:	4770      	bx	lr
   13df8:	00025bb4 	.word	0x00025bb4

00013dfc <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   13dfc:	b480      	push	{r7}
   13dfe:	b087      	sub	sp, #28
   13e00:	af00      	add	r7, sp, #0
   13e02:	60f8      	str	r0, [r7, #12]
   13e04:	60b9      	str	r1, [r7, #8]
   13e06:	4613      	mov	r3, r2
   13e08:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
   13e0a:	2300      	movs	r3, #0
   13e0c:	82fb      	strh	r3, [r7, #22]
   13e0e:	e013      	b.n	13e38 <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
   13e10:	88fb      	ldrh	r3, [r7, #6]
   13e12:	1e5a      	subs	r2, r3, #1
   13e14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   13e18:	1ad3      	subs	r3, r2, r3
   13e1a:	461a      	mov	r2, r3
   13e1c:	68fb      	ldr	r3, [r7, #12]
   13e1e:	4413      	add	r3, r2
   13e20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   13e24:	68b9      	ldr	r1, [r7, #8]
   13e26:	440a      	add	r2, r1
   13e28:	7812      	ldrb	r2, [r2, #0]
   13e2a:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   13e2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   13e30:	b29b      	uxth	r3, r3
   13e32:	3301      	adds	r3, #1
   13e34:	b29b      	uxth	r3, r3
   13e36:	82fb      	strh	r3, [r7, #22]
   13e38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   13e3c:	88fb      	ldrh	r3, [r7, #6]
   13e3e:	429a      	cmp	r2, r3
   13e40:	dbe6      	blt.n	13e10 <WStrReverseCpy+0x14>
  }
}
   13e42:	bf00      	nop
   13e44:	371c      	adds	r7, #28
   13e46:	46bd      	mov	sp, r7
   13e48:	f85d 7b04 	ldr.w	r7, [sp], #4
   13e4c:	4770      	bx	lr

00013e4e <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   13e4e:	b480      	push	{r7}
   13e50:	b085      	sub	sp, #20
   13e52:	af00      	add	r7, sp, #0
   13e54:	6078      	str	r0, [r7, #4]
   13e56:	460b      	mov	r3, r1
   13e58:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   13e5a:	2300      	movs	r3, #0
   13e5c:	73fb      	strb	r3, [r7, #15]
   13e5e:	e01a      	b.n	13e96 <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
   13e60:	78fa      	ldrb	r2, [r7, #3]
   13e62:	7bfb      	ldrb	r3, [r7, #15]
   13e64:	1ad3      	subs	r3, r2, r3
   13e66:	3b01      	subs	r3, #1
   13e68:	687a      	ldr	r2, [r7, #4]
   13e6a:	4413      	add	r3, r2
   13e6c:	781b      	ldrb	r3, [r3, #0]
   13e6e:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
   13e70:	78fa      	ldrb	r2, [r7, #3]
   13e72:	7bfb      	ldrb	r3, [r7, #15]
   13e74:	1ad3      	subs	r3, r2, r3
   13e76:	3b01      	subs	r3, #1
   13e78:	687a      	ldr	r2, [r7, #4]
   13e7a:	4413      	add	r3, r2
   13e7c:	7bfa      	ldrb	r2, [r7, #15]
   13e7e:	6879      	ldr	r1, [r7, #4]
   13e80:	440a      	add	r2, r1
   13e82:	7812      	ldrb	r2, [r2, #0]
   13e84:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   13e86:	7bfb      	ldrb	r3, [r7, #15]
   13e88:	687a      	ldr	r2, [r7, #4]
   13e8a:	4413      	add	r3, r2
   13e8c:	7bba      	ldrb	r2, [r7, #14]
   13e8e:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   13e90:	7bfb      	ldrb	r3, [r7, #15]
   13e92:	3301      	adds	r3, #1
   13e94:	73fb      	strb	r3, [r7, #15]
   13e96:	78fb      	ldrb	r3, [r7, #3]
   13e98:	085b      	lsrs	r3, r3, #1
   13e9a:	b2db      	uxtb	r3, r3
   13e9c:	7bfa      	ldrb	r2, [r7, #15]
   13e9e:	429a      	cmp	r2, r3
   13ea0:	d3de      	bcc.n	13e60 <WStrReverse+0x12>
  }
}
   13ea2:	bf00      	nop
   13ea4:	3714      	adds	r7, #20
   13ea6:	46bd      	mov	sp, r7
   13ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
   13eac:	4770      	bx	lr
	...

00013eb0 <AmdtpcDiscover>:
 *  \return None.
 */
/*************************************************************************************************/
void
AmdtpcDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   13eb0:	b580      	push	{r7, lr}
   13eb2:	b084      	sub	sp, #16
   13eb4:	af02      	add	r7, sp, #8
   13eb6:	4603      	mov	r3, r0
   13eb8:	6039      	str	r1, [r7, #0]
   13eba:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_128_UUID_LEN, (uint8_t *) amdtpSvcUuid,
   13ebc:	79f8      	ldrb	r0, [r7, #7]
   13ebe:	683b      	ldr	r3, [r7, #0]
   13ec0:	9301      	str	r3, [sp, #4]
   13ec2:	4b05      	ldr	r3, [pc, #20]	; (13ed8 <AmdtpcDiscover+0x28>)
   13ec4:	9300      	str	r3, [sp, #0]
   13ec6:	2305      	movs	r3, #5
   13ec8:	4a04      	ldr	r2, [pc, #16]	; (13edc <AmdtpcDiscover+0x2c>)
   13eca:	2110      	movs	r1, #16
   13ecc:	f009 f90a 	bl	1d0e4 <AppDiscFindService>
                     AMDTP_HDL_LIST_LEN, (attcDiscChar_t **) amdtpDiscCharList, pHdlList);
}
   13ed0:	bf00      	nop
   13ed2:	3708      	adds	r7, #8
   13ed4:	46bd      	mov	sp, r7
   13ed6:	bd80      	pop	{r7, pc}
   13ed8:	10002ba0 	.word	0x10002ba0
   13edc:	00025fb4 	.word	0x00025fb4

00013ee0 <amdtpcSendData>:
// Send data to Server
//
//*****************************************************************************
static void
amdtpcSendData(uint8_t *buf, uint16_t len)
{
   13ee0:	b580      	push	{r7, lr}
   13ee2:	b084      	sub	sp, #16
   13ee4:	af00      	add	r7, sp, #0
   13ee6:	6078      	str	r0, [r7, #4]
   13ee8:	460b      	mov	r3, r1
   13eea:	807b      	strh	r3, [r7, #2]
    dmConnId_t connId;

    if ((connId = AppConnIsOpen()) == DM_CONN_ID_NONE)
   13eec:	f009 fa5e 	bl	1d3ac <AppConnIsOpen>
   13ef0:	4603      	mov	r3, r0
   13ef2:	73fb      	strb	r3, [r7, #15]
   13ef4:	7bfb      	ldrb	r3, [r7, #15]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d103      	bne.n	13f02 <amdtpcSendData+0x22>
    {
        APP_TRACE_INFO0("AmdtpcSendData() no connection\n");
   13efa:	480e      	ldr	r0, [pc, #56]	; (13f34 <amdtpcSendData+0x54>)
   13efc:	f001 fe2c 	bl	15b58 <WsfTrace>
        return;
   13f00:	e014      	b.n	13f2c <amdtpcSendData+0x4c>
    }
    if (amdtpcCb.attRxHdl != ATT_HANDLE_NONE)
   13f02:	4b0d      	ldr	r3, [pc, #52]	; (13f38 <amdtpcSendData+0x58>)
   13f04:	885b      	ldrh	r3, [r3, #2]
   13f06:	2b00      	cmp	r3, #0
   13f08:	d00a      	beq.n	13f20 <amdtpcSendData+0x40>
    {
        AttcWriteCmd(connId, amdtpcCb.attRxHdl, len, buf);
   13f0a:	4b0b      	ldr	r3, [pc, #44]	; (13f38 <amdtpcSendData+0x58>)
   13f0c:	8859      	ldrh	r1, [r3, #2]
   13f0e:	887a      	ldrh	r2, [r7, #2]
   13f10:	7bf8      	ldrb	r0, [r7, #15]
   13f12:	687b      	ldr	r3, [r7, #4]
   13f14:	f7f9 fad4 	bl	d4c0 <AttcWriteCmd>
        amdtpcCb.txReady = false;
   13f18:	4b07      	ldr	r3, [pc, #28]	; (13f38 <amdtpcSendData+0x58>)
   13f1a:	2200      	movs	r2, #0
   13f1c:	701a      	strb	r2, [r3, #0]
   13f1e:	e005      	b.n	13f2c <amdtpcSendData+0x4c>
    }
    else
    {
        APP_TRACE_WARN1("Invalid attRxHdl = 0x%x\n", amdtpcCb.attRxHdl);
   13f20:	4b05      	ldr	r3, [pc, #20]	; (13f38 <amdtpcSendData+0x58>)
   13f22:	885b      	ldrh	r3, [r3, #2]
   13f24:	4619      	mov	r1, r3
   13f26:	4805      	ldr	r0, [pc, #20]	; (13f3c <amdtpcSendData+0x5c>)
   13f28:	f001 fe16 	bl	15b58 <WsfTrace>
    }
}
   13f2c:	3710      	adds	r7, #16
   13f2e:	46bd      	mov	sp, r7
   13f30:	bd80      	pop	{r7, pc}
   13f32:	bf00      	nop
   13f34:	000246b8 	.word	0x000246b8
   13f38:	100051e8 	.word	0x100051e8
   13f3c:	000246d8 	.word	0x000246d8

00013f40 <amdtpcSendAck>:

static eAmdtpStatus_t
amdtpcSendAck(eAmdtpPktType_t type, bool_t encrypted, bool_t enableACK, uint8_t *buf, uint16_t len)
{
   13f40:	b580      	push	{r7, lr}
   13f42:	b086      	sub	sp, #24
   13f44:	af02      	add	r7, sp, #8
   13f46:	603b      	str	r3, [r7, #0]
   13f48:	4603      	mov	r3, r0
   13f4a:	71fb      	strb	r3, [r7, #7]
   13f4c:	460b      	mov	r3, r1
   13f4e:	71bb      	strb	r3, [r7, #6]
   13f50:	4613      	mov	r3, r2
   13f52:	717b      	strb	r3, [r7, #5]
    dmConnId_t connId;

    AmdtpBuildPkt(&amdtpcCb.core, type, encrypted, enableACK, buf, len);
   13f54:	7978      	ldrb	r0, [r7, #5]
   13f56:	79ba      	ldrb	r2, [r7, #6]
   13f58:	79f9      	ldrb	r1, [r7, #7]
   13f5a:	8b3b      	ldrh	r3, [r7, #24]
   13f5c:	9301      	str	r3, [sp, #4]
   13f5e:	683b      	ldr	r3, [r7, #0]
   13f60:	9300      	str	r3, [sp, #0]
   13f62:	4603      	mov	r3, r0
   13f64:	4814      	ldr	r0, [pc, #80]	; (13fb8 <amdtpcSendAck+0x78>)
   13f66:	f002 f833 	bl	15fd0 <AmdtpBuildPkt>

    if ((connId = AppConnIsOpen()) == DM_CONN_ID_NONE)
   13f6a:	f009 fa1f 	bl	1d3ac <AppConnIsOpen>
   13f6e:	4603      	mov	r3, r0
   13f70:	73fb      	strb	r3, [r7, #15]
   13f72:	7bfb      	ldrb	r3, [r7, #15]
   13f74:	2b00      	cmp	r3, #0
   13f76:	d104      	bne.n	13f82 <amdtpcSendAck+0x42>
    {
        APP_TRACE_INFO0("AmdtpcSendAck() no connection\n");
   13f78:	4810      	ldr	r0, [pc, #64]	; (13fbc <amdtpcSendAck+0x7c>)
   13f7a:	f001 fded 	bl	15b58 <WsfTrace>
        return AMDTP_STATUS_TX_NOT_READY;
   13f7e:	2307      	movs	r3, #7
   13f80:	e015      	b.n	13fae <amdtpcSendAck+0x6e>
    }

    if (amdtpcCb.attAckHdl != ATT_HANDLE_NONE)
   13f82:	4b0f      	ldr	r3, [pc, #60]	; (13fc0 <amdtpcSendAck+0x80>)
   13f84:	889b      	ldrh	r3, [r3, #4]
   13f86:	2b00      	cmp	r3, #0
   13f88:	d00a      	beq.n	13fa0 <amdtpcSendAck+0x60>
    {
        //APP_TRACE_INFO2("rxHdl = 0x%x, ackHdl = 0x%x\n", amdtpcCb.attRxHdl, amdtpcCb.attAckHdl);
        AttcWriteCmd(connId, amdtpcCb.attAckHdl, amdtpcCb.core.ackPkt.len, amdtpcCb.core.ackPkt.data);
   13f8a:	4b0d      	ldr	r3, [pc, #52]	; (13fc0 <amdtpcSendAck+0x80>)
   13f8c:	8899      	ldrh	r1, [r3, #4]
   13f8e:	4b0c      	ldr	r3, [pc, #48]	; (13fc0 <amdtpcSendAck+0x80>)
   13f90:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   13f92:	4b0b      	ldr	r3, [pc, #44]	; (13fc0 <amdtpcSendAck+0x80>)
   13f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13f96:	7bf8      	ldrb	r0, [r7, #15]
   13f98:	f7f9 fa92 	bl	d4c0 <AttcWriteCmd>
    else
    {
        APP_TRACE_INFO1("Invalid attAckHdl = 0x%x\n", amdtpcCb.attAckHdl);
        return AMDTP_STATUS_TX_NOT_READY;
    }
    return AMDTP_STATUS_SUCCESS;
   13f9c:	2300      	movs	r3, #0
   13f9e:	e006      	b.n	13fae <amdtpcSendAck+0x6e>
        APP_TRACE_INFO1("Invalid attAckHdl = 0x%x\n", amdtpcCb.attAckHdl);
   13fa0:	4b07      	ldr	r3, [pc, #28]	; (13fc0 <amdtpcSendAck+0x80>)
   13fa2:	889b      	ldrh	r3, [r3, #4]
   13fa4:	4619      	mov	r1, r3
   13fa6:	4807      	ldr	r0, [pc, #28]	; (13fc4 <amdtpcSendAck+0x84>)
   13fa8:	f001 fdd6 	bl	15b58 <WsfTrace>
        return AMDTP_STATUS_TX_NOT_READY;
   13fac:	2307      	movs	r3, #7
}
   13fae:	4618      	mov	r0, r3
   13fb0:	3710      	adds	r7, #16
   13fb2:	46bd      	mov	sp, r7
   13fb4:	bd80      	pop	{r7, pc}
   13fb6:	bf00      	nop
   13fb8:	100051f0 	.word	0x100051f0
   13fbc:	000246f4 	.word	0x000246f4
   13fc0:	100051e8 	.word	0x100051e8
   13fc4:	00024714 	.word	0x00024714

00013fc8 <amdtpc_init>:

void
amdtpc_init(wsfHandlerId_t handlerId, amdtpRecvCback_t recvCback, amdtpTransCback_t transCback)
{
   13fc8:	b580      	push	{r7, lr}
   13fca:	b084      	sub	sp, #16
   13fcc:	af00      	add	r7, sp, #0
   13fce:	4603      	mov	r3, r0
   13fd0:	60b9      	str	r1, [r7, #8]
   13fd2:	607a      	str	r2, [r7, #4]
   13fd4:	73fb      	strb	r3, [r7, #15]
    memset(&amdtpcCb, 0, sizeof(amdtpcCb));
   13fd6:	2258      	movs	r2, #88	; 0x58
   13fd8:	2100      	movs	r1, #0
   13fda:	481f      	ldr	r0, [pc, #124]	; (14058 <amdtpc_init+0x90>)
   13fdc:	f7f8 f9be 	bl	c35c <memset>
    amdtpcCb.txReady = false;
   13fe0:	4b1d      	ldr	r3, [pc, #116]	; (14058 <amdtpc_init+0x90>)
   13fe2:	2200      	movs	r2, #0
   13fe4:	701a      	strb	r2, [r3, #0]
    amdtpcCb.core.txState = AMDTP_STATE_TX_IDLE;
   13fe6:	4b1c      	ldr	r3, [pc, #112]	; (14058 <amdtpc_init+0x90>)
   13fe8:	2201      	movs	r2, #1
   13fea:	721a      	strb	r2, [r3, #8]
    amdtpcCb.core.rxState = AMDTP_STATE_INIT;
   13fec:	4b1a      	ldr	r3, [pc, #104]	; (14058 <amdtpc_init+0x90>)
   13fee:	2200      	movs	r2, #0
   13ff0:	725a      	strb	r2, [r3, #9]
    amdtpcCb.core.timeoutTimer.handlerId = handlerId;
   13ff2:	4a19      	ldr	r2, [pc, #100]	; (14058 <amdtpc_init+0x90>)
   13ff4:	7bfb      	ldrb	r3, [r7, #15]
   13ff6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c

    amdtpcCb.core.lastRxPktSn = 0;
   13ffa:	4b17      	ldr	r3, [pc, #92]	; (14058 <amdtpc_init+0x90>)
   13ffc:	2200      	movs	r2, #0
   13ffe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    amdtpcCb.core.txPktSn = 0;
   14002:	4b15      	ldr	r3, [pc, #84]	; (14058 <amdtpc_init+0x90>)
   14004:	2200      	movs	r2, #0
   14006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    resetPkt(&amdtpcCb.core.rxPkt);
   1400a:	4814      	ldr	r0, [pc, #80]	; (1405c <amdtpc_init+0x94>)
   1400c:	f001 fdd0 	bl	15bb0 <resetPkt>
    amdtpcCb.core.rxPkt.data = rxPktBuf;
   14010:	4b11      	ldr	r3, [pc, #68]	; (14058 <amdtpc_init+0x90>)
   14012:	4a13      	ldr	r2, [pc, #76]	; (14060 <amdtpc_init+0x98>)
   14014:	615a      	str	r2, [r3, #20]

    resetPkt(&amdtpcCb.core.txPkt);
   14016:	4813      	ldr	r0, [pc, #76]	; (14064 <amdtpc_init+0x9c>)
   14018:	f001 fdca 	bl	15bb0 <resetPkt>
    amdtpcCb.core.txPkt.data = txPktBuf;
   1401c:	4b0e      	ldr	r3, [pc, #56]	; (14058 <amdtpc_init+0x90>)
   1401e:	4a12      	ldr	r2, [pc, #72]	; (14068 <amdtpc_init+0xa0>)
   14020:	621a      	str	r2, [r3, #32]

    resetPkt(&amdtpcCb.core.ackPkt);
   14022:	4812      	ldr	r0, [pc, #72]	; (1406c <amdtpc_init+0xa4>)
   14024:	f001 fdc4 	bl	15bb0 <resetPkt>
    amdtpcCb.core.ackPkt.data = ackPktBuf;
   14028:	4b0b      	ldr	r3, [pc, #44]	; (14058 <amdtpc_init+0x90>)
   1402a:	4a11      	ldr	r2, [pc, #68]	; (14070 <amdtpc_init+0xa8>)
   1402c:	62da      	str	r2, [r3, #44]	; 0x2c

    amdtpcCb.core.recvCback = recvCback;
   1402e:	4a0a      	ldr	r2, [pc, #40]	; (14058 <amdtpc_init+0x90>)
   14030:	68bb      	ldr	r3, [r7, #8]
   14032:	6493      	str	r3, [r2, #72]	; 0x48
    amdtpcCb.core.transCback = transCback;
   14034:	4a08      	ldr	r2, [pc, #32]	; (14058 <amdtpc_init+0x90>)
   14036:	687b      	ldr	r3, [r7, #4]
   14038:	64d3      	str	r3, [r2, #76]	; 0x4c

    amdtpcCb.core.txTimeoutMs = TX_TIMEOUT_DEFAULT;
   1403a:	4b07      	ldr	r3, [pc, #28]	; (14058 <amdtpc_init+0x90>)
   1403c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14040:	645a      	str	r2, [r3, #68]	; 0x44

    amdtpcCb.core.data_sender_func = amdtpcSendData;
   14042:	4b05      	ldr	r3, [pc, #20]	; (14058 <amdtpc_init+0x90>)
   14044:	4a0b      	ldr	r2, [pc, #44]	; (14074 <amdtpc_init+0xac>)
   14046:	651a      	str	r2, [r3, #80]	; 0x50
    amdtpcCb.core.ack_sender_func = amdtpcSendAck;
   14048:	4b03      	ldr	r3, [pc, #12]	; (14058 <amdtpc_init+0x90>)
   1404a:	4a0b      	ldr	r2, [pc, #44]	; (14078 <amdtpc_init+0xb0>)
   1404c:	655a      	str	r2, [r3, #84]	; 0x54
}
   1404e:	bf00      	nop
   14050:	3710      	adds	r7, #16
   14052:	46bd      	mov	sp, r7
   14054:	bd80      	pop	{r7, pc}
   14056:	bf00      	nop
   14058:	100051e8 	.word	0x100051e8
   1405c:	100051f4 	.word	0x100051f4
   14060:	10009e34 	.word	0x10009e34
   14064:	10005200 	.word	0x10005200
   14068:	10009618 	.word	0x10009618
   1406c:	1000520c 	.word	0x1000520c
   14070:	10009e20 	.word	0x10009e20
   14074:	00013ee1 	.word	0x00013ee1
   14078:	00013f41 	.word	0x00013f41

0001407c <amdtpc_conn_close>:

static void
amdtpc_conn_close(dmEvt_t *pMsg)
{
   1407c:	b580      	push	{r7, lr}
   1407e:	b082      	sub	sp, #8
   14080:	af00      	add	r7, sp, #0
   14082:	6078      	str	r0, [r7, #4]
    /* clear connection */
    WsfTimerStop(&amdtpcCb.core.timeoutTimer);
   14084:	4810      	ldr	r0, [pc, #64]	; (140c8 <amdtpc_conn_close+0x4c>)
   14086:	f000 fc93 	bl	149b0 <WsfTimerStop>
    amdtpcCb.txReady = false;
   1408a:	4b10      	ldr	r3, [pc, #64]	; (140cc <amdtpc_conn_close+0x50>)
   1408c:	2200      	movs	r2, #0
   1408e:	701a      	strb	r2, [r3, #0]
    amdtpcCb.core.txState = AMDTP_STATE_TX_IDLE;
   14090:	4b0e      	ldr	r3, [pc, #56]	; (140cc <amdtpc_conn_close+0x50>)
   14092:	2201      	movs	r2, #1
   14094:	721a      	strb	r2, [r3, #8]
    amdtpcCb.core.rxState = AMDTP_STATE_INIT;
   14096:	4b0d      	ldr	r3, [pc, #52]	; (140cc <amdtpc_conn_close+0x50>)
   14098:	2200      	movs	r2, #0
   1409a:	725a      	strb	r2, [r3, #9]
    amdtpcCb.core.lastRxPktSn = 0;
   1409c:	4b0b      	ldr	r3, [pc, #44]	; (140cc <amdtpc_conn_close+0x50>)
   1409e:	2200      	movs	r2, #0
   140a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    amdtpcCb.core.txPktSn = 0;
   140a4:	4b09      	ldr	r3, [pc, #36]	; (140cc <amdtpc_conn_close+0x50>)
   140a6:	2200      	movs	r2, #0
   140a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    resetPkt(&amdtpcCb.core.rxPkt);
   140ac:	4808      	ldr	r0, [pc, #32]	; (140d0 <amdtpc_conn_close+0x54>)
   140ae:	f001 fd7f 	bl	15bb0 <resetPkt>
    resetPkt(&amdtpcCb.core.txPkt);
   140b2:	4808      	ldr	r0, [pc, #32]	; (140d4 <amdtpc_conn_close+0x58>)
   140b4:	f001 fd7c 	bl	15bb0 <resetPkt>
    resetPkt(&amdtpcCb.core.ackPkt);
   140b8:	4807      	ldr	r0, [pc, #28]	; (140d8 <amdtpc_conn_close+0x5c>)
   140ba:	f001 fd79 	bl	15bb0 <resetPkt>
}
   140be:	bf00      	nop
   140c0:	3708      	adds	r7, #8
   140c2:	46bd      	mov	sp, r7
   140c4:	bd80      	pop	{r7, pc}
   140c6:	bf00      	nop
   140c8:	1000521c 	.word	0x1000521c
   140cc:	100051e8 	.word	0x100051e8
   140d0:	100051f4 	.word	0x100051f4
   140d4:	10005200 	.word	0x10005200
   140d8:	1000520c 	.word	0x1000520c

000140dc <amdtpc_start>:

void
amdtpc_start(uint16_t rxHdl, uint16_t ackHdl, uint8_t timerEvt)
{
   140dc:	b580      	push	{r7, lr}
   140de:	b084      	sub	sp, #16
   140e0:	af00      	add	r7, sp, #0
   140e2:	4603      	mov	r3, r0
   140e4:	80fb      	strh	r3, [r7, #6]
   140e6:	460b      	mov	r3, r1
   140e8:	80bb      	strh	r3, [r7, #4]
   140ea:	4613      	mov	r3, r2
   140ec:	70fb      	strb	r3, [r7, #3]
    amdtpcCb.txReady = true;
   140ee:	4b14      	ldr	r3, [pc, #80]	; (14140 <amdtpc_start+0x64>)
   140f0:	2201      	movs	r2, #1
   140f2:	701a      	strb	r2, [r3, #0]
    amdtpcCb.attRxHdl = rxHdl;
   140f4:	4a12      	ldr	r2, [pc, #72]	; (14140 <amdtpc_start+0x64>)
   140f6:	88fb      	ldrh	r3, [r7, #6]
   140f8:	8053      	strh	r3, [r2, #2]
    amdtpcCb.attAckHdl = ackHdl;
   140fa:	4a11      	ldr	r2, [pc, #68]	; (14140 <amdtpc_start+0x64>)
   140fc:	88bb      	ldrh	r3, [r7, #4]
   140fe:	8093      	strh	r3, [r2, #4]
    amdtpcCb.core.timeoutTimer.msg.event = timerEvt;
   14100:	4a0f      	ldr	r2, [pc, #60]	; (14140 <amdtpc_start+0x64>)
   14102:	78fb      	ldrb	r3, [r7, #3]
   14104:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

    dmConnId_t connId;

    if ((connId = AppConnIsOpen()) == DM_CONN_ID_NONE)
   14108:	f009 f950 	bl	1d3ac <AppConnIsOpen>
   1410c:	4603      	mov	r3, r0
   1410e:	73fb      	strb	r3, [r7, #15]
   14110:	7bfb      	ldrb	r3, [r7, #15]
   14112:	2b00      	cmp	r3, #0
   14114:	d103      	bne.n	1411e <amdtpc_start+0x42>
    {
        APP_TRACE_INFO0("amdtpc_start() no connection\n");
   14116:	480b      	ldr	r0, [pc, #44]	; (14144 <amdtpc_start+0x68>)
   14118:	f001 fd1e 	bl	15b58 <WsfTrace>
        return;
   1411c:	e00d      	b.n	1413a <amdtpc_start+0x5e>
    }

    amdtpcCb.core.attMtuSize = AttGetMtu(connId);
   1411e:	7bfb      	ldrb	r3, [r7, #15]
   14120:	4618      	mov	r0, r3
   14122:	f7f8 fac3 	bl	c6ac <AttGetMtu>
   14126:	4603      	mov	r3, r0
   14128:	461a      	mov	r2, r3
   1412a:	4b05      	ldr	r3, [pc, #20]	; (14140 <amdtpc_start+0x64>)
   1412c:	865a      	strh	r2, [r3, #50]	; 0x32
    APP_TRACE_INFO1("MTU size = %d bytes", amdtpcCb.core.attMtuSize);
   1412e:	4b04      	ldr	r3, [pc, #16]	; (14140 <amdtpc_start+0x64>)
   14130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   14132:	4619      	mov	r1, r3
   14134:	4804      	ldr	r0, [pc, #16]	; (14148 <amdtpc_start+0x6c>)
   14136:	f001 fd0f 	bl	15b58 <WsfTrace>
}
   1413a:	3710      	adds	r7, #16
   1413c:	46bd      	mov	sp, r7
   1413e:	bd80      	pop	{r7, pc}
   14140:	100051e8 	.word	0x100051e8
   14144:	00024730 	.word	0x00024730
   14148:	00024750 	.word	0x00024750

0001414c <amdtpc_timeout_timer_expired>:
// Timer Expiration handler
//
//*****************************************************************************
void
amdtpc_timeout_timer_expired(wsfMsgHdr_t *pMsg)
{
   1414c:	b580      	push	{r7, lr}
   1414e:	b084      	sub	sp, #16
   14150:	af00      	add	r7, sp, #0
   14152:	6078      	str	r0, [r7, #4]
    uint8_t data[1];
    data[0] = amdtpcCb.core.txPktSn;
   14154:	4b0d      	ldr	r3, [pc, #52]	; (1418c <amdtpc_timeout_timer_expired+0x40>)
   14156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1415a:	733b      	strb	r3, [r7, #12]
    APP_TRACE_INFO1("amdtpc tx timeout, txPktSn = %d", amdtpcCb.core.txPktSn);
   1415c:	4b0b      	ldr	r3, [pc, #44]	; (1418c <amdtpc_timeout_timer_expired+0x40>)
   1415e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   14162:	4619      	mov	r1, r3
   14164:	480a      	ldr	r0, [pc, #40]	; (14190 <amdtpc_timeout_timer_expired+0x44>)
   14166:	f001 fcf7 	bl	15b58 <WsfTrace>
    AmdtpSendControl(&amdtpcCb.core, AMDTP_CONTROL_RESEND_REQ, data, 1);
   1416a:	f107 020c 	add.w	r2, r7, #12
   1416e:	2301      	movs	r3, #1
   14170:	2100      	movs	r1, #0
   14172:	4808      	ldr	r0, [pc, #32]	; (14194 <amdtpc_timeout_timer_expired+0x48>)
   14174:	f001 fff8 	bl	16168 <AmdtpSendControl>
    // fire a timer for receiving an AMDTP_STATUS_RESEND_REPLY ACK
    WsfTimerStartMs(&amdtpcCb.core.timeoutTimer, amdtpcCb.core.txTimeoutMs);
   14178:	4b04      	ldr	r3, [pc, #16]	; (1418c <amdtpc_timeout_timer_expired+0x40>)
   1417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1417c:	4619      	mov	r1, r3
   1417e:	4806      	ldr	r0, [pc, #24]	; (14198 <amdtpc_timeout_timer_expired+0x4c>)
   14180:	f000 fc02 	bl	14988 <WsfTimerStartMs>
}
   14184:	bf00      	nop
   14186:	3710      	adds	r7, #16
   14188:	46bd      	mov	sp, r7
   1418a:	bd80      	pop	{r7, pc}
   1418c:	100051e8 	.word	0x100051e8
   14190:	00024764 	.word	0x00024764
   14194:	100051f0 	.word	0x100051f0
   14198:	1000521c 	.word	0x1000521c

0001419c <amdtpcValueNtf>:
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t
amdtpcValueNtf(attEvt_t *pMsg)
{
   1419c:	b580      	push	{r7, lr}
   1419e:	b084      	sub	sp, #16
   141a0:	af00      	add	r7, sp, #0
   141a2:	6078      	str	r0, [r7, #4]
    eAmdtpStatus_t status = AMDTP_STATUS_UNKNOWN_ERROR;
   141a4:	2305      	movs	r3, #5
   141a6:	73fb      	strb	r3, [r7, #15]
    amdtpPacket_t *pkt = NULL;
   141a8:	2300      	movs	r3, #0
   141aa:	60bb      	str	r3, [r7, #8]
        APP_TRACE_INFO1("%02x ", pMsg->pValue[i]);
    }
    APP_TRACE_INFO0("\n");
#endif

    if (pMsg->handle == amdtpcCb.attRxHdl)
   141ac:	687b      	ldr	r3, [r7, #4]
   141ae:	895a      	ldrh	r2, [r3, #10]
   141b0:	4b23      	ldr	r3, [pc, #140]	; (14240 <amdtpcValueNtf+0xa4>)
   141b2:	885b      	ldrh	r3, [r3, #2]
   141b4:	429a      	cmp	r2, r3
   141b6:	d10a      	bne.n	141ce <amdtpcValueNtf+0x32>
    {
        status = AmdtpReceivePkt(&amdtpcCb.core, &amdtpcCb.core.rxPkt, pMsg->valueLen, pMsg->pValue);
   141b8:	687b      	ldr	r3, [r7, #4]
   141ba:	891a      	ldrh	r2, [r3, #8]
   141bc:	687b      	ldr	r3, [r7, #4]
   141be:	685b      	ldr	r3, [r3, #4]
   141c0:	4920      	ldr	r1, [pc, #128]	; (14244 <amdtpcValueNtf+0xa8>)
   141c2:	4821      	ldr	r0, [pc, #132]	; (14248 <amdtpcValueNtf+0xac>)
   141c4:	f001 fd0a 	bl	15bdc <AmdtpReceivePkt>
   141c8:	4603      	mov	r3, r0
   141ca:	73fb      	strb	r3, [r7, #15]
   141cc:	e00f      	b.n	141ee <amdtpcValueNtf+0x52>
    }
    else if ( pMsg->handle == amdtpcCb.attAckHdl )
   141ce:	687b      	ldr	r3, [r7, #4]
   141d0:	895a      	ldrh	r2, [r3, #10]
   141d2:	4b1b      	ldr	r3, [pc, #108]	; (14240 <amdtpcValueNtf+0xa4>)
   141d4:	889b      	ldrh	r3, [r3, #4]
   141d6:	429a      	cmp	r2, r3
   141d8:	d109      	bne.n	141ee <amdtpcValueNtf+0x52>
    {
        status = AmdtpReceivePkt(&amdtpcCb.core, &amdtpcCb.core.ackPkt, pMsg->valueLen, pMsg->pValue);
   141da:	687b      	ldr	r3, [r7, #4]
   141dc:	891a      	ldrh	r2, [r3, #8]
   141de:	687b      	ldr	r3, [r7, #4]
   141e0:	685b      	ldr	r3, [r3, #4]
   141e2:	491a      	ldr	r1, [pc, #104]	; (1424c <amdtpcValueNtf+0xb0>)
   141e4:	4818      	ldr	r0, [pc, #96]	; (14248 <amdtpcValueNtf+0xac>)
   141e6:	f001 fcf9 	bl	15bdc <AmdtpReceivePkt>
   141ea:	4603      	mov	r3, r0
   141ec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == AMDTP_STATUS_RECEIVE_DONE)
   141ee:	7bfb      	ldrb	r3, [r7, #15]
   141f0:	2b0a      	cmp	r3, #10
   141f2:	d11f      	bne.n	14234 <amdtpcValueNtf+0x98>
    {
        if (pMsg->handle == amdtpcCb.attRxHdl)
   141f4:	687b      	ldr	r3, [r7, #4]
   141f6:	895a      	ldrh	r2, [r3, #10]
   141f8:	4b11      	ldr	r3, [pc, #68]	; (14240 <amdtpcValueNtf+0xa4>)
   141fa:	885b      	ldrh	r3, [r3, #2]
   141fc:	429a      	cmp	r2, r3
   141fe:	d102      	bne.n	14206 <amdtpcValueNtf+0x6a>
        {
            pkt = &amdtpcCb.core.rxPkt;
   14200:	4b10      	ldr	r3, [pc, #64]	; (14244 <amdtpcValueNtf+0xa8>)
   14202:	60bb      	str	r3, [r7, #8]
   14204:	e007      	b.n	14216 <amdtpcValueNtf+0x7a>
        }
        else if (pMsg->handle == amdtpcCb.attAckHdl)
   14206:	687b      	ldr	r3, [r7, #4]
   14208:	895a      	ldrh	r2, [r3, #10]
   1420a:	4b0d      	ldr	r3, [pc, #52]	; (14240 <amdtpcValueNtf+0xa4>)
   1420c:	889b      	ldrh	r3, [r3, #4]
   1420e:	429a      	cmp	r2, r3
   14210:	d101      	bne.n	14216 <amdtpcValueNtf+0x7a>
        {
            pkt = &amdtpcCb.core.ackPkt;
   14212:	4b0e      	ldr	r3, [pc, #56]	; (1424c <amdtpcValueNtf+0xb0>)
   14214:	60bb      	str	r3, [r7, #8]
        }

        AmdtpPacketHandler(&amdtpcCb.core, (eAmdtpPktType_t)pkt->header.pktType, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   14216:	68bb      	ldr	r3, [r7, #8]
   14218:	791b      	ldrb	r3, [r3, #4]
   1421a:	f3c3 0303 	ubfx	r3, r3, #0, #4
   1421e:	b2db      	uxtb	r3, r3
   14220:	4619      	mov	r1, r3
   14222:	68bb      	ldr	r3, [r7, #8]
   14224:	885b      	ldrh	r3, [r3, #2]
   14226:	3b04      	subs	r3, #4
   14228:	b29a      	uxth	r2, r3
   1422a:	68bb      	ldr	r3, [r7, #8]
   1422c:	689b      	ldr	r3, [r3, #8]
   1422e:	4806      	ldr	r0, [pc, #24]	; (14248 <amdtpcValueNtf+0xac>)
   14230:	f001 fe0a 	bl	15e48 <AmdtpPacketHandler>
    }

    return ATT_SUCCESS;
   14234:	2300      	movs	r3, #0
}
   14236:	4618      	mov	r0, r3
   14238:	3710      	adds	r7, #16
   1423a:	46bd      	mov	sp, r7
   1423c:	bd80      	pop	{r7, pc}
   1423e:	bf00      	nop
   14240:	100051e8 	.word	0x100051e8
   14244:	100051f4 	.word	0x100051f4
   14248:	100051f0 	.word	0x100051f0
   1424c:	1000520c 	.word	0x1000520c

00014250 <amdtpcHandleWriteResponse>:

static void
amdtpcHandleWriteResponse(attEvt_t *pMsg)
{
   14250:	b580      	push	{r7, lr}
   14252:	b082      	sub	sp, #8
   14254:	af00      	add	r7, sp, #0
   14256:	6078      	str	r0, [r7, #4]
    //APP_TRACE_INFO2("amdtpcHandleWriteResponse, status = %d, hdl = 0x%x\n", pMsg->hdr.status, pMsg->handle);
    if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == amdtpcCb.attRxHdl)
   14258:	687b      	ldr	r3, [r7, #4]
   1425a:	78db      	ldrb	r3, [r3, #3]
   1425c:	2b00      	cmp	r3, #0
   1425e:	d10b      	bne.n	14278 <amdtpcHandleWriteResponse+0x28>
   14260:	687b      	ldr	r3, [r7, #4]
   14262:	895a      	ldrh	r2, [r3, #10]
   14264:	4b06      	ldr	r3, [pc, #24]	; (14280 <amdtpcHandleWriteResponse+0x30>)
   14266:	885b      	ldrh	r3, [r3, #2]
   14268:	429a      	cmp	r2, r3
   1426a:	d105      	bne.n	14278 <amdtpcHandleWriteResponse+0x28>
    {
        amdtpcCb.txReady = true;
   1426c:	4b04      	ldr	r3, [pc, #16]	; (14280 <amdtpcHandleWriteResponse+0x30>)
   1426e:	2201      	movs	r2, #1
   14270:	701a      	strb	r2, [r3, #0]
        // process next data
        AmdtpSendPacketHandler(&amdtpcCb.core);
   14272:	4804      	ldr	r0, [pc, #16]	; (14284 <amdtpcHandleWriteResponse+0x34>)
   14274:	f001 ffb8 	bl	161e8 <AmdtpSendPacketHandler>
    }
}
   14278:	bf00      	nop
   1427a:	3708      	adds	r7, #8
   1427c:	46bd      	mov	sp, r7
   1427e:	bd80      	pop	{r7, pc}
   14280:	100051e8 	.word	0x100051e8
   14284:	100051f0 	.word	0x100051f0

00014288 <amdtpc_proc_msg>:

void
amdtpc_proc_msg(wsfMsgHdr_t *pMsg)
{
   14288:	b580      	push	{r7, lr}
   1428a:	b082      	sub	sp, #8
   1428c:	af00      	add	r7, sp, #0
   1428e:	6078      	str	r0, [r7, #4]
    if (pMsg->event == DM_CONN_OPEN_IND)
   14290:	687b      	ldr	r3, [r7, #4]
   14292:	789b      	ldrb	r3, [r3, #2]
   14294:	2b27      	cmp	r3, #39	; 0x27
   14296:	d025      	beq.n	142e4 <amdtpc_proc_msg+0x5c>
    {
    }
    else if (pMsg->event == DM_CONN_CLOSE_IND)
   14298:	687b      	ldr	r3, [r7, #4]
   1429a:	789b      	ldrb	r3, [r3, #2]
   1429c:	2b28      	cmp	r3, #40	; 0x28
   1429e:	d103      	bne.n	142a8 <amdtpc_proc_msg+0x20>
    {
        amdtpc_conn_close((dmEvt_t *) pMsg);
   142a0:	6878      	ldr	r0, [r7, #4]
   142a2:	f7ff feeb 	bl	1407c <amdtpc_conn_close>
    }
    else if (pMsg->event == ATTC_HANDLE_VALUE_NTF)
    {
        amdtpcValueNtf((attEvt_t *) pMsg);
    }
}
   142a6:	e01d      	b.n	142e4 <amdtpc_proc_msg+0x5c>
    else if (pMsg->event == DM_CONN_UPDATE_IND)
   142a8:	687b      	ldr	r3, [r7, #4]
   142aa:	789b      	ldrb	r3, [r3, #2]
   142ac:	2b29      	cmp	r3, #41	; 0x29
   142ae:	d019      	beq.n	142e4 <amdtpc_proc_msg+0x5c>
    else if (pMsg->event == amdtpcCb.core.timeoutTimer.msg.event)
   142b0:	687b      	ldr	r3, [r7, #4]
   142b2:	789a      	ldrb	r2, [r3, #2]
   142b4:	4b0d      	ldr	r3, [pc, #52]	; (142ec <amdtpc_proc_msg+0x64>)
   142b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   142ba:	429a      	cmp	r2, r3
   142bc:	d103      	bne.n	142c6 <amdtpc_proc_msg+0x3e>
       amdtpc_timeout_timer_expired(pMsg);
   142be:	6878      	ldr	r0, [r7, #4]
   142c0:	f7ff ff44 	bl	1414c <amdtpc_timeout_timer_expired>
}
   142c4:	e00e      	b.n	142e4 <amdtpc_proc_msg+0x5c>
    else if (pMsg->event == ATTC_WRITE_CMD_RSP)
   142c6:	687b      	ldr	r3, [r7, #4]
   142c8:	789b      	ldrb	r3, [r3, #2]
   142ca:	2b0a      	cmp	r3, #10
   142cc:	d103      	bne.n	142d6 <amdtpc_proc_msg+0x4e>
        amdtpcHandleWriteResponse((attEvt_t *) pMsg);
   142ce:	6878      	ldr	r0, [r7, #4]
   142d0:	f7ff ffbe 	bl	14250 <amdtpcHandleWriteResponse>
}
   142d4:	e006      	b.n	142e4 <amdtpc_proc_msg+0x5c>
    else if (pMsg->event == ATTC_HANDLE_VALUE_NTF)
   142d6:	687b      	ldr	r3, [r7, #4]
   142d8:	789b      	ldrb	r3, [r3, #2]
   142da:	2b0d      	cmp	r3, #13
   142dc:	d102      	bne.n	142e4 <amdtpc_proc_msg+0x5c>
        amdtpcValueNtf((attEvt_t *) pMsg);
   142de:	6878      	ldr	r0, [r7, #4]
   142e0:	f7ff ff5c 	bl	1419c <amdtpcValueNtf>
}
   142e4:	bf00      	nop
   142e6:	3708      	adds	r7, #8
   142e8:	46bd      	mov	sp, r7
   142ea:	bd80      	pop	{r7, pc}
   142ec:	100051e8 	.word	0x100051e8

000142f0 <AmdtpcSendPacket>:
//! @return status
//
//*****************************************************************************
eAmdtpStatus_t
AmdtpcSendPacket(eAmdtpPktType_t type, bool_t encrypted, bool_t enableACK, uint8_t *buf, uint16_t len)
{
   142f0:	b580      	push	{r7, lr}
   142f2:	b084      	sub	sp, #16
   142f4:	af02      	add	r7, sp, #8
   142f6:	603b      	str	r3, [r7, #0]
   142f8:	4603      	mov	r3, r0
   142fa:	71fb      	strb	r3, [r7, #7]
   142fc:	460b      	mov	r3, r1
   142fe:	71bb      	strb	r3, [r7, #6]
   14300:	4613      	mov	r3, r2
   14302:	717b      	strb	r3, [r7, #5]
    //
    // Check if the service is idle to send
    //
    if ( amdtpcCb.core.txState != AMDTP_STATE_TX_IDLE )
   14304:	4b19      	ldr	r3, [pc, #100]	; (1436c <AmdtpcSendPacket+0x7c>)
   14306:	7a1b      	ldrb	r3, [r3, #8]
   14308:	2b01      	cmp	r3, #1
   1430a:	d007      	beq.n	1431c <AmdtpcSendPacket+0x2c>
    {
        APP_TRACE_INFO1("data sending failed, tx state = %d", amdtpcCb.core.txState);
   1430c:	4b17      	ldr	r3, [pc, #92]	; (1436c <AmdtpcSendPacket+0x7c>)
   1430e:	7a1b      	ldrb	r3, [r3, #8]
   14310:	4619      	mov	r1, r3
   14312:	4817      	ldr	r0, [pc, #92]	; (14370 <AmdtpcSendPacket+0x80>)
   14314:	f001 fc20 	bl	15b58 <WsfTrace>
        return AMDTP_STATUS_BUSY;
   14318:	2306      	movs	r3, #6
   1431a:	e023      	b.n	14364 <AmdtpcSendPacket+0x74>
    }

    //
    // Check if data length is valid
    //
    if ( len > AMDTP_MAX_PAYLOAD_SIZE )
   1431c:	8a3b      	ldrh	r3, [r7, #16]
   1431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   14322:	d906      	bls.n	14332 <AmdtpcSendPacket+0x42>
    {
        APP_TRACE_INFO1("data sending failed, exceed maximum payload, len = %d.", len);
   14324:	8a3b      	ldrh	r3, [r7, #16]
   14326:	4619      	mov	r1, r3
   14328:	4812      	ldr	r0, [pc, #72]	; (14374 <AmdtpcSendPacket+0x84>)
   1432a:	f001 fc15 	bl	15b58 <WsfTrace>
        return AMDTP_STATUS_INVALID_PKT_LENGTH;
   1432e:	2303      	movs	r3, #3
   14330:	e018      	b.n	14364 <AmdtpcSendPacket+0x74>
    }

    //
    // Check if ready to send notification
    //
    if ( !amdtpcCb.txReady )
   14332:	4b0e      	ldr	r3, [pc, #56]	; (1436c <AmdtpcSendPacket+0x7c>)
   14334:	781b      	ldrb	r3, [r3, #0]
   14336:	2b00      	cmp	r3, #0
   14338:	d105      	bne.n	14346 <AmdtpcSendPacket+0x56>
    {
        //set in callback amdtpsHandleValueCnf
        APP_TRACE_INFO1("data sending failed, not ready for notification.", NULL);
   1433a:	2100      	movs	r1, #0
   1433c:	480e      	ldr	r0, [pc, #56]	; (14378 <AmdtpcSendPacket+0x88>)
   1433e:	f001 fc0b 	bl	15b58 <WsfTrace>
        return AMDTP_STATUS_TX_NOT_READY;
   14342:	2307      	movs	r3, #7
   14344:	e00e      	b.n	14364 <AmdtpcSendPacket+0x74>
    }

    AmdtpBuildPkt(&amdtpcCb.core, type, encrypted, enableACK, buf, len);
   14346:	7978      	ldrb	r0, [r7, #5]
   14348:	79ba      	ldrb	r2, [r7, #6]
   1434a:	79f9      	ldrb	r1, [r7, #7]
   1434c:	8a3b      	ldrh	r3, [r7, #16]
   1434e:	9301      	str	r3, [sp, #4]
   14350:	683b      	ldr	r3, [r7, #0]
   14352:	9300      	str	r3, [sp, #0]
   14354:	4603      	mov	r3, r0
   14356:	4809      	ldr	r0, [pc, #36]	; (1437c <AmdtpcSendPacket+0x8c>)
   14358:	f001 fe3a 	bl	15fd0 <AmdtpBuildPkt>

    // send packet
    AmdtpSendPacketHandler(&amdtpcCb.core);
   1435c:	4807      	ldr	r0, [pc, #28]	; (1437c <AmdtpcSendPacket+0x8c>)
   1435e:	f001 ff43 	bl	161e8 <AmdtpSendPacketHandler>

    return AMDTP_STATUS_SUCCESS;
   14362:	2300      	movs	r3, #0
}
   14364:	4618      	mov	r0, r3
   14366:	3708      	adds	r7, #8
   14368:	46bd      	mov	sp, r7
   1436a:	bd80      	pop	{r7, pc}
   1436c:	100051e8 	.word	0x100051e8
   14370:	00024784 	.word	0x00024784
   14374:	000247a8 	.word	0x000247a8
   14378:	000247e0 	.word	0x000247e0
   1437c:	100051f0 	.word	0x100051f0

00014380 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   14380:	b480      	push	{r7}
   14382:	b089      	sub	sp, #36	; 0x24
   14384:	af00      	add	r7, sp, #0
   14386:	60b9      	str	r1, [r7, #8]
   14388:	607b      	str	r3, [r7, #4]
   1438a:	4603      	mov	r3, r0
   1438c:	81fb      	strh	r3, [r7, #14]
   1438e:	4613      	mov	r3, r2
   14390:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   14392:	4a4d      	ldr	r2, [pc, #308]	; (144c8 <WsfBufInit+0x148>)
   14394:	68bb      	ldr	r3, [r7, #8]
   14396:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   14398:	4b4b      	ldr	r3, [pc, #300]	; (144c8 <WsfBufInit+0x148>)
   1439a:	681b      	ldr	r3, [r3, #0]
   1439c:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1439e:	7b7a      	ldrb	r2, [r7, #13]
   143a0:	4613      	mov	r3, r2
   143a2:	005b      	lsls	r3, r3, #1
   143a4:	4413      	add	r3, r2
   143a6:	009b      	lsls	r3, r3, #2
   143a8:	461a      	mov	r2, r3
   143aa:	69fb      	ldr	r3, [r7, #28]
   143ac:	4413      	add	r3, r2
   143ae:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
   143b0:	4a46      	ldr	r2, [pc, #280]	; (144cc <WsfBufInit+0x14c>)
   143b2:	7b7b      	ldrb	r3, [r7, #13]
   143b4:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   143b6:	4b44      	ldr	r3, [pc, #272]	; (144c8 <WsfBufInit+0x148>)
   143b8:	681a      	ldr	r2, [r3, #0]
   143ba:	89fb      	ldrh	r3, [r7, #14]
   143bc:	08db      	lsrs	r3, r3, #3
   143be:	b29b      	uxth	r3, r3
   143c0:	00db      	lsls	r3, r3, #3
   143c2:	441a      	add	r2, r3
   143c4:	69bb      	ldr	r3, [r7, #24]
   143c6:	429a      	cmp	r2, r3
   143c8:	d201      	bcs.n	143ce <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   143ca:	2300      	movs	r3, #0
   143cc:	e075      	b.n	144ba <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   143ce:	7b7b      	ldrb	r3, [r7, #13]
   143d0:	1e5a      	subs	r2, r3, #1
   143d2:	737a      	strb	r2, [r7, #13]
   143d4:	2b00      	cmp	r3, #0
   143d6:	d066      	beq.n	144a6 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   143d8:	687b      	ldr	r3, [r7, #4]
   143da:	881b      	ldrh	r3, [r3, #0]
   143dc:	2b07      	cmp	r3, #7
   143de:	d803      	bhi.n	143e8 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   143e0:	69fb      	ldr	r3, [r7, #28]
   143e2:	2208      	movs	r2, #8
   143e4:	801a      	strh	r2, [r3, #0]
   143e6:	e014      	b.n	14412 <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   143e8:	687b      	ldr	r3, [r7, #4]
   143ea:	881b      	ldrh	r3, [r3, #0]
   143ec:	f003 0307 	and.w	r3, r3, #7
   143f0:	b29b      	uxth	r3, r3
   143f2:	2b00      	cmp	r3, #0
   143f4:	d009      	beq.n	1440a <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   143f6:	687b      	ldr	r3, [r7, #4]
   143f8:	881b      	ldrh	r3, [r3, #0]
   143fa:	f023 0307 	bic.w	r3, r3, #7
   143fe:	b29b      	uxth	r3, r3
   14400:	3308      	adds	r3, #8
   14402:	b29a      	uxth	r2, r3
   14404:	69fb      	ldr	r3, [r7, #28]
   14406:	801a      	strh	r2, [r3, #0]
   14408:	e003      	b.n	14412 <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   1440a:	687b      	ldr	r3, [r7, #4]
   1440c:	881a      	ldrh	r2, [r3, #0]
   1440e:	69fb      	ldr	r3, [r7, #28]
   14410:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   14412:	687b      	ldr	r3, [r7, #4]
   14414:	789a      	ldrb	r2, [r3, #2]
   14416:	69fb      	ldr	r3, [r7, #28]
   14418:	709a      	strb	r2, [r3, #2]
    pDesc++;
   1441a:	687b      	ldr	r3, [r7, #4]
   1441c:	3304      	adds	r3, #4
   1441e:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
   14420:	69fb      	ldr	r3, [r7, #28]
   14422:	69ba      	ldr	r2, [r7, #24]
   14424:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   14426:	69fb      	ldr	r3, [r7, #28]
   14428:	69ba      	ldr	r2, [r7, #24]
   1442a:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   1442c:	69fb      	ldr	r3, [r7, #28]
   1442e:	881b      	ldrh	r3, [r3, #0]
   14430:	08db      	lsrs	r3, r3, #3
   14432:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
   14434:	69fb      	ldr	r3, [r7, #28]
   14436:	789b      	ldrb	r3, [r3, #2]
   14438:	75fb      	strb	r3, [r7, #23]
   1443a:	e019      	b.n	14470 <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1443c:	4b22      	ldr	r3, [pc, #136]	; (144c8 <WsfBufInit+0x148>)
   1443e:	681a      	ldr	r2, [r3, #0]
   14440:	89fb      	ldrh	r3, [r7, #14]
   14442:	08db      	lsrs	r3, r3, #3
   14444:	b29b      	uxth	r3, r3
   14446:	00db      	lsls	r3, r3, #3
   14448:	441a      	add	r2, r3
   1444a:	69bb      	ldr	r3, [r7, #24]
   1444c:	429a      	cmp	r2, r3
   1444e:	d201      	bcs.n	14454 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   14450:	2300      	movs	r3, #0
   14452:	e032      	b.n	144ba <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   14454:	8abb      	ldrh	r3, [r7, #20]
   14456:	00db      	lsls	r3, r3, #3
   14458:	69ba      	ldr	r2, [r7, #24]
   1445a:	441a      	add	r2, r3
   1445c:	69bb      	ldr	r3, [r7, #24]
   1445e:	601a      	str	r2, [r3, #0]
      pStart += len;
   14460:	8abb      	ldrh	r3, [r7, #20]
   14462:	00db      	lsls	r3, r3, #3
   14464:	69ba      	ldr	r2, [r7, #24]
   14466:	4413      	add	r3, r2
   14468:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
   1446a:	7dfb      	ldrb	r3, [r7, #23]
   1446c:	3b01      	subs	r3, #1
   1446e:	75fb      	strb	r3, [r7, #23]
   14470:	7dfb      	ldrb	r3, [r7, #23]
   14472:	2b01      	cmp	r3, #1
   14474:	d8e2      	bhi.n	1443c <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   14476:	4b14      	ldr	r3, [pc, #80]	; (144c8 <WsfBufInit+0x148>)
   14478:	681a      	ldr	r2, [r3, #0]
   1447a:	89fb      	ldrh	r3, [r7, #14]
   1447c:	08db      	lsrs	r3, r3, #3
   1447e:	b29b      	uxth	r3, r3
   14480:	00db      	lsls	r3, r3, #3
   14482:	441a      	add	r2, r3
   14484:	69bb      	ldr	r3, [r7, #24]
   14486:	429a      	cmp	r2, r3
   14488:	d201      	bcs.n	1448e <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1448a:	2300      	movs	r3, #0
   1448c:	e015      	b.n	144ba <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   1448e:	69bb      	ldr	r3, [r7, #24]
   14490:	2200      	movs	r2, #0
   14492:	601a      	str	r2, [r3, #0]
    pStart += len;
   14494:	8abb      	ldrh	r3, [r7, #20]
   14496:	00db      	lsls	r3, r3, #3
   14498:	69ba      	ldr	r2, [r7, #24]
   1449a:	4413      	add	r3, r2
   1449c:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
   1449e:	69fb      	ldr	r3, [r7, #28]
   144a0:	330c      	adds	r3, #12
   144a2:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   144a4:	e787      	b.n	143b6 <WsfBufInit+0x36>
      break;
   144a6:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   144a8:	69bb      	ldr	r3, [r7, #24]
   144aa:	4a07      	ldr	r2, [pc, #28]	; (144c8 <WsfBufInit+0x148>)
   144ac:	6812      	ldr	r2, [r2, #0]
   144ae:	1a9b      	subs	r3, r3, r2
   144b0:	b29a      	uxth	r2, r3
   144b2:	4b07      	ldr	r3, [pc, #28]	; (144d0 <WsfBufInit+0x150>)
   144b4:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   144b6:	4b06      	ldr	r3, [pc, #24]	; (144d0 <WsfBufInit+0x150>)
   144b8:	881b      	ldrh	r3, [r3, #0]
}
   144ba:	4618      	mov	r0, r3
   144bc:	3724      	adds	r7, #36	; 0x24
   144be:	46bd      	mov	sp, r7
   144c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   144c4:	4770      	bx	lr
   144c6:	bf00      	nop
   144c8:	10005240 	.word	0x10005240
   144cc:	1000a63e 	.word	0x1000a63e
   144d0:	1000a63c 	.word	0x1000a63c

000144d4 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   144d4:	b580      	push	{r7, lr}
   144d6:	b086      	sub	sp, #24
   144d8:	af00      	add	r7, sp, #0
   144da:	4603      	mov	r3, r0
   144dc:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   144de:	4b1a      	ldr	r3, [pc, #104]	; (14548 <WsfBufAlloc+0x74>)
   144e0:	681b      	ldr	r3, [r3, #0]
   144e2:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   144e4:	4b19      	ldr	r3, [pc, #100]	; (1454c <WsfBufAlloc+0x78>)
   144e6:	781b      	ldrb	r3, [r3, #0]
   144e8:	74fb      	strb	r3, [r7, #19]
   144ea:	e020      	b.n	1452e <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   144ec:	697b      	ldr	r3, [r7, #20]
   144ee:	881b      	ldrh	r3, [r3, #0]
   144f0:	88fa      	ldrh	r2, [r7, #6]
   144f2:	429a      	cmp	r2, r3
   144f4:	d815      	bhi.n	14522 <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   144f6:	f001 f991 	bl	1581c <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   144fa:	697b      	ldr	r3, [r7, #20]
   144fc:	689b      	ldr	r3, [r3, #8]
   144fe:	2b00      	cmp	r3, #0
   14500:	d00d      	beq.n	1451e <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   14502:	697b      	ldr	r3, [r7, #20]
   14504:	689b      	ldr	r3, [r3, #8]
   14506:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   14508:	68fb      	ldr	r3, [r7, #12]
   1450a:	681a      	ldr	r2, [r3, #0]
   1450c:	697b      	ldr	r3, [r7, #20]
   1450e:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   14510:	68fb      	ldr	r3, [r7, #12]
   14512:	2200      	movs	r2, #0
   14514:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   14516:	f001 f995 	bl	15844 <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   1451a:	68fb      	ldr	r3, [r7, #12]
   1451c:	e010      	b.n	14540 <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1451e:	f001 f991 	bl	15844 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   14522:	7cfb      	ldrb	r3, [r7, #19]
   14524:	3b01      	subs	r3, #1
   14526:	74fb      	strb	r3, [r7, #19]
   14528:	697b      	ldr	r3, [r7, #20]
   1452a:	330c      	adds	r3, #12
   1452c:	617b      	str	r3, [r7, #20]
   1452e:	7cfb      	ldrb	r3, [r7, #19]
   14530:	2b00      	cmp	r3, #0
   14532:	d1db      	bne.n	144ec <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   14534:	88fb      	ldrh	r3, [r7, #6]
   14536:	4619      	mov	r1, r3
   14538:	4805      	ldr	r0, [pc, #20]	; (14550 <WsfBufAlloc+0x7c>)
   1453a:	f001 fb0d 	bl	15b58 <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1453e:	2300      	movs	r3, #0
}
   14540:	4618      	mov	r0, r3
   14542:	3718      	adds	r7, #24
   14544:	46bd      	mov	sp, r7
   14546:	bd80      	pop	{r7, pc}
   14548:	10005240 	.word	0x10005240
   1454c:	1000a63e 	.word	0x1000a63e
   14550:	00024814 	.word	0x00024814

00014554 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   14554:	b580      	push	{r7, lr}
   14556:	b084      	sub	sp, #16
   14558:	af00      	add	r7, sp, #0
   1455a:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   1455c:	687b      	ldr	r3, [r7, #4]
   1455e:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   14560:	4b16      	ldr	r3, [pc, #88]	; (145bc <WsfBufFree+0x68>)
   14562:	681a      	ldr	r2, [r3, #0]
   14564:	4b16      	ldr	r3, [pc, #88]	; (145c0 <WsfBufFree+0x6c>)
   14566:	781b      	ldrb	r3, [r3, #0]
   14568:	4619      	mov	r1, r3
   1456a:	460b      	mov	r3, r1
   1456c:	005b      	lsls	r3, r3, #1
   1456e:	440b      	add	r3, r1
   14570:	009b      	lsls	r3, r3, #2
   14572:	3b0c      	subs	r3, #12
   14574:	4413      	add	r3, r2
   14576:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   14578:	e016      	b.n	145a8 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   1457a:	68fb      	ldr	r3, [r7, #12]
   1457c:	685a      	ldr	r2, [r3, #4]
   1457e:	68bb      	ldr	r3, [r7, #8]
   14580:	429a      	cmp	r2, r3
   14582:	d80e      	bhi.n	145a2 <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   14584:	f001 f94a 	bl	1581c <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   14588:	68bb      	ldr	r3, [r7, #8]
   1458a:	4a0e      	ldr	r2, [pc, #56]	; (145c4 <WsfBufFree+0x70>)
   1458c:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   1458e:	68fb      	ldr	r3, [r7, #12]
   14590:	689a      	ldr	r2, [r3, #8]
   14592:	68bb      	ldr	r3, [r7, #8]
   14594:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   14596:	68fb      	ldr	r3, [r7, #12]
   14598:	68ba      	ldr	r2, [r7, #8]
   1459a:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1459c:	f001 f952 	bl	15844 <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   145a0:	e008      	b.n	145b4 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
   145a2:	68fb      	ldr	r3, [r7, #12]
   145a4:	3b0c      	subs	r3, #12
   145a6:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   145a8:	4b04      	ldr	r3, [pc, #16]	; (145bc <WsfBufFree+0x68>)
   145aa:	681b      	ldr	r3, [r3, #0]
   145ac:	68fa      	ldr	r2, [r7, #12]
   145ae:	429a      	cmp	r2, r3
   145b0:	d2e3      	bcs.n	1457a <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   145b2:	bf00      	nop
}
   145b4:	3710      	adds	r7, #16
   145b6:	46bd      	mov	sp, r7
   145b8:	bd80      	pop	{r7, pc}
   145ba:	bf00      	nop
   145bc:	10005240 	.word	0x10005240
   145c0:	1000a63e 	.word	0x1000a63e
   145c4:	faabd00d 	.word	0xfaabd00d

000145c8 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   145c8:	b580      	push	{r7, lr}
   145ca:	b082      	sub	sp, #8
   145cc:	af00      	add	r7, sp, #0
   145ce:	4603      	mov	r3, r0
   145d0:	460a      	mov	r2, r1
   145d2:	80fb      	strh	r3, [r7, #6]
   145d4:	4613      	mov	r3, r2
   145d6:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
   145d8:	797b      	ldrb	r3, [r7, #5]
   145da:	b29a      	uxth	r2, r3
   145dc:	88fb      	ldrh	r3, [r7, #6]
   145de:	4413      	add	r3, r2
   145e0:	b29b      	uxth	r3, r3
   145e2:	4618      	mov	r0, r3
   145e4:	f000 f805 	bl	145f2 <WsfMsgAlloc>
   145e8:	4603      	mov	r3, r0
}
   145ea:	4618      	mov	r0, r3
   145ec:	3708      	adds	r7, #8
   145ee:	46bd      	mov	sp, r7
   145f0:	bd80      	pop	{r7, pc}

000145f2 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   145f2:	b580      	push	{r7, lr}
   145f4:	b084      	sub	sp, #16
   145f6:	af00      	add	r7, sp, #0
   145f8:	4603      	mov	r3, r0
   145fa:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   145fc:	88fb      	ldrh	r3, [r7, #6]
   145fe:	3308      	adds	r3, #8
   14600:	b29b      	uxth	r3, r3
   14602:	4618      	mov	r0, r3
   14604:	f7ff ff66 	bl	144d4 <WsfBufAlloc>
   14608:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
   1460a:	68fb      	ldr	r3, [r7, #12]
   1460c:	2b00      	cmp	r3, #0
   1460e:	d002      	beq.n	14616 <WsfMsgAlloc+0x24>
  {
    pMsg++;
   14610:	68fb      	ldr	r3, [r7, #12]
   14612:	3308      	adds	r3, #8
   14614:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   14616:	68fb      	ldr	r3, [r7, #12]
}
   14618:	4618      	mov	r0, r3
   1461a:	3710      	adds	r7, #16
   1461c:	46bd      	mov	sp, r7
   1461e:	bd80      	pop	{r7, pc}

00014620 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   14620:	b580      	push	{r7, lr}
   14622:	b082      	sub	sp, #8
   14624:	af00      	add	r7, sp, #0
   14626:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   14628:	687b      	ldr	r3, [r7, #4]
   1462a:	3b08      	subs	r3, #8
   1462c:	4618      	mov	r0, r3
   1462e:	f7ff ff91 	bl	14554 <WsfBufFree>
}
   14632:	bf00      	nop
   14634:	3708      	adds	r7, #8
   14636:	46bd      	mov	sp, r7
   14638:	bd80      	pop	{r7, pc}

0001463a <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1463a:	b580      	push	{r7, lr}
   1463c:	b082      	sub	sp, #8
   1463e:	af00      	add	r7, sp, #0
   14640:	4603      	mov	r3, r0
   14642:	6039      	str	r1, [r7, #0]
   14644:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   14646:	79fb      	ldrb	r3, [r7, #7]
   14648:	4618      	mov	r0, r3
   1464a:	f001 f9b5 	bl	159b8 <WsfTaskMsgQueue>
   1464e:	79fb      	ldrb	r3, [r7, #7]
   14650:	683a      	ldr	r2, [r7, #0]
   14652:	4619      	mov	r1, r3
   14654:	f000 f809 	bl	1466a <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   14658:	79fb      	ldrb	r3, [r7, #7]
   1465a:	2101      	movs	r1, #1
   1465c:	4618      	mov	r0, r3
   1465e:	f001 f98d 	bl	1597c <WsfTaskSetReady>
}
   14662:	bf00      	nop
   14664:	3708      	adds	r7, #8
   14666:	46bd      	mov	sp, r7
   14668:	bd80      	pop	{r7, pc}

0001466a <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   1466a:	b580      	push	{r7, lr}
   1466c:	b086      	sub	sp, #24
   1466e:	af00      	add	r7, sp, #0
   14670:	60f8      	str	r0, [r7, #12]
   14672:	460b      	mov	r3, r1
   14674:	607a      	str	r2, [r7, #4]
   14676:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   14678:	687b      	ldr	r3, [r7, #4]
   1467a:	3b08      	subs	r3, #8
   1467c:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   1467e:	697b      	ldr	r3, [r7, #20]
   14680:	7afa      	ldrb	r2, [r7, #11]
   14682:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   14684:	6979      	ldr	r1, [r7, #20]
   14686:	68f8      	ldr	r0, [r7, #12]
   14688:	f000 f81c 	bl	146c4 <WsfQueueEnq>
}
   1468c:	bf00      	nop
   1468e:	3718      	adds	r7, #24
   14690:	46bd      	mov	sp, r7
   14692:	bd80      	pop	{r7, pc}

00014694 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   14694:	b580      	push	{r7, lr}
   14696:	b084      	sub	sp, #16
   14698:	af00      	add	r7, sp, #0
   1469a:	6078      	str	r0, [r7, #4]
   1469c:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   1469e:	6878      	ldr	r0, [r7, #4]
   146a0:	f000 f832 	bl	14708 <WsfQueueDeq>
   146a4:	60f8      	str	r0, [r7, #12]
   146a6:	68fb      	ldr	r3, [r7, #12]
   146a8:	2b00      	cmp	r3, #0
   146aa:	d006      	beq.n	146ba <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
   146ac:	68fb      	ldr	r3, [r7, #12]
   146ae:	791a      	ldrb	r2, [r3, #4]
   146b0:	683b      	ldr	r3, [r7, #0]
   146b2:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   146b4:	68fb      	ldr	r3, [r7, #12]
   146b6:	3308      	adds	r3, #8
   146b8:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   146ba:	68fb      	ldr	r3, [r7, #12]
}
   146bc:	4618      	mov	r0, r3
   146be:	3710      	adds	r7, #16
   146c0:	46bd      	mov	sp, r7
   146c2:	bd80      	pop	{r7, pc}

000146c4 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   146c4:	b580      	push	{r7, lr}
   146c6:	b082      	sub	sp, #8
   146c8:	af00      	add	r7, sp, #0
   146ca:	6078      	str	r0, [r7, #4]
   146cc:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   146ce:	683b      	ldr	r3, [r7, #0]
   146d0:	2200      	movs	r2, #0
   146d2:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   146d4:	f001 f8a2 	bl	1581c <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   146d8:	687b      	ldr	r3, [r7, #4]
   146da:	681b      	ldr	r3, [r3, #0]
   146dc:	2b00      	cmp	r3, #0
   146de:	d106      	bne.n	146ee <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
   146e0:	687b      	ldr	r3, [r7, #4]
   146e2:	683a      	ldr	r2, [r7, #0]
   146e4:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   146e6:	687b      	ldr	r3, [r7, #4]
   146e8:	683a      	ldr	r2, [r7, #0]
   146ea:	605a      	str	r2, [r3, #4]
   146ec:	e006      	b.n	146fc <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   146ee:	687b      	ldr	r3, [r7, #4]
   146f0:	685b      	ldr	r3, [r3, #4]
   146f2:	683a      	ldr	r2, [r7, #0]
   146f4:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   146f6:	687b      	ldr	r3, [r7, #4]
   146f8:	683a      	ldr	r2, [r7, #0]
   146fa:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   146fc:	f001 f8a2 	bl	15844 <WsfCsExit>
}
   14700:	bf00      	nop
   14702:	3708      	adds	r7, #8
   14704:	46bd      	mov	sp, r7
   14706:	bd80      	pop	{r7, pc}

00014708 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   14708:	b580      	push	{r7, lr}
   1470a:	b084      	sub	sp, #16
   1470c:	af00      	add	r7, sp, #0
   1470e:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   14710:	f001 f884 	bl	1581c <WsfCsEnter>

  pElem = pQueue->pHead;
   14714:	687b      	ldr	r3, [r7, #4]
   14716:	681b      	ldr	r3, [r3, #0]
   14718:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   1471a:	68fb      	ldr	r3, [r7, #12]
   1471c:	2b00      	cmp	r3, #0
   1471e:	d00a      	beq.n	14736 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   14720:	68fb      	ldr	r3, [r7, #12]
   14722:	681a      	ldr	r2, [r3, #0]
   14724:	687b      	ldr	r3, [r7, #4]
   14726:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   14728:	687b      	ldr	r3, [r7, #4]
   1472a:	681b      	ldr	r3, [r3, #0]
   1472c:	2b00      	cmp	r3, #0
   1472e:	d102      	bne.n	14736 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
   14730:	687b      	ldr	r3, [r7, #4]
   14732:	2200      	movs	r2, #0
   14734:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   14736:	f001 f885 	bl	15844 <WsfCsExit>

  return pElem;
   1473a:	68fb      	ldr	r3, [r7, #12]
}
   1473c:	4618      	mov	r0, r3
   1473e:	3710      	adds	r7, #16
   14740:	46bd      	mov	sp, r7
   14742:	bd80      	pop	{r7, pc}

00014744 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   14744:	b580      	push	{r7, lr}
   14746:	b082      	sub	sp, #8
   14748:	af00      	add	r7, sp, #0
   1474a:	6078      	str	r0, [r7, #4]
   1474c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1474e:	f001 f865 	bl	1581c <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   14752:	687b      	ldr	r3, [r7, #4]
   14754:	681a      	ldr	r2, [r3, #0]
   14756:	683b      	ldr	r3, [r7, #0]
   14758:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   1475a:	687b      	ldr	r3, [r7, #4]
   1475c:	681b      	ldr	r3, [r3, #0]
   1475e:	2b00      	cmp	r3, #0
   14760:	d102      	bne.n	14768 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
   14762:	687b      	ldr	r3, [r7, #4]
   14764:	683a      	ldr	r2, [r7, #0]
   14766:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   14768:	687b      	ldr	r3, [r7, #4]
   1476a:	683a      	ldr	r2, [r7, #0]
   1476c:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1476e:	f001 f869 	bl	15844 <WsfCsExit>
}
   14772:	bf00      	nop
   14774:	3708      	adds	r7, #8
   14776:	46bd      	mov	sp, r7
   14778:	bd80      	pop	{r7, pc}

0001477a <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1477a:	b580      	push	{r7, lr}
   1477c:	b084      	sub	sp, #16
   1477e:	af00      	add	r7, sp, #0
   14780:	60f8      	str	r0, [r7, #12]
   14782:	60b9      	str	r1, [r7, #8]
   14784:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   14786:	f001 f849 	bl	1581c <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   1478a:	68fb      	ldr	r3, [r7, #12]
   1478c:	681b      	ldr	r3, [r3, #0]
   1478e:	2b00      	cmp	r3, #0
   14790:	d004      	beq.n	1479c <WsfQueueInsert+0x22>
   14792:	68fb      	ldr	r3, [r7, #12]
   14794:	685a      	ldr	r2, [r3, #4]
   14796:	687b      	ldr	r3, [r7, #4]
   14798:	429a      	cmp	r2, r3
   1479a:	d104      	bne.n	147a6 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   1479c:	68b9      	ldr	r1, [r7, #8]
   1479e:	68f8      	ldr	r0, [r7, #12]
   147a0:	f7ff ff90 	bl	146c4 <WsfQueueEnq>
   147a4:	e00e      	b.n	147c4 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   147a6:	687b      	ldr	r3, [r7, #4]
   147a8:	2b00      	cmp	r3, #0
   147aa:	d104      	bne.n	147b6 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   147ac:	68b9      	ldr	r1, [r7, #8]
   147ae:	68f8      	ldr	r0, [r7, #12]
   147b0:	f7ff ffc8 	bl	14744 <WsfQueuePush>
   147b4:	e006      	b.n	147c4 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   147b6:	687b      	ldr	r3, [r7, #4]
   147b8:	681a      	ldr	r2, [r3, #0]
   147ba:	68bb      	ldr	r3, [r7, #8]
   147bc:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   147be:	687b      	ldr	r3, [r7, #4]
   147c0:	68ba      	ldr	r2, [r7, #8]
   147c2:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   147c4:	f001 f83e 	bl	15844 <WsfCsExit>
}
   147c8:	bf00      	nop
   147ca:	3710      	adds	r7, #16
   147cc:	46bd      	mov	sp, r7
   147ce:	bd80      	pop	{r7, pc}

000147d0 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   147d0:	b580      	push	{r7, lr}
   147d2:	b084      	sub	sp, #16
   147d4:	af00      	add	r7, sp, #0
   147d6:	60f8      	str	r0, [r7, #12]
   147d8:	60b9      	str	r1, [r7, #8]
   147da:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   147dc:	f001 f81e 	bl	1581c <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   147e0:	68fb      	ldr	r3, [r7, #12]
   147e2:	681a      	ldr	r2, [r3, #0]
   147e4:	68bb      	ldr	r3, [r7, #8]
   147e6:	429a      	cmp	r2, r3
   147e8:	d104      	bne.n	147f4 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   147ea:	68bb      	ldr	r3, [r7, #8]
   147ec:	681a      	ldr	r2, [r3, #0]
   147ee:	68fb      	ldr	r3, [r7, #12]
   147f0:	601a      	str	r2, [r3, #0]
   147f2:	e006      	b.n	14802 <WsfQueueRemove+0x32>
  }
  else if (pPrev)
   147f4:	687b      	ldr	r3, [r7, #4]
   147f6:	2b00      	cmp	r3, #0
   147f8:	d003      	beq.n	14802 <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   147fa:	68bb      	ldr	r3, [r7, #8]
   147fc:	681a      	ldr	r2, [r3, #0]
   147fe:	687b      	ldr	r3, [r7, #4]
   14800:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   14802:	68fb      	ldr	r3, [r7, #12]
   14804:	685a      	ldr	r2, [r3, #4]
   14806:	68bb      	ldr	r3, [r7, #8]
   14808:	429a      	cmp	r2, r3
   1480a:	d102      	bne.n	14812 <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   1480c:	68fb      	ldr	r3, [r7, #12]
   1480e:	687a      	ldr	r2, [r7, #4]
   14810:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   14812:	f001 f817 	bl	15844 <WsfCsExit>
}
   14816:	bf00      	nop
   14818:	3710      	adds	r7, #16
   1481a:	46bd      	mov	sp, r7
   1481c:	bd80      	pop	{r7, pc}

0001481e <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   1481e:	b580      	push	{r7, lr}
   14820:	b084      	sub	sp, #16
   14822:	af00      	add	r7, sp, #0
   14824:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   14826:	2300      	movs	r3, #0
   14828:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1482a:	f000 fff7 	bl	1581c <WsfCsEnter>

  pElem = pQueue->pHead;
   1482e:	687b      	ldr	r3, [r7, #4]
   14830:	681b      	ldr	r3, [r3, #0]
   14832:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
   14834:	e005      	b.n	14842 <WsfQueueCount+0x24>
  {
    count++;
   14836:	897b      	ldrh	r3, [r7, #10]
   14838:	3301      	adds	r3, #1
   1483a:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
   1483c:	68fb      	ldr	r3, [r7, #12]
   1483e:	681b      	ldr	r3, [r3, #0]
   14840:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   14842:	68fb      	ldr	r3, [r7, #12]
   14844:	2b00      	cmp	r3, #0
   14846:	d1f6      	bne.n	14836 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   14848:	f000 fffc 	bl	15844 <WsfCsExit>

  return count;
   1484c:	897b      	ldrh	r3, [r7, #10]
}
   1484e:	4618      	mov	r0, r3
   14850:	3710      	adds	r7, #16
   14852:	46bd      	mov	sp, r7
   14854:	bd80      	pop	{r7, pc}

00014856 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   14856:	b580      	push	{r7, lr}
   14858:	b084      	sub	sp, #16
   1485a:	af00      	add	r7, sp, #0
   1485c:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1485e:	f000 ffdd 	bl	1581c <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   14862:	687b      	ldr	r3, [r7, #4]
   14864:	681b      	ldr	r3, [r3, #0]
   14866:	2b00      	cmp	r3, #0
   14868:	bf0c      	ite	eq
   1486a:	2301      	moveq	r3, #1
   1486c:	2300      	movne	r3, #0
   1486e:	b2db      	uxtb	r3, r3
   14870:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   14872:	f000 ffe7 	bl	15844 <WsfCsExit>

  return empty;
   14876:	7bfb      	ldrb	r3, [r7, #15]
}
   14878:	4618      	mov	r0, r3
   1487a:	3710      	adds	r7, #16
   1487c:	46bd      	mov	sp, r7
   1487e:	bd80      	pop	{r7, pc}

00014880 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   14880:	b580      	push	{r7, lr}
   14882:	b084      	sub	sp, #16
   14884:	af00      	add	r7, sp, #0
   14886:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   14888:	2300      	movs	r3, #0
   1488a:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1488c:	4b10      	ldr	r3, [pc, #64]	; (148d0 <wsfTimerRemove+0x50>)
   1488e:	681b      	ldr	r3, [r3, #0]
   14890:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
   14892:	e008      	b.n	148a6 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
   14894:	68fa      	ldr	r2, [r7, #12]
   14896:	687b      	ldr	r3, [r7, #4]
   14898:	429a      	cmp	r2, r3
   1489a:	d008      	beq.n	148ae <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
   1489c:	68fb      	ldr	r3, [r7, #12]
   1489e:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   148a0:	68fb      	ldr	r3, [r7, #12]
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   148a6:	68fb      	ldr	r3, [r7, #12]
   148a8:	2b00      	cmp	r3, #0
   148aa:	d1f3      	bne.n	14894 <wsfTimerRemove+0x14>
   148ac:	e000      	b.n	148b0 <wsfTimerRemove+0x30>
      break;
   148ae:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   148b0:	68fb      	ldr	r3, [r7, #12]
   148b2:	2b00      	cmp	r3, #0
   148b4:	d007      	beq.n	148c6 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   148b6:	68ba      	ldr	r2, [r7, #8]
   148b8:	6879      	ldr	r1, [r7, #4]
   148ba:	4805      	ldr	r0, [pc, #20]	; (148d0 <wsfTimerRemove+0x50>)
   148bc:	f7ff ff88 	bl	147d0 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   148c0:	687b      	ldr	r3, [r7, #4]
   148c2:	2200      	movs	r2, #0
   148c4:	725a      	strb	r2, [r3, #9]
  }
}
   148c6:	bf00      	nop
   148c8:	3710      	adds	r7, #16
   148ca:	46bd      	mov	sp, r7
   148cc:	bd80      	pop	{r7, pc}
   148ce:	bf00      	nop
   148d0:	1000a640 	.word	0x1000a640

000148d4 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   148d4:	b580      	push	{r7, lr}
   148d6:	b084      	sub	sp, #16
   148d8:	af00      	add	r7, sp, #0
   148da:	6078      	str	r0, [r7, #4]
   148dc:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   148de:	2300      	movs	r3, #0
   148e0:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
   148e2:	f000 ffc3 	bl	1586c <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   148e6:	687b      	ldr	r3, [r7, #4]
   148e8:	7a5b      	ldrb	r3, [r3, #9]
   148ea:	2b00      	cmp	r3, #0
   148ec:	d002      	beq.n	148f4 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
   148ee:	6878      	ldr	r0, [r7, #4]
   148f0:	f7ff ffc6 	bl	14880 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   148f4:	687b      	ldr	r3, [r7, #4]
   148f6:	2201      	movs	r2, #1
   148f8:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   148fa:	687b      	ldr	r3, [r7, #4]
   148fc:	683a      	ldr	r2, [r7, #0]
   148fe:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   14900:	4b0f      	ldr	r3, [pc, #60]	; (14940 <wsfTimerInsert+0x6c>)
   14902:	681b      	ldr	r3, [r3, #0]
   14904:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   14906:	e00a      	b.n	1491e <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
   14908:	687b      	ldr	r3, [r7, #4]
   1490a:	685a      	ldr	r2, [r3, #4]
   1490c:	68fb      	ldr	r3, [r7, #12]
   1490e:	685b      	ldr	r3, [r3, #4]
   14910:	429a      	cmp	r2, r3
   14912:	d308      	bcc.n	14926 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
   14914:	68fb      	ldr	r3, [r7, #12]
   14916:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   14918:	68fb      	ldr	r3, [r7, #12]
   1491a:	681b      	ldr	r3, [r3, #0]
   1491c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1491e:	68fb      	ldr	r3, [r7, #12]
   14920:	2b00      	cmp	r3, #0
   14922:	d1f1      	bne.n	14908 <wsfTimerInsert+0x34>
   14924:	e000      	b.n	14928 <wsfTimerInsert+0x54>
      break;
   14926:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   14928:	68ba      	ldr	r2, [r7, #8]
   1492a:	6879      	ldr	r1, [r7, #4]
   1492c:	4804      	ldr	r0, [pc, #16]	; (14940 <wsfTimerInsert+0x6c>)
   1492e:	f7ff ff24 	bl	1477a <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   14932:	f000 ffa1 	bl	15878 <WsfTaskUnlock>
}
   14936:	bf00      	nop
   14938:	3710      	adds	r7, #16
   1493a:	46bd      	mov	sp, r7
   1493c:	bd80      	pop	{r7, pc}
   1493e:	bf00      	nop
   14940:	1000a640 	.word	0x1000a640

00014944 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   14944:	b480      	push	{r7}
   14946:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   14948:	4b05      	ldr	r3, [pc, #20]	; (14960 <WsfTimerInit+0x1c>)
   1494a:	2200      	movs	r2, #0
   1494c:	601a      	str	r2, [r3, #0]
   1494e:	4b04      	ldr	r3, [pc, #16]	; (14960 <WsfTimerInit+0x1c>)
   14950:	2200      	movs	r2, #0
   14952:	605a      	str	r2, [r3, #4]
}
   14954:	bf00      	nop
   14956:	46bd      	mov	sp, r7
   14958:	f85d 7b04 	ldr.w	r7, [sp], #4
   1495c:	4770      	bx	lr
   1495e:	bf00      	nop
   14960:	1000a640 	.word	0x1000a640

00014964 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   14964:	b580      	push	{r7, lr}
   14966:	b082      	sub	sp, #8
   14968:	af00      	add	r7, sp, #0
   1496a:	6078      	str	r0, [r7, #4]
   1496c:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   1496e:	683b      	ldr	r3, [r7, #0]
   14970:	2264      	movs	r2, #100	; 0x64
   14972:	fb02 f303 	mul.w	r3, r2, r3
   14976:	4619      	mov	r1, r3
   14978:	6878      	ldr	r0, [r7, #4]
   1497a:	f7ff ffab 	bl	148d4 <wsfTimerInsert>
}
   1497e:	bf00      	nop
   14980:	3708      	adds	r7, #8
   14982:	46bd      	mov	sp, r7
   14984:	bd80      	pop	{r7, pc}
	...

00014988 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   14988:	b580      	push	{r7, lr}
   1498a:	b082      	sub	sp, #8
   1498c:	af00      	add	r7, sp, #0
   1498e:	6078      	str	r0, [r7, #4]
   14990:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   14992:	683b      	ldr	r3, [r7, #0]
   14994:	4a05      	ldr	r2, [pc, #20]	; (149ac <WsfTimerStartMs+0x24>)
   14996:	fba2 2303 	umull	r2, r3, r2, r3
   1499a:	08db      	lsrs	r3, r3, #3
   1499c:	4619      	mov	r1, r3
   1499e:	6878      	ldr	r0, [r7, #4]
   149a0:	f7ff ff98 	bl	148d4 <wsfTimerInsert>
}
   149a4:	bf00      	nop
   149a6:	3708      	adds	r7, #8
   149a8:	46bd      	mov	sp, r7
   149aa:	bd80      	pop	{r7, pc}
   149ac:	cccccccd 	.word	0xcccccccd

000149b0 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   149b0:	b580      	push	{r7, lr}
   149b2:	b082      	sub	sp, #8
   149b4:	af00      	add	r7, sp, #0
   149b6:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   149b8:	f000 ff58 	bl	1586c <WsfTaskLock>

  wsfTimerRemove(pTimer);
   149bc:	6878      	ldr	r0, [r7, #4]
   149be:	f7ff ff5f 	bl	14880 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   149c2:	f000 ff59 	bl	15878 <WsfTaskUnlock>
}
   149c6:	bf00      	nop
   149c8:	3708      	adds	r7, #8
   149ca:	46bd      	mov	sp, r7
   149cc:	bd80      	pop	{r7, pc}
	...

000149d0 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   149d0:	b580      	push	{r7, lr}
   149d2:	b084      	sub	sp, #16
   149d4:	af00      	add	r7, sp, #0
   149d6:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   149d8:	f000 ff48 	bl	1586c <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   149dc:	4b12      	ldr	r3, [pc, #72]	; (14a28 <WsfTimerUpdate+0x58>)
   149de:	681b      	ldr	r3, [r3, #0]
   149e0:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   149e2:	e017      	b.n	14a14 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   149e4:	68fb      	ldr	r3, [r7, #12]
   149e6:	685a      	ldr	r2, [r3, #4]
   149e8:	687b      	ldr	r3, [r7, #4]
   149ea:	429a      	cmp	r2, r3
   149ec:	d906      	bls.n	149fc <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
   149ee:	68fb      	ldr	r3, [r7, #12]
   149f0:	685a      	ldr	r2, [r3, #4]
   149f2:	687b      	ldr	r3, [r7, #4]
   149f4:	1ad2      	subs	r2, r2, r3
   149f6:	68fb      	ldr	r3, [r7, #12]
   149f8:	605a      	str	r2, [r3, #4]
   149fa:	e008      	b.n	14a0e <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
   149fc:	68fb      	ldr	r3, [r7, #12]
   149fe:	2200      	movs	r2, #0
   14a00:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   14a02:	68fb      	ldr	r3, [r7, #12]
   14a04:	7a1b      	ldrb	r3, [r3, #8]
   14a06:	2102      	movs	r1, #2
   14a08:	4618      	mov	r0, r3
   14a0a:	f000 ffb7 	bl	1597c <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   14a0e:	68fb      	ldr	r3, [r7, #12]
   14a10:	681b      	ldr	r3, [r3, #0]
   14a12:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   14a14:	68fb      	ldr	r3, [r7, #12]
   14a16:	2b00      	cmp	r3, #0
   14a18:	d1e4      	bne.n	149e4 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   14a1a:	f000 ff2d 	bl	15878 <WsfTaskUnlock>
}
   14a1e:	bf00      	nop
   14a20:	3710      	adds	r7, #16
   14a22:	46bd      	mov	sp, r7
   14a24:	bd80      	pop	{r7, pc}
   14a26:	bf00      	nop
   14a28:	1000a640 	.word	0x1000a640

00014a2c <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   14a2c:	b580      	push	{r7, lr}
   14a2e:	b084      	sub	sp, #16
   14a30:	af00      	add	r7, sp, #0
   14a32:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   14a34:	f000 ff1a 	bl	1586c <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   14a38:	4b0b      	ldr	r3, [pc, #44]	; (14a68 <WsfTimerNextExpiration+0x3c>)
   14a3a:	681b      	ldr	r3, [r3, #0]
   14a3c:	2b00      	cmp	r3, #0
   14a3e:	d105      	bne.n	14a4c <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
   14a40:	687b      	ldr	r3, [r7, #4]
   14a42:	2200      	movs	r2, #0
   14a44:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   14a46:	2300      	movs	r3, #0
   14a48:	60fb      	str	r3, [r7, #12]
   14a4a:	e006      	b.n	14a5a <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
   14a4c:	687b      	ldr	r3, [r7, #4]
   14a4e:	2201      	movs	r2, #1
   14a50:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   14a52:	4b05      	ldr	r3, [pc, #20]	; (14a68 <WsfTimerNextExpiration+0x3c>)
   14a54:	681b      	ldr	r3, [r3, #0]
   14a56:	685b      	ldr	r3, [r3, #4]
   14a58:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   14a5a:	f000 ff0d 	bl	15878 <WsfTaskUnlock>

  return ticks;
   14a5e:	68fb      	ldr	r3, [r7, #12]
}
   14a60:	4618      	mov	r0, r3
   14a62:	3710      	adds	r7, #16
   14a64:	46bd      	mov	sp, r7
   14a66:	bd80      	pop	{r7, pc}
   14a68:	1000a640 	.word	0x1000a640

00014a6c <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   14a6c:	b580      	push	{r7, lr}
   14a6e:	b084      	sub	sp, #16
   14a70:	af00      	add	r7, sp, #0
   14a72:	4603      	mov	r3, r0
   14a74:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   14a76:	2300      	movs	r3, #0
   14a78:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
   14a7a:	f000 fef7 	bl	1586c <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   14a7e:	4b0e      	ldr	r3, [pc, #56]	; (14ab8 <WsfTimerServiceExpired+0x4c>)
   14a80:	681b      	ldr	r3, [r3, #0]
   14a82:	60bb      	str	r3, [r7, #8]
   14a84:	68bb      	ldr	r3, [r7, #8]
   14a86:	2b00      	cmp	r3, #0
   14a88:	d00f      	beq.n	14aaa <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   14a8a:	68bb      	ldr	r3, [r7, #8]
   14a8c:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   14a8e:	2b00      	cmp	r3, #0
   14a90:	d10b      	bne.n	14aaa <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   14a92:	68fa      	ldr	r2, [r7, #12]
   14a94:	68b9      	ldr	r1, [r7, #8]
   14a96:	4808      	ldr	r0, [pc, #32]	; (14ab8 <WsfTimerServiceExpired+0x4c>)
   14a98:	f7ff fe9a 	bl	147d0 <WsfQueueRemove>

    pElem->isStarted = FALSE;
   14a9c:	68bb      	ldr	r3, [r7, #8]
   14a9e:	2200      	movs	r2, #0
   14aa0:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   14aa2:	f000 fee9 	bl	15878 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   14aa6:	68bb      	ldr	r3, [r7, #8]
   14aa8:	e002      	b.n	14ab0 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   14aaa:	f000 fee5 	bl	15878 <WsfTaskUnlock>

  return NULL;
   14aae:	2300      	movs	r3, #0
}
   14ab0:	4618      	mov	r0, r3
   14ab2:	3710      	adds	r7, #16
   14ab4:	46bd      	mov	sp, r7
   14ab6:	bd80      	pop	{r7, pc}
   14ab8:	1000a640 	.word	0x1000a640

00014abc <amdtpcDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcDmCback(dmEvt_t *pDmEvt)
{
   14abc:	b580      	push	{r7, lr}
   14abe:	b088      	sub	sp, #32
   14ac0:	af00      	add	r7, sp, #0
   14ac2:	6078      	str	r0, [r7, #4]
  dmEvt_t   *pMsg;
  uint16_t  len;
  uint16_t  reportLen;

  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
   14ac4:	687b      	ldr	r3, [r7, #4]
   14ac6:	789b      	ldrb	r3, [r3, #2]
   14ac8:	2b34      	cmp	r3, #52	; 0x34
   14aca:	d116      	bne.n	14afa <amdtpcDmCback+0x3e>
  {
    DmSecSetEccKey(&pDmEvt->eccMsg.data.key);
   14acc:	687b      	ldr	r3, [r7, #4]
   14ace:	3304      	adds	r3, #4
   14ad0:	4618      	mov	r0, r3
   14ad2:	f7fb fd95 	bl	10600 <DmSecSetEccKey>

    if (amdtpcSecCfg.oob)
   14ad6:	2300      	movs	r3, #0
   14ad8:	2b00      	cmp	r3, #0
   14ada:	d06c      	beq.n	14bb6 <amdtpcDmCback+0xfa>
    {
      uint8_t oobLocalRandom[SMP_RAND_LEN];
      SecRand(oobLocalRandom, SMP_RAND_LEN);
   14adc:	f107 0308 	add.w	r3, r7, #8
   14ae0:	2110      	movs	r1, #16
   14ae2:	4618      	mov	r0, r3
   14ae4:	f007 f830 	bl	1bb48 <SecRand>
      DmSecCalcOobReq(oobLocalRandom, pDmEvt->eccMsg.data.key.pubKey_x);
   14ae8:	687b      	ldr	r3, [r7, #4]
   14aea:	1d1a      	adds	r2, r3, #4
   14aec:	f107 0308 	add.w	r3, r7, #8
   14af0:	4611      	mov	r1, r2
   14af2:	4618      	mov	r0, r3
   14af4:	f7fb fce6 	bl	104c4 <DmSecCalcOobReq>
        memcpy(pMsg->scanReport.pData, pDmEvt->scanReport.pData, reportLen);
      }
      WsfMsgSend(amdtpcCb.handlerId, pMsg);
    }
  }
}
   14af8:	e05d      	b.n	14bb6 <amdtpcDmCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_CALC_OOB_IND)
   14afa:	687b      	ldr	r3, [r7, #4]
   14afc:	789b      	ldrb	r3, [r3, #2]
   14afe:	2b33      	cmp	r3, #51	; 0x33
   14b00:	d121      	bne.n	14b46 <amdtpcDmCback+0x8a>
    if (amdtpcOobCfg == NULL)
   14b02:	4b2f      	ldr	r3, [pc, #188]	; (14bc0 <amdtpcDmCback+0x104>)
   14b04:	681b      	ldr	r3, [r3, #0]
   14b06:	2b00      	cmp	r3, #0
   14b08:	d105      	bne.n	14b16 <amdtpcDmCback+0x5a>
      amdtpcOobCfg = WsfBufAlloc(sizeof(dmSecLescOobCfg_t));
   14b0a:	2040      	movs	r0, #64	; 0x40
   14b0c:	f7ff fce2 	bl	144d4 <WsfBufAlloc>
   14b10:	4602      	mov	r2, r0
   14b12:	4b2b      	ldr	r3, [pc, #172]	; (14bc0 <amdtpcDmCback+0x104>)
   14b14:	601a      	str	r2, [r3, #0]
    if (amdtpcOobCfg)
   14b16:	4b2a      	ldr	r3, [pc, #168]	; (14bc0 <amdtpcDmCback+0x104>)
   14b18:	681b      	ldr	r3, [r3, #0]
   14b1a:	2b00      	cmp	r3, #0
   14b1c:	d04b      	beq.n	14bb6 <amdtpcDmCback+0xfa>
      Calc128Cpy(amdtpcOobCfg->localConfirm, pDmEvt->oobCalcInd.confirm);
   14b1e:	4b28      	ldr	r3, [pc, #160]	; (14bc0 <amdtpcDmCback+0x104>)
   14b20:	681b      	ldr	r3, [r3, #0]
   14b22:	f103 0210 	add.w	r2, r3, #16
   14b26:	687b      	ldr	r3, [r7, #4]
   14b28:	3304      	adds	r3, #4
   14b2a:	4619      	mov	r1, r3
   14b2c:	4610      	mov	r0, r2
   14b2e:	f7ff f8fe 	bl	13d2e <Calc128Cpy>
      Calc128Cpy(amdtpcOobCfg->localRandom, pDmEvt->oobCalcInd.random);
   14b32:	4b23      	ldr	r3, [pc, #140]	; (14bc0 <amdtpcDmCback+0x104>)
   14b34:	681b      	ldr	r3, [r3, #0]
   14b36:	461a      	mov	r2, r3
   14b38:	687b      	ldr	r3, [r7, #4]
   14b3a:	3314      	adds	r3, #20
   14b3c:	4619      	mov	r1, r3
   14b3e:	4610      	mov	r0, r2
   14b40:	f7ff f8f5 	bl	13d2e <Calc128Cpy>
}
   14b44:	e037      	b.n	14bb6 <amdtpcDmCback+0xfa>
    len = DmSizeOfEvt(pDmEvt);
   14b46:	6878      	ldr	r0, [r7, #4]
   14b48:	f7fb f840 	bl	fbcc <DmSizeOfEvt>
   14b4c:	4603      	mov	r3, r0
   14b4e:	83bb      	strh	r3, [r7, #28]
    if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
   14b50:	687b      	ldr	r3, [r7, #4]
   14b52:	789b      	ldrb	r3, [r3, #2]
   14b54:	2b26      	cmp	r3, #38	; 0x26
   14b56:	d103      	bne.n	14b60 <amdtpcDmCback+0xa4>
      reportLen = pDmEvt->scanReport.len;
   14b58:	687b      	ldr	r3, [r7, #4]
   14b5a:	7a1b      	ldrb	r3, [r3, #8]
   14b5c:	83fb      	strh	r3, [r7, #30]
   14b5e:	e001      	b.n	14b64 <amdtpcDmCback+0xa8>
      reportLen = 0;
   14b60:	2300      	movs	r3, #0
   14b62:	83fb      	strh	r3, [r7, #30]
    if ((pMsg = WsfMsgAlloc(len + reportLen)) != NULL)
   14b64:	8bba      	ldrh	r2, [r7, #28]
   14b66:	8bfb      	ldrh	r3, [r7, #30]
   14b68:	4413      	add	r3, r2
   14b6a:	b29b      	uxth	r3, r3
   14b6c:	4618      	mov	r0, r3
   14b6e:	f7ff fd40 	bl	145f2 <WsfMsgAlloc>
   14b72:	61b8      	str	r0, [r7, #24]
   14b74:	69bb      	ldr	r3, [r7, #24]
   14b76:	2b00      	cmp	r3, #0
   14b78:	d01d      	beq.n	14bb6 <amdtpcDmCback+0xfa>
      memcpy(pMsg, pDmEvt, len);
   14b7a:	8bbb      	ldrh	r3, [r7, #28]
   14b7c:	461a      	mov	r2, r3
   14b7e:	6879      	ldr	r1, [r7, #4]
   14b80:	69b8      	ldr	r0, [r7, #24]
   14b82:	f7f7 faed 	bl	c160 <memcpy>
      if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
   14b86:	687b      	ldr	r3, [r7, #4]
   14b88:	789b      	ldrb	r3, [r3, #2]
   14b8a:	2b26      	cmp	r3, #38	; 0x26
   14b8c:	d10c      	bne.n	14ba8 <amdtpcDmCback+0xec>
        pMsg->scanReport.pData = (uint8_t *) ((uint8_t *) pMsg + len);
   14b8e:	8bbb      	ldrh	r3, [r7, #28]
   14b90:	69ba      	ldr	r2, [r7, #24]
   14b92:	441a      	add	r2, r3
   14b94:	69bb      	ldr	r3, [r7, #24]
   14b96:	605a      	str	r2, [r3, #4]
        memcpy(pMsg->scanReport.pData, pDmEvt->scanReport.pData, reportLen);
   14b98:	69bb      	ldr	r3, [r7, #24]
   14b9a:	6858      	ldr	r0, [r3, #4]
   14b9c:	687b      	ldr	r3, [r7, #4]
   14b9e:	685b      	ldr	r3, [r3, #4]
   14ba0:	8bfa      	ldrh	r2, [r7, #30]
   14ba2:	4619      	mov	r1, r3
   14ba4:	f7f7 fadc 	bl	c160 <memcpy>
      WsfMsgSend(amdtpcCb.handlerId, pMsg);
   14ba8:	4b06      	ldr	r3, [pc, #24]	; (14bc4 <amdtpcDmCback+0x108>)
   14baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   14bae:	69b9      	ldr	r1, [r7, #24]
   14bb0:	4618      	mov	r0, r3
   14bb2:	f7ff fd42 	bl	1463a <WsfMsgSend>
}
   14bb6:	bf00      	nop
   14bb8:	3720      	adds	r7, #32
   14bba:	46bd      	mov	sp, r7
   14bbc:	bd80      	pop	{r7, pc}
   14bbe:	bf00      	nop
   14bc0:	10005244 	.word	0x10005244
   14bc4:	1000a664 	.word	0x1000a664

00014bc8 <amdtpcAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcAttCback(attEvt_t *pEvt)
{
   14bc8:	b580      	push	{r7, lr}
   14bca:	b084      	sub	sp, #16
   14bcc:	af00      	add	r7, sp, #0
   14bce:	6078      	str	r0, [r7, #4]
  attEvt_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   14bd0:	687b      	ldr	r3, [r7, #4]
   14bd2:	891b      	ldrh	r3, [r3, #8]
   14bd4:	3310      	adds	r3, #16
   14bd6:	b29b      	uxth	r3, r3
   14bd8:	4618      	mov	r0, r3
   14bda:	f7ff fd0a 	bl	145f2 <WsfMsgAlloc>
   14bde:	60f8      	str	r0, [r7, #12]
   14be0:	68fb      	ldr	r3, [r7, #12]
   14be2:	2b00      	cmp	r3, #0
   14be4:	d019      	beq.n	14c1a <amdtpcAttCback+0x52>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   14be6:	2210      	movs	r2, #16
   14be8:	6879      	ldr	r1, [r7, #4]
   14bea:	68f8      	ldr	r0, [r7, #12]
   14bec:	f7f7 fab8 	bl	c160 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   14bf0:	68fb      	ldr	r3, [r7, #12]
   14bf2:	f103 0210 	add.w	r2, r3, #16
   14bf6:	68fb      	ldr	r3, [r7, #12]
   14bf8:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   14bfa:	68fb      	ldr	r3, [r7, #12]
   14bfc:	6858      	ldr	r0, [r3, #4]
   14bfe:	687b      	ldr	r3, [r7, #4]
   14c00:	6859      	ldr	r1, [r3, #4]
   14c02:	687b      	ldr	r3, [r7, #4]
   14c04:	891b      	ldrh	r3, [r3, #8]
   14c06:	461a      	mov	r2, r3
   14c08:	f7f7 faaa 	bl	c160 <memcpy>
    WsfMsgSend(amdtpcCb.handlerId, pMsg);
   14c0c:	4b05      	ldr	r3, [pc, #20]	; (14c24 <amdtpcAttCback+0x5c>)
   14c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   14c12:	68f9      	ldr	r1, [r7, #12]
   14c14:	4618      	mov	r0, r3
   14c16:	f7ff fd10 	bl	1463a <WsfMsgSend>
  }
}
   14c1a:	bf00      	nop
   14c1c:	3710      	adds	r7, #16
   14c1e:	46bd      	mov	sp, r7
   14c20:	bd80      	pop	{r7, pc}
   14c22:	bf00      	nop
   14c24:	1000a664 	.word	0x1000a664

00014c28 <amdtpcScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcScanStart(dmEvt_t *pMsg)
{
   14c28:	b480      	push	{r7}
   14c2a:	b083      	sub	sp, #12
   14c2c:	af00      	add	r7, sp, #0
   14c2e:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   14c30:	687b      	ldr	r3, [r7, #4]
   14c32:	78db      	ldrb	r3, [r3, #3]
   14c34:	2b00      	cmp	r3, #0
   14c36:	d103      	bne.n	14c40 <amdtpcScanStart+0x18>
  {
    amdtpcCb.scanning = TRUE;
   14c38:	4b04      	ldr	r3, [pc, #16]	; (14c4c <amdtpcScanStart+0x24>)
   14c3a:	2201      	movs	r2, #1
   14c3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
}
   14c40:	bf00      	nop
   14c42:	370c      	adds	r7, #12
   14c44:	46bd      	mov	sp, r7
   14c46:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c4a:	4770      	bx	lr
   14c4c:	1000a664 	.word	0x1000a664

00014c50 <amdtpcScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcScanStop(dmEvt_t *pMsg)
{
   14c50:	b580      	push	{r7, lr}
   14c52:	b082      	sub	sp, #8
   14c54:	af00      	add	r7, sp, #0
   14c56:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   14c58:	687b      	ldr	r3, [r7, #4]
   14c5a:	78db      	ldrb	r3, [r3, #3]
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d116      	bne.n	14c8e <amdtpcScanStop+0x3e>
  {
    amdtpcCb.scanning = FALSE;
   14c60:	4b0d      	ldr	r3, [pc, #52]	; (14c98 <amdtpcScanStop+0x48>)
   14c62:	2200      	movs	r2, #0
   14c64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    amdtpcCb.autoConnect = FALSE;
   14c68:	4b0b      	ldr	r3, [pc, #44]	; (14c98 <amdtpcScanStop+0x48>)
   14c6a:	2200      	movs	r2, #0
   14c6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    /* Open connection */
    if (amdtpcConnInfo.doConnect)
   14c70:	4b0a      	ldr	r3, [pc, #40]	; (14c9c <amdtpcScanStop+0x4c>)
   14c72:	7adb      	ldrb	r3, [r3, #11]
   14c74:	2b00      	cmp	r3, #0
   14c76:	d00a      	beq.n	14c8e <amdtpcScanStop+0x3e>
    {
      AppConnOpen(amdtpcConnInfo.addrType, amdtpcConnInfo.addr, amdtpcConnInfo.dbHdl);
   14c78:	4b08      	ldr	r3, [pc, #32]	; (14c9c <amdtpcScanStop+0x4c>)
   14c7a:	7918      	ldrb	r0, [r3, #4]
   14c7c:	4b07      	ldr	r3, [pc, #28]	; (14c9c <amdtpcScanStop+0x4c>)
   14c7e:	681b      	ldr	r3, [r3, #0]
   14c80:	461a      	mov	r2, r3
   14c82:	4907      	ldr	r1, [pc, #28]	; (14ca0 <amdtpcScanStop+0x50>)
   14c84:	f009 f9f8 	bl	1e078 <AppConnOpen>
      amdtpcConnInfo.doConnect = FALSE;
   14c88:	4b04      	ldr	r3, [pc, #16]	; (14c9c <amdtpcScanStop+0x4c>)
   14c8a:	2200      	movs	r2, #0
   14c8c:	72da      	strb	r2, [r3, #11]
    }
  }
}
   14c8e:	bf00      	nop
   14c90:	3708      	adds	r7, #8
   14c92:	46bd      	mov	sp, r7
   14c94:	bd80      	pop	{r7, pc}
   14c96:	bf00      	nop
   14c98:	1000a664 	.word	0x1000a664
   14c9c:	1000a658 	.word	0x1000a658
   14ca0:	1000a65d 	.word	0x1000a65d

00014ca4 <amdtpcScanReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcScanReport(dmEvt_t *pMsg)
{
   14ca4:	b580      	push	{r7, lr}
   14ca6:	b086      	sub	sp, #24
   14ca8:	af00      	add	r7, sp, #0
   14caa:	6078      	str	r0, [r7, #4]
  uint8_t *pData;
  appDbHdl_t dbHdl;
  bool_t  connect = FALSE;
   14cac:	2300      	movs	r3, #0
   14cae:	75fb      	strb	r3, [r7, #23]

  /* disregard if not scanning or autoconnecting */
  if (!amdtpcCb.scanning || !amdtpcCb.autoConnect)
   14cb0:	4b3b      	ldr	r3, [pc, #236]	; (14da0 <amdtpcScanReport+0xfc>)
   14cb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   14cb6:	2b00      	cmp	r3, #0
   14cb8:	d06d      	beq.n	14d96 <amdtpcScanReport+0xf2>
   14cba:	4b39      	ldr	r3, [pc, #228]	; (14da0 <amdtpcScanReport+0xfc>)
   14cbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   14cc0:	2b00      	cmp	r3, #0
   14cc2:	d068      	beq.n	14d96 <amdtpcScanReport+0xf2>
  {
    return;
  }

  /* if we already have a bond with this device then connect to it */
  if ((dbHdl = AppDbFindByAddr(pMsg->scanReport.addrType, pMsg->scanReport.addr)) != APP_DB_HDL_NONE)
   14cc4:	687b      	ldr	r3, [r7, #4]
   14cc6:	7ada      	ldrb	r2, [r3, #11]
   14cc8:	687b      	ldr	r3, [r7, #4]
   14cca:	330c      	adds	r3, #12
   14ccc:	4619      	mov	r1, r3
   14cce:	4610      	mov	r0, r2
   14cd0:	f7fe fd7e 	bl	137d0 <AppDbFindByAddr>
   14cd4:	6138      	str	r0, [r7, #16]
   14cd6:	693b      	ldr	r3, [r7, #16]
   14cd8:	2b00      	cmp	r3, #0
   14cda:	d012      	beq.n	14d02 <amdtpcScanReport+0x5e>
  {
    /* if this is a directed advertisement where the initiator address is an RPA */
    if (DM_RAND_ADDR_RPA(pMsg->scanReport.directAddr, pMsg->scanReport.directAddrType))
   14cdc:	687b      	ldr	r3, [r7, #4]
   14cde:	7c9b      	ldrb	r3, [r3, #18]
   14ce0:	2b01      	cmp	r3, #1
   14ce2:	d10b      	bne.n	14cfc <amdtpcScanReport+0x58>
   14ce4:	687b      	ldr	r3, [r7, #4]
   14ce6:	7e1b      	ldrb	r3, [r3, #24]
   14ce8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14cec:	2b40      	cmp	r3, #64	; 0x40
   14cee:	d105      	bne.n	14cfc <amdtpcScanReport+0x58>
    {
      /* resolve direct address to see if it's addressed to us */
      AppMasterResolveAddr(pMsg, dbHdl, APP_RESOLVE_DIRECT_RPA);
   14cf0:	2201      	movs	r2, #1
   14cf2:	6939      	ldr	r1, [r7, #16]
   14cf4:	6878      	ldr	r0, [r7, #4]
   14cf6:	f009 f90b 	bl	1df10 <AppMasterResolveAddr>
   14cfa:	e02f      	b.n	14d5c <amdtpcScanReport+0xb8>
    }
    else
    {
      connect = TRUE;
   14cfc:	2301      	movs	r3, #1
   14cfe:	75fb      	strb	r3, [r7, #23]
   14d00:	e02c      	b.n	14d5c <amdtpcScanReport+0xb8>
    }
  }
  /* if the peer device uses an RPA */
  else if (DM_RAND_ADDR_RPA(pMsg->scanReport.addr, pMsg->scanReport.addrType))
   14d02:	687b      	ldr	r3, [r7, #4]
   14d04:	7adb      	ldrb	r3, [r3, #11]
   14d06:	2b01      	cmp	r3, #1
   14d08:	d10b      	bne.n	14d22 <amdtpcScanReport+0x7e>
   14d0a:	687b      	ldr	r3, [r7, #4]
   14d0c:	7c5b      	ldrb	r3, [r3, #17]
   14d0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14d12:	2b40      	cmp	r3, #64	; 0x40
   14d14:	d105      	bne.n	14d22 <amdtpcScanReport+0x7e>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    AppMasterResolveAddr(pMsg, APP_DB_HDL_NONE, APP_RESOLVE_ADV_RPA);
   14d16:	2200      	movs	r2, #0
   14d18:	2100      	movs	r1, #0
   14d1a:	6878      	ldr	r0, [r7, #4]
   14d1c:	f009 f8f8 	bl	1df10 <AppMasterResolveAddr>
   14d20:	e01c      	b.n	14d5c <amdtpcScanReport+0xb8>
  }
  /* find vendor-specific advertising data */
  else if ((pData = DmFindAdType(DM_ADV_TYPE_MANUFACTURER, pMsg->scanReport.len,
   14d22:	687b      	ldr	r3, [r7, #4]
   14d24:	7a1b      	ldrb	r3, [r3, #8]
   14d26:	b299      	uxth	r1, r3
   14d28:	687b      	ldr	r3, [r7, #4]
   14d2a:	685b      	ldr	r3, [r3, #4]
   14d2c:	461a      	mov	r2, r3
   14d2e:	20ff      	movs	r0, #255	; 0xff
   14d30:	f7fa fef8 	bl	fb24 <DmFindAdType>
   14d34:	60f8      	str	r0, [r7, #12]
   14d36:	68fb      	ldr	r3, [r7, #12]
   14d38:	2b00      	cmp	r3, #0
   14d3a:	d00f      	beq.n	14d5c <amdtpcScanReport+0xb8>
                                 pMsg->scanReport.pData)) != NULL)
  {
    /* check length and vendor ID */
    if (pData[DM_AD_LEN_IDX] >= 3 && BYTES_UINT16_CMP(&pData[DM_AD_DATA_IDX], HCI_ID_ARM))
   14d3c:	68fb      	ldr	r3, [r7, #12]
   14d3e:	781b      	ldrb	r3, [r3, #0]
   14d40:	2b02      	cmp	r3, #2
   14d42:	d90b      	bls.n	14d5c <amdtpcScanReport+0xb8>
   14d44:	68fb      	ldr	r3, [r7, #12]
   14d46:	3303      	adds	r3, #3
   14d48:	781b      	ldrb	r3, [r3, #0]
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d106      	bne.n	14d5c <amdtpcScanReport+0xb8>
   14d4e:	68fb      	ldr	r3, [r7, #12]
   14d50:	3302      	adds	r3, #2
   14d52:	781b      	ldrb	r3, [r3, #0]
   14d54:	2b5f      	cmp	r3, #95	; 0x5f
   14d56:	d101      	bne.n	14d5c <amdtpcScanReport+0xb8>
    {
      connect = TRUE;
   14d58:	2301      	movs	r3, #1
   14d5a:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (connect)
   14d5c:	7dfb      	ldrb	r3, [r7, #23]
   14d5e:	2b00      	cmp	r3, #0
   14d60:	d01a      	beq.n	14d98 <amdtpcScanReport+0xf4>
  {
    /* stop scanning and connect */
    amdtpcCb.autoConnect = FALSE;
   14d62:	4b0f      	ldr	r3, [pc, #60]	; (14da0 <amdtpcScanReport+0xfc>)
   14d64:	2200      	movs	r2, #0
   14d66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    AppScanStop();
   14d6a:	f009 f973 	bl	1e054 <AppScanStop>

    /* Store peer information for connect on scan stop */
    amdtpcConnInfo.addrType = pMsg->scanReport.addrType;
   14d6e:	687b      	ldr	r3, [r7, #4]
   14d70:	7ada      	ldrb	r2, [r3, #11]
   14d72:	4b0c      	ldr	r3, [pc, #48]	; (14da4 <amdtpcScanReport+0x100>)
   14d74:	711a      	strb	r2, [r3, #4]
    memcpy(amdtpcConnInfo.addr, pMsg->scanReport.addr, sizeof(bdAddr_t));
   14d76:	687b      	ldr	r3, [r7, #4]
   14d78:	f103 020c 	add.w	r2, r3, #12
   14d7c:	4b09      	ldr	r3, [pc, #36]	; (14da4 <amdtpcScanReport+0x100>)
   14d7e:	3305      	adds	r3, #5
   14d80:	6811      	ldr	r1, [r2, #0]
   14d82:	6019      	str	r1, [r3, #0]
   14d84:	8892      	ldrh	r2, [r2, #4]
   14d86:	809a      	strh	r2, [r3, #4]
    amdtpcConnInfo.dbHdl = dbHdl;
   14d88:	4a06      	ldr	r2, [pc, #24]	; (14da4 <amdtpcScanReport+0x100>)
   14d8a:	693b      	ldr	r3, [r7, #16]
   14d8c:	6013      	str	r3, [r2, #0]
    amdtpcConnInfo.doConnect = TRUE;
   14d8e:	4b05      	ldr	r3, [pc, #20]	; (14da4 <amdtpcScanReport+0x100>)
   14d90:	2201      	movs	r2, #1
   14d92:	72da      	strb	r2, [r3, #11]
   14d94:	e000      	b.n	14d98 <amdtpcScanReport+0xf4>
    return;
   14d96:	bf00      	nop
  }
}
   14d98:	3718      	adds	r7, #24
   14d9a:	46bd      	mov	sp, r7
   14d9c:	bd80      	pop	{r7, pc}
   14d9e:	bf00      	nop
   14da0:	1000a664 	.word	0x1000a664
   14da4:	1000a658 	.word	0x1000a658

00014da8 <amdtpcOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcOpen(dmEvt_t *pMsg)
{
   14da8:	b480      	push	{r7}
   14daa:	b083      	sub	sp, #12
   14dac:	af00      	add	r7, sp, #0
   14dae:	6078      	str	r0, [r7, #4]
}
   14db0:	bf00      	nop
   14db2:	370c      	adds	r7, #12
   14db4:	46bd      	mov	sp, r7
   14db6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dba:	4770      	bx	lr

00014dbc <amdtpcSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcSetup(dmEvt_t *pMsg)
{
   14dbc:	b580      	push	{r7, lr}
   14dbe:	b082      	sub	sp, #8
   14dc0:	af00      	add	r7, sp, #0
   14dc2:	6078      	str	r0, [r7, #4]
  amdtpcCb.scanning = FALSE;
   14dc4:	4b08      	ldr	r3, [pc, #32]	; (14de8 <amdtpcSetup+0x2c>)
   14dc6:	2200      	movs	r2, #0
   14dc8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  amdtpcCb.autoConnect = FALSE;
   14dcc:	4b06      	ldr	r3, [pc, #24]	; (14de8 <amdtpcSetup+0x2c>)
   14dce:	2200      	movs	r2, #0
   14dd0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  amdtpcConnInfo.doConnect = FALSE;
   14dd4:	4b05      	ldr	r3, [pc, #20]	; (14dec <amdtpcSetup+0x30>)
   14dd6:	2200      	movs	r2, #0
   14dd8:	72da      	strb	r2, [r3, #11]

  DmConnSetConnSpec((hciConnSpec_t *) &amdtpcConnCfg);
   14dda:	4805      	ldr	r0, [pc, #20]	; (14df0 <amdtpcSetup+0x34>)
   14ddc:	f7fa fcb6 	bl	f74c <DmConnSetConnSpec>
}
   14de0:	bf00      	nop
   14de2:	3708      	adds	r7, #8
   14de4:	46bd      	mov	sp, r7
   14de6:	bd80      	pop	{r7, pc}
   14de8:	1000a664 	.word	0x1000a664
   14dec:	1000a658 	.word	0x1000a658
   14df0:	00026034 	.word	0x00026034

00014df4 <amdtpcDiscGapCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcDiscGapCmpl(dmConnId_t connId)
{
   14df4:	b580      	push	{r7, lr}
   14df6:	b084      	sub	sp, #16
   14df8:	af00      	add	r7, sp, #0
   14dfa:	4603      	mov	r3, r0
   14dfc:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t dbHdl;

  /* if RPA Only attribute found on peer device */
  if ((pAmdtpcGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
   14dfe:	4b0b      	ldr	r3, [pc, #44]	; (14e2c <amdtpcDiscGapCmpl+0x38>)
   14e00:	681b      	ldr	r3, [r3, #0]
   14e02:	3302      	adds	r3, #2
   14e04:	881b      	ldrh	r3, [r3, #0]
   14e06:	2b00      	cmp	r3, #0
   14e08:	d00b      	beq.n	14e22 <amdtpcDiscGapCmpl+0x2e>
   14e0a:	79fb      	ldrb	r3, [r7, #7]
   14e0c:	4618      	mov	r0, r3
   14e0e:	f008 faef 	bl	1d3f0 <AppDbGetHdl>
   14e12:	60f8      	str	r0, [r7, #12]
   14e14:	68fb      	ldr	r3, [r7, #12]
   14e16:	2b00      	cmp	r3, #0
   14e18:	d003      	beq.n	14e22 <amdtpcDiscGapCmpl+0x2e>
      ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
  {
    /* update DB */
    AppDbSetPeerRpao(dbHdl, TRUE);
   14e1a:	2101      	movs	r1, #1
   14e1c:	68f8      	ldr	r0, [r7, #12]
   14e1e:	f7fe fe36 	bl	13a8e <AppDbSetPeerRpao>
  }
}
   14e22:	bf00      	nop
   14e24:	3710      	adds	r7, #16
   14e26:	46bd      	mov	sp, r7
   14e28:	bd80      	pop	{r7, pc}
   14e2a:	bf00      	nop
   14e2c:	10002bc8 	.word	0x10002bc8

00014e30 <amdtpcBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcBtnCback(uint8_t btn)
{
   14e30:	b580      	push	{r7, lr}
   14e32:	b084      	sub	sp, #16
   14e34:	af00      	add	r7, sp, #0
   14e36:	4603      	mov	r3, r0
   14e38:	71fb      	strb	r3, [r7, #7]
  dmConnId_t      connId;

  /* button actions when connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   14e3a:	f008 fab7 	bl	1d3ac <AppConnIsOpen>
   14e3e:	4603      	mov	r3, r0
   14e40:	73fb      	strb	r3, [r7, #15]
   14e42:	7bfb      	ldrb	r3, [r7, #15]
   14e44:	2b00      	cmp	r3, #0
   14e46:	d00a      	beq.n	14e5e <amdtpcBtnCback+0x2e>
  {
    switch (btn)
   14e48:	79fb      	ldrb	r3, [r7, #7]
   14e4a:	2b02      	cmp	r3, #2
   14e4c:	d04b      	beq.n	14ee6 <amdtpcBtnCback+0xb6>
   14e4e:	2b04      	cmp	r3, #4
   14e50:	d000      	beq.n	14e54 <amdtpcBtnCback+0x24>
        /* disconnect */
        AppConnClose(connId);
        break;

      default:
        break;
   14e52:	e04d      	b.n	14ef0 <amdtpcBtnCback+0xc0>
        AppConnClose(connId);
   14e54:	7bfb      	ldrb	r3, [r7, #15]
   14e56:	4618      	mov	r0, r3
   14e58:	f008 fa98 	bl	1d38c <AppConnClose>
        break;
   14e5c:	e048      	b.n	14ef0 <amdtpcBtnCback+0xc0>
    }
  }
  /* button actions when not connected */
  else
  {
    switch (btn)
   14e5e:	79fb      	ldrb	r3, [r7, #7]
   14e60:	3b02      	subs	r3, #2
   14e62:	2b08      	cmp	r3, #8
   14e64:	d841      	bhi.n	14eea <amdtpcBtnCback+0xba>
   14e66:	a201      	add	r2, pc, #4	; (adr r2, 14e6c <amdtpcBtnCback+0x3c>)
   14e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14e6c:	00014e91 	.word	0x00014e91
   14e70:	00014eeb 	.word	0x00014eeb
   14e74:	00014ec9 	.word	0x00014ec9
   14e78:	00014ecf 	.word	0x00014ecf
   14e7c:	00014eeb 	.word	0x00014eeb
   14e80:	00014eeb 	.word	0x00014eeb
   14e84:	00014eeb 	.word	0x00014eeb
   14e88:	00014eeb 	.word	0x00014eeb
   14e8c:	00014ed5 	.word	0x00014ed5
    {
      case APP_UI_BTN_1_SHORT:
        /* if scanning cancel scanning */
        if (amdtpcCb.scanning)
   14e90:	4b19      	ldr	r3, [pc, #100]	; (14ef8 <amdtpcBtnCback+0xc8>)
   14e92:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   14e96:	2b00      	cmp	r3, #0
   14e98:	d002      	beq.n	14ea0 <amdtpcBtnCback+0x70>
        {
          AppScanStop();
   14e9a:	f009 f8db 	bl	1e054 <AppScanStop>
          amdtpcCb.autoConnect = TRUE;
          amdtpcConnInfo.doConnect = FALSE;
          AppScanStart(amdtpcMasterCfg.discMode, amdtpcMasterCfg.scanType,
                       amdtpcMasterCfg.scanDuration);
        }
        break;
   14e9e:	e026      	b.n	14eee <amdtpcBtnCback+0xbe>
        else if (!amdtpcCb.autoConnect)
   14ea0:	4b15      	ldr	r3, [pc, #84]	; (14ef8 <amdtpcBtnCback+0xc8>)
   14ea2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   14ea6:	2b00      	cmp	r3, #0
   14ea8:	d121      	bne.n	14eee <amdtpcBtnCback+0xbe>
          amdtpcCb.autoConnect = TRUE;
   14eaa:	4b13      	ldr	r3, [pc, #76]	; (14ef8 <amdtpcBtnCback+0xc8>)
   14eac:	2201      	movs	r2, #1
   14eae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
          amdtpcConnInfo.doConnect = FALSE;
   14eb2:	4b12      	ldr	r3, [pc, #72]	; (14efc <amdtpcBtnCback+0xcc>)
   14eb4:	2200      	movs	r2, #0
   14eb6:	72da      	strb	r2, [r3, #11]
          AppScanStart(amdtpcMasterCfg.discMode, amdtpcMasterCfg.scanType,
   14eb8:	2300      	movs	r3, #0
   14eba:	2101      	movs	r1, #1
   14ebc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   14ec0:	4618      	mov	r0, r3
   14ec2:	f009 f89f 	bl	1e004 <AppScanStart>
        break;
   14ec6:	e012      	b.n	14eee <amdtpcBtnCback+0xbe>

      case APP_UI_BTN_1_LONG:
        /* clear bonded device info */
        AppDbDeleteAllRecords();
   14ec8:	f7fe fc64 	bl	13794 <AppDbDeleteAllRecords>
        break;
   14ecc:	e010      	b.n	14ef0 <amdtpcBtnCback+0xc0>

      case APP_UI_BTN_1_EX_LONG:
        /* add RPAO characteristic to GAP service -- needed only when DM Privacy enabled */
        SvcCoreGapAddRpaoCh();
   14ece:	f009 fa01 	bl	1e2d4 <SvcCoreGapAddRpaoCh>
        break;
   14ed2:	e00d      	b.n	14ef0 <amdtpcBtnCback+0xc0>

      case APP_UI_BTN_2_EX_LONG:
        /* enable device privacy -- start generating local RPAs every 15 minutes */
        DmAdvPrivStart(15 * 60);
   14ed4:	f44f 7061 	mov.w	r0, #900	; 0x384
   14ed8:	f7fa f910 	bl	f0fc <DmAdvPrivStart>

        /* set Scanning filter policy to accept directed advertisements with RPAs */
        DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_SCAN, HCI_FILT_RES_INIT);
   14edc:	2102      	movs	r1, #2
   14ede:	2001      	movs	r0, #1
   14ee0:	f7fa fde4 	bl	faac <DmDevSetFilterPolicy>
        break;
   14ee4:	e004      	b.n	14ef0 <amdtpcBtnCback+0xc0>
        break;
   14ee6:	bf00      	nop
   14ee8:	e002      	b.n	14ef0 <amdtpcBtnCback+0xc0>

      default:
        break;
   14eea:	bf00      	nop
   14eec:	e000      	b.n	14ef0 <amdtpcBtnCback+0xc0>
        break;
   14eee:	bf00      	nop
    }
  }
}
   14ef0:	bf00      	nop
   14ef2:	3710      	adds	r7, #16
   14ef4:	46bd      	mov	sp, r7
   14ef6:	bd80      	pop	{r7, pc}
   14ef8:	1000a664 	.word	0x1000a664
   14efc:	1000a658 	.word	0x1000a658

00014f00 <AmdtpcScanStart>:

void AmdtpcScanStart(void)
{
   14f00:	b580      	push	{r7, lr}
   14f02:	af00      	add	r7, sp, #0
    AppScanStart(amdtpcMasterCfg.discMode, amdtpcMasterCfg.scanType,
   14f04:	2300      	movs	r3, #0
   14f06:	2101      	movs	r1, #1
   14f08:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   14f0c:	4618      	mov	r0, r3
   14f0e:	f009 f879 	bl	1e004 <AppScanStart>
                       amdtpcMasterCfg.scanDuration);
}
   14f12:	bf00      	nop
   14f14:	bd80      	pop	{r7, pc}

00014f16 <AmdtpcScanStop>:

void AmdtpcScanStop(void)
{
   14f16:	b580      	push	{r7, lr}
   14f18:	af00      	add	r7, sp, #0
    AppScanStop();
   14f1a:	f009 f89b 	bl	1e054 <AppScanStop>
}
   14f1e:	bf00      	nop
   14f20:	bd80      	pop	{r7, pc}
	...

00014f24 <AmdtpcConnOpen>:

void AmdtpcConnOpen(uint8_t idx)
{
   14f24:	b580      	push	{r7, lr}
   14f26:	b084      	sub	sp, #16
   14f28:	af00      	add	r7, sp, #0
   14f2a:	4603      	mov	r3, r0
   14f2c:	71fb      	strb	r3, [r7, #7]
    appDevInfo_t *devInfo;
    devInfo = AppScanGetResult(idx);
   14f2e:	79fb      	ldrb	r3, [r7, #7]
   14f30:	4618      	mov	r0, r3
   14f32:	f008 ff5d 	bl	1ddf0 <AppScanGetResult>
   14f36:	60f8      	str	r0, [r7, #12]
    if (devInfo)
   14f38:	68fb      	ldr	r3, [r7, #12]
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d007      	beq.n	14f4e <AmdtpcConnOpen+0x2a>
    {
        AppConnOpen(devInfo->addrType, devInfo->addr, NULL);
   14f3e:	68fb      	ldr	r3, [r7, #12]
   14f40:	799b      	ldrb	r3, [r3, #6]
   14f42:	68f9      	ldr	r1, [r7, #12]
   14f44:	2200      	movs	r2, #0
   14f46:	4618      	mov	r0, r3
   14f48:	f009 f896 	bl	1e078 <AppConnOpen>
    }
    else
    {
        APP_TRACE_INFO0("AmdtpcConnOpen() devInfo = NULL\n");
    }
}
   14f4c:	e002      	b.n	14f54 <AmdtpcConnOpen+0x30>
        APP_TRACE_INFO0("AmdtpcConnOpen() devInfo = NULL\n");
   14f4e:	4803      	ldr	r0, [pc, #12]	; (14f5c <AmdtpcConnOpen+0x38>)
   14f50:	f000 fe02 	bl	15b58 <WsfTrace>
}
   14f54:	bf00      	nop
   14f56:	3710      	adds	r7, #16
   14f58:	46bd      	mov	sp, r7
   14f5a:	bd80      	pop	{r7, pc}
   14f5c:	00024830 	.word	0x00024830

00014f60 <AmdtpcSendTestData>:

bool sendDataContinuously = false;
void AmdtpcSendTestData(void)
{
   14f60:	b580      	push	{r7, lr}
   14f62:	b0be      	sub	sp, #248	; 0xf8
   14f64:	af02      	add	r7, sp, #8
    static uint8_t counter = 0;
    uint8_t data[236] = {0};
   14f66:	463b      	mov	r3, r7
   14f68:	22ec      	movs	r2, #236	; 0xec
   14f6a:	2100      	movs	r1, #0
   14f6c:	4618      	mov	r0, r3
   14f6e:	f7f7 f9f5 	bl	c35c <memset>
    eAmdtpStatus_t status;

    sendDataContinuously = true;
   14f72:	4b13      	ldr	r3, [pc, #76]	; (14fc0 <AmdtpcSendTestData+0x60>)
   14f74:	2201      	movs	r2, #1
   14f76:	701a      	strb	r2, [r3, #0]
    data[1] = counter;
   14f78:	4b12      	ldr	r3, [pc, #72]	; (14fc4 <AmdtpcSendTestData+0x64>)
   14f7a:	781b      	ldrb	r3, [r3, #0]
   14f7c:	707b      	strb	r3, [r7, #1]
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
   14f7e:	463a      	mov	r2, r7
   14f80:	23ec      	movs	r3, #236	; 0xec
   14f82:	9300      	str	r3, [sp, #0]
   14f84:	4613      	mov	r3, r2
   14f86:	2201      	movs	r2, #1
   14f88:	2100      	movs	r1, #0
   14f8a:	2001      	movs	r0, #1
   14f8c:	f7ff f9b0 	bl	142f0 <AmdtpcSendPacket>
   14f90:	4603      	mov	r3, r0
   14f92:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    if (status != AMDTP_STATUS_SUCCESS)
   14f96:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
   14f9a:	2b00      	cmp	r3, #0
   14f9c:	d006      	beq.n	14fac <AmdtpcSendTestData+0x4c>
    {
        APP_TRACE_INFO1("AmdtpcSendTestData() failed, status = %d\n", status);
   14f9e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
   14fa2:	4619      	mov	r1, r3
   14fa4:	4808      	ldr	r0, [pc, #32]	; (14fc8 <AmdtpcSendTestData+0x68>)
   14fa6:	f000 fdd7 	bl	15b58 <WsfTrace>
    }
    else
    {
        counter++;
    }
}
   14faa:	e005      	b.n	14fb8 <AmdtpcSendTestData+0x58>
        counter++;
   14fac:	4b05      	ldr	r3, [pc, #20]	; (14fc4 <AmdtpcSendTestData+0x64>)
   14fae:	781b      	ldrb	r3, [r3, #0]
   14fb0:	3301      	adds	r3, #1
   14fb2:	b2da      	uxtb	r2, r3
   14fb4:	4b03      	ldr	r3, [pc, #12]	; (14fc4 <AmdtpcSendTestData+0x64>)
   14fb6:	701a      	strb	r2, [r3, #0]
}
   14fb8:	bf00      	nop
   14fba:	37f0      	adds	r7, #240	; 0xf0
   14fbc:	46bd      	mov	sp, r7
   14fbe:	bd80      	pop	{r7, pc}
   14fc0:	1000524c 	.word	0x1000524c
   14fc4:	1000524d 	.word	0x1000524d
   14fc8:	00024854 	.word	0x00024854

00014fcc <AmdtpcSendTestDataStop>:

void AmdtpcSendTestDataStop(void)
{
   14fcc:	b480      	push	{r7}
   14fce:	af00      	add	r7, sp, #0
    sendDataContinuously = false;
   14fd0:	4b03      	ldr	r3, [pc, #12]	; (14fe0 <AmdtpcSendTestDataStop+0x14>)
   14fd2:	2200      	movs	r2, #0
   14fd4:	701a      	strb	r2, [r3, #0]
}
   14fd6:	bf00      	nop
   14fd8:	46bd      	mov	sp, r7
   14fda:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fde:	4770      	bx	lr
   14fe0:	1000524c 	.word	0x1000524c

00014fe4 <AmdtpcRequestServerSend>:

void AmdtpcRequestServerSend(void)
{
   14fe4:	b580      	push	{r7, lr}
   14fe6:	b084      	sub	sp, #16
   14fe8:	af02      	add	r7, sp, #8
    uint8_t data[4] = {0};
   14fea:	2300      	movs	r3, #0
   14fec:	603b      	str	r3, [r7, #0]
    eAmdtpStatus_t status;

    data[0] = 1;
   14fee:	2301      	movs	r3, #1
   14ff0:	703b      	strb	r3, [r7, #0]
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
   14ff2:	463a      	mov	r2, r7
   14ff4:	2304      	movs	r3, #4
   14ff6:	9300      	str	r3, [sp, #0]
   14ff8:	4613      	mov	r3, r2
   14ffa:	2201      	movs	r2, #1
   14ffc:	2100      	movs	r1, #0
   14ffe:	2001      	movs	r0, #1
   15000:	f7ff f976 	bl	142f0 <AmdtpcSendPacket>
   15004:	4603      	mov	r3, r0
   15006:	71fb      	strb	r3, [r7, #7]
    if (status != AMDTP_STATUS_SUCCESS)
   15008:	79fb      	ldrb	r3, [r7, #7]
   1500a:	2b00      	cmp	r3, #0
   1500c:	d003      	beq.n	15016 <AmdtpcRequestServerSend+0x32>
    {
        APP_TRACE_INFO1("AmdtpcRequestServerSend() failed, status = %d\n", AmdtpcSendTestData);
   1500e:	4904      	ldr	r1, [pc, #16]	; (15020 <AmdtpcRequestServerSend+0x3c>)
   15010:	4804      	ldr	r0, [pc, #16]	; (15024 <AmdtpcRequestServerSend+0x40>)
   15012:	f000 fda1 	bl	15b58 <WsfTrace>
    }
}
   15016:	bf00      	nop
   15018:	3708      	adds	r7, #8
   1501a:	46bd      	mov	sp, r7
   1501c:	bd80      	pop	{r7, pc}
   1501e:	bf00      	nop
   15020:	00014f61 	.word	0x00014f61
   15024:	00024880 	.word	0x00024880

00015028 <AmdtpcRequestServerSendStop>:

void AmdtpcRequestServerSendStop(void)
{
   15028:	b580      	push	{r7, lr}
   1502a:	b084      	sub	sp, #16
   1502c:	af02      	add	r7, sp, #8
    uint8_t data[4] = {0};
   1502e:	2300      	movs	r3, #0
   15030:	603b      	str	r3, [r7, #0]
    eAmdtpStatus_t status;

    data[0] = 2;
   15032:	2302      	movs	r3, #2
   15034:	703b      	strb	r3, [r7, #0]
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
   15036:	463a      	mov	r2, r7
   15038:	2304      	movs	r3, #4
   1503a:	9300      	str	r3, [sp, #0]
   1503c:	4613      	mov	r3, r2
   1503e:	2201      	movs	r2, #1
   15040:	2100      	movs	r1, #0
   15042:	2001      	movs	r0, #1
   15044:	f7ff f954 	bl	142f0 <AmdtpcSendPacket>
   15048:	4603      	mov	r3, r0
   1504a:	71fb      	strb	r3, [r7, #7]
    if (status != AMDTP_STATUS_SUCCESS)
   1504c:	79fb      	ldrb	r3, [r7, #7]
   1504e:	2b00      	cmp	r3, #0
   15050:	d003      	beq.n	1505a <AmdtpcRequestServerSendStop+0x32>
    {
        APP_TRACE_INFO1("AmdtpcRequestServerSend() failed, status = %d\n", AmdtpcSendTestData);
   15052:	4904      	ldr	r1, [pc, #16]	; (15064 <AmdtpcRequestServerSendStop+0x3c>)
   15054:	4804      	ldr	r0, [pc, #16]	; (15068 <AmdtpcRequestServerSendStop+0x40>)
   15056:	f000 fd7f 	bl	15b58 <WsfTrace>
    }
}
   1505a:	bf00      	nop
   1505c:	3708      	adds	r7, #8
   1505e:	46bd      	mov	sp, r7
   15060:	bd80      	pop	{r7, pc}
   15062:	bf00      	nop
   15064:	00014f61 	.word	0x00014f61
   15068:	00024880 	.word	0x00024880

0001506c <amdtpDtpRecvCback>:

void amdtpDtpRecvCback(uint8_t * buf, uint16_t len)
{
   1506c:	b580      	push	{r7, lr}
   1506e:	b082      	sub	sp, #8
   15070:	af00      	add	r7, sp, #0
   15072:	6078      	str	r0, [r7, #4]
   15074:	460b      	mov	r3, r1
   15076:	807b      	strh	r3, [r7, #2]
#if 0
    APP_TRACE_INFO0("-----------AMDTP Received data--------------\n");
    APP_TRACE_INFO3("len = %d, buf[0] = %d, buf[1] = %d\n", len, buf[0], buf[1]);
#endif
#ifdef MEASURE_THROUGHPUT
    gTotalDataBytesRecev += len;
   15078:	887a      	ldrh	r2, [r7, #2]
   1507a:	4b0b      	ldr	r3, [pc, #44]	; (150a8 <amdtpDtpRecvCback+0x3c>)
   1507c:	681b      	ldr	r3, [r3, #0]
   1507e:	4413      	add	r3, r2
   15080:	4a09      	ldr	r2, [pc, #36]	; (150a8 <amdtpDtpRecvCback+0x3c>)
   15082:	6013      	str	r3, [r2, #0]
    if (!measTpStarted)
   15084:	4b09      	ldr	r3, [pc, #36]	; (150ac <amdtpDtpRecvCback+0x40>)
   15086:	781b      	ldrb	r3, [r3, #0]
   15088:	f083 0301 	eor.w	r3, r3, #1
   1508c:	b2db      	uxtb	r3, r3
   1508e:	2b00      	cmp	r3, #0
   15090:	d006      	beq.n	150a0 <amdtpDtpRecvCback+0x34>
    {
        measTpStarted = true;
   15092:	4b06      	ldr	r3, [pc, #24]	; (150ac <amdtpDtpRecvCback+0x40>)
   15094:	2201      	movs	r2, #1
   15096:	701a      	strb	r2, [r3, #0]
        WsfTimerStartSec(&measTpTimer, 1);
   15098:	2101      	movs	r1, #1
   1509a:	4805      	ldr	r0, [pc, #20]	; (150b0 <amdtpDtpRecvCback+0x44>)
   1509c:	f7ff fc62 	bl	14964 <WsfTimerStartSec>
    }
#endif
}
   150a0:	bf00      	nop
   150a2:	3708      	adds	r7, #8
   150a4:	46bd      	mov	sp, r7
   150a6:	bd80      	pop	{r7, pc}
   150a8:	10005248 	.word	0x10005248
   150ac:	1000524e 	.word	0x1000524e
   150b0:	1000a648 	.word	0x1000a648

000150b4 <amdtpDtpTransCback>:

void amdtpDtpTransCback(eAmdtpStatus_t status)
{
   150b4:	b580      	push	{r7, lr}
   150b6:	b082      	sub	sp, #8
   150b8:	af00      	add	r7, sp, #0
   150ba:	4603      	mov	r3, r0
   150bc:	71fb      	strb	r3, [r7, #7]
    APP_TRACE_INFO1("amdtpDtpTransCback status = %d\n", status);
   150be:	79fb      	ldrb	r3, [r7, #7]
   150c0:	4619      	mov	r1, r3
   150c2:	4808      	ldr	r0, [pc, #32]	; (150e4 <amdtpDtpTransCback+0x30>)
   150c4:	f000 fd48 	bl	15b58 <WsfTrace>
    if (status == AMDTP_STATUS_SUCCESS && sendDataContinuously)
   150c8:	79fb      	ldrb	r3, [r7, #7]
   150ca:	2b00      	cmp	r3, #0
   150cc:	d105      	bne.n	150da <amdtpDtpTransCback+0x26>
   150ce:	4b06      	ldr	r3, [pc, #24]	; (150e8 <amdtpDtpTransCback+0x34>)
   150d0:	781b      	ldrb	r3, [r3, #0]
   150d2:	2b00      	cmp	r3, #0
   150d4:	d001      	beq.n	150da <amdtpDtpTransCback+0x26>
    {
        AmdtpcSendTestData();
   150d6:	f7ff ff43 	bl	14f60 <AmdtpcSendTestData>
    }
}
   150da:	bf00      	nop
   150dc:	3708      	adds	r7, #8
   150de:	46bd      	mov	sp, r7
   150e0:	bd80      	pop	{r7, pc}
   150e2:	bf00      	nop
   150e4:	000248b0 	.word	0x000248b0
   150e8:	1000524c 	.word	0x1000524c

000150ec <amdtpcDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcDiscCback(dmConnId_t connId, uint8_t status)
{
   150ec:	b580      	push	{r7, lr}
   150ee:	b084      	sub	sp, #16
   150f0:	af02      	add	r7, sp, #8
   150f2:	4603      	mov	r3, r0
   150f4:	460a      	mov	r2, r1
   150f6:	71fb      	strb	r3, [r7, #7]
   150f8:	4613      	mov	r3, r2
   150fa:	71bb      	strb	r3, [r7, #6]
  switch(status)
   150fc:	79bb      	ldrb	r3, [r7, #6]
   150fe:	2b07      	cmp	r3, #7
   15100:	f200 8090 	bhi.w	15224 <amdtpcDiscCback+0x138>
   15104:	a201      	add	r2, pc, #4	; (adr r2, 1510c <amdtpcDiscCback+0x20>)
   15106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1510a:	bf00      	nop
   1510c:	0001512d 	.word	0x0001512d
   15110:	0001513f 	.word	0x0001513f
   15114:	00015149 	.word	0x00015149
   15118:	0001517f 	.word	0x0001517f
   1511c:	00015161 	.word	0x00015161
   15120:	000151eb 	.word	0x000151eb
   15124:	00015225 	.word	0x00015225
   15128:	00015201 	.word	0x00015201
  {
    case APP_DISC_INIT:
      /* set handle list when initialization requested */
      AppDiscSetHdlList(connId, amdtpcCb.hdlListLen, amdtpcCb.hdlList);
   1512c:	4b40      	ldr	r3, [pc, #256]	; (15230 <amdtpcDiscCback+0x144>)
   1512e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
   15132:	79fb      	ldrb	r3, [r7, #7]
   15134:	4a3e      	ldr	r2, [pc, #248]	; (15230 <amdtpcDiscCback+0x144>)
   15136:	4618      	mov	r0, r3
   15138:	f007 ff56 	bl	1cfe8 <AppDiscSetHdlList>
      break;
   1513c:	e073      	b.n	15226 <amdtpcDiscCback+0x13a>

    case APP_DISC_SEC_REQUIRED:
      /* initiate security */
      AppMasterSecurityReq(connId);
   1513e:	79fb      	ldrb	r3, [r7, #7]
   15140:	4618      	mov	r0, r3
   15142:	f008 febb 	bl	1debc <AppMasterSecurityReq>
      break;
   15146:	e06e      	b.n	15226 <amdtpcDiscCback+0x13a>

    case APP_DISC_START:
      /* initialize discovery state */
      amdtpcCb.discState = AMDTPC_DISC_GATT_SVC;
   15148:	4b39      	ldr	r3, [pc, #228]	; (15230 <amdtpcDiscCback+0x144>)
   1514a:	2200      	movs	r2, #0
   1514c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

      /* discover GATT service */
      GattDiscover(connId, pAmdtpcGattHdlList);
   15150:	4b38      	ldr	r3, [pc, #224]	; (15234 <amdtpcDiscCback+0x148>)
   15152:	681a      	ldr	r2, [r3, #0]
   15154:	79fb      	ldrb	r3, [r7, #7]
   15156:	4611      	mov	r1, r2
   15158:	4618      	mov	r0, r3
   1515a:	f005 fdab 	bl	1acb4 <GattDiscover>
      break;
   1515e:	e062      	b.n	15226 <amdtpcDiscCback+0x13a>

    case APP_DISC_FAILED:
      if (pAppCfg->abortDisc)
   15160:	4b35      	ldr	r3, [pc, #212]	; (15238 <amdtpcDiscCback+0x14c>)
   15162:	681b      	ldr	r3, [r3, #0]
   15164:	781b      	ldrb	r3, [r3, #0]
   15166:	2b00      	cmp	r3, #0
   15168:	d009      	beq.n	1517e <amdtpcDiscCback+0x92>
      {
        /* if discovery failed for proprietary data service then disconnect */
        if (amdtpcCb.discState == AMDTPC_DISC_AMDTP_SVC)
   1516a:	4b31      	ldr	r3, [pc, #196]	; (15230 <amdtpcDiscCback+0x144>)
   1516c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   15170:	2b02      	cmp	r3, #2
   15172:	d104      	bne.n	1517e <amdtpcDiscCback+0x92>
        {
          AppConnClose(connId);
   15174:	79fb      	ldrb	r3, [r7, #7]
   15176:	4618      	mov	r0, r3
   15178:	f008 f908 	bl	1d38c <AppConnClose>
          break;
   1517c:	e053      	b.n	15226 <amdtpcDiscCback+0x13a>
      }
      /* else fall through and continue discovery */

    case APP_DISC_CMPL:
      /* next discovery state */
      amdtpcCb.discState++;
   1517e:	4b2c      	ldr	r3, [pc, #176]	; (15230 <amdtpcDiscCback+0x144>)
   15180:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   15184:	3301      	adds	r3, #1
   15186:	b2da      	uxtb	r2, r3
   15188:	4b29      	ldr	r3, [pc, #164]	; (15230 <amdtpcDiscCback+0x144>)
   1518a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

      if (amdtpcCb.discState == AMDTPC_DISC_GAP_SVC)
   1518e:	4b28      	ldr	r3, [pc, #160]	; (15230 <amdtpcDiscCback+0x144>)
   15190:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   15194:	2b01      	cmp	r3, #1
   15196:	d107      	bne.n	151a8 <amdtpcDiscCback+0xbc>
      {
        /* discover GAP service */
        GapDiscover(connId, pAmdtpcGapHdlList);
   15198:	4b28      	ldr	r3, [pc, #160]	; (1523c <amdtpcDiscCback+0x150>)
   1519a:	681a      	ldr	r2, [r3, #0]
   1519c:	79fb      	ldrb	r3, [r7, #7]
   1519e:	4611      	mov	r1, r2
   151a0:	4618      	mov	r0, r3
   151a2:	f7fe fd61 	bl	13c68 <GapDiscover>

        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, AMDTPC_DISC_CFG_LIST_LEN,
                         (attcDiscCfg_t *) amdtpcDiscCfgList, AMDTPC_DISC_HDL_LIST_LEN, amdtpcCb.hdlList);
      }
      break;
   151a6:	e03e      	b.n	15226 <amdtpcDiscCback+0x13a>
      else if (amdtpcCb.discState == AMDTPC_DISC_AMDTP_SVC)
   151a8:	4b21      	ldr	r3, [pc, #132]	; (15230 <amdtpcDiscCback+0x144>)
   151aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   151ae:	2b02      	cmp	r3, #2
   151b0:	d107      	bne.n	151c2 <amdtpcDiscCback+0xd6>
        AmdtpcDiscover(connId, pAmdtpcHdlList);
   151b2:	4b23      	ldr	r3, [pc, #140]	; (15240 <amdtpcDiscCback+0x154>)
   151b4:	681a      	ldr	r2, [r3, #0]
   151b6:	79fb      	ldrb	r3, [r7, #7]
   151b8:	4611      	mov	r1, r2
   151ba:	4618      	mov	r0, r3
   151bc:	f7fe fe78 	bl	13eb0 <AmdtpcDiscover>
      break;
   151c0:	e031      	b.n	15226 <amdtpcDiscCback+0x13a>
        AppDiscComplete(connId, APP_DISC_CMPL);
   151c2:	79fb      	ldrb	r3, [r7, #7]
   151c4:	2103      	movs	r1, #3
   151c6:	4618      	mov	r0, r3
   151c8:	f007 ff2a 	bl	1d020 <AppDiscComplete>
        amdtpcDiscGapCmpl(connId);
   151cc:	79fb      	ldrb	r3, [r7, #7]
   151ce:	4618      	mov	r0, r3
   151d0:	f7ff fe10 	bl	14df4 <amdtpcDiscGapCmpl>
        AppDiscConfigure(connId, APP_DISC_CFG_START, AMDTPC_DISC_CFG_LIST_LEN,
   151d4:	79f8      	ldrb	r0, [r7, #7]
   151d6:	4b16      	ldr	r3, [pc, #88]	; (15230 <amdtpcDiscCback+0x144>)
   151d8:	9301      	str	r3, [sp, #4]
   151da:	2309      	movs	r3, #9
   151dc:	9300      	str	r3, [sp, #0]
   151de:	4b19      	ldr	r3, [pc, #100]	; (15244 <amdtpcDiscCback+0x158>)
   151e0:	2203      	movs	r2, #3
   151e2:	2105      	movs	r1, #5
   151e4:	f007 ffc0 	bl	1d168 <AppDiscConfigure>
      break;
   151e8:	e01d      	b.n	15226 <amdtpcDiscCback+0x13a>

    case APP_DISC_CFG_START:
        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, AMDTPC_DISC_CFG_LIST_LEN,
   151ea:	79f8      	ldrb	r0, [r7, #7]
   151ec:	4b10      	ldr	r3, [pc, #64]	; (15230 <amdtpcDiscCback+0x144>)
   151ee:	9301      	str	r3, [sp, #4]
   151f0:	2309      	movs	r3, #9
   151f2:	9300      	str	r3, [sp, #0]
   151f4:	4b13      	ldr	r3, [pc, #76]	; (15244 <amdtpcDiscCback+0x158>)
   151f6:	2203      	movs	r2, #3
   151f8:	2105      	movs	r1, #5
   151fa:	f007 ffb5 	bl	1d168 <AppDiscConfigure>
                         (attcDiscCfg_t *) amdtpcDiscCfgList, AMDTPC_DISC_HDL_LIST_LEN, amdtpcCb.hdlList);
      break;
   151fe:	e012      	b.n	15226 <amdtpcDiscCback+0x13a>

    case APP_DISC_CFG_CMPL:
      AppDiscComplete(connId, status);
   15200:	79ba      	ldrb	r2, [r7, #6]
   15202:	79fb      	ldrb	r3, [r7, #7]
   15204:	4611      	mov	r1, r2
   15206:	4618      	mov	r0, r3
   15208:	f007 ff0a 	bl	1d020 <AppDiscComplete>
      amdtpc_start(pAmdtpcHdlList[AMDTP_RX_HDL_IDX], pAmdtpcHdlList[AMDTP_ACK_HDL_IDX], AMDTP_TIMER_IND);
   1520c:	4b0c      	ldr	r3, [pc, #48]	; (15240 <amdtpcDiscCback+0x154>)
   1520e:	681b      	ldr	r3, [r3, #0]
   15210:	8818      	ldrh	r0, [r3, #0]
   15212:	4b0b      	ldr	r3, [pc, #44]	; (15240 <amdtpcDiscCback+0x154>)
   15214:	681b      	ldr	r3, [r3, #0]
   15216:	3306      	adds	r3, #6
   15218:	881b      	ldrh	r3, [r3, #0]
   1521a:	22a0      	movs	r2, #160	; 0xa0
   1521c:	4619      	mov	r1, r3
   1521e:	f7fe ff5d 	bl	140dc <amdtpc_start>
      break;
   15222:	e000      	b.n	15226 <amdtpcDiscCback+0x13a>
    case APP_DISC_CFG_CONN_START:
      /* no connection setup configuration */
      break;

    default:
      break;
   15224:	bf00      	nop
  }
}
   15226:	bf00      	nop
   15228:	3708      	adds	r7, #8
   1522a:	46bd      	mov	sp, r7
   1522c:	bd80      	pop	{r7, pc}
   1522e:	bf00      	nop
   15230:	1000a664 	.word	0x1000a664
   15234:	10002bc4 	.word	0x10002bc4
   15238:	1000b1f0 	.word	0x1000b1f0
   1523c:	10002bc8 	.word	0x10002bc8
   15240:	10002bcc 	.word	0x10002bcc
   15244:	00026054 	.word	0x00026054

00015248 <showThroughput>:

#ifdef MEASURE_THROUGHPUT
static void showThroughput(void)
{
   15248:	b580      	push	{r7, lr}
   1524a:	af00      	add	r7, sp, #0
    APP_TRACE_INFO1("throughput : %d Bytes/s\n", gTotalDataBytesRecev);
   1524c:	4b07      	ldr	r3, [pc, #28]	; (1526c <showThroughput+0x24>)
   1524e:	681b      	ldr	r3, [r3, #0]
   15250:	4619      	mov	r1, r3
   15252:	4807      	ldr	r0, [pc, #28]	; (15270 <showThroughput+0x28>)
   15254:	f000 fc80 	bl	15b58 <WsfTrace>
    gTotalDataBytesRecev = 0;
   15258:	4b04      	ldr	r3, [pc, #16]	; (1526c <showThroughput+0x24>)
   1525a:	2200      	movs	r2, #0
   1525c:	601a      	str	r2, [r3, #0]
    WsfTimerStartSec(&measTpTimer, 1);
   1525e:	2101      	movs	r1, #1
   15260:	4804      	ldr	r0, [pc, #16]	; (15274 <showThroughput+0x2c>)
   15262:	f7ff fb7f 	bl	14964 <WsfTimerStartSec>
}
   15266:	bf00      	nop
   15268:	bd80      	pop	{r7, pc}
   1526a:	bf00      	nop
   1526c:	10005248 	.word	0x10005248
   15270:	000248d0 	.word	0x000248d0
   15274:	1000a648 	.word	0x1000a648

00015278 <amdtpcProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcProcMsg(dmEvt_t *pMsg)
{
   15278:	b580      	push	{r7, lr}
   1527a:	b084      	sub	sp, #16
   1527c:	af00      	add	r7, sp, #0
   1527e:	6078      	str	r0, [r7, #4]
  uint8_t uiEvent = APP_UI_NONE;
   15280:	2300      	movs	r3, #0
   15282:	73fb      	strb	r3, [r7, #15]

  switch(pMsg->hdr.event)
   15284:	687b      	ldr	r3, [r7, #4]
   15286:	789b      	ldrb	r3, [r3, #2]
   15288:	3b0a      	subs	r3, #10
   1528a:	2b97      	cmp	r3, #151	; 0x97
   1528c:	f200 81a2 	bhi.w	155d4 <amdtpcProcMsg+0x35c>
   15290:	a201      	add	r2, pc, #4	; (adr r2, 15298 <amdtpcProcMsg+0x20>)
   15292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15296:	bf00      	nop
   15298:	00015513 	.word	0x00015513
   1529c:	000155d5 	.word	0x000155d5
   152a0:	000155d5 	.word	0x000155d5
   152a4:	00015509 	.word	0x00015509
   152a8:	000155d5 	.word	0x000155d5
   152ac:	000155d5 	.word	0x000155d5
   152b0:	000155d5 	.word	0x000155d5
   152b4:	000155d5 	.word	0x000155d5
   152b8:	000155d5 	.word	0x000155d5
   152bc:	000155d5 	.word	0x000155d5
   152c0:	000155d5 	.word	0x000155d5
   152c4:	000155d5 	.word	0x000155d5
   152c8:	000155d5 	.word	0x000155d5
   152cc:	000155d5 	.word	0x000155d5
   152d0:	000155d5 	.word	0x000155d5
   152d4:	000155d5 	.word	0x000155d5
   152d8:	000155d5 	.word	0x000155d5
   152dc:	000155d5 	.word	0x000155d5
   152e0:	000155d5 	.word	0x000155d5
   152e4:	000155d5 	.word	0x000155d5
   152e8:	000155d5 	.word	0x000155d5
   152ec:	000155d5 	.word	0x000155d5
   152f0:	0001551d 	.word	0x0001551d
   152f4:	000155d5 	.word	0x000155d5
   152f8:	000155d5 	.word	0x000155d5
   152fc:	000155d5 	.word	0x000155d5
   15300:	00015531 	.word	0x00015531
   15304:	0001553d 	.word	0x0001553d
   15308:	0001554f 	.word	0x0001554f
   1530c:	00015557 	.word	0x00015557
   15310:	00015569 	.word	0x00015569
   15314:	000155d5 	.word	0x000155d5
   15318:	00015577 	.word	0x00015577
   1531c:	0001557d 	.word	0x0001557d
   15320:	00015583 	.word	0x00015583
   15324:	00015589 	.word	0x00015589
   15328:	0001558f 	.word	0x0001558f
   1532c:	000155d5 	.word	0x000155d5
   15330:	000155d5 	.word	0x000155d5
   15334:	000155d5 	.word	0x000155d5
   15338:	000155d5 	.word	0x000155d5
   1533c:	000155d5 	.word	0x000155d5
   15340:	000155d5 	.word	0x000155d5
   15344:	000155cb 	.word	0x000155cb
   15348:	000155d5 	.word	0x000155d5
   1534c:	000155d5 	.word	0x000155d5
   15350:	000155d5 	.word	0x000155d5
   15354:	000155d5 	.word	0x000155d5
   15358:	000155d5 	.word	0x000155d5
   1535c:	000155d5 	.word	0x000155d5
   15360:	000155d5 	.word	0x000155d5
   15364:	000155d5 	.word	0x000155d5
   15368:	000155d5 	.word	0x000155d5
   1536c:	000155d5 	.word	0x000155d5
   15370:	000155d5 	.word	0x000155d5
   15374:	000155d5 	.word	0x000155d5
   15378:	000155d5 	.word	0x000155d5
   1537c:	000155d5 	.word	0x000155d5
   15380:	000155d5 	.word	0x000155d5
   15384:	000155d5 	.word	0x000155d5
   15388:	000155d5 	.word	0x000155d5
   1538c:	000155d5 	.word	0x000155d5
   15390:	000155d5 	.word	0x000155d5
   15394:	000155d5 	.word	0x000155d5
   15398:	000155d5 	.word	0x000155d5
   1539c:	000155d5 	.word	0x000155d5
   153a0:	000155d5 	.word	0x000155d5
   153a4:	000155d5 	.word	0x000155d5
   153a8:	000155d5 	.word	0x000155d5
   153ac:	000155d5 	.word	0x000155d5
   153b0:	000155d5 	.word	0x000155d5
   153b4:	000155d5 	.word	0x000155d5
   153b8:	000155d5 	.word	0x000155d5
   153bc:	000155d5 	.word	0x000155d5
   153c0:	000155d5 	.word	0x000155d5
   153c4:	000155d5 	.word	0x000155d5
   153c8:	000155d5 	.word	0x000155d5
   153cc:	000155d5 	.word	0x000155d5
   153d0:	000155d5 	.word	0x000155d5
   153d4:	000155d5 	.word	0x000155d5
   153d8:	000155d5 	.word	0x000155d5
   153dc:	000155d5 	.word	0x000155d5
   153e0:	000155d5 	.word	0x000155d5
   153e4:	000155d5 	.word	0x000155d5
   153e8:	000155d5 	.word	0x000155d5
   153ec:	000155d5 	.word	0x000155d5
   153f0:	000155d5 	.word	0x000155d5
   153f4:	000155d5 	.word	0x000155d5
   153f8:	000155d5 	.word	0x000155d5
   153fc:	000155d5 	.word	0x000155d5
   15400:	000155d5 	.word	0x000155d5
   15404:	000155d5 	.word	0x000155d5
   15408:	000155d5 	.word	0x000155d5
   1540c:	000155d5 	.word	0x000155d5
   15410:	000155d5 	.word	0x000155d5
   15414:	000155d5 	.word	0x000155d5
   15418:	000155d5 	.word	0x000155d5
   1541c:	000155d5 	.word	0x000155d5
   15420:	000155d5 	.word	0x000155d5
   15424:	000155d5 	.word	0x000155d5
   15428:	000155d5 	.word	0x000155d5
   1542c:	000155d5 	.word	0x000155d5
   15430:	000155d5 	.word	0x000155d5
   15434:	000155d5 	.word	0x000155d5
   15438:	000155d5 	.word	0x000155d5
   1543c:	000155d5 	.word	0x000155d5
   15440:	000155d5 	.word	0x000155d5
   15444:	000155d5 	.word	0x000155d5
   15448:	000155d5 	.word	0x000155d5
   1544c:	000155d5 	.word	0x000155d5
   15450:	000155d5 	.word	0x000155d5
   15454:	000155d5 	.word	0x000155d5
   15458:	000155d5 	.word	0x000155d5
   1545c:	000155d5 	.word	0x000155d5
   15460:	000155d5 	.word	0x000155d5
   15464:	000155d5 	.word	0x000155d5
   15468:	000155d5 	.word	0x000155d5
   1546c:	000155d5 	.word	0x000155d5
   15470:	000155d5 	.word	0x000155d5
   15474:	000155d5 	.word	0x000155d5
   15478:	000155d5 	.word	0x000155d5
   1547c:	000155d5 	.word	0x000155d5
   15480:	000155d5 	.word	0x000155d5
   15484:	000155d5 	.word	0x000155d5
   15488:	000155d5 	.word	0x000155d5
   1548c:	000155d5 	.word	0x000155d5
   15490:	000155d5 	.word	0x000155d5
   15494:	000155d5 	.word	0x000155d5
   15498:	000155d5 	.word	0x000155d5
   1549c:	000155d5 	.word	0x000155d5
   154a0:	000155d5 	.word	0x000155d5
   154a4:	000155d5 	.word	0x000155d5
   154a8:	000155d5 	.word	0x000155d5
   154ac:	000155d5 	.word	0x000155d5
   154b0:	000155d5 	.word	0x000155d5
   154b4:	000155d5 	.word	0x000155d5
   154b8:	000155d5 	.word	0x000155d5
   154bc:	000155d5 	.word	0x000155d5
   154c0:	000155d5 	.word	0x000155d5
   154c4:	000155d5 	.word	0x000155d5
   154c8:	000155d5 	.word	0x000155d5
   154cc:	000155d5 	.word	0x000155d5
   154d0:	000155d5 	.word	0x000155d5
   154d4:	000155d5 	.word	0x000155d5
   154d8:	000155d5 	.word	0x000155d5
   154dc:	000155d5 	.word	0x000155d5
   154e0:	000155d5 	.word	0x000155d5
   154e4:	000155d5 	.word	0x000155d5
   154e8:	000155d5 	.word	0x000155d5
   154ec:	000155d5 	.word	0x000155d5
   154f0:	000154f9 	.word	0x000154f9
   154f4:	00015503 	.word	0x00015503
  {
    case AMDTP_TIMER_IND:
      amdtpc_proc_msg(&pMsg->hdr);
   154f8:	687b      	ldr	r3, [r7, #4]
   154fa:	4618      	mov	r0, r3
   154fc:	f7fe fec4 	bl	14288 <amdtpc_proc_msg>
      break;
   15500:	e069      	b.n	155d6 <amdtpcProcMsg+0x35e>

#ifdef MEASURE_THROUGHPUT
    case AMDTP_MEAS_TP_TIMER_IND:
      showThroughput();
   15502:	f7ff fea1 	bl	15248 <showThroughput>
      break;
   15506:	e066      	b.n	155d6 <amdtpcProcMsg+0x35e>
#endif

    case ATTC_HANDLE_VALUE_NTF:
      amdtpc_proc_msg(&pMsg->hdr);
   15508:	687b      	ldr	r3, [r7, #4]
   1550a:	4618      	mov	r0, r3
   1550c:	f7fe febc 	bl	14288 <amdtpc_proc_msg>
      break;
   15510:	e061      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case ATTC_WRITE_CMD_RSP:
      amdtpc_proc_msg(&pMsg->hdr);
   15512:	687b      	ldr	r3, [r7, #4]
   15514:	4618      	mov	r0, r3
   15516:	f7fe feb7 	bl	14288 <amdtpc_proc_msg>
      break;
   1551a:	e05c      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_RESET_CMPL_IND:
      DmSecGenerateEccKeyReq();
   1551c:	f7fb f812 	bl	10544 <DmSecGenerateEccKeyReq>
      amdtpcSetup(pMsg);
   15520:	6878      	ldr	r0, [r7, #4]
   15522:	f7ff fc4b 	bl	14dbc <amdtpcSetup>
#ifdef BLE_MENU
      BleMenuInit();
   15526:	f005 fbb1 	bl	1ac8c <BleMenuInit>
#endif
      uiEvent = APP_UI_RESET_CMPL;
   1552a:	2301      	movs	r3, #1
   1552c:	73fb      	strb	r3, [r7, #15]
      break;
   1552e:	e052      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SCAN_START_IND:
      amdtpcScanStart(pMsg);
   15530:	6878      	ldr	r0, [r7, #4]
   15532:	f7ff fb79 	bl	14c28 <amdtpcScanStart>
      uiEvent = APP_UI_SCAN_START;
   15536:	2305      	movs	r3, #5
   15538:	73fb      	strb	r3, [r7, #15]
      break;
   1553a:	e04c      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SCAN_STOP_IND:
      amdtpcScanStop(pMsg);
   1553c:	6878      	ldr	r0, [r7, #4]
   1553e:	f7ff fb87 	bl	14c50 <amdtpcScanStop>
#ifdef BLE_MENU
      am_menu_printf("scan stop\r\n");
   15542:	482a      	ldr	r0, [pc, #168]	; (155ec <amdtpcProcMsg+0x374>)
   15544:	f7fd fd6a 	bl	1301c <am_menu_printf>
#endif
      uiEvent = APP_UI_SCAN_STOP;
   15548:	2306      	movs	r3, #6
   1554a:	73fb      	strb	r3, [r7, #15]
      break;
   1554c:	e043      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SCAN_REPORT_IND:
      amdtpcScanReport(pMsg);
   1554e:	6878      	ldr	r0, [r7, #4]
   15550:	f7ff fba8 	bl	14ca4 <amdtpcScanReport>
      break;
   15554:	e03f      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_CONN_OPEN_IND:
      amdtpcOpen(pMsg);
   15556:	6878      	ldr	r0, [r7, #4]
   15558:	f7ff fc26 	bl	14da8 <amdtpcOpen>
#ifdef BLE_MENU
      am_menu_printf(" Connection opened\r\n");
   1555c:	4824      	ldr	r0, [pc, #144]	; (155f0 <amdtpcProcMsg+0x378>)
   1555e:	f7fd fd5d 	bl	1301c <am_menu_printf>
#endif
      uiEvent = APP_UI_CONN_OPEN;
   15562:	2308      	movs	r3, #8
   15564:	73fb      	strb	r3, [r7, #15]
      break;
   15566:	e036      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_CONN_CLOSE_IND:
      amdtpc_proc_msg(&pMsg->hdr);
   15568:	687b      	ldr	r3, [r7, #4]
   1556a:	4618      	mov	r0, r3
   1556c:	f7fe fe8c 	bl	14288 <amdtpc_proc_msg>
      uiEvent = APP_UI_CONN_CLOSE;
   15570:	2309      	movs	r3, #9
   15572:	73fb      	strb	r3, [r7, #15]
      break;
   15574:	e02f      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SEC_PAIR_CMPL_IND:
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   15576:	230a      	movs	r3, #10
   15578:	73fb      	strb	r3, [r7, #15]
      break;
   1557a:	e02c      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SEC_PAIR_FAIL_IND:
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   1557c:	230b      	movs	r3, #11
   1557e:	73fb      	strb	r3, [r7, #15]
      break;
   15580:	e029      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   15582:	230c      	movs	r3, #12
   15584:	73fb      	strb	r3, [r7, #15]
      break;
   15586:	e026      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   15588:	230d      	movs	r3, #13
   1558a:	73fb      	strb	r3, [r7, #15]
      break;
   1558c:	e023      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SEC_AUTH_REQ_IND:
      if (pMsg->authReq.oob)
   1558e:	687b      	ldr	r3, [r7, #4]
   15590:	791b      	ldrb	r3, [r3, #4]
   15592:	2b00      	cmp	r3, #0
   15594:	d014      	beq.n	155c0 <amdtpcProcMsg+0x348>
      {
        dmConnId_t connId = (dmConnId_t) pMsg->hdr.param;
   15596:	687b      	ldr	r3, [r7, #4]
   15598:	881b      	ldrh	r3, [r3, #0]
   1559a:	73bb      	strb	r3, [r7, #14]

        /* TODO: Perform OOB Exchange with the peer. */
        /* TODO: Fill datsOobCfg peerConfirm and peerRandom with value passed out of band */

        if (amdtpcOobCfg != NULL)
   1559c:	4b15      	ldr	r3, [pc, #84]	; (155f4 <amdtpcProcMsg+0x37c>)
   1559e:	681b      	ldr	r3, [r3, #0]
   155a0:	2b00      	cmp	r3, #0
   155a2:	d006      	beq.n	155b2 <amdtpcProcMsg+0x33a>
        {
          DmSecSetOob(connId, amdtpcOobCfg);
   155a4:	4b13      	ldr	r3, [pc, #76]	; (155f4 <amdtpcProcMsg+0x37c>)
   155a6:	681a      	ldr	r2, [r3, #0]
   155a8:	7bbb      	ldrb	r3, [r7, #14]
   155aa:	4611      	mov	r1, r2
   155ac:	4618      	mov	r0, r3
   155ae:	f7fa ff87 	bl	104c0 <DmSecSetOob>
        }

        DmSecAuthRsp(connId, 0, NULL);
   155b2:	7bbb      	ldrb	r3, [r7, #14]
   155b4:	2200      	movs	r2, #0
   155b6:	2100      	movs	r1, #0
   155b8:	4618      	mov	r0, r3
   155ba:	f7fa fefd 	bl	103b8 <DmSecAuthRsp>
      }
      else
      {
        AppHandlePasskey(&pMsg->authReq);
      }
      break;
   155be:	e00a      	b.n	155d6 <amdtpcProcMsg+0x35e>
        AppHandlePasskey(&pMsg->authReq);
   155c0:	687b      	ldr	r3, [r7, #4]
   155c2:	4618      	mov	r0, r3
   155c4:	f007 fe8e 	bl	1d2e4 <AppHandlePasskey>
      break;
   155c8:	e005      	b.n	155d6 <amdtpcProcMsg+0x35e>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->cnfInd);
   155ca:	687b      	ldr	r3, [r7, #4]
   155cc:	4618      	mov	r0, r3
   155ce:	f007 fec5 	bl	1d35c <AppHandleNumericComparison>
      break;
   155d2:	e000      	b.n	155d6 <amdtpcProcMsg+0x35e>
        #endif
      }
      break;
      
    default:
      break;
   155d4:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   155d6:	7bfb      	ldrb	r3, [r7, #15]
   155d8:	2b00      	cmp	r3, #0
   155da:	d003      	beq.n	155e4 <amdtpcProcMsg+0x36c>
  {
    AppUiAction(uiEvent);
   155dc:	7bfb      	ldrb	r3, [r7, #15]
   155de:	4618      	mov	r0, r3
   155e0:	f7fe fa66 	bl	13ab0 <AppUiAction>
  }
}
   155e4:	bf00      	nop
   155e6:	3710      	adds	r7, #16
   155e8:	46bd      	mov	sp, r7
   155ea:	bd80      	pop	{r7, pc}
   155ec:	000248ec 	.word	0x000248ec
   155f0:	000248f8 	.word	0x000248f8
   155f4:	10005244 	.word	0x10005244

000155f8 <AmdtpcHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AmdtpcHandlerInit(wsfHandlerId_t handlerId)
{
   155f8:	b580      	push	{r7, lr}
   155fa:	b082      	sub	sp, #8
   155fc:	af00      	add	r7, sp, #0
   155fe:	4603      	mov	r3, r0
   15600:	71fb      	strb	r3, [r7, #7]
  APP_TRACE_INFO0("AmdtpcHandlerInit");
   15602:	4818      	ldr	r0, [pc, #96]	; (15664 <AmdtpcHandlerInit+0x6c>)
   15604:	f000 faa8 	bl	15b58 <WsfTrace>

  /* store handler ID */
  amdtpcCb.handlerId = handlerId;
   15608:	4a17      	ldr	r2, [pc, #92]	; (15668 <AmdtpcHandlerInit+0x70>)
   1560a:	79fb      	ldrb	r3, [r7, #7]
   1560c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

  /* set handle list length */
  amdtpcCb.hdlListLen = AMDTPC_DISC_HDL_LIST_LEN;
   15610:	4b15      	ldr	r3, [pc, #84]	; (15668 <AmdtpcHandlerInit+0x70>)
   15612:	2209      	movs	r2, #9
   15614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set configuration pointers */
  pAppMasterCfg = (appMasterCfg_t *) &amdtpcMasterCfg;
   15618:	4b14      	ldr	r3, [pc, #80]	; (1566c <AmdtpcHandlerInit+0x74>)
   1561a:	4a15      	ldr	r2, [pc, #84]	; (15670 <AmdtpcHandlerInit+0x78>)
   1561c:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &amdtpcSecCfg;
   1561e:	4b15      	ldr	r3, [pc, #84]	; (15674 <AmdtpcHandlerInit+0x7c>)
   15620:	4a15      	ldr	r2, [pc, #84]	; (15678 <AmdtpcHandlerInit+0x80>)
   15622:	601a      	str	r2, [r3, #0]
  pAppDiscCfg = (appDiscCfg_t *) &amdtpcDiscCfg;
   15624:	4b15      	ldr	r3, [pc, #84]	; (1567c <AmdtpcHandlerInit+0x84>)
   15626:	4a16      	ldr	r2, [pc, #88]	; (15680 <AmdtpcHandlerInit+0x88>)
   15628:	601a      	str	r2, [r3, #0]
  pAppCfg = (appCfg_t *)&amdtpcAppCfg;
   1562a:	4b16      	ldr	r3, [pc, #88]	; (15684 <AmdtpcHandlerInit+0x8c>)
   1562c:	4a16      	ldr	r2, [pc, #88]	; (15688 <AmdtpcHandlerInit+0x90>)
   1562e:	601a      	str	r2, [r3, #0]
  pSmpCfg = (smpCfg_t *) &amdtpcSmpCfg;
   15630:	4b16      	ldr	r3, [pc, #88]	; (1568c <AmdtpcHandlerInit+0x94>)
   15632:	4a17      	ldr	r2, [pc, #92]	; (15690 <AmdtpcHandlerInit+0x98>)
   15634:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppMasterInit();
   15636:	f008 fa83 	bl	1db40 <AppMasterInit>
  AppDiscInit();
   1563a:	f007 fca3 	bl	1cf84 <AppDiscInit>

  /* Set IRK for the local device */
  DmSecSetLocalIrk(localIrk);
   1563e:	4815      	ldr	r0, [pc, #84]	; (15694 <AmdtpcHandlerInit+0x9c>)
   15640:	f7fa fef0 	bl	10424 <DmSecSetLocalIrk>
  amdtpc_init(handlerId, amdtpDtpRecvCback, amdtpDtpTransCback);
   15644:	79fb      	ldrb	r3, [r7, #7]
   15646:	4a14      	ldr	r2, [pc, #80]	; (15698 <AmdtpcHandlerInit+0xa0>)
   15648:	4914      	ldr	r1, [pc, #80]	; (1569c <AmdtpcHandlerInit+0xa4>)
   1564a:	4618      	mov	r0, r3
   1564c:	f7fe fcbc 	bl	13fc8 <amdtpc_init>

#ifdef MEASURE_THROUGHPUT
  measTpTimer.handlerId = handlerId;
   15650:	4a13      	ldr	r2, [pc, #76]	; (156a0 <AmdtpcHandlerInit+0xa8>)
   15652:	79fb      	ldrb	r3, [r7, #7]
   15654:	7213      	strb	r3, [r2, #8]
  measTpTimer.msg.event = AMDTP_MEAS_TP_TIMER_IND;
   15656:	4b12      	ldr	r3, [pc, #72]	; (156a0 <AmdtpcHandlerInit+0xa8>)
   15658:	22a1      	movs	r2, #161	; 0xa1
   1565a:	731a      	strb	r2, [r3, #12]
#endif
}
   1565c:	bf00      	nop
   1565e:	3708      	adds	r7, #8
   15660:	46bd      	mov	sp, r7
   15662:	bd80      	pop	{r7, pc}
   15664:	00024910 	.word	0x00024910
   15668:	1000a664 	.word	0x1000a664
   1566c:	1000b1cc 	.word	0x1000b1cc
   15670:	0002601c 	.word	0x0002601c
   15674:	1000b1ec 	.word	0x1000b1ec
   15678:	00026024 	.word	0x00026024
   1567c:	1000b1e0 	.word	0x1000b1e0
   15680:	00026040 	.word	0x00026040
   15684:	1000b1f0 	.word	0x1000b1f0
   15688:	00026044 	.word	0x00026044
   1568c:	10002bd4 	.word	0x10002bd4
   15690:	0002602c 	.word	0x0002602c
   15694:	10002bb4 	.word	0x10002bb4
   15698:	000150b5 	.word	0x000150b5
   1569c:	0001506d 	.word	0x0001506d
   156a0:	1000a648 	.word	0x1000a648

000156a4 <AmdtpcHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AmdtpcHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   156a4:	b580      	push	{r7, lr}
   156a6:	b082      	sub	sp, #8
   156a8:	af00      	add	r7, sp, #0
   156aa:	4603      	mov	r3, r0
   156ac:	6039      	str	r1, [r7, #0]
   156ae:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   156b0:	683b      	ldr	r3, [r7, #0]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d01d      	beq.n	156f2 <AmdtpcHandler+0x4e>
  {
    APP_TRACE_INFO1("Amdtpc got evt %d", pMsg->event);
   156b6:	683b      	ldr	r3, [r7, #0]
   156b8:	789b      	ldrb	r3, [r3, #2]
   156ba:	4619      	mov	r1, r3
   156bc:	480f      	ldr	r0, [pc, #60]	; (156fc <AmdtpcHandler+0x58>)
   156be:	f000 fa4b 	bl	15b58 <WsfTrace>

    /* process ATT messages */
    if (pMsg->event <= ATT_CBACK_END)
   156c2:	683b      	ldr	r3, [r7, #0]
   156c4:	789b      	ldrb	r3, [r3, #2]
   156c6:	2b11      	cmp	r3, #17
   156c8:	d803      	bhi.n	156d2 <AmdtpcHandler+0x2e>
    {
      /* process discovery-related ATT messages */
      AppDiscProcAttMsg((attEvt_t *) pMsg);
   156ca:	6838      	ldr	r0, [r7, #0]
   156cc:	f007 fb8e 	bl	1cdec <AppDiscProcAttMsg>
   156d0:	e00c      	b.n	156ec <AmdtpcHandler+0x48>
    }
    /* process DM messages */
    else if (pMsg->event <= DM_CBACK_END)
   156d2:	683b      	ldr	r3, [r7, #0]
   156d4:	789b      	ldrb	r3, [r3, #2]
   156d6:	2b55      	cmp	r3, #85	; 0x55
   156d8:	d808      	bhi.n	156ec <AmdtpcHandler+0x48>
    {
      /* process advertising and connection-related messages */
      AppMasterProcDmMsg((dmEvt_t *) pMsg);
   156da:	6838      	ldr	r0, [r7, #0]
   156dc:	f008 fa48 	bl	1db70 <AppMasterProcDmMsg>

      /* process security-related messages */
      AppMasterSecProcDmMsg((dmEvt_t *) pMsg);
   156e0:	6838      	ldr	r0, [r7, #0]
   156e2:	f008 fad5 	bl	1dc90 <AppMasterSecProcDmMsg>

      /* process discovery-related messages */
      AppDiscProcDmMsg((dmEvt_t *) pMsg);
   156e6:	6838      	ldr	r0, [r7, #0]
   156e8:	f007 fb52 	bl	1cd90 <AppDiscProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    amdtpcProcMsg((dmEvt_t *) pMsg);
   156ec:	6838      	ldr	r0, [r7, #0]
   156ee:	f7ff fdc3 	bl	15278 <amdtpcProcMsg>
  }
}
   156f2:	bf00      	nop
   156f4:	3708      	adds	r7, #8
   156f6:	46bd      	mov	sp, r7
   156f8:	bd80      	pop	{r7, pc}
   156fa:	bf00      	nop
   156fc:	00024924 	.word	0x00024924

00015700 <AmdtpcStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AmdtpcStart(void)
{
   15700:	b580      	push	{r7, lr}
   15702:	af00      	add	r7, sp, #0
  /* Register for stack callbacks */
  DmRegister(amdtpcDmCback);
   15704:	480a      	ldr	r0, [pc, #40]	; (15730 <AmdtpcStart+0x30>)
   15706:	f7fa f9f1 	bl	faec <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, amdtpcDmCback);
   1570a:	4909      	ldr	r1, [pc, #36]	; (15730 <AmdtpcStart+0x30>)
   1570c:	2003      	movs	r0, #3
   1570e:	f7f9 ff8b 	bl	f628 <DmConnRegister>
  AttRegister(amdtpcAttCback);
   15712:	4808      	ldr	r0, [pc, #32]	; (15734 <AmdtpcStart+0x34>)
   15714:	f7f6 ffaa 	bl	c66c <AttRegister>

  /* Register for app framework button callbacks */
  AppUiBtnRegister(amdtpcBtnCback);
   15718:	4807      	ldr	r0, [pc, #28]	; (15738 <AmdtpcStart+0x38>)
   1571a:	f7fe fa8d 	bl	13c38 <AppUiBtnRegister>

  /* Register for app framework discovery callbacks */
  AppDiscRegister(amdtpcDiscCback);
   1571e:	4807      	ldr	r0, [pc, #28]	; (1573c <AmdtpcStart+0x3c>)
   15720:	f007 fc52 	bl	1cfc8 <AppDiscRegister>

  /* Initialize attribute server database */
  SvcCoreAddGroup();
   15724:	f008 fdb8 	bl	1e298 <SvcCoreAddGroup>

  /* Reset the device */
  DmDevReset();
   15728:	f7fa f980 	bl	fa2c <DmDevReset>
}
   1572c:	bf00      	nop
   1572e:	bd80      	pop	{r7, pc}
   15730:	00014abd 	.word	0x00014abd
   15734:	00014bc9 	.word	0x00014bc9
   15738:	00014e31 	.word	0x00014e31
   1573c:	000150ed 	.word	0x000150ed

00015740 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   15740:	b480      	push	{r7}
   15742:	b083      	sub	sp, #12
   15744:	af00      	add	r7, sp, #0
   15746:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
   15748:	4a04      	ldr	r2, [pc, #16]	; (1575c <HciEvtRegister+0x1c>)
   1574a:	687b      	ldr	r3, [r7, #4]
   1574c:	6093      	str	r3, [r2, #8]
}
   1574e:	bf00      	nop
   15750:	370c      	adds	r7, #12
   15752:	46bd      	mov	sp, r7
   15754:	f85d 7b04 	ldr.w	r7, [sp], #4
   15758:	4770      	bx	lr
   1575a:	bf00      	nop
   1575c:	1000a694 	.word	0x1000a694

00015760 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   15760:	b480      	push	{r7}
   15762:	b083      	sub	sp, #12
   15764:	af00      	add	r7, sp, #0
   15766:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
   15768:	4a04      	ldr	r2, [pc, #16]	; (1577c <HciSecRegister+0x1c>)
   1576a:	687b      	ldr	r3, [r7, #4]
   1576c:	60d3      	str	r3, [r2, #12]
}
   1576e:	bf00      	nop
   15770:	370c      	adds	r7, #12
   15772:	46bd      	mov	sp, r7
   15774:	f85d 7b04 	ldr.w	r7, [sp], #4
   15778:	4770      	bx	lr
   1577a:	bf00      	nop
   1577c:	1000a694 	.word	0x1000a694

00015780 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   15780:	b480      	push	{r7}
   15782:	b083      	sub	sp, #12
   15784:	af00      	add	r7, sp, #0
   15786:	6078      	str	r0, [r7, #4]
   15788:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
   1578a:	4a06      	ldr	r2, [pc, #24]	; (157a4 <HciAclRegister+0x24>)
   1578c:	687b      	ldr	r3, [r7, #4]
   1578e:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   15790:	4a04      	ldr	r2, [pc, #16]	; (157a4 <HciAclRegister+0x24>)
   15792:	683b      	ldr	r3, [r7, #0]
   15794:	6153      	str	r3, [r2, #20]
}
   15796:	bf00      	nop
   15798:	370c      	adds	r7, #12
   1579a:	46bd      	mov	sp, r7
   1579c:	f85d 7b04 	ldr.w	r7, [sp], #4
   157a0:	4770      	bx	lr
   157a2:	bf00      	nop
   157a4:	1000a694 	.word	0x1000a694

000157a8 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   157a8:	b580      	push	{r7, lr}
   157aa:	b082      	sub	sp, #8
   157ac:	af00      	add	r7, sp, #0
   157ae:	4603      	mov	r3, r0
   157b0:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   157b2:	4a07      	ldr	r2, [pc, #28]	; (157d0 <HciHandlerInit+0x28>)
   157b4:	79fb      	ldrb	r3, [r7, #7]
   157b6:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   157b8:	4b05      	ldr	r3, [pc, #20]	; (157d0 <HciHandlerInit+0x28>)
   157ba:	2200      	movs	r2, #0
   157bc:	601a      	str	r2, [r3, #0]
   157be:	4b04      	ldr	r3, [pc, #16]	; (157d0 <HciHandlerInit+0x28>)
   157c0:	2200      	movs	r2, #0
   157c2:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
   157c4:	f002 fd46 	bl	18254 <HciCoreInit>
}
   157c8:	bf00      	nop
   157ca:	3708      	adds	r7, #8
   157cc:	46bd      	mov	sp, r7
   157ce:	bd80      	pop	{r7, pc}
   157d0:	1000a694 	.word	0x1000a694

000157d4 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   157d4:	b580      	push	{r7, lr}
   157d6:	b082      	sub	sp, #8
   157d8:	af00      	add	r7, sp, #0
   157da:	4603      	mov	r3, r0
   157dc:	6039      	str	r1, [r7, #0]
   157de:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
   157e0:	79fb      	ldrb	r3, [r7, #7]
   157e2:	6839      	ldr	r1, [r7, #0]
   157e4:	4618      	mov	r0, r3
   157e6:	f002 fec3 	bl	18570 <HciCoreHandler>
}
   157ea:	bf00      	nop
   157ec:	3708      	adds	r7, #8
   157ee:	46bd      	mov	sp, r7
   157f0:	bd80      	pop	{r7, pc}

000157f2 <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   157f2:	b480      	push	{r7}
   157f4:	b085      	sub	sp, #20
   157f6:	af00      	add	r7, sp, #0
   157f8:	6078      	str	r0, [r7, #4]
   157fa:	460b      	mov	r3, r1
   157fc:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
   157fe:	2300      	movs	r3, #0
   15800:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   15802:	7bfb      	ldrb	r3, [r7, #15]
   15804:	b2db      	uxtb	r3, r3
   15806:	2b00      	cmp	r3, #0
   15808:	d100      	bne.n	1580c <WsfAssert+0x1a>
   1580a:	e7fa      	b.n	15802 <WsfAssert+0x10>
    {
      break;
   1580c:	bf00      	nop
    }
  }
}
   1580e:	bf00      	nop
   15810:	3714      	adds	r7, #20
   15812:	46bd      	mov	sp, r7
   15814:	f85d 7b04 	ldr.w	r7, [sp], #4
   15818:	4770      	bx	lr
	...

0001581c <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
   1581c:	b480      	push	{r7}
   1581e:	af00      	add	r7, sp, #0
  if (csNesting == 0)
   15820:	4b07      	ldr	r3, [pc, #28]	; (15840 <WsfCsEnter+0x24>)
   15822:	781b      	ldrb	r3, [r3, #0]
   15824:	2b00      	cmp	r3, #0
   15826:	d100      	bne.n	1582a <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   15828:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   1582a:	4b05      	ldr	r3, [pc, #20]	; (15840 <WsfCsEnter+0x24>)
   1582c:	781b      	ldrb	r3, [r3, #0]
   1582e:	3301      	adds	r3, #1
   15830:	b2da      	uxtb	r2, r3
   15832:	4b03      	ldr	r3, [pc, #12]	; (15840 <WsfCsEnter+0x24>)
   15834:	701a      	strb	r2, [r3, #0]
}
   15836:	bf00      	nop
   15838:	46bd      	mov	sp, r7
   1583a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1583e:	4770      	bx	lr
   15840:	1000524f 	.word	0x1000524f

00015844 <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
   15844:	b480      	push	{r7}
   15846:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   15848:	4b07      	ldr	r3, [pc, #28]	; (15868 <WsfCsExit+0x24>)
   1584a:	781b      	ldrb	r3, [r3, #0]
   1584c:	3b01      	subs	r3, #1
   1584e:	b2da      	uxtb	r2, r3
   15850:	4b05      	ldr	r3, [pc, #20]	; (15868 <WsfCsExit+0x24>)
   15852:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   15854:	4b04      	ldr	r3, [pc, #16]	; (15868 <WsfCsExit+0x24>)
   15856:	781b      	ldrb	r3, [r3, #0]
   15858:	2b00      	cmp	r3, #0
   1585a:	d100      	bne.n	1585e <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   1585c:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   1585e:	bf00      	nop
   15860:	46bd      	mov	sp, r7
   15862:	f85d 7b04 	ldr.w	r7, [sp], #4
   15866:	4770      	bx	lr
   15868:	1000524f 	.word	0x1000524f

0001586c <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   1586c:	b580      	push	{r7, lr}
   1586e:	af00      	add	r7, sp, #0
  WsfCsEnter();
   15870:	f7ff ffd4 	bl	1581c <WsfCsEnter>
}
   15874:	bf00      	nop
   15876:	bd80      	pop	{r7, pc}

00015878 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   15878:	b580      	push	{r7, lr}
   1587a:	af00      	add	r7, sp, #0
  WsfCsExit();
   1587c:	f7ff ffe2 	bl	15844 <WsfCsExit>
}
   15880:	bf00      	nop
   15882:	bd80      	pop	{r7, pc}

00015884 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   15884:	b580      	push	{r7, lr}
   15886:	b084      	sub	sp, #16
   15888:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS
  if(xRadioTaskEventObject != NULL) 
   1588a:	4b21      	ldr	r3, [pc, #132]	; (15910 <WsfSetOsSpecificEvent+0x8c>)
   1588c:	681b      	ldr	r3, [r3, #0]
   1588e:	2b00      	cmp	r3, #0
   15890:	d039      	beq.n	15906 <WsfSetOsSpecificEvent+0x82>
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   15892:	f3ef 8305 	mrs	r3, IPSR
   15896:	60bb      	str	r3, [r7, #8]

	if( ulCurrentInterrupt == 0 )
   15898:	68bb      	ldr	r3, [r7, #8]
   1589a:	2b00      	cmp	r3, #0
   1589c:	d102      	bne.n	158a4 <WsfSetOsSpecificEvent+0x20>
	{
		xReturn = pdFALSE;
   1589e:	2300      	movs	r3, #0
   158a0:	607b      	str	r3, [r7, #4]
   158a2:	e001      	b.n	158a8 <WsfSetOsSpecificEvent+0x24>
	}
	else
	{
		xReturn = pdTRUE;
   158a4:	2301      	movs	r3, #1
   158a6:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
   158a8:	687b      	ldr	r3, [r7, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   158aa:	2b01      	cmp	r3, #1
   158ac:	d118      	bne.n	158e0 <WsfSetOsSpecificEvent+0x5c>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   158ae:	2300      	movs	r3, #0
   158b0:	603b      	str	r3, [r7, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   158b2:	4b17      	ldr	r3, [pc, #92]	; (15910 <WsfSetOsSpecificEvent+0x8c>)
   158b4:	6819      	ldr	r1, [r3, #0]
   158b6:	463b      	mov	r3, r7
   158b8:	2201      	movs	r2, #1
   158ba:	4816      	ldr	r0, [pc, #88]	; (15914 <WsfSetOsSpecificEvent+0x90>)
   158bc:	f00a fcd2 	bl	20264 <xTimerPendFunctionCallFromISR>
   158c0:	60f8      	str	r0, [r7, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   158c2:	68fb      	ldr	r3, [r7, #12]
   158c4:	2b00      	cmp	r3, #0
   158c6:	d01e      	beq.n	15906 <WsfSetOsSpecificEvent+0x82>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   158c8:	683b      	ldr	r3, [r7, #0]
   158ca:	2b00      	cmp	r3, #0
   158cc:	d01b      	beq.n	15906 <WsfSetOsSpecificEvent+0x82>
   158ce:	4b12      	ldr	r3, [pc, #72]	; (15918 <WsfSetOsSpecificEvent+0x94>)
   158d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   158d4:	601a      	str	r2, [r3, #0]
   158d6:	f3bf 8f4f 	dsb	sy
   158da:	f3bf 8f6f 	isb	sy
          }
      }

  }    
#endif
}
   158de:	e012      	b.n	15906 <WsfSetOsSpecificEvent+0x82>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   158e0:	4b0b      	ldr	r3, [pc, #44]	; (15910 <WsfSetOsSpecificEvent+0x8c>)
   158e2:	681b      	ldr	r3, [r3, #0]
   158e4:	2101      	movs	r1, #1
   158e6:	4618      	mov	r0, r3
   158e8:	f008 fdc2 	bl	1e470 <xEventGroupSetBits>
   158ec:	4603      	mov	r3, r0
   158ee:	60fb      	str	r3, [r7, #12]
          if ( xResult != pdFAIL )
   158f0:	68fb      	ldr	r3, [r7, #12]
   158f2:	2b00      	cmp	r3, #0
   158f4:	d007      	beq.n	15906 <WsfSetOsSpecificEvent+0x82>
              portYIELD();
   158f6:	4b08      	ldr	r3, [pc, #32]	; (15918 <WsfSetOsSpecificEvent+0x94>)
   158f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   158fc:	601a      	str	r2, [r3, #0]
   158fe:	f3bf 8f4f 	dsb	sy
   15902:	f3bf 8f6f 	isb	sy
}
   15906:	bf00      	nop
   15908:	3710      	adds	r7, #16
   1590a:	46bd      	mov	sp, r7
   1590c:	bd80      	pop	{r7, pc}
   1590e:	bf00      	nop
   15910:	10005250 	.word	0x10005250
   15914:	0001e55f 	.word	0x0001e55f
   15918:	e000ed04 	.word	0xe000ed04

0001591c <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   1591c:	b580      	push	{r7, lr}
   1591e:	b082      	sub	sp, #8
   15920:	af00      	add	r7, sp, #0
   15922:	4603      	mov	r3, r0
   15924:	460a      	mov	r2, r1
   15926:	71fb      	strb	r3, [r7, #7]
   15928:	4613      	mov	r3, r2
   1592a:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   1592c:	f7ff ff76 	bl	1581c <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   15930:	79fb      	ldrb	r3, [r7, #7]
   15932:	f003 030f 	and.w	r3, r3, #15
   15936:	79fa      	ldrb	r2, [r7, #7]
   15938:	f002 020f 	and.w	r2, r2, #15
   1593c:	490e      	ldr	r1, [pc, #56]	; (15978 <WsfSetEvent+0x5c>)
   1593e:	440a      	add	r2, r1
   15940:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   15944:	79ba      	ldrb	r2, [r7, #6]
   15946:	430a      	orrs	r2, r1
   15948:	b2d1      	uxtb	r1, r2
   1594a:	4a0b      	ldr	r2, [pc, #44]	; (15978 <WsfSetEvent+0x5c>)
   1594c:	4413      	add	r3, r2
   1594e:	460a      	mov	r2, r1
   15950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   15954:	4b08      	ldr	r3, [pc, #32]	; (15978 <WsfSetEvent+0x5c>)
   15956:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1595a:	f043 0304 	orr.w	r3, r3, #4
   1595e:	b2da      	uxtb	r2, r3
   15960:	4b05      	ldr	r3, [pc, #20]	; (15978 <WsfSetEvent+0x5c>)
   15962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   15966:	f7ff ff6d 	bl	15844 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1596a:	f7ff ff8b 	bl	15884 <WsfSetOsSpecificEvent>
}
   1596e:	bf00      	nop
   15970:	3708      	adds	r7, #8
   15972:	46bd      	mov	sp, r7
   15974:	bd80      	pop	{r7, pc}
   15976:	bf00      	nop
   15978:	1000a6b0 	.word	0x1000a6b0

0001597c <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   1597c:	b580      	push	{r7, lr}
   1597e:	b082      	sub	sp, #8
   15980:	af00      	add	r7, sp, #0
   15982:	4603      	mov	r3, r0
   15984:	460a      	mov	r2, r1
   15986:	71fb      	strb	r3, [r7, #7]
   15988:	4613      	mov	r3, r2
   1598a:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   1598c:	f7ff ff46 	bl	1581c <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   15990:	4b08      	ldr	r3, [pc, #32]	; (159b4 <WsfTaskSetReady+0x38>)
   15992:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   15996:	79bb      	ldrb	r3, [r7, #6]
   15998:	4313      	orrs	r3, r2
   1599a:	b2da      	uxtb	r2, r3
   1599c:	4b05      	ldr	r3, [pc, #20]	; (159b4 <WsfTaskSetReady+0x38>)
   1599e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   159a2:	f7ff ff4f 	bl	15844 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   159a6:	f7ff ff6d 	bl	15884 <WsfSetOsSpecificEvent>
}
   159aa:	bf00      	nop
   159ac:	3708      	adds	r7, #8
   159ae:	46bd      	mov	sp, r7
   159b0:	bd80      	pop	{r7, pc}
   159b2:	bf00      	nop
   159b4:	1000a6b0 	.word	0x1000a6b0

000159b8 <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   159b8:	b480      	push	{r7}
   159ba:	b083      	sub	sp, #12
   159bc:	af00      	add	r7, sp, #0
   159be:	4603      	mov	r3, r0
   159c0:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
   159c2:	4b03      	ldr	r3, [pc, #12]	; (159d0 <WsfTaskMsgQueue+0x18>)
}
   159c4:	4618      	mov	r0, r3
   159c6:	370c      	adds	r7, #12
   159c8:	46bd      	mov	sp, r7
   159ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   159ce:	4770      	bx	lr
   159d0:	1000a6e0 	.word	0x1000a6e0

000159d4 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   159d4:	b480      	push	{r7}
   159d6:	b085      	sub	sp, #20
   159d8:	af00      	add	r7, sp, #0
   159da:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   159dc:	4b0a      	ldr	r3, [pc, #40]	; (15a08 <WsfOsSetNextHandler+0x34>)
   159de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   159e2:	1c5a      	adds	r2, r3, #1
   159e4:	b2d1      	uxtb	r1, r2
   159e6:	4a08      	ldr	r2, [pc, #32]	; (15a08 <WsfOsSetNextHandler+0x34>)
   159e8:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   159ec:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   159ee:	7bfb      	ldrb	r3, [r7, #15]
   159f0:	4905      	ldr	r1, [pc, #20]	; (15a08 <WsfOsSetNextHandler+0x34>)
   159f2:	687a      	ldr	r2, [r7, #4]
   159f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   159f8:	7bfb      	ldrb	r3, [r7, #15]
}
   159fa:	4618      	mov	r0, r3
   159fc:	3714      	adds	r7, #20
   159fe:	46bd      	mov	sp, r7
   15a00:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a04:	4770      	bx	lr
   15a06:	bf00      	nop
   15a08:	1000a6b0 	.word	0x1000a6b0

00015a0c <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
   15a0c:	b480      	push	{r7}
   15a0e:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
   15a10:	4b06      	ldr	r3, [pc, #24]	; (15a2c <wsfOsReadyToSleep+0x20>)
   15a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   15a16:	2b00      	cmp	r3, #0
   15a18:	bf0c      	ite	eq
   15a1a:	2301      	moveq	r3, #1
   15a1c:	2300      	movne	r3, #0
   15a1e:	b2db      	uxtb	r3, r3
}
   15a20:	4618      	mov	r0, r3
   15a22:	46bd      	mov	sp, r7
   15a24:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a28:	4770      	bx	lr
   15a2a:	bf00      	nop
   15a2c:	1000a6b0 	.word	0x1000a6b0

00015a30 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   15a30:	b580      	push	{r7, lr}
   15a32:	b086      	sub	sp, #24
   15a34:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   15a36:	4b3f      	ldr	r3, [pc, #252]	; (15b34 <wsfOsDispatcher+0x104>)
   15a38:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
   15a3a:	e072      	b.n	15b22 <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   15a3c:	f7ff feee 	bl	1581c <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   15a40:	693b      	ldr	r3, [r7, #16]
   15a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   15a46:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
   15a48:	693b      	ldr	r3, [r7, #16]
   15a4a:	2200      	movs	r2, #0
   15a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   15a50:	f7ff fef8 	bl	15844 <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   15a54:	7bfb      	ldrb	r3, [r7, #15]
   15a56:	f003 0301 	and.w	r3, r3, #1
   15a5a:	2b00      	cmp	r3, #0
   15a5c:	d016      	beq.n	15a8c <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   15a5e:	e00a      	b.n	15a76 <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   15a60:	78bb      	ldrb	r3, [r7, #2]
   15a62:	461a      	mov	r2, r3
   15a64:	693b      	ldr	r3, [r7, #16]
   15a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15a6a:	68b9      	ldr	r1, [r7, #8]
   15a6c:	2000      	movs	r0, #0
   15a6e:	4798      	blx	r3
        WsfMsgFree(pMsg);
   15a70:	68b8      	ldr	r0, [r7, #8]
   15a72:	f7fe fdd5 	bl	14620 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   15a76:	693b      	ldr	r3, [r7, #16]
   15a78:	3330      	adds	r3, #48	; 0x30
   15a7a:	1cba      	adds	r2, r7, #2
   15a7c:	4611      	mov	r1, r2
   15a7e:	4618      	mov	r0, r3
   15a80:	f7fe fe08 	bl	14694 <WsfMsgDeq>
   15a84:	60b8      	str	r0, [r7, #8]
   15a86:	68bb      	ldr	r3, [r7, #8]
   15a88:	2b00      	cmp	r3, #0
   15a8a:	d1e9      	bne.n	15a60 <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   15a8c:	7bfb      	ldrb	r3, [r7, #15]
   15a8e:	f003 0302 	and.w	r3, r3, #2
   15a92:	2b00      	cmp	r3, #0
   15a94:	d012      	beq.n	15abc <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   15a96:	e00a      	b.n	15aae <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   15a98:	687b      	ldr	r3, [r7, #4]
   15a9a:	7a1b      	ldrb	r3, [r3, #8]
   15a9c:	461a      	mov	r2, r3
   15a9e:	693b      	ldr	r3, [r7, #16]
   15aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15aa4:	687a      	ldr	r2, [r7, #4]
   15aa6:	320a      	adds	r2, #10
   15aa8:	4611      	mov	r1, r2
   15aaa:	2000      	movs	r0, #0
   15aac:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   15aae:	2000      	movs	r0, #0
   15ab0:	f7fe ffdc 	bl	14a6c <WsfTimerServiceExpired>
   15ab4:	6078      	str	r0, [r7, #4]
   15ab6:	687b      	ldr	r3, [r7, #4]
   15ab8:	2b00      	cmp	r3, #0
   15aba:	d1ed      	bne.n	15a98 <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   15abc:	7bfb      	ldrb	r3, [r7, #15]
   15abe:	f003 0304 	and.w	r3, r3, #4
   15ac2:	2b00      	cmp	r3, #0
   15ac4:	d02d      	beq.n	15b22 <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   15ac6:	2300      	movs	r3, #0
   15ac8:	75fb      	strb	r3, [r7, #23]
   15aca:	e027      	b.n	15b1c <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   15acc:	7dfb      	ldrb	r3, [r7, #23]
   15ace:	693a      	ldr	r2, [r7, #16]
   15ad0:	4413      	add	r3, r2
   15ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   15ad6:	2b00      	cmp	r3, #0
   15ad8:	d01d      	beq.n	15b16 <wsfOsDispatcher+0xe6>
   15ada:	7dfa      	ldrb	r2, [r7, #23]
   15adc:	693b      	ldr	r3, [r7, #16]
   15ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ae2:	2b00      	cmp	r3, #0
   15ae4:	d017      	beq.n	15b16 <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
   15ae6:	f7ff fe99 	bl	1581c <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   15aea:	7dfb      	ldrb	r3, [r7, #23]
   15aec:	693a      	ldr	r2, [r7, #16]
   15aee:	4413      	add	r3, r2
   15af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   15af4:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
   15af6:	7dfb      	ldrb	r3, [r7, #23]
   15af8:	693a      	ldr	r2, [r7, #16]
   15afa:	4413      	add	r3, r2
   15afc:	2200      	movs	r2, #0
   15afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   15b02:	f7ff fe9f 	bl	15844 <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   15b06:	7dfa      	ldrb	r2, [r7, #23]
   15b08:	693b      	ldr	r3, [r7, #16]
   15b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15b0e:	78fa      	ldrb	r2, [r7, #3]
   15b10:	2100      	movs	r1, #0
   15b12:	4610      	mov	r0, r2
   15b14:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   15b16:	7dfb      	ldrb	r3, [r7, #23]
   15b18:	3301      	adds	r3, #1
   15b1a:	75fb      	strb	r3, [r7, #23]
   15b1c:	7dfb      	ldrb	r3, [r7, #23]
   15b1e:	2b08      	cmp	r3, #8
   15b20:	d9d4      	bls.n	15acc <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
   15b22:	693b      	ldr	r3, [r7, #16]
   15b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   15b28:	2b00      	cmp	r3, #0
   15b2a:	d187      	bne.n	15a3c <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
   15b2c:	bf00      	nop
   15b2e:	3718      	adds	r7, #24
   15b30:	46bd      	mov	sp, r7
   15b32:	bd80      	pop	{r7, pc}
   15b34:	1000a6b0 	.word	0x1000a6b0

00015b38 <wsfOsSetEventObject>:


void wsfOsSetEventObject(void *event_object)
{
   15b38:	b480      	push	{r7}
   15b3a:	b083      	sub	sp, #12
   15b3c:	af00      	add	r7, sp, #0
   15b3e:	6078      	str	r0, [r7, #4]
  #ifdef AM_FREERTOS
  xRadioTaskEventObject = (EventGroupHandle_t)event_object;
   15b40:	4a04      	ldr	r2, [pc, #16]	; (15b54 <wsfOsSetEventObject+0x1c>)
   15b42:	687b      	ldr	r3, [r7, #4]
   15b44:	6013      	str	r3, [r2, #0]
  #endif
}
   15b46:	bf00      	nop
   15b48:	370c      	adds	r7, #12
   15b4a:	46bd      	mov	sp, r7
   15b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b50:	4770      	bx	lr
   15b52:	bf00      	nop
   15b54:	10005250 	.word	0x10005250

00015b58 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   15b58:	b40f      	push	{r0, r1, r2, r3}
   15b5a:	b580      	push	{r7, lr}
   15b5c:	b0c2      	sub	sp, #264	; 0x108
   15b5e:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
   15b60:	f507 728a 	add.w	r2, r7, #276	; 0x114
   15b64:	463b      	mov	r3, r7
   15b66:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   15b68:	463b      	mov	r3, r7
   15b6a:	1d38      	adds	r0, r7, #4
   15b6c:	681a      	ldr	r2, [r3, #0]
   15b6e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
   15b72:	f006 fc4f 	bl	1c414 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   15b76:	1d3b      	adds	r3, r7, #4
   15b78:	4618      	mov	r0, r3
   15b7a:	f006 ff57 	bl	1ca2c <am_util_stdio_printf>
   15b7e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   15b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   15b86:	2bff      	cmp	r3, #255	; 0xff
   15b88:	d903      	bls.n	15b92 <WsfTrace+0x3a>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   15b8a:	2183      	movs	r1, #131	; 0x83
   15b8c:	4806      	ldr	r0, [pc, #24]	; (15ba8 <WsfTrace+0x50>)
   15b8e:	f7ff fe30 	bl	157f2 <WsfAssert>
  am_util_debug_printf("\n");
   15b92:	4806      	ldr	r0, [pc, #24]	; (15bac <WsfTrace+0x54>)
   15b94:	f006 ff4a 	bl	1ca2c <am_util_stdio_printf>
}
   15b98:	bf00      	nop
   15b9a:	f507 7784 	add.w	r7, r7, #264	; 0x108
   15b9e:	46bd      	mov	sp, r7
   15ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   15ba4:	b004      	add	sp, #16
   15ba6:	4770      	bx	lr
   15ba8:	00024948 	.word	0x00024948
   15bac:	00024940 	.word	0x00024940

00015bb0 <resetPkt>:
#include "crc32.h"
#include "am_util.h"

void
resetPkt(amdtpPacket_t *pkt)
{
   15bb0:	b480      	push	{r7}
   15bb2:	b083      	sub	sp, #12
   15bb4:	af00      	add	r7, sp, #0
   15bb6:	6078      	str	r0, [r7, #4]
    pkt->offset = 0;
   15bb8:	687b      	ldr	r3, [r7, #4]
   15bba:	2200      	movs	r2, #0
   15bbc:	801a      	strh	r2, [r3, #0]
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   15bbe:	687a      	ldr	r2, [r7, #4]
   15bc0:	7913      	ldrb	r3, [r2, #4]
   15bc2:	f36f 0303 	bfc	r3, #0, #4
   15bc6:	7113      	strb	r3, [r2, #4]
    pkt->len = 0;
   15bc8:	687b      	ldr	r3, [r7, #4]
   15bca:	2200      	movs	r2, #0
   15bcc:	805a      	strh	r2, [r3, #2]
}
   15bce:	bf00      	nop
   15bd0:	370c      	adds	r7, #12
   15bd2:	46bd      	mov	sp, r7
   15bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15bd8:	4770      	bx	lr
	...

00015bdc <AmdtpReceivePkt>:

eAmdtpStatus_t
AmdtpReceivePkt(amdtpCb_t *amdtpCb, amdtpPacket_t *pkt, uint16_t len, uint8_t *pValue)
{
   15bdc:	b580      	push	{r7, lr}
   15bde:	b088      	sub	sp, #32
   15be0:	af00      	add	r7, sp, #0
   15be2:	60f8      	str	r0, [r7, #12]
   15be4:	60b9      	str	r1, [r7, #8]
   15be6:	603b      	str	r3, [r7, #0]
   15be8:	4613      	mov	r3, r2
   15bea:	80fb      	strh	r3, [r7, #6]
    uint8_t dataIdx = 0;
   15bec:	2300      	movs	r3, #0
   15bee:	77fb      	strb	r3, [r7, #31]
    uint32_t calDataCrc = 0;
   15bf0:	2300      	movs	r3, #0
   15bf2:	61bb      	str	r3, [r7, #24]
    uint16_t header = 0;
   15bf4:	2300      	movs	r3, #0
   15bf6:	82fb      	strh	r3, [r7, #22]

    if (pkt->offset == 0 && len < AMDTP_PREFIX_SIZE_IN_PKT)
   15bf8:	68bb      	ldr	r3, [r7, #8]
   15bfa:	881b      	ldrh	r3, [r3, #0]
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d10d      	bne.n	15c1c <AmdtpReceivePkt+0x40>
   15c00:	88fb      	ldrh	r3, [r7, #6]
   15c02:	2b03      	cmp	r3, #3
   15c04:	d80a      	bhi.n	15c1c <AmdtpReceivePkt+0x40>
    {
        APP_TRACE_INFO0("Invalid packet!!!");
   15c06:	488b      	ldr	r0, [pc, #556]	; (15e34 <AmdtpReceivePkt+0x258>)
   15c08:	f7ff ffa6 	bl	15b58 <WsfTrace>
        AmdtpSendReply(amdtpCb, AMDTP_STATUS_INVALID_PKT_LENGTH, NULL, 0);
   15c0c:	2300      	movs	r3, #0
   15c0e:	2200      	movs	r2, #0
   15c10:	2103      	movs	r1, #3
   15c12:	68f8      	ldr	r0, [r7, #12]
   15c14:	f000 fa6a 	bl	160ec <AmdtpSendReply>
        return AMDTP_STATUS_INVALID_PKT_LENGTH;
   15c18:	2303      	movs	r3, #3
   15c1a:	e106      	b.n	15e2a <AmdtpReceivePkt+0x24e>
    }

    // new packet
    if (pkt->offset == 0)
   15c1c:	68bb      	ldr	r3, [r7, #8]
   15c1e:	881b      	ldrh	r3, [r3, #0]
   15c20:	2b00      	cmp	r3, #0
   15c22:	d16f      	bne.n	15d04 <AmdtpReceivePkt+0x128>
    {
        BYTES_TO_UINT16(pkt->len, pValue);
   15c24:	683b      	ldr	r3, [r7, #0]
   15c26:	781b      	ldrb	r3, [r3, #0]
   15c28:	b29a      	uxth	r2, r3
   15c2a:	683b      	ldr	r3, [r7, #0]
   15c2c:	3301      	adds	r3, #1
   15c2e:	781b      	ldrb	r3, [r3, #0]
   15c30:	b29b      	uxth	r3, r3
   15c32:	021b      	lsls	r3, r3, #8
   15c34:	b29b      	uxth	r3, r3
   15c36:	4413      	add	r3, r2
   15c38:	b29a      	uxth	r2, r3
   15c3a:	68bb      	ldr	r3, [r7, #8]
   15c3c:	805a      	strh	r2, [r3, #2]
        BYTES_TO_UINT16(header, &pValue[2]);
   15c3e:	683b      	ldr	r3, [r7, #0]
   15c40:	3302      	adds	r3, #2
   15c42:	781b      	ldrb	r3, [r3, #0]
   15c44:	b29a      	uxth	r2, r3
   15c46:	683b      	ldr	r3, [r7, #0]
   15c48:	3303      	adds	r3, #3
   15c4a:	781b      	ldrb	r3, [r3, #0]
   15c4c:	b29b      	uxth	r3, r3
   15c4e:	021b      	lsls	r3, r3, #8
   15c50:	b29b      	uxth	r3, r3
   15c52:	4413      	add	r3, r2
   15c54:	82fb      	strh	r3, [r7, #22]
        pkt->header.pktType = (header & PACKET_TYPE_BIT_MASK) >> PACKET_TYPE_BIT_OFFSET;
   15c56:	8afb      	ldrh	r3, [r7, #22]
   15c58:	0b1b      	lsrs	r3, r3, #12
   15c5a:	b29b      	uxth	r3, r3
   15c5c:	b2db      	uxtb	r3, r3
   15c5e:	f003 030f 	and.w	r3, r3, #15
   15c62:	b2d9      	uxtb	r1, r3
   15c64:	68ba      	ldr	r2, [r7, #8]
   15c66:	7913      	ldrb	r3, [r2, #4]
   15c68:	f361 0303 	bfi	r3, r1, #0, #4
   15c6c:	7113      	strb	r3, [r2, #4]
        pkt->header.pktSn = (header & PACKET_SN_BIT_MASK) >> PACKET_SN_BIT_OFFSET;
   15c6e:	8afb      	ldrh	r3, [r7, #22]
   15c70:	121b      	asrs	r3, r3, #8
   15c72:	b2db      	uxtb	r3, r3
   15c74:	f003 030f 	and.w	r3, r3, #15
   15c78:	b2d9      	uxtb	r1, r3
   15c7a:	68ba      	ldr	r2, [r7, #8]
   15c7c:	7913      	ldrb	r3, [r2, #4]
   15c7e:	f361 1307 	bfi	r3, r1, #4, #4
   15c82:	7113      	strb	r3, [r2, #4]
        pkt->header.encrypted = (header & PACKET_ENCRYPTION_BIT_MASK) >> PACKET_ENCRYPTION_BIT_OFFSET;
   15c84:	8afb      	ldrh	r3, [r7, #22]
   15c86:	11db      	asrs	r3, r3, #7
   15c88:	b2db      	uxtb	r3, r3
   15c8a:	f003 0301 	and.w	r3, r3, #1
   15c8e:	b2d9      	uxtb	r1, r3
   15c90:	68ba      	ldr	r2, [r7, #8]
   15c92:	7953      	ldrb	r3, [r2, #5]
   15c94:	f361 0300 	bfi	r3, r1, #0, #1
   15c98:	7153      	strb	r3, [r2, #5]
        pkt->header.ackEnabled = (header & PACKET_ACK_BIT_MASK) >> PACKET_ACK_BIT_OFFSET;
   15c9a:	8afb      	ldrh	r3, [r7, #22]
   15c9c:	119b      	asrs	r3, r3, #6
   15c9e:	b2db      	uxtb	r3, r3
   15ca0:	f003 0301 	and.w	r3, r3, #1
   15ca4:	b2d9      	uxtb	r1, r3
   15ca6:	68ba      	ldr	r2, [r7, #8]
   15ca8:	7953      	ldrb	r3, [r2, #5]
   15caa:	f361 0341 	bfi	r3, r1, #1, #1
   15cae:	7153      	strb	r3, [r2, #5]
        dataIdx = AMDTP_PREFIX_SIZE_IN_PKT;
   15cb0:	2304      	movs	r3, #4
   15cb2:	77fb      	strb	r3, [r7, #31]
        if (pkt->header.pktType == AMDTP_PKT_TYPE_DATA)
   15cb4:	68bb      	ldr	r3, [r7, #8]
   15cb6:	791b      	ldrb	r3, [r3, #4]
   15cb8:	f003 030f 	and.w	r3, r3, #15
   15cbc:	b2db      	uxtb	r3, r3
   15cbe:	2b01      	cmp	r3, #1
   15cc0:	d102      	bne.n	15cc8 <AmdtpReceivePkt+0xec>
        {
            amdtpCb->rxState = AMDTP_STATE_GETTING_DATA;
   15cc2:	68fb      	ldr	r3, [r7, #12]
   15cc4:	2204      	movs	r2, #4
   15cc6:	705a      	strb	r2, [r3, #1]
        }
#ifdef AMDTP_DEBUG_ON
        APP_TRACE_INFO1("pkt len = 0x%x", pkt->len);
        APP_TRACE_INFO1("pkt header = 0x%x", header);
#endif
        APP_TRACE_INFO2("type = %d, sn = %d", pkt->header.pktType, pkt->header.pktSn);
   15cc8:	68bb      	ldr	r3, [r7, #8]
   15cca:	791b      	ldrb	r3, [r3, #4]
   15ccc:	f3c3 0303 	ubfx	r3, r3, #0, #4
   15cd0:	b2db      	uxtb	r3, r3
   15cd2:	4619      	mov	r1, r3
   15cd4:	68bb      	ldr	r3, [r7, #8]
   15cd6:	791b      	ldrb	r3, [r3, #4]
   15cd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   15cdc:	b2db      	uxtb	r3, r3
   15cde:	461a      	mov	r2, r3
   15ce0:	4855      	ldr	r0, [pc, #340]	; (15e38 <AmdtpReceivePkt+0x25c>)
   15ce2:	f7ff ff39 	bl	15b58 <WsfTrace>
        APP_TRACE_INFO2("enc = %d, ackEnabled = %d", pkt->header.encrypted,  pkt->header.ackEnabled);
   15ce6:	68bb      	ldr	r3, [r7, #8]
   15ce8:	795b      	ldrb	r3, [r3, #5]
   15cea:	f3c3 0300 	ubfx	r3, r3, #0, #1
   15cee:	b2db      	uxtb	r3, r3
   15cf0:	4619      	mov	r1, r3
   15cf2:	68bb      	ldr	r3, [r7, #8]
   15cf4:	795b      	ldrb	r3, [r3, #5]
   15cf6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15cfa:	b2db      	uxtb	r3, r3
   15cfc:	461a      	mov	r2, r3
   15cfe:	484f      	ldr	r0, [pc, #316]	; (15e3c <AmdtpReceivePkt+0x260>)
   15d00:	f7ff ff2a 	bl	15b58 <WsfTrace>
    }

    // make sure we have enough space for new data
    if (pkt->offset + len - dataIdx > AMDTP_PACKET_SIZE)
   15d04:	68bb      	ldr	r3, [r7, #8]
   15d06:	881b      	ldrh	r3, [r3, #0]
   15d08:	461a      	mov	r2, r3
   15d0a:	88fb      	ldrh	r3, [r7, #6]
   15d0c:	441a      	add	r2, r3
   15d0e:	7ffb      	ldrb	r3, [r7, #31]
   15d10:	1ad3      	subs	r3, r2, r3
   15d12:	f640 0208 	movw	r2, #2056	; 0x808
   15d16:	4293      	cmp	r3, r2
   15d18:	dd17      	ble.n	15d4a <AmdtpReceivePkt+0x16e>
    {
        APP_TRACE_INFO0("not enough buffer size!!!");
   15d1a:	4849      	ldr	r0, [pc, #292]	; (15e40 <AmdtpReceivePkt+0x264>)
   15d1c:	f7ff ff1c 	bl	15b58 <WsfTrace>
        if (pkt->header.pktType == AMDTP_PKT_TYPE_DATA)
   15d20:	68bb      	ldr	r3, [r7, #8]
   15d22:	791b      	ldrb	r3, [r3, #4]
   15d24:	f003 030f 	and.w	r3, r3, #15
   15d28:	b2db      	uxtb	r3, r3
   15d2a:	2b01      	cmp	r3, #1
   15d2c:	d102      	bne.n	15d34 <AmdtpReceivePkt+0x158>
        {
            amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   15d2e:	68fb      	ldr	r3, [r7, #12]
   15d30:	2202      	movs	r2, #2
   15d32:	705a      	strb	r2, [r3, #1]
        }
        // reset pkt
        resetPkt(pkt);
   15d34:	68b8      	ldr	r0, [r7, #8]
   15d36:	f7ff ff3b 	bl	15bb0 <resetPkt>
        AmdtpSendReply(amdtpCb, AMDTP_STATUS_INSUFFICIENT_BUFFER, NULL, 0);
   15d3a:	2300      	movs	r3, #0
   15d3c:	2200      	movs	r2, #0
   15d3e:	2104      	movs	r1, #4
   15d40:	68f8      	ldr	r0, [r7, #12]
   15d42:	f000 f9d3 	bl	160ec <AmdtpSendReply>
        return AMDTP_STATUS_INSUFFICIENT_BUFFER;
   15d46:	2304      	movs	r3, #4
   15d48:	e06f      	b.n	15e2a <AmdtpReceivePkt+0x24e>
    }

    // copy new data into buffer and also save crc into it if it's the last frame in a packet
    // 4 bytes crc is included in pkt length
    memcpy(pkt->data + pkt->offset, pValue + dataIdx, len - dataIdx);
   15d4a:	68bb      	ldr	r3, [r7, #8]
   15d4c:	689b      	ldr	r3, [r3, #8]
   15d4e:	68ba      	ldr	r2, [r7, #8]
   15d50:	8812      	ldrh	r2, [r2, #0]
   15d52:	1898      	adds	r0, r3, r2
   15d54:	7ffb      	ldrb	r3, [r7, #31]
   15d56:	683a      	ldr	r2, [r7, #0]
   15d58:	18d1      	adds	r1, r2, r3
   15d5a:	88fa      	ldrh	r2, [r7, #6]
   15d5c:	7ffb      	ldrb	r3, [r7, #31]
   15d5e:	1ad3      	subs	r3, r2, r3
   15d60:	461a      	mov	r2, r3
   15d62:	f7f6 f9fd 	bl	c160 <memcpy>
    pkt->offset += (len - dataIdx);
   15d66:	68bb      	ldr	r3, [r7, #8]
   15d68:	881a      	ldrh	r2, [r3, #0]
   15d6a:	7ffb      	ldrb	r3, [r7, #31]
   15d6c:	b29b      	uxth	r3, r3
   15d6e:	88f9      	ldrh	r1, [r7, #6]
   15d70:	1acb      	subs	r3, r1, r3
   15d72:	b29b      	uxth	r3, r3
   15d74:	4413      	add	r3, r2
   15d76:	b29a      	uxth	r2, r3
   15d78:	68bb      	ldr	r3, [r7, #8]
   15d7a:	801a      	strh	r2, [r3, #0]

    // whole packet received
    if (pkt->offset >= pkt->len)
   15d7c:	68bb      	ldr	r3, [r7, #8]
   15d7e:	881a      	ldrh	r2, [r3, #0]
   15d80:	68bb      	ldr	r3, [r7, #8]
   15d82:	885b      	ldrh	r3, [r3, #2]
   15d84:	429a      	cmp	r2, r3
   15d86:	d34f      	bcc.n	15e28 <AmdtpReceivePkt+0x24c>
    {
        uint32_t peerCrc = 0;
   15d88:	2300      	movs	r3, #0
   15d8a:	613b      	str	r3, [r7, #16]
        //
        // check CRC
        //
        BYTES_TO_UINT32(peerCrc, pkt->data + pkt->len - AMDTP_CRC_SIZE_IN_PKT);
   15d8c:	68bb      	ldr	r3, [r7, #8]
   15d8e:	689a      	ldr	r2, [r3, #8]
   15d90:	68bb      	ldr	r3, [r7, #8]
   15d92:	885b      	ldrh	r3, [r3, #2]
   15d94:	3b04      	subs	r3, #4
   15d96:	4413      	add	r3, r2
   15d98:	781b      	ldrb	r3, [r3, #0]
   15d9a:	4619      	mov	r1, r3
   15d9c:	68bb      	ldr	r3, [r7, #8]
   15d9e:	689a      	ldr	r2, [r3, #8]
   15da0:	68bb      	ldr	r3, [r7, #8]
   15da2:	885b      	ldrh	r3, [r3, #2]
   15da4:	3b03      	subs	r3, #3
   15da6:	4413      	add	r3, r2
   15da8:	781b      	ldrb	r3, [r3, #0]
   15daa:	021b      	lsls	r3, r3, #8
   15dac:	18ca      	adds	r2, r1, r3
   15dae:	68bb      	ldr	r3, [r7, #8]
   15db0:	6899      	ldr	r1, [r3, #8]
   15db2:	68bb      	ldr	r3, [r7, #8]
   15db4:	885b      	ldrh	r3, [r3, #2]
   15db6:	3b02      	subs	r3, #2
   15db8:	440b      	add	r3, r1
   15dba:	781b      	ldrb	r3, [r3, #0]
   15dbc:	041b      	lsls	r3, r3, #16
   15dbe:	441a      	add	r2, r3
   15dc0:	68bb      	ldr	r3, [r7, #8]
   15dc2:	6899      	ldr	r1, [r3, #8]
   15dc4:	68bb      	ldr	r3, [r7, #8]
   15dc6:	885b      	ldrh	r3, [r3, #2]
   15dc8:	3b01      	subs	r3, #1
   15dca:	440b      	add	r3, r1
   15dcc:	781b      	ldrb	r3, [r3, #0]
   15dce:	061b      	lsls	r3, r3, #24
   15dd0:	4413      	add	r3, r2
   15dd2:	613b      	str	r3, [r7, #16]
        calDataCrc = CalcCrc32(0xFFFFFFFFU, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   15dd4:	68bb      	ldr	r3, [r7, #8]
   15dd6:	885b      	ldrh	r3, [r3, #2]
   15dd8:	3b04      	subs	r3, #4
   15dda:	4619      	mov	r1, r3
   15ddc:	68bb      	ldr	r3, [r7, #8]
   15dde:	689b      	ldr	r3, [r3, #8]
   15de0:	461a      	mov	r2, r3
   15de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15de6:	f7fd ffdd 	bl	13da4 <CalcCrc32>
   15dea:	61b8      	str	r0, [r7, #24]
        APP_TRACE_INFO1("calDataCrc = 0x%x ", calDataCrc);
        APP_TRACE_INFO1("peerCrc = 0x%x", peerCrc);
        APP_TRACE_INFO1("len: %d", pkt->len);
#endif

        if (peerCrc != calDataCrc)
   15dec:	693a      	ldr	r2, [r7, #16]
   15dee:	69bb      	ldr	r3, [r7, #24]
   15df0:	429a      	cmp	r2, r3
   15df2:	d017      	beq.n	15e24 <AmdtpReceivePkt+0x248>
        {
            APP_TRACE_INFO0("crc error\n");
   15df4:	4813      	ldr	r0, [pc, #76]	; (15e44 <AmdtpReceivePkt+0x268>)
   15df6:	f7ff feaf 	bl	15b58 <WsfTrace>

            if (pkt->header.pktType == AMDTP_PKT_TYPE_DATA)
   15dfa:	68bb      	ldr	r3, [r7, #8]
   15dfc:	791b      	ldrb	r3, [r3, #4]
   15dfe:	f003 030f 	and.w	r3, r3, #15
   15e02:	b2db      	uxtb	r3, r3
   15e04:	2b01      	cmp	r3, #1
   15e06:	d102      	bne.n	15e0e <AmdtpReceivePkt+0x232>
            {
                amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   15e08:	68fb      	ldr	r3, [r7, #12]
   15e0a:	2202      	movs	r2, #2
   15e0c:	705a      	strb	r2, [r3, #1]
            }
            // reset pkt
            resetPkt(pkt);
   15e0e:	68b8      	ldr	r0, [r7, #8]
   15e10:	f7ff fece 	bl	15bb0 <resetPkt>

            AmdtpSendReply(amdtpCb, AMDTP_STATUS_CRC_ERROR, NULL, 0);
   15e14:	2300      	movs	r3, #0
   15e16:	2200      	movs	r2, #0
   15e18:	2101      	movs	r1, #1
   15e1a:	68f8      	ldr	r0, [r7, #12]
   15e1c:	f000 f966 	bl	160ec <AmdtpSendReply>

            return AMDTP_STATUS_CRC_ERROR;
   15e20:	2301      	movs	r3, #1
   15e22:	e002      	b.n	15e2a <AmdtpReceivePkt+0x24e>
        }

        return AMDTP_STATUS_RECEIVE_DONE;
   15e24:	230a      	movs	r3, #10
   15e26:	e000      	b.n	15e2a <AmdtpReceivePkt+0x24e>
    }

    return AMDTP_STATUS_RECEIVE_CONTINUE;
   15e28:	2309      	movs	r3, #9
}
   15e2a:	4618      	mov	r0, r3
   15e2c:	3720      	adds	r7, #32
   15e2e:	46bd      	mov	sp, r7
   15e30:	bd80      	pop	{r7, pc}
   15e32:	bf00      	nop
   15e34:	0002498c 	.word	0x0002498c
   15e38:	000249a0 	.word	0x000249a0
   15e3c:	000249b4 	.word	0x000249b4
   15e40:	000249d0 	.word	0x000249d0
   15e44:	000249ec 	.word	0x000249ec

00015e48 <AmdtpPacketHandler>:
// AMDTP packet handler
//
//*****************************************************************************
void
AmdtpPacketHandler(amdtpCb_t *amdtpCb, eAmdtpPktType_t type, uint16_t len, uint8_t *buf)
{
   15e48:	b580      	push	{r7, lr}
   15e4a:	b086      	sub	sp, #24
   15e4c:	af00      	add	r7, sp, #0
   15e4e:	60f8      	str	r0, [r7, #12]
   15e50:	607b      	str	r3, [r7, #4]
   15e52:	460b      	mov	r3, r1
   15e54:	72fb      	strb	r3, [r7, #11]
   15e56:	4613      	mov	r3, r2
   15e58:	813b      	strh	r3, [r7, #8]
    // APP_TRACE_INFO2("received packet type = %d, len = %d\n", type, len);

    switch(type)
   15e5a:	7afb      	ldrb	r3, [r7, #11]
   15e5c:	2b02      	cmp	r3, #2
   15e5e:	d026      	beq.n	15eae <AmdtpPacketHandler+0x66>
   15e60:	2b03      	cmp	r3, #3
   15e62:	d065      	beq.n	15f30 <AmdtpPacketHandler+0xe8>
   15e64:	2b01      	cmp	r3, #1
   15e66:	d000      	beq.n	15e6a <AmdtpPacketHandler+0x22>
            resetPkt(&amdtpCb->ackPkt);
        }
            break;

        default:
        break;
   15e68:	e0a9      	b.n	15fbe <AmdtpPacketHandler+0x176>
            amdtpCb->lastRxPktSn = amdtpCb->rxPkt.header.pktSn;
   15e6a:	68fb      	ldr	r3, [r7, #12]
   15e6c:	7a1b      	ldrb	r3, [r3, #8]
   15e6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
   15e72:	b2db      	uxtb	r3, r3
   15e74:	461a      	mov	r2, r3
   15e76:	68fb      	ldr	r3, [r7, #12]
   15e78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            AmdtpSendReply(amdtpCb, AMDTP_STATUS_SUCCESS, NULL, 0);
   15e7c:	2300      	movs	r3, #0
   15e7e:	2200      	movs	r2, #0
   15e80:	2100      	movs	r1, #0
   15e82:	68f8      	ldr	r0, [r7, #12]
   15e84:	f000 f932 	bl	160ec <AmdtpSendReply>
            if (amdtpCb->recvCback)
   15e88:	68fb      	ldr	r3, [r7, #12]
   15e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15e8c:	2b00      	cmp	r3, #0
   15e8e:	d005      	beq.n	15e9c <AmdtpPacketHandler+0x54>
                amdtpCb->recvCback(buf, len);
   15e90:	68fb      	ldr	r3, [r7, #12]
   15e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15e94:	893a      	ldrh	r2, [r7, #8]
   15e96:	4611      	mov	r1, r2
   15e98:	6878      	ldr	r0, [r7, #4]
   15e9a:	4798      	blx	r3
            amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   15e9c:	68fb      	ldr	r3, [r7, #12]
   15e9e:	2202      	movs	r2, #2
   15ea0:	705a      	strb	r2, [r3, #1]
            resetPkt(&amdtpCb->rxPkt);
   15ea2:	68fb      	ldr	r3, [r7, #12]
   15ea4:	3304      	adds	r3, #4
   15ea6:	4618      	mov	r0, r3
   15ea8:	f7ff fe82 	bl	15bb0 <resetPkt>
            break;
   15eac:	e087      	b.n	15fbe <AmdtpPacketHandler+0x176>
            eAmdtpStatus_t status = (eAmdtpStatus_t)buf[0];
   15eae:	687b      	ldr	r3, [r7, #4]
   15eb0:	781b      	ldrb	r3, [r3, #0]
   15eb2:	75fb      	strb	r3, [r7, #23]
            WsfTimerStop(&amdtpCb->timeoutTimer);
   15eb4:	68fb      	ldr	r3, [r7, #12]
   15eb6:	332c      	adds	r3, #44	; 0x2c
   15eb8:	4618      	mov	r0, r3
   15eba:	f7fe fd79 	bl	149b0 <WsfTimerStop>
            if (amdtpCb->txState != AMDTP_STATE_TX_IDLE)
   15ebe:	68fb      	ldr	r3, [r7, #12]
   15ec0:	781b      	ldrb	r3, [r3, #0]
   15ec2:	2b01      	cmp	r3, #1
   15ec4:	d002      	beq.n	15ecc <AmdtpPacketHandler+0x84>
                amdtpCb->txState = AMDTP_STATE_TX_IDLE;
   15ec6:	68fb      	ldr	r3, [r7, #12]
   15ec8:	2201      	movs	r2, #1
   15eca:	701a      	strb	r2, [r3, #0]
            if (status == AMDTP_STATUS_CRC_ERROR || status == AMDTP_STATUS_RESEND_REPLY)
   15ecc:	7dfb      	ldrb	r3, [r7, #23]
   15ece:	2b01      	cmp	r3, #1
   15ed0:	d002      	beq.n	15ed8 <AmdtpPacketHandler+0x90>
   15ed2:	7dfb      	ldrb	r3, [r7, #23]
   15ed4:	2b08      	cmp	r3, #8
   15ed6:	d103      	bne.n	15ee0 <AmdtpPacketHandler+0x98>
                AmdtpSendPacketHandler(amdtpCb);
   15ed8:	68f8      	ldr	r0, [r7, #12]
   15eda:	f000 f985 	bl	161e8 <AmdtpSendPacketHandler>
   15ede:	e021      	b.n	15f24 <AmdtpPacketHandler+0xdc>
                if (status == AMDTP_STATUS_SUCCESS)
   15ee0:	7dfb      	ldrb	r3, [r7, #23]
   15ee2:	2b00      	cmp	r3, #0
   15ee4:	d110      	bne.n	15f08 <AmdtpPacketHandler+0xc0>
                    amdtpCb->txPktSn++;
   15ee6:	68fb      	ldr	r3, [r7, #12]
   15ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   15eec:	3301      	adds	r3, #1
   15eee:	b2da      	uxtb	r2, r3
   15ef0:	68fb      	ldr	r3, [r7, #12]
   15ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    if (amdtpCb->txPktSn == 16)
   15ef6:	68fb      	ldr	r3, [r7, #12]
   15ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   15efc:	2b10      	cmp	r3, #16
   15efe:	d103      	bne.n	15f08 <AmdtpPacketHandler+0xc0>
                        amdtpCb->txPktSn = 0;
   15f00:	68fb      	ldr	r3, [r7, #12]
   15f02:	2200      	movs	r2, #0
   15f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                resetPkt(&amdtpCb->txPkt);
   15f08:	68fb      	ldr	r3, [r7, #12]
   15f0a:	3310      	adds	r3, #16
   15f0c:	4618      	mov	r0, r3
   15f0e:	f7ff fe4f 	bl	15bb0 <resetPkt>
                if (amdtpCb->transCback)
   15f12:	68fb      	ldr	r3, [r7, #12]
   15f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   15f16:	2b00      	cmp	r3, #0
   15f18:	d004      	beq.n	15f24 <AmdtpPacketHandler+0xdc>
                    amdtpCb->transCback(status);
   15f1a:	68fb      	ldr	r3, [r7, #12]
   15f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   15f1e:	7dfa      	ldrb	r2, [r7, #23]
   15f20:	4610      	mov	r0, r2
   15f22:	4798      	blx	r3
            resetPkt(&amdtpCb->ackPkt);
   15f24:	68fb      	ldr	r3, [r7, #12]
   15f26:	331c      	adds	r3, #28
   15f28:	4618      	mov	r0, r3
   15f2a:	f7ff fe41 	bl	15bb0 <resetPkt>
            break;
   15f2e:	e046      	b.n	15fbe <AmdtpPacketHandler+0x176>
            eAmdtpControl_t control = (eAmdtpControl_t)buf[0];
   15f30:	687b      	ldr	r3, [r7, #4]
   15f32:	781b      	ldrb	r3, [r3, #0]
   15f34:	75bb      	strb	r3, [r7, #22]
            uint8_t resendPktSn = buf[1];
   15f36:	687b      	ldr	r3, [r7, #4]
   15f38:	785b      	ldrb	r3, [r3, #1]
   15f3a:	757b      	strb	r3, [r7, #21]
            if (control == AMDTP_CONTROL_RESEND_REQ)
   15f3c:	7dbb      	ldrb	r3, [r7, #22]
   15f3e:	2b00      	cmp	r3, #0
   15f40:	d132      	bne.n	15fa8 <AmdtpPacketHandler+0x160>
                APP_TRACE_INFO2("resendPktSn = %d, lastRxPktSn = %d", resendPktSn, amdtpCb->lastRxPktSn);
   15f42:	7d79      	ldrb	r1, [r7, #21]
   15f44:	68fb      	ldr	r3, [r7, #12]
   15f46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   15f4a:	461a      	mov	r2, r3
   15f4c:	481e      	ldr	r0, [pc, #120]	; (15fc8 <AmdtpPacketHandler+0x180>)
   15f4e:	f7ff fe03 	bl	15b58 <WsfTrace>
                amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   15f52:	68fb      	ldr	r3, [r7, #12]
   15f54:	2202      	movs	r2, #2
   15f56:	705a      	strb	r2, [r3, #1]
                resetPkt(&amdtpCb->rxPkt);
   15f58:	68fb      	ldr	r3, [r7, #12]
   15f5a:	3304      	adds	r3, #4
   15f5c:	4618      	mov	r0, r3
   15f5e:	f7ff fe27 	bl	15bb0 <resetPkt>
                if (resendPktSn > amdtpCb->lastRxPktSn)
   15f62:	68fb      	ldr	r3, [r7, #12]
   15f64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   15f68:	7d7a      	ldrb	r2, [r7, #21]
   15f6a:	429a      	cmp	r2, r3
   15f6c:	d906      	bls.n	15f7c <AmdtpPacketHandler+0x134>
                    AmdtpSendReply(amdtpCb, AMDTP_STATUS_RESEND_REPLY, NULL, 0);
   15f6e:	2300      	movs	r3, #0
   15f70:	2200      	movs	r2, #0
   15f72:	2108      	movs	r1, #8
   15f74:	68f8      	ldr	r0, [r7, #12]
   15f76:	f000 f8b9 	bl	160ec <AmdtpSendReply>
   15f7a:	e01a      	b.n	15fb2 <AmdtpPacketHandler+0x16a>
                else if (resendPktSn == amdtpCb->lastRxPktSn)
   15f7c:	68fb      	ldr	r3, [r7, #12]
   15f7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   15f82:	7d7a      	ldrb	r2, [r7, #21]
   15f84:	429a      	cmp	r2, r3
   15f86:	d106      	bne.n	15f96 <AmdtpPacketHandler+0x14e>
                    AmdtpSendReply(amdtpCb, AMDTP_STATUS_SUCCESS, NULL, 0);
   15f88:	2300      	movs	r3, #0
   15f8a:	2200      	movs	r2, #0
   15f8c:	2100      	movs	r1, #0
   15f8e:	68f8      	ldr	r0, [r7, #12]
   15f90:	f000 f8ac 	bl	160ec <AmdtpSendReply>
   15f94:	e00d      	b.n	15fb2 <AmdtpPacketHandler+0x16a>
                    APP_TRACE_WARN2("resendPktSn = %d, lastRxPktSn = %d", resendPktSn, amdtpCb->lastRxPktSn);
   15f96:	7d79      	ldrb	r1, [r7, #21]
   15f98:	68fb      	ldr	r3, [r7, #12]
   15f9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   15f9e:	461a      	mov	r2, r3
   15fa0:	4809      	ldr	r0, [pc, #36]	; (15fc8 <AmdtpPacketHandler+0x180>)
   15fa2:	f7ff fdd9 	bl	15b58 <WsfTrace>
   15fa6:	e004      	b.n	15fb2 <AmdtpPacketHandler+0x16a>
                APP_TRACE_WARN1("unexpected contrl = %d\n", control);
   15fa8:	7dbb      	ldrb	r3, [r7, #22]
   15faa:	4619      	mov	r1, r3
   15fac:	4807      	ldr	r0, [pc, #28]	; (15fcc <AmdtpPacketHandler+0x184>)
   15fae:	f7ff fdd3 	bl	15b58 <WsfTrace>
            resetPkt(&amdtpCb->ackPkt);
   15fb2:	68fb      	ldr	r3, [r7, #12]
   15fb4:	331c      	adds	r3, #28
   15fb6:	4618      	mov	r0, r3
   15fb8:	f7ff fdfa 	bl	15bb0 <resetPkt>
            break;
   15fbc:	bf00      	nop
    }
}
   15fbe:	bf00      	nop
   15fc0:	3718      	adds	r7, #24
   15fc2:	46bd      	mov	sp, r7
   15fc4:	bd80      	pop	{r7, pc}
   15fc6:	bf00      	nop
   15fc8:	000249f8 	.word	0x000249f8
   15fcc:	00024a1c 	.word	0x00024a1c

00015fd0 <AmdtpBuildPkt>:

void
AmdtpBuildPkt(amdtpCb_t *amdtpCb, eAmdtpPktType_t type, bool_t encrypted, bool_t enableACK, uint8_t *buf, uint16_t len)
{
   15fd0:	b580      	push	{r7, lr}
   15fd2:	b086      	sub	sp, #24
   15fd4:	af00      	add	r7, sp, #0
   15fd6:	6078      	str	r0, [r7, #4]
   15fd8:	4608      	mov	r0, r1
   15fda:	4611      	mov	r1, r2
   15fdc:	461a      	mov	r2, r3
   15fde:	4603      	mov	r3, r0
   15fe0:	70fb      	strb	r3, [r7, #3]
   15fe2:	460b      	mov	r3, r1
   15fe4:	70bb      	strb	r3, [r7, #2]
   15fe6:	4613      	mov	r3, r2
   15fe8:	707b      	strb	r3, [r7, #1]
    uint16_t header = 0;
   15fea:	2300      	movs	r3, #0
   15fec:	82fb      	strh	r3, [r7, #22]
    uint32_t calDataCrc;
    amdtpPacket_t *pkt;

    if (type == AMDTP_PKT_TYPE_DATA)
   15fee:	78fb      	ldrb	r3, [r7, #3]
   15ff0:	2b01      	cmp	r3, #1
   15ff2:	d109      	bne.n	16008 <AmdtpBuildPkt+0x38>
    {
        pkt = &amdtpCb->txPkt;
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	3310      	adds	r3, #16
   15ff8:	613b      	str	r3, [r7, #16]
        header = amdtpCb->txPktSn << PACKET_SN_BIT_OFFSET;
   15ffa:	687b      	ldr	r3, [r7, #4]
   15ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   16000:	b29b      	uxth	r3, r3
   16002:	021b      	lsls	r3, r3, #8
   16004:	82fb      	strh	r3, [r7, #22]
   16006:	e002      	b.n	1600e <AmdtpBuildPkt+0x3e>
    }
    else
    {
        pkt = &amdtpCb->ackPkt;
   16008:	687b      	ldr	r3, [r7, #4]
   1600a:	331c      	adds	r3, #28
   1600c:	613b      	str	r3, [r7, #16]

    //
    // Prepare header frame to be sent first
    //
    // length
    pkt->len = len + AMDTP_PREFIX_SIZE_IN_PKT + AMDTP_CRC_SIZE_IN_PKT;
   1600e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   16010:	3308      	adds	r3, #8
   16012:	b29a      	uxth	r2, r3
   16014:	693b      	ldr	r3, [r7, #16]
   16016:	805a      	strh	r2, [r3, #2]
    pkt->data[0]  = (len + AMDTP_CRC_SIZE_IN_PKT) & 0xff;
   16018:	693b      	ldr	r3, [r7, #16]
   1601a:	689b      	ldr	r3, [r3, #8]
   1601c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   1601e:	b2d2      	uxtb	r2, r2
   16020:	3204      	adds	r2, #4
   16022:	b2d2      	uxtb	r2, r2
   16024:	701a      	strb	r2, [r3, #0]
    pkt->data[1]  = ((len + AMDTP_CRC_SIZE_IN_PKT) >> 8) & 0xff;
   16026:	693b      	ldr	r3, [r7, #16]
   16028:	689b      	ldr	r3, [r3, #8]
   1602a:	3301      	adds	r3, #1
   1602c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   1602e:	3204      	adds	r2, #4
   16030:	1212      	asrs	r2, r2, #8
   16032:	b2d2      	uxtb	r2, r2
   16034:	701a      	strb	r2, [r3, #0]

    // header
    header = header | (type << PACKET_TYPE_BIT_OFFSET);
   16036:	78fb      	ldrb	r3, [r7, #3]
   16038:	031b      	lsls	r3, r3, #12
   1603a:	b21a      	sxth	r2, r3
   1603c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   16040:	4313      	orrs	r3, r2
   16042:	b21b      	sxth	r3, r3
   16044:	82fb      	strh	r3, [r7, #22]
    if (encrypted)
   16046:	78bb      	ldrb	r3, [r7, #2]
   16048:	2b00      	cmp	r3, #0
   1604a:	d003      	beq.n	16054 <AmdtpBuildPkt+0x84>
    {
        header = header | (1 << PACKET_ENCRYPTION_BIT_OFFSET);
   1604c:	8afb      	ldrh	r3, [r7, #22]
   1604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16052:	82fb      	strh	r3, [r7, #22]
    }
    if (enableACK)
   16054:	787b      	ldrb	r3, [r7, #1]
   16056:	2b00      	cmp	r3, #0
   16058:	d003      	beq.n	16062 <AmdtpBuildPkt+0x92>
    {
        header = header | (1 << PACKET_ACK_BIT_OFFSET);
   1605a:	8afb      	ldrh	r3, [r7, #22]
   1605c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16060:	82fb      	strh	r3, [r7, #22]
    }
    pkt->data[2] = (header & 0xff);
   16062:	693b      	ldr	r3, [r7, #16]
   16064:	689b      	ldr	r3, [r3, #8]
   16066:	3302      	adds	r3, #2
   16068:	8afa      	ldrh	r2, [r7, #22]
   1606a:	b2d2      	uxtb	r2, r2
   1606c:	701a      	strb	r2, [r3, #0]
    pkt->data[3] = (header >> 8);
   1606e:	693b      	ldr	r3, [r7, #16]
   16070:	689b      	ldr	r3, [r3, #8]
   16072:	3303      	adds	r3, #3
   16074:	8afa      	ldrh	r2, [r7, #22]
   16076:	0a12      	lsrs	r2, r2, #8
   16078:	b292      	uxth	r2, r2
   1607a:	b2d2      	uxtb	r2, r2
   1607c:	701a      	strb	r2, [r3, #0]

    // copy data
    memcpy(&(pkt->data[AMDTP_PREFIX_SIZE_IN_PKT]), buf, len);
   1607e:	693b      	ldr	r3, [r7, #16]
   16080:	689b      	ldr	r3, [r3, #8]
   16082:	3304      	adds	r3, #4
   16084:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   16086:	6a39      	ldr	r1, [r7, #32]
   16088:	4618      	mov	r0, r3
   1608a:	f7f6 f869 	bl	c160 <memcpy>
    calDataCrc = CalcCrc32(0xFFFFFFFFU, len, buf);
   1608e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   16090:	6a3a      	ldr	r2, [r7, #32]
   16092:	4619      	mov	r1, r3
   16094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16098:	f7fd fe84 	bl	13da4 <CalcCrc32>
   1609c:	60f8      	str	r0, [r7, #12]

    // add checksum
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len] = (calDataCrc & 0xff);
   1609e:	693b      	ldr	r3, [r7, #16]
   160a0:	689b      	ldr	r3, [r3, #8]
   160a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   160a4:	3204      	adds	r2, #4
   160a6:	4413      	add	r3, r2
   160a8:	68fa      	ldr	r2, [r7, #12]
   160aa:	b2d2      	uxtb	r2, r2
   160ac:	701a      	strb	r2, [r3, #0]
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len + 1] = ((calDataCrc >> 8) & 0xff);
   160ae:	693b      	ldr	r3, [r7, #16]
   160b0:	689a      	ldr	r2, [r3, #8]
   160b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   160b4:	3305      	adds	r3, #5
   160b6:	4413      	add	r3, r2
   160b8:	68fa      	ldr	r2, [r7, #12]
   160ba:	0a12      	lsrs	r2, r2, #8
   160bc:	b2d2      	uxtb	r2, r2
   160be:	701a      	strb	r2, [r3, #0]
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len + 2] = ((calDataCrc >> 16) & 0xff);
   160c0:	693b      	ldr	r3, [r7, #16]
   160c2:	689a      	ldr	r2, [r3, #8]
   160c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   160c6:	3306      	adds	r3, #6
   160c8:	4413      	add	r3, r2
   160ca:	68fa      	ldr	r2, [r7, #12]
   160cc:	0c12      	lsrs	r2, r2, #16
   160ce:	b2d2      	uxtb	r2, r2
   160d0:	701a      	strb	r2, [r3, #0]
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len + 3] = ((calDataCrc >> 24) & 0xff);
   160d2:	693b      	ldr	r3, [r7, #16]
   160d4:	689a      	ldr	r2, [r3, #8]
   160d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   160d8:	3307      	adds	r3, #7
   160da:	4413      	add	r3, r2
   160dc:	68fa      	ldr	r2, [r7, #12]
   160de:	0e12      	lsrs	r2, r2, #24
   160e0:	b2d2      	uxtb	r2, r2
   160e2:	701a      	strb	r2, [r3, #0]
}
   160e4:	bf00      	nop
   160e6:	3718      	adds	r7, #24
   160e8:	46bd      	mov	sp, r7
   160ea:	bd80      	pop	{r7, pc}

000160ec <AmdtpSendReply>:
// Send Reply to Sender
//
//*****************************************************************************
void
AmdtpSendReply(amdtpCb_t *amdtpCb, eAmdtpStatus_t status, uint8_t *data, uint16_t len)
{
   160ec:	b590      	push	{r4, r7, lr}
   160ee:	b08d      	sub	sp, #52	; 0x34
   160f0:	af02      	add	r7, sp, #8
   160f2:	60f8      	str	r0, [r7, #12]
   160f4:	607a      	str	r2, [r7, #4]
   160f6:	461a      	mov	r2, r3
   160f8:	460b      	mov	r3, r1
   160fa:	72fb      	strb	r3, [r7, #11]
   160fc:	4613      	mov	r3, r2
   160fe:	813b      	strh	r3, [r7, #8]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   16100:	f107 0310 	add.w	r3, r7, #16
   16104:	2200      	movs	r2, #0
   16106:	601a      	str	r2, [r3, #0]
   16108:	605a      	str	r2, [r3, #4]
   1610a:	609a      	str	r2, [r3, #8]
   1610c:	60da      	str	r2, [r3, #12]
   1610e:	611a      	str	r2, [r3, #16]
    eAmdtpStatus_t st;

    WSF_ASSERT(len < ATT_DEFAULT_PAYLOAD_LEN);

    buf[0] = status;
   16110:	7afb      	ldrb	r3, [r7, #11]
   16112:	743b      	strb	r3, [r7, #16]
    if (len > 0)
   16114:	893b      	ldrh	r3, [r7, #8]
   16116:	2b00      	cmp	r3, #0
   16118:	d007      	beq.n	1612a <AmdtpSendReply+0x3e>
    {
        memcpy(buf + 1, data, len);
   1611a:	f107 0310 	add.w	r3, r7, #16
   1611e:	3301      	adds	r3, #1
   16120:	893a      	ldrh	r2, [r7, #8]
   16122:	6879      	ldr	r1, [r7, #4]
   16124:	4618      	mov	r0, r3
   16126:	f7f6 f81b 	bl	c160 <memcpy>
    }
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   1612a:	68fb      	ldr	r3, [r7, #12]
   1612c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   1612e:	893b      	ldrh	r3, [r7, #8]
   16130:	3301      	adds	r3, #1
   16132:	b29b      	uxth	r3, r3
   16134:	f107 0210 	add.w	r2, r7, #16
   16138:	9300      	str	r3, [sp, #0]
   1613a:	4613      	mov	r3, r2
   1613c:	2200      	movs	r2, #0
   1613e:	2100      	movs	r1, #0
   16140:	2002      	movs	r0, #2
   16142:	47a0      	blx	r4
   16144:	4603      	mov	r3, r0
   16146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (st != AMDTP_STATUS_SUCCESS)
   1614a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1614e:	2b00      	cmp	r3, #0
   16150:	d004      	beq.n	1615c <AmdtpSendReply+0x70>
    {
        APP_TRACE_WARN1("AmdtpSendReply status = %d\n", status);
   16152:	7afb      	ldrb	r3, [r7, #11]
   16154:	4619      	mov	r1, r3
   16156:	4803      	ldr	r0, [pc, #12]	; (16164 <AmdtpSendReply+0x78>)
   16158:	f7ff fcfe 	bl	15b58 <WsfTrace>
    }
}
   1615c:	bf00      	nop
   1615e:	372c      	adds	r7, #44	; 0x2c
   16160:	46bd      	mov	sp, r7
   16162:	bd90      	pop	{r4, r7, pc}
   16164:	00024a34 	.word	0x00024a34

00016168 <AmdtpSendControl>:
// Send control message to Receiver
//
//*****************************************************************************
void
AmdtpSendControl(amdtpCb_t *amdtpCb, eAmdtpControl_t control, uint8_t *data, uint16_t len)
{
   16168:	b590      	push	{r4, r7, lr}
   1616a:	b08d      	sub	sp, #52	; 0x34
   1616c:	af02      	add	r7, sp, #8
   1616e:	60f8      	str	r0, [r7, #12]
   16170:	607a      	str	r2, [r7, #4]
   16172:	461a      	mov	r2, r3
   16174:	460b      	mov	r3, r1
   16176:	72fb      	strb	r3, [r7, #11]
   16178:	4613      	mov	r3, r2
   1617a:	813b      	strh	r3, [r7, #8]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   1617c:	f107 0310 	add.w	r3, r7, #16
   16180:	2200      	movs	r2, #0
   16182:	601a      	str	r2, [r3, #0]
   16184:	605a      	str	r2, [r3, #4]
   16186:	609a      	str	r2, [r3, #8]
   16188:	60da      	str	r2, [r3, #12]
   1618a:	611a      	str	r2, [r3, #16]
    eAmdtpStatus_t st;

    WSF_ASSERT(len < ATT_DEFAULT_PAYLOAD_LEN);

    buf[0] = control;
   1618c:	7afb      	ldrb	r3, [r7, #11]
   1618e:	743b      	strb	r3, [r7, #16]
    if (len > 0)
   16190:	893b      	ldrh	r3, [r7, #8]
   16192:	2b00      	cmp	r3, #0
   16194:	d007      	beq.n	161a6 <AmdtpSendControl+0x3e>
    {
        memcpy(buf + 1, data, len);
   16196:	f107 0310 	add.w	r3, r7, #16
   1619a:	3301      	adds	r3, #1
   1619c:	893a      	ldrh	r2, [r7, #8]
   1619e:	6879      	ldr	r1, [r7, #4]
   161a0:	4618      	mov	r0, r3
   161a2:	f7f5 ffdd 	bl	c160 <memcpy>
    }
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_CONTROL, false, false, buf, len + 1);
   161a6:	68fb      	ldr	r3, [r7, #12]
   161a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   161aa:	893b      	ldrh	r3, [r7, #8]
   161ac:	3301      	adds	r3, #1
   161ae:	b29b      	uxth	r3, r3
   161b0:	f107 0210 	add.w	r2, r7, #16
   161b4:	9300      	str	r3, [sp, #0]
   161b6:	4613      	mov	r3, r2
   161b8:	2200      	movs	r2, #0
   161ba:	2100      	movs	r1, #0
   161bc:	2003      	movs	r0, #3
   161be:	47a0      	blx	r4
   161c0:	4603      	mov	r3, r0
   161c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (st != AMDTP_STATUS_SUCCESS)
   161c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   161ca:	2b00      	cmp	r3, #0
   161cc:	d005      	beq.n	161da <AmdtpSendControl+0x72>
    {
        APP_TRACE_WARN1("AmdtpSendControl status = %d\n", st);
   161ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   161d2:	4619      	mov	r1, r3
   161d4:	4803      	ldr	r0, [pc, #12]	; (161e4 <AmdtpSendControl+0x7c>)
   161d6:	f7ff fcbf 	bl	15b58 <WsfTrace>
    }
}
   161da:	bf00      	nop
   161dc:	372c      	adds	r7, #44	; 0x2c
   161de:	46bd      	mov	sp, r7
   161e0:	bd90      	pop	{r4, r7, pc}
   161e2:	bf00      	nop
   161e4:	00024a50 	.word	0x00024a50

000161e8 <AmdtpSendPacketHandler>:

void
AmdtpSendPacketHandler(amdtpCb_t *amdtpCb)
{
   161e8:	b580      	push	{r7, lr}
   161ea:	b084      	sub	sp, #16
   161ec:	af00      	add	r7, sp, #0
   161ee:	6078      	str	r0, [r7, #4]
    uint16_t transferSize = 0;
   161f0:	2300      	movs	r3, #0
   161f2:	81fb      	strh	r3, [r7, #14]
    uint16_t remainingBytes = 0;
   161f4:	2300      	movs	r3, #0
   161f6:	81bb      	strh	r3, [r7, #12]
    amdtpPacket_t *txPkt = &amdtpCb->txPkt;
   161f8:	687b      	ldr	r3, [r7, #4]
   161fa:	3310      	adds	r3, #16
   161fc:	60bb      	str	r3, [r7, #8]

    if ( amdtpCb->txState == AMDTP_STATE_TX_IDLE )
   161fe:	687b      	ldr	r3, [r7, #4]
   16200:	781b      	ldrb	r3, [r3, #0]
   16202:	2b01      	cmp	r3, #1
   16204:	d105      	bne.n	16212 <AmdtpSendPacketHandler+0x2a>
    {
        txPkt->offset = 0;
   16206:	68bb      	ldr	r3, [r7, #8]
   16208:	2200      	movs	r2, #0
   1620a:	801a      	strh	r2, [r3, #0]
        amdtpCb->txState = AMDTP_STATE_SENDING;
   1620c:	687b      	ldr	r3, [r7, #4]
   1620e:	2203      	movs	r2, #3
   16210:	701a      	strb	r2, [r3, #0]
    }

    if ( txPkt->offset >= txPkt->len )
   16212:	68bb      	ldr	r3, [r7, #8]
   16214:	881a      	ldrh	r2, [r3, #0]
   16216:	68bb      	ldr	r3, [r7, #8]
   16218:	885b      	ldrh	r3, [r3, #2]
   1621a:	429a      	cmp	r2, r3
   1621c:	d30c      	bcc.n	16238 <AmdtpSendPacketHandler+0x50>
    {
        // done sent packet
        amdtpCb->txState = AMDTP_STATE_WAITING_ACK;
   1621e:	687b      	ldr	r3, [r7, #4]
   16220:	2205      	movs	r2, #5
   16222:	701a      	strb	r2, [r3, #0]
        // start tx timeout timer
        WsfTimerStartMs(&amdtpCb->timeoutTimer, amdtpCb->txTimeoutMs);
   16224:	687b      	ldr	r3, [r7, #4]
   16226:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1622a:	687b      	ldr	r3, [r7, #4]
   1622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1622e:	4619      	mov	r1, r3
   16230:	4610      	mov	r0, r2
   16232:	f7fe fba9 	bl	14988 <WsfTimerStartMs>
                                            : (amdtpCb->attMtuSize - 3);
        // send packet
        amdtpCb->data_sender_func(&txPkt->data[txPkt->offset], transferSize);
        txPkt->offset += transferSize;
    }
}
   16236:	e01e      	b.n	16276 <AmdtpSendPacketHandler+0x8e>
        remainingBytes = txPkt->len - txPkt->offset;
   16238:	68bb      	ldr	r3, [r7, #8]
   1623a:	885a      	ldrh	r2, [r3, #2]
   1623c:	68bb      	ldr	r3, [r7, #8]
   1623e:	881b      	ldrh	r3, [r3, #0]
   16240:	1ad3      	subs	r3, r2, r3
   16242:	81bb      	strh	r3, [r7, #12]
                                            : (amdtpCb->attMtuSize - 3);
   16244:	687b      	ldr	r3, [r7, #4]
   16246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   16248:	1eda      	subs	r2, r3, #3
   1624a:	89bb      	ldrh	r3, [r7, #12]
   1624c:	4293      	cmp	r3, r2
   1624e:	bfa8      	it	ge
   16250:	4613      	movge	r3, r2
        transferSize = ((amdtpCb->attMtuSize - 3) > remainingBytes)
   16252:	81fb      	strh	r3, [r7, #14]
        amdtpCb->data_sender_func(&txPkt->data[txPkt->offset], transferSize);
   16254:	687b      	ldr	r3, [r7, #4]
   16256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16258:	68ba      	ldr	r2, [r7, #8]
   1625a:	6892      	ldr	r2, [r2, #8]
   1625c:	68b9      	ldr	r1, [r7, #8]
   1625e:	8809      	ldrh	r1, [r1, #0]
   16260:	440a      	add	r2, r1
   16262:	89f9      	ldrh	r1, [r7, #14]
   16264:	4610      	mov	r0, r2
   16266:	4798      	blx	r3
        txPkt->offset += transferSize;
   16268:	68bb      	ldr	r3, [r7, #8]
   1626a:	881a      	ldrh	r2, [r3, #0]
   1626c:	89fb      	ldrh	r3, [r7, #14]
   1626e:	4413      	add	r3, r2
   16270:	b29a      	uxth	r2, r3
   16272:	68bb      	ldr	r3, [r7, #8]
   16274:	801a      	strh	r2, [r3, #0]
}
   16276:	bf00      	nop
   16278:	3710      	adds	r7, #16
   1627a:	46bd      	mov	sp, r7
   1627c:	bd80      	pop	{r7, pc}
	...

00016280 <__NVIC_EnableIRQ>:
{
   16280:	b480      	push	{r7}
   16282:	b083      	sub	sp, #12
   16284:	af00      	add	r7, sp, #0
   16286:	4603      	mov	r3, r0
   16288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1628a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1628e:	2b00      	cmp	r3, #0
   16290:	db0b      	blt.n	162aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16292:	4909      	ldr	r1, [pc, #36]	; (162b8 <__NVIC_EnableIRQ+0x38>)
   16294:	f997 3007 	ldrsb.w	r3, [r7, #7]
   16298:	095b      	lsrs	r3, r3, #5
   1629a:	79fa      	ldrb	r2, [r7, #7]
   1629c:	f002 021f 	and.w	r2, r2, #31
   162a0:	2001      	movs	r0, #1
   162a2:	fa00 f202 	lsl.w	r2, r0, r2
   162a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   162aa:	bf00      	nop
   162ac:	370c      	adds	r7, #12
   162ae:	46bd      	mov	sp, r7
   162b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   162b4:	4770      	bx	lr
   162b6:	bf00      	nop
   162b8:	e000e100 	.word	0xe000e100

000162bc <__NVIC_DisableIRQ>:
{
   162bc:	b480      	push	{r7}
   162be:	b083      	sub	sp, #12
   162c0:	af00      	add	r7, sp, #0
   162c2:	4603      	mov	r3, r0
   162c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   162c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   162ca:	2b00      	cmp	r3, #0
   162cc:	db10      	blt.n	162f0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   162ce:	490b      	ldr	r1, [pc, #44]	; (162fc <__NVIC_DisableIRQ+0x40>)
   162d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   162d4:	095b      	lsrs	r3, r3, #5
   162d6:	79fa      	ldrb	r2, [r7, #7]
   162d8:	f002 021f 	and.w	r2, r2, #31
   162dc:	2001      	movs	r0, #1
   162de:	fa00 f202 	lsl.w	r2, r0, r2
   162e2:	3320      	adds	r3, #32
   162e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   162e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   162ec:	f3bf 8f6f 	isb	sy
}
   162f0:	bf00      	nop
   162f2:	370c      	adds	r7, #12
   162f4:	46bd      	mov	sp, r7
   162f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   162fa:	4770      	bx	lr
   162fc:	e000e100 	.word	0xe000e100

00016300 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   16300:	b580      	push	{r7, lr}
   16302:	b082      	sub	sp, #8
   16304:	af00      	add	r7, sp, #0
   16306:	6078      	str	r0, [r7, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   16308:	687b      	ldr	r3, [r7, #4]
   1630a:	2b00      	cmp	r3, #0
   1630c:	d00c      	beq.n	16328 <error_check+0x28>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   1630e:	4a08      	ldr	r2, [pc, #32]	; (16330 <error_check+0x30>)
   16310:	687b      	ldr	r3, [r7, #4]
   16312:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   16314:	4b07      	ldr	r3, [pc, #28]	; (16334 <error_check+0x34>)
   16316:	681b      	ldr	r3, [r3, #0]
   16318:	2b00      	cmp	r3, #0
   1631a:	d005      	beq.n	16328 <error_check+0x28>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   1631c:	4b05      	ldr	r3, [pc, #20]	; (16334 <error_check+0x34>)
   1631e:	681b      	ldr	r3, [r3, #0]
   16320:	4a03      	ldr	r2, [pc, #12]	; (16330 <error_check+0x30>)
   16322:	6812      	ldr	r2, [r2, #0]
   16324:	4610      	mov	r0, r2
   16326:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   16328:	bf00      	nop
   1632a:	3708      	adds	r7, #8
   1632c:	46bd      	mov	sp, r7
   1632e:	bd80      	pop	{r7, pc}
   16330:	10005268 	.word	0x10005268
   16334:	10005264 	.word	0x10005264

00016338 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   16338:	b5b0      	push	{r4, r5, r7, lr}
   1633a:	b092      	sub	sp, #72	; 0x48
   1633c:	af00      	add	r7, sp, #0
   1633e:	4603      	mov	r3, r0
   16340:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32NumXtalRetries = 0;
   16342:	2300      	movs	r3, #0
   16344:	647b      	str	r3, [r7, #68]	; 0x44


    g_ui32NumBytes     = 0;
   16346:	4b6c      	ldr	r3, [pc, #432]	; (164f8 <HciDrvRadioBoot+0x1c0>)
   16348:	2200      	movs	r2, #0
   1634a:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   1634c:	4b6b      	ldr	r3, [pc, #428]	; (164fc <HciDrvRadioBoot+0x1c4>)
   1634e:	2200      	movs	r2, #0
   16350:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   16352:	2301      	movs	r3, #1
   16354:	643b      	str	r3, [r7, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   16356:	e0a1      	b.n	1649c <HciDrvRadioBoot+0x164>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   16358:	4969      	ldr	r1, [pc, #420]	; (16500 <HciDrvRadioBoot+0x1c8>)
   1635a:	2000      	movs	r0, #0
   1635c:	f00b faf4 	bl	21948 <am_hal_ble_initialize>
   16360:	63f8      	str	r0, [r7, #60]	; 0x3c
   16362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16364:	2b00      	cmp	r3, #0
   16366:	d006      	beq.n	16376 <HciDrvRadioBoot+0x3e>
   16368:	4866      	ldr	r0, [pc, #408]	; (16504 <HciDrvRadioBoot+0x1cc>)
   1636a:	f006 fb5f 	bl	1ca2c <am_util_stdio_printf>
   1636e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   16370:	f7ff ffc6 	bl	16300 <error_check>
   16374:	e0bd      	b.n	164f2 <HciDrvRadioBoot+0x1ba>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   16376:	4b62      	ldr	r3, [pc, #392]	; (16500 <HciDrvRadioBoot+0x1c8>)
   16378:	681b      	ldr	r3, [r3, #0]
   1637a:	2100      	movs	r1, #0
   1637c:	4618      	mov	r0, r3
   1637e:	f00b fbd3 	bl	21b28 <am_hal_ble_power_control>
   16382:	63b8      	str	r0, [r7, #56]	; 0x38
   16384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16386:	2b00      	cmp	r3, #0
   16388:	d006      	beq.n	16398 <HciDrvRadioBoot+0x60>
   1638a:	485f      	ldr	r0, [pc, #380]	; (16508 <HciDrvRadioBoot+0x1d0>)
   1638c:	f006 fb4e 	bl	1ca2c <am_util_stdio_printf>
   16390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16392:	f7ff ffb5 	bl	16300 <error_check>
   16396:	e0ac      	b.n	164f2 <HciDrvRadioBoot+0x1ba>

        am_hal_ble_config_t sBleConfig =
   16398:	4b5c      	ldr	r3, [pc, #368]	; (1650c <HciDrvRadioBoot+0x1d4>)
   1639a:	f107 0408 	add.w	r4, r7, #8
   1639e:	461d      	mov	r5, r3
   163a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   163a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   163a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   163a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   163ac:	4b54      	ldr	r3, [pc, #336]	; (16500 <HciDrvRadioBoot+0x1c8>)
   163ae:	681b      	ldr	r3, [r3, #0]
   163b0:	f107 0208 	add.w	r2, r7, #8
   163b4:	4611      	mov	r1, r2
   163b6:	4618      	mov	r0, r3
   163b8:	f00b fb2e 	bl	21a18 <am_hal_ble_config>
   163bc:	6378      	str	r0, [r7, #52]	; 0x34
   163be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163c0:	2b00      	cmp	r3, #0
   163c2:	d006      	beq.n	163d2 <HciDrvRadioBoot+0x9a>
   163c4:	4852      	ldr	r0, [pc, #328]	; (16510 <HciDrvRadioBoot+0x1d8>)
   163c6:	f006 fb31 	bl	1ca2c <am_util_stdio_printf>
   163ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
   163cc:	f7ff ff98 	bl	16300 <error_check>
   163d0:	e08f      	b.n	164f2 <HciDrvRadioBoot+0x1ba>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   163d2:	79fb      	ldrb	r3, [r7, #7]
   163d4:	2b00      	cmp	r3, #0
   163d6:	d003      	beq.n	163e0 <HciDrvRadioBoot+0xa8>
        {
            am_util_delay_ms(1000);
   163d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   163dc:	f005 fbd8 	bl	1bb90 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   163e0:	4b47      	ldr	r3, [pc, #284]	; (16500 <HciDrvRadioBoot+0x1c8>)
   163e2:	681b      	ldr	r3, [r3, #0]
   163e4:	4618      	mov	r0, r3
   163e6:	f00c fa95 	bl	22914 <am_hal_ble_boot>
   163ea:	6438      	str	r0, [r7, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   163ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   163ee:	2b00      	cmp	r3, #0
   163f0:	d059      	beq.n	164a6 <HciDrvRadioBoot+0x16e>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   163f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   163f4:	4a47      	ldr	r2, [pc, #284]	; (16514 <HciDrvRadioBoot+0x1dc>)
   163f6:	4293      	cmp	r3, r2
   163f8:	d12a      	bne.n	16450 <HciDrvRadioBoot+0x118>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   163fa:	4b41      	ldr	r3, [pc, #260]	; (16500 <HciDrvRadioBoot+0x1c8>)
   163fc:	681b      	ldr	r3, [r3, #0]
   163fe:	2101      	movs	r1, #1
   16400:	4618      	mov	r0, r3
   16402:	f00b fb91 	bl	21b28 <am_hal_ble_power_control>
   16406:	6338      	str	r0, [r7, #48]	; 0x30
   16408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1640a:	2b00      	cmp	r3, #0
   1640c:	d006      	beq.n	1641c <HciDrvRadioBoot+0xe4>
   1640e:	4842      	ldr	r0, [pc, #264]	; (16518 <HciDrvRadioBoot+0x1e0>)
   16410:	f006 fb0c 	bl	1ca2c <am_util_stdio_printf>
   16414:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16416:	f7ff ff73 	bl	16300 <error_check>
   1641a:	e06a      	b.n	164f2 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   1641c:	4b38      	ldr	r3, [pc, #224]	; (16500 <HciDrvRadioBoot+0x1c8>)
   1641e:	681b      	ldr	r3, [r3, #0]
   16420:	4618      	mov	r0, r3
   16422:	f00b facd 	bl	219c0 <am_hal_ble_deinitialize>
   16426:	62f8      	str	r0, [r7, #44]	; 0x2c
   16428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1642a:	2b00      	cmp	r3, #0
   1642c:	d006      	beq.n	1643c <HciDrvRadioBoot+0x104>
   1642e:	483b      	ldr	r0, [pc, #236]	; (1651c <HciDrvRadioBoot+0x1e4>)
   16430:	f006 fafc 	bl	1ca2c <am_util_stdio_printf>
   16434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16436:	f7ff ff63 	bl	16300 <error_check>
   1643a:	e05a      	b.n	164f2 <HciDrvRadioBoot+0x1ba>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   1643c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1643e:	1c5a      	adds	r2, r3, #1
   16440:	647a      	str	r2, [r7, #68]	; 0x44
   16442:	2b09      	cmp	r3, #9
   16444:	d854      	bhi.n	164f0 <HciDrvRadioBoot+0x1b8>
            {
                am_util_delay_ms(1000);
   16446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1644a:	f005 fba1 	bl	1bb90 <am_util_delay_ms>
   1644e:	e025      	b.n	1649c <HciDrvRadioBoot+0x164>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   16450:	4b2b      	ldr	r3, [pc, #172]	; (16500 <HciDrvRadioBoot+0x1c8>)
   16452:	681b      	ldr	r3, [r3, #0]
   16454:	2101      	movs	r1, #1
   16456:	4618      	mov	r0, r3
   16458:	f00b fb66 	bl	21b28 <am_hal_ble_power_control>
   1645c:	62b8      	str	r0, [r7, #40]	; 0x28
   1645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16460:	2b00      	cmp	r3, #0
   16462:	d006      	beq.n	16472 <HciDrvRadioBoot+0x13a>
   16464:	482c      	ldr	r0, [pc, #176]	; (16518 <HciDrvRadioBoot+0x1e0>)
   16466:	f006 fae1 	bl	1ca2c <am_util_stdio_printf>
   1646a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1646c:	f7ff ff48 	bl	16300 <error_check>
   16470:	e03f      	b.n	164f2 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   16472:	4b23      	ldr	r3, [pc, #140]	; (16500 <HciDrvRadioBoot+0x1c8>)
   16474:	681b      	ldr	r3, [r3, #0]
   16476:	4618      	mov	r0, r3
   16478:	f00b faa2 	bl	219c0 <am_hal_ble_deinitialize>
   1647c:	6278      	str	r0, [r7, #36]	; 0x24
   1647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16480:	2b00      	cmp	r3, #0
   16482:	d006      	beq.n	16492 <HciDrvRadioBoot+0x15a>
   16484:	4825      	ldr	r0, [pc, #148]	; (1651c <HciDrvRadioBoot+0x1e4>)
   16486:	f006 fad1 	bl	1ca2c <am_util_stdio_printf>
   1648a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1648c:	f7ff ff38 	bl	16300 <error_check>
   16490:	e02f      	b.n	164f2 <HciDrvRadioBoot+0x1ba>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   16492:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16494:	f7ff ff34 	bl	16300 <error_check>
            return;
   16498:	bf00      	nop
   1649a:	e02a      	b.n	164f2 <HciDrvRadioBoot+0x1ba>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   1649c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1649e:	2b00      	cmp	r3, #0
   164a0:	f47f af5a 	bne.w	16358 <HciDrvRadioBoot+0x20>
   164a4:	e000      	b.n	164a8 <HciDrvRadioBoot+0x170>
            break;
   164a6:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   164a8:	4b15      	ldr	r3, [pc, #84]	; (16500 <HciDrvRadioBoot+0x1c8>)
   164aa:	681b      	ldr	r3, [r3, #0]
   164ac:	2108      	movs	r1, #8
   164ae:	4618      	mov	r0, r3
   164b0:	f00c fb04 	bl	22abc <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   164b4:	4b12      	ldr	r3, [pc, #72]	; (16500 <HciDrvRadioBoot+0x1c8>)
   164b6:	681b      	ldr	r3, [r3, #0]
   164b8:	f240 2181 	movw	r1, #641	; 0x281
   164bc:	4618      	mov	r0, r3
   164be:	f00b ff0d 	bl	222dc <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   164c2:	4b0f      	ldr	r3, [pc, #60]	; (16500 <HciDrvRadioBoot+0x1c8>)
   164c4:	681b      	ldr	r3, [r3, #0]
   164c6:	f240 2181 	movw	r1, #641	; 0x281
   164ca:	4618      	mov	r0, r3
   164cc:	f00b fed8 	bl	22280 <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   164d0:	200c      	movs	r0, #12
   164d2:	f7ff fed5 	bl	16280 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   164d6:	f44f 6302 	mov.w	r3, #2080	; 0x820
   164da:	f44f 7282 	mov.w	r2, #260	; 0x104
   164de:	4910      	ldr	r1, [pc, #64]	; (16520 <HciDrvRadioBoot+0x1e8>)
   164e0:	4810      	ldr	r0, [pc, #64]	; (16524 <HciDrvRadioBoot+0x1ec>)
   164e2:	f00d f981 	bl	237e8 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   164e6:	4b10      	ldr	r3, [pc, #64]	; (16528 <HciDrvRadioBoot+0x1f0>)
   164e8:	2200      	movs	r2, #0
   164ea:	601a      	str	r2, [r3, #0]

    return;
   164ec:	bf00      	nop
   164ee:	e000      	b.n	164f2 <HciDrvRadioBoot+0x1ba>
                return;
   164f0:	bf00      	nop
}
   164f2:	3748      	adds	r7, #72	; 0x48
   164f4:	46bd      	mov	sp, r7
   164f6:	bdb0      	pop	{r4, r5, r7, pc}
   164f8:	10005258 	.word	0x10005258
   164fc:	1000525c 	.word	0x1000525c
   16500:	1000b034 	.word	0x1000b034
   16504:	00024a70 	.word	0x00024a70
   16508:	00024aa4 	.word	0x00024aa4
   1650c:	00024ba0 	.word	0x00024ba0
   16510:	00024af0 	.word	0x00024af0
   16514:	0800000b 	.word	0x0800000b
   16518:	00024b28 	.word	0x00024b28
   1651c:	00024b70 	.word	0x00024b70
   16520:	1000a814 	.word	0x1000a814
   16524:	1000a6ec 	.word	0x1000a6ec
   16528:	10005260 	.word	0x10005260

0001652c <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   1652c:	b580      	push	{r7, lr}
   1652e:	b082      	sub	sp, #8
   16530:	af00      	add	r7, sp, #0
    BLE_HEARTBEAT_STOP();
   16532:	481c      	ldr	r0, [pc, #112]	; (165a4 <HciDrvRadioShutdown+0x78>)
   16534:	f7fe fa3c 	bl	149b0 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   16538:	200c      	movs	r0, #12
   1653a:	f7ff febf 	bl	162bc <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   1653e:	4b1a      	ldr	r3, [pc, #104]	; (165a8 <HciDrvRadioShutdown+0x7c>)
   16540:	681b      	ldr	r3, [r3, #0]
   16542:	2101      	movs	r1, #1
   16544:	4618      	mov	r0, r3
   16546:	f00b faef 	bl	21b28 <am_hal_ble_power_control>
   1654a:	6078      	str	r0, [r7, #4]
   1654c:	687b      	ldr	r3, [r7, #4]
   1654e:	2b00      	cmp	r3, #0
   16550:	d006      	beq.n	16560 <HciDrvRadioShutdown+0x34>
   16552:	4816      	ldr	r0, [pc, #88]	; (165ac <HciDrvRadioShutdown+0x80>)
   16554:	f006 fa6a 	bl	1ca2c <am_util_stdio_printf>
   16558:	6878      	ldr	r0, [r7, #4]
   1655a:	f7ff fed1 	bl	16300 <error_check>
   1655e:	e01d      	b.n	1659c <HciDrvRadioShutdown+0x70>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   16560:	bf00      	nop
   16562:	4b13      	ldr	r3, [pc, #76]	; (165b0 <HciDrvRadioShutdown+0x84>)
   16564:	689b      	ldr	r3, [r3, #8]
   16566:	f3c3 3340 	ubfx	r3, r3, #13, #1
   1656a:	b2db      	uxtb	r3, r3
   1656c:	2b00      	cmp	r3, #0
   1656e:	d1f8      	bne.n	16562 <HciDrvRadioShutdown+0x36>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   16570:	4b0d      	ldr	r3, [pc, #52]	; (165a8 <HciDrvRadioShutdown+0x7c>)
   16572:	681b      	ldr	r3, [r3, #0]
   16574:	4618      	mov	r0, r3
   16576:	f00b fa23 	bl	219c0 <am_hal_ble_deinitialize>
   1657a:	6038      	str	r0, [r7, #0]
   1657c:	683b      	ldr	r3, [r7, #0]
   1657e:	2b00      	cmp	r3, #0
   16580:	d006      	beq.n	16590 <HciDrvRadioShutdown+0x64>
   16582:	480c      	ldr	r0, [pc, #48]	; (165b4 <HciDrvRadioShutdown+0x88>)
   16584:	f006 fa52 	bl	1ca2c <am_util_stdio_printf>
   16588:	6838      	ldr	r0, [r7, #0]
   1658a:	f7ff feb9 	bl	16300 <error_check>
   1658e:	e005      	b.n	1659c <HciDrvRadioShutdown+0x70>

    g_ui32NumBytes   = 0;
   16590:	4b09      	ldr	r3, [pc, #36]	; (165b8 <HciDrvRadioShutdown+0x8c>)
   16592:	2200      	movs	r2, #0
   16594:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   16596:	4b09      	ldr	r3, [pc, #36]	; (165bc <HciDrvRadioShutdown+0x90>)
   16598:	2200      	movs	r2, #0
   1659a:	601a      	str	r2, [r3, #0]
}
   1659c:	3708      	adds	r7, #8
   1659e:	46bd      	mov	sp, r7
   165a0:	bd80      	pop	{r7, pc}
   165a2:	bf00      	nop
   165a4:	1000a704 	.word	0x1000a704
   165a8:	1000b034 	.word	0x1000b034
   165ac:	00024b28 	.word	0x00024b28
   165b0:	40021000 	.word	0x40021000
   165b4:	00024b70 	.word	0x00024b70
   165b8:	10005258 	.word	0x10005258
   165bc:	1000525c 	.word	0x1000525c

000165c0 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   165c0:	b580      	push	{r7, lr}
   165c2:	b094      	sub	sp, #80	; 0x50
   165c4:	af00      	add	r7, sp, #0
   165c6:	4603      	mov	r3, r0
   165c8:	603a      	str	r2, [r7, #0]
   165ca:	71fb      	strb	r3, [r7, #7]
   165cc:	460b      	mov	r3, r1
   165ce:	80bb      	strh	r3, [r7, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   165d0:	4b3b      	ldr	r3, [pc, #236]	; (166c0 <hciDrvWrite+0x100>)
   165d2:	689a      	ldr	r2, [r3, #8]
   165d4:	4b3a      	ldr	r3, [pc, #232]	; (166c0 <hciDrvWrite+0x100>)
   165d6:	68db      	ldr	r3, [r3, #12]
   165d8:	429a      	cmp	r2, r3
   165da:	d105      	bne.n	165e8 <hciDrvWrite+0x28>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   165dc:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   165e0:	f7ff fe8e 	bl	16300 <error_check>
   165e4:	88bb      	ldrh	r3, [r7, #4]
   165e6:	e067      	b.n	166b8 <hciDrvWrite+0xf8>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   165e8:	88bb      	ldrh	r3, [r7, #4]
   165ea:	2bff      	cmp	r3, #255	; 0xff
   165ec:	d904      	bls.n	165f8 <hciDrvWrite+0x38>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   165ee:	4835      	ldr	r0, [pc, #212]	; (166c4 <hciDrvWrite+0x104>)
   165f0:	f7ff fe86 	bl	16300 <error_check>
   165f4:	88bb      	ldrh	r3, [r7, #4]
   165f6:	e05f      	b.n	166b8 <hciDrvWrite+0xf8>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   165f8:	4b31      	ldr	r3, [pc, #196]	; (166c0 <hciDrvWrite+0x100>)
   165fa:	695a      	ldr	r2, [r3, #20]
   165fc:	4b30      	ldr	r3, [pc, #192]	; (166c0 <hciDrvWrite+0x100>)
   165fe:	681b      	ldr	r3, [r3, #0]
   16600:	4413      	add	r3, r2
   16602:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   16604:	88bb      	ldrh	r3, [r7, #4]
   16606:	3301      	adds	r3, #1
   16608:	461a      	mov	r2, r3
   1660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1660c:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   1660e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16610:	3304      	adds	r3, #4
   16612:	647b      	str	r3, [r7, #68]	; 0x44

    *pui8Wptr++ = type;
   16614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16616:	1c5a      	adds	r2, r3, #1
   16618:	647a      	str	r2, [r7, #68]	; 0x44
   1661a:	79fa      	ldrb	r2, [r7, #7]
   1661c:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   1661e:	2300      	movs	r3, #0
   16620:	64fb      	str	r3, [r7, #76]	; 0x4c
   16622:	e00a      	b.n	1663a <hciDrvWrite+0x7a>
    {
        pui8Wptr[i] = pData[i];
   16624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16628:	4413      	add	r3, r2
   1662a:	6839      	ldr	r1, [r7, #0]
   1662c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1662e:	440a      	add	r2, r1
   16630:	7812      	ldrb	r2, [r2, #0]
   16632:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   16634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16636:	3301      	adds	r3, #1
   16638:	64fb      	str	r3, [r7, #76]	; 0x4c
   1663a:	88ba      	ldrh	r2, [r7, #4]
   1663c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1663e:	429a      	cmp	r2, r3
   16640:	d8f0      	bhi.n	16624 <hciDrvWrite+0x64>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   16642:	2201      	movs	r2, #1
   16644:	2100      	movs	r1, #0
   16646:	481e      	ldr	r0, [pc, #120]	; (166c0 <hciDrvWrite+0x100>)
   16648:	f00d f8da 	bl	23800 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1664c:	4b1e      	ldr	r3, [pc, #120]	; (166c8 <hciDrvWrite+0x108>)
   1664e:	781b      	ldrb	r3, [r3, #0]
   16650:	2101      	movs	r1, #1
   16652:	4618      	mov	r0, r3
   16654:	f7ff f962 	bl	1591c <WsfSetEvent>
#endif

#ifdef AM_CUSTOM_BDADDR
    if (type == HCI_CMD_TYPE)
   16658:	79fb      	ldrb	r3, [r7, #7]
   1665a:	2b01      	cmp	r3, #1
   1665c:	d12b      	bne.n	166b6 <hciDrvWrite+0xf6>
    {
        uint16_t opcode;
        BYTES_TO_UINT16(opcode, pData);
   1665e:	683b      	ldr	r3, [r7, #0]
   16660:	781b      	ldrb	r3, [r3, #0]
   16662:	b29a      	uxth	r2, r3
   16664:	683b      	ldr	r3, [r7, #0]
   16666:	3301      	adds	r3, #1
   16668:	781b      	ldrb	r3, [r3, #0]
   1666a:	b29b      	uxth	r3, r3
   1666c:	021b      	lsls	r3, r3, #8
   1666e:	b29b      	uxth	r3, r3
   16670:	4413      	add	r3, r2
   16672:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if (HCI_OPCODE_RESET == opcode)
   16676:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   1667a:	f640 4203 	movw	r2, #3075	; 0xc03
   1667e:	4293      	cmp	r3, r2
   16680:	d119      	bne.n	166b6 <hciDrvWrite+0xf6>
        {

            extern uint8_t g_BLEMacAddress[6];
            am_hal_mcuctrl_device_t sDevice;
            am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   16682:	f107 030c 	add.w	r3, r7, #12
   16686:	4619      	mov	r1, r3
   16688:	2001      	movs	r0, #1
   1668a:	f00c ff4f 	bl	2352c <am_hal_mcuctrl_info_get>
            g_BLEMacAddress[0] = sDevice.ui32ChipID0;
   1668e:	693b      	ldr	r3, [r7, #16]
   16690:	b2da      	uxtb	r2, r3
   16692:	4b0e      	ldr	r3, [pc, #56]	; (166cc <hciDrvWrite+0x10c>)
   16694:	701a      	strb	r2, [r3, #0]
            g_BLEMacAddress[1] = sDevice.ui32ChipID0 >> 8;
   16696:	693b      	ldr	r3, [r7, #16]
   16698:	0a1b      	lsrs	r3, r3, #8
   1669a:	b2da      	uxtb	r2, r3
   1669c:	4b0b      	ldr	r3, [pc, #44]	; (166cc <hciDrvWrite+0x10c>)
   1669e:	705a      	strb	r2, [r3, #1]
            g_BLEMacAddress[2] = sDevice.ui32ChipID0 >> 16;
   166a0:	693b      	ldr	r3, [r7, #16]
   166a2:	0c1b      	lsrs	r3, r3, #16
   166a4:	b2da      	uxtb	r2, r3
   166a6:	4b09      	ldr	r3, [pc, #36]	; (166cc <hciDrvWrite+0x10c>)
   166a8:	709a      	strb	r2, [r3, #2]

            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   166aa:	4a08      	ldr	r2, [pc, #32]	; (166cc <hciDrvWrite+0x10c>)
   166ac:	2106      	movs	r1, #6
   166ae:	f64f 4032 	movw	r0, #64562	; 0xfc32
   166b2:	f001 fa9c 	bl	17bee <HciVendorSpecificCmd>
        }
    }
#endif

    return len;
   166b6:	88bb      	ldrh	r3, [r7, #4]
}
   166b8:	4618      	mov	r0, r3
   166ba:	3750      	adds	r7, #80	; 0x50
   166bc:	46bd      	mov	sp, r7
   166be:	bd80      	pop	{r7, pc}
   166c0:	1000a6ec 	.word	0x1000a6ec
   166c4:	09000001 	.word	0x09000001
   166c8:	10005254 	.word	0x10005254
   166cc:	10002bd8 	.word	0x10002bd8

000166d0 <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   166d0:	b480      	push	{r7}
   166d2:	b083      	sub	sp, #12
   166d4:	af00      	add	r7, sp, #0
   166d6:	4603      	mov	r3, r0
   166d8:	71fb      	strb	r3, [r7, #7]
    g_HciDrvHandleID = handlerId;
   166da:	4a0a      	ldr	r2, [pc, #40]	; (16704 <HciDrvHandlerInit+0x34>)
   166dc:	79fb      	ldrb	r3, [r7, #7]
   166de:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   166e0:	4a09      	ldr	r2, [pc, #36]	; (16708 <HciDrvHandlerInit+0x38>)
   166e2:	79fb      	ldrb	r3, [r7, #7]
   166e4:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   166e6:	4b08      	ldr	r3, [pc, #32]	; (16708 <HciDrvHandlerInit+0x38>)
   166e8:	2202      	movs	r2, #2
   166ea:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   166ec:	4a07      	ldr	r2, [pc, #28]	; (1670c <HciDrvHandlerInit+0x3c>)
   166ee:	79fb      	ldrb	r3, [r7, #7]
   166f0:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   166f2:	4b06      	ldr	r3, [pc, #24]	; (1670c <HciDrvHandlerInit+0x3c>)
   166f4:	2203      	movs	r2, #3
   166f6:	731a      	strb	r2, [r3, #12]
}
   166f8:	bf00      	nop
   166fa:	370c      	adds	r7, #12
   166fc:	46bd      	mov	sp, r7
   166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   16702:	4770      	bx	lr
   16704:	10005254 	.word	0x10005254
   16708:	1000a704 	.word	0x1000a704
   1670c:	1000b038 	.word	0x1000b038

00016710 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   16710:	b580      	push	{r7, lr}
   16712:	b082      	sub	sp, #8
   16714:	af00      	add	r7, sp, #0
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   16716:	4b0e      	ldr	r3, [pc, #56]	; (16750 <HciDrvIntService+0x40>)
   16718:	681b      	ldr	r3, [r3, #0]
   1671a:	2101      	movs	r1, #1
   1671c:	4618      	mov	r0, r3
   1671e:	f00b fdcf 	bl	222c0 <am_hal_ble_int_status>
   16722:	6078      	str	r0, [r7, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   16724:	4b0a      	ldr	r3, [pc, #40]	; (16750 <HciDrvIntService+0x40>)
   16726:	681b      	ldr	r3, [r3, #0]
   16728:	6879      	ldr	r1, [r7, #4]
   1672a:	4618      	mov	r0, r3
   1672c:	f00b fdd6 	bl	222dc <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   16730:	4b08      	ldr	r3, [pc, #32]	; (16754 <HciDrvIntService+0x44>)
   16732:	681b      	ldr	r3, [r3, #0]
   16734:	3301      	adds	r3, #1
   16736:	4a07      	ldr	r2, [pc, #28]	; (16754 <HciDrvIntService+0x44>)
   16738:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1673a:	4b07      	ldr	r3, [pc, #28]	; (16758 <HciDrvIntService+0x48>)
   1673c:	781b      	ldrb	r3, [r3, #0]
   1673e:	2101      	movs	r1, #1
   16740:	4618      	mov	r0, r3
   16742:	f7ff f8eb 	bl	1591c <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   16746:	bf00      	nop
   16748:	3708      	adds	r7, #8
   1674a:	46bd      	mov	sp, r7
   1674c:	bd80      	pop	{r7, pc}
   1674e:	bf00      	nop
   16750:	1000b034 	.word	0x1000b034
   16754:	10005260 	.word	0x10005260
   16758:	10005254 	.word	0x10005254

0001675c <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1675c:	b580      	push	{r7, lr}
   1675e:	b08a      	sub	sp, #40	; 0x28
   16760:	af00      	add	r7, sp, #0
   16762:	4603      	mov	r3, r0
   16764:	6039      	str	r1, [r7, #0]
   16766:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   16768:	2300      	movs	r3, #0
   1676a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   1676c:	2300      	movs	r3, #0
   1676e:	623b      	str	r3, [r7, #32]
    uint32_t read_hci_packet_count = 0;
   16770:	2300      	movs	r3, #0
   16772:	61fb      	str	r3, [r7, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   16774:	683b      	ldr	r3, [r7, #0]
   16776:	789b      	ldrb	r3, [r3, #2]
   16778:	2b02      	cmp	r3, #2
   1677a:	d107      	bne.n	1678c <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   1677c:	f001 f825 	bl	177ca <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   16780:	f242 7110 	movw	r1, #10000	; 0x2710
   16784:	4889      	ldr	r0, [pc, #548]	; (169ac <HciDrvHandler+0x250>)
   16786:	f7fe f8ff 	bl	14988 <WsfTimerStartMs>
        return;
   1678a:	e10c      	b.n	169a6 <HciDrvHandler+0x24a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   1678c:	4b88      	ldr	r3, [pc, #544]	; (169b0 <HciDrvHandler+0x254>)
   1678e:	681a      	ldr	r2, [r3, #0]
   16790:	4b88      	ldr	r3, [pc, #544]	; (169b4 <HciDrvHandler+0x258>)
   16792:	681b      	ldr	r3, [r3, #0]
   16794:	429a      	cmp	r2, r3
   16796:	f240 80ea 	bls.w	1696e <HciDrvHandler+0x212>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   1679a:	4b87      	ldr	r3, [pc, #540]	; (169b8 <HciDrvHandler+0x25c>)
   1679c:	681a      	ldr	r2, [r3, #0]
   1679e:	4b85      	ldr	r3, [pc, #532]	; (169b4 <HciDrvHandler+0x258>)
   167a0:	681b      	ldr	r3, [r3, #0]
   167a2:	18d0      	adds	r0, r2, r3
   167a4:	4b82      	ldr	r3, [pc, #520]	; (169b0 <HciDrvHandler+0x254>)
   167a6:	681b      	ldr	r3, [r3, #0]
   167a8:	b29a      	uxth	r2, r3
   167aa:	4b82      	ldr	r3, [pc, #520]	; (169b4 <HciDrvHandler+0x258>)
   167ac:	681b      	ldr	r3, [r3, #0]
   167ae:	b29b      	uxth	r3, r3
   167b0:	1ad3      	subs	r3, r2, r3
   167b2:	b29b      	uxth	r3, r3
   167b4:	4619      	mov	r1, r3
   167b6:	f003 fd9b 	bl	1a2f0 <hciTrSerialRxIncoming>
   167ba:	4603      	mov	r3, r0
   167bc:	461a      	mov	r2, r3
   167be:	4b7d      	ldr	r3, [pc, #500]	; (169b4 <HciDrvHandler+0x258>)
   167c0:	681b      	ldr	r3, [r3, #0]
   167c2:	4413      	add	r3, r2
   167c4:	4a7b      	ldr	r2, [pc, #492]	; (169b4 <HciDrvHandler+0x258>)
   167c6:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   167c8:	4b7a      	ldr	r3, [pc, #488]	; (169b4 <HciDrvHandler+0x258>)
   167ca:	681a      	ldr	r2, [r3, #0]
   167cc:	4b78      	ldr	r3, [pc, #480]	; (169b0 <HciDrvHandler+0x254>)
   167ce:	681b      	ldr	r3, [r3, #0]
   167d0:	429a      	cmp	r2, r3
   167d2:	d006      	beq.n	167e2 <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   167d4:	4b79      	ldr	r3, [pc, #484]	; (169bc <HciDrvHandler+0x260>)
   167d6:	781b      	ldrb	r3, [r3, #0]
   167d8:	2101      	movs	r1, #1
   167da:	4618      	mov	r0, r3
   167dc:	f7ff f89e 	bl	1591c <WsfSetEvent>
            return;
   167e0:	e0e1      	b.n	169a6 <HciDrvHandler+0x24a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   167e2:	4b73      	ldr	r3, [pc, #460]	; (169b0 <HciDrvHandler+0x254>)
   167e4:	2200      	movs	r2, #0
   167e6:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   167e8:	4b72      	ldr	r3, [pc, #456]	; (169b4 <HciDrvHandler+0x258>)
   167ea:	2200      	movs	r2, #0
   167ec:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   167ee:	e0be      	b.n	1696e <HciDrvHandler+0x212>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   167f0:	4b73      	ldr	r3, [pc, #460]	; (169c0 <HciDrvHandler+0x264>)
   167f2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   167f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   167fa:	b2db      	uxtb	r3, r3
   167fc:	2b00      	cmp	r3, #0
   167fe:	d07e      	beq.n	168fe <HciDrvHandler+0x1a2>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   16800:	4b70      	ldr	r3, [pc, #448]	; (169c4 <HciDrvHandler+0x268>)
   16802:	681b      	ldr	r3, [r3, #0]
   16804:	60fb      	str	r3, [r7, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   16806:	4869      	ldr	r0, [pc, #420]	; (169ac <HciDrvHandler+0x250>)
   16808:	f7fe f8d2 	bl	149b0 <WsfTimerStop>
   1680c:	f242 7110 	movw	r1, #10000	; 0x2710
   16810:	4866      	ldr	r0, [pc, #408]	; (169ac <HciDrvHandler+0x250>)
   16812:	f7fe f8b9 	bl	14988 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   16816:	4b66      	ldr	r3, [pc, #408]	; (169b0 <HciDrvHandler+0x254>)
   16818:	2200      	movs	r2, #0
   1681a:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   1681c:	4b6a      	ldr	r3, [pc, #424]	; (169c8 <HciDrvHandler+0x26c>)
   1681e:	681b      	ldr	r3, [r3, #0]
   16820:	4a63      	ldr	r2, [pc, #396]	; (169b0 <HciDrvHandler+0x254>)
   16822:	496a      	ldr	r1, [pc, #424]	; (169cc <HciDrvHandler+0x270>)
   16824:	4618      	mov	r0, r3
   16826:	f00b fb07 	bl	21e38 <am_hal_ble_blocking_hci_read>
   1682a:	6138      	str	r0, [r7, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   1682c:	4b60      	ldr	r3, [pc, #384]	; (169b0 <HciDrvHandler+0x254>)
   1682e:	681b      	ldr	r3, [r3, #0]
   16830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16834:	d908      	bls.n	16848 <HciDrvHandler+0xec>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   16836:	4b66      	ldr	r3, [pc, #408]	; (169d0 <HciDrvHandler+0x274>)
   16838:	60bb      	str	r3, [r7, #8]
   1683a:	4866      	ldr	r0, [pc, #408]	; (169d4 <HciDrvHandler+0x278>)
   1683c:	f006 f8f6 	bl	1ca2c <am_util_stdio_printf>
   16840:	68b8      	ldr	r0, [r7, #8]
   16842:	f7ff fd5d 	bl	16300 <error_check>
   16846:	e0ae      	b.n	169a6 <HciDrvHandler+0x24a>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   16848:	693b      	ldr	r3, [r7, #16]
   1684a:	2b00      	cmp	r3, #0
   1684c:	d13d      	bne.n	168ca <HciDrvHandler+0x16e>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   1684e:	2300      	movs	r3, #0
   16850:	61bb      	str	r3, [r7, #24]
   16852:	e012      	b.n	1687a <HciDrvHandler+0x11e>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   16854:	4b5a      	ldr	r3, [pc, #360]	; (169c0 <HciDrvHandler+0x264>)
   16856:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1685a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1685e:	b2db      	uxtb	r3, r3
   16860:	2b00      	cmp	r3, #0
   16862:	d00e      	beq.n	16882 <HciDrvHandler+0x126>
   16864:	4b57      	ldr	r3, [pc, #348]	; (169c4 <HciDrvHandler+0x268>)
   16866:	681a      	ldr	r2, [r3, #0]
   16868:	68fb      	ldr	r3, [r7, #12]
   1686a:	429a      	cmp	r2, r3
   1686c:	d109      	bne.n	16882 <HciDrvHandler+0x126>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   1686e:	2001      	movs	r0, #1
   16870:	f005 f9ac 	bl	1bbcc <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   16874:	69bb      	ldr	r3, [r7, #24]
   16876:	3301      	adds	r3, #1
   16878:	61bb      	str	r3, [r7, #24]
   1687a:	69bb      	ldr	r3, [r7, #24]
   1687c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   16880:	d3e8      	bcc.n	16854 <HciDrvHandler+0xf8>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   16882:	4b4d      	ldr	r3, [pc, #308]	; (169b8 <HciDrvHandler+0x25c>)
   16884:	681a      	ldr	r2, [r3, #0]
   16886:	4b4a      	ldr	r3, [pc, #296]	; (169b0 <HciDrvHandler+0x254>)
   16888:	681b      	ldr	r3, [r3, #0]
   1688a:	b29b      	uxth	r3, r3
   1688c:	4619      	mov	r1, r3
   1688e:	4610      	mov	r0, r2
   16890:	f003 fd2e 	bl	1a2f0 <hciTrSerialRxIncoming>
   16894:	4603      	mov	r3, r0
   16896:	461a      	mov	r2, r3
   16898:	4b46      	ldr	r3, [pc, #280]	; (169b4 <HciDrvHandler+0x258>)
   1689a:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   1689c:	4b45      	ldr	r3, [pc, #276]	; (169b4 <HciDrvHandler+0x258>)
   1689e:	681a      	ldr	r2, [r3, #0]
   168a0:	4b43      	ldr	r3, [pc, #268]	; (169b0 <HciDrvHandler+0x254>)
   168a2:	681b      	ldr	r3, [r3, #0]
   168a4:	429a      	cmp	r2, r3
   168a6:	d006      	beq.n	168b6 <HciDrvHandler+0x15a>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   168a8:	4b44      	ldr	r3, [pc, #272]	; (169bc <HciDrvHandler+0x260>)
   168aa:	781b      	ldrb	r3, [r3, #0]
   168ac:	2101      	movs	r1, #1
   168ae:	4618      	mov	r0, r3
   168b0:	f7ff f834 	bl	1591c <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   168b4:	e065      	b.n	16982 <HciDrvHandler+0x226>
                }

                g_ui32NumBytes   = 0;
   168b6:	4b3e      	ldr	r3, [pc, #248]	; (169b0 <HciDrvHandler+0x254>)
   168b8:	2200      	movs	r2, #0
   168ba:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   168bc:	4b3d      	ldr	r3, [pc, #244]	; (169b4 <HciDrvHandler+0x258>)
   168be:	2200      	movs	r2, #0
   168c0:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   168c2:	69fb      	ldr	r3, [r7, #28]
   168c4:	3301      	adds	r3, #1
   168c6:	61fb      	str	r3, [r7, #28]
   168c8:	e00f      	b.n	168ea <HciDrvHandler+0x18e>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   168ca:	693b      	ldr	r3, [r7, #16]
   168cc:	2b00      	cmp	r3, #0
   168ce:	d00c      	beq.n	168ea <HciDrvHandler+0x18e>
   168d0:	6938      	ldr	r0, [r7, #16]
   168d2:	f7ff fd15 	bl	16300 <error_check>
   168d6:	f7ff fe29 	bl	1652c <HciDrvRadioShutdown>
   168da:	2000      	movs	r0, #0
   168dc:	f7ff fd2c 	bl	16338 <HciDrvRadioBoot>
   168e0:	f000 f87e 	bl	169e0 <HciDrvEmptyWriteQueue>
   168e4:	f7f9 f8a2 	bl	fa2c <DmDevReset>
   168e8:	e05d      	b.n	169a6 <HciDrvHandler+0x24a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   168ea:	69fb      	ldr	r3, [r7, #28]
   168ec:	2b03      	cmp	r3, #3
   168ee:	d93e      	bls.n	1696e <HciDrvHandler+0x212>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   168f0:	4b32      	ldr	r3, [pc, #200]	; (169bc <HciDrvHandler+0x260>)
   168f2:	781b      	ldrb	r3, [r3, #0]
   168f4:	2101      	movs	r1, #1
   168f6:	4618      	mov	r0, r3
   168f8:	f7ff f810 	bl	1591c <WsfSetEvent>

                break;
   168fc:	e041      	b.n	16982 <HciDrvHandler+0x226>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   168fe:	4b36      	ldr	r3, [pc, #216]	; (169d8 <HciDrvHandler+0x27c>)
   16900:	689b      	ldr	r3, [r3, #8]
   16902:	2b00      	cmp	r3, #0
   16904:	d03c      	beq.n	16980 <HciDrvHandler+0x224>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   16906:	4b34      	ldr	r3, [pc, #208]	; (169d8 <HciDrvHandler+0x27c>)
   16908:	695a      	ldr	r2, [r3, #20]
   1690a:	4b33      	ldr	r3, [pc, #204]	; (169d8 <HciDrvHandler+0x27c>)
   1690c:	685b      	ldr	r3, [r3, #4]
   1690e:	4413      	add	r3, r2
   16910:	617b      	str	r3, [r7, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   16912:	4b2d      	ldr	r3, [pc, #180]	; (169c8 <HciDrvHandler+0x26c>)
   16914:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   16916:	697b      	ldr	r3, [r7, #20]
   16918:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   1691a:	697b      	ldr	r3, [r7, #20]
   1691c:	681b      	ldr	r3, [r3, #0]
   1691e:	2100      	movs	r1, #0
   16920:	f00b fa5a 	bl	21dd8 <am_hal_ble_blocking_hci_write>
   16924:	6138      	str	r0, [r7, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   16926:	693b      	ldr	r3, [r7, #16]
   16928:	2b00      	cmp	r3, #0
   1692a:	d111      	bne.n	16950 <HciDrvHandler+0x1f4>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   1692c:	481f      	ldr	r0, [pc, #124]	; (169ac <HciDrvHandler+0x250>)
   1692e:	f7fe f83f 	bl	149b0 <WsfTimerStop>
   16932:	f242 7110 	movw	r1, #10000	; 0x2710
   16936:	481d      	ldr	r0, [pc, #116]	; (169ac <HciDrvHandler+0x250>)
   16938:	f7fe f826 	bl	14988 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   1693c:	2201      	movs	r2, #1
   1693e:	2100      	movs	r1, #0
   16940:	4825      	ldr	r0, [pc, #148]	; (169d8 <HciDrvHandler+0x27c>)
   16942:	f00c ff95 	bl	23870 <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   16946:	2300      	movs	r3, #0
   16948:	627b      	str	r3, [r7, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   1694a:	2300      	movs	r3, #0
   1694c:	623b      	str	r3, [r7, #32]
   1694e:	e00e      	b.n	1696e <HciDrvHandler+0x212>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   16950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16952:	3301      	adds	r3, #1
   16954:	627b      	str	r3, [r7, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   16956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16958:	f242 7210 	movw	r2, #10000	; 0x2710
   1695c:	4293      	cmp	r3, r2
   1695e:	d906      	bls.n	1696e <HciDrvHandler+0x212>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   16960:	4b16      	ldr	r3, [pc, #88]	; (169bc <HciDrvHandler+0x260>)
   16962:	781b      	ldrb	r3, [r3, #0]
   16964:	2101      	movs	r1, #1
   16966:	4618      	mov	r0, r3
   16968:	f7fe ffd8 	bl	1591c <WsfSetEvent>
                        break;
   1696c:	e009      	b.n	16982 <HciDrvHandler+0x226>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   1696e:	6a3b      	ldr	r3, [r7, #32]
   16970:	1c5a      	adds	r2, r3, #1
   16972:	623a      	str	r2, [r7, #32]
   16974:	f242 720f 	movw	r2, #9999	; 0x270f
   16978:	4293      	cmp	r3, r2
   1697a:	f67f af39 	bls.w	167f0 <HciDrvHandler+0x94>
   1697e:	e000      	b.n	16982 <HciDrvHandler+0x226>
                break;
   16980:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   16982:	6a3b      	ldr	r3, [r7, #32]
   16984:	f242 7210 	movw	r2, #10000	; 0x2710
   16988:	4293      	cmp	r3, r2
   1698a:	d10c      	bne.n	169a6 <HciDrvHandler+0x24a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   1698c:	4813      	ldr	r0, [pc, #76]	; (169dc <HciDrvHandler+0x280>)
   1698e:	f7ff fcb7 	bl	16300 <error_check>
   16992:	f7ff fdcb 	bl	1652c <HciDrvRadioShutdown>
   16996:	2000      	movs	r0, #0
   16998:	f7ff fcce 	bl	16338 <HciDrvRadioBoot>
   1699c:	f000 f820 	bl	169e0 <HciDrvEmptyWriteQueue>
   169a0:	f7f9 f844 	bl	fa2c <DmDevReset>
   169a4:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   169a6:	3728      	adds	r7, #40	; 0x28
   169a8:	46bd      	mov	sp, r7
   169aa:	bd80      	pop	{r7, pc}
   169ac:	1000a704 	.word	0x1000a704
   169b0:	10005258 	.word	0x10005258
   169b4:	1000525c 	.word	0x1000525c
   169b8:	10002be0 	.word	0x10002be0
   169bc:	10005254 	.word	0x10005254
   169c0:	5000c000 	.word	0x5000c000
   169c4:	10005260 	.word	0x10005260
   169c8:	1000b034 	.word	0x1000b034
   169cc:	1000a714 	.word	0x1000a714
   169d0:	09000002 	.word	0x09000002
   169d4:	00024bbc 	.word	0x00024bbc
   169d8:	1000a6ec 	.word	0x1000a6ec
   169dc:	09000006 	.word	0x09000006

000169e0 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   169e0:	b580      	push	{r7, lr}
   169e2:	af00      	add	r7, sp, #0
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   169e4:	f44f 6302 	mov.w	r3, #2080	; 0x820
   169e8:	f44f 7282 	mov.w	r2, #260	; 0x104
   169ec:	4902      	ldr	r1, [pc, #8]	; (169f8 <HciDrvEmptyWriteQueue+0x18>)
   169ee:	4803      	ldr	r0, [pc, #12]	; (169fc <HciDrvEmptyWriteQueue+0x1c>)
   169f0:	f00c fefa 	bl	237e8 <am_hal_queue_init>
}
   169f4:	bf00      	nop
   169f6:	bd80      	pop	{r7, pc}
   169f8:	1000a814 	.word	0x1000a814
   169fc:	1000a6ec 	.word	0x1000a6ec

00016a00 <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   16a00:	b580      	push	{r7, lr}
   16a02:	b084      	sub	sp, #16
   16a04:	af00      	add	r7, sp, #0
   16a06:	4603      	mov	r3, r0
   16a08:	460a      	mov	r2, r1
   16a0a:	80fb      	strh	r3, [r7, #6]
   16a0c:	4613      	mov	r3, r2
   16a0e:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16a10:	88bb      	ldrh	r3, [r7, #4]
   16a12:	3303      	adds	r3, #3
   16a14:	b29b      	uxth	r3, r3
   16a16:	4618      	mov	r0, r3
   16a18:	f7fd fdeb 	bl	145f2 <WsfMsgAlloc>
   16a1c:	60f8      	str	r0, [r7, #12]
   16a1e:	68fb      	ldr	r3, [r7, #12]
   16a20:	2b00      	cmp	r3, #0
   16a22:	d016      	beq.n	16a52 <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   16a24:	68fb      	ldr	r3, [r7, #12]
   16a26:	1c5a      	adds	r2, r3, #1
   16a28:	60fa      	str	r2, [r7, #12]
   16a2a:	88fa      	ldrh	r2, [r7, #6]
   16a2c:	b2d2      	uxtb	r2, r2
   16a2e:	701a      	strb	r2, [r3, #0]
   16a30:	68fb      	ldr	r3, [r7, #12]
   16a32:	1c5a      	adds	r2, r3, #1
   16a34:	60fa      	str	r2, [r7, #12]
   16a36:	88fa      	ldrh	r2, [r7, #6]
   16a38:	0a12      	lsrs	r2, r2, #8
   16a3a:	b292      	uxth	r2, r2
   16a3c:	b2d2      	uxtb	r2, r2
   16a3e:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   16a40:	68fb      	ldr	r3, [r7, #12]
   16a42:	1c5a      	adds	r2, r3, #1
   16a44:	60fa      	str	r2, [r7, #12]
   16a46:	88ba      	ldrh	r2, [r7, #4]
   16a48:	b2d2      	uxtb	r2, r2
   16a4a:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   16a4c:	68fb      	ldr	r3, [r7, #12]
   16a4e:	3b03      	subs	r3, #3
   16a50:	60fb      	str	r3, [r7, #12]
  }

  return p;
   16a52:	68fb      	ldr	r3, [r7, #12]
}
   16a54:	4618      	mov	r0, r3
   16a56:	3710      	adds	r7, #16
   16a58:	46bd      	mov	sp, r7
   16a5a:	bd80      	pop	{r7, pc}

00016a5c <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   16a5c:	b580      	push	{r7, lr}
   16a5e:	b084      	sub	sp, #16
   16a60:	af00      	add	r7, sp, #0
   16a62:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   16a64:	687b      	ldr	r3, [r7, #4]
   16a66:	2b00      	cmp	r3, #0
   16a68:	d004      	beq.n	16a74 <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16a6a:	687a      	ldr	r2, [r7, #4]
   16a6c:	2100      	movs	r1, #0
   16a6e:	4817      	ldr	r0, [pc, #92]	; (16acc <hciCmdSend+0x70>)
   16a70:	f7fd fdfb 	bl	1466a <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   16a74:	4b16      	ldr	r3, [pc, #88]	; (16ad0 <hciCmdSend+0x74>)
   16a76:	7e9b      	ldrb	r3, [r3, #26]
   16a78:	2b00      	cmp	r3, #0
   16a7a:	d023      	beq.n	16ac4 <hciCmdSend+0x68>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16a7c:	f107 030b 	add.w	r3, r7, #11
   16a80:	4619      	mov	r1, r3
   16a82:	4812      	ldr	r0, [pc, #72]	; (16acc <hciCmdSend+0x70>)
   16a84:	f7fd fe06 	bl	14694 <WsfMsgDeq>
   16a88:	60f8      	str	r0, [r7, #12]
   16a8a:	68fb      	ldr	r3, [r7, #12]
   16a8c:	2b00      	cmp	r3, #0
   16a8e:	d019      	beq.n	16ac4 <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   16a90:	4b0f      	ldr	r3, [pc, #60]	; (16ad0 <hciCmdSend+0x74>)
   16a92:	7e9b      	ldrb	r3, [r3, #26]
   16a94:	3b01      	subs	r3, #1
   16a96:	b2da      	uxtb	r2, r3
   16a98:	4b0d      	ldr	r3, [pc, #52]	; (16ad0 <hciCmdSend+0x74>)
   16a9a:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16a9c:	68fb      	ldr	r3, [r7, #12]
   16a9e:	781b      	ldrb	r3, [r3, #0]
   16aa0:	b29a      	uxth	r2, r3
   16aa2:	68fb      	ldr	r3, [r7, #12]
   16aa4:	3301      	adds	r3, #1
   16aa6:	781b      	ldrb	r3, [r3, #0]
   16aa8:	b29b      	uxth	r3, r3
   16aaa:	021b      	lsls	r3, r3, #8
   16aac:	b29b      	uxth	r3, r3
   16aae:	4413      	add	r3, r2
   16ab0:	b29a      	uxth	r2, r3
   16ab2:	4b07      	ldr	r3, [pc, #28]	; (16ad0 <hciCmdSend+0x74>)
   16ab4:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16ab6:	210a      	movs	r1, #10
   16ab8:	4805      	ldr	r0, [pc, #20]	; (16ad0 <hciCmdSend+0x74>)
   16aba:	f7fd ff53 	bl	14964 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   16abe:	68f8      	ldr	r0, [r7, #12]
   16ac0:	f003 fbf9 	bl	1a2b6 <hciTrSendCmd>
    }
  }
}
   16ac4:	bf00      	nop
   16ac6:	3710      	adds	r7, #16
   16ac8:	46bd      	mov	sp, r7
   16aca:	bd80      	pop	{r7, pc}
   16acc:	1000b058 	.word	0x1000b058
   16ad0:	1000b048 	.word	0x1000b048

00016ad4 <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
   16ad4:	b480      	push	{r7}
   16ad6:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   16ad8:	4b0a      	ldr	r3, [pc, #40]	; (16b04 <hciCmdInit+0x30>)
   16ada:	2200      	movs	r2, #0
   16adc:	611a      	str	r2, [r3, #16]
   16ade:	4b09      	ldr	r3, [pc, #36]	; (16b04 <hciCmdInit+0x30>)
   16ae0:	2200      	movs	r2, #0
   16ae2:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   16ae4:	4b07      	ldr	r3, [pc, #28]	; (16b04 <hciCmdInit+0x30>)
   16ae6:	2201      	movs	r2, #1
   16ae8:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   16aea:	4b06      	ldr	r3, [pc, #24]	; (16b04 <hciCmdInit+0x30>)
   16aec:	2201      	movs	r2, #1
   16aee:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   16af0:	4b05      	ldr	r3, [pc, #20]	; (16b08 <hciCmdInit+0x34>)
   16af2:	7e1a      	ldrb	r2, [r3, #24]
   16af4:	4b03      	ldr	r3, [pc, #12]	; (16b04 <hciCmdInit+0x30>)
   16af6:	721a      	strb	r2, [r3, #8]
}
   16af8:	bf00      	nop
   16afa:	46bd      	mov	sp, r7
   16afc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b00:	4770      	bx	lr
   16b02:	bf00      	nop
   16b04:	1000b048 	.word	0x1000b048
   16b08:	1000a694 	.word	0x1000a694

00016b0c <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   16b0c:	b580      	push	{r7, lr}
   16b0e:	b082      	sub	sp, #8
   16b10:	af00      	add	r7, sp, #0
   16b12:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   16b14:	f7ff fd0a 	bl	1652c <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   16b18:	2000      	movs	r0, #0
   16b1a:	f7ff fc0d 	bl	16338 <HciDrvRadioBoot>
  DmDevReset();
   16b1e:	f7f8 ff85 	bl	fa2c <DmDevReset>
}
   16b22:	bf00      	nop
   16b24:	3708      	adds	r7, #8
   16b26:	46bd      	mov	sp, r7
   16b28:	bd80      	pop	{r7, pc}
	...

00016b2c <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   16b2c:	b580      	push	{r7, lr}
   16b2e:	b082      	sub	sp, #8
   16b30:	af00      	add	r7, sp, #0
   16b32:	4603      	mov	r3, r0
   16b34:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   16b36:	4806      	ldr	r0, [pc, #24]	; (16b50 <hciCmdRecvCmpl+0x24>)
   16b38:	f7fd ff3a 	bl	149b0 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   16b3c:	4b04      	ldr	r3, [pc, #16]	; (16b50 <hciCmdRecvCmpl+0x24>)
   16b3e:	2201      	movs	r2, #1
   16b40:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   16b42:	2000      	movs	r0, #0
   16b44:	f7ff ff8a 	bl	16a5c <hciCmdSend>
}
   16b48:	bf00      	nop
   16b4a:	3708      	adds	r7, #8
   16b4c:	46bd      	mov	sp, r7
   16b4e:	bd80      	pop	{r7, pc}
   16b50:	1000b048 	.word	0x1000b048

00016b54 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   16b54:	b580      	push	{r7, lr}
   16b56:	b084      	sub	sp, #16
   16b58:	af00      	add	r7, sp, #0
   16b5a:	4603      	mov	r3, r0
   16b5c:	460a      	mov	r2, r1
   16b5e:	80fb      	strh	r3, [r7, #6]
   16b60:	4613      	mov	r3, r2
   16b62:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   16b64:	2103      	movs	r1, #3
   16b66:	f240 4006 	movw	r0, #1030	; 0x406
   16b6a:	f7ff ff49 	bl	16a00 <hciCmdAlloc>
   16b6e:	60f8      	str	r0, [r7, #12]
   16b70:	68fb      	ldr	r3, [r7, #12]
   16b72:	2b00      	cmp	r3, #0
   16b74:	d018      	beq.n	16ba8 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16b76:	68fb      	ldr	r3, [r7, #12]
   16b78:	3303      	adds	r3, #3
   16b7a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   16b7c:	68bb      	ldr	r3, [r7, #8]
   16b7e:	1c5a      	adds	r2, r3, #1
   16b80:	60ba      	str	r2, [r7, #8]
   16b82:	88fa      	ldrh	r2, [r7, #6]
   16b84:	b2d2      	uxtb	r2, r2
   16b86:	701a      	strb	r2, [r3, #0]
   16b88:	68bb      	ldr	r3, [r7, #8]
   16b8a:	1c5a      	adds	r2, r3, #1
   16b8c:	60ba      	str	r2, [r7, #8]
   16b8e:	88fa      	ldrh	r2, [r7, #6]
   16b90:	0a12      	lsrs	r2, r2, #8
   16b92:	b292      	uxth	r2, r2
   16b94:	b2d2      	uxtb	r2, r2
   16b96:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   16b98:	68bb      	ldr	r3, [r7, #8]
   16b9a:	1c5a      	adds	r2, r3, #1
   16b9c:	60ba      	str	r2, [r7, #8]
   16b9e:	797a      	ldrb	r2, [r7, #5]
   16ba0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16ba2:	68f8      	ldr	r0, [r7, #12]
   16ba4:	f7ff ff5a 	bl	16a5c <hciCmdSend>
  }
}
   16ba8:	bf00      	nop
   16baa:	3710      	adds	r7, #16
   16bac:	46bd      	mov	sp, r7
   16bae:	bd80      	pop	{r7, pc}

00016bb0 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   16bb0:	b580      	push	{r7, lr}
   16bb2:	b084      	sub	sp, #16
   16bb4:	af00      	add	r7, sp, #0
   16bb6:	4603      	mov	r3, r0
   16bb8:	6039      	str	r1, [r7, #0]
   16bba:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   16bbc:	2107      	movs	r1, #7
   16bbe:	f242 0011 	movw	r0, #8209	; 0x2011
   16bc2:	f7ff ff1d 	bl	16a00 <hciCmdAlloc>
   16bc6:	60f8      	str	r0, [r7, #12]
   16bc8:	68fb      	ldr	r3, [r7, #12]
   16bca:	2b00      	cmp	r3, #0
   16bcc:	d011      	beq.n	16bf2 <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16bce:	68fb      	ldr	r3, [r7, #12]
   16bd0:	3303      	adds	r3, #3
   16bd2:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   16bd4:	68bb      	ldr	r3, [r7, #8]
   16bd6:	1c5a      	adds	r2, r3, #1
   16bd8:	60ba      	str	r2, [r7, #8]
   16bda:	79fa      	ldrb	r2, [r7, #7]
   16bdc:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   16bde:	6839      	ldr	r1, [r7, #0]
   16be0:	68b8      	ldr	r0, [r7, #8]
   16be2:	f7fd f859 	bl	13c98 <BdaCpy>
   16be6:	68bb      	ldr	r3, [r7, #8]
   16be8:	3306      	adds	r3, #6
   16bea:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   16bec:	68f8      	ldr	r0, [r7, #12]
   16bee:	f7ff ff35 	bl	16a5c <hciCmdSend>
  }
}
   16bf2:	bf00      	nop
   16bf4:	3710      	adds	r7, #16
   16bf6:	46bd      	mov	sp, r7
   16bf8:	bd80      	pop	{r7, pc}

00016bfa <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   16bfa:	b580      	push	{r7, lr}
   16bfc:	b082      	sub	sp, #8
   16bfe:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   16c00:	2100      	movs	r1, #0
   16c02:	f242 0010 	movw	r0, #8208	; 0x2010
   16c06:	f7ff fefb 	bl	16a00 <hciCmdAlloc>
   16c0a:	6078      	str	r0, [r7, #4]
   16c0c:	687b      	ldr	r3, [r7, #4]
   16c0e:	2b00      	cmp	r3, #0
   16c10:	d002      	beq.n	16c18 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
   16c12:	6878      	ldr	r0, [r7, #4]
   16c14:	f7ff ff22 	bl	16a5c <hciCmdSend>
  }
}
   16c18:	bf00      	nop
   16c1a:	3708      	adds	r7, #8
   16c1c:	46bd      	mov	sp, r7
   16c1e:	bd80      	pop	{r7, pc}

00016c20 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   16c20:	b580      	push	{r7, lr}
   16c22:	b084      	sub	sp, #16
   16c24:	af00      	add	r7, sp, #0
   16c26:	4603      	mov	r3, r0
   16c28:	6039      	str	r1, [r7, #0]
   16c2a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   16c2c:	210e      	movs	r1, #14
   16c2e:	f242 0013 	movw	r0, #8211	; 0x2013
   16c32:	f7ff fee5 	bl	16a00 <hciCmdAlloc>
   16c36:	60f8      	str	r0, [r7, #12]
   16c38:	68fb      	ldr	r3, [r7, #12]
   16c3a:	2b00      	cmp	r3, #0
   16c3c:	d073      	beq.n	16d26 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16c3e:	68fb      	ldr	r3, [r7, #12]
   16c40:	3303      	adds	r3, #3
   16c42:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   16c44:	68bb      	ldr	r3, [r7, #8]
   16c46:	1c5a      	adds	r2, r3, #1
   16c48:	60ba      	str	r2, [r7, #8]
   16c4a:	88fa      	ldrh	r2, [r7, #6]
   16c4c:	b2d2      	uxtb	r2, r2
   16c4e:	701a      	strb	r2, [r3, #0]
   16c50:	68bb      	ldr	r3, [r7, #8]
   16c52:	1c5a      	adds	r2, r3, #1
   16c54:	60ba      	str	r2, [r7, #8]
   16c56:	88fa      	ldrh	r2, [r7, #6]
   16c58:	0a12      	lsrs	r2, r2, #8
   16c5a:	b292      	uxth	r2, r2
   16c5c:	b2d2      	uxtb	r2, r2
   16c5e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   16c60:	68bb      	ldr	r3, [r7, #8]
   16c62:	1c5a      	adds	r2, r3, #1
   16c64:	60ba      	str	r2, [r7, #8]
   16c66:	683a      	ldr	r2, [r7, #0]
   16c68:	8812      	ldrh	r2, [r2, #0]
   16c6a:	b2d2      	uxtb	r2, r2
   16c6c:	701a      	strb	r2, [r3, #0]
   16c6e:	68bb      	ldr	r3, [r7, #8]
   16c70:	1c5a      	adds	r2, r3, #1
   16c72:	60ba      	str	r2, [r7, #8]
   16c74:	683a      	ldr	r2, [r7, #0]
   16c76:	8812      	ldrh	r2, [r2, #0]
   16c78:	0a12      	lsrs	r2, r2, #8
   16c7a:	b292      	uxth	r2, r2
   16c7c:	b2d2      	uxtb	r2, r2
   16c7e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   16c80:	68bb      	ldr	r3, [r7, #8]
   16c82:	1c5a      	adds	r2, r3, #1
   16c84:	60ba      	str	r2, [r7, #8]
   16c86:	683a      	ldr	r2, [r7, #0]
   16c88:	8852      	ldrh	r2, [r2, #2]
   16c8a:	b2d2      	uxtb	r2, r2
   16c8c:	701a      	strb	r2, [r3, #0]
   16c8e:	68bb      	ldr	r3, [r7, #8]
   16c90:	1c5a      	adds	r2, r3, #1
   16c92:	60ba      	str	r2, [r7, #8]
   16c94:	683a      	ldr	r2, [r7, #0]
   16c96:	8852      	ldrh	r2, [r2, #2]
   16c98:	0a12      	lsrs	r2, r2, #8
   16c9a:	b292      	uxth	r2, r2
   16c9c:	b2d2      	uxtb	r2, r2
   16c9e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   16ca0:	68bb      	ldr	r3, [r7, #8]
   16ca2:	1c5a      	adds	r2, r3, #1
   16ca4:	60ba      	str	r2, [r7, #8]
   16ca6:	683a      	ldr	r2, [r7, #0]
   16ca8:	8892      	ldrh	r2, [r2, #4]
   16caa:	b2d2      	uxtb	r2, r2
   16cac:	701a      	strb	r2, [r3, #0]
   16cae:	68bb      	ldr	r3, [r7, #8]
   16cb0:	1c5a      	adds	r2, r3, #1
   16cb2:	60ba      	str	r2, [r7, #8]
   16cb4:	683a      	ldr	r2, [r7, #0]
   16cb6:	8892      	ldrh	r2, [r2, #4]
   16cb8:	0a12      	lsrs	r2, r2, #8
   16cba:	b292      	uxth	r2, r2
   16cbc:	b2d2      	uxtb	r2, r2
   16cbe:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   16cc0:	68bb      	ldr	r3, [r7, #8]
   16cc2:	1c5a      	adds	r2, r3, #1
   16cc4:	60ba      	str	r2, [r7, #8]
   16cc6:	683a      	ldr	r2, [r7, #0]
   16cc8:	88d2      	ldrh	r2, [r2, #6]
   16cca:	b2d2      	uxtb	r2, r2
   16ccc:	701a      	strb	r2, [r3, #0]
   16cce:	68bb      	ldr	r3, [r7, #8]
   16cd0:	1c5a      	adds	r2, r3, #1
   16cd2:	60ba      	str	r2, [r7, #8]
   16cd4:	683a      	ldr	r2, [r7, #0]
   16cd6:	88d2      	ldrh	r2, [r2, #6]
   16cd8:	0a12      	lsrs	r2, r2, #8
   16cda:	b292      	uxth	r2, r2
   16cdc:	b2d2      	uxtb	r2, r2
   16cde:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   16ce0:	68bb      	ldr	r3, [r7, #8]
   16ce2:	1c5a      	adds	r2, r3, #1
   16ce4:	60ba      	str	r2, [r7, #8]
   16ce6:	683a      	ldr	r2, [r7, #0]
   16ce8:	8912      	ldrh	r2, [r2, #8]
   16cea:	b2d2      	uxtb	r2, r2
   16cec:	701a      	strb	r2, [r3, #0]
   16cee:	68bb      	ldr	r3, [r7, #8]
   16cf0:	1c5a      	adds	r2, r3, #1
   16cf2:	60ba      	str	r2, [r7, #8]
   16cf4:	683a      	ldr	r2, [r7, #0]
   16cf6:	8912      	ldrh	r2, [r2, #8]
   16cf8:	0a12      	lsrs	r2, r2, #8
   16cfa:	b292      	uxth	r2, r2
   16cfc:	b2d2      	uxtb	r2, r2
   16cfe:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   16d00:	68bb      	ldr	r3, [r7, #8]
   16d02:	1c5a      	adds	r2, r3, #1
   16d04:	60ba      	str	r2, [r7, #8]
   16d06:	683a      	ldr	r2, [r7, #0]
   16d08:	8952      	ldrh	r2, [r2, #10]
   16d0a:	b2d2      	uxtb	r2, r2
   16d0c:	701a      	strb	r2, [r3, #0]
   16d0e:	68bb      	ldr	r3, [r7, #8]
   16d10:	1c5a      	adds	r2, r3, #1
   16d12:	60ba      	str	r2, [r7, #8]
   16d14:	683a      	ldr	r2, [r7, #0]
   16d16:	8952      	ldrh	r2, [r2, #10]
   16d18:	0a12      	lsrs	r2, r2, #8
   16d1a:	b292      	uxth	r2, r2
   16d1c:	b2d2      	uxtb	r2, r2
   16d1e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16d20:	68f8      	ldr	r0, [r7, #12]
   16d22:	f7ff fe9b 	bl	16a5c <hciCmdSend>
  }
}
   16d26:	bf00      	nop
   16d28:	3710      	adds	r7, #16
   16d2a:	46bd      	mov	sp, r7
   16d2c:	bd80      	pop	{r7, pc}

00016d2e <HciLeCreateConnCmd>:
 */
/*************************************************************************************************/
void HciLeCreateConnCmd(uint16_t scanInterval, uint16_t scanWindow, uint8_t filterPolicy,
                        uint8_t peerAddrType, uint8_t *pPeerAddr, uint8_t ownAddrType,
                        hciConnSpec_t *pConnSpec)
{
   16d2e:	b590      	push	{r4, r7, lr}
   16d30:	b085      	sub	sp, #20
   16d32:	af00      	add	r7, sp, #0
   16d34:	4604      	mov	r4, r0
   16d36:	4608      	mov	r0, r1
   16d38:	4611      	mov	r1, r2
   16d3a:	461a      	mov	r2, r3
   16d3c:	4623      	mov	r3, r4
   16d3e:	80fb      	strh	r3, [r7, #6]
   16d40:	4603      	mov	r3, r0
   16d42:	80bb      	strh	r3, [r7, #4]
   16d44:	460b      	mov	r3, r1
   16d46:	70fb      	strb	r3, [r7, #3]
   16d48:	4613      	mov	r3, r2
   16d4a:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN, HCI_LEN_LE_CREATE_CONN)) != NULL)
   16d4c:	2119      	movs	r1, #25
   16d4e:	f242 000d 	movw	r0, #8205	; 0x200d
   16d52:	f7ff fe55 	bl	16a00 <hciCmdAlloc>
   16d56:	60f8      	str	r0, [r7, #12]
   16d58:	68fb      	ldr	r3, [r7, #12]
   16d5a:	2b00      	cmp	r3, #0
   16d5c:	f000 8099 	beq.w	16e92 <HciLeCreateConnCmd+0x164>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16d60:	68fb      	ldr	r3, [r7, #12]
   16d62:	3303      	adds	r3, #3
   16d64:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, scanInterval);
   16d66:	68bb      	ldr	r3, [r7, #8]
   16d68:	1c5a      	adds	r2, r3, #1
   16d6a:	60ba      	str	r2, [r7, #8]
   16d6c:	88fa      	ldrh	r2, [r7, #6]
   16d6e:	b2d2      	uxtb	r2, r2
   16d70:	701a      	strb	r2, [r3, #0]
   16d72:	68bb      	ldr	r3, [r7, #8]
   16d74:	1c5a      	adds	r2, r3, #1
   16d76:	60ba      	str	r2, [r7, #8]
   16d78:	88fa      	ldrh	r2, [r7, #6]
   16d7a:	0a12      	lsrs	r2, r2, #8
   16d7c:	b292      	uxth	r2, r2
   16d7e:	b2d2      	uxtb	r2, r2
   16d80:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, scanWindow);
   16d82:	68bb      	ldr	r3, [r7, #8]
   16d84:	1c5a      	adds	r2, r3, #1
   16d86:	60ba      	str	r2, [r7, #8]
   16d88:	88ba      	ldrh	r2, [r7, #4]
   16d8a:	b2d2      	uxtb	r2, r2
   16d8c:	701a      	strb	r2, [r3, #0]
   16d8e:	68bb      	ldr	r3, [r7, #8]
   16d90:	1c5a      	adds	r2, r3, #1
   16d92:	60ba      	str	r2, [r7, #8]
   16d94:	88ba      	ldrh	r2, [r7, #4]
   16d96:	0a12      	lsrs	r2, r2, #8
   16d98:	b292      	uxth	r2, r2
   16d9a:	b2d2      	uxtb	r2, r2
   16d9c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, filterPolicy);
   16d9e:	68bb      	ldr	r3, [r7, #8]
   16da0:	1c5a      	adds	r2, r3, #1
   16da2:	60ba      	str	r2, [r7, #8]
   16da4:	78fa      	ldrb	r2, [r7, #3]
   16da6:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   16da8:	68bb      	ldr	r3, [r7, #8]
   16daa:	1c5a      	adds	r2, r3, #1
   16dac:	60ba      	str	r2, [r7, #8]
   16dae:	78ba      	ldrb	r2, [r7, #2]
   16db0:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerAddr);
   16db2:	6a39      	ldr	r1, [r7, #32]
   16db4:	68b8      	ldr	r0, [r7, #8]
   16db6:	f7fc ff6f 	bl	13c98 <BdaCpy>
   16dba:	68bb      	ldr	r3, [r7, #8]
   16dbc:	3306      	adds	r3, #6
   16dbe:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, ownAddrType);
   16dc0:	68bb      	ldr	r3, [r7, #8]
   16dc2:	1c5a      	adds	r2, r3, #1
   16dc4:	60ba      	str	r2, [r7, #8]
   16dc6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   16dca:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   16dcc:	68bb      	ldr	r3, [r7, #8]
   16dce:	1c5a      	adds	r2, r3, #1
   16dd0:	60ba      	str	r2, [r7, #8]
   16dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16dd4:	8812      	ldrh	r2, [r2, #0]
   16dd6:	b2d2      	uxtb	r2, r2
   16dd8:	701a      	strb	r2, [r3, #0]
   16dda:	68bb      	ldr	r3, [r7, #8]
   16ddc:	1c5a      	adds	r2, r3, #1
   16dde:	60ba      	str	r2, [r7, #8]
   16de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16de2:	8812      	ldrh	r2, [r2, #0]
   16de4:	0a12      	lsrs	r2, r2, #8
   16de6:	b292      	uxth	r2, r2
   16de8:	b2d2      	uxtb	r2, r2
   16dea:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   16dec:	68bb      	ldr	r3, [r7, #8]
   16dee:	1c5a      	adds	r2, r3, #1
   16df0:	60ba      	str	r2, [r7, #8]
   16df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16df4:	8852      	ldrh	r2, [r2, #2]
   16df6:	b2d2      	uxtb	r2, r2
   16df8:	701a      	strb	r2, [r3, #0]
   16dfa:	68bb      	ldr	r3, [r7, #8]
   16dfc:	1c5a      	adds	r2, r3, #1
   16dfe:	60ba      	str	r2, [r7, #8]
   16e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e02:	8852      	ldrh	r2, [r2, #2]
   16e04:	0a12      	lsrs	r2, r2, #8
   16e06:	b292      	uxth	r2, r2
   16e08:	b2d2      	uxtb	r2, r2
   16e0a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   16e0c:	68bb      	ldr	r3, [r7, #8]
   16e0e:	1c5a      	adds	r2, r3, #1
   16e10:	60ba      	str	r2, [r7, #8]
   16e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e14:	8892      	ldrh	r2, [r2, #4]
   16e16:	b2d2      	uxtb	r2, r2
   16e18:	701a      	strb	r2, [r3, #0]
   16e1a:	68bb      	ldr	r3, [r7, #8]
   16e1c:	1c5a      	adds	r2, r3, #1
   16e1e:	60ba      	str	r2, [r7, #8]
   16e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e22:	8892      	ldrh	r2, [r2, #4]
   16e24:	0a12      	lsrs	r2, r2, #8
   16e26:	b292      	uxth	r2, r2
   16e28:	b2d2      	uxtb	r2, r2
   16e2a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   16e2c:	68bb      	ldr	r3, [r7, #8]
   16e2e:	1c5a      	adds	r2, r3, #1
   16e30:	60ba      	str	r2, [r7, #8]
   16e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e34:	88d2      	ldrh	r2, [r2, #6]
   16e36:	b2d2      	uxtb	r2, r2
   16e38:	701a      	strb	r2, [r3, #0]
   16e3a:	68bb      	ldr	r3, [r7, #8]
   16e3c:	1c5a      	adds	r2, r3, #1
   16e3e:	60ba      	str	r2, [r7, #8]
   16e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e42:	88d2      	ldrh	r2, [r2, #6]
   16e44:	0a12      	lsrs	r2, r2, #8
   16e46:	b292      	uxth	r2, r2
   16e48:	b2d2      	uxtb	r2, r2
   16e4a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   16e4c:	68bb      	ldr	r3, [r7, #8]
   16e4e:	1c5a      	adds	r2, r3, #1
   16e50:	60ba      	str	r2, [r7, #8]
   16e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e54:	8912      	ldrh	r2, [r2, #8]
   16e56:	b2d2      	uxtb	r2, r2
   16e58:	701a      	strb	r2, [r3, #0]
   16e5a:	68bb      	ldr	r3, [r7, #8]
   16e5c:	1c5a      	adds	r2, r3, #1
   16e5e:	60ba      	str	r2, [r7, #8]
   16e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e62:	8912      	ldrh	r2, [r2, #8]
   16e64:	0a12      	lsrs	r2, r2, #8
   16e66:	b292      	uxth	r2, r2
   16e68:	b2d2      	uxtb	r2, r2
   16e6a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   16e6c:	68bb      	ldr	r3, [r7, #8]
   16e6e:	1c5a      	adds	r2, r3, #1
   16e70:	60ba      	str	r2, [r7, #8]
   16e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e74:	8952      	ldrh	r2, [r2, #10]
   16e76:	b2d2      	uxtb	r2, r2
   16e78:	701a      	strb	r2, [r3, #0]
   16e7a:	68bb      	ldr	r3, [r7, #8]
   16e7c:	1c5a      	adds	r2, r3, #1
   16e7e:	60ba      	str	r2, [r7, #8]
   16e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e82:	8952      	ldrh	r2, [r2, #10]
   16e84:	0a12      	lsrs	r2, r2, #8
   16e86:	b292      	uxth	r2, r2
   16e88:	b2d2      	uxtb	r2, r2
   16e8a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16e8c:	68f8      	ldr	r0, [r7, #12]
   16e8e:	f7ff fde5 	bl	16a5c <hciCmdSend>
  }
}
   16e92:	bf00      	nop
   16e94:	3714      	adds	r7, #20
   16e96:	46bd      	mov	sp, r7
   16e98:	bd90      	pop	{r4, r7, pc}

00016e9a <HciLeCreateConnCancelCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeCreateConnCancelCmd(void)
{
   16e9a:	b580      	push	{r7, lr}
   16e9c:	b082      	sub	sp, #8
   16e9e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN_CANCEL, HCI_LEN_LE_CREATE_CONN_CANCEL)) != NULL)
   16ea0:	2100      	movs	r1, #0
   16ea2:	f242 000e 	movw	r0, #8206	; 0x200e
   16ea6:	f7ff fdab 	bl	16a00 <hciCmdAlloc>
   16eaa:	6078      	str	r0, [r7, #4]
   16eac:	687b      	ldr	r3, [r7, #4]
   16eae:	2b00      	cmp	r3, #0
   16eb0:	d002      	beq.n	16eb8 <HciLeCreateConnCancelCmd+0x1e>
  {
    hciCmdSend(pBuf);
   16eb2:	6878      	ldr	r0, [r7, #4]
   16eb4:	f7ff fdd2 	bl	16a5c <hciCmdSend>
  }
}
   16eb8:	bf00      	nop
   16eba:	3708      	adds	r7, #8
   16ebc:	46bd      	mov	sp, r7
   16ebe:	bd80      	pop	{r7, pc}

00016ec0 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   16ec0:	b590      	push	{r4, r7, lr}
   16ec2:	b085      	sub	sp, #20
   16ec4:	af00      	add	r7, sp, #0
   16ec6:	4604      	mov	r4, r0
   16ec8:	4608      	mov	r0, r1
   16eca:	4611      	mov	r1, r2
   16ecc:	461a      	mov	r2, r3
   16ece:	4623      	mov	r3, r4
   16ed0:	80fb      	strh	r3, [r7, #6]
   16ed2:	4603      	mov	r3, r0
   16ed4:	80bb      	strh	r3, [r7, #4]
   16ed6:	460b      	mov	r3, r1
   16ed8:	807b      	strh	r3, [r7, #2]
   16eda:	4613      	mov	r3, r2
   16edc:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   16ede:	210e      	movs	r1, #14
   16ee0:	f242 0020 	movw	r0, #8224	; 0x2020
   16ee4:	f7ff fd8c 	bl	16a00 <hciCmdAlloc>
   16ee8:	60f8      	str	r0, [r7, #12]
   16eea:	68fb      	ldr	r3, [r7, #12]
   16eec:	2b00      	cmp	r3, #0
   16eee:	d067      	beq.n	16fc0 <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16ef0:	68fb      	ldr	r3, [r7, #12]
   16ef2:	3303      	adds	r3, #3
   16ef4:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   16ef6:	68bb      	ldr	r3, [r7, #8]
   16ef8:	1c5a      	adds	r2, r3, #1
   16efa:	60ba      	str	r2, [r7, #8]
   16efc:	88fa      	ldrh	r2, [r7, #6]
   16efe:	b2d2      	uxtb	r2, r2
   16f00:	701a      	strb	r2, [r3, #0]
   16f02:	68bb      	ldr	r3, [r7, #8]
   16f04:	1c5a      	adds	r2, r3, #1
   16f06:	60ba      	str	r2, [r7, #8]
   16f08:	88fa      	ldrh	r2, [r7, #6]
   16f0a:	0a12      	lsrs	r2, r2, #8
   16f0c:	b292      	uxth	r2, r2
   16f0e:	b2d2      	uxtb	r2, r2
   16f10:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   16f12:	68bb      	ldr	r3, [r7, #8]
   16f14:	1c5a      	adds	r2, r3, #1
   16f16:	60ba      	str	r2, [r7, #8]
   16f18:	88ba      	ldrh	r2, [r7, #4]
   16f1a:	b2d2      	uxtb	r2, r2
   16f1c:	701a      	strb	r2, [r3, #0]
   16f1e:	68bb      	ldr	r3, [r7, #8]
   16f20:	1c5a      	adds	r2, r3, #1
   16f22:	60ba      	str	r2, [r7, #8]
   16f24:	88ba      	ldrh	r2, [r7, #4]
   16f26:	0a12      	lsrs	r2, r2, #8
   16f28:	b292      	uxth	r2, r2
   16f2a:	b2d2      	uxtb	r2, r2
   16f2c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   16f2e:	68bb      	ldr	r3, [r7, #8]
   16f30:	1c5a      	adds	r2, r3, #1
   16f32:	60ba      	str	r2, [r7, #8]
   16f34:	887a      	ldrh	r2, [r7, #2]
   16f36:	b2d2      	uxtb	r2, r2
   16f38:	701a      	strb	r2, [r3, #0]
   16f3a:	68bb      	ldr	r3, [r7, #8]
   16f3c:	1c5a      	adds	r2, r3, #1
   16f3e:	60ba      	str	r2, [r7, #8]
   16f40:	887a      	ldrh	r2, [r7, #2]
   16f42:	0a12      	lsrs	r2, r2, #8
   16f44:	b292      	uxth	r2, r2
   16f46:	b2d2      	uxtb	r2, r2
   16f48:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   16f4a:	68bb      	ldr	r3, [r7, #8]
   16f4c:	1c5a      	adds	r2, r3, #1
   16f4e:	60ba      	str	r2, [r7, #8]
   16f50:	883a      	ldrh	r2, [r7, #0]
   16f52:	b2d2      	uxtb	r2, r2
   16f54:	701a      	strb	r2, [r3, #0]
   16f56:	68bb      	ldr	r3, [r7, #8]
   16f58:	1c5a      	adds	r2, r3, #1
   16f5a:	60ba      	str	r2, [r7, #8]
   16f5c:	883a      	ldrh	r2, [r7, #0]
   16f5e:	0a12      	lsrs	r2, r2, #8
   16f60:	b292      	uxth	r2, r2
   16f62:	b2d2      	uxtb	r2, r2
   16f64:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   16f66:	68bb      	ldr	r3, [r7, #8]
   16f68:	1c5a      	adds	r2, r3, #1
   16f6a:	60ba      	str	r2, [r7, #8]
   16f6c:	8c3a      	ldrh	r2, [r7, #32]
   16f6e:	b2d2      	uxtb	r2, r2
   16f70:	701a      	strb	r2, [r3, #0]
   16f72:	68bb      	ldr	r3, [r7, #8]
   16f74:	1c5a      	adds	r2, r3, #1
   16f76:	60ba      	str	r2, [r7, #8]
   16f78:	8c3a      	ldrh	r2, [r7, #32]
   16f7a:	0a12      	lsrs	r2, r2, #8
   16f7c:	b292      	uxth	r2, r2
   16f7e:	b2d2      	uxtb	r2, r2
   16f80:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   16f82:	68bb      	ldr	r3, [r7, #8]
   16f84:	1c5a      	adds	r2, r3, #1
   16f86:	60ba      	str	r2, [r7, #8]
   16f88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   16f8a:	b2d2      	uxtb	r2, r2
   16f8c:	701a      	strb	r2, [r3, #0]
   16f8e:	68bb      	ldr	r3, [r7, #8]
   16f90:	1c5a      	adds	r2, r3, #1
   16f92:	60ba      	str	r2, [r7, #8]
   16f94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   16f96:	0a12      	lsrs	r2, r2, #8
   16f98:	b292      	uxth	r2, r2
   16f9a:	b2d2      	uxtb	r2, r2
   16f9c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   16f9e:	68bb      	ldr	r3, [r7, #8]
   16fa0:	1c5a      	adds	r2, r3, #1
   16fa2:	60ba      	str	r2, [r7, #8]
   16fa4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   16fa6:	b2d2      	uxtb	r2, r2
   16fa8:	701a      	strb	r2, [r3, #0]
   16faa:	68bb      	ldr	r3, [r7, #8]
   16fac:	1c5a      	adds	r2, r3, #1
   16fae:	60ba      	str	r2, [r7, #8]
   16fb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   16fb2:	0a12      	lsrs	r2, r2, #8
   16fb4:	b292      	uxth	r2, r2
   16fb6:	b2d2      	uxtb	r2, r2
   16fb8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16fba:	68f8      	ldr	r0, [r7, #12]
   16fbc:	f7ff fd4e 	bl	16a5c <hciCmdSend>
  }
}
   16fc0:	bf00      	nop
   16fc2:	3714      	adds	r7, #20
   16fc4:	46bd      	mov	sp, r7
   16fc6:	bd90      	pop	{r4, r7, pc}

00016fc8 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   16fc8:	b580      	push	{r7, lr}
   16fca:	b084      	sub	sp, #16
   16fcc:	af00      	add	r7, sp, #0
   16fce:	4603      	mov	r3, r0
   16fd0:	460a      	mov	r2, r1
   16fd2:	80fb      	strh	r3, [r7, #6]
   16fd4:	4613      	mov	r3, r2
   16fd6:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   16fd8:	2103      	movs	r1, #3
   16fda:	f242 0021 	movw	r0, #8225	; 0x2021
   16fde:	f7ff fd0f 	bl	16a00 <hciCmdAlloc>
   16fe2:	60f8      	str	r0, [r7, #12]
   16fe4:	68fb      	ldr	r3, [r7, #12]
   16fe6:	2b00      	cmp	r3, #0
   16fe8:	d018      	beq.n	1701c <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16fea:	68fb      	ldr	r3, [r7, #12]
   16fec:	3303      	adds	r3, #3
   16fee:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   16ff0:	68bb      	ldr	r3, [r7, #8]
   16ff2:	1c5a      	adds	r2, r3, #1
   16ff4:	60ba      	str	r2, [r7, #8]
   16ff6:	88fa      	ldrh	r2, [r7, #6]
   16ff8:	b2d2      	uxtb	r2, r2
   16ffa:	701a      	strb	r2, [r3, #0]
   16ffc:	68bb      	ldr	r3, [r7, #8]
   16ffe:	1c5a      	adds	r2, r3, #1
   17000:	60ba      	str	r2, [r7, #8]
   17002:	88fa      	ldrh	r2, [r7, #6]
   17004:	0a12      	lsrs	r2, r2, #8
   17006:	b292      	uxth	r2, r2
   17008:	b2d2      	uxtb	r2, r2
   1700a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   1700c:	68bb      	ldr	r3, [r7, #8]
   1700e:	1c5a      	adds	r2, r3, #1
   17010:	60ba      	str	r2, [r7, #8]
   17012:	797a      	ldrb	r2, [r7, #5]
   17014:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17016:	68f8      	ldr	r0, [r7, #12]
   17018:	f7ff fd20 	bl	16a5c <hciCmdSend>
  }
}
   1701c:	bf00      	nop
   1701e:	3710      	adds	r7, #16
   17020:	46bd      	mov	sp, r7
   17022:	bd80      	pop	{r7, pc}

00017024 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   17024:	b580      	push	{r7, lr}
   17026:	b084      	sub	sp, #16
   17028:	af00      	add	r7, sp, #0
   1702a:	4603      	mov	r3, r0
   1702c:	80fb      	strh	r3, [r7, #6]
   1702e:	460b      	mov	r3, r1
   17030:	80bb      	strh	r3, [r7, #4]
   17032:	4613      	mov	r3, r2
   17034:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   17036:	2106      	movs	r1, #6
   17038:	f242 0022 	movw	r0, #8226	; 0x2022
   1703c:	f7ff fce0 	bl	16a00 <hciCmdAlloc>
   17040:	60f8      	str	r0, [r7, #12]
   17042:	68fb      	ldr	r3, [r7, #12]
   17044:	2b00      	cmp	r3, #0
   17046:	d02f      	beq.n	170a8 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17048:	68fb      	ldr	r3, [r7, #12]
   1704a:	3303      	adds	r3, #3
   1704c:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1704e:	68bb      	ldr	r3, [r7, #8]
   17050:	1c5a      	adds	r2, r3, #1
   17052:	60ba      	str	r2, [r7, #8]
   17054:	88fa      	ldrh	r2, [r7, #6]
   17056:	b2d2      	uxtb	r2, r2
   17058:	701a      	strb	r2, [r3, #0]
   1705a:	68bb      	ldr	r3, [r7, #8]
   1705c:	1c5a      	adds	r2, r3, #1
   1705e:	60ba      	str	r2, [r7, #8]
   17060:	88fa      	ldrh	r2, [r7, #6]
   17062:	0a12      	lsrs	r2, r2, #8
   17064:	b292      	uxth	r2, r2
   17066:	b2d2      	uxtb	r2, r2
   17068:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   1706a:	68bb      	ldr	r3, [r7, #8]
   1706c:	1c5a      	adds	r2, r3, #1
   1706e:	60ba      	str	r2, [r7, #8]
   17070:	88ba      	ldrh	r2, [r7, #4]
   17072:	b2d2      	uxtb	r2, r2
   17074:	701a      	strb	r2, [r3, #0]
   17076:	68bb      	ldr	r3, [r7, #8]
   17078:	1c5a      	adds	r2, r3, #1
   1707a:	60ba      	str	r2, [r7, #8]
   1707c:	88ba      	ldrh	r2, [r7, #4]
   1707e:	0a12      	lsrs	r2, r2, #8
   17080:	b292      	uxth	r2, r2
   17082:	b2d2      	uxtb	r2, r2
   17084:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   17086:	68bb      	ldr	r3, [r7, #8]
   17088:	1c5a      	adds	r2, r3, #1
   1708a:	60ba      	str	r2, [r7, #8]
   1708c:	887a      	ldrh	r2, [r7, #2]
   1708e:	b2d2      	uxtb	r2, r2
   17090:	701a      	strb	r2, [r3, #0]
   17092:	68bb      	ldr	r3, [r7, #8]
   17094:	1c5a      	adds	r2, r3, #1
   17096:	60ba      	str	r2, [r7, #8]
   17098:	887a      	ldrh	r2, [r7, #2]
   1709a:	0a12      	lsrs	r2, r2, #8
   1709c:	b292      	uxth	r2, r2
   1709e:	b2d2      	uxtb	r2, r2
   170a0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   170a2:	68f8      	ldr	r0, [r7, #12]
   170a4:	f7ff fcda 	bl	16a5c <hciCmdSend>
  }
}
   170a8:	bf00      	nop
   170aa:	3710      	adds	r7, #16
   170ac:	46bd      	mov	sp, r7
   170ae:	bd80      	pop	{r7, pc}

000170b0 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   170b0:	b580      	push	{r7, lr}
   170b2:	b084      	sub	sp, #16
   170b4:	af00      	add	r7, sp, #0
   170b6:	4603      	mov	r3, r0
   170b8:	460a      	mov	r2, r1
   170ba:	80fb      	strh	r3, [r7, #6]
   170bc:	4613      	mov	r3, r2
   170be:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   170c0:	2104      	movs	r1, #4
   170c2:	f242 0024 	movw	r0, #8228	; 0x2024
   170c6:	f7ff fc9b 	bl	16a00 <hciCmdAlloc>
   170ca:	60f8      	str	r0, [r7, #12]
   170cc:	68fb      	ldr	r3, [r7, #12]
   170ce:	2b00      	cmp	r3, #0
   170d0:	d021      	beq.n	17116 <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   170d2:	68fb      	ldr	r3, [r7, #12]
   170d4:	3303      	adds	r3, #3
   170d6:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   170d8:	68bb      	ldr	r3, [r7, #8]
   170da:	1c5a      	adds	r2, r3, #1
   170dc:	60ba      	str	r2, [r7, #8]
   170de:	88fa      	ldrh	r2, [r7, #6]
   170e0:	b2d2      	uxtb	r2, r2
   170e2:	701a      	strb	r2, [r3, #0]
   170e4:	68bb      	ldr	r3, [r7, #8]
   170e6:	1c5a      	adds	r2, r3, #1
   170e8:	60ba      	str	r2, [r7, #8]
   170ea:	88fa      	ldrh	r2, [r7, #6]
   170ec:	0a12      	lsrs	r2, r2, #8
   170ee:	b292      	uxth	r2, r2
   170f0:	b2d2      	uxtb	r2, r2
   170f2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   170f4:	68bb      	ldr	r3, [r7, #8]
   170f6:	1c5a      	adds	r2, r3, #1
   170f8:	60ba      	str	r2, [r7, #8]
   170fa:	88ba      	ldrh	r2, [r7, #4]
   170fc:	b2d2      	uxtb	r2, r2
   170fe:	701a      	strb	r2, [r3, #0]
   17100:	68bb      	ldr	r3, [r7, #8]
   17102:	1c5a      	adds	r2, r3, #1
   17104:	60ba      	str	r2, [r7, #8]
   17106:	88ba      	ldrh	r2, [r7, #4]
   17108:	0a12      	lsrs	r2, r2, #8
   1710a:	b292      	uxth	r2, r2
   1710c:	b2d2      	uxtb	r2, r2
   1710e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17110:	68f8      	ldr	r0, [r7, #12]
   17112:	f7ff fca3 	bl	16a5c <hciCmdSend>
  }
}
   17116:	bf00      	nop
   17118:	3710      	adds	r7, #16
   1711a:	46bd      	mov	sp, r7
   1711c:	bd80      	pop	{r7, pc}

0001711e <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
   1711e:	b580      	push	{r7, lr}
   17120:	b082      	sub	sp, #8
   17122:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
   17124:	2100      	movs	r1, #0
   17126:	f242 0025 	movw	r0, #8229	; 0x2025
   1712a:	f7ff fc69 	bl	16a00 <hciCmdAlloc>
   1712e:	6078      	str	r0, [r7, #4]
   17130:	687b      	ldr	r3, [r7, #4]
   17132:	2b00      	cmp	r3, #0
   17134:	d002      	beq.n	1713c <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
   17136:	6878      	ldr	r0, [r7, #4]
   17138:	f7ff fc90 	bl	16a5c <hciCmdSend>
  }
}
   1713c:	bf00      	nop
   1713e:	3708      	adds	r7, #8
   17140:	46bd      	mov	sp, r7
   17142:	bd80      	pop	{r7, pc}

00017144 <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
   17144:	b580      	push	{r7, lr}
   17146:	b084      	sub	sp, #16
   17148:	af00      	add	r7, sp, #0
   1714a:	6078      	str	r0, [r7, #4]
   1714c:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
   1714e:	2140      	movs	r1, #64	; 0x40
   17150:	f242 0026 	movw	r0, #8230	; 0x2026
   17154:	f7ff fc54 	bl	16a00 <hciCmdAlloc>
   17158:	60f8      	str	r0, [r7, #12]
   1715a:	68fb      	ldr	r3, [r7, #12]
   1715c:	2b00      	cmp	r3, #0
   1715e:	d011      	beq.n	17184 <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17160:	68fb      	ldr	r3, [r7, #12]
   17162:	3303      	adds	r3, #3
   17164:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
   17166:	2220      	movs	r2, #32
   17168:	6879      	ldr	r1, [r7, #4]
   1716a:	68b8      	ldr	r0, [r7, #8]
   1716c:	f7f4 fff8 	bl	c160 <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
   17170:	68bb      	ldr	r3, [r7, #8]
   17172:	3320      	adds	r3, #32
   17174:	2220      	movs	r2, #32
   17176:	6839      	ldr	r1, [r7, #0]
   17178:	4618      	mov	r0, r3
   1717a:	f7f4 fff1 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1717e:	68f8      	ldr	r0, [r7, #12]
   17180:	f7ff fc6c 	bl	16a5c <hciCmdSend>
  }
}
   17184:	bf00      	nop
   17186:	3710      	adds	r7, #16
   17188:	46bd      	mov	sp, r7
   1718a:	bd80      	pop	{r7, pc}

0001718c <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   1718c:	b580      	push	{r7, lr}
   1718e:	b082      	sub	sp, #8
   17190:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   17192:	2100      	movs	r1, #0
   17194:	f242 002f 	movw	r0, #8239	; 0x202f
   17198:	f7ff fc32 	bl	16a00 <hciCmdAlloc>
   1719c:	6078      	str	r0, [r7, #4]
   1719e:	687b      	ldr	r3, [r7, #4]
   171a0:	2b00      	cmp	r3, #0
   171a2:	d002      	beq.n	171aa <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
   171a4:	6878      	ldr	r0, [r7, #4]
   171a6:	f7ff fc59 	bl	16a5c <hciCmdSend>
  }
}
   171aa:	bf00      	nop
   171ac:	3708      	adds	r7, #8
   171ae:	46bd      	mov	sp, r7
   171b0:	bd80      	pop	{r7, pc}

000171b2 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   171b2:	b580      	push	{r7, lr}
   171b4:	b084      	sub	sp, #16
   171b6:	af00      	add	r7, sp, #0
   171b8:	6078      	str	r0, [r7, #4]
   171ba:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   171bc:	2120      	movs	r1, #32
   171be:	f242 0017 	movw	r0, #8215	; 0x2017
   171c2:	f7ff fc1d 	bl	16a00 <hciCmdAlloc>
   171c6:	60f8      	str	r0, [r7, #12]
   171c8:	68fb      	ldr	r3, [r7, #12]
   171ca:	2b00      	cmp	r3, #0
   171cc:	d012      	beq.n	171f4 <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   171ce:	68fb      	ldr	r3, [r7, #12]
   171d0:	3303      	adds	r3, #3
   171d2:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   171d4:	2210      	movs	r2, #16
   171d6:	6879      	ldr	r1, [r7, #4]
   171d8:	68b8      	ldr	r0, [r7, #8]
   171da:	f7f4 ffc1 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   171de:	68bb      	ldr	r3, [r7, #8]
   171e0:	3310      	adds	r3, #16
   171e2:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   171e4:	2210      	movs	r2, #16
   171e6:	6839      	ldr	r1, [r7, #0]
   171e8:	68b8      	ldr	r0, [r7, #8]
   171ea:	f7f4 ffb9 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   171ee:	68f8      	ldr	r0, [r7, #12]
   171f0:	f7ff fc34 	bl	16a5c <hciCmdSend>
  }
}
   171f4:	bf00      	nop
   171f6:	3710      	adds	r7, #16
   171f8:	46bd      	mov	sp, r7
   171fa:	bd80      	pop	{r7, pc}

000171fc <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   171fc:	b580      	push	{r7, lr}
   171fe:	b084      	sub	sp, #16
   17200:	af00      	add	r7, sp, #0
   17202:	4603      	mov	r3, r0
   17204:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   17206:	2102      	movs	r1, #2
   17208:	f242 001b 	movw	r0, #8219	; 0x201b
   1720c:	f7ff fbf8 	bl	16a00 <hciCmdAlloc>
   17210:	60f8      	str	r0, [r7, #12]
   17212:	68fb      	ldr	r3, [r7, #12]
   17214:	2b00      	cmp	r3, #0
   17216:	d013      	beq.n	17240 <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17218:	68fb      	ldr	r3, [r7, #12]
   1721a:	3303      	adds	r3, #3
   1721c:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1721e:	68bb      	ldr	r3, [r7, #8]
   17220:	1c5a      	adds	r2, r3, #1
   17222:	60ba      	str	r2, [r7, #8]
   17224:	88fa      	ldrh	r2, [r7, #6]
   17226:	b2d2      	uxtb	r2, r2
   17228:	701a      	strb	r2, [r3, #0]
   1722a:	68bb      	ldr	r3, [r7, #8]
   1722c:	1c5a      	adds	r2, r3, #1
   1722e:	60ba      	str	r2, [r7, #8]
   17230:	88fa      	ldrh	r2, [r7, #6]
   17232:	0a12      	lsrs	r2, r2, #8
   17234:	b292      	uxth	r2, r2
   17236:	b2d2      	uxtb	r2, r2
   17238:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1723a:	68f8      	ldr	r0, [r7, #12]
   1723c:	f7ff fc0e 	bl	16a5c <hciCmdSend>
  }
}
   17240:	bf00      	nop
   17242:	3710      	adds	r7, #16
   17244:	46bd      	mov	sp, r7
   17246:	bd80      	pop	{r7, pc}

00017248 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   17248:	b580      	push	{r7, lr}
   1724a:	b084      	sub	sp, #16
   1724c:	af00      	add	r7, sp, #0
   1724e:	4603      	mov	r3, r0
   17250:	6039      	str	r1, [r7, #0]
   17252:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   17254:	2112      	movs	r1, #18
   17256:	f242 001a 	movw	r0, #8218	; 0x201a
   1725a:	f7ff fbd1 	bl	16a00 <hciCmdAlloc>
   1725e:	60f8      	str	r0, [r7, #12]
   17260:	68fb      	ldr	r3, [r7, #12]
   17262:	2b00      	cmp	r3, #0
   17264:	d018      	beq.n	17298 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17266:	68fb      	ldr	r3, [r7, #12]
   17268:	3303      	adds	r3, #3
   1726a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1726c:	68bb      	ldr	r3, [r7, #8]
   1726e:	1c5a      	adds	r2, r3, #1
   17270:	60ba      	str	r2, [r7, #8]
   17272:	88fa      	ldrh	r2, [r7, #6]
   17274:	b2d2      	uxtb	r2, r2
   17276:	701a      	strb	r2, [r3, #0]
   17278:	68bb      	ldr	r3, [r7, #8]
   1727a:	1c5a      	adds	r2, r3, #1
   1727c:	60ba      	str	r2, [r7, #8]
   1727e:	88fa      	ldrh	r2, [r7, #6]
   17280:	0a12      	lsrs	r2, r2, #8
   17282:	b292      	uxth	r2, r2
   17284:	b2d2      	uxtb	r2, r2
   17286:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   17288:	2210      	movs	r2, #16
   1728a:	6839      	ldr	r1, [r7, #0]
   1728c:	68b8      	ldr	r0, [r7, #8]
   1728e:	f7f4 ff67 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   17292:	68f8      	ldr	r0, [r7, #12]
   17294:	f7ff fbe2 	bl	16a5c <hciCmdSend>
  }
}
   17298:	bf00      	nop
   1729a:	3710      	adds	r7, #16
   1729c:	46bd      	mov	sp, r7
   1729e:	bd80      	pop	{r7, pc}

000172a0 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   172a0:	b580      	push	{r7, lr}
   172a2:	b082      	sub	sp, #8
   172a4:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   172a6:	2100      	movs	r1, #0
   172a8:	f242 0018 	movw	r0, #8216	; 0x2018
   172ac:	f7ff fba8 	bl	16a00 <hciCmdAlloc>
   172b0:	6078      	str	r0, [r7, #4]
   172b2:	687b      	ldr	r3, [r7, #4]
   172b4:	2b00      	cmp	r3, #0
   172b6:	d002      	beq.n	172be <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
   172b8:	6878      	ldr	r0, [r7, #4]
   172ba:	f7ff fbcf 	bl	16a5c <hciCmdSend>
  }
}
   172be:	bf00      	nop
   172c0:	3708      	adds	r7, #8
   172c2:	46bd      	mov	sp, r7
   172c4:	bd80      	pop	{r7, pc}

000172c6 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   172c6:	b580      	push	{r7, lr}
   172c8:	b082      	sub	sp, #8
   172ca:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   172cc:	2100      	movs	r1, #0
   172ce:	f242 0002 	movw	r0, #8194	; 0x2002
   172d2:	f7ff fb95 	bl	16a00 <hciCmdAlloc>
   172d6:	6078      	str	r0, [r7, #4]
   172d8:	687b      	ldr	r3, [r7, #4]
   172da:	2b00      	cmp	r3, #0
   172dc:	d002      	beq.n	172e4 <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   172de:	6878      	ldr	r0, [r7, #4]
   172e0:	f7ff fbbc 	bl	16a5c <hciCmdSend>
  }
}
   172e4:	bf00      	nop
   172e6:	3708      	adds	r7, #8
   172e8:	46bd      	mov	sp, r7
   172ea:	bd80      	pop	{r7, pc}

000172ec <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   172ec:	b580      	push	{r7, lr}
   172ee:	b082      	sub	sp, #8
   172f0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   172f2:	2100      	movs	r1, #0
   172f4:	f242 0003 	movw	r0, #8195	; 0x2003
   172f8:	f7ff fb82 	bl	16a00 <hciCmdAlloc>
   172fc:	6078      	str	r0, [r7, #4]
   172fe:	687b      	ldr	r3, [r7, #4]
   17300:	2b00      	cmp	r3, #0
   17302:	d002      	beq.n	1730a <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
   17304:	6878      	ldr	r0, [r7, #4]
   17306:	f7ff fba9 	bl	16a5c <hciCmdSend>
  }
}
   1730a:	bf00      	nop
   1730c:	3708      	adds	r7, #8
   1730e:	46bd      	mov	sp, r7
   17310:	bd80      	pop	{r7, pc}

00017312 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   17312:	b580      	push	{r7, lr}
   17314:	b084      	sub	sp, #16
   17316:	af00      	add	r7, sp, #0
   17318:	4603      	mov	r3, r0
   1731a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   1731c:	2102      	movs	r1, #2
   1731e:	f242 0016 	movw	r0, #8214	; 0x2016
   17322:	f7ff fb6d 	bl	16a00 <hciCmdAlloc>
   17326:	60f8      	str	r0, [r7, #12]
   17328:	68fb      	ldr	r3, [r7, #12]
   1732a:	2b00      	cmp	r3, #0
   1732c:	d013      	beq.n	17356 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1732e:	68fb      	ldr	r3, [r7, #12]
   17330:	3303      	adds	r3, #3
   17332:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   17334:	68bb      	ldr	r3, [r7, #8]
   17336:	1c5a      	adds	r2, r3, #1
   17338:	60ba      	str	r2, [r7, #8]
   1733a:	88fa      	ldrh	r2, [r7, #6]
   1733c:	b2d2      	uxtb	r2, r2
   1733e:	701a      	strb	r2, [r3, #0]
   17340:	68bb      	ldr	r3, [r7, #8]
   17342:	1c5a      	adds	r2, r3, #1
   17344:	60ba      	str	r2, [r7, #8]
   17346:	88fa      	ldrh	r2, [r7, #6]
   17348:	0a12      	lsrs	r2, r2, #8
   1734a:	b292      	uxth	r2, r2
   1734c:	b2d2      	uxtb	r2, r2
   1734e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17350:	68f8      	ldr	r0, [r7, #12]
   17352:	f7ff fb83 	bl	16a5c <hciCmdSend>
  }
}
   17356:	bf00      	nop
   17358:	3710      	adds	r7, #16
   1735a:	46bd      	mov	sp, r7
   1735c:	bd80      	pop	{r7, pc}

0001735e <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   1735e:	b580      	push	{r7, lr}
   17360:	b082      	sub	sp, #8
   17362:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   17364:	2100      	movs	r1, #0
   17366:	f242 001c 	movw	r0, #8220	; 0x201c
   1736a:	f7ff fb49 	bl	16a00 <hciCmdAlloc>
   1736e:	6078      	str	r0, [r7, #4]
   17370:	687b      	ldr	r3, [r7, #4]
   17372:	2b00      	cmp	r3, #0
   17374:	d002      	beq.n	1737c <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
   17376:	6878      	ldr	r0, [r7, #4]
   17378:	f7ff fb70 	bl	16a5c <hciCmdSend>
  }
}
   1737c:	bf00      	nop
   1737e:	3708      	adds	r7, #8
   17380:	46bd      	mov	sp, r7
   17382:	bd80      	pop	{r7, pc}

00017384 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   17384:	b580      	push	{r7, lr}
   17386:	b082      	sub	sp, #8
   17388:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   1738a:	2100      	movs	r1, #0
   1738c:	f242 000f 	movw	r0, #8207	; 0x200f
   17390:	f7ff fb36 	bl	16a00 <hciCmdAlloc>
   17394:	6078      	str	r0, [r7, #4]
   17396:	687b      	ldr	r3, [r7, #4]
   17398:	2b00      	cmp	r3, #0
   1739a:	d002      	beq.n	173a2 <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1739c:	6878      	ldr	r0, [r7, #4]
   1739e:	f7ff fb5d 	bl	16a5c <hciCmdSend>
  }
}
   173a2:	bf00      	nop
   173a4:	3708      	adds	r7, #8
   173a6:	46bd      	mov	sp, r7
   173a8:	bd80      	pop	{r7, pc}

000173aa <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   173aa:	b580      	push	{r7, lr}
   173ac:	b084      	sub	sp, #16
   173ae:	af00      	add	r7, sp, #0
   173b0:	4603      	mov	r3, r0
   173b2:	6039      	str	r1, [r7, #0]
   173b4:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
   173b6:	2107      	movs	r1, #7
   173b8:	f242 0012 	movw	r0, #8210	; 0x2012
   173bc:	f7ff fb20 	bl	16a00 <hciCmdAlloc>
   173c0:	60f8      	str	r0, [r7, #12]
   173c2:	68fb      	ldr	r3, [r7, #12]
   173c4:	2b00      	cmp	r3, #0
   173c6:	d011      	beq.n	173ec <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   173c8:	68fb      	ldr	r3, [r7, #12]
   173ca:	3303      	adds	r3, #3
   173cc:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   173ce:	68bb      	ldr	r3, [r7, #8]
   173d0:	1c5a      	adds	r2, r3, #1
   173d2:	60ba      	str	r2, [r7, #8]
   173d4:	79fa      	ldrb	r2, [r7, #7]
   173d6:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   173d8:	6839      	ldr	r1, [r7, #0]
   173da:	68b8      	ldr	r0, [r7, #8]
   173dc:	f7fc fc5c 	bl	13c98 <BdaCpy>
   173e0:	68bb      	ldr	r3, [r7, #8]
   173e2:	3306      	adds	r3, #6
   173e4:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   173e6:	68f8      	ldr	r0, [r7, #12]
   173e8:	f7ff fb38 	bl	16a5c <hciCmdSend>
  }
}
   173ec:	bf00      	nop
   173ee:	3710      	adds	r7, #16
   173f0:	46bd      	mov	sp, r7
   173f2:	bd80      	pop	{r7, pc}

000173f4 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   173f4:	b580      	push	{r7, lr}
   173f6:	b084      	sub	sp, #16
   173f8:	af00      	add	r7, sp, #0
   173fa:	4603      	mov	r3, r0
   173fc:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   173fe:	2101      	movs	r1, #1
   17400:	f242 000a 	movw	r0, #8202	; 0x200a
   17404:	f7ff fafc 	bl	16a00 <hciCmdAlloc>
   17408:	60f8      	str	r0, [r7, #12]
   1740a:	68fb      	ldr	r3, [r7, #12]
   1740c:	2b00      	cmp	r3, #0
   1740e:	d00a      	beq.n	17426 <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17410:	68fb      	ldr	r3, [r7, #12]
   17412:	3303      	adds	r3, #3
   17414:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   17416:	68bb      	ldr	r3, [r7, #8]
   17418:	1c5a      	adds	r2, r3, #1
   1741a:	60ba      	str	r2, [r7, #8]
   1741c:	79fa      	ldrb	r2, [r7, #7]
   1741e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17420:	68f8      	ldr	r0, [r7, #12]
   17422:	f7ff fb1b 	bl	16a5c <hciCmdSend>
  }
}
   17426:	bf00      	nop
   17428:	3710      	adds	r7, #16
   1742a:	46bd      	mov	sp, r7
   1742c:	bd80      	pop	{r7, pc}

0001742e <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   1742e:	b580      	push	{r7, lr}
   17430:	b084      	sub	sp, #16
   17432:	af00      	add	r7, sp, #0
   17434:	4603      	mov	r3, r0
   17436:	6039      	str	r1, [r7, #0]
   17438:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   1743a:	2120      	movs	r1, #32
   1743c:	f242 0008 	movw	r0, #8200	; 0x2008
   17440:	f7ff fade 	bl	16a00 <hciCmdAlloc>
   17444:	60f8      	str	r0, [r7, #12]
   17446:	68fb      	ldr	r3, [r7, #12]
   17448:	2b00      	cmp	r3, #0
   1744a:	d01c      	beq.n	17486 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1744c:	68fb      	ldr	r3, [r7, #12]
   1744e:	3303      	adds	r3, #3
   17450:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   17452:	68bb      	ldr	r3, [r7, #8]
   17454:	1c5a      	adds	r2, r3, #1
   17456:	60ba      	str	r2, [r7, #8]
   17458:	79fa      	ldrb	r2, [r7, #7]
   1745a:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1745c:	79fb      	ldrb	r3, [r7, #7]
   1745e:	461a      	mov	r2, r3
   17460:	6839      	ldr	r1, [r7, #0]
   17462:	68b8      	ldr	r0, [r7, #8]
   17464:	f7f4 fe7c 	bl	c160 <memcpy>
    p += len;
   17468:	79fb      	ldrb	r3, [r7, #7]
   1746a:	68ba      	ldr	r2, [r7, #8]
   1746c:	4413      	add	r3, r2
   1746e:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   17470:	79fb      	ldrb	r3, [r7, #7]
   17472:	f1c3 031f 	rsb	r3, r3, #31
   17476:	461a      	mov	r2, r3
   17478:	2100      	movs	r1, #0
   1747a:	68b8      	ldr	r0, [r7, #8]
   1747c:	f7f4 ff6e 	bl	c35c <memset>
    hciCmdSend(pBuf);
   17480:	68f8      	ldr	r0, [r7, #12]
   17482:	f7ff faeb 	bl	16a5c <hciCmdSend>
  }
}
   17486:	bf00      	nop
   17488:	3710      	adds	r7, #16
   1748a:	46bd      	mov	sp, r7
   1748c:	bd80      	pop	{r7, pc}

0001748e <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   1748e:	b590      	push	{r4, r7, lr}
   17490:	b085      	sub	sp, #20
   17492:	af00      	add	r7, sp, #0
   17494:	4604      	mov	r4, r0
   17496:	4608      	mov	r0, r1
   17498:	4611      	mov	r1, r2
   1749a:	461a      	mov	r2, r3
   1749c:	4623      	mov	r3, r4
   1749e:	80fb      	strh	r3, [r7, #6]
   174a0:	4603      	mov	r3, r0
   174a2:	80bb      	strh	r3, [r7, #4]
   174a4:	460b      	mov	r3, r1
   174a6:	70fb      	strb	r3, [r7, #3]
   174a8:	4613      	mov	r3, r2
   174aa:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   174ac:	210f      	movs	r1, #15
   174ae:	f242 0006 	movw	r0, #8198	; 0x2006
   174b2:	f7ff faa5 	bl	16a00 <hciCmdAlloc>
   174b6:	60b8      	str	r0, [r7, #8]
   174b8:	68bb      	ldr	r3, [r7, #8]
   174ba:	2b00      	cmp	r3, #0
   174bc:	d04c      	beq.n	17558 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   174be:	68bb      	ldr	r3, [r7, #8]
   174c0:	3303      	adds	r3, #3
   174c2:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   174c4:	68fb      	ldr	r3, [r7, #12]
   174c6:	1c5a      	adds	r2, r3, #1
   174c8:	60fa      	str	r2, [r7, #12]
   174ca:	88fa      	ldrh	r2, [r7, #6]
   174cc:	b2d2      	uxtb	r2, r2
   174ce:	701a      	strb	r2, [r3, #0]
   174d0:	68fb      	ldr	r3, [r7, #12]
   174d2:	1c5a      	adds	r2, r3, #1
   174d4:	60fa      	str	r2, [r7, #12]
   174d6:	88fa      	ldrh	r2, [r7, #6]
   174d8:	0a12      	lsrs	r2, r2, #8
   174da:	b292      	uxth	r2, r2
   174dc:	b2d2      	uxtb	r2, r2
   174de:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   174e0:	68fb      	ldr	r3, [r7, #12]
   174e2:	1c5a      	adds	r2, r3, #1
   174e4:	60fa      	str	r2, [r7, #12]
   174e6:	88ba      	ldrh	r2, [r7, #4]
   174e8:	b2d2      	uxtb	r2, r2
   174ea:	701a      	strb	r2, [r3, #0]
   174ec:	68fb      	ldr	r3, [r7, #12]
   174ee:	1c5a      	adds	r2, r3, #1
   174f0:	60fa      	str	r2, [r7, #12]
   174f2:	88ba      	ldrh	r2, [r7, #4]
   174f4:	0a12      	lsrs	r2, r2, #8
   174f6:	b292      	uxth	r2, r2
   174f8:	b2d2      	uxtb	r2, r2
   174fa:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   174fc:	68fb      	ldr	r3, [r7, #12]
   174fe:	1c5a      	adds	r2, r3, #1
   17500:	60fa      	str	r2, [r7, #12]
   17502:	78fa      	ldrb	r2, [r7, #3]
   17504:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   17506:	68fb      	ldr	r3, [r7, #12]
   17508:	1c5a      	adds	r2, r3, #1
   1750a:	60fa      	str	r2, [r7, #12]
   1750c:	78ba      	ldrb	r2, [r7, #2]
   1750e:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   17510:	68fb      	ldr	r3, [r7, #12]
   17512:	1c5a      	adds	r2, r3, #1
   17514:	60fa      	str	r2, [r7, #12]
   17516:	f897 2020 	ldrb.w	r2, [r7, #32]
   1751a:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   1751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1751e:	2b00      	cmp	r3, #0
   17520:	d007      	beq.n	17532 <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   17522:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17524:	68f8      	ldr	r0, [r7, #12]
   17526:	f7fc fbb7 	bl	13c98 <BdaCpy>
   1752a:	68fb      	ldr	r3, [r7, #12]
   1752c:	3306      	adds	r3, #6
   1752e:	60fb      	str	r3, [r7, #12]
   17530:	e003      	b.n	1753a <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
   17532:	68f8      	ldr	r0, [r7, #12]
   17534:	f7fc fbd2 	bl	13cdc <BdaClr>
   17538:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   1753a:	68fb      	ldr	r3, [r7, #12]
   1753c:	1c5a      	adds	r2, r3, #1
   1753e:	60fa      	str	r2, [r7, #12]
   17540:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   17544:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   17546:	68fb      	ldr	r3, [r7, #12]
   17548:	1c5a      	adds	r2, r3, #1
   1754a:	60fa      	str	r2, [r7, #12]
   1754c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   17550:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17552:	68b8      	ldr	r0, [r7, #8]
   17554:	f7ff fa82 	bl	16a5c <hciCmdSend>
  }
}
   17558:	bf00      	nop
   1755a:	3714      	adds	r7, #20
   1755c:	46bd      	mov	sp, r7
   1755e:	bd90      	pop	{r4, r7, pc}

00017560 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   17560:	b580      	push	{r7, lr}
   17562:	b084      	sub	sp, #16
   17564:	af00      	add	r7, sp, #0
   17566:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   17568:	2108      	movs	r1, #8
   1756a:	f242 0001 	movw	r0, #8193	; 0x2001
   1756e:	f7ff fa47 	bl	16a00 <hciCmdAlloc>
   17572:	60f8      	str	r0, [r7, #12]
   17574:	68fb      	ldr	r3, [r7, #12]
   17576:	2b00      	cmp	r3, #0
   17578:	d00a      	beq.n	17590 <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1757a:	68fb      	ldr	r3, [r7, #12]
   1757c:	3303      	adds	r3, #3
   1757e:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   17580:	2208      	movs	r2, #8
   17582:	6879      	ldr	r1, [r7, #4]
   17584:	68b8      	ldr	r0, [r7, #8]
   17586:	f7f4 fdeb 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1758a:	68f8      	ldr	r0, [r7, #12]
   1758c:	f7ff fa66 	bl	16a5c <hciCmdSend>
  }
}
   17590:	bf00      	nop
   17592:	3710      	adds	r7, #16
   17594:	46bd      	mov	sp, r7
   17596:	bd80      	pop	{r7, pc}

00017598 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
   17598:	b580      	push	{r7, lr}
   1759a:	b084      	sub	sp, #16
   1759c:	af00      	add	r7, sp, #0
   1759e:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
   175a0:	2106      	movs	r1, #6
   175a2:	f242 0005 	movw	r0, #8197	; 0x2005
   175a6:	f7ff fa2b 	bl	16a00 <hciCmdAlloc>
   175aa:	60f8      	str	r0, [r7, #12]
   175ac:	68fb      	ldr	r3, [r7, #12]
   175ae:	2b00      	cmp	r3, #0
   175b0:	d00c      	beq.n	175cc <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   175b2:	68fb      	ldr	r3, [r7, #12]
   175b4:	3303      	adds	r3, #3
   175b6:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
   175b8:	6879      	ldr	r1, [r7, #4]
   175ba:	68b8      	ldr	r0, [r7, #8]
   175bc:	f7fc fb6c 	bl	13c98 <BdaCpy>
   175c0:	68bb      	ldr	r3, [r7, #8]
   175c2:	3306      	adds	r3, #6
   175c4:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   175c6:	68f8      	ldr	r0, [r7, #12]
   175c8:	f7ff fa48 	bl	16a5c <hciCmdSend>
  }
}
   175cc:	bf00      	nop
   175ce:	3710      	adds	r7, #16
   175d0:	46bd      	mov	sp, r7
   175d2:	bd80      	pop	{r7, pc}

000175d4 <HciLeSetScanEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanEnableCmd(uint8_t enable, uint8_t filterDup)
{
   175d4:	b580      	push	{r7, lr}
   175d6:	b084      	sub	sp, #16
   175d8:	af00      	add	r7, sp, #0
   175da:	4603      	mov	r3, r0
   175dc:	460a      	mov	r2, r1
   175de:	71fb      	strb	r3, [r7, #7]
   175e0:	4613      	mov	r3, r2
   175e2:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_ENABLE, HCI_LEN_LE_SET_SCAN_ENABLE)) != NULL)
   175e4:	2102      	movs	r1, #2
   175e6:	f242 000c 	movw	r0, #8204	; 0x200c
   175ea:	f7ff fa09 	bl	16a00 <hciCmdAlloc>
   175ee:	60f8      	str	r0, [r7, #12]
   175f0:	68fb      	ldr	r3, [r7, #12]
   175f2:	2b00      	cmp	r3, #0
   175f4:	d00f      	beq.n	17616 <HciLeSetScanEnableCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   175f6:	68fb      	ldr	r3, [r7, #12]
   175f8:	3303      	adds	r3, #3
   175fa:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   175fc:	68bb      	ldr	r3, [r7, #8]
   175fe:	1c5a      	adds	r2, r3, #1
   17600:	60ba      	str	r2, [r7, #8]
   17602:	79fa      	ldrb	r2, [r7, #7]
   17604:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, filterDup);
   17606:	68bb      	ldr	r3, [r7, #8]
   17608:	1c5a      	adds	r2, r3, #1
   1760a:	60ba      	str	r2, [r7, #8]
   1760c:	79ba      	ldrb	r2, [r7, #6]
   1760e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17610:	68f8      	ldr	r0, [r7, #12]
   17612:	f7ff fa23 	bl	16a5c <hciCmdSend>
  }
}
   17616:	bf00      	nop
   17618:	3710      	adds	r7, #16
   1761a:	46bd      	mov	sp, r7
   1761c:	bd80      	pop	{r7, pc}

0001761e <HciLeSetScanParamCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanParamCmd(uint8_t scanType, uint16_t scanInterval, uint16_t scanWindow,
                          uint8_t ownAddrType, uint8_t scanFiltPolicy)
{
   1761e:	b590      	push	{r4, r7, lr}
   17620:	b085      	sub	sp, #20
   17622:	af00      	add	r7, sp, #0
   17624:	4604      	mov	r4, r0
   17626:	4608      	mov	r0, r1
   17628:	4611      	mov	r1, r2
   1762a:	461a      	mov	r2, r3
   1762c:	4623      	mov	r3, r4
   1762e:	71fb      	strb	r3, [r7, #7]
   17630:	4603      	mov	r3, r0
   17632:	80bb      	strh	r3, [r7, #4]
   17634:	460b      	mov	r3, r1
   17636:	807b      	strh	r3, [r7, #2]
   17638:	4613      	mov	r3, r2
   1763a:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_PARAM, HCI_LEN_LE_SET_SCAN_PARAM)) != NULL)
   1763c:	2107      	movs	r1, #7
   1763e:	f242 000b 	movw	r0, #8203	; 0x200b
   17642:	f7ff f9dd 	bl	16a00 <hciCmdAlloc>
   17646:	60f8      	str	r0, [r7, #12]
   17648:	68fb      	ldr	r3, [r7, #12]
   1764a:	2b00      	cmp	r3, #0
   1764c:	d031      	beq.n	176b2 <HciLeSetScanParamCmd+0x94>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1764e:	68fb      	ldr	r3, [r7, #12]
   17650:	3303      	adds	r3, #3
   17652:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, scanType);
   17654:	68bb      	ldr	r3, [r7, #8]
   17656:	1c5a      	adds	r2, r3, #1
   17658:	60ba      	str	r2, [r7, #8]
   1765a:	79fa      	ldrb	r2, [r7, #7]
   1765c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, scanInterval);
   1765e:	68bb      	ldr	r3, [r7, #8]
   17660:	1c5a      	adds	r2, r3, #1
   17662:	60ba      	str	r2, [r7, #8]
   17664:	88ba      	ldrh	r2, [r7, #4]
   17666:	b2d2      	uxtb	r2, r2
   17668:	701a      	strb	r2, [r3, #0]
   1766a:	68bb      	ldr	r3, [r7, #8]
   1766c:	1c5a      	adds	r2, r3, #1
   1766e:	60ba      	str	r2, [r7, #8]
   17670:	88ba      	ldrh	r2, [r7, #4]
   17672:	0a12      	lsrs	r2, r2, #8
   17674:	b292      	uxth	r2, r2
   17676:	b2d2      	uxtb	r2, r2
   17678:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, scanWindow);
   1767a:	68bb      	ldr	r3, [r7, #8]
   1767c:	1c5a      	adds	r2, r3, #1
   1767e:	60ba      	str	r2, [r7, #8]
   17680:	887a      	ldrh	r2, [r7, #2]
   17682:	b2d2      	uxtb	r2, r2
   17684:	701a      	strb	r2, [r3, #0]
   17686:	68bb      	ldr	r3, [r7, #8]
   17688:	1c5a      	adds	r2, r3, #1
   1768a:	60ba      	str	r2, [r7, #8]
   1768c:	887a      	ldrh	r2, [r7, #2]
   1768e:	0a12      	lsrs	r2, r2, #8
   17690:	b292      	uxth	r2, r2
   17692:	b2d2      	uxtb	r2, r2
   17694:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   17696:	68bb      	ldr	r3, [r7, #8]
   17698:	1c5a      	adds	r2, r3, #1
   1769a:	60ba      	str	r2, [r7, #8]
   1769c:	79ba      	ldrb	r2, [r7, #6]
   1769e:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   176a0:	68bb      	ldr	r3, [r7, #8]
   176a2:	1c5a      	adds	r2, r3, #1
   176a4:	60ba      	str	r2, [r7, #8]
   176a6:	f897 2020 	ldrb.w	r2, [r7, #32]
   176aa:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   176ac:	68f8      	ldr	r0, [r7, #12]
   176ae:	f7ff f9d5 	bl	16a5c <hciCmdSend>
  }
}
   176b2:	bf00      	nop
   176b4:	3714      	adds	r7, #20
   176b6:	46bd      	mov	sp, r7
   176b8:	bd90      	pop	{r4, r7, pc}

000176ba <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   176ba:	b580      	push	{r7, lr}
   176bc:	b084      	sub	sp, #16
   176be:	af00      	add	r7, sp, #0
   176c0:	4603      	mov	r3, r0
   176c2:	6039      	str	r1, [r7, #0]
   176c4:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   176c6:	2120      	movs	r1, #32
   176c8:	f242 0009 	movw	r0, #8201	; 0x2009
   176cc:	f7ff f998 	bl	16a00 <hciCmdAlloc>
   176d0:	60f8      	str	r0, [r7, #12]
   176d2:	68fb      	ldr	r3, [r7, #12]
   176d4:	2b00      	cmp	r3, #0
   176d6:	d01c      	beq.n	17712 <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   176d8:	68fb      	ldr	r3, [r7, #12]
   176da:	3303      	adds	r3, #3
   176dc:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   176de:	68bb      	ldr	r3, [r7, #8]
   176e0:	1c5a      	adds	r2, r3, #1
   176e2:	60ba      	str	r2, [r7, #8]
   176e4:	79fa      	ldrb	r2, [r7, #7]
   176e6:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   176e8:	79fb      	ldrb	r3, [r7, #7]
   176ea:	461a      	mov	r2, r3
   176ec:	6839      	ldr	r1, [r7, #0]
   176ee:	68b8      	ldr	r0, [r7, #8]
   176f0:	f7f4 fd36 	bl	c160 <memcpy>
    p += len;
   176f4:	79fb      	ldrb	r3, [r7, #7]
   176f6:	68ba      	ldr	r2, [r7, #8]
   176f8:	4413      	add	r3, r2
   176fa:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   176fc:	79fb      	ldrb	r3, [r7, #7]
   176fe:	f1c3 031f 	rsb	r3, r3, #31
   17702:	461a      	mov	r2, r3
   17704:	2100      	movs	r1, #0
   17706:	68b8      	ldr	r0, [r7, #8]
   17708:	f7f4 fe28 	bl	c35c <memset>
    hciCmdSend(pBuf);
   1770c:	68f8      	ldr	r0, [r7, #12]
   1770e:	f7ff f9a5 	bl	16a5c <hciCmdSend>
  }
}
   17712:	bf00      	nop
   17714:	3710      	adds	r7, #16
   17716:	46bd      	mov	sp, r7
   17718:	bd80      	pop	{r7, pc}

0001771a <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   1771a:	b580      	push	{r7, lr}
   1771c:	b086      	sub	sp, #24
   1771e:	af00      	add	r7, sp, #0
   17720:	60b9      	str	r1, [r7, #8]
   17722:	607b      	str	r3, [r7, #4]
   17724:	4603      	mov	r3, r0
   17726:	81fb      	strh	r3, [r7, #14]
   17728:	4613      	mov	r3, r2
   1772a:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   1772c:	211c      	movs	r1, #28
   1772e:	f242 0019 	movw	r0, #8217	; 0x2019
   17732:	f7ff f965 	bl	16a00 <hciCmdAlloc>
   17736:	6178      	str	r0, [r7, #20]
   17738:	697b      	ldr	r3, [r7, #20]
   1773a:	2b00      	cmp	r3, #0
   1773c:	d02e      	beq.n	1779c <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1773e:	697b      	ldr	r3, [r7, #20]
   17740:	3303      	adds	r3, #3
   17742:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
   17744:	693b      	ldr	r3, [r7, #16]
   17746:	1c5a      	adds	r2, r3, #1
   17748:	613a      	str	r2, [r7, #16]
   1774a:	89fa      	ldrh	r2, [r7, #14]
   1774c:	b2d2      	uxtb	r2, r2
   1774e:	701a      	strb	r2, [r3, #0]
   17750:	693b      	ldr	r3, [r7, #16]
   17752:	1c5a      	adds	r2, r3, #1
   17754:	613a      	str	r2, [r7, #16]
   17756:	89fa      	ldrh	r2, [r7, #14]
   17758:	0a12      	lsrs	r2, r2, #8
   1775a:	b292      	uxth	r2, r2
   1775c:	b2d2      	uxtb	r2, r2
   1775e:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   17760:	2208      	movs	r2, #8
   17762:	68b9      	ldr	r1, [r7, #8]
   17764:	6938      	ldr	r0, [r7, #16]
   17766:	f7f4 fcfb 	bl	c160 <memcpy>
    p += HCI_RAND_LEN;
   1776a:	693b      	ldr	r3, [r7, #16]
   1776c:	3308      	adds	r3, #8
   1776e:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   17770:	693b      	ldr	r3, [r7, #16]
   17772:	1c5a      	adds	r2, r3, #1
   17774:	613a      	str	r2, [r7, #16]
   17776:	89ba      	ldrh	r2, [r7, #12]
   17778:	b2d2      	uxtb	r2, r2
   1777a:	701a      	strb	r2, [r3, #0]
   1777c:	693b      	ldr	r3, [r7, #16]
   1777e:	1c5a      	adds	r2, r3, #1
   17780:	613a      	str	r2, [r7, #16]
   17782:	89ba      	ldrh	r2, [r7, #12]
   17784:	0a12      	lsrs	r2, r2, #8
   17786:	b292      	uxth	r2, r2
   17788:	b2d2      	uxtb	r2, r2
   1778a:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   1778c:	2210      	movs	r2, #16
   1778e:	6879      	ldr	r1, [r7, #4]
   17790:	6938      	ldr	r0, [r7, #16]
   17792:	f7f4 fce5 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   17796:	6978      	ldr	r0, [r7, #20]
   17798:	f7ff f960 	bl	16a5c <hciCmdSend>
  }
}
   1779c:	bf00      	nop
   1779e:	3718      	adds	r7, #24
   177a0:	46bd      	mov	sp, r7
   177a2:	bd80      	pop	{r7, pc}

000177a4 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   177a4:	b580      	push	{r7, lr}
   177a6:	b082      	sub	sp, #8
   177a8:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   177aa:	2100      	movs	r1, #0
   177ac:	f241 0009 	movw	r0, #4105	; 0x1009
   177b0:	f7ff f926 	bl	16a00 <hciCmdAlloc>
   177b4:	6078      	str	r0, [r7, #4]
   177b6:	687b      	ldr	r3, [r7, #4]
   177b8:	2b00      	cmp	r3, #0
   177ba:	d002      	beq.n	177c2 <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
   177bc:	6878      	ldr	r0, [r7, #4]
   177be:	f7ff f94d 	bl	16a5c <hciCmdSend>
  }
}
   177c2:	bf00      	nop
   177c4:	3708      	adds	r7, #8
   177c6:	46bd      	mov	sp, r7
   177c8:	bd80      	pop	{r7, pc}

000177ca <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   177ca:	b580      	push	{r7, lr}
   177cc:	b082      	sub	sp, #8
   177ce:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   177d0:	2100      	movs	r1, #0
   177d2:	f241 0001 	movw	r0, #4097	; 0x1001
   177d6:	f7ff f913 	bl	16a00 <hciCmdAlloc>
   177da:	6078      	str	r0, [r7, #4]
   177dc:	687b      	ldr	r3, [r7, #4]
   177de:	2b00      	cmp	r3, #0
   177e0:	d002      	beq.n	177e8 <HciReadLocalVerInfoCmd+0x1e>
  {
    hciCmdSend(pBuf);
   177e2:	6878      	ldr	r0, [r7, #4]
   177e4:	f7ff f93a 	bl	16a5c <hciCmdSend>
  }
}
   177e8:	bf00      	nop
   177ea:	3708      	adds	r7, #8
   177ec:	46bd      	mov	sp, r7
   177ee:	bd80      	pop	{r7, pc}

000177f0 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   177f0:	b580      	push	{r7, lr}
   177f2:	b084      	sub	sp, #16
   177f4:	af00      	add	r7, sp, #0
   177f6:	4603      	mov	r3, r0
   177f8:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   177fa:	2102      	movs	r1, #2
   177fc:	f241 4005 	movw	r0, #5125	; 0x1405
   17800:	f7ff f8fe 	bl	16a00 <hciCmdAlloc>
   17804:	60f8      	str	r0, [r7, #12]
   17806:	68fb      	ldr	r3, [r7, #12]
   17808:	2b00      	cmp	r3, #0
   1780a:	d013      	beq.n	17834 <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1780c:	68fb      	ldr	r3, [r7, #12]
   1780e:	3303      	adds	r3, #3
   17810:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   17812:	68bb      	ldr	r3, [r7, #8]
   17814:	1c5a      	adds	r2, r3, #1
   17816:	60ba      	str	r2, [r7, #8]
   17818:	88fa      	ldrh	r2, [r7, #6]
   1781a:	b2d2      	uxtb	r2, r2
   1781c:	701a      	strb	r2, [r3, #0]
   1781e:	68bb      	ldr	r3, [r7, #8]
   17820:	1c5a      	adds	r2, r3, #1
   17822:	60ba      	str	r2, [r7, #8]
   17824:	88fa      	ldrh	r2, [r7, #6]
   17826:	0a12      	lsrs	r2, r2, #8
   17828:	b292      	uxth	r2, r2
   1782a:	b2d2      	uxtb	r2, r2
   1782c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1782e:	68f8      	ldr	r0, [r7, #12]
   17830:	f7ff f914 	bl	16a5c <hciCmdSend>
  }
}
   17834:	bf00      	nop
   17836:	3710      	adds	r7, #16
   17838:	46bd      	mov	sp, r7
   1783a:	bd80      	pop	{r7, pc}

0001783c <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   1783c:	b580      	push	{r7, lr}
   1783e:	b084      	sub	sp, #16
   17840:	af00      	add	r7, sp, #0
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   17842:	2314      	movs	r3, #20
   17844:	71bb      	strb	r3, [r7, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   17846:	4b13      	ldr	r3, [pc, #76]	; (17894 <HciResetCmd+0x58>)
   17848:	68db      	ldr	r3, [r3, #12]
   1784a:	1d3a      	adds	r2, r7, #4
   1784c:	4610      	mov	r0, r2
   1784e:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   17850:	e002      	b.n	17858 <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   17852:	68f8      	ldr	r0, [r7, #12]
   17854:	f7fc fee4 	bl	14620 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   17858:	f107 030b 	add.w	r3, r7, #11
   1785c:	4619      	mov	r1, r3
   1785e:	480e      	ldr	r0, [pc, #56]	; (17898 <HciResetCmd+0x5c>)
   17860:	f7fc ff18 	bl	14694 <WsfMsgDeq>
   17864:	60f8      	str	r0, [r7, #12]
   17866:	68fb      	ldr	r3, [r7, #12]
   17868:	2b00      	cmp	r3, #0
   1786a:	d1f2      	bne.n	17852 <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   1786c:	4b0b      	ldr	r3, [pc, #44]	; (1789c <HciResetCmd+0x60>)
   1786e:	2201      	movs	r2, #1
   17870:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   17872:	2100      	movs	r1, #0
   17874:	f640 4003 	movw	r0, #3075	; 0xc03
   17878:	f7ff f8c2 	bl	16a00 <hciCmdAlloc>
   1787c:	60f8      	str	r0, [r7, #12]
   1787e:	68fb      	ldr	r3, [r7, #12]
   17880:	2b00      	cmp	r3, #0
   17882:	d002      	beq.n	1788a <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   17884:	68f8      	ldr	r0, [r7, #12]
   17886:	f7ff f8e9 	bl	16a5c <hciCmdSend>
  }
}
   1788a:	bf00      	nop
   1788c:	3710      	adds	r7, #16
   1788e:	46bd      	mov	sp, r7
   17890:	bd80      	pop	{r7, pc}
   17892:	bf00      	nop
   17894:	1000a694 	.word	0x1000a694
   17898:	1000b058 	.word	0x1000b058
   1789c:	1000b048 	.word	0x1000b048

000178a0 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   178a0:	b580      	push	{r7, lr}
   178a2:	b084      	sub	sp, #16
   178a4:	af00      	add	r7, sp, #0
   178a6:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   178a8:	2108      	movs	r1, #8
   178aa:	f640 4001 	movw	r0, #3073	; 0xc01
   178ae:	f7ff f8a7 	bl	16a00 <hciCmdAlloc>
   178b2:	60f8      	str	r0, [r7, #12]
   178b4:	68fb      	ldr	r3, [r7, #12]
   178b6:	2b00      	cmp	r3, #0
   178b8:	d00a      	beq.n	178d0 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   178ba:	68fb      	ldr	r3, [r7, #12]
   178bc:	3303      	adds	r3, #3
   178be:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   178c0:	2208      	movs	r2, #8
   178c2:	6879      	ldr	r1, [r7, #4]
   178c4:	68b8      	ldr	r0, [r7, #8]
   178c6:	f7f4 fc4b 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   178ca:	68f8      	ldr	r0, [r7, #12]
   178cc:	f7ff f8c6 	bl	16a5c <hciCmdSend>
  }
}
   178d0:	bf00      	nop
   178d2:	3710      	adds	r7, #16
   178d4:	46bd      	mov	sp, r7
   178d6:	bd80      	pop	{r7, pc}

000178d8 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   178d8:	b580      	push	{r7, lr}
   178da:	b084      	sub	sp, #16
   178dc:	af00      	add	r7, sp, #0
   178de:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   178e0:	2108      	movs	r1, #8
   178e2:	f640 4063 	movw	r0, #3171	; 0xc63
   178e6:	f7ff f88b 	bl	16a00 <hciCmdAlloc>
   178ea:	60f8      	str	r0, [r7, #12]
   178ec:	68fb      	ldr	r3, [r7, #12]
   178ee:	2b00      	cmp	r3, #0
   178f0:	d00a      	beq.n	17908 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   178f2:	68fb      	ldr	r3, [r7, #12]
   178f4:	3303      	adds	r3, #3
   178f6:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   178f8:	2208      	movs	r2, #8
   178fa:	6879      	ldr	r1, [r7, #4]
   178fc:	68b8      	ldr	r0, [r7, #8]
   178fe:	f7f4 fc2f 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   17902:	68f8      	ldr	r0, [r7, #12]
   17904:	f7ff f8aa 	bl	16a5c <hciCmdSend>
  }
}
   17908:	bf00      	nop
   1790a:	3710      	adds	r7, #16
   1790c:	46bd      	mov	sp, r7
   1790e:	bd80      	pop	{r7, pc}

00017910 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   17910:	b580      	push	{r7, lr}
   17912:	b084      	sub	sp, #16
   17914:	af00      	add	r7, sp, #0
   17916:	4603      	mov	r3, r0
   17918:	460a      	mov	r2, r1
   1791a:	80fb      	strh	r3, [r7, #6]
   1791c:	4613      	mov	r3, r2
   1791e:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   17920:	2104      	movs	r1, #4
   17922:	f640 407c 	movw	r0, #3196	; 0xc7c
   17926:	f7ff f86b 	bl	16a00 <hciCmdAlloc>
   1792a:	60f8      	str	r0, [r7, #12]
   1792c:	68fb      	ldr	r3, [r7, #12]
   1792e:	2b00      	cmp	r3, #0
   17930:	d021      	beq.n	17976 <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17932:	68fb      	ldr	r3, [r7, #12]
   17934:	3303      	adds	r3, #3
   17936:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   17938:	68bb      	ldr	r3, [r7, #8]
   1793a:	1c5a      	adds	r2, r3, #1
   1793c:	60ba      	str	r2, [r7, #8]
   1793e:	88fa      	ldrh	r2, [r7, #6]
   17940:	b2d2      	uxtb	r2, r2
   17942:	701a      	strb	r2, [r3, #0]
   17944:	68bb      	ldr	r3, [r7, #8]
   17946:	1c5a      	adds	r2, r3, #1
   17948:	60ba      	str	r2, [r7, #8]
   1794a:	88fa      	ldrh	r2, [r7, #6]
   1794c:	0a12      	lsrs	r2, r2, #8
   1794e:	b292      	uxth	r2, r2
   17950:	b2d2      	uxtb	r2, r2
   17952:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   17954:	68bb      	ldr	r3, [r7, #8]
   17956:	1c5a      	adds	r2, r3, #1
   17958:	60ba      	str	r2, [r7, #8]
   1795a:	88ba      	ldrh	r2, [r7, #4]
   1795c:	b2d2      	uxtb	r2, r2
   1795e:	701a      	strb	r2, [r3, #0]
   17960:	68bb      	ldr	r3, [r7, #8]
   17962:	1c5a      	adds	r2, r3, #1
   17964:	60ba      	str	r2, [r7, #8]
   17966:	88ba      	ldrh	r2, [r7, #4]
   17968:	0a12      	lsrs	r2, r2, #8
   1796a:	b292      	uxth	r2, r2
   1796c:	b2d2      	uxtb	r2, r2
   1796e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17970:	68f8      	ldr	r0, [r7, #12]
   17972:	f7ff f873 	bl	16a5c <hciCmdSend>
  }
}
   17976:	bf00      	nop
   17978:	3710      	adds	r7, #16
   1797a:	46bd      	mov	sp, r7
   1797c:	bd80      	pop	{r7, pc}

0001797e <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   1797e:	b580      	push	{r7, lr}
   17980:	b086      	sub	sp, #24
   17982:	af00      	add	r7, sp, #0
   17984:	60b9      	str	r1, [r7, #8]
   17986:	607a      	str	r2, [r7, #4]
   17988:	603b      	str	r3, [r7, #0]
   1798a:	4603      	mov	r3, r0
   1798c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   1798e:	2127      	movs	r1, #39	; 0x27
   17990:	f242 0027 	movw	r0, #8231	; 0x2027
   17994:	f7ff f834 	bl	16a00 <hciCmdAlloc>
   17998:	6178      	str	r0, [r7, #20]
   1799a:	697b      	ldr	r3, [r7, #20]
   1799c:	2b00      	cmp	r3, #0
   1799e:	d01e      	beq.n	179de <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   179a0:	697b      	ldr	r3, [r7, #20]
   179a2:	3303      	adds	r3, #3
   179a4:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   179a6:	693b      	ldr	r3, [r7, #16]
   179a8:	1c5a      	adds	r2, r3, #1
   179aa:	613a      	str	r2, [r7, #16]
   179ac:	7bfa      	ldrb	r2, [r7, #15]
   179ae:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   179b0:	68b9      	ldr	r1, [r7, #8]
   179b2:	6938      	ldr	r0, [r7, #16]
   179b4:	f7fc f970 	bl	13c98 <BdaCpy>
   179b8:	693b      	ldr	r3, [r7, #16]
   179ba:	3306      	adds	r3, #6
   179bc:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   179be:	2210      	movs	r2, #16
   179c0:	6879      	ldr	r1, [r7, #4]
   179c2:	6938      	ldr	r0, [r7, #16]
   179c4:	f7f4 fbcc 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   179c8:	693b      	ldr	r3, [r7, #16]
   179ca:	3310      	adds	r3, #16
   179cc:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   179ce:	2210      	movs	r2, #16
   179d0:	6839      	ldr	r1, [r7, #0]
   179d2:	6938      	ldr	r0, [r7, #16]
   179d4:	f7f4 fbc4 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   179d8:	6978      	ldr	r0, [r7, #20]
   179da:	f7ff f83f 	bl	16a5c <hciCmdSend>
  }
}
   179de:	bf00      	nop
   179e0:	3718      	adds	r7, #24
   179e2:	46bd      	mov	sp, r7
   179e4:	bd80      	pop	{r7, pc}

000179e6 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   179e6:	b580      	push	{r7, lr}
   179e8:	b084      	sub	sp, #16
   179ea:	af00      	add	r7, sp, #0
   179ec:	4603      	mov	r3, r0
   179ee:	6039      	str	r1, [r7, #0]
   179f0:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   179f2:	2107      	movs	r1, #7
   179f4:	f242 0028 	movw	r0, #8232	; 0x2028
   179f8:	f7ff f802 	bl	16a00 <hciCmdAlloc>
   179fc:	60f8      	str	r0, [r7, #12]
   179fe:	68fb      	ldr	r3, [r7, #12]
   17a00:	2b00      	cmp	r3, #0
   17a02:	d011      	beq.n	17a28 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17a04:	68fb      	ldr	r3, [r7, #12]
   17a06:	3303      	adds	r3, #3
   17a08:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   17a0a:	68bb      	ldr	r3, [r7, #8]
   17a0c:	1c5a      	adds	r2, r3, #1
   17a0e:	60ba      	str	r2, [r7, #8]
   17a10:	79fa      	ldrb	r2, [r7, #7]
   17a12:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   17a14:	6839      	ldr	r1, [r7, #0]
   17a16:	68b8      	ldr	r0, [r7, #8]
   17a18:	f7fc f93e 	bl	13c98 <BdaCpy>
   17a1c:	68bb      	ldr	r3, [r7, #8]
   17a1e:	3306      	adds	r3, #6
   17a20:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   17a22:	68f8      	ldr	r0, [r7, #12]
   17a24:	f7ff f81a 	bl	16a5c <hciCmdSend>
  }
}
   17a28:	bf00      	nop
   17a2a:	3710      	adds	r7, #16
   17a2c:	46bd      	mov	sp, r7
   17a2e:	bd80      	pop	{r7, pc}

00017a30 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   17a30:	b580      	push	{r7, lr}
   17a32:	b082      	sub	sp, #8
   17a34:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   17a36:	2100      	movs	r1, #0
   17a38:	f242 0029 	movw	r0, #8233	; 0x2029
   17a3c:	f7fe ffe0 	bl	16a00 <hciCmdAlloc>
   17a40:	6078      	str	r0, [r7, #4]
   17a42:	687b      	ldr	r3, [r7, #4]
   17a44:	2b00      	cmp	r3, #0
   17a46:	d002      	beq.n	17a4e <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
   17a48:	6878      	ldr	r0, [r7, #4]
   17a4a:	f7ff f807 	bl	16a5c <hciCmdSend>
  }
}
   17a4e:	bf00      	nop
   17a50:	3708      	adds	r7, #8
   17a52:	46bd      	mov	sp, r7
   17a54:	bd80      	pop	{r7, pc}

00017a56 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   17a56:	b580      	push	{r7, lr}
   17a58:	b082      	sub	sp, #8
   17a5a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   17a5c:	2100      	movs	r1, #0
   17a5e:	f242 002a 	movw	r0, #8234	; 0x202a
   17a62:	f7fe ffcd 	bl	16a00 <hciCmdAlloc>
   17a66:	6078      	str	r0, [r7, #4]
   17a68:	687b      	ldr	r3, [r7, #4]
   17a6a:	2b00      	cmp	r3, #0
   17a6c:	d002      	beq.n	17a74 <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
   17a6e:	6878      	ldr	r0, [r7, #4]
   17a70:	f7fe fff4 	bl	16a5c <hciCmdSend>
  }
}
   17a74:	bf00      	nop
   17a76:	3708      	adds	r7, #8
   17a78:	46bd      	mov	sp, r7
   17a7a:	bd80      	pop	{r7, pc}

00017a7c <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   17a7c:	b580      	push	{r7, lr}
   17a7e:	b084      	sub	sp, #16
   17a80:	af00      	add	r7, sp, #0
   17a82:	4603      	mov	r3, r0
   17a84:	6039      	str	r1, [r7, #0]
   17a86:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
   17a88:	2107      	movs	r1, #7
   17a8a:	f242 002b 	movw	r0, #8235	; 0x202b
   17a8e:	f7fe ffb7 	bl	16a00 <hciCmdAlloc>
   17a92:	60f8      	str	r0, [r7, #12]
   17a94:	68fb      	ldr	r3, [r7, #12]
   17a96:	2b00      	cmp	r3, #0
   17a98:	d011      	beq.n	17abe <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17a9a:	68fb      	ldr	r3, [r7, #12]
   17a9c:	3303      	adds	r3, #3
   17a9e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   17aa0:	68bb      	ldr	r3, [r7, #8]
   17aa2:	1c5a      	adds	r2, r3, #1
   17aa4:	60ba      	str	r2, [r7, #8]
   17aa6:	79fa      	ldrb	r2, [r7, #7]
   17aa8:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   17aaa:	6839      	ldr	r1, [r7, #0]
   17aac:	68b8      	ldr	r0, [r7, #8]
   17aae:	f7fc f8f3 	bl	13c98 <BdaCpy>
   17ab2:	68bb      	ldr	r3, [r7, #8]
   17ab4:	3306      	adds	r3, #6
   17ab6:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   17ab8:	68f8      	ldr	r0, [r7, #12]
   17aba:	f7fe ffcf 	bl	16a5c <hciCmdSend>
  }
}
   17abe:	bf00      	nop
   17ac0:	3710      	adds	r7, #16
   17ac2:	46bd      	mov	sp, r7
   17ac4:	bd80      	pop	{r7, pc}

00017ac6 <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   17ac6:	b580      	push	{r7, lr}
   17ac8:	b084      	sub	sp, #16
   17aca:	af00      	add	r7, sp, #0
   17acc:	4603      	mov	r3, r0
   17ace:	6039      	str	r1, [r7, #0]
   17ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
   17ad2:	2107      	movs	r1, #7
   17ad4:	f242 002c 	movw	r0, #8236	; 0x202c
   17ad8:	f7fe ff92 	bl	16a00 <hciCmdAlloc>
   17adc:	60f8      	str	r0, [r7, #12]
   17ade:	68fb      	ldr	r3, [r7, #12]
   17ae0:	2b00      	cmp	r3, #0
   17ae2:	d011      	beq.n	17b08 <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17ae4:	68fb      	ldr	r3, [r7, #12]
   17ae6:	3303      	adds	r3, #3
   17ae8:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   17aea:	68bb      	ldr	r3, [r7, #8]
   17aec:	1c5a      	adds	r2, r3, #1
   17aee:	60ba      	str	r2, [r7, #8]
   17af0:	79fa      	ldrb	r2, [r7, #7]
   17af2:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   17af4:	6839      	ldr	r1, [r7, #0]
   17af6:	68b8      	ldr	r0, [r7, #8]
   17af8:	f7fc f8ce 	bl	13c98 <BdaCpy>
   17afc:	68bb      	ldr	r3, [r7, #8]
   17afe:	3306      	adds	r3, #6
   17b00:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   17b02:	68f8      	ldr	r0, [r7, #12]
   17b04:	f7fe ffaa 	bl	16a5c <hciCmdSend>
  }
}
   17b08:	bf00      	nop
   17b0a:	3710      	adds	r7, #16
   17b0c:	46bd      	mov	sp, r7
   17b0e:	bd80      	pop	{r7, pc}

00017b10 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   17b10:	b580      	push	{r7, lr}
   17b12:	b084      	sub	sp, #16
   17b14:	af00      	add	r7, sp, #0
   17b16:	4603      	mov	r3, r0
   17b18:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   17b1a:	2101      	movs	r1, #1
   17b1c:	f242 002d 	movw	r0, #8237	; 0x202d
   17b20:	f7fe ff6e 	bl	16a00 <hciCmdAlloc>
   17b24:	60f8      	str	r0, [r7, #12]
   17b26:	68fb      	ldr	r3, [r7, #12]
   17b28:	2b00      	cmp	r3, #0
   17b2a:	d00a      	beq.n	17b42 <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17b2c:	68fb      	ldr	r3, [r7, #12]
   17b2e:	3303      	adds	r3, #3
   17b30:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   17b32:	68bb      	ldr	r3, [r7, #8]
   17b34:	1c5a      	adds	r2, r3, #1
   17b36:	60ba      	str	r2, [r7, #8]
   17b38:	79fa      	ldrb	r2, [r7, #7]
   17b3a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17b3c:	68f8      	ldr	r0, [r7, #12]
   17b3e:	f7fe ff8d 	bl	16a5c <hciCmdSend>
  }
}
   17b42:	bf00      	nop
   17b44:	3710      	adds	r7, #16
   17b46:	46bd      	mov	sp, r7
   17b48:	bd80      	pop	{r7, pc}

00017b4a <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
   17b4a:	b580      	push	{r7, lr}
   17b4c:	b084      	sub	sp, #16
   17b4e:	af00      	add	r7, sp, #0
   17b50:	4603      	mov	r3, r0
   17b52:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
   17b54:	2102      	movs	r1, #2
   17b56:	f242 002e 	movw	r0, #8238	; 0x202e
   17b5a:	f7fe ff51 	bl	16a00 <hciCmdAlloc>
   17b5e:	60f8      	str	r0, [r7, #12]
   17b60:	68fb      	ldr	r3, [r7, #12]
   17b62:	2b00      	cmp	r3, #0
   17b64:	d013      	beq.n	17b8e <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17b66:	68fb      	ldr	r3, [r7, #12]
   17b68:	3303      	adds	r3, #3
   17b6a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
   17b6c:	68bb      	ldr	r3, [r7, #8]
   17b6e:	1c5a      	adds	r2, r3, #1
   17b70:	60ba      	str	r2, [r7, #8]
   17b72:	88fa      	ldrh	r2, [r7, #6]
   17b74:	b2d2      	uxtb	r2, r2
   17b76:	701a      	strb	r2, [r3, #0]
   17b78:	68bb      	ldr	r3, [r7, #8]
   17b7a:	1c5a      	adds	r2, r3, #1
   17b7c:	60ba      	str	r2, [r7, #8]
   17b7e:	88fa      	ldrh	r2, [r7, #6]
   17b80:	0a12      	lsrs	r2, r2, #8
   17b82:	b292      	uxth	r2, r2
   17b84:	b2d2      	uxtb	r2, r2
   17b86:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17b88:	68f8      	ldr	r0, [r7, #12]
   17b8a:	f7fe ff67 	bl	16a5c <hciCmdSend>
  }
}
   17b8e:	bf00      	nop
   17b90:	3710      	adds	r7, #16
   17b92:	46bd      	mov	sp, r7
   17b94:	bd80      	pop	{r7, pc}

00017b96 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   17b96:	b580      	push	{r7, lr}
   17b98:	b084      	sub	sp, #16
   17b9a:	af00      	add	r7, sp, #0
   17b9c:	4603      	mov	r3, r0
   17b9e:	6039      	str	r1, [r7, #0]
   17ba0:	71fb      	strb	r3, [r7, #7]
   17ba2:	4613      	mov	r3, r2
   17ba4:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   17ba6:	2108      	movs	r1, #8
   17ba8:	f242 004e 	movw	r0, #8270	; 0x204e
   17bac:	f7fe ff28 	bl	16a00 <hciCmdAlloc>
   17bb0:	60f8      	str	r0, [r7, #12]
   17bb2:	68fb      	ldr	r3, [r7, #12]
   17bb4:	2b00      	cmp	r3, #0
   17bb6:	d016      	beq.n	17be6 <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17bb8:	68fb      	ldr	r3, [r7, #12]
   17bba:	3303      	adds	r3, #3
   17bbc:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   17bbe:	68bb      	ldr	r3, [r7, #8]
   17bc0:	1c5a      	adds	r2, r3, #1
   17bc2:	60ba      	str	r2, [r7, #8]
   17bc4:	79fa      	ldrb	r2, [r7, #7]
   17bc6:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   17bc8:	6839      	ldr	r1, [r7, #0]
   17bca:	68b8      	ldr	r0, [r7, #8]
   17bcc:	f7fc f864 	bl	13c98 <BdaCpy>
   17bd0:	68bb      	ldr	r3, [r7, #8]
   17bd2:	3306      	adds	r3, #6
   17bd4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
   17bd6:	68bb      	ldr	r3, [r7, #8]
   17bd8:	1c5a      	adds	r2, r3, #1
   17bda:	60ba      	str	r2, [r7, #8]
   17bdc:	79ba      	ldrb	r2, [r7, #6]
   17bde:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   17be0:	68f8      	ldr	r0, [r7, #12]
   17be2:	f7fe ff3b 	bl	16a5c <hciCmdSend>
  }
}
   17be6:	bf00      	nop
   17be8:	3710      	adds	r7, #16
   17bea:	46bd      	mov	sp, r7
   17bec:	bd80      	pop	{r7, pc}

00017bee <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   17bee:	b580      	push	{r7, lr}
   17bf0:	b084      	sub	sp, #16
   17bf2:	af00      	add	r7, sp, #0
   17bf4:	4603      	mov	r3, r0
   17bf6:	603a      	str	r2, [r7, #0]
   17bf8:	80fb      	strh	r3, [r7, #6]
   17bfa:	460b      	mov	r3, r1
   17bfc:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
   17bfe:	797b      	ldrb	r3, [r7, #5]
   17c00:	b29a      	uxth	r2, r3
   17c02:	88fb      	ldrh	r3, [r7, #6]
   17c04:	4611      	mov	r1, r2
   17c06:	4618      	mov	r0, r3
   17c08:	f7fe fefa 	bl	16a00 <hciCmdAlloc>
   17c0c:	60f8      	str	r0, [r7, #12]
   17c0e:	68fb      	ldr	r3, [r7, #12]
   17c10:	2b00      	cmp	r3, #0
   17c12:	d00b      	beq.n	17c2c <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   17c14:	68fb      	ldr	r3, [r7, #12]
   17c16:	3303      	adds	r3, #3
   17c18:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
   17c1a:	797b      	ldrb	r3, [r7, #5]
   17c1c:	461a      	mov	r2, r3
   17c1e:	6839      	ldr	r1, [r7, #0]
   17c20:	68b8      	ldr	r0, [r7, #8]
   17c22:	f7f4 fa9d 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   17c26:	68f8      	ldr	r0, [r7, #12]
   17c28:	f7fe ff18 	bl	16a5c <hciCmdSend>
  }
}
   17c2c:	bf00      	nop
   17c2e:	3710      	adds	r7, #16
   17c30:	46bd      	mov	sp, r7
   17c32:	bd80      	pop	{r7, pc}

00017c34 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   17c34:	b480      	push	{r7}
   17c36:	b085      	sub	sp, #20
   17c38:	af00      	add	r7, sp, #0
   17c3a:	4603      	mov	r3, r0
   17c3c:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   17c3e:	4b13      	ldr	r3, [pc, #76]	; (17c8c <hciCoreConnAlloc+0x58>)
   17c40:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17c42:	2308      	movs	r3, #8
   17c44:	73fb      	strb	r3, [r7, #15]
   17c46:	e018      	b.n	17c7a <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   17c48:	68bb      	ldr	r3, [r7, #8]
   17c4a:	8a1b      	ldrh	r3, [r3, #16]
   17c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c50:	4293      	cmp	r3, r2
   17c52:	d10c      	bne.n	17c6e <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   17c54:	68bb      	ldr	r3, [r7, #8]
   17c56:	88fa      	ldrh	r2, [r7, #6]
   17c58:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   17c5a:	68bb      	ldr	r3, [r7, #8]
   17c5c:	2200      	movs	r2, #0
   17c5e:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   17c60:	68bb      	ldr	r3, [r7, #8]
   17c62:	2200      	movs	r2, #0
   17c64:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   17c66:	68bb      	ldr	r3, [r7, #8]
   17c68:	2200      	movs	r2, #0
   17c6a:	761a      	strb	r2, [r3, #24]

      return;
   17c6c:	e008      	b.n	17c80 <hciCoreConnAlloc+0x4c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17c6e:	7bfb      	ldrb	r3, [r7, #15]
   17c70:	3b01      	subs	r3, #1
   17c72:	73fb      	strb	r3, [r7, #15]
   17c74:	68bb      	ldr	r3, [r7, #8]
   17c76:	331c      	adds	r3, #28
   17c78:	60bb      	str	r3, [r7, #8]
   17c7a:	7bfb      	ldrb	r3, [r7, #15]
   17c7c:	2b00      	cmp	r3, #0
   17c7e:	d1e3      	bne.n	17c48 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   17c80:	3714      	adds	r7, #20
   17c82:	46bd      	mov	sp, r7
   17c84:	f85d 7b04 	ldr.w	r7, [sp], #4
   17c88:	4770      	bx	lr
   17c8a:	bf00      	nop
   17c8c:	1000b064 	.word	0x1000b064

00017c90 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   17c90:	b580      	push	{r7, lr}
   17c92:	b084      	sub	sp, #16
   17c94:	af00      	add	r7, sp, #0
   17c96:	4603      	mov	r3, r0
   17c98:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   17c9a:	4b1d      	ldr	r3, [pc, #116]	; (17d10 <hciCoreConnFree+0x80>)
   17c9c:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17c9e:	2308      	movs	r3, #8
   17ca0:	73fb      	strb	r3, [r7, #15]
   17ca2:	e02f      	b.n	17d04 <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
   17ca4:	68bb      	ldr	r3, [r7, #8]
   17ca6:	8a1b      	ldrh	r3, [r3, #16]
   17ca8:	88fa      	ldrh	r2, [r7, #6]
   17caa:	429a      	cmp	r2, r3
   17cac:	d124      	bne.n	17cf8 <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   17cae:	68bb      	ldr	r3, [r7, #8]
   17cb0:	681b      	ldr	r3, [r3, #0]
   17cb2:	2b00      	cmp	r3, #0
   17cb4:	d007      	beq.n	17cc6 <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   17cb6:	68bb      	ldr	r3, [r7, #8]
   17cb8:	681b      	ldr	r3, [r3, #0]
   17cba:	4618      	mov	r0, r3
   17cbc:	f7fc fcb0 	bl	14620 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   17cc0:	68bb      	ldr	r3, [r7, #8]
   17cc2:	2200      	movs	r2, #0
   17cc4:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   17cc6:	68bb      	ldr	r3, [r7, #8]
   17cc8:	2200      	movs	r2, #0
   17cca:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   17ccc:	68bb      	ldr	r3, [r7, #8]
   17cce:	689b      	ldr	r3, [r3, #8]
   17cd0:	2b00      	cmp	r3, #0
   17cd2:	d007      	beq.n	17ce4 <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   17cd4:	68bb      	ldr	r3, [r7, #8]
   17cd6:	689b      	ldr	r3, [r3, #8]
   17cd8:	4618      	mov	r0, r3
   17cda:	f7fc fca1 	bl	14620 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   17cde:	68bb      	ldr	r3, [r7, #8]
   17ce0:	2200      	movs	r2, #0
   17ce2:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   17ce4:	68bb      	ldr	r3, [r7, #8]
   17ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17cea:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   17cec:	68bb      	ldr	r3, [r7, #8]
   17cee:	7e5b      	ldrb	r3, [r3, #25]
   17cf0:	4618      	mov	r0, r3
   17cf2:	f000 f895 	bl	17e20 <hciCoreTxReady>

      return;
   17cf6:	e008      	b.n	17d0a <hciCoreConnFree+0x7a>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17cf8:	7bfb      	ldrb	r3, [r7, #15]
   17cfa:	3b01      	subs	r3, #1
   17cfc:	73fb      	strb	r3, [r7, #15]
   17cfe:	68bb      	ldr	r3, [r7, #8]
   17d00:	331c      	adds	r3, #28
   17d02:	60bb      	str	r3, [r7, #8]
   17d04:	7bfb      	ldrb	r3, [r7, #15]
   17d06:	2b00      	cmp	r3, #0
   17d08:	d1cc      	bne.n	17ca4 <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   17d0a:	3710      	adds	r7, #16
   17d0c:	46bd      	mov	sp, r7
   17d0e:	bd80      	pop	{r7, pc}
   17d10:	1000b064 	.word	0x1000b064

00017d14 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   17d14:	b480      	push	{r7}
   17d16:	b085      	sub	sp, #20
   17d18:	af00      	add	r7, sp, #0
   17d1a:	4603      	mov	r3, r0
   17d1c:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   17d1e:	4b0e      	ldr	r3, [pc, #56]	; (17d58 <hciCoreConnByHandle+0x44>)
   17d20:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17d22:	2308      	movs	r3, #8
   17d24:	73fb      	strb	r3, [r7, #15]
   17d26:	e00c      	b.n	17d42 <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
   17d28:	68bb      	ldr	r3, [r7, #8]
   17d2a:	8a1b      	ldrh	r3, [r3, #16]
   17d2c:	88fa      	ldrh	r2, [r7, #6]
   17d2e:	429a      	cmp	r2, r3
   17d30:	d101      	bne.n	17d36 <hciCoreConnByHandle+0x22>
    {
      return pConn;
   17d32:	68bb      	ldr	r3, [r7, #8]
   17d34:	e009      	b.n	17d4a <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17d36:	7bfb      	ldrb	r3, [r7, #15]
   17d38:	3b01      	subs	r3, #1
   17d3a:	73fb      	strb	r3, [r7, #15]
   17d3c:	68bb      	ldr	r3, [r7, #8]
   17d3e:	331c      	adds	r3, #28
   17d40:	60bb      	str	r3, [r7, #8]
   17d42:	7bfb      	ldrb	r3, [r7, #15]
   17d44:	2b00      	cmp	r3, #0
   17d46:	d1ef      	bne.n	17d28 <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   17d48:	2300      	movs	r3, #0
}
   17d4a:	4618      	mov	r0, r3
   17d4c:	3714      	adds	r7, #20
   17d4e:	46bd      	mov	sp, r7
   17d50:	f85d 7b04 	ldr.w	r7, [sp], #4
   17d54:	4770      	bx	lr
   17d56:	bf00      	nop
   17d58:	1000b064 	.word	0x1000b064

00017d5c <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   17d5c:	b480      	push	{r7}
   17d5e:	b083      	sub	sp, #12
   17d60:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   17d62:	4b10      	ldr	r3, [pc, #64]	; (17da4 <hciCoreNextConnFragment+0x48>)
   17d64:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17d66:	2308      	movs	r3, #8
   17d68:	71fb      	strb	r3, [r7, #7]
   17d6a:	e011      	b.n	17d90 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   17d6c:	683b      	ldr	r3, [r7, #0]
   17d6e:	8a1b      	ldrh	r3, [r3, #16]
   17d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17d74:	4293      	cmp	r3, r2
   17d76:	d005      	beq.n	17d84 <hciCoreNextConnFragment+0x28>
   17d78:	683b      	ldr	r3, [r7, #0]
   17d7a:	7d9b      	ldrb	r3, [r3, #22]
   17d7c:	2b00      	cmp	r3, #0
   17d7e:	d001      	beq.n	17d84 <hciCoreNextConnFragment+0x28>
    {
      return pConn;
   17d80:	683b      	ldr	r3, [r7, #0]
   17d82:	e009      	b.n	17d98 <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17d84:	79fb      	ldrb	r3, [r7, #7]
   17d86:	3b01      	subs	r3, #1
   17d88:	71fb      	strb	r3, [r7, #7]
   17d8a:	683b      	ldr	r3, [r7, #0]
   17d8c:	331c      	adds	r3, #28
   17d8e:	603b      	str	r3, [r7, #0]
   17d90:	79fb      	ldrb	r3, [r7, #7]
   17d92:	2b00      	cmp	r3, #0
   17d94:	d1ea      	bne.n	17d6c <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
   17d96:	2300      	movs	r3, #0
}
   17d98:	4618      	mov	r0, r3
   17d9a:	370c      	adds	r7, #12
   17d9c:	46bd      	mov	sp, r7
   17d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17da2:	4770      	bx	lr
   17da4:	1000b064 	.word	0x1000b064

00017da8 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   17da8:	b580      	push	{r7, lr}
   17daa:	b082      	sub	sp, #8
   17dac:	af00      	add	r7, sp, #0
   17dae:	4603      	mov	r3, r0
   17db0:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   17db2:	88fb      	ldrh	r3, [r7, #6]
   17db4:	4618      	mov	r0, r3
   17db6:	f7ff ff3d 	bl	17c34 <hciCoreConnAlloc>
}
   17dba:	bf00      	nop
   17dbc:	3708      	adds	r7, #8
   17dbe:	46bd      	mov	sp, r7
   17dc0:	bd80      	pop	{r7, pc}

00017dc2 <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   17dc2:	b580      	push	{r7, lr}
   17dc4:	b082      	sub	sp, #8
   17dc6:	af00      	add	r7, sp, #0
   17dc8:	4603      	mov	r3, r0
   17dca:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   17dcc:	88fb      	ldrh	r3, [r7, #6]
   17dce:	4618      	mov	r0, r3
   17dd0:	f7ff ff5e 	bl	17c90 <hciCoreConnFree>
}
   17dd4:	bf00      	nop
   17dd6:	3708      	adds	r7, #8
   17dd8:	46bd      	mov	sp, r7
   17dda:	bd80      	pop	{r7, pc}

00017ddc <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   17ddc:	b580      	push	{r7, lr}
   17dde:	b082      	sub	sp, #8
   17de0:	af00      	add	r7, sp, #0
   17de2:	6078      	str	r0, [r7, #4]
   17de4:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   17de6:	687b      	ldr	r3, [r7, #4]
   17de8:	7e5b      	ldrb	r3, [r3, #25]
   17dea:	3301      	adds	r3, #1
   17dec:	b2da      	uxtb	r2, r3
   17dee:	687b      	ldr	r3, [r7, #4]
   17df0:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   17df2:	6839      	ldr	r1, [r7, #0]
   17df4:	6878      	ldr	r0, [r7, #4]
   17df6:	f002 fa37 	bl	1a268 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   17dfa:	4b08      	ldr	r3, [pc, #32]	; (17e1c <hciCoreSendAclData+0x40>)
   17dfc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   17e00:	2b00      	cmp	r3, #0
   17e02:	d007      	beq.n	17e14 <hciCoreSendAclData+0x38>
  {
    hciCoreCb.availBufs--;
   17e04:	4b05      	ldr	r3, [pc, #20]	; (17e1c <hciCoreSendAclData+0x40>)
   17e06:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   17e0a:	3b01      	subs	r3, #1
   17e0c:	b2da      	uxtb	r2, r3
   17e0e:	4b03      	ldr	r3, [pc, #12]	; (17e1c <hciCoreSendAclData+0x40>)
   17e10:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   17e14:	bf00      	nop
   17e16:	3708      	adds	r7, #8
   17e18:	46bd      	mov	sp, r7
   17e1a:	bd80      	pop	{r7, pc}
   17e1c:	1000b064 	.word	0x1000b064

00017e20 <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   17e20:	b580      	push	{r7, lr}
   17e22:	b086      	sub	sp, #24
   17e24:	af00      	add	r7, sp, #0
   17e26:	4603      	mov	r3, r0
   17e28:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   17e2a:	79fb      	ldrb	r3, [r7, #7]
   17e2c:	2b00      	cmp	r3, #0
   17e2e:	d050      	beq.n	17ed2 <hciCoreTxReady+0xb2>
  {
    hciCoreCb.availBufs += bufs;
   17e30:	4b2d      	ldr	r3, [pc, #180]	; (17ee8 <hciCoreTxReady+0xc8>)
   17e32:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   17e36:	79fb      	ldrb	r3, [r7, #7]
   17e38:	4413      	add	r3, r2
   17e3a:	b2da      	uxtb	r2, r3
   17e3c:	4b2a      	ldr	r3, [pc, #168]	; (17ee8 <hciCoreTxReady+0xc8>)
   17e3e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   17e42:	4b29      	ldr	r3, [pc, #164]	; (17ee8 <hciCoreTxReady+0xc8>)
   17e44:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   17e48:	4b27      	ldr	r3, [pc, #156]	; (17ee8 <hciCoreTxReady+0xc8>)
   17e4a:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   17e4e:	429a      	cmp	r2, r3
   17e50:	d93f      	bls.n	17ed2 <hciCoreTxReady+0xb2>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   17e52:	4b25      	ldr	r3, [pc, #148]	; (17ee8 <hciCoreTxReady+0xc8>)
   17e54:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   17e58:	4b23      	ldr	r3, [pc, #140]	; (17ee8 <hciCoreTxReady+0xc8>)
   17e5a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   17e5e:	e038      	b.n	17ed2 <hciCoreTxReady+0xb2>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   17e60:	2000      	movs	r0, #0
   17e62:	f000 f88d 	bl	17f80 <hciCoreTxAclContinue>
   17e66:	4603      	mov	r3, r0
   17e68:	2b00      	cmp	r3, #0
   17e6a:	d132      	bne.n	17ed2 <hciCoreTxReady+0xb2>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   17e6c:	f107 030b 	add.w	r3, r7, #11
   17e70:	4619      	mov	r1, r3
   17e72:	481e      	ldr	r0, [pc, #120]	; (17eec <hciCoreTxReady+0xcc>)
   17e74:	f7fc fc0e 	bl	14694 <WsfMsgDeq>
   17e78:	6178      	str	r0, [r7, #20]
   17e7a:	697b      	ldr	r3, [r7, #20]
   17e7c:	2b00      	cmp	r3, #0
   17e7e:	d02e      	beq.n	17ede <hciCoreTxReady+0xbe>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   17e80:	697b      	ldr	r3, [r7, #20]
   17e82:	781b      	ldrb	r3, [r3, #0]
   17e84:	b29a      	uxth	r2, r3
   17e86:	697b      	ldr	r3, [r7, #20]
   17e88:	3301      	adds	r3, #1
   17e8a:	781b      	ldrb	r3, [r3, #0]
   17e8c:	b29b      	uxth	r3, r3
   17e8e:	021b      	lsls	r3, r3, #8
   17e90:	b29b      	uxth	r3, r3
   17e92:	4413      	add	r3, r2
   17e94:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   17e96:	697b      	ldr	r3, [r7, #20]
   17e98:	3302      	adds	r3, #2
   17e9a:	781b      	ldrb	r3, [r3, #0]
   17e9c:	b29a      	uxth	r2, r3
   17e9e:	697b      	ldr	r3, [r7, #20]
   17ea0:	3303      	adds	r3, #3
   17ea2:	781b      	ldrb	r3, [r3, #0]
   17ea4:	b29b      	uxth	r3, r3
   17ea6:	021b      	lsls	r3, r3, #8
   17ea8:	b29b      	uxth	r3, r3
   17eaa:	4413      	add	r3, r2
   17eac:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   17eae:	8a7b      	ldrh	r3, [r7, #18]
   17eb0:	4618      	mov	r0, r3
   17eb2:	f7ff ff2f 	bl	17d14 <hciCoreConnByHandle>
   17eb6:	60f8      	str	r0, [r7, #12]
   17eb8:	68fb      	ldr	r3, [r7, #12]
   17eba:	2b00      	cmp	r3, #0
   17ebc:	d006      	beq.n	17ecc <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
   17ebe:	8a3b      	ldrh	r3, [r7, #16]
   17ec0:	697a      	ldr	r2, [r7, #20]
   17ec2:	4619      	mov	r1, r3
   17ec4:	68f8      	ldr	r0, [r7, #12]
   17ec6:	f000 f813 	bl	17ef0 <hciCoreTxAclStart>
   17eca:	e002      	b.n	17ed2 <hciCoreTxReady+0xb2>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   17ecc:	6978      	ldr	r0, [r7, #20]
   17ece:	f7fc fba7 	bl	14620 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   17ed2:	4b05      	ldr	r3, [pc, #20]	; (17ee8 <hciCoreTxReady+0xc8>)
   17ed4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   17ed8:	2b00      	cmp	r3, #0
   17eda:	d1c1      	bne.n	17e60 <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   17edc:	e000      	b.n	17ee0 <hciCoreTxReady+0xc0>
        break;
   17ede:	bf00      	nop
}
   17ee0:	bf00      	nop
   17ee2:	3718      	adds	r7, #24
   17ee4:	46bd      	mov	sp, r7
   17ee6:	bd80      	pop	{r7, pc}
   17ee8:	1000b064 	.word	0x1000b064
   17eec:	1000b154 	.word	0x1000b154

00017ef0 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   17ef0:	b580      	push	{r7, lr}
   17ef2:	b086      	sub	sp, #24
   17ef4:	af00      	add	r7, sp, #0
   17ef6:	60f8      	str	r0, [r7, #12]
   17ef8:	460b      	mov	r3, r1
   17efa:	607a      	str	r2, [r7, #4]
   17efc:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   17efe:	f000 fb85 	bl	1860c <HciGetBufSize>
   17f02:	4603      	mov	r3, r0
   17f04:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   17f06:	897a      	ldrh	r2, [r7, #10]
   17f08:	8afb      	ldrh	r3, [r7, #22]
   17f0a:	429a      	cmp	r2, r3
   17f0c:	d92d      	bls.n	17f6a <hciCoreTxAclStart+0x7a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   17f0e:	897a      	ldrh	r2, [r7, #10]
   17f10:	8afb      	ldrh	r3, [r7, #22]
   17f12:	1ad3      	subs	r3, r2, r3
   17f14:	b29a      	uxth	r2, r3
   17f16:	68fb      	ldr	r3, [r7, #12]
   17f18:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   17f1a:	8afb      	ldrh	r3, [r7, #22]
   17f1c:	687a      	ldr	r2, [r7, #4]
   17f1e:	441a      	add	r2, r3
   17f20:	68fb      	ldr	r3, [r7, #12]
   17f22:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   17f24:	68fb      	ldr	r3, [r7, #12]
   17f26:	687a      	ldr	r2, [r7, #4]
   17f28:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   17f2a:	68fb      	ldr	r3, [r7, #12]
   17f2c:	2201      	movs	r2, #1
   17f2e:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   17f30:	687b      	ldr	r3, [r7, #4]
   17f32:	3302      	adds	r3, #2
   17f34:	8afa      	ldrh	r2, [r7, #22]
   17f36:	b2d2      	uxtb	r2, r2
   17f38:	701a      	strb	r2, [r3, #0]
   17f3a:	687b      	ldr	r3, [r7, #4]
   17f3c:	3303      	adds	r3, #3
   17f3e:	8afa      	ldrh	r2, [r7, #22]
   17f40:	0a12      	lsrs	r2, r2, #8
   17f42:	b292      	uxth	r2, r2
   17f44:	b2d2      	uxtb	r2, r2
   17f46:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   17f48:	6879      	ldr	r1, [r7, #4]
   17f4a:	68f8      	ldr	r0, [r7, #12]
   17f4c:	f7ff ff46 	bl	17ddc <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   17f50:	bf00      	nop
   17f52:	4b0a      	ldr	r3, [pc, #40]	; (17f7c <hciCoreTxAclStart+0x8c>)
   17f54:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   17f58:	2b00      	cmp	r3, #0
   17f5a:	d00a      	beq.n	17f72 <hciCoreTxAclStart+0x82>
   17f5c:	68f8      	ldr	r0, [r7, #12]
   17f5e:	f000 f80f 	bl	17f80 <hciCoreTxAclContinue>
   17f62:	4603      	mov	r3, r0
   17f64:	2b00      	cmp	r3, #0
   17f66:	d1f4      	bne.n	17f52 <hciCoreTxAclStart+0x62>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   17f68:	e003      	b.n	17f72 <hciCoreTxAclStart+0x82>
    hciCoreSendAclData(pConn, pData);
   17f6a:	6879      	ldr	r1, [r7, #4]
   17f6c:	68f8      	ldr	r0, [r7, #12]
   17f6e:	f7ff ff35 	bl	17ddc <hciCoreSendAclData>
}
   17f72:	bf00      	nop
   17f74:	3718      	adds	r7, #24
   17f76:	46bd      	mov	sp, r7
   17f78:	bd80      	pop	{r7, pc}
   17f7a:	bf00      	nop
   17f7c:	1000b064 	.word	0x1000b064

00017f80 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   17f80:	b590      	push	{r4, r7, lr}
   17f82:	b085      	sub	sp, #20
   17f84:	af00      	add	r7, sp, #0
   17f86:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   17f88:	687b      	ldr	r3, [r7, #4]
   17f8a:	2b00      	cmp	r3, #0
   17f8c:	d102      	bne.n	17f94 <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
   17f8e:	f7ff fee5 	bl	17d5c <hciCoreNextConnFragment>
   17f92:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
   17f94:	687b      	ldr	r3, [r7, #4]
   17f96:	2b00      	cmp	r3, #0
   17f98:	d049      	beq.n	1802e <hciCoreTxAclContinue+0xae>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   17f9a:	687b      	ldr	r3, [r7, #4]
   17f9c:	8a5c      	ldrh	r4, [r3, #18]
   17f9e:	f000 fb35 	bl	1860c <HciGetBufSize>
   17fa2:	4603      	mov	r3, r0
   17fa4:	429c      	cmp	r4, r3
   17fa6:	d202      	bcs.n	17fae <hciCoreTxAclContinue+0x2e>
   17fa8:	687b      	ldr	r3, [r7, #4]
   17faa:	8a5b      	ldrh	r3, [r3, #18]
   17fac:	e002      	b.n	17fb4 <hciCoreTxAclContinue+0x34>
   17fae:	f000 fb2d 	bl	1860c <HciGetBufSize>
   17fb2:	4603      	mov	r3, r0
   17fb4:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
   17fb6:	89fb      	ldrh	r3, [r7, #14]
   17fb8:	2b00      	cmp	r3, #0
   17fba:	d038      	beq.n	1802e <hciCoreTxAclContinue+0xae>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   17fbc:	687b      	ldr	r3, [r7, #4]
   17fbe:	8a5a      	ldrh	r2, [r3, #18]
   17fc0:	89fb      	ldrh	r3, [r7, #14]
   17fc2:	1ad3      	subs	r3, r2, r3
   17fc4:	b29a      	uxth	r2, r3
   17fc6:	687b      	ldr	r3, [r7, #4]
   17fc8:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   17fca:	687b      	ldr	r3, [r7, #4]
   17fcc:	685b      	ldr	r3, [r3, #4]
   17fce:	687a      	ldr	r2, [r7, #4]
   17fd0:	8a12      	ldrh	r2, [r2, #16]
   17fd2:	b2d2      	uxtb	r2, r2
   17fd4:	701a      	strb	r2, [r3, #0]
   17fd6:	687b      	ldr	r3, [r7, #4]
   17fd8:	685b      	ldr	r3, [r3, #4]
   17fda:	3301      	adds	r3, #1
   17fdc:	687a      	ldr	r2, [r7, #4]
   17fde:	8a12      	ldrh	r2, [r2, #16]
   17fe0:	0a12      	lsrs	r2, r2, #8
   17fe2:	b292      	uxth	r2, r2
   17fe4:	f042 0210 	orr.w	r2, r2, #16
   17fe8:	b292      	uxth	r2, r2
   17fea:	b2d2      	uxtb	r2, r2
   17fec:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   17fee:	687b      	ldr	r3, [r7, #4]
   17ff0:	685b      	ldr	r3, [r3, #4]
   17ff2:	3302      	adds	r3, #2
   17ff4:	89fa      	ldrh	r2, [r7, #14]
   17ff6:	b2d2      	uxtb	r2, r2
   17ff8:	701a      	strb	r2, [r3, #0]
   17ffa:	687b      	ldr	r3, [r7, #4]
   17ffc:	685b      	ldr	r3, [r3, #4]
   17ffe:	3303      	adds	r3, #3
   18000:	89fa      	ldrh	r2, [r7, #14]
   18002:	0a12      	lsrs	r2, r2, #8
   18004:	b292      	uxth	r2, r2
   18006:	b2d2      	uxtb	r2, r2
   18008:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   1800a:	687b      	ldr	r3, [r7, #4]
   1800c:	685b      	ldr	r3, [r3, #4]
   1800e:	4619      	mov	r1, r3
   18010:	6878      	ldr	r0, [r7, #4]
   18012:	f7ff fee3 	bl	17ddc <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   18016:	687b      	ldr	r3, [r7, #4]
   18018:	8a5b      	ldrh	r3, [r3, #18]
   1801a:	2b00      	cmp	r3, #0
   1801c:	d005      	beq.n	1802a <hciCoreTxAclContinue+0xaa>
      {
        pConn->pNextTxFrag += aclLen;
   1801e:	687b      	ldr	r3, [r7, #4]
   18020:	685a      	ldr	r2, [r3, #4]
   18022:	89fb      	ldrh	r3, [r7, #14]
   18024:	441a      	add	r2, r3
   18026:	687b      	ldr	r3, [r7, #4]
   18028:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   1802a:	2301      	movs	r3, #1
   1802c:	e000      	b.n	18030 <hciCoreTxAclContinue+0xb0>
    }
  }

  return FALSE;
   1802e:	2300      	movs	r3, #0
}
   18030:	4618      	mov	r0, r3
   18032:	3714      	adds	r7, #20
   18034:	46bd      	mov	sp, r7
   18036:	bd90      	pop	{r4, r7, pc}

00018038 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   18038:	b580      	push	{r7, lr}
   1803a:	b082      	sub	sp, #8
   1803c:	af00      	add	r7, sp, #0
   1803e:	6078      	str	r0, [r7, #4]
   18040:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   18042:	687b      	ldr	r3, [r7, #4]
   18044:	7d9b      	ldrb	r3, [r3, #22]
   18046:	2b00      	cmp	r3, #0
   18048:	d00f      	beq.n	1806a <hciCoreTxAclComplete+0x32>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   1804a:	687b      	ldr	r3, [r7, #4]
   1804c:	8a5b      	ldrh	r3, [r3, #18]
   1804e:	2b00      	cmp	r3, #0
   18050:	d111      	bne.n	18076 <hciCoreTxAclComplete+0x3e>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   18052:	687b      	ldr	r3, [r7, #4]
   18054:	681b      	ldr	r3, [r3, #0]
   18056:	4618      	mov	r0, r3
   18058:	f7fc fae2 	bl	14620 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   1805c:	687b      	ldr	r3, [r7, #4]
   1805e:	2200      	movs	r2, #0
   18060:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   18062:	687b      	ldr	r3, [r7, #4]
   18064:	2200      	movs	r2, #0
   18066:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   18068:	e005      	b.n	18076 <hciCoreTxAclComplete+0x3e>
  else if (pData != NULL)
   1806a:	683b      	ldr	r3, [r7, #0]
   1806c:	2b00      	cmp	r3, #0
   1806e:	d002      	beq.n	18076 <hciCoreTxAclComplete+0x3e>
    WsfMsgFree(pData);
   18070:	6838      	ldr	r0, [r7, #0]
   18072:	f7fc fad5 	bl	14620 <WsfMsgFree>
}
   18076:	bf00      	nop
   18078:	3708      	adds	r7, #8
   1807a:	46bd      	mov	sp, r7
   1807c:	bd80      	pop	{r7, pc}
	...

00018080 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   18080:	b580      	push	{r7, lr}
   18082:	b088      	sub	sp, #32
   18084:	af00      	add	r7, sp, #0
   18086:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   18088:	2300      	movs	r3, #0
   1808a:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   1808c:	2301      	movs	r3, #1
   1808e:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
   18090:	687b      	ldr	r3, [r7, #4]
   18092:	781b      	ldrb	r3, [r3, #0]
   18094:	b29a      	uxth	r2, r3
   18096:	687b      	ldr	r3, [r7, #4]
   18098:	3301      	adds	r3, #1
   1809a:	781b      	ldrb	r3, [r3, #0]
   1809c:	b29b      	uxth	r3, r3
   1809e:	021b      	lsls	r3, r3, #8
   180a0:	b29b      	uxth	r3, r3
   180a2:	4413      	add	r3, r2
   180a4:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   180a6:	8b3b      	ldrh	r3, [r7, #24]
   180a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   180ac:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
   180ae:	8b3b      	ldrh	r3, [r7, #24]
   180b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
   180b4:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   180b6:	687b      	ldr	r3, [r7, #4]
   180b8:	3302      	adds	r3, #2
   180ba:	781b      	ldrb	r3, [r3, #0]
   180bc:	b29a      	uxth	r2, r3
   180be:	687b      	ldr	r3, [r7, #4]
   180c0:	3303      	adds	r3, #3
   180c2:	781b      	ldrb	r3, [r3, #0]
   180c4:	b29b      	uxth	r3, r3
   180c6:	021b      	lsls	r3, r3, #8
   180c8:	b29b      	uxth	r3, r3
   180ca:	4413      	add	r3, r2
   180cc:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   180ce:	8b3b      	ldrh	r3, [r7, #24]
   180d0:	4618      	mov	r0, r3
   180d2:	f7ff fe1f 	bl	17d14 <hciCoreConnByHandle>
   180d6:	6138      	str	r0, [r7, #16]
   180d8:	693b      	ldr	r3, [r7, #16]
   180da:	2b00      	cmp	r3, #0
   180dc:	f000 80ad 	beq.w	1823a <hciCoreAclReassembly+0x1ba>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   180e0:	8afb      	ldrh	r3, [r7, #22]
   180e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   180e6:	d17c      	bne.n	181e2 <hciCoreAclReassembly+0x162>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   180e8:	693b      	ldr	r3, [r7, #16]
   180ea:	689b      	ldr	r3, [r3, #8]
   180ec:	2b00      	cmp	r3, #0
   180ee:	d007      	beq.n	18100 <hciCoreAclReassembly+0x80>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   180f0:	693b      	ldr	r3, [r7, #16]
   180f2:	689b      	ldr	r3, [r3, #8]
   180f4:	4618      	mov	r0, r3
   180f6:	f7fc fa93 	bl	14620 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   180fa:	693b      	ldr	r3, [r7, #16]
   180fc:	2200      	movs	r2, #0
   180fe:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   18100:	8abb      	ldrh	r3, [r7, #20]
   18102:	2b03      	cmp	r3, #3
   18104:	f240 8099 	bls.w	1823a <hciCoreAclReassembly+0x1ba>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   18108:	687b      	ldr	r3, [r7, #4]
   1810a:	3304      	adds	r3, #4
   1810c:	781b      	ldrb	r3, [r3, #0]
   1810e:	b29a      	uxth	r2, r3
   18110:	687b      	ldr	r3, [r7, #4]
   18112:	3305      	adds	r3, #5
   18114:	781b      	ldrb	r3, [r3, #0]
   18116:	b29b      	uxth	r3, r3
   18118:	021b      	lsls	r3, r3, #8
   1811a:	b29b      	uxth	r3, r3
   1811c:	4413      	add	r3, r2
   1811e:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   18120:	89fb      	ldrh	r3, [r7, #14]
   18122:	3304      	adds	r3, #4
   18124:	4a4a      	ldr	r2, [pc, #296]	; (18250 <hciCoreAclReassembly+0x1d0>)
   18126:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
   1812a:	4293      	cmp	r3, r2
   1812c:	f300 8085 	bgt.w	1823a <hciCoreAclReassembly+0x1ba>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   18130:	89fb      	ldrh	r3, [r7, #14]
   18132:	1d1a      	adds	r2, r3, #4
   18134:	8abb      	ldrh	r3, [r7, #20]
   18136:	429a      	cmp	r2, r3
   18138:	dd4e      	ble.n	181d8 <hciCoreAclReassembly+0x158>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   1813a:	89fb      	ldrh	r3, [r7, #14]
   1813c:	3308      	adds	r3, #8
   1813e:	b29b      	uxth	r3, r3
   18140:	2100      	movs	r1, #0
   18142:	4618      	mov	r0, r3
   18144:	f7fc fa40 	bl	145c8 <WsfMsgDataAlloc>
   18148:	4602      	mov	r2, r0
   1814a:	693b      	ldr	r3, [r7, #16]
   1814c:	609a      	str	r2, [r3, #8]
   1814e:	693b      	ldr	r3, [r7, #16]
   18150:	689b      	ldr	r3, [r3, #8]
   18152:	2b00      	cmp	r3, #0
   18154:	d071      	beq.n	1823a <hciCoreAclReassembly+0x1ba>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   18156:	693b      	ldr	r3, [r7, #16]
   18158:	689a      	ldr	r2, [r3, #8]
   1815a:	693b      	ldr	r3, [r7, #16]
   1815c:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   1815e:	693b      	ldr	r3, [r7, #16]
   18160:	68db      	ldr	r3, [r3, #12]
   18162:	1c59      	adds	r1, r3, #1
   18164:	693a      	ldr	r2, [r7, #16]
   18166:	60d1      	str	r1, [r2, #12]
   18168:	8b3a      	ldrh	r2, [r7, #24]
   1816a:	b2d2      	uxtb	r2, r2
   1816c:	701a      	strb	r2, [r3, #0]
   1816e:	693b      	ldr	r3, [r7, #16]
   18170:	68db      	ldr	r3, [r3, #12]
   18172:	1c59      	adds	r1, r3, #1
   18174:	693a      	ldr	r2, [r7, #16]
   18176:	60d1      	str	r1, [r2, #12]
   18178:	8b3a      	ldrh	r2, [r7, #24]
   1817a:	0a12      	lsrs	r2, r2, #8
   1817c:	b292      	uxth	r2, r2
   1817e:	b2d2      	uxtb	r2, r2
   18180:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   18182:	693b      	ldr	r3, [r7, #16]
   18184:	68db      	ldr	r3, [r3, #12]
   18186:	1c59      	adds	r1, r3, #1
   18188:	693a      	ldr	r2, [r7, #16]
   1818a:	60d1      	str	r1, [r2, #12]
   1818c:	89fa      	ldrh	r2, [r7, #14]
   1818e:	b2d2      	uxtb	r2, r2
   18190:	3204      	adds	r2, #4
   18192:	b2d2      	uxtb	r2, r2
   18194:	701a      	strb	r2, [r3, #0]
   18196:	693b      	ldr	r3, [r7, #16]
   18198:	68db      	ldr	r3, [r3, #12]
   1819a:	1c59      	adds	r1, r3, #1
   1819c:	693a      	ldr	r2, [r7, #16]
   1819e:	60d1      	str	r1, [r2, #12]
   181a0:	89fa      	ldrh	r2, [r7, #14]
   181a2:	3204      	adds	r2, #4
   181a4:	1212      	asrs	r2, r2, #8
   181a6:	b2d2      	uxtb	r2, r2
   181a8:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   181aa:	693b      	ldr	r3, [r7, #16]
   181ac:	68d8      	ldr	r0, [r3, #12]
   181ae:	687b      	ldr	r3, [r7, #4]
   181b0:	3304      	adds	r3, #4
   181b2:	8aba      	ldrh	r2, [r7, #20]
   181b4:	4619      	mov	r1, r3
   181b6:	f7f3 ffd3 	bl	c160 <memcpy>
            pConn->pNextRxFrag += aclLen;
   181ba:	693b      	ldr	r3, [r7, #16]
   181bc:	68da      	ldr	r2, [r3, #12]
   181be:	8abb      	ldrh	r3, [r7, #20]
   181c0:	441a      	add	r2, r3
   181c2:	693b      	ldr	r3, [r7, #16]
   181c4:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   181c6:	89fa      	ldrh	r2, [r7, #14]
   181c8:	8abb      	ldrh	r3, [r7, #20]
   181ca:	1ad3      	subs	r3, r2, r3
   181cc:	b29b      	uxth	r3, r3
   181ce:	3304      	adds	r3, #4
   181d0:	b29a      	uxth	r2, r3
   181d2:	693b      	ldr	r3, [r7, #16]
   181d4:	829a      	strh	r2, [r3, #20]
   181d6:	e030      	b.n	1823a <hciCoreAclReassembly+0x1ba>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   181d8:	687b      	ldr	r3, [r7, #4]
   181da:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
   181dc:	2300      	movs	r3, #0
   181de:	76fb      	strb	r3, [r7, #27]
   181e0:	e02b      	b.n	1823a <hciCoreAclReassembly+0x1ba>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   181e2:	8afb      	ldrh	r3, [r7, #22]
   181e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   181e8:	d127      	bne.n	1823a <hciCoreAclReassembly+0x1ba>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   181ea:	693b      	ldr	r3, [r7, #16]
   181ec:	689b      	ldr	r3, [r3, #8]
   181ee:	2b00      	cmp	r3, #0
   181f0:	d023      	beq.n	1823a <hciCoreAclReassembly+0x1ba>
      {
        if (aclLen <= pConn->rxAclRemLen)
   181f2:	693b      	ldr	r3, [r7, #16]
   181f4:	8a9b      	ldrh	r3, [r3, #20]
   181f6:	8aba      	ldrh	r2, [r7, #20]
   181f8:	429a      	cmp	r2, r3
   181fa:	d81e      	bhi.n	1823a <hciCoreAclReassembly+0x1ba>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   181fc:	693b      	ldr	r3, [r7, #16]
   181fe:	68d8      	ldr	r0, [r3, #12]
   18200:	687b      	ldr	r3, [r7, #4]
   18202:	3304      	adds	r3, #4
   18204:	8aba      	ldrh	r2, [r7, #20]
   18206:	4619      	mov	r1, r3
   18208:	f7f3 ffaa 	bl	c160 <memcpy>
          pConn->pNextRxFrag += aclLen;
   1820c:	693b      	ldr	r3, [r7, #16]
   1820e:	68da      	ldr	r2, [r3, #12]
   18210:	8abb      	ldrh	r3, [r7, #20]
   18212:	441a      	add	r2, r3
   18214:	693b      	ldr	r3, [r7, #16]
   18216:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   18218:	693b      	ldr	r3, [r7, #16]
   1821a:	8a9a      	ldrh	r2, [r3, #20]
   1821c:	8abb      	ldrh	r3, [r7, #20]
   1821e:	1ad3      	subs	r3, r2, r3
   18220:	b29a      	uxth	r2, r3
   18222:	693b      	ldr	r3, [r7, #16]
   18224:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   18226:	693b      	ldr	r3, [r7, #16]
   18228:	8a9b      	ldrh	r3, [r3, #20]
   1822a:	2b00      	cmp	r3, #0
   1822c:	d105      	bne.n	1823a <hciCoreAclReassembly+0x1ba>
          {
            pDataRtn = pConn->pRxAclPkt;
   1822e:	693b      	ldr	r3, [r7, #16]
   18230:	689b      	ldr	r3, [r3, #8]
   18232:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
   18234:	693b      	ldr	r3, [r7, #16]
   18236:	2200      	movs	r2, #0
   18238:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   1823a:	7efb      	ldrb	r3, [r7, #27]
   1823c:	2b00      	cmp	r3, #0
   1823e:	d002      	beq.n	18246 <hciCoreAclReassembly+0x1c6>
  {
    WsfMsgFree(pData);
   18240:	6878      	ldr	r0, [r7, #4]
   18242:	f7fc f9ed 	bl	14620 <WsfMsgFree>
  }

  return pDataRtn;
   18246:	69fb      	ldr	r3, [r7, #28]
}
   18248:	4618      	mov	r0, r3
   1824a:	3720      	adds	r7, #32
   1824c:	46bd      	mov	sp, r7
   1824e:	bd80      	pop	{r7, pc}
   18250:	1000b064 	.word	0x1000b064

00018254 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   18254:	b580      	push	{r7, lr}
   18256:	b082      	sub	sp, #8
   18258:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   1825a:	4b19      	ldr	r3, [pc, #100]	; (182c0 <HciCoreInit+0x6c>)
   1825c:	2200      	movs	r2, #0
   1825e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   18262:	4b17      	ldr	r3, [pc, #92]	; (182c0 <HciCoreInit+0x6c>)
   18264:	2200      	movs	r2, #0
   18266:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
   1826a:	2300      	movs	r3, #0
   1826c:	71fb      	strb	r3, [r7, #7]
   1826e:	e00d      	b.n	1828c <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   18270:	79fa      	ldrb	r2, [r7, #7]
   18272:	4913      	ldr	r1, [pc, #76]	; (182c0 <HciCoreInit+0x6c>)
   18274:	4613      	mov	r3, r2
   18276:	00db      	lsls	r3, r3, #3
   18278:	1a9b      	subs	r3, r3, r2
   1827a:	009b      	lsls	r3, r3, #2
   1827c:	440b      	add	r3, r1
   1827e:	3310      	adds	r3, #16
   18280:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18284:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   18286:	79fb      	ldrb	r3, [r7, #7]
   18288:	3301      	adds	r3, #1
   1828a:	71fb      	strb	r3, [r7, #7]
   1828c:	79fb      	ldrb	r3, [r7, #7]
   1828e:	2b07      	cmp	r3, #7
   18290:	d9ee      	bls.n	18270 <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   18292:	4b0b      	ldr	r3, [pc, #44]	; (182c0 <HciCoreInit+0x6c>)
   18294:	221b      	movs	r2, #27
   18296:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   1829a:	4b09      	ldr	r3, [pc, #36]	; (182c0 <HciCoreInit+0x6c>)
   1829c:	2205      	movs	r2, #5
   1829e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   182a2:	4b07      	ldr	r3, [pc, #28]	; (182c0 <HciCoreInit+0x6c>)
   182a4:	2203      	movs	r2, #3
   182a6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
   182aa:	4b05      	ldr	r3, [pc, #20]	; (182c0 <HciCoreInit+0x6c>)
   182ac:	2200      	movs	r2, #0
   182ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
   182b2:	f000 f8d5 	bl	18460 <hciCoreInit>
}
   182b6:	bf00      	nop
   182b8:	3708      	adds	r7, #8
   182ba:	46bd      	mov	sp, r7
   182bc:	bd80      	pop	{r7, pc}
   182be:	bf00      	nop
   182c0:	1000b064 	.word	0x1000b064

000182c4 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   182c4:	b580      	push	{r7, lr}
   182c6:	b084      	sub	sp, #16
   182c8:	af00      	add	r7, sp, #0
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   182ca:	4b24      	ldr	r3, [pc, #144]	; (1835c <HciResetSequence+0x98>)
   182cc:	60bb      	str	r3, [r7, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   182ce:	e002      	b.n	182d6 <HciResetSequence+0x12>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   182d0:	6878      	ldr	r0, [r7, #4]
   182d2:	f7fc f9a5 	bl	14620 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   182d6:	1cfb      	adds	r3, r7, #3
   182d8:	4619      	mov	r1, r3
   182da:	4821      	ldr	r0, [pc, #132]	; (18360 <HciResetSequence+0x9c>)
   182dc:	f7fc f9da 	bl	14694 <WsfMsgDeq>
   182e0:	6078      	str	r0, [r7, #4]
   182e2:	687b      	ldr	r3, [r7, #4]
   182e4:	2b00      	cmp	r3, #0
   182e6:	d1f3      	bne.n	182d0 <HciResetSequence+0xc>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   182e8:	2308      	movs	r3, #8
   182ea:	73fb      	strb	r3, [r7, #15]
   182ec:	e029      	b.n	18342 <HciResetSequence+0x7e>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   182ee:	68bb      	ldr	r3, [r7, #8]
   182f0:	681b      	ldr	r3, [r3, #0]
   182f2:	2b00      	cmp	r3, #0
   182f4:	d007      	beq.n	18306 <HciResetSequence+0x42>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   182f6:	68bb      	ldr	r3, [r7, #8]
   182f8:	681b      	ldr	r3, [r3, #0]
   182fa:	4618      	mov	r0, r3
   182fc:	f7fc f990 	bl	14620 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   18300:	68bb      	ldr	r3, [r7, #8]
   18302:	2200      	movs	r2, #0
   18304:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   18306:	68bb      	ldr	r3, [r7, #8]
   18308:	2200      	movs	r2, #0
   1830a:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   1830c:	68bb      	ldr	r3, [r7, #8]
   1830e:	689b      	ldr	r3, [r3, #8]
   18310:	2b00      	cmp	r3, #0
   18312:	d007      	beq.n	18324 <HciResetSequence+0x60>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   18314:	68bb      	ldr	r3, [r7, #8]
   18316:	689b      	ldr	r3, [r3, #8]
   18318:	4618      	mov	r0, r3
   1831a:	f7fc f981 	bl	14620 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   1831e:	68bb      	ldr	r3, [r7, #8]
   18320:	2200      	movs	r2, #0
   18322:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   18324:	68bb      	ldr	r3, [r7, #8]
   18326:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1832a:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   1832c:	68bb      	ldr	r3, [r7, #8]
   1832e:	7e5b      	ldrb	r3, [r3, #25]
   18330:	4618      	mov	r0, r3
   18332:	f7ff fd75 	bl	17e20 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   18336:	7bfb      	ldrb	r3, [r7, #15]
   18338:	3b01      	subs	r3, #1
   1833a:	73fb      	strb	r3, [r7, #15]
   1833c:	68bb      	ldr	r3, [r7, #8]
   1833e:	331c      	adds	r3, #28
   18340:	60bb      	str	r3, [r7, #8]
   18342:	7bfb      	ldrb	r3, [r7, #15]
   18344:	2b00      	cmp	r3, #0
   18346:	d1d2      	bne.n	182ee <HciResetSequence+0x2a>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   18348:	4b05      	ldr	r3, [pc, #20]	; (18360 <HciResetSequence+0x9c>)
   1834a:	2201      	movs	r2, #1
   1834c:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   1834e:	f002 f913 	bl	1a578 <hciCoreResetStart>
}
   18352:	bf00      	nop
   18354:	3710      	adds	r7, #16
   18356:	46bd      	mov	sp, r7
   18358:	bd80      	pop	{r7, pc}
   1835a:	bf00      	nop
   1835c:	1000b064 	.word	0x1000b064
   18360:	1000a694 	.word	0x1000a694

00018364 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   18364:	b480      	push	{r7}
   18366:	b083      	sub	sp, #12
   18368:	af00      	add	r7, sp, #0
   1836a:	4603      	mov	r3, r0
   1836c:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
   1836e:	4a05      	ldr	r2, [pc, #20]	; (18384 <HciSetMaxRxAclLen+0x20>)
   18370:	88fb      	ldrh	r3, [r7, #6]
   18372:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
   18376:	bf00      	nop
   18378:	370c      	adds	r7, #12
   1837a:	46bd      	mov	sp, r7
   1837c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18380:	4770      	bx	lr
   18382:	bf00      	nop
   18384:	1000b064 	.word	0x1000b064

00018388 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   18388:	b590      	push	{r4, r7, lr}
   1838a:	b085      	sub	sp, #20
   1838c:	af00      	add	r7, sp, #0
   1838e:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   18390:	687b      	ldr	r3, [r7, #4]
   18392:	781b      	ldrb	r3, [r3, #0]
   18394:	b29a      	uxth	r2, r3
   18396:	687b      	ldr	r3, [r7, #4]
   18398:	3301      	adds	r3, #1
   1839a:	781b      	ldrb	r3, [r3, #0]
   1839c:	b29b      	uxth	r3, r3
   1839e:	021b      	lsls	r3, r3, #8
   183a0:	b29b      	uxth	r3, r3
   183a2:	4413      	add	r3, r2
   183a4:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   183a6:	687b      	ldr	r3, [r7, #4]
   183a8:	3302      	adds	r3, #2
   183aa:	781b      	ldrb	r3, [r3, #0]
   183ac:	b29a      	uxth	r2, r3
   183ae:	687b      	ldr	r3, [r7, #4]
   183b0:	3303      	adds	r3, #3
   183b2:	781b      	ldrb	r3, [r3, #0]
   183b4:	b29b      	uxth	r3, r3
   183b6:	021b      	lsls	r3, r3, #8
   183b8:	b29b      	uxth	r3, r3
   183ba:	4413      	add	r3, r2
   183bc:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   183be:	89fb      	ldrh	r3, [r7, #14]
   183c0:	4618      	mov	r0, r3
   183c2:	f7ff fca7 	bl	17d14 <hciCoreConnByHandle>
   183c6:	60b8      	str	r0, [r7, #8]
   183c8:	68bb      	ldr	r3, [r7, #8]
   183ca:	2b00      	cmp	r3, #0
   183cc:	d03a      	beq.n	18444 <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   183ce:	4821      	ldr	r0, [pc, #132]	; (18454 <HciSendAclData+0xcc>)
   183d0:	f7fc fa41 	bl	14856 <WsfQueueEmpty>
   183d4:	4603      	mov	r3, r0
   183d6:	2b00      	cmp	r3, #0
   183d8:	d00b      	beq.n	183f2 <HciSendAclData+0x6a>
   183da:	4b1f      	ldr	r3, [pc, #124]	; (18458 <HciSendAclData+0xd0>)
   183dc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   183e0:	2b00      	cmp	r3, #0
   183e2:	d006      	beq.n	183f2 <HciSendAclData+0x6a>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   183e4:	89bb      	ldrh	r3, [r7, #12]
   183e6:	687a      	ldr	r2, [r7, #4]
   183e8:	4619      	mov	r1, r3
   183ea:	68b8      	ldr	r0, [r7, #8]
   183ec:	f7ff fd80 	bl	17ef0 <hciCoreTxAclStart>
   183f0:	e004      	b.n	183fc <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   183f2:	687a      	ldr	r2, [r7, #4]
   183f4:	2100      	movs	r1, #0
   183f6:	4817      	ldr	r0, [pc, #92]	; (18454 <HciSendAclData+0xcc>)
   183f8:	f7fc f937 	bl	1466a <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   183fc:	89bb      	ldrh	r3, [r7, #12]
   183fe:	1e5c      	subs	r4, r3, #1
   18400:	f000 f904 	bl	1860c <HciGetBufSize>
   18404:	4603      	mov	r3, r0
   18406:	fb94 f3f3 	sdiv	r3, r4, r3
   1840a:	1c59      	adds	r1, r3, #1
   1840c:	68bb      	ldr	r3, [r7, #8]
   1840e:	7e1a      	ldrb	r2, [r3, #24]
   18410:	b2cb      	uxtb	r3, r1
   18412:	4413      	add	r3, r2
   18414:	b2da      	uxtb	r2, r3
   18416:	68bb      	ldr	r3, [r7, #8]
   18418:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   1841a:	68bb      	ldr	r3, [r7, #8]
   1841c:	7e1a      	ldrb	r2, [r3, #24]
   1841e:	4b0e      	ldr	r3, [pc, #56]	; (18458 <HciSendAclData+0xd0>)
   18420:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   18424:	429a      	cmp	r2, r3
   18426:	d310      	bcc.n	1844a <HciSendAclData+0xc2>
   18428:	68bb      	ldr	r3, [r7, #8]
   1842a:	7ddb      	ldrb	r3, [r3, #23]
   1842c:	2b00      	cmp	r3, #0
   1842e:	d10c      	bne.n	1844a <HciSendAclData+0xc2>
    {
      pConn->flowDisabled = TRUE;
   18430:	68bb      	ldr	r3, [r7, #8]
   18432:	2201      	movs	r2, #1
   18434:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   18436:	4b09      	ldr	r3, [pc, #36]	; (1845c <HciSendAclData+0xd4>)
   18438:	695b      	ldr	r3, [r3, #20]
   1843a:	89fa      	ldrh	r2, [r7, #14]
   1843c:	2101      	movs	r1, #1
   1843e:	4610      	mov	r0, r2
   18440:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   18442:	e002      	b.n	1844a <HciSendAclData+0xc2>
    WsfMsgFree(pData);
   18444:	6878      	ldr	r0, [r7, #4]
   18446:	f7fc f8eb 	bl	14620 <WsfMsgFree>
}
   1844a:	bf00      	nop
   1844c:	3714      	adds	r7, #20
   1844e:	46bd      	mov	sp, r7
   18450:	bd90      	pop	{r4, r7, pc}
   18452:	bf00      	nop
   18454:	1000b154 	.word	0x1000b154
   18458:	1000b064 	.word	0x1000b064
   1845c:	1000a694 	.word	0x1000a694

00018460 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   18460:	b580      	push	{r7, lr}
   18462:	af00      	add	r7, sp, #0
  hciCmdInit();
   18464:	f7fe fb36 	bl	16ad4 <hciCmdInit>
}
   18468:	bf00      	nop
   1846a:	bd80      	pop	{r7, pc}

0001846c <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   1846c:	b580      	push	{r7, lr}
   1846e:	b086      	sub	sp, #24
   18470:	af00      	add	r7, sp, #0
   18472:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   18474:	2300      	movs	r3, #0
   18476:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   18478:	687b      	ldr	r3, [r7, #4]
   1847a:	1c5a      	adds	r2, r3, #1
   1847c:	607a      	str	r2, [r7, #4]
   1847e:	781b      	ldrb	r3, [r3, #0]
   18480:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   18482:	e04c      	b.n	1851e <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   18484:	687b      	ldr	r3, [r7, #4]
   18486:	781b      	ldrb	r3, [r3, #0]
   18488:	b29a      	uxth	r2, r3
   1848a:	687b      	ldr	r3, [r7, #4]
   1848c:	3301      	adds	r3, #1
   1848e:	781b      	ldrb	r3, [r3, #0]
   18490:	b29b      	uxth	r3, r3
   18492:	021b      	lsls	r3, r3, #8
   18494:	b29b      	uxth	r3, r3
   18496:	4413      	add	r3, r2
   18498:	82bb      	strh	r3, [r7, #20]
   1849a:	687b      	ldr	r3, [r7, #4]
   1849c:	3302      	adds	r3, #2
   1849e:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   184a0:	687b      	ldr	r3, [r7, #4]
   184a2:	781b      	ldrb	r3, [r3, #0]
   184a4:	b29a      	uxth	r2, r3
   184a6:	687b      	ldr	r3, [r7, #4]
   184a8:	3301      	adds	r3, #1
   184aa:	781b      	ldrb	r3, [r3, #0]
   184ac:	b29b      	uxth	r3, r3
   184ae:	021b      	lsls	r3, r3, #8
   184b0:	b29b      	uxth	r3, r3
   184b2:	4413      	add	r3, r2
   184b4:	827b      	strh	r3, [r7, #18]
   184b6:	687b      	ldr	r3, [r7, #4]
   184b8:	3302      	adds	r3, #2
   184ba:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   184bc:	8abb      	ldrh	r3, [r7, #20]
   184be:	4618      	mov	r0, r3
   184c0:	f7ff fc28 	bl	17d14 <hciCoreConnByHandle>
   184c4:	60f8      	str	r0, [r7, #12]
   184c6:	68fb      	ldr	r3, [r7, #12]
   184c8:	2b00      	cmp	r3, #0
   184ca:	d028      	beq.n	1851e <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   184cc:	68fb      	ldr	r3, [r7, #12]
   184ce:	7e5a      	ldrb	r2, [r3, #25]
   184d0:	8a7b      	ldrh	r3, [r7, #18]
   184d2:	b2db      	uxtb	r3, r3
   184d4:	1ad3      	subs	r3, r2, r3
   184d6:	b2da      	uxtb	r2, r3
   184d8:	68fb      	ldr	r3, [r7, #12]
   184da:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   184dc:	68fb      	ldr	r3, [r7, #12]
   184de:	7e1a      	ldrb	r2, [r3, #24]
   184e0:	8a7b      	ldrh	r3, [r7, #18]
   184e2:	b2db      	uxtb	r3, r3
   184e4:	1ad3      	subs	r3, r2, r3
   184e6:	b2da      	uxtb	r2, r3
   184e8:	68fb      	ldr	r3, [r7, #12]
   184ea:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   184ec:	8a7b      	ldrh	r3, [r7, #18]
   184ee:	b2da      	uxtb	r2, r3
   184f0:	7dbb      	ldrb	r3, [r7, #22]
   184f2:	4413      	add	r3, r2
   184f4:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   184f6:	68fb      	ldr	r3, [r7, #12]
   184f8:	7ddb      	ldrb	r3, [r3, #23]
   184fa:	2b00      	cmp	r3, #0
   184fc:	d00f      	beq.n	1851e <hciCoreNumCmplPkts+0xb2>
   184fe:	68fb      	ldr	r3, [r7, #12]
   18500:	7e1a      	ldrb	r2, [r3, #24]
   18502:	4b0d      	ldr	r3, [pc, #52]	; (18538 <hciCoreNumCmplPkts+0xcc>)
   18504:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   18508:	429a      	cmp	r2, r3
   1850a:	d808      	bhi.n	1851e <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
   1850c:	68fb      	ldr	r3, [r7, #12]
   1850e:	2200      	movs	r2, #0
   18510:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   18512:	4b0a      	ldr	r3, [pc, #40]	; (1853c <hciCoreNumCmplPkts+0xd0>)
   18514:	695b      	ldr	r3, [r3, #20]
   18516:	8aba      	ldrh	r2, [r7, #20]
   18518:	2100      	movs	r1, #0
   1851a:	4610      	mov	r0, r2
   1851c:	4798      	blx	r3
  while (numHandles-- > 0)
   1851e:	7dfb      	ldrb	r3, [r7, #23]
   18520:	1e5a      	subs	r2, r3, #1
   18522:	75fa      	strb	r2, [r7, #23]
   18524:	2b00      	cmp	r3, #0
   18526:	d1ad      	bne.n	18484 <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   18528:	7dbb      	ldrb	r3, [r7, #22]
   1852a:	4618      	mov	r0, r3
   1852c:	f7ff fc78 	bl	17e20 <hciCoreTxReady>
}
   18530:	bf00      	nop
   18532:	3718      	adds	r7, #24
   18534:	46bd      	mov	sp, r7
   18536:	bd80      	pop	{r7, pc}
   18538:	1000b064 	.word	0x1000b064
   1853c:	1000a694 	.word	0x1000a694

00018540 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   18540:	b580      	push	{r7, lr}
   18542:	b082      	sub	sp, #8
   18544:	af00      	add	r7, sp, #0
   18546:	4603      	mov	r3, r0
   18548:	6039      	str	r1, [r7, #0]
   1854a:	71fb      	strb	r3, [r7, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   1854c:	79fb      	ldrb	r3, [r7, #7]
   1854e:	683a      	ldr	r2, [r7, #0]
   18550:	4619      	mov	r1, r3
   18552:	4806      	ldr	r0, [pc, #24]	; (1856c <hciCoreRecv+0x2c>)
   18554:	f7fc f889 	bl	1466a <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   18558:	4b04      	ldr	r3, [pc, #16]	; (1856c <hciCoreRecv+0x2c>)
   1855a:	7e1b      	ldrb	r3, [r3, #24]
   1855c:	2101      	movs	r1, #1
   1855e:	4618      	mov	r0, r3
   18560:	f7fd f9dc 	bl	1591c <WsfSetEvent>
}
   18564:	bf00      	nop
   18566:	3708      	adds	r7, #8
   18568:	46bd      	mov	sp, r7
   1856a:	bd80      	pop	{r7, pc}
   1856c:	1000a694 	.word	0x1000a694

00018570 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   18570:	b580      	push	{r7, lr}
   18572:	b084      	sub	sp, #16
   18574:	af00      	add	r7, sp, #0
   18576:	4603      	mov	r3, r0
   18578:	6039      	str	r1, [r7, #0]
   1857a:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   1857c:	683b      	ldr	r3, [r7, #0]
   1857e:	2b00      	cmp	r3, #0
   18580:	d007      	beq.n	18592 <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   18582:	683b      	ldr	r3, [r7, #0]
   18584:	789b      	ldrb	r3, [r3, #2]
   18586:	2b01      	cmp	r3, #1
   18588:	d12f      	bne.n	185ea <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
   1858a:	6838      	ldr	r0, [r7, #0]
   1858c:	f7fe fabe 	bl	16b0c <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   18590:	e02b      	b.n	185ea <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
   18592:	79fb      	ldrb	r3, [r7, #7]
   18594:	f003 0301 	and.w	r3, r3, #1
   18598:	2b00      	cmp	r3, #0
   1859a:	d026      	beq.n	185ea <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1859c:	e01b      	b.n	185d6 <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
   1859e:	7afb      	ldrb	r3, [r7, #11]
   185a0:	2b04      	cmp	r3, #4
   185a2:	d10d      	bne.n	185c0 <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
   185a4:	68f8      	ldr	r0, [r7, #12]
   185a6:	f001 fcc5 	bl	19f34 <hciEvtProcessMsg>
        if (hciCb.resetting)
   185aa:	4b12      	ldr	r3, [pc, #72]	; (185f4 <HciCoreHandler+0x84>)
   185ac:	7e5b      	ldrb	r3, [r3, #25]
   185ae:	2b00      	cmp	r3, #0
   185b0:	d002      	beq.n	185b8 <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
   185b2:	68f8      	ldr	r0, [r7, #12]
   185b4:	f001 ffe6 	bl	1a584 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   185b8:	68f8      	ldr	r0, [r7, #12]
   185ba:	f7fc f831 	bl	14620 <WsfMsgFree>
   185be:	e00a      	b.n	185d6 <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   185c0:	68f8      	ldr	r0, [r7, #12]
   185c2:	f7ff fd5d 	bl	18080 <hciCoreAclReassembly>
   185c6:	60f8      	str	r0, [r7, #12]
   185c8:	68fb      	ldr	r3, [r7, #12]
   185ca:	2b00      	cmp	r3, #0
   185cc:	d003      	beq.n	185d6 <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
   185ce:	4b09      	ldr	r3, [pc, #36]	; (185f4 <HciCoreHandler+0x84>)
   185d0:	691b      	ldr	r3, [r3, #16]
   185d2:	68f8      	ldr	r0, [r7, #12]
   185d4:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   185d6:	f107 030b 	add.w	r3, r7, #11
   185da:	4619      	mov	r1, r3
   185dc:	4805      	ldr	r0, [pc, #20]	; (185f4 <HciCoreHandler+0x84>)
   185de:	f7fc f859 	bl	14694 <WsfMsgDeq>
   185e2:	60f8      	str	r0, [r7, #12]
   185e4:	68fb      	ldr	r3, [r7, #12]
   185e6:	2b00      	cmp	r3, #0
   185e8:	d1d9      	bne.n	1859e <HciCoreHandler+0x2e>
}
   185ea:	bf00      	nop
   185ec:	3710      	adds	r7, #16
   185ee:	46bd      	mov	sp, r7
   185f0:	bd80      	pop	{r7, pc}
   185f2:	bf00      	nop
   185f4:	1000a694 	.word	0x1000a694

000185f8 <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
   185f8:	b480      	push	{r7}
   185fa:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
   185fc:	4b02      	ldr	r3, [pc, #8]	; (18608 <HciGetBdAddr+0x10>)
}
   185fe:	4618      	mov	r0, r3
   18600:	46bd      	mov	sp, r7
   18602:	f85d 7b04 	ldr.w	r7, [sp], #4
   18606:	4770      	bx	lr
   18608:	1000b14c 	.word	0x1000b14c

0001860c <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
   1860c:	b480      	push	{r7}
   1860e:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
   18610:	4b03      	ldr	r3, [pc, #12]	; (18620 <HciGetBufSize+0x14>)
   18612:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
   18616:	4618      	mov	r0, r3
   18618:	46bd      	mov	sp, r7
   1861a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1861e:	4770      	bx	lr
   18620:	1000b064 	.word	0x1000b064

00018624 <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
   18624:	b480      	push	{r7}
   18626:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
   18628:	4b03      	ldr	r3, [pc, #12]	; (18638 <HciGetMaxRxAclLen+0x14>)
   1862a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
   1862e:	4618      	mov	r0, r3
   18630:	46bd      	mov	sp, r7
   18632:	f85d 7b04 	ldr.w	r7, [sp], #4
   18636:	4770      	bx	lr
   18638:	1000b064 	.word	0x1000b064

0001863c <HciLlPrivacySupported>:
 *
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
   1863c:	b480      	push	{r7}
   1863e:	af00      	add	r7, sp, #0
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   18640:	4b06      	ldr	r3, [pc, #24]	; (1865c <HciLlPrivacySupported+0x20>)
   18642:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
   18646:	2b00      	cmp	r3, #0
   18648:	bf14      	ite	ne
   1864a:	2301      	movne	r3, #1
   1864c:	2300      	moveq	r3, #0
   1864e:	b2db      	uxtb	r3, r3
}
   18650:	4618      	mov	r0, r3
   18652:	46bd      	mov	sp, r7
   18654:	f85d 7b04 	ldr.w	r7, [sp], #4
   18658:	4770      	bx	lr
   1865a:	bf00      	nop
   1865c:	1000b064 	.word	0x1000b064

00018660 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18660:	b580      	push	{r7, lr}
   18662:	b084      	sub	sp, #16
   18664:	af00      	add	r7, sp, #0
   18666:	60f8      	str	r0, [r7, #12]
   18668:	60b9      	str	r1, [r7, #8]
   1866a:	4613      	mov	r3, r2
   1866c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1866e:	68bb      	ldr	r3, [r7, #8]
   18670:	1c5a      	adds	r2, r3, #1
   18672:	60ba      	str	r2, [r7, #8]
   18674:	781a      	ldrb	r2, [r3, #0]
   18676:	68fb      	ldr	r3, [r7, #12]
   18678:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1867a:	68bb      	ldr	r3, [r7, #8]
   1867c:	781b      	ldrb	r3, [r3, #0]
   1867e:	b29a      	uxth	r2, r3
   18680:	68bb      	ldr	r3, [r7, #8]
   18682:	3301      	adds	r3, #1
   18684:	781b      	ldrb	r3, [r3, #0]
   18686:	b29b      	uxth	r3, r3
   18688:	021b      	lsls	r3, r3, #8
   1868a:	b29b      	uxth	r3, r3
   1868c:	4413      	add	r3, r2
   1868e:	b29a      	uxth	r2, r3
   18690:	68fb      	ldr	r3, [r7, #12]
   18692:	80da      	strh	r2, [r3, #6]
   18694:	68bb      	ldr	r3, [r7, #8]
   18696:	3302      	adds	r3, #2
   18698:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1869a:	68bb      	ldr	r3, [r7, #8]
   1869c:	1c5a      	adds	r2, r3, #1
   1869e:	60ba      	str	r2, [r7, #8]
   186a0:	781a      	ldrb	r2, [r3, #0]
   186a2:	68fb      	ldr	r3, [r7, #12]
   186a4:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   186a6:	68bb      	ldr	r3, [r7, #8]
   186a8:	1c5a      	adds	r2, r3, #1
   186aa:	60ba      	str	r2, [r7, #8]
   186ac:	781a      	ldrb	r2, [r3, #0]
   186ae:	68fb      	ldr	r3, [r7, #12]
   186b0:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   186b2:	68fb      	ldr	r3, [r7, #12]
   186b4:	330a      	adds	r3, #10
   186b6:	68b9      	ldr	r1, [r7, #8]
   186b8:	4618      	mov	r0, r3
   186ba:	f7fb faed 	bl	13c98 <BdaCpy>
   186be:	68bb      	ldr	r3, [r7, #8]
   186c0:	3306      	adds	r3, #6
   186c2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   186c4:	68bb      	ldr	r3, [r7, #8]
   186c6:	781b      	ldrb	r3, [r3, #0]
   186c8:	b29a      	uxth	r2, r3
   186ca:	68bb      	ldr	r3, [r7, #8]
   186cc:	3301      	adds	r3, #1
   186ce:	781b      	ldrb	r3, [r3, #0]
   186d0:	b29b      	uxth	r3, r3
   186d2:	021b      	lsls	r3, r3, #8
   186d4:	b29b      	uxth	r3, r3
   186d6:	4413      	add	r3, r2
   186d8:	b29a      	uxth	r2, r3
   186da:	68fb      	ldr	r3, [r7, #12]
   186dc:	821a      	strh	r2, [r3, #16]
   186de:	68bb      	ldr	r3, [r7, #8]
   186e0:	3302      	adds	r3, #2
   186e2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   186e4:	68bb      	ldr	r3, [r7, #8]
   186e6:	781b      	ldrb	r3, [r3, #0]
   186e8:	b29a      	uxth	r2, r3
   186ea:	68bb      	ldr	r3, [r7, #8]
   186ec:	3301      	adds	r3, #1
   186ee:	781b      	ldrb	r3, [r3, #0]
   186f0:	b29b      	uxth	r3, r3
   186f2:	021b      	lsls	r3, r3, #8
   186f4:	b29b      	uxth	r3, r3
   186f6:	4413      	add	r3, r2
   186f8:	b29a      	uxth	r2, r3
   186fa:	68fb      	ldr	r3, [r7, #12]
   186fc:	825a      	strh	r2, [r3, #18]
   186fe:	68bb      	ldr	r3, [r7, #8]
   18700:	3302      	adds	r3, #2
   18702:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   18704:	68bb      	ldr	r3, [r7, #8]
   18706:	781b      	ldrb	r3, [r3, #0]
   18708:	b29a      	uxth	r2, r3
   1870a:	68bb      	ldr	r3, [r7, #8]
   1870c:	3301      	adds	r3, #1
   1870e:	781b      	ldrb	r3, [r3, #0]
   18710:	b29b      	uxth	r3, r3
   18712:	021b      	lsls	r3, r3, #8
   18714:	b29b      	uxth	r3, r3
   18716:	4413      	add	r3, r2
   18718:	b29a      	uxth	r2, r3
   1871a:	68fb      	ldr	r3, [r7, #12]
   1871c:	829a      	strh	r2, [r3, #20]
   1871e:	68bb      	ldr	r3, [r7, #8]
   18720:	3302      	adds	r3, #2
   18722:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   18724:	68bb      	ldr	r3, [r7, #8]
   18726:	1c5a      	adds	r2, r3, #1
   18728:	60ba      	str	r2, [r7, #8]
   1872a:	781a      	ldrb	r2, [r3, #0]
   1872c:	68fb      	ldr	r3, [r7, #12]
   1872e:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   18730:	68fb      	ldr	r3, [r7, #12]
   18732:	3317      	adds	r3, #23
   18734:	2206      	movs	r2, #6
   18736:	2100      	movs	r1, #0
   18738:	4618      	mov	r0, r3
   1873a:	f7f3 fe0f 	bl	c35c <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   1873e:	68fb      	ldr	r3, [r7, #12]
   18740:	331d      	adds	r3, #29
   18742:	2206      	movs	r2, #6
   18744:	2100      	movs	r1, #0
   18746:	4618      	mov	r0, r3
   18748:	f7f3 fe08 	bl	c35c <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1874c:	68fb      	ldr	r3, [r7, #12]
   1874e:	88da      	ldrh	r2, [r3, #6]
   18750:	68fb      	ldr	r3, [r7, #12]
   18752:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   18754:	68fb      	ldr	r3, [r7, #12]
   18756:	791a      	ldrb	r2, [r3, #4]
   18758:	68fb      	ldr	r3, [r7, #12]
   1875a:	70da      	strb	r2, [r3, #3]
}
   1875c:	bf00      	nop
   1875e:	3710      	adds	r7, #16
   18760:	46bd      	mov	sp, r7
   18762:	bd80      	pop	{r7, pc}

00018764 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18764:	b580      	push	{r7, lr}
   18766:	b084      	sub	sp, #16
   18768:	af00      	add	r7, sp, #0
   1876a:	60f8      	str	r0, [r7, #12]
   1876c:	60b9      	str	r1, [r7, #8]
   1876e:	4613      	mov	r3, r2
   18770:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   18772:	68bb      	ldr	r3, [r7, #8]
   18774:	1c5a      	adds	r2, r3, #1
   18776:	60ba      	str	r2, [r7, #8]
   18778:	781a      	ldrb	r2, [r3, #0]
   1877a:	68fb      	ldr	r3, [r7, #12]
   1877c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1877e:	68bb      	ldr	r3, [r7, #8]
   18780:	781b      	ldrb	r3, [r3, #0]
   18782:	b29a      	uxth	r2, r3
   18784:	68bb      	ldr	r3, [r7, #8]
   18786:	3301      	adds	r3, #1
   18788:	781b      	ldrb	r3, [r3, #0]
   1878a:	b29b      	uxth	r3, r3
   1878c:	021b      	lsls	r3, r3, #8
   1878e:	b29b      	uxth	r3, r3
   18790:	4413      	add	r3, r2
   18792:	b29a      	uxth	r2, r3
   18794:	68fb      	ldr	r3, [r7, #12]
   18796:	80da      	strh	r2, [r3, #6]
   18798:	68bb      	ldr	r3, [r7, #8]
   1879a:	3302      	adds	r3, #2
   1879c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1879e:	68bb      	ldr	r3, [r7, #8]
   187a0:	1c5a      	adds	r2, r3, #1
   187a2:	60ba      	str	r2, [r7, #8]
   187a4:	781a      	ldrb	r2, [r3, #0]
   187a6:	68fb      	ldr	r3, [r7, #12]
   187a8:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   187aa:	68bb      	ldr	r3, [r7, #8]
   187ac:	1c5a      	adds	r2, r3, #1
   187ae:	60ba      	str	r2, [r7, #8]
   187b0:	781a      	ldrb	r2, [r3, #0]
   187b2:	68fb      	ldr	r3, [r7, #12]
   187b4:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   187b6:	68fb      	ldr	r3, [r7, #12]
   187b8:	330a      	adds	r3, #10
   187ba:	68b9      	ldr	r1, [r7, #8]
   187bc:	4618      	mov	r0, r3
   187be:	f7fb fa6b 	bl	13c98 <BdaCpy>
   187c2:	68bb      	ldr	r3, [r7, #8]
   187c4:	3306      	adds	r3, #6
   187c6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   187c8:	68fb      	ldr	r3, [r7, #12]
   187ca:	3317      	adds	r3, #23
   187cc:	68b9      	ldr	r1, [r7, #8]
   187ce:	4618      	mov	r0, r3
   187d0:	f7fb fa62 	bl	13c98 <BdaCpy>
   187d4:	68bb      	ldr	r3, [r7, #8]
   187d6:	3306      	adds	r3, #6
   187d8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   187da:	68fb      	ldr	r3, [r7, #12]
   187dc:	331d      	adds	r3, #29
   187de:	68b9      	ldr	r1, [r7, #8]
   187e0:	4618      	mov	r0, r3
   187e2:	f7fb fa59 	bl	13c98 <BdaCpy>
   187e6:	68bb      	ldr	r3, [r7, #8]
   187e8:	3306      	adds	r3, #6
   187ea:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   187ec:	68bb      	ldr	r3, [r7, #8]
   187ee:	781b      	ldrb	r3, [r3, #0]
   187f0:	b29a      	uxth	r2, r3
   187f2:	68bb      	ldr	r3, [r7, #8]
   187f4:	3301      	adds	r3, #1
   187f6:	781b      	ldrb	r3, [r3, #0]
   187f8:	b29b      	uxth	r3, r3
   187fa:	021b      	lsls	r3, r3, #8
   187fc:	b29b      	uxth	r3, r3
   187fe:	4413      	add	r3, r2
   18800:	b29a      	uxth	r2, r3
   18802:	68fb      	ldr	r3, [r7, #12]
   18804:	821a      	strh	r2, [r3, #16]
   18806:	68bb      	ldr	r3, [r7, #8]
   18808:	3302      	adds	r3, #2
   1880a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   1880c:	68bb      	ldr	r3, [r7, #8]
   1880e:	781b      	ldrb	r3, [r3, #0]
   18810:	b29a      	uxth	r2, r3
   18812:	68bb      	ldr	r3, [r7, #8]
   18814:	3301      	adds	r3, #1
   18816:	781b      	ldrb	r3, [r3, #0]
   18818:	b29b      	uxth	r3, r3
   1881a:	021b      	lsls	r3, r3, #8
   1881c:	b29b      	uxth	r3, r3
   1881e:	4413      	add	r3, r2
   18820:	b29a      	uxth	r2, r3
   18822:	68fb      	ldr	r3, [r7, #12]
   18824:	825a      	strh	r2, [r3, #18]
   18826:	68bb      	ldr	r3, [r7, #8]
   18828:	3302      	adds	r3, #2
   1882a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   1882c:	68bb      	ldr	r3, [r7, #8]
   1882e:	781b      	ldrb	r3, [r3, #0]
   18830:	b29a      	uxth	r2, r3
   18832:	68bb      	ldr	r3, [r7, #8]
   18834:	3301      	adds	r3, #1
   18836:	781b      	ldrb	r3, [r3, #0]
   18838:	b29b      	uxth	r3, r3
   1883a:	021b      	lsls	r3, r3, #8
   1883c:	b29b      	uxth	r3, r3
   1883e:	4413      	add	r3, r2
   18840:	b29a      	uxth	r2, r3
   18842:	68fb      	ldr	r3, [r7, #12]
   18844:	829a      	strh	r2, [r3, #20]
   18846:	68bb      	ldr	r3, [r7, #8]
   18848:	3302      	adds	r3, #2
   1884a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1884c:	68bb      	ldr	r3, [r7, #8]
   1884e:	1c5a      	adds	r2, r3, #1
   18850:	60ba      	str	r2, [r7, #8]
   18852:	781a      	ldrb	r2, [r3, #0]
   18854:	68fb      	ldr	r3, [r7, #12]
   18856:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   18858:	68fb      	ldr	r3, [r7, #12]
   1885a:	88da      	ldrh	r2, [r3, #6]
   1885c:	68fb      	ldr	r3, [r7, #12]
   1885e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   18860:	68fb      	ldr	r3, [r7, #12]
   18862:	791a      	ldrb	r2, [r3, #4]
   18864:	68fb      	ldr	r3, [r7, #12]
   18866:	70da      	strb	r2, [r3, #3]
}
   18868:	bf00      	nop
   1886a:	3710      	adds	r7, #16
   1886c:	46bd      	mov	sp, r7
   1886e:	bd80      	pop	{r7, pc}

00018870 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18870:	b480      	push	{r7}
   18872:	b085      	sub	sp, #20
   18874:	af00      	add	r7, sp, #0
   18876:	60f8      	str	r0, [r7, #12]
   18878:	60b9      	str	r1, [r7, #8]
   1887a:	4613      	mov	r3, r2
   1887c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   1887e:	68bb      	ldr	r3, [r7, #8]
   18880:	1c5a      	adds	r2, r3, #1
   18882:	60ba      	str	r2, [r7, #8]
   18884:	781a      	ldrb	r2, [r3, #0]
   18886:	68fb      	ldr	r3, [r7, #12]
   18888:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   1888a:	68bb      	ldr	r3, [r7, #8]
   1888c:	781b      	ldrb	r3, [r3, #0]
   1888e:	b29a      	uxth	r2, r3
   18890:	68bb      	ldr	r3, [r7, #8]
   18892:	3301      	adds	r3, #1
   18894:	781b      	ldrb	r3, [r3, #0]
   18896:	b29b      	uxth	r3, r3
   18898:	021b      	lsls	r3, r3, #8
   1889a:	b29b      	uxth	r3, r3
   1889c:	4413      	add	r3, r2
   1889e:	b29a      	uxth	r2, r3
   188a0:	68fb      	ldr	r3, [r7, #12]
   188a2:	80da      	strh	r2, [r3, #6]
   188a4:	68bb      	ldr	r3, [r7, #8]
   188a6:	3302      	adds	r3, #2
   188a8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   188aa:	68bb      	ldr	r3, [r7, #8]
   188ac:	1c5a      	adds	r2, r3, #1
   188ae:	60ba      	str	r2, [r7, #8]
   188b0:	781a      	ldrb	r2, [r3, #0]
   188b2:	68fb      	ldr	r3, [r7, #12]
   188b4:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   188b6:	68fb      	ldr	r3, [r7, #12]
   188b8:	88da      	ldrh	r2, [r3, #6]
   188ba:	68fb      	ldr	r3, [r7, #12]
   188bc:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   188be:	68fb      	ldr	r3, [r7, #12]
   188c0:	791a      	ldrb	r2, [r3, #4]
   188c2:	68fb      	ldr	r3, [r7, #12]
   188c4:	70da      	strb	r2, [r3, #3]
}
   188c6:	bf00      	nop
   188c8:	3714      	adds	r7, #20
   188ca:	46bd      	mov	sp, r7
   188cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   188d0:	4770      	bx	lr

000188d2 <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   188d2:	b480      	push	{r7}
   188d4:	b085      	sub	sp, #20
   188d6:	af00      	add	r7, sp, #0
   188d8:	60f8      	str	r0, [r7, #12]
   188da:	60b9      	str	r1, [r7, #8]
   188dc:	4613      	mov	r3, r2
   188de:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   188e0:	68bb      	ldr	r3, [r7, #8]
   188e2:	1c5a      	adds	r2, r3, #1
   188e4:	60ba      	str	r2, [r7, #8]
   188e6:	781a      	ldrb	r2, [r3, #0]
   188e8:	68fb      	ldr	r3, [r7, #12]
   188ea:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   188ec:	68bb      	ldr	r3, [r7, #8]
   188ee:	781b      	ldrb	r3, [r3, #0]
   188f0:	b29a      	uxth	r2, r3
   188f2:	68bb      	ldr	r3, [r7, #8]
   188f4:	3301      	adds	r3, #1
   188f6:	781b      	ldrb	r3, [r3, #0]
   188f8:	b29b      	uxth	r3, r3
   188fa:	021b      	lsls	r3, r3, #8
   188fc:	b29b      	uxth	r3, r3
   188fe:	4413      	add	r3, r2
   18900:	b29a      	uxth	r2, r3
   18902:	68fb      	ldr	r3, [r7, #12]
   18904:	80da      	strh	r2, [r3, #6]
   18906:	68bb      	ldr	r3, [r7, #8]
   18908:	3302      	adds	r3, #2
   1890a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   1890c:	68bb      	ldr	r3, [r7, #8]
   1890e:	781b      	ldrb	r3, [r3, #0]
   18910:	b29a      	uxth	r2, r3
   18912:	68bb      	ldr	r3, [r7, #8]
   18914:	3301      	adds	r3, #1
   18916:	781b      	ldrb	r3, [r3, #0]
   18918:	b29b      	uxth	r3, r3
   1891a:	021b      	lsls	r3, r3, #8
   1891c:	b29b      	uxth	r3, r3
   1891e:	4413      	add	r3, r2
   18920:	b29a      	uxth	r2, r3
   18922:	68fb      	ldr	r3, [r7, #12]
   18924:	811a      	strh	r2, [r3, #8]
   18926:	68bb      	ldr	r3, [r7, #8]
   18928:	3302      	adds	r3, #2
   1892a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   1892c:	68bb      	ldr	r3, [r7, #8]
   1892e:	781b      	ldrb	r3, [r3, #0]
   18930:	b29a      	uxth	r2, r3
   18932:	68bb      	ldr	r3, [r7, #8]
   18934:	3301      	adds	r3, #1
   18936:	781b      	ldrb	r3, [r3, #0]
   18938:	b29b      	uxth	r3, r3
   1893a:	021b      	lsls	r3, r3, #8
   1893c:	b29b      	uxth	r3, r3
   1893e:	4413      	add	r3, r2
   18940:	b29a      	uxth	r2, r3
   18942:	68fb      	ldr	r3, [r7, #12]
   18944:	815a      	strh	r2, [r3, #10]
   18946:	68bb      	ldr	r3, [r7, #8]
   18948:	3302      	adds	r3, #2
   1894a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   1894c:	68bb      	ldr	r3, [r7, #8]
   1894e:	781b      	ldrb	r3, [r3, #0]
   18950:	b29a      	uxth	r2, r3
   18952:	68bb      	ldr	r3, [r7, #8]
   18954:	3301      	adds	r3, #1
   18956:	781b      	ldrb	r3, [r3, #0]
   18958:	b29b      	uxth	r3, r3
   1895a:	021b      	lsls	r3, r3, #8
   1895c:	b29b      	uxth	r3, r3
   1895e:	4413      	add	r3, r2
   18960:	b29a      	uxth	r2, r3
   18962:	68fb      	ldr	r3, [r7, #12]
   18964:	819a      	strh	r2, [r3, #12]
   18966:	68bb      	ldr	r3, [r7, #8]
   18968:	3302      	adds	r3, #2
   1896a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   1896c:	68fb      	ldr	r3, [r7, #12]
   1896e:	88da      	ldrh	r2, [r3, #6]
   18970:	68fb      	ldr	r3, [r7, #12]
   18972:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   18974:	68fb      	ldr	r3, [r7, #12]
   18976:	791a      	ldrb	r2, [r3, #4]
   18978:	68fb      	ldr	r3, [r7, #12]
   1897a:	70da      	strb	r2, [r3, #3]
}
   1897c:	bf00      	nop
   1897e:	3714      	adds	r7, #20
   18980:	46bd      	mov	sp, r7
   18982:	f85d 7b04 	ldr.w	r7, [sp], #4
   18986:	4770      	bx	lr

00018988 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18988:	b480      	push	{r7}
   1898a:	b085      	sub	sp, #20
   1898c:	af00      	add	r7, sp, #0
   1898e:	60f8      	str	r0, [r7, #12]
   18990:	60b9      	str	r1, [r7, #8]
   18992:	4613      	mov	r3, r2
   18994:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   18996:	68bb      	ldr	r3, [r7, #8]
   18998:	1c5a      	adds	r2, r3, #1
   1899a:	60ba      	str	r2, [r7, #8]
   1899c:	781a      	ldrb	r2, [r3, #0]
   1899e:	68fb      	ldr	r3, [r7, #12]
   189a0:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   189a2:	68fb      	ldr	r3, [r7, #12]
   189a4:	791a      	ldrb	r2, [r3, #4]
   189a6:	68fb      	ldr	r3, [r7, #12]
   189a8:	70da      	strb	r2, [r3, #3]
}
   189aa:	bf00      	nop
   189ac:	3714      	adds	r7, #20
   189ae:	46bd      	mov	sp, r7
   189b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   189b4:	4770      	bx	lr

000189b6 <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   189b6:	b480      	push	{r7}
   189b8:	b085      	sub	sp, #20
   189ba:	af00      	add	r7, sp, #0
   189bc:	60f8      	str	r0, [r7, #12]
   189be:	60b9      	str	r1, [r7, #8]
   189c0:	4613      	mov	r3, r2
   189c2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   189c4:	68bb      	ldr	r3, [r7, #8]
   189c6:	1c5a      	adds	r2, r3, #1
   189c8:	60ba      	str	r2, [r7, #8]
   189ca:	781a      	ldrb	r2, [r3, #0]
   189cc:	68fb      	ldr	r3, [r7, #12]
   189ce:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   189d0:	68bb      	ldr	r3, [r7, #8]
   189d2:	781b      	ldrb	r3, [r3, #0]
   189d4:	b29a      	uxth	r2, r3
   189d6:	68bb      	ldr	r3, [r7, #8]
   189d8:	3301      	adds	r3, #1
   189da:	781b      	ldrb	r3, [r3, #0]
   189dc:	b29b      	uxth	r3, r3
   189de:	021b      	lsls	r3, r3, #8
   189e0:	b29b      	uxth	r3, r3
   189e2:	4413      	add	r3, r2
   189e4:	b29a      	uxth	r2, r3
   189e6:	68fb      	ldr	r3, [r7, #12]
   189e8:	80da      	strh	r2, [r3, #6]
   189ea:	68bb      	ldr	r3, [r7, #8]
   189ec:	3302      	adds	r3, #2
   189ee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   189f0:	68bb      	ldr	r3, [r7, #8]
   189f2:	1c5a      	adds	r2, r3, #1
   189f4:	60ba      	str	r2, [r7, #8]
   189f6:	781b      	ldrb	r3, [r3, #0]
   189f8:	b25a      	sxtb	r2, r3
   189fa:	68fb      	ldr	r3, [r7, #12]
   189fc:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   189fe:	68fb      	ldr	r3, [r7, #12]
   18a00:	88da      	ldrh	r2, [r3, #6]
   18a02:	68fb      	ldr	r3, [r7, #12]
   18a04:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   18a06:	68fb      	ldr	r3, [r7, #12]
   18a08:	791a      	ldrb	r2, [r3, #4]
   18a0a:	68fb      	ldr	r3, [r7, #12]
   18a0c:	70da      	strb	r2, [r3, #3]
}
   18a0e:	bf00      	nop
   18a10:	3714      	adds	r7, #20
   18a12:	46bd      	mov	sp, r7
   18a14:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a18:	4770      	bx	lr

00018a1a <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18a1a:	b580      	push	{r7, lr}
   18a1c:	b084      	sub	sp, #16
   18a1e:	af00      	add	r7, sp, #0
   18a20:	60f8      	str	r0, [r7, #12]
   18a22:	60b9      	str	r1, [r7, #8]
   18a24:	4613      	mov	r3, r2
   18a26:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   18a28:	68bb      	ldr	r3, [r7, #8]
   18a2a:	1c5a      	adds	r2, r3, #1
   18a2c:	60ba      	str	r2, [r7, #8]
   18a2e:	781a      	ldrb	r2, [r3, #0]
   18a30:	68fb      	ldr	r3, [r7, #12]
   18a32:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   18a34:	68bb      	ldr	r3, [r7, #8]
   18a36:	781b      	ldrb	r3, [r3, #0]
   18a38:	b29a      	uxth	r2, r3
   18a3a:	68bb      	ldr	r3, [r7, #8]
   18a3c:	3301      	adds	r3, #1
   18a3e:	781b      	ldrb	r3, [r3, #0]
   18a40:	b29b      	uxth	r3, r3
   18a42:	021b      	lsls	r3, r3, #8
   18a44:	b29b      	uxth	r3, r3
   18a46:	4413      	add	r3, r2
   18a48:	b29a      	uxth	r2, r3
   18a4a:	68fb      	ldr	r3, [r7, #12]
   18a4c:	80da      	strh	r2, [r3, #6]
   18a4e:	68bb      	ldr	r3, [r7, #8]
   18a50:	3302      	adds	r3, #2
   18a52:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   18a54:	68fb      	ldr	r3, [r7, #12]
   18a56:	3308      	adds	r3, #8
   18a58:	2205      	movs	r2, #5
   18a5a:	68b9      	ldr	r1, [r7, #8]
   18a5c:	4618      	mov	r0, r3
   18a5e:	f7f3 fb7f 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   18a62:	68fb      	ldr	r3, [r7, #12]
   18a64:	88da      	ldrh	r2, [r3, #6]
   18a66:	68fb      	ldr	r3, [r7, #12]
   18a68:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   18a6a:	68fb      	ldr	r3, [r7, #12]
   18a6c:	791a      	ldrb	r2, [r3, #4]
   18a6e:	68fb      	ldr	r3, [r7, #12]
   18a70:	70da      	strb	r2, [r3, #3]
}
   18a72:	bf00      	nop
   18a74:	3710      	adds	r7, #16
   18a76:	46bd      	mov	sp, r7
   18a78:	bd80      	pop	{r7, pc}

00018a7a <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18a7a:	b480      	push	{r7}
   18a7c:	b085      	sub	sp, #20
   18a7e:	af00      	add	r7, sp, #0
   18a80:	60f8      	str	r0, [r7, #12]
   18a82:	60b9      	str	r1, [r7, #8]
   18a84:	4613      	mov	r3, r2
   18a86:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   18a88:	68bb      	ldr	r3, [r7, #8]
   18a8a:	1c5a      	adds	r2, r3, #1
   18a8c:	60ba      	str	r2, [r7, #8]
   18a8e:	781a      	ldrb	r2, [r3, #0]
   18a90:	68fb      	ldr	r3, [r7, #12]
   18a92:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   18a94:	68bb      	ldr	r3, [r7, #8]
   18a96:	781a      	ldrb	r2, [r3, #0]
   18a98:	68fb      	ldr	r3, [r7, #12]
   18a9a:	715a      	strb	r2, [r3, #5]
   18a9c:	68bb      	ldr	r3, [r7, #8]
   18a9e:	3302      	adds	r3, #2
   18aa0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   18aa2:	68bb      	ldr	r3, [r7, #8]
   18aa4:	1c5a      	adds	r2, r3, #1
   18aa6:	60ba      	str	r2, [r7, #8]
   18aa8:	781b      	ldrb	r3, [r3, #0]
   18aaa:	b25a      	sxtb	r2, r3
   18aac:	68fb      	ldr	r3, [r7, #12]
   18aae:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   18ab0:	68fb      	ldr	r3, [r7, #12]
   18ab2:	795b      	ldrb	r3, [r3, #5]
   18ab4:	b29a      	uxth	r2, r3
   18ab6:	68fb      	ldr	r3, [r7, #12]
   18ab8:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   18aba:	68fb      	ldr	r3, [r7, #12]
   18abc:	791a      	ldrb	r2, [r3, #4]
   18abe:	68fb      	ldr	r3, [r7, #12]
   18ac0:	70da      	strb	r2, [r3, #3]
}
   18ac2:	bf00      	nop
   18ac4:	3714      	adds	r7, #20
   18ac6:	46bd      	mov	sp, r7
   18ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
   18acc:	4770      	bx	lr

00018ace <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18ace:	b480      	push	{r7}
   18ad0:	b085      	sub	sp, #20
   18ad2:	af00      	add	r7, sp, #0
   18ad4:	60f8      	str	r0, [r7, #12]
   18ad6:	60b9      	str	r1, [r7, #8]
   18ad8:	4613      	mov	r3, r2
   18ada:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   18adc:	68bb      	ldr	r3, [r7, #8]
   18ade:	1c5a      	adds	r2, r3, #1
   18ae0:	60ba      	str	r2, [r7, #8]
   18ae2:	781a      	ldrb	r2, [r3, #0]
   18ae4:	68fb      	ldr	r3, [r7, #12]
   18ae6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   18ae8:	68bb      	ldr	r3, [r7, #8]
   18aea:	781b      	ldrb	r3, [r3, #0]
   18aec:	b29a      	uxth	r2, r3
   18aee:	68bb      	ldr	r3, [r7, #8]
   18af0:	3301      	adds	r3, #1
   18af2:	781b      	ldrb	r3, [r3, #0]
   18af4:	b29b      	uxth	r3, r3
   18af6:	021b      	lsls	r3, r3, #8
   18af8:	b29b      	uxth	r3, r3
   18afa:	4413      	add	r3, r2
   18afc:	b29a      	uxth	r2, r3
   18afe:	68fb      	ldr	r3, [r7, #12]
   18b00:	80da      	strh	r2, [r3, #6]
   18b02:	68bb      	ldr	r3, [r7, #8]
   18b04:	3302      	adds	r3, #2
   18b06:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   18b08:	68bb      	ldr	r3, [r7, #8]
   18b0a:	1c5a      	adds	r2, r3, #1
   18b0c:	60ba      	str	r2, [r7, #8]
   18b0e:	781a      	ldrb	r2, [r3, #0]
   18b10:	68fb      	ldr	r3, [r7, #12]
   18b12:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   18b14:	68bb      	ldr	r3, [r7, #8]
   18b16:	781b      	ldrb	r3, [r3, #0]
   18b18:	b29a      	uxth	r2, r3
   18b1a:	68bb      	ldr	r3, [r7, #8]
   18b1c:	3301      	adds	r3, #1
   18b1e:	781b      	ldrb	r3, [r3, #0]
   18b20:	b29b      	uxth	r3, r3
   18b22:	021b      	lsls	r3, r3, #8
   18b24:	b29b      	uxth	r3, r3
   18b26:	4413      	add	r3, r2
   18b28:	b29a      	uxth	r2, r3
   18b2a:	68fb      	ldr	r3, [r7, #12]
   18b2c:	815a      	strh	r2, [r3, #10]
   18b2e:	68bb      	ldr	r3, [r7, #8]
   18b30:	3302      	adds	r3, #2
   18b32:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   18b34:	68bb      	ldr	r3, [r7, #8]
   18b36:	781b      	ldrb	r3, [r3, #0]
   18b38:	b29a      	uxth	r2, r3
   18b3a:	68bb      	ldr	r3, [r7, #8]
   18b3c:	3301      	adds	r3, #1
   18b3e:	781b      	ldrb	r3, [r3, #0]
   18b40:	b29b      	uxth	r3, r3
   18b42:	021b      	lsls	r3, r3, #8
   18b44:	b29b      	uxth	r3, r3
   18b46:	4413      	add	r3, r2
   18b48:	b29a      	uxth	r2, r3
   18b4a:	68fb      	ldr	r3, [r7, #12]
   18b4c:	819a      	strh	r2, [r3, #12]
   18b4e:	68bb      	ldr	r3, [r7, #8]
   18b50:	3302      	adds	r3, #2
   18b52:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   18b54:	68fb      	ldr	r3, [r7, #12]
   18b56:	88da      	ldrh	r2, [r3, #6]
   18b58:	68fb      	ldr	r3, [r7, #12]
   18b5a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   18b5c:	68fb      	ldr	r3, [r7, #12]
   18b5e:	791a      	ldrb	r2, [r3, #4]
   18b60:	68fb      	ldr	r3, [r7, #12]
   18b62:	70da      	strb	r2, [r3, #3]
}
   18b64:	bf00      	nop
   18b66:	3714      	adds	r7, #20
   18b68:	46bd      	mov	sp, r7
   18b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b6e:	4770      	bx	lr

00018b70 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18b70:	b580      	push	{r7, lr}
   18b72:	b084      	sub	sp, #16
   18b74:	af00      	add	r7, sp, #0
   18b76:	60f8      	str	r0, [r7, #12]
   18b78:	60b9      	str	r1, [r7, #8]
   18b7a:	4613      	mov	r3, r2
   18b7c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   18b7e:	68bb      	ldr	r3, [r7, #8]
   18b80:	1c5a      	adds	r2, r3, #1
   18b82:	60ba      	str	r2, [r7, #8]
   18b84:	781a      	ldrb	r2, [r3, #0]
   18b86:	68fb      	ldr	r3, [r7, #12]
   18b88:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   18b8a:	68bb      	ldr	r3, [r7, #8]
   18b8c:	781b      	ldrb	r3, [r3, #0]
   18b8e:	b29a      	uxth	r2, r3
   18b90:	68bb      	ldr	r3, [r7, #8]
   18b92:	3301      	adds	r3, #1
   18b94:	781b      	ldrb	r3, [r3, #0]
   18b96:	b29b      	uxth	r3, r3
   18b98:	021b      	lsls	r3, r3, #8
   18b9a:	b29b      	uxth	r3, r3
   18b9c:	4413      	add	r3, r2
   18b9e:	b29a      	uxth	r2, r3
   18ba0:	68fb      	ldr	r3, [r7, #12]
   18ba2:	80da      	strh	r2, [r3, #6]
   18ba4:	68bb      	ldr	r3, [r7, #8]
   18ba6:	3302      	adds	r3, #2
   18ba8:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   18baa:	68fb      	ldr	r3, [r7, #12]
   18bac:	3308      	adds	r3, #8
   18bae:	2208      	movs	r2, #8
   18bb0:	68b9      	ldr	r1, [r7, #8]
   18bb2:	4618      	mov	r0, r3
   18bb4:	f7f3 fad4 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   18bb8:	68fb      	ldr	r3, [r7, #12]
   18bba:	88da      	ldrh	r2, [r3, #6]
   18bbc:	68fb      	ldr	r3, [r7, #12]
   18bbe:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   18bc0:	68fb      	ldr	r3, [r7, #12]
   18bc2:	791a      	ldrb	r2, [r3, #4]
   18bc4:	68fb      	ldr	r3, [r7, #12]
   18bc6:	70da      	strb	r2, [r3, #3]
}
   18bc8:	bf00      	nop
   18bca:	3710      	adds	r7, #16
   18bcc:	46bd      	mov	sp, r7
   18bce:	bd80      	pop	{r7, pc}

00018bd0 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18bd0:	b480      	push	{r7}
   18bd2:	b085      	sub	sp, #20
   18bd4:	af00      	add	r7, sp, #0
   18bd6:	60f8      	str	r0, [r7, #12]
   18bd8:	60b9      	str	r1, [r7, #8]
   18bda:	4613      	mov	r3, r2
   18bdc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   18bde:	68bb      	ldr	r3, [r7, #8]
   18be0:	1c5a      	adds	r2, r3, #1
   18be2:	60ba      	str	r2, [r7, #8]
   18be4:	781a      	ldrb	r2, [r3, #0]
   18be6:	68fb      	ldr	r3, [r7, #12]
   18be8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   18bea:	68bb      	ldr	r3, [r7, #8]
   18bec:	781b      	ldrb	r3, [r3, #0]
   18bee:	b29a      	uxth	r2, r3
   18bf0:	68bb      	ldr	r3, [r7, #8]
   18bf2:	3301      	adds	r3, #1
   18bf4:	781b      	ldrb	r3, [r3, #0]
   18bf6:	b29b      	uxth	r3, r3
   18bf8:	021b      	lsls	r3, r3, #8
   18bfa:	b29b      	uxth	r3, r3
   18bfc:	4413      	add	r3, r2
   18bfe:	b29a      	uxth	r2, r3
   18c00:	68fb      	ldr	r3, [r7, #12]
   18c02:	80da      	strh	r2, [r3, #6]
   18c04:	68bb      	ldr	r3, [r7, #8]
   18c06:	3302      	adds	r3, #2
   18c08:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   18c0a:	68fb      	ldr	r3, [r7, #12]
   18c0c:	88da      	ldrh	r2, [r3, #6]
   18c0e:	68fb      	ldr	r3, [r7, #12]
   18c10:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   18c12:	68fb      	ldr	r3, [r7, #12]
   18c14:	791a      	ldrb	r2, [r3, #4]
   18c16:	68fb      	ldr	r3, [r7, #12]
   18c18:	70da      	strb	r2, [r3, #3]
}
   18c1a:	bf00      	nop
   18c1c:	3714      	adds	r7, #20
   18c1e:	46bd      	mov	sp, r7
   18c20:	f85d 7b04 	ldr.w	r7, [sp], #4
   18c24:	4770      	bx	lr

00018c26 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18c26:	b480      	push	{r7}
   18c28:	b085      	sub	sp, #20
   18c2a:	af00      	add	r7, sp, #0
   18c2c:	60f8      	str	r0, [r7, #12]
   18c2e:	60b9      	str	r1, [r7, #8]
   18c30:	4613      	mov	r3, r2
   18c32:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   18c34:	68bb      	ldr	r3, [r7, #8]
   18c36:	1c5a      	adds	r2, r3, #1
   18c38:	60ba      	str	r2, [r7, #8]
   18c3a:	781a      	ldrb	r2, [r3, #0]
   18c3c:	68fb      	ldr	r3, [r7, #12]
   18c3e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   18c40:	68bb      	ldr	r3, [r7, #8]
   18c42:	781b      	ldrb	r3, [r3, #0]
   18c44:	b29a      	uxth	r2, r3
   18c46:	68bb      	ldr	r3, [r7, #8]
   18c48:	3301      	adds	r3, #1
   18c4a:	781b      	ldrb	r3, [r3, #0]
   18c4c:	b29b      	uxth	r3, r3
   18c4e:	021b      	lsls	r3, r3, #8
   18c50:	b29b      	uxth	r3, r3
   18c52:	4413      	add	r3, r2
   18c54:	b29a      	uxth	r2, r3
   18c56:	68fb      	ldr	r3, [r7, #12]
   18c58:	80da      	strh	r2, [r3, #6]
   18c5a:	68bb      	ldr	r3, [r7, #8]
   18c5c:	3302      	adds	r3, #2
   18c5e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   18c60:	68fb      	ldr	r3, [r7, #12]
   18c62:	88da      	ldrh	r2, [r3, #6]
   18c64:	68fb      	ldr	r3, [r7, #12]
   18c66:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   18c68:	68fb      	ldr	r3, [r7, #12]
   18c6a:	791a      	ldrb	r2, [r3, #4]
   18c6c:	68fb      	ldr	r3, [r7, #12]
   18c6e:	70da      	strb	r2, [r3, #3]
}
   18c70:	bf00      	nop
   18c72:	3714      	adds	r7, #20
   18c74:	46bd      	mov	sp, r7
   18c76:	f85d 7b04 	ldr.w	r7, [sp], #4
   18c7a:	4770      	bx	lr

00018c7c <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18c7c:	b480      	push	{r7}
   18c7e:	b085      	sub	sp, #20
   18c80:	af00      	add	r7, sp, #0
   18c82:	60f8      	str	r0, [r7, #12]
   18c84:	60b9      	str	r1, [r7, #8]
   18c86:	4613      	mov	r3, r2
   18c88:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   18c8a:	68bb      	ldr	r3, [r7, #8]
   18c8c:	1c5a      	adds	r2, r3, #1
   18c8e:	60ba      	str	r2, [r7, #8]
   18c90:	781a      	ldrb	r2, [r3, #0]
   18c92:	68fb      	ldr	r3, [r7, #12]
   18c94:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   18c96:	68bb      	ldr	r3, [r7, #8]
   18c98:	781b      	ldrb	r3, [r3, #0]
   18c9a:	b29a      	uxth	r2, r3
   18c9c:	68bb      	ldr	r3, [r7, #8]
   18c9e:	3301      	adds	r3, #1
   18ca0:	781b      	ldrb	r3, [r3, #0]
   18ca2:	b29b      	uxth	r3, r3
   18ca4:	021b      	lsls	r3, r3, #8
   18ca6:	b29b      	uxth	r3, r3
   18ca8:	4413      	add	r3, r2
   18caa:	b29a      	uxth	r2, r3
   18cac:	68fb      	ldr	r3, [r7, #12]
   18cae:	80da      	strh	r2, [r3, #6]
   18cb0:	68bb      	ldr	r3, [r7, #8]
   18cb2:	3302      	adds	r3, #2
   18cb4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   18cb6:	68fb      	ldr	r3, [r7, #12]
   18cb8:	88da      	ldrh	r2, [r3, #6]
   18cba:	68fb      	ldr	r3, [r7, #12]
   18cbc:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   18cbe:	68fb      	ldr	r3, [r7, #12]
   18cc0:	791a      	ldrb	r2, [r3, #4]
   18cc2:	68fb      	ldr	r3, [r7, #12]
   18cc4:	70da      	strb	r2, [r3, #3]
}
   18cc6:	bf00      	nop
   18cc8:	3714      	adds	r7, #20
   18cca:	46bd      	mov	sp, r7
   18ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cd0:	4770      	bx	lr

00018cd2 <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18cd2:	b480      	push	{r7}
   18cd4:	b085      	sub	sp, #20
   18cd6:	af00      	add	r7, sp, #0
   18cd8:	60f8      	str	r0, [r7, #12]
   18cda:	60b9      	str	r1, [r7, #8]
   18cdc:	4613      	mov	r3, r2
   18cde:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   18ce0:	68bb      	ldr	r3, [r7, #8]
   18ce2:	1c5a      	adds	r2, r3, #1
   18ce4:	60ba      	str	r2, [r7, #8]
   18ce6:	781a      	ldrb	r2, [r3, #0]
   18ce8:	68fb      	ldr	r3, [r7, #12]
   18cea:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   18cec:	68bb      	ldr	r3, [r7, #8]
   18cee:	781b      	ldrb	r3, [r3, #0]
   18cf0:	b29a      	uxth	r2, r3
   18cf2:	68bb      	ldr	r3, [r7, #8]
   18cf4:	3301      	adds	r3, #1
   18cf6:	781b      	ldrb	r3, [r3, #0]
   18cf8:	b29b      	uxth	r3, r3
   18cfa:	021b      	lsls	r3, r3, #8
   18cfc:	b29b      	uxth	r3, r3
   18cfe:	4413      	add	r3, r2
   18d00:	b29a      	uxth	r2, r3
   18d02:	68fb      	ldr	r3, [r7, #12]
   18d04:	80da      	strh	r2, [r3, #6]
   18d06:	68bb      	ldr	r3, [r7, #8]
   18d08:	3302      	adds	r3, #2
   18d0a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   18d0c:	68bb      	ldr	r3, [r7, #8]
   18d0e:	1c5a      	adds	r2, r3, #1
   18d10:	60ba      	str	r2, [r7, #8]
   18d12:	781a      	ldrb	r2, [r3, #0]
   18d14:	68fb      	ldr	r3, [r7, #12]
   18d16:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   18d18:	68fb      	ldr	r3, [r7, #12]
   18d1a:	88da      	ldrh	r2, [r3, #6]
   18d1c:	68fb      	ldr	r3, [r7, #12]
   18d1e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   18d20:	68fb      	ldr	r3, [r7, #12]
   18d22:	791a      	ldrb	r2, [r3, #4]
   18d24:	68fb      	ldr	r3, [r7, #12]
   18d26:	70da      	strb	r2, [r3, #3]
}
   18d28:	bf00      	nop
   18d2a:	3714      	adds	r7, #20
   18d2c:	46bd      	mov	sp, r7
   18d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d32:	4770      	bx	lr

00018d34 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18d34:	b580      	push	{r7, lr}
   18d36:	b084      	sub	sp, #16
   18d38:	af00      	add	r7, sp, #0
   18d3a:	60f8      	str	r0, [r7, #12]
   18d3c:	60b9      	str	r1, [r7, #8]
   18d3e:	4613      	mov	r3, r2
   18d40:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   18d42:	68bb      	ldr	r3, [r7, #8]
   18d44:	781b      	ldrb	r3, [r3, #0]
   18d46:	b29a      	uxth	r2, r3
   18d48:	68bb      	ldr	r3, [r7, #8]
   18d4a:	3301      	adds	r3, #1
   18d4c:	781b      	ldrb	r3, [r3, #0]
   18d4e:	b29b      	uxth	r3, r3
   18d50:	021b      	lsls	r3, r3, #8
   18d52:	b29b      	uxth	r3, r3
   18d54:	4413      	add	r3, r2
   18d56:	b29a      	uxth	r2, r3
   18d58:	68fb      	ldr	r3, [r7, #12]
   18d5a:	809a      	strh	r2, [r3, #4]
   18d5c:	68bb      	ldr	r3, [r7, #8]
   18d5e:	3302      	adds	r3, #2
   18d60:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   18d62:	68fb      	ldr	r3, [r7, #12]
   18d64:	3306      	adds	r3, #6
   18d66:	2208      	movs	r2, #8
   18d68:	68b9      	ldr	r1, [r7, #8]
   18d6a:	4618      	mov	r0, r3
   18d6c:	f7f3 f9f8 	bl	c160 <memcpy>
  p += HCI_RAND_LEN;
   18d70:	68bb      	ldr	r3, [r7, #8]
   18d72:	3308      	adds	r3, #8
   18d74:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   18d76:	68bb      	ldr	r3, [r7, #8]
   18d78:	781b      	ldrb	r3, [r3, #0]
   18d7a:	b29a      	uxth	r2, r3
   18d7c:	68bb      	ldr	r3, [r7, #8]
   18d7e:	3301      	adds	r3, #1
   18d80:	781b      	ldrb	r3, [r3, #0]
   18d82:	b29b      	uxth	r3, r3
   18d84:	021b      	lsls	r3, r3, #8
   18d86:	b29b      	uxth	r3, r3
   18d88:	4413      	add	r3, r2
   18d8a:	b29a      	uxth	r2, r3
   18d8c:	68fb      	ldr	r3, [r7, #12]
   18d8e:	81da      	strh	r2, [r3, #14]
   18d90:	68bb      	ldr	r3, [r7, #8]
   18d92:	3302      	adds	r3, #2
   18d94:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   18d96:	68fb      	ldr	r3, [r7, #12]
   18d98:	889a      	ldrh	r2, [r3, #4]
   18d9a:	68fb      	ldr	r3, [r7, #12]
   18d9c:	801a      	strh	r2, [r3, #0]
}
   18d9e:	bf00      	nop
   18da0:	3710      	adds	r7, #16
   18da2:	46bd      	mov	sp, r7
   18da4:	bd80      	pop	{r7, pc}

00018da6 <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18da6:	b480      	push	{r7}
   18da8:	b085      	sub	sp, #20
   18daa:	af00      	add	r7, sp, #0
   18dac:	60f8      	str	r0, [r7, #12]
   18dae:	60b9      	str	r1, [r7, #8]
   18db0:	4613      	mov	r3, r2
   18db2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   18db4:	68bb      	ldr	r3, [r7, #8]
   18db6:	781b      	ldrb	r3, [r3, #0]
   18db8:	b29a      	uxth	r2, r3
   18dba:	68bb      	ldr	r3, [r7, #8]
   18dbc:	3301      	adds	r3, #1
   18dbe:	781b      	ldrb	r3, [r3, #0]
   18dc0:	b29b      	uxth	r3, r3
   18dc2:	021b      	lsls	r3, r3, #8
   18dc4:	b29b      	uxth	r3, r3
   18dc6:	4413      	add	r3, r2
   18dc8:	b29a      	uxth	r2, r3
   18dca:	68fb      	ldr	r3, [r7, #12]
   18dcc:	809a      	strh	r2, [r3, #4]
   18dce:	68bb      	ldr	r3, [r7, #8]
   18dd0:	3302      	adds	r3, #2
   18dd2:	60bb      	str	r3, [r7, #8]
}
   18dd4:	bf00      	nop
   18dd6:	3714      	adds	r7, #20
   18dd8:	46bd      	mov	sp, r7
   18dda:	f85d 7b04 	ldr.w	r7, [sp], #4
   18dde:	4770      	bx	lr

00018de0 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18de0:	b580      	push	{r7, lr}
   18de2:	b084      	sub	sp, #16
   18de4:	af00      	add	r7, sp, #0
   18de6:	60f8      	str	r0, [r7, #12]
   18de8:	60b9      	str	r1, [r7, #8]
   18dea:	4613      	mov	r3, r2
   18dec:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
   18dee:	68bb      	ldr	r3, [r7, #8]
   18df0:	3b02      	subs	r3, #2
   18df2:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   18df4:	68bb      	ldr	r3, [r7, #8]
   18df6:	781b      	ldrb	r3, [r3, #0]
   18df8:	b29a      	uxth	r2, r3
   18dfa:	68bb      	ldr	r3, [r7, #8]
   18dfc:	3301      	adds	r3, #1
   18dfe:	781b      	ldrb	r3, [r3, #0]
   18e00:	b29b      	uxth	r3, r3
   18e02:	021b      	lsls	r3, r3, #8
   18e04:	b29b      	uxth	r3, r3
   18e06:	4413      	add	r3, r2
   18e08:	b29a      	uxth	r2, r3
   18e0a:	68fb      	ldr	r3, [r7, #12]
   18e0c:	809a      	strh	r2, [r3, #4]
   18e0e:	68bb      	ldr	r3, [r7, #8]
   18e10:	3302      	adds	r3, #2
   18e12:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   18e14:	68bb      	ldr	r3, [r7, #8]
   18e16:	1c5a      	adds	r2, r3, #1
   18e18:	60ba      	str	r2, [r7, #8]
   18e1a:	781a      	ldrb	r2, [r3, #0]
   18e1c:	68fb      	ldr	r3, [r7, #12]
   18e1e:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   18e20:	68fb      	ldr	r3, [r7, #12]
   18e22:	1d98      	adds	r0, r3, #6
   18e24:	79fb      	ldrb	r3, [r7, #7]
   18e26:	3b04      	subs	r3, #4
   18e28:	461a      	mov	r2, r3
   18e2a:	68b9      	ldr	r1, [r7, #8]
   18e2c:	f7f3 f998 	bl	c160 <memcpy>
}
   18e30:	bf00      	nop
   18e32:	3710      	adds	r7, #16
   18e34:	46bd      	mov	sp, r7
   18e36:	bd80      	pop	{r7, pc}

00018e38 <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18e38:	b580      	push	{r7, lr}
   18e3a:	b084      	sub	sp, #16
   18e3c:	af00      	add	r7, sp, #0
   18e3e:	60f8      	str	r0, [r7, #12]
   18e40:	60b9      	str	r1, [r7, #8]
   18e42:	4613      	mov	r3, r2
   18e44:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   18e46:	68fb      	ldr	r3, [r7, #12]
   18e48:	3304      	adds	r3, #4
   18e4a:	79fa      	ldrb	r2, [r7, #7]
   18e4c:	68b9      	ldr	r1, [r7, #8]
   18e4e:	4618      	mov	r0, r3
   18e50:	f7f3 f986 	bl	c160 <memcpy>
}
   18e54:	bf00      	nop
   18e56:	3710      	adds	r7, #16
   18e58:	46bd      	mov	sp, r7
   18e5a:	bd80      	pop	{r7, pc}

00018e5c <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18e5c:	b480      	push	{r7}
   18e5e:	b085      	sub	sp, #20
   18e60:	af00      	add	r7, sp, #0
   18e62:	60f8      	str	r0, [r7, #12]
   18e64:	60b9      	str	r1, [r7, #8]
   18e66:	4613      	mov	r3, r2
   18e68:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   18e6a:	68bb      	ldr	r3, [r7, #8]
   18e6c:	1c5a      	adds	r2, r3, #1
   18e6e:	60ba      	str	r2, [r7, #8]
   18e70:	781a      	ldrb	r2, [r3, #0]
   18e72:	68fb      	ldr	r3, [r7, #12]
   18e74:	711a      	strb	r2, [r3, #4]
}
   18e76:	bf00      	nop
   18e78:	3714      	adds	r7, #20
   18e7a:	46bd      	mov	sp, r7
   18e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e80:	4770      	bx	lr

00018e82 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18e82:	b580      	push	{r7, lr}
   18e84:	b084      	sub	sp, #16
   18e86:	af00      	add	r7, sp, #0
   18e88:	60f8      	str	r0, [r7, #12]
   18e8a:	60b9      	str	r1, [r7, #8]
   18e8c:	4613      	mov	r3, r2
   18e8e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   18e90:	68bb      	ldr	r3, [r7, #8]
   18e92:	1c5a      	adds	r2, r3, #1
   18e94:	60ba      	str	r2, [r7, #8]
   18e96:	781a      	ldrb	r2, [r3, #0]
   18e98:	68fb      	ldr	r3, [r7, #12]
   18e9a:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   18e9c:	68fb      	ldr	r3, [r7, #12]
   18e9e:	3305      	adds	r3, #5
   18ea0:	2210      	movs	r2, #16
   18ea2:	68b9      	ldr	r1, [r7, #8]
   18ea4:	4618      	mov	r0, r3
   18ea6:	f7f3 f95b 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   18eaa:	68fb      	ldr	r3, [r7, #12]
   18eac:	791a      	ldrb	r2, [r3, #4]
   18eae:	68fb      	ldr	r3, [r7, #12]
   18eb0:	70da      	strb	r2, [r3, #3]
}
   18eb2:	bf00      	nop
   18eb4:	3710      	adds	r7, #16
   18eb6:	46bd      	mov	sp, r7
   18eb8:	bd80      	pop	{r7, pc}

00018eba <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18eba:	b580      	push	{r7, lr}
   18ebc:	b084      	sub	sp, #16
   18ebe:	af00      	add	r7, sp, #0
   18ec0:	60f8      	str	r0, [r7, #12]
   18ec2:	60b9      	str	r1, [r7, #8]
   18ec4:	4613      	mov	r3, r2
   18ec6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   18ec8:	68bb      	ldr	r3, [r7, #8]
   18eca:	1c5a      	adds	r2, r3, #1
   18ecc:	60ba      	str	r2, [r7, #8]
   18ece:	781a      	ldrb	r2, [r3, #0]
   18ed0:	68fb      	ldr	r3, [r7, #12]
   18ed2:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   18ed4:	68fb      	ldr	r3, [r7, #12]
   18ed6:	3305      	adds	r3, #5
   18ed8:	2208      	movs	r2, #8
   18eda:	68b9      	ldr	r1, [r7, #8]
   18edc:	4618      	mov	r0, r3
   18ede:	f7f3 f93f 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   18ee2:	68fb      	ldr	r3, [r7, #12]
   18ee4:	791a      	ldrb	r2, [r3, #4]
   18ee6:	68fb      	ldr	r3, [r7, #12]
   18ee8:	70da      	strb	r2, [r3, #3]
}
   18eea:	bf00      	nop
   18eec:	3710      	adds	r7, #16
   18eee:	46bd      	mov	sp, r7
   18ef0:	bd80      	pop	{r7, pc}

00018ef2 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18ef2:	b480      	push	{r7}
   18ef4:	b085      	sub	sp, #20
   18ef6:	af00      	add	r7, sp, #0
   18ef8:	60f8      	str	r0, [r7, #12]
   18efa:	60b9      	str	r1, [r7, #8]
   18efc:	4613      	mov	r3, r2
   18efe:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   18f00:	68bb      	ldr	r3, [r7, #8]
   18f02:	1c5a      	adds	r2, r3, #1
   18f04:	60ba      	str	r2, [r7, #8]
   18f06:	781a      	ldrb	r2, [r3, #0]
   18f08:	68fb      	ldr	r3, [r7, #12]
   18f0a:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   18f0c:	68fb      	ldr	r3, [r7, #12]
   18f0e:	791a      	ldrb	r2, [r3, #4]
   18f10:	68fb      	ldr	r3, [r7, #12]
   18f12:	70da      	strb	r2, [r3, #3]
}
   18f14:	bf00      	nop
   18f16:	3714      	adds	r7, #20
   18f18:	46bd      	mov	sp, r7
   18f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   18f1e:	4770      	bx	lr

00018f20 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18f20:	b480      	push	{r7}
   18f22:	b085      	sub	sp, #20
   18f24:	af00      	add	r7, sp, #0
   18f26:	60f8      	str	r0, [r7, #12]
   18f28:	60b9      	str	r1, [r7, #8]
   18f2a:	4613      	mov	r3, r2
   18f2c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   18f2e:	68bb      	ldr	r3, [r7, #8]
   18f30:	1c5a      	adds	r2, r3, #1
   18f32:	60ba      	str	r2, [r7, #8]
   18f34:	781a      	ldrb	r2, [r3, #0]
   18f36:	68fb      	ldr	r3, [r7, #12]
   18f38:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   18f3a:	68fb      	ldr	r3, [r7, #12]
   18f3c:	791a      	ldrb	r2, [r3, #4]
   18f3e:	68fb      	ldr	r3, [r7, #12]
   18f40:	70da      	strb	r2, [r3, #3]
}
   18f42:	bf00      	nop
   18f44:	3714      	adds	r7, #20
   18f46:	46bd      	mov	sp, r7
   18f48:	f85d 7b04 	ldr.w	r7, [sp], #4
   18f4c:	4770      	bx	lr

00018f4e <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18f4e:	b480      	push	{r7}
   18f50:	b085      	sub	sp, #20
   18f52:	af00      	add	r7, sp, #0
   18f54:	60f8      	str	r0, [r7, #12]
   18f56:	60b9      	str	r1, [r7, #8]
   18f58:	4613      	mov	r3, r2
   18f5a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   18f5c:	68bb      	ldr	r3, [r7, #8]
   18f5e:	1c5a      	adds	r2, r3, #1
   18f60:	60ba      	str	r2, [r7, #8]
   18f62:	781a      	ldrb	r2, [r3, #0]
   18f64:	68fb      	ldr	r3, [r7, #12]
   18f66:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   18f68:	68fb      	ldr	r3, [r7, #12]
   18f6a:	791a      	ldrb	r2, [r3, #4]
   18f6c:	68fb      	ldr	r3, [r7, #12]
   18f6e:	70da      	strb	r2, [r3, #3]
}
   18f70:	bf00      	nop
   18f72:	3714      	adds	r7, #20
   18f74:	46bd      	mov	sp, r7
   18f76:	f85d 7b04 	ldr.w	r7, [sp], #4
   18f7a:	4770      	bx	lr

00018f7c <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18f7c:	b580      	push	{r7, lr}
   18f7e:	b084      	sub	sp, #16
   18f80:	af00      	add	r7, sp, #0
   18f82:	60f8      	str	r0, [r7, #12]
   18f84:	60b9      	str	r1, [r7, #8]
   18f86:	4613      	mov	r3, r2
   18f88:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   18f8a:	68bb      	ldr	r3, [r7, #8]
   18f8c:	1c5a      	adds	r2, r3, #1
   18f8e:	60ba      	str	r2, [r7, #8]
   18f90:	781a      	ldrb	r2, [r3, #0]
   18f92:	68fb      	ldr	r3, [r7, #12]
   18f94:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   18f96:	68fb      	ldr	r3, [r7, #12]
   18f98:	3305      	adds	r3, #5
   18f9a:	68b9      	ldr	r1, [r7, #8]
   18f9c:	4618      	mov	r0, r3
   18f9e:	f7fa fe7b 	bl	13c98 <BdaCpy>
   18fa2:	68bb      	ldr	r3, [r7, #8]
   18fa4:	3306      	adds	r3, #6
   18fa6:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   18fa8:	68fb      	ldr	r3, [r7, #12]
   18faa:	791a      	ldrb	r2, [r3, #4]
   18fac:	68fb      	ldr	r3, [r7, #12]
   18fae:	70da      	strb	r2, [r3, #3]
}
   18fb0:	bf00      	nop
   18fb2:	3710      	adds	r7, #16
   18fb4:	46bd      	mov	sp, r7
   18fb6:	bd80      	pop	{r7, pc}

00018fb8 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18fb8:	b580      	push	{r7, lr}
   18fba:	b084      	sub	sp, #16
   18fbc:	af00      	add	r7, sp, #0
   18fbe:	60f8      	str	r0, [r7, #12]
   18fc0:	60b9      	str	r1, [r7, #8]
   18fc2:	4613      	mov	r3, r2
   18fc4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   18fc6:	68bb      	ldr	r3, [r7, #8]
   18fc8:	1c5a      	adds	r2, r3, #1
   18fca:	60ba      	str	r2, [r7, #8]
   18fcc:	781a      	ldrb	r2, [r3, #0]
   18fce:	68fb      	ldr	r3, [r7, #12]
   18fd0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   18fd2:	68fb      	ldr	r3, [r7, #12]
   18fd4:	3305      	adds	r3, #5
   18fd6:	68b9      	ldr	r1, [r7, #8]
   18fd8:	4618      	mov	r0, r3
   18fda:	f7fa fe5d 	bl	13c98 <BdaCpy>
   18fde:	68bb      	ldr	r3, [r7, #8]
   18fe0:	3306      	adds	r3, #6
   18fe2:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   18fe4:	68fb      	ldr	r3, [r7, #12]
   18fe6:	791a      	ldrb	r2, [r3, #4]
   18fe8:	68fb      	ldr	r3, [r7, #12]
   18fea:	70da      	strb	r2, [r3, #3]
}
   18fec:	bf00      	nop
   18fee:	3710      	adds	r7, #16
   18ff0:	46bd      	mov	sp, r7
   18ff2:	bd80      	pop	{r7, pc}

00018ff4 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18ff4:	b480      	push	{r7}
   18ff6:	b085      	sub	sp, #20
   18ff8:	af00      	add	r7, sp, #0
   18ffa:	60f8      	str	r0, [r7, #12]
   18ffc:	60b9      	str	r1, [r7, #8]
   18ffe:	4613      	mov	r3, r2
   19000:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   19002:	68bb      	ldr	r3, [r7, #8]
   19004:	1c5a      	adds	r2, r3, #1
   19006:	60ba      	str	r2, [r7, #8]
   19008:	781a      	ldrb	r2, [r3, #0]
   1900a:	68fb      	ldr	r3, [r7, #12]
   1900c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   1900e:	68fb      	ldr	r3, [r7, #12]
   19010:	791a      	ldrb	r2, [r3, #4]
   19012:	68fb      	ldr	r3, [r7, #12]
   19014:	70da      	strb	r2, [r3, #3]
}
   19016:	bf00      	nop
   19018:	3714      	adds	r7, #20
   1901a:	46bd      	mov	sp, r7
   1901c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19020:	4770      	bx	lr

00019022 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19022:	b480      	push	{r7}
   19024:	b085      	sub	sp, #20
   19026:	af00      	add	r7, sp, #0
   19028:	60f8      	str	r0, [r7, #12]
   1902a:	60b9      	str	r1, [r7, #8]
   1902c:	4613      	mov	r3, r2
   1902e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   19030:	68bb      	ldr	r3, [r7, #8]
   19032:	1c5a      	adds	r2, r3, #1
   19034:	60ba      	str	r2, [r7, #8]
   19036:	781a      	ldrb	r2, [r3, #0]
   19038:	68fb      	ldr	r3, [r7, #12]
   1903a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   1903c:	68bb      	ldr	r3, [r7, #8]
   1903e:	781b      	ldrb	r3, [r3, #0]
   19040:	b29a      	uxth	r2, r3
   19042:	68bb      	ldr	r3, [r7, #8]
   19044:	3301      	adds	r3, #1
   19046:	781b      	ldrb	r3, [r3, #0]
   19048:	b29b      	uxth	r3, r3
   1904a:	021b      	lsls	r3, r3, #8
   1904c:	b29b      	uxth	r3, r3
   1904e:	4413      	add	r3, r2
   19050:	b29a      	uxth	r2, r3
   19052:	68fb      	ldr	r3, [r7, #12]
   19054:	80da      	strh	r2, [r3, #6]
   19056:	68bb      	ldr	r3, [r7, #8]
   19058:	3302      	adds	r3, #2
   1905a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   1905c:	68fb      	ldr	r3, [r7, #12]
   1905e:	791a      	ldrb	r2, [r3, #4]
   19060:	68fb      	ldr	r3, [r7, #12]
   19062:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   19064:	68fb      	ldr	r3, [r7, #12]
   19066:	88da      	ldrh	r2, [r3, #6]
   19068:	68fb      	ldr	r3, [r7, #12]
   1906a:	801a      	strh	r2, [r3, #0]
}
   1906c:	bf00      	nop
   1906e:	3714      	adds	r7, #20
   19070:	46bd      	mov	sp, r7
   19072:	f85d 7b04 	ldr.w	r7, [sp], #4
   19076:	4770      	bx	lr

00019078 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19078:	b480      	push	{r7}
   1907a:	b085      	sub	sp, #20
   1907c:	af00      	add	r7, sp, #0
   1907e:	60f8      	str	r0, [r7, #12]
   19080:	60b9      	str	r1, [r7, #8]
   19082:	4613      	mov	r3, r2
   19084:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   19086:	68bb      	ldr	r3, [r7, #8]
   19088:	1c5a      	adds	r2, r3, #1
   1908a:	60ba      	str	r2, [r7, #8]
   1908c:	781a      	ldrb	r2, [r3, #0]
   1908e:	68fb      	ldr	r3, [r7, #12]
   19090:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   19092:	68bb      	ldr	r3, [r7, #8]
   19094:	781b      	ldrb	r3, [r3, #0]
   19096:	b29a      	uxth	r2, r3
   19098:	68bb      	ldr	r3, [r7, #8]
   1909a:	3301      	adds	r3, #1
   1909c:	781b      	ldrb	r3, [r3, #0]
   1909e:	b29b      	uxth	r3, r3
   190a0:	021b      	lsls	r3, r3, #8
   190a2:	b29b      	uxth	r3, r3
   190a4:	4413      	add	r3, r2
   190a6:	b29a      	uxth	r2, r3
   190a8:	68fb      	ldr	r3, [r7, #12]
   190aa:	80da      	strh	r2, [r3, #6]
   190ac:	68bb      	ldr	r3, [r7, #8]
   190ae:	3302      	adds	r3, #2
   190b0:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   190b2:	68fb      	ldr	r3, [r7, #12]
   190b4:	791a      	ldrb	r2, [r3, #4]
   190b6:	68fb      	ldr	r3, [r7, #12]
   190b8:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   190ba:	68fb      	ldr	r3, [r7, #12]
   190bc:	88da      	ldrh	r2, [r3, #6]
   190be:	68fb      	ldr	r3, [r7, #12]
   190c0:	801a      	strh	r2, [r3, #0]
}
   190c2:	bf00      	nop
   190c4:	3714      	adds	r7, #20
   190c6:	46bd      	mov	sp, r7
   190c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   190cc:	4770      	bx	lr

000190ce <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   190ce:	b480      	push	{r7}
   190d0:	b085      	sub	sp, #20
   190d2:	af00      	add	r7, sp, #0
   190d4:	60f8      	str	r0, [r7, #12]
   190d6:	60b9      	str	r1, [r7, #8]
   190d8:	4613      	mov	r3, r2
   190da:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   190dc:	68bb      	ldr	r3, [r7, #8]
   190de:	1c5a      	adds	r2, r3, #1
   190e0:	60ba      	str	r2, [r7, #8]
   190e2:	781a      	ldrb	r2, [r3, #0]
   190e4:	68fb      	ldr	r3, [r7, #12]
   190e6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   190e8:	68bb      	ldr	r3, [r7, #8]
   190ea:	781b      	ldrb	r3, [r3, #0]
   190ec:	b29a      	uxth	r2, r3
   190ee:	68bb      	ldr	r3, [r7, #8]
   190f0:	3301      	adds	r3, #1
   190f2:	781b      	ldrb	r3, [r3, #0]
   190f4:	b29b      	uxth	r3, r3
   190f6:	021b      	lsls	r3, r3, #8
   190f8:	b29b      	uxth	r3, r3
   190fa:	4413      	add	r3, r2
   190fc:	b29a      	uxth	r2, r3
   190fe:	68fb      	ldr	r3, [r7, #12]
   19100:	80da      	strh	r2, [r3, #6]
   19102:	68bb      	ldr	r3, [r7, #8]
   19104:	3302      	adds	r3, #2
   19106:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   19108:	68bb      	ldr	r3, [r7, #8]
   1910a:	781b      	ldrb	r3, [r3, #0]
   1910c:	b29a      	uxth	r2, r3
   1910e:	68bb      	ldr	r3, [r7, #8]
   19110:	3301      	adds	r3, #1
   19112:	781b      	ldrb	r3, [r3, #0]
   19114:	b29b      	uxth	r3, r3
   19116:	021b      	lsls	r3, r3, #8
   19118:	b29b      	uxth	r3, r3
   1911a:	4413      	add	r3, r2
   1911c:	b29a      	uxth	r2, r3
   1911e:	68fb      	ldr	r3, [r7, #12]
   19120:	811a      	strh	r2, [r3, #8]
   19122:	68bb      	ldr	r3, [r7, #8]
   19124:	3302      	adds	r3, #2
   19126:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   19128:	68fb      	ldr	r3, [r7, #12]
   1912a:	791a      	ldrb	r2, [r3, #4]
   1912c:	68fb      	ldr	r3, [r7, #12]
   1912e:	70da      	strb	r2, [r3, #3]
}
   19130:	bf00      	nop
   19132:	3714      	adds	r7, #20
   19134:	46bd      	mov	sp, r7
   19136:	f85d 7b04 	ldr.w	r7, [sp], #4
   1913a:	4770      	bx	lr

0001913c <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1913c:	b480      	push	{r7}
   1913e:	b085      	sub	sp, #20
   19140:	af00      	add	r7, sp, #0
   19142:	60f8      	str	r0, [r7, #12]
   19144:	60b9      	str	r1, [r7, #8]
   19146:	4613      	mov	r3, r2
   19148:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   1914a:	68bb      	ldr	r3, [r7, #8]
   1914c:	1c5a      	adds	r2, r3, #1
   1914e:	60ba      	str	r2, [r7, #8]
   19150:	781a      	ldrb	r2, [r3, #0]
   19152:	68fb      	ldr	r3, [r7, #12]
   19154:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   19156:	68fb      	ldr	r3, [r7, #12]
   19158:	791a      	ldrb	r2, [r3, #4]
   1915a:	68fb      	ldr	r3, [r7, #12]
   1915c:	70da      	strb	r2, [r3, #3]
}
   1915e:	bf00      	nop
   19160:	3714      	adds	r7, #20
   19162:	46bd      	mov	sp, r7
   19164:	f85d 7b04 	ldr.w	r7, [sp], #4
   19168:	4770      	bx	lr

0001916a <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1916a:	b480      	push	{r7}
   1916c:	b085      	sub	sp, #20
   1916e:	af00      	add	r7, sp, #0
   19170:	60f8      	str	r0, [r7, #12]
   19172:	60b9      	str	r1, [r7, #8]
   19174:	4613      	mov	r3, r2
   19176:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   19178:	68bb      	ldr	r3, [r7, #8]
   1917a:	1c5a      	adds	r2, r3, #1
   1917c:	60ba      	str	r2, [r7, #8]
   1917e:	781a      	ldrb	r2, [r3, #0]
   19180:	68fb      	ldr	r3, [r7, #12]
   19182:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   19184:	68bb      	ldr	r3, [r7, #8]
   19186:	781b      	ldrb	r3, [r3, #0]
   19188:	b29a      	uxth	r2, r3
   1918a:	68bb      	ldr	r3, [r7, #8]
   1918c:	3301      	adds	r3, #1
   1918e:	781b      	ldrb	r3, [r3, #0]
   19190:	b29b      	uxth	r3, r3
   19192:	021b      	lsls	r3, r3, #8
   19194:	b29b      	uxth	r3, r3
   19196:	4413      	add	r3, r2
   19198:	b29a      	uxth	r2, r3
   1919a:	68fb      	ldr	r3, [r7, #12]
   1919c:	80da      	strh	r2, [r3, #6]
   1919e:	68bb      	ldr	r3, [r7, #8]
   191a0:	3302      	adds	r3, #2
   191a2:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   191a4:	68fb      	ldr	r3, [r7, #12]
   191a6:	791a      	ldrb	r2, [r3, #4]
   191a8:	68fb      	ldr	r3, [r7, #12]
   191aa:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   191ac:	68fb      	ldr	r3, [r7, #12]
   191ae:	88da      	ldrh	r2, [r3, #6]
   191b0:	68fb      	ldr	r3, [r7, #12]
   191b2:	801a      	strh	r2, [r3, #0]
}
   191b4:	bf00      	nop
   191b6:	3714      	adds	r7, #20
   191b8:	46bd      	mov	sp, r7
   191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   191be:	4770      	bx	lr

000191c0 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   191c0:	b480      	push	{r7}
   191c2:	b085      	sub	sp, #20
   191c4:	af00      	add	r7, sp, #0
   191c6:	60f8      	str	r0, [r7, #12]
   191c8:	60b9      	str	r1, [r7, #8]
   191ca:	4613      	mov	r3, r2
   191cc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   191ce:	68bb      	ldr	r3, [r7, #8]
   191d0:	1c5a      	adds	r2, r3, #1
   191d2:	60ba      	str	r2, [r7, #8]
   191d4:	781a      	ldrb	r2, [r3, #0]
   191d6:	68fb      	ldr	r3, [r7, #12]
   191d8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   191da:	68bb      	ldr	r3, [r7, #8]
   191dc:	781b      	ldrb	r3, [r3, #0]
   191de:	b29a      	uxth	r2, r3
   191e0:	68bb      	ldr	r3, [r7, #8]
   191e2:	3301      	adds	r3, #1
   191e4:	781b      	ldrb	r3, [r3, #0]
   191e6:	b29b      	uxth	r3, r3
   191e8:	021b      	lsls	r3, r3, #8
   191ea:	b29b      	uxth	r3, r3
   191ec:	4413      	add	r3, r2
   191ee:	b29a      	uxth	r2, r3
   191f0:	68fb      	ldr	r3, [r7, #12]
   191f2:	80da      	strh	r2, [r3, #6]
   191f4:	68bb      	ldr	r3, [r7, #8]
   191f6:	3302      	adds	r3, #2
   191f8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   191fa:	68bb      	ldr	r3, [r7, #8]
   191fc:	781b      	ldrb	r3, [r3, #0]
   191fe:	b29a      	uxth	r2, r3
   19200:	68bb      	ldr	r3, [r7, #8]
   19202:	3301      	adds	r3, #1
   19204:	781b      	ldrb	r3, [r3, #0]
   19206:	b29b      	uxth	r3, r3
   19208:	021b      	lsls	r3, r3, #8
   1920a:	b29b      	uxth	r3, r3
   1920c:	4413      	add	r3, r2
   1920e:	b29a      	uxth	r2, r3
   19210:	68fb      	ldr	r3, [r7, #12]
   19212:	811a      	strh	r2, [r3, #8]
   19214:	68bb      	ldr	r3, [r7, #8]
   19216:	3302      	adds	r3, #2
   19218:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   1921a:	68bb      	ldr	r3, [r7, #8]
   1921c:	781b      	ldrb	r3, [r3, #0]
   1921e:	b29a      	uxth	r2, r3
   19220:	68bb      	ldr	r3, [r7, #8]
   19222:	3301      	adds	r3, #1
   19224:	781b      	ldrb	r3, [r3, #0]
   19226:	b29b      	uxth	r3, r3
   19228:	021b      	lsls	r3, r3, #8
   1922a:	b29b      	uxth	r3, r3
   1922c:	4413      	add	r3, r2
   1922e:	b29a      	uxth	r2, r3
   19230:	68fb      	ldr	r3, [r7, #12]
   19232:	815a      	strh	r2, [r3, #10]
   19234:	68bb      	ldr	r3, [r7, #8]
   19236:	3302      	adds	r3, #2
   19238:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   1923a:	68bb      	ldr	r3, [r7, #8]
   1923c:	781b      	ldrb	r3, [r3, #0]
   1923e:	b29a      	uxth	r2, r3
   19240:	68bb      	ldr	r3, [r7, #8]
   19242:	3301      	adds	r3, #1
   19244:	781b      	ldrb	r3, [r3, #0]
   19246:	b29b      	uxth	r3, r3
   19248:	021b      	lsls	r3, r3, #8
   1924a:	b29b      	uxth	r3, r3
   1924c:	4413      	add	r3, r2
   1924e:	b29a      	uxth	r2, r3
   19250:	68fb      	ldr	r3, [r7, #12]
   19252:	819a      	strh	r2, [r3, #12]
   19254:	68bb      	ldr	r3, [r7, #8]
   19256:	3302      	adds	r3, #2
   19258:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   1925a:	68fb      	ldr	r3, [r7, #12]
   1925c:	791a      	ldrb	r2, [r3, #4]
   1925e:	68fb      	ldr	r3, [r7, #12]
   19260:	70da      	strb	r2, [r3, #3]
}
   19262:	bf00      	nop
   19264:	3714      	adds	r7, #20
   19266:	46bd      	mov	sp, r7
   19268:	f85d 7b04 	ldr.w	r7, [sp], #4
   1926c:	4770      	bx	lr

0001926e <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1926e:	b480      	push	{r7}
   19270:	b085      	sub	sp, #20
   19272:	af00      	add	r7, sp, #0
   19274:	60f8      	str	r0, [r7, #12]
   19276:	60b9      	str	r1, [r7, #8]
   19278:	4613      	mov	r3, r2
   1927a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   1927c:	68bb      	ldr	r3, [r7, #8]
   1927e:	781b      	ldrb	r3, [r3, #0]
   19280:	b29a      	uxth	r2, r3
   19282:	68bb      	ldr	r3, [r7, #8]
   19284:	3301      	adds	r3, #1
   19286:	781b      	ldrb	r3, [r3, #0]
   19288:	b29b      	uxth	r3, r3
   1928a:	021b      	lsls	r3, r3, #8
   1928c:	b29b      	uxth	r3, r3
   1928e:	4413      	add	r3, r2
   19290:	b29a      	uxth	r2, r3
   19292:	68fb      	ldr	r3, [r7, #12]
   19294:	809a      	strh	r2, [r3, #4]
   19296:	68bb      	ldr	r3, [r7, #8]
   19298:	3302      	adds	r3, #2
   1929a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   1929c:	68bb      	ldr	r3, [r7, #8]
   1929e:	781b      	ldrb	r3, [r3, #0]
   192a0:	b29a      	uxth	r2, r3
   192a2:	68bb      	ldr	r3, [r7, #8]
   192a4:	3301      	adds	r3, #1
   192a6:	781b      	ldrb	r3, [r3, #0]
   192a8:	b29b      	uxth	r3, r3
   192aa:	021b      	lsls	r3, r3, #8
   192ac:	b29b      	uxth	r3, r3
   192ae:	4413      	add	r3, r2
   192b0:	b29a      	uxth	r2, r3
   192b2:	68fb      	ldr	r3, [r7, #12]
   192b4:	80da      	strh	r2, [r3, #6]
   192b6:	68bb      	ldr	r3, [r7, #8]
   192b8:	3302      	adds	r3, #2
   192ba:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   192bc:	68bb      	ldr	r3, [r7, #8]
   192be:	781b      	ldrb	r3, [r3, #0]
   192c0:	b29a      	uxth	r2, r3
   192c2:	68bb      	ldr	r3, [r7, #8]
   192c4:	3301      	adds	r3, #1
   192c6:	781b      	ldrb	r3, [r3, #0]
   192c8:	b29b      	uxth	r3, r3
   192ca:	021b      	lsls	r3, r3, #8
   192cc:	b29b      	uxth	r3, r3
   192ce:	4413      	add	r3, r2
   192d0:	b29a      	uxth	r2, r3
   192d2:	68fb      	ldr	r3, [r7, #12]
   192d4:	811a      	strh	r2, [r3, #8]
   192d6:	68bb      	ldr	r3, [r7, #8]
   192d8:	3302      	adds	r3, #2
   192da:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   192dc:	68bb      	ldr	r3, [r7, #8]
   192de:	781b      	ldrb	r3, [r3, #0]
   192e0:	b29a      	uxth	r2, r3
   192e2:	68bb      	ldr	r3, [r7, #8]
   192e4:	3301      	adds	r3, #1
   192e6:	781b      	ldrb	r3, [r3, #0]
   192e8:	b29b      	uxth	r3, r3
   192ea:	021b      	lsls	r3, r3, #8
   192ec:	b29b      	uxth	r3, r3
   192ee:	4413      	add	r3, r2
   192f0:	b29a      	uxth	r2, r3
   192f2:	68fb      	ldr	r3, [r7, #12]
   192f4:	815a      	strh	r2, [r3, #10]
   192f6:	68bb      	ldr	r3, [r7, #8]
   192f8:	3302      	adds	r3, #2
   192fa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   192fc:	68bb      	ldr	r3, [r7, #8]
   192fe:	781b      	ldrb	r3, [r3, #0]
   19300:	b29a      	uxth	r2, r3
   19302:	68bb      	ldr	r3, [r7, #8]
   19304:	3301      	adds	r3, #1
   19306:	781b      	ldrb	r3, [r3, #0]
   19308:	b29b      	uxth	r3, r3
   1930a:	021b      	lsls	r3, r3, #8
   1930c:	b29b      	uxth	r3, r3
   1930e:	4413      	add	r3, r2
   19310:	b29a      	uxth	r2, r3
   19312:	68fb      	ldr	r3, [r7, #12]
   19314:	819a      	strh	r2, [r3, #12]
   19316:	68bb      	ldr	r3, [r7, #8]
   19318:	3302      	adds	r3, #2
   1931a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   1931c:	68fb      	ldr	r3, [r7, #12]
   1931e:	889a      	ldrh	r2, [r3, #4]
   19320:	68fb      	ldr	r3, [r7, #12]
   19322:	801a      	strh	r2, [r3, #0]
}
   19324:	bf00      	nop
   19326:	3714      	adds	r7, #20
   19328:	46bd      	mov	sp, r7
   1932a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1932e:	4770      	bx	lr

00019330 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19330:	b480      	push	{r7}
   19332:	b085      	sub	sp, #20
   19334:	af00      	add	r7, sp, #0
   19336:	60f8      	str	r0, [r7, #12]
   19338:	60b9      	str	r1, [r7, #8]
   1933a:	4613      	mov	r3, r2
   1933c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   1933e:	68bb      	ldr	r3, [r7, #8]
   19340:	781b      	ldrb	r3, [r3, #0]
   19342:	b29a      	uxth	r2, r3
   19344:	68bb      	ldr	r3, [r7, #8]
   19346:	3301      	adds	r3, #1
   19348:	781b      	ldrb	r3, [r3, #0]
   1934a:	b29b      	uxth	r3, r3
   1934c:	021b      	lsls	r3, r3, #8
   1934e:	b29b      	uxth	r3, r3
   19350:	4413      	add	r3, r2
   19352:	b29a      	uxth	r2, r3
   19354:	68fb      	ldr	r3, [r7, #12]
   19356:	809a      	strh	r2, [r3, #4]
   19358:	68bb      	ldr	r3, [r7, #8]
   1935a:	3302      	adds	r3, #2
   1935c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   1935e:	68bb      	ldr	r3, [r7, #8]
   19360:	781b      	ldrb	r3, [r3, #0]
   19362:	b29a      	uxth	r2, r3
   19364:	68bb      	ldr	r3, [r7, #8]
   19366:	3301      	adds	r3, #1
   19368:	781b      	ldrb	r3, [r3, #0]
   1936a:	b29b      	uxth	r3, r3
   1936c:	021b      	lsls	r3, r3, #8
   1936e:	b29b      	uxth	r3, r3
   19370:	4413      	add	r3, r2
   19372:	b29a      	uxth	r2, r3
   19374:	68fb      	ldr	r3, [r7, #12]
   19376:	80da      	strh	r2, [r3, #6]
   19378:	68bb      	ldr	r3, [r7, #8]
   1937a:	3302      	adds	r3, #2
   1937c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   1937e:	68bb      	ldr	r3, [r7, #8]
   19380:	781b      	ldrb	r3, [r3, #0]
   19382:	b29a      	uxth	r2, r3
   19384:	68bb      	ldr	r3, [r7, #8]
   19386:	3301      	adds	r3, #1
   19388:	781b      	ldrb	r3, [r3, #0]
   1938a:	b29b      	uxth	r3, r3
   1938c:	021b      	lsls	r3, r3, #8
   1938e:	b29b      	uxth	r3, r3
   19390:	4413      	add	r3, r2
   19392:	b29a      	uxth	r2, r3
   19394:	68fb      	ldr	r3, [r7, #12]
   19396:	811a      	strh	r2, [r3, #8]
   19398:	68bb      	ldr	r3, [r7, #8]
   1939a:	3302      	adds	r3, #2
   1939c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   1939e:	68bb      	ldr	r3, [r7, #8]
   193a0:	781b      	ldrb	r3, [r3, #0]
   193a2:	b29a      	uxth	r2, r3
   193a4:	68bb      	ldr	r3, [r7, #8]
   193a6:	3301      	adds	r3, #1
   193a8:	781b      	ldrb	r3, [r3, #0]
   193aa:	b29b      	uxth	r3, r3
   193ac:	021b      	lsls	r3, r3, #8
   193ae:	b29b      	uxth	r3, r3
   193b0:	4413      	add	r3, r2
   193b2:	b29a      	uxth	r2, r3
   193b4:	68fb      	ldr	r3, [r7, #12]
   193b6:	815a      	strh	r2, [r3, #10]
   193b8:	68bb      	ldr	r3, [r7, #8]
   193ba:	3302      	adds	r3, #2
   193bc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   193be:	68bb      	ldr	r3, [r7, #8]
   193c0:	781b      	ldrb	r3, [r3, #0]
   193c2:	b29a      	uxth	r2, r3
   193c4:	68bb      	ldr	r3, [r7, #8]
   193c6:	3301      	adds	r3, #1
   193c8:	781b      	ldrb	r3, [r3, #0]
   193ca:	b29b      	uxth	r3, r3
   193cc:	021b      	lsls	r3, r3, #8
   193ce:	b29b      	uxth	r3, r3
   193d0:	4413      	add	r3, r2
   193d2:	b29a      	uxth	r2, r3
   193d4:	68fb      	ldr	r3, [r7, #12]
   193d6:	819a      	strh	r2, [r3, #12]
   193d8:	68bb      	ldr	r3, [r7, #8]
   193da:	3302      	adds	r3, #2
   193dc:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   193de:	68fb      	ldr	r3, [r7, #12]
   193e0:	889a      	ldrh	r2, [r3, #4]
   193e2:	68fb      	ldr	r3, [r7, #12]
   193e4:	801a      	strh	r2, [r3, #0]
}
   193e6:	bf00      	nop
   193e8:	3714      	adds	r7, #20
   193ea:	46bd      	mov	sp, r7
   193ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   193f0:	4770      	bx	lr

000193f2 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   193f2:	b580      	push	{r7, lr}
   193f4:	b084      	sub	sp, #16
   193f6:	af00      	add	r7, sp, #0
   193f8:	60f8      	str	r0, [r7, #12]
   193fa:	60b9      	str	r1, [r7, #8]
   193fc:	4613      	mov	r3, r2
   193fe:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   19400:	68bb      	ldr	r3, [r7, #8]
   19402:	1c5a      	adds	r2, r3, #1
   19404:	60ba      	str	r2, [r7, #8]
   19406:	781a      	ldrb	r2, [r3, #0]
   19408:	68fb      	ldr	r3, [r7, #12]
   1940a:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   1940c:	68fb      	ldr	r3, [r7, #12]
   1940e:	3305      	adds	r3, #5
   19410:	2240      	movs	r2, #64	; 0x40
   19412:	68b9      	ldr	r1, [r7, #8]
   19414:	4618      	mov	r0, r3
   19416:	f7f2 fea3 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   1941a:	68fb      	ldr	r3, [r7, #12]
   1941c:	791a      	ldrb	r2, [r3, #4]
   1941e:	68fb      	ldr	r3, [r7, #12]
   19420:	70da      	strb	r2, [r3, #3]
}
   19422:	bf00      	nop
   19424:	3710      	adds	r7, #16
   19426:	46bd      	mov	sp, r7
   19428:	bd80      	pop	{r7, pc}

0001942a <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1942a:	b580      	push	{r7, lr}
   1942c:	b084      	sub	sp, #16
   1942e:	af00      	add	r7, sp, #0
   19430:	60f8      	str	r0, [r7, #12]
   19432:	60b9      	str	r1, [r7, #8]
   19434:	4613      	mov	r3, r2
   19436:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   19438:	68bb      	ldr	r3, [r7, #8]
   1943a:	1c5a      	adds	r2, r3, #1
   1943c:	60ba      	str	r2, [r7, #8]
   1943e:	781a      	ldrb	r2, [r3, #0]
   19440:	68fb      	ldr	r3, [r7, #12]
   19442:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   19444:	68fb      	ldr	r3, [r7, #12]
   19446:	3305      	adds	r3, #5
   19448:	2220      	movs	r2, #32
   1944a:	68b9      	ldr	r1, [r7, #8]
   1944c:	4618      	mov	r0, r3
   1944e:	f7f2 fe87 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	791a      	ldrb	r2, [r3, #4]
   19456:	68fb      	ldr	r3, [r7, #12]
   19458:	70da      	strb	r2, [r3, #3]
}
   1945a:	bf00      	nop
   1945c:	3710      	adds	r7, #16
   1945e:	46bd      	mov	sp, r7
   19460:	bd80      	pop	{r7, pc}

00019462 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19462:	b480      	push	{r7}
   19464:	b085      	sub	sp, #20
   19466:	af00      	add	r7, sp, #0
   19468:	60f8      	str	r0, [r7, #12]
   1946a:	60b9      	str	r1, [r7, #8]
   1946c:	4613      	mov	r3, r2
   1946e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   19470:	68bb      	ldr	r3, [r7, #8]
   19472:	1c5a      	adds	r2, r3, #1
   19474:	60ba      	str	r2, [r7, #8]
   19476:	781a      	ldrb	r2, [r3, #0]
   19478:	68fb      	ldr	r3, [r7, #12]
   1947a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   1947c:	68bb      	ldr	r3, [r7, #8]
   1947e:	781b      	ldrb	r3, [r3, #0]
   19480:	b29a      	uxth	r2, r3
   19482:	68bb      	ldr	r3, [r7, #8]
   19484:	3301      	adds	r3, #1
   19486:	781b      	ldrb	r3, [r3, #0]
   19488:	b29b      	uxth	r3, r3
   1948a:	021b      	lsls	r3, r3, #8
   1948c:	b29b      	uxth	r3, r3
   1948e:	4413      	add	r3, r2
   19490:	b29a      	uxth	r2, r3
   19492:	68fb      	ldr	r3, [r7, #12]
   19494:	80da      	strh	r2, [r3, #6]
   19496:	68bb      	ldr	r3, [r7, #8]
   19498:	3302      	adds	r3, #2
   1949a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   1949c:	68fb      	ldr	r3, [r7, #12]
   1949e:	791a      	ldrb	r2, [r3, #4]
   194a0:	68fb      	ldr	r3, [r7, #12]
   194a2:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   194a4:	68fb      	ldr	r3, [r7, #12]
   194a6:	88da      	ldrh	r2, [r3, #6]
   194a8:	68fb      	ldr	r3, [r7, #12]
   194aa:	801a      	strh	r2, [r3, #0]
}
   194ac:	bf00      	nop
   194ae:	3714      	adds	r7, #20
   194b0:	46bd      	mov	sp, r7
   194b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   194b6:	4770      	bx	lr

000194b8 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   194b8:	b480      	push	{r7}
   194ba:	b085      	sub	sp, #20
   194bc:	af00      	add	r7, sp, #0
   194be:	60f8      	str	r0, [r7, #12]
   194c0:	60b9      	str	r1, [r7, #8]
   194c2:	4613      	mov	r3, r2
   194c4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   194c6:	68bb      	ldr	r3, [r7, #8]
   194c8:	781b      	ldrb	r3, [r3, #0]
   194ca:	b29a      	uxth	r2, r3
   194cc:	68bb      	ldr	r3, [r7, #8]
   194ce:	3301      	adds	r3, #1
   194d0:	781b      	ldrb	r3, [r3, #0]
   194d2:	b29b      	uxth	r3, r3
   194d4:	021b      	lsls	r3, r3, #8
   194d6:	b29b      	uxth	r3, r3
   194d8:	4413      	add	r3, r2
   194da:	b29a      	uxth	r2, r3
   194dc:	68fb      	ldr	r3, [r7, #12]
   194de:	809a      	strh	r2, [r3, #4]
   194e0:	68bb      	ldr	r3, [r7, #8]
   194e2:	3302      	adds	r3, #2
   194e4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   194e6:	68fb      	ldr	r3, [r7, #12]
   194e8:	889a      	ldrh	r2, [r3, #4]
   194ea:	68fb      	ldr	r3, [r7, #12]
   194ec:	801a      	strh	r2, [r3, #0]
}
   194ee:	bf00      	nop
   194f0:	3714      	adds	r7, #20
   194f2:	46bd      	mov	sp, r7
   194f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   194f8:	4770      	bx	lr

000194fa <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   194fa:	b480      	push	{r7}
   194fc:	b085      	sub	sp, #20
   194fe:	af00      	add	r7, sp, #0
   19500:	60f8      	str	r0, [r7, #12]
   19502:	60b9      	str	r1, [r7, #8]
   19504:	4613      	mov	r3, r2
   19506:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   19508:	68bb      	ldr	r3, [r7, #8]
   1950a:	1c5a      	adds	r2, r3, #1
   1950c:	60ba      	str	r2, [r7, #8]
   1950e:	781a      	ldrb	r2, [r3, #0]
   19510:	68fb      	ldr	r3, [r7, #12]
   19512:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   19514:	68bb      	ldr	r3, [r7, #8]
   19516:	781b      	ldrb	r3, [r3, #0]
   19518:	b29a      	uxth	r2, r3
   1951a:	68bb      	ldr	r3, [r7, #8]
   1951c:	3301      	adds	r3, #1
   1951e:	781b      	ldrb	r3, [r3, #0]
   19520:	b29b      	uxth	r3, r3
   19522:	021b      	lsls	r3, r3, #8
   19524:	b29b      	uxth	r3, r3
   19526:	4413      	add	r3, r2
   19528:	b29a      	uxth	r2, r3
   1952a:	68fb      	ldr	r3, [r7, #12]
   1952c:	80da      	strh	r2, [r3, #6]
   1952e:	68bb      	ldr	r3, [r7, #8]
   19530:	3302      	adds	r3, #2
   19532:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   19534:	68bb      	ldr	r3, [r7, #8]
   19536:	1c5a      	adds	r2, r3, #1
   19538:	60ba      	str	r2, [r7, #8]
   1953a:	781a      	ldrb	r2, [r3, #0]
   1953c:	68fb      	ldr	r3, [r7, #12]
   1953e:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   19540:	68bb      	ldr	r3, [r7, #8]
   19542:	1c5a      	adds	r2, r3, #1
   19544:	60ba      	str	r2, [r7, #8]
   19546:	781a      	ldrb	r2, [r3, #0]
   19548:	68fb      	ldr	r3, [r7, #12]
   1954a:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   1954c:	68fb      	ldr	r3, [r7, #12]
   1954e:	791a      	ldrb	r2, [r3, #4]
   19550:	68fb      	ldr	r3, [r7, #12]
   19552:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   19554:	68fb      	ldr	r3, [r7, #12]
   19556:	88da      	ldrh	r2, [r3, #6]
   19558:	68fb      	ldr	r3, [r7, #12]
   1955a:	801a      	strh	r2, [r3, #0]
}
   1955c:	bf00      	nop
   1955e:	3714      	adds	r7, #20
   19560:	46bd      	mov	sp, r7
   19562:	f85d 7b04 	ldr.w	r7, [sp], #4
   19566:	4770      	bx	lr

00019568 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19568:	b480      	push	{r7}
   1956a:	b085      	sub	sp, #20
   1956c:	af00      	add	r7, sp, #0
   1956e:	60f8      	str	r0, [r7, #12]
   19570:	60b9      	str	r1, [r7, #8]
   19572:	4613      	mov	r3, r2
   19574:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   19576:	68bb      	ldr	r3, [r7, #8]
   19578:	1c5a      	adds	r2, r3, #1
   1957a:	60ba      	str	r2, [r7, #8]
   1957c:	781a      	ldrb	r2, [r3, #0]
   1957e:	68fb      	ldr	r3, [r7, #12]
   19580:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   19582:	68fb      	ldr	r3, [r7, #12]
   19584:	791a      	ldrb	r2, [r3, #4]
   19586:	68fb      	ldr	r3, [r7, #12]
   19588:	70da      	strb	r2, [r3, #3]
}
   1958a:	bf00      	nop
   1958c:	3714      	adds	r7, #20
   1958e:	46bd      	mov	sp, r7
   19590:	f85d 7b04 	ldr.w	r7, [sp], #4
   19594:	4770      	bx	lr

00019596 <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19596:	b480      	push	{r7}
   19598:	b085      	sub	sp, #20
   1959a:	af00      	add	r7, sp, #0
   1959c:	60f8      	str	r0, [r7, #12]
   1959e:	60b9      	str	r1, [r7, #8]
   195a0:	4613      	mov	r3, r2
   195a2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   195a4:	68bb      	ldr	r3, [r7, #8]
   195a6:	1c5a      	adds	r2, r3, #1
   195a8:	60ba      	str	r2, [r7, #8]
   195aa:	781a      	ldrb	r2, [r3, #0]
   195ac:	68fb      	ldr	r3, [r7, #12]
   195ae:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   195b0:	68bb      	ldr	r3, [r7, #8]
   195b2:	781b      	ldrb	r3, [r3, #0]
   195b4:	b29a      	uxth	r2, r3
   195b6:	68bb      	ldr	r3, [r7, #8]
   195b8:	3301      	adds	r3, #1
   195ba:	781b      	ldrb	r3, [r3, #0]
   195bc:	b29b      	uxth	r3, r3
   195be:	021b      	lsls	r3, r3, #8
   195c0:	b29b      	uxth	r3, r3
   195c2:	4413      	add	r3, r2
   195c4:	b29a      	uxth	r2, r3
   195c6:	68fb      	ldr	r3, [r7, #12]
   195c8:	80da      	strh	r2, [r3, #6]
   195ca:	68bb      	ldr	r3, [r7, #8]
   195cc:	3302      	adds	r3, #2
   195ce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   195d0:	68bb      	ldr	r3, [r7, #8]
   195d2:	1c5a      	adds	r2, r3, #1
   195d4:	60ba      	str	r2, [r7, #8]
   195d6:	781a      	ldrb	r2, [r3, #0]
   195d8:	68fb      	ldr	r3, [r7, #12]
   195da:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   195dc:	68bb      	ldr	r3, [r7, #8]
   195de:	1c5a      	adds	r2, r3, #1
   195e0:	60ba      	str	r2, [r7, #8]
   195e2:	781a      	ldrb	r2, [r3, #0]
   195e4:	68fb      	ldr	r3, [r7, #12]
   195e6:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   195e8:	68fb      	ldr	r3, [r7, #12]
   195ea:	791a      	ldrb	r2, [r3, #4]
   195ec:	68fb      	ldr	r3, [r7, #12]
   195ee:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   195f0:	68fb      	ldr	r3, [r7, #12]
   195f2:	88da      	ldrh	r2, [r3, #6]
   195f4:	68fb      	ldr	r3, [r7, #12]
   195f6:	801a      	strh	r2, [r3, #0]
}
   195f8:	bf00      	nop
   195fa:	3714      	adds	r7, #20
   195fc:	46bd      	mov	sp, r7
   195fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   19602:	4770      	bx	lr

00019604 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   19604:	b580      	push	{r7, lr}
   19606:	b084      	sub	sp, #16
   19608:	af00      	add	r7, sp, #0
   1960a:	6078      	str	r0, [r7, #4]
   1960c:	460b      	mov	r3, r1
   1960e:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   19610:	687b      	ldr	r3, [r7, #4]
   19612:	1c5a      	adds	r2, r3, #1
   19614:	607a      	str	r2, [r7, #4]
   19616:	781b      	ldrb	r3, [r3, #0]
   19618:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   1961a:	7bfb      	ldrb	r3, [r7, #15]
   1961c:	2b0f      	cmp	r3, #15
   1961e:	d862      	bhi.n	196e6 <hciEvtProcessLeAdvReport+0xe2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   19620:	203b      	movs	r0, #59	; 0x3b
   19622:	f7fa ff57 	bl	144d4 <WsfBufAlloc>
   19626:	60b8      	str	r0, [r7, #8]
   19628:	68bb      	ldr	r3, [r7, #8]
   1962a:	2b00      	cmp	r3, #0
   1962c:	d05c      	beq.n	196e8 <hciEvtProcessLeAdvReport+0xe4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   1962e:	e04f      	b.n	196d0 <hciEvtProcessLeAdvReport+0xcc>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   19630:	687b      	ldr	r3, [r7, #4]
   19632:	1c5a      	adds	r2, r3, #1
   19634:	607a      	str	r2, [r7, #4]
   19636:	781a      	ldrb	r2, [r3, #0]
   19638:	68bb      	ldr	r3, [r7, #8]
   1963a:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   1963c:	687b      	ldr	r3, [r7, #4]
   1963e:	1c5a      	adds	r2, r3, #1
   19640:	607a      	str	r2, [r7, #4]
   19642:	781a      	ldrb	r2, [r3, #0]
   19644:	68bb      	ldr	r3, [r7, #8]
   19646:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   19648:	68bb      	ldr	r3, [r7, #8]
   1964a:	330c      	adds	r3, #12
   1964c:	6879      	ldr	r1, [r7, #4]
   1964e:	4618      	mov	r0, r3
   19650:	f7fa fb22 	bl	13c98 <BdaCpy>
   19654:	687b      	ldr	r3, [r7, #4]
   19656:	3306      	adds	r3, #6
   19658:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   1965a:	687b      	ldr	r3, [r7, #4]
   1965c:	1c5a      	adds	r2, r3, #1
   1965e:	607a      	str	r2, [r7, #4]
   19660:	781a      	ldrb	r2, [r3, #0]
   19662:	68bb      	ldr	r3, [r7, #8]
   19664:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   19666:	68bb      	ldr	r3, [r7, #8]
   19668:	7a1b      	ldrb	r3, [r3, #8]
   1966a:	2b1f      	cmp	r3, #31
   1966c:	d836      	bhi.n	196dc <hciEvtProcessLeAdvReport+0xd8>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   1966e:	68bb      	ldr	r3, [r7, #8]
   19670:	f103 021c 	add.w	r2, r3, #28
   19674:	68bb      	ldr	r3, [r7, #8]
   19676:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   19678:	68bb      	ldr	r3, [r7, #8]
   1967a:	6858      	ldr	r0, [r3, #4]
   1967c:	68bb      	ldr	r3, [r7, #8]
   1967e:	7a1b      	ldrb	r3, [r3, #8]
   19680:	461a      	mov	r2, r3
   19682:	6879      	ldr	r1, [r7, #4]
   19684:	f7f2 fd6c 	bl	c160 <memcpy>
      p += pMsg->len;
   19688:	68bb      	ldr	r3, [r7, #8]
   1968a:	7a1b      	ldrb	r3, [r3, #8]
   1968c:	461a      	mov	r2, r3
   1968e:	687b      	ldr	r3, [r7, #4]
   19690:	4413      	add	r3, r2
   19692:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   19694:	687b      	ldr	r3, [r7, #4]
   19696:	1c5a      	adds	r2, r3, #1
   19698:	607a      	str	r2, [r7, #4]
   1969a:	781b      	ldrb	r3, [r3, #0]
   1969c:	b25a      	sxtb	r2, r3
   1969e:	68bb      	ldr	r3, [r7, #8]
   196a0:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   196a2:	68bb      	ldr	r3, [r7, #8]
   196a4:	2200      	movs	r2, #0
   196a6:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   196a8:	68bb      	ldr	r3, [r7, #8]
   196aa:	3313      	adds	r3, #19
   196ac:	2206      	movs	r2, #6
   196ae:	2100      	movs	r1, #0
   196b0:	4618      	mov	r0, r3
   196b2:	f7f2 fe53 	bl	c35c <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   196b6:	68bb      	ldr	r3, [r7, #8]
   196b8:	2200      	movs	r2, #0
   196ba:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   196bc:	68bb      	ldr	r3, [r7, #8]
   196be:	2206      	movs	r2, #6
   196c0:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   196c2:	68bb      	ldr	r3, [r7, #8]
   196c4:	2200      	movs	r2, #0
   196c6:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   196c8:	4b09      	ldr	r3, [pc, #36]	; (196f0 <hciEvtProcessLeAdvReport+0xec>)
   196ca:	689b      	ldr	r3, [r3, #8]
   196cc:	68b8      	ldr	r0, [r7, #8]
   196ce:	4798      	blx	r3
    while (i-- > 0)
   196d0:	7bfb      	ldrb	r3, [r7, #15]
   196d2:	1e5a      	subs	r2, r3, #1
   196d4:	73fa      	strb	r2, [r7, #15]
   196d6:	2b00      	cmp	r3, #0
   196d8:	d1aa      	bne.n	19630 <hciEvtProcessLeAdvReport+0x2c>
   196da:	e000      	b.n	196de <hciEvtProcessLeAdvReport+0xda>
        break;
   196dc:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   196de:	68b8      	ldr	r0, [r7, #8]
   196e0:	f7fa ff38 	bl	14554 <WsfBufFree>
   196e4:	e000      	b.n	196e8 <hciEvtProcessLeAdvReport+0xe4>
    return;
   196e6:	bf00      	nop
  }
}
   196e8:	3710      	adds	r7, #16
   196ea:	46bd      	mov	sp, r7
   196ec:	bd80      	pop	{r7, pc}
   196ee:	bf00      	nop
   196f0:	1000a694 	.word	0x1000a694

000196f4 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   196f4:	b580      	push	{r7, lr}
   196f6:	b086      	sub	sp, #24
   196f8:	af00      	add	r7, sp, #0
   196fa:	6078      	str	r0, [r7, #4]
   196fc:	460b      	mov	r3, r1
   196fe:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   19700:	687b      	ldr	r3, [r7, #4]
   19702:	781b      	ldrb	r3, [r3, #0]
   19704:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   19706:	7dfb      	ldrb	r3, [r7, #23]
   19708:	2b0f      	cmp	r3, #15
   1970a:	f200 80c4 	bhi.w	19896 <hciEvtProcessLeExtAdvReport+0x1a2>
  {
    return;
  }

  ptr = p + 1;
   1970e:	687b      	ldr	r3, [r7, #4]
   19710:	3301      	adds	r3, #1
   19712:	613b      	str	r3, [r7, #16]
  maxLen = 0;
   19714:	2300      	movs	r3, #0
   19716:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   19718:	e011      	b.n	1973e <hciEvtProcessLeExtAdvReport+0x4a>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   1971a:	693b      	ldr	r3, [r7, #16]
   1971c:	3317      	adds	r3, #23
   1971e:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   19720:	693b      	ldr	r3, [r7, #16]
   19722:	1c5a      	adds	r2, r3, #1
   19724:	613a      	str	r2, [r7, #16]
   19726:	781b      	ldrb	r3, [r3, #0]
   19728:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
   1972a:	7bbb      	ldrb	r3, [r7, #14]
   1972c:	693a      	ldr	r2, [r7, #16]
   1972e:	4413      	add	r3, r2
   19730:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   19732:	7bba      	ldrb	r2, [r7, #14]
   19734:	7bfb      	ldrb	r3, [r7, #15]
   19736:	429a      	cmp	r2, r3
   19738:	d901      	bls.n	1973e <hciEvtProcessLeExtAdvReport+0x4a>
    {
      /* update max len */
      maxLen = dataLen;
   1973a:	7bbb      	ldrb	r3, [r7, #14]
   1973c:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
   1973e:	7dfb      	ldrb	r3, [r7, #23]
   19740:	1e5a      	subs	r2, r3, #1
   19742:	75fa      	strb	r2, [r7, #23]
   19744:	2b00      	cmp	r3, #0
   19746:	d1e8      	bne.n	1971a <hciEvtProcessLeExtAdvReport+0x26>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   19748:	7bfb      	ldrb	r3, [r7, #15]
   1974a:	b29b      	uxth	r3, r3
   1974c:	3320      	adds	r3, #32
   1974e:	b29b      	uxth	r3, r3
   19750:	4618      	mov	r0, r3
   19752:	f7fa febf 	bl	144d4 <WsfBufAlloc>
   19756:	60b8      	str	r0, [r7, #8]
   19758:	68bb      	ldr	r3, [r7, #8]
   1975a:	2b00      	cmp	r3, #0
   1975c:	f000 809c 	beq.w	19898 <hciEvtProcessLeExtAdvReport+0x1a4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   19760:	687b      	ldr	r3, [r7, #4]
   19762:	1c5a      	adds	r2, r3, #1
   19764:	607a      	str	r2, [r7, #4]
   19766:	781b      	ldrb	r3, [r3, #0]
   19768:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   1976a:	e088      	b.n	1987e <hciEvtProcessLeExtAdvReport+0x18a>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   1976c:	687b      	ldr	r3, [r7, #4]
   1976e:	781b      	ldrb	r3, [r3, #0]
   19770:	b29a      	uxth	r2, r3
   19772:	687b      	ldr	r3, [r7, #4]
   19774:	3301      	adds	r3, #1
   19776:	781b      	ldrb	r3, [r3, #0]
   19778:	b29b      	uxth	r3, r3
   1977a:	021b      	lsls	r3, r3, #8
   1977c:	b29b      	uxth	r3, r3
   1977e:	4413      	add	r3, r2
   19780:	b29a      	uxth	r2, r3
   19782:	68bb      	ldr	r3, [r7, #8]
   19784:	809a      	strh	r2, [r3, #4]
   19786:	687b      	ldr	r3, [r7, #4]
   19788:	3302      	adds	r3, #2
   1978a:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   1978c:	687b      	ldr	r3, [r7, #4]
   1978e:	1c5a      	adds	r2, r3, #1
   19790:	607a      	str	r2, [r7, #4]
   19792:	781a      	ldrb	r2, [r3, #0]
   19794:	68bb      	ldr	r3, [r7, #8]
   19796:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   19798:	68bb      	ldr	r3, [r7, #8]
   1979a:	3307      	adds	r3, #7
   1979c:	6879      	ldr	r1, [r7, #4]
   1979e:	4618      	mov	r0, r3
   197a0:	f7fa fa7a 	bl	13c98 <BdaCpy>
   197a4:	687b      	ldr	r3, [r7, #4]
   197a6:	3306      	adds	r3, #6
   197a8:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   197aa:	687b      	ldr	r3, [r7, #4]
   197ac:	1c5a      	adds	r2, r3, #1
   197ae:	607a      	str	r2, [r7, #4]
   197b0:	781a      	ldrb	r2, [r3, #0]
   197b2:	68bb      	ldr	r3, [r7, #8]
   197b4:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   197b6:	687b      	ldr	r3, [r7, #4]
   197b8:	1c5a      	adds	r2, r3, #1
   197ba:	607a      	str	r2, [r7, #4]
   197bc:	781a      	ldrb	r2, [r3, #0]
   197be:	68bb      	ldr	r3, [r7, #8]
   197c0:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   197c2:	687b      	ldr	r3, [r7, #4]
   197c4:	1c5a      	adds	r2, r3, #1
   197c6:	607a      	str	r2, [r7, #4]
   197c8:	781a      	ldrb	r2, [r3, #0]
   197ca:	68bb      	ldr	r3, [r7, #8]
   197cc:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   197ce:	687b      	ldr	r3, [r7, #4]
   197d0:	1c5a      	adds	r2, r3, #1
   197d2:	607a      	str	r2, [r7, #4]
   197d4:	781b      	ldrb	r3, [r3, #0]
   197d6:	b25a      	sxtb	r2, r3
   197d8:	68bb      	ldr	r3, [r7, #8]
   197da:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   197dc:	687b      	ldr	r3, [r7, #4]
   197de:	1c5a      	adds	r2, r3, #1
   197e0:	607a      	str	r2, [r7, #4]
   197e2:	781b      	ldrb	r3, [r3, #0]
   197e4:	b25a      	sxtb	r2, r3
   197e6:	68bb      	ldr	r3, [r7, #8]
   197e8:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   197ea:	687b      	ldr	r3, [r7, #4]
   197ec:	781b      	ldrb	r3, [r3, #0]
   197ee:	b29a      	uxth	r2, r3
   197f0:	687b      	ldr	r3, [r7, #4]
   197f2:	3301      	adds	r3, #1
   197f4:	781b      	ldrb	r3, [r3, #0]
   197f6:	b29b      	uxth	r3, r3
   197f8:	021b      	lsls	r3, r3, #8
   197fa:	b29b      	uxth	r3, r3
   197fc:	4413      	add	r3, r2
   197fe:	b29b      	uxth	r3, r3
   19800:	b21a      	sxth	r2, r3
   19802:	68bb      	ldr	r3, [r7, #8]
   19804:	825a      	strh	r2, [r3, #18]
   19806:	687b      	ldr	r3, [r7, #4]
   19808:	3302      	adds	r3, #2
   1980a:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   1980c:	687b      	ldr	r3, [r7, #4]
   1980e:	1c5a      	adds	r2, r3, #1
   19810:	607a      	str	r2, [r7, #4]
   19812:	781a      	ldrb	r2, [r3, #0]
   19814:	68bb      	ldr	r3, [r7, #8]
   19816:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   19818:	68bb      	ldr	r3, [r7, #8]
   1981a:	3315      	adds	r3, #21
   1981c:	6879      	ldr	r1, [r7, #4]
   1981e:	4618      	mov	r0, r3
   19820:	f7fa fa3a 	bl	13c98 <BdaCpy>
   19824:	687b      	ldr	r3, [r7, #4]
   19826:	3306      	adds	r3, #6
   19828:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   1982a:	687b      	ldr	r3, [r7, #4]
   1982c:	1c5a      	adds	r2, r3, #1
   1982e:	607a      	str	r2, [r7, #4]
   19830:	781a      	ldrb	r2, [r3, #0]
   19832:	68bb      	ldr	r3, [r7, #8]
   19834:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   19836:	68bb      	ldr	r3, [r7, #8]
   19838:	7edb      	ldrb	r3, [r3, #27]
   1983a:	2be5      	cmp	r3, #229	; 0xe5
   1983c:	d826      	bhi.n	1988c <hciEvtProcessLeExtAdvReport+0x198>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   1983e:	68bb      	ldr	r3, [r7, #8]
   19840:	f103 0220 	add.w	r2, r3, #32
   19844:	68bb      	ldr	r3, [r7, #8]
   19846:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
   19848:	68bb      	ldr	r3, [r7, #8]
   1984a:	69d8      	ldr	r0, [r3, #28]
   1984c:	68bb      	ldr	r3, [r7, #8]
   1984e:	7edb      	ldrb	r3, [r3, #27]
   19850:	461a      	mov	r2, r3
   19852:	6879      	ldr	r1, [r7, #4]
   19854:	f7f2 fc84 	bl	c160 <memcpy>
      p += pMsg->len;
   19858:	68bb      	ldr	r3, [r7, #8]
   1985a:	7edb      	ldrb	r3, [r3, #27]
   1985c:	461a      	mov	r2, r3
   1985e:	687b      	ldr	r3, [r7, #4]
   19860:	4413      	add	r3, r2
   19862:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   19864:	68bb      	ldr	r3, [r7, #8]
   19866:	2200      	movs	r2, #0
   19868:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   1986a:	68bb      	ldr	r3, [r7, #8]
   1986c:	222c      	movs	r2, #44	; 0x2c
   1986e:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   19870:	68bb      	ldr	r3, [r7, #8]
   19872:	2200      	movs	r2, #0
   19874:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   19876:	4b0a      	ldr	r3, [pc, #40]	; (198a0 <hciEvtProcessLeExtAdvReport+0x1ac>)
   19878:	689b      	ldr	r3, [r3, #8]
   1987a:	68b8      	ldr	r0, [r7, #8]
   1987c:	4798      	blx	r3
    while (i-- > 0)
   1987e:	7dfb      	ldrb	r3, [r7, #23]
   19880:	1e5a      	subs	r2, r3, #1
   19882:	75fa      	strb	r2, [r7, #23]
   19884:	2b00      	cmp	r3, #0
   19886:	f47f af71 	bne.w	1976c <hciEvtProcessLeExtAdvReport+0x78>
   1988a:	e000      	b.n	1988e <hciEvtProcessLeExtAdvReport+0x19a>
        break;
   1988c:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   1988e:	68b8      	ldr	r0, [r7, #8]
   19890:	f7fa fe60 	bl	14554 <WsfBufFree>
   19894:	e000      	b.n	19898 <hciEvtProcessLeExtAdvReport+0x1a4>
    return;
   19896:	bf00      	nop
  }
}
   19898:	3718      	adds	r7, #24
   1989a:	46bd      	mov	sp, r7
   1989c:	bd80      	pop	{r7, pc}
   1989e:	bf00      	nop
   198a0:	1000a694 	.word	0x1000a694

000198a4 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   198a4:	b480      	push	{r7}
   198a6:	b085      	sub	sp, #20
   198a8:	af00      	add	r7, sp, #0
   198aa:	60f8      	str	r0, [r7, #12]
   198ac:	60b9      	str	r1, [r7, #8]
   198ae:	4613      	mov	r3, r2
   198b0:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
   198b2:	bf00      	nop
   198b4:	3714      	adds	r7, #20
   198b6:	46bd      	mov	sp, r7
   198b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   198bc:	4770      	bx	lr

000198be <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   198be:	b480      	push	{r7}
   198c0:	b085      	sub	sp, #20
   198c2:	af00      	add	r7, sp, #0
   198c4:	60f8      	str	r0, [r7, #12]
   198c6:	60b9      	str	r1, [r7, #8]
   198c8:	4613      	mov	r3, r2
   198ca:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   198cc:	68bb      	ldr	r3, [r7, #8]
   198ce:	1c5a      	adds	r2, r3, #1
   198d0:	60ba      	str	r2, [r7, #8]
   198d2:	781a      	ldrb	r2, [r3, #0]
   198d4:	68fb      	ldr	r3, [r7, #12]
   198d6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   198d8:	68bb      	ldr	r3, [r7, #8]
   198da:	1c5a      	adds	r2, r3, #1
   198dc:	60ba      	str	r2, [r7, #8]
   198de:	781a      	ldrb	r2, [r3, #0]
   198e0:	68fb      	ldr	r3, [r7, #12]
   198e2:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   198e4:	68bb      	ldr	r3, [r7, #8]
   198e6:	781b      	ldrb	r3, [r3, #0]
   198e8:	b29a      	uxth	r2, r3
   198ea:	68bb      	ldr	r3, [r7, #8]
   198ec:	3301      	adds	r3, #1
   198ee:	781b      	ldrb	r3, [r3, #0]
   198f0:	b29b      	uxth	r3, r3
   198f2:	021b      	lsls	r3, r3, #8
   198f4:	b29b      	uxth	r3, r3
   198f6:	4413      	add	r3, r2
   198f8:	b29a      	uxth	r2, r3
   198fa:	68fb      	ldr	r3, [r7, #12]
   198fc:	80da      	strh	r2, [r3, #6]
   198fe:	68bb      	ldr	r3, [r7, #8]
   19900:	3302      	adds	r3, #2
   19902:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   19904:	68bb      	ldr	r3, [r7, #8]
   19906:	1c5a      	adds	r2, r3, #1
   19908:	60ba      	str	r2, [r7, #8]
   1990a:	781a      	ldrb	r2, [r3, #0]
   1990c:	68fb      	ldr	r3, [r7, #12]
   1990e:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   19910:	68fb      	ldr	r3, [r7, #12]
   19912:	791a      	ldrb	r2, [r3, #4]
   19914:	68fb      	ldr	r3, [r7, #12]
   19916:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   19918:	68fb      	ldr	r3, [r7, #12]
   1991a:	88da      	ldrh	r2, [r3, #6]
   1991c:	68fb      	ldr	r3, [r7, #12]
   1991e:	801a      	strh	r2, [r3, #0]
}
   19920:	bf00      	nop
   19922:	3714      	adds	r7, #20
   19924:	46bd      	mov	sp, r7
   19926:	f85d 7b04 	ldr.w	r7, [sp], #4
   1992a:	4770      	bx	lr

0001992c <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1992c:	b580      	push	{r7, lr}
   1992e:	b084      	sub	sp, #16
   19930:	af00      	add	r7, sp, #0
   19932:	60f8      	str	r0, [r7, #12]
   19934:	60b9      	str	r1, [r7, #8]
   19936:	4613      	mov	r3, r2
   19938:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   1993a:	68bb      	ldr	r3, [r7, #8]
   1993c:	1c5a      	adds	r2, r3, #1
   1993e:	60ba      	str	r2, [r7, #8]
   19940:	781a      	ldrb	r2, [r3, #0]
   19942:	68fb      	ldr	r3, [r7, #12]
   19944:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   19946:	68bb      	ldr	r3, [r7, #8]
   19948:	1c5a      	adds	r2, r3, #1
   1994a:	60ba      	str	r2, [r7, #8]
   1994c:	781a      	ldrb	r2, [r3, #0]
   1994e:	68fb      	ldr	r3, [r7, #12]
   19950:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   19952:	68fb      	ldr	r3, [r7, #12]
   19954:	3306      	adds	r3, #6
   19956:	68b9      	ldr	r1, [r7, #8]
   19958:	4618      	mov	r0, r3
   1995a:	f7fa f99d 	bl	13c98 <BdaCpy>
   1995e:	68bb      	ldr	r3, [r7, #8]
   19960:	3306      	adds	r3, #6
   19962:	60bb      	str	r3, [r7, #8]
}
   19964:	bf00      	nop
   19966:	3710      	adds	r7, #16
   19968:	46bd      	mov	sp, r7
   1996a:	bd80      	pop	{r7, pc}

0001996c <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1996c:	b580      	push	{r7, lr}
   1996e:	b084      	sub	sp, #16
   19970:	af00      	add	r7, sp, #0
   19972:	60f8      	str	r0, [r7, #12]
   19974:	60b9      	str	r1, [r7, #8]
   19976:	4613      	mov	r3, r2
   19978:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   1997a:	68bb      	ldr	r3, [r7, #8]
   1997c:	1c5a      	adds	r2, r3, #1
   1997e:	60ba      	str	r2, [r7, #8]
   19980:	781a      	ldrb	r2, [r3, #0]
   19982:	68fb      	ldr	r3, [r7, #12]
   19984:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   19986:	68bb      	ldr	r3, [r7, #8]
   19988:	781b      	ldrb	r3, [r3, #0]
   1998a:	b29a      	uxth	r2, r3
   1998c:	68bb      	ldr	r3, [r7, #8]
   1998e:	3301      	adds	r3, #1
   19990:	781b      	ldrb	r3, [r3, #0]
   19992:	b29b      	uxth	r3, r3
   19994:	021b      	lsls	r3, r3, #8
   19996:	b29b      	uxth	r3, r3
   19998:	4413      	add	r3, r2
   1999a:	b29a      	uxth	r2, r3
   1999c:	68fb      	ldr	r3, [r7, #12]
   1999e:	80da      	strh	r2, [r3, #6]
   199a0:	68bb      	ldr	r3, [r7, #8]
   199a2:	3302      	adds	r3, #2
   199a4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   199a6:	68bb      	ldr	r3, [r7, #8]
   199a8:	1c5a      	adds	r2, r3, #1
   199aa:	60ba      	str	r2, [r7, #8]
   199ac:	781a      	ldrb	r2, [r3, #0]
   199ae:	68fb      	ldr	r3, [r7, #12]
   199b0:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   199b2:	68bb      	ldr	r3, [r7, #8]
   199b4:	1c5a      	adds	r2, r3, #1
   199b6:	60ba      	str	r2, [r7, #8]
   199b8:	781a      	ldrb	r2, [r3, #0]
   199ba:	68fb      	ldr	r3, [r7, #12]
   199bc:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   199be:	68fb      	ldr	r3, [r7, #12]
   199c0:	330a      	adds	r3, #10
   199c2:	68b9      	ldr	r1, [r7, #8]
   199c4:	4618      	mov	r0, r3
   199c6:	f7fa f967 	bl	13c98 <BdaCpy>
   199ca:	68bb      	ldr	r3, [r7, #8]
   199cc:	3306      	adds	r3, #6
   199ce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   199d0:	68bb      	ldr	r3, [r7, #8]
   199d2:	1c5a      	adds	r2, r3, #1
   199d4:	60ba      	str	r2, [r7, #8]
   199d6:	781a      	ldrb	r2, [r3, #0]
   199d8:	68fb      	ldr	r3, [r7, #12]
   199da:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   199dc:	68bb      	ldr	r3, [r7, #8]
   199de:	781b      	ldrb	r3, [r3, #0]
   199e0:	b29a      	uxth	r2, r3
   199e2:	68bb      	ldr	r3, [r7, #8]
   199e4:	3301      	adds	r3, #1
   199e6:	781b      	ldrb	r3, [r3, #0]
   199e8:	b29b      	uxth	r3, r3
   199ea:	021b      	lsls	r3, r3, #8
   199ec:	b29b      	uxth	r3, r3
   199ee:	4413      	add	r3, r2
   199f0:	b29a      	uxth	r2, r3
   199f2:	68fb      	ldr	r3, [r7, #12]
   199f4:	825a      	strh	r2, [r3, #18]
   199f6:	68bb      	ldr	r3, [r7, #8]
   199f8:	3302      	adds	r3, #2
   199fa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   199fc:	68bb      	ldr	r3, [r7, #8]
   199fe:	1c5a      	adds	r2, r3, #1
   19a00:	60ba      	str	r2, [r7, #8]
   19a02:	781a      	ldrb	r2, [r3, #0]
   19a04:	68fb      	ldr	r3, [r7, #12]
   19a06:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   19a08:	68fb      	ldr	r3, [r7, #12]
   19a0a:	791a      	ldrb	r2, [r3, #4]
   19a0c:	68fb      	ldr	r3, [r7, #12]
   19a0e:	70da      	strb	r2, [r3, #3]
}
   19a10:	bf00      	nop
   19a12:	3710      	adds	r7, #16
   19a14:	46bd      	mov	sp, r7
   19a16:	bd80      	pop	{r7, pc}

00019a18 <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   19a18:	b580      	push	{r7, lr}
   19a1a:	b084      	sub	sp, #16
   19a1c:	af00      	add	r7, sp, #0
   19a1e:	6078      	str	r0, [r7, #4]
   19a20:	460b      	mov	r3, r1
   19a22:	70fb      	strb	r3, [r7, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   19a24:	687b      	ldr	r3, [r7, #4]
   19a26:	795b      	ldrb	r3, [r3, #5]
   19a28:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   19a2a:	7bfb      	ldrb	r3, [r7, #15]
   19a2c:	2bf8      	cmp	r3, #248	; 0xf8
   19a2e:	d857      	bhi.n	19ae0 <hciEvtProcessLePerAdvReport+0xc8>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   19a30:	7bfb      	ldrb	r3, [r7, #15]
   19a32:	b29b      	uxth	r3, r3
   19a34:	3310      	adds	r3, #16
   19a36:	b29b      	uxth	r3, r3
   19a38:	4618      	mov	r0, r3
   19a3a:	f7fa fd4b 	bl	144d4 <WsfBufAlloc>
   19a3e:	60b8      	str	r0, [r7, #8]
   19a40:	68bb      	ldr	r3, [r7, #8]
   19a42:	2b00      	cmp	r3, #0
   19a44:	d04d      	beq.n	19ae2 <hciEvtProcessLePerAdvReport+0xca>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   19a46:	687b      	ldr	r3, [r7, #4]
   19a48:	781b      	ldrb	r3, [r3, #0]
   19a4a:	b29a      	uxth	r2, r3
   19a4c:	687b      	ldr	r3, [r7, #4]
   19a4e:	3301      	adds	r3, #1
   19a50:	781b      	ldrb	r3, [r3, #0]
   19a52:	b29b      	uxth	r3, r3
   19a54:	021b      	lsls	r3, r3, #8
   19a56:	b29b      	uxth	r3, r3
   19a58:	4413      	add	r3, r2
   19a5a:	b29a      	uxth	r2, r3
   19a5c:	68bb      	ldr	r3, [r7, #8]
   19a5e:	809a      	strh	r2, [r3, #4]
   19a60:	687b      	ldr	r3, [r7, #4]
   19a62:	3302      	adds	r3, #2
   19a64:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   19a66:	687b      	ldr	r3, [r7, #4]
   19a68:	1c5a      	adds	r2, r3, #1
   19a6a:	607a      	str	r2, [r7, #4]
   19a6c:	781a      	ldrb	r2, [r3, #0]
   19a6e:	68bb      	ldr	r3, [r7, #8]
   19a70:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   19a72:	687b      	ldr	r3, [r7, #4]
   19a74:	1c5a      	adds	r2, r3, #1
   19a76:	607a      	str	r2, [r7, #4]
   19a78:	781a      	ldrb	r2, [r3, #0]
   19a7a:	68bb      	ldr	r3, [r7, #8]
   19a7c:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   19a7e:	687b      	ldr	r3, [r7, #4]
   19a80:	1c5a      	adds	r2, r3, #1
   19a82:	607a      	str	r2, [r7, #4]
   19a84:	781a      	ldrb	r2, [r3, #0]
   19a86:	68bb      	ldr	r3, [r7, #8]
   19a88:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   19a8a:	687b      	ldr	r3, [r7, #4]
   19a8c:	1c5a      	adds	r2, r3, #1
   19a8e:	607a      	str	r2, [r7, #4]
   19a90:	781a      	ldrb	r2, [r3, #0]
   19a92:	68bb      	ldr	r3, [r7, #8]
   19a94:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   19a96:	687b      	ldr	r3, [r7, #4]
   19a98:	1c5a      	adds	r2, r3, #1
   19a9a:	607a      	str	r2, [r7, #4]
   19a9c:	781a      	ldrb	r2, [r3, #0]
   19a9e:	68bb      	ldr	r3, [r7, #8]
   19aa0:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   19aa2:	68bb      	ldr	r3, [r7, #8]
   19aa4:	f103 0210 	add.w	r2, r3, #16
   19aa8:	68bb      	ldr	r3, [r7, #8]
   19aaa:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   19aac:	68bb      	ldr	r3, [r7, #8]
   19aae:	68d8      	ldr	r0, [r3, #12]
   19ab0:	68bb      	ldr	r3, [r7, #8]
   19ab2:	7a9b      	ldrb	r3, [r3, #10]
   19ab4:	461a      	mov	r2, r3
   19ab6:	6879      	ldr	r1, [r7, #4]
   19ab8:	f7f2 fb52 	bl	c160 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   19abc:	68bb      	ldr	r3, [r7, #8]
   19abe:	2200      	movs	r2, #0
   19ac0:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   19ac2:	68bb      	ldr	r3, [r7, #8]
   19ac4:	2231      	movs	r2, #49	; 0x31
   19ac6:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   19ac8:	68bb      	ldr	r3, [r7, #8]
   19aca:	7a5a      	ldrb	r2, [r3, #9]
   19acc:	68bb      	ldr	r3, [r7, #8]
   19ace:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   19ad0:	4b05      	ldr	r3, [pc, #20]	; (19ae8 <hciEvtProcessLePerAdvReport+0xd0>)
   19ad2:	689b      	ldr	r3, [r3, #8]
   19ad4:	68b8      	ldr	r0, [r7, #8]
   19ad6:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   19ad8:	68b8      	ldr	r0, [r7, #8]
   19ada:	f7fa fd3b 	bl	14554 <WsfBufFree>
   19ade:	e000      	b.n	19ae2 <hciEvtProcessLePerAdvReport+0xca>
    return;
   19ae0:	bf00      	nop
  }
}
   19ae2:	3710      	adds	r7, #16
   19ae4:	46bd      	mov	sp, r7
   19ae6:	bd80      	pop	{r7, pc}
   19ae8:	1000a694 	.word	0x1000a694

00019aec <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19aec:	b480      	push	{r7}
   19aee:	b085      	sub	sp, #20
   19af0:	af00      	add	r7, sp, #0
   19af2:	60f8      	str	r0, [r7, #12]
   19af4:	60b9      	str	r1, [r7, #8]
   19af6:	4613      	mov	r3, r2
   19af8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   19afa:	68bb      	ldr	r3, [r7, #8]
   19afc:	1c5a      	adds	r2, r3, #1
   19afe:	60ba      	str	r2, [r7, #8]
   19b00:	781a      	ldrb	r2, [r3, #0]
   19b02:	68fb      	ldr	r3, [r7, #12]
   19b04:	70da      	strb	r2, [r3, #3]
}
   19b06:	bf00      	nop
   19b08:	3714      	adds	r7, #20
   19b0a:	46bd      	mov	sp, r7
   19b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b10:	4770      	bx	lr

00019b12 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   19b12:	b480      	push	{r7}
   19b14:	b085      	sub	sp, #20
   19b16:	af00      	add	r7, sp, #0
   19b18:	60f8      	str	r0, [r7, #12]
   19b1a:	60b9      	str	r1, [r7, #8]
   19b1c:	4613      	mov	r3, r2
   19b1e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   19b20:	68bb      	ldr	r3, [r7, #8]
   19b22:	781b      	ldrb	r3, [r3, #0]
   19b24:	b29a      	uxth	r2, r3
   19b26:	68bb      	ldr	r3, [r7, #8]
   19b28:	3301      	adds	r3, #1
   19b2a:	781b      	ldrb	r3, [r3, #0]
   19b2c:	b29b      	uxth	r3, r3
   19b2e:	021b      	lsls	r3, r3, #8
   19b30:	b29b      	uxth	r3, r3
   19b32:	4413      	add	r3, r2
   19b34:	b29a      	uxth	r2, r3
   19b36:	68fb      	ldr	r3, [r7, #12]
   19b38:	809a      	strh	r2, [r3, #4]
   19b3a:	68bb      	ldr	r3, [r7, #8]
   19b3c:	3302      	adds	r3, #2
   19b3e:	60bb      	str	r3, [r7, #8]
}
   19b40:	bf00      	nop
   19b42:	3714      	adds	r7, #20
   19b44:	46bd      	mov	sp, r7
   19b46:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b4a:	4770      	bx	lr

00019b4c <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   19b4c:	b580      	push	{r7, lr}
   19b4e:	b084      	sub	sp, #16
   19b50:	af00      	add	r7, sp, #0
   19b52:	6078      	str	r0, [r7, #4]
   19b54:	460b      	mov	r3, r1
   19b56:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   19b58:	687b      	ldr	r3, [r7, #4]
   19b5a:	1c5a      	adds	r2, r3, #1
   19b5c:	607a      	str	r2, [r7, #4]
   19b5e:	781b      	ldrb	r3, [r3, #0]
   19b60:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   19b62:	7bfb      	ldrb	r3, [r7, #15]
   19b64:	2b0f      	cmp	r3, #15
   19b66:	d84e      	bhi.n	19c06 <hciEvtProcessLeDirectAdvReport+0xba>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   19b68:	201c      	movs	r0, #28
   19b6a:	f7fa fcb3 	bl	144d4 <WsfBufAlloc>
   19b6e:	60b8      	str	r0, [r7, #8]
   19b70:	68bb      	ldr	r3, [r7, #8]
   19b72:	2b00      	cmp	r3, #0
   19b74:	d048      	beq.n	19c08 <hciEvtProcessLeDirectAdvReport+0xbc>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   19b76:	e03d      	b.n	19bf4 <hciEvtProcessLeDirectAdvReport+0xa8>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   19b78:	687b      	ldr	r3, [r7, #4]
   19b7a:	1c5a      	adds	r2, r3, #1
   19b7c:	607a      	str	r2, [r7, #4]
   19b7e:	781a      	ldrb	r2, [r3, #0]
   19b80:	68bb      	ldr	r3, [r7, #8]
   19b82:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   19b84:	687b      	ldr	r3, [r7, #4]
   19b86:	1c5a      	adds	r2, r3, #1
   19b88:	607a      	str	r2, [r7, #4]
   19b8a:	781a      	ldrb	r2, [r3, #0]
   19b8c:	68bb      	ldr	r3, [r7, #8]
   19b8e:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   19b90:	68bb      	ldr	r3, [r7, #8]
   19b92:	330c      	adds	r3, #12
   19b94:	6879      	ldr	r1, [r7, #4]
   19b96:	4618      	mov	r0, r3
   19b98:	f7fa f87e 	bl	13c98 <BdaCpy>
   19b9c:	687b      	ldr	r3, [r7, #4]
   19b9e:	3306      	adds	r3, #6
   19ba0:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   19ba2:	687b      	ldr	r3, [r7, #4]
   19ba4:	1c5a      	adds	r2, r3, #1
   19ba6:	607a      	str	r2, [r7, #4]
   19ba8:	781a      	ldrb	r2, [r3, #0]
   19baa:	68bb      	ldr	r3, [r7, #8]
   19bac:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   19bae:	68bb      	ldr	r3, [r7, #8]
   19bb0:	3313      	adds	r3, #19
   19bb2:	6879      	ldr	r1, [r7, #4]
   19bb4:	4618      	mov	r0, r3
   19bb6:	f7fa f86f 	bl	13c98 <BdaCpy>
   19bba:	687b      	ldr	r3, [r7, #4]
   19bbc:	3306      	adds	r3, #6
   19bbe:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   19bc0:	687b      	ldr	r3, [r7, #4]
   19bc2:	1c5a      	adds	r2, r3, #1
   19bc4:	607a      	str	r2, [r7, #4]
   19bc6:	781b      	ldrb	r3, [r3, #0]
   19bc8:	b25a      	sxtb	r2, r3
   19bca:	68bb      	ldr	r3, [r7, #8]
   19bcc:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   19bce:	68bb      	ldr	r3, [r7, #8]
   19bd0:	2200      	movs	r2, #0
   19bd2:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   19bd4:	68bb      	ldr	r3, [r7, #8]
   19bd6:	2200      	movs	r2, #0
   19bd8:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   19bda:	68bb      	ldr	r3, [r7, #8]
   19bdc:	2200      	movs	r2, #0
   19bde:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   19be0:	68bb      	ldr	r3, [r7, #8]
   19be2:	2206      	movs	r2, #6
   19be4:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   19be6:	68bb      	ldr	r3, [r7, #8]
   19be8:	2200      	movs	r2, #0
   19bea:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   19bec:	4b08      	ldr	r3, [pc, #32]	; (19c10 <hciEvtProcessLeDirectAdvReport+0xc4>)
   19bee:	689b      	ldr	r3, [r3, #8]
   19bf0:	68b8      	ldr	r0, [r7, #8]
   19bf2:	4798      	blx	r3
    while (i-- > 0)
   19bf4:	7bfb      	ldrb	r3, [r7, #15]
   19bf6:	1e5a      	subs	r2, r3, #1
   19bf8:	73fa      	strb	r2, [r7, #15]
   19bfa:	2b00      	cmp	r3, #0
   19bfc:	d1bc      	bne.n	19b78 <hciEvtProcessLeDirectAdvReport+0x2c>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   19bfe:	68b8      	ldr	r0, [r7, #8]
   19c00:	f7fa fca8 	bl	14554 <WsfBufFree>
   19c04:	e000      	b.n	19c08 <hciEvtProcessLeDirectAdvReport+0xbc>
    return;
   19c06:	bf00      	nop
  }
}
   19c08:	3710      	adds	r7, #16
   19c0a:	46bd      	mov	sp, r7
   19c0c:	bd80      	pop	{r7, pc}
   19c0e:	bf00      	nop
   19c10:	1000a694 	.word	0x1000a694

00019c14 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   19c14:	b480      	push	{r7}
   19c16:	b083      	sub	sp, #12
   19c18:	af00      	add	r7, sp, #0
   19c1a:	4603      	mov	r3, r0
   19c1c:	460a      	mov	r2, r1
   19c1e:	71fb      	strb	r3, [r7, #7]
   19c20:	4613      	mov	r3, r2
   19c22:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   19c24:	bf00      	nop
   19c26:	370c      	adds	r7, #12
   19c28:	46bd      	mov	sp, r7
   19c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   19c2e:	4770      	bx	lr

00019c30 <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   19c30:	b580      	push	{r7, lr}
   19c32:	b084      	sub	sp, #16
   19c34:	af00      	add	r7, sp, #0
   19c36:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   19c38:	687b      	ldr	r3, [r7, #4]
   19c3a:	1c5a      	adds	r2, r3, #1
   19c3c:	607a      	str	r2, [r7, #4]
   19c3e:	781b      	ldrb	r3, [r3, #0]
   19c40:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   19c42:	687b      	ldr	r3, [r7, #4]
   19c44:	1c5a      	adds	r2, r3, #1
   19c46:	607a      	str	r2, [r7, #4]
   19c48:	781b      	ldrb	r3, [r3, #0]
   19c4a:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
   19c4c:	687b      	ldr	r3, [r7, #4]
   19c4e:	781b      	ldrb	r3, [r3, #0]
   19c50:	b29a      	uxth	r2, r3
   19c52:	687b      	ldr	r3, [r7, #4]
   19c54:	3301      	adds	r3, #1
   19c56:	781b      	ldrb	r3, [r3, #0]
   19c58:	b29b      	uxth	r3, r3
   19c5a:	021b      	lsls	r3, r3, #8
   19c5c:	b29b      	uxth	r3, r3
   19c5e:	4413      	add	r3, r2
   19c60:	81bb      	strh	r3, [r7, #12]
   19c62:	687b      	ldr	r3, [r7, #4]
   19c64:	3302      	adds	r3, #2
   19c66:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   19c68:	7bfb      	ldrb	r3, [r7, #15]
   19c6a:	2b00      	cmp	r3, #0
   19c6c:	d005      	beq.n	19c7a <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
   19c6e:	89ba      	ldrh	r2, [r7, #12]
   19c70:	7bfb      	ldrb	r3, [r7, #15]
   19c72:	4611      	mov	r1, r2
   19c74:	4618      	mov	r0, r3
   19c76:	f7ff ffcd 	bl	19c14 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   19c7a:	7bbb      	ldrb	r3, [r7, #14]
   19c7c:	4618      	mov	r0, r3
   19c7e:	f7fc ff55 	bl	16b2c <hciCmdRecvCmpl>
}
   19c82:	bf00      	nop
   19c84:	3710      	adds	r7, #16
   19c86:	46bd      	mov	sp, r7
   19c88:	bd80      	pop	{r7, pc}
	...

00019c8c <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   19c8c:	b580      	push	{r7, lr}
   19c8e:	b086      	sub	sp, #24
   19c90:	af00      	add	r7, sp, #0
   19c92:	6078      	str	r0, [r7, #4]
   19c94:	460b      	mov	r3, r1
   19c96:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   19c98:	2300      	movs	r3, #0
   19c9a:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   19c9c:	4ba2      	ldr	r3, [pc, #648]	; (19f28 <hciEvtProcessCmdCmpl+0x29c>)
   19c9e:	689b      	ldr	r3, [r3, #8]
   19ca0:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   19ca2:	687b      	ldr	r3, [r7, #4]
   19ca4:	1c5a      	adds	r2, r3, #1
   19ca6:	607a      	str	r2, [r7, #4]
   19ca8:	781b      	ldrb	r3, [r3, #0]
   19caa:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
   19cac:	687b      	ldr	r3, [r7, #4]
   19cae:	781b      	ldrb	r3, [r3, #0]
   19cb0:	b29a      	uxth	r2, r3
   19cb2:	687b      	ldr	r3, [r7, #4]
   19cb4:	3301      	adds	r3, #1
   19cb6:	781b      	ldrb	r3, [r3, #0]
   19cb8:	b29b      	uxth	r3, r3
   19cba:	021b      	lsls	r3, r3, #8
   19cbc:	b29b      	uxth	r3, r3
   19cbe:	4413      	add	r3, r2
   19cc0:	81bb      	strh	r3, [r7, #12]
   19cc2:	687b      	ldr	r3, [r7, #4]
   19cc4:	3302      	adds	r3, #2
   19cc6:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   19cc8:	89bb      	ldrh	r3, [r7, #12]
   19cca:	f242 0222 	movw	r2, #8226	; 0x2022
   19cce:	4293      	cmp	r3, r2
   19cd0:	f000 80aa 	beq.w	19e28 <hciEvtProcessCmdCmpl+0x19c>
   19cd4:	f242 0222 	movw	r2, #8226	; 0x2022
   19cd8:	4293      	cmp	r3, r2
   19cda:	dc49      	bgt.n	19d70 <hciEvtProcessCmdCmpl+0xe4>
   19cdc:	f242 0215 	movw	r2, #8213	; 0x2015
   19ce0:	4293      	cmp	r3, r2
   19ce2:	f000 80b3 	beq.w	19e4c <hciEvtProcessCmdCmpl+0x1c0>
   19ce6:	f242 0215 	movw	r2, #8213	; 0x2015
   19cea:	4293      	cmp	r3, r2
   19cec:	dc22      	bgt.n	19d34 <hciEvtProcessCmdCmpl+0xa8>
   19cee:	f241 4205 	movw	r2, #5125	; 0x1405
   19cf2:	4293      	cmp	r3, r2
   19cf4:	f000 80ad 	beq.w	19e52 <hciEvtProcessCmdCmpl+0x1c6>
   19cf8:	f241 4205 	movw	r2, #5125	; 0x1405
   19cfc:	4293      	cmp	r3, r2
   19cfe:	dc0a      	bgt.n	19d16 <hciEvtProcessCmdCmpl+0x8a>
   19d00:	f640 422d 	movw	r2, #3117	; 0xc2d
   19d04:	4293      	cmp	r3, r2
   19d06:	f000 80a7 	beq.w	19e58 <hciEvtProcessCmdCmpl+0x1cc>
   19d0a:	f640 427c 	movw	r2, #3196	; 0xc7c
   19d0e:	4293      	cmp	r3, r2
   19d10:	f000 80b7 	beq.w	19e82 <hciEvtProcessCmdCmpl+0x1f6>
   19d14:	e0cd      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
   19d16:	f242 020c 	movw	r2, #8204	; 0x200c
   19d1a:	4293      	cmp	r3, r2
   19d1c:	f000 80ba 	beq.w	19e94 <hciEvtProcessCmdCmpl+0x208>
   19d20:	f242 020e 	movw	r2, #8206	; 0x200e
   19d24:	4293      	cmp	r3, r2
   19d26:	d06a      	beq.n	19dfe <hciEvtProcessCmdCmpl+0x172>
   19d28:	f242 020a 	movw	r2, #8202	; 0x200a
   19d2c:	4293      	cmp	r3, r2
   19d2e:	f000 80b4 	beq.w	19e9a <hciEvtProcessCmdCmpl+0x20e>
   19d32:	e0be      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
   19d34:	f242 021a 	movw	r2, #8218	; 0x201a
   19d38:	4293      	cmp	r3, r2
   19d3a:	d07b      	beq.n	19e34 <hciEvtProcessCmdCmpl+0x1a8>
   19d3c:	f242 021a 	movw	r2, #8218	; 0x201a
   19d40:	4293      	cmp	r3, r2
   19d42:	dc08      	bgt.n	19d56 <hciEvtProcessCmdCmpl+0xca>
   19d44:	f242 0217 	movw	r2, #8215	; 0x2017
   19d48:	4293      	cmp	r3, r2
   19d4a:	d05b      	beq.n	19e04 <hciEvtProcessCmdCmpl+0x178>
   19d4c:	f242 0218 	movw	r2, #8216	; 0x2018
   19d50:	4293      	cmp	r3, r2
   19d52:	d075      	beq.n	19e40 <hciEvtProcessCmdCmpl+0x1b4>
   19d54:	e0ad      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
   19d56:	f242 0220 	movw	r2, #8224	; 0x2020
   19d5a:	4293      	cmp	r3, r2
   19d5c:	d058      	beq.n	19e10 <hciEvtProcessCmdCmpl+0x184>
   19d5e:	f242 0220 	movw	r2, #8224	; 0x2020
   19d62:	4293      	cmp	r3, r2
   19d64:	dc57      	bgt.n	19e16 <hciEvtProcessCmdCmpl+0x18a>
   19d66:	f242 021b 	movw	r2, #8219	; 0x201b
   19d6a:	4293      	cmp	r3, r2
   19d6c:	d065      	beq.n	19e3a <hciEvtProcessCmdCmpl+0x1ae>
   19d6e:	e0a0      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
   19d70:	f242 022c 	movw	r2, #8236	; 0x202c
   19d74:	4293      	cmp	r3, r2
   19d76:	d07e      	beq.n	19e76 <hciEvtProcessCmdCmpl+0x1ea>
   19d78:	f242 022c 	movw	r2, #8236	; 0x202c
   19d7c:	4293      	cmp	r3, r2
   19d7e:	dc1d      	bgt.n	19dbc <hciEvtProcessCmdCmpl+0x130>
   19d80:	f242 0227 	movw	r2, #8231	; 0x2027
   19d84:	4293      	cmp	r3, r2
   19d86:	d06a      	beq.n	19e5e <hciEvtProcessCmdCmpl+0x1d2>
   19d88:	f242 0227 	movw	r2, #8231	; 0x2027
   19d8c:	4293      	cmp	r3, r2
   19d8e:	dc08      	bgt.n	19da2 <hciEvtProcessCmdCmpl+0x116>
   19d90:	f242 0223 	movw	r2, #8227	; 0x2023
   19d94:	4293      	cmp	r3, r2
   19d96:	d041      	beq.n	19e1c <hciEvtProcessCmdCmpl+0x190>
   19d98:	f242 0224 	movw	r2, #8228	; 0x2024
   19d9c:	4293      	cmp	r3, r2
   19d9e:	d040      	beq.n	19e22 <hciEvtProcessCmdCmpl+0x196>
   19da0:	e087      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
   19da2:	f242 0229 	movw	r2, #8233	; 0x2029
   19da6:	4293      	cmp	r3, r2
   19da8:	d05f      	beq.n	19e6a <hciEvtProcessCmdCmpl+0x1de>
   19daa:	f242 0229 	movw	r2, #8233	; 0x2029
   19dae:	4293      	cmp	r3, r2
   19db0:	db58      	blt.n	19e64 <hciEvtProcessCmdCmpl+0x1d8>
   19db2:	f242 022b 	movw	r2, #8235	; 0x202b
   19db6:	4293      	cmp	r3, r2
   19db8:	d05a      	beq.n	19e70 <hciEvtProcessCmdCmpl+0x1e4>
   19dba:	e07a      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
   19dbc:	f242 0231 	movw	r2, #8241	; 0x2031
   19dc0:	4293      	cmp	r3, r2
   19dc2:	d064      	beq.n	19e8e <hciEvtProcessCmdCmpl+0x202>
   19dc4:	f242 0231 	movw	r2, #8241	; 0x2031
   19dc8:	4293      	cmp	r3, r2
   19dca:	dc0c      	bgt.n	19de6 <hciEvtProcessCmdCmpl+0x15a>
   19dcc:	f242 022f 	movw	r2, #8239	; 0x202f
   19dd0:	4293      	cmp	r3, r2
   19dd2:	d02c      	beq.n	19e2e <hciEvtProcessCmdCmpl+0x1a2>
   19dd4:	f242 022f 	movw	r2, #8239	; 0x202f
   19dd8:	4293      	cmp	r3, r2
   19dda:	dc55      	bgt.n	19e88 <hciEvtProcessCmdCmpl+0x1fc>
   19ddc:	f242 022d 	movw	r2, #8237	; 0x202d
   19de0:	4293      	cmp	r3, r2
   19de2:	d04b      	beq.n	19e7c <hciEvtProcessCmdCmpl+0x1f0>
   19de4:	e065      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
   19de6:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   19dea:	d05f      	beq.n	19eac <hciEvtProcessCmdCmpl+0x220>
   19dec:	f242 0242 	movw	r2, #8258	; 0x2042
   19df0:	4293      	cmp	r3, r2
   19df2:	d055      	beq.n	19ea0 <hciEvtProcessCmdCmpl+0x214>
   19df4:	f242 0239 	movw	r2, #8249	; 0x2039
   19df8:	4293      	cmp	r3, r2
   19dfa:	d054      	beq.n	19ea6 <hciEvtProcessCmdCmpl+0x21a>
   19dfc:	e059      	b.n	19eb2 <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   19dfe:	2305      	movs	r3, #5
   19e00:	75fb      	strb	r3, [r7, #23]
    break;
   19e02:	e064      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   19e04:	231b      	movs	r3, #27
   19e06:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   19e08:	4b47      	ldr	r3, [pc, #284]	; (19f28 <hciEvtProcessCmdCmpl+0x29c>)
   19e0a:	68db      	ldr	r3, [r3, #12]
   19e0c:	613b      	str	r3, [r7, #16]
    break;
   19e0e:	e05e      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   19e10:	231d      	movs	r3, #29
   19e12:	75fb      	strb	r3, [r7, #23]
    break;
   19e14:	e05b      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   19e16:	231e      	movs	r3, #30
   19e18:	75fb      	strb	r3, [r7, #23]
    break;
   19e1a:	e058      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   19e1c:	231f      	movs	r3, #31
   19e1e:	75fb      	strb	r3, [r7, #23]
    break;
   19e20:	e055      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   19e22:	2320      	movs	r3, #32
   19e24:	75fb      	strb	r3, [r7, #23]
    break;
   19e26:	e052      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   19e28:	2321      	movs	r3, #33	; 0x21
   19e2a:	75fb      	strb	r3, [r7, #23]
    break;
   19e2c:	e04f      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   19e2e:	2322      	movs	r3, #34	; 0x22
   19e30:	75fb      	strb	r3, [r7, #23]
    break;
   19e32:	e04c      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   19e34:	230c      	movs	r3, #12
   19e36:	75fb      	strb	r3, [r7, #23]
    break;
   19e38:	e049      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   19e3a:	230d      	movs	r3, #13
   19e3c:	75fb      	strb	r3, [r7, #23]
    break;
   19e3e:	e046      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   19e40:	231c      	movs	r3, #28
   19e42:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   19e44:	4b38      	ldr	r3, [pc, #224]	; (19f28 <hciEvtProcessCmdCmpl+0x29c>)
   19e46:	68db      	ldr	r3, [r3, #12]
   19e48:	613b      	str	r3, [r7, #16]
    break;
   19e4a:	e040      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   19e4c:	2308      	movs	r3, #8
   19e4e:	75fb      	strb	r3, [r7, #23]
    break;
   19e50:	e03d      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   19e52:	2307      	movs	r3, #7
   19e54:	75fb      	strb	r3, [r7, #23]
    break;
   19e56:	e03a      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   19e58:	2309      	movs	r3, #9
   19e5a:	75fb      	strb	r3, [r7, #23]
    break;
   19e5c:	e037      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   19e5e:	2315      	movs	r3, #21
   19e60:	75fb      	strb	r3, [r7, #23]
    break;
   19e62:	e034      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   19e64:	2316      	movs	r3, #22
   19e66:	75fb      	strb	r3, [r7, #23]
    break;
   19e68:	e031      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   19e6a:	2317      	movs	r3, #23
   19e6c:	75fb      	strb	r3, [r7, #23]
    break;
   19e6e:	e02e      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   19e70:	2318      	movs	r3, #24
   19e72:	75fb      	strb	r3, [r7, #23]
    break;
   19e74:	e02b      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   19e76:	2319      	movs	r3, #25
   19e78:	75fb      	strb	r3, [r7, #23]
    break;
   19e7a:	e028      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   19e7c:	231a      	movs	r3, #26
   19e7e:	75fb      	strb	r3, [r7, #23]
    break;
   19e80:	e025      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   19e82:	2327      	movs	r3, #39	; 0x27
   19e84:	75fb      	strb	r3, [r7, #23]
    break;
   19e86:	e022      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   19e88:	2329      	movs	r3, #41	; 0x29
   19e8a:	75fb      	strb	r3, [r7, #23]
    break;
   19e8c:	e01f      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   19e8e:	232a      	movs	r3, #42	; 0x2a
   19e90:	75fb      	strb	r3, [r7, #23]
    break;
   19e92:	e01c      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
   19e94:	2334      	movs	r3, #52	; 0x34
   19e96:	75fb      	strb	r3, [r7, #23]
    break;
   19e98:	e019      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
   19e9a:	2335      	movs	r3, #53	; 0x35
   19e9c:	75fb      	strb	r3, [r7, #23]
    break;
   19e9e:	e016      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
   19ea0:	2336      	movs	r3, #54	; 0x36
   19ea2:	75fb      	strb	r3, [r7, #23]
    break;
   19ea4:	e013      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
   19ea6:	2337      	movs	r3, #55	; 0x37
   19ea8:	75fb      	strb	r3, [r7, #23]
    break;
   19eaa:	e010      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
   19eac:	2338      	movs	r3, #56	; 0x38
   19eae:	75fb      	strb	r3, [r7, #23]
    break;
   19eb0:	e00d      	b.n	19ece <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   19eb2:	89bb      	ldrh	r3, [r7, #12]
   19eb4:	0a9b      	lsrs	r3, r3, #10
   19eb6:	b29b      	uxth	r3, r3
   19eb8:	2b3f      	cmp	r3, #63	; 0x3f
   19eba:	d107      	bne.n	19ecc <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   19ebc:	78fa      	ldrb	r2, [r7, #3]
   19ebe:	89bb      	ldrh	r3, [r7, #12]
   19ec0:	6879      	ldr	r1, [r7, #4]
   19ec2:	4618      	mov	r0, r3
   19ec4:	f000 fcc4 	bl	1a850 <hciCoreVsCmdCmplRcvd>
   19ec8:	4603      	mov	r3, r0
   19eca:	75fb      	strb	r3, [r7, #23]
    }
    break;
   19ecc:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   19ece:	7dfb      	ldrb	r3, [r7, #23]
   19ed0:	2b00      	cmp	r3, #0
   19ed2:	d021      	beq.n	19f18 <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   19ed4:	7dfb      	ldrb	r3, [r7, #23]
   19ed6:	4a15      	ldr	r2, [pc, #84]	; (19f2c <hciEvtProcessCmdCmpl+0x2a0>)
   19ed8:	5cd3      	ldrb	r3, [r2, r3]
   19eda:	b29b      	uxth	r3, r3
   19edc:	4618      	mov	r0, r3
   19ede:	f7fa faf9 	bl	144d4 <WsfBufAlloc>
   19ee2:	60b8      	str	r0, [r7, #8]
   19ee4:	68bb      	ldr	r3, [r7, #8]
   19ee6:	2b00      	cmp	r3, #0
   19ee8:	d016      	beq.n	19f18 <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   19eea:	68bb      	ldr	r3, [r7, #8]
   19eec:	2200      	movs	r2, #0
   19eee:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   19ef0:	68bb      	ldr	r3, [r7, #8]
   19ef2:	7dfa      	ldrb	r2, [r7, #23]
   19ef4:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   19ef6:	68bb      	ldr	r3, [r7, #8]
   19ef8:	2200      	movs	r2, #0
   19efa:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   19efc:	7dfb      	ldrb	r3, [r7, #23]
   19efe:	4a0c      	ldr	r2, [pc, #48]	; (19f30 <hciEvtProcessCmdCmpl+0x2a4>)
   19f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19f04:	78fa      	ldrb	r2, [r7, #3]
   19f06:	6879      	ldr	r1, [r7, #4]
   19f08:	68b8      	ldr	r0, [r7, #8]
   19f0a:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   19f0c:	693b      	ldr	r3, [r7, #16]
   19f0e:	68b8      	ldr	r0, [r7, #8]
   19f10:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   19f12:	68b8      	ldr	r0, [r7, #8]
   19f14:	f7fa fb1e 	bl	14554 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   19f18:	7bfb      	ldrb	r3, [r7, #15]
   19f1a:	4618      	mov	r0, r3
   19f1c:	f7fc fe06 	bl	16b2c <hciCmdRecvCmpl>
}
   19f20:	bf00      	nop
   19f22:	3718      	adds	r7, #24
   19f24:	46bd      	mov	sp, r7
   19f26:	bd80      	pop	{r7, pc}
   19f28:	1000a694 	.word	0x1000a694
   19f2c:	00026178 	.word	0x00026178
   19f30:	00026094 	.word	0x00026094

00019f34 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   19f34:	b580      	push	{r7, lr}
   19f36:	b088      	sub	sp, #32
   19f38:	af00      	add	r7, sp, #0
   19f3a:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   19f3c:	2300      	movs	r3, #0
   19f3e:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   19f40:	4ba1      	ldr	r3, [pc, #644]	; (1a1c8 <hciEvtProcessMsg+0x294>)
   19f42:	689b      	ldr	r3, [r3, #8]
   19f44:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   19f46:	687b      	ldr	r3, [r7, #4]
   19f48:	1c5a      	adds	r2, r3, #1
   19f4a:	607a      	str	r2, [r7, #4]
   19f4c:	781b      	ldrb	r3, [r3, #0]
   19f4e:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   19f50:	687b      	ldr	r3, [r7, #4]
   19f52:	1c5a      	adds	r2, r3, #1
   19f54:	607a      	str	r2, [r7, #4]
   19f56:	781b      	ldrb	r3, [r3, #0]
   19f58:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   19f5a:	7dfb      	ldrb	r3, [r7, #23]
   19f5c:	2b10      	cmp	r3, #16
   19f5e:	f000 8121 	beq.w	1a1a4 <hciEvtProcessMsg+0x270>
   19f62:	2b10      	cmp	r3, #16
   19f64:	dc10      	bgt.n	19f88 <hciEvtProcessMsg+0x54>
   19f66:	2b0c      	cmp	r3, #12
   19f68:	f000 8103 	beq.w	1a172 <hciEvtProcessMsg+0x23e>
   19f6c:	2b0c      	cmp	r3, #12
   19f6e:	dc06      	bgt.n	19f7e <hciEvtProcessMsg+0x4a>
   19f70:	2b05      	cmp	r3, #5
   19f72:	f000 80ec 	beq.w	1a14e <hciEvtProcessMsg+0x21a>
   19f76:	2b08      	cmp	r3, #8
   19f78:	f000 80f2 	beq.w	1a160 <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   19f7c:	e131      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   19f7e:	2b0e      	cmp	r3, #14
   19f80:	d020      	beq.n	19fc4 <hciEvtProcessMsg+0x90>
   19f82:	2b0f      	cmp	r3, #15
   19f84:	d014      	beq.n	19fb0 <hciEvtProcessMsg+0x7c>
      break;
   19f86:	e12c      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   19f88:	2b30      	cmp	r3, #48	; 0x30
   19f8a:	f000 80fb 	beq.w	1a184 <hciEvtProcessMsg+0x250>
   19f8e:	2b30      	cmp	r3, #48	; 0x30
   19f90:	dc05      	bgt.n	19f9e <hciEvtProcessMsg+0x6a>
   19f92:	2b13      	cmp	r3, #19
   19f94:	d022      	beq.n	19fdc <hciEvtProcessMsg+0xa8>
   19f96:	2b1a      	cmp	r3, #26
   19f98:	f000 80fd 	beq.w	1a196 <hciEvtProcessMsg+0x262>
      break;
   19f9c:	e121      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   19f9e:	2b57      	cmp	r3, #87	; 0x57
   19fa0:	f000 8109 	beq.w	1a1b6 <hciEvtProcessMsg+0x282>
   19fa4:	2bff      	cmp	r3, #255	; 0xff
   19fa6:	f000 8113 	beq.w	1a1d0 <hciEvtProcessMsg+0x29c>
   19faa:	2b3e      	cmp	r3, #62	; 0x3e
   19fac:	d020      	beq.n	19ff0 <hciEvtProcessMsg+0xbc>
      break;
   19fae:	e118      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
   19fb0:	4b86      	ldr	r3, [pc, #536]	; (1a1cc <hciEvtProcessMsg+0x298>)
   19fb2:	891b      	ldrh	r3, [r3, #8]
   19fb4:	3301      	adds	r3, #1
   19fb6:	b29a      	uxth	r2, r3
   19fb8:	4b84      	ldr	r3, [pc, #528]	; (1a1cc <hciEvtProcessMsg+0x298>)
   19fba:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   19fbc:	6878      	ldr	r0, [r7, #4]
   19fbe:	f7ff fe37 	bl	19c30 <hciEvtProcessCmdStatus>
      break;
   19fc2:	e10e      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
   19fc4:	4b81      	ldr	r3, [pc, #516]	; (1a1cc <hciEvtProcessMsg+0x298>)
   19fc6:	88db      	ldrh	r3, [r3, #6]
   19fc8:	3301      	adds	r3, #1
   19fca:	b29a      	uxth	r2, r3
   19fcc:	4b7f      	ldr	r3, [pc, #508]	; (1a1cc <hciEvtProcessMsg+0x298>)
   19fce:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   19fd0:	7dbb      	ldrb	r3, [r7, #22]
   19fd2:	4619      	mov	r1, r3
   19fd4:	6878      	ldr	r0, [r7, #4]
   19fd6:	f7ff fe59 	bl	19c8c <hciEvtProcessCmdCmpl>
      break;
   19fda:	e102      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
   19fdc:	6878      	ldr	r0, [r7, #4]
   19fde:	f7fe fa45 	bl	1846c <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   19fe2:	4b7a      	ldr	r3, [pc, #488]	; (1a1cc <hciEvtProcessMsg+0x298>)
   19fe4:	899b      	ldrh	r3, [r3, #12]
   19fe6:	3301      	adds	r3, #1
   19fe8:	b29a      	uxth	r2, r3
   19fea:	4b78      	ldr	r3, [pc, #480]	; (1a1cc <hciEvtProcessMsg+0x298>)
   19fec:	819a      	strh	r2, [r3, #12]
      break;
   19fee:	e0f8      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   19ff0:	687b      	ldr	r3, [r7, #4]
   19ff2:	1c5a      	adds	r2, r3, #1
   19ff4:	607a      	str	r2, [r7, #4]
   19ff6:	781b      	ldrb	r3, [r3, #0]
   19ff8:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
   19ffa:	4b74      	ldr	r3, [pc, #464]	; (1a1cc <hciEvtProcessMsg+0x298>)
   19ffc:	8a5b      	ldrh	r3, [r3, #18]
   19ffe:	3301      	adds	r3, #1
   1a000:	b29a      	uxth	r2, r3
   1a002:	4b72      	ldr	r3, [pc, #456]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a004:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   1a006:	7d7b      	ldrb	r3, [r7, #21]
   1a008:	3b01      	subs	r3, #1
   1a00a:	2b12      	cmp	r3, #18
   1a00c:	f200 809d 	bhi.w	1a14a <hciEvtProcessMsg+0x216>
   1a010:	a201      	add	r2, pc, #4	; (adr r2, 1a018 <hciEvtProcessMsg+0xe4>)
   1a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a016:	bf00      	nop
   1a018:	0001a065 	.word	0x0001a065
   1a01c:	0001a093 	.word	0x0001a093
   1a020:	0001a09f 	.word	0x0001a09f
   1a024:	0001a0a5 	.word	0x0001a0a5
   1a028:	0001a0ab 	.word	0x0001a0ab
   1a02c:	0001a0eb 	.word	0x0001a0eb
   1a030:	0001a0f1 	.word	0x0001a0f1
   1a034:	0001a0f7 	.word	0x0001a0f7
   1a038:	0001a103 	.word	0x0001a103
   1a03c:	0001a0b1 	.word	0x0001a0b1
   1a040:	0001a0df 	.word	0x0001a0df
   1a044:	0001a10f 	.word	0x0001a10f
   1a048:	0001a115 	.word	0x0001a115
   1a04c:	0001a133 	.word	0x0001a133
   1a050:	0001a139 	.word	0x0001a139
   1a054:	0001a145 	.word	0x0001a145
   1a058:	0001a121 	.word	0x0001a121
   1a05c:	0001a127 	.word	0x0001a127
   1a060:	0001a12d 	.word	0x0001a12d
          if (*pEvt == HCI_SUCCESS)
   1a064:	687b      	ldr	r3, [r7, #4]
   1a066:	781b      	ldrb	r3, [r3, #0]
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d10f      	bne.n	1a08c <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   1a06c:	687b      	ldr	r3, [r7, #4]
   1a06e:	3301      	adds	r3, #1
   1a070:	781b      	ldrb	r3, [r3, #0]
   1a072:	b29a      	uxth	r2, r3
   1a074:	687b      	ldr	r3, [r7, #4]
   1a076:	3302      	adds	r3, #2
   1a078:	781b      	ldrb	r3, [r3, #0]
   1a07a:	b29b      	uxth	r3, r3
   1a07c:	021b      	lsls	r3, r3, #8
   1a07e:	b29b      	uxth	r3, r3
   1a080:	4413      	add	r3, r2
   1a082:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   1a084:	8a7b      	ldrh	r3, [r7, #18]
   1a086:	4618      	mov	r0, r3
   1a088:	f7fd fe8e 	bl	17da8 <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   1a08c:	2301      	movs	r3, #1
   1a08e:	77fb      	strb	r3, [r7, #31]
          break;
   1a090:	e05c      	b.n	1a14c <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
   1a092:	7dbb      	ldrb	r3, [r7, #22]
   1a094:	4619      	mov	r1, r3
   1a096:	6878      	ldr	r0, [r7, #4]
   1a098:	f7ff fab4 	bl	19604 <hciEvtProcessLeAdvReport>
          break;
   1a09c:	e056      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   1a09e:	2304      	movs	r3, #4
   1a0a0:	77fb      	strb	r3, [r7, #31]
          break;
   1a0a2:	e053      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   1a0a4:	230b      	movs	r3, #11
   1a0a6:	77fb      	strb	r3, [r7, #31]
          break;
   1a0a8:	e050      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   1a0aa:	2310      	movs	r3, #16
   1a0ac:	77fb      	strb	r3, [r7, #31]
          break;
   1a0ae:	e04d      	b.n	1a14c <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
   1a0b0:	687b      	ldr	r3, [r7, #4]
   1a0b2:	781b      	ldrb	r3, [r3, #0]
   1a0b4:	2b00      	cmp	r3, #0
   1a0b6:	d10f      	bne.n	1a0d8 <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   1a0b8:	687b      	ldr	r3, [r7, #4]
   1a0ba:	3301      	adds	r3, #1
   1a0bc:	781b      	ldrb	r3, [r3, #0]
   1a0be:	b29a      	uxth	r2, r3
   1a0c0:	687b      	ldr	r3, [r7, #4]
   1a0c2:	3302      	adds	r3, #2
   1a0c4:	781b      	ldrb	r3, [r3, #0]
   1a0c6:	b29b      	uxth	r3, r3
   1a0c8:	021b      	lsls	r3, r3, #8
   1a0ca:	b29b      	uxth	r3, r3
   1a0cc:	4413      	add	r3, r2
   1a0ce:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   1a0d0:	8a7b      	ldrh	r3, [r7, #18]
   1a0d2:	4618      	mov	r0, r3
   1a0d4:	f7fd fe68 	bl	17da8 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   1a0d8:	2302      	movs	r3, #2
   1a0da:	77fb      	strb	r3, [r7, #31]
          break;
   1a0dc:	e036      	b.n	1a14c <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   1a0de:	7dbb      	ldrb	r3, [r7, #22]
   1a0e0:	4619      	mov	r1, r3
   1a0e2:	6878      	ldr	r0, [r7, #4]
   1a0e4:	f7ff fd32 	bl	19b4c <hciEvtProcessLeDirectAdvReport>
          break;
   1a0e8:	e030      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   1a0ea:	2323      	movs	r3, #35	; 0x23
   1a0ec:	77fb      	strb	r3, [r7, #31]
          break;
   1a0ee:	e02d      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   1a0f0:	2324      	movs	r3, #36	; 0x24
   1a0f2:	77fb      	strb	r3, [r7, #31]
          break;
   1a0f4:	e02a      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   1a0f6:	4b34      	ldr	r3, [pc, #208]	; (1a1c8 <hciEvtProcessMsg+0x294>)
   1a0f8:	68db      	ldr	r3, [r3, #12]
   1a0fa:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   1a0fc:	2325      	movs	r3, #37	; 0x25
   1a0fe:	77fb      	strb	r3, [r7, #31]
          break;
   1a100:	e024      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   1a102:	4b31      	ldr	r3, [pc, #196]	; (1a1c8 <hciEvtProcessMsg+0x294>)
   1a104:	68db      	ldr	r3, [r3, #12]
   1a106:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   1a108:	2326      	movs	r3, #38	; 0x26
   1a10a:	77fb      	strb	r3, [r7, #31]
          break;
   1a10c:	e01e      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   1a10e:	232b      	movs	r3, #43	; 0x2b
   1a110:	77fb      	strb	r3, [r7, #31]
          break;
   1a112:	e01b      	b.n	1a14c <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   1a114:	7dbb      	ldrb	r3, [r7, #22]
   1a116:	4619      	mov	r1, r3
   1a118:	6878      	ldr	r0, [r7, #4]
   1a11a:	f7ff faeb 	bl	196f4 <hciEvtProcessLeExtAdvReport>
          break;
   1a11e:	e015      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   1a120:	232d      	movs	r3, #45	; 0x2d
   1a122:	77fb      	strb	r3, [r7, #31]
          break;
   1a124:	e012      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   1a126:	232e      	movs	r3, #46	; 0x2e
   1a128:	77fb      	strb	r3, [r7, #31]
          break;
   1a12a:	e00f      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   1a12c:	232f      	movs	r3, #47	; 0x2f
   1a12e:	77fb      	strb	r3, [r7, #31]
          break;
   1a130:	e00c      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   1a132:	2330      	movs	r3, #48	; 0x30
   1a134:	77fb      	strb	r3, [r7, #31]
          break;
   1a136:	e009      	b.n	1a14c <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
   1a138:	7dbb      	ldrb	r3, [r7, #22]
   1a13a:	4619      	mov	r1, r3
   1a13c:	6878      	ldr	r0, [r7, #4]
   1a13e:	f7ff fc6b 	bl	19a18 <hciEvtProcessLePerAdvReport>
          break;
   1a142:	e003      	b.n	1a14c <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   1a144:	2332      	movs	r3, #50	; 0x32
   1a146:	77fb      	strb	r3, [r7, #31]
          break;
   1a148:	e000      	b.n	1a14c <hciEvtProcessMsg+0x218>
          break;
   1a14a:	bf00      	nop
      break;
   1a14c:	e049      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
   1a14e:	4b1f      	ldr	r3, [pc, #124]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a150:	881b      	ldrh	r3, [r3, #0]
   1a152:	3301      	adds	r3, #1
   1a154:	b29a      	uxth	r2, r3
   1a156:	4b1d      	ldr	r3, [pc, #116]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a158:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   1a15a:	2303      	movs	r3, #3
   1a15c:	77fb      	strb	r3, [r7, #31]
      break;
   1a15e:	e040      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
   1a160:	4b1a      	ldr	r3, [pc, #104]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a162:	885b      	ldrh	r3, [r3, #2]
   1a164:	3301      	adds	r3, #1
   1a166:	b29a      	uxth	r2, r3
   1a168:	4b18      	ldr	r3, [pc, #96]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a16a:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   1a16c:	230f      	movs	r3, #15
   1a16e:	77fb      	strb	r3, [r7, #31]
      break;
   1a170:	e037      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   1a172:	4b16      	ldr	r3, [pc, #88]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a174:	889b      	ldrh	r3, [r3, #4]
   1a176:	3301      	adds	r3, #1
   1a178:	b29a      	uxth	r2, r3
   1a17a:	4b14      	ldr	r3, [pc, #80]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a17c:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   1a17e:	230a      	movs	r3, #10
   1a180:	77fb      	strb	r3, [r7, #31]
      break;
   1a182:	e02e      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   1a184:	4b11      	ldr	r3, [pc, #68]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a186:	8a1b      	ldrh	r3, [r3, #16]
   1a188:	3301      	adds	r3, #1
   1a18a:	b29a      	uxth	r2, r3
   1a18c:	4b0f      	ldr	r3, [pc, #60]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a18e:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   1a190:	230e      	movs	r3, #14
   1a192:	77fb      	strb	r3, [r7, #31]
      break;
   1a194:	e025      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
   1a196:	4b0d      	ldr	r3, [pc, #52]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a198:	89db      	ldrh	r3, [r3, #14]
   1a19a:	3301      	adds	r3, #1
   1a19c:	b29a      	uxth	r2, r3
   1a19e:	4b0b      	ldr	r3, [pc, #44]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a1a0:	81da      	strh	r2, [r3, #14]
      break;
   1a1a2:	e01e      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
   1a1a4:	4b09      	ldr	r3, [pc, #36]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a1a6:	895b      	ldrh	r3, [r3, #10]
   1a1a8:	3301      	adds	r3, #1
   1a1aa:	b29a      	uxth	r2, r3
   1a1ac:	4b07      	ldr	r3, [pc, #28]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a1ae:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   1a1b0:	2314      	movs	r3, #20
   1a1b2:	77fb      	strb	r3, [r7, #31]
      break;
   1a1b4:	e015      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
   1a1b6:	4b05      	ldr	r3, [pc, #20]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a1b8:	8adb      	ldrh	r3, [r3, #22]
   1a1ba:	3301      	adds	r3, #1
   1a1bc:	b29a      	uxth	r2, r3
   1a1be:	4b03      	ldr	r3, [pc, #12]	; (1a1cc <hciEvtProcessMsg+0x298>)
   1a1c0:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   1a1c2:	2328      	movs	r3, #40	; 0x28
   1a1c4:	77fb      	strb	r3, [r7, #31]
      break;
   1a1c6:	e00c      	b.n	1a1e2 <hciEvtProcessMsg+0x2ae>
   1a1c8:	1000a694 	.word	0x1000a694
   1a1cc:	1000526c 	.word	0x1000526c
      hciEvtStats.numVendorSpecEvt++;
   1a1d0:	4b22      	ldr	r3, [pc, #136]	; (1a25c <hciEvtProcessMsg+0x328>)
   1a1d2:	8a9b      	ldrh	r3, [r3, #20]
   1a1d4:	3301      	adds	r3, #1
   1a1d6:	b29a      	uxth	r2, r3
   1a1d8:	4b20      	ldr	r3, [pc, #128]	; (1a25c <hciEvtProcessMsg+0x328>)
   1a1da:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   1a1dc:	2313      	movs	r3, #19
   1a1de:	77fb      	strb	r3, [r7, #31]
      break;
   1a1e0:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   1a1e2:	7ffb      	ldrb	r3, [r7, #31]
   1a1e4:	2b00      	cmp	r3, #0
   1a1e6:	d034      	beq.n	1a252 <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   1a1e8:	7ffb      	ldrb	r3, [r7, #31]
   1a1ea:	4a1d      	ldr	r2, [pc, #116]	; (1a260 <hciEvtProcessMsg+0x32c>)
   1a1ec:	5cd3      	ldrb	r3, [r2, r3]
   1a1ee:	b29b      	uxth	r3, r3
   1a1f0:	4618      	mov	r0, r3
   1a1f2:	f7fa f96f 	bl	144d4 <WsfBufAlloc>
   1a1f6:	60f8      	str	r0, [r7, #12]
   1a1f8:	68fb      	ldr	r3, [r7, #12]
   1a1fa:	2b00      	cmp	r3, #0
   1a1fc:	d016      	beq.n	1a22c <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   1a1fe:	68fb      	ldr	r3, [r7, #12]
   1a200:	2200      	movs	r2, #0
   1a202:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   1a204:	68fb      	ldr	r3, [r7, #12]
   1a206:	7ffa      	ldrb	r2, [r7, #31]
   1a208:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1a20a:	68fb      	ldr	r3, [r7, #12]
   1a20c:	2200      	movs	r2, #0
   1a20e:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   1a210:	7ffb      	ldrb	r3, [r7, #31]
   1a212:	4a14      	ldr	r2, [pc, #80]	; (1a264 <hciEvtProcessMsg+0x330>)
   1a214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a218:	7dba      	ldrb	r2, [r7, #22]
   1a21a:	6879      	ldr	r1, [r7, #4]
   1a21c:	68f8      	ldr	r0, [r7, #12]
   1a21e:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   1a220:	69bb      	ldr	r3, [r7, #24]
   1a222:	68f8      	ldr	r0, [r7, #12]
   1a224:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   1a226:	68f8      	ldr	r0, [r7, #12]
   1a228:	f7fa f994 	bl	14554 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   1a22c:	7ffb      	ldrb	r3, [r7, #31]
   1a22e:	2b03      	cmp	r3, #3
   1a230:	d10f      	bne.n	1a252 <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   1a232:	687b      	ldr	r3, [r7, #4]
   1a234:	3301      	adds	r3, #1
   1a236:	781b      	ldrb	r3, [r3, #0]
   1a238:	b29a      	uxth	r2, r3
   1a23a:	687b      	ldr	r3, [r7, #4]
   1a23c:	3302      	adds	r3, #2
   1a23e:	781b      	ldrb	r3, [r3, #0]
   1a240:	b29b      	uxth	r3, r3
   1a242:	021b      	lsls	r3, r3, #8
   1a244:	b29b      	uxth	r3, r3
   1a246:	4413      	add	r3, r2
   1a248:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
   1a24a:	8a7b      	ldrh	r3, [r7, #18]
   1a24c:	4618      	mov	r0, r3
   1a24e:	f7fd fdb8 	bl	17dc2 <hciCoreConnClose>
    }
  }
}
   1a252:	bf00      	nop
   1a254:	3720      	adds	r7, #32
   1a256:	46bd      	mov	sp, r7
   1a258:	bd80      	pop	{r7, pc}
   1a25a:	bf00      	nop
   1a25c:	1000526c 	.word	0x1000526c
   1a260:	00026178 	.word	0x00026178
   1a264:	00026094 	.word	0x00026094

0001a268 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   1a268:	b580      	push	{r7, lr}
   1a26a:	b084      	sub	sp, #16
   1a26c:	af00      	add	r7, sp, #0
   1a26e:	6078      	str	r0, [r7, #4]
   1a270:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   1a272:	683b      	ldr	r3, [r7, #0]
   1a274:	3302      	adds	r3, #2
   1a276:	781b      	ldrb	r3, [r3, #0]
   1a278:	b29a      	uxth	r2, r3
   1a27a:	683b      	ldr	r3, [r7, #0]
   1a27c:	3303      	adds	r3, #3
   1a27e:	781b      	ldrb	r3, [r3, #0]
   1a280:	b29b      	uxth	r3, r3
   1a282:	021b      	lsls	r3, r3, #8
   1a284:	b29b      	uxth	r3, r3
   1a286:	4413      	add	r3, r2
   1a288:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
   1a28a:	89fb      	ldrh	r3, [r7, #14]
   1a28c:	3304      	adds	r3, #4
   1a28e:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   1a290:	89fb      	ldrh	r3, [r7, #14]
   1a292:	683a      	ldr	r2, [r7, #0]
   1a294:	4619      	mov	r1, r3
   1a296:	2002      	movs	r0, #2
   1a298:	f7fc f992 	bl	165c0 <hciDrvWrite>
   1a29c:	4603      	mov	r3, r0
   1a29e:	461a      	mov	r2, r3
   1a2a0:	89fb      	ldrh	r3, [r7, #14]
   1a2a2:	4293      	cmp	r3, r2
   1a2a4:	d103      	bne.n	1a2ae <hciTrSendAclData+0x46>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   1a2a6:	6839      	ldr	r1, [r7, #0]
   1a2a8:	6878      	ldr	r0, [r7, #4]
   1a2aa:	f7fd fec5 	bl	18038 <hciCoreTxAclComplete>
  }
}
   1a2ae:	bf00      	nop
   1a2b0:	3710      	adds	r7, #16
   1a2b2:	46bd      	mov	sp, r7
   1a2b4:	bd80      	pop	{r7, pc}

0001a2b6 <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   1a2b6:	b580      	push	{r7, lr}
   1a2b8:	b084      	sub	sp, #16
   1a2ba:	af00      	add	r7, sp, #0
   1a2bc:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   1a2be:	687b      	ldr	r3, [r7, #4]
   1a2c0:	3302      	adds	r3, #2
   1a2c2:	781b      	ldrb	r3, [r3, #0]
   1a2c4:	3303      	adds	r3, #3
   1a2c6:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   1a2c8:	7bfb      	ldrb	r3, [r7, #15]
   1a2ca:	b29b      	uxth	r3, r3
   1a2cc:	687a      	ldr	r2, [r7, #4]
   1a2ce:	4619      	mov	r1, r3
   1a2d0:	2001      	movs	r0, #1
   1a2d2:	f7fc f975 	bl	165c0 <hciDrvWrite>
   1a2d6:	4603      	mov	r3, r0
   1a2d8:	461a      	mov	r2, r3
   1a2da:	7bfb      	ldrb	r3, [r7, #15]
   1a2dc:	b29b      	uxth	r3, r3
   1a2de:	429a      	cmp	r2, r3
   1a2e0:	d102      	bne.n	1a2e8 <hciTrSendCmd+0x32>
  {
    /* free buffer */
    WsfMsgFree(pData);
   1a2e2:	6878      	ldr	r0, [r7, #4]
   1a2e4:	f7fa f99c 	bl	14620 <WsfMsgFree>
  }
}
   1a2e8:	bf00      	nop
   1a2ea:	3710      	adds	r7, #16
   1a2ec:	46bd      	mov	sp, r7
   1a2ee:	bd80      	pop	{r7, pc}

0001a2f0 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   1a2f0:	b580      	push	{r7, lr}
   1a2f2:	b084      	sub	sp, #16
   1a2f4:	af00      	add	r7, sp, #0
   1a2f6:	6078      	str	r0, [r7, #4]
   1a2f8:	460b      	mov	r3, r1
   1a2fa:	807b      	strh	r3, [r7, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   1a2fc:	2300      	movs	r3, #0
   1a2fe:	81fb      	strh	r3, [r7, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   1a300:	e0e9      	b.n	1a4d6 <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   1a302:	687b      	ldr	r3, [r7, #4]
   1a304:	781b      	ldrb	r3, [r3, #0]
   1a306:	723b      	strb	r3, [r7, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   1a308:	4b77      	ldr	r3, [pc, #476]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a30a:	781b      	ldrb	r3, [r3, #0]
   1a30c:	2b00      	cmp	r3, #0
   1a30e:	d115      	bne.n	1a33c <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   1a310:	4a76      	ldr	r2, [pc, #472]	; (1a4ec <hciTrSerialRxIncoming+0x1fc>)
   1a312:	7a3b      	ldrb	r3, [r7, #8]
   1a314:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   1a316:	4b76      	ldr	r3, [pc, #472]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a318:	2200      	movs	r2, #0
   1a31a:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   1a31c:	4b72      	ldr	r3, [pc, #456]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a31e:	2201      	movs	r2, #1
   1a320:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   1a322:	4b74      	ldr	r3, [pc, #464]	; (1a4f4 <hciTrSerialRxIncoming+0x204>)
   1a324:	2201      	movs	r2, #1
   1a326:	701a      	strb	r2, [r3, #0]
      pBuf++;
   1a328:	687b      	ldr	r3, [r7, #4]
   1a32a:	3301      	adds	r3, #1
   1a32c:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   1a32e:	89fb      	ldrh	r3, [r7, #14]
   1a330:	3301      	adds	r3, #1
   1a332:	81fb      	strh	r3, [r7, #14]
      len--;
   1a334:	887b      	ldrh	r3, [r7, #2]
   1a336:	3b01      	subs	r3, #1
   1a338:	807b      	strh	r3, [r7, #2]
   1a33a:	e0b6      	b.n	1a4aa <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   1a33c:	4b6a      	ldr	r3, [pc, #424]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a33e:	781b      	ldrb	r3, [r3, #0]
   1a340:	2b01      	cmp	r3, #1
   1a342:	f040 8091 	bne.w	1a468 <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
   1a346:	2300      	movs	r3, #0
   1a348:	737b      	strb	r3, [r7, #13]
      uint16_t dataLen = 0;
   1a34a:	2300      	movs	r3, #0
   1a34c:	817b      	strh	r3, [r7, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   1a34e:	4b67      	ldr	r3, [pc, #412]	; (1a4ec <hciTrSerialRxIncoming+0x1fc>)
   1a350:	781b      	ldrb	r3, [r3, #0]
   1a352:	2b04      	cmp	r3, #4
   1a354:	d102      	bne.n	1a35c <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   1a356:	2302      	movs	r3, #2
   1a358:	737b      	strb	r3, [r7, #13]
   1a35a:	e008      	b.n	1a36e <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   1a35c:	4b63      	ldr	r3, [pc, #396]	; (1a4ec <hciTrSerialRxIncoming+0x1fc>)
   1a35e:	781b      	ldrb	r3, [r3, #0]
   1a360:	2b02      	cmp	r3, #2
   1a362:	d102      	bne.n	1a36a <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   1a364:	2304      	movs	r3, #4
   1a366:	737b      	strb	r3, [r7, #13]
   1a368:	e001      	b.n	1a36e <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   1a36a:	89fb      	ldrh	r3, [r7, #14]
   1a36c:	e0b8      	b.n	1a4e0 <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
   1a36e:	7b7b      	ldrb	r3, [r7, #13]
   1a370:	b29a      	uxth	r2, r3
   1a372:	4b5f      	ldr	r3, [pc, #380]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a374:	881b      	ldrh	r3, [r3, #0]
   1a376:	429a      	cmp	r2, r3
   1a378:	d012      	beq.n	1a3a0 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   1a37a:	4b5d      	ldr	r3, [pc, #372]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a37c:	881b      	ldrh	r3, [r3, #0]
   1a37e:	1c5a      	adds	r2, r3, #1
   1a380:	b291      	uxth	r1, r2
   1a382:	4a5b      	ldr	r2, [pc, #364]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a384:	8011      	strh	r1, [r2, #0]
   1a386:	4619      	mov	r1, r3
   1a388:	4a5b      	ldr	r2, [pc, #364]	; (1a4f8 <hciTrSerialRxIncoming+0x208>)
   1a38a:	7a3b      	ldrb	r3, [r7, #8]
   1a38c:	5453      	strb	r3, [r2, r1]
        pBuf++;
   1a38e:	687b      	ldr	r3, [r7, #4]
   1a390:	3301      	adds	r3, #1
   1a392:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
   1a394:	89fb      	ldrh	r3, [r7, #14]
   1a396:	3301      	adds	r3, #1
   1a398:	81fb      	strh	r3, [r7, #14]
        len--;
   1a39a:	887b      	ldrh	r3, [r7, #2]
   1a39c:	3b01      	subs	r3, #1
   1a39e:	807b      	strh	r3, [r7, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   1a3a0:	7b7b      	ldrb	r3, [r7, #13]
   1a3a2:	b29a      	uxth	r2, r3
   1a3a4:	4b52      	ldr	r3, [pc, #328]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a3a6:	881b      	ldrh	r3, [r3, #0]
   1a3a8:	429a      	cmp	r2, r3
   1a3aa:	d17e      	bne.n	1a4aa <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   1a3ac:	4b4f      	ldr	r3, [pc, #316]	; (1a4ec <hciTrSerialRxIncoming+0x1fc>)
   1a3ae:	781b      	ldrb	r3, [r3, #0]
   1a3b0:	2b04      	cmp	r3, #4
   1a3b2:	d103      	bne.n	1a3bc <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
   1a3b4:	4b50      	ldr	r3, [pc, #320]	; (1a4f8 <hciTrSerialRxIncoming+0x208>)
   1a3b6:	785b      	ldrb	r3, [r3, #1]
   1a3b8:	817b      	strh	r3, [r7, #10]
   1a3ba:	e00d      	b.n	1a3d8 <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   1a3bc:	4b4b      	ldr	r3, [pc, #300]	; (1a4ec <hciTrSerialRxIncoming+0x1fc>)
   1a3be:	781b      	ldrb	r3, [r3, #0]
   1a3c0:	2b02      	cmp	r3, #2
   1a3c2:	d109      	bne.n	1a3d8 <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   1a3c4:	4b4c      	ldr	r3, [pc, #304]	; (1a4f8 <hciTrSerialRxIncoming+0x208>)
   1a3c6:	789b      	ldrb	r3, [r3, #2]
   1a3c8:	b29a      	uxth	r2, r3
   1a3ca:	4b4c      	ldr	r3, [pc, #304]	; (1a4fc <hciTrSerialRxIncoming+0x20c>)
   1a3cc:	781b      	ldrb	r3, [r3, #0]
   1a3ce:	b29b      	uxth	r3, r3
   1a3d0:	021b      	lsls	r3, r3, #8
   1a3d2:	b29b      	uxth	r3, r3
   1a3d4:	4413      	add	r3, r2
   1a3d6:	817b      	strh	r3, [r7, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   1a3d8:	4b44      	ldr	r3, [pc, #272]	; (1a4ec <hciTrSerialRxIncoming+0x1fc>)
   1a3da:	781b      	ldrb	r3, [r3, #0]
   1a3dc:	2b02      	cmp	r3, #2
   1a3de:	d10c      	bne.n	1a3fa <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   1a3e0:	7b7b      	ldrb	r3, [r7, #13]
   1a3e2:	b29a      	uxth	r2, r3
   1a3e4:	897b      	ldrh	r3, [r7, #10]
   1a3e6:	4413      	add	r3, r2
   1a3e8:	b29b      	uxth	r3, r3
   1a3ea:	2100      	movs	r1, #0
   1a3ec:	4618      	mov	r0, r3
   1a3ee:	f7fa f8eb 	bl	145c8 <WsfMsgDataAlloc>
   1a3f2:	4602      	mov	r2, r0
   1a3f4:	4b42      	ldr	r3, [pc, #264]	; (1a500 <hciTrSerialRxIncoming+0x210>)
   1a3f6:	601a      	str	r2, [r3, #0]
   1a3f8:	e00a      	b.n	1a410 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   1a3fa:	7b7b      	ldrb	r3, [r7, #13]
   1a3fc:	b29a      	uxth	r2, r3
   1a3fe:	897b      	ldrh	r3, [r7, #10]
   1a400:	4413      	add	r3, r2
   1a402:	b29b      	uxth	r3, r3
   1a404:	4618      	mov	r0, r3
   1a406:	f7fa f8f4 	bl	145f2 <WsfMsgAlloc>
   1a40a:	4602      	mov	r2, r0
   1a40c:	4b3c      	ldr	r3, [pc, #240]	; (1a500 <hciTrSerialRxIncoming+0x210>)
   1a40e:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   1a410:	4b3b      	ldr	r3, [pc, #236]	; (1a500 <hciTrSerialRxIncoming+0x210>)
   1a412:	681b      	ldr	r3, [r3, #0]
   1a414:	2b00      	cmp	r3, #0
   1a416:	d025      	beq.n	1a464 <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
   1a418:	4b39      	ldr	r3, [pc, #228]	; (1a500 <hciTrSerialRxIncoming+0x210>)
   1a41a:	681b      	ldr	r3, [r3, #0]
   1a41c:	4a39      	ldr	r2, [pc, #228]	; (1a504 <hciTrSerialRxIncoming+0x214>)
   1a41e:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   1a420:	2300      	movs	r3, #0
   1a422:	727b      	strb	r3, [r7, #9]
   1a424:	e00b      	b.n	1a43e <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
   1a426:	4b37      	ldr	r3, [pc, #220]	; (1a504 <hciTrSerialRxIncoming+0x214>)
   1a428:	681b      	ldr	r3, [r3, #0]
   1a42a:	1c5a      	adds	r2, r3, #1
   1a42c:	4935      	ldr	r1, [pc, #212]	; (1a504 <hciTrSerialRxIncoming+0x214>)
   1a42e:	600a      	str	r2, [r1, #0]
   1a430:	7a7a      	ldrb	r2, [r7, #9]
   1a432:	4931      	ldr	r1, [pc, #196]	; (1a4f8 <hciTrSerialRxIncoming+0x208>)
   1a434:	5c8a      	ldrb	r2, [r1, r2]
   1a436:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   1a438:	7a7b      	ldrb	r3, [r7, #9]
   1a43a:	3301      	adds	r3, #1
   1a43c:	727b      	strb	r3, [r7, #9]
   1a43e:	7a7a      	ldrb	r2, [r7, #9]
   1a440:	7b7b      	ldrb	r3, [r7, #13]
   1a442:	429a      	cmp	r2, r3
   1a444:	d3ef      	bcc.n	1a426 <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   1a446:	4a2a      	ldr	r2, [pc, #168]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a448:	897b      	ldrh	r3, [r7, #10]
   1a44a:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   1a44c:	4b28      	ldr	r3, [pc, #160]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a44e:	881b      	ldrh	r3, [r3, #0]
   1a450:	2b00      	cmp	r3, #0
   1a452:	d103      	bne.n	1a45c <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   1a454:	4b24      	ldr	r3, [pc, #144]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a456:	2203      	movs	r2, #3
   1a458:	701a      	strb	r2, [r3, #0]
   1a45a:	e026      	b.n	1a4aa <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   1a45c:	4b22      	ldr	r3, [pc, #136]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a45e:	2202      	movs	r2, #2
   1a460:	701a      	strb	r2, [r3, #0]
   1a462:	e022      	b.n	1a4aa <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   1a464:	89fb      	ldrh	r3, [r7, #14]
   1a466:	e03b      	b.n	1a4e0 <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   1a468:	4b1f      	ldr	r3, [pc, #124]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a46a:	781b      	ldrb	r3, [r3, #0]
   1a46c:	2b02      	cmp	r3, #2
   1a46e:	d11c      	bne.n	1a4aa <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   1a470:	4b24      	ldr	r3, [pc, #144]	; (1a504 <hciTrSerialRxIncoming+0x214>)
   1a472:	681b      	ldr	r3, [r3, #0]
   1a474:	1c5a      	adds	r2, r3, #1
   1a476:	4923      	ldr	r1, [pc, #140]	; (1a504 <hciTrSerialRxIncoming+0x214>)
   1a478:	600a      	str	r2, [r1, #0]
   1a47a:	7a3a      	ldrb	r2, [r7, #8]
   1a47c:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   1a47e:	4b1c      	ldr	r3, [pc, #112]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a480:	881b      	ldrh	r3, [r3, #0]
   1a482:	3b01      	subs	r3, #1
   1a484:	b29a      	uxth	r2, r3
   1a486:	4b1a      	ldr	r3, [pc, #104]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a488:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   1a48a:	4b19      	ldr	r3, [pc, #100]	; (1a4f0 <hciTrSerialRxIncoming+0x200>)
   1a48c:	881b      	ldrh	r3, [r3, #0]
   1a48e:	2b00      	cmp	r3, #0
   1a490:	d102      	bne.n	1a498 <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   1a492:	4b15      	ldr	r3, [pc, #84]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a494:	2203      	movs	r2, #3
   1a496:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   1a498:	687b      	ldr	r3, [r7, #4]
   1a49a:	3301      	adds	r3, #1
   1a49c:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   1a49e:	89fb      	ldrh	r3, [r7, #14]
   1a4a0:	3301      	adds	r3, #1
   1a4a2:	81fb      	strh	r3, [r7, #14]
      len--;
   1a4a4:	887b      	ldrh	r3, [r7, #2]
   1a4a6:	3b01      	subs	r3, #1
   1a4a8:	807b      	strh	r3, [r7, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   1a4aa:	4b0f      	ldr	r3, [pc, #60]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a4ac:	781b      	ldrb	r3, [r3, #0]
   1a4ae:	2b03      	cmp	r3, #3
   1a4b0:	d111      	bne.n	1a4d6 <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
   1a4b2:	4b10      	ldr	r3, [pc, #64]	; (1a4f4 <hciTrSerialRxIncoming+0x204>)
   1a4b4:	2200      	movs	r2, #0
   1a4b6:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   1a4b8:	4b11      	ldr	r3, [pc, #68]	; (1a500 <hciTrSerialRxIncoming+0x210>)
   1a4ba:	681b      	ldr	r3, [r3, #0]
   1a4bc:	2b00      	cmp	r3, #0
   1a4be:	d007      	beq.n	1a4d0 <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   1a4c0:	4b0a      	ldr	r3, [pc, #40]	; (1a4ec <hciTrSerialRxIncoming+0x1fc>)
   1a4c2:	781a      	ldrb	r2, [r3, #0]
   1a4c4:	4b0e      	ldr	r3, [pc, #56]	; (1a500 <hciTrSerialRxIncoming+0x210>)
   1a4c6:	681b      	ldr	r3, [r3, #0]
   1a4c8:	4619      	mov	r1, r3
   1a4ca:	4610      	mov	r0, r2
   1a4cc:	f7fe f838 	bl	18540 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   1a4d0:	4b05      	ldr	r3, [pc, #20]	; (1a4e8 <hciTrSerialRxIncoming+0x1f8>)
   1a4d2:	2200      	movs	r2, #0
   1a4d4:	701a      	strb	r2, [r3, #0]
  while (len)
   1a4d6:	887b      	ldrh	r3, [r7, #2]
   1a4d8:	2b00      	cmp	r3, #0
   1a4da:	f47f af12 	bne.w	1a302 <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
   1a4de:	89fb      	ldrh	r3, [r7, #14]
}
   1a4e0:	4618      	mov	r0, r3
   1a4e2:	3710      	adds	r7, #16
   1a4e4:	46bd      	mov	sp, r7
   1a4e6:	bd80      	pop	{r7, pc}
   1a4e8:	10005285 	.word	0x10005285
   1a4ec:	10005286 	.word	0x10005286
   1a4f0:	10005288 	.word	0x10005288
   1a4f4:	10005284 	.word	0x10005284
   1a4f8:	1000528c 	.word	0x1000528c
   1a4fc:	1000528f 	.word	0x1000528f
   1a500:	10005290 	.word	0x10005290
   1a504:	10005294 	.word	0x10005294

0001a508 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   1a508:	b580      	push	{r7, lr}
   1a50a:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   1a50c:	4b0b      	ldr	r3, [pc, #44]	; (1a53c <hciCoreReadResolvingListSize+0x34>)
   1a50e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   1a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1a516:	2b00      	cmp	r3, #0
   1a518:	d008      	beq.n	1a52c <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   1a51a:	4b09      	ldr	r3, [pc, #36]	; (1a540 <hciCoreReadResolvingListSize+0x38>)
   1a51c:	881b      	ldrh	r3, [r3, #0]
   1a51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   1a522:	2b00      	cmp	r3, #0
   1a524:	d002      	beq.n	1a52c <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   1a526:	f7fd fa96 	bl	17a56 <HciLeReadResolvingListSize>
   1a52a:	e005      	b.n	1a538 <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   1a52c:	4b03      	ldr	r3, [pc, #12]	; (1a53c <hciCoreReadResolvingListSize+0x34>)
   1a52e:	2200      	movs	r2, #0
   1a530:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   1a534:	f000 f806 	bl	1a544 <hciCoreReadMaxDataLen>
  }
}
   1a538:	bf00      	nop
   1a53a:	bd80      	pop	{r7, pc}
   1a53c:	1000b064 	.word	0x1000b064
   1a540:	10002be4 	.word	0x10002be4

0001a544 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   1a544:	b580      	push	{r7, lr}
   1a546:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1a548:	4b09      	ldr	r3, [pc, #36]	; (1a570 <hciCoreReadMaxDataLen+0x2c>)
   1a54a:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   1a54e:	f003 0320 	and.w	r3, r3, #32
   1a552:	2b00      	cmp	r3, #0
   1a554:	d008      	beq.n	1a568 <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   1a556:	4b07      	ldr	r3, [pc, #28]	; (1a574 <hciCoreReadMaxDataLen+0x30>)
   1a558:	881b      	ldrh	r3, [r3, #0]
   1a55a:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1a55e:	2b00      	cmp	r3, #0
   1a560:	d002      	beq.n	1a568 <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   1a562:	f7fc fe13 	bl	1718c <HciLeReadMaxDataLen>
   1a566:	e001      	b.n	1a56c <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   1a568:	f7fc fe9a 	bl	172a0 <HciLeRandCmd>
  }
}
   1a56c:	bf00      	nop
   1a56e:	bd80      	pop	{r7, pc}
   1a570:	1000b064 	.word	0x1000b064
   1a574:	10002be4 	.word	0x10002be4

0001a578 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   1a578:	b580      	push	{r7, lr}
   1a57a:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   1a57c:	f7fd f95e 	bl	1783c <HciResetCmd>
}
   1a580:	bf00      	nop
   1a582:	bd80      	pop	{r7, pc}

0001a584 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   1a584:	b580      	push	{r7, lr}
   1a586:	b086      	sub	sp, #24
   1a588:	af00      	add	r7, sp, #0
   1a58a:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   1a58c:	687b      	ldr	r3, [r7, #4]
   1a58e:	781b      	ldrb	r3, [r3, #0]
   1a590:	2b0e      	cmp	r3, #14
   1a592:	f040 814b 	bne.w	1a82c <hciCoreResetSequence+0x2a8>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   1a596:	687b      	ldr	r3, [r7, #4]
   1a598:	3302      	adds	r3, #2
   1a59a:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
   1a59c:	687b      	ldr	r3, [r7, #4]
   1a59e:	3301      	adds	r3, #1
   1a5a0:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   1a5a2:	687b      	ldr	r3, [r7, #4]
   1a5a4:	781b      	ldrb	r3, [r3, #0]
   1a5a6:	b29a      	uxth	r2, r3
   1a5a8:	687b      	ldr	r3, [r7, #4]
   1a5aa:	3301      	adds	r3, #1
   1a5ac:	781b      	ldrb	r3, [r3, #0]
   1a5ae:	b29b      	uxth	r3, r3
   1a5b0:	021b      	lsls	r3, r3, #8
   1a5b2:	b29b      	uxth	r3, r3
   1a5b4:	4413      	add	r3, r2
   1a5b6:	82fb      	strh	r3, [r7, #22]
   1a5b8:	687b      	ldr	r3, [r7, #4]
   1a5ba:	3302      	adds	r3, #2
   1a5bc:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
   1a5be:	687b      	ldr	r3, [r7, #4]
   1a5c0:	3301      	adds	r3, #1
   1a5c2:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
   1a5c4:	8afb      	ldrh	r3, [r7, #22]
   1a5c6:	f242 020f 	movw	r2, #8207	; 0x200f
   1a5ca:	4293      	cmp	r3, r2
   1a5cc:	f000 809e 	beq.w	1a70c <hciCoreResetSequence+0x188>
   1a5d0:	f242 020f 	movw	r2, #8207	; 0x200f
   1a5d4:	4293      	cmp	r3, r2
   1a5d6:	dc22      	bgt.n	1a61e <hciCoreResetSequence+0x9a>
   1a5d8:	f241 0209 	movw	r2, #4105	; 0x1009
   1a5dc:	4293      	cmp	r3, r2
   1a5de:	d05c      	beq.n	1a69a <hciCoreResetSequence+0x116>
   1a5e0:	f241 0209 	movw	r2, #4105	; 0x1009
   1a5e4:	4293      	cmp	r3, r2
   1a5e6:	dc0c      	bgt.n	1a602 <hciCoreResetSequence+0x7e>
   1a5e8:	f640 4203 	movw	r2, #3075	; 0xc03
   1a5ec:	4293      	cmp	r3, r2
   1a5ee:	d042      	beq.n	1a676 <hciCoreResetSequence+0xf2>
   1a5f0:	f640 4263 	movw	r2, #3171	; 0xc63
   1a5f4:	4293      	cmp	r3, r2
   1a5f6:	d04d      	beq.n	1a694 <hciCoreResetSequence+0x110>
   1a5f8:	f640 4201 	movw	r2, #3073	; 0xc01
   1a5fc:	4293      	cmp	r3, r2
   1a5fe:	d041      	beq.n	1a684 <hciCoreResetSequence+0x100>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   1a600:	e114      	b.n	1a82c <hciCoreResetSequence+0x2a8>
    switch (opcode)
   1a602:	f242 0202 	movw	r2, #8194	; 0x2002
   1a606:	4293      	cmp	r3, r2
   1a608:	d04e      	beq.n	1a6a8 <hciCoreResetSequence+0x124>
   1a60a:	f242 0203 	movw	r2, #8195	; 0x2003
   1a60e:	4293      	cmp	r3, r2
   1a610:	f000 8086 	beq.w	1a720 <hciCoreResetSequence+0x19c>
   1a614:	f242 0201 	movw	r2, #8193	; 0x2001
   1a618:	4293      	cmp	r3, r2
   1a61a:	d037      	beq.n	1a68c <hciCoreResetSequence+0x108>
        break;
   1a61c:	e106      	b.n	1a82c <hciCoreResetSequence+0x2a8>
    switch (opcode)
   1a61e:	f242 022a 	movw	r2, #8234	; 0x202a
   1a622:	4293      	cmp	r3, r2
   1a624:	f000 8090 	beq.w	1a748 <hciCoreResetSequence+0x1c4>
   1a628:	f242 022a 	movw	r2, #8234	; 0x202a
   1a62c:	4293      	cmp	r3, r2
   1a62e:	dc0e      	bgt.n	1a64e <hciCoreResetSequence+0xca>
   1a630:	f242 021c 	movw	r2, #8220	; 0x201c
   1a634:	4293      	cmp	r3, r2
   1a636:	d060      	beq.n	1a6fa <hciCoreResetSequence+0x176>
   1a638:	f242 0224 	movw	r2, #8228	; 0x2024
   1a63c:	4293      	cmp	r3, r2
   1a63e:	f000 80b0 	beq.w	1a7a2 <hciCoreResetSequence+0x21e>
   1a642:	f242 0218 	movw	r2, #8216	; 0x2018
   1a646:	4293      	cmp	r3, r2
   1a648:	f000 80d4 	beq.w	1a7f4 <hciCoreResetSequence+0x270>
        break;
   1a64c:	e0ee      	b.n	1a82c <hciCoreResetSequence+0x2a8>
    switch (opcode)
   1a64e:	f242 023b 	movw	r2, #8251	; 0x203b
   1a652:	4293      	cmp	r3, r2
   1a654:	dc09      	bgt.n	1a66a <hciCoreResetSequence+0xe6>
   1a656:	f242 023a 	movw	r2, #8250	; 0x203a
   1a65a:	4293      	cmp	r3, r2
   1a65c:	f280 80bd 	bge.w	1a7da <hciCoreResetSequence+0x256>
   1a660:	f242 022f 	movw	r2, #8239	; 0x202f
   1a664:	4293      	cmp	r3, r2
   1a666:	d079      	beq.n	1a75c <hciCoreResetSequence+0x1d8>
        break;
   1a668:	e0e0      	b.n	1a82c <hciCoreResetSequence+0x2a8>
    switch (opcode)
   1a66a:	f242 024a 	movw	r2, #8266	; 0x204a
   1a66e:	4293      	cmp	r3, r2
   1a670:	f000 80b3 	beq.w	1a7da <hciCoreResetSequence+0x256>
        break;
   1a674:	e0da      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        randCnt = 0;
   1a676:	4b6f      	ldr	r3, [pc, #444]	; (1a834 <hciCoreResetSequence+0x2b0>)
   1a678:	2200      	movs	r2, #0
   1a67a:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   1a67c:	486e      	ldr	r0, [pc, #440]	; (1a838 <hciCoreResetSequence+0x2b4>)
   1a67e:	f7fd f90f 	bl	178a0 <HciSetEventMaskCmd>
        break;
   1a682:	e0d3      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   1a684:	486d      	ldr	r0, [pc, #436]	; (1a83c <hciCoreResetSequence+0x2b8>)
   1a686:	f7fc ff6b 	bl	17560 <HciLeSetEventMaskCmd>
        break;
   1a68a:	e0cf      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   1a68c:	486c      	ldr	r0, [pc, #432]	; (1a840 <hciCoreResetSequence+0x2bc>)
   1a68e:	f7fd f923 	bl	178d8 <HciSetEventMaskPage2Cmd>
        break;
   1a692:	e0cb      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        HciReadBdAddrCmd();
   1a694:	f7fd f886 	bl	177a4 <HciReadBdAddrCmd>
        break;
   1a698:	e0c8      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   1a69a:	6879      	ldr	r1, [r7, #4]
   1a69c:	4869      	ldr	r0, [pc, #420]	; (1a844 <hciCoreResetSequence+0x2c0>)
   1a69e:	f7f9 fafb 	bl	13c98 <BdaCpy>
        HciLeReadBufSizeCmd();
   1a6a2:	f7fc fe10 	bl	172c6 <HciLeReadBufSizeCmd>
        break;
   1a6a6:	e0c1      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   1a6a8:	687b      	ldr	r3, [r7, #4]
   1a6aa:	781b      	ldrb	r3, [r3, #0]
   1a6ac:	b29a      	uxth	r2, r3
   1a6ae:	687b      	ldr	r3, [r7, #4]
   1a6b0:	3301      	adds	r3, #1
   1a6b2:	781b      	ldrb	r3, [r3, #0]
   1a6b4:	b29b      	uxth	r3, r3
   1a6b6:	021b      	lsls	r3, r3, #8
   1a6b8:	b29b      	uxth	r3, r3
   1a6ba:	4413      	add	r3, r2
   1a6bc:	b29a      	uxth	r2, r3
   1a6be:	4b62      	ldr	r3, [pc, #392]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a6c0:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
   1a6c4:	687b      	ldr	r3, [r7, #4]
   1a6c6:	3302      	adds	r3, #2
   1a6c8:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   1a6ca:	687b      	ldr	r3, [r7, #4]
   1a6cc:	1c5a      	adds	r2, r3, #1
   1a6ce:	607a      	str	r2, [r7, #4]
   1a6d0:	781a      	ldrb	r2, [r3, #0]
   1a6d2:	4b5d      	ldr	r3, [pc, #372]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a6d4:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.numBufs--;
   1a6d8:	4b5b      	ldr	r3, [pc, #364]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a6da:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   1a6de:	3b01      	subs	r3, #1
   1a6e0:	b2da      	uxtb	r2, r3
   1a6e2:	4b59      	ldr	r3, [pc, #356]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a6e4:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   1a6e8:	4b57      	ldr	r3, [pc, #348]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a6ea:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   1a6ee:	4b56      	ldr	r3, [pc, #344]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a6f0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
   1a6f4:	f7fc fe33 	bl	1735e <HciLeReadSupStatesCmd>
        break;
   1a6f8:	e098      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   1a6fa:	4b53      	ldr	r3, [pc, #332]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a6fc:	687a      	ldr	r2, [r7, #4]
   1a6fe:	33e0      	adds	r3, #224	; 0xe0
   1a700:	6810      	ldr	r0, [r2, #0]
   1a702:	6851      	ldr	r1, [r2, #4]
   1a704:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   1a706:	f7fc fe3d 	bl	17384 <HciLeReadWhiteListSizeCmd>
        break;
   1a70a:	e08f      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   1a70c:	687b      	ldr	r3, [r7, #4]
   1a70e:	1c5a      	adds	r2, r3, #1
   1a710:	607a      	str	r2, [r7, #4]
   1a712:	781a      	ldrb	r2, [r3, #0]
   1a714:	4b4c      	ldr	r3, [pc, #304]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a716:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
   1a71a:	f7fc fde7 	bl	172ec <HciLeReadLocalSupFeatCmd>
        break;
   1a71e:	e085      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   1a720:	687b      	ldr	r3, [r7, #4]
   1a722:	781b      	ldrb	r3, [r3, #0]
   1a724:	b29a      	uxth	r2, r3
   1a726:	687b      	ldr	r3, [r7, #4]
   1a728:	3301      	adds	r3, #1
   1a72a:	781b      	ldrb	r3, [r3, #0]
   1a72c:	b29b      	uxth	r3, r3
   1a72e:	021b      	lsls	r3, r3, #8
   1a730:	b29b      	uxth	r3, r3
   1a732:	4413      	add	r3, r2
   1a734:	b29a      	uxth	r2, r3
   1a736:	4b44      	ldr	r3, [pc, #272]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a738:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
   1a73c:	687b      	ldr	r3, [r7, #4]
   1a73e:	3302      	adds	r3, #2
   1a740:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
   1a742:	f7ff fee1 	bl	1a508 <hciCoreReadResolvingListSize>
        break;
   1a746:	e071      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   1a748:	687b      	ldr	r3, [r7, #4]
   1a74a:	1c5a      	adds	r2, r3, #1
   1a74c:	607a      	str	r2, [r7, #4]
   1a74e:	781a      	ldrb	r2, [r3, #0]
   1a750:	4b3d      	ldr	r3, [pc, #244]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a752:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
   1a756:	f7ff fef5 	bl	1a544 <hciCoreReadMaxDataLen>
        break;
   1a75a:	e067      	b.n	1a82c <hciCoreResetSequence+0x2a8>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   1a75c:	687b      	ldr	r3, [r7, #4]
   1a75e:	781b      	ldrb	r3, [r3, #0]
   1a760:	b29a      	uxth	r2, r3
   1a762:	687b      	ldr	r3, [r7, #4]
   1a764:	3301      	adds	r3, #1
   1a766:	781b      	ldrb	r3, [r3, #0]
   1a768:	b29b      	uxth	r3, r3
   1a76a:	021b      	lsls	r3, r3, #8
   1a76c:	b29b      	uxth	r3, r3
   1a76e:	4413      	add	r3, r2
   1a770:	82bb      	strh	r3, [r7, #20]
   1a772:	687b      	ldr	r3, [r7, #4]
   1a774:	3302      	adds	r3, #2
   1a776:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   1a778:	687b      	ldr	r3, [r7, #4]
   1a77a:	781b      	ldrb	r3, [r3, #0]
   1a77c:	b29a      	uxth	r2, r3
   1a77e:	687b      	ldr	r3, [r7, #4]
   1a780:	3301      	adds	r3, #1
   1a782:	781b      	ldrb	r3, [r3, #0]
   1a784:	b29b      	uxth	r3, r3
   1a786:	021b      	lsls	r3, r3, #8
   1a788:	b29b      	uxth	r3, r3
   1a78a:	4413      	add	r3, r2
   1a78c:	827b      	strh	r3, [r7, #18]
   1a78e:	687b      	ldr	r3, [r7, #4]
   1a790:	3302      	adds	r3, #2
   1a792:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   1a794:	8a7a      	ldrh	r2, [r7, #18]
   1a796:	8abb      	ldrh	r3, [r7, #20]
   1a798:	4611      	mov	r1, r2
   1a79a:	4618      	mov	r0, r3
   1a79c:	f7fc fc88 	bl	170b0 <HciLeWriteDefDataLen>
        break;
   1a7a0:	e044      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   1a7a2:	4b29      	ldr	r3, [pc, #164]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a7a4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1a7a8:	2b00      	cmp	r3, #0
   1a7aa:	d007      	beq.n	1a7bc <hciCoreResetSequence+0x238>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   1a7ac:	4b26      	ldr	r3, [pc, #152]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a7ae:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1a7b2:	8afa      	ldrh	r2, [r7, #22]
   1a7b4:	4611      	mov	r1, r2
   1a7b6:	6878      	ldr	r0, [r7, #4]
   1a7b8:	4798      	blx	r3
        break;
   1a7ba:	e037      	b.n	1a82c <hciCoreResetSequence+0x2a8>
          hciCoreCb.maxAdvDataLen = 0;
   1a7bc:	4b22      	ldr	r3, [pc, #136]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a7be:	2200      	movs	r2, #0
   1a7c0:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
   1a7c4:	4b20      	ldr	r3, [pc, #128]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a7c6:	2200      	movs	r2, #0
   1a7c8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
   1a7cc:	4b1e      	ldr	r3, [pc, #120]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a7ce:	2200      	movs	r2, #0
   1a7d0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
   1a7d4:	f7fc fd64 	bl	172a0 <HciLeRandCmd>
        break;
   1a7d8:	e028      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   1a7da:	4b1b      	ldr	r3, [pc, #108]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a7dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1a7e0:	2b00      	cmp	r3, #0
   1a7e2:	d022      	beq.n	1a82a <hciCoreResetSequence+0x2a6>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   1a7e4:	4b18      	ldr	r3, [pc, #96]	; (1a848 <hciCoreResetSequence+0x2c4>)
   1a7e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1a7ea:	8afa      	ldrh	r2, [r7, #22]
   1a7ec:	4611      	mov	r1, r2
   1a7ee:	6878      	ldr	r0, [r7, #4]
   1a7f0:	4798      	blx	r3
        break;
   1a7f2:	e01a      	b.n	1a82a <hciCoreResetSequence+0x2a6>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   1a7f4:	4b0f      	ldr	r3, [pc, #60]	; (1a834 <hciCoreResetSequence+0x2b0>)
   1a7f6:	781b      	ldrb	r3, [r3, #0]
   1a7f8:	2b02      	cmp	r3, #2
   1a7fa:	d808      	bhi.n	1a80e <hciCoreResetSequence+0x28a>
          randCnt++;
   1a7fc:	4b0d      	ldr	r3, [pc, #52]	; (1a834 <hciCoreResetSequence+0x2b0>)
   1a7fe:	781b      	ldrb	r3, [r3, #0]
   1a800:	3301      	adds	r3, #1
   1a802:	b2da      	uxtb	r2, r3
   1a804:	4b0b      	ldr	r3, [pc, #44]	; (1a834 <hciCoreResetSequence+0x2b0>)
   1a806:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   1a808:	f7fc fd4a 	bl	172a0 <HciLeRandCmd>
        break;
   1a80c:	e00e      	b.n	1a82c <hciCoreResetSequence+0x2a8>
          hciCb.resetting = FALSE;
   1a80e:	4b0f      	ldr	r3, [pc, #60]	; (1a84c <hciCoreResetSequence+0x2c8>)
   1a810:	2200      	movs	r2, #0
   1a812:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   1a814:	2300      	movs	r3, #0
   1a816:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   1a818:	2300      	movs	r3, #0
   1a81a:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   1a81c:	4b0b      	ldr	r3, [pc, #44]	; (1a84c <hciCoreResetSequence+0x2c8>)
   1a81e:	689b      	ldr	r3, [r3, #8]
   1a820:	f107 020c 	add.w	r2, r7, #12
   1a824:	4610      	mov	r0, r2
   1a826:	4798      	blx	r3
        break;
   1a828:	e000      	b.n	1a82c <hciCoreResetSequence+0x2a8>
        break;
   1a82a:	bf00      	nop
    }
  }
}
   1a82c:	bf00      	nop
   1a82e:	3718      	adds	r7, #24
   1a830:	46bd      	mov	sp, r7
   1a832:	bd80      	pop	{r7, pc}
   1a834:	10005298 	.word	0x10005298
   1a838:	0002607c 	.word	0x0002607c
   1a83c:	00026084 	.word	0x00026084
   1a840:	0002608c 	.word	0x0002608c
   1a844:	1000b14c 	.word	0x1000b14c
   1a848:	1000b064 	.word	0x1000b064
   1a84c:	1000a694 	.word	0x1000a694

0001a850 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   1a850:	b480      	push	{r7}
   1a852:	b083      	sub	sp, #12
   1a854:	af00      	add	r7, sp, #0
   1a856:	4603      	mov	r3, r0
   1a858:	6039      	str	r1, [r7, #0]
   1a85a:	80fb      	strh	r3, [r7, #6]
   1a85c:	4613      	mov	r3, r2
   1a85e:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   1a860:	2312      	movs	r3, #18
}
   1a862:	4618      	mov	r0, r3
   1a864:	370c      	adds	r7, #12
   1a866:	46bd      	mov	sp, r7
   1a868:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a86c:	4770      	bx	lr

0001a86e <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   1a86e:	b480      	push	{r7}
   1a870:	b083      	sub	sp, #12
   1a872:	af00      	add	r7, sp, #0
   1a874:	4603      	mov	r3, r0
   1a876:	71fb      	strb	r3, [r7, #7]

}
   1a878:	bf00      	nop
   1a87a:	370c      	adds	r7, #12
   1a87c:	46bd      	mov	sp, r7
   1a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a882:	4770      	bx	lr

0001a884 <uart_transmit_delay>:
// for a transmission to fully complete before proceeding.
//
//*****************************************************************************
void
uart_transmit_delay(uint32_t ui32Module)
{
   1a884:	b480      	push	{r7}
   1a886:	b083      	sub	sp, #12
   1a888:	af00      	add	r7, sp, #0
   1a88a:	6078      	str	r0, [r7, #4]
  //
  // Wait until busy bit clears to make sure UART fully transmitted last byte
  //
  //while ( am_hal_uart_flags_get(ui32Module) & AM_HAL_UART_FR_BUSY );
}
   1a88c:	bf00      	nop
   1a88e:	370c      	adds	r7, #12
   1a890:	46bd      	mov	sp, r7
   1a892:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a896:	4770      	bx	lr

0001a898 <isSelectionHome>:


static bool isSelectionHome(void)
{
   1a898:	b480      	push	{r7}
   1a89a:	af00      	add	r7, sp, #0
    if (menuRxData[0] == 'h')
   1a89c:	4b08      	ldr	r3, [pc, #32]	; (1a8c0 <isSelectionHome+0x28>)
   1a89e:	781b      	ldrb	r3, [r3, #0]
   1a8a0:	2b68      	cmp	r3, #104	; 0x68
   1a8a2:	d107      	bne.n	1a8b4 <isSelectionHome+0x1c>
    {
        bleMenuCb.menuId = BLE_MENU_ID_MAIN;
   1a8a4:	4b07      	ldr	r3, [pc, #28]	; (1a8c4 <isSelectionHome+0x2c>)
   1a8a6:	2200      	movs	r2, #0
   1a8a8:	705a      	strb	r2, [r3, #1]
        bleMenuCb.prevMenuId = BLE_MENU_ID_MAIN;
   1a8aa:	4b06      	ldr	r3, [pc, #24]	; (1a8c4 <isSelectionHome+0x2c>)
   1a8ac:	2200      	movs	r2, #0
   1a8ae:	701a      	strb	r2, [r3, #0]
        return true;
   1a8b0:	2301      	movs	r3, #1
   1a8b2:	e000      	b.n	1a8b6 <isSelectionHome+0x1e>
    }
    return false;
   1a8b4:	2300      	movs	r3, #0
}
   1a8b6:	4618      	mov	r0, r3
   1a8b8:	46bd      	mov	sp, r7
   1a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a8be:	4770      	bx	lr
   1a8c0:	1000b178 	.word	0x1000b178
   1a8c4:	1000b18c 	.word	0x1000b18c

0001a8c8 <showScanResults>:

static void showScanResults(void)
{
   1a8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8ca:	b08b      	sub	sp, #44	; 0x2c
   1a8cc:	af06      	add	r7, sp, #24
    appDevInfo_t *devInfo;
    uint8_t num = AppScanGetNumResults();
   1a8ce:	f003 fab3 	bl	1de38 <AppScanGetNumResults>
   1a8d2:	4603      	mov	r3, r0
   1a8d4:	72fb      	strb	r3, [r7, #11]

    am_menu_printf("--------------------Scan Results--------------------\r\n");
   1a8d6:	481e      	ldr	r0, [pc, #120]	; (1a950 <showScanResults+0x88>)
   1a8d8:	f7f8 fba0 	bl	1301c <am_menu_printf>
    for (int i = 0; i < num; i++)
   1a8dc:	2300      	movs	r3, #0
   1a8de:	60fb      	str	r3, [r7, #12]
   1a8e0:	e02a      	b.n	1a938 <showScanResults+0x70>
    {
        devInfo = AppScanGetResult(i);
   1a8e2:	68fb      	ldr	r3, [r7, #12]
   1a8e4:	b2db      	uxtb	r3, r3
   1a8e6:	4618      	mov	r0, r3
   1a8e8:	f003 fa82 	bl	1ddf0 <AppScanGetResult>
   1a8ec:	6078      	str	r0, [r7, #4]
        if (devInfo)
   1a8ee:	687b      	ldr	r3, [r7, #4]
   1a8f0:	2b00      	cmp	r3, #0
   1a8f2:	d01e      	beq.n	1a932 <showScanResults+0x6a>
        {
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a8f4:	687b      	ldr	r3, [r7, #4]
   1a8f6:	799b      	ldrb	r3, [r3, #6]
   1a8f8:	461d      	mov	r5, r3
            devInfo->addr[0], devInfo->addr[1], devInfo->addr[2], devInfo->addr[3], devInfo->addr[4], devInfo->addr[5]);
   1a8fa:	687b      	ldr	r3, [r7, #4]
   1a8fc:	781b      	ldrb	r3, [r3, #0]
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a8fe:	461e      	mov	r6, r3
            devInfo->addr[0], devInfo->addr[1], devInfo->addr[2], devInfo->addr[3], devInfo->addr[4], devInfo->addr[5]);
   1a900:	687b      	ldr	r3, [r7, #4]
   1a902:	785b      	ldrb	r3, [r3, #1]
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a904:	461a      	mov	r2, r3
            devInfo->addr[0], devInfo->addr[1], devInfo->addr[2], devInfo->addr[3], devInfo->addr[4], devInfo->addr[5]);
   1a906:	687b      	ldr	r3, [r7, #4]
   1a908:	789b      	ldrb	r3, [r3, #2]
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a90a:	4619      	mov	r1, r3
            devInfo->addr[0], devInfo->addr[1], devInfo->addr[2], devInfo->addr[3], devInfo->addr[4], devInfo->addr[5]);
   1a90c:	687b      	ldr	r3, [r7, #4]
   1a90e:	78db      	ldrb	r3, [r3, #3]
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a910:	4618      	mov	r0, r3
            devInfo->addr[0], devInfo->addr[1], devInfo->addr[2], devInfo->addr[3], devInfo->addr[4], devInfo->addr[5]);
   1a912:	687b      	ldr	r3, [r7, #4]
   1a914:	791b      	ldrb	r3, [r3, #4]
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a916:	461c      	mov	r4, r3
            devInfo->addr[0], devInfo->addr[1], devInfo->addr[2], devInfo->addr[3], devInfo->addr[4], devInfo->addr[5]);
   1a918:	687b      	ldr	r3, [r7, #4]
   1a91a:	795b      	ldrb	r3, [r3, #5]
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a91c:	9304      	str	r3, [sp, #16]
   1a91e:	9403      	str	r4, [sp, #12]
   1a920:	9002      	str	r0, [sp, #8]
   1a922:	9101      	str	r1, [sp, #4]
   1a924:	9200      	str	r2, [sp, #0]
   1a926:	4633      	mov	r3, r6
   1a928:	462a      	mov	r2, r5
   1a92a:	68f9      	ldr	r1, [r7, #12]
   1a92c:	4809      	ldr	r0, [pc, #36]	; (1a954 <showScanResults+0x8c>)
   1a92e:	f7f8 fb75 	bl	1301c <am_menu_printf>
    for (int i = 0; i < num; i++)
   1a932:	68fb      	ldr	r3, [r7, #12]
   1a934:	3301      	adds	r3, #1
   1a936:	60fb      	str	r3, [r7, #12]
   1a938:	7afa      	ldrb	r2, [r7, #11]
   1a93a:	68fb      	ldr	r3, [r7, #12]
   1a93c:	429a      	cmp	r2, r3
   1a93e:	dcd0      	bgt.n	1a8e2 <showScanResults+0x1a>
        }
    }
    am_menu_printf("-----------------------------------------------------\r\n");
   1a940:	4805      	ldr	r0, [pc, #20]	; (1a958 <showScanResults+0x90>)
   1a942:	f7f8 fb6b 	bl	1301c <am_menu_printf>
}
   1a946:	bf00      	nop
   1a948:	3714      	adds	r7, #20
   1a94a:	46bd      	mov	sp, r7
   1a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a94e:	bf00      	nop
   1a950:	00024bec 	.word	0x00024bec
   1a954:	00024c24 	.word	0x00024c24
   1a958:	00024c48 	.word	0x00024c48

0001a95c <handleGAPSlection>:

static void handleGAPSlection(void)
{
   1a95c:	b580      	push	{r7, lr}
   1a95e:	b082      	sub	sp, #8
   1a960:	af00      	add	r7, sp, #0
    eGapMenuId id;
    if (bleMenuCb.gapMenuSelected == GAP_MENU_ID_NONE)
   1a962:	4b22      	ldr	r3, [pc, #136]	; (1a9ec <handleGAPSlection+0x90>)
   1a964:	789b      	ldrb	r3, [r3, #2]
   1a966:	2b00      	cmp	r3, #0
   1a968:	d104      	bne.n	1a974 <handleGAPSlection+0x18>
    {
        id = (eGapMenuId)(menuRxData[0] - '0');
   1a96a:	4b21      	ldr	r3, [pc, #132]	; (1a9f0 <handleGAPSlection+0x94>)
   1a96c:	781b      	ldrb	r3, [r3, #0]
   1a96e:	3b30      	subs	r3, #48	; 0x30
   1a970:	71fb      	strb	r3, [r7, #7]
   1a972:	e002      	b.n	1a97a <handleGAPSlection+0x1e>
    }
    else
    {
        id = bleMenuCb.gapMenuSelected;
   1a974:	4b1d      	ldr	r3, [pc, #116]	; (1a9ec <handleGAPSlection+0x90>)
   1a976:	789b      	ldrb	r3, [r3, #2]
   1a978:	71fb      	strb	r3, [r7, #7]
    }

    switch (id)
   1a97a:	79fb      	ldrb	r3, [r7, #7]
   1a97c:	3b01      	subs	r3, #1
   1a97e:	2b03      	cmp	r3, #3
   1a980:	d82f      	bhi.n	1a9e2 <handleGAPSlection+0x86>
   1a982:	a201      	add	r2, pc, #4	; (adr r2, 1a988 <handleGAPSlection+0x2c>)
   1a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a988:	0001a999 	.word	0x0001a999
   1a98c:	0001a9a5 	.word	0x0001a9a5
   1a990:	0001a9ab 	.word	0x0001a9ab
   1a994:	0001a9b1 	.word	0x0001a9b1
    {
        case GAP_MENU_ID_SCAN_START:
            am_menu_printf("scan start\r\n");
   1a998:	4816      	ldr	r0, [pc, #88]	; (1a9f4 <handleGAPSlection+0x98>)
   1a99a:	f7f8 fb3f 	bl	1301c <am_menu_printf>
            AmdtpcScanStart();
   1a99e:	f7fa faaf 	bl	14f00 <AmdtpcScanStart>
            break;
   1a9a2:	e01f      	b.n	1a9e4 <handleGAPSlection+0x88>
        case GAP_MENU_ID_SCAN_STOP:
            AmdtpcScanStop();
   1a9a4:	f7fa fab7 	bl	14f16 <AmdtpcScanStop>
            break;
   1a9a8:	e01c      	b.n	1a9e4 <handleGAPSlection+0x88>
        case GAP_MENU_ID_SCAN_RESULTS:
            showScanResults();
   1a9aa:	f7ff ff8d 	bl	1a8c8 <showScanResults>
            break;
   1a9ae:	e019      	b.n	1a9e4 <handleGAPSlection+0x88>
        case GAP_MENU_ID_CONNECT:
            if (bleMenuCb.gapMenuSelected == GAP_MENU_ID_NONE)
   1a9b0:	4b0e      	ldr	r3, [pc, #56]	; (1a9ec <handleGAPSlection+0x90>)
   1a9b2:	789b      	ldrb	r3, [r3, #2]
   1a9b4:	2b00      	cmp	r3, #0
   1a9b6:	d108      	bne.n	1a9ca <handleGAPSlection+0x6e>
            {
                am_menu_printf("choose an idx from scan results to connect:\r\n");
   1a9b8:	480f      	ldr	r0, [pc, #60]	; (1a9f8 <handleGAPSlection+0x9c>)
   1a9ba:	f7f8 fb2f 	bl	1301c <am_menu_printf>
                showScanResults();
   1a9be:	f7ff ff83 	bl	1a8c8 <showScanResults>
                bleMenuCb.gapMenuSelected = GAP_MENU_ID_CONNECT;
   1a9c2:	4b0a      	ldr	r3, [pc, #40]	; (1a9ec <handleGAPSlection+0x90>)
   1a9c4:	2204      	movs	r2, #4
   1a9c6:	709a      	strb	r2, [r3, #2]
            {
                uint8_t idx = menuRxData[0] - '0';
                bleMenuCb.gapMenuSelected = GAP_MENU_ID_NONE;
                AmdtpcConnOpen(idx);
            }
            break;
   1a9c8:	e00c      	b.n	1a9e4 <handleGAPSlection+0x88>
                uint8_t idx = menuRxData[0] - '0';
   1a9ca:	4b09      	ldr	r3, [pc, #36]	; (1a9f0 <handleGAPSlection+0x94>)
   1a9cc:	781b      	ldrb	r3, [r3, #0]
   1a9ce:	3b30      	subs	r3, #48	; 0x30
   1a9d0:	71bb      	strb	r3, [r7, #6]
                bleMenuCb.gapMenuSelected = GAP_MENU_ID_NONE;
   1a9d2:	4b06      	ldr	r3, [pc, #24]	; (1a9ec <handleGAPSlection+0x90>)
   1a9d4:	2200      	movs	r2, #0
   1a9d6:	709a      	strb	r2, [r3, #2]
                AmdtpcConnOpen(idx);
   1a9d8:	79bb      	ldrb	r3, [r7, #6]
   1a9da:	4618      	mov	r0, r3
   1a9dc:	f7fa faa2 	bl	14f24 <AmdtpcConnOpen>
            break;
   1a9e0:	e000      	b.n	1a9e4 <handleGAPSlection+0x88>
        default:
            break;
   1a9e2:	bf00      	nop
    }
}
   1a9e4:	bf00      	nop
   1a9e6:	3708      	adds	r7, #8
   1a9e8:	46bd      	mov	sp, r7
   1a9ea:	bd80      	pop	{r7, pc}
   1a9ec:	1000b18c 	.word	0x1000b18c
   1a9f0:	1000b178 	.word	0x1000b178
   1a9f4:	00024c80 	.word	0x00024c80
   1a9f8:	00024c90 	.word	0x00024c90

0001a9fc <handleAMDTPSlection>:

static void handleAMDTPSlection(void)
{
   1a9fc:	b580      	push	{r7, lr}
   1a9fe:	b082      	sub	sp, #8
   1aa00:	af00      	add	r7, sp, #0
    eAmdtpMenuId id;
    id = (eAmdtpMenuId)(menuRxData[0] - '0');
   1aa02:	4b18      	ldr	r3, [pc, #96]	; (1aa64 <handleAMDTPSlection+0x68>)
   1aa04:	781b      	ldrb	r3, [r3, #0]
   1aa06:	3b30      	subs	r3, #48	; 0x30
   1aa08:	71fb      	strb	r3, [r7, #7]

    switch (id)
   1aa0a:	79fb      	ldrb	r3, [r7, #7]
   1aa0c:	3b01      	subs	r3, #1
   1aa0e:	2b03      	cmp	r3, #3
   1aa10:	d822      	bhi.n	1aa58 <handleAMDTPSlection+0x5c>
   1aa12:	a201      	add	r2, pc, #4	; (adr r2, 1aa18 <handleAMDTPSlection+0x1c>)
   1aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1aa18:	0001aa29 	.word	0x0001aa29
   1aa1c:	0001aa35 	.word	0x0001aa35
   1aa20:	0001aa41 	.word	0x0001aa41
   1aa24:	0001aa4d 	.word	0x0001aa4d
    {
        case AMDTP_MENU_ID_SEND:
            am_menu_printf("send data to server\r\n");
   1aa28:	480f      	ldr	r0, [pc, #60]	; (1aa68 <handleAMDTPSlection+0x6c>)
   1aa2a:	f7f8 faf7 	bl	1301c <am_menu_printf>
            AmdtpcSendTestData();
   1aa2e:	f7fa fa97 	bl	14f60 <AmdtpcSendTestData>
            break;
   1aa32:	e012      	b.n	1aa5a <handleAMDTPSlection+0x5e>
        case AMDTP_MENU_ID_SEND_STOP:
            am_menu_printf("send data to server stop\r\n");
   1aa34:	480d      	ldr	r0, [pc, #52]	; (1aa6c <handleAMDTPSlection+0x70>)
   1aa36:	f7f8 faf1 	bl	1301c <am_menu_printf>
            AmdtpcSendTestDataStop();
   1aa3a:	f7fa fac7 	bl	14fcc <AmdtpcSendTestDataStop>
            break;
   1aa3e:	e00c      	b.n	1aa5a <handleAMDTPSlection+0x5e>
        case AMDTP_MENU_ID_SERVER_SEND:
            am_menu_printf("request server to send\r\n");
   1aa40:	480b      	ldr	r0, [pc, #44]	; (1aa70 <handleAMDTPSlection+0x74>)
   1aa42:	f7f8 faeb 	bl	1301c <am_menu_printf>
            AmdtpcRequestServerSend();
   1aa46:	f7fa facd 	bl	14fe4 <AmdtpcRequestServerSend>
            break;
   1aa4a:	e006      	b.n	1aa5a <handleAMDTPSlection+0x5e>
        case AMDTP_MENU_ID_SERVER_SEND_STOP:
            am_menu_printf("request server to stop\r\n");
   1aa4c:	4809      	ldr	r0, [pc, #36]	; (1aa74 <handleAMDTPSlection+0x78>)
   1aa4e:	f7f8 fae5 	bl	1301c <am_menu_printf>
            AmdtpcRequestServerSendStop();
   1aa52:	f7fa fae9 	bl	15028 <AmdtpcRequestServerSendStop>
            break;
   1aa56:	e000      	b.n	1aa5a <handleAMDTPSlection+0x5e>
        default:
            break;
   1aa58:	bf00      	nop
    }
}
   1aa5a:	bf00      	nop
   1aa5c:	3708      	adds	r7, #8
   1aa5e:	46bd      	mov	sp, r7
   1aa60:	bd80      	pop	{r7, pc}
   1aa62:	bf00      	nop
   1aa64:	1000b178 	.word	0x1000b178
   1aa68:	00024cc0 	.word	0x00024cc0
   1aa6c:	00024cd8 	.word	0x00024cd8
   1aa70:	00024cf4 	.word	0x00024cf4
   1aa74:	00024d10 	.word	0x00024d10

0001aa78 <handleSelection>:

static void handleSelection(void)
{
   1aa78:	b580      	push	{r7, lr}
   1aa7a:	af00      	add	r7, sp, #0
    if (isSelectionHome())
   1aa7c:	f7ff ff0c 	bl	1a898 <isSelectionHome>
   1aa80:	4603      	mov	r3, r0
   1aa82:	2b00      	cmp	r3, #0
   1aa84:	d002      	beq.n	1aa8c <handleSelection+0x14>
    {
        BleMenuShowMenu();
   1aa86:	f000 f8dd 	bl	1ac44 <BleMenuShowMenu>
        return;
   1aa8a:	e024      	b.n	1aad6 <handleSelection+0x5e>
    }

    switch (bleMenuCb.menuId)
   1aa8c:	4b12      	ldr	r3, [pc, #72]	; (1aad8 <handleSelection+0x60>)
   1aa8e:	785b      	ldrb	r3, [r3, #1]
   1aa90:	2b03      	cmp	r3, #3
   1aa92:	d81a      	bhi.n	1aaca <handleSelection+0x52>
   1aa94:	a201      	add	r2, pc, #4	; (adr r2, 1aa9c <handleSelection+0x24>)
   1aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1aa9a:	bf00      	nop
   1aa9c:	0001aaad 	.word	0x0001aaad
   1aaa0:	0001aabf 	.word	0x0001aabf
   1aaa4:	0001aad5 	.word	0x0001aad5
   1aaa8:	0001aac5 	.word	0x0001aac5
    {
        case BLE_MENU_ID_MAIN:
            bleMenuCb.menuId = (eBleMenuId)(menuRxData[0] - '0');
   1aaac:	4b0b      	ldr	r3, [pc, #44]	; (1aadc <handleSelection+0x64>)
   1aaae:	781b      	ldrb	r3, [r3, #0]
   1aab0:	3b30      	subs	r3, #48	; 0x30
   1aab2:	b2da      	uxtb	r2, r3
   1aab4:	4b08      	ldr	r3, [pc, #32]	; (1aad8 <handleSelection+0x60>)
   1aab6:	705a      	strb	r2, [r3, #1]
            BleMenuShowMenu();
   1aab8:	f000 f8c4 	bl	1ac44 <BleMenuShowMenu>
            break;
   1aabc:	e00b      	b.n	1aad6 <handleSelection+0x5e>
        case BLE_MENU_ID_GAP:
            handleGAPSlection();
   1aabe:	f7ff ff4d 	bl	1a95c <handleGAPSlection>
            break;
   1aac2:	e008      	b.n	1aad6 <handleSelection+0x5e>
        case BLE_MENU_ID_GATT:
        break;
        case BLE_MENU_ID_AMDTP:
            handleAMDTPSlection();
   1aac4:	f7ff ff9a 	bl	1a9fc <handleAMDTPSlection>
            break;
   1aac8:	e005      	b.n	1aad6 <handleSelection+0x5e>
        default:
            am_util_debug_printf("handleSelection() unknown input\n");
   1aaca:	4805      	ldr	r0, [pc, #20]	; (1aae0 <handleSelection+0x68>)
   1aacc:	f001 ffae 	bl	1ca2c <am_util_stdio_printf>
            break;
   1aad0:	bf00      	nop
   1aad2:	e000      	b.n	1aad6 <handleSelection+0x5e>
        break;
   1aad4:	bf00      	nop
    }
}
   1aad6:	bd80      	pop	{r7, pc}
   1aad8:	1000b18c 	.word	0x1000b18c
   1aadc:	1000b178 	.word	0x1000b178
   1aae0:	00024d2c 	.word	0x00024d2c

0001aae4 <BleMenuRx>:

void
BleMenuRx(void)
{
   1aae4:	b580      	push	{r7, lr}
   1aae6:	af00      	add	r7, sp, #0
    if (menuRxDataLen == 0)
   1aae8:	4b0c      	ldr	r3, [pc, #48]	; (1ab1c <BleMenuRx+0x38>)
   1aaea:	681b      	ldr	r3, [r3, #0]
   1aaec:	2b00      	cmp	r3, #0
   1aaee:	d013      	beq.n	1ab18 <BleMenuRx+0x34>
    {
        return;
    }

    menuRxData[menuRxDataLen] = '\0';
   1aaf0:	4b0a      	ldr	r3, [pc, #40]	; (1ab1c <BleMenuRx+0x38>)
   1aaf2:	681b      	ldr	r3, [r3, #0]
   1aaf4:	4a0a      	ldr	r2, [pc, #40]	; (1ab20 <BleMenuRx+0x3c>)
   1aaf6:	2100      	movs	r1, #0
   1aaf8:	54d1      	strb	r1, [r2, r3]
    am_util_debug_printf("BleMenuRx data = %s\n", menuRxData);
   1aafa:	4909      	ldr	r1, [pc, #36]	; (1ab20 <BleMenuRx+0x3c>)
   1aafc:	4809      	ldr	r0, [pc, #36]	; (1ab24 <BleMenuRx+0x40>)
   1aafe:	f001 ff95 	bl	1ca2c <am_util_stdio_printf>

    handleSelection();
   1ab02:	f7ff ffb9 	bl	1aa78 <handleSelection>
    // clear UART rx buffer
    memset(menuRxData, 0, sizeof(menuRxData));
   1ab06:	2214      	movs	r2, #20
   1ab08:	2100      	movs	r1, #0
   1ab0a:	4805      	ldr	r0, [pc, #20]	; (1ab20 <BleMenuRx+0x3c>)
   1ab0c:	f7f1 fc26 	bl	c35c <memset>
    menuRxDataLen = 0;
   1ab10:	4b02      	ldr	r3, [pc, #8]	; (1ab1c <BleMenuRx+0x38>)
   1ab12:	2200      	movs	r2, #0
   1ab14:	601a      	str	r2, [r3, #0]
   1ab16:	e000      	b.n	1ab1a <BleMenuRx+0x36>
        return;
   1ab18:	bf00      	nop
}
   1ab1a:	bd80      	pop	{r7, pc}
   1ab1c:	1000529c 	.word	0x1000529c
   1ab20:	1000b178 	.word	0x1000b178
   1ab24:	00024d50 	.word	0x00024d50

0001ab28 <BLEMenuShowMainMenu>:

static void
BLEMenuShowMainMenu(void)
{
   1ab28:	b580      	push	{r7, lr}
   1ab2a:	b082      	sub	sp, #8
   1ab2c:	af00      	add	r7, sp, #0
    am_menu_printf("--------------------BLE main menu--------------------\r\n");
   1ab2e:	4810      	ldr	r0, [pc, #64]	; (1ab70 <BLEMenuShowMainMenu+0x48>)
   1ab30:	f7f8 fa74 	bl	1301c <am_menu_printf>
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1ab34:	2300      	movs	r3, #0
   1ab36:	607b      	str	r3, [r7, #4]
   1ab38:	e00d      	b.n	1ab56 <BLEMenuShowMainMenu+0x2e>
    {
        am_menu_printf("%s\r\n", mainMenuContent[i]);
   1ab3a:	687b      	ldr	r3, [r7, #4]
   1ab3c:	015b      	lsls	r3, r3, #5
   1ab3e:	4a0d      	ldr	r2, [pc, #52]	; (1ab74 <BLEMenuShowMainMenu+0x4c>)
   1ab40:	4413      	add	r3, r2
   1ab42:	4619      	mov	r1, r3
   1ab44:	480c      	ldr	r0, [pc, #48]	; (1ab78 <BLEMenuShowMainMenu+0x50>)
   1ab46:	f7f8 fa69 	bl	1301c <am_menu_printf>
        uart_transmit_delay(AM_BSP_UART_PRINT_INST);
   1ab4a:	2000      	movs	r0, #0
   1ab4c:	f7ff fe9a 	bl	1a884 <uart_transmit_delay>
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1ab50:	687b      	ldr	r3, [r7, #4]
   1ab52:	3301      	adds	r3, #1
   1ab54:	607b      	str	r3, [r7, #4]
   1ab56:	687b      	ldr	r3, [r7, #4]
   1ab58:	2b03      	cmp	r3, #3
   1ab5a:	ddee      	ble.n	1ab3a <BLEMenuShowMainMenu+0x12>
    }
    am_menu_printf("hint: use 'h' to do main menu\r\n");
   1ab5c:	4807      	ldr	r0, [pc, #28]	; (1ab7c <BLEMenuShowMainMenu+0x54>)
   1ab5e:	f7f8 fa5d 	bl	1301c <am_menu_printf>
    am_menu_printf("-----------------------------------------------------\r\n");
   1ab62:	4807      	ldr	r0, [pc, #28]	; (1ab80 <BLEMenuShowMainMenu+0x58>)
   1ab64:	f7f8 fa5a 	bl	1301c <am_menu_printf>
}
   1ab68:	bf00      	nop
   1ab6a:	3708      	adds	r7, #8
   1ab6c:	46bd      	mov	sp, r7
   1ab6e:	bd80      	pop	{r7, pc}
   1ab70:	00024d68 	.word	0x00024d68
   1ab74:	10002be8 	.word	0x10002be8
   1ab78:	00024da0 	.word	0x00024da0
   1ab7c:	00024da8 	.word	0x00024da8
   1ab80:	00024c48 	.word	0x00024c48

0001ab84 <BLEMenuShowGAPMenu>:

static void
BLEMenuShowGAPMenu(void)
{
   1ab84:	b580      	push	{r7, lr}
   1ab86:	b082      	sub	sp, #8
   1ab88:	af00      	add	r7, sp, #0
    for (int i = 0; i < GAP_MENU_ID_MAX; i++)
   1ab8a:	2300      	movs	r3, #0
   1ab8c:	607b      	str	r3, [r7, #4]
   1ab8e:	e00d      	b.n	1abac <BLEMenuShowGAPMenu+0x28>
    {
        am_menu_printf("%s\r\n", gapMenuContent[i]);
   1ab90:	687b      	ldr	r3, [r7, #4]
   1ab92:	015b      	lsls	r3, r3, #5
   1ab94:	4a09      	ldr	r2, [pc, #36]	; (1abbc <BLEMenuShowGAPMenu+0x38>)
   1ab96:	4413      	add	r3, r2
   1ab98:	4619      	mov	r1, r3
   1ab9a:	4809      	ldr	r0, [pc, #36]	; (1abc0 <BLEMenuShowGAPMenu+0x3c>)
   1ab9c:	f7f8 fa3e 	bl	1301c <am_menu_printf>
        uart_transmit_delay(AM_BSP_UART_PRINT_INST);
   1aba0:	2000      	movs	r0, #0
   1aba2:	f7ff fe6f 	bl	1a884 <uart_transmit_delay>
    for (int i = 0; i < GAP_MENU_ID_MAX; i++)
   1aba6:	687b      	ldr	r3, [r7, #4]
   1aba8:	3301      	adds	r3, #1
   1abaa:	607b      	str	r3, [r7, #4]
   1abac:	687b      	ldr	r3, [r7, #4]
   1abae:	2b04      	cmp	r3, #4
   1abb0:	ddee      	ble.n	1ab90 <BLEMenuShowGAPMenu+0xc>
    }
}
   1abb2:	bf00      	nop
   1abb4:	3708      	adds	r7, #8
   1abb6:	46bd      	mov	sp, r7
   1abb8:	bd80      	pop	{r7, pc}
   1abba:	bf00      	nop
   1abbc:	10002c68 	.word	0x10002c68
   1abc0:	00024da0 	.word	0x00024da0

0001abc4 <BLEMenuShowGATTMenu>:

static void
BLEMenuShowGATTMenu(void)
{
   1abc4:	b580      	push	{r7, lr}
   1abc6:	b082      	sub	sp, #8
   1abc8:	af00      	add	r7, sp, #0
    for (int i = 0; i < GATT_MENU_ID_MAX; i++)
   1abca:	2300      	movs	r3, #0
   1abcc:	607b      	str	r3, [r7, #4]
   1abce:	e00d      	b.n	1abec <BLEMenuShowGATTMenu+0x28>
    {
        am_menu_printf("%s\r\n", gattMenuContent[i]);
   1abd0:	687b      	ldr	r3, [r7, #4]
   1abd2:	015b      	lsls	r3, r3, #5
   1abd4:	4a09      	ldr	r2, [pc, #36]	; (1abfc <BLEMenuShowGATTMenu+0x38>)
   1abd6:	4413      	add	r3, r2
   1abd8:	4619      	mov	r1, r3
   1abda:	4809      	ldr	r0, [pc, #36]	; (1ac00 <BLEMenuShowGATTMenu+0x3c>)
   1abdc:	f7f8 fa1e 	bl	1301c <am_menu_printf>
        uart_transmit_delay(AM_BSP_UART_PRINT_INST);
   1abe0:	2000      	movs	r0, #0
   1abe2:	f7ff fe4f 	bl	1a884 <uart_transmit_delay>
    for (int i = 0; i < GATT_MENU_ID_MAX; i++)
   1abe6:	687b      	ldr	r3, [r7, #4]
   1abe8:	3301      	adds	r3, #1
   1abea:	607b      	str	r3, [r7, #4]
   1abec:	687b      	ldr	r3, [r7, #4]
   1abee:	2b01      	cmp	r3, #1
   1abf0:	ddee      	ble.n	1abd0 <BLEMenuShowGATTMenu+0xc>
    }
}
   1abf2:	bf00      	nop
   1abf4:	3708      	adds	r7, #8
   1abf6:	46bd      	mov	sp, r7
   1abf8:	bd80      	pop	{r7, pc}
   1abfa:	bf00      	nop
   1abfc:	10002d08 	.word	0x10002d08
   1ac00:	00024da0 	.word	0x00024da0

0001ac04 <BLEMenuShowAMDTPMenu>:

static void
BLEMenuShowAMDTPMenu(void)
{
   1ac04:	b580      	push	{r7, lr}
   1ac06:	b082      	sub	sp, #8
   1ac08:	af00      	add	r7, sp, #0
    for (int i = 0; i < AMDTP_MENU_ID_MAX; i++)
   1ac0a:	2300      	movs	r3, #0
   1ac0c:	607b      	str	r3, [r7, #4]
   1ac0e:	e00d      	b.n	1ac2c <BLEMenuShowAMDTPMenu+0x28>
    {
        am_menu_printf("%s\r\n", amdtpMenuContent[i]);
   1ac10:	687b      	ldr	r3, [r7, #4]
   1ac12:	019b      	lsls	r3, r3, #6
   1ac14:	4a09      	ldr	r2, [pc, #36]	; (1ac3c <BLEMenuShowAMDTPMenu+0x38>)
   1ac16:	4413      	add	r3, r2
   1ac18:	4619      	mov	r1, r3
   1ac1a:	4809      	ldr	r0, [pc, #36]	; (1ac40 <BLEMenuShowAMDTPMenu+0x3c>)
   1ac1c:	f7f8 f9fe 	bl	1301c <am_menu_printf>
        uart_transmit_delay(AM_BSP_UART_PRINT_INST);
   1ac20:	2000      	movs	r0, #0
   1ac22:	f7ff fe2f 	bl	1a884 <uart_transmit_delay>
    for (int i = 0; i < AMDTP_MENU_ID_MAX; i++)
   1ac26:	687b      	ldr	r3, [r7, #4]
   1ac28:	3301      	adds	r3, #1
   1ac2a:	607b      	str	r3, [r7, #4]
   1ac2c:	687b      	ldr	r3, [r7, #4]
   1ac2e:	2b04      	cmp	r3, #4
   1ac30:	ddee      	ble.n	1ac10 <BLEMenuShowAMDTPMenu+0xc>
    }
}
   1ac32:	bf00      	nop
   1ac34:	3708      	adds	r7, #8
   1ac36:	46bd      	mov	sp, r7
   1ac38:	bd80      	pop	{r7, pc}
   1ac3a:	bf00      	nop
   1ac3c:	10002d48 	.word	0x10002d48
   1ac40:	00024da0 	.word	0x00024da0

0001ac44 <BleMenuShowMenu>:

static void
BleMenuShowMenu(void)
{
   1ac44:	b580      	push	{r7, lr}
   1ac46:	af00      	add	r7, sp, #0
    switch (bleMenuCb.menuId)
   1ac48:	4b0f      	ldr	r3, [pc, #60]	; (1ac88 <BleMenuShowMenu+0x44>)
   1ac4a:	785b      	ldrb	r3, [r3, #1]
   1ac4c:	2b03      	cmp	r3, #3
   1ac4e:	d817      	bhi.n	1ac80 <BleMenuShowMenu+0x3c>
   1ac50:	a201      	add	r2, pc, #4	; (adr r2, 1ac58 <BleMenuShowMenu+0x14>)
   1ac52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ac56:	bf00      	nop
   1ac58:	0001ac69 	.word	0x0001ac69
   1ac5c:	0001ac6f 	.word	0x0001ac6f
   1ac60:	0001ac75 	.word	0x0001ac75
   1ac64:	0001ac7b 	.word	0x0001ac7b
    {
        case BLE_MENU_ID_MAIN:
            BLEMenuShowMainMenu();
   1ac68:	f7ff ff5e 	bl	1ab28 <BLEMenuShowMainMenu>
            break;
   1ac6c:	e009      	b.n	1ac82 <BleMenuShowMenu+0x3e>
        case BLE_MENU_ID_GAP:
            BLEMenuShowGAPMenu();
   1ac6e:	f7ff ff89 	bl	1ab84 <BLEMenuShowGAPMenu>
            break;
   1ac72:	e006      	b.n	1ac82 <BleMenuShowMenu+0x3e>
        case BLE_MENU_ID_GATT:
            BLEMenuShowGATTMenu();
   1ac74:	f7ff ffa6 	bl	1abc4 <BLEMenuShowGATTMenu>
            break;
   1ac78:	e003      	b.n	1ac82 <BleMenuShowMenu+0x3e>
        case BLE_MENU_ID_AMDTP:
            BLEMenuShowAMDTPMenu();
   1ac7a:	f7ff ffc3 	bl	1ac04 <BLEMenuShowAMDTPMenu>
            break;
   1ac7e:	e000      	b.n	1ac82 <BleMenuShowMenu+0x3e>
        default:
            break;
   1ac80:	bf00      	nop
    }
}
   1ac82:	bf00      	nop
   1ac84:	bd80      	pop	{r7, pc}
   1ac86:	bf00      	nop
   1ac88:	1000b18c 	.word	0x1000b18c

0001ac8c <BleMenuInit>:

void
BleMenuInit(void)
{
   1ac8c:	b580      	push	{r7, lr}
   1ac8e:	af00      	add	r7, sp, #0
    bleMenuCb.prevMenuId = BLE_MENU_ID_MAIN;
   1ac90:	4b07      	ldr	r3, [pc, #28]	; (1acb0 <BleMenuInit+0x24>)
   1ac92:	2200      	movs	r2, #0
   1ac94:	701a      	strb	r2, [r3, #0]
    bleMenuCb.menuId = BLE_MENU_ID_MAIN;
   1ac96:	4b06      	ldr	r3, [pc, #24]	; (1acb0 <BleMenuInit+0x24>)
   1ac98:	2200      	movs	r2, #0
   1ac9a:	705a      	strb	r2, [r3, #1]
    bleMenuCb.gapMenuSelected = GAP_MENU_ID_NONE;
   1ac9c:	4b04      	ldr	r3, [pc, #16]	; (1acb0 <BleMenuInit+0x24>)
   1ac9e:	2200      	movs	r2, #0
   1aca0:	709a      	strb	r2, [r3, #2]
    bleMenuCb.gattMenuSelected = GATT_MENU_ID_NONE;
   1aca2:	4b03      	ldr	r3, [pc, #12]	; (1acb0 <BleMenuInit+0x24>)
   1aca4:	2200      	movs	r2, #0
   1aca6:	70da      	strb	r2, [r3, #3]
    BleMenuShowMenu();
   1aca8:	f7ff ffcc 	bl	1ac44 <BleMenuShowMenu>
}
   1acac:	bf00      	nop
   1acae:	bd80      	pop	{r7, pc}
   1acb0:	1000b18c 	.word	0x1000b18c

0001acb4 <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   1acb4:	b580      	push	{r7, lr}
   1acb6:	b084      	sub	sp, #16
   1acb8:	af02      	add	r7, sp, #8
   1acba:	4603      	mov	r3, r0
   1acbc:	6039      	str	r1, [r7, #0]
   1acbe:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   1acc0:	79f8      	ldrb	r0, [r7, #7]
   1acc2:	683b      	ldr	r3, [r7, #0]
   1acc4:	9301      	str	r3, [sp, #4]
   1acc6:	4b05      	ldr	r3, [pc, #20]	; (1acdc <GattDiscover+0x28>)
   1acc8:	9300      	str	r3, [sp, #0]
   1acca:	2302      	movs	r3, #2
   1accc:	4a04      	ldr	r2, [pc, #16]	; (1ace0 <GattDiscover+0x2c>)
   1acce:	2102      	movs	r1, #2
   1acd0:	f002 fa08 	bl	1d0e4 <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   1acd4:	bf00      	nop
   1acd6:	3708      	adds	r7, #8
   1acd8:	46bd      	mov	sp, r7
   1acda:	bd80      	pop	{r7, pc}
   1acdc:	10002e88 	.word	0x10002e88
   1ace0:	00025014 	.word	0x00025014

0001ace4 <__NVIC_EnableIRQ>:
{
   1ace4:	b480      	push	{r7}
   1ace6:	b083      	sub	sp, #12
   1ace8:	af00      	add	r7, sp, #0
   1acea:	4603      	mov	r3, r0
   1acec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1acee:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1acf2:	2b00      	cmp	r3, #0
   1acf4:	db0b      	blt.n	1ad0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1acf6:	4909      	ldr	r1, [pc, #36]	; (1ad1c <__NVIC_EnableIRQ+0x38>)
   1acf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1acfc:	095b      	lsrs	r3, r3, #5
   1acfe:	79fa      	ldrb	r2, [r7, #7]
   1ad00:	f002 021f 	and.w	r2, r2, #31
   1ad04:	2001      	movs	r0, #1
   1ad06:	fa00 f202 	lsl.w	r2, r0, r2
   1ad0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1ad0e:	bf00      	nop
   1ad10:	370c      	adds	r7, #12
   1ad12:	46bd      	mov	sp, r7
   1ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad18:	4770      	bx	lr
   1ad1a:	bf00      	nop
   1ad1c:	e000e100 	.word	0xe000e100

0001ad20 <__NVIC_SetPriority>:
{
   1ad20:	b480      	push	{r7}
   1ad22:	b083      	sub	sp, #12
   1ad24:	af00      	add	r7, sp, #0
   1ad26:	4603      	mov	r3, r0
   1ad28:	6039      	str	r1, [r7, #0]
   1ad2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1ad2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1ad30:	2b00      	cmp	r3, #0
   1ad32:	db0a      	blt.n	1ad4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ad34:	490d      	ldr	r1, [pc, #52]	; (1ad6c <__NVIC_SetPriority+0x4c>)
   1ad36:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1ad3a:	683a      	ldr	r2, [r7, #0]
   1ad3c:	b2d2      	uxtb	r2, r2
   1ad3e:	0152      	lsls	r2, r2, #5
   1ad40:	b2d2      	uxtb	r2, r2
   1ad42:	440b      	add	r3, r1
   1ad44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1ad48:	e00a      	b.n	1ad60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ad4a:	4909      	ldr	r1, [pc, #36]	; (1ad70 <__NVIC_SetPriority+0x50>)
   1ad4c:	79fb      	ldrb	r3, [r7, #7]
   1ad4e:	f003 030f 	and.w	r3, r3, #15
   1ad52:	3b04      	subs	r3, #4
   1ad54:	683a      	ldr	r2, [r7, #0]
   1ad56:	b2d2      	uxtb	r2, r2
   1ad58:	0152      	lsls	r2, r2, #5
   1ad5a:	b2d2      	uxtb	r2, r2
   1ad5c:	440b      	add	r3, r1
   1ad5e:	761a      	strb	r2, [r3, #24]
}
   1ad60:	bf00      	nop
   1ad62:	370c      	adds	r7, #12
   1ad64:	46bd      	mov	sp, r7
   1ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad6a:	4770      	bx	lr
   1ad6c:	e000e100 	.word	0xe000e100
   1ad70:	e000ed00 	.word	0xe000ed00

0001ad74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ad74:	b480      	push	{r7}
   1ad76:	b085      	sub	sp, #20
   1ad78:	af00      	add	r7, sp, #0
   1ad7a:	60f8      	str	r0, [r7, #12]
   1ad7c:	60b9      	str	r1, [r7, #8]
   1ad7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   1ad80:	68fb      	ldr	r3, [r7, #12]
   1ad82:	3b04      	subs	r3, #4
   1ad84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ad86:	68fb      	ldr	r3, [r7, #12]
   1ad88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1ad8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ad8e:	68fb      	ldr	r3, [r7, #12]
   1ad90:	3b04      	subs	r3, #4
   1ad92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   1ad94:	68bb      	ldr	r3, [r7, #8]
   1ad96:	f023 0201 	bic.w	r2, r3, #1
   1ad9a:	68fb      	ldr	r3, [r7, #12]
   1ad9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ad9e:	68fb      	ldr	r3, [r7, #12]
   1ada0:	3b04      	subs	r3, #4
   1ada2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ada4:	4a0c      	ldr	r2, [pc, #48]	; (1add8 <pxPortInitialiseStack+0x64>)
   1ada6:	68fb      	ldr	r3, [r7, #12]
   1ada8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1adaa:	68fb      	ldr	r3, [r7, #12]
   1adac:	3b14      	subs	r3, #20
   1adae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1adb0:	687a      	ldr	r2, [r7, #4]
   1adb2:	68fb      	ldr	r3, [r7, #12]
   1adb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   1adb6:	68fb      	ldr	r3, [r7, #12]
   1adb8:	3b04      	subs	r3, #4
   1adba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   1adbc:	68fb      	ldr	r3, [r7, #12]
   1adbe:	f06f 0202 	mvn.w	r2, #2
   1adc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   1adc4:	68fb      	ldr	r3, [r7, #12]
   1adc6:	3b20      	subs	r3, #32
   1adc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1adca:	68fb      	ldr	r3, [r7, #12]
}
   1adcc:	4618      	mov	r0, r3
   1adce:	3714      	adds	r7, #20
   1add0:	46bd      	mov	sp, r7
   1add2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1add6:	4770      	bx	lr
   1add8:	0001addd 	.word	0x0001addd

0001addc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1addc:	b480      	push	{r7}
   1adde:	b083      	sub	sp, #12
   1ade0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
   1ade2:	2300      	movs	r3, #0
   1ade4:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ade6:	4b0c      	ldr	r3, [pc, #48]	; (1ae18 <prvTaskExitError+0x3c>)
   1ade8:	681b      	ldr	r3, [r3, #0]
   1adea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1adee:	d000      	beq.n	1adf2 <prvTaskExitError+0x16>
   1adf0:	e7fe      	b.n	1adf0 <prvTaskExitError+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   1adf2:	f04f 0380 	mov.w	r3, #128	; 0x80
   1adf6:	f383 8811 	msr	BASEPRI, r3
   1adfa:	f3bf 8f6f 	isb	sy
   1adfe:	f3bf 8f4f 	dsb	sy
   1ae02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   1ae04:	bf00      	nop
   1ae06:	683b      	ldr	r3, [r7, #0]
   1ae08:	2b00      	cmp	r3, #0
   1ae0a:	d0fc      	beq.n	1ae06 <prvTaskExitError+0x2a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ae0c:	bf00      	nop
   1ae0e:	370c      	adds	r7, #12
   1ae10:	46bd      	mov	sp, r7
   1ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ae16:	4770      	bx	lr
   1ae18:	10002e90 	.word	0x10002e90
   1ae1c:	00000000 	.word	0x00000000

0001ae20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   1ae20:	4b07      	ldr	r3, [pc, #28]	; (1ae40 <pxCurrentTCBConst2>)
   1ae22:	6819      	ldr	r1, [r3, #0]
   1ae24:	6808      	ldr	r0, [r1, #0]
   1ae26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae2a:	f380 8809 	msr	PSP, r0
   1ae2e:	f3bf 8f6f 	isb	sy
   1ae32:	f04f 0000 	mov.w	r0, #0
   1ae36:	f380 8811 	msr	BASEPRI, r0
   1ae3a:	4770      	bx	lr
   1ae3c:	f3af 8000 	nop.w

0001ae40 <pxCurrentTCBConst2>:
   1ae40:	10009460 	.word	0x10009460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   1ae44:	bf00      	nop
   1ae46:	bf00      	nop

0001ae48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   1ae48:	4808      	ldr	r0, [pc, #32]	; (1ae6c <prvPortStartFirstTask+0x24>)
   1ae4a:	6800      	ldr	r0, [r0, #0]
   1ae4c:	6800      	ldr	r0, [r0, #0]
   1ae4e:	f380 8808 	msr	MSP, r0
   1ae52:	f04f 0000 	mov.w	r0, #0
   1ae56:	f380 8814 	msr	CONTROL, r0
   1ae5a:	b662      	cpsie	i
   1ae5c:	b661      	cpsie	f
   1ae5e:	f3bf 8f4f 	dsb	sy
   1ae62:	f3bf 8f6f 	isb	sy
   1ae66:	df00      	svc	0
   1ae68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   1ae6a:	bf00      	nop
   1ae6c:	e000ed08 	.word	0xe000ed08

0001ae70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1ae70:	b580      	push	{r7, lr}
   1ae72:	b084      	sub	sp, #16
   1ae74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   1ae76:	4b37      	ldr	r3, [pc, #220]	; (1af54 <xPortStartScheduler+0xe4>)
   1ae78:	681b      	ldr	r3, [r3, #0]
   1ae7a:	4a37      	ldr	r2, [pc, #220]	; (1af58 <xPortStartScheduler+0xe8>)
   1ae7c:	4293      	cmp	r3, r2
   1ae7e:	d100      	bne.n	1ae82 <xPortStartScheduler+0x12>
   1ae80:	e7fe      	b.n	1ae80 <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   1ae82:	4b34      	ldr	r3, [pc, #208]	; (1af54 <xPortStartScheduler+0xe4>)
   1ae84:	681b      	ldr	r3, [r3, #0]
   1ae86:	4a35      	ldr	r2, [pc, #212]	; (1af5c <xPortStartScheduler+0xec>)
   1ae88:	4293      	cmp	r3, r2
   1ae8a:	d100      	bne.n	1ae8e <xPortStartScheduler+0x1e>
   1ae8c:	e7fe      	b.n	1ae8c <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   1ae8e:	4b34      	ldr	r3, [pc, #208]	; (1af60 <xPortStartScheduler+0xf0>)
   1ae90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1ae92:	68fb      	ldr	r3, [r7, #12]
   1ae94:	781b      	ldrb	r3, [r3, #0]
   1ae96:	b2db      	uxtb	r3, r3
   1ae98:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   1ae9a:	68fb      	ldr	r3, [r7, #12]
   1ae9c:	22ff      	movs	r2, #255	; 0xff
   1ae9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   1aea0:	68fb      	ldr	r3, [r7, #12]
   1aea2:	781b      	ldrb	r3, [r3, #0]
   1aea4:	b2db      	uxtb	r3, r3
   1aea6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   1aea8:	79fb      	ldrb	r3, [r7, #7]
   1aeaa:	b2db      	uxtb	r3, r3
   1aeac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1aeb0:	b2da      	uxtb	r2, r3
   1aeb2:	4b2c      	ldr	r3, [pc, #176]	; (1af64 <xPortStartScheduler+0xf4>)
   1aeb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   1aeb6:	4b2c      	ldr	r3, [pc, #176]	; (1af68 <xPortStartScheduler+0xf8>)
   1aeb8:	2207      	movs	r2, #7
   1aeba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1aebc:	e009      	b.n	1aed2 <xPortStartScheduler+0x62>
		{
			ulMaxPRIGROUPValue--;
   1aebe:	4b2a      	ldr	r3, [pc, #168]	; (1af68 <xPortStartScheduler+0xf8>)
   1aec0:	681b      	ldr	r3, [r3, #0]
   1aec2:	3b01      	subs	r3, #1
   1aec4:	4a28      	ldr	r2, [pc, #160]	; (1af68 <xPortStartScheduler+0xf8>)
   1aec6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   1aec8:	79fb      	ldrb	r3, [r7, #7]
   1aeca:	b2db      	uxtb	r3, r3
   1aecc:	005b      	lsls	r3, r3, #1
   1aece:	b2db      	uxtb	r3, r3
   1aed0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1aed2:	79fb      	ldrb	r3, [r7, #7]
   1aed4:	b2db      	uxtb	r3, r3
   1aed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1aeda:	2b80      	cmp	r3, #128	; 0x80
   1aedc:	d0ef      	beq.n	1aebe <xPortStartScheduler+0x4e>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   1aede:	4b22      	ldr	r3, [pc, #136]	; (1af68 <xPortStartScheduler+0xf8>)
   1aee0:	681b      	ldr	r3, [r3, #0]
   1aee2:	f1c3 0307 	rsb	r3, r3, #7
   1aee6:	2b03      	cmp	r3, #3
   1aee8:	d000      	beq.n	1aeec <xPortStartScheduler+0x7c>
   1aeea:	e7fe      	b.n	1aeea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   1aeec:	4b1e      	ldr	r3, [pc, #120]	; (1af68 <xPortStartScheduler+0xf8>)
   1aeee:	681b      	ldr	r3, [r3, #0]
   1aef0:	021b      	lsls	r3, r3, #8
   1aef2:	4a1d      	ldr	r2, [pc, #116]	; (1af68 <xPortStartScheduler+0xf8>)
   1aef4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1aef6:	4b1c      	ldr	r3, [pc, #112]	; (1af68 <xPortStartScheduler+0xf8>)
   1aef8:	681b      	ldr	r3, [r3, #0]
   1aefa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1aefe:	4a1a      	ldr	r2, [pc, #104]	; (1af68 <xPortStartScheduler+0xf8>)
   1af00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1af02:	68bb      	ldr	r3, [r7, #8]
   1af04:	b2da      	uxtb	r2, r3
   1af06:	68fb      	ldr	r3, [r7, #12]
   1af08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   1af0a:	4a18      	ldr	r2, [pc, #96]	; (1af6c <xPortStartScheduler+0xfc>)
   1af0c:	4b17      	ldr	r3, [pc, #92]	; (1af6c <xPortStartScheduler+0xfc>)
   1af0e:	681b      	ldr	r3, [r3, #0]
   1af10:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   1af14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   1af16:	4a15      	ldr	r2, [pc, #84]	; (1af6c <xPortStartScheduler+0xfc>)
   1af18:	4b14      	ldr	r3, [pc, #80]	; (1af6c <xPortStartScheduler+0xfc>)
   1af1a:	681b      	ldr	r3, [r3, #0]
   1af1c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   1af20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   1af22:	f000 f9df 	bl	1b2e4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1af26:	4b12      	ldr	r3, [pc, #72]	; (1af70 <xPortStartScheduler+0x100>)
   1af28:	2200      	movs	r2, #0
   1af2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   1af2c:	f000 f8bc 	bl	1b0a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   1af30:	4a10      	ldr	r2, [pc, #64]	; (1af74 <xPortStartScheduler+0x104>)
   1af32:	4b10      	ldr	r3, [pc, #64]	; (1af74 <xPortStartScheduler+0x104>)
   1af34:	681b      	ldr	r3, [r3, #0]
   1af36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1af3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   1af3c:	f7ff ff84 	bl	1ae48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1af40:	f004 fb68 	bl	1f614 <vTaskSwitchContext>
	prvTaskExitError();
   1af44:	f7ff ff4a 	bl	1addc <prvTaskExitError>

	/* Should not get here! */
	return 0;
   1af48:	2300      	movs	r3, #0
}
   1af4a:	4618      	mov	r0, r3
   1af4c:	3710      	adds	r7, #16
   1af4e:	46bd      	mov	sp, r7
   1af50:	bd80      	pop	{r7, pc}
   1af52:	bf00      	nop
   1af54:	e000ed00 	.word	0xe000ed00
   1af58:	410fc271 	.word	0x410fc271
   1af5c:	410fc270 	.word	0x410fc270
   1af60:	e000e400 	.word	0xe000e400
   1af64:	100052a4 	.word	0x100052a4
   1af68:	100052a8 	.word	0x100052a8
   1af6c:	e000ed20 	.word	0xe000ed20
   1af70:	10002e90 	.word	0x10002e90
   1af74:	e000ef34 	.word	0xe000ef34

0001af78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1af78:	b480      	push	{r7}
   1af7a:	b083      	sub	sp, #12
   1af7c:	af00      	add	r7, sp, #0
   1af7e:	f04f 0380 	mov.w	r3, #128	; 0x80
   1af82:	f383 8811 	msr	BASEPRI, r3
   1af86:	f3bf 8f6f 	isb	sy
   1af8a:	f3bf 8f4f 	dsb	sy
   1af8e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   1af90:	4b0a      	ldr	r3, [pc, #40]	; (1afbc <vPortEnterCritical+0x44>)
   1af92:	681b      	ldr	r3, [r3, #0]
   1af94:	3301      	adds	r3, #1
   1af96:	4a09      	ldr	r2, [pc, #36]	; (1afbc <vPortEnterCritical+0x44>)
   1af98:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   1af9a:	4b08      	ldr	r3, [pc, #32]	; (1afbc <vPortEnterCritical+0x44>)
   1af9c:	681b      	ldr	r3, [r3, #0]
   1af9e:	2b01      	cmp	r3, #1
   1afa0:	d105      	bne.n	1afae <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   1afa2:	4b07      	ldr	r3, [pc, #28]	; (1afc0 <vPortEnterCritical+0x48>)
   1afa4:	681b      	ldr	r3, [r3, #0]
   1afa6:	b2db      	uxtb	r3, r3
   1afa8:	2b00      	cmp	r3, #0
   1afaa:	d000      	beq.n	1afae <vPortEnterCritical+0x36>
   1afac:	e7fe      	b.n	1afac <vPortEnterCritical+0x34>
	}
}
   1afae:	bf00      	nop
   1afb0:	370c      	adds	r7, #12
   1afb2:	46bd      	mov	sp, r7
   1afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1afb8:	4770      	bx	lr
   1afba:	bf00      	nop
   1afbc:	10002e90 	.word	0x10002e90
   1afc0:	e000ed04 	.word	0xe000ed04

0001afc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1afc4:	b480      	push	{r7}
   1afc6:	b083      	sub	sp, #12
   1afc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1afca:	4b0c      	ldr	r3, [pc, #48]	; (1affc <vPortExitCritical+0x38>)
   1afcc:	681b      	ldr	r3, [r3, #0]
   1afce:	2b00      	cmp	r3, #0
   1afd0:	d100      	bne.n	1afd4 <vPortExitCritical+0x10>
   1afd2:	e7fe      	b.n	1afd2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
   1afd4:	4b09      	ldr	r3, [pc, #36]	; (1affc <vPortExitCritical+0x38>)
   1afd6:	681b      	ldr	r3, [r3, #0]
   1afd8:	3b01      	subs	r3, #1
   1afda:	4a08      	ldr	r2, [pc, #32]	; (1affc <vPortExitCritical+0x38>)
   1afdc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   1afde:	4b07      	ldr	r3, [pc, #28]	; (1affc <vPortExitCritical+0x38>)
   1afe0:	681b      	ldr	r3, [r3, #0]
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	d104      	bne.n	1aff0 <vPortExitCritical+0x2c>
   1afe6:	2300      	movs	r3, #0
   1afe8:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   1afea:	687b      	ldr	r3, [r7, #4]
   1afec:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   1aff0:	bf00      	nop
   1aff2:	370c      	adds	r7, #12
   1aff4:	46bd      	mov	sp, r7
   1aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1affa:	4770      	bx	lr
   1affc:	10002e90 	.word	0x10002e90

0001b000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1b000:	f3ef 8009 	mrs	r0, PSP
   1b004:	f3bf 8f6f 	isb	sy
   1b008:	4b15      	ldr	r3, [pc, #84]	; (1b060 <pxCurrentTCBConst>)
   1b00a:	681a      	ldr	r2, [r3, #0]
   1b00c:	f01e 0f10 	tst.w	lr, #16
   1b010:	bf08      	it	eq
   1b012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   1b016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b01a:	6010      	str	r0, [r2, #0]
   1b01c:	e92d 0009 	stmdb	sp!, {r0, r3}
   1b020:	f04f 0080 	mov.w	r0, #128	; 0x80
   1b024:	f380 8811 	msr	BASEPRI, r0
   1b028:	f3bf 8f4f 	dsb	sy
   1b02c:	f3bf 8f6f 	isb	sy
   1b030:	f004 faf0 	bl	1f614 <vTaskSwitchContext>
   1b034:	f04f 0000 	mov.w	r0, #0
   1b038:	f380 8811 	msr	BASEPRI, r0
   1b03c:	bc09      	pop	{r0, r3}
   1b03e:	6819      	ldr	r1, [r3, #0]
   1b040:	6808      	ldr	r0, [r1, #0]
   1b042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b046:	f01e 0f10 	tst.w	lr, #16
   1b04a:	bf08      	it	eq
   1b04c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   1b050:	f380 8809 	msr	PSP, r0
   1b054:	f3bf 8f6f 	isb	sy
   1b058:	4770      	bx	lr
   1b05a:	bf00      	nop
   1b05c:	f3af 8000 	nop.w

0001b060 <pxCurrentTCBConst>:
   1b060:	10009460 	.word	0x10009460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   1b064:	bf00      	nop
   1b066:	bf00      	nop

0001b068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1b068:	b580      	push	{r7, lr}
   1b06a:	b082      	sub	sp, #8
   1b06c:	af00      	add	r7, sp, #0
	__asm volatile
   1b06e:	f04f 0380 	mov.w	r3, #128	; 0x80
   1b072:	f383 8811 	msr	BASEPRI, r3
   1b076:	f3bf 8f6f 	isb	sy
   1b07a:	f3bf 8f4f 	dsb	sy
   1b07e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1b080:	f004 fa28 	bl	1f4d4 <xTaskIncrementTick>
   1b084:	4603      	mov	r3, r0
   1b086:	2b00      	cmp	r3, #0
   1b088:	d003      	beq.n	1b092 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1b08a:	4b06      	ldr	r3, [pc, #24]	; (1b0a4 <SysTick_Handler+0x3c>)
   1b08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b090:	601a      	str	r2, [r3, #0]
   1b092:	2300      	movs	r3, #0
   1b094:	603b      	str	r3, [r7, #0]
	__asm volatile
   1b096:	683b      	ldr	r3, [r7, #0]
   1b098:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   1b09c:	bf00      	nop
   1b09e:	3708      	adds	r7, #8
   1b0a0:	46bd      	mov	sp, r7
   1b0a2:	bd80      	pop	{r7, pc}
   1b0a4:	e000ed04 	.word	0xe000ed04

0001b0a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   1b0a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1b0b8 <vPortEnableVFP+0x10>
   1b0ac:	6801      	ldr	r1, [r0, #0]
   1b0ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b0b2:	6001      	str	r1, [r0, #0]
   1b0b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   1b0b6:	bf00      	nop
   1b0b8:	e000ed88 	.word	0xe000ed88

0001b0bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   1b0bc:	b480      	push	{r7}
   1b0be:	b083      	sub	sp, #12
   1b0c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1b0c2:	f3ef 8305 	mrs	r3, IPSR
   1b0c6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   1b0c8:	687b      	ldr	r3, [r7, #4]
   1b0ca:	2b0f      	cmp	r3, #15
   1b0cc:	d90a      	bls.n	1b0e4 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   1b0ce:	4a0d      	ldr	r2, [pc, #52]	; (1b104 <vPortValidateInterruptPriority+0x48>)
   1b0d0:	687b      	ldr	r3, [r7, #4]
   1b0d2:	4413      	add	r3, r2
   1b0d4:	781b      	ldrb	r3, [r3, #0]
   1b0d6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1b0d8:	4b0b      	ldr	r3, [pc, #44]	; (1b108 <vPortValidateInterruptPriority+0x4c>)
   1b0da:	781b      	ldrb	r3, [r3, #0]
   1b0dc:	78fa      	ldrb	r2, [r7, #3]
   1b0de:	429a      	cmp	r2, r3
   1b0e0:	d200      	bcs.n	1b0e4 <vPortValidateInterruptPriority+0x28>
   1b0e2:	e7fe      	b.n	1b0e2 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   1b0e4:	4b09      	ldr	r3, [pc, #36]	; (1b10c <vPortValidateInterruptPriority+0x50>)
   1b0e6:	681b      	ldr	r3, [r3, #0]
   1b0e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   1b0ec:	4b08      	ldr	r3, [pc, #32]	; (1b110 <vPortValidateInterruptPriority+0x54>)
   1b0ee:	681b      	ldr	r3, [r3, #0]
   1b0f0:	429a      	cmp	r2, r3
   1b0f2:	d900      	bls.n	1b0f6 <vPortValidateInterruptPriority+0x3a>
   1b0f4:	e7fe      	b.n	1b0f4 <vPortValidateInterruptPriority+0x38>
	}
   1b0f6:	bf00      	nop
   1b0f8:	370c      	adds	r7, #12
   1b0fa:	46bd      	mov	sp, r7
   1b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b100:	4770      	bx	lr
   1b102:	bf00      	nop
   1b104:	e000e3f0 	.word	0xe000e3f0
   1b108:	100052a4 	.word	0x100052a4
   1b10c:	e000ed0c 	.word	0xe000ed0c
   1b110:	100052a8 	.word	0x100052a8

0001b114 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   1b114:	b580      	push	{r7, lr}
   1b116:	b088      	sub	sp, #32
   1b118:	af00      	add	r7, sp, #0
   1b11a:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   1b11c:	4b36      	ldr	r3, [pc, #216]	; (1b1f8 <vPortSuppressTicksAndSleep+0xe4>)
   1b11e:	681b      	ldr	r3, [r3, #0]
   1b120:	687a      	ldr	r2, [r7, #4]
   1b122:	429a      	cmp	r2, r3
   1b124:	d902      	bls.n	1b12c <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   1b126:	4b34      	ldr	r3, [pc, #208]	; (1b1f8 <vPortSuppressTicksAndSleep+0xe4>)
   1b128:	681b      	ldr	r3, [r3, #0]
   1b12a:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1b12c:	687b      	ldr	r3, [r7, #4]
   1b12e:	3b01      	subs	r3, #1
   1b130:	4a32      	ldr	r2, [pc, #200]	; (1b1fc <vPortSuppressTicksAndSleep+0xe8>)
   1b132:	6812      	ldr	r2, [r2, #0]
   1b134:	fb02 f303 	mul.w	r3, r2, r3
   1b138:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   1b13a:	b672      	cpsid	i
	__asm volatile( "dsb" );
   1b13c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1b140:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
   1b144:	f008 fbe8 	bl	23918 <am_hal_stimer_counter_get>
   1b148:	4602      	mov	r2, r0
   1b14a:	4b2d      	ldr	r3, [pc, #180]	; (1b200 <vPortSuppressTicksAndSleep+0xec>)
   1b14c:	681b      	ldr	r3, [r3, #0]
   1b14e:	1ad3      	subs	r3, r2, r3
   1b150:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   1b152:	f004 fc8b 	bl	1fa6c <eTaskConfirmSleepModeStatus>
   1b156:	4603      	mov	r3, r0
   1b158:	2b00      	cmp	r3, #0
   1b15a:	d006      	beq.n	1b16a <vPortSuppressTicksAndSleep+0x56>
   1b15c:	4b27      	ldr	r3, [pc, #156]	; (1b1fc <vPortSuppressTicksAndSleep+0xe8>)
   1b15e:	681a      	ldr	r2, [r3, #0]
   1b160:	69bb      	ldr	r3, [r7, #24]
   1b162:	441a      	add	r2, r3
   1b164:	69fb      	ldr	r3, [r7, #28]
   1b166:	429a      	cmp	r2, r3
   1b168:	d901      	bls.n	1b16e <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1b16a:	b662      	cpsie	i
   1b16c:	e03f      	b.n	1b1ee <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   1b16e:	69fa      	ldr	r2, [r7, #28]
   1b170:	69bb      	ldr	r3, [r7, #24]
   1b172:	1ad3      	subs	r3, r2, r3
   1b174:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   1b176:	69f9      	ldr	r1, [r7, #28]
   1b178:	2000      	movs	r0, #0
   1b17a:	f008 fbd3 	bl	23924 <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   1b17e:	687b      	ldr	r3, [r7, #4]
   1b180:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   1b182:	6978      	ldr	r0, [r7, #20]
   1b184:	f7f8 f9bf 	bl	13506 <am_freertos_sleep>
   1b188:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
   1b18a:	697b      	ldr	r3, [r7, #20]
   1b18c:	2b00      	cmp	r3, #0
   1b18e:	d004      	beq.n	1b19a <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
   1b190:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   1b194:	bf30      	wfi
			__asm volatile( "isb" );
   1b196:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   1b19a:	6878      	ldr	r0, [r7, #4]
   1b19c:	f7f8 f9bf 	bl	1351e <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   1b1a0:	f008 fbba 	bl	23918 <am_hal_stimer_counter_get>
   1b1a4:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   1b1a6:	693b      	ldr	r3, [r7, #16]
   1b1a8:	4a15      	ldr	r2, [pc, #84]	; (1b200 <vPortSuppressTicksAndSleep+0xec>)
   1b1aa:	6812      	ldr	r2, [r2, #0]
   1b1ac:	1a9b      	subs	r3, r3, r2
   1b1ae:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1b1b0:	4b12      	ldr	r3, [pc, #72]	; (1b1fc <vPortSuppressTicksAndSleep+0xe8>)
   1b1b2:	681a      	ldr	r2, [r3, #0]
   1b1b4:	68fb      	ldr	r3, [r7, #12]
   1b1b6:	fbb3 f1f2 	udiv	r1, r3, r2
   1b1ba:	fb02 f201 	mul.w	r2, r2, r1
   1b1be:	1a9b      	subs	r3, r3, r2
   1b1c0:	693a      	ldr	r2, [r7, #16]
   1b1c2:	1ad3      	subs	r3, r2, r3
   1b1c4:	4a0e      	ldr	r2, [pc, #56]	; (1b200 <vPortSuppressTicksAndSleep+0xec>)
   1b1c6:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   1b1c8:	4b0c      	ldr	r3, [pc, #48]	; (1b1fc <vPortSuppressTicksAndSleep+0xe8>)
   1b1ca:	681b      	ldr	r3, [r3, #0]
   1b1cc:	68fa      	ldr	r2, [r7, #12]
   1b1ce:	fbb2 f3f3 	udiv	r3, r2, r3
   1b1d2:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   1b1d4:	68f8      	ldr	r0, [r7, #12]
   1b1d6:	f004 f95f 	bl	1f498 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1b1da:	2001      	movs	r0, #1
   1b1dc:	f008 fc00 	bl	239e0 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1b1e0:	4b06      	ldr	r3, [pc, #24]	; (1b1fc <vPortSuppressTicksAndSleep+0xe8>)
   1b1e2:	681b      	ldr	r3, [r3, #0]
   1b1e4:	4619      	mov	r1, r3
   1b1e6:	2000      	movs	r0, #0
   1b1e8:	f008 fb9c 	bl	23924 <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1b1ec:	b662      	cpsie	i

	}
}
   1b1ee:	bf00      	nop
   1b1f0:	3720      	adds	r7, #32
   1b1f2:	46bd      	mov	sp, r7
   1b1f4:	bd80      	pop	{r7, pc}
   1b1f6:	bf00      	nop
   1b1f8:	100052b0 	.word	0x100052b0
   1b1fc:	100052ac 	.word	0x100052ac
   1b200:	100052a0 	.word	0x100052a0

0001b204 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
   1b204:	b580      	push	{r7, lr}
   1b206:	b088      	sub	sp, #32
   1b208:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
   1b20a:	2300      	movs	r3, #0
   1b20c:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   1b20e:	2300      	movs	r3, #0
   1b210:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
   1b212:	f008 fb81 	bl	23918 <am_hal_stimer_counter_get>
   1b216:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1b218:	4b24      	ldr	r3, [pc, #144]	; (1b2ac <xPortStimerTickHandler+0xa8>)
   1b21a:	681b      	ldr	r3, [r3, #0]
   1b21c:	4619      	mov	r1, r3
   1b21e:	2000      	movs	r0, #0
   1b220:	f008 fb80 	bl	23924 <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
   1b224:	4b22      	ldr	r3, [pc, #136]	; (1b2b0 <xPortStimerTickHandler+0xac>)
   1b226:	681b      	ldr	r3, [r3, #0]
   1b228:	693a      	ldr	r2, [r7, #16]
   1b22a:	1ad3      	subs	r3, r2, r3
   1b22c:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1b22e:	4b1f      	ldr	r3, [pc, #124]	; (1b2ac <xPortStimerTickHandler+0xa8>)
   1b230:	681b      	ldr	r3, [r3, #0]
   1b232:	68fa      	ldr	r2, [r7, #12]
   1b234:	fbb2 f3f3 	udiv	r3, r2, r3
   1b238:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
   1b23a:	4b1c      	ldr	r3, [pc, #112]	; (1b2ac <xPortStimerTickHandler+0xa8>)
   1b23c:	681a      	ldr	r2, [r3, #0]
   1b23e:	68fb      	ldr	r3, [r7, #12]
   1b240:	fbb3 f1f2 	udiv	r1, r3, r2
   1b244:	fb02 f201 	mul.w	r2, r2, r1
   1b248:	1a9b      	subs	r3, r3, r2
   1b24a:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
   1b24c:	693a      	ldr	r2, [r7, #16]
   1b24e:	697b      	ldr	r3, [r7, #20]
   1b250:	1ad3      	subs	r3, r2, r3
   1b252:	4a17      	ldr	r2, [pc, #92]	; (1b2b0 <xPortStimerTickHandler+0xac>)
   1b254:	6013      	str	r3, [r2, #0]
	__asm volatile
   1b256:	f3ef 8211 	mrs	r2, BASEPRI
   1b25a:	f04f 0380 	mov.w	r3, #128	; 0x80
   1b25e:	f383 8811 	msr	BASEPRI, r3
   1b262:	f3bf 8f6f 	isb	sy
   1b266:	f3bf 8f4f 	dsb	sy
   1b26a:	60ba      	str	r2, [r7, #8]
   1b26c:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   1b26e:	e008      	b.n	1b282 <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   1b270:	f004 f930 	bl	1f4d4 <xTaskIncrementTick>
   1b274:	4603      	mov	r3, r0
   1b276:	2b00      	cmp	r3, #0
   1b278:	d101      	bne.n	1b27e <xPortStimerTickHandler+0x7a>
   1b27a:	69bb      	ldr	r3, [r7, #24]
   1b27c:	e000      	b.n	1b280 <xPortStimerTickHandler+0x7c>
   1b27e:	2301      	movs	r3, #1
   1b280:	61bb      	str	r3, [r7, #24]
        while (numTicksElapsed--)
   1b282:	69fb      	ldr	r3, [r7, #28]
   1b284:	1e5a      	subs	r2, r3, #1
   1b286:	61fa      	str	r2, [r7, #28]
   1b288:	2b00      	cmp	r3, #0
   1b28a:	d1f1      	bne.n	1b270 <xPortStimerTickHandler+0x6c>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   1b28c:	69bb      	ldr	r3, [r7, #24]
   1b28e:	2b00      	cmp	r3, #0
   1b290:	d003      	beq.n	1b29a <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1b292:	4b08      	ldr	r3, [pc, #32]	; (1b2b4 <xPortStimerTickHandler+0xb0>)
   1b294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b298:	601a      	str	r2, [r3, #0]
   1b29a:	2300      	movs	r3, #0
   1b29c:	603b      	str	r3, [r7, #0]
	__asm volatile
   1b29e:	683b      	ldr	r3, [r7, #0]
   1b2a0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   1b2a4:	bf00      	nop
   1b2a6:	3720      	adds	r7, #32
   1b2a8:	46bd      	mov	sp, r7
   1b2aa:	bd80      	pop	{r7, pc}
   1b2ac:	100052ac 	.word	0x100052ac
   1b2b0:	100052a0 	.word	0x100052a0
   1b2b4:	e000ed04 	.word	0xe000ed04

0001b2b8 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   1b2b8:	b580      	push	{r7, lr}
   1b2ba:	b082      	sub	sp, #8
   1b2bc:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1b2be:	2000      	movs	r0, #0
   1b2c0:	f008 fb94 	bl	239ec <am_hal_stimer_int_status_get>
   1b2c4:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   1b2c6:	687b      	ldr	r3, [r7, #4]
   1b2c8:	f003 0301 	and.w	r3, r3, #1
   1b2cc:	2b00      	cmp	r3, #0
   1b2ce:	d004      	beq.n	1b2da <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1b2d0:	2001      	movs	r0, #1
   1b2d2:	f008 fb85 	bl	239e0 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
   1b2d6:	f7ff ff95 	bl	1b204 <xPortStimerTickHandler>
    }
}
   1b2da:	bf00      	nop
   1b2dc:	3708      	adds	r7, #8
   1b2de:	46bd      	mov	sp, r7
   1b2e0:	bd80      	pop	{r7, pc}
	...

0001b2e4 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   1b2e4:	b580      	push	{r7, lr}
   1b2e6:	b082      	sub	sp, #8
   1b2e8:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1b2ea:	4b19      	ldr	r3, [pc, #100]	; (1b350 <vPortSetupTimerInterrupt+0x6c>)
   1b2ec:	2220      	movs	r2, #32
   1b2ee:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
   1b2f0:	4b17      	ldr	r3, [pc, #92]	; (1b350 <vPortSetupTimerInterrupt+0x6c>)
   1b2f2:	681b      	ldr	r3, [r3, #0]
   1b2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b2f8:	fbb2 f3f3 	udiv	r3, r2, r3
   1b2fc:	4a15      	ldr	r2, [pc, #84]	; (1b354 <vPortSetupTimerInterrupt+0x70>)
   1b2fe:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   1b300:	2001      	movs	r0, #1
   1b302:	f008 fb63 	bl	239cc <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   1b306:	2107      	movs	r1, #7
   1b308:	2017      	movs	r0, #23
   1b30a:	f7ff fd09 	bl	1ad20 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   1b30e:	2017      	movs	r0, #23
   1b310:	f7ff fce8 	bl	1ace4 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   1b314:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1b318:	f008 faf4 	bl	23904 <am_hal_stimer_config>
   1b31c:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1b31e:	f008 fafb 	bl	23918 <am_hal_stimer_counter_get>
   1b322:	4602      	mov	r2, r0
   1b324:	4b0c      	ldr	r3, [pc, #48]	; (1b358 <vPortSetupTimerInterrupt+0x74>)
   1b326:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1b328:	4b09      	ldr	r3, [pc, #36]	; (1b350 <vPortSetupTimerInterrupt+0x6c>)
   1b32a:	681b      	ldr	r3, [r3, #0]
   1b32c:	4619      	mov	r1, r3
   1b32e:	2000      	movs	r0, #0
   1b330:	f008 faf8 	bl	23924 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
   1b334:	687a      	ldr	r2, [r7, #4]
   1b336:	4b09      	ldr	r3, [pc, #36]	; (1b35c <vPortSetupTimerInterrupt+0x78>)
   1b338:	4013      	ands	r3, r2
   1b33a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   1b33e:	f043 0301 	orr.w	r3, r3, #1
   1b342:	4618      	mov	r0, r3
   1b344:	f008 fade 	bl	23904 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   1b348:	bf00      	nop
   1b34a:	3708      	adds	r7, #8
   1b34c:	46bd      	mov	sp, r7
   1b34e:	bd80      	pop	{r7, pc}
   1b350:	100052ac 	.word	0x100052ac
   1b354:	100052b0 	.word	0x100052b0
   1b358:	100052a0 	.word	0x100052a0
   1b35c:	7ffffef0 	.word	0x7ffffef0

0001b360 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   1b360:	b480      	push	{r7}
   1b362:	b083      	sub	sp, #12
   1b364:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
   1b366:	4b0e      	ldr	r3, [pc, #56]	; (1b3a0 <getNextToken+0x40>)
   1b368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b36c:	1c5a      	adds	r2, r3, #1
   1b36e:	b2d1      	uxtb	r1, r2
   1b370:	4a0b      	ldr	r2, [pc, #44]	; (1b3a0 <getNextToken+0x40>)
   1b372:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1b376:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
   1b378:	79fb      	ldrb	r3, [r7, #7]
   1b37a:	2bff      	cmp	r3, #255	; 0xff
   1b37c:	d108      	bne.n	1b390 <getNextToken+0x30>
  {
    token = secCb.token++;
   1b37e:	4b08      	ldr	r3, [pc, #32]	; (1b3a0 <getNextToken+0x40>)
   1b380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b384:	1c5a      	adds	r2, r3, #1
   1b386:	b2d1      	uxtb	r1, r2
   1b388:	4a05      	ldr	r2, [pc, #20]	; (1b3a0 <getNextToken+0x40>)
   1b38a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1b38e:	71fb      	strb	r3, [r7, #7]
  }

  return token;
   1b390:	79fb      	ldrb	r3, [r7, #7]
}
   1b392:	4618      	mov	r0, r3
   1b394:	370c      	adds	r7, #12
   1b396:	46bd      	mov	sp, r7
   1b398:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b39c:	4770      	bx	lr
   1b39e:	bf00      	nop
   1b3a0:	1000b190 	.word	0x1000b190

0001b3a4 <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1b3a4:	b580      	push	{r7, lr}
   1b3a6:	b086      	sub	sp, #24
   1b3a8:	af00      	add	r7, sp, #0
   1b3aa:	60f8      	str	r0, [r7, #12]
   1b3ac:	60b9      	str	r1, [r7, #8]
   1b3ae:	4611      	mov	r1, r2
   1b3b0:	461a      	mov	r2, r3
   1b3b2:	460b      	mov	r3, r1
   1b3b4:	71fb      	strb	r3, [r7, #7]
   1b3b6:	4613      	mov	r3, r2
   1b3b8:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   1b3ba:	2030      	movs	r0, #48	; 0x30
   1b3bc:	f7f9 f919 	bl	145f2 <WsfMsgAlloc>
   1b3c0:	6178      	str	r0, [r7, #20]
   1b3c2:	697b      	ldr	r3, [r7, #20]
   1b3c4:	2b00      	cmp	r3, #0
   1b3c6:	d01d      	beq.n	1b404 <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
   1b3c8:	f7ff ffca 	bl	1b360 <getNextToken>
   1b3cc:	4603      	mov	r3, r0
   1b3ce:	461a      	mov	r2, r3
   1b3d0:	697b      	ldr	r3, [r7, #20]
   1b3d2:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   1b3d4:	697b      	ldr	r3, [r7, #20]
   1b3d6:	88ba      	ldrh	r2, [r7, #4]
   1b3d8:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1b3da:	697b      	ldr	r3, [r7, #20]
   1b3dc:	f897 2020 	ldrb.w	r2, [r7, #32]
   1b3e0:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
   1b3e2:	697b      	ldr	r3, [r7, #20]
   1b3e4:	2200      	movs	r2, #0
   1b3e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1b3ea:	79fb      	ldrb	r3, [r7, #7]
   1b3ec:	697a      	ldr	r2, [r7, #20]
   1b3ee:	4619      	mov	r1, r3
   1b3f0:	4807      	ldr	r0, [pc, #28]	; (1b410 <SecAes+0x6c>)
   1b3f2:	f7f9 f93a 	bl	1466a <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   1b3f6:	68b9      	ldr	r1, [r7, #8]
   1b3f8:	68f8      	ldr	r0, [r7, #12]
   1b3fa:	f7fb feda 	bl	171b2 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   1b3fe:	697b      	ldr	r3, [r7, #20]
   1b400:	78db      	ldrb	r3, [r3, #3]
   1b402:	e000      	b.n	1b406 <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
   1b404:	23ff      	movs	r3, #255	; 0xff
}
   1b406:	4618      	mov	r0, r3
   1b408:	3718      	adds	r7, #24
   1b40a:	46bd      	mov	sp, r7
   1b40c:	bd80      	pop	{r7, pc}
   1b40e:	bf00      	nop
   1b410:	1000b1b0 	.word	0x1000b1b0

0001b414 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1b414:	b580      	push	{r7, lr}
   1b416:	b086      	sub	sp, #24
   1b418:	af00      	add	r7, sp, #0
   1b41a:	60f8      	str	r0, [r7, #12]
   1b41c:	60b9      	str	r1, [r7, #8]
   1b41e:	4613      	mov	r3, r2
   1b420:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   1b422:	68fb      	ldr	r3, [r7, #12]
   1b424:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   1b426:	68fb      	ldr	r3, [r7, #12]
   1b428:	f103 0208 	add.w	r2, r3, #8
   1b42c:	697b      	ldr	r3, [r7, #20]
   1b42e:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   1b430:	697b      	ldr	r3, [r7, #20]
   1b432:	685a      	ldr	r2, [r3, #4]
   1b434:	68bb      	ldr	r3, [r7, #8]
   1b436:	3305      	adds	r3, #5
   1b438:	4619      	mov	r1, r3
   1b43a:	4610      	mov	r0, r2
   1b43c:	f7f8 fc77 	bl	13d2e <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   1b440:	79fb      	ldrb	r3, [r7, #7]
   1b442:	6979      	ldr	r1, [r7, #20]
   1b444:	4618      	mov	r0, r3
   1b446:	f7f9 f8f8 	bl	1463a <WsfMsgSend>
}
   1b44a:	bf00      	nop
   1b44c:	3718      	adds	r7, #24
   1b44e:	46bd      	mov	sp, r7
   1b450:	bd80      	pop	{r7, pc}
	...

0001b454 <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
   1b454:	b480      	push	{r7}
   1b456:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   1b458:	4b03      	ldr	r3, [pc, #12]	; (1b468 <SecAesInit+0x14>)
   1b45a:	4a04      	ldr	r2, [pc, #16]	; (1b46c <SecAesInit+0x18>)
   1b45c:	62da      	str	r2, [r3, #44]	; 0x2c
}
   1b45e:	bf00      	nop
   1b460:	46bd      	mov	sp, r7
   1b462:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b466:	4770      	bx	lr
   1b468:	1000b190 	.word	0x1000b190
   1b46c:	0001b415 	.word	0x0001b415

0001b470 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   1b470:	b580      	push	{r7, lr}
   1b472:	b08a      	sub	sp, #40	; 0x28
   1b474:	af00      	add	r7, sp, #0
   1b476:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1b478:	687b      	ldr	r3, [r7, #4]
   1b47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b47c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   1b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b480:	681b      	ldr	r3, [r3, #0]
   1b482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b484:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   1b486:	4413      	add	r3, r2
   1b488:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
   1b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b48c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1b48e:	b2da      	uxtb	r2, r3
   1b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b492:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1b494:	b2db      	uxtb	r3, r3
   1b496:	1ad3      	subs	r3, r2, r3
   1b498:	b2db      	uxtb	r3, r3
   1b49a:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   1b49c:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b4a0:	2b10      	cmp	r3, #16
   1b4a2:	dc2d      	bgt.n	1b500 <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   1b4a4:	f107 030c 	add.w	r3, r7, #12
   1b4a8:	2210      	movs	r2, #16
   1b4aa:	6a39      	ldr	r1, [r7, #32]
   1b4ac:	4618      	mov	r0, r3
   1b4ae:	f7f8 fca5 	bl	13dfc <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   1b4b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b4b6:	2b10      	cmp	r3, #16
   1b4b8:	d014      	beq.n	1b4e4 <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
   1b4ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b4be:	f1c3 0310 	rsb	r3, r3, #16
   1b4c2:	461a      	mov	r2, r3
   1b4c4:	f107 030c 	add.w	r3, r7, #12
   1b4c8:	2100      	movs	r1, #0
   1b4ca:	4618      	mov	r0, r3
   1b4cc:	f7f0 ff46 	bl	c35c <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
   1b4d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b4d4:	f1c3 030f 	rsb	r3, r3, #15
   1b4d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b4dc:	4413      	add	r3, r2
   1b4de:	2280      	movs	r2, #128	; 0x80
   1b4e0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
   1b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b4e6:	f103 0214 	add.w	r2, r3, #20
   1b4ea:	f107 030c 	add.w	r3, r7, #12
   1b4ee:	4611      	mov	r1, r2
   1b4f0:	4618      	mov	r0, r3
   1b4f2:	f7f8 fc38 	bl	13d66 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   1b4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b4f8:	2202      	movs	r2, #2
   1b4fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   1b4fe:	e006      	b.n	1b50e <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   1b500:	f107 030c 	add.w	r3, r7, #12
   1b504:	2210      	movs	r2, #16
   1b506:	6a39      	ldr	r1, [r7, #32]
   1b508:	4618      	mov	r0, r3
   1b50a:	f7f8 fc77 	bl	13dfc <WStrReverseCpy>
  }

  if (pCmac->position != 0)
   1b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b510:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1b512:	2b00      	cmp	r3, #0
   1b514:	d008      	beq.n	1b528 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
   1b516:	687b      	ldr	r3, [r7, #4]
   1b518:	f103 0208 	add.w	r2, r3, #8
   1b51c:	f107 030c 	add.w	r3, r7, #12
   1b520:	4611      	mov	r1, r2
   1b522:	4618      	mov	r0, r3
   1b524:	f7f8 fc1f 	bl	13d66 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   1b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b52a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1b52c:	3310      	adds	r3, #16
   1b52e:	b29a      	uxth	r2, r3
   1b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b532:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   1b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b53a:	687a      	ldr	r2, [r7, #4]
   1b53c:	4619      	mov	r1, r3
   1b53e:	4807      	ldr	r0, [pc, #28]	; (1b55c <secCmacProcessBlock+0xec>)
   1b540:	f7f9 f893 	bl	1466a <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   1b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b546:	3304      	adds	r3, #4
   1b548:	f107 020c 	add.w	r2, r7, #12
   1b54c:	4611      	mov	r1, r2
   1b54e:	4618      	mov	r0, r3
   1b550:	f7fb fe2f 	bl	171b2 <HciLeEncryptCmd>
}
   1b554:	bf00      	nop
   1b556:	3728      	adds	r7, #40	; 0x28
   1b558:	46bd      	mov	sp, r7
   1b55a:	bd80      	pop	{r7, pc}
   1b55c:	1000b1b0 	.word	0x1000b1b0

0001b560 <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   1b560:	b580      	push	{r7, lr}
   1b562:	b088      	sub	sp, #32
   1b564:	af00      	add	r7, sp, #0
   1b566:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1b568:	687b      	ldr	r3, [r7, #4]
   1b56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b56c:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   1b56e:	f107 030c 	add.w	r3, r7, #12
   1b572:	2210      	movs	r2, #16
   1b574:	2100      	movs	r1, #0
   1b576:	4618      	mov	r0, r3
   1b578:	f7f0 fef0 	bl	c35c <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   1b57c:	69fb      	ldr	r3, [r7, #28]
   1b57e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b582:	687a      	ldr	r2, [r7, #4]
   1b584:	4619      	mov	r1, r3
   1b586:	4807      	ldr	r0, [pc, #28]	; (1b5a4 <secCmacGenSubkey1+0x44>)
   1b588:	f7f9 f86f 	bl	1466a <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   1b58c:	69fb      	ldr	r3, [r7, #28]
   1b58e:	3304      	adds	r3, #4
   1b590:	f107 020c 	add.w	r2, r7, #12
   1b594:	4611      	mov	r1, r2
   1b596:	4618      	mov	r0, r3
   1b598:	f7fb fe0b 	bl	171b2 <HciLeEncryptCmd>
}
   1b59c:	bf00      	nop
   1b59e:	3720      	adds	r7, #32
   1b5a0:	46bd      	mov	sp, r7
   1b5a2:	bd80      	pop	{r7, pc}
   1b5a4:	1000b1b0 	.word	0x1000b1b0

0001b5a8 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   1b5a8:	b480      	push	{r7}
   1b5aa:	b085      	sub	sp, #20
   1b5ac:	af00      	add	r7, sp, #0
   1b5ae:	6078      	str	r0, [r7, #4]
   1b5b0:	460b      	mov	r3, r1
   1b5b2:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
   1b5b4:	2300      	movs	r3, #0
   1b5b6:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   1b5b8:	2300      	movs	r3, #0
   1b5ba:	73fb      	strb	r3, [r7, #15]
   1b5bc:	e021      	b.n	1b602 <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
   1b5be:	7bfb      	ldrb	r3, [r7, #15]
   1b5c0:	687a      	ldr	r2, [r7, #4]
   1b5c2:	4413      	add	r3, r2
   1b5c4:	781b      	ldrb	r3, [r3, #0]
   1b5c6:	461a      	mov	r2, r3
   1b5c8:	78fb      	ldrb	r3, [r7, #3]
   1b5ca:	f1c3 0308 	rsb	r3, r3, #8
   1b5ce:	fa42 f303 	asr.w	r3, r2, r3
   1b5d2:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
   1b5d4:	7bfb      	ldrb	r3, [r7, #15]
   1b5d6:	687a      	ldr	r2, [r7, #4]
   1b5d8:	4413      	add	r3, r2
   1b5da:	7bfa      	ldrb	r2, [r7, #15]
   1b5dc:	6879      	ldr	r1, [r7, #4]
   1b5de:	440a      	add	r2, r1
   1b5e0:	7812      	ldrb	r2, [r2, #0]
   1b5e2:	4611      	mov	r1, r2
   1b5e4:	78fa      	ldrb	r2, [r7, #3]
   1b5e6:	fa01 f202 	lsl.w	r2, r1, r2
   1b5ea:	b251      	sxtb	r1, r2
   1b5ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
   1b5f0:	430a      	orrs	r2, r1
   1b5f2:	b252      	sxtb	r2, r2
   1b5f4:	b2d2      	uxtb	r2, r2
   1b5f6:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
   1b5f8:	7b7b      	ldrb	r3, [r7, #13]
   1b5fa:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   1b5fc:	7bfb      	ldrb	r3, [r7, #15]
   1b5fe:	3301      	adds	r3, #1
   1b600:	73fb      	strb	r3, [r7, #15]
   1b602:	7bfb      	ldrb	r3, [r7, #15]
   1b604:	2b0f      	cmp	r3, #15
   1b606:	d9da      	bls.n	1b5be <secCmacKeyShift+0x16>
  }

  return prevBits;
   1b608:	7bbb      	ldrb	r3, [r7, #14]
}
   1b60a:	4618      	mov	r0, r3
   1b60c:	3714      	adds	r7, #20
   1b60e:	46bd      	mov	sp, r7
   1b610:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b614:	4770      	bx	lr

0001b616 <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   1b616:	b580      	push	{r7, lr}
   1b618:	b084      	sub	sp, #16
   1b61a:	af00      	add	r7, sp, #0
   1b61c:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1b61e:	687b      	ldr	r3, [r7, #4]
   1b620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b622:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   1b624:	68fb      	ldr	r3, [r7, #12]
   1b626:	f103 0214 	add.w	r2, r3, #20
   1b62a:	687b      	ldr	r3, [r7, #4]
   1b62c:	3308      	adds	r3, #8
   1b62e:	4619      	mov	r1, r3
   1b630:	4610      	mov	r0, r2
   1b632:	f7f8 fb7c 	bl	13d2e <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   1b636:	68fb      	ldr	r3, [r7, #12]
   1b638:	3314      	adds	r3, #20
   1b63a:	2101      	movs	r1, #1
   1b63c:	4618      	mov	r0, r3
   1b63e:	f7ff ffb3 	bl	1b5a8 <secCmacKeyShift>
   1b642:	4603      	mov	r3, r0
   1b644:	72fb      	strb	r3, [r7, #11]

  if (overflow)
   1b646:	7afb      	ldrb	r3, [r7, #11]
   1b648:	2b00      	cmp	r3, #0
   1b64a:	d007      	beq.n	1b65c <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
   1b64c:	68fb      	ldr	r3, [r7, #12]
   1b64e:	7d1b      	ldrb	r3, [r3, #20]
   1b650:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   1b654:	43db      	mvns	r3, r3
   1b656:	b2da      	uxtb	r2, r3
   1b658:	68fb      	ldr	r3, [r7, #12]
   1b65a:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   1b65c:	68fb      	ldr	r3, [r7, #12]
   1b65e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1b660:	f003 030f 	and.w	r3, r3, #15
   1b664:	b29b      	uxth	r3, r3
   1b666:	2b00      	cmp	r3, #0
   1b668:	d012      	beq.n	1b690 <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   1b66a:	68fb      	ldr	r3, [r7, #12]
   1b66c:	3314      	adds	r3, #20
   1b66e:	2101      	movs	r1, #1
   1b670:	4618      	mov	r0, r3
   1b672:	f7ff ff99 	bl	1b5a8 <secCmacKeyShift>
   1b676:	4603      	mov	r3, r0
   1b678:	72fb      	strb	r3, [r7, #11]

    if (overflow)
   1b67a:	7afb      	ldrb	r3, [r7, #11]
   1b67c:	2b00      	cmp	r3, #0
   1b67e:	d007      	beq.n	1b690 <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
   1b680:	68fb      	ldr	r3, [r7, #12]
   1b682:	7d1b      	ldrb	r3, [r3, #20]
   1b684:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   1b688:	43db      	mvns	r3, r3
   1b68a:	b2da      	uxtb	r2, r3
   1b68c:	68fb      	ldr	r3, [r7, #12]
   1b68e:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   1b690:	68fb      	ldr	r3, [r7, #12]
   1b692:	2201      	movs	r2, #1
   1b694:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   1b698:	6878      	ldr	r0, [r7, #4]
   1b69a:	f7ff fee9 	bl	1b470 <secCmacProcessBlock>
}
   1b69e:	bf00      	nop
   1b6a0:	3710      	adds	r7, #16
   1b6a2:	46bd      	mov	sp, r7
   1b6a4:	bd80      	pop	{r7, pc}

0001b6a6 <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   1b6a6:	b580      	push	{r7, lr}
   1b6a8:	b084      	sub	sp, #16
   1b6aa:	af00      	add	r7, sp, #0
   1b6ac:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   1b6ae:	687b      	ldr	r3, [r7, #4]
   1b6b0:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1b6b2:	687b      	ldr	r3, [r7, #4]
   1b6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b6b6:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
   1b6b8:	687b      	ldr	r3, [r7, #4]
   1b6ba:	3308      	adds	r3, #8
   1b6bc:	2110      	movs	r1, #16
   1b6be:	4618      	mov	r0, r3
   1b6c0:	f7f8 fbc5 	bl	13e4e <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
   1b6c4:	687b      	ldr	r3, [r7, #4]
   1b6c6:	f103 0208 	add.w	r2, r3, #8
   1b6ca:	68fb      	ldr	r3, [r7, #12]
   1b6cc:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
   1b6ce:	68bb      	ldr	r3, [r7, #8]
   1b6d0:	681b      	ldr	r3, [r3, #0]
   1b6d2:	4618      	mov	r0, r3
   1b6d4:	f7f8 ff3e 	bl	14554 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
   1b6d8:	68bb      	ldr	r3, [r7, #8]
   1b6da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b6de:	68f9      	ldr	r1, [r7, #12]
   1b6e0:	4618      	mov	r0, r3
   1b6e2:	f7f8 ffaa 	bl	1463a <WsfMsgSend>
}
   1b6e6:	bf00      	nop
   1b6e8:	3710      	adds	r7, #16
   1b6ea:	46bd      	mov	sp, r7
   1b6ec:	bd80      	pop	{r7, pc}

0001b6ee <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1b6ee:	b580      	push	{r7, lr}
   1b6f0:	b086      	sub	sp, #24
   1b6f2:	af00      	add	r7, sp, #0
   1b6f4:	60f8      	str	r0, [r7, #12]
   1b6f6:	60b9      	str	r1, [r7, #8]
   1b6f8:	4613      	mov	r3, r2
   1b6fa:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   1b6fc:	68fb      	ldr	r3, [r7, #12]
   1b6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b700:	617b      	str	r3, [r7, #20]

  if (pCmac)
   1b702:	697b      	ldr	r3, [r7, #20]
   1b704:	2b00      	cmp	r3, #0
   1b706:	d01e      	beq.n	1b746 <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   1b708:	68fb      	ldr	r3, [r7, #12]
   1b70a:	f103 0208 	add.w	r2, r3, #8
   1b70e:	68bb      	ldr	r3, [r7, #8]
   1b710:	3305      	adds	r3, #5
   1b712:	4619      	mov	r1, r3
   1b714:	4610      	mov	r0, r2
   1b716:	f7f8 fb0a 	bl	13d2e <Calc128Cpy>

    switch (pCmac->state)
   1b71a:	697b      	ldr	r3, [r7, #20]
   1b71c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1b720:	2b01      	cmp	r3, #1
   1b722:	d008      	beq.n	1b736 <SecCmacHciCback+0x48>
   1b724:	2b02      	cmp	r3, #2
   1b726:	d00a      	beq.n	1b73e <SecCmacHciCback+0x50>
   1b728:	2b00      	cmp	r3, #0
   1b72a:	d000      	beq.n	1b72e <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   1b72c:	e00b      	b.n	1b746 <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
   1b72e:	68f8      	ldr	r0, [r7, #12]
   1b730:	f7ff ff71 	bl	1b616 <secCmacGenSubkey2>
      break;
   1b734:	e007      	b.n	1b746 <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
   1b736:	68f8      	ldr	r0, [r7, #12]
   1b738:	f7ff fe9a 	bl	1b470 <secCmacProcessBlock>
      break;
   1b73c:	e003      	b.n	1b746 <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
   1b73e:	68f8      	ldr	r0, [r7, #12]
   1b740:	f7ff ffb1 	bl	1b6a6 <secCmacComplete>
      break;
   1b744:	bf00      	nop
}
   1b746:	bf00      	nop
   1b748:	3718      	adds	r7, #24
   1b74a:	46bd      	mov	sp, r7
   1b74c:	bd80      	pop	{r7, pc}
	...

0001b750 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1b750:	b580      	push	{r7, lr}
   1b752:	b088      	sub	sp, #32
   1b754:	af00      	add	r7, sp, #0
   1b756:	60f8      	str	r0, [r7, #12]
   1b758:	60b9      	str	r1, [r7, #8]
   1b75a:	4611      	mov	r1, r2
   1b75c:	461a      	mov	r2, r3
   1b75e:	460b      	mov	r3, r1
   1b760:	71fb      	strb	r3, [r7, #7]
   1b762:	4613      	mov	r3, r2
   1b764:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   1b766:	235c      	movs	r3, #92	; 0x5c
   1b768:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1b76a:	8bfb      	ldrh	r3, [r7, #30]
   1b76c:	4618      	mov	r0, r3
   1b76e:	f7f8 ff40 	bl	145f2 <WsfMsgAlloc>
   1b772:	61b8      	str	r0, [r7, #24]
   1b774:	69bb      	ldr	r3, [r7, #24]
   1b776:	2b00      	cmp	r3, #0
   1b778:	d038      	beq.n	1b7ec <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   1b77a:	69bb      	ldr	r3, [r7, #24]
   1b77c:	3330      	adds	r3, #48	; 0x30
   1b77e:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   1b780:	69bb      	ldr	r3, [r7, #24]
   1b782:	697a      	ldr	r2, [r7, #20]
   1b784:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
   1b786:	69bb      	ldr	r3, [r7, #24]
   1b788:	2201      	movs	r2, #1
   1b78a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
   1b78e:	4b1a      	ldr	r3, [pc, #104]	; (1b7f8 <SecCmac+0xa8>)
   1b790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b794:	1c5a      	adds	r2, r3, #1
   1b796:	b2d1      	uxtb	r1, r2
   1b798:	4a17      	ldr	r2, [pc, #92]	; (1b7f8 <SecCmac+0xa8>)
   1b79a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1b79e:	69ba      	ldr	r2, [r7, #24]
   1b7a0:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   1b7a2:	69bb      	ldr	r3, [r7, #24]
   1b7a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   1b7a6:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1b7a8:	69bb      	ldr	r3, [r7, #24]
   1b7aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1b7ae:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   1b7b0:	697b      	ldr	r3, [r7, #20]
   1b7b2:	68ba      	ldr	r2, [r7, #8]
   1b7b4:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   1b7b6:	79fb      	ldrb	r3, [r7, #7]
   1b7b8:	b29a      	uxth	r2, r3
   1b7ba:	697b      	ldr	r3, [r7, #20]
   1b7bc:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   1b7be:	697b      	ldr	r3, [r7, #20]
   1b7c0:	2200      	movs	r2, #0
   1b7c2:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   1b7c4:	697b      	ldr	r3, [r7, #20]
   1b7c6:	79ba      	ldrb	r2, [r7, #6]
   1b7c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   1b7cc:	697b      	ldr	r3, [r7, #20]
   1b7ce:	2200      	movs	r2, #0
   1b7d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
   1b7d4:	697b      	ldr	r3, [r7, #20]
   1b7d6:	3304      	adds	r3, #4
   1b7d8:	2210      	movs	r2, #16
   1b7da:	68f9      	ldr	r1, [r7, #12]
   1b7dc:	4618      	mov	r0, r3
   1b7de:	f7f8 fb0d 	bl	13dfc <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   1b7e2:	69b8      	ldr	r0, [r7, #24]
   1b7e4:	f7ff febc 	bl	1b560 <secCmacGenSubkey1>

    return TRUE;
   1b7e8:	2301      	movs	r3, #1
   1b7ea:	e000      	b.n	1b7ee <SecCmac+0x9e>
  }

  return FALSE;
   1b7ec:	2300      	movs	r3, #0
}
   1b7ee:	4618      	mov	r0, r3
   1b7f0:	3720      	adds	r7, #32
   1b7f2:	46bd      	mov	sp, r7
   1b7f4:	bd80      	pop	{r7, pc}
   1b7f6:	bf00      	nop
   1b7f8:	1000b190 	.word	0x1000b190

0001b7fc <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
   1b7fc:	b480      	push	{r7}
   1b7fe:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   1b800:	4b03      	ldr	r3, [pc, #12]	; (1b810 <SecCmacInit+0x14>)
   1b802:	4a04      	ldr	r2, [pc, #16]	; (1b814 <SecCmacInit+0x18>)
   1b804:	631a      	str	r2, [r3, #48]	; 0x30
}
   1b806:	bf00      	nop
   1b808:	46bd      	mov	sp, r7
   1b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b80e:	4770      	bx	lr
   1b810:	1000b190 	.word	0x1000b190
   1b814:	0001b6ef 	.word	0x0001b6ef

0001b818 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1b818:	b580      	push	{r7, lr}
   1b81a:	b086      	sub	sp, #24
   1b81c:	af00      	add	r7, sp, #0
   1b81e:	60f8      	str	r0, [r7, #12]
   1b820:	60b9      	str	r1, [r7, #8]
   1b822:	4613      	mov	r3, r2
   1b824:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
   1b826:	68fb      	ldr	r3, [r7, #12]
   1b828:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
   1b82a:	68bb      	ldr	r3, [r7, #8]
   1b82c:	789b      	ldrb	r3, [r3, #2]
   1b82e:	2b25      	cmp	r3, #37	; 0x25
   1b830:	d11b      	bne.n	1b86a <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
   1b832:	697b      	ldr	r3, [r7, #20]
   1b834:	1d18      	adds	r0, r3, #4
   1b836:	68bb      	ldr	r3, [r7, #8]
   1b838:	3305      	adds	r3, #5
   1b83a:	2220      	movs	r2, #32
   1b83c:	4619      	mov	r1, r3
   1b83e:	f7f8 fadd 	bl	13dfc <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
   1b842:	697b      	ldr	r3, [r7, #20]
   1b844:	f103 0024 	add.w	r0, r3, #36	; 0x24
   1b848:	68bb      	ldr	r3, [r7, #8]
   1b84a:	3305      	adds	r3, #5
   1b84c:	3320      	adds	r3, #32
   1b84e:	2220      	movs	r2, #32
   1b850:	4619      	mov	r1, r3
   1b852:	f7f8 fad3 	bl	13dfc <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
   1b856:	68bb      	ldr	r3, [r7, #8]
   1b858:	791a      	ldrb	r2, [r3, #4]
   1b85a:	697b      	ldr	r3, [r7, #20]
   1b85c:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1b85e:	79fb      	ldrb	r3, [r7, #7]
   1b860:	6979      	ldr	r1, [r7, #20]
   1b862:	4618      	mov	r0, r3
   1b864:	f7f8 fee9 	bl	1463a <WsfMsgSend>
    }
    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
   1b868:	e01f      	b.n	1b8aa <SecEccHciCback+0x92>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   1b86a:	68bb      	ldr	r3, [r7, #8]
   1b86c:	789b      	ldrb	r3, [r3, #2]
   1b86e:	2b26      	cmp	r3, #38	; 0x26
   1b870:	d11b      	bne.n	1b8aa <SecEccHciCback+0x92>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
   1b872:	697b      	ldr	r3, [r7, #20]
   1b874:	1d18      	adds	r0, r3, #4
   1b876:	68bb      	ldr	r3, [r7, #8]
   1b878:	3305      	adds	r3, #5
   1b87a:	2220      	movs	r2, #32
   1b87c:	4619      	mov	r1, r3
   1b87e:	f7f8 fabd 	bl	13dfc <WStrReverseCpy>
    if(pEvent->leGenDHKey.status != HCI_SUCCESS) {
   1b882:	68bb      	ldr	r3, [r7, #8]
   1b884:	791b      	ldrb	r3, [r3, #4]
   1b886:	2b00      	cmp	r3, #0
   1b888:	d006      	beq.n	1b898 <SecEccHciCback+0x80>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   1b88a:	697b      	ldr	r3, [r7, #20]
   1b88c:	3304      	adds	r3, #4
   1b88e:	2220      	movs	r2, #32
   1b890:	21ff      	movs	r1, #255	; 0xff
   1b892:	4618      	mov	r0, r3
   1b894:	f7f0 fd62 	bl	c35c <memset>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
   1b898:	68bb      	ldr	r3, [r7, #8]
   1b89a:	791a      	ldrb	r2, [r3, #4]
   1b89c:	697b      	ldr	r3, [r7, #20]
   1b89e:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1b8a0:	79fb      	ldrb	r3, [r7, #7]
   1b8a2:	6979      	ldr	r1, [r7, #20]
   1b8a4:	4618      	mov	r0, r3
   1b8a6:	f7f8 fec8 	bl	1463a <WsfMsgSend>
}
   1b8aa:	bf00      	nop
   1b8ac:	3718      	adds	r7, #24
   1b8ae:	46bd      	mov	sp, r7
   1b8b0:	bd80      	pop	{r7, pc}
	...

0001b8b4 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1b8b4:	b580      	push	{r7, lr}
   1b8b6:	b084      	sub	sp, #16
   1b8b8:	af00      	add	r7, sp, #0
   1b8ba:	4603      	mov	r3, r0
   1b8bc:	71fb      	strb	r3, [r7, #7]
   1b8be:	460b      	mov	r3, r1
   1b8c0:	80bb      	strh	r3, [r7, #4]
   1b8c2:	4613      	mov	r3, r2
   1b8c4:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   1b8c6:	2394      	movs	r3, #148	; 0x94
   1b8c8:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1b8ca:	89fb      	ldrh	r3, [r7, #14]
   1b8cc:	4618      	mov	r0, r3
   1b8ce:	f7f8 fe90 	bl	145f2 <WsfMsgAlloc>
   1b8d2:	60b8      	str	r0, [r7, #8]
   1b8d4:	68bb      	ldr	r3, [r7, #8]
   1b8d6:	2b00      	cmp	r3, #0
   1b8d8:	d013      	beq.n	1b902 <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   1b8da:	68bb      	ldr	r3, [r7, #8]
   1b8dc:	88ba      	ldrh	r2, [r7, #4]
   1b8de:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1b8e0:	68bb      	ldr	r3, [r7, #8]
   1b8e2:	79ba      	ldrb	r2, [r7, #6]
   1b8e4:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   1b8e6:	68bb      	ldr	r3, [r7, #8]
   1b8e8:	2202      	movs	r2, #2
   1b8ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1b8ee:	79fb      	ldrb	r3, [r7, #7]
   1b8f0:	68ba      	ldr	r2, [r7, #8]
   1b8f2:	4619      	mov	r1, r3
   1b8f4:	4805      	ldr	r0, [pc, #20]	; (1b90c <SecEccGenKey+0x58>)
   1b8f6:	f7f8 feb8 	bl	1466a <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
   1b8fa:	f7fb fc10 	bl	1711e <HciLeReadLocalP256PubKey>

    return TRUE;
   1b8fe:	2301      	movs	r3, #1
   1b900:	e000      	b.n	1b904 <SecEccGenKey+0x50>
  }

  return FALSE;
   1b902:	2300      	movs	r3, #0
}
   1b904:	4618      	mov	r0, r3
   1b906:	3710      	adds	r7, #16
   1b908:	46bd      	mov	sp, r7
   1b90a:	bd80      	pop	{r7, pc}
   1b90c:	1000b1b0 	.word	0x1000b1b0

0001b910 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1b910:	b580      	push	{r7, lr}
   1b912:	b09e      	sub	sp, #120	; 0x78
   1b914:	af00      	add	r7, sp, #0
   1b916:	6078      	str	r0, [r7, #4]
   1b918:	4608      	mov	r0, r1
   1b91a:	4611      	mov	r1, r2
   1b91c:	461a      	mov	r2, r3
   1b91e:	4603      	mov	r3, r0
   1b920:	70fb      	strb	r3, [r7, #3]
   1b922:	460b      	mov	r3, r1
   1b924:	803b      	strh	r3, [r7, #0]
   1b926:	4613      	mov	r3, r2
   1b928:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   1b92a:	2394      	movs	r3, #148	; 0x94
   1b92c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1b930:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   1b934:	4618      	mov	r0, r3
   1b936:	f7f8 fe5c 	bl	145f2 <WsfMsgAlloc>
   1b93a:	6738      	str	r0, [r7, #112]	; 0x70
   1b93c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b93e:	2b00      	cmp	r3, #0
   1b940:	d060      	beq.n	1ba04 <SecEccGenSharedSecret+0xf4>
  {
	  secEccKey_t           temp_ecc_key;

    /* Reverse keys (to little endian) */
    WStrReverseCpy(temp_ecc_key.pubKey_x, pKey->pubKey_x, SEC_ECC_KEY_LEN);
   1b942:	6879      	ldr	r1, [r7, #4]
   1b944:	f107 030c 	add.w	r3, r7, #12
   1b948:	2220      	movs	r2, #32
   1b94a:	4618      	mov	r0, r3
   1b94c:	f7f8 fa56 	bl	13dfc <WStrReverseCpy>
    WStrReverseCpy(temp_ecc_key.pubKey_y, pKey->pubKey_y, SEC_ECC_KEY_LEN);
   1b950:	687b      	ldr	r3, [r7, #4]
   1b952:	f103 0120 	add.w	r1, r3, #32
   1b956:	f107 030c 	add.w	r3, r7, #12
   1b95a:	3320      	adds	r3, #32
   1b95c:	2220      	movs	r2, #32
   1b95e:	4618      	mov	r0, r3
   1b960:	f7f8 fa4c 	bl	13dfc <WStrReverseCpy>
	
    #if defined(AM_PART_APOLLO) || defined(AM_PART_APOLLO2)
    {
    #else
    if(!APOLLO3_B0) 
   1b964:	4b2a      	ldr	r3, [pc, #168]	; (1ba10 <SecEccGenSharedSecret+0x100>)
   1b966:	68db      	ldr	r3, [r3, #12]
   1b968:	b2db      	uxtb	r3, r3
   1b96a:	2b21      	cmp	r3, #33	; 0x21
   1b96c:	d02e      	beq.n	1b9cc <SecEccGenSharedSecret+0xbc>
    {
    #endif
      // at this time only B0 has fix for the security vulnerability.
      if(!uECC_valid_public_key(temp_ecc_key.pubKey_x, uECC_secp256r1()))
   1b96e:	f005 fc97 	bl	212a0 <uECC_secp256r1>
   1b972:	4602      	mov	r2, r0
   1b974:	f107 030c 	add.w	r3, r7, #12
   1b978:	4611      	mov	r1, r2
   1b97a:	4618      	mov	r0, r3
   1b97c:	f005 fd0a 	bl	21394 <uECC_valid_public_key>
   1b980:	4603      	mov	r3, r0
   1b982:	2b00      	cmp	r3, #0
   1b984:	d122      	bne.n	1b9cc <SecEccGenSharedSecret+0xbc>
      {

        WsfMsgFree(pBuf);
   1b986:	6f38      	ldr	r0, [r7, #112]	; 0x70
   1b988:	f7f8 fe4a 	bl	14620 <WsfMsgFree>

        secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   1b98c:	2064      	movs	r0, #100	; 0x64
   1b98e:	f7f8 fe30 	bl	145f2 <WsfMsgAlloc>
   1b992:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (pMsg)
   1b994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b996:	2b00      	cmp	r3, #0
   1b998:	d016      	beq.n	1b9c8 <SecEccGenSharedSecret+0xb8>
        {
          // set invalid shared key as suggested by the security errata
          memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   1b99a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b99c:	3304      	adds	r3, #4
   1b99e:	2220      	movs	r2, #32
   1b9a0:	21ff      	movs	r1, #255	; 0xff
   1b9a2:	4618      	mov	r0, r3
   1b9a4:	f7f0 fcda 	bl	c35c <memset>
          /* Send shared secret to handler */  
          pMsg->hdr.event = event;
   1b9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b9aa:	78ba      	ldrb	r2, [r7, #2]
   1b9ac:	709a      	strb	r2, [r3, #2]
          pMsg->hdr.param = param;
   1b9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b9b0:	883a      	ldrh	r2, [r7, #0]
   1b9b2:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = HCI_SUCCESS;
   1b9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b9b6:	2200      	movs	r2, #0
   1b9b8:	70da      	strb	r2, [r3, #3]
          WsfMsgSend(handlerId, pMsg);
   1b9ba:	78fb      	ldrb	r3, [r7, #3]
   1b9bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   1b9be:	4618      	mov	r0, r3
   1b9c0:	f7f8 fe3b 	bl	1463a <WsfMsgSend>
          return TRUE;
   1b9c4:	2301      	movs	r3, #1
   1b9c6:	e01e      	b.n	1ba06 <SecEccGenSharedSecret+0xf6>
        }
        else {
          return FALSE;
   1b9c8:	2300      	movs	r3, #0
   1b9ca:	e01c      	b.n	1ba06 <SecEccGenSharedSecret+0xf6>
    // At this point either remote public key is valid or controller has
    // the fix for the security vulnerability.
    // 

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   1b9cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b9ce:	883a      	ldrh	r2, [r7, #0]
   1b9d0:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1b9d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b9d4:	78ba      	ldrb	r2, [r7, #2]
   1b9d6:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   1b9d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b9da:	2202      	movs	r2, #2
   1b9dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1b9e0:	78fb      	ldrb	r3, [r7, #3]
   1b9e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1b9e4:	4619      	mov	r1, r3
   1b9e6:	480b      	ldr	r0, [pc, #44]	; (1ba14 <SecEccGenSharedSecret+0x104>)
   1b9e8:	f7f8 fe3f 	bl	1466a <WsfMsgEnq>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(temp_ecc_key.pubKey_x, temp_ecc_key.pubKey_y);
   1b9ec:	f107 030c 	add.w	r3, r7, #12
   1b9f0:	f103 0220 	add.w	r2, r3, #32
   1b9f4:	f107 030c 	add.w	r3, r7, #12
   1b9f8:	4611      	mov	r1, r2
   1b9fa:	4618      	mov	r0, r3
   1b9fc:	f7fb fba2 	bl	17144 <HciLeGenerateDHKey>

    return TRUE;
   1ba00:	2301      	movs	r3, #1
   1ba02:	e000      	b.n	1ba06 <SecEccGenSharedSecret+0xf6>
  }

  return FALSE;
   1ba04:	2300      	movs	r3, #0
}
   1ba06:	4618      	mov	r0, r3
   1ba08:	3778      	adds	r7, #120	; 0x78
   1ba0a:	46bd      	mov	sp, r7
   1ba0c:	bd80      	pop	{r7, pc}
   1ba0e:	bf00      	nop
   1ba10:	40020000 	.word	0x40020000
   1ba14:	1000b1b0 	.word	0x1000b1b0

0001ba18 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   1ba18:	b480      	push	{r7}
   1ba1a:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
   1ba1c:	4b03      	ldr	r3, [pc, #12]	; (1ba2c <SecEccInit+0x14>)
   1ba1e:	4a04      	ldr	r2, [pc, #16]	; (1ba30 <SecEccInit+0x18>)
   1ba20:	635a      	str	r2, [r3, #52]	; 0x34
}
   1ba22:	bf00      	nop
   1ba24:	46bd      	mov	sp, r7
   1ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba2a:	4770      	bx	lr
   1ba2c:	1000b190 	.word	0x1000b190
   1ba30:	0001b819 	.word	0x0001b819

0001ba34 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   1ba34:	b580      	push	{r7, lr}
   1ba36:	b084      	sub	sp, #16
   1ba38:	af00      	add	r7, sp, #0
   1ba3a:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
   1ba3c:	2300      	movs	r3, #0
   1ba3e:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
   1ba40:	2300      	movs	r3, #0
   1ba42:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
   1ba44:	687b      	ldr	r3, [r7, #4]
   1ba46:	789b      	ldrb	r3, [r3, #2]
   1ba48:	2b1c      	cmp	r3, #28
   1ba4a:	d10c      	bne.n	1ba66 <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memmove(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
   1ba4c:	2218      	movs	r2, #24
   1ba4e:	492e      	ldr	r1, [pc, #184]	; (1bb08 <secHciCback+0xd4>)
   1ba50:	482e      	ldr	r0, [pc, #184]	; (1bb0c <secHciCback+0xd8>)
   1ba52:	f7f0 fc1f 	bl	c294 <memmove>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   1ba56:	687b      	ldr	r3, [r7, #4]
   1ba58:	3305      	adds	r3, #5
   1ba5a:	2208      	movs	r2, #8
   1ba5c:	4619      	mov	r1, r3
   1ba5e:	482a      	ldr	r0, [pc, #168]	; (1bb08 <secHciCback+0xd4>)
   1ba60:	f7f0 fb7e 	bl	c160 <memcpy>
      WsfMsgFree(pBuf);
    }  
    
    secCb.token = 0;
  }
}
   1ba64:	e04b      	b.n	1bafe <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   1ba66:	687b      	ldr	r3, [r7, #4]
   1ba68:	789b      	ldrb	r3, [r3, #2]
   1ba6a:	2b1b      	cmp	r3, #27
   1ba6c:	d007      	beq.n	1ba7e <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   1ba6e:	687b      	ldr	r3, [r7, #4]
   1ba70:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   1ba72:	2b25      	cmp	r3, #37	; 0x25
   1ba74:	d003      	beq.n	1ba7e <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   1ba76:	687b      	ldr	r3, [r7, #4]
   1ba78:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   1ba7a:	2b26      	cmp	r3, #38	; 0x26
   1ba7c:	d128      	bne.n	1bad0 <secHciCback+0x9c>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1ba7e:	f107 030b 	add.w	r3, r7, #11
   1ba82:	4619      	mov	r1, r3
   1ba84:	4822      	ldr	r0, [pc, #136]	; (1bb10 <secHciCback+0xdc>)
   1ba86:	f7f8 fe05 	bl	14694 <WsfMsgDeq>
   1ba8a:	60f8      	str	r0, [r7, #12]
   1ba8c:	68fb      	ldr	r3, [r7, #12]
   1ba8e:	2b00      	cmp	r3, #0
   1ba90:	d01a      	beq.n	1bac8 <secHciCback+0x94>
      if (secCb.hciCbackTbl[pBuf->type])
   1ba92:	68fb      	ldr	r3, [r7, #12]
   1ba94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1ba98:	4a1b      	ldr	r2, [pc, #108]	; (1bb08 <secHciCback+0xd4>)
   1ba9a:	330a      	adds	r3, #10
   1ba9c:	009b      	lsls	r3, r3, #2
   1ba9e:	4413      	add	r3, r2
   1baa0:	685b      	ldr	r3, [r3, #4]
   1baa2:	2b00      	cmp	r3, #0
   1baa4:	d00c      	beq.n	1bac0 <secHciCback+0x8c>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1baa6:	68fb      	ldr	r3, [r7, #12]
   1baa8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1baac:	4a16      	ldr	r2, [pc, #88]	; (1bb08 <secHciCback+0xd4>)
   1baae:	330a      	adds	r3, #10
   1bab0:	009b      	lsls	r3, r3, #2
   1bab2:	4413      	add	r3, r2
   1bab4:	685b      	ldr	r3, [r3, #4]
   1bab6:	7afa      	ldrb	r2, [r7, #11]
   1bab8:	6879      	ldr	r1, [r7, #4]
   1baba:	68f8      	ldr	r0, [r7, #12]
   1babc:	4798      	blx	r3
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1babe:	e01e      	b.n	1bafe <secHciCback+0xca>
        WSF_TRACE_WARN0("WSF sec not registered");
   1bac0:	4814      	ldr	r0, [pc, #80]	; (1bb14 <secHciCback+0xe0>)
   1bac2:	f7fa f849 	bl	15b58 <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1bac6:	e01a      	b.n	1bafe <secHciCback+0xca>
      WSF_TRACE_WARN0("WSF sec queue empty!");
   1bac8:	4813      	ldr	r0, [pc, #76]	; (1bb18 <secHciCback+0xe4>)
   1baca:	f7fa f845 	bl	15b58 <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1bace:	e016      	b.n	1bafe <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
   1bad0:	687b      	ldr	r3, [r7, #4]
   1bad2:	789b      	ldrb	r3, [r3, #2]
   1bad4:	2b14      	cmp	r3, #20
   1bad6:	d112      	bne.n	1bafe <secHciCback+0xca>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1bad8:	e002      	b.n	1bae0 <secHciCback+0xac>
      WsfMsgFree(pBuf);
   1bada:	68f8      	ldr	r0, [r7, #12]
   1badc:	f7f8 fda0 	bl	14620 <WsfMsgFree>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1bae0:	f107 030b 	add.w	r3, r7, #11
   1bae4:	4619      	mov	r1, r3
   1bae6:	480a      	ldr	r0, [pc, #40]	; (1bb10 <secHciCback+0xdc>)
   1bae8:	f7f8 fdd4 	bl	14694 <WsfMsgDeq>
   1baec:	60f8      	str	r0, [r7, #12]
   1baee:	68fb      	ldr	r3, [r7, #12]
   1baf0:	2b00      	cmp	r3, #0
   1baf2:	d1f2      	bne.n	1bada <secHciCback+0xa6>
    secCb.token = 0;
   1baf4:	4b04      	ldr	r3, [pc, #16]	; (1bb08 <secHciCback+0xd4>)
   1baf6:	2200      	movs	r2, #0
   1baf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
   1bafc:	e7ff      	b.n	1bafe <secHciCback+0xca>
   1bafe:	bf00      	nop
   1bb00:	3710      	adds	r7, #16
   1bb02:	46bd      	mov	sp, r7
   1bb04:	bd80      	pop	{r7, pc}
   1bb06:	bf00      	nop
   1bb08:	1000b190 	.word	0x1000b190
   1bb0c:	1000b198 	.word	0x1000b198
   1bb10:	1000b1b0 	.word	0x1000b1b0
   1bb14:	00024dc8 	.word	0x00024dc8
   1bb18:	00024de0 	.word	0x00024de0

0001bb1c <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   1bb1c:	b580      	push	{r7, lr}
   1bb1e:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
   1bb20:	4b07      	ldr	r3, [pc, #28]	; (1bb40 <SecInit+0x24>)
   1bb22:	2200      	movs	r2, #0
   1bb24:	621a      	str	r2, [r3, #32]
   1bb26:	4b06      	ldr	r3, [pc, #24]	; (1bb40 <SecInit+0x24>)
   1bb28:	2200      	movs	r2, #0
   1bb2a:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
   1bb2c:	4b04      	ldr	r3, [pc, #16]	; (1bb40 <SecInit+0x24>)
   1bb2e:	2200      	movs	r2, #0
   1bb30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   1bb34:	4803      	ldr	r0, [pc, #12]	; (1bb44 <SecInit+0x28>)
   1bb36:	f7f9 fe13 	bl	15760 <HciSecRegister>
}
   1bb3a:	bf00      	nop
   1bb3c:	bd80      	pop	{r7, pc}
   1bb3e:	bf00      	nop
   1bb40:	1000b190 	.word	0x1000b190
   1bb44:	0001ba35 	.word	0x0001ba35

0001bb48 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   1bb48:	b580      	push	{r7, lr}
   1bb4a:	b084      	sub	sp, #16
   1bb4c:	af00      	add	r7, sp, #0
   1bb4e:	6078      	str	r0, [r7, #4]
   1bb50:	460b      	mov	r3, r1
   1bb52:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   1bb54:	78fb      	ldrb	r3, [r7, #3]
   1bb56:	3307      	adds	r3, #7
   1bb58:	2b00      	cmp	r3, #0
   1bb5a:	da00      	bge.n	1bb5e <SecRand+0x16>
   1bb5c:	3307      	adds	r3, #7
   1bb5e:	10db      	asrs	r3, r3, #3
   1bb60:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
   1bb62:	78fb      	ldrb	r3, [r7, #3]
   1bb64:	461a      	mov	r2, r3
   1bb66:	4909      	ldr	r1, [pc, #36]	; (1bb8c <SecRand+0x44>)
   1bb68:	6878      	ldr	r0, [r7, #4]
   1bb6a:	f7f0 faf9 	bl	c160 <memcpy>
  
  /* get new random numbers */
  while (count--)
   1bb6e:	e001      	b.n	1bb74 <SecRand+0x2c>
  {
    HciLeRandCmd();
   1bb70:	f7fb fb96 	bl	172a0 <HciLeRandCmd>
  while (count--)
   1bb74:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1bb78:	b2da      	uxtb	r2, r3
   1bb7a:	3a01      	subs	r2, #1
   1bb7c:	b2d2      	uxtb	r2, r2
   1bb7e:	73fa      	strb	r2, [r7, #15]
   1bb80:	2b00      	cmp	r3, #0
   1bb82:	d1f5      	bne.n	1bb70 <SecRand+0x28>
  }
}
   1bb84:	bf00      	nop
   1bb86:	3710      	adds	r7, #16
   1bb88:	46bd      	mov	sp, r7
   1bb8a:	bd80      	pop	{r7, pc}
   1bb8c:	1000b190 	.word	0x1000b190

0001bb90 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1bb90:	b580      	push	{r7, lr}
   1bb92:	b088      	sub	sp, #32
   1bb94:	af00      	add	r7, sp, #0
   1bb96:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1bb98:	f107 030c 	add.w	r3, r7, #12
   1bb9c:	4618      	mov	r0, r3
   1bb9e:	f007 f9ff 	bl	22fa0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1bba2:	68fb      	ldr	r3, [r7, #12]
   1bba4:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1bba6:	69fb      	ldr	r3, [r7, #28]
   1bba8:	4a07      	ldr	r2, [pc, #28]	; (1bbc8 <am_util_delay_ms+0x38>)
   1bbaa:	fba2 2303 	umull	r2, r3, r2, r3
   1bbae:	099b      	lsrs	r3, r3, #6
   1bbb0:	687a      	ldr	r2, [r7, #4]
   1bbb2:	fb02 f303 	mul.w	r3, r2, r3
   1bbb6:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1bbb8:	69b8      	ldr	r0, [r7, #24]
   1bbba:	f007 fa4f 	bl	2305c <am_hal_flash_delay>
}
   1bbbe:	bf00      	nop
   1bbc0:	3720      	adds	r7, #32
   1bbc2:	46bd      	mov	sp, r7
   1bbc4:	bd80      	pop	{r7, pc}
   1bbc6:	bf00      	nop
   1bbc8:	057619f1 	.word	0x057619f1

0001bbcc <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1bbcc:	b580      	push	{r7, lr}
   1bbce:	b088      	sub	sp, #32
   1bbd0:	af00      	add	r7, sp, #0
   1bbd2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1bbd4:	f107 030c 	add.w	r3, r7, #12
   1bbd8:	4618      	mov	r0, r3
   1bbda:	f007 f9e1 	bl	22fa0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1bbde:	68fb      	ldr	r3, [r7, #12]
   1bbe0:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1bbe2:	69fb      	ldr	r3, [r7, #28]
   1bbe4:	4a07      	ldr	r2, [pc, #28]	; (1bc04 <am_util_delay_us+0x38>)
   1bbe6:	fba2 2303 	umull	r2, r3, r2, r3
   1bbea:	0c9b      	lsrs	r3, r3, #18
   1bbec:	687a      	ldr	r2, [r7, #4]
   1bbee:	fb02 f303 	mul.w	r3, r2, r3
   1bbf2:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1bbf4:	69b8      	ldr	r0, [r7, #24]
   1bbf6:	f007 fa31 	bl	2305c <am_hal_flash_delay>
}
   1bbfa:	bf00      	nop
   1bbfc:	3720      	adds	r7, #32
   1bbfe:	46bd      	mov	sp, r7
   1bc00:	bd80      	pop	{r7, pc}
   1bc02:	bf00      	nop
   1bc04:	165e9f81 	.word	0x165e9f81

0001bc08 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1bc08:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1bc0a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1bc0e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1bc10:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1bc14:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1bc18:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1bc1c:	f000 f80a 	bl	1bc34 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1bc20:	bd01      	pop	{r0, pc}
}
   1bc22:	bf00      	nop
   1bc24:	4618      	mov	r0, r3

0001bc26 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1bc26:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1bc28:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1bc2a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1bc2c:	4770      	bx	lr
}
   1bc2e:	bf00      	nop
   1bc30:	4618      	mov	r0, r3
	...

0001bc34 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1bc34:	b580      	push	{r7, lr}
   1bc36:	b096      	sub	sp, #88	; 0x58
   1bc38:	af00      	add	r7, sp, #0
   1bc3a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1bc3c:	f107 030c 	add.w	r3, r7, #12
   1bc40:	2200      	movs	r2, #0
   1bc42:	601a      	str	r2, [r3, #0]
   1bc44:	605a      	str	r2, [r3, #4]
   1bc46:	609a      	str	r2, [r3, #8]
   1bc48:	60da      	str	r2, [r3, #12]
   1bc4a:	611a      	str	r2, [r3, #16]
   1bc4c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   1bc4e:	2300      	movs	r3, #0
   1bc50:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1bc52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1bc54:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1bc56:	4b2e      	ldr	r3, [pc, #184]	; (1bd10 <am_util_faultisr_collect_data+0xdc>)
   1bc58:	681b      	ldr	r3, [r3, #0]
   1bc5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1bc5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1bc5e:	b2db      	uxtb	r3, r3
   1bc60:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1bc64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1bc66:	0a1b      	lsrs	r3, r3, #8
   1bc68:	b2db      	uxtb	r3, r3
   1bc6a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1bc6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1bc70:	0c1b      	lsrs	r3, r3, #16
   1bc72:	b29b      	uxth	r3, r3
   1bc74:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1bc78:	4b26      	ldr	r3, [pc, #152]	; (1bd14 <am_util_faultisr_collect_data+0xe0>)
   1bc7a:	681b      	ldr	r3, [r3, #0]
   1bc7c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1bc7e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   1bc82:	b2db      	uxtb	r3, r3
   1bc84:	f003 0302 	and.w	r3, r3, #2
   1bc88:	2b00      	cmp	r3, #0
   1bc8a:	d005      	beq.n	1bc98 <am_util_faultisr_collect_data+0x64>
   1bc8c:	6879      	ldr	r1, [r7, #4]
   1bc8e:	2006      	movs	r0, #6
   1bc90:	f7ff ffc9 	bl	1bc26 <getStackedReg>
   1bc94:	4603      	mov	r3, r0
   1bc96:	e001      	b.n	1bc9c <am_util_faultisr_collect_data+0x68>
   1bc98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bc9c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1bc9e:	6879      	ldr	r1, [r7, #4]
   1bca0:	2000      	movs	r0, #0
   1bca2:	f7ff ffc0 	bl	1bc26 <getStackedReg>
   1bca6:	4603      	mov	r3, r0
   1bca8:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1bcaa:	6879      	ldr	r1, [r7, #4]
   1bcac:	2001      	movs	r0, #1
   1bcae:	f7ff ffba 	bl	1bc26 <getStackedReg>
   1bcb2:	4603      	mov	r3, r0
   1bcb4:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1bcb6:	6879      	ldr	r1, [r7, #4]
   1bcb8:	2002      	movs	r0, #2
   1bcba:	f7ff ffb4 	bl	1bc26 <getStackedReg>
   1bcbe:	4603      	mov	r3, r0
   1bcc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1bcc2:	6879      	ldr	r1, [r7, #4]
   1bcc4:	2003      	movs	r0, #3
   1bcc6:	f7ff ffae 	bl	1bc26 <getStackedReg>
   1bcca:	4603      	mov	r3, r0
   1bccc:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1bcce:	6879      	ldr	r1, [r7, #4]
   1bcd0:	2004      	movs	r0, #4
   1bcd2:	f7ff ffa8 	bl	1bc26 <getStackedReg>
   1bcd6:	4603      	mov	r3, r0
   1bcd8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1bcda:	6879      	ldr	r1, [r7, #4]
   1bcdc:	2005      	movs	r0, #5
   1bcde:	f7ff ffa2 	bl	1bc26 <getStackedReg>
   1bce2:	4603      	mov	r3, r0
   1bce4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1bce6:	6879      	ldr	r1, [r7, #4]
   1bce8:	2006      	movs	r0, #6
   1bcea:	f7ff ff9c 	bl	1bc26 <getStackedReg>
   1bcee:	4603      	mov	r3, r0
   1bcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1bcf2:	6879      	ldr	r1, [r7, #4]
   1bcf4:	2007      	movs	r0, #7
   1bcf6:	f7ff ff96 	bl	1bc26 <getStackedReg>
   1bcfa:	4603      	mov	r3, r0
   1bcfc:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1bcfe:	f107 030c 	add.w	r3, r7, #12
   1bd02:	4619      	mov	r1, r3
   1bd04:	2002      	movs	r0, #2
   1bd06:	f007 fc11 	bl	2352c <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
   1bd0a:	2300      	movs	r3, #0
   1bd0c:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1bd0e:	e7fe      	b.n	1bd0e <am_util_faultisr_collect_data+0xda>
   1bd10:	e000ed28 	.word	0xe000ed28
   1bd14:	e000ed38 	.word	0xe000ed38

0001bd18 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   1bd18:	b480      	push	{r7}
   1bd1a:	b083      	sub	sp, #12
   1bd1c:	af00      	add	r7, sp, #0
   1bd1e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   1bd20:	4a04      	ldr	r2, [pc, #16]	; (1bd34 <am_util_stdio_printf_init+0x1c>)
   1bd22:	687b      	ldr	r3, [r7, #4]
   1bd24:	6013      	str	r3, [r2, #0]
}
   1bd26:	bf00      	nop
   1bd28:	370c      	adds	r7, #12
   1bd2a:	46bd      	mov	sp, r7
   1bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd30:	4770      	bx	lr
   1bd32:	bf00      	nop
   1bd34:	1000b1c8 	.word	0x1000b1c8

0001bd38 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   1bd38:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1bd3c:	b096      	sub	sp, #88	; 0x58
   1bd3e:	af00      	add	r7, sp, #0
   1bd40:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   1bd44:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1bd48:	0025      	movs	r5, r4
   1bd4a:	2600      	movs	r6, #0
   1bd4c:	ea55 0306 	orrs.w	r3, r5, r6
   1bd50:	f000 80a0 	beq.w	1be94 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1bd54:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1bd58:	0862      	lsrs	r2, r4, #1
   1bd5a:	ea4f 0133 	mov.w	r1, r3, rrx
   1bd5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1bd62:	ea4f 0893 	mov.w	r8, r3, lsr #2
   1bd66:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
   1bd6a:	ea4f 0994 	mov.w	r9, r4, lsr #2
   1bd6e:	eb11 0308 	adds.w	r3, r1, r8
   1bd72:	eb42 0409 	adc.w	r4, r2, r9
   1bd76:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
   1bd7a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bd7e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
   1bd82:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
   1bd86:	ea4f 1b14 	mov.w	fp, r4, lsr #4
   1bd8a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bd8e:	eb13 030a 	adds.w	r3, r3, sl
   1bd92:	eb44 040b 	adc.w	r4, r4, fp
   1bd96:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
   1bd9a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bd9e:	0a1a      	lsrs	r2, r3, #8
   1bda0:	62ba      	str	r2, [r7, #40]	; 0x28
   1bda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bda4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   1bda8:	62ba      	str	r2, [r7, #40]	; 0x28
   1bdaa:	0a23      	lsrs	r3, r4, #8
   1bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bdae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bdb2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   1bdb6:	18c9      	adds	r1, r1, r3
   1bdb8:	eb42 0204 	adc.w	r2, r2, r4
   1bdbc:	460b      	mov	r3, r1
   1bdbe:	4614      	mov	r4, r2
   1bdc0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
   1bdc4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bdc8:	0c1a      	lsrs	r2, r3, #16
   1bdca:	623a      	str	r2, [r7, #32]
   1bdcc:	6a3a      	ldr	r2, [r7, #32]
   1bdce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   1bdd2:	623a      	str	r2, [r7, #32]
   1bdd4:	0c23      	lsrs	r3, r4, #16
   1bdd6:	627b      	str	r3, [r7, #36]	; 0x24
   1bdd8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bddc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
   1bde0:	18c9      	adds	r1, r1, r3
   1bde2:	eb42 0204 	adc.w	r2, r2, r4
   1bde6:	460b      	mov	r3, r1
   1bde8:	4614      	mov	r4, r2
   1bdea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
   1bdee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bdf2:	0023      	movs	r3, r4
   1bdf4:	603b      	str	r3, [r7, #0]
   1bdf6:	2300      	movs	r3, #0
   1bdf8:	607b      	str	r3, [r7, #4]
   1bdfa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1bdfe:	e9d7 1200 	ldrd	r1, r2, [r7]
   1be02:	18c9      	adds	r1, r1, r3
   1be04:	eb42 0204 	adc.w	r2, r2, r4
   1be08:	460b      	mov	r3, r1
   1be0a:	4614      	mov	r4, r2
   1be0c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
   1be10:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1be14:	08da      	lsrs	r2, r3, #3
   1be16:	613a      	str	r2, [r7, #16]
   1be18:	693a      	ldr	r2, [r7, #16]
   1be1a:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
   1be1e:	613a      	str	r2, [r7, #16]
   1be20:	08e3      	lsrs	r3, r4, #3
   1be22:	617b      	str	r3, [r7, #20]
   1be24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   1be28:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
   1be2c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
   1be30:	460b      	mov	r3, r1
   1be32:	4614      	mov	r4, r2
   1be34:	00a0      	lsls	r0, r4, #2
   1be36:	60f8      	str	r0, [r7, #12]
   1be38:	68f8      	ldr	r0, [r7, #12]
   1be3a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   1be3e:	60f8      	str	r0, [r7, #12]
   1be40:	009b      	lsls	r3, r3, #2
   1be42:	60bb      	str	r3, [r7, #8]
   1be44:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   1be48:	185b      	adds	r3, r3, r1
   1be4a:	eb44 0402 	adc.w	r4, r4, r2
   1be4e:	18db      	adds	r3, r3, r3
   1be50:	eb44 0404 	adc.w	r4, r4, r4
   1be54:	4619      	mov	r1, r3
   1be56:	4622      	mov	r2, r4
   1be58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1be5c:	1a5b      	subs	r3, r3, r1
   1be5e:	eb64 0402 	sbc.w	r4, r4, r2
   1be62:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
   1be66:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
   1be6a:	3306      	adds	r3, #6
   1be6c:	f144 0400 	adc.w	r4, r4, #0
   1be70:	091a      	lsrs	r2, r3, #4
   1be72:	61ba      	str	r2, [r7, #24]
   1be74:	69ba      	ldr	r2, [r7, #24]
   1be76:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
   1be7a:	61ba      	str	r2, [r7, #24]
   1be7c:	0923      	lsrs	r3, r4, #4
   1be7e:	61fb      	str	r3, [r7, #28]
   1be80:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1be84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
   1be88:	18c9      	adds	r1, r1, r3
   1be8a:	eb42 0204 	adc.w	r2, r2, r4
   1be8e:	460b      	mov	r3, r1
   1be90:	4614      	mov	r4, r2
   1be92:	e029      	b.n	1bee8 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   1be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1be96:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1be98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1be9a:	085a      	lsrs	r2, r3, #1
   1be9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1be9e:	089b      	lsrs	r3, r3, #2
   1bea0:	4413      	add	r3, r2
   1bea2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
   1bea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bea6:	091b      	lsrs	r3, r3, #4
   1bea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1beaa:	4413      	add	r3, r2
   1beac:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
   1beae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1beb0:	0a1b      	lsrs	r3, r3, #8
   1beb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1beb4:	4413      	add	r3, r2
   1beb6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
   1beb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1beba:	0c1b      	lsrs	r3, r3, #16
   1bebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1bebe:	4413      	add	r3, r2
   1bec0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
   1bec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bec4:	08db      	lsrs	r3, r3, #3
   1bec6:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
   1bec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1beca:	4613      	mov	r3, r2
   1becc:	009b      	lsls	r3, r3, #2
   1bece:	4413      	add	r3, r2
   1bed0:	005b      	lsls	r3, r3, #1
   1bed2:	461a      	mov	r2, r3
   1bed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1bed6:	1a9b      	subs	r3, r3, r2
   1bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1beda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bedc:	3306      	adds	r3, #6
   1bede:	091a      	lsrs	r2, r3, #4
   1bee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bee2:	4413      	add	r3, r2
   1bee4:	f04f 0400 	mov.w	r4, #0
    }
}
   1bee8:	4618      	mov	r0, r3
   1beea:	4621      	mov	r1, r4
   1beec:	3758      	adds	r7, #88	; 0x58
   1beee:	46bd      	mov	sp, r7
   1bef0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1bef4:	4770      	bx	lr

0001bef6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   1bef6:	b590      	push	{r4, r7, lr}
   1bef8:	b085      	sub	sp, #20
   1befa:	af00      	add	r7, sp, #0
   1befc:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   1bf00:	683a      	ldr	r2, [r7, #0]
   1bf02:	687b      	ldr	r3, [r7, #4]
   1bf04:	4313      	orrs	r3, r2
   1bf06:	2b00      	cmp	r3, #0
   1bf08:	bf0c      	ite	eq
   1bf0a:	2301      	moveq	r3, #1
   1bf0c:	2300      	movne	r3, #0
   1bf0e:	b2db      	uxtb	r3, r3
   1bf10:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   1bf12:	e008      	b.n	1bf26 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   1bf14:	e9d7 0100 	ldrd	r0, r1, [r7]
   1bf18:	f7ff ff0e 	bl	1bd38 <divu64_10>
   1bf1c:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   1bf20:	68fb      	ldr	r3, [r7, #12]
   1bf22:	3301      	adds	r3, #1
   1bf24:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   1bf26:	e9d7 3400 	ldrd	r3, r4, [r7]
   1bf2a:	4323      	orrs	r3, r4
   1bf2c:	d1f2      	bne.n	1bf14 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
   1bf2e:	68fb      	ldr	r3, [r7, #12]
}
   1bf30:	4618      	mov	r0, r3
   1bf32:	3714      	adds	r7, #20
   1bf34:	46bd      	mov	sp, r7
   1bf36:	bd90      	pop	{r4, r7, pc}

0001bf38 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   1bf38:	b590      	push	{r4, r7, lr}
   1bf3a:	b083      	sub	sp, #12
   1bf3c:	af00      	add	r7, sp, #0
   1bf3e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   1bf42:	e9d7 3400 	ldrd	r3, r4, [r7]
   1bf46:	2b00      	cmp	r3, #0
   1bf48:	f174 0300 	sbcs.w	r3, r4, #0
   1bf4c:	da06      	bge.n	1bf5c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   1bf4e:	e9d7 3400 	ldrd	r3, r4, [r7]
   1bf52:	425b      	negs	r3, r3
   1bf54:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   1bf58:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   1bf5c:	e9d7 3400 	ldrd	r3, r4, [r7]
   1bf60:	4618      	mov	r0, r3
   1bf62:	4621      	mov	r1, r4
   1bf64:	f7ff ffc7 	bl	1bef6 <ndigits_in_u64>
   1bf68:	4603      	mov	r3, r0
}
   1bf6a:	4618      	mov	r0, r3
   1bf6c:	370c      	adds	r7, #12
   1bf6e:	46bd      	mov	sp, r7
   1bf70:	bd90      	pop	{r4, r7, pc}

0001bf72 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   1bf72:	b490      	push	{r4, r7}
   1bf74:	b084      	sub	sp, #16
   1bf76:	af00      	add	r7, sp, #0
   1bf78:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   1bf7c:	6839      	ldr	r1, [r7, #0]
   1bf7e:	687a      	ldr	r2, [r7, #4]
   1bf80:	430a      	orrs	r2, r1
   1bf82:	2a00      	cmp	r2, #0
   1bf84:	bf0c      	ite	eq
   1bf86:	2201      	moveq	r2, #1
   1bf88:	2200      	movne	r2, #0
   1bf8a:	b2d2      	uxtb	r2, r2
   1bf8c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
   1bf8e:	e00a      	b.n	1bfa6 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
   1bf90:	e9d7 1200 	ldrd	r1, r2, [r7]
   1bf94:	090b      	lsrs	r3, r1, #4
   1bf96:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   1bf9a:	0914      	lsrs	r4, r2, #4
   1bf9c:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
   1bfa0:	68fa      	ldr	r2, [r7, #12]
   1bfa2:	3201      	adds	r2, #1
   1bfa4:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
   1bfa6:	e9d7 1200 	ldrd	r1, r2, [r7]
   1bfaa:	430a      	orrs	r2, r1
   1bfac:	d1f0      	bne.n	1bf90 <ndigits_in_hex+0x1e>
    }

    return iDigits;
   1bfae:	68fb      	ldr	r3, [r7, #12]
}
   1bfb0:	4618      	mov	r0, r3
   1bfb2:	3710      	adds	r7, #16
   1bfb4:	46bd      	mov	sp, r7
   1bfb6:	bc90      	pop	{r4, r7}
   1bfb8:	4770      	bx	lr

0001bfba <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   1bfba:	b480      	push	{r7}
   1bfbc:	b087      	sub	sp, #28
   1bfbe:	af00      	add	r7, sp, #0
   1bfc0:	6078      	str	r0, [r7, #4]
   1bfc2:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   1bfc4:	2300      	movs	r3, #0
   1bfc6:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   1bfc8:	2300      	movs	r3, #0
   1bfca:	613b      	str	r3, [r7, #16]
   1bfcc:	2300      	movs	r3, #0
   1bfce:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   1bfd0:	687b      	ldr	r3, [r7, #4]
   1bfd2:	781b      	ldrb	r3, [r3, #0]
   1bfd4:	2b2d      	cmp	r3, #45	; 0x2d
   1bfd6:	d11b      	bne.n	1c010 <decstr_to_int+0x56>
    {
        bNeg = true;
   1bfd8:	2301      	movs	r3, #1
   1bfda:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   1bfdc:	687b      	ldr	r3, [r7, #4]
   1bfde:	3301      	adds	r3, #1
   1bfe0:	607b      	str	r3, [r7, #4]
        uCnt++;
   1bfe2:	68fb      	ldr	r3, [r7, #12]
   1bfe4:	3301      	adds	r3, #1
   1bfe6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1bfe8:	e012      	b.n	1c010 <decstr_to_int+0x56>
    {
        ++uCnt;
   1bfea:	68fb      	ldr	r3, [r7, #12]
   1bfec:	3301      	adds	r3, #1
   1bfee:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   1bff0:	693a      	ldr	r2, [r7, #16]
   1bff2:	4613      	mov	r3, r2
   1bff4:	009b      	lsls	r3, r3, #2
   1bff6:	4413      	add	r3, r2
   1bff8:	005b      	lsls	r3, r3, #1
   1bffa:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   1bffc:	687b      	ldr	r3, [r7, #4]
   1bffe:	781b      	ldrb	r3, [r3, #0]
   1c000:	461a      	mov	r2, r3
   1c002:	693b      	ldr	r3, [r7, #16]
   1c004:	4413      	add	r3, r2
   1c006:	3b30      	subs	r3, #48	; 0x30
   1c008:	613b      	str	r3, [r7, #16]
        pcStr++;
   1c00a:	687b      	ldr	r3, [r7, #4]
   1c00c:	3301      	adds	r3, #1
   1c00e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1c010:	687b      	ldr	r3, [r7, #4]
   1c012:	781b      	ldrb	r3, [r3, #0]
   1c014:	2b2f      	cmp	r3, #47	; 0x2f
   1c016:	d903      	bls.n	1c020 <decstr_to_int+0x66>
   1c018:	687b      	ldr	r3, [r7, #4]
   1c01a:	781b      	ldrb	r3, [r3, #0]
   1c01c:	2b39      	cmp	r3, #57	; 0x39
   1c01e:	d9e4      	bls.n	1bfea <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   1c020:	683b      	ldr	r3, [r7, #0]
   1c022:	2b00      	cmp	r3, #0
   1c024:	d002      	beq.n	1c02c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   1c026:	683b      	ldr	r3, [r7, #0]
   1c028:	68fa      	ldr	r2, [r7, #12]
   1c02a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   1c02c:	7dfb      	ldrb	r3, [r7, #23]
   1c02e:	2b00      	cmp	r3, #0
   1c030:	d002      	beq.n	1c038 <decstr_to_int+0x7e>
   1c032:	693b      	ldr	r3, [r7, #16]
   1c034:	425b      	negs	r3, r3
   1c036:	e000      	b.n	1c03a <decstr_to_int+0x80>
   1c038:	693b      	ldr	r3, [r7, #16]
}
   1c03a:	4618      	mov	r0, r3
   1c03c:	371c      	adds	r7, #28
   1c03e:	46bd      	mov	sp, r7
   1c040:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c044:	4770      	bx	lr

0001c046 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   1c046:	b590      	push	{r4, r7, lr}
   1c048:	b091      	sub	sp, #68	; 0x44
   1c04a:	af00      	add	r7, sp, #0
   1c04c:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1c050:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   1c052:	2300      	movs	r3, #0
   1c054:	63fb      	str	r3, [r7, #60]	; 0x3c
   1c056:	2300      	movs	r3, #0
   1c058:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   1c05a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1c05e:	f7ff fe6b 	bl	1bd38 <divu64_10>
   1c062:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   1c066:	68b9      	ldr	r1, [r7, #8]
   1c068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c06a:	4613      	mov	r3, r2
   1c06c:	009b      	lsls	r3, r3, #2
   1c06e:	4413      	add	r3, r2
   1c070:	005b      	lsls	r3, r3, #1
   1c072:	1acb      	subs	r3, r1, r3
   1c074:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   1c076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c078:	1c5a      	adds	r2, r3, #1
   1c07a:	63fa      	str	r2, [r7, #60]	; 0x3c
   1c07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c07e:	b2d2      	uxtb	r2, r2
   1c080:	3230      	adds	r2, #48	; 0x30
   1c082:	b2d2      	uxtb	r2, r2
   1c084:	f107 0140 	add.w	r1, r7, #64	; 0x40
   1c088:	440b      	add	r3, r1
   1c08a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   1c08e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1c092:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
   1c096:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   1c09a:	4323      	orrs	r3, r4
   1c09c:	d1dd      	bne.n	1c05a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1c09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c0a0:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1c0a2:	687b      	ldr	r3, [r7, #4]
   1c0a4:	2b00      	cmp	r3, #0
   1c0a6:	d011      	beq.n	1c0cc <uint64_to_str+0x86>
    {
        while ( ix-- )
   1c0a8:	e008      	b.n	1c0bc <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
   1c0aa:	687b      	ldr	r3, [r7, #4]
   1c0ac:	1c5a      	adds	r2, r3, #1
   1c0ae:	607a      	str	r2, [r7, #4]
   1c0b0:	f107 0110 	add.w	r1, r7, #16
   1c0b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c0b6:	440a      	add	r2, r1
   1c0b8:	7812      	ldrb	r2, [r2, #0]
   1c0ba:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   1c0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c0be:	1e5a      	subs	r2, r3, #1
   1c0c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   1c0c2:	2b00      	cmp	r3, #0
   1c0c4:	d1f1      	bne.n	1c0aa <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1c0c6:	687b      	ldr	r3, [r7, #4]
   1c0c8:	2200      	movs	r2, #0
   1c0ca:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   1c0ce:	4618      	mov	r0, r3
   1c0d0:	3744      	adds	r7, #68	; 0x44
   1c0d2:	46bd      	mov	sp, r7
   1c0d4:	bd90      	pop	{r4, r7, pc}

0001c0d6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   1c0d6:	b4b0      	push	{r4, r5, r7}
   1c0d8:	b08d      	sub	sp, #52	; 0x34
   1c0da:	af00      	add	r7, sp, #0
   1c0dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1c0e0:	607a      	str	r2, [r7, #4]
   1c0e2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   1c0e4:	2300      	movs	r3, #0
   1c0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   1c0e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1c0ec:	4313      	orrs	r3, r2
   1c0ee:	d131      	bne.n	1c154 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
   1c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c0f2:	1c5a      	adds	r2, r3, #1
   1c0f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   1c0f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1c0fa:	4413      	add	r3, r2
   1c0fc:	2230      	movs	r2, #48	; 0x30
   1c0fe:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   1c102:	e027      	b.n	1c154 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
   1c104:	7a3b      	ldrb	r3, [r7, #8]
   1c106:	f003 030f 	and.w	r3, r3, #15
   1c10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   1c10e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1c112:	2b09      	cmp	r3, #9
   1c114:	d90a      	bls.n	1c12c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   1c116:	78fb      	ldrb	r3, [r7, #3]
   1c118:	2b00      	cmp	r3, #0
   1c11a:	d001      	beq.n	1c120 <uint64_to_hexstr+0x4a>
   1c11c:	2227      	movs	r2, #39	; 0x27
   1c11e:	e000      	b.n	1c122 <uint64_to_hexstr+0x4c>
   1c120:	2207      	movs	r2, #7
   1c122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1c126:	4413      	add	r3, r2
   1c128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   1c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c12e:	1c5a      	adds	r2, r3, #1
   1c130:	62fa      	str	r2, [r7, #44]	; 0x2c
   1c132:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   1c136:	3230      	adds	r2, #48	; 0x30
   1c138:	b2d2      	uxtb	r2, r2
   1c13a:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1c13e:	440b      	add	r3, r1
   1c140:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   1c144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1c148:	0914      	lsrs	r4, r2, #4
   1c14a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
   1c14e:	091d      	lsrs	r5, r3, #4
   1c150:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
   1c154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1c158:	4313      	orrs	r3, r2
   1c15a:	d1d3      	bne.n	1c104 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c15e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   1c160:	687b      	ldr	r3, [r7, #4]
   1c162:	2b00      	cmp	r3, #0
   1c164:	d011      	beq.n	1c18a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
   1c166:	e008      	b.n	1c17a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
   1c168:	687b      	ldr	r3, [r7, #4]
   1c16a:	1c5a      	adds	r2, r3, #1
   1c16c:	607a      	str	r2, [r7, #4]
   1c16e:	f107 0110 	add.w	r1, r7, #16
   1c172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c174:	440a      	add	r2, r1
   1c176:	7812      	ldrb	r2, [r2, #0]
   1c178:	701a      	strb	r2, [r3, #0]
        while (ix--)
   1c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c17c:	1e5a      	subs	r2, r3, #1
   1c17e:	62fa      	str	r2, [r7, #44]	; 0x2c
   1c180:	2b00      	cmp	r3, #0
   1c182:	d1f1      	bne.n	1c168 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   1c184:	687b      	ldr	r3, [r7, #4]
   1c186:	2200      	movs	r2, #0
   1c188:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c18c:	4618      	mov	r0, r3
   1c18e:	3734      	adds	r7, #52	; 0x34
   1c190:	46bd      	mov	sp, r7
   1c192:	bcb0      	pop	{r4, r5, r7}
   1c194:	4770      	bx	lr

0001c196 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   1c196:	b480      	push	{r7}
   1c198:	b085      	sub	sp, #20
   1c19a:	af00      	add	r7, sp, #0
   1c19c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   1c19e:	2300      	movs	r3, #0
   1c1a0:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   1c1a2:	687b      	ldr	r3, [r7, #4]
   1c1a4:	2b00      	cmp	r3, #0
   1c1a6:	d104      	bne.n	1c1b2 <simple_strlen+0x1c>
    {
        return ui32RetVal;
   1c1a8:	68fb      	ldr	r3, [r7, #12]
   1c1aa:	e009      	b.n	1c1c0 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   1c1ac:	68fb      	ldr	r3, [r7, #12]
   1c1ae:	3301      	adds	r3, #1
   1c1b0:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
   1c1b2:	687b      	ldr	r3, [r7, #4]
   1c1b4:	1c5a      	adds	r2, r3, #1
   1c1b6:	607a      	str	r2, [r7, #4]
   1c1b8:	781b      	ldrb	r3, [r3, #0]
   1c1ba:	2b00      	cmp	r3, #0
   1c1bc:	d1f6      	bne.n	1c1ac <simple_strlen+0x16>
    }
    return ui32RetVal;
   1c1be:	68fb      	ldr	r3, [r7, #12]
}
   1c1c0:	4618      	mov	r0, r3
   1c1c2:	3714      	adds	r7, #20
   1c1c4:	46bd      	mov	sp, r7
   1c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c1ca:	4770      	bx	lr

0001c1cc <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   1c1cc:	b480      	push	{r7}
   1c1ce:	b087      	sub	sp, #28
   1c1d0:	af00      	add	r7, sp, #0
   1c1d2:	60f8      	str	r0, [r7, #12]
   1c1d4:	460b      	mov	r3, r1
   1c1d6:	607a      	str	r2, [r7, #4]
   1c1d8:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   1c1da:	2300      	movs	r3, #0
   1c1dc:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   1c1de:	687b      	ldr	r3, [r7, #4]
   1c1e0:	2b00      	cmp	r3, #0
   1c1e2:	dc0c      	bgt.n	1c1fe <padbuffer+0x32>
    {
        return i32Cnt;
   1c1e4:	697b      	ldr	r3, [r7, #20]
   1c1e6:	e010      	b.n	1c20a <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   1c1e8:	68fb      	ldr	r3, [r7, #12]
   1c1ea:	2b00      	cmp	r3, #0
   1c1ec:	d004      	beq.n	1c1f8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   1c1ee:	68fb      	ldr	r3, [r7, #12]
   1c1f0:	1c5a      	adds	r2, r3, #1
   1c1f2:	60fa      	str	r2, [r7, #12]
   1c1f4:	7afa      	ldrb	r2, [r7, #11]
   1c1f6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   1c1f8:	697b      	ldr	r3, [r7, #20]
   1c1fa:	3301      	adds	r3, #1
   1c1fc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
   1c1fe:	687b      	ldr	r3, [r7, #4]
   1c200:	1e5a      	subs	r2, r3, #1
   1c202:	607a      	str	r2, [r7, #4]
   1c204:	2b00      	cmp	r3, #0
   1c206:	d1ef      	bne.n	1c1e8 <padbuffer+0x1c>
    }

    return i32Cnt;
   1c208:	697b      	ldr	r3, [r7, #20]
}
   1c20a:	4618      	mov	r0, r3
   1c20c:	371c      	adds	r7, #28
   1c20e:	46bd      	mov	sp, r7
   1c210:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c214:	4770      	bx	lr
	...

0001c218 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   1c218:	b590      	push	{r4, r7, lr}
   1c21a:	b08f      	sub	sp, #60	; 0x3c
   1c21c:	af00      	add	r7, sp, #0
   1c21e:	ed87 0a03 	vstr	s0, [r7, #12]
   1c222:	60b8      	str	r0, [r7, #8]
   1c224:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   1c226:	68bb      	ldr	r3, [r7, #8]
   1c228:	681b      	ldr	r3, [r3, #0]
   1c22a:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   1c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c22e:	2b03      	cmp	r3, #3
   1c230:	dc02      	bgt.n	1c238 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
   1c232:	f06f 0302 	mvn.w	r3, #2
   1c236:	e0e7      	b.n	1c408 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
   1c238:	edd7 7a03 	vldr	s15, [r7, #12]
   1c23c:	eef5 7a40 	vcmp.f32	s15, #0.0
   1c240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c244:	d104      	bne.n	1c250 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   1c246:	68bb      	ldr	r3, [r7, #8]
   1c248:	4a71      	ldr	r2, [pc, #452]	; (1c410 <ftoa+0x1f8>)
   1c24a:	601a      	str	r2, [r3, #0]
        return 3;
   1c24c:	2303      	movs	r3, #3
   1c24e:	e0db      	b.n	1c408 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
   1c250:	68bb      	ldr	r3, [r7, #8]
   1c252:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   1c254:	68fb      	ldr	r3, [r7, #12]
   1c256:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   1c258:	693b      	ldr	r3, [r7, #16]
   1c25a:	15db      	asrs	r3, r3, #23
   1c25c:	b2db      	uxtb	r3, r3
   1c25e:	3b7f      	subs	r3, #127	; 0x7f
   1c260:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1c262:	693b      	ldr	r3, [r7, #16]
   1c264:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1c268:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1c26c:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   1c26e:	2300      	movs	r3, #0
   1c270:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   1c272:	2300      	movs	r3, #0
   1c274:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   1c276:	69fb      	ldr	r3, [r7, #28]
   1c278:	2b1e      	cmp	r3, #30
   1c27a:	dd02      	ble.n	1c282 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   1c27c:	f06f 0301 	mvn.w	r3, #1
   1c280:	e0c2      	b.n	1c408 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
   1c282:	69fb      	ldr	r3, [r7, #28]
   1c284:	f113 0f17 	cmn.w	r3, #23
   1c288:	da02      	bge.n	1c290 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   1c28a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c28e:	e0bb      	b.n	1c408 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
   1c290:	69fb      	ldr	r3, [r7, #28]
   1c292:	2b16      	cmp	r3, #22
   1c294:	dd06      	ble.n	1c2a4 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   1c296:	69fb      	ldr	r3, [r7, #28]
   1c298:	3b17      	subs	r3, #23
   1c29a:	69ba      	ldr	r2, [r7, #24]
   1c29c:	fa02 f303 	lsl.w	r3, r2, r3
   1c2a0:	637b      	str	r3, [r7, #52]	; 0x34
   1c2a2:	e01a      	b.n	1c2da <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
   1c2a4:	69fb      	ldr	r3, [r7, #28]
   1c2a6:	2b00      	cmp	r3, #0
   1c2a8:	db0f      	blt.n	1c2ca <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   1c2aa:	69fb      	ldr	r3, [r7, #28]
   1c2ac:	f1c3 0317 	rsb	r3, r3, #23
   1c2b0:	69ba      	ldr	r2, [r7, #24]
   1c2b2:	fa42 f303 	asr.w	r3, r2, r3
   1c2b6:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1c2b8:	69fb      	ldr	r3, [r7, #28]
   1c2ba:	3301      	adds	r3, #1
   1c2bc:	69ba      	ldr	r2, [r7, #24]
   1c2be:	fa02 f303 	lsl.w	r3, r2, r3
   1c2c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1c2c6:	633b      	str	r3, [r7, #48]	; 0x30
   1c2c8:	e007      	b.n	1c2da <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1c2ca:	69bb      	ldr	r3, [r7, #24]
   1c2cc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1c2d0:	69fb      	ldr	r3, [r7, #28]
   1c2d2:	43db      	mvns	r3, r3
   1c2d4:	fa42 f303 	asr.w	r3, r2, r3
   1c2d8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   1c2da:	693b      	ldr	r3, [r7, #16]
   1c2dc:	2b00      	cmp	r3, #0
   1c2de:	da04      	bge.n	1c2ea <ftoa+0xd2>
    {
        *pcBuf++ = '-';
   1c2e0:	68bb      	ldr	r3, [r7, #8]
   1c2e2:	1c5a      	adds	r2, r3, #1
   1c2e4:	60ba      	str	r2, [r7, #8]
   1c2e6:	222d      	movs	r2, #45	; 0x2d
   1c2e8:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   1c2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c2ec:	2b00      	cmp	r3, #0
   1c2ee:	d105      	bne.n	1c2fc <ftoa+0xe4>
    {
        *pcBuf++ = '0';
   1c2f0:	68bb      	ldr	r3, [r7, #8]
   1c2f2:	1c5a      	adds	r2, r3, #1
   1c2f4:	60ba      	str	r2, [r7, #8]
   1c2f6:	2230      	movs	r2, #48	; 0x30
   1c2f8:	701a      	strb	r2, [r3, #0]
   1c2fa:	e021      	b.n	1c340 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
   1c2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c2fe:	2b00      	cmp	r3, #0
   1c300:	dd08      	ble.n	1c314 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
   1c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c304:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1c308:	68ba      	ldr	r2, [r7, #8]
   1c30a:	4618      	mov	r0, r3
   1c30c:	4621      	mov	r1, r4
   1c30e:	f7ff fe9a 	bl	1c046 <uint64_to_str>
   1c312:	e011      	b.n	1c338 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
   1c314:	68bb      	ldr	r3, [r7, #8]
   1c316:	1c5a      	adds	r2, r3, #1
   1c318:	60ba      	str	r2, [r7, #8]
   1c31a:	222d      	movs	r2, #45	; 0x2d
   1c31c:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   1c31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c320:	425b      	negs	r3, r3
   1c322:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1c326:	68ba      	ldr	r2, [r7, #8]
   1c328:	4618      	mov	r0, r3
   1c32a:	4621      	mov	r1, r4
   1c32c:	f7ff fe8b 	bl	1c046 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   1c330:	e002      	b.n	1c338 <ftoa+0x120>
        {
            pcBuf++;
   1c332:	68bb      	ldr	r3, [r7, #8]
   1c334:	3301      	adds	r3, #1
   1c336:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
   1c338:	68bb      	ldr	r3, [r7, #8]
   1c33a:	781b      	ldrb	r3, [r3, #0]
   1c33c:	2b00      	cmp	r3, #0
   1c33e:	d1f8      	bne.n	1c332 <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   1c340:	68bb      	ldr	r3, [r7, #8]
   1c342:	1c5a      	adds	r2, r3, #1
   1c344:	60ba      	str	r2, [r7, #8]
   1c346:	222e      	movs	r2, #46	; 0x2e
   1c348:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   1c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c34c:	2b00      	cmp	r3, #0
   1c34e:	d105      	bne.n	1c35c <ftoa+0x144>
    {
        *pcBuf++ = '0';
   1c350:	68bb      	ldr	r3, [r7, #8]
   1c352:	1c5a      	adds	r2, r3, #1
   1c354:	60ba      	str	r2, [r7, #8]
   1c356:	2230      	movs	r2, #48	; 0x30
   1c358:	701a      	strb	r2, [r3, #0]
   1c35a:	e04f      	b.n	1c3fc <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1c35c:	68ba      	ldr	r2, [r7, #8]
   1c35e:	6a3b      	ldr	r3, [r7, #32]
   1c360:	1ad3      	subs	r3, r2, r3
   1c362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c364:	1ad3      	subs	r3, r2, r3
   1c366:	3b01      	subs	r3, #1
   1c368:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1c36a:	697a      	ldr	r2, [r7, #20]
   1c36c:	687b      	ldr	r3, [r7, #4]
   1c36e:	4293      	cmp	r3, r2
   1c370:	bfa8      	it	ge
   1c372:	4613      	movge	r3, r2
   1c374:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   1c376:	2300      	movs	r3, #0
   1c378:	62bb      	str	r3, [r7, #40]	; 0x28
   1c37a:	e015      	b.n	1c3a8 <ftoa+0x190>
        {
            i32FracPart *= 10;
   1c37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c37e:	4613      	mov	r3, r2
   1c380:	009b      	lsls	r3, r3, #2
   1c382:	4413      	add	r3, r2
   1c384:	005b      	lsls	r3, r3, #1
   1c386:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1c388:	68bb      	ldr	r3, [r7, #8]
   1c38a:	1c5a      	adds	r2, r3, #1
   1c38c:	60ba      	str	r2, [r7, #8]
   1c38e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c390:	1612      	asrs	r2, r2, #24
   1c392:	b2d2      	uxtb	r2, r2
   1c394:	3230      	adds	r2, #48	; 0x30
   1c396:	b2d2      	uxtb	r2, r2
   1c398:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   1c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c39c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1c3a0:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   1c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c3a4:	3301      	adds	r3, #1
   1c3a6:	62bb      	str	r3, [r7, #40]	; 0x28
   1c3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c3aa:	697b      	ldr	r3, [r7, #20]
   1c3ac:	429a      	cmp	r2, r3
   1c3ae:	dbe5      	blt.n	1c37c <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1c3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c3b2:	4613      	mov	r3, r2
   1c3b4:	009b      	lsls	r3, r3, #2
   1c3b6:	4413      	add	r3, r2
   1c3b8:	005b      	lsls	r3, r3, #1
   1c3ba:	161b      	asrs	r3, r3, #24
   1c3bc:	2b04      	cmp	r3, #4
   1c3be:	dd1d      	ble.n	1c3fc <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   1c3c0:	68bb      	ldr	r3, [r7, #8]
   1c3c2:	3b01      	subs	r3, #1
   1c3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   1c3c6:	e015      	b.n	1c3f4 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
   1c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3ca:	781b      	ldrb	r3, [r3, #0]
   1c3cc:	2b2e      	cmp	r3, #46	; 0x2e
   1c3ce:	d00e      	beq.n	1c3ee <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
   1c3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3d2:	781b      	ldrb	r3, [r3, #0]
   1c3d4:	2b39      	cmp	r3, #57	; 0x39
   1c3d6:	d103      	bne.n	1c3e0 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
   1c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3da:	2230      	movs	r2, #48	; 0x30
   1c3dc:	701a      	strb	r2, [r3, #0]
   1c3de:	e006      	b.n	1c3ee <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
   1c3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3e2:	781b      	ldrb	r3, [r3, #0]
   1c3e4:	3301      	adds	r3, #1
   1c3e6:	b2da      	uxtb	r2, r3
   1c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3ea:	701a      	strb	r2, [r3, #0]
                    break;
   1c3ec:	e006      	b.n	1c3fc <ftoa+0x1e4>
                }
                pcBuftmp--;
   1c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c3f0:	3b01      	subs	r3, #1
   1c3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   1c3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c3f6:	6a3b      	ldr	r3, [r7, #32]
   1c3f8:	429a      	cmp	r2, r3
   1c3fa:	d2e5      	bcs.n	1c3c8 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   1c3fc:	68bb      	ldr	r3, [r7, #8]
   1c3fe:	2200      	movs	r2, #0
   1c400:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   1c402:	68ba      	ldr	r2, [r7, #8]
   1c404:	6a3b      	ldr	r3, [r7, #32]
   1c406:	1ad3      	subs	r3, r2, r3
} // ftoa()
   1c408:	4618      	mov	r0, r3
   1c40a:	373c      	adds	r7, #60	; 0x3c
   1c40c:	46bd      	mov	sp, r7
   1c40e:	bd90      	pop	{r4, r7, pc}
   1c410:	00302e30 	.word	0x00302e30

0001c414 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1c414:	b590      	push	{r4, r7, lr}
   1c416:	b095      	sub	sp, #84	; 0x54
   1c418:	af00      	add	r7, sp, #0
   1c41a:	60f8      	str	r0, [r7, #12]
   1c41c:	60b9      	str	r1, [r7, #8]
   1c41e:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1c420:	2300      	movs	r3, #0
   1c422:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   1c424:	2300      	movs	r3, #0
   1c426:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   1c428:	e2e9      	b.n	1c9fe <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   1c42a:	2306      	movs	r3, #6
   1c42c:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
   1c42e:	68bb      	ldr	r3, [r7, #8]
   1c430:	781b      	ldrb	r3, [r3, #0]
   1c432:	2b25      	cmp	r3, #37	; 0x25
   1c434:	d01f      	beq.n	1c476 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   1c436:	68fb      	ldr	r3, [r7, #12]
   1c438:	2b00      	cmp	r3, #0
   1c43a:	d015      	beq.n	1c468 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1c43c:	68bb      	ldr	r3, [r7, #8]
   1c43e:	781b      	ldrb	r3, [r3, #0]
   1c440:	2b0a      	cmp	r3, #10
   1c442:	d10b      	bne.n	1c45c <am_util_stdio_vsprintf+0x48>
   1c444:	4bb2      	ldr	r3, [pc, #712]	; (1c710 <am_util_stdio_vsprintf+0x2fc>)
   1c446:	781b      	ldrb	r3, [r3, #0]
   1c448:	2b00      	cmp	r3, #0
   1c44a:	d007      	beq.n	1c45c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
   1c44c:	68fb      	ldr	r3, [r7, #12]
   1c44e:	1c5a      	adds	r2, r3, #1
   1c450:	60fa      	str	r2, [r7, #12]
   1c452:	220d      	movs	r2, #13
   1c454:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   1c456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c458:	3301      	adds	r3, #1
   1c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   1c45c:	68fb      	ldr	r3, [r7, #12]
   1c45e:	1c5a      	adds	r2, r3, #1
   1c460:	60fa      	str	r2, [r7, #12]
   1c462:	68ba      	ldr	r2, [r7, #8]
   1c464:	7812      	ldrb	r2, [r2, #0]
   1c466:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   1c468:	68bb      	ldr	r3, [r7, #8]
   1c46a:	3301      	adds	r3, #1
   1c46c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
   1c46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c470:	3301      	adds	r3, #1
   1c472:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
   1c474:	e2c3      	b.n	1c9fe <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   1c476:	68bb      	ldr	r3, [r7, #8]
   1c478:	3301      	adds	r3, #1
   1c47a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
   1c47c:	2300      	movs	r3, #0
   1c47e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   1c482:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1c486:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   1c48a:	2320      	movs	r3, #32
   1c48c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
   1c490:	68bb      	ldr	r3, [r7, #8]
   1c492:	781b      	ldrb	r3, [r3, #0]
   1c494:	2b30      	cmp	r3, #48	; 0x30
   1c496:	d105      	bne.n	1c4a4 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
   1c498:	2330      	movs	r3, #48	; 0x30
   1c49a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
   1c49e:	68bb      	ldr	r3, [r7, #8]
   1c4a0:	3301      	adds	r3, #1
   1c4a2:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   1c4a4:	f107 0310 	add.w	r3, r7, #16
   1c4a8:	4619      	mov	r1, r3
   1c4aa:	68b8      	ldr	r0, [r7, #8]
   1c4ac:	f7ff fd85 	bl	1bfba <decstr_to_int>
   1c4b0:	4603      	mov	r3, r0
   1c4b2:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
   1c4b4:	693b      	ldr	r3, [r7, #16]
   1c4b6:	68ba      	ldr	r2, [r7, #8]
   1c4b8:	4413      	add	r3, r2
   1c4ba:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1c4bc:	68bb      	ldr	r3, [r7, #8]
   1c4be:	781b      	ldrb	r3, [r3, #0]
   1c4c0:	2b73      	cmp	r3, #115	; 0x73
   1c4c2:	d005      	beq.n	1c4d0 <am_util_stdio_vsprintf+0xbc>
   1c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c4c6:	2b00      	cmp	r3, #0
   1c4c8:	da02      	bge.n	1c4d0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
   1c4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c4cc:	425b      	negs	r3, r3
   1c4ce:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1c4d0:	68bb      	ldr	r3, [r7, #8]
   1c4d2:	781b      	ldrb	r3, [r3, #0]
   1c4d4:	2b2e      	cmp	r3, #46	; 0x2e
   1c4d6:	d10e      	bne.n	1c4f6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
   1c4d8:	68bb      	ldr	r3, [r7, #8]
   1c4da:	3301      	adds	r3, #1
   1c4dc:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1c4de:	f107 0310 	add.w	r3, r7, #16
   1c4e2:	4619      	mov	r1, r3
   1c4e4:	68b8      	ldr	r0, [r7, #8]
   1c4e6:	f7ff fd68 	bl	1bfba <decstr_to_int>
   1c4ea:	4603      	mov	r3, r0
   1c4ec:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
   1c4ee:	693b      	ldr	r3, [r7, #16]
   1c4f0:	68ba      	ldr	r2, [r7, #8]
   1c4f2:	4413      	add	r3, r2
   1c4f4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1c4f6:	68bb      	ldr	r3, [r7, #8]
   1c4f8:	781b      	ldrb	r3, [r3, #0]
   1c4fa:	2b6c      	cmp	r3, #108	; 0x6c
   1c4fc:	d10c      	bne.n	1c518 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
   1c4fe:	68bb      	ldr	r3, [r7, #8]
   1c500:	3301      	adds	r3, #1
   1c502:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   1c504:	68bb      	ldr	r3, [r7, #8]
   1c506:	781b      	ldrb	r3, [r3, #0]
   1c508:	2b6c      	cmp	r3, #108	; 0x6c
   1c50a:	d105      	bne.n	1c518 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
   1c50c:	68bb      	ldr	r3, [r7, #8]
   1c50e:	3301      	adds	r3, #1
   1c510:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
   1c512:	2301      	movs	r3, #1
   1c514:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   1c518:	68bb      	ldr	r3, [r7, #8]
   1c51a:	781b      	ldrb	r3, [r3, #0]
   1c51c:	3b46      	subs	r3, #70	; 0x46
   1c51e:	2b32      	cmp	r3, #50	; 0x32
   1c520:	f200 825a 	bhi.w	1c9d8 <am_util_stdio_vsprintf+0x5c4>
   1c524:	a201      	add	r2, pc, #4	; (adr r2, 1c52c <am_util_stdio_vsprintf+0x118>)
   1c526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c52a:	bf00      	nop
   1c52c:	0001c95f 	.word	0x0001c95f
   1c530:	0001c9d9 	.word	0x0001c9d9
   1c534:	0001c9d9 	.word	0x0001c9d9
   1c538:	0001c9d9 	.word	0x0001c9d9
   1c53c:	0001c9d9 	.word	0x0001c9d9
   1c540:	0001c9d9 	.word	0x0001c9d9
   1c544:	0001c9d9 	.word	0x0001c9d9
   1c548:	0001c9d9 	.word	0x0001c9d9
   1c54c:	0001c9d9 	.word	0x0001c9d9
   1c550:	0001c9d9 	.word	0x0001c9d9
   1c554:	0001c9d9 	.word	0x0001c9d9
   1c558:	0001c9d9 	.word	0x0001c9d9
   1c55c:	0001c9d9 	.word	0x0001c9d9
   1c560:	0001c9d9 	.word	0x0001c9d9
   1c564:	0001c9d9 	.word	0x0001c9d9
   1c568:	0001c9d9 	.word	0x0001c9d9
   1c56c:	0001c9d9 	.word	0x0001c9d9
   1c570:	0001c9d9 	.word	0x0001c9d9
   1c574:	0001c6f3 	.word	0x0001c6f3
   1c578:	0001c9d9 	.word	0x0001c9d9
   1c57c:	0001c9d9 	.word	0x0001c9d9
   1c580:	0001c9d9 	.word	0x0001c9d9
   1c584:	0001c9d9 	.word	0x0001c9d9
   1c588:	0001c9d9 	.word	0x0001c9d9
   1c58c:	0001c9d9 	.word	0x0001c9d9
   1c590:	0001c9d9 	.word	0x0001c9d9
   1c594:	0001c9d9 	.word	0x0001c9d9
   1c598:	0001c9d9 	.word	0x0001c9d9
   1c59c:	0001c9d9 	.word	0x0001c9d9
   1c5a0:	0001c5f9 	.word	0x0001c5f9
   1c5a4:	0001c825 	.word	0x0001c825
   1c5a8:	0001c9d9 	.word	0x0001c9d9
   1c5ac:	0001c95f 	.word	0x0001c95f
   1c5b0:	0001c9d9 	.word	0x0001c9d9
   1c5b4:	0001c9d9 	.word	0x0001c9d9
   1c5b8:	0001c825 	.word	0x0001c825
   1c5bc:	0001c9d9 	.word	0x0001c9d9
   1c5c0:	0001c9d9 	.word	0x0001c9d9
   1c5c4:	0001c9d9 	.word	0x0001c9d9
   1c5c8:	0001c9d9 	.word	0x0001c9d9
   1c5cc:	0001c9d9 	.word	0x0001c9d9
   1c5d0:	0001c9d9 	.word	0x0001c9d9
   1c5d4:	0001c9d9 	.word	0x0001c9d9
   1c5d8:	0001c9d9 	.word	0x0001c9d9
   1c5dc:	0001c9d9 	.word	0x0001c9d9
   1c5e0:	0001c61f 	.word	0x0001c61f
   1c5e4:	0001c9d9 	.word	0x0001c9d9
   1c5e8:	0001c791 	.word	0x0001c791
   1c5ec:	0001c9d9 	.word	0x0001c9d9
   1c5f0:	0001c9d9 	.word	0x0001c9d9
   1c5f4:	0001c6ed 	.word	0x0001c6ed
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1c5f8:	687b      	ldr	r3, [r7, #4]
   1c5fa:	1d1a      	adds	r2, r3, #4
   1c5fc:	607a      	str	r2, [r7, #4]
   1c5fe:	681b      	ldr	r3, [r3, #0]
   1c600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
   1c604:	68fb      	ldr	r3, [r7, #12]
   1c606:	2b00      	cmp	r3, #0
   1c608:	d005      	beq.n	1c616 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   1c60a:	68fb      	ldr	r3, [r7, #12]
   1c60c:	1c5a      	adds	r2, r3, #1
   1c60e:	60fa      	str	r2, [r7, #12]
   1c610:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   1c614:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1c616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c618:	3301      	adds	r3, #1
   1c61a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1c61c:	e1ec      	b.n	1c9f8 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
   1c61e:	687b      	ldr	r3, [r7, #4]
   1c620:	1d1a      	adds	r2, r3, #4
   1c622:	607a      	str	r2, [r7, #4]
   1c624:	681b      	ldr	r3, [r3, #0]
   1c626:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   1c628:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1c62a:	f7ff fdb4 	bl	1c196 <simple_strlen>
   1c62e:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
   1c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c632:	2b00      	cmp	r3, #0
   1c634:	dd2e      	ble.n	1c694 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   1c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c63a:	429a      	cmp	r2, r3
   1c63c:	d22a      	bcs.n	1c694 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1c63e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c642:	1ad3      	subs	r3, r2, r3
   1c644:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1c646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1c64a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c64c:	4619      	mov	r1, r3
   1c64e:	68f8      	ldr	r0, [r7, #12]
   1c650:	f7ff fdbc 	bl	1c1cc <padbuffer>
   1c654:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1c656:	68fb      	ldr	r3, [r7, #12]
   1c658:	2b00      	cmp	r3, #0
   1c65a:	d001      	beq.n	1c660 <am_util_stdio_vsprintf+0x24c>
   1c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c65e:	e000      	b.n	1c662 <am_util_stdio_vsprintf+0x24e>
   1c660:	2300      	movs	r3, #0
   1c662:	68fa      	ldr	r2, [r7, #12]
   1c664:	4413      	add	r3, r2
   1c666:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c66a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c66c:	4413      	add	r3, r2
   1c66e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1c670:	2300      	movs	r3, #0
   1c672:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   1c674:	e00e      	b.n	1c694 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   1c676:	68fb      	ldr	r3, [r7, #12]
   1c678:	2b00      	cmp	r3, #0
   1c67a:	d005      	beq.n	1c688 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   1c67c:	68fb      	ldr	r3, [r7, #12]
   1c67e:	1c5a      	adds	r2, r3, #1
   1c680:	60fa      	str	r2, [r7, #12]
   1c682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1c684:	7812      	ldrb	r2, [r2, #0]
   1c686:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   1c688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c68a:	3301      	adds	r3, #1
   1c68c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
   1c68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c690:	3301      	adds	r3, #1
   1c692:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
   1c694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1c696:	781b      	ldrb	r3, [r3, #0]
   1c698:	2b00      	cmp	r3, #0
   1c69a:	d1ec      	bne.n	1c676 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
   1c69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c69e:	2b00      	cmp	r3, #0
   1c6a0:	f000 81a7 	beq.w	1c9f2 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
   1c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c6a6:	425b      	negs	r3, r3
   1c6a8:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   1c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c6ae:	429a      	cmp	r2, r3
   1c6b0:	f080 819f 	bcs.w	1c9f2 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1c6b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6b8:	1ad3      	subs	r3, r2, r3
   1c6ba:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1c6bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1c6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c6c2:	4619      	mov	r1, r3
   1c6c4:	68f8      	ldr	r0, [r7, #12]
   1c6c6:	f7ff fd81 	bl	1c1cc <padbuffer>
   1c6ca:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1c6cc:	68fb      	ldr	r3, [r7, #12]
   1c6ce:	2b00      	cmp	r3, #0
   1c6d0:	d001      	beq.n	1c6d6 <am_util_stdio_vsprintf+0x2c2>
   1c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c6d4:	e000      	b.n	1c6d8 <am_util_stdio_vsprintf+0x2c4>
   1c6d6:	2300      	movs	r3, #0
   1c6d8:	68fa      	ldr	r2, [r7, #12]
   1c6da:	4413      	add	r3, r2
   1c6dc:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c6e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c6e2:	4413      	add	r3, r2
   1c6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1c6e6:	2300      	movs	r3, #0
   1c6e8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
   1c6ea:	e182      	b.n	1c9f2 <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
   1c6ec:	2301      	movs	r3, #1
   1c6ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c6f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d00c      	beq.n	1c714 <am_util_stdio_vsprintf+0x300>
   1c6fa:	687b      	ldr	r3, [r7, #4]
   1c6fc:	3307      	adds	r3, #7
   1c6fe:	f023 0307 	bic.w	r3, r3, #7
   1c702:	f103 0208 	add.w	r2, r3, #8
   1c706:	607a      	str	r2, [r7, #4]
   1c708:	e9d3 3400 	ldrd	r3, r4, [r3]
   1c70c:	e008      	b.n	1c720 <am_util_stdio_vsprintf+0x30c>
   1c70e:	bf00      	nop
   1c710:	100053b4 	.word	0x100053b4
                                      va_arg(pArgs, uint32_t);
   1c714:	687b      	ldr	r3, [r7, #4]
   1c716:	1d1a      	adds	r2, r3, #4
   1c718:	607a      	str	r2, [r7, #4]
   1c71a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c71c:	f04f 0400 	mov.w	r4, #0
   1c720:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   1c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c726:	2b00      	cmp	r3, #0
   1c728:	d01e      	beq.n	1c768 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   1c72a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1c72e:	f7ff fc20 	bl	1bf72 <ndigits_in_hex>
   1c732:	4602      	mov	r2, r0
   1c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c736:	1a9b      	subs	r3, r3, r2
   1c738:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1c73a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1c73e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c740:	4619      	mov	r1, r3
   1c742:	68f8      	ldr	r0, [r7, #12]
   1c744:	f7ff fd42 	bl	1c1cc <padbuffer>
   1c748:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1c74a:	68fb      	ldr	r3, [r7, #12]
   1c74c:	2b00      	cmp	r3, #0
   1c74e:	d001      	beq.n	1c754 <am_util_stdio_vsprintf+0x340>
   1c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c752:	e000      	b.n	1c756 <am_util_stdio_vsprintf+0x342>
   1c754:	2300      	movs	r3, #0
   1c756:	68fa      	ldr	r2, [r7, #12]
   1c758:	4413      	add	r3, r2
   1c75a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1c75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c75e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c760:	4413      	add	r3, r2
   1c762:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1c764:	2300      	movs	r3, #0
   1c766:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   1c768:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1c76c:	68fa      	ldr	r2, [r7, #12]
   1c76e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1c772:	f7ff fcb0 	bl	1c0d6 <uint64_to_hexstr>
   1c776:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1c778:	68fb      	ldr	r3, [r7, #12]
   1c77a:	2b00      	cmp	r3, #0
   1c77c:	d003      	beq.n	1c786 <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
   1c77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c780:	68fa      	ldr	r2, [r7, #12]
   1c782:	4413      	add	r3, r2
   1c784:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1c786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c78a:	4413      	add	r3, r2
   1c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1c78e:	e133      	b.n	1c9f8 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c790:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1c794:	2b00      	cmp	r3, #0
   1c796:	d009      	beq.n	1c7ac <am_util_stdio_vsprintf+0x398>
   1c798:	687b      	ldr	r3, [r7, #4]
   1c79a:	3307      	adds	r3, #7
   1c79c:	f023 0307 	bic.w	r3, r3, #7
   1c7a0:	f103 0208 	add.w	r2, r3, #8
   1c7a4:	607a      	str	r2, [r7, #4]
   1c7a6:	e9d3 3400 	ldrd	r3, r4, [r3]
   1c7aa:	e005      	b.n	1c7b8 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
   1c7ac:	687b      	ldr	r3, [r7, #4]
   1c7ae:	1d1a      	adds	r2, r3, #4
   1c7b0:	607a      	str	r2, [r7, #4]
   1c7b2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1c7b4:	f04f 0400 	mov.w	r4, #0
   1c7b8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   1c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7be:	2b00      	cmp	r3, #0
   1c7c0:	d01e      	beq.n	1c800 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   1c7c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1c7c6:	f7ff fb96 	bl	1bef6 <ndigits_in_u64>
   1c7ca:	4602      	mov	r2, r0
   1c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7ce:	1a9b      	subs	r3, r3, r2
   1c7d0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1c7d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1c7d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c7d8:	4619      	mov	r1, r3
   1c7da:	68f8      	ldr	r0, [r7, #12]
   1c7dc:	f7ff fcf6 	bl	1c1cc <padbuffer>
   1c7e0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1c7e2:	68fb      	ldr	r3, [r7, #12]
   1c7e4:	2b00      	cmp	r3, #0
   1c7e6:	d001      	beq.n	1c7ec <am_util_stdio_vsprintf+0x3d8>
   1c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7ea:	e000      	b.n	1c7ee <am_util_stdio_vsprintf+0x3da>
   1c7ec:	2300      	movs	r3, #0
   1c7ee:	68fa      	ldr	r2, [r7, #12]
   1c7f0:	4413      	add	r3, r2
   1c7f2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c7f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c7f8:	4413      	add	r3, r2
   1c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1c7fc:	2300      	movs	r3, #0
   1c7fe:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1c800:	68fa      	ldr	r2, [r7, #12]
   1c802:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1c806:	f7ff fc1e 	bl	1c046 <uint64_to_str>
   1c80a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1c80c:	68fb      	ldr	r3, [r7, #12]
   1c80e:	2b00      	cmp	r3, #0
   1c810:	d003      	beq.n	1c81a <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
   1c812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c814:	68fa      	ldr	r2, [r7, #12]
   1c816:	4413      	add	r3, r2
   1c818:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1c81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c81c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c81e:	4413      	add	r3, r2
   1c820:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1c822:	e0e9      	b.n	1c9f8 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1c824:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1c828:	2b00      	cmp	r3, #0
   1c82a:	d009      	beq.n	1c840 <am_util_stdio_vsprintf+0x42c>
   1c82c:	687b      	ldr	r3, [r7, #4]
   1c82e:	3307      	adds	r3, #7
   1c830:	f023 0307 	bic.w	r3, r3, #7
   1c834:	f103 0208 	add.w	r2, r3, #8
   1c838:	607a      	str	r2, [r7, #4]
   1c83a:	e9d3 3400 	ldrd	r3, r4, [r3]
   1c83e:	e005      	b.n	1c84c <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
   1c840:	687b      	ldr	r3, [r7, #4]
   1c842:	1d1a      	adds	r2, r3, #4
   1c844:	607a      	str	r2, [r7, #4]
   1c846:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1c848:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1c84c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   1c850:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1c854:	2b00      	cmp	r3, #0
   1c856:	f174 0300 	sbcs.w	r3, r4, #0
   1c85a:	da0a      	bge.n	1c872 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
   1c85c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1c860:	425b      	negs	r3, r3
   1c862:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   1c866:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
   1c86a:	2301      	movs	r3, #1
   1c86c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   1c870:	e006      	b.n	1c880 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
   1c872:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1c876:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
   1c87a:	2300      	movs	r3, #0
   1c87c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
   1c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c882:	2b00      	cmp	r3, #0
   1c884:	d04a      	beq.n	1c91c <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   1c886:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
   1c88a:	4618      	mov	r0, r3
   1c88c:	4621      	mov	r1, r4
   1c88e:	f7ff fb53 	bl	1bf38 <ndigits_in_i64>
   1c892:	4602      	mov	r2, r0
   1c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c896:	1a9b      	subs	r3, r3, r2
   1c898:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
   1c89a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1c89e:	2b00      	cmp	r3, #0
   1c8a0:	d011      	beq.n	1c8c6 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
   1c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c8a4:	3b01      	subs	r3, #1
   1c8a6:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   1c8a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1c8ac:	2b30      	cmp	r3, #48	; 0x30
   1c8ae:	d10a      	bne.n	1c8c6 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   1c8b0:	68fb      	ldr	r3, [r7, #12]
   1c8b2:	2b00      	cmp	r3, #0
   1c8b4:	d004      	beq.n	1c8c0 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
   1c8b6:	68fb      	ldr	r3, [r7, #12]
   1c8b8:	1c5a      	adds	r2, r3, #1
   1c8ba:	60fa      	str	r2, [r7, #12]
   1c8bc:	222d      	movs	r2, #45	; 0x2d
   1c8be:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   1c8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c8c2:	3301      	adds	r3, #1
   1c8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1c8c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1c8ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c8cc:	4619      	mov	r1, r3
   1c8ce:	68f8      	ldr	r0, [r7, #12]
   1c8d0:	f7ff fc7c 	bl	1c1cc <padbuffer>
   1c8d4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1c8d6:	68fb      	ldr	r3, [r7, #12]
   1c8d8:	2b00      	cmp	r3, #0
   1c8da:	d001      	beq.n	1c8e0 <am_util_stdio_vsprintf+0x4cc>
   1c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c8de:	e000      	b.n	1c8e2 <am_util_stdio_vsprintf+0x4ce>
   1c8e0:	2300      	movs	r3, #0
   1c8e2:	68fa      	ldr	r2, [r7, #12]
   1c8e4:	4413      	add	r3, r2
   1c8e6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1c8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c8ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c8ec:	4413      	add	r3, r2
   1c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1c8f0:	2300      	movs	r3, #0
   1c8f2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1c8f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1c8f8:	2b00      	cmp	r3, #0
   1c8fa:	d01e      	beq.n	1c93a <am_util_stdio_vsprintf+0x526>
   1c8fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1c900:	2b20      	cmp	r3, #32
   1c902:	d11a      	bne.n	1c93a <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   1c904:	68fb      	ldr	r3, [r7, #12]
   1c906:	2b00      	cmp	r3, #0
   1c908:	d004      	beq.n	1c914 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
   1c90a:	68fb      	ldr	r3, [r7, #12]
   1c90c:	1c5a      	adds	r2, r3, #1
   1c90e:	60fa      	str	r2, [r7, #12]
   1c910:	222d      	movs	r2, #45	; 0x2d
   1c912:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   1c914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c916:	3301      	adds	r3, #1
   1c918:	63fb      	str	r3, [r7, #60]	; 0x3c
   1c91a:	e00e      	b.n	1c93a <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
   1c91c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1c920:	2b00      	cmp	r3, #0
   1c922:	d00a      	beq.n	1c93a <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
   1c924:	68fb      	ldr	r3, [r7, #12]
   1c926:	2b00      	cmp	r3, #0
   1c928:	d004      	beq.n	1c934 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
   1c92a:	68fb      	ldr	r3, [r7, #12]
   1c92c:	1c5a      	adds	r2, r3, #1
   1c92e:	60fa      	str	r2, [r7, #12]
   1c930:	222d      	movs	r2, #45	; 0x2d
   1c932:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   1c934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c936:	3301      	adds	r3, #1
   1c938:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1c93a:	68fa      	ldr	r2, [r7, #12]
   1c93c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1c940:	f7ff fb81 	bl	1c046 <uint64_to_str>
   1c944:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1c946:	68fb      	ldr	r3, [r7, #12]
   1c948:	2b00      	cmp	r3, #0
   1c94a:	d003      	beq.n	1c954 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
   1c94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c94e:	68fa      	ldr	r2, [r7, #12]
   1c950:	4413      	add	r3, r2
   1c952:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1c954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c958:	4413      	add	r3, r2
   1c95a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1c95c:	e04c      	b.n	1c9f8 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
   1c95e:	68fb      	ldr	r3, [r7, #12]
   1c960:	2b00      	cmp	r3, #0
   1c962:	d048      	beq.n	1c9f6 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
   1c964:	687b      	ldr	r3, [r7, #4]
   1c966:	3307      	adds	r3, #7
   1c968:	f023 0307 	bic.w	r3, r3, #7
   1c96c:	f103 0208 	add.w	r2, r3, #8
   1c970:	607a      	str	r2, [r7, #4]
   1c972:	e9d3 3400 	ldrd	r3, r4, [r3]
   1c976:	4618      	mov	r0, r3
   1c978:	4621      	mov	r1, r4
   1c97a:	f7ef fd3d 	bl	c3f8 <__aeabi_d2f>
   1c97e:	4603      	mov	r3, r0
   1c980:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   1c982:	68fb      	ldr	r3, [r7, #12]
   1c984:	2214      	movs	r2, #20
   1c986:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   1c988:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1c98a:	68f8      	ldr	r0, [r7, #12]
   1c98c:	ed97 0a05 	vldr	s0, [r7, #20]
   1c990:	f7ff fc42 	bl	1c218 <ftoa>
   1c994:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
   1c996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c998:	2b00      	cmp	r3, #0
   1c99a:	da14      	bge.n	1c9c6 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1c99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c9a2:	d102      	bne.n	1c9aa <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   1c9a4:	4b1e      	ldr	r3, [pc, #120]	; (1ca20 <am_util_stdio_vsprintf+0x60c>)
   1c9a6:	62bb      	str	r3, [r7, #40]	; 0x28
   1c9a8:	e008      	b.n	1c9bc <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   1c9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c9ac:	f113 0f02 	cmn.w	r3, #2
   1c9b0:	d102      	bne.n	1c9b8 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1c9b2:	4b1c      	ldr	r3, [pc, #112]	; (1ca24 <am_util_stdio_vsprintf+0x610>)
   1c9b4:	62bb      	str	r3, [r7, #40]	; 0x28
   1c9b6:	e001      	b.n	1c9bc <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   1c9b8:	4b1b      	ldr	r3, [pc, #108]	; (1ca28 <am_util_stdio_vsprintf+0x614>)
   1c9ba:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   1c9bc:	68fb      	ldr	r3, [r7, #12]
   1c9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c9c0:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   1c9c2:	2303      	movs	r3, #3
   1c9c4:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   1c9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c9c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c9ca:	4413      	add	r3, r2
   1c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
   1c9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c9d0:	68fa      	ldr	r2, [r7, #12]
   1c9d2:	4413      	add	r3, r2
   1c9d4:	60fb      	str	r3, [r7, #12]
                }
                break;
   1c9d6:	e00e      	b.n	1c9f6 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   1c9d8:	68fb      	ldr	r3, [r7, #12]
   1c9da:	2b00      	cmp	r3, #0
   1c9dc:	d005      	beq.n	1c9ea <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
   1c9de:	68fb      	ldr	r3, [r7, #12]
   1c9e0:	1c5a      	adds	r2, r3, #1
   1c9e2:	60fa      	str	r2, [r7, #12]
   1c9e4:	68ba      	ldr	r2, [r7, #8]
   1c9e6:	7812      	ldrb	r2, [r2, #0]
   1c9e8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1c9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c9ec:	3301      	adds	r3, #1
   1c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1c9f0:	e002      	b.n	1c9f8 <am_util_stdio_vsprintf+0x5e4>
                break;
   1c9f2:	bf00      	nop
   1c9f4:	e000      	b.n	1c9f8 <am_util_stdio_vsprintf+0x5e4>
                break;
   1c9f6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   1c9f8:	68bb      	ldr	r3, [r7, #8]
   1c9fa:	3301      	adds	r3, #1
   1c9fc:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
   1c9fe:	68bb      	ldr	r3, [r7, #8]
   1ca00:	781b      	ldrb	r3, [r3, #0]
   1ca02:	2b00      	cmp	r3, #0
   1ca04:	f47f ad11 	bne.w	1c42a <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   1ca08:	68fb      	ldr	r3, [r7, #12]
   1ca0a:	2b00      	cmp	r3, #0
   1ca0c:	d002      	beq.n	1ca14 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
   1ca0e:	68fb      	ldr	r3, [r7, #12]
   1ca10:	2200      	movs	r2, #0
   1ca12:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   1ca14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1ca16:	4618      	mov	r0, r3
   1ca18:	3754      	adds	r7, #84	; 0x54
   1ca1a:	46bd      	mov	sp, r7
   1ca1c:	bd90      	pop	{r4, r7, pc}
   1ca1e:	bf00      	nop
   1ca20:	00302e30 	.word	0x00302e30
   1ca24:	00232e23 	.word	0x00232e23
   1ca28:	003f2e3f 	.word	0x003f2e3f

0001ca2c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1ca2c:	b40f      	push	{r0, r1, r2, r3}
   1ca2e:	b580      	push	{r7, lr}
   1ca30:	b082      	sub	sp, #8
   1ca32:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   1ca34:	4b0d      	ldr	r3, [pc, #52]	; (1ca6c <am_util_stdio_printf+0x40>)
   1ca36:	681b      	ldr	r3, [r3, #0]
   1ca38:	2b00      	cmp	r3, #0
   1ca3a:	d101      	bne.n	1ca40 <am_util_stdio_printf+0x14>
    {
        return 0;
   1ca3c:	2300      	movs	r3, #0
   1ca3e:	e00d      	b.n	1ca5c <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   1ca40:	f107 0314 	add.w	r3, r7, #20
   1ca44:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1ca46:	683a      	ldr	r2, [r7, #0]
   1ca48:	6939      	ldr	r1, [r7, #16]
   1ca4a:	4809      	ldr	r0, [pc, #36]	; (1ca70 <am_util_stdio_printf+0x44>)
   1ca4c:	f7ff fce2 	bl	1c414 <am_util_stdio_vsprintf>
   1ca50:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   1ca52:	4b06      	ldr	r3, [pc, #24]	; (1ca6c <am_util_stdio_printf+0x40>)
   1ca54:	681b      	ldr	r3, [r3, #0]
   1ca56:	4806      	ldr	r0, [pc, #24]	; (1ca70 <am_util_stdio_printf+0x44>)
   1ca58:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   1ca5a:	687b      	ldr	r3, [r7, #4]
}
   1ca5c:	4618      	mov	r0, r3
   1ca5e:	3708      	adds	r7, #8
   1ca60:	46bd      	mov	sp, r7
   1ca62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1ca66:	b004      	add	sp, #16
   1ca68:	4770      	bx	lr
   1ca6a:	bf00      	nop
   1ca6c:	1000b1c8 	.word	0x1000b1c8
   1ca70:	100052b4 	.word	0x100052b4

0001ca74 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
   1ca74:	b580      	push	{r7, lr}
   1ca76:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   1ca78:	4802      	ldr	r0, [pc, #8]	; (1ca84 <am_util_stdio_terminal_clear+0x10>)
   1ca7a:	f7ff ffd7 	bl	1ca2c <am_util_stdio_printf>
}
   1ca7e:	bf00      	nop
   1ca80:	bd80      	pop	{r7, pc}
   1ca82:	bf00      	nop
   1ca84:	00024df8 	.word	0x00024df8

0001ca88 <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   1ca88:	b590      	push	{r4, r7, lr}
   1ca8a:	b087      	sub	sp, #28
   1ca8c:	af00      	add	r7, sp, #0
   1ca8e:	4603      	mov	r3, r0
   1ca90:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1ca92:	79fb      	ldrb	r3, [r7, #7]
   1ca94:	3b01      	subs	r3, #1
   1ca96:	011b      	lsls	r3, r3, #4
   1ca98:	4a29      	ldr	r2, [pc, #164]	; (1cb40 <appDiscStart+0xb8>)
   1ca9a:	4413      	add	r3, r2
   1ca9c:	613b      	str	r3, [r7, #16]

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1ca9e:	693b      	ldr	r3, [r7, #16]
   1caa0:	7adb      	ldrb	r3, [r3, #11]
   1caa2:	2b00      	cmp	r3, #0
   1caa4:	d148      	bne.n	1cb38 <appDiscStart+0xb0>
  {
    /* get discovery status */
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1caa6:	79fb      	ldrb	r3, [r7, #7]
   1caa8:	4618      	mov	r0, r3
   1caaa:	f000 fca1 	bl	1d3f0 <AppDbGetHdl>
   1caae:	60f8      	str	r0, [r7, #12]
   1cab0:	68fb      	ldr	r3, [r7, #12]
   1cab2:	2b00      	cmp	r3, #0
   1cab4:	d005      	beq.n	1cac2 <appDiscStart+0x3a>
    {
      status = AppDbGetDiscStatus(hdl);
   1cab6:	68f8      	ldr	r0, [r7, #12]
   1cab8:	f7f6 ff86 	bl	139c8 <AppDbGetDiscStatus>
   1cabc:	4603      	mov	r3, r0
   1cabe:	75fb      	strb	r3, [r7, #23]
   1cac0:	e002      	b.n	1cac8 <appDiscStart+0x40>
    }
    else
    {
      status = pAppDiscCb->cmplStatus;
   1cac2:	693b      	ldr	r3, [r7, #16]
   1cac4:	7a5b      	ldrb	r3, [r3, #9]
   1cac6:	75fb      	strb	r3, [r7, #23]
    }
  
    /* if discovery not complete */
    if (status < APP_DISC_CMPL)
   1cac8:	7dfb      	ldrb	r3, [r7, #23]
   1caca:	2b02      	cmp	r3, #2
   1cacc:	d806      	bhi.n	1cadc <appDiscStart+0x54>
    {
      /* notify application to start discovery */
      (*appDiscCback)(connId, APP_DISC_START);      
   1cace:	4b1d      	ldr	r3, [pc, #116]	; (1cb44 <appDiscStart+0xbc>)
   1cad0:	681b      	ldr	r3, [r3, #0]
   1cad2:	79fa      	ldrb	r2, [r7, #7]
   1cad4:	2102      	movs	r1, #2
   1cad6:	4610      	mov	r0, r2
   1cad8:	4798      	blx	r3
      {
        (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
      }
    }
  }
}
   1cada:	e02d      	b.n	1cb38 <appDiscStart+0xb0>
    else if (status != APP_DISC_FAILED)
   1cadc:	7dfb      	ldrb	r3, [r7, #23]
   1cade:	2b04      	cmp	r3, #4
   1cae0:	d02a      	beq.n	1cb38 <appDiscStart+0xb0>
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   1cae2:	68fb      	ldr	r3, [r7, #12]
   1cae4:	2b00      	cmp	r3, #0
   1cae6:	d010      	beq.n	1cb0a <appDiscStart+0x82>
   1cae8:	693b      	ldr	r3, [r7, #16]
   1caea:	685b      	ldr	r3, [r3, #4]
   1caec:	2b00      	cmp	r3, #0
   1caee:	d00c      	beq.n	1cb0a <appDiscStart+0x82>
        memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1caf0:	693b      	ldr	r3, [r7, #16]
   1caf2:	685c      	ldr	r4, [r3, #4]
   1caf4:	68f8      	ldr	r0, [r7, #12]
   1caf6:	f7f6 ff84 	bl	13a02 <AppDbGetHdlList>
   1cafa:	4601      	mov	r1, r0
   1cafc:	693b      	ldr	r3, [r7, #16]
   1cafe:	7a9b      	ldrb	r3, [r3, #10]
   1cb00:	005b      	lsls	r3, r3, #1
   1cb02:	461a      	mov	r2, r3
   1cb04:	4620      	mov	r0, r4
   1cb06:	f7ef fb2b 	bl	c160 <memcpy>
      if (status < APP_DISC_CFG_CMPL)
   1cb0a:	7dfb      	ldrb	r3, [r7, #23]
   1cb0c:	2b06      	cmp	r3, #6
   1cb0e:	d806      	bhi.n	1cb1e <appDiscStart+0x96>
        (*appDiscCback)(connId, APP_DISC_CFG_START);          
   1cb10:	4b0c      	ldr	r3, [pc, #48]	; (1cb44 <appDiscStart+0xbc>)
   1cb12:	681b      	ldr	r3, [r3, #0]
   1cb14:	79fa      	ldrb	r2, [r7, #7]
   1cb16:	2105      	movs	r1, #5
   1cb18:	4610      	mov	r0, r2
   1cb1a:	4798      	blx	r3
}
   1cb1c:	e00c      	b.n	1cb38 <appDiscStart+0xb0>
      else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1cb1e:	7dfb      	ldrb	r3, [r7, #23]
   1cb20:	2b07      	cmp	r3, #7
   1cb22:	d109      	bne.n	1cb38 <appDiscStart+0xb0>
   1cb24:	693b      	ldr	r3, [r7, #16]
   1cb26:	7a1b      	ldrb	r3, [r3, #8]
   1cb28:	2b00      	cmp	r3, #0
   1cb2a:	d105      	bne.n	1cb38 <appDiscStart+0xb0>
        (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1cb2c:	4b05      	ldr	r3, [pc, #20]	; (1cb44 <appDiscStart+0xbc>)
   1cb2e:	681b      	ldr	r3, [r3, #0]
   1cb30:	79fa      	ldrb	r2, [r7, #7]
   1cb32:	2106      	movs	r1, #6
   1cb34:	4610      	mov	r0, r2
   1cb36:	4798      	blx	r3
}
   1cb38:	bf00      	nop
   1cb3a:	371c      	adds	r7, #28
   1cb3c:	46bd      	mov	sp, r7
   1cb3e:	bd90      	pop	{r4, r7, pc}
   1cb40:	100053b8 	.word	0x100053b8
   1cb44:	10005438 	.word	0x10005438

0001cb48 <appDiscConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnOpen(dmEvt_t *pMsg)
{
   1cb48:	b580      	push	{r7, lr}
   1cb4a:	b084      	sub	sp, #16
   1cb4c:	af00      	add	r7, sp, #0
   1cb4e:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1cb50:	687b      	ldr	r3, [r7, #4]
   1cb52:	881b      	ldrh	r3, [r3, #0]
   1cb54:	b2db      	uxtb	r3, r3
   1cb56:	3b01      	subs	r3, #1
   1cb58:	011b      	lsls	r3, r3, #4
   1cb5a:	4a1b      	ldr	r2, [pc, #108]	; (1cbc8 <appDiscConnOpen+0x80>)
   1cb5c:	4413      	add	r3, r2
   1cb5e:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->alreadySecure = FALSE;
   1cb60:	68fb      	ldr	r3, [r7, #12]
   1cb62:	2200      	movs	r2, #0
   1cb64:	731a      	strb	r2, [r3, #12]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1cb66:	68fb      	ldr	r3, [r7, #12]
   1cb68:	2200      	movs	r2, #0
   1cb6a:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   1cb6c:	68fb      	ldr	r3, [r7, #12]
   1cb6e:	2200      	movs	r2, #0
   1cb70:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   1cb72:	68fb      	ldr	r3, [r7, #12]
   1cb74:	2200      	movs	r2, #0
   1cb76:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   1cb78:	68fb      	ldr	r3, [r7, #12]
   1cb7a:	2200      	movs	r2, #0
   1cb7c:	739a      	strb	r2, [r3, #14]
  
  /* tell app to set up handle list */
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1cb7e:	4b13      	ldr	r3, [pc, #76]	; (1cbcc <appDiscConnOpen+0x84>)
   1cb80:	681b      	ldr	r3, [r3, #0]
   1cb82:	687a      	ldr	r2, [r7, #4]
   1cb84:	8812      	ldrh	r2, [r2, #0]
   1cb86:	b2d2      	uxtb	r2, r2
   1cb88:	2100      	movs	r1, #0
   1cb8a:	4610      	mov	r0, r2
   1cb8c:	4798      	blx	r3
  
  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1cb8e:	68fb      	ldr	r3, [r7, #12]
   1cb90:	685b      	ldr	r3, [r3, #4]
   1cb92:	2b00      	cmp	r3, #0
   1cb94:	d008      	beq.n	1cba8 <appDiscConnOpen+0x60>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1cb96:	68fb      	ldr	r3, [r7, #12]
   1cb98:	6858      	ldr	r0, [r3, #4]
   1cb9a:	68fb      	ldr	r3, [r7, #12]
   1cb9c:	7a9b      	ldrb	r3, [r3, #10]
   1cb9e:	005b      	lsls	r3, r3, #1
   1cba0:	461a      	mov	r2, r3
   1cba2:	2100      	movs	r1, #0
   1cba4:	f7ef fbda 	bl	c35c <memset>
  }
  
  /* if not waiting for security start discovery/configuration */
  if (!pAppDiscCfg->waitForSec)
   1cba8:	4b09      	ldr	r3, [pc, #36]	; (1cbd0 <appDiscConnOpen+0x88>)
   1cbaa:	681b      	ldr	r3, [r3, #0]
   1cbac:	781b      	ldrb	r3, [r3, #0]
   1cbae:	2b00      	cmp	r3, #0
   1cbb0:	d105      	bne.n	1cbbe <appDiscConnOpen+0x76>
  {
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1cbb2:	687b      	ldr	r3, [r7, #4]
   1cbb4:	881b      	ldrh	r3, [r3, #0]
   1cbb6:	b2db      	uxtb	r3, r3
   1cbb8:	4618      	mov	r0, r3
   1cbba:	f7ff ff65 	bl	1ca88 <appDiscStart>
  }
}
   1cbbe:	bf00      	nop
   1cbc0:	3710      	adds	r7, #16
   1cbc2:	46bd      	mov	sp, r7
   1cbc4:	bd80      	pop	{r7, pc}
   1cbc6:	bf00      	nop
   1cbc8:	100053b8 	.word	0x100053b8
   1cbcc:	10005438 	.word	0x10005438
   1cbd0:	1000b1e0 	.word	0x1000b1e0

0001cbd4 <appDiscConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnClose(dmEvt_t *pMsg)
{
   1cbd4:	b580      	push	{r7, lr}
   1cbd6:	b084      	sub	sp, #16
   1cbd8:	af00      	add	r7, sp, #0
   1cbda:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1cbdc:	687b      	ldr	r3, [r7, #4]
   1cbde:	881b      	ldrh	r3, [r3, #0]
   1cbe0:	b2db      	uxtb	r3, r3
   1cbe2:	3b01      	subs	r3, #1
   1cbe4:	011b      	lsls	r3, r3, #4
   1cbe6:	4a12      	ldr	r2, [pc, #72]	; (1cc30 <appDiscConnClose+0x5c>)
   1cbe8:	4413      	add	r3, r2
   1cbea:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1cbec:	68fb      	ldr	r3, [r7, #12]
   1cbee:	2200      	movs	r2, #0
   1cbf0:	72da      	strb	r2, [r3, #11]

  appDbHdl_t  hdl;
  
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1cbf2:	687b      	ldr	r3, [r7, #4]
   1cbf4:	881b      	ldrh	r3, [r3, #0]
   1cbf6:	b2db      	uxtb	r3, r3
   1cbf8:	4618      	mov	r0, r3
   1cbfa:	f000 fbf9 	bl	1d3f0 <AppDbGetHdl>
   1cbfe:	60b8      	str	r0, [r7, #8]
   1cc00:	68bb      	ldr	r3, [r7, #8]
   1cc02:	2b00      	cmp	r3, #0
   1cc04:	d003      	beq.n	1cc0e <appDiscConnClose+0x3a>
  {
    // reset discovery status
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   1cc06:	2100      	movs	r1, #0
   1cc08:	68b8      	ldr	r0, [r7, #8]
   1cc0a:	f7f6 feea 	bl	139e2 <AppDbSetDiscStatus>
  }


  if (pAppDiscCb->pDiscCb != NULL)
   1cc0e:	68fb      	ldr	r3, [r7, #12]
   1cc10:	681b      	ldr	r3, [r3, #0]
   1cc12:	2b00      	cmp	r3, #0
   1cc14:	d007      	beq.n	1cc26 <appDiscConnClose+0x52>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1cc16:	68fb      	ldr	r3, [r7, #12]
   1cc18:	681b      	ldr	r3, [r3, #0]
   1cc1a:	4618      	mov	r0, r3
   1cc1c:	f7f7 fc9a 	bl	14554 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1cc20:	68fb      	ldr	r3, [r7, #12]
   1cc22:	2200      	movs	r2, #0
   1cc24:	601a      	str	r2, [r3, #0]
  }
}
   1cc26:	bf00      	nop
   1cc28:	3710      	adds	r7, #16
   1cc2a:	46bd      	mov	sp, r7
   1cc2c:	bd80      	pop	{r7, pc}
   1cc2e:	bf00      	nop
   1cc30:	100053b8 	.word	0x100053b8

0001cc34 <appDiscPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscPairCmpl(dmEvt_t *pMsg)
{
   1cc34:	b580      	push	{r7, lr}
   1cc36:	b084      	sub	sp, #16
   1cc38:	af00      	add	r7, sp, #0
   1cc3a:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1cc3c:	687b      	ldr	r3, [r7, #4]
   1cc3e:	881b      	ldrh	r3, [r3, #0]
   1cc40:	b2db      	uxtb	r3, r3
   1cc42:	3b01      	subs	r3, #1
   1cc44:	011b      	lsls	r3, r3, #4
   1cc46:	4a30      	ldr	r2, [pc, #192]	; (1cd08 <appDiscPairCmpl+0xd4>)
   1cc48:	4413      	add	r3, r2
   1cc4a:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* procedures triggered by security are only executed once */
  if (pAppDiscCb->alreadySecure)
   1cc4c:	68fb      	ldr	r3, [r7, #12]
   1cc4e:	7b1b      	ldrb	r3, [r3, #12]
   1cc50:	2b00      	cmp	r3, #0
   1cc52:	d154      	bne.n	1ccfe <appDiscPairCmpl+0xca>
  {
    return;
  }

  /* if we are now bonded and discovery/configuration was performed before bonding */
  if (appCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   1cc54:	687b      	ldr	r3, [r7, #4]
   1cc56:	881b      	ldrh	r3, [r3, #0]
   1cc58:	b2db      	uxtb	r3, r3
   1cc5a:	4618      	mov	r0, r3
   1cc5c:	f000 faf2 	bl	1d244 <appCheckBonded>
   1cc60:	4603      	mov	r3, r0
   1cc62:	2b00      	cmp	r3, #0
   1cc64:	d03a      	beq.n	1ccdc <appDiscPairCmpl+0xa8>
   1cc66:	68fb      	ldr	r3, [r7, #12]
   1cc68:	7a5b      	ldrb	r3, [r3, #9]
   1cc6a:	2b00      	cmp	r3, #0
   1cc6c:	d036      	beq.n	1ccdc <appDiscPairCmpl+0xa8>
  {
    if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1cc6e:	687b      	ldr	r3, [r7, #4]
   1cc70:	881b      	ldrh	r3, [r3, #0]
   1cc72:	b2db      	uxtb	r3, r3
   1cc74:	4618      	mov	r0, r3
   1cc76:	f000 fbbb 	bl	1d3f0 <AppDbGetHdl>
   1cc7a:	60b8      	str	r0, [r7, #8]
   1cc7c:	68bb      	ldr	r3, [r7, #8]
   1cc7e:	2b00      	cmp	r3, #0
   1cc80:	d017      	beq.n	1ccb2 <appDiscPairCmpl+0x7e>
    {
      /* store discovery status */
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   1cc82:	68fb      	ldr	r3, [r7, #12]
   1cc84:	7a5b      	ldrb	r3, [r3, #9]
   1cc86:	4619      	mov	r1, r3
   1cc88:	68b8      	ldr	r0, [r7, #8]
   1cc8a:	f7f6 feaa 	bl	139e2 <AppDbSetDiscStatus>

      /* store handle list */
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   1cc8e:	68fb      	ldr	r3, [r7, #12]
   1cc90:	7a5b      	ldrb	r3, [r3, #9]
   1cc92:	2b03      	cmp	r3, #3
   1cc94:	d003      	beq.n	1cc9e <appDiscPairCmpl+0x6a>
   1cc96:	68fb      	ldr	r3, [r7, #12]
   1cc98:	7a5b      	ldrb	r3, [r3, #9]
   1cc9a:	2b07      	cmp	r3, #7
   1cc9c:	d109      	bne.n	1ccb2 <appDiscPairCmpl+0x7e>
      {
        if (pAppDiscCb->pHdlList != NULL)
   1cc9e:	68fb      	ldr	r3, [r7, #12]
   1cca0:	685b      	ldr	r3, [r3, #4]
   1cca2:	2b00      	cmp	r3, #0
   1cca4:	d005      	beq.n	1ccb2 <appDiscPairCmpl+0x7e>
        {
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1cca6:	68fb      	ldr	r3, [r7, #12]
   1cca8:	685b      	ldr	r3, [r3, #4]
   1ccaa:	4619      	mov	r1, r3
   1ccac:	68b8      	ldr	r0, [r7, #8]
   1ccae:	f7f6 feb4 	bl	13a1a <AppDbSetHdlList>
        }
      }
    }
    
    /* if configuration was waiting for security */
    if (pAppDiscCb->secRequired)
   1ccb2:	68fb      	ldr	r3, [r7, #12]
   1ccb4:	7b5b      	ldrb	r3, [r3, #13]
   1ccb6:	2b00      	cmp	r3, #0
   1ccb8:	d01c      	beq.n	1ccf4 <appDiscPairCmpl+0xc0>
    {
      pAppDiscCb->secRequired = FALSE;
   1ccba:	68fb      	ldr	r3, [r7, #12]
   1ccbc:	2200      	movs	r2, #0
   1ccbe:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1ccc0:	68fb      	ldr	r3, [r7, #12]
   1ccc2:	681b      	ldr	r3, [r3, #0]
   1ccc4:	2b00      	cmp	r3, #0
   1ccc6:	d015      	beq.n	1ccf4 <appDiscPairCmpl+0xc0>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1ccc8:	687b      	ldr	r3, [r7, #4]
   1ccca:	881b      	ldrh	r3, [r3, #0]
   1cccc:	b2da      	uxtb	r2, r3
   1ccce:	68fb      	ldr	r3, [r7, #12]
   1ccd0:	681b      	ldr	r3, [r3, #0]
   1ccd2:	4619      	mov	r1, r3
   1ccd4:	4610      	mov	r0, r2
   1ccd6:	f7ef febf 	bl	ca58 <AttcDiscConfigResume>
    if (pAppDiscCb->secRequired)
   1ccda:	e00b      	b.n	1ccf4 <appDiscPairCmpl+0xc0>
    }
  } 
  else {
    
    /* if waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1ccdc:	4b0b      	ldr	r3, [pc, #44]	; (1cd0c <appDiscPairCmpl+0xd8>)
   1ccde:	681b      	ldr	r3, [r3, #0]
   1cce0:	781b      	ldrb	r3, [r3, #0]
   1cce2:	2b00      	cmp	r3, #0
   1cce4:	d007      	beq.n	1ccf6 <appDiscPairCmpl+0xc2>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1cce6:	687b      	ldr	r3, [r7, #4]
   1cce8:	881b      	ldrh	r3, [r3, #0]
   1ccea:	b2db      	uxtb	r3, r3
   1ccec:	4618      	mov	r0, r3
   1ccee:	f7ff fecb 	bl	1ca88 <appDiscStart>
   1ccf2:	e000      	b.n	1ccf6 <appDiscPairCmpl+0xc2>
    if (pAppDiscCb->secRequired)
   1ccf4:	bf00      	nop
    }
  }  
    
  pAppDiscCb->alreadySecure = TRUE;
   1ccf6:	68fb      	ldr	r3, [r7, #12]
   1ccf8:	2201      	movs	r2, #1
   1ccfa:	731a      	strb	r2, [r3, #12]
   1ccfc:	e000      	b.n	1cd00 <appDiscPairCmpl+0xcc>
    return;
   1ccfe:	bf00      	nop
}
   1cd00:	3710      	adds	r7, #16
   1cd02:	46bd      	mov	sp, r7
   1cd04:	bd80      	pop	{r7, pc}
   1cd06:	bf00      	nop
   1cd08:	100053b8 	.word	0x100053b8
   1cd0c:	1000b1e0 	.word	0x1000b1e0

0001cd10 <appDiscEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscEncryptInd(dmEvt_t *pMsg)
{
   1cd10:	b580      	push	{r7, lr}
   1cd12:	b084      	sub	sp, #16
   1cd14:	af00      	add	r7, sp, #0
   1cd16:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1cd18:	687b      	ldr	r3, [r7, #4]
   1cd1a:	881b      	ldrh	r3, [r3, #0]
   1cd1c:	b2db      	uxtb	r3, r3
   1cd1e:	3b01      	subs	r3, #1
   1cd20:	011b      	lsls	r3, r3, #4
   1cd22:	4a19      	ldr	r2, [pc, #100]	; (1cd88 <appDiscEncryptInd+0x78>)
   1cd24:	4413      	add	r3, r2
   1cd26:	60fb      	str	r3, [r7, #12]

  /* if encrypted with ltk */
  if (pMsg->encryptInd.usingLtk)
   1cd28:	687b      	ldr	r3, [r7, #4]
   1cd2a:	791b      	ldrb	r3, [r3, #4]
   1cd2c:	2b00      	cmp	r3, #0
   1cd2e:	d028      	beq.n	1cd82 <appDiscEncryptInd+0x72>
  {
    /* procedures triggered by security are only executed once */
    if (pAppDiscCb->alreadySecure)
   1cd30:	68fb      	ldr	r3, [r7, #12]
   1cd32:	7b1b      	ldrb	r3, [r3, #12]
   1cd34:	2b00      	cmp	r3, #0
   1cd36:	d123      	bne.n	1cd80 <appDiscEncryptInd+0x70>
    {
      return;
    }

    /* if we waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1cd38:	4b14      	ldr	r3, [pc, #80]	; (1cd8c <appDiscEncryptInd+0x7c>)
   1cd3a:	681b      	ldr	r3, [r3, #0]
   1cd3c:	781b      	ldrb	r3, [r3, #0]
   1cd3e:	2b00      	cmp	r3, #0
   1cd40:	d006      	beq.n	1cd50 <appDiscEncryptInd+0x40>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1cd42:	687b      	ldr	r3, [r7, #4]
   1cd44:	881b      	ldrh	r3, [r3, #0]
   1cd46:	b2db      	uxtb	r3, r3
   1cd48:	4618      	mov	r0, r3
   1cd4a:	f7ff fe9d 	bl	1ca88 <appDiscStart>
   1cd4e:	e013      	b.n	1cd78 <appDiscEncryptInd+0x68>
    }
    /* else if configuration was waiting for security */
    else if (pAppDiscCb->secRequired)
   1cd50:	68fb      	ldr	r3, [r7, #12]
   1cd52:	7b5b      	ldrb	r3, [r3, #13]
   1cd54:	2b00      	cmp	r3, #0
   1cd56:	d00f      	beq.n	1cd78 <appDiscEncryptInd+0x68>
    {
      pAppDiscCb->secRequired = FALSE;
   1cd58:	68fb      	ldr	r3, [r7, #12]
   1cd5a:	2200      	movs	r2, #0
   1cd5c:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1cd5e:	68fb      	ldr	r3, [r7, #12]
   1cd60:	681b      	ldr	r3, [r3, #0]
   1cd62:	2b00      	cmp	r3, #0
   1cd64:	d008      	beq.n	1cd78 <appDiscEncryptInd+0x68>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1cd66:	687b      	ldr	r3, [r7, #4]
   1cd68:	881b      	ldrh	r3, [r3, #0]
   1cd6a:	b2da      	uxtb	r2, r3
   1cd6c:	68fb      	ldr	r3, [r7, #12]
   1cd6e:	681b      	ldr	r3, [r3, #0]
   1cd70:	4619      	mov	r1, r3
   1cd72:	4610      	mov	r0, r2
   1cd74:	f7ef fe70 	bl	ca58 <AttcDiscConfigResume>
      }
    }
      
    pAppDiscCb->alreadySecure = TRUE;
   1cd78:	68fb      	ldr	r3, [r7, #12]
   1cd7a:	2201      	movs	r2, #1
   1cd7c:	731a      	strb	r2, [r3, #12]
   1cd7e:	e000      	b.n	1cd82 <appDiscEncryptInd+0x72>
      return;
   1cd80:	bf00      	nop
  }
}
   1cd82:	3710      	adds	r7, #16
   1cd84:	46bd      	mov	sp, r7
   1cd86:	bd80      	pop	{r7, pc}
   1cd88:	100053b8 	.word	0x100053b8
   1cd8c:	1000b1e0 	.word	0x1000b1e0

0001cd90 <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   1cd90:	b580      	push	{r7, lr}
   1cd92:	b082      	sub	sp, #8
   1cd94:	af00      	add	r7, sp, #0
   1cd96:	6078      	str	r0, [r7, #4]
  switch(pMsg->hdr.event)
   1cd98:	687b      	ldr	r3, [r7, #4]
   1cd9a:	789b      	ldrb	r3, [r3, #2]
   1cd9c:	3b27      	subs	r3, #39	; 0x27
   1cd9e:	2b05      	cmp	r3, #5
   1cda0:	d81e      	bhi.n	1cde0 <AppDiscProcDmMsg+0x50>
   1cda2:	a201      	add	r2, pc, #4	; (adr r2, 1cda8 <AppDiscProcDmMsg+0x18>)
   1cda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cda8:	0001cdc1 	.word	0x0001cdc1
   1cdac:	0001cdc9 	.word	0x0001cdc9
   1cdb0:	0001cde1 	.word	0x0001cde1
   1cdb4:	0001cdd1 	.word	0x0001cdd1
   1cdb8:	0001cde1 	.word	0x0001cde1
   1cdbc:	0001cdd9 	.word	0x0001cdd9
  {
    case DM_CONN_OPEN_IND:
      appDiscConnOpen(pMsg);
   1cdc0:	6878      	ldr	r0, [r7, #4]
   1cdc2:	f7ff fec1 	bl	1cb48 <appDiscConnOpen>
      break;
   1cdc6:	e00c      	b.n	1cde2 <AppDiscProcDmMsg+0x52>

    case DM_CONN_CLOSE_IND:
      appDiscConnClose(pMsg);
   1cdc8:	6878      	ldr	r0, [r7, #4]
   1cdca:	f7ff ff03 	bl	1cbd4 <appDiscConnClose>
      break;
   1cdce:	e008      	b.n	1cde2 <AppDiscProcDmMsg+0x52>

    case DM_SEC_PAIR_CMPL_IND:
      appDiscPairCmpl(pMsg);
   1cdd0:	6878      	ldr	r0, [r7, #4]
   1cdd2:	f7ff ff2f 	bl	1cc34 <appDiscPairCmpl>
      break;
   1cdd6:	e004      	b.n	1cde2 <AppDiscProcDmMsg+0x52>
      
    case DM_SEC_ENCRYPT_IND:
      appDiscEncryptInd(pMsg);
   1cdd8:	6878      	ldr	r0, [r7, #4]
   1cdda:	f7ff ff99 	bl	1cd10 <appDiscEncryptInd>
      break;
   1cdde:	e000      	b.n	1cde2 <AppDiscProcDmMsg+0x52>
      
    default:
      break;
   1cde0:	bf00      	nop
  }
}
   1cde2:	bf00      	nop
   1cde4:	3708      	adds	r7, #8
   1cde6:	46bd      	mov	sp, r7
   1cde8:	bd80      	pop	{r7, pc}
   1cdea:	bf00      	nop

0001cdec <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   1cdec:	b580      	push	{r7, lr}
   1cdee:	b084      	sub	sp, #16
   1cdf0:	af00      	add	r7, sp, #0
   1cdf2:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1cdf4:	687b      	ldr	r3, [r7, #4]
   1cdf6:	881b      	ldrh	r3, [r3, #0]
   1cdf8:	b2db      	uxtb	r3, r3
   1cdfa:	3b01      	subs	r3, #1
   1cdfc:	011b      	lsls	r3, r3, #4
   1cdfe:	4a5c      	ldr	r2, [pc, #368]	; (1cf70 <AppDiscProcAttMsg+0x184>)
   1ce00:	4413      	add	r3, r2
   1ce02:	60fb      	str	r3, [r7, #12]
  uint8_t status;
  
  if (pAppDiscCb->inProgress == APP_DISC_IN_PROGRESS)
   1ce04:	68fb      	ldr	r3, [r7, #12]
   1ce06:	7adb      	ldrb	r3, [r3, #11]
   1ce08:	2b01      	cmp	r3, #1
   1ce0a:	d157      	bne.n	1cebc <AppDiscProcAttMsg+0xd0>
  {
    /* service discovery */
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   1ce0c:	687b      	ldr	r3, [r7, #4]
   1ce0e:	789b      	ldrb	r3, [r3, #2]
   1ce10:	2b03      	cmp	r3, #3
   1ce12:	d126      	bne.n	1ce62 <AppDiscProcAttMsg+0x76>
    {
      /* continue with service discovery */
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   1ce14:	68fb      	ldr	r3, [r7, #12]
   1ce16:	681b      	ldr	r3, [r3, #0]
   1ce18:	6879      	ldr	r1, [r7, #4]
   1ce1a:	4618      	mov	r0, r3
   1ce1c:	f7ef fcf8 	bl	c810 <AttcDiscServiceCmpl>
   1ce20:	4603      	mov	r3, r0
   1ce22:	72fb      	strb	r3, [r7, #11]
      
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   1ce24:	7afb      	ldrb	r3, [r7, #11]
   1ce26:	4619      	mov	r1, r3
   1ce28:	4852      	ldr	r0, [pc, #328]	; (1cf74 <AppDiscProcAttMsg+0x188>)
   1ce2a:	f7f8 fe95 	bl	15b58 <WsfTrace>
      
      /* if discovery complete  and successful */
      if (status == ATT_SUCCESS)
   1ce2e:	7afb      	ldrb	r3, [r7, #11]
   1ce30:	2b00      	cmp	r3, #0
   1ce32:	d109      	bne.n	1ce48 <AppDiscProcAttMsg+0x5c>
      {
        /* proceed with characteristic discovery */
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1ce34:	687b      	ldr	r3, [r7, #4]
   1ce36:	881b      	ldrh	r3, [r3, #0]
   1ce38:	b2da      	uxtb	r2, r3
   1ce3a:	68fb      	ldr	r3, [r7, #12]
   1ce3c:	681b      	ldr	r3, [r3, #0]
   1ce3e:	4619      	mov	r1, r3
   1ce40:	4610      	mov	r0, r2
   1ce42:	f7ef fcfe 	bl	c842 <AttcDiscCharStart>
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
      }
    }
  }
}
   1ce46:	e08e      	b.n	1cf66 <AppDiscProcAttMsg+0x17a>
      else if (status != ATT_CONTINUING)
   1ce48:	7afb      	ldrb	r3, [r7, #11]
   1ce4a:	2b78      	cmp	r3, #120	; 0x78
   1ce4c:	f000 808b 	beq.w	1cf66 <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1ce50:	4b49      	ldr	r3, [pc, #292]	; (1cf78 <AppDiscProcAttMsg+0x18c>)
   1ce52:	681b      	ldr	r3, [r3, #0]
   1ce54:	687a      	ldr	r2, [r7, #4]
   1ce56:	8812      	ldrh	r2, [r2, #0]
   1ce58:	b2d2      	uxtb	r2, r2
   1ce5a:	2104      	movs	r1, #4
   1ce5c:	4610      	mov	r0, r2
   1ce5e:	4798      	blx	r3
}
   1ce60:	e081      	b.n	1cf66 <AppDiscProcAttMsg+0x17a>
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1ce62:	687b      	ldr	r3, [r7, #4]
   1ce64:	789b      	ldrb	r3, [r3, #2]
   1ce66:	2b04      	cmp	r3, #4
   1ce68:	d003      	beq.n	1ce72 <AppDiscProcAttMsg+0x86>
             pMsg->hdr.event == ATTC_FIND_INFO_RSP)
   1ce6a:	687b      	ldr	r3, [r7, #4]
   1ce6c:	789b      	ldrb	r3, [r3, #2]
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1ce6e:	2b02      	cmp	r3, #2
   1ce70:	d179      	bne.n	1cf66 <AppDiscProcAttMsg+0x17a>
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   1ce72:	68fb      	ldr	r3, [r7, #12]
   1ce74:	681b      	ldr	r3, [r3, #0]
   1ce76:	6879      	ldr	r1, [r7, #4]
   1ce78:	4618      	mov	r0, r3
   1ce7a:	f7ef fcf5 	bl	c868 <AttcDiscCharCmpl>
   1ce7e:	4603      	mov	r3, r0
   1ce80:	72fb      	strb	r3, [r7, #11]
      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   1ce82:	7afb      	ldrb	r3, [r7, #11]
   1ce84:	4619      	mov	r1, r3
   1ce86:	483d      	ldr	r0, [pc, #244]	; (1cf7c <AppDiscProcAttMsg+0x190>)
   1ce88:	f7f8 fe66 	bl	15b58 <WsfTrace>
      if (status == ATT_SUCCESS)
   1ce8c:	7afb      	ldrb	r3, [r7, #11]
   1ce8e:	2b00      	cmp	r3, #0
   1ce90:	d108      	bne.n	1cea4 <AppDiscProcAttMsg+0xb8>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   1ce92:	4b39      	ldr	r3, [pc, #228]	; (1cf78 <AppDiscProcAttMsg+0x18c>)
   1ce94:	681b      	ldr	r3, [r3, #0]
   1ce96:	687a      	ldr	r2, [r7, #4]
   1ce98:	8812      	ldrh	r2, [r2, #0]
   1ce9a:	b2d2      	uxtb	r2, r2
   1ce9c:	2103      	movs	r1, #3
   1ce9e:	4610      	mov	r0, r2
   1cea0:	4798      	blx	r3
}
   1cea2:	e060      	b.n	1cf66 <AppDiscProcAttMsg+0x17a>
      else if (status != ATT_CONTINUING)
   1cea4:	7afb      	ldrb	r3, [r7, #11]
   1cea6:	2b78      	cmp	r3, #120	; 0x78
   1cea8:	d05d      	beq.n	1cf66 <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1ceaa:	4b33      	ldr	r3, [pc, #204]	; (1cf78 <AppDiscProcAttMsg+0x18c>)
   1ceac:	681b      	ldr	r3, [r3, #0]
   1ceae:	687a      	ldr	r2, [r7, #4]
   1ceb0:	8812      	ldrh	r2, [r2, #0]
   1ceb2:	b2d2      	uxtb	r2, r2
   1ceb4:	2104      	movs	r1, #4
   1ceb6:	4610      	mov	r0, r2
   1ceb8:	4798      	blx	r3
}
   1ceba:	e054      	b.n	1cf66 <AppDiscProcAttMsg+0x17a>
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1cebc:	68fb      	ldr	r3, [r7, #12]
   1cebe:	7adb      	ldrb	r3, [r3, #11]
   1cec0:	2b02      	cmp	r3, #2
   1cec2:	d150      	bne.n	1cf66 <AppDiscProcAttMsg+0x17a>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1cec4:	687b      	ldr	r3, [r7, #4]
   1cec6:	789b      	ldrb	r3, [r3, #2]
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1cec8:	2b05      	cmp	r3, #5
   1ceca:	d003      	beq.n	1ced4 <AppDiscProcAttMsg+0xe8>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1cecc:	687b      	ldr	r3, [r7, #4]
   1cece:	789b      	ldrb	r3, [r3, #2]
   1ced0:	2b09      	cmp	r3, #9
   1ced2:	d148      	bne.n	1cf66 <AppDiscProcAttMsg+0x17a>
    if (pAppDiscCb->scPending)
   1ced4:	68fb      	ldr	r3, [r7, #12]
   1ced6:	7b9b      	ldrb	r3, [r3, #14]
   1ced8:	2b00      	cmp	r3, #0
   1ceda:	d00c      	beq.n	1cef6 <AppDiscProcAttMsg+0x10a>
      pAppDiscCb->scPending = FALSE;
   1cedc:	68fb      	ldr	r3, [r7, #12]
   1cede:	2200      	movs	r2, #0
   1cee0:	739a      	strb	r2, [r3, #14]
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   1cee2:	68fb      	ldr	r3, [r7, #12]
   1cee4:	2200      	movs	r2, #0
   1cee6:	72da      	strb	r2, [r3, #11]
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1cee8:	687b      	ldr	r3, [r7, #4]
   1ceea:	881b      	ldrh	r3, [r3, #0]
   1ceec:	b2db      	uxtb	r3, r3
   1ceee:	4618      	mov	r0, r3
   1cef0:	f7ff fdca 	bl	1ca88 <appDiscStart>
}
   1cef4:	e037      	b.n	1cf66 <AppDiscProcAttMsg+0x17a>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1cef6:	687b      	ldr	r3, [r7, #4]
   1cef8:	78db      	ldrb	r3, [r3, #3]
   1cefa:	2b05      	cmp	r3, #5
   1cefc:	d003      	beq.n	1cf06 <AppDiscProcAttMsg+0x11a>
   1cefe:	687b      	ldr	r3, [r7, #4]
   1cf00:	78db      	ldrb	r3, [r3, #3]
   1cf02:	2b0f      	cmp	r3, #15
   1cf04:	d114      	bne.n	1cf30 <AppDiscProcAttMsg+0x144>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1cf06:	687b      	ldr	r3, [r7, #4]
   1cf08:	881b      	ldrh	r3, [r3, #0]
   1cf0a:	b2db      	uxtb	r3, r3
   1cf0c:	4618      	mov	r0, r3
   1cf0e:	f7f2 fcf9 	bl	f904 <DmConnSecLevel>
   1cf12:	4603      	mov	r3, r0
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1cf14:	2b00      	cmp	r3, #0
   1cf16:	d10b      	bne.n	1cf30 <AppDiscProcAttMsg+0x144>
      pAppDiscCb->secRequired = TRUE;
   1cf18:	68fb      	ldr	r3, [r7, #12]
   1cf1a:	2201      	movs	r2, #1
   1cf1c:	735a      	strb	r2, [r3, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1cf1e:	4b16      	ldr	r3, [pc, #88]	; (1cf78 <AppDiscProcAttMsg+0x18c>)
   1cf20:	681b      	ldr	r3, [r3, #0]
   1cf22:	687a      	ldr	r2, [r7, #4]
   1cf24:	8812      	ldrh	r2, [r2, #0]
   1cf26:	b2d2      	uxtb	r2, r2
   1cf28:	2101      	movs	r1, #1
   1cf2a:	4610      	mov	r0, r2
   1cf2c:	4798      	blx	r3
}
   1cf2e:	e01a      	b.n	1cf66 <AppDiscProcAttMsg+0x17a>
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1cf30:	687b      	ldr	r3, [r7, #4]
   1cf32:	881b      	ldrh	r3, [r3, #0]
   1cf34:	b2da      	uxtb	r2, r3
   1cf36:	68fb      	ldr	r3, [r7, #12]
   1cf38:	681b      	ldr	r3, [r3, #0]
   1cf3a:	4619      	mov	r1, r3
   1cf3c:	4610      	mov	r0, r2
   1cf3e:	f7ef fd87 	bl	ca50 <AttcDiscConfigCmpl>
   1cf42:	4603      	mov	r3, r0
   1cf44:	72fb      	strb	r3, [r7, #11]
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   1cf46:	7afb      	ldrb	r3, [r7, #11]
   1cf48:	4619      	mov	r1, r3
   1cf4a:	480d      	ldr	r0, [pc, #52]	; (1cf80 <AppDiscProcAttMsg+0x194>)
   1cf4c:	f7f8 fe04 	bl	15b58 <WsfTrace>
      if (status != ATT_CONTINUING)
   1cf50:	7afb      	ldrb	r3, [r7, #11]
   1cf52:	2b78      	cmp	r3, #120	; 0x78
   1cf54:	d007      	beq.n	1cf66 <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1cf56:	4b08      	ldr	r3, [pc, #32]	; (1cf78 <AppDiscProcAttMsg+0x18c>)
   1cf58:	681b      	ldr	r3, [r3, #0]
   1cf5a:	687a      	ldr	r2, [r7, #4]
   1cf5c:	8812      	ldrh	r2, [r2, #0]
   1cf5e:	b2d2      	uxtb	r2, r2
   1cf60:	2107      	movs	r1, #7
   1cf62:	4610      	mov	r0, r2
   1cf64:	4798      	blx	r3
}
   1cf66:	bf00      	nop
   1cf68:	3710      	adds	r7, #16
   1cf6a:	46bd      	mov	sp, r7
   1cf6c:	bd80      	pop	{r7, pc}
   1cf6e:	bf00      	nop
   1cf70:	100053b8 	.word	0x100053b8
   1cf74:	00024e0c 	.word	0x00024e0c
   1cf78:	10005438 	.word	0x10005438
   1cf7c:	00024e30 	.word	0x00024e30
   1cf80:	00024e50 	.word	0x00024e50

0001cf84 <AppDiscInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscInit(void)
{
   1cf84:	b480      	push	{r7}
   1cf86:	b083      	sub	sp, #12
   1cf88:	af00      	add	r7, sp, #0
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
   1cf8a:	2300      	movs	r3, #0
   1cf8c:	71fb      	strb	r3, [r7, #7]
   1cf8e:	e00f      	b.n	1cfb0 <AppDiscInit+0x2c>
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1cf90:	79fb      	ldrb	r3, [r7, #7]
   1cf92:	4a0c      	ldr	r2, [pc, #48]	; (1cfc4 <AppDiscInit+0x40>)
   1cf94:	011b      	lsls	r3, r3, #4
   1cf96:	4413      	add	r3, r2
   1cf98:	330b      	adds	r3, #11
   1cf9a:	2200      	movs	r2, #0
   1cf9c:	701a      	strb	r2, [r3, #0]
    appDiscCb[i].pDiscCb = NULL;
   1cf9e:	79fb      	ldrb	r3, [r7, #7]
   1cfa0:	4a08      	ldr	r2, [pc, #32]	; (1cfc4 <AppDiscInit+0x40>)
   1cfa2:	011b      	lsls	r3, r3, #4
   1cfa4:	4413      	add	r3, r2
   1cfa6:	2200      	movs	r2, #0
   1cfa8:	601a      	str	r2, [r3, #0]
  for (i=0; i<DM_CONN_MAX; i++)
   1cfaa:	79fb      	ldrb	r3, [r7, #7]
   1cfac:	3301      	adds	r3, #1
   1cfae:	71fb      	strb	r3, [r7, #7]
   1cfb0:	79fb      	ldrb	r3, [r7, #7]
   1cfb2:	2b07      	cmp	r3, #7
   1cfb4:	d9ec      	bls.n	1cf90 <AppDiscInit+0xc>
  }
}
   1cfb6:	bf00      	nop
   1cfb8:	370c      	adds	r7, #12
   1cfba:	46bd      	mov	sp, r7
   1cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cfc0:	4770      	bx	lr
   1cfc2:	bf00      	nop
   1cfc4:	100053b8 	.word	0x100053b8

0001cfc8 <AppDiscRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
   1cfc8:	b480      	push	{r7}
   1cfca:	b083      	sub	sp, #12
   1cfcc:	af00      	add	r7, sp, #0
   1cfce:	6078      	str	r0, [r7, #4]
  appDiscCback = cback;
   1cfd0:	4a04      	ldr	r2, [pc, #16]	; (1cfe4 <AppDiscRegister+0x1c>)
   1cfd2:	687b      	ldr	r3, [r7, #4]
   1cfd4:	6013      	str	r3, [r2, #0]
}
   1cfd6:	bf00      	nop
   1cfd8:	370c      	adds	r7, #12
   1cfda:	46bd      	mov	sp, r7
   1cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cfe0:	4770      	bx	lr
   1cfe2:	bf00      	nop
   1cfe4:	10005438 	.word	0x10005438

0001cfe8 <AppDiscSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1cfe8:	b480      	push	{r7}
   1cfea:	b085      	sub	sp, #20
   1cfec:	af00      	add	r7, sp, #0
   1cfee:	4603      	mov	r3, r0
   1cff0:	603a      	str	r2, [r7, #0]
   1cff2:	71fb      	strb	r3, [r7, #7]
   1cff4:	460b      	mov	r3, r1
   1cff6:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1cff8:	79fb      	ldrb	r3, [r7, #7]
   1cffa:	3b01      	subs	r3, #1
   1cffc:	011b      	lsls	r3, r3, #4
   1cffe:	4a07      	ldr	r2, [pc, #28]	; (1d01c <AppDiscSetHdlList+0x34>)
   1d000:	4413      	add	r3, r2
   1d002:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->hdlListLen = hdlListLen;
   1d004:	68fb      	ldr	r3, [r7, #12]
   1d006:	79ba      	ldrb	r2, [r7, #6]
   1d008:	729a      	strb	r2, [r3, #10]
  pAppDiscCb->pHdlList = pHdlList;
   1d00a:	68fb      	ldr	r3, [r7, #12]
   1d00c:	683a      	ldr	r2, [r7, #0]
   1d00e:	605a      	str	r2, [r3, #4]
}
   1d010:	bf00      	nop
   1d012:	3714      	adds	r7, #20
   1d014:	46bd      	mov	sp, r7
   1d016:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d01a:	4770      	bx	lr
   1d01c:	100053b8 	.word	0x100053b8

0001d020 <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   1d020:	b580      	push	{r7, lr}
   1d022:	b084      	sub	sp, #16
   1d024:	af00      	add	r7, sp, #0
   1d026:	4603      	mov	r3, r0
   1d028:	460a      	mov	r2, r1
   1d02a:	71fb      	strb	r3, [r7, #7]
   1d02c:	4613      	mov	r3, r2
   1d02e:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1d030:	79fb      	ldrb	r3, [r7, #7]
   1d032:	3b01      	subs	r3, #1
   1d034:	011b      	lsls	r3, r3, #4
   1d036:	4a29      	ldr	r2, [pc, #164]	; (1d0dc <AppDiscComplete+0xbc>)
   1d038:	4413      	add	r3, r2
   1d03a:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1d03c:	79fb      	ldrb	r3, [r7, #7]
   1d03e:	2200      	movs	r2, #0
   1d040:	2108      	movs	r1, #8
   1d042:	4618      	mov	r0, r3
   1d044:	f7f2 fc68 	bl	f918 <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1d048:	79bb      	ldrb	r3, [r7, #6]
   1d04a:	2b07      	cmp	r3, #7
   1d04c:	d103      	bne.n	1d056 <AppDiscComplete+0x36>
   1d04e:	68fb      	ldr	r3, [r7, #12]
   1d050:	7a1b      	ldrb	r3, [r3, #8]
   1d052:	2b06      	cmp	r3, #6
   1d054:	d002      	beq.n	1d05c <AppDiscComplete+0x3c>
  {
    pAppDiscCb->cmplStatus = status;
   1d056:	68fb      	ldr	r3, [r7, #12]
   1d058:	79ba      	ldrb	r2, [r7, #6]
   1d05a:	725a      	strb	r2, [r3, #9]
  }
  
  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1d05c:	68fb      	ldr	r3, [r7, #12]
   1d05e:	2200      	movs	r2, #0
   1d060:	72da      	strb	r2, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   1d062:	68fb      	ldr	r3, [r7, #12]
   1d064:	681b      	ldr	r3, [r3, #0]
   1d066:	2b00      	cmp	r3, #0
   1d068:	d007      	beq.n	1d07a <AppDiscComplete+0x5a>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1d06a:	68fb      	ldr	r3, [r7, #12]
   1d06c:	681b      	ldr	r3, [r3, #0]
   1d06e:	4618      	mov	r0, r3
   1d070:	f7f7 fa70 	bl	14554 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1d074:	68fb      	ldr	r3, [r7, #12]
   1d076:	2200      	movs	r2, #0
   1d078:	601a      	str	r2, [r3, #0]
  }
  
  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1d07a:	79fb      	ldrb	r3, [r7, #7]
   1d07c:	4618      	mov	r0, r3
   1d07e:	f000 f9b7 	bl	1d3f0 <AppDbGetHdl>
   1d082:	60b8      	str	r0, [r7, #8]
   1d084:	68bb      	ldr	r3, [r7, #8]
   1d086:	2b00      	cmp	r3, #0
   1d088:	d018      	beq.n	1d0bc <AppDiscComplete+0x9c>
  {
    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1d08a:	79bb      	ldrb	r3, [r7, #6]
   1d08c:	2b07      	cmp	r3, #7
   1d08e:	d103      	bne.n	1d098 <AppDiscComplete+0x78>
   1d090:	68fb      	ldr	r3, [r7, #12]
   1d092:	7a1b      	ldrb	r3, [r3, #8]
   1d094:	2b06      	cmp	r3, #6
   1d096:	d004      	beq.n	1d0a2 <AppDiscComplete+0x82>
    {
      AppDbSetDiscStatus(hdl, status);
   1d098:	79bb      	ldrb	r3, [r7, #6]
   1d09a:	4619      	mov	r1, r3
   1d09c:	68b8      	ldr	r0, [r7, #8]
   1d09e:	f7f6 fca0 	bl	139e2 <AppDbSetDiscStatus>
    }

    if (pAppDiscCb->pHdlList != NULL)
   1d0a2:	68fb      	ldr	r3, [r7, #12]
   1d0a4:	685b      	ldr	r3, [r3, #4]
   1d0a6:	2b00      	cmp	r3, #0
   1d0a8:	d008      	beq.n	1d0bc <AppDiscComplete+0x9c>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   1d0aa:	79bb      	ldrb	r3, [r7, #6]
   1d0ac:	2b03      	cmp	r3, #3
   1d0ae:	d105      	bne.n	1d0bc <AppDiscComplete+0x9c>
      {
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1d0b0:	68fb      	ldr	r3, [r7, #12]
   1d0b2:	685b      	ldr	r3, [r3, #4]
   1d0b4:	4619      	mov	r1, r3
   1d0b6:	68b8      	ldr	r0, [r7, #8]
   1d0b8:	f7f6 fcaf 	bl	13a1a <AppDbSetHdlList>
  }
  
  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   1d0bc:	79bb      	ldrb	r3, [r7, #6]
   1d0be:	2b07      	cmp	r3, #7
   1d0c0:	d102      	bne.n	1d0c8 <AppDiscComplete+0xa8>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   1d0c2:	68fb      	ldr	r3, [r7, #12]
   1d0c4:	2207      	movs	r2, #7
   1d0c6:	721a      	strb	r2, [r3, #8]
  }
  
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1d0c8:	79fb      	ldrb	r3, [r7, #7]
   1d0ca:	79ba      	ldrb	r2, [r7, #6]
   1d0cc:	4619      	mov	r1, r3
   1d0ce:	4804      	ldr	r0, [pc, #16]	; (1d0e0 <AppDiscComplete+0xc0>)
   1d0d0:	f7f8 fd42 	bl	15b58 <WsfTrace>
}
   1d0d4:	bf00      	nop
   1d0d6:	3710      	adds	r7, #16
   1d0d8:	46bd      	mov	sp, r7
   1d0da:	bd80      	pop	{r7, pc}
   1d0dc:	100053b8 	.word	0x100053b8
   1d0e0:	00024e74 	.word	0x00024e74

0001d0e4 <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   1d0e4:	b580      	push	{r7, lr}
   1d0e6:	b084      	sub	sp, #16
   1d0e8:	af00      	add	r7, sp, #0
   1d0ea:	603a      	str	r2, [r7, #0]
   1d0ec:	461a      	mov	r2, r3
   1d0ee:	4603      	mov	r3, r0
   1d0f0:	71fb      	strb	r3, [r7, #7]
   1d0f2:	460b      	mov	r3, r1
   1d0f4:	71bb      	strb	r3, [r7, #6]
   1d0f6:	4613      	mov	r3, r2
   1d0f8:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1d0fa:	79fb      	ldrb	r3, [r7, #7]
   1d0fc:	3b01      	subs	r3, #1
   1d0fe:	011b      	lsls	r3, r3, #4
   1d100:	4a18      	ldr	r2, [pc, #96]	; (1d164 <AppDiscFindService+0x80>)
   1d102:	4413      	add	r3, r2
   1d104:	60fb      	str	r3, [r7, #12]

  if (pAppDiscCb->pDiscCb == NULL)
   1d106:	68fb      	ldr	r3, [r7, #12]
   1d108:	681b      	ldr	r3, [r3, #0]
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	d105      	bne.n	1d11a <AppDiscFindService+0x36>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1d10e:	2014      	movs	r0, #20
   1d110:	f7f7 f9e0 	bl	144d4 <WsfBufAlloc>
   1d114:	4602      	mov	r2, r0
   1d116:	68fb      	ldr	r3, [r7, #12]
   1d118:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1d11a:	68fb      	ldr	r3, [r7, #12]
   1d11c:	681b      	ldr	r3, [r3, #0]
   1d11e:	2b00      	cmp	r3, #0
   1d120:	d01b      	beq.n	1d15a <AppDiscFindService+0x76>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1d122:	79fb      	ldrb	r3, [r7, #7]
   1d124:	2201      	movs	r2, #1
   1d126:	2108      	movs	r1, #8
   1d128:	4618      	mov	r0, r3
   1d12a:	f7f2 fbf5 	bl	f918 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_IN_PROGRESS;
   1d12e:	68fb      	ldr	r3, [r7, #12]
   1d130:	2201      	movs	r2, #1
   1d132:	72da      	strb	r2, [r3, #11]
 
    pAppDiscCb->pDiscCb->pCharList = pCharList;
   1d134:	68fb      	ldr	r3, [r7, #12]
   1d136:	681b      	ldr	r3, [r3, #0]
   1d138:	69ba      	ldr	r2, [r7, #24]
   1d13a:	601a      	str	r2, [r3, #0]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1d13c:	68fb      	ldr	r3, [r7, #12]
   1d13e:	681b      	ldr	r3, [r3, #0]
   1d140:	69fa      	ldr	r2, [r7, #28]
   1d142:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   1d144:	68fb      	ldr	r3, [r7, #12]
   1d146:	681b      	ldr	r3, [r3, #0]
   1d148:	797a      	ldrb	r2, [r7, #5]
   1d14a:	731a      	strb	r2, [r3, #12]
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1d14c:	68fb      	ldr	r3, [r7, #12]
   1d14e:	6819      	ldr	r1, [r3, #0]
   1d150:	79ba      	ldrb	r2, [r7, #6]
   1d152:	79f8      	ldrb	r0, [r7, #7]
   1d154:	683b      	ldr	r3, [r7, #0]
   1d156:	f7ef fb4c 	bl	c7f2 <AttcDiscService>
  }
}
   1d15a:	bf00      	nop
   1d15c:	3710      	adds	r7, #16
   1d15e:	46bd      	mov	sp, r7
   1d160:	bd80      	pop	{r7, pc}
   1d162:	bf00      	nop
   1d164:	100053b8 	.word	0x100053b8

0001d168 <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1d168:	b580      	push	{r7, lr}
   1d16a:	b084      	sub	sp, #16
   1d16c:	af00      	add	r7, sp, #0
   1d16e:	603b      	str	r3, [r7, #0]
   1d170:	4603      	mov	r3, r0
   1d172:	71fb      	strb	r3, [r7, #7]
   1d174:	460b      	mov	r3, r1
   1d176:	71bb      	strb	r3, [r7, #6]
   1d178:	4613      	mov	r3, r2
   1d17a:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1d17c:	79fb      	ldrb	r3, [r7, #7]
   1d17e:	3b01      	subs	r3, #1
   1d180:	011b      	lsls	r3, r3, #4
   1d182:	4a23      	ldr	r2, [pc, #140]	; (1d210 <AppDiscConfigure+0xa8>)
   1d184:	4413      	add	r3, r2
   1d186:	60fb      	str	r3, [r7, #12]
  uint8_t ret;
  
  if (pAppDiscCb->pDiscCb == NULL)
   1d188:	68fb      	ldr	r3, [r7, #12]
   1d18a:	681b      	ldr	r3, [r3, #0]
   1d18c:	2b00      	cmp	r3, #0
   1d18e:	d105      	bne.n	1d19c <AppDiscConfigure+0x34>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1d190:	2014      	movs	r0, #20
   1d192:	f7f7 f99f 	bl	144d4 <WsfBufAlloc>
   1d196:	4602      	mov	r2, r0
   1d198:	68fb      	ldr	r3, [r7, #12]
   1d19a:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1d19c:	68fb      	ldr	r3, [r7, #12]
   1d19e:	681b      	ldr	r3, [r3, #0]
   1d1a0:	2b00      	cmp	r3, #0
   1d1a2:	d030      	beq.n	1d206 <AppDiscConfigure+0x9e>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1d1a4:	79fb      	ldrb	r3, [r7, #7]
   1d1a6:	2201      	movs	r2, #1
   1d1a8:	2108      	movs	r1, #8
   1d1aa:	4618      	mov	r0, r3
   1d1ac:	f7f2 fbb4 	bl	f918 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1d1b0:	68fb      	ldr	r3, [r7, #12]
   1d1b2:	2202      	movs	r2, #2
   1d1b4:	72da      	strb	r2, [r3, #11]
 
    if (status == APP_DISC_CFG_CONN_START)
   1d1b6:	79bb      	ldrb	r3, [r7, #6]
   1d1b8:	2b06      	cmp	r3, #6
   1d1ba:	d102      	bne.n	1d1c2 <AppDiscConfigure+0x5a>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   1d1bc:	68fb      	ldr	r3, [r7, #12]
   1d1be:	2206      	movs	r2, #6
   1d1c0:	721a      	strb	r2, [r3, #8]
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1d1c2:	68fb      	ldr	r3, [r7, #12]
   1d1c4:	681b      	ldr	r3, [r3, #0]
   1d1c6:	683a      	ldr	r2, [r7, #0]
   1d1c8:	609a      	str	r2, [r3, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   1d1ca:	68fb      	ldr	r3, [r7, #12]
   1d1cc:	681b      	ldr	r3, [r3, #0]
   1d1ce:	797a      	ldrb	r2, [r7, #5]
   1d1d0:	735a      	strb	r2, [r3, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1d1d2:	68fb      	ldr	r3, [r7, #12]
   1d1d4:	681b      	ldr	r3, [r3, #0]
   1d1d6:	69fa      	ldr	r2, [r7, #28]
   1d1d8:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   1d1da:	68fb      	ldr	r3, [r7, #12]
   1d1dc:	681b      	ldr	r3, [r3, #0]
   1d1de:	7e3a      	ldrb	r2, [r7, #24]
   1d1e0:	731a      	strb	r2, [r3, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1d1e2:	68fb      	ldr	r3, [r7, #12]
   1d1e4:	681a      	ldr	r2, [r3, #0]
   1d1e6:	79fb      	ldrb	r3, [r7, #7]
   1d1e8:	4611      	mov	r1, r2
   1d1ea:	4618      	mov	r0, r3
   1d1ec:	f7ef fc2d 	bl	ca4a <AttcDiscConfigStart>
   1d1f0:	4603      	mov	r3, r0
   1d1f2:	72fb      	strb	r3, [r7, #11]
    
    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   1d1f4:	7afb      	ldrb	r3, [r7, #11]
   1d1f6:	2b00      	cmp	r3, #0
   1d1f8:	d105      	bne.n	1d206 <AppDiscConfigure+0x9e>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1d1fa:	4b06      	ldr	r3, [pc, #24]	; (1d214 <AppDiscConfigure+0xac>)
   1d1fc:	681b      	ldr	r3, [r3, #0]
   1d1fe:	79fa      	ldrb	r2, [r7, #7]
   1d200:	2107      	movs	r1, #7
   1d202:	4610      	mov	r0, r2
   1d204:	4798      	blx	r3
    }    
  }
}
   1d206:	bf00      	nop
   1d208:	3710      	adds	r7, #16
   1d20a:	46bd      	mov	sp, r7
   1d20c:	bd80      	pop	{r7, pc}
   1d20e:	bf00      	nop
   1d210:	100053b8 	.word	0x100053b8
   1d214:	10005438 	.word	0x10005438

0001d218 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   1d218:	b580      	push	{r7, lr}
   1d21a:	b082      	sub	sp, #8
   1d21c:	af00      	add	r7, sp, #0
   1d21e:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1d220:	687b      	ldr	r3, [r7, #4]
   1d222:	789b      	ldrb	r3, [r3, #2]
   1d224:	2b00      	cmp	r3, #0
   1d226:	d002      	beq.n	1d22e <appProcMsg+0x16>
   1d228:	2b01      	cmp	r3, #1
   1d22a:	d003      	beq.n	1d234 <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
   1d22c:	e006      	b.n	1d23c <appProcMsg+0x24>
      appUiBtnPoll();
   1d22e:	f7f6 fcfb 	bl	13c28 <appUiBtnPoll>
      break;
   1d232:	e003      	b.n	1d23c <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
   1d234:	6878      	ldr	r0, [r7, #4]
   1d236:	f7f6 fced 	bl	13c14 <appUiTimerExpired>
      break;
   1d23a:	bf00      	nop
  }
}
   1d23c:	bf00      	nop
   1d23e:	3708      	adds	r7, #8
   1d240:	46bd      	mov	sp, r7
   1d242:	bd80      	pop	{r7, pc}

0001d244 <appCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t appCheckBonded(dmConnId_t connId)
{
   1d244:	b480      	push	{r7}
   1d246:	b083      	sub	sp, #12
   1d248:	af00      	add	r7, sp, #0
   1d24a:	4603      	mov	r3, r0
   1d24c:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bonded;
   1d24e:	79fb      	ldrb	r3, [r7, #7]
   1d250:	3b01      	subs	r3, #1
   1d252:	4a05      	ldr	r2, [pc, #20]	; (1d268 <appCheckBonded+0x24>)
   1d254:	015b      	lsls	r3, r3, #5
   1d256:	4413      	add	r3, r2
   1d258:	3305      	adds	r3, #5
   1d25a:	781b      	ldrb	r3, [r3, #0]
}
   1d25c:	4618      	mov	r0, r3
   1d25e:	370c      	adds	r7, #12
   1d260:	46bd      	mov	sp, r7
   1d262:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d266:	4770      	bx	lr
   1d268:	1000b1fc 	.word	0x1000b1fc

0001d26c <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   1d26c:	b580      	push	{r7, lr}
   1d26e:	b082      	sub	sp, #8
   1d270:	af00      	add	r7, sp, #0
   1d272:	4603      	mov	r3, r0
   1d274:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
   1d276:	4a04      	ldr	r2, [pc, #16]	; (1d288 <AppHandlerInit+0x1c>)
   1d278:	79fb      	ldrb	r3, [r7, #7]
   1d27a:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
   1d27c:	f7f6 f99e 	bl	135bc <AppDbInit>
}
   1d280:	bf00      	nop
   1d282:	3708      	adds	r7, #8
   1d284:	46bd      	mov	sp, r7
   1d286:	bd80      	pop	{r7, pc}
   1d288:	1000b1e8 	.word	0x1000b1e8

0001d28c <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1d28c:	b580      	push	{r7, lr}
   1d28e:	b082      	sub	sp, #8
   1d290:	af00      	add	r7, sp, #0
   1d292:	4603      	mov	r3, r0
   1d294:	6039      	str	r1, [r7, #0]
   1d296:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1d298:	683b      	ldr	r3, [r7, #0]
   1d29a:	2b00      	cmp	r3, #0
   1d29c:	d015      	beq.n	1d2ca <AppHandler+0x3e>
  {
    // APP_TRACE_INFO1("App got evt %d", pMsg->event);
    
    if (pMsg->event >= APP_MASTER_MSG_START)
   1d29e:	683b      	ldr	r3, [r7, #0]
   1d2a0:	789b      	ldrb	r3, [r3, #2]
   1d2a2:	2b1f      	cmp	r3, #31
   1d2a4:	d904      	bls.n	1d2b0 <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
   1d2a6:	4b0e      	ldr	r3, [pc, #56]	; (1d2e0 <AppHandler+0x54>)
   1d2a8:	685b      	ldr	r3, [r3, #4]
   1d2aa:	6838      	ldr	r0, [r7, #0]
   1d2ac:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1d2ae:	e013      	b.n	1d2d8 <AppHandler+0x4c>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1d2b0:	683b      	ldr	r3, [r7, #0]
   1d2b2:	789b      	ldrb	r3, [r3, #2]
   1d2b4:	2b0f      	cmp	r3, #15
   1d2b6:	d904      	bls.n	1d2c2 <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);    
   1d2b8:	4b09      	ldr	r3, [pc, #36]	; (1d2e0 <AppHandler+0x54>)
   1d2ba:	681b      	ldr	r3, [r3, #0]
   1d2bc:	6838      	ldr	r0, [r7, #0]
   1d2be:	4798      	blx	r3
}
   1d2c0:	e00a      	b.n	1d2d8 <AppHandler+0x4c>
      appProcMsg(pMsg);
   1d2c2:	6838      	ldr	r0, [r7, #0]
   1d2c4:	f7ff ffa8 	bl	1d218 <appProcMsg>
}
   1d2c8:	e006      	b.n	1d2d8 <AppHandler+0x4c>
    if (event & APP_BTN_DOWN_EVT)
   1d2ca:	79fb      	ldrb	r3, [r7, #7]
   1d2cc:	f003 0310 	and.w	r3, r3, #16
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	d001      	beq.n	1d2d8 <AppHandler+0x4c>
      AppUiBtnPressed();
   1d2d4:	f7f6 fcc0 	bl	13c58 <AppUiBtnPressed>
}
   1d2d8:	bf00      	nop
   1d2da:	3708      	adds	r7, #8
   1d2dc:	46bd      	mov	sp, r7
   1d2de:	bd80      	pop	{r7, pc}
   1d2e0:	1000b1d8 	.word	0x1000b1d8

0001d2e4 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   1d2e4:	b580      	push	{r7, lr}
   1d2e6:	b084      	sub	sp, #16
   1d2e8:	af00      	add	r7, sp, #0
   1d2ea:	6078      	str	r0, [r7, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];
  
  if (pAuthReq->display)
   1d2ec:	687b      	ldr	r3, [r7, #4]
   1d2ee:	795b      	ldrb	r3, [r3, #5]
   1d2f0:	2b00      	cmp	r3, #0
   1d2f2:	d028      	beq.n	1d346 <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1d2f4:	f107 030c 	add.w	r3, r7, #12
   1d2f8:	2104      	movs	r1, #4
   1d2fa:	4618      	mov	r0, r3
   1d2fc:	f7fe fc24 	bl	1bb48 <SecRand>
    passkey %= 1000000;
   1d300:	68fa      	ldr	r2, [r7, #12]
   1d302:	4b14      	ldr	r3, [pc, #80]	; (1d354 <AppHandlePasskey+0x70>)
   1d304:	fba3 1302 	umull	r1, r3, r3, r2
   1d308:	0c9b      	lsrs	r3, r3, #18
   1d30a:	4913      	ldr	r1, [pc, #76]	; (1d358 <AppHandlePasskey+0x74>)
   1d30c:	fb01 f303 	mul.w	r3, r1, r3
   1d310:	1ad3      	subs	r3, r2, r3
   1d312:	60fb      	str	r3, [r7, #12]
    
    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   1d314:	68fb      	ldr	r3, [r7, #12]
   1d316:	b2db      	uxtb	r3, r3
   1d318:	723b      	strb	r3, [r7, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1d31a:	68fb      	ldr	r3, [r7, #12]
   1d31c:	0a1b      	lsrs	r3, r3, #8
   1d31e:	b2db      	uxtb	r3, r3
   1d320:	727b      	strb	r3, [r7, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1d322:	68fb      	ldr	r3, [r7, #12]
   1d324:	0c1b      	lsrs	r3, r3, #16
   1d326:	b2db      	uxtb	r3, r3
   1d328:	72bb      	strb	r3, [r7, #10]
    
    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1d32a:	687b      	ldr	r3, [r7, #4]
   1d32c:	881b      	ldrh	r3, [r3, #0]
   1d32e:	b2db      	uxtb	r3, r3
   1d330:	f107 0208 	add.w	r2, r7, #8
   1d334:	2103      	movs	r1, #3
   1d336:	4618      	mov	r0, r3
   1d338:	f7f3 f83e 	bl	103b8 <DmSecAuthRsp>
    
    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1d33c:	68fb      	ldr	r3, [r7, #12]
   1d33e:	4618      	mov	r0, r3
   1d340:	f7f6 fc4c 	bl	13bdc <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  } 
}
   1d344:	e002      	b.n	1d34c <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1d346:	200e      	movs	r0, #14
   1d348:	f7f6 fbb2 	bl	13ab0 <AppUiAction>
}
   1d34c:	bf00      	nop
   1d34e:	3710      	adds	r7, #16
   1d350:	46bd      	mov	sp, r7
   1d352:	bd80      	pop	{r7, pc}
   1d354:	431bde83 	.word	0x431bde83
   1d358:	000f4240 	.word	0x000f4240

0001d35c <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   1d35c:	b580      	push	{r7, lr}
   1d35e:	b084      	sub	sp, #16
   1d360:	af00      	add	r7, sp, #0
   1d362:	6078      	str	r0, [r7, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   1d364:	687b      	ldr	r3, [r7, #4]
   1d366:	3304      	adds	r3, #4
   1d368:	4618      	mov	r0, r3
   1d36a:	f7f3 f96b 	bl	10644 <DmSecGetCompareValue>
   1d36e:	60f8      	str	r0, [r7, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   1d370:	68f8      	ldr	r0, [r7, #12]
   1d372:	f7f6 fc41 	bl	13bf8 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   1d376:	687b      	ldr	r3, [r7, #4]
   1d378:	881b      	ldrh	r3, [r3, #0]
   1d37a:	b2db      	uxtb	r3, r3
   1d37c:	2101      	movs	r1, #1
   1d37e:	4618      	mov	r0, r3
   1d380:	f7f3 f94c 	bl	1061c <DmSecCompareRsp>
}
   1d384:	bf00      	nop
   1d386:	3710      	adds	r7, #16
   1d388:	46bd      	mov	sp, r7
   1d38a:	bd80      	pop	{r7, pc}

0001d38c <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1d38c:	b580      	push	{r7, lr}
   1d38e:	b082      	sub	sp, #8
   1d390:	af00      	add	r7, sp, #0
   1d392:	4603      	mov	r3, r0
   1d394:	71fb      	strb	r3, [r7, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1d396:	79fb      	ldrb	r3, [r7, #7]
   1d398:	2213      	movs	r2, #19
   1d39a:	4619      	mov	r1, r3
   1d39c:	2003      	movs	r0, #3
   1d39e:	f7f2 f953 	bl	f648 <DmConnClose>
}
   1d3a2:	bf00      	nop
   1d3a4:	3708      	adds	r7, #8
   1d3a6:	46bd      	mov	sp, r7
   1d3a8:	bd80      	pop	{r7, pc}
	...

0001d3ac <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   1d3ac:	b480      	push	{r7}
   1d3ae:	b083      	sub	sp, #12
   1d3b0:	af00      	add	r7, sp, #0
  appConnCb_t   *pCcb = appConnCb;
   1d3b2:	4b0e      	ldr	r3, [pc, #56]	; (1d3ec <AppConnIsOpen+0x40>)
   1d3b4:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1d3b6:	2308      	movs	r3, #8
   1d3b8:	70fb      	strb	r3, [r7, #3]
   1d3ba:	e00c      	b.n	1d3d6 <AppConnIsOpen+0x2a>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1d3bc:	687b      	ldr	r3, [r7, #4]
   1d3be:	791b      	ldrb	r3, [r3, #4]
   1d3c0:	2b00      	cmp	r3, #0
   1d3c2:	d002      	beq.n	1d3ca <AppConnIsOpen+0x1e>
    {      
      return pCcb->connId;
   1d3c4:	687b      	ldr	r3, [r7, #4]
   1d3c6:	791b      	ldrb	r3, [r3, #4]
   1d3c8:	e009      	b.n	1d3de <AppConnIsOpen+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1d3ca:	78fb      	ldrb	r3, [r7, #3]
   1d3cc:	3b01      	subs	r3, #1
   1d3ce:	70fb      	strb	r3, [r7, #3]
   1d3d0:	687b      	ldr	r3, [r7, #4]
   1d3d2:	3320      	adds	r3, #32
   1d3d4:	607b      	str	r3, [r7, #4]
   1d3d6:	78fb      	ldrb	r3, [r7, #3]
   1d3d8:	2b00      	cmp	r3, #0
   1d3da:	d1ef      	bne.n	1d3bc <AppConnIsOpen+0x10>
    }
  }
  
  return DM_CONN_ID_NONE;
   1d3dc:	2300      	movs	r3, #0
}
   1d3de:	4618      	mov	r0, r3
   1d3e0:	370c      	adds	r7, #12
   1d3e2:	46bd      	mov	sp, r7
   1d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d3e8:	4770      	bx	lr
   1d3ea:	bf00      	nop
   1d3ec:	1000b1fc 	.word	0x1000b1fc

0001d3f0 <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   1d3f0:	b480      	push	{r7}
   1d3f2:	b083      	sub	sp, #12
   1d3f4:	af00      	add	r7, sp, #0
   1d3f6:	4603      	mov	r3, r0
   1d3f8:	71fb      	strb	r3, [r7, #7]
  return appConnCb[connId-1].dbHdl;
   1d3fa:	79fb      	ldrb	r3, [r7, #7]
   1d3fc:	3b01      	subs	r3, #1
   1d3fe:	4a05      	ldr	r2, [pc, #20]	; (1d414 <AppDbGetHdl+0x24>)
   1d400:	015b      	lsls	r3, r3, #5
   1d402:	4413      	add	r3, r2
   1d404:	681b      	ldr	r3, [r3, #0]
}
   1d406:	4618      	mov	r0, r3
   1d408:	370c      	adds	r7, #12
   1d40a:	46bd      	mov	sp, r7
   1d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d410:	4770      	bx	lr
   1d412:	bf00      	nop
   1d414:	1000b1fc 	.word	0x1000b1fc

0001d418 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1d418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d41a:	b087      	sub	sp, #28
   1d41c:	af02      	add	r7, sp, #8
   1d41e:	6078      	str	r0, [r7, #4]
   1d420:	460b      	mov	r3, r1
   1d422:	70fb      	strb	r3, [r7, #3]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1d424:	78fb      	ldrb	r3, [r7, #3]
   1d426:	3b01      	subs	r3, #1
   1d428:	4a15      	ldr	r2, [pc, #84]	; (1d480 <AppAddDevToResList+0x68>)
   1d42a:	015b      	lsls	r3, r3, #5
   1d42c:	4413      	add	r3, r2
   1d42e:	681b      	ldr	r3, [r3, #0]
   1d430:	60fb      	str	r3, [r7, #12]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1d432:	f7fb f903 	bl	1863c <HciLlPrivacySupported>
   1d436:	4603      	mov	r3, r0
   1d438:	2b00      	cmp	r3, #0
   1d43a:	d01c      	beq.n	1d476 <AppAddDevToResList+0x5e>
   1d43c:	2200      	movs	r2, #0
   1d43e:	2104      	movs	r1, #4
   1d440:	68f8      	ldr	r0, [r7, #12]
   1d442:	f7f6 f9fb 	bl	1383c <AppDbGetKey>
   1d446:	60b8      	str	r0, [r7, #8]
   1d448:	68bb      	ldr	r3, [r7, #8]
   1d44a:	2b00      	cmp	r3, #0
   1d44c:	d013      	beq.n	1d476 <AppAddDevToResList+0x5e>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1d44e:	68bb      	ldr	r3, [r7, #8]
   1d450:	7d9c      	ldrb	r4, [r3, #22]
   1d452:	68bb      	ldr	r3, [r7, #8]
   1d454:	f103 0510 	add.w	r5, r3, #16
   1d458:	68be      	ldr	r6, [r7, #8]
   1d45a:	f7f2 fff5 	bl	10448 <DmSecGetLocalIrk>
   1d45e:	4602      	mov	r2, r0
   1d460:	687b      	ldr	r3, [r7, #4]
   1d462:	881b      	ldrh	r3, [r3, #0]
   1d464:	9301      	str	r3, [sp, #4]
   1d466:	2301      	movs	r3, #1
   1d468:	9300      	str	r3, [sp, #0]
   1d46a:	4613      	mov	r3, r2
   1d46c:	4632      	mov	r2, r6
   1d46e:	4629      	mov	r1, r5
   1d470:	4620      	mov	r0, r4
   1d472:	f7f2 fcd5 	bl	fe20 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1d476:	bf00      	nop
   1d478:	3714      	adds	r7, #20
   1d47a:	46bd      	mov	sp, r7
   1d47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d47e:	bf00      	nop
   1d480:	1000b1fc 	.word	0x1000b1fc

0001d484 <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   1d484:	b580      	push	{r7, lr}
   1d486:	b084      	sub	sp, #16
   1d488:	af00      	add	r7, sp, #0
   1d48a:	6078      	str	r0, [r7, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1d48c:	687b      	ldr	r3, [r7, #4]
   1d48e:	2b00      	cmp	r3, #0
   1d490:	d020      	beq.n	1d4d4 <AppUpdatePrivacyMode+0x50>
   1d492:	6878      	ldr	r0, [r7, #4]
   1d494:	f7f6 fad1 	bl	13a3a <AppDbGetPeerAddedToRl>
   1d498:	4603      	mov	r3, r0
   1d49a:	2b00      	cmp	r3, #0
   1d49c:	d01a      	beq.n	1d4d4 <AppUpdatePrivacyMode+0x50>
   1d49e:	6878      	ldr	r0, [r7, #4]
   1d4a0:	f7f6 fae8 	bl	13a74 <AppDbGetPeerRpao>
   1d4a4:	4603      	mov	r3, r0
   1d4a6:	2b00      	cmp	r3, #0
   1d4a8:	d114      	bne.n	1d4d4 <AppUpdatePrivacyMode+0x50>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1d4aa:	2200      	movs	r2, #0
   1d4ac:	2104      	movs	r1, #4
   1d4ae:	6878      	ldr	r0, [r7, #4]
   1d4b0:	f7f6 f9c4 	bl	1383c <AppDbGetKey>
   1d4b4:	60f8      	str	r0, [r7, #12]
    if (pPeerKey != NULL)
   1d4b6:	68fb      	ldr	r3, [r7, #12]
   1d4b8:	2b00      	cmp	r3, #0
   1d4ba:	d00b      	beq.n	1d4d4 <AppUpdatePrivacyMode+0x50>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1d4bc:	68fb      	ldr	r3, [r7, #12]
   1d4be:	7d98      	ldrb	r0, [r3, #22]
   1d4c0:	68fb      	ldr	r3, [r7, #12]
   1d4c2:	3310      	adds	r3, #16
   1d4c4:	2201      	movs	r2, #1
   1d4c6:	4619      	mov	r1, r3
   1d4c8:	f7f2 fd24 	bl	ff14 <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1d4cc:	2100      	movs	r1, #0
   1d4ce:	6878      	ldr	r0, [r7, #4]
   1d4d0:	f7f6 fac0 	bl	13a54 <AppDbSetPeerAddedToRl>
    }
  }
}
   1d4d4:	bf00      	nop
   1d4d6:	3710      	adds	r7, #16
   1d4d8:	46bd      	mov	sp, r7
   1d4da:	bd80      	pop	{r7, pc}

0001d4dc <appMasterInitiateSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterInitiateSec(dmConnId_t connId, bool_t initiatePairing, appConnCb_t *pCb)
{
   1d4dc:	b590      	push	{r4, r7, lr}
   1d4de:	b089      	sub	sp, #36	; 0x24
   1d4e0:	af02      	add	r7, sp, #8
   1d4e2:	4603      	mov	r3, r0
   1d4e4:	603a      	str	r2, [r7, #0]
   1d4e6:	71fb      	strb	r3, [r7, #7]
   1d4e8:	460b      	mov	r3, r1
   1d4ea:	71bb      	strb	r3, [r7, #6]
  uint8_t     rKeyDist;
  uint8_t     secLevel;
  dmSecKey_t  *pKey;

  /* if we have an LTK for peer device */
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   1d4ec:	683b      	ldr	r3, [r7, #0]
   1d4ee:	681b      	ldr	r3, [r3, #0]
   1d4f0:	2b00      	cmp	r3, #0
   1d4f2:	d018      	beq.n	1d526 <appMasterInitiateSec+0x4a>
      ((pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_PEER_LTK, &secLevel)) != NULL))
   1d4f4:	683b      	ldr	r3, [r7, #0]
   1d4f6:	681b      	ldr	r3, [r3, #0]
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   1d4f8:	f107 020f 	add.w	r2, r7, #15
   1d4fc:	2102      	movs	r1, #2
   1d4fe:	4618      	mov	r0, r3
   1d500:	f7f6 f99c 	bl	1383c <AppDbGetKey>
   1d504:	6138      	str	r0, [r7, #16]
   1d506:	693b      	ldr	r3, [r7, #16]
   1d508:	2b00      	cmp	r3, #0
   1d50a:	d00c      	beq.n	1d526 <appMasterInitiateSec+0x4a>
  {
    pCb->bondByLtk = TRUE;
   1d50c:	683b      	ldr	r3, [r7, #0]
   1d50e:	2201      	movs	r2, #1
   1d510:	719a      	strb	r2, [r3, #6]
    pCb->initiatingSec = TRUE;
   1d512:	683b      	ldr	r3, [r7, #0]
   1d514:	2201      	movs	r2, #1
   1d516:	721a      	strb	r2, [r3, #8]
          
    /* encrypt with LTK */
    DmSecEncryptReq(connId, secLevel, &pKey->ltk);
   1d518:	7bf9      	ldrb	r1, [r7, #15]
   1d51a:	693a      	ldr	r2, [r7, #16]
   1d51c:	79fb      	ldrb	r3, [r7, #7]
   1d51e:	4618      	mov	r0, r3
   1d520:	f7f4 fb0d 	bl	11b3e <DmSecEncryptReq>
    pCb->initiatingSec = TRUE;
    
    /* initiate pairing */
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
  }
}
   1d524:	e04d      	b.n	1d5c2 <appMasterInitiateSec+0xe6>
  else if (initiatePairing)
   1d526:	79bb      	ldrb	r3, [r7, #6]
   1d528:	2b00      	cmp	r3, #0
   1d52a:	d04a      	beq.n	1d5c2 <appMasterInitiateSec+0xe6>
    pCb->bondByPairing = (pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1d52c:	4b27      	ldr	r3, [pc, #156]	; (1d5cc <appMasterInitiateSec+0xf0>)
   1d52e:	681b      	ldr	r3, [r3, #0]
   1d530:	781b      	ldrb	r3, [r3, #0]
   1d532:	f003 0301 	and.w	r3, r3, #1
   1d536:	2b00      	cmp	r3, #0
   1d538:	bf14      	ite	ne
   1d53a:	2301      	movne	r3, #1
   1d53c:	2300      	moveq	r3, #0
   1d53e:	b2db      	uxtb	r3, r3
   1d540:	461a      	mov	r2, r3
   1d542:	683b      	ldr	r3, [r7, #0]
   1d544:	71da      	strb	r2, [r3, #7]
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1d546:	683b      	ldr	r3, [r7, #0]
   1d548:	79db      	ldrb	r3, [r3, #7]
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	d015      	beq.n	1d57a <appMasterInitiateSec+0x9e>
   1d54e:	683b      	ldr	r3, [r7, #0]
   1d550:	681b      	ldr	r3, [r3, #0]
   1d552:	2b00      	cmp	r3, #0
   1d554:	d111      	bne.n	1d57a <appMasterInitiateSec+0x9e>
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId), DmConnPeerAddr(connId));
   1d556:	79fb      	ldrb	r3, [r7, #7]
   1d558:	4618      	mov	r0, r3
   1d55a:	f7f2 f999 	bl	f890 <DmConnPeerAddrType>
   1d55e:	4603      	mov	r3, r0
   1d560:	461c      	mov	r4, r3
   1d562:	79fb      	ldrb	r3, [r7, #7]
   1d564:	4618      	mov	r0, r3
   1d566:	f7f2 f99d 	bl	f8a4 <DmConnPeerAddr>
   1d56a:	4603      	mov	r3, r0
   1d56c:	4619      	mov	r1, r3
   1d56e:	4620      	mov	r0, r4
   1d570:	f7f6 f82c 	bl	135cc <AppDbNewRecord>
   1d574:	4602      	mov	r2, r0
   1d576:	683b      	ldr	r3, [r7, #0]
   1d578:	601a      	str	r2, [r3, #0]
    pCb->rcvdKeys = 0;
   1d57a:	683b      	ldr	r3, [r7, #0]
   1d57c:	2200      	movs	r2, #0
   1d57e:	72da      	strb	r2, [r3, #11]
    rKeyDist = pAppSecCfg->rKeyDist;
   1d580:	4b12      	ldr	r3, [pc, #72]	; (1d5cc <appMasterInitiateSec+0xf0>)
   1d582:	681b      	ldr	r3, [r3, #0]
   1d584:	789b      	ldrb	r3, [r3, #2]
   1d586:	75fb      	strb	r3, [r7, #23]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   1d588:	79fb      	ldrb	r3, [r7, #7]
   1d58a:	4618      	mov	r0, r3
   1d58c:	f7f2 f980 	bl	f890 <DmConnPeerAddrType>
   1d590:	4603      	mov	r3, r0
   1d592:	2b01      	cmp	r3, #1
   1d594:	d103      	bne.n	1d59e <appMasterInitiateSec+0xc2>
      rKeyDist |= DM_KEY_DIST_IRK;
   1d596:	7dfb      	ldrb	r3, [r7, #23]
   1d598:	f043 0302 	orr.w	r3, r3, #2
   1d59c:	75fb      	strb	r3, [r7, #23]
    pCb->initiatingSec = TRUE;
   1d59e:	683b      	ldr	r3, [r7, #0]
   1d5a0:	2201      	movs	r2, #1
   1d5a2:	721a      	strb	r2, [r3, #8]
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
   1d5a4:	4b09      	ldr	r3, [pc, #36]	; (1d5cc <appMasterInitiateSec+0xf0>)
   1d5a6:	681b      	ldr	r3, [r3, #0]
   1d5a8:	78d9      	ldrb	r1, [r3, #3]
   1d5aa:	4b08      	ldr	r3, [pc, #32]	; (1d5cc <appMasterInitiateSec+0xf0>)
   1d5ac:	681b      	ldr	r3, [r3, #0]
   1d5ae:	781a      	ldrb	r2, [r3, #0]
   1d5b0:	4b06      	ldr	r3, [pc, #24]	; (1d5cc <appMasterInitiateSec+0xf0>)
   1d5b2:	681b      	ldr	r3, [r3, #0]
   1d5b4:	785c      	ldrb	r4, [r3, #1]
   1d5b6:	79f8      	ldrb	r0, [r7, #7]
   1d5b8:	7dfb      	ldrb	r3, [r7, #23]
   1d5ba:	9300      	str	r3, [sp, #0]
   1d5bc:	4623      	mov	r3, r4
   1d5be:	f7f4 fa9f 	bl	11b00 <DmSecPairReq>
}
   1d5c2:	bf00      	nop
   1d5c4:	371c      	adds	r7, #28
   1d5c6:	46bd      	mov	sp, r7
   1d5c8:	bd90      	pop	{r4, r7, pc}
   1d5ca:	bf00      	nop
   1d5cc:	1000b1ec 	.word	0x1000b1ec

0001d5d0 <appScanResultsClear>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appScanResultsClear(void)
{
   1d5d0:	b480      	push	{r7}
   1d5d2:	b083      	sub	sp, #12
   1d5d4:	af00      	add	r7, sp, #0
  uint8_t       i;
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1d5d6:	4b0f      	ldr	r3, [pc, #60]	; (1d614 <appScanResultsClear+0x44>)
   1d5d8:	603b      	str	r3, [r7, #0]
  
  appMasterCb.numScanResults = 0;
   1d5da:	4b0e      	ldr	r3, [pc, #56]	; (1d614 <appScanResultsClear+0x44>)
   1d5dc:	2200      	movs	r2, #0
   1d5de:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  for (i = APP_SCAN_RESULT_MAX; i > 0; i--, pDev++)
   1d5e2:	230a      	movs	r3, #10
   1d5e4:	71fb      	strb	r3, [r7, #7]
   1d5e6:	e008      	b.n	1d5fa <appScanResultsClear+0x2a>
  {
    pDev->addrType = APP_ADDR_NONE;
   1d5e8:	683b      	ldr	r3, [r7, #0]
   1d5ea:	22ff      	movs	r2, #255	; 0xff
   1d5ec:	719a      	strb	r2, [r3, #6]
  for (i = APP_SCAN_RESULT_MAX; i > 0; i--, pDev++)
   1d5ee:	79fb      	ldrb	r3, [r7, #7]
   1d5f0:	3b01      	subs	r3, #1
   1d5f2:	71fb      	strb	r3, [r7, #7]
   1d5f4:	683b      	ldr	r3, [r7, #0]
   1d5f6:	330e      	adds	r3, #14
   1d5f8:	603b      	str	r3, [r7, #0]
   1d5fa:	79fb      	ldrb	r3, [r7, #7]
   1d5fc:	2b00      	cmp	r3, #0
   1d5fe:	d1f3      	bne.n	1d5e8 <appScanResultsClear+0x18>
  }

  /* end address resolution */
  appMasterCb.inProgress = FALSE;
   1d600:	4b04      	ldr	r3, [pc, #16]	; (1d614 <appScanResultsClear+0x44>)
   1d602:	2200      	movs	r2, #0
   1d604:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
   1d608:	bf00      	nop
   1d60a:	370c      	adds	r7, #12
   1d60c:	46bd      	mov	sp, r7
   1d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d612:	4770      	bx	lr
   1d614:	1000b2fc 	.word	0x1000b2fc

0001d618 <appScanResultAdd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appScanResultAdd(dmEvt_t *pMsg)
{
   1d618:	b580      	push	{r7, lr}
   1d61a:	b084      	sub	sp, #16
   1d61c:	af00      	add	r7, sp, #0
   1d61e:	6078      	str	r0, [r7, #4]
  uint8_t       i;
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1d620:	4b23      	ldr	r3, [pc, #140]	; (1d6b0 <appScanResultAdd+0x98>)
   1d622:	60bb      	str	r3, [r7, #8]
  
  /* see if device is in list already */
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1d624:	2300      	movs	r3, #0
   1d626:	73fb      	strb	r3, [r7, #15]
   1d628:	e03b      	b.n	1d6a2 <appScanResultAdd+0x8a>
  {
    /* if address matches list entry */
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1d62a:	68bb      	ldr	r3, [r7, #8]
   1d62c:	799a      	ldrb	r2, [r3, #6]
   1d62e:	687b      	ldr	r3, [r7, #4]
   1d630:	7adb      	ldrb	r3, [r3, #11]
   1d632:	429a      	cmp	r2, r3
   1d634:	d109      	bne.n	1d64a <appScanResultAdd+0x32>
        BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1d636:	68ba      	ldr	r2, [r7, #8]
   1d638:	687b      	ldr	r3, [r7, #4]
   1d63a:	330c      	adds	r3, #12
   1d63c:	4619      	mov	r1, r3
   1d63e:	4610      	mov	r0, r2
   1d640:	f7f6 fb38 	bl	13cb4 <BdaCmp>
   1d644:	4603      	mov	r3, r0
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1d646:	2b00      	cmp	r3, #0
   1d648:	d12e      	bne.n	1d6a8 <appScanResultAdd+0x90>
    {
      /* device already exists in list; we are done */
      break;
    }
    /* if entry is free end then of list has been reached */
    else if (pDev->addrType == APP_ADDR_NONE)
   1d64a:	68bb      	ldr	r3, [r7, #8]
   1d64c:	799b      	ldrb	r3, [r3, #6]
   1d64e:	2bff      	cmp	r3, #255	; 0xff
   1d650:	d121      	bne.n	1d696 <appScanResultAdd+0x7e>
    {
      /* add device to list */
      pDev->addrType = pMsg->scanReport.addrType;
   1d652:	687b      	ldr	r3, [r7, #4]
   1d654:	7ada      	ldrb	r2, [r3, #11]
   1d656:	68bb      	ldr	r3, [r7, #8]
   1d658:	719a      	strb	r2, [r3, #6]
      BdaCpy(pDev->addr, pMsg->scanReport.addr);
   1d65a:	68ba      	ldr	r2, [r7, #8]
   1d65c:	687b      	ldr	r3, [r7, #4]
   1d65e:	330c      	adds	r3, #12
   1d660:	4619      	mov	r1, r3
   1d662:	4610      	mov	r0, r2
   1d664:	f7f6 fb18 	bl	13c98 <BdaCpy>
      pDev->directAddrType = pMsg->scanReport.directAddrType;
   1d668:	687b      	ldr	r3, [r7, #4]
   1d66a:	7c9a      	ldrb	r2, [r3, #18]
   1d66c:	68bb      	ldr	r3, [r7, #8]
   1d66e:	71da      	strb	r2, [r3, #7]
      BdaCpy(pDev->directAddr, pMsg->scanReport.directAddr);
   1d670:	68bb      	ldr	r3, [r7, #8]
   1d672:	f103 0208 	add.w	r2, r3, #8
   1d676:	687b      	ldr	r3, [r7, #4]
   1d678:	3313      	adds	r3, #19
   1d67a:	4619      	mov	r1, r3
   1d67c:	4610      	mov	r0, r2
   1d67e:	f7f6 fb0b 	bl	13c98 <BdaCpy>
      appMasterCb.numScanResults++;
   1d682:	4b0b      	ldr	r3, [pc, #44]	; (1d6b0 <appScanResultAdd+0x98>)
   1d684:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   1d688:	3301      	adds	r3, #1
   1d68a:	b2da      	uxtb	r2, r3
   1d68c:	4b08      	ldr	r3, [pc, #32]	; (1d6b0 <appScanResultAdd+0x98>)
   1d68e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      break;
   1d692:	bf00      	nop
    }
  }
}
   1d694:	e008      	b.n	1d6a8 <appScanResultAdd+0x90>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1d696:	7bfb      	ldrb	r3, [r7, #15]
   1d698:	3301      	adds	r3, #1
   1d69a:	73fb      	strb	r3, [r7, #15]
   1d69c:	68bb      	ldr	r3, [r7, #8]
   1d69e:	330e      	adds	r3, #14
   1d6a0:	60bb      	str	r3, [r7, #8]
   1d6a2:	7bfb      	ldrb	r3, [r7, #15]
   1d6a4:	2b09      	cmp	r3, #9
   1d6a6:	d9c0      	bls.n	1d62a <appScanResultAdd+0x12>
}
   1d6a8:	bf00      	nop
   1d6aa:	3710      	adds	r7, #16
   1d6ac:	46bd      	mov	sp, r7
   1d6ae:	bd80      	pop	{r7, pc}
   1d6b0:	1000b2fc 	.word	0x1000b2fc

0001d6b4 <appScanResultFind>:
*
*  \return Index of result in scan result list. APP_SCAN_RESULT_MAX, otherwise.
*/
/*************************************************************************************************/
static uint8_t appScanResultFind(dmEvt_t *pMsg)
{
   1d6b4:	b580      	push	{r7, lr}
   1d6b6:	b084      	sub	sp, #16
   1d6b8:	af00      	add	r7, sp, #0
   1d6ba:	6078      	str	r0, [r7, #4]
  uint8_t       i;
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1d6bc:	4b12      	ldr	r3, [pc, #72]	; (1d708 <appScanResultFind+0x54>)
   1d6be:	60bb      	str	r3, [r7, #8]

  /* see if device is in list already */
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1d6c0:	2300      	movs	r3, #0
   1d6c2:	73fb      	strb	r3, [r7, #15]
   1d6c4:	e015      	b.n	1d6f2 <appScanResultFind+0x3e>
  {
    /* if address matches list entry */
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1d6c6:	68bb      	ldr	r3, [r7, #8]
   1d6c8:	799a      	ldrb	r2, [r3, #6]
   1d6ca:	687b      	ldr	r3, [r7, #4]
   1d6cc:	7adb      	ldrb	r3, [r3, #11]
   1d6ce:	429a      	cmp	r2, r3
   1d6d0:	d109      	bne.n	1d6e6 <appScanResultFind+0x32>
        BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1d6d2:	68ba      	ldr	r2, [r7, #8]
   1d6d4:	687b      	ldr	r3, [r7, #4]
   1d6d6:	330c      	adds	r3, #12
   1d6d8:	4619      	mov	r1, r3
   1d6da:	4610      	mov	r0, r2
   1d6dc:	f7f6 faea 	bl	13cb4 <BdaCmp>
   1d6e0:	4603      	mov	r3, r0
    if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1d6e2:	2b00      	cmp	r3, #0
   1d6e4:	d109      	bne.n	1d6fa <appScanResultFind+0x46>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1d6e6:	7bfb      	ldrb	r3, [r7, #15]
   1d6e8:	3301      	adds	r3, #1
   1d6ea:	73fb      	strb	r3, [r7, #15]
   1d6ec:	68bb      	ldr	r3, [r7, #8]
   1d6ee:	330e      	adds	r3, #14
   1d6f0:	60bb      	str	r3, [r7, #8]
   1d6f2:	7bfb      	ldrb	r3, [r7, #15]
   1d6f4:	2b09      	cmp	r3, #9
   1d6f6:	d9e6      	bls.n	1d6c6 <appScanResultFind+0x12>
   1d6f8:	e000      	b.n	1d6fc <appScanResultFind+0x48>
    {
      /* device already exists in list; we are done */
      break;
   1d6fa:	bf00      	nop
    }
  }

  return i;
   1d6fc:	7bfb      	ldrb	r3, [r7, #15]
}
   1d6fe:	4618      	mov	r0, r3
   1d700:	3710      	adds	r7, #16
   1d702:	46bd      	mov	sp, r7
   1d704:	bd80      	pop	{r7, pc}
   1d706:	bf00      	nop
   1d708:	1000b2fc 	.word	0x1000b2fc

0001d70c <appMasterScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterScanStart(dmEvt_t *pMsg)
{
   1d70c:	b580      	push	{r7, lr}
   1d70e:	b082      	sub	sp, #8
   1d710:	af00      	add	r7, sp, #0
   1d712:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1d714:	687b      	ldr	r3, [r7, #4]
   1d716:	78db      	ldrb	r3, [r3, #3]
   1d718:	2b00      	cmp	r3, #0
   1d71a:	d101      	bne.n	1d720 <appMasterScanStart+0x14>
  {
    /* clear current scan results */
    appScanResultsClear();
   1d71c:	f7ff ff58 	bl	1d5d0 <appScanResultsClear>
  }
}
   1d720:	bf00      	nop
   1d722:	3708      	adds	r7, #8
   1d724:	46bd      	mov	sp, r7
   1d726:	bd80      	pop	{r7, pc}

0001d728 <appMasterScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterScanStop(dmEvt_t *pMsg)
{
   1d728:	b580      	push	{r7, lr}
   1d72a:	b082      	sub	sp, #8
   1d72c:	af00      	add	r7, sp, #0
   1d72e:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1d730:	687b      	ldr	r3, [r7, #4]
   1d732:	78db      	ldrb	r3, [r3, #3]
   1d734:	2b00      	cmp	r3, #0
   1d736:	d106      	bne.n	1d746 <appMasterScanStop+0x1e>
  {
    APP_TRACE_INFO1("Scan results: %d", AppScanGetNumResults());
   1d738:	f000 fb7e 	bl	1de38 <AppScanGetNumResults>
   1d73c:	4603      	mov	r3, r0
   1d73e:	4619      	mov	r1, r3
   1d740:	4803      	ldr	r0, [pc, #12]	; (1d750 <appMasterScanStop+0x28>)
   1d742:	f7f8 fa09 	bl	15b58 <WsfTrace>
  }
}
   1d746:	bf00      	nop
   1d748:	3708      	adds	r7, #8
   1d74a:	46bd      	mov	sp, r7
   1d74c:	bd80      	pop	{r7, pc}
   1d74e:	bf00      	nop
   1d750:	00024e9c 	.word	0x00024e9c

0001d754 <appMasterScanReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterScanReport(dmEvt_t *pMsg)
{
   1d754:	b580      	push	{r7, lr}
   1d756:	b082      	sub	sp, #8
   1d758:	af00      	add	r7, sp, #0
   1d75a:	6078      	str	r0, [r7, #4]
  /* add to scan result list */
  appScanResultAdd(pMsg);
   1d75c:	6878      	ldr	r0, [r7, #4]
   1d75e:	f7ff ff5b 	bl	1d618 <appScanResultAdd>
}
   1d762:	bf00      	nop
   1d764:	3708      	adds	r7, #8
   1d766:	46bd      	mov	sp, r7
   1d768:	bd80      	pop	{r7, pc}

0001d76a <appMasterConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d76a:	b480      	push	{r7}
   1d76c:	b083      	sub	sp, #12
   1d76e:	af00      	add	r7, sp, #0
   1d770:	6078      	str	r0, [r7, #4]
   1d772:	6039      	str	r1, [r7, #0]

}
   1d774:	bf00      	nop
   1d776:	370c      	adds	r7, #12
   1d778:	46bd      	mov	sp, r7
   1d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d77e:	4770      	bx	lr

0001d780 <appMasterConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d780:	b580      	push	{r7, lr}
   1d782:	b082      	sub	sp, #8
   1d784:	af00      	add	r7, sp, #0
   1d786:	6078      	str	r0, [r7, #4]
   1d788:	6039      	str	r1, [r7, #0]
  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   1d78a:	683b      	ldr	r3, [r7, #0]
   1d78c:	681b      	ldr	r3, [r3, #0]
   1d78e:	4618      	mov	r0, r3
   1d790:	f7ff fe78 	bl	1d484 <AppUpdatePrivacyMode>

  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   1d794:	683b      	ldr	r3, [r7, #0]
   1d796:	2200      	movs	r2, #0
   1d798:	711a      	strb	r2, [r3, #4]

  /* cancel any address resolution in progress */
  appMasterCb.inProgress = FALSE;
   1d79a:	4b04      	ldr	r3, [pc, #16]	; (1d7ac <appMasterConnClose+0x2c>)
   1d79c:	2200      	movs	r2, #0
   1d79e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
}
   1d7a2:	bf00      	nop
   1d7a4:	3708      	adds	r7, #8
   1d7a6:	46bd      	mov	sp, r7
   1d7a8:	bd80      	pop	{r7, pc}
   1d7aa:	bf00      	nop
   1d7ac:	1000b2fc 	.word	0x1000b2fc

0001d7b0 <appMasterSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d7b0:	b580      	push	{r7, lr}
   1d7b2:	b082      	sub	sp, #8
   1d7b4:	af00      	add	r7, sp, #0
   1d7b6:	6078      	str	r0, [r7, #4]
   1d7b8:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  pCb->bonded = FALSE;
   1d7ba:	683b      	ldr	r3, [r7, #0]
   1d7bc:	2200      	movs	r2, #0
   1d7be:	715a      	strb	r2, [r3, #5]
  pCb->bondByLtk = FALSE;
   1d7c0:	683b      	ldr	r3, [r7, #0]
   1d7c2:	2200      	movs	r2, #0
   1d7c4:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   1d7c6:	683b      	ldr	r3, [r7, #0]
   1d7c8:	2200      	movs	r2, #0
   1d7ca:	71da      	strb	r2, [r3, #7]
  pCb->initiatingSec = FALSE;
   1d7cc:	683b      	ldr	r3, [r7, #0]
   1d7ce:	2200      	movs	r2, #0
   1d7d0:	721a      	strb	r2, [r3, #8]
  
  /* if master initiates security on connection open */
  appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, pAppSecCfg->initiateSec, pCb);
   1d7d2:	687b      	ldr	r3, [r7, #4]
   1d7d4:	881b      	ldrh	r3, [r3, #0]
   1d7d6:	b2d8      	uxtb	r0, r3
   1d7d8:	4b05      	ldr	r3, [pc, #20]	; (1d7f0 <appMasterSecConnOpen+0x40>)
   1d7da:	681b      	ldr	r3, [r3, #0]
   1d7dc:	791b      	ldrb	r3, [r3, #4]
   1d7de:	683a      	ldr	r2, [r7, #0]
   1d7e0:	4619      	mov	r1, r3
   1d7e2:	f7ff fe7b 	bl	1d4dc <appMasterInitiateSec>
}
   1d7e6:	bf00      	nop
   1d7e8:	3708      	adds	r7, #8
   1d7ea:	46bd      	mov	sp, r7
   1d7ec:	bd80      	pop	{r7, pc}
   1d7ee:	bf00      	nop
   1d7f0:	1000b1ec 	.word	0x1000b1ec

0001d7f4 <appMasterSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d7f4:	b580      	push	{r7, lr}
   1d7f6:	b082      	sub	sp, #8
   1d7f8:	af00      	add	r7, sp, #0
   1d7fa:	6078      	str	r0, [r7, #4]
   1d7fc:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d7fe:	683b      	ldr	r3, [r7, #0]
   1d800:	681b      	ldr	r3, [r3, #0]
   1d802:	2b00      	cmp	r3, #0
   1d804:	d004      	beq.n	1d810 <appMasterSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   1d806:	683b      	ldr	r3, [r7, #0]
   1d808:	681b      	ldr	r3, [r3, #0]
   1d80a:	4618      	mov	r0, r3
   1d80c:	f7f5 ff86 	bl	1371c <AppDbCheckValidRecord>
  }
}
   1d810:	bf00      	nop
   1d812:	3708      	adds	r7, #8
   1d814:	46bd      	mov	sp, r7
   1d816:	bd80      	pop	{r7, pc}

0001d818 <appMasterSecSlaveReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecSlaveReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d818:	b580      	push	{r7, lr}
   1d81a:	b082      	sub	sp, #8
   1d81c:	af00      	add	r7, sp, #0
   1d81e:	6078      	str	r0, [r7, #4]
   1d820:	6039      	str	r1, [r7, #0]
  /* if master is not initiating security and not already secure */
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1d822:	4b0f      	ldr	r3, [pc, #60]	; (1d860 <appMasterSecSlaveReq+0x48>)
   1d824:	681b      	ldr	r3, [r3, #0]
   1d826:	791b      	ldrb	r3, [r3, #4]
   1d828:	2b00      	cmp	r3, #0
   1d82a:	d114      	bne.n	1d856 <appMasterSecSlaveReq+0x3e>
   1d82c:	683b      	ldr	r3, [r7, #0]
   1d82e:	7a1b      	ldrb	r3, [r3, #8]
   1d830:	2b00      	cmp	r3, #0
   1d832:	d110      	bne.n	1d856 <appMasterSecSlaveReq+0x3e>
      (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1d834:	687b      	ldr	r3, [r7, #4]
   1d836:	881b      	ldrh	r3, [r3, #0]
   1d838:	b2db      	uxtb	r3, r3
   1d83a:	4618      	mov	r0, r3
   1d83c:	f7f2 f862 	bl	f904 <DmConnSecLevel>
   1d840:	4603      	mov	r3, r0
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1d842:	2b00      	cmp	r3, #0
   1d844:	d107      	bne.n	1d856 <appMasterSecSlaveReq+0x3e>
  {
    appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, TRUE, pCb);
   1d846:	687b      	ldr	r3, [r7, #4]
   1d848:	881b      	ldrh	r3, [r3, #0]
   1d84a:	b2db      	uxtb	r3, r3
   1d84c:	683a      	ldr	r2, [r7, #0]
   1d84e:	2101      	movs	r1, #1
   1d850:	4618      	mov	r0, r3
   1d852:	f7ff fe43 	bl	1d4dc <appMasterInitiateSec>
  }
}
   1d856:	bf00      	nop
   1d858:	3708      	adds	r7, #8
   1d85a:	46bd      	mov	sp, r7
   1d85c:	bd80      	pop	{r7, pc}
   1d85e:	bf00      	nop
   1d860:	1000b1ec 	.word	0x1000b1ec

0001d864 <appPrivSetAddrResEnableInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   1d864:	b580      	push	{r7, lr}
   1d866:	b082      	sub	sp, #8
   1d868:	af00      	add	r7, sp, #0
   1d86a:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1d86c:	687b      	ldr	r3, [r7, #4]
   1d86e:	78db      	ldrb	r3, [r3, #3]
   1d870:	2b00      	cmp	r3, #0
   1d872:	d105      	bne.n	1d880 <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1d874:	f7f2 f98a 	bl	fb8c <DmLlPrivEnabled>
   1d878:	4603      	mov	r3, r0
   1d87a:	4618      	mov	r0, r3
   1d87c:	f000 fd1a 	bl	1e2b4 <SvcCoreGapCentAddrResUpdate>
  }
}
   1d880:	bf00      	nop
   1d882:	3708      	adds	r7, #8
   1d884:	46bd      	mov	sp, r7
   1d886:	bd80      	pop	{r7, pc}

0001d888 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d888:	b580      	push	{r7, lr}
   1d88a:	b082      	sub	sp, #8
   1d88c:	af00      	add	r7, sp, #0
   1d88e:	6078      	str	r0, [r7, #4]
   1d890:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1d892:	687b      	ldr	r3, [r7, #4]
   1d894:	78db      	ldrb	r3, [r3, #3]
   1d896:	2b00      	cmp	r3, #0
   1d898:	d109      	bne.n	1d8ae <appPrivAddDevToResListInd+0x26>
   1d89a:	683b      	ldr	r3, [r7, #0]
   1d89c:	681b      	ldr	r3, [r3, #0]
   1d89e:	2b00      	cmp	r3, #0
   1d8a0:	d005      	beq.n	1d8ae <appPrivAddDevToResListInd+0x26>
  {
    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1d8a2:	683b      	ldr	r3, [r7, #0]
   1d8a4:	681b      	ldr	r3, [r3, #0]
   1d8a6:	2101      	movs	r1, #1
   1d8a8:	4618      	mov	r0, r3
   1d8aa:	f7f6 f8d3 	bl	13a54 <AppDbSetPeerAddedToRl>
  }
}
   1d8ae:	bf00      	nop
   1d8b0:	3708      	adds	r7, #8
   1d8b2:	46bd      	mov	sp, r7
   1d8b4:	bd80      	pop	{r7, pc}

0001d8b6 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d8b6:	b580      	push	{r7, lr}
   1d8b8:	b082      	sub	sp, #8
   1d8ba:	af00      	add	r7, sp, #0
   1d8bc:	6078      	str	r0, [r7, #4]
   1d8be:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1d8c0:	687b      	ldr	r3, [r7, #4]
   1d8c2:	78db      	ldrb	r3, [r3, #3]
   1d8c4:	2b00      	cmp	r3, #0
   1d8c6:	d109      	bne.n	1d8dc <appPrivRemDevFromResListInd+0x26>
   1d8c8:	683b      	ldr	r3, [r7, #0]
   1d8ca:	681b      	ldr	r3, [r3, #0]
   1d8cc:	2b00      	cmp	r3, #0
   1d8ce:	d005      	beq.n	1d8dc <appPrivRemDevFromResListInd+0x26>
  {
    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1d8d0:	683b      	ldr	r3, [r7, #0]
   1d8d2:	681b      	ldr	r3, [r3, #0]
   1d8d4:	2100      	movs	r1, #0
   1d8d6:	4618      	mov	r0, r3
   1d8d8:	f7f6 f8bc 	bl	13a54 <AppDbSetPeerAddedToRl>
  }
}
   1d8dc:	bf00      	nop
   1d8de:	3708      	adds	r7, #8
   1d8e0:	46bd      	mov	sp, r7
   1d8e2:	bd80      	pop	{r7, pc}

0001d8e4 <appMasterSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d8e4:	b580      	push	{r7, lr}
   1d8e6:	b082      	sub	sp, #8
   1d8e8:	af00      	add	r7, sp, #0
   1d8ea:	6078      	str	r0, [r7, #4]
   1d8ec:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1d8ee:	683b      	ldr	r3, [r7, #0]
   1d8f0:	79db      	ldrb	r3, [r3, #7]
   1d8f2:	2b00      	cmp	r3, #0
   1d8f4:	d012      	beq.n	1d91c <appMasterSecStoreKey+0x38>
   1d8f6:	683b      	ldr	r3, [r7, #0]
   1d8f8:	681b      	ldr	r3, [r3, #0]
   1d8fa:	2b00      	cmp	r3, #0
   1d8fc:	d00e      	beq.n	1d91c <appMasterSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1d8fe:	683b      	ldr	r3, [r7, #0]
   1d900:	7ada      	ldrb	r2, [r3, #11]
   1d902:	687b      	ldr	r3, [r7, #4]
   1d904:	7f9b      	ldrb	r3, [r3, #30]
   1d906:	4313      	orrs	r3, r2
   1d908:	b2da      	uxtb	r2, r3
   1d90a:	683b      	ldr	r3, [r7, #0]
   1d90c:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1d90e:	683b      	ldr	r3, [r7, #0]
   1d910:	681b      	ldr	r3, [r3, #0]
   1d912:	687a      	ldr	r2, [r7, #4]
   1d914:	4611      	mov	r1, r2
   1d916:	4618      	mov	r0, r3
   1d918:	f7f5 ffda 	bl	138d0 <AppDbSetKey>
  }
}
   1d91c:	bf00      	nop
   1d91e:	3708      	adds	r7, #8
   1d920:	46bd      	mov	sp, r7
   1d922:	bd80      	pop	{r7, pc}

0001d924 <appMasterSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d924:	b580      	push	{r7, lr}
   1d926:	b082      	sub	sp, #8
   1d928:	af00      	add	r7, sp, #0
   1d92a:	6078      	str	r0, [r7, #4]
   1d92c:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pMsg->pairCmpl.auth & DM_AUTH_BOND_FLAG)
   1d92e:	687b      	ldr	r3, [r7, #4]
   1d930:	791b      	ldrb	r3, [r3, #4]
   1d932:	f003 0301 	and.w	r3, r3, #1
   1d936:	2b00      	cmp	r3, #0
   1d938:	d018      	beq.n	1d96c <appMasterSecPairCmpl+0x48>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   1d93a:	683b      	ldr	r3, [r7, #0]
   1d93c:	2201      	movs	r2, #1
   1d93e:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d940:	683b      	ldr	r3, [r7, #0]
   1d942:	681b      	ldr	r3, [r3, #0]
   1d944:	2b00      	cmp	r3, #0
   1d946:	d007      	beq.n	1d958 <appMasterSecPairCmpl+0x34>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1d948:	683b      	ldr	r3, [r7, #0]
   1d94a:	681a      	ldr	r2, [r3, #0]
   1d94c:	683b      	ldr	r3, [r7, #0]
   1d94e:	7adb      	ldrb	r3, [r3, #11]
   1d950:	4619      	mov	r1, r3
   1d952:	4610      	mov	r0, r2
   1d954:	f7f5 fece 	bl	136f4 <AppDbValidateRecord>
    }    

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d958:	683b      	ldr	r3, [r7, #0]
   1d95a:	681b      	ldr	r3, [r3, #0]
   1d95c:	2b00      	cmp	r3, #0
   1d95e:	d005      	beq.n	1d96c <appMasterSecPairCmpl+0x48>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   1d960:	683b      	ldr	r3, [r7, #0]
   1d962:	791b      	ldrb	r3, [r3, #4]
   1d964:	4619      	mov	r1, r3
   1d966:	6878      	ldr	r0, [r7, #4]
   1d968:	f7ff fd56 	bl	1d418 <AppAddDevToResList>
    }
  }
  
  pCb->initiatingSec = FALSE;
   1d96c:	683b      	ldr	r3, [r7, #0]
   1d96e:	2200      	movs	r2, #0
   1d970:	721a      	strb	r2, [r3, #8]
}
   1d972:	bf00      	nop
   1d974:	3708      	adds	r7, #8
   1d976:	46bd      	mov	sp, r7
   1d978:	bd80      	pop	{r7, pc}

0001d97a <appMasterSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d97a:	b480      	push	{r7}
   1d97c:	b083      	sub	sp, #12
   1d97e:	af00      	add	r7, sp, #0
   1d980:	6078      	str	r0, [r7, #4]
   1d982:	6039      	str	r1, [r7, #0]
  pCb->initiatingSec = FALSE;
   1d984:	683b      	ldr	r3, [r7, #0]
   1d986:	2200      	movs	r2, #0
   1d988:	721a      	strb	r2, [r3, #8]
  return;
   1d98a:	bf00      	nop
}
   1d98c:	370c      	adds	r7, #12
   1d98e:	46bd      	mov	sp, r7
   1d990:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d994:	4770      	bx	lr

0001d996 <appMasterSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d996:	b480      	push	{r7}
   1d998:	b083      	sub	sp, #12
   1d99a:	af00      	add	r7, sp, #0
   1d99c:	6078      	str	r0, [r7, #4]
   1d99e:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1d9a0:	683b      	ldr	r3, [r7, #0]
   1d9a2:	799b      	ldrb	r3, [r3, #6]
   1d9a4:	2b00      	cmp	r3, #0
   1d9a6:	d00c      	beq.n	1d9c2 <appMasterSecEncryptInd+0x2c>
   1d9a8:	687b      	ldr	r3, [r7, #4]
   1d9aa:	791b      	ldrb	r3, [r3, #4]
   1d9ac:	2b00      	cmp	r3, #0
   1d9ae:	d008      	beq.n	1d9c2 <appMasterSecEncryptInd+0x2c>
  {
    pCb->bonded = TRUE;
   1d9b0:	683b      	ldr	r3, [r7, #0]
   1d9b2:	2201      	movs	r2, #1
   1d9b4:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   1d9b6:	683b      	ldr	r3, [r7, #0]
   1d9b8:	2200      	movs	r2, #0
   1d9ba:	719a      	strb	r2, [r3, #6]
    pCb->initiatingSec = FALSE;
   1d9bc:	683b      	ldr	r3, [r7, #0]
   1d9be:	2200      	movs	r2, #0
   1d9c0:	721a      	strb	r2, [r3, #8]
  }
}
   1d9c2:	bf00      	nop
   1d9c4:	370c      	adds	r7, #12
   1d9c6:	46bd      	mov	sp, r7
   1d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d9cc:	4770      	bx	lr

0001d9ce <appMasterProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appMasterProcMsg(wsfMsgHdr_t *pMsg)
{
   1d9ce:	b480      	push	{r7}
   1d9d0:	b083      	sub	sp, #12
   1d9d2:	af00      	add	r7, sp, #0
   1d9d4:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1d9d6:	687b      	ldr	r3, [r7, #4]
   1d9d8:	789b      	ldrb	r3, [r3, #2]
   1d9da:	2b10      	cmp	r3, #16
   1d9dc:	d000      	beq.n	1d9e0 <appMasterProcMsg+0x12>
  {
    case APP_CONN_UPDATE_TIMEOUT_IND:
      break;

    default:
      break;
   1d9de:	e000      	b.n	1d9e2 <appMasterProcMsg+0x14>
      break;
   1d9e0:	bf00      	nop
  }
}
   1d9e2:	bf00      	nop
   1d9e4:	370c      	adds	r7, #12
   1d9e6:	46bd      	mov	sp, r7
   1d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d9ec:	4770      	bx	lr
	...

0001d9f0 <appMasterResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterResolvedAddrInd(dmEvt_t *pMsg)
{
   1d9f0:	b590      	push	{r4, r7, lr}
   1d9f2:	b085      	sub	sp, #20
   1d9f4:	af00      	add	r7, sp, #0
   1d9f6:	6078      	str	r0, [r7, #4]
  appDevInfo_t *pDev;
  dmSecKey_t *pPeerKey;
  
  /* if address resolution is not in progress */
  if (!appMasterCb.inProgress)
   1d9f8:	4b36      	ldr	r3, [pc, #216]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1d9fa:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1d9fe:	2b00      	cmp	r3, #0
   1da00:	d064      	beq.n	1dacc <appMasterResolvedAddrInd+0xdc>
  {
    return;
  }

  /* get device record */
  pDev = &appMasterCb.scanResults[appMasterCb.idx];
   1da02:	4b34      	ldr	r3, [pc, #208]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da04:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   1da08:	461a      	mov	r2, r3
   1da0a:	4613      	mov	r3, r2
   1da0c:	00db      	lsls	r3, r3, #3
   1da0e:	1a9b      	subs	r3, r3, r2
   1da10:	005b      	lsls	r3, r3, #1
   1da12:	4a30      	ldr	r2, [pc, #192]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da14:	4413      	add	r3, r2
   1da16:	60fb      	str	r3, [r7, #12]

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   1da18:	687b      	ldr	r3, [r7, #4]
   1da1a:	78db      	ldrb	r3, [r3, #3]
   1da1c:	2b00      	cmp	r3, #0
   1da1e:	d125      	bne.n	1da6c <appMasterResolvedAddrInd+0x7c>
  {
    /* if resolved advertising was directed with an RPA initiator address */
    if ((pMsg->hdr.param == APP_RESOLVE_ADV_RPA) && DM_RAND_ADDR_RPA(pDev->directAddr, pDev->directAddrType))
   1da20:	687b      	ldr	r3, [r7, #4]
   1da22:	881b      	ldrh	r3, [r3, #0]
   1da24:	2b00      	cmp	r3, #0
   1da26:	d115      	bne.n	1da54 <appMasterResolvedAddrInd+0x64>
   1da28:	68fb      	ldr	r3, [r7, #12]
   1da2a:	79db      	ldrb	r3, [r3, #7]
   1da2c:	2b01      	cmp	r3, #1
   1da2e:	d111      	bne.n	1da54 <appMasterResolvedAddrInd+0x64>
   1da30:	68fb      	ldr	r3, [r7, #12]
   1da32:	7b5b      	ldrb	r3, [r3, #13]
   1da34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1da38:	2b40      	cmp	r3, #64	; 0x40
   1da3a:	d10b      	bne.n	1da54 <appMasterResolvedAddrInd+0x64>
    {
      /* reslove initiator's RPA to see if directed advertisement was addressed to us */
      DmPrivResolveAddr(pDev->directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   1da3c:	68fb      	ldr	r3, [r7, #12]
   1da3e:	f103 0408 	add.w	r4, r3, #8
   1da42:	f7f2 fd01 	bl	10448 <DmSecGetLocalIrk>
   1da46:	4603      	mov	r3, r0
   1da48:	2201      	movs	r2, #1
   1da4a:	4619      	mov	r1, r3
   1da4c:	4620      	mov	r0, r4
   1da4e:	f7f2 f9c7 	bl	fde0 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1da52:	e03c      	b.n	1dace <appMasterResolvedAddrInd+0xde>
    }

    /* stop scanning */
    AppScanStop();
   1da54:	f000 fafe 	bl	1e054 <AppScanStop>

    /* connect to peer device using its advertising address */
    AppConnOpen(pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   1da58:	68fb      	ldr	r3, [r7, #12]
   1da5a:	7998      	ldrb	r0, [r3, #6]
   1da5c:	68f9      	ldr	r1, [r7, #12]
   1da5e:	4b1d      	ldr	r3, [pc, #116]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1da64:	461a      	mov	r2, r3
   1da66:	f000 fb07 	bl	1e078 <AppConnOpen>
   1da6a:	e02a      	b.n	1dac2 <appMasterResolvedAddrInd+0xd2>
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appMasterCb.dbHdl != APP_DB_HDL_NONE))
   1da6c:	687b      	ldr	r3, [r7, #4]
   1da6e:	78db      	ldrb	r3, [r3, #3]
   1da70:	2b05      	cmp	r3, #5
   1da72:	d126      	bne.n	1dac2 <appMasterResolvedAddrInd+0xd2>
   1da74:	4b17      	ldr	r3, [pc, #92]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1da7a:	2b00      	cmp	r3, #0
   1da7c:	d021      	beq.n	1dac2 <appMasterResolvedAddrInd+0xd2>
  {
    /* get the next database record */
    appMasterCb.dbHdl = AppDbGetNextRecord(appMasterCb.dbHdl);
   1da7e:	4b15      	ldr	r3, [pc, #84]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1da84:	4618      	mov	r0, r3
   1da86:	f7f5 fdf3 	bl	13670 <AppDbGetNextRecord>
   1da8a:	4602      	mov	r2, r0
   1da8c:	4b11      	ldr	r3, [pc, #68]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* if there's another bond record */
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) && 
   1da92:	4b10      	ldr	r3, [pc, #64]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1da98:	2b00      	cmp	r3, #0
   1da9a:	d012      	beq.n	1dac2 <appMasterResolvedAddrInd+0xd2>
        ((pPeerKey = AppDbGetKey(appMasterCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1da9c:	4b0d      	ldr	r3, [pc, #52]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1da9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) && 
   1daa2:	2200      	movs	r2, #0
   1daa4:	2104      	movs	r1, #4
   1daa6:	4618      	mov	r0, r3
   1daa8:	f7f5 fec8 	bl	1383c <AppDbGetKey>
   1daac:	60b8      	str	r0, [r7, #8]
   1daae:	68bb      	ldr	r3, [r7, #8]
   1dab0:	2b00      	cmp	r3, #0
   1dab2:	d006      	beq.n	1dac2 <appMasterResolvedAddrInd+0xd2>
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(pDev->addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1dab4:	68fb      	ldr	r3, [r7, #12]
   1dab6:	68b9      	ldr	r1, [r7, #8]
   1dab8:	2200      	movs	r2, #0
   1daba:	4618      	mov	r0, r3
   1dabc:	f7f2 f990 	bl	fde0 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1dac0:	e005      	b.n	1dace <appMasterResolvedAddrInd+0xde>
    }
  }

  /* done with this address resolution */
  appMasterCb.inProgress = FALSE;
   1dac2:	4b04      	ldr	r3, [pc, #16]	; (1dad4 <appMasterResolvedAddrInd+0xe4>)
   1dac4:	2200      	movs	r2, #0
   1dac6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   1daca:	e000      	b.n	1dace <appMasterResolvedAddrInd+0xde>
    return;
   1dacc:	bf00      	nop
}
   1dace:	3714      	adds	r7, #20
   1dad0:	46bd      	mov	sp, r7
   1dad2:	bd90      	pop	{r4, r7, pc}
   1dad4:	1000b2fc 	.word	0x1000b2fc

0001dad8 <appMasterRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appMasterRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1dad8:	b580      	push	{r7, lr}
   1dada:	b086      	sub	sp, #24
   1dadc:	af00      	add	r7, sp, #0
   1dade:	6078      	str	r0, [r7, #4]
   1dae0:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1dae2:	4b16      	ldr	r3, [pc, #88]	; (1db3c <appMasterRemoteConnParamReq+0x64>)
   1dae4:	681b      	ldr	r3, [r3, #0]
   1dae6:	781b      	ldrb	r3, [r3, #0]
   1dae8:	2b00      	cmp	r3, #0
   1daea:	d118      	bne.n	1db1e <appMasterRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1daec:	687b      	ldr	r3, [r7, #4]
   1daee:	88db      	ldrh	r3, [r3, #6]
   1daf0:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   1daf2:	687b      	ldr	r3, [r7, #4]
   1daf4:	891b      	ldrh	r3, [r3, #8]
   1daf6:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   1daf8:	687b      	ldr	r3, [r7, #4]
   1dafa:	895b      	ldrh	r3, [r3, #10]
   1dafc:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   1dafe:	687b      	ldr	r3, [r7, #4]
   1db00:	899b      	ldrh	r3, [r3, #12]
   1db02:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1db04:	2300      	movs	r3, #0
   1db06:	82fb      	strh	r3, [r7, #22]
   1db08:	8afb      	ldrh	r3, [r7, #22]
   1db0a:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1db0c:	683b      	ldr	r3, [r7, #0]
   1db0e:	791b      	ldrb	r3, [r3, #4]
   1db10:	f107 020c 	add.w	r2, r7, #12
   1db14:	4611      	mov	r1, r2
   1db16:	4618      	mov	r0, r3
   1db18:	f7f1 fe3c 	bl	f794 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   1db1c:	e00a      	b.n	1db34 <appMasterRemoteConnParamReq+0x5c>
  else if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1db1e:	4b07      	ldr	r3, [pc, #28]	; (1db3c <appMasterRemoteConnParamReq+0x64>)
   1db20:	681b      	ldr	r3, [r3, #0]
   1db22:	781b      	ldrb	r3, [r3, #0]
   1db24:	2b01      	cmp	r3, #1
   1db26:	d105      	bne.n	1db34 <appMasterRemoteConnParamReq+0x5c>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1db28:	683b      	ldr	r3, [r7, #0]
   1db2a:	791b      	ldrb	r3, [r3, #4]
   1db2c:	2111      	movs	r1, #17
   1db2e:	4618      	mov	r0, r3
   1db30:	f7f1 fe4c 	bl	f7cc <DmRemoteConnParamReqNegReply>
}
   1db34:	bf00      	nop
   1db36:	3718      	adds	r7, #24
   1db38:	46bd      	mov	sp, r7
   1db3a:	bd80      	pop	{r7, pc}
   1db3c:	10002e94 	.word	0x10002e94

0001db40 <AppMasterInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterInit(void)
{
   1db40:	b480      	push	{r7}
   1db42:	af00      	add	r7, sp, #0
  appMasterCb.inProgress = FALSE;
   1db44:	4b07      	ldr	r3, [pc, #28]	; (1db64 <AppMasterInit+0x24>)
   1db46:	2200      	movs	r2, #0
   1db48:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

  /* initialize scan mode */
  appMasterCb.scanMode = APP_SCAN_MODE_NONE;
   1db4c:	4b05      	ldr	r3, [pc, #20]	; (1db64 <AppMasterInit+0x24>)
   1db4e:	22ff      	movs	r2, #255	; 0xff
   1db50:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* set up callback from main */
  appCb.masterCback = appMasterProcMsg;
   1db54:	4b04      	ldr	r3, [pc, #16]	; (1db68 <AppMasterInit+0x28>)
   1db56:	4a05      	ldr	r2, [pc, #20]	; (1db6c <AppMasterInit+0x2c>)
   1db58:	605a      	str	r2, [r3, #4]
}
   1db5a:	bf00      	nop
   1db5c:	46bd      	mov	sp, r7
   1db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1db62:	4770      	bx	lr
   1db64:	1000b2fc 	.word	0x1000b2fc
   1db68:	1000b1d8 	.word	0x1000b1d8
   1db6c:	0001d9cf 	.word	0x0001d9cf

0001db70 <AppMasterProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterProcDmMsg(dmEvt_t *pMsg)
{
   1db70:	b580      	push	{r7, lr}
   1db72:	b084      	sub	sp, #16
   1db74:	af00      	add	r7, sp, #0
   1db76:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   1db78:	2300      	movs	r3, #0
   1db7a:	60fb      	str	r3, [r7, #12]
  
  /* look up app connection control block from DM connection ID */
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   1db7c:	687b      	ldr	r3, [r7, #4]
   1db7e:	789b      	ldrb	r3, [r3, #2]
   1db80:	2b27      	cmp	r3, #39	; 0x27
   1db82:	d007      	beq.n	1db94 <AppMasterProcDmMsg+0x24>
      pMsg->hdr.event == DM_CONN_CLOSE_IND ||
   1db84:	687b      	ldr	r3, [r7, #4]
   1db86:	789b      	ldrb	r3, [r3, #2]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   1db88:	2b28      	cmp	r3, #40	; 0x28
   1db8a:	d003      	beq.n	1db94 <AppMasterProcDmMsg+0x24>
      pMsg->hdr.event == DM_REM_CONN_PARAM_REQ_IND)
   1db8c:	687b      	ldr	r3, [r7, #4]
   1db8e:	789b      	ldrb	r3, [r3, #2]
      pMsg->hdr.event == DM_CONN_CLOSE_IND ||
   1db90:	2b3f      	cmp	r3, #63	; 0x3f
   1db92:	d106      	bne.n	1dba2 <AppMasterProcDmMsg+0x32>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1db94:	687b      	ldr	r3, [r7, #4]
   1db96:	881b      	ldrh	r3, [r3, #0]
   1db98:	3b01      	subs	r3, #1
   1db9a:	015b      	lsls	r3, r3, #5
   1db9c:	4a3a      	ldr	r2, [pc, #232]	; (1dc88 <AppMasterProcDmMsg+0x118>)
   1db9e:	4413      	add	r3, r2
   1dba0:	60fb      	str	r3, [r7, #12]
  }
  
  switch(pMsg->hdr.event)
   1dba2:	687b      	ldr	r3, [r7, #4]
   1dba4:	789b      	ldrb	r3, [r3, #2]
   1dba6:	3b20      	subs	r3, #32
   1dba8:	2b1f      	cmp	r3, #31
   1dbaa:	d867      	bhi.n	1dc7c <AppMasterProcDmMsg+0x10c>
   1dbac:	a201      	add	r2, pc, #4	; (adr r2, 1dbb4 <AppMasterProcDmMsg+0x44>)
   1dbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dbb2:	bf00      	nop
   1dbb4:	0001dc35 	.word	0x0001dc35
   1dbb8:	0001dc7d 	.word	0x0001dc7d
   1dbbc:	0001dc7d 	.word	0x0001dc7d
   1dbc0:	0001dc7d 	.word	0x0001dc7d
   1dbc4:	0001dc3f 	.word	0x0001dc3f
   1dbc8:	0001dc47 	.word	0x0001dc47
   1dbcc:	0001dc4f 	.word	0x0001dc4f
   1dbd0:	0001dc57 	.word	0x0001dc57
   1dbd4:	0001dc61 	.word	0x0001dc61
   1dbd8:	0001dc7d 	.word	0x0001dc7d
   1dbdc:	0001dc7d 	.word	0x0001dc7d
   1dbe0:	0001dc7d 	.word	0x0001dc7d
   1dbe4:	0001dc7d 	.word	0x0001dc7d
   1dbe8:	0001dc7d 	.word	0x0001dc7d
   1dbec:	0001dc7d 	.word	0x0001dc7d
   1dbf0:	0001dc7d 	.word	0x0001dc7d
   1dbf4:	0001dc7d 	.word	0x0001dc7d
   1dbf8:	0001dc7d 	.word	0x0001dc7d
   1dbfc:	0001dc7d 	.word	0x0001dc7d
   1dc00:	0001dc7d 	.word	0x0001dc7d
   1dc04:	0001dc7d 	.word	0x0001dc7d
   1dc08:	0001dc7d 	.word	0x0001dc7d
   1dc0c:	0001dc7d 	.word	0x0001dc7d
   1dc10:	0001dc6b 	.word	0x0001dc6b
   1dc14:	0001dc7d 	.word	0x0001dc7d
   1dc18:	0001dc7d 	.word	0x0001dc7d
   1dc1c:	0001dc7d 	.word	0x0001dc7d
   1dc20:	0001dc7d 	.word	0x0001dc7d
   1dc24:	0001dc7d 	.word	0x0001dc7d
   1dc28:	0001dc7d 	.word	0x0001dc7d
   1dc2c:	0001dc7d 	.word	0x0001dc7d
   1dc30:	0001dc73 	.word	0x0001dc73
  {
    case DM_RESET_CMPL_IND:
      /* reset scan mode */
      appMasterCb.scanMode = APP_SCAN_MODE_NONE;
   1dc34:	4b15      	ldr	r3, [pc, #84]	; (1dc8c <AppMasterProcDmMsg+0x11c>)
   1dc36:	22ff      	movs	r2, #255	; 0xff
   1dc38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      break;
   1dc3c:	e01f      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    case DM_SCAN_START_IND:
      appMasterScanStart(pMsg);
   1dc3e:	6878      	ldr	r0, [r7, #4]
   1dc40:	f7ff fd64 	bl	1d70c <appMasterScanStart>
      break;  
   1dc44:	e01b      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    case DM_SCAN_STOP_IND:
      appMasterScanStop(pMsg);
   1dc46:	6878      	ldr	r0, [r7, #4]
   1dc48:	f7ff fd6e 	bl	1d728 <appMasterScanStop>
      break;  
   1dc4c:	e017      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    case DM_SCAN_REPORT_IND:
      appMasterScanReport(pMsg);
   1dc4e:	6878      	ldr	r0, [r7, #4]
   1dc50:	f7ff fd80 	bl	1d754 <appMasterScanReport>
      break;  
   1dc54:	e013      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    case DM_CONN_OPEN_IND:
      appMasterConnOpen(pMsg, pCb);
   1dc56:	68f9      	ldr	r1, [r7, #12]
   1dc58:	6878      	ldr	r0, [r7, #4]
   1dc5a:	f7ff fd86 	bl	1d76a <appMasterConnOpen>
      break;
   1dc5e:	e00e      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    case DM_CONN_CLOSE_IND:
      appMasterConnClose(pMsg, pCb);
   1dc60:	68f9      	ldr	r1, [r7, #12]
   1dc62:	6878      	ldr	r0, [r7, #4]
   1dc64:	f7ff fd8c 	bl	1d780 <appMasterConnClose>
      break;
   1dc68:	e009      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appMasterResolvedAddrInd(pMsg);
   1dc6a:	6878      	ldr	r0, [r7, #4]
   1dc6c:	f7ff fec0 	bl	1d9f0 <appMasterResolvedAddrInd>
      break;
   1dc70:	e005      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    case DM_REM_CONN_PARAM_REQ_IND:
      appMasterRemoteConnParamReq(pMsg, pCb);
   1dc72:	68f9      	ldr	r1, [r7, #12]
   1dc74:	6878      	ldr	r0, [r7, #4]
   1dc76:	f7ff ff2f 	bl	1dad8 <appMasterRemoteConnParamReq>
      break;
   1dc7a:	e000      	b.n	1dc7e <AppMasterProcDmMsg+0x10e>

    default:
      break;
   1dc7c:	bf00      	nop
  }
}
   1dc7e:	bf00      	nop
   1dc80:	3710      	adds	r7, #16
   1dc82:	46bd      	mov	sp, r7
   1dc84:	bd80      	pop	{r7, pc}
   1dc86:	bf00      	nop
   1dc88:	1000b1fc 	.word	0x1000b1fc
   1dc8c:	1000b2fc 	.word	0x1000b2fc

0001dc90 <AppMasterSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterSecProcDmMsg(dmEvt_t *pMsg)
{
   1dc90:	b580      	push	{r7, lr}
   1dc92:	b084      	sub	sp, #16
   1dc94:	af00      	add	r7, sp, #0
   1dc96:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1dc98:	687b      	ldr	r3, [r7, #4]
   1dc9a:	881b      	ldrh	r3, [r3, #0]
   1dc9c:	3b01      	subs	r3, #1
   1dc9e:	015b      	lsls	r3, r3, #5
   1dca0:	4a52      	ldr	r2, [pc, #328]	; (1ddec <AppMasterSecProcDmMsg+0x15c>)
   1dca2:	4413      	add	r3, r2
   1dca4:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   1dca6:	687b      	ldr	r3, [r7, #4]
   1dca8:	789b      	ldrb	r3, [r3, #2]
   1dcaa:	3b27      	subs	r3, #39	; 0x27
   1dcac:	2b2e      	cmp	r3, #46	; 0x2e
   1dcae:	f200 8098 	bhi.w	1dde2 <AppMasterSecProcDmMsg+0x152>
   1dcb2:	a201      	add	r2, pc, #4	; (adr r2, 1dcb8 <AppMasterSecProcDmMsg+0x28>)
   1dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dcb8:	0001dd75 	.word	0x0001dd75
   1dcbc:	0001dd7f 	.word	0x0001dd7f
   1dcc0:	0001dde3 	.word	0x0001dde3
   1dcc4:	0001dd89 	.word	0x0001dd89
   1dcc8:	0001dd93 	.word	0x0001dd93
   1dccc:	0001dd9d 	.word	0x0001dd9d
   1dcd0:	0001dde3 	.word	0x0001dde3
   1dcd4:	0001dde3 	.word	0x0001dde3
   1dcd8:	0001dda7 	.word	0x0001dda7
   1dcdc:	0001dde3 	.word	0x0001dde3
   1dce0:	0001dde3 	.word	0x0001dde3
   1dce4:	0001ddb1 	.word	0x0001ddb1
   1dce8:	0001dde3 	.word	0x0001dde3
   1dcec:	0001dde3 	.word	0x0001dde3
   1dcf0:	0001dde3 	.word	0x0001dde3
   1dcf4:	0001dde3 	.word	0x0001dde3
   1dcf8:	0001dde3 	.word	0x0001dde3
   1dcfc:	0001dde3 	.word	0x0001dde3
   1dd00:	0001ddc3 	.word	0x0001ddc3
   1dd04:	0001ddcd 	.word	0x0001ddcd
   1dd08:	0001dde3 	.word	0x0001dde3
   1dd0c:	0001dde3 	.word	0x0001dde3
   1dd10:	0001dde3 	.word	0x0001dde3
   1dd14:	0001ddbb 	.word	0x0001ddbb
   1dd18:	0001dde3 	.word	0x0001dde3
   1dd1c:	0001dde3 	.word	0x0001dde3
   1dd20:	0001dde3 	.word	0x0001dde3
   1dd24:	0001dde3 	.word	0x0001dde3
   1dd28:	0001dde3 	.word	0x0001dde3
   1dd2c:	0001dde3 	.word	0x0001dde3
   1dd30:	0001dde3 	.word	0x0001dde3
   1dd34:	0001dde3 	.word	0x0001dde3
   1dd38:	0001dde3 	.word	0x0001dde3
   1dd3c:	0001dde3 	.word	0x0001dde3
   1dd40:	0001dde3 	.word	0x0001dde3
   1dd44:	0001dde3 	.word	0x0001dde3
   1dd48:	0001dde3 	.word	0x0001dde3
   1dd4c:	0001dde3 	.word	0x0001dde3
   1dd50:	0001dde3 	.word	0x0001dde3
   1dd54:	0001dde3 	.word	0x0001dde3
   1dd58:	0001dde3 	.word	0x0001dde3
   1dd5c:	0001dde3 	.word	0x0001dde3
   1dd60:	0001dde3 	.word	0x0001dde3
   1dd64:	0001dde3 	.word	0x0001dde3
   1dd68:	0001dde3 	.word	0x0001dde3
   1dd6c:	0001dde3 	.word	0x0001dde3
   1dd70:	0001ddd7 	.word	0x0001ddd7
  {
    case DM_CONN_OPEN_IND:
      appMasterSecConnOpen(pMsg, pCb);
   1dd74:	68f9      	ldr	r1, [r7, #12]
   1dd76:	6878      	ldr	r0, [r7, #4]
   1dd78:	f7ff fd1a 	bl	1d7b0 <appMasterSecConnOpen>
      break;
   1dd7c:	e032      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_CONN_CLOSE_IND:
      appMasterSecConnClose(pMsg, pCb);
   1dd7e:	68f9      	ldr	r1, [r7, #12]
   1dd80:	6878      	ldr	r0, [r7, #4]
   1dd82:	f7ff fd37 	bl	1d7f4 <appMasterSecConnClose>
      break;
   1dd86:	e02d      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_SEC_PAIR_CMPL_IND:
      appMasterSecPairCmpl(pMsg, pCb);
   1dd88:	68f9      	ldr	r1, [r7, #12]
   1dd8a:	6878      	ldr	r0, [r7, #4]
   1dd8c:	f7ff fdca 	bl	1d924 <appMasterSecPairCmpl>
      break;
   1dd90:	e028      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>
      
    case DM_SEC_PAIR_FAIL_IND:
      appMasterSecPairFailed(pMsg, pCb);
   1dd92:	68f9      	ldr	r1, [r7, #12]
   1dd94:	6878      	ldr	r0, [r7, #4]
   1dd96:	f7ff fdf0 	bl	1d97a <appMasterSecPairFailed>
      break;
   1dd9a:	e023      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_SEC_ENCRYPT_IND:
      appMasterSecEncryptInd(pMsg, pCb);
   1dd9c:	68f9      	ldr	r1, [r7, #12]
   1dd9e:	6878      	ldr	r0, [r7, #4]
   1dda0:	f7ff fdf9 	bl	1d996 <appMasterSecEncryptInd>
      break;
   1dda4:	e01e      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appMasterSecStoreKey(pMsg, pCb);
   1dda6:	68f9      	ldr	r1, [r7, #12]
   1dda8:	6878      	ldr	r0, [r7, #4]
   1ddaa:	f7ff fd9b 	bl	1d8e4 <appMasterSecStoreKey>
      break;
   1ddae:	e019      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_SEC_SLAVE_REQ_IND:
      appMasterSecSlaveReq(pMsg, pCb);
   1ddb0:	68f9      	ldr	r1, [r7, #12]
   1ddb2:	6878      	ldr	r0, [r7, #4]
   1ddb4:	f7ff fd30 	bl	1d818 <appMasterSecSlaveReq>
      break;
   1ddb8:	e014      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   1ddba:	6878      	ldr	r0, [r7, #4]
   1ddbc:	f7ff fd52 	bl	1d864 <appPrivSetAddrResEnableInd>
      break;
   1ddc0:	e010      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   1ddc2:	68f9      	ldr	r1, [r7, #12]
   1ddc4:	6878      	ldr	r0, [r7, #4]
   1ddc6:	f7ff fd5f 	bl	1d888 <appPrivAddDevToResListInd>
      break;
   1ddca:	e00b      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   1ddcc:	68f9      	ldr	r1, [r7, #12]
   1ddce:	6878      	ldr	r0, [r7, #4]
   1ddd0:	f7ff fd71 	bl	1d8b6 <appPrivRemDevFromResListInd>
      break;
   1ddd4:	e006      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   1ddd6:	2000      	movs	r0, #0
   1ddd8:	f7f8 faae 	bl	16338 <HciDrvRadioBoot>
      DmDevReset();
   1dddc:	f7f1 fe26 	bl	fa2c <DmDevReset>
      break;
   1dde0:	e000      	b.n	1dde4 <AppMasterSecProcDmMsg+0x154>

    default:
      break;
   1dde2:	bf00      	nop
  }
}
   1dde4:	bf00      	nop
   1dde6:	3710      	adds	r7, #16
   1dde8:	46bd      	mov	sp, r7
   1ddea:	bd80      	pop	{r7, pc}
   1ddec:	1000b1fc 	.word	0x1000b1fc

0001ddf0 <AppScanGetResult>:
 *
 *  \return Pointer to scan result device info or NULL if index contains no result.
 */
/*************************************************************************************************/
appDevInfo_t *AppScanGetResult(uint8_t idx)
{
   1ddf0:	b480      	push	{r7}
   1ddf2:	b083      	sub	sp, #12
   1ddf4:	af00      	add	r7, sp, #0
   1ddf6:	4603      	mov	r3, r0
   1ddf8:	71fb      	strb	r3, [r7, #7]
  if (idx < APP_SCAN_RESULT_MAX && appMasterCb.scanResults[idx].addrType != APP_ADDR_NONE)
   1ddfa:	79fb      	ldrb	r3, [r7, #7]
   1ddfc:	2b09      	cmp	r3, #9
   1ddfe:	d812      	bhi.n	1de26 <AppScanGetResult+0x36>
   1de00:	79fa      	ldrb	r2, [r7, #7]
   1de02:	490c      	ldr	r1, [pc, #48]	; (1de34 <AppScanGetResult+0x44>)
   1de04:	4613      	mov	r3, r2
   1de06:	00db      	lsls	r3, r3, #3
   1de08:	1a9b      	subs	r3, r3, r2
   1de0a:	005b      	lsls	r3, r3, #1
   1de0c:	440b      	add	r3, r1
   1de0e:	3306      	adds	r3, #6
   1de10:	781b      	ldrb	r3, [r3, #0]
   1de12:	2bff      	cmp	r3, #255	; 0xff
   1de14:	d007      	beq.n	1de26 <AppScanGetResult+0x36>
  {
    return &appMasterCb.scanResults[idx];
   1de16:	79fa      	ldrb	r2, [r7, #7]
   1de18:	4613      	mov	r3, r2
   1de1a:	00db      	lsls	r3, r3, #3
   1de1c:	1a9b      	subs	r3, r3, r2
   1de1e:	005b      	lsls	r3, r3, #1
   1de20:	4a04      	ldr	r2, [pc, #16]	; (1de34 <AppScanGetResult+0x44>)
   1de22:	4413      	add	r3, r2
   1de24:	e000      	b.n	1de28 <AppScanGetResult+0x38>
  }
  else
  {
    return NULL;
   1de26:	2300      	movs	r3, #0
  }
}
   1de28:	4618      	mov	r0, r3
   1de2a:	370c      	adds	r7, #12
   1de2c:	46bd      	mov	sp, r7
   1de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1de32:	4770      	bx	lr
   1de34:	1000b2fc 	.word	0x1000b2fc

0001de38 <AppScanGetNumResults>:
 *
 *  \return Number of stored scan results.
 */
/*************************************************************************************************/
uint8_t AppScanGetNumResults(void)
{
   1de38:	b480      	push	{r7}
   1de3a:	af00      	add	r7, sp, #0
  return appMasterCb.numScanResults;
   1de3c:	4b03      	ldr	r3, [pc, #12]	; (1de4c <AppScanGetNumResults+0x14>)
   1de3e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
   1de42:	4618      	mov	r0, r3
   1de44:	46bd      	mov	sp, r7
   1de46:	f85d 7b04 	ldr.w	r7, [sp], #4
   1de4a:	4770      	bx	lr
   1de4c:	1000b2fc 	.word	0x1000b2fc

0001de50 <appConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t appConnOpen(uint8_t initPhys, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1de50:	b580      	push	{r7, lr}
   1de52:	b086      	sub	sp, #24
   1de54:	af00      	add	r7, sp, #0
   1de56:	60ba      	str	r2, [r7, #8]
   1de58:	607b      	str	r3, [r7, #4]
   1de5a:	4603      	mov	r3, r0
   1de5c:	73fb      	strb	r3, [r7, #15]
   1de5e:	460b      	mov	r3, r1
   1de60:	73bb      	strb	r3, [r7, #14]
  dmConnId_t  connId;
  appConnCb_t *pCb;

  /* open connection */
  connId = DmConnOpen(DM_CLIENT_ID_APP, initPhys, addrType, pAddr);
   1de62:	7bba      	ldrb	r2, [r7, #14]
   1de64:	7bf9      	ldrb	r1, [r7, #15]
   1de66:	68bb      	ldr	r3, [r7, #8]
   1de68:	2003      	movs	r0, #3
   1de6a:	f7f3 fde2 	bl	11a32 <DmConnOpen>
   1de6e:	4603      	mov	r3, r0
   1de70:	75fb      	strb	r3, [r7, #23]

  /* set up conn. control block */
  pCb = &appConnCb[connId - 1];
   1de72:	7dfb      	ldrb	r3, [r7, #23]
   1de74:	3b01      	subs	r3, #1
   1de76:	015b      	lsls	r3, r3, #5
   1de78:	4a0f      	ldr	r2, [pc, #60]	; (1deb8 <appConnOpen+0x68>)
   1de7a:	4413      	add	r3, r2
   1de7c:	613b      	str	r3, [r7, #16]
  pCb->connId = connId;
   1de7e:	693b      	ldr	r3, [r7, #16]
   1de80:	7dfa      	ldrb	r2, [r7, #23]
   1de82:	711a      	strb	r2, [r3, #4]

  /* if database record handle is in use */
  if ((dbHdl != APP_DB_HDL_NONE) && AppDbRecordInUse(dbHdl))
   1de84:	687b      	ldr	r3, [r7, #4]
   1de86:	2b00      	cmp	r3, #0
   1de88:	d009      	beq.n	1de9e <appConnOpen+0x4e>
   1de8a:	6878      	ldr	r0, [r7, #4]
   1de8c:	f7f5 fc56 	bl	1373c <AppDbRecordInUse>
   1de90:	4603      	mov	r3, r0
   1de92:	2b00      	cmp	r3, #0
   1de94:	d003      	beq.n	1de9e <appConnOpen+0x4e>
  {
    pCb->dbHdl = dbHdl;
   1de96:	693b      	ldr	r3, [r7, #16]
   1de98:	687a      	ldr	r2, [r7, #4]
   1de9a:	601a      	str	r2, [r3, #0]
   1de9c:	e007      	b.n	1deae <appConnOpen+0x5e>
  }
  else
  {
    pCb->dbHdl = AppDbFindByAddr(addrType, pAddr);
   1de9e:	7bbb      	ldrb	r3, [r7, #14]
   1dea0:	68b9      	ldr	r1, [r7, #8]
   1dea2:	4618      	mov	r0, r3
   1dea4:	f7f5 fc94 	bl	137d0 <AppDbFindByAddr>
   1dea8:	4602      	mov	r2, r0
   1deaa:	693b      	ldr	r3, [r7, #16]
   1deac:	601a      	str	r2, [r3, #0]
  }

  return connId;
   1deae:	7dfb      	ldrb	r3, [r7, #23]
}
   1deb0:	4618      	mov	r0, r3
   1deb2:	3718      	adds	r7, #24
   1deb4:	46bd      	mov	sp, r7
   1deb6:	bd80      	pop	{r7, pc}
   1deb8:	1000b1fc 	.word	0x1000b1fc

0001debc <AppMasterSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterSecurityReq(dmConnId_t connId)
{
   1debc:	b580      	push	{r7, lr}
   1debe:	b084      	sub	sp, #16
   1dec0:	af00      	add	r7, sp, #0
   1dec2:	4603      	mov	r3, r0
   1dec4:	71fb      	strb	r3, [r7, #7]
  appConnCb_t *pCb;

  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[connId - 1];
   1dec6:	79fb      	ldrb	r3, [r7, #7]
   1dec8:	3b01      	subs	r3, #1
   1deca:	015b      	lsls	r3, r3, #5
   1decc:	4a0e      	ldr	r2, [pc, #56]	; (1df08 <AppMasterSecurityReq+0x4c>)
   1dece:	4413      	add	r3, r2
   1ded0:	60fb      	str	r3, [r7, #12]

  /* if master is not initiating security and not already secure */
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1ded2:	4b0e      	ldr	r3, [pc, #56]	; (1df0c <AppMasterSecurityReq+0x50>)
   1ded4:	681b      	ldr	r3, [r3, #0]
   1ded6:	791b      	ldrb	r3, [r3, #4]
   1ded8:	2b00      	cmp	r3, #0
   1deda:	d110      	bne.n	1defe <AppMasterSecurityReq+0x42>
   1dedc:	68fb      	ldr	r3, [r7, #12]
   1dede:	7a1b      	ldrb	r3, [r3, #8]
   1dee0:	2b00      	cmp	r3, #0
   1dee2:	d10c      	bne.n	1defe <AppMasterSecurityReq+0x42>
      (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE))
   1dee4:	79fb      	ldrb	r3, [r7, #7]
   1dee6:	4618      	mov	r0, r3
   1dee8:	f7f1 fd0c 	bl	f904 <DmConnSecLevel>
   1deec:	4603      	mov	r3, r0
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1deee:	2b00      	cmp	r3, #0
   1def0:	d105      	bne.n	1defe <AppMasterSecurityReq+0x42>
  {
    appMasterInitiateSec(connId, TRUE, pCb);
   1def2:	79fb      	ldrb	r3, [r7, #7]
   1def4:	68fa      	ldr	r2, [r7, #12]
   1def6:	2101      	movs	r1, #1
   1def8:	4618      	mov	r0, r3
   1defa:	f7ff faef 	bl	1d4dc <appMasterInitiateSec>
  }
}
   1defe:	bf00      	nop
   1df00:	3710      	adds	r7, #16
   1df02:	46bd      	mov	sp, r7
   1df04:	bd80      	pop	{r7, pc}
   1df06:	bf00      	nop
   1df08:	1000b1fc 	.word	0x1000b1fc
   1df0c:	1000b1ec 	.word	0x1000b1ec

0001df10 <AppMasterResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterResolveAddr(dmEvt_t *pMsg, appDbHdl_t dbHdl, uint8_t resolveType)
{
   1df10:	b590      	push	{r4, r7, lr}
   1df12:	b089      	sub	sp, #36	; 0x24
   1df14:	af00      	add	r7, sp, #0
   1df16:	60f8      	str	r0, [r7, #12]
   1df18:	60b9      	str	r1, [r7, #8]
   1df1a:	4613      	mov	r3, r2
   1df1c:	71fb      	strb	r3, [r7, #7]
  uint8_t    idx;

  /* if address resolution's in progress or scan record is not found */
  if ((appMasterCb.inProgress) || ((idx = appScanResultFind(pMsg)) >= APP_SCAN_RESULT_MAX))
   1df1e:	4b29      	ldr	r3, [pc, #164]	; (1dfc4 <AppMasterResolveAddr+0xb4>)
   1df20:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1df24:	2b00      	cmp	r3, #0
   1df26:	d149      	bne.n	1dfbc <AppMasterResolveAddr+0xac>
   1df28:	68f8      	ldr	r0, [r7, #12]
   1df2a:	f7ff fbc3 	bl	1d6b4 <appScanResultFind>
   1df2e:	4603      	mov	r3, r0
   1df30:	77fb      	strb	r3, [r7, #31]
   1df32:	7ffb      	ldrb	r3, [r7, #31]
   1df34:	2b09      	cmp	r3, #9
   1df36:	d841      	bhi.n	1dfbc <AppMasterResolveAddr+0xac>
  {
    return;
  }

  /* if asked to resolve direct address */
  if (resolveType == APP_RESOLVE_DIRECT_RPA)
   1df38:	79fb      	ldrb	r3, [r7, #7]
   1df3a:	2b01      	cmp	r3, #1
   1df3c:	d117      	bne.n	1df6e <AppMasterResolveAddr+0x5e>
  {
    /* reslove initiator's RPA to see if the directed advertisement is addressed to us */
    DmPrivResolveAddr(pMsg->scanReport.directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   1df3e:	68fb      	ldr	r3, [r7, #12]
   1df40:	f103 0413 	add.w	r4, r3, #19
   1df44:	f7f2 fa80 	bl	10448 <DmSecGetLocalIrk>
   1df48:	4603      	mov	r3, r0
   1df4a:	2201      	movs	r2, #1
   1df4c:	4619      	mov	r1, r3
   1df4e:	4620      	mov	r0, r4
   1df50:	f7f1 ff46 	bl	fde0 <DmPrivResolveAddr>

    /* store scan record index and database record handle for later */
    appMasterCb.idx = idx;
   1df54:	4a1b      	ldr	r2, [pc, #108]	; (1dfc4 <AppMasterResolveAddr+0xb4>)
   1df56:	7ffb      	ldrb	r3, [r7, #31]
   1df58:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    appMasterCb.dbHdl = dbHdl;
   1df5c:	4a19      	ldr	r2, [pc, #100]	; (1dfc4 <AppMasterResolveAddr+0xb4>)
   1df5e:	68bb      	ldr	r3, [r7, #8]
   1df60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    appMasterCb.inProgress = TRUE;
   1df64:	4b17      	ldr	r3, [pc, #92]	; (1dfc4 <AppMasterResolveAddr+0xb4>)
   1df66:	2201      	movs	r2, #1
   1df68:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   1df6c:	e027      	b.n	1dfbe <AppMasterResolveAddr+0xae>
  }
  /* if asked to resolve advertiser's address */
  else if (resolveType == APP_RESOLVE_ADV_RPA)
   1df6e:	79fb      	ldrb	r3, [r7, #7]
   1df70:	2b00      	cmp	r3, #0
   1df72:	d124      	bne.n	1dfbe <AppMasterResolveAddr+0xae>
  {
    dmSecKey_t *pPeerKey;
    appDbHdl_t hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1df74:	2000      	movs	r0, #0
   1df76:	f7f5 fb7b 	bl	13670 <AppDbGetNextRecord>
   1df7a:	61b8      	str	r0, [r7, #24]

    /* if we have any bond records */
    if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1df7c:	69bb      	ldr	r3, [r7, #24]
   1df7e:	2b00      	cmp	r3, #0
   1df80:	d01d      	beq.n	1dfbe <AppMasterResolveAddr+0xae>
   1df82:	2200      	movs	r2, #0
   1df84:	2104      	movs	r1, #4
   1df86:	69b8      	ldr	r0, [r7, #24]
   1df88:	f7f5 fc58 	bl	1383c <AppDbGetKey>
   1df8c:	6178      	str	r0, [r7, #20]
   1df8e:	697b      	ldr	r3, [r7, #20]
   1df90:	2b00      	cmp	r3, #0
   1df92:	d014      	beq.n	1dfbe <AppMasterResolveAddr+0xae>
    {
      /* reslove advertiser's RPA to see if we already have a bond with this device */
      DmPrivResolveAddr(pMsg->scanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1df94:	68fb      	ldr	r3, [r7, #12]
   1df96:	330c      	adds	r3, #12
   1df98:	6979      	ldr	r1, [r7, #20]
   1df9a:	2200      	movs	r2, #0
   1df9c:	4618      	mov	r0, r3
   1df9e:	f7f1 ff1f 	bl	fde0 <DmPrivResolveAddr>

      /* store scan record index and database record handle for later */
      appMasterCb.idx = idx;
   1dfa2:	4a08      	ldr	r2, [pc, #32]	; (1dfc4 <AppMasterResolveAddr+0xb4>)
   1dfa4:	7ffb      	ldrb	r3, [r7, #31]
   1dfa6:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      appMasterCb.dbHdl = hdl;
   1dfaa:	4a06      	ldr	r2, [pc, #24]	; (1dfc4 <AppMasterResolveAddr+0xb4>)
   1dfac:	69bb      	ldr	r3, [r7, #24]
   1dfae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      appMasterCb.inProgress = TRUE;
   1dfb2:	4b04      	ldr	r3, [pc, #16]	; (1dfc4 <AppMasterResolveAddr+0xb4>)
   1dfb4:	2201      	movs	r2, #1
   1dfb6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
   1dfba:	e000      	b.n	1dfbe <AppMasterResolveAddr+0xae>
    return;
   1dfbc:	bf00      	nop
    }
  }
}
   1dfbe:	3724      	adds	r7, #36	; 0x24
   1dfc0:	46bd      	mov	sp, r7
   1dfc2:	bd90      	pop	{r4, r7, pc}
   1dfc4:	1000b2fc 	.word	0x1000b2fc

0001dfc8 <appMasterScanMode>:
 *
 *  \return TRUE if legacy scanning mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appMasterScanMode(void)
{
   1dfc8:	b580      	push	{r7, lr}
   1dfca:	af00      	add	r7, sp, #0
  /* legacy master app works with both DM legacy and extended scanning */

  /* if first time since last power-on or reset */
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1dfcc:	4b0b      	ldr	r3, [pc, #44]	; (1dffc <appMasterScanMode+0x34>)
   1dfce:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   1dfd2:	2bff      	cmp	r3, #255	; 0xff
   1dfd4:	d105      	bne.n	1dfe2 <appMasterScanMode+0x1a>
  {
    /* set scanning mode to legacy */
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   1dfd6:	4b09      	ldr	r3, [pc, #36]	; (1dffc <appMasterScanMode+0x34>)
   1dfd8:	2200      	movs	r2, #0
   1dfda:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

    return TRUE;
   1dfde:	2301      	movs	r3, #1
   1dfe0:	e00a      	b.n	1dff8 <appMasterScanMode+0x30>
  }

  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   1dfe2:	4b06      	ldr	r3, [pc, #24]	; (1dffc <appMasterScanMode+0x34>)
   1dfe4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
   1dfe8:	2b00      	cmp	r3, #0
   1dfea:	d101      	bne.n	1dff0 <appMasterScanMode+0x28>
  {
    return TRUE;
   1dfec:	2301      	movs	r3, #1
   1dfee:	e003      	b.n	1dff8 <appMasterScanMode+0x30>
  }

  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   1dff0:	4803      	ldr	r0, [pc, #12]	; (1e000 <appMasterScanMode+0x38>)
   1dff2:	f7f7 fdb1 	bl	15b58 <WsfTrace>

  return FALSE;
   1dff6:	2300      	movs	r3, #0
}
   1dff8:	4618      	mov	r0, r3
   1dffa:	bd80      	pop	{r7, pc}
   1dffc:	1000b2fc 	.word	0x1000b2fc
   1e000:	00024eb0 	.word	0x00024eb0

0001e004 <AppScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppScanStart(uint8_t mode, uint8_t scanType, uint16_t duration)
{
   1e004:	b580      	push	{r7, lr}
   1e006:	b084      	sub	sp, #16
   1e008:	af02      	add	r7, sp, #8
   1e00a:	4603      	mov	r3, r0
   1e00c:	71fb      	strb	r3, [r7, #7]
   1e00e:	460b      	mov	r3, r1
   1e010:	71bb      	strb	r3, [r7, #6]
   1e012:	4613      	mov	r3, r2
   1e014:	80bb      	strh	r3, [r7, #4]
  if (appMasterScanMode())
   1e016:	f7ff ffd7 	bl	1dfc8 <appMasterScanMode>
   1e01a:	4603      	mov	r3, r0
   1e01c:	2b00      	cmp	r3, #0
   1e01e:	d013      	beq.n	1e048 <AppScanStart+0x44>
  {
    DmScanSetInterval(HCI_SCAN_PHY_LE_1M_BIT, &pAppMasterCfg->scanInterval, &pAppMasterCfg->scanWindow);
   1e020:	4b0b      	ldr	r3, [pc, #44]	; (1e050 <AppScanStart+0x4c>)
   1e022:	681b      	ldr	r3, [r3, #0]
   1e024:	4619      	mov	r1, r3
   1e026:	4b0a      	ldr	r3, [pc, #40]	; (1e050 <AppScanStart+0x4c>)
   1e028:	681b      	ldr	r3, [r3, #0]
   1e02a:	3302      	adds	r3, #2
   1e02c:	461a      	mov	r2, r3
   1e02e:	2001      	movs	r0, #1
   1e030:	f7f1 ffdc 	bl	ffec <DmScanSetInterval>

    DmScanStart(HCI_SCAN_PHY_LE_1M_BIT, mode, &scanType, TRUE, duration, 0);
   1e034:	1dba      	adds	r2, r7, #6
   1e036:	79f9      	ldrb	r1, [r7, #7]
   1e038:	2300      	movs	r3, #0
   1e03a:	9301      	str	r3, [sp, #4]
   1e03c:	88bb      	ldrh	r3, [r7, #4]
   1e03e:	9300      	str	r3, [sp, #0]
   1e040:	2301      	movs	r3, #1
   1e042:	2001      	movs	r0, #1
   1e044:	f7f1 ff92 	bl	ff6c <DmScanStart>
  }
}
   1e048:	bf00      	nop
   1e04a:	3708      	adds	r7, #8
   1e04c:	46bd      	mov	sp, r7
   1e04e:	bd80      	pop	{r7, pc}
   1e050:	1000b1cc 	.word	0x1000b1cc

0001e054 <AppScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppScanStop(void)
{
   1e054:	b580      	push	{r7, lr}
   1e056:	af00      	add	r7, sp, #0
  if (appMasterScanMode())
   1e058:	f7ff ffb6 	bl	1dfc8 <appMasterScanMode>
   1e05c:	4603      	mov	r3, r0
   1e05e:	2b00      	cmp	r3, #0
   1e060:	d005      	beq.n	1e06e <AppScanStop+0x1a>
  {
    /* stop address resolution */
    appMasterCb.inProgress = FALSE;
   1e062:	4b04      	ldr	r3, [pc, #16]	; (1e074 <AppScanStop+0x20>)
   1e064:	2200      	movs	r2, #0
   1e066:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

    DmScanStop();
   1e06a:	f7f1 ffad 	bl	ffc8 <DmScanStop>
  }
}
   1e06e:	bf00      	nop
   1e070:	bd80      	pop	{r7, pc}
   1e072:	bf00      	nop
   1e074:	1000b2fc 	.word	0x1000b2fc

0001e078 <AppConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t AppConnOpen(uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1e078:	b580      	push	{r7, lr}
   1e07a:	b084      	sub	sp, #16
   1e07c:	af00      	add	r7, sp, #0
   1e07e:	4603      	mov	r3, r0
   1e080:	60b9      	str	r1, [r7, #8]
   1e082:	607a      	str	r2, [r7, #4]
   1e084:	73fb      	strb	r3, [r7, #15]
  if (appMasterScanMode())
   1e086:	f7ff ff9f 	bl	1dfc8 <appMasterScanMode>
   1e08a:	4603      	mov	r3, r0
   1e08c:	2b00      	cmp	r3, #0
   1e08e:	d007      	beq.n	1e0a0 <AppConnOpen+0x28>
  {
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   1e090:	7bf9      	ldrb	r1, [r7, #15]
   1e092:	687b      	ldr	r3, [r7, #4]
   1e094:	68ba      	ldr	r2, [r7, #8]
   1e096:	2001      	movs	r0, #1
   1e098:	f7ff feda 	bl	1de50 <appConnOpen>
   1e09c:	4603      	mov	r3, r0
   1e09e:	e000      	b.n	1e0a2 <AppConnOpen+0x2a>
  }

  /* wrong connect mode */
  return DM_CONN_ID_NONE;
   1e0a0:	2300      	movs	r3, #0
}
   1e0a2:	4618      	mov	r0, r3
   1e0a4:	3710      	adds	r7, #16
   1e0a6:	46bd      	mov	sp, r7
   1e0a8:	bd80      	pop	{r7, pc}
	...

0001e0ac <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1e0ac:	b580      	push	{r7, lr}
   1e0ae:	b088      	sub	sp, #32
   1e0b0:	af00      	add	r7, sp, #0
   1e0b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   1e0b4:	2300      	movs	r3, #0
   1e0b6:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
   1e0b8:	f001 f904 	bl	1f2c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   1e0bc:	4b40      	ldr	r3, [pc, #256]	; (1e1c0 <pvPortMalloc+0x114>)
   1e0be:	681b      	ldr	r3, [r3, #0]
   1e0c0:	2b00      	cmp	r3, #0
   1e0c2:	d104      	bne.n	1e0ce <pvPortMalloc+0x22>
		{
			prvHeapInit();
   1e0c4:	f000 f8be 	bl	1e244 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   1e0c8:	4b3d      	ldr	r3, [pc, #244]	; (1e1c0 <pvPortMalloc+0x114>)
   1e0ca:	2201      	movs	r2, #1
   1e0cc:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   1e0ce:	687b      	ldr	r3, [r7, #4]
   1e0d0:	2b00      	cmp	r3, #0
   1e0d2:	d00e      	beq.n	1e0f2 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
   1e0d4:	2308      	movs	r3, #8
   1e0d6:	461a      	mov	r2, r3
   1e0d8:	687b      	ldr	r3, [r7, #4]
   1e0da:	4413      	add	r3, r2
   1e0dc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   1e0de:	687b      	ldr	r3, [r7, #4]
   1e0e0:	f003 0307 	and.w	r3, r3, #7
   1e0e4:	2b00      	cmp	r3, #0
   1e0e6:	d004      	beq.n	1e0f2 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1e0e8:	687b      	ldr	r3, [r7, #4]
   1e0ea:	f023 0307 	bic.w	r3, r3, #7
   1e0ee:	3308      	adds	r3, #8
   1e0f0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   1e0f2:	687b      	ldr	r3, [r7, #4]
   1e0f4:	2b00      	cmp	r3, #0
   1e0f6:	d057      	beq.n	1e1a8 <pvPortMalloc+0xfc>
   1e0f8:	687b      	ldr	r3, [r7, #4]
   1e0fa:	f643 72f7 	movw	r2, #16375	; 0x3ff7
   1e0fe:	4293      	cmp	r3, r2
   1e100:	d852      	bhi.n	1e1a8 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   1e102:	4b30      	ldr	r3, [pc, #192]	; (1e1c4 <pvPortMalloc+0x118>)
   1e104:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
   1e106:	4b2f      	ldr	r3, [pc, #188]	; (1e1c4 <pvPortMalloc+0x118>)
   1e108:	681b      	ldr	r3, [r3, #0]
   1e10a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1e10c:	e004      	b.n	1e118 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
   1e10e:	69fb      	ldr	r3, [r7, #28]
   1e110:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   1e112:	69fb      	ldr	r3, [r7, #28]
   1e114:	681b      	ldr	r3, [r3, #0]
   1e116:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1e118:	69fb      	ldr	r3, [r7, #28]
   1e11a:	685a      	ldr	r2, [r3, #4]
   1e11c:	687b      	ldr	r3, [r7, #4]
   1e11e:	429a      	cmp	r2, r3
   1e120:	d203      	bcs.n	1e12a <pvPortMalloc+0x7e>
   1e122:	69fb      	ldr	r3, [r7, #28]
   1e124:	681b      	ldr	r3, [r3, #0]
   1e126:	2b00      	cmp	r3, #0
   1e128:	d1f1      	bne.n	1e10e <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   1e12a:	69fb      	ldr	r3, [r7, #28]
   1e12c:	4a26      	ldr	r2, [pc, #152]	; (1e1c8 <pvPortMalloc+0x11c>)
   1e12e:	4293      	cmp	r3, r2
   1e130:	d03a      	beq.n	1e1a8 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   1e132:	69bb      	ldr	r3, [r7, #24]
   1e134:	681b      	ldr	r3, [r3, #0]
   1e136:	2208      	movs	r2, #8
   1e138:	4413      	add	r3, r2
   1e13a:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   1e13c:	69fb      	ldr	r3, [r7, #28]
   1e13e:	681a      	ldr	r2, [r3, #0]
   1e140:	69bb      	ldr	r3, [r7, #24]
   1e142:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1e144:	69fb      	ldr	r3, [r7, #28]
   1e146:	685a      	ldr	r2, [r3, #4]
   1e148:	687b      	ldr	r3, [r7, #4]
   1e14a:	1ad3      	subs	r3, r2, r3
   1e14c:	2208      	movs	r2, #8
   1e14e:	0052      	lsls	r2, r2, #1
   1e150:	4293      	cmp	r3, r2
   1e152:	d922      	bls.n	1e19a <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   1e154:	69fa      	ldr	r2, [r7, #28]
   1e156:	687b      	ldr	r3, [r7, #4]
   1e158:	4413      	add	r3, r2
   1e15a:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   1e15c:	69fb      	ldr	r3, [r7, #28]
   1e15e:	685a      	ldr	r2, [r3, #4]
   1e160:	687b      	ldr	r3, [r7, #4]
   1e162:	1ad2      	subs	r2, r2, r3
   1e164:	68fb      	ldr	r3, [r7, #12]
   1e166:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   1e168:	69fb      	ldr	r3, [r7, #28]
   1e16a:	687a      	ldr	r2, [r7, #4]
   1e16c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   1e16e:	68fb      	ldr	r3, [r7, #12]
   1e170:	685b      	ldr	r3, [r3, #4]
   1e172:	60bb      	str	r3, [r7, #8]
   1e174:	4b13      	ldr	r3, [pc, #76]	; (1e1c4 <pvPortMalloc+0x118>)
   1e176:	613b      	str	r3, [r7, #16]
   1e178:	e002      	b.n	1e180 <pvPortMalloc+0xd4>
   1e17a:	693b      	ldr	r3, [r7, #16]
   1e17c:	681b      	ldr	r3, [r3, #0]
   1e17e:	613b      	str	r3, [r7, #16]
   1e180:	693b      	ldr	r3, [r7, #16]
   1e182:	681b      	ldr	r3, [r3, #0]
   1e184:	685a      	ldr	r2, [r3, #4]
   1e186:	68bb      	ldr	r3, [r7, #8]
   1e188:	429a      	cmp	r2, r3
   1e18a:	d3f6      	bcc.n	1e17a <pvPortMalloc+0xce>
   1e18c:	693b      	ldr	r3, [r7, #16]
   1e18e:	681a      	ldr	r2, [r3, #0]
   1e190:	68fb      	ldr	r3, [r7, #12]
   1e192:	601a      	str	r2, [r3, #0]
   1e194:	693b      	ldr	r3, [r7, #16]
   1e196:	68fa      	ldr	r2, [r7, #12]
   1e198:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   1e19a:	4b0c      	ldr	r3, [pc, #48]	; (1e1cc <pvPortMalloc+0x120>)
   1e19c:	681a      	ldr	r2, [r3, #0]
   1e19e:	69fb      	ldr	r3, [r7, #28]
   1e1a0:	685b      	ldr	r3, [r3, #4]
   1e1a2:	1ad3      	subs	r3, r2, r3
   1e1a4:	4a09      	ldr	r2, [pc, #36]	; (1e1cc <pvPortMalloc+0x120>)
   1e1a6:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1e1a8:	f001 f8d2 	bl	1f350 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1e1ac:	697b      	ldr	r3, [r7, #20]
   1e1ae:	2b00      	cmp	r3, #0
   1e1b0:	d101      	bne.n	1e1b6 <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1e1b2:	f7f5 f9be 	bl	13532 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   1e1b6:	697b      	ldr	r3, [r7, #20]
}
   1e1b8:	4618      	mov	r0, r3
   1e1ba:	3720      	adds	r7, #32
   1e1bc:	46bd      	mov	sp, r7
   1e1be:	bd80      	pop	{r7, pc}
   1e1c0:	1000944c 	.word	0x1000944c
   1e1c4:	1000943c 	.word	0x1000943c
   1e1c8:	10009444 	.word	0x10009444
   1e1cc:	10002e98 	.word	0x10002e98

0001e1d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1e1d0:	b580      	push	{r7, lr}
   1e1d2:	b086      	sub	sp, #24
   1e1d4:	af00      	add	r7, sp, #0
   1e1d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   1e1d8:	687b      	ldr	r3, [r7, #4]
   1e1da:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   1e1dc:	687b      	ldr	r3, [r7, #4]
   1e1de:	2b00      	cmp	r3, #0
   1e1e0:	d027      	beq.n	1e232 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   1e1e2:	2308      	movs	r3, #8
   1e1e4:	425b      	negs	r3, r3
   1e1e6:	693a      	ldr	r2, [r7, #16]
   1e1e8:	4413      	add	r3, r2
   1e1ea:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   1e1ec:	693b      	ldr	r3, [r7, #16]
   1e1ee:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
   1e1f0:	f001 f868 	bl	1f2c4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1e1f4:	68fb      	ldr	r3, [r7, #12]
   1e1f6:	685b      	ldr	r3, [r3, #4]
   1e1f8:	60bb      	str	r3, [r7, #8]
   1e1fa:	4b10      	ldr	r3, [pc, #64]	; (1e23c <vPortFree+0x6c>)
   1e1fc:	617b      	str	r3, [r7, #20]
   1e1fe:	e002      	b.n	1e206 <vPortFree+0x36>
   1e200:	697b      	ldr	r3, [r7, #20]
   1e202:	681b      	ldr	r3, [r3, #0]
   1e204:	617b      	str	r3, [r7, #20]
   1e206:	697b      	ldr	r3, [r7, #20]
   1e208:	681b      	ldr	r3, [r3, #0]
   1e20a:	685a      	ldr	r2, [r3, #4]
   1e20c:	68bb      	ldr	r3, [r7, #8]
   1e20e:	429a      	cmp	r2, r3
   1e210:	d3f6      	bcc.n	1e200 <vPortFree+0x30>
   1e212:	697b      	ldr	r3, [r7, #20]
   1e214:	681a      	ldr	r2, [r3, #0]
   1e216:	68fb      	ldr	r3, [r7, #12]
   1e218:	601a      	str	r2, [r3, #0]
   1e21a:	697b      	ldr	r3, [r7, #20]
   1e21c:	68fa      	ldr	r2, [r7, #12]
   1e21e:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1e220:	68fb      	ldr	r3, [r7, #12]
   1e222:	685a      	ldr	r2, [r3, #4]
   1e224:	4b06      	ldr	r3, [pc, #24]	; (1e240 <vPortFree+0x70>)
   1e226:	681b      	ldr	r3, [r3, #0]
   1e228:	4413      	add	r3, r2
   1e22a:	4a05      	ldr	r2, [pc, #20]	; (1e240 <vPortFree+0x70>)
   1e22c:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   1e22e:	f001 f88f 	bl	1f350 <xTaskResumeAll>
	}
}
   1e232:	bf00      	nop
   1e234:	3718      	adds	r7, #24
   1e236:	46bd      	mov	sp, r7
   1e238:	bd80      	pop	{r7, pc}
   1e23a:	bf00      	nop
   1e23c:	1000943c 	.word	0x1000943c
   1e240:	10002e98 	.word	0x10002e98

0001e244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   1e244:	b480      	push	{r7}
   1e246:	b083      	sub	sp, #12
   1e248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1e24a:	4b10      	ldr	r3, [pc, #64]	; (1e28c <prvHeapInit+0x48>)
   1e24c:	f023 0307 	bic.w	r3, r3, #7
   1e250:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   1e252:	4a0f      	ldr	r2, [pc, #60]	; (1e290 <prvHeapInit+0x4c>)
   1e254:	687b      	ldr	r3, [r7, #4]
   1e256:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   1e258:	4b0d      	ldr	r3, [pc, #52]	; (1e290 <prvHeapInit+0x4c>)
   1e25a:	2200      	movs	r2, #0
   1e25c:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1e25e:	4b0d      	ldr	r3, [pc, #52]	; (1e294 <prvHeapInit+0x50>)
   1e260:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   1e264:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   1e266:	4b0b      	ldr	r3, [pc, #44]	; (1e294 <prvHeapInit+0x50>)
   1e268:	2200      	movs	r2, #0
   1e26a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   1e26c:	687b      	ldr	r3, [r7, #4]
   1e26e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   1e270:	683b      	ldr	r3, [r7, #0]
   1e272:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   1e276:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   1e278:	683b      	ldr	r3, [r7, #0]
   1e27a:	4a06      	ldr	r2, [pc, #24]	; (1e294 <prvHeapInit+0x50>)
   1e27c:	601a      	str	r2, [r3, #0]
}
   1e27e:	bf00      	nop
   1e280:	370c      	adds	r7, #12
   1e282:	46bd      	mov	sp, r7
   1e284:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e288:	4770      	bx	lr
   1e28a:	bf00      	nop
   1e28c:	10005444 	.word	0x10005444
   1e290:	1000943c 	.word	0x1000943c
   1e294:	10009444 	.word	0x10009444

0001e298 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1e298:	b580      	push	{r7, lr}
   1e29a:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcGapGroup);
   1e29c:	4803      	ldr	r0, [pc, #12]	; (1e2ac <SvcCoreAddGroup+0x14>)
   1e29e:	f7ef fbed 	bl	da7c <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   1e2a2:	4803      	ldr	r0, [pc, #12]	; (1e2b0 <SvcCoreAddGroup+0x18>)
   1e2a4:	f7ef fbea 	bl	da7c <AttsAddGroup>
}
   1e2a8:	bf00      	nop
   1e2aa:	bd80      	pop	{r7, pc}
   1e2ac:	10002e9c 	.word	0x10002e9c
   1e2b0:	10002eb0 	.word	0x10002eb0

0001e2b4 <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   1e2b4:	b480      	push	{r7}
   1e2b6:	b083      	sub	sp, #12
   1e2b8:	af00      	add	r7, sp, #0
   1e2ba:	4603      	mov	r3, r0
   1e2bc:	71fb      	strb	r3, [r7, #7]
  gapValCar[0] = value;
   1e2be:	4a04      	ldr	r2, [pc, #16]	; (1e2d0 <SvcCoreGapCentAddrResUpdate+0x1c>)
   1e2c0:	79fb      	ldrb	r3, [r7, #7]
   1e2c2:	7013      	strb	r3, [r2, #0]
}
   1e2c4:	bf00      	nop
   1e2c6:	370c      	adds	r7, #12
   1e2c8:	46bd      	mov	sp, r7
   1e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e2ce:	4770      	bx	lr
   1e2d0:	10009454 	.word	0x10009454

0001e2d4 <SvcCoreGapAddRpaoCh>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapAddRpaoCh(void)
{
   1e2d4:	b480      	push	{r7}
   1e2d6:	af00      	add	r7, sp, #0
  /* if RPAO characteristic not already in GAP service */
  if (svcGapGroup.endHandle < GAP_RPAO_HDL)
   1e2d8:	4b05      	ldr	r3, [pc, #20]	; (1e2f0 <SvcCoreGapAddRpaoCh+0x1c>)
   1e2da:	8a5b      	ldrh	r3, [r3, #18]
   1e2dc:	2b08      	cmp	r3, #8
   1e2de:	d802      	bhi.n	1e2e6 <SvcCoreGapAddRpaoCh+0x12>
  {
    svcGapGroup.endHandle = GAP_RPAO_HDL;
   1e2e0:	4b03      	ldr	r3, [pc, #12]	; (1e2f0 <SvcCoreGapAddRpaoCh+0x1c>)
   1e2e2:	2209      	movs	r2, #9
   1e2e4:	825a      	strh	r2, [r3, #18]
  }
}
   1e2e6:	bf00      	nop
   1e2e8:	46bd      	mov	sp, r7
   1e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e2ee:	4770      	bx	lr
   1e2f0:	10002e9c 	.word	0x10002e9c

0001e2f4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1e2f4:	b580      	push	{r7, lr}
   1e2f6:	b082      	sub	sp, #8
   1e2f8:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   1e2fa:	2018      	movs	r0, #24
   1e2fc:	f7ff fed6 	bl	1e0ac <pvPortMalloc>
   1e300:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
   1e302:	687b      	ldr	r3, [r7, #4]
   1e304:	2b00      	cmp	r3, #0
   1e306:	d007      	beq.n	1e318 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
   1e308:	687b      	ldr	r3, [r7, #4]
   1e30a:	2200      	movs	r2, #0
   1e30c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1e30e:	687b      	ldr	r3, [r7, #4]
   1e310:	3304      	adds	r3, #4
   1e312:	4618      	mov	r0, r3
   1e314:	f000 f952 	bl	1e5bc <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   1e318:	687b      	ldr	r3, [r7, #4]
	}
   1e31a:	4618      	mov	r0, r3
   1e31c:	3708      	adds	r7, #8
   1e31e:	46bd      	mov	sp, r7
   1e320:	bd80      	pop	{r7, pc}
	...

0001e324 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   1e324:	b580      	push	{r7, lr}
   1e326:	b08c      	sub	sp, #48	; 0x30
   1e328:	af00      	add	r7, sp, #0
   1e32a:	60f8      	str	r0, [r7, #12]
   1e32c:	60b9      	str	r1, [r7, #8]
   1e32e:	607a      	str	r2, [r7, #4]
   1e330:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
   1e332:	68fb      	ldr	r3, [r7, #12]
   1e334:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   1e336:	2300      	movs	r3, #0
   1e338:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   1e33a:	2300      	movs	r3, #0
   1e33c:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1e33e:	68fb      	ldr	r3, [r7, #12]
   1e340:	2b00      	cmp	r3, #0
   1e342:	d100      	bne.n	1e346 <xEventGroupWaitBits+0x22>
   1e344:	e7fe      	b.n	1e344 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1e346:	68bb      	ldr	r3, [r7, #8]
   1e348:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1e34c:	2b00      	cmp	r3, #0
   1e34e:	d000      	beq.n	1e352 <xEventGroupWaitBits+0x2e>
   1e350:	e7fe      	b.n	1e350 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
   1e352:	68bb      	ldr	r3, [r7, #8]
   1e354:	2b00      	cmp	r3, #0
   1e356:	d100      	bne.n	1e35a <xEventGroupWaitBits+0x36>
   1e358:	e7fe      	b.n	1e358 <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1e35a:	f001 fc17 	bl	1fb8c <xTaskGetSchedulerState>
   1e35e:	4603      	mov	r3, r0
   1e360:	2b00      	cmp	r3, #0
   1e362:	d102      	bne.n	1e36a <xEventGroupWaitBits+0x46>
   1e364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e366:	2b00      	cmp	r3, #0
   1e368:	d101      	bne.n	1e36e <xEventGroupWaitBits+0x4a>
   1e36a:	2301      	movs	r3, #1
   1e36c:	e000      	b.n	1e370 <xEventGroupWaitBits+0x4c>
   1e36e:	2300      	movs	r3, #0
   1e370:	2b00      	cmp	r3, #0
   1e372:	d100      	bne.n	1e376 <xEventGroupWaitBits+0x52>
   1e374:	e7fe      	b.n	1e374 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
   1e376:	f000 ffa5 	bl	1f2c4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e37c:	681b      	ldr	r3, [r3, #0]
   1e37e:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   1e380:	683a      	ldr	r2, [r7, #0]
   1e382:	68b9      	ldr	r1, [r7, #8]
   1e384:	69f8      	ldr	r0, [r7, #28]
   1e386:	f000 f8f7 	bl	1e578 <prvTestWaitCondition>
   1e38a:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
   1e38c:	69bb      	ldr	r3, [r7, #24]
   1e38e:	2b00      	cmp	r3, #0
   1e390:	d00e      	beq.n	1e3b0 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   1e392:	69fb      	ldr	r3, [r7, #28]
   1e394:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   1e396:	2300      	movs	r3, #0
   1e398:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   1e39a:	687b      	ldr	r3, [r7, #4]
   1e39c:	2b00      	cmp	r3, #0
   1e39e:	d028      	beq.n	1e3f2 <xEventGroupWaitBits+0xce>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3a2:	681a      	ldr	r2, [r3, #0]
   1e3a4:	68bb      	ldr	r3, [r7, #8]
   1e3a6:	43db      	mvns	r3, r3
   1e3a8:	401a      	ands	r2, r3
   1e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3ac:	601a      	str	r2, [r3, #0]
   1e3ae:	e020      	b.n	1e3f2 <xEventGroupWaitBits+0xce>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   1e3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e3b2:	2b00      	cmp	r3, #0
   1e3b4:	d104      	bne.n	1e3c0 <xEventGroupWaitBits+0x9c>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   1e3b6:	69fb      	ldr	r3, [r7, #28]
   1e3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   1e3ba:	2301      	movs	r3, #1
   1e3bc:	623b      	str	r3, [r7, #32]
   1e3be:	e018      	b.n	1e3f2 <xEventGroupWaitBits+0xce>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   1e3c0:	687b      	ldr	r3, [r7, #4]
   1e3c2:	2b00      	cmp	r3, #0
   1e3c4:	d003      	beq.n	1e3ce <xEventGroupWaitBits+0xaa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   1e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e3c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e3cc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   1e3ce:	683b      	ldr	r3, [r7, #0]
   1e3d0:	2b00      	cmp	r3, #0
   1e3d2:	d003      	beq.n	1e3dc <xEventGroupWaitBits+0xb8>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   1e3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e3d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1e3da:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e3de:	1d18      	adds	r0, r3, #4
   1e3e0:	68ba      	ldr	r2, [r7, #8]
   1e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e3e4:	4313      	orrs	r3, r2
   1e3e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e3e8:	4619      	mov	r1, r3
   1e3ea:	f001 f9a5 	bl	1f738 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   1e3ee:	2300      	movs	r3, #0
   1e3f0:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   1e3f2:	f000 ffad 	bl	1f350 <xTaskResumeAll>
   1e3f6:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   1e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e3fa:	2b00      	cmp	r3, #0
   1e3fc:	d031      	beq.n	1e462 <xEventGroupWaitBits+0x13e>
	{
		if( xAlreadyYielded == pdFALSE )
   1e3fe:	697b      	ldr	r3, [r7, #20]
   1e400:	2b00      	cmp	r3, #0
   1e402:	d107      	bne.n	1e414 <xEventGroupWaitBits+0xf0>
		{
			portYIELD_WITHIN_API();
   1e404:	4b19      	ldr	r3, [pc, #100]	; (1e46c <xEventGroupWaitBits+0x148>)
   1e406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e40a:	601a      	str	r2, [r3, #0]
   1e40c:	f3bf 8f4f 	dsb	sy
   1e410:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   1e414:	f001 fbd8 	bl	1fbc8 <uxTaskResetEventItemValue>
   1e418:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e41c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   1e420:	2b00      	cmp	r3, #0
   1e422:	d11a      	bne.n	1e45a <xEventGroupWaitBits+0x136>
		{
			taskENTER_CRITICAL();
   1e424:	f7fc fda8 	bl	1af78 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   1e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e42a:	681b      	ldr	r3, [r3, #0]
   1e42c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   1e42e:	683a      	ldr	r2, [r7, #0]
   1e430:	68b9      	ldr	r1, [r7, #8]
   1e432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e434:	f000 f8a0 	bl	1e578 <prvTestWaitCondition>
   1e438:	4603      	mov	r3, r0
   1e43a:	2b00      	cmp	r3, #0
   1e43c:	d009      	beq.n	1e452 <xEventGroupWaitBits+0x12e>
				{
					if( xClearOnExit != pdFALSE )
   1e43e:	687b      	ldr	r3, [r7, #4]
   1e440:	2b00      	cmp	r3, #0
   1e442:	d006      	beq.n	1e452 <xEventGroupWaitBits+0x12e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e446:	681a      	ldr	r2, [r3, #0]
   1e448:	68bb      	ldr	r3, [r7, #8]
   1e44a:	43db      	mvns	r3, r3
   1e44c:	401a      	ands	r2, r3
   1e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e450:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   1e452:	2301      	movs	r3, #1
   1e454:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
   1e456:	f7fc fdb5 	bl	1afc4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e45c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e460:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   1e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1e464:	4618      	mov	r0, r3
   1e466:	3730      	adds	r7, #48	; 0x30
   1e468:	46bd      	mov	sp, r7
   1e46a:	bd80      	pop	{r7, pc}
   1e46c:	e000ed04 	.word	0xe000ed04

0001e470 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   1e470:	b580      	push	{r7, lr}
   1e472:	b08c      	sub	sp, #48	; 0x30
   1e474:	af00      	add	r7, sp, #0
   1e476:	6078      	str	r0, [r7, #4]
   1e478:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   1e47a:	2300      	movs	r3, #0
   1e47c:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   1e47e:	687b      	ldr	r3, [r7, #4]
   1e480:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
   1e482:	2300      	movs	r3, #0
   1e484:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   1e486:	687b      	ldr	r3, [r7, #4]
   1e488:	2b00      	cmp	r3, #0
   1e48a:	d100      	bne.n	1e48e <xEventGroupSetBits+0x1e>
   1e48c:	e7fe      	b.n	1e48c <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1e48e:	683b      	ldr	r3, [r7, #0]
   1e490:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1e494:	2b00      	cmp	r3, #0
   1e496:	d000      	beq.n	1e49a <xEventGroupSetBits+0x2a>
   1e498:	e7fe      	b.n	1e498 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   1e49a:	6a3b      	ldr	r3, [r7, #32]
   1e49c:	3304      	adds	r3, #4
   1e49e:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e4a0:	69fb      	ldr	r3, [r7, #28]
   1e4a2:	3308      	adds	r3, #8
   1e4a4:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
   1e4a6:	f000 ff0d 	bl	1f2c4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   1e4aa:	69fb      	ldr	r3, [r7, #28]
   1e4ac:	68db      	ldr	r3, [r3, #12]
   1e4ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   1e4b0:	6a3b      	ldr	r3, [r7, #32]
   1e4b2:	681a      	ldr	r2, [r3, #0]
   1e4b4:	683b      	ldr	r3, [r7, #0]
   1e4b6:	431a      	orrs	r2, r3
   1e4b8:	6a3b      	ldr	r3, [r7, #32]
   1e4ba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   1e4bc:	e03c      	b.n	1e538 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
   1e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e4c0:	685b      	ldr	r3, [r3, #4]
   1e4c2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e4c6:	681b      	ldr	r3, [r3, #0]
   1e4c8:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
   1e4ca:	2300      	movs	r3, #0
   1e4cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   1e4ce:	693b      	ldr	r3, [r7, #16]
   1e4d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1e4d4:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1e4d6:	693b      	ldr	r3, [r7, #16]
   1e4d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e4dc:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1e4de:	68fb      	ldr	r3, [r7, #12]
   1e4e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   1e4e4:	2b00      	cmp	r3, #0
   1e4e6:	d108      	bne.n	1e4fa <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1e4e8:	6a3b      	ldr	r3, [r7, #32]
   1e4ea:	681a      	ldr	r2, [r3, #0]
   1e4ec:	693b      	ldr	r3, [r7, #16]
   1e4ee:	4013      	ands	r3, r2
   1e4f0:	2b00      	cmp	r3, #0
   1e4f2:	d00b      	beq.n	1e50c <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
   1e4f4:	2301      	movs	r3, #1
   1e4f6:	627b      	str	r3, [r7, #36]	; 0x24
   1e4f8:	e008      	b.n	1e50c <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1e4fa:	6a3b      	ldr	r3, [r7, #32]
   1e4fc:	681a      	ldr	r2, [r3, #0]
   1e4fe:	693b      	ldr	r3, [r7, #16]
   1e500:	401a      	ands	r2, r3
   1e502:	693b      	ldr	r3, [r7, #16]
   1e504:	429a      	cmp	r2, r3
   1e506:	d101      	bne.n	1e50c <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   1e508:	2301      	movs	r3, #1
   1e50a:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   1e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e50e:	2b00      	cmp	r3, #0
   1e510:	d010      	beq.n	1e534 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1e512:	68fb      	ldr	r3, [r7, #12]
   1e514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   1e518:	2b00      	cmp	r3, #0
   1e51a:	d003      	beq.n	1e524 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   1e51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e51e:	693b      	ldr	r3, [r7, #16]
   1e520:	4313      	orrs	r3, r2
   1e522:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1e524:	6a3b      	ldr	r3, [r7, #32]
   1e526:	681b      	ldr	r3, [r3, #0]
   1e528:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1e52c:	4619      	mov	r1, r3
   1e52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e530:	f001 f9a8 	bl	1f884 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   1e534:	697b      	ldr	r3, [r7, #20]
   1e536:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   1e538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e53a:	69bb      	ldr	r3, [r7, #24]
   1e53c:	429a      	cmp	r2, r3
   1e53e:	d1be      	bne.n	1e4be <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1e540:	6a3b      	ldr	r3, [r7, #32]
   1e542:	681a      	ldr	r2, [r3, #0]
   1e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e546:	43db      	mvns	r3, r3
   1e548:	401a      	ands	r2, r3
   1e54a:	6a3b      	ldr	r3, [r7, #32]
   1e54c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   1e54e:	f000 feff 	bl	1f350 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   1e552:	6a3b      	ldr	r3, [r7, #32]
   1e554:	681b      	ldr	r3, [r3, #0]
}
   1e556:	4618      	mov	r0, r3
   1e558:	3730      	adds	r7, #48	; 0x30
   1e55a:	46bd      	mov	sp, r7
   1e55c:	bd80      	pop	{r7, pc}

0001e55e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   1e55e:	b580      	push	{r7, lr}
   1e560:	b082      	sub	sp, #8
   1e562:	af00      	add	r7, sp, #0
   1e564:	6078      	str	r0, [r7, #4]
   1e566:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   1e568:	6839      	ldr	r1, [r7, #0]
   1e56a:	6878      	ldr	r0, [r7, #4]
   1e56c:	f7ff ff80 	bl	1e470 <xEventGroupSetBits>
}
   1e570:	bf00      	nop
   1e572:	3708      	adds	r7, #8
   1e574:	46bd      	mov	sp, r7
   1e576:	bd80      	pop	{r7, pc}

0001e578 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   1e578:	b480      	push	{r7}
   1e57a:	b087      	sub	sp, #28
   1e57c:	af00      	add	r7, sp, #0
   1e57e:	60f8      	str	r0, [r7, #12]
   1e580:	60b9      	str	r1, [r7, #8]
   1e582:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   1e584:	2300      	movs	r3, #0
   1e586:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
   1e588:	687b      	ldr	r3, [r7, #4]
   1e58a:	2b00      	cmp	r3, #0
   1e58c:	d107      	bne.n	1e59e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1e58e:	68fa      	ldr	r2, [r7, #12]
   1e590:	68bb      	ldr	r3, [r7, #8]
   1e592:	4013      	ands	r3, r2
   1e594:	2b00      	cmp	r3, #0
   1e596:	d00a      	beq.n	1e5ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1e598:	2301      	movs	r3, #1
   1e59a:	617b      	str	r3, [r7, #20]
   1e59c:	e007      	b.n	1e5ae <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1e59e:	68fa      	ldr	r2, [r7, #12]
   1e5a0:	68bb      	ldr	r3, [r7, #8]
   1e5a2:	401a      	ands	r2, r3
   1e5a4:	68bb      	ldr	r3, [r7, #8]
   1e5a6:	429a      	cmp	r2, r3
   1e5a8:	d101      	bne.n	1e5ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1e5aa:	2301      	movs	r3, #1
   1e5ac:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   1e5ae:	697b      	ldr	r3, [r7, #20]
}
   1e5b0:	4618      	mov	r0, r3
   1e5b2:	371c      	adds	r7, #28
   1e5b4:	46bd      	mov	sp, r7
   1e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e5ba:	4770      	bx	lr

0001e5bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1e5bc:	b480      	push	{r7}
   1e5be:	b083      	sub	sp, #12
   1e5c0:	af00      	add	r7, sp, #0
   1e5c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e5c4:	687b      	ldr	r3, [r7, #4]
   1e5c6:	f103 0208 	add.w	r2, r3, #8
   1e5ca:	687b      	ldr	r3, [r7, #4]
   1e5cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1e5ce:	687b      	ldr	r3, [r7, #4]
   1e5d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e5d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e5d6:	687b      	ldr	r3, [r7, #4]
   1e5d8:	f103 0208 	add.w	r2, r3, #8
   1e5dc:	687b      	ldr	r3, [r7, #4]
   1e5de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e5e0:	687b      	ldr	r3, [r7, #4]
   1e5e2:	f103 0208 	add.w	r2, r3, #8
   1e5e6:	687b      	ldr	r3, [r7, #4]
   1e5e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1e5ea:	687b      	ldr	r3, [r7, #4]
   1e5ec:	2200      	movs	r2, #0
   1e5ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1e5f0:	bf00      	nop
   1e5f2:	370c      	adds	r7, #12
   1e5f4:	46bd      	mov	sp, r7
   1e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e5fa:	4770      	bx	lr

0001e5fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1e5fc:	b480      	push	{r7}
   1e5fe:	b083      	sub	sp, #12
   1e600:	af00      	add	r7, sp, #0
   1e602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	2200      	movs	r2, #0
   1e608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1e60a:	bf00      	nop
   1e60c:	370c      	adds	r7, #12
   1e60e:	46bd      	mov	sp, r7
   1e610:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e614:	4770      	bx	lr

0001e616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1e616:	b480      	push	{r7}
   1e618:	b085      	sub	sp, #20
   1e61a:	af00      	add	r7, sp, #0
   1e61c:	6078      	str	r0, [r7, #4]
   1e61e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1e620:	687b      	ldr	r3, [r7, #4]
   1e622:	685b      	ldr	r3, [r3, #4]
   1e624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1e626:	683b      	ldr	r3, [r7, #0]
   1e628:	68fa      	ldr	r2, [r7, #12]
   1e62a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1e62c:	68fb      	ldr	r3, [r7, #12]
   1e62e:	689a      	ldr	r2, [r3, #8]
   1e630:	683b      	ldr	r3, [r7, #0]
   1e632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1e634:	68fb      	ldr	r3, [r7, #12]
   1e636:	689b      	ldr	r3, [r3, #8]
   1e638:	683a      	ldr	r2, [r7, #0]
   1e63a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1e63c:	68fb      	ldr	r3, [r7, #12]
   1e63e:	683a      	ldr	r2, [r7, #0]
   1e640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   1e642:	683b      	ldr	r3, [r7, #0]
   1e644:	687a      	ldr	r2, [r7, #4]
   1e646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1e648:	687b      	ldr	r3, [r7, #4]
   1e64a:	681b      	ldr	r3, [r3, #0]
   1e64c:	1c5a      	adds	r2, r3, #1
   1e64e:	687b      	ldr	r3, [r7, #4]
   1e650:	601a      	str	r2, [r3, #0]
}
   1e652:	bf00      	nop
   1e654:	3714      	adds	r7, #20
   1e656:	46bd      	mov	sp, r7
   1e658:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e65c:	4770      	bx	lr

0001e65e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1e65e:	b480      	push	{r7}
   1e660:	b085      	sub	sp, #20
   1e662:	af00      	add	r7, sp, #0
   1e664:	6078      	str	r0, [r7, #4]
   1e666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1e668:	683b      	ldr	r3, [r7, #0]
   1e66a:	681b      	ldr	r3, [r3, #0]
   1e66c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1e66e:	68bb      	ldr	r3, [r7, #8]
   1e670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e674:	d103      	bne.n	1e67e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1e676:	687b      	ldr	r3, [r7, #4]
   1e678:	691b      	ldr	r3, [r3, #16]
   1e67a:	60fb      	str	r3, [r7, #12]
   1e67c:	e00c      	b.n	1e698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   1e67e:	687b      	ldr	r3, [r7, #4]
   1e680:	3308      	adds	r3, #8
   1e682:	60fb      	str	r3, [r7, #12]
   1e684:	e002      	b.n	1e68c <vListInsert+0x2e>
   1e686:	68fb      	ldr	r3, [r7, #12]
   1e688:	685b      	ldr	r3, [r3, #4]
   1e68a:	60fb      	str	r3, [r7, #12]
   1e68c:	68fb      	ldr	r3, [r7, #12]
   1e68e:	685b      	ldr	r3, [r3, #4]
   1e690:	681a      	ldr	r2, [r3, #0]
   1e692:	68bb      	ldr	r3, [r7, #8]
   1e694:	429a      	cmp	r2, r3
   1e696:	d9f6      	bls.n	1e686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1e698:	68fb      	ldr	r3, [r7, #12]
   1e69a:	685a      	ldr	r2, [r3, #4]
   1e69c:	683b      	ldr	r3, [r7, #0]
   1e69e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1e6a0:	683b      	ldr	r3, [r7, #0]
   1e6a2:	685b      	ldr	r3, [r3, #4]
   1e6a4:	683a      	ldr	r2, [r7, #0]
   1e6a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1e6a8:	683b      	ldr	r3, [r7, #0]
   1e6aa:	68fa      	ldr	r2, [r7, #12]
   1e6ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1e6ae:	68fb      	ldr	r3, [r7, #12]
   1e6b0:	683a      	ldr	r2, [r7, #0]
   1e6b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   1e6b4:	683b      	ldr	r3, [r7, #0]
   1e6b6:	687a      	ldr	r2, [r7, #4]
   1e6b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1e6ba:	687b      	ldr	r3, [r7, #4]
   1e6bc:	681b      	ldr	r3, [r3, #0]
   1e6be:	1c5a      	adds	r2, r3, #1
   1e6c0:	687b      	ldr	r3, [r7, #4]
   1e6c2:	601a      	str	r2, [r3, #0]
}
   1e6c4:	bf00      	nop
   1e6c6:	3714      	adds	r7, #20
   1e6c8:	46bd      	mov	sp, r7
   1e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e6ce:	4770      	bx	lr

0001e6d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1e6d0:	b480      	push	{r7}
   1e6d2:	b085      	sub	sp, #20
   1e6d4:	af00      	add	r7, sp, #0
   1e6d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   1e6d8:	687b      	ldr	r3, [r7, #4]
   1e6da:	691b      	ldr	r3, [r3, #16]
   1e6dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1e6de:	687b      	ldr	r3, [r7, #4]
   1e6e0:	685b      	ldr	r3, [r3, #4]
   1e6e2:	687a      	ldr	r2, [r7, #4]
   1e6e4:	6892      	ldr	r2, [r2, #8]
   1e6e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1e6e8:	687b      	ldr	r3, [r7, #4]
   1e6ea:	689b      	ldr	r3, [r3, #8]
   1e6ec:	687a      	ldr	r2, [r7, #4]
   1e6ee:	6852      	ldr	r2, [r2, #4]
   1e6f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1e6f2:	68fb      	ldr	r3, [r7, #12]
   1e6f4:	685a      	ldr	r2, [r3, #4]
   1e6f6:	687b      	ldr	r3, [r7, #4]
   1e6f8:	429a      	cmp	r2, r3
   1e6fa:	d103      	bne.n	1e704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1e6fc:	687b      	ldr	r3, [r7, #4]
   1e6fe:	689a      	ldr	r2, [r3, #8]
   1e700:	68fb      	ldr	r3, [r7, #12]
   1e702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   1e704:	687b      	ldr	r3, [r7, #4]
   1e706:	2200      	movs	r2, #0
   1e708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1e70a:	68fb      	ldr	r3, [r7, #12]
   1e70c:	681b      	ldr	r3, [r3, #0]
   1e70e:	1e5a      	subs	r2, r3, #1
   1e710:	68fb      	ldr	r3, [r7, #12]
   1e712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1e714:	68fb      	ldr	r3, [r7, #12]
   1e716:	681b      	ldr	r3, [r3, #0]
}
   1e718:	4618      	mov	r0, r3
   1e71a:	3714      	adds	r7, #20
   1e71c:	46bd      	mov	sp, r7
   1e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e722:	4770      	bx	lr

0001e724 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1e724:	b580      	push	{r7, lr}
   1e726:	b084      	sub	sp, #16
   1e728:	af00      	add	r7, sp, #0
   1e72a:	6078      	str	r0, [r7, #4]
   1e72c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
   1e72e:	687b      	ldr	r3, [r7, #4]
   1e730:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1e732:	68fb      	ldr	r3, [r7, #12]
   1e734:	2b00      	cmp	r3, #0
   1e736:	d100      	bne.n	1e73a <xQueueGenericReset+0x16>
   1e738:	e7fe      	b.n	1e738 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
   1e73a:	f7fc fc1d 	bl	1af78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1e73e:	68fb      	ldr	r3, [r7, #12]
   1e740:	681a      	ldr	r2, [r3, #0]
   1e742:	68fb      	ldr	r3, [r7, #12]
   1e744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e746:	68f9      	ldr	r1, [r7, #12]
   1e748:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1e74a:	fb01 f303 	mul.w	r3, r1, r3
   1e74e:	441a      	add	r2, r3
   1e750:	68fb      	ldr	r3, [r7, #12]
   1e752:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1e754:	68fb      	ldr	r3, [r7, #12]
   1e756:	2200      	movs	r2, #0
   1e758:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1e75a:	68fb      	ldr	r3, [r7, #12]
   1e75c:	681a      	ldr	r2, [r3, #0]
   1e75e:	68fb      	ldr	r3, [r7, #12]
   1e760:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1e762:	68fb      	ldr	r3, [r7, #12]
   1e764:	681a      	ldr	r2, [r3, #0]
   1e766:	68fb      	ldr	r3, [r7, #12]
   1e768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e76a:	3b01      	subs	r3, #1
   1e76c:	68f9      	ldr	r1, [r7, #12]
   1e76e:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1e770:	fb01 f303 	mul.w	r3, r1, r3
   1e774:	441a      	add	r2, r3
   1e776:	68fb      	ldr	r3, [r7, #12]
   1e778:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1e77a:	68fb      	ldr	r3, [r7, #12]
   1e77c:	22ff      	movs	r2, #255	; 0xff
   1e77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   1e782:	68fb      	ldr	r3, [r7, #12]
   1e784:	22ff      	movs	r2, #255	; 0xff
   1e786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   1e78a:	683b      	ldr	r3, [r7, #0]
   1e78c:	2b00      	cmp	r3, #0
   1e78e:	d114      	bne.n	1e7ba <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e790:	68fb      	ldr	r3, [r7, #12]
   1e792:	691b      	ldr	r3, [r3, #16]
   1e794:	2b00      	cmp	r3, #0
   1e796:	d01a      	beq.n	1e7ce <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e798:	68fb      	ldr	r3, [r7, #12]
   1e79a:	3310      	adds	r3, #16
   1e79c:	4618      	mov	r0, r3
   1e79e:	f001 f815 	bl	1f7cc <xTaskRemoveFromEventList>
   1e7a2:	4603      	mov	r3, r0
   1e7a4:	2b00      	cmp	r3, #0
   1e7a6:	d012      	beq.n	1e7ce <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1e7a8:	4b0c      	ldr	r3, [pc, #48]	; (1e7dc <xQueueGenericReset+0xb8>)
   1e7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e7ae:	601a      	str	r2, [r3, #0]
   1e7b0:	f3bf 8f4f 	dsb	sy
   1e7b4:	f3bf 8f6f 	isb	sy
   1e7b8:	e009      	b.n	1e7ce <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1e7ba:	68fb      	ldr	r3, [r7, #12]
   1e7bc:	3310      	adds	r3, #16
   1e7be:	4618      	mov	r0, r3
   1e7c0:	f7ff fefc 	bl	1e5bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1e7c4:	68fb      	ldr	r3, [r7, #12]
   1e7c6:	3324      	adds	r3, #36	; 0x24
   1e7c8:	4618      	mov	r0, r3
   1e7ca:	f7ff fef7 	bl	1e5bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   1e7ce:	f7fc fbf9 	bl	1afc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1e7d2:	2301      	movs	r3, #1
}
   1e7d4:	4618      	mov	r0, r3
   1e7d6:	3710      	adds	r7, #16
   1e7d8:	46bd      	mov	sp, r7
   1e7da:	bd80      	pop	{r7, pc}
   1e7dc:	e000ed04 	.word	0xe000ed04

0001e7e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1e7e0:	b580      	push	{r7, lr}
   1e7e2:	b08a      	sub	sp, #40	; 0x28
   1e7e4:	af02      	add	r7, sp, #8
   1e7e6:	60f8      	str	r0, [r7, #12]
   1e7e8:	60b9      	str	r1, [r7, #8]
   1e7ea:	4613      	mov	r3, r2
   1e7ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1e7ee:	68fb      	ldr	r3, [r7, #12]
   1e7f0:	2b00      	cmp	r3, #0
   1e7f2:	d100      	bne.n	1e7f6 <xQueueGenericCreate+0x16>
   1e7f4:	e7fe      	b.n	1e7f4 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1e7f6:	68bb      	ldr	r3, [r7, #8]
   1e7f8:	2b00      	cmp	r3, #0
   1e7fa:	d102      	bne.n	1e802 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1e7fc:	2300      	movs	r3, #0
   1e7fe:	61fb      	str	r3, [r7, #28]
   1e800:	e004      	b.n	1e80c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e802:	68fb      	ldr	r3, [r7, #12]
   1e804:	68ba      	ldr	r2, [r7, #8]
   1e806:	fb02 f303 	mul.w	r3, r2, r3
   1e80a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1e80c:	69fb      	ldr	r3, [r7, #28]
   1e80e:	3348      	adds	r3, #72	; 0x48
   1e810:	4618      	mov	r0, r3
   1e812:	f7ff fc4b 	bl	1e0ac <pvPortMalloc>
   1e816:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
   1e818:	69bb      	ldr	r3, [r7, #24]
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	d00d      	beq.n	1e83a <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   1e81e:	69bb      	ldr	r3, [r7, #24]
   1e820:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1e822:	697b      	ldr	r3, [r7, #20]
   1e824:	3348      	adds	r3, #72	; 0x48
   1e826:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1e828:	79fa      	ldrb	r2, [r7, #7]
   1e82a:	69bb      	ldr	r3, [r7, #24]
   1e82c:	9300      	str	r3, [sp, #0]
   1e82e:	4613      	mov	r3, r2
   1e830:	697a      	ldr	r2, [r7, #20]
   1e832:	68b9      	ldr	r1, [r7, #8]
   1e834:	68f8      	ldr	r0, [r7, #12]
   1e836:	f000 f805 	bl	1e844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   1e83a:	69bb      	ldr	r3, [r7, #24]
	}
   1e83c:	4618      	mov	r0, r3
   1e83e:	3720      	adds	r7, #32
   1e840:	46bd      	mov	sp, r7
   1e842:	bd80      	pop	{r7, pc}

0001e844 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1e844:	b580      	push	{r7, lr}
   1e846:	b084      	sub	sp, #16
   1e848:	af00      	add	r7, sp, #0
   1e84a:	60f8      	str	r0, [r7, #12]
   1e84c:	60b9      	str	r1, [r7, #8]
   1e84e:	607a      	str	r2, [r7, #4]
   1e850:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1e852:	68bb      	ldr	r3, [r7, #8]
   1e854:	2b00      	cmp	r3, #0
   1e856:	d103      	bne.n	1e860 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1e858:	69bb      	ldr	r3, [r7, #24]
   1e85a:	69ba      	ldr	r2, [r7, #24]
   1e85c:	601a      	str	r2, [r3, #0]
   1e85e:	e002      	b.n	1e866 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1e860:	69bb      	ldr	r3, [r7, #24]
   1e862:	687a      	ldr	r2, [r7, #4]
   1e864:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1e866:	69bb      	ldr	r3, [r7, #24]
   1e868:	68fa      	ldr	r2, [r7, #12]
   1e86a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1e86c:	69bb      	ldr	r3, [r7, #24]
   1e86e:	68ba      	ldr	r2, [r7, #8]
   1e870:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1e872:	2101      	movs	r1, #1
   1e874:	69b8      	ldr	r0, [r7, #24]
   1e876:	f7ff ff55 	bl	1e724 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1e87a:	bf00      	nop
   1e87c:	3710      	adds	r7, #16
   1e87e:	46bd      	mov	sp, r7
   1e880:	bd80      	pop	{r7, pc}
	...

0001e884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1e884:	b580      	push	{r7, lr}
   1e886:	b08a      	sub	sp, #40	; 0x28
   1e888:	af00      	add	r7, sp, #0
   1e88a:	60f8      	str	r0, [r7, #12]
   1e88c:	60b9      	str	r1, [r7, #8]
   1e88e:	607a      	str	r2, [r7, #4]
   1e890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1e892:	2300      	movs	r3, #0
   1e894:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1e896:	68fb      	ldr	r3, [r7, #12]
   1e898:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1e89a:	6a3b      	ldr	r3, [r7, #32]
   1e89c:	2b00      	cmp	r3, #0
   1e89e:	d100      	bne.n	1e8a2 <xQueueGenericSend+0x1e>
   1e8a0:	e7fe      	b.n	1e8a0 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1e8a2:	68bb      	ldr	r3, [r7, #8]
   1e8a4:	2b00      	cmp	r3, #0
   1e8a6:	d103      	bne.n	1e8b0 <xQueueGenericSend+0x2c>
   1e8a8:	6a3b      	ldr	r3, [r7, #32]
   1e8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e8ac:	2b00      	cmp	r3, #0
   1e8ae:	d101      	bne.n	1e8b4 <xQueueGenericSend+0x30>
   1e8b0:	2301      	movs	r3, #1
   1e8b2:	e000      	b.n	1e8b6 <xQueueGenericSend+0x32>
   1e8b4:	2300      	movs	r3, #0
   1e8b6:	2b00      	cmp	r3, #0
   1e8b8:	d100      	bne.n	1e8bc <xQueueGenericSend+0x38>
   1e8ba:	e7fe      	b.n	1e8ba <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1e8bc:	683b      	ldr	r3, [r7, #0]
   1e8be:	2b02      	cmp	r3, #2
   1e8c0:	d103      	bne.n	1e8ca <xQueueGenericSend+0x46>
   1e8c2:	6a3b      	ldr	r3, [r7, #32]
   1e8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e8c6:	2b01      	cmp	r3, #1
   1e8c8:	d101      	bne.n	1e8ce <xQueueGenericSend+0x4a>
   1e8ca:	2301      	movs	r3, #1
   1e8cc:	e000      	b.n	1e8d0 <xQueueGenericSend+0x4c>
   1e8ce:	2300      	movs	r3, #0
   1e8d0:	2b00      	cmp	r3, #0
   1e8d2:	d100      	bne.n	1e8d6 <xQueueGenericSend+0x52>
   1e8d4:	e7fe      	b.n	1e8d4 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1e8d6:	f001 f959 	bl	1fb8c <xTaskGetSchedulerState>
   1e8da:	4603      	mov	r3, r0
   1e8dc:	2b00      	cmp	r3, #0
   1e8de:	d102      	bne.n	1e8e6 <xQueueGenericSend+0x62>
   1e8e0:	687b      	ldr	r3, [r7, #4]
   1e8e2:	2b00      	cmp	r3, #0
   1e8e4:	d101      	bne.n	1e8ea <xQueueGenericSend+0x66>
   1e8e6:	2301      	movs	r3, #1
   1e8e8:	e000      	b.n	1e8ec <xQueueGenericSend+0x68>
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	2b00      	cmp	r3, #0
   1e8ee:	d100      	bne.n	1e8f2 <xQueueGenericSend+0x6e>
   1e8f0:	e7fe      	b.n	1e8f0 <xQueueGenericSend+0x6c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1e8f2:	f7fc fb41 	bl	1af78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1e8f6:	6a3b      	ldr	r3, [r7, #32]
   1e8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e8fa:	6a3b      	ldr	r3, [r7, #32]
   1e8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e8fe:	429a      	cmp	r2, r3
   1e900:	d302      	bcc.n	1e908 <xQueueGenericSend+0x84>
   1e902:	683b      	ldr	r3, [r7, #0]
   1e904:	2b02      	cmp	r3, #2
   1e906:	d129      	bne.n	1e95c <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1e908:	683a      	ldr	r2, [r7, #0]
   1e90a:	68b9      	ldr	r1, [r7, #8]
   1e90c:	6a38      	ldr	r0, [r7, #32]
   1e90e:	f000 f9cb 	bl	1eca8 <prvCopyDataToQueue>
   1e912:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e914:	6a3b      	ldr	r3, [r7, #32]
   1e916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e918:	2b00      	cmp	r3, #0
   1e91a:	d010      	beq.n	1e93e <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e91c:	6a3b      	ldr	r3, [r7, #32]
   1e91e:	3324      	adds	r3, #36	; 0x24
   1e920:	4618      	mov	r0, r3
   1e922:	f000 ff53 	bl	1f7cc <xTaskRemoveFromEventList>
   1e926:	4603      	mov	r3, r0
   1e928:	2b00      	cmp	r3, #0
   1e92a:	d013      	beq.n	1e954 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   1e92c:	4b3f      	ldr	r3, [pc, #252]	; (1ea2c <xQueueGenericSend+0x1a8>)
   1e92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e932:	601a      	str	r2, [r3, #0]
   1e934:	f3bf 8f4f 	dsb	sy
   1e938:	f3bf 8f6f 	isb	sy
   1e93c:	e00a      	b.n	1e954 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   1e93e:	69fb      	ldr	r3, [r7, #28]
   1e940:	2b00      	cmp	r3, #0
   1e942:	d007      	beq.n	1e954 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   1e944:	4b39      	ldr	r3, [pc, #228]	; (1ea2c <xQueueGenericSend+0x1a8>)
   1e946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e94a:	601a      	str	r2, [r3, #0]
   1e94c:	f3bf 8f4f 	dsb	sy
   1e950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1e954:	f7fc fb36 	bl	1afc4 <vPortExitCritical>
				return pdPASS;
   1e958:	2301      	movs	r3, #1
   1e95a:	e063      	b.n	1ea24 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1e95c:	687b      	ldr	r3, [r7, #4]
   1e95e:	2b00      	cmp	r3, #0
   1e960:	d103      	bne.n	1e96a <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1e962:	f7fc fb2f 	bl	1afc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1e966:	2300      	movs	r3, #0
   1e968:	e05c      	b.n	1ea24 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e96c:	2b00      	cmp	r3, #0
   1e96e:	d106      	bne.n	1e97e <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1e970:	f107 0314 	add.w	r3, r7, #20
   1e974:	4618      	mov	r0, r3
   1e976:	f000 ffd3 	bl	1f920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1e97a:	2301      	movs	r3, #1
   1e97c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1e97e:	f7fc fb21 	bl	1afc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1e982:	f000 fc9f 	bl	1f2c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1e986:	f7fc faf7 	bl	1af78 <vPortEnterCritical>
   1e98a:	6a3b      	ldr	r3, [r7, #32]
   1e98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1e990:	b25b      	sxtb	r3, r3
   1e992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e996:	d103      	bne.n	1e9a0 <xQueueGenericSend+0x11c>
   1e998:	6a3b      	ldr	r3, [r7, #32]
   1e99a:	2200      	movs	r2, #0
   1e99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1e9a0:	6a3b      	ldr	r3, [r7, #32]
   1e9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1e9a6:	b25b      	sxtb	r3, r3
   1e9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e9ac:	d103      	bne.n	1e9b6 <xQueueGenericSend+0x132>
   1e9ae:	6a3b      	ldr	r3, [r7, #32]
   1e9b0:	2200      	movs	r2, #0
   1e9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1e9b6:	f7fc fb05 	bl	1afc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1e9ba:	1d3a      	adds	r2, r7, #4
   1e9bc:	f107 0314 	add.w	r3, r7, #20
   1e9c0:	4611      	mov	r1, r2
   1e9c2:	4618      	mov	r0, r3
   1e9c4:	f000 ffc2 	bl	1f94c <xTaskCheckForTimeOut>
   1e9c8:	4603      	mov	r3, r0
   1e9ca:	2b00      	cmp	r3, #0
   1e9cc:	d124      	bne.n	1ea18 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1e9ce:	6a38      	ldr	r0, [r7, #32]
   1e9d0:	f000 fa54 	bl	1ee7c <prvIsQueueFull>
   1e9d4:	4603      	mov	r3, r0
   1e9d6:	2b00      	cmp	r3, #0
   1e9d8:	d018      	beq.n	1ea0c <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1e9da:	6a3b      	ldr	r3, [r7, #32]
   1e9dc:	3310      	adds	r3, #16
   1e9de:	687a      	ldr	r2, [r7, #4]
   1e9e0:	4611      	mov	r1, r2
   1e9e2:	4618      	mov	r0, r3
   1e9e4:	f000 fe8e 	bl	1f704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1e9e8:	6a38      	ldr	r0, [r7, #32]
   1e9ea:	f000 f9df 	bl	1edac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1e9ee:	f000 fcaf 	bl	1f350 <xTaskResumeAll>
   1e9f2:	4603      	mov	r3, r0
   1e9f4:	2b00      	cmp	r3, #0
   1e9f6:	f47f af7c 	bne.w	1e8f2 <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
   1e9fa:	4b0c      	ldr	r3, [pc, #48]	; (1ea2c <xQueueGenericSend+0x1a8>)
   1e9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ea00:	601a      	str	r2, [r3, #0]
   1ea02:	f3bf 8f4f 	dsb	sy
   1ea06:	f3bf 8f6f 	isb	sy
   1ea0a:	e772      	b.n	1e8f2 <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1ea0c:	6a38      	ldr	r0, [r7, #32]
   1ea0e:	f000 f9cd 	bl	1edac <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1ea12:	f000 fc9d 	bl	1f350 <xTaskResumeAll>
   1ea16:	e76c      	b.n	1e8f2 <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1ea18:	6a38      	ldr	r0, [r7, #32]
   1ea1a:	f000 f9c7 	bl	1edac <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1ea1e:	f000 fc97 	bl	1f350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1ea22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   1ea24:	4618      	mov	r0, r3
   1ea26:	3728      	adds	r7, #40	; 0x28
   1ea28:	46bd      	mov	sp, r7
   1ea2a:	bd80      	pop	{r7, pc}
   1ea2c:	e000ed04 	.word	0xe000ed04

0001ea30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1ea30:	b580      	push	{r7, lr}
   1ea32:	b08c      	sub	sp, #48	; 0x30
   1ea34:	af00      	add	r7, sp, #0
   1ea36:	60f8      	str	r0, [r7, #12]
   1ea38:	60b9      	str	r1, [r7, #8]
   1ea3a:	607a      	str	r2, [r7, #4]
   1ea3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   1ea3e:	68fb      	ldr	r3, [r7, #12]
   1ea40:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
   1ea42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea44:	2b00      	cmp	r3, #0
   1ea46:	d100      	bne.n	1ea4a <xQueueGenericSendFromISR+0x1a>
   1ea48:	e7fe      	b.n	1ea48 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ea4a:	68bb      	ldr	r3, [r7, #8]
   1ea4c:	2b00      	cmp	r3, #0
   1ea4e:	d103      	bne.n	1ea58 <xQueueGenericSendFromISR+0x28>
   1ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ea54:	2b00      	cmp	r3, #0
   1ea56:	d101      	bne.n	1ea5c <xQueueGenericSendFromISR+0x2c>
   1ea58:	2301      	movs	r3, #1
   1ea5a:	e000      	b.n	1ea5e <xQueueGenericSendFromISR+0x2e>
   1ea5c:	2300      	movs	r3, #0
   1ea5e:	2b00      	cmp	r3, #0
   1ea60:	d100      	bne.n	1ea64 <xQueueGenericSendFromISR+0x34>
   1ea62:	e7fe      	b.n	1ea62 <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ea64:	683b      	ldr	r3, [r7, #0]
   1ea66:	2b02      	cmp	r3, #2
   1ea68:	d103      	bne.n	1ea72 <xQueueGenericSendFromISR+0x42>
   1ea6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ea6e:	2b01      	cmp	r3, #1
   1ea70:	d101      	bne.n	1ea76 <xQueueGenericSendFromISR+0x46>
   1ea72:	2301      	movs	r3, #1
   1ea74:	e000      	b.n	1ea78 <xQueueGenericSendFromISR+0x48>
   1ea76:	2300      	movs	r3, #0
   1ea78:	2b00      	cmp	r3, #0
   1ea7a:	d100      	bne.n	1ea7e <xQueueGenericSendFromISR+0x4e>
   1ea7c:	e7fe      	b.n	1ea7c <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1ea7e:	f7fc fb1d 	bl	1b0bc <vPortValidateInterruptPriority>
	__asm volatile
   1ea82:	f3ef 8211 	mrs	r2, BASEPRI
   1ea86:	f04f 0380 	mov.w	r3, #128	; 0x80
   1ea8a:	f383 8811 	msr	BASEPRI, r3
   1ea8e:	f3bf 8f6f 	isb	sy
   1ea92:	f3bf 8f4f 	dsb	sy
   1ea96:	61fa      	str	r2, [r7, #28]
   1ea98:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
   1ea9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ea9c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eaa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1eaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eaa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1eaa6:	429a      	cmp	r2, r3
   1eaa8:	d302      	bcc.n	1eab0 <xQueueGenericSendFromISR+0x80>
   1eaaa:	683b      	ldr	r3, [r7, #0]
   1eaac:	2b02      	cmp	r3, #2
   1eaae:	d12c      	bne.n	1eb0a <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1eab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1eab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1eaba:	683a      	ldr	r2, [r7, #0]
   1eabc:	68b9      	ldr	r1, [r7, #8]
   1eabe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1eac0:	f000 f8f2 	bl	1eca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1eac4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
   1eac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1eacc:	d112      	bne.n	1eaf4 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1eace:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ead0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ead2:	2b00      	cmp	r3, #0
   1ead4:	d016      	beq.n	1eb04 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ead8:	3324      	adds	r3, #36	; 0x24
   1eada:	4618      	mov	r0, r3
   1eadc:	f000 fe76 	bl	1f7cc <xTaskRemoveFromEventList>
   1eae0:	4603      	mov	r3, r0
   1eae2:	2b00      	cmp	r3, #0
   1eae4:	d00e      	beq.n	1eb04 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1eae6:	687b      	ldr	r3, [r7, #4]
   1eae8:	2b00      	cmp	r3, #0
   1eaea:	d00b      	beq.n	1eb04 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1eaec:	687b      	ldr	r3, [r7, #4]
   1eaee:	2201      	movs	r2, #1
   1eaf0:	601a      	str	r2, [r3, #0]
   1eaf2:	e007      	b.n	1eb04 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1eaf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1eaf8:	3301      	adds	r3, #1
   1eafa:	b2db      	uxtb	r3, r3
   1eafc:	b25a      	sxtb	r2, r3
   1eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   1eb04:	2301      	movs	r3, #1
   1eb06:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
   1eb08:	e001      	b.n	1eb0e <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1eb0a:	2300      	movs	r3, #0
   1eb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1eb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb10:	617b      	str	r3, [r7, #20]
	__asm volatile
   1eb12:	697b      	ldr	r3, [r7, #20]
   1eb14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1eb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1eb1a:	4618      	mov	r0, r3
   1eb1c:	3730      	adds	r7, #48	; 0x30
   1eb1e:	46bd      	mov	sp, r7
   1eb20:	bd80      	pop	{r7, pc}
	...

0001eb24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1eb24:	b580      	push	{r7, lr}
   1eb26:	b08a      	sub	sp, #40	; 0x28
   1eb28:	af00      	add	r7, sp, #0
   1eb2a:	60f8      	str	r0, [r7, #12]
   1eb2c:	60b9      	str	r1, [r7, #8]
   1eb2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1eb30:	2300      	movs	r3, #0
   1eb32:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1eb34:	68fb      	ldr	r3, [r7, #12]
   1eb36:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1eb38:	6a3b      	ldr	r3, [r7, #32]
   1eb3a:	2b00      	cmp	r3, #0
   1eb3c:	d100      	bne.n	1eb40 <xQueueReceive+0x1c>
   1eb3e:	e7fe      	b.n	1eb3e <xQueueReceive+0x1a>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1eb40:	68bb      	ldr	r3, [r7, #8]
   1eb42:	2b00      	cmp	r3, #0
   1eb44:	d103      	bne.n	1eb4e <xQueueReceive+0x2a>
   1eb46:	6a3b      	ldr	r3, [r7, #32]
   1eb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1eb4a:	2b00      	cmp	r3, #0
   1eb4c:	d101      	bne.n	1eb52 <xQueueReceive+0x2e>
   1eb4e:	2301      	movs	r3, #1
   1eb50:	e000      	b.n	1eb54 <xQueueReceive+0x30>
   1eb52:	2300      	movs	r3, #0
   1eb54:	2b00      	cmp	r3, #0
   1eb56:	d100      	bne.n	1eb5a <xQueueReceive+0x36>
   1eb58:	e7fe      	b.n	1eb58 <xQueueReceive+0x34>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1eb5a:	f001 f817 	bl	1fb8c <xTaskGetSchedulerState>
   1eb5e:	4603      	mov	r3, r0
   1eb60:	2b00      	cmp	r3, #0
   1eb62:	d102      	bne.n	1eb6a <xQueueReceive+0x46>
   1eb64:	687b      	ldr	r3, [r7, #4]
   1eb66:	2b00      	cmp	r3, #0
   1eb68:	d101      	bne.n	1eb6e <xQueueReceive+0x4a>
   1eb6a:	2301      	movs	r3, #1
   1eb6c:	e000      	b.n	1eb70 <xQueueReceive+0x4c>
   1eb6e:	2300      	movs	r3, #0
   1eb70:	2b00      	cmp	r3, #0
   1eb72:	d100      	bne.n	1eb76 <xQueueReceive+0x52>
   1eb74:	e7fe      	b.n	1eb74 <xQueueReceive+0x50>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1eb76:	f7fc f9ff 	bl	1af78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1eb7a:	6a3b      	ldr	r3, [r7, #32]
   1eb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1eb7e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1eb80:	69fb      	ldr	r3, [r7, #28]
   1eb82:	2b00      	cmp	r3, #0
   1eb84:	d01f      	beq.n	1ebc6 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1eb86:	68b9      	ldr	r1, [r7, #8]
   1eb88:	6a38      	ldr	r0, [r7, #32]
   1eb8a:	f000 f8e9 	bl	1ed60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1eb8e:	69fb      	ldr	r3, [r7, #28]
   1eb90:	1e5a      	subs	r2, r3, #1
   1eb92:	6a3b      	ldr	r3, [r7, #32]
   1eb94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1eb96:	6a3b      	ldr	r3, [r7, #32]
   1eb98:	691b      	ldr	r3, [r3, #16]
   1eb9a:	2b00      	cmp	r3, #0
   1eb9c:	d00f      	beq.n	1ebbe <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1eb9e:	6a3b      	ldr	r3, [r7, #32]
   1eba0:	3310      	adds	r3, #16
   1eba2:	4618      	mov	r0, r3
   1eba4:	f000 fe12 	bl	1f7cc <xTaskRemoveFromEventList>
   1eba8:	4603      	mov	r3, r0
   1ebaa:	2b00      	cmp	r3, #0
   1ebac:	d007      	beq.n	1ebbe <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1ebae:	4b3d      	ldr	r3, [pc, #244]	; (1eca4 <xQueueReceive+0x180>)
   1ebb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ebb4:	601a      	str	r2, [r3, #0]
   1ebb6:	f3bf 8f4f 	dsb	sy
   1ebba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1ebbe:	f7fc fa01 	bl	1afc4 <vPortExitCritical>
				return pdPASS;
   1ebc2:	2301      	movs	r3, #1
   1ebc4:	e069      	b.n	1ec9a <xQueueReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ebc6:	687b      	ldr	r3, [r7, #4]
   1ebc8:	2b00      	cmp	r3, #0
   1ebca:	d103      	bne.n	1ebd4 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ebcc:	f7fc f9fa 	bl	1afc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1ebd0:	2300      	movs	r3, #0
   1ebd2:	e062      	b.n	1ec9a <xQueueReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebd6:	2b00      	cmp	r3, #0
   1ebd8:	d106      	bne.n	1ebe8 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ebda:	f107 0314 	add.w	r3, r7, #20
   1ebde:	4618      	mov	r0, r3
   1ebe0:	f000 fe9e 	bl	1f920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1ebe4:	2301      	movs	r3, #1
   1ebe6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ebe8:	f7fc f9ec 	bl	1afc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ebec:	f000 fb6a 	bl	1f2c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1ebf0:	f7fc f9c2 	bl	1af78 <vPortEnterCritical>
   1ebf4:	6a3b      	ldr	r3, [r7, #32]
   1ebf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1ebfa:	b25b      	sxtb	r3, r3
   1ebfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ec00:	d103      	bne.n	1ec0a <xQueueReceive+0xe6>
   1ec02:	6a3b      	ldr	r3, [r7, #32]
   1ec04:	2200      	movs	r2, #0
   1ec06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1ec0a:	6a3b      	ldr	r3, [r7, #32]
   1ec0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1ec10:	b25b      	sxtb	r3, r3
   1ec12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ec16:	d103      	bne.n	1ec20 <xQueueReceive+0xfc>
   1ec18:	6a3b      	ldr	r3, [r7, #32]
   1ec1a:	2200      	movs	r2, #0
   1ec1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1ec20:	f7fc f9d0 	bl	1afc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ec24:	1d3a      	adds	r2, r7, #4
   1ec26:	f107 0314 	add.w	r3, r7, #20
   1ec2a:	4611      	mov	r1, r2
   1ec2c:	4618      	mov	r0, r3
   1ec2e:	f000 fe8d 	bl	1f94c <xTaskCheckForTimeOut>
   1ec32:	4603      	mov	r3, r0
   1ec34:	2b00      	cmp	r3, #0
   1ec36:	d123      	bne.n	1ec80 <xQueueReceive+0x15c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ec38:	6a38      	ldr	r0, [r7, #32]
   1ec3a:	f000 f909 	bl	1ee50 <prvIsQueueEmpty>
   1ec3e:	4603      	mov	r3, r0
   1ec40:	2b00      	cmp	r3, #0
   1ec42:	d017      	beq.n	1ec74 <xQueueReceive+0x150>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1ec44:	6a3b      	ldr	r3, [r7, #32]
   1ec46:	3324      	adds	r3, #36	; 0x24
   1ec48:	687a      	ldr	r2, [r7, #4]
   1ec4a:	4611      	mov	r1, r2
   1ec4c:	4618      	mov	r0, r3
   1ec4e:	f000 fd59 	bl	1f704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   1ec52:	6a38      	ldr	r0, [r7, #32]
   1ec54:	f000 f8aa 	bl	1edac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1ec58:	f000 fb7a 	bl	1f350 <xTaskResumeAll>
   1ec5c:	4603      	mov	r3, r0
   1ec5e:	2b00      	cmp	r3, #0
   1ec60:	d189      	bne.n	1eb76 <xQueueReceive+0x52>
				{
					portYIELD_WITHIN_API();
   1ec62:	4b10      	ldr	r3, [pc, #64]	; (1eca4 <xQueueReceive+0x180>)
   1ec64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ec68:	601a      	str	r2, [r3, #0]
   1ec6a:	f3bf 8f4f 	dsb	sy
   1ec6e:	f3bf 8f6f 	isb	sy
   1ec72:	e780      	b.n	1eb76 <xQueueReceive+0x52>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1ec74:	6a38      	ldr	r0, [r7, #32]
   1ec76:	f000 f899 	bl	1edac <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1ec7a:	f000 fb69 	bl	1f350 <xTaskResumeAll>
   1ec7e:	e77a      	b.n	1eb76 <xQueueReceive+0x52>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1ec80:	6a38      	ldr	r0, [r7, #32]
   1ec82:	f000 f893 	bl	1edac <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1ec86:	f000 fb63 	bl	1f350 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ec8a:	6a38      	ldr	r0, [r7, #32]
   1ec8c:	f000 f8e0 	bl	1ee50 <prvIsQueueEmpty>
   1ec90:	4603      	mov	r3, r0
   1ec92:	2b00      	cmp	r3, #0
   1ec94:	f43f af6f 	beq.w	1eb76 <xQueueReceive+0x52>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1ec98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   1ec9a:	4618      	mov	r0, r3
   1ec9c:	3728      	adds	r7, #40	; 0x28
   1ec9e:	46bd      	mov	sp, r7
   1eca0:	bd80      	pop	{r7, pc}
   1eca2:	bf00      	nop
   1eca4:	e000ed04 	.word	0xe000ed04

0001eca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1eca8:	b580      	push	{r7, lr}
   1ecaa:	b086      	sub	sp, #24
   1ecac:	af00      	add	r7, sp, #0
   1ecae:	60f8      	str	r0, [r7, #12]
   1ecb0:	60b9      	str	r1, [r7, #8]
   1ecb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1ecb4:	2300      	movs	r3, #0
   1ecb6:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ecb8:	68fb      	ldr	r3, [r7, #12]
   1ecba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ecbc:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1ecbe:	68fb      	ldr	r3, [r7, #12]
   1ecc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ecc2:	2b00      	cmp	r3, #0
   1ecc4:	d043      	beq.n	1ed4e <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1ecc6:	687b      	ldr	r3, [r7, #4]
   1ecc8:	2b00      	cmp	r3, #0
   1ecca:	d119      	bne.n	1ed00 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1eccc:	68fb      	ldr	r3, [r7, #12]
   1ecce:	6858      	ldr	r0, [r3, #4]
   1ecd0:	68fb      	ldr	r3, [r7, #12]
   1ecd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ecd4:	461a      	mov	r2, r3
   1ecd6:	68b9      	ldr	r1, [r7, #8]
   1ecd8:	f7ed fa42 	bl	c160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ecdc:	68fb      	ldr	r3, [r7, #12]
   1ecde:	685a      	ldr	r2, [r3, #4]
   1ece0:	68fb      	ldr	r3, [r7, #12]
   1ece2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ece4:	441a      	add	r2, r3
   1ece6:	68fb      	ldr	r3, [r7, #12]
   1ece8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ecea:	68fb      	ldr	r3, [r7, #12]
   1ecec:	685a      	ldr	r2, [r3, #4]
   1ecee:	68fb      	ldr	r3, [r7, #12]
   1ecf0:	689b      	ldr	r3, [r3, #8]
   1ecf2:	429a      	cmp	r2, r3
   1ecf4:	d32b      	bcc.n	1ed4e <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ecf6:	68fb      	ldr	r3, [r7, #12]
   1ecf8:	681a      	ldr	r2, [r3, #0]
   1ecfa:	68fb      	ldr	r3, [r7, #12]
   1ecfc:	605a      	str	r2, [r3, #4]
   1ecfe:	e026      	b.n	1ed4e <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1ed00:	68fb      	ldr	r3, [r7, #12]
   1ed02:	68d8      	ldr	r0, [r3, #12]
   1ed04:	68fb      	ldr	r3, [r7, #12]
   1ed06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed08:	461a      	mov	r2, r3
   1ed0a:	68b9      	ldr	r1, [r7, #8]
   1ed0c:	f7ed fa28 	bl	c160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1ed10:	68fb      	ldr	r3, [r7, #12]
   1ed12:	68da      	ldr	r2, [r3, #12]
   1ed14:	68fb      	ldr	r3, [r7, #12]
   1ed16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed18:	425b      	negs	r3, r3
   1ed1a:	441a      	add	r2, r3
   1ed1c:	68fb      	ldr	r3, [r7, #12]
   1ed1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ed20:	68fb      	ldr	r3, [r7, #12]
   1ed22:	68da      	ldr	r2, [r3, #12]
   1ed24:	68fb      	ldr	r3, [r7, #12]
   1ed26:	681b      	ldr	r3, [r3, #0]
   1ed28:	429a      	cmp	r2, r3
   1ed2a:	d207      	bcs.n	1ed3c <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1ed2c:	68fb      	ldr	r3, [r7, #12]
   1ed2e:	689a      	ldr	r2, [r3, #8]
   1ed30:	68fb      	ldr	r3, [r7, #12]
   1ed32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed34:	425b      	negs	r3, r3
   1ed36:	441a      	add	r2, r3
   1ed38:	68fb      	ldr	r3, [r7, #12]
   1ed3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1ed3c:	687b      	ldr	r3, [r7, #4]
   1ed3e:	2b02      	cmp	r3, #2
   1ed40:	d105      	bne.n	1ed4e <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ed42:	697b      	ldr	r3, [r7, #20]
   1ed44:	2b00      	cmp	r3, #0
   1ed46:	d002      	beq.n	1ed4e <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1ed48:	697b      	ldr	r3, [r7, #20]
   1ed4a:	3b01      	subs	r3, #1
   1ed4c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1ed4e:	697b      	ldr	r3, [r7, #20]
   1ed50:	1c5a      	adds	r2, r3, #1
   1ed52:	68fb      	ldr	r3, [r7, #12]
   1ed54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1ed56:	693b      	ldr	r3, [r7, #16]
}
   1ed58:	4618      	mov	r0, r3
   1ed5a:	3718      	adds	r7, #24
   1ed5c:	46bd      	mov	sp, r7
   1ed5e:	bd80      	pop	{r7, pc}

0001ed60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1ed60:	b580      	push	{r7, lr}
   1ed62:	b082      	sub	sp, #8
   1ed64:	af00      	add	r7, sp, #0
   1ed66:	6078      	str	r0, [r7, #4]
   1ed68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1ed6a:	687b      	ldr	r3, [r7, #4]
   1ed6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed6e:	2b00      	cmp	r3, #0
   1ed70:	d018      	beq.n	1eda4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ed72:	687b      	ldr	r3, [r7, #4]
   1ed74:	68da      	ldr	r2, [r3, #12]
   1ed76:	687b      	ldr	r3, [r7, #4]
   1ed78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed7a:	441a      	add	r2, r3
   1ed7c:	687b      	ldr	r3, [r7, #4]
   1ed7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1ed80:	687b      	ldr	r3, [r7, #4]
   1ed82:	68da      	ldr	r2, [r3, #12]
   1ed84:	687b      	ldr	r3, [r7, #4]
   1ed86:	689b      	ldr	r3, [r3, #8]
   1ed88:	429a      	cmp	r2, r3
   1ed8a:	d303      	bcc.n	1ed94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   1ed8c:	687b      	ldr	r3, [r7, #4]
   1ed8e:	681a      	ldr	r2, [r3, #0]
   1ed90:	687b      	ldr	r3, [r7, #4]
   1ed92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1ed94:	687b      	ldr	r3, [r7, #4]
   1ed96:	68d9      	ldr	r1, [r3, #12]
   1ed98:	687b      	ldr	r3, [r7, #4]
   1ed9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ed9c:	461a      	mov	r2, r3
   1ed9e:	6838      	ldr	r0, [r7, #0]
   1eda0:	f7ed f9de 	bl	c160 <memcpy>
	}
}
   1eda4:	bf00      	nop
   1eda6:	3708      	adds	r7, #8
   1eda8:	46bd      	mov	sp, r7
   1edaa:	bd80      	pop	{r7, pc}

0001edac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1edac:	b580      	push	{r7, lr}
   1edae:	b084      	sub	sp, #16
   1edb0:	af00      	add	r7, sp, #0
   1edb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1edb4:	f7fc f8e0 	bl	1af78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1edb8:	687b      	ldr	r3, [r7, #4]
   1edba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1edbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1edc0:	e011      	b.n	1ede6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1edc2:	687b      	ldr	r3, [r7, #4]
   1edc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1edc6:	2b00      	cmp	r3, #0
   1edc8:	d012      	beq.n	1edf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1edca:	687b      	ldr	r3, [r7, #4]
   1edcc:	3324      	adds	r3, #36	; 0x24
   1edce:	4618      	mov	r0, r3
   1edd0:	f000 fcfc 	bl	1f7cc <xTaskRemoveFromEventList>
   1edd4:	4603      	mov	r3, r0
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	d001      	beq.n	1edde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   1edda:	f000 fe05 	bl	1f9e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1edde:	7bfb      	ldrb	r3, [r7, #15]
   1ede0:	3b01      	subs	r3, #1
   1ede2:	b2db      	uxtb	r3, r3
   1ede4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ede6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1edea:	2b00      	cmp	r3, #0
   1edec:	dce9      	bgt.n	1edc2 <prvUnlockQueue+0x16>
   1edee:	e000      	b.n	1edf2 <prvUnlockQueue+0x46>
					break;
   1edf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1edf2:	687b      	ldr	r3, [r7, #4]
   1edf4:	22ff      	movs	r2, #255	; 0xff
   1edf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   1edfa:	f7fc f8e3 	bl	1afc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1edfe:	f7fc f8bb 	bl	1af78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1ee02:	687b      	ldr	r3, [r7, #4]
   1ee04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1ee08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ee0a:	e011      	b.n	1ee30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ee0c:	687b      	ldr	r3, [r7, #4]
   1ee0e:	691b      	ldr	r3, [r3, #16]
   1ee10:	2b00      	cmp	r3, #0
   1ee12:	d012      	beq.n	1ee3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ee14:	687b      	ldr	r3, [r7, #4]
   1ee16:	3310      	adds	r3, #16
   1ee18:	4618      	mov	r0, r3
   1ee1a:	f000 fcd7 	bl	1f7cc <xTaskRemoveFromEventList>
   1ee1e:	4603      	mov	r3, r0
   1ee20:	2b00      	cmp	r3, #0
   1ee22:	d001      	beq.n	1ee28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
   1ee24:	f000 fde0 	bl	1f9e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1ee28:	7bbb      	ldrb	r3, [r7, #14]
   1ee2a:	3b01      	subs	r3, #1
   1ee2c:	b2db      	uxtb	r3, r3
   1ee2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ee30:	f997 300e 	ldrsb.w	r3, [r7, #14]
   1ee34:	2b00      	cmp	r3, #0
   1ee36:	dce9      	bgt.n	1ee0c <prvUnlockQueue+0x60>
   1ee38:	e000      	b.n	1ee3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
   1ee3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1ee3c:	687b      	ldr	r3, [r7, #4]
   1ee3e:	22ff      	movs	r2, #255	; 0xff
   1ee40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   1ee44:	f7fc f8be 	bl	1afc4 <vPortExitCritical>
}
   1ee48:	bf00      	nop
   1ee4a:	3710      	adds	r7, #16
   1ee4c:	46bd      	mov	sp, r7
   1ee4e:	bd80      	pop	{r7, pc}

0001ee50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1ee50:	b580      	push	{r7, lr}
   1ee52:	b084      	sub	sp, #16
   1ee54:	af00      	add	r7, sp, #0
   1ee56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1ee58:	f7fc f88e 	bl	1af78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1ee5c:	687b      	ldr	r3, [r7, #4]
   1ee5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ee60:	2b00      	cmp	r3, #0
   1ee62:	d102      	bne.n	1ee6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1ee64:	2301      	movs	r3, #1
   1ee66:	60fb      	str	r3, [r7, #12]
   1ee68:	e001      	b.n	1ee6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1ee6a:	2300      	movs	r3, #0
   1ee6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ee6e:	f7fc f8a9 	bl	1afc4 <vPortExitCritical>

	return xReturn;
   1ee72:	68fb      	ldr	r3, [r7, #12]
}
   1ee74:	4618      	mov	r0, r3
   1ee76:	3710      	adds	r7, #16
   1ee78:	46bd      	mov	sp, r7
   1ee7a:	bd80      	pop	{r7, pc}

0001ee7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1ee7c:	b580      	push	{r7, lr}
   1ee7e:	b084      	sub	sp, #16
   1ee80:	af00      	add	r7, sp, #0
   1ee82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1ee84:	f7fc f878 	bl	1af78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1ee88:	687b      	ldr	r3, [r7, #4]
   1ee8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ee8c:	687b      	ldr	r3, [r7, #4]
   1ee8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ee90:	429a      	cmp	r2, r3
   1ee92:	d102      	bne.n	1ee9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1ee94:	2301      	movs	r3, #1
   1ee96:	60fb      	str	r3, [r7, #12]
   1ee98:	e001      	b.n	1ee9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1ee9a:	2300      	movs	r3, #0
   1ee9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ee9e:	f7fc f891 	bl	1afc4 <vPortExitCritical>

	return xReturn;
   1eea2:	68fb      	ldr	r3, [r7, #12]
}
   1eea4:	4618      	mov	r0, r3
   1eea6:	3710      	adds	r7, #16
   1eea8:	46bd      	mov	sp, r7
   1eeaa:	bd80      	pop	{r7, pc}

0001eeac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1eeac:	b580      	push	{r7, lr}
   1eeae:	b086      	sub	sp, #24
   1eeb0:	af00      	add	r7, sp, #0
   1eeb2:	60f8      	str	r0, [r7, #12]
   1eeb4:	60b9      	str	r1, [r7, #8]
   1eeb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
   1eeb8:	68fb      	ldr	r3, [r7, #12]
   1eeba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1eebc:	f7fc f85c 	bl	1af78 <vPortEnterCritical>
   1eec0:	697b      	ldr	r3, [r7, #20]
   1eec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1eec6:	b25b      	sxtb	r3, r3
   1eec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1eecc:	d103      	bne.n	1eed6 <vQueueWaitForMessageRestricted+0x2a>
   1eece:	697b      	ldr	r3, [r7, #20]
   1eed0:	2200      	movs	r2, #0
   1eed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1eed6:	697b      	ldr	r3, [r7, #20]
   1eed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1eedc:	b25b      	sxtb	r3, r3
   1eede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1eee2:	d103      	bne.n	1eeec <vQueueWaitForMessageRestricted+0x40>
   1eee4:	697b      	ldr	r3, [r7, #20]
   1eee6:	2200      	movs	r2, #0
   1eee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1eeec:	f7fc f86a 	bl	1afc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1eef0:	697b      	ldr	r3, [r7, #20]
   1eef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1eef4:	2b00      	cmp	r3, #0
   1eef6:	d106      	bne.n	1ef06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1eef8:	697b      	ldr	r3, [r7, #20]
   1eefa:	3324      	adds	r3, #36	; 0x24
   1eefc:	687a      	ldr	r2, [r7, #4]
   1eefe:	68b9      	ldr	r1, [r7, #8]
   1ef00:	4618      	mov	r0, r3
   1ef02:	f000 fc41 	bl	1f788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ef06:	6978      	ldr	r0, [r7, #20]
   1ef08:	f7ff ff50 	bl	1edac <prvUnlockQueue>
	}
   1ef0c:	bf00      	nop
   1ef0e:	3718      	adds	r7, #24
   1ef10:	46bd      	mov	sp, r7
   1ef12:	bd80      	pop	{r7, pc}

0001ef14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1ef14:	b580      	push	{r7, lr}
   1ef16:	b08c      	sub	sp, #48	; 0x30
   1ef18:	af04      	add	r7, sp, #16
   1ef1a:	60f8      	str	r0, [r7, #12]
   1ef1c:	60b9      	str	r1, [r7, #8]
   1ef1e:	603b      	str	r3, [r7, #0]
   1ef20:	4613      	mov	r3, r2
   1ef22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1ef24:	88fb      	ldrh	r3, [r7, #6]
   1ef26:	009b      	lsls	r3, r3, #2
   1ef28:	4618      	mov	r0, r3
   1ef2a:	f7ff f8bf 	bl	1e0ac <pvPortMalloc>
   1ef2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
   1ef30:	697b      	ldr	r3, [r7, #20]
   1ef32:	2b00      	cmp	r3, #0
   1ef34:	d00e      	beq.n	1ef54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1ef36:	204c      	movs	r0, #76	; 0x4c
   1ef38:	f7ff f8b8 	bl	1e0ac <pvPortMalloc>
   1ef3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
   1ef3e:	69fb      	ldr	r3, [r7, #28]
   1ef40:	2b00      	cmp	r3, #0
   1ef42:	d003      	beq.n	1ef4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1ef44:	69fb      	ldr	r3, [r7, #28]
   1ef46:	697a      	ldr	r2, [r7, #20]
   1ef48:	631a      	str	r2, [r3, #48]	; 0x30
   1ef4a:	e005      	b.n	1ef58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1ef4c:	6978      	ldr	r0, [r7, #20]
   1ef4e:	f7ff f93f 	bl	1e1d0 <vPortFree>
   1ef52:	e001      	b.n	1ef58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1ef54:	2300      	movs	r3, #0
   1ef56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1ef58:	69fb      	ldr	r3, [r7, #28]
   1ef5a:	2b00      	cmp	r3, #0
   1ef5c:	d013      	beq.n	1ef86 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1ef5e:	88fa      	ldrh	r2, [r7, #6]
   1ef60:	2300      	movs	r3, #0
   1ef62:	9303      	str	r3, [sp, #12]
   1ef64:	69fb      	ldr	r3, [r7, #28]
   1ef66:	9302      	str	r3, [sp, #8]
   1ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ef6a:	9301      	str	r3, [sp, #4]
   1ef6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef6e:	9300      	str	r3, [sp, #0]
   1ef70:	683b      	ldr	r3, [r7, #0]
   1ef72:	68b9      	ldr	r1, [r7, #8]
   1ef74:	68f8      	ldr	r0, [r7, #12]
   1ef76:	f000 f80e 	bl	1ef96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   1ef7a:	69f8      	ldr	r0, [r7, #28]
   1ef7c:	f000 f886 	bl	1f08c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   1ef80:	2301      	movs	r3, #1
   1ef82:	61bb      	str	r3, [r7, #24]
   1ef84:	e002      	b.n	1ef8c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ef86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1ef8c:	69bb      	ldr	r3, [r7, #24]
	}
   1ef8e:	4618      	mov	r0, r3
   1ef90:	3720      	adds	r7, #32
   1ef92:	46bd      	mov	sp, r7
   1ef94:	bd80      	pop	{r7, pc}

0001ef96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1ef96:	b580      	push	{r7, lr}
   1ef98:	b086      	sub	sp, #24
   1ef9a:	af00      	add	r7, sp, #0
   1ef9c:	60f8      	str	r0, [r7, #12]
   1ef9e:	60b9      	str	r1, [r7, #8]
   1efa0:	607a      	str	r2, [r7, #4]
   1efa2:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   1efa4:	68bb      	ldr	r3, [r7, #8]
   1efa6:	2b00      	cmp	r3, #0
   1efa8:	d100      	bne.n	1efac <prvInitialiseNewTask+0x16>
   1efaa:	e7fe      	b.n	1efaa <prvInitialiseNewTask+0x14>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1efac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1efae:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1efb0:	687b      	ldr	r3, [r7, #4]
   1efb2:	009b      	lsls	r3, r3, #2
   1efb4:	461a      	mov	r2, r3
   1efb6:	21a5      	movs	r1, #165	; 0xa5
   1efb8:	f7ed f9d0 	bl	c35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1efbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1efbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1efc0:	687b      	ldr	r3, [r7, #4]
   1efc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1efc6:	3b01      	subs	r3, #1
   1efc8:	009b      	lsls	r3, r3, #2
   1efca:	4413      	add	r3, r2
   1efcc:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   1efce:	693b      	ldr	r3, [r7, #16]
   1efd0:	f023 0307 	bic.w	r3, r3, #7
   1efd4:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1efd6:	693b      	ldr	r3, [r7, #16]
   1efd8:	f003 0307 	and.w	r3, r3, #7
   1efdc:	2b00      	cmp	r3, #0
   1efde:	d000      	beq.n	1efe2 <prvInitialiseNewTask+0x4c>
   1efe0:	e7fe      	b.n	1efe0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1efe2:	2300      	movs	r3, #0
   1efe4:	617b      	str	r3, [r7, #20]
   1efe6:	e012      	b.n	1f00e <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1efe8:	68ba      	ldr	r2, [r7, #8]
   1efea:	697b      	ldr	r3, [r7, #20]
   1efec:	4413      	add	r3, r2
   1efee:	7819      	ldrb	r1, [r3, #0]
   1eff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1eff2:	697b      	ldr	r3, [r7, #20]
   1eff4:	4413      	add	r3, r2
   1eff6:	3334      	adds	r3, #52	; 0x34
   1eff8:	460a      	mov	r2, r1
   1effa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   1effc:	68ba      	ldr	r2, [r7, #8]
   1effe:	697b      	ldr	r3, [r7, #20]
   1f000:	4413      	add	r3, r2
   1f002:	781b      	ldrb	r3, [r3, #0]
   1f004:	2b00      	cmp	r3, #0
   1f006:	d006      	beq.n	1f016 <prvInitialiseNewTask+0x80>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1f008:	697b      	ldr	r3, [r7, #20]
   1f00a:	3301      	adds	r3, #1
   1f00c:	617b      	str	r3, [r7, #20]
   1f00e:	697b      	ldr	r3, [r7, #20]
   1f010:	2b0f      	cmp	r3, #15
   1f012:	d9e9      	bls.n	1efe8 <prvInitialiseNewTask+0x52>
   1f014:	e000      	b.n	1f018 <prvInitialiseNewTask+0x82>
		{
			break;
   1f016:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f01a:	2200      	movs	r2, #0
   1f01c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1f020:	6a3b      	ldr	r3, [r7, #32]
   1f022:	2b03      	cmp	r3, #3
   1f024:	d901      	bls.n	1f02a <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1f026:	2303      	movs	r3, #3
   1f028:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1f02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f02c:	6a3a      	ldr	r2, [r7, #32]
   1f02e:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1f030:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f032:	3304      	adds	r3, #4
   1f034:	4618      	mov	r0, r3
   1f036:	f7ff fae1 	bl	1e5fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1f03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f03c:	3318      	adds	r3, #24
   1f03e:	4618      	mov	r0, r3
   1f040:	f7ff fadc 	bl	1e5fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1f044:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f046:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f048:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f04a:	6a3b      	ldr	r3, [r7, #32]
   1f04c:	f1c3 0204 	rsb	r2, r3, #4
   1f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f052:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f056:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f058:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f05c:	2200      	movs	r2, #0
   1f05e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1f060:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f062:	2200      	movs	r2, #0
   1f064:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1f068:	683a      	ldr	r2, [r7, #0]
   1f06a:	68f9      	ldr	r1, [r7, #12]
   1f06c:	6938      	ldr	r0, [r7, #16]
   1f06e:	f7fb fe81 	bl	1ad74 <pxPortInitialiseStack>
   1f072:	4602      	mov	r2, r0
   1f074:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f076:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   1f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f07a:	2b00      	cmp	r3, #0
   1f07c:	d002      	beq.n	1f084 <prvInitialiseNewTask+0xee>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f080:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f082:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1f084:	bf00      	nop
   1f086:	3718      	adds	r7, #24
   1f088:	46bd      	mov	sp, r7
   1f08a:	bd80      	pop	{r7, pc}

0001f08c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1f08c:	b580      	push	{r7, lr}
   1f08e:	b082      	sub	sp, #8
   1f090:	af00      	add	r7, sp, #0
   1f092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1f094:	f7fb ff70 	bl	1af78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   1f098:	4b2b      	ldr	r3, [pc, #172]	; (1f148 <prvAddNewTaskToReadyList+0xbc>)
   1f09a:	681b      	ldr	r3, [r3, #0]
   1f09c:	3301      	adds	r3, #1
   1f09e:	4a2a      	ldr	r2, [pc, #168]	; (1f148 <prvAddNewTaskToReadyList+0xbc>)
   1f0a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1f0a2:	4b2a      	ldr	r3, [pc, #168]	; (1f14c <prvAddNewTaskToReadyList+0xc0>)
   1f0a4:	681b      	ldr	r3, [r3, #0]
   1f0a6:	2b00      	cmp	r3, #0
   1f0a8:	d109      	bne.n	1f0be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1f0aa:	4a28      	ldr	r2, [pc, #160]	; (1f14c <prvAddNewTaskToReadyList+0xc0>)
   1f0ac:	687b      	ldr	r3, [r7, #4]
   1f0ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1f0b0:	4b25      	ldr	r3, [pc, #148]	; (1f148 <prvAddNewTaskToReadyList+0xbc>)
   1f0b2:	681b      	ldr	r3, [r3, #0]
   1f0b4:	2b01      	cmp	r3, #1
   1f0b6:	d110      	bne.n	1f0da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1f0b8:	f000 fd06 	bl	1fac8 <prvInitialiseTaskLists>
   1f0bc:	e00d      	b.n	1f0da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1f0be:	4b24      	ldr	r3, [pc, #144]	; (1f150 <prvAddNewTaskToReadyList+0xc4>)
   1f0c0:	681b      	ldr	r3, [r3, #0]
   1f0c2:	2b00      	cmp	r3, #0
   1f0c4:	d109      	bne.n	1f0da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1f0c6:	4b21      	ldr	r3, [pc, #132]	; (1f14c <prvAddNewTaskToReadyList+0xc0>)
   1f0c8:	681b      	ldr	r3, [r3, #0]
   1f0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0cc:	687b      	ldr	r3, [r7, #4]
   1f0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f0d0:	429a      	cmp	r2, r3
   1f0d2:	d802      	bhi.n	1f0da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1f0d4:	4a1d      	ldr	r2, [pc, #116]	; (1f14c <prvAddNewTaskToReadyList+0xc0>)
   1f0d6:	687b      	ldr	r3, [r7, #4]
   1f0d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1f0da:	4b1e      	ldr	r3, [pc, #120]	; (1f154 <prvAddNewTaskToReadyList+0xc8>)
   1f0dc:	681b      	ldr	r3, [r3, #0]
   1f0de:	3301      	adds	r3, #1
   1f0e0:	4a1c      	ldr	r2, [pc, #112]	; (1f154 <prvAddNewTaskToReadyList+0xc8>)
   1f0e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1f0e4:	687b      	ldr	r3, [r7, #4]
   1f0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0e8:	4b1b      	ldr	r3, [pc, #108]	; (1f158 <prvAddNewTaskToReadyList+0xcc>)
   1f0ea:	681b      	ldr	r3, [r3, #0]
   1f0ec:	429a      	cmp	r2, r3
   1f0ee:	d903      	bls.n	1f0f8 <prvAddNewTaskToReadyList+0x6c>
   1f0f0:	687b      	ldr	r3, [r7, #4]
   1f0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f0f4:	4a18      	ldr	r2, [pc, #96]	; (1f158 <prvAddNewTaskToReadyList+0xcc>)
   1f0f6:	6013      	str	r3, [r2, #0]
   1f0f8:	687b      	ldr	r3, [r7, #4]
   1f0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f0fc:	4613      	mov	r3, r2
   1f0fe:	009b      	lsls	r3, r3, #2
   1f100:	4413      	add	r3, r2
   1f102:	009b      	lsls	r3, r3, #2
   1f104:	4a15      	ldr	r2, [pc, #84]	; (1f15c <prvAddNewTaskToReadyList+0xd0>)
   1f106:	441a      	add	r2, r3
   1f108:	687b      	ldr	r3, [r7, #4]
   1f10a:	3304      	adds	r3, #4
   1f10c:	4619      	mov	r1, r3
   1f10e:	4610      	mov	r0, r2
   1f110:	f7ff fa81 	bl	1e616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1f114:	f7fb ff56 	bl	1afc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   1f118:	4b0d      	ldr	r3, [pc, #52]	; (1f150 <prvAddNewTaskToReadyList+0xc4>)
   1f11a:	681b      	ldr	r3, [r3, #0]
   1f11c:	2b00      	cmp	r3, #0
   1f11e:	d00e      	beq.n	1f13e <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1f120:	4b0a      	ldr	r3, [pc, #40]	; (1f14c <prvAddNewTaskToReadyList+0xc0>)
   1f122:	681b      	ldr	r3, [r3, #0]
   1f124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f126:	687b      	ldr	r3, [r7, #4]
   1f128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f12a:	429a      	cmp	r2, r3
   1f12c:	d207      	bcs.n	1f13e <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1f12e:	4b0c      	ldr	r3, [pc, #48]	; (1f160 <prvAddNewTaskToReadyList+0xd4>)
   1f130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f134:	601a      	str	r2, [r3, #0]
   1f136:	f3bf 8f4f 	dsb	sy
   1f13a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1f13e:	bf00      	nop
   1f140:	3708      	adds	r7, #8
   1f142:	46bd      	mov	sp, r7
   1f144:	bd80      	pop	{r7, pc}
   1f146:	bf00      	nop
   1f148:	1000950c 	.word	0x1000950c
   1f14c:	10009460 	.word	0x10009460
   1f150:	10009518 	.word	0x10009518
   1f154:	10009528 	.word	0x10009528
   1f158:	10009514 	.word	0x10009514
   1f15c:	10009464 	.word	0x10009464
   1f160:	e000ed04 	.word	0xe000ed04

0001f164 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1f164:	b580      	push	{r7, lr}
   1f166:	b084      	sub	sp, #16
   1f168:	af00      	add	r7, sp, #0
   1f16a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1f16c:	f7fb ff04 	bl	1af78 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1f170:	687b      	ldr	r3, [r7, #4]
   1f172:	2b00      	cmp	r3, #0
   1f174:	d102      	bne.n	1f17c <vTaskSuspend+0x18>
   1f176:	4b2b      	ldr	r3, [pc, #172]	; (1f224 <vTaskSuspend+0xc0>)
   1f178:	681b      	ldr	r3, [r3, #0]
   1f17a:	e000      	b.n	1f17e <vTaskSuspend+0x1a>
   1f17c:	687b      	ldr	r3, [r7, #4]
   1f17e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f180:	68fb      	ldr	r3, [r7, #12]
   1f182:	3304      	adds	r3, #4
   1f184:	4618      	mov	r0, r3
   1f186:	f7ff faa3 	bl	1e6d0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1f18a:	68fb      	ldr	r3, [r7, #12]
   1f18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f18e:	2b00      	cmp	r3, #0
   1f190:	d004      	beq.n	1f19c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f192:	68fb      	ldr	r3, [r7, #12]
   1f194:	3318      	adds	r3, #24
   1f196:	4618      	mov	r0, r3
   1f198:	f7ff fa9a 	bl	1e6d0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1f19c:	68fb      	ldr	r3, [r7, #12]
   1f19e:	3304      	adds	r3, #4
   1f1a0:	4619      	mov	r1, r3
   1f1a2:	4821      	ldr	r0, [pc, #132]	; (1f228 <vTaskSuspend+0xc4>)
   1f1a4:	f7ff fa37 	bl	1e616 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1f1a8:	68fb      	ldr	r3, [r7, #12]
   1f1aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   1f1ae:	b2db      	uxtb	r3, r3
   1f1b0:	2b01      	cmp	r3, #1
   1f1b2:	d103      	bne.n	1f1bc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1f1b4:	68fb      	ldr	r3, [r7, #12]
   1f1b6:	2200      	movs	r2, #0
   1f1b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1f1bc:	f7fb ff02 	bl	1afc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   1f1c0:	4b1a      	ldr	r3, [pc, #104]	; (1f22c <vTaskSuspend+0xc8>)
   1f1c2:	681b      	ldr	r3, [r3, #0]
   1f1c4:	2b00      	cmp	r3, #0
   1f1c6:	d005      	beq.n	1f1d4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1f1c8:	f7fb fed6 	bl	1af78 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   1f1cc:	f000 fcbe 	bl	1fb4c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   1f1d0:	f7fb fef8 	bl	1afc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1f1d4:	4b13      	ldr	r3, [pc, #76]	; (1f224 <vTaskSuspend+0xc0>)
   1f1d6:	681b      	ldr	r3, [r3, #0]
   1f1d8:	68fa      	ldr	r2, [r7, #12]
   1f1da:	429a      	cmp	r2, r3
   1f1dc:	d11d      	bne.n	1f21a <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
   1f1de:	4b13      	ldr	r3, [pc, #76]	; (1f22c <vTaskSuspend+0xc8>)
   1f1e0:	681b      	ldr	r3, [r3, #0]
   1f1e2:	2b00      	cmp	r3, #0
   1f1e4:	d00d      	beq.n	1f202 <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1f1e6:	4b12      	ldr	r3, [pc, #72]	; (1f230 <vTaskSuspend+0xcc>)
   1f1e8:	681b      	ldr	r3, [r3, #0]
   1f1ea:	2b00      	cmp	r3, #0
   1f1ec:	d000      	beq.n	1f1f0 <vTaskSuspend+0x8c>
   1f1ee:	e7fe      	b.n	1f1ee <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
   1f1f0:	4b10      	ldr	r3, [pc, #64]	; (1f234 <vTaskSuspend+0xd0>)
   1f1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f1f6:	601a      	str	r2, [r3, #0]
   1f1f8:	f3bf 8f4f 	dsb	sy
   1f1fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1f200:	e00b      	b.n	1f21a <vTaskSuspend+0xb6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   1f202:	4b09      	ldr	r3, [pc, #36]	; (1f228 <vTaskSuspend+0xc4>)
   1f204:	681a      	ldr	r2, [r3, #0]
   1f206:	4b0c      	ldr	r3, [pc, #48]	; (1f238 <vTaskSuspend+0xd4>)
   1f208:	681b      	ldr	r3, [r3, #0]
   1f20a:	429a      	cmp	r2, r3
   1f20c:	d103      	bne.n	1f216 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   1f20e:	4b05      	ldr	r3, [pc, #20]	; (1f224 <vTaskSuspend+0xc0>)
   1f210:	2200      	movs	r2, #0
   1f212:	601a      	str	r2, [r3, #0]
	}
   1f214:	e001      	b.n	1f21a <vTaskSuspend+0xb6>
					vTaskSwitchContext();
   1f216:	f000 f9fd 	bl	1f614 <vTaskSwitchContext>
	}
   1f21a:	bf00      	nop
   1f21c:	3710      	adds	r7, #16
   1f21e:	46bd      	mov	sp, r7
   1f220:	bd80      	pop	{r7, pc}
   1f222:	bf00      	nop
   1f224:	10009460 	.word	0x10009460
   1f228:	100094f8 	.word	0x100094f8
   1f22c:	10009518 	.word	0x10009518
   1f230:	10009534 	.word	0x10009534
   1f234:	e000ed04 	.word	0xe000ed04
   1f238:	1000950c 	.word	0x1000950c

0001f23c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1f23c:	b580      	push	{r7, lr}
   1f23e:	b084      	sub	sp, #16
   1f240:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1f242:	4b1a      	ldr	r3, [pc, #104]	; (1f2ac <vTaskStartScheduler+0x70>)
   1f244:	9301      	str	r3, [sp, #4]
   1f246:	2300      	movs	r3, #0
   1f248:	9300      	str	r3, [sp, #0]
   1f24a:	2300      	movs	r3, #0
   1f24c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f250:	4917      	ldr	r1, [pc, #92]	; (1f2b0 <vTaskStartScheduler+0x74>)
   1f252:	4818      	ldr	r0, [pc, #96]	; (1f2b4 <vTaskStartScheduler+0x78>)
   1f254:	f7ff fe5e 	bl	1ef14 <xTaskCreate>
   1f258:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1f25a:	687b      	ldr	r3, [r7, #4]
   1f25c:	2b01      	cmp	r3, #1
   1f25e:	d102      	bne.n	1f266 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
   1f260:	f000 fd1e 	bl	1fca0 <xTimerCreateTimerTask>
   1f264:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1f266:	687b      	ldr	r3, [r7, #4]
   1f268:	2b01      	cmp	r3, #1
   1f26a:	d115      	bne.n	1f298 <vTaskStartScheduler+0x5c>
	__asm volatile
   1f26c:	f04f 0380 	mov.w	r3, #128	; 0x80
   1f270:	f383 8811 	msr	BASEPRI, r3
   1f274:	f3bf 8f6f 	isb	sy
   1f278:	f3bf 8f4f 	dsb	sy
   1f27c:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1f27e:	4b0e      	ldr	r3, [pc, #56]	; (1f2b8 <vTaskStartScheduler+0x7c>)
   1f280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f284:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1f286:	4b0d      	ldr	r3, [pc, #52]	; (1f2bc <vTaskStartScheduler+0x80>)
   1f288:	2201      	movs	r2, #1
   1f28a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1f28c:	4b0c      	ldr	r3, [pc, #48]	; (1f2c0 <vTaskStartScheduler+0x84>)
   1f28e:	2200      	movs	r2, #0
   1f290:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1f292:	f7fb fded 	bl	1ae70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1f296:	e004      	b.n	1f2a2 <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1f298:	687b      	ldr	r3, [r7, #4]
   1f29a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f29e:	d100      	bne.n	1f2a2 <vTaskStartScheduler+0x66>
   1f2a0:	e7fe      	b.n	1f2a0 <vTaskStartScheduler+0x64>
}
   1f2a2:	bf00      	nop
   1f2a4:	3708      	adds	r7, #8
   1f2a6:	46bd      	mov	sp, r7
   1f2a8:	bd80      	pop	{r7, pc}
   1f2aa:	bf00      	nop
   1f2ac:	10009530 	.word	0x10009530
   1f2b0:	00024ee8 	.word	0x00024ee8
   1f2b4:	0001fa01 	.word	0x0001fa01
   1f2b8:	1000952c 	.word	0x1000952c
   1f2bc:	10009518 	.word	0x10009518
   1f2c0:	10009510 	.word	0x10009510

0001f2c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1f2c4:	b480      	push	{r7}
   1f2c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1f2c8:	4b04      	ldr	r3, [pc, #16]	; (1f2dc <vTaskSuspendAll+0x18>)
   1f2ca:	681b      	ldr	r3, [r3, #0]
   1f2cc:	3301      	adds	r3, #1
   1f2ce:	4a03      	ldr	r2, [pc, #12]	; (1f2dc <vTaskSuspendAll+0x18>)
   1f2d0:	6013      	str	r3, [r2, #0]
}
   1f2d2:	bf00      	nop
   1f2d4:	46bd      	mov	sp, r7
   1f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f2da:	4770      	bx	lr
   1f2dc:	10009534 	.word	0x10009534

0001f2e0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   1f2e0:	b480      	push	{r7}
   1f2e2:	b083      	sub	sp, #12
   1f2e4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   1f2e6:	2300      	movs	r3, #0
   1f2e8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1f2ea:	4b14      	ldr	r3, [pc, #80]	; (1f33c <prvGetExpectedIdleTime+0x5c>)
   1f2ec:	681b      	ldr	r3, [r3, #0]
   1f2ee:	2b00      	cmp	r3, #0
   1f2f0:	d001      	beq.n	1f2f6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   1f2f2:	2301      	movs	r3, #1
   1f2f4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1f2f6:	4b12      	ldr	r3, [pc, #72]	; (1f340 <prvGetExpectedIdleTime+0x60>)
   1f2f8:	681b      	ldr	r3, [r3, #0]
   1f2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f2fc:	2b00      	cmp	r3, #0
   1f2fe:	d002      	beq.n	1f306 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
   1f300:	2300      	movs	r3, #0
   1f302:	607b      	str	r3, [r7, #4]
   1f304:	e012      	b.n	1f32c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1f306:	4b0f      	ldr	r3, [pc, #60]	; (1f344 <prvGetExpectedIdleTime+0x64>)
   1f308:	681b      	ldr	r3, [r3, #0]
   1f30a:	2b01      	cmp	r3, #1
   1f30c:	d902      	bls.n	1f314 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   1f30e:	2300      	movs	r3, #0
   1f310:	607b      	str	r3, [r7, #4]
   1f312:	e00b      	b.n	1f32c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   1f314:	683b      	ldr	r3, [r7, #0]
   1f316:	2b00      	cmp	r3, #0
   1f318:	d002      	beq.n	1f320 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   1f31a:	2300      	movs	r3, #0
   1f31c:	607b      	str	r3, [r7, #4]
   1f31e:	e005      	b.n	1f32c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   1f320:	4b09      	ldr	r3, [pc, #36]	; (1f348 <prvGetExpectedIdleTime+0x68>)
   1f322:	681a      	ldr	r2, [r3, #0]
   1f324:	4b09      	ldr	r3, [pc, #36]	; (1f34c <prvGetExpectedIdleTime+0x6c>)
   1f326:	681b      	ldr	r3, [r3, #0]
   1f328:	1ad3      	subs	r3, r2, r3
   1f32a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
   1f32c:	687b      	ldr	r3, [r7, #4]
	}
   1f32e:	4618      	mov	r0, r3
   1f330:	370c      	adds	r7, #12
   1f332:	46bd      	mov	sp, r7
   1f334:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f338:	4770      	bx	lr
   1f33a:	bf00      	nop
   1f33c:	10009514 	.word	0x10009514
   1f340:	10009460 	.word	0x10009460
   1f344:	10009464 	.word	0x10009464
   1f348:	1000952c 	.word	0x1000952c
   1f34c:	10009510 	.word	0x10009510

0001f350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1f350:	b580      	push	{r7, lr}
   1f352:	b084      	sub	sp, #16
   1f354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1f356:	2300      	movs	r3, #0
   1f358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1f35a:	2300      	movs	r3, #0
   1f35c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1f35e:	4b3d      	ldr	r3, [pc, #244]	; (1f454 <xTaskResumeAll+0x104>)
   1f360:	681b      	ldr	r3, [r3, #0]
   1f362:	2b00      	cmp	r3, #0
   1f364:	d100      	bne.n	1f368 <xTaskResumeAll+0x18>
   1f366:	e7fe      	b.n	1f366 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1f368:	f7fb fe06 	bl	1af78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   1f36c:	4b39      	ldr	r3, [pc, #228]	; (1f454 <xTaskResumeAll+0x104>)
   1f36e:	681b      	ldr	r3, [r3, #0]
   1f370:	3b01      	subs	r3, #1
   1f372:	4a38      	ldr	r2, [pc, #224]	; (1f454 <xTaskResumeAll+0x104>)
   1f374:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f376:	4b37      	ldr	r3, [pc, #220]	; (1f454 <xTaskResumeAll+0x104>)
   1f378:	681b      	ldr	r3, [r3, #0]
   1f37a:	2b00      	cmp	r3, #0
   1f37c:	d162      	bne.n	1f444 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1f37e:	4b36      	ldr	r3, [pc, #216]	; (1f458 <xTaskResumeAll+0x108>)
   1f380:	681b      	ldr	r3, [r3, #0]
   1f382:	2b00      	cmp	r3, #0
   1f384:	d05e      	beq.n	1f444 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1f386:	e02f      	b.n	1f3e8 <xTaskResumeAll+0x98>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1f388:	4b34      	ldr	r3, [pc, #208]	; (1f45c <xTaskResumeAll+0x10c>)
   1f38a:	68db      	ldr	r3, [r3, #12]
   1f38c:	68db      	ldr	r3, [r3, #12]
   1f38e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f390:	68fb      	ldr	r3, [r7, #12]
   1f392:	3318      	adds	r3, #24
   1f394:	4618      	mov	r0, r3
   1f396:	f7ff f99b 	bl	1e6d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f39a:	68fb      	ldr	r3, [r7, #12]
   1f39c:	3304      	adds	r3, #4
   1f39e:	4618      	mov	r0, r3
   1f3a0:	f7ff f996 	bl	1e6d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   1f3a4:	68fb      	ldr	r3, [r7, #12]
   1f3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3a8:	4b2d      	ldr	r3, [pc, #180]	; (1f460 <xTaskResumeAll+0x110>)
   1f3aa:	681b      	ldr	r3, [r3, #0]
   1f3ac:	429a      	cmp	r2, r3
   1f3ae:	d903      	bls.n	1f3b8 <xTaskResumeAll+0x68>
   1f3b0:	68fb      	ldr	r3, [r7, #12]
   1f3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f3b4:	4a2a      	ldr	r2, [pc, #168]	; (1f460 <xTaskResumeAll+0x110>)
   1f3b6:	6013      	str	r3, [r2, #0]
   1f3b8:	68fb      	ldr	r3, [r7, #12]
   1f3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3bc:	4613      	mov	r3, r2
   1f3be:	009b      	lsls	r3, r3, #2
   1f3c0:	4413      	add	r3, r2
   1f3c2:	009b      	lsls	r3, r3, #2
   1f3c4:	4a27      	ldr	r2, [pc, #156]	; (1f464 <xTaskResumeAll+0x114>)
   1f3c6:	441a      	add	r2, r3
   1f3c8:	68fb      	ldr	r3, [r7, #12]
   1f3ca:	3304      	adds	r3, #4
   1f3cc:	4619      	mov	r1, r3
   1f3ce:	4610      	mov	r0, r2
   1f3d0:	f7ff f921 	bl	1e616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1f3d4:	68fb      	ldr	r3, [r7, #12]
   1f3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f3d8:	4b23      	ldr	r3, [pc, #140]	; (1f468 <xTaskResumeAll+0x118>)
   1f3da:	681b      	ldr	r3, [r3, #0]
   1f3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f3de:	429a      	cmp	r2, r3
   1f3e0:	d302      	bcc.n	1f3e8 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
   1f3e2:	4b22      	ldr	r3, [pc, #136]	; (1f46c <xTaskResumeAll+0x11c>)
   1f3e4:	2201      	movs	r2, #1
   1f3e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1f3e8:	4b1c      	ldr	r3, [pc, #112]	; (1f45c <xTaskResumeAll+0x10c>)
   1f3ea:	681b      	ldr	r3, [r3, #0]
   1f3ec:	2b00      	cmp	r3, #0
   1f3ee:	d1cb      	bne.n	1f388 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1f3f0:	68fb      	ldr	r3, [r7, #12]
   1f3f2:	2b00      	cmp	r3, #0
   1f3f4:	d001      	beq.n	1f3fa <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1f3f6:	f000 fba9 	bl	1fb4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1f3fa:	4b1d      	ldr	r3, [pc, #116]	; (1f470 <xTaskResumeAll+0x120>)
   1f3fc:	681b      	ldr	r3, [r3, #0]
   1f3fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1f400:	687b      	ldr	r3, [r7, #4]
   1f402:	2b00      	cmp	r3, #0
   1f404:	d010      	beq.n	1f428 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1f406:	f000 f865 	bl	1f4d4 <xTaskIncrementTick>
   1f40a:	4603      	mov	r3, r0
   1f40c:	2b00      	cmp	r3, #0
   1f40e:	d002      	beq.n	1f416 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   1f410:	4b16      	ldr	r3, [pc, #88]	; (1f46c <xTaskResumeAll+0x11c>)
   1f412:	2201      	movs	r2, #1
   1f414:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1f416:	687b      	ldr	r3, [r7, #4]
   1f418:	3b01      	subs	r3, #1
   1f41a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1f41c:	687b      	ldr	r3, [r7, #4]
   1f41e:	2b00      	cmp	r3, #0
   1f420:	d1f1      	bne.n	1f406 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
   1f422:	4b13      	ldr	r3, [pc, #76]	; (1f470 <xTaskResumeAll+0x120>)
   1f424:	2200      	movs	r2, #0
   1f426:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1f428:	4b10      	ldr	r3, [pc, #64]	; (1f46c <xTaskResumeAll+0x11c>)
   1f42a:	681b      	ldr	r3, [r3, #0]
   1f42c:	2b00      	cmp	r3, #0
   1f42e:	d009      	beq.n	1f444 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1f430:	2301      	movs	r3, #1
   1f432:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1f434:	4b0f      	ldr	r3, [pc, #60]	; (1f474 <xTaskResumeAll+0x124>)
   1f436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f43a:	601a      	str	r2, [r3, #0]
   1f43c:	f3bf 8f4f 	dsb	sy
   1f440:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1f444:	f7fb fdbe 	bl	1afc4 <vPortExitCritical>

	return xAlreadyYielded;
   1f448:	68bb      	ldr	r3, [r7, #8]
}
   1f44a:	4618      	mov	r0, r3
   1f44c:	3710      	adds	r7, #16
   1f44e:	46bd      	mov	sp, r7
   1f450:	bd80      	pop	{r7, pc}
   1f452:	bf00      	nop
   1f454:	10009534 	.word	0x10009534
   1f458:	1000950c 	.word	0x1000950c
   1f45c:	100094e4 	.word	0x100094e4
   1f460:	10009514 	.word	0x10009514
   1f464:	10009464 	.word	0x10009464
   1f468:	10009460 	.word	0x10009460
   1f46c:	10009520 	.word	0x10009520
   1f470:	1000951c 	.word	0x1000951c
   1f474:	e000ed04 	.word	0xe000ed04

0001f478 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1f478:	b480      	push	{r7}
   1f47a:	b083      	sub	sp, #12
   1f47c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1f47e:	4b05      	ldr	r3, [pc, #20]	; (1f494 <xTaskGetTickCount+0x1c>)
   1f480:	681b      	ldr	r3, [r3, #0]
   1f482:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1f484:	687b      	ldr	r3, [r7, #4]
}
   1f486:	4618      	mov	r0, r3
   1f488:	370c      	adds	r7, #12
   1f48a:	46bd      	mov	sp, r7
   1f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f490:	4770      	bx	lr
   1f492:	bf00      	nop
   1f494:	10009510 	.word	0x10009510

0001f498 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   1f498:	b480      	push	{r7}
   1f49a:	b083      	sub	sp, #12
   1f49c:	af00      	add	r7, sp, #0
   1f49e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1f4a0:	4b0a      	ldr	r3, [pc, #40]	; (1f4cc <vTaskStepTick+0x34>)
   1f4a2:	681a      	ldr	r2, [r3, #0]
   1f4a4:	687b      	ldr	r3, [r7, #4]
   1f4a6:	441a      	add	r2, r3
   1f4a8:	4b09      	ldr	r3, [pc, #36]	; (1f4d0 <vTaskStepTick+0x38>)
   1f4aa:	681b      	ldr	r3, [r3, #0]
   1f4ac:	429a      	cmp	r2, r3
   1f4ae:	d900      	bls.n	1f4b2 <vTaskStepTick+0x1a>
   1f4b0:	e7fe      	b.n	1f4b0 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
   1f4b2:	4b06      	ldr	r3, [pc, #24]	; (1f4cc <vTaskStepTick+0x34>)
   1f4b4:	681a      	ldr	r2, [r3, #0]
   1f4b6:	687b      	ldr	r3, [r7, #4]
   1f4b8:	4413      	add	r3, r2
   1f4ba:	4a04      	ldr	r2, [pc, #16]	; (1f4cc <vTaskStepTick+0x34>)
   1f4bc:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   1f4be:	bf00      	nop
   1f4c0:	370c      	adds	r7, #12
   1f4c2:	46bd      	mov	sp, r7
   1f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f4c8:	4770      	bx	lr
   1f4ca:	bf00      	nop
   1f4cc:	10009510 	.word	0x10009510
   1f4d0:	1000952c 	.word	0x1000952c

0001f4d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1f4d4:	b580      	push	{r7, lr}
   1f4d6:	b086      	sub	sp, #24
   1f4d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1f4da:	2300      	movs	r3, #0
   1f4dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f4de:	4b42      	ldr	r3, [pc, #264]	; (1f5e8 <xTaskIncrementTick+0x114>)
   1f4e0:	681b      	ldr	r3, [r3, #0]
   1f4e2:	2b00      	cmp	r3, #0
   1f4e4:	d16f      	bne.n	1f5c6 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1f4e6:	4b41      	ldr	r3, [pc, #260]	; (1f5ec <xTaskIncrementTick+0x118>)
   1f4e8:	681b      	ldr	r3, [r3, #0]
   1f4ea:	3301      	adds	r3, #1
   1f4ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1f4ee:	4a3f      	ldr	r2, [pc, #252]	; (1f5ec <xTaskIncrementTick+0x118>)
   1f4f0:	693b      	ldr	r3, [r7, #16]
   1f4f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1f4f4:	693b      	ldr	r3, [r7, #16]
   1f4f6:	2b00      	cmp	r3, #0
   1f4f8:	d116      	bne.n	1f528 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
   1f4fa:	4b3d      	ldr	r3, [pc, #244]	; (1f5f0 <xTaskIncrementTick+0x11c>)
   1f4fc:	681b      	ldr	r3, [r3, #0]
   1f4fe:	681b      	ldr	r3, [r3, #0]
   1f500:	2b00      	cmp	r3, #0
   1f502:	d000      	beq.n	1f506 <xTaskIncrementTick+0x32>
   1f504:	e7fe      	b.n	1f504 <xTaskIncrementTick+0x30>
   1f506:	4b3a      	ldr	r3, [pc, #232]	; (1f5f0 <xTaskIncrementTick+0x11c>)
   1f508:	681b      	ldr	r3, [r3, #0]
   1f50a:	60fb      	str	r3, [r7, #12]
   1f50c:	4b39      	ldr	r3, [pc, #228]	; (1f5f4 <xTaskIncrementTick+0x120>)
   1f50e:	681b      	ldr	r3, [r3, #0]
   1f510:	4a37      	ldr	r2, [pc, #220]	; (1f5f0 <xTaskIncrementTick+0x11c>)
   1f512:	6013      	str	r3, [r2, #0]
   1f514:	4a37      	ldr	r2, [pc, #220]	; (1f5f4 <xTaskIncrementTick+0x120>)
   1f516:	68fb      	ldr	r3, [r7, #12]
   1f518:	6013      	str	r3, [r2, #0]
   1f51a:	4b37      	ldr	r3, [pc, #220]	; (1f5f8 <xTaskIncrementTick+0x124>)
   1f51c:	681b      	ldr	r3, [r3, #0]
   1f51e:	3301      	adds	r3, #1
   1f520:	4a35      	ldr	r2, [pc, #212]	; (1f5f8 <xTaskIncrementTick+0x124>)
   1f522:	6013      	str	r3, [r2, #0]
   1f524:	f000 fb12 	bl	1fb4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1f528:	4b34      	ldr	r3, [pc, #208]	; (1f5fc <xTaskIncrementTick+0x128>)
   1f52a:	681b      	ldr	r3, [r3, #0]
   1f52c:	693a      	ldr	r2, [r7, #16]
   1f52e:	429a      	cmp	r2, r3
   1f530:	d34e      	bcc.n	1f5d0 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f532:	4b2f      	ldr	r3, [pc, #188]	; (1f5f0 <xTaskIncrementTick+0x11c>)
   1f534:	681b      	ldr	r3, [r3, #0]
   1f536:	681b      	ldr	r3, [r3, #0]
   1f538:	2b00      	cmp	r3, #0
   1f53a:	d104      	bne.n	1f546 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f53c:	4b2f      	ldr	r3, [pc, #188]	; (1f5fc <xTaskIncrementTick+0x128>)
   1f53e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f542:	601a      	str	r2, [r3, #0]
					break;
   1f544:	e044      	b.n	1f5d0 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1f546:	4b2a      	ldr	r3, [pc, #168]	; (1f5f0 <xTaskIncrementTick+0x11c>)
   1f548:	681b      	ldr	r3, [r3, #0]
   1f54a:	68db      	ldr	r3, [r3, #12]
   1f54c:	68db      	ldr	r3, [r3, #12]
   1f54e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1f550:	68bb      	ldr	r3, [r7, #8]
   1f552:	685b      	ldr	r3, [r3, #4]
   1f554:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1f556:	693a      	ldr	r2, [r7, #16]
   1f558:	687b      	ldr	r3, [r7, #4]
   1f55a:	429a      	cmp	r2, r3
   1f55c:	d203      	bcs.n	1f566 <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1f55e:	4a27      	ldr	r2, [pc, #156]	; (1f5fc <xTaskIncrementTick+0x128>)
   1f560:	687b      	ldr	r3, [r7, #4]
   1f562:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   1f564:	e034      	b.n	1f5d0 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f566:	68bb      	ldr	r3, [r7, #8]
   1f568:	3304      	adds	r3, #4
   1f56a:	4618      	mov	r0, r3
   1f56c:	f7ff f8b0 	bl	1e6d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1f570:	68bb      	ldr	r3, [r7, #8]
   1f572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f574:	2b00      	cmp	r3, #0
   1f576:	d004      	beq.n	1f582 <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f578:	68bb      	ldr	r3, [r7, #8]
   1f57a:	3318      	adds	r3, #24
   1f57c:	4618      	mov	r0, r3
   1f57e:	f7ff f8a7 	bl	1e6d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1f582:	68bb      	ldr	r3, [r7, #8]
   1f584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f586:	4b1e      	ldr	r3, [pc, #120]	; (1f600 <xTaskIncrementTick+0x12c>)
   1f588:	681b      	ldr	r3, [r3, #0]
   1f58a:	429a      	cmp	r2, r3
   1f58c:	d903      	bls.n	1f596 <xTaskIncrementTick+0xc2>
   1f58e:	68bb      	ldr	r3, [r7, #8]
   1f590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f592:	4a1b      	ldr	r2, [pc, #108]	; (1f600 <xTaskIncrementTick+0x12c>)
   1f594:	6013      	str	r3, [r2, #0]
   1f596:	68bb      	ldr	r3, [r7, #8]
   1f598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f59a:	4613      	mov	r3, r2
   1f59c:	009b      	lsls	r3, r3, #2
   1f59e:	4413      	add	r3, r2
   1f5a0:	009b      	lsls	r3, r3, #2
   1f5a2:	4a18      	ldr	r2, [pc, #96]	; (1f604 <xTaskIncrementTick+0x130>)
   1f5a4:	441a      	add	r2, r3
   1f5a6:	68bb      	ldr	r3, [r7, #8]
   1f5a8:	3304      	adds	r3, #4
   1f5aa:	4619      	mov	r1, r3
   1f5ac:	4610      	mov	r0, r2
   1f5ae:	f7ff f832 	bl	1e616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1f5b2:	68bb      	ldr	r3, [r7, #8]
   1f5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f5b6:	4b14      	ldr	r3, [pc, #80]	; (1f608 <xTaskIncrementTick+0x134>)
   1f5b8:	681b      	ldr	r3, [r3, #0]
   1f5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f5bc:	429a      	cmp	r2, r3
   1f5be:	d3b8      	bcc.n	1f532 <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
   1f5c0:	2301      	movs	r3, #1
   1f5c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f5c4:	e7b5      	b.n	1f532 <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1f5c6:	4b11      	ldr	r3, [pc, #68]	; (1f60c <xTaskIncrementTick+0x138>)
   1f5c8:	681b      	ldr	r3, [r3, #0]
   1f5ca:	3301      	adds	r3, #1
   1f5cc:	4a0f      	ldr	r2, [pc, #60]	; (1f60c <xTaskIncrementTick+0x138>)
   1f5ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1f5d0:	4b0f      	ldr	r3, [pc, #60]	; (1f610 <xTaskIncrementTick+0x13c>)
   1f5d2:	681b      	ldr	r3, [r3, #0]
   1f5d4:	2b00      	cmp	r3, #0
   1f5d6:	d001      	beq.n	1f5dc <xTaskIncrementTick+0x108>
		{
			xSwitchRequired = pdTRUE;
   1f5d8:	2301      	movs	r3, #1
   1f5da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1f5dc:	697b      	ldr	r3, [r7, #20]
}
   1f5de:	4618      	mov	r0, r3
   1f5e0:	3718      	adds	r7, #24
   1f5e2:	46bd      	mov	sp, r7
   1f5e4:	bd80      	pop	{r7, pc}
   1f5e6:	bf00      	nop
   1f5e8:	10009534 	.word	0x10009534
   1f5ec:	10009510 	.word	0x10009510
   1f5f0:	100094dc 	.word	0x100094dc
   1f5f4:	100094e0 	.word	0x100094e0
   1f5f8:	10009524 	.word	0x10009524
   1f5fc:	1000952c 	.word	0x1000952c
   1f600:	10009514 	.word	0x10009514
   1f604:	10009464 	.word	0x10009464
   1f608:	10009460 	.word	0x10009460
   1f60c:	1000951c 	.word	0x1000951c
   1f610:	10009520 	.word	0x10009520

0001f614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1f614:	b580      	push	{r7, lr}
   1f616:	b084      	sub	sp, #16
   1f618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1f61a:	4b35      	ldr	r3, [pc, #212]	; (1f6f0 <vTaskSwitchContext+0xdc>)
   1f61c:	681b      	ldr	r3, [r3, #0]
   1f61e:	2b00      	cmp	r3, #0
   1f620:	d003      	beq.n	1f62a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1f622:	4b34      	ldr	r3, [pc, #208]	; (1f6f4 <vTaskSwitchContext+0xe0>)
   1f624:	2201      	movs	r2, #1
   1f626:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1f628:	e05e      	b.n	1f6e8 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
   1f62a:	4b32      	ldr	r3, [pc, #200]	; (1f6f4 <vTaskSwitchContext+0xe0>)
   1f62c:	2200      	movs	r2, #0
   1f62e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1f630:	4b31      	ldr	r3, [pc, #196]	; (1f6f8 <vTaskSwitchContext+0xe4>)
   1f632:	681b      	ldr	r3, [r3, #0]
   1f634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f636:	60bb      	str	r3, [r7, #8]
   1f638:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   1f63c:	607b      	str	r3, [r7, #4]
   1f63e:	68bb      	ldr	r3, [r7, #8]
   1f640:	681a      	ldr	r2, [r3, #0]
   1f642:	687b      	ldr	r3, [r7, #4]
   1f644:	429a      	cmp	r2, r3
   1f646:	d111      	bne.n	1f66c <vTaskSwitchContext+0x58>
   1f648:	68bb      	ldr	r3, [r7, #8]
   1f64a:	3304      	adds	r3, #4
   1f64c:	681a      	ldr	r2, [r3, #0]
   1f64e:	687b      	ldr	r3, [r7, #4]
   1f650:	429a      	cmp	r2, r3
   1f652:	d10b      	bne.n	1f66c <vTaskSwitchContext+0x58>
   1f654:	68bb      	ldr	r3, [r7, #8]
   1f656:	3308      	adds	r3, #8
   1f658:	681a      	ldr	r2, [r3, #0]
   1f65a:	687b      	ldr	r3, [r7, #4]
   1f65c:	429a      	cmp	r2, r3
   1f65e:	d105      	bne.n	1f66c <vTaskSwitchContext+0x58>
   1f660:	68bb      	ldr	r3, [r7, #8]
   1f662:	330c      	adds	r3, #12
   1f664:	681a      	ldr	r2, [r3, #0]
   1f666:	687b      	ldr	r3, [r7, #4]
   1f668:	429a      	cmp	r2, r3
   1f66a:	d008      	beq.n	1f67e <vTaskSwitchContext+0x6a>
   1f66c:	4b22      	ldr	r3, [pc, #136]	; (1f6f8 <vTaskSwitchContext+0xe4>)
   1f66e:	681a      	ldr	r2, [r3, #0]
   1f670:	4b21      	ldr	r3, [pc, #132]	; (1f6f8 <vTaskSwitchContext+0xe4>)
   1f672:	681b      	ldr	r3, [r3, #0]
   1f674:	3334      	adds	r3, #52	; 0x34
   1f676:	4619      	mov	r1, r3
   1f678:	4610      	mov	r0, r2
   1f67a:	f7f3 ff5d 	bl	13538 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1f67e:	4b1f      	ldr	r3, [pc, #124]	; (1f6fc <vTaskSwitchContext+0xe8>)
   1f680:	681b      	ldr	r3, [r3, #0]
   1f682:	60fb      	str	r3, [r7, #12]
   1f684:	e006      	b.n	1f694 <vTaskSwitchContext+0x80>
   1f686:	68fb      	ldr	r3, [r7, #12]
   1f688:	2b00      	cmp	r3, #0
   1f68a:	d100      	bne.n	1f68e <vTaskSwitchContext+0x7a>
   1f68c:	e7fe      	b.n	1f68c <vTaskSwitchContext+0x78>
   1f68e:	68fb      	ldr	r3, [r7, #12]
   1f690:	3b01      	subs	r3, #1
   1f692:	60fb      	str	r3, [r7, #12]
   1f694:	491a      	ldr	r1, [pc, #104]	; (1f700 <vTaskSwitchContext+0xec>)
   1f696:	68fa      	ldr	r2, [r7, #12]
   1f698:	4613      	mov	r3, r2
   1f69a:	009b      	lsls	r3, r3, #2
   1f69c:	4413      	add	r3, r2
   1f69e:	009b      	lsls	r3, r3, #2
   1f6a0:	440b      	add	r3, r1
   1f6a2:	681b      	ldr	r3, [r3, #0]
   1f6a4:	2b00      	cmp	r3, #0
   1f6a6:	d0ee      	beq.n	1f686 <vTaskSwitchContext+0x72>
   1f6a8:	68fa      	ldr	r2, [r7, #12]
   1f6aa:	4613      	mov	r3, r2
   1f6ac:	009b      	lsls	r3, r3, #2
   1f6ae:	4413      	add	r3, r2
   1f6b0:	009b      	lsls	r3, r3, #2
   1f6b2:	4a13      	ldr	r2, [pc, #76]	; (1f700 <vTaskSwitchContext+0xec>)
   1f6b4:	4413      	add	r3, r2
   1f6b6:	603b      	str	r3, [r7, #0]
   1f6b8:	683b      	ldr	r3, [r7, #0]
   1f6ba:	685b      	ldr	r3, [r3, #4]
   1f6bc:	685a      	ldr	r2, [r3, #4]
   1f6be:	683b      	ldr	r3, [r7, #0]
   1f6c0:	605a      	str	r2, [r3, #4]
   1f6c2:	683b      	ldr	r3, [r7, #0]
   1f6c4:	685a      	ldr	r2, [r3, #4]
   1f6c6:	683b      	ldr	r3, [r7, #0]
   1f6c8:	3308      	adds	r3, #8
   1f6ca:	429a      	cmp	r2, r3
   1f6cc:	d104      	bne.n	1f6d8 <vTaskSwitchContext+0xc4>
   1f6ce:	683b      	ldr	r3, [r7, #0]
   1f6d0:	685b      	ldr	r3, [r3, #4]
   1f6d2:	685a      	ldr	r2, [r3, #4]
   1f6d4:	683b      	ldr	r3, [r7, #0]
   1f6d6:	605a      	str	r2, [r3, #4]
   1f6d8:	683b      	ldr	r3, [r7, #0]
   1f6da:	685b      	ldr	r3, [r3, #4]
   1f6dc:	68db      	ldr	r3, [r3, #12]
   1f6de:	4a06      	ldr	r2, [pc, #24]	; (1f6f8 <vTaskSwitchContext+0xe4>)
   1f6e0:	6013      	str	r3, [r2, #0]
   1f6e2:	4a06      	ldr	r2, [pc, #24]	; (1f6fc <vTaskSwitchContext+0xe8>)
   1f6e4:	68fb      	ldr	r3, [r7, #12]
   1f6e6:	6013      	str	r3, [r2, #0]
}
   1f6e8:	bf00      	nop
   1f6ea:	3710      	adds	r7, #16
   1f6ec:	46bd      	mov	sp, r7
   1f6ee:	bd80      	pop	{r7, pc}
   1f6f0:	10009534 	.word	0x10009534
   1f6f4:	10009520 	.word	0x10009520
   1f6f8:	10009460 	.word	0x10009460
   1f6fc:	10009514 	.word	0x10009514
   1f700:	10009464 	.word	0x10009464

0001f704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1f704:	b580      	push	{r7, lr}
   1f706:	b082      	sub	sp, #8
   1f708:	af00      	add	r7, sp, #0
   1f70a:	6078      	str	r0, [r7, #4]
   1f70c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1f70e:	687b      	ldr	r3, [r7, #4]
   1f710:	2b00      	cmp	r3, #0
   1f712:	d100      	bne.n	1f716 <vTaskPlaceOnEventList+0x12>
   1f714:	e7fe      	b.n	1f714 <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f716:	4b07      	ldr	r3, [pc, #28]	; (1f734 <vTaskPlaceOnEventList+0x30>)
   1f718:	681b      	ldr	r3, [r3, #0]
   1f71a:	3318      	adds	r3, #24
   1f71c:	4619      	mov	r1, r3
   1f71e:	6878      	ldr	r0, [r7, #4]
   1f720:	f7fe ff9d 	bl	1e65e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1f724:	2101      	movs	r1, #1
   1f726:	6838      	ldr	r0, [r7, #0]
   1f728:	f000 fa66 	bl	1fbf8 <prvAddCurrentTaskToDelayedList>
}
   1f72c:	bf00      	nop
   1f72e:	3708      	adds	r7, #8
   1f730:	46bd      	mov	sp, r7
   1f732:	bd80      	pop	{r7, pc}
   1f734:	10009460 	.word	0x10009460

0001f738 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   1f738:	b580      	push	{r7, lr}
   1f73a:	b084      	sub	sp, #16
   1f73c:	af00      	add	r7, sp, #0
   1f73e:	60f8      	str	r0, [r7, #12]
   1f740:	60b9      	str	r1, [r7, #8]
   1f742:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
   1f744:	68fb      	ldr	r3, [r7, #12]
   1f746:	2b00      	cmp	r3, #0
   1f748:	d100      	bne.n	1f74c <vTaskPlaceOnUnorderedEventList+0x14>
   1f74a:	e7fe      	b.n	1f74a <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   1f74c:	4b0c      	ldr	r3, [pc, #48]	; (1f780 <vTaskPlaceOnUnorderedEventList+0x48>)
   1f74e:	681b      	ldr	r3, [r3, #0]
   1f750:	2b00      	cmp	r3, #0
   1f752:	d100      	bne.n	1f756 <vTaskPlaceOnUnorderedEventList+0x1e>
   1f754:	e7fe      	b.n	1f754 <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1f756:	4b0b      	ldr	r3, [pc, #44]	; (1f784 <vTaskPlaceOnUnorderedEventList+0x4c>)
   1f758:	681b      	ldr	r3, [r3, #0]
   1f75a:	68ba      	ldr	r2, [r7, #8]
   1f75c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1f760:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f762:	4b08      	ldr	r3, [pc, #32]	; (1f784 <vTaskPlaceOnUnorderedEventList+0x4c>)
   1f764:	681b      	ldr	r3, [r3, #0]
   1f766:	3318      	adds	r3, #24
   1f768:	4619      	mov	r1, r3
   1f76a:	68f8      	ldr	r0, [r7, #12]
   1f76c:	f7fe ff53 	bl	1e616 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1f770:	2101      	movs	r1, #1
   1f772:	6878      	ldr	r0, [r7, #4]
   1f774:	f000 fa40 	bl	1fbf8 <prvAddCurrentTaskToDelayedList>
}
   1f778:	bf00      	nop
   1f77a:	3710      	adds	r7, #16
   1f77c:	46bd      	mov	sp, r7
   1f77e:	bd80      	pop	{r7, pc}
   1f780:	10009534 	.word	0x10009534
   1f784:	10009460 	.word	0x10009460

0001f788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1f788:	b580      	push	{r7, lr}
   1f78a:	b084      	sub	sp, #16
   1f78c:	af00      	add	r7, sp, #0
   1f78e:	60f8      	str	r0, [r7, #12]
   1f790:	60b9      	str	r1, [r7, #8]
   1f792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1f794:	68fb      	ldr	r3, [r7, #12]
   1f796:	2b00      	cmp	r3, #0
   1f798:	d100      	bne.n	1f79c <vTaskPlaceOnEventListRestricted+0x14>
   1f79a:	e7fe      	b.n	1f79a <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f79c:	4b0a      	ldr	r3, [pc, #40]	; (1f7c8 <vTaskPlaceOnEventListRestricted+0x40>)
   1f79e:	681b      	ldr	r3, [r3, #0]
   1f7a0:	3318      	adds	r3, #24
   1f7a2:	4619      	mov	r1, r3
   1f7a4:	68f8      	ldr	r0, [r7, #12]
   1f7a6:	f7fe ff36 	bl	1e616 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1f7aa:	687b      	ldr	r3, [r7, #4]
   1f7ac:	2b00      	cmp	r3, #0
   1f7ae:	d002      	beq.n	1f7b6 <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
   1f7b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f7b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1f7b6:	6879      	ldr	r1, [r7, #4]
   1f7b8:	68b8      	ldr	r0, [r7, #8]
   1f7ba:	f000 fa1d 	bl	1fbf8 <prvAddCurrentTaskToDelayedList>
	}
   1f7be:	bf00      	nop
   1f7c0:	3710      	adds	r7, #16
   1f7c2:	46bd      	mov	sp, r7
   1f7c4:	bd80      	pop	{r7, pc}
   1f7c6:	bf00      	nop
   1f7c8:	10009460 	.word	0x10009460

0001f7cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1f7cc:	b580      	push	{r7, lr}
   1f7ce:	b084      	sub	sp, #16
   1f7d0:	af00      	add	r7, sp, #0
   1f7d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1f7d4:	687b      	ldr	r3, [r7, #4]
   1f7d6:	68db      	ldr	r3, [r3, #12]
   1f7d8:	68db      	ldr	r3, [r3, #12]
   1f7da:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1f7dc:	68bb      	ldr	r3, [r7, #8]
   1f7de:	2b00      	cmp	r3, #0
   1f7e0:	d100      	bne.n	1f7e4 <xTaskRemoveFromEventList+0x18>
   1f7e2:	e7fe      	b.n	1f7e2 <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1f7e4:	68bb      	ldr	r3, [r7, #8]
   1f7e6:	3318      	adds	r3, #24
   1f7e8:	4618      	mov	r0, r3
   1f7ea:	f7fe ff71 	bl	1e6d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f7ee:	4b1f      	ldr	r3, [pc, #124]	; (1f86c <xTaskRemoveFromEventList+0xa0>)
   1f7f0:	681b      	ldr	r3, [r3, #0]
   1f7f2:	2b00      	cmp	r3, #0
   1f7f4:	d11d      	bne.n	1f832 <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1f7f6:	68bb      	ldr	r3, [r7, #8]
   1f7f8:	3304      	adds	r3, #4
   1f7fa:	4618      	mov	r0, r3
   1f7fc:	f7fe ff68 	bl	1e6d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   1f800:	68bb      	ldr	r3, [r7, #8]
   1f802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f804:	4b1a      	ldr	r3, [pc, #104]	; (1f870 <xTaskRemoveFromEventList+0xa4>)
   1f806:	681b      	ldr	r3, [r3, #0]
   1f808:	429a      	cmp	r2, r3
   1f80a:	d903      	bls.n	1f814 <xTaskRemoveFromEventList+0x48>
   1f80c:	68bb      	ldr	r3, [r7, #8]
   1f80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f810:	4a17      	ldr	r2, [pc, #92]	; (1f870 <xTaskRemoveFromEventList+0xa4>)
   1f812:	6013      	str	r3, [r2, #0]
   1f814:	68bb      	ldr	r3, [r7, #8]
   1f816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f818:	4613      	mov	r3, r2
   1f81a:	009b      	lsls	r3, r3, #2
   1f81c:	4413      	add	r3, r2
   1f81e:	009b      	lsls	r3, r3, #2
   1f820:	4a14      	ldr	r2, [pc, #80]	; (1f874 <xTaskRemoveFromEventList+0xa8>)
   1f822:	441a      	add	r2, r3
   1f824:	68bb      	ldr	r3, [r7, #8]
   1f826:	3304      	adds	r3, #4
   1f828:	4619      	mov	r1, r3
   1f82a:	4610      	mov	r0, r2
   1f82c:	f7fe fef3 	bl	1e616 <vListInsertEnd>
   1f830:	e005      	b.n	1f83e <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1f832:	68bb      	ldr	r3, [r7, #8]
   1f834:	3318      	adds	r3, #24
   1f836:	4619      	mov	r1, r3
   1f838:	480f      	ldr	r0, [pc, #60]	; (1f878 <xTaskRemoveFromEventList+0xac>)
   1f83a:	f7fe feec 	bl	1e616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1f83e:	68bb      	ldr	r3, [r7, #8]
   1f840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f842:	4b0e      	ldr	r3, [pc, #56]	; (1f87c <xTaskRemoveFromEventList+0xb0>)
   1f844:	681b      	ldr	r3, [r3, #0]
   1f846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f848:	429a      	cmp	r2, r3
   1f84a:	d905      	bls.n	1f858 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1f84c:	2301      	movs	r3, #1
   1f84e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1f850:	4b0b      	ldr	r3, [pc, #44]	; (1f880 <xTaskRemoveFromEventList+0xb4>)
   1f852:	2201      	movs	r2, #1
   1f854:	601a      	str	r2, [r3, #0]
   1f856:	e001      	b.n	1f85c <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
   1f858:	2300      	movs	r3, #0
   1f85a:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   1f85c:	f000 f976 	bl	1fb4c <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   1f860:	68fb      	ldr	r3, [r7, #12]
}
   1f862:	4618      	mov	r0, r3
   1f864:	3710      	adds	r7, #16
   1f866:	46bd      	mov	sp, r7
   1f868:	bd80      	pop	{r7, pc}
   1f86a:	bf00      	nop
   1f86c:	10009534 	.word	0x10009534
   1f870:	10009514 	.word	0x10009514
   1f874:	10009464 	.word	0x10009464
   1f878:	100094e4 	.word	0x100094e4
   1f87c:	10009460 	.word	0x10009460
   1f880:	10009520 	.word	0x10009520

0001f884 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   1f884:	b580      	push	{r7, lr}
   1f886:	b084      	sub	sp, #16
   1f888:	af00      	add	r7, sp, #0
   1f88a:	6078      	str	r0, [r7, #4]
   1f88c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1f88e:	4b1f      	ldr	r3, [pc, #124]	; (1f90c <vTaskRemoveFromUnorderedEventList+0x88>)
   1f890:	681b      	ldr	r3, [r3, #0]
   1f892:	2b00      	cmp	r3, #0
   1f894:	d100      	bne.n	1f898 <vTaskRemoveFromUnorderedEventList+0x14>
   1f896:	e7fe      	b.n	1f896 <vTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1f898:	683b      	ldr	r3, [r7, #0]
   1f89a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   1f89e:	687b      	ldr	r3, [r7, #4]
   1f8a0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1f8a2:	687b      	ldr	r3, [r7, #4]
   1f8a4:	68db      	ldr	r3, [r3, #12]
   1f8a6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
   1f8a8:	68fb      	ldr	r3, [r7, #12]
   1f8aa:	2b00      	cmp	r3, #0
   1f8ac:	d100      	bne.n	1f8b0 <vTaskRemoveFromUnorderedEventList+0x2c>
   1f8ae:	e7fe      	b.n	1f8ae <vTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
   1f8b0:	6878      	ldr	r0, [r7, #4]
   1f8b2:	f7fe ff0d 	bl	1e6d0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1f8b6:	68fb      	ldr	r3, [r7, #12]
   1f8b8:	3304      	adds	r3, #4
   1f8ba:	4618      	mov	r0, r3
   1f8bc:	f7fe ff08 	bl	1e6d0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   1f8c0:	68fb      	ldr	r3, [r7, #12]
   1f8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f8c4:	4b12      	ldr	r3, [pc, #72]	; (1f910 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1f8c6:	681b      	ldr	r3, [r3, #0]
   1f8c8:	429a      	cmp	r2, r3
   1f8ca:	d903      	bls.n	1f8d4 <vTaskRemoveFromUnorderedEventList+0x50>
   1f8cc:	68fb      	ldr	r3, [r7, #12]
   1f8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f8d0:	4a0f      	ldr	r2, [pc, #60]	; (1f910 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1f8d2:	6013      	str	r3, [r2, #0]
   1f8d4:	68fb      	ldr	r3, [r7, #12]
   1f8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f8d8:	4613      	mov	r3, r2
   1f8da:	009b      	lsls	r3, r3, #2
   1f8dc:	4413      	add	r3, r2
   1f8de:	009b      	lsls	r3, r3, #2
   1f8e0:	4a0c      	ldr	r2, [pc, #48]	; (1f914 <vTaskRemoveFromUnorderedEventList+0x90>)
   1f8e2:	441a      	add	r2, r3
   1f8e4:	68fb      	ldr	r3, [r7, #12]
   1f8e6:	3304      	adds	r3, #4
   1f8e8:	4619      	mov	r1, r3
   1f8ea:	4610      	mov	r0, r2
   1f8ec:	f7fe fe93 	bl	1e616 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1f8f0:	68fb      	ldr	r3, [r7, #12]
   1f8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f8f4:	4b08      	ldr	r3, [pc, #32]	; (1f918 <vTaskRemoveFromUnorderedEventList+0x94>)
   1f8f6:	681b      	ldr	r3, [r3, #0]
   1f8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f8fa:	429a      	cmp	r2, r3
   1f8fc:	d902      	bls.n	1f904 <vTaskRemoveFromUnorderedEventList+0x80>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   1f8fe:	4b07      	ldr	r3, [pc, #28]	; (1f91c <vTaskRemoveFromUnorderedEventList+0x98>)
   1f900:	2201      	movs	r2, #1
   1f902:	601a      	str	r2, [r3, #0]
	}
}
   1f904:	bf00      	nop
   1f906:	3710      	adds	r7, #16
   1f908:	46bd      	mov	sp, r7
   1f90a:	bd80      	pop	{r7, pc}
   1f90c:	10009534 	.word	0x10009534
   1f910:	10009514 	.word	0x10009514
   1f914:	10009464 	.word	0x10009464
   1f918:	10009460 	.word	0x10009460
   1f91c:	10009520 	.word	0x10009520

0001f920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1f920:	b480      	push	{r7}
   1f922:	b083      	sub	sp, #12
   1f924:	af00      	add	r7, sp, #0
   1f926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1f928:	4b06      	ldr	r3, [pc, #24]	; (1f944 <vTaskInternalSetTimeOutState+0x24>)
   1f92a:	681a      	ldr	r2, [r3, #0]
   1f92c:	687b      	ldr	r3, [r7, #4]
   1f92e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1f930:	4b05      	ldr	r3, [pc, #20]	; (1f948 <vTaskInternalSetTimeOutState+0x28>)
   1f932:	681a      	ldr	r2, [r3, #0]
   1f934:	687b      	ldr	r3, [r7, #4]
   1f936:	605a      	str	r2, [r3, #4]
}
   1f938:	bf00      	nop
   1f93a:	370c      	adds	r7, #12
   1f93c:	46bd      	mov	sp, r7
   1f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f942:	4770      	bx	lr
   1f944:	10009524 	.word	0x10009524
   1f948:	10009510 	.word	0x10009510

0001f94c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1f94c:	b580      	push	{r7, lr}
   1f94e:	b086      	sub	sp, #24
   1f950:	af00      	add	r7, sp, #0
   1f952:	6078      	str	r0, [r7, #4]
   1f954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1f956:	687b      	ldr	r3, [r7, #4]
   1f958:	2b00      	cmp	r3, #0
   1f95a:	d100      	bne.n	1f95e <xTaskCheckForTimeOut+0x12>
   1f95c:	e7fe      	b.n	1f95c <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
   1f95e:	683b      	ldr	r3, [r7, #0]
   1f960:	2b00      	cmp	r3, #0
   1f962:	d100      	bne.n	1f966 <xTaskCheckForTimeOut+0x1a>
   1f964:	e7fe      	b.n	1f964 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
   1f966:	f7fb fb07 	bl	1af78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1f96a:	4b1d      	ldr	r3, [pc, #116]	; (1f9e0 <xTaskCheckForTimeOut+0x94>)
   1f96c:	681b      	ldr	r3, [r3, #0]
   1f96e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1f970:	687b      	ldr	r3, [r7, #4]
   1f972:	685b      	ldr	r3, [r3, #4]
   1f974:	693a      	ldr	r2, [r7, #16]
   1f976:	1ad3      	subs	r3, r2, r3
   1f978:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1f97a:	683b      	ldr	r3, [r7, #0]
   1f97c:	681b      	ldr	r3, [r3, #0]
   1f97e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f982:	d102      	bne.n	1f98a <xTaskCheckForTimeOut+0x3e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1f984:	2300      	movs	r3, #0
   1f986:	617b      	str	r3, [r7, #20]
   1f988:	e023      	b.n	1f9d2 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1f98a:	687b      	ldr	r3, [r7, #4]
   1f98c:	681a      	ldr	r2, [r3, #0]
   1f98e:	4b15      	ldr	r3, [pc, #84]	; (1f9e4 <xTaskCheckForTimeOut+0x98>)
   1f990:	681b      	ldr	r3, [r3, #0]
   1f992:	429a      	cmp	r2, r3
   1f994:	d007      	beq.n	1f9a6 <xTaskCheckForTimeOut+0x5a>
   1f996:	687b      	ldr	r3, [r7, #4]
   1f998:	685a      	ldr	r2, [r3, #4]
   1f99a:	693b      	ldr	r3, [r7, #16]
   1f99c:	429a      	cmp	r2, r3
   1f99e:	d802      	bhi.n	1f9a6 <xTaskCheckForTimeOut+0x5a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1f9a0:	2301      	movs	r3, #1
   1f9a2:	617b      	str	r3, [r7, #20]
   1f9a4:	e015      	b.n	1f9d2 <xTaskCheckForTimeOut+0x86>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1f9a6:	683b      	ldr	r3, [r7, #0]
   1f9a8:	681a      	ldr	r2, [r3, #0]
   1f9aa:	68fb      	ldr	r3, [r7, #12]
   1f9ac:	429a      	cmp	r2, r3
   1f9ae:	d90b      	bls.n	1f9c8 <xTaskCheckForTimeOut+0x7c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1f9b0:	683b      	ldr	r3, [r7, #0]
   1f9b2:	681a      	ldr	r2, [r3, #0]
   1f9b4:	68fb      	ldr	r3, [r7, #12]
   1f9b6:	1ad2      	subs	r2, r2, r3
   1f9b8:	683b      	ldr	r3, [r7, #0]
   1f9ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1f9bc:	6878      	ldr	r0, [r7, #4]
   1f9be:	f7ff ffaf 	bl	1f920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   1f9c2:	2300      	movs	r3, #0
   1f9c4:	617b      	str	r3, [r7, #20]
   1f9c6:	e004      	b.n	1f9d2 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			*pxTicksToWait = 0;
   1f9c8:	683b      	ldr	r3, [r7, #0]
   1f9ca:	2200      	movs	r2, #0
   1f9cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1f9ce:	2301      	movs	r3, #1
   1f9d0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1f9d2:	f7fb faf7 	bl	1afc4 <vPortExitCritical>

	return xReturn;
   1f9d6:	697b      	ldr	r3, [r7, #20]
}
   1f9d8:	4618      	mov	r0, r3
   1f9da:	3718      	adds	r7, #24
   1f9dc:	46bd      	mov	sp, r7
   1f9de:	bd80      	pop	{r7, pc}
   1f9e0:	10009510 	.word	0x10009510
   1f9e4:	10009524 	.word	0x10009524

0001f9e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1f9e8:	b480      	push	{r7}
   1f9ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1f9ec:	4b03      	ldr	r3, [pc, #12]	; (1f9fc <vTaskMissedYield+0x14>)
   1f9ee:	2201      	movs	r2, #1
   1f9f0:	601a      	str	r2, [r3, #0]
}
   1f9f2:	bf00      	nop
   1f9f4:	46bd      	mov	sp, r7
   1f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f9fa:	4770      	bx	lr
   1f9fc:	10009520 	.word	0x10009520

0001fa00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1fa00:	b580      	push	{r7, lr}
   1fa02:	b084      	sub	sp, #16
   1fa04:	af00      	add	r7, sp, #0
   1fa06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1fa08:	f000 f898 	bl	1fb3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1fa0c:	4b13      	ldr	r3, [pc, #76]	; (1fa5c <prvIdleTask+0x5c>)
   1fa0e:	681b      	ldr	r3, [r3, #0]
   1fa10:	2b01      	cmp	r3, #1
   1fa12:	d907      	bls.n	1fa24 <prvIdleTask+0x24>
			{
				taskYIELD();
   1fa14:	4b12      	ldr	r3, [pc, #72]	; (1fa60 <prvIdleTask+0x60>)
   1fa16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fa1a:	601a      	str	r2, [r3, #0]
   1fa1c:	f3bf 8f4f 	dsb	sy
   1fa20:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   1fa24:	f7ff fc5c 	bl	1f2e0 <prvGetExpectedIdleTime>
   1fa28:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1fa2a:	68fb      	ldr	r3, [r7, #12]
   1fa2c:	2b01      	cmp	r3, #1
   1fa2e:	d9eb      	bls.n	1fa08 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
   1fa30:	f7ff fc48 	bl	1f2c4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1fa34:	4b0b      	ldr	r3, [pc, #44]	; (1fa64 <prvIdleTask+0x64>)
   1fa36:	681a      	ldr	r2, [r3, #0]
   1fa38:	4b0b      	ldr	r3, [pc, #44]	; (1fa68 <prvIdleTask+0x68>)
   1fa3a:	681b      	ldr	r3, [r3, #0]
   1fa3c:	429a      	cmp	r2, r3
   1fa3e:	d200      	bcs.n	1fa42 <prvIdleTask+0x42>
   1fa40:	e7fe      	b.n	1fa40 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   1fa42:	f7ff fc4d 	bl	1f2e0 <prvGetExpectedIdleTime>
   1fa46:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1fa48:	68fb      	ldr	r3, [r7, #12]
   1fa4a:	2b01      	cmp	r3, #1
   1fa4c:	d902      	bls.n	1fa54 <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   1fa4e:	68f8      	ldr	r0, [r7, #12]
   1fa50:	f7fb fb60 	bl	1b114 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   1fa54:	f7ff fc7c 	bl	1f350 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   1fa58:	e7d6      	b.n	1fa08 <prvIdleTask+0x8>
   1fa5a:	bf00      	nop
   1fa5c:	10009464 	.word	0x10009464
   1fa60:	e000ed04 	.word	0xe000ed04
   1fa64:	1000952c 	.word	0x1000952c
   1fa68:	10009510 	.word	0x10009510

0001fa6c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   1fa6c:	b480      	push	{r7}
   1fa6e:	b083      	sub	sp, #12
   1fa70:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   1fa72:	2301      	movs	r3, #1
   1fa74:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   1fa76:	2301      	movs	r3, #1
   1fa78:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   1fa7a:	4b0f      	ldr	r3, [pc, #60]	; (1fab8 <eTaskConfirmSleepModeStatus+0x4c>)
   1fa7c:	681b      	ldr	r3, [r3, #0]
   1fa7e:	2b00      	cmp	r3, #0
   1fa80:	d002      	beq.n	1fa88 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1fa82:	2300      	movs	r3, #0
   1fa84:	71fb      	strb	r3, [r7, #7]
   1fa86:	e010      	b.n	1faaa <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
   1fa88:	4b0c      	ldr	r3, [pc, #48]	; (1fabc <eTaskConfirmSleepModeStatus+0x50>)
   1fa8a:	681b      	ldr	r3, [r3, #0]
   1fa8c:	2b00      	cmp	r3, #0
   1fa8e:	d002      	beq.n	1fa96 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1fa90:	2300      	movs	r3, #0
   1fa92:	71fb      	strb	r3, [r7, #7]
   1fa94:	e009      	b.n	1faaa <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   1fa96:	4b0a      	ldr	r3, [pc, #40]	; (1fac0 <eTaskConfirmSleepModeStatus+0x54>)
   1fa98:	681a      	ldr	r2, [r3, #0]
   1fa9a:	4b0a      	ldr	r3, [pc, #40]	; (1fac4 <eTaskConfirmSleepModeStatus+0x58>)
   1fa9c:	6819      	ldr	r1, [r3, #0]
   1fa9e:	683b      	ldr	r3, [r7, #0]
   1faa0:	1acb      	subs	r3, r1, r3
   1faa2:	429a      	cmp	r2, r3
   1faa4:	d101      	bne.n	1faaa <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
   1faa6:	2302      	movs	r3, #2
   1faa8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   1faaa:	79fb      	ldrb	r3, [r7, #7]
	}
   1faac:	4618      	mov	r0, r3
   1faae:	370c      	adds	r7, #12
   1fab0:	46bd      	mov	sp, r7
   1fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fab6:	4770      	bx	lr
   1fab8:	100094e4 	.word	0x100094e4
   1fabc:	10009520 	.word	0x10009520
   1fac0:	100094f8 	.word	0x100094f8
   1fac4:	1000950c 	.word	0x1000950c

0001fac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1fac8:	b580      	push	{r7, lr}
   1faca:	b082      	sub	sp, #8
   1facc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1face:	2300      	movs	r3, #0
   1fad0:	607b      	str	r3, [r7, #4]
   1fad2:	e00c      	b.n	1faee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1fad4:	687a      	ldr	r2, [r7, #4]
   1fad6:	4613      	mov	r3, r2
   1fad8:	009b      	lsls	r3, r3, #2
   1fada:	4413      	add	r3, r2
   1fadc:	009b      	lsls	r3, r3, #2
   1fade:	4a10      	ldr	r2, [pc, #64]	; (1fb20 <prvInitialiseTaskLists+0x58>)
   1fae0:	4413      	add	r3, r2
   1fae2:	4618      	mov	r0, r3
   1fae4:	f7fe fd6a 	bl	1e5bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1fae8:	687b      	ldr	r3, [r7, #4]
   1faea:	3301      	adds	r3, #1
   1faec:	607b      	str	r3, [r7, #4]
   1faee:	687b      	ldr	r3, [r7, #4]
   1faf0:	2b03      	cmp	r3, #3
   1faf2:	d9ef      	bls.n	1fad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1faf4:	480b      	ldr	r0, [pc, #44]	; (1fb24 <prvInitialiseTaskLists+0x5c>)
   1faf6:	f7fe fd61 	bl	1e5bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1fafa:	480b      	ldr	r0, [pc, #44]	; (1fb28 <prvInitialiseTaskLists+0x60>)
   1fafc:	f7fe fd5e 	bl	1e5bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1fb00:	480a      	ldr	r0, [pc, #40]	; (1fb2c <prvInitialiseTaskLists+0x64>)
   1fb02:	f7fe fd5b 	bl	1e5bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1fb06:	480a      	ldr	r0, [pc, #40]	; (1fb30 <prvInitialiseTaskLists+0x68>)
   1fb08:	f7fe fd58 	bl	1e5bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1fb0c:	4b09      	ldr	r3, [pc, #36]	; (1fb34 <prvInitialiseTaskLists+0x6c>)
   1fb0e:	4a05      	ldr	r2, [pc, #20]	; (1fb24 <prvInitialiseTaskLists+0x5c>)
   1fb10:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1fb12:	4b09      	ldr	r3, [pc, #36]	; (1fb38 <prvInitialiseTaskLists+0x70>)
   1fb14:	4a04      	ldr	r2, [pc, #16]	; (1fb28 <prvInitialiseTaskLists+0x60>)
   1fb16:	601a      	str	r2, [r3, #0]
}
   1fb18:	bf00      	nop
   1fb1a:	3708      	adds	r7, #8
   1fb1c:	46bd      	mov	sp, r7
   1fb1e:	bd80      	pop	{r7, pc}
   1fb20:	10009464 	.word	0x10009464
   1fb24:	100094b4 	.word	0x100094b4
   1fb28:	100094c8 	.word	0x100094c8
   1fb2c:	100094e4 	.word	0x100094e4
   1fb30:	100094f8 	.word	0x100094f8
   1fb34:	100094dc 	.word	0x100094dc
   1fb38:	100094e0 	.word	0x100094e0

0001fb3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1fb3c:	b480      	push	{r7}
   1fb3e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1fb40:	bf00      	nop
   1fb42:	46bd      	mov	sp, r7
   1fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fb48:	4770      	bx	lr
	...

0001fb4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1fb4c:	b480      	push	{r7}
   1fb4e:	b083      	sub	sp, #12
   1fb50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1fb52:	4b0c      	ldr	r3, [pc, #48]	; (1fb84 <prvResetNextTaskUnblockTime+0x38>)
   1fb54:	681b      	ldr	r3, [r3, #0]
   1fb56:	681b      	ldr	r3, [r3, #0]
   1fb58:	2b00      	cmp	r3, #0
   1fb5a:	d104      	bne.n	1fb66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1fb5c:	4b0a      	ldr	r3, [pc, #40]	; (1fb88 <prvResetNextTaskUnblockTime+0x3c>)
   1fb5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fb62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1fb64:	e008      	b.n	1fb78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1fb66:	4b07      	ldr	r3, [pc, #28]	; (1fb84 <prvResetNextTaskUnblockTime+0x38>)
   1fb68:	681b      	ldr	r3, [r3, #0]
   1fb6a:	68db      	ldr	r3, [r3, #12]
   1fb6c:	68db      	ldr	r3, [r3, #12]
   1fb6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1fb70:	687b      	ldr	r3, [r7, #4]
   1fb72:	685b      	ldr	r3, [r3, #4]
   1fb74:	4a04      	ldr	r2, [pc, #16]	; (1fb88 <prvResetNextTaskUnblockTime+0x3c>)
   1fb76:	6013      	str	r3, [r2, #0]
}
   1fb78:	bf00      	nop
   1fb7a:	370c      	adds	r7, #12
   1fb7c:	46bd      	mov	sp, r7
   1fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fb82:	4770      	bx	lr
   1fb84:	100094dc 	.word	0x100094dc
   1fb88:	1000952c 	.word	0x1000952c

0001fb8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1fb8c:	b480      	push	{r7}
   1fb8e:	b083      	sub	sp, #12
   1fb90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1fb92:	4b0b      	ldr	r3, [pc, #44]	; (1fbc0 <xTaskGetSchedulerState+0x34>)
   1fb94:	681b      	ldr	r3, [r3, #0]
   1fb96:	2b00      	cmp	r3, #0
   1fb98:	d102      	bne.n	1fba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1fb9a:	2301      	movs	r3, #1
   1fb9c:	607b      	str	r3, [r7, #4]
   1fb9e:	e008      	b.n	1fbb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1fba0:	4b08      	ldr	r3, [pc, #32]	; (1fbc4 <xTaskGetSchedulerState+0x38>)
   1fba2:	681b      	ldr	r3, [r3, #0]
   1fba4:	2b00      	cmp	r3, #0
   1fba6:	d102      	bne.n	1fbae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1fba8:	2302      	movs	r3, #2
   1fbaa:	607b      	str	r3, [r7, #4]
   1fbac:	e001      	b.n	1fbb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1fbae:	2300      	movs	r3, #0
   1fbb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1fbb2:	687b      	ldr	r3, [r7, #4]
	}
   1fbb4:	4618      	mov	r0, r3
   1fbb6:	370c      	adds	r7, #12
   1fbb8:	46bd      	mov	sp, r7
   1fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fbbe:	4770      	bx	lr
   1fbc0:	10009518 	.word	0x10009518
   1fbc4:	10009534 	.word	0x10009534

0001fbc8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   1fbc8:	b480      	push	{r7}
   1fbca:	b083      	sub	sp, #12
   1fbcc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1fbce:	4b09      	ldr	r3, [pc, #36]	; (1fbf4 <uxTaskResetEventItemValue+0x2c>)
   1fbd0:	681b      	ldr	r3, [r3, #0]
   1fbd2:	699b      	ldr	r3, [r3, #24]
   1fbd4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fbd6:	4b07      	ldr	r3, [pc, #28]	; (1fbf4 <uxTaskResetEventItemValue+0x2c>)
   1fbd8:	681b      	ldr	r3, [r3, #0]
   1fbda:	4a06      	ldr	r2, [pc, #24]	; (1fbf4 <uxTaskResetEventItemValue+0x2c>)
   1fbdc:	6812      	ldr	r2, [r2, #0]
   1fbde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1fbe0:	f1c2 0204 	rsb	r2, r2, #4
   1fbe4:	619a      	str	r2, [r3, #24]

	return uxReturn;
   1fbe6:	687b      	ldr	r3, [r7, #4]
}
   1fbe8:	4618      	mov	r0, r3
   1fbea:	370c      	adds	r7, #12
   1fbec:	46bd      	mov	sp, r7
   1fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fbf2:	4770      	bx	lr
   1fbf4:	10009460 	.word	0x10009460

0001fbf8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1fbf8:	b580      	push	{r7, lr}
   1fbfa:	b084      	sub	sp, #16
   1fbfc:	af00      	add	r7, sp, #0
   1fbfe:	6078      	str	r0, [r7, #4]
   1fc00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1fc02:	4b21      	ldr	r3, [pc, #132]	; (1fc88 <prvAddCurrentTaskToDelayedList+0x90>)
   1fc04:	681b      	ldr	r3, [r3, #0]
   1fc06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1fc08:	4b20      	ldr	r3, [pc, #128]	; (1fc8c <prvAddCurrentTaskToDelayedList+0x94>)
   1fc0a:	681b      	ldr	r3, [r3, #0]
   1fc0c:	3304      	adds	r3, #4
   1fc0e:	4618      	mov	r0, r3
   1fc10:	f7fe fd5e 	bl	1e6d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1fc14:	687b      	ldr	r3, [r7, #4]
   1fc16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1fc1a:	d10a      	bne.n	1fc32 <prvAddCurrentTaskToDelayedList+0x3a>
   1fc1c:	683b      	ldr	r3, [r7, #0]
   1fc1e:	2b00      	cmp	r3, #0
   1fc20:	d007      	beq.n	1fc32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1fc22:	4b1a      	ldr	r3, [pc, #104]	; (1fc8c <prvAddCurrentTaskToDelayedList+0x94>)
   1fc24:	681b      	ldr	r3, [r3, #0]
   1fc26:	3304      	adds	r3, #4
   1fc28:	4619      	mov	r1, r3
   1fc2a:	4819      	ldr	r0, [pc, #100]	; (1fc90 <prvAddCurrentTaskToDelayedList+0x98>)
   1fc2c:	f7fe fcf3 	bl	1e616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1fc30:	e026      	b.n	1fc80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1fc32:	68fa      	ldr	r2, [r7, #12]
   1fc34:	687b      	ldr	r3, [r7, #4]
   1fc36:	4413      	add	r3, r2
   1fc38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1fc3a:	4b14      	ldr	r3, [pc, #80]	; (1fc8c <prvAddCurrentTaskToDelayedList+0x94>)
   1fc3c:	681b      	ldr	r3, [r3, #0]
   1fc3e:	68ba      	ldr	r2, [r7, #8]
   1fc40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1fc42:	68ba      	ldr	r2, [r7, #8]
   1fc44:	68fb      	ldr	r3, [r7, #12]
   1fc46:	429a      	cmp	r2, r3
   1fc48:	d209      	bcs.n	1fc5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1fc4a:	4b12      	ldr	r3, [pc, #72]	; (1fc94 <prvAddCurrentTaskToDelayedList+0x9c>)
   1fc4c:	681a      	ldr	r2, [r3, #0]
   1fc4e:	4b0f      	ldr	r3, [pc, #60]	; (1fc8c <prvAddCurrentTaskToDelayedList+0x94>)
   1fc50:	681b      	ldr	r3, [r3, #0]
   1fc52:	3304      	adds	r3, #4
   1fc54:	4619      	mov	r1, r3
   1fc56:	4610      	mov	r0, r2
   1fc58:	f7fe fd01 	bl	1e65e <vListInsert>
}
   1fc5c:	e010      	b.n	1fc80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1fc5e:	4b0e      	ldr	r3, [pc, #56]	; (1fc98 <prvAddCurrentTaskToDelayedList+0xa0>)
   1fc60:	681a      	ldr	r2, [r3, #0]
   1fc62:	4b0a      	ldr	r3, [pc, #40]	; (1fc8c <prvAddCurrentTaskToDelayedList+0x94>)
   1fc64:	681b      	ldr	r3, [r3, #0]
   1fc66:	3304      	adds	r3, #4
   1fc68:	4619      	mov	r1, r3
   1fc6a:	4610      	mov	r0, r2
   1fc6c:	f7fe fcf7 	bl	1e65e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1fc70:	4b0a      	ldr	r3, [pc, #40]	; (1fc9c <prvAddCurrentTaskToDelayedList+0xa4>)
   1fc72:	681b      	ldr	r3, [r3, #0]
   1fc74:	68ba      	ldr	r2, [r7, #8]
   1fc76:	429a      	cmp	r2, r3
   1fc78:	d202      	bcs.n	1fc80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1fc7a:	4a08      	ldr	r2, [pc, #32]	; (1fc9c <prvAddCurrentTaskToDelayedList+0xa4>)
   1fc7c:	68bb      	ldr	r3, [r7, #8]
   1fc7e:	6013      	str	r3, [r2, #0]
}
   1fc80:	bf00      	nop
   1fc82:	3710      	adds	r7, #16
   1fc84:	46bd      	mov	sp, r7
   1fc86:	bd80      	pop	{r7, pc}
   1fc88:	10009510 	.word	0x10009510
   1fc8c:	10009460 	.word	0x10009460
   1fc90:	100094f8 	.word	0x100094f8
   1fc94:	100094e0 	.word	0x100094e0
   1fc98:	100094dc 	.word	0x100094dc
   1fc9c:	1000952c 	.word	0x1000952c

0001fca0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1fca0:	b580      	push	{r7, lr}
   1fca2:	b084      	sub	sp, #16
   1fca4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1fca6:	2300      	movs	r3, #0
   1fca8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1fcaa:	f000 fab1 	bl	20210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   1fcae:	4b0c      	ldr	r3, [pc, #48]	; (1fce0 <xTimerCreateTimerTask+0x40>)
   1fcb0:	681b      	ldr	r3, [r3, #0]
   1fcb2:	2b00      	cmp	r3, #0
   1fcb4:	d00b      	beq.n	1fcce <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1fcb6:	4b0b      	ldr	r3, [pc, #44]	; (1fce4 <xTimerCreateTimerTask+0x44>)
   1fcb8:	9301      	str	r3, [sp, #4]
   1fcba:	2303      	movs	r3, #3
   1fcbc:	9300      	str	r3, [sp, #0]
   1fcbe:	2300      	movs	r3, #0
   1fcc0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1fcc4:	4908      	ldr	r1, [pc, #32]	; (1fce8 <xTimerCreateTimerTask+0x48>)
   1fcc6:	4809      	ldr	r0, [pc, #36]	; (1fcec <xTimerCreateTimerTask+0x4c>)
   1fcc8:	f7ff f924 	bl	1ef14 <xTaskCreate>
   1fccc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1fcce:	687b      	ldr	r3, [r7, #4]
   1fcd0:	2b00      	cmp	r3, #0
   1fcd2:	d100      	bne.n	1fcd6 <xTimerCreateTimerTask+0x36>
   1fcd4:	e7fe      	b.n	1fcd4 <xTimerCreateTimerTask+0x34>
	return xReturn;
   1fcd6:	687b      	ldr	r3, [r7, #4]
}
   1fcd8:	4618      	mov	r0, r3
   1fcda:	3708      	adds	r7, #8
   1fcdc:	46bd      	mov	sp, r7
   1fcde:	bd80      	pop	{r7, pc}
   1fce0:	10009568 	.word	0x10009568
   1fce4:	1000956c 	.word	0x1000956c
   1fce8:	00024ef0 	.word	0x00024ef0
   1fcec:	0001fe71 	.word	0x0001fe71

0001fcf0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   1fcf0:	b580      	push	{r7, lr}
   1fcf2:	b088      	sub	sp, #32
   1fcf4:	af02      	add	r7, sp, #8
   1fcf6:	60f8      	str	r0, [r7, #12]
   1fcf8:	60b9      	str	r1, [r7, #8]
   1fcfa:	607a      	str	r2, [r7, #4]
   1fcfc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1fcfe:	2028      	movs	r0, #40	; 0x28
   1fd00:	f7fe f9d4 	bl	1e0ac <pvPortMalloc>
   1fd04:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
   1fd06:	697b      	ldr	r3, [r7, #20]
   1fd08:	2b00      	cmp	r3, #0
   1fd0a:	d009      	beq.n	1fd20 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   1fd0c:	697b      	ldr	r3, [r7, #20]
   1fd0e:	9301      	str	r3, [sp, #4]
   1fd10:	6a3b      	ldr	r3, [r7, #32]
   1fd12:	9300      	str	r3, [sp, #0]
   1fd14:	683b      	ldr	r3, [r7, #0]
   1fd16:	687a      	ldr	r2, [r7, #4]
   1fd18:	68b9      	ldr	r1, [r7, #8]
   1fd1a:	68f8      	ldr	r0, [r7, #12]
   1fd1c:	f000 f805 	bl	1fd2a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   1fd20:	697b      	ldr	r3, [r7, #20]
	}
   1fd22:	4618      	mov	r0, r3
   1fd24:	3718      	adds	r7, #24
   1fd26:	46bd      	mov	sp, r7
   1fd28:	bd80      	pop	{r7, pc}

0001fd2a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   1fd2a:	b580      	push	{r7, lr}
   1fd2c:	b084      	sub	sp, #16
   1fd2e:	af00      	add	r7, sp, #0
   1fd30:	60f8      	str	r0, [r7, #12]
   1fd32:	60b9      	str	r1, [r7, #8]
   1fd34:	607a      	str	r2, [r7, #4]
   1fd36:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1fd38:	68bb      	ldr	r3, [r7, #8]
   1fd3a:	2b00      	cmp	r3, #0
   1fd3c:	d100      	bne.n	1fd40 <prvInitialiseNewTimer+0x16>
   1fd3e:	e7fe      	b.n	1fd3e <prvInitialiseNewTimer+0x14>

	if( pxNewTimer != NULL )
   1fd40:	69fb      	ldr	r3, [r7, #28]
   1fd42:	2b00      	cmp	r3, #0
   1fd44:	d015      	beq.n	1fd72 <prvInitialiseNewTimer+0x48>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   1fd46:	f000 fa63 	bl	20210 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   1fd4a:	69fb      	ldr	r3, [r7, #28]
   1fd4c:	68fa      	ldr	r2, [r7, #12]
   1fd4e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   1fd50:	69fb      	ldr	r3, [r7, #28]
   1fd52:	68ba      	ldr	r2, [r7, #8]
   1fd54:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   1fd56:	69fb      	ldr	r3, [r7, #28]
   1fd58:	687a      	ldr	r2, [r7, #4]
   1fd5a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   1fd5c:	69fb      	ldr	r3, [r7, #28]
   1fd5e:	683a      	ldr	r2, [r7, #0]
   1fd60:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1fd62:	69fb      	ldr	r3, [r7, #28]
   1fd64:	69ba      	ldr	r2, [r7, #24]
   1fd66:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   1fd68:	69fb      	ldr	r3, [r7, #28]
   1fd6a:	3304      	adds	r3, #4
   1fd6c:	4618      	mov	r0, r3
   1fd6e:	f7fe fc45 	bl	1e5fc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   1fd72:	bf00      	nop
   1fd74:	3710      	adds	r7, #16
   1fd76:	46bd      	mov	sp, r7
   1fd78:	bd80      	pop	{r7, pc}
	...

0001fd7c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1fd7c:	b580      	push	{r7, lr}
   1fd7e:	b08a      	sub	sp, #40	; 0x28
   1fd80:	af00      	add	r7, sp, #0
   1fd82:	60f8      	str	r0, [r7, #12]
   1fd84:	60b9      	str	r1, [r7, #8]
   1fd86:	607a      	str	r2, [r7, #4]
   1fd88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1fd8a:	2300      	movs	r3, #0
   1fd8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1fd8e:	68fb      	ldr	r3, [r7, #12]
   1fd90:	2b00      	cmp	r3, #0
   1fd92:	d100      	bne.n	1fd96 <xTimerGenericCommand+0x1a>
   1fd94:	e7fe      	b.n	1fd94 <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1fd96:	4b1a      	ldr	r3, [pc, #104]	; (1fe00 <xTimerGenericCommand+0x84>)
   1fd98:	681b      	ldr	r3, [r3, #0]
   1fd9a:	2b00      	cmp	r3, #0
   1fd9c:	d02a      	beq.n	1fdf4 <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1fd9e:	68bb      	ldr	r3, [r7, #8]
   1fda0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1fda2:	687b      	ldr	r3, [r7, #4]
   1fda4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1fda6:	68fb      	ldr	r3, [r7, #12]
   1fda8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1fdaa:	68bb      	ldr	r3, [r7, #8]
   1fdac:	2b05      	cmp	r3, #5
   1fdae:	dc18      	bgt.n	1fde2 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1fdb0:	f7ff feec 	bl	1fb8c <xTaskGetSchedulerState>
   1fdb4:	4603      	mov	r3, r0
   1fdb6:	2b02      	cmp	r3, #2
   1fdb8:	d109      	bne.n	1fdce <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1fdba:	4b11      	ldr	r3, [pc, #68]	; (1fe00 <xTimerGenericCommand+0x84>)
   1fdbc:	6818      	ldr	r0, [r3, #0]
   1fdbe:	f107 0114 	add.w	r1, r7, #20
   1fdc2:	2300      	movs	r3, #0
   1fdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1fdc6:	f7fe fd5d 	bl	1e884 <xQueueGenericSend>
   1fdca:	6278      	str	r0, [r7, #36]	; 0x24
   1fdcc:	e012      	b.n	1fdf4 <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1fdce:	4b0c      	ldr	r3, [pc, #48]	; (1fe00 <xTimerGenericCommand+0x84>)
   1fdd0:	6818      	ldr	r0, [r3, #0]
   1fdd2:	f107 0114 	add.w	r1, r7, #20
   1fdd6:	2300      	movs	r3, #0
   1fdd8:	2200      	movs	r2, #0
   1fdda:	f7fe fd53 	bl	1e884 <xQueueGenericSend>
   1fdde:	6278      	str	r0, [r7, #36]	; 0x24
   1fde0:	e008      	b.n	1fdf4 <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1fde2:	4b07      	ldr	r3, [pc, #28]	; (1fe00 <xTimerGenericCommand+0x84>)
   1fde4:	6818      	ldr	r0, [r3, #0]
   1fde6:	f107 0114 	add.w	r1, r7, #20
   1fdea:	2300      	movs	r3, #0
   1fdec:	683a      	ldr	r2, [r7, #0]
   1fdee:	f7fe fe1f 	bl	1ea30 <xQueueGenericSendFromISR>
   1fdf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1fdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1fdf6:	4618      	mov	r0, r3
   1fdf8:	3728      	adds	r7, #40	; 0x28
   1fdfa:	46bd      	mov	sp, r7
   1fdfc:	bd80      	pop	{r7, pc}
   1fdfe:	bf00      	nop
   1fe00:	10009568 	.word	0x10009568

0001fe04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1fe04:	b580      	push	{r7, lr}
   1fe06:	b086      	sub	sp, #24
   1fe08:	af02      	add	r7, sp, #8
   1fe0a:	6078      	str	r0, [r7, #4]
   1fe0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1fe0e:	4b17      	ldr	r3, [pc, #92]	; (1fe6c <prvProcessExpiredTimer+0x68>)
   1fe10:	681b      	ldr	r3, [r3, #0]
   1fe12:	68db      	ldr	r3, [r3, #12]
   1fe14:	68db      	ldr	r3, [r3, #12]
   1fe16:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fe18:	68fb      	ldr	r3, [r7, #12]
   1fe1a:	3304      	adds	r3, #4
   1fe1c:	4618      	mov	r0, r3
   1fe1e:	f7fe fc57 	bl	1e6d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fe22:	68fb      	ldr	r3, [r7, #12]
   1fe24:	69db      	ldr	r3, [r3, #28]
   1fe26:	2b01      	cmp	r3, #1
   1fe28:	d118      	bne.n	1fe5c <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1fe2a:	68fb      	ldr	r3, [r7, #12]
   1fe2c:	699a      	ldr	r2, [r3, #24]
   1fe2e:	687b      	ldr	r3, [r7, #4]
   1fe30:	18d1      	adds	r1, r2, r3
   1fe32:	687b      	ldr	r3, [r7, #4]
   1fe34:	683a      	ldr	r2, [r7, #0]
   1fe36:	68f8      	ldr	r0, [r7, #12]
   1fe38:	f000 f8be 	bl	1ffb8 <prvInsertTimerInActiveList>
   1fe3c:	4603      	mov	r3, r0
   1fe3e:	2b00      	cmp	r3, #0
   1fe40:	d00c      	beq.n	1fe5c <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1fe42:	2300      	movs	r3, #0
   1fe44:	9300      	str	r3, [sp, #0]
   1fe46:	2300      	movs	r3, #0
   1fe48:	687a      	ldr	r2, [r7, #4]
   1fe4a:	2100      	movs	r1, #0
   1fe4c:	68f8      	ldr	r0, [r7, #12]
   1fe4e:	f7ff ff95 	bl	1fd7c <xTimerGenericCommand>
   1fe52:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   1fe54:	68bb      	ldr	r3, [r7, #8]
   1fe56:	2b00      	cmp	r3, #0
   1fe58:	d100      	bne.n	1fe5c <prvProcessExpiredTimer+0x58>
   1fe5a:	e7fe      	b.n	1fe5a <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fe5c:	68fb      	ldr	r3, [r7, #12]
   1fe5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fe60:	68f8      	ldr	r0, [r7, #12]
   1fe62:	4798      	blx	r3
}
   1fe64:	bf00      	nop
   1fe66:	3710      	adds	r7, #16
   1fe68:	46bd      	mov	sp, r7
   1fe6a:	bd80      	pop	{r7, pc}
   1fe6c:	10009560 	.word	0x10009560

0001fe70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1fe70:	b580      	push	{r7, lr}
   1fe72:	b084      	sub	sp, #16
   1fe74:	af00      	add	r7, sp, #0
   1fe76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1fe78:	f107 0308 	add.w	r3, r7, #8
   1fe7c:	4618      	mov	r0, r3
   1fe7e:	f000 f857 	bl	1ff30 <prvGetNextExpireTime>
   1fe82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1fe84:	68bb      	ldr	r3, [r7, #8]
   1fe86:	4619      	mov	r1, r3
   1fe88:	68f8      	ldr	r0, [r7, #12]
   1fe8a:	f000 f803 	bl	1fe94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1fe8e:	f000 f8d5 	bl	2003c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1fe92:	e7f1      	b.n	1fe78 <prvTimerTask+0x8>

0001fe94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1fe94:	b580      	push	{r7, lr}
   1fe96:	b084      	sub	sp, #16
   1fe98:	af00      	add	r7, sp, #0
   1fe9a:	6078      	str	r0, [r7, #4]
   1fe9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1fe9e:	f7ff fa11 	bl	1f2c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1fea2:	f107 0308 	add.w	r3, r7, #8
   1fea6:	4618      	mov	r0, r3
   1fea8:	f000 f866 	bl	1ff78 <prvSampleTimeNow>
   1feac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1feae:	68bb      	ldr	r3, [r7, #8]
   1feb0:	2b00      	cmp	r3, #0
   1feb2:	d130      	bne.n	1ff16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1feb4:	683b      	ldr	r3, [r7, #0]
   1feb6:	2b00      	cmp	r3, #0
   1feb8:	d10a      	bne.n	1fed0 <prvProcessTimerOrBlockTask+0x3c>
   1feba:	687a      	ldr	r2, [r7, #4]
   1febc:	68fb      	ldr	r3, [r7, #12]
   1febe:	429a      	cmp	r2, r3
   1fec0:	d806      	bhi.n	1fed0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   1fec2:	f7ff fa45 	bl	1f350 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1fec6:	68f9      	ldr	r1, [r7, #12]
   1fec8:	6878      	ldr	r0, [r7, #4]
   1feca:	f7ff ff9b 	bl	1fe04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1fece:	e024      	b.n	1ff1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
   1fed0:	683b      	ldr	r3, [r7, #0]
   1fed2:	2b00      	cmp	r3, #0
   1fed4:	d008      	beq.n	1fee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1fed6:	4b13      	ldr	r3, [pc, #76]	; (1ff24 <prvProcessTimerOrBlockTask+0x90>)
   1fed8:	681b      	ldr	r3, [r3, #0]
   1feda:	681b      	ldr	r3, [r3, #0]
   1fedc:	2b00      	cmp	r3, #0
   1fede:	d101      	bne.n	1fee4 <prvProcessTimerOrBlockTask+0x50>
   1fee0:	2301      	movs	r3, #1
   1fee2:	e000      	b.n	1fee6 <prvProcessTimerOrBlockTask+0x52>
   1fee4:	2300      	movs	r3, #0
   1fee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1fee8:	4b0f      	ldr	r3, [pc, #60]	; (1ff28 <prvProcessTimerOrBlockTask+0x94>)
   1feea:	6818      	ldr	r0, [r3, #0]
   1feec:	687a      	ldr	r2, [r7, #4]
   1feee:	68fb      	ldr	r3, [r7, #12]
   1fef0:	1ad3      	subs	r3, r2, r3
   1fef2:	683a      	ldr	r2, [r7, #0]
   1fef4:	4619      	mov	r1, r3
   1fef6:	f7fe ffd9 	bl	1eeac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   1fefa:	f7ff fa29 	bl	1f350 <xTaskResumeAll>
   1fefe:	4603      	mov	r3, r0
   1ff00:	2b00      	cmp	r3, #0
   1ff02:	d10a      	bne.n	1ff1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
   1ff04:	4b09      	ldr	r3, [pc, #36]	; (1ff2c <prvProcessTimerOrBlockTask+0x98>)
   1ff06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ff0a:	601a      	str	r2, [r3, #0]
   1ff0c:	f3bf 8f4f 	dsb	sy
   1ff10:	f3bf 8f6f 	isb	sy
}
   1ff14:	e001      	b.n	1ff1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
   1ff16:	f7ff fa1b 	bl	1f350 <xTaskResumeAll>
}
   1ff1a:	bf00      	nop
   1ff1c:	3710      	adds	r7, #16
   1ff1e:	46bd      	mov	sp, r7
   1ff20:	bd80      	pop	{r7, pc}
   1ff22:	bf00      	nop
   1ff24:	10009564 	.word	0x10009564
   1ff28:	10009568 	.word	0x10009568
   1ff2c:	e000ed04 	.word	0xe000ed04

0001ff30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1ff30:	b480      	push	{r7}
   1ff32:	b085      	sub	sp, #20
   1ff34:	af00      	add	r7, sp, #0
   1ff36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1ff38:	4b0e      	ldr	r3, [pc, #56]	; (1ff74 <prvGetNextExpireTime+0x44>)
   1ff3a:	681b      	ldr	r3, [r3, #0]
   1ff3c:	681b      	ldr	r3, [r3, #0]
   1ff3e:	2b00      	cmp	r3, #0
   1ff40:	d101      	bne.n	1ff46 <prvGetNextExpireTime+0x16>
   1ff42:	2201      	movs	r2, #1
   1ff44:	e000      	b.n	1ff48 <prvGetNextExpireTime+0x18>
   1ff46:	2200      	movs	r2, #0
   1ff48:	687b      	ldr	r3, [r7, #4]
   1ff4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1ff4c:	687b      	ldr	r3, [r7, #4]
   1ff4e:	681b      	ldr	r3, [r3, #0]
   1ff50:	2b00      	cmp	r3, #0
   1ff52:	d105      	bne.n	1ff60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ff54:	4b07      	ldr	r3, [pc, #28]	; (1ff74 <prvGetNextExpireTime+0x44>)
   1ff56:	681b      	ldr	r3, [r3, #0]
   1ff58:	68db      	ldr	r3, [r3, #12]
   1ff5a:	681b      	ldr	r3, [r3, #0]
   1ff5c:	60fb      	str	r3, [r7, #12]
   1ff5e:	e001      	b.n	1ff64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1ff60:	2300      	movs	r3, #0
   1ff62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1ff64:	68fb      	ldr	r3, [r7, #12]
}
   1ff66:	4618      	mov	r0, r3
   1ff68:	3714      	adds	r7, #20
   1ff6a:	46bd      	mov	sp, r7
   1ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ff70:	4770      	bx	lr
   1ff72:	bf00      	nop
   1ff74:	10009560 	.word	0x10009560

0001ff78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1ff78:	b580      	push	{r7, lr}
   1ff7a:	b084      	sub	sp, #16
   1ff7c:	af00      	add	r7, sp, #0
   1ff7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1ff80:	f7ff fa7a 	bl	1f478 <xTaskGetTickCount>
   1ff84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   1ff86:	4b0b      	ldr	r3, [pc, #44]	; (1ffb4 <prvSampleTimeNow+0x3c>)
   1ff88:	681b      	ldr	r3, [r3, #0]
   1ff8a:	68fa      	ldr	r2, [r7, #12]
   1ff8c:	429a      	cmp	r2, r3
   1ff8e:	d205      	bcs.n	1ff9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   1ff90:	f000 f8e6 	bl	20160 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   1ff94:	687b      	ldr	r3, [r7, #4]
   1ff96:	2201      	movs	r2, #1
   1ff98:	601a      	str	r2, [r3, #0]
   1ff9a:	e002      	b.n	1ffa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1ff9c:	687b      	ldr	r3, [r7, #4]
   1ff9e:	2200      	movs	r2, #0
   1ffa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1ffa2:	4a04      	ldr	r2, [pc, #16]	; (1ffb4 <prvSampleTimeNow+0x3c>)
   1ffa4:	68fb      	ldr	r3, [r7, #12]
   1ffa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   1ffa8:	68fb      	ldr	r3, [r7, #12]
}
   1ffaa:	4618      	mov	r0, r3
   1ffac:	3710      	adds	r7, #16
   1ffae:	46bd      	mov	sp, r7
   1ffb0:	bd80      	pop	{r7, pc}
   1ffb2:	bf00      	nop
   1ffb4:	10009570 	.word	0x10009570

0001ffb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1ffb8:	b580      	push	{r7, lr}
   1ffba:	b086      	sub	sp, #24
   1ffbc:	af00      	add	r7, sp, #0
   1ffbe:	60f8      	str	r0, [r7, #12]
   1ffc0:	60b9      	str	r1, [r7, #8]
   1ffc2:	607a      	str	r2, [r7, #4]
   1ffc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1ffc6:	2300      	movs	r3, #0
   1ffc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1ffca:	68fb      	ldr	r3, [r7, #12]
   1ffcc:	68ba      	ldr	r2, [r7, #8]
   1ffce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1ffd0:	68fb      	ldr	r3, [r7, #12]
   1ffd2:	68fa      	ldr	r2, [r7, #12]
   1ffd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1ffd6:	68ba      	ldr	r2, [r7, #8]
   1ffd8:	687b      	ldr	r3, [r7, #4]
   1ffda:	429a      	cmp	r2, r3
   1ffdc:	d812      	bhi.n	20004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ffde:	687a      	ldr	r2, [r7, #4]
   1ffe0:	683b      	ldr	r3, [r7, #0]
   1ffe2:	1ad2      	subs	r2, r2, r3
   1ffe4:	68fb      	ldr	r3, [r7, #12]
   1ffe6:	699b      	ldr	r3, [r3, #24]
   1ffe8:	429a      	cmp	r2, r3
   1ffea:	d302      	bcc.n	1fff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1ffec:	2301      	movs	r3, #1
   1ffee:	617b      	str	r3, [r7, #20]
   1fff0:	e01b      	b.n	2002a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1fff2:	4b10      	ldr	r3, [pc, #64]	; (20034 <prvInsertTimerInActiveList+0x7c>)
   1fff4:	681a      	ldr	r2, [r3, #0]
   1fff6:	68fb      	ldr	r3, [r7, #12]
   1fff8:	3304      	adds	r3, #4
   1fffa:	4619      	mov	r1, r3
   1fffc:	4610      	mov	r0, r2
   1fffe:	f7fe fb2e 	bl	1e65e <vListInsert>
   20002:	e012      	b.n	2002a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   20004:	687a      	ldr	r2, [r7, #4]
   20006:	683b      	ldr	r3, [r7, #0]
   20008:	429a      	cmp	r2, r3
   2000a:	d206      	bcs.n	2001a <prvInsertTimerInActiveList+0x62>
   2000c:	68ba      	ldr	r2, [r7, #8]
   2000e:	683b      	ldr	r3, [r7, #0]
   20010:	429a      	cmp	r2, r3
   20012:	d302      	bcc.n	2001a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   20014:	2301      	movs	r3, #1
   20016:	617b      	str	r3, [r7, #20]
   20018:	e007      	b.n	2002a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   2001a:	4b07      	ldr	r3, [pc, #28]	; (20038 <prvInsertTimerInActiveList+0x80>)
   2001c:	681a      	ldr	r2, [r3, #0]
   2001e:	68fb      	ldr	r3, [r7, #12]
   20020:	3304      	adds	r3, #4
   20022:	4619      	mov	r1, r3
   20024:	4610      	mov	r0, r2
   20026:	f7fe fb1a 	bl	1e65e <vListInsert>
		}
	}

	return xProcessTimerNow;
   2002a:	697b      	ldr	r3, [r7, #20]
}
   2002c:	4618      	mov	r0, r3
   2002e:	3718      	adds	r7, #24
   20030:	46bd      	mov	sp, r7
   20032:	bd80      	pop	{r7, pc}
   20034:	10009564 	.word	0x10009564
   20038:	10009560 	.word	0x10009560

0002003c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   2003c:	b580      	push	{r7, lr}
   2003e:	b08c      	sub	sp, #48	; 0x30
   20040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   20042:	e07a      	b.n	2013a <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   20044:	68bb      	ldr	r3, [r7, #8]
   20046:	2b00      	cmp	r3, #0
   20048:	da0f      	bge.n	2006a <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   2004a:	f107 0308 	add.w	r3, r7, #8
   2004e:	3304      	adds	r3, #4
   20050:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   20052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20054:	2b00      	cmp	r3, #0
   20056:	d100      	bne.n	2005a <prvProcessReceivedCommands+0x1e>
   20058:	e7fe      	b.n	20058 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   2005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2005c:	681b      	ldr	r3, [r3, #0]
   2005e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20060:	6850      	ldr	r0, [r2, #4]
   20062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20064:	6892      	ldr	r2, [r2, #8]
   20066:	4611      	mov	r1, r2
   20068:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   2006a:	68bb      	ldr	r3, [r7, #8]
   2006c:	2b00      	cmp	r3, #0
   2006e:	db64      	blt.n	2013a <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   20070:	693b      	ldr	r3, [r7, #16]
   20072:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   20074:	6a3b      	ldr	r3, [r7, #32]
   20076:	695b      	ldr	r3, [r3, #20]
   20078:	2b00      	cmp	r3, #0
   2007a:	d004      	beq.n	20086 <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   2007c:	6a3b      	ldr	r3, [r7, #32]
   2007e:	3304      	adds	r3, #4
   20080:	4618      	mov	r0, r3
   20082:	f7fe fb25 	bl	1e6d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   20086:	1d3b      	adds	r3, r7, #4
   20088:	4618      	mov	r0, r3
   2008a:	f7ff ff75 	bl	1ff78 <prvSampleTimeNow>
   2008e:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
   20090:	68bb      	ldr	r3, [r7, #8]
   20092:	2b09      	cmp	r3, #9
   20094:	d850      	bhi.n	20138 <prvProcessReceivedCommands+0xfc>
   20096:	a201      	add	r2, pc, #4	; (adr r2, 2009c <prvProcessReceivedCommands+0x60>)
   20098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2009c:	000200c5 	.word	0x000200c5
   200a0:	000200c5 	.word	0x000200c5
   200a4:	000200c5 	.word	0x000200c5
   200a8:	0002013b 	.word	0x0002013b
   200ac:	0002010d 	.word	0x0002010d
   200b0:	00020131 	.word	0x00020131
   200b4:	000200c5 	.word	0x000200c5
   200b8:	000200c5 	.word	0x000200c5
   200bc:	0002013b 	.word	0x0002013b
   200c0:	0002010d 	.word	0x0002010d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   200c4:	68fa      	ldr	r2, [r7, #12]
   200c6:	6a3b      	ldr	r3, [r7, #32]
   200c8:	699b      	ldr	r3, [r3, #24]
   200ca:	18d1      	adds	r1, r2, r3
   200cc:	68fb      	ldr	r3, [r7, #12]
   200ce:	69fa      	ldr	r2, [r7, #28]
   200d0:	6a38      	ldr	r0, [r7, #32]
   200d2:	f7ff ff71 	bl	1ffb8 <prvInsertTimerInActiveList>
   200d6:	4603      	mov	r3, r0
   200d8:	2b00      	cmp	r3, #0
   200da:	d02e      	beq.n	2013a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   200dc:	6a3b      	ldr	r3, [r7, #32]
   200de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   200e0:	6a38      	ldr	r0, [r7, #32]
   200e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   200e4:	6a3b      	ldr	r3, [r7, #32]
   200e6:	69db      	ldr	r3, [r3, #28]
   200e8:	2b01      	cmp	r3, #1
   200ea:	d126      	bne.n	2013a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   200ec:	68fa      	ldr	r2, [r7, #12]
   200ee:	6a3b      	ldr	r3, [r7, #32]
   200f0:	699b      	ldr	r3, [r3, #24]
   200f2:	441a      	add	r2, r3
   200f4:	2300      	movs	r3, #0
   200f6:	9300      	str	r3, [sp, #0]
   200f8:	2300      	movs	r3, #0
   200fa:	2100      	movs	r1, #0
   200fc:	6a38      	ldr	r0, [r7, #32]
   200fe:	f7ff fe3d 	bl	1fd7c <xTimerGenericCommand>
   20102:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
   20104:	69bb      	ldr	r3, [r7, #24]
   20106:	2b00      	cmp	r3, #0
   20108:	d117      	bne.n	2013a <prvProcessReceivedCommands+0xfe>
   2010a:	e7fe      	b.n	2010a <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   2010c:	68fa      	ldr	r2, [r7, #12]
   2010e:	6a3b      	ldr	r3, [r7, #32]
   20110:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   20112:	6a3b      	ldr	r3, [r7, #32]
   20114:	699b      	ldr	r3, [r3, #24]
   20116:	2b00      	cmp	r3, #0
   20118:	d100      	bne.n	2011c <prvProcessReceivedCommands+0xe0>
   2011a:	e7fe      	b.n	2011a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2011c:	6a3b      	ldr	r3, [r7, #32]
   2011e:	699a      	ldr	r2, [r3, #24]
   20120:	69fb      	ldr	r3, [r7, #28]
   20122:	18d1      	adds	r1, r2, r3
   20124:	69fb      	ldr	r3, [r7, #28]
   20126:	69fa      	ldr	r2, [r7, #28]
   20128:	6a38      	ldr	r0, [r7, #32]
   2012a:	f7ff ff45 	bl	1ffb8 <prvInsertTimerInActiveList>
					break;
   2012e:	e004      	b.n	2013a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   20130:	6a38      	ldr	r0, [r7, #32]
   20132:	f7fe f84d 	bl	1e1d0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   20136:	e000      	b.n	2013a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
   20138:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2013a:	4b08      	ldr	r3, [pc, #32]	; (2015c <prvProcessReceivedCommands+0x120>)
   2013c:	681b      	ldr	r3, [r3, #0]
   2013e:	f107 0108 	add.w	r1, r7, #8
   20142:	2200      	movs	r2, #0
   20144:	4618      	mov	r0, r3
   20146:	f7fe fced 	bl	1eb24 <xQueueReceive>
   2014a:	4603      	mov	r3, r0
   2014c:	2b00      	cmp	r3, #0
   2014e:	f47f af79 	bne.w	20044 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   20152:	bf00      	nop
   20154:	3728      	adds	r7, #40	; 0x28
   20156:	46bd      	mov	sp, r7
   20158:	bd80      	pop	{r7, pc}
   2015a:	bf00      	nop
   2015c:	10009568 	.word	0x10009568

00020160 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   20160:	b580      	push	{r7, lr}
   20162:	b088      	sub	sp, #32
   20164:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   20166:	e03b      	b.n	201e0 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   20168:	4b27      	ldr	r3, [pc, #156]	; (20208 <prvSwitchTimerLists+0xa8>)
   2016a:	681b      	ldr	r3, [r3, #0]
   2016c:	68db      	ldr	r3, [r3, #12]
   2016e:	681b      	ldr	r3, [r3, #0]
   20170:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   20172:	4b25      	ldr	r3, [pc, #148]	; (20208 <prvSwitchTimerLists+0xa8>)
   20174:	681b      	ldr	r3, [r3, #0]
   20176:	68db      	ldr	r3, [r3, #12]
   20178:	68db      	ldr	r3, [r3, #12]
   2017a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   2017c:	693b      	ldr	r3, [r7, #16]
   2017e:	3304      	adds	r3, #4
   20180:	4618      	mov	r0, r3
   20182:	f7fe faa5 	bl	1e6d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20186:	693b      	ldr	r3, [r7, #16]
   20188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2018a:	6938      	ldr	r0, [r7, #16]
   2018c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   2018e:	693b      	ldr	r3, [r7, #16]
   20190:	69db      	ldr	r3, [r3, #28]
   20192:	2b01      	cmp	r3, #1
   20194:	d124      	bne.n	201e0 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   20196:	693b      	ldr	r3, [r7, #16]
   20198:	699a      	ldr	r2, [r3, #24]
   2019a:	697b      	ldr	r3, [r7, #20]
   2019c:	4413      	add	r3, r2
   2019e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   201a0:	68fa      	ldr	r2, [r7, #12]
   201a2:	697b      	ldr	r3, [r7, #20]
   201a4:	429a      	cmp	r2, r3
   201a6:	d90e      	bls.n	201c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   201a8:	693b      	ldr	r3, [r7, #16]
   201aa:	68fa      	ldr	r2, [r7, #12]
   201ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   201ae:	693b      	ldr	r3, [r7, #16]
   201b0:	693a      	ldr	r2, [r7, #16]
   201b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   201b4:	4b14      	ldr	r3, [pc, #80]	; (20208 <prvSwitchTimerLists+0xa8>)
   201b6:	681a      	ldr	r2, [r3, #0]
   201b8:	693b      	ldr	r3, [r7, #16]
   201ba:	3304      	adds	r3, #4
   201bc:	4619      	mov	r1, r3
   201be:	4610      	mov	r0, r2
   201c0:	f7fe fa4d 	bl	1e65e <vListInsert>
   201c4:	e00c      	b.n	201e0 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   201c6:	2300      	movs	r3, #0
   201c8:	9300      	str	r3, [sp, #0]
   201ca:	2300      	movs	r3, #0
   201cc:	697a      	ldr	r2, [r7, #20]
   201ce:	2100      	movs	r1, #0
   201d0:	6938      	ldr	r0, [r7, #16]
   201d2:	f7ff fdd3 	bl	1fd7c <xTimerGenericCommand>
   201d6:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   201d8:	68bb      	ldr	r3, [r7, #8]
   201da:	2b00      	cmp	r3, #0
   201dc:	d100      	bne.n	201e0 <prvSwitchTimerLists+0x80>
   201de:	e7fe      	b.n	201de <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   201e0:	4b09      	ldr	r3, [pc, #36]	; (20208 <prvSwitchTimerLists+0xa8>)
   201e2:	681b      	ldr	r3, [r3, #0]
   201e4:	681b      	ldr	r3, [r3, #0]
   201e6:	2b00      	cmp	r3, #0
   201e8:	d1be      	bne.n	20168 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   201ea:	4b07      	ldr	r3, [pc, #28]	; (20208 <prvSwitchTimerLists+0xa8>)
   201ec:	681b      	ldr	r3, [r3, #0]
   201ee:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   201f0:	4b06      	ldr	r3, [pc, #24]	; (2020c <prvSwitchTimerLists+0xac>)
   201f2:	681b      	ldr	r3, [r3, #0]
   201f4:	4a04      	ldr	r2, [pc, #16]	; (20208 <prvSwitchTimerLists+0xa8>)
   201f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   201f8:	4a04      	ldr	r2, [pc, #16]	; (2020c <prvSwitchTimerLists+0xac>)
   201fa:	687b      	ldr	r3, [r7, #4]
   201fc:	6013      	str	r3, [r2, #0]
}
   201fe:	bf00      	nop
   20200:	3718      	adds	r7, #24
   20202:	46bd      	mov	sp, r7
   20204:	bd80      	pop	{r7, pc}
   20206:	bf00      	nop
   20208:	10009560 	.word	0x10009560
   2020c:	10009564 	.word	0x10009564

00020210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   20210:	b580      	push	{r7, lr}
   20212:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   20214:	f7fa feb0 	bl	1af78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   20218:	4b0d      	ldr	r3, [pc, #52]	; (20250 <prvCheckForValidListAndQueue+0x40>)
   2021a:	681b      	ldr	r3, [r3, #0]
   2021c:	2b00      	cmp	r3, #0
   2021e:	d113      	bne.n	20248 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
   20220:	480c      	ldr	r0, [pc, #48]	; (20254 <prvCheckForValidListAndQueue+0x44>)
   20222:	f7fe f9cb 	bl	1e5bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   20226:	480c      	ldr	r0, [pc, #48]	; (20258 <prvCheckForValidListAndQueue+0x48>)
   20228:	f7fe f9c8 	bl	1e5bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   2022c:	4b0b      	ldr	r3, [pc, #44]	; (2025c <prvCheckForValidListAndQueue+0x4c>)
   2022e:	4a09      	ldr	r2, [pc, #36]	; (20254 <prvCheckForValidListAndQueue+0x44>)
   20230:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   20232:	4b0b      	ldr	r3, [pc, #44]	; (20260 <prvCheckForValidListAndQueue+0x50>)
   20234:	4a08      	ldr	r2, [pc, #32]	; (20258 <prvCheckForValidListAndQueue+0x48>)
   20236:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   20238:	2200      	movs	r2, #0
   2023a:	2110      	movs	r1, #16
   2023c:	2005      	movs	r0, #5
   2023e:	f7fe facf 	bl	1e7e0 <xQueueGenericCreate>
   20242:	4602      	mov	r2, r0
   20244:	4b02      	ldr	r3, [pc, #8]	; (20250 <prvCheckForValidListAndQueue+0x40>)
   20246:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20248:	f7fa febc 	bl	1afc4 <vPortExitCritical>
}
   2024c:	bf00      	nop
   2024e:	bd80      	pop	{r7, pc}
   20250:	10009568 	.word	0x10009568
   20254:	10009538 	.word	0x10009538
   20258:	1000954c 	.word	0x1000954c
   2025c:	10009560 	.word	0x10009560
   20260:	10009564 	.word	0x10009564

00020264 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   20264:	b580      	push	{r7, lr}
   20266:	b08a      	sub	sp, #40	; 0x28
   20268:	af00      	add	r7, sp, #0
   2026a:	60f8      	str	r0, [r7, #12]
   2026c:	60b9      	str	r1, [r7, #8]
   2026e:	607a      	str	r2, [r7, #4]
   20270:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   20272:	f06f 0301 	mvn.w	r3, #1
   20276:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   20278:	68fb      	ldr	r3, [r7, #12]
   2027a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   2027c:	68bb      	ldr	r3, [r7, #8]
   2027e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   20280:	687b      	ldr	r3, [r7, #4]
   20282:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20284:	4b06      	ldr	r3, [pc, #24]	; (202a0 <xTimerPendFunctionCallFromISR+0x3c>)
   20286:	6818      	ldr	r0, [r3, #0]
   20288:	f107 0114 	add.w	r1, r7, #20
   2028c:	2300      	movs	r3, #0
   2028e:	683a      	ldr	r2, [r7, #0]
   20290:	f7fe fbce 	bl	1ea30 <xQueueGenericSendFromISR>
   20294:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   20296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
   20298:	4618      	mov	r0, r3
   2029a:	3728      	adds	r7, #40	; 0x28
   2029c:	46bd      	mov	sp, r7
   2029e:	bd80      	pop	{r7, pc}
   202a0:	10009568 	.word	0x10009568

000202a4 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   202a4:	4811      	ldr	r0, [pc, #68]	; (202ec <zero_loop+0x12>)
   202a6:	4912      	ldr	r1, [pc, #72]	; (202f0 <zero_loop+0x16>)
   202a8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   202aa:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   202ae:	4811      	ldr	r0, [pc, #68]	; (202f4 <zero_loop+0x1a>)
   202b0:	6801      	ldr	r1, [r0, #0]
   202b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   202b6:	6001      	str	r1, [r0, #0]
   202b8:	f3bf 8f4f 	dsb	sy
   202bc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   202c0:	480d      	ldr	r0, [pc, #52]	; (202f8 <zero_loop+0x1e>)
   202c2:	490e      	ldr	r1, [pc, #56]	; (202fc <zero_loop+0x22>)
   202c4:	4a0e      	ldr	r2, [pc, #56]	; (20300 <zero_loop+0x26>)

000202c6 <copy_loop>:
   202c6:	f850 3b04 	ldr.w	r3, [r0], #4
   202ca:	f841 3b04 	str.w	r3, [r1], #4
   202ce:	4291      	cmp	r1, r2
   202d0:	dbf9      	blt.n	202c6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   202d2:	480c      	ldr	r0, [pc, #48]	; (20304 <zero_loop+0x2a>)
   202d4:	490c      	ldr	r1, [pc, #48]	; (20308 <zero_loop+0x2e>)
   202d6:	f04f 0200 	mov.w	r2, #0

000202da <zero_loop>:
   202da:	4288      	cmp	r0, r1
   202dc:	bfb8      	it	lt
   202de:	f840 2b04 	strlt.w	r2, [r0], #4
   202e2:	dbfa      	blt.n	202da <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   202e4:	f7f2 fec6 	bl	13074 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   202e8:	be00      	bkpt	0x0000
}
   202ea:	bf00      	nop
   202ec:	e000ed08 	.word	0xe000ed08
   202f0:	0000c000 	.word	0x0000c000
   202f4:	e000ed88 	.word	0xe000ed88
   202f8:	0002838c 	.word	0x0002838c
   202fc:	10002b00 	.word	0x10002b00
   20300:	100039d4 	.word	0x100039d4
   20304:	100039d4 	.word	0x100039d4
   20308:	1000b528 	.word	0x1000b528

0002030c <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   2030c:	b480      	push	{r7}
   2030e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   20310:	e7fe      	b.n	20310 <NMI_Handler+0x4>

00020312 <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   20312:	b480      	push	{r7}
   20314:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   20316:	e7fe      	b.n	20316 <BusFault_Handler+0x4>

00020318 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   20318:	b480      	push	{r7}
   2031a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   2031c:	e7fe      	b.n	2031c <DebugMon_Handler+0x4>
	...

00020320 <uECC_vli_sub>:
   20320:	f1c3 0308 	rsb	r3, r3, #8
   20324:	00db      	lsls	r3, r3, #3
   20326:	b470      	push	{r4, r5, r6}
   20328:	3301      	adds	r3, #1
   2032a:	2400      	movs	r4, #0
   2032c:	a503      	add	r5, pc, #12	; (adr r5, 2033c <uECC_vli_sub+0x1c>)
   2032e:	bf00      	nop
   20330:	195b      	adds	r3, r3, r5
   20332:	c920      	ldmia	r1!, {r5}
   20334:	ca40      	ldmia	r2!, {r6}
   20336:	1bad      	subs	r5, r5, r6
   20338:	c020      	stmia	r0!, {r5}
   2033a:	4718      	bx	r3
   2033c:	c920      	ldmia	r1!, {r5}
   2033e:	ca40      	ldmia	r2!, {r6}
   20340:	41b5      	sbcs	r5, r6
   20342:	c020      	stmia	r0!, {r5}
   20344:	c920      	ldmia	r1!, {r5}
   20346:	ca40      	ldmia	r2!, {r6}
   20348:	41b5      	sbcs	r5, r6
   2034a:	c020      	stmia	r0!, {r5}
   2034c:	c920      	ldmia	r1!, {r5}
   2034e:	ca40      	ldmia	r2!, {r6}
   20350:	41b5      	sbcs	r5, r6
   20352:	c020      	stmia	r0!, {r5}
   20354:	c920      	ldmia	r1!, {r5}
   20356:	ca40      	ldmia	r2!, {r6}
   20358:	41b5      	sbcs	r5, r6
   2035a:	c020      	stmia	r0!, {r5}
   2035c:	c920      	ldmia	r1!, {r5}
   2035e:	ca40      	ldmia	r2!, {r6}
   20360:	41b5      	sbcs	r5, r6
   20362:	c020      	stmia	r0!, {r5}
   20364:	c920      	ldmia	r1!, {r5}
   20366:	ca40      	ldmia	r2!, {r6}
   20368:	41b5      	sbcs	r5, r6
   2036a:	c020      	stmia	r0!, {r5}
   2036c:	c920      	ldmia	r1!, {r5}
   2036e:	ca40      	ldmia	r2!, {r6}
   20370:	41b5      	sbcs	r5, r6
   20372:	c020      	stmia	r0!, {r5}
   20374:	4164      	adcs	r4, r4
   20376:	fab4 f084 	clz	r0, r4
   2037a:	0940      	lsrs	r0, r0, #5
   2037c:	bc70      	pop	{r4, r5, r6}
   2037e:	4770      	bx	lr

00020380 <uECC_vli_mult>:
   20380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20384:	b408      	push	{r3}
   20386:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
   20388:	b404      	push	{r2}
   2038a:	f851 2b04 	ldr.w	r2, [r1], #4
   2038e:	fba3 8902 	umull	r8, r9, r3, r2
   20392:	f840 8b04 	str.w	r8, [r0], #4
   20396:	f04f 0a00 	mov.w	sl, #0
   2039a:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2039e:	f04f 0b00 	mov.w	fp, #0
   203a2:	fbe5 ab62 	umaal	sl, fp, r5, r2
   203a6:	f04f 0c00 	mov.w	ip, #0
   203aa:	fbe6 bc62 	umaal	fp, ip, r6, r2
   203ae:	f04f 0e00 	mov.w	lr, #0
   203b2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   203b6:	f851 2b04 	ldr.w	r2, [r1], #4
   203ba:	f04f 0800 	mov.w	r8, #0
   203be:	fbe3 8962 	umaal	r8, r9, r3, r2
   203c2:	f840 8b04 	str.w	r8, [r0], #4
   203c6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   203ca:	fbe5 ab62 	umaal	sl, fp, r5, r2
   203ce:	fbe6 bc62 	umaal	fp, ip, r6, r2
   203d2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   203d6:	f851 2b04 	ldr.w	r2, [r1], #4
   203da:	f04f 0800 	mov.w	r8, #0
   203de:	fbe3 8962 	umaal	r8, r9, r3, r2
   203e2:	f840 8b04 	str.w	r8, [r0], #4
   203e6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   203ea:	fbe5 ab62 	umaal	sl, fp, r5, r2
   203ee:	fbe6 bc62 	umaal	fp, ip, r6, r2
   203f2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   203f6:	f851 2b04 	ldr.w	r2, [r1], #4
   203fa:	f04f 0800 	mov.w	r8, #0
   203fe:	fbe3 8962 	umaal	r8, r9, r3, r2
   20402:	f840 8b04 	str.w	r8, [r0], #4
   20406:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2040a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2040e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20412:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20416:	f851 2b04 	ldr.w	r2, [r1], #4
   2041a:	f04f 0800 	mov.w	r8, #0
   2041e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20422:	f840 8b04 	str.w	r8, [r0], #4
   20426:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2042a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2042e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20432:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20436:	f840 9b04 	str.w	r9, [r0], #4
   2043a:	f840 ab04 	str.w	sl, [r0], #4
   2043e:	f840 bb04 	str.w	fp, [r0], #4
   20442:	f840 cb04 	str.w	ip, [r0], #4
   20446:	f840 eb04 	str.w	lr, [r0], #4
   2044a:	bc0c      	pop	{r2, r3}
   2044c:	2b05      	cmp	r3, #5
   2044e:	f000 811e 	beq.w	2068e <uECC_vli_mult+0x30e>
   20452:	680c      	ldr	r4, [r1, #0]
   20454:	f1a0 0014 	sub.w	r0, r0, #20
   20458:	f1a1 0114 	sub.w	r1, r1, #20
   2045c:	f1a2 0214 	sub.w	r2, r2, #20
   20460:	f852 eb04 	ldr.w	lr, [r2], #4
   20464:	f04f 0500 	mov.w	r5, #0
   20468:	f850 6b04 	ldr.w	r6, [r0], #4
   2046c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20470:	f852 eb04 	ldr.w	lr, [r2], #4
   20474:	f850 7b04 	ldr.w	r7, [r0], #4
   20478:	fbe4 676e 	umaal	r6, r7, r4, lr
   2047c:	f852 eb04 	ldr.w	lr, [r2], #4
   20480:	f850 8b04 	ldr.w	r8, [r0], #4
   20484:	fbe4 786e 	umaal	r7, r8, r4, lr
   20488:	f852 eb04 	ldr.w	lr, [r2], #4
   2048c:	f850 9b04 	ldr.w	r9, [r0], #4
   20490:	fbe4 896e 	umaal	r8, r9, r4, lr
   20494:	f852 eb04 	ldr.w	lr, [r2], #4
   20498:	f850 ab04 	ldr.w	sl, [r0], #4
   2049c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   204a0:	f1a0 0014 	sub.w	r0, r0, #20
   204a4:	f852 4b04 	ldr.w	r4, [r2], #4
   204a8:	f851 eb04 	ldr.w	lr, [r1], #4
   204ac:	f04f 0c00 	mov.w	ip, #0
   204b0:	fbe4 c56e 	umaal	ip, r5, r4, lr
   204b4:	f840 cb04 	str.w	ip, [r0], #4
   204b8:	f851 eb04 	ldr.w	lr, [r1], #4
   204bc:	fbe4 566e 	umaal	r5, r6, r4, lr
   204c0:	f840 5b04 	str.w	r5, [r0], #4
   204c4:	f851 eb04 	ldr.w	lr, [r1], #4
   204c8:	fbe4 676e 	umaal	r6, r7, r4, lr
   204cc:	f840 6b04 	str.w	r6, [r0], #4
   204d0:	f851 eb04 	ldr.w	lr, [r1], #4
   204d4:	fbe4 786e 	umaal	r7, r8, r4, lr
   204d8:	f840 7b04 	str.w	r7, [r0], #4
   204dc:	f851 eb04 	ldr.w	lr, [r1], #4
   204e0:	fbe4 896e 	umaal	r8, r9, r4, lr
   204e4:	f840 8b04 	str.w	r8, [r0], #4
   204e8:	f851 eb04 	ldr.w	lr, [r1], #4
   204ec:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   204f0:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   204f4:	2b06      	cmp	r3, #6
   204f6:	f000 80ca 	beq.w	2068e <uECC_vli_mult+0x30e>
   204fa:	680c      	ldr	r4, [r1, #0]
   204fc:	f1a0 0018 	sub.w	r0, r0, #24
   20500:	f1a1 0118 	sub.w	r1, r1, #24
   20504:	f1a2 0218 	sub.w	r2, r2, #24
   20508:	f852 eb04 	ldr.w	lr, [r2], #4
   2050c:	f04f 0500 	mov.w	r5, #0
   20510:	f850 6b04 	ldr.w	r6, [r0], #4
   20514:	fbe4 566e 	umaal	r5, r6, r4, lr
   20518:	f852 eb04 	ldr.w	lr, [r2], #4
   2051c:	f850 7b04 	ldr.w	r7, [r0], #4
   20520:	fbe4 676e 	umaal	r6, r7, r4, lr
   20524:	f852 eb04 	ldr.w	lr, [r2], #4
   20528:	f850 8b04 	ldr.w	r8, [r0], #4
   2052c:	fbe4 786e 	umaal	r7, r8, r4, lr
   20530:	f852 eb04 	ldr.w	lr, [r2], #4
   20534:	f850 9b04 	ldr.w	r9, [r0], #4
   20538:	fbe4 896e 	umaal	r8, r9, r4, lr
   2053c:	f852 eb04 	ldr.w	lr, [r2], #4
   20540:	f850 ab04 	ldr.w	sl, [r0], #4
   20544:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20548:	f852 eb04 	ldr.w	lr, [r2], #4
   2054c:	f850 bb04 	ldr.w	fp, [r0], #4
   20550:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20554:	f1a0 0018 	sub.w	r0, r0, #24
   20558:	f852 4b04 	ldr.w	r4, [r2], #4
   2055c:	f851 eb04 	ldr.w	lr, [r1], #4
   20560:	f04f 0c00 	mov.w	ip, #0
   20564:	fbe4 c56e 	umaal	ip, r5, r4, lr
   20568:	f840 cb04 	str.w	ip, [r0], #4
   2056c:	f851 eb04 	ldr.w	lr, [r1], #4
   20570:	fbe4 566e 	umaal	r5, r6, r4, lr
   20574:	f840 5b04 	str.w	r5, [r0], #4
   20578:	f851 eb04 	ldr.w	lr, [r1], #4
   2057c:	fbe4 676e 	umaal	r6, r7, r4, lr
   20580:	f840 6b04 	str.w	r6, [r0], #4
   20584:	f851 eb04 	ldr.w	lr, [r1], #4
   20588:	fbe4 786e 	umaal	r7, r8, r4, lr
   2058c:	f840 7b04 	str.w	r7, [r0], #4
   20590:	f851 eb04 	ldr.w	lr, [r1], #4
   20594:	fbe4 896e 	umaal	r8, r9, r4, lr
   20598:	f840 8b04 	str.w	r8, [r0], #4
   2059c:	f851 eb04 	ldr.w	lr, [r1], #4
   205a0:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   205a4:	f840 9b04 	str.w	r9, [r0], #4
   205a8:	f851 eb04 	ldr.w	lr, [r1], #4
   205ac:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   205b0:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   205b4:	2b07      	cmp	r3, #7
   205b6:	d06a      	beq.n	2068e <uECC_vli_mult+0x30e>
   205b8:	b408      	push	{r3}
   205ba:	680c      	ldr	r4, [r1, #0]
   205bc:	f1a0 001c 	sub.w	r0, r0, #28
   205c0:	f1a1 011c 	sub.w	r1, r1, #28
   205c4:	f1a2 021c 	sub.w	r2, r2, #28
   205c8:	f852 eb04 	ldr.w	lr, [r2], #4
   205cc:	f04f 0500 	mov.w	r5, #0
   205d0:	f850 6b04 	ldr.w	r6, [r0], #4
   205d4:	fbe4 566e 	umaal	r5, r6, r4, lr
   205d8:	f852 eb04 	ldr.w	lr, [r2], #4
   205dc:	f850 7b04 	ldr.w	r7, [r0], #4
   205e0:	fbe4 676e 	umaal	r6, r7, r4, lr
   205e4:	f852 eb04 	ldr.w	lr, [r2], #4
   205e8:	f850 8b04 	ldr.w	r8, [r0], #4
   205ec:	fbe4 786e 	umaal	r7, r8, r4, lr
   205f0:	f852 eb04 	ldr.w	lr, [r2], #4
   205f4:	f850 9b04 	ldr.w	r9, [r0], #4
   205f8:	fbe4 896e 	umaal	r8, r9, r4, lr
   205fc:	f852 eb04 	ldr.w	lr, [r2], #4
   20600:	f850 ab04 	ldr.w	sl, [r0], #4
   20604:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20608:	f852 eb04 	ldr.w	lr, [r2], #4
   2060c:	f850 bb04 	ldr.w	fp, [r0], #4
   20610:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20614:	f852 eb04 	ldr.w	lr, [r2], #4
   20618:	f850 cb04 	ldr.w	ip, [r0], #4
   2061c:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   20620:	f1a0 001c 	sub.w	r0, r0, #28
   20624:	f852 4b04 	ldr.w	r4, [r2], #4
   20628:	f851 eb04 	ldr.w	lr, [r1], #4
   2062c:	f04f 0300 	mov.w	r3, #0
   20630:	fbe4 356e 	umaal	r3, r5, r4, lr
   20634:	f840 3b04 	str.w	r3, [r0], #4
   20638:	f851 eb04 	ldr.w	lr, [r1], #4
   2063c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20640:	f840 5b04 	str.w	r5, [r0], #4
   20644:	f851 eb04 	ldr.w	lr, [r1], #4
   20648:	fbe4 676e 	umaal	r6, r7, r4, lr
   2064c:	f840 6b04 	str.w	r6, [r0], #4
   20650:	f851 eb04 	ldr.w	lr, [r1], #4
   20654:	fbe4 786e 	umaal	r7, r8, r4, lr
   20658:	f840 7b04 	str.w	r7, [r0], #4
   2065c:	f851 eb04 	ldr.w	lr, [r1], #4
   20660:	fbe4 896e 	umaal	r8, r9, r4, lr
   20664:	f840 8b04 	str.w	r8, [r0], #4
   20668:	f851 eb04 	ldr.w	lr, [r1], #4
   2066c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20670:	f840 9b04 	str.w	r9, [r0], #4
   20674:	f851 eb04 	ldr.w	lr, [r1], #4
   20678:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   2067c:	f840 ab04 	str.w	sl, [r0], #4
   20680:	f851 eb04 	ldr.w	lr, [r1], #4
   20684:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   20688:	e8a0 1800 	stmia.w	r0!, {fp, ip}
   2068c:	bc08      	pop	{r3}
   2068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20692:	bf00      	nop
	...

000206a0 <uECC_vli_modAdd>:
   206a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   206a2:	f99d c014 	ldrsb.w	ip, [sp, #20]
   206a6:	f1cc 0408 	rsb	r4, ip, #8
   206aa:	00e4      	lsls	r4, r4, #3
   206ac:	3401      	adds	r4, #1
   206ae:	469e      	mov	lr, r3
   206b0:	4623      	mov	r3, r4
   206b2:	4604      	mov	r4, r0
   206b4:	2700      	movs	r7, #0
   206b6:	a505      	add	r5, pc, #20	; (adr r5, 206cc <uECC_vli_modAdd+0x2c>)
   206b8:	f3af 8000 	nop.w
   206bc:	f3af 8000 	nop.w
   206c0:	195b      	adds	r3, r3, r5
   206c2:	c920      	ldmia	r1!, {r5}
   206c4:	ca40      	ldmia	r2!, {r6}
   206c6:	19ad      	adds	r5, r5, r6
   206c8:	c420      	stmia	r4!, {r5}
   206ca:	4718      	bx	r3
   206cc:	c920      	ldmia	r1!, {r5}
   206ce:	ca40      	ldmia	r2!, {r6}
   206d0:	4175      	adcs	r5, r6
   206d2:	c420      	stmia	r4!, {r5}
   206d4:	c920      	ldmia	r1!, {r5}
   206d6:	ca40      	ldmia	r2!, {r6}
   206d8:	4175      	adcs	r5, r6
   206da:	c420      	stmia	r4!, {r5}
   206dc:	c920      	ldmia	r1!, {r5}
   206de:	ca40      	ldmia	r2!, {r6}
   206e0:	4175      	adcs	r5, r6
   206e2:	c420      	stmia	r4!, {r5}
   206e4:	c920      	ldmia	r1!, {r5}
   206e6:	ca40      	ldmia	r2!, {r6}
   206e8:	4175      	adcs	r5, r6
   206ea:	c420      	stmia	r4!, {r5}
   206ec:	c920      	ldmia	r1!, {r5}
   206ee:	ca40      	ldmia	r2!, {r6}
   206f0:	4175      	adcs	r5, r6
   206f2:	c420      	stmia	r4!, {r5}
   206f4:	c920      	ldmia	r1!, {r5}
   206f6:	ca40      	ldmia	r2!, {r6}
   206f8:	4175      	adcs	r5, r6
   206fa:	c420      	stmia	r4!, {r5}
   206fc:	c920      	ldmia	r1!, {r5}
   206fe:	ca40      	ldmia	r2!, {r6}
   20700:	4175      	adcs	r5, r6
   20702:	c420      	stmia	r4!, {r5}
   20704:	417f      	adcs	r7, r7
   20706:	b9c7      	cbnz	r7, 2073a <uECC_vli_modAdd+0x9a>
   20708:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   2070c:	b25b      	sxtb	r3, r3
   2070e:	2b00      	cmp	r3, #0
   20710:	db13      	blt.n	2073a <uECC_vli_modAdd+0x9a>
   20712:	b21a      	sxth	r2, r3
   20714:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   20718:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   2071c:	4291      	cmp	r1, r2
   2071e:	d80b      	bhi.n	20738 <uECC_vli_modAdd+0x98>
   20720:	d30b      	bcc.n	2073a <uECC_vli_modAdd+0x9a>
   20722:	3b01      	subs	r3, #1
   20724:	b25b      	sxtb	r3, r3
   20726:	1c59      	adds	r1, r3, #1
   20728:	b21a      	sxth	r2, r3
   2072a:	d006      	beq.n	2073a <uECC_vli_modAdd+0x9a>
   2072c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   20730:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   20734:	4291      	cmp	r1, r2
   20736:	d9f3      	bls.n	20720 <uECC_vli_modAdd+0x80>
   20738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2073a:	4672      	mov	r2, lr
   2073c:	4663      	mov	r3, ip
   2073e:	4601      	mov	r1, r0
   20740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20744:	f7ff bdec 	b.w	20320 <uECC_vli_sub>
	...

00020750 <uECC_vli_modSub>:
   20750:	b5f0      	push	{r4, r5, r6, r7, lr}
   20752:	f99d 4014 	ldrsb.w	r4, [sp, #20]
   20756:	f1c4 0408 	rsb	r4, r4, #8
   2075a:	00e4      	lsls	r4, r4, #3
   2075c:	1c66      	adds	r6, r4, #1
   2075e:	4686      	mov	lr, r0
   20760:	469c      	mov	ip, r3
   20762:	4635      	mov	r5, r6
   20764:	4604      	mov	r4, r0
   20766:	2700      	movs	r7, #0
   20768:	a304      	add	r3, pc, #16	; (adr r3, 2077c <uECC_vli_modSub+0x2c>)
   2076a:	bf00      	nop
   2076c:	f3af 8000 	nop.w
   20770:	18ed      	adds	r5, r5, r3
   20772:	c908      	ldmia	r1!, {r3}
   20774:	ca01      	ldmia	r2!, {r0}
   20776:	1a1b      	subs	r3, r3, r0
   20778:	c408      	stmia	r4!, {r3}
   2077a:	4728      	bx	r5
   2077c:	c908      	ldmia	r1!, {r3}
   2077e:	ca01      	ldmia	r2!, {r0}
   20780:	4183      	sbcs	r3, r0
   20782:	c408      	stmia	r4!, {r3}
   20784:	c908      	ldmia	r1!, {r3}
   20786:	ca01      	ldmia	r2!, {r0}
   20788:	4183      	sbcs	r3, r0
   2078a:	c408      	stmia	r4!, {r3}
   2078c:	c908      	ldmia	r1!, {r3}
   2078e:	ca01      	ldmia	r2!, {r0}
   20790:	4183      	sbcs	r3, r0
   20792:	c408      	stmia	r4!, {r3}
   20794:	c908      	ldmia	r1!, {r3}
   20796:	ca01      	ldmia	r2!, {r0}
   20798:	4183      	sbcs	r3, r0
   2079a:	c408      	stmia	r4!, {r3}
   2079c:	c908      	ldmia	r1!, {r3}
   2079e:	ca01      	ldmia	r2!, {r0}
   207a0:	4183      	sbcs	r3, r0
   207a2:	c408      	stmia	r4!, {r3}
   207a4:	c908      	ldmia	r1!, {r3}
   207a6:	ca01      	ldmia	r2!, {r0}
   207a8:	4183      	sbcs	r3, r0
   207aa:	c408      	stmia	r4!, {r3}
   207ac:	c908      	ldmia	r1!, {r3}
   207ae:	ca01      	ldmia	r2!, {r0}
   207b0:	4183      	sbcs	r3, r0
   207b2:	c408      	stmia	r4!, {r3}
   207b4:	417f      	adcs	r7, r7
   207b6:	2f00      	cmp	r7, #0
   207b8:	d12d      	bne.n	20816 <uECC_vli_modSub+0xc6>
   207ba:	4670      	mov	r0, lr
   207bc:	4663      	mov	r3, ip
   207be:	4634      	mov	r4, r6
   207c0:	4672      	mov	r2, lr
   207c2:	2100      	movs	r1, #0
   207c4:	a505      	add	r5, pc, #20	; (adr r5, 207dc <uECC_vli_modSub+0x8c>)
   207c6:	bf00      	nop
   207c8:	f3af 8000 	nop.w
   207cc:	f3af 8000 	nop.w
   207d0:	1964      	adds	r4, r4, r5
   207d2:	ca20      	ldmia	r2!, {r5}
   207d4:	cb40      	ldmia	r3!, {r6}
   207d6:	19ad      	adds	r5, r5, r6
   207d8:	c020      	stmia	r0!, {r5}
   207da:	4720      	bx	r4
   207dc:	ca20      	ldmia	r2!, {r5}
   207de:	cb40      	ldmia	r3!, {r6}
   207e0:	4175      	adcs	r5, r6
   207e2:	c020      	stmia	r0!, {r5}
   207e4:	ca20      	ldmia	r2!, {r5}
   207e6:	cb40      	ldmia	r3!, {r6}
   207e8:	4175      	adcs	r5, r6
   207ea:	c020      	stmia	r0!, {r5}
   207ec:	ca20      	ldmia	r2!, {r5}
   207ee:	cb40      	ldmia	r3!, {r6}
   207f0:	4175      	adcs	r5, r6
   207f2:	c020      	stmia	r0!, {r5}
   207f4:	ca20      	ldmia	r2!, {r5}
   207f6:	cb40      	ldmia	r3!, {r6}
   207f8:	4175      	adcs	r5, r6
   207fa:	c020      	stmia	r0!, {r5}
   207fc:	ca20      	ldmia	r2!, {r5}
   207fe:	cb40      	ldmia	r3!, {r6}
   20800:	4175      	adcs	r5, r6
   20802:	c020      	stmia	r0!, {r5}
   20804:	ca20      	ldmia	r2!, {r5}
   20806:	cb40      	ldmia	r3!, {r6}
   20808:	4175      	adcs	r5, r6
   2080a:	c020      	stmia	r0!, {r5}
   2080c:	ca20      	ldmia	r2!, {r5}
   2080e:	cb40      	ldmia	r3!, {r6}
   20810:	4175      	adcs	r5, r6
   20812:	c020      	stmia	r0!, {r5}
   20814:	4149      	adcs	r1, r1
   20816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020820 <x_side_default>:
   20820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20824:	4693      	mov	fp, r2
   20826:	b09b      	sub	sp, #108	; 0x6c
   20828:	4604      	mov	r4, r0
   2082a:	4689      	mov	r9, r1
   2082c:	a802      	add	r0, sp, #8
   2082e:	2220      	movs	r2, #32
   20830:	2100      	movs	r1, #0
   20832:	f7eb fd93 	bl	c35c <memset>
   20836:	f99b 3000 	ldrsb.w	r3, [fp]
   2083a:	9301      	str	r3, [sp, #4]
   2083c:	464a      	mov	r2, r9
   2083e:	4649      	mov	r1, r9
   20840:	a80a      	add	r0, sp, #40	; 0x28
   20842:	2503      	movs	r5, #3
   20844:	461e      	mov	r6, r3
   20846:	9502      	str	r5, [sp, #8]
   20848:	f7ff fd9a 	bl	20380 <uECC_vli_mult>
   2084c:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   20850:	a90a      	add	r1, sp, #40	; 0x28
   20852:	4620      	mov	r0, r4
   20854:	4798      	blx	r3
   20856:	f1c6 0108 	rsb	r1, r6, #8
   2085a:	40a9      	lsls	r1, r5
   2085c:	f101 0801 	add.w	r8, r1, #1
   20860:	aa02      	add	r2, sp, #8
   20862:	4641      	mov	r1, r8
   20864:	f10b 0a04 	add.w	sl, fp, #4
   20868:	4623      	mov	r3, r4
   2086a:	4626      	mov	r6, r4
   2086c:	2000      	movs	r0, #0
   2086e:	a703      	add	r7, pc, #12	; (adr r7, 2087c <x_side_default+0x5c>)
   20870:	19c9      	adds	r1, r1, r7
   20872:	ce80      	ldmia	r6!, {r7}
   20874:	ca20      	ldmia	r2!, {r5}
   20876:	1b7f      	subs	r7, r7, r5
   20878:	c380      	stmia	r3!, {r7}
   2087a:	4708      	bx	r1
   2087c:	ce80      	ldmia	r6!, {r7}
   2087e:	ca20      	ldmia	r2!, {r5}
   20880:	41af      	sbcs	r7, r5
   20882:	c380      	stmia	r3!, {r7}
   20884:	ce80      	ldmia	r6!, {r7}
   20886:	ca20      	ldmia	r2!, {r5}
   20888:	41af      	sbcs	r7, r5
   2088a:	c380      	stmia	r3!, {r7}
   2088c:	ce80      	ldmia	r6!, {r7}
   2088e:	ca20      	ldmia	r2!, {r5}
   20890:	41af      	sbcs	r7, r5
   20892:	c380      	stmia	r3!, {r7}
   20894:	ce80      	ldmia	r6!, {r7}
   20896:	ca20      	ldmia	r2!, {r5}
   20898:	41af      	sbcs	r7, r5
   2089a:	c380      	stmia	r3!, {r7}
   2089c:	ce80      	ldmia	r6!, {r7}
   2089e:	ca20      	ldmia	r2!, {r5}
   208a0:	41af      	sbcs	r7, r5
   208a2:	c380      	stmia	r3!, {r7}
   208a4:	ce80      	ldmia	r6!, {r7}
   208a6:	ca20      	ldmia	r2!, {r5}
   208a8:	41af      	sbcs	r7, r5
   208aa:	c380      	stmia	r3!, {r7}
   208ac:	ce80      	ldmia	r6!, {r7}
   208ae:	ca20      	ldmia	r2!, {r5}
   208b0:	41af      	sbcs	r7, r5
   208b2:	c380      	stmia	r3!, {r7}
   208b4:	4140      	adcs	r0, r0
   208b6:	2800      	cmp	r0, #0
   208b8:	d12d      	bne.n	20916 <x_side_default+0xf6>
   208ba:	4623      	mov	r3, r4
   208bc:	4652      	mov	r2, sl
   208be:	4641      	mov	r1, r8
   208c0:	4620      	mov	r0, r4
   208c2:	2500      	movs	r5, #0
   208c4:	a605      	add	r6, pc, #20	; (adr r6, 208dc <x_side_default+0xbc>)
   208c6:	bf00      	nop
   208c8:	f3af 8000 	nop.w
   208cc:	f3af 8000 	nop.w
   208d0:	1989      	adds	r1, r1, r6
   208d2:	c840      	ldmia	r0!, {r6}
   208d4:	ca80      	ldmia	r2!, {r7}
   208d6:	19f6      	adds	r6, r6, r7
   208d8:	c340      	stmia	r3!, {r6}
   208da:	4708      	bx	r1
   208dc:	c840      	ldmia	r0!, {r6}
   208de:	ca80      	ldmia	r2!, {r7}
   208e0:	417e      	adcs	r6, r7
   208e2:	c340      	stmia	r3!, {r6}
   208e4:	c840      	ldmia	r0!, {r6}
   208e6:	ca80      	ldmia	r2!, {r7}
   208e8:	417e      	adcs	r6, r7
   208ea:	c340      	stmia	r3!, {r6}
   208ec:	c840      	ldmia	r0!, {r6}
   208ee:	ca80      	ldmia	r2!, {r7}
   208f0:	417e      	adcs	r6, r7
   208f2:	c340      	stmia	r3!, {r6}
   208f4:	c840      	ldmia	r0!, {r6}
   208f6:	ca80      	ldmia	r2!, {r7}
   208f8:	417e      	adcs	r6, r7
   208fa:	c340      	stmia	r3!, {r6}
   208fc:	c840      	ldmia	r0!, {r6}
   208fe:	ca80      	ldmia	r2!, {r7}
   20900:	417e      	adcs	r6, r7
   20902:	c340      	stmia	r3!, {r6}
   20904:	c840      	ldmia	r0!, {r6}
   20906:	ca80      	ldmia	r2!, {r7}
   20908:	417e      	adcs	r6, r7
   2090a:	c340      	stmia	r3!, {r6}
   2090c:	c840      	ldmia	r0!, {r6}
   2090e:	ca80      	ldmia	r2!, {r7}
   20910:	417e      	adcs	r6, r7
   20912:	c340      	stmia	r3!, {r6}
   20914:	416d      	adcs	r5, r5
   20916:	464a      	mov	r2, r9
   20918:	f99b 3000 	ldrsb.w	r3, [fp]
   2091c:	4621      	mov	r1, r4
   2091e:	a80a      	add	r0, sp, #40	; 0x28
   20920:	f7ff fd2e 	bl	20380 <uECC_vli_mult>
   20924:	a90a      	add	r1, sp, #40	; 0x28
   20926:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   2092a:	4620      	mov	r0, r4
   2092c:	4798      	blx	r3
   2092e:	4626      	mov	r6, r4
   20930:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   20934:	4641      	mov	r1, r8
   20936:	4622      	mov	r2, r4
   20938:	2000      	movs	r0, #0
   2093a:	a504      	add	r5, pc, #16	; (adr r5, 2094c <x_side_default+0x12c>)
   2093c:	f3af 8000 	nop.w
   20940:	1949      	adds	r1, r1, r5
   20942:	ce20      	ldmia	r6!, {r5}
   20944:	cb80      	ldmia	r3!, {r7}
   20946:	19ed      	adds	r5, r5, r7
   20948:	c220      	stmia	r2!, {r5}
   2094a:	4708      	bx	r1
   2094c:	ce20      	ldmia	r6!, {r5}
   2094e:	cb80      	ldmia	r3!, {r7}
   20950:	417d      	adcs	r5, r7
   20952:	c220      	stmia	r2!, {r5}
   20954:	ce20      	ldmia	r6!, {r5}
   20956:	cb80      	ldmia	r3!, {r7}
   20958:	417d      	adcs	r5, r7
   2095a:	c220      	stmia	r2!, {r5}
   2095c:	ce20      	ldmia	r6!, {r5}
   2095e:	cb80      	ldmia	r3!, {r7}
   20960:	417d      	adcs	r5, r7
   20962:	c220      	stmia	r2!, {r5}
   20964:	ce20      	ldmia	r6!, {r5}
   20966:	cb80      	ldmia	r3!, {r7}
   20968:	417d      	adcs	r5, r7
   2096a:	c220      	stmia	r2!, {r5}
   2096c:	ce20      	ldmia	r6!, {r5}
   2096e:	cb80      	ldmia	r3!, {r7}
   20970:	417d      	adcs	r5, r7
   20972:	c220      	stmia	r2!, {r5}
   20974:	ce20      	ldmia	r6!, {r5}
   20976:	cb80      	ldmia	r3!, {r7}
   20978:	417d      	adcs	r5, r7
   2097a:	c220      	stmia	r2!, {r5}
   2097c:	ce20      	ldmia	r6!, {r5}
   2097e:	cb80      	ldmia	r3!, {r7}
   20980:	417d      	adcs	r5, r7
   20982:	c220      	stmia	r2!, {r5}
   20984:	4140      	adcs	r0, r0
   20986:	b9d0      	cbnz	r0, 209be <x_side_default+0x19e>
   20988:	9b01      	ldr	r3, [sp, #4]
   2098a:	3b01      	subs	r3, #1
   2098c:	b25b      	sxtb	r3, r3
   2098e:	2b00      	cmp	r3, #0
   20990:	db15      	blt.n	209be <x_side_default+0x19e>
   20992:	b21a      	sxth	r2, r3
   20994:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   20998:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2099c:	4291      	cmp	r1, r2
   2099e:	d80b      	bhi.n	209b8 <x_side_default+0x198>
   209a0:	d30d      	bcc.n	209be <x_side_default+0x19e>
   209a2:	3b01      	subs	r3, #1
   209a4:	b25b      	sxtb	r3, r3
   209a6:	1c59      	adds	r1, r3, #1
   209a8:	b21a      	sxth	r2, r3
   209aa:	d008      	beq.n	209be <x_side_default+0x19e>
   209ac:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   209b0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   209b4:	4291      	cmp	r1, r2
   209b6:	d9f3      	bls.n	209a0 <x_side_default+0x180>
   209b8:	b01b      	add	sp, #108	; 0x6c
   209ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209be:	9b01      	ldr	r3, [sp, #4]
   209c0:	4652      	mov	r2, sl
   209c2:	4621      	mov	r1, r4
   209c4:	4620      	mov	r0, r4
   209c6:	f7ff fcab 	bl	20320 <uECC_vli_sub>
   209ca:	b01b      	add	sp, #108	; 0x6c
   209cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000209d0 <vli_mmod_fast_secp256r1>:
   209d0:	680b      	ldr	r3, [r1, #0]
   209d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209d6:	6003      	str	r3, [r0, #0]
   209d8:	684b      	ldr	r3, [r1, #4]
   209da:	6043      	str	r3, [r0, #4]
   209dc:	688b      	ldr	r3, [r1, #8]
   209de:	6083      	str	r3, [r0, #8]
   209e0:	68cb      	ldr	r3, [r1, #12]
   209e2:	60c3      	str	r3, [r0, #12]
   209e4:	690b      	ldr	r3, [r1, #16]
   209e6:	6103      	str	r3, [r0, #16]
   209e8:	694b      	ldr	r3, [r1, #20]
   209ea:	6143      	str	r3, [r0, #20]
   209ec:	698b      	ldr	r3, [r1, #24]
   209ee:	6183      	str	r3, [r0, #24]
   209f0:	69cb      	ldr	r3, [r1, #28]
   209f2:	61c3      	str	r3, [r0, #28]
   209f4:	b08d      	sub	sp, #52	; 0x34
   209f6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   209f8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
   209fa:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   209fc:	6b8d      	ldr	r5, [r1, #56]	; 0x38
   209fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   20a00:	940b      	str	r4, [sp, #44]	; 0x2c
   20a02:	f04f 0a00 	mov.w	sl, #0
   20a06:	ac04      	add	r4, sp, #16
   20a08:	9708      	str	r7, [sp, #32]
   20a0a:	9609      	str	r6, [sp, #36]	; 0x24
   20a0c:	950a      	str	r5, [sp, #40]	; 0x28
   20a0e:	4681      	mov	r9, r0
   20a10:	9307      	str	r3, [sp, #28]
   20a12:	f8cd a018 	str.w	sl, [sp, #24]
   20a16:	f8cd a014 	str.w	sl, [sp, #20]
   20a1a:	f8cd a010 	str.w	sl, [sp, #16]
   20a1e:	2501      	movs	r5, #1
   20a20:	4626      	mov	r6, r4
   20a22:	4627      	mov	r7, r4
   20a24:	2300      	movs	r3, #0
   20a26:	a205      	add	r2, pc, #20	; (adr r2, 20a3c <vli_mmod_fast_secp256r1+0x6c>)
   20a28:	f3af 8000 	nop.w
   20a2c:	f3af 8000 	nop.w
   20a30:	18ad      	adds	r5, r5, r2
   20a32:	ce04      	ldmia	r6!, {r2}
   20a34:	cf01      	ldmia	r7!, {r0}
   20a36:	1812      	adds	r2, r2, r0
   20a38:	c404      	stmia	r4!, {r2}
   20a3a:	4728      	bx	r5
   20a3c:	ce04      	ldmia	r6!, {r2}
   20a3e:	cf01      	ldmia	r7!, {r0}
   20a40:	4142      	adcs	r2, r0
   20a42:	c404      	stmia	r4!, {r2}
   20a44:	ce04      	ldmia	r6!, {r2}
   20a46:	cf01      	ldmia	r7!, {r0}
   20a48:	4142      	adcs	r2, r0
   20a4a:	c404      	stmia	r4!, {r2}
   20a4c:	ce04      	ldmia	r6!, {r2}
   20a4e:	cf01      	ldmia	r7!, {r0}
   20a50:	4142      	adcs	r2, r0
   20a52:	c404      	stmia	r4!, {r2}
   20a54:	ce04      	ldmia	r6!, {r2}
   20a56:	cf01      	ldmia	r7!, {r0}
   20a58:	4142      	adcs	r2, r0
   20a5a:	c404      	stmia	r4!, {r2}
   20a5c:	ce04      	ldmia	r6!, {r2}
   20a5e:	cf01      	ldmia	r7!, {r0}
   20a60:	4142      	adcs	r2, r0
   20a62:	c404      	stmia	r4!, {r2}
   20a64:	ce04      	ldmia	r6!, {r2}
   20a66:	cf01      	ldmia	r7!, {r0}
   20a68:	4142      	adcs	r2, r0
   20a6a:	c404      	stmia	r4!, {r2}
   20a6c:	ce04      	ldmia	r6!, {r2}
   20a6e:	cf01      	ldmia	r7!, {r0}
   20a70:	4142      	adcs	r2, r0
   20a72:	c404      	stmia	r4!, {r2}
   20a74:	415b      	adcs	r3, r3
   20a76:	2601      	movs	r6, #1
   20a78:	9300      	str	r3, [sp, #0]
   20a7a:	464c      	mov	r4, r9
   20a7c:	ad04      	add	r5, sp, #16
   20a7e:	464f      	mov	r7, r9
   20a80:	2300      	movs	r3, #0
   20a82:	a206      	add	r2, pc, #24	; (adr r2, 20a9c <vli_mmod_fast_secp256r1+0xcc>)
   20a84:	f3af 8000 	nop.w
   20a88:	f3af 8000 	nop.w
   20a8c:	f3af 8000 	nop.w
   20a90:	18b6      	adds	r6, r6, r2
   20a92:	cf04      	ldmia	r7!, {r2}
   20a94:	cd01      	ldmia	r5!, {r0}
   20a96:	1812      	adds	r2, r2, r0
   20a98:	c404      	stmia	r4!, {r2}
   20a9a:	4730      	bx	r6
   20a9c:	cf04      	ldmia	r7!, {r2}
   20a9e:	cd01      	ldmia	r5!, {r0}
   20aa0:	4142      	adcs	r2, r0
   20aa2:	c404      	stmia	r4!, {r2}
   20aa4:	cf04      	ldmia	r7!, {r2}
   20aa6:	cd01      	ldmia	r5!, {r0}
   20aa8:	4142      	adcs	r2, r0
   20aaa:	c404      	stmia	r4!, {r2}
   20aac:	cf04      	ldmia	r7!, {r2}
   20aae:	cd01      	ldmia	r5!, {r0}
   20ab0:	4142      	adcs	r2, r0
   20ab2:	c404      	stmia	r4!, {r2}
   20ab4:	cf04      	ldmia	r7!, {r2}
   20ab6:	cd01      	ldmia	r5!, {r0}
   20ab8:	4142      	adcs	r2, r0
   20aba:	c404      	stmia	r4!, {r2}
   20abc:	cf04      	ldmia	r7!, {r2}
   20abe:	cd01      	ldmia	r5!, {r0}
   20ac0:	4142      	adcs	r2, r0
   20ac2:	c404      	stmia	r4!, {r2}
   20ac4:	cf04      	ldmia	r7!, {r2}
   20ac6:	cd01      	ldmia	r5!, {r0}
   20ac8:	4142      	adcs	r2, r0
   20aca:	c404      	stmia	r4!, {r2}
   20acc:	cf04      	ldmia	r7!, {r2}
   20ace:	cd01      	ldmia	r5!, {r0}
   20ad0:	4142      	adcs	r2, r0
   20ad2:	c404      	stmia	r4!, {r2}
   20ad4:	415b      	adcs	r3, r3
   20ad6:	f101 0434 	add.w	r4, r1, #52	; 0x34
   20ada:	ccd0      	ldmia	r4, {r4, r6, r7}
   20adc:	6b0d      	ldr	r5, [r1, #48]	; 0x30
   20ade:	9408      	str	r4, [sp, #32]
   20ae0:	ac04      	add	r4, sp, #16
   20ae2:	9507      	str	r5, [sp, #28]
   20ae4:	9609      	str	r6, [sp, #36]	; 0x24
   20ae6:	970a      	str	r7, [sp, #40]	; 0x28
   20ae8:	4698      	mov	r8, r3
   20aea:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   20aee:	2501      	movs	r5, #1
   20af0:	4626      	mov	r6, r4
   20af2:	4627      	mov	r7, r4
   20af4:	2300      	movs	r3, #0
   20af6:	a205      	add	r2, pc, #20	; (adr r2, 20b0c <vli_mmod_fast_secp256r1+0x13c>)
   20af8:	f3af 8000 	nop.w
   20afc:	f3af 8000 	nop.w
   20b00:	18ad      	adds	r5, r5, r2
   20b02:	ce04      	ldmia	r6!, {r2}
   20b04:	cf01      	ldmia	r7!, {r0}
   20b06:	1812      	adds	r2, r2, r0
   20b08:	c404      	stmia	r4!, {r2}
   20b0a:	4728      	bx	r5
   20b0c:	ce04      	ldmia	r6!, {r2}
   20b0e:	cf01      	ldmia	r7!, {r0}
   20b10:	4142      	adcs	r2, r0
   20b12:	c404      	stmia	r4!, {r2}
   20b14:	ce04      	ldmia	r6!, {r2}
   20b16:	cf01      	ldmia	r7!, {r0}
   20b18:	4142      	adcs	r2, r0
   20b1a:	c404      	stmia	r4!, {r2}
   20b1c:	ce04      	ldmia	r6!, {r2}
   20b1e:	cf01      	ldmia	r7!, {r0}
   20b20:	4142      	adcs	r2, r0
   20b22:	c404      	stmia	r4!, {r2}
   20b24:	ce04      	ldmia	r6!, {r2}
   20b26:	cf01      	ldmia	r7!, {r0}
   20b28:	4142      	adcs	r2, r0
   20b2a:	c404      	stmia	r4!, {r2}
   20b2c:	ce04      	ldmia	r6!, {r2}
   20b2e:	cf01      	ldmia	r7!, {r0}
   20b30:	4142      	adcs	r2, r0
   20b32:	c404      	stmia	r4!, {r2}
   20b34:	ce04      	ldmia	r6!, {r2}
   20b36:	cf01      	ldmia	r7!, {r0}
   20b38:	4142      	adcs	r2, r0
   20b3a:	c404      	stmia	r4!, {r2}
   20b3c:	ce04      	ldmia	r6!, {r2}
   20b3e:	cf01      	ldmia	r7!, {r0}
   20b40:	4142      	adcs	r2, r0
   20b42:	c404      	stmia	r4!, {r2}
   20b44:	415b      	adcs	r3, r3
   20b46:	2601      	movs	r6, #1
   20b48:	9301      	str	r3, [sp, #4]
   20b4a:	464c      	mov	r4, r9
   20b4c:	ad04      	add	r5, sp, #16
   20b4e:	464f      	mov	r7, r9
   20b50:	2300      	movs	r3, #0
   20b52:	a206      	add	r2, pc, #24	; (adr r2, 20b6c <vli_mmod_fast_secp256r1+0x19c>)
   20b54:	f3af 8000 	nop.w
   20b58:	f3af 8000 	nop.w
   20b5c:	f3af 8000 	nop.w
   20b60:	18b6      	adds	r6, r6, r2
   20b62:	cf04      	ldmia	r7!, {r2}
   20b64:	cd01      	ldmia	r5!, {r0}
   20b66:	1812      	adds	r2, r2, r0
   20b68:	c404      	stmia	r4!, {r2}
   20b6a:	4730      	bx	r6
   20b6c:	cf04      	ldmia	r7!, {r2}
   20b6e:	cd01      	ldmia	r5!, {r0}
   20b70:	4142      	adcs	r2, r0
   20b72:	c404      	stmia	r4!, {r2}
   20b74:	cf04      	ldmia	r7!, {r2}
   20b76:	cd01      	ldmia	r5!, {r0}
   20b78:	4142      	adcs	r2, r0
   20b7a:	c404      	stmia	r4!, {r2}
   20b7c:	cf04      	ldmia	r7!, {r2}
   20b7e:	cd01      	ldmia	r5!, {r0}
   20b80:	4142      	adcs	r2, r0
   20b82:	c404      	stmia	r4!, {r2}
   20b84:	cf04      	ldmia	r7!, {r2}
   20b86:	cd01      	ldmia	r5!, {r0}
   20b88:	4142      	adcs	r2, r0
   20b8a:	c404      	stmia	r4!, {r2}
   20b8c:	cf04      	ldmia	r7!, {r2}
   20b8e:	cd01      	ldmia	r5!, {r0}
   20b90:	4142      	adcs	r2, r0
   20b92:	c404      	stmia	r4!, {r2}
   20b94:	cf04      	ldmia	r7!, {r2}
   20b96:	cd01      	ldmia	r5!, {r0}
   20b98:	4142      	adcs	r2, r0
   20b9a:	c404      	stmia	r4!, {r2}
   20b9c:	cf04      	ldmia	r7!, {r2}
   20b9e:	cd01      	ldmia	r5!, {r0}
   20ba0:	4142      	adcs	r2, r0
   20ba2:	c404      	stmia	r4!, {r2}
   20ba4:	415b      	adcs	r3, r3
   20ba6:	f101 0420 	add.w	r4, r1, #32
   20baa:	cc70      	ldmia	r4, {r4, r5, r6}
   20bac:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   20bae:	9404      	str	r4, [sp, #16]
   20bb0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   20bb2:	9505      	str	r5, [sp, #20]
   20bb4:	9606      	str	r6, [sp, #24]
   20bb6:	970a      	str	r7, [sp, #40]	; 0x28
   20bb8:	940b      	str	r4, [sp, #44]	; 0x2c
   20bba:	9302      	str	r3, [sp, #8]
   20bbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20bc0:	f8cd a020 	str.w	sl, [sp, #32]
   20bc4:	f8cd a01c 	str.w	sl, [sp, #28]
   20bc8:	464c      	mov	r4, r9
   20bca:	ad04      	add	r5, sp, #16
   20bcc:	2601      	movs	r6, #1
   20bce:	464f      	mov	r7, r9
   20bd0:	2300      	movs	r3, #0
   20bd2:	a206      	add	r2, pc, #24	; (adr r2, 20bec <vli_mmod_fast_secp256r1+0x21c>)
   20bd4:	f3af 8000 	nop.w
   20bd8:	f3af 8000 	nop.w
   20bdc:	f3af 8000 	nop.w
   20be0:	18b6      	adds	r6, r6, r2
   20be2:	cf04      	ldmia	r7!, {r2}
   20be4:	cd01      	ldmia	r5!, {r0}
   20be6:	1812      	adds	r2, r2, r0
   20be8:	c404      	stmia	r4!, {r2}
   20bea:	4730      	bx	r6
   20bec:	cf04      	ldmia	r7!, {r2}
   20bee:	cd01      	ldmia	r5!, {r0}
   20bf0:	4142      	adcs	r2, r0
   20bf2:	c404      	stmia	r4!, {r2}
   20bf4:	cf04      	ldmia	r7!, {r2}
   20bf6:	cd01      	ldmia	r5!, {r0}
   20bf8:	4142      	adcs	r2, r0
   20bfa:	c404      	stmia	r4!, {r2}
   20bfc:	cf04      	ldmia	r7!, {r2}
   20bfe:	cd01      	ldmia	r5!, {r0}
   20c00:	4142      	adcs	r2, r0
   20c02:	c404      	stmia	r4!, {r2}
   20c04:	cf04      	ldmia	r7!, {r2}
   20c06:	cd01      	ldmia	r5!, {r0}
   20c08:	4142      	adcs	r2, r0
   20c0a:	c404      	stmia	r4!, {r2}
   20c0c:	cf04      	ldmia	r7!, {r2}
   20c0e:	cd01      	ldmia	r5!, {r0}
   20c10:	4142      	adcs	r2, r0
   20c12:	c404      	stmia	r4!, {r2}
   20c14:	cf04      	ldmia	r7!, {r2}
   20c16:	cd01      	ldmia	r5!, {r0}
   20c18:	4142      	adcs	r2, r0
   20c1a:	c404      	stmia	r4!, {r2}
   20c1c:	cf04      	ldmia	r7!, {r2}
   20c1e:	cd01      	ldmia	r5!, {r0}
   20c20:	4142      	adcs	r2, r0
   20c22:	c404      	stmia	r4!, {r2}
   20c24:	415b      	adcs	r3, r3
   20c26:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   20c28:	9505      	str	r5, [sp, #20]
   20c2a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   20c2c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   20c2e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   20c30:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   20c32:	9303      	str	r3, [sp, #12]
   20c34:	9509      	str	r5, [sp, #36]	; 0x24
   20c36:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   20c38:	6a0d      	ldr	r5, [r1, #32]
   20c3a:	9606      	str	r6, [sp, #24]
   20c3c:	9708      	str	r7, [sp, #32]
   20c3e:	950b      	str	r5, [sp, #44]	; 0x2c
   20c40:	9407      	str	r4, [sp, #28]
   20c42:	940a      	str	r4, [sp, #40]	; 0x28
   20c44:	9304      	str	r3, [sp, #16]
   20c46:	464c      	mov	r4, r9
   20c48:	ad04      	add	r5, sp, #16
   20c4a:	2601      	movs	r6, #1
   20c4c:	464f      	mov	r7, r9
   20c4e:	2300      	movs	r3, #0
   20c50:	a206      	add	r2, pc, #24	; (adr r2, 20c6c <vli_mmod_fast_secp256r1+0x29c>)
   20c52:	bf00      	nop
   20c54:	f3af 8000 	nop.w
   20c58:	f3af 8000 	nop.w
   20c5c:	f3af 8000 	nop.w
   20c60:	18b6      	adds	r6, r6, r2
   20c62:	cf04      	ldmia	r7!, {r2}
   20c64:	cd01      	ldmia	r5!, {r0}
   20c66:	1812      	adds	r2, r2, r0
   20c68:	c404      	stmia	r4!, {r2}
   20c6a:	4730      	bx	r6
   20c6c:	cf04      	ldmia	r7!, {r2}
   20c6e:	cd01      	ldmia	r5!, {r0}
   20c70:	4142      	adcs	r2, r0
   20c72:	c404      	stmia	r4!, {r2}
   20c74:	cf04      	ldmia	r7!, {r2}
   20c76:	cd01      	ldmia	r5!, {r0}
   20c78:	4142      	adcs	r2, r0
   20c7a:	c404      	stmia	r4!, {r2}
   20c7c:	cf04      	ldmia	r7!, {r2}
   20c7e:	cd01      	ldmia	r5!, {r0}
   20c80:	4142      	adcs	r2, r0
   20c82:	c404      	stmia	r4!, {r2}
   20c84:	cf04      	ldmia	r7!, {r2}
   20c86:	cd01      	ldmia	r5!, {r0}
   20c88:	4142      	adcs	r2, r0
   20c8a:	c404      	stmia	r4!, {r2}
   20c8c:	cf04      	ldmia	r7!, {r2}
   20c8e:	cd01      	ldmia	r5!, {r0}
   20c90:	4142      	adcs	r2, r0
   20c92:	c404      	stmia	r4!, {r2}
   20c94:	cf04      	ldmia	r7!, {r2}
   20c96:	cd01      	ldmia	r5!, {r0}
   20c98:	4142      	adcs	r2, r0
   20c9a:	c404      	stmia	r4!, {r2}
   20c9c:	cf04      	ldmia	r7!, {r2}
   20c9e:	cd01      	ldmia	r5!, {r0}
   20ca0:	4142      	adcs	r2, r0
   20ca2:	c404      	stmia	r4!, {r2}
   20ca4:	415b      	adcs	r3, r3
   20ca6:	f101 042c 	add.w	r4, r1, #44	; 0x2c
   20caa:	cc70      	ldmia	r4, {r4, r5, r6}
   20cac:	6a0f      	ldr	r7, [r1, #32]
   20cae:	9404      	str	r4, [sp, #16]
   20cb0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   20cb2:	9505      	str	r5, [sp, #20]
   20cb4:	9606      	str	r6, [sp, #24]
   20cb6:	970a      	str	r7, [sp, #40]	; 0x28
   20cb8:	940b      	str	r4, [sp, #44]	; 0x2c
   20cba:	469b      	mov	fp, r3
   20cbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20cc0:	f8cd a020 	str.w	sl, [sp, #32]
   20cc4:	f8cd a01c 	str.w	sl, [sp, #28]
   20cc8:	464c      	mov	r4, r9
   20cca:	ad04      	add	r5, sp, #16
   20ccc:	2601      	movs	r6, #1
   20cce:	464f      	mov	r7, r9
   20cd0:	2300      	movs	r3, #0
   20cd2:	a206      	add	r2, pc, #24	; (adr r2, 20cec <vli_mmod_fast_secp256r1+0x31c>)
   20cd4:	f3af 8000 	nop.w
   20cd8:	f3af 8000 	nop.w
   20cdc:	f3af 8000 	nop.w
   20ce0:	18b6      	adds	r6, r6, r2
   20ce2:	cf04      	ldmia	r7!, {r2}
   20ce4:	cd01      	ldmia	r5!, {r0}
   20ce6:	1a12      	subs	r2, r2, r0
   20ce8:	c404      	stmia	r4!, {r2}
   20cea:	4730      	bx	r6
   20cec:	cf04      	ldmia	r7!, {r2}
   20cee:	cd01      	ldmia	r5!, {r0}
   20cf0:	4182      	sbcs	r2, r0
   20cf2:	c404      	stmia	r4!, {r2}
   20cf4:	cf04      	ldmia	r7!, {r2}
   20cf6:	cd01      	ldmia	r5!, {r0}
   20cf8:	4182      	sbcs	r2, r0
   20cfa:	c404      	stmia	r4!, {r2}
   20cfc:	cf04      	ldmia	r7!, {r2}
   20cfe:	cd01      	ldmia	r5!, {r0}
   20d00:	4182      	sbcs	r2, r0
   20d02:	c404      	stmia	r4!, {r2}
   20d04:	cf04      	ldmia	r7!, {r2}
   20d06:	cd01      	ldmia	r5!, {r0}
   20d08:	4182      	sbcs	r2, r0
   20d0a:	c404      	stmia	r4!, {r2}
   20d0c:	cf04      	ldmia	r7!, {r2}
   20d0e:	cd01      	ldmia	r5!, {r0}
   20d10:	4182      	sbcs	r2, r0
   20d12:	c404      	stmia	r4!, {r2}
   20d14:	cf04      	ldmia	r7!, {r2}
   20d16:	cd01      	ldmia	r5!, {r0}
   20d18:	4182      	sbcs	r2, r0
   20d1a:	c404      	stmia	r4!, {r2}
   20d1c:	cf04      	ldmia	r7!, {r2}
   20d1e:	cd01      	ldmia	r5!, {r0}
   20d20:	4182      	sbcs	r2, r0
   20d22:	c404      	stmia	r4!, {r2}
   20d24:	415b      	adcs	r3, r3
   20d26:	f101 0430 	add.w	r4, r1, #48	; 0x30
   20d2a:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
   20d2c:	9404      	str	r4, [sp, #16]
   20d2e:	9505      	str	r5, [sp, #20]
   20d30:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   20d32:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   20d34:	9606      	str	r6, [sp, #24]
   20d36:	9707      	str	r7, [sp, #28]
   20d38:	950a      	str	r5, [sp, #40]	; 0x28
   20d3a:	940b      	str	r4, [sp, #44]	; 0x2c
   20d3c:	469c      	mov	ip, r3
   20d3e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20d42:	f8cd a020 	str.w	sl, [sp, #32]
   20d46:	464c      	mov	r4, r9
   20d48:	ad04      	add	r5, sp, #16
   20d4a:	2601      	movs	r6, #1
   20d4c:	464f      	mov	r7, r9
   20d4e:	2300      	movs	r3, #0
   20d50:	a206      	add	r2, pc, #24	; (adr r2, 20d6c <vli_mmod_fast_secp256r1+0x39c>)
   20d52:	bf00      	nop
   20d54:	f3af 8000 	nop.w
   20d58:	f3af 8000 	nop.w
   20d5c:	f3af 8000 	nop.w
   20d60:	18b6      	adds	r6, r6, r2
   20d62:	cf04      	ldmia	r7!, {r2}
   20d64:	cd01      	ldmia	r5!, {r0}
   20d66:	1a12      	subs	r2, r2, r0
   20d68:	c404      	stmia	r4!, {r2}
   20d6a:	4730      	bx	r6
   20d6c:	cf04      	ldmia	r7!, {r2}
   20d6e:	cd01      	ldmia	r5!, {r0}
   20d70:	4182      	sbcs	r2, r0
   20d72:	c404      	stmia	r4!, {r2}
   20d74:	cf04      	ldmia	r7!, {r2}
   20d76:	cd01      	ldmia	r5!, {r0}
   20d78:	4182      	sbcs	r2, r0
   20d7a:	c404      	stmia	r4!, {r2}
   20d7c:	cf04      	ldmia	r7!, {r2}
   20d7e:	cd01      	ldmia	r5!, {r0}
   20d80:	4182      	sbcs	r2, r0
   20d82:	c404      	stmia	r4!, {r2}
   20d84:	cf04      	ldmia	r7!, {r2}
   20d86:	cd01      	ldmia	r5!, {r0}
   20d88:	4182      	sbcs	r2, r0
   20d8a:	c404      	stmia	r4!, {r2}
   20d8c:	cf04      	ldmia	r7!, {r2}
   20d8e:	cd01      	ldmia	r5!, {r0}
   20d90:	4182      	sbcs	r2, r0
   20d92:	c404      	stmia	r4!, {r2}
   20d94:	cf04      	ldmia	r7!, {r2}
   20d96:	cd01      	ldmia	r5!, {r0}
   20d98:	4182      	sbcs	r2, r0
   20d9a:	c404      	stmia	r4!, {r2}
   20d9c:	cf04      	ldmia	r7!, {r2}
   20d9e:	cd01      	ldmia	r5!, {r0}
   20da0:	4182      	sbcs	r2, r0
   20da2:	c404      	stmia	r4!, {r2}
   20da4:	415b      	adcs	r3, r3
   20da6:	f101 0434 	add.w	r4, r1, #52	; 0x34
   20daa:	cc70      	ldmia	r4, {r4, r5, r6}
   20dac:	6a0f      	ldr	r7, [r1, #32]
   20dae:	9404      	str	r4, [sp, #16]
   20db0:	9505      	str	r5, [sp, #20]
   20db2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   20db4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   20db6:	9606      	str	r6, [sp, #24]
   20db8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
   20dba:	9408      	str	r4, [sp, #32]
   20dbc:	469e      	mov	lr, r3
   20dbe:	9509      	str	r5, [sp, #36]	; 0x24
   20dc0:	960b      	str	r6, [sp, #44]	; 0x2c
   20dc2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   20dc6:	9707      	str	r7, [sp, #28]
   20dc8:	464c      	mov	r4, r9
   20dca:	ad04      	add	r5, sp, #16
   20dcc:	2601      	movs	r6, #1
   20dce:	464b      	mov	r3, r9
   20dd0:	2700      	movs	r7, #0
   20dd2:	a206      	add	r2, pc, #24	; (adr r2, 20dec <vli_mmod_fast_secp256r1+0x41c>)
   20dd4:	f3af 8000 	nop.w
   20dd8:	f3af 8000 	nop.w
   20ddc:	f3af 8000 	nop.w
   20de0:	18b6      	adds	r6, r6, r2
   20de2:	cb04      	ldmia	r3!, {r2}
   20de4:	cd01      	ldmia	r5!, {r0}
   20de6:	1a12      	subs	r2, r2, r0
   20de8:	c404      	stmia	r4!, {r2}
   20dea:	4730      	bx	r6
   20dec:	cb04      	ldmia	r3!, {r2}
   20dee:	cd01      	ldmia	r5!, {r0}
   20df0:	4182      	sbcs	r2, r0
   20df2:	c404      	stmia	r4!, {r2}
   20df4:	cb04      	ldmia	r3!, {r2}
   20df6:	cd01      	ldmia	r5!, {r0}
   20df8:	4182      	sbcs	r2, r0
   20dfa:	c404      	stmia	r4!, {r2}
   20dfc:	cb04      	ldmia	r3!, {r2}
   20dfe:	cd01      	ldmia	r5!, {r0}
   20e00:	4182      	sbcs	r2, r0
   20e02:	c404      	stmia	r4!, {r2}
   20e04:	cb04      	ldmia	r3!, {r2}
   20e06:	cd01      	ldmia	r5!, {r0}
   20e08:	4182      	sbcs	r2, r0
   20e0a:	c404      	stmia	r4!, {r2}
   20e0c:	cb04      	ldmia	r3!, {r2}
   20e0e:	cd01      	ldmia	r5!, {r0}
   20e10:	4182      	sbcs	r2, r0
   20e12:	c404      	stmia	r4!, {r2}
   20e14:	cb04      	ldmia	r3!, {r2}
   20e16:	cd01      	ldmia	r5!, {r0}
   20e18:	4182      	sbcs	r2, r0
   20e1a:	c404      	stmia	r4!, {r2}
   20e1c:	cb04      	ldmia	r3!, {r2}
   20e1e:	cd01      	ldmia	r5!, {r0}
   20e20:	4182      	sbcs	r2, r0
   20e22:	c404      	stmia	r4!, {r2}
   20e24:	417f      	adcs	r7, r7
   20e26:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   20e28:	6a4e      	ldr	r6, [r1, #36]	; 0x24
   20e2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   20e2c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   20e2e:	9404      	str	r4, [sp, #16]
   20e30:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   20e32:	6b49      	ldr	r1, [r1, #52]	; 0x34
   20e34:	9208      	str	r2, [sp, #32]
   20e36:	9607      	str	r6, [sp, #28]
   20e38:	9409      	str	r4, [sp, #36]	; 0x24
   20e3a:	910b      	str	r1, [sp, #44]	; 0x2c
   20e3c:	f8cd a018 	str.w	sl, [sp, #24]
   20e40:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   20e44:	9505      	str	r5, [sp, #20]
   20e46:	aa04      	add	r2, sp, #16
   20e48:	4649      	mov	r1, r9
   20e4a:	2401      	movs	r4, #1
   20e4c:	464e      	mov	r6, r9
   20e4e:	2500      	movs	r5, #0
   20e50:	a006      	add	r0, pc, #24	; (adr r0, 20e6c <vli_mmod_fast_secp256r1+0x49c>)
   20e52:	bf00      	nop
   20e54:	f3af 8000 	nop.w
   20e58:	f3af 8000 	nop.w
   20e5c:	f3af 8000 	nop.w
   20e60:	1824      	adds	r4, r4, r0
   20e62:	ce01      	ldmia	r6!, {r0}
   20e64:	ca08      	ldmia	r2!, {r3}
   20e66:	1ac0      	subs	r0, r0, r3
   20e68:	c101      	stmia	r1!, {r0}
   20e6a:	4720      	bx	r4
   20e6c:	ce01      	ldmia	r6!, {r0}
   20e6e:	ca08      	ldmia	r2!, {r3}
   20e70:	4198      	sbcs	r0, r3
   20e72:	c101      	stmia	r1!, {r0}
   20e74:	ce01      	ldmia	r6!, {r0}
   20e76:	ca08      	ldmia	r2!, {r3}
   20e78:	4198      	sbcs	r0, r3
   20e7a:	c101      	stmia	r1!, {r0}
   20e7c:	ce01      	ldmia	r6!, {r0}
   20e7e:	ca08      	ldmia	r2!, {r3}
   20e80:	4198      	sbcs	r0, r3
   20e82:	c101      	stmia	r1!, {r0}
   20e84:	ce01      	ldmia	r6!, {r0}
   20e86:	ca08      	ldmia	r2!, {r3}
   20e88:	4198      	sbcs	r0, r3
   20e8a:	c101      	stmia	r1!, {r0}
   20e8c:	ce01      	ldmia	r6!, {r0}
   20e8e:	ca08      	ldmia	r2!, {r3}
   20e90:	4198      	sbcs	r0, r3
   20e92:	c101      	stmia	r1!, {r0}
   20e94:	ce01      	ldmia	r6!, {r0}
   20e96:	ca08      	ldmia	r2!, {r3}
   20e98:	4198      	sbcs	r0, r3
   20e9a:	c101      	stmia	r1!, {r0}
   20e9c:	ce01      	ldmia	r6!, {r0}
   20e9e:	ca08      	ldmia	r2!, {r3}
   20ea0:	4198      	sbcs	r0, r3
   20ea2:	c101      	stmia	r1!, {r0}
   20ea4:	416d      	adcs	r5, r5
   20ea6:	9b00      	ldr	r3, [sp, #0]
   20ea8:	eb08 0203 	add.w	r2, r8, r3
   20eac:	9b01      	ldr	r3, [sp, #4]
   20eae:	441a      	add	r2, r3
   20eb0:	9b02      	ldr	r3, [sp, #8]
   20eb2:	441a      	add	r2, r3
   20eb4:	9b03      	ldr	r3, [sp, #12]
   20eb6:	441a      	add	r2, r3
   20eb8:	445a      	add	r2, fp
   20eba:	45d4      	cmp	ip, sl
   20ebc:	bf14      	ite	ne
   20ebe:	4694      	movne	ip, r2
   20ec0:	f1a2 0c01 	subeq.w	ip, r2, #1
   20ec4:	45d6      	cmp	lr, sl
   20ec6:	bf14      	ite	ne
   20ec8:	46e6      	movne	lr, ip
   20eca:	f1ac 0e01 	subeq.w	lr, ip, #1
   20ece:	4557      	cmp	r7, sl
   20ed0:	bf14      	ite	ne
   20ed2:	4677      	movne	r7, lr
   20ed4:	f1ae 0701 	subeq.w	r7, lr, #1
   20ed8:	4555      	cmp	r5, sl
   20eda:	bf14      	ite	ne
   20edc:	463d      	movne	r5, r7
   20ede:	1e7d      	subeq	r5, r7, #1
   20ee0:	4555      	cmp	r5, sl
   20ee2:	db4d      	blt.n	20f80 <vli_mmod_fast_secp256r1+0x5b0>
   20ee4:	f8df c108 	ldr.w	ip, [pc, #264]	; 20ff0 <vli_mmod_fast_secp256r1+0x620>
   20ee8:	f04f 0801 	mov.w	r8, #1
   20eec:	46ae      	mov	lr, r5
   20eee:	4648      	mov	r0, r9
   20ef0:	f1be 0f00 	cmp.w	lr, #0
   20ef4:	d116      	bne.n	20f24 <vli_mmod_fast_secp256r1+0x554>
   20ef6:	69c2      	ldr	r2, [r0, #28]
   20ef8:	3201      	adds	r2, #1
   20efa:	d176      	bne.n	20fea <vli_mmod_fast_secp256r1+0x61a>
   20efc:	6982      	ldr	r2, [r0, #24]
   20efe:	2a00      	cmp	r2, #0
   20f00:	d073      	beq.n	20fea <vli_mmod_fast_secp256r1+0x61a>
   20f02:	2a01      	cmp	r2, #1
   20f04:	d80e      	bhi.n	20f24 <vli_mmod_fast_secp256r1+0x554>
   20f06:	6942      	ldr	r2, [r0, #20]
   20f08:	b962      	cbnz	r2, 20f24 <vli_mmod_fast_secp256r1+0x554>
   20f0a:	6902      	ldr	r2, [r0, #16]
   20f0c:	b952      	cbnz	r2, 20f24 <vli_mmod_fast_secp256r1+0x554>
   20f0e:	68c2      	ldr	r2, [r0, #12]
   20f10:	b942      	cbnz	r2, 20f24 <vli_mmod_fast_secp256r1+0x554>
   20f12:	6882      	ldr	r2, [r0, #8]
   20f14:	3201      	adds	r2, #1
   20f16:	d168      	bne.n	20fea <vli_mmod_fast_secp256r1+0x61a>
   20f18:	6842      	ldr	r2, [r0, #4]
   20f1a:	3201      	adds	r2, #1
   20f1c:	d165      	bne.n	20fea <vli_mmod_fast_secp256r1+0x61a>
   20f1e:	6802      	ldr	r2, [r0, #0]
   20f20:	3201      	adds	r2, #1
   20f22:	d162      	bne.n	20fea <vli_mmod_fast_secp256r1+0x61a>
   20f24:	4602      	mov	r2, r0
   20f26:	4661      	mov	r1, ip
   20f28:	4644      	mov	r4, r8
   20f2a:	4603      	mov	r3, r0
   20f2c:	2600      	movs	r6, #0
   20f2e:	a703      	add	r7, pc, #12	; (adr r7, 20f3c <vli_mmod_fast_secp256r1+0x56c>)
   20f30:	19e4      	adds	r4, r4, r7
   20f32:	cb80      	ldmia	r3!, {r7}
   20f34:	c920      	ldmia	r1!, {r5}
   20f36:	1b7f      	subs	r7, r7, r5
   20f38:	c280      	stmia	r2!, {r7}
   20f3a:	4720      	bx	r4
   20f3c:	cb80      	ldmia	r3!, {r7}
   20f3e:	c920      	ldmia	r1!, {r5}
   20f40:	41af      	sbcs	r7, r5
   20f42:	c280      	stmia	r2!, {r7}
   20f44:	cb80      	ldmia	r3!, {r7}
   20f46:	c920      	ldmia	r1!, {r5}
   20f48:	41af      	sbcs	r7, r5
   20f4a:	c280      	stmia	r2!, {r7}
   20f4c:	cb80      	ldmia	r3!, {r7}
   20f4e:	c920      	ldmia	r1!, {r5}
   20f50:	41af      	sbcs	r7, r5
   20f52:	c280      	stmia	r2!, {r7}
   20f54:	cb80      	ldmia	r3!, {r7}
   20f56:	c920      	ldmia	r1!, {r5}
   20f58:	41af      	sbcs	r7, r5
   20f5a:	c280      	stmia	r2!, {r7}
   20f5c:	cb80      	ldmia	r3!, {r7}
   20f5e:	c920      	ldmia	r1!, {r5}
   20f60:	41af      	sbcs	r7, r5
   20f62:	c280      	stmia	r2!, {r7}
   20f64:	cb80      	ldmia	r3!, {r7}
   20f66:	c920      	ldmia	r1!, {r5}
   20f68:	41af      	sbcs	r7, r5
   20f6a:	c280      	stmia	r2!, {r7}
   20f6c:	cb80      	ldmia	r3!, {r7}
   20f6e:	c920      	ldmia	r1!, {r5}
   20f70:	41af      	sbcs	r7, r5
   20f72:	c280      	stmia	r2!, {r7}
   20f74:	4176      	adcs	r6, r6
   20f76:	2e00      	cmp	r6, #0
   20f78:	bf08      	it	eq
   20f7a:	f1ae 0e01 	subeq.w	lr, lr, #1
   20f7e:	e7b7      	b.n	20ef0 <vli_mmod_fast_secp256r1+0x520>
   20f80:	f8df e06c 	ldr.w	lr, [pc, #108]	; 20ff0 <vli_mmod_fast_secp256r1+0x620>
   20f84:	f04f 0c01 	mov.w	ip, #1
   20f88:	46c8      	mov	r8, r9
   20f8a:	4642      	mov	r2, r8
   20f8c:	4671      	mov	r1, lr
   20f8e:	4664      	mov	r4, ip
   20f90:	4643      	mov	r3, r8
   20f92:	2600      	movs	r6, #0
   20f94:	a705      	add	r7, pc, #20	; (adr r7, 20fac <vli_mmod_fast_secp256r1+0x5dc>)
   20f96:	bf00      	nop
   20f98:	f3af 8000 	nop.w
   20f9c:	f3af 8000 	nop.w
   20fa0:	19e4      	adds	r4, r4, r7
   20fa2:	cb80      	ldmia	r3!, {r7}
   20fa4:	c901      	ldmia	r1!, {r0}
   20fa6:	183f      	adds	r7, r7, r0
   20fa8:	c280      	stmia	r2!, {r7}
   20faa:	4720      	bx	r4
   20fac:	cb80      	ldmia	r3!, {r7}
   20fae:	c901      	ldmia	r1!, {r0}
   20fb0:	4147      	adcs	r7, r0
   20fb2:	c280      	stmia	r2!, {r7}
   20fb4:	cb80      	ldmia	r3!, {r7}
   20fb6:	c901      	ldmia	r1!, {r0}
   20fb8:	4147      	adcs	r7, r0
   20fba:	c280      	stmia	r2!, {r7}
   20fbc:	cb80      	ldmia	r3!, {r7}
   20fbe:	c901      	ldmia	r1!, {r0}
   20fc0:	4147      	adcs	r7, r0
   20fc2:	c280      	stmia	r2!, {r7}
   20fc4:	cb80      	ldmia	r3!, {r7}
   20fc6:	c901      	ldmia	r1!, {r0}
   20fc8:	4147      	adcs	r7, r0
   20fca:	c280      	stmia	r2!, {r7}
   20fcc:	cb80      	ldmia	r3!, {r7}
   20fce:	c901      	ldmia	r1!, {r0}
   20fd0:	4147      	adcs	r7, r0
   20fd2:	c280      	stmia	r2!, {r7}
   20fd4:	cb80      	ldmia	r3!, {r7}
   20fd6:	c901      	ldmia	r1!, {r0}
   20fd8:	4147      	adcs	r7, r0
   20fda:	c280      	stmia	r2!, {r7}
   20fdc:	cb80      	ldmia	r3!, {r7}
   20fde:	c901      	ldmia	r1!, {r0}
   20fe0:	4147      	adcs	r7, r0
   20fe2:	c280      	stmia	r2!, {r7}
   20fe4:	4176      	adcs	r6, r6
   20fe6:	19ad      	adds	r5, r5, r6
   20fe8:	d4cf      	bmi.n	20f8a <vli_mmod_fast_secp256r1+0x5ba>
   20fea:	b00d      	add	sp, #52	; 0x34
   20fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ff0:	000267dc 	.word	0x000267dc
	...

00021000 <double_jacobian_default>:
   21000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21004:	f993 9000 	ldrsb.w	r9, [r3]
   21008:	f1b9 0f00 	cmp.w	r9, #0
   2100c:	b0a9      	sub	sp, #164	; 0xa4
   2100e:	dd15      	ble.n	2103c <double_jacobian_default+0x3c>
   21010:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   21014:	b2e4      	uxtb	r4, r4
   21016:	1f15      	subs	r5, r2, #4
   21018:	9405      	str	r4, [sp, #20]
   2101a:	00a4      	lsls	r4, r4, #2
   2101c:	462e      	mov	r6, r5
   2101e:	9406      	str	r4, [sp, #24]
   21020:	1914      	adds	r4, r2, r4
   21022:	4625      	mov	r5, r4
   21024:	46b6      	mov	lr, r6
   21026:	2400      	movs	r4, #0
   21028:	4637      	mov	r7, r6
   2102a:	f85e 6f04 	ldr.w	r6, [lr, #4]!
   2102e:	4575      	cmp	r5, lr
   21030:	ea44 0406 	orr.w	r4, r4, r6
   21034:	d1f9      	bne.n	2102a <double_jacobian_default+0x2a>
   21036:	9703      	str	r7, [sp, #12]
   21038:	9504      	str	r5, [sp, #16]
   2103a:	b914      	cbnz	r4, 21042 <double_jacobian_default+0x42>
   2103c:	b029      	add	sp, #164	; 0xa4
   2103e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21042:	4698      	mov	r8, r3
   21044:	4615      	mov	r5, r2
   21046:	4604      	mov	r4, r0
   21048:	9207      	str	r2, [sp, #28]
   2104a:	a818      	add	r0, sp, #96	; 0x60
   2104c:	460a      	mov	r2, r1
   2104e:	464b      	mov	r3, r9
   21050:	468a      	mov	sl, r1
   21052:	f7ff f995 	bl	20380 <uECC_vli_mult>
   21056:	a918      	add	r1, sp, #96	; 0x60
   21058:	a808      	add	r0, sp, #32
   2105a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2105e:	4798      	blx	r3
   21060:	aa08      	add	r2, sp, #32
   21062:	a818      	add	r0, sp, #96	; 0x60
   21064:	f998 3000 	ldrsb.w	r3, [r8]
   21068:	4621      	mov	r1, r4
   2106a:	f7ff f989 	bl	20380 <uECC_vli_mult>
   2106e:	a918      	add	r1, sp, #96	; 0x60
   21070:	a810      	add	r0, sp, #64	; 0x40
   21072:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21076:	4798      	blx	r3
   21078:	aa08      	add	r2, sp, #32
   2107a:	4611      	mov	r1, r2
   2107c:	a818      	add	r0, sp, #96	; 0x60
   2107e:	f998 3000 	ldrsb.w	r3, [r8]
   21082:	f7ff f97d 	bl	20380 <uECC_vli_mult>
   21086:	a918      	add	r1, sp, #96	; 0x60
   21088:	a808      	add	r0, sp, #32
   2108a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2108e:	4798      	blx	r3
   21090:	462a      	mov	r2, r5
   21092:	a818      	add	r0, sp, #96	; 0x60
   21094:	f998 3000 	ldrsb.w	r3, [r8]
   21098:	4651      	mov	r1, sl
   2109a:	f7ff f971 	bl	20380 <uECC_vli_mult>
   2109e:	a918      	add	r1, sp, #96	; 0x60
   210a0:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   210a4:	4650      	mov	r0, sl
   210a6:	4798      	blx	r3
   210a8:	462a      	mov	r2, r5
   210aa:	a818      	add	r0, sp, #96	; 0x60
   210ac:	f998 3000 	ldrsb.w	r3, [r8]
   210b0:	4629      	mov	r1, r5
   210b2:	f7ff f965 	bl	20380 <uECC_vli_mult>
   210b6:	f108 0b04 	add.w	fp, r8, #4
   210ba:	a918      	add	r1, sp, #96	; 0x60
   210bc:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   210c0:	4628      	mov	r0, r5
   210c2:	4798      	blx	r3
   210c4:	465b      	mov	r3, fp
   210c6:	462a      	mov	r2, r5
   210c8:	4621      	mov	r1, r4
   210ca:	4620      	mov	r0, r4
   210cc:	f8cd 9000 	str.w	r9, [sp]
   210d0:	f7ff fae6 	bl	206a0 <uECC_vli_modAdd>
   210d4:	465b      	mov	r3, fp
   210d6:	462a      	mov	r2, r5
   210d8:	4629      	mov	r1, r5
   210da:	4628      	mov	r0, r5
   210dc:	f8cd 9000 	str.w	r9, [sp]
   210e0:	f7ff fade 	bl	206a0 <uECC_vli_modAdd>
   210e4:	465b      	mov	r3, fp
   210e6:	462a      	mov	r2, r5
   210e8:	4621      	mov	r1, r4
   210ea:	4628      	mov	r0, r5
   210ec:	f8cd 9000 	str.w	r9, [sp]
   210f0:	f7ff fb2e 	bl	20750 <uECC_vli_modSub>
   210f4:	462a      	mov	r2, r5
   210f6:	a818      	add	r0, sp, #96	; 0x60
   210f8:	f998 3000 	ldrsb.w	r3, [r8]
   210fc:	4621      	mov	r1, r4
   210fe:	f7ff f93f 	bl	20380 <uECC_vli_mult>
   21102:	a918      	add	r1, sp, #96	; 0x60
   21104:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21108:	4620      	mov	r0, r4
   2110a:	4798      	blx	r3
   2110c:	465b      	mov	r3, fp
   2110e:	4622      	mov	r2, r4
   21110:	4621      	mov	r1, r4
   21112:	4628      	mov	r0, r5
   21114:	f8cd 9000 	str.w	r9, [sp]
   21118:	f7ff fac2 	bl	206a0 <uECC_vli_modAdd>
   2111c:	465b      	mov	r3, fp
   2111e:	f8cd 9000 	str.w	r9, [sp]
   21122:	462a      	mov	r2, r5
   21124:	4621      	mov	r1, r4
   21126:	4620      	mov	r0, r4
   21128:	f7ff faba 	bl	206a0 <uECC_vli_modAdd>
   2112c:	6823      	ldr	r3, [r4, #0]
   2112e:	f013 0301 	ands.w	r3, r3, #1
   21132:	d16a      	bne.n	2120a <double_jacobian_default+0x20a>
   21134:	eb04 0289 	add.w	r2, r4, r9, lsl #2
   21138:	4294      	cmp	r4, r2
   2113a:	d20e      	bcs.n	2115a <double_jacobian_default+0x15a>
   2113c:	9f03      	ldr	r7, [sp, #12]
   2113e:	9d04      	ldr	r5, [sp, #16]
   21140:	9e07      	ldr	r6, [sp, #28]
   21142:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   21146:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   2114a:	4294      	cmp	r4, r2
   2114c:	6013      	str	r3, [r2, #0]
   2114e:	ea4f 73c1 	mov.w	r3, r1, lsl #31
   21152:	d3f6      	bcc.n	21142 <double_jacobian_default+0x142>
   21154:	9703      	str	r7, [sp, #12]
   21156:	9504      	str	r5, [sp, #16]
   21158:	9607      	str	r6, [sp, #28]
   2115a:	4622      	mov	r2, r4
   2115c:	4621      	mov	r1, r4
   2115e:	f998 3000 	ldrsb.w	r3, [r8]
   21162:	a818      	add	r0, sp, #96	; 0x60
   21164:	f7ff f90c 	bl	20380 <uECC_vli_mult>
   21168:	9d07      	ldr	r5, [sp, #28]
   2116a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2116e:	4628      	mov	r0, r5
   21170:	a918      	add	r1, sp, #96	; 0x60
   21172:	4798      	blx	r3
   21174:	4629      	mov	r1, r5
   21176:	4628      	mov	r0, r5
   21178:	465b      	mov	r3, fp
   2117a:	aa10      	add	r2, sp, #64	; 0x40
   2117c:	f8cd 9000 	str.w	r9, [sp]
   21180:	f7ff fae6 	bl	20750 <uECC_vli_modSub>
   21184:	4629      	mov	r1, r5
   21186:	4628      	mov	r0, r5
   21188:	465b      	mov	r3, fp
   2118a:	aa10      	add	r2, sp, #64	; 0x40
   2118c:	f8cd 9000 	str.w	r9, [sp]
   21190:	f7ff fade 	bl	20750 <uECC_vli_modSub>
   21194:	a910      	add	r1, sp, #64	; 0x40
   21196:	462a      	mov	r2, r5
   21198:	4608      	mov	r0, r1
   2119a:	465b      	mov	r3, fp
   2119c:	f8cd 9000 	str.w	r9, [sp]
   211a0:	f7ff fad6 	bl	20750 <uECC_vli_modSub>
   211a4:	aa10      	add	r2, sp, #64	; 0x40
   211a6:	4621      	mov	r1, r4
   211a8:	f998 3000 	ldrsb.w	r3, [r8]
   211ac:	a818      	add	r0, sp, #96	; 0x60
   211ae:	f7ff f8e7 	bl	20380 <uECC_vli_mult>
   211b2:	4620      	mov	r0, r4
   211b4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   211b8:	a918      	add	r1, sp, #96	; 0x60
   211ba:	4798      	blx	r3
   211bc:	aa08      	add	r2, sp, #32
   211be:	465b      	mov	r3, fp
   211c0:	4621      	mov	r1, r4
   211c2:	f8cd 9000 	str.w	r9, [sp]
   211c6:	4610      	mov	r0, r2
   211c8:	f7ff fac2 	bl	20750 <uECC_vli_modSub>
   211cc:	9f03      	ldr	r7, [sp, #12]
   211ce:	9d04      	ldr	r5, [sp, #16]
   211d0:	3c04      	subs	r4, #4
   211d2:	463b      	mov	r3, r7
   211d4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   211d8:	f844 2f04 	str.w	r2, [r4, #4]!
   211dc:	42ab      	cmp	r3, r5
   211de:	d1f9      	bne.n	211d4 <double_jacobian_default+0x1d4>
   211e0:	9b06      	ldr	r3, [sp, #24]
   211e2:	4453      	add	r3, sl
   211e4:	4619      	mov	r1, r3
   211e6:	f1aa 0304 	sub.w	r3, sl, #4
   211ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
   211ee:	f847 2f04 	str.w	r2, [r7, #4]!
   211f2:	428b      	cmp	r3, r1
   211f4:	d1f9      	bne.n	211ea <double_jacobian_default+0x1ea>
   211f6:	9a05      	ldr	r2, [sp, #20]
   211f8:	3201      	adds	r2, #1
   211fa:	0092      	lsls	r2, r2, #2
   211fc:	a908      	add	r1, sp, #32
   211fe:	4650      	mov	r0, sl
   21200:	f7ea ffae 	bl	c160 <memcpy>
   21204:	b029      	add	sp, #164	; 0xa4
   21206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2120a:	f1c9 0208 	rsb	r2, r9, #8
   2120e:	00d2      	lsls	r2, r2, #3
   21210:	3201      	adds	r2, #1
   21212:	4623      	mov	r3, r4
   21214:	4659      	mov	r1, fp
   21216:	4620      	mov	r0, r4
   21218:	2500      	movs	r5, #0
   2121a:	a704      	add	r7, pc, #16	; (adr r7, 2122c <double_jacobian_default+0x22c>)
   2121c:	f3af 8000 	nop.w
   21220:	19d2      	adds	r2, r2, r7
   21222:	c880      	ldmia	r0!, {r7}
   21224:	c940      	ldmia	r1!, {r6}
   21226:	19bf      	adds	r7, r7, r6
   21228:	c380      	stmia	r3!, {r7}
   2122a:	4710      	bx	r2
   2122c:	c880      	ldmia	r0!, {r7}
   2122e:	c940      	ldmia	r1!, {r6}
   21230:	4177      	adcs	r7, r6
   21232:	c380      	stmia	r3!, {r7}
   21234:	c880      	ldmia	r0!, {r7}
   21236:	c940      	ldmia	r1!, {r6}
   21238:	4177      	adcs	r7, r6
   2123a:	c380      	stmia	r3!, {r7}
   2123c:	c880      	ldmia	r0!, {r7}
   2123e:	c940      	ldmia	r1!, {r6}
   21240:	4177      	adcs	r7, r6
   21242:	c380      	stmia	r3!, {r7}
   21244:	c880      	ldmia	r0!, {r7}
   21246:	c940      	ldmia	r1!, {r6}
   21248:	4177      	adcs	r7, r6
   2124a:	c380      	stmia	r3!, {r7}
   2124c:	c880      	ldmia	r0!, {r7}
   2124e:	c940      	ldmia	r1!, {r6}
   21250:	4177      	adcs	r7, r6
   21252:	c380      	stmia	r3!, {r7}
   21254:	c880      	ldmia	r0!, {r7}
   21256:	c940      	ldmia	r1!, {r6}
   21258:	4177      	adcs	r7, r6
   2125a:	c380      	stmia	r3!, {r7}
   2125c:	c880      	ldmia	r0!, {r7}
   2125e:	c940      	ldmia	r1!, {r6}
   21260:	4177      	adcs	r7, r6
   21262:	c380      	stmia	r3!, {r7}
   21264:	416d      	adcs	r5, r5
   21266:	ea4f 0189 	mov.w	r1, r9, lsl #2
   2126a:	1863      	adds	r3, r4, r1
   2126c:	429c      	cmp	r4, r3
   2126e:	46ae      	mov	lr, r5
   21270:	d20f      	bcs.n	21292 <double_jacobian_default+0x292>
   21272:	9f03      	ldr	r7, [sp, #12]
   21274:	9d04      	ldr	r5, [sp, #16]
   21276:	9e07      	ldr	r6, [sp, #28]
   21278:	2200      	movs	r2, #0
   2127a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   2127e:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   21282:	429c      	cmp	r4, r3
   21284:	601a      	str	r2, [r3, #0]
   21286:	ea4f 72c0 	mov.w	r2, r0, lsl #31
   2128a:	d3f6      	bcc.n	2127a <double_jacobian_default+0x27a>
   2128c:	9703      	str	r7, [sp, #12]
   2128e:	9504      	str	r5, [sp, #16]
   21290:	9607      	str	r6, [sp, #28]
   21292:	3904      	subs	r1, #4
   21294:	5863      	ldr	r3, [r4, r1]
   21296:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   2129a:	5063      	str	r3, [r4, r1]
   2129c:	e75d      	b.n	2115a <double_jacobian_default+0x15a>
   2129e:	bf00      	nop

000212a0 <uECC_secp256r1>:
   212a0:	4800      	ldr	r0, [pc, #0]	; (212a4 <uECC_secp256r1+0x4>)
   212a2:	4770      	bx	lr
   212a4:	000267d8 	.word	0x000267d8

000212a8 <uECC_valid_point>:
   212a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   212aa:	f991 3000 	ldrsb.w	r3, [r1]
   212ae:	b2da      	uxtb	r2, r3
   212b0:	0057      	lsls	r7, r2, #1
   212b2:	b2ff      	uxtb	r7, r7
   212b4:	b27c      	sxtb	r4, r7
   212b6:	2c00      	cmp	r4, #0
   212b8:	b099      	sub	sp, #100	; 0x64
   212ba:	dd28      	ble.n	2130e <uECC_valid_point+0x66>
   212bc:	3f01      	subs	r7, #1
   212be:	b2ff      	uxtb	r7, r7
   212c0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
   212c4:	1f04      	subs	r4, r0, #4
   212c6:	2500      	movs	r5, #0
   212c8:	f854 6f04 	ldr.w	r6, [r4, #4]!
   212cc:	42bc      	cmp	r4, r7
   212ce:	ea45 0506 	orr.w	r5, r5, r6
   212d2:	d1f9      	bne.n	212c8 <uECC_valid_point+0x20>
   212d4:	b1f5      	cbz	r5, 21314 <uECC_valid_point+0x6c>
   212d6:	1e55      	subs	r5, r2, #1
   212d8:	b26d      	sxtb	r5, r5
   212da:	2d00      	cmp	r5, #0
   212dc:	f101 0e04 	add.w	lr, r1, #4
   212e0:	db15      	blt.n	2130e <uECC_valid_point+0x66>
   212e2:	b22e      	sxth	r6, r5
   212e4:	f85e c026 	ldr.w	ip, [lr, r6, lsl #2]
   212e8:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
   212ec:	4594      	cmp	ip, r2
   212ee:	d814      	bhi.n	2131a <uECC_valid_point+0x72>
   212f0:	d30d      	bcc.n	2130e <uECC_valid_point+0x66>
   212f2:	462c      	mov	r4, r5
   212f4:	e006      	b.n	21304 <uECC_valid_point+0x5c>
   212f6:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
   212fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   212fe:	4297      	cmp	r7, r2
   21300:	d80b      	bhi.n	2131a <uECC_valid_point+0x72>
   21302:	d304      	bcc.n	2130e <uECC_valid_point+0x66>
   21304:	3c01      	subs	r4, #1
   21306:	b264      	sxtb	r4, r4
   21308:	1c67      	adds	r7, r4, #1
   2130a:	b222      	sxth	r2, r4
   2130c:	d1f3      	bne.n	212f6 <uECC_valid_point+0x4e>
   2130e:	2000      	movs	r0, #0
   21310:	b019      	add	sp, #100	; 0x64
   21312:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21314:	4628      	mov	r0, r5
   21316:	b019      	add	sp, #100	; 0x64
   21318:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2131a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   2131e:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   21322:	4564      	cmp	r4, ip
   21324:	d310      	bcc.n	21348 <uECC_valid_point+0xa0>
   21326:	d8f2      	bhi.n	2130e <uECC_valid_point+0x66>
   21328:	462c      	mov	r4, r5
   2132a:	e006      	b.n	2133a <uECC_valid_point+0x92>
   2132c:	f85e c027 	ldr.w	ip, [lr, r7, lsl #2]
   21330:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
   21334:	45bc      	cmp	ip, r7
   21336:	d807      	bhi.n	21348 <uECC_valid_point+0xa0>
   21338:	d3e9      	bcc.n	2130e <uECC_valid_point+0x66>
   2133a:	3c01      	subs	r4, #1
   2133c:	b264      	sxtb	r4, r4
   2133e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   21342:	b227      	sxth	r7, r4
   21344:	d1f2      	bne.n	2132c <uECC_valid_point+0x84>
   21346:	e7e2      	b.n	2130e <uECC_valid_point+0x66>
   21348:	460f      	mov	r7, r1
   2134a:	4604      	mov	r4, r0
   2134c:	4611      	mov	r1, r2
   2134e:	a808      	add	r0, sp, #32
   21350:	f7ff f816 	bl	20380 <uECC_vli_mult>
   21354:	a908      	add	r1, sp, #32
   21356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   2135a:	4668      	mov	r0, sp
   2135c:	4798      	blx	r3
   2135e:	a808      	add	r0, sp, #32
   21360:	4621      	mov	r1, r4
   21362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   21366:	463a      	mov	r2, r7
   21368:	4798      	blx	r3
   2136a:	2000      	movs	r0, #0
   2136c:	e000      	b.n	21370 <uECC_valid_point+0xc8>
   2136e:	b22e      	sxth	r6, r5
   21370:	ab18      	add	r3, sp, #96	; 0x60
   21372:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   21376:	3d01      	subs	r5, #1
   21378:	f856 2c60 	ldr.w	r2, [r6, #-96]
   2137c:	f856 3c40 	ldr.w	r3, [r6, #-64]
   21380:	b26d      	sxtb	r5, r5
   21382:	4053      	eors	r3, r2
   21384:	4318      	orrs	r0, r3
   21386:	1c6b      	adds	r3, r5, #1
   21388:	d1f1      	bne.n	2136e <uECC_valid_point+0xc6>
   2138a:	fab0 f080 	clz	r0, r0
   2138e:	0940      	lsrs	r0, r0, #5
   21390:	e7be      	b.n	21310 <uECC_valid_point+0x68>
   21392:	bf00      	nop

00021394 <uECC_valid_public_key>:
   21394:	f7ff bf88 	b.w	212a8 <uECC_valid_point>

00021398 <am_bsp_low_power_init>:
   21398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2139a:	f002 f859 	bl	23450 <am_hal_itm_disable>
   2139e:	2000      	movs	r0, #0
   213a0:	f7fa fcba 	bl	1bd18 <am_util_stdio_printf_init>
   213a4:	4b12      	ldr	r3, [pc, #72]	; (213f0 <am_bsp_low_power_init+0x58>)
   213a6:	4f13      	ldr	r7, [pc, #76]	; (213f4 <am_bsp_low_power_init+0x5c>)
   213a8:	6819      	ldr	r1, [r3, #0]
   213aa:	2021      	movs	r0, #33	; 0x21
   213ac:	f001 feaa 	bl	23104 <am_hal_gpio_pinconfig>
   213b0:	f002 f9a8 	bl	23704 <am_hal_pwrctrl_low_power_init>
   213b4:	2001      	movs	r0, #1
   213b6:	f002 fa93 	bl	238e0 <am_hal_rtc_osc_select>
   213ba:	2100      	movs	r1, #0
   213bc:	2003      	movs	r0, #3
   213be:	f001 fd63 	bl	22e88 <am_hal_clkgen_control>
   213c2:	f002 fa95 	bl	238f0 <am_hal_rtc_osc_disable>
   213c6:	4b0c      	ldr	r3, [pc, #48]	; (213f8 <am_bsp_low_power_init+0x60>)
   213c8:	681e      	ldr	r6, [r3, #0]
   213ca:	2400      	movs	r4, #0
   213cc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   213d0:	4631      	mov	r1, r6
   213d2:	4628      	mov	r0, r5
   213d4:	f001 fe96 	bl	23104 <am_hal_gpio_pinconfig>
   213d8:	2103      	movs	r1, #3
   213da:	4628      	mov	r0, r5
   213dc:	f001 ffce 	bl	2337c <am_hal_gpio_state_write>
   213e0:	3401      	adds	r4, #1
   213e2:	4628      	mov	r0, r5
   213e4:	2100      	movs	r1, #0
   213e6:	f001 ffc9 	bl	2337c <am_hal_gpio_state_write>
   213ea:	2c04      	cmp	r4, #4
   213ec:	d1ee      	bne.n	213cc <am_bsp_low_power_init+0x34>
   213ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   213f0:	0002821c 	.word	0x0002821c
   213f4:	10002ec4 	.word	0x10002ec4
   213f8:	00028220 	.word	0x00028220

000213fc <am_bsp_itm_printf_enable>:
   213fc:	b500      	push	{lr}
   213fe:	4b0b      	ldr	r3, [pc, #44]	; (2142c <am_bsp_itm_printf_enable+0x30>)
   21400:	b087      	sub	sp, #28
   21402:	2201      	movs	r2, #1
   21404:	601a      	str	r2, [r3, #0]
   21406:	f002 f805 	bl	23414 <am_hal_itm_enable>
   2140a:	4b09      	ldr	r3, [pc, #36]	; (21430 <am_bsp_itm_printf_enable+0x34>)
   2140c:	9301      	str	r3, [sp, #4]
   2140e:	a801      	add	r0, sp, #4
   21410:	f002 fb52 	bl	23ab8 <am_hal_tpiu_enable>
   21414:	4b07      	ldr	r3, [pc, #28]	; (21434 <am_bsp_itm_printf_enable+0x38>)
   21416:	2021      	movs	r0, #33	; 0x21
   21418:	6819      	ldr	r1, [r3, #0]
   2141a:	f001 fe73 	bl	23104 <am_hal_gpio_pinconfig>
   2141e:	4806      	ldr	r0, [pc, #24]	; (21438 <am_bsp_itm_printf_enable+0x3c>)
   21420:	f7fa fc7a 	bl	1bd18 <am_util_stdio_printf_init>
   21424:	b007      	add	sp, #28
   21426:	f85d fb04 	ldr.w	pc, [sp], #4
   2142a:	bf00      	nop
   2142c:	10009574 	.word	0x10009574
   21430:	000f4240 	.word	0x000f4240
   21434:	00026890 	.word	0x00026890
   21438:	000234fd 	.word	0x000234fd

0002143c <am_hal_ble_blocking_transfer.part.7>:
   2143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21440:	4dcb      	ldr	r5, [pc, #812]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21442:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   21446:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2144a:	f36f 13c7 	bfc	r3, #7, #1
   2144e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21452:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21456:	f36f 2308 	bfc	r3, #8, #1
   2145a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2145e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21462:	f36f 0300 	bfc	r3, #0, #1
   21466:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2146a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2146e:	f36f 0341 	bfc	r3, #1, #1
   21472:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21476:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   2147a:	f043 0301 	orr.w	r3, r3, #1
   2147e:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   21482:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   21486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2148a:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   2148e:	7a8b      	ldrb	r3, [r1, #10]
   21490:	2b01      	cmp	r3, #1
   21492:	b085      	sub	sp, #20
   21494:	460e      	mov	r6, r1
   21496:	4604      	mov	r4, r0
   21498:	d00a      	beq.n	214b0 <am_hal_ble_blocking_transfer.part.7+0x74>
   2149a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2149e:	061f      	lsls	r7, r3, #24
   214a0:	f100 8123 	bmi.w	216ea <am_hal_ble_blocking_transfer.part.7+0x2ae>
   214a4:	48b3      	ldr	r0, [pc, #716]	; (21774 <am_hal_ble_blocking_transfer.part.7+0x338>)
   214a6:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   214aa:	b005      	add	sp, #20
   214ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214b0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   214b4:	2b00      	cmp	r3, #0
   214b6:	f000 80e6 	beq.w	21686 <am_hal_ble_blocking_transfer.part.7+0x24a>
   214ba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   214be:	2b00      	cmp	r3, #0
   214c0:	f000 81f2 	beq.w	218a8 <am_hal_ble_blocking_transfer.part.7+0x46c>
   214c4:	2200      	movs	r2, #0
   214c6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   214ca:	b1a3      	cbz	r3, 214f6 <am_hal_ble_blocking_transfer.part.7+0xba>
   214cc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 21770 <am_hal_ble_blocking_transfer.part.7+0x334>
   214d0:	f240 152d 	movw	r5, #301	; 0x12d
   214d4:	2700      	movs	r7, #0
   214d6:	e006      	b.n	214e6 <am_hal_ble_blocking_transfer.part.7+0xaa>
   214d8:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
   214dc:	20a0      	movs	r0, #160	; 0xa0
   214de:	f001 fdbd 	bl	2305c <am_hal_flash_delay>
   214e2:	3d01      	subs	r5, #1
   214e4:	d007      	beq.n	214f6 <am_hal_ble_blocking_transfer.part.7+0xba>
   214e6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   214ea:	2b00      	cmp	r3, #0
   214ec:	d1f4      	bne.n	214d8 <am_hal_ble_blocking_transfer.part.7+0x9c>
   214ee:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   214f2:	0718      	lsls	r0, r3, #28
   214f4:	d4f2      	bmi.n	214dc <am_hal_ble_blocking_transfer.part.7+0xa0>
   214f6:	4a9e      	ldr	r2, [pc, #632]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   214f8:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   214fc:	f043 0302 	orr.w	r3, r3, #2
   21500:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   21504:	2050      	movs	r0, #80	; 0x50
   21506:	f001 fda9 	bl	2305c <am_hal_flash_delay>
   2150a:	6823      	ldr	r3, [r4, #0]
   2150c:	4a9a      	ldr	r2, [pc, #616]	; (21778 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   2150e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21512:	4293      	cmp	r3, r2
   21514:	f000 81d5 	beq.w	218c2 <am_hal_ble_blocking_transfer.part.7+0x486>
   21518:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   2151c:	f8df 9250 	ldr.w	r9, [pc, #592]	; 21770 <am_hal_ble_blocking_transfer.part.7+0x334>
   21520:	2500      	movs	r5, #0
   21522:	46aa      	mov	sl, r5
   21524:	2b00      	cmp	r3, #0
   21526:	f040 80c6 	bne.w	216b6 <am_hal_ble_blocking_transfer.part.7+0x27a>
   2152a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   2152e:	2b00      	cmp	r3, #0
   21530:	f040 80ac 	bne.w	2168c <am_hal_ble_blocking_transfer.part.7+0x250>
   21534:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   21538:	0719      	lsls	r1, r3, #28
   2153a:	f140 80ac 	bpl.w	21696 <am_hal_ble_blocking_transfer.part.7+0x25a>
   2153e:	f001 ff61 	bl	23404 <am_hal_interrupt_master_disable>
   21542:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   21546:	9002      	str	r0, [sp, #8]
   21548:	9802      	ldr	r0, [sp, #8]
   2154a:	2f00      	cmp	r7, #0
   2154c:	f040 80b6 	bne.w	216bc <am_hal_ble_blocking_transfer.part.7+0x280>
   21550:	2301      	movs	r3, #1
   21552:	6463      	str	r3, [r4, #68]	; 0x44
   21554:	f001 ff5a 	bl	2340c <am_hal_interrupt_master_set>
   21558:	4b85      	ldr	r3, [pc, #532]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   2155a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2155e:	f367 0241 	bfi	r2, r7, #1, #1
   21562:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21566:	7b33      	ldrb	r3, [r6, #12]
   21568:	2b00      	cmp	r3, #0
   2156a:	f000 80cb 	beq.w	21704 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   2156e:	2301      	movs	r3, #1
   21570:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   21574:	f104 070c 	add.w	r7, r4, #12
   21578:	6833      	ldr	r3, [r6, #0]
   2157a:	6872      	ldr	r2, [r6, #4]
   2157c:	68b0      	ldr	r0, [r6, #8]
   2157e:	68f1      	ldr	r1, [r6, #12]
   21580:	60e3      	str	r3, [r4, #12]
   21582:	607a      	str	r2, [r7, #4]
   21584:	60b8      	str	r0, [r7, #8]
   21586:	60f9      	str	r1, [r7, #12]
   21588:	6933      	ldr	r3, [r6, #16]
   2158a:	6972      	ldr	r2, [r6, #20]
   2158c:	617a      	str	r2, [r7, #20]
   2158e:	613b      	str	r3, [r7, #16]
   21590:	f001 ff38 	bl	23404 <am_hal_interrupt_master_disable>
   21594:	9001      	str	r0, [sp, #4]
   21596:	6823      	ldr	r3, [r4, #0]
   21598:	4a77      	ldr	r2, [pc, #476]	; (21778 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   2159a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2159e:	4293      	cmp	r3, r2
   215a0:	f000 8197 	beq.w	218d2 <am_hal_ble_blocking_transfer.part.7+0x496>
   215a4:	7ab3      	ldrb	r3, [r6, #10]
   215a6:	2b01      	cmp	r3, #1
   215a8:	f000 8185 	beq.w	218b6 <am_hal_ble_blocking_transfer.part.7+0x47a>
   215ac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   215ae:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   215b2:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 21778 <am_hal_ble_blocking_transfer.part.7+0x33c>
   215b6:	496e      	ldr	r1, [pc, #440]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   215b8:	f04f 0e00 	mov.w	lr, #0
   215bc:	45a9      	cmp	r9, r5
   215be:	d926      	bls.n	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   215c0:	6823      	ldr	r3, [r4, #0]
   215c2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   215c6:	4563      	cmp	r3, ip
   215c8:	d1f8      	bne.n	215bc <am_hal_ble_blocking_transfer.part.7+0x180>
   215ca:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   215ce:	f3c0 4007 	ubfx	r0, r0, #16, #8
   215d2:	2803      	cmp	r0, #3
   215d4:	d9f2      	bls.n	215bc <am_hal_ble_blocking_transfer.part.7+0x180>
   215d6:	4581      	cmp	r9, r0
   215d8:	bf94      	ite	ls
   215da:	ebc5 0009 	rsbls	r0, r5, r9
   215de:	f020 0003 	bichi.w	r0, r0, #3
   215e2:	68e2      	ldr	r2, [r4, #12]
   215e4:	f025 0303 	bic.w	r3, r5, #3
   215e8:	b168      	cbz	r0, 21606 <am_hal_ble_blocking_transfer.part.7+0x1ca>
   215ea:	441a      	add	r2, r3
   215ec:	2300      	movs	r3, #0
   215ee:	3304      	adds	r3, #4
   215f0:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   215f4:	f842 5b04 	str.w	r5, [r2], #4
   215f8:	4283      	cmp	r3, r0
   215fa:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   215fe:	d3f6      	bcc.n	215ee <am_hal_ble_blocking_transfer.part.7+0x1b2>
   21600:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   21602:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   21606:	4405      	add	r5, r0
   21608:	45a9      	cmp	r9, r5
   2160a:	63e5      	str	r5, [r4, #60]	; 0x3c
   2160c:	d8d8      	bhi.n	215c0 <am_hal_ble_blocking_transfer.part.7+0x184>
   2160e:	9801      	ldr	r0, [sp, #4]
   21610:	f001 fefc 	bl	2340c <am_hal_interrupt_master_set>
   21614:	4b56      	ldr	r3, [pc, #344]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21616:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   2161a:	07d2      	lsls	r2, r2, #31
   2161c:	d40d      	bmi.n	2163a <am_hal_ble_blocking_transfer.part.7+0x1fe>
   2161e:	4699      	mov	r9, r3
   21620:	f242 7510 	movw	r5, #10000	; 0x2710
   21624:	e002      	b.n	2162c <am_hal_ble_blocking_transfer.part.7+0x1f0>
   21626:	3d01      	subs	r5, #1
   21628:	f000 8149 	beq.w	218be <am_hal_ble_blocking_transfer.part.7+0x482>
   2162c:	2010      	movs	r0, #16
   2162e:	f001 fd15 	bl	2305c <am_hal_flash_delay>
   21632:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21636:	07db      	lsls	r3, r3, #31
   21638:	d5f5      	bpl.n	21626 <am_hal_ble_blocking_transfer.part.7+0x1ea>
   2163a:	4a4d      	ldr	r2, [pc, #308]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   2163c:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   21640:	f043 0301 	orr.w	r3, r3, #1
   21644:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   21648:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   2164c:	2300      	movs	r3, #0
   2164e:	f041 0102 	orr.w	r1, r1, #2
   21652:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   21656:	603b      	str	r3, [r7, #0]
   21658:	607b      	str	r3, [r7, #4]
   2165a:	60bb      	str	r3, [r7, #8]
   2165c:	60fb      	str	r3, [r7, #12]
   2165e:	613b      	str	r3, [r7, #16]
   21660:	617b      	str	r3, [r7, #20]
   21662:	63e3      	str	r3, [r4, #60]	; 0x3c
   21664:	7ab3      	ldrb	r3, [r6, #10]
   21666:	2b01      	cmp	r3, #1
   21668:	f000 8113 	beq.w	21892 <am_hal_ble_blocking_transfer.part.7+0x456>
   2166c:	2b02      	cmp	r3, #2
   2166e:	f000 8107 	beq.w	21880 <am_hal_ble_blocking_transfer.part.7+0x444>
   21672:	2300      	movs	r3, #0
   21674:	4a3e      	ldr	r2, [pc, #248]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   21676:	4618      	mov	r0, r3
   21678:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   2167c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   21680:	b005      	add	sp, #20
   21682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21686:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   2168a:	e71e      	b.n	214ca <am_hal_ble_blocking_transfer.part.7+0x8e>
   2168c:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21690:	05da      	lsls	r2, r3, #23
   21692:	f53f af54 	bmi.w	2153e <am_hal_ble_blocking_transfer.part.7+0x102>
   21696:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   2169a:	d012      	beq.n	216c2 <am_hal_ble_blocking_transfer.part.7+0x286>
   2169c:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   216a0:	061b      	lsls	r3, r3, #24
   216a2:	d40e      	bmi.n	216c2 <am_hal_ble_blocking_transfer.part.7+0x286>
   216a4:	20a0      	movs	r0, #160	; 0xa0
   216a6:	f001 fcd9 	bl	2305c <am_hal_flash_delay>
   216aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   216ae:	3501      	adds	r5, #1
   216b0:	2b00      	cmp	r3, #0
   216b2:	f43f af3a 	beq.w	2152a <am_hal_ble_blocking_transfer.part.7+0xee>
   216b6:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   216ba:	e740      	b.n	2153e <am_hal_ble_blocking_transfer.part.7+0x102>
   216bc:	f001 fea6 	bl	2340c <am_hal_interrupt_master_set>
   216c0:	e7f0      	b.n	216a4 <am_hal_ble_blocking_transfer.part.7+0x268>
   216c2:	6823      	ldr	r3, [r4, #0]
   216c4:	4a2c      	ldr	r2, [pc, #176]	; (21778 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   216c6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   216ca:	4293      	cmp	r3, r2
   216cc:	f000 811e 	beq.w	2190c <am_hal_ble_blocking_transfer.part.7+0x4d0>
   216d0:	4b27      	ldr	r3, [pc, #156]	; (21770 <am_hal_ble_blocking_transfer.part.7+0x334>)
   216d2:	482a      	ldr	r0, [pc, #168]	; (2177c <am_hal_ble_blocking_transfer.part.7+0x340>)
   216d4:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   216d8:	f36f 0241 	bfc	r2, #1, #1
   216dc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   216e0:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   216e4:	b005      	add	sp, #20
   216e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216ea:	f001 fe8b 	bl	23404 <am_hal_interrupt_master_disable>
   216ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   216f2:	9003      	str	r0, [sp, #12]
   216f4:	9803      	ldr	r0, [sp, #12]
   216f6:	2b00      	cmp	r3, #0
   216f8:	d157      	bne.n	217aa <am_hal_ble_blocking_transfer.part.7+0x36e>
   216fa:	2301      	movs	r3, #1
   216fc:	6463      	str	r3, [r4, #68]	; 0x44
   216fe:	f001 fe85 	bl	2340c <am_hal_interrupt_master_set>
   21702:	e730      	b.n	21566 <am_hal_ble_blocking_transfer.part.7+0x12a>
   21704:	f104 070c 	add.w	r7, r4, #12
   21708:	6833      	ldr	r3, [r6, #0]
   2170a:	6872      	ldr	r2, [r6, #4]
   2170c:	68b0      	ldr	r0, [r6, #8]
   2170e:	68f1      	ldr	r1, [r6, #12]
   21710:	60e3      	str	r3, [r4, #12]
   21712:	607a      	str	r2, [r7, #4]
   21714:	60b8      	str	r0, [r7, #8]
   21716:	60f9      	str	r1, [r7, #12]
   21718:	6933      	ldr	r3, [r6, #16]
   2171a:	6972      	ldr	r2, [r6, #20]
   2171c:	617a      	str	r2, [r7, #20]
   2171e:	613b      	str	r3, [r7, #16]
   21720:	f001 fe70 	bl	23404 <am_hal_interrupt_master_disable>
   21724:	9001      	str	r0, [sp, #4]
   21726:	2c00      	cmp	r4, #0
   21728:	f47f af35 	bne.w	21596 <am_hal_ble_blocking_transfer.part.7+0x15a>
   2172c:	7ab3      	ldrb	r3, [r6, #10]
   2172e:	2b01      	cmp	r3, #1
   21730:	f47f af3c 	bne.w	215ac <am_hal_ble_blocking_transfer.part.7+0x170>
   21734:	6823      	ldr	r3, [r4, #0]
   21736:	4a10      	ldr	r2, [pc, #64]	; (21778 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21738:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   2173c:	68e5      	ldr	r5, [r4, #12]
   2173e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21742:	4293      	cmp	r3, r2
   21744:	d06b      	beq.n	2181e <am_hal_ble_blocking_transfer.part.7+0x3e2>
   21746:	f1bb 0f00 	cmp.w	fp, #0
   2174a:	f43f af60 	beq.w	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   2174e:	f8df a020 	ldr.w	sl, [pc, #32]	; 21770 <am_hal_ble_blocking_transfer.part.7+0x334>
   21752:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   21756:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2175a:	2b03      	cmp	r3, #3
   2175c:	d833      	bhi.n	217c6 <am_hal_ble_blocking_transfer.part.7+0x38a>
   2175e:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   21762:	07d9      	lsls	r1, r3, #31
   21764:	f53f af53 	bmi.w	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21768:	f8df 9014 	ldr.w	r9, [pc, #20]	; 21780 <am_hal_ble_blocking_transfer.part.7+0x344>
   2176c:	e013      	b.n	21796 <am_hal_ble_blocking_transfer.part.7+0x35a>
   2176e:	bf00      	nop
   21770:	5000c000 	.word	0x5000c000
   21774:	08000001 	.word	0x08000001
   21778:	01775230 	.word	0x01775230
   2177c:	08000002 	.word	0x08000002
   21780:	0007a120 	.word	0x0007a120
   21784:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   21788:	07d8      	lsls	r0, r3, #31
   2178a:	f53f af40 	bmi.w	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   2178e:	f1b9 0901 	subs.w	r9, r9, #1
   21792:	f43f af3c 	beq.w	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21796:	2010      	movs	r0, #16
   21798:	f001 fc60 	bl	2305c <am_hal_flash_delay>
   2179c:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   217a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   217a4:	2b03      	cmp	r3, #3
   217a6:	d9ed      	bls.n	21784 <am_hal_ble_blocking_transfer.part.7+0x348>
   217a8:	e00d      	b.n	217c6 <am_hal_ble_blocking_transfer.part.7+0x38a>
   217aa:	f001 fe2f 	bl	2340c <am_hal_interrupt_master_set>
   217ae:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   217b2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   217b6:	e678      	b.n	214aa <am_hal_ble_blocking_transfer.part.7+0x6e>
   217b8:	2b03      	cmp	r3, #3
   217ba:	f240 80b8 	bls.w	2192e <am_hal_ble_blocking_transfer.part.7+0x4f2>
   217be:	f1bb 0f00 	cmp.w	fp, #0
   217c2:	f43f af24 	beq.w	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   217c6:	f855 2b04 	ldr.w	r2, [r5], #4
   217ca:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   217ce:	f1bb 0f03 	cmp.w	fp, #3
   217d2:	f1a3 0304 	sub.w	r3, r3, #4
   217d6:	f1ab 0b04 	sub.w	fp, fp, #4
   217da:	f67f af18 	bls.w	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   217de:	e7eb      	b.n	217b8 <am_hal_ble_blocking_transfer.part.7+0x37c>
   217e0:	2000      	movs	r0, #0
   217e2:	4602      	mov	r2, r0
   217e4:	f896 c00c 	ldrb.w	ip, [r6, #12]
   217e8:	f896 e00a 	ldrb.w	lr, [r6, #10]
   217ec:	8935      	ldrh	r5, [r6, #8]
   217ee:	4952      	ldr	r1, [pc, #328]	; (21938 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   217f0:	015b      	lsls	r3, r3, #5
   217f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
   217f6:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   217fa:	022d      	lsls	r5, r5, #8
   217fc:	4029      	ands	r1, r5
   217fe:	ea4e 0303 	orr.w	r3, lr, r3
   21802:	430b      	orrs	r3, r1
   21804:	494d      	ldr	r1, [pc, #308]	; (2193c <am_hal_ble_blocking_transfer.part.7+0x500>)
   21806:	4313      	orrs	r3, r2
   21808:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   2180c:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   21810:	7ab3      	ldrb	r3, [r6, #10]
   21812:	2b01      	cmp	r3, #1
   21814:	f47f aeca 	bne.w	215ac <am_hal_ble_blocking_transfer.part.7+0x170>
   21818:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   2181c:	68e5      	ldr	r5, [r4, #12]
   2181e:	79f2      	ldrb	r2, [r6, #7]
   21820:	2a03      	cmp	r2, #3
   21822:	d890      	bhi.n	21746 <am_hal_ble_blocking_transfer.part.7+0x30a>
   21824:	e8df f002 	tbb	[pc, r2]
   21828:	1e242802 	.word	0x1e242802
   2182c:	2100      	movs	r1, #0
   2182e:	460b      	mov	r3, r1
   21830:	f896 e00c 	ldrb.w	lr, [r6, #12]
   21834:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   21838:	483f      	ldr	r0, [pc, #252]	; (21938 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   2183a:	0152      	lsls	r2, r2, #5
   2183c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   21840:	f002 0260 	and.w	r2, r2, #96	; 0x60
   21844:	f04e 0e01 	orr.w	lr, lr, #1
   21848:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   2184c:	ea0c 0000 	and.w	r0, ip, r0
   21850:	ea4e 0202 	orr.w	r2, lr, r2
   21854:	4302      	orrs	r2, r0
   21856:	4839      	ldr	r0, [pc, #228]	; (2193c <am_hal_ble_blocking_transfer.part.7+0x500>)
   21858:	4313      	orrs	r3, r2
   2185a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   2185e:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   21862:	e770      	b.n	21746 <am_hal_ble_blocking_transfer.part.7+0x30a>
   21864:	88b1      	ldrh	r1, [r6, #4]
   21866:	79b3      	ldrb	r3, [r6, #6]
   21868:	ba49      	rev16	r1, r1
   2186a:	b289      	uxth	r1, r1
   2186c:	061b      	lsls	r3, r3, #24
   2186e:	e7df      	b.n	21830 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   21870:	7973      	ldrb	r3, [r6, #5]
   21872:	7931      	ldrb	r1, [r6, #4]
   21874:	061b      	lsls	r3, r3, #24
   21876:	e7db      	b.n	21830 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   21878:	7933      	ldrb	r3, [r6, #4]
   2187a:	2100      	movs	r1, #0
   2187c:	061b      	lsls	r3, r3, #24
   2187e:	e7d7      	b.n	21830 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   21880:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21884:	2b00      	cmp	r3, #0
   21886:	f43f aef4 	beq.w	21672 <am_hal_ble_blocking_transfer.part.7+0x236>
   2188a:	2300      	movs	r3, #0
   2188c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21890:	e6ef      	b.n	21672 <am_hal_ble_blocking_transfer.part.7+0x236>
   21892:	6823      	ldr	r3, [r4, #0]
   21894:	492a      	ldr	r1, [pc, #168]	; (21940 <am_hal_ble_blocking_transfer.part.7+0x504>)
   21896:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2189a:	428b      	cmp	r3, r1
   2189c:	d03f      	beq.n	2191e <am_hal_ble_blocking_transfer.part.7+0x4e2>
   2189e:	2301      	movs	r3, #1
   218a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   218a4:	7ab3      	ldrb	r3, [r6, #10]
   218a6:	e6e1      	b.n	2166c <am_hal_ble_blocking_transfer.part.7+0x230>
   218a8:	f64b 3080 	movw	r0, #48000	; 0xbb80
   218ac:	f001 fbd6 	bl	2305c <am_hal_flash_delay>
   218b0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   218b4:	e606      	b.n	214c4 <am_hal_ble_blocking_transfer.part.7+0x88>
   218b6:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   218ba:	68e5      	ldr	r5, [r4, #12]
   218bc:	e743      	b.n	21746 <am_hal_ble_blocking_transfer.part.7+0x30a>
   218be:	4821      	ldr	r0, [pc, #132]	; (21944 <am_hal_ble_blocking_transfer.part.7+0x508>)
   218c0:	e5f3      	b.n	214aa <am_hal_ble_blocking_transfer.part.7+0x6e>
   218c2:	4a1e      	ldr	r2, [pc, #120]	; (2193c <am_hal_ble_blocking_transfer.part.7+0x500>)
   218c4:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   218c8:	f043 030c 	orr.w	r3, r3, #12
   218cc:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   218d0:	e622      	b.n	21518 <am_hal_ble_blocking_transfer.part.7+0xdc>
   218d2:	79f3      	ldrb	r3, [r6, #7]
   218d4:	2b03      	cmp	r3, #3
   218d6:	f63f af29 	bhi.w	2172c <am_hal_ble_blocking_transfer.part.7+0x2f0>
   218da:	a201      	add	r2, pc, #4	; (adr r2, 218e0 <am_hal_ble_blocking_transfer.part.7+0x4a4>)
   218dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   218e0:	000217e1 	.word	0x000217e1
   218e4:	00021905 	.word	0x00021905
   218e8:	000218fd 	.word	0x000218fd
   218ec:	000218f1 	.word	0x000218f1
   218f0:	88b0      	ldrh	r0, [r6, #4]
   218f2:	79b2      	ldrb	r2, [r6, #6]
   218f4:	ba40      	rev16	r0, r0
   218f6:	b280      	uxth	r0, r0
   218f8:	0612      	lsls	r2, r2, #24
   218fa:	e773      	b.n	217e4 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   218fc:	7972      	ldrb	r2, [r6, #5]
   218fe:	7930      	ldrb	r0, [r6, #4]
   21900:	0612      	lsls	r2, r2, #24
   21902:	e76f      	b.n	217e4 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   21904:	7932      	ldrb	r2, [r6, #4]
   21906:	2000      	movs	r0, #0
   21908:	0612      	lsls	r2, r2, #24
   2190a:	e76b      	b.n	217e4 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   2190c:	4b0b      	ldr	r3, [pc, #44]	; (2193c <am_hal_ble_blocking_transfer.part.7+0x500>)
   2190e:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   21912:	2102      	movs	r1, #2
   21914:	f361 0283 	bfi	r2, r1, #2, #2
   21918:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   2191c:	e6d8      	b.n	216d0 <am_hal_ble_blocking_transfer.part.7+0x294>
   2191e:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   21922:	2102      	movs	r1, #2
   21924:	f361 0383 	bfi	r3, r1, #2, #2
   21928:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   2192c:	e7b7      	b.n	2189e <am_hal_ble_blocking_transfer.part.7+0x462>
   2192e:	f1bb 0f00 	cmp.w	fp, #0
   21932:	f47f af0e 	bne.w	21752 <am_hal_ble_blocking_transfer.part.7+0x316>
   21936:	e66a      	b.n	2160e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21938:	000fff00 	.word	0x000fff00
   2193c:	5000c000 	.word	0x5000c000
   21940:	01775230 	.word	0x01775230
   21944:	08000009 	.word	0x08000009

00021948 <am_hal_ble_initialize>:
   21948:	b108      	cbz	r0, 2194e <am_hal_ble_initialize+0x6>
   2194a:	2005      	movs	r0, #5
   2194c:	4770      	bx	lr
   2194e:	b149      	cbz	r1, 21964 <am_hal_ble_initialize+0x1c>
   21950:	b4f0      	push	{r4, r5, r6, r7}
   21952:	4b19      	ldr	r3, [pc, #100]	; (219b8 <am_hal_ble_initialize+0x70>)
   21954:	78dc      	ldrb	r4, [r3, #3]
   21956:	f3c4 0200 	ubfx	r2, r4, #0, #1
   2195a:	b2d0      	uxtb	r0, r2
   2195c:	b120      	cbz	r0, 21968 <am_hal_ble_initialize+0x20>
   2195e:	2007      	movs	r0, #7
   21960:	bcf0      	pop	{r4, r5, r6, r7}
   21962:	4770      	bx	lr
   21964:	2006      	movs	r0, #6
   21966:	4770      	bx	lr
   21968:	f044 0401 	orr.w	r4, r4, #1
   2196c:	70dc      	strb	r4, [r3, #3]
   2196e:	681e      	ldr	r6, [r3, #0]
   21970:	4f12      	ldr	r7, [pc, #72]	; (219bc <am_hal_ble_initialize+0x74>)
   21972:	60d8      	str	r0, [r3, #12]
   21974:	f367 0617 	bfi	r6, r7, #0, #24
   21978:	6258      	str	r0, [r3, #36]	; 0x24
   2197a:	6058      	str	r0, [r3, #4]
   2197c:	63d8      	str	r0, [r3, #60]	; 0x3c
   2197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   21982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   21986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   2198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   2198e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   21992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   21996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   2199a:	721a      	strb	r2, [r3, #8]
   2199c:	601e      	str	r6, [r3, #0]
   2199e:	6118      	str	r0, [r3, #16]
   219a0:	6158      	str	r0, [r3, #20]
   219a2:	6198      	str	r0, [r3, #24]
   219a4:	61d8      	str	r0, [r3, #28]
   219a6:	6218      	str	r0, [r3, #32]
   219a8:	6298      	str	r0, [r3, #40]	; 0x28
   219aa:	62d8      	str	r0, [r3, #44]	; 0x2c
   219ac:	6318      	str	r0, [r3, #48]	; 0x30
   219ae:	6358      	str	r0, [r3, #52]	; 0x34
   219b0:	6398      	str	r0, [r3, #56]	; 0x38
   219b2:	600b      	str	r3, [r1, #0]
   219b4:	e7d4      	b.n	21960 <am_hal_ble_initialize+0x18>
   219b6:	bf00      	nop
   219b8:	1000b394 	.word	0x1000b394
   219bc:	00775230 	.word	0x00775230

000219c0 <am_hal_ble_deinitialize>:
   219c0:	b128      	cbz	r0, 219ce <am_hal_ble_deinitialize+0xe>
   219c2:	6803      	ldr	r3, [r0, #0]
   219c4:	4a13      	ldr	r2, [pc, #76]	; (21a14 <am_hal_ble_deinitialize+0x54>)
   219c6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   219ca:	4293      	cmp	r3, r2
   219cc:	d001      	beq.n	219d2 <am_hal_ble_deinitialize+0x12>
   219ce:	2002      	movs	r0, #2
   219d0:	4770      	bx	lr
   219d2:	78c2      	ldrb	r2, [r0, #3]
   219d4:	2300      	movs	r3, #0
   219d6:	f363 0200 	bfi	r2, r3, #0, #1
   219da:	70c2      	strb	r2, [r0, #3]
   219dc:	6802      	ldr	r2, [r0, #0]
   219de:	60c3      	str	r3, [r0, #12]
   219e0:	f363 0217 	bfi	r2, r3, #0, #24
   219e4:	6103      	str	r3, [r0, #16]
   219e6:	6143      	str	r3, [r0, #20]
   219e8:	6183      	str	r3, [r0, #24]
   219ea:	61c3      	str	r3, [r0, #28]
   219ec:	6203      	str	r3, [r0, #32]
   219ee:	6043      	str	r3, [r0, #4]
   219f0:	63c3      	str	r3, [r0, #60]	; 0x3c
   219f2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   219f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   219fa:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   219fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   21a02:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   21a06:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   21a0a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   21a0e:	6002      	str	r2, [r0, #0]
   21a10:	4618      	mov	r0, r3
   21a12:	4770      	bx	lr
   21a14:	01775230 	.word	0x01775230

00021a18 <am_hal_ble_config>:
   21a18:	b128      	cbz	r0, 21a26 <am_hal_ble_config+0xe>
   21a1a:	6803      	ldr	r3, [r0, #0]
   21a1c:	4a3c      	ldr	r2, [pc, #240]	; (21b10 <am_hal_ble_config+0xf8>)
   21a1e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21a22:	4293      	cmp	r3, r2
   21a24:	d001      	beq.n	21a2a <am_hal_ble_config+0x12>
   21a26:	2002      	movs	r0, #2
   21a28:	4770      	bx	lr
   21a2a:	b4f0      	push	{r4, r5, r6, r7}
   21a2c:	4b39      	ldr	r3, [pc, #228]	; (21b14 <am_hal_ble_config+0xfc>)
   21a2e:	6844      	ldr	r4, [r0, #4]
   21a30:	4d38      	ldr	r5, [pc, #224]	; (21b14 <am_hal_ble_config+0xfc>)
   21a32:	2203      	movs	r2, #3
   21a34:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21a38:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21a3c:	f36f 4251 	bfc	r2, #17, #1
   21a40:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21a44:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21a48:	f36f 4210 	bfc	r2, #16, #1
   21a4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21a50:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21a54:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   21a58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21a5c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21a60:	6888      	ldr	r0, [r1, #8]
   21a62:	f360 220d 	bfi	r2, r0, #8, #6
   21a66:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   21a6a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21a6e:	6848      	ldr	r0, [r1, #4]
   21a70:	f360 0205 	bfi	r2, r0, #0, #6
   21a74:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   21a78:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   21a7c:	f042 0201 	orr.w	r2, r2, #1
   21a80:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   21a84:	680b      	ldr	r3, [r1, #0]
   21a86:	68c8      	ldr	r0, [r1, #12]
   21a88:	4a23      	ldr	r2, [pc, #140]	; (21b18 <am_hal_ble_config+0x100>)
   21a8a:	021b      	lsls	r3, r3, #8
   21a8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   21a90:	2802      	cmp	r0, #2
   21a92:	bf08      	it	eq
   21a94:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   21a98:	f043 0301 	orr.w	r3, r3, #1
   21a9c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   21aa0:	68d3      	ldr	r3, [r2, #12]
   21aa2:	b2db      	uxtb	r3, r3
   21aa4:	2b12      	cmp	r3, #18
   21aa6:	d009      	beq.n	21abc <am_hal_ble_config+0xa4>
   21aa8:	4b1c      	ldr	r3, [pc, #112]	; (21b1c <am_hal_ble_config+0x104>)
   21aaa:	7e8a      	ldrb	r2, [r1, #26]
   21aac:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   21ab0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   21ab4:	2000      	movs	r0, #0
   21ab6:	7222      	strb	r2, [r4, #8]
   21ab8:	bcf0      	pop	{r4, r5, r6, r7}
   21aba:	4770      	bx	lr
   21abc:	4f18      	ldr	r7, [pc, #96]	; (21b20 <am_hal_ble_config+0x108>)
   21abe:	68fa      	ldr	r2, [r7, #12]
   21ac0:	687b      	ldr	r3, [r7, #4]
   21ac2:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   21ac6:	6908      	ldr	r0, [r1, #16]
   21ac8:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   21acc:	6908      	ldr	r0, [r1, #16]
   21ace:	0a00      	lsrs	r0, r0, #8
   21ad0:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   21ad4:	6948      	ldr	r0, [r1, #20]
   21ad6:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   21ada:	6948      	ldr	r0, [r1, #20]
   21adc:	0a00      	lsrs	r0, r0, #8
   21ade:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   21ae2:	7e48      	ldrb	r0, [r1, #25]
   21ae4:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   21ae8:	7e08      	ldrb	r0, [r1, #24]
   21aea:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   21aee:	b16b      	cbz	r3, 21b0c <am_hal_ble_config+0xf4>
   21af0:	4e0c      	ldr	r6, [pc, #48]	; (21b24 <am_hal_ble_config+0x10c>)
   21af2:	18d5      	adds	r5, r2, r3
   21af4:	2300      	movs	r3, #0
   21af6:	f812 0b01 	ldrb.w	r0, [r2], #1
   21afa:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   21afe:	4295      	cmp	r5, r2
   21b00:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   21b04:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   21b08:	b29b      	uxth	r3, r3
   21b0a:	d1f4      	bne.n	21af6 <am_hal_ble_config+0xde>
   21b0c:	60bb      	str	r3, [r7, #8]
   21b0e:	e7cb      	b.n	21aa8 <am_hal_ble_config+0x90>
   21b10:	01775230 	.word	0x01775230
   21b14:	5000c000 	.word	0x5000c000
   21b18:	40020000 	.word	0x40020000
   21b1c:	1000b394 	.word	0x1000b394
   21b20:	10002ef8 	.word	0x10002ef8
   21b24:	00026894 	.word	0x00026894

00021b28 <am_hal_ble_power_control>:
   21b28:	b538      	push	{r3, r4, r5, lr}
   21b2a:	4b52      	ldr	r3, [pc, #328]	; (21c74 <am_hal_ble_power_control+0x14c>)
   21b2c:	68db      	ldr	r3, [r3, #12]
   21b2e:	b2db      	uxtb	r3, r3
   21b30:	2b11      	cmp	r3, #17
   21b32:	d903      	bls.n	21b3c <am_hal_ble_power_control+0x14>
   21b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   21b38:	4a4f      	ldr	r2, [pc, #316]	; (21c78 <am_hal_ble_power_control+0x150>)
   21b3a:	63da      	str	r2, [r3, #60]	; 0x3c
   21b3c:	b128      	cbz	r0, 21b4a <am_hal_ble_power_control+0x22>
   21b3e:	6803      	ldr	r3, [r0, #0]
   21b40:	4a4e      	ldr	r2, [pc, #312]	; (21c7c <am_hal_ble_power_control+0x154>)
   21b42:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21b46:	4293      	cmp	r3, r2
   21b48:	d002      	beq.n	21b50 <am_hal_ble_power_control+0x28>
   21b4a:	2402      	movs	r4, #2
   21b4c:	4620      	mov	r0, r4
   21b4e:	bd38      	pop	{r3, r4, r5, pc}
   21b50:	b9f9      	cbnz	r1, 21b92 <am_hal_ble_power_control+0x6a>
   21b52:	4b4b      	ldr	r3, [pc, #300]	; (21c80 <am_hal_ble_power_control+0x158>)
   21b54:	699b      	ldr	r3, [r3, #24]
   21b56:	05db      	lsls	r3, r3, #23
   21b58:	d454      	bmi.n	21c04 <am_hal_ble_power_control+0xdc>
   21b5a:	4d46      	ldr	r5, [pc, #280]	; (21c74 <am_hal_ble_power_control+0x14c>)
   21b5c:	69ab      	ldr	r3, [r5, #24]
   21b5e:	f043 0301 	orr.w	r3, r3, #1
   21b62:	61ab      	str	r3, [r5, #24]
   21b64:	69ab      	ldr	r3, [r5, #24]
   21b66:	f003 0307 	and.w	r3, r3, #7
   21b6a:	2b07      	cmp	r3, #7
   21b6c:	d00b      	beq.n	21b86 <am_hal_ble_power_control+0x5e>
   21b6e:	4c45      	ldr	r4, [pc, #276]	; (21c84 <am_hal_ble_power_control+0x15c>)
   21b70:	e001      	b.n	21b76 <am_hal_ble_power_control+0x4e>
   21b72:	3c01      	subs	r4, #1
   21b74:	d06b      	beq.n	21c4e <am_hal_ble_power_control+0x126>
   21b76:	2010      	movs	r0, #16
   21b78:	f001 fa70 	bl	2305c <am_hal_flash_delay>
   21b7c:	69ab      	ldr	r3, [r5, #24]
   21b7e:	f003 0307 	and.w	r3, r3, #7
   21b82:	2b07      	cmp	r3, #7
   21b84:	d1f5      	bne.n	21b72 <am_hal_ble_power_control+0x4a>
   21b86:	200e      	movs	r0, #14
   21b88:	f001 fd66 	bl	23658 <am_hal_pwrctrl_periph_enable>
   21b8c:	b128      	cbz	r0, 21b9a <am_hal_ble_power_control+0x72>
   21b8e:	4c3e      	ldr	r4, [pc, #248]	; (21c88 <am_hal_ble_power_control+0x160>)
   21b90:	e7dc      	b.n	21b4c <am_hal_ble_power_control+0x24>
   21b92:	2901      	cmp	r1, #1
   21b94:	d038      	beq.n	21c08 <am_hal_ble_power_control+0xe0>
   21b96:	2407      	movs	r4, #7
   21b98:	e7d8      	b.n	21b4c <am_hal_ble_power_control+0x24>
   21b9a:	4b3c      	ldr	r3, [pc, #240]	; (21c8c <am_hal_ble_power_control+0x164>)
   21b9c:	4935      	ldr	r1, [pc, #212]	; (21c74 <am_hal_ble_power_control+0x14c>)
   21b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21ba2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   21ba6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   21baa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   21bae:	f360 02df 	bfi	r2, r0, #3, #29
   21bb2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21bb6:	68cb      	ldr	r3, [r1, #12]
   21bb8:	b2db      	uxtb	r3, r3
   21bba:	2b11      	cmp	r3, #17
   21bbc:	d949      	bls.n	21c52 <am_hal_ble_power_control+0x12a>
   21bbe:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   21bc2:	f043 0320 	orr.w	r3, r3, #32
   21bc6:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   21bca:	4d30      	ldr	r5, [pc, #192]	; (21c8c <am_hal_ble_power_control+0x164>)
   21bcc:	4830      	ldr	r0, [pc, #192]	; (21c90 <am_hal_ble_power_control+0x168>)
   21bce:	f001 fa45 	bl	2305c <am_hal_flash_delay>
   21bd2:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   21bd6:	f043 0301 	orr.w	r3, r3, #1
   21bda:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   21bde:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21be2:	f3c3 2302 	ubfx	r3, r3, #8, #3
   21be6:	2b03      	cmp	r3, #3
   21be8:	d00c      	beq.n	21c04 <am_hal_ble_power_control+0xdc>
   21bea:	4c2a      	ldr	r4, [pc, #168]	; (21c94 <am_hal_ble_power_control+0x16c>)
   21bec:	e001      	b.n	21bf2 <am_hal_ble_power_control+0xca>
   21bee:	3c01      	subs	r4, #1
   21bf0:	d039      	beq.n	21c66 <am_hal_ble_power_control+0x13e>
   21bf2:	2010      	movs	r0, #16
   21bf4:	f001 fa32 	bl	2305c <am_hal_flash_delay>
   21bf8:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21bfc:	f3c3 2302 	ubfx	r3, r3, #8, #3
   21c00:	2b03      	cmp	r3, #3
   21c02:	d1f4      	bne.n	21bee <am_hal_ble_power_control+0xc6>
   21c04:	2400      	movs	r4, #0
   21c06:	e7a1      	b.n	21b4c <am_hal_ble_power_control+0x24>
   21c08:	4b20      	ldr	r3, [pc, #128]	; (21c8c <am_hal_ble_power_control+0x164>)
   21c0a:	481a      	ldr	r0, [pc, #104]	; (21c74 <am_hal_ble_power_control+0x14c>)
   21c0c:	2200      	movs	r2, #0
   21c0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   21c12:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   21c16:	f362 01df 	bfi	r1, r2, #3, #29
   21c1a:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   21c1e:	68c3      	ldr	r3, [r0, #12]
   21c20:	b2db      	uxtb	r3, r3
   21c22:	2b11      	cmp	r3, #17
   21c24:	d919      	bls.n	21c5a <am_hal_ble_power_control+0x132>
   21c26:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   21c2a:	f362 1345 	bfi	r3, r2, #5, #1
   21c2e:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   21c32:	4b16      	ldr	r3, [pc, #88]	; (21c8c <am_hal_ble_power_control+0x164>)
   21c34:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   21c38:	f36f 0200 	bfc	r2, #0, #1
   21c3c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21c40:	200e      	movs	r0, #14
   21c42:	f001 fd33 	bl	236ac <am_hal_pwrctrl_periph_disable>
   21c46:	4604      	mov	r4, r0
   21c48:	b178      	cbz	r0, 21c6a <am_hal_ble_power_control+0x142>
   21c4a:	4c13      	ldr	r4, [pc, #76]	; (21c98 <am_hal_ble_power_control+0x170>)
   21c4c:	e77e      	b.n	21b4c <am_hal_ble_power_control+0x24>
   21c4e:	4c13      	ldr	r4, [pc, #76]	; (21c9c <am_hal_ble_power_control+0x174>)
   21c50:	e77c      	b.n	21b4c <am_hal_ble_power_control+0x24>
   21c52:	4b13      	ldr	r3, [pc, #76]	; (21ca0 <am_hal_ble_power_control+0x178>)
   21c54:	2204      	movs	r2, #4
   21c56:	601a      	str	r2, [r3, #0]
   21c58:	e7b7      	b.n	21bca <am_hal_ble_power_control+0xa2>
   21c5a:	4a11      	ldr	r2, [pc, #68]	; (21ca0 <am_hal_ble_power_control+0x178>)
   21c5c:	6813      	ldr	r3, [r2, #0]
   21c5e:	f023 0304 	bic.w	r3, r3, #4
   21c62:	6013      	str	r3, [r2, #0]
   21c64:	e7e5      	b.n	21c32 <am_hal_ble_power_control+0x10a>
   21c66:	4c0f      	ldr	r4, [pc, #60]	; (21ca4 <am_hal_ble_power_control+0x17c>)
   21c68:	e770      	b.n	21b4c <am_hal_ble_power_control+0x24>
   21c6a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   21c6e:	f001 f9f5 	bl	2305c <am_hal_flash_delay>
   21c72:	e76b      	b.n	21b4c <am_hal_ble_power_control+0x24>
   21c74:	40020000 	.word	0x40020000
   21c78:	0fc0400f 	.word	0x0fc0400f
   21c7c:	01775230 	.word	0x01775230
   21c80:	40021000 	.word	0x40021000
   21c84:	000186a0 	.word	0x000186a0
   21c88:	08000007 	.word	0x08000007
   21c8c:	5000c000 	.word	0x5000c000
   21c90:	00013880 	.word	0x00013880
   21c94:	000f4240 	.word	0x000f4240
   21c98:	08000006 	.word	0x08000006
   21c9c:	08000005 	.word	0x08000005
   21ca0:	40020198 	.word	0x40020198
   21ca4:	08000008 	.word	0x08000008

00021ca8 <am_hal_ble_patch_copy_end_apply>:
   21ca8:	b128      	cbz	r0, 21cb6 <am_hal_ble_patch_copy_end_apply+0xe>
   21caa:	6803      	ldr	r3, [r0, #0]
   21cac:	4a46      	ldr	r2, [pc, #280]	; (21dc8 <am_hal_ble_patch_copy_end_apply+0x120>)
   21cae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21cb2:	4293      	cmp	r3, r2
   21cb4:	d001      	beq.n	21cba <am_hal_ble_patch_copy_end_apply+0x12>
   21cb6:	2002      	movs	r0, #2
   21cb8:	4770      	bx	lr
   21cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21cbe:	b092      	sub	sp, #72	; 0x48
   21cc0:	2501      	movs	r5, #1
   21cc2:	2400      	movs	r4, #0
   21cc4:	4606      	mov	r6, r0
   21cc6:	21f1      	movs	r1, #241	; 0xf1
   21cc8:	20ee      	movs	r0, #238	; 0xee
   21cca:	2202      	movs	r2, #2
   21ccc:	f88d 5000 	strb.w	r5, [sp]
   21cd0:	f88d 0001 	strb.w	r0, [sp, #1]
   21cd4:	f88d 1002 	strb.w	r1, [sp, #2]
   21cd8:	f88d 2003 	strb.w	r2, [sp, #3]
   21cdc:	f88d 4004 	strb.w	r4, [sp, #4]
   21ce0:	f88d 4005 	strb.w	r4, [sp, #5]
   21ce4:	f241 3588 	movw	r5, #5000	; 0x1388
   21ce8:	f04f 0806 	mov.w	r8, #6
   21cec:	461f      	mov	r7, r3
   21cee:	2201      	movs	r2, #1
   21cf0:	42bb      	cmp	r3, r7
   21cf2:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   21cf6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   21cfa:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   21cfe:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   21d02:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   21d06:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   21d0a:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   21d0e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   21d12:	940e      	str	r4, [sp, #56]	; 0x38
   21d14:	940f      	str	r4, [sp, #60]	; 0x3c
   21d16:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   21d1a:	d029      	beq.n	21d70 <am_hal_ble_patch_copy_end_apply+0xc8>
   21d1c:	4b2b      	ldr	r3, [pc, #172]	; (21dcc <am_hal_ble_patch_copy_end_apply+0x124>)
   21d1e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   21d22:	0612      	lsls	r2, r2, #24
   21d24:	d40c      	bmi.n	21d40 <am_hal_ble_patch_copy_end_apply+0x98>
   21d26:	4d2a      	ldr	r5, [pc, #168]	; (21dd0 <am_hal_ble_patch_copy_end_apply+0x128>)
   21d28:	461c      	mov	r4, r3
   21d2a:	2010      	movs	r0, #16
   21d2c:	f001 f996 	bl	2305c <am_hal_flash_delay>
   21d30:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   21d34:	0619      	lsls	r1, r3, #24
   21d36:	d403      	bmi.n	21d40 <am_hal_ble_patch_copy_end_apply+0x98>
   21d38:	3d01      	subs	r5, #1
   21d3a:	d1f6      	bne.n	21d2a <am_hal_ble_patch_copy_end_apply+0x82>
   21d3c:	4825      	ldr	r0, [pc, #148]	; (21dd4 <am_hal_ble_patch_copy_end_apply+0x12c>)
   21d3e:	e014      	b.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21d40:	6832      	ldr	r2, [r6, #0]
   21d42:	4921      	ldr	r1, [pc, #132]	; (21dc8 <am_hal_ble_patch_copy_end_apply+0x120>)
   21d44:	f8cd d010 	str.w	sp, [sp, #16]
   21d48:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   21d4c:	2300      	movs	r3, #0
   21d4e:	2402      	movs	r4, #2
   21d50:	2005      	movs	r0, #5
   21d52:	428a      	cmp	r2, r1
   21d54:	9306      	str	r3, [sp, #24]
   21d56:	9305      	str	r3, [sp, #20]
   21d58:	9307      	str	r3, [sp, #28]
   21d5a:	9308      	str	r3, [sp, #32]
   21d5c:	9309      	str	r3, [sp, #36]	; 0x24
   21d5e:	f88d 401a 	strb.w	r4, [sp, #26]
   21d62:	f8ad 0018 	strh.w	r0, [sp, #24]
   21d66:	d00f      	beq.n	21d88 <am_hal_ble_patch_copy_end_apply+0xe0>
   21d68:	2002      	movs	r0, #2
   21d6a:	b012      	add	sp, #72	; 0x48
   21d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21d70:	a90a      	add	r1, sp, #40	; 0x28
   21d72:	4630      	mov	r0, r6
   21d74:	f7ff fb62 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   21d78:	2800      	cmp	r0, #0
   21d7a:	d0cf      	beq.n	21d1c <am_hal_ble_patch_copy_end_apply+0x74>
   21d7c:	3d01      	subs	r5, #1
   21d7e:	d0f4      	beq.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21d80:	6833      	ldr	r3, [r6, #0]
   21d82:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21d86:	e7b2      	b.n	21cee <am_hal_ble_patch_copy_end_apply+0x46>
   21d88:	a904      	add	r1, sp, #16
   21d8a:	4630      	mov	r0, r6
   21d8c:	f7ff fb56 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   21d90:	2800      	cmp	r0, #0
   21d92:	d1ea      	bne.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21d94:	f89d 3000 	ldrb.w	r3, [sp]
   21d98:	2b04      	cmp	r3, #4
   21d9a:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   21d9e:	f04f 0001 	mov.w	r0, #1
   21da2:	d1e2      	bne.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21da4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   21da8:	2bee      	cmp	r3, #238	; 0xee
   21daa:	d1de      	bne.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21dac:	f89d 3002 	ldrb.w	r3, [sp, #2]
   21db0:	429a      	cmp	r2, r3
   21db2:	d1da      	bne.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21db4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   21db8:	4283      	cmp	r3, r0
   21dba:	d1d6      	bne.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21dbc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   21dc0:	3000      	adds	r0, #0
   21dc2:	bf18      	it	ne
   21dc4:	2001      	movne	r0, #1
   21dc6:	e7d0      	b.n	21d6a <am_hal_ble_patch_copy_end_apply+0xc2>
   21dc8:	01775230 	.word	0x01775230
   21dcc:	5000c000 	.word	0x5000c000
   21dd0:	000f4240 	.word	0x000f4240
   21dd4:	08000004 	.word	0x08000004

00021dd8 <am_hal_ble_blocking_hci_write>:
   21dd8:	b530      	push	{r4, r5, lr}
   21dda:	b087      	sub	sp, #28
   21ddc:	2400      	movs	r4, #0
   21dde:	b29b      	uxth	r3, r3
   21de0:	2501      	movs	r5, #1
   21de2:	f88d 1004 	strb.w	r1, [sp, #4]
   21de6:	f8ad 3008 	strh.w	r3, [sp, #8]
   21dea:	9200      	str	r2, [sp, #0]
   21dec:	f88d 4005 	strb.w	r4, [sp, #5]
   21df0:	f88d 4006 	strb.w	r4, [sp, #6]
   21df4:	f88d 4007 	strb.w	r4, [sp, #7]
   21df8:	f88d 400b 	strb.w	r4, [sp, #11]
   21dfc:	f88d 400c 	strb.w	r4, [sp, #12]
   21e00:	9404      	str	r4, [sp, #16]
   21e02:	9405      	str	r4, [sp, #20]
   21e04:	f88d 500a 	strb.w	r5, [sp, #10]
   21e08:	b128      	cbz	r0, 21e16 <am_hal_ble_blocking_hci_write+0x3e>
   21e0a:	6802      	ldr	r2, [r0, #0]
   21e0c:	4c09      	ldr	r4, [pc, #36]	; (21e34 <am_hal_ble_blocking_hci_write+0x5c>)
   21e0e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   21e12:	42a2      	cmp	r2, r4
   21e14:	d002      	beq.n	21e1c <am_hal_ble_blocking_hci_write+0x44>
   21e16:	2000      	movs	r0, #0
   21e18:	b007      	add	sp, #28
   21e1a:	bd30      	pop	{r4, r5, pc}
   21e1c:	b939      	cbnz	r1, 21e2e <am_hal_ble_blocking_hci_write+0x56>
   21e1e:	2b00      	cmp	r3, #0
   21e20:	d0f9      	beq.n	21e16 <am_hal_ble_blocking_hci_write+0x3e>
   21e22:	4669      	mov	r1, sp
   21e24:	f7ff fb0a 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   21e28:	2800      	cmp	r0, #0
   21e2a:	d0f4      	beq.n	21e16 <am_hal_ble_blocking_hci_write+0x3e>
   21e2c:	e7f4      	b.n	21e18 <am_hal_ble_blocking_hci_write+0x40>
   21e2e:	f88d 5007 	strb.w	r5, [sp, #7]
   21e32:	e7f4      	b.n	21e1e <am_hal_ble_blocking_hci_write+0x46>
   21e34:	01775230 	.word	0x01775230

00021e38 <am_hal_ble_blocking_hci_read>:
   21e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21e3c:	b089      	sub	sp, #36	; 0x24
   21e3e:	2300      	movs	r3, #0
   21e40:	2502      	movs	r5, #2
   21e42:	ac01      	add	r4, sp, #4
   21e44:	9402      	str	r4, [sp, #8]
   21e46:	f88d 300c 	strb.w	r3, [sp, #12]
   21e4a:	f88d 300d 	strb.w	r3, [sp, #13]
   21e4e:	f88d 300e 	strb.w	r3, [sp, #14]
   21e52:	f88d 300f 	strb.w	r3, [sp, #15]
   21e56:	f88d 3013 	strb.w	r3, [sp, #19]
   21e5a:	f88d 3014 	strb.w	r3, [sp, #20]
   21e5e:	9306      	str	r3, [sp, #24]
   21e60:	9307      	str	r3, [sp, #28]
   21e62:	f8ad 5010 	strh.w	r5, [sp, #16]
   21e66:	f88d 5012 	strb.w	r5, [sp, #18]
   21e6a:	b128      	cbz	r0, 21e78 <am_hal_ble_blocking_hci_read+0x40>
   21e6c:	6804      	ldr	r4, [r0, #0]
   21e6e:	4e1f      	ldr	r6, [pc, #124]	; (21eec <am_hal_ble_blocking_hci_read+0xb4>)
   21e70:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   21e74:	42b4      	cmp	r4, r6
   21e76:	d003      	beq.n	21e80 <am_hal_ble_blocking_hci_read+0x48>
   21e78:	2000      	movs	r0, #0
   21e7a:	b009      	add	sp, #36	; 0x24
   21e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21e80:	460f      	mov	r7, r1
   21e82:	491b      	ldr	r1, [pc, #108]	; (21ef0 <am_hal_ble_blocking_hci_read+0xb8>)
   21e84:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   21e88:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   21e8c:	4681      	mov	r9, r0
   21e8e:	4690      	mov	r8, r2
   21e90:	b92e      	cbnz	r6, 21e9e <am_hal_ble_blocking_hci_read+0x66>
   21e92:	f1b8 0f00 	cmp.w	r8, #0
   21e96:	d0ef      	beq.n	21e78 <am_hal_ble_blocking_hci_read+0x40>
   21e98:	f8c8 6000 	str.w	r6, [r8]
   21e9c:	e7ec      	b.n	21e78 <am_hal_ble_blocking_hci_read+0x40>
   21e9e:	a902      	add	r1, sp, #8
   21ea0:	f7ff facc 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   21ea4:	2800      	cmp	r0, #0
   21ea6:	d1e8      	bne.n	21e7a <am_hal_ble_blocking_hci_read+0x42>
   21ea8:	f89d 0005 	ldrb.w	r0, [sp, #5]
   21eac:	f89d 1004 	ldrb.w	r1, [sp, #4]
   21eb0:	9702      	str	r7, [sp, #8]
   21eb2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   21eb6:	b289      	uxth	r1, r1
   21eb8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   21ebc:	f8ad 1010 	strh.w	r1, [sp, #16]
   21ec0:	d901      	bls.n	21ec6 <am_hal_ble_blocking_hci_read+0x8e>
   21ec2:	2005      	movs	r0, #5
   21ec4:	e7d9      	b.n	21e7a <am_hal_ble_blocking_hci_read+0x42>
   21ec6:	f8d9 0000 	ldr.w	r0, [r9]
   21eca:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   21ece:	42a0      	cmp	r0, r4
   21ed0:	d001      	beq.n	21ed6 <am_hal_ble_blocking_hci_read+0x9e>
   21ed2:	4628      	mov	r0, r5
   21ed4:	e7d1      	b.n	21e7a <am_hal_ble_blocking_hci_read+0x42>
   21ed6:	b129      	cbz	r1, 21ee4 <am_hal_ble_blocking_hci_read+0xac>
   21ed8:	a902      	add	r1, sp, #8
   21eda:	4648      	mov	r0, r9
   21edc:	f7ff faae 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   21ee0:	2800      	cmp	r0, #0
   21ee2:	d1ca      	bne.n	21e7a <am_hal_ble_blocking_hci_read+0x42>
   21ee4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   21ee8:	e7d3      	b.n	21e92 <am_hal_ble_blocking_hci_read+0x5a>
   21eea:	bf00      	nop
   21eec:	01775230 	.word	0x01775230
   21ef0:	5000c000 	.word	0x5000c000

00021ef4 <am_hal_ble_blocking_transfer>:
   21ef4:	b128      	cbz	r0, 21f02 <am_hal_ble_blocking_transfer+0xe>
   21ef6:	6803      	ldr	r3, [r0, #0]
   21ef8:	4a08      	ldr	r2, [pc, #32]	; (21f1c <am_hal_ble_blocking_transfer+0x28>)
   21efa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21efe:	4293      	cmp	r3, r2
   21f00:	d001      	beq.n	21f06 <am_hal_ble_blocking_transfer+0x12>
   21f02:	2002      	movs	r0, #2
   21f04:	4770      	bx	lr
   21f06:	890b      	ldrh	r3, [r1, #8]
   21f08:	b410      	push	{r4}
   21f0a:	b11b      	cbz	r3, 21f14 <am_hal_ble_blocking_transfer+0x20>
   21f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
   21f10:	f7ff ba94 	b.w	2143c <am_hal_ble_blocking_transfer.part.7>
   21f14:	4618      	mov	r0, r3
   21f16:	f85d 4b04 	ldr.w	r4, [sp], #4
   21f1a:	4770      	bx	lr
   21f1c:	01775230 	.word	0x01775230

00021f20 <am_hal_ble_patch_apply>:
   21f20:	b128      	cbz	r0, 21f2e <am_hal_ble_patch_apply+0xe>
   21f22:	6803      	ldr	r3, [r0, #0]
   21f24:	4aae      	ldr	r2, [pc, #696]	; (221e0 <am_hal_ble_patch_apply+0x2c0>)
   21f26:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21f2a:	4293      	cmp	r3, r2
   21f2c:	d002      	beq.n	21f34 <am_hal_ble_patch_apply+0x14>
   21f2e:	2302      	movs	r3, #2
   21f30:	4618      	mov	r0, r3
   21f32:	4770      	bx	lr
   21f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f38:	684a      	ldr	r2, [r1, #4]
   21f3a:	680d      	ldr	r5, [r1, #0]
   21f3c:	b095      	sub	sp, #84	; 0x54
   21f3e:	2701      	movs	r7, #1
   21f40:	4604      	mov	r4, r0
   21f42:	460e      	mov	r6, r1
   21f44:	f88d 200c 	strb.w	r2, [sp, #12]
   21f48:	20f1      	movs	r0, #241	; 0xf1
   21f4a:	0a12      	lsrs	r2, r2, #8
   21f4c:	2102      	movs	r1, #2
   21f4e:	f88d 7008 	strb.w	r7, [sp, #8]
   21f52:	f88d 5009 	strb.w	r5, [sp, #9]
   21f56:	f88d 200d 	strb.w	r2, [sp, #13]
   21f5a:	f88d 000a 	strb.w	r0, [sp, #10]
   21f5e:	f88d 100b 	strb.w	r1, [sp, #11]
   21f62:	f241 3788 	movw	r7, #5000	; 0x1388
   21f66:	2500      	movs	r5, #0
   21f68:	f04f 0906 	mov.w	r9, #6
   21f6c:	4698      	mov	r8, r3
   21f6e:	2201      	movs	r2, #1
   21f70:	a902      	add	r1, sp, #8
   21f72:	4543      	cmp	r3, r8
   21f74:	910c      	str	r1, [sp, #48]	; 0x30
   21f76:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   21f7a:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   21f7e:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   21f82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   21f86:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   21f8a:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   21f8e:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   21f92:	9510      	str	r5, [sp, #64]	; 0x40
   21f94:	9511      	str	r5, [sp, #68]	; 0x44
   21f96:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   21f9a:	d02b      	beq.n	21ff4 <am_hal_ble_patch_apply+0xd4>
   21f9c:	4b91      	ldr	r3, [pc, #580]	; (221e4 <am_hal_ble_patch_apply+0x2c4>)
   21f9e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   21fa2:	0612      	lsls	r2, r2, #24
   21fa4:	d40c      	bmi.n	21fc0 <am_hal_ble_patch_apply+0xa0>
   21fa6:	4f90      	ldr	r7, [pc, #576]	; (221e8 <am_hal_ble_patch_apply+0x2c8>)
   21fa8:	461d      	mov	r5, r3
   21faa:	2010      	movs	r0, #16
   21fac:	f001 f856 	bl	2305c <am_hal_flash_delay>
   21fb0:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21fb4:	061b      	lsls	r3, r3, #24
   21fb6:	d403      	bmi.n	21fc0 <am_hal_ble_patch_apply+0xa0>
   21fb8:	3f01      	subs	r7, #1
   21fba:	d1f6      	bne.n	21faa <am_hal_ble_patch_apply+0x8a>
   21fbc:	4b8b      	ldr	r3, [pc, #556]	; (221ec <am_hal_ble_patch_apply+0x2cc>)
   21fbe:	e015      	b.n	21fec <am_hal_ble_patch_apply+0xcc>
   21fc0:	6825      	ldr	r5, [r4, #0]
   21fc2:	4a87      	ldr	r2, [pc, #540]	; (221e0 <am_hal_ble_patch_apply+0x2c0>)
   21fc4:	ab02      	add	r3, sp, #8
   21fc6:	9306      	str	r3, [sp, #24]
   21fc8:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   21fcc:	2300      	movs	r3, #0
   21fce:	9308      	str	r3, [sp, #32]
   21fd0:	2102      	movs	r1, #2
   21fd2:	9307      	str	r3, [sp, #28]
   21fd4:	9309      	str	r3, [sp, #36]	; 0x24
   21fd6:	930a      	str	r3, [sp, #40]	; 0x28
   21fd8:	930b      	str	r3, [sp, #44]	; 0x2c
   21fda:	4295      	cmp	r5, r2
   21fdc:	f04f 0305 	mov.w	r3, #5
   21fe0:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   21fe4:	f8ad 3020 	strh.w	r3, [sp, #32]
   21fe8:	d011      	beq.n	2200e <am_hal_ble_patch_apply+0xee>
   21fea:	2302      	movs	r3, #2
   21fec:	4618      	mov	r0, r3
   21fee:	b015      	add	sp, #84	; 0x54
   21ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ff4:	a90c      	add	r1, sp, #48	; 0x30
   21ff6:	4620      	mov	r0, r4
   21ff8:	f7ff fa20 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   21ffc:	4603      	mov	r3, r0
   21ffe:	2800      	cmp	r0, #0
   22000:	d0cc      	beq.n	21f9c <am_hal_ble_patch_apply+0x7c>
   22002:	3f01      	subs	r7, #1
   22004:	d0f2      	beq.n	21fec <am_hal_ble_patch_apply+0xcc>
   22006:	6823      	ldr	r3, [r4, #0]
   22008:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2200c:	e7af      	b.n	21f6e <am_hal_ble_patch_apply+0x4e>
   2200e:	a906      	add	r1, sp, #24
   22010:	4620      	mov	r0, r4
   22012:	f7ff fa13 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   22016:	4603      	mov	r3, r0
   22018:	2800      	cmp	r0, #0
   2201a:	d1e7      	bne.n	21fec <am_hal_ble_patch_apply+0xcc>
   2201c:	2304      	movs	r3, #4
   2201e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   22022:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   22026:	23f1      	movs	r3, #241	; 0xf1
   22028:	7832      	ldrb	r2, [r6, #0]
   2202a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   2202e:	2904      	cmp	r1, #4
   22030:	f04f 0301 	mov.w	r3, #1
   22034:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   22038:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   2203c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   22040:	f040 811a 	bne.w	22278 <am_hal_ble_patch_apply+0x358>
   22044:	f89d 1009 	ldrb.w	r1, [sp, #9]
   22048:	b2d3      	uxtb	r3, r2
   2204a:	4299      	cmp	r1, r3
   2204c:	f040 8114 	bne.w	22278 <am_hal_ble_patch_apply+0x358>
   22050:	f89d 300a 	ldrb.w	r3, [sp, #10]
   22054:	2bf1      	cmp	r3, #241	; 0xf1
   22056:	f040 810f 	bne.w	22278 <am_hal_ble_patch_apply+0x358>
   2205a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2205e:	2b01      	cmp	r3, #1
   22060:	f040 810a 	bne.w	22278 <am_hal_ble_patch_apply+0x358>
   22064:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22068:	2b00      	cmp	r3, #0
   2206a:	f040 8105 	bne.w	22278 <am_hal_ble_patch_apply+0x358>
   2206e:	f8d6 a004 	ldr.w	sl, [r6, #4]
   22072:	f1ba 0f00 	cmp.w	sl, #0
   22076:	f000 8091 	beq.w	2219c <am_hal_ble_patch_apply+0x27c>
   2207a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 221f4 <am_hal_ble_patch_apply+0x2d4>
   2207e:	4f59      	ldr	r7, [pc, #356]	; (221e4 <am_hal_ble_patch_apply+0x2c4>)
   22080:	9501      	str	r5, [sp, #4]
   22082:	469b      	mov	fp, r3
   22084:	2201      	movs	r2, #1
   22086:	f889 2000 	strb.w	r2, [r9]
   2208a:	6833      	ldr	r3, [r6, #0]
   2208c:	f889 3001 	strb.w	r3, [r9, #1]
   22090:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   22094:	46d0      	mov	r8, sl
   22096:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   2209a:	bf28      	it	cs
   2209c:	f04f 0880 	movcs.w	r8, #128	; 0x80
   220a0:	f889 3002 	strb.w	r3, [r9, #2]
   220a4:	f889 8003 	strb.w	r8, [r9, #3]
   220a8:	68f1      	ldr	r1, [r6, #12]
   220aa:	4851      	ldr	r0, [pc, #324]	; (221f0 <am_hal_ble_patch_apply+0x2d0>)
   220ac:	f8cd 9018 	str.w	r9, [sp, #24]
   220b0:	2300      	movs	r3, #0
   220b2:	f02b 0503 	bic.w	r5, fp, #3
   220b6:	9308      	str	r3, [sp, #32]
   220b8:	4429      	add	r1, r5
   220ba:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   220be:	f108 0504 	add.w	r5, r8, #4
   220c2:	4642      	mov	r2, r8
   220c4:	9307      	str	r3, [sp, #28]
   220c6:	9309      	str	r3, [sp, #36]	; 0x24
   220c8:	930a      	str	r3, [sp, #40]	; 0x28
   220ca:	930b      	str	r3, [sp, #44]	; 0x2c
   220cc:	f8ad 5020 	strh.w	r5, [sp, #32]
   220d0:	f7ea f846 	bl	c160 <memcpy>
   220d4:	6823      	ldr	r3, [r4, #0]
   220d6:	9a01      	ldr	r2, [sp, #4]
   220d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   220dc:	4293      	cmp	r3, r2
   220de:	d184      	bne.n	21fea <am_hal_ble_patch_apply+0xca>
   220e0:	a906      	add	r1, sp, #24
   220e2:	4620      	mov	r0, r4
   220e4:	f7ff f9aa 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   220e8:	4603      	mov	r3, r0
   220ea:	2800      	cmp	r0, #0
   220ec:	f47f af7e 	bne.w	21fec <am_hal_ble_patch_apply+0xcc>
   220f0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   220f4:	061d      	lsls	r5, r3, #24
   220f6:	d40b      	bmi.n	22110 <am_hal_ble_patch_apply+0x1f0>
   220f8:	4d3b      	ldr	r5, [pc, #236]	; (221e8 <am_hal_ble_patch_apply+0x2c8>)
   220fa:	e002      	b.n	22102 <am_hal_ble_patch_apply+0x1e2>
   220fc:	3d01      	subs	r5, #1
   220fe:	f43f af5d 	beq.w	21fbc <am_hal_ble_patch_apply+0x9c>
   22102:	2010      	movs	r0, #16
   22104:	f000 ffaa 	bl	2305c <am_hal_flash_delay>
   22108:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   2210c:	0618      	lsls	r0, r3, #24
   2210e:	d5f5      	bpl.n	220fc <am_hal_ble_patch_apply+0x1dc>
   22110:	ab02      	add	r3, sp, #8
   22112:	9306      	str	r3, [sp, #24]
   22114:	2300      	movs	r3, #0
   22116:	9308      	str	r3, [sp, #32]
   22118:	6822      	ldr	r2, [r4, #0]
   2211a:	9307      	str	r3, [sp, #28]
   2211c:	9309      	str	r3, [sp, #36]	; 0x24
   2211e:	930a      	str	r3, [sp, #40]	; 0x28
   22120:	930b      	str	r3, [sp, #44]	; 0x2c
   22122:	2305      	movs	r3, #5
   22124:	f8ad 3020 	strh.w	r3, [sp, #32]
   22128:	9b01      	ldr	r3, [sp, #4]
   2212a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2212e:	2102      	movs	r1, #2
   22130:	429a      	cmp	r2, r3
   22132:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   22136:	f47f af58 	bne.w	21fea <am_hal_ble_patch_apply+0xca>
   2213a:	a906      	add	r1, sp, #24
   2213c:	4620      	mov	r0, r4
   2213e:	f7ff f97d 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   22142:	4603      	mov	r3, r0
   22144:	2800      	cmp	r0, #0
   22146:	f47f af51 	bne.w	21fec <am_hal_ble_patch_apply+0xcc>
   2214a:	2304      	movs	r3, #4
   2214c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   22150:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   22154:	23f2      	movs	r3, #242	; 0xf2
   22156:	7832      	ldrb	r2, [r6, #0]
   22158:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   2215c:	2904      	cmp	r1, #4
   2215e:	f04f 0301 	mov.w	r3, #1
   22162:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   22166:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   2216a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2216e:	f040 8083 	bne.w	22278 <am_hal_ble_patch_apply+0x358>
   22172:	f89d 3009 	ldrb.w	r3, [sp, #9]
   22176:	4293      	cmp	r3, r2
   22178:	d17e      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   2217a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2217e:	2bf2      	cmp	r3, #242	; 0xf2
   22180:	d17a      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   22182:	f89d 300b 	ldrb.w	r3, [sp, #11]
   22186:	2b01      	cmp	r3, #1
   22188:	d176      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   2218a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2218e:	2b00      	cmp	r3, #0
   22190:	d172      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   22192:	ebba 0a08 	subs.w	sl, sl, r8
   22196:	44c3      	add	fp, r8
   22198:	f47f af74 	bne.w	22084 <am_hal_ble_patch_apply+0x164>
   2219c:	68b3      	ldr	r3, [r6, #8]
   2219e:	f88d 2009 	strb.w	r2, [sp, #9]
   221a2:	2101      	movs	r1, #1
   221a4:	0a1a      	lsrs	r2, r3, #8
   221a6:	20f3      	movs	r0, #243	; 0xf3
   221a8:	f88d 300c 	strb.w	r3, [sp, #12]
   221ac:	f88d 200d 	strb.w	r2, [sp, #13]
   221b0:	2306      	movs	r3, #6
   221b2:	f88d 1008 	strb.w	r1, [sp, #8]
   221b6:	f88d 000a 	strb.w	r0, [sp, #10]
   221ba:	2502      	movs	r5, #2
   221bc:	aa02      	add	r2, sp, #8
   221be:	2100      	movs	r1, #0
   221c0:	4620      	mov	r0, r4
   221c2:	f88d 500b 	strb.w	r5, [sp, #11]
   221c6:	f7ff fe07 	bl	21dd8 <am_hal_ble_blocking_hci_write>
   221ca:	4603      	mov	r3, r0
   221cc:	2800      	cmp	r0, #0
   221ce:	d153      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   221d0:	4f04      	ldr	r7, [pc, #16]	; (221e4 <am_hal_ble_patch_apply+0x2c4>)
   221d2:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   221d6:	0611      	lsls	r1, r2, #24
   221d8:	d41b      	bmi.n	22212 <am_hal_ble_patch_apply+0x2f2>
   221da:	4d03      	ldr	r5, [pc, #12]	; (221e8 <am_hal_ble_patch_apply+0x2c8>)
   221dc:	e00f      	b.n	221fe <am_hal_ble_patch_apply+0x2de>
   221de:	bf00      	nop
   221e0:	01775230 	.word	0x01775230
   221e4:	5000c000 	.word	0x5000c000
   221e8:	000f4240 	.word	0x000f4240
   221ec:	08000004 	.word	0x08000004
   221f0:	1000b3e0 	.word	0x1000b3e0
   221f4:	1000b3dc 	.word	0x1000b3dc
   221f8:	3d01      	subs	r5, #1
   221fa:	f43f aedf 	beq.w	21fbc <am_hal_ble_patch_apply+0x9c>
   221fe:	2010      	movs	r0, #16
   22200:	9301      	str	r3, [sp, #4]
   22202:	f000 ff2b 	bl	2305c <am_hal_flash_delay>
   22206:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   2220a:	9b01      	ldr	r3, [sp, #4]
   2220c:	f012 0f80 	tst.w	r2, #128	; 0x80
   22210:	d0f2      	beq.n	221f8 <am_hal_ble_patch_apply+0x2d8>
   22212:	2200      	movs	r2, #0
   22214:	9301      	str	r3, [sp, #4]
   22216:	4620      	mov	r0, r4
   22218:	ab02      	add	r3, sp, #8
   2221a:	a906      	add	r1, sp, #24
   2221c:	2502      	movs	r5, #2
   2221e:	2405      	movs	r4, #5
   22220:	9208      	str	r2, [sp, #32]
   22222:	9306      	str	r3, [sp, #24]
   22224:	9207      	str	r2, [sp, #28]
   22226:	9209      	str	r2, [sp, #36]	; 0x24
   22228:	920a      	str	r2, [sp, #40]	; 0x28
   2222a:	920b      	str	r2, [sp, #44]	; 0x2c
   2222c:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   22230:	f8ad 4020 	strh.w	r4, [sp, #32]
   22234:	f7ff fe5e 	bl	21ef4 <am_hal_ble_blocking_transfer>
   22238:	9b01      	ldr	r3, [sp, #4]
   2223a:	b9f8      	cbnz	r0, 2227c <am_hal_ble_patch_apply+0x35c>
   2223c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   22240:	6831      	ldr	r1, [r6, #0]
   22242:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   22246:	2a04      	cmp	r2, #4
   22248:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   2224c:	f04f 0101 	mov.w	r1, #1
   22250:	d112      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   22252:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   22256:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2225a:	4294      	cmp	r4, r2
   2225c:	d10c      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   2225e:	f89d 200a 	ldrb.w	r2, [sp, #10]
   22262:	4290      	cmp	r0, r2
   22264:	d108      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   22266:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2226a:	4291      	cmp	r1, r2
   2226c:	d104      	bne.n	22278 <am_hal_ble_patch_apply+0x358>
   2226e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   22272:	2a00      	cmp	r2, #0
   22274:	f43f aeba 	beq.w	21fec <am_hal_ble_patch_apply+0xcc>
   22278:	2301      	movs	r3, #1
   2227a:	e6b7      	b.n	21fec <am_hal_ble_patch_apply+0xcc>
   2227c:	4603      	mov	r3, r0
   2227e:	e6b5      	b.n	21fec <am_hal_ble_patch_apply+0xcc>

00022280 <am_hal_ble_int_enable>:
   22280:	b128      	cbz	r0, 2228e <am_hal_ble_int_enable+0xe>
   22282:	6803      	ldr	r3, [r0, #0]
   22284:	4a0c      	ldr	r2, [pc, #48]	; (222b8 <am_hal_ble_int_enable+0x38>)
   22286:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2228a:	4293      	cmp	r3, r2
   2228c:	d001      	beq.n	22292 <am_hal_ble_int_enable+0x12>
   2228e:	2002      	movs	r0, #2
   22290:	4770      	bx	lr
   22292:	b510      	push	{r4, lr}
   22294:	b082      	sub	sp, #8
   22296:	460c      	mov	r4, r1
   22298:	f001 f8b4 	bl	23404 <am_hal_interrupt_master_disable>
   2229c:	4b07      	ldr	r3, [pc, #28]	; (222bc <am_hal_ble_int_enable+0x3c>)
   2229e:	9001      	str	r0, [sp, #4]
   222a0:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   222a4:	4321      	orrs	r1, r4
   222a6:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   222aa:	9801      	ldr	r0, [sp, #4]
   222ac:	f001 f8ae 	bl	2340c <am_hal_interrupt_master_set>
   222b0:	2000      	movs	r0, #0
   222b2:	b002      	add	sp, #8
   222b4:	bd10      	pop	{r4, pc}
   222b6:	bf00      	nop
   222b8:	01775230 	.word	0x01775230
   222bc:	5000c000 	.word	0x5000c000

000222c0 <am_hal_ble_int_status>:
   222c0:	4b05      	ldr	r3, [pc, #20]	; (222d8 <am_hal_ble_int_status+0x18>)
   222c2:	b911      	cbnz	r1, 222ca <am_hal_ble_int_status+0xa>
   222c4:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   222c8:	4770      	bx	lr
   222ca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   222ce:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   222d2:	4018      	ands	r0, r3
   222d4:	4770      	bx	lr
   222d6:	bf00      	nop
   222d8:	5000c000 	.word	0x5000c000

000222dc <am_hal_ble_int_clear>:
   222dc:	b128      	cbz	r0, 222ea <am_hal_ble_int_clear+0xe>
   222de:	6803      	ldr	r3, [r0, #0]
   222e0:	4a05      	ldr	r2, [pc, #20]	; (222f8 <am_hal_ble_int_clear+0x1c>)
   222e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   222e6:	4293      	cmp	r3, r2
   222e8:	d001      	beq.n	222ee <am_hal_ble_int_clear+0x12>
   222ea:	2002      	movs	r0, #2
   222ec:	4770      	bx	lr
   222ee:	4b03      	ldr	r3, [pc, #12]	; (222fc <am_hal_ble_int_clear+0x20>)
   222f0:	2000      	movs	r0, #0
   222f2:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   222f6:	4770      	bx	lr
   222f8:	01775230 	.word	0x01775230
   222fc:	5000c000 	.word	0x5000c000

00022300 <am_hal_ble_plf_reg_read>:
   22300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22304:	b092      	sub	sp, #72	; 0x48
   22306:	0a0e      	lsrs	r6, r1, #8
   22308:	0c0d      	lsrs	r5, r1, #16
   2230a:	2300      	movs	r3, #0
   2230c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   22310:	f88d 100c 	strb.w	r1, [sp, #12]
   22314:	f88d 600d 	strb.w	r6, [sp, #13]
   22318:	f88d 500e 	strb.w	r5, [sp, #14]
   2231c:	2401      	movs	r4, #1
   2231e:	2702      	movs	r7, #2
   22320:	26fd      	movs	r6, #253	; 0xfd
   22322:	2504      	movs	r5, #4
   22324:	4952      	ldr	r1, [pc, #328]	; (22470 <am_hal_ble_plf_reg_read+0x170>)
   22326:	f88d e00f 	strb.w	lr, [sp, #15]
   2232a:	f88d 7009 	strb.w	r7, [sp, #9]
   2232e:	f88d 500b 	strb.w	r5, [sp, #11]
   22332:	930a      	str	r3, [sp, #40]	; 0x28
   22334:	930b      	str	r3, [sp, #44]	; 0x2c
   22336:	930c      	str	r3, [sp, #48]	; 0x30
   22338:	f88d 4008 	strb.w	r4, [sp, #8]
   2233c:	f88d 600a 	strb.w	r6, [sp, #10]
   22340:	f10d 0e08 	add.w	lr, sp, #8
   22344:	2508      	movs	r5, #8
   22346:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   2234a:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   2234e:	4617      	mov	r7, r2
   22350:	f88d 3014 	strb.w	r3, [sp, #20]
   22354:	f88d 3015 	strb.w	r3, [sp, #21]
   22358:	f88d 3016 	strb.w	r3, [sp, #22]
   2235c:	f88d 3017 	strb.w	r3, [sp, #23]
   22360:	f88d 401a 	strb.w	r4, [sp, #26]
   22364:	f88d 301b 	strb.w	r3, [sp, #27]
   22368:	f88d 301c 	strb.w	r3, [sp, #28]
   2236c:	9308      	str	r3, [sp, #32]
   2236e:	9309      	str	r3, [sp, #36]	; 0x24
   22370:	f8cd e010 	str.w	lr, [sp, #16]
   22374:	f8ad 5018 	strh.w	r5, [sp, #24]
   22378:	4680      	mov	r8, r0
   2237a:	b128      	cbz	r0, 22388 <am_hal_ble_plf_reg_read+0x88>
   2237c:	6803      	ldr	r3, [r0, #0]
   2237e:	4a3d      	ldr	r2, [pc, #244]	; (22474 <am_hal_ble_plf_reg_read+0x174>)
   22380:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22384:	4293      	cmp	r3, r2
   22386:	d06e      	beq.n	22466 <am_hal_ble_plf_reg_read+0x166>
   22388:	4d39      	ldr	r5, [pc, #228]	; (22470 <am_hal_ble_plf_reg_read+0x170>)
   2238a:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2238e:	f043 0302 	orr.w	r3, r3, #2
   22392:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   22396:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2239a:	0619      	lsls	r1, r3, #24
   2239c:	d40a      	bmi.n	223b4 <am_hal_ble_plf_reg_read+0xb4>
   2239e:	4c36      	ldr	r4, [pc, #216]	; (22478 <am_hal_ble_plf_reg_read+0x178>)
   223a0:	e001      	b.n	223a6 <am_hal_ble_plf_reg_read+0xa6>
   223a2:	3c01      	subs	r4, #1
   223a4:	d05b      	beq.n	2245e <am_hal_ble_plf_reg_read+0x15e>
   223a6:	2010      	movs	r0, #16
   223a8:	f000 fe58 	bl	2305c <am_hal_flash_delay>
   223ac:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   223b0:	061a      	lsls	r2, r3, #24
   223b2:	d5f6      	bpl.n	223a2 <am_hal_ble_plf_reg_read+0xa2>
   223b4:	2300      	movs	r3, #0
   223b6:	2202      	movs	r2, #2
   223b8:	a901      	add	r1, sp, #4
   223ba:	9104      	str	r1, [sp, #16]
   223bc:	f88d 3014 	strb.w	r3, [sp, #20]
   223c0:	f88d 3015 	strb.w	r3, [sp, #21]
   223c4:	f88d 3016 	strb.w	r3, [sp, #22]
   223c8:	f88d 3017 	strb.w	r3, [sp, #23]
   223cc:	f88d 301b 	strb.w	r3, [sp, #27]
   223d0:	f88d 301c 	strb.w	r3, [sp, #28]
   223d4:	9308      	str	r3, [sp, #32]
   223d6:	9309      	str	r3, [sp, #36]	; 0x24
   223d8:	f8ad 2018 	strh.w	r2, [sp, #24]
   223dc:	f88d 201a 	strb.w	r2, [sp, #26]
   223e0:	f1b8 0f00 	cmp.w	r8, #0
   223e4:	d006      	beq.n	223f4 <am_hal_ble_plf_reg_read+0xf4>
   223e6:	f8d8 4000 	ldr.w	r4, [r8]
   223ea:	4b22      	ldr	r3, [pc, #136]	; (22474 <am_hal_ble_plf_reg_read+0x174>)
   223ec:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   223f0:	429c      	cmp	r4, r3
   223f2:	d00e      	beq.n	22412 <am_hal_ble_plf_reg_read+0x112>
   223f4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   223f8:	990c      	ldr	r1, [sp, #48]	; 0x30
   223fa:	4a1d      	ldr	r2, [pc, #116]	; (22470 <am_hal_ble_plf_reg_read+0x170>)
   223fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   22400:	2000      	movs	r0, #0
   22402:	603b      	str	r3, [r7, #0]
   22404:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   22408:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   2240c:	b012      	add	sp, #72	; 0x48
   2240e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22412:	4b17      	ldr	r3, [pc, #92]	; (22470 <am_hal_ble_plf_reg_read+0x170>)
   22414:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22418:	061b      	lsls	r3, r3, #24
   2241a:	d5eb      	bpl.n	223f4 <am_hal_ble_plf_reg_read+0xf4>
   2241c:	a904      	add	r1, sp, #16
   2241e:	4640      	mov	r0, r8
   22420:	f7ff f80c 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   22424:	2800      	cmp	r0, #0
   22426:	d1e5      	bne.n	223f4 <am_hal_ble_plf_reg_read+0xf4>
   22428:	f89d 2005 	ldrb.w	r2, [sp, #5]
   2242c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   22430:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   22434:	b29b      	uxth	r3, r3
   22436:	aa0a      	add	r2, sp, #40	; 0x28
   22438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2243c:	f8ad 3018 	strh.w	r3, [sp, #24]
   22440:	9204      	str	r2, [sp, #16]
   22442:	d8d7      	bhi.n	223f4 <am_hal_ble_plf_reg_read+0xf4>
   22444:	f8d8 2000 	ldr.w	r2, [r8]
   22448:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2244c:	42a2      	cmp	r2, r4
   2244e:	d1d1      	bne.n	223f4 <am_hal_ble_plf_reg_read+0xf4>
   22450:	2b00      	cmp	r3, #0
   22452:	d0cf      	beq.n	223f4 <am_hal_ble_plf_reg_read+0xf4>
   22454:	a904      	add	r1, sp, #16
   22456:	4640      	mov	r0, r8
   22458:	f7fe fff0 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   2245c:	e7ca      	b.n	223f4 <am_hal_ble_plf_reg_read+0xf4>
   2245e:	4807      	ldr	r0, [pc, #28]	; (2247c <am_hal_ble_plf_reg_read+0x17c>)
   22460:	b012      	add	sp, #72	; 0x48
   22462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22466:	a904      	add	r1, sp, #16
   22468:	f7fe ffe8 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   2246c:	e78c      	b.n	22388 <am_hal_ble_plf_reg_read+0x88>
   2246e:	bf00      	nop
   22470:	5000c000 	.word	0x5000c000
   22474:	01775230 	.word	0x01775230
   22478:	0007a120 	.word	0x0007a120
   2247c:	08000004 	.word	0x08000004

00022480 <am_hal_ble_plf_reg_write>:
   22480:	b5f0      	push	{r4, r5, r6, r7, lr}
   22482:	b091      	sub	sp, #68	; 0x44
   22484:	0c0f      	lsrs	r7, r1, #16
   22486:	0e0e      	lsrs	r6, r1, #24
   22488:	0c14      	lsrs	r4, r2, #16
   2248a:	0e13      	lsrs	r3, r2, #24
   2248c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   22490:	0a15      	lsrs	r5, r2, #8
   22492:	f88d 2008 	strb.w	r2, [sp, #8]
   22496:	f88d 6007 	strb.w	r6, [sp, #7]
   2249a:	f88d 400a 	strb.w	r4, [sp, #10]
   2249e:	f88d 300b 	strb.w	r3, [sp, #11]
   224a2:	f88d 1004 	strb.w	r1, [sp, #4]
   224a6:	f88d e005 	strb.w	lr, [sp, #5]
   224aa:	f88d 7006 	strb.w	r7, [sp, #6]
   224ae:	f88d 5009 	strb.w	r5, [sp, #9]
   224b2:	ab01      	add	r3, sp, #4
   224b4:	4606      	mov	r6, r0
   224b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   224ba:	ab04      	add	r3, sp, #16
   224bc:	e883 0003 	stmia.w	r3, {r0, r1}
   224c0:	4a47      	ldr	r2, [pc, #284]	; (225e0 <am_hal_ble_plf_reg_write+0x160>)
   224c2:	4b48      	ldr	r3, [pc, #288]	; (225e4 <am_hal_ble_plf_reg_write+0x164>)
   224c4:	9303      	str	r3, [sp, #12]
   224c6:	ac03      	add	r4, sp, #12
   224c8:	2300      	movs	r3, #0
   224ca:	200c      	movs	r0, #12
   224cc:	2101      	movs	r1, #1
   224ce:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   224d2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   224d6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   224da:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   224de:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   224e2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   224e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   224ea:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   224ee:	930e      	str	r3, [sp, #56]	; 0x38
   224f0:	930f      	str	r3, [sp, #60]	; 0x3c
   224f2:	940a      	str	r4, [sp, #40]	; 0x28
   224f4:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   224f8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   224fc:	b12e      	cbz	r6, 2250a <am_hal_ble_plf_reg_write+0x8a>
   224fe:	6833      	ldr	r3, [r6, #0]
   22500:	4a39      	ldr	r2, [pc, #228]	; (225e8 <am_hal_ble_plf_reg_write+0x168>)
   22502:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22506:	4293      	cmp	r3, r2
   22508:	d064      	beq.n	225d4 <am_hal_ble_plf_reg_write+0x154>
   2250a:	4d35      	ldr	r5, [pc, #212]	; (225e0 <am_hal_ble_plf_reg_write+0x160>)
   2250c:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   22510:	f043 0302 	orr.w	r3, r3, #2
   22514:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   22518:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2251c:	0619      	lsls	r1, r3, #24
   2251e:	bf58      	it	pl
   22520:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   22524:	d502      	bpl.n	2252c <am_hal_ble_plf_reg_write+0xac>
   22526:	e008      	b.n	2253a <am_hal_ble_plf_reg_write+0xba>
   22528:	3c01      	subs	r4, #1
   2252a:	d050      	beq.n	225ce <am_hal_ble_plf_reg_write+0x14e>
   2252c:	2010      	movs	r0, #16
   2252e:	f000 fd95 	bl	2305c <am_hal_flash_delay>
   22532:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22536:	061a      	lsls	r2, r3, #24
   22538:	d5f6      	bpl.n	22528 <am_hal_ble_plf_reg_write+0xa8>
   2253a:	2300      	movs	r3, #0
   2253c:	2202      	movs	r2, #2
   2253e:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   22542:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   22546:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   2254a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   2254e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   22552:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   22556:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   2255a:	930e      	str	r3, [sp, #56]	; 0x38
   2255c:	930f      	str	r3, [sp, #60]	; 0x3c
   2255e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   22562:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   22566:	b12e      	cbz	r6, 22574 <am_hal_ble_plf_reg_write+0xf4>
   22568:	6834      	ldr	r4, [r6, #0]
   2256a:	4b1f      	ldr	r3, [pc, #124]	; (225e8 <am_hal_ble_plf_reg_write+0x168>)
   2256c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   22570:	429c      	cmp	r4, r3
   22572:	d007      	beq.n	22584 <am_hal_ble_plf_reg_write+0x104>
   22574:	4b1a      	ldr	r3, [pc, #104]	; (225e0 <am_hal_ble_plf_reg_write+0x160>)
   22576:	2000      	movs	r0, #0
   22578:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   2257c:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   22580:	b011      	add	sp, #68	; 0x44
   22582:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22584:	4b16      	ldr	r3, [pc, #88]	; (225e0 <am_hal_ble_plf_reg_write+0x160>)
   22586:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2258a:	061b      	lsls	r3, r3, #24
   2258c:	d5f2      	bpl.n	22574 <am_hal_ble_plf_reg_write+0xf4>
   2258e:	a90a      	add	r1, sp, #40	; 0x28
   22590:	4630      	mov	r0, r6
   22592:	f7fe ff53 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   22596:	2800      	cmp	r0, #0
   22598:	d1ec      	bne.n	22574 <am_hal_ble_plf_reg_write+0xf4>
   2259a:	f89d 2001 	ldrb.w	r2, [sp, #1]
   2259e:	f89d 3000 	ldrb.w	r3, [sp]
   225a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   225a6:	b29b      	uxth	r3, r3
   225a8:	aa06      	add	r2, sp, #24
   225aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   225ae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   225b2:	920a      	str	r2, [sp, #40]	; 0x28
   225b4:	d8de      	bhi.n	22574 <am_hal_ble_plf_reg_write+0xf4>
   225b6:	6832      	ldr	r2, [r6, #0]
   225b8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   225bc:	42a2      	cmp	r2, r4
   225be:	d1d9      	bne.n	22574 <am_hal_ble_plf_reg_write+0xf4>
   225c0:	2b00      	cmp	r3, #0
   225c2:	d0d7      	beq.n	22574 <am_hal_ble_plf_reg_write+0xf4>
   225c4:	a90a      	add	r1, sp, #40	; 0x28
   225c6:	4630      	mov	r0, r6
   225c8:	f7fe ff38 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   225cc:	e7d2      	b.n	22574 <am_hal_ble_plf_reg_write+0xf4>
   225ce:	4807      	ldr	r0, [pc, #28]	; (225ec <am_hal_ble_plf_reg_write+0x16c>)
   225d0:	b011      	add	sp, #68	; 0x44
   225d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   225d4:	a90a      	add	r1, sp, #40	; 0x28
   225d6:	4630      	mov	r0, r6
   225d8:	f7fe ff30 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   225dc:	e795      	b.n	2250a <am_hal_ble_plf_reg_write+0x8a>
   225de:	bf00      	nop
   225e0:	5000c000 	.word	0x5000c000
   225e4:	08fd0301 	.word	0x08fd0301
   225e8:	01775230 	.word	0x01775230
   225ec:	08000004 	.word	0x08000004

000225f0 <am_hal_ble_transmitter_modex_set>:
   225f0:	b530      	push	{r4, r5, lr}
   225f2:	b085      	sub	sp, #20
   225f4:	4604      	mov	r4, r0
   225f6:	2300      	movs	r3, #0
   225f8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   225fc:	466a      	mov	r2, sp
   225fe:	4927      	ldr	r1, [pc, #156]	; (2269c <am_hal_ble_transmitter_modex_set+0xac>)
   22600:	9303      	str	r3, [sp, #12]
   22602:	f7ff fe7d 	bl	22300 <am_hal_ble_plf_reg_read>
   22606:	4620      	mov	r0, r4
   22608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2260c:	4923      	ldr	r1, [pc, #140]	; (2269c <am_hal_ble_transmitter_modex_set+0xac>)
   2260e:	f7ff ff37 	bl	22480 <am_hal_ble_plf_reg_write>
   22612:	aa03      	add	r2, sp, #12
   22614:	4620      	mov	r0, r4
   22616:	4922      	ldr	r1, [pc, #136]	; (226a0 <am_hal_ble_transmitter_modex_set+0xb0>)
   22618:	f7ff fe72 	bl	22300 <am_hal_ble_plf_reg_read>
   2261c:	9b03      	ldr	r3, [sp, #12]
   2261e:	aa02      	add	r2, sp, #8
   22620:	f043 0308 	orr.w	r3, r3, #8
   22624:	4620      	mov	r0, r4
   22626:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2262a:	9303      	str	r3, [sp, #12]
   2262c:	f7ff fe68 	bl	22300 <am_hal_ble_plf_reg_read>
   22630:	9b02      	ldr	r3, [sp, #8]
   22632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22636:	461a      	mov	r2, r3
   22638:	4620      	mov	r0, r4
   2263a:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2263e:	9302      	str	r3, [sp, #8]
   22640:	f7ff ff1e 	bl	22480 <am_hal_ble_plf_reg_write>
   22644:	aa01      	add	r2, sp, #4
   22646:	4620      	mov	r0, r4
   22648:	4916      	ldr	r1, [pc, #88]	; (226a4 <am_hal_ble_transmitter_modex_set+0xb4>)
   2264a:	f7ff fe59 	bl	22300 <am_hal_ble_plf_reg_read>
   2264e:	9a01      	ldr	r2, [sp, #4]
   22650:	4914      	ldr	r1, [pc, #80]	; (226a4 <am_hal_ble_transmitter_modex_set+0xb4>)
   22652:	4620      	mov	r0, r4
   22654:	f042 0208 	orr.w	r2, r2, #8
   22658:	f7ff ff12 	bl	22480 <am_hal_ble_plf_reg_write>
   2265c:	006a      	lsls	r2, r5, #1
   2265e:	f042 0201 	orr.w	r2, r2, #1
   22662:	4620      	mov	r0, r4
   22664:	4910      	ldr	r1, [pc, #64]	; (226a8 <am_hal_ble_transmitter_modex_set+0xb8>)
   22666:	f7ff ff0b 	bl	22480 <am_hal_ble_plf_reg_write>
   2266a:	490d      	ldr	r1, [pc, #52]	; (226a0 <am_hal_ble_transmitter_modex_set+0xb0>)
   2266c:	9a03      	ldr	r2, [sp, #12]
   2266e:	4620      	mov	r0, r4
   22670:	f7ff ff06 	bl	22480 <am_hal_ble_plf_reg_write>
   22674:	4b0d      	ldr	r3, [pc, #52]	; (226ac <am_hal_ble_transmitter_modex_set+0xbc>)
   22676:	68db      	ldr	r3, [r3, #12]
   22678:	b2db      	uxtb	r3, r3
   2267a:	2b21      	cmp	r3, #33	; 0x21
   2267c:	bf0c      	ite	eq
   2267e:	490c      	ldreq	r1, [pc, #48]	; (226b0 <am_hal_ble_transmitter_modex_set+0xc0>)
   22680:	490c      	ldrne	r1, [pc, #48]	; (226b4 <am_hal_ble_transmitter_modex_set+0xc4>)
   22682:	462a      	mov	r2, r5
   22684:	4620      	mov	r0, r4
   22686:	f7ff fefb 	bl	22480 <am_hal_ble_plf_reg_write>
   2268a:	4620      	mov	r0, r4
   2268c:	9a00      	ldr	r2, [sp, #0]
   2268e:	4903      	ldr	r1, [pc, #12]	; (2269c <am_hal_ble_transmitter_modex_set+0xac>)
   22690:	f7ff fef6 	bl	22480 <am_hal_ble_plf_reg_write>
   22694:	2000      	movs	r0, #0
   22696:	b005      	add	sp, #20
   22698:	bd30      	pop	{r4, r5, pc}
   2269a:	bf00      	nop
   2269c:	43000004 	.word	0x43000004
   226a0:	52000008 	.word	0x52000008
   226a4:	45800070 	.word	0x45800070
   226a8:	52000014 	.word	0x52000014
   226ac:	40020000 	.word	0x40020000
   226b0:	20006874 	.word	0x20006874
   226b4:	20006070 	.word	0x20006070

000226b8 <am_hal_ble_patch_complete.part.10>:
   226b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226bc:	b08c      	sub	sp, #48	; 0x30
   226be:	2300      	movs	r3, #0
   226c0:	9308      	str	r3, [sp, #32]
   226c2:	2201      	movs	r2, #1
   226c4:	2506      	movs	r5, #6
   226c6:	24ee      	movs	r4, #238	; 0xee
   226c8:	21f1      	movs	r1, #241	; 0xf1
   226ca:	9307      	str	r3, [sp, #28]
   226cc:	9309      	str	r3, [sp, #36]	; 0x24
   226ce:	930a      	str	r3, [sp, #40]	; 0x28
   226d0:	930b      	str	r3, [sp, #44]	; 0x2c
   226d2:	f88d 3004 	strb.w	r3, [sp, #4]
   226d6:	f88d 3005 	strb.w	r3, [sp, #5]
   226da:	2302      	movs	r3, #2
   226dc:	f8ad 5020 	strh.w	r5, [sp, #32]
   226e0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   226e4:	f88d 2000 	strb.w	r2, [sp]
   226e8:	f8cd d018 	str.w	sp, [sp, #24]
   226ec:	f88d 4001 	strb.w	r4, [sp, #1]
   226f0:	f88d 1002 	strb.w	r1, [sp, #2]
   226f4:	f88d 3003 	strb.w	r3, [sp, #3]
   226f8:	4605      	mov	r5, r0
   226fa:	2800      	cmp	r0, #0
   226fc:	f000 80e4 	beq.w	228c8 <am_hal_ble_patch_complete.part.10+0x210>
   22700:	4e7d      	ldr	r6, [pc, #500]	; (228f8 <am_hal_ble_patch_complete.part.10+0x240>)
   22702:	f241 3488 	movw	r4, #5000	; 0x1388
   22706:	e001      	b.n	2270c <am_hal_ble_patch_complete.part.10+0x54>
   22708:	3c01      	subs	r4, #1
   2270a:	d00d      	beq.n	22728 <am_hal_ble_patch_complete.part.10+0x70>
   2270c:	682b      	ldr	r3, [r5, #0]
   2270e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22712:	42b3      	cmp	r3, r6
   22714:	d1f8      	bne.n	22708 <am_hal_ble_patch_complete.part.10+0x50>
   22716:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2271a:	a906      	add	r1, sp, #24
   2271c:	4628      	mov	r0, r5
   2271e:	b11b      	cbz	r3, 22728 <am_hal_ble_patch_complete.part.10+0x70>
   22720:	f7fe fe8c 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   22724:	2800      	cmp	r0, #0
   22726:	d1ef      	bne.n	22708 <am_hal_ble_patch_complete.part.10+0x50>
   22728:	4b74      	ldr	r3, [pc, #464]	; (228fc <am_hal_ble_patch_complete.part.10+0x244>)
   2272a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2272e:	061b      	lsls	r3, r3, #24
   22730:	f100 80d1 	bmi.w	228d6 <am_hal_ble_patch_complete.part.10+0x21e>
   22734:	4c72      	ldr	r4, [pc, #456]	; (22900 <am_hal_ble_patch_complete.part.10+0x248>)
   22736:	4e71      	ldr	r6, [pc, #452]	; (228fc <am_hal_ble_patch_complete.part.10+0x244>)
   22738:	e001      	b.n	2273e <am_hal_ble_patch_complete.part.10+0x86>
   2273a:	3c01      	subs	r4, #1
   2273c:	d019      	beq.n	22772 <am_hal_ble_patch_complete.part.10+0xba>
   2273e:	2010      	movs	r0, #16
   22740:	f000 fc8c 	bl	2305c <am_hal_flash_delay>
   22744:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22748:	061f      	lsls	r7, r3, #24
   2274a:	d5f6      	bpl.n	2273a <am_hal_ble_patch_complete.part.10+0x82>
   2274c:	2302      	movs	r3, #2
   2274e:	af03      	add	r7, sp, #12
   22750:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22754:	f8ad 3020 	strh.w	r3, [sp, #32]
   22758:	9706      	str	r7, [sp, #24]
   2275a:	b12d      	cbz	r5, 22768 <am_hal_ble_patch_complete.part.10+0xb0>
   2275c:	682e      	ldr	r6, [r5, #0]
   2275e:	4b66      	ldr	r3, [pc, #408]	; (228f8 <am_hal_ble_patch_complete.part.10+0x240>)
   22760:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   22764:	429e      	cmp	r6, r3
   22766:	d009      	beq.n	2277c <am_hal_ble_patch_complete.part.10+0xc4>
   22768:	2402      	movs	r4, #2
   2276a:	4620      	mov	r0, r4
   2276c:	b00c      	add	sp, #48	; 0x30
   2276e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22772:	4c64      	ldr	r4, [pc, #400]	; (22904 <am_hal_ble_patch_complete.part.10+0x24c>)
   22774:	4620      	mov	r0, r4
   22776:	b00c      	add	sp, #48	; 0x30
   22778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2277c:	a906      	add	r1, sp, #24
   2277e:	4628      	mov	r0, r5
   22780:	f7fe fe5c 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   22784:	4604      	mov	r4, r0
   22786:	2800      	cmp	r0, #0
   22788:	d1ef      	bne.n	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   2278a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   2278e:	29ee      	cmp	r1, #238	; 0xee
   22790:	d01a      	beq.n	227c8 <am_hal_ble_patch_complete.part.10+0x110>
   22792:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22796:	682a      	ldr	r2, [r5, #0]
   22798:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   2279c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   227a0:	b29b      	uxth	r3, r3
   227a2:	42b2      	cmp	r2, r6
   227a4:	f8ad 3020 	strh.w	r3, [sp, #32]
   227a8:	d1de      	bne.n	22768 <am_hal_ble_patch_complete.part.10+0xb0>
   227aa:	b133      	cbz	r3, 227ba <am_hal_ble_patch_complete.part.10+0x102>
   227ac:	a906      	add	r1, sp, #24
   227ae:	4628      	mov	r0, r5
   227b0:	f7fe fe44 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   227b4:	b108      	cbz	r0, 227ba <am_hal_ble_patch_complete.part.10+0x102>
   227b6:	4604      	mov	r4, r0
   227b8:	e7d7      	b.n	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   227ba:	2301      	movs	r3, #1
   227bc:	4620      	mov	r0, r4
   227be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   227c2:	b00c      	add	sp, #48	; 0x30
   227c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   227c8:	682b      	ldr	r3, [r5, #0]
   227ca:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   227ce:	2203      	movs	r2, #3
   227d0:	45b0      	cmp	r8, r6
   227d2:	f8ad 2020 	strh.w	r2, [sp, #32]
   227d6:	d1c7      	bne.n	22768 <am_hal_ble_patch_complete.part.10+0xb0>
   227d8:	a906      	add	r1, sp, #24
   227da:	4628      	mov	r0, r5
   227dc:	f7fe fe2e 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   227e0:	4604      	mov	r4, r0
   227e2:	2800      	cmp	r0, #0
   227e4:	d1c1      	bne.n	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   227e6:	2301      	movs	r3, #1
   227e8:	2005      	movs	r0, #5
   227ea:	2104      	movs	r1, #4
   227ec:	22fd      	movs	r2, #253	; 0xfd
   227ee:	9408      	str	r4, [sp, #32]
   227f0:	9407      	str	r4, [sp, #28]
   227f2:	9409      	str	r4, [sp, #36]	; 0x24
   227f4:	940a      	str	r4, [sp, #40]	; 0x28
   227f6:	940b      	str	r4, [sp, #44]	; 0x2c
   227f8:	f8cd d018 	str.w	sp, [sp, #24]
   227fc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22800:	f88d 3000 	strb.w	r3, [sp]
   22804:	f88d 3003 	strb.w	r3, [sp, #3]
   22808:	f88d 3004 	strb.w	r3, [sp, #4]
   2280c:	f8ad 0020 	strh.w	r0, [sp, #32]
   22810:	f88d 1001 	strb.w	r1, [sp, #1]
   22814:	f88d 2002 	strb.w	r2, [sp, #2]
   22818:	f241 3688 	movw	r6, #5000	; 0x1388
   2281c:	e002      	b.n	22824 <am_hal_ble_patch_complete.part.10+0x16c>
   2281e:	2402      	movs	r4, #2
   22820:	3e01      	subs	r6, #1
   22822:	d0a2      	beq.n	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   22824:	682b      	ldr	r3, [r5, #0]
   22826:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2282a:	4543      	cmp	r3, r8
   2282c:	d1f7      	bne.n	2281e <am_hal_ble_patch_complete.part.10+0x166>
   2282e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   22832:	a906      	add	r1, sp, #24
   22834:	4628      	mov	r0, r5
   22836:	b123      	cbz	r3, 22842 <am_hal_ble_patch_complete.part.10+0x18a>
   22838:	f7fe fe00 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   2283c:	4604      	mov	r4, r0
   2283e:	2800      	cmp	r0, #0
   22840:	d1ee      	bne.n	22820 <am_hal_ble_patch_complete.part.10+0x168>
   22842:	4e2e      	ldr	r6, [pc, #184]	; (228fc <am_hal_ble_patch_complete.part.10+0x244>)
   22844:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22848:	0619      	lsls	r1, r3, #24
   2284a:	d40a      	bmi.n	22862 <am_hal_ble_patch_complete.part.10+0x1aa>
   2284c:	4c2c      	ldr	r4, [pc, #176]	; (22900 <am_hal_ble_patch_complete.part.10+0x248>)
   2284e:	e001      	b.n	22854 <am_hal_ble_patch_complete.part.10+0x19c>
   22850:	3c01      	subs	r4, #1
   22852:	d08e      	beq.n	22772 <am_hal_ble_patch_complete.part.10+0xba>
   22854:	2010      	movs	r0, #16
   22856:	f000 fc01 	bl	2305c <am_hal_flash_delay>
   2285a:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2285e:	0618      	lsls	r0, r3, #24
   22860:	d5f6      	bpl.n	22850 <am_hal_ble_patch_complete.part.10+0x198>
   22862:	682e      	ldr	r6, [r5, #0]
   22864:	4b24      	ldr	r3, [pc, #144]	; (228f8 <am_hal_ble_patch_complete.part.10+0x240>)
   22866:	9706      	str	r7, [sp, #24]
   22868:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   2286c:	2702      	movs	r7, #2
   2286e:	2209      	movs	r2, #9
   22870:	429e      	cmp	r6, r3
   22872:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   22876:	f8ad 2020 	strh.w	r2, [sp, #32]
   2287a:	f47f af75 	bne.w	22768 <am_hal_ble_patch_complete.part.10+0xb0>
   2287e:	a906      	add	r1, sp, #24
   22880:	4628      	mov	r0, r5
   22882:	f7fe fddb 	bl	2143c <am_hal_ble_blocking_transfer.part.7>
   22886:	4604      	mov	r4, r0
   22888:	2800      	cmp	r0, #0
   2288a:	f47f af6e 	bne.w	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   2288e:	682b      	ldr	r3, [r5, #0]
   22890:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22894:	42b3      	cmp	r3, r6
   22896:	d026      	beq.n	228e6 <am_hal_ble_patch_complete.part.10+0x22e>
   22898:	2301      	movs	r3, #1
   2289a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   2289e:	481a      	ldr	r0, [pc, #104]	; (22908 <am_hal_ble_patch_complete.part.10+0x250>)
   228a0:	f000 fbdc 	bl	2305c <am_hal_flash_delay>
   228a4:	4a19      	ldr	r2, [pc, #100]	; (2290c <am_hal_ble_patch_complete.part.10+0x254>)
   228a6:	4b1a      	ldr	r3, [pc, #104]	; (22910 <am_hal_ble_patch_complete.part.10+0x258>)
   228a8:	6811      	ldr	r1, [r2, #0]
   228aa:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   228ae:	429a      	cmp	r2, r3
   228b0:	f47f af5b 	bne.w	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   228b4:	b2c9      	uxtb	r1, r1
   228b6:	f1a1 0320 	sub.w	r3, r1, #32
   228ba:	2b20      	cmp	r3, #32
   228bc:	f63f af55 	bhi.w	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   228c0:	4628      	mov	r0, r5
   228c2:	f7ff fe95 	bl	225f0 <am_hal_ble_transmitter_modex_set>
   228c6:	e750      	b.n	2276a <am_hal_ble_patch_complete.part.10+0xb2>
   228c8:	4b0c      	ldr	r3, [pc, #48]	; (228fc <am_hal_ble_patch_complete.part.10+0x244>)
   228ca:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   228ce:	061a      	lsls	r2, r3, #24
   228d0:	f57f af30 	bpl.w	22734 <am_hal_ble_patch_complete.part.10+0x7c>
   228d4:	e748      	b.n	22768 <am_hal_ble_patch_complete.part.10+0xb0>
   228d6:	2302      	movs	r3, #2
   228d8:	af03      	add	r7, sp, #12
   228da:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   228de:	f8ad 3020 	strh.w	r3, [sp, #32]
   228e2:	9706      	str	r7, [sp, #24]
   228e4:	e73a      	b.n	2275c <am_hal_ble_patch_complete.part.10+0xa4>
   228e6:	4b05      	ldr	r3, [pc, #20]	; (228fc <am_hal_ble_patch_complete.part.10+0x244>)
   228e8:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   228ec:	f367 0283 	bfi	r2, r7, #2, #2
   228f0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   228f4:	e7d0      	b.n	22898 <am_hal_ble_patch_complete.part.10+0x1e0>
   228f6:	bf00      	nop
   228f8:	01775230 	.word	0x01775230
   228fc:	5000c000 	.word	0x5000c000
   22900:	000186a0 	.word	0x000186a0
   22904:	08000004 	.word	0x08000004
   22908:	007a1200 	.word	0x007a1200
   2290c:	50023808 	.word	0x50023808
   22910:	18240600 	.word	0x18240600

00022914 <am_hal_ble_boot>:
   22914:	b128      	cbz	r0, 22922 <am_hal_ble_boot+0xe>
   22916:	6803      	ldr	r3, [r0, #0]
   22918:	4a59      	ldr	r2, [pc, #356]	; (22a80 <am_hal_ble_boot+0x16c>)
   2291a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2291e:	4293      	cmp	r3, r2
   22920:	d001      	beq.n	22926 <am_hal_ble_boot+0x12>
   22922:	2002      	movs	r0, #2
   22924:	4770      	bx	lr
   22926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2292a:	7a03      	ldrb	r3, [r0, #8]
   2292c:	b082      	sub	sp, #8
   2292e:	4604      	mov	r4, r0
   22930:	2b00      	cmp	r3, #0
   22932:	d065      	beq.n	22a00 <am_hal_ble_boot+0xec>
   22934:	4a53      	ldr	r2, [pc, #332]	; (22a84 <am_hal_ble_boot+0x170>)
   22936:	68d3      	ldr	r3, [r2, #12]
   22938:	b2db      	uxtb	r3, r3
   2293a:	2b11      	cmp	r3, #17
   2293c:	d076      	beq.n	22a2c <am_hal_ble_boot+0x118>
   2293e:	68d3      	ldr	r3, [r2, #12]
   22940:	b2db      	uxtb	r3, r3
   22942:	2b12      	cmp	r3, #18
   22944:	d072      	beq.n	22a2c <am_hal_ble_boot+0x118>
   22946:	4b4f      	ldr	r3, [pc, #316]	; (22a84 <am_hal_ble_boot+0x170>)
   22948:	68db      	ldr	r3, [r3, #12]
   2294a:	b2db      	uxtb	r3, r3
   2294c:	2b21      	cmp	r3, #33	; 0x21
   2294e:	f000 808d 	beq.w	22a6c <am_hal_ble_boot+0x158>
   22952:	4b4d      	ldr	r3, [pc, #308]	; (22a88 <am_hal_ble_boot+0x174>)
   22954:	68da      	ldr	r2, [r3, #12]
   22956:	4b4d      	ldr	r3, [pc, #308]	; (22a8c <am_hal_ble_boot+0x178>)
   22958:	681b      	ldr	r3, [r3, #0]
   2295a:	ba1b      	rev	r3, r3
   2295c:	1c5d      	adds	r5, r3, #1
   2295e:	bf18      	it	ne
   22960:	6093      	strne	r3, [r2, #8]
   22962:	4b4b      	ldr	r3, [pc, #300]	; (22a90 <am_hal_ble_boot+0x17c>)
   22964:	681b      	ldr	r3, [r3, #0]
   22966:	1c58      	adds	r0, r3, #1
   22968:	d009      	beq.n	2297e <am_hal_ble_boot+0x6a>
   2296a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2296e:	ba1b      	rev	r3, r3
   22970:	1c59      	adds	r1, r3, #1
   22972:	d004      	beq.n	2297e <am_hal_ble_boot+0x6a>
   22974:	68d1      	ldr	r1, [r2, #12]
   22976:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   2297a:	430b      	orrs	r3, r1
   2297c:	60d3      	str	r3, [r2, #12]
   2297e:	4a41      	ldr	r2, [pc, #260]	; (22a84 <am_hal_ble_boot+0x170>)
   22980:	68d3      	ldr	r3, [r2, #12]
   22982:	b2db      	uxtb	r3, r3
   22984:	2b11      	cmp	r3, #17
   22986:	d031      	beq.n	229ec <am_hal_ble_boot+0xd8>
   22988:	68d3      	ldr	r3, [r2, #12]
   2298a:	b2db      	uxtb	r3, r3
   2298c:	2b12      	cmp	r3, #18
   2298e:	d02d      	beq.n	229ec <am_hal_ble_boot+0xd8>
   22990:	4a40      	ldr	r2, [pc, #256]	; (22a94 <am_hal_ble_boot+0x180>)
   22992:	4b41      	ldr	r3, [pc, #260]	; (22a98 <am_hal_ble_boot+0x184>)
   22994:	6816      	ldr	r6, [r2, #0]
   22996:	681b      	ldr	r3, [r3, #0]
   22998:	b1f6      	cbz	r6, 229d8 <am_hal_ble_boot+0xc4>
   2299a:	4d40      	ldr	r5, [pc, #256]	; (22a9c <am_hal_ble_boot+0x188>)
   2299c:	f1a3 0804 	sub.w	r8, r3, #4
   229a0:	2700      	movs	r7, #0
   229a2:	f858 1f04 	ldr.w	r1, [r8, #4]!
   229a6:	684b      	ldr	r3, [r1, #4]
   229a8:	68c8      	ldr	r0, [r1, #12]
   229aa:	b16b      	cbz	r3, 229c8 <am_hal_ble_boot+0xb4>
   229ac:	eb00 0e03 	add.w	lr, r0, r3
   229b0:	2300      	movs	r3, #0
   229b2:	f810 2b01 	ldrb.w	r2, [r0], #1
   229b6:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   229ba:	4570      	cmp	r0, lr
   229bc:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   229c0:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   229c4:	b29b      	uxth	r3, r3
   229c6:	d1f4      	bne.n	229b2 <am_hal_ble_boot+0x9e>
   229c8:	608b      	str	r3, [r1, #8]
   229ca:	4620      	mov	r0, r4
   229cc:	f7ff faa8 	bl	21f20 <am_hal_ble_patch_apply>
   229d0:	b948      	cbnz	r0, 229e6 <am_hal_ble_boot+0xd2>
   229d2:	3701      	adds	r7, #1
   229d4:	42b7      	cmp	r7, r6
   229d6:	d1e4      	bne.n	229a2 <am_hal_ble_boot+0x8e>
   229d8:	6823      	ldr	r3, [r4, #0]
   229da:	4a29      	ldr	r2, [pc, #164]	; (22a80 <am_hal_ble_boot+0x16c>)
   229dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   229e0:	4293      	cmp	r3, r2
   229e2:	d008      	beq.n	229f6 <am_hal_ble_boot+0xe2>
   229e4:	2002      	movs	r0, #2
   229e6:	b002      	add	sp, #8
   229e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   229ec:	4a2c      	ldr	r2, [pc, #176]	; (22aa0 <am_hal_ble_boot+0x18c>)
   229ee:	4b2d      	ldr	r3, [pc, #180]	; (22aa4 <am_hal_ble_boot+0x190>)
   229f0:	6816      	ldr	r6, [r2, #0]
   229f2:	681b      	ldr	r3, [r3, #0]
   229f4:	e7d0      	b.n	22998 <am_hal_ble_boot+0x84>
   229f6:	4620      	mov	r0, r4
   229f8:	f7ff fe5e 	bl	226b8 <am_hal_ble_patch_complete.part.10>
   229fc:	2800      	cmp	r0, #0
   229fe:	d1f2      	bne.n	229e6 <am_hal_ble_boot+0xd2>
   22a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22a04:	4b1f      	ldr	r3, [pc, #124]	; (22a84 <am_hal_ble_boot+0x170>)
   22a06:	9201      	str	r2, [sp, #4]
   22a08:	68db      	ldr	r3, [r3, #12]
   22a0a:	b2db      	uxtb	r3, r3
   22a0c:	2b21      	cmp	r3, #33	; 0x21
   22a0e:	d030      	beq.n	22a72 <am_hal_ble_boot+0x15e>
   22a10:	4620      	mov	r0, r4
   22a12:	aa01      	add	r2, sp, #4
   22a14:	4924      	ldr	r1, [pc, #144]	; (22aa8 <am_hal_ble_boot+0x194>)
   22a16:	f7ff fc73 	bl	22300 <am_hal_ble_plf_reg_read>
   22a1a:	9b01      	ldr	r3, [sp, #4]
   22a1c:	4823      	ldr	r0, [pc, #140]	; (22aac <am_hal_ble_boot+0x198>)
   22a1e:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   22a22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   22a26:	bf98      	it	ls
   22a28:	2000      	movls	r0, #0
   22a2a:	e7dc      	b.n	229e6 <am_hal_ble_boot+0xd2>
   22a2c:	4b20      	ldr	r3, [pc, #128]	; (22ab0 <am_hal_ble_boot+0x19c>)
   22a2e:	681b      	ldr	r3, [r3, #0]
   22a30:	6819      	ldr	r1, [r3, #0]
   22a32:	684b      	ldr	r3, [r1, #4]
   22a34:	68c8      	ldr	r0, [r1, #12]
   22a36:	b16b      	cbz	r3, 22a54 <am_hal_ble_boot+0x140>
   22a38:	4e18      	ldr	r6, [pc, #96]	; (22a9c <am_hal_ble_boot+0x188>)
   22a3a:	18c5      	adds	r5, r0, r3
   22a3c:	2300      	movs	r3, #0
   22a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
   22a42:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   22a46:	4285      	cmp	r5, r0
   22a48:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   22a4c:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   22a50:	b29b      	uxth	r3, r3
   22a52:	d1f4      	bne.n	22a3e <am_hal_ble_boot+0x12a>
   22a54:	608b      	str	r3, [r1, #8]
   22a56:	4620      	mov	r0, r4
   22a58:	f7ff fa62 	bl	21f20 <am_hal_ble_patch_apply>
   22a5c:	2800      	cmp	r0, #0
   22a5e:	d1c2      	bne.n	229e6 <am_hal_ble_boot+0xd2>
   22a60:	4620      	mov	r0, r4
   22a62:	f7ff f921 	bl	21ca8 <am_hal_ble_patch_copy_end_apply>
   22a66:	2800      	cmp	r0, #0
   22a68:	d1bd      	bne.n	229e6 <am_hal_ble_boot+0xd2>
   22a6a:	e76c      	b.n	22946 <am_hal_ble_boot+0x32>
   22a6c:	4b11      	ldr	r3, [pc, #68]	; (22ab4 <am_hal_ble_boot+0x1a0>)
   22a6e:	68da      	ldr	r2, [r3, #12]
   22a70:	e771      	b.n	22956 <am_hal_ble_boot+0x42>
   22a72:	4620      	mov	r0, r4
   22a74:	aa01      	add	r2, sp, #4
   22a76:	4910      	ldr	r1, [pc, #64]	; (22ab8 <am_hal_ble_boot+0x1a4>)
   22a78:	f7ff fc42 	bl	22300 <am_hal_ble_plf_reg_read>
   22a7c:	e7cd      	b.n	22a1a <am_hal_ble_boot+0x106>
   22a7e:	bf00      	nop
   22a80:	01775230 	.word	0x01775230
   22a84:	40020000 	.word	0x40020000
   22a88:	10002f08 	.word	0x10002f08
   22a8c:	50023800 	.word	0x50023800
   22a90:	50023804 	.word	0x50023804
   22a94:	000280e4 	.word	0x000280e4
   22a98:	100039b4 	.word	0x100039b4
   22a9c:	00026894 	.word	0x00026894
   22aa0:	000277cc 	.word	0x000277cc
   22aa4:	1000302c 	.word	0x1000302c
   22aa8:	20006054 	.word	0x20006054
   22aac:	0800000b 	.word	0x0800000b
   22ab0:	10002ef4 	.word	0x10002ef4
   22ab4:	100039b8 	.word	0x100039b8
   22ab8:	20006858 	.word	0x20006858

00022abc <am_hal_ble_tx_power_set>:
   22abc:	b570      	push	{r4, r5, r6, lr}
   22abe:	b082      	sub	sp, #8
   22ac0:	4605      	mov	r5, r0
   22ac2:	2300      	movs	r3, #0
   22ac4:	460e      	mov	r6, r1
   22ac6:	466a      	mov	r2, sp
   22ac8:	040c      	lsls	r4, r1, #16
   22aca:	4919      	ldr	r1, [pc, #100]	; (22b30 <am_hal_ble_tx_power_set+0x74>)
   22acc:	9301      	str	r3, [sp, #4]
   22ace:	f7ff fc17 	bl	22300 <am_hal_ble_plf_reg_read>
   22ad2:	4917      	ldr	r1, [pc, #92]	; (22b30 <am_hal_ble_tx_power_set+0x74>)
   22ad4:	4628      	mov	r0, r5
   22ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22ada:	f7ff fcd1 	bl	22480 <am_hal_ble_plf_reg_write>
   22ade:	4b15      	ldr	r3, [pc, #84]	; (22b34 <am_hal_ble_tx_power_set+0x78>)
   22ae0:	68db      	ldr	r3, [r3, #12]
   22ae2:	b2db      	uxtb	r3, r3
   22ae4:	2b21      	cmp	r3, #33	; 0x21
   22ae6:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   22aea:	bf0c      	ite	eq
   22aec:	4912      	ldreq	r1, [pc, #72]	; (22b38 <am_hal_ble_tx_power_set+0x7c>)
   22aee:	4913      	ldrne	r1, [pc, #76]	; (22b3c <am_hal_ble_tx_power_set+0x80>)
   22af0:	aa01      	add	r2, sp, #4
   22af2:	f044 0408 	orr.w	r4, r4, #8
   22af6:	4628      	mov	r0, r5
   22af8:	f7ff fc02 	bl	22300 <am_hal_ble_plf_reg_read>
   22afc:	4910      	ldr	r1, [pc, #64]	; (22b40 <am_hal_ble_tx_power_set+0x84>)
   22afe:	f88d 6004 	strb.w	r6, [sp, #4]
   22b02:	4622      	mov	r2, r4
   22b04:	4628      	mov	r0, r5
   22b06:	f7ff fcbb 	bl	22480 <am_hal_ble_plf_reg_write>
   22b0a:	4b0a      	ldr	r3, [pc, #40]	; (22b34 <am_hal_ble_tx_power_set+0x78>)
   22b0c:	9a01      	ldr	r2, [sp, #4]
   22b0e:	68db      	ldr	r3, [r3, #12]
   22b10:	b2db      	uxtb	r3, r3
   22b12:	2b21      	cmp	r3, #33	; 0x21
   22b14:	bf0c      	ite	eq
   22b16:	4908      	ldreq	r1, [pc, #32]	; (22b38 <am_hal_ble_tx_power_set+0x7c>)
   22b18:	4908      	ldrne	r1, [pc, #32]	; (22b3c <am_hal_ble_tx_power_set+0x80>)
   22b1a:	4628      	mov	r0, r5
   22b1c:	f7ff fcb0 	bl	22480 <am_hal_ble_plf_reg_write>
   22b20:	4628      	mov	r0, r5
   22b22:	9a00      	ldr	r2, [sp, #0]
   22b24:	4902      	ldr	r1, [pc, #8]	; (22b30 <am_hal_ble_tx_power_set+0x74>)
   22b26:	f7ff fcab 	bl	22480 <am_hal_ble_plf_reg_write>
   22b2a:	2000      	movs	r0, #0
   22b2c:	b002      	add	sp, #8
   22b2e:	bd70      	pop	{r4, r5, r6, pc}
   22b30:	43000004 	.word	0x43000004
   22b34:	40020000 	.word	0x40020000
   22b38:	20006838 	.word	0x20006838
   22b3c:	20006038 	.word	0x20006038
   22b40:	52400018 	.word	0x52400018

00022b44 <am_hal_cachectrl_config>:
   22b44:	b530      	push	{r4, r5, lr}
   22b46:	b083      	sub	sp, #12
   22b48:	4605      	mov	r5, r0
   22b4a:	f000 fc5b 	bl	23404 <am_hal_interrupt_master_disable>
   22b4e:	4c0f      	ldr	r4, [pc, #60]	; (22b8c <am_hal_cachectrl_config+0x48>)
   22b50:	9001      	str	r0, [sp, #4]
   22b52:	6823      	ldr	r3, [r4, #0]
   22b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   22b58:	6023      	str	r3, [r4, #0]
   22b5a:	9801      	ldr	r0, [sp, #4]
   22b5c:	f000 fc56 	bl	2340c <am_hal_interrupt_master_set>
   22b60:	78ab      	ldrb	r3, [r5, #2]
   22b62:	782a      	ldrb	r2, [r5, #0]
   22b64:	7869      	ldrb	r1, [r5, #1]
   22b66:	005b      	lsls	r3, r3, #1
   22b68:	0112      	lsls	r2, r2, #4
   22b6a:	b2d2      	uxtb	r2, r2
   22b6c:	f003 0302 	and.w	r3, r3, #2
   22b70:	4313      	orrs	r3, r2
   22b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22b76:	020a      	lsls	r2, r1, #8
   22b78:	f402 7240 	and.w	r2, r2, #768	; 0x300
   22b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22b80:	4313      	orrs	r3, r2
   22b82:	2000      	movs	r0, #0
   22b84:	6023      	str	r3, [r4, #0]
   22b86:	b003      	add	sp, #12
   22b88:	bd30      	pop	{r4, r5, pc}
   22b8a:	bf00      	nop
   22b8c:	40018000 	.word	0x40018000

00022b90 <am_hal_cachectrl_enable>:
   22b90:	4a03      	ldr	r2, [pc, #12]	; (22ba0 <am_hal_cachectrl_enable+0x10>)
   22b92:	6813      	ldr	r3, [r2, #0]
   22b94:	f043 0301 	orr.w	r3, r3, #1
   22b98:	6013      	str	r3, [r2, #0]
   22b9a:	2000      	movs	r0, #0
   22b9c:	4770      	bx	lr
   22b9e:	bf00      	nop
   22ba0:	40018000 	.word	0x40018000

00022ba4 <am_hal_cachectrl_control>:
   22ba4:	b510      	push	{r4, lr}
   22ba6:	3801      	subs	r0, #1
   22ba8:	b08e      	sub	sp, #56	; 0x38
   22baa:	2810      	cmp	r0, #16
   22bac:	f200 8143 	bhi.w	22e36 <am_hal_cachectrl_control+0x292>
   22bb0:	e8df f010 	tbh	[pc, r0, lsl #1]
   22bb4:	01380136 	.word	0x01380136
   22bb8:	0011013e 	.word	0x0011013e
   22bbc:	001a0018 	.word	0x001a0018
   22bc0:	001f001c 	.word	0x001f001c
   22bc4:	00300022 	.word	0x00300022
   22bc8:	0074003c 	.word	0x0074003c
   22bcc:	00e400ac 	.word	0x00e400ac
   22bd0:	011a00ff 	.word	0x011a00ff
   22bd4:	0120      	.short	0x0120
   22bd6:	f44f 7208 	mov.w	r2, #544	; 0x220
   22bda:	4ba8      	ldr	r3, [pc, #672]	; (22e7c <am_hal_cachectrl_control+0x2d8>)
   22bdc:	2000      	movs	r0, #0
   22bde:	609a      	str	r2, [r3, #8]
   22be0:	b00e      	add	sp, #56	; 0x38
   22be2:	bd10      	pop	{r4, pc}
   22be4:	2240      	movs	r2, #64	; 0x40
   22be6:	e7f8      	b.n	22bda <am_hal_cachectrl_control+0x36>
   22be8:	2220      	movs	r2, #32
   22bea:	e7f6      	b.n	22bda <am_hal_cachectrl_control+0x36>
   22bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22bf0:	e7f3      	b.n	22bda <am_hal_cachectrl_control+0x36>
   22bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
   22bf6:	e7f0      	b.n	22bda <am_hal_cachectrl_control+0x36>
   22bf8:	f000 fc04 	bl	23404 <am_hal_interrupt_master_disable>
   22bfc:	4a9f      	ldr	r2, [pc, #636]	; (22e7c <am_hal_cachectrl_control+0x2d8>)
   22bfe:	9000      	str	r0, [sp, #0]
   22c00:	6813      	ldr	r3, [r2, #0]
   22c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   22c06:	6013      	str	r3, [r2, #0]
   22c08:	9800      	ldr	r0, [sp, #0]
   22c0a:	f000 fbff 	bl	2340c <am_hal_interrupt_master_set>
   22c0e:	2000      	movs	r0, #0
   22c10:	b00e      	add	sp, #56	; 0x38
   22c12:	bd10      	pop	{r4, pc}
   22c14:	f000 fbf6 	bl	23404 <am_hal_interrupt_master_disable>
   22c18:	4a98      	ldr	r2, [pc, #608]	; (22e7c <am_hal_cachectrl_control+0x2d8>)
   22c1a:	9001      	str	r0, [sp, #4]
   22c1c:	6813      	ldr	r3, [r2, #0]
   22c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   22c22:	6013      	str	r3, [r2, #0]
   22c24:	9801      	ldr	r0, [sp, #4]
   22c26:	f000 fbf1 	bl	2340c <am_hal_interrupt_master_set>
   22c2a:	e7f0      	b.n	22c0e <am_hal_cachectrl_control+0x6a>
   22c2c:	f000 fbea 	bl	23404 <am_hal_interrupt_master_disable>
   22c30:	4603      	mov	r3, r0
   22c32:	4893      	ldr	r0, [pc, #588]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22c34:	9302      	str	r3, [sp, #8]
   22c36:	f000 fa5b 	bl	230f0 <am_hal_flash_load_ui32>
   22c3a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   22c3e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22c42:	488f      	ldr	r0, [pc, #572]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22c44:	f000 fa58 	bl	230f8 <am_hal_flash_store_ui32>
   22c48:	9802      	ldr	r0, [sp, #8]
   22c4a:	f000 fbdf 	bl	2340c <am_hal_interrupt_master_set>
   22c4e:	f000 fbd9 	bl	23404 <am_hal_interrupt_master_disable>
   22c52:	4603      	mov	r3, r0
   22c54:	488a      	ldr	r0, [pc, #552]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22c56:	9303      	str	r3, [sp, #12]
   22c58:	f000 fa4a 	bl	230f0 <am_hal_flash_load_ui32>
   22c5c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   22c60:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
   22c64:	4886      	ldr	r0, [pc, #536]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22c66:	f000 fa47 	bl	230f8 <am_hal_flash_store_ui32>
   22c6a:	9803      	ldr	r0, [sp, #12]
   22c6c:	f000 fbce 	bl	2340c <am_hal_interrupt_master_set>
   22c70:	f000 fbc8 	bl	23404 <am_hal_interrupt_master_disable>
   22c74:	4603      	mov	r3, r0
   22c76:	4882      	ldr	r0, [pc, #520]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22c78:	9304      	str	r3, [sp, #16]
   22c7a:	f000 fa39 	bl	230f0 <am_hal_flash_load_ui32>
   22c7e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   22c82:	f021 010f 	bic.w	r1, r1, #15
   22c86:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22c8a:	f041 0103 	orr.w	r1, r1, #3
   22c8e:	487c      	ldr	r0, [pc, #496]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22c90:	f000 fa32 	bl	230f8 <am_hal_flash_store_ui32>
   22c94:	9804      	ldr	r0, [sp, #16]
   22c96:	f000 fbb9 	bl	2340c <am_hal_interrupt_master_set>
   22c9a:	e7b8      	b.n	22c0e <am_hal_cachectrl_control+0x6a>
   22c9c:	f000 fbb2 	bl	23404 <am_hal_interrupt_master_disable>
   22ca0:	4603      	mov	r3, r0
   22ca2:	4877      	ldr	r0, [pc, #476]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22ca4:	9305      	str	r3, [sp, #20]
   22ca6:	f000 fa23 	bl	230f0 <am_hal_flash_load_ui32>
   22caa:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   22cae:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   22cb2:	4873      	ldr	r0, [pc, #460]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22cb4:	f000 fa20 	bl	230f8 <am_hal_flash_store_ui32>
   22cb8:	9805      	ldr	r0, [sp, #20]
   22cba:	f000 fba7 	bl	2340c <am_hal_interrupt_master_set>
   22cbe:	f000 fba1 	bl	23404 <am_hal_interrupt_master_disable>
   22cc2:	4603      	mov	r3, r0
   22cc4:	486e      	ldr	r0, [pc, #440]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22cc6:	9306      	str	r3, [sp, #24]
   22cc8:	f000 fa12 	bl	230f0 <am_hal_flash_load_ui32>
   22ccc:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   22cd0:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
   22cd4:	486a      	ldr	r0, [pc, #424]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22cd6:	f000 fa0f 	bl	230f8 <am_hal_flash_store_ui32>
   22cda:	9806      	ldr	r0, [sp, #24]
   22cdc:	f000 fb96 	bl	2340c <am_hal_interrupt_master_set>
   22ce0:	f000 fb90 	bl	23404 <am_hal_interrupt_master_disable>
   22ce4:	4603      	mov	r3, r0
   22ce6:	4866      	ldr	r0, [pc, #408]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22ce8:	9307      	str	r3, [sp, #28]
   22cea:	f000 fa01 	bl	230f0 <am_hal_flash_load_ui32>
   22cee:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   22cf2:	f021 010f 	bic.w	r1, r1, #15
   22cf6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22cfa:	f041 0101 	orr.w	r1, r1, #1
   22cfe:	4860      	ldr	r0, [pc, #384]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d00:	f000 f9fa 	bl	230f8 <am_hal_flash_store_ui32>
   22d04:	9807      	ldr	r0, [sp, #28]
   22d06:	f000 fb81 	bl	2340c <am_hal_interrupt_master_set>
   22d0a:	e780      	b.n	22c0e <am_hal_cachectrl_control+0x6a>
   22d0c:	f000 fb7a 	bl	23404 <am_hal_interrupt_master_disable>
   22d10:	4603      	mov	r3, r0
   22d12:	485b      	ldr	r0, [pc, #364]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d14:	9308      	str	r3, [sp, #32]
   22d16:	f000 f9eb 	bl	230f0 <am_hal_flash_load_ui32>
   22d1a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   22d1e:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   22d22:	4857      	ldr	r0, [pc, #348]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d24:	f000 f9e8 	bl	230f8 <am_hal_flash_store_ui32>
   22d28:	9808      	ldr	r0, [sp, #32]
   22d2a:	f000 fb6f 	bl	2340c <am_hal_interrupt_master_set>
   22d2e:	f000 fb69 	bl	23404 <am_hal_interrupt_master_disable>
   22d32:	4603      	mov	r3, r0
   22d34:	4852      	ldr	r0, [pc, #328]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d36:	9309      	str	r3, [sp, #36]	; 0x24
   22d38:	f000 f9da 	bl	230f0 <am_hal_flash_load_ui32>
   22d3c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   22d40:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
   22d44:	484e      	ldr	r0, [pc, #312]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d46:	f000 f9d7 	bl	230f8 <am_hal_flash_store_ui32>
   22d4a:	9809      	ldr	r0, [sp, #36]	; 0x24
   22d4c:	f000 fb5e 	bl	2340c <am_hal_interrupt_master_set>
   22d50:	f000 fb58 	bl	23404 <am_hal_interrupt_master_disable>
   22d54:	4603      	mov	r3, r0
   22d56:	484a      	ldr	r0, [pc, #296]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d58:	930a      	str	r3, [sp, #40]	; 0x28
   22d5a:	f000 f9c9 	bl	230f0 <am_hal_flash_load_ui32>
   22d5e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   22d62:	f021 010f 	bic.w	r1, r1, #15
   22d66:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22d6a:	f041 0101 	orr.w	r1, r1, #1
   22d6e:	4844      	ldr	r0, [pc, #272]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d70:	f000 f9c2 	bl	230f8 <am_hal_flash_store_ui32>
   22d74:	980a      	ldr	r0, [sp, #40]	; 0x28
   22d76:	f000 fb49 	bl	2340c <am_hal_interrupt_master_set>
   22d7a:	e748      	b.n	22c0e <am_hal_cachectrl_control+0x6a>
   22d7c:	2900      	cmp	r1, #0
   22d7e:	d05a      	beq.n	22e36 <am_hal_cachectrl_control+0x292>
   22d80:	680c      	ldr	r4, [r1, #0]
   22d82:	2c03      	cmp	r4, #3
   22d84:	d834      	bhi.n	22df0 <am_hal_cachectrl_control+0x24c>
   22d86:	f000 fb3d 	bl	23404 <am_hal_interrupt_master_disable>
   22d8a:	4603      	mov	r3, r0
   22d8c:	483c      	ldr	r0, [pc, #240]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22d8e:	930b      	str	r3, [sp, #44]	; 0x2c
   22d90:	f000 f9ae 	bl	230f0 <am_hal_flash_load_ui32>
   22d94:	0323      	lsls	r3, r4, #12
   22d96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   22d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   22d9e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   22da2:	4319      	orrs	r1, r3
   22da4:	4836      	ldr	r0, [pc, #216]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22da6:	f000 f9a7 	bl	230f8 <am_hal_flash_store_ui32>
   22daa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22dac:	f000 fb2e 	bl	2340c <am_hal_interrupt_master_set>
   22db0:	e72d      	b.n	22c0e <am_hal_cachectrl_control+0x6a>
   22db2:	2900      	cmp	r1, #0
   22db4:	d03f      	beq.n	22e36 <am_hal_cachectrl_control+0x292>
   22db6:	680c      	ldr	r4, [r1, #0]
   22db8:	2c07      	cmp	r4, #7
   22dba:	d819      	bhi.n	22df0 <am_hal_cachectrl_control+0x24c>
   22dbc:	f000 fb22 	bl	23404 <am_hal_interrupt_master_disable>
   22dc0:	4603      	mov	r3, r0
   22dc2:	482f      	ldr	r0, [pc, #188]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22dc4:	930c      	str	r3, [sp, #48]	; 0x30
   22dc6:	f000 f993 	bl	230f0 <am_hal_flash_load_ui32>
   22dca:	0123      	lsls	r3, r4, #4
   22dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   22dd0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   22dd4:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   22dd8:	4319      	orrs	r1, r3
   22dda:	4829      	ldr	r0, [pc, #164]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22ddc:	f000 f98c 	bl	230f8 <am_hal_flash_store_ui32>
   22de0:	980c      	ldr	r0, [sp, #48]	; 0x30
   22de2:	f000 fb13 	bl	2340c <am_hal_interrupt_master_set>
   22de6:	e712      	b.n	22c0e <am_hal_cachectrl_control+0x6a>
   22de8:	b329      	cbz	r1, 22e36 <am_hal_cachectrl_control+0x292>
   22dea:	680c      	ldr	r4, [r1, #0]
   22dec:	2c0f      	cmp	r4, #15
   22dee:	d926      	bls.n	22e3e <am_hal_cachectrl_control+0x29a>
   22df0:	2001      	movs	r0, #1
   22df2:	e6f5      	b.n	22be0 <am_hal_cachectrl_control+0x3c>
   22df4:	b1f9      	cbz	r1, 22e36 <am_hal_cachectrl_control+0x292>
   22df6:	684a      	ldr	r2, [r1, #4]
   22df8:	4b22      	ldr	r3, [pc, #136]	; (22e84 <am_hal_cachectrl_control+0x2e0>)
   22dfa:	4013      	ands	r3, r2
   22dfc:	b9db      	cbnz	r3, 22e36 <am_hal_cachectrl_control+0x292>
   22dfe:	688b      	ldr	r3, [r1, #8]
   22e00:	4820      	ldr	r0, [pc, #128]	; (22e84 <am_hal_cachectrl_control+0x2e0>)
   22e02:	4018      	ands	r0, r3
   22e04:	b9b8      	cbnz	r0, 22e36 <am_hal_cachectrl_control+0x292>
   22e06:	780c      	ldrb	r4, [r1, #0]
   22e08:	b374      	cbz	r4, 22e68 <am_hal_cachectrl_control+0x2c4>
   22e0a:	2c01      	cmp	r4, #1
   22e0c:	d113      	bne.n	22e36 <am_hal_cachectrl_control+0x292>
   22e0e:	4c1b      	ldr	r4, [pc, #108]	; (22e7c <am_hal_cachectrl_control+0x2d8>)
   22e10:	61a2      	str	r2, [r4, #24]
   22e12:	61e3      	str	r3, [r4, #28]
   22e14:	784a      	ldrb	r2, [r1, #1]
   22e16:	6823      	ldr	r3, [r4, #0]
   22e18:	f362 03c3 	bfi	r3, r2, #3, #1
   22e1c:	6023      	str	r3, [r4, #0]
   22e1e:	e6df      	b.n	22be0 <am_hal_cachectrl_control+0x3c>
   22e20:	2201      	movs	r2, #1
   22e22:	e6da      	b.n	22bda <am_hal_cachectrl_control+0x36>
   22e24:	4b15      	ldr	r3, [pc, #84]	; (22e7c <am_hal_cachectrl_control+0x2d8>)
   22e26:	681b      	ldr	r3, [r3, #0]
   22e28:	01db      	lsls	r3, r3, #7
   22e2a:	d406      	bmi.n	22e3a <am_hal_cachectrl_control+0x296>
   22e2c:	2007      	movs	r0, #7
   22e2e:	e6d7      	b.n	22be0 <am_hal_cachectrl_control+0x3c>
   22e30:	f44f 6288 	mov.w	r2, #1088	; 0x440
   22e34:	e6d1      	b.n	22bda <am_hal_cachectrl_control+0x36>
   22e36:	2006      	movs	r0, #6
   22e38:	e6d2      	b.n	22be0 <am_hal_cachectrl_control+0x3c>
   22e3a:	2202      	movs	r2, #2
   22e3c:	e6cd      	b.n	22bda <am_hal_cachectrl_control+0x36>
   22e3e:	f000 fae1 	bl	23404 <am_hal_interrupt_master_disable>
   22e42:	4603      	mov	r3, r0
   22e44:	480e      	ldr	r0, [pc, #56]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22e46:	930d      	str	r3, [sp, #52]	; 0x34
   22e48:	f000 f952 	bl	230f0 <am_hal_flash_load_ui32>
   22e4c:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   22e50:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   22e54:	f021 010f 	bic.w	r1, r1, #15
   22e58:	4321      	orrs	r1, r4
   22e5a:	4809      	ldr	r0, [pc, #36]	; (22e80 <am_hal_cachectrl_control+0x2dc>)
   22e5c:	f000 f94c 	bl	230f8 <am_hal_flash_store_ui32>
   22e60:	980d      	ldr	r0, [sp, #52]	; 0x34
   22e62:	f000 fad3 	bl	2340c <am_hal_interrupt_master_set>
   22e66:	e6d2      	b.n	22c0e <am_hal_cachectrl_control+0x6a>
   22e68:	4c04      	ldr	r4, [pc, #16]	; (22e7c <am_hal_cachectrl_control+0x2d8>)
   22e6a:	6122      	str	r2, [r4, #16]
   22e6c:	6163      	str	r3, [r4, #20]
   22e6e:	784a      	ldrb	r2, [r1, #1]
   22e70:	6823      	ldr	r3, [r4, #0]
   22e72:	f362 0382 	bfi	r3, r2, #2, #1
   22e76:	6023      	str	r3, [r4, #0]
   22e78:	e6b2      	b.n	22be0 <am_hal_cachectrl_control+0x3c>
   22e7a:	bf00      	nop
   22e7c:	40018000 	.word	0x40018000
   22e80:	40018004 	.word	0x40018004
   22e84:	f800000f 	.word	0xf800000f

00022e88 <am_hal_clkgen_control>:
   22e88:	4b41      	ldr	r3, [pc, #260]	; (22f90 <am_hal_clkgen_control+0x108>)
   22e8a:	681a      	ldr	r2, [r3, #0]
   22e8c:	b912      	cbnz	r2, 22e94 <am_hal_clkgen_control+0xc>
   22e8e:	4a41      	ldr	r2, [pc, #260]	; (22f94 <am_hal_clkgen_control+0x10c>)
   22e90:	6812      	ldr	r2, [r2, #0]
   22e92:	601a      	str	r2, [r3, #0]
   22e94:	2809      	cmp	r0, #9
   22e96:	d878      	bhi.n	22f8a <am_hal_clkgen_control+0x102>
   22e98:	e8df f000 	tbb	[pc, r0]
   22e9c:	261e160d 	.word	0x261e160d
   22ea0:	524c423a 	.word	0x524c423a
   22ea4:	055a      	.short	0x055a
   22ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22eaa:	2000      	movs	r0, #0
   22eac:	6a1a      	ldr	r2, [r3, #32]
   22eae:	f36f 0200 	bfc	r2, #0, #1
   22eb2:	621a      	str	r2, [r3, #32]
   22eb4:	4770      	bx	lr
   22eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22eba:	2200      	movs	r2, #0
   22ebc:	2147      	movs	r1, #71	; 0x47
   22ebe:	6159      	str	r1, [r3, #20]
   22ec0:	4610      	mov	r0, r2
   22ec2:	619a      	str	r2, [r3, #24]
   22ec4:	615a      	str	r2, [r3, #20]
   22ec6:	4770      	bx	lr
   22ec8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22ecc:	2000      	movs	r0, #0
   22ece:	68d3      	ldr	r3, [r2, #12]
   22ed0:	f023 0301 	bic.w	r3, r3, #1
   22ed4:	60d3      	str	r3, [r2, #12]
   22ed6:	4770      	bx	lr
   22ed8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22edc:	2000      	movs	r0, #0
   22ede:	68d3      	ldr	r3, [r2, #12]
   22ee0:	f023 0302 	bic.w	r3, r3, #2
   22ee4:	60d3      	str	r3, [r2, #12]
   22ee6:	4770      	bx	lr
   22ee8:	4a2b      	ldr	r2, [pc, #172]	; (22f98 <am_hal_clkgen_control+0x110>)
   22eea:	68d3      	ldr	r3, [r2, #12]
   22eec:	b2db      	uxtb	r3, r3
   22eee:	2b21      	cmp	r3, #33	; 0x21
   22ef0:	d106      	bne.n	22f00 <am_hal_clkgen_control+0x78>
   22ef2:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   22ef6:	2101      	movs	r1, #1
   22ef8:	f361 2309 	bfi	r3, r1, #8, #2
   22efc:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   22f00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22f04:	2000      	movs	r0, #0
   22f06:	68d3      	ldr	r3, [r2, #12]
   22f08:	f043 0301 	orr.w	r3, r3, #1
   22f0c:	60d3      	str	r3, [r2, #12]
   22f0e:	4770      	bx	lr
   22f10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22f14:	2000      	movs	r0, #0
   22f16:	68d3      	ldr	r3, [r2, #12]
   22f18:	f043 0302 	orr.w	r3, r3, #2
   22f1c:	60d3      	str	r3, [r2, #12]
   22f1e:	4770      	bx	lr
   22f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22f24:	2200      	movs	r2, #0
   22f26:	2047      	movs	r0, #71	; 0x47
   22f28:	2101      	movs	r1, #1
   22f2a:	6158      	str	r0, [r3, #20]
   22f2c:	6199      	str	r1, [r3, #24]
   22f2e:	4610      	mov	r0, r2
   22f30:	615a      	str	r2, [r3, #20]
   22f32:	4770      	bx	lr
   22f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22f38:	2000      	movs	r0, #0
   22f3a:	68da      	ldr	r2, [r3, #12]
   22f3c:	60da      	str	r2, [r3, #12]
   22f3e:	4770      	bx	lr
   22f40:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22f44:	2000      	movs	r0, #0
   22f46:	68d3      	ldr	r3, [r2, #12]
   22f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22f4c:	60d3      	str	r3, [r2, #12]
   22f4e:	4770      	bx	lr
   22f50:	b510      	push	{r4, lr}
   22f52:	4a11      	ldr	r2, [pc, #68]	; (22f98 <am_hal_clkgen_control+0x110>)
   22f54:	68d3      	ldr	r3, [r2, #12]
   22f56:	b2db      	uxtb	r3, r3
   22f58:	2b21      	cmp	r3, #33	; 0x21
   22f5a:	460c      	mov	r4, r1
   22f5c:	d008      	beq.n	22f70 <am_hal_clkgen_control+0xe8>
   22f5e:	b194      	cbz	r4, 22f86 <am_hal_clkgen_control+0xfe>
   22f60:	6823      	ldr	r3, [r4, #0]
   22f62:	f043 0301 	orr.w	r3, r3, #1
   22f66:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22f6a:	2000      	movs	r0, #0
   22f6c:	6213      	str	r3, [r2, #32]
   22f6e:	bd10      	pop	{r4, pc}
   22f70:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   22f74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   22f78:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   22f7c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   22f80:	f000 f86c 	bl	2305c <am_hal_flash_delay>
   22f84:	e7eb      	b.n	22f5e <am_hal_clkgen_control+0xd6>
   22f86:	4b05      	ldr	r3, [pc, #20]	; (22f9c <am_hal_clkgen_control+0x114>)
   22f88:	e7ed      	b.n	22f66 <am_hal_clkgen_control+0xde>
   22f8a:	2006      	movs	r0, #6
   22f8c:	4770      	bx	lr
   22f8e:	bf00      	nop
   22f90:	100095f8 	.word	0x100095f8
   22f94:	4ffff000 	.word	0x4ffff000
   22f98:	40020000 	.word	0x40020000
   22f9c:	0025b801 	.word	0x0025b801

00022fa0 <am_hal_clkgen_status_get>:
   22fa0:	b1a8      	cbz	r0, 22fce <am_hal_clkgen_status_get+0x2e>
   22fa2:	b410      	push	{r4}
   22fa4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22fa8:	490a      	ldr	r1, [pc, #40]	; (22fd4 <am_hal_clkgen_status_get+0x34>)
   22faa:	6994      	ldr	r4, [r2, #24]
   22fac:	4b0a      	ldr	r3, [pc, #40]	; (22fd8 <am_hal_clkgen_status_get+0x38>)
   22fae:	f014 0f01 	tst.w	r4, #1
   22fb2:	bf08      	it	eq
   22fb4:	460b      	moveq	r3, r1
   22fb6:	6003      	str	r3, [r0, #0]
   22fb8:	69d3      	ldr	r3, [r2, #28]
   22fba:	f85d 4b04 	ldr.w	r4, [sp], #4
   22fbe:	f003 0201 	and.w	r2, r3, #1
   22fc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   22fc6:	6042      	str	r2, [r0, #4]
   22fc8:	7203      	strb	r3, [r0, #8]
   22fca:	2000      	movs	r0, #0
   22fcc:	4770      	bx	lr
   22fce:	2006      	movs	r0, #6
   22fd0:	4770      	bx	lr
   22fd2:	bf00      	nop
   22fd4:	02dc6c00 	.word	0x02dc6c00
   22fd8:	016e3600 	.word	0x016e3600

00022fdc <am_hal_ctimer_int_service>:
   22fdc:	b198      	cbz	r0, 23006 <am_hal_ctimer_int_service+0x2a>
   22fde:	b570      	push	{r4, r5, r6, lr}
   22fe0:	4e09      	ldr	r6, [pc, #36]	; (23008 <am_hal_ctimer_int_service+0x2c>)
   22fe2:	4604      	mov	r4, r0
   22fe4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   22fe8:	fab4 f384 	clz	r3, r4
   22fec:	f1c3 021f 	rsb	r2, r3, #31
   22ff0:	fa25 f303 	lsr.w	r3, r5, r3
   22ff4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   22ff8:	ea24 0403 	bic.w	r4, r4, r3
   22ffc:	b102      	cbz	r2, 23000 <am_hal_ctimer_int_service+0x24>
   22ffe:	4790      	blx	r2
   23000:	2c00      	cmp	r4, #0
   23002:	d1f1      	bne.n	22fe8 <am_hal_ctimer_int_service+0xc>
   23004:	bd70      	pop	{r4, r5, r6, pc}
   23006:	4770      	bx	lr
   23008:	10009578 	.word	0x10009578

0002300c <am_hal_ctimer_int_clear>:
   2300c:	b510      	push	{r4, lr}
   2300e:	b082      	sub	sp, #8
   23010:	4604      	mov	r4, r0
   23012:	f000 f9f7 	bl	23404 <am_hal_interrupt_master_disable>
   23016:	4b04      	ldr	r3, [pc, #16]	; (23028 <am_hal_ctimer_int_clear+0x1c>)
   23018:	9001      	str	r0, [sp, #4]
   2301a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   2301e:	9801      	ldr	r0, [sp, #4]
   23020:	f000 f9f4 	bl	2340c <am_hal_interrupt_master_set>
   23024:	b002      	add	sp, #8
   23026:	bd10      	pop	{r4, pc}
   23028:	40008000 	.word	0x40008000

0002302c <am_hal_ctimer_int_status_get>:
   2302c:	b510      	push	{r4, lr}
   2302e:	b082      	sub	sp, #8
   23030:	4604      	mov	r4, r0
   23032:	f000 f9e7 	bl	23404 <am_hal_interrupt_master_disable>
   23036:	4b08      	ldr	r3, [pc, #32]	; (23058 <am_hal_ctimer_int_status_get+0x2c>)
   23038:	9001      	str	r0, [sp, #4]
   2303a:	b93c      	cbnz	r4, 2304c <am_hal_ctimer_int_status_get+0x20>
   2303c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   23040:	9801      	ldr	r0, [sp, #4]
   23042:	f000 f9e3 	bl	2340c <am_hal_interrupt_master_set>
   23046:	4620      	mov	r0, r4
   23048:	b002      	add	sp, #8
   2304a:	bd10      	pop	{r4, pc}
   2304c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   23050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   23054:	401c      	ands	r4, r3
   23056:	e7f3      	b.n	23040 <am_hal_ctimer_int_status_get+0x14>
   23058:	40008000 	.word	0x40008000

0002305c <am_hal_flash_delay>:
   2305c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   23060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   23062:	075b      	lsls	r3, r3, #29
   23064:	bf46      	itte	mi
   23066:	0040      	lslmi	r0, r0, #1
   23068:	230e      	movmi	r3, #14
   2306a:	230b      	movpl	r3, #11
   2306c:	4298      	cmp	r0, r3
   2306e:	d800      	bhi.n	23072 <am_hal_flash_delay+0x16>
   23070:	4770      	bx	lr
   23072:	1ac0      	subs	r0, r0, r3
   23074:	4b00      	ldr	r3, [pc, #0]	; (23078 <am_hal_flash_delay+0x1c>)
   23076:	4718      	bx	r3
   23078:	0800009d 	.word	0x0800009d

0002307c <am_hal_flash_delay_status_check>:
   2307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23080:	f89d 4020 	ldrb.w	r4, [sp, #32]
   23084:	460d      	mov	r5, r1
   23086:	4616      	mov	r6, r2
   23088:	461f      	mov	r7, r3
   2308a:	b1b4      	cbz	r4, 230ba <am_hal_flash_delay_status_check+0x3e>
   2308c:	4604      	mov	r4, r0
   2308e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   23092:	f8df 8058 	ldr.w	r8, [pc, #88]	; 230ec <am_hal_flash_delay_status_check+0x70>
   23096:	e009      	b.n	230ac <am_hal_flash_delay_status_check+0x30>
   23098:	b324      	cbz	r4, 230e4 <am_hal_flash_delay_status_check+0x68>
   2309a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   2309e:	f013 0f04 	tst.w	r3, #4
   230a2:	bf14      	ite	ne
   230a4:	2012      	movne	r0, #18
   230a6:	2005      	moveq	r0, #5
   230a8:	3c01      	subs	r4, #1
   230aa:	47c0      	blx	r8
   230ac:	682b      	ldr	r3, [r5, #0]
   230ae:	4033      	ands	r3, r6
   230b0:	429f      	cmp	r7, r3
   230b2:	d1f1      	bne.n	23098 <am_hal_flash_delay_status_check+0x1c>
   230b4:	2000      	movs	r0, #0
   230b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   230ba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 230ec <am_hal_flash_delay_status_check+0x70>
   230be:	4604      	mov	r4, r0
   230c0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   230c4:	e009      	b.n	230da <am_hal_flash_delay_status_check+0x5e>
   230c6:	b16c      	cbz	r4, 230e4 <am_hal_flash_delay_status_check+0x68>
   230c8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   230cc:	f013 0f04 	tst.w	r3, #4
   230d0:	bf14      	ite	ne
   230d2:	2012      	movne	r0, #18
   230d4:	2005      	moveq	r0, #5
   230d6:	3c01      	subs	r4, #1
   230d8:	47c0      	blx	r8
   230da:	682b      	ldr	r3, [r5, #0]
   230dc:	4033      	ands	r3, r6
   230de:	429f      	cmp	r7, r3
   230e0:	d0f1      	beq.n	230c6 <am_hal_flash_delay_status_check+0x4a>
   230e2:	e7e7      	b.n	230b4 <am_hal_flash_delay_status_check+0x38>
   230e4:	2004      	movs	r0, #4
   230e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   230ea:	bf00      	nop
   230ec:	0800009d 	.word	0x0800009d

000230f0 <am_hal_flash_load_ui32>:
   230f0:	4b00      	ldr	r3, [pc, #0]	; (230f4 <am_hal_flash_load_ui32+0x4>)
   230f2:	4718      	bx	r3
   230f4:	08000075 	.word	0x08000075

000230f8 <am_hal_flash_store_ui32>:
   230f8:	4b01      	ldr	r3, [pc, #4]	; (23100 <am_hal_flash_store_ui32+0x8>)
   230fa:	f043 0301 	orr.w	r3, r3, #1
   230fe:	4718      	bx	r3
   23100:	100039c8 	.word	0x100039c8

00023104 <am_hal_gpio_pinconfig>:
   23104:	2831      	cmp	r0, #49	; 0x31
   23106:	d901      	bls.n	2310c <am_hal_gpio_pinconfig+0x8>
   23108:	2006      	movs	r0, #6
   2310a:	4770      	bx	lr
   2310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23110:	f001 0307 	and.w	r3, r1, #7
   23114:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
   23118:	b085      	sub	sp, #20
   2311a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   2311e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   23122:	d014      	beq.n	2314e <am_hal_gpio_pinconfig+0x4a>
   23124:	f3c1 1742 	ubfx	r7, r1, #5, #3
   23128:	1dbd      	adds	r5, r7, #6
   2312a:	f005 0507 	and.w	r5, r5, #7
   2312e:	2d03      	cmp	r5, #3
   23130:	f042 0201 	orr.w	r2, r2, #1
   23134:	f200 80a7 	bhi.w	23286 <am_hal_gpio_pinconfig+0x182>
   23138:	4d82      	ldr	r5, [pc, #520]	; (23344 <am_hal_gpio_pinconfig+0x240>)
   2313a:	5c2d      	ldrb	r5, [r5, r0]
   2313c:	07ee      	lsls	r6, r5, #31
   2313e:	d403      	bmi.n	23148 <am_hal_gpio_pinconfig+0x44>
   23140:	4881      	ldr	r0, [pc, #516]	; (23348 <am_hal_gpio_pinconfig+0x244>)
   23142:	b005      	add	sp, #20
   23144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23148:	3f02      	subs	r7, #2
   2314a:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   2314e:	2c00      	cmp	r4, #0
   23150:	f040 8091 	bne.w	23276 <am_hal_gpio_pinconfig+0x172>
   23154:	4c7d      	ldr	r4, [pc, #500]	; (2334c <am_hal_gpio_pinconfig+0x248>)
   23156:	4d7e      	ldr	r5, [pc, #504]	; (23350 <am_hal_gpio_pinconfig+0x24c>)
   23158:	5c24      	ldrb	r4, [r4, r0]
   2315a:	5c2d      	ldrb	r5, [r5, r0]
   2315c:	411c      	asrs	r4, r3
   2315e:	f014 0f01 	tst.w	r4, #1
   23162:	bf0c      	ite	eq
   23164:	2400      	moveq	r4, #0
   23166:	2402      	movne	r4, #2
   23168:	42ab      	cmp	r3, r5
   2316a:	ea42 0204 	orr.w	r2, r2, r4
   2316e:	f000 8096 	beq.w	2329e <am_hal_gpio_pinconfig+0x19a>
   23172:	f3c1 3341 	ubfx	r3, r1, #13, #2
   23176:	105d      	asrs	r5, r3, #1
   23178:	f3c1 2681 	ubfx	r6, r1, #10, #2
   2317c:	00db      	lsls	r3, r3, #3
   2317e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
   23182:	f003 0408 	and.w	r4, r3, #8
   23186:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   2318a:	f00e 060c 	and.w	r6, lr, #12
   2318e:	f3c1 3500 	ubfx	r5, r1, #12, #1
   23192:	2e04      	cmp	r6, #4
   23194:	ea43 0304 	orr.w	r3, r3, r4
   23198:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   2319c:	462c      	mov	r4, r5
   2319e:	f000 808b 	beq.w	232b8 <am_hal_gpio_pinconfig+0x1b4>
   231a2:	4c6c      	ldr	r4, [pc, #432]	; (23354 <am_hal_gpio_pinconfig+0x250>)
   231a4:	6827      	ldr	r7, [r4, #0]
   231a6:	1bcf      	subs	r7, r1, r7
   231a8:	fab7 f787 	clz	r7, r7
   231ac:	097f      	lsrs	r7, r7, #5
   231ae:	f01e 0f60 	tst.w	lr, #96	; 0x60
   231b2:	bf04      	itt	eq
   231b4:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   231b8:	f364 0300 	bfieq	r3, r4, #0, #1
   231bc:	0084      	lsls	r4, r0, #2
   231be:	f3c1 2101 	ubfx	r1, r1, #8, #2
   231c2:	2902      	cmp	r1, #2
   231c4:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   231c8:	d078      	beq.n	232bc <am_hal_gpio_pinconfig+0x1b8>
   231ca:	d87f      	bhi.n	232cc <am_hal_gpio_pinconfig+0x1c8>
   231cc:	2901      	cmp	r1, #1
   231ce:	f04f 0100 	mov.w	r1, #0
   231d2:	bf08      	it	eq
   231d4:	f042 0204 	orreq.w	r2, r2, #4
   231d8:	f005 0518 	and.w	r5, r5, #24
   231dc:	9101      	str	r1, [sp, #4]
   231de:	f004 041c 	and.w	r4, r4, #28
   231e2:	f020 0a03 	bic.w	sl, r0, #3
   231e6:	f04f 090f 	mov.w	r9, #15
   231ea:	fa09 f904 	lsl.w	r9, r9, r4
   231ee:	0841      	lsrs	r1, r0, #1
   231f0:	26ff      	movs	r6, #255	; 0xff
   231f2:	fa03 f404 	lsl.w	r4, r3, r4
   231f6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   231fa:	40ae      	lsls	r6, r5
   231fc:	9300      	str	r3, [sp, #0]
   231fe:	fa02 f505 	lsl.w	r5, r2, r5
   23202:	4683      	mov	fp, r0
   23204:	f021 0803 	bic.w	r8, r1, #3
   23208:	f000 f8fc 	bl	23404 <am_hal_interrupt_master_disable>
   2320c:	9b00      	ldr	r3, [sp, #0]
   2320e:	9003      	str	r0, [sp, #12]
   23210:	ea6f 0909 	mvn.w	r9, r9
   23214:	43f6      	mvns	r6, r6
   23216:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2321a:	f8df e15c 	ldr.w	lr, [pc, #348]	; 23378 <am_hal_gpio_pinconfig+0x274>
   2321e:	4a4e      	ldr	r2, [pc, #312]	; (23358 <am_hal_gpio_pinconfig+0x254>)
   23220:	b15f      	cbz	r7, 2323a <am_hal_gpio_pinconfig+0x136>
   23222:	ea4f 07db 	mov.w	r7, fp, lsr #3
   23226:	f00b 001f 	and.w	r0, fp, #31
   2322a:	f007 0704 	and.w	r7, r7, #4
   2322e:	f04f 0b01 	mov.w	fp, #1
   23232:	494a      	ldr	r1, [pc, #296]	; (2335c <am_hal_gpio_pinconfig+0x258>)
   23234:	fa0b f000 	lsl.w	r0, fp, r0
   23238:	5078      	str	r0, [r7, r1]
   2323a:	4849      	ldr	r0, [pc, #292]	; (23360 <am_hal_gpio_pinconfig+0x25c>)
   2323c:	2773      	movs	r7, #115	; 0x73
   2323e:	6607      	str	r7, [r0, #96]	; 0x60
   23240:	681f      	ldr	r7, [r3, #0]
   23242:	4037      	ands	r7, r6
   23244:	433d      	orrs	r5, r7
   23246:	601d      	str	r5, [r3, #0]
   23248:	f858 300e 	ldr.w	r3, [r8, lr]
   2324c:	ea09 0303 	and.w	r3, r9, r3
   23250:	4323      	orrs	r3, r4
   23252:	f848 300e 	str.w	r3, [r8, lr]
   23256:	f85a 3002 	ldr.w	r3, [sl, r2]
   2325a:	401e      	ands	r6, r3
   2325c:	9b01      	ldr	r3, [sp, #4]
   2325e:	2400      	movs	r4, #0
   23260:	431e      	orrs	r6, r3
   23262:	f84a 6002 	str.w	r6, [sl, r2]
   23266:	6604      	str	r4, [r0, #96]	; 0x60
   23268:	9803      	ldr	r0, [sp, #12]
   2326a:	f000 f8cf 	bl	2340c <am_hal_interrupt_master_set>
   2326e:	4620      	mov	r0, r4
   23270:	b005      	add	sp, #20
   23272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23276:	2c01      	cmp	r4, #1
   23278:	d017      	beq.n	232aa <am_hal_gpio_pinconfig+0x1a6>
   2327a:	2c02      	cmp	r4, #2
   2327c:	d035      	beq.n	232ea <am_hal_gpio_pinconfig+0x1e6>
   2327e:	4839      	ldr	r0, [pc, #228]	; (23364 <am_hal_gpio_pinconfig+0x260>)
   23280:	b005      	add	sp, #20
   23282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23286:	2ec0      	cmp	r6, #192	; 0xc0
   23288:	d02a      	beq.n	232e0 <am_hal_gpio_pinconfig+0x1dc>
   2328a:	2e20      	cmp	r6, #32
   2328c:	f47f af5f 	bne.w	2314e <am_hal_gpio_pinconfig+0x4a>
   23290:	2814      	cmp	r0, #20
   23292:	f43f af55 	beq.w	23140 <am_hal_gpio_pinconfig+0x3c>
   23296:	2c00      	cmp	r4, #0
   23298:	f43f af5c 	beq.w	23154 <am_hal_gpio_pinconfig+0x50>
   2329c:	e7eb      	b.n	23276 <am_hal_gpio_pinconfig+0x172>
   2329e:	f3c1 4402 	ubfx	r4, r1, #16, #3
   232a2:	2c07      	cmp	r4, #7
   232a4:	d128      	bne.n	232f8 <am_hal_gpio_pinconfig+0x1f4>
   232a6:	4830      	ldr	r0, [pc, #192]	; (23368 <am_hal_gpio_pinconfig+0x264>)
   232a8:	e74b      	b.n	23142 <am_hal_gpio_pinconfig+0x3e>
   232aa:	4c26      	ldr	r4, [pc, #152]	; (23344 <am_hal_gpio_pinconfig+0x240>)
   232ac:	5c24      	ldrb	r4, [r4, r0]
   232ae:	07a5      	lsls	r5, r4, #30
   232b0:	d5e5      	bpl.n	2327e <am_hal_gpio_pinconfig+0x17a>
   232b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   232b6:	e74d      	b.n	23154 <am_hal_gpio_pinconfig+0x50>
   232b8:	2701      	movs	r7, #1
   232ba:	e778      	b.n	231ae <am_hal_gpio_pinconfig+0xaa>
   232bc:	f005 0518 	and.w	r5, r5, #24
   232c0:	f04f 0801 	mov.w	r8, #1
   232c4:	fa08 f105 	lsl.w	r1, r8, r5
   232c8:	9101      	str	r1, [sp, #4]
   232ca:	e788      	b.n	231de <am_hal_gpio_pinconfig+0xda>
   232cc:	f005 0518 	and.w	r5, r5, #24
   232d0:	f04f 0801 	mov.w	r8, #1
   232d4:	fa08 f105 	lsl.w	r1, r8, r5
   232d8:	f042 0204 	orr.w	r2, r2, #4
   232dc:	9101      	str	r1, [sp, #4]
   232de:	e77e      	b.n	231de <am_hal_gpio_pinconfig+0xda>
   232e0:	2814      	cmp	r0, #20
   232e2:	f43f af34 	beq.w	2314e <am_hal_gpio_pinconfig+0x4a>
   232e6:	4821      	ldr	r0, [pc, #132]	; (2336c <am_hal_gpio_pinconfig+0x268>)
   232e8:	e72b      	b.n	23142 <am_hal_gpio_pinconfig+0x3e>
   232ea:	4c16      	ldr	r4, [pc, #88]	; (23344 <am_hal_gpio_pinconfig+0x240>)
   232ec:	5c24      	ldrb	r4, [r4, r0]
   232ee:	0764      	lsls	r4, r4, #29
   232f0:	d5c5      	bpl.n	2327e <am_hal_gpio_pinconfig+0x17a>
   232f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   232f6:	e72d      	b.n	23154 <am_hal_gpio_pinconfig+0x50>
   232f8:	4d1d      	ldr	r5, [pc, #116]	; (23370 <am_hal_gpio_pinconfig+0x26c>)
   232fa:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   232fe:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   23302:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   23306:	429e      	cmp	r6, r3
   23308:	d00c      	beq.n	23324 <am_hal_gpio_pinconfig+0x220>
   2330a:	0084      	lsls	r4, r0, #2
   2330c:	4425      	add	r5, r4
   2330e:	786e      	ldrb	r6, [r5, #1]
   23310:	429e      	cmp	r6, r3
   23312:	d012      	beq.n	2333a <am_hal_gpio_pinconfig+0x236>
   23314:	78ae      	ldrb	r6, [r5, #2]
   23316:	429e      	cmp	r6, r3
   23318:	d00d      	beq.n	23336 <am_hal_gpio_pinconfig+0x232>
   2331a:	78ed      	ldrb	r5, [r5, #3]
   2331c:	429d      	cmp	r5, r3
   2331e:	d00e      	beq.n	2333e <am_hal_gpio_pinconfig+0x23a>
   23320:	4814      	ldr	r0, [pc, #80]	; (23374 <am_hal_gpio_pinconfig+0x270>)
   23322:	e70e      	b.n	23142 <am_hal_gpio_pinconfig+0x3e>
   23324:	2300      	movs	r3, #0
   23326:	0084      	lsls	r4, r0, #2
   23328:	005b      	lsls	r3, r3, #1
   2332a:	f3c1 5540 	ubfx	r5, r1, #21, #1
   2332e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   23332:	2700      	movs	r7, #0
   23334:	e743      	b.n	231be <am_hal_gpio_pinconfig+0xba>
   23336:	2302      	movs	r3, #2
   23338:	e7f6      	b.n	23328 <am_hal_gpio_pinconfig+0x224>
   2333a:	2301      	movs	r3, #1
   2333c:	e7f4      	b.n	23328 <am_hal_gpio_pinconfig+0x224>
   2333e:	2303      	movs	r3, #3
   23340:	e7f2      	b.n	23328 <am_hal_gpio_pinconfig+0x224>
   23342:	bf00      	nop
   23344:	000280ec 	.word	0x000280ec
   23348:	08000100 	.word	0x08000100
   2334c:	000281e8 	.word	0x000281e8
   23350:	00028224 	.word	0x00028224
   23354:	0002821c 	.word	0x0002821c
   23358:	400100e0 	.word	0x400100e0
   2335c:	400100b4 	.word	0x400100b4
   23360:	40010000 	.word	0x40010000
   23364:	08000102 	.word	0x08000102
   23368:	08000103 	.word	0x08000103
   2336c:	08000101 	.word	0x08000101
   23370:	00028120 	.word	0x00028120
   23374:	08000104 	.word	0x08000104
   23378:	40010040 	.word	0x40010040

0002337c <am_hal_gpio_state_write>:
   2337c:	2831      	cmp	r0, #49	; 0x31
   2337e:	d901      	bls.n	23384 <am_hal_gpio_state_write+0x8>
   23380:	2005      	movs	r0, #5
   23382:	4770      	bx	lr
   23384:	2905      	cmp	r1, #5
   23386:	d901      	bls.n	2338c <am_hal_gpio_state_write+0x10>
   23388:	2006      	movs	r0, #6
   2338a:	4770      	bx	lr
   2338c:	b570      	push	{r4, r5, r6, lr}
   2338e:	f000 031f 	and.w	r3, r0, #31
   23392:	b082      	sub	sp, #8
   23394:	08c0      	lsrs	r0, r0, #3
   23396:	2201      	movs	r2, #1
   23398:	460d      	mov	r5, r1
   2339a:	f000 0404 	and.w	r4, r0, #4
   2339e:	fa02 f603 	lsl.w	r6, r2, r3
   233a2:	f000 f82f 	bl	23404 <am_hal_interrupt_master_disable>
   233a6:	1e69      	subs	r1, r5, #1
   233a8:	9001      	str	r0, [sp, #4]
   233aa:	2904      	cmp	r1, #4
   233ac:	d817      	bhi.n	233de <am_hal_gpio_state_write+0x62>
   233ae:	e8df f001 	tbb	[pc, r1]
   233b2:	0e13      	.short	0x0e13
   233b4:	030b      	.short	0x030b
   233b6:	19          	.byte	0x19
   233b7:	00          	.byte	0x00
   233b8:	4b0d      	ldr	r3, [pc, #52]	; (233f0 <am_hal_gpio_state_write+0x74>)
   233ba:	50e6      	str	r6, [r4, r3]
   233bc:	9801      	ldr	r0, [sp, #4]
   233be:	f000 f825 	bl	2340c <am_hal_interrupt_master_set>
   233c2:	2000      	movs	r0, #0
   233c4:	b002      	add	sp, #8
   233c6:	bd70      	pop	{r4, r5, r6, pc}
   233c8:	4b0a      	ldr	r3, [pc, #40]	; (233f4 <am_hal_gpio_state_write+0x78>)
   233ca:	50e6      	str	r6, [r4, r3]
   233cc:	e7f6      	b.n	233bc <am_hal_gpio_state_write+0x40>
   233ce:	4a0a      	ldr	r2, [pc, #40]	; (233f8 <am_hal_gpio_state_write+0x7c>)
   233d0:	58a3      	ldr	r3, [r4, r2]
   233d2:	4073      	eors	r3, r6
   233d4:	50a3      	str	r3, [r4, r2]
   233d6:	e7f1      	b.n	233bc <am_hal_gpio_state_write+0x40>
   233d8:	4b08      	ldr	r3, [pc, #32]	; (233fc <am_hal_gpio_state_write+0x80>)
   233da:	50e6      	str	r6, [r4, r3]
   233dc:	e7ee      	b.n	233bc <am_hal_gpio_state_write+0x40>
   233de:	4b08      	ldr	r3, [pc, #32]	; (23400 <am_hal_gpio_state_write+0x84>)
   233e0:	50e6      	str	r6, [r4, r3]
   233e2:	e7eb      	b.n	233bc <am_hal_gpio_state_write+0x40>
   233e4:	4a03      	ldr	r2, [pc, #12]	; (233f4 <am_hal_gpio_state_write+0x78>)
   233e6:	58a3      	ldr	r3, [r4, r2]
   233e8:	4073      	eors	r3, r6
   233ea:	50a3      	str	r3, [r4, r2]
   233ec:	e7e6      	b.n	233bc <am_hal_gpio_state_write+0x40>
   233ee:	bf00      	nop
   233f0:	400100a8 	.word	0x400100a8
   233f4:	400100b4 	.word	0x400100b4
   233f8:	40010088 	.word	0x40010088
   233fc:	40010090 	.word	0x40010090
   23400:	40010098 	.word	0x40010098

00023404 <am_hal_interrupt_master_disable>:
   23404:	f3ef 8010 	mrs	r0, PRIMASK
   23408:	b672      	cpsid	i
   2340a:	4770      	bx	lr

0002340c <am_hal_interrupt_master_set>:
   2340c:	f380 8810 	msr	PRIMASK, r0
   23410:	4770      	bx	lr
   23412:	bf00      	nop

00023414 <am_hal_itm_enable>:
   23414:	4a0b      	ldr	r2, [pc, #44]	; (23444 <am_hal_itm_enable+0x30>)
   23416:	68d3      	ldr	r3, [r2, #12]
   23418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2341c:	60d3      	str	r3, [r2, #12]
   2341e:	68d3      	ldr	r3, [r2, #12]
   23420:	01db      	lsls	r3, r3, #7
   23422:	d5fc      	bpl.n	2341e <am_hal_itm_enable+0xa>
   23424:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   23428:	4907      	ldr	r1, [pc, #28]	; (23448 <am_hal_itm_enable+0x34>)
   2342a:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   2342e:	4a07      	ldr	r2, [pc, #28]	; (2344c <am_hal_itm_enable+0x38>)
   23430:	200f      	movs	r0, #15
   23432:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23436:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2343a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   2343e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   23442:	4770      	bx	lr
   23444:	e000edf0 	.word	0xe000edf0
   23448:	c5acce55 	.word	0xc5acce55
   2344c:	00150511 	.word	0x00150511

00023450 <am_hal_itm_disable>:
   23450:	b510      	push	{r4, lr}
   23452:	4b25      	ldr	r3, [pc, #148]	; (234e8 <am_hal_itm_disable+0x98>)
   23454:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   23458:	b9b3      	cbnz	r3, 23488 <am_hal_itm_disable+0x38>
   2345a:	4b24      	ldr	r3, [pc, #144]	; (234ec <am_hal_itm_disable+0x9c>)
   2345c:	68da      	ldr	r2, [r3, #12]
   2345e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   23462:	60da      	str	r2, [r3, #12]
   23464:	68da      	ldr	r2, [r3, #12]
   23466:	01d2      	lsls	r2, r2, #7
   23468:	d5fc      	bpl.n	23464 <am_hal_itm_disable+0x14>
   2346a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   2346e:	4920      	ldr	r1, [pc, #128]	; (234f0 <am_hal_itm_disable+0xa0>)
   23470:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   23474:	4a1f      	ldr	r2, [pc, #124]	; (234f4 <am_hal_itm_disable+0xa4>)
   23476:	200f      	movs	r0, #15
   23478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2347c:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   23480:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   23484:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   23488:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2348c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   23490:	021b      	lsls	r3, r3, #8
   23492:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   23496:	d4f9      	bmi.n	2348c <am_hal_itm_disable+0x3c>
   23498:	f44f 7048 	mov.w	r0, #800	; 0x320
   2349c:	f7ff fdde 	bl	2305c <am_hal_flash_delay>
   234a0:	4b13      	ldr	r3, [pc, #76]	; (234f0 <am_hal_itm_disable+0xa0>)
   234a2:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   234a6:	4621      	mov	r1, r4
   234a8:	2064      	movs	r0, #100	; 0x64
   234aa:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
   234ae:	f023 0301 	bic.w	r3, r3, #1
   234b2:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
   234b6:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
   234ba:	4b0f      	ldr	r3, [pc, #60]	; (234f8 <am_hal_itm_disable+0xa8>)
   234bc:	4013      	ands	r3, r2
   234be:	2b00      	cmp	r3, #0
   234c0:	d1f9      	bne.n	234b6 <am_hal_itm_disable+0x66>
   234c2:	3801      	subs	r0, #1
   234c4:	d1f1      	bne.n	234aa <am_hal_itm_disable+0x5a>
   234c6:	4a09      	ldr	r2, [pc, #36]	; (234ec <am_hal_itm_disable+0x9c>)
   234c8:	68d3      	ldr	r3, [r2, #12]
   234ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   234ce:	60d3      	str	r3, [r2, #12]
   234d0:	68d3      	ldr	r3, [r2, #12]
   234d2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   234d6:	d1fb      	bne.n	234d0 <am_hal_itm_disable+0x80>
   234d8:	4a03      	ldr	r2, [pc, #12]	; (234e8 <am_hal_itm_disable+0x98>)
   234da:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   234de:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   234e2:	2b00      	cmp	r3, #0
   234e4:	d1fb      	bne.n	234de <am_hal_itm_disable+0x8e>
   234e6:	bd10      	pop	{r4, pc}
   234e8:	40020000 	.word	0x40020000
   234ec:	e000edf0 	.word	0xe000edf0
   234f0:	c5acce55 	.word	0xc5acce55
   234f4:	00150511 	.word	0x00150511
   234f8:	00800001 	.word	0x00800001

000234fc <am_hal_itm_print>:
   234fc:	7803      	ldrb	r3, [r0, #0]
   234fe:	b1a3      	cbz	r3, 2352a <am_hal_itm_print+0x2e>
   23500:	4602      	mov	r2, r0
   23502:	2300      	movs	r3, #0
   23504:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   23508:	3301      	adds	r3, #1
   2350a:	2900      	cmp	r1, #0
   2350c:	d1fa      	bne.n	23504 <am_hal_itm_print+0x8>
   2350e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   23512:	b430      	push	{r4, r5}
   23514:	18c1      	adds	r1, r0, r3
   23516:	4615      	mov	r5, r2
   23518:	f810 4b01 	ldrb.w	r4, [r0], #1
   2351c:	6813      	ldr	r3, [r2, #0]
   2351e:	2b00      	cmp	r3, #0
   23520:	d0fc      	beq.n	2351c <am_hal_itm_print+0x20>
   23522:	4288      	cmp	r0, r1
   23524:	702c      	strb	r4, [r5, #0]
   23526:	d1f7      	bne.n	23518 <am_hal_itm_print+0x1c>
   23528:	bc30      	pop	{r4, r5}
   2352a:	4770      	bx	lr

0002352c <am_hal_mcuctrl_info_get>:
   2352c:	b4f0      	push	{r4, r5, r6, r7}
   2352e:	b121      	cbz	r1, 2353a <am_hal_mcuctrl_info_get+0xe>
   23530:	2801      	cmp	r0, #1
   23532:	d038      	beq.n	235a6 <am_hal_mcuctrl_info_get+0x7a>
   23534:	d320      	bcc.n	23578 <am_hal_mcuctrl_info_get+0x4c>
   23536:	2802      	cmp	r0, #2
   23538:	d002      	beq.n	23540 <am_hal_mcuctrl_info_get+0x14>
   2353a:	2006      	movs	r0, #6
   2353c:	bcf0      	pop	{r4, r5, r6, r7}
   2353e:	4770      	bx	lr
   23540:	4a41      	ldr	r2, [pc, #260]	; (23648 <am_hal_mcuctrl_info_get+0x11c>)
   23542:	684d      	ldr	r5, [r1, #4]
   23544:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   23548:	694c      	ldr	r4, [r1, #20]
   2354a:	f003 0601 	and.w	r6, r3, #1
   2354e:	f3c3 0040 	ubfx	r0, r3, #1, #1
   23552:	f3c3 0380 	ubfx	r3, r3, #2, #1
   23556:	700e      	strb	r6, [r1, #0]
   23558:	7208      	strb	r0, [r1, #8]
   2355a:	740b      	strb	r3, [r1, #16]
   2355c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   23560:	60cb      	str	r3, [r1, #12]
   23562:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   23566:	4328      	orrs	r0, r5
   23568:	6048      	str	r0, [r1, #4]
   2356a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   2356e:	4323      	orrs	r3, r4
   23570:	2000      	movs	r0, #0
   23572:	614b      	str	r3, [r1, #20]
   23574:	bcf0      	pop	{r4, r5, r6, r7}
   23576:	4770      	bx	lr
   23578:	4a33      	ldr	r2, [pc, #204]	; (23648 <am_hal_mcuctrl_info_get+0x11c>)
   2357a:	6993      	ldr	r3, [r2, #24]
   2357c:	f3c3 1080 	ubfx	r0, r3, #6, #1
   23580:	f3c3 0380 	ubfx	r3, r3, #2, #1
   23584:	7008      	strb	r0, [r1, #0]
   23586:	704b      	strb	r3, [r1, #1]
   23588:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   2358c:	f3c3 6381 	ubfx	r3, r3, #26, #2
   23590:	710b      	strb	r3, [r1, #4]
   23592:	6953      	ldr	r3, [r2, #20]
   23594:	f3c3 0240 	ubfx	r2, r3, #1, #1
   23598:	f003 0301 	and.w	r3, r3, #1
   2359c:	2000      	movs	r0, #0
   2359e:	708a      	strb	r2, [r1, #2]
   235a0:	70cb      	strb	r3, [r1, #3]
   235a2:	bcf0      	pop	{r4, r5, r6, r7}
   235a4:	4770      	bx	lr
   235a6:	4b28      	ldr	r3, [pc, #160]	; (23648 <am_hal_mcuctrl_info_get+0x11c>)
   235a8:	4c28      	ldr	r4, [pc, #160]	; (2364c <am_hal_mcuctrl_info_get+0x120>)
   235aa:	681a      	ldr	r2, [r3, #0]
   235ac:	600a      	str	r2, [r1, #0]
   235ae:	6858      	ldr	r0, [r3, #4]
   235b0:	6048      	str	r0, [r1, #4]
   235b2:	6898      	ldr	r0, [r3, #8]
   235b4:	6088      	str	r0, [r1, #8]
   235b6:	68d8      	ldr	r0, [r3, #12]
   235b8:	60c8      	str	r0, [r1, #12]
   235ba:	691d      	ldr	r5, [r3, #16]
   235bc:	4824      	ldr	r0, [pc, #144]	; (23650 <am_hal_mcuctrl_info_get+0x124>)
   235be:	610d      	str	r5, [r1, #16]
   235c0:	f3c2 5703 	ubfx	r7, r2, #20, #4
   235c4:	f3c2 4603 	ubfx	r6, r2, #16, #4
   235c8:	695d      	ldr	r5, [r3, #20]
   235ca:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   235ce:	4b21      	ldr	r3, [pc, #132]	; (23654 <am_hal_mcuctrl_info_get+0x128>)
   235d0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   235d4:	6208      	str	r0, [r1, #32]
   235d6:	f002 0201 	and.w	r2, r2, #1
   235da:	614d      	str	r5, [r1, #20]
   235dc:	61cc      	str	r4, [r1, #28]
   235de:	618a      	str	r2, [r1, #24]
   235e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   235e4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   235e8:	b2d0      	uxtb	r0, r2
   235ea:	f004 020f 	and.w	r2, r4, #15
   235ee:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   235f2:	624a      	str	r2, [r1, #36]	; 0x24
   235f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   235f8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   235fc:	f3c2 1003 	ubfx	r0, r2, #4, #4
   23600:	f004 020f 	and.w	r2, r4, #15
   23604:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   23608:	628a      	str	r2, [r1, #40]	; 0x28
   2360a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   2360e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   23612:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   23616:	f3c2 1203 	ubfx	r2, r2, #4, #4
   2361a:	4302      	orrs	r2, r0
   2361c:	62ca      	str	r2, [r1, #44]	; 0x2c
   2361e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   23622:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   23626:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   2362a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2362e:	b2c0      	uxtb	r0, r0
   23630:	0400      	lsls	r0, r0, #16
   23632:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   23636:	b2d2      	uxtb	r2, r2
   23638:	431a      	orrs	r2, r3
   2363a:	b2e3      	uxtb	r3, r4
   2363c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   23640:	630b      	str	r3, [r1, #48]	; 0x30
   23642:	2000      	movs	r0, #0
   23644:	bcf0      	pop	{r4, r5, r6, r7}
   23646:	4770      	bx	lr
   23648:	40020000 	.word	0x40020000
   2364c:	00028258 	.word	0x00028258
   23650:	00028298 	.word	0x00028298
   23654:	f0000f00 	.word	0xf0000f00

00023658 <am_hal_pwrctrl_periph_enable>:
   23658:	b570      	push	{r4, r5, r6, lr}
   2365a:	b082      	sub	sp, #8
   2365c:	4604      	mov	r4, r0
   2365e:	f7ff fed1 	bl	23404 <am_hal_interrupt_master_disable>
   23662:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23666:	4d0f      	ldr	r5, [pc, #60]	; (236a4 <am_hal_pwrctrl_periph_enable+0x4c>)
   23668:	4e0f      	ldr	r6, [pc, #60]	; (236a8 <am_hal_pwrctrl_periph_enable+0x50>)
   2366a:	9001      	str	r0, [sp, #4]
   2366c:	00a4      	lsls	r4, r4, #2
   2366e:	68aa      	ldr	r2, [r5, #8]
   23670:	5933      	ldr	r3, [r6, r4]
   23672:	4313      	orrs	r3, r2
   23674:	60ab      	str	r3, [r5, #8]
   23676:	9801      	ldr	r0, [sp, #4]
   23678:	4434      	add	r4, r6
   2367a:	f7ff fec7 	bl	2340c <am_hal_interrupt_master_set>
   2367e:	20a0      	movs	r0, #160	; 0xa0
   23680:	f7ff fcec 	bl	2305c <am_hal_flash_delay>
   23684:	69ab      	ldr	r3, [r5, #24]
   23686:	6864      	ldr	r4, [r4, #4]
   23688:	4223      	tst	r3, r4
   2368a:	d103      	bne.n	23694 <am_hal_pwrctrl_periph_enable+0x3c>
   2368c:	20a0      	movs	r0, #160	; 0xa0
   2368e:	f7ff fce5 	bl	2305c <am_hal_flash_delay>
   23692:	69ab      	ldr	r3, [r5, #24]
   23694:	4b03      	ldr	r3, [pc, #12]	; (236a4 <am_hal_pwrctrl_periph_enable+0x4c>)
   23696:	699b      	ldr	r3, [r3, #24]
   23698:	4223      	tst	r3, r4
   2369a:	bf0c      	ite	eq
   2369c:	2001      	moveq	r0, #1
   2369e:	2000      	movne	r0, #0
   236a0:	b002      	add	sp, #8
   236a2:	bd70      	pop	{r4, r5, r6, pc}
   236a4:	40021000 	.word	0x40021000
   236a8:	000282d8 	.word	0x000282d8

000236ac <am_hal_pwrctrl_periph_disable>:
   236ac:	b570      	push	{r4, r5, r6, lr}
   236ae:	b082      	sub	sp, #8
   236b0:	4604      	mov	r4, r0
   236b2:	f7ff fea7 	bl	23404 <am_hal_interrupt_master_disable>
   236b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   236ba:	4d10      	ldr	r5, [pc, #64]	; (236fc <am_hal_pwrctrl_periph_disable+0x50>)
   236bc:	4e10      	ldr	r6, [pc, #64]	; (23700 <am_hal_pwrctrl_periph_disable+0x54>)
   236be:	9001      	str	r0, [sp, #4]
   236c0:	00a4      	lsls	r4, r4, #2
   236c2:	68ab      	ldr	r3, [r5, #8]
   236c4:	5932      	ldr	r2, [r6, r4]
   236c6:	ea23 0302 	bic.w	r3, r3, r2
   236ca:	60ab      	str	r3, [r5, #8]
   236cc:	9801      	ldr	r0, [sp, #4]
   236ce:	4434      	add	r4, r6
   236d0:	f7ff fe9c 	bl	2340c <am_hal_interrupt_master_set>
   236d4:	20a0      	movs	r0, #160	; 0xa0
   236d6:	f7ff fcc1 	bl	2305c <am_hal_flash_delay>
   236da:	69ab      	ldr	r3, [r5, #24]
   236dc:	6864      	ldr	r4, [r4, #4]
   236de:	4223      	tst	r3, r4
   236e0:	d003      	beq.n	236ea <am_hal_pwrctrl_periph_disable+0x3e>
   236e2:	20a0      	movs	r0, #160	; 0xa0
   236e4:	f7ff fcba 	bl	2305c <am_hal_flash_delay>
   236e8:	69ab      	ldr	r3, [r5, #24]
   236ea:	4b04      	ldr	r3, [pc, #16]	; (236fc <am_hal_pwrctrl_periph_disable+0x50>)
   236ec:	699b      	ldr	r3, [r3, #24]
   236ee:	4223      	tst	r3, r4
   236f0:	bf14      	ite	ne
   236f2:	2001      	movne	r0, #1
   236f4:	2000      	moveq	r0, #0
   236f6:	b002      	add	sp, #8
   236f8:	bd70      	pop	{r4, r5, r6, pc}
   236fa:	bf00      	nop
   236fc:	40021000 	.word	0x40021000
   23700:	000282d8 	.word	0x000282d8

00023704 <am_hal_pwrctrl_low_power_init>:
   23704:	b530      	push	{r4, r5, lr}
   23706:	4b33      	ldr	r3, [pc, #204]	; (237d4 <am_hal_pwrctrl_low_power_init+0xd0>)
   23708:	681a      	ldr	r2, [r3, #0]
   2370a:	b085      	sub	sp, #20
   2370c:	b912      	cbnz	r2, 23714 <am_hal_pwrctrl_low_power_init+0x10>
   2370e:	4a32      	ldr	r2, [pc, #200]	; (237d8 <am_hal_pwrctrl_low_power_init+0xd4>)
   23710:	6812      	ldr	r2, [r2, #0]
   23712:	601a      	str	r2, [r3, #0]
   23714:	4b31      	ldr	r3, [pc, #196]	; (237dc <am_hal_pwrctrl_low_power_init+0xd8>)
   23716:	68db      	ldr	r3, [r3, #12]
   23718:	b2db      	uxtb	r3, r3
   2371a:	2b12      	cmp	r3, #18
   2371c:	d00a      	beq.n	23734 <am_hal_pwrctrl_low_power_init+0x30>
   2371e:	4c30      	ldr	r4, [pc, #192]	; (237e0 <am_hal_pwrctrl_low_power_init+0xdc>)
   23720:	2100      	movs	r1, #0
   23722:	200c      	movs	r0, #12
   23724:	f7ff fa3e 	bl	22ba4 <am_hal_cachectrl_control>
   23728:	69a3      	ldr	r3, [r4, #24]
   2372a:	05d8      	lsls	r0, r3, #23
   2372c:	d520      	bpl.n	23770 <am_hal_pwrctrl_low_power_init+0x6c>
   2372e:	2000      	movs	r0, #0
   23730:	b005      	add	sp, #20
   23732:	bd30      	pop	{r4, r5, pc}
   23734:	4c2a      	ldr	r4, [pc, #168]	; (237e0 <am_hal_pwrctrl_low_power_init+0xdc>)
   23736:	6863      	ldr	r3, [r4, #4]
   23738:	07d9      	lsls	r1, r3, #31
   2373a:	d5f0      	bpl.n	2371e <am_hal_pwrctrl_low_power_init+0x1a>
   2373c:	f7ff fe62 	bl	23404 <am_hal_interrupt_master_disable>
   23740:	9003      	str	r0, [sp, #12]
   23742:	68a3      	ldr	r3, [r4, #8]
   23744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   23748:	60a3      	str	r3, [r4, #8]
   2374a:	9803      	ldr	r0, [sp, #12]
   2374c:	f7ff fe5e 	bl	2340c <am_hal_interrupt_master_set>
   23750:	20a0      	movs	r0, #160	; 0xa0
   23752:	f7ff fc83 	bl	2305c <am_hal_flash_delay>
   23756:	69a3      	ldr	r3, [r4, #24]
   23758:	061a      	lsls	r2, r3, #24
   2375a:	d403      	bmi.n	23764 <am_hal_pwrctrl_low_power_init+0x60>
   2375c:	20a0      	movs	r0, #160	; 0xa0
   2375e:	f7ff fc7d 	bl	2305c <am_hal_flash_delay>
   23762:	69a3      	ldr	r3, [r4, #24]
   23764:	4b1e      	ldr	r3, [pc, #120]	; (237e0 <am_hal_pwrctrl_low_power_init+0xdc>)
   23766:	699b      	ldr	r3, [r3, #24]
   23768:	061b      	lsls	r3, r3, #24
   2376a:	d4d8      	bmi.n	2371e <am_hal_pwrctrl_low_power_init+0x1a>
   2376c:	2001      	movs	r0, #1
   2376e:	e7df      	b.n	23730 <am_hal_pwrctrl_low_power_init+0x2c>
   23770:	4d1a      	ldr	r5, [pc, #104]	; (237dc <am_hal_pwrctrl_low_power_init+0xd8>)
   23772:	491c      	ldr	r1, [pc, #112]	; (237e4 <am_hal_pwrctrl_low_power_init+0xe0>)
   23774:	7e2a      	ldrb	r2, [r5, #24]
   23776:	2001      	movs	r0, #1
   23778:	4302      	orrs	r2, r0
   2377a:	2307      	movs	r3, #7
   2377c:	762a      	strb	r2, [r5, #24]
   2377e:	9000      	str	r0, [sp, #0]
   23780:	461a      	mov	r2, r3
   23782:	f242 7010 	movw	r0, #10000	; 0x2710
   23786:	f7ff fc79 	bl	2307c <am_hal_flash_delay_status_check>
   2378a:	b110      	cbz	r0, 23792 <am_hal_pwrctrl_low_power_init+0x8e>
   2378c:	2004      	movs	r0, #4
   2378e:	b005      	add	sp, #20
   23790:	bd30      	pop	{r4, r5, pc}
   23792:	6823      	ldr	r3, [r4, #0]
   23794:	f043 0301 	orr.w	r3, r3, #1
   23798:	6023      	str	r3, [r4, #0]
   2379a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   237a0:	6263      	str	r3, [r4, #36]	; 0x24
   237a2:	68eb      	ldr	r3, [r5, #12]
   237a4:	b2db      	uxtb	r3, r3
   237a6:	2b11      	cmp	r3, #17
   237a8:	d1c1      	bne.n	2372e <am_hal_pwrctrl_low_power_init+0x2a>
   237aa:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   237ae:	f360 5356 	bfi	r3, r0, #21, #2
   237b2:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   237b6:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   237ba:	220f      	movs	r2, #15
   237bc:	f362 138b 	bfi	r3, r2, #6, #6
   237c0:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   237c4:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   237c8:	f362 0305 	bfi	r3, r2, #0, #6
   237cc:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   237d0:	e7ae      	b.n	23730 <am_hal_pwrctrl_low_power_init+0x2c>
   237d2:	bf00      	nop
   237d4:	100095f8 	.word	0x100095f8
   237d8:	4ffff000 	.word	0x4ffff000
   237dc:	40020000 	.word	0x40020000
   237e0:	40021000 	.word	0x40021000
   237e4:	40020018 	.word	0x40020018

000237e8 <am_hal_queue_init>:
   237e8:	b410      	push	{r4}
   237ea:	2400      	movs	r4, #0
   237ec:	6004      	str	r4, [r0, #0]
   237ee:	6044      	str	r4, [r0, #4]
   237f0:	6084      	str	r4, [r0, #8]
   237f2:	60c3      	str	r3, [r0, #12]
   237f4:	6102      	str	r2, [r0, #16]
   237f6:	6141      	str	r1, [r0, #20]
   237f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   237fc:	4770      	bx	lr
   237fe:	bf00      	nop

00023800 <am_hal_queue_item_add>:
   23800:	b5f0      	push	{r4, r5, r6, r7, lr}
   23802:	4604      	mov	r4, r0
   23804:	6906      	ldr	r6, [r0, #16]
   23806:	b083      	sub	sp, #12
   23808:	fb06 f602 	mul.w	r6, r6, r2
   2380c:	460d      	mov	r5, r1
   2380e:	f7ff fdf9 	bl	23404 <am_hal_interrupt_master_disable>
   23812:	68e7      	ldr	r7, [r4, #12]
   23814:	68a2      	ldr	r2, [r4, #8]
   23816:	9001      	str	r0, [sp, #4]
   23818:	1abb      	subs	r3, r7, r2
   2381a:	429e      	cmp	r6, r3
   2381c:	d826      	bhi.n	2386c <am_hal_queue_item_add+0x6c>
   2381e:	b196      	cbz	r6, 23846 <am_hal_queue_item_add+0x46>
   23820:	6823      	ldr	r3, [r4, #0]
   23822:	4629      	mov	r1, r5
   23824:	b1c5      	cbz	r5, 23858 <am_hal_queue_item_add+0x58>
   23826:	19af      	adds	r7, r5, r6
   23828:	6962      	ldr	r2, [r4, #20]
   2382a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2382e:	54d0      	strb	r0, [r2, r3]
   23830:	6823      	ldr	r3, [r4, #0]
   23832:	68e5      	ldr	r5, [r4, #12]
   23834:	3301      	adds	r3, #1
   23836:	42b9      	cmp	r1, r7
   23838:	fbb3 f0f5 	udiv	r0, r3, r5
   2383c:	fb05 3310 	mls	r3, r5, r0, r3
   23840:	6023      	str	r3, [r4, #0]
   23842:	d1f1      	bne.n	23828 <am_hal_queue_item_add+0x28>
   23844:	68a2      	ldr	r2, [r4, #8]
   23846:	4432      	add	r2, r6
   23848:	60a2      	str	r2, [r4, #8]
   2384a:	2401      	movs	r4, #1
   2384c:	9801      	ldr	r0, [sp, #4]
   2384e:	f7ff fddd 	bl	2340c <am_hal_interrupt_master_set>
   23852:	4620      	mov	r0, r4
   23854:	b003      	add	sp, #12
   23856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23858:	3101      	adds	r1, #1
   2385a:	3301      	adds	r3, #1
   2385c:	428e      	cmp	r6, r1
   2385e:	fbb3 f0f7 	udiv	r0, r3, r7
   23862:	fb07 3310 	mls	r3, r7, r0, r3
   23866:	d1f7      	bne.n	23858 <am_hal_queue_item_add+0x58>
   23868:	6023      	str	r3, [r4, #0]
   2386a:	e7ec      	b.n	23846 <am_hal_queue_item_add+0x46>
   2386c:	2400      	movs	r4, #0
   2386e:	e7ed      	b.n	2384c <am_hal_queue_item_add+0x4c>

00023870 <am_hal_queue_item_get>:
   23870:	b5f0      	push	{r4, r5, r6, r7, lr}
   23872:	4604      	mov	r4, r0
   23874:	6906      	ldr	r6, [r0, #16]
   23876:	b083      	sub	sp, #12
   23878:	fb06 f602 	mul.w	r6, r6, r2
   2387c:	460d      	mov	r5, r1
   2387e:	f7ff fdc1 	bl	23404 <am_hal_interrupt_master_disable>
   23882:	68a2      	ldr	r2, [r4, #8]
   23884:	9001      	str	r0, [sp, #4]
   23886:	4296      	cmp	r6, r2
   23888:	d81c      	bhi.n	238c4 <am_hal_queue_item_get+0x54>
   2388a:	b196      	cbz	r6, 238b2 <am_hal_queue_item_get+0x42>
   2388c:	6863      	ldr	r3, [r4, #4]
   2388e:	b1dd      	cbz	r5, 238c8 <am_hal_queue_item_get+0x58>
   23890:	4629      	mov	r1, r5
   23892:	19af      	adds	r7, r5, r6
   23894:	6962      	ldr	r2, [r4, #20]
   23896:	5cd3      	ldrb	r3, [r2, r3]
   23898:	f801 3b01 	strb.w	r3, [r1], #1
   2389c:	6863      	ldr	r3, [r4, #4]
   2389e:	68e5      	ldr	r5, [r4, #12]
   238a0:	3301      	adds	r3, #1
   238a2:	428f      	cmp	r7, r1
   238a4:	fbb3 f0f5 	udiv	r0, r3, r5
   238a8:	fb05 3310 	mls	r3, r5, r0, r3
   238ac:	6063      	str	r3, [r4, #4]
   238ae:	d1f1      	bne.n	23894 <am_hal_queue_item_get+0x24>
   238b0:	68a2      	ldr	r2, [r4, #8]
   238b2:	1b92      	subs	r2, r2, r6
   238b4:	60a2      	str	r2, [r4, #8]
   238b6:	2401      	movs	r4, #1
   238b8:	9801      	ldr	r0, [sp, #4]
   238ba:	f7ff fda7 	bl	2340c <am_hal_interrupt_master_set>
   238be:	4620      	mov	r0, r4
   238c0:	b003      	add	sp, #12
   238c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   238c4:	2400      	movs	r4, #0
   238c6:	e7f7      	b.n	238b8 <am_hal_queue_item_get+0x48>
   238c8:	68e0      	ldr	r0, [r4, #12]
   238ca:	4629      	mov	r1, r5
   238cc:	3101      	adds	r1, #1
   238ce:	3301      	adds	r3, #1
   238d0:	428e      	cmp	r6, r1
   238d2:	fbb3 f5f0 	udiv	r5, r3, r0
   238d6:	fb00 3315 	mls	r3, r0, r5, r3
   238da:	d1f7      	bne.n	238cc <am_hal_queue_item_get+0x5c>
   238dc:	6063      	str	r3, [r4, #4]
   238de:	e7e8      	b.n	238b2 <am_hal_queue_item_get+0x42>

000238e0 <am_hal_rtc_osc_select>:
   238e0:	b928      	cbnz	r0, 238ee <am_hal_rtc_osc_select+0xe>
   238e2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   238e6:	68d3      	ldr	r3, [r2, #12]
   238e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   238ec:	60d3      	str	r3, [r2, #12]
   238ee:	4770      	bx	lr

000238f0 <am_hal_rtc_osc_disable>:
   238f0:	4a03      	ldr	r2, [pc, #12]	; (23900 <am_hal_rtc_osc_disable+0x10>)
   238f2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   238f6:	f043 0310 	orr.w	r3, r3, #16
   238fa:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   238fe:	4770      	bx	lr
   23900:	40004200 	.word	0x40004200

00023904 <am_hal_stimer_config>:
   23904:	4b03      	ldr	r3, [pc, #12]	; (23914 <am_hal_stimer_config+0x10>)
   23906:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2390a:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   2390e:	4610      	mov	r0, r2
   23910:	4770      	bx	lr
   23912:	bf00      	nop
   23914:	40008000 	.word	0x40008000

00023918 <am_hal_stimer_counter_get>:
   23918:	4b01      	ldr	r3, [pc, #4]	; (23920 <am_hal_stimer_counter_get+0x8>)
   2391a:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   2391e:	4770      	bx	lr
   23920:	40008000 	.word	0x40008000

00023924 <am_hal_stimer_compare_delta_set>:
   23924:	2807      	cmp	r0, #7
   23926:	d900      	bls.n	2392a <am_hal_stimer_compare_delta_set+0x6>
   23928:	4770      	bx	lr
   2392a:	b570      	push	{r4, r5, r6, lr}
   2392c:	b082      	sub	sp, #8
   2392e:	460c      	mov	r4, r1
   23930:	4605      	mov	r5, r0
   23932:	f7ff fd67 	bl	23404 <am_hal_interrupt_master_disable>
   23936:	4923      	ldr	r1, [pc, #140]	; (239c4 <am_hal_stimer_compare_delta_set+0xa0>)
   23938:	9001      	str	r0, [sp, #4]
   2393a:	4b23      	ldr	r3, [pc, #140]	; (239c8 <am_hal_stimer_compare_delta_set+0xa4>)
   2393c:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   23940:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   23944:	f44f 7280 	mov.w	r2, #256	; 0x100
   23948:	442b      	add	r3, r5
   2394a:	40aa      	lsls	r2, r5
   2394c:	ea26 0502 	bic.w	r5, r6, r2
   23950:	009b      	lsls	r3, r3, #2
   23952:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
   23956:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2395a:	601c      	str	r4, [r3, #0]
   2395c:	681d      	ldr	r5, [r3, #0]
   2395e:	4421      	add	r1, r4
   23960:	1a6e      	subs	r6, r5, r1
   23962:	2e00      	cmp	r6, #0
   23964:	db03      	blt.n	2396e <am_hal_stimer_compare_delta_set+0x4a>
   23966:	310a      	adds	r1, #10
   23968:	1a69      	subs	r1, r5, r1
   2396a:	2900      	cmp	r1, #0
   2396c:	dd1e      	ble.n	239ac <am_hal_stimer_compare_delta_set+0x88>
   2396e:	4915      	ldr	r1, [pc, #84]	; (239c4 <am_hal_stimer_compare_delta_set+0xa0>)
   23970:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   23974:	601c      	str	r4, [r3, #0]
   23976:	681d      	ldr	r5, [r3, #0]
   23978:	4421      	add	r1, r4
   2397a:	1a6e      	subs	r6, r5, r1
   2397c:	2e00      	cmp	r6, #0
   2397e:	db03      	blt.n	23988 <am_hal_stimer_compare_delta_set+0x64>
   23980:	310a      	adds	r1, #10
   23982:	1a69      	subs	r1, r5, r1
   23984:	2900      	cmp	r1, #0
   23986:	dd11      	ble.n	239ac <am_hal_stimer_compare_delta_set+0x88>
   23988:	490e      	ldr	r1, [pc, #56]	; (239c4 <am_hal_stimer_compare_delta_set+0xa0>)
   2398a:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2398e:	601c      	str	r4, [r3, #0]
   23990:	681d      	ldr	r5, [r3, #0]
   23992:	4421      	add	r1, r4
   23994:	1a6e      	subs	r6, r5, r1
   23996:	2e00      	cmp	r6, #0
   23998:	db03      	blt.n	239a2 <am_hal_stimer_compare_delta_set+0x7e>
   2399a:	310a      	adds	r1, #10
   2399c:	1a69      	subs	r1, r5, r1
   2399e:	2900      	cmp	r1, #0
   239a0:	dd04      	ble.n	239ac <am_hal_stimer_compare_delta_set+0x88>
   239a2:	4908      	ldr	r1, [pc, #32]	; (239c4 <am_hal_stimer_compare_delta_set+0xa0>)
   239a4:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   239a8:	601c      	str	r4, [r3, #0]
   239aa:	681b      	ldr	r3, [r3, #0]
   239ac:	4905      	ldr	r1, [pc, #20]	; (239c4 <am_hal_stimer_compare_delta_set+0xa0>)
   239ae:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   239b2:	4002      	ands	r2, r0
   239b4:	431a      	orrs	r2, r3
   239b6:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
   239ba:	9801      	ldr	r0, [sp, #4]
   239bc:	f7ff fd26 	bl	2340c <am_hal_interrupt_master_set>
   239c0:	b002      	add	sp, #8
   239c2:	bd70      	pop	{r4, r5, r6, pc}
   239c4:	40008000 	.word	0x40008000
   239c8:	10002054 	.word	0x10002054

000239cc <am_hal_stimer_int_enable>:
   239cc:	4a03      	ldr	r2, [pc, #12]	; (239dc <am_hal_stimer_int_enable+0x10>)
   239ce:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   239d2:	4318      	orrs	r0, r3
   239d4:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   239d8:	4770      	bx	lr
   239da:	bf00      	nop
   239dc:	40008000 	.word	0x40008000

000239e0 <am_hal_stimer_int_clear>:
   239e0:	4b01      	ldr	r3, [pc, #4]	; (239e8 <am_hal_stimer_int_clear+0x8>)
   239e2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   239e6:	4770      	bx	lr
   239e8:	40008000 	.word	0x40008000

000239ec <am_hal_stimer_int_status_get>:
   239ec:	4a04      	ldr	r2, [pc, #16]	; (23a00 <am_hal_stimer_int_status_get+0x14>)
   239ee:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   239f2:	b110      	cbz	r0, 239fa <am_hal_stimer_int_status_get+0xe>
   239f4:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   239f8:	4013      	ands	r3, r2
   239fa:	4618      	mov	r0, r3
   239fc:	4770      	bx	lr
   239fe:	bf00      	nop
   23a00:	40008000 	.word	0x40008000

00023a04 <am_hal_sysctrl_sleep>:
   23a04:	b510      	push	{r4, lr}
   23a06:	b082      	sub	sp, #8
   23a08:	4604      	mov	r4, r0
   23a0a:	f7ff fcfb 	bl	23404 <am_hal_interrupt_master_disable>
   23a0e:	9001      	str	r0, [sp, #4]
   23a10:	b124      	cbz	r4, 23a1c <am_hal_sysctrl_sleep+0x18>
   23a12:	4b12      	ldr	r3, [pc, #72]	; (23a5c <am_hal_sysctrl_sleep+0x58>)
   23a14:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   23a18:	07db      	lsls	r3, r3, #31
   23a1a:	d512      	bpl.n	23a42 <am_hal_sysctrl_sleep+0x3e>
   23a1c:	4a10      	ldr	r2, [pc, #64]	; (23a60 <am_hal_sysctrl_sleep+0x5c>)
   23a1e:	6913      	ldr	r3, [r2, #16]
   23a20:	f023 0304 	bic.w	r3, r3, #4
   23a24:	6113      	str	r3, [r2, #16]
   23a26:	f3bf 8f4f 	dsb	sy
   23a2a:	4a0e      	ldr	r2, [pc, #56]	; (23a64 <am_hal_sysctrl_sleep+0x60>)
   23a2c:	4b0e      	ldr	r3, [pc, #56]	; (23a68 <am_hal_sysctrl_sleep+0x64>)
   23a2e:	6812      	ldr	r2, [r2, #0]
   23a30:	601a      	str	r2, [r3, #0]
   23a32:	bf30      	wfi
   23a34:	f3bf 8f6f 	isb	sy
   23a38:	9801      	ldr	r0, [sp, #4]
   23a3a:	f7ff fce7 	bl	2340c <am_hal_interrupt_master_set>
   23a3e:	b002      	add	sp, #8
   23a40:	bd10      	pop	{r4, pc}
   23a42:	4b0a      	ldr	r3, [pc, #40]	; (23a6c <am_hal_sysctrl_sleep+0x68>)
   23a44:	681a      	ldr	r2, [r3, #0]
   23a46:	b912      	cbnz	r2, 23a4e <am_hal_sysctrl_sleep+0x4a>
   23a48:	4a09      	ldr	r2, [pc, #36]	; (23a70 <am_hal_sysctrl_sleep+0x6c>)
   23a4a:	6812      	ldr	r2, [r2, #0]
   23a4c:	601a      	str	r2, [r3, #0]
   23a4e:	4a04      	ldr	r2, [pc, #16]	; (23a60 <am_hal_sysctrl_sleep+0x5c>)
   23a50:	6913      	ldr	r3, [r2, #16]
   23a52:	f043 0304 	orr.w	r3, r3, #4
   23a56:	6113      	str	r3, [r2, #16]
   23a58:	e7e5      	b.n	23a26 <am_hal_sysctrl_sleep+0x22>
   23a5a:	bf00      	nop
   23a5c:	40020000 	.word	0x40020000
   23a60:	e000ed00 	.word	0xe000ed00
   23a64:	5fff0000 	.word	0x5fff0000
   23a68:	100095fc 	.word	0x100095fc
   23a6c:	100095f8 	.word	0x100095f8
   23a70:	4ffff000 	.word	0x4ffff000

00023a74 <am_hal_sysctrl_fpu_enable>:
   23a74:	4b02      	ldr	r3, [pc, #8]	; (23a80 <am_hal_sysctrl_fpu_enable+0xc>)
   23a76:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   23a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   23a7e:	4770      	bx	lr
   23a80:	e000ed00 	.word	0xe000ed00

00023a84 <am_hal_sysctrl_fpu_stacking_enable>:
   23a84:	b510      	push	{r4, lr}
   23a86:	b082      	sub	sp, #8
   23a88:	4604      	mov	r4, r0
   23a8a:	f7ff fcbb 	bl	23404 <am_hal_interrupt_master_disable>
   23a8e:	4a09      	ldr	r2, [pc, #36]	; (23ab4 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   23a90:	9001      	str	r0, [sp, #4]
   23a92:	6853      	ldr	r3, [r2, #4]
   23a94:	2c00      	cmp	r4, #0
   23a96:	bf14      	ite	ne
   23a98:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
   23a9c:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   23aa0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   23aa4:	430b      	orrs	r3, r1
   23aa6:	6053      	str	r3, [r2, #4]
   23aa8:	9801      	ldr	r0, [sp, #4]
   23aaa:	f7ff fcaf 	bl	2340c <am_hal_interrupt_master_set>
   23aae:	b002      	add	sp, #8
   23ab0:	bd10      	pop	{r4, pc}
   23ab2:	bf00      	nop
   23ab4:	e000ef30 	.word	0xe000ef30

00023ab8 <am_hal_tpiu_enable>:
   23ab8:	b530      	push	{r4, r5, lr}
   23aba:	4a23      	ldr	r2, [pc, #140]	; (23b48 <am_hal_tpiu_enable+0x90>)
   23abc:	6804      	ldr	r4, [r0, #0]
   23abe:	2300      	movs	r3, #0
   23ac0:	b085      	sub	sp, #20
   23ac2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   23ac6:	b334      	cbz	r4, 23b16 <am_hal_tpiu_enable+0x5e>
   23ac8:	4b20      	ldr	r3, [pc, #128]	; (23b4c <am_hal_tpiu_enable+0x94>)
   23aca:	4921      	ldr	r1, [pc, #132]	; (23b50 <am_hal_tpiu_enable+0x98>)
   23acc:	2001      	movs	r0, #1
   23ace:	6050      	str	r0, [r2, #4]
   23ad0:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   23ad4:	a801      	add	r0, sp, #4
   23ad6:	428a      	cmp	r2, r1
   23ad8:	bf88      	it	hi
   23ada:	461c      	movhi	r4, r3
   23adc:	f7ff fa60 	bl	22fa0 <am_hal_clkgen_status_get>
   23ae0:	9b01      	ldr	r3, [sp, #4]
   23ae2:	1c5a      	adds	r2, r3, #1
   23ae4:	d02d      	beq.n	23b42 <am_hal_tpiu_enable+0x8a>
   23ae6:	08db      	lsrs	r3, r3, #3
   23ae8:	fbb3 f3f4 	udiv	r3, r3, r4
   23aec:	3b01      	subs	r3, #1
   23aee:	b29b      	uxth	r3, r3
   23af0:	4a15      	ldr	r2, [pc, #84]	; (23b48 <am_hal_tpiu_enable+0x90>)
   23af2:	4918      	ldr	r1, [pc, #96]	; (23b54 <am_hal_tpiu_enable+0x9c>)
   23af4:	6113      	str	r3, [r2, #16]
   23af6:	2402      	movs	r4, #2
   23af8:	f240 2301 	movw	r3, #513	; 0x201
   23afc:	2000      	movs	r0, #0
   23afe:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   23b02:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   23b06:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   23b0a:	f44f 7048 	mov.w	r0, #800	; 0x320
   23b0e:	f7ff faa5 	bl	2305c <am_hal_flash_delay>
   23b12:	b005      	add	sp, #20
   23b14:	bd30      	pop	{r4, r5, pc}
   23b16:	6903      	ldr	r3, [r0, #16]
   23b18:	6113      	str	r3, [r2, #16]
   23b1a:	6883      	ldr	r3, [r0, #8]
   23b1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   23b20:	68c3      	ldr	r3, [r0, #12]
   23b22:	4d0c      	ldr	r5, [pc, #48]	; (23b54 <am_hal_tpiu_enable+0x9c>)
   23b24:	1e59      	subs	r1, r3, #1
   23b26:	2301      	movs	r3, #1
   23b28:	408b      	lsls	r3, r1
   23b2a:	6053      	str	r3, [r2, #4]
   23b2c:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   23b30:	6843      	ldr	r3, [r0, #4]
   23b32:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   23b36:	f44f 7048 	mov.w	r0, #800	; 0x320
   23b3a:	f7ff fa8f 	bl	2305c <am_hal_flash_delay>
   23b3e:	b005      	add	sp, #20
   23b40:	bd30      	pop	{r4, r5, pc}
   23b42:	2305      	movs	r3, #5
   23b44:	e7d4      	b.n	23af0 <am_hal_tpiu_enable+0x38>
   23b46:	bf00      	nop
   23b48:	e0040000 	.word	0xe0040000
   23b4c:	000f4240 	.word	0x000f4240
   23b50:	001da380 	.word	0x001da380
   23b54:	40020000 	.word	0x40020000

00023b58 <am_hal_uart_initialize>:
   23b58:	2801      	cmp	r0, #1
   23b5a:	d901      	bls.n	23b60 <am_hal_uart_initialize+0x8>
   23b5c:	2005      	movs	r0, #5
   23b5e:	4770      	bx	lr
   23b60:	b169      	cbz	r1, 23b7e <am_hal_uart_initialize+0x26>
   23b62:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b64:	2264      	movs	r2, #100	; 0x64
   23b66:	4e0e      	ldr	r6, [pc, #56]	; (23ba0 <am_hal_uart_initialize+0x48>)
   23b68:	fb02 f200 	mul.w	r2, r2, r0
   23b6c:	18b4      	adds	r4, r6, r2
   23b6e:	4603      	mov	r3, r0
   23b70:	78e0      	ldrb	r0, [r4, #3]
   23b72:	f3c0 0700 	ubfx	r7, r0, #0, #1
   23b76:	b2fd      	uxtb	r5, r7
   23b78:	b11d      	cbz	r5, 23b82 <am_hal_uart_initialize+0x2a>
   23b7a:	2007      	movs	r0, #7
   23b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23b7e:	2006      	movs	r0, #6
   23b80:	4770      	bx	lr
   23b82:	f040 0001 	orr.w	r0, r0, #1
   23b86:	70e0      	strb	r0, [r4, #3]
   23b88:	58b0      	ldr	r0, [r6, r2]
   23b8a:	f8df e018 	ldr.w	lr, [pc, #24]	; 23ba4 <am_hal_uart_initialize+0x4c>
   23b8e:	f36e 0017 	bfi	r0, lr, #0, #24
   23b92:	50b0      	str	r0, [r6, r2]
   23b94:	6263      	str	r3, [r4, #36]	; 0x24
   23b96:	7127      	strb	r7, [r4, #4]
   23b98:	6625      	str	r5, [r4, #96]	; 0x60
   23b9a:	4628      	mov	r0, r5
   23b9c:	600c      	str	r4, [r1, #0]
   23b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23ba0:	1000b460 	.word	0x1000b460
   23ba4:	00ea9e06 	.word	0x00ea9e06

00023ba8 <am_hal_uart_power_control>:
   23ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23bac:	6804      	ldr	r4, [r0, #0]
   23bae:	4b36      	ldr	r3, [pc, #216]	; (23c88 <am_hal_uart_power_control+0xe0>)
   23bb0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   23bb4:	429c      	cmp	r4, r3
   23bb6:	b083      	sub	sp, #12
   23bb8:	d003      	beq.n	23bc2 <am_hal_uart_power_control+0x1a>
   23bba:	2002      	movs	r0, #2
   23bbc:	b003      	add	sp, #12
   23bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23bc2:	6a47      	ldr	r7, [r0, #36]	; 0x24
   23bc4:	4605      	mov	r5, r0
   23bc6:	f107 0008 	add.w	r0, r7, #8
   23bca:	4691      	mov	r9, r2
   23bcc:	460e      	mov	r6, r1
   23bce:	fa5f f880 	uxtb.w	r8, r0
   23bd2:	b181      	cbz	r1, 23bf6 <am_hal_uart_power_control+0x4e>
   23bd4:	2902      	cmp	r1, #2
   23bd6:	d80c      	bhi.n	23bf2 <am_hal_uart_power_control+0x4a>
   23bd8:	b992      	cbnz	r2, 23c00 <am_hal_uart_power_control+0x58>
   23bda:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   23bde:	371c      	adds	r7, #28
   23be0:	033f      	lsls	r7, r7, #12
   23be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23be6:	647b      	str	r3, [r7, #68]	; 0x44
   23be8:	4640      	mov	r0, r8
   23bea:	f7ff fd5f 	bl	236ac <am_hal_pwrctrl_periph_disable>
   23bee:	2000      	movs	r0, #0
   23bf0:	e7e4      	b.n	23bbc <am_hal_uart_power_control+0x14>
   23bf2:	2006      	movs	r0, #6
   23bf4:	e7e2      	b.n	23bbc <am_hal_uart_power_control+0x14>
   23bf6:	b322      	cbz	r2, 23c42 <am_hal_uart_power_control+0x9a>
   23bf8:	792b      	ldrb	r3, [r5, #4]
   23bfa:	bb3b      	cbnz	r3, 23c4c <am_hal_uart_power_control+0xa4>
   23bfc:	2007      	movs	r0, #7
   23bfe:	e7dd      	b.n	23bbc <am_hal_uart_power_control+0x14>
   23c00:	f7ff fc00 	bl	23404 <am_hal_interrupt_master_disable>
   23c04:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   23c08:	331c      	adds	r3, #28
   23c0a:	031b      	lsls	r3, r3, #12
   23c0c:	9001      	str	r0, [sp, #4]
   23c0e:	6a1a      	ldr	r2, [r3, #32]
   23c10:	60aa      	str	r2, [r5, #8]
   23c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   23c14:	60ea      	str	r2, [r5, #12]
   23c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23c18:	612a      	str	r2, [r5, #16]
   23c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23c1c:	616a      	str	r2, [r5, #20]
   23c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   23c20:	61aa      	str	r2, [r5, #24]
   23c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   23c24:	61ea      	str	r2, [r5, #28]
   23c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   23c28:	622b      	str	r3, [r5, #32]
   23c2a:	2301      	movs	r3, #1
   23c2c:	712b      	strb	r3, [r5, #4]
   23c2e:	9801      	ldr	r0, [sp, #4]
   23c30:	f7ff fbec 	bl	2340c <am_hal_interrupt_master_set>
   23c34:	682b      	ldr	r3, [r5, #0]
   23c36:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23c3a:	42a3      	cmp	r3, r4
   23c3c:	d1d4      	bne.n	23be8 <am_hal_uart_power_control+0x40>
   23c3e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   23c40:	e7cb      	b.n	23bda <am_hal_uart_power_control+0x32>
   23c42:	4640      	mov	r0, r8
   23c44:	f7ff fd08 	bl	23658 <am_hal_pwrctrl_periph_enable>
   23c48:	4648      	mov	r0, r9
   23c4a:	e7b7      	b.n	23bbc <am_hal_uart_power_control+0x14>
   23c4c:	4640      	mov	r0, r8
   23c4e:	f7ff fd03 	bl	23658 <am_hal_pwrctrl_periph_enable>
   23c52:	f7ff fbd7 	bl	23404 <am_hal_interrupt_master_disable>
   23c56:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
   23c5a:	331c      	adds	r3, #28
   23c5c:	031b      	lsls	r3, r3, #12
   23c5e:	68aa      	ldr	r2, [r5, #8]
   23c60:	9000      	str	r0, [sp, #0]
   23c62:	621a      	str	r2, [r3, #32]
   23c64:	68ea      	ldr	r2, [r5, #12]
   23c66:	625a      	str	r2, [r3, #36]	; 0x24
   23c68:	692a      	ldr	r2, [r5, #16]
   23c6a:	629a      	str	r2, [r3, #40]	; 0x28
   23c6c:	696a      	ldr	r2, [r5, #20]
   23c6e:	62da      	str	r2, [r3, #44]	; 0x2c
   23c70:	69aa      	ldr	r2, [r5, #24]
   23c72:	631a      	str	r2, [r3, #48]	; 0x30
   23c74:	69ea      	ldr	r2, [r5, #28]
   23c76:	635a      	str	r2, [r3, #52]	; 0x34
   23c78:	6a2a      	ldr	r2, [r5, #32]
   23c7a:	639a      	str	r2, [r3, #56]	; 0x38
   23c7c:	9800      	ldr	r0, [sp, #0]
   23c7e:	712e      	strb	r6, [r5, #4]
   23c80:	f7ff fbc4 	bl	2340c <am_hal_interrupt_master_set>
   23c84:	4630      	mov	r0, r6
   23c86:	e799      	b.n	23bbc <am_hal_uart_power_control+0x14>
   23c88:	01ea9e06 	.word	0x01ea9e06

00023c8c <am_hal_uart_configure>:
   23c8c:	6803      	ldr	r3, [r0, #0]
   23c8e:	4a84      	ldr	r2, [pc, #528]	; (23ea0 <am_hal_uart_configure+0x214>)
   23c90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23c94:	4293      	cmp	r3, r2
   23c96:	d001      	beq.n	23c9c <am_hal_uart_configure+0x10>
   23c98:	2002      	movs	r0, #2
   23c9a:	4770      	bx	lr
   23c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ca0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   23ca2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   23ca6:	351c      	adds	r5, #28
   23ca8:	032d      	lsls	r5, r5, #12
   23caa:	2700      	movs	r7, #0
   23cac:	b084      	sub	sp, #16
   23cae:	632f      	str	r7, [r5, #48]	; 0x30
   23cb0:	460e      	mov	r6, r1
   23cb2:	4604      	mov	r4, r0
   23cb4:	f7ff fba6 	bl	23404 <am_hal_interrupt_master_disable>
   23cb8:	9001      	str	r0, [sp, #4]
   23cba:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23cbc:	f043 0308 	orr.w	r3, r3, #8
   23cc0:	862b      	strh	r3, [r5, #48]	; 0x30
   23cc2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23cc4:	2201      	movs	r2, #1
   23cc6:	f362 1306 	bfi	r3, r2, #4, #3
   23cca:	862b      	strh	r3, [r5, #48]	; 0x30
   23ccc:	9801      	ldr	r0, [sp, #4]
   23cce:	f7ff fb9d 	bl	2340c <am_hal_interrupt_master_set>
   23cd2:	f7ff fb97 	bl	23404 <am_hal_interrupt_master_disable>
   23cd6:	9002      	str	r0, [sp, #8]
   23cd8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23cda:	f367 0300 	bfi	r3, r7, #0, #1
   23cde:	862b      	strh	r3, [r5, #48]	; 0x30
   23ce0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23ce2:	f367 2349 	bfi	r3, r7, #9, #1
   23ce6:	862b      	strh	r3, [r5, #48]	; 0x30
   23ce8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23cea:	f367 2308 	bfi	r3, r7, #8, #1
   23cee:	862b      	strh	r3, [r5, #48]	; 0x30
   23cf0:	9802      	ldr	r0, [sp, #8]
   23cf2:	f7ff fb8b 	bl	2340c <am_hal_interrupt_master_set>
   23cf6:	4a6b      	ldr	r2, [pc, #428]	; (23ea4 <am_hal_uart_configure+0x218>)
   23cf8:	6833      	ldr	r3, [r6, #0]
   23cfa:	68d2      	ldr	r2, [r2, #12]
   23cfc:	b2d2      	uxtb	r2, r2
   23cfe:	2a12      	cmp	r2, #18
   23d00:	d00b      	beq.n	23d1a <am_hal_uart_configure+0x8e>
   23d02:	4a68      	ldr	r2, [pc, #416]	; (23ea4 <am_hal_uart_configure+0x218>)
   23d04:	68d2      	ldr	r2, [r2, #12]
   23d06:	b2d2      	uxtb	r2, r2
   23d08:	2a20      	cmp	r2, #32
   23d0a:	d90a      	bls.n	23d22 <am_hal_uart_configure+0x96>
   23d0c:	4a66      	ldr	r2, [pc, #408]	; (23ea8 <am_hal_uart_configure+0x21c>)
   23d0e:	4293      	cmp	r3, r2
   23d10:	d907      	bls.n	23d22 <am_hal_uart_configure+0x96>
   23d12:	4866      	ldr	r0, [pc, #408]	; (23eac <am_hal_uart_configure+0x220>)
   23d14:	b004      	add	sp, #16
   23d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23d1a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   23d1e:	d8f8      	bhi.n	23d12 <am_hal_uart_configure+0x86>
   23d20:	e7ef      	b.n	23d02 <am_hal_uart_configure+0x76>
   23d22:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   23d24:	f3c2 1202 	ubfx	r2, r2, #4, #3
   23d28:	3a01      	subs	r2, #1
   23d2a:	2a03      	cmp	r2, #3
   23d2c:	d852      	bhi.n	23dd4 <am_hal_uart_configure+0x148>
   23d2e:	e8df f002 	tbb	[pc, r2]
   23d32:	020f      	.short	0x020f
   23d34:	1215      	.short	0x1215
   23d36:	4a5e      	ldr	r2, [pc, #376]	; (23eb0 <am_hal_uart_configure+0x224>)
   23d38:	495e      	ldr	r1, [pc, #376]	; (23eb4 <am_hal_uart_configure+0x228>)
   23d3a:	011b      	lsls	r3, r3, #4
   23d3c:	fbb2 f2f3 	udiv	r2, r2, r3
   23d40:	fbb1 f3f3 	udiv	r3, r1, r3
   23d44:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
   23d48:	b95b      	cbnz	r3, 23d62 <am_hal_uart_configure+0xd6>
   23d4a:	6623      	str	r3, [r4, #96]	; 0x60
   23d4c:	4857      	ldr	r0, [pc, #348]	; (23eac <am_hal_uart_configure+0x220>)
   23d4e:	e7e1      	b.n	23d14 <am_hal_uart_configure+0x88>
   23d50:	4a59      	ldr	r2, [pc, #356]	; (23eb8 <am_hal_uart_configure+0x22c>)
   23d52:	495a      	ldr	r1, [pc, #360]	; (23ebc <am_hal_uart_configure+0x230>)
   23d54:	e7f1      	b.n	23d3a <am_hal_uart_configure+0xae>
   23d56:	4a5a      	ldr	r2, [pc, #360]	; (23ec0 <am_hal_uart_configure+0x234>)
   23d58:	495a      	ldr	r1, [pc, #360]	; (23ec4 <am_hal_uart_configure+0x238>)
   23d5a:	e7ee      	b.n	23d3a <am_hal_uart_configure+0xae>
   23d5c:	4a5a      	ldr	r2, [pc, #360]	; (23ec8 <am_hal_uart_configure+0x23c>)
   23d5e:	495b      	ldr	r1, [pc, #364]	; (23ecc <am_hal_uart_configure+0x240>)
   23d60:	e7eb      	b.n	23d3a <am_hal_uart_configure+0xae>
   23d62:	0890      	lsrs	r0, r2, #2
   23d64:	626b      	str	r3, [r5, #36]	; 0x24
   23d66:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   23d6a:	626b      	str	r3, [r5, #36]	; 0x24
   23d6c:	fbb1 f1f0 	udiv	r1, r1, r0
   23d70:	62aa      	str	r2, [r5, #40]	; 0x28
   23d72:	6621      	str	r1, [r4, #96]	; 0x60
   23d74:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23d76:	f36f 338e 	bfc	r3, #14, #1
   23d7a:	862b      	strh	r3, [r5, #48]	; 0x30
   23d7c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23d7e:	f36f 33cf 	bfc	r3, #15, #1
   23d82:	862b      	strh	r3, [r5, #48]	; 0x30
   23d84:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   23d86:	6933      	ldr	r3, [r6, #16]
   23d88:	4313      	orrs	r3, r2
   23d8a:	632b      	str	r3, [r5, #48]	; 0x30
   23d8c:	6973      	ldr	r3, [r6, #20]
   23d8e:	636b      	str	r3, [r5, #52]	; 0x34
   23d90:	6871      	ldr	r1, [r6, #4]
   23d92:	68b3      	ldr	r3, [r6, #8]
   23d94:	68f2      	ldr	r2, [r6, #12]
   23d96:	430b      	orrs	r3, r1
   23d98:	f043 0310 	orr.w	r3, r3, #16
   23d9c:	4313      	orrs	r3, r2
   23d9e:	62eb      	str	r3, [r5, #44]	; 0x2c
   23da0:	f7ff fb30 	bl	23404 <am_hal_interrupt_master_disable>
   23da4:	9003      	str	r0, [sp, #12]
   23da6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23da8:	f043 0301 	orr.w	r3, r3, #1
   23dac:	862b      	strh	r3, [r5, #48]	; 0x30
   23dae:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23db4:	862b      	strh	r3, [r5, #48]	; 0x30
   23db6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   23db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23dbc:	862b      	strh	r3, [r5, #48]	; 0x30
   23dbe:	9803      	ldr	r0, [sp, #12]
   23dc0:	f7ff fb24 	bl	2340c <am_hal_interrupt_master_set>
   23dc4:	6825      	ldr	r5, [r4, #0]
   23dc6:	4b36      	ldr	r3, [pc, #216]	; (23ea0 <am_hal_uart_configure+0x214>)
   23dc8:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   23dcc:	429d      	cmp	r5, r3
   23dce:	d005      	beq.n	23ddc <am_hal_uart_configure+0x150>
   23dd0:	2000      	movs	r0, #0
   23dd2:	e79f      	b.n	23d14 <am_hal_uart_configure+0x88>
   23dd4:	2300      	movs	r3, #0
   23dd6:	6623      	str	r3, [r4, #96]	; 0x60
   23dd8:	483d      	ldr	r0, [pc, #244]	; (23ed0 <am_hal_uart_configure+0x244>)
   23dda:	e79b      	b.n	23d14 <am_hal_uart_configure+0x88>
   23ddc:	69b1      	ldr	r1, [r6, #24]
   23dde:	6a37      	ldr	r7, [r6, #32]
   23de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   23de4:	b109      	cbz	r1, 23dea <am_hal_uart_configure+0x15e>
   23de6:	69f3      	ldr	r3, [r6, #28]
   23de8:	bb3b      	cbnz	r3, 23e3a <am_hal_uart_configure+0x1ae>
   23dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23dec:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23df0:	f103 021c 	add.w	r2, r3, #28
   23df4:	0312      	lsls	r2, r2, #12
   23df6:	2100      	movs	r1, #0
   23df8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   23dfc:	6b91      	ldr	r1, [r2, #56]	; 0x38
   23dfe:	f021 0120 	bic.w	r1, r1, #32
   23e02:	6391      	str	r1, [r2, #56]	; 0x38
   23e04:	b1b7      	cbz	r7, 23e34 <am_hal_uart_configure+0x1a8>
   23e06:	f1b8 0f00 	cmp.w	r8, #0
   23e0a:	d12e      	bne.n	23e6a <am_hal_uart_configure+0x1de>
   23e0c:	6823      	ldr	r3, [r4, #0]
   23e0e:	4a24      	ldr	r2, [pc, #144]	; (23ea0 <am_hal_uart_configure+0x214>)
   23e10:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23e14:	2100      	movs	r1, #0
   23e16:	4293      	cmp	r3, r2
   23e18:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
   23e1c:	d1d8      	bne.n	23dd0 <am_hal_uart_configure+0x144>
   23e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23e20:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23e24:	331c      	adds	r3, #28
   23e26:	031b      	lsls	r3, r3, #12
   23e28:	2000      	movs	r0, #0
   23e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23e2c:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   23e30:	639a      	str	r2, [r3, #56]	; 0x38
   23e32:	e76f      	b.n	23d14 <am_hal_uart_configure+0x88>
   23e34:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
   23e38:	e7f4      	b.n	23e24 <am_hal_uart_configure+0x198>
   23e3a:	2201      	movs	r2, #1
   23e3c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   23e40:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   23e44:	f7ff fcd0 	bl	237e8 <am_hal_queue_init>
   23e48:	6823      	ldr	r3, [r4, #0]
   23e4a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23e4e:	42ab      	cmp	r3, r5
   23e50:	d1be      	bne.n	23dd0 <am_hal_uart_configure+0x144>
   23e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23e54:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23e58:	331c      	adds	r3, #28
   23e5a:	031b      	lsls	r3, r3, #12
   23e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23e5e:	f042 0220 	orr.w	r2, r2, #32
   23e62:	639a      	str	r2, [r3, #56]	; 0x38
   23e64:	2f00      	cmp	r7, #0
   23e66:	d1ce      	bne.n	23e06 <am_hal_uart_configure+0x17a>
   23e68:	e7d0      	b.n	23e0c <am_hal_uart_configure+0x180>
   23e6a:	2201      	movs	r2, #1
   23e6c:	4643      	mov	r3, r8
   23e6e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   23e72:	4639      	mov	r1, r7
   23e74:	f104 0048 	add.w	r0, r4, #72	; 0x48
   23e78:	f7ff fcb6 	bl	237e8 <am_hal_queue_init>
   23e7c:	6823      	ldr	r3, [r4, #0]
   23e7e:	4a08      	ldr	r2, [pc, #32]	; (23ea0 <am_hal_uart_configure+0x214>)
   23e80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23e84:	4293      	cmp	r3, r2
   23e86:	d1a3      	bne.n	23dd0 <am_hal_uart_configure+0x144>
   23e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23e8a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23e8e:	331c      	adds	r3, #28
   23e90:	031b      	lsls	r3, r3, #12
   23e92:	2000      	movs	r0, #0
   23e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23e96:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   23e9a:	639a      	str	r2, [r3, #56]	; 0x38
   23e9c:	e73a      	b.n	23d14 <am_hal_uart_configure+0x88>
   23e9e:	bf00      	nop
   23ea0:	01ea9e06 	.word	0x01ea9e06
   23ea4:	40020000 	.word	0x40020000
   23ea8:	0016e360 	.word	0x0016e360
   23eac:	08000003 	.word	0x08000003
   23eb0:	2dc6c000 	.word	0x2dc6c000
   23eb4:	00b71b00 	.word	0x00b71b00
   23eb8:	5b8d8000 	.word	0x5b8d8000
   23ebc:	016e3600 	.word	0x016e3600
   23ec0:	0b71b000 	.word	0x0b71b000
   23ec4:	002dc6c0 	.word	0x002dc6c0
   23ec8:	16e36000 	.word	0x16e36000
   23ecc:	005b8d80 	.word	0x005b8d80
   23ed0:	08000002 	.word	0x08000002

00023ed4 <am_hal_uart_transfer>:
   23ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ed8:	680f      	ldr	r7, [r1, #0]
   23eda:	b091      	sub	sp, #68	; 0x44
   23edc:	4605      	mov	r5, r0
   23ede:	b13f      	cbz	r7, 23ef0 <am_hal_uart_transfer+0x1c>
   23ee0:	2f01      	cmp	r7, #1
   23ee2:	bf18      	it	ne
   23ee4:	2707      	movne	r7, #7
   23ee6:	d024      	beq.n	23f32 <am_hal_uart_transfer+0x5e>
   23ee8:	4638      	mov	r0, r7
   23eea:	b011      	add	sp, #68	; 0x44
   23eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ef0:	f8d1 900c 	ldr.w	r9, [r1, #12]
   23ef4:	690b      	ldr	r3, [r1, #16]
   23ef6:	f8d1 a004 	ldr.w	sl, [r1, #4]
   23efa:	688e      	ldr	r6, [r1, #8]
   23efc:	9300      	str	r3, [sp, #0]
   23efe:	f1b9 0f00 	cmp.w	r9, #0
   23f02:	d031      	beq.n	23f68 <am_hal_uart_transfer+0x94>
   23f04:	2e00      	cmp	r6, #0
   23f06:	f000 819c 	beq.w	24242 <am_hal_uart_transfer+0x36e>
   23f0a:	2800      	cmp	r0, #0
   23f0c:	f000 8097 	beq.w	2403e <am_hal_uart_transfer+0x16a>
   23f10:	6803      	ldr	r3, [r0, #0]
   23f12:	4aa9      	ldr	r2, [pc, #676]	; (241b8 <am_hal_uart_transfer+0x2e4>)
   23f14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23f18:	4293      	cmp	r3, r2
   23f1a:	f000 8092 	beq.w	24042 <am_hal_uart_transfer+0x16e>
   23f1e:	46b8      	mov	r8, r7
   23f20:	9b00      	ldr	r3, [sp, #0]
   23f22:	b10b      	cbz	r3, 23f28 <am_hal_uart_transfer+0x54>
   23f24:	f8c3 8000 	str.w	r8, [r3]
   23f28:	2702      	movs	r7, #2
   23f2a:	4638      	mov	r0, r7
   23f2c:	b011      	add	sp, #68	; 0x44
   23f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f32:	1d0b      	adds	r3, r1, #4
   23f34:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
   23f38:	f1b9 0f00 	cmp.w	r9, #0
   23f3c:	d043      	beq.n	23fc6 <am_hal_uart_transfer+0xf2>
   23f3e:	2f00      	cmp	r7, #0
   23f40:	f000 8185 	beq.w	2424e <am_hal_uart_transfer+0x37a>
   23f44:	2800      	cmp	r0, #0
   23f46:	f000 80eb 	beq.w	24120 <am_hal_uart_transfer+0x24c>
   23f4a:	6802      	ldr	r2, [r0, #0]
   23f4c:	499a      	ldr	r1, [pc, #616]	; (241b8 <am_hal_uart_transfer+0x2e4>)
   23f4e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23f52:	428a      	cmp	r2, r1
   23f54:	f000 80e7 	beq.w	24126 <am_hal_uart_transfer+0x252>
   23f58:	2600      	movs	r6, #0
   23f5a:	2702      	movs	r7, #2
   23f5c:	f1bb 0f00 	cmp.w	fp, #0
   23f60:	d0c2      	beq.n	23ee8 <am_hal_uart_transfer+0x14>
   23f62:	f8cb 6000 	str.w	r6, [fp]
   23f66:	e7bf      	b.n	23ee8 <am_hal_uart_transfer+0x14>
   23f68:	2800      	cmp	r0, #0
   23f6a:	d0dd      	beq.n	23f28 <am_hal_uart_transfer+0x54>
   23f6c:	6803      	ldr	r3, [r0, #0]
   23f6e:	4a92      	ldr	r2, [pc, #584]	; (241b8 <am_hal_uart_transfer+0x2e4>)
   23f70:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23f74:	4293      	cmp	r3, r2
   23f76:	d1d7      	bne.n	23f28 <am_hal_uart_transfer+0x54>
   23f78:	9b00      	ldr	r3, [sp, #0]
   23f7a:	b10b      	cbz	r3, 23f80 <am_hal_uart_transfer+0xac>
   23f7c:	f8c3 9000 	str.w	r9, [r3]
   23f80:	b1fe      	cbz	r6, 23fc2 <am_hal_uart_transfer+0xee>
   23f82:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   23f86:	2b00      	cmp	r3, #0
   23f88:	f040 8165 	bne.w	24256 <am_hal_uart_transfer+0x382>
   23f8c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   23f8e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23f92:	311c      	adds	r1, #28
   23f94:	0309      	lsls	r1, r1, #12
   23f96:	698a      	ldr	r2, [r1, #24]
   23f98:	f3c2 1240 	ubfx	r2, r2, #5, #1
   23f9c:	2a00      	cmp	r2, #0
   23f9e:	f040 818d 	bne.w	242bc <am_hal_uart_transfer+0x3e8>
   23fa2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   23fa6:	e003      	b.n	23fb0 <am_hal_uart_transfer+0xdc>
   23fa8:	6988      	ldr	r0, [r1, #24]
   23faa:	0680      	lsls	r0, r0, #26
   23fac:	f100 8151 	bmi.w	24252 <am_hal_uart_transfer+0x37e>
   23fb0:	3201      	adds	r2, #1
   23fb2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   23fb6:	6008      	str	r0, [r1, #0]
   23fb8:	4296      	cmp	r6, r2
   23fba:	d1f5      	bne.n	23fa8 <am_hal_uart_transfer+0xd4>
   23fbc:	9b00      	ldr	r3, [sp, #0]
   23fbe:	b103      	cbz	r3, 23fc2 <am_hal_uart_transfer+0xee>
   23fc0:	601e      	str	r6, [r3, #0]
   23fc2:	2700      	movs	r7, #0
   23fc4:	e790      	b.n	23ee8 <am_hal_uart_transfer+0x14>
   23fc6:	2800      	cmp	r0, #0
   23fc8:	d0ae      	beq.n	23f28 <am_hal_uart_transfer+0x54>
   23fca:	6802      	ldr	r2, [r0, #0]
   23fcc:	497a      	ldr	r1, [pc, #488]	; (241b8 <am_hal_uart_transfer+0x2e4>)
   23fce:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23fd2:	428a      	cmp	r2, r1
   23fd4:	d1a8      	bne.n	23f28 <am_hal_uart_transfer+0x54>
   23fd6:	f1bb 0f00 	cmp.w	fp, #0
   23fda:	d001      	beq.n	23fe0 <am_hal_uart_transfer+0x10c>
   23fdc:	f8cb 9000 	str.w	r9, [fp]
   23fe0:	2f00      	cmp	r7, #0
   23fe2:	d0ee      	beq.n	23fc2 <am_hal_uart_transfer+0xee>
   23fe4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   23fe8:	2c00      	cmp	r4, #0
   23fea:	f040 816c 	bne.w	242c6 <am_hal_uart_transfer+0x3f2>
   23fee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   23ff0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   23ff4:	321c      	adds	r2, #28
   23ff6:	0312      	lsls	r2, r2, #12
   23ff8:	6990      	ldr	r0, [r2, #24]
   23ffa:	f3c0 1000 	ubfx	r0, r0, #4, #1
   23ffe:	2800      	cmp	r0, #0
   24000:	f040 819d 	bne.w	2433e <am_hal_uart_transfer+0x46a>
   24004:	6811      	ldr	r1, [r2, #0]
   24006:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
   2400a:	bf08      	it	eq
   2400c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   24010:	d008      	beq.n	24024 <am_hal_uart_transfer+0x150>
   24012:	e190      	b.n	24336 <am_hal_uart_transfer+0x462>
   24014:	6991      	ldr	r1, [r2, #24]
   24016:	06c8      	lsls	r0, r1, #27
   24018:	d409      	bmi.n	2402e <am_hal_uart_transfer+0x15a>
   2401a:	6811      	ldr	r1, [r2, #0]
   2401c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   24020:	f040 814e 	bne.w	242c0 <am_hal_uart_transfer+0x3ec>
   24024:	3401      	adds	r4, #1
   24026:	42a7      	cmp	r7, r4
   24028:	f803 1f01 	strb.w	r1, [r3, #1]!
   2402c:	d1f2      	bne.n	24014 <am_hal_uart_transfer+0x140>
   2402e:	2700      	movs	r7, #0
   24030:	f1bb 0f00 	cmp.w	fp, #0
   24034:	f43f af58 	beq.w	23ee8 <am_hal_uart_transfer+0x14>
   24038:	f8cb 4000 	str.w	r4, [fp]
   2403c:	e754      	b.n	23ee8 <am_hal_uart_transfer+0x14>
   2403e:	4680      	mov	r8, r0
   24040:	e76e      	b.n	23f20 <am_hal_uart_transfer+0x4c>
   24042:	9301      	str	r3, [sp, #4]
   24044:	4651      	mov	r1, sl
   24046:	46bb      	mov	fp, r7
   24048:	46b8      	mov	r8, r7
   2404a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   2404e:	b9f2      	cbnz	r2, 2408e <am_hal_uart_transfer+0x1ba>
   24050:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   24052:	b19e      	cbz	r6, 2407c <am_hal_uart_transfer+0x1a8>
   24054:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   24058:	321c      	adds	r2, #28
   2405a:	0312      	lsls	r2, r2, #12
   2405c:	3901      	subs	r1, #1
   2405e:	6994      	ldr	r4, [r2, #24]
   24060:	f3c4 1440 	ubfx	r4, r4, #5, #1
   24064:	b11c      	cbz	r4, 2406e <am_hal_uart_transfer+0x19a>
   24066:	e047      	b.n	240f8 <am_hal_uart_transfer+0x224>
   24068:	6993      	ldr	r3, [r2, #24]
   2406a:	069b      	lsls	r3, r3, #26
   2406c:	d441      	bmi.n	240f2 <am_hal_uart_transfer+0x21e>
   2406e:	3401      	adds	r4, #1
   24070:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24074:	6013      	str	r3, [r2, #0]
   24076:	42b4      	cmp	r4, r6
   24078:	d1f6      	bne.n	24068 <am_hal_uart_transfer+0x194>
   2407a:	44a0      	add	r8, r4
   2407c:	9b00      	ldr	r3, [sp, #0]
   2407e:	2b00      	cmp	r3, #0
   24080:	d09f      	beq.n	23fc2 <am_hal_uart_transfer+0xee>
   24082:	4638      	mov	r0, r7
   24084:	f8c3 8000 	str.w	r8, [r3]
   24088:	b011      	add	sp, #68	; 0x44
   2408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2408e:	6baa      	ldr	r2, [r5, #56]	; 0x38
   24090:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   24092:	1b14      	subs	r4, r2, r4
   24094:	42b4      	cmp	r4, r6
   24096:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   2409a:	bf28      	it	cs
   2409c:	4634      	movcs	r4, r6
   2409e:	4622      	mov	r2, r4
   240a0:	4618      	mov	r0, r3
   240a2:	9302      	str	r3, [sp, #8]
   240a4:	f7ff fbac 	bl	23800 <am_hal_queue_item_add>
   240a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   240aa:	9303      	str	r3, [sp, #12]
   240ac:	f7ff f9aa 	bl	23404 <am_hal_interrupt_master_disable>
   240b0:	9b03      	ldr	r3, [sp, #12]
   240b2:	9008      	str	r0, [sp, #32]
   240b4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   240b8:	331c      	adds	r3, #28
   240ba:	031b      	lsls	r3, r3, #12
   240bc:	9303      	str	r3, [sp, #12]
   240be:	e00d      	b.n	240dc <am_hal_uart_transfer+0x208>
   240c0:	f7ff fbd6 	bl	23870 <am_hal_queue_item_get>
   240c4:	b190      	cbz	r0, 240ec <am_hal_uart_transfer+0x218>
   240c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   240c8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   240cc:	331c      	adds	r3, #28
   240ce:	031b      	lsls	r3, r3, #12
   240d0:	699a      	ldr	r2, [r3, #24]
   240d2:	0692      	lsls	r2, r2, #26
   240d4:	bf5c      	itt	pl
   240d6:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   240da:	601a      	strpl	r2, [r3, #0]
   240dc:	9b03      	ldr	r3, [sp, #12]
   240de:	9802      	ldr	r0, [sp, #8]
   240e0:	699b      	ldr	r3, [r3, #24]
   240e2:	069b      	lsls	r3, r3, #26
   240e4:	f04f 0201 	mov.w	r2, #1
   240e8:	a907      	add	r1, sp, #28
   240ea:	d5e9      	bpl.n	240c0 <am_hal_uart_transfer+0x1ec>
   240ec:	9808      	ldr	r0, [sp, #32]
   240ee:	f7ff f98d 	bl	2340c <am_hal_interrupt_master_set>
   240f2:	1b36      	subs	r6, r6, r4
   240f4:	44a0      	add	r8, r4
   240f6:	d0c1      	beq.n	2407c <am_hal_uart_transfer+0x1a8>
   240f8:	2010      	movs	r0, #16
   240fa:	f7fe ffaf 	bl	2305c <am_hal_flash_delay>
   240fe:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   24102:	d001      	beq.n	24108 <am_hal_uart_transfer+0x234>
   24104:	f10b 0b01 	add.w	fp, fp, #1
   24108:	45d9      	cmp	r9, fp
   2410a:	d9b7      	bls.n	2407c <am_hal_uart_transfer+0x1a8>
   2410c:	682a      	ldr	r2, [r5, #0]
   2410e:	9b01      	ldr	r3, [sp, #4]
   24110:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   24114:	429a      	cmp	r2, r3
   24116:	eb0a 0108 	add.w	r1, sl, r8
   2411a:	f47f af01 	bne.w	23f20 <am_hal_uart_transfer+0x4c>
   2411e:	e794      	b.n	2404a <am_hal_uart_transfer+0x176>
   24120:	4606      	mov	r6, r0
   24122:	2702      	movs	r7, #2
   24124:	e71a      	b.n	23f5c <am_hal_uart_transfer+0x88>
   24126:	9200      	str	r2, [sp, #0]
   24128:	f100 0248 	add.w	r2, r0, #72	; 0x48
   2412c:	f04f 0a00 	mov.w	sl, #0
   24130:	9202      	str	r2, [sp, #8]
   24132:	465a      	mov	r2, fp
   24134:	4698      	mov	r8, r3
   24136:	469b      	mov	fp, r3
   24138:	4656      	mov	r6, sl
   2413a:	4613      	mov	r3, r2
   2413c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   24140:	2a00      	cmp	r2, #0
   24142:	d152      	bne.n	241ea <am_hal_uart_transfer+0x316>
   24144:	6a69      	ldr	r1, [r5, #36]	; 0x24
   24146:	b3a7      	cbz	r7, 241b2 <am_hal_uart_transfer+0x2de>
   24148:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   2414c:	311c      	adds	r1, #28
   2414e:	0309      	lsls	r1, r1, #12
   24150:	698a      	ldr	r2, [r1, #24]
   24152:	06d0      	lsls	r0, r2, #27
   24154:	d432      	bmi.n	241bc <am_hal_uart_transfer+0x2e8>
   24156:	680a      	ldr	r2, [r1, #0]
   24158:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
   2415c:	f040 80aa 	bne.w	242b4 <am_hal_uart_transfer+0x3e0>
   24160:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   24164:	e006      	b.n	24174 <am_hal_uart_transfer+0x2a0>
   24166:	698a      	ldr	r2, [r1, #24]
   24168:	06d2      	lsls	r2, r2, #27
   2416a:	d41f      	bmi.n	241ac <am_hal_uart_transfer+0x2d8>
   2416c:	680a      	ldr	r2, [r1, #0]
   2416e:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   24172:	d161      	bne.n	24238 <am_hal_uart_transfer+0x364>
   24174:	3401      	adds	r4, #1
   24176:	42bc      	cmp	r4, r7
   24178:	f808 2f01 	strb.w	r2, [r8, #1]!
   2417c:	d1f3      	bne.n	24166 <am_hal_uart_transfer+0x292>
   2417e:	469b      	mov	fp, r3
   24180:	4426      	add	r6, r4
   24182:	f1bb 0f00 	cmp.w	fp, #0
   24186:	f43f af1c 	beq.w	23fc2 <am_hal_uart_transfer+0xee>
   2418a:	f8cb 6000 	str.w	r6, [fp]
   2418e:	2700      	movs	r7, #0
   24190:	e6aa      	b.n	23ee8 <am_hal_uart_transfer+0x14>
   24192:	9807      	ldr	r0, [sp, #28]
   24194:	f7ff f93a 	bl	2340c <am_hal_interrupt_master_set>
   24198:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   2419a:	9802      	ldr	r0, [sp, #8]
   2419c:	42bc      	cmp	r4, r7
   2419e:	bf28      	it	cs
   241a0:	463c      	movcs	r4, r7
   241a2:	4641      	mov	r1, r8
   241a4:	4622      	mov	r2, r4
   241a6:	f7ff fb63 	bl	23870 <am_hal_queue_item_get>
   241aa:	9b01      	ldr	r3, [sp, #4]
   241ac:	1b3f      	subs	r7, r7, r4
   241ae:	4426      	add	r6, r4
   241b0:	d104      	bne.n	241bc <am_hal_uart_transfer+0x2e8>
   241b2:	469b      	mov	fp, r3
   241b4:	e7e5      	b.n	24182 <am_hal_uart_transfer+0x2ae>
   241b6:	bf00      	nop
   241b8:	01ea9e06 	.word	0x01ea9e06
   241bc:	2010      	movs	r0, #16
   241be:	9301      	str	r3, [sp, #4]
   241c0:	f7fe ff4c 	bl	2305c <am_hal_flash_delay>
   241c4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   241c8:	9b01      	ldr	r3, [sp, #4]
   241ca:	d001      	beq.n	241d0 <am_hal_uart_transfer+0x2fc>
   241cc:	f10a 0a01 	add.w	sl, sl, #1
   241d0:	45d1      	cmp	r9, sl
   241d2:	d9ee      	bls.n	241b2 <am_hal_uart_transfer+0x2de>
   241d4:	682a      	ldr	r2, [r5, #0]
   241d6:	9900      	ldr	r1, [sp, #0]
   241d8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   241dc:	428a      	cmp	r2, r1
   241de:	eb0b 0806 	add.w	r8, fp, r6
   241e2:	d0ab      	beq.n	2413c <am_hal_uart_transfer+0x268>
   241e4:	469b      	mov	fp, r3
   241e6:	2702      	movs	r7, #2
   241e8:	e6b8      	b.n	23f5c <am_hal_uart_transfer+0x88>
   241ea:	9301      	str	r3, [sp, #4]
   241ec:	f7ff f90a 	bl	23404 <am_hal_interrupt_master_disable>
   241f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   241f2:	9007      	str	r0, [sp, #28]
   241f4:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   241f8:	301c      	adds	r0, #28
   241fa:	9b01      	ldr	r3, [sp, #4]
   241fc:	0300      	lsls	r0, r0, #12
   241fe:	ac08      	add	r4, sp, #32
   24200:	2200      	movs	r2, #0
   24202:	6981      	ldr	r1, [r0, #24]
   24204:	06c9      	lsls	r1, r1, #27
   24206:	d409      	bmi.n	2421c <am_hal_uart_transfer+0x348>
   24208:	6801      	ldr	r1, [r0, #0]
   2420a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   2420e:	f102 0201 	add.w	r2, r2, #1
   24212:	d118      	bne.n	24246 <am_hal_uart_transfer+0x372>
   24214:	2a20      	cmp	r2, #32
   24216:	f804 1b01 	strb.w	r1, [r4], #1
   2421a:	d1f2      	bne.n	24202 <am_hal_uart_transfer+0x32e>
   2421c:	a908      	add	r1, sp, #32
   2421e:	9802      	ldr	r0, [sp, #8]
   24220:	9301      	str	r3, [sp, #4]
   24222:	f7ff faed 	bl	23800 <am_hal_queue_item_add>
   24226:	9b01      	ldr	r3, [sp, #4]
   24228:	2800      	cmp	r0, #0
   2422a:	d1b2      	bne.n	24192 <am_hal_uart_transfer+0x2be>
   2422c:	4f45      	ldr	r7, [pc, #276]	; (24344 <am_hal_uart_transfer+0x470>)
   2422e:	469b      	mov	fp, r3
   24230:	9807      	ldr	r0, [sp, #28]
   24232:	f7ff f8eb 	bl	2340c <am_hal_interrupt_master_set>
   24236:	e691      	b.n	23f5c <am_hal_uart_transfer+0x88>
   24238:	469b      	mov	fp, r3
   2423a:	4426      	add	r6, r4
   2423c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   24240:	e68c      	b.n	23f5c <am_hal_uart_transfer+0x88>
   24242:	46b8      	mov	r8, r7
   24244:	e71a      	b.n	2407c <am_hal_uart_transfer+0x1a8>
   24246:	469b      	mov	fp, r3
   24248:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   2424c:	e7f0      	b.n	24230 <am_hal_uart_transfer+0x35c>
   2424e:	463e      	mov	r6, r7
   24250:	e797      	b.n	24182 <am_hal_uart_transfer+0x2ae>
   24252:	4616      	mov	r6, r2
   24254:	e6b2      	b.n	23fbc <am_hal_uart_transfer+0xe8>
   24256:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   24258:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2425a:	1a9b      	subs	r3, r3, r2
   2425c:	429e      	cmp	r6, r3
   2425e:	bf28      	it	cs
   24260:	461e      	movcs	r6, r3
   24262:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   24266:	4651      	mov	r1, sl
   24268:	4632      	mov	r2, r6
   2426a:	4620      	mov	r0, r4
   2426c:	f7ff fac8 	bl	23800 <am_hal_queue_item_add>
   24270:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   24272:	f7ff f8c7 	bl	23404 <am_hal_interrupt_master_disable>
   24276:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   2427a:	371c      	adds	r7, #28
   2427c:	033f      	lsls	r7, r7, #12
   2427e:	9005      	str	r0, [sp, #20]
   24280:	e00d      	b.n	2429e <am_hal_uart_transfer+0x3ca>
   24282:	f7ff faf5 	bl	23870 <am_hal_queue_item_get>
   24286:	b188      	cbz	r0, 242ac <am_hal_uart_transfer+0x3d8>
   24288:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2428a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2428e:	331c      	adds	r3, #28
   24290:	031b      	lsls	r3, r3, #12
   24292:	699a      	ldr	r2, [r3, #24]
   24294:	0692      	lsls	r2, r2, #26
   24296:	bf5c      	itt	pl
   24298:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
   2429c:	601a      	strpl	r2, [r3, #0]
   2429e:	69bb      	ldr	r3, [r7, #24]
   242a0:	069b      	lsls	r3, r3, #26
   242a2:	f04f 0201 	mov.w	r2, #1
   242a6:	a908      	add	r1, sp, #32
   242a8:	4620      	mov	r0, r4
   242aa:	d5ea      	bpl.n	24282 <am_hal_uart_transfer+0x3ae>
   242ac:	9805      	ldr	r0, [sp, #20]
   242ae:	f7ff f8ad 	bl	2340c <am_hal_interrupt_master_set>
   242b2:	e683      	b.n	23fbc <am_hal_uart_transfer+0xe8>
   242b4:	469b      	mov	fp, r3
   242b6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   242ba:	e64f      	b.n	23f5c <am_hal_uart_transfer+0x88>
   242bc:	461e      	mov	r6, r3
   242be:	e67d      	b.n	23fbc <am_hal_uart_transfer+0xe8>
   242c0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   242c4:	e6b4      	b.n	24030 <am_hal_uart_transfer+0x15c>
   242c6:	9300      	str	r3, [sp, #0]
   242c8:	f7ff f89c 	bl	23404 <am_hal_interrupt_master_disable>
   242cc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   242ce:	9006      	str	r0, [sp, #24]
   242d0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   242d4:	321c      	adds	r2, #28
   242d6:	0311      	lsls	r1, r2, #12
   242d8:	a808      	add	r0, sp, #32
   242da:	2200      	movs	r2, #0
   242dc:	9b00      	ldr	r3, [sp, #0]
   242de:	e009      	b.n	242f4 <am_hal_uart_transfer+0x420>
   242e0:	680c      	ldr	r4, [r1, #0]
   242e2:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   242e6:	f102 0201 	add.w	r2, r2, #1
   242ea:	d121      	bne.n	24330 <am_hal_uart_transfer+0x45c>
   242ec:	2a20      	cmp	r2, #32
   242ee:	f800 4b01 	strb.w	r4, [r0], #1
   242f2:	d002      	beq.n	242fa <am_hal_uart_transfer+0x426>
   242f4:	698c      	ldr	r4, [r1, #24]
   242f6:	06e4      	lsls	r4, r4, #27
   242f8:	d5f2      	bpl.n	242e0 <am_hal_uart_transfer+0x40c>
   242fa:	f105 0648 	add.w	r6, r5, #72	; 0x48
   242fe:	a908      	add	r1, sp, #32
   24300:	4630      	mov	r0, r6
   24302:	9300      	str	r3, [sp, #0]
   24304:	f7ff fa7c 	bl	23800 <am_hal_queue_item_add>
   24308:	b920      	cbnz	r0, 24314 <am_hal_uart_transfer+0x440>
   2430a:	4f0e      	ldr	r7, [pc, #56]	; (24344 <am_hal_uart_transfer+0x470>)
   2430c:	9806      	ldr	r0, [sp, #24]
   2430e:	f7ff f87d 	bl	2340c <am_hal_interrupt_master_set>
   24312:	e5e9      	b.n	23ee8 <am_hal_uart_transfer+0x14>
   24314:	9806      	ldr	r0, [sp, #24]
   24316:	f7ff f879 	bl	2340c <am_hal_interrupt_master_set>
   2431a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   2431c:	9b00      	ldr	r3, [sp, #0]
   2431e:	42bc      	cmp	r4, r7
   24320:	bf28      	it	cs
   24322:	463c      	movcs	r4, r7
   24324:	4619      	mov	r1, r3
   24326:	4630      	mov	r0, r6
   24328:	4622      	mov	r2, r4
   2432a:	f7ff faa1 	bl	23870 <am_hal_queue_item_get>
   2432e:	e67e      	b.n	2402e <am_hal_uart_transfer+0x15a>
   24330:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   24334:	e7ea      	b.n	2430c <am_hal_uart_transfer+0x438>
   24336:	4604      	mov	r4, r0
   24338:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   2433c:	e678      	b.n	24030 <am_hal_uart_transfer+0x15c>
   2433e:	4627      	mov	r7, r4
   24340:	e676      	b.n	24030 <am_hal_uart_transfer+0x15c>
   24342:	bf00      	nop
   24344:	08000001 	.word	0x08000001

00024348 <am_hal_uart_interrupt_enable>:
   24348:	6803      	ldr	r3, [r0, #0]
   2434a:	4a08      	ldr	r2, [pc, #32]	; (2436c <am_hal_uart_interrupt_enable+0x24>)
   2434c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24350:	4293      	cmp	r3, r2
   24352:	d001      	beq.n	24358 <am_hal_uart_interrupt_enable+0x10>
   24354:	2002      	movs	r0, #2
   24356:	4770      	bx	lr
   24358:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2435a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2435e:	331c      	adds	r3, #28
   24360:	031b      	lsls	r3, r3, #12
   24362:	2000      	movs	r0, #0
   24364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   24366:	4311      	orrs	r1, r2
   24368:	6399      	str	r1, [r3, #56]	; 0x38
   2436a:	4770      	bx	lr
   2436c:	01ea9e06 	.word	0x01ea9e06

00024370 <am_hal_uart_interrupt_clear>:
   24370:	6803      	ldr	r3, [r0, #0]
   24372:	4a07      	ldr	r2, [pc, #28]	; (24390 <am_hal_uart_interrupt_clear+0x20>)
   24374:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24378:	4293      	cmp	r3, r2
   2437a:	d001      	beq.n	24380 <am_hal_uart_interrupt_clear+0x10>
   2437c:	2002      	movs	r0, #2
   2437e:	4770      	bx	lr
   24380:	6a43      	ldr	r3, [r0, #36]	; 0x24
   24382:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   24386:	331c      	adds	r3, #28
   24388:	031b      	lsls	r3, r3, #12
   2438a:	2000      	movs	r0, #0
   2438c:	6459      	str	r1, [r3, #68]	; 0x44
   2438e:	4770      	bx	lr
   24390:	01ea9e06 	.word	0x01ea9e06

00024394 <am_hal_uart_interrupt_status_get>:
   24394:	6803      	ldr	r3, [r0, #0]
   24396:	b410      	push	{r4}
   24398:	4c0b      	ldr	r4, [pc, #44]	; (243c8 <am_hal_uart_interrupt_status_get+0x34>)
   2439a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2439e:	42a3      	cmp	r3, r4
   243a0:	d003      	beq.n	243aa <am_hal_uart_interrupt_status_get+0x16>
   243a2:	2002      	movs	r0, #2
   243a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   243a8:	4770      	bx	lr
   243aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   243ac:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   243b0:	331c      	adds	r3, #28
   243b2:	031b      	lsls	r3, r3, #12
   243b4:	b12a      	cbz	r2, 243c2 <am_hal_uart_interrupt_status_get+0x2e>
   243b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   243b8:	600b      	str	r3, [r1, #0]
   243ba:	2000      	movs	r0, #0
   243bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   243c0:	4770      	bx	lr
   243c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   243c4:	e7f8      	b.n	243b8 <am_hal_uart_interrupt_status_get+0x24>
   243c6:	bf00      	nop
   243c8:	01ea9e06 	.word	0x01ea9e06
   243cc:	0001c200 	.word	0x0001c200
   243d0:	00000060 	.word	0x00000060
	...
   243e0:	00000012 	.word	0x00000012
	...
   243f4:	65657246 	.word	0x65657246
   243f8:	534f5452 	.word	0x534f5452
   243fc:	444d4120 	.word	0x444d4120
   24400:	45205054 	.word	0x45205054
   24404:	706d6178 	.word	0x706d6178
   24408:	000a656c 	.word	0x000a656c
   2440c:	20465357 	.word	0x20465357
   24410:	656d6954 	.word	0x656d6954
   24414:	00000072 	.word	0x00000072
   24418:	6f6d654d 	.word	0x6f6d654d
   2441c:	70207972 	.word	0x70207972
   24420:	206c6f6f 	.word	0x206c6f6f
   24424:	74207369 	.word	0x74207369
   24428:	73206f6f 	.word	0x73206f6f
   2442c:	6c6c616d 	.word	0x6c6c616d
   24430:	20796220 	.word	0x20796220
   24434:	0a0d6425 	.word	0x0a0d6425
   24438:	00000000 	.word	0x00000000
   2443c:	69646152 	.word	0x69646152
   24440:	7361546f 	.word	0x7361546f
   24444:	73203a6b 	.word	0x73203a6b
   24448:	70757465 	.word	0x70757465
   2444c:	00000a0d 	.word	0x00000a0d
   24450:	72617453 	.word	0x72617453
   24454:	676e6974 	.word	0x676e6974
   24458:	63697720 	.word	0x63697720
   2445c:	72746e65 	.word	0x72746e65
   24460:	74206369 	.word	0x74206369
   24464:	65636172 	.word	0x65636172
   24468:	000a0a3a 	.word	0x000a0a3a
   2446c:	6e6e7552 	.word	0x6e6e7552
   24470:	20676e69 	.word	0x20676e69
   24474:	75746573 	.word	0x75746573
   24478:	61742070 	.word	0x61742070
   2447c:	2e736b73 	.word	0x2e736b73
   24480:	0a0d2e2e 	.word	0x0a0d2e2e
   24484:	00000000 	.word	0x00000000
   24488:	69646152 	.word	0x69646152
   2448c:	7361546f 	.word	0x7361546f
   24490:	0000006b 	.word	0x0000006b
   24494:	75746553 	.word	0x75746553
   24498:	00000070 	.word	0x00000070
   2449c:	203e3e3e 	.word	0x203e3e3e
   244a0:	65736552 	.word	0x65736552
   244a4:	6f632074 	.word	0x6f632074
   244a8:	656c706d 	.word	0x656c706d
   244ac:	3c206574 	.word	0x3c206574
   244b0:	00003c3c 	.word	0x00003c3c
   244b4:	203e3e3e 	.word	0x203e3e3e
   244b8:	65766441 	.word	0x65766441
   244bc:	73697472 	.word	0x73697472
   244c0:	20676e69 	.word	0x20676e69
   244c4:	72617473 	.word	0x72617473
   244c8:	20646574 	.word	0x20646574
   244cc:	003c3c3c 	.word	0x003c3c3c
   244d0:	203e3e3e 	.word	0x203e3e3e
   244d4:	65766441 	.word	0x65766441
   244d8:	73697472 	.word	0x73697472
   244dc:	20676e69 	.word	0x20676e69
   244e0:	706f7473 	.word	0x706f7473
   244e4:	20646570 	.word	0x20646570
   244e8:	003c3c3c 	.word	0x003c3c3c
   244ec:	203e3e3e 	.word	0x203e3e3e
   244f0:	6e616353 	.word	0x6e616353
   244f4:	676e696e 	.word	0x676e696e
   244f8:	61747320 	.word	0x61747320
   244fc:	64657472 	.word	0x64657472
   24500:	3c3c3c20 	.word	0x3c3c3c20
   24504:	00000000 	.word	0x00000000
   24508:	203e3e3e 	.word	0x203e3e3e
   2450c:	6e616353 	.word	0x6e616353
   24510:	676e696e 	.word	0x676e696e
   24514:	6f747320 	.word	0x6f747320
   24518:	64657070 	.word	0x64657070
   2451c:	3c3c3c20 	.word	0x3c3c3c20
   24520:	00000000 	.word	0x00000000
   24524:	203e3e3e 	.word	0x203e3e3e
   24528:	6e616353 	.word	0x6e616353
   2452c:	74616420 	.word	0x74616420
   24530:	65722061 	.word	0x65722061
   24534:	76696563 	.word	0x76696563
   24538:	66206465 	.word	0x66206465
   2453c:	206d6f72 	.word	0x206d6f72
   24540:	72656570 	.word	0x72656570
   24544:	3c3c3c20 	.word	0x3c3c3c20
   24548:	00000000 	.word	0x00000000
   2454c:	203e3e3e 	.word	0x203e3e3e
   24550:	6e6e6f43 	.word	0x6e6e6f43
   24554:	69746365 	.word	0x69746365
   24558:	6f206e6f 	.word	0x6f206e6f
   2455c:	656e6570 	.word	0x656e6570
   24560:	3c3c2064 	.word	0x3c3c2064
   24564:	0000003c 	.word	0x0000003c
   24568:	203e3e3e 	.word	0x203e3e3e
   2456c:	6e6e6f43 	.word	0x6e6e6f43
   24570:	69746365 	.word	0x69746365
   24574:	63206e6f 	.word	0x63206e6f
   24578:	65736f6c 	.word	0x65736f6c
   2457c:	3c3c2064 	.word	0x3c3c2064
   24580:	0000003c 	.word	0x0000003c
   24584:	203e3e3e 	.word	0x203e3e3e
   24588:	72696150 	.word	0x72696150
   2458c:	20676e69 	.word	0x20676e69
   24590:	706d6f63 	.word	0x706d6f63
   24594:	6574656c 	.word	0x6574656c
   24598:	75732064 	.word	0x75732064
   2459c:	73656363 	.word	0x73656363
   245a0:	6c756673 	.word	0x6c756673
   245a4:	3c20796c 	.word	0x3c20796c
   245a8:	00003c3c 	.word	0x00003c3c
   245ac:	203e3e3e 	.word	0x203e3e3e
   245b0:	72696150 	.word	0x72696150
   245b4:	20676e69 	.word	0x20676e69
   245b8:	6c696166 	.word	0x6c696166
   245bc:	3c206465 	.word	0x3c206465
   245c0:	00003c3c 	.word	0x00003c3c
   245c4:	203e3e3e 	.word	0x203e3e3e
   245c8:	6e6e6f43 	.word	0x6e6e6f43
   245cc:	69746365 	.word	0x69746365
   245d0:	65206e6f 	.word	0x65206e6f
   245d4:	7972636e 	.word	0x7972636e
   245d8:	64657470 	.word	0x64657470
   245dc:	3c3c3c20 	.word	0x3c3c3c20
   245e0:	00000000 	.word	0x00000000
   245e4:	203e3e3e 	.word	0x203e3e3e
   245e8:	72636e45 	.word	0x72636e45
   245ec:	69747079 	.word	0x69747079
   245f0:	66206e6f 	.word	0x66206e6f
   245f4:	656c6961 	.word	0x656c6961
   245f8:	3c3c2064 	.word	0x3c3c2064
   245fc:	0000003c 	.word	0x0000003c
   24600:	203e3e3e 	.word	0x203e3e3e
   24604:	6d6f7250 	.word	0x6d6f7250
   24608:	75207470 	.word	0x75207470
   2460c:	20726573 	.word	0x20726573
   24610:	65206f74 	.word	0x65206f74
   24614:	7265746e 	.word	0x7265746e
   24618:	73617020 	.word	0x73617020
   2461c:	79656b73 	.word	0x79656b73
   24620:	3c3c3c20 	.word	0x3c3c3c20
   24624:	00000000 	.word	0x00000000
   24628:	203e3e3e 	.word	0x203e3e3e
   2462c:	636e6143 	.word	0x636e6143
   24630:	61206c65 	.word	0x61206c65
   24634:	776f6c20 	.word	0x776f6c20
   24638:	20726f20 	.word	0x20726f20
   2463c:	68676968 	.word	0x68676968
   24640:	656c6120 	.word	0x656c6120
   24644:	3c207472 	.word	0x3c207472
   24648:	00003c3c 	.word	0x00003c3c
   2464c:	203e3e3e 	.word	0x203e3e3e
   24650:	20776f4c 	.word	0x20776f4c
   24654:	72656c61 	.word	0x72656c61
   24658:	3c3c2074 	.word	0x3c3c2074
   2465c:	0000003c 	.word	0x0000003c
   24660:	203e3e3e 	.word	0x203e3e3e
   24664:	68676948 	.word	0x68676948
   24668:	656c6120 	.word	0x656c6120
   2466c:	3c207472 	.word	0x3c207472
   24670:	00003c3c 	.word	0x00003c3c
   24674:	203e3e3e 	.word	0x203e3e3e
   24678:	73736150 	.word	0x73736150
   2467c:	3a79656b 	.word	0x3a79656b
   24680:	20642520 	.word	0x20642520
   24684:	003c3c3c 	.word	0x003c3c3c
   24688:	203e3e3e 	.word	0x203e3e3e
   2468c:	666e6f43 	.word	0x666e6f43
   24690:	206d7269 	.word	0x206d7269
   24694:	756c6156 	.word	0x756c6156
   24698:	25203a65 	.word	0x25203a65
   2469c:	3c3c2064 	.word	0x3c3c2064
   246a0:	0000003c 	.word	0x0000003c
   246a4:	203e3e3e 	.word	0x203e3e3e
   246a8:	49535352 	.word	0x49535352
   246ac:	6425203a 	.word	0x6425203a
   246b0:	6d426420 	.word	0x6d426420
   246b4:	003c3c3c 	.word	0x003c3c3c
   246b8:	74646d41 	.word	0x74646d41
   246bc:	65536370 	.word	0x65536370
   246c0:	6144646e 	.word	0x6144646e
   246c4:	29286174 	.word	0x29286174
   246c8:	206f6e20 	.word	0x206f6e20
   246cc:	6e6e6f63 	.word	0x6e6e6f63
   246d0:	69746365 	.word	0x69746365
   246d4:	000a6e6f 	.word	0x000a6e6f
   246d8:	61766e49 	.word	0x61766e49
   246dc:	2064696c 	.word	0x2064696c
   246e0:	52747461 	.word	0x52747461
   246e4:	6c644878 	.word	0x6c644878
   246e8:	30203d20 	.word	0x30203d20
   246ec:	0a782578 	.word	0x0a782578
   246f0:	00000000 	.word	0x00000000
   246f4:	74646d41 	.word	0x74646d41
   246f8:	65536370 	.word	0x65536370
   246fc:	6341646e 	.word	0x6341646e
   24700:	2029286b 	.word	0x2029286b
   24704:	63206f6e 	.word	0x63206f6e
   24708:	656e6e6f 	.word	0x656e6e6f
   2470c:	6f697463 	.word	0x6f697463
   24710:	00000a6e 	.word	0x00000a6e
   24714:	61766e49 	.word	0x61766e49
   24718:	2064696c 	.word	0x2064696c
   2471c:	41747461 	.word	0x41747461
   24720:	64486b63 	.word	0x64486b63
   24724:	203d206c 	.word	0x203d206c
   24728:	78257830 	.word	0x78257830
   2472c:	0000000a 	.word	0x0000000a
   24730:	74646d61 	.word	0x74646d61
   24734:	735f6370 	.word	0x735f6370
   24738:	74726174 	.word	0x74726174
   2473c:	6e202928 	.word	0x6e202928
   24740:	6f63206f 	.word	0x6f63206f
   24744:	63656e6e 	.word	0x63656e6e
   24748:	6e6f6974 	.word	0x6e6f6974
   2474c:	0000000a 	.word	0x0000000a
   24750:	2055544d 	.word	0x2055544d
   24754:	657a6973 	.word	0x657a6973
   24758:	25203d20 	.word	0x25203d20
   2475c:	79622064 	.word	0x79622064
   24760:	00736574 	.word	0x00736574
   24764:	74646d61 	.word	0x74646d61
   24768:	74206370 	.word	0x74206370
   2476c:	69742078 	.word	0x69742078
   24770:	756f656d 	.word	0x756f656d
   24774:	74202c74 	.word	0x74202c74
   24778:	746b5078 	.word	0x746b5078
   2477c:	3d206e53 	.word	0x3d206e53
   24780:	00642520 	.word	0x00642520
   24784:	61746164 	.word	0x61746164
   24788:	6e657320 	.word	0x6e657320
   2478c:	676e6964 	.word	0x676e6964
   24790:	69616620 	.word	0x69616620
   24794:	2c64656c 	.word	0x2c64656c
   24798:	20787420 	.word	0x20787420
   2479c:	74617473 	.word	0x74617473
   247a0:	203d2065 	.word	0x203d2065
   247a4:	00006425 	.word	0x00006425
   247a8:	61746164 	.word	0x61746164
   247ac:	6e657320 	.word	0x6e657320
   247b0:	676e6964 	.word	0x676e6964
   247b4:	69616620 	.word	0x69616620
   247b8:	2c64656c 	.word	0x2c64656c
   247bc:	63786520 	.word	0x63786520
   247c0:	20646565 	.word	0x20646565
   247c4:	6978616d 	.word	0x6978616d
   247c8:	206d756d 	.word	0x206d756d
   247cc:	6c796170 	.word	0x6c796170
   247d0:	2c64616f 	.word	0x2c64616f
   247d4:	6e656c20 	.word	0x6e656c20
   247d8:	25203d20 	.word	0x25203d20
   247dc:	00002e64 	.word	0x00002e64
   247e0:	61746164 	.word	0x61746164
   247e4:	6e657320 	.word	0x6e657320
   247e8:	676e6964 	.word	0x676e6964
   247ec:	69616620 	.word	0x69616620
   247f0:	2c64656c 	.word	0x2c64656c
   247f4:	746f6e20 	.word	0x746f6e20
   247f8:	61657220 	.word	0x61657220
   247fc:	66207964 	.word	0x66207964
   24800:	6e20726f 	.word	0x6e20726f
   24804:	6669746f 	.word	0x6669746f
   24808:	74616369 	.word	0x74616369
   2480c:	2e6e6f69 	.word	0x2e6e6f69
   24810:	00000000 	.word	0x00000000
   24814:	42667357 	.word	0x42667357
   24818:	6c416675 	.word	0x6c416675
   2481c:	20636f6c 	.word	0x20636f6c
   24820:	6c696166 	.word	0x6c696166
   24824:	6c206465 	.word	0x6c206465
   24828:	253a6e65 	.word	0x253a6e65
   2482c:	00000075 	.word	0x00000075
   24830:	74646d41 	.word	0x74646d41
   24834:	6f436370 	.word	0x6f436370
   24838:	704f6e6e 	.word	0x704f6e6e
   2483c:	29286e65 	.word	0x29286e65
   24840:	76656420 	.word	0x76656420
   24844:	6f666e49 	.word	0x6f666e49
   24848:	4e203d20 	.word	0x4e203d20
   2484c:	0a4c4c55 	.word	0x0a4c4c55
   24850:	00000000 	.word	0x00000000
   24854:	74646d41 	.word	0x74646d41
   24858:	65536370 	.word	0x65536370
   2485c:	6554646e 	.word	0x6554646e
   24860:	61447473 	.word	0x61447473
   24864:	29286174 	.word	0x29286174
   24868:	69616620 	.word	0x69616620
   2486c:	2c64656c 	.word	0x2c64656c
   24870:	61747320 	.word	0x61747320
   24874:	20737574 	.word	0x20737574
   24878:	6425203d 	.word	0x6425203d
   2487c:	0000000a 	.word	0x0000000a
   24880:	74646d41 	.word	0x74646d41
   24884:	65526370 	.word	0x65526370
   24888:	73657571 	.word	0x73657571
   2488c:	72655374 	.word	0x72655374
   24890:	53726576 	.word	0x53726576
   24894:	28646e65 	.word	0x28646e65
   24898:	61662029 	.word	0x61662029
   2489c:	64656c69 	.word	0x64656c69
   248a0:	7473202c 	.word	0x7473202c
   248a4:	73757461 	.word	0x73757461
   248a8:	25203d20 	.word	0x25203d20
   248ac:	00000a64 	.word	0x00000a64
   248b0:	74646d61 	.word	0x74646d61
   248b4:	70744470 	.word	0x70744470
   248b8:	6e617254 	.word	0x6e617254
   248bc:	61624373 	.word	0x61624373
   248c0:	73206b63 	.word	0x73206b63
   248c4:	75746174 	.word	0x75746174
   248c8:	203d2073 	.word	0x203d2073
   248cc:	000a6425 	.word	0x000a6425
   248d0:	6f726874 	.word	0x6f726874
   248d4:	70686775 	.word	0x70686775
   248d8:	3a207475 	.word	0x3a207475
   248dc:	20642520 	.word	0x20642520
   248e0:	65747942 	.word	0x65747942
   248e4:	0a732f73 	.word	0x0a732f73
   248e8:	00000000 	.word	0x00000000
   248ec:	6e616373 	.word	0x6e616373
   248f0:	6f747320 	.word	0x6f747320
   248f4:	000a0d70 	.word	0x000a0d70
   248f8:	6e6f4320 	.word	0x6e6f4320
   248fc:	7463656e 	.word	0x7463656e
   24900:	206e6f69 	.word	0x206e6f69
   24904:	6e65706f 	.word	0x6e65706f
   24908:	0a0d6465 	.word	0x0a0d6465
   2490c:	00000000 	.word	0x00000000
   24910:	74646d41 	.word	0x74646d41
   24914:	61486370 	.word	0x61486370
   24918:	656c646e 	.word	0x656c646e
   2491c:	696e4972 	.word	0x696e4972
   24920:	00000074 	.word	0x00000074
   24924:	74646d41 	.word	0x74646d41
   24928:	67206370 	.word	0x67206370
   2492c:	6520746f 	.word	0x6520746f
   24930:	25207476 	.word	0x25207476
   24934:	00000064 	.word	0x00000064
   24938:	58323025 	.word	0x58323025
   2493c:	00000020 	.word	0x00000020
   24940:	0000000a 	.word	0x0000000a
   24944:	00000a0a 	.word	0x00000a0a
   24948:	2e2f2e2e 	.word	0x2e2f2e2e
   2494c:	2e2e2f2e 	.word	0x2e2e2f2e
   24950:	2f2e2e2f 	.word	0x2f2e2e2f
   24954:	742f2e2e 	.word	0x742f2e2e
   24958:	64726968 	.word	0x64726968
   2495c:	7261705f 	.word	0x7261705f
   24960:	652f7974 	.word	0x652f7974
   24964:	74636178 	.word	0x74636178
   24968:	772f656c 	.word	0x772f656c
   2496c:	6f632d73 	.word	0x6f632d73
   24970:	732f6572 	.word	0x732f6572
   24974:	73772f77 	.word	0x73772f77
   24978:	6d612f66 	.word	0x6d612f66
   2497c:	2f716962 	.word	0x2f716962
   24980:	5f667377 	.word	0x5f667377
   24984:	63617274 	.word	0x63617274
   24988:	00632e65 	.word	0x00632e65
   2498c:	61766e49 	.word	0x61766e49
   24990:	2064696c 	.word	0x2064696c
   24994:	6b636170 	.word	0x6b636170
   24998:	21217465 	.word	0x21217465
   2499c:	00000021 	.word	0x00000021
   249a0:	65707974 	.word	0x65707974
   249a4:	25203d20 	.word	0x25203d20
   249a8:	73202c64 	.word	0x73202c64
   249ac:	203d206e 	.word	0x203d206e
   249b0:	00006425 	.word	0x00006425
   249b4:	20636e65 	.word	0x20636e65
   249b8:	6425203d 	.word	0x6425203d
   249bc:	6361202c 	.word	0x6361202c
   249c0:	616e456b 	.word	0x616e456b
   249c4:	64656c62 	.word	0x64656c62
   249c8:	25203d20 	.word	0x25203d20
   249cc:	00000064 	.word	0x00000064
   249d0:	20746f6e 	.word	0x20746f6e
   249d4:	756f6e65 	.word	0x756f6e65
   249d8:	62206867 	.word	0x62206867
   249dc:	65666675 	.word	0x65666675
   249e0:	69732072 	.word	0x69732072
   249e4:	2121657a 	.word	0x2121657a
   249e8:	00000021 	.word	0x00000021
   249ec:	20637263 	.word	0x20637263
   249f0:	6f727265 	.word	0x6f727265
   249f4:	00000a72 	.word	0x00000a72
   249f8:	65736572 	.word	0x65736572
   249fc:	6b50646e 	.word	0x6b50646e
   24a00:	206e5374 	.word	0x206e5374
   24a04:	6425203d 	.word	0x6425203d
   24a08:	616c202c 	.word	0x616c202c
   24a0c:	78527473 	.word	0x78527473
   24a10:	53746b50 	.word	0x53746b50
   24a14:	203d206e 	.word	0x203d206e
   24a18:	00006425 	.word	0x00006425
   24a1c:	78656e75 	.word	0x78656e75
   24a20:	74636570 	.word	0x74636570
   24a24:	63206465 	.word	0x63206465
   24a28:	72746e6f 	.word	0x72746e6f
   24a2c:	203d206c 	.word	0x203d206c
   24a30:	000a6425 	.word	0x000a6425
   24a34:	74646d41 	.word	0x74646d41
   24a38:	6e655370 	.word	0x6e655370
   24a3c:	70655264 	.word	0x70655264
   24a40:	7320796c 	.word	0x7320796c
   24a44:	75746174 	.word	0x75746174
   24a48:	203d2073 	.word	0x203d2073
   24a4c:	000a6425 	.word	0x000a6425
   24a50:	74646d41 	.word	0x74646d41
   24a54:	6e655370 	.word	0x6e655370
   24a58:	6e6f4364 	.word	0x6e6f4364
   24a5c:	6c6f7274 	.word	0x6c6f7274
   24a60:	61747320 	.word	0x61747320
   24a64:	20737574 	.word	0x20737574
   24a68:	6425203d 	.word	0x6425203d
   24a6c:	0000000a 	.word	0x0000000a
   24a70:	4f525245 	.word	0x4f525245
   24a74:	48435f52 	.word	0x48435f52
   24a78:	5f4b4345 	.word	0x5f4b4345
   24a7c:	44494f56 	.word	0x44494f56
   24a80:	5f6d6120 	.word	0x5f6d6120
   24a84:	5f6c6168 	.word	0x5f6c6168
   24a88:	5f656c62 	.word	0x5f656c62
   24a8c:	74696e69 	.word	0x74696e69
   24a90:	696c6169 	.word	0x696c6169
   24a94:	3028657a 	.word	0x3028657a
   24a98:	4226202c 	.word	0x4226202c
   24a9c:	0a29454c 	.word	0x0a29454c
   24aa0:	00000000 	.word	0x00000000
   24aa4:	4f525245 	.word	0x4f525245
   24aa8:	48435f52 	.word	0x48435f52
   24aac:	5f4b4345 	.word	0x5f4b4345
   24ab0:	44494f56 	.word	0x44494f56
   24ab4:	5f6d6120 	.word	0x5f6d6120
   24ab8:	5f6c6168 	.word	0x5f6c6168
   24abc:	5f656c62 	.word	0x5f656c62
   24ac0:	65776f70 	.word	0x65776f70
   24ac4:	6f635f72 	.word	0x6f635f72
   24ac8:	6f72746e 	.word	0x6f72746e
   24acc:	4c42286c 	.word	0x4c42286c
   24ad0:	41202c45 	.word	0x41202c45
   24ad4:	41485f4d 	.word	0x41485f4d
   24ad8:	4c425f4c 	.word	0x4c425f4c
   24adc:	4f505f45 	.word	0x4f505f45
   24ae0:	5f524557 	.word	0x5f524557
   24ae4:	49544341 	.word	0x49544341
   24ae8:	0a294556 	.word	0x0a294556
   24aec:	00000000 	.word	0x00000000
   24af0:	4f525245 	.word	0x4f525245
   24af4:	48435f52 	.word	0x48435f52
   24af8:	5f4b4345 	.word	0x5f4b4345
   24afc:	44494f56 	.word	0x44494f56
   24b00:	5f6d6120 	.word	0x5f6d6120
   24b04:	5f6c6168 	.word	0x5f6c6168
   24b08:	5f656c62 	.word	0x5f656c62
   24b0c:	666e6f63 	.word	0x666e6f63
   24b10:	42286769 	.word	0x42286769
   24b14:	202c454c 	.word	0x202c454c
   24b18:	6c427326 	.word	0x6c427326
   24b1c:	6e6f4365 	.word	0x6e6f4365
   24b20:	29676966 	.word	0x29676966
   24b24:	0000000a 	.word	0x0000000a
   24b28:	4f525245 	.word	0x4f525245
   24b2c:	48435f52 	.word	0x48435f52
   24b30:	5f4b4345 	.word	0x5f4b4345
   24b34:	44494f56 	.word	0x44494f56
   24b38:	5f6d6120 	.word	0x5f6d6120
   24b3c:	5f6c6168 	.word	0x5f6c6168
   24b40:	5f656c62 	.word	0x5f656c62
   24b44:	65776f70 	.word	0x65776f70
   24b48:	6f635f72 	.word	0x6f635f72
   24b4c:	6f72746e 	.word	0x6f72746e
   24b50:	4c42286c 	.word	0x4c42286c
   24b54:	41202c45 	.word	0x41202c45
   24b58:	41485f4d 	.word	0x41485f4d
   24b5c:	4c425f4c 	.word	0x4c425f4c
   24b60:	4f505f45 	.word	0x4f505f45
   24b64:	5f524557 	.word	0x5f524557
   24b68:	2946464f 	.word	0x2946464f
   24b6c:	0000000a 	.word	0x0000000a
   24b70:	4f525245 	.word	0x4f525245
   24b74:	48435f52 	.word	0x48435f52
   24b78:	5f4b4345 	.word	0x5f4b4345
   24b7c:	44494f56 	.word	0x44494f56
   24b80:	5f6d6120 	.word	0x5f6d6120
   24b84:	5f6c6168 	.word	0x5f6c6168
   24b88:	5f656c62 	.word	0x5f656c62
   24b8c:	6e696564 	.word	0x6e696564
   24b90:	61697469 	.word	0x61697469
   24b94:	657a696c 	.word	0x657a696c
   24b98:	454c4228 	.word	0x454c4228
   24b9c:	00000a29 	.word	0x00000a29
   24ba0:	00000004 	.word	0x00000004
   24ba4:	00000020 	.word	0x00000020
   24ba8:	00000020 	.word	0x00000020
   24bac:	00000002 	.word	0x00000002
   24bb0:	00000000 	.word	0x00000000
   24bb4:	00000032 	.word	0x00000032
   24bb8:	00010101 	.word	0x00010101
   24bbc:	4f525245 	.word	0x4f525245
   24bc0:	48435f52 	.word	0x48435f52
   24bc4:	5f4b4345 	.word	0x5f4b4345
   24bc8:	44494f56 	.word	0x44494f56
   24bcc:	49434820 	.word	0x49434820
   24bd0:	5652445f 	.word	0x5652445f
   24bd4:	5f58525f 	.word	0x5f58525f
   24bd8:	4b434150 	.word	0x4b434150
   24bdc:	545f5445 	.word	0x545f5445
   24be0:	4c5f4f4f 	.word	0x4c5f4f4f
   24be4:	45475241 	.word	0x45475241
   24be8:	0000000a 	.word	0x0000000a
   24bec:	2d2d2d2d 	.word	0x2d2d2d2d
   24bf0:	2d2d2d2d 	.word	0x2d2d2d2d
   24bf4:	2d2d2d2d 	.word	0x2d2d2d2d
   24bf8:	2d2d2d2d 	.word	0x2d2d2d2d
   24bfc:	2d2d2d2d 	.word	0x2d2d2d2d
   24c00:	6e616353 	.word	0x6e616353
   24c04:	73655220 	.word	0x73655220
   24c08:	73746c75 	.word	0x73746c75
   24c0c:	2d2d2d2d 	.word	0x2d2d2d2d
   24c10:	2d2d2d2d 	.word	0x2d2d2d2d
   24c14:	2d2d2d2d 	.word	0x2d2d2d2d
   24c18:	2d2d2d2d 	.word	0x2d2d2d2d
   24c1c:	2d2d2d2d 	.word	0x2d2d2d2d
   24c20:	00000a0d 	.word	0x00000a0d
   24c24:	3a206425 	.word	0x3a206425
   24c28:	20642520 	.word	0x20642520
   24c2c:	78323025 	.word	0x78323025
   24c30:	78323025 	.word	0x78323025
   24c34:	78323025 	.word	0x78323025
   24c38:	78323025 	.word	0x78323025
   24c3c:	78323025 	.word	0x78323025
   24c40:	78323025 	.word	0x78323025
   24c44:	000a0d20 	.word	0x000a0d20
   24c48:	2d2d2d2d 	.word	0x2d2d2d2d
   24c4c:	2d2d2d2d 	.word	0x2d2d2d2d
   24c50:	2d2d2d2d 	.word	0x2d2d2d2d
   24c54:	2d2d2d2d 	.word	0x2d2d2d2d
   24c58:	2d2d2d2d 	.word	0x2d2d2d2d
   24c5c:	2d2d2d2d 	.word	0x2d2d2d2d
   24c60:	2d2d2d2d 	.word	0x2d2d2d2d
   24c64:	2d2d2d2d 	.word	0x2d2d2d2d
   24c68:	2d2d2d2d 	.word	0x2d2d2d2d
   24c6c:	2d2d2d2d 	.word	0x2d2d2d2d
   24c70:	2d2d2d2d 	.word	0x2d2d2d2d
   24c74:	2d2d2d2d 	.word	0x2d2d2d2d
   24c78:	2d2d2d2d 	.word	0x2d2d2d2d
   24c7c:	000a0d2d 	.word	0x000a0d2d
   24c80:	6e616373 	.word	0x6e616373
   24c84:	61747320 	.word	0x61747320
   24c88:	0a0d7472 	.word	0x0a0d7472
   24c8c:	00000000 	.word	0x00000000
   24c90:	6f6f6863 	.word	0x6f6f6863
   24c94:	61206573 	.word	0x61206573
   24c98:	6469206e 	.word	0x6469206e
   24c9c:	72662078 	.word	0x72662078
   24ca0:	73206d6f 	.word	0x73206d6f
   24ca4:	206e6163 	.word	0x206e6163
   24ca8:	75736572 	.word	0x75736572
   24cac:	2073746c 	.word	0x2073746c
   24cb0:	63206f74 	.word	0x63206f74
   24cb4:	656e6e6f 	.word	0x656e6e6f
   24cb8:	0d3a7463 	.word	0x0d3a7463
   24cbc:	0000000a 	.word	0x0000000a
   24cc0:	646e6573 	.word	0x646e6573
   24cc4:	74616420 	.word	0x74616420
   24cc8:	6f742061 	.word	0x6f742061
   24ccc:	72657320 	.word	0x72657320
   24cd0:	0d726576 	.word	0x0d726576
   24cd4:	0000000a 	.word	0x0000000a
   24cd8:	646e6573 	.word	0x646e6573
   24cdc:	74616420 	.word	0x74616420
   24ce0:	6f742061 	.word	0x6f742061
   24ce4:	72657320 	.word	0x72657320
   24ce8:	20726576 	.word	0x20726576
   24cec:	706f7473 	.word	0x706f7473
   24cf0:	00000a0d 	.word	0x00000a0d
   24cf4:	75716572 	.word	0x75716572
   24cf8:	20747365 	.word	0x20747365
   24cfc:	76726573 	.word	0x76726573
   24d00:	74207265 	.word	0x74207265
   24d04:	6573206f 	.word	0x6573206f
   24d08:	0a0d646e 	.word	0x0a0d646e
   24d0c:	00000000 	.word	0x00000000
   24d10:	75716572 	.word	0x75716572
   24d14:	20747365 	.word	0x20747365
   24d18:	76726573 	.word	0x76726573
   24d1c:	74207265 	.word	0x74207265
   24d20:	7473206f 	.word	0x7473206f
   24d24:	0a0d706f 	.word	0x0a0d706f
   24d28:	00000000 	.word	0x00000000
   24d2c:	646e6168 	.word	0x646e6168
   24d30:	6553656c 	.word	0x6553656c
   24d34:	7463656c 	.word	0x7463656c
   24d38:	286e6f69 	.word	0x286e6f69
   24d3c:	6e752029 	.word	0x6e752029
   24d40:	776f6e6b 	.word	0x776f6e6b
   24d44:	6e69206e 	.word	0x6e69206e
   24d48:	0a747570 	.word	0x0a747570
   24d4c:	00000000 	.word	0x00000000
   24d50:	4d656c42 	.word	0x4d656c42
   24d54:	52756e65 	.word	0x52756e65
   24d58:	61642078 	.word	0x61642078
   24d5c:	3d206174 	.word	0x3d206174
   24d60:	0a732520 	.word	0x0a732520
   24d64:	00000000 	.word	0x00000000
   24d68:	2d2d2d2d 	.word	0x2d2d2d2d
   24d6c:	2d2d2d2d 	.word	0x2d2d2d2d
   24d70:	2d2d2d2d 	.word	0x2d2d2d2d
   24d74:	2d2d2d2d 	.word	0x2d2d2d2d
   24d78:	2d2d2d2d 	.word	0x2d2d2d2d
   24d7c:	20454c42 	.word	0x20454c42
   24d80:	6e69616d 	.word	0x6e69616d
   24d84:	6e656d20 	.word	0x6e656d20
   24d88:	2d2d2d75 	.word	0x2d2d2d75
   24d8c:	2d2d2d2d 	.word	0x2d2d2d2d
   24d90:	2d2d2d2d 	.word	0x2d2d2d2d
   24d94:	2d2d2d2d 	.word	0x2d2d2d2d
   24d98:	2d2d2d2d 	.word	0x2d2d2d2d
   24d9c:	000a0d2d 	.word	0x000a0d2d
   24da0:	0a0d7325 	.word	0x0a0d7325
   24da4:	00000000 	.word	0x00000000
   24da8:	746e6968 	.word	0x746e6968
   24dac:	7375203a 	.word	0x7375203a
   24db0:	68272065 	.word	0x68272065
   24db4:	6f742027 	.word	0x6f742027
   24db8:	206f6420 	.word	0x206f6420
   24dbc:	6e69616d 	.word	0x6e69616d
   24dc0:	6e656d20 	.word	0x6e656d20
   24dc4:	000a0d75 	.word	0x000a0d75
   24dc8:	20465357 	.word	0x20465357
   24dcc:	20636573 	.word	0x20636573
   24dd0:	20746f6e 	.word	0x20746f6e
   24dd4:	69676572 	.word	0x69676572
   24dd8:	72657473 	.word	0x72657473
   24ddc:	00006465 	.word	0x00006465
   24de0:	20465357 	.word	0x20465357
   24de4:	20636573 	.word	0x20636573
   24de8:	75657571 	.word	0x75657571
   24dec:	6d652065 	.word	0x6d652065
   24df0:	21797470 	.word	0x21797470
   24df4:	00000000 	.word	0x00000000
   24df8:	0a0a0a0a 	.word	0x0a0a0a0a
   24dfc:	0a0a0a0a 	.word	0x0a0a0a0a
   24e00:	0a0a0a0a 	.word	0x0a0a0a0a
   24e04:	0a0a0a0a 	.word	0x0a0a0a0a
   24e08:	00000a0a 	.word	0x00000a0a
   24e0c:	63747441 	.word	0x63747441
   24e10:	63736944 	.word	0x63736944
   24e14:	76726553 	.word	0x76726553
   24e18:	43656369 	.word	0x43656369
   24e1c:	206c706d 	.word	0x206c706d
   24e20:	74617473 	.word	0x74617473
   24e24:	30207375 	.word	0x30207375
   24e28:	32302578 	.word	0x32302578
   24e2c:	00000078 	.word	0x00000078
   24e30:	63747441 	.word	0x63747441
   24e34:	63736944 	.word	0x63736944
   24e38:	72616843 	.word	0x72616843
   24e3c:	6c706d43 	.word	0x6c706d43
   24e40:	61747320 	.word	0x61747320
   24e44:	20737574 	.word	0x20737574
   24e48:	30257830 	.word	0x30257830
   24e4c:	00007832 	.word	0x00007832
   24e50:	63747441 	.word	0x63747441
   24e54:	63736944 	.word	0x63736944
   24e58:	666e6f43 	.word	0x666e6f43
   24e5c:	6d436769 	.word	0x6d436769
   24e60:	73206c70 	.word	0x73206c70
   24e64:	75746174 	.word	0x75746174
   24e68:	78302073 	.word	0x78302073
   24e6c:	78323025 	.word	0x78323025
   24e70:	00000000 	.word	0x00000000
   24e74:	44707041 	.word	0x44707041
   24e78:	43637369 	.word	0x43637369
   24e7c:	6c706d6f 	.word	0x6c706d6f
   24e80:	20657465 	.word	0x20657465
   24e84:	6e6e6f63 	.word	0x6e6e6f63
   24e88:	253a6449 	.word	0x253a6449
   24e8c:	74732064 	.word	0x74732064
   24e90:	73757461 	.word	0x73757461
   24e94:	2578303a 	.word	0x2578303a
   24e98:	00783230 	.word	0x00783230
   24e9c:	6e616353 	.word	0x6e616353
   24ea0:	73657220 	.word	0x73657220
   24ea4:	73746c75 	.word	0x73746c75
   24ea8:	6425203a 	.word	0x6425203a
   24eac:	00000000 	.word	0x00000000
   24eb0:	61766e49 	.word	0x61766e49
   24eb4:	2064696c 	.word	0x2064696c
   24eb8:	73204d44 	.word	0x73204d44
   24ebc:	6e6e6163 	.word	0x6e6e6163
   24ec0:	20676e69 	.word	0x20676e69
   24ec4:	65646f6d 	.word	0x65646f6d
   24ec8:	6f6d203b 	.word	0x6f6d203b
   24ecc:	63206564 	.word	0x63206564
   24ed0:	69666e6f 	.word	0x69666e6f
   24ed4:	65727567 	.word	0x65727567
   24ed8:	73612064 	.word	0x73612064
   24edc:	74786520 	.word	0x74786520
   24ee0:	65646e65 	.word	0x65646e65
   24ee4:	00000064 	.word	0x00000064
   24ee8:	454c4449 	.word	0x454c4449
   24eec:	00000000 	.word	0x00000000
   24ef0:	20726d54 	.word	0x20726d54
   24ef4:	00637653 	.word	0x00637653

00024ef8 <attFcnDefault>:
   24ef8:	0000c505 0000c501 0000c501 0000c503     ................

00024f08 <attWsfChUuid>:
   24f08:	2a9d2a9e                                         .*

00024f0a <attWmChUuid>:
   24f0a:	181d2a9d                                         .*

00024f0c <attWssSvcUuid>:
   24f0c:	2a9f181d                                         ..

00024f0e <attUcpChUuid>:
   24f0e:	2a9a2a9f                                         .*

00024f10 <attUiChUuid>:
   24f10:	2a992a9a                                         .*

00024f12 <attDbciChUuid>:
   24f12:	2ac92a99                                         .*

00024f14 <attRpaoChUuid>:
   24f14:	2a5f2ac9                                         .*

00024f16 <attPlxcmChUuid>:
   24f16:	2a5e2a5f                                         _*

00024f18 <attPlxscmChUuid>:
   24f18:	2a602a5e                                         ^*

00024f1a <attPlxfChUuid>:
   24f1a:	2a5d2a60                                         `*

00024f1c <attSlChUuid>:
   24f1c:	2a5b2a5d                                         ]*

00024f1e <attCsmChUuid>:
   24f1e:	2a5c2a5b                                         [*

00024f20 <attCsfChUuid>:
   24f20:	2a632a5c                                         \*

00024f22 <attCpmChUuid>:
   24f22:	2a652a63                                         c*

00024f24 <attCpfChUuid>:
   24f24:	2a532a65                                         e*

00024f26 <attRsmChUuid>:
   24f26:	2a542a53                                         S*

00024f28 <attRsfChUuid>:
   24f28:	2aa62a54                                         T*

00024f2a <attCarChUuid>:
   24f2a:	2a522aa6                                         .*

00024f2c <attRacpChUuid>:
   24f2c:	2a512a52                                         R*

00024f2e <attGlfChUuid>:
   24f2e:	2a502a51                                         Q*

00024f30 <attPnpChUuid>:
   24f30:	2a4f2a50                                         P*

00024f32 <attSiwChUuid>:
   24f32:	2a4e2a4f                                         O*

00024f34 <attHidPmChUuid>:
   24f34:	2a4d2a4e                                         N*

00024f36 <attHidRepChUuid>:
   24f36:	2a4c2a4d                                         M*

00024f38 <attHidcpChUuid>:
   24f38:	2a4b2a4c                                         L*

00024f3a <attHidRmChUuid>:
   24f3a:	2a4a2a4b                                         K*

00024f3c <attHidiChUuid>:
   24f3c:	2a322a4a                                         J*

00024f3e <attHidBkoChUuid>:
   24f3e:	2a222a32                                         2*

00024f40 <attHidBkiChUuid>:
   24f40:	2a212a22                                         "*

00024f42 <attHidBmiChUuid>:
   24f42:	2a492a21                                         !*

00024f44 <attBpfChUuid>:
   24f44:	2a482a49                                         I*

00024f46 <attSuacChUuid>:
   24f46:	2a472a48                                         H*

00024f48 <attSnacChUuid>:
   24f48:	2a462a47                                         G*

00024f4a <attNaChUuid>:
   24f4a:	2a452a46                                         F*

00024f4c <attUasChUuid>:
   24f4c:	2a442a45                                         E*

00024f4e <attAncpChUuid>:
   24f4e:	2a432a44                                         D*

00024f50 <attAcChUuid>:
   24f50:	2a422a43                                         C*

00024f52 <attAcbmChUuid>:
   24f52:	2a412a42                                         B*

00024f54 <attRsChUuid>:
   24f54:	2a402a41                                         A*

00024f56 <attRcpChUuid>:
   24f56:	2a3f2a40                                         @*

00024f58 <attAsChUuid>:
   24f58:	2a3e2a3f                                         ?*

00024f5a <attNwaChUuid>:
   24f5a:	2a3d2a3e                                         >*

00024f5c <attStrChUuid>:
   24f5c:	2a3c2a3d                                         =*

00024f5e <attStcChUuid>:
   24f5e:	2a3b2a3c                                         <*

00024f60 <attSrChUuid>:
   24f60:	2a3a2a3b                                         ;*

00024f62 <attRemChUuid>:
   24f62:	2a392a3a                                         :*

00024f64 <attHrcpChUuid>:
   24f64:	2a382a39                                         9*

00024f66 <attBslChUuid>:
   24f66:	2a372a38                                         8*

00024f68 <attHrmChUuid>:
   24f68:	2a362a37                                         7*

00024f6a <attIcpChUuid>:
   24f6a:	2a352a36                                         6*

00024f6c <attBpmChUuid>:
   24f6c:	2a342a35                                         5*

00024f6e <attGlmcChUuid>:
   24f6e:	2a332a34                                         4*

00024f70 <attHbmiChUuid>:
   24f70:	2a312a33                                         3*

00024f72 <attVidChUuid>:
   24f72:	2a302a31                                         1*

00024f74 <attP3dChUuid>:
   24f74:	2a2f2a30                                         0*

00024f76 <attP2dChUuid>:
   24f76:	2a2e2a2f                                         /*

00024f78 <attLongChUuid>:
   24f78:	2a2d2a2e                                         .*

00024f7a <attLatChUuid>:
   24f7a:	2a2c2a2d                                         -*

00024f7c <attElChUuid>:
   24f7c:	2a2b2a2c                                         ,*

00024f7e <attCtChUuid>:
   24f7e:	2a2a2a2b                                         +*

00024f80 <attIeeeChUuid>:
   24f80:	2a292a2a                                         **

00024f82 <attMfnsChUuid>:
   24f82:	2a282a29                                         )*

00024f84 <attSrsChUuid>:
   24f84:	2a272a28                                         (*

00024f86 <attHrsChUuid>:
   24f86:	2a262a27                                         '*

00024f88 <attFrsChUuid>:
   24f88:	2a252a26                                         &*

00024f8a <attSnsChUuid>:
   24f8a:	2a242a25                                         %*

00024f8c <attMnsChUuid>:
   24f8c:	2a232a24                                         $*

00024f8e <attSidChUuid>:
   24f8e:	2a202a23                                         #*

00024f90 <attTfahChUuid>:
   24f90:	2a1f2a20                                          *

00024f92 <attTcelChUuid>:
   24f92:	2a1e2a1f                                         .*

00024f94 <attItChUuid>:
   24f94:	2a1d2a1e                                         .*

00024f96 <attTtChUuid>:
   24f96:	2a1c2a1d                                         .*

00024f98 <attTmChUuid>:
   24f98:	2a1b2a1c                                         .*

00024f9a <attBlsChUuid>:
   24f9a:	2a1a2a1b                                         .*

00024f9c <attBpsChUuid>:
   24f9c:	2a192a1a                                         .*

00024f9e <attBlChUuid>:
   24f9e:	2a182a19                                         .*

00024fa0 <attGlmChUuid>:
   24fa0:	2a172a18                                         .*

00024fa2 <attTusChUuid>:
   24fa2:	2a162a17                                         .*

00024fa4 <attTucpChUuid>:
   24fa4:	2a152a16                                         .*

00024fa6 <attTbChUuid>:
   24fa6:	2a142a15                                         .*

00024fa8 <attRtiChUuid>:
   24fa8:	2a132a14                                         .*

00024faa <attTsChUuid>:
   24faa:	2a122a13                                         .*

00024fac <attTaChUuid>:
   24fac:	2a112a12                                         .*

00024fae <attTdstChUuid>:
   24fae:	2a102a11                                         .*

00024fb0 <attStzChUuid>:
   24fb0:	2a0f2a10                                         .*

00024fb2 <attLtiChUuid>:
   24fb2:	2a0e2a0f                                         .*

00024fb4 <attTzChUuid>:
   24fb4:	2a0d2a0e                                         .*

00024fb6 <attDstoChUuid>:
   24fb6:	2a0c2a0d                                         .*

00024fb8 <attEt256ChUuid>:
   24fb8:	2a0b2a0c                                         .*

00024fba <attEt100ChUuid>:
   24fba:	2a0a2a0b                                         .*

00024fbc <attDdtChUuid>:
   24fbc:	2a092a0a                                         .*

00024fbe <attDwChUuid>:
   24fbe:	2a082a09                                         .*

00024fc0 <attDtChUuid>:
   24fc0:	2a072a08                                         .*

00024fc2 <attTxpChUuid>:
   24fc2:	2a062a07                                         .*

00024fc4 <attAlChUuid>:
   24fc4:	2a052a06                                         .*

00024fc6 <attScChUuid>:
   24fc6:	2a042a05                                         .*

00024fc8 <attPpcpChUuid>:
   24fc8:	2a032a04                                         .*

00024fca <attRaChUuid>:
   24fca:	2a022a03                                         .*

00024fcc <attPpfChUuid>:
   24fcc:	2a012a02                                         .*

00024fce <attApChUuid>:
   24fce:	2a002a01                                         .*

00024fd0 <attDnChUuid>:
   24fd0:	29082a00                                         .*

00024fd2 <attHidRimUuid>:
   24fd2:	29072908                                         .)

00024fd4 <attHidErmUuid>:
   24fd4:	29062907                                         .)

00024fd6 <attValRangeUuid>:
   24fd6:	29052906                                         .)

00024fd8 <attAggFmtUuid>:
   24fd8:	29042905                                         .)

00024fda <attChPresFmtUuid>:
   24fda:	29032904                                         .)

00024fdc <attSrvChCfgUuid>:
   24fdc:	29022903                                         .)

00024fde <attCliChCfgUuid>:
   24fde:	29012902                                         .)

00024fe0 <attChUserDescUuid>:
   24fe0:	29002901                                         .)

00024fe2 <attChExtUuid>:
   24fe2:	28032900                                         .)

00024fe4 <attChUuid>:
   24fe4:	28022803                                         .(

00024fe6 <attIncUuid>:
   24fe6:	28012802                                         .(

00024fe8 <attSecSvcUuid>:
   24fe8:	28002801                                         .(

00024fea <attPrimSvcUuid>:
   24fea:	181c2800                                         .(

00024fec <attUdsSvcUuid>:
   24fec:	1822181c                                         ..

00024fee <attPlxsSvcUuid>:
   24fee:	18131822                                         ".

00024ff0 <attSpsSvcUuid>:
   24ff0:	18121813                                         ..

00024ff2 <attHidSvcUuid>:
   24ff2:	18111812                                         ..

00024ff4 <attAnsSvcUuid>:
   24ff4:	18101811                                         ..

00024ff6 <attBpsSvcUuid>:
   24ff6:	180f1810                                         ..

00024ff8 <attBasSvcUuid>:
   24ff8:	180e180f                                         ..

00024ffa <attPassSvcUuid>:
   24ffa:	180d180e                                         ..

00024ffc <attHrsSvcUuid>:
   24ffc:	180c180d                                         ..

00024ffe <attWdsSvcUuid>:
   24ffe:	180b180c                                         ..

00025000 <attNwaSvcUuid>:
   25000:	180a180b                                         ..

00025002 <attDisSvcUuid>:
   25002:	1809180a                                         ..

00025004 <attHtsSvcUuid>:
   25004:	18081809                                         ..

00025006 <attGlsSvcUuid>:
   25006:	18071808                                         ..

00025008 <attNdcsSvcUuid>:
   25008:	18061807                                         ..

0002500a <attRtusSvcUuid>:
   2500a:	18051806                                         ..

0002500c <attCtsSvcUuid>:
   2500c:	18041805                                         ..

0002500e <attTpsSvcUuid>:
   2500e:	18031804                                         ..

00025010 <attLlsSvcUuid>:
   25010:	18021803                                         ..

00025012 <attIasSvcUuid>:
   25012:	18011802                                         ..

00025014 <attGattSvcUuid>:
   25014:	18001801                                         ..

00025016 <attGapSvcUuid>:
   25016:	00001800                                         ..

00025018 <attcSendReqTbl>:
   25018:	00000000 0000cb47 0000cc65 0000cc65     ....G...e...e...
   25028:	0000cc65 0000ca5d 0000cc65 0000ca5d     e...]...e...]...
   25038:	0000cc65 0000ca5d 0000cb79 0000cbb7     e...]...y.......
   25048:	0000ca5d                                ]...

0002504c <attcFcnIf>:
   2504c:	0000cafd 0000c501 0000cda5 0000cce9     ................

0002505c <attcProcRspTbl>:
   2505c:	0000cea1 0000cf95 0000cecd 0000d289     ................
   2506c:	0000cecd 0000cf8d 0000d2fb 0000cf8d     ................
   2507c:	0000cecd 0000cf8f 00000000 0000d4af     ................
   2508c:	0000cf8f                                ....

00025090 <attsIndFcnIf>:
   25090:	0000c505 0000d619 0000d633 0000d7d9     ........3.......

000250a0 <attsMinPduLen>:
   250a0:	07050300 05050305 05030305 01000002     ................
   250b0:	0000000f                                ....

000250b4 <attsFcnIf>:
   250b4:	0000d93b 0000d8cd 0000d8d9 0000d9c9     ;...............
   250c4:	00002801                                .(..

000250c8 <dmAdvAct>:
   250c8:	0000ed6d 0000ed8d 0000edad 0000edd1     m...............
   250d8:	0000eccd 0000eea1 0000edf5              ............

000250e4 <dmAdvFcnIf>:
   250e4:	0000ed2d 0000edf9 0000eccf              -...........

000250f0 <dmAdvPrivAct>:
   250f0:	0000efa1 0000f005 0000f051 0000f089     ........Q.......
   25100:	0000f039 0000eff5                       9.......

00025108 <dmAdvPrivFcnIf>:
   25108:	0000f071 0000faeb 0000ef39              q.......9...

00025114 <dmConnSpecDefaults>:
   25114:	00280018 07d00000 00000000              ..(.........

00025120 <dmConnFcnIf>:
   25120:	0000f165 0000f39d 0000f435              e.......5...

0002512c <dmConn2FcnIf>:
   2512c:	0000fae9 0000f271 0000f44d              ....q...M...

00025138 <dmConnActSetMain>:
   25138:	0000f149 0000f15d 0000f4e1 0000f54d     I...].......M...
   25148:	0000f55b 0000f14b                       [...K...

00025150 <dmConnStateTbl>:
   25150:	00001001 00002002 00000000 00000000     ..... ..........
   25160:	00002303 00000000 00010000 00011104     .#..............
   25170:	00010001 00010001 02030300 00010300     ................
   25180:	00010001 21000002 00020002 00020002     .......!........
   25190:	24000002 24002303 00020002 00030002     ...$.#.$........
   251a0:	00030104 22031203 25031303 00030003     ......."...%....
   251b0:	05030400 05030003 00040004 00040004     ................
   251c0:	00040004 04000004 04000104 00040004     ................
   251d0:	00000004                                ....

000251d4 <dmDevFcnIf>:
   251d4:	0000fae9 0000f9c5 0000fa29              ........)...

000251e0 <dmHciToIdTbl>:
   251e0:	03030307 04020303 04040404 05050505     ................
   251f0:	07070705 06060607 05060606 07040405     ................
   25200:	04070407 04050504 09090904 00000202     ................
   25210:	070b0b0b 00020002 0000000a              ............

0002521c <dmFcnDefault>:
   2521c:	0000fae9 0000faeb 0000faeb              ............

00025228 <dmEvtCbackLen>:
   25228:	00040004 000c0004 00040004 0024001c     ..............$.
   25238:	000e000a 00040006 00040006 00220006     ..............".
   25248:	00080010 00240006 00140064 00040006     ......$.d.......
   25258:	0006000a 00060006 000c000c 000e0006     ................
   25268:	0008000e 000a0006 000a0006 000a0006     ................
   25278:	0004000c 00200004 00060006 00060016     ...... .........
   25288:	00100010 00440004 00040046              ......D.F...

00025294 <dmPrivAct>:
   25294:	0000fcc3 0000fc3d 0000fc75 0000fc9d     ....=...u.......
   252a4:	0000fcb5 0000fd25 0000fcb9              ....%.......

000252b0 <dmPrivFcnIf>:
   252b0:	0000fc29 0000fd39 0000fc15              )...9.......

000252bc <dmScanAct>:
   252bc:	00010091 00010109 00010125              ........%...

000252c8 <dmScanFcnIf>:
   252c8:	0001005d 00010129 00010049              ]...)...I...

000252d4 <dmSecFcnIf>:
   252d4:	0000fae9 000102dd 00010205 d4f6493f     ............?I..
   252e4:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   252f4:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   25304:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   25314:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   25324:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   25334:	2430ed8f d08e1c74 8bd28915              ..0$t.......

00025340 <dmSecLescFcnIf>:
   25340:	0000fae9 0000faeb 00010455              ........U...

0002534c <smpPktLenTbl>:
   2534c:	11070700 0b110211 02110811 00021141     ............A...

0002535c <CSWTCH.23>:
   2535c:	000262b4 00026618 000262c1 000262d0     .b...f...b...b..
   2536c:	000262dd 000262ee 000262f6 00026309     .b...b...b...c..
   2537c:	00026319 0002632b 00026339 00026346     .c..+c..9c..Fc..
   2538c:	00026358 00026369 0002637a 00026386     Xc..ic..zc...c..
   2539c:	0002638f 0002639a 000263a4 000263b0     .c...c...c...c..
   253ac:	000263b8 000263c9 000263db 000263ed     .c...c...c...c..
   253bc:	000263fa 00026406 00026412 00026420     .c...d...d.. d..
   253cc:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

000253dc <smpScF5Key>:
   253dc:	656c7462                                btle

000253e0 <smpiScSmIf>:
   253e0:	00025480 00025648 00025637              .T..HV..7V..

000253ec <CSWTCH.2>:
   253ec:	0002643b 0002661a 00026442 00026450     ;d...f..Bd..Pd..
   253fc:	0002645b 00026465 00026473 00026483     [d..ed..sd...d..
   2540c:	0002648f 0002649e 000264ad 000264be     .d...d...d...d..
   2541c:	000264cc 000264d6 000264df 000264e9     .d...d...d...d..
   2542c:	000264f4 00026500 00026510 00026431     .d...e...e..1d..
   2543c:	00026520 0002652f 00026540 0002654e      e../e..@e..Ne..
   2544c:	0002655b 00026568 0002657a 00026587     [e..he..ze...e..
   2545c:	00026594 000265a1 000265ac 000265b8     .e...e...e...e..
   2546c:	000265c9 000265da 000265e5 000265ef     .e...e...e...e..
   2547c:	000265fa                                .e..

00025480 <smpiScStateTbl>:
   25480:	00025622 0002561c 00025613 0002560d     "V...V...V...V..
   25490:	00025607 000255fb 000255f5 000255ef     .V...U...U...U..
   254a0:	000255e9 000255e3 000255dd 000255d1     .U...U...U...U..
   254b0:	000255cb 000255c5 000255bf 000255b9     .U...U...U...U..
   254c0:	000255b0 000255aa 000255a4 0002559e     .U...U...U...U..
   254d0:	00025598 00025592 0002558c 00025586     .U...U...U...U..
   254e0:	00025580 0002557a 00025574 0002556e     .U..zU..tU..nU..
   254f0:	00025568 00025562 0002555c 00025556     hU..bU..\U..VU..
   25500:	00025550 00025547 00025538 00025529     PU..GU..8U..)U..
   25510:	00025514                                .U..

00025514 <smpiScStateTblAttempts>:
   25514:	060b000f 01010a24 01000a0d 07010003     ....$...........
   25524:	00000024 15230600                                $....

00025529 <smpiScStateTblKeyDist>:
   25529:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

00025538 <smpiScStateTblEncrypt>:
   25538:	09142308 22030200 03001c00 0b000000              .#.....".......

00025547 <smpiScStateTblStkCalc>:
   25547:	0d13220b 00000924 12210b00                       ."..$....

00025550 <smpiScStateTblCnfVerCalc2>:
   25550:	0012210b 200b0000                                .!....

00025556 <smpiScStateTblCnfVerCalc1>:
   25556:	0008200b 1f060000                                . ....

0002555c <smpiScStateTblPairRand>:
   2555c:	00071f06 1e060000                                ......

00025562 <smpiScStateTblPairCnf>:
   25562:	00111e06 1d0b0000                                ......

00025568 <smpiScStateTblCnfCalc2>:
   25568:	00061d0b 1c0b0000                                ......

0002556e <smpiScStateTblCnfCalc1>:
   2556e:	00051c0b 1b040000                                ......

00025574 <smpiScStateTblLegacyPin>:
   25574:	00041b04 22060000                                ......

0002557a <smpiScStateTblVerifyDHCheck>:
   2557a:	00302206 191b0000                                ."0...

00025580 <smpiScStateTblDhCalcF6Eb>:
   25580:	002f191b 181b0000                                ../...

00025586 <smpiScStateTblDhCalcF6Ea>:
   25586:	002e181b 171b0000                                ......

0002558c <smpiScStateTblCalcF5LTK>:
   2558c:	002d171b 161b0000                                ..-...

00025592 <smpiScStateTblCalcF5MacKey>:
   25592:	002c161b 151b0000                                ..,...

00025598 <smpiScStateTblCalcF5TKey>:
   25598:	002b151b 14180000                                ..+...

0002559e <smpiScStateTblCalcDHKey>:
   2559e:	002a1418 13060000                                ..*...

000255a4 <smpiScStateTblOobWaitRand>:
   255a4:	00281306 121b0000                                ..(...

000255aa <smpiScStateTblOobSendRand>:
   255aa:	0027121b 0c190000                                ..'...

000255b0 <smpiScStateTblPasskeyRepeat>:
   255b0:	1a210c19 00002913 25101b00                       ..!..)...

000255b9 <smpiScStateTblPasskeyCheck>:
   255b9:	0025101b 0f060000                                ..%...

000255bf <smpiScStateTblPasskeyRand>:
   255bf:	00220f06 0e060000                                .."...

000255c5 <smpiScStateTblPasskeyCnf>:
   255c5:	00240e06 0d1b0000                                ..$...

000255cb <smpiScStateTblPasskeyCalc>:
   255cb:	00230d1b 0b060000                                ..#...

000255d1 <smprScStateTblPasskeyKeypress>:
   255d1:	161f0b06 0c04200b 00000021              ..... ..!...

000255dd <smpiScStateTblJwNcWaitUser>:
   255dd:	00291315 0a1b0000                                ..)...

000255e3 <smpiScStateTblJwNcCheck2>:
   255e3:	001d0a1b 091b0000                                ......

000255e9 <smpiScStateTblJwNcCheck1>:
   255e9:	001c091b 08060000                                ......

000255ef <smpiScStateTblJwNcRand>:
   255ef:	001b0806 07060000                                ......

000255f5 <smpiScStateTblJwNcWaitCnf>:
   255f5:	001a0706 06120000                                ......

000255fb <smpiScStateTblAuthSelect>:
   255fb:	13190612 11141e0b 00000026              ........&...

00025607 <smpiScStateTblPubKey>:
   25607:	00180506 04040000                                ......

0002560d <smpiScStateTblLescPin>:
   2560d:	00170404 03100000                                ......

00025613 <smpiScStateTblModeSelect>:
   25613:	11000310 0000001a 10020600                       .........

0002561c <smpiScStateTblPairRsp>:
   2561c:	00100206 01010000                                ......

00025622 <smpiScStateTblIdle>:
   25622:	0a0d0101 00030100 0f00060e 0f000007     ................
   25632:	00000000 02000a00                                .....

00025637 <smpiScStateTblCommon>:
   25637:	0702000a 00030200 02000f03 00000000     ................
	...

00025648 <smpiScActionTbl>:
   25648:	00011c81 0001149b 000114ad 000114c3     ................
   25658:	00011d43 00011d65 00011d6d 00011db7     C...e...m.......
   25668:	00011ddb 00012015 00012039 00012041     ..... ..9 ..A ..
   25678:	00012063 00012235 000122a5 000122b9     c ..5"..."..."..
   25688:	000122e3 00012349 0001239f 00012401     ."..I#...#...$..
   25698:	00012445 000124c9 000124f7 00012521     E$...$...$..!%..
   256a8:	0001251d 0001252b 00012561 0001258d     .%..+%..a%...%..
   256b8:	000125af 0001161b 0001153d 0001165f     .%......=..._...
   256c8:	00011695 000125eb 00012665 000126a5     .....%..e&...&..
   256d8:	000126ab 000126af 000126ff 00012761     .&...&...&..a'..
   256e8:	000127b7 000116d5 00011749 000117a9     .'......I.......
   256f8:	00011819 00011889 000118f7 000127d9     .............'..
   25708:	00012803                                .(..

0002570c <smpiSmIf>:
   2570c:	00025718 000257dc 000257ca              .W...W...W..

00025718 <smpiStateTbl>:
   25718:	000257b5 000257af 000257a9 000257a3     .W...W...W...W..
   25728:	0002579d 00025797 00025791 0002578b     .W...W...W...W..
   25738:	00025785 0002577c 00025770 00025761     .W..|W..pW..aW..
   25748:	0002574c                                LW..

0002574c <smpiStateTblAttempts>:
   2574c:	060b000f 01010a0c 01000a0d 07010003     ................
   2575c:	0000000c 150b0600                                .....

00025761 <smpiStateTblKeyDist>:
   25761:	0c150b06 000e160b 000b030c 08000000              ...............

00025770 <smpiStateTblEncrypt>:
   25770:	09140b08 0a030200 00000000              ............

0002577c <smpiStateTblStkCalc>:
   2577c:	0d130a0b 0000090c 12090b00                       .........

00025785 <smpiStateTblCnfVerCalc2>:
   25785:	0012090b 080b0000                                ......

0002578b <smpiStateTblCnfVerCalc1>:
   2578b:	0008080b 07060000                                ......

00025791 <smpiStateTblPairRand>:
   25791:	00070706 06060000                                ......

00025797 <smpiStateTblPairCnf>:
   25797:	00110606 050b0000                                ......

0002579d <smpiStateTblCnfCalc2>:
   2579d:	0006050b 040b0000                                ......

000257a3 <smpiStateTblCnfCalc1>:
   257a3:	0005040b 03040000                                ......

000257a9 <smpiStateTblPin>:
   257a9:	00040304 02060000                                ......

000257af <smpiStateTblPairRsp>:
   257af:	00100206 01010000                                ......

000257b5 <smpiStateTblIdle>:
   257b5:	0a0d0101 00030100 0f00060e 0f000007     ................
   257c5:	00000000 02000a00                                .....

000257ca <smpiStateTblCommon>:
   257ca:	0702000a 00030200 02000f03 00000000     ................
	...

000257dc <smpiActionTbl>:
   257dc:	00011c81 00011cb5 00011cdb 00011d03     ................
   257ec:	00011d43 00011d65 00011d6d 00011db7     C...e...m.......
   257fc:	00011ddb 00012015 00012039 00012041     ..... ..9 ..A ..
   2580c:	00012063 00012235 000122a5 000122b9     c ..5"..."..."..
   2581c:	000122e3 00012349 0001239f 00012401     ."..I#...#...$..
   2582c:	00012445 000124c9 000124f7              E$...$...$..

00025838 <smprScSmIf>:
   25838:	000258d8 00025ab0 00025a9e              .X...Z...Z..

00025844 <CSWTCH.2>:
   25844:	0002660f 00026616 00026625 00026633     .f...f..%f..3f..
   25854:	00026605 0002663d 0002664b 00026658     .f..=f..Kf..Xf..
   25864:	00026669 00026678 00026689 00026605     if..xf...f...f..
   25874:	00026697 000266a5 000266af 000266b9     .f...f...f...f..
   25884:	000266c4 000266d0 000266e0 000266f0     .f...f...f...f..
   25894:	00026605 00026700 0002670f 00026720     .f...g...g.. g..
   258a4:	0002672e 0002673b 00026748 00026755     .g..;g..Hg..Ug..
   258b4:	00026762 0002676f 0002677c 00026788     bg..og..|g...g..
   258c4:	00026799 000267aa 000267b5 000267bf     .g...g...g...g..
   258d4:	000267ca                                .g..

000258d8 <smprScStateTbl>:
   258d8:	00025a83 00025a7d 00025a74 00025a68     .Z..}Z..tZ..hZ..
   258e8:	00025a6e 00025a5c 00025a56 00025a50     nZ..\Z..VZ..PZ..
   258f8:	00025a4a 00025a44 00025a35 00025a2f     JZ..DZ..5Z../Z..
   25908:	00025a29 00025a23 00025a1d 00025a17     )Z..#Z...Z...Z..
   25918:	00025a0e 00025a02 00025a08 000259fc     .Z...Z...Z...Y..
   25928:	000259f6 000259f0 000259ea 000259e4     .Y...Y...Y...Y..
   25938:	000259de 000259d8 000259cf 000259c6     .Y...Y...Y...Y..
   25948:	000259c0 000259ba 000259b4 000259ae     .Y...Y...Y...Y..
   25958:	000259a8 0002599f 00025990 00025981     .Y...Y...Y...Y..
   25968:	0002596c                                lY..

0002596c <smprScStateTblAttempts>:
   2596c:	060e000f 00050f24 01000a10 07010003     ....$...........
   2597c:	00000024 33230600                                $....

00025981 <smprScStateTblKeyDist>:
   25981:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

00025990 <smprScStateTblEncrypt>:
   25990:	09322308 22030200 03001c00 0b000000              .#2....".......

0002599f <smprScStateTblStkCalc>:
   2599f:	0d31220b 00000c24 30210b00                       ."1.$....

000259a8 <smprStateTblCnfVerCalc2>:
   259a8:	0030210b 200b0000                                .!0...

000259ae <smprStateTblCnfVerCalc1>:
   259ae:	000b200b 1f060000                                . ....

000259b4 <smprStateTblPairRand>:
   259b4:	000a1f06 1e0b0000                                ......

000259ba <smprStateTblCnfCalc2>:
   259ba:	00091e0b 1d0b0000                                ......

000259c0 <smprStateTblCnfCalc1>:
   259c0:	00081d0b 1c040000                                ......

000259c6 <smprStateTblPinPair2>:
   259c6:	06071c04 00002f1c 051b0400                       ...../...

000259cf <smprStateTblPinPair1>:
   259cf:	06051b04 0000151b 2e221b00                       .........

000259d8 <smprScStateTblDhCalcF6Eb>:
   259d8:	002e221b 191b0000                                ."....

000259de <smprScStateTblDhCalcF6Ea>:
   259de:	002d191b 181b0000                                ..-...

000259e4 <smprScStateTblCalcF5LTK>:
   259e4:	002c181b 171b0000                                ..,...

000259ea <smprScStateTblCalcF5MacKey>:
   259ea:	002b171b 161b0000                                ..+...

000259f0 <smprScStateTblCalcF5TKey>:
   259f0:	002a161b 15180000                                ..*...

000259f6 <smprScStateTblCalcDHKey>:
   259f6:	00291518 14060000                                ..)...

000259fc <smprScStateTblWaitDhCheck>:
   259fc:	00281406 131b0000                                ..(...

00025a02 <smprScStateTblOobSendRand>:
   25a02:	0026131b 11060000                                ..&...

00025a08 <smprScStateTblOobWaitRand>:
   25a08:	00251106 0c190000                                ..%...

00025a0e <smprScStateTblPasskeyRepeat>:
   25a0e:	1a000c19 00002713 23101b00                       .....'...

00025a17 <smprScStateTblPasskeyCheck>:
   25a17:	0023101b 0f060000                                ..#...

00025a1d <smprScStateTblPasskeyRand>:
   25a1d:	00220f06 0e1b0000                                .."...

00025a23 <smprScStateTblPasskeyCalc>:
   25a23:	00210e1b 0d060000                                ..!...

00025a29 <smprScStateTblPasskeyWaitCnf>:
   25a29:	001e0d06 0d040000                                ......

00025a2f <smprScStateTblPassWaitAuthRsp>:
   25a2f:	001f0d04 0a060000                                ......

00025a35 <smprScStateTblPassKeyKeypress>:
   25a35:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

00025a44 <smprScStateTblJwNcWaitUser>:
   25a44:	00271315 091b0000                                ..'...

00025a4a <smprScStateTblJwNcCalcG2>:
   25a4a:	0019091b 08060000                                ......

00025a50 <smprScStateTblJwNcWaitRand>:
   25a50:	00180806 071b0000                                ......

00025a56 <smprScStateTblJwNcSetup>:
   25a56:	0017071b 06120000                                ......

00025a5c <smprScStateTblAuthSelect>:
   25a5c:	13160612 12141a0a 00000024              ........$...

00025a68 <smprScStateTblPubKey>:
   25a68:	00040506 03040000                                ......

00025a6e <smprScStateTblLescPin>:
   25a6e:	00060304 04100000                                ......

00025a74 <smprScStateTblModeSelect>:
   25a74:	11000410 0000001a 14020200                       .........

00025a7d <smprScStateTblApiPairRsp>:
   25a7d:	00140202 00050000                                ......

00025a83 <smprScStateTblIdle>:
   25a83:	0a100005 00080100 12000912 07130106     ................
   25a93:	00031100 00000f01 0a000000                       ...........

00025a9e <smprScStateTblCommon>:
   25a9e:	0702000a 00030200 02000f03 00000000     ................
	...

00025ab0 <smprScActionTbl>:
   25ab0:	00011c81 0001149b 000114ad 000114c3     ................
   25ac0:	00012bcd 00011d1b 00012b7d 00011d43     .+......}+..C...
   25ad0:	00011d65 00011d6d 00011db7 00011ddb     e...m...........
   25ae0:	00012015 00012063 00012041 00012039     . ..c ..A ..9 ..
   25af0:	00012869 00012893 0001289f 000128a7     i(...(...(...(..
   25b00:	00012919 000129a9 00012be3 00012c25     .)...)...+..%,..
   25b10:	00012c2b 0001161b 0001153d 0001165f     +,......=..._...
   25b20:	00011695 00012c4b 00012c9d 00012cb3     ....K,...,...,..
   25b30:	00012c5b 00012cc9 00012ccd 00012d09     [,...,...,...-..
   25b40:	00012d73 00012d7b 00012de9 00012e41     s-..{-...-..A...
   25b50:	00012e59 00011749 000117a9 00011819     Y...I...........
   25b60:	00011889 000118f7 00012e7b 000129cb     ........{....)..
   25b70:	000129ed 00012a49 00012b11 00012b53     .)..I*...+..S+..
   25b80:	00012aa9                                .*..

00025b84 <dmConnActSetMaster>:
   25b84:	00011a69 000119e5 000119e9 000119f1     i...............

00025b94 <gapCar>:
   25b94:	00024f2a 00000000                       *O......

00025b9c <gapRpao>:
   25b9c:	00024f14 00000000                       .O......

00025ba4 <calc128Zeros>:
	...

00025bb4 <crc32Table>:
   25bb4:	00000000 77073096 ee0e612c 990951ba     .....0.w,a...Q..
   25bc4:	076dc419 706af48f e963a535 9e6495a3     ..m...jp5.c...d.
   25bd4:	0edb8832 79dcb8a4 e0d5e91e 97d2d988     2......y........
   25be4:	09b64c2b 7eb17cbd e7b82d07 90bf1d91     +L...|.~.-......
   25bf4:	1db71064 6ab020f2 f3b97148 84be41de     d.... .jHq...A..
   25c04:	1adad47d 6ddde4eb f4d4b551 83d385c7     }......mQ.......
   25c14:	136c9856 646ba8c0 fd62f97a 8a65c9ec     V.l...kdz.b...e.
   25c24:	14015c4f 63066cd9 fa0f3d63 8d080df5     O\...l.cc=......
   25c34:	3b6e20c8 4c69105e d56041e4 a2677172     . n;^.iL.A`.rqg.
   25c44:	3c03e4d1 4b04d447 d20d85fd a50ab56b     ...<G..K....k...
   25c54:	35b5a8fa 42b2986c dbbbc9d6 acbcf940     ...5l..B....@...
   25c64:	32d86ce3 45df5c75 dcd60dcf abd13d59     .l.2u\.E....Y=..
   25c74:	26d930ac 51de003a c8d75180 bfd06116     .0.&:..Q.Q...a..
   25c84:	21b4f4b5 56b3c423 cfba9599 b8bda50f     ...!#..V........
   25c94:	2802b89e 5f058808 c60cd9b2 b10be924     ...(..._....$...
   25ca4:	2f6f7c87 58684c11 c1611dab b6662d3d     .|o/.LhX..a.=-f.
   25cb4:	76dc4190 01db7106 98d220bc efd5102a     .A.v.q... ..*...
   25cc4:	71b18589 06b6b51f 9fbfe4a5 e8b8d433     ...q........3...
   25cd4:	7807c9a2 0f00f934 9609a88e e10e9818     ...x4...........
   25ce4:	7f6a0dbb 086d3d2d 91646c97 e6635c01     ..j.-=m..ld..\c.
   25cf4:	6b6b51f4 1c6c6162 856530d8 f262004e     .Qkkbal..0e.N.b.
   25d04:	6c0695ed 1b01a57b 8208f4c1 f50fc457     ...l{.......W...
   25d14:	65b0d9c6 12b7e950 8bbeb8ea fcb9887c     ...eP.......|...
   25d24:	62dd1ddf 15da2d49 8cd37cf3 fbd44c65     ...bI-...|..eL..
   25d34:	4db26158 3ab551ce a3bc0074 d4bb30e2     Xa.M.Q.:t....0..
   25d44:	4adfa541 3dd895d7 a4d1c46d d3d6f4fb     A..J...=m.......
   25d54:	4369e96a 346ed9fc ad678846 da60b8d0     j.iC..n4F.g...`.
   25d64:	44042d73 33031de5 aa0a4c5f dd0d7cc9     s-.D...3_L...|..
   25d74:	5005713c 270241aa be0b1010 c90c2086     <q.P.A.'..... ..
   25d84:	5768b525 206f85b3 b966d409 ce61e49f     %.hW..o ..f...a.
   25d94:	5edef90e 29d9c998 b0d09822 c7d7a8b4     ...^...)".......
   25da4:	59b33d17 2eb40d81 b7bd5c3b c0ba6cad     .=.Y....;\...l..
   25db4:	edb88320 9abfb3b6 03b6e20c 74b1d29a      ..............t
   25dc4:	ead54739 9dd277af 04db2615 73dc1683     9G...w...&.....s
   25dd4:	e3630b12 94643b84 0d6d6a3e 7a6a5aa8     ..c..;d.>jm..Zjz
   25de4:	e40ecf0b 9309ff9d 0a00ae27 7d079eb1     ........'......}
   25df4:	f00f9344 8708a3d2 1e01f268 6906c2fe     D.......h......i
   25e04:	f762575d 806567cb 196c3671 6e6b06e7     ]Wb..ge.q6l...kn
   25e14:	fed41b76 89d32be0 10da7a5a 67dd4acc     v....+..Zz...J.g
   25e24:	f9b9df6f 8ebeeff9 17b7be43 60b08ed5     o.......C......`
   25e34:	d6d6a3e8 a1d1937e 38d8c2c4 4fdff252     ....~......8R..O
   25e44:	d1bb67f1 a6bc5767 3fb506dd 48b2364b     .g..gW.....?K6.H
   25e54:	d80d2bda af0a1b4c 36034af6 41047a60     .+..L....J.6`z.A
   25e64:	df60efc3 a867df55 316e8eef 4669be79     ..`.U.g...n1y.iF
   25e74:	cb61b38c bc66831a 256fd2a0 5268e236     ..a...f...o%6.hR
   25e84:	cc0c7795 bb0b4703 220216b9 5505262f     .w...G....."/&.U
   25e94:	c5ba3bbe b2bd0b28 2bb45a92 5cb36a04     .;..(....Z.+.j.\
   25ea4:	c2d7ffa7 b5d0cf31 2cd99e8b 5bdeae1d     ....1......,...[
   25eb4:	9b64c2b0 ec63f226 756aa39c 026d930a     ..d.&.c...ju..m.
   25ec4:	9c0906a9 eb0e363f 72076785 05005713     ....?6...g.r.W..
   25ed4:	95bf4a82 e2b87a14 7bb12bae 0cb61b38     .J...z...+.{8...
   25ee4:	92d28e9b e5d5be0d 7cdcefb7 0bdbdf21     ...........|!...
   25ef4:	86d3d2d4 f1d4e242 68ddb3f8 1fda836e     ....B......hn...
   25f04:	81be16cd f6b9265b 6fb077e1 18b74777     ....[&...w.owG..
   25f14:	88085ae6 ff0f6a70 66063bca 11010b5c     .Z..pj...;.f\...
   25f24:	8f659eff f862ae69 616bffd3 166ccf45     ..e.i.b...kaE.l.
   25f34:	a00ae278 d70dd2ee 4e048354 3903b3c2     x.......T..N...9
   25f44:	a7672661 d06016f7 4969474d 3e6e77db     a&g...`.MGiI.wn>
   25f54:	aed16a4a d9d65adc 40df0b66 37d83bf0     Jj...Z..f..@.;.7
   25f64:	a9bcae53 debb9ec5 47b2cf7f 30b5ffe9     S..........G...0
   25f74:	bdbdf21c cabac28a 53b39330 24b4a3a6     ........0..S...$
   25f84:	bad03605 cdd70693 54de5729 23d967bf     .6......)W.T.g.#
   25f94:	b3667a2e c4614ab8 5d681b02 2a6f2b94     .zf..Ja...h].+o*
   25fa4:	b40bbe37 c30c8ea1 5a05df1b 2d02ef8d     7..........Z...-

00025fb4 <amdtpSvcUuid>:
   25fb4:	c72e1011 90730e8a 08c211e1 00002760     ......s.....`'..

00025fc4 <amdtpRxChUuid>:
   25fc4:	c72e0011 90730e8a 08c211e1 00002760     ......s.....`'..

00025fd4 <amdtpTxChUuid>:
   25fd4:	c72e0012 90730e8a 08c211e1 00002760     ......s.....`'..

00025fe4 <amdtpAckChUuid>:
   25fe4:	c72e0013 90730e8a 08c211e1 00002760     ......s.....`'..

00025ff4 <amdtpRx>:
   25ff4:	00025fc4 00000003                       ._......

00025ffc <amdtpTx>:
   25ffc:	00025fd4 00000003                       ._......

00026004 <amdtpTxCcc>:
   26004:	00024fde 00000006                       .O......

0002600c <amdtpAck>:
   2600c:	00025fe4 00000003                       ._......

00026014 <amdtpAckCcc>:
   26014:	00024fde 00000006                       .O......

0002601c <amdtpcMasterCfg>:
   2601c:	00300060 01000fa0                       `.0.....

00026024 <amdtpcSecCfg>:
   26024:	00030209 00000000                       ........

0002602c <amdtpcSmpCfg>:
   2602c:	07030bb8 00000310                       ........

00026034 <amdtpcConnCfg>:
   26034:	00280028 02580000 00000000              (.(...X.....

00026040 <amdtpcDiscCfg>:
   26040:	00000000                                ....

00026044 <amdtpcAppCfg>:
   26044:	00000101                                ....

00026048 <amdtpcCccIndVal>:
   26048:	00000002                                ....

0002604c <amdtpcTxCccNtfVal>:
   2604c:	00000001                                ....

00026050 <amdtpcAckCccNtfVal>:
   26050:	00000001                                ....

00026054 <amdtpcDiscCfgList>:
   26054:	00026048 00000102 0002604c 00000602     H`......L`......
   26064:	00026050 00000802                       P`......

0002606c <attCfg>:
   2606c:	0000000f 041e01e0                       ........

00026074 <smpCfg>:
   26074:	07030bb8 00000310                       ........

0002607c <hciEventMask>:
   2607c:	02008890 20008000                       ....... 

00026084 <hciLeEventMask>:
   26084:	000fffff 00000000                       ........

0002608c <hciEventMaskPage2>:
   2608c:	00800000 00000000                       ........

00026094 <hciEvtParseFcnTbl>:
   26094:	00000000 00018661 00018765 00018871     ....a...e...q...
   260a4:	000188d3 00018989 00000000 000189b7     ................
   260b4:	00018a1b 00018a7b 00018acf 00018b71     ....{.......q...
   260c4:	00018bd1 00018c27 00018c7d 00018cd3     ....'...}.......
   260d4:	00018d35 00018da7 00018de1 00018e39     5...........9...
   260e4:	00018e5d 00018ef3 00018f21 00018f4f     ].......!...O...
   260f4:	00018f7d 00018fb9 00018ff5 00018e83     }...............
   26104:	00018ebb 00019023 00019079 000190cf     ....#...y.......
   26114:	0001913d 0001916b 000191c1 0001926f     =...k.......o...
   26124:	00019331 000193f3 0001942b 00019463     1.......+...c...
   26134:	000194b9 000194fb 00019569 00019597     ........i.......
   26144:	00000000 000198a5 000198bf 0001992d     ............-...
   26154:	0001996d 00000000 00019b13 00000000     m...............
   26164:	00019aed 00019aed 00019aed 00019aed     ................
   26174:	00019aed                                ....

00026178 <hciEvtCbackLen>:
   26178:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   26188:	44460610 06060606 16060c0c 0a08080e     ..FD............
   26198:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   261a8:	04061016 04040404 00000004              ............

000261b4 <gattSc>:
   261b4:	00024fc6 00000000                       .O......

000261bc <gattScCcc>:
   261bc:	00024fde 00000004                       .O......

000261c4 <appReqActCfg>:
   261c4:	00000000                                ....

000261c8 <gapValSvc>:
   261c8:	00021800                                         ..

000261ca <gapLenSvc>:
   261ca:	05020002                                         ..

000261cc <gapValApCh>:
   261cc:	01000502 0005002a                                ....*.

000261d2 <gapLenApCh>:
   261d2:	00020005                                         ..

000261d4 <gapLenAp>:
   261d4:	00000002                                ....

000261d8 <gapValCarCh>:
   261d8:	a6000702 0005002a                                ....*.

000261de <gapLenCarCh>:
   261de:	00010005                                         ..

000261e0 <gapLenCar>:
   261e0:	00000001                                ....

000261e4 <gapValRpaoCh>:
   261e4:	c9000902 0005002a                                ....*.

000261ea <gapLenRpaoCh>:
   261ea:	00010005                                         ..

000261ec <gapLenRpao>:
   261ec:	00000001                                ....

000261f0 <gapList>:
   261f0:	00024fea 000261c8 000261ca 01000002     .O...a...a......
   26200:	00024fe4 000261cc 000261d2 01000005     .O...a...a......
   26210:	00024fce 10009450 000261d4 01000002     .O..P....a......
   26220:	00024fe4 000261d8 000261de 01000005     .O...a...a......
   26230:	00024f2a 10009454 000261e0 01000001     *O..T....a......
   26240:	00024fe4 000261e4 000261ea 01000005     .O...a...a......
   26250:	00024f14 10009458 000261ec 01000001     .O..X....a......

00026260 <gattValSvc>:
   26260:	00021801                                         ..

00026262 <gattLenSvc>:
   26262:	12200002                                         ..

00026264 <gattValScCh>:
   26264:	05001220 0005002a                                 ...*.

0002626a <gattLenScCh>:
   2626a:	00010005                                         ..

0002626c <gattValSc>:
   2626c:	ffff0001                                ....

00026270 <gattLenSc>:
   26270:	00020004                                         ..

00026272 <gattLenScChCcc>:
   26272:	4fea0002                                         ..

00026274 <gattList>:
   26274:	00024fea 00026260 00026262 01000002     .O..`b..bb......
   26284:	00024fe4 00026264 0002626a 01000005     .O..db..jb......
   26294:	00024fc6 0002626c 00026270 00000004     .O..lb..pb......
   262a4:	00024fde 1000945c 00026272 11200002     .O..\...rb.... .
   262b4:	5f495041 52494150 5145525f 49504100     API_PAIR_REQ.API
   262c4:	4e41435f 5f4c4543 00514552 5f495041     _CANCEL_REQ.API_
   262d4:	48545541 5053525f 49504100 4345535f     AUTH_RSP.API_SEC
   262e4:	54495255 45525f59 4d430051 4b505f44     URITY_REQ.CMD_PK
   262f4:	4d430054 41505f44 4e495249 41465f47     T.CMD_PAIRING_FA
   26304:	44454c49 5f4d4400 52434e45 5f545059     ILED.DM_ENCRYPT_
   26314:	4c504d43 5f4d4400 52434e45 5f545059     CMPL.DM_ENCRYPT_
   26324:	4c494146 44004445 4f435f4d 435f4e4e     FAILED.DM_CONN_C
   26334:	45534f4c 46535700 5345415f 504d435f     LOSE.WSF_AES_CMP
   26344:	4e49004c 45535f54 4e5f444e 5f545845     L.INT_SEND_NEXT_
   26354:	0059454b 5f544e49 5f58414d 45545441     KEY.INT_MAX_ATTE
   26364:	5354504d 544e4900 4941505f 474e4952     MPTS.INT_PAIRING
   26374:	504d435f 4e49004c 49545f54 554f454d     _CMPL.INT_TIMEOU
   26384:	4e490054 454c5f54 49004353 4c5f544e     T.INT_LESC.INT_L
   26394:	43414745 4e490059 574a5f54 00434e5f     EGACY.INT_JW_NC.
   263a4:	5f544e49 53534150 0059454b 5f544e49     INT_PASSKEY.INT_
   263b4:	00424f4f 5f495041 52455355 4e4f435f     OOB.API_USER_CON
   263c4:	4d524946 49504100 4553555f 454b5f52     FIRM.API_USER_KE
   263d4:	45525059 41005353 4b5f4950 52505945     YPRESS.API_KEYPR
   263e4:	5f535345 4c504d43 46535700 4343455f     ESS_CMPL.WSF_ECC
   263f4:	504d435f 4e49004c 4b505f54 58454e5f     _CMPL.INT_PK_NEX
   26404:	4e490054 4b505f54 504d435f 5357004c     T.INT_PK_CMPL.WS
   26414:	4d435f46 435f4341 004c504d 435f4844     F_CMAC_CMPL.DH_C
   26424:	4b434548 4941465f 4552554c 555f4900     HECK_FAILURE.I_U
   26434:	6f6e6b6e 49006e77 4c44495f 5f490045     nknown.I_IDLE.I_
   26444:	45444f4d 4c45535f 00544345 454c5f49     MODE_SELECT.I_LE
   26454:	505f4353 49004e49 4255505f 59454b5f     SC_PIN.I_PUB_KEY
   26464:	415f4900 5f485455 454c4553 49005443     .I_AUTH_SELECT.I
   26474:	4e574a5f 41575f43 435f5449 4900464e     _JWNC_WAIT_CNF.I
   26484:	4e574a5f 41525f43 4900444e 4e574a5f     _JWNC_RAND.I_JWN
   26494:	48435f43 5f4b4345 5f490031 434e574a     C_CHECK_1.I_JWNC
   264a4:	4548435f 325f4b43 4a5f4900 5f434e57     _CHECK_2.I_JWNC_
   264b4:	54494157 4553555f 5f490052 4b5f4b50     WAIT_USER.I_PK_K
   264c4:	52505945 00535345 4b505f49 4c41435f     EYPRESS.I_PK_CAL
   264d4:	5f490043 435f4b50 4900464e 5f4b505f     C.I_PK_CNF.I_PK_
   264e4:	444e4152 505f4900 48435f4b 004b4345     RAND.I_PK_CHECK.
   264f4:	4b505f49 5045525f 00544145 4f4f5f49     I_PK_REPEAT.I_OO
   26504:	45535f42 525f444e 00444e41 4f4f5f49     B_SEND_RAND.I_OO
   26514:	41575f42 525f5449 00444e41 41435f49     B_WAIT_RAND.I_CA
   26524:	465f434c 4b545f35 49005945 4c41435f     LC_F5_TKEY.I_CAL
   26534:	35465f43 43414d5f 0059454b 41435f49     C_F5_MACKEY.I_CA
   26544:	465f434c 544c5f35 5f49004b 434c4143     LC_F5_LTK.I_CALC
   26554:	5f36465f 49004145 4c41435f 36465f43     _F6_EA.I_CALC_F6
   26564:	0042455f 45565f49 59464952 5f48445f     _EB.I_VERIFY_DH_
   26574:	43454843 5f49004b 4147454c 505f5943     CHECK.I_LEGACY_P
   26584:	49004e49 464e435f 4c41435f 00315f43     IN.I_CNF_CALC_1.
   26594:	4e435f49 41435f46 325f434c 505f4900     I_CNF_CALC_2.I_P
   265a4:	5f524941 00464e43 41505f49 525f5249     AIR_CNF.I_PAIR_R
   265b4:	00444e41 4e435f49 45565f46 41435f52     AND.I_CNF_VER_CA
   265c4:	315f434c 435f4900 565f464e 435f5245     LC_1.I_CNF_VER_C
   265d4:	5f434c41 5f490032 5f4b5453 434c4143     ALC_2.I_STK_CALC
   265e4:	455f4900 5952434e 49005450 59454b5f     .I_ENCRYPT.I_KEY
   265f4:	5349445f 5f490054 45545441 5354504d     _DIST.I_ATTEMPTS
   26604:	555f5200 6f6e6b6e 52006e77 4c44495f     .R_Unknown.R_IDL
   26614:	5f520045 5f495041 52494150 5053525f     E.R_API_PAIR_RSP
   26624:	4d5f5200 5f45444f 454c4553 52005443     .R_MODE_SELECT.R
   26634:	4255505f 59454b5f 415f5200 5f485455     _PUB_KEY.R_AUTH_
   26644:	454c4553 52005443 4e574a5f 45535f43     SELECT.R_JWNC_SE
   26654:	00505554 574a5f52 575f434e 5f544941     TUP.R_JWNC_WAIT_
   26664:	444e4152 4a5f5200 5f434e57 434c4143     RAND.R_JWNC_CALC
   26674:	0032475f 574a5f52 575f434e 5f544941     _G2.R_JWNC_WAIT_
   26684:	52455355 505f5200 454b5f4b 45525059     USER.R_PK_KEYPRE
   26694:	52005353 5f4b505f 54494157 464e435f     SS.R_PK_WAIT_CNF
   266a4:	505f5200 41435f4b 5200434c 5f4b505f     .R_PK_CALC.R_PK_
   266b4:	444e4152 505f5200 48435f4b 004b4345     RAND.R_PK_CHECK.
   266c4:	4b505f52 5045525f 00544145 4f4f5f52     R_PK_REPEAT.R_OO
   266d4:	45535f42 525f444e 00444e41 4f4f5f52     B_SEND_RAND.R_OO
   266e4:	41575f42 525f5449 00444e41 41575f52     B_WAIT_RAND.R_WA
   266f4:	445f5449 48435f48 004b4345 41435f52     IT_DH_CHECK.R_CA
   26704:	465f434c 4b545f35 52005945 4c41435f     LC_F5_TKEY.R_CAL
   26714:	35465f43 43414d5f 0059454b 41435f52     C_F5_MACKEY.R_CA
   26724:	465f434c 544c5f35 5f52004b 434c4143     LC_F5_LTK.R_CALC
   26734:	5f36465f 52004145 4c41435f 36465f43     _F6_EA.R_CALC_F6
   26744:	0042455f 49505f52 41505f4e 315f5249     _EB.R_PIN_PAIR_1
   26754:	505f5200 505f4e49 5f524941 5f520032     .R_PIN_PAIR_2.R_
   26764:	5f464e43 434c4143 5200315f 464e435f     CNF_CALC_1.R_CNF
   26774:	4c41435f 00325f43 41505f52 525f5249     _CALC_2.R_PAIR_R
   26784:	00444e41 4e435f52 45565f46 41435f52     AND.R_CNF_VER_CA
   26794:	315f434c 435f5200 565f464e 435f5245     LC_1.R_CNF_VER_C
   267a4:	5f434c41 5f520032 5f4b5453 434c4143     ALC_2.R_STK_CALC
   267b4:	455f5200 5952434e 52005450 59454b5f     .R_ENCRYPT.R_KEY
   267c4:	5349445f 5f520054 45545441 5354504d     _DIST.R_ATTEMPTS
   267d4:	00000000                                ....

000267d8 <curve_secp256r1>:
   267d8:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   267f4:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   26804:	a7179e84 bce6faad ffffffff ffffffff     ................
   26814:	00000000 ffffffff d898c296 f4a13945     ............E9..
   26824:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   26834:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   26844:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   26854:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   26864:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   26874:	aa3a93e7 5ac635d8 00021001 00020821     ..:..5.Z....!...
   26884:	000209d1                                ....

00026888 <g_AM_BSP_GPIO_COM_UART_RX>:
   26888:	00000000                                ....

0002688c <g_AM_BSP_GPIO_COM_UART_TX>:
   2688c:	00000000                                ....

00026890 <g_AM_BSP_GPIO_ITM_SWO>:
   26890:	00000007                                ....

00026894 <ccitt_table>:
   26894:	80050000 000a800f 001e801b 80110014     ................
   268a4:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   268b4:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   268c4:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   268d4:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   268e4:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   268f4:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   26904:	00968093 8099009c 808d0088 00828087     ................
   26914:	01868183 8189018c 819d0198 01928197     ................
   26924:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   26934:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   26944:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   26954:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   26964:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   26974:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   26984:	81150110 011a811f 010e810b 81010104     ................
   26994:	03068303 8309030c 831d0318 03128317     ................
   269a4:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   269b4:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   269c4:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   269d4:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   269e4:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   269f4:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   26a04:	83950390 039a839f 038e838b 83810384     ................
   26a14:	82850280 028a828f 029e829b 82910294     ................
   26a24:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   26a34:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   26a44:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   26a54:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   26a64:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   26a74:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   26a84:	02168213 8219021c 820d0208 02028207     ................

00026a94 <am_ble_buffer_patch_data>:
   26a94:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   26aa4:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   26ab4:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   26ac4:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   26ad4:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   26b10:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   26b20:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   26b30:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   26b40:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   26b50:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   26b60:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   26b70:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   26b80:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   26b90:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   26ba0:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   26bb0:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   26bc0:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   26bd0:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   26be0:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   26bf0:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   26c00:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   26c10:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   26c20:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   26c30:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   26c40:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   26c50:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   26c60:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   26c70:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   26c80:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   26c90:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   26ca0:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   26cb0:	8f809011 9812900e 900d3008 30309812     .........0....00
   26cc0:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   26cd0:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   26ce0:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   26cf0:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   26d00:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   26d10:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   26d20:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   26d30:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   26d40:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   26d50:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   26d60:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   26d70:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   26d80:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   26da0:	00000021 00000000 00000001 00000000     !...............
   26db0:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   26dc0:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   26dd0:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   26de0:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   26df0:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   26e00:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   26e10:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   26e20:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   26e30:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   26e40:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   26e50:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   26e60:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   26e70:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   26e80:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   26e90:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   26ea0:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   26eb0:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   26ec0:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   26ed0:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   26ee0:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   26ef0:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   26f00:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   26f10:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   26f20:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   26f30:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   26f40:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   26f50:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   26f60:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   26f70:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   26f80:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   26f90:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   26fa0:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   26fb0:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   26fc0:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   26fd0:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   26fe0:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   26ff0:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   27000:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   27010:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   27020:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   27030:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   27040:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   27050:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   27060:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   27070:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   27080:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   27090:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   270a0:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   270b0:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   270c0:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   270d0:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   270e0:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   270f0:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   27100:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   27110:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   27120:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   27130:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   27140:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   27150:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   27160:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   27170:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   27180:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   27190:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   271a0:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   271b0:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   271c0:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   271d0:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   271e0:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   271f0:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   27200:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   27210:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   27220:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   27230:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   27240:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   27250:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   27260:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   27270:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   27280:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   27290:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   272a0:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   272b0:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   272c0:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   272d0:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   272e0:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   272f0:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   27300:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   27310:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   27320:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   27330:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   27340:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   27350:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   27360:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   27370:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   27380:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   27390:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   273a0:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   273b0:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   273c0:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   273d0:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   273e0:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   273f0:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   27400:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   27410:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   27420:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   27430:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   27440:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   27450:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   27460:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   27470:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   27480:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   27490:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   274a0:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   274b0:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   274c0:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   274d0:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   274e0:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   274f0:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   27500:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   27510:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   27520:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   27530:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   27540:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   27550:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   27560:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   27570:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   27580:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   27590:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   275a0:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   275b0:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   275c0:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   275d0:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   275e0:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   275f0:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   27600:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   27610:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   27620:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   27630:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   27640:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   27650:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   27660:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   27670:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   27680:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   27690:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   276a0:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   276b0:	00010341 50804000 000093a5 00000466     A....@.P....f...
   276c0:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   276d0:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   276e0:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   276f0:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   27700:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   27710:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   27720:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   27730:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   27740:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   27750:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   27760:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   27770:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   27780:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   27790:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   277a0:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   277b0:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   277c0:	00004770 20006780 20006054              pG...g. T`. 

000277cc <am_hal_ble_num_default_patches>:
   277cc:	00000003                                ....

000277d0 <am_ble_performance_copy_patch_data>:
   277d0:	006e1100 00000400 00000000 01c50101     ..n.............
   277e0:	00000039 00000000 00000000 00000000     9...............
   277f0:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   27800:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   27810:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   27820:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   27830:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   27840:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   27850:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   27860:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   27870:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   27880:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   27890:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   278a0:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   278b0:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   278c0:	f000e00a e007fb94 b2c09801 fac7f000     ................
   278d0:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   278e0:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   278f0:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   27900:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   27910:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   27920:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   27930:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   27940:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   27950:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   27960:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   27970:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   27980:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   27990:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   279a0:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   279b0:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   279c0:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   279d0:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   279e0:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   279f0:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   27a00:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   27a10:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   27a20:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   27a30:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   27a40:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   27a50:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   27a60:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   27a70:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   27a80:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   27a90:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   27aa0:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   27ab0:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   27ac0:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   27ad0:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   27ae0:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   27af0:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   27b00:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   27b10:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   27b20:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   27b30:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   27b40:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   27b50:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   27b60:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   27b70:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   27b80:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   27b90:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   27ba0:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   27bb0:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   27bc0:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   27bd0:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   27be0:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   27bf0:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   27c00:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   27c10:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   27c20:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   27c30:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   27c40:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   27c50:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   27c60:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   27c70:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   27c80:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   27c90:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   27ca0:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   27cb0:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   27cc0:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   27cd0:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   27ce0:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   27cf0:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   27d00:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   27d10:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   27d20:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   27d30:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   27d40:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   27d50:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   27d60:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   27d70:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   27d80:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   27d90:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   27da0:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   27db0:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   27dc0:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   27dd0:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   27de0:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   27df0:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   27e00:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   27e10:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   27e20:	00400000 00804580 021e4580 00030000     ..@..E...E......
   27e30:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   27e40:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   27e50:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   27e60:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   27e70:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   27e80:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   27e90:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   27ea0:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   27eb0:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   27ec0:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   27ed0:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   27ee0:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   27ef0:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   27f00:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   27f10:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   27f20:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   27f30:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   27f40:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   27f50:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   27f60:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   27f70:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   27f80:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   27f90:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   27fa0:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   27fb0:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   27fc0:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   27fd0:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   27fe0:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   27ff0:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   28000:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   28010:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   28020:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   28030:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   28040:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   28050:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   28060:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   28070:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   28080:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   28090:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   280a0:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   280b0:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   280c0:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   280d0:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   280e0:	00000001                                ....

000280e4 <am_hal_ble_num_default_patches_b0>:
   280e4:	00000003                                ....

000280e8 <am_hal_cachectrl_defaults>:
   280e8:	00000308                                ....

000280ec <g_ui8Bit76Capabilities>:
   280ec:	02800101 80010180 80800101 80808080     ................
   280fc:	80808080 80808008 01800180 80808080     ................
   2810c:	80808080 01800402 01010401 80808080     ................
   2811c:	00000101                                ....

00028120 <g_ui8NCEtable>:
   28120:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   28130:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   28140:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   28150:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   28160:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   28170:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   28180:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   28190:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   281a0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   281b0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   281c0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   281d0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   281e0:	32221202 43231303                       .."2..#C

000281e8 <g_ui8Inpen>:
   281e8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   281f8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   28208:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   28218:	00003130                                01..

0002821c <g_AM_HAL_GPIO_DISABLE>:
   2821c:	00000003                                ....

00028220 <g_AM_HAL_GPIO_OUTPUT>:
   28220:	00000403                                ....

00028224 <g_ui8nCEpins>:
   28224:	02070707 00080802 01020202 01010101     ................
   28234:	01010101 01010101 01010101 01010101     ................
   28244:	01010101 08010101 01010008 01010101     ................
   28254:	00000101                                ....

00028258 <g_am_hal_mcuctrl_flash_size>:
   28258:	00004000 00008000 00010000 00020000     .@..............
   28268:	00040000 00080000 00100000 00200000     .............. .
   28278:	00180000 00000000 00000000 00000000     ................
	...

00028298 <g_am_hal_mcuctrl_sram_size>:
   28298:	00004000 00008000 00010000 00020000     .@..............
   282a8:	00040000 00080000 00100000 00060000     ................
   282b8:	000c0000 00000000 00000000 00000000     ................
	...

000282d8 <am_hal_pwrctrl_peripheral_control>:
	...
   282e4:	00000001 00000004 00000004 00000002     ................
   282f4:	00000008 00000008 00000004 00000008     ................
   28304:	00000008 00000008 00000008 00000008     ................
   28314:	00000010 00000010 00000010 00000020     ............ ...
   28324:	00000010 00000010 00000040 00000010     ........@.......
   28334:	00000010 00000080 00000004 00000004     ................
   28344:	00000100 00000004 00000004 00000200     ................
   28354:	00000020 00000020 00000400 00000004      ... ...........
   28364:	00000004 00000800 00000040 00000040     ........@...@...
   28374:	00001000 00000080 00000080 00002000     ............. ..
   28384:	00000100 00000100                       ........
