
bin/ble_cordio_power_cycle.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 11 db 01 00 79 db 01 00 1d a7 01 00     .+......y.......
    c010:	7f db 01 00 7f db 01 00 7f db 01 00 00 00 00 00     ................
	...
    c02c:	85 db 01 00 85 db 01 00 00 00 00 00 85 db 01 00     ................
    c03c:	85 db 01 00 85 db 01 00 85 db 01 00 85 db 01 00     ................
    c04c:	85 db 01 00 85 db 01 00 85 db 01 00 85 db 01 00     ................
    c05c:	85 db 01 00 85 db 01 00 85 db 01 00 85 db 01 00     ................
    c06c:	85 db 01 00 af 97 01 00 85 db 01 00 8d 97 01 00     ................
    c07c:	85 db 01 00 85 db 01 00 85 db 01 00 85 db 01 00     ................
    c08c:	85 db 01 00 85 db 01 00 85 db 01 00 85 db 01 00     ................
    c09c:	85 db 01 00 85 db 01 00 85 db 01 00 85 db 01 00     ................
    c0ac:	85 db 01 00 85 db 01 00 85 db 01 00 85 db 01 00     ................
    c0bc:	85 db 01 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcmp>:
    c100:	2a03      	cmp	r2, #3
    c102:	b470      	push	{r4, r5, r6}
    c104:	d922      	bls.n	c14c <memcmp+0x4c>
    c106:	ea40 0301 	orr.w	r3, r0, r1
    c10a:	079b      	lsls	r3, r3, #30
    c10c:	d011      	beq.n	c132 <memcmp+0x32>
    c10e:	7803      	ldrb	r3, [r0, #0]
    c110:	780c      	ldrb	r4, [r1, #0]
    c112:	42a3      	cmp	r3, r4
    c114:	d11d      	bne.n	c152 <memcmp+0x52>
    c116:	440a      	add	r2, r1
    c118:	3101      	adds	r1, #1
    c11a:	e005      	b.n	c128 <memcmp+0x28>
    c11c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c120:	f811 4b01 	ldrb.w	r4, [r1], #1
    c124:	42a3      	cmp	r3, r4
    c126:	d114      	bne.n	c152 <memcmp+0x52>
    c128:	4291      	cmp	r1, r2
    c12a:	d1f7      	bne.n	c11c <memcmp+0x1c>
    c12c:	2000      	movs	r0, #0
    c12e:	bc70      	pop	{r4, r5, r6}
    c130:	4770      	bx	lr
    c132:	680d      	ldr	r5, [r1, #0]
    c134:	6806      	ldr	r6, [r0, #0]
    c136:	42ae      	cmp	r6, r5
    c138:	460c      	mov	r4, r1
    c13a:	4603      	mov	r3, r0
    c13c:	f101 0104 	add.w	r1, r1, #4
    c140:	f100 0004 	add.w	r0, r0, #4
    c144:	d108      	bne.n	c158 <memcmp+0x58>
    c146:	3a04      	subs	r2, #4
    c148:	2a03      	cmp	r2, #3
    c14a:	d8f2      	bhi.n	c132 <memcmp+0x32>
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1de      	bne.n	c10e <memcmp+0xe>
    c150:	e7ec      	b.n	c12c <memcmp+0x2c>
    c152:	1b18      	subs	r0, r3, r4
    c154:	bc70      	pop	{r4, r5, r6}
    c156:	4770      	bx	lr
    c158:	4621      	mov	r1, r4
    c15a:	4618      	mov	r0, r3
    c15c:	e7d7      	b.n	c10e <memcmp+0xe>
    c15e:	bf00      	nop

0000c160 <memcpy>:
    c160:	4684      	mov	ip, r0
    c162:	ea41 0300 	orr.w	r3, r1, r0
    c166:	f013 0303 	ands.w	r3, r3, #3
    c16a:	d16d      	bne.n	c248 <memcpy+0xe8>
    c16c:	3a40      	subs	r2, #64	; 0x40
    c16e:	d341      	bcc.n	c1f4 <memcpy+0x94>
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	f851 3b04 	ldr.w	r3, [r1], #4
    c194:	f840 3b04 	str.w	r3, [r0], #4
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	3a40      	subs	r2, #64	; 0x40
    c1f2:	d2bd      	bcs.n	c170 <memcpy+0x10>
    c1f4:	3230      	adds	r2, #48	; 0x30
    c1f6:	d311      	bcc.n	c21c <memcpy+0xbc>
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	3a10      	subs	r2, #16
    c21a:	d2ed      	bcs.n	c1f8 <memcpy+0x98>
    c21c:	320c      	adds	r2, #12
    c21e:	d305      	bcc.n	c22c <memcpy+0xcc>
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	3a04      	subs	r2, #4
    c22a:	d2f9      	bcs.n	c220 <memcpy+0xc0>
    c22c:	3204      	adds	r2, #4
    c22e:	d008      	beq.n	c242 <memcpy+0xe2>
    c230:	07d2      	lsls	r2, r2, #31
    c232:	bf1c      	itt	ne
    c234:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c238:	f800 3b01 	strbne.w	r3, [r0], #1
    c23c:	d301      	bcc.n	c242 <memcpy+0xe2>
    c23e:	880b      	ldrh	r3, [r1, #0]
    c240:	8003      	strh	r3, [r0, #0]
    c242:	4660      	mov	r0, ip
    c244:	4770      	bx	lr
    c246:	bf00      	nop
    c248:	2a08      	cmp	r2, #8
    c24a:	d313      	bcc.n	c274 <memcpy+0x114>
    c24c:	078b      	lsls	r3, r1, #30
    c24e:	d08d      	beq.n	c16c <memcpy+0xc>
    c250:	f010 0303 	ands.w	r3, r0, #3
    c254:	d08a      	beq.n	c16c <memcpy+0xc>
    c256:	f1c3 0304 	rsb	r3, r3, #4
    c25a:	1ad2      	subs	r2, r2, r3
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	bf1c      	itt	ne
    c260:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c264:	f800 3b01 	strbne.w	r3, [r0], #1
    c268:	d380      	bcc.n	c16c <memcpy+0xc>
    c26a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c26e:	f820 3b02 	strh.w	r3, [r0], #2
    c272:	e77b      	b.n	c16c <memcpy+0xc>
    c274:	3a04      	subs	r2, #4
    c276:	d3d9      	bcc.n	c22c <memcpy+0xcc>
    c278:	3a01      	subs	r2, #1
    c27a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c27e:	f800 3b01 	strb.w	r3, [r0], #1
    c282:	d2f9      	bcs.n	c278 <memcpy+0x118>
    c284:	780b      	ldrb	r3, [r1, #0]
    c286:	7003      	strb	r3, [r0, #0]
    c288:	784b      	ldrb	r3, [r1, #1]
    c28a:	7043      	strb	r3, [r0, #1]
    c28c:	788b      	ldrb	r3, [r1, #2]
    c28e:	7083      	strb	r3, [r0, #2]
    c290:	4660      	mov	r0, ip
    c292:	4770      	bx	lr

0000c294 <memmove>:
    c294:	4288      	cmp	r0, r1
    c296:	b5f0      	push	{r4, r5, r6, r7, lr}
    c298:	d90d      	bls.n	c2b6 <memmove+0x22>
    c29a:	188b      	adds	r3, r1, r2
    c29c:	4298      	cmp	r0, r3
    c29e:	d20a      	bcs.n	c2b6 <memmove+0x22>
    c2a0:	1884      	adds	r4, r0, r2
    c2a2:	2a00      	cmp	r2, #0
    c2a4:	d051      	beq.n	c34a <memmove+0xb6>
    c2a6:	4622      	mov	r2, r4
    c2a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c2ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
    c2b0:	4299      	cmp	r1, r3
    c2b2:	d1f9      	bne.n	c2a8 <memmove+0x14>
    c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2b6:	2a0f      	cmp	r2, #15
    c2b8:	d948      	bls.n	c34c <memmove+0xb8>
    c2ba:	ea41 0300 	orr.w	r3, r1, r0
    c2be:	079b      	lsls	r3, r3, #30
    c2c0:	d146      	bne.n	c350 <memmove+0xbc>
    c2c2:	f100 0410 	add.w	r4, r0, #16
    c2c6:	f101 0310 	add.w	r3, r1, #16
    c2ca:	4615      	mov	r5, r2
    c2cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
    c2d0:	f844 6c10 	str.w	r6, [r4, #-16]
    c2d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    c2d8:	f844 6c0c 	str.w	r6, [r4, #-12]
    c2dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
    c2e0:	f844 6c08 	str.w	r6, [r4, #-8]
    c2e4:	3d10      	subs	r5, #16
    c2e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    c2ea:	f844 6c04 	str.w	r6, [r4, #-4]
    c2ee:	2d0f      	cmp	r5, #15
    c2f0:	f103 0310 	add.w	r3, r3, #16
    c2f4:	f104 0410 	add.w	r4, r4, #16
    c2f8:	d8e8      	bhi.n	c2cc <memmove+0x38>
    c2fa:	f1a2 0310 	sub.w	r3, r2, #16
    c2fe:	f023 030f 	bic.w	r3, r3, #15
    c302:	f002 0e0f 	and.w	lr, r2, #15
    c306:	3310      	adds	r3, #16
    c308:	f1be 0f03 	cmp.w	lr, #3
    c30c:	4419      	add	r1, r3
    c30e:	4403      	add	r3, r0
    c310:	d921      	bls.n	c356 <memmove+0xc2>
    c312:	1f1e      	subs	r6, r3, #4
    c314:	460d      	mov	r5, r1
    c316:	4674      	mov	r4, lr
    c318:	3c04      	subs	r4, #4
    c31a:	f855 7b04 	ldr.w	r7, [r5], #4
    c31e:	f846 7f04 	str.w	r7, [r6, #4]!
    c322:	2c03      	cmp	r4, #3
    c324:	d8f8      	bhi.n	c318 <memmove+0x84>
    c326:	f1ae 0404 	sub.w	r4, lr, #4
    c32a:	f024 0403 	bic.w	r4, r4, #3
    c32e:	3404      	adds	r4, #4
    c330:	4421      	add	r1, r4
    c332:	4423      	add	r3, r4
    c334:	f002 0203 	and.w	r2, r2, #3
    c338:	b162      	cbz	r2, c354 <memmove+0xc0>
    c33a:	3b01      	subs	r3, #1
    c33c:	440a      	add	r2, r1
    c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
    c342:	f803 4f01 	strb.w	r4, [r3, #1]!
    c346:	428a      	cmp	r2, r1
    c348:	d1f9      	bne.n	c33e <memmove+0xaa>
    c34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34c:	4603      	mov	r3, r0
    c34e:	e7f3      	b.n	c338 <memmove+0xa4>
    c350:	4603      	mov	r3, r0
    c352:	e7f2      	b.n	c33a <memmove+0xa6>
    c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c356:	4672      	mov	r2, lr
    c358:	e7ee      	b.n	c338 <memmove+0xa4>
    c35a:	bf00      	nop

0000c35c <memset>:
    c35c:	b470      	push	{r4, r5, r6}
    c35e:	0786      	lsls	r6, r0, #30
    c360:	d046      	beq.n	c3f0 <memset+0x94>
    c362:	1e54      	subs	r4, r2, #1
    c364:	2a00      	cmp	r2, #0
    c366:	d041      	beq.n	c3ec <memset+0x90>
    c368:	b2ca      	uxtb	r2, r1
    c36a:	4603      	mov	r3, r0
    c36c:	e002      	b.n	c374 <memset+0x18>
    c36e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c372:	d33b      	bcc.n	c3ec <memset+0x90>
    c374:	f803 2b01 	strb.w	r2, [r3], #1
    c378:	079d      	lsls	r5, r3, #30
    c37a:	d1f8      	bne.n	c36e <memset+0x12>
    c37c:	2c03      	cmp	r4, #3
    c37e:	d92e      	bls.n	c3de <memset+0x82>
    c380:	b2cd      	uxtb	r5, r1
    c382:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c386:	2c0f      	cmp	r4, #15
    c388:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c38c:	d919      	bls.n	c3c2 <memset+0x66>
    c38e:	f103 0210 	add.w	r2, r3, #16
    c392:	4626      	mov	r6, r4
    c394:	3e10      	subs	r6, #16
    c396:	2e0f      	cmp	r6, #15
    c398:	f842 5c10 	str.w	r5, [r2, #-16]
    c39c:	f842 5c0c 	str.w	r5, [r2, #-12]
    c3a0:	f842 5c08 	str.w	r5, [r2, #-8]
    c3a4:	f842 5c04 	str.w	r5, [r2, #-4]
    c3a8:	f102 0210 	add.w	r2, r2, #16
    c3ac:	d8f2      	bhi.n	c394 <memset+0x38>
    c3ae:	f1a4 0210 	sub.w	r2, r4, #16
    c3b2:	f022 020f 	bic.w	r2, r2, #15
    c3b6:	f004 040f 	and.w	r4, r4, #15
    c3ba:	3210      	adds	r2, #16
    c3bc:	2c03      	cmp	r4, #3
    c3be:	4413      	add	r3, r2
    c3c0:	d90d      	bls.n	c3de <memset+0x82>
    c3c2:	461e      	mov	r6, r3
    c3c4:	4622      	mov	r2, r4
    c3c6:	3a04      	subs	r2, #4
    c3c8:	2a03      	cmp	r2, #3
    c3ca:	f846 5b04 	str.w	r5, [r6], #4
    c3ce:	d8fa      	bhi.n	c3c6 <memset+0x6a>
    c3d0:	1f22      	subs	r2, r4, #4
    c3d2:	f022 0203 	bic.w	r2, r2, #3
    c3d6:	3204      	adds	r2, #4
    c3d8:	4413      	add	r3, r2
    c3da:	f004 0403 	and.w	r4, r4, #3
    c3de:	b12c      	cbz	r4, c3ec <memset+0x90>
    c3e0:	b2c9      	uxtb	r1, r1
    c3e2:	441c      	add	r4, r3
    c3e4:	f803 1b01 	strb.w	r1, [r3], #1
    c3e8:	429c      	cmp	r4, r3
    c3ea:	d1fb      	bne.n	c3e4 <memset+0x88>
    c3ec:	bc70      	pop	{r4, r5, r6}
    c3ee:	4770      	bx	lr
    c3f0:	4614      	mov	r4, r2
    c3f2:	4603      	mov	r3, r0
    c3f4:	e7c2      	b.n	c37c <memset+0x20>
    c3f6:	bf00      	nop

0000c3f8 <__aeabi_d2f>:
    c3f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c3fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c400:	bf24      	itt	cs
    c402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c40a:	d90d      	bls.n	c428 <__aeabi_d2f+0x30>
    c40c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c41c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c420:	bf08      	it	eq
    c422:	f020 0001 	biceq.w	r0, r0, #1
    c426:	4770      	bx	lr
    c428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c42c:	d121      	bne.n	c472 <__aeabi_d2f+0x7a>
    c42e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c432:	bfbc      	itt	lt
    c434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c438:	4770      	bxlt	lr
    c43a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c43e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c442:	f1c2 0218 	rsb	r2, r2, #24
    c446:	f1c2 0c20 	rsb	ip, r2, #32
    c44a:	fa10 f30c 	lsls.w	r3, r0, ip
    c44e:	fa20 f002 	lsr.w	r0, r0, r2
    c452:	bf18      	it	ne
    c454:	f040 0001 	orrne.w	r0, r0, #1
    c458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c45c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c460:	fa03 fc0c 	lsl.w	ip, r3, ip
    c464:	ea40 000c 	orr.w	r0, r0, ip
    c468:	fa23 f302 	lsr.w	r3, r3, r2
    c46c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c470:	e7cc      	b.n	c40c <__aeabi_d2f+0x14>
    c472:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c476:	d107      	bne.n	c488 <__aeabi_d2f+0x90>
    c478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c47c:	bf1e      	ittt	ne
    c47e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c486:	4770      	bxne	lr
    c488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c48c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c494:	4770      	bx	lr
    c496:	bf00      	nop

0000c498 <attDmConnCback>:
    c498:	7803      	ldrb	r3, [r0, #0]
    c49a:	7882      	ldrb	r2, [r0, #2]
    c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a0:	1e5f      	subs	r7, r3, #1
    c4a2:	4e16      	ldr	r6, [pc, #88]	; (c4fc <attDmConnCback+0x64>)
    c4a4:	017f      	lsls	r7, r7, #5
    c4a6:	2a27      	cmp	r2, #39	; 0x27
    c4a8:	4605      	mov	r5, r0
    c4aa:	eb06 0407 	add.w	r4, r6, r7
    c4ae:	d108      	bne.n	c4c2 <attDmConnCback+0x2a>
    c4b0:	88c2      	ldrh	r2, [r0, #6]
    c4b2:	8322      	strh	r2, [r4, #24]
    c4b4:	7723      	strb	r3, [r4, #28]
    c4b6:	2217      	movs	r2, #23
    c4b8:	2300      	movs	r3, #0
    c4ba:	8362      	strh	r2, [r4, #26]
    c4bc:	7763      	strb	r3, [r4, #29]
    c4be:	77a3      	strb	r3, [r4, #30]
    c4c0:	77e3      	strb	r3, [r4, #31]
    c4c2:	4437      	add	r7, r6
    c4c4:	7f3b      	ldrb	r3, [r7, #28]
    c4c6:	b183      	cbz	r3, c4ea <attDmConnCback+0x52>
    c4c8:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    c4cc:	4629      	mov	r1, r5
    c4ce:	68db      	ldr	r3, [r3, #12]
    c4d0:	4620      	mov	r0, r4
    c4d2:	4798      	blx	r3
    c4d4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    c4d8:	4629      	mov	r1, r5
    c4da:	68db      	ldr	r3, [r3, #12]
    c4dc:	4620      	mov	r0, r4
    c4de:	4798      	blx	r3
    c4e0:	78ab      	ldrb	r3, [r5, #2]
    c4e2:	2b28      	cmp	r3, #40	; 0x28
    c4e4:	bf04      	itt	eq
    c4e6:	2300      	moveq	r3, #0
    c4e8:	773b      	strbeq	r3, [r7, #28]
    c4ea:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
    c4ee:	b11b      	cbz	r3, c4f8 <attDmConnCback+0x60>
    c4f0:	4628      	mov	r0, r5
    c4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c4f6:	4718      	bx	r3
    c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4fc:	10003778 	.word	0x10003778

0000c500 <attEmptyHandler>:
    c500:	4770      	bx	lr

0000c502 <attEmptyConnCback>:
    c502:	4770      	bx	lr

0000c504 <attEmptyDataCback>:
    c504:	4770      	bx	lr

0000c506 <attL2cDataCback>:
    c506:	7a13      	ldrb	r3, [r2, #8]
    c508:	f013 0f01 	tst.w	r3, #1
    c50c:	4b03      	ldr	r3, [pc, #12]	; (c51c <attL2cDataCback+0x16>)
    c50e:	bf14      	ite	ne
    c510:	f8d3 3100 	ldrne.w	r3, [r3, #256]	; 0x100
    c514:	f8d3 3104 	ldreq.w	r3, [r3, #260]	; 0x104
    c518:	681b      	ldr	r3, [r3, #0]
    c51a:	4718      	bx	r3
    c51c:	10003778 	.word	0x10003778

0000c520 <attL2cCtrlCback>:
    c520:	b570      	push	{r4, r5, r6, lr}
    c522:	7804      	ldrb	r4, [r0, #0]
    c524:	4d0e      	ldr	r5, [pc, #56]	; (c560 <attL2cCtrlCback+0x40>)
    c526:	3c01      	subs	r4, #1
    c528:	0164      	lsls	r4, r4, #5
    c52a:	192b      	adds	r3, r5, r4
    c52c:	4606      	mov	r6, r0
    c52e:	7f1a      	ldrb	r2, [r3, #28]
    c530:	b1a2      	cbz	r2, c55c <attL2cCtrlCback+0x3c>
    c532:	7882      	ldrb	r2, [r0, #2]
    c534:	2a01      	cmp	r2, #1
    c536:	bf0c      	ite	eq
    c538:	2201      	moveq	r2, #1
    c53a:	2200      	movne	r2, #0
    c53c:	779a      	strb	r2, [r3, #30]
    c53e:	d003      	beq.n	c548 <attL2cCtrlCback+0x28>
    c540:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    c544:	685b      	ldr	r3, [r3, #4]
    c546:	4798      	blx	r3
    c548:	442c      	add	r4, r5
    c54a:	7fa3      	ldrb	r3, [r4, #30]
    c54c:	b933      	cbnz	r3, c55c <attL2cCtrlCback+0x3c>
    c54e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    c552:	4630      	mov	r0, r6
    c554:	685b      	ldr	r3, [r3, #4]
    c556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c55a:	4718      	bx	r3
    c55c:	bd70      	pop	{r4, r5, r6, pc}
    c55e:	bf00      	nop
    c560:	10003778 	.word	0x10003778

0000c564 <attCcbByHandle>:
    c564:	b508      	push	{r3, lr}
    c566:	f003 fb8d 	bl	fc84 <DmConnIdByHandle>
    c56a:	b118      	cbz	r0, c574 <attCcbByHandle+0x10>
    c56c:	4b02      	ldr	r3, [pc, #8]	; (c578 <attCcbByHandle+0x14>)
    c56e:	3801      	subs	r0, #1
    c570:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c574:	bd08      	pop	{r3, pc}
    c576:	bf00      	nop
    c578:	10003778 	.word	0x10003778

0000c57c <attCcbByConnId>:
    c57c:	4b02      	ldr	r3, [pc, #8]	; (c588 <attCcbByConnId+0xc>)
    c57e:	3801      	subs	r0, #1
    c580:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c584:	4770      	bx	lr
    c586:	bf00      	nop
    c588:	10003778 	.word	0x10003778

0000c58c <attUuidCmp16to128>:
    c58c:	b508      	push	{r3, lr}
    c58e:	4b06      	ldr	r3, [pc, #24]	; (c5a8 <attUuidCmp16to128+0x1c>)
    c590:	7802      	ldrb	r2, [r0, #0]
    c592:	731a      	strb	r2, [r3, #12]
    c594:	7842      	ldrb	r2, [r0, #1]
    c596:	735a      	strb	r2, [r3, #13]
    c598:	4618      	mov	r0, r3
    c59a:	2210      	movs	r2, #16
    c59c:	f7ff fdb0 	bl	c100 <memcmp>
    c5a0:	fab0 f080 	clz	r0, r0
    c5a4:	0940      	lsrs	r0, r0, #5
    c5a6:	bd08      	pop	{r3, pc}
    c5a8:	10002b00 	.word	0x10002b00

0000c5ac <attExecCallback>:
    c5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c5ae:	f88d 3003 	strb.w	r3, [sp, #3]
    c5b2:	2300      	movs	r3, #0
    c5b4:	f8ad 3008 	strh.w	r3, [sp, #8]
    c5b8:	f88d 300c 	strb.w	r3, [sp, #12]
    c5bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    c5c0:	f8ad 300e 	strh.w	r3, [sp, #14]
    c5c4:	4b06      	ldr	r3, [pc, #24]	; (c5e0 <attExecCallback+0x34>)
    c5c6:	f8ad 0000 	strh.w	r0, [sp]
    c5ca:	f88d 1002 	strb.w	r1, [sp, #2]
    c5ce:	f8ad 200a 	strh.w	r2, [sp, #10]
    c5d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    c5d6:	4668      	mov	r0, sp
    c5d8:	4798      	blx	r3
    c5da:	b005      	add	sp, #20
    c5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e0:	10003778 	.word	0x10003778

0000c5e4 <attSetMtu>:
    c5e4:	428a      	cmp	r2, r1
    c5e6:	8b43      	ldrh	r3, [r0, #26]
    c5e8:	b507      	push	{r0, r1, r2, lr}
    c5ea:	bf28      	it	cs
    c5ec:	460a      	movcs	r2, r1
    c5ee:	4293      	cmp	r3, r2
    c5f0:	d007      	beq.n	c602 <attSetMtu+0x1e>
    c5f2:	2300      	movs	r3, #0
    c5f4:	8342      	strh	r2, [r0, #26]
    c5f6:	2111      	movs	r1, #17
    c5f8:	7f00      	ldrb	r0, [r0, #28]
    c5fa:	9200      	str	r2, [sp, #0]
    c5fc:	461a      	mov	r2, r3
    c5fe:	f7ff ffd5 	bl	c5ac <attExecCallback>
    c602:	b003      	add	sp, #12
    c604:	f85d fb04 	ldr.w	pc, [sp], #4

0000c608 <attMsgAlloc>:
    c608:	2100      	movs	r1, #0
    c60a:	f008 be05 	b.w	15218 <WsfMsgDataAlloc>

0000c60e <AttHandlerInit>:
    c60e:	b508      	push	{r3, lr}
    c610:	4b09      	ldr	r3, [pc, #36]	; (c638 <AttHandlerInit+0x2a>)
    c612:	4a0a      	ldr	r2, [pc, #40]	; (c63c <AttHandlerInit+0x2e>)
    c614:	f883 0110 	strb.w	r0, [r3, #272]	; 0x110
    c618:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c61c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c620:	4907      	ldr	r1, [pc, #28]	; (c640 <AttHandlerInit+0x32>)
    c622:	4a08      	ldr	r2, [pc, #32]	; (c644 <AttHandlerInit+0x36>)
    c624:	2004      	movs	r0, #4
    c626:	f004 faf5 	bl	10c14 <L2cRegister>
    c62a:	4907      	ldr	r1, [pc, #28]	; (c648 <AttHandlerInit+0x3a>)
    c62c:	2000      	movs	r0, #0
    c62e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c632:	f003 ba11 	b.w	fa58 <DmConnRegister>
    c636:	bf00      	nop
    c638:	10003778 	.word	0x10003778
    c63c:	00021d60 	.word	0x00021d60
    c640:	0000c507 	.word	0x0000c507
    c644:	0000c521 	.word	0x0000c521
    c648:	0000c499 	.word	0x0000c499

0000c64c <AttHandler>:
    c64c:	4608      	mov	r0, r1
    c64e:	b149      	cbz	r1, c664 <AttHandler+0x18>
    c650:	788b      	ldrb	r3, [r1, #2]
    c652:	2b1f      	cmp	r3, #31
    c654:	4b04      	ldr	r3, [pc, #16]	; (c668 <AttHandler+0x1c>)
    c656:	bf8c      	ite	hi
    c658:	f8d3 3104 	ldrhi.w	r3, [r3, #260]	; 0x104
    c65c:	f8d3 3100 	ldrls.w	r3, [r3, #256]	; 0x100
    c660:	689b      	ldr	r3, [r3, #8]
    c662:	4718      	bx	r3
    c664:	4770      	bx	lr
    c666:	bf00      	nop
    c668:	10003778 	.word	0x10003778

0000c66c <AttRegister>:
    c66c:	4b0a      	ldr	r3, [pc, #40]	; (c698 <AttRegister+0x2c>)
    c66e:	b507      	push	{r0, r1, r2, lr}
    c670:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    c674:	f00a fd44 	bl	17100 <HciGetMaxRxAclLen>
    c678:	4b08      	ldr	r3, [pc, #32]	; (c69c <AttRegister+0x30>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	889b      	ldrh	r3, [r3, #4]
    c67e:	3803      	subs	r0, #3
    c680:	4298      	cmp	r0, r3
    c682:	dc06      	bgt.n	c692 <AttRegister+0x26>
    c684:	2200      	movs	r2, #0
    c686:	9200      	str	r2, [sp, #0]
    c688:	2302      	movs	r3, #2
    c68a:	2152      	movs	r1, #82	; 0x52
    c68c:	4610      	mov	r0, r2
    c68e:	f7ff ff8d 	bl	c5ac <attExecCallback>
    c692:	b003      	add	sp, #12
    c694:	f85d fb04 	ldr.w	pc, [sp], #4
    c698:	10003778 	.word	0x10003778
    c69c:	10002b9c 	.word	0x10002b9c

0000c6a0 <AttConnRegister>:
    c6a0:	4b01      	ldr	r3, [pc, #4]	; (c6a8 <AttConnRegister+0x8>)
    c6a2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    c6a6:	4770      	bx	lr
    c6a8:	10003778 	.word	0x10003778

0000c6ac <AttGetMtu>:
    c6ac:	4b02      	ldr	r3, [pc, #8]	; (c6b8 <AttGetMtu+0xc>)
    c6ae:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c6b2:	f830 0c06 	ldrh.w	r0, [r0, #-6]
    c6b6:	4770      	bx	lr
    c6b8:	10003778 	.word	0x10003778

0000c6bc <AttMsgAlloc>:
    c6bc:	291b      	cmp	r1, #27
    c6be:	b508      	push	{r3, lr}
    c6c0:	d001      	beq.n	c6c6 <AttMsgAlloc+0xa>
    c6c2:	291d      	cmp	r1, #29
    c6c4:	d106      	bne.n	c6d4 <AttMsgAlloc+0x18>
    c6c6:	300b      	adds	r0, #11
    c6c8:	b280      	uxth	r0, r0
    c6ca:	f7ff ff9d 	bl	c608 <attMsgAlloc>
    c6ce:	b100      	cbz	r0, c6d2 <AttMsgAlloc+0x16>
    c6d0:	300b      	adds	r0, #11
    c6d2:	bd08      	pop	{r3, pc}
    c6d4:	2000      	movs	r0, #0
    c6d6:	e7fc      	b.n	c6d2 <AttMsgAlloc+0x16>

0000c6d8 <AttMsgFree>:
    c6d8:	291b      	cmp	r1, #27
    c6da:	d005      	beq.n	c6e8 <AttMsgFree+0x10>
    c6dc:	291d      	cmp	r1, #29
    c6de:	d003      	beq.n	c6e8 <AttMsgFree+0x10>
    c6e0:	2300      	movs	r3, #0
    c6e2:	1ac0      	subs	r0, r0, r3
    c6e4:	f008 bdc4 	b.w	15270 <WsfMsgFree>
    c6e8:	230b      	movs	r3, #11
    c6ea:	e7fa      	b.n	c6e2 <AttMsgFree+0xa>

0000c6ec <attcDiscDescriptors>:
    c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6ee:	680e      	ldr	r6, [r1, #0]
    c6f0:	7c8d      	ldrb	r5, [r1, #18]
    c6f2:	2200      	movs	r2, #0
    c6f4:	460b      	mov	r3, r1
    c6f6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    c6fa:	4611      	mov	r1, r2
    c6fc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    c700:	4696      	mov	lr, r2
    c702:	7c9c      	ldrb	r4, [r3, #18]
    c704:	7b1f      	ldrb	r7, [r3, #12]
    c706:	42a7      	cmp	r7, r4
    c708:	d809      	bhi.n	c71e <attcDiscDescriptors+0x32>
    c70a:	7c9c      	ldrb	r4, [r3, #18]
    c70c:	7b1d      	ldrb	r5, [r3, #12]
    c70e:	42a5      	cmp	r5, r4
    c710:	d12e      	bne.n	c770 <attcDiscDescriptors+0x84>
    c712:	2200      	movs	r2, #0
    c714:	b2d1      	uxtb	r1, r2
    c716:	428c      	cmp	r4, r1
    c718:	d81f      	bhi.n	c75a <attcDiscDescriptors+0x6e>
    c71a:	2000      	movs	r0, #0
    c71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c71e:	682f      	ldr	r7, [r5, #0]
    c720:	793f      	ldrb	r7, [r7, #4]
    c722:	077f      	lsls	r7, r7, #29
    c724:	d516      	bpl.n	c754 <attcDiscDescriptors+0x68>
    c726:	685f      	ldr	r7, [r3, #4]
    c728:	4464      	add	r4, ip
    c72a:	0062      	lsls	r2, r4, #1
    c72c:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
    c730:	1c94      	adds	r4, r2, #2
    c732:	3101      	adds	r1, #1
    c734:	5b3a      	ldrh	r2, [r7, r4]
    c736:	f827 e004 	strh.w	lr, [r7, r4]
    c73a:	b289      	uxth	r1, r1
    c73c:	4291      	cmp	r1, r2
    c73e:	d9e4      	bls.n	c70a <attcDiscDescriptors+0x1e>
    c740:	7c9c      	ldrb	r4, [r3, #18]
    c742:	7b1f      	ldrb	r7, [r3, #12]
    c744:	3401      	adds	r4, #1
    c746:	b2e4      	uxtb	r4, r4
    c748:	42bc      	cmp	r4, r7
    c74a:	d301      	bcc.n	c750 <attcDiscDescriptors+0x64>
    c74c:	749c      	strb	r4, [r3, #18]
    c74e:	e7d8      	b.n	c702 <attcDiscDescriptors+0x16>
    c750:	3504      	adds	r5, #4
    c752:	e7f7      	b.n	c744 <attcDiscDescriptors+0x58>
    c754:	3504      	adds	r5, #4
    c756:	3401      	adds	r4, #1
    c758:	e7f8      	b.n	c74c <attcDiscDescriptors+0x60>
    c75a:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    c75e:	7909      	ldrb	r1, [r1, #4]
    c760:	0789      	lsls	r1, r1, #30
    c762:	d503      	bpl.n	c76c <attcDiscDescriptors+0x80>
    c764:	6859      	ldr	r1, [r3, #4]
    c766:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    c76a:	b131      	cbz	r1, c77a <attcDiscDescriptors+0x8e>
    c76c:	3201      	adds	r2, #1
    c76e:	e7d1      	b.n	c714 <attcDiscDescriptors+0x28>
    c770:	2301      	movs	r3, #1
    c772:	f000 fd13 	bl	d19c <AttcFindInfoReq>
    c776:	2078      	movs	r0, #120	; 0x78
    c778:	e7d0      	b.n	c71c <attcDiscDescriptors+0x30>
    c77a:	2076      	movs	r0, #118	; 0x76
    c77c:	e7ce      	b.n	c71c <attcDiscDescriptors+0x30>

0000c77e <attcDiscConfigNext>:
    c77e:	b570      	push	{r4, r5, r6, lr}
    c780:	460a      	mov	r2, r1
    c782:	7c89      	ldrb	r1, [r1, #18]
    c784:	6893      	ldr	r3, [r2, #8]
    c786:	7b55      	ldrb	r5, [r2, #13]
    c788:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    c78c:	7c94      	ldrb	r4, [r2, #18]
    c78e:	42ac      	cmp	r4, r5
    c790:	d301      	bcc.n	c796 <attcDiscConfigNext+0x18>
    c792:	2000      	movs	r0, #0
    c794:	e00a      	b.n	c7ac <attcDiscConfigNext+0x2e>
    c796:	795e      	ldrb	r6, [r3, #5]
    c798:	6851      	ldr	r1, [r2, #4]
    c79a:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
    c79e:	b149      	cbz	r1, c7b4 <attcDiscConfigNext+0x36>
    c7a0:	791a      	ldrb	r2, [r3, #4]
    c7a2:	b122      	cbz	r2, c7ae <attcDiscConfigNext+0x30>
    c7a4:	681b      	ldr	r3, [r3, #0]
    c7a6:	f000 fd29 	bl	d1fc <AttcWriteReq>
    c7aa:	2078      	movs	r0, #120	; 0x78
    c7ac:	bd70      	pop	{r4, r5, r6, pc}
    c7ae:	f000 fd0d 	bl	d1cc <AttcReadReq>
    c7b2:	e7fa      	b.n	c7aa <attcDiscConfigNext+0x2c>
    c7b4:	3401      	adds	r4, #1
    c7b6:	7494      	strb	r4, [r2, #18]
    c7b8:	3308      	adds	r3, #8
    c7ba:	e7e7      	b.n	c78c <attcDiscConfigNext+0xe>

0000c7bc <attcUuidCmp>:
    c7bc:	b508      	push	{r3, lr}
    c7be:	7903      	ldrb	r3, [r0, #4]
    c7c0:	f003 0301 	and.w	r3, r3, #1
    c7c4:	429a      	cmp	r2, r3
    c7c6:	d10a      	bne.n	c7de <attcUuidCmp+0x22>
    c7c8:	2a00      	cmp	r2, #0
    c7ca:	bf0c      	ite	eq
    c7cc:	2202      	moveq	r2, #2
    c7ce:	2210      	movne	r2, #16
    c7d0:	6800      	ldr	r0, [r0, #0]
    c7d2:	f7ff fc95 	bl	c100 <memcmp>
    c7d6:	fab0 f080 	clz	r0, r0
    c7da:	0940      	lsrs	r0, r0, #5
    c7dc:	bd08      	pop	{r3, pc}
    c7de:	2a01      	cmp	r2, #1
    c7e0:	d105      	bne.n	c7ee <attcUuidCmp+0x32>
    c7e2:	b923      	cbnz	r3, c7ee <attcUuidCmp+0x32>
    c7e4:	6800      	ldr	r0, [r0, #0]
    c7e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c7ea:	f7ff becf 	b.w	c58c <attUuidCmp16to128>
    c7ee:	2000      	movs	r0, #0
    c7f0:	e7f4      	b.n	c7dc <attcUuidCmp+0x20>

0000c7f2 <AttcDiscService>:
    c7f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c7f4:	2100      	movs	r1, #0
    c7f6:	e9cd 3101 	strd	r3, r1, [sp, #4]
    c7fa:	9200      	str	r2, [sp, #0]
    c7fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c800:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c804:	2101      	movs	r1, #1
    c806:	f000 fd87 	bl	d318 <AttcFindByTypeValueReq>
    c80a:	b005      	add	sp, #20
    c80c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c810 <AttcDiscServiceCmpl>:
    c810:	b510      	push	{r4, lr}
    c812:	788b      	ldrb	r3, [r1, #2]
    c814:	2b03      	cmp	r3, #3
    c816:	d110      	bne.n	c83a <AttcDiscServiceCmpl+0x2a>
    c818:	78cb      	ldrb	r3, [r1, #3]
    c81a:	b963      	cbnz	r3, c836 <AttcDiscServiceCmpl+0x26>
    c81c:	890a      	ldrh	r2, [r1, #8]
    c81e:	b172      	cbz	r2, c83e <AttcDiscServiceCmpl+0x2e>
    c820:	684a      	ldr	r2, [r1, #4]
    c822:	7854      	ldrb	r4, [r2, #1]
    c824:	7811      	ldrb	r1, [r2, #0]
    c826:	eb01 2104 	add.w	r1, r1, r4, lsl #8
    c82a:	81c1      	strh	r1, [r0, #14]
    c82c:	78d1      	ldrb	r1, [r2, #3]
    c82e:	7892      	ldrb	r2, [r2, #2]
    c830:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    c834:	8202      	strh	r2, [r0, #16]
    c836:	4618      	mov	r0, r3
    c838:	bd10      	pop	{r4, pc}
    c83a:	2375      	movs	r3, #117	; 0x75
    c83c:	e7fb      	b.n	c836 <AttcDiscServiceCmpl+0x26>
    c83e:	230a      	movs	r3, #10
    c840:	e7f9      	b.n	c836 <AttcDiscServiceCmpl+0x26>

0000c842 <AttcDiscCharStart>:
    c842:	b507      	push	{r0, r1, r2, lr}
    c844:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    c848:	824b      	strh	r3, [r1, #18]
    c84a:	2301      	movs	r3, #1
    c84c:	8a0a      	ldrh	r2, [r1, #16]
    c84e:	89c9      	ldrh	r1, [r1, #14]
    c850:	9301      	str	r3, [sp, #4]
    c852:	4b04      	ldr	r3, [pc, #16]	; (c864 <AttcDiscCharStart+0x22>)
    c854:	9300      	str	r3, [sp, #0]
    c856:	2302      	movs	r3, #2
    c858:	f000 fd8e 	bl	d378 <AttcReadByTypeReq>
    c85c:	b003      	add	sp, #12
    c85e:	f85d fb04 	ldr.w	pc, [sp], #4
    c862:	bf00      	nop
    c864:	00021e4c 	.word	0x00021e4c

0000c868 <AttcDiscCharCmpl>:
    c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c86c:	788b      	ldrb	r3, [r1, #2]
    c86e:	2b04      	cmp	r3, #4
    c870:	b085      	sub	sp, #20
    c872:	4604      	mov	r4, r0
    c874:	460d      	mov	r5, r1
    c876:	d004      	beq.n	c882 <AttcDiscCharCmpl+0x1a>
    c878:	2b02      	cmp	r3, #2
    c87a:	f000 8089 	beq.w	c990 <AttcDiscCharCmpl+0x128>
    c87e:	2575      	movs	r5, #117	; 0x75
    c880:	e00b      	b.n	c89a <AttcDiscCharCmpl+0x32>
    c882:	f891 a003 	ldrb.w	sl, [r1, #3]
    c886:	f1ba 0f00 	cmp.w	sl, #0
    c88a:	d00a      	beq.n	c8a2 <AttcDiscCharCmpl+0x3a>
    c88c:	78eb      	ldrb	r3, [r5, #3]
    c88e:	2b00      	cmp	r3, #0
    c890:	d16b      	bne.n	c96a <AttcDiscCharCmpl+0x102>
    c892:	7b2b      	ldrb	r3, [r5, #12]
    c894:	2b00      	cmp	r3, #0
    c896:	d068      	beq.n	c96a <AttcDiscCharCmpl+0x102>
    c898:	2578      	movs	r5, #120	; 0x78
    c89a:	4628      	mov	r0, r5
    c89c:	b005      	add	sp, #20
    c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8a2:	684b      	ldr	r3, [r1, #4]
    c8a4:	f893 b000 	ldrb.w	fp, [r3]
    c8a8:	f1bb 0f07 	cmp.w	fp, #7
    c8ac:	d058      	beq.n	c960 <AttcDiscCharCmpl+0xf8>
    c8ae:	f1bb 0f15 	cmp.w	fp, #21
    c8b2:	d053      	beq.n	c95c <AttcDiscCharCmpl+0xf4>
    c8b4:	2573      	movs	r5, #115	; 0x73
    c8b6:	7b22      	ldrb	r2, [r4, #12]
    c8b8:	6860      	ldr	r0, [r4, #4]
    c8ba:	0052      	lsls	r2, r2, #1
    c8bc:	2100      	movs	r1, #0
    c8be:	f7ff fd4d 	bl	c35c <memset>
    c8c2:	e7ea      	b.n	c89a <AttcDiscCharCmpl+0x32>
    c8c4:	7872      	ldrb	r2, [r6, #1]
    c8c6:	7833      	ldrb	r3, [r6, #0]
    c8c8:	78f7      	ldrb	r7, [r6, #3]
    c8ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    c8ce:	7932      	ldrb	r2, [r6, #4]
    c8d0:	eb07 2702 	add.w	r7, r7, r2, lsl #8
    c8d4:	7ce2      	ldrb	r2, [r4, #19]
    c8d6:	2aff      	cmp	r2, #255	; 0xff
    c8d8:	b29b      	uxth	r3, r3
    c8da:	b2bf      	uxth	r7, r7
    c8dc:	d006      	beq.n	c8ec <AttcDiscCharCmpl+0x84>
    c8de:	6861      	ldr	r1, [r4, #4]
    c8e0:	1e58      	subs	r0, r3, #1
    c8e2:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    c8e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c8ea:	74e2      	strb	r2, [r4, #19]
    c8ec:	42bb      	cmp	r3, r7
    c8ee:	d304      	bcc.n	c8fa <AttcDiscCharCmpl+0x92>
    c8f0:	445e      	add	r6, fp
    c8f2:	9b01      	ldr	r3, [sp, #4]
    c8f4:	429e      	cmp	r6, r3
    c8f6:	d3e5      	bcc.n	c8c4 <AttcDiscCharCmpl+0x5c>
    c8f8:	e7c8      	b.n	c88c <AttcDiscCharCmpl+0x24>
    c8fa:	8a23      	ldrh	r3, [r4, #16]
    c8fc:	42bb      	cmp	r3, r7
    c8fe:	d3f7      	bcc.n	c8f0 <AttcDiscCharCmpl+0x88>
    c900:	1d72      	adds	r2, r6, #5
    c902:	6823      	ldr	r3, [r4, #0]
    c904:	9202      	str	r2, [sp, #8]
    c906:	f04f 0900 	mov.w	r9, #0
    c90a:	7b22      	ldrb	r2, [r4, #12]
    c90c:	fa5f f889 	uxtb.w	r8, r9
    c910:	4542      	cmp	r2, r8
    c912:	d9ed      	bls.n	c8f0 <AttcDiscCharCmpl+0x88>
    c914:	f108 0201 	add.w	r2, r8, #1
    c918:	b2d2      	uxtb	r2, r2
    c91a:	9200      	str	r2, [sp, #0]
    c91c:	6862      	ldr	r2, [r4, #4]
    c91e:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
    c922:	b9c2      	cbnz	r2, c956 <AttcDiscCharCmpl+0xee>
    c924:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    c928:	9902      	ldr	r1, [sp, #8]
    c92a:	9303      	str	r3, [sp, #12]
    c92c:	4652      	mov	r2, sl
    c92e:	f7ff ff45 	bl	c7bc <attcUuidCmp>
    c932:	9b03      	ldr	r3, [sp, #12]
    c934:	b178      	cbz	r0, c956 <AttcDiscCharCmpl+0xee>
    c936:	6862      	ldr	r2, [r4, #4]
    c938:	f822 7018 	strh.w	r7, [r2, r8, lsl #1]
    c93c:	7b22      	ldrb	r2, [r4, #12]
    c93e:	3a01      	subs	r2, #1
    c940:	4590      	cmp	r8, r2
    c942:	da08      	bge.n	c956 <AttcDiscCharCmpl+0xee>
    c944:	eb03 0289 	add.w	r2, r3, r9, lsl #2
    c948:	6852      	ldr	r2, [r2, #4]
    c94a:	7912      	ldrb	r2, [r2, #4]
    c94c:	0752      	lsls	r2, r2, #29
    c94e:	bf44      	itt	mi
    c950:	f89d 2000 	ldrbmi.w	r2, [sp]
    c954:	74e2      	strbmi	r2, [r4, #19]
    c956:	f109 0901 	add.w	r9, r9, #1
    c95a:	e7d6      	b.n	c90a <AttcDiscCharCmpl+0xa2>
    c95c:	f04f 0a01 	mov.w	sl, #1
    c960:	892a      	ldrh	r2, [r5, #8]
    c962:	1c5e      	adds	r6, r3, #1
    c964:	4413      	add	r3, r2
    c966:	9301      	str	r3, [sp, #4]
    c968:	e7c3      	b.n	c8f2 <AttcDiscCharCmpl+0x8a>
    c96a:	7ce3      	ldrb	r3, [r4, #19]
    c96c:	2bff      	cmp	r3, #255	; 0xff
    c96e:	bf1e      	ittt	ne
    c970:	6862      	ldrne	r2, [r4, #4]
    c972:	8a21      	ldrhne	r1, [r4, #16]
    c974:	f822 1013 	strhne.w	r1, [r2, r3, lsl #1]
    c978:	2300      	movs	r3, #0
    c97a:	74a3      	strb	r3, [r4, #18]
    c97c:	7828      	ldrb	r0, [r5, #0]
    c97e:	4621      	mov	r1, r4
    c980:	f7ff feb4 	bl	c6ec <attcDiscDescriptors>
    c984:	4605      	mov	r5, r0
    c986:	2800      	cmp	r0, #0
    c988:	d087      	beq.n	c89a <AttcDiscCharCmpl+0x32>
    c98a:	2878      	cmp	r0, #120	; 0x78
    c98c:	d193      	bne.n	c8b6 <AttcDiscCharCmpl+0x4e>
    c98e:	e783      	b.n	c898 <AttcDiscCharCmpl+0x30>
    c990:	f891 9003 	ldrb.w	r9, [r1, #3]
    c994:	f1b9 0f00 	cmp.w	r9, #0
    c998:	d014      	beq.n	c9c4 <AttcDiscCharCmpl+0x15c>
    c99a:	78eb      	ldrb	r3, [r5, #3]
    c99c:	b91b      	cbnz	r3, c9a6 <AttcDiscCharCmpl+0x13e>
    c99e:	7b2b      	ldrb	r3, [r5, #12]
    c9a0:	2b00      	cmp	r3, #0
    c9a2:	f47f af79 	bne.w	c898 <AttcDiscCharCmpl+0x30>
    c9a6:	7ca3      	ldrb	r3, [r4, #18]
    c9a8:	6822      	ldr	r2, [r4, #0]
    c9aa:	7b20      	ldrb	r0, [r4, #12]
    c9ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c9b0:	3301      	adds	r3, #1
    c9b2:	b2db      	uxtb	r3, r3
    c9b4:	4283      	cmp	r3, r0
    c9b6:	d0e0      	beq.n	c97a <AttcDiscCharCmpl+0x112>
    c9b8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    c9bc:	7909      	ldrb	r1, [r1, #4]
    c9be:	0749      	lsls	r1, r1, #29
    c9c0:	d4f6      	bmi.n	c9b0 <AttcDiscCharCmpl+0x148>
    c9c2:	e7da      	b.n	c97a <AttcDiscCharCmpl+0x112>
    c9c4:	684b      	ldr	r3, [r1, #4]
    c9c6:	781a      	ldrb	r2, [r3, #0]
    c9c8:	2a01      	cmp	r2, #1
    c9ca:	d037      	beq.n	ca3c <AttcDiscCharCmpl+0x1d4>
    c9cc:	2a02      	cmp	r2, #2
    c9ce:	f47f af71 	bne.w	c8b4 <AttcDiscCharCmpl+0x4c>
    c9d2:	f04f 0901 	mov.w	r9, #1
    c9d6:	f04f 0b12 	mov.w	fp, #18
    c9da:	e031      	b.n	ca40 <AttcDiscCharCmpl+0x1d8>
    c9dc:	7ca6      	ldrb	r6, [r4, #18]
    c9de:	f817 3c02 	ldrb.w	r3, [r7, #-2]
    c9e2:	9300      	str	r3, [sp, #0]
    c9e4:	ea4f 0886 	mov.w	r8, r6, lsl #2
    c9e8:	6823      	ldr	r3, [r4, #0]
    c9ea:	f817 ac01 	ldrb.w	sl, [r7, #-1]
    c9ee:	f1a8 0804 	sub.w	r8, r8, #4
    c9f2:	4498      	add	r8, r3
    c9f4:	7b23      	ldrb	r3, [r4, #12]
    c9f6:	42b3      	cmp	r3, r6
    c9f8:	d917      	bls.n	ca2a <AttcDiscCharCmpl+0x1c2>
    c9fa:	f858 0f04 	ldr.w	r0, [r8, #4]!
    c9fe:	7903      	ldrb	r3, [r0, #4]
    ca00:	075b      	lsls	r3, r3, #29
    ca02:	d512      	bpl.n	ca2a <AttcDiscCharCmpl+0x1c2>
    ca04:	b232      	sxth	r2, r6
    ca06:	6861      	ldr	r1, [r4, #4]
    ca08:	0053      	lsls	r3, r2, #1
    ca0a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    ca0e:	b992      	cbnz	r2, ca36 <AttcDiscCharCmpl+0x1ce>
    ca10:	464a      	mov	r2, r9
    ca12:	4639      	mov	r1, r7
    ca14:	9302      	str	r3, [sp, #8]
    ca16:	f7ff fed1 	bl	c7bc <attcUuidCmp>
    ca1a:	9b02      	ldr	r3, [sp, #8]
    ca1c:	b158      	cbz	r0, ca36 <AttcDiscCharCmpl+0x1ce>
    ca1e:	9900      	ldr	r1, [sp, #0]
    ca20:	6862      	ldr	r2, [r4, #4]
    ca22:	eb01 2a0a 	add.w	sl, r1, sl, lsl #8
    ca26:	f822 a003 	strh.w	sl, [r2, r3]
    ca2a:	445f      	add	r7, fp
    ca2c:	9a01      	ldr	r2, [sp, #4]
    ca2e:	1ebb      	subs	r3, r7, #2
    ca30:	4293      	cmp	r3, r2
    ca32:	d3d3      	bcc.n	c9dc <AttcDiscCharCmpl+0x174>
    ca34:	e7b1      	b.n	c99a <AttcDiscCharCmpl+0x132>
    ca36:	3601      	adds	r6, #1
    ca38:	b2f6      	uxtb	r6, r6
    ca3a:	e7db      	b.n	c9f4 <AttcDiscCharCmpl+0x18c>
    ca3c:	f04f 0b04 	mov.w	fp, #4
    ca40:	892a      	ldrh	r2, [r5, #8]
    ca42:	1cdf      	adds	r7, r3, #3
    ca44:	4413      	add	r3, r2
    ca46:	9301      	str	r3, [sp, #4]
    ca48:	e7f0      	b.n	ca2c <AttcDiscCharCmpl+0x1c4>

0000ca4a <AttcDiscConfigStart>:
    ca4a:	2200      	movs	r2, #0
    ca4c:	748a      	strb	r2, [r1, #18]
    ca4e:	e696      	b.n	c77e <attcDiscConfigNext>

0000ca50 <AttcDiscConfigCmpl>:
    ca50:	7c8b      	ldrb	r3, [r1, #18]
    ca52:	3301      	adds	r3, #1
    ca54:	748b      	strb	r3, [r1, #18]
    ca56:	e692      	b.n	c77e <attcDiscConfigNext>

0000ca58 <AttcDiscConfigResume>:
    ca58:	e691      	b.n	c77e <attcDiscConfigNext>
    ca5a:	bf00      	nop

0000ca5c <attcSendSimpleReq>:
    ca5c:	b570      	push	{r4, r5, r6, lr}
    ca5e:	2300      	movs	r3, #0
    ca60:	6945      	ldr	r5, [r0, #20]
    ca62:	6143      	str	r3, [r0, #20]
    ca64:	7c83      	ldrb	r3, [r0, #18]
    ca66:	2b0a      	cmp	r3, #10
    ca68:	4604      	mov	r4, r0
    ca6a:	d008      	beq.n	ca7e <attcSendSimpleReq+0x22>
    ca6c:	2310      	movs	r3, #16
    ca6e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    ca72:	4b07      	ldr	r3, [pc, #28]	; (ca90 <attcSendSimpleReq+0x34>)
    ca74:	681b      	ldr	r3, [r3, #0]
    ca76:	3024      	adds	r0, #36	; 0x24
    ca78:	7999      	ldrb	r1, [r3, #6]
    ca7a:	f008 fd9b 	bl	155b4 <WsfTimerStartSec>
    ca7e:	6821      	ldr	r1, [r4, #0]
    ca80:	882a      	ldrh	r2, [r5, #0]
    ca82:	8b09      	ldrh	r1, [r1, #24]
    ca84:	462b      	mov	r3, r5
    ca86:	2004      	movs	r0, #4
    ca88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca8c:	f004 b8cc 	b.w	10c28 <L2cDataReq>
    ca90:	10002b9c 	.word	0x10002b9c

0000ca94 <attcSendReq>:
    ca94:	7c82      	ldrb	r2, [r0, #18]
    ca96:	4b02      	ldr	r3, [pc, #8]	; (caa0 <attcSendReq+0xc>)
    ca98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ca9c:	4718      	bx	r3
    ca9e:	bf00      	nop
    caa0:	00021e80 	.word	0x00021e80

0000caa4 <attcSetupReq>:
    caa4:	b430      	push	{r4, r5}
    caa6:	460b      	mov	r3, r1
    caa8:	4604      	mov	r4, r0
    caaa:	f100 0510 	add.w	r5, r0, #16
    caae:	c907      	ldmia	r1, {r0, r1, r2}
    cab0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    cab4:	685a      	ldr	r2, [r3, #4]
    cab6:	e892 0003 	ldmia.w	r2, {r0, r1}
    caba:	f104 031c 	add.w	r3, r4, #28
    cabe:	e883 0003 	stmia.w	r3, {r0, r1}
    cac2:	4620      	mov	r0, r4
    cac4:	bc30      	pop	{r4, r5}
    cac6:	f7ff bfe5 	b.w	ca94 <attcSendReq>

0000caca <attcCcbByConnId>:
    caca:	b510      	push	{r4, lr}
    cacc:	4604      	mov	r4, r0
    cace:	f003 f8ed 	bl	fcac <DmConnInUse>
    cad2:	b120      	cbz	r0, cade <attcCcbByConnId+0x14>
    cad4:	4b02      	ldr	r3, [pc, #8]	; (cae0 <attcCcbByConnId+0x16>)
    cad6:	3c01      	subs	r4, #1
    cad8:	2038      	movs	r0, #56	; 0x38
    cada:	fb00 3004 	mla	r0, r0, r4, r3
    cade:	bd10      	pop	{r4, pc}
    cae0:	1000388c 	.word	0x1000388c

0000cae4 <attcCcbByHandle>:
    cae4:	b508      	push	{r3, lr}
    cae6:	f003 f8cd 	bl	fc84 <DmConnIdByHandle>
    caea:	b120      	cbz	r0, caf6 <attcCcbByHandle+0x12>
    caec:	4b02      	ldr	r3, [pc, #8]	; (caf8 <attcCcbByHandle+0x14>)
    caee:	3801      	subs	r0, #1
    caf0:	2238      	movs	r2, #56	; 0x38
    caf2:	fb02 3000 	mla	r0, r2, r0, r3
    caf6:	bd08      	pop	{r3, pc}
    caf8:	1000388c 	.word	0x1000388c

0000cafc <attcDataCback>:
    cafc:	b570      	push	{r4, r5, r6, lr}
    cafe:	460d      	mov	r5, r1
    cb00:	4614      	mov	r4, r2
    cb02:	f7ff ffef 	bl	cae4 <attcCcbByHandle>
    cb06:	4606      	mov	r6, r0
    cb08:	b198      	cbz	r0, cb32 <attcDataCback+0x36>
    cb0a:	7a23      	ldrb	r3, [r4, #8]
    cb0c:	2b19      	cmp	r3, #25
    cb0e:	d805      	bhi.n	cb1c <attcDataCback+0x20>
    cb10:	4622      	mov	r2, r4
    cb12:	4629      	mov	r1, r5
    cb14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb18:	f000 ba5e 	b.w	cfd8 <attcProcRsp>
    cb1c:	2b1b      	cmp	r3, #27
    cb1e:	d001      	beq.n	cb24 <attcDataCback+0x28>
    cb20:	2b1d      	cmp	r3, #29
    cb22:	d106      	bne.n	cb32 <attcDataCback+0x36>
    cb24:	4622      	mov	r2, r4
    cb26:	4629      	mov	r1, r5
    cb28:	4630      	mov	r0, r6
    cb2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb2e:	f000 baaf 	b.w	d090 <attcProcInd>
    cb32:	bd70      	pop	{r4, r5, r6, pc}

0000cb34 <attcFreePkt>:
    cb34:	b510      	push	{r4, lr}
    cb36:	4604      	mov	r4, r0
    cb38:	6840      	ldr	r0, [r0, #4]
    cb3a:	b118      	cbz	r0, cb44 <attcFreePkt+0x10>
    cb3c:	f008 fb98 	bl	15270 <WsfMsgFree>
    cb40:	2300      	movs	r3, #0
    cb42:	6063      	str	r3, [r4, #4]
    cb44:	bd10      	pop	{r4, pc}

0000cb46 <attcSendMtuReq>:
    cb46:	b510      	push	{r4, lr}
    cb48:	6803      	ldr	r3, [r0, #0]
    cb4a:	7f5a      	ldrb	r2, [r3, #29]
    cb4c:	4604      	mov	r4, r0
    cb4e:	b12a      	cbz	r2, cb5c <attcSendMtuReq+0x16>
    cb50:	3010      	adds	r0, #16
    cb52:	f7ff ffef 	bl	cb34 <attcFreePkt>
    cb56:	2300      	movs	r3, #0
    cb58:	74a3      	strb	r3, [r4, #18]
    cb5a:	bd10      	pop	{r4, pc}
    cb5c:	2201      	movs	r2, #1
    cb5e:	775a      	strb	r2, [r3, #29]
    cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb64:	e77a      	b.n	ca5c <attcSendSimpleReq>

0000cb66 <attcExecCallback>:
    cb66:	2901      	cmp	r1, #1
    cb68:	b513      	push	{r0, r1, r4, lr}
    cb6a:	d003      	beq.n	cb74 <attcExecCallback+0xe>
    cb6c:	2400      	movs	r4, #0
    cb6e:	9400      	str	r4, [sp, #0]
    cb70:	f7ff fd1c 	bl	c5ac <attExecCallback>
    cb74:	b002      	add	sp, #8
    cb76:	bd10      	pop	{r4, pc}

0000cb78 <attcSendWriteCmd>:
    cb78:	b510      	push	{r4, lr}
    cb7a:	4604      	mov	r4, r0
    cb7c:	f7ff ff6e 	bl	ca5c <attcSendSimpleReq>
    cb80:	6820      	ldr	r0, [r4, #0]
    cb82:	8b22      	ldrh	r2, [r4, #24]
    cb84:	7f00      	ldrb	r0, [r0, #28]
    cb86:	2300      	movs	r3, #0
    cb88:	210a      	movs	r1, #10
    cb8a:	f7ff ffec 	bl	cb66 <attcExecCallback>
    cb8e:	2300      	movs	r3, #0
    cb90:	74a3      	strb	r3, [r4, #18]
    cb92:	bd10      	pop	{r4, pc}

0000cb94 <attcReqClear>:
    cb94:	b570      	push	{r4, r5, r6, lr}
    cb96:	4606      	mov	r6, r0
    cb98:	4608      	mov	r0, r1
    cb9a:	460c      	mov	r4, r1
    cb9c:	4615      	mov	r5, r2
    cb9e:	f7ff ffc9 	bl	cb34 <attcFreePkt>
    cba2:	6830      	ldr	r0, [r6, #0]
    cba4:	8922      	ldrh	r2, [r4, #8]
    cba6:	78a1      	ldrb	r1, [r4, #2]
    cba8:	7f00      	ldrb	r0, [r0, #28]
    cbaa:	462b      	mov	r3, r5
    cbac:	f7ff ffdb 	bl	cb66 <attcExecCallback>
    cbb0:	2300      	movs	r3, #0
    cbb2:	70a3      	strb	r3, [r4, #2]
    cbb4:	bd70      	pop	{r4, r5, r6, pc}

0000cbb6 <attcSendPrepWriteReq>:
    cbb6:	b570      	push	{r4, r5, r6, lr}
    cbb8:	7cc3      	ldrb	r3, [r0, #19]
    cbba:	8b85      	ldrh	r5, [r0, #28]
    cbbc:	2b01      	cmp	r3, #1
    cbbe:	4604      	mov	r4, r0
    cbc0:	d149      	bne.n	cc56 <attcSendPrepWriteReq+0xa0>
    cbc2:	6803      	ldr	r3, [r0, #0]
    cbc4:	8b5b      	ldrh	r3, [r3, #26]
    cbc6:	3b05      	subs	r3, #5
    cbc8:	429d      	cmp	r5, r3
    cbca:	bfa8      	it	ge
    cbcc:	b29d      	uxthge	r5, r3
    cbce:	f105 000d 	add.w	r0, r5, #13
    cbd2:	b280      	uxth	r0, r0
    cbd4:	f7ff fd18 	bl	c608 <attMsgAlloc>
    cbd8:	4606      	mov	r6, r0
    cbda:	2800      	cmp	r0, #0
    cbdc:	d033      	beq.n	cc46 <attcSendPrepWriteReq+0x90>
    cbde:	6963      	ldr	r3, [r4, #20]
    cbe0:	4602      	mov	r2, r0
    cbe2:	f103 010c 	add.w	r1, r3, #12
    cbe6:	f853 0b04 	ldr.w	r0, [r3], #4
    cbea:	f842 0b04 	str.w	r0, [r2], #4
    cbee:	428b      	cmp	r3, r1
    cbf0:	d1f9      	bne.n	cbe6 <attcSendPrepWriteReq+0x30>
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	7013      	strb	r3, [r2, #0]
    cbf6:	6a21      	ldr	r1, [r4, #32]
    cbf8:	462a      	mov	r2, r5
    cbfa:	f106 000d 	add.w	r0, r6, #13
    cbfe:	f7ff faaf 	bl	c160 <memcpy>
    cc02:	6a23      	ldr	r3, [r4, #32]
    cc04:	442b      	add	r3, r5
    cc06:	6223      	str	r3, [r4, #32]
    cc08:	8ba3      	ldrh	r3, [r4, #28]
    cc0a:	1b5b      	subs	r3, r3, r5
    cc0c:	83a3      	strh	r3, [r4, #28]
    cc0e:	8be3      	ldrh	r3, [r4, #30]
    cc10:	72f3      	strb	r3, [r6, #11]
    cc12:	8be3      	ldrh	r3, [r4, #30]
    cc14:	0a1b      	lsrs	r3, r3, #8
    cc16:	7333      	strb	r3, [r6, #12]
    cc18:	8be3      	ldrh	r3, [r4, #30]
    cc1a:	442b      	add	r3, r5
    cc1c:	83e3      	strh	r3, [r4, #30]
    cc1e:	2310      	movs	r3, #16
    cc20:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cc24:	4b0e      	ldr	r3, [pc, #56]	; (cc60 <attcSendPrepWriteReq+0xaa>)
    cc26:	681b      	ldr	r3, [r3, #0]
    cc28:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cc2c:	7999      	ldrb	r1, [r3, #6]
    cc2e:	f008 fcc1 	bl	155b4 <WsfTimerStartSec>
    cc32:	6821      	ldr	r1, [r4, #0]
    cc34:	1d6a      	adds	r2, r5, #5
    cc36:	4633      	mov	r3, r6
    cc38:	b292      	uxth	r2, r2
    cc3a:	8b09      	ldrh	r1, [r1, #24]
    cc3c:	2004      	movs	r0, #4
    cc3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc42:	f003 bff1 	b.w	10c28 <L2cDataReq>
    cc46:	f104 0110 	add.w	r1, r4, #16
    cc4a:	4620      	mov	r0, r4
    cc4c:	2270      	movs	r2, #112	; 0x70
    cc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc52:	f7ff bf9f 	b.w	cb94 <attcReqClear>
    cc56:	2300      	movs	r3, #0
    cc58:	6946      	ldr	r6, [r0, #20]
    cc5a:	6143      	str	r3, [r0, #20]
    cc5c:	e7d7      	b.n	cc0e <attcSendPrepWriteReq+0x58>
    cc5e:	bf00      	nop
    cc60:	10002b9c 	.word	0x10002b9c

0000cc64 <attcSendContinuingReq>:
    cc64:	b570      	push	{r4, r5, r6, lr}
    cc66:	7cc3      	ldrb	r3, [r0, #19]
    cc68:	6945      	ldr	r5, [r0, #20]
    cc6a:	2b01      	cmp	r3, #1
    cc6c:	4604      	mov	r4, r0
    cc6e:	d12e      	bne.n	ccce <attcSendContinuingReq+0x6a>
    cc70:	8828      	ldrh	r0, [r5, #0]
    cc72:	3008      	adds	r0, #8
    cc74:	b280      	uxth	r0, r0
    cc76:	f7ff fcc7 	bl	c608 <attMsgAlloc>
    cc7a:	4605      	mov	r5, r0
    cc7c:	b1f8      	cbz	r0, ccbe <attcSendContinuingReq+0x5a>
    cc7e:	6961      	ldr	r1, [r4, #20]
    cc80:	880a      	ldrh	r2, [r1, #0]
    cc82:	3208      	adds	r2, #8
    cc84:	f7ff fa6c 	bl	c160 <memcpy>
    cc88:	7ca2      	ldrb	r2, [r4, #18]
    cc8a:	7fa3      	ldrb	r3, [r4, #30]
    cc8c:	2a06      	cmp	r2, #6
    cc8e:	d121      	bne.n	ccd4 <attcSendContinuingReq+0x70>
    cc90:	72eb      	strb	r3, [r5, #11]
    cc92:	8be3      	ldrh	r3, [r4, #30]
    cc94:	0a1b      	lsrs	r3, r3, #8
    cc96:	732b      	strb	r3, [r5, #12]
    cc98:	2310      	movs	r3, #16
    cc9a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cc9e:	4b11      	ldr	r3, [pc, #68]	; (cce4 <attcSendContinuingReq+0x80>)
    cca0:	681b      	ldr	r3, [r3, #0]
    cca2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cca6:	7999      	ldrb	r1, [r3, #6]
    cca8:	f008 fc84 	bl	155b4 <WsfTimerStartSec>
    ccac:	6821      	ldr	r1, [r4, #0]
    ccae:	882a      	ldrh	r2, [r5, #0]
    ccb0:	8b09      	ldrh	r1, [r1, #24]
    ccb2:	462b      	mov	r3, r5
    ccb4:	2004      	movs	r0, #4
    ccb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ccba:	f003 bfb5 	b.w	10c28 <L2cDataReq>
    ccbe:	f104 0110 	add.w	r1, r4, #16
    ccc2:	4620      	mov	r0, r4
    ccc4:	2270      	movs	r2, #112	; 0x70
    ccc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ccca:	f7ff bf63 	b.w	cb94 <attcReqClear>
    ccce:	2300      	movs	r3, #0
    ccd0:	6143      	str	r3, [r0, #20]
    ccd2:	e7d9      	b.n	cc88 <attcSendContinuingReq+0x24>
    ccd4:	726b      	strb	r3, [r5, #9]
    ccd6:	8be3      	ldrh	r3, [r4, #30]
    ccd8:	0a1b      	lsrs	r3, r3, #8
    ccda:	72ab      	strb	r3, [r5, #10]
    ccdc:	8c23      	ldrh	r3, [r4, #32]
    ccde:	72eb      	strb	r3, [r5, #11]
    cce0:	8c23      	ldrh	r3, [r4, #32]
    cce2:	e7d7      	b.n	cc94 <attcSendContinuingReq+0x30>
    cce4:	10002b9c 	.word	0x10002b9c

0000cce8 <attcConnCback>:
    cce8:	788b      	ldrb	r3, [r1, #2]
    ccea:	2b27      	cmp	r3, #39	; 0x27
    ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccf0:	4605      	mov	r5, r0
    ccf2:	d11a      	bne.n	cd2a <attcConnCback+0x42>
    ccf4:	7f00      	ldrb	r0, [r0, #28]
    ccf6:	f003 f851 	bl	fd9c <DmConnRole>
    ccfa:	2800      	cmp	r0, #0
    ccfc:	d14c      	bne.n	cd98 <attcConnCback+0xb0>
    ccfe:	4c27      	ldr	r4, [pc, #156]	; (cd9c <attcConnCback+0xb4>)
    cd00:	6823      	ldr	r3, [r4, #0]
    cd02:	889e      	ldrh	r6, [r3, #4]
    cd04:	f00a f9fc 	bl	17100 <HciGetMaxRxAclLen>
    cd08:	3804      	subs	r0, #4
    cd0a:	4286      	cmp	r6, r0
    cd0c:	da08      	bge.n	cd20 <attcConnCback+0x38>
    cd0e:	6823      	ldr	r3, [r4, #0]
    cd10:	8899      	ldrh	r1, [r3, #4]
    cd12:	2917      	cmp	r1, #23
    cd14:	d040      	beq.n	cd98 <attcConnCback+0xb0>
    cd16:	7f28      	ldrb	r0, [r5, #28]
    cd18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd1c:	f000 ba9c 	b.w	d258 <AttcMtuReq>
    cd20:	f00a f9ee 	bl	17100 <HciGetMaxRxAclLen>
    cd24:	1f01      	subs	r1, r0, #4
    cd26:	b289      	uxth	r1, r1
    cd28:	e7f3      	b.n	cd12 <attcConnCback+0x2a>
    cd2a:	2b28      	cmp	r3, #40	; 0x28
    cd2c:	d134      	bne.n	cd98 <attcConnCback+0xb0>
    cd2e:	78cc      	ldrb	r4, [r1, #3]
    cd30:	b904      	cbnz	r4, cd34 <attcConnCback+0x4c>
    cd32:	7a0c      	ldrb	r4, [r1, #8]
    cd34:	7f2e      	ldrb	r6, [r5, #28]
    cd36:	4d1a      	ldr	r5, [pc, #104]	; (cda0 <attcConnCback+0xb8>)
    cd38:	3e01      	subs	r6, #1
    cd3a:	2738      	movs	r7, #56	; 0x38
    cd3c:	4377      	muls	r7, r6
    cd3e:	eb05 0807 	add.w	r8, r5, r7
    cd42:	3420      	adds	r4, #32
    cd44:	f898 3012 	ldrb.w	r3, [r8, #18]
    cd48:	b2e4      	uxtb	r4, r4
    cd4a:	b15b      	cbz	r3, cd64 <attcConnCback+0x7c>
    cd4c:	f107 0024 	add.w	r0, r7, #36	; 0x24
    cd50:	4428      	add	r0, r5
    cd52:	f008 fc55 	bl	15600 <WsfTimerStop>
    cd56:	f107 0110 	add.w	r1, r7, #16
    cd5a:	4622      	mov	r2, r4
    cd5c:	4429      	add	r1, r5
    cd5e:	4640      	mov	r0, r8
    cd60:	f7ff ff18 	bl	cb94 <attcReqClear>
    cd64:	2338      	movs	r3, #56	; 0x38
    cd66:	fb03 5306 	mla	r3, r3, r6, r5
    cd6a:	799b      	ldrb	r3, [r3, #6]
    cd6c:	b12b      	cbz	r3, cd7a <attcConnCback+0x92>
    cd6e:	1d39      	adds	r1, r7, #4
    cd70:	4622      	mov	r2, r4
    cd72:	4429      	add	r1, r5
    cd74:	4640      	mov	r0, r8
    cd76:	f7ff ff0d 	bl	cb94 <attcReqClear>
    cd7a:	2338      	movs	r3, #56	; 0x38
    cd7c:	fb03 5606 	mla	r6, r3, r6, r5
    cd80:	3630      	adds	r6, #48	; 0x30
    cd82:	2300      	movs	r3, #0
    cd84:	80b3      	strh	r3, [r6, #4]
    cd86:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
    cd8a:	b12b      	cbz	r3, cd98 <attcConnCback+0xb0>
    cd8c:	4621      	mov	r1, r4
    cd8e:	4640      	mov	r0, r8
    cd90:	685b      	ldr	r3, [r3, #4]
    cd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd96:	4718      	bx	r3
    cd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd9c:	10002b9c 	.word	0x10002b9c
    cda0:	1000388c 	.word	0x1000388c

0000cda4 <attcMsgCback>:
    cda4:	b570      	push	{r4, r5, r6, lr}
    cda6:	4605      	mov	r5, r0
    cda8:	7800      	ldrb	r0, [r0, #0]
    cdaa:	f7ff fe8e 	bl	caca <attcCcbByConnId>
    cdae:	78ab      	ldrb	r3, [r5, #2]
    cdb0:	4604      	mov	r4, r0
    cdb2:	b938      	cbnz	r0, cdc4 <attcMsgCback+0x20>
    cdb4:	3b01      	subs	r3, #1
    cdb6:	2b0c      	cmp	r3, #12
    cdb8:	d81b      	bhi.n	cdf2 <attcMsgCback+0x4e>
    cdba:	4628      	mov	r0, r5
    cdbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdc0:	f7ff beb8 	b.w	cb34 <attcFreePkt>
    cdc4:	2b0c      	cmp	r3, #12
    cdc6:	d81a      	bhi.n	cdfe <attcMsgCback+0x5a>
    cdc8:	7983      	ldrb	r3, [r0, #6]
    cdca:	b913      	cbnz	r3, cdd2 <attcMsgCback+0x2e>
    cdcc:	7c83      	ldrb	r3, [r0, #18]
    cdce:	2b01      	cmp	r3, #1
    cdd0:	d906      	bls.n	cde0 <attcMsgCback+0x3c>
    cdd2:	2272      	movs	r2, #114	; 0x72
    cdd4:	4629      	mov	r1, r5
    cdd6:	4620      	mov	r0, r4
    cdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cddc:	f7ff beda 	b.w	cb94 <attcReqClear>
    cde0:	d002      	beq.n	cde8 <attcMsgCback+0x44>
    cde2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    cde6:	b12b      	cbz	r3, cdf4 <attcMsgCback+0x50>
    cde8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    cdec:	3404      	adds	r4, #4
    cdee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cdf2:	bd70      	pop	{r4, r5, r6, pc}
    cdf4:	4629      	mov	r1, r5
    cdf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdfa:	f7ff be53 	b.w	caa4 <attcSetupReq>
    cdfe:	f1a3 020d 	sub.w	r2, r3, #13
    ce02:	2a01      	cmp	r2, #1
    ce04:	d809      	bhi.n	ce1a <attcMsgCback+0x76>
    ce06:	4b15      	ldr	r3, [pc, #84]	; (ce5c <attcMsgCback+0xb8>)
    ce08:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d0f0      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce10:	4629      	mov	r1, r5
    ce12:	681b      	ldr	r3, [r3, #0]
    ce14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ce18:	4718      	bx	r3
    ce1a:	2b0f      	cmp	r3, #15
    ce1c:	d10f      	bne.n	ce3e <attcMsgCback+0x9a>
    ce1e:	7c83      	ldrb	r3, [r0, #18]
    ce20:	2b01      	cmp	r3, #1
    ce22:	d906      	bls.n	ce32 <attcMsgCback+0x8e>
    ce24:	3024      	adds	r0, #36	; 0x24
    ce26:	f008 fbeb 	bl	15600 <WsfTimerStop>
    ce2a:	2274      	movs	r2, #116	; 0x74
    ce2c:	f104 0110 	add.w	r1, r4, #16
    ce30:	e7d1      	b.n	cdd6 <attcMsgCback+0x32>
    ce32:	7983      	ldrb	r3, [r0, #6]
    ce34:	2b00      	cmp	r3, #0
    ce36:	d0dc      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce38:	2274      	movs	r2, #116	; 0x74
    ce3a:	1d01      	adds	r1, r0, #4
    ce3c:	e7cc      	b.n	cdd8 <attcMsgCback+0x34>
    ce3e:	2b10      	cmp	r3, #16
    ce40:	d1d7      	bne.n	cdf2 <attcMsgCback+0x4e>
    ce42:	7c83      	ldrb	r3, [r0, #18]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d0d4      	beq.n	cdf2 <attcMsgCback+0x4e>
    ce48:	2271      	movs	r2, #113	; 0x71
    ce4a:	f100 0110 	add.w	r1, r0, #16
    ce4e:	f7ff fea1 	bl	cb94 <attcReqClear>
    ce52:	6823      	ldr	r3, [r4, #0]
    ce54:	2201      	movs	r2, #1
    ce56:	77da      	strb	r2, [r3, #31]
    ce58:	e7cb      	b.n	cdf2 <attcMsgCback+0x4e>
    ce5a:	bf00      	nop
    ce5c:	1000388c 	.word	0x1000388c

0000ce60 <AttcInit>:
    ce60:	b510      	push	{r4, lr}
    ce62:	490c      	ldr	r1, [pc, #48]	; (ce94 <AttcInit+0x34>)
    ce64:	4a0c      	ldr	r2, [pc, #48]	; (ce98 <AttcInit+0x38>)
    ce66:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    ce6a:	2300      	movs	r3, #0
    ce6c:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    ce70:	3238      	adds	r2, #56	; 0x38
    ce72:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    ce76:	3301      	adds	r3, #1
    ce78:	2b08      	cmp	r3, #8
    ce7a:	f842 4c38 	str.w	r4, [r2, #-56]
    ce7e:	f802 0c0c 	strb.w	r0, [r2, #-12]
    ce82:	f822 3c0a 	strh.w	r3, [r2, #-10]
    ce86:	f102 0238 	add.w	r2, r2, #56	; 0x38
    ce8a:	d1f2      	bne.n	ce72 <AttcInit+0x12>
    ce8c:	4b03      	ldr	r3, [pc, #12]	; (ce9c <AttcInit+0x3c>)
    ce8e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ce92:	bd10      	pop	{r4, pc}
    ce94:	10003778 	.word	0x10003778
    ce98:	1000388c 	.word	0x1000388c
    ce9c:	00021eb4 	.word	0x00021eb4

0000cea0 <attcProcErrRsp>:
    cea0:	7c81      	ldrb	r1, [r0, #18]
    cea2:	7099      	strb	r1, [r3, #2]
    cea4:	1f48      	subs	r0, r1, #5
    cea6:	2801      	cmp	r0, #1
    cea8:	d908      	bls.n	cebc <attcProcErrRsp+0x1c>
    ceaa:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    ceae:	2909      	cmp	r1, #9
    ceb0:	bf1f      	itttt	ne
    ceb2:	7ad0      	ldrbne	r0, [r2, #11]
    ceb4:	7a91      	ldrbne	r1, [r2, #10]
    ceb6:	eb01 2100 	addne.w	r1, r1, r0, lsl #8
    ceba:	8159      	strhne	r1, [r3, #10]
    cebc:	7b12      	ldrb	r2, [r2, #12]
    cebe:	b11a      	cbz	r2, cec8 <attcProcErrRsp+0x28>
    cec0:	70da      	strb	r2, [r3, #3]
    cec2:	2200      	movs	r2, #0
    cec4:	811a      	strh	r2, [r3, #8]
    cec6:	4770      	bx	lr
    cec8:	2275      	movs	r2, #117	; 0x75
    ceca:	e7f9      	b.n	cec0 <attcProcErrRsp+0x20>

0000cecc <attcProcFindOrReadRsp>:
    cecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ced0:	7c87      	ldrb	r7, [r0, #18]
    ced2:	7a55      	ldrb	r5, [r2, #9]
    ced4:	3108      	adds	r1, #8
    ced6:	2f02      	cmp	r7, #2
    ced8:	4411      	add	r1, r2
    ceda:	f102 020a 	add.w	r2, r2, #10
    cede:	d12a      	bne.n	cf36 <attcProcFindOrReadRsp+0x6a>
    cee0:	2d01      	cmp	r5, #1
    cee2:	bf14      	ite	ne
    cee4:	2510      	movne	r5, #16
    cee6:	2502      	moveq	r5, #2
    cee8:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    ceec:	f64f 7eff 	movw	lr, #65535	; 0xffff
    cef0:	428a      	cmp	r2, r1
    cef2:	d210      	bcs.n	cf16 <attcProcFindOrReadRsp+0x4a>
    cef4:	7854      	ldrb	r4, [r2, #1]
    cef6:	7816      	ldrb	r6, [r2, #0]
    cef8:	eb06 2604 	add.w	r6, r6, r4, lsl #8
    cefc:	b2b6      	uxth	r6, r6
    cefe:	b146      	cbz	r6, cf12 <attcProcFindOrReadRsp+0x46>
    cf00:	f1bc 0f00 	cmp.w	ip, #0
    cf04:	d005      	beq.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf06:	45b4      	cmp	ip, r6
    cf08:	d803      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf0a:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    cf0e:	45b0      	cmp	r8, r6
    cf10:	d217      	bcs.n	cf42 <attcProcFindOrReadRsp+0x76>
    cf12:	2273      	movs	r2, #115	; 0x73
    cf14:	70da      	strb	r2, [r3, #3]
    cf16:	78db      	ldrb	r3, [r3, #3]
    cf18:	b95b      	cbnz	r3, cf32 <attcProcFindOrReadRsp+0x66>
    cf1a:	7cc3      	ldrb	r3, [r0, #19]
    cf1c:	2b01      	cmp	r3, #1
    cf1e:	d108      	bne.n	cf32 <attcProcFindOrReadRsp+0x66>
    cf20:	f1bc 0f00 	cmp.w	ip, #0
    cf24:	d003      	beq.n	cf2e <attcProcFindOrReadRsp+0x62>
    cf26:	8c03      	ldrh	r3, [r0, #32]
    cf28:	3301      	adds	r3, #1
    cf2a:	459c      	cmp	ip, r3
    cf2c:	d129      	bne.n	cf82 <attcProcFindOrReadRsp+0xb6>
    cf2e:	2300      	movs	r3, #0
    cf30:	74c3      	strb	r3, [r0, #19]
    cf32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cf36:	2f04      	cmp	r7, #4
    cf38:	bf0c      	ite	eq
    cf3a:	3d02      	subeq	r5, #2
    cf3c:	3d04      	subne	r5, #4
    cf3e:	b2ed      	uxtb	r5, r5
    cf40:	e7d2      	b.n	cee8 <attcProcFindOrReadRsp+0x1c>
    cf42:	2f08      	cmp	r7, #8
    cf44:	d11a      	bne.n	cf7c <attcProcFindOrReadRsp+0xb0>
    cf46:	f892 9003 	ldrb.w	r9, [r2, #3]
    cf4a:	7894      	ldrb	r4, [r2, #2]
    cf4c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
    cf50:	b2a4      	uxth	r4, r4
    cf52:	3204      	adds	r2, #4
    cf54:	2c00      	cmp	r4, #0
    cf56:	d0dc      	beq.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf58:	42a6      	cmp	r6, r4
    cf5a:	d8da      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf5c:	45a4      	cmp	ip, r4
    cf5e:	d8d8      	bhi.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf60:	45a0      	cmp	r8, r4
    cf62:	d3d6      	bcc.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf64:	4574      	cmp	r4, lr
    cf66:	bf18      	it	ne
    cf68:	3401      	addne	r4, #1
    cf6a:	442a      	add	r2, r5
    cf6c:	bf14      	ite	ne
    cf6e:	fa1f fc84 	uxthne.w	ip, r4
    cf72:	f04f 0c00 	moveq.w	ip, #0
    cf76:	4291      	cmp	r1, r2
    cf78:	d2ba      	bcs.n	cef0 <attcProcFindOrReadRsp+0x24>
    cf7a:	e7ca      	b.n	cf12 <attcProcFindOrReadRsp+0x46>
    cf7c:	3202      	adds	r2, #2
    cf7e:	4634      	mov	r4, r6
    cf80:	e7f0      	b.n	cf64 <attcProcFindOrReadRsp+0x98>
    cf82:	f8a0 c01e 	strh.w	ip, [r0, #30]
    cf86:	f8a0 c018 	strh.w	ip, [r0, #24]
    cf8a:	e7d2      	b.n	cf32 <attcProcFindOrReadRsp+0x66>

0000cf8c <attcProcReadRsp>:
    cf8c:	4770      	bx	lr

0000cf8e <attcProcWriteRsp>:
    cf8e:	2200      	movs	r2, #0
    cf90:	811a      	strh	r2, [r3, #8]
    cf92:	4770      	bx	lr

0000cf94 <attcProcMtuRsp>:
    cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf96:	7a93      	ldrb	r3, [r2, #10]
    cf98:	7a54      	ldrb	r4, [r2, #9]
    cf9a:	4d0e      	ldr	r5, [pc, #56]	; (cfd4 <attcProcMtuRsp+0x40>)
    cf9c:	6806      	ldr	r6, [r0, #0]
    cf9e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    cfa2:	b2a4      	uxth	r4, r4
    cfa4:	682b      	ldr	r3, [r5, #0]
    cfa6:	2c17      	cmp	r4, #23
    cfa8:	bf38      	it	cc
    cfaa:	2417      	movcc	r4, #23
    cfac:	889f      	ldrh	r7, [r3, #4]
    cfae:	f00a f8a7 	bl	17100 <HciGetMaxRxAclLen>
    cfb2:	3804      	subs	r0, #4
    cfb4:	4287      	cmp	r7, r0
    cfb6:	da07      	bge.n	cfc8 <attcProcMtuRsp+0x34>
    cfb8:	682b      	ldr	r3, [r5, #0]
    cfba:	889a      	ldrh	r2, [r3, #4]
    cfbc:	4621      	mov	r1, r4
    cfbe:	4630      	mov	r0, r6
    cfc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cfc4:	f7ff bb0e 	b.w	c5e4 <attSetMtu>
    cfc8:	f00a f89a 	bl	17100 <HciGetMaxRxAclLen>
    cfcc:	1f02      	subs	r2, r0, #4
    cfce:	b292      	uxth	r2, r2
    cfd0:	e7f4      	b.n	cfbc <attcProcMtuRsp+0x28>
    cfd2:	bf00      	nop
    cfd4:	10002b9c 	.word	0x10002b9c

0000cfd8 <attcProcRsp>:
    cfd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cfdc:	460f      	mov	r7, r1
    cfde:	7c81      	ldrb	r1, [r0, #18]
    cfe0:	4604      	mov	r4, r0
    cfe2:	4616      	mov	r6, r2
    cfe4:	2900      	cmp	r1, #0
    cfe6:	d042      	beq.n	d06e <attcProcRsp+0x96>
    cfe8:	7a13      	ldrb	r3, [r2, #8]
    cfea:	105b      	asrs	r3, r3, #1
    cfec:	b2da      	uxtb	r2, r3
    cfee:	f88d 2002 	strb.w	r2, [sp, #2]
    cff2:	b10b      	cbz	r3, cff8 <attcProcRsp+0x20>
    cff4:	4291      	cmp	r1, r2
    cff6:	d13a      	bne.n	d06e <attcProcRsp+0x96>
    cff8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cffc:	f008 fb00 	bl	15600 <WsfTimerStop>
    d000:	f106 0309 	add.w	r3, r6, #9
    d004:	9301      	str	r3, [sp, #4]
    d006:	1e7b      	subs	r3, r7, #1
    d008:	f8ad 3008 	strh.w	r3, [sp, #8]
    d00c:	8b23      	ldrh	r3, [r4, #24]
    d00e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    d012:	f8ad 300a 	strh.w	r3, [sp, #10]
    d016:	4b1c      	ldr	r3, [pc, #112]	; (d088 <attcProcRsp+0xb0>)
    d018:	2500      	movs	r5, #0
    d01a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    d01e:	f88d 5003 	strb.w	r5, [sp, #3]
    d022:	466b      	mov	r3, sp
    d024:	4632      	mov	r2, r6
    d026:	4639      	mov	r1, r7
    d028:	4620      	mov	r0, r4
    d02a:	47c0      	blx	r8
    d02c:	7ce3      	ldrb	r3, [r4, #19]
    d02e:	b113      	cbz	r3, d036 <attcProcRsp+0x5e>
    d030:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d034:	b123      	cbz	r3, d040 <attcProcRsp+0x68>
    d036:	74a5      	strb	r5, [r4, #18]
    d038:	f104 0010 	add.w	r0, r4, #16
    d03c:	f7ff fd7a 	bl	cb34 <attcFreePkt>
    d040:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d044:	2b01      	cmp	r3, #1
    d046:	d00a      	beq.n	d05e <attcProcRsp+0x86>
    d048:	7ce3      	ldrb	r3, [r4, #19]
    d04a:	f88d 300c 	strb.w	r3, [sp, #12]
    d04e:	8a23      	ldrh	r3, [r4, #16]
    d050:	f8ad 3000 	strh.w	r3, [sp]
    d054:	4b0d      	ldr	r3, [pc, #52]	; (d08c <attcProcRsp+0xb4>)
    d056:	4668      	mov	r0, sp
    d058:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d05c:	4798      	blx	r3
    d05e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d062:	b923      	cbnz	r3, d06e <attcProcRsp+0x96>
    d064:	6965      	ldr	r5, [r4, #20]
    d066:	b12d      	cbz	r5, d074 <attcProcRsp+0x9c>
    d068:	4620      	mov	r0, r4
    d06a:	f7ff fd13 	bl	ca94 <attcSendReq>
    d06e:	b004      	add	sp, #16
    d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d074:	79a3      	ldrb	r3, [r4, #6]
    d076:	2b00      	cmp	r3, #0
    d078:	d0f9      	beq.n	d06e <attcProcRsp+0x96>
    d07a:	1d21      	adds	r1, r4, #4
    d07c:	4620      	mov	r0, r4
    d07e:	f7ff fd11 	bl	caa4 <attcSetupReq>
    d082:	71a5      	strb	r5, [r4, #6]
    d084:	e7f3      	b.n	d06e <attcProcRsp+0x96>
    d086:	bf00      	nop
    d088:	00021ec4 	.word	0x00021ec4
    d08c:	10003778 	.word	0x10003778

0000d090 <attcProcInd>:
    d090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d092:	7a13      	ldrb	r3, [r2, #8]
    d094:	4604      	mov	r4, r0
    d096:	105b      	asrs	r3, r3, #1
    d098:	7a90      	ldrb	r0, [r2, #10]
    d09a:	f88d 3002 	strb.w	r3, [sp, #2]
    d09e:	320b      	adds	r2, #11
    d0a0:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    d0a4:	9201      	str	r2, [sp, #4]
    d0a6:	6822      	ldr	r2, [r4, #0]
    d0a8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    d0ac:	7f12      	ldrb	r2, [r2, #28]
    d0ae:	f8ad 2000 	strh.w	r2, [sp]
    d0b2:	b29b      	uxth	r3, r3
    d0b4:	2200      	movs	r2, #0
    d0b6:	3903      	subs	r1, #3
    d0b8:	f8ad 300a 	strh.w	r3, [sp, #10]
    d0bc:	f8ad 1008 	strh.w	r1, [sp, #8]
    d0c0:	f88d 2003 	strb.w	r2, [sp, #3]
    d0c4:	f88d 200c 	strb.w	r2, [sp, #12]
    d0c8:	b123      	cbz	r3, d0d4 <attcProcInd+0x44>
    d0ca:	4b0f      	ldr	r3, [pc, #60]	; (d108 <attcProcInd+0x78>)
    d0cc:	4668      	mov	r0, sp
    d0ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d0d2:	4798      	blx	r3
    d0d4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d0d8:	2b0e      	cmp	r3, #14
    d0da:	d10f      	bne.n	d0fc <attcProcInd+0x6c>
    d0dc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d0e0:	b973      	cbnz	r3, d100 <attcProcInd+0x70>
    d0e2:	2009      	movs	r0, #9
    d0e4:	f7ff fa90 	bl	c608 <attMsgAlloc>
    d0e8:	4603      	mov	r3, r0
    d0ea:	b138      	cbz	r0, d0fc <attcProcInd+0x6c>
    d0ec:	221e      	movs	r2, #30
    d0ee:	7202      	strb	r2, [r0, #8]
    d0f0:	6821      	ldr	r1, [r4, #0]
    d0f2:	2201      	movs	r2, #1
    d0f4:	8b09      	ldrh	r1, [r1, #24]
    d0f6:	2004      	movs	r0, #4
    d0f8:	f003 fd96 	bl	10c28 <L2cDataReq>
    d0fc:	b004      	add	sp, #16
    d0fe:	bd10      	pop	{r4, pc}
    d100:	2301      	movs	r3, #1
    d102:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    d106:	e7f9      	b.n	d0fc <attcProcInd+0x6c>
    d108:	10003778 	.word	0x10003778

0000d10c <attcSendMsg>:
    d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d110:	4605      	mov	r5, r0
    d112:	460f      	mov	r7, r1
    d114:	4616      	mov	r6, r2
    d116:	461c      	mov	r4, r3
    d118:	f89d 8020 	ldrb.w	r8, [sp, #32]
    d11c:	f00c fbcc 	bl	198b8 <WsfTaskLock>
    d120:	4628      	mov	r0, r5
    d122:	f7ff fcd2 	bl	caca <attcCcbByConnId>
    d126:	b920      	cbnz	r0, d132 <attcSendMsg+0x26>
    d128:	f00c fbcc 	bl	198c4 <WsfTaskUnlock>
    d12c:	bb7c      	cbnz	r4, d18e <attcSendMsg+0x82>
    d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d132:	6803      	ldr	r3, [r0, #0]
    d134:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    d138:	f00c fbc4 	bl	198c4 <WsfTaskUnlock>
    d13c:	f1b9 0f00 	cmp.w	r9, #0
    d140:	d0f4      	beq.n	d12c <attcSendMsg+0x20>
    d142:	b124      	cbz	r4, d14e <attcSendMsg+0x42>
    d144:	2e0b      	cmp	r6, #11
    d146:	d015      	beq.n	d174 <attcSendMsg+0x68>
    d148:	8823      	ldrh	r3, [r4, #0]
    d14a:	454b      	cmp	r3, r9
    d14c:	d819      	bhi.n	d182 <attcSendMsg+0x76>
    d14e:	200c      	movs	r0, #12
    d150:	f008 f877 	bl	15242 <WsfMsgAlloc>
    d154:	4601      	mov	r1, r0
    d156:	2800      	cmp	r0, #0
    d158:	d0e8      	beq.n	d12c <attcSendMsg+0x20>
    d15a:	4b0f      	ldr	r3, [pc, #60]	; (d198 <attcSendMsg+0x8c>)
    d15c:	8005      	strh	r5, [r0, #0]
    d15e:	f880 8003 	strb.w	r8, [r0, #3]
    d162:	7086      	strb	r6, [r0, #2]
    d164:	6044      	str	r4, [r0, #4]
    d166:	8107      	strh	r7, [r0, #8]
    d168:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d16c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d170:	f008 b88b 	b.w	1528a <WsfMsgSend>
    d174:	f1b8 0f00 	cmp.w	r8, #0
    d178:	d1e9      	bne.n	d14e <attcSendMsg+0x42>
    d17a:	8823      	ldrh	r3, [r4, #0]
    d17c:	3305      	adds	r3, #5
    d17e:	b29b      	uxth	r3, r3
    d180:	e7e3      	b.n	d14a <attcSendMsg+0x3e>
    d182:	2377      	movs	r3, #119	; 0x77
    d184:	463a      	mov	r2, r7
    d186:	4631      	mov	r1, r6
    d188:	4628      	mov	r0, r5
    d18a:	f7ff fcec 	bl	cb66 <attcExecCallback>
    d18e:	4620      	mov	r0, r4
    d190:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d194:	f008 b86c 	b.w	15270 <WsfMsgFree>
    d198:	10003778 	.word	0x10003778

0000d19c <AttcFindInfoReq>:
    d19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d19e:	4605      	mov	r5, r0
    d1a0:	200d      	movs	r0, #13
    d1a2:	460c      	mov	r4, r1
    d1a4:	4617      	mov	r7, r2
    d1a6:	461e      	mov	r6, r3
    d1a8:	f7ff fa2e 	bl	c608 <attMsgAlloc>
    d1ac:	b160      	cbz	r0, d1c8 <AttcFindInfoReq+0x2c>
    d1ae:	2305      	movs	r3, #5
    d1b0:	8003      	strh	r3, [r0, #0]
    d1b2:	2304      	movs	r3, #4
    d1b4:	7203      	strb	r3, [r0, #8]
    d1b6:	8044      	strh	r4, [r0, #2]
    d1b8:	8087      	strh	r7, [r0, #4]
    d1ba:	4603      	mov	r3, r0
    d1bc:	9600      	str	r6, [sp, #0]
    d1be:	2202      	movs	r2, #2
    d1c0:	4621      	mov	r1, r4
    d1c2:	4628      	mov	r0, r5
    d1c4:	f7ff ffa2 	bl	d10c <attcSendMsg>
    d1c8:	b003      	add	sp, #12
    d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d1cc <AttcReadReq>:
    d1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d1ce:	4605      	mov	r5, r0
    d1d0:	200b      	movs	r0, #11
    d1d2:	460c      	mov	r4, r1
    d1d4:	f7ff fa18 	bl	c608 <attMsgAlloc>
    d1d8:	4603      	mov	r3, r0
    d1da:	b168      	cbz	r0, d1f8 <AttcReadReq+0x2c>
    d1dc:	2203      	movs	r2, #3
    d1de:	8002      	strh	r2, [r0, #0]
    d1e0:	220a      	movs	r2, #10
    d1e2:	7202      	strb	r2, [r0, #8]
    d1e4:	0a22      	lsrs	r2, r4, #8
    d1e6:	7282      	strb	r2, [r0, #10]
    d1e8:	2200      	movs	r2, #0
    d1ea:	7244      	strb	r4, [r0, #9]
    d1ec:	4621      	mov	r1, r4
    d1ee:	9200      	str	r2, [sp, #0]
    d1f0:	4628      	mov	r0, r5
    d1f2:	2205      	movs	r2, #5
    d1f4:	f7ff ff8a 	bl	d10c <attcSendMsg>
    d1f8:	b003      	add	sp, #12
    d1fa:	bd30      	pop	{r4, r5, pc}

0000d1fc <AttcWriteReq>:
    d1fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d200:	4607      	mov	r7, r0
    d202:	f102 000b 	add.w	r0, r2, #11
    d206:	b280      	uxth	r0, r0
    d208:	460d      	mov	r5, r1
    d20a:	4616      	mov	r6, r2
    d20c:	4698      	mov	r8, r3
    d20e:	f7ff f9fb 	bl	c608 <attMsgAlloc>
    d212:	4604      	mov	r4, r0
    d214:	b198      	cbz	r0, d23e <AttcWriteReq+0x42>
    d216:	1cf3      	adds	r3, r6, #3
    d218:	8003      	strh	r3, [r0, #0]
    d21a:	2312      	movs	r3, #18
    d21c:	7203      	strb	r3, [r0, #8]
    d21e:	0a2b      	lsrs	r3, r5, #8
    d220:	7283      	strb	r3, [r0, #10]
    d222:	7245      	strb	r5, [r0, #9]
    d224:	4632      	mov	r2, r6
    d226:	4641      	mov	r1, r8
    d228:	300b      	adds	r0, #11
    d22a:	f7fe ff99 	bl	c160 <memcpy>
    d22e:	2300      	movs	r3, #0
    d230:	9300      	str	r3, [sp, #0]
    d232:	2209      	movs	r2, #9
    d234:	4623      	mov	r3, r4
    d236:	4629      	mov	r1, r5
    d238:	4638      	mov	r0, r7
    d23a:	f7ff ff67 	bl	d10c <attcSendMsg>
    d23e:	b002      	add	sp, #8
    d240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d244 <AttcCancelReq>:
    d244:	b507      	push	{r0, r1, r2, lr}
    d246:	2300      	movs	r3, #0
    d248:	9300      	str	r3, [sp, #0]
    d24a:	220f      	movs	r2, #15
    d24c:	4619      	mov	r1, r3
    d24e:	f7ff ff5d 	bl	d10c <attcSendMsg>
    d252:	b003      	add	sp, #12
    d254:	f85d fb04 	ldr.w	pc, [sp], #4

0000d258 <AttcMtuReq>:
    d258:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d25a:	4605      	mov	r5, r0
    d25c:	200b      	movs	r0, #11
    d25e:	460c      	mov	r4, r1
    d260:	f7ff f9d2 	bl	c608 <attMsgAlloc>
    d264:	4603      	mov	r3, r0
    d266:	b160      	cbz	r0, d282 <AttcMtuReq+0x2a>
    d268:	2203      	movs	r2, #3
    d26a:	8002      	strh	r2, [r0, #0]
    d26c:	7244      	strb	r4, [r0, #9]
    d26e:	2202      	movs	r2, #2
    d270:	0a24      	lsrs	r4, r4, #8
    d272:	2100      	movs	r1, #0
    d274:	7202      	strb	r2, [r0, #8]
    d276:	7284      	strb	r4, [r0, #10]
    d278:	2201      	movs	r2, #1
    d27a:	9100      	str	r1, [sp, #0]
    d27c:	4628      	mov	r0, r5
    d27e:	f7ff ff45 	bl	d10c <attcSendMsg>
    d282:	b003      	add	sp, #12
    d284:	bd30      	pop	{r4, r5, pc}
    d286:	bf00      	nop

0000d288 <attcProcFindByTypeRsp>:
    d288:	b5f0      	push	{r4, r5, r6, r7, lr}
    d28a:	3108      	adds	r1, #8
    d28c:	8bc5      	ldrh	r5, [r0, #30]
    d28e:	f102 0609 	add.w	r6, r2, #9
    d292:	440a      	add	r2, r1
    d294:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d298:	4296      	cmp	r6, r2
    d29a:	d217      	bcs.n	d2cc <attcProcFindByTypeRsp+0x44>
    d29c:	7874      	ldrb	r4, [r6, #1]
    d29e:	7837      	ldrb	r7, [r6, #0]
    d2a0:	f896 c003 	ldrb.w	ip, [r6, #3]
    d2a4:	eb07 2704 	add.w	r7, r7, r4, lsl #8
    d2a8:	78b4      	ldrb	r4, [r6, #2]
    d2aa:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    d2ae:	b2bf      	uxth	r7, r7
    d2b0:	b2a4      	uxth	r4, r4
    d2b2:	42a7      	cmp	r7, r4
    d2b4:	f106 0604 	add.w	r6, r6, #4
    d2b8:	d806      	bhi.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2ba:	42bd      	cmp	r5, r7
    d2bc:	d804      	bhi.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2be:	f8b0 c020 	ldrh.w	ip, [r0, #32]
    d2c2:	45bc      	cmp	ip, r7
    d2c4:	d300      	bcc.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2c6:	b96d      	cbnz	r5, d2e4 <attcProcFindByTypeRsp+0x5c>
    d2c8:	2273      	movs	r2, #115	; 0x73
    d2ca:	70da      	strb	r2, [r3, #3]
    d2cc:	78db      	ldrb	r3, [r3, #3]
    d2ce:	b943      	cbnz	r3, d2e2 <attcProcFindByTypeRsp+0x5a>
    d2d0:	7cc3      	ldrb	r3, [r0, #19]
    d2d2:	2b01      	cmp	r3, #1
    d2d4:	d105      	bne.n	d2e2 <attcProcFindByTypeRsp+0x5a>
    d2d6:	b115      	cbz	r5, d2de <attcProcFindByTypeRsp+0x56>
    d2d8:	8c03      	ldrh	r3, [r0, #32]
    d2da:	42ab      	cmp	r3, r5
    d2dc:	d20a      	bcs.n	d2f4 <attcProcFindByTypeRsp+0x6c>
    d2de:	2300      	movs	r3, #0
    d2e0:	74c3      	strb	r3, [r0, #19]
    d2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2e4:	428c      	cmp	r4, r1
    d2e6:	bf1a      	itte	ne
    d2e8:	3401      	addne	r4, #1
    d2ea:	b2a5      	uxthne	r5, r4
    d2ec:	2500      	moveq	r5, #0
    d2ee:	42b2      	cmp	r2, r6
    d2f0:	d2d2      	bcs.n	d298 <attcProcFindByTypeRsp+0x10>
    d2f2:	e7e9      	b.n	d2c8 <attcProcFindByTypeRsp+0x40>
    d2f4:	83c5      	strh	r5, [r0, #30]
    d2f6:	8305      	strh	r5, [r0, #24]
    d2f8:	e7f3      	b.n	d2e2 <attcProcFindByTypeRsp+0x5a>

0000d2fa <attcProcReadLongRsp>:
    d2fa:	7cc2      	ldrb	r2, [r0, #19]
    d2fc:	2a01      	cmp	r2, #1
    d2fe:	d10a      	bne.n	d316 <attcProcReadLongRsp+0x1c>
    d300:	6802      	ldr	r2, [r0, #0]
    d302:	8b52      	ldrh	r2, [r2, #26]
    d304:	428a      	cmp	r2, r1
    d306:	d902      	bls.n	d30e <attcProcReadLongRsp+0x14>
    d308:	2300      	movs	r3, #0
    d30a:	74c3      	strb	r3, [r0, #19]
    d30c:	4770      	bx	lr
    d30e:	8bc2      	ldrh	r2, [r0, #30]
    d310:	891b      	ldrh	r3, [r3, #8]
    d312:	4413      	add	r3, r2
    d314:	83c3      	strh	r3, [r0, #30]
    d316:	4770      	bx	lr

0000d318 <AttcFindByTypeValueReq>:
    d318:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d31c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    d320:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    d324:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    d328:	4680      	mov	r8, r0
    d32a:	f106 000f 	add.w	r0, r6, #15
    d32e:	b280      	uxth	r0, r0
    d330:	460f      	mov	r7, r1
    d332:	4693      	mov	fp, r2
    d334:	461d      	mov	r5, r3
    d336:	f7ff f967 	bl	c608 <attMsgAlloc>
    d33a:	4604      	mov	r4, r0
    d33c:	b1c8      	cbz	r0, d372 <AttcFindByTypeValueReq+0x5a>
    d33e:	1df3      	adds	r3, r6, #7
    d340:	8003      	strh	r3, [r0, #0]
    d342:	7345      	strb	r5, [r0, #13]
    d344:	2306      	movs	r3, #6
    d346:	0a2d      	lsrs	r5, r5, #8
    d348:	8047      	strh	r7, [r0, #2]
    d34a:	f8a0 b004 	strh.w	fp, [r0, #4]
    d34e:	7203      	strb	r3, [r0, #8]
    d350:	7385      	strb	r5, [r0, #14]
    d352:	4632      	mov	r2, r6
    d354:	4651      	mov	r1, sl
    d356:	300f      	adds	r0, #15
    d358:	f7fe ff02 	bl	c160 <memcpy>
    d35c:	4623      	mov	r3, r4
    d35e:	2203      	movs	r2, #3
    d360:	4639      	mov	r1, r7
    d362:	4640      	mov	r0, r8
    d364:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d368:	b001      	add	sp, #4
    d36a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d36e:	f7ff becd 	b.w	d10c <attcSendMsg>
    d372:	b001      	add	sp, #4
    d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d378 <AttcReadByTypeReq>:
    d378:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d37c:	b29d      	uxth	r5, r3
    d37e:	4680      	mov	r8, r0
    d380:	f105 000d 	add.w	r0, r5, #13
    d384:	460e      	mov	r6, r1
    d386:	4693      	mov	fp, r2
    d388:	461f      	mov	r7, r3
    d38a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d38e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d392:	f7ff f939 	bl	c608 <attMsgAlloc>
    d396:	4604      	mov	r4, r0
    d398:	b1b0      	cbz	r0, d3c8 <AttcReadByTypeReq+0x50>
    d39a:	2308      	movs	r3, #8
    d39c:	3505      	adds	r5, #5
    d39e:	8005      	strh	r5, [r0, #0]
    d3a0:	8046      	strh	r6, [r0, #2]
    d3a2:	f8a0 b004 	strh.w	fp, [r0, #4]
    d3a6:	7203      	strb	r3, [r0, #8]
    d3a8:	463a      	mov	r2, r7
    d3aa:	4651      	mov	r1, sl
    d3ac:	300d      	adds	r0, #13
    d3ae:	f7fe fed7 	bl	c160 <memcpy>
    d3b2:	4623      	mov	r3, r4
    d3b4:	2204      	movs	r2, #4
    d3b6:	4631      	mov	r1, r6
    d3b8:	4640      	mov	r0, r8
    d3ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d3be:	b001      	add	sp, #4
    d3c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3c4:	f7ff bea2 	b.w	d10c <attcSendMsg>
    d3c8:	b001      	add	sp, #4
    d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d3ce <AttcReadLongReq>:
    d3ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d3d0:	4605      	mov	r5, r0
    d3d2:	200d      	movs	r0, #13
    d3d4:	460c      	mov	r4, r1
    d3d6:	4617      	mov	r7, r2
    d3d8:	461e      	mov	r6, r3
    d3da:	f7ff f915 	bl	c608 <attMsgAlloc>
    d3de:	b170      	cbz	r0, d3fe <AttcReadLongReq+0x30>
    d3e0:	2305      	movs	r3, #5
    d3e2:	8003      	strh	r3, [r0, #0]
    d3e4:	230c      	movs	r3, #12
    d3e6:	7203      	strb	r3, [r0, #8]
    d3e8:	0a23      	lsrs	r3, r4, #8
    d3ea:	7283      	strb	r3, [r0, #10]
    d3ec:	8047      	strh	r7, [r0, #2]
    d3ee:	7244      	strb	r4, [r0, #9]
    d3f0:	4603      	mov	r3, r0
    d3f2:	9600      	str	r6, [sp, #0]
    d3f4:	2206      	movs	r2, #6
    d3f6:	4621      	mov	r1, r4
    d3f8:	4628      	mov	r0, r5
    d3fa:	f7ff fe87 	bl	d10c <attcSendMsg>
    d3fe:	b003      	add	sp, #12
    d400:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d402 <AttcReadMultipleReq>:
    d402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d404:	004e      	lsls	r6, r1, #1
    d406:	4607      	mov	r7, r0
    d408:	f106 0009 	add.w	r0, r6, #9
    d40c:	460d      	mov	r5, r1
    d40e:	4614      	mov	r4, r2
    d410:	f7ff f8fa 	bl	c608 <attMsgAlloc>
    d414:	4603      	mov	r3, r0
    d416:	b1a0      	cbz	r0, d442 <AttcReadMultipleReq+0x40>
    d418:	3601      	adds	r6, #1
    d41a:	4622      	mov	r2, r4
    d41c:	8006      	strh	r6, [r0, #0]
    d41e:	200e      	movs	r0, #14
    d420:	f832 1902 	ldrh.w	r1, [r2], #-2
    d424:	7218      	strb	r0, [r3, #8]
    d426:	f103 0009 	add.w	r0, r3, #9
    d42a:	3d01      	subs	r5, #1
    d42c:	b2ed      	uxtb	r5, r5
    d42e:	2dff      	cmp	r5, #255	; 0xff
    d430:	f100 0002 	add.w	r0, r0, #2
    d434:	d107      	bne.n	d446 <AttcReadMultipleReq+0x44>
    d436:	2200      	movs	r2, #0
    d438:	9200      	str	r2, [sp, #0]
    d43a:	4638      	mov	r0, r7
    d43c:	2207      	movs	r2, #7
    d43e:	f7ff fe65 	bl	d10c <attcSendMsg>
    d442:	b003      	add	sp, #12
    d444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d446:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    d44a:	f800 4c02 	strb.w	r4, [r0, #-2]
    d44e:	8814      	ldrh	r4, [r2, #0]
    d450:	0a24      	lsrs	r4, r4, #8
    d452:	f800 4c01 	strb.w	r4, [r0, #-1]
    d456:	e7e8      	b.n	d42a <AttcReadMultipleReq+0x28>

0000d458 <AttcReadByGroupTypeReq>:
    d458:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d45c:	b29d      	uxth	r5, r3
    d45e:	4680      	mov	r8, r0
    d460:	f105 000d 	add.w	r0, r5, #13
    d464:	460e      	mov	r6, r1
    d466:	4693      	mov	fp, r2
    d468:	461f      	mov	r7, r3
    d46a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d46e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d472:	f7ff f8c9 	bl	c608 <attMsgAlloc>
    d476:	4604      	mov	r4, r0
    d478:	b1b0      	cbz	r0, d4a8 <AttcReadByGroupTypeReq+0x50>
    d47a:	2310      	movs	r3, #16
    d47c:	3505      	adds	r5, #5
    d47e:	8005      	strh	r5, [r0, #0]
    d480:	8046      	strh	r6, [r0, #2]
    d482:	f8a0 b004 	strh.w	fp, [r0, #4]
    d486:	7203      	strb	r3, [r0, #8]
    d488:	463a      	mov	r2, r7
    d48a:	4651      	mov	r1, sl
    d48c:	300d      	adds	r0, #13
    d48e:	f7fe fe67 	bl	c160 <memcpy>
    d492:	4623      	mov	r3, r4
    d494:	2208      	movs	r2, #8
    d496:	4631      	mov	r1, r6
    d498:	4640      	mov	r0, r8
    d49a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d49e:	b001      	add	sp, #4
    d4a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4a4:	f7ff be32 	b.w	d10c <attcSendMsg>
    d4a8:	b001      	add	sp, #4
    d4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d4ae <attcProcPrepWriteRsp>:
    d4ae:	7cc2      	ldrb	r2, [r0, #19]
    d4b0:	2a01      	cmp	r2, #1
    d4b2:	d102      	bne.n	d4ba <attcProcPrepWriteRsp+0xc>
    d4b4:	8b82      	ldrh	r2, [r0, #28]
    d4b6:	b902      	cbnz	r2, d4ba <attcProcPrepWriteRsp+0xc>
    d4b8:	74c2      	strb	r2, [r0, #19]
    d4ba:	2200      	movs	r2, #0
    d4bc:	811a      	strh	r2, [r3, #8]
    d4be:	4770      	bx	lr

0000d4c0 <AttcWriteCmd>:
    d4c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d4c4:	4607      	mov	r7, r0
    d4c6:	f102 000b 	add.w	r0, r2, #11
    d4ca:	b280      	uxth	r0, r0
    d4cc:	460d      	mov	r5, r1
    d4ce:	4616      	mov	r6, r2
    d4d0:	4698      	mov	r8, r3
    d4d2:	f7ff f899 	bl	c608 <attMsgAlloc>
    d4d6:	4604      	mov	r4, r0
    d4d8:	b198      	cbz	r0, d502 <AttcWriteCmd+0x42>
    d4da:	1cf3      	adds	r3, r6, #3
    d4dc:	8003      	strh	r3, [r0, #0]
    d4de:	2352      	movs	r3, #82	; 0x52
    d4e0:	7203      	strb	r3, [r0, #8]
    d4e2:	0a2b      	lsrs	r3, r5, #8
    d4e4:	7283      	strb	r3, [r0, #10]
    d4e6:	7245      	strb	r5, [r0, #9]
    d4e8:	4632      	mov	r2, r6
    d4ea:	4641      	mov	r1, r8
    d4ec:	300b      	adds	r0, #11
    d4ee:	f7fe fe37 	bl	c160 <memcpy>
    d4f2:	2300      	movs	r3, #0
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	220a      	movs	r2, #10
    d4f8:	4623      	mov	r3, r4
    d4fa:	4629      	mov	r1, r5
    d4fc:	4638      	mov	r0, r7
    d4fe:	f7ff fe05 	bl	d10c <attcSendMsg>
    d502:	b002      	add	sp, #8
    d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d508 <AttcPrepareWriteReq>:
    d508:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    d510:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d514:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    d518:	4607      	mov	r7, r0
    d51a:	460d      	mov	r5, r1
    d51c:	4693      	mov	fp, r2
    d51e:	4698      	mov	r8, r3
    d520:	b116      	cbz	r6, d528 <AttcPrepareWriteReq+0x20>
    d522:	f1ba 0f00 	cmp.w	sl, #0
    d526:	d11f      	bne.n	d568 <AttcPrepareWriteReq+0x60>
    d528:	f108 000d 	add.w	r0, r8, #13
    d52c:	b280      	uxth	r0, r0
    d52e:	f7ff f86b 	bl	c608 <attMsgAlloc>
    d532:	4604      	mov	r4, r0
    d534:	b310      	cbz	r0, d57c <AttcPrepareWriteReq+0x74>
    d536:	2316      	movs	r3, #22
    d538:	7203      	strb	r3, [r0, #8]
    d53a:	0a2b      	lsrs	r3, r5, #8
    d53c:	f8a0 8000 	strh.w	r8, [r0]
    d540:	f8a0 b002 	strh.w	fp, [r0, #2]
    d544:	7245      	strb	r5, [r0, #9]
    d546:	7283      	strb	r3, [r0, #10]
    d548:	b186      	cbz	r6, d56c <AttcPrepareWriteReq+0x64>
    d54a:	f1ba 0f00 	cmp.w	sl, #0
    d54e:	d00d      	beq.n	d56c <AttcPrepareWriteReq+0x64>
    d550:	f8c0 9004 	str.w	r9, [r0, #4]
    d554:	4623      	mov	r3, r4
    d556:	220b      	movs	r2, #11
    d558:	4629      	mov	r1, r5
    d55a:	4638      	mov	r0, r7
    d55c:	960a      	str	r6, [sp, #40]	; 0x28
    d55e:	b001      	add	sp, #4
    d560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d564:	f7ff bdd2 	b.w	d10c <attcSendMsg>
    d568:	200d      	movs	r0, #13
    d56a:	e7e0      	b.n	d52e <AttcPrepareWriteReq+0x26>
    d56c:	f104 000d 	add.w	r0, r4, #13
    d570:	4642      	mov	r2, r8
    d572:	4649      	mov	r1, r9
    d574:	f7fe fdf4 	bl	c160 <memcpy>
    d578:	6060      	str	r0, [r4, #4]
    d57a:	e7eb      	b.n	d554 <AttcPrepareWriteReq+0x4c>
    d57c:	b001      	add	sp, #4
    d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d582 <AttcExecuteWriteReq>:
    d582:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d584:	4604      	mov	r4, r0
    d586:	200a      	movs	r0, #10
    d588:	460d      	mov	r5, r1
    d58a:	f7ff f83d 	bl	c608 <attMsgAlloc>
    d58e:	4603      	mov	r3, r0
    d590:	b150      	cbz	r0, d5a8 <AttcExecuteWriteReq+0x26>
    d592:	2202      	movs	r2, #2
    d594:	8002      	strh	r2, [r0, #0]
    d596:	2100      	movs	r1, #0
    d598:	2218      	movs	r2, #24
    d59a:	7202      	strb	r2, [r0, #8]
    d59c:	7245      	strb	r5, [r0, #9]
    d59e:	220c      	movs	r2, #12
    d5a0:	9100      	str	r1, [sp, #0]
    d5a2:	4620      	mov	r0, r4
    d5a4:	f7ff fdb2 	bl	d10c <attcSendMsg>
    d5a8:	b003      	add	sp, #12
    d5aa:	bd30      	pop	{r4, r5, pc}

0000d5ac <attsCccMainCback>:
    d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5ae:	4d2e      	ldr	r5, [pc, #184]	; (d668 <attsCccMainCback+0xbc>)
    d5b0:	2905      	cmp	r1, #5
    d5b2:	b085      	sub	sp, #20
    d5b4:	6a2e      	ldr	r6, [r5, #32]
    d5b6:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
    d5ba:	f04f 0100 	mov.w	r1, #0
    d5be:	d041      	beq.n	d644 <attsCccMainCback+0x98>
    d5c0:	b2cf      	uxtb	r7, r1
    d5c2:	4567      	cmp	r7, ip
    d5c4:	d340      	bcc.n	d648 <attsCccMainCback+0x9c>
    d5c6:	d048      	beq.n	d65a <attsCccMainCback+0xae>
    d5c8:	785c      	ldrb	r4, [r3, #1]
    d5ca:	781b      	ldrb	r3, [r3, #0]
    d5cc:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    d5d0:	b29b      	uxth	r3, r3
    d5d2:	2b02      	cmp	r3, #2
    d5d4:	d844      	bhi.n	d660 <attsCccMainCback+0xb4>
    d5d6:	b113      	cbz	r3, d5de <attsCccMainCback+0x32>
    d5d8:	8874      	ldrh	r4, [r6, #2]
    d5da:	4223      	tst	r3, r4
    d5dc:	d040      	beq.n	d660 <attsCccMainCback+0xb4>
    d5de:	1e44      	subs	r4, r0, #1
    d5e0:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    d5e4:	2c00      	cmp	r4, #0
    d5e6:	d03d      	beq.n	d664 <attsCccMainCback+0xb8>
    d5e8:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
    d5ec:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
    d5f0:	42b3      	cmp	r3, r6
    d5f2:	d025      	beq.n	d640 <attsCccMainCback+0x94>
    d5f4:	2110      	movs	r1, #16
    d5f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    d5fa:	f8ad 300a 	strh.w	r3, [sp, #10]
    d5fe:	f88d 1006 	strb.w	r1, [sp, #6]
    d602:	f88d 700c 	strb.w	r7, [sp, #12]
    d606:	f8ad 2008 	strh.w	r2, [sp, #8]
    d60a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d60c:	a801      	add	r0, sp, #4
    d60e:	4798      	blx	r3
    d610:	e016      	b.n	d640 <attsCccMainCback+0x94>
    d612:	1c4c      	adds	r4, r1, #1
    d614:	fb07 6e04 	mla	lr, r7, r4, r6
    d618:	f83e ec06 	ldrh.w	lr, [lr, #-6]
    d61c:	4596      	cmp	lr, r2
    d61e:	d004      	beq.n	d62a <attsCccMainCback+0x7e>
    d620:	4621      	mov	r1, r4
    d622:	b2cc      	uxtb	r4, r1
    d624:	4564      	cmp	r4, ip
    d626:	d3f4      	bcc.n	d612 <attsCccMainCback+0x66>
    d628:	d017      	beq.n	d65a <attsCccMainCback+0xae>
    d62a:	3801      	subs	r0, #1
    d62c:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
    d630:	b1c2      	cbz	r2, d664 <attsCccMainCback+0xb8>
    d632:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    d636:	7018      	strb	r0, [r3, #0]
    d638:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    d63c:	0a12      	lsrs	r2, r2, #8
    d63e:	705a      	strb	r2, [r3, #1]
    d640:	2000      	movs	r0, #0
    d642:	e00b      	b.n	d65c <attsCccMainCback+0xb0>
    d644:	2706      	movs	r7, #6
    d646:	e7ec      	b.n	d622 <attsCccMainCback+0x76>
    d648:	f8b6 e000 	ldrh.w	lr, [r6]
    d64c:	4596      	cmp	lr, r2
    d64e:	f101 0401 	add.w	r4, r1, #1
    d652:	d0b9      	beq.n	d5c8 <attsCccMainCback+0x1c>
    d654:	3606      	adds	r6, #6
    d656:	4621      	mov	r1, r4
    d658:	e7b2      	b.n	d5c0 <attsCccMainCback+0x14>
    d65a:	200a      	movs	r0, #10
    d65c:	b005      	add	sp, #20
    d65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d660:	2080      	movs	r0, #128	; 0x80
    d662:	e7fb      	b.n	d65c <attsCccMainCback+0xb0>
    d664:	2011      	movs	r0, #17
    d666:	e7f9      	b.n	d65c <attsCccMainCback+0xb0>
    d668:	10003a50 	.word	0x10003a50

0000d66c <AttsCccRegister>:
    d66c:	4b04      	ldr	r3, [pc, #16]	; (d680 <AttsCccRegister+0x14>)
    d66e:	e9c3 1208 	strd	r1, r2, [r3, #32]
    d672:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    d676:	4b03      	ldr	r3, [pc, #12]	; (d684 <AttsCccRegister+0x18>)
    d678:	4a03      	ldr	r2, [pc, #12]	; (d688 <AttsCccRegister+0x1c>)
    d67a:	615a      	str	r2, [r3, #20]
    d67c:	4770      	bx	lr
    d67e:	bf00      	nop
    d680:	10003a50 	.word	0x10003a50
    d684:	10003bdc 	.word	0x10003bdc
    d688:	0000d5ad 	.word	0x0000d5ad

0000d68c <AttsCccInitTable>:
    d68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d690:	1e45      	subs	r5, r0, #1
    d692:	4c1e      	ldr	r4, [pc, #120]	; (d70c <AttsCccInitTable+0x80>)
    d694:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    d698:	4607      	mov	r7, r0
    d69a:	460e      	mov	r6, r1
    d69c:	b933      	cbnz	r3, d6ac <AttsCccInitTable+0x20>
    d69e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d6a2:	0040      	lsls	r0, r0, #1
    d6a4:	f007 fd3e 	bl	15124 <WsfBufAlloc>
    d6a8:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    d6ac:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
    d6b0:	f1b8 0f00 	cmp.w	r8, #0
    d6b4:	d022      	beq.n	d6fc <AttsCccInitTable+0x70>
    d6b6:	bb26      	cbnz	r6, d702 <AttsCccInitTable+0x76>
    d6b8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d6bc:	4631      	mov	r1, r6
    d6be:	0052      	lsls	r2, r2, #1
    d6c0:	4640      	mov	r0, r8
    d6c2:	f7fe fe4b 	bl	c35c <memset>
    d6c6:	e019      	b.n	d6fc <AttsCccInitTable+0x70>
    d6c8:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d6cc:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    d6d0:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d6d4:	b162      	cbz	r2, d6f0 <AttsCccInitTable+0x64>
    d6d6:	f88d 300c 	strb.w	r3, [sp, #12]
    d6da:	f88d 9006 	strb.w	r9, [sp, #6]
    d6de:	f8ad 7004 	strh.w	r7, [sp, #4]
    d6e2:	f8ad a008 	strh.w	sl, [sp, #8]
    d6e6:	f8ad 200a 	strh.w	r2, [sp, #10]
    d6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d6ec:	a801      	add	r0, sp, #4
    d6ee:	4798      	blx	r3
    d6f0:	3501      	adds	r5, #1
    d6f2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d6f6:	b2eb      	uxtb	r3, r5
    d6f8:	429a      	cmp	r2, r3
    d6fa:	d8e5      	bhi.n	d6c8 <AttsCccInitTable+0x3c>
    d6fc:	b004      	add	sp, #16
    d6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d702:	2500      	movs	r5, #0
    d704:	f04f 0910 	mov.w	r9, #16
    d708:	46aa      	mov	sl, r5
    d70a:	e7f2      	b.n	d6f2 <AttsCccInitTable+0x66>
    d70c:	10003a50 	.word	0x10003a50

0000d710 <AttsCccClearTable>:
    d710:	b538      	push	{r3, r4, r5, lr}
    d712:	1e45      	subs	r5, r0, #1
    d714:	4c04      	ldr	r4, [pc, #16]	; (d728 <AttsCccClearTable+0x18>)
    d716:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    d71a:	b120      	cbz	r0, d726 <AttsCccClearTable+0x16>
    d71c:	f007 fd42 	bl	151a4 <WsfBufFree>
    d720:	2300      	movs	r3, #0
    d722:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
    d726:	bd38      	pop	{r3, r4, r5, pc}
    d728:	10003a50 	.word	0x10003a50

0000d72c <AttsCccGet>:
    d72c:	3801      	subs	r0, #1
    d72e:	4b03      	ldr	r3, [pc, #12]	; (d73c <AttsCccGet+0x10>)
    d730:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    d734:	b108      	cbz	r0, d73a <AttsCccGet+0xe>
    d736:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    d73a:	4770      	bx	lr
    d73c:	10003a50 	.word	0x10003a50

0000d740 <AttsCccSet>:
    d740:	3801      	subs	r0, #1
    d742:	4b03      	ldr	r3, [pc, #12]	; (d750 <AttsCccSet+0x10>)
    d744:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d748:	b10b      	cbz	r3, d74e <AttsCccSet+0xe>
    d74a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    d74e:	4770      	bx	lr
    d750:	10003a50 	.word	0x10003a50

0000d754 <AttsCccEnabled>:
    d754:	b538      	push	{r3, r4, r5, lr}
    d756:	460c      	mov	r4, r1
    d758:	4605      	mov	r5, r0
    d75a:	f002 faeb 	bl	fd34 <DmConnSecLevel>
    d75e:	4b08      	ldr	r3, [pc, #32]	; (d780 <AttsCccEnabled+0x2c>)
    d760:	6a1b      	ldr	r3, [r3, #32]
    d762:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d766:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    d76a:	791b      	ldrb	r3, [r3, #4]
    d76c:	4283      	cmp	r3, r0
    d76e:	d805      	bhi.n	d77c <AttsCccEnabled+0x28>
    d770:	4621      	mov	r1, r4
    d772:	4628      	mov	r0, r5
    d774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d778:	f7ff bfd8 	b.w	d72c <AttsCccGet>
    d77c:	2000      	movs	r0, #0
    d77e:	bd38      	pop	{r3, r4, r5, pc}
    d780:	10003a50 	.word	0x10003a50

0000d784 <attsIndCcbByConnId>:
    d784:	b510      	push	{r4, lr}
    d786:	4604      	mov	r4, r0
    d788:	f002 fa90 	bl	fcac <DmConnInUse>
    d78c:	b120      	cbz	r0, d798 <attsIndCcbByConnId+0x14>
    d78e:	4b03      	ldr	r3, [pc, #12]	; (d79c <attsIndCcbByConnId+0x18>)
    d790:	3c01      	subs	r4, #1
    d792:	202c      	movs	r0, #44	; 0x2c
    d794:	fb00 3004 	mla	r0, r0, r4, r3
    d798:	bd10      	pop	{r4, pc}
    d79a:	bf00      	nop
    d79c:	10003a7c 	.word	0x10003a7c

0000d7a0 <attsExecCallback>:
    d7a0:	b507      	push	{r0, r1, r2, lr}
    d7a2:	2300      	movs	r3, #0
    d7a4:	9300      	str	r3, [sp, #0]
    d7a6:	4613      	mov	r3, r2
    d7a8:	460a      	mov	r2, r1
    d7aa:	210f      	movs	r1, #15
    d7ac:	f7fe fefe 	bl	c5ac <attExecCallback>
    d7b0:	b003      	add	sp, #12
    d7b2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d7b6 <attsIndNtfCallback>:
    d7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7ba:	460c      	mov	r4, r1
    d7bc:	8ac9      	ldrh	r1, [r1, #22]
    d7be:	4606      	mov	r6, r0
    d7c0:	4617      	mov	r7, r2
    d7c2:	b119      	cbz	r1, d7cc <attsIndNtfCallback+0x16>
    d7c4:	f7ff ffec 	bl	d7a0 <attsExecCallback>
    d7c8:	2300      	movs	r3, #0
    d7ca:	82e3      	strh	r3, [r4, #22]
    d7cc:	f104 0518 	add.w	r5, r4, #24
    d7d0:	f04f 0800 	mov.w	r8, #0
    d7d4:	342c      	adds	r4, #44	; 0x2c
    d7d6:	f835 1b02 	ldrh.w	r1, [r5], #2
    d7da:	b129      	cbz	r1, d7e8 <attsIndNtfCallback+0x32>
    d7dc:	463a      	mov	r2, r7
    d7de:	4630      	mov	r0, r6
    d7e0:	f7ff ffde 	bl	d7a0 <attsExecCallback>
    d7e4:	f825 8c02 	strh.w	r8, [r5, #-2]
    d7e8:	42ac      	cmp	r4, r5
    d7ea:	d1f4      	bne.n	d7d6 <attsIndNtfCallback+0x20>
    d7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d7f0 <attsIndCtrlCback>:
    d7f0:	b510      	push	{r4, lr}
    d7f2:	4604      	mov	r4, r0
    d7f4:	7800      	ldrb	r0, [r0, #0]
    d7f6:	f7ff ffc5 	bl	d784 <attsIndCcbByConnId>
    d7fa:	4601      	mov	r1, r0
    d7fc:	b120      	cbz	r0, d808 <attsIndCtrlCback+0x18>
    d7fe:	7820      	ldrb	r0, [r4, #0]
    d800:	2200      	movs	r2, #0
    d802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d806:	e7d6      	b.n	d7b6 <attsIndNtfCallback>
    d808:	bd10      	pop	{r4, pc}

0000d80a <attsIndMsgCback>:
    d80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d80c:	4605      	mov	r5, r0
    d80e:	7800      	ldrb	r0, [r0, #0]
    d810:	f7ff ffb8 	bl	d784 <attsIndCcbByConnId>
    d814:	78ab      	ldrb	r3, [r5, #2]
    d816:	4604      	mov	r4, r0
    d818:	b930      	cbnz	r0, d828 <attsIndMsgCback+0x1e>
    d81a:	2b21      	cmp	r3, #33	; 0x21
    d81c:	d13d      	bne.n	d89a <attsIndMsgCback+0x90>
    d81e:	6868      	ldr	r0, [r5, #4]
    d820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d824:	f007 bd24 	b.w	15270 <WsfMsgFree>
    d828:	2b21      	cmp	r3, #33	; 0x21
    d82a:	d13b      	bne.n	d8a4 <attsIndMsgCback+0x9a>
    d82c:	686b      	ldr	r3, [r5, #4]
    d82e:	7a1a      	ldrb	r2, [r3, #8]
    d830:	885e      	ldrh	r6, [r3, #2]
    d832:	2a1d      	cmp	r2, #29
    d834:	d113      	bne.n	d85e <attsIndMsgCback+0x54>
    d836:	8ac2      	ldrh	r2, [r0, #22]
    d838:	bb12      	cbnz	r2, d880 <attsIndMsgCback+0x76>
    d83a:	6901      	ldr	r1, [r0, #16]
    d83c:	881a      	ldrh	r2, [r3, #0]
    d83e:	8b09      	ldrh	r1, [r1, #24]
    d840:	2004      	movs	r0, #4
    d842:	f003 f9f1 	bl	10c28 <L2cDataReq>
    d846:	2322      	movs	r3, #34	; 0x22
    d848:	7323      	strb	r3, [r4, #12]
    d84a:	4b27      	ldr	r3, [pc, #156]	; (d8e8 <attsIndMsgCback+0xde>)
    d84c:	82e6      	strh	r6, [r4, #22]
    d84e:	681b      	ldr	r3, [r3, #0]
    d850:	82a6      	strh	r6, [r4, #20]
    d852:	7999      	ldrb	r1, [r3, #6]
    d854:	4620      	mov	r0, r4
    d856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d85a:	f007 beab 	b.w	155b4 <WsfTimerStartSec>
    d85e:	f100 0118 	add.w	r1, r0, #24
    d862:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
    d866:	2200      	movs	r2, #0
    d868:	460f      	mov	r7, r1
    d86a:	f831 0b02 	ldrh.w	r0, [r1], #2
    d86e:	b118      	cbz	r0, d878 <attsIndMsgCback+0x6e>
    d870:	4286      	cmp	r6, r0
    d872:	d005      	beq.n	d880 <attsIndMsgCback+0x76>
    d874:	3201      	adds	r2, #1
    d876:	b2d2      	uxtb	r2, r2
    d878:	458c      	cmp	ip, r1
    d87a:	d1f6      	bne.n	d86a <attsIndMsgCback+0x60>
    d87c:	2a09      	cmp	r2, #9
    d87e:	d922      	bls.n	d8c6 <attsIndMsgCback+0xbc>
    d880:	2272      	movs	r2, #114	; 0x72
    d882:	4631      	mov	r1, r6
    d884:	7828      	ldrb	r0, [r5, #0]
    d886:	f7ff ff8b 	bl	d7a0 <attsExecCallback>
    d88a:	e7c8      	b.n	d81e <attsIndMsgCback+0x14>
    d88c:	2300      	movs	r3, #0
    d88e:	f837 2b02 	ldrh.w	r2, [r7], #2
    d892:	b91a      	cbnz	r2, d89c <attsIndMsgCback+0x92>
    d894:	330c      	adds	r3, #12
    d896:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
    d89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d89c:	3301      	adds	r3, #1
    d89e:	2b0a      	cmp	r3, #10
    d8a0:	d1f5      	bne.n	d88e <attsIndMsgCback+0x84>
    d8a2:	e7fa      	b.n	d89a <attsIndMsgCback+0x90>
    d8a4:	2b22      	cmp	r3, #34	; 0x22
    d8a6:	d1f8      	bne.n	d89a <attsIndMsgCback+0x90>
    d8a8:	8a83      	ldrh	r3, [r0, #20]
    d8aa:	2b00      	cmp	r3, #0
    d8ac:	d0f5      	beq.n	d89a <attsIndMsgCback+0x90>
    d8ae:	2600      	movs	r6, #0
    d8b0:	8286      	strh	r6, [r0, #20]
    d8b2:	2271      	movs	r2, #113	; 0x71
    d8b4:	8ac1      	ldrh	r1, [r0, #22]
    d8b6:	7828      	ldrb	r0, [r5, #0]
    d8b8:	f7ff ff72 	bl	d7a0 <attsExecCallback>
    d8bc:	6923      	ldr	r3, [r4, #16]
    d8be:	82e6      	strh	r6, [r4, #22]
    d8c0:	2201      	movs	r2, #1
    d8c2:	77da      	strb	r2, [r3, #31]
    d8c4:	e7e9      	b.n	d89a <attsIndMsgCback+0x90>
    d8c6:	6921      	ldr	r1, [r4, #16]
    d8c8:	881a      	ldrh	r2, [r3, #0]
    d8ca:	8b09      	ldrh	r1, [r1, #24]
    d8cc:	882d      	ldrh	r5, [r5, #0]
    d8ce:	2004      	movs	r0, #4
    d8d0:	f003 f9aa 	bl	10c28 <L2cDataReq>
    d8d4:	6923      	ldr	r3, [r4, #16]
    d8d6:	7f9a      	ldrb	r2, [r3, #30]
    d8d8:	2a00      	cmp	r2, #0
    d8da:	d1d7      	bne.n	d88c <attsIndMsgCback+0x82>
    d8dc:	4631      	mov	r1, r6
    d8de:	b2e8      	uxtb	r0, r5
    d8e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d8e4:	e75c      	b.n	d7a0 <attsExecCallback>
    d8e6:	bf00      	nop
    d8e8:	10002b9c 	.word	0x10002b9c

0000d8ec <attsHandleValueIndNtf>:
    d8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d8f0:	4606      	mov	r6, r0
    d8f2:	460c      	mov	r4, r1
    d8f4:	4617      	mov	r7, r2
    d8f6:	4698      	mov	r8, r3
    d8f8:	f89d a020 	ldrb.w	sl, [sp, #32]
    d8fc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d900:	f00b ffda 	bl	198b8 <WsfTaskLock>
    d904:	4630      	mov	r0, r6
    d906:	f7ff ff3d 	bl	d784 <attsIndCcbByConnId>
    d90a:	b950      	cbnz	r0, d922 <attsHandleValueIndNtf+0x36>
    d90c:	f00b ffda 	bl	198c4 <WsfTaskUnlock>
    d910:	f1b9 0f00 	cmp.w	r9, #0
    d914:	d048      	beq.n	d9a8 <attsHandleValueIndNtf+0xbc>
    d916:	4651      	mov	r1, sl
    d918:	4640      	mov	r0, r8
    d91a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d91e:	f7fe bedb 	b.w	c6d8 <AttMsgFree>
    d922:	6903      	ldr	r3, [r0, #16]
    d924:	8b5d      	ldrh	r5, [r3, #26]
    d926:	f00b ffcd 	bl	198c4 <WsfTaskUnlock>
    d92a:	2d00      	cmp	r5, #0
    d92c:	d0f0      	beq.n	d910 <attsHandleValueIndNtf+0x24>
    d92e:	1cbb      	adds	r3, r7, #2
    d930:	42ab      	cmp	r3, r5
    d932:	da37      	bge.n	d9a4 <attsHandleValueIndNtf+0xb8>
    d934:	2008      	movs	r0, #8
    d936:	f007 fc84 	bl	15242 <WsfMsgAlloc>
    d93a:	4605      	mov	r5, r0
    d93c:	b360      	cbz	r0, d998 <attsHandleValueIndNtf+0xac>
    d93e:	2321      	movs	r3, #33	; 0x21
    d940:	8006      	strh	r6, [r0, #0]
    d942:	7083      	strb	r3, [r0, #2]
    d944:	f1b9 0f00 	cmp.w	r9, #0
    d948:	d01c      	beq.n	d984 <attsHandleValueIndNtf+0x98>
    d94a:	f1a8 030b 	sub.w	r3, r8, #11
    d94e:	6043      	str	r3, [r0, #4]
    d950:	6868      	ldr	r0, [r5, #4]
    d952:	b1f0      	cbz	r0, d992 <attsHandleValueIndNtf+0xa6>
    d954:	1cfb      	adds	r3, r7, #3
    d956:	8044      	strh	r4, [r0, #2]
    d958:	7244      	strb	r4, [r0, #9]
    d95a:	0a24      	lsrs	r4, r4, #8
    d95c:	8003      	strh	r3, [r0, #0]
    d95e:	f880 a008 	strb.w	sl, [r0, #8]
    d962:	7284      	strb	r4, [r0, #10]
    d964:	f1b9 0f00 	cmp.w	r9, #0
    d968:	d104      	bne.n	d974 <attsHandleValueIndNtf+0x88>
    d96a:	463a      	mov	r2, r7
    d96c:	4641      	mov	r1, r8
    d96e:	300b      	adds	r0, #11
    d970:	f7fe fbf6 	bl	c160 <memcpy>
    d974:	4b0d      	ldr	r3, [pc, #52]	; (d9ac <attsHandleValueIndNtf+0xc0>)
    d976:	4629      	mov	r1, r5
    d978:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d97c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d980:	f007 bc83 	b.w	1528a <WsfMsgSend>
    d984:	f107 000b 	add.w	r0, r7, #11
    d988:	b280      	uxth	r0, r0
    d98a:	f7fe fe3d 	bl	c608 <attMsgAlloc>
    d98e:	6068      	str	r0, [r5, #4]
    d990:	e7de      	b.n	d950 <attsHandleValueIndNtf+0x64>
    d992:	4628      	mov	r0, r5
    d994:	f007 fc6c 	bl	15270 <WsfMsgFree>
    d998:	2270      	movs	r2, #112	; 0x70
    d99a:	4621      	mov	r1, r4
    d99c:	4630      	mov	r0, r6
    d99e:	f7ff feff 	bl	d7a0 <attsExecCallback>
    d9a2:	e7b5      	b.n	d910 <attsHandleValueIndNtf+0x24>
    d9a4:	2277      	movs	r2, #119	; 0x77
    d9a6:	e7f8      	b.n	d99a <attsHandleValueIndNtf+0xae>
    d9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9ac:	10003778 	.word	0x10003778

0000d9b0 <attsIndConnCback>:
    d9b0:	788b      	ldrb	r3, [r1, #2]
    d9b2:	2b28      	cmp	r3, #40	; 0x28
    d9b4:	b570      	push	{r4, r5, r6, lr}
    d9b6:	4606      	mov	r6, r0
    d9b8:	d117      	bne.n	d9ea <attsIndConnCback+0x3a>
    d9ba:	78cc      	ldrb	r4, [r1, #3]
    d9bc:	b904      	cbnz	r4, d9c0 <attsIndConnCback+0x10>
    d9be:	7a0c      	ldrb	r4, [r1, #8]
    d9c0:	7f35      	ldrb	r5, [r6, #28]
    d9c2:	490a      	ldr	r1, [pc, #40]	; (d9ec <attsIndConnCback+0x3c>)
    d9c4:	232c      	movs	r3, #44	; 0x2c
    d9c6:	3d01      	subs	r5, #1
    d9c8:	fb03 1505 	mla	r5, r3, r5, r1
    d9cc:	3420      	adds	r4, #32
    d9ce:	8aab      	ldrh	r3, [r5, #20]
    d9d0:	b2e4      	uxtb	r4, r4
    d9d2:	b123      	cbz	r3, d9de <attsIndConnCback+0x2e>
    d9d4:	4628      	mov	r0, r5
    d9d6:	f007 fe13 	bl	15600 <WsfTimerStop>
    d9da:	2300      	movs	r3, #0
    d9dc:	82ab      	strh	r3, [r5, #20]
    d9de:	4622      	mov	r2, r4
    d9e0:	4629      	mov	r1, r5
    d9e2:	7f30      	ldrb	r0, [r6, #28]
    d9e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d9e8:	e6e5      	b.n	d7b6 <attsIndNtfCallback>
    d9ea:	bd70      	pop	{r4, r5, r6, pc}
    d9ec:	10003a7c 	.word	0x10003a7c

0000d9f0 <attsProcValueCnf>:
    d9f0:	b570      	push	{r4, r5, r6, lr}
    d9f2:	4606      	mov	r6, r0
    d9f4:	7f00      	ldrb	r0, [r0, #28]
    d9f6:	f7ff fec5 	bl	d784 <attsIndCcbByConnId>
    d9fa:	4604      	mov	r4, r0
    d9fc:	b168      	cbz	r0, da1a <attsProcValueCnf+0x2a>
    d9fe:	8a83      	ldrh	r3, [r0, #20]
    da00:	b15b      	cbz	r3, da1a <attsProcValueCnf+0x2a>
    da02:	2300      	movs	r3, #0
    da04:	8283      	strh	r3, [r0, #20]
    da06:	f007 fdfb 	bl	15600 <WsfTimerStop>
    da0a:	7fb5      	ldrb	r5, [r6, #30]
    da0c:	b92d      	cbnz	r5, da1a <attsProcValueCnf+0x2a>
    da0e:	462a      	mov	r2, r5
    da10:	8ae1      	ldrh	r1, [r4, #22]
    da12:	7f30      	ldrb	r0, [r6, #28]
    da14:	f7ff fec4 	bl	d7a0 <attsExecCallback>
    da18:	82e5      	strh	r5, [r4, #22]
    da1a:	bd70      	pop	{r4, r5, r6, pc}

0000da1c <AttsIndInit>:
    da1c:	b510      	push	{r4, lr}
    da1e:	4909      	ldr	r1, [pc, #36]	; (da44 <AttsIndInit+0x28>)
    da20:	4a09      	ldr	r2, [pc, #36]	; (da48 <AttsIndInit+0x2c>)
    da22:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    da26:	2300      	movs	r3, #0
    da28:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    da2c:	3301      	adds	r3, #1
    da2e:	2b08      	cmp	r3, #8
    da30:	6114      	str	r4, [r2, #16]
    da32:	7210      	strb	r0, [r2, #8]
    da34:	8153      	strh	r3, [r2, #10]
    da36:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    da3a:	d1f5      	bne.n	da28 <AttsIndInit+0xc>
    da3c:	4b03      	ldr	r3, [pc, #12]	; (da4c <AttsIndInit+0x30>)
    da3e:	4a04      	ldr	r2, [pc, #16]	; (da50 <AttsIndInit+0x34>)
    da40:	609a      	str	r2, [r3, #8]
    da42:	bd10      	pop	{r4, pc}
    da44:	10003778 	.word	0x10003778
    da48:	10003a7c 	.word	0x10003a7c
    da4c:	10003bdc 	.word	0x10003bdc
    da50:	00021ef8 	.word	0x00021ef8

0000da54 <AttsHandleValueInd>:
    da54:	b513      	push	{r0, r1, r4, lr}
    da56:	f04f 0c00 	mov.w	ip, #0
    da5a:	241d      	movs	r4, #29
    da5c:	e9cd 4c00 	strd	r4, ip, [sp]
    da60:	f7ff ff44 	bl	d8ec <attsHandleValueIndNtf>
    da64:	b002      	add	sp, #8
    da66:	bd10      	pop	{r4, pc}

0000da68 <AttsHandleValueNtf>:
    da68:	b513      	push	{r0, r1, r4, lr}
    da6a:	f04f 0c00 	mov.w	ip, #0
    da6e:	241b      	movs	r4, #27
    da70:	e9cd 4c00 	strd	r4, ip, [sp]
    da74:	f7ff ff3a 	bl	d8ec <attsHandleValueIndNtf>
    da78:	b002      	add	sp, #8
    da7a:	bd10      	pop	{r4, pc}

0000da7c <AttsHandleValueIndZeroCpy>:
    da7c:	b513      	push	{r0, r1, r4, lr}
    da7e:	f04f 0c01 	mov.w	ip, #1
    da82:	241d      	movs	r4, #29
    da84:	e9cd 4c00 	strd	r4, ip, [sp]
    da88:	f7ff ff30 	bl	d8ec <attsHandleValueIndNtf>
    da8c:	b002      	add	sp, #8
    da8e:	bd10      	pop	{r4, pc}

0000da90 <AttsHandleValueNtfZeroCpy>:
    da90:	b513      	push	{r0, r1, r4, lr}
    da92:	f04f 0c01 	mov.w	ip, #1
    da96:	241b      	movs	r4, #27
    da98:	e9cd 4c00 	strd	r4, ip, [sp]
    da9c:	f7ff ff26 	bl	d8ec <attsHandleValueIndNtf>
    daa0:	b002      	add	sp, #8
    daa2:	bd10      	pop	{r4, pc}

0000daa4 <attsL2cCtrlCback>:
    daa4:	4b01      	ldr	r3, [pc, #4]	; (daac <attsL2cCtrlCback+0x8>)
    daa6:	689b      	ldr	r3, [r3, #8]
    daa8:	685b      	ldr	r3, [r3, #4]
    daaa:	4718      	bx	r3
    daac:	10003bdc 	.word	0x10003bdc

0000dab0 <attsMsgCback>:
    dab0:	b410      	push	{r4}
    dab2:	7883      	ldrb	r3, [r0, #2]
    dab4:	2b20      	cmp	r3, #32
    dab6:	d106      	bne.n	dac6 <attsMsgCback+0x16>
    dab8:	2200      	movs	r2, #0
    daba:	2104      	movs	r1, #4
    dabc:	7800      	ldrb	r0, [r0, #0]
    dabe:	f85d 4b04 	ldr.w	r4, [sp], #4
    dac2:	f002 b941 	b.w	fd48 <DmConnSetIdle>
    dac6:	2b22      	cmp	r3, #34	; 0x22
    dac8:	4b03      	ldr	r3, [pc, #12]	; (dad8 <attsMsgCback+0x28>)
    daca:	f85d 4b04 	ldr.w	r4, [sp], #4
    dace:	bf96      	itet	ls
    dad0:	689b      	ldrls	r3, [r3, #8]
    dad2:	68db      	ldrhi	r3, [r3, #12]
    dad4:	689b      	ldrls	r3, [r3, #8]
    dad6:	4718      	bx	r3
    dad8:	10003bdc 	.word	0x10003bdc

0000dadc <attsErrRsp>:
    dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dae0:	4605      	mov	r5, r0
    dae2:	200d      	movs	r0, #13
    dae4:	460f      	mov	r7, r1
    dae6:	4614      	mov	r4, r2
    dae8:	461e      	mov	r6, r3
    daea:	f7fe fd8d 	bl	c608 <attMsgAlloc>
    daee:	b170      	cbz	r0, db0e <attsErrRsp+0x32>
    daf0:	7284      	strb	r4, [r0, #10]
    daf2:	2301      	movs	r3, #1
    daf4:	0a24      	lsrs	r4, r4, #8
    daf6:	7203      	strb	r3, [r0, #8]
    daf8:	7247      	strb	r7, [r0, #9]
    dafa:	72c4      	strb	r4, [r0, #11]
    dafc:	7306      	strb	r6, [r0, #12]
    dafe:	4603      	mov	r3, r0
    db00:	4629      	mov	r1, r5
    db02:	2205      	movs	r2, #5
    db04:	2004      	movs	r0, #4
    db06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db0a:	f003 b88d 	b.w	10c28 <L2cDataReq>
    db0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db12 <attsDataCback>:
    db12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db16:	4680      	mov	r8, r0
    db18:	460e      	mov	r6, r1
    db1a:	4617      	mov	r7, r2
    db1c:	f7fe fd22 	bl	c564 <attCcbByHandle>
    db20:	b368      	cbz	r0, db7e <attsDataCback+0x6c>
    db22:	7a39      	ldrb	r1, [r7, #8]
    db24:	2912      	cmp	r1, #18
    db26:	d903      	bls.n	db30 <attsDataCback+0x1e>
    db28:	f1a1 0316 	sub.w	r3, r1, #22
    db2c:	2b08      	cmp	r3, #8
    db2e:	d80e      	bhi.n	db4e <attsDataCback+0x3c>
    db30:	084b      	lsrs	r3, r1, #1
    db32:	4a14      	ldr	r2, [pc, #80]	; (db84 <attsDataCback+0x72>)
    db34:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    db38:	b195      	cbz	r5, db60 <attsDataCback+0x4e>
    db3a:	4a13      	ldr	r2, [pc, #76]	; (db88 <attsDataCback+0x76>)
    db3c:	5cd3      	ldrb	r3, [r2, r3]
    db3e:	42b3      	cmp	r3, r6
    db40:	d81b      	bhi.n	db7a <attsDataCback+0x68>
    db42:	463a      	mov	r2, r7
    db44:	4631      	mov	r1, r6
    db46:	462b      	mov	r3, r5
    db48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db4c:	4718      	bx	r3
    db4e:	2952      	cmp	r1, #82	; 0x52
    db50:	d004      	beq.n	db5c <attsDataCback+0x4a>
    db52:	29d2      	cmp	r1, #210	; 0xd2
    db54:	bf0c      	ite	eq
    db56:	2310      	moveq	r3, #16
    db58:	2300      	movne	r3, #0
    db5a:	e7ea      	b.n	db32 <attsDataCback+0x20>
    db5c:	230a      	movs	r3, #10
    db5e:	e7e8      	b.n	db32 <attsDataCback+0x20>
    db60:	2306      	movs	r3, #6
    db62:	2902      	cmp	r1, #2
    db64:	d00b      	beq.n	db7e <attsDataCback+0x6c>
    db66:	291e      	cmp	r1, #30
    db68:	d009      	beq.n	db7e <attsDataCback+0x6c>
    db6a:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    db6e:	d106      	bne.n	db7e <attsDataCback+0x6c>
    db70:	4640      	mov	r0, r8
    db72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    db76:	f7ff bfb1 	b.w	dadc <attsErrRsp>
    db7a:	2304      	movs	r3, #4
    db7c:	e7f1      	b.n	db62 <attsDataCback+0x50>
    db7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db82:	bf00      	nop
    db84:	10002b10 	.word	0x10002b10
    db88:	00021f08 	.word	0x00021f08

0000db8c <attsClearPrepWrites>:
    db8c:	b510      	push	{r4, lr}
    db8e:	4604      	mov	r4, r0
    db90:	4620      	mov	r0, r4
    db92:	f007 fbe1 	bl	15358 <WsfQueueDeq>
    db96:	b900      	cbnz	r0, db9a <attsClearPrepWrites+0xe>
    db98:	bd10      	pop	{r4, pc}
    db9a:	f007 fb03 	bl	151a4 <WsfBufFree>
    db9e:	e7f7      	b.n	db90 <attsClearPrepWrites+0x4>

0000dba0 <attsConnCback>:
    dba0:	788b      	ldrb	r3, [r1, #2]
    dba2:	2b28      	cmp	r3, #40	; 0x28
    dba4:	b570      	push	{r4, r5, r6, lr}
    dba6:	4604      	mov	r4, r0
    dba8:	460d      	mov	r5, r1
    dbaa:	d10a      	bne.n	dbc2 <attsConnCback+0x22>
    dbac:	f7ff ffee 	bl	db8c <attsClearPrepWrites>
    dbb0:	7f20      	ldrb	r0, [r4, #28]
    dbb2:	f002 f8e3 	bl	fd7c <DmConnCheckIdle>
    dbb6:	0743      	lsls	r3, r0, #29
    dbb8:	d503      	bpl.n	dbc2 <attsConnCback+0x22>
    dbba:	f104 0008 	add.w	r0, r4, #8
    dbbe:	f007 fd1f 	bl	15600 <WsfTimerStop>
    dbc2:	4b04      	ldr	r3, [pc, #16]	; (dbd4 <attsConnCback+0x34>)
    dbc4:	689b      	ldr	r3, [r3, #8]
    dbc6:	4629      	mov	r1, r5
    dbc8:	4620      	mov	r0, r4
    dbca:	68db      	ldr	r3, [r3, #12]
    dbcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dbd0:	4718      	bx	r3
    dbd2:	bf00      	nop
    dbd4:	10003bdc 	.word	0x10003bdc

0000dbd8 <attsDiscBusy>:
    dbd8:	b538      	push	{r3, r4, r5, lr}
    dbda:	4d0d      	ldr	r5, [pc, #52]	; (dc10 <attsDiscBusy+0x38>)
    dbdc:	682b      	ldr	r3, [r5, #0]
    dbde:	681b      	ldr	r3, [r3, #0]
    dbe0:	4604      	mov	r4, r0
    dbe2:	b1a3      	cbz	r3, dc0e <attsDiscBusy+0x36>
    dbe4:	2104      	movs	r1, #4
    dbe6:	7f00      	ldrb	r0, [r0, #28]
    dbe8:	2201      	movs	r2, #1
    dbea:	f002 f8ad 	bl	fd48 <DmConnSetIdle>
    dbee:	4b09      	ldr	r3, [pc, #36]	; (dc14 <attsDiscBusy+0x3c>)
    dbf0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    dbf4:	7423      	strb	r3, [r4, #16]
    dbf6:	2320      	movs	r3, #32
    dbf8:	7523      	strb	r3, [r4, #20]
    dbfa:	7f23      	ldrb	r3, [r4, #28]
    dbfc:	8263      	strh	r3, [r4, #18]
    dbfe:	682b      	ldr	r3, [r5, #0]
    dc00:	f104 0008 	add.w	r0, r4, #8
    dc04:	6819      	ldr	r1, [r3, #0]
    dc06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dc0a:	f007 bcd3 	b.w	155b4 <WsfTimerStartSec>
    dc0e:	bd38      	pop	{r3, r4, r5, pc}
    dc10:	10002b9c 	.word	0x10002b9c
    dc14:	10003778 	.word	0x10003778

0000dc18 <AttsInit>:
    dc18:	4b06      	ldr	r3, [pc, #24]	; (dc34 <AttsInit+0x1c>)
    dc1a:	2200      	movs	r2, #0
    dc1c:	e9c3 2200 	strd	r2, r2, [r3]
    dc20:	4a05      	ldr	r2, [pc, #20]	; (dc38 <AttsInit+0x20>)
    dc22:	609a      	str	r2, [r3, #8]
    dc24:	4a05      	ldr	r2, [pc, #20]	; (dc3c <AttsInit+0x24>)
    dc26:	60da      	str	r2, [r3, #12]
    dc28:	4b05      	ldr	r3, [pc, #20]	; (dc40 <AttsInit+0x28>)
    dc2a:	4a06      	ldr	r2, [pc, #24]	; (dc44 <AttsInit+0x2c>)
    dc2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    dc30:	4770      	bx	lr
    dc32:	bf00      	nop
    dc34:	10003bdc 	.word	0x10003bdc
    dc38:	00021d60 	.word	0x00021d60
    dc3c:	0000c501 	.word	0x0000c501
    dc40:	10003778 	.word	0x10003778
    dc44:	00021f1c 	.word	0x00021f1c

0000dc48 <AttsAuthorRegister>:
    dc48:	4b01      	ldr	r3, [pc, #4]	; (dc50 <AttsAuthorRegister+0x8>)
    dc4a:	6118      	str	r0, [r3, #16]
    dc4c:	4770      	bx	lr
    dc4e:	bf00      	nop
    dc50:	10003bdc 	.word	0x10003bdc

0000dc54 <AttsAddGroup>:
    dc54:	b510      	push	{r4, lr}
    dc56:	4604      	mov	r4, r0
    dc58:	f00b fe2e 	bl	198b8 <WsfTaskLock>
    dc5c:	4b09      	ldr	r3, [pc, #36]	; (dc84 <AttsAddGroup+0x30>)
    dc5e:	681b      	ldr	r3, [r3, #0]
    dc60:	2200      	movs	r2, #0
    dc62:	b11b      	cbz	r3, dc6c <AttsAddGroup+0x18>
    dc64:	8a20      	ldrh	r0, [r4, #16]
    dc66:	8a19      	ldrh	r1, [r3, #16]
    dc68:	4288      	cmp	r0, r1
    dc6a:	d207      	bcs.n	dc7c <AttsAddGroup+0x28>
    dc6c:	4621      	mov	r1, r4
    dc6e:	4805      	ldr	r0, [pc, #20]	; (dc84 <AttsAddGroup+0x30>)
    dc70:	f007 fbab 	bl	153ca <WsfQueueInsert>
    dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc78:	f00b be24 	b.w	198c4 <WsfTaskUnlock>
    dc7c:	461a      	mov	r2, r3
    dc7e:	681b      	ldr	r3, [r3, #0]
    dc80:	e7ef      	b.n	dc62 <AttsAddGroup+0xe>
    dc82:	bf00      	nop
    dc84:	10003bdc 	.word	0x10003bdc

0000dc88 <AttsRemoveGroup>:
    dc88:	b510      	push	{r4, lr}
    dc8a:	4604      	mov	r4, r0
    dc8c:	f00b fe14 	bl	198b8 <WsfTaskLock>
    dc90:	4b08      	ldr	r3, [pc, #32]	; (dcb4 <AttsRemoveGroup+0x2c>)
    dc92:	6819      	ldr	r1, [r3, #0]
    dc94:	2200      	movs	r2, #0
    dc96:	b919      	cbnz	r1, dca0 <AttsRemoveGroup+0x18>
    dc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc9c:	f00b be12 	b.w	198c4 <WsfTaskUnlock>
    dca0:	8a0b      	ldrh	r3, [r1, #16]
    dca2:	42a3      	cmp	r3, r4
    dca4:	d002      	beq.n	dcac <AttsRemoveGroup+0x24>
    dca6:	460a      	mov	r2, r1
    dca8:	6809      	ldr	r1, [r1, #0]
    dcaa:	e7f4      	b.n	dc96 <AttsRemoveGroup+0xe>
    dcac:	4801      	ldr	r0, [pc, #4]	; (dcb4 <AttsRemoveGroup+0x2c>)
    dcae:	f007 fbb7 	bl	15420 <WsfQueueRemove>
    dcb2:	e7f1      	b.n	dc98 <AttsRemoveGroup+0x10>
    dcb4:	10003bdc 	.word	0x10003bdc

0000dcb8 <AttsSetAttr>:
    dcb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dcba:	4605      	mov	r5, r0
    dcbc:	460e      	mov	r6, r1
    dcbe:	4614      	mov	r4, r2
    dcc0:	f00b fdfa 	bl	198b8 <WsfTaskLock>
    dcc4:	4628      	mov	r0, r5
    dcc6:	a901      	add	r1, sp, #4
    dcc8:	f000 f862 	bl	dd90 <attsFindByHandle>
    dccc:	4605      	mov	r5, r0
    dcce:	b198      	cbz	r0, dcf8 <AttsSetAttr+0x40>
    dcd0:	8983      	ldrh	r3, [r0, #12]
    dcd2:	42b3      	cmp	r3, r6
    dcd4:	d312      	bcc.n	dcfc <AttsSetAttr+0x44>
    dcd6:	4621      	mov	r1, r4
    dcd8:	4632      	mov	r2, r6
    dcda:	6840      	ldr	r0, [r0, #4]
    dcdc:	f7fe fa40 	bl	c160 <memcpy>
    dce0:	7bac      	ldrb	r4, [r5, #14]
    dce2:	f014 0408 	ands.w	r4, r4, #8
    dce6:	d002      	beq.n	dcee <AttsSetAttr+0x36>
    dce8:	68ab      	ldr	r3, [r5, #8]
    dcea:	2400      	movs	r4, #0
    dcec:	801e      	strh	r6, [r3, #0]
    dcee:	f00b fde9 	bl	198c4 <WsfTaskUnlock>
    dcf2:	4620      	mov	r0, r4
    dcf4:	b002      	add	sp, #8
    dcf6:	bd70      	pop	{r4, r5, r6, pc}
    dcf8:	240a      	movs	r4, #10
    dcfa:	e7f8      	b.n	dcee <AttsSetAttr+0x36>
    dcfc:	240d      	movs	r4, #13
    dcfe:	e7f6      	b.n	dcee <AttsSetAttr+0x36>

0000dd00 <AttsGetAttr>:
    dd00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd02:	460d      	mov	r5, r1
    dd04:	a901      	add	r1, sp, #4
    dd06:	4614      	mov	r4, r2
    dd08:	f000 f842 	bl	dd90 <attsFindByHandle>
    dd0c:	b138      	cbz	r0, dd1e <AttsGetAttr+0x1e>
    dd0e:	6883      	ldr	r3, [r0, #8]
    dd10:	881b      	ldrh	r3, [r3, #0]
    dd12:	802b      	strh	r3, [r5, #0]
    dd14:	6843      	ldr	r3, [r0, #4]
    dd16:	6023      	str	r3, [r4, #0]
    dd18:	2000      	movs	r0, #0
    dd1a:	b003      	add	sp, #12
    dd1c:	bd30      	pop	{r4, r5, pc}
    dd1e:	200a      	movs	r0, #10
    dd20:	e7fb      	b.n	dd1a <AttsGetAttr+0x1a>

0000dd22 <AttsErrorTest>:
    dd22:	4b02      	ldr	r3, [pc, #8]	; (dd2c <AttsErrorTest+0xa>)
    dd24:	f883 0111 	strb.w	r0, [r3, #273]	; 0x111
    dd28:	4770      	bx	lr
    dd2a:	bf00      	nop
    dd2c:	10003778 	.word	0x10003778

0000dd30 <attsUuidCmp>:
    dd30:	b510      	push	{r4, lr}
    dd32:	4604      	mov	r4, r0
    dd34:	4613      	mov	r3, r2
    dd36:	7ba2      	ldrb	r2, [r4, #14]
    dd38:	6800      	ldr	r0, [r0, #0]
    dd3a:	07d2      	lsls	r2, r2, #31
    dd3c:	d409      	bmi.n	dd52 <attsUuidCmp+0x22>
    dd3e:	2902      	cmp	r1, #2
    dd40:	d10c      	bne.n	dd5c <attsUuidCmp+0x2c>
    dd42:	460a      	mov	r2, r1
    dd44:	4619      	mov	r1, r3
    dd46:	f7fe f9db 	bl	c100 <memcmp>
    dd4a:	fab0 f080 	clz	r0, r0
    dd4e:	0940      	lsrs	r0, r0, #5
    dd50:	bd10      	pop	{r4, pc}
    dd52:	2910      	cmp	r1, #16
    dd54:	d0f5      	beq.n	dd42 <attsUuidCmp+0x12>
    dd56:	4601      	mov	r1, r0
    dd58:	4618      	mov	r0, r3
    dd5a:	e002      	b.n	dd62 <attsUuidCmp+0x32>
    dd5c:	2910      	cmp	r1, #16
    dd5e:	d1fa      	bne.n	dd56 <attsUuidCmp+0x26>
    dd60:	4619      	mov	r1, r3
    dd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd66:	f7fe bc11 	b.w	c58c <attUuidCmp16to128>

0000dd6a <attsUuid16Cmp>:
    dd6a:	2902      	cmp	r1, #2
    dd6c:	4603      	mov	r3, r0
    dd6e:	d10c      	bne.n	dd8a <attsUuid16Cmp+0x20>
    dd70:	7800      	ldrb	r0, [r0, #0]
    dd72:	7811      	ldrb	r1, [r2, #0]
    dd74:	4288      	cmp	r0, r1
    dd76:	d106      	bne.n	dd86 <attsUuid16Cmp+0x1c>
    dd78:	7858      	ldrb	r0, [r3, #1]
    dd7a:	7853      	ldrb	r3, [r2, #1]
    dd7c:	1ac3      	subs	r3, r0, r3
    dd7e:	4258      	negs	r0, r3
    dd80:	4158      	adcs	r0, r3
    dd82:	b2c0      	uxtb	r0, r0
    dd84:	4770      	bx	lr
    dd86:	2000      	movs	r0, #0
    dd88:	e7fb      	b.n	dd82 <attsUuid16Cmp+0x18>
    dd8a:	4611      	mov	r1, r2
    dd8c:	f7fe bbfe 	b.w	c58c <attUuidCmp16to128>

0000dd90 <attsFindByHandle>:
    dd90:	b510      	push	{r4, lr}
    dd92:	4b08      	ldr	r3, [pc, #32]	; (ddb4 <attsFindByHandle+0x24>)
    dd94:	681b      	ldr	r3, [r3, #0]
    dd96:	b90b      	cbnz	r3, dd9c <attsFindByHandle+0xc>
    dd98:	4618      	mov	r0, r3
    dd9a:	e00a      	b.n	ddb2 <attsFindByHandle+0x22>
    dd9c:	8a1a      	ldrh	r2, [r3, #16]
    dd9e:	4282      	cmp	r2, r0
    dda0:	d8f8      	bhi.n	dd94 <attsFindByHandle+0x4>
    dda2:	8a5c      	ldrh	r4, [r3, #18]
    dda4:	4284      	cmp	r4, r0
    dda6:	d3f5      	bcc.n	dd94 <attsFindByHandle+0x4>
    dda8:	600b      	str	r3, [r1, #0]
    ddaa:	685b      	ldr	r3, [r3, #4]
    ddac:	1a80      	subs	r0, r0, r2
    ddae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    ddb2:	bd10      	pop	{r4, pc}
    ddb4:	10003bdc 	.word	0x10003bdc

0000ddb8 <attsFindInRange>:
    ddb8:	b530      	push	{r4, r5, lr}
    ddba:	4b0a      	ldr	r3, [pc, #40]	; (dde4 <attsFindInRange+0x2c>)
    ddbc:	681b      	ldr	r3, [r3, #0]
    ddbe:	b90b      	cbnz	r3, ddc4 <attsFindInRange+0xc>
    ddc0:	4618      	mov	r0, r3
    ddc2:	e00d      	b.n	dde0 <attsFindInRange+0x28>
    ddc4:	8a1c      	ldrh	r4, [r3, #16]
    ddc6:	4284      	cmp	r4, r0
    ddc8:	d902      	bls.n	ddd0 <attsFindInRange+0x18>
    ddca:	428c      	cmp	r4, r1
    ddcc:	d8f6      	bhi.n	ddbc <attsFindInRange+0x4>
    ddce:	4620      	mov	r0, r4
    ddd0:	8a5d      	ldrh	r5, [r3, #18]
    ddd2:	4285      	cmp	r5, r0
    ddd4:	d3f2      	bcc.n	ddbc <attsFindInRange+0x4>
    ddd6:	685b      	ldr	r3, [r3, #4]
    ddd8:	1b04      	subs	r4, r0, r4
    ddda:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    ddde:	6014      	str	r4, [r2, #0]
    dde0:	bd30      	pop	{r4, r5, pc}
    dde2:	bf00      	nop
    dde4:	10003bdc 	.word	0x10003bdc

0000dde8 <attsPermissions>:
    dde8:	420b      	tst	r3, r1
    ddea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddee:	4606      	mov	r6, r0
    ddf0:	460d      	mov	r5, r1
    ddf2:	4617      	mov	r7, r2
    ddf4:	461c      	mov	r4, r3
    ddf6:	d105      	bne.n	de04 <attsPermissions+0x1c>
    ddf8:	2901      	cmp	r1, #1
    ddfa:	bf0c      	ite	eq
    ddfc:	2002      	moveq	r0, #2
    ddfe:	2003      	movne	r0, #3
    de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de04:	2910      	cmp	r1, #16
    de06:	bf08      	it	eq
    de08:	091c      	lsreq	r4, r3, #4
    de0a:	f014 0f0e 	tst.w	r4, #14
    de0e:	d101      	bne.n	de14 <attsPermissions+0x2c>
    de10:	2000      	movs	r0, #0
    de12:	e7f5      	b.n	de00 <attsPermissions+0x18>
    de14:	f001 ff8e 	bl	fd34 <DmConnSecLevel>
    de18:	0722      	lsls	r2, r4, #28
    de1a:	d500      	bpl.n	de1e <attsPermissions+0x36>
    de1c:	b180      	cbz	r0, de40 <attsPermissions+0x58>
    de1e:	f004 030a 	and.w	r3, r4, #10
    de22:	2b0a      	cmp	r3, #10
    de24:	d101      	bne.n	de2a <attsPermissions+0x42>
    de26:	2801      	cmp	r0, #1
    de28:	d90a      	bls.n	de40 <attsPermissions+0x58>
    de2a:	0763      	lsls	r3, r4, #29
    de2c:	d5f0      	bpl.n	de10 <attsPermissions+0x28>
    de2e:	4b06      	ldr	r3, [pc, #24]	; (de48 <attsPermissions+0x60>)
    de30:	691b      	ldr	r3, [r3, #16]
    de32:	b13b      	cbz	r3, de44 <attsPermissions+0x5c>
    de34:	463a      	mov	r2, r7
    de36:	4629      	mov	r1, r5
    de38:	4630      	mov	r0, r6
    de3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de3e:	4718      	bx	r3
    de40:	2005      	movs	r0, #5
    de42:	e7dd      	b.n	de00 <attsPermissions+0x18>
    de44:	2008      	movs	r0, #8
    de46:	e7db      	b.n	de00 <attsPermissions+0x18>
    de48:	10003bdc 	.word	0x10003bdc

0000de4c <attsProcMtuReq>:
    de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de4e:	7a93      	ldrb	r3, [r2, #10]
    de50:	7a54      	ldrb	r4, [r2, #9]
    de52:	4d17      	ldr	r5, [pc, #92]	; (deb0 <attsProcMtuReq+0x64>)
    de54:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    de58:	b2a4      	uxth	r4, r4
    de5a:	682b      	ldr	r3, [r5, #0]
    de5c:	2c17      	cmp	r4, #23
    de5e:	bf38      	it	cc
    de60:	2417      	movcc	r4, #23
    de62:	889f      	ldrh	r7, [r3, #4]
    de64:	4606      	mov	r6, r0
    de66:	f009 f94b 	bl	17100 <HciGetMaxRxAclLen>
    de6a:	3804      	subs	r0, #4
    de6c:	4287      	cmp	r7, r0
    de6e:	da1a      	bge.n	dea6 <attsProcMtuReq+0x5a>
    de70:	682b      	ldr	r3, [r5, #0]
    de72:	889d      	ldrh	r5, [r3, #4]
    de74:	42a5      	cmp	r5, r4
    de76:	f04f 000b 	mov.w	r0, #11
    de7a:	bf28      	it	cs
    de7c:	4625      	movcs	r5, r4
    de7e:	f7fe fbc3 	bl	c608 <attMsgAlloc>
    de82:	4603      	mov	r3, r0
    de84:	b140      	cbz	r0, de98 <attsProcMtuReq+0x4c>
    de86:	0a29      	lsrs	r1, r5, #8
    de88:	2203      	movs	r2, #3
    de8a:	7202      	strb	r2, [r0, #8]
    de8c:	7245      	strb	r5, [r0, #9]
    de8e:	7281      	strb	r1, [r0, #10]
    de90:	8b31      	ldrh	r1, [r6, #24]
    de92:	2004      	movs	r0, #4
    de94:	f002 fec8 	bl	10c28 <L2cDataReq>
    de98:	462a      	mov	r2, r5
    de9a:	4621      	mov	r1, r4
    de9c:	4630      	mov	r0, r6
    de9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dea2:	f7fe bb9f 	b.w	c5e4 <attSetMtu>
    dea6:	f009 f92b 	bl	17100 <HciGetMaxRxAclLen>
    deaa:	1f05      	subs	r5, r0, #4
    deac:	b2ad      	uxth	r5, r5
    deae:	e7e1      	b.n	de74 <attsProcMtuReq+0x28>
    deb0:	10002b9c 	.word	0x10002b9c

0000deb4 <attsProcFindInfoReq>:
    deb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    deb8:	7a93      	ldrb	r3, [r2, #10]
    deba:	7a57      	ldrb	r7, [r2, #9]
    debc:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    dec0:	b2bf      	uxth	r7, r7
    dec2:	4680      	mov	r8, r0
    dec4:	2f00      	cmp	r7, #0
    dec6:	d076      	beq.n	dfb6 <attsProcFindInfoReq+0x102>
    dec8:	7b13      	ldrb	r3, [r2, #12]
    deca:	f892 900b 	ldrb.w	r9, [r2, #11]
    dece:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    ded2:	fa1f f989 	uxth.w	r9, r9
    ded6:	454f      	cmp	r7, r9
    ded8:	d86d      	bhi.n	dfb6 <attsProcFindInfoReq+0x102>
    deda:	8b40      	ldrh	r0, [r0, #26]
    dedc:	3008      	adds	r0, #8
    dede:	b280      	uxth	r0, r0
    dee0:	f7fe fb92 	bl	c608 <attMsgAlloc>
    dee4:	4606      	mov	r6, r0
    dee6:	2800      	cmp	r0, #0
    dee8:	d067      	beq.n	dfba <attsProcFindInfoReq+0x106>
    deea:	2305      	movs	r3, #5
    deec:	7203      	strb	r3, [r0, #8]
    deee:	2301      	movs	r3, #1
    def0:	7243      	strb	r3, [r0, #9]
    def2:	f100 040e 	add.w	r4, r0, #14
    def6:	f64f 7aff 	movw	sl, #65535	; 0xffff
    defa:	4638      	mov	r0, r7
    defc:	aa01      	add	r2, sp, #4
    defe:	4649      	mov	r1, r9
    df00:	1f25      	subs	r5, r4, #4
    df02:	f7ff ff59 	bl	ddb8 <attsFindInRange>
    df06:	b1d0      	cbz	r0, df3e <attsProcFindInfoReq+0x8a>
    df08:	9b01      	ldr	r3, [sp, #4]
    df0a:	7b9b      	ldrb	r3, [r3, #14]
    df0c:	07db      	lsls	r3, r3, #31
    df0e:	d530      	bpl.n	df72 <attsProcFindInfoReq+0xbe>
    df10:	f106 030a 	add.w	r3, r6, #10
    df14:	429d      	cmp	r5, r3
    df16:	d112      	bne.n	df3e <attsProcFindInfoReq+0x8a>
    df18:	7028      	strb	r0, [r5, #0]
    df1a:	2302      	movs	r3, #2
    df1c:	0a00      	lsrs	r0, r0, #8
    df1e:	f805 3c01 	strb.w	r3, [r5, #-1]
    df22:	7068      	strb	r0, [r5, #1]
    df24:	9b01      	ldr	r3, [sp, #4]
    df26:	681b      	ldr	r3, [r3, #0]
    df28:	f106 020c 	add.w	r2, r6, #12
    df2c:	f103 0110 	add.w	r1, r3, #16
    df30:	f853 0b04 	ldr.w	r0, [r3], #4
    df34:	f842 0b04 	str.w	r0, [r2], #4
    df38:	428b      	cmp	r3, r1
    df3a:	d1f9      	bne.n	df30 <attsProcFindInfoReq+0x7c>
    df3c:	3512      	adds	r5, #18
    df3e:	f106 030a 	add.w	r3, r6, #10
    df42:	429d      	cmp	r5, r3
    df44:	d13b      	bne.n	dfbe <attsProcFindInfoReq+0x10a>
    df46:	4630      	mov	r0, r6
    df48:	f007 f992 	bl	15270 <WsfMsgFree>
    df4c:	240a      	movs	r4, #10
    df4e:	4640      	mov	r0, r8
    df50:	f7ff fe42 	bl	dbd8 <attsDiscBusy>
    df54:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    df58:	bb9c      	cbnz	r4, dfc2 <attsProcFindInfoReq+0x10e>
    df5a:	f106 0208 	add.w	r2, r6, #8
    df5e:	1aaa      	subs	r2, r5, r2
    df60:	4601      	mov	r1, r0
    df62:	4633      	mov	r3, r6
    df64:	b292      	uxth	r2, r2
    df66:	2004      	movs	r0, #4
    df68:	f002 fe5e 	bl	10c28 <L2cDataReq>
    df6c:	b002      	add	sp, #8
    df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df72:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    df76:	3308      	adds	r3, #8
    df78:	4433      	add	r3, r6
    df7a:	429c      	cmp	r4, r3
    df7c:	4622      	mov	r2, r4
    df7e:	d8de      	bhi.n	df3e <attsProcFindInfoReq+0x8a>
    df80:	0a03      	lsrs	r3, r0, #8
    df82:	f804 0c04 	strb.w	r0, [r4, #-4]
    df86:	f804 3c03 	strb.w	r3, [r4, #-3]
    df8a:	9b01      	ldr	r3, [sp, #4]
    df8c:	681b      	ldr	r3, [r3, #0]
    df8e:	781b      	ldrb	r3, [r3, #0]
    df90:	f804 3c02 	strb.w	r3, [r4, #-2]
    df94:	9b01      	ldr	r3, [sp, #4]
    df96:	681b      	ldr	r3, [r3, #0]
    df98:	4550      	cmp	r0, sl
    df9a:	785b      	ldrb	r3, [r3, #1]
    df9c:	f804 3c01 	strb.w	r3, [r4, #-1]
    dfa0:	d007      	beq.n	dfb2 <attsProcFindInfoReq+0xfe>
    dfa2:	3001      	adds	r0, #1
    dfa4:	b280      	uxth	r0, r0
    dfa6:	4581      	cmp	r9, r0
    dfa8:	f104 0404 	add.w	r4, r4, #4
    dfac:	d2a6      	bcs.n	defc <attsProcFindInfoReq+0x48>
    dfae:	4615      	mov	r5, r2
    dfb0:	e7c5      	b.n	df3e <attsProcFindInfoReq+0x8a>
    dfb2:	4625      	mov	r5, r4
    dfb4:	e7c3      	b.n	df3e <attsProcFindInfoReq+0x8a>
    dfb6:	2401      	movs	r4, #1
    dfb8:	e7c9      	b.n	df4e <attsProcFindInfoReq+0x9a>
    dfba:	2411      	movs	r4, #17
    dfbc:	e7c7      	b.n	df4e <attsProcFindInfoReq+0x9a>
    dfbe:	2400      	movs	r4, #0
    dfc0:	e7c5      	b.n	df4e <attsProcFindInfoReq+0x9a>
    dfc2:	4623      	mov	r3, r4
    dfc4:	463a      	mov	r2, r7
    dfc6:	2104      	movs	r1, #4
    dfc8:	f7ff fd88 	bl	dadc <attsErrRsp>
    dfcc:	e7ce      	b.n	df6c <attsProcFindInfoReq+0xb8>

0000dfce <attsProcReadReq>:
    dfce:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    dfd2:	7a93      	ldrb	r3, [r2, #10]
    dfd4:	7a54      	ldrb	r4, [r2, #9]
    dfd6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dfda:	b2a4      	uxth	r4, r4
    dfdc:	4606      	mov	r6, r0
    dfde:	a903      	add	r1, sp, #12
    dfe0:	4620      	mov	r0, r4
    dfe2:	f7ff fed5 	bl	dd90 <attsFindByHandle>
    dfe6:	4605      	mov	r5, r0
    dfe8:	2800      	cmp	r0, #0
    dfea:	d047      	beq.n	e07c <attsProcReadReq+0xae>
    dfec:	7bc3      	ldrb	r3, [r0, #15]
    dfee:	7f30      	ldrb	r0, [r6, #28]
    dff0:	4622      	mov	r2, r4
    dff2:	2101      	movs	r1, #1
    dff4:	f7ff fef8 	bl	dde8 <attsPermissions>
    dff8:	4603      	mov	r3, r0
    dffa:	b960      	cbnz	r0, e016 <attsProcReadReq+0x48>
    dffc:	7baa      	ldrb	r2, [r5, #14]
    dffe:	0751      	lsls	r1, r2, #29
    e000:	d50f      	bpl.n	e022 <attsProcReadReq+0x54>
    e002:	9903      	ldr	r1, [sp, #12]
    e004:	688f      	ldr	r7, [r1, #8]
    e006:	b167      	cbz	r7, e022 <attsProcReadReq+0x54>
    e008:	7f30      	ldrb	r0, [r6, #28]
    e00a:	9500      	str	r5, [sp, #0]
    e00c:	220a      	movs	r2, #10
    e00e:	4621      	mov	r1, r4
    e010:	47b8      	blx	r7
    e012:	4603      	mov	r3, r0
    e014:	b138      	cbz	r0, e026 <attsProcReadReq+0x58>
    e016:	4622      	mov	r2, r4
    e018:	210a      	movs	r1, #10
    e01a:	8b30      	ldrh	r0, [r6, #24]
    e01c:	f7ff fd5e 	bl	dadc <attsErrRsp>
    e020:	e010      	b.n	e044 <attsProcReadReq+0x76>
    e022:	0693      	lsls	r3, r2, #26
    e024:	d411      	bmi.n	e04a <attsProcReadReq+0x7c>
    e026:	68ab      	ldr	r3, [r5, #8]
    e028:	8b74      	ldrh	r4, [r6, #26]
    e02a:	881a      	ldrh	r2, [r3, #0]
    e02c:	3c01      	subs	r4, #1
    e02e:	4294      	cmp	r4, r2
    e030:	bfa8      	it	ge
    e032:	4614      	movge	r4, r2
    e034:	b2a7      	uxth	r7, r4
    e036:	f107 0009 	add.w	r0, r7, #9
    e03a:	b280      	uxth	r0, r0
    e03c:	f7fe fae4 	bl	c608 <attMsgAlloc>
    e040:	4680      	mov	r8, r0
    e042:	b960      	cbnz	r0, e05e <attsProcReadReq+0x90>
    e044:	b004      	add	sp, #16
    e046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e04a:	4b0d      	ldr	r3, [pc, #52]	; (e080 <attsProcReadReq+0xb2>)
    e04c:	695f      	ldr	r7, [r3, #20]
    e04e:	2f00      	cmp	r7, #0
    e050:	d0e9      	beq.n	e026 <attsProcReadReq+0x58>
    e052:	686b      	ldr	r3, [r5, #4]
    e054:	7f30      	ldrb	r0, [r6, #28]
    e056:	4622      	mov	r2, r4
    e058:	2105      	movs	r1, #5
    e05a:	47b8      	blx	r7
    e05c:	e7d9      	b.n	e012 <attsProcReadReq+0x44>
    e05e:	230b      	movs	r3, #11
    e060:	7203      	strb	r3, [r0, #8]
    e062:	b2a2      	uxth	r2, r4
    e064:	6869      	ldr	r1, [r5, #4]
    e066:	3009      	adds	r0, #9
    e068:	f7fe f87a 	bl	c160 <memcpy>
    e06c:	1c7a      	adds	r2, r7, #1
    e06e:	4643      	mov	r3, r8
    e070:	b292      	uxth	r2, r2
    e072:	8b31      	ldrh	r1, [r6, #24]
    e074:	2004      	movs	r0, #4
    e076:	f002 fdd7 	bl	10c28 <L2cDataReq>
    e07a:	e7e3      	b.n	e044 <attsProcReadReq+0x76>
    e07c:	2301      	movs	r3, #1
    e07e:	e7ca      	b.n	e016 <attsProcReadReq+0x48>
    e080:	10003bdc 	.word	0x10003bdc

0000e084 <attsFindUuidInRange>:
    e084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e088:	4699      	mov	r9, r3
    e08a:	4b1a      	ldr	r3, [pc, #104]	; (e0f4 <attsFindUuidInRange+0x70>)
    e08c:	9e08      	ldr	r6, [sp, #32]
    e08e:	681d      	ldr	r5, [r3, #0]
    e090:	460f      	mov	r7, r1
    e092:	4690      	mov	r8, r2
    e094:	4604      	mov	r4, r0
    e096:	f64f 7aff 	movw	sl, #65535	; 0xffff
    e09a:	b90d      	cbnz	r5, e0a0 <attsFindUuidInRange+0x1c>
    e09c:	462c      	mov	r4, r5
    e09e:	e025      	b.n	e0ec <attsFindUuidInRange+0x68>
    e0a0:	8a2a      	ldrh	r2, [r5, #16]
    e0a2:	42a2      	cmp	r2, r4
    e0a4:	d90c      	bls.n	e0c0 <attsFindUuidInRange+0x3c>
    e0a6:	42ba      	cmp	r2, r7
    e0a8:	d909      	bls.n	e0be <attsFindUuidInRange+0x3a>
    e0aa:	682d      	ldr	r5, [r5, #0]
    e0ac:	e7f5      	b.n	e09a <attsFindUuidInRange+0x16>
    e0ae:	4554      	cmp	r4, sl
    e0b0:	d0fb      	beq.n	e0aa <attsFindUuidInRange+0x26>
    e0b2:	6833      	ldr	r3, [r6, #0]
    e0b4:	3401      	adds	r4, #1
    e0b6:	3310      	adds	r3, #16
    e0b8:	b2a4      	uxth	r4, r4
    e0ba:	6033      	str	r3, [r6, #0]
    e0bc:	e008      	b.n	e0d0 <attsFindUuidInRange+0x4c>
    e0be:	4614      	mov	r4, r2
    e0c0:	8a6b      	ldrh	r3, [r5, #18]
    e0c2:	42a3      	cmp	r3, r4
    e0c4:	d3f1      	bcc.n	e0aa <attsFindUuidInRange+0x26>
    e0c6:	686b      	ldr	r3, [r5, #4]
    e0c8:	1aa2      	subs	r2, r4, r2
    e0ca:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e0ce:	6032      	str	r2, [r6, #0]
    e0d0:	8a6b      	ldrh	r3, [r5, #18]
    e0d2:	42a3      	cmp	r3, r4
    e0d4:	d3e9      	bcc.n	e0aa <attsFindUuidInRange+0x26>
    e0d6:	42bc      	cmp	r4, r7
    e0d8:	d8e7      	bhi.n	e0aa <attsFindUuidInRange+0x26>
    e0da:	464a      	mov	r2, r9
    e0dc:	4641      	mov	r1, r8
    e0de:	6830      	ldr	r0, [r6, #0]
    e0e0:	f7ff fe26 	bl	dd30 <attsUuidCmp>
    e0e4:	2800      	cmp	r0, #0
    e0e6:	d0e2      	beq.n	e0ae <attsFindUuidInRange+0x2a>
    e0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0ea:	601d      	str	r5, [r3, #0]
    e0ec:	4620      	mov	r0, r4
    e0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0f2:	bf00      	nop
    e0f4:	10003bdc 	.word	0x10003bdc

0000e0f8 <attsFindServiceGroupEnd>:
    e0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e0fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e0fe:	f8ad 3000 	strh.w	r3, [sp]
    e102:	4b1d      	ldr	r3, [pc, #116]	; (e178 <attsFindServiceGroupEnd+0x80>)
    e104:	881b      	ldrh	r3, [r3, #0]
    e106:	f8ad 3004 	strh.w	r3, [sp, #4]
    e10a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e10e:	4298      	cmp	r0, r3
    e110:	d104      	bne.n	e11c <attsFindServiceGroupEnd+0x24>
    e112:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e116:	4628      	mov	r0, r5
    e118:	b003      	add	sp, #12
    e11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e11c:	4b17      	ldr	r3, [pc, #92]	; (e17c <attsFindServiceGroupEnd+0x84>)
    e11e:	1c44      	adds	r4, r0, #1
    e120:	681f      	ldr	r7, [r3, #0]
    e122:	b2a4      	uxth	r4, r4
    e124:	4605      	mov	r5, r0
    e126:	2f00      	cmp	r7, #0
    e128:	d0f3      	beq.n	e112 <attsFindServiceGroupEnd+0x1a>
    e12a:	8a3e      	ldrh	r6, [r7, #16]
    e12c:	8a7b      	ldrh	r3, [r7, #18]
    e12e:	42b4      	cmp	r4, r6
    e130:	bf38      	it	cc
    e132:	4634      	movcc	r4, r6
    e134:	42a3      	cmp	r3, r4
    e136:	d306      	bcc.n	e146 <attsFindServiceGroupEnd+0x4e>
    e138:	1ba3      	subs	r3, r4, r6
    e13a:	687e      	ldr	r6, [r7, #4]
    e13c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    e140:	8a7b      	ldrh	r3, [r7, #18]
    e142:	42a3      	cmp	r3, r4
    e144:	d201      	bcs.n	e14a <attsFindServiceGroupEnd+0x52>
    e146:	683f      	ldr	r7, [r7, #0]
    e148:	e7ed      	b.n	e126 <attsFindServiceGroupEnd+0x2e>
    e14a:	466a      	mov	r2, sp
    e14c:	2102      	movs	r1, #2
    e14e:	4630      	mov	r0, r6
    e150:	f7ff fdee 	bl	dd30 <attsUuidCmp>
    e154:	2800      	cmp	r0, #0
    e156:	d1de      	bne.n	e116 <attsFindServiceGroupEnd+0x1e>
    e158:	aa01      	add	r2, sp, #4
    e15a:	2102      	movs	r1, #2
    e15c:	4630      	mov	r0, r6
    e15e:	f7ff fde7 	bl	dd30 <attsUuidCmp>
    e162:	2800      	cmp	r0, #0
    e164:	d1d7      	bne.n	e116 <attsFindServiceGroupEnd+0x1e>
    e166:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e16a:	429c      	cmp	r4, r3
    e16c:	d0d1      	beq.n	e112 <attsFindServiceGroupEnd+0x1a>
    e16e:	1c63      	adds	r3, r4, #1
    e170:	4625      	mov	r5, r4
    e172:	3610      	adds	r6, #16
    e174:	b29c      	uxth	r4, r3
    e176:	e7e3      	b.n	e140 <attsFindServiceGroupEnd+0x48>
    e178:	00021f2c 	.word	0x00021f2c
    e17c:	10003bdc 	.word	0x10003bdc

0000e180 <attsProcReadBlobReq>:
    e180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e184:	7a93      	ldrb	r3, [r2, #10]
    e186:	7a54      	ldrb	r4, [r2, #9]
    e188:	7ad5      	ldrb	r5, [r2, #11]
    e18a:	f892 800c 	ldrb.w	r8, [r2, #12]
    e18e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e192:	b085      	sub	sp, #20
    e194:	b2a4      	uxth	r4, r4
    e196:	4607      	mov	r7, r0
    e198:	a903      	add	r1, sp, #12
    e19a:	4620      	mov	r0, r4
    e19c:	f7ff fdf8 	bl	dd90 <attsFindByHandle>
    e1a0:	4606      	mov	r6, r0
    e1a2:	2800      	cmp	r0, #0
    e1a4:	d057      	beq.n	e256 <attsProcReadBlobReq+0xd6>
    e1a6:	7bc3      	ldrb	r3, [r0, #15]
    e1a8:	7f38      	ldrb	r0, [r7, #28]
    e1aa:	4622      	mov	r2, r4
    e1ac:	2101      	movs	r1, #1
    e1ae:	f7ff fe1b 	bl	dde8 <attsPermissions>
    e1b2:	b9b0      	cbnz	r0, e1e2 <attsProcReadBlobReq+0x62>
    e1b4:	68b3      	ldr	r3, [r6, #8]
    e1b6:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    e1ba:	881b      	ldrh	r3, [r3, #0]
    e1bc:	b2ad      	uxth	r5, r5
    e1be:	42ab      	cmp	r3, r5
    e1c0:	d34b      	bcc.n	e25a <attsProcReadBlobReq+0xda>
    e1c2:	7bb3      	ldrb	r3, [r6, #14]
    e1c4:	075a      	lsls	r2, r3, #29
    e1c6:	d513      	bpl.n	e1f0 <attsProcReadBlobReq+0x70>
    e1c8:	9a03      	ldr	r2, [sp, #12]
    e1ca:	f8d2 8008 	ldr.w	r8, [r2, #8]
    e1ce:	f1b8 0f00 	cmp.w	r8, #0
    e1d2:	d00d      	beq.n	e1f0 <attsProcReadBlobReq+0x70>
    e1d4:	7f38      	ldrb	r0, [r7, #28]
    e1d6:	9600      	str	r6, [sp, #0]
    e1d8:	462b      	mov	r3, r5
    e1da:	220c      	movs	r2, #12
    e1dc:	4621      	mov	r1, r4
    e1de:	47c0      	blx	r8
    e1e0:	b140      	cbz	r0, e1f4 <attsProcReadBlobReq+0x74>
    e1e2:	4603      	mov	r3, r0
    e1e4:	4622      	mov	r2, r4
    e1e6:	210c      	movs	r1, #12
    e1e8:	8b38      	ldrh	r0, [r7, #24]
    e1ea:	f7ff fc77 	bl	dadc <attsErrRsp>
    e1ee:	e012      	b.n	e216 <attsProcReadBlobReq+0x96>
    e1f0:	069b      	lsls	r3, r3, #26
    e1f2:	d413      	bmi.n	e21c <attsProcReadBlobReq+0x9c>
    e1f4:	68b3      	ldr	r3, [r6, #8]
    e1f6:	8b7a      	ldrh	r2, [r7, #26]
    e1f8:	881c      	ldrh	r4, [r3, #0]
    e1fa:	3a01      	subs	r2, #1
    e1fc:	1b64      	subs	r4, r4, r5
    e1fe:	4294      	cmp	r4, r2
    e200:	bfa8      	it	ge
    e202:	4614      	movge	r4, r2
    e204:	fa1f f884 	uxth.w	r8, r4
    e208:	f108 0009 	add.w	r0, r8, #9
    e20c:	b280      	uxth	r0, r0
    e20e:	f7fe f9fb 	bl	c608 <attMsgAlloc>
    e212:	4681      	mov	r9, r0
    e214:	b970      	cbnz	r0, e234 <attsProcReadBlobReq+0xb4>
    e216:	b005      	add	sp, #20
    e218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e21c:	4b10      	ldr	r3, [pc, #64]	; (e260 <attsProcReadBlobReq+0xe0>)
    e21e:	f8d3 8014 	ldr.w	r8, [r3, #20]
    e222:	f1b8 0f00 	cmp.w	r8, #0
    e226:	d0e5      	beq.n	e1f4 <attsProcReadBlobReq+0x74>
    e228:	6873      	ldr	r3, [r6, #4]
    e22a:	7f38      	ldrb	r0, [r7, #28]
    e22c:	4622      	mov	r2, r4
    e22e:	2105      	movs	r1, #5
    e230:	47c0      	blx	r8
    e232:	e7d5      	b.n	e1e0 <attsProcReadBlobReq+0x60>
    e234:	230d      	movs	r3, #13
    e236:	7203      	strb	r3, [r0, #8]
    e238:	6871      	ldr	r1, [r6, #4]
    e23a:	b2a2      	uxth	r2, r4
    e23c:	4429      	add	r1, r5
    e23e:	3009      	adds	r0, #9
    e240:	f7fd ff8e 	bl	c160 <memcpy>
    e244:	f108 0201 	add.w	r2, r8, #1
    e248:	464b      	mov	r3, r9
    e24a:	b292      	uxth	r2, r2
    e24c:	8b39      	ldrh	r1, [r7, #24]
    e24e:	2004      	movs	r0, #4
    e250:	f002 fcea 	bl	10c28 <L2cDataReq>
    e254:	e7df      	b.n	e216 <attsProcReadBlobReq+0x96>
    e256:	2001      	movs	r0, #1
    e258:	e7c3      	b.n	e1e2 <attsProcReadBlobReq+0x62>
    e25a:	2007      	movs	r0, #7
    e25c:	e7c1      	b.n	e1e2 <attsProcReadBlobReq+0x62>
    e25e:	bf00      	nop
    e260:	10003bdc 	.word	0x10003bdc

0000e264 <attsProcFindTypeReq>:
    e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e268:	7a93      	ldrb	r3, [r2, #10]
    e26a:	7a55      	ldrb	r5, [r2, #9]
    e26c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e270:	b2ad      	uxth	r5, r5
    e272:	b087      	sub	sp, #28
    e274:	4682      	mov	sl, r0
    e276:	4689      	mov	r9, r1
    e278:	4616      	mov	r6, r2
    e27a:	2d00      	cmp	r5, #0
    e27c:	d075      	beq.n	e36a <attsProcFindTypeReq+0x106>
    e27e:	7b13      	ldrb	r3, [r2, #12]
    e280:	f892 800b 	ldrb.w	r8, [r2, #11]
    e284:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    e288:	fa1f f888 	uxth.w	r8, r8
    e28c:	4545      	cmp	r5, r8
    e28e:	d86c      	bhi.n	e36a <attsProcFindTypeReq+0x106>
    e290:	8b40      	ldrh	r0, [r0, #26]
    e292:	3008      	adds	r0, #8
    e294:	b280      	uxth	r0, r0
    e296:	f7fe f9b7 	bl	c608 <attMsgAlloc>
    e29a:	4607      	mov	r7, r0
    e29c:	2800      	cmp	r0, #0
    e29e:	d066      	beq.n	e36e <attsProcFindTypeReq+0x10a>
    e2a0:	2307      	movs	r3, #7
    e2a2:	f100 0409 	add.w	r4, r0, #9
    e2a6:	7203      	strb	r3, [r0, #8]
    e2a8:	f1a9 0907 	sub.w	r9, r9, #7
    e2ac:	f106 030d 	add.w	r3, r6, #13
    e2b0:	fa1f f989 	uxth.w	r9, r9
    e2b4:	4628      	mov	r0, r5
    e2b6:	9403      	str	r4, [sp, #12]
    e2b8:	9302      	str	r3, [sp, #8]
    e2ba:	ab05      	add	r3, sp, #20
    e2bc:	9301      	str	r3, [sp, #4]
    e2be:	ab04      	add	r3, sp, #16
    e2c0:	9300      	str	r3, [sp, #0]
    e2c2:	2202      	movs	r2, #2
    e2c4:	9b02      	ldr	r3, [sp, #8]
    e2c6:	4641      	mov	r1, r8
    e2c8:	f7ff fedc 	bl	e084 <attsFindUuidInRange>
    e2cc:	4683      	mov	fp, r0
    e2ce:	b9c8      	cbnz	r0, e304 <attsProcFindTypeReq+0xa0>
    e2d0:	9b03      	ldr	r3, [sp, #12]
    e2d2:	429c      	cmp	r4, r3
    e2d4:	d14d      	bne.n	e372 <attsProcFindTypeReq+0x10e>
    e2d6:	4638      	mov	r0, r7
    e2d8:	f006 ffca 	bl	15270 <WsfMsgFree>
    e2dc:	260a      	movs	r6, #10
    e2de:	4650      	mov	r0, sl
    e2e0:	f7ff fc7a 	bl	dbd8 <attsDiscBusy>
    e2e4:	f8ba 0018 	ldrh.w	r0, [sl, #24]
    e2e8:	2e00      	cmp	r6, #0
    e2ea:	d144      	bne.n	e376 <attsProcFindTypeReq+0x112>
    e2ec:	f107 0208 	add.w	r2, r7, #8
    e2f0:	1aa2      	subs	r2, r4, r2
    e2f2:	4601      	mov	r1, r0
    e2f4:	463b      	mov	r3, r7
    e2f6:	b292      	uxth	r2, r2
    e2f8:	2004      	movs	r0, #4
    e2fa:	f002 fc95 	bl	10c28 <L2cDataReq>
    e2fe:	b007      	add	sp, #28
    e300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e304:	9904      	ldr	r1, [sp, #16]
    e306:	7bca      	ldrb	r2, [r1, #15]
    e308:	07d3      	lsls	r3, r2, #31
    e30a:	d526      	bpl.n	e35a <attsProcFindTypeReq+0xf6>
    e30c:	f1b9 0f00 	cmp.w	r9, #0
    e310:	d00a      	beq.n	e328 <attsProcFindTypeReq+0xc4>
    e312:	688a      	ldr	r2, [r1, #8]
    e314:	8812      	ldrh	r2, [r2, #0]
    e316:	454a      	cmp	r2, r9
    e318:	d11f      	bne.n	e35a <attsProcFindTypeReq+0xf6>
    e31a:	464a      	mov	r2, r9
    e31c:	6849      	ldr	r1, [r1, #4]
    e31e:	f106 000f 	add.w	r0, r6, #15
    e322:	f7fd feed 	bl	c100 <memcmp>
    e326:	b9c0      	cbnz	r0, e35a <attsProcFindTypeReq+0xf6>
    e328:	7b72      	ldrb	r2, [r6, #13]
    e32a:	b9e2      	cbnz	r2, e366 <attsProcFindTypeReq+0x102>
    e32c:	7bb2      	ldrb	r2, [r6, #14]
    e32e:	2a28      	cmp	r2, #40	; 0x28
    e330:	4658      	mov	r0, fp
    e332:	d101      	bne.n	e338 <attsProcFindTypeReq+0xd4>
    e334:	f7ff fee0 	bl	e0f8 <attsFindServiceGroupEnd>
    e338:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    e33c:	3208      	adds	r2, #8
    e33e:	1d21      	adds	r1, r4, #4
    e340:	443a      	add	r2, r7
    e342:	4291      	cmp	r1, r2
    e344:	d8c4      	bhi.n	e2d0 <attsProcFindTypeReq+0x6c>
    e346:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e34a:	7063      	strb	r3, [r4, #1]
    e34c:	0a03      	lsrs	r3, r0, #8
    e34e:	f884 b000 	strb.w	fp, [r4]
    e352:	70a0      	strb	r0, [r4, #2]
    e354:	70e3      	strb	r3, [r4, #3]
    e356:	4683      	mov	fp, r0
    e358:	460c      	mov	r4, r1
    e35a:	45c3      	cmp	fp, r8
    e35c:	d2b8      	bcs.n	e2d0 <attsProcFindTypeReq+0x6c>
    e35e:	f10b 0001 	add.w	r0, fp, #1
    e362:	b280      	uxth	r0, r0
    e364:	e7a9      	b.n	e2ba <attsProcFindTypeReq+0x56>
    e366:	4658      	mov	r0, fp
    e368:	e7e6      	b.n	e338 <attsProcFindTypeReq+0xd4>
    e36a:	2601      	movs	r6, #1
    e36c:	e7b7      	b.n	e2de <attsProcFindTypeReq+0x7a>
    e36e:	2611      	movs	r6, #17
    e370:	e7b5      	b.n	e2de <attsProcFindTypeReq+0x7a>
    e372:	2600      	movs	r6, #0
    e374:	e7b3      	b.n	e2de <attsProcFindTypeReq+0x7a>
    e376:	4633      	mov	r3, r6
    e378:	462a      	mov	r2, r5
    e37a:	2106      	movs	r1, #6
    e37c:	f7ff fbae 	bl	dadc <attsErrRsp>
    e380:	e7bd      	b.n	e2fe <attsProcFindTypeReq+0x9a>

0000e382 <attsProcReadTypeReq>:
    e382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e386:	3905      	subs	r1, #5
    e388:	4606      	mov	r6, r0
    e38a:	7a54      	ldrb	r4, [r2, #9]
    e38c:	7a90      	ldrb	r0, [r2, #10]
    e38e:	fa5f fa81 	uxtb.w	sl, r1
    e392:	eb04 2400 	add.w	r4, r4, r0, lsl #8
    e396:	f1ba 0f02 	cmp.w	sl, #2
    e39a:	b089      	sub	sp, #36	; 0x24
    e39c:	b2a4      	uxth	r4, r4
    e39e:	d003      	beq.n	e3a8 <attsProcReadTypeReq+0x26>
    e3a0:	f1ba 0f10 	cmp.w	sl, #16
    e3a4:	f040 80d4 	bne.w	e550 <attsProcReadTypeReq+0x1ce>
    e3a8:	2c00      	cmp	r4, #0
    e3aa:	f000 80d3 	beq.w	e554 <attsProcReadTypeReq+0x1d2>
    e3ae:	7b13      	ldrb	r3, [r2, #12]
    e3b0:	f892 900b 	ldrb.w	r9, [r2, #11]
    e3b4:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    e3b8:	fa1f f989 	uxth.w	r9, r9
    e3bc:	454c      	cmp	r4, r9
    e3be:	f200 80c9 	bhi.w	e554 <attsProcReadTypeReq+0x1d2>
    e3c2:	f102 030d 	add.w	r3, r2, #13
    e3c6:	9304      	str	r3, [sp, #16]
    e3c8:	ab07      	add	r3, sp, #28
    e3ca:	9301      	str	r3, [sp, #4]
    e3cc:	ab06      	add	r3, sp, #24
    e3ce:	9300      	str	r3, [sp, #0]
    e3d0:	4620      	mov	r0, r4
    e3d2:	9b04      	ldr	r3, [sp, #16]
    e3d4:	4652      	mov	r2, sl
    e3d6:	4649      	mov	r1, r9
    e3d8:	f7ff fe54 	bl	e084 <attsFindUuidInRange>
    e3dc:	4604      	mov	r4, r0
    e3de:	2800      	cmp	r0, #0
    e3e0:	f000 80ba 	beq.w	e558 <attsProcReadTypeReq+0x1d6>
    e3e4:	9b06      	ldr	r3, [sp, #24]
    e3e6:	4602      	mov	r2, r0
    e3e8:	7bdb      	ldrb	r3, [r3, #15]
    e3ea:	7f30      	ldrb	r0, [r6, #28]
    e3ec:	2101      	movs	r1, #1
    e3ee:	f7ff fcfb 	bl	dde8 <attsPermissions>
    e3f2:	4603      	mov	r3, r0
    e3f4:	b9c0      	cbnz	r0, e428 <attsProcReadTypeReq+0xa6>
    e3f6:	9a06      	ldr	r2, [sp, #24]
    e3f8:	7b91      	ldrb	r1, [r2, #14]
    e3fa:	074d      	lsls	r5, r1, #29
    e3fc:	d50a      	bpl.n	e414 <attsProcReadTypeReq+0x92>
    e3fe:	9807      	ldr	r0, [sp, #28]
    e400:	6885      	ldr	r5, [r0, #8]
    e402:	b13d      	cbz	r5, e414 <attsProcReadTypeReq+0x92>
    e404:	9200      	str	r2, [sp, #0]
    e406:	7f30      	ldrb	r0, [r6, #28]
    e408:	2208      	movs	r2, #8
    e40a:	4621      	mov	r1, r4
    e40c:	47a8      	blx	r5
    e40e:	4603      	mov	r3, r0
    e410:	b950      	cbnz	r0, e428 <attsProcReadTypeReq+0xa6>
    e412:	e001      	b.n	e418 <attsProcReadTypeReq+0x96>
    e414:	0688      	lsls	r0, r1, #26
    e416:	d40d      	bmi.n	e434 <attsProcReadTypeReq+0xb2>
    e418:	8b70      	ldrh	r0, [r6, #26]
    e41a:	3008      	adds	r0, #8
    e41c:	b280      	uxth	r0, r0
    e41e:	f7fe f8f3 	bl	c608 <attMsgAlloc>
    e422:	4680      	mov	r8, r0
    e424:	b980      	cbnz	r0, e448 <attsProcReadTypeReq+0xc6>
    e426:	2311      	movs	r3, #17
    e428:	4622      	mov	r2, r4
    e42a:	2108      	movs	r1, #8
    e42c:	8b30      	ldrh	r0, [r6, #24]
    e42e:	f7ff fb55 	bl	dadc <attsErrRsp>
    e432:	e057      	b.n	e4e4 <attsProcReadTypeReq+0x162>
    e434:	4b49      	ldr	r3, [pc, #292]	; (e55c <attsProcReadTypeReq+0x1da>)
    e436:	695d      	ldr	r5, [r3, #20]
    e438:	2d00      	cmp	r5, #0
    e43a:	d0ed      	beq.n	e418 <attsProcReadTypeReq+0x96>
    e43c:	6853      	ldr	r3, [r2, #4]
    e43e:	7f30      	ldrb	r0, [r6, #28]
    e440:	4622      	mov	r2, r4
    e442:	2105      	movs	r1, #5
    e444:	47a8      	blx	r5
    e446:	e7e2      	b.n	e40e <attsProcReadTypeReq+0x8c>
    e448:	2309      	movs	r3, #9
    e44a:	7203      	strb	r3, [r0, #8]
    e44c:	9b06      	ldr	r3, [sp, #24]
    e44e:	8b77      	ldrh	r7, [r6, #26]
    e450:	689a      	ldr	r2, [r3, #8]
    e452:	8812      	ldrh	r2, [r2, #0]
    e454:	7284      	strb	r4, [r0, #10]
    e456:	3f04      	subs	r7, #4
    e458:	4297      	cmp	r7, r2
    e45a:	bf28      	it	cs
    e45c:	4617      	movcs	r7, r2
    e45e:	b2ff      	uxtb	r7, r7
    e460:	1cba      	adds	r2, r7, #2
    e462:	9205      	str	r2, [sp, #20]
    e464:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e468:	7242      	strb	r2, [r0, #9]
    e46a:	0a22      	lsrs	r2, r4, #8
    e46c:	72c2      	strb	r2, [r0, #11]
    e46e:	f100 050c 	add.w	r5, r0, #12
    e472:	6859      	ldr	r1, [r3, #4]
    e474:	4628      	mov	r0, r5
    e476:	463a      	mov	r2, r7
    e478:	f7fd fe72 	bl	c160 <memcpy>
    e47c:	3401      	adds	r4, #1
    e47e:	1cbb      	adds	r3, r7, #2
    e480:	b2a0      	uxth	r0, r4
    e482:	441d      	add	r5, r3
    e484:	1eab      	subs	r3, r5, #2
    e486:	9303      	str	r3, [sp, #12]
    e488:	ab07      	add	r3, sp, #28
    e48a:	9301      	str	r3, [sp, #4]
    e48c:	ab06      	add	r3, sp, #24
    e48e:	9300      	str	r3, [sp, #0]
    e490:	4652      	mov	r2, sl
    e492:	9b04      	ldr	r3, [sp, #16]
    e494:	4649      	mov	r1, r9
    e496:	f7ff fdf5 	bl	e084 <attsFindUuidInRange>
    e49a:	4604      	mov	r4, r0
    e49c:	b1c0      	cbz	r0, e4d0 <attsProcReadTypeReq+0x14e>
    e49e:	9b06      	ldr	r3, [sp, #24]
    e4a0:	7b9a      	ldrb	r2, [r3, #14]
    e4a2:	0751      	lsls	r1, r2, #29
    e4a4:	d50d      	bpl.n	e4c2 <attsProcReadTypeReq+0x140>
    e4a6:	9907      	ldr	r1, [sp, #28]
    e4a8:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e4ac:	f1bb 0f00 	cmp.w	fp, #0
    e4b0:	d007      	beq.n	e4c2 <attsProcReadTypeReq+0x140>
    e4b2:	9300      	str	r3, [sp, #0]
    e4b4:	7f30      	ldrb	r0, [r6, #28]
    e4b6:	2300      	movs	r3, #0
    e4b8:	2208      	movs	r2, #8
    e4ba:	4621      	mov	r1, r4
    e4bc:	47d8      	blx	fp
    e4be:	b110      	cbz	r0, e4c6 <attsProcReadTypeReq+0x144>
    e4c0:	e006      	b.n	e4d0 <attsProcReadTypeReq+0x14e>
    e4c2:	0692      	lsls	r2, r2, #26
    e4c4:	d411      	bmi.n	e4ea <attsProcReadTypeReq+0x168>
    e4c6:	9b06      	ldr	r3, [sp, #24]
    e4c8:	689a      	ldr	r2, [r3, #8]
    e4ca:	8812      	ldrh	r2, [r2, #0]
    e4cc:	42ba      	cmp	r2, r7
    e4ce:	d018      	beq.n	e502 <attsProcReadTypeReq+0x180>
    e4d0:	9b03      	ldr	r3, [sp, #12]
    e4d2:	8b31      	ldrh	r1, [r6, #24]
    e4d4:	f108 0208 	add.w	r2, r8, #8
    e4d8:	1a9a      	subs	r2, r3, r2
    e4da:	b292      	uxth	r2, r2
    e4dc:	4643      	mov	r3, r8
    e4de:	2004      	movs	r0, #4
    e4e0:	f002 fba2 	bl	10c28 <L2cDataReq>
    e4e4:	b009      	add	sp, #36	; 0x24
    e4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4ea:	4a1c      	ldr	r2, [pc, #112]	; (e55c <attsProcReadTypeReq+0x1da>)
    e4ec:	f8d2 b014 	ldr.w	fp, [r2, #20]
    e4f0:	f1bb 0f00 	cmp.w	fp, #0
    e4f4:	d0e7      	beq.n	e4c6 <attsProcReadTypeReq+0x144>
    e4f6:	685b      	ldr	r3, [r3, #4]
    e4f8:	7f30      	ldrb	r0, [r6, #28]
    e4fa:	4622      	mov	r2, r4
    e4fc:	2105      	movs	r1, #5
    e4fe:	47d8      	blx	fp
    e500:	e7dd      	b.n	e4be <attsProcReadTypeReq+0x13c>
    e502:	7bdb      	ldrb	r3, [r3, #15]
    e504:	7f30      	ldrb	r0, [r6, #28]
    e506:	4622      	mov	r2, r4
    e508:	2101      	movs	r1, #1
    e50a:	f7ff fc6d 	bl	dde8 <attsPermissions>
    e50e:	2800      	cmp	r0, #0
    e510:	d1de      	bne.n	e4d0 <attsProcReadTypeReq+0x14e>
    e512:	8b73      	ldrh	r3, [r6, #26]
    e514:	3308      	adds	r3, #8
    e516:	eb07 0b05 	add.w	fp, r7, r5
    e51a:	4443      	add	r3, r8
    e51c:	459b      	cmp	fp, r3
    e51e:	d8d7      	bhi.n	e4d0 <attsProcReadTypeReq+0x14e>
    e520:	0a23      	lsrs	r3, r4, #8
    e522:	f805 4c02 	strb.w	r4, [r5, #-2]
    e526:	f805 3c01 	strb.w	r3, [r5, #-1]
    e52a:	9b06      	ldr	r3, [sp, #24]
    e52c:	463a      	mov	r2, r7
    e52e:	6859      	ldr	r1, [r3, #4]
    e530:	4628      	mov	r0, r5
    e532:	f7fd fe15 	bl	c160 <memcpy>
    e536:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e53a:	429c      	cmp	r4, r3
    e53c:	d005      	beq.n	e54a <attsProcReadTypeReq+0x1c8>
    e53e:	3401      	adds	r4, #1
    e540:	b2a0      	uxth	r0, r4
    e542:	9b05      	ldr	r3, [sp, #20]
    e544:	4581      	cmp	r9, r0
    e546:	441d      	add	r5, r3
    e548:	d29c      	bcs.n	e484 <attsProcReadTypeReq+0x102>
    e54a:	f8cd b00c 	str.w	fp, [sp, #12]
    e54e:	e7bf      	b.n	e4d0 <attsProcReadTypeReq+0x14e>
    e550:	2304      	movs	r3, #4
    e552:	e769      	b.n	e428 <attsProcReadTypeReq+0xa6>
    e554:	2301      	movs	r3, #1
    e556:	e767      	b.n	e428 <attsProcReadTypeReq+0xa6>
    e558:	230a      	movs	r3, #10
    e55a:	e765      	b.n	e428 <attsProcReadTypeReq+0xa6>
    e55c:	10003bdc 	.word	0x10003bdc

0000e560 <attsProcReadMultReq>:
    e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e564:	4607      	mov	r7, r0
    e566:	8b40      	ldrh	r0, [r0, #26]
    e568:	3008      	adds	r0, #8
    e56a:	b087      	sub	sp, #28
    e56c:	b280      	uxth	r0, r0
    e56e:	460c      	mov	r4, r1
    e570:	4693      	mov	fp, r2
    e572:	f7fe f849 	bl	c608 <attMsgAlloc>
    e576:	4605      	mov	r5, r0
    e578:	2800      	cmp	r0, #0
    e57a:	d060      	beq.n	e63e <attsProcReadMultReq+0xde>
    e57c:	230f      	movs	r3, #15
    e57e:	3408      	adds	r4, #8
    e580:	f10b 0909 	add.w	r9, fp, #9
    e584:	f100 0609 	add.w	r6, r0, #9
    e588:	7203      	strb	r3, [r0, #8]
    e58a:	44a3      	add	fp, r4
    e58c:	45d9      	cmp	r9, fp
    e58e:	d309      	bcc.n	e5a4 <attsProcReadMultReq+0x44>
    e590:	f105 0208 	add.w	r2, r5, #8
    e594:	1ab2      	subs	r2, r6, r2
    e596:	462b      	mov	r3, r5
    e598:	b292      	uxth	r2, r2
    e59a:	8b39      	ldrh	r1, [r7, #24]
    e59c:	2004      	movs	r0, #4
    e59e:	f002 fb43 	bl	10c28 <L2cDataReq>
    e5a2:	e053      	b.n	e64c <attsProcReadMultReq+0xec>
    e5a4:	f899 3001 	ldrb.w	r3, [r9, #1]
    e5a8:	f819 4b02 	ldrb.w	r4, [r9], #2
    e5ac:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e5b0:	b2a4      	uxth	r4, r4
    e5b2:	a905      	add	r1, sp, #20
    e5b4:	4620      	mov	r0, r4
    e5b6:	f7ff fbeb 	bl	dd90 <attsFindByHandle>
    e5ba:	4680      	mov	r8, r0
    e5bc:	2800      	cmp	r0, #0
    e5be:	d048      	beq.n	e652 <attsProcReadMultReq+0xf2>
    e5c0:	7bc3      	ldrb	r3, [r0, #15]
    e5c2:	7f38      	ldrb	r0, [r7, #28]
    e5c4:	4622      	mov	r2, r4
    e5c6:	2101      	movs	r1, #1
    e5c8:	f7ff fc0e 	bl	dde8 <attsPermissions>
    e5cc:	4603      	mov	r3, r0
    e5ce:	2800      	cmp	r0, #0
    e5d0:	d140      	bne.n	e654 <attsProcReadMultReq+0xf4>
    e5d2:	f898 200e 	ldrb.w	r2, [r8, #14]
    e5d6:	0751      	lsls	r1, r2, #29
    e5d8:	d522      	bpl.n	e620 <attsProcReadMultReq+0xc0>
    e5da:	9905      	ldr	r1, [sp, #20]
    e5dc:	f8d1 a008 	ldr.w	sl, [r1, #8]
    e5e0:	f1ba 0f00 	cmp.w	sl, #0
    e5e4:	d01c      	beq.n	e620 <attsProcReadMultReq+0xc0>
    e5e6:	7f38      	ldrb	r0, [r7, #28]
    e5e8:	f8cd 8000 	str.w	r8, [sp]
    e5ec:	220e      	movs	r2, #14
    e5ee:	4621      	mov	r1, r4
    e5f0:	47d0      	blx	sl
    e5f2:	4603      	mov	r3, r0
    e5f4:	bb70      	cbnz	r0, e654 <attsProcReadMultReq+0xf4>
    e5f6:	8b7a      	ldrh	r2, [r7, #26]
    e5f8:	3208      	adds	r2, #8
    e5fa:	442a      	add	r2, r5
    e5fc:	42b2      	cmp	r2, r6
    e5fe:	d9c5      	bls.n	e58c <attsProcReadMultReq+0x2c>
    e600:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e604:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e608:	881c      	ldrh	r4, [r3, #0]
    e60a:	1b92      	subs	r2, r2, r6
    e60c:	b292      	uxth	r2, r2
    e60e:	4294      	cmp	r4, r2
    e610:	bf28      	it	cs
    e612:	4614      	movcs	r4, r2
    e614:	4630      	mov	r0, r6
    e616:	4622      	mov	r2, r4
    e618:	f7fd fda2 	bl	c160 <memcpy>
    e61c:	4426      	add	r6, r4
    e61e:	e7b5      	b.n	e58c <attsProcReadMultReq+0x2c>
    e620:	0693      	lsls	r3, r2, #26
    e622:	d5e8      	bpl.n	e5f6 <attsProcReadMultReq+0x96>
    e624:	4b0e      	ldr	r3, [pc, #56]	; (e660 <attsProcReadMultReq+0x100>)
    e626:	f8d3 a014 	ldr.w	sl, [r3, #20]
    e62a:	f1ba 0f00 	cmp.w	sl, #0
    e62e:	d0e2      	beq.n	e5f6 <attsProcReadMultReq+0x96>
    e630:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e634:	7f38      	ldrb	r0, [r7, #28]
    e636:	4622      	mov	r2, r4
    e638:	2105      	movs	r1, #5
    e63a:	47d0      	blx	sl
    e63c:	e7d9      	b.n	e5f2 <attsProcReadMultReq+0x92>
    e63e:	2311      	movs	r3, #17
    e640:	4604      	mov	r4, r0
    e642:	4622      	mov	r2, r4
    e644:	210e      	movs	r1, #14
    e646:	8b38      	ldrh	r0, [r7, #24]
    e648:	f7ff fa48 	bl	dadc <attsErrRsp>
    e64c:	b007      	add	sp, #28
    e64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e652:	2301      	movs	r3, #1
    e654:	4628      	mov	r0, r5
    e656:	9303      	str	r3, [sp, #12]
    e658:	f006 fe0a 	bl	15270 <WsfMsgFree>
    e65c:	9b03      	ldr	r3, [sp, #12]
    e65e:	e7f0      	b.n	e642 <attsProcReadMultReq+0xe2>
    e660:	10003bdc 	.word	0x10003bdc

0000e664 <attsProcReadGroupTypeReq>:
    e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e668:	b08f      	sub	sp, #60	; 0x3c
    e66a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e66e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    e672:	7a57      	ldrb	r7, [r2, #9]
    e674:	7a93      	ldrb	r3, [r2, #10]
    e676:	3905      	subs	r1, #5
    e678:	fa5f fa81 	uxtb.w	sl, r1
    e67c:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    e680:	f1ba 0f02 	cmp.w	sl, #2
    e684:	4681      	mov	r9, r0
    e686:	b2bf      	uxth	r7, r7
    e688:	d003      	beq.n	e692 <attsProcReadGroupTypeReq+0x2e>
    e68a:	f1ba 0f10 	cmp.w	sl, #16
    e68e:	f040 80b6 	bne.w	e7fe <attsProcReadGroupTypeReq+0x19a>
    e692:	2f00      	cmp	r7, #0
    e694:	f000 80b8 	beq.w	e808 <attsProcReadGroupTypeReq+0x1a4>
    e698:	7b11      	ldrb	r1, [r2, #12]
    e69a:	7ad3      	ldrb	r3, [r2, #11]
    e69c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e6a0:	b29b      	uxth	r3, r3
    e6a2:	429f      	cmp	r7, r3
    e6a4:	9303      	str	r3, [sp, #12]
    e6a6:	f200 80c7 	bhi.w	e838 <attsProcReadGroupTypeReq+0x1d4>
    e6aa:	f102 030d 	add.w	r3, r2, #13
    e6ae:	461a      	mov	r2, r3
    e6b0:	4651      	mov	r1, sl
    e6b2:	a80b      	add	r0, sp, #44	; 0x2c
    e6b4:	9308      	str	r3, [sp, #32]
    e6b6:	f7ff fb58 	bl	dd6a <attsUuid16Cmp>
    e6ba:	2800      	cmp	r0, #0
    e6bc:	f000 80bf 	beq.w	e83e <attsProcReadGroupTypeReq+0x1da>
    e6c0:	ab0d      	add	r3, sp, #52	; 0x34
    e6c2:	9301      	str	r3, [sp, #4]
    e6c4:	ab0c      	add	r3, sp, #48	; 0x30
    e6c6:	9300      	str	r3, [sp, #0]
    e6c8:	4652      	mov	r2, sl
    e6ca:	9b08      	ldr	r3, [sp, #32]
    e6cc:	9903      	ldr	r1, [sp, #12]
    e6ce:	4638      	mov	r0, r7
    e6d0:	f7ff fcd8 	bl	e084 <attsFindUuidInRange>
    e6d4:	4604      	mov	r4, r0
    e6d6:	2800      	cmp	r0, #0
    e6d8:	f000 80b4 	beq.w	e844 <attsProcReadGroupTypeReq+0x1e0>
    e6dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6de:	4602      	mov	r2, r0
    e6e0:	7bdb      	ldrb	r3, [r3, #15]
    e6e2:	f899 001c 	ldrb.w	r0, [r9, #28]
    e6e6:	2101      	movs	r1, #1
    e6e8:	f7ff fb7e 	bl	dde8 <attsPermissions>
    e6ec:	4680      	mov	r8, r0
    e6ee:	2800      	cmp	r0, #0
    e6f0:	f040 80ab 	bne.w	e84a <attsProcReadGroupTypeReq+0x1e6>
    e6f4:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    e6f8:	3008      	adds	r0, #8
    e6fa:	b280      	uxth	r0, r0
    e6fc:	f7fd ff84 	bl	c608 <attMsgAlloc>
    e700:	2311      	movs	r3, #17
    e702:	4605      	mov	r5, r0
    e704:	2800      	cmp	r0, #0
    e706:	f000 80a2 	beq.w	e84e <attsProcReadGroupTypeReq+0x1ea>
    e70a:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    e70e:	7203      	strb	r3, [r0, #8]
    e710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e712:	f8b9 201a 	ldrh.w	r2, [r9, #26]
    e716:	689b      	ldr	r3, [r3, #8]
    e718:	881b      	ldrh	r3, [r3, #0]
    e71a:	7284      	strb	r4, [r0, #10]
    e71c:	3a06      	subs	r2, #6
    e71e:	4293      	cmp	r3, r2
    e720:	bf28      	it	cs
    e722:	4613      	movcs	r3, r2
    e724:	b2db      	uxtb	r3, r3
    e726:	9304      	str	r3, [sp, #16]
    e728:	3304      	adds	r3, #4
    e72a:	9305      	str	r3, [sp, #20]
    e72c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e730:	7243      	strb	r3, [r0, #9]
    e732:	0a23      	lsrs	r3, r4, #8
    e734:	72c3      	strb	r3, [r0, #11]
    e736:	4620      	mov	r0, r4
    e738:	f7ff fcde 	bl	e0f8 <attsFindServiceGroupEnd>
    e73c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e73e:	7328      	strb	r0, [r5, #12]
    e740:	0a02      	lsrs	r2, r0, #8
    e742:	f105 030e 	add.w	r3, r5, #14
    e746:	736a      	strb	r2, [r5, #13]
    e748:	4683      	mov	fp, r0
    e74a:	9a04      	ldr	r2, [sp, #16]
    e74c:	6849      	ldr	r1, [r1, #4]
    e74e:	4618      	mov	r0, r3
    e750:	f7fd fd06 	bl	c160 <memcpy>
    e754:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e758:	9206      	str	r2, [sp, #24]
    e75a:	3e06      	subs	r6, #6
    e75c:	1ab6      	subs	r6, r6, r2
    e75e:	9b06      	ldr	r3, [sp, #24]
    e760:	b2b2      	uxth	r2, r6
    e762:	9207      	str	r2, [sp, #28]
    e764:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
    e768:	9a05      	ldr	r2, [sp, #20]
    e76a:	33fc      	adds	r3, #252	; 0xfc
    e76c:	1886      	adds	r6, r0, r2
    e76e:	9309      	str	r3, [sp, #36]	; 0x24
    e770:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e774:	459b      	cmp	fp, r3
    e776:	f1a6 0404 	sub.w	r4, r6, #4
    e77a:	d049      	beq.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e77c:	f10b 0001 	add.w	r0, fp, #1
    e780:	9b03      	ldr	r3, [sp, #12]
    e782:	b280      	uxth	r0, r0
    e784:	4283      	cmp	r3, r0
    e786:	d343      	bcc.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e788:	ab0d      	add	r3, sp, #52	; 0x34
    e78a:	9301      	str	r3, [sp, #4]
    e78c:	ab0c      	add	r3, sp, #48	; 0x30
    e78e:	9300      	str	r3, [sp, #0]
    e790:	4652      	mov	r2, sl
    e792:	9b08      	ldr	r3, [sp, #32]
    e794:	9903      	ldr	r1, [sp, #12]
    e796:	f7ff fc75 	bl	e084 <attsFindUuidInRange>
    e79a:	4683      	mov	fp, r0
    e79c:	2800      	cmp	r0, #0
    e79e:	d037      	beq.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a2:	9906      	ldr	r1, [sp, #24]
    e7a4:	689a      	ldr	r2, [r3, #8]
    e7a6:	8812      	ldrh	r2, [r2, #0]
    e7a8:	428a      	cmp	r2, r1
    e7aa:	d131      	bne.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e7ac:	4602      	mov	r2, r0
    e7ae:	7bdb      	ldrb	r3, [r3, #15]
    e7b0:	f899 001c 	ldrb.w	r0, [r9, #28]
    e7b4:	2101      	movs	r1, #1
    e7b6:	f7ff fb17 	bl	dde8 <attsPermissions>
    e7ba:	bb48      	cbnz	r0, e810 <attsProcReadGroupTypeReq+0x1ac>
    e7bc:	9b07      	ldr	r3, [sp, #28]
    e7be:	9a05      	ldr	r2, [sp, #20]
    e7c0:	4293      	cmp	r3, r2
    e7c2:	d347      	bcc.n	e854 <attsProcReadGroupTypeReq+0x1f0>
    e7c4:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e7c8:	f806 bc04 	strb.w	fp, [r6, #-4]
    e7cc:	f806 3c03 	strb.w	r3, [r6, #-3]
    e7d0:	4658      	mov	r0, fp
    e7d2:	f7ff fc91 	bl	e0f8 <attsFindServiceGroupEnd>
    e7d6:	0a03      	lsrs	r3, r0, #8
    e7d8:	f806 0c02 	strb.w	r0, [r6, #-2]
    e7dc:	f806 3c01 	strb.w	r3, [r6, #-1]
    e7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7e2:	9a04      	ldr	r2, [sp, #16]
    e7e4:	6859      	ldr	r1, [r3, #4]
    e7e6:	4683      	mov	fp, r0
    e7e8:	4630      	mov	r0, r6
    e7ea:	f7fd fcb9 	bl	c160 <memcpy>
    e7ee:	9b07      	ldr	r3, [sp, #28]
    e7f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e7f2:	4413      	add	r3, r2
    e7f4:	b29b      	uxth	r3, r3
    e7f6:	9307      	str	r3, [sp, #28]
    e7f8:	9b05      	ldr	r3, [sp, #20]
    e7fa:	441e      	add	r6, r3
    e7fc:	e7b8      	b.n	e770 <attsProcReadGroupTypeReq+0x10c>
    e7fe:	f04f 0804 	mov.w	r8, #4
    e802:	2400      	movs	r4, #0
    e804:	4625      	mov	r5, r4
    e806:	e003      	b.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e808:	f04f 0801 	mov.w	r8, #1
    e80c:	463c      	mov	r4, r7
    e80e:	463d      	mov	r5, r7
    e810:	4648      	mov	r0, r9
    e812:	f7ff f9e1 	bl	dbd8 <attsDiscBusy>
    e816:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    e81a:	f1b8 0f00 	cmp.w	r8, #0
    e81e:	d11b      	bne.n	e858 <attsProcReadGroupTypeReq+0x1f4>
    e820:	f105 0208 	add.w	r2, r5, #8
    e824:	1aa2      	subs	r2, r4, r2
    e826:	4601      	mov	r1, r0
    e828:	462b      	mov	r3, r5
    e82a:	b292      	uxth	r2, r2
    e82c:	2004      	movs	r0, #4
    e82e:	f002 f9fb 	bl	10c28 <L2cDataReq>
    e832:	b00f      	add	sp, #60	; 0x3c
    e834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e838:	f04f 0801 	mov.w	r8, #1
    e83c:	e7e1      	b.n	e802 <attsProcReadGroupTypeReq+0x19e>
    e83e:	f04f 0810 	mov.w	r8, #16
    e842:	e7de      	b.n	e802 <attsProcReadGroupTypeReq+0x19e>
    e844:	f04f 080a 	mov.w	r8, #10
    e848:	e7dc      	b.n	e804 <attsProcReadGroupTypeReq+0x1a0>
    e84a:	4627      	mov	r7, r4
    e84c:	e7d9      	b.n	e802 <attsProcReadGroupTypeReq+0x19e>
    e84e:	4604      	mov	r4, r0
    e850:	4698      	mov	r8, r3
    e852:	e7dd      	b.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e854:	4680      	mov	r8, r0
    e856:	e7db      	b.n	e810 <attsProcReadGroupTypeReq+0x1ac>
    e858:	4643      	mov	r3, r8
    e85a:	463a      	mov	r2, r7
    e85c:	2110      	movs	r1, #16
    e85e:	f7ff f93d 	bl	dadc <attsErrRsp>
    e862:	e7e6      	b.n	e832 <attsProcReadGroupTypeReq+0x1ce>

0000e864 <attsSignedWriteStart>:
    e864:	6843      	ldr	r3, [r0, #4]
    e866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e868:	4606      	mov	r6, r0
    e86a:	460d      	mov	r5, r1
    e86c:	b1eb      	cbz	r3, e8aa <attsSignedWriteStart+0x46>
    e86e:	894c      	ldrh	r4, [r1, #10]
    e870:	3404      	adds	r4, #4
    e872:	b2a4      	uxth	r4, r4
    e874:	4620      	mov	r0, r4
    e876:	f006 fc55 	bl	15124 <WsfBufAlloc>
    e87a:	60b5      	str	r5, [r6, #8]
    e87c:	4607      	mov	r7, r0
    e87e:	b1a0      	cbz	r0, e8aa <attsSignedWriteStart+0x46>
    e880:	4622      	mov	r2, r4
    e882:	f105 0110 	add.w	r1, r5, #16
    e886:	f005 ff05 	bl	14694 <WStrReverseCpy>
    e88a:	4b0c      	ldr	r3, [pc, #48]	; (e8bc <attsSignedWriteStart+0x58>)
    e88c:	6870      	ldr	r0, [r6, #4]
    e88e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    e892:	2223      	movs	r2, #35	; 0x23
    e894:	9201      	str	r2, [sp, #4]
    e896:	7b2a      	ldrb	r2, [r5, #12]
    e898:	9200      	str	r2, [sp, #0]
    e89a:	4639      	mov	r1, r7
    e89c:	b2e2      	uxtb	r2, r4
    e89e:	f005 fc53 	bl	14148 <SecCmac>
    e8a2:	b940      	cbnz	r0, e8b6 <attsSignedWriteStart+0x52>
    e8a4:	4638      	mov	r0, r7
    e8a6:	f006 fc7d 	bl	151a4 <WsfBufFree>
    e8aa:	4628      	mov	r0, r5
    e8ac:	b003      	add	sp, #12
    e8ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e8b2:	f006 bc77 	b.w	151a4 <WsfBufFree>
    e8b6:	b003      	add	sp, #12
    e8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8ba:	bf00      	nop
    e8bc:	10003778 	.word	0x10003778

0000e8c0 <attsProcSignedWrite>:
    e8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e8c4:	7a93      	ldrb	r3, [r2, #10]
    e8c6:	7a55      	ldrb	r5, [r2, #9]
    e8c8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e8cc:	b2ad      	uxth	r5, r5
    e8ce:	4607      	mov	r7, r0
    e8d0:	4689      	mov	r9, r1
    e8d2:	4628      	mov	r0, r5
    e8d4:	a901      	add	r1, sp, #4
    e8d6:	4690      	mov	r8, r2
    e8d8:	f7ff fa5a 	bl	dd90 <attsFindByHandle>
    e8dc:	4604      	mov	r4, r0
    e8de:	2800      	cmp	r0, #0
    e8e0:	d033      	beq.n	e94a <attsProcSignedWrite+0x8a>
    e8e2:	7bc3      	ldrb	r3, [r0, #15]
    e8e4:	7f38      	ldrb	r0, [r7, #28]
    e8e6:	462a      	mov	r2, r5
    e8e8:	2110      	movs	r1, #16
    e8ea:	f7ff fa7d 	bl	dde8 <attsPermissions>
    e8ee:	bb60      	cbnz	r0, e94a <attsProcSignedWrite+0x8a>
    e8f0:	7ba2      	ldrb	r2, [r4, #14]
    e8f2:	0651      	lsls	r1, r2, #25
    e8f4:	d529      	bpl.n	e94a <attsProcSignedWrite+0x8a>
    e8f6:	f1a9 060f 	sub.w	r6, r9, #15
    e8fa:	0712      	lsls	r2, r2, #28
    e8fc:	b2b6      	uxth	r6, r6
    e8fe:	89a3      	ldrh	r3, [r4, #12]
    e900:	d421      	bmi.n	e946 <attsProcSignedWrite+0x86>
    e902:	429e      	cmp	r6, r3
    e904:	d121      	bne.n	e94a <attsProcSignedWrite+0x8a>
    e906:	f109 000f 	add.w	r0, r9, #15
    e90a:	b280      	uxth	r0, r0
    e90c:	f006 fc0a 	bl	15124 <WsfBufAlloc>
    e910:	4604      	mov	r4, r0
    e912:	b1d0      	cbz	r0, e94a <attsProcSignedWrite+0x8a>
    e914:	6047      	str	r7, [r0, #4]
    e916:	8105      	strh	r5, [r0, #8]
    e918:	8146      	strh	r6, [r0, #10]
    e91a:	7f3b      	ldrb	r3, [r7, #28]
    e91c:	7303      	strb	r3, [r0, #12]
    e91e:	464a      	mov	r2, r9
    e920:	f108 0108 	add.w	r1, r8, #8
    e924:	300d      	adds	r0, #13
    e926:	f7fd fc1b 	bl	c160 <memcpy>
    e92a:	7f38      	ldrb	r0, [r7, #28]
    e92c:	4a0a      	ldr	r2, [pc, #40]	; (e958 <attsProcSignedWrite+0x98>)
    e92e:	1e43      	subs	r3, r0, #1
    e930:	200c      	movs	r0, #12
    e932:	fb00 2003 	mla	r0, r0, r3, r2
    e936:	4621      	mov	r1, r4
    e938:	6883      	ldr	r3, [r0, #8]
    e93a:	b14b      	cbz	r3, e950 <attsProcSignedWrite+0x90>
    e93c:	f102 0060 	add.w	r0, r2, #96	; 0x60
    e940:	f006 fce8 	bl	15314 <WsfQueueEnq>
    e944:	e001      	b.n	e94a <attsProcSignedWrite+0x8a>
    e946:	429e      	cmp	r6, r3
    e948:	d9dd      	bls.n	e906 <attsProcSignedWrite+0x46>
    e94a:	b003      	add	sp, #12
    e94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e950:	f7ff ff88 	bl	e864 <attsSignedWriteStart>
    e954:	e7f9      	b.n	e94a <attsProcSignedWrite+0x8a>
    e956:	bf00      	nop
    e958:	10003bf4 	.word	0x10003bf4

0000e95c <attsSignMsgCback>:
    e95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e960:	7883      	ldrb	r3, [r0, #2]
    e962:	2b23      	cmp	r3, #35	; 0x23
    e964:	b088      	sub	sp, #32
    e966:	d152      	bne.n	ea0e <attsSignMsgCback+0xb2>
    e968:	7806      	ldrb	r6, [r0, #0]
    e96a:	4d39      	ldr	r5, [pc, #228]	; (ea50 <attsSignMsgCback+0xf4>)
    e96c:	6841      	ldr	r1, [r0, #4]
    e96e:	3e01      	subs	r6, #1
    e970:	270c      	movs	r7, #12
    e972:	4377      	muls	r7, r6
    e974:	19eb      	adds	r3, r5, r7
    e976:	2208      	movs	r2, #8
    e978:	689c      	ldr	r4, [r3, #8]
    e97a:	a806      	add	r0, sp, #24
    e97c:	f005 fe8a 	bl	14694 <WStrReverseCpy>
    e980:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
    e984:	f104 090d 	add.w	r9, r4, #13
    e988:	f10a 0107 	add.w	r1, sl, #7
    e98c:	2208      	movs	r2, #8
    e98e:	4449      	add	r1, r9
    e990:	a806      	add	r0, sp, #24
    e992:	f7fd fbb5 	bl	c100 <memcmp>
    e996:	4680      	mov	r8, r0
    e998:	bb50      	cbnz	r0, e9f0 <attsSignMsgCback+0x94>
    e99a:	eb09 030a 	add.w	r3, r9, sl
    e99e:	795a      	ldrb	r2, [r3, #5]
    e9a0:	7919      	ldrb	r1, [r3, #4]
    e9a2:	0412      	lsls	r2, r2, #16
    e9a4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    e9a8:	78d9      	ldrb	r1, [r3, #3]
    e9aa:	799b      	ldrb	r3, [r3, #6]
    e9ac:	440a      	add	r2, r1
    e9ae:	eb02 6203 	add.w	r2, r2, r3, lsl #24
    e9b2:	59eb      	ldr	r3, [r5, r7]
    e9b4:	429a      	cmp	r2, r3
    e9b6:	d31b      	bcc.n	e9f0 <attsSignMsgCback+0x94>
    e9b8:	3201      	adds	r2, #1
    e9ba:	51ea      	str	r2, [r5, r7]
    e9bc:	a905      	add	r1, sp, #20
    e9be:	8920      	ldrh	r0, [r4, #8]
    e9c0:	f7ff f9e6 	bl	dd90 <attsFindByHandle>
    e9c4:	4607      	mov	r7, r0
    e9c6:	b198      	cbz	r0, e9f0 <attsSignMsgCback+0x94>
    e9c8:	7b82      	ldrb	r2, [r0, #14]
    e9ca:	0791      	lsls	r1, r2, #30
    e9cc:	f104 0310 	add.w	r3, r4, #16
    e9d0:	d520      	bpl.n	ea14 <attsSignMsgCback+0xb8>
    e9d2:	9905      	ldr	r1, [sp, #20]
    e9d4:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e9d8:	f1b9 0f00 	cmp.w	r9, #0
    e9dc:	d01a      	beq.n	ea14 <attsSignMsgCback+0xb8>
    e9de:	8921      	ldrh	r1, [r4, #8]
    e9e0:	7b20      	ldrb	r0, [r4, #12]
    e9e2:	e9cd 3701 	strd	r3, r7, [sp, #4]
    e9e6:	8963      	ldrh	r3, [r4, #10]
    e9e8:	9300      	str	r3, [sp, #0]
    e9ea:	22d2      	movs	r2, #210	; 0xd2
    e9ec:	4643      	mov	r3, r8
    e9ee:	47c8      	blx	r9
    e9f0:	4620      	mov	r0, r4
    e9f2:	f006 fbd7 	bl	151a4 <WsfBufFree>
    e9f6:	4817      	ldr	r0, [pc, #92]	; (ea54 <attsSignMsgCback+0xf8>)
    e9f8:	f006 fcae 	bl	15358 <WsfQueueDeq>
    e9fc:	4601      	mov	r1, r0
    e9fe:	200c      	movs	r0, #12
    ea00:	b309      	cbz	r1, ea46 <attsSignMsgCback+0xea>
    ea02:	7b0b      	ldrb	r3, [r1, #12]
    ea04:	3b01      	subs	r3, #1
    ea06:	fb00 5003 	mla	r0, r0, r3, r5
    ea0a:	f7ff ff2b 	bl	e864 <attsSignedWriteStart>
    ea0e:	b008      	add	sp, #32
    ea10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ea14:	0692      	lsls	r2, r2, #26
    ea16:	d50a      	bpl.n	ea2e <attsSignMsgCback+0xd2>
    ea18:	4a0f      	ldr	r2, [pc, #60]	; (ea58 <attsSignMsgCback+0xfc>)
    ea1a:	f8d2 8014 	ldr.w	r8, [r2, #20]
    ea1e:	f1b8 0f00 	cmp.w	r8, #0
    ea22:	d004      	beq.n	ea2e <attsSignMsgCback+0xd2>
    ea24:	8922      	ldrh	r2, [r4, #8]
    ea26:	7b20      	ldrb	r0, [r4, #12]
    ea28:	2109      	movs	r1, #9
    ea2a:	47c0      	blx	r8
    ea2c:	e7e0      	b.n	e9f0 <attsSignMsgCback+0x94>
    ea2e:	8962      	ldrh	r2, [r4, #10]
    ea30:	6878      	ldr	r0, [r7, #4]
    ea32:	4619      	mov	r1, r3
    ea34:	f7fd fb94 	bl	c160 <memcpy>
    ea38:	7bbb      	ldrb	r3, [r7, #14]
    ea3a:	071b      	lsls	r3, r3, #28
    ea3c:	bf42      	ittt	mi
    ea3e:	68bb      	ldrmi	r3, [r7, #8]
    ea40:	8962      	ldrhmi	r2, [r4, #10]
    ea42:	801a      	strhmi	r2, [r3, #0]
    ea44:	e7d4      	b.n	e9f0 <attsSignMsgCback+0x94>
    ea46:	fb00 5506 	mla	r5, r0, r6, r5
    ea4a:	60a9      	str	r1, [r5, #8]
    ea4c:	e7df      	b.n	ea0e <attsSignMsgCback+0xb2>
    ea4e:	bf00      	nop
    ea50:	10003bf4 	.word	0x10003bf4
    ea54:	10003c54 	.word	0x10003c54
    ea58:	10003bdc 	.word	0x10003bdc

0000ea5c <AttsSignInit>:
    ea5c:	4b05      	ldr	r3, [pc, #20]	; (ea74 <AttsSignInit+0x18>)
    ea5e:	2200      	movs	r2, #0
    ea60:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    ea64:	4b04      	ldr	r3, [pc, #16]	; (ea78 <AttsSignInit+0x1c>)
    ea66:	4a05      	ldr	r2, [pc, #20]	; (ea7c <AttsSignInit+0x20>)
    ea68:	60da      	str	r2, [r3, #12]
    ea6a:	4b05      	ldr	r3, [pc, #20]	; (ea80 <AttsSignInit+0x24>)
    ea6c:	4a05      	ldr	r2, [pc, #20]	; (ea84 <AttsSignInit+0x28>)
    ea6e:	641a      	str	r2, [r3, #64]	; 0x40
    ea70:	4770      	bx	lr
    ea72:	bf00      	nop
    ea74:	10003bf4 	.word	0x10003bf4
    ea78:	10003bdc 	.word	0x10003bdc
    ea7c:	0000e95d 	.word	0x0000e95d
    ea80:	10002b10 	.word	0x10002b10
    ea84:	0000e8c1 	.word	0x0000e8c1

0000ea88 <AttsSetCsrk>:
    ea88:	4b03      	ldr	r3, [pc, #12]	; (ea98 <AttsSetCsrk+0x10>)
    ea8a:	3801      	subs	r0, #1
    ea8c:	220c      	movs	r2, #12
    ea8e:	fb02 3000 	mla	r0, r2, r0, r3
    ea92:	6041      	str	r1, [r0, #4]
    ea94:	4770      	bx	lr
    ea96:	bf00      	nop
    ea98:	10003bf4 	.word	0x10003bf4

0000ea9c <AttsSetSignCounter>:
    ea9c:	230c      	movs	r3, #12
    ea9e:	3801      	subs	r0, #1
    eaa0:	4358      	muls	r0, r3
    eaa2:	4b01      	ldr	r3, [pc, #4]	; (eaa8 <AttsSetSignCounter+0xc>)
    eaa4:	5019      	str	r1, [r3, r0]
    eaa6:	4770      	bx	lr
    eaa8:	10003bf4 	.word	0x10003bf4

0000eaac <AttsGetSignCounter>:
    eaac:	230c      	movs	r3, #12
    eaae:	3801      	subs	r0, #1
    eab0:	4358      	muls	r0, r3
    eab2:	4b01      	ldr	r3, [pc, #4]	; (eab8 <AttsGetSignCounter+0xc>)
    eab4:	5818      	ldr	r0, [r3, r0]
    eab6:	4770      	bx	lr
    eab8:	10003bf4 	.word	0x10003bf4

0000eabc <attsProcWrite>:
    eabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eac0:	7a93      	ldrb	r3, [r2, #10]
    eac2:	7a54      	ldrb	r4, [r2, #9]
    eac4:	f892 9008 	ldrb.w	r9, [r2, #8]
    eac8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    eacc:	b087      	sub	sp, #28
    eace:	b2a4      	uxth	r4, r4
    ead0:	4680      	mov	r8, r0
    ead2:	460d      	mov	r5, r1
    ead4:	4620      	mov	r0, r4
    ead6:	a905      	add	r1, sp, #20
    ead8:	4617      	mov	r7, r2
    eada:	f7ff f959 	bl	dd90 <attsFindByHandle>
    eade:	4606      	mov	r6, r0
    eae0:	2800      	cmp	r0, #0
    eae2:	d057      	beq.n	eb94 <attsProcWrite+0xd8>
    eae4:	7bc3      	ldrb	r3, [r0, #15]
    eae6:	f898 001c 	ldrb.w	r0, [r8, #28]
    eaea:	4622      	mov	r2, r4
    eaec:	2110      	movs	r1, #16
    eaee:	f7ff f97b 	bl	dde8 <attsPermissions>
    eaf2:	b9c0      	cbnz	r0, eb26 <attsProcWrite+0x6a>
    eaf4:	7bb2      	ldrb	r2, [r6, #14]
    eaf6:	89b3      	ldrh	r3, [r6, #12]
    eaf8:	3d03      	subs	r5, #3
    eafa:	0710      	lsls	r0, r2, #28
    eafc:	b2ad      	uxth	r5, r5
    eafe:	d41d      	bmi.n	eb3c <attsProcWrite+0x80>
    eb00:	429d      	cmp	r5, r3
    eb02:	d11d      	bne.n	eb40 <attsProcWrite+0x84>
    eb04:	0791      	lsls	r1, r2, #30
    eb06:	f107 030b 	add.w	r3, r7, #11
    eb0a:	d51b      	bpl.n	eb44 <attsProcWrite+0x88>
    eb0c:	9905      	ldr	r1, [sp, #20]
    eb0e:	68cf      	ldr	r7, [r1, #12]
    eb10:	b1c7      	cbz	r7, eb44 <attsProcWrite+0x88>
    eb12:	e9cd 3601 	strd	r3, r6, [sp, #4]
    eb16:	f898 001c 	ldrb.w	r0, [r8, #28]
    eb1a:	9500      	str	r5, [sp, #0]
    eb1c:	2300      	movs	r3, #0
    eb1e:	464a      	mov	r2, r9
    eb20:	4621      	mov	r1, r4
    eb22:	47b8      	blx	r7
    eb24:	b318      	cbz	r0, eb6e <attsProcWrite+0xb2>
    eb26:	f1b9 0f12 	cmp.w	r9, #18
    eb2a:	d130      	bne.n	eb8e <attsProcWrite+0xd2>
    eb2c:	4603      	mov	r3, r0
    eb2e:	4622      	mov	r2, r4
    eb30:	4649      	mov	r1, r9
    eb32:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    eb36:	f7fe ffd1 	bl	dadc <attsErrRsp>
    eb3a:	e028      	b.n	eb8e <attsProcWrite+0xd2>
    eb3c:	429d      	cmp	r5, r3
    eb3e:	d9e1      	bls.n	eb04 <attsProcWrite+0x48>
    eb40:	200d      	movs	r0, #13
    eb42:	e7f0      	b.n	eb26 <attsProcWrite+0x6a>
    eb44:	0692      	lsls	r2, r2, #26
    eb46:	d508      	bpl.n	eb5a <attsProcWrite+0x9e>
    eb48:	4a13      	ldr	r2, [pc, #76]	; (eb98 <attsProcWrite+0xdc>)
    eb4a:	6957      	ldr	r7, [r2, #20]
    eb4c:	b12f      	cbz	r7, eb5a <attsProcWrite+0x9e>
    eb4e:	4622      	mov	r2, r4
    eb50:	2109      	movs	r1, #9
    eb52:	f898 001c 	ldrb.w	r0, [r8, #28]
    eb56:	47b8      	blx	r7
    eb58:	e7e4      	b.n	eb24 <attsProcWrite+0x68>
    eb5a:	4619      	mov	r1, r3
    eb5c:	462a      	mov	r2, r5
    eb5e:	6870      	ldr	r0, [r6, #4]
    eb60:	f7fd fafe 	bl	c160 <memcpy>
    eb64:	7bb3      	ldrb	r3, [r6, #14]
    eb66:	071b      	lsls	r3, r3, #28
    eb68:	d501      	bpl.n	eb6e <attsProcWrite+0xb2>
    eb6a:	68b3      	ldr	r3, [r6, #8]
    eb6c:	801d      	strh	r5, [r3, #0]
    eb6e:	f1b9 0f12 	cmp.w	r9, #18
    eb72:	d10c      	bne.n	eb8e <attsProcWrite+0xd2>
    eb74:	2009      	movs	r0, #9
    eb76:	f7fd fd47 	bl	c608 <attMsgAlloc>
    eb7a:	4603      	mov	r3, r0
    eb7c:	b138      	cbz	r0, eb8e <attsProcWrite+0xd2>
    eb7e:	2213      	movs	r2, #19
    eb80:	7202      	strb	r2, [r0, #8]
    eb82:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    eb86:	2201      	movs	r2, #1
    eb88:	2004      	movs	r0, #4
    eb8a:	f002 f84d 	bl	10c28 <L2cDataReq>
    eb8e:	b007      	add	sp, #28
    eb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eb94:	2001      	movs	r0, #1
    eb96:	e7c6      	b.n	eb26 <attsProcWrite+0x6a>
    eb98:	10003bdc 	.word	0x10003bdc

0000eb9c <attsProcPrepWriteReq>:
    eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eba0:	7a93      	ldrb	r3, [r2, #10]
    eba2:	7a54      	ldrb	r4, [r2, #9]
    eba4:	7ad5      	ldrb	r5, [r2, #11]
    eba6:	7b16      	ldrb	r6, [r2, #12]
    eba8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    ebac:	b089      	sub	sp, #36	; 0x24
    ebae:	b2a4      	uxth	r4, r4
    ebb0:	4607      	mov	r7, r0
    ebb2:	468a      	mov	sl, r1
    ebb4:	4620      	mov	r0, r4
    ebb6:	a907      	add	r1, sp, #28
    ebb8:	4693      	mov	fp, r2
    ebba:	f7ff f8e9 	bl	dd90 <attsFindByHandle>
    ebbe:	4680      	mov	r8, r0
    ebc0:	2800      	cmp	r0, #0
    ebc2:	d079      	beq.n	ecb8 <attsProcPrepWriteReq+0x11c>
    ebc4:	7bc3      	ldrb	r3, [r0, #15]
    ebc6:	7f38      	ldrb	r0, [r7, #28]
    ebc8:	4622      	mov	r2, r4
    ebca:	2110      	movs	r1, #16
    ebcc:	f7ff f90c 	bl	dde8 <attsPermissions>
    ebd0:	2800      	cmp	r0, #0
    ebd2:	d153      	bne.n	ec7c <attsProcPrepWriteReq+0xe0>
    ebd4:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    ebd8:	b2ab      	uxth	r3, r5
    ebda:	9305      	str	r3, [sp, #20]
    ebdc:	9a05      	ldr	r2, [sp, #20]
    ebde:	f898 300e 	ldrb.w	r3, [r8, #14]
    ebe2:	b10a      	cbz	r2, ebe8 <attsProcPrepWriteReq+0x4c>
    ebe4:	06d9      	lsls	r1, r3, #27
    ebe6:	d569      	bpl.n	ecbc <attsProcPrepWriteReq+0x120>
    ebe8:	f1aa 0605 	sub.w	r6, sl, #5
    ebec:	071a      	lsls	r2, r3, #28
    ebee:	b2b6      	uxth	r6, r6
    ebf0:	d403      	bmi.n	ebfa <attsProcPrepWriteReq+0x5e>
    ebf2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    ebf6:	42b3      	cmp	r3, r6
    ebf8:	d162      	bne.n	ecc0 <attsProcPrepWriteReq+0x124>
    ebfa:	4638      	mov	r0, r7
    ebfc:	f006 fc37 	bl	1546e <WsfQueueCount>
    ec00:	4b32      	ldr	r3, [pc, #200]	; (eccc <attsProcPrepWriteReq+0x130>)
    ec02:	681b      	ldr	r3, [r3, #0]
    ec04:	79db      	ldrb	r3, [r3, #7]
    ec06:	4283      	cmp	r3, r0
    ec08:	d95c      	bls.n	ecc4 <attsProcPrepWriteReq+0x128>
    ec0a:	f10a 0006 	add.w	r0, sl, #6
    ec0e:	b280      	uxth	r0, r0
    ec10:	f006 fa88 	bl	15124 <WsfBufAlloc>
    ec14:	4681      	mov	r9, r0
    ec16:	2800      	cmp	r0, #0
    ec18:	d056      	beq.n	ecc8 <attsProcPrepWriteReq+0x12c>
    ec1a:	f898 300e 	ldrb.w	r3, [r8, #14]
    ec1e:	079b      	lsls	r3, r3, #30
    ec20:	f10b 0b0d 	add.w	fp, fp, #13
    ec24:	d41b      	bmi.n	ec5e <attsProcPrepWriteReq+0xc2>
    ec26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    ec2a:	f8a9 3008 	strh.w	r3, [r9, #8]
    ec2e:	4632      	mov	r2, r6
    ec30:	4659      	mov	r1, fp
    ec32:	f8a9 6004 	strh.w	r6, [r9, #4]
    ec36:	f8a9 4006 	strh.w	r4, [r9, #6]
    ec3a:	f109 000a 	add.w	r0, r9, #10
    ec3e:	f7fd fa8f 	bl	c160 <memcpy>
    ec42:	4649      	mov	r1, r9
    ec44:	4638      	mov	r0, r7
    ec46:	f006 fb65 	bl	15314 <WsfQueueEnq>
    ec4a:	f10a 0008 	add.w	r0, sl, #8
    ec4e:	b280      	uxth	r0, r0
    ec50:	f7fd fcda 	bl	c608 <attMsgAlloc>
    ec54:	4680      	mov	r8, r0
    ec56:	b9c0      	cbnz	r0, ec8a <attsProcPrepWriteReq+0xee>
    ec58:	b009      	add	sp, #36	; 0x24
    ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec5e:	9b07      	ldr	r3, [sp, #28]
    ec60:	68db      	ldr	r3, [r3, #12]
    ec62:	461d      	mov	r5, r3
    ec64:	2b00      	cmp	r3, #0
    ec66:	d0de      	beq.n	ec26 <attsProcPrepWriteReq+0x8a>
    ec68:	7f38      	ldrb	r0, [r7, #28]
    ec6a:	9600      	str	r6, [sp, #0]
    ec6c:	e9cd b801 	strd	fp, r8, [sp, #4]
    ec70:	2300      	movs	r3, #0
    ec72:	2216      	movs	r2, #22
    ec74:	4621      	mov	r1, r4
    ec76:	47a8      	blx	r5
    ec78:	2800      	cmp	r0, #0
    ec7a:	d0d4      	beq.n	ec26 <attsProcPrepWriteReq+0x8a>
    ec7c:	4603      	mov	r3, r0
    ec7e:	4622      	mov	r2, r4
    ec80:	2116      	movs	r1, #22
    ec82:	8b38      	ldrh	r0, [r7, #24]
    ec84:	f7fe ff2a 	bl	dadc <attsErrRsp>
    ec88:	e7e6      	b.n	ec58 <attsProcPrepWriteReq+0xbc>
    ec8a:	2317      	movs	r3, #23
    ec8c:	7203      	strb	r3, [r0, #8]
    ec8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ec92:	72c3      	strb	r3, [r0, #11]
    ec94:	9b05      	ldr	r3, [sp, #20]
    ec96:	7244      	strb	r4, [r0, #9]
    ec98:	0a1d      	lsrs	r5, r3, #8
    ec9a:	0a24      	lsrs	r4, r4, #8
    ec9c:	7284      	strb	r4, [r0, #10]
    ec9e:	7305      	strb	r5, [r0, #12]
    eca0:	4632      	mov	r2, r6
    eca2:	4659      	mov	r1, fp
    eca4:	300d      	adds	r0, #13
    eca6:	f7fd fa5b 	bl	c160 <memcpy>
    ecaa:	4643      	mov	r3, r8
    ecac:	4652      	mov	r2, sl
    ecae:	8b39      	ldrh	r1, [r7, #24]
    ecb0:	2004      	movs	r0, #4
    ecb2:	f001 ffb9 	bl	10c28 <L2cDataReq>
    ecb6:	e7cf      	b.n	ec58 <attsProcPrepWriteReq+0xbc>
    ecb8:	2001      	movs	r0, #1
    ecba:	e7df      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecbc:	200b      	movs	r0, #11
    ecbe:	e7dd      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecc0:	200d      	movs	r0, #13
    ecc2:	e7db      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecc4:	2009      	movs	r0, #9
    ecc6:	e7d9      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    ecc8:	2011      	movs	r0, #17
    ecca:	e7d7      	b.n	ec7c <attsProcPrepWriteReq+0xe0>
    eccc:	10002b9c 	.word	0x10002b9c

0000ecd0 <attsProcExecWriteReq>:
    ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecd4:	7a53      	ldrb	r3, [r2, #9]
    ecd6:	b086      	sub	sp, #24
    ecd8:	4606      	mov	r6, r0
    ecda:	b973      	cbnz	r3, ecfa <attsProcExecWriteReq+0x2a>
    ecdc:	f7fe ff56 	bl	db8c <attsClearPrepWrites>
    ece0:	2009      	movs	r0, #9
    ece2:	f7fd fc91 	bl	c608 <attMsgAlloc>
    ece6:	4603      	mov	r3, r0
    ece8:	b360      	cbz	r0, ed44 <attsProcExecWriteReq+0x74>
    ecea:	2219      	movs	r2, #25
    ecec:	7202      	strb	r2, [r0, #8]
    ecee:	8b31      	ldrh	r1, [r6, #24]
    ecf0:	2201      	movs	r2, #1
    ecf2:	2004      	movs	r0, #4
    ecf4:	f001 ff98 	bl	10c28 <L2cDataReq>
    ecf8:	e024      	b.n	ed44 <attsProcExecWriteReq+0x74>
    ecfa:	2b01      	cmp	r3, #1
    ecfc:	d16e      	bne.n	eddc <attsProcExecWriteReq+0x10c>
    ecfe:	6804      	ldr	r4, [r0, #0]
    ed00:	b94c      	cbnz	r4, ed16 <attsProcExecWriteReq+0x46>
    ed02:	f8df 80dc 	ldr.w	r8, [pc, #220]	; ede0 <attsProcExecWriteReq+0x110>
    ed06:	4630      	mov	r0, r6
    ed08:	f006 fb26 	bl	15358 <WsfQueueDeq>
    ed0c:	4605      	mov	r5, r0
    ed0e:	bb00      	cbnz	r0, ed52 <attsProcExecWriteReq+0x82>
    ed10:	2c00      	cmp	r4, #0
    ed12:	d0e5      	beq.n	ece0 <attsProcExecWriteReq+0x10>
    ed14:	e010      	b.n	ed38 <attsProcExecWriteReq+0x68>
    ed16:	a904      	add	r1, sp, #16
    ed18:	88e0      	ldrh	r0, [r4, #6]
    ed1a:	f7ff f839 	bl	dd90 <attsFindByHandle>
    ed1e:	b1b0      	cbz	r0, ed4e <attsProcExecWriteReq+0x7e>
    ed20:	8921      	ldrh	r1, [r4, #8]
    ed22:	8982      	ldrh	r2, [r0, #12]
    ed24:	4291      	cmp	r1, r2
    ed26:	d810      	bhi.n	ed4a <attsProcExecWriteReq+0x7a>
    ed28:	88a3      	ldrh	r3, [r4, #4]
    ed2a:	440b      	add	r3, r1
    ed2c:	4293      	cmp	r3, r2
    ed2e:	dd0e      	ble.n	ed4e <attsProcExecWriteReq+0x7e>
    ed30:	240d      	movs	r4, #13
    ed32:	4630      	mov	r0, r6
    ed34:	f7fe ff2a 	bl	db8c <attsClearPrepWrites>
    ed38:	4623      	mov	r3, r4
    ed3a:	2200      	movs	r2, #0
    ed3c:	2118      	movs	r1, #24
    ed3e:	8b30      	ldrh	r0, [r6, #24]
    ed40:	f7fe fecc 	bl	dadc <attsErrRsp>
    ed44:	b006      	add	sp, #24
    ed46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed4a:	2407      	movs	r4, #7
    ed4c:	e7f1      	b.n	ed32 <attsProcExecWriteReq+0x62>
    ed4e:	6824      	ldr	r4, [r4, #0]
    ed50:	e7d6      	b.n	ed00 <attsProcExecWriteReq+0x30>
    ed52:	a905      	add	r1, sp, #20
    ed54:	88e8      	ldrh	r0, [r5, #6]
    ed56:	f7ff f81b 	bl	dd90 <attsFindByHandle>
    ed5a:	4607      	mov	r7, r0
    ed5c:	b920      	cbnz	r0, ed68 <attsProcExecWriteReq+0x98>
    ed5e:	240e      	movs	r4, #14
    ed60:	4630      	mov	r0, r6
    ed62:	f7fe ff13 	bl	db8c <attsClearPrepWrites>
    ed66:	e017      	b.n	ed98 <attsProcExecWriteReq+0xc8>
    ed68:	7bc3      	ldrb	r3, [r0, #15]
    ed6a:	06d8      	lsls	r0, r3, #27
    ed6c:	d534      	bpl.n	edd8 <attsProcExecWriteReq+0x108>
    ed6e:	7bba      	ldrb	r2, [r7, #14]
    ed70:	0791      	lsls	r1, r2, #30
    ed72:	f105 030a 	add.w	r3, r5, #10
    ed76:	d513      	bpl.n	eda0 <attsProcExecWriteReq+0xd0>
    ed78:	9905      	ldr	r1, [sp, #20]
    ed7a:	68cc      	ldr	r4, [r1, #12]
    ed7c:	b184      	cbz	r4, eda0 <attsProcExecWriteReq+0xd0>
    ed7e:	892a      	ldrh	r2, [r5, #8]
    ed80:	88e9      	ldrh	r1, [r5, #6]
    ed82:	7f30      	ldrb	r0, [r6, #28]
    ed84:	e9cd 3701 	strd	r3, r7, [sp, #4]
    ed88:	88ab      	ldrh	r3, [r5, #4]
    ed8a:	9300      	str	r3, [sp, #0]
    ed8c:	4613      	mov	r3, r2
    ed8e:	2218      	movs	r2, #24
    ed90:	47a0      	blx	r4
    ed92:	4604      	mov	r4, r0
    ed94:	2800      	cmp	r0, #0
    ed96:	d1e3      	bne.n	ed60 <attsProcExecWriteReq+0x90>
    ed98:	4628      	mov	r0, r5
    ed9a:	f006 fa03 	bl	151a4 <WsfBufFree>
    ed9e:	e7b2      	b.n	ed06 <attsProcExecWriteReq+0x36>
    eda0:	0692      	lsls	r2, r2, #26
    eda2:	d507      	bpl.n	edb4 <attsProcExecWriteReq+0xe4>
    eda4:	f8d8 4014 	ldr.w	r4, [r8, #20]
    eda8:	b124      	cbz	r4, edb4 <attsProcExecWriteReq+0xe4>
    edaa:	88ea      	ldrh	r2, [r5, #6]
    edac:	7f30      	ldrb	r0, [r6, #28]
    edae:	2109      	movs	r1, #9
    edb0:	47a0      	blx	r4
    edb2:	e7ee      	b.n	ed92 <attsProcExecWriteReq+0xc2>
    edb4:	892c      	ldrh	r4, [r5, #8]
    edb6:	6878      	ldr	r0, [r7, #4]
    edb8:	88aa      	ldrh	r2, [r5, #4]
    edba:	4420      	add	r0, r4
    edbc:	4619      	mov	r1, r3
    edbe:	f7fd f9cf 	bl	c160 <memcpy>
    edc2:	7bbc      	ldrb	r4, [r7, #14]
    edc4:	f014 0408 	ands.w	r4, r4, #8
    edc8:	d0e6      	beq.n	ed98 <attsProcExecWriteReq+0xc8>
    edca:	88ab      	ldrh	r3, [r5, #4]
    edcc:	8929      	ldrh	r1, [r5, #8]
    edce:	68ba      	ldr	r2, [r7, #8]
    edd0:	440b      	add	r3, r1
    edd2:	8013      	strh	r3, [r2, #0]
    edd4:	2400      	movs	r4, #0
    edd6:	e7df      	b.n	ed98 <attsProcExecWriteReq+0xc8>
    edd8:	2403      	movs	r4, #3
    edda:	e7c1      	b.n	ed60 <attsProcExecWriteReq+0x90>
    eddc:	2404      	movs	r4, #4
    edde:	e7ab      	b.n	ed38 <attsProcExecWriteReq+0x68>
    ede0:	10003bdc 	.word	0x10003bdc

0000ede4 <dmAdvCbInit>:
    ede4:	4b0b      	ldr	r3, [pc, #44]	; (ee14 <dmAdvCbInit+0x30>)
    ede6:	181a      	adds	r2, r3, r0
    ede8:	21ff      	movs	r1, #255	; 0xff
    edea:	b510      	push	{r4, lr}
    edec:	7511      	strb	r1, [r2, #20]
    edee:	f100 0108 	add.w	r1, r0, #8
    edf2:	f44f 64c8 	mov.w	r4, #1600	; 0x640
    edf6:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
    edfa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    edfe:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    ee02:	8059      	strh	r1, [r3, #2]
    ee04:	2307      	movs	r3, #7
    ee06:	7553      	strb	r3, [r2, #21]
    ee08:	4b03      	ldr	r3, [pc, #12]	; (ee18 <dmAdvCbInit+0x34>)
    ee0a:	4418      	add	r0, r3
    ee0c:	2300      	movs	r3, #0
    ee0e:	7443      	strb	r3, [r0, #17]
    ee10:	75d3      	strb	r3, [r2, #23]
    ee12:	bd10      	pop	{r4, pc}
    ee14:	10003c5c 	.word	0x10003c5c
    ee18:	10003e24 	.word	0x10003e24

0000ee1c <dmAdvInit>:
    ee1c:	b508      	push	{r3, lr}
    ee1e:	2000      	movs	r0, #0
    ee20:	f7ff ffe0 	bl	ede4 <dmAdvCbInit>
    ee24:	4b03      	ldr	r3, [pc, #12]	; (ee34 <dmAdvInit+0x18>)
    ee26:	4a04      	ldr	r2, [pc, #16]	; (ee38 <dmAdvInit+0x1c>)
    ee28:	7b19      	ldrb	r1, [r3, #12]
    ee2a:	7211      	strb	r1, [r2, #8]
    ee2c:	2200      	movs	r2, #0
    ee2e:	739a      	strb	r2, [r3, #14]
    ee30:	bd08      	pop	{r3, pc}
    ee32:	bf00      	nop
    ee34:	10003e24 	.word	0x10003e24
    ee38:	10003c5c 	.word	0x10003c5c

0000ee3c <DmAdvConfig>:
    ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee40:	4607      	mov	r7, r0
    ee42:	200e      	movs	r0, #14
    ee44:	4688      	mov	r8, r1
    ee46:	4616      	mov	r6, r2
    ee48:	461d      	mov	r5, r3
    ee4a:	f006 f9fa 	bl	15242 <WsfMsgAlloc>
    ee4e:	4604      	mov	r4, r0
    ee50:	b180      	cbz	r0, ee74 <DmAdvConfig+0x38>
    ee52:	2300      	movs	r3, #0
    ee54:	7083      	strb	r3, [r0, #2]
    ee56:	f880 8005 	strb.w	r8, [r0, #5]
    ee5a:	7107      	strb	r7, [r0, #4]
    ee5c:	7186      	strb	r6, [r0, #6]
    ee5e:	4629      	mov	r1, r5
    ee60:	3007      	adds	r0, #7
    ee62:	f005 fb91 	bl	14588 <BdaCpy>
    ee66:	4b04      	ldr	r3, [pc, #16]	; (ee78 <DmAdvConfig+0x3c>)
    ee68:	4621      	mov	r1, r4
    ee6a:	7b18      	ldrb	r0, [r3, #12]
    ee6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ee70:	f006 ba0b 	b.w	1528a <WsfMsgSend>
    ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee78:	10003e24 	.word	0x10003e24

0000ee7c <DmAdvSetData>:
    ee7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee80:	4680      	mov	r8, r0
    ee82:	200c      	movs	r0, #12
    ee84:	460f      	mov	r7, r1
    ee86:	4616      	mov	r6, r2
    ee88:	461d      	mov	r5, r3
    ee8a:	9c06      	ldr	r4, [sp, #24]
    ee8c:	f006 f9d9 	bl	15242 <WsfMsgAlloc>
    ee90:	b170      	cbz	r0, eeb0 <DmAdvSetData+0x34>
    ee92:	2301      	movs	r3, #1
    ee94:	7083      	strb	r3, [r0, #2]
    ee96:	4b07      	ldr	r3, [pc, #28]	; (eeb4 <DmAdvSetData+0x38>)
    ee98:	f880 8004 	strb.w	r8, [r0, #4]
    ee9c:	7147      	strb	r7, [r0, #5]
    ee9e:	7186      	strb	r6, [r0, #6]
    eea0:	71c5      	strb	r5, [r0, #7]
    eea2:	6084      	str	r4, [r0, #8]
    eea4:	4601      	mov	r1, r0
    eea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eeaa:	7b18      	ldrb	r0, [r3, #12]
    eeac:	f006 b9ed 	b.w	1528a <WsfMsgSend>
    eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eeb4:	10003e24 	.word	0x10003e24

0000eeb8 <DmAdvStart>:
    eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eeba:	4604      	mov	r4, r0
    eebc:	200a      	movs	r0, #10
    eebe:	460f      	mov	r7, r1
    eec0:	4616      	mov	r6, r2
    eec2:	461d      	mov	r5, r3
    eec4:	f006 f9bd 	bl	15242 <WsfMsgAlloc>
    eec8:	b180      	cbz	r0, eeec <DmAdvStart+0x34>
    eeca:	2302      	movs	r3, #2
    eecc:	7083      	strb	r3, [r0, #2]
    eece:	7104      	strb	r4, [r0, #4]
    eed0:	b12c      	cbz	r4, eede <DmAdvStart+0x26>
    eed2:	783b      	ldrb	r3, [r7, #0]
    eed4:	7143      	strb	r3, [r0, #5]
    eed6:	8833      	ldrh	r3, [r6, #0]
    eed8:	80c3      	strh	r3, [r0, #6]
    eeda:	782b      	ldrb	r3, [r5, #0]
    eedc:	7203      	strb	r3, [r0, #8]
    eede:	4b04      	ldr	r3, [pc, #16]	; (eef0 <DmAdvStart+0x38>)
    eee0:	4601      	mov	r1, r0
    eee2:	7b18      	ldrb	r0, [r3, #12]
    eee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eee8:	f006 b9cf 	b.w	1528a <WsfMsgSend>
    eeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eeee:	bf00      	nop
    eef0:	10003e24 	.word	0x10003e24

0000eef4 <DmAdvStop>:
    eef4:	b538      	push	{r3, r4, r5, lr}
    eef6:	4604      	mov	r4, r0
    eef8:	2006      	movs	r0, #6
    eefa:	460d      	mov	r5, r1
    eefc:	f006 f9a1 	bl	15242 <WsfMsgAlloc>
    ef00:	b1a0      	cbz	r0, ef2c <DmAdvStop+0x38>
    ef02:	2303      	movs	r3, #3
    ef04:	7104      	strb	r4, [r0, #4]
    ef06:	3405      	adds	r4, #5
    ef08:	7083      	strb	r3, [r0, #2]
    ef0a:	1e69      	subs	r1, r5, #1
    ef0c:	1d43      	adds	r3, r0, #5
    ef0e:	4404      	add	r4, r0
    ef10:	42a3      	cmp	r3, r4
    ef12:	d106      	bne.n	ef22 <DmAdvStop+0x2e>
    ef14:	4b06      	ldr	r3, [pc, #24]	; (ef30 <DmAdvStop+0x3c>)
    ef16:	4601      	mov	r1, r0
    ef18:	7b18      	ldrb	r0, [r3, #12]
    ef1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ef1e:	f006 b9b4 	b.w	1528a <WsfMsgSend>
    ef22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ef26:	f803 2b01 	strb.w	r2, [r3], #1
    ef2a:	e7f1      	b.n	ef10 <DmAdvStop+0x1c>
    ef2c:	bd38      	pop	{r3, r4, r5, pc}
    ef2e:	bf00      	nop
    ef30:	10003e24 	.word	0x10003e24

0000ef34 <DmAdvRemoveAdvSet>:
    ef34:	b510      	push	{r4, lr}
    ef36:	4604      	mov	r4, r0
    ef38:	2006      	movs	r0, #6
    ef3a:	f006 f982 	bl	15242 <WsfMsgAlloc>
    ef3e:	4601      	mov	r1, r0
    ef40:	b140      	cbz	r0, ef54 <DmAdvRemoveAdvSet+0x20>
    ef42:	2304      	movs	r3, #4
    ef44:	7083      	strb	r3, [r0, #2]
    ef46:	4b04      	ldr	r3, [pc, #16]	; (ef58 <DmAdvRemoveAdvSet+0x24>)
    ef48:	7104      	strb	r4, [r0, #4]
    ef4a:	7b18      	ldrb	r0, [r3, #12]
    ef4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef50:	f006 b99b 	b.w	1528a <WsfMsgSend>
    ef54:	bd10      	pop	{r4, pc}
    ef56:	bf00      	nop
    ef58:	10003e24 	.word	0x10003e24

0000ef5c <DmAdvClearAdvSets>:
    ef5c:	b508      	push	{r3, lr}
    ef5e:	2004      	movs	r0, #4
    ef60:	f006 f96f 	bl	15242 <WsfMsgAlloc>
    ef64:	4601      	mov	r1, r0
    ef66:	b138      	cbz	r0, ef78 <DmAdvClearAdvSets+0x1c>
    ef68:	2305      	movs	r3, #5
    ef6a:	7083      	strb	r3, [r0, #2]
    ef6c:	4b03      	ldr	r3, [pc, #12]	; (ef7c <DmAdvClearAdvSets+0x20>)
    ef6e:	7b18      	ldrb	r0, [r3, #12]
    ef70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ef74:	f006 b989 	b.w	1528a <WsfMsgSend>
    ef78:	bd08      	pop	{r3, pc}
    ef7a:	bf00      	nop
    ef7c:	10003e24 	.word	0x10003e24

0000ef80 <DmAdvSetInterval>:
    ef80:	b570      	push	{r4, r5, r6, lr}
    ef82:	4604      	mov	r4, r0
    ef84:	460e      	mov	r6, r1
    ef86:	4615      	mov	r5, r2
    ef88:	f00a fc96 	bl	198b8 <WsfTaskLock>
    ef8c:	f104 0008 	add.w	r0, r4, #8
    ef90:	4b04      	ldr	r3, [pc, #16]	; (efa4 <DmAdvSetInterval+0x24>)
    ef92:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    ef96:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    ef9a:	805d      	strh	r5, [r3, #2]
    ef9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    efa0:	f00a bc90 	b.w	198c4 <WsfTaskUnlock>
    efa4:	10003c5c 	.word	0x10003c5c

0000efa8 <DmAdvSetChannelMap>:
    efa8:	b538      	push	{r3, r4, r5, lr}
    efaa:	4605      	mov	r5, r0
    efac:	460c      	mov	r4, r1
    efae:	f00a fc83 	bl	198b8 <WsfTaskLock>
    efb2:	4803      	ldr	r0, [pc, #12]	; (efc0 <DmAdvSetChannelMap+0x18>)
    efb4:	4428      	add	r0, r5
    efb6:	7544      	strb	r4, [r0, #21]
    efb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    efbc:	f00a bc82 	b.w	198c4 <WsfTaskUnlock>
    efc0:	10003c5c 	.word	0x10003c5c

0000efc4 <DmAdvSetAddrType>:
    efc4:	b510      	push	{r4, lr}
    efc6:	4604      	mov	r4, r0
    efc8:	f00a fc76 	bl	198b8 <WsfTaskLock>
    efcc:	4b02      	ldr	r3, [pc, #8]	; (efd8 <DmAdvSetAddrType+0x14>)
    efce:	739c      	strb	r4, [r3, #14]
    efd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efd4:	f00a bc76 	b.w	198c4 <WsfTaskUnlock>
    efd8:	10003e24 	.word	0x10003e24

0000efdc <DmAdvSetAdValue>:
    efdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efe0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    efe4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    efe8:	460c      	mov	r4, r1
    efea:	4691      	mov	r9, r2
    efec:	8819      	ldrh	r1, [r3, #0]
    efee:	4642      	mov	r2, r8
    eff0:	4683      	mov	fp, r0
    eff2:	461f      	mov	r7, r3
    eff4:	f001 f858 	bl	100a8 <DmFindAdType>
    eff8:	b1f8      	cbz	r0, f03a <DmAdvSetAdValue+0x5e>
    effa:	7805      	ldrb	r5, [r0, #0]
    effc:	1c66      	adds	r6, r4, #1
    effe:	42ae      	cmp	r6, r5
    f000:	d107      	bne.n	f012 <DmAdvSetAdValue+0x36>
    f002:	4622      	mov	r2, r4
    f004:	4649      	mov	r1, r9
    f006:	3002      	adds	r0, #2
    f008:	f7fd f8aa 	bl	c160 <memcpy>
    f00c:	2001      	movs	r0, #1
    f00e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f012:	f8b7 c000 	ldrh.w	ip, [r7]
    f016:	b2ad      	uxth	r5, r5
    f018:	4466      	add	r6, ip
    f01a:	1b76      	subs	r6, r6, r5
    f01c:	b2b6      	uxth	r6, r6
    f01e:	4556      	cmp	r6, sl
    f020:	d80b      	bhi.n	f03a <DmAdvSetAdValue+0x5e>
    f022:	3501      	adds	r5, #1
    f024:	1941      	adds	r1, r0, r5
    f026:	eba1 0208 	sub.w	r2, r1, r8
    f02a:	b2d2      	uxtb	r2, r2
    f02c:	ebac 0202 	sub.w	r2, ip, r2
    f030:	f7fd f930 	bl	c294 <memmove>
    f034:	883b      	ldrh	r3, [r7, #0]
    f036:	1b5d      	subs	r5, r3, r5
    f038:	803d      	strh	r5, [r7, #0]
    f03a:	883b      	ldrh	r3, [r7, #0]
    f03c:	191a      	adds	r2, r3, r4
    f03e:	3201      	adds	r2, #1
    f040:	4552      	cmp	r2, sl
    f042:	da10      	bge.n	f066 <DmAdvSetAdValue+0x8a>
    f044:	eb08 0003 	add.w	r0, r8, r3
    f048:	1c62      	adds	r2, r4, #1
    f04a:	f808 2003 	strb.w	r2, [r8, r3]
    f04e:	4649      	mov	r1, r9
    f050:	f880 b001 	strb.w	fp, [r0, #1]
    f054:	4622      	mov	r2, r4
    f056:	3002      	adds	r0, #2
    f058:	f7fd f882 	bl	c160 <memcpy>
    f05c:	883b      	ldrh	r3, [r7, #0]
    f05e:	3402      	adds	r4, #2
    f060:	441c      	add	r4, r3
    f062:	803c      	strh	r4, [r7, #0]
    f064:	e7d2      	b.n	f00c <DmAdvSetAdValue+0x30>
    f066:	2000      	movs	r0, #0
    f068:	e7d1      	b.n	f00e <DmAdvSetAdValue+0x32>

0000f06a <DmAdvSetName>:
    f06a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f06e:	4614      	mov	r4, r2
    f070:	4606      	mov	r6, r0
    f072:	460f      	mov	r7, r1
    f074:	461a      	mov	r2, r3
    f076:	8821      	ldrh	r1, [r4, #0]
    f078:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    f07c:	2009      	movs	r0, #9
    f07e:	4698      	mov	r8, r3
    f080:	f001 f812 	bl	100a8 <DmFindAdType>
    f084:	b928      	cbnz	r0, f092 <DmAdvSetName+0x28>
    f086:	4642      	mov	r2, r8
    f088:	8821      	ldrh	r1, [r4, #0]
    f08a:	2008      	movs	r0, #8
    f08c:	f001 f80c 	bl	100a8 <DmFindAdType>
    f090:	b188      	cbz	r0, f0b6 <DmAdvSetName+0x4c>
    f092:	f890 9000 	ldrb.w	r9, [r0]
    f096:	8822      	ldrh	r2, [r4, #0]
    f098:	f109 0901 	add.w	r9, r9, #1
    f09c:	eb00 0109 	add.w	r1, r0, r9
    f0a0:	eba1 0308 	sub.w	r3, r1, r8
    f0a4:	b2db      	uxtb	r3, r3
    f0a6:	1ad2      	subs	r2, r2, r3
    f0a8:	f7fd f8f4 	bl	c294 <memmove>
    f0ac:	8823      	ldrh	r3, [r4, #0]
    f0ae:	eba3 0909 	sub.w	r9, r3, r9
    f0b2:	f8a4 9000 	strh.w	r9, [r4]
    f0b6:	8822      	ldrh	r2, [r4, #0]
    f0b8:	1e6b      	subs	r3, r5, #1
    f0ba:	4293      	cmp	r3, r2
    f0bc:	dd1c      	ble.n	f0f8 <DmAdvSetName+0x8e>
    f0be:	18b3      	adds	r3, r6, r2
    f0c0:	3301      	adds	r3, #1
    f0c2:	429d      	cmp	r5, r3
    f0c4:	bfde      	ittt	le
    f0c6:	3d02      	suble	r5, #2
    f0c8:	1aad      	suble	r5, r5, r2
    f0ca:	b2ee      	uxtble	r6, r5
    f0cc:	eb08 0002 	add.w	r0, r8, r2
    f0d0:	bfd4      	ite	le
    f0d2:	2308      	movle	r3, #8
    f0d4:	2309      	movgt	r3, #9
    f0d6:	1c71      	adds	r1, r6, #1
    f0d8:	f808 1002 	strb.w	r1, [r8, r2]
    f0dc:	3002      	adds	r0, #2
    f0de:	f800 3c01 	strb.w	r3, [r0, #-1]
    f0e2:	4632      	mov	r2, r6
    f0e4:	4639      	mov	r1, r7
    f0e6:	f7fd f83b 	bl	c160 <memcpy>
    f0ea:	8825      	ldrh	r5, [r4, #0]
    f0ec:	3502      	adds	r5, #2
    f0ee:	4435      	add	r5, r6
    f0f0:	8025      	strh	r5, [r4, #0]
    f0f2:	2001      	movs	r0, #1
    f0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f0f8:	2000      	movs	r0, #0
    f0fa:	e7fb      	b.n	f0f4 <DmAdvSetName+0x8a>

0000f0fc <dmAdvActRemoveSet>:
    f0fc:	4770      	bx	lr

0000f0fe <dmAdvMsgHandler>:
    f0fe:	7883      	ldrb	r3, [r0, #2]
    f100:	4a02      	ldr	r2, [pc, #8]	; (f10c <dmAdvMsgHandler+0xe>)
    f102:	f003 030f 	and.w	r3, r3, #15
    f106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f10a:	4718      	bx	r3
    f10c:	00021f30 	.word	0x00021f30

0000f110 <dmAdvConfig>:
    f110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f114:	4e0e      	ldr	r6, [pc, #56]	; (f150 <dmAdvConfig+0x40>)
    f116:	4c0f      	ldr	r4, [pc, #60]	; (f154 <dmAdvConfig+0x44>)
    f118:	4605      	mov	r5, r0
    f11a:	7bb0      	ldrb	r0, [r6, #14]
    f11c:	8a27      	ldrh	r7, [r4, #16]
    f11e:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    f122:	4689      	mov	r9, r1
    f124:	4692      	mov	sl, r2
    f126:	f000 fff9 	bl	1011c <DmLlAddrType>
    f12a:	7c73      	ldrb	r3, [r6, #17]
    f12c:	9303      	str	r3, [sp, #12]
    f12e:	7d63      	ldrb	r3, [r4, #21]
    f130:	f8cd 9000 	str.w	r9, [sp]
    f134:	e9cd a301 	strd	sl, r3, [sp, #4]
    f138:	462a      	mov	r2, r5
    f13a:	4603      	mov	r3, r0
    f13c:	4641      	mov	r1, r8
    f13e:	4638      	mov	r0, r7
    f140:	f006 ff75 	bl	1602e <HciLeSetAdvParamCmd>
    f144:	4b04      	ldr	r3, [pc, #16]	; (f158 <dmAdvConfig+0x48>)
    f146:	701d      	strb	r5, [r3, #0]
    f148:	b004      	add	sp, #16
    f14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f14e:	bf00      	nop
    f150:	10003e24 	.word	0x10003e24
    f154:	10003c5c 	.word	0x10003c5c
    f158:	10003c78 	.word	0x10003c78

0000f15c <dmAdvReset>:
    f15c:	b507      	push	{r0, r1, r2, lr}
    f15e:	4b0d      	ldr	r3, [pc, #52]	; (f194 <dmAdvReset+0x38>)
    f160:	7dda      	ldrb	r2, [r3, #23]
    f162:	2a05      	cmp	r2, #5
    f164:	d006      	beq.n	f174 <dmAdvReset+0x18>
    f166:	2a01      	cmp	r2, #1
    f168:	d10e      	bne.n	f188 <dmAdvReset+0x2c>
    f16a:	7d1b      	ldrb	r3, [r3, #20]
    f16c:	2b01      	cmp	r3, #1
    f16e:	d00b      	beq.n	f188 <dmAdvReset+0x2c>
    f170:	2b04      	cmp	r3, #4
    f172:	d009      	beq.n	f188 <dmAdvReset+0x2c>
    f174:	4807      	ldr	r0, [pc, #28]	; (f194 <dmAdvReset+0x38>)
    f176:	f006 fa43 	bl	15600 <WsfTimerStop>
    f17a:	2322      	movs	r3, #34	; 0x22
    f17c:	f8ad 3006 	strh.w	r3, [sp, #6]
    f180:	4b05      	ldr	r3, [pc, #20]	; (f198 <dmAdvReset+0x3c>)
    f182:	a801      	add	r0, sp, #4
    f184:	689b      	ldr	r3, [r3, #8]
    f186:	4798      	blx	r3
    f188:	f7ff fe48 	bl	ee1c <dmAdvInit>
    f18c:	b003      	add	sp, #12
    f18e:	f85d fb04 	ldr.w	pc, [sp], #4
    f192:	bf00      	nop
    f194:	10003c5c 	.word	0x10003c5c
    f198:	10003e24 	.word	0x10003e24

0000f19c <dmAdvActConfig>:
    f19c:	4b06      	ldr	r3, [pc, #24]	; (f1b8 <dmAdvActConfig+0x1c>)
    f19e:	7dda      	ldrb	r2, [r3, #23]
    f1a0:	b942      	cbnz	r2, f1b4 <dmAdvActConfig+0x18>
    f1a2:	7d1b      	ldrb	r3, [r3, #20]
    f1a4:	2b01      	cmp	r3, #1
    f1a6:	d005      	beq.n	f1b4 <dmAdvActConfig+0x18>
    f1a8:	2b04      	cmp	r3, #4
    f1aa:	d003      	beq.n	f1b4 <dmAdvActConfig+0x18>
    f1ac:	1dc2      	adds	r2, r0, #7
    f1ae:	7981      	ldrb	r1, [r0, #6]
    f1b0:	7940      	ldrb	r0, [r0, #5]
    f1b2:	e7ad      	b.n	f110 <dmAdvConfig>
    f1b4:	4770      	bx	lr
    f1b6:	bf00      	nop
    f1b8:	10003c5c 	.word	0x10003c5c

0000f1bc <dmAdvActSetData>:
    f1bc:	4a06      	ldr	r2, [pc, #24]	; (f1d8 <dmAdvActSetData+0x1c>)
    f1be:	7dd2      	ldrb	r2, [r2, #23]
    f1c0:	4603      	mov	r3, r0
    f1c2:	b93a      	cbnz	r2, f1d4 <dmAdvActSetData+0x18>
    f1c4:	6899      	ldr	r1, [r3, #8]
    f1c6:	799b      	ldrb	r3, [r3, #6]
    f1c8:	79c0      	ldrb	r0, [r0, #7]
    f1ca:	b90b      	cbnz	r3, f1d0 <dmAdvActSetData+0x14>
    f1cc:	f006 beff 	b.w	15fce <HciLeSetAdvDataCmd>
    f1d0:	f006 bfd0 	b.w	16174 <HciLeSetScanRespDataCmd>
    f1d4:	4770      	bx	lr
    f1d6:	bf00      	nop
    f1d8:	10003c5c 	.word	0x10003c5c

0000f1dc <dmAdvActStart>:
    f1dc:	4b07      	ldr	r3, [pc, #28]	; (f1fc <dmAdvActStart+0x20>)
    f1de:	7dda      	ldrb	r2, [r3, #23]
    f1e0:	b95a      	cbnz	r2, f1fa <dmAdvActStart+0x1e>
    f1e2:	7d1a      	ldrb	r2, [r3, #20]
    f1e4:	2a01      	cmp	r2, #1
    f1e6:	d008      	beq.n	f1fa <dmAdvActStart+0x1e>
    f1e8:	2a04      	cmp	r2, #4
    f1ea:	d006      	beq.n	f1fa <dmAdvActStart+0x1e>
    f1ec:	2203      	movs	r2, #3
    f1ee:	75da      	strb	r2, [r3, #23]
    f1f0:	88c2      	ldrh	r2, [r0, #6]
    f1f2:	831a      	strh	r2, [r3, #24]
    f1f4:	2001      	movs	r0, #1
    f1f6:	f006 becd 	b.w	15f94 <HciLeSetAdvEnableCmd>
    f1fa:	4770      	bx	lr
    f1fc:	10003c5c 	.word	0x10003c5c

0000f200 <dmAdvActStop>:
    f200:	4b07      	ldr	r3, [pc, #28]	; (f220 <dmAdvActStop+0x20>)
    f202:	7dda      	ldrb	r2, [r3, #23]
    f204:	2a01      	cmp	r2, #1
    f206:	d109      	bne.n	f21c <dmAdvActStop+0x1c>
    f208:	7d1a      	ldrb	r2, [r3, #20]
    f20a:	2a01      	cmp	r2, #1
    f20c:	d006      	beq.n	f21c <dmAdvActStop+0x1c>
    f20e:	2a04      	cmp	r2, #4
    f210:	d004      	beq.n	f21c <dmAdvActStop+0x1c>
    f212:	2205      	movs	r2, #5
    f214:	2000      	movs	r0, #0
    f216:	75da      	strb	r2, [r3, #23]
    f218:	f006 bebc 	b.w	15f94 <HciLeSetAdvEnableCmd>
    f21c:	4770      	bx	lr
    f21e:	bf00      	nop
    f220:	10003c5c 	.word	0x10003c5c

0000f224 <dmAdvActTimeout>:
    f224:	f7ff bfec 	b.w	f200 <dmAdvActStop>

0000f228 <dmAdvHciHandler>:
    f228:	7883      	ldrb	r3, [r0, #2]
    f22a:	2b35      	cmp	r3, #53	; 0x35
    f22c:	b570      	push	{r4, r5, r6, lr}
    f22e:	4605      	mov	r5, r0
    f230:	d144      	bne.n	f2bc <dmAdvHciHandler+0x94>
    f232:	4c23      	ldr	r4, [pc, #140]	; (f2c0 <dmAdvHciHandler+0x98>)
    f234:	7de3      	ldrb	r3, [r4, #23]
    f236:	2b03      	cmp	r3, #3
    f238:	d01d      	beq.n	f276 <dmAdvHciHandler+0x4e>
    f23a:	2b05      	cmp	r3, #5
    f23c:	d138      	bne.n	f2b0 <dmAdvHciHandler+0x88>
    f23e:	2622      	movs	r6, #34	; 0x22
    f240:	78ea      	ldrb	r2, [r5, #3]
    f242:	2a00      	cmp	r2, #0
    f244:	d12e      	bne.n	f2a4 <dmAdvHciHandler+0x7c>
    f246:	2b05      	cmp	r3, #5
    f248:	d109      	bne.n	f25e <dmAdvHciHandler+0x36>
    f24a:	481d      	ldr	r0, [pc, #116]	; (f2c0 <dmAdvHciHandler+0x98>)
    f24c:	f006 f9d8 	bl	15600 <WsfTimerStop>
    f250:	2315      	movs	r3, #21
    f252:	70ab      	strb	r3, [r5, #2]
    f254:	4b1b      	ldr	r3, [pc, #108]	; (f2c4 <dmAdvHciHandler+0x9c>)
    f256:	685b      	ldr	r3, [r3, #4]
    f258:	4628      	mov	r0, r5
    f25a:	689b      	ldr	r3, [r3, #8]
    f25c:	4798      	blx	r3
    f25e:	23ff      	movs	r3, #255	; 0xff
    f260:	7523      	strb	r3, [r4, #20]
    f262:	2300      	movs	r3, #0
    f264:	75e3      	strb	r3, [r4, #23]
    f266:	b34e      	cbz	r6, f2bc <dmAdvHciHandler+0x94>
    f268:	4b17      	ldr	r3, [pc, #92]	; (f2c8 <dmAdvHciHandler+0xa0>)
    f26a:	70ae      	strb	r6, [r5, #2]
    f26c:	4628      	mov	r0, r5
    f26e:	689b      	ldr	r3, [r3, #8]
    f270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f274:	4718      	bx	r3
    f276:	2621      	movs	r6, #33	; 0x21
    f278:	78ea      	ldrb	r2, [r5, #3]
    f27a:	2a00      	cmp	r2, #0
    f27c:	d1f1      	bne.n	f262 <dmAdvHciHandler+0x3a>
    f27e:	2b03      	cmp	r3, #3
    f280:	d10d      	bne.n	f29e <dmAdvHciHandler+0x76>
    f282:	8b21      	ldrh	r1, [r4, #24]
    f284:	b121      	cbz	r1, f290 <dmAdvHciHandler+0x68>
    f286:	2306      	movs	r3, #6
    f288:	480d      	ldr	r0, [pc, #52]	; (f2c0 <dmAdvHciHandler+0x98>)
    f28a:	7323      	strb	r3, [r4, #12]
    f28c:	f006 f9a4 	bl	155d8 <WsfTimerStartMs>
    f290:	2314      	movs	r3, #20
    f292:	70ab      	strb	r3, [r5, #2]
    f294:	4b0b      	ldr	r3, [pc, #44]	; (f2c4 <dmAdvHciHandler+0x9c>)
    f296:	685b      	ldr	r3, [r3, #4]
    f298:	4628      	mov	r0, r5
    f29a:	689b      	ldr	r3, [r3, #8]
    f29c:	4798      	blx	r3
    f29e:	4b0b      	ldr	r3, [pc, #44]	; (f2cc <dmAdvHciHandler+0xa4>)
    f2a0:	781b      	ldrb	r3, [r3, #0]
    f2a2:	7523      	strb	r3, [r4, #20]
    f2a4:	2301      	movs	r3, #1
    f2a6:	e7dd      	b.n	f264 <dmAdvHciHandler+0x3c>
    f2a8:	2600      	movs	r6, #0
    f2aa:	e7e5      	b.n	f278 <dmAdvHciHandler+0x50>
    f2ac:	2600      	movs	r6, #0
    f2ae:	e7c7      	b.n	f240 <dmAdvHciHandler+0x18>
    f2b0:	2b02      	cmp	r3, #2
    f2b2:	d303      	bcc.n	f2bc <dmAdvHciHandler+0x94>
    f2b4:	2b03      	cmp	r3, #3
    f2b6:	d9f7      	bls.n	f2a8 <dmAdvHciHandler+0x80>
    f2b8:	2b04      	cmp	r3, #4
    f2ba:	d0f7      	beq.n	f2ac <dmAdvHciHandler+0x84>
    f2bc:	bd70      	pop	{r4, r5, r6, pc}
    f2be:	bf00      	nop
    f2c0:	10003c5c 	.word	0x10003c5c
    f2c4:	10002b54 	.word	0x10002b54
    f2c8:	10003e24 	.word	0x10003e24
    f2cc:	10003c78 	.word	0x10003c78

0000f2d0 <dmAdvActClearSets>:
    f2d0:	4770      	bx	lr

0000f2d2 <dmAdvStartDirected>:
    f2d2:	b510      	push	{r4, lr}
    f2d4:	4c08      	ldr	r4, [pc, #32]	; (f2f8 <dmAdvStartDirected+0x26>)
    f2d6:	9a03      	ldr	r2, [sp, #12]
    f2d8:	7de3      	ldrb	r3, [r4, #23]
    f2da:	4608      	mov	r0, r1
    f2dc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f2e0:	b943      	cbnz	r3, f2f4 <dmAdvStartDirected+0x22>
    f2e2:	f7ff ff15 	bl	f110 <dmAdvConfig>
    f2e6:	2302      	movs	r3, #2
    f2e8:	75e3      	strb	r3, [r4, #23]
    f2ea:	2001      	movs	r0, #1
    f2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2f0:	f006 be50 	b.w	15f94 <HciLeSetAdvEnableCmd>
    f2f4:	bd10      	pop	{r4, pc}
    f2f6:	bf00      	nop
    f2f8:	10003c5c 	.word	0x10003c5c

0000f2fc <dmAdvStopDirected>:
    f2fc:	4b04      	ldr	r3, [pc, #16]	; (f310 <dmAdvStopDirected+0x14>)
    f2fe:	7dda      	ldrb	r2, [r3, #23]
    f300:	2a01      	cmp	r2, #1
    f302:	d104      	bne.n	f30e <dmAdvStopDirected+0x12>
    f304:	2204      	movs	r2, #4
    f306:	2000      	movs	r0, #0
    f308:	75da      	strb	r2, [r3, #23]
    f30a:	f006 be43 	b.w	15f94 <HciLeSetAdvEnableCmd>
    f30e:	4770      	bx	lr
    f310:	10003c5c 	.word	0x10003c5c

0000f314 <dmAdvConnected>:
    f314:	b510      	push	{r4, lr}
    f316:	4c04      	ldr	r4, [pc, #16]	; (f328 <dmAdvConnected+0x14>)
    f318:	4620      	mov	r0, r4
    f31a:	f006 f971 	bl	15600 <WsfTimerStop>
    f31e:	23ff      	movs	r3, #255	; 0xff
    f320:	7523      	strb	r3, [r4, #20]
    f322:	2300      	movs	r3, #0
    f324:	75e3      	strb	r3, [r4, #23]
    f326:	bd10      	pop	{r4, pc}
    f328:	10003c5c 	.word	0x10003c5c

0000f32c <dmAdvConnectFailed>:
    f32c:	f7ff bff2 	b.w	f314 <dmAdvConnected>

0000f330 <DmAdvInit>:
    f330:	b508      	push	{r3, lr}
    f332:	f00a fac1 	bl	198b8 <WsfTaskLock>
    f336:	4b04      	ldr	r3, [pc, #16]	; (f348 <DmAdvInit+0x18>)
    f338:	4a04      	ldr	r2, [pc, #16]	; (f34c <DmAdvInit+0x1c>)
    f33a:	601a      	str	r2, [r3, #0]
    f33c:	f7ff fd6e 	bl	ee1c <dmAdvInit>
    f340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f344:	f00a babe 	b.w	198c4 <WsfTaskUnlock>
    f348:	10002b54 	.word	0x10002b54
    f34c:	00021f4c 	.word	0x00021f4c

0000f350 <DmAdvModeLeg>:
    f350:	4b03      	ldr	r3, [pc, #12]	; (f360 <DmAdvModeLeg+0x10>)
    f352:	6818      	ldr	r0, [r3, #0]
    f354:	4b03      	ldr	r3, [pc, #12]	; (f364 <DmAdvModeLeg+0x14>)
    f356:	1ac3      	subs	r3, r0, r3
    f358:	4258      	negs	r0, r3
    f35a:	4158      	adcs	r0, r3
    f35c:	4770      	bx	lr
    f35e:	bf00      	nop
    f360:	10002b54 	.word	0x10002b54
    f364:	00021f4c 	.word	0x00021f4c

0000f368 <dmAdvPrivMsgHandler>:
    f368:	7883      	ldrb	r3, [r0, #2]
    f36a:	4a03      	ldr	r2, [pc, #12]	; (f378 <dmAdvPrivMsgHandler+0x10>)
    f36c:	f003 030f 	and.w	r3, r3, #15
    f370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f374:	4718      	bx	r3
    f376:	bf00      	nop
    f378:	00021f58 	.word	0x00021f58

0000f37c <dmAdvPrivAddrCalc>:
    f37c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f37e:	2103      	movs	r1, #3
    f380:	a802      	add	r0, sp, #8
    f382:	f005 f8dd 	bl	14540 <SecRand>
    f386:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f392:	220d      	movs	r2, #13
    f394:	2100      	movs	r1, #0
    f396:	f10d 000b 	add.w	r0, sp, #11
    f39a:	f88d 300a 	strb.w	r3, [sp, #10]
    f39e:	f7fc ffdd 	bl	c35c <memset>
    f3a2:	f001 fa35 	bl	10810 <DmSecGetLocalIrk>
    f3a6:	4b08      	ldr	r3, [pc, #32]	; (f3c8 <dmAdvPrivAddrCalc+0x4c>)
    f3a8:	7b1a      	ldrb	r2, [r3, #12]
    f3aa:	2313      	movs	r3, #19
    f3ac:	9300      	str	r3, [sp, #0]
    f3ae:	a902      	add	r1, sp, #8
    f3b0:	2300      	movs	r3, #0
    f3b2:	f004 fcf3 	bl	13d9c <SecAes>
    f3b6:	4a05      	ldr	r2, [pc, #20]	; (f3cc <dmAdvPrivAddrCalc+0x50>)
    f3b8:	9b02      	ldr	r3, [sp, #8]
    f3ba:	8213      	strh	r3, [r2, #16]
    f3bc:	0c1b      	lsrs	r3, r3, #16
    f3be:	7493      	strb	r3, [r2, #18]
    f3c0:	b007      	add	sp, #28
    f3c2:	f85d fb04 	ldr.w	pc, [sp], #4
    f3c6:	bf00      	nop
    f3c8:	10003e24 	.word	0x10003e24
    f3cc:	10003c7c 	.word	0x10003c7c

0000f3d0 <dmAdvPrivActStart>:
    f3d0:	b538      	push	{r3, r4, r5, lr}
    f3d2:	4c12      	ldr	r4, [pc, #72]	; (f41c <dmAdvPrivActStart+0x4c>)
    f3d4:	2501      	movs	r5, #1
    f3d6:	75a5      	strb	r5, [r4, #22]
    f3d8:	8883      	ldrh	r3, [r0, #4]
    f3da:	82a3      	strh	r3, [r4, #20]
    f3dc:	4628      	mov	r0, r5
    f3de:	f7ff fdf1 	bl	efc4 <DmAdvSetAddrType>
    f3e2:	4628      	mov	r0, r5
    f3e4:	f001 f8e6 	bl	105b4 <DmScanSetAddrType>
    f3e8:	4628      	mov	r0, r5
    f3ea:	f002 fdec 	bl	11fc6 <DmConnSetAddrType>
    f3ee:	8aa1      	ldrh	r1, [r4, #20]
    f3f0:	b169      	cbz	r1, f40e <dmAdvPrivActStart+0x3e>
    f3f2:	4b0b      	ldr	r3, [pc, #44]	; (f420 <dmAdvPrivActStart+0x50>)
    f3f4:	7b1b      	ldrb	r3, [r3, #12]
    f3f6:	7223      	strb	r3, [r4, #8]
    f3f8:	4620      	mov	r0, r4
    f3fa:	2312      	movs	r3, #18
    f3fc:	7323      	strb	r3, [r4, #12]
    f3fe:	f006 f8d9 	bl	155b4 <WsfTimerStartSec>
    f402:	f007 fe89 	bl	17118 <HciLlPrivacySupported>
    f406:	b110      	cbz	r0, f40e <dmAdvPrivActStart+0x3e>
    f408:	8aa0      	ldrh	r0, [r4, #20]
    f40a:	f001 f843 	bl	10494 <DmPrivSetResolvablePrivateAddrTimeout>
    f40e:	7de3      	ldrb	r3, [r4, #23]
    f410:	b913      	cbnz	r3, f418 <dmAdvPrivActStart+0x48>
    f412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f416:	e7b1      	b.n	f37c <dmAdvPrivAddrCalc>
    f418:	bd38      	pop	{r3, r4, r5, pc}
    f41a:	bf00      	nop
    f41c:	10003c7c 	.word	0x10003c7c
    f420:	10003e24 	.word	0x10003e24

0000f424 <dmAdvPrivActAdvStop>:
    f424:	4802      	ldr	r0, [pc, #8]	; (f430 <dmAdvPrivActAdvStop+0xc>)
    f426:	7d83      	ldrb	r3, [r0, #22]
    f428:	b10b      	cbz	r3, f42e <dmAdvPrivActAdvStop+0xa>
    f42a:	f006 b8e9 	b.w	15600 <WsfTimerStop>
    f42e:	4770      	bx	lr
    f430:	10003c7c 	.word	0x10003c7c

0000f434 <dmAdvPrivActStop>:
    f434:	b538      	push	{r3, r4, r5, lr}
    f436:	4d0b      	ldr	r5, [pc, #44]	; (f464 <dmAdvPrivActStop+0x30>)
    f438:	2400      	movs	r4, #0
    f43a:	4628      	mov	r0, r5
    f43c:	f006 f8e0 	bl	15600 <WsfTimerStop>
    f440:	4620      	mov	r0, r4
    f442:	75ac      	strb	r4, [r5, #22]
    f444:	f7ff fdbe 	bl	efc4 <DmAdvSetAddrType>
    f448:	4620      	mov	r0, r4
    f44a:	f001 f8b3 	bl	105b4 <DmScanSetAddrType>
    f44e:	4620      	mov	r0, r4
    f450:	f002 fdb9 	bl	11fc6 <DmConnSetAddrType>
    f454:	f007 fe60 	bl	17118 <HciLlPrivacySupported>
    f458:	b118      	cbz	r0, f462 <dmAdvPrivActStop+0x2e>
    f45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f45e:	f000 bfed 	b.w	1043c <DmPrivClearResList>
    f462:	bd38      	pop	{r3, r4, r5, pc}
    f464:	10003c7c 	.word	0x10003c7c

0000f468 <dmAdvPrivActAdvStart>:
    f468:	4804      	ldr	r0, [pc, #16]	; (f47c <dmAdvPrivActAdvStart+0x14>)
    f46a:	7d83      	ldrb	r3, [r0, #22]
    f46c:	b123      	cbz	r3, f478 <dmAdvPrivActAdvStart+0x10>
    f46e:	2312      	movs	r3, #18
    f470:	8a81      	ldrh	r1, [r0, #20]
    f472:	7303      	strb	r3, [r0, #12]
    f474:	f006 b89e 	b.w	155b4 <WsfTimerStartSec>
    f478:	4770      	bx	lr
    f47a:	bf00      	nop
    f47c:	10003c7c 	.word	0x10003c7c

0000f480 <dmAdvPrivActTimeout>:
    f480:	b508      	push	{r3, lr}
    f482:	4806      	ldr	r0, [pc, #24]	; (f49c <dmAdvPrivActTimeout+0x1c>)
    f484:	7d83      	ldrb	r3, [r0, #22]
    f486:	b13b      	cbz	r3, f498 <dmAdvPrivActTimeout+0x18>
    f488:	2312      	movs	r3, #18
    f48a:	8a81      	ldrh	r1, [r0, #20]
    f48c:	7303      	strb	r3, [r0, #12]
    f48e:	f006 f891 	bl	155b4 <WsfTimerStartSec>
    f492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f496:	e771      	b.n	f37c <dmAdvPrivAddrCalc>
    f498:	bd08      	pop	{r3, pc}
    f49a:	bf00      	nop
    f49c:	10003c7c 	.word	0x10003c7c

0000f4a0 <dmAdvPrivReset>:
    f4a0:	4804      	ldr	r0, [pc, #16]	; (f4b4 <dmAdvPrivReset+0x14>)
    f4a2:	7d82      	ldrb	r2, [r0, #22]
    f4a4:	2300      	movs	r3, #0
    f4a6:	75c3      	strb	r3, [r0, #23]
    f4a8:	b112      	cbz	r2, f4b0 <dmAdvPrivReset+0x10>
    f4aa:	7583      	strb	r3, [r0, #22]
    f4ac:	f006 b8a8 	b.w	15600 <WsfTimerStop>
    f4b0:	4770      	bx	lr
    f4b2:	bf00      	nop
    f4b4:	10003c7c 	.word	0x10003c7c

0000f4b8 <dmAdvPrivActAesCmpl>:
    f4b8:	b530      	push	{r4, r5, lr}
    f4ba:	4d16      	ldr	r5, [pc, #88]	; (f514 <dmAdvPrivActAesCmpl+0x5c>)
    f4bc:	7dab      	ldrb	r3, [r5, #22]
    f4be:	b085      	sub	sp, #20
    f4c0:	b32b      	cbz	r3, f50e <dmAdvPrivActAesCmpl+0x56>
    f4c2:	6843      	ldr	r3, [r0, #4]
    f4c4:	4c14      	ldr	r4, [pc, #80]	; (f518 <dmAdvPrivActAesCmpl+0x60>)
    f4c6:	881a      	ldrh	r2, [r3, #0]
    f4c8:	789b      	ldrb	r3, [r3, #2]
    f4ca:	70a3      	strb	r3, [r4, #2]
    f4cc:	462b      	mov	r3, r5
    f4ce:	8022      	strh	r2, [r4, #0]
    f4d0:	f833 2f10 	ldrh.w	r2, [r3, #16]!
    f4d4:	f8a4 2003 	strh.w	r2, [r4, #3]
    f4d8:	789b      	ldrb	r3, [r3, #2]
    f4da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f4e2:	4620      	mov	r0, r4
    f4e4:	7163      	strb	r3, [r4, #5]
    f4e6:	f006 fe27 	bl	16138 <HciLeSetRandAddrCmd>
    f4ea:	2323      	movs	r3, #35	; 0x23
    f4ec:	4621      	mov	r1, r4
    f4ee:	a802      	add	r0, sp, #8
    f4f0:	f88d 3006 	strb.w	r3, [sp, #6]
    f4f4:	f005 f848 	bl	14588 <BdaCpy>
    f4f8:	7deb      	ldrb	r3, [r5, #23]
    f4fa:	fab3 f383 	clz	r3, r3
    f4fe:	095b      	lsrs	r3, r3, #5
    f500:	f88d 300e 	strb.w	r3, [sp, #14]
    f504:	a801      	add	r0, sp, #4
    f506:	68a3      	ldr	r3, [r4, #8]
    f508:	4798      	blx	r3
    f50a:	2301      	movs	r3, #1
    f50c:	75eb      	strb	r3, [r5, #23]
    f50e:	b005      	add	sp, #20
    f510:	bd30      	pop	{r4, r5, pc}
    f512:	bf00      	nop
    f514:	10003c7c 	.word	0x10003c7c
    f518:	10003e24 	.word	0x10003e24

0000f51c <DmAdvPrivInit>:
    f51c:	4b01      	ldr	r3, [pc, #4]	; (f524 <DmAdvPrivInit+0x8>)
    f51e:	4a02      	ldr	r2, [pc, #8]	; (f528 <DmAdvPrivInit+0xc>)
    f520:	605a      	str	r2, [r3, #4]
    f522:	4770      	bx	lr
    f524:	10002b54 	.word	0x10002b54
    f528:	00021f70 	.word	0x00021f70

0000f52c <DmAdvPrivStart>:
    f52c:	b510      	push	{r4, lr}
    f52e:	4604      	mov	r4, r0
    f530:	2006      	movs	r0, #6
    f532:	f005 fe86 	bl	15242 <WsfMsgAlloc>
    f536:	4601      	mov	r1, r0
    f538:	b140      	cbz	r0, f54c <DmAdvPrivStart+0x20>
    f53a:	2310      	movs	r3, #16
    f53c:	7083      	strb	r3, [r0, #2]
    f53e:	4b04      	ldr	r3, [pc, #16]	; (f550 <DmAdvPrivStart+0x24>)
    f540:	8084      	strh	r4, [r0, #4]
    f542:	7b18      	ldrb	r0, [r3, #12]
    f544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f548:	f005 be9f 	b.w	1528a <WsfMsgSend>
    f54c:	bd10      	pop	{r4, pc}
    f54e:	bf00      	nop
    f550:	10003e24 	.word	0x10003e24

0000f554 <DmAdvPrivStop>:
    f554:	b508      	push	{r3, lr}
    f556:	2004      	movs	r0, #4
    f558:	f005 fe73 	bl	15242 <WsfMsgAlloc>
    f55c:	4601      	mov	r1, r0
    f55e:	b138      	cbz	r0, f570 <DmAdvPrivStop+0x1c>
    f560:	2311      	movs	r3, #17
    f562:	7083      	strb	r3, [r0, #2]
    f564:	4b03      	ldr	r3, [pc, #12]	; (f574 <DmAdvPrivStop+0x20>)
    f566:	7b18      	ldrb	r0, [r3, #12]
    f568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f56c:	f005 be8d 	b.w	1528a <WsfMsgSend>
    f570:	bd08      	pop	{r3, pc}
    f572:	bf00      	nop
    f574:	10003e24 	.word	0x10003e24

0000f578 <dmConnSmActNone>:
    f578:	4770      	bx	lr

0000f57a <dmConnSmActHciUpdated>:
    f57a:	2329      	movs	r3, #41	; 0x29
    f57c:	708b      	strb	r3, [r1, #2]
    f57e:	4b02      	ldr	r3, [pc, #8]	; (f588 <dmConnSmActHciUpdated+0xe>)
    f580:	4608      	mov	r0, r1
    f582:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f586:	4718      	bx	r3
    f588:	10003c94 	.word	0x10003c94

0000f58c <dmConnSmActClose>:
    f58c:	7909      	ldrb	r1, [r1, #4]
    f58e:	8980      	ldrh	r0, [r0, #12]
    f590:	f006 b966 	b.w	15860 <HciDisconnectCmd>

0000f594 <dmConnReset>:
    f594:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f596:	2339      	movs	r3, #57	; 0x39
    f598:	4d14      	ldr	r5, [pc, #80]	; (f5ec <dmConnReset+0x58>)
    f59a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f59e:	2400      	movs	r4, #0
    f5a0:	2316      	movs	r3, #22
    f5a2:	f88d 4008 	strb.w	r4, [sp, #8]
    f5a6:	f88d 300c 	strb.w	r3, [sp, #12]
    f5aa:	462e      	mov	r6, r5
    f5ac:	1928      	adds	r0, r5, r4
    f5ae:	7d83      	ldrb	r3, [r0, #22]
    f5b0:	b13b      	cbz	r3, f5c2 <dmConnReset+0x2e>
    f5b2:	7c03      	ldrb	r3, [r0, #16]
    f5b4:	f8ad 300a 	strh.w	r3, [sp, #10]
    f5b8:	a901      	add	r1, sp, #4
    f5ba:	f8ad 3004 	strh.w	r3, [sp, #4]
    f5be:	f000 fca1 	bl	ff04 <dmConnSmExecute>
    f5c2:	342c      	adds	r4, #44	; 0x2c
    f5c4:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f5c8:	d1f0      	bne.n	f5ac <dmConnReset+0x18>
    f5ca:	4a09      	ldr	r2, [pc, #36]	; (f5f0 <dmConnReset+0x5c>)
    f5cc:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
    f5d0:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
    f5d4:	6810      	ldr	r0, [r2, #0]
    f5d6:	6851      	ldr	r1, [r2, #4]
    f5d8:	4b06      	ldr	r3, [pc, #24]	; (f5f4 <dmConnReset+0x60>)
    f5da:	c303      	stmia	r3!, {r0, r1}
    f5dc:	6890      	ldr	r0, [r2, #8]
    f5de:	6018      	str	r0, [r3, #0]
    f5e0:	4b05      	ldr	r3, [pc, #20]	; (f5f8 <dmConnReset+0x64>)
    f5e2:	2200      	movs	r2, #0
    f5e4:	74da      	strb	r2, [r3, #19]
    f5e6:	735a      	strb	r2, [r3, #13]
    f5e8:	b004      	add	sp, #16
    f5ea:	bd70      	pop	{r4, r5, r6, pc}
    f5ec:	10003c94 	.word	0x10003c94
    f5f0:	00021f7c 	.word	0x00021f7c
    f5f4:	10003e08 	.word	0x10003e08
    f5f8:	10003e24 	.word	0x10003e24

0000f5fc <dmConnSetConnSpec>:
    f5fc:	b538      	push	{r3, r4, r5, lr}
    f5fe:	4605      	mov	r5, r0
    f600:	460c      	mov	r4, r1
    f602:	f00a f959 	bl	198b8 <WsfTaskLock>
    f606:	4628      	mov	r0, r5
    f608:	f000 fdc4 	bl	10194 <DmInitPhyToIdx>
    f60c:	4a07      	ldr	r2, [pc, #28]	; (f62c <dmConnSetConnSpec+0x30>)
    f60e:	6861      	ldr	r1, [r4, #4]
    f610:	230c      	movs	r3, #12
    f612:	fb03 2300 	mla	r3, r3, r0, r2
    f616:	6820      	ldr	r0, [r4, #0]
    f618:	f503 73ba 	add.w	r3, r3, #372	; 0x174
    f61c:	c303      	stmia	r3!, {r0, r1}
    f61e:	68a0      	ldr	r0, [r4, #8]
    f620:	6018      	str	r0, [r3, #0]
    f622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f626:	f00a b94d 	b.w	198c4 <WsfTaskUnlock>
    f62a:	bf00      	nop
    f62c:	10003c94 	.word	0x10003c94

0000f630 <dmConnCcbAlloc>:
    f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f632:	4c0f      	ldr	r4, [pc, #60]	; (f670 <dmConnCcbAlloc+0x40>)
    f634:	4607      	mov	r7, r0
    f636:	2500      	movs	r5, #0
    f638:	7da6      	ldrb	r6, [r4, #22]
    f63a:	3501      	adds	r5, #1
    f63c:	b2ed      	uxtb	r5, r5
    f63e:	b98e      	cbnz	r6, f664 <dmConnCcbAlloc+0x34>
    f640:	222c      	movs	r2, #44	; 0x2c
    f642:	4631      	mov	r1, r6
    f644:	4620      	mov	r0, r4
    f646:	f7fc fe89 	bl	c35c <memset>
    f64a:	4639      	mov	r1, r7
    f64c:	4620      	mov	r0, r4
    f64e:	f004 ff9b 	bl	14588 <BdaCpy>
    f652:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f656:	81a3      	strh	r3, [r4, #12]
    f658:	2301      	movs	r3, #1
    f65a:	7425      	strb	r5, [r4, #16]
    f65c:	7466      	strb	r6, [r4, #17]
    f65e:	75a3      	strb	r3, [r4, #22]
    f660:	4620      	mov	r0, r4
    f662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f664:	2d08      	cmp	r5, #8
    f666:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    f66a:	d1e5      	bne.n	f638 <dmConnCcbAlloc+0x8>
    f66c:	2400      	movs	r4, #0
    f66e:	e7f7      	b.n	f660 <dmConnCcbAlloc+0x30>
    f670:	10003c94 	.word	0x10003c94

0000f674 <dmConnCcbDealloc>:
    f674:	2300      	movs	r3, #0
    f676:	7583      	strb	r3, [r0, #22]
    f678:	4770      	bx	lr

0000f67a <dmConnCcbByHandle>:
    f67a:	b510      	push	{r4, lr}
    f67c:	4907      	ldr	r1, [pc, #28]	; (f69c <dmConnCcbByHandle+0x22>)
    f67e:	2200      	movs	r2, #0
    f680:	188b      	adds	r3, r1, r2
    f682:	7d9c      	ldrb	r4, [r3, #22]
    f684:	b114      	cbz	r4, f68c <dmConnCcbByHandle+0x12>
    f686:	899c      	ldrh	r4, [r3, #12]
    f688:	4284      	cmp	r4, r0
    f68a:	d004      	beq.n	f696 <dmConnCcbByHandle+0x1c>
    f68c:	322c      	adds	r2, #44	; 0x2c
    f68e:	f5b2 7fb0 	cmp.w	r2, #352	; 0x160
    f692:	d1f5      	bne.n	f680 <dmConnCcbByHandle+0x6>
    f694:	2300      	movs	r3, #0
    f696:	4618      	mov	r0, r3
    f698:	bd10      	pop	{r4, pc}
    f69a:	bf00      	nop
    f69c:	10003c94 	.word	0x10003c94

0000f6a0 <dmConn2HciHandler>:
    f6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f6a2:	4604      	mov	r4, r0
    f6a4:	8800      	ldrh	r0, [r0, #0]
    f6a6:	f7ff ffe8 	bl	f67a <dmConnCcbByHandle>
    f6aa:	b138      	cbz	r0, f6bc <dmConn2HciHandler+0x1c>
    f6ac:	78a3      	ldrb	r3, [r4, #2]
    f6ae:	2b23      	cmp	r3, #35	; 0x23
    f6b0:	d02a      	beq.n	f708 <dmConn2HciHandler+0x68>
    f6b2:	d805      	bhi.n	f6c0 <dmConn2HciHandler+0x20>
    f6b4:	2b07      	cmp	r3, #7
    f6b6:	d00f      	beq.n	f6d8 <dmConn2HciHandler+0x38>
    f6b8:	2b0b      	cmp	r3, #11
    f6ba:	d052      	beq.n	f762 <dmConn2HciHandler+0xc2>
    f6bc:	b004      	add	sp, #16
    f6be:	bd10      	pop	{r4, pc}
    f6c0:	2b27      	cmp	r3, #39	; 0x27
    f6c2:	d037      	beq.n	f734 <dmConn2HciHandler+0x94>
    f6c4:	2b28      	cmp	r3, #40	; 0x28
    f6c6:	d042      	beq.n	f74e <dmConn2HciHandler+0xae>
    f6c8:	2b24      	cmp	r3, #36	; 0x24
    f6ca:	d1f7      	bne.n	f6bc <dmConn2HciHandler+0x1c>
    f6cc:	7c02      	ldrb	r2, [r0, #16]
    f6ce:	8983      	ldrh	r3, [r0, #12]
    f6d0:	f8ad 2000 	strh.w	r2, [sp]
    f6d4:	2240      	movs	r2, #64	; 0x40
    f6d6:	e01c      	b.n	f712 <dmConn2HciHandler+0x72>
    f6d8:	8981      	ldrh	r1, [r0, #12]
    f6da:	7923      	ldrb	r3, [r4, #4]
    f6dc:	7c00      	ldrb	r0, [r0, #16]
    f6de:	f994 2008 	ldrsb.w	r2, [r4, #8]
    f6e2:	f8ad 0000 	strh.w	r0, [sp]
    f6e6:	2438      	movs	r4, #56	; 0x38
    f6e8:	f88d 4002 	strb.w	r4, [sp, #2]
    f6ec:	f88d 3003 	strb.w	r3, [sp, #3]
    f6f0:	f88d 3004 	strb.w	r3, [sp, #4]
    f6f4:	f8ad 1006 	strh.w	r1, [sp, #6]
    f6f8:	f88d 2008 	strb.w	r2, [sp, #8]
    f6fc:	4b26      	ldr	r3, [pc, #152]	; (f798 <dmConn2HciHandler+0xf8>)
    f6fe:	4668      	mov	r0, sp
    f700:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f704:	4798      	blx	r3
    f706:	e7d9      	b.n	f6bc <dmConn2HciHandler+0x1c>
    f708:	7c02      	ldrb	r2, [r0, #16]
    f70a:	8983      	ldrh	r3, [r0, #12]
    f70c:	f8ad 2000 	strh.w	r2, [sp]
    f710:	223f      	movs	r2, #63	; 0x3f
    f712:	f8ad 2002 	strh.w	r2, [sp, #2]
    f716:	f8ad 3004 	strh.w	r3, [sp, #4]
    f71a:	88e3      	ldrh	r3, [r4, #6]
    f71c:	f8ad 3006 	strh.w	r3, [sp, #6]
    f720:	8923      	ldrh	r3, [r4, #8]
    f722:	f8ad 3008 	strh.w	r3, [sp, #8]
    f726:	8963      	ldrh	r3, [r4, #10]
    f728:	f8ad 300a 	strh.w	r3, [sp, #10]
    f72c:	89a3      	ldrh	r3, [r4, #12]
    f72e:	f8ad 300c 	strh.w	r3, [sp, #12]
    f732:	e7e3      	b.n	f6fc <dmConn2HciHandler+0x5c>
    f734:	7c01      	ldrb	r1, [r0, #16]
    f736:	7923      	ldrb	r3, [r4, #4]
    f738:	88e2      	ldrh	r2, [r4, #6]
    f73a:	f8ad 1000 	strh.w	r1, [sp]
    f73e:	2141      	movs	r1, #65	; 0x41
    f740:	f8ad 1002 	strh.w	r1, [sp, #2]
    f744:	f8ad 2006 	strh.w	r2, [sp, #6]
    f748:	f88d 3004 	strb.w	r3, [sp, #4]
    f74c:	e7d6      	b.n	f6fc <dmConn2HciHandler+0x5c>
    f74e:	7c02      	ldrb	r2, [r0, #16]
    f750:	88a3      	ldrh	r3, [r4, #4]
    f752:	f8ad 2000 	strh.w	r2, [sp]
    f756:	2242      	movs	r2, #66	; 0x42
    f758:	f8ad 2002 	strh.w	r2, [sp, #2]
    f75c:	f8ad 3004 	strh.w	r3, [sp, #4]
    f760:	e7cc      	b.n	f6fc <dmConn2HciHandler+0x5c>
    f762:	7a62      	ldrb	r2, [r4, #9]
    f764:	7a23      	ldrb	r3, [r4, #8]
    f766:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f76a:	7aa2      	ldrb	r2, [r4, #10]
    f76c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    f770:	6283      	str	r3, [r0, #40]	; 0x28
    f772:	7c03      	ldrb	r3, [r0, #16]
    f774:	f8ad 3000 	strh.w	r3, [sp]
    f778:	2351      	movs	r3, #81	; 0x51
    f77a:	f8ad 3002 	strh.w	r3, [sp, #2]
    f77e:	7923      	ldrb	r3, [r4, #4]
    f780:	f88d 3004 	strb.w	r3, [sp, #4]
    f784:	88e3      	ldrh	r3, [r4, #6]
    f786:	f854 0f08 	ldr.w	r0, [r4, #8]!
    f78a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f78e:	6861      	ldr	r1, [r4, #4]
    f790:	ab02      	add	r3, sp, #8
    f792:	c303      	stmia	r3!, {r0, r1}
    f794:	e7b2      	b.n	f6fc <dmConn2HciHandler+0x5c>
    f796:	bf00      	nop
    f798:	10003c94 	.word	0x10003c94

0000f79c <dmConnCcbByBdAddr>:
    f79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f79e:	4f0a      	ldr	r7, [pc, #40]	; (f7c8 <dmConnCcbByBdAddr+0x2c>)
    f7a0:	4606      	mov	r6, r0
    f7a2:	2500      	movs	r5, #0
    f7a4:	197c      	adds	r4, r7, r5
    f7a6:	7da3      	ldrb	r3, [r4, #22]
    f7a8:	b933      	cbnz	r3, f7b8 <dmConnCcbByBdAddr+0x1c>
    f7aa:	352c      	adds	r5, #44	; 0x2c
    f7ac:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
    f7b0:	d1f8      	bne.n	f7a4 <dmConnCcbByBdAddr+0x8>
    f7b2:	2400      	movs	r4, #0
    f7b4:	4620      	mov	r0, r4
    f7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7b8:	4631      	mov	r1, r6
    f7ba:	4620      	mov	r0, r4
    f7bc:	f004 fef2 	bl	145a4 <BdaCmp>
    f7c0:	2800      	cmp	r0, #0
    f7c2:	d0f2      	beq.n	f7aa <dmConnCcbByBdAddr+0xe>
    f7c4:	e7f6      	b.n	f7b4 <dmConnCcbByBdAddr+0x18>
    f7c6:	bf00      	nop
    f7c8:	10003c94 	.word	0x10003c94

0000f7cc <dmConnHciHandler>:
    f7cc:	b538      	push	{r3, r4, r5, lr}
    f7ce:	7884      	ldrb	r4, [r0, #2]
    f7d0:	1e63      	subs	r3, r4, #1
    f7d2:	2b01      	cmp	r3, #1
    f7d4:	4605      	mov	r5, r0
    f7d6:	d82d      	bhi.n	f834 <dmConnHciHandler+0x68>
    f7d8:	f100 040a 	add.w	r4, r0, #10
    f7dc:	4620      	mov	r0, r4
    f7de:	f7ff ffdd 	bl	f79c <dmConnCcbByBdAddr>
    f7e2:	b9c8      	cbnz	r0, f818 <dmConnHciHandler+0x4c>
    f7e4:	4817      	ldr	r0, [pc, #92]	; (f844 <dmConnHciHandler+0x78>)
    f7e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f7ea:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    f7ee:	7d83      	ldrb	r3, [r0, #22]
    f7f0:	b13b      	cbz	r3, f802 <dmConnHciHandler+0x36>
    f7f2:	7d43      	ldrb	r3, [r0, #21]
    f7f4:	2b02      	cmp	r3, #2
    f7f6:	d00f      	beq.n	f818 <dmConnHciHandler+0x4c>
    f7f8:	2b04      	cmp	r3, #4
    f7fa:	d102      	bne.n	f802 <dmConnHciHandler+0x36>
    f7fc:	8983      	ldrh	r3, [r0, #12]
    f7fe:	428b      	cmp	r3, r1
    f800:	d00a      	beq.n	f818 <dmConnHciHandler+0x4c>
    f802:	302c      	adds	r0, #44	; 0x2c
    f804:	4290      	cmp	r0, r2
    f806:	d1f2      	bne.n	f7ee <dmConnHciHandler+0x22>
    f808:	7a2b      	ldrb	r3, [r5, #8]
    f80a:	2b01      	cmp	r3, #1
    f80c:	d001      	beq.n	f812 <dmConnHciHandler+0x46>
    f80e:	2000      	movs	r0, #0
    f810:	e002      	b.n	f818 <dmConnHciHandler+0x4c>
    f812:	4620      	mov	r0, r4
    f814:	f7ff ff0c 	bl	f630 <dmConnCcbAlloc>
    f818:	78eb      	ldrb	r3, [r5, #3]
    f81a:	b94b      	cbnz	r3, f830 <dmConnHciHandler+0x64>
    f81c:	2338      	movs	r3, #56	; 0x38
    f81e:	70ab      	strb	r3, [r5, #2]
    f820:	b170      	cbz	r0, f840 <dmConnHciHandler+0x74>
    f822:	7c03      	ldrb	r3, [r0, #16]
    f824:	802b      	strh	r3, [r5, #0]
    f826:	4629      	mov	r1, r5
    f828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f82c:	f000 bb6a 	b.w	ff04 <dmConnSmExecute>
    f830:	2337      	movs	r3, #55	; 0x37
    f832:	e7f4      	b.n	f81e <dmConnHciHandler+0x52>
    f834:	8800      	ldrh	r0, [r0, #0]
    f836:	3436      	adds	r4, #54	; 0x36
    f838:	f7ff ff1f 	bl	f67a <dmConnCcbByHandle>
    f83c:	70ac      	strb	r4, [r5, #2]
    f83e:	e7ef      	b.n	f820 <dmConnHciHandler+0x54>
    f840:	bd38      	pop	{r3, r4, r5, pc}
    f842:	bf00      	nop
    f844:	10003c94 	.word	0x10003c94

0000f848 <dmConnCcbById>:
    f848:	3801      	subs	r0, #1
    f84a:	4a05      	ldr	r2, [pc, #20]	; (f860 <dmConnCcbById+0x18>)
    f84c:	b2c3      	uxtb	r3, r0
    f84e:	212c      	movs	r1, #44	; 0x2c
    f850:	fb01 2003 	mla	r0, r1, r3, r2
    f854:	7d80      	ldrb	r0, [r0, #22]
    f856:	b108      	cbz	r0, f85c <dmConnCcbById+0x14>
    f858:	fb03 2001 	mla	r0, r3, r1, r2
    f85c:	4770      	bx	lr
    f85e:	bf00      	nop
    f860:	10003c94 	.word	0x10003c94

0000f864 <dmConnMsgHandler>:
    f864:	b510      	push	{r4, lr}
    f866:	4604      	mov	r4, r0
    f868:	7800      	ldrb	r0, [r0, #0]
    f86a:	f7ff ffed 	bl	f848 <dmConnCcbById>
    f86e:	b120      	cbz	r0, f87a <dmConnMsgHandler+0x16>
    f870:	4621      	mov	r1, r4
    f872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f876:	f000 bb45 	b.w	ff04 <dmConnSmExecute>
    f87a:	bd10      	pop	{r4, pc}

0000f87c <dmConn2MsgHandler>:
    f87c:	b530      	push	{r4, r5, lr}
    f87e:	4604      	mov	r4, r0
    f880:	b085      	sub	sp, #20
    f882:	7800      	ldrb	r0, [r0, #0]
    f884:	f7ff ffe0 	bl	f848 <dmConnCcbById>
    f888:	b1d0      	cbz	r0, f8c0 <dmConn2MsgHandler+0x44>
    f88a:	78a3      	ldrb	r3, [r4, #2]
    f88c:	3b41      	subs	r3, #65	; 0x41
    f88e:	2b04      	cmp	r3, #4
    f890:	d816      	bhi.n	f8c0 <dmConn2MsgHandler+0x44>
    f892:	e8df f003 	tbb	[pc, r3]
    f896:	0903      	.short	0x0903
    f898:	1e17      	.short	0x1e17
    f89a:	26          	.byte	0x26
    f89b:	00          	.byte	0x00
    f89c:	8980      	ldrh	r0, [r0, #12]
    f89e:	b005      	add	sp, #20
    f8a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f8a4:	f006 bd01 	b.w	162aa <HciReadRssiCmd>
    f8a8:	89e5      	ldrh	r5, [r4, #14]
    f8aa:	8923      	ldrh	r3, [r4, #8]
    f8ac:	88e2      	ldrh	r2, [r4, #6]
    f8ae:	88a1      	ldrh	r1, [r4, #4]
    f8b0:	8980      	ldrh	r0, [r0, #12]
    f8b2:	9502      	str	r5, [sp, #8]
    f8b4:	89a5      	ldrh	r5, [r4, #12]
    f8b6:	9501      	str	r5, [sp, #4]
    f8b8:	8964      	ldrh	r4, [r4, #10]
    f8ba:	9400      	str	r4, [sp, #0]
    f8bc:	f006 f8d0 	bl	15a60 <HciLeRemoteConnParamReqReply>
    f8c0:	b005      	add	sp, #20
    f8c2:	bd30      	pop	{r4, r5, pc}
    f8c4:	7921      	ldrb	r1, [r4, #4]
    f8c6:	8980      	ldrh	r0, [r0, #12]
    f8c8:	b005      	add	sp, #20
    f8ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f8ce:	f006 b94b 	b.w	15b68 <HciLeRemoteConnParamReqNegReply>
    f8d2:	88e2      	ldrh	r2, [r4, #6]
    f8d4:	88a1      	ldrh	r1, [r4, #4]
    f8d6:	8980      	ldrh	r0, [r0, #12]
    f8d8:	b005      	add	sp, #20
    f8da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f8de:	f006 b971 	b.w	15bc4 <HciLeSetDataLen>
    f8e2:	88a1      	ldrh	r1, [r4, #4]
    f8e4:	8980      	ldrh	r0, [r0, #12]
    f8e6:	b005      	add	sp, #20
    f8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f8ec:	f006 bd6e 	b.w	163cc <HciWriteAuthPayloadTimeout>

0000f8f0 <dmConnExecCback>:
    f8f0:	b570      	push	{r4, r5, r6, lr}
    f8f2:	4e06      	ldr	r6, [pc, #24]	; (f90c <dmConnExecCback+0x1c>)
    f8f4:	4605      	mov	r5, r0
    f8f6:	2400      	movs	r4, #0
    f8f8:	1933      	adds	r3, r6, r4
    f8fa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    f8fe:	b10b      	cbz	r3, f904 <dmConnExecCback+0x14>
    f900:	4628      	mov	r0, r5
    f902:	4798      	blx	r3
    f904:	3404      	adds	r4, #4
    f906:	2c14      	cmp	r4, #20
    f908:	d1f6      	bne.n	f8f8 <dmConnExecCback+0x8>
    f90a:	bd70      	pop	{r4, r5, r6, pc}
    f90c:	10003c94 	.word	0x10003c94

0000f910 <dmConnSmActConnOpened>:
    f910:	b570      	push	{r4, r5, r6, lr}
    f912:	460d      	mov	r5, r1
    f914:	4604      	mov	r4, r0
    f916:	310a      	adds	r1, #10
    f918:	f004 fe36 	bl	14588 <BdaCpy>
    f91c:	88eb      	ldrh	r3, [r5, #6]
    f91e:	81a3      	strh	r3, [r4, #12]
    f920:	7a68      	ldrb	r0, [r5, #9]
    f922:	f000 fc07 	bl	10134 <DmHostAddrType>
    f926:	74e0      	strb	r0, [r4, #19]
    f928:	7a2a      	ldrb	r2, [r5, #8]
    f92a:	7662      	strb	r2, [r4, #25]
    f92c:	4b12      	ldr	r3, [pc, #72]	; (f978 <dmConnSmActConnOpened+0x68>)
    f92e:	b9fa      	cbnz	r2, f970 <dmConnSmActConnOpened+0x60>
    f930:	7b5b      	ldrb	r3, [r3, #13]
    f932:	7523      	strb	r3, [r4, #20]
    f934:	7d23      	ldrb	r3, [r4, #20]
    f936:	1da6      	adds	r6, r4, #6
    f938:	b9e3      	cbnz	r3, f974 <dmConnSmActConnOpened+0x64>
    f93a:	f007 fbbb 	bl	170b4 <HciGetBdAddr>
    f93e:	4601      	mov	r1, r0
    f940:	4630      	mov	r0, r6
    f942:	f004 fe21 	bl	14588 <BdaCpy>
    f946:	f105 0117 	add.w	r1, r5, #23
    f94a:	f104 001a 	add.w	r0, r4, #26
    f94e:	f004 fe1b 	bl	14588 <BdaCpy>
    f952:	f104 0020 	add.w	r0, r4, #32
    f956:	f105 011d 	add.w	r1, r5, #29
    f95a:	f004 fe15 	bl	14588 <BdaCpy>
    f95e:	2300      	movs	r3, #0
    f960:	81e3      	strh	r3, [r4, #14]
    f962:	2327      	movs	r3, #39	; 0x27
    f964:	70ab      	strb	r3, [r5, #2]
    f966:	4628      	mov	r0, r5
    f968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f96c:	f7ff bfc0 	b.w	f8f0 <dmConnExecCback>
    f970:	7b9b      	ldrb	r3, [r3, #14]
    f972:	e7de      	b.n	f932 <dmConnSmActConnOpened+0x22>
    f974:	4900      	ldr	r1, [pc, #0]	; (f978 <dmConnSmActConnOpened+0x68>)
    f976:	e7e3      	b.n	f940 <dmConnSmActConnOpened+0x30>
    f978:	10003e24 	.word	0x10003e24

0000f97c <dmConnSmActConnFailed>:
    f97c:	2300      	movs	r3, #0
    f97e:	7583      	strb	r3, [r0, #22]
    f980:	2328      	movs	r3, #40	; 0x28
    f982:	708b      	strb	r3, [r1, #2]
    f984:	4608      	mov	r0, r1
    f986:	f7ff bfb3 	b.w	f8f0 <dmConnExecCback>

0000f98a <dmConnSmActConnClosed>:
    f98a:	2300      	movs	r3, #0
    f98c:	7583      	strb	r3, [r0, #22]
    f98e:	2328      	movs	r3, #40	; 0x28
    f990:	708b      	strb	r3, [r1, #2]
    f992:	4608      	mov	r0, r1
    f994:	f7ff bfac 	b.w	f8f0 <dmConnExecCback>

0000f998 <dmConnOpenAccept>:
    f998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f99c:	4607      	mov	r7, r0
    f99e:	468a      	mov	sl, r1
    f9a0:	4691      	mov	r9, r2
    f9a2:	4698      	mov	r8, r3
    f9a4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f9a8:	f009 ff86 	bl	198b8 <WsfTaskLock>
    f9ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f9ae:	f7ff fef5 	bl	f79c <dmConnCcbByBdAddr>
    f9b2:	4605      	mov	r5, r0
    f9b4:	b918      	cbnz	r0, f9be <dmConnOpenAccept+0x26>
    f9b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f9b8:	f7ff fe3a 	bl	f630 <dmConnCcbAlloc>
    f9bc:	4605      	mov	r5, r0
    f9be:	f009 ff81 	bl	198c4 <WsfTaskUnlock>
    f9c2:	b39d      	cbz	r5, fa2c <dmConnOpenAccept+0x94>
    f9c4:	2014      	movs	r0, #20
    f9c6:	f005 fc3c 	bl	15242 <WsfMsgAlloc>
    f9ca:	4604      	mov	r4, r0
    f9cc:	b338      	cbz	r0, fa1e <dmConnOpenAccept+0x86>
    f9ce:	7c2b      	ldrb	r3, [r5, #16]
    f9d0:	8003      	strh	r3, [r0, #0]
    f9d2:	2e00      	cmp	r6, #0
    f9d4:	bf0c      	ite	eq
    f9d6:	2330      	moveq	r3, #48	; 0x30
    f9d8:	2332      	movne	r3, #50	; 0x32
    f9da:	7083      	strb	r3, [r0, #2]
    f9dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f9e0:	8103      	strh	r3, [r0, #8]
    f9e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f9e6:	7283      	strb	r3, [r0, #10]
    f9e8:	f880 a004 	strb.w	sl, [r0, #4]
    f9ec:	f880 9005 	strb.w	r9, [r0, #5]
    f9f0:	f880 8006 	strb.w	r8, [r0, #6]
    f9f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f9f6:	300b      	adds	r0, #11
    f9f8:	f004 fdc6 	bl	14588 <BdaCpy>
    f9fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    fa00:	7463      	strb	r3, [r4, #17]
    fa02:	4b0b      	ldr	r3, [pc, #44]	; (fa30 <dmConnOpenAccept+0x98>)
    fa04:	74a7      	strb	r7, [r4, #18]
    fa06:	7b18      	ldrb	r0, [r3, #12]
    fa08:	4621      	mov	r1, r4
    fa0a:	f005 fc3e 	bl	1528a <WsfMsgSend>
    fa0e:	f009 ff53 	bl	198b8 <WsfTaskLock>
    fa12:	766e      	strb	r6, [r5, #25]
    fa14:	f009 ff56 	bl	198c4 <WsfTaskUnlock>
    fa18:	7c28      	ldrb	r0, [r5, #16]
    fa1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fa1e:	f009 ff4b 	bl	198b8 <WsfTaskLock>
    fa22:	75ac      	strb	r4, [r5, #22]
    fa24:	f009 ff4e 	bl	198c4 <WsfTaskUnlock>
    fa28:	4620      	mov	r0, r4
    fa2a:	e7f6      	b.n	fa1a <dmConnOpenAccept+0x82>
    fa2c:	4628      	mov	r0, r5
    fa2e:	e7f4      	b.n	fa1a <dmConnOpenAccept+0x82>
    fa30:	10003e24 	.word	0x10003e24

0000fa34 <DmConnInit>:
    fa34:	4b05      	ldr	r3, [pc, #20]	; (fa4c <DmConnInit+0x18>)
    fa36:	4a06      	ldr	r2, [pc, #24]	; (fa50 <DmConnInit+0x1c>)
    fa38:	f103 010c 	add.w	r1, r3, #12
    fa3c:	60d1      	str	r1, [r2, #12]
    fa3e:	f103 0118 	add.w	r1, r3, #24
    fa42:	6111      	str	r1, [r2, #16]
    fa44:	4a03      	ldr	r2, [pc, #12]	; (fa54 <DmConnInit+0x20>)
    fa46:	3324      	adds	r3, #36	; 0x24
    fa48:	6013      	str	r3, [r2, #0]
    fa4a:	4770      	bx	lr
    fa4c:	00021f7c 	.word	0x00021f7c
    fa50:	10002b54 	.word	0x10002b54
    fa54:	10003e18 	.word	0x10003e18

0000fa58 <DmConnRegister>:
    fa58:	b538      	push	{r3, r4, r5, lr}
    fa5a:	4604      	mov	r4, r0
    fa5c:	460d      	mov	r5, r1
    fa5e:	3458      	adds	r4, #88	; 0x58
    fa60:	f009 ff2a 	bl	198b8 <WsfTaskLock>
    fa64:	4b03      	ldr	r3, [pc, #12]	; (fa74 <DmConnRegister+0x1c>)
    fa66:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    fa6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fa6e:	f009 bf29 	b.w	198c4 <WsfTaskUnlock>
    fa72:	bf00      	nop
    fa74:	10003c94 	.word	0x10003c94

0000fa78 <DmConnClose>:
    fa78:	b570      	push	{r4, r5, r6, lr}
    fa7a:	4604      	mov	r4, r0
    fa7c:	2006      	movs	r0, #6
    fa7e:	460e      	mov	r6, r1
    fa80:	4615      	mov	r5, r2
    fa82:	f005 fbde 	bl	15242 <WsfMsgAlloc>
    fa86:	b158      	cbz	r0, faa0 <DmConnClose+0x28>
    fa88:	2331      	movs	r3, #49	; 0x31
    fa8a:	7083      	strb	r3, [r0, #2]
    fa8c:	4b05      	ldr	r3, [pc, #20]	; (faa4 <DmConnClose+0x2c>)
    fa8e:	8006      	strh	r6, [r0, #0]
    fa90:	7105      	strb	r5, [r0, #4]
    fa92:	7144      	strb	r4, [r0, #5]
    fa94:	4601      	mov	r1, r0
    fa96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fa9a:	7b18      	ldrb	r0, [r3, #12]
    fa9c:	f005 bbf5 	b.w	1528a <WsfMsgSend>
    faa0:	bd70      	pop	{r4, r5, r6, pc}
    faa2:	bf00      	nop
    faa4:	10003e24 	.word	0x10003e24

0000faa8 <DmReadRemoteFeatures>:
    faa8:	b508      	push	{r3, lr}
    faaa:	f7ff fecd 	bl	f848 <dmConnCcbById>
    faae:	b120      	cbz	r0, faba <DmReadRemoteFeatures+0x12>
    fab0:	8980      	ldrh	r0, [r0, #12]
    fab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fab6:	f006 b9fc 	b.w	15eb2 <HciLeReadRemoteFeatCmd>
    faba:	bd08      	pop	{r3, pc}

0000fabc <DmConnUpdate>:
    fabc:	b538      	push	{r3, r4, r5, lr}
    fabe:	4605      	mov	r5, r0
    fac0:	2010      	movs	r0, #16
    fac2:	460c      	mov	r4, r1
    fac4:	f005 fbbd 	bl	15242 <WsfMsgAlloc>
    fac8:	b1d0      	cbz	r0, fb00 <DmConnUpdate+0x44>
    faca:	4a0e      	ldr	r2, [pc, #56]	; (fb04 <DmConnUpdate+0x48>)
    facc:	1e6b      	subs	r3, r5, #1
    face:	212c      	movs	r1, #44	; 0x2c
    fad0:	fb01 2303 	mla	r3, r1, r3, r2
    fad4:	4602      	mov	r2, r0
    fad6:	7e5b      	ldrb	r3, [r3, #25]
    fad8:	2b00      	cmp	r3, #0
    fada:	bf0c      	ite	eq
    fadc:	2333      	moveq	r3, #51	; 0x33
    fade:	2334      	movne	r3, #52	; 0x34
    fae0:	7083      	strb	r3, [r0, #2]
    fae2:	f822 5b04 	strh.w	r5, [r2], #4
    fae6:	6823      	ldr	r3, [r4, #0]
    fae8:	6043      	str	r3, [r0, #4]
    faea:	6863      	ldr	r3, [r4, #4]
    faec:	6053      	str	r3, [r2, #4]
    faee:	68a3      	ldr	r3, [r4, #8]
    faf0:	6093      	str	r3, [r2, #8]
    faf2:	4b05      	ldr	r3, [pc, #20]	; (fb08 <DmConnUpdate+0x4c>)
    faf4:	4601      	mov	r1, r0
    faf6:	7b18      	ldrb	r0, [r3, #12]
    faf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fafc:	f005 bbc5 	b.w	1528a <WsfMsgSend>
    fb00:	bd38      	pop	{r3, r4, r5, pc}
    fb02:	bf00      	nop
    fb04:	10003c94 	.word	0x10003c94
    fb08:	10003e24 	.word	0x10003e24

0000fb0c <DmConnSetScanInterval>:
    fb0c:	b538      	push	{r3, r4, r5, lr}
    fb0e:	4605      	mov	r5, r0
    fb10:	460c      	mov	r4, r1
    fb12:	f009 fed1 	bl	198b8 <WsfTaskLock>
    fb16:	2001      	movs	r0, #1
    fb18:	f000 fb3c 	bl	10194 <DmInitPhyToIdx>
    fb1c:	4b05      	ldr	r3, [pc, #20]	; (fb34 <DmConnSetScanInterval+0x28>)
    fb1e:	30c0      	adds	r0, #192	; 0xc0
    fb20:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
    fb24:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    fb28:	805c      	strh	r4, [r3, #2]
    fb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fb2e:	f009 bec9 	b.w	198c4 <WsfTaskUnlock>
    fb32:	bf00      	nop
    fb34:	10003c94 	.word	0x10003c94

0000fb38 <DmExtConnSetScanInterval>:
    fb38:	b570      	push	{r4, r5, r6, lr}
    fb3a:	2400      	movs	r4, #0
    fb3c:	fa40 f304 	asr.w	r3, r0, r4
    fb40:	07db      	lsls	r3, r3, #31
    fb42:	d515      	bpl.n	fb70 <DmExtConnSetScanInterval+0x38>
    fb44:	880e      	ldrh	r6, [r1, #0]
    fb46:	8815      	ldrh	r5, [r2, #0]
    fb48:	f009 feb6 	bl	198b8 <WsfTaskLock>
    fb4c:	2001      	movs	r0, #1
    fb4e:	40a0      	lsls	r0, r4
    fb50:	b2c0      	uxtb	r0, r0
    fb52:	f000 fb1f 	bl	10194 <DmInitPhyToIdx>
    fb56:	4b08      	ldr	r3, [pc, #32]	; (fb78 <DmExtConnSetScanInterval+0x40>)
    fb58:	30c0      	adds	r0, #192	; 0xc0
    fb5a:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    fb5e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    fb62:	805d      	strh	r5, [r3, #2]
    fb64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb68:	f009 beac 	b.w	198c4 <WsfTaskUnlock>
    fb6c:	3401      	adds	r4, #1
    fb6e:	e7e5      	b.n	fb3c <DmExtConnSetScanInterval+0x4>
    fb70:	2c07      	cmp	r4, #7
    fb72:	d1fb      	bne.n	fb6c <DmExtConnSetScanInterval+0x34>
    fb74:	bd70      	pop	{r4, r5, r6, pc}
    fb76:	bf00      	nop
    fb78:	10003c94 	.word	0x10003c94

0000fb7c <DmConnSetConnSpec>:
    fb7c:	4601      	mov	r1, r0
    fb7e:	2001      	movs	r0, #1
    fb80:	e53c      	b.n	f5fc <dmConnSetConnSpec>

0000fb82 <DmExtConnSetConnSpec>:
    fb82:	2300      	movs	r3, #0
    fb84:	fa40 f203 	asr.w	r2, r0, r3
    fb88:	07d2      	lsls	r2, r2, #31
    fb8a:	d505      	bpl.n	fb98 <DmExtConnSetConnSpec+0x16>
    fb8c:	2001      	movs	r0, #1
    fb8e:	4098      	lsls	r0, r3
    fb90:	b2c0      	uxtb	r0, r0
    fb92:	e533      	b.n	f5fc <dmConnSetConnSpec>
    fb94:	3301      	adds	r3, #1
    fb96:	e7f5      	b.n	fb84 <DmExtConnSetConnSpec+0x2>
    fb98:	2b07      	cmp	r3, #7
    fb9a:	d1fb      	bne.n	fb94 <DmExtConnSetConnSpec+0x12>
    fb9c:	4770      	bx	lr

0000fb9e <DmConnReadRssi>:
    fb9e:	b510      	push	{r4, lr}
    fba0:	4604      	mov	r4, r0
    fba2:	2004      	movs	r0, #4
    fba4:	f005 fb4d 	bl	15242 <WsfMsgAlloc>
    fba8:	4601      	mov	r1, r0
    fbaa:	b140      	cbz	r0, fbbe <DmConnReadRssi+0x20>
    fbac:	2341      	movs	r3, #65	; 0x41
    fbae:	7083      	strb	r3, [r0, #2]
    fbb0:	4b03      	ldr	r3, [pc, #12]	; (fbc0 <DmConnReadRssi+0x22>)
    fbb2:	8004      	strh	r4, [r0, #0]
    fbb4:	7b18      	ldrb	r0, [r3, #12]
    fbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbba:	f005 bb66 	b.w	1528a <WsfMsgSend>
    fbbe:	bd10      	pop	{r4, pc}
    fbc0:	10003e24 	.word	0x10003e24

0000fbc4 <DmRemoteConnParamReqReply>:
    fbc4:	b538      	push	{r3, r4, r5, lr}
    fbc6:	4605      	mov	r5, r0
    fbc8:	2010      	movs	r0, #16
    fbca:	460c      	mov	r4, r1
    fbcc:	f005 fb39 	bl	15242 <WsfMsgAlloc>
    fbd0:	b188      	cbz	r0, fbf6 <DmRemoteConnParamReqReply+0x32>
    fbd2:	4602      	mov	r2, r0
    fbd4:	2342      	movs	r3, #66	; 0x42
    fbd6:	7083      	strb	r3, [r0, #2]
    fbd8:	f822 5b04 	strh.w	r5, [r2], #4
    fbdc:	6823      	ldr	r3, [r4, #0]
    fbde:	6043      	str	r3, [r0, #4]
    fbe0:	6863      	ldr	r3, [r4, #4]
    fbe2:	6053      	str	r3, [r2, #4]
    fbe4:	68a3      	ldr	r3, [r4, #8]
    fbe6:	6093      	str	r3, [r2, #8]
    fbe8:	4b03      	ldr	r3, [pc, #12]	; (fbf8 <DmRemoteConnParamReqReply+0x34>)
    fbea:	4601      	mov	r1, r0
    fbec:	7b18      	ldrb	r0, [r3, #12]
    fbee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fbf2:	f005 bb4a 	b.w	1528a <WsfMsgSend>
    fbf6:	bd38      	pop	{r3, r4, r5, pc}
    fbf8:	10003e24 	.word	0x10003e24

0000fbfc <DmRemoteConnParamReqNegReply>:
    fbfc:	b538      	push	{r3, r4, r5, lr}
    fbfe:	4605      	mov	r5, r0
    fc00:	2006      	movs	r0, #6
    fc02:	460c      	mov	r4, r1
    fc04:	f005 fb1d 	bl	15242 <WsfMsgAlloc>
    fc08:	b150      	cbz	r0, fc20 <DmRemoteConnParamReqNegReply+0x24>
    fc0a:	2343      	movs	r3, #67	; 0x43
    fc0c:	7083      	strb	r3, [r0, #2]
    fc0e:	4b05      	ldr	r3, [pc, #20]	; (fc24 <DmRemoteConnParamReqNegReply+0x28>)
    fc10:	8005      	strh	r5, [r0, #0]
    fc12:	7104      	strb	r4, [r0, #4]
    fc14:	4601      	mov	r1, r0
    fc16:	7b18      	ldrb	r0, [r3, #12]
    fc18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fc1c:	f005 bb35 	b.w	1528a <WsfMsgSend>
    fc20:	bd38      	pop	{r3, r4, r5, pc}
    fc22:	bf00      	nop
    fc24:	10003e24 	.word	0x10003e24

0000fc28 <DmConnSetDataLen>:
    fc28:	b570      	push	{r4, r5, r6, lr}
    fc2a:	4606      	mov	r6, r0
    fc2c:	2008      	movs	r0, #8
    fc2e:	460d      	mov	r5, r1
    fc30:	4614      	mov	r4, r2
    fc32:	f005 fb06 	bl	15242 <WsfMsgAlloc>
    fc36:	b158      	cbz	r0, fc50 <DmConnSetDataLen+0x28>
    fc38:	2344      	movs	r3, #68	; 0x44
    fc3a:	7083      	strb	r3, [r0, #2]
    fc3c:	4b05      	ldr	r3, [pc, #20]	; (fc54 <DmConnSetDataLen+0x2c>)
    fc3e:	8006      	strh	r6, [r0, #0]
    fc40:	8085      	strh	r5, [r0, #4]
    fc42:	80c4      	strh	r4, [r0, #6]
    fc44:	4601      	mov	r1, r0
    fc46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fc4a:	7b18      	ldrb	r0, [r3, #12]
    fc4c:	f005 bb1d 	b.w	1528a <WsfMsgSend>
    fc50:	bd70      	pop	{r4, r5, r6, pc}
    fc52:	bf00      	nop
    fc54:	10003e24 	.word	0x10003e24

0000fc58 <DmWriteAuthPayloadTimeout>:
    fc58:	b538      	push	{r3, r4, r5, lr}
    fc5a:	4605      	mov	r5, r0
    fc5c:	2006      	movs	r0, #6
    fc5e:	460c      	mov	r4, r1
    fc60:	f005 faef 	bl	15242 <WsfMsgAlloc>
    fc64:	b150      	cbz	r0, fc7c <DmWriteAuthPayloadTimeout+0x24>
    fc66:	2345      	movs	r3, #69	; 0x45
    fc68:	7083      	strb	r3, [r0, #2]
    fc6a:	4b05      	ldr	r3, [pc, #20]	; (fc80 <DmWriteAuthPayloadTimeout+0x28>)
    fc6c:	8005      	strh	r5, [r0, #0]
    fc6e:	8084      	strh	r4, [r0, #4]
    fc70:	4601      	mov	r1, r0
    fc72:	7b18      	ldrb	r0, [r3, #12]
    fc74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fc78:	f005 bb07 	b.w	1528a <WsfMsgSend>
    fc7c:	bd38      	pop	{r3, r4, r5, pc}
    fc7e:	bf00      	nop
    fc80:	10003e24 	.word	0x10003e24

0000fc84 <DmConnIdByHandle>:
    fc84:	b510      	push	{r4, lr}
    fc86:	4908      	ldr	r1, [pc, #32]	; (fca8 <DmConnIdByHandle+0x24>)
    fc88:	2300      	movs	r3, #0
    fc8a:	18ca      	adds	r2, r1, r3
    fc8c:	7d94      	ldrb	r4, [r2, #22]
    fc8e:	b124      	cbz	r4, fc9a <DmConnIdByHandle+0x16>
    fc90:	8994      	ldrh	r4, [r2, #12]
    fc92:	4284      	cmp	r4, r0
    fc94:	d101      	bne.n	fc9a <DmConnIdByHandle+0x16>
    fc96:	7c10      	ldrb	r0, [r2, #16]
    fc98:	bd10      	pop	{r4, pc}
    fc9a:	332c      	adds	r3, #44	; 0x2c
    fc9c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    fca0:	d1f3      	bne.n	fc8a <DmConnIdByHandle+0x6>
    fca2:	2000      	movs	r0, #0
    fca4:	e7f8      	b.n	fc98 <DmConnIdByHandle+0x14>
    fca6:	bf00      	nop
    fca8:	10003c94 	.word	0x10003c94

0000fcac <DmConnInUse>:
    fcac:	4b03      	ldr	r3, [pc, #12]	; (fcbc <DmConnInUse+0x10>)
    fcae:	222c      	movs	r2, #44	; 0x2c
    fcb0:	3801      	subs	r0, #1
    fcb2:	fb02 3000 	mla	r0, r2, r0, r3
    fcb6:	7d80      	ldrb	r0, [r0, #22]
    fcb8:	4770      	bx	lr
    fcba:	bf00      	nop
    fcbc:	10003c94 	.word	0x10003c94

0000fcc0 <DmConnPeerAddrType>:
    fcc0:	4b03      	ldr	r3, [pc, #12]	; (fcd0 <DmConnPeerAddrType+0x10>)
    fcc2:	222c      	movs	r2, #44	; 0x2c
    fcc4:	3801      	subs	r0, #1
    fcc6:	fb02 3000 	mla	r0, r2, r0, r3
    fcca:	7cc0      	ldrb	r0, [r0, #19]
    fccc:	4770      	bx	lr
    fcce:	bf00      	nop
    fcd0:	10003c94 	.word	0x10003c94

0000fcd4 <DmConnPeerAddr>:
    fcd4:	4b02      	ldr	r3, [pc, #8]	; (fce0 <DmConnPeerAddr+0xc>)
    fcd6:	222c      	movs	r2, #44	; 0x2c
    fcd8:	3801      	subs	r0, #1
    fcda:	fb02 3000 	mla	r0, r2, r0, r3
    fcde:	4770      	bx	lr
    fce0:	10003c94 	.word	0x10003c94

0000fce4 <DmConnLocalAddrType>:
    fce4:	4b03      	ldr	r3, [pc, #12]	; (fcf4 <DmConnLocalAddrType+0x10>)
    fce6:	222c      	movs	r2, #44	; 0x2c
    fce8:	3801      	subs	r0, #1
    fcea:	fb02 3000 	mla	r0, r2, r0, r3
    fcee:	7d00      	ldrb	r0, [r0, #20]
    fcf0:	4770      	bx	lr
    fcf2:	bf00      	nop
    fcf4:	10003c94 	.word	0x10003c94

0000fcf8 <DmConnLocalAddr>:
    fcf8:	4b03      	ldr	r3, [pc, #12]	; (fd08 <DmConnLocalAddr+0x10>)
    fcfa:	222c      	movs	r2, #44	; 0x2c
    fcfc:	3801      	subs	r0, #1
    fcfe:	fb02 3000 	mla	r0, r2, r0, r3
    fd02:	3006      	adds	r0, #6
    fd04:	4770      	bx	lr
    fd06:	bf00      	nop
    fd08:	10003c94 	.word	0x10003c94

0000fd0c <DmConnPeerRpa>:
    fd0c:	4b03      	ldr	r3, [pc, #12]	; (fd1c <DmConnPeerRpa+0x10>)
    fd0e:	222c      	movs	r2, #44	; 0x2c
    fd10:	3801      	subs	r0, #1
    fd12:	fb02 3000 	mla	r0, r2, r0, r3
    fd16:	3020      	adds	r0, #32
    fd18:	4770      	bx	lr
    fd1a:	bf00      	nop
    fd1c:	10003c94 	.word	0x10003c94

0000fd20 <DmConnLocalRpa>:
    fd20:	4b03      	ldr	r3, [pc, #12]	; (fd30 <DmConnLocalRpa+0x10>)
    fd22:	222c      	movs	r2, #44	; 0x2c
    fd24:	3801      	subs	r0, #1
    fd26:	fb02 3000 	mla	r0, r2, r0, r3
    fd2a:	301a      	adds	r0, #26
    fd2c:	4770      	bx	lr
    fd2e:	bf00      	nop
    fd30:	10003c94 	.word	0x10003c94

0000fd34 <DmConnSecLevel>:
    fd34:	4b03      	ldr	r3, [pc, #12]	; (fd44 <DmConnSecLevel+0x10>)
    fd36:	222c      	movs	r2, #44	; 0x2c
    fd38:	3801      	subs	r0, #1
    fd3a:	fb02 3000 	mla	r0, r2, r0, r3
    fd3e:	7dc0      	ldrb	r0, [r0, #23]
    fd40:	4770      	bx	lr
    fd42:	bf00      	nop
    fd44:	10003c94 	.word	0x10003c94

0000fd48 <DmConnSetIdle>:
    fd48:	b570      	push	{r4, r5, r6, lr}
    fd4a:	4604      	mov	r4, r0
    fd4c:	4616      	mov	r6, r2
    fd4e:	460d      	mov	r5, r1
    fd50:	f009 fdb2 	bl	198b8 <WsfTaskLock>
    fd54:	4b08      	ldr	r3, [pc, #32]	; (fd78 <DmConnSetIdle+0x30>)
    fd56:	1e60      	subs	r0, r4, #1
    fd58:	222c      	movs	r2, #44	; 0x2c
    fd5a:	fb02 3000 	mla	r0, r2, r0, r3
    fd5e:	7d83      	ldrb	r3, [r0, #22]
    fd60:	b123      	cbz	r3, fd6c <DmConnSetIdle+0x24>
    fd62:	89c1      	ldrh	r1, [r0, #14]
    fd64:	b936      	cbnz	r6, fd74 <DmConnSetIdle+0x2c>
    fd66:	ea21 0505 	bic.w	r5, r1, r5
    fd6a:	81c5      	strh	r5, [r0, #14]
    fd6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd70:	f009 bda8 	b.w	198c4 <WsfTaskUnlock>
    fd74:	430d      	orrs	r5, r1
    fd76:	e7f8      	b.n	fd6a <DmConnSetIdle+0x22>
    fd78:	10003c94 	.word	0x10003c94

0000fd7c <DmConnCheckIdle>:
    fd7c:	b510      	push	{r4, lr}
    fd7e:	4604      	mov	r4, r0
    fd80:	f009 fd9a 	bl	198b8 <WsfTaskLock>
    fd84:	4804      	ldr	r0, [pc, #16]	; (fd98 <DmConnCheckIdle+0x1c>)
    fd86:	232c      	movs	r3, #44	; 0x2c
    fd88:	3c01      	subs	r4, #1
    fd8a:	fb03 0404 	mla	r4, r3, r4, r0
    fd8e:	89e4      	ldrh	r4, [r4, #14]
    fd90:	f009 fd98 	bl	198c4 <WsfTaskUnlock>
    fd94:	4620      	mov	r0, r4
    fd96:	bd10      	pop	{r4, pc}
    fd98:	10003c94 	.word	0x10003c94

0000fd9c <DmConnRole>:
    fd9c:	4b03      	ldr	r3, [pc, #12]	; (fdac <DmConnRole+0x10>)
    fd9e:	222c      	movs	r2, #44	; 0x2c
    fda0:	3801      	subs	r0, #1
    fda2:	fb02 3000 	mla	r0, r2, r0, r3
    fda6:	7e40      	ldrb	r0, [r0, #25]
    fda8:	4770      	bx	lr
    fdaa:	bf00      	nop
    fdac:	10003c94 	.word	0x10003c94

0000fdb0 <dmConnSmActUpdateSlave>:
    fdb0:	b530      	push	{r4, r5, lr}
    fdb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    fdb4:	079a      	lsls	r2, r3, #30
    fdb6:	b085      	sub	sp, #20
    fdb8:	4604      	mov	r4, r0
    fdba:	460d      	mov	r5, r1
    fdbc:	d509      	bpl.n	fdd2 <dmConnSmActUpdateSlave+0x22>
    fdbe:	f007 f98f 	bl	170e0 <HciGetLeSupFeat>
    fdc2:	0783      	lsls	r3, r0, #30
    fdc4:	d505      	bpl.n	fdd2 <dmConnSmActUpdateSlave+0x22>
    fdc6:	1d29      	adds	r1, r5, #4
    fdc8:	89a0      	ldrh	r0, [r4, #12]
    fdca:	f005 fdaf 	bl	1592c <HciLeConnUpdateCmd>
    fdce:	b005      	add	sp, #20
    fdd0:	bd30      	pop	{r4, r5, pc}
    fdd2:	7c63      	ldrb	r3, [r4, #17]
    fdd4:	89a0      	ldrh	r0, [r4, #12]
    fdd6:	b92b      	cbnz	r3, fde4 <dmConnSmActUpdateSlave+0x34>
    fdd8:	2301      	movs	r3, #1
    fdda:	7463      	strb	r3, [r4, #17]
    fddc:	1d29      	adds	r1, r5, #4
    fdde:	f000 ff87 	bl	10cf0 <L2cDmConnUpdateReq>
    fde2:	e7f4      	b.n	fdce <dmConnSmActUpdateSlave+0x1e>
    fde4:	7c23      	ldrb	r3, [r4, #16]
    fde6:	f8ad 3000 	strh.w	r3, [sp]
    fdea:	f640 4329 	movw	r3, #3113	; 0xc29
    fdee:	f8ad 3002 	strh.w	r3, [sp, #2]
    fdf2:	230c      	movs	r3, #12
    fdf4:	f88d 3004 	strb.w	r3, [sp, #4]
    fdf8:	4b03      	ldr	r3, [pc, #12]	; (fe08 <dmConnSmActUpdateSlave+0x58>)
    fdfa:	f8ad 0006 	strh.w	r0, [sp, #6]
    fdfe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    fe02:	4668      	mov	r0, sp
    fe04:	4798      	blx	r3
    fe06:	e7e2      	b.n	fdce <dmConnSmActUpdateSlave+0x1e>
    fe08:	10003c94 	.word	0x10003c94

0000fe0c <dmConnSmActL2cUpdateCnf>:
    fe0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fe0e:	7c43      	ldrb	r3, [r0, #17]
    fe10:	b1b3      	cbz	r3, fe40 <dmConnSmActL2cUpdateCnf+0x34>
    fe12:	2300      	movs	r3, #0
    fe14:	7443      	strb	r3, [r0, #17]
    fe16:	888b      	ldrh	r3, [r1, #4]
    fe18:	b193      	cbz	r3, fe40 <dmConnSmActL2cUpdateCnf+0x34>
    fe1a:	b2db      	uxtb	r3, r3
    fe1c:	f88d 3003 	strb.w	r3, [sp, #3]
    fe20:	f88d 3004 	strb.w	r3, [sp, #4]
    fe24:	4b08      	ldr	r3, [pc, #32]	; (fe48 <dmConnSmActL2cUpdateCnf+0x3c>)
    fe26:	8982      	ldrh	r2, [r0, #12]
    fe28:	7c01      	ldrb	r1, [r0, #16]
    fe2a:	f8ad 1000 	strh.w	r1, [sp]
    fe2e:	2029      	movs	r0, #41	; 0x29
    fe30:	f88d 0002 	strb.w	r0, [sp, #2]
    fe34:	f8ad 2006 	strh.w	r2, [sp, #6]
    fe38:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    fe3c:	4668      	mov	r0, sp
    fe3e:	4798      	blx	r3
    fe40:	b005      	add	sp, #20
    fe42:	f85d fb04 	ldr.w	pc, [sp], #4
    fe46:	bf00      	nop
    fe48:	10003c94 	.word	0x10003c94

0000fe4c <DmL2cConnUpdateCnf>:
    fe4c:	b513      	push	{r0, r1, r4, lr}
    fe4e:	460c      	mov	r4, r1
    fe50:	f7ff fc13 	bl	f67a <dmConnCcbByHandle>
    fe54:	b138      	cbz	r0, fe66 <DmL2cConnUpdateCnf+0x1a>
    fe56:	2336      	movs	r3, #54	; 0x36
    fe58:	4669      	mov	r1, sp
    fe5a:	f88d 3002 	strb.w	r3, [sp, #2]
    fe5e:	f8ad 4004 	strh.w	r4, [sp, #4]
    fe62:	f000 f84f 	bl	ff04 <dmConnSmExecute>
    fe66:	b002      	add	sp, #8
    fe68:	bd10      	pop	{r4, pc}

0000fe6a <DmConnAccept>:
    fe6a:	b510      	push	{r4, lr}
    fe6c:	b086      	sub	sp, #24
    fe6e:	2401      	movs	r4, #1
    fe70:	9404      	str	r4, [sp, #16]
    fe72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fe74:	9403      	str	r4, [sp, #12]
    fe76:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    fe7a:	9402      	str	r4, [sp, #8]
    fe7c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    fe80:	e9cd 3400 	strd	r3, r4, [sp]
    fe84:	4613      	mov	r3, r2
    fe86:	460a      	mov	r2, r1
    fe88:	2100      	movs	r1, #0
    fe8a:	f7ff fd85 	bl	f998 <dmConnOpenAccept>
    fe8e:	b006      	add	sp, #24
    fe90:	bd10      	pop	{r4, pc}
    fe92:	bf00      	nop

0000fe94 <dmConnSmActAccept>:
    fe94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fe96:	f101 050b 	add.w	r5, r1, #11
    fe9a:	798c      	ldrb	r4, [r1, #6]
    fe9c:	7a8b      	ldrb	r3, [r1, #10]
    fe9e:	890a      	ldrh	r2, [r1, #8]
    fea0:	7948      	ldrb	r0, [r1, #5]
    fea2:	9501      	str	r5, [sp, #4]
    fea4:	7c49      	ldrb	r1, [r1, #17]
    fea6:	9100      	str	r1, [sp, #0]
    fea8:	4621      	mov	r1, r4
    feaa:	f7ff fa12 	bl	f2d2 <dmAdvStartDirected>
    feae:	b003      	add	sp, #12
    feb0:	bd30      	pop	{r4, r5, pc}

0000feb2 <dmConnSmActCancelAccept>:
    feb2:	b538      	push	{r3, r4, r5, lr}
    feb4:	4604      	mov	r4, r0
    feb6:	460d      	mov	r5, r1
    feb8:	f7ff fa20 	bl	f2fc <dmAdvStopDirected>
    febc:	4629      	mov	r1, r5
    febe:	4620      	mov	r0, r4
    fec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fec4:	f7ff bd5a 	b.w	f97c <dmConnSmActConnFailed>

0000fec8 <dmConnSmActConnAccepted>:
    fec8:	b538      	push	{r3, r4, r5, lr}
    feca:	4604      	mov	r4, r0
    fecc:	460d      	mov	r5, r1
    fece:	f7ff fa21 	bl	f314 <dmAdvConnected>
    fed2:	4629      	mov	r1, r5
    fed4:	4620      	mov	r0, r4
    fed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    feda:	f7ff bd19 	b.w	f910 <dmConnSmActConnOpened>

0000fede <dmConnSmActAcceptFailed>:
    fede:	b538      	push	{r3, r4, r5, lr}
    fee0:	4604      	mov	r4, r0
    fee2:	460d      	mov	r5, r1
    fee4:	f7ff fa22 	bl	f32c <dmAdvConnectFailed>
    fee8:	4629      	mov	r1, r5
    feea:	4620      	mov	r0, r4
    feec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fef0:	f7ff bd44 	b.w	f97c <dmConnSmActConnFailed>

0000fef4 <DmConnSlaveInit>:
    fef4:	4b01      	ldr	r3, [pc, #4]	; (fefc <DmConnSlaveInit+0x8>)
    fef6:	4a02      	ldr	r2, [pc, #8]	; (ff00 <DmConnSlaveInit+0xc>)
    fef8:	609a      	str	r2, [r3, #8]
    fefa:	4770      	bx	lr
    fefc:	10003e18 	.word	0x10003e18
    ff00:	00021fb8 	.word	0x00021fb8

0000ff04 <dmConnSmExecute>:
    ff04:	788b      	ldrb	r3, [r1, #2]
    ff06:	7d42      	ldrb	r2, [r0, #21]
    ff08:	b470      	push	{r4, r5, r6}
    ff0a:	f003 030f 	and.w	r3, r3, #15
    ff0e:	4d0c      	ldr	r5, [pc, #48]	; (ff40 <dmConnSmExecute+0x3c>)
    ff10:	260d      	movs	r6, #13
    ff12:	fb06 3202 	mla	r2, r6, r2, r3
    ff16:	eb05 0342 	add.w	r3, r5, r2, lsl #1
    ff1a:	f815 2012 	ldrb.w	r2, [r5, r2, lsl #1]
    ff1e:	785b      	ldrb	r3, [r3, #1]
    ff20:	7542      	strb	r2, [r0, #21]
    ff22:	091c      	lsrs	r4, r3, #4
    ff24:	4a07      	ldr	r2, [pc, #28]	; (ff44 <dmConnSmExecute+0x40>)
    ff26:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    ff2a:	b12a      	cbz	r2, ff38 <dmConnSmExecute+0x34>
    ff2c:	f003 030f 	and.w	r3, r3, #15
    ff30:	bc70      	pop	{r4, r5, r6}
    ff32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff36:	4718      	bx	r3
    ff38:	bc70      	pop	{r4, r5, r6}
    ff3a:	f7ff bb1d 	b.w	f578 <dmConnSmActNone>
    ff3e:	bf00      	nop
    ff40:	00021fd0 	.word	0x00021fd0
    ff44:	10003e18 	.word	0x10003e18

0000ff48 <dmDevHciHandler>:
    ff48:	7882      	ldrb	r2, [r0, #2]
    ff4a:	4603      	mov	r3, r0
    ff4c:	b92a      	cbnz	r2, ff5a <dmDevHciHandler+0x12>
    ff4e:	490b      	ldr	r1, [pc, #44]	; (ff7c <dmDevHciHandler+0x34>)
    ff50:	740a      	strb	r2, [r1, #16]
    ff52:	688b      	ldr	r3, [r1, #8]
    ff54:	2220      	movs	r2, #32
    ff56:	7082      	strb	r2, [r0, #2]
    ff58:	4718      	bx	r3
    ff5a:	2a13      	cmp	r2, #19
    ff5c:	d104      	bne.n	ff68 <dmDevHciHandler+0x20>
    ff5e:	2253      	movs	r2, #83	; 0x53
    ff60:	709a      	strb	r2, [r3, #2]
    ff62:	4b06      	ldr	r3, [pc, #24]	; (ff7c <dmDevHciHandler+0x34>)
    ff64:	689b      	ldr	r3, [r3, #8]
    ff66:	e7f7      	b.n	ff58 <dmDevHciHandler+0x10>
    ff68:	2a14      	cmp	r2, #20
    ff6a:	d101      	bne.n	ff70 <dmDevHciHandler+0x28>
    ff6c:	2255      	movs	r2, #85	; 0x55
    ff6e:	e7f7      	b.n	ff60 <dmDevHciHandler+0x18>
    ff70:	2a12      	cmp	r2, #18
    ff72:	d101      	bne.n	ff78 <dmDevHciHandler+0x30>
    ff74:	2254      	movs	r2, #84	; 0x54
    ff76:	e7f3      	b.n	ff60 <dmDevHciHandler+0x18>
    ff78:	4770      	bx	lr
    ff7a:	bf00      	nop
    ff7c:	10003e24 	.word	0x10003e24

0000ff80 <dmDevActReset>:
    ff80:	b538      	push	{r3, r4, r5, lr}
    ff82:	4b08      	ldr	r3, [pc, #32]	; (ffa4 <dmDevActReset+0x24>)
    ff84:	4d08      	ldr	r5, [pc, #32]	; (ffa8 <dmDevActReset+0x28>)
    ff86:	2201      	movs	r2, #1
    ff88:	741a      	strb	r2, [r3, #16]
    ff8a:	2400      	movs	r4, #0
    ff8c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    ff90:	3401      	adds	r4, #1
    ff92:	681b      	ldr	r3, [r3, #0]
    ff94:	4798      	blx	r3
    ff96:	2c0c      	cmp	r4, #12
    ff98:	d1f8      	bne.n	ff8c <dmDevActReset+0xc>
    ff9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ff9e:	f006 beef 	b.w	16d80 <HciResetSequence>
    ffa2:	bf00      	nop
    ffa4:	10003e24 	.word	0x10003e24
    ffa8:	10002b54 	.word	0x10002b54

0000ffac <dmDevMsgHandler>:
    ffac:	f7ff bfe8 	b.w	ff80 <dmDevActReset>

0000ffb0 <DmDevReset>:
    ffb0:	b508      	push	{r3, lr}
    ffb2:	2004      	movs	r0, #4
    ffb4:	f005 f945 	bl	15242 <WsfMsgAlloc>
    ffb8:	4601      	mov	r1, r0
    ffba:	b138      	cbz	r0, ffcc <DmDevReset+0x1c>
    ffbc:	2370      	movs	r3, #112	; 0x70
    ffbe:	7083      	strb	r3, [r0, #2]
    ffc0:	4b03      	ldr	r3, [pc, #12]	; (ffd0 <DmDevReset+0x20>)
    ffc2:	7b18      	ldrb	r0, [r3, #12]
    ffc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ffc8:	f005 b95f 	b.w	1528a <WsfMsgSend>
    ffcc:	bd08      	pop	{r3, pc}
    ffce:	bf00      	nop
    ffd0:	10003e24 	.word	0x10003e24

0000ffd4 <DmDevSetRandAddr>:
    ffd4:	b510      	push	{r4, lr}
    ffd6:	4601      	mov	r1, r0
    ffd8:	4604      	mov	r4, r0
    ffda:	4804      	ldr	r0, [pc, #16]	; (ffec <DmDevSetRandAddr+0x18>)
    ffdc:	f004 fad4 	bl	14588 <BdaCpy>
    ffe0:	4620      	mov	r0, r4
    ffe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffe6:	f006 b8a7 	b.w	16138 <HciLeSetRandAddrCmd>
    ffea:	bf00      	nop
    ffec:	10003e24 	.word	0x10003e24

0000fff0 <DmDevWhiteListAdd>:
    fff0:	f005 bc64 	b.w	158bc <HciLeAddDevWhiteListCmd>

0000fff4 <DmDevWhiteListRemove>:
    fff4:	f005 bfa9 	b.w	15f4a <HciLeRemoveDevWhiteListCmd>

0000fff8 <DmDevWhiteListClear>:
    fff8:	f005 bc85 	b.w	15906 <HciLeClearWhiteListCmd>

0000fffc <dmDevSetFilterPolicy>:
    fffc:	2901      	cmp	r1, #1
    fffe:	d00b      	beq.n	10018 <dmDevSetFilterPolicy+0x1c>
   10000:	d303      	bcc.n	1000a <dmDevSetFilterPolicy+0xe>
   10002:	2902      	cmp	r1, #2
   10004:	d00d      	beq.n	10022 <dmDevSetFilterPolicy+0x26>
   10006:	2000      	movs	r0, #0
   10008:	4770      	bx	lr
   1000a:	2a03      	cmp	r2, #3
   1000c:	d8fb      	bhi.n	10006 <dmDevSetFilterPolicy+0xa>
   1000e:	4b07      	ldr	r3, [pc, #28]	; (1002c <dmDevSetFilterPolicy+0x30>)
   10010:	4418      	add	r0, r3
   10012:	7442      	strb	r2, [r0, #17]
   10014:	2001      	movs	r0, #1
   10016:	4770      	bx	lr
   10018:	2a03      	cmp	r2, #3
   1001a:	d8f4      	bhi.n	10006 <dmDevSetFilterPolicy+0xa>
   1001c:	4b03      	ldr	r3, [pc, #12]	; (1002c <dmDevSetFilterPolicy+0x30>)
   1001e:	749a      	strb	r2, [r3, #18]
   10020:	e7f8      	b.n	10014 <dmDevSetFilterPolicy+0x18>
   10022:	2a01      	cmp	r2, #1
   10024:	d8ef      	bhi.n	10006 <dmDevSetFilterPolicy+0xa>
   10026:	4b01      	ldr	r3, [pc, #4]	; (1002c <dmDevSetFilterPolicy+0x30>)
   10028:	74da      	strb	r2, [r3, #19]
   1002a:	e7f3      	b.n	10014 <dmDevSetFilterPolicy+0x18>
   1002c:	10003e24 	.word	0x10003e24

00010030 <DmDevSetFilterPolicy>:
   10030:	460a      	mov	r2, r1
   10032:	4601      	mov	r1, r0
   10034:	2000      	movs	r0, #0
   10036:	f7ff bfe1 	b.w	fffc <dmDevSetFilterPolicy>

0001003a <DmDevSetExtFilterPolicy>:
   1003a:	f7ff bfdf 	b.w	fffc <dmDevSetFilterPolicy>

0001003e <DmDevVsInit>:
   1003e:	f009 b984 	b.w	1934a <HciVsInit>
   10042:	bf00      	nop

00010044 <dmHciEvtCback>:
   10044:	4a06      	ldr	r2, [pc, #24]	; (10060 <dmHciEvtCback+0x1c>)
   10046:	7883      	ldrb	r3, [r0, #2]
   10048:	7c12      	ldrb	r2, [r2, #16]
   1004a:	b102      	cbz	r2, 1004e <dmHciEvtCback+0xa>
   1004c:	b933      	cbnz	r3, 1005c <dmHciEvtCback+0x18>
   1004e:	4a05      	ldr	r2, [pc, #20]	; (10064 <dmHciEvtCback+0x20>)
   10050:	5cd2      	ldrb	r2, [r2, r3]
   10052:	4b05      	ldr	r3, [pc, #20]	; (10068 <dmHciEvtCback+0x24>)
   10054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10058:	685b      	ldr	r3, [r3, #4]
   1005a:	4718      	bx	r3
   1005c:	4770      	bx	lr
   1005e:	bf00      	nop
   10060:	10003e24 	.word	0x10003e24
   10064:	00022060 	.word	0x00022060
   10068:	10002b54 	.word	0x10002b54

0001006c <dmEmptyReset>:
   1006c:	4770      	bx	lr

0001006e <dmEmptyHandler>:
   1006e:	4770      	bx	lr

00010070 <DmRegister>:
   10070:	b510      	push	{r4, lr}
   10072:	4b0a      	ldr	r3, [pc, #40]	; (1009c <DmRegister+0x2c>)
   10074:	4c0a      	ldr	r4, [pc, #40]	; (100a0 <DmRegister+0x30>)
   10076:	6a1a      	ldr	r2, [r3, #32]
   10078:	4b0a      	ldr	r3, [pc, #40]	; (100a4 <DmRegister+0x34>)
   1007a:	60a0      	str	r0, [r4, #8]
   1007c:	429a      	cmp	r2, r3
   1007e:	b09a      	sub	sp, #104	; 0x68
   10080:	d00a      	beq.n	10098 <DmRegister+0x28>
   10082:	f007 f83d 	bl	17100 <HciGetMaxRxAclLen>
   10086:	2844      	cmp	r0, #68	; 0x44
   10088:	d806      	bhi.n	10098 <DmRegister+0x28>
   1008a:	a81a      	add	r0, sp, #104	; 0x68
   1008c:	f04f 73a9 	mov.w	r3, #22151168	; 0x1520000
   10090:	f840 3d64 	str.w	r3, [r0, #-100]!
   10094:	68a3      	ldr	r3, [r4, #8]
   10096:	4798      	blx	r3
   10098:	b01a      	add	sp, #104	; 0x68
   1009a:	bd10      	pop	{r4, pc}
   1009c:	10002b54 	.word	0x10002b54
   100a0:	10003e24 	.word	0x10003e24
   100a4:	0002209c 	.word	0x0002209c

000100a8 <DmFindAdType>:
   100a8:	b530      	push	{r4, r5, lr}
   100aa:	b121      	cbz	r1, 100b6 <DmFindAdType+0xe>
   100ac:	7813      	ldrb	r3, [r2, #0]
   100ae:	b173      	cbz	r3, 100ce <DmFindAdType+0x26>
   100b0:	b29c      	uxth	r4, r3
   100b2:	428c      	cmp	r4, r1
   100b4:	d302      	bcc.n	100bc <DmFindAdType+0x14>
   100b6:	2200      	movs	r2, #0
   100b8:	4610      	mov	r0, r2
   100ba:	bd30      	pop	{r4, r5, pc}
   100bc:	7855      	ldrb	r5, [r2, #1]
   100be:	4285      	cmp	r5, r0
   100c0:	d0fa      	beq.n	100b8 <DmFindAdType+0x10>
   100c2:	43e4      	mvns	r4, r4
   100c4:	4421      	add	r1, r4
   100c6:	3301      	adds	r3, #1
   100c8:	b289      	uxth	r1, r1
   100ca:	441a      	add	r2, r3
   100cc:	e7ed      	b.n	100aa <DmFindAdType+0x2>
   100ce:	461a      	mov	r2, r3
   100d0:	e7f2      	b.n	100b8 <DmFindAdType+0x10>

000100d2 <DmHandlerInit>:
   100d2:	4b04      	ldr	r3, [pc, #16]	; (100e4 <DmHandlerInit+0x12>)
   100d4:	2200      	movs	r2, #0
   100d6:	7318      	strb	r0, [r3, #12]
   100d8:	4803      	ldr	r0, [pc, #12]	; (100e8 <DmHandlerInit+0x16>)
   100da:	751a      	strb	r2, [r3, #20]
   100dc:	741a      	strb	r2, [r3, #16]
   100de:	f003 bde1 	b.w	13ca4 <HciEvtRegister>
   100e2:	bf00      	nop
   100e4:	10003e24 	.word	0x10003e24
   100e8:	00010045 	.word	0x00010045

000100ec <DmHandler>:
   100ec:	b151      	cbz	r1, 10104 <DmHandler+0x18>
   100ee:	4b06      	ldr	r3, [pc, #24]	; (10108 <DmHandler+0x1c>)
   100f0:	7c1b      	ldrb	r3, [r3, #16]
   100f2:	b93b      	cbnz	r3, 10104 <DmHandler+0x18>
   100f4:	788b      	ldrb	r3, [r1, #2]
   100f6:	4a05      	ldr	r2, [pc, #20]	; (1010c <DmHandler+0x20>)
   100f8:	091b      	lsrs	r3, r3, #4
   100fa:	4608      	mov	r0, r1
   100fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10100:	689b      	ldr	r3, [r3, #8]
   10102:	4718      	bx	r3
   10104:	4770      	bx	lr
   10106:	bf00      	nop
   10108:	10003e24 	.word	0x10003e24
   1010c:	10002b54 	.word	0x10002b54

00010110 <DmLlPrivEnabled>:
   10110:	4b01      	ldr	r3, [pc, #4]	; (10118 <DmLlPrivEnabled+0x8>)
   10112:	7d18      	ldrb	r0, [r3, #20]
   10114:	4770      	bx	lr
   10116:	bf00      	nop
   10118:	10003e24 	.word	0x10003e24

0001011c <DmLlAddrType>:
   1011c:	4b04      	ldr	r3, [pc, #16]	; (10130 <DmLlAddrType+0x14>)
   1011e:	7d1b      	ldrb	r3, [r3, #20]
   10120:	b12b      	cbz	r3, 1012e <DmLlAddrType+0x12>
   10122:	b118      	cbz	r0, 1012c <DmLlAddrType+0x10>
   10124:	2801      	cmp	r0, #1
   10126:	bf08      	it	eq
   10128:	2003      	moveq	r0, #3
   1012a:	4770      	bx	lr
   1012c:	2002      	movs	r0, #2
   1012e:	4770      	bx	lr
   10130:	10003e24 	.word	0x10003e24

00010134 <DmHostAddrType>:
   10134:	4b05      	ldr	r3, [pc, #20]	; (1014c <DmHostAddrType+0x18>)
   10136:	7d1b      	ldrb	r3, [r3, #20]
   10138:	b133      	cbz	r3, 10148 <DmHostAddrType+0x14>
   1013a:	2802      	cmp	r0, #2
   1013c:	d003      	beq.n	10146 <DmHostAddrType+0x12>
   1013e:	2803      	cmp	r0, #3
   10140:	bf08      	it	eq
   10142:	2001      	moveq	r0, #1
   10144:	4770      	bx	lr
   10146:	2000      	movs	r0, #0
   10148:	4770      	bx	lr
   1014a:	bf00      	nop
   1014c:	10003e24 	.word	0x10003e24

00010150 <DmSizeOfEvt>:
   10150:	7883      	ldrb	r3, [r0, #2]
   10152:	3b20      	subs	r3, #32
   10154:	b2da      	uxtb	r2, r3
   10156:	2a35      	cmp	r2, #53	; 0x35
   10158:	bf9d      	ittte	ls
   1015a:	4a03      	ldrls	r2, [pc, #12]	; (10168 <DmSizeOfEvt+0x18>)
   1015c:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
   10160:	f8b3 0048 	ldrhls.w	r0, [r3, #72]	; 0x48
   10164:	2004      	movhi	r0, #4
   10166:	4770      	bx	lr
   10168:	00022060 	.word	0x00022060

0001016c <DmScanPhyToIdx>:
   1016c:	2000      	movs	r0, #0
   1016e:	4770      	bx	lr

00010170 <dmInitPhyToIdx>:
   10170:	2801      	cmp	r0, #1
   10172:	d00d      	beq.n	10190 <dmInitPhyToIdx+0x20>
   10174:	2802      	cmp	r0, #2
   10176:	d104      	bne.n	10182 <dmInitPhyToIdx+0x12>
   10178:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
   1017c:	bf18      	it	ne
   1017e:	2001      	movne	r0, #1
   10180:	4770      	bx	lr
   10182:	2901      	cmp	r1, #1
   10184:	d004      	beq.n	10190 <dmInitPhyToIdx+0x20>
   10186:	2902      	cmp	r1, #2
   10188:	bf0c      	ite	eq
   1018a:	2001      	moveq	r0, #1
   1018c:	2002      	movne	r0, #2
   1018e:	4770      	bx	lr
   10190:	2000      	movs	r0, #0
   10192:	4770      	bx	lr

00010194 <DmInitPhyToIdx>:
   10194:	2000      	movs	r0, #0
   10196:	4770      	bx	lr

00010198 <dmPrivMsgHandler>:
   10198:	7883      	ldrb	r3, [r0, #2]
   1019a:	4a03      	ldr	r2, [pc, #12]	; (101a8 <dmPrivMsgHandler+0x10>)
   1019c:	f003 030f 	and.w	r3, r3, #15
   101a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a4:	4718      	bx	r3
   101a6:	bf00      	nop
   101a8:	00022114 	.word	0x00022114

000101ac <dmPrivReset>:
   101ac:	4a02      	ldr	r2, [pc, #8]	; (101b8 <dmPrivReset+0xc>)
   101ae:	2300      	movs	r3, #0
   101b0:	70d3      	strb	r3, [r2, #3]
   101b2:	4a02      	ldr	r2, [pc, #8]	; (101bc <dmPrivReset+0x10>)
   101b4:	7513      	strb	r3, [r2, #20]
   101b6:	4770      	bx	lr
   101b8:	10003e3c 	.word	0x10003e3c
   101bc:	10003e24 	.word	0x10003e24

000101c0 <dmPrivActAesCmpl>:
   101c0:	b510      	push	{r4, lr}
   101c2:	6841      	ldr	r1, [r0, #4]
   101c4:	4604      	mov	r4, r0
   101c6:	2203      	movs	r2, #3
   101c8:	4809      	ldr	r0, [pc, #36]	; (101f0 <dmPrivActAesCmpl+0x30>)
   101ca:	f7fb ff99 	bl	c100 <memcmp>
   101ce:	b958      	cbnz	r0, 101e8 <dmPrivActAesCmpl+0x28>
   101d0:	70e0      	strb	r0, [r4, #3]
   101d2:	4b07      	ldr	r3, [pc, #28]	; (101f0 <dmPrivActAesCmpl+0x30>)
   101d4:	2200      	movs	r2, #0
   101d6:	70da      	strb	r2, [r3, #3]
   101d8:	2337      	movs	r3, #55	; 0x37
   101da:	70a3      	strb	r3, [r4, #2]
   101dc:	4b05      	ldr	r3, [pc, #20]	; (101f4 <dmPrivActAesCmpl+0x34>)
   101de:	4620      	mov	r0, r4
   101e0:	689b      	ldr	r3, [r3, #8]
   101e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101e6:	4718      	bx	r3
   101e8:	2305      	movs	r3, #5
   101ea:	70e3      	strb	r3, [r4, #3]
   101ec:	e7f1      	b.n	101d2 <dmPrivActAesCmpl+0x12>
   101ee:	bf00      	nop
   101f0:	10003e3c 	.word	0x10003e3c
   101f4:	10003e24 	.word	0x10003e24

000101f8 <dmPrivActAddDevToResList>:
   101f8:	b510      	push	{r4, lr}
   101fa:	f100 031b 	add.w	r3, r0, #27
   101fe:	4604      	mov	r4, r0
   10200:	f100 020b 	add.w	r2, r0, #11
   10204:	1d41      	adds	r1, r0, #5
   10206:	7900      	ldrb	r0, [r0, #4]
   10208:	f006 f917 	bl	1643a <HciLeAddDeviceToResolvingListCmd>
   1020c:	4b03      	ldr	r3, [pc, #12]	; (1021c <dmPrivActAddDevToResList+0x24>)
   1020e:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   10212:	721a      	strb	r2, [r3, #8]
   10214:	8822      	ldrh	r2, [r4, #0]
   10216:	809a      	strh	r2, [r3, #4]
   10218:	bd10      	pop	{r4, pc}
   1021a:	bf00      	nop
   1021c:	10003e3c 	.word	0x10003e3c

00010220 <dmPrivActRemDevFromResList>:
   10220:	b510      	push	{r4, lr}
   10222:	1d41      	adds	r1, r0, #5
   10224:	4604      	mov	r4, r0
   10226:	7900      	ldrb	r0, [r0, #4]
   10228:	f006 f93b 	bl	164a2 <HciLeRemoveDeviceFromResolvingList>
   1022c:	4b01      	ldr	r3, [pc, #4]	; (10234 <dmPrivActRemDevFromResList+0x14>)
   1022e:	8822      	ldrh	r2, [r4, #0]
   10230:	80da      	strh	r2, [r3, #6]
   10232:	bd10      	pop	{r4, pc}
   10234:	10003e3c 	.word	0x10003e3c

00010238 <dmPrivActClearResList>:
   10238:	f006 b958 	b.w	164ec <HciLeClearResolvingList>

0001023c <dmPrivActSetPrivacyMode>:
   1023c:	7ac2      	ldrb	r2, [r0, #11]
   1023e:	1d41      	adds	r1, r0, #5
   10240:	7900      	ldrb	r0, [r0, #4]
   10242:	f006 ba06 	b.w	16652 <HciLeSetPrivacyModeCmd>

00010246 <dmPrivActResolveAddr>:
   10246:	b570      	push	{r4, r5, r6, lr}
   10248:	4d15      	ldr	r5, [pc, #84]	; (102a0 <dmPrivActResolveAddr+0x5a>)
   1024a:	4e16      	ldr	r6, [pc, #88]	; (102a4 <dmPrivActResolveAddr+0x5e>)
   1024c:	78e9      	ldrb	r1, [r5, #3]
   1024e:	b086      	sub	sp, #24
   10250:	4604      	mov	r4, r0
   10252:	b9f9      	cbnz	r1, 10294 <dmPrivActResolveAddr+0x4e>
   10254:	4603      	mov	r3, r0
   10256:	f833 2f14 	ldrh.w	r2, [r3, #20]!
   1025a:	802a      	strh	r2, [r5, #0]
   1025c:	789b      	ldrb	r3, [r3, #2]
   1025e:	70ab      	strb	r3, [r5, #2]
   10260:	4603      	mov	r3, r0
   10262:	f10d 000b 	add.w	r0, sp, #11
   10266:	f833 2f17 	ldrh.w	r2, [r3, #23]!
   1026a:	f8ad 2008 	strh.w	r2, [sp, #8]
   1026e:	789b      	ldrb	r3, [r3, #2]
   10270:	f88d 300a 	strb.w	r3, [sp, #10]
   10274:	220d      	movs	r2, #13
   10276:	f7fc f871 	bl	c35c <memset>
   1027a:	2301      	movs	r3, #1
   1027c:	4620      	mov	r0, r4
   1027e:	2161      	movs	r1, #97	; 0x61
   10280:	70eb      	strb	r3, [r5, #3]
   10282:	f830 3b04 	ldrh.w	r3, [r0], #4
   10286:	7b32      	ldrb	r2, [r6, #12]
   10288:	9100      	str	r1, [sp, #0]
   1028a:	a902      	add	r1, sp, #8
   1028c:	f003 fd86 	bl	13d9c <SecAes>
   10290:	b006      	add	sp, #24
   10292:	bd70      	pop	{r4, r5, r6, pc}
   10294:	f240 7337 	movw	r3, #1847	; 0x737
   10298:	8043      	strh	r3, [r0, #2]
   1029a:	68b3      	ldr	r3, [r6, #8]
   1029c:	4798      	blx	r3
   1029e:	e7f7      	b.n	10290 <dmPrivActResolveAddr+0x4a>
   102a0:	10003e3c 	.word	0x10003e3c
   102a4:	10003e24 	.word	0x10003e24

000102a8 <dmPrivActSetAddrResEnable>:
   102a8:	b510      	push	{r4, lr}
   102aa:	7904      	ldrb	r4, [r0, #4]
   102ac:	4620      	mov	r0, r4
   102ae:	f006 f98d 	bl	165cc <HciLeSetAddrResolutionEnable>
   102b2:	4b01      	ldr	r3, [pc, #4]	; (102b8 <dmPrivActSetAddrResEnable+0x10>)
   102b4:	725c      	strb	r4, [r3, #9]
   102b6:	bd10      	pop	{r4, pc}
   102b8:	10003e3c 	.word	0x10003e3c

000102bc <dmPrivHciHandler>:
   102bc:	7883      	ldrb	r3, [r0, #2]
   102be:	3b15      	subs	r3, #21
   102c0:	b570      	push	{r4, r5, r6, lr}
   102c2:	4604      	mov	r4, r0
   102c4:	2b05      	cmp	r3, #5
   102c6:	d83f      	bhi.n	10348 <dmPrivHciHandler+0x8c>
   102c8:	e8df f003 	tbb	[pc, r3]
   102cc:	2f201a03 	.word	0x2f201a03
   102d0:	3432      	.short	0x3432
   102d2:	4d1e      	ldr	r5, [pc, #120]	; (1034c <dmPrivHciHandler+0x90>)
   102d4:	2339      	movs	r3, #57	; 0x39
   102d6:	7083      	strb	r3, [r0, #2]
   102d8:	88ab      	ldrh	r3, [r5, #4]
   102da:	8003      	strh	r3, [r0, #0]
   102dc:	78c3      	ldrb	r3, [r0, #3]
   102de:	b94b      	cbnz	r3, 102f4 <dmPrivHciHandler+0x38>
   102e0:	7a2b      	ldrb	r3, [r5, #8]
   102e2:	b13b      	cbz	r3, 102f4 <dmPrivHciHandler+0x38>
   102e4:	4b1a      	ldr	r3, [pc, #104]	; (10350 <dmPrivHciHandler+0x94>)
   102e6:	7d1b      	ldrb	r3, [r3, #20]
   102e8:	b923      	cbnz	r3, 102f4 <dmPrivHciHandler+0x38>
   102ea:	2001      	movs	r0, #1
   102ec:	f006 f96e 	bl	165cc <HciLeSetAddrResolutionEnable>
   102f0:	2301      	movs	r3, #1
   102f2:	726b      	strb	r3, [r5, #9]
   102f4:	4b16      	ldr	r3, [pc, #88]	; (10350 <dmPrivHciHandler+0x94>)
   102f6:	4620      	mov	r0, r4
   102f8:	689b      	ldr	r3, [r3, #8]
   102fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   102fe:	4718      	bx	r3
   10300:	233a      	movs	r3, #58	; 0x3a
   10302:	7083      	strb	r3, [r0, #2]
   10304:	4b11      	ldr	r3, [pc, #68]	; (1034c <dmPrivHciHandler+0x90>)
   10306:	88db      	ldrh	r3, [r3, #6]
   10308:	8003      	strh	r3, [r0, #0]
   1030a:	e7f3      	b.n	102f4 <dmPrivHciHandler+0x38>
   1030c:	78c5      	ldrb	r5, [r0, #3]
   1030e:	233b      	movs	r3, #59	; 0x3b
   10310:	7083      	strb	r3, [r0, #2]
   10312:	2d00      	cmp	r5, #0
   10314:	d1ee      	bne.n	102f4 <dmPrivHciHandler+0x38>
   10316:	4b0e      	ldr	r3, [pc, #56]	; (10350 <dmPrivHciHandler+0x94>)
   10318:	7d1b      	ldrb	r3, [r3, #20]
   1031a:	2b00      	cmp	r3, #0
   1031c:	d0ea      	beq.n	102f4 <dmPrivHciHandler+0x38>
   1031e:	4628      	mov	r0, r5
   10320:	f006 f954 	bl	165cc <HciLeSetAddrResolutionEnable>
   10324:	4b09      	ldr	r3, [pc, #36]	; (1034c <dmPrivHciHandler+0x90>)
   10326:	725d      	strb	r5, [r3, #9]
   10328:	e7e4      	b.n	102f4 <dmPrivHciHandler+0x38>
   1032a:	233c      	movs	r3, #60	; 0x3c
   1032c:	70a3      	strb	r3, [r4, #2]
   1032e:	e7e1      	b.n	102f4 <dmPrivHciHandler+0x38>
   10330:	233d      	movs	r3, #61	; 0x3d
   10332:	e7fb      	b.n	1032c <dmPrivHciHandler+0x70>
   10334:	233e      	movs	r3, #62	; 0x3e
   10336:	7083      	strb	r3, [r0, #2]
   10338:	78c3      	ldrb	r3, [r0, #3]
   1033a:	2b00      	cmp	r3, #0
   1033c:	d1da      	bne.n	102f4 <dmPrivHciHandler+0x38>
   1033e:	4b03      	ldr	r3, [pc, #12]	; (1034c <dmPrivHciHandler+0x90>)
   10340:	7a5a      	ldrb	r2, [r3, #9]
   10342:	4b03      	ldr	r3, [pc, #12]	; (10350 <dmPrivHciHandler+0x94>)
   10344:	751a      	strb	r2, [r3, #20]
   10346:	e7d5      	b.n	102f4 <dmPrivHciHandler+0x38>
   10348:	bd70      	pop	{r4, r5, r6, pc}
   1034a:	bf00      	nop
   1034c:	10003e3c 	.word	0x10003e3c
   10350:	10003e24 	.word	0x10003e24

00010354 <DmPrivInit>:
   10354:	4b01      	ldr	r3, [pc, #4]	; (1035c <DmPrivInit+0x8>)
   10356:	4a02      	ldr	r2, [pc, #8]	; (10360 <DmPrivInit+0xc>)
   10358:	619a      	str	r2, [r3, #24]
   1035a:	4770      	bx	lr
   1035c:	10002b54 	.word	0x10002b54
   10360:	00022130 	.word	0x00022130

00010364 <DmPrivResolveAddr>:
   10364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10366:	4605      	mov	r5, r0
   10368:	201a      	movs	r0, #26
   1036a:	460e      	mov	r6, r1
   1036c:	4617      	mov	r7, r2
   1036e:	f004 ff68 	bl	15242 <WsfMsgAlloc>
   10372:	4604      	mov	r4, r0
   10374:	b190      	cbz	r0, 1039c <DmPrivResolveAddr+0x38>
   10376:	2360      	movs	r3, #96	; 0x60
   10378:	7083      	strb	r3, [r0, #2]
   1037a:	4631      	mov	r1, r6
   1037c:	f820 7b04 	strh.w	r7, [r0], #4
   10380:	f004 f94d 	bl	1461e <Calc128Cpy>
   10384:	4629      	mov	r1, r5
   10386:	f104 0014 	add.w	r0, r4, #20
   1038a:	f004 f8fd 	bl	14588 <BdaCpy>
   1038e:	4b04      	ldr	r3, [pc, #16]	; (103a0 <DmPrivResolveAddr+0x3c>)
   10390:	4621      	mov	r1, r4
   10392:	7b18      	ldrb	r0, [r3, #12]
   10394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10398:	f004 bf77 	b.w	1528a <WsfMsgSend>
   1039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1039e:	bf00      	nop
   103a0:	10003e24 	.word	0x10003e24

000103a4 <DmPrivAddDevToResList>:
   103a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103a8:	4681      	mov	r9, r0
   103aa:	202c      	movs	r0, #44	; 0x2c
   103ac:	4688      	mov	r8, r1
   103ae:	4617      	mov	r7, r2
   103b0:	461e      	mov	r6, r3
   103b2:	f89d 5020 	ldrb.w	r5, [sp, #32]
   103b6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
   103ba:	f004 ff42 	bl	15242 <WsfMsgAlloc>
   103be:	4604      	mov	r4, r0
   103c0:	b1e0      	cbz	r0, 103fc <DmPrivAddDevToResList+0x58>
   103c2:	2362      	movs	r3, #98	; 0x62
   103c4:	7083      	strb	r3, [r0, #2]
   103c6:	f8a0 a000 	strh.w	sl, [r0]
   103ca:	f880 9004 	strb.w	r9, [r0, #4]
   103ce:	4641      	mov	r1, r8
   103d0:	3005      	adds	r0, #5
   103d2:	f004 f8d9 	bl	14588 <BdaCpy>
   103d6:	4639      	mov	r1, r7
   103d8:	f104 000b 	add.w	r0, r4, #11
   103dc:	f004 f91f 	bl	1461e <Calc128Cpy>
   103e0:	4631      	mov	r1, r6
   103e2:	f104 001b 	add.w	r0, r4, #27
   103e6:	f004 f91a 	bl	1461e <Calc128Cpy>
   103ea:	4b05      	ldr	r3, [pc, #20]	; (10400 <DmPrivAddDevToResList+0x5c>)
   103ec:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
   103f0:	4621      	mov	r1, r4
   103f2:	7b18      	ldrb	r0, [r3, #12]
   103f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103f8:	f004 bf47 	b.w	1528a <WsfMsgSend>
   103fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10400:	10003e24 	.word	0x10003e24

00010404 <DmPrivRemDevFromResList>:
   10404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10406:	4606      	mov	r6, r0
   10408:	200c      	movs	r0, #12
   1040a:	460d      	mov	r5, r1
   1040c:	4617      	mov	r7, r2
   1040e:	f004 ff18 	bl	15242 <WsfMsgAlloc>
   10412:	4604      	mov	r4, r0
   10414:	b170      	cbz	r0, 10434 <DmPrivRemDevFromResList+0x30>
   10416:	2363      	movs	r3, #99	; 0x63
   10418:	7083      	strb	r3, [r0, #2]
   1041a:	8007      	strh	r7, [r0, #0]
   1041c:	7106      	strb	r6, [r0, #4]
   1041e:	4629      	mov	r1, r5
   10420:	3005      	adds	r0, #5
   10422:	f004 f8b1 	bl	14588 <BdaCpy>
   10426:	4b04      	ldr	r3, [pc, #16]	; (10438 <DmPrivRemDevFromResList+0x34>)
   10428:	4621      	mov	r1, r4
   1042a:	7b18      	ldrb	r0, [r3, #12]
   1042c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10430:	f004 bf2b 	b.w	1528a <WsfMsgSend>
   10434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10436:	bf00      	nop
   10438:	10003e24 	.word	0x10003e24

0001043c <DmPrivClearResList>:
   1043c:	b508      	push	{r3, lr}
   1043e:	202c      	movs	r0, #44	; 0x2c
   10440:	f004 feff 	bl	15242 <WsfMsgAlloc>
   10444:	4601      	mov	r1, r0
   10446:	b138      	cbz	r0, 10458 <DmPrivClearResList+0x1c>
   10448:	2364      	movs	r3, #100	; 0x64
   1044a:	7083      	strb	r3, [r0, #2]
   1044c:	4b03      	ldr	r3, [pc, #12]	; (1045c <DmPrivClearResList+0x20>)
   1044e:	7b18      	ldrb	r0, [r3, #12]
   10450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10454:	f004 bf19 	b.w	1528a <WsfMsgSend>
   10458:	bd08      	pop	{r3, pc}
   1045a:	bf00      	nop
   1045c:	10003e24 	.word	0x10003e24

00010460 <DmPrivReadPeerResolvableAddr>:
   10460:	f006 b86a 	b.w	16538 <HciLeReadPeerResolvableAddr>

00010464 <DmPrivReadLocalResolvableAddr>:
   10464:	f006 b88d 	b.w	16582 <HciLeReadLocalResolvableAddr>

00010468 <DmPrivSetAddrResEnable>:
   10468:	b510      	push	{r4, lr}
   1046a:	4604      	mov	r4, r0
   1046c:	202c      	movs	r0, #44	; 0x2c
   1046e:	f004 fee8 	bl	15242 <WsfMsgAlloc>
   10472:	4601      	mov	r1, r0
   10474:	b150      	cbz	r0, 1048c <DmPrivSetAddrResEnable+0x24>
   10476:	2365      	movs	r3, #101	; 0x65
   10478:	7083      	strb	r3, [r0, #2]
   1047a:	2300      	movs	r3, #0
   1047c:	8003      	strh	r3, [r0, #0]
   1047e:	4b04      	ldr	r3, [pc, #16]	; (10490 <DmPrivSetAddrResEnable+0x28>)
   10480:	7104      	strb	r4, [r0, #4]
   10482:	7b18      	ldrb	r0, [r3, #12]
   10484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10488:	f004 beff 	b.w	1528a <WsfMsgSend>
   1048c:	bd10      	pop	{r4, pc}
   1048e:	bf00      	nop
   10490:	10003e24 	.word	0x10003e24

00010494 <DmPrivSetResolvablePrivateAddrTimeout>:
   10494:	f006 b8b7 	b.w	16606 <HciLeSetResolvablePrivateAddrTimeout>

00010498 <DmPrivSetPrivacyMode>:
   10498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1049a:	4607      	mov	r7, r0
   1049c:	200c      	movs	r0, #12
   1049e:	460e      	mov	r6, r1
   104a0:	4615      	mov	r5, r2
   104a2:	f004 fece 	bl	15242 <WsfMsgAlloc>
   104a6:	4604      	mov	r4, r0
   104a8:	b170      	cbz	r0, 104c8 <DmPrivSetPrivacyMode+0x30>
   104aa:	2366      	movs	r3, #102	; 0x66
   104ac:	7083      	strb	r3, [r0, #2]
   104ae:	7107      	strb	r7, [r0, #4]
   104b0:	4631      	mov	r1, r6
   104b2:	3005      	adds	r0, #5
   104b4:	f004 f868 	bl	14588 <BdaCpy>
   104b8:	4b04      	ldr	r3, [pc, #16]	; (104cc <DmPrivSetPrivacyMode+0x34>)
   104ba:	72e5      	strb	r5, [r4, #11]
   104bc:	4621      	mov	r1, r4
   104be:	7b18      	ldrb	r0, [r3, #12]
   104c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   104c4:	f004 bee1 	b.w	1528a <WsfMsgSend>
   104c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   104ca:	bf00      	nop
   104cc:	10003e24 	.word	0x10003e24

000104d0 <dmScanInit>:
   104d0:	4b05      	ldr	r3, [pc, #20]	; (104e8 <dmScanInit+0x18>)
   104d2:	4906      	ldr	r1, [pc, #24]	; (104ec <dmScanInit+0x1c>)
   104d4:	7b18      	ldrb	r0, [r3, #12]
   104d6:	7208      	strb	r0, [r1, #8]
   104d8:	2200      	movs	r2, #0
   104da:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
   104de:	749a      	strb	r2, [r3, #18]
   104e0:	6108      	str	r0, [r1, #16]
   104e2:	750a      	strb	r2, [r1, #20]
   104e4:	73da      	strb	r2, [r3, #15]
   104e6:	4770      	bx	lr
   104e8:	10003e24 	.word	0x10003e24
   104ec:	10003e48 	.word	0x10003e48

000104f0 <DmScanStart>:
   104f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   104f4:	4605      	mov	r5, r0
   104f6:	200e      	movs	r0, #14
   104f8:	460e      	mov	r6, r1
   104fa:	4692      	mov	sl, r2
   104fc:	461f      	mov	r7, r3
   104fe:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   10502:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   10506:	f004 fe9c 	bl	15242 <WsfMsgAlloc>
   1050a:	b1d8      	cbz	r0, 10544 <DmScanStart+0x54>
   1050c:	2320      	movs	r3, #32
   1050e:	7083      	strb	r3, [r0, #2]
   10510:	7105      	strb	r5, [r0, #4]
   10512:	2400      	movs	r4, #0
   10514:	fa45 f304 	asr.w	r3, r5, r4
   10518:	07db      	lsls	r3, r3, #31
   1051a:	d50f      	bpl.n	1053c <DmScanStart+0x4c>
   1051c:	f89a 3000 	ldrb.w	r3, [sl]
   10520:	7143      	strb	r3, [r0, #5]
   10522:	4b09      	ldr	r3, [pc, #36]	; (10548 <DmScanStart+0x58>)
   10524:	7186      	strb	r6, [r0, #6]
   10526:	f8a0 8008 	strh.w	r8, [r0, #8]
   1052a:	f8a0 900a 	strh.w	r9, [r0, #10]
   1052e:	7307      	strb	r7, [r0, #12]
   10530:	4601      	mov	r1, r0
   10532:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10536:	7b18      	ldrb	r0, [r3, #12]
   10538:	f004 bea7 	b.w	1528a <WsfMsgSend>
   1053c:	2c07      	cmp	r4, #7
   1053e:	d0f0      	beq.n	10522 <DmScanStart+0x32>
   10540:	3401      	adds	r4, #1
   10542:	e7e7      	b.n	10514 <DmScanStart+0x24>
   10544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10548:	10003e24 	.word	0x10003e24

0001054c <DmScanStop>:
   1054c:	b508      	push	{r3, lr}
   1054e:	2004      	movs	r0, #4
   10550:	f004 fe77 	bl	15242 <WsfMsgAlloc>
   10554:	4601      	mov	r1, r0
   10556:	b138      	cbz	r0, 10568 <DmScanStop+0x1c>
   10558:	2321      	movs	r3, #33	; 0x21
   1055a:	7083      	strb	r3, [r0, #2]
   1055c:	4b03      	ldr	r3, [pc, #12]	; (1056c <DmScanStop+0x20>)
   1055e:	7b18      	ldrb	r0, [r3, #12]
   10560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10564:	f004 be91 	b.w	1528a <WsfMsgSend>
   10568:	bd08      	pop	{r3, pc}
   1056a:	bf00      	nop
   1056c:	10003e24 	.word	0x10003e24

00010570 <DmScanSetInterval>:
   10570:	b570      	push	{r4, r5, r6, lr}
   10572:	2400      	movs	r4, #0
   10574:	fa40 f304 	asr.w	r3, r0, r4
   10578:	07db      	lsls	r3, r3, #31
   1057a:	d515      	bpl.n	105a8 <DmScanSetInterval+0x38>
   1057c:	880e      	ldrh	r6, [r1, #0]
   1057e:	8815      	ldrh	r5, [r2, #0]
   10580:	f009 f99a 	bl	198b8 <WsfTaskLock>
   10584:	2001      	movs	r0, #1
   10586:	40a0      	lsls	r0, r4
   10588:	b2c0      	uxtb	r0, r0
   1058a:	f7ff fdef 	bl	1016c <DmScanPhyToIdx>
   1058e:	4b08      	ldr	r3, [pc, #32]	; (105b0 <DmScanSetInterval+0x40>)
   10590:	3008      	adds	r0, #8
   10592:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
   10596:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1059a:	805d      	strh	r5, [r3, #2]
   1059c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   105a0:	f009 b990 	b.w	198c4 <WsfTaskUnlock>
   105a4:	3401      	adds	r4, #1
   105a6:	e7e5      	b.n	10574 <DmScanSetInterval+0x4>
   105a8:	2c07      	cmp	r4, #7
   105aa:	d1fb      	bne.n	105a4 <DmScanSetInterval+0x34>
   105ac:	bd70      	pop	{r4, r5, r6, pc}
   105ae:	bf00      	nop
   105b0:	10003e48 	.word	0x10003e48

000105b4 <DmScanSetAddrType>:
   105b4:	b510      	push	{r4, lr}
   105b6:	4604      	mov	r4, r0
   105b8:	f009 f97e 	bl	198b8 <WsfTaskLock>
   105bc:	4b02      	ldr	r3, [pc, #8]	; (105c8 <DmScanSetAddrType+0x14>)
   105be:	73dc      	strb	r4, [r3, #15]
   105c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   105c4:	f009 b97e 	b.w	198c4 <WsfTaskUnlock>
   105c8:	10003e24 	.word	0x10003e24

000105cc <dmSecMsgHandler>:
   105cc:	b570      	push	{r4, r5, r6, lr}
   105ce:	4605      	mov	r5, r0
   105d0:	7800      	ldrb	r0, [r0, #0]
   105d2:	f7ff f939 	bl	f848 <dmConnCcbById>
   105d6:	4604      	mov	r4, r0
   105d8:	b120      	cbz	r0, 105e4 <dmSecMsgHandler+0x18>
   105da:	78ab      	ldrb	r3, [r5, #2]
   105dc:	2b50      	cmp	r3, #80	; 0x50
   105de:	d002      	beq.n	105e6 <dmSecMsgHandler+0x1a>
   105e0:	2b51      	cmp	r3, #81	; 0x51
   105e2:	d012      	beq.n	1060a <dmSecMsgHandler+0x3e>
   105e4:	bd70      	pop	{r4, r5, r6, pc}
   105e6:	2201      	movs	r2, #1
   105e8:	2102      	movs	r1, #2
   105ea:	7c00      	ldrb	r0, [r0, #16]
   105ec:	f7ff fbac 	bl	fd48 <DmConnSetIdle>
   105f0:	7fab      	ldrb	r3, [r5, #30]
   105f2:	7623      	strb	r3, [r4, #24]
   105f4:	2301      	movs	r3, #1
   105f6:	74a3      	strb	r3, [r4, #18]
   105f8:	8baa      	ldrh	r2, [r5, #28]
   105fa:	89a0      	ldrh	r0, [r4, #12]
   105fc:	1d2b      	adds	r3, r5, #4
   105fe:	f105 0114 	add.w	r1, r5, #20
   10602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10606:	f005 bde5 	b.w	161d4 <HciLeStartEncryptionCmd>
   1060a:	7d2a      	ldrb	r2, [r5, #20]
   1060c:	b13a      	cbz	r2, 1061e <dmSecMsgHandler+0x52>
   1060e:	7d6b      	ldrb	r3, [r5, #21]
   10610:	7603      	strb	r3, [r0, #24]
   10612:	1d29      	adds	r1, r5, #4
   10614:	8980      	ldrh	r0, [r0, #12]
   10616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1061a:	f005 bbe5 	b.w	15de8 <HciLeLtkReqReplCmd>
   1061e:	7c00      	ldrb	r0, [r0, #16]
   10620:	2102      	movs	r1, #2
   10622:	f7ff fb91 	bl	fd48 <DmConnSetIdle>
   10626:	89a0      	ldrh	r0, [r4, #12]
   10628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1062c:	f005 bbb6 	b.w	15d9c <HciLeLtkReqNegReplCmd>

00010630 <dmSecApiLtkMsg>:
   10630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10632:	4606      	mov	r6, r0
   10634:	2020      	movs	r0, #32
   10636:	460d      	mov	r5, r1
   10638:	4614      	mov	r4, r2
   1063a:	461f      	mov	r7, r3
   1063c:	f004 fe01 	bl	15242 <WsfMsgAlloc>
   10640:	b1a8      	cbz	r0, 1066e <dmSecApiLtkMsg+0x3e>
   10642:	7087      	strb	r7, [r0, #2]
   10644:	8006      	strh	r6, [r0, #0]
   10646:	70c5      	strb	r5, [r0, #3]
   10648:	4622      	mov	r2, r4
   1064a:	1d03      	adds	r3, r0, #4
   1064c:	f104 0118 	add.w	r1, r4, #24
   10650:	f852 4b04 	ldr.w	r4, [r2], #4
   10654:	f843 4b04 	str.w	r4, [r3], #4
   10658:	428a      	cmp	r2, r1
   1065a:	d1f9      	bne.n	10650 <dmSecApiLtkMsg+0x20>
   1065c:	8812      	ldrh	r2, [r2, #0]
   1065e:	801a      	strh	r2, [r3, #0]
   10660:	4b03      	ldr	r3, [pc, #12]	; (10670 <dmSecApiLtkMsg+0x40>)
   10662:	4601      	mov	r1, r0
   10664:	7b18      	ldrb	r0, [r3, #12]
   10666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1066a:	f004 be0e 	b.w	1528a <WsfMsgSend>
   1066e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10670:	10003e24 	.word	0x10003e24

00010674 <DmSmpCbackExec>:
   10674:	7883      	ldrb	r3, [r0, #2]
   10676:	2b2a      	cmp	r3, #42	; 0x2a
   10678:	b510      	push	{r4, lr}
   1067a:	4604      	mov	r4, r0
   1067c:	d001      	beq.n	10682 <DmSmpCbackExec+0xe>
   1067e:	2b2c      	cmp	r3, #44	; 0x2c
   10680:	d105      	bne.n	1068e <DmSmpCbackExec+0x1a>
   10682:	4b06      	ldr	r3, [pc, #24]	; (1069c <DmSmpCbackExec+0x28>)
   10684:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   10688:	b10b      	cbz	r3, 1068e <DmSmpCbackExec+0x1a>
   1068a:	4620      	mov	r0, r4
   1068c:	4798      	blx	r3
   1068e:	4b04      	ldr	r3, [pc, #16]	; (106a0 <DmSmpCbackExec+0x2c>)
   10690:	4620      	mov	r0, r4
   10692:	689b      	ldr	r3, [r3, #8]
   10694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10698:	4718      	bx	r3
   1069a:	bf00      	nop
   1069c:	10003c94 	.word	0x10003c94
   106a0:	10003e24 	.word	0x10003e24

000106a4 <dmSecHciHandler>:
   106a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   106a6:	4605      	mov	r5, r0
   106a8:	8800      	ldrh	r0, [r0, #0]
   106aa:	f7fe ffe6 	bl	f67a <dmConnCcbByHandle>
   106ae:	4604      	mov	r4, r0
   106b0:	b1c0      	cbz	r0, 106e4 <dmSecHciHandler+0x40>
   106b2:	78ab      	ldrb	r3, [r5, #2]
   106b4:	2b10      	cmp	r3, #16
   106b6:	d127      	bne.n	10708 <dmSecHciHandler+0x64>
   106b8:	89eb      	ldrh	r3, [r5, #14]
   106ba:	b9ab      	cbnz	r3, 106e8 <dmSecHciHandler+0x44>
   106bc:	2208      	movs	r2, #8
   106be:	4926      	ldr	r1, [pc, #152]	; (10758 <dmSecHciHandler+0xb4>)
   106c0:	1da8      	adds	r0, r5, #6
   106c2:	f7fb fd1d 	bl	c100 <memcmp>
   106c6:	4606      	mov	r6, r0
   106c8:	b970      	cbnz	r0, 106e8 <dmSecHciHandler+0x44>
   106ca:	4669      	mov	r1, sp
   106cc:	7c20      	ldrb	r0, [r4, #16]
   106ce:	f000 fda3 	bl	11218 <SmpDmGetStk>
   106d2:	4601      	mov	r1, r0
   106d4:	b140      	cbz	r0, 106e8 <dmSecHciHandler+0x44>
   106d6:	f89d 3000 	ldrb.w	r3, [sp]
   106da:	7623      	strb	r3, [r4, #24]
   106dc:	74a6      	strb	r6, [r4, #18]
   106de:	8828      	ldrh	r0, [r5, #0]
   106e0:	f005 fb82 	bl	15de8 <HciLeLtkReqReplCmd>
   106e4:	b002      	add	sp, #8
   106e6:	bd70      	pop	{r4, r5, r6, pc}
   106e8:	7c20      	ldrb	r0, [r4, #16]
   106ea:	2201      	movs	r2, #1
   106ec:	2102      	movs	r1, #2
   106ee:	f7ff fb2b 	bl	fd48 <DmConnSetIdle>
   106f2:	2301      	movs	r3, #1
   106f4:	74a3      	strb	r3, [r4, #18]
   106f6:	7c23      	ldrb	r3, [r4, #16]
   106f8:	802b      	strh	r3, [r5, #0]
   106fa:	2330      	movs	r3, #48	; 0x30
   106fc:	70ab      	strb	r3, [r5, #2]
   106fe:	4b17      	ldr	r3, [pc, #92]	; (1075c <dmSecHciHandler+0xb8>)
   10700:	4628      	mov	r0, r5
   10702:	689b      	ldr	r3, [r3, #8]
   10704:	4798      	blx	r3
   10706:	e7ed      	b.n	106e4 <dmSecHciHandler+0x40>
   10708:	3b0e      	subs	r3, #14
   1070a:	2b01      	cmp	r3, #1
   1070c:	d8ea      	bhi.n	106e4 <dmSecHciHandler+0x40>
   1070e:	2200      	movs	r2, #0
   10710:	2102      	movs	r1, #2
   10712:	7c00      	ldrb	r0, [r0, #16]
   10714:	f7ff fb18 	bl	fd48 <DmConnSetIdle>
   10718:	7c23      	ldrb	r3, [r4, #16]
   1071a:	f8ad 3000 	strh.w	r3, [sp]
   1071e:	78eb      	ldrb	r3, [r5, #3]
   10720:	f88d 3003 	strb.w	r3, [sp, #3]
   10724:	b9a3      	cbnz	r3, 10750 <dmSecHciHandler+0xac>
   10726:	232c      	movs	r3, #44	; 0x2c
   10728:	f88d 3002 	strb.w	r3, [sp, #2]
   1072c:	7e23      	ldrb	r3, [r4, #24]
   1072e:	75e3      	strb	r3, [r4, #23]
   10730:	7ca3      	ldrb	r3, [r4, #18]
   10732:	f88d 3004 	strb.w	r3, [sp, #4]
   10736:	4668      	mov	r0, sp
   10738:	f7ff ff9c 	bl	10674 <DmSmpCbackExec>
   1073c:	7c23      	ldrb	r3, [r4, #16]
   1073e:	f8ad 3000 	strh.w	r3, [sp]
   10742:	4668      	mov	r0, sp
   10744:	78eb      	ldrb	r3, [r5, #3]
   10746:	f88d 3003 	strb.w	r3, [sp, #3]
   1074a:	f000 fddf 	bl	1130c <SmpDmEncryptInd>
   1074e:	e7c9      	b.n	106e4 <dmSecHciHandler+0x40>
   10750:	232d      	movs	r3, #45	; 0x2d
   10752:	f88d 3002 	strb.w	r3, [sp, #2]
   10756:	e7ee      	b.n	10736 <dmSecHciHandler+0x92>
   10758:	00022a0c 	.word	0x00022a0c
   1075c:	10003e24 	.word	0x10003e24

00010760 <DmSecCancelReq>:
   10760:	b538      	push	{r3, r4, r5, lr}
   10762:	4605      	mov	r5, r0
   10764:	2004      	movs	r0, #4
   10766:	460c      	mov	r4, r1
   10768:	f004 fd6b 	bl	15242 <WsfMsgAlloc>
   1076c:	b138      	cbz	r0, 1077e <DmSecCancelReq+0x1e>
   1076e:	2203      	movs	r2, #3
   10770:	7082      	strb	r2, [r0, #2]
   10772:	70c4      	strb	r4, [r0, #3]
   10774:	8005      	strh	r5, [r0, #0]
   10776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1077a:	f000 bd44 	b.w	11206 <SmpDmMsgSend>
   1077e:	bd38      	pop	{r3, r4, r5, pc}

00010780 <DmSecAuthRsp>:
   10780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10782:	4607      	mov	r7, r0
   10784:	2016      	movs	r0, #22
   10786:	460e      	mov	r6, r1
   10788:	4615      	mov	r5, r2
   1078a:	f004 fd5a 	bl	15242 <WsfMsgAlloc>
   1078e:	4604      	mov	r4, r0
   10790:	b170      	cbz	r0, 107b0 <DmSecAuthRsp+0x30>
   10792:	2304      	movs	r3, #4
   10794:	7083      	strb	r3, [r0, #2]
   10796:	8007      	strh	r7, [r0, #0]
   10798:	7506      	strb	r6, [r0, #20]
   1079a:	b125      	cbz	r5, 107a6 <DmSecAuthRsp+0x26>
   1079c:	4632      	mov	r2, r6
   1079e:	4629      	mov	r1, r5
   107a0:	4418      	add	r0, r3
   107a2:	f7fb fcdd 	bl	c160 <memcpy>
   107a6:	4620      	mov	r0, r4
   107a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   107ac:	f000 bd2b 	b.w	11206 <SmpDmMsgSend>
   107b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000107b2 <DmSecInit>:
   107b2:	4b04      	ldr	r3, [pc, #16]	; (107c4 <DmSecInit+0x12>)
   107b4:	4a04      	ldr	r2, [pc, #16]	; (107c8 <DmSecInit+0x16>)
   107b6:	615a      	str	r2, [r3, #20]
   107b8:	4b04      	ldr	r3, [pc, #16]	; (107cc <DmSecInit+0x1a>)
   107ba:	4a05      	ldr	r2, [pc, #20]	; (107d0 <DmSecInit+0x1e>)
   107bc:	e9c3 2200 	strd	r2, r2, [r3]
   107c0:	4770      	bx	lr
   107c2:	bf00      	nop
   107c4:	10002b54 	.word	0x10002b54
   107c8:	0002213c 	.word	0x0002213c
   107cc:	10003e64 	.word	0x10003e64
   107d0:	00022a0c 	.word	0x00022a0c

000107d4 <DmSecSetLocalCsrk>:
   107d4:	b510      	push	{r4, lr}
   107d6:	4604      	mov	r4, r0
   107d8:	f009 f86e 	bl	198b8 <WsfTaskLock>
   107dc:	4b02      	ldr	r3, [pc, #8]	; (107e8 <DmSecSetLocalCsrk+0x14>)
   107de:	605c      	str	r4, [r3, #4]
   107e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107e4:	f009 b86e 	b.w	198c4 <WsfTaskUnlock>
   107e8:	10003e64 	.word	0x10003e64

000107ec <DmSecSetLocalIrk>:
   107ec:	b510      	push	{r4, lr}
   107ee:	4604      	mov	r4, r0
   107f0:	f009 f862 	bl	198b8 <WsfTaskLock>
   107f4:	4b02      	ldr	r3, [pc, #8]	; (10800 <DmSecSetLocalIrk+0x14>)
   107f6:	601c      	str	r4, [r3, #0]
   107f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107fc:	f009 b862 	b.w	198c4 <WsfTaskUnlock>
   10800:	10003e64 	.word	0x10003e64

00010804 <DmSecGetLocalCsrk>:
   10804:	4b01      	ldr	r3, [pc, #4]	; (1080c <DmSecGetLocalCsrk+0x8>)
   10806:	6858      	ldr	r0, [r3, #4]
   10808:	4770      	bx	lr
   1080a:	bf00      	nop
   1080c:	10003e64 	.word	0x10003e64

00010810 <DmSecGetLocalIrk>:
   10810:	4b01      	ldr	r3, [pc, #4]	; (10818 <DmSecGetLocalIrk+0x8>)
   10812:	6818      	ldr	r0, [r3, #0]
   10814:	4770      	bx	lr
   10816:	bf00      	nop
   10818:	10003e64 	.word	0x10003e64

0001081c <dmSecLescMsgHandler>:
   1081c:	7883      	ldrb	r3, [r0, #2]
   1081e:	2b81      	cmp	r3, #129	; 0x81
   10820:	b570      	push	{r4, r5, r6, lr}
   10822:	4604      	mov	r4, r0
   10824:	d106      	bne.n	10834 <dmSecLescMsgHandler+0x18>
   10826:	2334      	movs	r3, #52	; 0x34
   10828:	7083      	strb	r3, [r0, #2]
   1082a:	4b0d      	ldr	r3, [pc, #52]	; (10860 <dmSecLescMsgHandler+0x44>)
   1082c:	689b      	ldr	r3, [r3, #8]
   1082e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10832:	4718      	bx	r3
   10834:	2b80      	cmp	r3, #128	; 0x80
   10836:	d112      	bne.n	1085e <dmSecLescMsgHandler+0x42>
   10838:	2333      	movs	r3, #51	; 0x33
   1083a:	4d0a      	ldr	r5, [pc, #40]	; (10864 <dmSecLescMsgHandler+0x48>)
   1083c:	7083      	strb	r3, [r0, #2]
   1083e:	6841      	ldr	r1, [r0, #4]
   10840:	3004      	adds	r0, #4
   10842:	f003 feec 	bl	1461e <Calc128Cpy>
   10846:	6829      	ldr	r1, [r5, #0]
   10848:	f104 0014 	add.w	r0, r4, #20
   1084c:	f003 fee7 	bl	1461e <Calc128Cpy>
   10850:	6828      	ldr	r0, [r5, #0]
   10852:	f004 fca7 	bl	151a4 <WsfBufFree>
   10856:	4b02      	ldr	r3, [pc, #8]	; (10860 <dmSecLescMsgHandler+0x44>)
   10858:	4620      	mov	r0, r4
   1085a:	689b      	ldr	r3, [r3, #8]
   1085c:	e7e7      	b.n	1082e <dmSecLescMsgHandler+0x12>
   1085e:	bd70      	pop	{r4, r5, r6, pc}
   10860:	10003e24 	.word	0x10003e24
   10864:	10003e6c 	.word	0x10003e6c

00010868 <DmSecKeypressReq>:
   10868:	b538      	push	{r3, r4, r5, lr}
   1086a:	4604      	mov	r4, r0
   1086c:	2006      	movs	r0, #6
   1086e:	460d      	mov	r5, r1
   10870:	f004 fce7 	bl	15242 <WsfMsgAlloc>
   10874:	b138      	cbz	r0, 10886 <DmSecKeypressReq+0x1e>
   10876:	2216      	movs	r2, #22
   10878:	7105      	strb	r5, [r0, #4]
   1087a:	7082      	strb	r2, [r0, #2]
   1087c:	8004      	strh	r4, [r0, #0]
   1087e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10882:	f000 bcc0 	b.w	11206 <SmpDmMsgSend>
   10886:	bd38      	pop	{r3, r4, r5, pc}

00010888 <DmSecSetOob>:
   10888:	f000 bef9 	b.w	1167e <SmpScSetOobCfg>

0001088c <DmSecCalcOobReq>:
   1088c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1088e:	4605      	mov	r5, r0
   10890:	b08d      	sub	sp, #52	; 0x34
   10892:	2010      	movs	r0, #16
   10894:	460e      	mov	r6, r1
   10896:	f004 fc45 	bl	15124 <WsfBufAlloc>
   1089a:	4c1a      	ldr	r4, [pc, #104]	; (10904 <DmSecCalcOobReq+0x78>)
   1089c:	4f1a      	ldr	r7, [pc, #104]	; (10908 <DmSecCalcOobReq+0x7c>)
   1089e:	6020      	str	r0, [r4, #0]
   108a0:	b308      	cbz	r0, 108e6 <DmSecCalcOobReq+0x5a>
   108a2:	4629      	mov	r1, r5
   108a4:	f003 febb 	bl	1461e <Calc128Cpy>
   108a8:	2041      	movs	r0, #65	; 0x41
   108aa:	f004 fc3b 	bl	15124 <WsfBufAlloc>
   108ae:	4605      	mov	r5, r0
   108b0:	b1b0      	cbz	r0, 108e0 <DmSecCalcOobReq+0x54>
   108b2:	2220      	movs	r2, #32
   108b4:	4631      	mov	r1, r6
   108b6:	f000 fdff 	bl	114b8 <SmpScCat>
   108ba:	2220      	movs	r2, #32
   108bc:	4631      	mov	r1, r6
   108be:	f000 fdfb 	bl	114b8 <SmpScCat>
   108c2:	2200      	movs	r2, #0
   108c4:	7002      	strb	r2, [r0, #0]
   108c6:	2180      	movs	r1, #128	; 0x80
   108c8:	7b3b      	ldrb	r3, [r7, #12]
   108ca:	6820      	ldr	r0, [r4, #0]
   108cc:	e9cd 2100 	strd	r2, r1, [sp]
   108d0:	2241      	movs	r2, #65	; 0x41
   108d2:	4629      	mov	r1, r5
   108d4:	f003 fc38 	bl	14148 <SecCmac>
   108d8:	b988      	cbnz	r0, 108fe <DmSecCalcOobReq+0x72>
   108da:	4628      	mov	r0, r5
   108dc:	f004 fc62 	bl	151a4 <WsfBufFree>
   108e0:	6820      	ldr	r0, [r4, #0]
   108e2:	f004 fc5f 	bl	151a4 <WsfBufFree>
   108e6:	2224      	movs	r2, #36	; 0x24
   108e8:	2100      	movs	r1, #0
   108ea:	a803      	add	r0, sp, #12
   108ec:	f7fb fd36 	bl	c35c <memset>
   108f0:	f240 7333 	movw	r3, #1843	; 0x733
   108f4:	f8ad 300e 	strh.w	r3, [sp, #14]
   108f8:	a803      	add	r0, sp, #12
   108fa:	68bb      	ldr	r3, [r7, #8]
   108fc:	4798      	blx	r3
   108fe:	b00d      	add	sp, #52	; 0x34
   10900:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10902:	bf00      	nop
   10904:	10003e6c 	.word	0x10003e6c
   10908:	10003e24 	.word	0x10003e24

0001090c <DmSecGenerateEccKeyReq>:
   1090c:	4b02      	ldr	r3, [pc, #8]	; (10918 <DmSecGenerateEccKeyReq+0xc>)
   1090e:	2281      	movs	r2, #129	; 0x81
   10910:	2100      	movs	r1, #0
   10912:	7b18      	ldrb	r0, [r3, #12]
   10914:	f003 bcca 	b.w	142ac <SecEccGenKey>
   10918:	10003e24 	.word	0x10003e24

0001091c <DmSecSetDebugEccKey>:
   1091c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1091e:	4b24      	ldr	r3, [pc, #144]	; (109b0 <DmSecSetDebugEccKey+0x94>)
   10920:	b099      	sub	sp, #100	; 0x64
   10922:	466a      	mov	r2, sp
   10924:	f103 0620 	add.w	r6, r3, #32
   10928:	4615      	mov	r5, r2
   1092a:	6818      	ldr	r0, [r3, #0]
   1092c:	6859      	ldr	r1, [r3, #4]
   1092e:	4614      	mov	r4, r2
   10930:	c403      	stmia	r4!, {r0, r1}
   10932:	3308      	adds	r3, #8
   10934:	42b3      	cmp	r3, r6
   10936:	4622      	mov	r2, r4
   10938:	d1f7      	bne.n	1092a <DmSecSetDebugEccKey+0xe>
   1093a:	4b1e      	ldr	r3, [pc, #120]	; (109b4 <DmSecSetDebugEccKey+0x98>)
   1093c:	ac08      	add	r4, sp, #32
   1093e:	f103 0720 	add.w	r7, r3, #32
   10942:	4622      	mov	r2, r4
   10944:	6818      	ldr	r0, [r3, #0]
   10946:	6859      	ldr	r1, [r3, #4]
   10948:	4626      	mov	r6, r4
   1094a:	c603      	stmia	r6!, {r0, r1}
   1094c:	3308      	adds	r3, #8
   1094e:	42bb      	cmp	r3, r7
   10950:	4634      	mov	r4, r6
   10952:	d1f7      	bne.n	10944 <DmSecSetDebugEccKey+0x28>
   10954:	4c18      	ldr	r4, [pc, #96]	; (109b8 <DmSecSetDebugEccKey+0x9c>)
   10956:	ae10      	add	r6, sp, #64	; 0x40
   10958:	f104 0c20 	add.w	ip, r4, #32
   1095c:	4633      	mov	r3, r6
   1095e:	6820      	ldr	r0, [r4, #0]
   10960:	6861      	ldr	r1, [r4, #4]
   10962:	4637      	mov	r7, r6
   10964:	c703      	stmia	r7!, {r0, r1}
   10966:	3408      	adds	r4, #8
   10968:	4564      	cmp	r4, ip
   1096a:	463e      	mov	r6, r7
   1096c:	d1f7      	bne.n	1095e <DmSecSetDebugEccKey+0x42>
   1096e:	4e13      	ldr	r6, [pc, #76]	; (109bc <DmSecSetDebugEccKey+0xa0>)
   10970:	462c      	mov	r4, r5
   10972:	cc03      	ldmia	r4!, {r0, r1}
   10974:	4294      	cmp	r4, r2
   10976:	6030      	str	r0, [r6, #0]
   10978:	6071      	str	r1, [r6, #4]
   1097a:	4625      	mov	r5, r4
   1097c:	f106 0608 	add.w	r6, r6, #8
   10980:	d1f6      	bne.n	10970 <DmSecSetDebugEccKey+0x54>
   10982:	4d0f      	ldr	r5, [pc, #60]	; (109c0 <DmSecSetDebugEccKey+0xa4>)
   10984:	4614      	mov	r4, r2
   10986:	cc03      	ldmia	r4!, {r0, r1}
   10988:	429c      	cmp	r4, r3
   1098a:	6028      	str	r0, [r5, #0]
   1098c:	6069      	str	r1, [r5, #4]
   1098e:	4622      	mov	r2, r4
   10990:	f105 0508 	add.w	r5, r5, #8
   10994:	d1f6      	bne.n	10984 <DmSecSetDebugEccKey+0x68>
   10996:	4c0b      	ldr	r4, [pc, #44]	; (109c4 <DmSecSetDebugEccKey+0xa8>)
   10998:	ad18      	add	r5, sp, #96	; 0x60
   1099a:	461a      	mov	r2, r3
   1099c:	ca03      	ldmia	r2!, {r0, r1}
   1099e:	42aa      	cmp	r2, r5
   109a0:	6020      	str	r0, [r4, #0]
   109a2:	6061      	str	r1, [r4, #4]
   109a4:	4613      	mov	r3, r2
   109a6:	f104 0408 	add.w	r4, r4, #8
   109aa:	d1f6      	bne.n	1099a <DmSecSetDebugEccKey+0x7e>
   109ac:	b019      	add	sp, #100	; 0x64
   109ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109b0:	00022148 	.word	0x00022148
   109b4:	00022168 	.word	0x00022168
   109b8:	00022188 	.word	0x00022188
   109bc:	10003eb0 	.word	0x10003eb0
   109c0:	10003e70 	.word	0x10003e70
   109c4:	10003e90 	.word	0x10003e90

000109c8 <DmSecSetEccKey>:
   109c8:	b508      	push	{r3, lr}
   109ca:	4601      	mov	r1, r0
   109cc:	2260      	movs	r2, #96	; 0x60
   109ce:	4802      	ldr	r0, [pc, #8]	; (109d8 <DmSecSetEccKey+0x10>)
   109d0:	f7fb fbc6 	bl	c160 <memcpy>
   109d4:	bd08      	pop	{r3, pc}
   109d6:	bf00      	nop
   109d8:	10003e70 	.word	0x10003e70

000109dc <DmSecGetEccKey>:
   109dc:	4800      	ldr	r0, [pc, #0]	; (109e0 <DmSecGetEccKey+0x4>)
   109de:	4770      	bx	lr
   109e0:	10003e70 	.word	0x10003e70

000109e4 <DmSecCompareRsp>:
   109e4:	b538      	push	{r3, r4, r5, lr}
   109e6:	4605      	mov	r5, r0
   109e8:	2016      	movs	r0, #22
   109ea:	460c      	mov	r4, r1
   109ec:	f004 fc29 	bl	15242 <WsfMsgAlloc>
   109f0:	b158      	cbz	r0, 10a0a <DmSecCompareRsp+0x26>
   109f2:	8005      	strh	r5, [r0, #0]
   109f4:	b12c      	cbz	r4, 10a02 <DmSecCompareRsp+0x1e>
   109f6:	2315      	movs	r3, #21
   109f8:	7083      	strb	r3, [r0, #2]
   109fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   109fe:	f000 bc02 	b.w	11206 <SmpDmMsgSend>
   10a02:	f240 4303 	movw	r3, #1027	; 0x403
   10a06:	8043      	strh	r3, [r0, #2]
   10a08:	e7f7      	b.n	109fa <DmSecCompareRsp+0x16>
   10a0a:	bd38      	pop	{r3, r4, r5, pc}

00010a0c <DmSecGetCompareValue>:
   10a0c:	7b43      	ldrb	r3, [r0, #13]
   10a0e:	7b82      	ldrb	r2, [r0, #14]
   10a10:	041b      	lsls	r3, r3, #16
   10a12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10a16:	7bc2      	ldrb	r2, [r0, #15]
   10a18:	7b00      	ldrb	r0, [r0, #12]
   10a1a:	4413      	add	r3, r2
   10a1c:	4a03      	ldr	r2, [pc, #12]	; (10a2c <DmSecGetCompareValue+0x20>)
   10a1e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
   10a22:	fbb3 f0f2 	udiv	r0, r3, r2
   10a26:	fb02 3010 	mls	r0, r2, r0, r3
   10a2a:	4770      	bx	lr
   10a2c:	000f4240 	.word	0x000f4240

00010a30 <DmSecLescInit>:
   10a30:	4b01      	ldr	r3, [pc, #4]	; (10a38 <DmSecLescInit+0x8>)
   10a32:	4a02      	ldr	r2, [pc, #8]	; (10a3c <DmSecLescInit+0xc>)
   10a34:	621a      	str	r2, [r3, #32]
   10a36:	4770      	bx	lr
   10a38:	10002b54 	.word	0x10002b54
   10a3c:	000221a8 	.word	0x000221a8

00010a40 <DmSecPairRsp>:
   10a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a44:	4681      	mov	r9, r0
   10a46:	2008      	movs	r0, #8
   10a48:	4688      	mov	r8, r1
   10a4a:	4617      	mov	r7, r2
   10a4c:	461e      	mov	r6, r3
   10a4e:	f89d 5020 	ldrb.w	r5, [sp, #32]
   10a52:	f004 fbf6 	bl	15242 <WsfMsgAlloc>
   10a56:	b180      	cbz	r0, 10a7a <DmSecPairRsp+0x3a>
   10a58:	2302      	movs	r3, #2
   10a5a:	f006 0607 	and.w	r6, r6, #7
   10a5e:	f005 0507 	and.w	r5, r5, #7
   10a62:	7083      	strb	r3, [r0, #2]
   10a64:	f880 8004 	strb.w	r8, [r0, #4]
   10a68:	7147      	strb	r7, [r0, #5]
   10a6a:	7186      	strb	r6, [r0, #6]
   10a6c:	71c5      	strb	r5, [r0, #7]
   10a6e:	f8a0 9000 	strh.w	r9, [r0]
   10a72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a76:	f000 bbc6 	b.w	11206 <SmpDmMsgSend>
   10a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010a7e <DmSecSlaveReq>:
   10a7e:	b538      	push	{r3, r4, r5, lr}
   10a80:	4605      	mov	r5, r0
   10a82:	2006      	movs	r0, #6
   10a84:	460c      	mov	r4, r1
   10a86:	f004 fbdc 	bl	15242 <WsfMsgAlloc>
   10a8a:	b138      	cbz	r0, 10a9c <DmSecSlaveReq+0x1e>
   10a8c:	2205      	movs	r2, #5
   10a8e:	7082      	strb	r2, [r0, #2]
   10a90:	7104      	strb	r4, [r0, #4]
   10a92:	8005      	strh	r5, [r0, #0]
   10a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10a98:	f000 bbb5 	b.w	11206 <SmpDmMsgSend>
   10a9c:	bd38      	pop	{r3, r4, r5, pc}

00010a9e <DmSecLtkRsp>:
   10a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10aa2:	4680      	mov	r8, r0
   10aa4:	2016      	movs	r0, #22
   10aa6:	460d      	mov	r5, r1
   10aa8:	4617      	mov	r7, r2
   10aaa:	461e      	mov	r6, r3
   10aac:	f004 fbc9 	bl	15242 <WsfMsgAlloc>
   10ab0:	4604      	mov	r4, r0
   10ab2:	b188      	cbz	r0, 10ad8 <DmSecLtkRsp+0x3a>
   10ab4:	2351      	movs	r3, #81	; 0x51
   10ab6:	7083      	strb	r3, [r0, #2]
   10ab8:	f8a0 8000 	strh.w	r8, [r0]
   10abc:	7505      	strb	r5, [r0, #20]
   10abe:	7547      	strb	r7, [r0, #21]
   10ac0:	b11d      	cbz	r5, 10aca <DmSecLtkRsp+0x2c>
   10ac2:	4631      	mov	r1, r6
   10ac4:	3004      	adds	r0, #4
   10ac6:	f003 fdaa 	bl	1461e <Calc128Cpy>
   10aca:	4b04      	ldr	r3, [pc, #16]	; (10adc <DmSecLtkRsp+0x3e>)
   10acc:	4621      	mov	r1, r4
   10ace:	7b18      	ldrb	r0, [r3, #12]
   10ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10ad4:	f004 bbd9 	b.w	1528a <WsfMsgSend>
   10ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10adc:	10003e24 	.word	0x10003e24

00010ae0 <l2cDefaultDataCback>:
   10ae0:	4770      	bx	lr

00010ae2 <l2cDefaultDataCidCback>:
   10ae2:	4770      	bx	lr

00010ae4 <l2cDefaultCtrlCback>:
   10ae4:	4770      	bx	lr

00010ae6 <l2cHciFlowCback>:
   10ae6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10ae8:	460d      	mov	r5, r1
   10aea:	f7ff f8cb 	bl	fc84 <DmConnIdByHandle>
   10aee:	b280      	uxth	r0, r0
   10af0:	f8ad 0004 	strh.w	r0, [sp, #4]
   10af4:	b178      	cbz	r0, 10b16 <l2cHciFlowCback+0x30>
   10af6:	4c09      	ldr	r4, [pc, #36]	; (10b1c <l2cHciFlowCback+0x36>)
   10af8:	f88d 5006 	strb.w	r5, [sp, #6]
   10afc:	68e3      	ldr	r3, [r4, #12]
   10afe:	a801      	add	r0, sp, #4
   10b00:	4798      	blx	r3
   10b02:	6923      	ldr	r3, [r4, #16]
   10b04:	f88d 5006 	strb.w	r5, [sp, #6]
   10b08:	a801      	add	r0, sp, #4
   10b0a:	4798      	blx	r3
   10b0c:	f88d 5006 	strb.w	r5, [sp, #6]
   10b10:	6963      	ldr	r3, [r4, #20]
   10b12:	a801      	add	r0, sp, #4
   10b14:	4798      	blx	r3
   10b16:	b003      	add	sp, #12
   10b18:	bd30      	pop	{r4, r5, pc}
   10b1a:	bf00      	nop
   10b1c:	10003ed0 	.word	0x10003ed0

00010b20 <l2cHciAclCback>:
   10b20:	b570      	push	{r4, r5, r6, lr}
   10b22:	78c2      	ldrb	r2, [r0, #3]
   10b24:	7883      	ldrb	r3, [r0, #2]
   10b26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10b2a:	b29b      	uxth	r3, r3
   10b2c:	2b03      	cmp	r3, #3
   10b2e:	bf83      	ittte	hi
   10b30:	7942      	ldrbhi	r2, [r0, #5]
   10b32:	7901      	ldrbhi	r1, [r0, #4]
   10b34:	eb01 2102 	addhi.w	r1, r1, r2, lsl #8
   10b38:	2100      	movls	r1, #0
   10b3a:	bf8a      	itet	hi
   10b3c:	b289      	uxthhi	r1, r1
   10b3e:	1d02      	addls	r2, r0, #4
   10b40:	1d82      	addhi	r2, r0, #6
   10b42:	4604      	mov	r4, r0
   10b44:	1d08      	adds	r0, r1, #4
   10b46:	4283      	cmp	r3, r0
   10b48:	d116      	bne.n	10b78 <l2cHciAclCback+0x58>
   10b4a:	7863      	ldrb	r3, [r4, #1]
   10b4c:	7820      	ldrb	r0, [r4, #0]
   10b4e:	7815      	ldrb	r5, [r2, #0]
   10b50:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   10b54:	7853      	ldrb	r3, [r2, #1]
   10b56:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   10b5a:	b2ad      	uxth	r5, r5
   10b5c:	2d05      	cmp	r5, #5
   10b5e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   10b62:	4b0c      	ldr	r3, [pc, #48]	; (10b94 <l2cHciAclCback+0x74>)
   10b64:	d005      	beq.n	10b72 <l2cHciAclCback+0x52>
   10b66:	2d06      	cmp	r5, #6
   10b68:	d00b      	beq.n	10b82 <l2cHciAclCback+0x62>
   10b6a:	2d04      	cmp	r5, #4
   10b6c:	d10b      	bne.n	10b86 <l2cHciAclCback+0x66>
   10b6e:	681b      	ldr	r3, [r3, #0]
   10b70:	e000      	b.n	10b74 <l2cHciAclCback+0x54>
   10b72:	689b      	ldr	r3, [r3, #8]
   10b74:	4622      	mov	r2, r4
   10b76:	4798      	blx	r3
   10b78:	4620      	mov	r0, r4
   10b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10b7e:	f004 bb77 	b.w	15270 <WsfMsgFree>
   10b82:	685b      	ldr	r3, [r3, #4]
   10b84:	e7f6      	b.n	10b74 <l2cHciAclCback+0x54>
   10b86:	6a1e      	ldr	r6, [r3, #32]
   10b88:	460a      	mov	r2, r1
   10b8a:	4623      	mov	r3, r4
   10b8c:	4629      	mov	r1, r5
   10b8e:	47b0      	blx	r6
   10b90:	e7f2      	b.n	10b78 <l2cHciAclCback+0x58>
   10b92:	bf00      	nop
   10b94:	10003ed0 	.word	0x10003ed0

00010b98 <l2cRxSignalingPkt>:
   10b98:	b570      	push	{r4, r5, r6, lr}
   10b9a:	460d      	mov	r5, r1
   10b9c:	4616      	mov	r6, r2
   10b9e:	4604      	mov	r4, r0
   10ba0:	f7ff f870 	bl	fc84 <DmConnIdByHandle>
   10ba4:	f7ff f8fa 	bl	fd9c <DmConnRole>
   10ba8:	b940      	cbnz	r0, 10bbc <l2cRxSignalingPkt+0x24>
   10baa:	4b07      	ldr	r3, [pc, #28]	; (10bc8 <l2cRxSignalingPkt+0x30>)
   10bac:	699b      	ldr	r3, [r3, #24]
   10bae:	b153      	cbz	r3, 10bc6 <l2cRxSignalingPkt+0x2e>
   10bb0:	4632      	mov	r2, r6
   10bb2:	4629      	mov	r1, r5
   10bb4:	4620      	mov	r0, r4
   10bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10bba:	4718      	bx	r3
   10bbc:	2801      	cmp	r0, #1
   10bbe:	d102      	bne.n	10bc6 <l2cRxSignalingPkt+0x2e>
   10bc0:	4b01      	ldr	r3, [pc, #4]	; (10bc8 <l2cRxSignalingPkt+0x30>)
   10bc2:	69db      	ldr	r3, [r3, #28]
   10bc4:	e7f3      	b.n	10bae <l2cRxSignalingPkt+0x16>
   10bc6:	bd70      	pop	{r4, r5, r6, pc}
   10bc8:	10003ed0 	.word	0x10003ed0

00010bcc <l2cMsgAlloc>:
   10bcc:	2100      	movs	r1, #0
   10bce:	f004 bb23 	b.w	15218 <WsfMsgDataAlloc>

00010bd2 <L2cInit>:
   10bd2:	4b09      	ldr	r3, [pc, #36]	; (10bf8 <L2cInit+0x26>)
   10bd4:	4a09      	ldr	r2, [pc, #36]	; (10bfc <L2cInit+0x2a>)
   10bd6:	490a      	ldr	r1, [pc, #40]	; (10c00 <L2cInit+0x2e>)
   10bd8:	480a      	ldr	r0, [pc, #40]	; (10c04 <L2cInit+0x32>)
   10bda:	e9c3 2200 	strd	r2, r2, [r3]
   10bde:	4a0a      	ldr	r2, [pc, #40]	; (10c08 <L2cInit+0x36>)
   10be0:	609a      	str	r2, [r3, #8]
   10be2:	4a0a      	ldr	r2, [pc, #40]	; (10c0c <L2cInit+0x3a>)
   10be4:	615a      	str	r2, [r3, #20]
   10be6:	e9c3 2203 	strd	r2, r2, [r3, #12]
   10bea:	4a09      	ldr	r2, [pc, #36]	; (10c10 <L2cInit+0x3e>)
   10bec:	621a      	str	r2, [r3, #32]
   10bee:	2201      	movs	r2, #1
   10bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   10bf4:	f003 b876 	b.w	13ce4 <HciAclRegister>
   10bf8:	10003ed0 	.word	0x10003ed0
   10bfc:	00010ae1 	.word	0x00010ae1
   10c00:	00010ae7 	.word	0x00010ae7
   10c04:	00010b21 	.word	0x00010b21
   10c08:	00010b99 	.word	0x00010b99
   10c0c:	00010ae5 	.word	0x00010ae5
   10c10:	00010ae3 	.word	0x00010ae3

00010c14 <L2cRegister>:
   10c14:	4b03      	ldr	r3, [pc, #12]	; (10c24 <L2cRegister+0x10>)
   10c16:	2804      	cmp	r0, #4
   10c18:	bf07      	ittee	eq
   10c1a:	6019      	streq	r1, [r3, #0]
   10c1c:	60da      	streq	r2, [r3, #12]
   10c1e:	6059      	strne	r1, [r3, #4]
   10c20:	611a      	strne	r2, [r3, #16]
   10c22:	4770      	bx	lr
   10c24:	10003ed0 	.word	0x10003ed0

00010c28 <L2cDataReq>:
   10c28:	b410      	push	{r4}
   10c2a:	7019      	strb	r1, [r3, #0]
   10c2c:	b2d4      	uxtb	r4, r2
   10c2e:	0a09      	lsrs	r1, r1, #8
   10c30:	7059      	strb	r1, [r3, #1]
   10c32:	1d21      	adds	r1, r4, #4
   10c34:	7099      	strb	r1, [r3, #2]
   10c36:	1d11      	adds	r1, r2, #4
   10c38:	1209      	asrs	r1, r1, #8
   10c3a:	0a12      	lsrs	r2, r2, #8
   10c3c:	7198      	strb	r0, [r3, #6]
   10c3e:	0a00      	lsrs	r0, r0, #8
   10c40:	711c      	strb	r4, [r3, #4]
   10c42:	71d8      	strb	r0, [r3, #7]
   10c44:	70d9      	strb	r1, [r3, #3]
   10c46:	715a      	strb	r2, [r3, #5]
   10c48:	4618      	mov	r0, r3
   10c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
   10c4e:	f006 b8f9 	b.w	16e44 <HciSendAclData>

00010c52 <l2cSendCmdReject>:
   10c52:	b570      	push	{r4, r5, r6, lr}
   10c54:	4605      	mov	r5, r0
   10c56:	200e      	movs	r0, #14
   10c58:	460e      	mov	r6, r1
   10c5a:	4614      	mov	r4, r2
   10c5c:	f7ff ffb6 	bl	10bcc <l2cMsgAlloc>
   10c60:	4603      	mov	r3, r0
   10c62:	b180      	cbz	r0, 10c86 <l2cSendCmdReject+0x34>
   10c64:	2201      	movs	r2, #1
   10c66:	7202      	strb	r2, [r0, #8]
   10c68:	2202      	movs	r2, #2
   10c6a:	7282      	strb	r2, [r0, #10]
   10c6c:	7304      	strb	r4, [r0, #12]
   10c6e:	2200      	movs	r2, #0
   10c70:	0a24      	lsrs	r4, r4, #8
   10c72:	72c2      	strb	r2, [r0, #11]
   10c74:	7246      	strb	r6, [r0, #9]
   10c76:	7344      	strb	r4, [r0, #13]
   10c78:	4629      	mov	r1, r5
   10c7a:	2206      	movs	r2, #6
   10c7c:	2005      	movs	r0, #5
   10c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10c82:	f7ff bfd1 	b.w	10c28 <L2cDataReq>
   10c86:	bd70      	pop	{r4, r5, r6, pc}

00010c88 <l2cSlaveRxSignalingPkt>:
   10c88:	b538      	push	{r3, r4, r5, lr}
   10c8a:	4605      	mov	r5, r0
   10c8c:	4613      	mov	r3, r2
   10c8e:	7ad0      	ldrb	r0, [r2, #11]
   10c90:	7a92      	ldrb	r2, [r2, #10]
   10c92:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   10c96:	b292      	uxth	r2, r2
   10c98:	1d10      	adds	r0, r2, #4
   10c9a:	4281      	cmp	r1, r0
   10c9c:	d116      	bne.n	10ccc <l2cSlaveRxSignalingPkt+0x44>
   10c9e:	7a19      	ldrb	r1, [r3, #8]
   10ca0:	2913      	cmp	r1, #19
   10ca2:	d10f      	bne.n	10cc4 <l2cSlaveRxSignalingPkt+0x3c>
   10ca4:	2a02      	cmp	r2, #2
   10ca6:	d111      	bne.n	10ccc <l2cSlaveRxSignalingPkt+0x44>
   10ca8:	7b5c      	ldrb	r4, [r3, #13]
   10caa:	7b19      	ldrb	r1, [r3, #12]
   10cac:	eb01 2104 	add.w	r1, r1, r4, lsl #8
   10cb0:	b28c      	uxth	r4, r1
   10cb2:	480a      	ldr	r0, [pc, #40]	; (10cdc <l2cSlaveRxSignalingPkt+0x54>)
   10cb4:	f004 fca4 	bl	15600 <WsfTimerStop>
   10cb8:	4621      	mov	r1, r4
   10cba:	4628      	mov	r0, r5
   10cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10cc0:	f7ff b8c4 	b.w	fe4c <DmL2cConnUpdateCnf>
   10cc4:	2901      	cmp	r1, #1
   10cc6:	d101      	bne.n	10ccc <l2cSlaveRxSignalingPkt+0x44>
   10cc8:	460c      	mov	r4, r1
   10cca:	e7f2      	b.n	10cb2 <l2cSlaveRxSignalingPkt+0x2a>
   10ccc:	7a59      	ldrb	r1, [r3, #9]
   10cce:	4628      	mov	r0, r5
   10cd0:	2200      	movs	r2, #0
   10cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10cd6:	f7ff bfbc 	b.w	10c52 <l2cSendCmdReject>
   10cda:	bf00      	nop
   10cdc:	10003ef8 	.word	0x10003ef8

00010ce0 <L2cSlaveInit>:
   10ce0:	4b01      	ldr	r3, [pc, #4]	; (10ce8 <L2cSlaveInit+0x8>)
   10ce2:	4a02      	ldr	r2, [pc, #8]	; (10cec <L2cSlaveInit+0xc>)
   10ce4:	61da      	str	r2, [r3, #28]
   10ce6:	4770      	bx	lr
   10ce8:	10003ed0 	.word	0x10003ed0
   10cec:	00010c89 	.word	0x00010c89

00010cf0 <L2cDmConnUpdateReq>:
   10cf0:	b570      	push	{r4, r5, r6, lr}
   10cf2:	4e1e      	ldr	r6, [pc, #120]	; (10d6c <L2cDmConnUpdateReq+0x7c>)
   10cf4:	4605      	mov	r5, r0
   10cf6:	460c      	mov	r4, r1
   10cf8:	4630      	mov	r0, r6
   10cfa:	211e      	movs	r1, #30
   10cfc:	f004 fc5a 	bl	155b4 <WsfTimerStartSec>
   10d00:	2014      	movs	r0, #20
   10d02:	8175      	strh	r5, [r6, #10]
   10d04:	f7ff ff62 	bl	10bcc <l2cMsgAlloc>
   10d08:	4603      	mov	r3, r0
   10d0a:	b368      	cbz	r0, 10d68 <L2cDmConnUpdateReq+0x78>
   10d0c:	4918      	ldr	r1, [pc, #96]	; (10d70 <L2cDmConnUpdateReq+0x80>)
   10d0e:	2212      	movs	r2, #18
   10d10:	7202      	strb	r2, [r0, #8]
   10d12:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10d16:	7242      	strb	r2, [r0, #9]
   10d18:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10d1c:	2aff      	cmp	r2, #255	; 0xff
   10d1e:	bf1a      	itte	ne
   10d20:	3201      	addne	r2, #1
   10d22:	b2d2      	uxtbne	r2, r2
   10d24:	2201      	moveq	r2, #1
   10d26:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   10d2a:	2208      	movs	r2, #8
   10d2c:	7282      	strb	r2, [r0, #10]
   10d2e:	2200      	movs	r2, #0
   10d30:	72c2      	strb	r2, [r0, #11]
   10d32:	8822      	ldrh	r2, [r4, #0]
   10d34:	7302      	strb	r2, [r0, #12]
   10d36:	8822      	ldrh	r2, [r4, #0]
   10d38:	0a12      	lsrs	r2, r2, #8
   10d3a:	7342      	strb	r2, [r0, #13]
   10d3c:	8862      	ldrh	r2, [r4, #2]
   10d3e:	7382      	strb	r2, [r0, #14]
   10d40:	8862      	ldrh	r2, [r4, #2]
   10d42:	0a12      	lsrs	r2, r2, #8
   10d44:	73c2      	strb	r2, [r0, #15]
   10d46:	88a2      	ldrh	r2, [r4, #4]
   10d48:	7402      	strb	r2, [r0, #16]
   10d4a:	88a2      	ldrh	r2, [r4, #4]
   10d4c:	0a12      	lsrs	r2, r2, #8
   10d4e:	7442      	strb	r2, [r0, #17]
   10d50:	88e2      	ldrh	r2, [r4, #6]
   10d52:	7482      	strb	r2, [r0, #18]
   10d54:	88e2      	ldrh	r2, [r4, #6]
   10d56:	0a12      	lsrs	r2, r2, #8
   10d58:	74c2      	strb	r2, [r0, #19]
   10d5a:	4629      	mov	r1, r5
   10d5c:	220c      	movs	r2, #12
   10d5e:	2005      	movs	r0, #5
   10d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10d64:	f7ff bf60 	b.w	10c28 <L2cDataReq>
   10d68:	bd70      	pop	{r4, r5, r6, pc}
   10d6a:	bf00      	nop
   10d6c:	10003ef8 	.word	0x10003ef8
   10d70:	10003ed0 	.word	0x10003ed0

00010d74 <L2cSlaveHandlerInit>:
   10d74:	4b02      	ldr	r3, [pc, #8]	; (10d80 <L2cSlaveHandlerInit+0xc>)
   10d76:	2201      	movs	r2, #1
   10d78:	731a      	strb	r2, [r3, #12]
   10d7a:	7218      	strb	r0, [r3, #8]
   10d7c:	7418      	strb	r0, [r3, #16]
   10d7e:	4770      	bx	lr
   10d80:	10003ef8 	.word	0x10003ef8

00010d84 <L2cSlaveHandler>:
   10d84:	460b      	mov	r3, r1
   10d86:	b129      	cbz	r1, 10d94 <L2cSlaveHandler+0x10>
   10d88:	7889      	ldrb	r1, [r1, #2]
   10d8a:	2901      	cmp	r1, #1
   10d8c:	d102      	bne.n	10d94 <L2cSlaveHandler+0x10>
   10d8e:	8818      	ldrh	r0, [r3, #0]
   10d90:	f7ff b85c 	b.w	fe4c <DmL2cConnUpdateCnf>
   10d94:	4770      	bx	lr
   10d96:	bf00      	nop

00010d98 <smpDmConnCback>:
   10d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10d9a:	4605      	mov	r5, r0
   10d9c:	8803      	ldrh	r3, [r0, #0]
   10d9e:	78aa      	ldrb	r2, [r5, #2]
   10da0:	4e23      	ldr	r6, [pc, #140]	; (10e30 <smpDmConnCback+0x98>)
   10da2:	b2d8      	uxtb	r0, r3
   10da4:	2a27      	cmp	r2, #39	; 0x27
   10da6:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   10daa:	d120      	bne.n	10dee <smpDmConnCback+0x56>
   10dac:	f7fe fff6 	bl	fd9c <DmConnRole>
   10db0:	2338      	movs	r3, #56	; 0x38
   10db2:	fb03 6304 	mla	r3, r3, r4, r6
   10db6:	b9a8      	cbnz	r0, 10de4 <smpDmConnCback+0x4c>
   10db8:	2201      	movs	r2, #1
   10dba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   10dbe:	220b      	movs	r2, #11
   10dc0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   10dc4:	2338      	movs	r3, #56	; 0x38
   10dc6:	fb03 6404 	mla	r4, r3, r4, r6
   10dca:	88eb      	ldrh	r3, [r5, #6]
   10dcc:	8523      	strh	r3, [r4, #40]	; 0x28
   10dce:	882b      	ldrh	r3, [r5, #0]
   10dd0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   10dd4:	2300      	movs	r3, #0
   10dd6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   10dda:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10dde:	8663      	strh	r3, [r4, #50]	; 0x32
   10de0:	b002      	add	sp, #8
   10de2:	bd70      	pop	{r4, r5, r6, pc}
   10de4:	2200      	movs	r2, #0
   10de6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   10dea:	2201      	movs	r2, #1
   10dec:	e7e8      	b.n	10dc0 <smpDmConnCback+0x28>
   10dee:	2138      	movs	r1, #56	; 0x38
   10df0:	fb01 6404 	mla	r4, r1, r4, r6
   10df4:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   10df8:	2900      	cmp	r1, #0
   10dfa:	d0f1      	beq.n	10de0 <smpDmConnCback+0x48>
   10dfc:	2a28      	cmp	r2, #40	; 0x28
   10dfe:	d1ef      	bne.n	10de0 <smpDmConnCback+0x48>
   10e00:	f8ad 3004 	strh.w	r3, [sp, #4]
   10e04:	230a      	movs	r3, #10
   10e06:	f88d 3006 	strb.w	r3, [sp, #6]
   10e0a:	7a2b      	ldrb	r3, [r5, #8]
   10e0c:	4620      	mov	r0, r4
   10e0e:	3320      	adds	r3, #32
   10e10:	a901      	add	r1, sp, #4
   10e12:	f88d 3007 	strb.w	r3, [sp, #7]
   10e16:	f001 fbc4 	bl	125a2 <smpSmExecute>
   10e1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10e1c:	2500      	movs	r5, #0
   10e1e:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
   10e22:	2800      	cmp	r0, #0
   10e24:	d0dc      	beq.n	10de0 <smpDmConnCback+0x48>
   10e26:	f004 fa23 	bl	15270 <WsfMsgFree>
   10e2a:	6265      	str	r5, [r4, #36]	; 0x24
   10e2c:	e7d8      	b.n	10de0 <smpDmConnCback+0x48>
   10e2e:	bf00      	nop
   10e30:	10003f0c 	.word	0x10003f0c

00010e34 <smpCcbByHandle>:
   10e34:	b508      	push	{r3, lr}
   10e36:	f7fe ff25 	bl	fc84 <DmConnIdByHandle>
   10e3a:	b120      	cbz	r0, 10e46 <smpCcbByHandle+0x12>
   10e3c:	4b02      	ldr	r3, [pc, #8]	; (10e48 <smpCcbByHandle+0x14>)
   10e3e:	3801      	subs	r0, #1
   10e40:	2238      	movs	r2, #56	; 0x38
   10e42:	fb02 3000 	mla	r0, r2, r0, r3
   10e46:	bd08      	pop	{r3, pc}
   10e48:	10003f0c 	.word	0x10003f0c

00010e4c <smpL2cDataCback>:
   10e4c:	b530      	push	{r4, r5, lr}
   10e4e:	b087      	sub	sp, #28
   10e50:	460d      	mov	r5, r1
   10e52:	4614      	mov	r4, r2
   10e54:	f7ff ffee 	bl	10e34 <smpCcbByHandle>
   10e58:	b1d8      	cbz	r0, 10e92 <smpL2cDataCback+0x46>
   10e5a:	7a23      	ldrb	r3, [r4, #8]
   10e5c:	1e5a      	subs	r2, r3, #1
   10e5e:	2a0d      	cmp	r2, #13
   10e60:	d817      	bhi.n	10e92 <smpL2cDataCback+0x46>
   10e62:	4a10      	ldr	r2, [pc, #64]	; (10ea4 <smpL2cDataCback+0x58>)
   10e64:	5cd2      	ldrb	r2, [r2, r3]
   10e66:	42aa      	cmp	r2, r5
   10e68:	d113      	bne.n	10e92 <smpL2cDataCback+0x46>
   10e6a:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
   10e6e:	429a      	cmp	r2, r3
   10e70:	d011      	beq.n	10e96 <smpL2cDataCback+0x4a>
   10e72:	2b05      	cmp	r3, #5
   10e74:	d10d      	bne.n	10e92 <smpL2cDataCback+0x46>
   10e76:	2307      	movs	r3, #7
   10e78:	f88d 3002 	strb.w	r3, [sp, #2]
   10e7c:	7a63      	ldrb	r3, [r4, #9]
   10e7e:	f88d 3003 	strb.w	r3, [sp, #3]
   10e82:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   10e86:	f8ad 3000 	strh.w	r3, [sp]
   10e8a:	4669      	mov	r1, sp
   10e8c:	9401      	str	r4, [sp, #4]
   10e8e:	f001 fb88 	bl	125a2 <smpSmExecute>
   10e92:	b007      	add	sp, #28
   10e94:	bd30      	pop	{r4, r5, pc}
   10e96:	2a05      	cmp	r2, #5
   10e98:	d0ed      	beq.n	10e76 <smpL2cDataCback+0x2a>
   10e9a:	2306      	movs	r3, #6
   10e9c:	f88d 3002 	strb.w	r3, [sp, #2]
   10ea0:	e7ef      	b.n	10e82 <smpL2cDataCback+0x36>
   10ea2:	bf00      	nop
   10ea4:	000221b4 	.word	0x000221b4

00010ea8 <smpCcbByConnId>:
   10ea8:	4b02      	ldr	r3, [pc, #8]	; (10eb4 <smpCcbByConnId+0xc>)
   10eaa:	2238      	movs	r2, #56	; 0x38
   10eac:	3801      	subs	r0, #1
   10eae:	fb02 3000 	mla	r0, r2, r0, r3
   10eb2:	4770      	bx	lr
   10eb4:	10003f0c 	.word	0x10003f0c

00010eb8 <smpCalcC1Part1>:
   10eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10eba:	4604      	mov	r4, r0
   10ebc:	b089      	sub	sp, #36	; 0x24
   10ebe:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10ec2:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10ec6:	460f      	mov	r7, r1
   10ec8:	4615      	mov	r5, r2
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d05a      	beq.n	10f84 <smpCalcC1Part1+0xcc>
   10ece:	f7fe ff27 	bl	fd20 <DmConnLocalRpa>
   10ed2:	f003 fb8a 	bl	145ea <BdaIsZeros>
   10ed6:	2800      	cmp	r0, #0
   10ed8:	d052      	beq.n	10f80 <smpCalcC1Part1+0xc8>
   10eda:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10ede:	f7fe ff01 	bl	fce4 <DmConnLocalAddrType>
   10ee2:	4606      	mov	r6, r0
   10ee4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10ee8:	f7fe ff10 	bl	fd0c <DmConnPeerRpa>
   10eec:	f003 fb7d 	bl	145ea <BdaIsZeros>
   10ef0:	2800      	cmp	r0, #0
   10ef2:	d05f      	beq.n	10fb4 <smpCalcC1Part1+0xfc>
   10ef4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10ef8:	f7fe fee2 	bl	fcc0 <DmConnPeerAddrType>
   10efc:	462b      	mov	r3, r5
   10efe:	f10d 0112 	add.w	r1, sp, #18
   10f02:	f813 2b02 	ldrb.w	r2, [r3], #2
   10f06:	4056      	eors	r6, r2
   10f08:	786a      	ldrb	r2, [r5, #1]
   10f0a:	f88d 6010 	strb.w	r6, [sp, #16]
   10f0e:	4050      	eors	r0, r2
   10f10:	f88d 0011 	strb.w	r0, [sp, #17]
   10f14:	f105 0609 	add.w	r6, r5, #9
   10f18:	f104 0010 	add.w	r0, r4, #16
   10f1c:	f813 cb01 	ldrb.w	ip, [r3], #1
   10f20:	f810 2b01 	ldrb.w	r2, [r0], #1
   10f24:	42b3      	cmp	r3, r6
   10f26:	ea82 020c 	eor.w	r2, r2, ip
   10f2a:	f801 2b01 	strb.w	r2, [r1], #1
   10f2e:	d1f5      	bne.n	10f1c <smpCalcC1Part1+0x64>
   10f30:	f104 0017 	add.w	r0, r4, #23
   10f34:	3510      	adds	r5, #16
   10f36:	f10d 0119 	add.w	r1, sp, #25
   10f3a:	f813 6b01 	ldrb.w	r6, [r3], #1
   10f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
   10f42:	42ab      	cmp	r3, r5
   10f44:	ea82 0206 	eor.w	r2, r2, r6
   10f48:	f801 2b01 	strb.w	r2, [r1], #1
   10f4c:	d1f5      	bne.n	10f3a <smpCalcC1Part1+0x82>
   10f4e:	4a1a      	ldr	r2, [pc, #104]	; (10fb8 <smpCalcC1Part1+0x100>)
   10f50:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10f54:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10f58:	210b      	movs	r1, #11
   10f5a:	9100      	str	r1, [sp, #0]
   10f5c:	4638      	mov	r0, r7
   10f5e:	a904      	add	r1, sp, #16
   10f60:	f002 ff1c 	bl	13d9c <SecAes>
   10f64:	28ff      	cmp	r0, #255	; 0xff
   10f66:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10f6a:	d107      	bne.n	10f7c <smpCalcC1Part1+0xc4>
   10f6c:	f640 0303 	movw	r3, #2051	; 0x803
   10f70:	a903      	add	r1, sp, #12
   10f72:	4620      	mov	r0, r4
   10f74:	f8ad 300e 	strh.w	r3, [sp, #14]
   10f78:	f001 fb13 	bl	125a2 <smpSmExecute>
   10f7c:	b009      	add	sp, #36	; 0x24
   10f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f80:	2601      	movs	r6, #1
   10f82:	e7af      	b.n	10ee4 <smpCalcC1Part1+0x2c>
   10f84:	f7fe fec2 	bl	fd0c <DmConnPeerRpa>
   10f88:	f003 fb2f 	bl	145ea <BdaIsZeros>
   10f8c:	b180      	cbz	r0, 10fb0 <smpCalcC1Part1+0xf8>
   10f8e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10f92:	f7fe fe95 	bl	fcc0 <DmConnPeerAddrType>
   10f96:	4606      	mov	r6, r0
   10f98:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10f9c:	f7fe fec0 	bl	fd20 <DmConnLocalRpa>
   10fa0:	f003 fb23 	bl	145ea <BdaIsZeros>
   10fa4:	b130      	cbz	r0, 10fb4 <smpCalcC1Part1+0xfc>
   10fa6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10faa:	f7fe fe9b 	bl	fce4 <DmConnLocalAddrType>
   10fae:	e7a5      	b.n	10efc <smpCalcC1Part1+0x44>
   10fb0:	2601      	movs	r6, #1
   10fb2:	e7f1      	b.n	10f98 <smpCalcC1Part1+0xe0>
   10fb4:	2001      	movs	r0, #1
   10fb6:	e7a1      	b.n	10efc <smpCalcC1Part1+0x44>
   10fb8:	10003f0c 	.word	0x10003f0c

00010fbc <smpCalcC1Part2>:
   10fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fc0:	4604      	mov	r4, r0
   10fc2:	b088      	sub	sp, #32
   10fc4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10fc8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10fcc:	4688      	mov	r8, r1
   10fce:	4615      	mov	r5, r2
   10fd0:	2b00      	cmp	r3, #0
   10fd2:	d058      	beq.n	11086 <smpCalcC1Part2+0xca>
   10fd4:	f7fe fea4 	bl	fd20 <DmConnLocalRpa>
   10fd8:	4606      	mov	r6, r0
   10fda:	f003 fb06 	bl	145ea <BdaIsZeros>
   10fde:	b120      	cbz	r0, 10fea <smpCalcC1Part2+0x2e>
   10fe0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10fe4:	f7fe fe88 	bl	fcf8 <DmConnLocalAddr>
   10fe8:	4606      	mov	r6, r0
   10fea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10fee:	f7fe fe8d 	bl	fd0c <DmConnPeerRpa>
   10ff2:	4607      	mov	r7, r0
   10ff4:	f003 faf9 	bl	145ea <BdaIsZeros>
   10ff8:	b120      	cbz	r0, 11004 <smpCalcC1Part2+0x48>
   10ffa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10ffe:	f7fe fe69 	bl	fcd4 <DmConnPeerAddr>
   11002:	4607      	mov	r7, r0
   11004:	4628      	mov	r0, r5
   11006:	2300      	movs	r3, #0
   11008:	a904      	add	r1, sp, #16
   1100a:	f817 2b01 	ldrb.w	r2, [r7], #1
   1100e:	f810 cb01 	ldrb.w	ip, [r0], #1
   11012:	ea82 020c 	eor.w	r2, r2, ip
   11016:	545a      	strb	r2, [r3, r1]
   11018:	3301      	adds	r3, #1
   1101a:	2b06      	cmp	r3, #6
   1101c:	d1f5      	bne.n	1100a <smpCalcC1Part2+0x4e>
   1101e:	1dab      	adds	r3, r5, #6
   11020:	f105 070c 	add.w	r7, r5, #12
   11024:	f10d 0016 	add.w	r0, sp, #22
   11028:	f816 2b01 	ldrb.w	r2, [r6], #1
   1102c:	f813 cb01 	ldrb.w	ip, [r3], #1
   11030:	ea82 020c 	eor.w	r2, r2, ip
   11034:	42bb      	cmp	r3, r7
   11036:	f800 2b01 	strb.w	r2, [r0], #1
   1103a:	d1f5      	bne.n	11028 <smpCalcC1Part2+0x6c>
   1103c:	7b2b      	ldrb	r3, [r5, #12]
   1103e:	f88d 301c 	strb.w	r3, [sp, #28]
   11042:	7b6b      	ldrb	r3, [r5, #13]
   11044:	f88d 301d 	strb.w	r3, [sp, #29]
   11048:	4a1b      	ldr	r2, [pc, #108]	; (110b8 <smpCalcC1Part2+0xfc>)
   1104a:	7bab      	ldrb	r3, [r5, #14]
   1104c:	f88d 301e 	strb.w	r3, [sp, #30]
   11050:	200b      	movs	r0, #11
   11052:	7beb      	ldrb	r3, [r5, #15]
   11054:	f88d 301f 	strb.w	r3, [sp, #31]
   11058:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   1105c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11060:	9000      	str	r0, [sp, #0]
   11062:	4640      	mov	r0, r8
   11064:	f002 fe9a 	bl	13d9c <SecAes>
   11068:	28ff      	cmp	r0, #255	; 0xff
   1106a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   1106e:	d107      	bne.n	11080 <smpCalcC1Part2+0xc4>
   11070:	f640 0303 	movw	r3, #2051	; 0x803
   11074:	a903      	add	r1, sp, #12
   11076:	4620      	mov	r0, r4
   11078:	f8ad 300e 	strh.w	r3, [sp, #14]
   1107c:	f001 fa91 	bl	125a2 <smpSmExecute>
   11080:	b008      	add	sp, #32
   11082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11086:	f7fe fe41 	bl	fd0c <DmConnPeerRpa>
   1108a:	4606      	mov	r6, r0
   1108c:	f003 faad 	bl	145ea <BdaIsZeros>
   11090:	b120      	cbz	r0, 1109c <smpCalcC1Part2+0xe0>
   11092:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11096:	f7fe fe1d 	bl	fcd4 <DmConnPeerAddr>
   1109a:	4606      	mov	r6, r0
   1109c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   110a0:	f7fe fe3e 	bl	fd20 <DmConnLocalRpa>
   110a4:	4607      	mov	r7, r0
   110a6:	f003 faa0 	bl	145ea <BdaIsZeros>
   110aa:	2800      	cmp	r0, #0
   110ac:	d0aa      	beq.n	11004 <smpCalcC1Part2+0x48>
   110ae:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   110b2:	f7fe fe21 	bl	fcf8 <DmConnLocalAddr>
   110b6:	e7a4      	b.n	11002 <smpCalcC1Part2+0x46>
   110b8:	10003f0c 	.word	0x10003f0c

000110bc <smpCalcS1>:
   110bc:	b570      	push	{r4, r5, r6, lr}
   110be:	b088      	sub	sp, #32
   110c0:	4616      	mov	r6, r2
   110c2:	4604      	mov	r4, r0
   110c4:	460d      	mov	r5, r1
   110c6:	a804      	add	r0, sp, #16
   110c8:	4619      	mov	r1, r3
   110ca:	f003 fab6 	bl	1463a <Calc128Cpy64>
   110ce:	4631      	mov	r1, r6
   110d0:	a806      	add	r0, sp, #24
   110d2:	f003 fab2 	bl	1463a <Calc128Cpy64>
   110d6:	4a0c      	ldr	r2, [pc, #48]	; (11108 <smpCalcS1+0x4c>)
   110d8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   110dc:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   110e0:	210b      	movs	r1, #11
   110e2:	9100      	str	r1, [sp, #0]
   110e4:	4628      	mov	r0, r5
   110e6:	a904      	add	r1, sp, #16
   110e8:	f002 fe58 	bl	13d9c <SecAes>
   110ec:	28ff      	cmp	r0, #255	; 0xff
   110ee:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   110f2:	d107      	bne.n	11104 <smpCalcS1+0x48>
   110f4:	f640 0303 	movw	r3, #2051	; 0x803
   110f8:	a903      	add	r1, sp, #12
   110fa:	4620      	mov	r0, r4
   110fc:	f8ad 300e 	strh.w	r3, [sp, #14]
   11100:	f001 fa4f 	bl	125a2 <smpSmExecute>
   11104:	b008      	add	sp, #32
   11106:	bd70      	pop	{r4, r5, r6, pc}
   11108:	10003f0c 	.word	0x10003f0c

0001110c <smpGenerateLtk>:
   1110c:	b570      	push	{r4, r5, r6, lr}
   1110e:	6a04      	ldr	r4, [r0, #32]
   11110:	1d26      	adds	r6, r4, #4
   11112:	4605      	mov	r5, r0
   11114:	f894 1020 	ldrb.w	r1, [r4, #32]
   11118:	4630      	mov	r0, r6
   1111a:	f003 fa11 	bl	14540 <SecRand>
   1111e:	f894 0020 	ldrb.w	r0, [r4, #32]
   11122:	2100      	movs	r1, #0
   11124:	f1c0 0210 	rsb	r2, r0, #16
   11128:	4430      	add	r0, r6
   1112a:	f7fb f917 	bl	c35c <memset>
   1112e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   11132:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   11136:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1113a:	4622      	mov	r2, r4
   1113c:	83a3      	strh	r3, [r4, #28]
   1113e:	f852 3f32 	ldr.w	r3, [r2, #50]!
   11142:	6163      	str	r3, [r4, #20]
   11144:	6853      	ldr	r3, [r2, #4]
   11146:	61a3      	str	r3, [r4, #24]
   11148:	2301      	movs	r3, #1
   1114a:	77a3      	strb	r3, [r4, #30]
   1114c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   11150:	f013 0f04 	tst.w	r3, #4
   11154:	bf14      	ite	ne
   11156:	2302      	movne	r3, #2
   11158:	2301      	moveq	r3, #1
   1115a:	77e3      	strb	r3, [r4, #31]
   1115c:	232f      	movs	r3, #47	; 0x2f
   1115e:	70a3      	strb	r3, [r4, #2]
   11160:	4620      	mov	r0, r4
   11162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11166:	f7ff ba85 	b.w	10674 <DmSmpCbackExec>

0001116a <smpSendPkt>:
   1116a:	b570      	push	{r4, r5, r6, lr}
   1116c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   11170:	4604      	mov	r4, r0
   11172:	460d      	mov	r5, r1
   11174:	b12b      	cbz	r3, 11182 <smpSendPkt+0x18>
   11176:	6a40      	ldr	r0, [r0, #36]	; 0x24
   11178:	b108      	cbz	r0, 1117e <smpSendPkt+0x14>
   1117a:	f004 f879 	bl	15270 <WsfMsgFree>
   1117e:	6265      	str	r5, [r4, #36]	; 0x24
   11180:	bd70      	pop	{r4, r5, r6, pc}
   11182:	7a0a      	ldrb	r2, [r1, #8]
   11184:	460b      	mov	r3, r1
   11186:	4904      	ldr	r1, [pc, #16]	; (11198 <smpSendPkt+0x2e>)
   11188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1118c:	5c8a      	ldrb	r2, [r1, r2]
   1118e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   11190:	2006      	movs	r0, #6
   11192:	f7ff bd49 	b.w	10c28 <L2cDataReq>
   11196:	bf00      	nop
   11198:	000221b4 	.word	0x000221b4

0001119c <smpL2cCtrlCback>:
   1119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1119e:	7805      	ldrb	r5, [r0, #0]
   111a0:	4f13      	ldr	r7, [pc, #76]	; (111f0 <smpL2cCtrlCback+0x54>)
   111a2:	3d01      	subs	r5, #1
   111a4:	2438      	movs	r4, #56	; 0x38
   111a6:	fb04 7405 	mla	r4, r4, r5, r7
   111aa:	4606      	mov	r6, r0
   111ac:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   111b0:	b1e2      	cbz	r2, 111ec <smpL2cCtrlCback+0x50>
   111b2:	7883      	ldrb	r3, [r0, #2]
   111b4:	2b01      	cmp	r3, #1
   111b6:	bf0c      	ite	eq
   111b8:	2301      	moveq	r3, #1
   111ba:	2300      	movne	r3, #0
   111bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   111c0:	d014      	beq.n	111ec <smpL2cCtrlCback+0x50>
   111c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   111c4:	b121      	cbz	r1, 111d0 <smpL2cCtrlCback+0x34>
   111c6:	2300      	movs	r3, #0
   111c8:	6263      	str	r3, [r4, #36]	; 0x24
   111ca:	4620      	mov	r0, r4
   111cc:	f7ff ffcd 	bl	1116a <smpSendPkt>
   111d0:	2338      	movs	r3, #56	; 0x38
   111d2:	fb03 7505 	mla	r5, r3, r5, r7
   111d6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   111da:	b13b      	cbz	r3, 111ec <smpL2cCtrlCback+0x50>
   111dc:	230c      	movs	r3, #12
   111de:	70b3      	strb	r3, [r6, #2]
   111e0:	4631      	mov	r1, r6
   111e2:	4620      	mov	r0, r4
   111e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   111e8:	f001 b9db 	b.w	125a2 <smpSmExecute>
   111ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111ee:	bf00      	nop
   111f0:	10003f0c 	.word	0x10003f0c

000111f4 <smpStateIdle>:
   111f4:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   111f8:	fab0 f080 	clz	r0, r0
   111fc:	0940      	lsrs	r0, r0, #5
   111fe:	4770      	bx	lr

00011200 <smpMsgAlloc>:
   11200:	2100      	movs	r1, #0
   11202:	f004 b809 	b.w	15218 <WsfMsgDataAlloc>

00011206 <SmpDmMsgSend>:
   11206:	4b03      	ldr	r3, [pc, #12]	; (11214 <SmpDmMsgSend+0xe>)
   11208:	4601      	mov	r1, r0
   1120a:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   1120e:	f004 b83c 	b.w	1528a <WsfMsgSend>
   11212:	bf00      	nop
   11214:	10003f0c 	.word	0x10003f0c

00011218 <SmpDmGetStk>:
   11218:	b530      	push	{r4, r5, lr}
   1121a:	4c12      	ldr	r4, [pc, #72]	; (11264 <SmpDmGetStk+0x4c>)
   1121c:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
   11220:	3801      	subs	r0, #1
   11222:	4623      	mov	r3, r4
   11224:	b16a      	cbz	r2, 11242 <SmpDmGetStk+0x2a>
   11226:	2238      	movs	r2, #56	; 0x38
   11228:	fb02 4200 	mla	r2, r2, r0, r4
   1122c:	6b54      	ldr	r4, [r2, #52]	; 0x34
   1122e:	7825      	ldrb	r5, [r4, #0]
   11230:	b13d      	cbz	r5, 11242 <SmpDmGetStk+0x2a>
   11232:	6924      	ldr	r4, [r4, #16]
   11234:	b12c      	cbz	r4, 11242 <SmpDmGetStk+0x2a>
   11236:	2303      	movs	r3, #3
   11238:	700b      	strb	r3, [r1, #0]
   1123a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1123c:	6918      	ldr	r0, [r3, #16]
   1123e:	3010      	adds	r0, #16
   11240:	bd30      	pop	{r4, r5, pc}
   11242:	2238      	movs	r2, #56	; 0x38
   11244:	fb02 3300 	mla	r3, r2, r0, r3
   11248:	6a18      	ldr	r0, [r3, #32]
   1124a:	2800      	cmp	r0, #0
   1124c:	d0f8      	beq.n	11240 <SmpDmGetStk+0x28>
   1124e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   11252:	f012 0f04 	tst.w	r2, #4
   11256:	bf14      	ite	ne
   11258:	2202      	movne	r2, #2
   1125a:	2201      	moveq	r2, #1
   1125c:	700a      	strb	r2, [r1, #0]
   1125e:	6a18      	ldr	r0, [r3, #32]
   11260:	3020      	adds	r0, #32
   11262:	e7ed      	b.n	11240 <SmpDmGetStk+0x28>
   11264:	10003f0c 	.word	0x10003f0c

00011268 <SmpDmGetLtk>:
   11268:	4a05      	ldr	r2, [pc, #20]	; (11280 <SmpDmGetLtk+0x18>)
   1126a:	1e43      	subs	r3, r0, #1
   1126c:	f892 01d4 	ldrb.w	r0, [r2, #468]	; 0x1d4
   11270:	b128      	cbz	r0, 1127e <SmpDmGetLtk+0x16>
   11272:	2038      	movs	r0, #56	; 0x38
   11274:	fb00 2003 	mla	r0, r0, r3, r2
   11278:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1127a:	6918      	ldr	r0, [r3, #16]
   1127c:	3010      	adds	r0, #16
   1127e:	4770      	bx	lr
   11280:	10003f0c 	.word	0x10003f0c

00011284 <SmpHandlerInit>:
   11284:	b508      	push	{r3, lr}
   11286:	4b0d      	ldr	r3, [pc, #52]	; (112bc <SmpHandlerInit+0x38>)
   11288:	2201      	movs	r2, #1
   1128a:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
   1128e:	3338      	adds	r3, #56	; 0x38
   11290:	f823 2c2e 	strh.w	r2, [r3, #-46]
   11294:	3201      	adds	r2, #1
   11296:	b292      	uxth	r2, r2
   11298:	2a09      	cmp	r2, #9
   1129a:	f803 0c30 	strb.w	r0, [r3, #-48]
   1129e:	f103 0338 	add.w	r3, r3, #56	; 0x38
   112a2:	d1f5      	bne.n	11290 <SmpHandlerInit+0xc>
   112a4:	4906      	ldr	r1, [pc, #24]	; (112c0 <SmpHandlerInit+0x3c>)
   112a6:	4a07      	ldr	r2, [pc, #28]	; (112c4 <SmpHandlerInit+0x40>)
   112a8:	2006      	movs	r0, #6
   112aa:	f7ff fcb3 	bl	10c14 <L2cRegister>
   112ae:	4906      	ldr	r1, [pc, #24]	; (112c8 <SmpHandlerInit+0x44>)
   112b0:	2001      	movs	r0, #1
   112b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   112b6:	f7fe bbcf 	b.w	fa58 <DmConnRegister>
   112ba:	bf00      	nop
   112bc:	10003f0c 	.word	0x10003f0c
   112c0:	00010e4d 	.word	0x00010e4d
   112c4:	0001119d 	.word	0x0001119d
   112c8:	00010d99 	.word	0x00010d99

000112cc <SmpHandler>:
   112cc:	b410      	push	{r4}
   112ce:	b1b9      	cbz	r1, 11300 <SmpHandler+0x34>
   112d0:	780b      	ldrb	r3, [r1, #0]
   112d2:	480d      	ldr	r0, [pc, #52]	; (11308 <SmpHandler+0x3c>)
   112d4:	3b01      	subs	r3, #1
   112d6:	2238      	movs	r2, #56	; 0x38
   112d8:	fb02 0203 	mla	r2, r2, r3, r0
   112dc:	f892 402d 	ldrb.w	r4, [r2, #45]	; 0x2d
   112e0:	b174      	cbz	r4, 11300 <SmpHandler+0x34>
   112e2:	788c      	ldrb	r4, [r1, #2]
   112e4:	2c0b      	cmp	r4, #11
   112e6:	d104      	bne.n	112f2 <SmpHandler+0x26>
   112e8:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
   112ec:	78ca      	ldrb	r2, [r1, #3]
   112ee:	4294      	cmp	r4, r2
   112f0:	d106      	bne.n	11300 <SmpHandler+0x34>
   112f2:	2238      	movs	r2, #56	; 0x38
   112f4:	fb02 0003 	mla	r0, r2, r3, r0
   112f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   112fc:	f001 b951 	b.w	125a2 <smpSmExecute>
   11300:	f85d 4b04 	ldr.w	r4, [sp], #4
   11304:	4770      	bx	lr
   11306:	bf00      	nop
   11308:	10003f0c 	.word	0x10003f0c

0001130c <SmpDmEncryptInd>:
   1130c:	78c3      	ldrb	r3, [r0, #3]
   1130e:	2b00      	cmp	r3, #0
   11310:	bf0c      	ite	eq
   11312:	2308      	moveq	r3, #8
   11314:	2309      	movne	r3, #9
   11316:	4601      	mov	r1, r0
   11318:	7083      	strb	r3, [r0, #2]
   1131a:	2000      	movs	r0, #0
   1131c:	f7ff bfd6 	b.w	112cc <SmpHandler>

00011320 <SmpScAllocScratchBuffers>:
   11320:	b538      	push	{r3, r4, r5, lr}
   11322:	6b45      	ldr	r5, [r0, #52]	; 0x34
   11324:	68eb      	ldr	r3, [r5, #12]
   11326:	4604      	mov	r4, r0
   11328:	b91b      	cbnz	r3, 11332 <SmpScAllocScratchBuffers+0x12>
   1132a:	2060      	movs	r0, #96	; 0x60
   1132c:	f003 fefa 	bl	15124 <WsfBufAlloc>
   11330:	60e8      	str	r0, [r5, #12]
   11332:	6b65      	ldr	r5, [r4, #52]	; 0x34
   11334:	68ab      	ldr	r3, [r5, #8]
   11336:	b91b      	cbnz	r3, 11340 <SmpScAllocScratchBuffers+0x20>
   11338:	2040      	movs	r0, #64	; 0x40
   1133a:	f003 fef3 	bl	15124 <WsfBufAlloc>
   1133e:	60a8      	str	r0, [r5, #8]
   11340:	6b65      	ldr	r5, [r4, #52]	; 0x34
   11342:	692b      	ldr	r3, [r5, #16]
   11344:	b91b      	cbnz	r3, 1134e <SmpScAllocScratchBuffers+0x2e>
   11346:	2020      	movs	r0, #32
   11348:	f003 feec 	bl	15124 <WsfBufAlloc>
   1134c:	6128      	str	r0, [r5, #16]
   1134e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11350:	68d8      	ldr	r0, [r3, #12]
   11352:	b128      	cbz	r0, 11360 <SmpScAllocScratchBuffers+0x40>
   11354:	6898      	ldr	r0, [r3, #8]
   11356:	b118      	cbz	r0, 11360 <SmpScAllocScratchBuffers+0x40>
   11358:	6918      	ldr	r0, [r3, #16]
   1135a:	3000      	adds	r0, #0
   1135c:	bf18      	it	ne
   1135e:	2001      	movne	r0, #1
   11360:	bd38      	pop	{r3, r4, r5, pc}

00011362 <SmpScFreeScratchBuffers>:
   11362:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11364:	b510      	push	{r4, lr}
   11366:	4604      	mov	r4, r0
   11368:	68d8      	ldr	r0, [r3, #12]
   1136a:	b120      	cbz	r0, 11376 <SmpScFreeScratchBuffers+0x14>
   1136c:	f003 ff1a 	bl	151a4 <WsfBufFree>
   11370:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11372:	2200      	movs	r2, #0
   11374:	60da      	str	r2, [r3, #12]
   11376:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11378:	6898      	ldr	r0, [r3, #8]
   1137a:	b120      	cbz	r0, 11386 <SmpScFreeScratchBuffers+0x24>
   1137c:	f003 ff12 	bl	151a4 <WsfBufFree>
   11380:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11382:	2200      	movs	r2, #0
   11384:	609a      	str	r2, [r3, #8]
   11386:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11388:	6918      	ldr	r0, [r3, #16]
   1138a:	b120      	cbz	r0, 11396 <SmpScFreeScratchBuffers+0x34>
   1138c:	f003 ff0a 	bl	151a4 <WsfBufFree>
   11390:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11392:	2200      	movs	r2, #0
   11394:	611a      	str	r2, [r3, #16]
   11396:	bd10      	pop	{r4, pc}

00011398 <SmpScCmac>:
   11398:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1139a:	461c      	mov	r4, r3
   1139c:	4b0b      	ldr	r3, [pc, #44]	; (113cc <SmpScCmac+0x34>)
   1139e:	9d06      	ldr	r5, [sp, #24]
   113a0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
   113a4:	261b      	movs	r6, #27
   113a6:	9601      	str	r6, [sp, #4]
   113a8:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   113ac:	9600      	str	r6, [sp, #0]
   113ae:	f002 fecb 	bl	14148 <SecCmac>
   113b2:	b948      	cbnz	r0, 113c8 <SmpScCmac+0x30>
   113b4:	f640 0303 	movw	r3, #2051	; 0x803
   113b8:	4629      	mov	r1, r5
   113ba:	4620      	mov	r0, r4
   113bc:	806b      	strh	r3, [r5, #2]
   113be:	b002      	add	sp, #8
   113c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   113c4:	f001 b8ed 	b.w	125a2 <smpSmExecute>
   113c8:	b002      	add	sp, #8
   113ca:	bd70      	pop	{r4, r5, r6, pc}
   113cc:	10003f0c 	.word	0x10003f0c

000113d0 <SmpScAlloc>:
   113d0:	b570      	push	{r4, r5, r6, lr}
   113d2:	460e      	mov	r6, r1
   113d4:	4615      	mov	r5, r2
   113d6:	f003 fea5 	bl	15124 <WsfBufAlloc>
   113da:	4604      	mov	r4, r0
   113dc:	b930      	cbnz	r0, 113ec <SmpScAlloc+0x1c>
   113de:	f640 0303 	movw	r3, #2051	; 0x803
   113e2:	806b      	strh	r3, [r5, #2]
   113e4:	4629      	mov	r1, r5
   113e6:	4630      	mov	r0, r6
   113e8:	f001 f8db 	bl	125a2 <smpSmExecute>
   113ec:	4620      	mov	r0, r4
   113ee:	bd70      	pop	{r4, r5, r6, pc}

000113f0 <SmpScFree>:
   113f0:	f003 bed8 	b.w	151a4 <WsfBufFree>

000113f4 <SmpScCalcF4>:
   113f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   113f8:	4606      	mov	r6, r0
   113fa:	460f      	mov	r7, r1
   113fc:	4615      	mov	r5, r2
   113fe:	460a      	mov	r2, r1
   11400:	4601      	mov	r1, r0
   11402:	2041      	movs	r0, #65	; 0x41
   11404:	461c      	mov	r4, r3
   11406:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1140a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   1140e:	f7ff ffdf 	bl	113d0 <SmpScAlloc>
   11412:	4601      	mov	r1, r0
   11414:	b1f0      	cbz	r0, 11454 <SmpScCalcF4+0x60>
   11416:	4603      	mov	r3, r0
   11418:	462a      	mov	r2, r5
   1141a:	f105 0020 	add.w	r0, r5, #32
   1141e:	f852 5b04 	ldr.w	r5, [r2], #4
   11422:	f843 5b04 	str.w	r5, [r3], #4
   11426:	4282      	cmp	r2, r0
   11428:	d1f9      	bne.n	1141e <SmpScCalcF4+0x2a>
   1142a:	4623      	mov	r3, r4
   1142c:	f101 0220 	add.w	r2, r1, #32
   11430:	f104 0020 	add.w	r0, r4, #32
   11434:	f853 4b04 	ldr.w	r4, [r3], #4
   11438:	f842 4b04 	str.w	r4, [r2], #4
   1143c:	4283      	cmp	r3, r0
   1143e:	d1f9      	bne.n	11434 <SmpScCalcF4+0x40>
   11440:	f881 9040 	strb.w	r9, [r1, #64]	; 0x40
   11444:	4633      	mov	r3, r6
   11446:	9708      	str	r7, [sp, #32]
   11448:	4640      	mov	r0, r8
   1144a:	2241      	movs	r2, #65	; 0x41
   1144c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11450:	f7ff bfa2 	b.w	11398 <SmpScCmac>
   11454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011458 <SmpScInit>:
   11458:	4a13      	ldr	r2, [pc, #76]	; (114a8 <SmpScInit+0x50>)
   1145a:	4b14      	ldr	r3, [pc, #80]	; (114ac <SmpScInit+0x54>)
   1145c:	f102 0114 	add.w	r1, r2, #20
   11460:	66d9      	str	r1, [r3, #108]	; 0x6c
   11462:	f102 0128 	add.w	r1, r2, #40	; 0x28
   11466:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
   1146a:	f102 013c 	add.w	r1, r2, #60	; 0x3c
   1146e:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   11472:	f102 0150 	add.w	r1, r2, #80	; 0x50
   11476:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
   1147a:	f102 0164 	add.w	r1, r2, #100	; 0x64
   1147e:	635a      	str	r2, [r3, #52]	; 0x34
   11480:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
   11484:	f102 0178 	add.w	r1, r2, #120	; 0x78
   11488:	328c      	adds	r2, #140	; 0x8c
   1148a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
   1148e:	4a08      	ldr	r2, [pc, #32]	; (114b0 <SmpScInit+0x58>)
   11490:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   11494:	4a07      	ldr	r2, [pc, #28]	; (114b4 <SmpScInit+0x5c>)
   11496:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   1149a:	2201      	movs	r2, #1
   1149c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
   114a0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   114a4:	4770      	bx	lr
   114a6:	bf00      	nop
   114a8:	100040e4 	.word	0x100040e4
   114ac:	10003f0c 	.word	0x10003f0c
   114b0:	000117e1 	.word	0x000117e1
   114b4:	000119b9 	.word	0x000119b9

000114b8 <SmpScCat>:
   114b8:	b510      	push	{r4, lr}
   114ba:	4614      	mov	r4, r2
   114bc:	f7fa fe50 	bl	c160 <memcpy>
   114c0:	4420      	add	r0, r4
   114c2:	bd10      	pop	{r4, pc}

000114c4 <SmpScCat128>:
   114c4:	b510      	push	{r4, lr}
   114c6:	4604      	mov	r4, r0
   114c8:	f003 f8a9 	bl	1461e <Calc128Cpy>
   114cc:	f104 0010 	add.w	r0, r4, #16
   114d0:	bd10      	pop	{r4, pc}

000114d2 <smpScSendPubKey>:
   114d2:	b570      	push	{r4, r5, r6, lr}
   114d4:	2201      	movs	r2, #1
   114d6:	4605      	mov	r5, r0
   114d8:	460e      	mov	r6, r1
   114da:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   114de:	4611      	mov	r1, r2
   114e0:	f7fe fc32 	bl	fd48 <DmConnSetIdle>
   114e4:	4628      	mov	r0, r5
   114e6:	f000 fe49 	bl	1217c <smpStartRspTimer>
   114ea:	2049      	movs	r0, #73	; 0x49
   114ec:	f7ff fe88 	bl	11200 <smpMsgAlloc>
   114f0:	4604      	mov	r4, r0
   114f2:	b1b8      	cbz	r0, 11524 <smpScSendPubKey+0x52>
   114f4:	230c      	movs	r3, #12
   114f6:	7203      	strb	r3, [r0, #8]
   114f8:	f7ff fa70 	bl	109dc <DmSecGetEccKey>
   114fc:	2220      	movs	r2, #32
   114fe:	4601      	mov	r1, r0
   11500:	f104 0009 	add.w	r0, r4, #9
   11504:	f003 f8c6 	bl	14694 <WStrReverseCpy>
   11508:	f7ff fa68 	bl	109dc <DmSecGetEccKey>
   1150c:	2220      	movs	r2, #32
   1150e:	1881      	adds	r1, r0, r2
   11510:	f104 0029 	add.w	r0, r4, #41	; 0x29
   11514:	f003 f8be 	bl	14694 <WStrReverseCpy>
   11518:	4621      	mov	r1, r4
   1151a:	4628      	mov	r0, r5
   1151c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11520:	f7ff be23 	b.w	1116a <smpSendPkt>
   11524:	f640 0303 	movw	r3, #2051	; 0x803
   11528:	8073      	strh	r3, [r6, #2]
   1152a:	4631      	mov	r1, r6
   1152c:	4628      	mov	r0, r5
   1152e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11532:	f001 b836 	b.w	125a2 <smpSmExecute>

00011536 <smpScSendDHKeyCheck>:
   11536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11538:	4617      	mov	r7, r2
   1153a:	2201      	movs	r2, #1
   1153c:	4604      	mov	r4, r0
   1153e:	460e      	mov	r6, r1
   11540:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11544:	4611      	mov	r1, r2
   11546:	f7fe fbff 	bl	fd48 <DmConnSetIdle>
   1154a:	4620      	mov	r0, r4
   1154c:	f000 fe16 	bl	1217c <smpStartRspTimer>
   11550:	2019      	movs	r0, #25
   11552:	f7ff fe55 	bl	11200 <smpMsgAlloc>
   11556:	4605      	mov	r5, r0
   11558:	b160      	cbz	r0, 11574 <smpScSendDHKeyCheck+0x3e>
   1155a:	230d      	movs	r3, #13
   1155c:	7203      	strb	r3, [r0, #8]
   1155e:	4639      	mov	r1, r7
   11560:	3009      	adds	r0, #9
   11562:	2210      	movs	r2, #16
   11564:	f003 f896 	bl	14694 <WStrReverseCpy>
   11568:	4629      	mov	r1, r5
   1156a:	4620      	mov	r0, r4
   1156c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11570:	f7ff bdfb 	b.w	1116a <smpSendPkt>
   11574:	f640 0303 	movw	r3, #2051	; 0x803
   11578:	8073      	strh	r3, [r6, #2]
   1157a:	4631      	mov	r1, r6
   1157c:	4620      	mov	r0, r4
   1157e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11582:	f001 b80e 	b.w	125a2 <smpSmExecute>

00011586 <smpScSendRand>:
   11586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11588:	4617      	mov	r7, r2
   1158a:	2201      	movs	r2, #1
   1158c:	4604      	mov	r4, r0
   1158e:	460e      	mov	r6, r1
   11590:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11594:	4611      	mov	r1, r2
   11596:	f7fe fbd7 	bl	fd48 <DmConnSetIdle>
   1159a:	4620      	mov	r0, r4
   1159c:	f000 fdee 	bl	1217c <smpStartRspTimer>
   115a0:	2019      	movs	r0, #25
   115a2:	f7ff fe2d 	bl	11200 <smpMsgAlloc>
   115a6:	4605      	mov	r5, r0
   115a8:	b160      	cbz	r0, 115c4 <smpScSendRand+0x3e>
   115aa:	2304      	movs	r3, #4
   115ac:	7203      	strb	r3, [r0, #8]
   115ae:	4639      	mov	r1, r7
   115b0:	3009      	adds	r0, #9
   115b2:	2210      	movs	r2, #16
   115b4:	f003 f86e 	bl	14694 <WStrReverseCpy>
   115b8:	4629      	mov	r1, r5
   115ba:	4620      	mov	r0, r4
   115bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   115c0:	f7ff bdd3 	b.w	1116a <smpSendPkt>
   115c4:	f640 0303 	movw	r3, #2051	; 0x803
   115c8:	8073      	strh	r3, [r6, #2]
   115ca:	4631      	mov	r1, r6
   115cc:	4620      	mov	r0, r4
   115ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   115d2:	f000 bfe6 	b.w	125a2 <smpSmExecute>

000115d6 <smpScSendPairCnf>:
   115d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115d8:	4617      	mov	r7, r2
   115da:	2201      	movs	r2, #1
   115dc:	4604      	mov	r4, r0
   115de:	460e      	mov	r6, r1
   115e0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   115e4:	4611      	mov	r1, r2
   115e6:	f7fe fbaf 	bl	fd48 <DmConnSetIdle>
   115ea:	4620      	mov	r0, r4
   115ec:	f000 fdc6 	bl	1217c <smpStartRspTimer>
   115f0:	2019      	movs	r0, #25
   115f2:	f7ff fe05 	bl	11200 <smpMsgAlloc>
   115f6:	4605      	mov	r5, r0
   115f8:	b160      	cbz	r0, 11614 <smpScSendPairCnf+0x3e>
   115fa:	2303      	movs	r3, #3
   115fc:	7203      	strb	r3, [r0, #8]
   115fe:	4639      	mov	r1, r7
   11600:	3009      	adds	r0, #9
   11602:	2210      	movs	r2, #16
   11604:	f003 f846 	bl	14694 <WStrReverseCpy>
   11608:	4629      	mov	r1, r5
   1160a:	4620      	mov	r0, r4
   1160c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11610:	f7ff bdab 	b.w	1116a <smpSendPkt>
   11614:	f640 0303 	movw	r3, #2051	; 0x803
   11618:	8073      	strh	r3, [r6, #2]
   1161a:	4631      	mov	r1, r6
   1161c:	4620      	mov	r0, r4
   1161e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11622:	f000 bfbe 	b.w	125a2 <smpSmExecute>

00011626 <smpGetPkBit>:
   11626:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11628:	78da      	ldrb	r2, [r3, #3]
   1162a:	68d9      	ldr	r1, [r3, #12]
   1162c:	08d3      	lsrs	r3, r2, #3
   1162e:	f1c3 030f 	rsb	r3, r3, #15
   11632:	fa51 f383 	uxtab	r3, r1, r3
   11636:	f002 0207 	and.w	r2, r2, #7
   1163a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1163e:	fa43 f202 	asr.w	r2, r3, r2
   11642:	f012 0f01 	tst.w	r2, #1
   11646:	bf14      	ite	ne
   11648:	2081      	movne	r0, #129	; 0x81
   1164a:	2080      	moveq	r0, #128	; 0x80
   1164c:	4770      	bx	lr

0001164e <smpGetPeerPublicKey>:
   1164e:	b508      	push	{r3, lr}
   11650:	f7ff fc2a 	bl	10ea8 <smpCcbByConnId>
   11654:	6b40      	ldr	r0, [r0, #52]	; 0x34
   11656:	b100      	cbz	r0, 1165a <smpGetPeerPublicKey+0xc>
   11658:	6880      	ldr	r0, [r0, #8]
   1165a:	bd08      	pop	{r3, pc}

0001165c <smpSetPeerPublicKey>:
   1165c:	b510      	push	{r4, lr}
   1165e:	460c      	mov	r4, r1
   11660:	f7ff fc22 	bl	10ea8 <smpCcbByConnId>
   11664:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11666:	b14b      	cbz	r3, 1167c <smpSetPeerPublicKey+0x20>
   11668:	689b      	ldr	r3, [r3, #8]
   1166a:	4621      	mov	r1, r4
   1166c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   11670:	f851 0b04 	ldr.w	r0, [r1], #4
   11674:	f843 0b04 	str.w	r0, [r3], #4
   11678:	4291      	cmp	r1, r2
   1167a:	d1f9      	bne.n	11670 <smpSetPeerPublicKey+0x14>
   1167c:	bd10      	pop	{r4, pc}

0001167e <SmpScSetOobCfg>:
   1167e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11680:	460d      	mov	r5, r1
   11682:	f7ff fc11 	bl	10ea8 <smpCcbByConnId>
   11686:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   1168a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1168c:	4604      	mov	r4, r0
   1168e:	f105 0110 	add.w	r1, r5, #16
   11692:	f105 0730 	add.w	r7, r5, #48	; 0x30
   11696:	f105 0620 	add.w	r6, r5, #32
   1169a:	68d8      	ldr	r0, [r3, #12]
   1169c:	b1b2      	cbz	r2, 116cc <SmpScSetOobCfg+0x4e>
   1169e:	3050      	adds	r0, #80	; 0x50
   116a0:	f002 ffbd 	bl	1461e <Calc128Cpy>
   116a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116a6:	68d8      	ldr	r0, [r3, #12]
   116a8:	4629      	mov	r1, r5
   116aa:	3020      	adds	r0, #32
   116ac:	f002 ffb7 	bl	1461e <Calc128Cpy>
   116b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116b2:	68d8      	ldr	r0, [r3, #12]
   116b4:	4639      	mov	r1, r7
   116b6:	3040      	adds	r0, #64	; 0x40
   116b8:	f002 ffb1 	bl	1461e <Calc128Cpy>
   116bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116be:	68d8      	ldr	r0, [r3, #12]
   116c0:	4631      	mov	r1, r6
   116c2:	3030      	adds	r0, #48	; 0x30
   116c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   116c8:	f002 bfa9 	b.w	1461e <Calc128Cpy>
   116cc:	3040      	adds	r0, #64	; 0x40
   116ce:	f002 ffa6 	bl	1461e <Calc128Cpy>
   116d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116d4:	68d8      	ldr	r0, [r3, #12]
   116d6:	4629      	mov	r1, r5
   116d8:	3030      	adds	r0, #48	; 0x30
   116da:	f002 ffa0 	bl	1461e <Calc128Cpy>
   116de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116e0:	68d8      	ldr	r0, [r3, #12]
   116e2:	4639      	mov	r1, r7
   116e4:	3050      	adds	r0, #80	; 0x50
   116e6:	f002 ff9a 	bl	1461e <Calc128Cpy>
   116ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116ec:	68d8      	ldr	r0, [r3, #12]
   116ee:	4631      	mov	r1, r6
   116f0:	3020      	adds	r0, #32
   116f2:	e7e7      	b.n	116c4 <SmpScSetOobCfg+0x46>

000116f4 <smpEventStr>:
   116f4:	3801      	subs	r0, #1
   116f6:	b2c0      	uxtb	r0, r0
   116f8:	281b      	cmp	r0, #27
   116fa:	bf9a      	itte	ls
   116fc:	4b02      	ldrls	r3, [pc, #8]	; (11708 <smpEventStr+0x14>)
   116fe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   11702:	4802      	ldrhi	r0, [pc, #8]	; (1170c <smpEventStr+0x18>)
   11704:	4770      	bx	lr
   11706:	bf00      	nop
   11708:	000221c4 	.word	0x000221c4
   1170c:	00024cb7 	.word	0x00024cb7

00011710 <smpStateStr>:
   11710:	4b03      	ldr	r3, [pc, #12]	; (11720 <smpStateStr+0x10>)
   11712:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   11716:	b10b      	cbz	r3, 1171c <smpStateStr+0xc>
   11718:	f000 bbea 	b.w	11ef0 <smpiStateStr>
   1171c:	f000 bbfe 	b.w	11f1c <smprStateStr>
   11720:	10003f0c 	.word	0x10003f0c

00011724 <smpLogByteArray>:
   11724:	4770      	bx	lr
   11726:	bf00      	nop

00011728 <smpScCatInitiatorBdAddr>:
   11728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1172a:	4607      	mov	r7, r0
   1172c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11730:	460c      	mov	r4, r1
   11732:	f7fe f889 	bl	f848 <dmConnCcbById>
   11736:	4605      	mov	r5, r0
   11738:	b1b0      	cbz	r0, 11768 <smpScCatInitiatorBdAddr+0x40>
   1173a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   1173e:	1c66      	adds	r6, r4, #1
   11740:	b1a3      	cbz	r3, 1176c <smpScCatInitiatorBdAddr+0x44>
   11742:	f100 071a 	add.w	r7, r0, #26
   11746:	4638      	mov	r0, r7
   11748:	f002 ff4f 	bl	145ea <BdaIsZeros>
   1174c:	b920      	cbnz	r0, 11758 <smpScCatInitiatorBdAddr+0x30>
   1174e:	2301      	movs	r3, #1
   11750:	7023      	strb	r3, [r4, #0]
   11752:	2206      	movs	r2, #6
   11754:	4639      	mov	r1, r7
   11756:	e003      	b.n	11760 <smpScCatInitiatorBdAddr+0x38>
   11758:	7d2b      	ldrb	r3, [r5, #20]
   1175a:	7023      	strb	r3, [r4, #0]
   1175c:	2206      	movs	r2, #6
   1175e:	18a9      	adds	r1, r5, r2
   11760:	4630      	mov	r0, r6
   11762:	f002 ff97 	bl	14694 <WStrReverseCpy>
   11766:	3407      	adds	r4, #7
   11768:	4620      	mov	r0, r4
   1176a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1176c:	f100 0720 	add.w	r7, r0, #32
   11770:	4638      	mov	r0, r7
   11772:	f002 ff3a 	bl	145ea <BdaIsZeros>
   11776:	2800      	cmp	r0, #0
   11778:	d0e9      	beq.n	1174e <smpScCatInitiatorBdAddr+0x26>
   1177a:	7ceb      	ldrb	r3, [r5, #19]
   1177c:	7023      	strb	r3, [r4, #0]
   1177e:	2206      	movs	r2, #6
   11780:	4629      	mov	r1, r5
   11782:	e7ed      	b.n	11760 <smpScCatInitiatorBdAddr+0x38>

00011784 <smpScCatResponderBdAddr>:
   11784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11786:	4607      	mov	r7, r0
   11788:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1178c:	460c      	mov	r4, r1
   1178e:	f7fe f85b 	bl	f848 <dmConnCcbById>
   11792:	4605      	mov	r5, r0
   11794:	b1b0      	cbz	r0, 117c4 <smpScCatResponderBdAddr+0x40>
   11796:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   1179a:	1c66      	adds	r6, r4, #1
   1179c:	b1a3      	cbz	r3, 117c8 <smpScCatResponderBdAddr+0x44>
   1179e:	f100 0720 	add.w	r7, r0, #32
   117a2:	4638      	mov	r0, r7
   117a4:	f002 ff21 	bl	145ea <BdaIsZeros>
   117a8:	b920      	cbnz	r0, 117b4 <smpScCatResponderBdAddr+0x30>
   117aa:	2301      	movs	r3, #1
   117ac:	7023      	strb	r3, [r4, #0]
   117ae:	2206      	movs	r2, #6
   117b0:	4639      	mov	r1, r7
   117b2:	e003      	b.n	117bc <smpScCatResponderBdAddr+0x38>
   117b4:	7ceb      	ldrb	r3, [r5, #19]
   117b6:	7023      	strb	r3, [r4, #0]
   117b8:	2206      	movs	r2, #6
   117ba:	4629      	mov	r1, r5
   117bc:	4630      	mov	r0, r6
   117be:	f002 ff69 	bl	14694 <WStrReverseCpy>
   117c2:	3407      	adds	r4, #7
   117c4:	4620      	mov	r0, r4
   117c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117c8:	f100 071a 	add.w	r7, r0, #26
   117cc:	4638      	mov	r0, r7
   117ce:	f002 ff0c 	bl	145ea <BdaIsZeros>
   117d2:	2800      	cmp	r0, #0
   117d4:	d0e9      	beq.n	117aa <smpScCatResponderBdAddr+0x26>
   117d6:	7d2b      	ldrb	r3, [r5, #20]
   117d8:	7023      	strb	r3, [r4, #0]
   117da:	2206      	movs	r2, #6
   117dc:	18a9      	adds	r1, r5, r2
   117de:	e7ed      	b.n	117bc <smpScCatResponderBdAddr+0x38>

000117e0 <smpScProcPairing>:
   117e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117e2:	2300      	movs	r3, #0
   117e4:	7013      	strb	r3, [r2, #0]
   117e6:	700b      	strb	r3, [r1, #0]
   117e8:	7cc3      	ldrb	r3, [r0, #19]
   117ea:	7c85      	ldrb	r5, [r0, #18]
   117ec:	f013 0f08 	tst.w	r3, #8
   117f0:	4604      	mov	r4, r0
   117f2:	d039      	beq.n	11868 <smpScProcPairing+0x88>
   117f4:	7e83      	ldrb	r3, [r0, #26]
   117f6:	071e      	lsls	r6, r3, #28
   117f8:	d536      	bpl.n	11868 <smpScProcPairing+0x88>
   117fa:	2d01      	cmp	r5, #1
   117fc:	d002      	beq.n	11804 <smpScProcPairing+0x24>
   117fe:	7e43      	ldrb	r3, [r0, #25]
   11800:	2b01      	cmp	r3, #1
   11802:	d137      	bne.n	11874 <smpScProcPairing+0x94>
   11804:	2301      	movs	r3, #1
   11806:	700b      	strb	r3, [r1, #0]
   11808:	2500      	movs	r5, #0
   1180a:	780b      	ldrb	r3, [r1, #0]
   1180c:	b97b      	cbnz	r3, 1182e <smpScProcPairing+0x4e>
   1180e:	7ce3      	ldrb	r3, [r4, #19]
   11810:	0758      	lsls	r0, r3, #29
   11812:	d402      	bmi.n	1181a <smpScProcPairing+0x3a>
   11814:	7ea3      	ldrb	r3, [r4, #26]
   11816:	075b      	lsls	r3, r3, #29
   11818:	d509      	bpl.n	1182e <smpScProcPairing+0x4e>
   1181a:	7c60      	ldrb	r0, [r4, #17]
   1181c:	2803      	cmp	r0, #3
   1181e:	d006      	beq.n	1182e <smpScProcPairing+0x4e>
   11820:	7e23      	ldrb	r3, [r4, #24]
   11822:	2b03      	cmp	r3, #3
   11824:	d003      	beq.n	1182e <smpScProcPairing+0x4e>
   11826:	2801      	cmp	r0, #1
   11828:	d826      	bhi.n	11878 <smpScProcPairing+0x98>
   1182a:	2b01      	cmp	r3, #1
   1182c:	d83d      	bhi.n	118aa <smpScProcPairing+0xca>
   1182e:	f894 c013 	ldrb.w	ip, [r4, #19]
   11832:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11836:	f01c 0f08 	tst.w	ip, #8
   1183a:	f000 808e 	beq.w	1195a <smpScProcPairing+0x17a>
   1183e:	7ea7      	ldrb	r7, [r4, #26]
   11840:	073e      	lsls	r6, r7, #28
   11842:	f140 808a 	bpl.w	1195a <smpScProcPairing+0x17a>
   11846:	4b5a      	ldr	r3, [pc, #360]	; (119b0 <smpScProcPairing+0x1d0>)
   11848:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
   1184c:	bb7e      	cbnz	r6, 118ae <smpScProcPairing+0xce>
   1184e:	f8ad 0004 	strh.w	r0, [sp, #4]
   11852:	f240 3303 	movw	r3, #771	; 0x303
   11856:	a901      	add	r1, sp, #4
   11858:	4620      	mov	r0, r4
   1185a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1185e:	f000 fea0 	bl	125a2 <smpSmExecute>
   11862:	4630      	mov	r0, r6
   11864:	b003      	add	sp, #12
   11866:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11868:	2d01      	cmp	r5, #1
   1186a:	d103      	bne.n	11874 <smpScProcPairing+0x94>
   1186c:	7e63      	ldrb	r3, [r4, #25]
   1186e:	2b01      	cmp	r3, #1
   11870:	d1cb      	bne.n	1180a <smpScProcPairing+0x2a>
   11872:	e7c7      	b.n	11804 <smpScProcPairing+0x24>
   11874:	2501      	movs	r5, #1
   11876:	e7c8      	b.n	1180a <smpScProcPairing+0x2a>
   11878:	2804      	cmp	r0, #4
   1187a:	d114      	bne.n	118a6 <smpScProcPairing+0xc6>
   1187c:	2b02      	cmp	r3, #2
   1187e:	d014      	beq.n	118aa <smpScProcPairing+0xca>
   11880:	1f1f      	subs	r7, r3, #4
   11882:	427b      	negs	r3, r7
   11884:	417b      	adcs	r3, r7
   11886:	7013      	strb	r3, [r2, #0]
   11888:	7e20      	ldrb	r0, [r4, #24]
   1188a:	2802      	cmp	r0, #2
   1188c:	d102      	bne.n	11894 <smpScProcPairing+0xb4>
   1188e:	7c60      	ldrb	r0, [r4, #17]
   11890:	2802      	cmp	r0, #2
   11892:	d006      	beq.n	118a2 <smpScProcPairing+0xc2>
   11894:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   11898:	2800      	cmp	r0, #0
   1189a:	bf08      	it	eq
   1189c:	f083 0301 	eoreq.w	r3, r3, #1
   118a0:	7013      	strb	r3, [r2, #0]
   118a2:	2500      	movs	r5, #0
   118a4:	e7c3      	b.n	1182e <smpScProcPairing+0x4e>
   118a6:	2300      	movs	r3, #0
   118a8:	e7ed      	b.n	11886 <smpScProcPairing+0xa6>
   118aa:	2301      	movs	r3, #1
   118ac:	e7eb      	b.n	11886 <smpScProcPairing+0xa6>
   118ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   118b0:	f240 1601 	movw	r6, #257	; 0x101
   118b4:	801e      	strh	r6, [r3, #0]
   118b6:	7812      	ldrb	r2, [r2, #0]
   118b8:	711a      	strb	r2, [r3, #4]
   118ba:	780a      	ldrb	r2, [r1, #0]
   118bc:	b112      	cbz	r2, 118c4 <smpScProcPairing+0xe4>
   118be:	2202      	movs	r2, #2
   118c0:	705a      	strb	r2, [r3, #1]
   118c2:	e017      	b.n	118f4 <smpScProcPairing+0x114>
   118c4:	7e22      	ldrb	r2, [r4, #24]
   118c6:	b9fd      	cbnz	r5, 11908 <smpScProcPairing+0x128>
   118c8:	2103      	movs	r1, #3
   118ca:	2a04      	cmp	r2, #4
   118cc:	7059      	strb	r1, [r3, #1]
   118ce:	d106      	bne.n	118de <smpScProcPairing+0xfe>
   118d0:	7c62      	ldrb	r2, [r4, #17]
   118d2:	2a01      	cmp	r2, #1
   118d4:	d001      	beq.n	118da <smpScProcPairing+0xfa>
   118d6:	2a04      	cmp	r2, #4
   118d8:	d105      	bne.n	118e6 <smpScProcPairing+0x106>
   118da:	2204      	movs	r2, #4
   118dc:	e7f0      	b.n	118c0 <smpScProcPairing+0xe0>
   118de:	2a01      	cmp	r2, #1
   118e0:	d101      	bne.n	118e6 <smpScProcPairing+0x106>
   118e2:	7c62      	ldrb	r2, [r4, #17]
   118e4:	e7f7      	b.n	118d6 <smpScProcPairing+0xf6>
   118e6:	f01c 0f10 	tst.w	ip, #16
   118ea:	d003      	beq.n	118f4 <smpScProcPairing+0x114>
   118ec:	06fa      	lsls	r2, r7, #27
   118ee:	d501      	bpl.n	118f4 <smpScProcPairing+0x114>
   118f0:	2201      	movs	r2, #1
   118f2:	709a      	strb	r2, [r3, #2]
   118f4:	f8ad 0004 	strh.w	r0, [sp, #4]
   118f8:	4620      	mov	r0, r4
   118fa:	f7ff fd11 	bl	11320 <SmpScAllocScratchBuffers>
   118fe:	b148      	cbz	r0, 11914 <smpScProcPairing+0x134>
   11900:	2310      	movs	r3, #16
   11902:	f88d 3006 	strb.w	r3, [sp, #6]
   11906:	e009      	b.n	1191c <smpScProcPairing+0x13c>
   11908:	2a01      	cmp	r2, #1
   1190a:	d1f3      	bne.n	118f4 <smpScProcPairing+0x114>
   1190c:	7c62      	ldrb	r2, [r4, #17]
   1190e:	2a01      	cmp	r2, #1
   11910:	d1f0      	bne.n	118f4 <smpScProcPairing+0x114>
   11912:	e7e2      	b.n	118da <smpScProcPairing+0xfa>
   11914:	f640 0303 	movw	r3, #2051	; 0x803
   11918:	f8ad 3006 	strh.w	r3, [sp, #6]
   1191c:	a901      	add	r1, sp, #4
   1191e:	4620      	mov	r0, r4
   11920:	f000 fe3f 	bl	125a2 <smpSmExecute>
   11924:	7ce2      	ldrb	r2, [r4, #19]
   11926:	7ea1      	ldrb	r1, [r4, #26]
   11928:	ea01 0302 	and.w	r3, r1, r2
   1192c:	bb6d      	cbnz	r5, 1198a <smpScProcPairing+0x1aa>
   1192e:	f043 0304 	orr.w	r3, r3, #4
   11932:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   11936:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1193a:	2b00      	cmp	r3, #0
   1193c:	bf08      	it	eq
   1193e:	460a      	moveq	r2, r1
   11940:	4b1c      	ldr	r3, [pc, #112]	; (119b4 <smpScProcPairing+0x1d4>)
   11942:	6819      	ldr	r1, [r3, #0]
   11944:	b325      	cbz	r5, 11990 <smpScProcPairing+0x1b0>
   11946:	798b      	ldrb	r3, [r1, #6]
   11948:	f003 0304 	and.w	r3, r3, #4
   1194c:	421a      	tst	r2, r3
   1194e:	d01f      	beq.n	11990 <smpScProcPairing+0x1b0>
   11950:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11954:	f8ad 3004 	strh.w	r3, [sp, #4]
   11958:	e007      	b.n	1196a <smpScProcPairing+0x18a>
   1195a:	4b16      	ldr	r3, [pc, #88]	; (119b4 <smpScProcPairing+0x1d4>)
   1195c:	681b      	ldr	r3, [r3, #0]
   1195e:	799b      	ldrb	r3, [r3, #6]
   11960:	f013 0308 	ands.w	r3, r3, #8
   11964:	d00b      	beq.n	1197e <smpScProcPairing+0x19e>
   11966:	f8ad 0004 	strh.w	r0, [sp, #4]
   1196a:	f240 3303 	movw	r3, #771	; 0x303
   1196e:	a901      	add	r1, sp, #4
   11970:	4620      	mov	r0, r4
   11972:	f8ad 3006 	strh.w	r3, [sp, #6]
   11976:	2600      	movs	r6, #0
   11978:	f000 fe13 	bl	125a2 <smpSmExecute>
   1197c:	e771      	b.n	11862 <smpScProcPairing+0x82>
   1197e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11980:	7013      	strb	r3, [r2, #0]
   11982:	f8ad 0004 	strh.w	r0, [sp, #4]
   11986:	2311      	movs	r3, #17
   11988:	e7bb      	b.n	11902 <smpScProcPairing+0x122>
   1198a:	f023 0304 	bic.w	r3, r3, #4
   1198e:	e7d0      	b.n	11932 <smpScProcPairing+0x152>
   11990:	78cb      	ldrb	r3, [r1, #3]
   11992:	7d22      	ldrb	r2, [r4, #20]
   11994:	429a      	cmp	r2, r3
   11996:	d302      	bcc.n	1199e <smpScProcPairing+0x1be>
   11998:	7ee2      	ldrb	r2, [r4, #27]
   1199a:	429a      	cmp	r2, r3
   1199c:	d206      	bcs.n	119ac <smpScProcPairing+0x1cc>
   1199e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   119a2:	f8ad 3004 	strh.w	r3, [sp, #4]
   119a6:	f240 6303 	movw	r3, #1539	; 0x603
   119aa:	e7e0      	b.n	1196e <smpScProcPairing+0x18e>
   119ac:	2601      	movs	r6, #1
   119ae:	e758      	b.n	11862 <smpScProcPairing+0x82>
   119b0:	10003f0c 	.word	0x10003f0c
   119b4:	10002ba0 	.word	0x10002ba0

000119b8 <smpScAuthReq>:
   119b8:	b530      	push	{r4, r5, lr}
   119ba:	6b44      	ldr	r4, [r0, #52]	; 0x34
   119bc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   119c0:	7825      	ldrb	r5, [r4, #0]
   119c2:	b087      	sub	sp, #28
   119c4:	b98d      	cbnz	r5, 119ea <smpScAuthReq+0x32>
   119c6:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
   119ca:	0764      	lsls	r4, r4, #29
   119cc:	d510      	bpl.n	119f0 <smpScAuthReq+0x38>
   119ce:	f8ad 3000 	strh.w	r3, [sp]
   119d2:	4668      	mov	r0, sp
   119d4:	232e      	movs	r3, #46	; 0x2e
   119d6:	f88d 3002 	strb.w	r3, [sp, #2]
   119da:	f88d 1004 	strb.w	r1, [sp, #4]
   119de:	f88d 2005 	strb.w	r2, [sp, #5]
   119e2:	f7fe fe47 	bl	10674 <DmSmpCbackExec>
   119e6:	b007      	add	sp, #28
   119e8:	bd30      	pop	{r4, r5, pc}
   119ea:	7864      	ldrb	r4, [r4, #1]
   119ec:	2c02      	cmp	r4, #2
   119ee:	d0ee      	beq.n	119ce <smpScAuthReq+0x16>
   119f0:	f8ad 3000 	strh.w	r3, [sp]
   119f4:	2304      	movs	r3, #4
   119f6:	f88d 3002 	strb.w	r3, [sp, #2]
   119fa:	2300      	movs	r3, #0
   119fc:	f8ad 3004 	strh.w	r3, [sp, #4]
   11a00:	f88d 3006 	strb.w	r3, [sp, #6]
   11a04:	4669      	mov	r1, sp
   11a06:	2303      	movs	r3, #3
   11a08:	f88d 3014 	strb.w	r3, [sp, #20]
   11a0c:	f000 fdc9 	bl	125a2 <smpSmExecute>
   11a10:	e7e9      	b.n	119e6 <smpScAuthReq+0x2e>

00011a12 <smpScActCleanup>:
   11a12:	b510      	push	{r4, lr}
   11a14:	4604      	mov	r4, r0
   11a16:	f000 fbd1 	bl	121bc <smpActCleanup>
   11a1a:	4620      	mov	r0, r4
   11a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a20:	f7ff bc9f 	b.w	11362 <SmpScFreeScratchBuffers>

00011a24 <smpScActPairingFailed>:
   11a24:	b538      	push	{r3, r4, r5, lr}
   11a26:	4604      	mov	r4, r0
   11a28:	460d      	mov	r5, r1
   11a2a:	f7ff fff2 	bl	11a12 <smpScActCleanup>
   11a2e:	4629      	mov	r1, r5
   11a30:	4620      	mov	r0, r4
   11a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a36:	f000 bbd4 	b.w	121e2 <smpActPairingFailed>

00011a3a <smpScActPairingCancel>:
   11a3a:	b538      	push	{r3, r4, r5, lr}
   11a3c:	4605      	mov	r5, r0
   11a3e:	460c      	mov	r4, r1
   11a40:	78c9      	ldrb	r1, [r1, #3]
   11a42:	f000 fbbd 	bl	121c0 <smpSendPairingFailed>
   11a46:	4621      	mov	r1, r4
   11a48:	4628      	mov	r0, r5
   11a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a4e:	f7ff bfe9 	b.w	11a24 <smpScActPairingFailed>

00011a52 <smpScActAuthSelect>:
   11a52:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11a54:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11a56:	684d      	ldr	r5, [r1, #4]
   11a58:	4604      	mov	r4, r0
   11a5a:	2220      	movs	r2, #32
   11a5c:	6898      	ldr	r0, [r3, #8]
   11a5e:	f105 0109 	add.w	r1, r5, #9
   11a62:	f002 fe17 	bl	14694 <WStrReverseCpy>
   11a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a68:	6898      	ldr	r0, [r3, #8]
   11a6a:	2220      	movs	r2, #32
   11a6c:	f105 0129 	add.w	r1, r5, #41	; 0x29
   11a70:	4410      	add	r0, r2
   11a72:	f002 fe0f 	bl	14694 <WStrReverseCpy>
   11a76:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11a7a:	f8ad 3004 	strh.w	r3, [sp, #4]
   11a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a80:	785b      	ldrb	r3, [r3, #1]
   11a82:	3b01      	subs	r3, #1
   11a84:	2b03      	cmp	r3, #3
   11a86:	d810      	bhi.n	11aaa <smpScActAuthSelect+0x58>
   11a88:	e8df f003 	tbb	[pc, r3]
   11a8c:	020d0b02 	.word	0x020d0b02
   11a90:	2312      	movs	r3, #18
   11a92:	f88d 3006 	strb.w	r3, [sp, #6]
   11a96:	a901      	add	r1, sp, #4
   11a98:	4620      	mov	r0, r4
   11a9a:	f000 fd82 	bl	125a2 <smpSmExecute>
   11a9e:	b003      	add	sp, #12
   11aa0:	bd30      	pop	{r4, r5, pc}
   11aa2:	2314      	movs	r3, #20
   11aa4:	e7f5      	b.n	11a92 <smpScActAuthSelect+0x40>
   11aa6:	2313      	movs	r3, #19
   11aa8:	e7f3      	b.n	11a92 <smpScActAuthSelect+0x40>
   11aaa:	f640 0303 	movw	r3, #2051	; 0x803
   11aae:	f8ad 3006 	strh.w	r3, [sp, #6]
   11ab2:	e7f0      	b.n	11a96 <smpScActAuthSelect+0x44>

00011ab4 <smpScActPkSetup>:
   11ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11ab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11ab8:	2200      	movs	r2, #0
   11aba:	70da      	strb	r2, [r3, #3]
   11abc:	2103      	movs	r1, #3
   11abe:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
   11ac2:	f88d 2004 	strb.w	r2, [sp, #4]
   11ac6:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
   11aca:	f8ad 1000 	strh.w	r1, [sp]
   11ace:	791b      	ldrb	r3, [r3, #4]
   11ad0:	f88d 3005 	strb.w	r3, [sp, #5]
   11ad4:	212e      	movs	r1, #46	; 0x2e
   11ad6:	4668      	mov	r0, sp
   11ad8:	f88d 1002 	strb.w	r1, [sp, #2]
   11adc:	f7fe fdca 	bl	10674 <DmSmpCbackExec>
   11ae0:	b007      	add	sp, #28
   11ae2:	f85d fb04 	ldr.w	pc, [sp], #4

00011ae6 <smpScActJwncCalcF4>:
   11ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11ae8:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
   11aec:	4604      	mov	r4, r0
   11aee:	460d      	mov	r5, r1
   11af0:	b18e      	cbz	r6, 11b16 <smpScActJwncCalcF4+0x30>
   11af2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11af4:	689e      	ldr	r6, [r3, #8]
   11af6:	f7fe ff71 	bl	109dc <DmSecGetEccKey>
   11afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11afc:	68db      	ldr	r3, [r3, #12]
   11afe:	3310      	adds	r3, #16
   11b00:	9301      	str	r3, [sp, #4]
   11b02:	2300      	movs	r3, #0
   11b04:	9300      	str	r3, [sp, #0]
   11b06:	4632      	mov	r2, r6
   11b08:	4603      	mov	r3, r0
   11b0a:	4629      	mov	r1, r5
   11b0c:	4620      	mov	r0, r4
   11b0e:	f7ff fc71 	bl	113f4 <SmpScCalcF4>
   11b12:	b002      	add	sp, #8
   11b14:	bd70      	pop	{r4, r5, r6, pc}
   11b16:	f7fe ff61 	bl	109dc <DmSecGetEccKey>
   11b1a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11b1c:	68d3      	ldr	r3, [r2, #12]
   11b1e:	3310      	adds	r3, #16
   11b20:	e9cd 6300 	strd	r6, r3, [sp]
   11b24:	6893      	ldr	r3, [r2, #8]
   11b26:	4602      	mov	r2, r0
   11b28:	e7ef      	b.n	11b0a <smpScActJwncCalcF4+0x24>

00011b2a <smpScActJwncCalcG2>:
   11b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11b2c:	460a      	mov	r2, r1
   11b2e:	4604      	mov	r4, r0
   11b30:	460e      	mov	r6, r1
   11b32:	4601      	mov	r1, r0
   11b34:	2050      	movs	r0, #80	; 0x50
   11b36:	f7ff fc4b 	bl	113d0 <SmpScAlloc>
   11b3a:	4605      	mov	r5, r0
   11b3c:	b1d8      	cbz	r0, 11b76 <smpScActJwncCalcG2+0x4c>
   11b3e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11b42:	b1d3      	cbz	r3, 11b7a <smpScActJwncCalcG2+0x50>
   11b44:	f7fe ff4a 	bl	109dc <DmSecGetEccKey>
   11b48:	2220      	movs	r2, #32
   11b4a:	4601      	mov	r1, r0
   11b4c:	4628      	mov	r0, r5
   11b4e:	f7ff fcb3 	bl	114b8 <SmpScCat>
   11b52:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b54:	6899      	ldr	r1, [r3, #8]
   11b56:	2220      	movs	r2, #32
   11b58:	f7ff fcae 	bl	114b8 <SmpScCat>
   11b5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b5e:	68d9      	ldr	r1, [r3, #12]
   11b60:	3110      	adds	r1, #16
   11b62:	f7ff fcaf 	bl	114c4 <SmpScCat128>
   11b66:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11b68:	9600      	str	r6, [sp, #0]
   11b6a:	4623      	mov	r3, r4
   11b6c:	2250      	movs	r2, #80	; 0x50
   11b6e:	4629      	mov	r1, r5
   11b70:	68c0      	ldr	r0, [r0, #12]
   11b72:	f7ff fc11 	bl	11398 <SmpScCmac>
   11b76:	b003      	add	sp, #12
   11b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b7c:	2220      	movs	r2, #32
   11b7e:	6899      	ldr	r1, [r3, #8]
   11b80:	f7ff fc9a 	bl	114b8 <SmpScCat>
   11b84:	4607      	mov	r7, r0
   11b86:	f7fe ff29 	bl	109dc <DmSecGetEccKey>
   11b8a:	2220      	movs	r2, #32
   11b8c:	4601      	mov	r1, r0
   11b8e:	4638      	mov	r0, r7
   11b90:	e7e2      	b.n	11b58 <smpScActJwncCalcG2+0x2e>

00011b92 <smpScActJwncDisplay>:
   11b92:	b510      	push	{r4, lr}
   11b94:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11b96:	785b      	ldrb	r3, [r3, #1]
   11b98:	2b04      	cmp	r3, #4
   11b9a:	b086      	sub	sp, #24
   11b9c:	4604      	mov	r4, r0
   11b9e:	d10f      	bne.n	11bc0 <smpScActJwncDisplay+0x2e>
   11ba0:	a802      	add	r0, sp, #8
   11ba2:	6849      	ldr	r1, [r1, #4]
   11ba4:	f002 fd3b 	bl	1461e <Calc128Cpy>
   11ba8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11bac:	f8ad 3004 	strh.w	r3, [sp, #4]
   11bb0:	a801      	add	r0, sp, #4
   11bb2:	2335      	movs	r3, #53	; 0x35
   11bb4:	f88d 3006 	strb.w	r3, [sp, #6]
   11bb8:	f7fe fd5c 	bl	10674 <DmSmpCbackExec>
   11bbc:	b006      	add	sp, #24
   11bbe:	bd10      	pop	{r4, pc}
   11bc0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11bc4:	f8ad 3004 	strh.w	r3, [sp, #4]
   11bc8:	a901      	add	r1, sp, #4
   11bca:	2315      	movs	r3, #21
   11bcc:	f88d 3006 	strb.w	r3, [sp, #6]
   11bd0:	f000 fce7 	bl	125a2 <smpSmExecute>
   11bd4:	e7f2      	b.n	11bbc <smpScActJwncDisplay+0x2a>

00011bd6 <smpScActPkKeypress>:
   11bd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11bd8:	684c      	ldr	r4, [r1, #4]
   11bda:	7a22      	ldrb	r2, [r4, #8]
   11bdc:	2a0e      	cmp	r2, #14
   11bde:	d10e      	bne.n	11bfe <smpScActPkKeypress+0x28>
   11be0:	7a63      	ldrb	r3, [r4, #9]
   11be2:	f88d 3004 	strb.w	r3, [sp, #4]
   11be6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11bea:	f8ad 3000 	strh.w	r3, [sp]
   11bee:	4668      	mov	r0, sp
   11bf0:	2336      	movs	r3, #54	; 0x36
   11bf2:	f88d 3002 	strb.w	r3, [sp, #2]
   11bf6:	f7fe fd3d 	bl	10674 <DmSmpCbackExec>
   11bfa:	b003      	add	sp, #12
   11bfc:	bd30      	pop	{r4, r5, pc}
   11bfe:	2a03      	cmp	r2, #3
   11c00:	d1fb      	bne.n	11bfa <smpScActPkKeypress+0x24>
   11c02:	221d      	movs	r2, #29
   11c04:	708a      	strb	r2, [r1, #2]
   11c06:	f000 fccc 	bl	125a2 <smpSmExecute>
   11c0a:	e7f6      	b.n	11bfa <smpScActPkKeypress+0x24>

00011c0c <smpScActPkSendKeypress>:
   11c0c:	b538      	push	{r3, r4, r5, lr}
   11c0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11c10:	789b      	ldrb	r3, [r3, #2]
   11c12:	4604      	mov	r4, r0
   11c14:	460d      	mov	r5, r1
   11c16:	b1c3      	cbz	r3, 11c4a <smpScActPkSendKeypress+0x3e>
   11c18:	f000 fab0 	bl	1217c <smpStartRspTimer>
   11c1c:	200a      	movs	r0, #10
   11c1e:	f7ff faef 	bl	11200 <smpMsgAlloc>
   11c22:	b148      	cbz	r0, 11c38 <smpScActPkSendKeypress+0x2c>
   11c24:	230e      	movs	r3, #14
   11c26:	7203      	strb	r3, [r0, #8]
   11c28:	792b      	ldrb	r3, [r5, #4]
   11c2a:	7243      	strb	r3, [r0, #9]
   11c2c:	4601      	mov	r1, r0
   11c2e:	4620      	mov	r0, r4
   11c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11c34:	f7ff ba99 	b.w	1116a <smpSendPkt>
   11c38:	f640 0303 	movw	r3, #2051	; 0x803
   11c3c:	806b      	strh	r3, [r5, #2]
   11c3e:	4629      	mov	r1, r5
   11c40:	4620      	mov	r0, r4
   11c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11c46:	f000 bcac 	b.w	125a2 <smpSmExecute>
   11c4a:	bd38      	pop	{r3, r4, r5, pc}

00011c4c <smpScActCalcSharedSecret>:
   11c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c4e:	b099      	sub	sp, #100	; 0x64
   11c50:	4605      	mov	r5, r0
   11c52:	f7fe fec3 	bl	109dc <DmSecGetEccKey>
   11c56:	ae10      	add	r6, sp, #64	; 0x40
   11c58:	f100 0340 	add.w	r3, r0, #64	; 0x40
   11c5c:	f100 0260 	add.w	r2, r0, #96	; 0x60
   11c60:	6818      	ldr	r0, [r3, #0]
   11c62:	6859      	ldr	r1, [r3, #4]
   11c64:	4634      	mov	r4, r6
   11c66:	c403      	stmia	r4!, {r0, r1}
   11c68:	3308      	adds	r3, #8
   11c6a:	4293      	cmp	r3, r2
   11c6c:	4626      	mov	r6, r4
   11c6e:	d1f7      	bne.n	11c60 <smpScActCalcSharedSecret+0x14>
   11c70:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   11c72:	68b3      	ldr	r3, [r6, #8]
   11c74:	466a      	mov	r2, sp
   11c76:	f103 0c20 	add.w	ip, r3, #32
   11c7a:	4617      	mov	r7, r2
   11c7c:	6818      	ldr	r0, [r3, #0]
   11c7e:	6859      	ldr	r1, [r3, #4]
   11c80:	4614      	mov	r4, r2
   11c82:	c403      	stmia	r4!, {r0, r1}
   11c84:	3308      	adds	r3, #8
   11c86:	4563      	cmp	r3, ip
   11c88:	4622      	mov	r2, r4
   11c8a:	d1f7      	bne.n	11c7c <smpScActCalcSharedSecret+0x30>
   11c8c:	68b3      	ldr	r3, [r6, #8]
   11c8e:	ac08      	add	r4, sp, #32
   11c90:	f103 0640 	add.w	r6, r3, #64	; 0x40
   11c94:	3320      	adds	r3, #32
   11c96:	6818      	ldr	r0, [r3, #0]
   11c98:	6859      	ldr	r1, [r3, #4]
   11c9a:	4622      	mov	r2, r4
   11c9c:	c203      	stmia	r2!, {r0, r1}
   11c9e:	3308      	adds	r3, #8
   11ca0:	42b3      	cmp	r3, r6
   11ca2:	4614      	mov	r4, r2
   11ca4:	d1f7      	bne.n	11c96 <smpScActCalcSharedSecret+0x4a>
   11ca6:	4905      	ldr	r1, [pc, #20]	; (11cbc <smpScActCalcSharedSecret+0x70>)
   11ca8:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   11cac:	f891 11c8 	ldrb.w	r1, [r1, #456]	; 0x1c8
   11cb0:	2318      	movs	r3, #24
   11cb2:	4638      	mov	r0, r7
   11cb4:	f002 fb28 	bl	14308 <SecEccGenSharedSecret>
   11cb8:	b019      	add	sp, #100	; 0x64
   11cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cbc:	10003f0c 	.word	0x10003f0c

00011cc0 <smpScActCalcF5TKey>:
   11cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cc4:	460a      	mov	r2, r1
   11cc6:	b086      	sub	sp, #24
   11cc8:	4680      	mov	r8, r0
   11cca:	460c      	mov	r4, r1
   11ccc:	4601      	mov	r1, r0
   11cce:	2020      	movs	r0, #32
   11cd0:	f7ff fb7e 	bl	113d0 <SmpScAlloc>
   11cd4:	4607      	mov	r7, r0
   11cd6:	b1e8      	cbz	r0, 11d14 <smpScActCalcF5TKey+0x54>
   11cd8:	4a10      	ldr	r2, [pc, #64]	; (11d1c <smpScActCalcF5TKey+0x5c>)
   11cda:	ad02      	add	r5, sp, #8
   11cdc:	f102 0310 	add.w	r3, r2, #16
   11ce0:	46ac      	mov	ip, r5
   11ce2:	6810      	ldr	r0, [r2, #0]
   11ce4:	6851      	ldr	r1, [r2, #4]
   11ce6:	462e      	mov	r6, r5
   11ce8:	c603      	stmia	r6!, {r0, r1}
   11cea:	3208      	adds	r2, #8
   11cec:	429a      	cmp	r2, r3
   11cee:	4635      	mov	r5, r6
   11cf0:	d1f7      	bne.n	11ce2 <smpScActCalcF5TKey+0x22>
   11cf2:	1d22      	adds	r2, r4, #4
   11cf4:	463b      	mov	r3, r7
   11cf6:	f104 0124 	add.w	r1, r4, #36	; 0x24
   11cfa:	f852 0b04 	ldr.w	r0, [r2], #4
   11cfe:	f843 0b04 	str.w	r0, [r3], #4
   11d02:	428a      	cmp	r2, r1
   11d04:	d1f9      	bne.n	11cfa <smpScActCalcF5TKey+0x3a>
   11d06:	9400      	str	r4, [sp, #0]
   11d08:	4643      	mov	r3, r8
   11d0a:	2220      	movs	r2, #32
   11d0c:	4639      	mov	r1, r7
   11d0e:	4660      	mov	r0, ip
   11d10:	f7ff fb42 	bl	11398 <SmpScCmac>
   11d14:	b006      	add	sp, #24
   11d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d1a:	bf00      	nop
   11d1c:	00022234 	.word	0x00022234

00011d20 <smpScActCalcF5MacKey>:
   11d20:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11d24:	4604      	mov	r4, r0
   11d26:	6918      	ldr	r0, [r3, #16]
   11d28:	460e      	mov	r6, r1
   11d2a:	3010      	adds	r0, #16
   11d2c:	6849      	ldr	r1, [r1, #4]
   11d2e:	f002 fc76 	bl	1461e <Calc128Cpy>
   11d32:	4632      	mov	r2, r6
   11d34:	4621      	mov	r1, r4
   11d36:	2035      	movs	r0, #53	; 0x35
   11d38:	f7ff fb4a 	bl	113d0 <SmpScAlloc>
   11d3c:	4605      	mov	r5, r0
   11d3e:	b318      	cbz	r0, 11d88 <smpScActCalcF5MacKey+0x68>
   11d40:	2700      	movs	r7, #0
   11d42:	2204      	movs	r2, #4
   11d44:	7007      	strb	r7, [r0, #0]
   11d46:	4911      	ldr	r1, [pc, #68]	; (11d8c <smpScActCalcF5MacKey+0x6c>)
   11d48:	3001      	adds	r0, #1
   11d4a:	f7ff fbb5 	bl	114b8 <SmpScCat>
   11d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d50:	68d9      	ldr	r1, [r3, #12]
   11d52:	f7ff fbb7 	bl	114c4 <SmpScCat128>
   11d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d58:	68d9      	ldr	r1, [r3, #12]
   11d5a:	3110      	adds	r1, #16
   11d5c:	f7ff fbb2 	bl	114c4 <SmpScCat128>
   11d60:	4601      	mov	r1, r0
   11d62:	4620      	mov	r0, r4
   11d64:	f7ff fce0 	bl	11728 <smpScCatInitiatorBdAddr>
   11d68:	4601      	mov	r1, r0
   11d6a:	4620      	mov	r0, r4
   11d6c:	f7ff fd0a 	bl	11784 <smpScCatResponderBdAddr>
   11d70:	2301      	movs	r3, #1
   11d72:	7003      	strb	r3, [r0, #0]
   11d74:	7047      	strb	r7, [r0, #1]
   11d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d78:	6918      	ldr	r0, [r3, #16]
   11d7a:	9600      	str	r6, [sp, #0]
   11d7c:	4623      	mov	r3, r4
   11d7e:	2235      	movs	r2, #53	; 0x35
   11d80:	4629      	mov	r1, r5
   11d82:	3010      	adds	r0, #16
   11d84:	f7ff fb08 	bl	11398 <SmpScCmac>
   11d88:	b003      	add	sp, #12
   11d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d8c:	00022244 	.word	0x00022244

00011d90 <smpScActCalcF5Ltk>:
   11d90:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11d94:	4604      	mov	r4, r0
   11d96:	460e      	mov	r6, r1
   11d98:	6918      	ldr	r0, [r3, #16]
   11d9a:	6849      	ldr	r1, [r1, #4]
   11d9c:	f002 fc3f 	bl	1461e <Calc128Cpy>
   11da0:	4632      	mov	r2, r6
   11da2:	4621      	mov	r1, r4
   11da4:	2035      	movs	r0, #53	; 0x35
   11da6:	f7ff fb13 	bl	113d0 <SmpScAlloc>
   11daa:	4605      	mov	r5, r0
   11dac:	b318      	cbz	r0, 11df6 <smpScActCalcF5Ltk+0x66>
   11dae:	2701      	movs	r7, #1
   11db0:	2204      	movs	r2, #4
   11db2:	7007      	strb	r7, [r0, #0]
   11db4:	4911      	ldr	r1, [pc, #68]	; (11dfc <smpScActCalcF5Ltk+0x6c>)
   11db6:	4438      	add	r0, r7
   11db8:	f7ff fb7e 	bl	114b8 <SmpScCat>
   11dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11dbe:	68d9      	ldr	r1, [r3, #12]
   11dc0:	f7ff fb80 	bl	114c4 <SmpScCat128>
   11dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11dc6:	68d9      	ldr	r1, [r3, #12]
   11dc8:	3110      	adds	r1, #16
   11dca:	f7ff fb7b 	bl	114c4 <SmpScCat128>
   11dce:	4601      	mov	r1, r0
   11dd0:	4620      	mov	r0, r4
   11dd2:	f7ff fca9 	bl	11728 <smpScCatInitiatorBdAddr>
   11dd6:	4601      	mov	r1, r0
   11dd8:	4620      	mov	r0, r4
   11dda:	f7ff fcd3 	bl	11784 <smpScCatResponderBdAddr>
   11dde:	2300      	movs	r3, #0
   11de0:	7007      	strb	r7, [r0, #0]
   11de2:	7043      	strb	r3, [r0, #1]
   11de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11de6:	6918      	ldr	r0, [r3, #16]
   11de8:	9600      	str	r6, [sp, #0]
   11dea:	4623      	mov	r3, r4
   11dec:	2235      	movs	r2, #53	; 0x35
   11dee:	4629      	mov	r1, r5
   11df0:	3010      	adds	r0, #16
   11df2:	f7ff fad1 	bl	11398 <SmpScCmac>
   11df6:	b003      	add	sp, #12
   11df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11dfa:	bf00      	nop
   11dfc:	00022244 	.word	0x00022244

00011e00 <smpScActDHKeyCalcF6Ea>:
   11e00:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11e04:	4604      	mov	r4, r0
   11e06:	6918      	ldr	r0, [r3, #16]
   11e08:	2210      	movs	r2, #16
   11e0a:	4410      	add	r0, r2
   11e0c:	460d      	mov	r5, r1
   11e0e:	6849      	ldr	r1, [r1, #4]
   11e10:	f002 fc40 	bl	14694 <WStrReverseCpy>
   11e14:	462a      	mov	r2, r5
   11e16:	4621      	mov	r1, r4
   11e18:	2041      	movs	r0, #65	; 0x41
   11e1a:	f7ff fad9 	bl	113d0 <SmpScAlloc>
   11e1e:	4606      	mov	r6, r0
   11e20:	b318      	cbz	r0, 11e6a <smpScActDHKeyCalcF6Ea+0x6a>
   11e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e24:	68d9      	ldr	r1, [r3, #12]
   11e26:	f7ff fb4d 	bl	114c4 <SmpScCat128>
   11e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e2c:	68d9      	ldr	r1, [r3, #12]
   11e2e:	3110      	adds	r1, #16
   11e30:	f7ff fb48 	bl	114c4 <SmpScCat128>
   11e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e36:	68d9      	ldr	r1, [r3, #12]
   11e38:	3130      	adds	r1, #48	; 0x30
   11e3a:	f7ff fb43 	bl	114c4 <SmpScCat128>
   11e3e:	7ce3      	ldrb	r3, [r4, #19]
   11e40:	7003      	strb	r3, [r0, #0]
   11e42:	7ca3      	ldrb	r3, [r4, #18]
   11e44:	7043      	strb	r3, [r0, #1]
   11e46:	7c63      	ldrb	r3, [r4, #17]
   11e48:	7083      	strb	r3, [r0, #2]
   11e4a:	1cc1      	adds	r1, r0, #3
   11e4c:	4620      	mov	r0, r4
   11e4e:	f7ff fc6b 	bl	11728 <smpScCatInitiatorBdAddr>
   11e52:	4601      	mov	r1, r0
   11e54:	4620      	mov	r0, r4
   11e56:	f7ff fc95 	bl	11784 <smpScCatResponderBdAddr>
   11e5a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11e5c:	9500      	str	r5, [sp, #0]
   11e5e:	4623      	mov	r3, r4
   11e60:	2241      	movs	r2, #65	; 0x41
   11e62:	4631      	mov	r1, r6
   11e64:	6900      	ldr	r0, [r0, #16]
   11e66:	f7ff fa97 	bl	11398 <SmpScCmac>
   11e6a:	b002      	add	sp, #8
   11e6c:	bd70      	pop	{r4, r5, r6, pc}

00011e6e <smpScActDHKeyCalcF6Eb>:
   11e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11e70:	460a      	mov	r2, r1
   11e72:	4604      	mov	r4, r0
   11e74:	460d      	mov	r5, r1
   11e76:	4601      	mov	r1, r0
   11e78:	2041      	movs	r0, #65	; 0x41
   11e7a:	f7ff faa9 	bl	113d0 <SmpScAlloc>
   11e7e:	4606      	mov	r6, r0
   11e80:	b318      	cbz	r0, 11eca <smpScActDHKeyCalcF6Eb+0x5c>
   11e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e84:	68d9      	ldr	r1, [r3, #12]
   11e86:	3110      	adds	r1, #16
   11e88:	f7ff fb1c 	bl	114c4 <SmpScCat128>
   11e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e8e:	68d9      	ldr	r1, [r3, #12]
   11e90:	f7ff fb18 	bl	114c4 <SmpScCat128>
   11e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e96:	68d9      	ldr	r1, [r3, #12]
   11e98:	3120      	adds	r1, #32
   11e9a:	f7ff fb13 	bl	114c4 <SmpScCat128>
   11e9e:	7ea3      	ldrb	r3, [r4, #26]
   11ea0:	7003      	strb	r3, [r0, #0]
   11ea2:	7e63      	ldrb	r3, [r4, #25]
   11ea4:	7043      	strb	r3, [r0, #1]
   11ea6:	7e23      	ldrb	r3, [r4, #24]
   11ea8:	7083      	strb	r3, [r0, #2]
   11eaa:	1cc1      	adds	r1, r0, #3
   11eac:	4620      	mov	r0, r4
   11eae:	f7ff fc69 	bl	11784 <smpScCatResponderBdAddr>
   11eb2:	4601      	mov	r1, r0
   11eb4:	4620      	mov	r0, r4
   11eb6:	f7ff fc37 	bl	11728 <smpScCatInitiatorBdAddr>
   11eba:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11ebc:	9500      	str	r5, [sp, #0]
   11ebe:	4623      	mov	r3, r4
   11ec0:	2241      	movs	r2, #65	; 0x41
   11ec2:	4631      	mov	r1, r6
   11ec4:	6900      	ldr	r0, [r0, #16]
   11ec6:	f7ff fa67 	bl	11398 <SmpScCmac>
   11eca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11ecc:	6869      	ldr	r1, [r5, #4]
   11ece:	68d8      	ldr	r0, [r3, #12]
   11ed0:	b002      	add	sp, #8
   11ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11ed6:	f002 bba2 	b.w	1461e <Calc128Cpy>
   11eda:	bf00      	nop

00011edc <SmpiScInit>:
   11edc:	4b02      	ldr	r3, [pc, #8]	; (11ee8 <SmpiScInit+0xc>)
   11ede:	4a03      	ldr	r2, [pc, #12]	; (11eec <SmpiScInit+0x10>)
   11ee0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   11ee4:	f7ff bab8 	b.w	11458 <SmpScInit>
   11ee8:	10003f0c 	.word	0x10003f0c
   11eec:	00022248 	.word	0x00022248

00011ef0 <smpiStateStr>:
   11ef0:	2824      	cmp	r0, #36	; 0x24
   11ef2:	bf9d      	ittte	ls
   11ef4:	4b02      	ldrls	r3, [pc, #8]	; (11f00 <smpiStateStr+0x10>)
   11ef6:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   11efa:	68c0      	ldrls	r0, [r0, #12]
   11efc:	4801      	ldrhi	r0, [pc, #4]	; (11f04 <smpiStateStr+0x14>)
   11efe:	4770      	bx	lr
   11f00:	00022248 	.word	0x00022248
   11f04:	00024cb5 	.word	0x00024cb5

00011f08 <SmprScInit>:
   11f08:	4b02      	ldr	r3, [pc, #8]	; (11f14 <SmprScInit+0xc>)
   11f0a:	4a03      	ldr	r2, [pc, #12]	; (11f18 <SmprScInit+0x10>)
   11f0c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11f10:	f7ff baa2 	b.w	11458 <SmpScInit>
   11f14:	10003f0c 	.word	0x10003f0c
   11f18:	00022574 	.word	0x00022574

00011f1c <smprStateStr>:
   11f1c:	2824      	cmp	r0, #36	; 0x24
   11f1e:	bf9d      	ittte	ls
   11f20:	4b02      	ldrls	r3, [pc, #8]	; (11f2c <smprStateStr+0x10>)
   11f22:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   11f26:	68c0      	ldrls	r0, [r0, #12]
   11f28:	4801      	ldrhi	r0, [pc, #4]	; (11f30 <smprStateStr+0x14>)
   11f2a:	4770      	bx	lr
   11f2c:	00022574 	.word	0x00022574
   11f30:	00024e89 	.word	0x00024e89

00011f34 <SmprInit>:
   11f34:	4b05      	ldr	r3, [pc, #20]	; (11f4c <SmprInit+0x18>)
   11f36:	4a06      	ldr	r2, [pc, #24]	; (11f50 <SmprInit+0x1c>)
   11f38:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11f3c:	4a05      	ldr	r2, [pc, #20]	; (11f54 <SmprInit+0x20>)
   11f3e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   11f42:	4a05      	ldr	r2, [pc, #20]	; (11f58 <SmprInit+0x24>)
   11f44:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   11f48:	4770      	bx	lr
   11f4a:	bf00      	nop
   11f4c:	10003f0c 	.word	0x10003f0c
   11f50:	000228c0 	.word	0x000228c0
   11f54:	00012605 	.word	0x00012605
   11f58:	000126f1 	.word	0x000126f1

00011f5c <dmConnSmActCancelOpen>:
   11f5c:	f003 bd6d 	b.w	15a3a <HciLeCreateConnCancelCmd>

00011f60 <dmConnSmActUpdateMaster>:
   11f60:	3104      	adds	r1, #4
   11f62:	8980      	ldrh	r0, [r0, #12]
   11f64:	f003 bce2 	b.w	1592c <HciLeConnUpdateCmd>

00011f68 <dmConnSmActL2cUpdateInd>:
   11f68:	b538      	push	{r3, r4, r5, lr}
   11f6a:	460d      	mov	r5, r1
   11f6c:	4604      	mov	r4, r0
   11f6e:	8981      	ldrh	r1, [r0, #12]
   11f70:	7a28      	ldrb	r0, [r5, #8]
   11f72:	2200      	movs	r2, #0
   11f74:	f000 f892 	bl	1209c <L2cDmConnUpdateRsp>
   11f78:	6869      	ldr	r1, [r5, #4]
   11f7a:	89a0      	ldrh	r0, [r4, #12]
   11f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11f80:	f003 bcd4 	b.w	1592c <HciLeConnUpdateCmd>

00011f84 <DmL2cConnUpdateInd>:
   11f84:	b530      	push	{r4, r5, lr}
   11f86:	4604      	mov	r4, r0
   11f88:	b085      	sub	sp, #20
   11f8a:	4608      	mov	r0, r1
   11f8c:	4615      	mov	r5, r2
   11f8e:	f7fd fb74 	bl	f67a <dmConnCcbByHandle>
   11f92:	b140      	cbz	r0, 11fa6 <DmL2cConnUpdateInd+0x22>
   11f94:	2335      	movs	r3, #53	; 0x35
   11f96:	a901      	add	r1, sp, #4
   11f98:	f88d 3006 	strb.w	r3, [sp, #6]
   11f9c:	9502      	str	r5, [sp, #8]
   11f9e:	f88d 400c 	strb.w	r4, [sp, #12]
   11fa2:	f7fd ffaf 	bl	ff04 <dmConnSmExecute>
   11fa6:	b005      	add	sp, #20
   11fa8:	bd30      	pop	{r4, r5, pc}

00011faa <DmConnOpen>:
   11faa:	b510      	push	{r4, lr}
   11fac:	b086      	sub	sp, #24
   11fae:	2400      	movs	r4, #0
   11fb0:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11fb4:	e9cd 4201 	strd	r4, r2, [sp, #4]
   11fb8:	9400      	str	r4, [sp, #0]
   11fba:	4623      	mov	r3, r4
   11fbc:	4622      	mov	r2, r4
   11fbe:	f7fd fceb 	bl	f998 <dmConnOpenAccept>
   11fc2:	b006      	add	sp, #24
   11fc4:	bd10      	pop	{r4, pc}

00011fc6 <DmConnSetAddrType>:
   11fc6:	b510      	push	{r4, lr}
   11fc8:	4604      	mov	r4, r0
   11fca:	f007 fc75 	bl	198b8 <WsfTaskLock>
   11fce:	4b03      	ldr	r3, [pc, #12]	; (11fdc <DmConnSetAddrType+0x16>)
   11fd0:	735c      	strb	r4, [r3, #13]
   11fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11fd6:	f007 bc75 	b.w	198c4 <WsfTaskUnlock>
   11fda:	bf00      	nop
   11fdc:	10003e24 	.word	0x10003e24

00011fe0 <DmSmpEncryptReq>:
   11fe0:	b570      	push	{r4, r5, r6, lr}
   11fe2:	460d      	mov	r5, r1
   11fe4:	4614      	mov	r4, r2
   11fe6:	f7fd fc2f 	bl	f848 <dmConnCcbById>
   11fea:	b148      	cbz	r0, 12000 <DmSmpEncryptReq+0x20>
   11fec:	2200      	movs	r2, #0
   11fee:	7605      	strb	r5, [r0, #24]
   11ff0:	7482      	strb	r2, [r0, #18]
   11ff2:	4623      	mov	r3, r4
   11ff4:	4903      	ldr	r1, [pc, #12]	; (12004 <DmSmpEncryptReq+0x24>)
   11ff6:	8980      	ldrh	r0, [r0, #12]
   11ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11ffc:	f004 b8ea 	b.w	161d4 <HciLeStartEncryptionCmd>
   12000:	bd70      	pop	{r4, r5, r6, pc}
   12002:	bf00      	nop
   12004:	00022a0c 	.word	0x00022a0c

00012008 <DmSecPairReq>:
   12008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1200c:	4681      	mov	r9, r0
   1200e:	2008      	movs	r0, #8
   12010:	4688      	mov	r8, r1
   12012:	4617      	mov	r7, r2
   12014:	461e      	mov	r6, r3
   12016:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1201a:	f003 f912 	bl	15242 <WsfMsgAlloc>
   1201e:	b180      	cbz	r0, 12042 <DmSecPairReq+0x3a>
   12020:	2301      	movs	r3, #1
   12022:	f006 0607 	and.w	r6, r6, #7
   12026:	f005 0507 	and.w	r5, r5, #7
   1202a:	7083      	strb	r3, [r0, #2]
   1202c:	f880 8004 	strb.w	r8, [r0, #4]
   12030:	7147      	strb	r7, [r0, #5]
   12032:	7186      	strb	r6, [r0, #6]
   12034:	71c5      	strb	r5, [r0, #7]
   12036:	f8a0 9000 	strh.w	r9, [r0]
   1203a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1203e:	f7ff b8e2 	b.w	11206 <SmpDmMsgSend>
   12042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012046 <DmSecEncryptReq>:
   12046:	b570      	push	{r4, r5, r6, lr}
   12048:	4606      	mov	r6, r0
   1204a:	2020      	movs	r0, #32
   1204c:	460d      	mov	r5, r1
   1204e:	4614      	mov	r4, r2
   12050:	f003 f8f7 	bl	15242 <WsfMsgAlloc>
   12054:	b1b8      	cbz	r0, 12086 <DmSecEncryptReq+0x40>
   12056:	2350      	movs	r3, #80	; 0x50
   12058:	7083      	strb	r3, [r0, #2]
   1205a:	4603      	mov	r3, r0
   1205c:	4622      	mov	r2, r4
   1205e:	f823 6b04 	strh.w	r6, [r3], #4
   12062:	f104 0118 	add.w	r1, r4, #24
   12066:	f852 4b04 	ldr.w	r4, [r2], #4
   1206a:	f843 4b04 	str.w	r4, [r3], #4
   1206e:	428a      	cmp	r2, r1
   12070:	d1f9      	bne.n	12066 <DmSecEncryptReq+0x20>
   12072:	8812      	ldrh	r2, [r2, #0]
   12074:	801a      	strh	r2, [r3, #0]
   12076:	4b04      	ldr	r3, [pc, #16]	; (12088 <DmSecEncryptReq+0x42>)
   12078:	7785      	strb	r5, [r0, #30]
   1207a:	4601      	mov	r1, r0
   1207c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12080:	7b18      	ldrb	r0, [r3, #12]
   12082:	f003 b902 	b.w	1528a <WsfMsgSend>
   12086:	bd70      	pop	{r4, r5, r6, pc}
   12088:	10003e24 	.word	0x10003e24

0001208c <L2cMasterInit>:
   1208c:	4b01      	ldr	r3, [pc, #4]	; (12094 <L2cMasterInit+0x8>)
   1208e:	4a02      	ldr	r2, [pc, #8]	; (12098 <L2cMasterInit+0xc>)
   12090:	619a      	str	r2, [r3, #24]
   12092:	4770      	bx	lr
   12094:	10003ed0 	.word	0x10003ed0
   12098:	000120d3 	.word	0x000120d3

0001209c <L2cDmConnUpdateRsp>:
   1209c:	b570      	push	{r4, r5, r6, lr}
   1209e:	4606      	mov	r6, r0
   120a0:	200e      	movs	r0, #14
   120a2:	460d      	mov	r5, r1
   120a4:	4614      	mov	r4, r2
   120a6:	f7fe fd91 	bl	10bcc <l2cMsgAlloc>
   120aa:	4603      	mov	r3, r0
   120ac:	b180      	cbz	r0, 120d0 <L2cDmConnUpdateRsp+0x34>
   120ae:	2213      	movs	r2, #19
   120b0:	7202      	strb	r2, [r0, #8]
   120b2:	2202      	movs	r2, #2
   120b4:	7282      	strb	r2, [r0, #10]
   120b6:	7304      	strb	r4, [r0, #12]
   120b8:	2200      	movs	r2, #0
   120ba:	0a24      	lsrs	r4, r4, #8
   120bc:	72c2      	strb	r2, [r0, #11]
   120be:	7246      	strb	r6, [r0, #9]
   120c0:	7344      	strb	r4, [r0, #13]
   120c2:	4629      	mov	r1, r5
   120c4:	2206      	movs	r2, #6
   120c6:	2005      	movs	r0, #5
   120c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   120cc:	f7fe bdac 	b.w	10c28 <L2cDataReq>
   120d0:	bd70      	pop	{r4, r5, r6, pc}

000120d2 <l2cMasterRxSignalingPkt>:
   120d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   120d4:	7ad4      	ldrb	r4, [r2, #11]
   120d6:	7a93      	ldrb	r3, [r2, #10]
   120d8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   120dc:	b29b      	uxth	r3, r3
   120de:	1d1c      	adds	r4, r3, #4
   120e0:	42a1      	cmp	r1, r4
   120e2:	4605      	mov	r5, r0
   120e4:	b085      	sub	sp, #20
   120e6:	7a50      	ldrb	r0, [r2, #9]
   120e8:	d104      	bne.n	120f4 <l2cMasterRxSignalingPkt+0x22>
   120ea:	7a11      	ldrb	r1, [r2, #8]
   120ec:	2912      	cmp	r1, #18
   120ee:	d101      	bne.n	120f4 <l2cMasterRxSignalingPkt+0x22>
   120f0:	2b08      	cmp	r3, #8
   120f2:	d006      	beq.n	12102 <l2cMasterRxSignalingPkt+0x30>
   120f4:	4601      	mov	r1, r0
   120f6:	2200      	movs	r2, #0
   120f8:	4628      	mov	r0, r5
   120fa:	f7fe fdaa 	bl	10c52 <l2cSendCmdReject>
   120fe:	b005      	add	sp, #20
   12100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12102:	7b53      	ldrb	r3, [r2, #13]
   12104:	7b16      	ldrb	r6, [r2, #12]
   12106:	7b91      	ldrb	r1, [r2, #14]
   12108:	7c14      	ldrb	r4, [r2, #16]
   1210a:	7cd7      	ldrb	r7, [r2, #19]
   1210c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   12110:	7bd3      	ldrb	r3, [r2, #15]
   12112:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   12116:	7c53      	ldrb	r3, [r2, #17]
   12118:	b2b6      	uxth	r6, r6
   1211a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   1211e:	7c93      	ldrb	r3, [r2, #18]
   12120:	f8ad 6004 	strh.w	r6, [sp, #4]
   12124:	2200      	movs	r2, #0
   12126:	9203      	str	r2, [sp, #12]
   12128:	1fb2      	subs	r2, r6, #6
   1212a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
   1212e:	b292      	uxth	r2, r2
   12130:	f640 477a 	movw	r7, #3194	; 0xc7a
   12134:	b289      	uxth	r1, r1
   12136:	b2a4      	uxth	r4, r4
   12138:	b29b      	uxth	r3, r3
   1213a:	42ba      	cmp	r2, r7
   1213c:	f8ad 1006 	strh.w	r1, [sp, #6]
   12140:	f8ad 4008 	strh.w	r4, [sp, #8]
   12144:	f8ad 300a 	strh.w	r3, [sp, #10]
   12148:	d80d      	bhi.n	12166 <l2cMasterRxSignalingPkt+0x94>
   1214a:	428e      	cmp	r6, r1
   1214c:	d80b      	bhi.n	12166 <l2cMasterRxSignalingPkt+0x94>
   1214e:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12152:	d808      	bhi.n	12166 <l2cMasterRxSignalingPkt+0x94>
   12154:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   12158:	d205      	bcs.n	12166 <l2cMasterRxSignalingPkt+0x94>
   1215a:	3b0a      	subs	r3, #10
   1215c:	b29b      	uxth	r3, r3
   1215e:	f640 4276 	movw	r2, #3190	; 0xc76
   12162:	4293      	cmp	r3, r2
   12164:	d904      	bls.n	12170 <l2cMasterRxSignalingPkt+0x9e>
   12166:	2201      	movs	r2, #1
   12168:	4629      	mov	r1, r5
   1216a:	f7ff ff97 	bl	1209c <L2cDmConnUpdateRsp>
   1216e:	e7c6      	b.n	120fe <l2cMasterRxSignalingPkt+0x2c>
   12170:	aa01      	add	r2, sp, #4
   12172:	4629      	mov	r1, r5
   12174:	f7ff ff06 	bl	11f84 <DmL2cConnUpdateInd>
   12178:	e7c1      	b.n	120fe <l2cMasterRxSignalingPkt+0x2c>
   1217a:	bf00      	nop

0001217c <smpStartRspTimer>:
   1217c:	f24e 130f 	movw	r3, #57615	; 0xe10f
   12180:	8183      	strh	r3, [r0, #12]
   12182:	211e      	movs	r1, #30
   12184:	f003 ba16 	b.w	155b4 <WsfTimerStartSec>

00012188 <smpActNone>:
   12188:	4770      	bx	lr

0001218a <smpCleanup>:
   1218a:	b510      	push	{r4, lr}
   1218c:	4604      	mov	r4, r0
   1218e:	6a00      	ldr	r0, [r0, #32]
   12190:	b118      	cbz	r0, 1219a <smpCleanup+0x10>
   12192:	f003 f807 	bl	151a4 <WsfBufFree>
   12196:	2300      	movs	r3, #0
   12198:	6223      	str	r3, [r4, #32]
   1219a:	4620      	mov	r0, r4
   1219c:	f003 fa30 	bl	15600 <WsfTimerStop>
   121a0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   121a4:	2300      	movs	r3, #0
   121a6:	429a      	cmp	r2, r3
   121a8:	bf14      	ite	ne
   121aa:	220b      	movne	r2, #11
   121ac:	2201      	moveq	r2, #1
   121ae:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   121b2:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   121b6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   121ba:	bd10      	pop	{r4, pc}

000121bc <smpActCleanup>:
   121bc:	f7ff bfe5 	b.w	1218a <smpCleanup>

000121c0 <smpSendPairingFailed>:
   121c0:	b538      	push	{r3, r4, r5, lr}
   121c2:	4604      	mov	r4, r0
   121c4:	200a      	movs	r0, #10
   121c6:	460d      	mov	r5, r1
   121c8:	f7ff f81a 	bl	11200 <smpMsgAlloc>
   121cc:	b140      	cbz	r0, 121e0 <smpSendPairingFailed+0x20>
   121ce:	2305      	movs	r3, #5
   121d0:	7203      	strb	r3, [r0, #8]
   121d2:	7245      	strb	r5, [r0, #9]
   121d4:	4601      	mov	r1, r0
   121d6:	4620      	mov	r0, r4
   121d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   121dc:	f7fe bfc5 	b.w	1116a <smpSendPkt>
   121e0:	bd38      	pop	{r3, r4, r5, pc}

000121e2 <smpActPairingFailed>:
   121e2:	b538      	push	{r3, r4, r5, lr}
   121e4:	4605      	mov	r5, r0
   121e6:	460c      	mov	r4, r1
   121e8:	f7ff ffcf 	bl	1218a <smpCleanup>
   121ec:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   121f0:	2200      	movs	r2, #0
   121f2:	2101      	movs	r1, #1
   121f4:	f7fd fda8 	bl	fd48 <DmConnSetIdle>
   121f8:	232b      	movs	r3, #43	; 0x2b
   121fa:	70a3      	strb	r3, [r4, #2]
   121fc:	4620      	mov	r0, r4
   121fe:	f7fe fa39 	bl	10674 <DmSmpCbackExec>
   12202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12206:	f7fe bbe9 	b.w	109dc <DmSecGetEccKey>

0001220a <smpActPairingCancel>:
   1220a:	b538      	push	{r3, r4, r5, lr}
   1220c:	4605      	mov	r5, r0
   1220e:	460c      	mov	r4, r1
   12210:	78c9      	ldrb	r1, [r1, #3]
   12212:	f7ff ffd5 	bl	121c0 <smpSendPairingFailed>
   12216:	4621      	mov	r1, r4
   12218:	4628      	mov	r0, r5
   1221a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1221e:	f7ff bfe0 	b.w	121e2 <smpActPairingFailed>

00012222 <smpActStorePin>:
   12222:	b538      	push	{r3, r4, r5, lr}
   12224:	460c      	mov	r4, r1
   12226:	7d0a      	ldrb	r2, [r1, #20]
   12228:	4605      	mov	r5, r0
   1222a:	3104      	adds	r1, #4
   1222c:	6a00      	ldr	r0, [r0, #32]
   1222e:	f7f9 ff97 	bl	c160 <memcpy>
   12232:	7d23      	ldrb	r3, [r4, #20]
   12234:	2b03      	cmp	r3, #3
   12236:	d107      	bne.n	12248 <smpActStorePin+0x26>
   12238:	6a28      	ldr	r0, [r5, #32]
   1223a:	220d      	movs	r2, #13
   1223c:	2100      	movs	r1, #0
   1223e:	3003      	adds	r0, #3
   12240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12244:	f7fa b88a 	b.w	c35c <memset>
   12248:	bd38      	pop	{r3, r4, r5, pc}

0001224a <smpActPairCnfCalc1>:
   1224a:	b510      	push	{r4, lr}
   1224c:	4604      	mov	r4, r0
   1224e:	f7ff ffe8 	bl	12222 <smpActStorePin>
   12252:	6a20      	ldr	r0, [r4, #32]
   12254:	2110      	movs	r1, #16
   12256:	3030      	adds	r0, #48	; 0x30
   12258:	f002 f972 	bl	14540 <SecRand>
   1225c:	6a21      	ldr	r1, [r4, #32]
   1225e:	4620      	mov	r0, r4
   12260:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12268:	f7fe be26 	b.w	10eb8 <smpCalcC1Part1>

0001226c <smpActPairCnfCalc2>:
   1226c:	684a      	ldr	r2, [r1, #4]
   1226e:	6a01      	ldr	r1, [r0, #32]
   12270:	f7fe bea4 	b.w	10fbc <smpCalcC1Part2>

00012274 <smpActSendPairCnf>:
   12274:	b538      	push	{r3, r4, r5, lr}
   12276:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1227a:	2b00      	cmp	r3, #0
   1227c:	bf14      	ite	ne
   1227e:	2303      	movne	r3, #3
   12280:	2304      	moveq	r3, #4
   12282:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12286:	4604      	mov	r4, r0
   12288:	460d      	mov	r5, r1
   1228a:	f7ff ff77 	bl	1217c <smpStartRspTimer>
   1228e:	2019      	movs	r0, #25
   12290:	f7fe ffb6 	bl	11200 <smpMsgAlloc>
   12294:	b190      	cbz	r0, 122bc <smpActSendPairCnf+0x48>
   12296:	2303      	movs	r3, #3
   12298:	7203      	strb	r3, [r0, #8]
   1229a:	686b      	ldr	r3, [r5, #4]
   1229c:	f100 0209 	add.w	r2, r0, #9
   122a0:	f103 0110 	add.w	r1, r3, #16
   122a4:	f853 5b04 	ldr.w	r5, [r3], #4
   122a8:	f842 5b04 	str.w	r5, [r2], #4
   122ac:	428b      	cmp	r3, r1
   122ae:	d1f9      	bne.n	122a4 <smpActSendPairCnf+0x30>
   122b0:	4601      	mov	r1, r0
   122b2:	4620      	mov	r0, r4
   122b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   122b8:	f7fe bf57 	b.w	1116a <smpSendPkt>
   122bc:	bd38      	pop	{r3, r4, r5, pc}

000122be <smpActPairCnfVerCalc1>:
   122be:	684b      	ldr	r3, [r1, #4]
   122c0:	6a01      	ldr	r1, [r0, #32]
   122c2:	f103 0209 	add.w	r2, r3, #9
   122c6:	b430      	push	{r4, r5}
   122c8:	3110      	adds	r1, #16
   122ca:	4614      	mov	r4, r2
   122cc:	3319      	adds	r3, #25
   122ce:	f854 5b04 	ldr.w	r5, [r4], #4
   122d2:	f841 5b04 	str.w	r5, [r1], #4
   122d6:	429c      	cmp	r4, r3
   122d8:	d1f9      	bne.n	122ce <smpActPairCnfVerCalc1+0x10>
   122da:	6a01      	ldr	r1, [r0, #32]
   122dc:	bc30      	pop	{r4, r5}
   122de:	f7fe bdeb 	b.w	10eb8 <smpCalcC1Part1>

000122e2 <smpActPairCnfVerCalc2>:
   122e2:	f7ff bfc3 	b.w	1226c <smpActPairCnfCalc2>

000122e6 <smpSendKey>:
   122e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   122e8:	4f5d      	ldr	r7, [pc, #372]	; (12460 <smpSendKey+0x17a>)
   122ea:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
   122ee:	b08b      	sub	sp, #44	; 0x2c
   122f0:	4604      	mov	r4, r0
   122f2:	460e      	mov	r6, r1
   122f4:	b343      	cbz	r3, 12348 <smpSendKey+0x62>
   122f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	b32b      	cbz	r3, 12348 <smpSendKey+0x62>
   122fc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   12300:	bb13      	cbnz	r3, 12348 <smpSendKey+0x62>
   12302:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   12306:	f7fd fd49 	bl	fd9c <DmConnRole>
   1230a:	bb48      	cbnz	r0, 12360 <smpSendKey+0x7a>
   1230c:	2302      	movs	r3, #2
   1230e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   12312:	232f      	movs	r3, #47	; 0x2f
   12314:	f88d 3006 	strb.w	r3, [sp, #6]
   12318:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1231c:	f8ad 3004 	strh.w	r3, [sp, #4]
   12320:	2303      	movs	r3, #3
   12322:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   12326:	2300      	movs	r3, #0
   12328:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1232c:	f8ad 3020 	strh.w	r3, [sp, #32]
   12330:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12332:	6919      	ldr	r1, [r3, #16]
   12334:	a802      	add	r0, sp, #8
   12336:	3110      	adds	r1, #16
   12338:	f002 f971 	bl	1461e <Calc128Cpy>
   1233c:	a801      	add	r0, sp, #4
   1233e:	f7fe f999 	bl	10674 <DmSmpCbackExec>
   12342:	2307      	movs	r3, #7
   12344:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   12348:	2e00      	cmp	r6, #0
   1234a:	f000 8086 	beq.w	1245a <smpSendKey+0x174>
   1234e:	2e01      	cmp	r6, #1
   12350:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   12354:	d106      	bne.n	12364 <smpSendKey+0x7e>
   12356:	2b07      	cmp	r3, #7
   12358:	d106      	bne.n	12368 <smpSendKey+0x82>
   1235a:	4630      	mov	r0, r6
   1235c:	b00b      	add	sp, #44	; 0x2c
   1235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12360:	2301      	movs	r3, #1
   12362:	e7d4      	b.n	1230e <smpSendKey+0x28>
   12364:	2e03      	cmp	r6, #3
   12366:	d801      	bhi.n	1236c <smpSendKey+0x86>
   12368:	2b09      	cmp	r3, #9
   1236a:	d076      	beq.n	1245a <smpSendKey+0x174>
   1236c:	2b0a      	cmp	r3, #10
   1236e:	d074      	beq.n	1245a <smpSendKey+0x174>
   12370:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   12374:	b10b      	cbz	r3, 1237a <smpSendKey+0x94>
   12376:	2600      	movs	r6, #0
   12378:	e7ef      	b.n	1235a <smpSendKey+0x74>
   1237a:	2019      	movs	r0, #25
   1237c:	f7fe ff40 	bl	11200 <smpMsgAlloc>
   12380:	4605      	mov	r5, r0
   12382:	2800      	cmp	r0, #0
   12384:	d0f7      	beq.n	12376 <smpSendKey+0x90>
   12386:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1238a:	b96b      	cbnz	r3, 123a8 <smpSendKey+0xc2>
   1238c:	07f0      	lsls	r0, r6, #31
   1238e:	d539      	bpl.n	12404 <smpSendKey+0x11e>
   12390:	4620      	mov	r0, r4
   12392:	f7fe febb 	bl	1110c <smpGenerateLtk>
   12396:	2306      	movs	r3, #6
   12398:	722b      	strb	r3, [r5, #8]
   1239a:	6a21      	ldr	r1, [r4, #32]
   1239c:	3104      	adds	r1, #4
   1239e:	f105 0009 	add.w	r0, r5, #9
   123a2:	f002 f93c 	bl	1461e <Calc128Cpy>
   123a6:	e012      	b.n	123ce <smpSendKey+0xe8>
   123a8:	2b06      	cmp	r3, #6
   123aa:	d12b      	bne.n	12404 <smpSendKey+0x11e>
   123ac:	2307      	movs	r3, #7
   123ae:	7203      	strb	r3, [r0, #8]
   123b0:	6a23      	ldr	r3, [r4, #32]
   123b2:	8b9b      	ldrh	r3, [r3, #28]
   123b4:	7243      	strb	r3, [r0, #9]
   123b6:	6a23      	ldr	r3, [r4, #32]
   123b8:	8b9b      	ldrh	r3, [r3, #28]
   123ba:	0a1b      	lsrs	r3, r3, #8
   123bc:	7283      	strb	r3, [r0, #10]
   123be:	6a22      	ldr	r2, [r4, #32]
   123c0:	f852 3f14 	ldr.w	r3, [r2, #20]!
   123c4:	f8c0 300b 	str.w	r3, [r0, #11]
   123c8:	6853      	ldr	r3, [r2, #4]
   123ca:	f8c0 300f 	str.w	r3, [r0, #15]
   123ce:	7a2b      	ldrb	r3, [r5, #8]
   123d0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   123d4:	4629      	mov	r1, r5
   123d6:	4620      	mov	r0, r4
   123d8:	f7fe fec7 	bl	1116a <smpSendPkt>
   123dc:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   123e0:	2e00      	cmp	r6, #0
   123e2:	d1c8      	bne.n	12376 <smpSendKey+0x90>
   123e4:	2004      	movs	r0, #4
   123e6:	f002 ff2c 	bl	15242 <WsfMsgAlloc>
   123ea:	4601      	mov	r1, r0
   123ec:	2800      	cmp	r0, #0
   123ee:	d0c2      	beq.n	12376 <smpSendKey+0x90>
   123f0:	230c      	movs	r3, #12
   123f2:	7083      	strb	r3, [r0, #2]
   123f4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   123f8:	8003      	strh	r3, [r0, #0]
   123fa:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
   123fe:	f002 ff44 	bl	1528a <WsfMsgSend>
   12402:	e7aa      	b.n	1235a <smpSendKey+0x74>
   12404:	07b1      	lsls	r1, r6, #30
   12406:	d508      	bpl.n	1241a <smpSendKey+0x134>
   12408:	b10b      	cbz	r3, 1240e <smpSendKey+0x128>
   1240a:	2b07      	cmp	r3, #7
   1240c:	d105      	bne.n	1241a <smpSendKey+0x134>
   1240e:	2308      	movs	r3, #8
   12410:	722b      	strb	r3, [r5, #8]
   12412:	f7fe f9fd 	bl	10810 <DmSecGetLocalIrk>
   12416:	4601      	mov	r1, r0
   12418:	e7c1      	b.n	1239e <smpSendKey+0xb8>
   1241a:	2b08      	cmp	r3, #8
   1241c:	d10b      	bne.n	12436 <smpSendKey+0x150>
   1241e:	2309      	movs	r3, #9
   12420:	722b      	strb	r3, [r5, #8]
   12422:	2300      	movs	r3, #0
   12424:	726b      	strb	r3, [r5, #9]
   12426:	f004 fe45 	bl	170b4 <HciGetBdAddr>
   1242a:	4601      	mov	r1, r0
   1242c:	f105 000a 	add.w	r0, r5, #10
   12430:	f002 f8aa 	bl	14588 <BdaCpy>
   12434:	e7cb      	b.n	123ce <smpSendKey+0xe8>
   12436:	0772      	lsls	r2, r6, #29
   12438:	d50c      	bpl.n	12454 <smpSendKey+0x16e>
   1243a:	2b09      	cmp	r3, #9
   1243c:	d80a      	bhi.n	12454 <smpSendKey+0x16e>
   1243e:	f240 2281 	movw	r2, #641	; 0x281
   12442:	fa22 f303 	lsr.w	r3, r2, r3
   12446:	07db      	lsls	r3, r3, #31
   12448:	d504      	bpl.n	12454 <smpSendKey+0x16e>
   1244a:	230a      	movs	r3, #10
   1244c:	722b      	strb	r3, [r5, #8]
   1244e:	f7fe f9d9 	bl	10804 <DmSecGetLocalCsrk>
   12452:	e7e0      	b.n	12416 <smpSendKey+0x130>
   12454:	4628      	mov	r0, r5
   12456:	f002 ff0b 	bl	15270 <WsfMsgFree>
   1245a:	2601      	movs	r6, #1
   1245c:	e77d      	b.n	1235a <smpSendKey+0x74>
   1245e:	bf00      	nop
   12460:	10003f0c 	.word	0x10003f0c

00012464 <smpProcRcvKey>:
   12464:	b570      	push	{r4, r5, r6, lr}
   12466:	461e      	mov	r6, r3
   12468:	7a13      	ldrb	r3, [r2, #8]
   1246a:	2b06      	cmp	r3, #6
   1246c:	460c      	mov	r4, r1
   1246e:	4605      	mov	r5, r0
   12470:	f102 0109 	add.w	r1, r2, #9
   12474:	d104      	bne.n	12480 <smpProcRcvKey+0x1c>
   12476:	1d20      	adds	r0, r4, #4
   12478:	f002 f8d1 	bl	1461e <Calc128Cpy>
   1247c:	2200      	movs	r2, #0
   1247e:	e016      	b.n	124ae <smpProcRcvKey+0x4a>
   12480:	2b07      	cmp	r3, #7
   12482:	d126      	bne.n	124d2 <smpProcRcvKey+0x6e>
   12484:	7a91      	ldrb	r1, [r2, #10]
   12486:	7a53      	ldrb	r3, [r2, #9]
   12488:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1248c:	83a3      	strh	r3, [r4, #28]
   1248e:	f852 3f0b 	ldr.w	r3, [r2, #11]!
   12492:	6163      	str	r3, [r4, #20]
   12494:	6853      	ldr	r3, [r2, #4]
   12496:	61a3      	str	r3, [r4, #24]
   12498:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1249c:	f013 0f04 	tst.w	r3, #4
   124a0:	bf14      	ite	ne
   124a2:	2302      	movne	r3, #2
   124a4:	2301      	moveq	r3, #1
   124a6:	77e3      	strb	r3, [r4, #31]
   124a8:	2302      	movs	r3, #2
   124aa:	77a3      	strb	r3, [r4, #30]
   124ac:	2201      	movs	r2, #1
   124ae:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   124b2:	2b06      	cmp	r3, #6
   124b4:	d001      	beq.n	124ba <smpProcRcvKey+0x56>
   124b6:	2b08      	cmp	r3, #8
   124b8:	d120      	bne.n	124fc <smpProcRcvKey+0x98>
   124ba:	3301      	adds	r3, #1
   124bc:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   124c0:	2500      	movs	r5, #0
   124c2:	b122      	cbz	r2, 124ce <smpProcRcvKey+0x6a>
   124c4:	232f      	movs	r3, #47	; 0x2f
   124c6:	70a3      	strb	r3, [r4, #2]
   124c8:	4620      	mov	r0, r4
   124ca:	f7fe f8d3 	bl	10674 <DmSmpCbackExec>
   124ce:	4628      	mov	r0, r5
   124d0:	bd70      	pop	{r4, r5, r6, pc}
   124d2:	2b08      	cmp	r3, #8
   124d4:	d0cf      	beq.n	12476 <smpProcRcvKey+0x12>
   124d6:	2b09      	cmp	r3, #9
   124d8:	d109      	bne.n	124ee <smpProcRcvKey+0x8a>
   124da:	7a53      	ldrb	r3, [r2, #9]
   124dc:	76a3      	strb	r3, [r4, #26]
   124de:	f102 010a 	add.w	r1, r2, #10
   124e2:	f104 0014 	add.w	r0, r4, #20
   124e6:	f002 f84f 	bl	14588 <BdaCpy>
   124ea:	2304      	movs	r3, #4
   124ec:	e7dd      	b.n	124aa <smpProcRcvKey+0x46>
   124ee:	2b0a      	cmp	r3, #10
   124f0:	d1c4      	bne.n	1247c <smpProcRcvKey+0x18>
   124f2:	1d20      	adds	r0, r4, #4
   124f4:	f002 f893 	bl	1461e <Calc128Cpy>
   124f8:	2308      	movs	r3, #8
   124fa:	e7d6      	b.n	124aa <smpProcRcvKey+0x46>
   124fc:	07b0      	lsls	r0, r6, #30
   124fe:	d503      	bpl.n	12508 <smpProcRcvKey+0xa4>
   12500:	2b07      	cmp	r3, #7
   12502:	d101      	bne.n	12508 <smpProcRcvKey+0xa4>
   12504:	2308      	movs	r3, #8
   12506:	e7d9      	b.n	124bc <smpProcRcvKey+0x58>
   12508:	0771      	lsls	r1, r6, #29
   1250a:	d505      	bpl.n	12518 <smpProcRcvKey+0xb4>
   1250c:	2b07      	cmp	r3, #7
   1250e:	d001      	beq.n	12514 <smpProcRcvKey+0xb0>
   12510:	2b09      	cmp	r3, #9
   12512:	d101      	bne.n	12518 <smpProcRcvKey+0xb4>
   12514:	230a      	movs	r3, #10
   12516:	e7d1      	b.n	124bc <smpProcRcvKey+0x58>
   12518:	2501      	movs	r5, #1
   1251a:	e7d2      	b.n	124c2 <smpProcRcvKey+0x5e>

0001251c <smpActMaxAttempts>:
   1251c:	b510      	push	{r4, lr}
   1251e:	4604      	mov	r4, r0
   12520:	f7ff fe73 	bl	1220a <smpActPairingCancel>
   12524:	230f      	movs	r3, #15
   12526:	7323      	strb	r3, [r4, #12]
   12528:	4b04      	ldr	r3, [pc, #16]	; (1253c <smpActMaxAttempts+0x20>)
   1252a:	681b      	ldr	r3, [r3, #0]
   1252c:	4620      	mov	r0, r4
   1252e:	8819      	ldrh	r1, [r3, #0]
   12530:	f003 f852 	bl	155d8 <WsfTimerStartMs>
   12534:	2300      	movs	r3, #0
   12536:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   1253a:	bd10      	pop	{r4, pc}
   1253c:	10002ba0 	.word	0x10002ba0

00012540 <smpActAttemptRcvd>:
   12540:	2301      	movs	r3, #1
   12542:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   12546:	4770      	bx	lr

00012548 <smpActCheckAttempts>:
   12548:	b510      	push	{r4, lr}
   1254a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   1254e:	4604      	mov	r4, r0
   12550:	b153      	cbz	r3, 12568 <smpActCheckAttempts+0x20>
   12552:	2300      	movs	r3, #0
   12554:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   12558:	2109      	movs	r1, #9
   1255a:	f7ff fe31 	bl	121c0 <smpSendPairingFailed>
   1255e:	4620      	mov	r0, r4
   12560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12564:	f7ff be11 	b.w	1218a <smpCleanup>
   12568:	bd10      	pop	{r4, pc}

0001256a <smpActPairingCmpl>:
   1256a:	b513      	push	{r0, r1, r4, lr}
   1256c:	4604      	mov	r4, r0
   1256e:	f7ff fe0c 	bl	1218a <smpCleanup>
   12572:	2200      	movs	r2, #0
   12574:	2101      	movs	r1, #1
   12576:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1257a:	f7fd fbe5 	bl	fd48 <DmConnSetIdle>
   1257e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   12582:	f88d 3004 	strb.w	r3, [sp, #4]
   12586:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1258a:	f8ad 3000 	strh.w	r3, [sp]
   1258e:	4668      	mov	r0, sp
   12590:	232a      	movs	r3, #42	; 0x2a
   12592:	f88d 3002 	strb.w	r3, [sp, #2]
   12596:	f7fe f86d 	bl	10674 <DmSmpCbackExec>
   1259a:	f7fe fa1f 	bl	109dc <DmSecGetEccKey>
   1259e:	b002      	add	sp, #8
   125a0:	bd10      	pop	{r4, pc}

000125a2 <smpSmExecute>:
   125a2:	b570      	push	{r4, r5, r6, lr}
   125a4:	4604      	mov	r4, r0
   125a6:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   125aa:	460d      	mov	r5, r1
   125ac:	f7fd fbf6 	bl	fd9c <DmConnRole>
   125b0:	4b13      	ldr	r3, [pc, #76]	; (12600 <smpSmExecute+0x5e>)
   125b2:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   125b6:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
   125ba:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   125be:	78ae      	ldrb	r6, [r5, #2]
   125c0:	2801      	cmp	r0, #1
   125c2:	bf18      	it	ne
   125c4:	461a      	movne	r2, r3
   125c6:	6813      	ldr	r3, [r2, #0]
   125c8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   125cc:	4603      	mov	r3, r0
   125ce:	7819      	ldrb	r1, [r3, #0]
   125d0:	42b1      	cmp	r1, r6
   125d2:	d10b      	bne.n	125ec <smpSmExecute+0x4a>
   125d4:	7859      	ldrb	r1, [r3, #1]
   125d6:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   125da:	7899      	ldrb	r1, [r3, #2]
   125dc:	6853      	ldr	r3, [r2, #4]
   125de:	4620      	mov	r0, r4
   125e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   125e4:	4629      	mov	r1, r5
   125e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   125ea:	4718      	bx	r3
   125ec:	f813 1f03 	ldrb.w	r1, [r3, #3]!
   125f0:	2900      	cmp	r1, #0
   125f2:	d1ec      	bne.n	125ce <smpSmExecute+0x2c>
   125f4:	6890      	ldr	r0, [r2, #8]
   125f6:	f100 010c 	add.w	r1, r0, #12
   125fa:	4299      	cmp	r1, r3
   125fc:	d1e6      	bne.n	125cc <smpSmExecute+0x2a>
   125fe:	bd70      	pop	{r4, r5, r6, pc}
   12600:	10003f0c 	.word	0x10003f0c

00012604 <smpProcPairing>:
   12604:	b513      	push	{r0, r1, r4, lr}
   12606:	2300      	movs	r3, #0
   12608:	7013      	strb	r3, [r2, #0]
   1260a:	700b      	strb	r3, [r1, #0]
   1260c:	7c83      	ldrb	r3, [r0, #18]
   1260e:	2b01      	cmp	r3, #1
   12610:	d127      	bne.n	12662 <smpProcPairing+0x5e>
   12612:	7e43      	ldrb	r3, [r0, #25]
   12614:	2b01      	cmp	r3, #1
   12616:	d124      	bne.n	12662 <smpProcPairing+0x5e>
   12618:	700b      	strb	r3, [r1, #0]
   1261a:	7cc3      	ldrb	r3, [r0, #19]
   1261c:	7e82      	ldrb	r2, [r0, #26]
   1261e:	4013      	ands	r3, r2
   12620:	f043 0304 	orr.w	r3, r3, #4
   12624:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   12628:	2300      	movs	r3, #0
   1262a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   1262e:	2a00      	cmp	r2, #0
   12630:	d049      	beq.n	126c6 <smpProcPairing+0xc2>
   12632:	7cc1      	ldrb	r1, [r0, #19]
   12634:	4a2d      	ldr	r2, [pc, #180]	; (126ec <smpProcPairing+0xe8>)
   12636:	6812      	ldr	r2, [r2, #0]
   12638:	2b00      	cmp	r3, #0
   1263a:	d046      	beq.n	126ca <smpProcPairing+0xc6>
   1263c:	7993      	ldrb	r3, [r2, #6]
   1263e:	f003 0304 	and.w	r3, r3, #4
   12642:	4219      	tst	r1, r3
   12644:	d041      	beq.n	126ca <smpProcPairing+0xc6>
   12646:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1264a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1264e:	f240 3303 	movw	r3, #771	; 0x303
   12652:	a901      	add	r1, sp, #4
   12654:	f8ad 3006 	strh.w	r3, [sp, #6]
   12658:	f7ff ffa3 	bl	125a2 <smpSmExecute>
   1265c:	2000      	movs	r0, #0
   1265e:	b002      	add	sp, #8
   12660:	bd10      	pop	{r4, pc}
   12662:	7cc1      	ldrb	r1, [r0, #19]
   12664:	074b      	lsls	r3, r1, #29
   12666:	d402      	bmi.n	1266e <smpProcPairing+0x6a>
   12668:	7e83      	ldrb	r3, [r0, #26]
   1266a:	075c      	lsls	r4, r3, #29
   1266c:	d509      	bpl.n	12682 <smpProcPairing+0x7e>
   1266e:	7c44      	ldrb	r4, [r0, #17]
   12670:	2c03      	cmp	r4, #3
   12672:	d006      	beq.n	12682 <smpProcPairing+0x7e>
   12674:	7e03      	ldrb	r3, [r0, #24]
   12676:	2b03      	cmp	r3, #3
   12678:	d003      	beq.n	12682 <smpProcPairing+0x7e>
   1267a:	2c01      	cmp	r4, #1
   1267c:	d809      	bhi.n	12692 <smpProcPairing+0x8e>
   1267e:	2b01      	cmp	r3, #1
   12680:	d81f      	bhi.n	126c2 <smpProcPairing+0xbe>
   12682:	7e83      	ldrb	r3, [r0, #26]
   12684:	4019      	ands	r1, r3
   12686:	f021 0104 	bic.w	r1, r1, #4
   1268a:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
   1268e:	2301      	movs	r3, #1
   12690:	e7cb      	b.n	1262a <smpProcPairing+0x26>
   12692:	2c04      	cmp	r4, #4
   12694:	d113      	bne.n	126be <smpProcPairing+0xba>
   12696:	2b02      	cmp	r3, #2
   12698:	d013      	beq.n	126c2 <smpProcPairing+0xbe>
   1269a:	1f19      	subs	r1, r3, #4
   1269c:	424b      	negs	r3, r1
   1269e:	414b      	adcs	r3, r1
   126a0:	7013      	strb	r3, [r2, #0]
   126a2:	7e01      	ldrb	r1, [r0, #24]
   126a4:	2902      	cmp	r1, #2
   126a6:	d102      	bne.n	126ae <smpProcPairing+0xaa>
   126a8:	7c41      	ldrb	r1, [r0, #17]
   126aa:	2902      	cmp	r1, #2
   126ac:	d0b5      	beq.n	1261a <smpProcPairing+0x16>
   126ae:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   126b2:	2900      	cmp	r1, #0
   126b4:	bf08      	it	eq
   126b6:	f083 0301 	eoreq.w	r3, r3, #1
   126ba:	7013      	strb	r3, [r2, #0]
   126bc:	e7ad      	b.n	1261a <smpProcPairing+0x16>
   126be:	2300      	movs	r3, #0
   126c0:	e7ee      	b.n	126a0 <smpProcPairing+0x9c>
   126c2:	2301      	movs	r3, #1
   126c4:	e7ec      	b.n	126a0 <smpProcPairing+0x9c>
   126c6:	7e81      	ldrb	r1, [r0, #26]
   126c8:	e7b4      	b.n	12634 <smpProcPairing+0x30>
   126ca:	78d3      	ldrb	r3, [r2, #3]
   126cc:	7d02      	ldrb	r2, [r0, #20]
   126ce:	429a      	cmp	r2, r3
   126d0:	d302      	bcc.n	126d8 <smpProcPairing+0xd4>
   126d2:	7ec2      	ldrb	r2, [r0, #27]
   126d4:	429a      	cmp	r2, r3
   126d6:	d206      	bcs.n	126e6 <smpProcPairing+0xe2>
   126d8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   126dc:	f8ad 3004 	strh.w	r3, [sp, #4]
   126e0:	f240 6303 	movw	r3, #1539	; 0x603
   126e4:	e7b5      	b.n	12652 <smpProcPairing+0x4e>
   126e6:	2001      	movs	r0, #1
   126e8:	e7b9      	b.n	1265e <smpProcPairing+0x5a>
   126ea:	bf00      	nop
   126ec:	10002ba0 	.word	0x10002ba0

000126f0 <smpAuthReq>:
   126f0:	b510      	push	{r4, lr}
   126f2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   126f6:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   126fa:	b086      	sub	sp, #24
   126fc:	f013 0304 	ands.w	r3, r3, #4
   12700:	f8ad 4000 	strh.w	r4, [sp]
   12704:	d00b      	beq.n	1271e <smpAuthReq+0x2e>
   12706:	232e      	movs	r3, #46	; 0x2e
   12708:	4668      	mov	r0, sp
   1270a:	f88d 3002 	strb.w	r3, [sp, #2]
   1270e:	f88d 1004 	strb.w	r1, [sp, #4]
   12712:	f88d 2005 	strb.w	r2, [sp, #5]
   12716:	f7fd ffad 	bl	10674 <DmSmpCbackExec>
   1271a:	b006      	add	sp, #24
   1271c:	bd10      	pop	{r4, pc}
   1271e:	2204      	movs	r2, #4
   12720:	f8ad 3004 	strh.w	r3, [sp, #4]
   12724:	f88d 3006 	strb.w	r3, [sp, #6]
   12728:	4669      	mov	r1, sp
   1272a:	2303      	movs	r3, #3
   1272c:	f88d 2002 	strb.w	r2, [sp, #2]
   12730:	f88d 3014 	strb.w	r3, [sp, #20]
   12734:	f7ff ff35 	bl	125a2 <smpSmExecute>
   12738:	e7ef      	b.n	1271a <smpAuthReq+0x2a>
   1273a:	bf00      	nop

0001273c <smpiActPairReq>:
   1273c:	b538      	push	{r3, r4, r5, lr}
   1273e:	2201      	movs	r2, #1
   12740:	4604      	mov	r4, r0
   12742:	460d      	mov	r5, r1
   12744:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   12748:	4611      	mov	r1, r2
   1274a:	f7fd fafd 	bl	fd48 <DmConnSetIdle>
   1274e:	2302      	movs	r3, #2
   12750:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12754:	4620      	mov	r0, r4
   12756:	f7ff fd11 	bl	1217c <smpStartRspTimer>
   1275a:	2040      	movs	r0, #64	; 0x40
   1275c:	f002 fce2 	bl	15124 <WsfBufAlloc>
   12760:	6220      	str	r0, [r4, #32]
   12762:	200f      	movs	r0, #15
   12764:	f7fe fd4c 	bl	11200 <smpMsgAlloc>
   12768:	4601      	mov	r1, r0
   1276a:	b1e0      	cbz	r0, 127a6 <smpiActPairReq+0x6a>
   1276c:	2301      	movs	r3, #1
   1276e:	7203      	strb	r3, [r0, #8]
   12770:	4b0d      	ldr	r3, [pc, #52]	; (127a8 <smpiActPairReq+0x6c>)
   12772:	681b      	ldr	r3, [r3, #0]
   12774:	789a      	ldrb	r2, [r3, #2]
   12776:	7242      	strb	r2, [r0, #9]
   12778:	792a      	ldrb	r2, [r5, #4]
   1277a:	7282      	strb	r2, [r0, #10]
   1277c:	796a      	ldrb	r2, [r5, #5]
   1277e:	72c2      	strb	r2, [r0, #11]
   12780:	791b      	ldrb	r3, [r3, #4]
   12782:	7303      	strb	r3, [r0, #12]
   12784:	79ab      	ldrb	r3, [r5, #6]
   12786:	7343      	strb	r3, [r0, #13]
   12788:	79eb      	ldrb	r3, [r5, #7]
   1278a:	7383      	strb	r3, [r0, #14]
   1278c:	4603      	mov	r3, r0
   1278e:	f853 0f08 	ldr.w	r0, [r3, #8]!
   12792:	6120      	str	r0, [r4, #16]
   12794:	8898      	ldrh	r0, [r3, #4]
   12796:	82a0      	strh	r0, [r4, #20]
   12798:	799b      	ldrb	r3, [r3, #6]
   1279a:	75a3      	strb	r3, [r4, #22]
   1279c:	4620      	mov	r0, r4
   1279e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127a2:	f7fe bce2 	b.w	1116a <smpSendPkt>
   127a6:	bd38      	pop	{r3, r4, r5, pc}
   127a8:	10002ba0 	.word	0x10002ba0

000127ac <smpiActCheckSecurityReq>:
   127ac:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   127b0:	b12a      	cbz	r2, 127be <smpiActCheckSecurityReq+0x12>
   127b2:	2200      	movs	r2, #0
   127b4:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
   127b8:	78c9      	ldrb	r1, [r1, #3]
   127ba:	f7ff bd01 	b.w	121c0 <smpSendPairingFailed>
   127be:	4770      	bx	lr

000127c0 <smpiActProcSecurityReq>:
   127c0:	b507      	push	{r0, r1, r2, lr}
   127c2:	2301      	movs	r3, #1
   127c4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   127c8:	684b      	ldr	r3, [r1, #4]
   127ca:	7a5b      	ldrb	r3, [r3, #9]
   127cc:	f88d 3004 	strb.w	r3, [sp, #4]
   127d0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   127d4:	f8ad 3000 	strh.w	r3, [sp]
   127d8:	4668      	mov	r0, sp
   127da:	2332      	movs	r3, #50	; 0x32
   127dc:	f88d 3002 	strb.w	r3, [sp, #2]
   127e0:	f7fd ff48 	bl	10674 <DmSmpCbackExec>
   127e4:	b003      	add	sp, #12
   127e6:	f85d fb04 	ldr.w	pc, [sp], #4

000127ea <smpiActProcPairRsp>:
   127ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   127ec:	684a      	ldr	r2, [r1, #4]
   127ee:	7d45      	ldrb	r5, [r0, #21]
   127f0:	4613      	mov	r3, r2
   127f2:	4604      	mov	r4, r0
   127f4:	f853 6f08 	ldr.w	r6, [r3, #8]!
   127f8:	f8c0 6017 	str.w	r6, [r0, #23]
   127fc:	889e      	ldrh	r6, [r3, #4]
   127fe:	f8a0 601b 	strh.w	r6, [r0, #27]
   12802:	799b      	ldrb	r3, [r3, #6]
   12804:	7743      	strb	r3, [r0, #29]
   12806:	7b53      	ldrb	r3, [r2, #13]
   12808:	43ab      	bics	r3, r5
   1280a:	d103      	bne.n	12814 <smpiActProcPairRsp+0x2a>
   1280c:	7d85      	ldrb	r5, [r0, #22]
   1280e:	7b93      	ldrb	r3, [r2, #14]
   12810:	43ab      	bics	r3, r5
   12812:	d007      	beq.n	12824 <smpiActProcPairRsp+0x3a>
   12814:	f640 2303 	movw	r3, #2563	; 0xa03
   12818:	804b      	strh	r3, [r1, #2]
   1281a:	4620      	mov	r0, r4
   1281c:	f7ff fec1 	bl	125a2 <smpSmExecute>
   12820:	b002      	add	sp, #8
   12822:	bd70      	pop	{r4, r5, r6, pc}
   12824:	4d09      	ldr	r5, [pc, #36]	; (1284c <smpiActProcPairRsp+0x62>)
   12826:	f10d 0207 	add.w	r2, sp, #7
   1282a:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   1282e:	f10d 0106 	add.w	r1, sp, #6
   12832:	4798      	blx	r3
   12834:	2800      	cmp	r0, #0
   12836:	d0f3      	beq.n	12820 <smpiActProcPairRsp+0x36>
   12838:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   1283c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12840:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12844:	4620      	mov	r0, r4
   12846:	4798      	blx	r3
   12848:	e7ea      	b.n	12820 <smpiActProcPairRsp+0x36>
   1284a:	bf00      	nop
   1284c:	10003f0c 	.word	0x10003f0c

00012850 <smpiActProcPairCnf>:
   12850:	b538      	push	{r3, r4, r5, lr}
   12852:	6a02      	ldr	r2, [r0, #32]
   12854:	684b      	ldr	r3, [r1, #4]
   12856:	4604      	mov	r4, r0
   12858:	f103 0109 	add.w	r1, r3, #9
   1285c:	3220      	adds	r2, #32
   1285e:	3319      	adds	r3, #25
   12860:	f851 0b04 	ldr.w	r0, [r1], #4
   12864:	f842 0b04 	str.w	r0, [r2], #4
   12868:	4299      	cmp	r1, r3
   1286a:	d1f9      	bne.n	12860 <smpiActProcPairCnf+0x10>
   1286c:	2504      	movs	r5, #4
   1286e:	4620      	mov	r0, r4
   12870:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   12874:	f7ff fc82 	bl	1217c <smpStartRspTimer>
   12878:	2019      	movs	r0, #25
   1287a:	f7fe fcc1 	bl	11200 <smpMsgAlloc>
   1287e:	4601      	mov	r1, r0
   12880:	b180      	cbz	r0, 128a4 <smpiActProcPairCnf+0x54>
   12882:	7205      	strb	r5, [r0, #8]
   12884:	6a23      	ldr	r3, [r4, #32]
   12886:	3009      	adds	r0, #9
   12888:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1288c:	3340      	adds	r3, #64	; 0x40
   1288e:	f852 5b04 	ldr.w	r5, [r2], #4
   12892:	f840 5b04 	str.w	r5, [r0], #4
   12896:	429a      	cmp	r2, r3
   12898:	d1f9      	bne.n	1288e <smpiActProcPairCnf+0x3e>
   1289a:	4620      	mov	r0, r4
   1289c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   128a0:	f7fe bc63 	b.w	1116a <smpSendPkt>
   128a4:	bd38      	pop	{r3, r4, r5, pc}

000128a6 <smpiActCnfVerify>:
   128a6:	b570      	push	{r4, r5, r6, lr}
   128a8:	460e      	mov	r6, r1
   128aa:	6a05      	ldr	r5, [r0, #32]
   128ac:	4604      	mov	r4, r0
   128ae:	2210      	movs	r2, #16
   128b0:	f105 0120 	add.w	r1, r5, #32
   128b4:	6870      	ldr	r0, [r6, #4]
   128b6:	f7f9 fc23 	bl	c100 <memcmp>
   128ba:	b1c8      	cbz	r0, 128f0 <smpiActCnfVerify+0x4a>
   128bc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   128c0:	b19b      	cbz	r3, 128ea <smpiActCnfVerify+0x44>
   128c2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   128c6:	4a0f      	ldr	r2, [pc, #60]	; (12904 <smpiActCnfVerify+0x5e>)
   128c8:	3301      	adds	r3, #1
   128ca:	b2db      	uxtb	r3, r3
   128cc:	6812      	ldr	r2, [r2, #0]
   128ce:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   128d2:	7952      	ldrb	r2, [r2, #5]
   128d4:	429a      	cmp	r2, r3
   128d6:	d108      	bne.n	128ea <smpiActCnfVerify+0x44>
   128d8:	f640 130d 	movw	r3, #2317	; 0x90d
   128dc:	8073      	strh	r3, [r6, #2]
   128de:	4631      	mov	r1, r6
   128e0:	4620      	mov	r0, r4
   128e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   128e6:	f7ff be5c 	b.w	125a2 <smpSmExecute>
   128ea:	f240 4303 	movw	r3, #1027	; 0x403
   128ee:	e7f5      	b.n	128dc <smpiActCnfVerify+0x36>
   128f0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   128f4:	f105 0210 	add.w	r2, r5, #16
   128f8:	4629      	mov	r1, r5
   128fa:	4620      	mov	r0, r4
   128fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12900:	f7fe bbdc 	b.w	110bc <smpCalcS1>
   12904:	10002ba0 	.word	0x10002ba0

00012908 <smpiActStkEncrypt>:
   12908:	b530      	push	{r4, r5, lr}
   1290a:	7ec4      	ldrb	r4, [r0, #27]
   1290c:	7d03      	ldrb	r3, [r0, #20]
   1290e:	6849      	ldr	r1, [r1, #4]
   12910:	429c      	cmp	r4, r3
   12912:	b085      	sub	sp, #20
   12914:	bf28      	it	cs
   12916:	461c      	movcs	r4, r3
   12918:	4605      	mov	r5, r0
   1291a:	4622      	mov	r2, r4
   1291c:	4668      	mov	r0, sp
   1291e:	f7f9 fc1f 	bl	c160 <memcpy>
   12922:	2100      	movs	r1, #0
   12924:	f1c4 0210 	rsb	r2, r4, #16
   12928:	eb0d 0004 	add.w	r0, sp, r4
   1292c:	f7f9 fd16 	bl	c35c <memset>
   12930:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   12934:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   12938:	f013 0f04 	tst.w	r3, #4
   1293c:	466a      	mov	r2, sp
   1293e:	bf14      	ite	ne
   12940:	2102      	movne	r1, #2
   12942:	2101      	moveq	r1, #1
   12944:	f7ff fb4c 	bl	11fe0 <DmSmpEncryptReq>
   12948:	b005      	add	sp, #20
   1294a:	bd30      	pop	{r4, r5, pc}

0001294c <smpiActSetupKeyDist>:
   1294c:	b538      	push	{r3, r4, r5, lr}
   1294e:	4604      	mov	r4, r0
   12950:	460d      	mov	r5, r1
   12952:	f7ff fc13 	bl	1217c <smpStartRspTimer>
   12956:	6a23      	ldr	r3, [r4, #32]
   12958:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1295c:	801a      	strh	r2, [r3, #0]
   1295e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   12962:	f012 0f04 	tst.w	r2, #4
   12966:	bf14      	ite	ne
   12968:	2202      	movne	r2, #2
   1296a:	2201      	moveq	r2, #1
   1296c:	77da      	strb	r2, [r3, #31]
   1296e:	7ee2      	ldrb	r2, [r4, #27]
   12970:	7d21      	ldrb	r1, [r4, #20]
   12972:	428a      	cmp	r2, r1
   12974:	bf28      	it	cs
   12976:	460a      	movcs	r2, r1
   12978:	f883 2020 	strb.w	r2, [r3, #32]
   1297c:	2300      	movs	r3, #0
   1297e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12982:	7f62      	ldrb	r2, [r4, #29]
   12984:	7da3      	ldrb	r3, [r4, #22]
   12986:	4013      	ands	r3, r2
   12988:	07d8      	lsls	r0, r3, #31
   1298a:	d518      	bpl.n	129be <smpiActSetupKeyDist+0x72>
   1298c:	4a0f      	ldr	r2, [pc, #60]	; (129cc <smpiActSetupKeyDist+0x80>)
   1298e:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   12992:	b192      	cbz	r2, 129ba <smpiActSetupKeyDist+0x6e>
   12994:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12996:	7812      	ldrb	r2, [r2, #0]
   12998:	b17a      	cbz	r2, 129ba <smpiActSetupKeyDist+0x6e>
   1299a:	0799      	lsls	r1, r3, #30
   1299c:	d502      	bpl.n	129a4 <smpiActSetupKeyDist+0x58>
   1299e:	2308      	movs	r3, #8
   129a0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   129a4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   129a8:	b97b      	cbnz	r3, 129ca <smpiActSetupKeyDist+0x7e>
   129aa:	230c      	movs	r3, #12
   129ac:	70ab      	strb	r3, [r5, #2]
   129ae:	4629      	mov	r1, r5
   129b0:	4620      	mov	r0, r4
   129b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   129b6:	f7ff bdf4 	b.w	125a2 <smpSmExecute>
   129ba:	2306      	movs	r3, #6
   129bc:	e7f0      	b.n	129a0 <smpiActSetupKeyDist+0x54>
   129be:	079a      	lsls	r2, r3, #30
   129c0:	d4ed      	bmi.n	1299e <smpiActSetupKeyDist+0x52>
   129c2:	075b      	lsls	r3, r3, #29
   129c4:	d5ee      	bpl.n	129a4 <smpiActSetupKeyDist+0x58>
   129c6:	230a      	movs	r3, #10
   129c8:	e7ea      	b.n	129a0 <smpiActSetupKeyDist+0x54>
   129ca:	bd38      	pop	{r3, r4, r5, pc}
   129cc:	10003f0c 	.word	0x10003f0c

000129d0 <smpiActRcvKey>:
   129d0:	b538      	push	{r3, r4, r5, lr}
   129d2:	7d82      	ldrb	r2, [r0, #22]
   129d4:	7f43      	ldrb	r3, [r0, #29]
   129d6:	460d      	mov	r5, r1
   129d8:	4013      	ands	r3, r2
   129da:	684a      	ldr	r2, [r1, #4]
   129dc:	6a01      	ldr	r1, [r0, #32]
   129de:	4604      	mov	r4, r0
   129e0:	f7ff fd40 	bl	12464 <smpProcRcvKey>
   129e4:	b150      	cbz	r0, 129fc <smpiActRcvKey+0x2c>
   129e6:	2300      	movs	r3, #0
   129e8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   129ec:	230c      	movs	r3, #12
   129ee:	70ab      	strb	r3, [r5, #2]
   129f0:	4629      	mov	r1, r5
   129f2:	4620      	mov	r0, r4
   129f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   129f8:	f7ff bdd3 	b.w	125a2 <smpSmExecute>
   129fc:	bd38      	pop	{r3, r4, r5, pc}

000129fe <smpiActSendKey>:
   129fe:	b538      	push	{r3, r4, r5, lr}
   12a00:	460d      	mov	r5, r1
   12a02:	7f03      	ldrb	r3, [r0, #28]
   12a04:	7d41      	ldrb	r1, [r0, #21]
   12a06:	4019      	ands	r1, r3
   12a08:	4604      	mov	r4, r0
   12a0a:	f7ff fc6c 	bl	122e6 <smpSendKey>
   12a0e:	b138      	cbz	r0, 12a20 <smpiActSendKey+0x22>
   12a10:	230e      	movs	r3, #14
   12a12:	70ab      	strb	r3, [r5, #2]
   12a14:	4629      	mov	r1, r5
   12a16:	4620      	mov	r0, r4
   12a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12a1c:	f7ff bdc1 	b.w	125a2 <smpSmExecute>
   12a20:	bd38      	pop	{r3, r4, r5, pc}
   12a22:	bf00      	nop

00012a24 <smpiScActAuthSelect>:
   12a24:	f7ff b815 	b.w	11a52 <smpScActAuthSelect>

00012a28 <smpiScActSendPubKey>:
   12a28:	230c      	movs	r3, #12
   12a2a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12a2e:	f7fe bd50 	b.w	114d2 <smpScSendPubKey>

00012a32 <smpiScActJwncSetup>:
   12a32:	b538      	push	{r3, r4, r5, lr}
   12a34:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a36:	4d0b      	ldr	r5, [pc, #44]	; (12a64 <smpiScActJwncSetup+0x32>)
   12a38:	4604      	mov	r4, r0
   12a3a:	2110      	movs	r1, #16
   12a3c:	68d8      	ldr	r0, [r3, #12]
   12a3e:	f001 fd7f 	bl	14540 <SecRand>
   12a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a44:	68d8      	ldr	r0, [r3, #12]
   12a46:	4629      	mov	r1, r5
   12a48:	3020      	adds	r0, #32
   12a4a:	f001 fde8 	bl	1461e <Calc128Cpy>
   12a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a50:	68d8      	ldr	r0, [r3, #12]
   12a52:	4629      	mov	r1, r5
   12a54:	3030      	adds	r0, #48	; 0x30
   12a56:	f001 fde2 	bl	1461e <Calc128Cpy>
   12a5a:	2303      	movs	r3, #3
   12a5c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12a60:	bd38      	pop	{r3, r4, r5, pc}
   12a62:	bf00      	nop
   12a64:	00022a0c 	.word	0x00022a0c

00012a68 <smpiScActJwncSendRand>:
   12a68:	b538      	push	{r3, r4, r5, lr}
   12a6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a6c:	4604      	mov	r4, r0
   12a6e:	460d      	mov	r5, r1
   12a70:	68d8      	ldr	r0, [r3, #12]
   12a72:	6849      	ldr	r1, [r1, #4]
   12a74:	2210      	movs	r2, #16
   12a76:	3109      	adds	r1, #9
   12a78:	3040      	adds	r0, #64	; 0x40
   12a7a:	f001 fe0b 	bl	14694 <WStrReverseCpy>
   12a7e:	2304      	movs	r3, #4
   12a80:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12a84:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a86:	4629      	mov	r1, r5
   12a88:	68da      	ldr	r2, [r3, #12]
   12a8a:	4620      	mov	r0, r4
   12a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12a90:	f7fe bd79 	b.w	11586 <smpScSendRand>

00012a94 <smpiScActJwncCalcF4>:
   12a94:	b538      	push	{r3, r4, r5, lr}
   12a96:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a98:	4604      	mov	r4, r0
   12a9a:	460d      	mov	r5, r1
   12a9c:	68d8      	ldr	r0, [r3, #12]
   12a9e:	6849      	ldr	r1, [r1, #4]
   12aa0:	2210      	movs	r2, #16
   12aa2:	3109      	adds	r1, #9
   12aa4:	4410      	add	r0, r2
   12aa6:	f001 fdf5 	bl	14694 <WStrReverseCpy>
   12aaa:	4629      	mov	r1, r5
   12aac:	4620      	mov	r0, r4
   12aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12ab2:	f7ff b818 	b.w	11ae6 <smpScActJwncCalcF4>

00012ab6 <smpiScActJwncCalcG2>:
   12ab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12aba:	4604      	mov	r4, r0
   12abc:	68d8      	ldr	r0, [r3, #12]
   12abe:	460d      	mov	r5, r1
   12ac0:	2210      	movs	r2, #16
   12ac2:	6849      	ldr	r1, [r1, #4]
   12ac4:	3040      	adds	r0, #64	; 0x40
   12ac6:	f7f9 fb1b 	bl	c100 <memcmp>
   12aca:	b168      	cbz	r0, 12ae8 <smpiScActJwncCalcG2+0x32>
   12acc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12ad0:	f8ad 3004 	strh.w	r3, [sp, #4]
   12ad4:	a901      	add	r1, sp, #4
   12ad6:	f240 4303 	movw	r3, #1027	; 0x403
   12ada:	4620      	mov	r0, r4
   12adc:	f8ad 3006 	strh.w	r3, [sp, #6]
   12ae0:	f7ff fd5f 	bl	125a2 <smpSmExecute>
   12ae4:	b003      	add	sp, #12
   12ae6:	bd30      	pop	{r4, r5, pc}
   12ae8:	4629      	mov	r1, r5
   12aea:	4620      	mov	r0, r4
   12aec:	f7ff f81d 	bl	11b2a <smpScActJwncCalcG2>
   12af0:	e7f8      	b.n	12ae4 <smpiScActJwncCalcG2+0x2e>

00012af2 <smpiScActPkCalcCa>:
   12af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12af4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12af6:	78da      	ldrb	r2, [r3, #3]
   12af8:	4604      	mov	r4, r0
   12afa:	460d      	mov	r5, r1
   12afc:	b9da      	cbnz	r2, 12b36 <smpiScActPkCalcCa+0x44>
   12afe:	68d8      	ldr	r0, [r3, #12]
   12b00:	4919      	ldr	r1, [pc, #100]	; (12b68 <smpiScActPkCalcCa+0x76>)
   12b02:	3020      	adds	r0, #32
   12b04:	f001 fd8b 	bl	1461e <Calc128Cpy>
   12b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b0a:	4917      	ldr	r1, [pc, #92]	; (12b68 <smpiScActPkCalcCa+0x76>)
   12b0c:	68d8      	ldr	r0, [r3, #12]
   12b0e:	3030      	adds	r0, #48	; 0x30
   12b10:	f001 fd85 	bl	1461e <Calc128Cpy>
   12b14:	7d2a      	ldrb	r2, [r5, #20]
   12b16:	2a03      	cmp	r2, #3
   12b18:	d80d      	bhi.n	12b36 <smpiScActPkCalcCa+0x44>
   12b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b1c:	68d8      	ldr	r0, [r3, #12]
   12b1e:	1d2e      	adds	r6, r5, #4
   12b20:	4631      	mov	r1, r6
   12b22:	302d      	adds	r0, #45	; 0x2d
   12b24:	f001 fdb6 	bl	14694 <WStrReverseCpy>
   12b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b2a:	7d2a      	ldrb	r2, [r5, #20]
   12b2c:	68d8      	ldr	r0, [r3, #12]
   12b2e:	4631      	mov	r1, r6
   12b30:	303d      	adds	r0, #61	; 0x3d
   12b32:	f001 fdaf 	bl	14694 <WStrReverseCpy>
   12b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b38:	2110      	movs	r1, #16
   12b3a:	68d8      	ldr	r0, [r3, #12]
   12b3c:	f001 fd00 	bl	14540 <SecRand>
   12b40:	f7fd ff4c 	bl	109dc <DmSecGetEccKey>
   12b44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b46:	4606      	mov	r6, r0
   12b48:	4620      	mov	r0, r4
   12b4a:	689f      	ldr	r7, [r3, #8]
   12b4c:	f7fe fd6b 	bl	11626 <smpGetPkBit>
   12b50:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b52:	68db      	ldr	r3, [r3, #12]
   12b54:	4632      	mov	r2, r6
   12b56:	e9cd 0300 	strd	r0, r3, [sp]
   12b5a:	4629      	mov	r1, r5
   12b5c:	463b      	mov	r3, r7
   12b5e:	4620      	mov	r0, r4
   12b60:	f7fe fc48 	bl	113f4 <SmpScCalcF4>
   12b64:	b003      	add	sp, #12
   12b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b68:	00022a0c 	.word	0x00022a0c

00012b6c <smpiScActPkCalcCb>:
   12b6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b70:	4604      	mov	r4, r0
   12b72:	460d      	mov	r5, r1
   12b74:	68d8      	ldr	r0, [r3, #12]
   12b76:	6849      	ldr	r1, [r1, #4]
   12b78:	2210      	movs	r2, #16
   12b7a:	3109      	adds	r1, #9
   12b7c:	4410      	add	r0, r2
   12b7e:	f001 fd89 	bl	14694 <WStrReverseCpy>
   12b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b84:	689e      	ldr	r6, [r3, #8]
   12b86:	f7fd ff29 	bl	109dc <DmSecGetEccKey>
   12b8a:	4607      	mov	r7, r0
   12b8c:	4620      	mov	r0, r4
   12b8e:	f7fe fd4a 	bl	11626 <smpGetPkBit>
   12b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b94:	68d9      	ldr	r1, [r3, #12]
   12b96:	3110      	adds	r1, #16
   12b98:	e9cd 0100 	strd	r0, r1, [sp]
   12b9c:	463b      	mov	r3, r7
   12b9e:	4632      	mov	r2, r6
   12ba0:	4629      	mov	r1, r5
   12ba2:	4620      	mov	r0, r4
   12ba4:	f7fe fc26 	bl	113f4 <SmpScCalcF4>
   12ba8:	b003      	add	sp, #12
   12baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012bac <smpiScActPkSendCnf>:
   12bac:	684a      	ldr	r2, [r1, #4]
   12bae:	f7fe bd12 	b.w	115d6 <smpScSendPairCnf>

00012bb2 <smpiScActPkSendRand>:
   12bb2:	f7ff bf59 	b.w	12a68 <smpiScActJwncSendRand>

00012bb6 <smpiScActPkCheck>:
   12bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12bb8:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12bba:	6849      	ldr	r1, [r1, #4]
   12bbc:	4604      	mov	r4, r0
   12bbe:	68e8      	ldr	r0, [r5, #12]
   12bc0:	2210      	movs	r2, #16
   12bc2:	3040      	adds	r0, #64	; 0x40
   12bc4:	f7f9 fa9c 	bl	c100 <memcmp>
   12bc8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12bcc:	b158      	cbz	r0, 12be6 <smpiScActPkCheck+0x30>
   12bce:	f240 4303 	movw	r3, #1027	; 0x403
   12bd2:	f8ad 2004 	strh.w	r2, [sp, #4]
   12bd6:	f8ad 3006 	strh.w	r3, [sp, #6]
   12bda:	a901      	add	r1, sp, #4
   12bdc:	4620      	mov	r0, r4
   12bde:	f7ff fce0 	bl	125a2 <smpSmExecute>
   12be2:	b003      	add	sp, #12
   12be4:	bd30      	pop	{r4, r5, pc}
   12be6:	78eb      	ldrb	r3, [r5, #3]
   12be8:	3301      	adds	r3, #1
   12bea:	b2db      	uxtb	r3, r3
   12bec:	2b13      	cmp	r3, #19
   12bee:	70eb      	strb	r3, [r5, #3]
   12bf0:	bf97      	itett	ls
   12bf2:	2303      	movls	r3, #3
   12bf4:	231a      	movhi	r3, #26
   12bf6:	f884 302f 	strbls.w	r3, [r4, #47]	; 0x2f
   12bfa:	2319      	movls	r3, #25
   12bfc:	f88d 3006 	strb.w	r3, [sp, #6]
   12c00:	f8ad 2004 	strh.w	r2, [sp, #4]
   12c04:	e7e9      	b.n	12bda <smpiScActPkCheck+0x24>

00012c06 <smpiScActOobCalcCb>:
   12c06:	b530      	push	{r4, r5, lr}
   12c08:	7c83      	ldrb	r3, [r0, #18]
   12c0a:	2b01      	cmp	r3, #1
   12c0c:	b085      	sub	sp, #20
   12c0e:	4604      	mov	r4, r0
   12c10:	460d      	mov	r5, r1
   12c12:	d005      	beq.n	12c20 <smpiScActOobCalcCb+0x1a>
   12c14:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c16:	4913      	ldr	r1, [pc, #76]	; (12c64 <smpiScActOobCalcCb+0x5e>)
   12c18:	68d8      	ldr	r0, [r3, #12]
   12c1a:	3020      	adds	r0, #32
   12c1c:	f001 fcff 	bl	1461e <Calc128Cpy>
   12c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c22:	7e62      	ldrb	r2, [r4, #25]
   12c24:	68d8      	ldr	r0, [r3, #12]
   12c26:	2a01      	cmp	r2, #1
   12c28:	f100 0030 	add.w	r0, r0, #48	; 0x30
   12c2c:	d10a      	bne.n	12c44 <smpiScActOobCalcCb+0x3e>
   12c2e:	689b      	ldr	r3, [r3, #8]
   12c30:	9001      	str	r0, [sp, #4]
   12c32:	2200      	movs	r2, #0
   12c34:	9200      	str	r2, [sp, #0]
   12c36:	4629      	mov	r1, r5
   12c38:	461a      	mov	r2, r3
   12c3a:	4620      	mov	r0, r4
   12c3c:	f7fe fbda 	bl	113f4 <SmpScCalcF4>
   12c40:	b005      	add	sp, #20
   12c42:	bd30      	pop	{r4, r5, pc}
   12c44:	4907      	ldr	r1, [pc, #28]	; (12c64 <smpiScActOobCalcCb+0x5e>)
   12c46:	f001 fcea 	bl	1461e <Calc128Cpy>
   12c4a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12c4e:	f8ad 300c 	strh.w	r3, [sp, #12]
   12c52:	a903      	add	r1, sp, #12
   12c54:	231b      	movs	r3, #27
   12c56:	4620      	mov	r0, r4
   12c58:	f88d 300e 	strb.w	r3, [sp, #14]
   12c5c:	f7ff fca1 	bl	125a2 <smpSmExecute>
   12c60:	e7ee      	b.n	12c40 <smpiScActOobCalcCb+0x3a>
   12c62:	bf00      	nop
   12c64:	00022a0c 	.word	0x00022a0c

00012c68 <smpiScActOobSendRand>:
   12c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12c6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c6c:	68de      	ldr	r6, [r3, #12]
   12c6e:	7e43      	ldrb	r3, [r0, #25]
   12c70:	2b01      	cmp	r3, #1
   12c72:	4604      	mov	r4, r0
   12c74:	460d      	mov	r5, r1
   12c76:	d114      	bne.n	12ca2 <smpiScActOobSendRand+0x3a>
   12c78:	2210      	movs	r2, #16
   12c7a:	6849      	ldr	r1, [r1, #4]
   12c7c:	f106 0040 	add.w	r0, r6, #64	; 0x40
   12c80:	f7f9 fa3e 	bl	c100 <memcmp>
   12c84:	b168      	cbz	r0, 12ca2 <smpiScActOobSendRand+0x3a>
   12c86:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12c8a:	f8ad 3004 	strh.w	r3, [sp, #4]
   12c8e:	a901      	add	r1, sp, #4
   12c90:	f240 4303 	movw	r3, #1027	; 0x403
   12c94:	4620      	mov	r0, r4
   12c96:	f8ad 3006 	strh.w	r3, [sp, #6]
   12c9a:	f7ff fc82 	bl	125a2 <smpSmExecute>
   12c9e:	b002      	add	sp, #8
   12ca0:	bd70      	pop	{r4, r5, r6, pc}
   12ca2:	2304      	movs	r3, #4
   12ca4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ca8:	4630      	mov	r0, r6
   12caa:	2110      	movs	r1, #16
   12cac:	f001 fc48 	bl	14540 <SecRand>
   12cb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12cb2:	4629      	mov	r1, r5
   12cb4:	68da      	ldr	r2, [r3, #12]
   12cb6:	4620      	mov	r0, r4
   12cb8:	f7fe fc65 	bl	11586 <smpScSendRand>
   12cbc:	e7ef      	b.n	12c9e <smpiScActOobSendRand+0x36>

00012cbe <smpiScActOobProcRand>:
   12cbe:	b538      	push	{r3, r4, r5, lr}
   12cc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12cc2:	4604      	mov	r4, r0
   12cc4:	460d      	mov	r5, r1
   12cc6:	68d8      	ldr	r0, [r3, #12]
   12cc8:	6849      	ldr	r1, [r1, #4]
   12cca:	2210      	movs	r2, #16
   12ccc:	3109      	adds	r1, #9
   12cce:	4410      	add	r0, r2
   12cd0:	f001 fce0 	bl	14694 <WStrReverseCpy>
   12cd4:	4629      	mov	r1, r5
   12cd6:	4620      	mov	r0, r4
   12cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12cdc:	f7fe bfb6 	b.w	11c4c <smpScActCalcSharedSecret>

00012ce0 <smpiScActDHKeyCheckSend>:
   12ce0:	b538      	push	{r3, r4, r5, lr}
   12ce2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12ce4:	4604      	mov	r4, r0
   12ce6:	68d8      	ldr	r0, [r3, #12]
   12ce8:	2210      	movs	r2, #16
   12cea:	460d      	mov	r5, r1
   12cec:	4410      	add	r0, r2
   12cee:	6849      	ldr	r1, [r1, #4]
   12cf0:	f001 fcd0 	bl	14694 <WStrReverseCpy>
   12cf4:	230d      	movs	r3, #13
   12cf6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12cfc:	4629      	mov	r1, r5
   12cfe:	68da      	ldr	r2, [r3, #12]
   12d00:	4620      	mov	r0, r4
   12d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12d06:	f7fe bc16 	b.w	11536 <smpScSendDHKeyCheck>

00012d0a <smpiScActDHKeyCheckVerify>:
   12d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d0c:	6b47      	ldr	r7, [r0, #52]	; 0x34
   12d0e:	4604      	mov	r4, r0
   12d10:	68fb      	ldr	r3, [r7, #12]
   12d12:	6848      	ldr	r0, [r1, #4]
   12d14:	2210      	movs	r2, #16
   12d16:	b085      	sub	sp, #20
   12d18:	1899      	adds	r1, r3, r2
   12d1a:	3009      	adds	r0, #9
   12d1c:	f7f9 f9f0 	bl	c100 <memcmp>
   12d20:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   12d24:	4606      	mov	r6, r0
   12d26:	b9c0      	cbnz	r0, 12d5a <smpiScActDHKeyCheckVerify+0x50>
   12d28:	7ee3      	ldrb	r3, [r4, #27]
   12d2a:	7d24      	ldrb	r4, [r4, #20]
   12d2c:	6939      	ldr	r1, [r7, #16]
   12d2e:	429c      	cmp	r4, r3
   12d30:	bf28      	it	cs
   12d32:	461c      	movcs	r4, r3
   12d34:	4622      	mov	r2, r4
   12d36:	3110      	adds	r1, #16
   12d38:	4668      	mov	r0, sp
   12d3a:	f7f9 fa11 	bl	c160 <memcpy>
   12d3e:	f1c4 0210 	rsb	r2, r4, #16
   12d42:	4631      	mov	r1, r6
   12d44:	eb0d 0004 	add.w	r0, sp, r4
   12d48:	f7f9 fb08 	bl	c35c <memset>
   12d4c:	466a      	mov	r2, sp
   12d4e:	2103      	movs	r1, #3
   12d50:	4628      	mov	r0, r5
   12d52:	f7ff f945 	bl	11fe0 <DmSmpEncryptReq>
   12d56:	b005      	add	sp, #20
   12d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d5a:	f640 331c 	movw	r3, #2844	; 0xb1c
   12d5e:	4669      	mov	r1, sp
   12d60:	4620      	mov	r0, r4
   12d62:	f8ad 5000 	strh.w	r5, [sp]
   12d66:	f8ad 3002 	strh.w	r3, [sp, #2]
   12d6a:	f7ff fc1a 	bl	125a2 <smpSmExecute>
   12d6e:	e7f2      	b.n	12d56 <smpiScActDHKeyCheckVerify+0x4c>

00012d70 <smprActSendSecurityReq>:
   12d70:	b538      	push	{r3, r4, r5, lr}
   12d72:	2301      	movs	r3, #1
   12d74:	4604      	mov	r4, r0
   12d76:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12d7a:	200a      	movs	r0, #10
   12d7c:	460d      	mov	r5, r1
   12d7e:	f7fe fa3f 	bl	11200 <smpMsgAlloc>
   12d82:	b148      	cbz	r0, 12d98 <smprActSendSecurityReq+0x28>
   12d84:	230b      	movs	r3, #11
   12d86:	7203      	strb	r3, [r0, #8]
   12d88:	792b      	ldrb	r3, [r5, #4]
   12d8a:	7243      	strb	r3, [r0, #9]
   12d8c:	4601      	mov	r1, r0
   12d8e:	4620      	mov	r0, r4
   12d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12d94:	f7fe b9e9 	b.w	1116a <smpSendPkt>
   12d98:	bd38      	pop	{r3, r4, r5, pc}

00012d9a <smprActCheckSecurityReq>:
   12d9a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   12d9e:	b10b      	cbz	r3, 12da4 <smprActCheckSecurityReq+0xa>
   12da0:	f7ff ba1f 	b.w	121e2 <smpActPairingFailed>
   12da4:	4770      	bx	lr

00012da6 <smprActClearSecurityReq>:
   12da6:	2300      	movs	r3, #0
   12da8:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12dac:	4770      	bx	lr

00012dae <smprActProcPairReq>:
   12dae:	6a03      	ldr	r3, [r0, #32]
   12db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12db2:	4604      	mov	r4, r0
   12db4:	460d      	mov	r5, r1
   12db6:	b96b      	cbnz	r3, 12dd4 <smprActProcPairReq+0x26>
   12db8:	2040      	movs	r0, #64	; 0x40
   12dba:	f002 f9b3 	bl	15124 <WsfBufAlloc>
   12dbe:	6220      	str	r0, [r4, #32]
   12dc0:	b940      	cbnz	r0, 12dd4 <smprActProcPairReq+0x26>
   12dc2:	f640 0303 	movw	r3, #2051	; 0x803
   12dc6:	806b      	strh	r3, [r5, #2]
   12dc8:	4629      	mov	r1, r5
   12dca:	4620      	mov	r0, r4
   12dcc:	f7ff fbe9 	bl	125a2 <smpSmExecute>
   12dd0:	b003      	add	sp, #12
   12dd2:	bd30      	pop	{r4, r5, pc}
   12dd4:	2201      	movs	r2, #1
   12dd6:	4611      	mov	r1, r2
   12dd8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   12ddc:	f7fc ffb4 	bl	fd48 <DmConnSetIdle>
   12de0:	686b      	ldr	r3, [r5, #4]
   12de2:	461a      	mov	r2, r3
   12de4:	f852 0f08 	ldr.w	r0, [r2, #8]!
   12de8:	6120      	str	r0, [r4, #16]
   12dea:	8890      	ldrh	r0, [r2, #4]
   12dec:	82a0      	strh	r0, [r4, #20]
   12dee:	7992      	ldrb	r2, [r2, #6]
   12df0:	75a2      	strb	r2, [r4, #22]
   12df2:	7a9a      	ldrb	r2, [r3, #10]
   12df4:	f88d 2005 	strb.w	r2, [sp, #5]
   12df8:	7ada      	ldrb	r2, [r3, #11]
   12dfa:	f88d 2004 	strb.w	r2, [sp, #4]
   12dfe:	7b5a      	ldrb	r2, [r3, #13]
   12e00:	7b9b      	ldrb	r3, [r3, #14]
   12e02:	f88d 3007 	strb.w	r3, [sp, #7]
   12e06:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12e0a:	f8ad 3000 	strh.w	r3, [sp]
   12e0e:	4668      	mov	r0, sp
   12e10:	2331      	movs	r3, #49	; 0x31
   12e12:	f88d 2006 	strb.w	r2, [sp, #6]
   12e16:	f88d 3002 	strb.w	r3, [sp, #2]
   12e1a:	f7fd fc2b 	bl	10674 <DmSmpCbackExec>
   12e1e:	e7d7      	b.n	12dd0 <smprActProcPairReq+0x22>

00012e20 <smprActSendPairRsp>:
   12e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12e22:	2302      	movs	r3, #2
   12e24:	75c3      	strb	r3, [r0, #23]
   12e26:	4b20      	ldr	r3, [pc, #128]	; (12ea8 <smprActSendPairRsp+0x88>)
   12e28:	4e20      	ldr	r6, [pc, #128]	; (12eac <smprActSendPairRsp+0x8c>)
   12e2a:	681b      	ldr	r3, [r3, #0]
   12e2c:	789a      	ldrb	r2, [r3, #2]
   12e2e:	7602      	strb	r2, [r0, #24]
   12e30:	790a      	ldrb	r2, [r1, #4]
   12e32:	7642      	strb	r2, [r0, #25]
   12e34:	794a      	ldrb	r2, [r1, #5]
   12e36:	7682      	strb	r2, [r0, #26]
   12e38:	791b      	ldrb	r3, [r3, #4]
   12e3a:	76c3      	strb	r3, [r0, #27]
   12e3c:	798b      	ldrb	r3, [r1, #6]
   12e3e:	7703      	strb	r3, [r0, #28]
   12e40:	79cb      	ldrb	r3, [r1, #7]
   12e42:	7743      	strb	r3, [r0, #29]
   12e44:	460d      	mov	r5, r1
   12e46:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
   12e4a:	f10d 0207 	add.w	r2, sp, #7
   12e4e:	f10d 0106 	add.w	r1, sp, #6
   12e52:	4604      	mov	r4, r0
   12e54:	4798      	blx	r3
   12e56:	b320      	cbz	r0, 12ea2 <smprActSendPairRsp+0x82>
   12e58:	796b      	ldrb	r3, [r5, #5]
   12e5a:	7ce2      	ldrb	r2, [r4, #19]
   12e5c:	f003 0308 	and.w	r3, r3, #8
   12e60:	4213      	tst	r3, r2
   12e62:	bf14      	ite	ne
   12e64:	230c      	movne	r3, #12
   12e66:	2303      	moveq	r3, #3
   12e68:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12e6c:	4620      	mov	r0, r4
   12e6e:	f7ff f985 	bl	1217c <smpStartRspTimer>
   12e72:	200f      	movs	r0, #15
   12e74:	f7fe f9c4 	bl	11200 <smpMsgAlloc>
   12e78:	4601      	mov	r1, r0
   12e7a:	b150      	cbz	r0, 12e92 <smprActSendPairRsp+0x72>
   12e7c:	4623      	mov	r3, r4
   12e7e:	f853 0f17 	ldr.w	r0, [r3, #23]!
   12e82:	6088      	str	r0, [r1, #8]
   12e84:	8898      	ldrh	r0, [r3, #4]
   12e86:	8188      	strh	r0, [r1, #12]
   12e88:	799b      	ldrb	r3, [r3, #6]
   12e8a:	738b      	strb	r3, [r1, #14]
   12e8c:	4620      	mov	r0, r4
   12e8e:	f7fe f96c 	bl	1116a <smpSendPkt>
   12e92:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
   12e96:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12e9a:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12e9e:	4620      	mov	r0, r4
   12ea0:	4798      	blx	r3
   12ea2:	b002      	add	sp, #8
   12ea4:	bd70      	pop	{r4, r5, r6, pc}
   12ea6:	bf00      	nop
   12ea8:	10002ba0 	.word	0x10002ba0
   12eac:	10003f0c 	.word	0x10003f0c

00012eb0 <smprActProcPairCnf>:
   12eb0:	b510      	push	{r4, lr}
   12eb2:	684b      	ldr	r3, [r1, #4]
   12eb4:	6a02      	ldr	r2, [r0, #32]
   12eb6:	f103 0109 	add.w	r1, r3, #9
   12eba:	3220      	adds	r2, #32
   12ebc:	3319      	adds	r3, #25
   12ebe:	f851 4b04 	ldr.w	r4, [r1], #4
   12ec2:	f842 4b04 	str.w	r4, [r2], #4
   12ec6:	4299      	cmp	r1, r3
   12ec8:	d1f9      	bne.n	12ebe <smprActProcPairCnf+0xe>
   12eca:	2300      	movs	r3, #0
   12ecc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12ed0:	bd10      	pop	{r4, pc}

00012ed2 <smprActProcPairCnfCalc1>:
   12ed2:	b510      	push	{r4, lr}
   12ed4:	4604      	mov	r4, r0
   12ed6:	f7ff ffeb 	bl	12eb0 <smprActProcPairCnf>
   12eda:	6a00      	ldr	r0, [r0, #32]
   12edc:	2110      	movs	r1, #16
   12ede:	3030      	adds	r0, #48	; 0x30
   12ee0:	f001 fb2e 	bl	14540 <SecRand>
   12ee4:	6a21      	ldr	r1, [r4, #32]
   12ee6:	4620      	mov	r0, r4
   12ee8:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12ef0:	f7fd bfe2 	b.w	10eb8 <smpCalcC1Part1>

00012ef4 <smprActCnfVerify>:
   12ef4:	b570      	push	{r4, r5, r6, lr}
   12ef6:	460e      	mov	r6, r1
   12ef8:	6a05      	ldr	r5, [r0, #32]
   12efa:	4604      	mov	r4, r0
   12efc:	2210      	movs	r2, #16
   12efe:	f105 0120 	add.w	r1, r5, #32
   12f02:	6870      	ldr	r0, [r6, #4]
   12f04:	f7f9 f8fc 	bl	c100 <memcmp>
   12f08:	b1a8      	cbz	r0, 12f36 <smprActCnfVerify+0x42>
   12f0a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   12f0e:	4a0f      	ldr	r2, [pc, #60]	; (12f4c <smprActCnfVerify+0x58>)
   12f10:	3301      	adds	r3, #1
   12f12:	b2db      	uxtb	r3, r3
   12f14:	6812      	ldr	r2, [r2, #0]
   12f16:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   12f1a:	7952      	ldrb	r2, [r2, #5]
   12f1c:	429a      	cmp	r2, r3
   12f1e:	bf0c      	ite	eq
   12f20:	f240 430d 	movweq	r3, #1037	; 0x40d
   12f24:	f240 4303 	movwne	r3, #1027	; 0x403
   12f28:	8073      	strh	r3, [r6, #2]
   12f2a:	4631      	mov	r1, r6
   12f2c:	4620      	mov	r0, r4
   12f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f32:	f7ff bb36 	b.w	125a2 <smpSmExecute>
   12f36:	f105 0310 	add.w	r3, r5, #16
   12f3a:	f105 0230 	add.w	r2, r5, #48	; 0x30
   12f3e:	4629      	mov	r1, r5
   12f40:	4620      	mov	r0, r4
   12f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f46:	f7fe b8b9 	b.w	110bc <smpCalcS1>
   12f4a:	bf00      	nop
   12f4c:	10002ba0 	.word	0x10002ba0

00012f50 <smprActSendPairRandom>:
   12f50:	b538      	push	{r3, r4, r5, lr}
   12f52:	7ec5      	ldrb	r5, [r0, #27]
   12f54:	7d03      	ldrb	r3, [r0, #20]
   12f56:	6849      	ldr	r1, [r1, #4]
   12f58:	429d      	cmp	r5, r3
   12f5a:	4604      	mov	r4, r0
   12f5c:	6a00      	ldr	r0, [r0, #32]
   12f5e:	bf28      	it	cs
   12f60:	461d      	movcs	r5, r3
   12f62:	462a      	mov	r2, r5
   12f64:	3020      	adds	r0, #32
   12f66:	f7f9 f8fb 	bl	c160 <memcpy>
   12f6a:	6a20      	ldr	r0, [r4, #32]
   12f6c:	3020      	adds	r0, #32
   12f6e:	2100      	movs	r1, #0
   12f70:	f1c5 0210 	rsb	r2, r5, #16
   12f74:	4428      	add	r0, r5
   12f76:	f7f9 f9f1 	bl	c35c <memset>
   12f7a:	4620      	mov	r0, r4
   12f7c:	f7ff f8fe 	bl	1217c <smpStartRspTimer>
   12f80:	2019      	movs	r0, #25
   12f82:	f7fe f93d 	bl	11200 <smpMsgAlloc>
   12f86:	4601      	mov	r1, r0
   12f88:	b188      	cbz	r0, 12fae <smprActSendPairRandom+0x5e>
   12f8a:	2304      	movs	r3, #4
   12f8c:	7203      	strb	r3, [r0, #8]
   12f8e:	6a23      	ldr	r3, [r4, #32]
   12f90:	3009      	adds	r0, #9
   12f92:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12f96:	3340      	adds	r3, #64	; 0x40
   12f98:	f852 5b04 	ldr.w	r5, [r2], #4
   12f9c:	f840 5b04 	str.w	r5, [r0], #4
   12fa0:	429a      	cmp	r2, r3
   12fa2:	d1f9      	bne.n	12f98 <smprActSendPairRandom+0x48>
   12fa4:	4620      	mov	r0, r4
   12fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12faa:	f7fe b8de 	b.w	1116a <smpSendPkt>
   12fae:	bd38      	pop	{r3, r4, r5, pc}

00012fb0 <smprActSendKey>:
   12fb0:	b538      	push	{r3, r4, r5, lr}
   12fb2:	460d      	mov	r5, r1
   12fb4:	7f43      	ldrb	r3, [r0, #29]
   12fb6:	7d81      	ldrb	r1, [r0, #22]
   12fb8:	4019      	ands	r1, r3
   12fba:	4604      	mov	r4, r0
   12fbc:	f7ff f993 	bl	122e6 <smpSendKey>
   12fc0:	b330      	cbz	r0, 13010 <smprActSendKey+0x60>
   12fc2:	2300      	movs	r3, #0
   12fc4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12fc8:	7f22      	ldrb	r2, [r4, #28]
   12fca:	7d63      	ldrb	r3, [r4, #21]
   12fcc:	4013      	ands	r3, r2
   12fce:	07d8      	lsls	r0, r3, #31
   12fd0:	d518      	bpl.n	13004 <smprActSendKey+0x54>
   12fd2:	4a10      	ldr	r2, [pc, #64]	; (13014 <smprActSendKey+0x64>)
   12fd4:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   12fd8:	b192      	cbz	r2, 13000 <smprActSendKey+0x50>
   12fda:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12fdc:	7812      	ldrb	r2, [r2, #0]
   12fde:	b17a      	cbz	r2, 13000 <smprActSendKey+0x50>
   12fe0:	0799      	lsls	r1, r3, #30
   12fe2:	d502      	bpl.n	12fea <smprActSendKey+0x3a>
   12fe4:	2308      	movs	r3, #8
   12fe6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12fea:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   12fee:	b97b      	cbnz	r3, 13010 <smprActSendKey+0x60>
   12ff0:	230e      	movs	r3, #14
   12ff2:	70ab      	strb	r3, [r5, #2]
   12ff4:	4629      	mov	r1, r5
   12ff6:	4620      	mov	r0, r4
   12ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12ffc:	f7ff bad1 	b.w	125a2 <smpSmExecute>
   13000:	2306      	movs	r3, #6
   13002:	e7f0      	b.n	12fe6 <smprActSendKey+0x36>
   13004:	079a      	lsls	r2, r3, #30
   13006:	d4ed      	bmi.n	12fe4 <smprActSendKey+0x34>
   13008:	075b      	lsls	r3, r3, #29
   1300a:	d5ee      	bpl.n	12fea <smprActSendKey+0x3a>
   1300c:	230a      	movs	r3, #10
   1300e:	e7ea      	b.n	12fe6 <smprActSendKey+0x36>
   13010:	bd38      	pop	{r3, r4, r5, pc}
   13012:	bf00      	nop
   13014:	10003f0c 	.word	0x10003f0c

00013018 <smprActSetupKeyDist>:
   13018:	b538      	push	{r3, r4, r5, lr}
   1301a:	4604      	mov	r4, r0
   1301c:	2300      	movs	r3, #0
   1301e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   13022:	460d      	mov	r5, r1
   13024:	f7ff f8aa 	bl	1217c <smpStartRspTimer>
   13028:	6a23      	ldr	r3, [r4, #32]
   1302a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1302e:	801a      	strh	r2, [r3, #0]
   13030:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   13034:	f012 0f04 	tst.w	r2, #4
   13038:	bf14      	ite	ne
   1303a:	2202      	movne	r2, #2
   1303c:	2201      	moveq	r2, #1
   1303e:	77da      	strb	r2, [r3, #31]
   13040:	7d21      	ldrb	r1, [r4, #20]
   13042:	7ee2      	ldrb	r2, [r4, #27]
   13044:	428a      	cmp	r2, r1
   13046:	bf28      	it	cs
   13048:	460a      	movcs	r2, r1
   1304a:	f883 2020 	strb.w	r2, [r3, #32]
   1304e:	4629      	mov	r1, r5
   13050:	4620      	mov	r0, r4
   13052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13056:	f7ff bfab 	b.w	12fb0 <smprActSendKey>

0001305a <smprActRcvKey>:
   1305a:	b538      	push	{r3, r4, r5, lr}
   1305c:	7d42      	ldrb	r2, [r0, #21]
   1305e:	7f03      	ldrb	r3, [r0, #28]
   13060:	460d      	mov	r5, r1
   13062:	4013      	ands	r3, r2
   13064:	684a      	ldr	r2, [r1, #4]
   13066:	6a01      	ldr	r1, [r0, #32]
   13068:	4604      	mov	r4, r0
   1306a:	f7ff f9fb 	bl	12464 <smpProcRcvKey>
   1306e:	b138      	cbz	r0, 13080 <smprActRcvKey+0x26>
   13070:	230e      	movs	r3, #14
   13072:	70ab      	strb	r3, [r5, #2]
   13074:	4629      	mov	r1, r5
   13076:	4620      	mov	r0, r4
   13078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1307c:	f7ff ba91 	b.w	125a2 <smpSmExecute>
   13080:	bd38      	pop	{r3, r4, r5, pc}
   13082:	bf00      	nop

00013084 <smprScActStoreLescPin>:
   13084:	b570      	push	{r4, r5, r6, lr}
   13086:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13088:	785a      	ldrb	r2, [r3, #1]
   1308a:	2a03      	cmp	r2, #3
   1308c:	4604      	mov	r4, r0
   1308e:	460d      	mov	r5, r1
   13090:	d11d      	bne.n	130ce <smprScActStoreLescPin+0x4a>
   13092:	68d8      	ldr	r0, [r3, #12]
   13094:	490e      	ldr	r1, [pc, #56]	; (130d0 <smprScActStoreLescPin+0x4c>)
   13096:	3020      	adds	r0, #32
   13098:	f001 fac1 	bl	1461e <Calc128Cpy>
   1309c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1309e:	490c      	ldr	r1, [pc, #48]	; (130d0 <smprScActStoreLescPin+0x4c>)
   130a0:	68d8      	ldr	r0, [r3, #12]
   130a2:	3030      	adds	r0, #48	; 0x30
   130a4:	f001 fabb 	bl	1461e <Calc128Cpy>
   130a8:	7d2a      	ldrb	r2, [r5, #20]
   130aa:	2a03      	cmp	r2, #3
   130ac:	d80f      	bhi.n	130ce <smprScActStoreLescPin+0x4a>
   130ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   130b0:	68d8      	ldr	r0, [r3, #12]
   130b2:	1d2e      	adds	r6, r5, #4
   130b4:	4631      	mov	r1, r6
   130b6:	302d      	adds	r0, #45	; 0x2d
   130b8:	f001 faec 	bl	14694 <WStrReverseCpy>
   130bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   130be:	7d2a      	ldrb	r2, [r5, #20]
   130c0:	68d8      	ldr	r0, [r3, #12]
   130c2:	4631      	mov	r1, r6
   130c4:	303d      	adds	r0, #61	; 0x3d
   130c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   130ca:	f001 bae3 	b.w	14694 <WStrReverseCpy>
   130ce:	bd70      	pop	{r4, r5, r6, pc}
   130d0:	00022a0c 	.word	0x00022a0c

000130d4 <smprScActSendPubKey>:
   130d4:	b538      	push	{r3, r4, r5, lr}
   130d6:	4604      	mov	r4, r0
   130d8:	460d      	mov	r5, r1
   130da:	f7fe fcba 	bl	11a52 <smpScActAuthSelect>
   130de:	4629      	mov	r1, r5
   130e0:	4620      	mov	r0, r4
   130e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   130e6:	f7fe b9f4 	b.w	114d2 <smpScSendPubKey>

000130ea <smprScActJwncSetup>:
   130ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
   130ec:	b570      	push	{r4, r5, r6, lr}
   130ee:	4604      	mov	r4, r0
   130f0:	68d8      	ldr	r0, [r3, #12]
   130f2:	4d0d      	ldr	r5, [pc, #52]	; (13128 <smprScActJwncSetup+0x3e>)
   130f4:	460e      	mov	r6, r1
   130f6:	2110      	movs	r1, #16
   130f8:	4408      	add	r0, r1
   130fa:	f001 fa21 	bl	14540 <SecRand>
   130fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13100:	68d8      	ldr	r0, [r3, #12]
   13102:	4629      	mov	r1, r5
   13104:	3020      	adds	r0, #32
   13106:	f001 fa8a 	bl	1461e <Calc128Cpy>
   1310a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1310c:	68d8      	ldr	r0, [r3, #12]
   1310e:	4629      	mov	r1, r5
   13110:	3030      	adds	r0, #48	; 0x30
   13112:	f001 fa84 	bl	1461e <Calc128Cpy>
   13116:	2304      	movs	r3, #4
   13118:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1311c:	4631      	mov	r1, r6
   1311e:	4620      	mov	r0, r4
   13120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13124:	f7fe bcdf 	b.w	11ae6 <smpScActJwncCalcF4>
   13128:	00022a0c 	.word	0x00022a0c

0001312c <smprScActJwncSendCnf>:
   1312c:	684a      	ldr	r2, [r1, #4]
   1312e:	f7fe ba52 	b.w	115d6 <smpScSendPairCnf>

00013132 <smprScActJwncCalcG2>:
   13132:	b538      	push	{r3, r4, r5, lr}
   13134:	460d      	mov	r5, r1
   13136:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13138:	6849      	ldr	r1, [r1, #4]
   1313a:	4604      	mov	r4, r0
   1313c:	3109      	adds	r1, #9
   1313e:	68d8      	ldr	r0, [r3, #12]
   13140:	2210      	movs	r2, #16
   13142:	f001 faa7 	bl	14694 <WStrReverseCpy>
   13146:	4629      	mov	r1, r5
   13148:	4620      	mov	r0, r4
   1314a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1314e:	f7fe bcec 	b.w	11b2a <smpScActJwncCalcG2>

00013152 <smprScActPkStoreCnf>:
   13152:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13154:	6849      	ldr	r1, [r1, #4]
   13156:	68d8      	ldr	r0, [r3, #12]
   13158:	2210      	movs	r2, #16
   1315a:	3109      	adds	r1, #9
   1315c:	3050      	adds	r0, #80	; 0x50
   1315e:	f001 ba99 	b.w	14694 <WStrReverseCpy>

00013162 <smprScActPkCalcCb>:
   13162:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13166:	4604      	mov	r4, r0
   13168:	68d8      	ldr	r0, [r3, #12]
   1316a:	460d      	mov	r5, r1
   1316c:	2110      	movs	r1, #16
   1316e:	4408      	add	r0, r1
   13170:	f001 f9e6 	bl	14540 <SecRand>
   13174:	2304      	movs	r3, #4
   13176:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1317a:	f7fd fc2f 	bl	109dc <DmSecGetEccKey>
   1317e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13180:	4606      	mov	r6, r0
   13182:	4620      	mov	r0, r4
   13184:	689f      	ldr	r7, [r3, #8]
   13186:	f7fe fa4e 	bl	11626 <smpGetPkBit>
   1318a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1318c:	68d9      	ldr	r1, [r3, #12]
   1318e:	3110      	adds	r1, #16
   13190:	e9cd 0100 	strd	r0, r1, [sp]
   13194:	463b      	mov	r3, r7
   13196:	4632      	mov	r2, r6
   13198:	4629      	mov	r1, r5
   1319a:	4620      	mov	r0, r4
   1319c:	f7fe f92a 	bl	113f4 <SmpScCalcF4>
   131a0:	b003      	add	sp, #12
   131a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000131a4 <smprScActPkStoreCnfAndCalcCb>:
   131a4:	b538      	push	{r3, r4, r5, lr}
   131a6:	4604      	mov	r4, r0
   131a8:	460d      	mov	r5, r1
   131aa:	f7ff ffd2 	bl	13152 <smprScActPkStoreCnf>
   131ae:	4629      	mov	r1, r5
   131b0:	4620      	mov	r0, r4
   131b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   131b6:	f7ff bfd4 	b.w	13162 <smprScActPkCalcCb>

000131ba <smprScActPkStorePinAndCalcCb>:
   131ba:	b538      	push	{r3, r4, r5, lr}
   131bc:	4604      	mov	r4, r0
   131be:	460d      	mov	r5, r1
   131c0:	f7ff ff60 	bl	13084 <smprScActStoreLescPin>
   131c4:	4629      	mov	r1, r5
   131c6:	4620      	mov	r0, r4
   131c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   131cc:	f7ff bfc9 	b.w	13162 <smprScActPkCalcCb>

000131d0 <smprScActPkSendCnf>:
   131d0:	f7ff bfac 	b.w	1312c <smprScActJwncSendCnf>

000131d4 <smprScActPkCalcCa>:
   131d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   131d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   131d8:	460d      	mov	r5, r1
   131da:	6849      	ldr	r1, [r1, #4]
   131dc:	4604      	mov	r4, r0
   131de:	2210      	movs	r2, #16
   131e0:	3109      	adds	r1, #9
   131e2:	68d8      	ldr	r0, [r3, #12]
   131e4:	f001 fa56 	bl	14694 <WStrReverseCpy>
   131e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   131ea:	689e      	ldr	r6, [r3, #8]
   131ec:	f7fd fbf6 	bl	109dc <DmSecGetEccKey>
   131f0:	4607      	mov	r7, r0
   131f2:	4620      	mov	r0, r4
   131f4:	f7fe fa17 	bl	11626 <smpGetPkBit>
   131f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   131fa:	68db      	ldr	r3, [r3, #12]
   131fc:	4632      	mov	r2, r6
   131fe:	e9cd 0300 	strd	r0, r3, [sp]
   13202:	4629      	mov	r1, r5
   13204:	463b      	mov	r3, r7
   13206:	4620      	mov	r0, r4
   13208:	f7fe f8f4 	bl	113f4 <SmpScCalcF4>
   1320c:	b003      	add	sp, #12
   1320e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013210 <smprScActPkSendRand>:
   13210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13212:	6b45      	ldr	r5, [r0, #52]	; 0x34
   13214:	68ef      	ldr	r7, [r5, #12]
   13216:	4604      	mov	r4, r0
   13218:	460e      	mov	r6, r1
   1321a:	2210      	movs	r2, #16
   1321c:	6849      	ldr	r1, [r1, #4]
   1321e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   13222:	f7f8 ff6d 	bl	c100 <memcmp>
   13226:	b168      	cbz	r0, 13244 <smprScActPkSendRand+0x34>
   13228:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1322c:	f8ad 3004 	strh.w	r3, [sp, #4]
   13230:	f240 4303 	movw	r3, #1027	; 0x403
   13234:	f8ad 3006 	strh.w	r3, [sp, #6]
   13238:	a901      	add	r1, sp, #4
   1323a:	4620      	mov	r0, r4
   1323c:	f7ff f9b1 	bl	125a2 <smpSmExecute>
   13240:	b003      	add	sp, #12
   13242:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13244:	78eb      	ldrb	r3, [r5, #3]
   13246:	3301      	adds	r3, #1
   13248:	b2db      	uxtb	r3, r3
   1324a:	2b13      	cmp	r3, #19
   1324c:	70eb      	strb	r3, [r5, #3]
   1324e:	d907      	bls.n	13260 <smprScActPkSendRand+0x50>
   13250:	231a      	movs	r3, #26
   13252:	f88d 3006 	strb.w	r3, [sp, #6]
   13256:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1325a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1325e:	e7eb      	b.n	13238 <smprScActPkSendRand+0x28>
   13260:	2303      	movs	r3, #3
   13262:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   13266:	f107 0210 	add.w	r2, r7, #16
   1326a:	2319      	movs	r3, #25
   1326c:	4631      	mov	r1, r6
   1326e:	4620      	mov	r0, r4
   13270:	f88d 3006 	strb.w	r3, [sp, #6]
   13274:	f7fe f987 	bl	11586 <smpScSendRand>
   13278:	e7ed      	b.n	13256 <smprScActPkSendRand+0x46>

0001327a <smprScActOobSetup>:
   1327a:	2304      	movs	r3, #4
   1327c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   13280:	4770      	bx	lr

00013282 <smprScActOobCalcCa>:
   13282:	b530      	push	{r4, r5, lr}
   13284:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13286:	460d      	mov	r5, r1
   13288:	6849      	ldr	r1, [r1, #4]
   1328a:	4604      	mov	r4, r0
   1328c:	b085      	sub	sp, #20
   1328e:	68d8      	ldr	r0, [r3, #12]
   13290:	2210      	movs	r2, #16
   13292:	3109      	adds	r1, #9
   13294:	f001 f9fe 	bl	14694 <WStrReverseCpy>
   13298:	7e63      	ldrb	r3, [r4, #25]
   1329a:	2b01      	cmp	r3, #1
   1329c:	d005      	beq.n	132aa <smprScActOobCalcCa+0x28>
   1329e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132a0:	4912      	ldr	r1, [pc, #72]	; (132ec <smprScActOobCalcCa+0x6a>)
   132a2:	68d8      	ldr	r0, [r3, #12]
   132a4:	3030      	adds	r0, #48	; 0x30
   132a6:	f001 f9ba 	bl	1461e <Calc128Cpy>
   132aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132ac:	7ca2      	ldrb	r2, [r4, #18]
   132ae:	68d8      	ldr	r0, [r3, #12]
   132b0:	2a01      	cmp	r2, #1
   132b2:	f100 0020 	add.w	r0, r0, #32
   132b6:	d10a      	bne.n	132ce <smprScActOobCalcCa+0x4c>
   132b8:	689b      	ldr	r3, [r3, #8]
   132ba:	9001      	str	r0, [sp, #4]
   132bc:	2200      	movs	r2, #0
   132be:	9200      	str	r2, [sp, #0]
   132c0:	4629      	mov	r1, r5
   132c2:	461a      	mov	r2, r3
   132c4:	4620      	mov	r0, r4
   132c6:	f7fe f895 	bl	113f4 <SmpScCalcF4>
   132ca:	b005      	add	sp, #20
   132cc:	bd30      	pop	{r4, r5, pc}
   132ce:	4907      	ldr	r1, [pc, #28]	; (132ec <smprScActOobCalcCa+0x6a>)
   132d0:	f001 f9a5 	bl	1461e <Calc128Cpy>
   132d4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   132d8:	f8ad 300c 	strh.w	r3, [sp, #12]
   132dc:	a903      	add	r1, sp, #12
   132de:	231b      	movs	r3, #27
   132e0:	4620      	mov	r0, r4
   132e2:	f88d 300e 	strb.w	r3, [sp, #14]
   132e6:	f7ff f95c 	bl	125a2 <smpSmExecute>
   132ea:	e7ee      	b.n	132ca <smprScActOobCalcCa+0x48>
   132ec:	00022a0c 	.word	0x00022a0c

000132f0 <smprScActOobSendRand>:
   132f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   132f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   132f4:	68de      	ldr	r6, [r3, #12]
   132f6:	7c83      	ldrb	r3, [r0, #18]
   132f8:	2b01      	cmp	r3, #1
   132fa:	4604      	mov	r4, r0
   132fc:	460d      	mov	r5, r1
   132fe:	d114      	bne.n	1332a <smprScActOobSendRand+0x3a>
   13300:	2210      	movs	r2, #16
   13302:	6849      	ldr	r1, [r1, #4]
   13304:	f106 0050 	add.w	r0, r6, #80	; 0x50
   13308:	f7f8 fefa 	bl	c100 <memcmp>
   1330c:	b168      	cbz	r0, 1332a <smprScActOobSendRand+0x3a>
   1330e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13312:	f8ad 3004 	strh.w	r3, [sp, #4]
   13316:	a901      	add	r1, sp, #4
   13318:	f240 4303 	movw	r3, #1027	; 0x403
   1331c:	4620      	mov	r0, r4
   1331e:	f8ad 3006 	strh.w	r3, [sp, #6]
   13322:	f7ff f93e 	bl	125a2 <smpSmExecute>
   13326:	b002      	add	sp, #8
   13328:	bd70      	pop	{r4, r5, r6, pc}
   1332a:	230d      	movs	r3, #13
   1332c:	2110      	movs	r1, #16
   1332e:	1870      	adds	r0, r6, r1
   13330:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   13334:	f001 f904 	bl	14540 <SecRand>
   13338:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1333a:	68da      	ldr	r2, [r3, #12]
   1333c:	4629      	mov	r1, r5
   1333e:	3210      	adds	r2, #16
   13340:	4620      	mov	r0, r4
   13342:	f7fe f920 	bl	11586 <smpScSendRand>
   13346:	e7ee      	b.n	13326 <smprScActOobSendRand+0x36>

00013348 <smprScActWaitDhCheck>:
   13348:	220d      	movs	r2, #13
   1334a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1334c:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
   13350:	785a      	ldrb	r2, [r3, #1]
   13352:	2a02      	cmp	r2, #2
   13354:	d003      	beq.n	1335e <smprScActWaitDhCheck+0x16>
   13356:	68da      	ldr	r2, [r3, #12]
   13358:	3210      	adds	r2, #16
   1335a:	f7fe b914 	b.w	11586 <smpScSendRand>
   1335e:	4770      	bx	lr

00013360 <smprScActCalcDHKey>:
   13360:	b538      	push	{r3, r4, r5, lr}
   13362:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13364:	4604      	mov	r4, r0
   13366:	460d      	mov	r5, r1
   13368:	68d8      	ldr	r0, [r3, #12]
   1336a:	6849      	ldr	r1, [r1, #4]
   1336c:	3050      	adds	r0, #80	; 0x50
   1336e:	3109      	adds	r1, #9
   13370:	2210      	movs	r2, #16
   13372:	f001 f98f 	bl	14694 <WStrReverseCpy>
   13376:	4629      	mov	r1, r5
   13378:	4620      	mov	r0, r4
   1337a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1337e:	f7fe bc65 	b.w	11c4c <smpScActCalcSharedSecret>

00013382 <smprScActDHKeyCheckSend>:
   13382:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13384:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13386:	4604      	mov	r4, r0
   13388:	68d8      	ldr	r0, [r3, #12]
   1338a:	460e      	mov	r6, r1
   1338c:	3010      	adds	r0, #16
   1338e:	6849      	ldr	r1, [r1, #4]
   13390:	f001 f945 	bl	1461e <Calc128Cpy>
   13394:	6b65      	ldr	r5, [r4, #52]	; 0x34
   13396:	68e9      	ldr	r1, [r5, #12]
   13398:	2210      	movs	r2, #16
   1339a:	f101 0050 	add.w	r0, r1, #80	; 0x50
   1339e:	f7f8 feaf 	bl	c100 <memcmp>
   133a2:	4601      	mov	r1, r0
   133a4:	b9a0      	cbnz	r0, 133d0 <smprScActDHKeyCheckSend+0x4e>
   133a6:	7d20      	ldrb	r0, [r4, #20]
   133a8:	7ee3      	ldrb	r3, [r4, #27]
   133aa:	692d      	ldr	r5, [r5, #16]
   133ac:	4298      	cmp	r0, r3
   133ae:	bf28      	it	cs
   133b0:	4618      	movcs	r0, r3
   133b2:	3510      	adds	r5, #16
   133b4:	f1c0 0210 	rsb	r2, r0, #16
   133b8:	4428      	add	r0, r5
   133ba:	f7f8 ffcf 	bl	c35c <memset>
   133be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   133c0:	68da      	ldr	r2, [r3, #12]
   133c2:	4631      	mov	r1, r6
   133c4:	3210      	adds	r2, #16
   133c6:	4620      	mov	r0, r4
   133c8:	f7fe f8b5 	bl	11536 <smpScSendDHKeyCheck>
   133cc:	b002      	add	sp, #8
   133ce:	bd70      	pop	{r4, r5, r6, pc}
   133d0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   133d4:	f8ad 3004 	strh.w	r3, [sp, #4]
   133d8:	a901      	add	r1, sp, #4
   133da:	f640 331c 	movw	r3, #2844	; 0xb1c
   133de:	4620      	mov	r0, r4
   133e0:	f8ad 3006 	strh.w	r3, [sp, #6]
   133e4:	f7ff f8dd 	bl	125a2 <smpSmExecute>
   133e8:	e7f0      	b.n	133cc <smprScActDHKeyCheckSend+0x4a>
   133ea:	bf00      	nop

000133ec <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
   133ec:	b480      	push	{r7}
   133ee:	af00      	add	r7, sp, #0
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
    return;
   133f0:	bf00      	nop
}
   133f2:	46bd      	mov	sp, r7
   133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   133f8:	4770      	bx	lr
	...

000133fc <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr)
{
   133fc:	b580      	push	{r7, lr}
   133fe:	b084      	sub	sp, #16
   13400:	af00      	add	r7, sp, #0
   13402:	4603      	mov	r3, r0
   13404:	6039      	str	r1, [r7, #0]
   13406:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   13408:	4b22      	ldr	r3, [pc, #136]	; (13494 <AppDbNewRecord+0x98>)
   1340a:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1340c:	2303      	movs	r3, #3
   1340e:	72fb      	strb	r3, [r7, #11]
   13410:	e00a      	b.n	13428 <AppDbNewRecord+0x2c>
  {
    if (!pRec->inUse)
   13412:	68fb      	ldr	r3, [r7, #12]
   13414:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   13418:	2b00      	cmp	r3, #0
   1341a:	d009      	beq.n	13430 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1341c:	7afb      	ldrb	r3, [r7, #11]
   1341e:	3b01      	subs	r3, #1
   13420:	72fb      	strb	r3, [r7, #11]
   13422:	68fb      	ldr	r3, [r7, #12]
   13424:	33b0      	adds	r3, #176	; 0xb0
   13426:	60fb      	str	r3, [r7, #12]
   13428:	7afb      	ldrb	r3, [r7, #11]
   1342a:	2b00      	cmp	r3, #0
   1342c:	d1f1      	bne.n	13412 <AppDbNewRecord+0x16>
   1342e:	e000      	b.n	13432 <AppDbNewRecord+0x36>
    {
      break;
   13430:	bf00      	nop
    }
  }
  
  /* if all records were allocated */
  if (i == 0)
   13432:	7afb      	ldrb	r3, [r7, #11]
   13434:	2b00      	cmp	r3, #0
   13436:	d10f      	bne.n	13458 <AppDbNewRecord+0x5c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   13438:	4b17      	ldr	r3, [pc, #92]	; (13498 <AppDbNewRecord+0x9c>)
   1343a:	681b      	ldr	r3, [r3, #0]
   1343c:	60fb      	str	r3, [r7, #12]
    
    /* get next record to overwrite */
    pAppDbNewRec++;
   1343e:	4b16      	ldr	r3, [pc, #88]	; (13498 <AppDbNewRecord+0x9c>)
   13440:	681b      	ldr	r3, [r3, #0]
   13442:	33b0      	adds	r3, #176	; 0xb0
   13444:	4a14      	ldr	r2, [pc, #80]	; (13498 <AppDbNewRecord+0x9c>)
   13446:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   13448:	4b13      	ldr	r3, [pc, #76]	; (13498 <AppDbNewRecord+0x9c>)
   1344a:	681b      	ldr	r3, [r3, #0]
   1344c:	4a13      	ldr	r2, [pc, #76]	; (1349c <AppDbNewRecord+0xa0>)
   1344e:	4293      	cmp	r3, r2
   13450:	d102      	bne.n	13458 <AppDbNewRecord+0x5c>
    {
      pAppDbNewRec = appDb.rec;
   13452:	4b11      	ldr	r3, [pc, #68]	; (13498 <AppDbNewRecord+0x9c>)
   13454:	4a0f      	ldr	r2, [pc, #60]	; (13494 <AppDbNewRecord+0x98>)
   13456:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   13458:	22b0      	movs	r2, #176	; 0xb0
   1345a:	2100      	movs	r1, #0
   1345c:	68f8      	ldr	r0, [r7, #12]
   1345e:	f7f8 ff7d 	bl	c35c <memset>
  pRec->inUse = TRUE;
   13462:	68fb      	ldr	r3, [r7, #12]
   13464:	2201      	movs	r2, #1
   13466:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   1346a:	68fb      	ldr	r3, [r7, #12]
   1346c:	79fa      	ldrb	r2, [r7, #7]
   1346e:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   13470:	68fb      	ldr	r3, [r7, #12]
   13472:	6839      	ldr	r1, [r7, #0]
   13474:	4618      	mov	r0, r3
   13476:	f001 f887 	bl	14588 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   1347a:	68fb      	ldr	r3, [r7, #12]
   1347c:	2200      	movs	r2, #0
   1347e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   13482:	68fb      	ldr	r3, [r7, #12]
   13484:	2200      	movs	r2, #0
   13486:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return (appDbHdl_t) pRec;
   1348a:	68fb      	ldr	r3, [r7, #12]
}
   1348c:	4618      	mov	r0, r3
   1348e:	3710      	adds	r7, #16
   13490:	46bd      	mov	sp, r7
   13492:	bd80      	pop	{r7, pc}
   13494:	10004184 	.word	0x10004184
   13498:	10002b84 	.word	0x10002b84
   1349c:	10004394 	.word	0x10004394

000134a0 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   134a0:	b580      	push	{r7, lr}
   134a2:	b084      	sub	sp, #16
   134a4:	af00      	add	r7, sp, #0
   134a6:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   134a8:	687b      	ldr	r3, [r7, #4]
   134aa:	2b00      	cmp	r3, #0
   134ac:	d102      	bne.n	134b4 <AppDbGetNextRecord+0x14>
  {
    pRec = appDb.rec;
   134ae:	4b14      	ldr	r3, [pc, #80]	; (13500 <AppDbGetNextRecord+0x60>)
   134b0:	60fb      	str	r3, [r7, #12]
   134b2:	e01c      	b.n	134ee <AppDbGetNextRecord+0x4e>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   134b4:	6878      	ldr	r0, [r7, #4]
   134b6:	f000 f859 	bl	1356c <AppDbRecordInUse>
   134ba:	4603      	mov	r3, r0
   134bc:	2b00      	cmp	r3, #0
   134be:	d005      	beq.n	134cc <AppDbGetNextRecord+0x2c>
  {
    pRec = (appDbRec_t *)hdl;
   134c0:	687b      	ldr	r3, [r7, #4]
   134c2:	60fb      	str	r3, [r7, #12]
    pRec++;
   134c4:	68fb      	ldr	r3, [r7, #12]
   134c6:	33b0      	adds	r3, #176	; 0xb0
   134c8:	60fb      	str	r3, [r7, #12]
   134ca:	e010      	b.n	134ee <AppDbGetNextRecord+0x4e>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   134cc:	2300      	movs	r3, #0
   134ce:	e013      	b.n	134f8 <AppDbGetNextRecord+0x58>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   134d0:	68fb      	ldr	r3, [r7, #12]
   134d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   134d6:	2b00      	cmp	r3, #0
   134d8:	d006      	beq.n	134e8 <AppDbGetNextRecord+0x48>
   134da:	68fb      	ldr	r3, [r7, #12]
   134dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   134e0:	2b00      	cmp	r3, #0
   134e2:	d001      	beq.n	134e8 <AppDbGetNextRecord+0x48>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   134e4:	68fb      	ldr	r3, [r7, #12]
   134e6:	e007      	b.n	134f8 <AppDbGetNextRecord+0x58>
    }

    /* look for next record */
    pRec++;
   134e8:	68fb      	ldr	r3, [r7, #12]
   134ea:	33b0      	adds	r3, #176	; 0xb0
   134ec:	60fb      	str	r3, [r7, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   134ee:	68fb      	ldr	r3, [r7, #12]
   134f0:	4a04      	ldr	r2, [pc, #16]	; (13504 <AppDbGetNextRecord+0x64>)
   134f2:	4293      	cmp	r3, r2
   134f4:	d3ec      	bcc.n	134d0 <AppDbGetNextRecord+0x30>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   134f6:	2300      	movs	r3, #0
}
   134f8:	4618      	mov	r0, r3
   134fa:	3710      	adds	r7, #16
   134fc:	46bd      	mov	sp, r7
   134fe:	bd80      	pop	{r7, pc}
   13500:	10004184 	.word	0x10004184
   13504:	10004394 	.word	0x10004394

00013508 <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   13508:	b480      	push	{r7}
   1350a:	b083      	sub	sp, #12
   1350c:	af00      	add	r7, sp, #0
   1350e:	6078      	str	r0, [r7, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   13510:	687b      	ldr	r3, [r7, #4]
   13512:	2200      	movs	r2, #0
   13514:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   13518:	bf00      	nop
   1351a:	370c      	adds	r7, #12
   1351c:	46bd      	mov	sp, r7
   1351e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13522:	4770      	bx	lr

00013524 <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   13524:	b480      	push	{r7}
   13526:	b083      	sub	sp, #12
   13528:	af00      	add	r7, sp, #0
   1352a:	6078      	str	r0, [r7, #4]
   1352c:	460b      	mov	r3, r1
   1352e:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   13530:	687b      	ldr	r3, [r7, #4]
   13532:	2201      	movs	r2, #1
   13534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   13538:	687b      	ldr	r3, [r7, #4]
   1353a:	78fa      	ldrb	r2, [r7, #3]
   1353c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
   13540:	bf00      	nop
   13542:	370c      	adds	r7, #12
   13544:	46bd      	mov	sp, r7
   13546:	f85d 7b04 	ldr.w	r7, [sp], #4
   1354a:	4770      	bx	lr

0001354c <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   1354c:	b580      	push	{r7, lr}
   1354e:	b082      	sub	sp, #8
   13550:	af00      	add	r7, sp, #0
   13552:	6078      	str	r0, [r7, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   13554:	687b      	ldr	r3, [r7, #4]
   13556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1355a:	2b00      	cmp	r3, #0
   1355c:	d102      	bne.n	13564 <AppDbCheckValidRecord+0x18>
  {
    AppDbDeleteRecord(hdl);
   1355e:	6878      	ldr	r0, [r7, #4]
   13560:	f7ff ffd2 	bl	13508 <AppDbDeleteRecord>
  }
}
   13564:	bf00      	nop
   13566:	3708      	adds	r7, #8
   13568:	46bd      	mov	sp, r7
   1356a:	bd80      	pop	{r7, pc}

0001356c <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   1356c:	b480      	push	{r7}
   1356e:	b085      	sub	sp, #20
   13570:	af00      	add	r7, sp, #0
   13572:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec = appDb.rec;
   13574:	4b12      	ldr	r3, [pc, #72]	; (135c0 <AppDbRecordInUse+0x54>)
   13576:	60fb      	str	r3, [r7, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13578:	2303      	movs	r3, #3
   1357a:	72fb      	strb	r3, [r7, #11]
   1357c:	e015      	b.n	135aa <AppDbRecordInUse+0x3e>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   1357e:	68fb      	ldr	r3, [r7, #12]
   13580:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   13584:	2b00      	cmp	r3, #0
   13586:	d00a      	beq.n	1359e <AppDbRecordInUse+0x32>
   13588:	68fb      	ldr	r3, [r7, #12]
   1358a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1358e:	2b00      	cmp	r3, #0
   13590:	d005      	beq.n	1359e <AppDbRecordInUse+0x32>
   13592:	68fa      	ldr	r2, [r7, #12]
   13594:	687b      	ldr	r3, [r7, #4]
   13596:	429a      	cmp	r2, r3
   13598:	d101      	bne.n	1359e <AppDbRecordInUse+0x32>
    {
      return TRUE;
   1359a:	2301      	movs	r3, #1
   1359c:	e009      	b.n	135b2 <AppDbRecordInUse+0x46>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1359e:	7afb      	ldrb	r3, [r7, #11]
   135a0:	3b01      	subs	r3, #1
   135a2:	72fb      	strb	r3, [r7, #11]
   135a4:	68fb      	ldr	r3, [r7, #12]
   135a6:	33b0      	adds	r3, #176	; 0xb0
   135a8:	60fb      	str	r3, [r7, #12]
   135aa:	7afb      	ldrb	r3, [r7, #11]
   135ac:	2b00      	cmp	r3, #0
   135ae:	d1e6      	bne.n	1357e <AppDbRecordInUse+0x12>
    }
  }

  return FALSE;
   135b0:	2300      	movs	r3, #0
}
   135b2:	4618      	mov	r0, r3
   135b4:	3714      	adds	r7, #20
   135b6:	46bd      	mov	sp, r7
   135b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   135bc:	4770      	bx	lr
   135be:	bf00      	nop
   135c0:	10004184 	.word	0x10004184

000135c4 <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   135c4:	b480      	push	{r7}
   135c6:	b083      	sub	sp, #12
   135c8:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   135ca:	4b0e      	ldr	r3, [pc, #56]	; (13604 <AppDbCheckBonded+0x40>)
   135cc:	607b      	str	r3, [r7, #4]
  uint8_t     i;
  
  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   135ce:	2303      	movs	r3, #3
   135d0:	70fb      	strb	r3, [r7, #3]
   135d2:	e00c      	b.n	135ee <AppDbCheckBonded+0x2a>
  {
    if (pRec->inUse)
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   135da:	2b00      	cmp	r3, #0
   135dc:	d001      	beq.n	135e2 <AppDbCheckBonded+0x1e>
    {
      return TRUE;
   135de:	2301      	movs	r3, #1
   135e0:	e009      	b.n	135f6 <AppDbCheckBonded+0x32>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   135e2:	78fb      	ldrb	r3, [r7, #3]
   135e4:	3b01      	subs	r3, #1
   135e6:	70fb      	strb	r3, [r7, #3]
   135e8:	687b      	ldr	r3, [r7, #4]
   135ea:	33b0      	adds	r3, #176	; 0xb0
   135ec:	607b      	str	r3, [r7, #4]
   135ee:	78fb      	ldrb	r3, [r7, #3]
   135f0:	2b00      	cmp	r3, #0
   135f2:	d1ef      	bne.n	135d4 <AppDbCheckBonded+0x10>
    }
  }
  
  return FALSE;
   135f4:	2300      	movs	r3, #0
}
   135f6:	4618      	mov	r0, r3
   135f8:	370c      	adds	r7, #12
   135fa:	46bd      	mov	sp, r7
   135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   13600:	4770      	bx	lr
   13602:	bf00      	nop
   13604:	10004184 	.word	0x10004184

00013608 <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
   13608:	b480      	push	{r7}
   1360a:	b083      	sub	sp, #12
   1360c:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   1360e:	4b0c      	ldr	r3, [pc, #48]	; (13640 <AppDbDeleteAllRecords+0x38>)
   13610:	607b      	str	r3, [r7, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13612:	2303      	movs	r3, #3
   13614:	70fb      	strb	r3, [r7, #3]
   13616:	e009      	b.n	1362c <AppDbDeleteAllRecords+0x24>
  {
    pRec->inUse = FALSE;
   13618:	687b      	ldr	r3, [r7, #4]
   1361a:	2200      	movs	r2, #0
   1361c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13620:	78fb      	ldrb	r3, [r7, #3]
   13622:	3b01      	subs	r3, #1
   13624:	70fb      	strb	r3, [r7, #3]
   13626:	687b      	ldr	r3, [r7, #4]
   13628:	33b0      	adds	r3, #176	; 0xb0
   1362a:	607b      	str	r3, [r7, #4]
   1362c:	78fb      	ldrb	r3, [r7, #3]
   1362e:	2b00      	cmp	r3, #0
   13630:	d1f2      	bne.n	13618 <AppDbDeleteAllRecords+0x10>
  }  
}
   13632:	bf00      	nop
   13634:	370c      	adds	r7, #12
   13636:	46bd      	mov	sp, r7
   13638:	f85d 7b04 	ldr.w	r7, [sp], #4
   1363c:	4770      	bx	lr
   1363e:	bf00      	nop
   13640:	10004184 	.word	0x10004184

00013644 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   13644:	b580      	push	{r7, lr}
   13646:	b084      	sub	sp, #16
   13648:	af00      	add	r7, sp, #0
   1364a:	4603      	mov	r3, r0
   1364c:	6039      	str	r1, [r7, #0]
   1364e:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   13650:	4b16      	ldr	r3, [pc, #88]	; (136ac <AppDbFindByAddr+0x68>)
   13652:	60fb      	str	r3, [r7, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   13654:	79fb      	ldrb	r3, [r7, #7]
   13656:	4618      	mov	r0, r3
   13658:	f7fc fd6c 	bl	10134 <DmHostAddrType>
   1365c:	4603      	mov	r3, r0
   1365e:	72bb      	strb	r3, [r7, #10]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   13660:	2303      	movs	r3, #3
   13662:	72fb      	strb	r3, [r7, #11]
   13664:	e019      	b.n	1369a <AppDbFindByAddr+0x56>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   13666:	68fb      	ldr	r3, [r7, #12]
   13668:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1366c:	2b00      	cmp	r3, #0
   1366e:	d00e      	beq.n	1368e <AppDbFindByAddr+0x4a>
   13670:	68fb      	ldr	r3, [r7, #12]
   13672:	799b      	ldrb	r3, [r3, #6]
   13674:	7aba      	ldrb	r2, [r7, #10]
   13676:	429a      	cmp	r2, r3
   13678:	d109      	bne.n	1368e <AppDbFindByAddr+0x4a>
   1367a:	68fb      	ldr	r3, [r7, #12]
   1367c:	6839      	ldr	r1, [r7, #0]
   1367e:	4618      	mov	r0, r3
   13680:	f000 ff90 	bl	145a4 <BdaCmp>
   13684:	4603      	mov	r3, r0
   13686:	2b00      	cmp	r3, #0
   13688:	d001      	beq.n	1368e <AppDbFindByAddr+0x4a>
    {
      return (appDbHdl_t) pRec;
   1368a:	68fb      	ldr	r3, [r7, #12]
   1368c:	e009      	b.n	136a2 <AppDbFindByAddr+0x5e>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1368e:	7afb      	ldrb	r3, [r7, #11]
   13690:	3b01      	subs	r3, #1
   13692:	72fb      	strb	r3, [r7, #11]
   13694:	68fb      	ldr	r3, [r7, #12]
   13696:	33b0      	adds	r3, #176	; 0xb0
   13698:	60fb      	str	r3, [r7, #12]
   1369a:	7afb      	ldrb	r3, [r7, #11]
   1369c:	2b00      	cmp	r3, #0
   1369e:	d1e2      	bne.n	13666 <AppDbFindByAddr+0x22>
    }
  }
  
  return APP_DB_HDL_NONE;
   136a0:	2300      	movs	r3, #0
}
   136a2:	4618      	mov	r0, r3
   136a4:	3710      	adds	r7, #16
   136a6:	46bd      	mov	sp, r7
   136a8:	bd80      	pop	{r7, pc}
   136aa:	bf00      	nop
   136ac:	10004184 	.word	0x10004184

000136b0 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   136b0:	b580      	push	{r7, lr}
   136b2:	b084      	sub	sp, #16
   136b4:	af00      	add	r7, sp, #0
   136b6:	4603      	mov	r3, r0
   136b8:	6039      	str	r1, [r7, #0]
   136ba:	80fb      	strh	r3, [r7, #6]
  appDbRec_t  *pRec = appDb.rec;
   136bc:	4b14      	ldr	r3, [pc, #80]	; (13710 <AppDbFindByLtkReq+0x60>)
   136be:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   136c0:	2303      	movs	r3, #3
   136c2:	72fb      	strb	r3, [r7, #11]
   136c4:	e01c      	b.n	13700 <AppDbFindByLtkReq+0x50>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   136c6:	68fb      	ldr	r3, [r7, #12]
   136c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   136cc:	2b00      	cmp	r3, #0
   136ce:	d011      	beq.n	136f4 <AppDbFindByLtkReq+0x44>
   136d0:	68fb      	ldr	r3, [r7, #12]
   136d2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   136d6:	88fa      	ldrh	r2, [r7, #6]
   136d8:	429a      	cmp	r2, r3
   136da:	d10b      	bne.n	136f4 <AppDbFindByLtkReq+0x44>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   136dc:	68fb      	ldr	r3, [r7, #12]
   136de:	3344      	adds	r3, #68	; 0x44
   136e0:	2208      	movs	r2, #8
   136e2:	6839      	ldr	r1, [r7, #0]
   136e4:	4618      	mov	r0, r3
   136e6:	f7f8 fd0b 	bl	c100 <memcmp>
   136ea:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   136ec:	2b00      	cmp	r3, #0
   136ee:	d101      	bne.n	136f4 <AppDbFindByLtkReq+0x44>
    {
      return (appDbHdl_t) pRec;
   136f0:	68fb      	ldr	r3, [r7, #12]
   136f2:	e009      	b.n	13708 <AppDbFindByLtkReq+0x58>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   136f4:	7afb      	ldrb	r3, [r7, #11]
   136f6:	3b01      	subs	r3, #1
   136f8:	72fb      	strb	r3, [r7, #11]
   136fa:	68fb      	ldr	r3, [r7, #12]
   136fc:	33b0      	adds	r3, #176	; 0xb0
   136fe:	60fb      	str	r3, [r7, #12]
   13700:	7afb      	ldrb	r3, [r7, #11]
   13702:	2b00      	cmp	r3, #0
   13704:	d1df      	bne.n	136c6 <AppDbFindByLtkReq+0x16>
    }
  }
  
  return APP_DB_HDL_NONE;
   13706:	2300      	movs	r3, #0
}
   13708:	4618      	mov	r0, r3
   1370a:	3710      	adds	r7, #16
   1370c:	46bd      	mov	sp, r7
   1370e:	bd80      	pop	{r7, pc}
   13710:	10004184 	.word	0x10004184

00013714 <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   13714:	b480      	push	{r7}
   13716:	b087      	sub	sp, #28
   13718:	af00      	add	r7, sp, #0
   1371a:	60f8      	str	r0, [r7, #12]
   1371c:	460b      	mov	r3, r1
   1371e:	607a      	str	r2, [r7, #4]
   13720:	72fb      	strb	r3, [r7, #11]
  dmSecKey_t *pKey = NULL;
   13722:	2300      	movs	r3, #0
   13724:	617b      	str	r3, [r7, #20]
  
  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   13726:	68fb      	ldr	r3, [r7, #12]
   13728:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   1372c:	7afb      	ldrb	r3, [r7, #11]
   1372e:	4013      	ands	r3, r2
   13730:	b2db      	uxtb	r3, r3
   13732:	2b00      	cmp	r3, #0
   13734:	d031      	beq.n	1379a <AppDbGetKey+0x86>
  {
    switch(type)
   13736:	7afb      	ldrb	r3, [r7, #11]
   13738:	3b01      	subs	r3, #1
   1373a:	2b07      	cmp	r3, #7
   1373c:	d82c      	bhi.n	13798 <AppDbGetKey+0x84>
   1373e:	a201      	add	r2, pc, #4	; (adr r2, 13744 <AppDbGetKey+0x30>)
   13740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13744:	00013765 	.word	0x00013765
   13748:	00013777 	.word	0x00013777
   1374c:	00013799 	.word	0x00013799
   13750:	00013789 	.word	0x00013789
   13754:	00013799 	.word	0x00013799
   13758:	00013799 	.word	0x00013799
   1375c:	00013799 	.word	0x00013799
   13760:	00013791 	.word	0x00013791
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   13764:	68fb      	ldr	r3, [r7, #12]
   13766:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   1376a:	687b      	ldr	r3, [r7, #4]
   1376c:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   1376e:	68fb      	ldr	r3, [r7, #12]
   13770:	3334      	adds	r3, #52	; 0x34
   13772:	617b      	str	r3, [r7, #20]
        break;
   13774:	e011      	b.n	1379a <AppDbGetKey+0x86>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   13776:	68fb      	ldr	r3, [r7, #12]
   13778:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1377c:	687b      	ldr	r3, [r7, #4]
   1377e:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   13780:	68fb      	ldr	r3, [r7, #12]
   13782:	3350      	adds	r3, #80	; 0x50
   13784:	617b      	str	r3, [r7, #20]
        break;
   13786:	e008      	b.n	1379a <AppDbGetKey+0x86>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   13788:	68fb      	ldr	r3, [r7, #12]
   1378a:	3307      	adds	r3, #7
   1378c:	617b      	str	r3, [r7, #20]
        break;
   1378e:	e004      	b.n	1379a <AppDbGetKey+0x86>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   13790:	68fb      	ldr	r3, [r7, #12]
   13792:	331e      	adds	r3, #30
   13794:	617b      	str	r3, [r7, #20]
        break;
   13796:	e000      	b.n	1379a <AppDbGetKey+0x86>
        
      default:
        break;
   13798:	bf00      	nop
    }
  }
  
  return pKey;
   1379a:	697b      	ldr	r3, [r7, #20]
}
   1379c:	4618      	mov	r0, r3
   1379e:	371c      	adds	r7, #28
   137a0:	46bd      	mov	sp, r7
   137a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   137a6:	4770      	bx	lr

000137a8 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   137a8:	b5b0      	push	{r4, r5, r7, lr}
   137aa:	b082      	sub	sp, #8
   137ac:	af00      	add	r7, sp, #0
   137ae:	6078      	str	r0, [r7, #4]
   137b0:	6039      	str	r1, [r7, #0]
  switch(pKey->type)
   137b2:	683b      	ldr	r3, [r7, #0]
   137b4:	7f9b      	ldrb	r3, [r3, #30]
   137b6:	3b01      	subs	r3, #1
   137b8:	2b07      	cmp	r3, #7
   137ba:	d86c      	bhi.n	13896 <AppDbSetKey+0xee>
   137bc:	a201      	add	r2, pc, #4	; (adr r2, 137c4 <AppDbSetKey+0x1c>)
   137be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   137c2:	bf00      	nop
   137c4:	000137e5 	.word	0x000137e5
   137c8:	0001380f 	.word	0x0001380f
   137cc:	00013897 	.word	0x00013897
   137d0:	00013839 	.word	0x00013839
   137d4:	00013897 	.word	0x00013897
   137d8:	00013897 	.word	0x00013897
   137dc:	00013897 	.word	0x00013897
   137e0:	00013875 	.word	0x00013875
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   137e4:	683b      	ldr	r3, [r7, #0]
   137e6:	7fda      	ldrb	r2, [r3, #31]
   137e8:	687b      	ldr	r3, [r7, #4]
   137ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   137ee:	687a      	ldr	r2, [r7, #4]
   137f0:	683b      	ldr	r3, [r7, #0]
   137f2:	f102 0434 	add.w	r4, r2, #52	; 0x34
   137f6:	1d1d      	adds	r5, r3, #4
   137f8:	6828      	ldr	r0, [r5, #0]
   137fa:	6869      	ldr	r1, [r5, #4]
   137fc:	68aa      	ldr	r2, [r5, #8]
   137fe:	68eb      	ldr	r3, [r5, #12]
   13800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13802:	6928      	ldr	r0, [r5, #16]
   13804:	6969      	ldr	r1, [r5, #20]
   13806:	c403      	stmia	r4!, {r0, r1}
   13808:	8b2b      	ldrh	r3, [r5, #24]
   1380a:	8023      	strh	r3, [r4, #0]
      break;
   1380c:	e044      	b.n	13898 <AppDbSetKey+0xf0>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   1380e:	683b      	ldr	r3, [r7, #0]
   13810:	7fda      	ldrb	r2, [r3, #31]
   13812:	687b      	ldr	r3, [r7, #4]
   13814:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   13818:	687a      	ldr	r2, [r7, #4]
   1381a:	683b      	ldr	r3, [r7, #0]
   1381c:	f102 0450 	add.w	r4, r2, #80	; 0x50
   13820:	1d1d      	adds	r5, r3, #4
   13822:	6828      	ldr	r0, [r5, #0]
   13824:	6869      	ldr	r1, [r5, #4]
   13826:	68aa      	ldr	r2, [r5, #8]
   13828:	68eb      	ldr	r3, [r5, #12]
   1382a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1382c:	6928      	ldr	r0, [r5, #16]
   1382e:	6969      	ldr	r1, [r5, #20]
   13830:	c403      	stmia	r4!, {r0, r1}
   13832:	8b2b      	ldrh	r3, [r5, #24]
   13834:	8023      	strh	r3, [r4, #0]
      break;
   13836:	e02f      	b.n	13898 <AppDbSetKey+0xf0>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   13838:	687b      	ldr	r3, [r7, #4]
   1383a:	683a      	ldr	r2, [r7, #0]
   1383c:	3307      	adds	r3, #7
   1383e:	3204      	adds	r2, #4
   13840:	6811      	ldr	r1, [r2, #0]
   13842:	6855      	ldr	r5, [r2, #4]
   13844:	6894      	ldr	r4, [r2, #8]
   13846:	68d0      	ldr	r0, [r2, #12]
   13848:	6019      	str	r1, [r3, #0]
   1384a:	605d      	str	r5, [r3, #4]
   1384c:	609c      	str	r4, [r3, #8]
   1384e:	60d8      	str	r0, [r3, #12]
   13850:	6911      	ldr	r1, [r2, #16]
   13852:	6119      	str	r1, [r3, #16]
   13854:	8a91      	ldrh	r1, [r2, #20]
   13856:	7d92      	ldrb	r2, [r2, #22]
   13858:	8299      	strh	r1, [r3, #20]
   1385a:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   1385c:	683b      	ldr	r3, [r7, #0]
   1385e:	7e9a      	ldrb	r2, [r3, #26]
   13860:	687b      	ldr	r3, [r7, #4]
   13862:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   13864:	687a      	ldr	r2, [r7, #4]
   13866:	683b      	ldr	r3, [r7, #0]
   13868:	3314      	adds	r3, #20
   1386a:	4619      	mov	r1, r3
   1386c:	4610      	mov	r0, r2
   1386e:	f000 fe8b 	bl	14588 <BdaCpy>
      break;
   13872:	e011      	b.n	13898 <AppDbSetKey+0xf0>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   13874:	687b      	ldr	r3, [r7, #4]
   13876:	683a      	ldr	r2, [r7, #0]
   13878:	331e      	adds	r3, #30
   1387a:	3204      	adds	r2, #4
   1387c:	6814      	ldr	r4, [r2, #0]
   1387e:	6850      	ldr	r0, [r2, #4]
   13880:	6891      	ldr	r1, [r2, #8]
   13882:	68d2      	ldr	r2, [r2, #12]
   13884:	601c      	str	r4, [r3, #0]
   13886:	6058      	str	r0, [r3, #4]
   13888:	6099      	str	r1, [r3, #8]
   1388a:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   1388c:	687b      	ldr	r3, [r7, #4]
   1388e:	2200      	movs	r2, #0
   13890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   13894:	e000      	b.n	13898 <AppDbSetKey+0xf0>
      
    default:
      break;
   13896:	bf00      	nop
  }
}
   13898:	bf00      	nop
   1389a:	3708      	adds	r7, #8
   1389c:	46bd      	mov	sp, r7
   1389e:	bdb0      	pop	{r4, r5, r7, pc}

000138a0 <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   138a0:	b480      	push	{r7}
   138a2:	b083      	sub	sp, #12
   138a4:	af00      	add	r7, sp, #0
   138a6:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   138a8:	687b      	ldr	r3, [r7, #4]
   138aa:	336c      	adds	r3, #108	; 0x6c
}
   138ac:	4618      	mov	r0, r3
   138ae:	370c      	adds	r7, #12
   138b0:	46bd      	mov	sp, r7
   138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   138b6:	4770      	bx	lr

000138b8 <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   138b8:	b480      	push	{r7}
   138ba:	b083      	sub	sp, #12
   138bc:	af00      	add	r7, sp, #0
   138be:	6078      	str	r0, [r7, #4]
   138c0:	460b      	mov	r3, r1
   138c2:	807b      	strh	r3, [r7, #2]
   138c4:	4613      	mov	r3, r2
   138c6:	803b      	strh	r3, [r7, #0]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);
  
  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   138c8:	887b      	ldrh	r3, [r7, #2]
   138ca:	687a      	ldr	r2, [r7, #4]
   138cc:	3334      	adds	r3, #52	; 0x34
   138ce:	005b      	lsls	r3, r3, #1
   138d0:	4413      	add	r3, r2
   138d2:	883a      	ldrh	r2, [r7, #0]
   138d4:	809a      	strh	r2, [r3, #4]
}
   138d6:	bf00      	nop
   138d8:	370c      	adds	r7, #12
   138da:	46bd      	mov	sp, r7
   138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   138e0:	4770      	bx	lr

000138e2 <AppDbGetDiscStatus>:
 *
 *  \return Discovery status.
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
   138e2:	b480      	push	{r7}
   138e4:	b083      	sub	sp, #12
   138e6:	af00      	add	r7, sp, #0
   138e8:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->discStatus;
   138ea:	687b      	ldr	r3, [r7, #4]
   138ec:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
}
   138f0:	4618      	mov	r0, r3
   138f2:	370c      	adds	r7, #12
   138f4:	46bd      	mov	sp, r7
   138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   138fa:	4770      	bx	lr

000138fc <AppDbSetDiscStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
   138fc:	b480      	push	{r7}
   138fe:	b083      	sub	sp, #12
   13900:	af00      	add	r7, sp, #0
   13902:	6078      	str	r0, [r7, #4]
   13904:	460b      	mov	r3, r1
   13906:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->discStatus = status;
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	78fa      	ldrb	r2, [r7, #3]
   1390c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
   13910:	bf00      	nop
   13912:	370c      	adds	r7, #12
   13914:	46bd      	mov	sp, r7
   13916:	f85d 7b04 	ldr.w	r7, [sp], #4
   1391a:	4770      	bx	lr

0001391c <AppDbGetHdlList>:
 *
 *  \return Pointer to handle list.
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
   1391c:	b480      	push	{r7}
   1391e:	b083      	sub	sp, #12
   13920:	af00      	add	r7, sp, #0
   13922:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->hdlList;
   13924:	687b      	ldr	r3, [r7, #4]
   13926:	3384      	adds	r3, #132	; 0x84
}
   13928:	4618      	mov	r0, r3
   1392a:	370c      	adds	r7, #12
   1392c:	46bd      	mov	sp, r7
   1392e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13932:	4770      	bx	lr

00013934 <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   13934:	b580      	push	{r7, lr}
   13936:	b082      	sub	sp, #8
   13938:	af00      	add	r7, sp, #0
   1393a:	6078      	str	r0, [r7, #4]
   1393c:	6039      	str	r1, [r7, #0]
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   1393e:	687b      	ldr	r3, [r7, #4]
   13940:	3384      	adds	r3, #132	; 0x84
   13942:	2228      	movs	r2, #40	; 0x28
   13944:	6839      	ldr	r1, [r7, #0]
   13946:	4618      	mov	r0, r3
   13948:	f7f8 fc0a 	bl	c160 <memcpy>
}
   1394c:	bf00      	nop
   1394e:	3708      	adds	r7, #8
   13950:	46bd      	mov	sp, r7
   13952:	bd80      	pop	{r7, pc}

00013954 <AppDbGetPeerAddrRes>:
 *
 *  \return TRUE if address resolution is supported in peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddrRes(appDbHdl_t hdl)
{
   13954:	b480      	push	{r7}
   13956:	b083      	sub	sp, #12
   13958:	af00      	add	r7, sp, #0
   1395a:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddrRes;
   1395c:	687b      	ldr	r3, [r7, #4]
   1395e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
}
   13962:	4618      	mov	r0, r3
   13964:	370c      	adds	r7, #12
   13966:	46bd      	mov	sp, r7
   13968:	f85d 7b04 	ldr.w	r7, [sp], #4
   1396c:	4770      	bx	lr

0001396e <AppDbSetPeerAddrRes>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddrRes(appDbHdl_t hdl, uint8_t addrRes)
{
   1396e:	b480      	push	{r7}
   13970:	b083      	sub	sp, #12
   13972:	af00      	add	r7, sp, #0
   13974:	6078      	str	r0, [r7, #4]
   13976:	460b      	mov	r3, r1
   13978:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddrRes = addrRes;
   1397a:	687b      	ldr	r3, [r7, #4]
   1397c:	78fa      	ldrb	r2, [r7, #3]
   1397e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
   13982:	bf00      	nop
   13984:	370c      	adds	r7, #12
   13986:	46bd      	mov	sp, r7
   13988:	f85d 7b04 	ldr.w	r7, [sp], #4
   1398c:	4770      	bx	lr

0001398e <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   1398e:	b480      	push	{r7}
   13990:	b083      	sub	sp, #12
   13992:	af00      	add	r7, sp, #0
   13994:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   13996:	687b      	ldr	r3, [r7, #4]
   13998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1399c:	4618      	mov	r0, r3
   1399e:	370c      	adds	r7, #12
   139a0:	46bd      	mov	sp, r7
   139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   139a6:	4770      	bx	lr

000139a8 <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   139a8:	b480      	push	{r7}
   139aa:	b083      	sub	sp, #12
   139ac:	af00      	add	r7, sp, #0
   139ae:	6078      	str	r0, [r7, #4]
   139b0:	6039      	str	r1, [r7, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   139b2:	687b      	ldr	r3, [r7, #4]
   139b4:	683a      	ldr	r2, [r7, #0]
   139b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   139ba:	bf00      	nop
   139bc:	370c      	adds	r7, #12
   139be:	46bd      	mov	sp, r7
   139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   139c4:	4770      	bx	lr

000139c6 <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   139c6:	b480      	push	{r7}
   139c8:	b083      	sub	sp, #12
   139ca:	af00      	add	r7, sp, #0
   139cc:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   139ce:	687b      	ldr	r3, [r7, #4]
   139d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   139d4:	4618      	mov	r0, r3
   139d6:	370c      	adds	r7, #12
   139d8:	46bd      	mov	sp, r7
   139da:	f85d 7b04 	ldr.w	r7, [sp], #4
   139de:	4770      	bx	lr

000139e0 <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   139e0:	b480      	push	{r7}
   139e2:	b083      	sub	sp, #12
   139e4:	af00      	add	r7, sp, #0
   139e6:	6078      	str	r0, [r7, #4]
   139e8:	460b      	mov	r3, r1
   139ea:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   139ec:	687b      	ldr	r3, [r7, #4]
   139ee:	78fa      	ldrb	r2, [r7, #3]
   139f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   139f4:	bf00      	nop
   139f6:	370c      	adds	r7, #12
   139f8:	46bd      	mov	sp, r7
   139fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   139fe:	4770      	bx	lr

00013a00 <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   13a00:	b480      	push	{r7}
   13a02:	b083      	sub	sp, #12
   13a04:	af00      	add	r7, sp, #0
   13a06:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   13a08:	687b      	ldr	r3, [r7, #4]
   13a0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   13a0e:	4618      	mov	r0, r3
   13a10:	370c      	adds	r7, #12
   13a12:	46bd      	mov	sp, r7
   13a14:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a18:	4770      	bx	lr

00013a1a <AppDbSetPeerRpao>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerRpao(appDbHdl_t hdl, bool_t peerRpao)
{
   13a1a:	b480      	push	{r7}
   13a1c:	b083      	sub	sp, #12
   13a1e:	af00      	add	r7, sp, #0
   13a20:	6078      	str	r0, [r7, #4]
   13a22:	460b      	mov	r3, r1
   13a24:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerRpao = peerRpao;
   13a26:	687b      	ldr	r3, [r7, #4]
   13a28:	78fa      	ldrb	r2, [r7, #3]
   13a2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   13a2e:	bf00      	nop
   13a30:	370c      	adds	r7, #12
   13a32:	46bd      	mov	sp, r7
   13a34:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a38:	4770      	bx	lr
	...

00013a3c <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   13a3c:	b580      	push	{r7, lr}
   13a3e:	b082      	sub	sp, #8
   13a40:	af00      	add	r7, sp, #0
   13a42:	4603      	mov	r3, r0
   13a44:	71fb      	strb	r3, [r7, #7]
  switch (event)
   13a46:	79fb      	ldrb	r3, [r7, #7]
   13a48:	2b11      	cmp	r3, #17
   13a4a:	d868      	bhi.n	13b1e <AppUiAction+0xe2>
   13a4c:	a201      	add	r2, pc, #4	; (adr r2, 13a54 <AppUiAction+0x18>)
   13a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13a52:	bf00      	nop
   13a54:	00013b1d 	.word	0x00013b1d
   13a58:	00013a9d 	.word	0x00013a9d
   13a5c:	00013b1f 	.word	0x00013b1f
   13a60:	00013aa5 	.word	0x00013aa5
   13a64:	00013aad 	.word	0x00013aad
   13a68:	00013ab5 	.word	0x00013ab5
   13a6c:	00013abd 	.word	0x00013abd
   13a70:	00013ac5 	.word	0x00013ac5
   13a74:	00013acd 	.word	0x00013acd
   13a78:	00013ad5 	.word	0x00013ad5
   13a7c:	00013add 	.word	0x00013add
   13a80:	00013ae5 	.word	0x00013ae5
   13a84:	00013aed 	.word	0x00013aed
   13a88:	00013af5 	.word	0x00013af5
   13a8c:	00013afd 	.word	0x00013afd
   13a90:	00013b05 	.word	0x00013b05
   13a94:	00013b0d 	.word	0x00013b0d
   13a98:	00013b15 	.word	0x00013b15
    case APP_UI_NONE:
      /* no action */
      break;
      
    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   13a9c:	4822      	ldr	r0, [pc, #136]	; (13b28 <AppUiAction+0xec>)
   13a9e:	f006 f82d 	bl	19afc <WsfTrace>
      break;
   13aa2:	e03c      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   13aa4:	4821      	ldr	r0, [pc, #132]	; (13b2c <AppUiAction+0xf0>)
   13aa6:	f006 f829 	bl	19afc <WsfTrace>
      break;
   13aaa:	e038      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   13aac:	4820      	ldr	r0, [pc, #128]	; (13b30 <AppUiAction+0xf4>)
   13aae:	f006 f825 	bl	19afc <WsfTrace>
      break;
   13ab2:	e034      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   13ab4:	481f      	ldr	r0, [pc, #124]	; (13b34 <AppUiAction+0xf8>)
   13ab6:	f006 f821 	bl	19afc <WsfTrace>
      break;
   13aba:	e030      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   13abc:	481e      	ldr	r0, [pc, #120]	; (13b38 <AppUiAction+0xfc>)
   13abe:	f006 f81d 	bl	19afc <WsfTrace>
      break;
   13ac2:	e02c      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   13ac4:	481d      	ldr	r0, [pc, #116]	; (13b3c <AppUiAction+0x100>)
   13ac6:	f006 f819 	bl	19afc <WsfTrace>
      break;
   13aca:	e028      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   13acc:	481c      	ldr	r0, [pc, #112]	; (13b40 <AppUiAction+0x104>)
   13ace:	f006 f815 	bl	19afc <WsfTrace>
      break;
   13ad2:	e024      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   13ad4:	481b      	ldr	r0, [pc, #108]	; (13b44 <AppUiAction+0x108>)
   13ad6:	f006 f811 	bl	19afc <WsfTrace>
      break;
   13ada:	e020      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   13adc:	481a      	ldr	r0, [pc, #104]	; (13b48 <AppUiAction+0x10c>)
   13ade:	f006 f80d 	bl	19afc <WsfTrace>
      break;
   13ae2:	e01c      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   13ae4:	4819      	ldr	r0, [pc, #100]	; (13b4c <AppUiAction+0x110>)
   13ae6:	f006 f809 	bl	19afc <WsfTrace>
      break;
   13aea:	e018      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   13aec:	4818      	ldr	r0, [pc, #96]	; (13b50 <AppUiAction+0x114>)
   13aee:	f006 f805 	bl	19afc <WsfTrace>
      break;
   13af2:	e014      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   13af4:	4817      	ldr	r0, [pc, #92]	; (13b54 <AppUiAction+0x118>)
   13af6:	f006 f801 	bl	19afc <WsfTrace>
      break;
   13afa:	e010      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   13afc:	4816      	ldr	r0, [pc, #88]	; (13b58 <AppUiAction+0x11c>)
   13afe:	f005 fffd 	bl	19afc <WsfTrace>
      break;
   13b02:	e00c      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   13b04:	4815      	ldr	r0, [pc, #84]	; (13b5c <AppUiAction+0x120>)
   13b06:	f005 fff9 	bl	19afc <WsfTrace>
      break;
   13b0a:	e008      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   13b0c:	4814      	ldr	r0, [pc, #80]	; (13b60 <AppUiAction+0x124>)
   13b0e:	f005 fff5 	bl	19afc <WsfTrace>
      break;
   13b12:	e004      	b.n	13b1e <AppUiAction+0xe2>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   13b14:	4813      	ldr	r0, [pc, #76]	; (13b64 <AppUiAction+0x128>)
   13b16:	f005 fff1 	bl	19afc <WsfTrace>
      break;
   13b1a:	e000      	b.n	13b1e <AppUiAction+0xe2>
      break;
   13b1c:	bf00      	nop
  }
}
   13b1e:	bf00      	nop
   13b20:	3708      	adds	r7, #8
   13b22:	46bd      	mov	sp, r7
   13b24:	bd80      	pop	{r7, pc}
   13b26:	bf00      	nop
   13b28:	00021708 	.word	0x00021708
   13b2c:	00021720 	.word	0x00021720
   13b30:	0002173c 	.word	0x0002173c
   13b34:	00021758 	.word	0x00021758
   13b38:	00021774 	.word	0x00021774
   13b3c:	00021790 	.word	0x00021790
   13b40:	000217b8 	.word	0x000217b8
   13b44:	000217d4 	.word	0x000217d4
   13b48:	000217f0 	.word	0x000217f0
   13b4c:	00021818 	.word	0x00021818
   13b50:	00021830 	.word	0x00021830
   13b54:	00021850 	.word	0x00021850
   13b58:	0002186c 	.word	0x0002186c
   13b5c:	00021894 	.word	0x00021894
   13b60:	000218b8 	.word	0x000218b8
   13b64:	000218cc 	.word	0x000218cc

00013b68 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   13b68:	b580      	push	{r7, lr}
   13b6a:	b082      	sub	sp, #8
   13b6c:	af00      	add	r7, sp, #0
   13b6e:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   13b70:	6879      	ldr	r1, [r7, #4]
   13b72:	4803      	ldr	r0, [pc, #12]	; (13b80 <AppUiDisplayPasskey+0x18>)
   13b74:	f005 ffc2 	bl	19afc <WsfTrace>
}
   13b78:	bf00      	nop
   13b7a:	3708      	adds	r7, #8
   13b7c:	46bd      	mov	sp, r7
   13b7e:	bd80      	pop	{r7, pc}
   13b80:	000218e0 	.word	0x000218e0

00013b84 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   13b84:	b580      	push	{r7, lr}
   13b86:	b082      	sub	sp, #8
   13b88:	af00      	add	r7, sp, #0
   13b8a:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   13b8c:	6879      	ldr	r1, [r7, #4]
   13b8e:	4803      	ldr	r0, [pc, #12]	; (13b9c <AppUiDisplayConfirmValue+0x18>)
   13b90:	f005 ffb4 	bl	19afc <WsfTrace>
}
   13b94:	bf00      	nop
   13b96:	3708      	adds	r7, #8
   13b98:	46bd      	mov	sp, r7
   13b9a:	bd80      	pop	{r7, pc}
   13b9c:	000218f4 	.word	0x000218f4

00013ba0 <AppUiDisplayRssi>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayRssi(int8_t rssi)
{
   13ba0:	b580      	push	{r7, lr}
   13ba2:	b082      	sub	sp, #8
   13ba4:	af00      	add	r7, sp, #0
   13ba6:	4603      	mov	r3, r0
   13ba8:	71fb      	strb	r3, [r7, #7]
  APP_TRACE_INFO1(">>> RSSI: %d dBm<<<", rssi);
   13baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   13bae:	4619      	mov	r1, r3
   13bb0:	4803      	ldr	r0, [pc, #12]	; (13bc0 <AppUiDisplayRssi+0x20>)
   13bb2:	f005 ffa3 	bl	19afc <WsfTrace>
}
   13bb6:	bf00      	nop
   13bb8:	3708      	adds	r7, #8
   13bba:	46bd      	mov	sp, r7
   13bbc:	bd80      	pop	{r7, pc}
   13bbe:	bf00      	nop
   13bc0:	00021910 	.word	0x00021910

00013bc4 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   13bc4:	b480      	push	{r7}
   13bc6:	b083      	sub	sp, #12
   13bc8:	af00      	add	r7, sp, #0
   13bca:	6078      	str	r0, [r7, #4]

}
   13bcc:	bf00      	nop
   13bce:	370c      	adds	r7, #12
   13bd0:	46bd      	mov	sp, r7
   13bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   13bd6:	4770      	bx	lr

00013bd8 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   13bd8:	b480      	push	{r7}
   13bda:	af00      	add	r7, sp, #0

}
   13bdc:	bf00      	nop
   13bde:	46bd      	mov	sp, r7
   13be0:	f85d 7b04 	ldr.w	r7, [sp], #4
   13be4:	4770      	bx	lr
	...

00013be8 <AppUiBtnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t cback)
{
   13be8:	b480      	push	{r7}
   13bea:	b083      	sub	sp, #12
   13bec:	af00      	add	r7, sp, #0
   13bee:	6078      	str	r0, [r7, #4]
  appUiBtn.cback = cback;
   13bf0:	4a04      	ldr	r2, [pc, #16]	; (13c04 <AppUiBtnRegister+0x1c>)
   13bf2:	687b      	ldr	r3, [r7, #4]
   13bf4:	6013      	str	r3, [r2, #0]
}
   13bf6:	bf00      	nop
   13bf8:	370c      	adds	r7, #12
   13bfa:	46bd      	mov	sp, r7
   13bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c00:	4770      	bx	lr
   13c02:	bf00      	nop
   13c04:	100043ac 	.word	0x100043ac

00013c08 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
   13c08:	b480      	push	{r7}
   13c0a:	af00      	add	r7, sp, #0

}
   13c0c:	bf00      	nop
   13c0e:	46bd      	mov	sp, r7
   13c10:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c14:	4770      	bx	lr
	...

00013c18 <AppUiBtnTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
   13c18:	b580      	push	{r7, lr}
   13c1a:	b082      	sub	sp, #8
   13c1c:	af00      	add	r7, sp, #0
   13c1e:	4603      	mov	r3, r0
   13c20:	71fb      	strb	r3, [r7, #7]
  if(appUiBtn.cback) {
   13c22:	4b06      	ldr	r3, [pc, #24]	; (13c3c <AppUiBtnTest+0x24>)
   13c24:	681b      	ldr	r3, [r3, #0]
   13c26:	2b00      	cmp	r3, #0
   13c28:	d004      	beq.n	13c34 <AppUiBtnTest+0x1c>
    (*appUiBtn.cback)(btn);
   13c2a:	4b04      	ldr	r3, [pc, #16]	; (13c3c <AppUiBtnTest+0x24>)
   13c2c:	681b      	ldr	r3, [r3, #0]
   13c2e:	79fa      	ldrb	r2, [r7, #7]
   13c30:	4610      	mov	r0, r2
   13c32:	4798      	blx	r3
  }
}
   13c34:	bf00      	nop
   13c36:	3708      	adds	r7, #8
   13c38:	46bd      	mov	sp, r7
   13c3a:	bd80      	pop	{r7, pc}
   13c3c:	100043ac 	.word	0x100043ac

00013c40 <FmplIasDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FmplIasDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   13c40:	b580      	push	{r7, lr}
   13c42:	b084      	sub	sp, #16
   13c44:	af02      	add	r7, sp, #8
   13c46:	4603      	mov	r3, r0
   13c48:	6039      	str	r1, [r7, #0]
   13c4a:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attIasSvcUuid, 
   13c4c:	79f8      	ldrb	r0, [r7, #7]
   13c4e:	683b      	ldr	r3, [r7, #0]
   13c50:	9301      	str	r3, [sp, #4]
   13c52:	4b05      	ldr	r3, [pc, #20]	; (13c68 <FmplIasDiscover+0x28>)
   13c54:	9300      	str	r3, [sp, #0]
   13c56:	2301      	movs	r3, #1
   13c58:	4a04      	ldr	r2, [pc, #16]	; (13c6c <FmplIasDiscover+0x2c>)
   13c5a:	2102      	movs	r1, #2
   13c5c:	f008 f80e 	bl	1bc7c <AppDiscFindService>
                     FMPL_IAS_HDL_LIST_LEN, (attcDiscChar_t **) fmplIasDiscCharList, pHdlList);
}
   13c60:	bf00      	nop
   13c62:	3708      	adds	r7, #8
   13c64:	46bd      	mov	sp, r7
   13c66:	bd80      	pop	{r7, pc}
   13c68:	10002b88 	.word	0x10002b88
   13c6c:	00021e7a 	.word	0x00021e7a

00013c70 <FmplSendAlert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FmplSendAlert(dmConnId_t connId, uint16_t handle, uint8_t alert)
{
   13c70:	b580      	push	{r7, lr}
   13c72:	b084      	sub	sp, #16
   13c74:	af00      	add	r7, sp, #0
   13c76:	4603      	mov	r3, r0
   13c78:	71fb      	strb	r3, [r7, #7]
   13c7a:	460b      	mov	r3, r1
   13c7c:	80bb      	strh	r3, [r7, #4]
   13c7e:	4613      	mov	r3, r2
   13c80:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[1];
  
  if (handle != ATT_HANDLE_NONE)
   13c82:	88bb      	ldrh	r3, [r7, #4]
   13c84:	2b00      	cmp	r3, #0
   13c86:	d008      	beq.n	13c9a <FmplSendAlert+0x2a>
  {
    buf[0] = alert;
   13c88:	79bb      	ldrb	r3, [r7, #6]
   13c8a:	733b      	strb	r3, [r7, #12]
    AttcWriteCmd(connId, handle, 1, buf);
   13c8c:	f107 030c 	add.w	r3, r7, #12
   13c90:	88b9      	ldrh	r1, [r7, #4]
   13c92:	79f8      	ldrb	r0, [r7, #7]
   13c94:	2201      	movs	r2, #1
   13c96:	f7f9 fc13 	bl	d4c0 <AttcWriteCmd>
  }
}
   13c9a:	bf00      	nop
   13c9c:	3710      	adds	r7, #16
   13c9e:	46bd      	mov	sp, r7
   13ca0:	bd80      	pop	{r7, pc}
	...

00013ca4 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   13ca4:	b480      	push	{r7}
   13ca6:	b083      	sub	sp, #12
   13ca8:	af00      	add	r7, sp, #0
   13caa:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
   13cac:	4a04      	ldr	r2, [pc, #16]	; (13cc0 <HciEvtRegister+0x1c>)
   13cae:	687b      	ldr	r3, [r7, #4]
   13cb0:	6093      	str	r3, [r2, #8]
}
   13cb2:	bf00      	nop
   13cb4:	370c      	adds	r7, #12
   13cb6:	46bd      	mov	sp, r7
   13cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   13cbc:	4770      	bx	lr
   13cbe:	bf00      	nop
   13cc0:	100051fc 	.word	0x100051fc

00013cc4 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   13cc4:	b480      	push	{r7}
   13cc6:	b083      	sub	sp, #12
   13cc8:	af00      	add	r7, sp, #0
   13cca:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
   13ccc:	4a04      	ldr	r2, [pc, #16]	; (13ce0 <HciSecRegister+0x1c>)
   13cce:	687b      	ldr	r3, [r7, #4]
   13cd0:	60d3      	str	r3, [r2, #12]
}
   13cd2:	bf00      	nop
   13cd4:	370c      	adds	r7, #12
   13cd6:	46bd      	mov	sp, r7
   13cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   13cdc:	4770      	bx	lr
   13cde:	bf00      	nop
   13ce0:	100051fc 	.word	0x100051fc

00013ce4 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   13ce4:	b480      	push	{r7}
   13ce6:	b083      	sub	sp, #12
   13ce8:	af00      	add	r7, sp, #0
   13cea:	6078      	str	r0, [r7, #4]
   13cec:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
   13cee:	4a06      	ldr	r2, [pc, #24]	; (13d08 <HciAclRegister+0x24>)
   13cf0:	687b      	ldr	r3, [r7, #4]
   13cf2:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   13cf4:	4a04      	ldr	r2, [pc, #16]	; (13d08 <HciAclRegister+0x24>)
   13cf6:	683b      	ldr	r3, [r7, #0]
   13cf8:	6153      	str	r3, [r2, #20]
}
   13cfa:	bf00      	nop
   13cfc:	370c      	adds	r7, #12
   13cfe:	46bd      	mov	sp, r7
   13d00:	f85d 7b04 	ldr.w	r7, [sp], #4
   13d04:	4770      	bx	lr
   13d06:	bf00      	nop
   13d08:	100051fc 	.word	0x100051fc

00013d0c <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   13d0c:	b580      	push	{r7, lr}
   13d0e:	b082      	sub	sp, #8
   13d10:	af00      	add	r7, sp, #0
   13d12:	4603      	mov	r3, r0
   13d14:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   13d16:	4a07      	ldr	r2, [pc, #28]	; (13d34 <HciHandlerInit+0x28>)
   13d18:	79fb      	ldrb	r3, [r7, #7]
   13d1a:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   13d1c:	4b05      	ldr	r3, [pc, #20]	; (13d34 <HciHandlerInit+0x28>)
   13d1e:	2200      	movs	r2, #0
   13d20:	601a      	str	r2, [r3, #0]
   13d22:	4b04      	ldr	r3, [pc, #16]	; (13d34 <HciHandlerInit+0x28>)
   13d24:	2200      	movs	r2, #0
   13d26:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
   13d28:	f002 fff2 	bl	16d10 <HciCoreInit>
}
   13d2c:	bf00      	nop
   13d2e:	3708      	adds	r7, #8
   13d30:	46bd      	mov	sp, r7
   13d32:	bd80      	pop	{r7, pc}
   13d34:	100051fc 	.word	0x100051fc

00013d38 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   13d38:	b580      	push	{r7, lr}
   13d3a:	b082      	sub	sp, #8
   13d3c:	af00      	add	r7, sp, #0
   13d3e:	4603      	mov	r3, r0
   13d40:	6039      	str	r1, [r7, #0]
   13d42:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
   13d44:	79fb      	ldrb	r3, [r7, #7]
   13d46:	6839      	ldr	r1, [r7, #0]
   13d48:	4618      	mov	r0, r3
   13d4a:	f003 f96f 	bl	1702c <HciCoreHandler>
}
   13d4e:	bf00      	nop
   13d50:	3708      	adds	r7, #8
   13d52:	46bd      	mov	sp, r7
   13d54:	bd80      	pop	{r7, pc}
	...

00013d58 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   13d58:	b480      	push	{r7}
   13d5a:	b083      	sub	sp, #12
   13d5c:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
   13d5e:	4b0e      	ldr	r3, [pc, #56]	; (13d98 <getNextToken+0x40>)
   13d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13d64:	1c5a      	adds	r2, r3, #1
   13d66:	b2d1      	uxtb	r1, r2
   13d68:	4a0b      	ldr	r2, [pc, #44]	; (13d98 <getNextToken+0x40>)
   13d6a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   13d6e:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
   13d70:	79fb      	ldrb	r3, [r7, #7]
   13d72:	2bff      	cmp	r3, #255	; 0xff
   13d74:	d108      	bne.n	13d88 <getNextToken+0x30>
  {
    token = secCb.token++;
   13d76:	4b08      	ldr	r3, [pc, #32]	; (13d98 <getNextToken+0x40>)
   13d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13d7c:	1c5a      	adds	r2, r3, #1
   13d7e:	b2d1      	uxtb	r1, r2
   13d80:	4a05      	ldr	r2, [pc, #20]	; (13d98 <getNextToken+0x40>)
   13d82:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   13d86:	71fb      	strb	r3, [r7, #7]
  }

  return token;
   13d88:	79fb      	ldrb	r3, [r7, #7]
}
   13d8a:	4618      	mov	r0, r3
   13d8c:	370c      	adds	r7, #12
   13d8e:	46bd      	mov	sp, r7
   13d90:	f85d 7b04 	ldr.w	r7, [sp], #4
   13d94:	4770      	bx	lr
   13d96:	bf00      	nop
   13d98:	10005218 	.word	0x10005218

00013d9c <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   13d9c:	b580      	push	{r7, lr}
   13d9e:	b086      	sub	sp, #24
   13da0:	af00      	add	r7, sp, #0
   13da2:	60f8      	str	r0, [r7, #12]
   13da4:	60b9      	str	r1, [r7, #8]
   13da6:	4611      	mov	r1, r2
   13da8:	461a      	mov	r2, r3
   13daa:	460b      	mov	r3, r1
   13dac:	71fb      	strb	r3, [r7, #7]
   13dae:	4613      	mov	r3, r2
   13db0:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   13db2:	2030      	movs	r0, #48	; 0x30
   13db4:	f001 fa45 	bl	15242 <WsfMsgAlloc>
   13db8:	6178      	str	r0, [r7, #20]
   13dba:	697b      	ldr	r3, [r7, #20]
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d01d      	beq.n	13dfc <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
   13dc0:	f7ff ffca 	bl	13d58 <getNextToken>
   13dc4:	4603      	mov	r3, r0
   13dc6:	461a      	mov	r2, r3
   13dc8:	697b      	ldr	r3, [r7, #20]
   13dca:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   13dcc:	697b      	ldr	r3, [r7, #20]
   13dce:	88ba      	ldrh	r2, [r7, #4]
   13dd0:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   13dd2:	697b      	ldr	r3, [r7, #20]
   13dd4:	f897 2020 	ldrb.w	r2, [r7, #32]
   13dd8:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
   13dda:	697b      	ldr	r3, [r7, #20]
   13ddc:	2200      	movs	r2, #0
   13dde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   13de2:	79fb      	ldrb	r3, [r7, #7]
   13de4:	697a      	ldr	r2, [r7, #20]
   13de6:	4619      	mov	r1, r3
   13de8:	4807      	ldr	r0, [pc, #28]	; (13e08 <SecAes+0x6c>)
   13dea:	f001 fa66 	bl	152ba <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   13dee:	68b9      	ldr	r1, [r7, #8]
   13df0:	68f8      	ldr	r0, [r7, #12]
   13df2:	f001 ffae 	bl	15d52 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   13df6:	697b      	ldr	r3, [r7, #20]
   13df8:	78db      	ldrb	r3, [r3, #3]
   13dfa:	e000      	b.n	13dfe <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
   13dfc:	23ff      	movs	r3, #255	; 0xff
}
   13dfe:	4618      	mov	r0, r3
   13e00:	3718      	adds	r7, #24
   13e02:	46bd      	mov	sp, r7
   13e04:	bd80      	pop	{r7, pc}
   13e06:	bf00      	nop
   13e08:	10005238 	.word	0x10005238

00013e0c <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   13e0c:	b580      	push	{r7, lr}
   13e0e:	b086      	sub	sp, #24
   13e10:	af00      	add	r7, sp, #0
   13e12:	60f8      	str	r0, [r7, #12]
   13e14:	60b9      	str	r1, [r7, #8]
   13e16:	4613      	mov	r3, r2
   13e18:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   13e1a:	68fb      	ldr	r3, [r7, #12]
   13e1c:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   13e1e:	68fb      	ldr	r3, [r7, #12]
   13e20:	f103 0208 	add.w	r2, r3, #8
   13e24:	697b      	ldr	r3, [r7, #20]
   13e26:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   13e28:	697b      	ldr	r3, [r7, #20]
   13e2a:	685a      	ldr	r2, [r3, #4]
   13e2c:	68bb      	ldr	r3, [r7, #8]
   13e2e:	3305      	adds	r3, #5
   13e30:	4619      	mov	r1, r3
   13e32:	4610      	mov	r0, r2
   13e34:	f000 fbf3 	bl	1461e <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   13e38:	79fb      	ldrb	r3, [r7, #7]
   13e3a:	6979      	ldr	r1, [r7, #20]
   13e3c:	4618      	mov	r0, r3
   13e3e:	f001 fa24 	bl	1528a <WsfMsgSend>
}
   13e42:	bf00      	nop
   13e44:	3718      	adds	r7, #24
   13e46:	46bd      	mov	sp, r7
   13e48:	bd80      	pop	{r7, pc}
	...

00013e4c <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
   13e4c:	b480      	push	{r7}
   13e4e:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   13e50:	4b03      	ldr	r3, [pc, #12]	; (13e60 <SecAesInit+0x14>)
   13e52:	4a04      	ldr	r2, [pc, #16]	; (13e64 <SecAesInit+0x18>)
   13e54:	62da      	str	r2, [r3, #44]	; 0x2c
}
   13e56:	bf00      	nop
   13e58:	46bd      	mov	sp, r7
   13e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   13e5e:	4770      	bx	lr
   13e60:	10005218 	.word	0x10005218
   13e64:	00013e0d 	.word	0x00013e0d

00013e68 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   13e68:	b580      	push	{r7, lr}
   13e6a:	b08a      	sub	sp, #40	; 0x28
   13e6c:	af00      	add	r7, sp, #0
   13e6e:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13e74:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   13e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13e78:	681b      	ldr	r3, [r3, #0]
   13e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13e7c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   13e7e:	4413      	add	r3, r2
   13e80:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
   13e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   13e86:	b2da      	uxtb	r2, r3
   13e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13e8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   13e8c:	b2db      	uxtb	r3, r3
   13e8e:	1ad3      	subs	r3, r2, r3
   13e90:	b2db      	uxtb	r3, r3
   13e92:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   13e94:	f997 301f 	ldrsb.w	r3, [r7, #31]
   13e98:	2b10      	cmp	r3, #16
   13e9a:	dc2d      	bgt.n	13ef8 <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   13e9c:	f107 030c 	add.w	r3, r7, #12
   13ea0:	2210      	movs	r2, #16
   13ea2:	6a39      	ldr	r1, [r7, #32]
   13ea4:	4618      	mov	r0, r3
   13ea6:	f000 fbf5 	bl	14694 <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   13eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
   13eae:	2b10      	cmp	r3, #16
   13eb0:	d014      	beq.n	13edc <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
   13eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
   13eb6:	f1c3 0310 	rsb	r3, r3, #16
   13eba:	461a      	mov	r2, r3
   13ebc:	f107 030c 	add.w	r3, r7, #12
   13ec0:	2100      	movs	r1, #0
   13ec2:	4618      	mov	r0, r3
   13ec4:	f7f8 fa4a 	bl	c35c <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
   13ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
   13ecc:	f1c3 030f 	rsb	r3, r3, #15
   13ed0:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13ed4:	4413      	add	r3, r2
   13ed6:	2280      	movs	r2, #128	; 0x80
   13ed8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
   13edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ede:	f103 0214 	add.w	r2, r3, #20
   13ee2:	f107 030c 	add.w	r3, r7, #12
   13ee6:	4611      	mov	r1, r2
   13ee8:	4618      	mov	r0, r3
   13eea:	f000 fbb4 	bl	14656 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   13eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ef0:	2202      	movs	r2, #2
   13ef2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   13ef6:	e006      	b.n	13f06 <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   13ef8:	f107 030c 	add.w	r3, r7, #12
   13efc:	2210      	movs	r2, #16
   13efe:	6a39      	ldr	r1, [r7, #32]
   13f00:	4618      	mov	r0, r3
   13f02:	f000 fbc7 	bl	14694 <WStrReverseCpy>
  }

  if (pCmac->position != 0)
   13f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   13f0a:	2b00      	cmp	r3, #0
   13f0c:	d008      	beq.n	13f20 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
   13f0e:	687b      	ldr	r3, [r7, #4]
   13f10:	f103 0208 	add.w	r2, r3, #8
   13f14:	f107 030c 	add.w	r3, r7, #12
   13f18:	4611      	mov	r1, r2
   13f1a:	4618      	mov	r0, r3
   13f1c:	f000 fb9b 	bl	14656 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   13f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   13f24:	3310      	adds	r3, #16
   13f26:	b29a      	uxth	r2, r3
   13f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f2a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   13f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13f32:	687a      	ldr	r2, [r7, #4]
   13f34:	4619      	mov	r1, r3
   13f36:	4807      	ldr	r0, [pc, #28]	; (13f54 <secCmacProcessBlock+0xec>)
   13f38:	f001 f9bf 	bl	152ba <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   13f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f3e:	3304      	adds	r3, #4
   13f40:	f107 020c 	add.w	r2, r7, #12
   13f44:	4611      	mov	r1, r2
   13f46:	4618      	mov	r0, r3
   13f48:	f001 ff03 	bl	15d52 <HciLeEncryptCmd>
}
   13f4c:	bf00      	nop
   13f4e:	3728      	adds	r7, #40	; 0x28
   13f50:	46bd      	mov	sp, r7
   13f52:	bd80      	pop	{r7, pc}
   13f54:	10005238 	.word	0x10005238

00013f58 <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   13f58:	b580      	push	{r7, lr}
   13f5a:	b088      	sub	sp, #32
   13f5c:	af00      	add	r7, sp, #0
   13f5e:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   13f60:	687b      	ldr	r3, [r7, #4]
   13f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f64:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   13f66:	f107 030c 	add.w	r3, r7, #12
   13f6a:	2210      	movs	r2, #16
   13f6c:	2100      	movs	r1, #0
   13f6e:	4618      	mov	r0, r3
   13f70:	f7f8 f9f4 	bl	c35c <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   13f74:	69fb      	ldr	r3, [r7, #28]
   13f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13f7a:	687a      	ldr	r2, [r7, #4]
   13f7c:	4619      	mov	r1, r3
   13f7e:	4807      	ldr	r0, [pc, #28]	; (13f9c <secCmacGenSubkey1+0x44>)
   13f80:	f001 f99b 	bl	152ba <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   13f84:	69fb      	ldr	r3, [r7, #28]
   13f86:	3304      	adds	r3, #4
   13f88:	f107 020c 	add.w	r2, r7, #12
   13f8c:	4611      	mov	r1, r2
   13f8e:	4618      	mov	r0, r3
   13f90:	f001 fedf 	bl	15d52 <HciLeEncryptCmd>
}
   13f94:	bf00      	nop
   13f96:	3720      	adds	r7, #32
   13f98:	46bd      	mov	sp, r7
   13f9a:	bd80      	pop	{r7, pc}
   13f9c:	10005238 	.word	0x10005238

00013fa0 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   13fa0:	b480      	push	{r7}
   13fa2:	b085      	sub	sp, #20
   13fa4:	af00      	add	r7, sp, #0
   13fa6:	6078      	str	r0, [r7, #4]
   13fa8:	460b      	mov	r3, r1
   13faa:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
   13fac:	2300      	movs	r3, #0
   13fae:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   13fb0:	2300      	movs	r3, #0
   13fb2:	73fb      	strb	r3, [r7, #15]
   13fb4:	e021      	b.n	13ffa <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
   13fb6:	7bfb      	ldrb	r3, [r7, #15]
   13fb8:	687a      	ldr	r2, [r7, #4]
   13fba:	4413      	add	r3, r2
   13fbc:	781b      	ldrb	r3, [r3, #0]
   13fbe:	461a      	mov	r2, r3
   13fc0:	78fb      	ldrb	r3, [r7, #3]
   13fc2:	f1c3 0308 	rsb	r3, r3, #8
   13fc6:	fa42 f303 	asr.w	r3, r2, r3
   13fca:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
   13fcc:	7bfb      	ldrb	r3, [r7, #15]
   13fce:	687a      	ldr	r2, [r7, #4]
   13fd0:	4413      	add	r3, r2
   13fd2:	7bfa      	ldrb	r2, [r7, #15]
   13fd4:	6879      	ldr	r1, [r7, #4]
   13fd6:	440a      	add	r2, r1
   13fd8:	7812      	ldrb	r2, [r2, #0]
   13fda:	4611      	mov	r1, r2
   13fdc:	78fa      	ldrb	r2, [r7, #3]
   13fde:	fa01 f202 	lsl.w	r2, r1, r2
   13fe2:	b251      	sxtb	r1, r2
   13fe4:	f997 200e 	ldrsb.w	r2, [r7, #14]
   13fe8:	430a      	orrs	r2, r1
   13fea:	b252      	sxtb	r2, r2
   13fec:	b2d2      	uxtb	r2, r2
   13fee:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
   13ff0:	7b7b      	ldrb	r3, [r7, #13]
   13ff2:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   13ff4:	7bfb      	ldrb	r3, [r7, #15]
   13ff6:	3301      	adds	r3, #1
   13ff8:	73fb      	strb	r3, [r7, #15]
   13ffa:	7bfb      	ldrb	r3, [r7, #15]
   13ffc:	2b0f      	cmp	r3, #15
   13ffe:	d9da      	bls.n	13fb6 <secCmacKeyShift+0x16>
  }

  return prevBits;
   14000:	7bbb      	ldrb	r3, [r7, #14]
}
   14002:	4618      	mov	r0, r3
   14004:	3714      	adds	r7, #20
   14006:	46bd      	mov	sp, r7
   14008:	f85d 7b04 	ldr.w	r7, [sp], #4
   1400c:	4770      	bx	lr

0001400e <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   1400e:	b580      	push	{r7, lr}
   14010:	b084      	sub	sp, #16
   14012:	af00      	add	r7, sp, #0
   14014:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   14016:	687b      	ldr	r3, [r7, #4]
   14018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1401a:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   1401c:	68fb      	ldr	r3, [r7, #12]
   1401e:	f103 0214 	add.w	r2, r3, #20
   14022:	687b      	ldr	r3, [r7, #4]
   14024:	3308      	adds	r3, #8
   14026:	4619      	mov	r1, r3
   14028:	4610      	mov	r0, r2
   1402a:	f000 faf8 	bl	1461e <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   1402e:	68fb      	ldr	r3, [r7, #12]
   14030:	3314      	adds	r3, #20
   14032:	2101      	movs	r1, #1
   14034:	4618      	mov	r0, r3
   14036:	f7ff ffb3 	bl	13fa0 <secCmacKeyShift>
   1403a:	4603      	mov	r3, r0
   1403c:	72fb      	strb	r3, [r7, #11]

  if (overflow)
   1403e:	7afb      	ldrb	r3, [r7, #11]
   14040:	2b00      	cmp	r3, #0
   14042:	d007      	beq.n	14054 <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
   14044:	68fb      	ldr	r3, [r7, #12]
   14046:	7d1b      	ldrb	r3, [r3, #20]
   14048:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   1404c:	43db      	mvns	r3, r3
   1404e:	b2da      	uxtb	r2, r3
   14050:	68fb      	ldr	r3, [r7, #12]
   14052:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   14054:	68fb      	ldr	r3, [r7, #12]
   14056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   14058:	f003 030f 	and.w	r3, r3, #15
   1405c:	b29b      	uxth	r3, r3
   1405e:	2b00      	cmp	r3, #0
   14060:	d012      	beq.n	14088 <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   14062:	68fb      	ldr	r3, [r7, #12]
   14064:	3314      	adds	r3, #20
   14066:	2101      	movs	r1, #1
   14068:	4618      	mov	r0, r3
   1406a:	f7ff ff99 	bl	13fa0 <secCmacKeyShift>
   1406e:	4603      	mov	r3, r0
   14070:	72fb      	strb	r3, [r7, #11]

    if (overflow)
   14072:	7afb      	ldrb	r3, [r7, #11]
   14074:	2b00      	cmp	r3, #0
   14076:	d007      	beq.n	14088 <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
   14078:	68fb      	ldr	r3, [r7, #12]
   1407a:	7d1b      	ldrb	r3, [r3, #20]
   1407c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   14080:	43db      	mvns	r3, r3
   14082:	b2da      	uxtb	r2, r3
   14084:	68fb      	ldr	r3, [r7, #12]
   14086:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   14088:	68fb      	ldr	r3, [r7, #12]
   1408a:	2201      	movs	r2, #1
   1408c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   14090:	6878      	ldr	r0, [r7, #4]
   14092:	f7ff fee9 	bl	13e68 <secCmacProcessBlock>
}
   14096:	bf00      	nop
   14098:	3710      	adds	r7, #16
   1409a:	46bd      	mov	sp, r7
   1409c:	bd80      	pop	{r7, pc}

0001409e <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   1409e:	b580      	push	{r7, lr}
   140a0:	b084      	sub	sp, #16
   140a2:	af00      	add	r7, sp, #0
   140a4:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   140a6:	687b      	ldr	r3, [r7, #4]
   140a8:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   140aa:	687b      	ldr	r3, [r7, #4]
   140ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   140ae:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
   140b0:	687b      	ldr	r3, [r7, #4]
   140b2:	3308      	adds	r3, #8
   140b4:	2110      	movs	r1, #16
   140b6:	4618      	mov	r0, r3
   140b8:	f000 fb15 	bl	146e6 <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
   140bc:	687b      	ldr	r3, [r7, #4]
   140be:	f103 0208 	add.w	r2, r3, #8
   140c2:	68fb      	ldr	r3, [r7, #12]
   140c4:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
   140c6:	68bb      	ldr	r3, [r7, #8]
   140c8:	681b      	ldr	r3, [r3, #0]
   140ca:	4618      	mov	r0, r3
   140cc:	f001 f86a 	bl	151a4 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
   140d0:	68bb      	ldr	r3, [r7, #8]
   140d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   140d6:	68f9      	ldr	r1, [r7, #12]
   140d8:	4618      	mov	r0, r3
   140da:	f001 f8d6 	bl	1528a <WsfMsgSend>
}
   140de:	bf00      	nop
   140e0:	3710      	adds	r7, #16
   140e2:	46bd      	mov	sp, r7
   140e4:	bd80      	pop	{r7, pc}

000140e6 <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   140e6:	b580      	push	{r7, lr}
   140e8:	b086      	sub	sp, #24
   140ea:	af00      	add	r7, sp, #0
   140ec:	60f8      	str	r0, [r7, #12]
   140ee:	60b9      	str	r1, [r7, #8]
   140f0:	4613      	mov	r3, r2
   140f2:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   140f4:	68fb      	ldr	r3, [r7, #12]
   140f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   140f8:	617b      	str	r3, [r7, #20]

  if (pCmac)
   140fa:	697b      	ldr	r3, [r7, #20]
   140fc:	2b00      	cmp	r3, #0
   140fe:	d01e      	beq.n	1413e <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   14100:	68fb      	ldr	r3, [r7, #12]
   14102:	f103 0208 	add.w	r2, r3, #8
   14106:	68bb      	ldr	r3, [r7, #8]
   14108:	3305      	adds	r3, #5
   1410a:	4619      	mov	r1, r3
   1410c:	4610      	mov	r0, r2
   1410e:	f000 fa86 	bl	1461e <Calc128Cpy>

    switch (pCmac->state)
   14112:	697b      	ldr	r3, [r7, #20]
   14114:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   14118:	2b01      	cmp	r3, #1
   1411a:	d008      	beq.n	1412e <SecCmacHciCback+0x48>
   1411c:	2b02      	cmp	r3, #2
   1411e:	d00a      	beq.n	14136 <SecCmacHciCback+0x50>
   14120:	2b00      	cmp	r3, #0
   14122:	d000      	beq.n	14126 <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   14124:	e00b      	b.n	1413e <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
   14126:	68f8      	ldr	r0, [r7, #12]
   14128:	f7ff ff71 	bl	1400e <secCmacGenSubkey2>
      break;
   1412c:	e007      	b.n	1413e <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
   1412e:	68f8      	ldr	r0, [r7, #12]
   14130:	f7ff fe9a 	bl	13e68 <secCmacProcessBlock>
      break;
   14134:	e003      	b.n	1413e <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
   14136:	68f8      	ldr	r0, [r7, #12]
   14138:	f7ff ffb1 	bl	1409e <secCmacComplete>
      break;
   1413c:	bf00      	nop
}
   1413e:	bf00      	nop
   14140:	3718      	adds	r7, #24
   14142:	46bd      	mov	sp, r7
   14144:	bd80      	pop	{r7, pc}
	...

00014148 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   14148:	b580      	push	{r7, lr}
   1414a:	b088      	sub	sp, #32
   1414c:	af00      	add	r7, sp, #0
   1414e:	60f8      	str	r0, [r7, #12]
   14150:	60b9      	str	r1, [r7, #8]
   14152:	4611      	mov	r1, r2
   14154:	461a      	mov	r2, r3
   14156:	460b      	mov	r3, r1
   14158:	71fb      	strb	r3, [r7, #7]
   1415a:	4613      	mov	r3, r2
   1415c:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   1415e:	235c      	movs	r3, #92	; 0x5c
   14160:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   14162:	8bfb      	ldrh	r3, [r7, #30]
   14164:	4618      	mov	r0, r3
   14166:	f001 f86c 	bl	15242 <WsfMsgAlloc>
   1416a:	61b8      	str	r0, [r7, #24]
   1416c:	69bb      	ldr	r3, [r7, #24]
   1416e:	2b00      	cmp	r3, #0
   14170:	d038      	beq.n	141e4 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   14172:	69bb      	ldr	r3, [r7, #24]
   14174:	3330      	adds	r3, #48	; 0x30
   14176:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   14178:	69bb      	ldr	r3, [r7, #24]
   1417a:	697a      	ldr	r2, [r7, #20]
   1417c:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
   1417e:	69bb      	ldr	r3, [r7, #24]
   14180:	2201      	movs	r2, #1
   14182:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
   14186:	4b1a      	ldr	r3, [pc, #104]	; (141f0 <SecCmac+0xa8>)
   14188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1418c:	1c5a      	adds	r2, r3, #1
   1418e:	b2d1      	uxtb	r1, r2
   14190:	4a17      	ldr	r2, [pc, #92]	; (141f0 <SecCmac+0xa8>)
   14192:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   14196:	69ba      	ldr	r2, [r7, #24]
   14198:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   1419a:	69bb      	ldr	r3, [r7, #24]
   1419c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   1419e:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   141a0:	69bb      	ldr	r3, [r7, #24]
   141a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   141a6:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   141a8:	697b      	ldr	r3, [r7, #20]
   141aa:	68ba      	ldr	r2, [r7, #8]
   141ac:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   141ae:	79fb      	ldrb	r3, [r7, #7]
   141b0:	b29a      	uxth	r2, r3
   141b2:	697b      	ldr	r3, [r7, #20]
   141b4:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   141b6:	697b      	ldr	r3, [r7, #20]
   141b8:	2200      	movs	r2, #0
   141ba:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   141bc:	697b      	ldr	r3, [r7, #20]
   141be:	79ba      	ldrb	r2, [r7, #6]
   141c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   141c4:	697b      	ldr	r3, [r7, #20]
   141c6:	2200      	movs	r2, #0
   141c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
   141cc:	697b      	ldr	r3, [r7, #20]
   141ce:	3304      	adds	r3, #4
   141d0:	2210      	movs	r2, #16
   141d2:	68f9      	ldr	r1, [r7, #12]
   141d4:	4618      	mov	r0, r3
   141d6:	f000 fa5d 	bl	14694 <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   141da:	69b8      	ldr	r0, [r7, #24]
   141dc:	f7ff febc 	bl	13f58 <secCmacGenSubkey1>

    return TRUE;
   141e0:	2301      	movs	r3, #1
   141e2:	e000      	b.n	141e6 <SecCmac+0x9e>
  }

  return FALSE;
   141e4:	2300      	movs	r3, #0
}
   141e6:	4618      	mov	r0, r3
   141e8:	3720      	adds	r7, #32
   141ea:	46bd      	mov	sp, r7
   141ec:	bd80      	pop	{r7, pc}
   141ee:	bf00      	nop
   141f0:	10005218 	.word	0x10005218

000141f4 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
   141f4:	b480      	push	{r7}
   141f6:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   141f8:	4b03      	ldr	r3, [pc, #12]	; (14208 <SecCmacInit+0x14>)
   141fa:	4a04      	ldr	r2, [pc, #16]	; (1420c <SecCmacInit+0x18>)
   141fc:	631a      	str	r2, [r3, #48]	; 0x30
}
   141fe:	bf00      	nop
   14200:	46bd      	mov	sp, r7
   14202:	f85d 7b04 	ldr.w	r7, [sp], #4
   14206:	4770      	bx	lr
   14208:	10005218 	.word	0x10005218
   1420c:	000140e7 	.word	0x000140e7

00014210 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   14210:	b580      	push	{r7, lr}
   14212:	b086      	sub	sp, #24
   14214:	af00      	add	r7, sp, #0
   14216:	60f8      	str	r0, [r7, #12]
   14218:	60b9      	str	r1, [r7, #8]
   1421a:	4613      	mov	r3, r2
   1421c:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
   1421e:	68fb      	ldr	r3, [r7, #12]
   14220:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
   14222:	68bb      	ldr	r3, [r7, #8]
   14224:	789b      	ldrb	r3, [r3, #2]
   14226:	2b25      	cmp	r3, #37	; 0x25
   14228:	d11b      	bne.n	14262 <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
   1422a:	697b      	ldr	r3, [r7, #20]
   1422c:	1d18      	adds	r0, r3, #4
   1422e:	68bb      	ldr	r3, [r7, #8]
   14230:	3305      	adds	r3, #5
   14232:	2220      	movs	r2, #32
   14234:	4619      	mov	r1, r3
   14236:	f000 fa2d 	bl	14694 <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
   1423a:	697b      	ldr	r3, [r7, #20]
   1423c:	f103 0024 	add.w	r0, r3, #36	; 0x24
   14240:	68bb      	ldr	r3, [r7, #8]
   14242:	3305      	adds	r3, #5
   14244:	3320      	adds	r3, #32
   14246:	2220      	movs	r2, #32
   14248:	4619      	mov	r1, r3
   1424a:	f000 fa23 	bl	14694 <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
   1424e:	68bb      	ldr	r3, [r7, #8]
   14250:	791a      	ldrb	r2, [r3, #4]
   14252:	697b      	ldr	r3, [r7, #20]
   14254:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   14256:	79fb      	ldrb	r3, [r7, #7]
   14258:	6979      	ldr	r1, [r7, #20]
   1425a:	4618      	mov	r0, r3
   1425c:	f001 f815 	bl	1528a <WsfMsgSend>
    }
    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
   14260:	e01f      	b.n	142a2 <SecEccHciCback+0x92>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   14262:	68bb      	ldr	r3, [r7, #8]
   14264:	789b      	ldrb	r3, [r3, #2]
   14266:	2b26      	cmp	r3, #38	; 0x26
   14268:	d11b      	bne.n	142a2 <SecEccHciCback+0x92>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
   1426a:	697b      	ldr	r3, [r7, #20]
   1426c:	1d18      	adds	r0, r3, #4
   1426e:	68bb      	ldr	r3, [r7, #8]
   14270:	3305      	adds	r3, #5
   14272:	2220      	movs	r2, #32
   14274:	4619      	mov	r1, r3
   14276:	f000 fa0d 	bl	14694 <WStrReverseCpy>
    if(pEvent->leGenDHKey.status != HCI_SUCCESS) {
   1427a:	68bb      	ldr	r3, [r7, #8]
   1427c:	791b      	ldrb	r3, [r3, #4]
   1427e:	2b00      	cmp	r3, #0
   14280:	d006      	beq.n	14290 <SecEccHciCback+0x80>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   14282:	697b      	ldr	r3, [r7, #20]
   14284:	3304      	adds	r3, #4
   14286:	2220      	movs	r2, #32
   14288:	21ff      	movs	r1, #255	; 0xff
   1428a:	4618      	mov	r0, r3
   1428c:	f7f8 f866 	bl	c35c <memset>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
   14290:	68bb      	ldr	r3, [r7, #8]
   14292:	791a      	ldrb	r2, [r3, #4]
   14294:	697b      	ldr	r3, [r7, #20]
   14296:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   14298:	79fb      	ldrb	r3, [r7, #7]
   1429a:	6979      	ldr	r1, [r7, #20]
   1429c:	4618      	mov	r0, r3
   1429e:	f000 fff4 	bl	1528a <WsfMsgSend>
}
   142a2:	bf00      	nop
   142a4:	3718      	adds	r7, #24
   142a6:	46bd      	mov	sp, r7
   142a8:	bd80      	pop	{r7, pc}
	...

000142ac <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   142ac:	b580      	push	{r7, lr}
   142ae:	b084      	sub	sp, #16
   142b0:	af00      	add	r7, sp, #0
   142b2:	4603      	mov	r3, r0
   142b4:	71fb      	strb	r3, [r7, #7]
   142b6:	460b      	mov	r3, r1
   142b8:	80bb      	strh	r3, [r7, #4]
   142ba:	4613      	mov	r3, r2
   142bc:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   142be:	2394      	movs	r3, #148	; 0x94
   142c0:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   142c2:	89fb      	ldrh	r3, [r7, #14]
   142c4:	4618      	mov	r0, r3
   142c6:	f000 ffbc 	bl	15242 <WsfMsgAlloc>
   142ca:	60b8      	str	r0, [r7, #8]
   142cc:	68bb      	ldr	r3, [r7, #8]
   142ce:	2b00      	cmp	r3, #0
   142d0:	d013      	beq.n	142fa <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   142d2:	68bb      	ldr	r3, [r7, #8]
   142d4:	88ba      	ldrh	r2, [r7, #4]
   142d6:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   142d8:	68bb      	ldr	r3, [r7, #8]
   142da:	79ba      	ldrb	r2, [r7, #6]
   142dc:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   142de:	68bb      	ldr	r3, [r7, #8]
   142e0:	2202      	movs	r2, #2
   142e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   142e6:	79fb      	ldrb	r3, [r7, #7]
   142e8:	68ba      	ldr	r2, [r7, #8]
   142ea:	4619      	mov	r1, r3
   142ec:	4805      	ldr	r0, [pc, #20]	; (14304 <SecEccGenKey+0x58>)
   142ee:	f000 ffe4 	bl	152ba <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
   142f2:	f001 fce4 	bl	15cbe <HciLeReadLocalP256PubKey>

    return TRUE;
   142f6:	2301      	movs	r3, #1
   142f8:	e000      	b.n	142fc <SecEccGenKey+0x50>
  }

  return FALSE;
   142fa:	2300      	movs	r3, #0
}
   142fc:	4618      	mov	r0, r3
   142fe:	3710      	adds	r7, #16
   14300:	46bd      	mov	sp, r7
   14302:	bd80      	pop	{r7, pc}
   14304:	10005238 	.word	0x10005238

00014308 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   14308:	b580      	push	{r7, lr}
   1430a:	b09e      	sub	sp, #120	; 0x78
   1430c:	af00      	add	r7, sp, #0
   1430e:	6078      	str	r0, [r7, #4]
   14310:	4608      	mov	r0, r1
   14312:	4611      	mov	r1, r2
   14314:	461a      	mov	r2, r3
   14316:	4603      	mov	r3, r0
   14318:	70fb      	strb	r3, [r7, #3]
   1431a:	460b      	mov	r3, r1
   1431c:	803b      	strh	r3, [r7, #0]
   1431e:	4613      	mov	r3, r2
   14320:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   14322:	2394      	movs	r3, #148	; 0x94
   14324:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   14328:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   1432c:	4618      	mov	r0, r3
   1432e:	f000 ff88 	bl	15242 <WsfMsgAlloc>
   14332:	6738      	str	r0, [r7, #112]	; 0x70
   14334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14336:	2b00      	cmp	r3, #0
   14338:	d060      	beq.n	143fc <SecEccGenSharedSecret+0xf4>
  {
	  secEccKey_t           temp_ecc_key;

    /* Reverse keys (to little endian) */
    WStrReverseCpy(temp_ecc_key.pubKey_x, pKey->pubKey_x, SEC_ECC_KEY_LEN);
   1433a:	6879      	ldr	r1, [r7, #4]
   1433c:	f107 030c 	add.w	r3, r7, #12
   14340:	2220      	movs	r2, #32
   14342:	4618      	mov	r0, r3
   14344:	f000 f9a6 	bl	14694 <WStrReverseCpy>
    WStrReverseCpy(temp_ecc_key.pubKey_y, pKey->pubKey_y, SEC_ECC_KEY_LEN);
   14348:	687b      	ldr	r3, [r7, #4]
   1434a:	f103 0120 	add.w	r1, r3, #32
   1434e:	f107 030c 	add.w	r3, r7, #12
   14352:	3320      	adds	r3, #32
   14354:	2220      	movs	r2, #32
   14356:	4618      	mov	r0, r3
   14358:	f000 f99c 	bl	14694 <WStrReverseCpy>
	
    #if defined(AM_PART_APOLLO) || defined(AM_PART_APOLLO2)
    {
    #else
    if(!APOLLO3_B0) 
   1435c:	4b2a      	ldr	r3, [pc, #168]	; (14408 <SecEccGenSharedSecret+0x100>)
   1435e:	68db      	ldr	r3, [r3, #12]
   14360:	b2db      	uxtb	r3, r3
   14362:	2b21      	cmp	r3, #33	; 0x21
   14364:	d02e      	beq.n	143c4 <SecEccGenSharedSecret+0xbc>
    {
    #endif
      // at this time only B0 has fix for the security vulnerability.
      if(!uECC_valid_public_key(temp_ecc_key.pubKey_x, uECC_secp256r1()))
   14366:	f00d f883 	bl	21470 <uECC_secp256r1>
   1436a:	4602      	mov	r2, r0
   1436c:	f107 030c 	add.w	r3, r7, #12
   14370:	4611      	mov	r1, r2
   14372:	4618      	mov	r0, r3
   14374:	f00d f8f6 	bl	21564 <uECC_valid_public_key>
   14378:	4603      	mov	r3, r0
   1437a:	2b00      	cmp	r3, #0
   1437c:	d122      	bne.n	143c4 <SecEccGenSharedSecret+0xbc>
      {

        WsfMsgFree(pBuf);
   1437e:	6f38      	ldr	r0, [r7, #112]	; 0x70
   14380:	f000 ff76 	bl	15270 <WsfMsgFree>

        secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   14384:	2064      	movs	r0, #100	; 0x64
   14386:	f000 ff5c 	bl	15242 <WsfMsgAlloc>
   1438a:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (pMsg)
   1438c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1438e:	2b00      	cmp	r3, #0
   14390:	d016      	beq.n	143c0 <SecEccGenSharedSecret+0xb8>
        {
          // set invalid shared key as suggested by the security errata
          memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   14392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14394:	3304      	adds	r3, #4
   14396:	2220      	movs	r2, #32
   14398:	21ff      	movs	r1, #255	; 0xff
   1439a:	4618      	mov	r0, r3
   1439c:	f7f7 ffde 	bl	c35c <memset>
          /* Send shared secret to handler */  
          pMsg->hdr.event = event;
   143a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   143a2:	78ba      	ldrb	r2, [r7, #2]
   143a4:	709a      	strb	r2, [r3, #2]
          pMsg->hdr.param = param;
   143a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   143a8:	883a      	ldrh	r2, [r7, #0]
   143aa:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = HCI_SUCCESS;
   143ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   143ae:	2200      	movs	r2, #0
   143b0:	70da      	strb	r2, [r3, #3]
          WsfMsgSend(handlerId, pMsg);
   143b2:	78fb      	ldrb	r3, [r7, #3]
   143b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   143b6:	4618      	mov	r0, r3
   143b8:	f000 ff67 	bl	1528a <WsfMsgSend>
          return TRUE;
   143bc:	2301      	movs	r3, #1
   143be:	e01e      	b.n	143fe <SecEccGenSharedSecret+0xf6>
        }
        else {
          return FALSE;
   143c0:	2300      	movs	r3, #0
   143c2:	e01c      	b.n	143fe <SecEccGenSharedSecret+0xf6>
    // At this point either remote public key is valid or controller has
    // the fix for the security vulnerability.
    // 

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   143c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   143c6:	883a      	ldrh	r2, [r7, #0]
   143c8:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   143ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   143cc:	78ba      	ldrb	r2, [r7, #2]
   143ce:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   143d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   143d2:	2202      	movs	r2, #2
   143d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   143d8:	78fb      	ldrb	r3, [r7, #3]
   143da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   143dc:	4619      	mov	r1, r3
   143de:	480b      	ldr	r0, [pc, #44]	; (1440c <SecEccGenSharedSecret+0x104>)
   143e0:	f000 ff6b 	bl	152ba <WsfMsgEnq>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(temp_ecc_key.pubKey_x, temp_ecc_key.pubKey_y);
   143e4:	f107 030c 	add.w	r3, r7, #12
   143e8:	f103 0220 	add.w	r2, r3, #32
   143ec:	f107 030c 	add.w	r3, r7, #12
   143f0:	4611      	mov	r1, r2
   143f2:	4618      	mov	r0, r3
   143f4:	f001 fc76 	bl	15ce4 <HciLeGenerateDHKey>

    return TRUE;
   143f8:	2301      	movs	r3, #1
   143fa:	e000      	b.n	143fe <SecEccGenSharedSecret+0xf6>
  }

  return FALSE;
   143fc:	2300      	movs	r3, #0
}
   143fe:	4618      	mov	r0, r3
   14400:	3778      	adds	r7, #120	; 0x78
   14402:	46bd      	mov	sp, r7
   14404:	bd80      	pop	{r7, pc}
   14406:	bf00      	nop
   14408:	40020000 	.word	0x40020000
   1440c:	10005238 	.word	0x10005238

00014410 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   14410:	b480      	push	{r7}
   14412:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
   14414:	4b03      	ldr	r3, [pc, #12]	; (14424 <SecEccInit+0x14>)
   14416:	4a04      	ldr	r2, [pc, #16]	; (14428 <SecEccInit+0x18>)
   14418:	635a      	str	r2, [r3, #52]	; 0x34
}
   1441a:	bf00      	nop
   1441c:	46bd      	mov	sp, r7
   1441e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14422:	4770      	bx	lr
   14424:	10005218 	.word	0x10005218
   14428:	00014211 	.word	0x00014211

0001442c <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   1442c:	b580      	push	{r7, lr}
   1442e:	b084      	sub	sp, #16
   14430:	af00      	add	r7, sp, #0
   14432:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
   14434:	2300      	movs	r3, #0
   14436:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
   14438:	2300      	movs	r3, #0
   1443a:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
   1443c:	687b      	ldr	r3, [r7, #4]
   1443e:	789b      	ldrb	r3, [r3, #2]
   14440:	2b1c      	cmp	r3, #28
   14442:	d10c      	bne.n	1445e <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memmove(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
   14444:	2218      	movs	r2, #24
   14446:	492e      	ldr	r1, [pc, #184]	; (14500 <secHciCback+0xd4>)
   14448:	482e      	ldr	r0, [pc, #184]	; (14504 <secHciCback+0xd8>)
   1444a:	f7f7 ff23 	bl	c294 <memmove>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   1444e:	687b      	ldr	r3, [r7, #4]
   14450:	3305      	adds	r3, #5
   14452:	2208      	movs	r2, #8
   14454:	4619      	mov	r1, r3
   14456:	482a      	ldr	r0, [pc, #168]	; (14500 <secHciCback+0xd4>)
   14458:	f7f7 fe82 	bl	c160 <memcpy>
      WsfMsgFree(pBuf);
    }  
    
    secCb.token = 0;
  }
}
   1445c:	e04b      	b.n	144f6 <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   1445e:	687b      	ldr	r3, [r7, #4]
   14460:	789b      	ldrb	r3, [r3, #2]
   14462:	2b1b      	cmp	r3, #27
   14464:	d007      	beq.n	14476 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   14466:	687b      	ldr	r3, [r7, #4]
   14468:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   1446a:	2b25      	cmp	r3, #37	; 0x25
   1446c:	d003      	beq.n	14476 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   1446e:	687b      	ldr	r3, [r7, #4]
   14470:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   14472:	2b26      	cmp	r3, #38	; 0x26
   14474:	d128      	bne.n	144c8 <secHciCback+0x9c>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   14476:	f107 030b 	add.w	r3, r7, #11
   1447a:	4619      	mov	r1, r3
   1447c:	4822      	ldr	r0, [pc, #136]	; (14508 <secHciCback+0xdc>)
   1447e:	f000 ff31 	bl	152e4 <WsfMsgDeq>
   14482:	60f8      	str	r0, [r7, #12]
   14484:	68fb      	ldr	r3, [r7, #12]
   14486:	2b00      	cmp	r3, #0
   14488:	d01a      	beq.n	144c0 <secHciCback+0x94>
      if (secCb.hciCbackTbl[pBuf->type])
   1448a:	68fb      	ldr	r3, [r7, #12]
   1448c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   14490:	4a1b      	ldr	r2, [pc, #108]	; (14500 <secHciCback+0xd4>)
   14492:	330a      	adds	r3, #10
   14494:	009b      	lsls	r3, r3, #2
   14496:	4413      	add	r3, r2
   14498:	685b      	ldr	r3, [r3, #4]
   1449a:	2b00      	cmp	r3, #0
   1449c:	d00c      	beq.n	144b8 <secHciCback+0x8c>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1449e:	68fb      	ldr	r3, [r7, #12]
   144a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   144a4:	4a16      	ldr	r2, [pc, #88]	; (14500 <secHciCback+0xd4>)
   144a6:	330a      	adds	r3, #10
   144a8:	009b      	lsls	r3, r3, #2
   144aa:	4413      	add	r3, r2
   144ac:	685b      	ldr	r3, [r3, #4]
   144ae:	7afa      	ldrb	r2, [r7, #11]
   144b0:	6879      	ldr	r1, [r7, #4]
   144b2:	68f8      	ldr	r0, [r7, #12]
   144b4:	4798      	blx	r3
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   144b6:	e01e      	b.n	144f6 <secHciCback+0xca>
        WSF_TRACE_WARN0("WSF sec not registered");
   144b8:	4814      	ldr	r0, [pc, #80]	; (1450c <secHciCback+0xe0>)
   144ba:	f005 fb1f 	bl	19afc <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   144be:	e01a      	b.n	144f6 <secHciCback+0xca>
      WSF_TRACE_WARN0("WSF sec queue empty!");
   144c0:	4813      	ldr	r0, [pc, #76]	; (14510 <secHciCback+0xe4>)
   144c2:	f005 fb1b 	bl	19afc <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   144c6:	e016      	b.n	144f6 <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
   144c8:	687b      	ldr	r3, [r7, #4]
   144ca:	789b      	ldrb	r3, [r3, #2]
   144cc:	2b14      	cmp	r3, #20
   144ce:	d112      	bne.n	144f6 <secHciCback+0xca>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   144d0:	e002      	b.n	144d8 <secHciCback+0xac>
      WsfMsgFree(pBuf);
   144d2:	68f8      	ldr	r0, [r7, #12]
   144d4:	f000 fecc 	bl	15270 <WsfMsgFree>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   144d8:	f107 030b 	add.w	r3, r7, #11
   144dc:	4619      	mov	r1, r3
   144de:	480a      	ldr	r0, [pc, #40]	; (14508 <secHciCback+0xdc>)
   144e0:	f000 ff00 	bl	152e4 <WsfMsgDeq>
   144e4:	60f8      	str	r0, [r7, #12]
   144e6:	68fb      	ldr	r3, [r7, #12]
   144e8:	2b00      	cmp	r3, #0
   144ea:	d1f2      	bne.n	144d2 <secHciCback+0xa6>
    secCb.token = 0;
   144ec:	4b04      	ldr	r3, [pc, #16]	; (14500 <secHciCback+0xd4>)
   144ee:	2200      	movs	r2, #0
   144f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
   144f4:	e7ff      	b.n	144f6 <secHciCback+0xca>
   144f6:	bf00      	nop
   144f8:	3710      	adds	r7, #16
   144fa:	46bd      	mov	sp, r7
   144fc:	bd80      	pop	{r7, pc}
   144fe:	bf00      	nop
   14500:	10005218 	.word	0x10005218
   14504:	10005220 	.word	0x10005220
   14508:	10005238 	.word	0x10005238
   1450c:	00021924 	.word	0x00021924
   14510:	0002193c 	.word	0x0002193c

00014514 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   14514:	b580      	push	{r7, lr}
   14516:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
   14518:	4b07      	ldr	r3, [pc, #28]	; (14538 <SecInit+0x24>)
   1451a:	2200      	movs	r2, #0
   1451c:	621a      	str	r2, [r3, #32]
   1451e:	4b06      	ldr	r3, [pc, #24]	; (14538 <SecInit+0x24>)
   14520:	2200      	movs	r2, #0
   14522:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
   14524:	4b04      	ldr	r3, [pc, #16]	; (14538 <SecInit+0x24>)
   14526:	2200      	movs	r2, #0
   14528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   1452c:	4803      	ldr	r0, [pc, #12]	; (1453c <SecInit+0x28>)
   1452e:	f7ff fbc9 	bl	13cc4 <HciSecRegister>
}
   14532:	bf00      	nop
   14534:	bd80      	pop	{r7, pc}
   14536:	bf00      	nop
   14538:	10005218 	.word	0x10005218
   1453c:	0001442d 	.word	0x0001442d

00014540 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   14540:	b580      	push	{r7, lr}
   14542:	b084      	sub	sp, #16
   14544:	af00      	add	r7, sp, #0
   14546:	6078      	str	r0, [r7, #4]
   14548:	460b      	mov	r3, r1
   1454a:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   1454c:	78fb      	ldrb	r3, [r7, #3]
   1454e:	3307      	adds	r3, #7
   14550:	2b00      	cmp	r3, #0
   14552:	da00      	bge.n	14556 <SecRand+0x16>
   14554:	3307      	adds	r3, #7
   14556:	10db      	asrs	r3, r3, #3
   14558:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
   1455a:	78fb      	ldrb	r3, [r7, #3]
   1455c:	461a      	mov	r2, r3
   1455e:	4909      	ldr	r1, [pc, #36]	; (14584 <SecRand+0x44>)
   14560:	6878      	ldr	r0, [r7, #4]
   14562:	f7f7 fdfd 	bl	c160 <memcpy>
  
  /* get new random numbers */
  while (count--)
   14566:	e001      	b.n	1456c <SecRand+0x2c>
  {
    HciLeRandCmd();
   14568:	f001 fc6a 	bl	15e40 <HciLeRandCmd>
  while (count--)
   1456c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14570:	b2da      	uxtb	r2, r3
   14572:	3a01      	subs	r2, #1
   14574:	b2d2      	uxtb	r2, r2
   14576:	73fa      	strb	r2, [r7, #15]
   14578:	2b00      	cmp	r3, #0
   1457a:	d1f5      	bne.n	14568 <SecRand+0x28>
  }
}
   1457c:	bf00      	nop
   1457e:	3710      	adds	r7, #16
   14580:	46bd      	mov	sp, r7
   14582:	bd80      	pop	{r7, pc}
   14584:	10005218 	.word	0x10005218

00014588 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   14588:	b580      	push	{r7, lr}
   1458a:	b082      	sub	sp, #8
   1458c:	af00      	add	r7, sp, #0
   1458e:	6078      	str	r0, [r7, #4]
   14590:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   14592:	2206      	movs	r2, #6
   14594:	6839      	ldr	r1, [r7, #0]
   14596:	6878      	ldr	r0, [r7, #4]
   14598:	f7f7 fde2 	bl	c160 <memcpy>
}
   1459c:	bf00      	nop
   1459e:	3708      	adds	r7, #8
   145a0:	46bd      	mov	sp, r7
   145a2:	bd80      	pop	{r7, pc}

000145a4 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   145a4:	b580      	push	{r7, lr}
   145a6:	b082      	sub	sp, #8
   145a8:	af00      	add	r7, sp, #0
   145aa:	6078      	str	r0, [r7, #4]
   145ac:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   145ae:	2206      	movs	r2, #6
   145b0:	6839      	ldr	r1, [r7, #0]
   145b2:	6878      	ldr	r0, [r7, #4]
   145b4:	f7f7 fda4 	bl	c100 <memcmp>
   145b8:	4603      	mov	r3, r0
   145ba:	2b00      	cmp	r3, #0
   145bc:	bf0c      	ite	eq
   145be:	2301      	moveq	r3, #1
   145c0:	2300      	movne	r3, #0
   145c2:	b2db      	uxtb	r3, r3
}
   145c4:	4618      	mov	r0, r3
   145c6:	3708      	adds	r7, #8
   145c8:	46bd      	mov	sp, r7
   145ca:	bd80      	pop	{r7, pc}

000145cc <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   145cc:	b580      	push	{r7, lr}
   145ce:	b082      	sub	sp, #8
   145d0:	af00      	add	r7, sp, #0
   145d2:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   145d4:	2206      	movs	r2, #6
   145d6:	2100      	movs	r1, #0
   145d8:	6878      	ldr	r0, [r7, #4]
   145da:	f7f7 febf 	bl	c35c <memset>

  return (pDst + BDA_ADDR_LEN);
   145de:	687b      	ldr	r3, [r7, #4]
   145e0:	3306      	adds	r3, #6
}
   145e2:	4618      	mov	r0, r3
   145e4:	3708      	adds	r7, #8
   145e6:	46bd      	mov	sp, r7
   145e8:	bd80      	pop	{r7, pc}

000145ea <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   145ea:	b580      	push	{r7, lr}
   145ec:	b084      	sub	sp, #16
   145ee:	af00      	add	r7, sp, #0
   145f0:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   145f2:	f107 0308 	add.w	r3, r7, #8
   145f6:	2200      	movs	r2, #0
   145f8:	601a      	str	r2, [r3, #0]
   145fa:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   145fc:	f107 0308 	add.w	r3, r7, #8
   14600:	2206      	movs	r2, #6
   14602:	4619      	mov	r1, r3
   14604:	6878      	ldr	r0, [r7, #4]
   14606:	f7f7 fd7b 	bl	c100 <memcmp>
   1460a:	4603      	mov	r3, r0
   1460c:	2b00      	cmp	r3, #0
   1460e:	bf0c      	ite	eq
   14610:	2301      	moveq	r3, #1
   14612:	2300      	movne	r3, #0
   14614:	b2db      	uxtb	r3, r3
}
   14616:	4618      	mov	r0, r3
   14618:	3710      	adds	r7, #16
   1461a:	46bd      	mov	sp, r7
   1461c:	bd80      	pop	{r7, pc}

0001461e <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   1461e:	b580      	push	{r7, lr}
   14620:	b082      	sub	sp, #8
   14622:	af00      	add	r7, sp, #0
   14624:	6078      	str	r0, [r7, #4]
   14626:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   14628:	2210      	movs	r2, #16
   1462a:	6839      	ldr	r1, [r7, #0]
   1462c:	6878      	ldr	r0, [r7, #4]
   1462e:	f7f7 fd97 	bl	c160 <memcpy>
}
   14632:	bf00      	nop
   14634:	3708      	adds	r7, #8
   14636:	46bd      	mov	sp, r7
   14638:	bd80      	pop	{r7, pc}

0001463a <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   1463a:	b580      	push	{r7, lr}
   1463c:	b082      	sub	sp, #8
   1463e:	af00      	add	r7, sp, #0
   14640:	6078      	str	r0, [r7, #4]
   14642:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   14644:	2208      	movs	r2, #8
   14646:	6839      	ldr	r1, [r7, #0]
   14648:	6878      	ldr	r0, [r7, #4]
   1464a:	f7f7 fd89 	bl	c160 <memcpy>
}
   1464e:	bf00      	nop
   14650:	3708      	adds	r7, #8
   14652:	46bd      	mov	sp, r7
   14654:	bd80      	pop	{r7, pc}

00014656 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   14656:	b480      	push	{r7}
   14658:	b085      	sub	sp, #20
   1465a:	af00      	add	r7, sp, #0
   1465c:	6078      	str	r0, [r7, #4]
   1465e:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   14660:	2310      	movs	r3, #16
   14662:	73fb      	strb	r3, [r7, #15]
   14664:	e00d      	b.n	14682 <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
   14666:	683b      	ldr	r3, [r7, #0]
   14668:	1c5a      	adds	r2, r3, #1
   1466a:	603a      	str	r2, [r7, #0]
   1466c:	781a      	ldrb	r2, [r3, #0]
   1466e:	687b      	ldr	r3, [r7, #4]
   14670:	1c59      	adds	r1, r3, #1
   14672:	6079      	str	r1, [r7, #4]
   14674:	7819      	ldrb	r1, [r3, #0]
   14676:	404a      	eors	r2, r1
   14678:	b2d2      	uxtb	r2, r2
   1467a:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   1467c:	7bfb      	ldrb	r3, [r7, #15]
   1467e:	3b01      	subs	r3, #1
   14680:	73fb      	strb	r3, [r7, #15]
   14682:	7bfb      	ldrb	r3, [r7, #15]
   14684:	2b00      	cmp	r3, #0
   14686:	d1ee      	bne.n	14666 <Calc128Xor+0x10>
  }
}
   14688:	bf00      	nop
   1468a:	3714      	adds	r7, #20
   1468c:	46bd      	mov	sp, r7
   1468e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14692:	4770      	bx	lr

00014694 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   14694:	b480      	push	{r7}
   14696:	b087      	sub	sp, #28
   14698:	af00      	add	r7, sp, #0
   1469a:	60f8      	str	r0, [r7, #12]
   1469c:	60b9      	str	r1, [r7, #8]
   1469e:	4613      	mov	r3, r2
   146a0:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
   146a2:	2300      	movs	r3, #0
   146a4:	82fb      	strh	r3, [r7, #22]
   146a6:	e013      	b.n	146d0 <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
   146a8:	88fb      	ldrh	r3, [r7, #6]
   146aa:	1e5a      	subs	r2, r3, #1
   146ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   146b0:	1ad3      	subs	r3, r2, r3
   146b2:	461a      	mov	r2, r3
   146b4:	68fb      	ldr	r3, [r7, #12]
   146b6:	4413      	add	r3, r2
   146b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   146bc:	68b9      	ldr	r1, [r7, #8]
   146be:	440a      	add	r2, r1
   146c0:	7812      	ldrb	r2, [r2, #0]
   146c2:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   146c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   146c8:	b29b      	uxth	r3, r3
   146ca:	3301      	adds	r3, #1
   146cc:	b29b      	uxth	r3, r3
   146ce:	82fb      	strh	r3, [r7, #22]
   146d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   146d4:	88fb      	ldrh	r3, [r7, #6]
   146d6:	429a      	cmp	r2, r3
   146d8:	dbe6      	blt.n	146a8 <WStrReverseCpy+0x14>
  }
}
   146da:	bf00      	nop
   146dc:	371c      	adds	r7, #28
   146de:	46bd      	mov	sp, r7
   146e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   146e4:	4770      	bx	lr

000146e6 <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   146e6:	b480      	push	{r7}
   146e8:	b085      	sub	sp, #20
   146ea:	af00      	add	r7, sp, #0
   146ec:	6078      	str	r0, [r7, #4]
   146ee:	460b      	mov	r3, r1
   146f0:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   146f2:	2300      	movs	r3, #0
   146f4:	73fb      	strb	r3, [r7, #15]
   146f6:	e01a      	b.n	1472e <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
   146f8:	78fa      	ldrb	r2, [r7, #3]
   146fa:	7bfb      	ldrb	r3, [r7, #15]
   146fc:	1ad3      	subs	r3, r2, r3
   146fe:	3b01      	subs	r3, #1
   14700:	687a      	ldr	r2, [r7, #4]
   14702:	4413      	add	r3, r2
   14704:	781b      	ldrb	r3, [r3, #0]
   14706:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
   14708:	78fa      	ldrb	r2, [r7, #3]
   1470a:	7bfb      	ldrb	r3, [r7, #15]
   1470c:	1ad3      	subs	r3, r2, r3
   1470e:	3b01      	subs	r3, #1
   14710:	687a      	ldr	r2, [r7, #4]
   14712:	4413      	add	r3, r2
   14714:	7bfa      	ldrb	r2, [r7, #15]
   14716:	6879      	ldr	r1, [r7, #4]
   14718:	440a      	add	r2, r1
   1471a:	7812      	ldrb	r2, [r2, #0]
   1471c:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   1471e:	7bfb      	ldrb	r3, [r7, #15]
   14720:	687a      	ldr	r2, [r7, #4]
   14722:	4413      	add	r3, r2
   14724:	7bba      	ldrb	r2, [r7, #14]
   14726:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   14728:	7bfb      	ldrb	r3, [r7, #15]
   1472a:	3301      	adds	r3, #1
   1472c:	73fb      	strb	r3, [r7, #15]
   1472e:	78fb      	ldrb	r3, [r7, #3]
   14730:	085b      	lsrs	r3, r3, #1
   14732:	b2db      	uxtb	r3, r3
   14734:	7bfa      	ldrb	r2, [r7, #15]
   14736:	429a      	cmp	r2, r3
   14738:	d3de      	bcc.n	146f8 <WStrReverse+0x12>
  }
}
   1473a:	bf00      	nop
   1473c:	3714      	adds	r7, #20
   1473e:	46bd      	mov	sp, r7
   14740:	f85d 7b04 	ldr.w	r7, [sp], #4
   14744:	4770      	bx	lr
	...

00014748 <GapDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GapDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   14748:	b580      	push	{r7, lr}
   1474a:	b084      	sub	sp, #16
   1474c:	af02      	add	r7, sp, #8
   1474e:	4603      	mov	r3, r0
   14750:	6039      	str	r1, [r7, #0]
   14752:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGapSvcUuid,
   14754:	79f8      	ldrb	r0, [r7, #7]
   14756:	683b      	ldr	r3, [r7, #0]
   14758:	9301      	str	r3, [sp, #4]
   1475a:	4b05      	ldr	r3, [pc, #20]	; (14770 <GapDiscover+0x28>)
   1475c:	9300      	str	r3, [sp, #0]
   1475e:	2302      	movs	r3, #2
   14760:	4a04      	ldr	r2, [pc, #16]	; (14774 <GapDiscover+0x2c>)
   14762:	2102      	movs	r1, #2
   14764:	f007 fa8a 	bl	1bc7c <AppDiscFindService>
                     GAP_HDL_LIST_LEN, (attcDiscChar_t **) gapDiscCharList, pHdlList);
}
   14768:	bf00      	nop
   1476a:	3708      	adds	r7, #8
   1476c:	46bd      	mov	sp, r7
   1476e:	bd80      	pop	{r7, pc}
   14770:	10002b8c 	.word	0x10002b8c
   14774:	00021e7e 	.word	0x00021e7e

00014778 <GapValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GapValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   14778:	b580      	push	{r7, lr}
   1477a:	b084      	sub	sp, #16
   1477c:	af00      	add	r7, sp, #0
   1477e:	6078      	str	r0, [r7, #4]
   14780:	6039      	str	r1, [r7, #0]
  uint8_t status = ATT_SUCCESS;
   14782:	2300      	movs	r3, #0
   14784:	73fb      	strb	r3, [r7, #15]
  
  /* service changed */
  if (pMsg->handle == pHdlList[GAP_CAR_HDL_IDX])
   14786:	683b      	ldr	r3, [r7, #0]
   14788:	895a      	ldrh	r2, [r3, #10]
   1478a:	687b      	ldr	r3, [r7, #4]
   1478c:	881b      	ldrh	r3, [r3, #0]
   1478e:	429a      	cmp	r2, r3
   14790:	d125      	bne.n	147de <GapValueUpdate+0x66>
  {
    appDbHdl_t dbHdl;

    /* if there's a device record */
    if ((dbHdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE)
   14792:	683b      	ldr	r3, [r7, #0]
   14794:	881b      	ldrh	r3, [r3, #0]
   14796:	b2db      	uxtb	r3, r3
   14798:	4618      	mov	r0, r3
   1479a:	f007 fceb 	bl	1c174 <AppDbGetHdl>
   1479e:	60b8      	str	r0, [r7, #8]
   147a0:	68bb      	ldr	r3, [r7, #8]
   147a2:	2b00      	cmp	r3, #0
   147a4:	d01d      	beq.n	147e2 <GapValueUpdate+0x6a>
    {
      if ((pMsg->pValue[0] == FALSE) || (pMsg->pValue[0] == TRUE))
   147a6:	683b      	ldr	r3, [r7, #0]
   147a8:	685b      	ldr	r3, [r3, #4]
   147aa:	781b      	ldrb	r3, [r3, #0]
   147ac:	2b00      	cmp	r3, #0
   147ae:	d004      	beq.n	147ba <GapValueUpdate+0x42>
   147b0:	683b      	ldr	r3, [r7, #0]
   147b2:	685b      	ldr	r3, [r3, #4]
   147b4:	781b      	ldrb	r3, [r3, #0]
   147b6:	2b01      	cmp	r3, #1
   147b8:	d107      	bne.n	147ca <GapValueUpdate+0x52>
      {
        /* store value in device database */
        AppDbSetPeerAddrRes(dbHdl, pMsg->pValue[0]);
   147ba:	683b      	ldr	r3, [r7, #0]
   147bc:	685b      	ldr	r3, [r3, #4]
   147be:	781b      	ldrb	r3, [r3, #0]
   147c0:	4619      	mov	r1, r3
   147c2:	68b8      	ldr	r0, [r7, #8]
   147c4:	f7ff f8d3 	bl	1396e <AppDbSetPeerAddrRes>
   147c8:	e001      	b.n	147ce <GapValueUpdate+0x56>
      }
      else
      {
        /* invalid value */
        status = ATT_ERR_RANGE;
   147ca:	23ff      	movs	r3, #255	; 0xff
   147cc:	73fb      	strb	r3, [r7, #15]
      }

      APP_TRACE_INFO1("Central address resolution: %d", pMsg->pValue[0]);
   147ce:	683b      	ldr	r3, [r7, #0]
   147d0:	685b      	ldr	r3, [r3, #4]
   147d2:	781b      	ldrb	r3, [r3, #0]
   147d4:	4619      	mov	r1, r3
   147d6:	4805      	ldr	r0, [pc, #20]	; (147ec <GapValueUpdate+0x74>)
   147d8:	f005 f990 	bl	19afc <WsfTrace>
   147dc:	e001      	b.n	147e2 <GapValueUpdate+0x6a>
    }
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   147de:	230a      	movs	r3, #10
   147e0:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
   147e2:	7bfb      	ldrb	r3, [r7, #15]
}
   147e4:	4618      	mov	r0, r3
   147e6:	3710      	adds	r7, #16
   147e8:	46bd      	mov	sp, r7
   147ea:	bd80      	pop	{r7, pc}
   147ec:	00021954 	.word	0x00021954

000147f0 <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   147f0:	b580      	push	{r7, lr}
   147f2:	b084      	sub	sp, #16
   147f4:	af02      	add	r7, sp, #8
   147f6:	4603      	mov	r3, r0
   147f8:	6039      	str	r1, [r7, #0]
   147fa:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   147fc:	79f8      	ldrb	r0, [r7, #7]
   147fe:	683b      	ldr	r3, [r7, #0]
   14800:	9301      	str	r3, [sp, #4]
   14802:	4b05      	ldr	r3, [pc, #20]	; (14818 <GattDiscover+0x28>)
   14804:	9300      	str	r3, [sp, #0]
   14806:	2302      	movs	r3, #2
   14808:	4a04      	ldr	r2, [pc, #16]	; (1481c <GattDiscover+0x2c>)
   1480a:	2102      	movs	r1, #2
   1480c:	f007 fa36 	bl	1bc7c <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   14810:	bf00      	nop
   14812:	3708      	adds	r7, #8
   14814:	46bd      	mov	sp, r7
   14816:	bd80      	pop	{r7, pc}
   14818:	10002b94 	.word	0x10002b94
   1481c:	00021e7c 	.word	0x00021e7c

00014820 <GattValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GattValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   14820:	b580      	push	{r7, lr}
   14822:	b084      	sub	sp, #16
   14824:	af00      	add	r7, sp, #0
   14826:	6078      	str	r0, [r7, #4]
   14828:	6039      	str	r1, [r7, #0]
  uint8_t status = ATT_SUCCESS;
   1482a:	2300      	movs	r3, #0
   1482c:	73fb      	strb	r3, [r7, #15]
  
  /* service changed */
  if (pMsg->handle == pHdlList[GATT_SC_HDL_IDX])
   1482e:	683b      	ldr	r3, [r7, #0]
   14830:	895a      	ldrh	r2, [r3, #10]
   14832:	687b      	ldr	r3, [r7, #4]
   14834:	881b      	ldrh	r3, [r3, #0]
   14836:	429a      	cmp	r2, r3
   14838:	d103      	bne.n	14842 <GattValueUpdate+0x22>
  {
    /* perform service changed */
    AppDiscServiceChanged(pMsg);
   1483a:	6838      	ldr	r0, [r7, #0]
   1483c:	f007 fab8 	bl	1bdb0 <AppDiscServiceChanged>
   14840:	e001      	b.n	14846 <GattValueUpdate+0x26>
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   14842:	230a      	movs	r3, #10
   14844:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
   14846:	7bfb      	ldrb	r3, [r7, #15]
}
   14848:	4618      	mov	r0, r3
   1484a:	3710      	adds	r7, #16
   1484c:	46bd      	mov	sp, r7
   1484e:	bd80      	pop	{r7, pc}

00014850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   14850:	b480      	push	{r7}
   14852:	b083      	sub	sp, #12
   14854:	af00      	add	r7, sp, #0
   14856:	4603      	mov	r3, r0
   14858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1485e:	2b00      	cmp	r3, #0
   14860:	db0b      	blt.n	1487a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14862:	4909      	ldr	r1, [pc, #36]	; (14888 <__NVIC_EnableIRQ+0x38>)
   14864:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14868:	095b      	lsrs	r3, r3, #5
   1486a:	79fa      	ldrb	r2, [r7, #7]
   1486c:	f002 021f 	and.w	r2, r2, #31
   14870:	2001      	movs	r0, #1
   14872:	fa00 f202 	lsl.w	r2, r0, r2
   14876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   1487a:	bf00      	nop
   1487c:	370c      	adds	r7, #12
   1487e:	46bd      	mov	sp, r7
   14880:	f85d 7b04 	ldr.w	r7, [sp], #4
   14884:	4770      	bx	lr
   14886:	bf00      	nop
   14888:	e000e100 	.word	0xe000e100

0001488c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
   1488c:	b480      	push	{r7}
   1488e:	b083      	sub	sp, #12
   14890:	af00      	add	r7, sp, #0
   14892:	4603      	mov	r3, r0
   14894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   14896:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1489a:	2b00      	cmp	r3, #0
   1489c:	db10      	blt.n	148c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1489e:	490b      	ldr	r1, [pc, #44]	; (148cc <__NVIC_DisableIRQ+0x40>)
   148a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   148a4:	095b      	lsrs	r3, r3, #5
   148a6:	79fa      	ldrb	r2, [r7, #7]
   148a8:	f002 021f 	and.w	r2, r2, #31
   148ac:	2001      	movs	r0, #1
   148ae:	fa00 f202 	lsl.w	r2, r0, r2
   148b2:	3320      	adds	r3, #32
   148b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   148b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   148bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   148c0:	bf00      	nop
   148c2:	370c      	adds	r7, #12
   148c4:	46bd      	mov	sp, r7
   148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   148ca:	4770      	bx	lr
   148cc:	e000e100 	.word	0xe000e100

000148d0 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   148d0:	b580      	push	{r7, lr}
   148d2:	b082      	sub	sp, #8
   148d4:	af00      	add	r7, sp, #0
   148d6:	6078      	str	r0, [r7, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   148d8:	687b      	ldr	r3, [r7, #4]
   148da:	2b00      	cmp	r3, #0
   148dc:	d00c      	beq.n	148f8 <error_check+0x28>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   148de:	4a08      	ldr	r2, [pc, #32]	; (14900 <error_check+0x30>)
   148e0:	687b      	ldr	r3, [r7, #4]
   148e2:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   148e4:	4b07      	ldr	r3, [pc, #28]	; (14904 <error_check+0x34>)
   148e6:	681b      	ldr	r3, [r3, #0]
   148e8:	2b00      	cmp	r3, #0
   148ea:	d005      	beq.n	148f8 <error_check+0x28>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   148ec:	4b05      	ldr	r3, [pc, #20]	; (14904 <error_check+0x34>)
   148ee:	681b      	ldr	r3, [r3, #0]
   148f0:	4a03      	ldr	r2, [pc, #12]	; (14900 <error_check+0x30>)
   148f2:	6812      	ldr	r2, [r2, #0]
   148f4:	4610      	mov	r0, r2
   148f6:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   148f8:	bf00      	nop
   148fa:	3708      	adds	r7, #8
   148fc:	46bd      	mov	sp, r7
   148fe:	bd80      	pop	{r7, pc}
   14900:	100043c4 	.word	0x100043c4
   14904:	100043c0 	.word	0x100043c0

00014908 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   14908:	b5b0      	push	{r4, r5, r7, lr}
   1490a:	b092      	sub	sp, #72	; 0x48
   1490c:	af00      	add	r7, sp, #0
   1490e:	4603      	mov	r3, r0
   14910:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32NumXtalRetries = 0;
   14912:	2300      	movs	r3, #0
   14914:	647b      	str	r3, [r7, #68]	; 0x44


    g_ui32NumBytes     = 0;
   14916:	4b6c      	ldr	r3, [pc, #432]	; (14ac8 <HciDrvRadioBoot+0x1c0>)
   14918:	2200      	movs	r2, #0
   1491a:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   1491c:	4b6b      	ldr	r3, [pc, #428]	; (14acc <HciDrvRadioBoot+0x1c4>)
   1491e:	2200      	movs	r2, #0
   14920:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   14922:	2301      	movs	r3, #1
   14924:	643b      	str	r3, [r7, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   14926:	e0a1      	b.n	14a6c <HciDrvRadioBoot+0x164>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   14928:	4969      	ldr	r1, [pc, #420]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   1492a:	2000      	movs	r0, #0
   1492c:	f009 fbb4 	bl	1e098 <am_hal_ble_initialize>
   14930:	63f8      	str	r0, [r7, #60]	; 0x3c
   14932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14934:	2b00      	cmp	r3, #0
   14936:	d006      	beq.n	14946 <HciDrvRadioBoot+0x3e>
   14938:	4866      	ldr	r0, [pc, #408]	; (14ad4 <HciDrvRadioBoot+0x1cc>)
   1493a:	f006 fe01 	bl	1b540 <am_util_stdio_printf>
   1493e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14940:	f7ff ffc6 	bl	148d0 <error_check>
   14944:	e0bd      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   14946:	4b62      	ldr	r3, [pc, #392]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   14948:	681b      	ldr	r3, [r3, #0]
   1494a:	2100      	movs	r1, #0
   1494c:	4618      	mov	r0, r3
   1494e:	f009 fc93 	bl	1e278 <am_hal_ble_power_control>
   14952:	63b8      	str	r0, [r7, #56]	; 0x38
   14954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14956:	2b00      	cmp	r3, #0
   14958:	d006      	beq.n	14968 <HciDrvRadioBoot+0x60>
   1495a:	485f      	ldr	r0, [pc, #380]	; (14ad8 <HciDrvRadioBoot+0x1d0>)
   1495c:	f006 fdf0 	bl	1b540 <am_util_stdio_printf>
   14960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   14962:	f7ff ffb5 	bl	148d0 <error_check>
   14966:	e0ac      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>

        am_hal_ble_config_t sBleConfig =
   14968:	4b5c      	ldr	r3, [pc, #368]	; (14adc <HciDrvRadioBoot+0x1d4>)
   1496a:	f107 0408 	add.w	r4, r7, #8
   1496e:	461d      	mov	r5, r3
   14970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14974:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   14978:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   1497c:	4b54      	ldr	r3, [pc, #336]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   1497e:	681b      	ldr	r3, [r3, #0]
   14980:	f107 0208 	add.w	r2, r7, #8
   14984:	4611      	mov	r1, r2
   14986:	4618      	mov	r0, r3
   14988:	f009 fbee 	bl	1e168 <am_hal_ble_config>
   1498c:	6378      	str	r0, [r7, #52]	; 0x34
   1498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14990:	2b00      	cmp	r3, #0
   14992:	d006      	beq.n	149a2 <HciDrvRadioBoot+0x9a>
   14994:	4852      	ldr	r0, [pc, #328]	; (14ae0 <HciDrvRadioBoot+0x1d8>)
   14996:	f006 fdd3 	bl	1b540 <am_util_stdio_printf>
   1499a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1499c:	f7ff ff98 	bl	148d0 <error_check>
   149a0:	e08f      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   149a2:	79fb      	ldrb	r3, [r7, #7]
   149a4:	2b00      	cmp	r3, #0
   149a6:	d003      	beq.n	149b0 <HciDrvRadioBoot+0xa8>
        {
            am_util_delay_ms(1000);
   149a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   149ac:	f005 fe7a 	bl	1a6a4 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   149b0:	4b47      	ldr	r3, [pc, #284]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   149b2:	681b      	ldr	r3, [r3, #0]
   149b4:	4618      	mov	r0, r3
   149b6:	f00a fb55 	bl	1f064 <am_hal_ble_boot>
   149ba:	6438      	str	r0, [r7, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   149bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   149be:	2b00      	cmp	r3, #0
   149c0:	d059      	beq.n	14a76 <HciDrvRadioBoot+0x16e>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   149c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   149c4:	4a47      	ldr	r2, [pc, #284]	; (14ae4 <HciDrvRadioBoot+0x1dc>)
   149c6:	4293      	cmp	r3, r2
   149c8:	d12a      	bne.n	14a20 <HciDrvRadioBoot+0x118>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   149ca:	4b41      	ldr	r3, [pc, #260]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   149cc:	681b      	ldr	r3, [r3, #0]
   149ce:	2101      	movs	r1, #1
   149d0:	4618      	mov	r0, r3
   149d2:	f009 fc51 	bl	1e278 <am_hal_ble_power_control>
   149d6:	6338      	str	r0, [r7, #48]	; 0x30
   149d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   149da:	2b00      	cmp	r3, #0
   149dc:	d006      	beq.n	149ec <HciDrvRadioBoot+0xe4>
   149de:	4842      	ldr	r0, [pc, #264]	; (14ae8 <HciDrvRadioBoot+0x1e0>)
   149e0:	f006 fdae 	bl	1b540 <am_util_stdio_printf>
   149e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   149e6:	f7ff ff73 	bl	148d0 <error_check>
   149ea:	e06a      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   149ec:	4b38      	ldr	r3, [pc, #224]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   149ee:	681b      	ldr	r3, [r3, #0]
   149f0:	4618      	mov	r0, r3
   149f2:	f009 fb8d 	bl	1e110 <am_hal_ble_deinitialize>
   149f6:	62f8      	str	r0, [r7, #44]	; 0x2c
   149f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   149fa:	2b00      	cmp	r3, #0
   149fc:	d006      	beq.n	14a0c <HciDrvRadioBoot+0x104>
   149fe:	483b      	ldr	r0, [pc, #236]	; (14aec <HciDrvRadioBoot+0x1e4>)
   14a00:	f006 fd9e 	bl	1b540 <am_util_stdio_printf>
   14a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14a06:	f7ff ff63 	bl	148d0 <error_check>
   14a0a:	e05a      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   14a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14a0e:	1c5a      	adds	r2, r3, #1
   14a10:	647a      	str	r2, [r7, #68]	; 0x44
   14a12:	2b09      	cmp	r3, #9
   14a14:	d854      	bhi.n	14ac0 <HciDrvRadioBoot+0x1b8>
            {
                am_util_delay_ms(1000);
   14a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14a1a:	f005 fe43 	bl	1a6a4 <am_util_delay_ms>
   14a1e:	e025      	b.n	14a6c <HciDrvRadioBoot+0x164>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   14a20:	4b2b      	ldr	r3, [pc, #172]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   14a22:	681b      	ldr	r3, [r3, #0]
   14a24:	2101      	movs	r1, #1
   14a26:	4618      	mov	r0, r3
   14a28:	f009 fc26 	bl	1e278 <am_hal_ble_power_control>
   14a2c:	62b8      	str	r0, [r7, #40]	; 0x28
   14a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14a30:	2b00      	cmp	r3, #0
   14a32:	d006      	beq.n	14a42 <HciDrvRadioBoot+0x13a>
   14a34:	482c      	ldr	r0, [pc, #176]	; (14ae8 <HciDrvRadioBoot+0x1e0>)
   14a36:	f006 fd83 	bl	1b540 <am_util_stdio_printf>
   14a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14a3c:	f7ff ff48 	bl	148d0 <error_check>
   14a40:	e03f      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   14a42:	4b23      	ldr	r3, [pc, #140]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   14a44:	681b      	ldr	r3, [r3, #0]
   14a46:	4618      	mov	r0, r3
   14a48:	f009 fb62 	bl	1e110 <am_hal_ble_deinitialize>
   14a4c:	6278      	str	r0, [r7, #36]	; 0x24
   14a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14a50:	2b00      	cmp	r3, #0
   14a52:	d006      	beq.n	14a62 <HciDrvRadioBoot+0x15a>
   14a54:	4825      	ldr	r0, [pc, #148]	; (14aec <HciDrvRadioBoot+0x1e4>)
   14a56:	f006 fd73 	bl	1b540 <am_util_stdio_printf>
   14a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14a5c:	f7ff ff38 	bl	148d0 <error_check>
   14a60:	e02f      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   14a62:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14a64:	f7ff ff34 	bl	148d0 <error_check>
            return;
   14a68:	bf00      	nop
   14a6a:	e02a      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   14a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14a6e:	2b00      	cmp	r3, #0
   14a70:	f47f af5a 	bne.w	14928 <HciDrvRadioBoot+0x20>
   14a74:	e000      	b.n	14a78 <HciDrvRadioBoot+0x170>
            break;
   14a76:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   14a78:	4b15      	ldr	r3, [pc, #84]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   14a7a:	681b      	ldr	r3, [r3, #0]
   14a7c:	2108      	movs	r1, #8
   14a7e:	4618      	mov	r0, r3
   14a80:	f00a fbc4 	bl	1f20c <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   14a84:	4b12      	ldr	r3, [pc, #72]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   14a86:	681b      	ldr	r3, [r3, #0]
   14a88:	f240 2181 	movw	r1, #641	; 0x281
   14a8c:	4618      	mov	r0, r3
   14a8e:	f009 ffcd 	bl	1ea2c <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   14a92:	4b0f      	ldr	r3, [pc, #60]	; (14ad0 <HciDrvRadioBoot+0x1c8>)
   14a94:	681b      	ldr	r3, [r3, #0]
   14a96:	f240 2181 	movw	r1, #641	; 0x281
   14a9a:	4618      	mov	r0, r3
   14a9c:	f009 ff98 	bl	1e9d0 <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   14aa0:	200c      	movs	r0, #12
   14aa2:	f7ff fed5 	bl	14850 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   14aa6:	f44f 6302 	mov.w	r3, #2080	; 0x820
   14aaa:	f44f 7282 	mov.w	r2, #260	; 0x104
   14aae:	4910      	ldr	r1, [pc, #64]	; (14af0 <HciDrvRadioBoot+0x1e8>)
   14ab0:	4810      	ldr	r0, [pc, #64]	; (14af4 <HciDrvRadioBoot+0x1ec>)
   14ab2:	f00b fc41 	bl	20338 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   14ab6:	4b10      	ldr	r3, [pc, #64]	; (14af8 <HciDrvRadioBoot+0x1f0>)
   14ab8:	2200      	movs	r2, #0
   14aba:	601a      	str	r2, [r3, #0]

    return;
   14abc:	bf00      	nop
   14abe:	e000      	b.n	14ac2 <HciDrvRadioBoot+0x1ba>
                return;
   14ac0:	bf00      	nop
}
   14ac2:	3748      	adds	r7, #72	; 0x48
   14ac4:	46bd      	mov	sp, r7
   14ac6:	bdb0      	pop	{r4, r5, r7, pc}
   14ac8:	100043b4 	.word	0x100043b4
   14acc:	100043b8 	.word	0x100043b8
   14ad0:	10005b98 	.word	0x10005b98
   14ad4:	00021974 	.word	0x00021974
   14ad8:	000219a8 	.word	0x000219a8
   14adc:	00021aa4 	.word	0x00021aa4
   14ae0:	000219f4 	.word	0x000219f4
   14ae4:	0800000b 	.word	0x0800000b
   14ae8:	00021a2c 	.word	0x00021a2c
   14aec:	00021a74 	.word	0x00021a74
   14af0:	10005378 	.word	0x10005378
   14af4:	10005250 	.word	0x10005250
   14af8:	100043bc 	.word	0x100043bc

00014afc <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   14afc:	b580      	push	{r7, lr}
   14afe:	b082      	sub	sp, #8
   14b00:	af00      	add	r7, sp, #0
    BLE_HEARTBEAT_STOP();
   14b02:	481c      	ldr	r0, [pc, #112]	; (14b74 <HciDrvRadioShutdown+0x78>)
   14b04:	f000 fd7c 	bl	15600 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   14b08:	200c      	movs	r0, #12
   14b0a:	f7ff febf 	bl	1488c <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   14b0e:	4b1a      	ldr	r3, [pc, #104]	; (14b78 <HciDrvRadioShutdown+0x7c>)
   14b10:	681b      	ldr	r3, [r3, #0]
   14b12:	2101      	movs	r1, #1
   14b14:	4618      	mov	r0, r3
   14b16:	f009 fbaf 	bl	1e278 <am_hal_ble_power_control>
   14b1a:	6078      	str	r0, [r7, #4]
   14b1c:	687b      	ldr	r3, [r7, #4]
   14b1e:	2b00      	cmp	r3, #0
   14b20:	d006      	beq.n	14b30 <HciDrvRadioShutdown+0x34>
   14b22:	4816      	ldr	r0, [pc, #88]	; (14b7c <HciDrvRadioShutdown+0x80>)
   14b24:	f006 fd0c 	bl	1b540 <am_util_stdio_printf>
   14b28:	6878      	ldr	r0, [r7, #4]
   14b2a:	f7ff fed1 	bl	148d0 <error_check>
   14b2e:	e01d      	b.n	14b6c <HciDrvRadioShutdown+0x70>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   14b30:	bf00      	nop
   14b32:	4b13      	ldr	r3, [pc, #76]	; (14b80 <HciDrvRadioShutdown+0x84>)
   14b34:	689b      	ldr	r3, [r3, #8]
   14b36:	f3c3 3340 	ubfx	r3, r3, #13, #1
   14b3a:	b2db      	uxtb	r3, r3
   14b3c:	2b00      	cmp	r3, #0
   14b3e:	d1f8      	bne.n	14b32 <HciDrvRadioShutdown+0x36>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   14b40:	4b0d      	ldr	r3, [pc, #52]	; (14b78 <HciDrvRadioShutdown+0x7c>)
   14b42:	681b      	ldr	r3, [r3, #0]
   14b44:	4618      	mov	r0, r3
   14b46:	f009 fae3 	bl	1e110 <am_hal_ble_deinitialize>
   14b4a:	6038      	str	r0, [r7, #0]
   14b4c:	683b      	ldr	r3, [r7, #0]
   14b4e:	2b00      	cmp	r3, #0
   14b50:	d006      	beq.n	14b60 <HciDrvRadioShutdown+0x64>
   14b52:	480c      	ldr	r0, [pc, #48]	; (14b84 <HciDrvRadioShutdown+0x88>)
   14b54:	f006 fcf4 	bl	1b540 <am_util_stdio_printf>
   14b58:	6838      	ldr	r0, [r7, #0]
   14b5a:	f7ff feb9 	bl	148d0 <error_check>
   14b5e:	e005      	b.n	14b6c <HciDrvRadioShutdown+0x70>

    g_ui32NumBytes   = 0;
   14b60:	4b09      	ldr	r3, [pc, #36]	; (14b88 <HciDrvRadioShutdown+0x8c>)
   14b62:	2200      	movs	r2, #0
   14b64:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   14b66:	4b09      	ldr	r3, [pc, #36]	; (14b8c <HciDrvRadioShutdown+0x90>)
   14b68:	2200      	movs	r2, #0
   14b6a:	601a      	str	r2, [r3, #0]
}
   14b6c:	3708      	adds	r7, #8
   14b6e:	46bd      	mov	sp, r7
   14b70:	bd80      	pop	{r7, pc}
   14b72:	bf00      	nop
   14b74:	10005268 	.word	0x10005268
   14b78:	10005b98 	.word	0x10005b98
   14b7c:	00021a2c 	.word	0x00021a2c
   14b80:	40021000 	.word	0x40021000
   14b84:	00021a74 	.word	0x00021a74
   14b88:	100043b4 	.word	0x100043b4
   14b8c:	100043b8 	.word	0x100043b8

00014b90 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   14b90:	b580      	push	{r7, lr}
   14b92:	b094      	sub	sp, #80	; 0x50
   14b94:	af00      	add	r7, sp, #0
   14b96:	4603      	mov	r3, r0
   14b98:	603a      	str	r2, [r7, #0]
   14b9a:	71fb      	strb	r3, [r7, #7]
   14b9c:	460b      	mov	r3, r1
   14b9e:	80bb      	strh	r3, [r7, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   14ba0:	4b3b      	ldr	r3, [pc, #236]	; (14c90 <hciDrvWrite+0x100>)
   14ba2:	689a      	ldr	r2, [r3, #8]
   14ba4:	4b3a      	ldr	r3, [pc, #232]	; (14c90 <hciDrvWrite+0x100>)
   14ba6:	68db      	ldr	r3, [r3, #12]
   14ba8:	429a      	cmp	r2, r3
   14baa:	d105      	bne.n	14bb8 <hciDrvWrite+0x28>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   14bac:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   14bb0:	f7ff fe8e 	bl	148d0 <error_check>
   14bb4:	88bb      	ldrh	r3, [r7, #4]
   14bb6:	e067      	b.n	14c88 <hciDrvWrite+0xf8>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   14bb8:	88bb      	ldrh	r3, [r7, #4]
   14bba:	2bff      	cmp	r3, #255	; 0xff
   14bbc:	d904      	bls.n	14bc8 <hciDrvWrite+0x38>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   14bbe:	4835      	ldr	r0, [pc, #212]	; (14c94 <hciDrvWrite+0x104>)
   14bc0:	f7ff fe86 	bl	148d0 <error_check>
   14bc4:	88bb      	ldrh	r3, [r7, #4]
   14bc6:	e05f      	b.n	14c88 <hciDrvWrite+0xf8>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   14bc8:	4b31      	ldr	r3, [pc, #196]	; (14c90 <hciDrvWrite+0x100>)
   14bca:	695a      	ldr	r2, [r3, #20]
   14bcc:	4b30      	ldr	r3, [pc, #192]	; (14c90 <hciDrvWrite+0x100>)
   14bce:	681b      	ldr	r3, [r3, #0]
   14bd0:	4413      	add	r3, r2
   14bd2:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   14bd4:	88bb      	ldrh	r3, [r7, #4]
   14bd6:	3301      	adds	r3, #1
   14bd8:	461a      	mov	r2, r3
   14bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14bdc:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   14bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14be0:	3304      	adds	r3, #4
   14be2:	647b      	str	r3, [r7, #68]	; 0x44

    *pui8Wptr++ = type;
   14be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14be6:	1c5a      	adds	r2, r3, #1
   14be8:	647a      	str	r2, [r7, #68]	; 0x44
   14bea:	79fa      	ldrb	r2, [r7, #7]
   14bec:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   14bee:	2300      	movs	r3, #0
   14bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   14bf2:	e00a      	b.n	14c0a <hciDrvWrite+0x7a>
    {
        pui8Wptr[i] = pData[i];
   14bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14bf8:	4413      	add	r3, r2
   14bfa:	6839      	ldr	r1, [r7, #0]
   14bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   14bfe:	440a      	add	r2, r1
   14c00:	7812      	ldrb	r2, [r2, #0]
   14c02:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   14c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c06:	3301      	adds	r3, #1
   14c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   14c0a:	88ba      	ldrh	r2, [r7, #4]
   14c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c0e:	429a      	cmp	r2, r3
   14c10:	d8f0      	bhi.n	14bf4 <hciDrvWrite+0x64>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   14c12:	2201      	movs	r2, #1
   14c14:	2100      	movs	r1, #0
   14c16:	481e      	ldr	r0, [pc, #120]	; (14c90 <hciDrvWrite+0x100>)
   14c18:	f00b fb9a 	bl	20350 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14c1c:	4b1e      	ldr	r3, [pc, #120]	; (14c98 <hciDrvWrite+0x108>)
   14c1e:	781b      	ldrb	r3, [r3, #0]
   14c20:	2101      	movs	r1, #1
   14c22:	4618      	mov	r0, r3
   14c24:	f004 fe5c 	bl	198e0 <WsfSetEvent>
#endif

#ifdef AM_CUSTOM_BDADDR
    if (type == HCI_CMD_TYPE)
   14c28:	79fb      	ldrb	r3, [r7, #7]
   14c2a:	2b01      	cmp	r3, #1
   14c2c:	d12b      	bne.n	14c86 <hciDrvWrite+0xf6>
    {
        uint16_t opcode;
        BYTES_TO_UINT16(opcode, pData);
   14c2e:	683b      	ldr	r3, [r7, #0]
   14c30:	781b      	ldrb	r3, [r3, #0]
   14c32:	b29a      	uxth	r2, r3
   14c34:	683b      	ldr	r3, [r7, #0]
   14c36:	3301      	adds	r3, #1
   14c38:	781b      	ldrb	r3, [r3, #0]
   14c3a:	b29b      	uxth	r3, r3
   14c3c:	021b      	lsls	r3, r3, #8
   14c3e:	b29b      	uxth	r3, r3
   14c40:	4413      	add	r3, r2
   14c42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if (HCI_OPCODE_RESET == opcode)
   14c46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   14c4a:	f640 4203 	movw	r2, #3075	; 0xc03
   14c4e:	4293      	cmp	r3, r2
   14c50:	d119      	bne.n	14c86 <hciDrvWrite+0xf6>
        {

            extern uint8_t g_BLEMacAddress[6];
            am_hal_mcuctrl_device_t sDevice;
            am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   14c52:	f107 030c 	add.w	r3, r7, #12
   14c56:	4619      	mov	r1, r3
   14c58:	2001      	movs	r0, #1
   14c5a:	f00b f9c7 	bl	1ffec <am_hal_mcuctrl_info_get>
            g_BLEMacAddress[0] = sDevice.ui32ChipID0;
   14c5e:	693b      	ldr	r3, [r7, #16]
   14c60:	b2da      	uxtb	r2, r3
   14c62:	4b0e      	ldr	r3, [pc, #56]	; (14c9c <hciDrvWrite+0x10c>)
   14c64:	701a      	strb	r2, [r3, #0]
            g_BLEMacAddress[1] = sDevice.ui32ChipID0 >> 8;
   14c66:	693b      	ldr	r3, [r7, #16]
   14c68:	0a1b      	lsrs	r3, r3, #8
   14c6a:	b2da      	uxtb	r2, r3
   14c6c:	4b0b      	ldr	r3, [pc, #44]	; (14c9c <hciDrvWrite+0x10c>)
   14c6e:	705a      	strb	r2, [r3, #1]
            g_BLEMacAddress[2] = sDevice.ui32ChipID0 >> 16;
   14c70:	693b      	ldr	r3, [r7, #16]
   14c72:	0c1b      	lsrs	r3, r3, #16
   14c74:	b2da      	uxtb	r2, r3
   14c76:	4b09      	ldr	r3, [pc, #36]	; (14c9c <hciDrvWrite+0x10c>)
   14c78:	709a      	strb	r2, [r3, #2]

            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   14c7a:	4a08      	ldr	r2, [pc, #32]	; (14c9c <hciDrvWrite+0x10c>)
   14c7c:	2106      	movs	r1, #6
   14c7e:	f64f 4032 	movw	r0, #64562	; 0xfc32
   14c82:	f001 fd12 	bl	166aa <HciVendorSpecificCmd>
        }
    }
#endif

    return len;
   14c86:	88bb      	ldrh	r3, [r7, #4]
}
   14c88:	4618      	mov	r0, r3
   14c8a:	3750      	adds	r7, #80	; 0x50
   14c8c:	46bd      	mov	sp, r7
   14c8e:	bd80      	pop	{r7, pc}
   14c90:	10005250 	.word	0x10005250
   14c94:	09000001 	.word	0x09000001
   14c98:	100043b0 	.word	0x100043b0
   14c9c:	10002ba4 	.word	0x10002ba4

00014ca0 <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   14ca0:	b480      	push	{r7}
   14ca2:	b083      	sub	sp, #12
   14ca4:	af00      	add	r7, sp, #0
   14ca6:	4603      	mov	r3, r0
   14ca8:	71fb      	strb	r3, [r7, #7]
    g_HciDrvHandleID = handlerId;
   14caa:	4a0a      	ldr	r2, [pc, #40]	; (14cd4 <HciDrvHandlerInit+0x34>)
   14cac:	79fb      	ldrb	r3, [r7, #7]
   14cae:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   14cb0:	4a09      	ldr	r2, [pc, #36]	; (14cd8 <HciDrvHandlerInit+0x38>)
   14cb2:	79fb      	ldrb	r3, [r7, #7]
   14cb4:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   14cb6:	4b08      	ldr	r3, [pc, #32]	; (14cd8 <HciDrvHandlerInit+0x38>)
   14cb8:	2202      	movs	r2, #2
   14cba:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   14cbc:	4a07      	ldr	r2, [pc, #28]	; (14cdc <HciDrvHandlerInit+0x3c>)
   14cbe:	79fb      	ldrb	r3, [r7, #7]
   14cc0:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   14cc2:	4b06      	ldr	r3, [pc, #24]	; (14cdc <HciDrvHandlerInit+0x3c>)
   14cc4:	2203      	movs	r2, #3
   14cc6:	731a      	strb	r2, [r3, #12]
}
   14cc8:	bf00      	nop
   14cca:	370c      	adds	r7, #12
   14ccc:	46bd      	mov	sp, r7
   14cce:	f85d 7b04 	ldr.w	r7, [sp], #4
   14cd2:	4770      	bx	lr
   14cd4:	100043b0 	.word	0x100043b0
   14cd8:	10005268 	.word	0x10005268
   14cdc:	10005b9c 	.word	0x10005b9c

00014ce0 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   14ce0:	b580      	push	{r7, lr}
   14ce2:	b082      	sub	sp, #8
   14ce4:	af00      	add	r7, sp, #0
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   14ce6:	4b0e      	ldr	r3, [pc, #56]	; (14d20 <HciDrvIntService+0x40>)
   14ce8:	681b      	ldr	r3, [r3, #0]
   14cea:	2101      	movs	r1, #1
   14cec:	4618      	mov	r0, r3
   14cee:	f009 fe8f 	bl	1ea10 <am_hal_ble_int_status>
   14cf2:	6078      	str	r0, [r7, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   14cf4:	4b0a      	ldr	r3, [pc, #40]	; (14d20 <HciDrvIntService+0x40>)
   14cf6:	681b      	ldr	r3, [r3, #0]
   14cf8:	6879      	ldr	r1, [r7, #4]
   14cfa:	4618      	mov	r0, r3
   14cfc:	f009 fe96 	bl	1ea2c <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   14d00:	4b08      	ldr	r3, [pc, #32]	; (14d24 <HciDrvIntService+0x44>)
   14d02:	681b      	ldr	r3, [r3, #0]
   14d04:	3301      	adds	r3, #1
   14d06:	4a07      	ldr	r2, [pc, #28]	; (14d24 <HciDrvIntService+0x44>)
   14d08:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14d0a:	4b07      	ldr	r3, [pc, #28]	; (14d28 <HciDrvIntService+0x48>)
   14d0c:	781b      	ldrb	r3, [r3, #0]
   14d0e:	2101      	movs	r1, #1
   14d10:	4618      	mov	r0, r3
   14d12:	f004 fde5 	bl	198e0 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   14d16:	bf00      	nop
   14d18:	3708      	adds	r7, #8
   14d1a:	46bd      	mov	sp, r7
   14d1c:	bd80      	pop	{r7, pc}
   14d1e:	bf00      	nop
   14d20:	10005b98 	.word	0x10005b98
   14d24:	100043bc 	.word	0x100043bc
   14d28:	100043b0 	.word	0x100043b0

00014d2c <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   14d2c:	b580      	push	{r7, lr}
   14d2e:	b08a      	sub	sp, #40	; 0x28
   14d30:	af00      	add	r7, sp, #0
   14d32:	4603      	mov	r3, r0
   14d34:	6039      	str	r1, [r7, #0]
   14d36:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   14d38:	2300      	movs	r3, #0
   14d3a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   14d3c:	2300      	movs	r3, #0
   14d3e:	623b      	str	r3, [r7, #32]
    uint32_t read_hci_packet_count = 0;
   14d40:	2300      	movs	r3, #0
   14d42:	61fb      	str	r3, [r7, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   14d44:	683b      	ldr	r3, [r7, #0]
   14d46:	789b      	ldrb	r3, [r3, #2]
   14d48:	2b02      	cmp	r3, #2
   14d4a:	d107      	bne.n	14d5c <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   14d4c:	f001 fa9a 	bl	16284 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   14d50:	f242 7110 	movw	r1, #10000	; 0x2710
   14d54:	4889      	ldr	r0, [pc, #548]	; (14f7c <HciDrvHandler+0x250>)
   14d56:	f000 fc3f 	bl	155d8 <WsfTimerStartMs>
        return;
   14d5a:	e10c      	b.n	14f76 <HciDrvHandler+0x24a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   14d5c:	4b88      	ldr	r3, [pc, #544]	; (14f80 <HciDrvHandler+0x254>)
   14d5e:	681a      	ldr	r2, [r3, #0]
   14d60:	4b88      	ldr	r3, [pc, #544]	; (14f84 <HciDrvHandler+0x258>)
   14d62:	681b      	ldr	r3, [r3, #0]
   14d64:	429a      	cmp	r2, r3
   14d66:	f240 80ea 	bls.w	14f3e <HciDrvHandler+0x212>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   14d6a:	4b87      	ldr	r3, [pc, #540]	; (14f88 <HciDrvHandler+0x25c>)
   14d6c:	681a      	ldr	r2, [r3, #0]
   14d6e:	4b85      	ldr	r3, [pc, #532]	; (14f84 <HciDrvHandler+0x258>)
   14d70:	681b      	ldr	r3, [r3, #0]
   14d72:	18d0      	adds	r0, r2, r3
   14d74:	4b82      	ldr	r3, [pc, #520]	; (14f80 <HciDrvHandler+0x254>)
   14d76:	681b      	ldr	r3, [r3, #0]
   14d78:	b29a      	uxth	r2, r3
   14d7a:	4b82      	ldr	r3, [pc, #520]	; (14f84 <HciDrvHandler+0x258>)
   14d7c:	681b      	ldr	r3, [r3, #0]
   14d7e:	b29b      	uxth	r3, r3
   14d80:	1ad3      	subs	r3, r2, r3
   14d82:	b29b      	uxth	r3, r3
   14d84:	4619      	mov	r1, r3
   14d86:	f004 f821 	bl	18dcc <hciTrSerialRxIncoming>
   14d8a:	4603      	mov	r3, r0
   14d8c:	461a      	mov	r2, r3
   14d8e:	4b7d      	ldr	r3, [pc, #500]	; (14f84 <HciDrvHandler+0x258>)
   14d90:	681b      	ldr	r3, [r3, #0]
   14d92:	4413      	add	r3, r2
   14d94:	4a7b      	ldr	r2, [pc, #492]	; (14f84 <HciDrvHandler+0x258>)
   14d96:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   14d98:	4b7a      	ldr	r3, [pc, #488]	; (14f84 <HciDrvHandler+0x258>)
   14d9a:	681a      	ldr	r2, [r3, #0]
   14d9c:	4b78      	ldr	r3, [pc, #480]	; (14f80 <HciDrvHandler+0x254>)
   14d9e:	681b      	ldr	r3, [r3, #0]
   14da0:	429a      	cmp	r2, r3
   14da2:	d006      	beq.n	14db2 <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14da4:	4b79      	ldr	r3, [pc, #484]	; (14f8c <HciDrvHandler+0x260>)
   14da6:	781b      	ldrb	r3, [r3, #0]
   14da8:	2101      	movs	r1, #1
   14daa:	4618      	mov	r0, r3
   14dac:	f004 fd98 	bl	198e0 <WsfSetEvent>
            return;
   14db0:	e0e1      	b.n	14f76 <HciDrvHandler+0x24a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   14db2:	4b73      	ldr	r3, [pc, #460]	; (14f80 <HciDrvHandler+0x254>)
   14db4:	2200      	movs	r2, #0
   14db6:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   14db8:	4b72      	ldr	r3, [pc, #456]	; (14f84 <HciDrvHandler+0x258>)
   14dba:	2200      	movs	r2, #0
   14dbc:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   14dbe:	e0be      	b.n	14f3e <HciDrvHandler+0x212>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   14dc0:	4b73      	ldr	r3, [pc, #460]	; (14f90 <HciDrvHandler+0x264>)
   14dc2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   14dc6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   14dca:	b2db      	uxtb	r3, r3
   14dcc:	2b00      	cmp	r3, #0
   14dce:	d07e      	beq.n	14ece <HciDrvHandler+0x1a2>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   14dd0:	4b70      	ldr	r3, [pc, #448]	; (14f94 <HciDrvHandler+0x268>)
   14dd2:	681b      	ldr	r3, [r3, #0]
   14dd4:	60fb      	str	r3, [r7, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   14dd6:	4869      	ldr	r0, [pc, #420]	; (14f7c <HciDrvHandler+0x250>)
   14dd8:	f000 fc12 	bl	15600 <WsfTimerStop>
   14ddc:	f242 7110 	movw	r1, #10000	; 0x2710
   14de0:	4866      	ldr	r0, [pc, #408]	; (14f7c <HciDrvHandler+0x250>)
   14de2:	f000 fbf9 	bl	155d8 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   14de6:	4b66      	ldr	r3, [pc, #408]	; (14f80 <HciDrvHandler+0x254>)
   14de8:	2200      	movs	r2, #0
   14dea:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   14dec:	4b6a      	ldr	r3, [pc, #424]	; (14f98 <HciDrvHandler+0x26c>)
   14dee:	681b      	ldr	r3, [r3, #0]
   14df0:	4a63      	ldr	r2, [pc, #396]	; (14f80 <HciDrvHandler+0x254>)
   14df2:	496a      	ldr	r1, [pc, #424]	; (14f9c <HciDrvHandler+0x270>)
   14df4:	4618      	mov	r0, r3
   14df6:	f009 fbc7 	bl	1e588 <am_hal_ble_blocking_hci_read>
   14dfa:	6138      	str	r0, [r7, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   14dfc:	4b60      	ldr	r3, [pc, #384]	; (14f80 <HciDrvHandler+0x254>)
   14dfe:	681b      	ldr	r3, [r3, #0]
   14e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   14e04:	d908      	bls.n	14e18 <HciDrvHandler+0xec>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   14e06:	4b66      	ldr	r3, [pc, #408]	; (14fa0 <HciDrvHandler+0x274>)
   14e08:	60bb      	str	r3, [r7, #8]
   14e0a:	4866      	ldr	r0, [pc, #408]	; (14fa4 <HciDrvHandler+0x278>)
   14e0c:	f006 fb98 	bl	1b540 <am_util_stdio_printf>
   14e10:	68b8      	ldr	r0, [r7, #8]
   14e12:	f7ff fd5d 	bl	148d0 <error_check>
   14e16:	e0ae      	b.n	14f76 <HciDrvHandler+0x24a>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   14e18:	693b      	ldr	r3, [r7, #16]
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d13d      	bne.n	14e9a <HciDrvHandler+0x16e>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   14e1e:	2300      	movs	r3, #0
   14e20:	61bb      	str	r3, [r7, #24]
   14e22:	e012      	b.n	14e4a <HciDrvHandler+0x11e>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   14e24:	4b5a      	ldr	r3, [pc, #360]	; (14f90 <HciDrvHandler+0x264>)
   14e26:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   14e2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   14e2e:	b2db      	uxtb	r3, r3
   14e30:	2b00      	cmp	r3, #0
   14e32:	d00e      	beq.n	14e52 <HciDrvHandler+0x126>
   14e34:	4b57      	ldr	r3, [pc, #348]	; (14f94 <HciDrvHandler+0x268>)
   14e36:	681a      	ldr	r2, [r3, #0]
   14e38:	68fb      	ldr	r3, [r7, #12]
   14e3a:	429a      	cmp	r2, r3
   14e3c:	d109      	bne.n	14e52 <HciDrvHandler+0x126>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   14e3e:	2001      	movs	r0, #1
   14e40:	f005 fc4e 	bl	1a6e0 <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   14e44:	69bb      	ldr	r3, [r7, #24]
   14e46:	3301      	adds	r3, #1
   14e48:	61bb      	str	r3, [r7, #24]
   14e4a:	69bb      	ldr	r3, [r7, #24]
   14e4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   14e50:	d3e8      	bcc.n	14e24 <HciDrvHandler+0xf8>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   14e52:	4b4d      	ldr	r3, [pc, #308]	; (14f88 <HciDrvHandler+0x25c>)
   14e54:	681a      	ldr	r2, [r3, #0]
   14e56:	4b4a      	ldr	r3, [pc, #296]	; (14f80 <HciDrvHandler+0x254>)
   14e58:	681b      	ldr	r3, [r3, #0]
   14e5a:	b29b      	uxth	r3, r3
   14e5c:	4619      	mov	r1, r3
   14e5e:	4610      	mov	r0, r2
   14e60:	f003 ffb4 	bl	18dcc <hciTrSerialRxIncoming>
   14e64:	4603      	mov	r3, r0
   14e66:	461a      	mov	r2, r3
   14e68:	4b46      	ldr	r3, [pc, #280]	; (14f84 <HciDrvHandler+0x258>)
   14e6a:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   14e6c:	4b45      	ldr	r3, [pc, #276]	; (14f84 <HciDrvHandler+0x258>)
   14e6e:	681a      	ldr	r2, [r3, #0]
   14e70:	4b43      	ldr	r3, [pc, #268]	; (14f80 <HciDrvHandler+0x254>)
   14e72:	681b      	ldr	r3, [r3, #0]
   14e74:	429a      	cmp	r2, r3
   14e76:	d006      	beq.n	14e86 <HciDrvHandler+0x15a>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14e78:	4b44      	ldr	r3, [pc, #272]	; (14f8c <HciDrvHandler+0x260>)
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	2101      	movs	r1, #1
   14e7e:	4618      	mov	r0, r3
   14e80:	f004 fd2e 	bl	198e0 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   14e84:	e065      	b.n	14f52 <HciDrvHandler+0x226>
                }

                g_ui32NumBytes   = 0;
   14e86:	4b3e      	ldr	r3, [pc, #248]	; (14f80 <HciDrvHandler+0x254>)
   14e88:	2200      	movs	r2, #0
   14e8a:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   14e8c:	4b3d      	ldr	r3, [pc, #244]	; (14f84 <HciDrvHandler+0x258>)
   14e8e:	2200      	movs	r2, #0
   14e90:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   14e92:	69fb      	ldr	r3, [r7, #28]
   14e94:	3301      	adds	r3, #1
   14e96:	61fb      	str	r3, [r7, #28]
   14e98:	e00f      	b.n	14eba <HciDrvHandler+0x18e>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   14e9a:	693b      	ldr	r3, [r7, #16]
   14e9c:	2b00      	cmp	r3, #0
   14e9e:	d00c      	beq.n	14eba <HciDrvHandler+0x18e>
   14ea0:	6938      	ldr	r0, [r7, #16]
   14ea2:	f7ff fd15 	bl	148d0 <error_check>
   14ea6:	f7ff fe29 	bl	14afc <HciDrvRadioShutdown>
   14eaa:	2000      	movs	r0, #0
   14eac:	f7ff fd2c 	bl	14908 <HciDrvRadioBoot>
   14eb0:	f000 f87e 	bl	14fb0 <HciDrvEmptyWriteQueue>
   14eb4:	f7fb f87c 	bl	ffb0 <DmDevReset>
   14eb8:	e05d      	b.n	14f76 <HciDrvHandler+0x24a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   14eba:	69fb      	ldr	r3, [r7, #28]
   14ebc:	2b03      	cmp	r3, #3
   14ebe:	d93e      	bls.n	14f3e <HciDrvHandler+0x212>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14ec0:	4b32      	ldr	r3, [pc, #200]	; (14f8c <HciDrvHandler+0x260>)
   14ec2:	781b      	ldrb	r3, [r3, #0]
   14ec4:	2101      	movs	r1, #1
   14ec6:	4618      	mov	r0, r3
   14ec8:	f004 fd0a 	bl	198e0 <WsfSetEvent>

                break;
   14ecc:	e041      	b.n	14f52 <HciDrvHandler+0x226>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   14ece:	4b36      	ldr	r3, [pc, #216]	; (14fa8 <HciDrvHandler+0x27c>)
   14ed0:	689b      	ldr	r3, [r3, #8]
   14ed2:	2b00      	cmp	r3, #0
   14ed4:	d03c      	beq.n	14f50 <HciDrvHandler+0x224>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   14ed6:	4b34      	ldr	r3, [pc, #208]	; (14fa8 <HciDrvHandler+0x27c>)
   14ed8:	695a      	ldr	r2, [r3, #20]
   14eda:	4b33      	ldr	r3, [pc, #204]	; (14fa8 <HciDrvHandler+0x27c>)
   14edc:	685b      	ldr	r3, [r3, #4]
   14ede:	4413      	add	r3, r2
   14ee0:	617b      	str	r3, [r7, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   14ee2:	4b2d      	ldr	r3, [pc, #180]	; (14f98 <HciDrvHandler+0x26c>)
   14ee4:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   14ee6:	697b      	ldr	r3, [r7, #20]
   14ee8:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   14eea:	697b      	ldr	r3, [r7, #20]
   14eec:	681b      	ldr	r3, [r3, #0]
   14eee:	2100      	movs	r1, #0
   14ef0:	f009 fb1a 	bl	1e528 <am_hal_ble_blocking_hci_write>
   14ef4:	6138      	str	r0, [r7, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   14ef6:	693b      	ldr	r3, [r7, #16]
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d111      	bne.n	14f20 <HciDrvHandler+0x1f4>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   14efc:	481f      	ldr	r0, [pc, #124]	; (14f7c <HciDrvHandler+0x250>)
   14efe:	f000 fb7f 	bl	15600 <WsfTimerStop>
   14f02:	f242 7110 	movw	r1, #10000	; 0x2710
   14f06:	481d      	ldr	r0, [pc, #116]	; (14f7c <HciDrvHandler+0x250>)
   14f08:	f000 fb66 	bl	155d8 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   14f0c:	2201      	movs	r2, #1
   14f0e:	2100      	movs	r1, #0
   14f10:	4825      	ldr	r0, [pc, #148]	; (14fa8 <HciDrvHandler+0x27c>)
   14f12:	f00b fa55 	bl	203c0 <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   14f16:	2300      	movs	r3, #0
   14f18:	627b      	str	r3, [r7, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   14f1a:	2300      	movs	r3, #0
   14f1c:	623b      	str	r3, [r7, #32]
   14f1e:	e00e      	b.n	14f3e <HciDrvHandler+0x212>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   14f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f22:	3301      	adds	r3, #1
   14f24:	627b      	str	r3, [r7, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   14f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f28:	f242 7210 	movw	r2, #10000	; 0x2710
   14f2c:	4293      	cmp	r3, r2
   14f2e:	d906      	bls.n	14f3e <HciDrvHandler+0x212>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14f30:	4b16      	ldr	r3, [pc, #88]	; (14f8c <HciDrvHandler+0x260>)
   14f32:	781b      	ldrb	r3, [r3, #0]
   14f34:	2101      	movs	r1, #1
   14f36:	4618      	mov	r0, r3
   14f38:	f004 fcd2 	bl	198e0 <WsfSetEvent>
                        break;
   14f3c:	e009      	b.n	14f52 <HciDrvHandler+0x226>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   14f3e:	6a3b      	ldr	r3, [r7, #32]
   14f40:	1c5a      	adds	r2, r3, #1
   14f42:	623a      	str	r2, [r7, #32]
   14f44:	f242 720f 	movw	r2, #9999	; 0x270f
   14f48:	4293      	cmp	r3, r2
   14f4a:	f67f af39 	bls.w	14dc0 <HciDrvHandler+0x94>
   14f4e:	e000      	b.n	14f52 <HciDrvHandler+0x226>
                break;
   14f50:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   14f52:	6a3b      	ldr	r3, [r7, #32]
   14f54:	f242 7210 	movw	r2, #10000	; 0x2710
   14f58:	4293      	cmp	r3, r2
   14f5a:	d10c      	bne.n	14f76 <HciDrvHandler+0x24a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   14f5c:	4813      	ldr	r0, [pc, #76]	; (14fac <HciDrvHandler+0x280>)
   14f5e:	f7ff fcb7 	bl	148d0 <error_check>
   14f62:	f7ff fdcb 	bl	14afc <HciDrvRadioShutdown>
   14f66:	2000      	movs	r0, #0
   14f68:	f7ff fcce 	bl	14908 <HciDrvRadioBoot>
   14f6c:	f000 f820 	bl	14fb0 <HciDrvEmptyWriteQueue>
   14f70:	f7fb f81e 	bl	ffb0 <DmDevReset>
   14f74:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   14f76:	3728      	adds	r7, #40	; 0x28
   14f78:	46bd      	mov	sp, r7
   14f7a:	bd80      	pop	{r7, pc}
   14f7c:	10005268 	.word	0x10005268
   14f80:	100043b4 	.word	0x100043b4
   14f84:	100043b8 	.word	0x100043b8
   14f88:	10002bac 	.word	0x10002bac
   14f8c:	100043b0 	.word	0x100043b0
   14f90:	5000c000 	.word	0x5000c000
   14f94:	100043bc 	.word	0x100043bc
   14f98:	10005b98 	.word	0x10005b98
   14f9c:	10005278 	.word	0x10005278
   14fa0:	09000002 	.word	0x09000002
   14fa4:	00021ac0 	.word	0x00021ac0
   14fa8:	10005250 	.word	0x10005250
   14fac:	09000006 	.word	0x09000006

00014fb0 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   14fb0:	b580      	push	{r7, lr}
   14fb2:	af00      	add	r7, sp, #0
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   14fb4:	f44f 6302 	mov.w	r3, #2080	; 0x820
   14fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
   14fbc:	4902      	ldr	r1, [pc, #8]	; (14fc8 <HciDrvEmptyWriteQueue+0x18>)
   14fbe:	4803      	ldr	r0, [pc, #12]	; (14fcc <HciDrvEmptyWriteQueue+0x1c>)
   14fc0:	f00b f9ba 	bl	20338 <am_hal_queue_init>
}
   14fc4:	bf00      	nop
   14fc6:	bd80      	pop	{r7, pc}
   14fc8:	10005378 	.word	0x10005378
   14fcc:	10005250 	.word	0x10005250

00014fd0 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   14fd0:	b480      	push	{r7}
   14fd2:	b089      	sub	sp, #36	; 0x24
   14fd4:	af00      	add	r7, sp, #0
   14fd6:	60b9      	str	r1, [r7, #8]
   14fd8:	607b      	str	r3, [r7, #4]
   14fda:	4603      	mov	r3, r0
   14fdc:	81fb      	strh	r3, [r7, #14]
   14fde:	4613      	mov	r3, r2
   14fe0:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   14fe2:	4a4d      	ldr	r2, [pc, #308]	; (15118 <WsfBufInit+0x148>)
   14fe4:	68bb      	ldr	r3, [r7, #8]
   14fe6:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   14fe8:	4b4b      	ldr	r3, [pc, #300]	; (15118 <WsfBufInit+0x148>)
   14fea:	681b      	ldr	r3, [r3, #0]
   14fec:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   14fee:	7b7a      	ldrb	r2, [r7, #13]
   14ff0:	4613      	mov	r3, r2
   14ff2:	005b      	lsls	r3, r3, #1
   14ff4:	4413      	add	r3, r2
   14ff6:	009b      	lsls	r3, r3, #2
   14ff8:	461a      	mov	r2, r3
   14ffa:	69fb      	ldr	r3, [r7, #28]
   14ffc:	4413      	add	r3, r2
   14ffe:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
   15000:	4a46      	ldr	r2, [pc, #280]	; (1511c <WsfBufInit+0x14c>)
   15002:	7b7b      	ldrb	r3, [r7, #13]
   15004:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   15006:	4b44      	ldr	r3, [pc, #272]	; (15118 <WsfBufInit+0x148>)
   15008:	681a      	ldr	r2, [r3, #0]
   1500a:	89fb      	ldrh	r3, [r7, #14]
   1500c:	08db      	lsrs	r3, r3, #3
   1500e:	b29b      	uxth	r3, r3
   15010:	00db      	lsls	r3, r3, #3
   15012:	441a      	add	r2, r3
   15014:	69bb      	ldr	r3, [r7, #24]
   15016:	429a      	cmp	r2, r3
   15018:	d201      	bcs.n	1501e <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1501a:	2300      	movs	r3, #0
   1501c:	e075      	b.n	1510a <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1501e:	7b7b      	ldrb	r3, [r7, #13]
   15020:	1e5a      	subs	r2, r3, #1
   15022:	737a      	strb	r2, [r7, #13]
   15024:	2b00      	cmp	r3, #0
   15026:	d066      	beq.n	150f6 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   15028:	687b      	ldr	r3, [r7, #4]
   1502a:	881b      	ldrh	r3, [r3, #0]
   1502c:	2b07      	cmp	r3, #7
   1502e:	d803      	bhi.n	15038 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   15030:	69fb      	ldr	r3, [r7, #28]
   15032:	2208      	movs	r2, #8
   15034:	801a      	strh	r2, [r3, #0]
   15036:	e014      	b.n	15062 <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   15038:	687b      	ldr	r3, [r7, #4]
   1503a:	881b      	ldrh	r3, [r3, #0]
   1503c:	f003 0307 	and.w	r3, r3, #7
   15040:	b29b      	uxth	r3, r3
   15042:	2b00      	cmp	r3, #0
   15044:	d009      	beq.n	1505a <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   15046:	687b      	ldr	r3, [r7, #4]
   15048:	881b      	ldrh	r3, [r3, #0]
   1504a:	f023 0307 	bic.w	r3, r3, #7
   1504e:	b29b      	uxth	r3, r3
   15050:	3308      	adds	r3, #8
   15052:	b29a      	uxth	r2, r3
   15054:	69fb      	ldr	r3, [r7, #28]
   15056:	801a      	strh	r2, [r3, #0]
   15058:	e003      	b.n	15062 <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   1505a:	687b      	ldr	r3, [r7, #4]
   1505c:	881a      	ldrh	r2, [r3, #0]
   1505e:	69fb      	ldr	r3, [r7, #28]
   15060:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   15062:	687b      	ldr	r3, [r7, #4]
   15064:	789a      	ldrb	r2, [r3, #2]
   15066:	69fb      	ldr	r3, [r7, #28]
   15068:	709a      	strb	r2, [r3, #2]
    pDesc++;
   1506a:	687b      	ldr	r3, [r7, #4]
   1506c:	3304      	adds	r3, #4
   1506e:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
   15070:	69fb      	ldr	r3, [r7, #28]
   15072:	69ba      	ldr	r2, [r7, #24]
   15074:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   15076:	69fb      	ldr	r3, [r7, #28]
   15078:	69ba      	ldr	r2, [r7, #24]
   1507a:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   1507c:	69fb      	ldr	r3, [r7, #28]
   1507e:	881b      	ldrh	r3, [r3, #0]
   15080:	08db      	lsrs	r3, r3, #3
   15082:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
   15084:	69fb      	ldr	r3, [r7, #28]
   15086:	789b      	ldrb	r3, [r3, #2]
   15088:	75fb      	strb	r3, [r7, #23]
   1508a:	e019      	b.n	150c0 <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1508c:	4b22      	ldr	r3, [pc, #136]	; (15118 <WsfBufInit+0x148>)
   1508e:	681a      	ldr	r2, [r3, #0]
   15090:	89fb      	ldrh	r3, [r7, #14]
   15092:	08db      	lsrs	r3, r3, #3
   15094:	b29b      	uxth	r3, r3
   15096:	00db      	lsls	r3, r3, #3
   15098:	441a      	add	r2, r3
   1509a:	69bb      	ldr	r3, [r7, #24]
   1509c:	429a      	cmp	r2, r3
   1509e:	d201      	bcs.n	150a4 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   150a0:	2300      	movs	r3, #0
   150a2:	e032      	b.n	1510a <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   150a4:	8abb      	ldrh	r3, [r7, #20]
   150a6:	00db      	lsls	r3, r3, #3
   150a8:	69ba      	ldr	r2, [r7, #24]
   150aa:	441a      	add	r2, r3
   150ac:	69bb      	ldr	r3, [r7, #24]
   150ae:	601a      	str	r2, [r3, #0]
      pStart += len;
   150b0:	8abb      	ldrh	r3, [r7, #20]
   150b2:	00db      	lsls	r3, r3, #3
   150b4:	69ba      	ldr	r2, [r7, #24]
   150b6:	4413      	add	r3, r2
   150b8:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
   150ba:	7dfb      	ldrb	r3, [r7, #23]
   150bc:	3b01      	subs	r3, #1
   150be:	75fb      	strb	r3, [r7, #23]
   150c0:	7dfb      	ldrb	r3, [r7, #23]
   150c2:	2b01      	cmp	r3, #1
   150c4:	d8e2      	bhi.n	1508c <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   150c6:	4b14      	ldr	r3, [pc, #80]	; (15118 <WsfBufInit+0x148>)
   150c8:	681a      	ldr	r2, [r3, #0]
   150ca:	89fb      	ldrh	r3, [r7, #14]
   150cc:	08db      	lsrs	r3, r3, #3
   150ce:	b29b      	uxth	r3, r3
   150d0:	00db      	lsls	r3, r3, #3
   150d2:	441a      	add	r2, r3
   150d4:	69bb      	ldr	r3, [r7, #24]
   150d6:	429a      	cmp	r2, r3
   150d8:	d201      	bcs.n	150de <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   150da:	2300      	movs	r3, #0
   150dc:	e015      	b.n	1510a <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   150de:	69bb      	ldr	r3, [r7, #24]
   150e0:	2200      	movs	r2, #0
   150e2:	601a      	str	r2, [r3, #0]
    pStart += len;
   150e4:	8abb      	ldrh	r3, [r7, #20]
   150e6:	00db      	lsls	r3, r3, #3
   150e8:	69ba      	ldr	r2, [r7, #24]
   150ea:	4413      	add	r3, r2
   150ec:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
   150ee:	69fb      	ldr	r3, [r7, #28]
   150f0:	330c      	adds	r3, #12
   150f2:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   150f4:	e787      	b.n	15006 <WsfBufInit+0x36>
      break;
   150f6:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   150f8:	69bb      	ldr	r3, [r7, #24]
   150fa:	4a07      	ldr	r2, [pc, #28]	; (15118 <WsfBufInit+0x148>)
   150fc:	6812      	ldr	r2, [r2, #0]
   150fe:	1a9b      	subs	r3, r3, r2
   15100:	b29a      	uxth	r2, r3
   15102:	4b07      	ldr	r3, [pc, #28]	; (15120 <WsfBufInit+0x150>)
   15104:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   15106:	4b06      	ldr	r3, [pc, #24]	; (15120 <WsfBufInit+0x150>)
   15108:	881b      	ldrh	r3, [r3, #0]
}
   1510a:	4618      	mov	r0, r3
   1510c:	3724      	adds	r7, #36	; 0x24
   1510e:	46bd      	mov	sp, r7
   15110:	f85d 7b04 	ldr.w	r7, [sp], #4
   15114:	4770      	bx	lr
   15116:	bf00      	nop
   15118:	100043c8 	.word	0x100043c8
   1511c:	10005bae 	.word	0x10005bae
   15120:	10005bac 	.word	0x10005bac

00015124 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   15124:	b580      	push	{r7, lr}
   15126:	b086      	sub	sp, #24
   15128:	af00      	add	r7, sp, #0
   1512a:	4603      	mov	r3, r0
   1512c:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   1512e:	4b1a      	ldr	r3, [pc, #104]	; (15198 <WsfBufAlloc+0x74>)
   15130:	681b      	ldr	r3, [r3, #0]
   15132:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   15134:	4b19      	ldr	r3, [pc, #100]	; (1519c <WsfBufAlloc+0x78>)
   15136:	781b      	ldrb	r3, [r3, #0]
   15138:	74fb      	strb	r3, [r7, #19]
   1513a:	e020      	b.n	1517e <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   1513c:	697b      	ldr	r3, [r7, #20]
   1513e:	881b      	ldrh	r3, [r3, #0]
   15140:	88fa      	ldrh	r2, [r7, #6]
   15142:	429a      	cmp	r2, r3
   15144:	d815      	bhi.n	15172 <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   15146:	f004 fb8f 	bl	19868 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   1514a:	697b      	ldr	r3, [r7, #20]
   1514c:	689b      	ldr	r3, [r3, #8]
   1514e:	2b00      	cmp	r3, #0
   15150:	d00d      	beq.n	1516e <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   15152:	697b      	ldr	r3, [r7, #20]
   15154:	689b      	ldr	r3, [r3, #8]
   15156:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   15158:	68fb      	ldr	r3, [r7, #12]
   1515a:	681a      	ldr	r2, [r3, #0]
   1515c:	697b      	ldr	r3, [r7, #20]
   1515e:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   15160:	68fb      	ldr	r3, [r7, #12]
   15162:	2200      	movs	r2, #0
   15164:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   15166:	f004 fb93 	bl	19890 <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   1516a:	68fb      	ldr	r3, [r7, #12]
   1516c:	e010      	b.n	15190 <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1516e:	f004 fb8f 	bl	19890 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   15172:	7cfb      	ldrb	r3, [r7, #19]
   15174:	3b01      	subs	r3, #1
   15176:	74fb      	strb	r3, [r7, #19]
   15178:	697b      	ldr	r3, [r7, #20]
   1517a:	330c      	adds	r3, #12
   1517c:	617b      	str	r3, [r7, #20]
   1517e:	7cfb      	ldrb	r3, [r7, #19]
   15180:	2b00      	cmp	r3, #0
   15182:	d1db      	bne.n	1513c <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   15184:	88fb      	ldrh	r3, [r7, #6]
   15186:	4619      	mov	r1, r3
   15188:	4805      	ldr	r0, [pc, #20]	; (151a0 <WsfBufAlloc+0x7c>)
   1518a:	f004 fcb7 	bl	19afc <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1518e:	2300      	movs	r3, #0
}
   15190:	4618      	mov	r0, r3
   15192:	3718      	adds	r7, #24
   15194:	46bd      	mov	sp, r7
   15196:	bd80      	pop	{r7, pc}
   15198:	100043c8 	.word	0x100043c8
   1519c:	10005bae 	.word	0x10005bae
   151a0:	00021af0 	.word	0x00021af0

000151a4 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   151a4:	b580      	push	{r7, lr}
   151a6:	b084      	sub	sp, #16
   151a8:	af00      	add	r7, sp, #0
   151aa:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   151ac:	687b      	ldr	r3, [r7, #4]
   151ae:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   151b0:	4b16      	ldr	r3, [pc, #88]	; (1520c <WsfBufFree+0x68>)
   151b2:	681a      	ldr	r2, [r3, #0]
   151b4:	4b16      	ldr	r3, [pc, #88]	; (15210 <WsfBufFree+0x6c>)
   151b6:	781b      	ldrb	r3, [r3, #0]
   151b8:	4619      	mov	r1, r3
   151ba:	460b      	mov	r3, r1
   151bc:	005b      	lsls	r3, r3, #1
   151be:	440b      	add	r3, r1
   151c0:	009b      	lsls	r3, r3, #2
   151c2:	3b0c      	subs	r3, #12
   151c4:	4413      	add	r3, r2
   151c6:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   151c8:	e016      	b.n	151f8 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   151ca:	68fb      	ldr	r3, [r7, #12]
   151cc:	685a      	ldr	r2, [r3, #4]
   151ce:	68bb      	ldr	r3, [r7, #8]
   151d0:	429a      	cmp	r2, r3
   151d2:	d80e      	bhi.n	151f2 <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   151d4:	f004 fb48 	bl	19868 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   151d8:	68bb      	ldr	r3, [r7, #8]
   151da:	4a0e      	ldr	r2, [pc, #56]	; (15214 <WsfBufFree+0x70>)
   151dc:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   151de:	68fb      	ldr	r3, [r7, #12]
   151e0:	689a      	ldr	r2, [r3, #8]
   151e2:	68bb      	ldr	r3, [r7, #8]
   151e4:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   151e6:	68fb      	ldr	r3, [r7, #12]
   151e8:	68ba      	ldr	r2, [r7, #8]
   151ea:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   151ec:	f004 fb50 	bl	19890 <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   151f0:	e008      	b.n	15204 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
   151f2:	68fb      	ldr	r3, [r7, #12]
   151f4:	3b0c      	subs	r3, #12
   151f6:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   151f8:	4b04      	ldr	r3, [pc, #16]	; (1520c <WsfBufFree+0x68>)
   151fa:	681b      	ldr	r3, [r3, #0]
   151fc:	68fa      	ldr	r2, [r7, #12]
   151fe:	429a      	cmp	r2, r3
   15200:	d2e3      	bcs.n	151ca <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   15202:	bf00      	nop
}
   15204:	3710      	adds	r7, #16
   15206:	46bd      	mov	sp, r7
   15208:	bd80      	pop	{r7, pc}
   1520a:	bf00      	nop
   1520c:	100043c8 	.word	0x100043c8
   15210:	10005bae 	.word	0x10005bae
   15214:	faabd00d 	.word	0xfaabd00d

00015218 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   15218:	b580      	push	{r7, lr}
   1521a:	b082      	sub	sp, #8
   1521c:	af00      	add	r7, sp, #0
   1521e:	4603      	mov	r3, r0
   15220:	460a      	mov	r2, r1
   15222:	80fb      	strh	r3, [r7, #6]
   15224:	4613      	mov	r3, r2
   15226:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
   15228:	797b      	ldrb	r3, [r7, #5]
   1522a:	b29a      	uxth	r2, r3
   1522c:	88fb      	ldrh	r3, [r7, #6]
   1522e:	4413      	add	r3, r2
   15230:	b29b      	uxth	r3, r3
   15232:	4618      	mov	r0, r3
   15234:	f000 f805 	bl	15242 <WsfMsgAlloc>
   15238:	4603      	mov	r3, r0
}
   1523a:	4618      	mov	r0, r3
   1523c:	3708      	adds	r7, #8
   1523e:	46bd      	mov	sp, r7
   15240:	bd80      	pop	{r7, pc}

00015242 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   15242:	b580      	push	{r7, lr}
   15244:	b084      	sub	sp, #16
   15246:	af00      	add	r7, sp, #0
   15248:	4603      	mov	r3, r0
   1524a:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1524c:	88fb      	ldrh	r3, [r7, #6]
   1524e:	3308      	adds	r3, #8
   15250:	b29b      	uxth	r3, r3
   15252:	4618      	mov	r0, r3
   15254:	f7ff ff66 	bl	15124 <WsfBufAlloc>
   15258:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
   1525a:	68fb      	ldr	r3, [r7, #12]
   1525c:	2b00      	cmp	r3, #0
   1525e:	d002      	beq.n	15266 <WsfMsgAlloc+0x24>
  {
    pMsg++;
   15260:	68fb      	ldr	r3, [r7, #12]
   15262:	3308      	adds	r3, #8
   15264:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   15266:	68fb      	ldr	r3, [r7, #12]
}
   15268:	4618      	mov	r0, r3
   1526a:	3710      	adds	r7, #16
   1526c:	46bd      	mov	sp, r7
   1526e:	bd80      	pop	{r7, pc}

00015270 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   15270:	b580      	push	{r7, lr}
   15272:	b082      	sub	sp, #8
   15274:	af00      	add	r7, sp, #0
   15276:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   15278:	687b      	ldr	r3, [r7, #4]
   1527a:	3b08      	subs	r3, #8
   1527c:	4618      	mov	r0, r3
   1527e:	f7ff ff91 	bl	151a4 <WsfBufFree>
}
   15282:	bf00      	nop
   15284:	3708      	adds	r7, #8
   15286:	46bd      	mov	sp, r7
   15288:	bd80      	pop	{r7, pc}

0001528a <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1528a:	b580      	push	{r7, lr}
   1528c:	b082      	sub	sp, #8
   1528e:	af00      	add	r7, sp, #0
   15290:	4603      	mov	r3, r0
   15292:	6039      	str	r1, [r7, #0]
   15294:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   15296:	79fb      	ldrb	r3, [r7, #7]
   15298:	4618      	mov	r0, r3
   1529a:	f004 fb6f 	bl	1997c <WsfTaskMsgQueue>
   1529e:	79fb      	ldrb	r3, [r7, #7]
   152a0:	683a      	ldr	r2, [r7, #0]
   152a2:	4619      	mov	r1, r3
   152a4:	f000 f809 	bl	152ba <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   152a8:	79fb      	ldrb	r3, [r7, #7]
   152aa:	2101      	movs	r1, #1
   152ac:	4618      	mov	r0, r3
   152ae:	f004 fb47 	bl	19940 <WsfTaskSetReady>
}
   152b2:	bf00      	nop
   152b4:	3708      	adds	r7, #8
   152b6:	46bd      	mov	sp, r7
   152b8:	bd80      	pop	{r7, pc}

000152ba <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   152ba:	b580      	push	{r7, lr}
   152bc:	b086      	sub	sp, #24
   152be:	af00      	add	r7, sp, #0
   152c0:	60f8      	str	r0, [r7, #12]
   152c2:	460b      	mov	r3, r1
   152c4:	607a      	str	r2, [r7, #4]
   152c6:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   152c8:	687b      	ldr	r3, [r7, #4]
   152ca:	3b08      	subs	r3, #8
   152cc:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   152ce:	697b      	ldr	r3, [r7, #20]
   152d0:	7afa      	ldrb	r2, [r7, #11]
   152d2:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   152d4:	6979      	ldr	r1, [r7, #20]
   152d6:	68f8      	ldr	r0, [r7, #12]
   152d8:	f000 f81c 	bl	15314 <WsfQueueEnq>
}
   152dc:	bf00      	nop
   152de:	3718      	adds	r7, #24
   152e0:	46bd      	mov	sp, r7
   152e2:	bd80      	pop	{r7, pc}

000152e4 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   152e4:	b580      	push	{r7, lr}
   152e6:	b084      	sub	sp, #16
   152e8:	af00      	add	r7, sp, #0
   152ea:	6078      	str	r0, [r7, #4]
   152ec:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   152ee:	6878      	ldr	r0, [r7, #4]
   152f0:	f000 f832 	bl	15358 <WsfQueueDeq>
   152f4:	60f8      	str	r0, [r7, #12]
   152f6:	68fb      	ldr	r3, [r7, #12]
   152f8:	2b00      	cmp	r3, #0
   152fa:	d006      	beq.n	1530a <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
   152fc:	68fb      	ldr	r3, [r7, #12]
   152fe:	791a      	ldrb	r2, [r3, #4]
   15300:	683b      	ldr	r3, [r7, #0]
   15302:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   15304:	68fb      	ldr	r3, [r7, #12]
   15306:	3308      	adds	r3, #8
   15308:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   1530a:	68fb      	ldr	r3, [r7, #12]
}
   1530c:	4618      	mov	r0, r3
   1530e:	3710      	adds	r7, #16
   15310:	46bd      	mov	sp, r7
   15312:	bd80      	pop	{r7, pc}

00015314 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   15314:	b580      	push	{r7, lr}
   15316:	b082      	sub	sp, #8
   15318:	af00      	add	r7, sp, #0
   1531a:	6078      	str	r0, [r7, #4]
   1531c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   1531e:	683b      	ldr	r3, [r7, #0]
   15320:	2200      	movs	r2, #0
   15322:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   15324:	f004 faa0 	bl	19868 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   15328:	687b      	ldr	r3, [r7, #4]
   1532a:	681b      	ldr	r3, [r3, #0]
   1532c:	2b00      	cmp	r3, #0
   1532e:	d106      	bne.n	1533e <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
   15330:	687b      	ldr	r3, [r7, #4]
   15332:	683a      	ldr	r2, [r7, #0]
   15334:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   15336:	687b      	ldr	r3, [r7, #4]
   15338:	683a      	ldr	r2, [r7, #0]
   1533a:	605a      	str	r2, [r3, #4]
   1533c:	e006      	b.n	1534c <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1533e:	687b      	ldr	r3, [r7, #4]
   15340:	685b      	ldr	r3, [r3, #4]
   15342:	683a      	ldr	r2, [r7, #0]
   15344:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   15346:	687b      	ldr	r3, [r7, #4]
   15348:	683a      	ldr	r2, [r7, #0]
   1534a:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1534c:	f004 faa0 	bl	19890 <WsfCsExit>
}
   15350:	bf00      	nop
   15352:	3708      	adds	r7, #8
   15354:	46bd      	mov	sp, r7
   15356:	bd80      	pop	{r7, pc}

00015358 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   15358:	b580      	push	{r7, lr}
   1535a:	b084      	sub	sp, #16
   1535c:	af00      	add	r7, sp, #0
   1535e:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   15360:	f004 fa82 	bl	19868 <WsfCsEnter>

  pElem = pQueue->pHead;
   15364:	687b      	ldr	r3, [r7, #4]
   15366:	681b      	ldr	r3, [r3, #0]
   15368:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   1536a:	68fb      	ldr	r3, [r7, #12]
   1536c:	2b00      	cmp	r3, #0
   1536e:	d00a      	beq.n	15386 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   15370:	68fb      	ldr	r3, [r7, #12]
   15372:	681a      	ldr	r2, [r3, #0]
   15374:	687b      	ldr	r3, [r7, #4]
   15376:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   15378:	687b      	ldr	r3, [r7, #4]
   1537a:	681b      	ldr	r3, [r3, #0]
   1537c:	2b00      	cmp	r3, #0
   1537e:	d102      	bne.n	15386 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
   15380:	687b      	ldr	r3, [r7, #4]
   15382:	2200      	movs	r2, #0
   15384:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   15386:	f004 fa83 	bl	19890 <WsfCsExit>

  return pElem;
   1538a:	68fb      	ldr	r3, [r7, #12]
}
   1538c:	4618      	mov	r0, r3
   1538e:	3710      	adds	r7, #16
   15390:	46bd      	mov	sp, r7
   15392:	bd80      	pop	{r7, pc}

00015394 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   15394:	b580      	push	{r7, lr}
   15396:	b082      	sub	sp, #8
   15398:	af00      	add	r7, sp, #0
   1539a:	6078      	str	r0, [r7, #4]
   1539c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1539e:	f004 fa63 	bl	19868 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   153a2:	687b      	ldr	r3, [r7, #4]
   153a4:	681a      	ldr	r2, [r3, #0]
   153a6:	683b      	ldr	r3, [r7, #0]
   153a8:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   153aa:	687b      	ldr	r3, [r7, #4]
   153ac:	681b      	ldr	r3, [r3, #0]
   153ae:	2b00      	cmp	r3, #0
   153b0:	d102      	bne.n	153b8 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
   153b2:	687b      	ldr	r3, [r7, #4]
   153b4:	683a      	ldr	r2, [r7, #0]
   153b6:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   153b8:	687b      	ldr	r3, [r7, #4]
   153ba:	683a      	ldr	r2, [r7, #0]
   153bc:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   153be:	f004 fa67 	bl	19890 <WsfCsExit>
}
   153c2:	bf00      	nop
   153c4:	3708      	adds	r7, #8
   153c6:	46bd      	mov	sp, r7
   153c8:	bd80      	pop	{r7, pc}

000153ca <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   153ca:	b580      	push	{r7, lr}
   153cc:	b084      	sub	sp, #16
   153ce:	af00      	add	r7, sp, #0
   153d0:	60f8      	str	r0, [r7, #12]
   153d2:	60b9      	str	r1, [r7, #8]
   153d4:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   153d6:	f004 fa47 	bl	19868 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   153da:	68fb      	ldr	r3, [r7, #12]
   153dc:	681b      	ldr	r3, [r3, #0]
   153de:	2b00      	cmp	r3, #0
   153e0:	d004      	beq.n	153ec <WsfQueueInsert+0x22>
   153e2:	68fb      	ldr	r3, [r7, #12]
   153e4:	685a      	ldr	r2, [r3, #4]
   153e6:	687b      	ldr	r3, [r7, #4]
   153e8:	429a      	cmp	r2, r3
   153ea:	d104      	bne.n	153f6 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   153ec:	68b9      	ldr	r1, [r7, #8]
   153ee:	68f8      	ldr	r0, [r7, #12]
   153f0:	f7ff ff90 	bl	15314 <WsfQueueEnq>
   153f4:	e00e      	b.n	15414 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   153f6:	687b      	ldr	r3, [r7, #4]
   153f8:	2b00      	cmp	r3, #0
   153fa:	d104      	bne.n	15406 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   153fc:	68b9      	ldr	r1, [r7, #8]
   153fe:	68f8      	ldr	r0, [r7, #12]
   15400:	f7ff ffc8 	bl	15394 <WsfQueuePush>
   15404:	e006      	b.n	15414 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   15406:	687b      	ldr	r3, [r7, #4]
   15408:	681a      	ldr	r2, [r3, #0]
   1540a:	68bb      	ldr	r3, [r7, #8]
   1540c:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1540e:	687b      	ldr	r3, [r7, #4]
   15410:	68ba      	ldr	r2, [r7, #8]
   15412:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   15414:	f004 fa3c 	bl	19890 <WsfCsExit>
}
   15418:	bf00      	nop
   1541a:	3710      	adds	r7, #16
   1541c:	46bd      	mov	sp, r7
   1541e:	bd80      	pop	{r7, pc}

00015420 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   15420:	b580      	push	{r7, lr}
   15422:	b084      	sub	sp, #16
   15424:	af00      	add	r7, sp, #0
   15426:	60f8      	str	r0, [r7, #12]
   15428:	60b9      	str	r1, [r7, #8]
   1542a:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1542c:	f004 fa1c 	bl	19868 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   15430:	68fb      	ldr	r3, [r7, #12]
   15432:	681a      	ldr	r2, [r3, #0]
   15434:	68bb      	ldr	r3, [r7, #8]
   15436:	429a      	cmp	r2, r3
   15438:	d104      	bne.n	15444 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1543a:	68bb      	ldr	r3, [r7, #8]
   1543c:	681a      	ldr	r2, [r3, #0]
   1543e:	68fb      	ldr	r3, [r7, #12]
   15440:	601a      	str	r2, [r3, #0]
   15442:	e006      	b.n	15452 <WsfQueueRemove+0x32>
  }
  else if (pPrev)
   15444:	687b      	ldr	r3, [r7, #4]
   15446:	2b00      	cmp	r3, #0
   15448:	d003      	beq.n	15452 <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   1544a:	68bb      	ldr	r3, [r7, #8]
   1544c:	681a      	ldr	r2, [r3, #0]
   1544e:	687b      	ldr	r3, [r7, #4]
   15450:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   15452:	68fb      	ldr	r3, [r7, #12]
   15454:	685a      	ldr	r2, [r3, #4]
   15456:	68bb      	ldr	r3, [r7, #8]
   15458:	429a      	cmp	r2, r3
   1545a:	d102      	bne.n	15462 <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   1545c:	68fb      	ldr	r3, [r7, #12]
   1545e:	687a      	ldr	r2, [r7, #4]
   15460:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   15462:	f004 fa15 	bl	19890 <WsfCsExit>
}
   15466:	bf00      	nop
   15468:	3710      	adds	r7, #16
   1546a:	46bd      	mov	sp, r7
   1546c:	bd80      	pop	{r7, pc}

0001546e <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   1546e:	b580      	push	{r7, lr}
   15470:	b084      	sub	sp, #16
   15472:	af00      	add	r7, sp, #0
   15474:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   15476:	2300      	movs	r3, #0
   15478:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1547a:	f004 f9f5 	bl	19868 <WsfCsEnter>

  pElem = pQueue->pHead;
   1547e:	687b      	ldr	r3, [r7, #4]
   15480:	681b      	ldr	r3, [r3, #0]
   15482:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
   15484:	e005      	b.n	15492 <WsfQueueCount+0x24>
  {
    count++;
   15486:	897b      	ldrh	r3, [r7, #10]
   15488:	3301      	adds	r3, #1
   1548a:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
   1548c:	68fb      	ldr	r3, [r7, #12]
   1548e:	681b      	ldr	r3, [r3, #0]
   15490:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   15492:	68fb      	ldr	r3, [r7, #12]
   15494:	2b00      	cmp	r3, #0
   15496:	d1f6      	bne.n	15486 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   15498:	f004 f9fa 	bl	19890 <WsfCsExit>

  return count;
   1549c:	897b      	ldrh	r3, [r7, #10]
}
   1549e:	4618      	mov	r0, r3
   154a0:	3710      	adds	r7, #16
   154a2:	46bd      	mov	sp, r7
   154a4:	bd80      	pop	{r7, pc}

000154a6 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   154a6:	b580      	push	{r7, lr}
   154a8:	b084      	sub	sp, #16
   154aa:	af00      	add	r7, sp, #0
   154ac:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   154ae:	f004 f9db 	bl	19868 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   154b2:	687b      	ldr	r3, [r7, #4]
   154b4:	681b      	ldr	r3, [r3, #0]
   154b6:	2b00      	cmp	r3, #0
   154b8:	bf0c      	ite	eq
   154ba:	2301      	moveq	r3, #1
   154bc:	2300      	movne	r3, #0
   154be:	b2db      	uxtb	r3, r3
   154c0:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   154c2:	f004 f9e5 	bl	19890 <WsfCsExit>

  return empty;
   154c6:	7bfb      	ldrb	r3, [r7, #15]
}
   154c8:	4618      	mov	r0, r3
   154ca:	3710      	adds	r7, #16
   154cc:	46bd      	mov	sp, r7
   154ce:	bd80      	pop	{r7, pc}

000154d0 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   154d0:	b580      	push	{r7, lr}
   154d2:	b084      	sub	sp, #16
   154d4:	af00      	add	r7, sp, #0
   154d6:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   154d8:	2300      	movs	r3, #0
   154da:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   154dc:	4b10      	ldr	r3, [pc, #64]	; (15520 <wsfTimerRemove+0x50>)
   154de:	681b      	ldr	r3, [r3, #0]
   154e0:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
   154e2:	e008      	b.n	154f6 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
   154e4:	68fa      	ldr	r2, [r7, #12]
   154e6:	687b      	ldr	r3, [r7, #4]
   154e8:	429a      	cmp	r2, r3
   154ea:	d008      	beq.n	154fe <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
   154ec:	68fb      	ldr	r3, [r7, #12]
   154ee:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   154f0:	68fb      	ldr	r3, [r7, #12]
   154f2:	681b      	ldr	r3, [r3, #0]
   154f4:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   154f6:	68fb      	ldr	r3, [r7, #12]
   154f8:	2b00      	cmp	r3, #0
   154fa:	d1f3      	bne.n	154e4 <wsfTimerRemove+0x14>
   154fc:	e000      	b.n	15500 <wsfTimerRemove+0x30>
      break;
   154fe:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   15500:	68fb      	ldr	r3, [r7, #12]
   15502:	2b00      	cmp	r3, #0
   15504:	d007      	beq.n	15516 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   15506:	68ba      	ldr	r2, [r7, #8]
   15508:	6879      	ldr	r1, [r7, #4]
   1550a:	4805      	ldr	r0, [pc, #20]	; (15520 <wsfTimerRemove+0x50>)
   1550c:	f7ff ff88 	bl	15420 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   15510:	687b      	ldr	r3, [r7, #4]
   15512:	2200      	movs	r2, #0
   15514:	725a      	strb	r2, [r3, #9]
  }
}
   15516:	bf00      	nop
   15518:	3710      	adds	r7, #16
   1551a:	46bd      	mov	sp, r7
   1551c:	bd80      	pop	{r7, pc}
   1551e:	bf00      	nop
   15520:	10005bb0 	.word	0x10005bb0

00015524 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   15524:	b580      	push	{r7, lr}
   15526:	b084      	sub	sp, #16
   15528:	af00      	add	r7, sp, #0
   1552a:	6078      	str	r0, [r7, #4]
   1552c:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1552e:	2300      	movs	r3, #0
   15530:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
   15532:	f004 f9c1 	bl	198b8 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   15536:	687b      	ldr	r3, [r7, #4]
   15538:	7a5b      	ldrb	r3, [r3, #9]
   1553a:	2b00      	cmp	r3, #0
   1553c:	d002      	beq.n	15544 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
   1553e:	6878      	ldr	r0, [r7, #4]
   15540:	f7ff ffc6 	bl	154d0 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   15544:	687b      	ldr	r3, [r7, #4]
   15546:	2201      	movs	r2, #1
   15548:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	683a      	ldr	r2, [r7, #0]
   1554e:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   15550:	4b0f      	ldr	r3, [pc, #60]	; (15590 <wsfTimerInsert+0x6c>)
   15552:	681b      	ldr	r3, [r3, #0]
   15554:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   15556:	e00a      	b.n	1556e <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
   15558:	687b      	ldr	r3, [r7, #4]
   1555a:	685a      	ldr	r2, [r3, #4]
   1555c:	68fb      	ldr	r3, [r7, #12]
   1555e:	685b      	ldr	r3, [r3, #4]
   15560:	429a      	cmp	r2, r3
   15562:	d308      	bcc.n	15576 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
   15564:	68fb      	ldr	r3, [r7, #12]
   15566:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   15568:	68fb      	ldr	r3, [r7, #12]
   1556a:	681b      	ldr	r3, [r3, #0]
   1556c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1556e:	68fb      	ldr	r3, [r7, #12]
   15570:	2b00      	cmp	r3, #0
   15572:	d1f1      	bne.n	15558 <wsfTimerInsert+0x34>
   15574:	e000      	b.n	15578 <wsfTimerInsert+0x54>
      break;
   15576:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   15578:	68ba      	ldr	r2, [r7, #8]
   1557a:	6879      	ldr	r1, [r7, #4]
   1557c:	4804      	ldr	r0, [pc, #16]	; (15590 <wsfTimerInsert+0x6c>)
   1557e:	f7ff ff24 	bl	153ca <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   15582:	f004 f99f 	bl	198c4 <WsfTaskUnlock>
}
   15586:	bf00      	nop
   15588:	3710      	adds	r7, #16
   1558a:	46bd      	mov	sp, r7
   1558c:	bd80      	pop	{r7, pc}
   1558e:	bf00      	nop
   15590:	10005bb0 	.word	0x10005bb0

00015594 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   15594:	b480      	push	{r7}
   15596:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   15598:	4b05      	ldr	r3, [pc, #20]	; (155b0 <WsfTimerInit+0x1c>)
   1559a:	2200      	movs	r2, #0
   1559c:	601a      	str	r2, [r3, #0]
   1559e:	4b04      	ldr	r3, [pc, #16]	; (155b0 <WsfTimerInit+0x1c>)
   155a0:	2200      	movs	r2, #0
   155a2:	605a      	str	r2, [r3, #4]
}
   155a4:	bf00      	nop
   155a6:	46bd      	mov	sp, r7
   155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   155ac:	4770      	bx	lr
   155ae:	bf00      	nop
   155b0:	10005bb0 	.word	0x10005bb0

000155b4 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   155b4:	b580      	push	{r7, lr}
   155b6:	b082      	sub	sp, #8
   155b8:	af00      	add	r7, sp, #0
   155ba:	6078      	str	r0, [r7, #4]
   155bc:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   155be:	683b      	ldr	r3, [r7, #0]
   155c0:	2264      	movs	r2, #100	; 0x64
   155c2:	fb02 f303 	mul.w	r3, r2, r3
   155c6:	4619      	mov	r1, r3
   155c8:	6878      	ldr	r0, [r7, #4]
   155ca:	f7ff ffab 	bl	15524 <wsfTimerInsert>
}
   155ce:	bf00      	nop
   155d0:	3708      	adds	r7, #8
   155d2:	46bd      	mov	sp, r7
   155d4:	bd80      	pop	{r7, pc}
	...

000155d8 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   155d8:	b580      	push	{r7, lr}
   155da:	b082      	sub	sp, #8
   155dc:	af00      	add	r7, sp, #0
   155de:	6078      	str	r0, [r7, #4]
   155e0:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   155e2:	683b      	ldr	r3, [r7, #0]
   155e4:	4a05      	ldr	r2, [pc, #20]	; (155fc <WsfTimerStartMs+0x24>)
   155e6:	fba2 2303 	umull	r2, r3, r2, r3
   155ea:	08db      	lsrs	r3, r3, #3
   155ec:	4619      	mov	r1, r3
   155ee:	6878      	ldr	r0, [r7, #4]
   155f0:	f7ff ff98 	bl	15524 <wsfTimerInsert>
}
   155f4:	bf00      	nop
   155f6:	3708      	adds	r7, #8
   155f8:	46bd      	mov	sp, r7
   155fa:	bd80      	pop	{r7, pc}
   155fc:	cccccccd 	.word	0xcccccccd

00015600 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   15600:	b580      	push	{r7, lr}
   15602:	b082      	sub	sp, #8
   15604:	af00      	add	r7, sp, #0
   15606:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   15608:	f004 f956 	bl	198b8 <WsfTaskLock>

  wsfTimerRemove(pTimer);
   1560c:	6878      	ldr	r0, [r7, #4]
   1560e:	f7ff ff5f 	bl	154d0 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   15612:	f004 f957 	bl	198c4 <WsfTaskUnlock>
}
   15616:	bf00      	nop
   15618:	3708      	adds	r7, #8
   1561a:	46bd      	mov	sp, r7
   1561c:	bd80      	pop	{r7, pc}
	...

00015620 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   15620:	b580      	push	{r7, lr}
   15622:	b084      	sub	sp, #16
   15624:	af00      	add	r7, sp, #0
   15626:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   15628:	f004 f946 	bl	198b8 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1562c:	4b12      	ldr	r3, [pc, #72]	; (15678 <WsfTimerUpdate+0x58>)
   1562e:	681b      	ldr	r3, [r3, #0]
   15630:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   15632:	e017      	b.n	15664 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   15634:	68fb      	ldr	r3, [r7, #12]
   15636:	685a      	ldr	r2, [r3, #4]
   15638:	687b      	ldr	r3, [r7, #4]
   1563a:	429a      	cmp	r2, r3
   1563c:	d906      	bls.n	1564c <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	685a      	ldr	r2, [r3, #4]
   15642:	687b      	ldr	r3, [r7, #4]
   15644:	1ad2      	subs	r2, r2, r3
   15646:	68fb      	ldr	r3, [r7, #12]
   15648:	605a      	str	r2, [r3, #4]
   1564a:	e008      	b.n	1565e <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
   1564c:	68fb      	ldr	r3, [r7, #12]
   1564e:	2200      	movs	r2, #0
   15650:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   15652:	68fb      	ldr	r3, [r7, #12]
   15654:	7a1b      	ldrb	r3, [r3, #8]
   15656:	2102      	movs	r1, #2
   15658:	4618      	mov	r0, r3
   1565a:	f004 f971 	bl	19940 <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   1565e:	68fb      	ldr	r3, [r7, #12]
   15660:	681b      	ldr	r3, [r3, #0]
   15662:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   15664:	68fb      	ldr	r3, [r7, #12]
   15666:	2b00      	cmp	r3, #0
   15668:	d1e4      	bne.n	15634 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1566a:	f004 f92b 	bl	198c4 <WsfTaskUnlock>
}
   1566e:	bf00      	nop
   15670:	3710      	adds	r7, #16
   15672:	46bd      	mov	sp, r7
   15674:	bd80      	pop	{r7, pc}
   15676:	bf00      	nop
   15678:	10005bb0 	.word	0x10005bb0

0001567c <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   1567c:	b580      	push	{r7, lr}
   1567e:	b084      	sub	sp, #16
   15680:	af00      	add	r7, sp, #0
   15682:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   15684:	f004 f918 	bl	198b8 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   15688:	4b0b      	ldr	r3, [pc, #44]	; (156b8 <WsfTimerNextExpiration+0x3c>)
   1568a:	681b      	ldr	r3, [r3, #0]
   1568c:	2b00      	cmp	r3, #0
   1568e:	d105      	bne.n	1569c <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
   15690:	687b      	ldr	r3, [r7, #4]
   15692:	2200      	movs	r2, #0
   15694:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   15696:	2300      	movs	r3, #0
   15698:	60fb      	str	r3, [r7, #12]
   1569a:	e006      	b.n	156aa <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
   1569c:	687b      	ldr	r3, [r7, #4]
   1569e:	2201      	movs	r2, #1
   156a0:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   156a2:	4b05      	ldr	r3, [pc, #20]	; (156b8 <WsfTimerNextExpiration+0x3c>)
   156a4:	681b      	ldr	r3, [r3, #0]
   156a6:	685b      	ldr	r3, [r3, #4]
   156a8:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   156aa:	f004 f90b 	bl	198c4 <WsfTaskUnlock>

  return ticks;
   156ae:	68fb      	ldr	r3, [r7, #12]
}
   156b0:	4618      	mov	r0, r3
   156b2:	3710      	adds	r7, #16
   156b4:	46bd      	mov	sp, r7
   156b6:	bd80      	pop	{r7, pc}
   156b8:	10005bb0 	.word	0x10005bb0

000156bc <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   156bc:	b580      	push	{r7, lr}
   156be:	b084      	sub	sp, #16
   156c0:	af00      	add	r7, sp, #0
   156c2:	4603      	mov	r3, r0
   156c4:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   156c6:	2300      	movs	r3, #0
   156c8:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
   156ca:	f004 f8f5 	bl	198b8 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   156ce:	4b0e      	ldr	r3, [pc, #56]	; (15708 <WsfTimerServiceExpired+0x4c>)
   156d0:	681b      	ldr	r3, [r3, #0]
   156d2:	60bb      	str	r3, [r7, #8]
   156d4:	68bb      	ldr	r3, [r7, #8]
   156d6:	2b00      	cmp	r3, #0
   156d8:	d00f      	beq.n	156fa <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   156da:	68bb      	ldr	r3, [r7, #8]
   156dc:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   156de:	2b00      	cmp	r3, #0
   156e0:	d10b      	bne.n	156fa <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   156e2:	68fa      	ldr	r2, [r7, #12]
   156e4:	68b9      	ldr	r1, [r7, #8]
   156e6:	4808      	ldr	r0, [pc, #32]	; (15708 <WsfTimerServiceExpired+0x4c>)
   156e8:	f7ff fe9a 	bl	15420 <WsfQueueRemove>

    pElem->isStarted = FALSE;
   156ec:	68bb      	ldr	r3, [r7, #8]
   156ee:	2200      	movs	r2, #0
   156f0:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   156f2:	f004 f8e7 	bl	198c4 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   156f6:	68bb      	ldr	r3, [r7, #8]
   156f8:	e002      	b.n	15700 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   156fa:	f004 f8e3 	bl	198c4 <WsfTaskUnlock>

  return NULL;
   156fe:	2300      	movs	r3, #0
}
   15700:	4618      	mov	r0, r3
   15702:	3710      	adds	r7, #16
   15704:	46bd      	mov	sp, r7
   15706:	bd80      	pop	{r7, pc}
   15708:	10005bb0 	.word	0x10005bb0

0001570c <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   1570c:	b580      	push	{r7, lr}
   1570e:	b084      	sub	sp, #16
   15710:	af00      	add	r7, sp, #0
   15712:	4603      	mov	r3, r0
   15714:	460a      	mov	r2, r1
   15716:	80fb      	strh	r3, [r7, #6]
   15718:	4613      	mov	r3, r2
   1571a:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1571c:	88bb      	ldrh	r3, [r7, #4]
   1571e:	3303      	adds	r3, #3
   15720:	b29b      	uxth	r3, r3
   15722:	4618      	mov	r0, r3
   15724:	f7ff fd8d 	bl	15242 <WsfMsgAlloc>
   15728:	60f8      	str	r0, [r7, #12]
   1572a:	68fb      	ldr	r3, [r7, #12]
   1572c:	2b00      	cmp	r3, #0
   1572e:	d016      	beq.n	1575e <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   15730:	68fb      	ldr	r3, [r7, #12]
   15732:	1c5a      	adds	r2, r3, #1
   15734:	60fa      	str	r2, [r7, #12]
   15736:	88fa      	ldrh	r2, [r7, #6]
   15738:	b2d2      	uxtb	r2, r2
   1573a:	701a      	strb	r2, [r3, #0]
   1573c:	68fb      	ldr	r3, [r7, #12]
   1573e:	1c5a      	adds	r2, r3, #1
   15740:	60fa      	str	r2, [r7, #12]
   15742:	88fa      	ldrh	r2, [r7, #6]
   15744:	0a12      	lsrs	r2, r2, #8
   15746:	b292      	uxth	r2, r2
   15748:	b2d2      	uxtb	r2, r2
   1574a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   1574c:	68fb      	ldr	r3, [r7, #12]
   1574e:	1c5a      	adds	r2, r3, #1
   15750:	60fa      	str	r2, [r7, #12]
   15752:	88ba      	ldrh	r2, [r7, #4]
   15754:	b2d2      	uxtb	r2, r2
   15756:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   15758:	68fb      	ldr	r3, [r7, #12]
   1575a:	3b03      	subs	r3, #3
   1575c:	60fb      	str	r3, [r7, #12]
  }

  return p;
   1575e:	68fb      	ldr	r3, [r7, #12]
}
   15760:	4618      	mov	r0, r3
   15762:	3710      	adds	r7, #16
   15764:	46bd      	mov	sp, r7
   15766:	bd80      	pop	{r7, pc}

00015768 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   15768:	b580      	push	{r7, lr}
   1576a:	b084      	sub	sp, #16
   1576c:	af00      	add	r7, sp, #0
   1576e:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   15770:	687b      	ldr	r3, [r7, #4]
   15772:	2b00      	cmp	r3, #0
   15774:	d004      	beq.n	15780 <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15776:	687a      	ldr	r2, [r7, #4]
   15778:	2100      	movs	r1, #0
   1577a:	4817      	ldr	r0, [pc, #92]	; (157d8 <hciCmdSend+0x70>)
   1577c:	f7ff fd9d 	bl	152ba <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   15780:	4b16      	ldr	r3, [pc, #88]	; (157dc <hciCmdSend+0x74>)
   15782:	7e9b      	ldrb	r3, [r3, #26]
   15784:	2b00      	cmp	r3, #0
   15786:	d023      	beq.n	157d0 <hciCmdSend+0x68>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15788:	f107 030b 	add.w	r3, r7, #11
   1578c:	4619      	mov	r1, r3
   1578e:	4812      	ldr	r0, [pc, #72]	; (157d8 <hciCmdSend+0x70>)
   15790:	f7ff fda8 	bl	152e4 <WsfMsgDeq>
   15794:	60f8      	str	r0, [r7, #12]
   15796:	68fb      	ldr	r3, [r7, #12]
   15798:	2b00      	cmp	r3, #0
   1579a:	d019      	beq.n	157d0 <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   1579c:	4b0f      	ldr	r3, [pc, #60]	; (157dc <hciCmdSend+0x74>)
   1579e:	7e9b      	ldrb	r3, [r3, #26]
   157a0:	3b01      	subs	r3, #1
   157a2:	b2da      	uxtb	r2, r3
   157a4:	4b0d      	ldr	r3, [pc, #52]	; (157dc <hciCmdSend+0x74>)
   157a6:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   157a8:	68fb      	ldr	r3, [r7, #12]
   157aa:	781b      	ldrb	r3, [r3, #0]
   157ac:	b29a      	uxth	r2, r3
   157ae:	68fb      	ldr	r3, [r7, #12]
   157b0:	3301      	adds	r3, #1
   157b2:	781b      	ldrb	r3, [r3, #0]
   157b4:	b29b      	uxth	r3, r3
   157b6:	021b      	lsls	r3, r3, #8
   157b8:	b29b      	uxth	r3, r3
   157ba:	4413      	add	r3, r2
   157bc:	b29a      	uxth	r2, r3
   157be:	4b07      	ldr	r3, [pc, #28]	; (157dc <hciCmdSend+0x74>)
   157c0:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   157c2:	210a      	movs	r1, #10
   157c4:	4805      	ldr	r0, [pc, #20]	; (157dc <hciCmdSend+0x74>)
   157c6:	f7ff fef5 	bl	155b4 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   157ca:	68f8      	ldr	r0, [r7, #12]
   157cc:	f003 fae1 	bl	18d92 <hciTrSendCmd>
    }
  }
}
   157d0:	bf00      	nop
   157d2:	3710      	adds	r7, #16
   157d4:	46bd      	mov	sp, r7
   157d6:	bd80      	pop	{r7, pc}
   157d8:	10005bc8 	.word	0x10005bc8
   157dc:	10005bb8 	.word	0x10005bb8

000157e0 <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
   157e0:	b480      	push	{r7}
   157e2:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   157e4:	4b0a      	ldr	r3, [pc, #40]	; (15810 <hciCmdInit+0x30>)
   157e6:	2200      	movs	r2, #0
   157e8:	611a      	str	r2, [r3, #16]
   157ea:	4b09      	ldr	r3, [pc, #36]	; (15810 <hciCmdInit+0x30>)
   157ec:	2200      	movs	r2, #0
   157ee:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   157f0:	4b07      	ldr	r3, [pc, #28]	; (15810 <hciCmdInit+0x30>)
   157f2:	2201      	movs	r2, #1
   157f4:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   157f6:	4b06      	ldr	r3, [pc, #24]	; (15810 <hciCmdInit+0x30>)
   157f8:	2201      	movs	r2, #1
   157fa:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   157fc:	4b05      	ldr	r3, [pc, #20]	; (15814 <hciCmdInit+0x34>)
   157fe:	7e1a      	ldrb	r2, [r3, #24]
   15800:	4b03      	ldr	r3, [pc, #12]	; (15810 <hciCmdInit+0x30>)
   15802:	721a      	strb	r2, [r3, #8]
}
   15804:	bf00      	nop
   15806:	46bd      	mov	sp, r7
   15808:	f85d 7b04 	ldr.w	r7, [sp], #4
   1580c:	4770      	bx	lr
   1580e:	bf00      	nop
   15810:	10005bb8 	.word	0x10005bb8
   15814:	100051fc 	.word	0x100051fc

00015818 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   15818:	b580      	push	{r7, lr}
   1581a:	b082      	sub	sp, #8
   1581c:	af00      	add	r7, sp, #0
   1581e:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   15820:	f7ff f96c 	bl	14afc <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   15824:	2000      	movs	r0, #0
   15826:	f7ff f86f 	bl	14908 <HciDrvRadioBoot>
  DmDevReset();
   1582a:	f7fa fbc1 	bl	ffb0 <DmDevReset>
}
   1582e:	bf00      	nop
   15830:	3708      	adds	r7, #8
   15832:	46bd      	mov	sp, r7
   15834:	bd80      	pop	{r7, pc}
	...

00015838 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   15838:	b580      	push	{r7, lr}
   1583a:	b082      	sub	sp, #8
   1583c:	af00      	add	r7, sp, #0
   1583e:	4603      	mov	r3, r0
   15840:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   15842:	4806      	ldr	r0, [pc, #24]	; (1585c <hciCmdRecvCmpl+0x24>)
   15844:	f7ff fedc 	bl	15600 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   15848:	4b04      	ldr	r3, [pc, #16]	; (1585c <hciCmdRecvCmpl+0x24>)
   1584a:	2201      	movs	r2, #1
   1584c:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   1584e:	2000      	movs	r0, #0
   15850:	f7ff ff8a 	bl	15768 <hciCmdSend>
}
   15854:	bf00      	nop
   15856:	3708      	adds	r7, #8
   15858:	46bd      	mov	sp, r7
   1585a:	bd80      	pop	{r7, pc}
   1585c:	10005bb8 	.word	0x10005bb8

00015860 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   15860:	b580      	push	{r7, lr}
   15862:	b084      	sub	sp, #16
   15864:	af00      	add	r7, sp, #0
   15866:	4603      	mov	r3, r0
   15868:	460a      	mov	r2, r1
   1586a:	80fb      	strh	r3, [r7, #6]
   1586c:	4613      	mov	r3, r2
   1586e:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   15870:	2103      	movs	r1, #3
   15872:	f240 4006 	movw	r0, #1030	; 0x406
   15876:	f7ff ff49 	bl	1570c <hciCmdAlloc>
   1587a:	60f8      	str	r0, [r7, #12]
   1587c:	68fb      	ldr	r3, [r7, #12]
   1587e:	2b00      	cmp	r3, #0
   15880:	d018      	beq.n	158b4 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15882:	68fb      	ldr	r3, [r7, #12]
   15884:	3303      	adds	r3, #3
   15886:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15888:	68bb      	ldr	r3, [r7, #8]
   1588a:	1c5a      	adds	r2, r3, #1
   1588c:	60ba      	str	r2, [r7, #8]
   1588e:	88fa      	ldrh	r2, [r7, #6]
   15890:	b2d2      	uxtb	r2, r2
   15892:	701a      	strb	r2, [r3, #0]
   15894:	68bb      	ldr	r3, [r7, #8]
   15896:	1c5a      	adds	r2, r3, #1
   15898:	60ba      	str	r2, [r7, #8]
   1589a:	88fa      	ldrh	r2, [r7, #6]
   1589c:	0a12      	lsrs	r2, r2, #8
   1589e:	b292      	uxth	r2, r2
   158a0:	b2d2      	uxtb	r2, r2
   158a2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   158a4:	68bb      	ldr	r3, [r7, #8]
   158a6:	1c5a      	adds	r2, r3, #1
   158a8:	60ba      	str	r2, [r7, #8]
   158aa:	797a      	ldrb	r2, [r7, #5]
   158ac:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   158ae:	68f8      	ldr	r0, [r7, #12]
   158b0:	f7ff ff5a 	bl	15768 <hciCmdSend>
  }
}
   158b4:	bf00      	nop
   158b6:	3710      	adds	r7, #16
   158b8:	46bd      	mov	sp, r7
   158ba:	bd80      	pop	{r7, pc}

000158bc <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   158bc:	b580      	push	{r7, lr}
   158be:	b084      	sub	sp, #16
   158c0:	af00      	add	r7, sp, #0
   158c2:	4603      	mov	r3, r0
   158c4:	6039      	str	r1, [r7, #0]
   158c6:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   158c8:	2107      	movs	r1, #7
   158ca:	f242 0011 	movw	r0, #8209	; 0x2011
   158ce:	f7ff ff1d 	bl	1570c <hciCmdAlloc>
   158d2:	60f8      	str	r0, [r7, #12]
   158d4:	68fb      	ldr	r3, [r7, #12]
   158d6:	2b00      	cmp	r3, #0
   158d8:	d011      	beq.n	158fe <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   158da:	68fb      	ldr	r3, [r7, #12]
   158dc:	3303      	adds	r3, #3
   158de:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   158e0:	68bb      	ldr	r3, [r7, #8]
   158e2:	1c5a      	adds	r2, r3, #1
   158e4:	60ba      	str	r2, [r7, #8]
   158e6:	79fa      	ldrb	r2, [r7, #7]
   158e8:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   158ea:	6839      	ldr	r1, [r7, #0]
   158ec:	68b8      	ldr	r0, [r7, #8]
   158ee:	f7fe fe4b 	bl	14588 <BdaCpy>
   158f2:	68bb      	ldr	r3, [r7, #8]
   158f4:	3306      	adds	r3, #6
   158f6:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   158f8:	68f8      	ldr	r0, [r7, #12]
   158fa:	f7ff ff35 	bl	15768 <hciCmdSend>
  }
}
   158fe:	bf00      	nop
   15900:	3710      	adds	r7, #16
   15902:	46bd      	mov	sp, r7
   15904:	bd80      	pop	{r7, pc}

00015906 <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   15906:	b580      	push	{r7, lr}
   15908:	b082      	sub	sp, #8
   1590a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   1590c:	2100      	movs	r1, #0
   1590e:	f242 0010 	movw	r0, #8208	; 0x2010
   15912:	f7ff fefb 	bl	1570c <hciCmdAlloc>
   15916:	6078      	str	r0, [r7, #4]
   15918:	687b      	ldr	r3, [r7, #4]
   1591a:	2b00      	cmp	r3, #0
   1591c:	d002      	beq.n	15924 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1591e:	6878      	ldr	r0, [r7, #4]
   15920:	f7ff ff22 	bl	15768 <hciCmdSend>
  }
}
   15924:	bf00      	nop
   15926:	3708      	adds	r7, #8
   15928:	46bd      	mov	sp, r7
   1592a:	bd80      	pop	{r7, pc}

0001592c <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1592c:	b580      	push	{r7, lr}
   1592e:	b084      	sub	sp, #16
   15930:	af00      	add	r7, sp, #0
   15932:	4603      	mov	r3, r0
   15934:	6039      	str	r1, [r7, #0]
   15936:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   15938:	210e      	movs	r1, #14
   1593a:	f242 0013 	movw	r0, #8211	; 0x2013
   1593e:	f7ff fee5 	bl	1570c <hciCmdAlloc>
   15942:	60f8      	str	r0, [r7, #12]
   15944:	68fb      	ldr	r3, [r7, #12]
   15946:	2b00      	cmp	r3, #0
   15948:	d073      	beq.n	15a32 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1594a:	68fb      	ldr	r3, [r7, #12]
   1594c:	3303      	adds	r3, #3
   1594e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15950:	68bb      	ldr	r3, [r7, #8]
   15952:	1c5a      	adds	r2, r3, #1
   15954:	60ba      	str	r2, [r7, #8]
   15956:	88fa      	ldrh	r2, [r7, #6]
   15958:	b2d2      	uxtb	r2, r2
   1595a:	701a      	strb	r2, [r3, #0]
   1595c:	68bb      	ldr	r3, [r7, #8]
   1595e:	1c5a      	adds	r2, r3, #1
   15960:	60ba      	str	r2, [r7, #8]
   15962:	88fa      	ldrh	r2, [r7, #6]
   15964:	0a12      	lsrs	r2, r2, #8
   15966:	b292      	uxth	r2, r2
   15968:	b2d2      	uxtb	r2, r2
   1596a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   1596c:	68bb      	ldr	r3, [r7, #8]
   1596e:	1c5a      	adds	r2, r3, #1
   15970:	60ba      	str	r2, [r7, #8]
   15972:	683a      	ldr	r2, [r7, #0]
   15974:	8812      	ldrh	r2, [r2, #0]
   15976:	b2d2      	uxtb	r2, r2
   15978:	701a      	strb	r2, [r3, #0]
   1597a:	68bb      	ldr	r3, [r7, #8]
   1597c:	1c5a      	adds	r2, r3, #1
   1597e:	60ba      	str	r2, [r7, #8]
   15980:	683a      	ldr	r2, [r7, #0]
   15982:	8812      	ldrh	r2, [r2, #0]
   15984:	0a12      	lsrs	r2, r2, #8
   15986:	b292      	uxth	r2, r2
   15988:	b2d2      	uxtb	r2, r2
   1598a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   1598c:	68bb      	ldr	r3, [r7, #8]
   1598e:	1c5a      	adds	r2, r3, #1
   15990:	60ba      	str	r2, [r7, #8]
   15992:	683a      	ldr	r2, [r7, #0]
   15994:	8852      	ldrh	r2, [r2, #2]
   15996:	b2d2      	uxtb	r2, r2
   15998:	701a      	strb	r2, [r3, #0]
   1599a:	68bb      	ldr	r3, [r7, #8]
   1599c:	1c5a      	adds	r2, r3, #1
   1599e:	60ba      	str	r2, [r7, #8]
   159a0:	683a      	ldr	r2, [r7, #0]
   159a2:	8852      	ldrh	r2, [r2, #2]
   159a4:	0a12      	lsrs	r2, r2, #8
   159a6:	b292      	uxth	r2, r2
   159a8:	b2d2      	uxtb	r2, r2
   159aa:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   159ac:	68bb      	ldr	r3, [r7, #8]
   159ae:	1c5a      	adds	r2, r3, #1
   159b0:	60ba      	str	r2, [r7, #8]
   159b2:	683a      	ldr	r2, [r7, #0]
   159b4:	8892      	ldrh	r2, [r2, #4]
   159b6:	b2d2      	uxtb	r2, r2
   159b8:	701a      	strb	r2, [r3, #0]
   159ba:	68bb      	ldr	r3, [r7, #8]
   159bc:	1c5a      	adds	r2, r3, #1
   159be:	60ba      	str	r2, [r7, #8]
   159c0:	683a      	ldr	r2, [r7, #0]
   159c2:	8892      	ldrh	r2, [r2, #4]
   159c4:	0a12      	lsrs	r2, r2, #8
   159c6:	b292      	uxth	r2, r2
   159c8:	b2d2      	uxtb	r2, r2
   159ca:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   159cc:	68bb      	ldr	r3, [r7, #8]
   159ce:	1c5a      	adds	r2, r3, #1
   159d0:	60ba      	str	r2, [r7, #8]
   159d2:	683a      	ldr	r2, [r7, #0]
   159d4:	88d2      	ldrh	r2, [r2, #6]
   159d6:	b2d2      	uxtb	r2, r2
   159d8:	701a      	strb	r2, [r3, #0]
   159da:	68bb      	ldr	r3, [r7, #8]
   159dc:	1c5a      	adds	r2, r3, #1
   159de:	60ba      	str	r2, [r7, #8]
   159e0:	683a      	ldr	r2, [r7, #0]
   159e2:	88d2      	ldrh	r2, [r2, #6]
   159e4:	0a12      	lsrs	r2, r2, #8
   159e6:	b292      	uxth	r2, r2
   159e8:	b2d2      	uxtb	r2, r2
   159ea:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   159ec:	68bb      	ldr	r3, [r7, #8]
   159ee:	1c5a      	adds	r2, r3, #1
   159f0:	60ba      	str	r2, [r7, #8]
   159f2:	683a      	ldr	r2, [r7, #0]
   159f4:	8912      	ldrh	r2, [r2, #8]
   159f6:	b2d2      	uxtb	r2, r2
   159f8:	701a      	strb	r2, [r3, #0]
   159fa:	68bb      	ldr	r3, [r7, #8]
   159fc:	1c5a      	adds	r2, r3, #1
   159fe:	60ba      	str	r2, [r7, #8]
   15a00:	683a      	ldr	r2, [r7, #0]
   15a02:	8912      	ldrh	r2, [r2, #8]
   15a04:	0a12      	lsrs	r2, r2, #8
   15a06:	b292      	uxth	r2, r2
   15a08:	b2d2      	uxtb	r2, r2
   15a0a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   15a0c:	68bb      	ldr	r3, [r7, #8]
   15a0e:	1c5a      	adds	r2, r3, #1
   15a10:	60ba      	str	r2, [r7, #8]
   15a12:	683a      	ldr	r2, [r7, #0]
   15a14:	8952      	ldrh	r2, [r2, #10]
   15a16:	b2d2      	uxtb	r2, r2
   15a18:	701a      	strb	r2, [r3, #0]
   15a1a:	68bb      	ldr	r3, [r7, #8]
   15a1c:	1c5a      	adds	r2, r3, #1
   15a1e:	60ba      	str	r2, [r7, #8]
   15a20:	683a      	ldr	r2, [r7, #0]
   15a22:	8952      	ldrh	r2, [r2, #10]
   15a24:	0a12      	lsrs	r2, r2, #8
   15a26:	b292      	uxth	r2, r2
   15a28:	b2d2      	uxtb	r2, r2
   15a2a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15a2c:	68f8      	ldr	r0, [r7, #12]
   15a2e:	f7ff fe9b 	bl	15768 <hciCmdSend>
  }
}
   15a32:	bf00      	nop
   15a34:	3710      	adds	r7, #16
   15a36:	46bd      	mov	sp, r7
   15a38:	bd80      	pop	{r7, pc}

00015a3a <HciLeCreateConnCancelCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeCreateConnCancelCmd(void)
{
   15a3a:	b580      	push	{r7, lr}
   15a3c:	b082      	sub	sp, #8
   15a3e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN_CANCEL, HCI_LEN_LE_CREATE_CONN_CANCEL)) != NULL)
   15a40:	2100      	movs	r1, #0
   15a42:	f242 000e 	movw	r0, #8206	; 0x200e
   15a46:	f7ff fe61 	bl	1570c <hciCmdAlloc>
   15a4a:	6078      	str	r0, [r7, #4]
   15a4c:	687b      	ldr	r3, [r7, #4]
   15a4e:	2b00      	cmp	r3, #0
   15a50:	d002      	beq.n	15a58 <HciLeCreateConnCancelCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15a52:	6878      	ldr	r0, [r7, #4]
   15a54:	f7ff fe88 	bl	15768 <hciCmdSend>
  }
}
   15a58:	bf00      	nop
   15a5a:	3708      	adds	r7, #8
   15a5c:	46bd      	mov	sp, r7
   15a5e:	bd80      	pop	{r7, pc}

00015a60 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   15a60:	b590      	push	{r4, r7, lr}
   15a62:	b085      	sub	sp, #20
   15a64:	af00      	add	r7, sp, #0
   15a66:	4604      	mov	r4, r0
   15a68:	4608      	mov	r0, r1
   15a6a:	4611      	mov	r1, r2
   15a6c:	461a      	mov	r2, r3
   15a6e:	4623      	mov	r3, r4
   15a70:	80fb      	strh	r3, [r7, #6]
   15a72:	4603      	mov	r3, r0
   15a74:	80bb      	strh	r3, [r7, #4]
   15a76:	460b      	mov	r3, r1
   15a78:	807b      	strh	r3, [r7, #2]
   15a7a:	4613      	mov	r3, r2
   15a7c:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   15a7e:	210e      	movs	r1, #14
   15a80:	f242 0020 	movw	r0, #8224	; 0x2020
   15a84:	f7ff fe42 	bl	1570c <hciCmdAlloc>
   15a88:	60f8      	str	r0, [r7, #12]
   15a8a:	68fb      	ldr	r3, [r7, #12]
   15a8c:	2b00      	cmp	r3, #0
   15a8e:	d067      	beq.n	15b60 <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15a90:	68fb      	ldr	r3, [r7, #12]
   15a92:	3303      	adds	r3, #3
   15a94:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15a96:	68bb      	ldr	r3, [r7, #8]
   15a98:	1c5a      	adds	r2, r3, #1
   15a9a:	60ba      	str	r2, [r7, #8]
   15a9c:	88fa      	ldrh	r2, [r7, #6]
   15a9e:	b2d2      	uxtb	r2, r2
   15aa0:	701a      	strb	r2, [r3, #0]
   15aa2:	68bb      	ldr	r3, [r7, #8]
   15aa4:	1c5a      	adds	r2, r3, #1
   15aa6:	60ba      	str	r2, [r7, #8]
   15aa8:	88fa      	ldrh	r2, [r7, #6]
   15aaa:	0a12      	lsrs	r2, r2, #8
   15aac:	b292      	uxth	r2, r2
   15aae:	b2d2      	uxtb	r2, r2
   15ab0:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   15ab2:	68bb      	ldr	r3, [r7, #8]
   15ab4:	1c5a      	adds	r2, r3, #1
   15ab6:	60ba      	str	r2, [r7, #8]
   15ab8:	88ba      	ldrh	r2, [r7, #4]
   15aba:	b2d2      	uxtb	r2, r2
   15abc:	701a      	strb	r2, [r3, #0]
   15abe:	68bb      	ldr	r3, [r7, #8]
   15ac0:	1c5a      	adds	r2, r3, #1
   15ac2:	60ba      	str	r2, [r7, #8]
   15ac4:	88ba      	ldrh	r2, [r7, #4]
   15ac6:	0a12      	lsrs	r2, r2, #8
   15ac8:	b292      	uxth	r2, r2
   15aca:	b2d2      	uxtb	r2, r2
   15acc:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   15ace:	68bb      	ldr	r3, [r7, #8]
   15ad0:	1c5a      	adds	r2, r3, #1
   15ad2:	60ba      	str	r2, [r7, #8]
   15ad4:	887a      	ldrh	r2, [r7, #2]
   15ad6:	b2d2      	uxtb	r2, r2
   15ad8:	701a      	strb	r2, [r3, #0]
   15ada:	68bb      	ldr	r3, [r7, #8]
   15adc:	1c5a      	adds	r2, r3, #1
   15ade:	60ba      	str	r2, [r7, #8]
   15ae0:	887a      	ldrh	r2, [r7, #2]
   15ae2:	0a12      	lsrs	r2, r2, #8
   15ae4:	b292      	uxth	r2, r2
   15ae6:	b2d2      	uxtb	r2, r2
   15ae8:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   15aea:	68bb      	ldr	r3, [r7, #8]
   15aec:	1c5a      	adds	r2, r3, #1
   15aee:	60ba      	str	r2, [r7, #8]
   15af0:	883a      	ldrh	r2, [r7, #0]
   15af2:	b2d2      	uxtb	r2, r2
   15af4:	701a      	strb	r2, [r3, #0]
   15af6:	68bb      	ldr	r3, [r7, #8]
   15af8:	1c5a      	adds	r2, r3, #1
   15afa:	60ba      	str	r2, [r7, #8]
   15afc:	883a      	ldrh	r2, [r7, #0]
   15afe:	0a12      	lsrs	r2, r2, #8
   15b00:	b292      	uxth	r2, r2
   15b02:	b2d2      	uxtb	r2, r2
   15b04:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   15b06:	68bb      	ldr	r3, [r7, #8]
   15b08:	1c5a      	adds	r2, r3, #1
   15b0a:	60ba      	str	r2, [r7, #8]
   15b0c:	8c3a      	ldrh	r2, [r7, #32]
   15b0e:	b2d2      	uxtb	r2, r2
   15b10:	701a      	strb	r2, [r3, #0]
   15b12:	68bb      	ldr	r3, [r7, #8]
   15b14:	1c5a      	adds	r2, r3, #1
   15b16:	60ba      	str	r2, [r7, #8]
   15b18:	8c3a      	ldrh	r2, [r7, #32]
   15b1a:	0a12      	lsrs	r2, r2, #8
   15b1c:	b292      	uxth	r2, r2
   15b1e:	b2d2      	uxtb	r2, r2
   15b20:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   15b22:	68bb      	ldr	r3, [r7, #8]
   15b24:	1c5a      	adds	r2, r3, #1
   15b26:	60ba      	str	r2, [r7, #8]
   15b28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   15b2a:	b2d2      	uxtb	r2, r2
   15b2c:	701a      	strb	r2, [r3, #0]
   15b2e:	68bb      	ldr	r3, [r7, #8]
   15b30:	1c5a      	adds	r2, r3, #1
   15b32:	60ba      	str	r2, [r7, #8]
   15b34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   15b36:	0a12      	lsrs	r2, r2, #8
   15b38:	b292      	uxth	r2, r2
   15b3a:	b2d2      	uxtb	r2, r2
   15b3c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   15b3e:	68bb      	ldr	r3, [r7, #8]
   15b40:	1c5a      	adds	r2, r3, #1
   15b42:	60ba      	str	r2, [r7, #8]
   15b44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   15b46:	b2d2      	uxtb	r2, r2
   15b48:	701a      	strb	r2, [r3, #0]
   15b4a:	68bb      	ldr	r3, [r7, #8]
   15b4c:	1c5a      	adds	r2, r3, #1
   15b4e:	60ba      	str	r2, [r7, #8]
   15b50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   15b52:	0a12      	lsrs	r2, r2, #8
   15b54:	b292      	uxth	r2, r2
   15b56:	b2d2      	uxtb	r2, r2
   15b58:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15b5a:	68f8      	ldr	r0, [r7, #12]
   15b5c:	f7ff fe04 	bl	15768 <hciCmdSend>
  }
}
   15b60:	bf00      	nop
   15b62:	3714      	adds	r7, #20
   15b64:	46bd      	mov	sp, r7
   15b66:	bd90      	pop	{r4, r7, pc}

00015b68 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   15b68:	b580      	push	{r7, lr}
   15b6a:	b084      	sub	sp, #16
   15b6c:	af00      	add	r7, sp, #0
   15b6e:	4603      	mov	r3, r0
   15b70:	460a      	mov	r2, r1
   15b72:	80fb      	strh	r3, [r7, #6]
   15b74:	4613      	mov	r3, r2
   15b76:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   15b78:	2103      	movs	r1, #3
   15b7a:	f242 0021 	movw	r0, #8225	; 0x2021
   15b7e:	f7ff fdc5 	bl	1570c <hciCmdAlloc>
   15b82:	60f8      	str	r0, [r7, #12]
   15b84:	68fb      	ldr	r3, [r7, #12]
   15b86:	2b00      	cmp	r3, #0
   15b88:	d018      	beq.n	15bbc <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15b8a:	68fb      	ldr	r3, [r7, #12]
   15b8c:	3303      	adds	r3, #3
   15b8e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15b90:	68bb      	ldr	r3, [r7, #8]
   15b92:	1c5a      	adds	r2, r3, #1
   15b94:	60ba      	str	r2, [r7, #8]
   15b96:	88fa      	ldrh	r2, [r7, #6]
   15b98:	b2d2      	uxtb	r2, r2
   15b9a:	701a      	strb	r2, [r3, #0]
   15b9c:	68bb      	ldr	r3, [r7, #8]
   15b9e:	1c5a      	adds	r2, r3, #1
   15ba0:	60ba      	str	r2, [r7, #8]
   15ba2:	88fa      	ldrh	r2, [r7, #6]
   15ba4:	0a12      	lsrs	r2, r2, #8
   15ba6:	b292      	uxth	r2, r2
   15ba8:	b2d2      	uxtb	r2, r2
   15baa:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   15bac:	68bb      	ldr	r3, [r7, #8]
   15bae:	1c5a      	adds	r2, r3, #1
   15bb0:	60ba      	str	r2, [r7, #8]
   15bb2:	797a      	ldrb	r2, [r7, #5]
   15bb4:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15bb6:	68f8      	ldr	r0, [r7, #12]
   15bb8:	f7ff fdd6 	bl	15768 <hciCmdSend>
  }
}
   15bbc:	bf00      	nop
   15bbe:	3710      	adds	r7, #16
   15bc0:	46bd      	mov	sp, r7
   15bc2:	bd80      	pop	{r7, pc}

00015bc4 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   15bc4:	b580      	push	{r7, lr}
   15bc6:	b084      	sub	sp, #16
   15bc8:	af00      	add	r7, sp, #0
   15bca:	4603      	mov	r3, r0
   15bcc:	80fb      	strh	r3, [r7, #6]
   15bce:	460b      	mov	r3, r1
   15bd0:	80bb      	strh	r3, [r7, #4]
   15bd2:	4613      	mov	r3, r2
   15bd4:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   15bd6:	2106      	movs	r1, #6
   15bd8:	f242 0022 	movw	r0, #8226	; 0x2022
   15bdc:	f7ff fd96 	bl	1570c <hciCmdAlloc>
   15be0:	60f8      	str	r0, [r7, #12]
   15be2:	68fb      	ldr	r3, [r7, #12]
   15be4:	2b00      	cmp	r3, #0
   15be6:	d02f      	beq.n	15c48 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15be8:	68fb      	ldr	r3, [r7, #12]
   15bea:	3303      	adds	r3, #3
   15bec:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15bee:	68bb      	ldr	r3, [r7, #8]
   15bf0:	1c5a      	adds	r2, r3, #1
   15bf2:	60ba      	str	r2, [r7, #8]
   15bf4:	88fa      	ldrh	r2, [r7, #6]
   15bf6:	b2d2      	uxtb	r2, r2
   15bf8:	701a      	strb	r2, [r3, #0]
   15bfa:	68bb      	ldr	r3, [r7, #8]
   15bfc:	1c5a      	adds	r2, r3, #1
   15bfe:	60ba      	str	r2, [r7, #8]
   15c00:	88fa      	ldrh	r2, [r7, #6]
   15c02:	0a12      	lsrs	r2, r2, #8
   15c04:	b292      	uxth	r2, r2
   15c06:	b2d2      	uxtb	r2, r2
   15c08:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   15c0a:	68bb      	ldr	r3, [r7, #8]
   15c0c:	1c5a      	adds	r2, r3, #1
   15c0e:	60ba      	str	r2, [r7, #8]
   15c10:	88ba      	ldrh	r2, [r7, #4]
   15c12:	b2d2      	uxtb	r2, r2
   15c14:	701a      	strb	r2, [r3, #0]
   15c16:	68bb      	ldr	r3, [r7, #8]
   15c18:	1c5a      	adds	r2, r3, #1
   15c1a:	60ba      	str	r2, [r7, #8]
   15c1c:	88ba      	ldrh	r2, [r7, #4]
   15c1e:	0a12      	lsrs	r2, r2, #8
   15c20:	b292      	uxth	r2, r2
   15c22:	b2d2      	uxtb	r2, r2
   15c24:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   15c26:	68bb      	ldr	r3, [r7, #8]
   15c28:	1c5a      	adds	r2, r3, #1
   15c2a:	60ba      	str	r2, [r7, #8]
   15c2c:	887a      	ldrh	r2, [r7, #2]
   15c2e:	b2d2      	uxtb	r2, r2
   15c30:	701a      	strb	r2, [r3, #0]
   15c32:	68bb      	ldr	r3, [r7, #8]
   15c34:	1c5a      	adds	r2, r3, #1
   15c36:	60ba      	str	r2, [r7, #8]
   15c38:	887a      	ldrh	r2, [r7, #2]
   15c3a:	0a12      	lsrs	r2, r2, #8
   15c3c:	b292      	uxth	r2, r2
   15c3e:	b2d2      	uxtb	r2, r2
   15c40:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15c42:	68f8      	ldr	r0, [r7, #12]
   15c44:	f7ff fd90 	bl	15768 <hciCmdSend>
  }
}
   15c48:	bf00      	nop
   15c4a:	3710      	adds	r7, #16
   15c4c:	46bd      	mov	sp, r7
   15c4e:	bd80      	pop	{r7, pc}

00015c50 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   15c50:	b580      	push	{r7, lr}
   15c52:	b084      	sub	sp, #16
   15c54:	af00      	add	r7, sp, #0
   15c56:	4603      	mov	r3, r0
   15c58:	460a      	mov	r2, r1
   15c5a:	80fb      	strh	r3, [r7, #6]
   15c5c:	4613      	mov	r3, r2
   15c5e:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   15c60:	2104      	movs	r1, #4
   15c62:	f242 0024 	movw	r0, #8228	; 0x2024
   15c66:	f7ff fd51 	bl	1570c <hciCmdAlloc>
   15c6a:	60f8      	str	r0, [r7, #12]
   15c6c:	68fb      	ldr	r3, [r7, #12]
   15c6e:	2b00      	cmp	r3, #0
   15c70:	d021      	beq.n	15cb6 <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15c72:	68fb      	ldr	r3, [r7, #12]
   15c74:	3303      	adds	r3, #3
   15c76:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   15c78:	68bb      	ldr	r3, [r7, #8]
   15c7a:	1c5a      	adds	r2, r3, #1
   15c7c:	60ba      	str	r2, [r7, #8]
   15c7e:	88fa      	ldrh	r2, [r7, #6]
   15c80:	b2d2      	uxtb	r2, r2
   15c82:	701a      	strb	r2, [r3, #0]
   15c84:	68bb      	ldr	r3, [r7, #8]
   15c86:	1c5a      	adds	r2, r3, #1
   15c88:	60ba      	str	r2, [r7, #8]
   15c8a:	88fa      	ldrh	r2, [r7, #6]
   15c8c:	0a12      	lsrs	r2, r2, #8
   15c8e:	b292      	uxth	r2, r2
   15c90:	b2d2      	uxtb	r2, r2
   15c92:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   15c94:	68bb      	ldr	r3, [r7, #8]
   15c96:	1c5a      	adds	r2, r3, #1
   15c98:	60ba      	str	r2, [r7, #8]
   15c9a:	88ba      	ldrh	r2, [r7, #4]
   15c9c:	b2d2      	uxtb	r2, r2
   15c9e:	701a      	strb	r2, [r3, #0]
   15ca0:	68bb      	ldr	r3, [r7, #8]
   15ca2:	1c5a      	adds	r2, r3, #1
   15ca4:	60ba      	str	r2, [r7, #8]
   15ca6:	88ba      	ldrh	r2, [r7, #4]
   15ca8:	0a12      	lsrs	r2, r2, #8
   15caa:	b292      	uxth	r2, r2
   15cac:	b2d2      	uxtb	r2, r2
   15cae:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15cb0:	68f8      	ldr	r0, [r7, #12]
   15cb2:	f7ff fd59 	bl	15768 <hciCmdSend>
  }
}
   15cb6:	bf00      	nop
   15cb8:	3710      	adds	r7, #16
   15cba:	46bd      	mov	sp, r7
   15cbc:	bd80      	pop	{r7, pc}

00015cbe <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
   15cbe:	b580      	push	{r7, lr}
   15cc0:	b082      	sub	sp, #8
   15cc2:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
   15cc4:	2100      	movs	r1, #0
   15cc6:	f242 0025 	movw	r0, #8229	; 0x2025
   15cca:	f7ff fd1f 	bl	1570c <hciCmdAlloc>
   15cce:	6078      	str	r0, [r7, #4]
   15cd0:	687b      	ldr	r3, [r7, #4]
   15cd2:	2b00      	cmp	r3, #0
   15cd4:	d002      	beq.n	15cdc <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
   15cd6:	6878      	ldr	r0, [r7, #4]
   15cd8:	f7ff fd46 	bl	15768 <hciCmdSend>
  }
}
   15cdc:	bf00      	nop
   15cde:	3708      	adds	r7, #8
   15ce0:	46bd      	mov	sp, r7
   15ce2:	bd80      	pop	{r7, pc}

00015ce4 <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
   15ce4:	b580      	push	{r7, lr}
   15ce6:	b084      	sub	sp, #16
   15ce8:	af00      	add	r7, sp, #0
   15cea:	6078      	str	r0, [r7, #4]
   15cec:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
   15cee:	2140      	movs	r1, #64	; 0x40
   15cf0:	f242 0026 	movw	r0, #8230	; 0x2026
   15cf4:	f7ff fd0a 	bl	1570c <hciCmdAlloc>
   15cf8:	60f8      	str	r0, [r7, #12]
   15cfa:	68fb      	ldr	r3, [r7, #12]
   15cfc:	2b00      	cmp	r3, #0
   15cfe:	d011      	beq.n	15d24 <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15d00:	68fb      	ldr	r3, [r7, #12]
   15d02:	3303      	adds	r3, #3
   15d04:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
   15d06:	2220      	movs	r2, #32
   15d08:	6879      	ldr	r1, [r7, #4]
   15d0a:	68b8      	ldr	r0, [r7, #8]
   15d0c:	f7f6 fa28 	bl	c160 <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
   15d10:	68bb      	ldr	r3, [r7, #8]
   15d12:	3320      	adds	r3, #32
   15d14:	2220      	movs	r2, #32
   15d16:	6839      	ldr	r1, [r7, #0]
   15d18:	4618      	mov	r0, r3
   15d1a:	f7f6 fa21 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   15d1e:	68f8      	ldr	r0, [r7, #12]
   15d20:	f7ff fd22 	bl	15768 <hciCmdSend>
  }
}
   15d24:	bf00      	nop
   15d26:	3710      	adds	r7, #16
   15d28:	46bd      	mov	sp, r7
   15d2a:	bd80      	pop	{r7, pc}

00015d2c <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   15d2c:	b580      	push	{r7, lr}
   15d2e:	b082      	sub	sp, #8
   15d30:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   15d32:	2100      	movs	r1, #0
   15d34:	f242 002f 	movw	r0, #8239	; 0x202f
   15d38:	f7ff fce8 	bl	1570c <hciCmdAlloc>
   15d3c:	6078      	str	r0, [r7, #4]
   15d3e:	687b      	ldr	r3, [r7, #4]
   15d40:	2b00      	cmp	r3, #0
   15d42:	d002      	beq.n	15d4a <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
   15d44:	6878      	ldr	r0, [r7, #4]
   15d46:	f7ff fd0f 	bl	15768 <hciCmdSend>
  }
}
   15d4a:	bf00      	nop
   15d4c:	3708      	adds	r7, #8
   15d4e:	46bd      	mov	sp, r7
   15d50:	bd80      	pop	{r7, pc}

00015d52 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   15d52:	b580      	push	{r7, lr}
   15d54:	b084      	sub	sp, #16
   15d56:	af00      	add	r7, sp, #0
   15d58:	6078      	str	r0, [r7, #4]
   15d5a:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   15d5c:	2120      	movs	r1, #32
   15d5e:	f242 0017 	movw	r0, #8215	; 0x2017
   15d62:	f7ff fcd3 	bl	1570c <hciCmdAlloc>
   15d66:	60f8      	str	r0, [r7, #12]
   15d68:	68fb      	ldr	r3, [r7, #12]
   15d6a:	2b00      	cmp	r3, #0
   15d6c:	d012      	beq.n	15d94 <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15d6e:	68fb      	ldr	r3, [r7, #12]
   15d70:	3303      	adds	r3, #3
   15d72:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   15d74:	2210      	movs	r2, #16
   15d76:	6879      	ldr	r1, [r7, #4]
   15d78:	68b8      	ldr	r0, [r7, #8]
   15d7a:	f7f6 f9f1 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   15d7e:	68bb      	ldr	r3, [r7, #8]
   15d80:	3310      	adds	r3, #16
   15d82:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   15d84:	2210      	movs	r2, #16
   15d86:	6839      	ldr	r1, [r7, #0]
   15d88:	68b8      	ldr	r0, [r7, #8]
   15d8a:	f7f6 f9e9 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   15d8e:	68f8      	ldr	r0, [r7, #12]
   15d90:	f7ff fcea 	bl	15768 <hciCmdSend>
  }
}
   15d94:	bf00      	nop
   15d96:	3710      	adds	r7, #16
   15d98:	46bd      	mov	sp, r7
   15d9a:	bd80      	pop	{r7, pc}

00015d9c <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   15d9c:	b580      	push	{r7, lr}
   15d9e:	b084      	sub	sp, #16
   15da0:	af00      	add	r7, sp, #0
   15da2:	4603      	mov	r3, r0
   15da4:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   15da6:	2102      	movs	r1, #2
   15da8:	f242 001b 	movw	r0, #8219	; 0x201b
   15dac:	f7ff fcae 	bl	1570c <hciCmdAlloc>
   15db0:	60f8      	str	r0, [r7, #12]
   15db2:	68fb      	ldr	r3, [r7, #12]
   15db4:	2b00      	cmp	r3, #0
   15db6:	d013      	beq.n	15de0 <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15db8:	68fb      	ldr	r3, [r7, #12]
   15dba:	3303      	adds	r3, #3
   15dbc:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15dbe:	68bb      	ldr	r3, [r7, #8]
   15dc0:	1c5a      	adds	r2, r3, #1
   15dc2:	60ba      	str	r2, [r7, #8]
   15dc4:	88fa      	ldrh	r2, [r7, #6]
   15dc6:	b2d2      	uxtb	r2, r2
   15dc8:	701a      	strb	r2, [r3, #0]
   15dca:	68bb      	ldr	r3, [r7, #8]
   15dcc:	1c5a      	adds	r2, r3, #1
   15dce:	60ba      	str	r2, [r7, #8]
   15dd0:	88fa      	ldrh	r2, [r7, #6]
   15dd2:	0a12      	lsrs	r2, r2, #8
   15dd4:	b292      	uxth	r2, r2
   15dd6:	b2d2      	uxtb	r2, r2
   15dd8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15dda:	68f8      	ldr	r0, [r7, #12]
   15ddc:	f7ff fcc4 	bl	15768 <hciCmdSend>
  }
}
   15de0:	bf00      	nop
   15de2:	3710      	adds	r7, #16
   15de4:	46bd      	mov	sp, r7
   15de6:	bd80      	pop	{r7, pc}

00015de8 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   15de8:	b580      	push	{r7, lr}
   15dea:	b084      	sub	sp, #16
   15dec:	af00      	add	r7, sp, #0
   15dee:	4603      	mov	r3, r0
   15df0:	6039      	str	r1, [r7, #0]
   15df2:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   15df4:	2112      	movs	r1, #18
   15df6:	f242 001a 	movw	r0, #8218	; 0x201a
   15dfa:	f7ff fc87 	bl	1570c <hciCmdAlloc>
   15dfe:	60f8      	str	r0, [r7, #12]
   15e00:	68fb      	ldr	r3, [r7, #12]
   15e02:	2b00      	cmp	r3, #0
   15e04:	d018      	beq.n	15e38 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15e06:	68fb      	ldr	r3, [r7, #12]
   15e08:	3303      	adds	r3, #3
   15e0a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15e0c:	68bb      	ldr	r3, [r7, #8]
   15e0e:	1c5a      	adds	r2, r3, #1
   15e10:	60ba      	str	r2, [r7, #8]
   15e12:	88fa      	ldrh	r2, [r7, #6]
   15e14:	b2d2      	uxtb	r2, r2
   15e16:	701a      	strb	r2, [r3, #0]
   15e18:	68bb      	ldr	r3, [r7, #8]
   15e1a:	1c5a      	adds	r2, r3, #1
   15e1c:	60ba      	str	r2, [r7, #8]
   15e1e:	88fa      	ldrh	r2, [r7, #6]
   15e20:	0a12      	lsrs	r2, r2, #8
   15e22:	b292      	uxth	r2, r2
   15e24:	b2d2      	uxtb	r2, r2
   15e26:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   15e28:	2210      	movs	r2, #16
   15e2a:	6839      	ldr	r1, [r7, #0]
   15e2c:	68b8      	ldr	r0, [r7, #8]
   15e2e:	f7f6 f997 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   15e32:	68f8      	ldr	r0, [r7, #12]
   15e34:	f7ff fc98 	bl	15768 <hciCmdSend>
  }
}
   15e38:	bf00      	nop
   15e3a:	3710      	adds	r7, #16
   15e3c:	46bd      	mov	sp, r7
   15e3e:	bd80      	pop	{r7, pc}

00015e40 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   15e40:	b580      	push	{r7, lr}
   15e42:	b082      	sub	sp, #8
   15e44:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   15e46:	2100      	movs	r1, #0
   15e48:	f242 0018 	movw	r0, #8216	; 0x2018
   15e4c:	f7ff fc5e 	bl	1570c <hciCmdAlloc>
   15e50:	6078      	str	r0, [r7, #4]
   15e52:	687b      	ldr	r3, [r7, #4]
   15e54:	2b00      	cmp	r3, #0
   15e56:	d002      	beq.n	15e5e <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15e58:	6878      	ldr	r0, [r7, #4]
   15e5a:	f7ff fc85 	bl	15768 <hciCmdSend>
  }
}
   15e5e:	bf00      	nop
   15e60:	3708      	adds	r7, #8
   15e62:	46bd      	mov	sp, r7
   15e64:	bd80      	pop	{r7, pc}

00015e66 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   15e66:	b580      	push	{r7, lr}
   15e68:	b082      	sub	sp, #8
   15e6a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   15e6c:	2100      	movs	r1, #0
   15e6e:	f242 0002 	movw	r0, #8194	; 0x2002
   15e72:	f7ff fc4b 	bl	1570c <hciCmdAlloc>
   15e76:	6078      	str	r0, [r7, #4]
   15e78:	687b      	ldr	r3, [r7, #4]
   15e7a:	2b00      	cmp	r3, #0
   15e7c:	d002      	beq.n	15e84 <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15e7e:	6878      	ldr	r0, [r7, #4]
   15e80:	f7ff fc72 	bl	15768 <hciCmdSend>
  }
}
   15e84:	bf00      	nop
   15e86:	3708      	adds	r7, #8
   15e88:	46bd      	mov	sp, r7
   15e8a:	bd80      	pop	{r7, pc}

00015e8c <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   15e8c:	b580      	push	{r7, lr}
   15e8e:	b082      	sub	sp, #8
   15e90:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   15e92:	2100      	movs	r1, #0
   15e94:	f242 0003 	movw	r0, #8195	; 0x2003
   15e98:	f7ff fc38 	bl	1570c <hciCmdAlloc>
   15e9c:	6078      	str	r0, [r7, #4]
   15e9e:	687b      	ldr	r3, [r7, #4]
   15ea0:	2b00      	cmp	r3, #0
   15ea2:	d002      	beq.n	15eaa <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15ea4:	6878      	ldr	r0, [r7, #4]
   15ea6:	f7ff fc5f 	bl	15768 <hciCmdSend>
  }
}
   15eaa:	bf00      	nop
   15eac:	3708      	adds	r7, #8
   15eae:	46bd      	mov	sp, r7
   15eb0:	bd80      	pop	{r7, pc}

00015eb2 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   15eb2:	b580      	push	{r7, lr}
   15eb4:	b084      	sub	sp, #16
   15eb6:	af00      	add	r7, sp, #0
   15eb8:	4603      	mov	r3, r0
   15eba:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   15ebc:	2102      	movs	r1, #2
   15ebe:	f242 0016 	movw	r0, #8214	; 0x2016
   15ec2:	f7ff fc23 	bl	1570c <hciCmdAlloc>
   15ec6:	60f8      	str	r0, [r7, #12]
   15ec8:	68fb      	ldr	r3, [r7, #12]
   15eca:	2b00      	cmp	r3, #0
   15ecc:	d013      	beq.n	15ef6 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15ece:	68fb      	ldr	r3, [r7, #12]
   15ed0:	3303      	adds	r3, #3
   15ed2:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15ed4:	68bb      	ldr	r3, [r7, #8]
   15ed6:	1c5a      	adds	r2, r3, #1
   15ed8:	60ba      	str	r2, [r7, #8]
   15eda:	88fa      	ldrh	r2, [r7, #6]
   15edc:	b2d2      	uxtb	r2, r2
   15ede:	701a      	strb	r2, [r3, #0]
   15ee0:	68bb      	ldr	r3, [r7, #8]
   15ee2:	1c5a      	adds	r2, r3, #1
   15ee4:	60ba      	str	r2, [r7, #8]
   15ee6:	88fa      	ldrh	r2, [r7, #6]
   15ee8:	0a12      	lsrs	r2, r2, #8
   15eea:	b292      	uxth	r2, r2
   15eec:	b2d2      	uxtb	r2, r2
   15eee:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15ef0:	68f8      	ldr	r0, [r7, #12]
   15ef2:	f7ff fc39 	bl	15768 <hciCmdSend>
  }
}
   15ef6:	bf00      	nop
   15ef8:	3710      	adds	r7, #16
   15efa:	46bd      	mov	sp, r7
   15efc:	bd80      	pop	{r7, pc}

00015efe <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   15efe:	b580      	push	{r7, lr}
   15f00:	b082      	sub	sp, #8
   15f02:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   15f04:	2100      	movs	r1, #0
   15f06:	f242 001c 	movw	r0, #8220	; 0x201c
   15f0a:	f7ff fbff 	bl	1570c <hciCmdAlloc>
   15f0e:	6078      	str	r0, [r7, #4]
   15f10:	687b      	ldr	r3, [r7, #4]
   15f12:	2b00      	cmp	r3, #0
   15f14:	d002      	beq.n	15f1c <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15f16:	6878      	ldr	r0, [r7, #4]
   15f18:	f7ff fc26 	bl	15768 <hciCmdSend>
  }
}
   15f1c:	bf00      	nop
   15f1e:	3708      	adds	r7, #8
   15f20:	46bd      	mov	sp, r7
   15f22:	bd80      	pop	{r7, pc}

00015f24 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   15f24:	b580      	push	{r7, lr}
   15f26:	b082      	sub	sp, #8
   15f28:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   15f2a:	2100      	movs	r1, #0
   15f2c:	f242 000f 	movw	r0, #8207	; 0x200f
   15f30:	f7ff fbec 	bl	1570c <hciCmdAlloc>
   15f34:	6078      	str	r0, [r7, #4]
   15f36:	687b      	ldr	r3, [r7, #4]
   15f38:	2b00      	cmp	r3, #0
   15f3a:	d002      	beq.n	15f42 <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15f3c:	6878      	ldr	r0, [r7, #4]
   15f3e:	f7ff fc13 	bl	15768 <hciCmdSend>
  }
}
   15f42:	bf00      	nop
   15f44:	3708      	adds	r7, #8
   15f46:	46bd      	mov	sp, r7
   15f48:	bd80      	pop	{r7, pc}

00015f4a <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   15f4a:	b580      	push	{r7, lr}
   15f4c:	b084      	sub	sp, #16
   15f4e:	af00      	add	r7, sp, #0
   15f50:	4603      	mov	r3, r0
   15f52:	6039      	str	r1, [r7, #0]
   15f54:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
   15f56:	2107      	movs	r1, #7
   15f58:	f242 0012 	movw	r0, #8210	; 0x2012
   15f5c:	f7ff fbd6 	bl	1570c <hciCmdAlloc>
   15f60:	60f8      	str	r0, [r7, #12]
   15f62:	68fb      	ldr	r3, [r7, #12]
   15f64:	2b00      	cmp	r3, #0
   15f66:	d011      	beq.n	15f8c <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15f68:	68fb      	ldr	r3, [r7, #12]
   15f6a:	3303      	adds	r3, #3
   15f6c:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   15f6e:	68bb      	ldr	r3, [r7, #8]
   15f70:	1c5a      	adds	r2, r3, #1
   15f72:	60ba      	str	r2, [r7, #8]
   15f74:	79fa      	ldrb	r2, [r7, #7]
   15f76:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   15f78:	6839      	ldr	r1, [r7, #0]
   15f7a:	68b8      	ldr	r0, [r7, #8]
   15f7c:	f7fe fb04 	bl	14588 <BdaCpy>
   15f80:	68bb      	ldr	r3, [r7, #8]
   15f82:	3306      	adds	r3, #6
   15f84:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   15f86:	68f8      	ldr	r0, [r7, #12]
   15f88:	f7ff fbee 	bl	15768 <hciCmdSend>
  }
}
   15f8c:	bf00      	nop
   15f8e:	3710      	adds	r7, #16
   15f90:	46bd      	mov	sp, r7
   15f92:	bd80      	pop	{r7, pc}

00015f94 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   15f94:	b580      	push	{r7, lr}
   15f96:	b084      	sub	sp, #16
   15f98:	af00      	add	r7, sp, #0
   15f9a:	4603      	mov	r3, r0
   15f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   15f9e:	2101      	movs	r1, #1
   15fa0:	f242 000a 	movw	r0, #8202	; 0x200a
   15fa4:	f7ff fbb2 	bl	1570c <hciCmdAlloc>
   15fa8:	60f8      	str	r0, [r7, #12]
   15faa:	68fb      	ldr	r3, [r7, #12]
   15fac:	2b00      	cmp	r3, #0
   15fae:	d00a      	beq.n	15fc6 <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15fb0:	68fb      	ldr	r3, [r7, #12]
   15fb2:	3303      	adds	r3, #3
   15fb4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   15fb6:	68bb      	ldr	r3, [r7, #8]
   15fb8:	1c5a      	adds	r2, r3, #1
   15fba:	60ba      	str	r2, [r7, #8]
   15fbc:	79fa      	ldrb	r2, [r7, #7]
   15fbe:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15fc0:	68f8      	ldr	r0, [r7, #12]
   15fc2:	f7ff fbd1 	bl	15768 <hciCmdSend>
  }
}
   15fc6:	bf00      	nop
   15fc8:	3710      	adds	r7, #16
   15fca:	46bd      	mov	sp, r7
   15fcc:	bd80      	pop	{r7, pc}

00015fce <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   15fce:	b580      	push	{r7, lr}
   15fd0:	b084      	sub	sp, #16
   15fd2:	af00      	add	r7, sp, #0
   15fd4:	4603      	mov	r3, r0
   15fd6:	6039      	str	r1, [r7, #0]
   15fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   15fda:	2120      	movs	r1, #32
   15fdc:	f242 0008 	movw	r0, #8200	; 0x2008
   15fe0:	f7ff fb94 	bl	1570c <hciCmdAlloc>
   15fe4:	60f8      	str	r0, [r7, #12]
   15fe6:	68fb      	ldr	r3, [r7, #12]
   15fe8:	2b00      	cmp	r3, #0
   15fea:	d01c      	beq.n	16026 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15fec:	68fb      	ldr	r3, [r7, #12]
   15fee:	3303      	adds	r3, #3
   15ff0:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   15ff2:	68bb      	ldr	r3, [r7, #8]
   15ff4:	1c5a      	adds	r2, r3, #1
   15ff6:	60ba      	str	r2, [r7, #8]
   15ff8:	79fa      	ldrb	r2, [r7, #7]
   15ffa:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   15ffc:	79fb      	ldrb	r3, [r7, #7]
   15ffe:	461a      	mov	r2, r3
   16000:	6839      	ldr	r1, [r7, #0]
   16002:	68b8      	ldr	r0, [r7, #8]
   16004:	f7f6 f8ac 	bl	c160 <memcpy>
    p += len;
   16008:	79fb      	ldrb	r3, [r7, #7]
   1600a:	68ba      	ldr	r2, [r7, #8]
   1600c:	4413      	add	r3, r2
   1600e:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   16010:	79fb      	ldrb	r3, [r7, #7]
   16012:	f1c3 031f 	rsb	r3, r3, #31
   16016:	461a      	mov	r2, r3
   16018:	2100      	movs	r1, #0
   1601a:	68b8      	ldr	r0, [r7, #8]
   1601c:	f7f6 f99e 	bl	c35c <memset>
    hciCmdSend(pBuf);
   16020:	68f8      	ldr	r0, [r7, #12]
   16022:	f7ff fba1 	bl	15768 <hciCmdSend>
  }
}
   16026:	bf00      	nop
   16028:	3710      	adds	r7, #16
   1602a:	46bd      	mov	sp, r7
   1602c:	bd80      	pop	{r7, pc}

0001602e <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   1602e:	b590      	push	{r4, r7, lr}
   16030:	b085      	sub	sp, #20
   16032:	af00      	add	r7, sp, #0
   16034:	4604      	mov	r4, r0
   16036:	4608      	mov	r0, r1
   16038:	4611      	mov	r1, r2
   1603a:	461a      	mov	r2, r3
   1603c:	4623      	mov	r3, r4
   1603e:	80fb      	strh	r3, [r7, #6]
   16040:	4603      	mov	r3, r0
   16042:	80bb      	strh	r3, [r7, #4]
   16044:	460b      	mov	r3, r1
   16046:	70fb      	strb	r3, [r7, #3]
   16048:	4613      	mov	r3, r2
   1604a:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   1604c:	210f      	movs	r1, #15
   1604e:	f242 0006 	movw	r0, #8198	; 0x2006
   16052:	f7ff fb5b 	bl	1570c <hciCmdAlloc>
   16056:	60b8      	str	r0, [r7, #8]
   16058:	68bb      	ldr	r3, [r7, #8]
   1605a:	2b00      	cmp	r3, #0
   1605c:	d04c      	beq.n	160f8 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1605e:	68bb      	ldr	r3, [r7, #8]
   16060:	3303      	adds	r3, #3
   16062:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   16064:	68fb      	ldr	r3, [r7, #12]
   16066:	1c5a      	adds	r2, r3, #1
   16068:	60fa      	str	r2, [r7, #12]
   1606a:	88fa      	ldrh	r2, [r7, #6]
   1606c:	b2d2      	uxtb	r2, r2
   1606e:	701a      	strb	r2, [r3, #0]
   16070:	68fb      	ldr	r3, [r7, #12]
   16072:	1c5a      	adds	r2, r3, #1
   16074:	60fa      	str	r2, [r7, #12]
   16076:	88fa      	ldrh	r2, [r7, #6]
   16078:	0a12      	lsrs	r2, r2, #8
   1607a:	b292      	uxth	r2, r2
   1607c:	b2d2      	uxtb	r2, r2
   1607e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   16080:	68fb      	ldr	r3, [r7, #12]
   16082:	1c5a      	adds	r2, r3, #1
   16084:	60fa      	str	r2, [r7, #12]
   16086:	88ba      	ldrh	r2, [r7, #4]
   16088:	b2d2      	uxtb	r2, r2
   1608a:	701a      	strb	r2, [r3, #0]
   1608c:	68fb      	ldr	r3, [r7, #12]
   1608e:	1c5a      	adds	r2, r3, #1
   16090:	60fa      	str	r2, [r7, #12]
   16092:	88ba      	ldrh	r2, [r7, #4]
   16094:	0a12      	lsrs	r2, r2, #8
   16096:	b292      	uxth	r2, r2
   16098:	b2d2      	uxtb	r2, r2
   1609a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   1609c:	68fb      	ldr	r3, [r7, #12]
   1609e:	1c5a      	adds	r2, r3, #1
   160a0:	60fa      	str	r2, [r7, #12]
   160a2:	78fa      	ldrb	r2, [r7, #3]
   160a4:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   160a6:	68fb      	ldr	r3, [r7, #12]
   160a8:	1c5a      	adds	r2, r3, #1
   160aa:	60fa      	str	r2, [r7, #12]
   160ac:	78ba      	ldrb	r2, [r7, #2]
   160ae:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   160b0:	68fb      	ldr	r3, [r7, #12]
   160b2:	1c5a      	adds	r2, r3, #1
   160b4:	60fa      	str	r2, [r7, #12]
   160b6:	f897 2020 	ldrb.w	r2, [r7, #32]
   160ba:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   160bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160be:	2b00      	cmp	r3, #0
   160c0:	d007      	beq.n	160d2 <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   160c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   160c4:	68f8      	ldr	r0, [r7, #12]
   160c6:	f7fe fa5f 	bl	14588 <BdaCpy>
   160ca:	68fb      	ldr	r3, [r7, #12]
   160cc:	3306      	adds	r3, #6
   160ce:	60fb      	str	r3, [r7, #12]
   160d0:	e003      	b.n	160da <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
   160d2:	68f8      	ldr	r0, [r7, #12]
   160d4:	f7fe fa7a 	bl	145cc <BdaClr>
   160d8:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   160da:	68fb      	ldr	r3, [r7, #12]
   160dc:	1c5a      	adds	r2, r3, #1
   160de:	60fa      	str	r2, [r7, #12]
   160e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   160e4:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   160e6:	68fb      	ldr	r3, [r7, #12]
   160e8:	1c5a      	adds	r2, r3, #1
   160ea:	60fa      	str	r2, [r7, #12]
   160ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   160f0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   160f2:	68b8      	ldr	r0, [r7, #8]
   160f4:	f7ff fb38 	bl	15768 <hciCmdSend>
  }
}
   160f8:	bf00      	nop
   160fa:	3714      	adds	r7, #20
   160fc:	46bd      	mov	sp, r7
   160fe:	bd90      	pop	{r4, r7, pc}

00016100 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   16100:	b580      	push	{r7, lr}
   16102:	b084      	sub	sp, #16
   16104:	af00      	add	r7, sp, #0
   16106:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   16108:	2108      	movs	r1, #8
   1610a:	f242 0001 	movw	r0, #8193	; 0x2001
   1610e:	f7ff fafd 	bl	1570c <hciCmdAlloc>
   16112:	60f8      	str	r0, [r7, #12]
   16114:	68fb      	ldr	r3, [r7, #12]
   16116:	2b00      	cmp	r3, #0
   16118:	d00a      	beq.n	16130 <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1611a:	68fb      	ldr	r3, [r7, #12]
   1611c:	3303      	adds	r3, #3
   1611e:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   16120:	2208      	movs	r2, #8
   16122:	6879      	ldr	r1, [r7, #4]
   16124:	68b8      	ldr	r0, [r7, #8]
   16126:	f7f6 f81b 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1612a:	68f8      	ldr	r0, [r7, #12]
   1612c:	f7ff fb1c 	bl	15768 <hciCmdSend>
  }
}
   16130:	bf00      	nop
   16132:	3710      	adds	r7, #16
   16134:	46bd      	mov	sp, r7
   16136:	bd80      	pop	{r7, pc}

00016138 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
   16138:	b580      	push	{r7, lr}
   1613a:	b084      	sub	sp, #16
   1613c:	af00      	add	r7, sp, #0
   1613e:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
   16140:	2106      	movs	r1, #6
   16142:	f242 0005 	movw	r0, #8197	; 0x2005
   16146:	f7ff fae1 	bl	1570c <hciCmdAlloc>
   1614a:	60f8      	str	r0, [r7, #12]
   1614c:	68fb      	ldr	r3, [r7, #12]
   1614e:	2b00      	cmp	r3, #0
   16150:	d00c      	beq.n	1616c <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16152:	68fb      	ldr	r3, [r7, #12]
   16154:	3303      	adds	r3, #3
   16156:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
   16158:	6879      	ldr	r1, [r7, #4]
   1615a:	68b8      	ldr	r0, [r7, #8]
   1615c:	f7fe fa14 	bl	14588 <BdaCpy>
   16160:	68bb      	ldr	r3, [r7, #8]
   16162:	3306      	adds	r3, #6
   16164:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   16166:	68f8      	ldr	r0, [r7, #12]
   16168:	f7ff fafe 	bl	15768 <hciCmdSend>
  }
}
   1616c:	bf00      	nop
   1616e:	3710      	adds	r7, #16
   16170:	46bd      	mov	sp, r7
   16172:	bd80      	pop	{r7, pc}

00016174 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   16174:	b580      	push	{r7, lr}
   16176:	b084      	sub	sp, #16
   16178:	af00      	add	r7, sp, #0
   1617a:	4603      	mov	r3, r0
   1617c:	6039      	str	r1, [r7, #0]
   1617e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   16180:	2120      	movs	r1, #32
   16182:	f242 0009 	movw	r0, #8201	; 0x2009
   16186:	f7ff fac1 	bl	1570c <hciCmdAlloc>
   1618a:	60f8      	str	r0, [r7, #12]
   1618c:	68fb      	ldr	r3, [r7, #12]
   1618e:	2b00      	cmp	r3, #0
   16190:	d01c      	beq.n	161cc <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16192:	68fb      	ldr	r3, [r7, #12]
   16194:	3303      	adds	r3, #3
   16196:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   16198:	68bb      	ldr	r3, [r7, #8]
   1619a:	1c5a      	adds	r2, r3, #1
   1619c:	60ba      	str	r2, [r7, #8]
   1619e:	79fa      	ldrb	r2, [r7, #7]
   161a0:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   161a2:	79fb      	ldrb	r3, [r7, #7]
   161a4:	461a      	mov	r2, r3
   161a6:	6839      	ldr	r1, [r7, #0]
   161a8:	68b8      	ldr	r0, [r7, #8]
   161aa:	f7f5 ffd9 	bl	c160 <memcpy>
    p += len;
   161ae:	79fb      	ldrb	r3, [r7, #7]
   161b0:	68ba      	ldr	r2, [r7, #8]
   161b2:	4413      	add	r3, r2
   161b4:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   161b6:	79fb      	ldrb	r3, [r7, #7]
   161b8:	f1c3 031f 	rsb	r3, r3, #31
   161bc:	461a      	mov	r2, r3
   161be:	2100      	movs	r1, #0
   161c0:	68b8      	ldr	r0, [r7, #8]
   161c2:	f7f6 f8cb 	bl	c35c <memset>
    hciCmdSend(pBuf);
   161c6:	68f8      	ldr	r0, [r7, #12]
   161c8:	f7ff face 	bl	15768 <hciCmdSend>
  }
}
   161cc:	bf00      	nop
   161ce:	3710      	adds	r7, #16
   161d0:	46bd      	mov	sp, r7
   161d2:	bd80      	pop	{r7, pc}

000161d4 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   161d4:	b580      	push	{r7, lr}
   161d6:	b086      	sub	sp, #24
   161d8:	af00      	add	r7, sp, #0
   161da:	60b9      	str	r1, [r7, #8]
   161dc:	607b      	str	r3, [r7, #4]
   161de:	4603      	mov	r3, r0
   161e0:	81fb      	strh	r3, [r7, #14]
   161e2:	4613      	mov	r3, r2
   161e4:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   161e6:	211c      	movs	r1, #28
   161e8:	f242 0019 	movw	r0, #8217	; 0x2019
   161ec:	f7ff fa8e 	bl	1570c <hciCmdAlloc>
   161f0:	6178      	str	r0, [r7, #20]
   161f2:	697b      	ldr	r3, [r7, #20]
   161f4:	2b00      	cmp	r3, #0
   161f6:	d02e      	beq.n	16256 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   161f8:	697b      	ldr	r3, [r7, #20]
   161fa:	3303      	adds	r3, #3
   161fc:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
   161fe:	693b      	ldr	r3, [r7, #16]
   16200:	1c5a      	adds	r2, r3, #1
   16202:	613a      	str	r2, [r7, #16]
   16204:	89fa      	ldrh	r2, [r7, #14]
   16206:	b2d2      	uxtb	r2, r2
   16208:	701a      	strb	r2, [r3, #0]
   1620a:	693b      	ldr	r3, [r7, #16]
   1620c:	1c5a      	adds	r2, r3, #1
   1620e:	613a      	str	r2, [r7, #16]
   16210:	89fa      	ldrh	r2, [r7, #14]
   16212:	0a12      	lsrs	r2, r2, #8
   16214:	b292      	uxth	r2, r2
   16216:	b2d2      	uxtb	r2, r2
   16218:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   1621a:	2208      	movs	r2, #8
   1621c:	68b9      	ldr	r1, [r7, #8]
   1621e:	6938      	ldr	r0, [r7, #16]
   16220:	f7f5 ff9e 	bl	c160 <memcpy>
    p += HCI_RAND_LEN;
   16224:	693b      	ldr	r3, [r7, #16]
   16226:	3308      	adds	r3, #8
   16228:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   1622a:	693b      	ldr	r3, [r7, #16]
   1622c:	1c5a      	adds	r2, r3, #1
   1622e:	613a      	str	r2, [r7, #16]
   16230:	89ba      	ldrh	r2, [r7, #12]
   16232:	b2d2      	uxtb	r2, r2
   16234:	701a      	strb	r2, [r3, #0]
   16236:	693b      	ldr	r3, [r7, #16]
   16238:	1c5a      	adds	r2, r3, #1
   1623a:	613a      	str	r2, [r7, #16]
   1623c:	89ba      	ldrh	r2, [r7, #12]
   1623e:	0a12      	lsrs	r2, r2, #8
   16240:	b292      	uxth	r2, r2
   16242:	b2d2      	uxtb	r2, r2
   16244:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   16246:	2210      	movs	r2, #16
   16248:	6879      	ldr	r1, [r7, #4]
   1624a:	6938      	ldr	r0, [r7, #16]
   1624c:	f7f5 ff88 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   16250:	6978      	ldr	r0, [r7, #20]
   16252:	f7ff fa89 	bl	15768 <hciCmdSend>
  }
}
   16256:	bf00      	nop
   16258:	3718      	adds	r7, #24
   1625a:	46bd      	mov	sp, r7
   1625c:	bd80      	pop	{r7, pc}

0001625e <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   1625e:	b580      	push	{r7, lr}
   16260:	b082      	sub	sp, #8
   16262:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   16264:	2100      	movs	r1, #0
   16266:	f241 0009 	movw	r0, #4105	; 0x1009
   1626a:	f7ff fa4f 	bl	1570c <hciCmdAlloc>
   1626e:	6078      	str	r0, [r7, #4]
   16270:	687b      	ldr	r3, [r7, #4]
   16272:	2b00      	cmp	r3, #0
   16274:	d002      	beq.n	1627c <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
   16276:	6878      	ldr	r0, [r7, #4]
   16278:	f7ff fa76 	bl	15768 <hciCmdSend>
  }
}
   1627c:	bf00      	nop
   1627e:	3708      	adds	r7, #8
   16280:	46bd      	mov	sp, r7
   16282:	bd80      	pop	{r7, pc}

00016284 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   16284:	b580      	push	{r7, lr}
   16286:	b082      	sub	sp, #8
   16288:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   1628a:	2100      	movs	r1, #0
   1628c:	f241 0001 	movw	r0, #4097	; 0x1001
   16290:	f7ff fa3c 	bl	1570c <hciCmdAlloc>
   16294:	6078      	str	r0, [r7, #4]
   16296:	687b      	ldr	r3, [r7, #4]
   16298:	2b00      	cmp	r3, #0
   1629a:	d002      	beq.n	162a2 <HciReadLocalVerInfoCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1629c:	6878      	ldr	r0, [r7, #4]
   1629e:	f7ff fa63 	bl	15768 <hciCmdSend>
  }
}
   162a2:	bf00      	nop
   162a4:	3708      	adds	r7, #8
   162a6:	46bd      	mov	sp, r7
   162a8:	bd80      	pop	{r7, pc}

000162aa <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   162aa:	b580      	push	{r7, lr}
   162ac:	b084      	sub	sp, #16
   162ae:	af00      	add	r7, sp, #0
   162b0:	4603      	mov	r3, r0
   162b2:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   162b4:	2102      	movs	r1, #2
   162b6:	f241 4005 	movw	r0, #5125	; 0x1405
   162ba:	f7ff fa27 	bl	1570c <hciCmdAlloc>
   162be:	60f8      	str	r0, [r7, #12]
   162c0:	68fb      	ldr	r3, [r7, #12]
   162c2:	2b00      	cmp	r3, #0
   162c4:	d013      	beq.n	162ee <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   162c6:	68fb      	ldr	r3, [r7, #12]
   162c8:	3303      	adds	r3, #3
   162ca:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   162cc:	68bb      	ldr	r3, [r7, #8]
   162ce:	1c5a      	adds	r2, r3, #1
   162d0:	60ba      	str	r2, [r7, #8]
   162d2:	88fa      	ldrh	r2, [r7, #6]
   162d4:	b2d2      	uxtb	r2, r2
   162d6:	701a      	strb	r2, [r3, #0]
   162d8:	68bb      	ldr	r3, [r7, #8]
   162da:	1c5a      	adds	r2, r3, #1
   162dc:	60ba      	str	r2, [r7, #8]
   162de:	88fa      	ldrh	r2, [r7, #6]
   162e0:	0a12      	lsrs	r2, r2, #8
   162e2:	b292      	uxth	r2, r2
   162e4:	b2d2      	uxtb	r2, r2
   162e6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   162e8:	68f8      	ldr	r0, [r7, #12]
   162ea:	f7ff fa3d 	bl	15768 <hciCmdSend>
  }
}
   162ee:	bf00      	nop
   162f0:	3710      	adds	r7, #16
   162f2:	46bd      	mov	sp, r7
   162f4:	bd80      	pop	{r7, pc}
	...

000162f8 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   162f8:	b580      	push	{r7, lr}
   162fa:	b084      	sub	sp, #16
   162fc:	af00      	add	r7, sp, #0
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   162fe:	2314      	movs	r3, #20
   16300:	71bb      	strb	r3, [r7, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   16302:	4b13      	ldr	r3, [pc, #76]	; (16350 <HciResetCmd+0x58>)
   16304:	68db      	ldr	r3, [r3, #12]
   16306:	1d3a      	adds	r2, r7, #4
   16308:	4610      	mov	r0, r2
   1630a:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1630c:	e002      	b.n	16314 <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   1630e:	68f8      	ldr	r0, [r7, #12]
   16310:	f7fe ffae 	bl	15270 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16314:	f107 030b 	add.w	r3, r7, #11
   16318:	4619      	mov	r1, r3
   1631a:	480e      	ldr	r0, [pc, #56]	; (16354 <HciResetCmd+0x5c>)
   1631c:	f7fe ffe2 	bl	152e4 <WsfMsgDeq>
   16320:	60f8      	str	r0, [r7, #12]
   16322:	68fb      	ldr	r3, [r7, #12]
   16324:	2b00      	cmp	r3, #0
   16326:	d1f2      	bne.n	1630e <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   16328:	4b0b      	ldr	r3, [pc, #44]	; (16358 <HciResetCmd+0x60>)
   1632a:	2201      	movs	r2, #1
   1632c:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   1632e:	2100      	movs	r1, #0
   16330:	f640 4003 	movw	r0, #3075	; 0xc03
   16334:	f7ff f9ea 	bl	1570c <hciCmdAlloc>
   16338:	60f8      	str	r0, [r7, #12]
   1633a:	68fb      	ldr	r3, [r7, #12]
   1633c:	2b00      	cmp	r3, #0
   1633e:	d002      	beq.n	16346 <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   16340:	68f8      	ldr	r0, [r7, #12]
   16342:	f7ff fa11 	bl	15768 <hciCmdSend>
  }
}
   16346:	bf00      	nop
   16348:	3710      	adds	r7, #16
   1634a:	46bd      	mov	sp, r7
   1634c:	bd80      	pop	{r7, pc}
   1634e:	bf00      	nop
   16350:	100051fc 	.word	0x100051fc
   16354:	10005bc8 	.word	0x10005bc8
   16358:	10005bb8 	.word	0x10005bb8

0001635c <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   1635c:	b580      	push	{r7, lr}
   1635e:	b084      	sub	sp, #16
   16360:	af00      	add	r7, sp, #0
   16362:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   16364:	2108      	movs	r1, #8
   16366:	f640 4001 	movw	r0, #3073	; 0xc01
   1636a:	f7ff f9cf 	bl	1570c <hciCmdAlloc>
   1636e:	60f8      	str	r0, [r7, #12]
   16370:	68fb      	ldr	r3, [r7, #12]
   16372:	2b00      	cmp	r3, #0
   16374:	d00a      	beq.n	1638c <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16376:	68fb      	ldr	r3, [r7, #12]
   16378:	3303      	adds	r3, #3
   1637a:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   1637c:	2208      	movs	r2, #8
   1637e:	6879      	ldr	r1, [r7, #4]
   16380:	68b8      	ldr	r0, [r7, #8]
   16382:	f7f5 feed 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   16386:	68f8      	ldr	r0, [r7, #12]
   16388:	f7ff f9ee 	bl	15768 <hciCmdSend>
  }
}
   1638c:	bf00      	nop
   1638e:	3710      	adds	r7, #16
   16390:	46bd      	mov	sp, r7
   16392:	bd80      	pop	{r7, pc}

00016394 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   16394:	b580      	push	{r7, lr}
   16396:	b084      	sub	sp, #16
   16398:	af00      	add	r7, sp, #0
   1639a:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   1639c:	2108      	movs	r1, #8
   1639e:	f640 4063 	movw	r0, #3171	; 0xc63
   163a2:	f7ff f9b3 	bl	1570c <hciCmdAlloc>
   163a6:	60f8      	str	r0, [r7, #12]
   163a8:	68fb      	ldr	r3, [r7, #12]
   163aa:	2b00      	cmp	r3, #0
   163ac:	d00a      	beq.n	163c4 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   163ae:	68fb      	ldr	r3, [r7, #12]
   163b0:	3303      	adds	r3, #3
   163b2:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   163b4:	2208      	movs	r2, #8
   163b6:	6879      	ldr	r1, [r7, #4]
   163b8:	68b8      	ldr	r0, [r7, #8]
   163ba:	f7f5 fed1 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   163be:	68f8      	ldr	r0, [r7, #12]
   163c0:	f7ff f9d2 	bl	15768 <hciCmdSend>
  }
}
   163c4:	bf00      	nop
   163c6:	3710      	adds	r7, #16
   163c8:	46bd      	mov	sp, r7
   163ca:	bd80      	pop	{r7, pc}

000163cc <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   163cc:	b580      	push	{r7, lr}
   163ce:	b084      	sub	sp, #16
   163d0:	af00      	add	r7, sp, #0
   163d2:	4603      	mov	r3, r0
   163d4:	460a      	mov	r2, r1
   163d6:	80fb      	strh	r3, [r7, #6]
   163d8:	4613      	mov	r3, r2
   163da:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   163dc:	2104      	movs	r1, #4
   163de:	f640 407c 	movw	r0, #3196	; 0xc7c
   163e2:	f7ff f993 	bl	1570c <hciCmdAlloc>
   163e6:	60f8      	str	r0, [r7, #12]
   163e8:	68fb      	ldr	r3, [r7, #12]
   163ea:	2b00      	cmp	r3, #0
   163ec:	d021      	beq.n	16432 <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   163ee:	68fb      	ldr	r3, [r7, #12]
   163f0:	3303      	adds	r3, #3
   163f2:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   163f4:	68bb      	ldr	r3, [r7, #8]
   163f6:	1c5a      	adds	r2, r3, #1
   163f8:	60ba      	str	r2, [r7, #8]
   163fa:	88fa      	ldrh	r2, [r7, #6]
   163fc:	b2d2      	uxtb	r2, r2
   163fe:	701a      	strb	r2, [r3, #0]
   16400:	68bb      	ldr	r3, [r7, #8]
   16402:	1c5a      	adds	r2, r3, #1
   16404:	60ba      	str	r2, [r7, #8]
   16406:	88fa      	ldrh	r2, [r7, #6]
   16408:	0a12      	lsrs	r2, r2, #8
   1640a:	b292      	uxth	r2, r2
   1640c:	b2d2      	uxtb	r2, r2
   1640e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   16410:	68bb      	ldr	r3, [r7, #8]
   16412:	1c5a      	adds	r2, r3, #1
   16414:	60ba      	str	r2, [r7, #8]
   16416:	88ba      	ldrh	r2, [r7, #4]
   16418:	b2d2      	uxtb	r2, r2
   1641a:	701a      	strb	r2, [r3, #0]
   1641c:	68bb      	ldr	r3, [r7, #8]
   1641e:	1c5a      	adds	r2, r3, #1
   16420:	60ba      	str	r2, [r7, #8]
   16422:	88ba      	ldrh	r2, [r7, #4]
   16424:	0a12      	lsrs	r2, r2, #8
   16426:	b292      	uxth	r2, r2
   16428:	b2d2      	uxtb	r2, r2
   1642a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1642c:	68f8      	ldr	r0, [r7, #12]
   1642e:	f7ff f99b 	bl	15768 <hciCmdSend>
  }
}
   16432:	bf00      	nop
   16434:	3710      	adds	r7, #16
   16436:	46bd      	mov	sp, r7
   16438:	bd80      	pop	{r7, pc}

0001643a <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   1643a:	b580      	push	{r7, lr}
   1643c:	b086      	sub	sp, #24
   1643e:	af00      	add	r7, sp, #0
   16440:	60b9      	str	r1, [r7, #8]
   16442:	607a      	str	r2, [r7, #4]
   16444:	603b      	str	r3, [r7, #0]
   16446:	4603      	mov	r3, r0
   16448:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   1644a:	2127      	movs	r1, #39	; 0x27
   1644c:	f242 0027 	movw	r0, #8231	; 0x2027
   16450:	f7ff f95c 	bl	1570c <hciCmdAlloc>
   16454:	6178      	str	r0, [r7, #20]
   16456:	697b      	ldr	r3, [r7, #20]
   16458:	2b00      	cmp	r3, #0
   1645a:	d01e      	beq.n	1649a <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1645c:	697b      	ldr	r3, [r7, #20]
   1645e:	3303      	adds	r3, #3
   16460:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   16462:	693b      	ldr	r3, [r7, #16]
   16464:	1c5a      	adds	r2, r3, #1
   16466:	613a      	str	r2, [r7, #16]
   16468:	7bfa      	ldrb	r2, [r7, #15]
   1646a:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1646c:	68b9      	ldr	r1, [r7, #8]
   1646e:	6938      	ldr	r0, [r7, #16]
   16470:	f7fe f88a 	bl	14588 <BdaCpy>
   16474:	693b      	ldr	r3, [r7, #16]
   16476:	3306      	adds	r3, #6
   16478:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   1647a:	2210      	movs	r2, #16
   1647c:	6879      	ldr	r1, [r7, #4]
   1647e:	6938      	ldr	r0, [r7, #16]
   16480:	f7f5 fe6e 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   16484:	693b      	ldr	r3, [r7, #16]
   16486:	3310      	adds	r3, #16
   16488:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   1648a:	2210      	movs	r2, #16
   1648c:	6839      	ldr	r1, [r7, #0]
   1648e:	6938      	ldr	r0, [r7, #16]
   16490:	f7f5 fe66 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   16494:	6978      	ldr	r0, [r7, #20]
   16496:	f7ff f967 	bl	15768 <hciCmdSend>
  }
}
   1649a:	bf00      	nop
   1649c:	3718      	adds	r7, #24
   1649e:	46bd      	mov	sp, r7
   164a0:	bd80      	pop	{r7, pc}

000164a2 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   164a2:	b580      	push	{r7, lr}
   164a4:	b084      	sub	sp, #16
   164a6:	af00      	add	r7, sp, #0
   164a8:	4603      	mov	r3, r0
   164aa:	6039      	str	r1, [r7, #0]
   164ac:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   164ae:	2107      	movs	r1, #7
   164b0:	f242 0028 	movw	r0, #8232	; 0x2028
   164b4:	f7ff f92a 	bl	1570c <hciCmdAlloc>
   164b8:	60f8      	str	r0, [r7, #12]
   164ba:	68fb      	ldr	r3, [r7, #12]
   164bc:	2b00      	cmp	r3, #0
   164be:	d011      	beq.n	164e4 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   164c0:	68fb      	ldr	r3, [r7, #12]
   164c2:	3303      	adds	r3, #3
   164c4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   164c6:	68bb      	ldr	r3, [r7, #8]
   164c8:	1c5a      	adds	r2, r3, #1
   164ca:	60ba      	str	r2, [r7, #8]
   164cc:	79fa      	ldrb	r2, [r7, #7]
   164ce:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   164d0:	6839      	ldr	r1, [r7, #0]
   164d2:	68b8      	ldr	r0, [r7, #8]
   164d4:	f7fe f858 	bl	14588 <BdaCpy>
   164d8:	68bb      	ldr	r3, [r7, #8]
   164da:	3306      	adds	r3, #6
   164dc:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   164de:	68f8      	ldr	r0, [r7, #12]
   164e0:	f7ff f942 	bl	15768 <hciCmdSend>
  }
}
   164e4:	bf00      	nop
   164e6:	3710      	adds	r7, #16
   164e8:	46bd      	mov	sp, r7
   164ea:	bd80      	pop	{r7, pc}

000164ec <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   164ec:	b580      	push	{r7, lr}
   164ee:	b082      	sub	sp, #8
   164f0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   164f2:	2100      	movs	r1, #0
   164f4:	f242 0029 	movw	r0, #8233	; 0x2029
   164f8:	f7ff f908 	bl	1570c <hciCmdAlloc>
   164fc:	6078      	str	r0, [r7, #4]
   164fe:	687b      	ldr	r3, [r7, #4]
   16500:	2b00      	cmp	r3, #0
   16502:	d002      	beq.n	1650a <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
   16504:	6878      	ldr	r0, [r7, #4]
   16506:	f7ff f92f 	bl	15768 <hciCmdSend>
  }
}
   1650a:	bf00      	nop
   1650c:	3708      	adds	r7, #8
   1650e:	46bd      	mov	sp, r7
   16510:	bd80      	pop	{r7, pc}

00016512 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   16512:	b580      	push	{r7, lr}
   16514:	b082      	sub	sp, #8
   16516:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   16518:	2100      	movs	r1, #0
   1651a:	f242 002a 	movw	r0, #8234	; 0x202a
   1651e:	f7ff f8f5 	bl	1570c <hciCmdAlloc>
   16522:	6078      	str	r0, [r7, #4]
   16524:	687b      	ldr	r3, [r7, #4]
   16526:	2b00      	cmp	r3, #0
   16528:	d002      	beq.n	16530 <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
   1652a:	6878      	ldr	r0, [r7, #4]
   1652c:	f7ff f91c 	bl	15768 <hciCmdSend>
  }
}
   16530:	bf00      	nop
   16532:	3708      	adds	r7, #8
   16534:	46bd      	mov	sp, r7
   16536:	bd80      	pop	{r7, pc}

00016538 <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   16538:	b580      	push	{r7, lr}
   1653a:	b084      	sub	sp, #16
   1653c:	af00      	add	r7, sp, #0
   1653e:	4603      	mov	r3, r0
   16540:	6039      	str	r1, [r7, #0]
   16542:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
   16544:	2107      	movs	r1, #7
   16546:	f242 002b 	movw	r0, #8235	; 0x202b
   1654a:	f7ff f8df 	bl	1570c <hciCmdAlloc>
   1654e:	60f8      	str	r0, [r7, #12]
   16550:	68fb      	ldr	r3, [r7, #12]
   16552:	2b00      	cmp	r3, #0
   16554:	d011      	beq.n	1657a <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16556:	68fb      	ldr	r3, [r7, #12]
   16558:	3303      	adds	r3, #3
   1655a:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1655c:	68bb      	ldr	r3, [r7, #8]
   1655e:	1c5a      	adds	r2, r3, #1
   16560:	60ba      	str	r2, [r7, #8]
   16562:	79fa      	ldrb	r2, [r7, #7]
   16564:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   16566:	6839      	ldr	r1, [r7, #0]
   16568:	68b8      	ldr	r0, [r7, #8]
   1656a:	f7fe f80d 	bl	14588 <BdaCpy>
   1656e:	68bb      	ldr	r3, [r7, #8]
   16570:	3306      	adds	r3, #6
   16572:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   16574:	68f8      	ldr	r0, [r7, #12]
   16576:	f7ff f8f7 	bl	15768 <hciCmdSend>
  }
}
   1657a:	bf00      	nop
   1657c:	3710      	adds	r7, #16
   1657e:	46bd      	mov	sp, r7
   16580:	bd80      	pop	{r7, pc}

00016582 <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   16582:	b580      	push	{r7, lr}
   16584:	b084      	sub	sp, #16
   16586:	af00      	add	r7, sp, #0
   16588:	4603      	mov	r3, r0
   1658a:	6039      	str	r1, [r7, #0]
   1658c:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
   1658e:	2107      	movs	r1, #7
   16590:	f242 002c 	movw	r0, #8236	; 0x202c
   16594:	f7ff f8ba 	bl	1570c <hciCmdAlloc>
   16598:	60f8      	str	r0, [r7, #12]
   1659a:	68fb      	ldr	r3, [r7, #12]
   1659c:	2b00      	cmp	r3, #0
   1659e:	d011      	beq.n	165c4 <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   165a0:	68fb      	ldr	r3, [r7, #12]
   165a2:	3303      	adds	r3, #3
   165a4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   165a6:	68bb      	ldr	r3, [r7, #8]
   165a8:	1c5a      	adds	r2, r3, #1
   165aa:	60ba      	str	r2, [r7, #8]
   165ac:	79fa      	ldrb	r2, [r7, #7]
   165ae:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   165b0:	6839      	ldr	r1, [r7, #0]
   165b2:	68b8      	ldr	r0, [r7, #8]
   165b4:	f7fd ffe8 	bl	14588 <BdaCpy>
   165b8:	68bb      	ldr	r3, [r7, #8]
   165ba:	3306      	adds	r3, #6
   165bc:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   165be:	68f8      	ldr	r0, [r7, #12]
   165c0:	f7ff f8d2 	bl	15768 <hciCmdSend>
  }
}
   165c4:	bf00      	nop
   165c6:	3710      	adds	r7, #16
   165c8:	46bd      	mov	sp, r7
   165ca:	bd80      	pop	{r7, pc}

000165cc <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   165cc:	b580      	push	{r7, lr}
   165ce:	b084      	sub	sp, #16
   165d0:	af00      	add	r7, sp, #0
   165d2:	4603      	mov	r3, r0
   165d4:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   165d6:	2101      	movs	r1, #1
   165d8:	f242 002d 	movw	r0, #8237	; 0x202d
   165dc:	f7ff f896 	bl	1570c <hciCmdAlloc>
   165e0:	60f8      	str	r0, [r7, #12]
   165e2:	68fb      	ldr	r3, [r7, #12]
   165e4:	2b00      	cmp	r3, #0
   165e6:	d00a      	beq.n	165fe <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   165e8:	68fb      	ldr	r3, [r7, #12]
   165ea:	3303      	adds	r3, #3
   165ec:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   165ee:	68bb      	ldr	r3, [r7, #8]
   165f0:	1c5a      	adds	r2, r3, #1
   165f2:	60ba      	str	r2, [r7, #8]
   165f4:	79fa      	ldrb	r2, [r7, #7]
   165f6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   165f8:	68f8      	ldr	r0, [r7, #12]
   165fa:	f7ff f8b5 	bl	15768 <hciCmdSend>
  }
}
   165fe:	bf00      	nop
   16600:	3710      	adds	r7, #16
   16602:	46bd      	mov	sp, r7
   16604:	bd80      	pop	{r7, pc}

00016606 <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
   16606:	b580      	push	{r7, lr}
   16608:	b084      	sub	sp, #16
   1660a:	af00      	add	r7, sp, #0
   1660c:	4603      	mov	r3, r0
   1660e:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
   16610:	2102      	movs	r1, #2
   16612:	f242 002e 	movw	r0, #8238	; 0x202e
   16616:	f7ff f879 	bl	1570c <hciCmdAlloc>
   1661a:	60f8      	str	r0, [r7, #12]
   1661c:	68fb      	ldr	r3, [r7, #12]
   1661e:	2b00      	cmp	r3, #0
   16620:	d013      	beq.n	1664a <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16622:	68fb      	ldr	r3, [r7, #12]
   16624:	3303      	adds	r3, #3
   16626:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
   16628:	68bb      	ldr	r3, [r7, #8]
   1662a:	1c5a      	adds	r2, r3, #1
   1662c:	60ba      	str	r2, [r7, #8]
   1662e:	88fa      	ldrh	r2, [r7, #6]
   16630:	b2d2      	uxtb	r2, r2
   16632:	701a      	strb	r2, [r3, #0]
   16634:	68bb      	ldr	r3, [r7, #8]
   16636:	1c5a      	adds	r2, r3, #1
   16638:	60ba      	str	r2, [r7, #8]
   1663a:	88fa      	ldrh	r2, [r7, #6]
   1663c:	0a12      	lsrs	r2, r2, #8
   1663e:	b292      	uxth	r2, r2
   16640:	b2d2      	uxtb	r2, r2
   16642:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16644:	68f8      	ldr	r0, [r7, #12]
   16646:	f7ff f88f 	bl	15768 <hciCmdSend>
  }
}
   1664a:	bf00      	nop
   1664c:	3710      	adds	r7, #16
   1664e:	46bd      	mov	sp, r7
   16650:	bd80      	pop	{r7, pc}

00016652 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   16652:	b580      	push	{r7, lr}
   16654:	b084      	sub	sp, #16
   16656:	af00      	add	r7, sp, #0
   16658:	4603      	mov	r3, r0
   1665a:	6039      	str	r1, [r7, #0]
   1665c:	71fb      	strb	r3, [r7, #7]
   1665e:	4613      	mov	r3, r2
   16660:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   16662:	2108      	movs	r1, #8
   16664:	f242 004e 	movw	r0, #8270	; 0x204e
   16668:	f7ff f850 	bl	1570c <hciCmdAlloc>
   1666c:	60f8      	str	r0, [r7, #12]
   1666e:	68fb      	ldr	r3, [r7, #12]
   16670:	2b00      	cmp	r3, #0
   16672:	d016      	beq.n	166a2 <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16674:	68fb      	ldr	r3, [r7, #12]
   16676:	3303      	adds	r3, #3
   16678:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1667a:	68bb      	ldr	r3, [r7, #8]
   1667c:	1c5a      	adds	r2, r3, #1
   1667e:	60ba      	str	r2, [r7, #8]
   16680:	79fa      	ldrb	r2, [r7, #7]
   16682:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   16684:	6839      	ldr	r1, [r7, #0]
   16686:	68b8      	ldr	r0, [r7, #8]
   16688:	f7fd ff7e 	bl	14588 <BdaCpy>
   1668c:	68bb      	ldr	r3, [r7, #8]
   1668e:	3306      	adds	r3, #6
   16690:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
   16692:	68bb      	ldr	r3, [r7, #8]
   16694:	1c5a      	adds	r2, r3, #1
   16696:	60ba      	str	r2, [r7, #8]
   16698:	79ba      	ldrb	r2, [r7, #6]
   1669a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1669c:	68f8      	ldr	r0, [r7, #12]
   1669e:	f7ff f863 	bl	15768 <hciCmdSend>
  }
}
   166a2:	bf00      	nop
   166a4:	3710      	adds	r7, #16
   166a6:	46bd      	mov	sp, r7
   166a8:	bd80      	pop	{r7, pc}

000166aa <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   166aa:	b580      	push	{r7, lr}
   166ac:	b084      	sub	sp, #16
   166ae:	af00      	add	r7, sp, #0
   166b0:	4603      	mov	r3, r0
   166b2:	603a      	str	r2, [r7, #0]
   166b4:	80fb      	strh	r3, [r7, #6]
   166b6:	460b      	mov	r3, r1
   166b8:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
   166ba:	797b      	ldrb	r3, [r7, #5]
   166bc:	b29a      	uxth	r2, r3
   166be:	88fb      	ldrh	r3, [r7, #6]
   166c0:	4611      	mov	r1, r2
   166c2:	4618      	mov	r0, r3
   166c4:	f7ff f822 	bl	1570c <hciCmdAlloc>
   166c8:	60f8      	str	r0, [r7, #12]
   166ca:	68fb      	ldr	r3, [r7, #12]
   166cc:	2b00      	cmp	r3, #0
   166ce:	d00b      	beq.n	166e8 <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   166d0:	68fb      	ldr	r3, [r7, #12]
   166d2:	3303      	adds	r3, #3
   166d4:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
   166d6:	797b      	ldrb	r3, [r7, #5]
   166d8:	461a      	mov	r2, r3
   166da:	6839      	ldr	r1, [r7, #0]
   166dc:	68b8      	ldr	r0, [r7, #8]
   166de:	f7f5 fd3f 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   166e2:	68f8      	ldr	r0, [r7, #12]
   166e4:	f7ff f840 	bl	15768 <hciCmdSend>
  }
}
   166e8:	bf00      	nop
   166ea:	3710      	adds	r7, #16
   166ec:	46bd      	mov	sp, r7
   166ee:	bd80      	pop	{r7, pc}

000166f0 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   166f0:	b480      	push	{r7}
   166f2:	b085      	sub	sp, #20
   166f4:	af00      	add	r7, sp, #0
   166f6:	4603      	mov	r3, r0
   166f8:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   166fa:	4b13      	ldr	r3, [pc, #76]	; (16748 <hciCoreConnAlloc+0x58>)
   166fc:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   166fe:	2308      	movs	r3, #8
   16700:	73fb      	strb	r3, [r7, #15]
   16702:	e018      	b.n	16736 <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   16704:	68bb      	ldr	r3, [r7, #8]
   16706:	8a1b      	ldrh	r3, [r3, #16]
   16708:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1670c:	4293      	cmp	r3, r2
   1670e:	d10c      	bne.n	1672a <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   16710:	68bb      	ldr	r3, [r7, #8]
   16712:	88fa      	ldrh	r2, [r7, #6]
   16714:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   16716:	68bb      	ldr	r3, [r7, #8]
   16718:	2200      	movs	r2, #0
   1671a:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   1671c:	68bb      	ldr	r3, [r7, #8]
   1671e:	2200      	movs	r2, #0
   16720:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   16722:	68bb      	ldr	r3, [r7, #8]
   16724:	2200      	movs	r2, #0
   16726:	761a      	strb	r2, [r3, #24]

      return;
   16728:	e008      	b.n	1673c <hciCoreConnAlloc+0x4c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1672a:	7bfb      	ldrb	r3, [r7, #15]
   1672c:	3b01      	subs	r3, #1
   1672e:	73fb      	strb	r3, [r7, #15]
   16730:	68bb      	ldr	r3, [r7, #8]
   16732:	331c      	adds	r3, #28
   16734:	60bb      	str	r3, [r7, #8]
   16736:	7bfb      	ldrb	r3, [r7, #15]
   16738:	2b00      	cmp	r3, #0
   1673a:	d1e3      	bne.n	16704 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   1673c:	3714      	adds	r7, #20
   1673e:	46bd      	mov	sp, r7
   16740:	f85d 7b04 	ldr.w	r7, [sp], #4
   16744:	4770      	bx	lr
   16746:	bf00      	nop
   16748:	10005bd4 	.word	0x10005bd4

0001674c <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   1674c:	b580      	push	{r7, lr}
   1674e:	b084      	sub	sp, #16
   16750:	af00      	add	r7, sp, #0
   16752:	4603      	mov	r3, r0
   16754:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   16756:	4b1d      	ldr	r3, [pc, #116]	; (167cc <hciCoreConnFree+0x80>)
   16758:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1675a:	2308      	movs	r3, #8
   1675c:	73fb      	strb	r3, [r7, #15]
   1675e:	e02f      	b.n	167c0 <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
   16760:	68bb      	ldr	r3, [r7, #8]
   16762:	8a1b      	ldrh	r3, [r3, #16]
   16764:	88fa      	ldrh	r2, [r7, #6]
   16766:	429a      	cmp	r2, r3
   16768:	d124      	bne.n	167b4 <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   1676a:	68bb      	ldr	r3, [r7, #8]
   1676c:	681b      	ldr	r3, [r3, #0]
   1676e:	2b00      	cmp	r3, #0
   16770:	d007      	beq.n	16782 <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   16772:	68bb      	ldr	r3, [r7, #8]
   16774:	681b      	ldr	r3, [r3, #0]
   16776:	4618      	mov	r0, r3
   16778:	f7fe fd7a 	bl	15270 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   1677c:	68bb      	ldr	r3, [r7, #8]
   1677e:	2200      	movs	r2, #0
   16780:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   16782:	68bb      	ldr	r3, [r7, #8]
   16784:	2200      	movs	r2, #0
   16786:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   16788:	68bb      	ldr	r3, [r7, #8]
   1678a:	689b      	ldr	r3, [r3, #8]
   1678c:	2b00      	cmp	r3, #0
   1678e:	d007      	beq.n	167a0 <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   16790:	68bb      	ldr	r3, [r7, #8]
   16792:	689b      	ldr	r3, [r3, #8]
   16794:	4618      	mov	r0, r3
   16796:	f7fe fd6b 	bl	15270 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1679a:	68bb      	ldr	r3, [r7, #8]
   1679c:	2200      	movs	r2, #0
   1679e:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   167a0:	68bb      	ldr	r3, [r7, #8]
   167a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   167a6:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   167a8:	68bb      	ldr	r3, [r7, #8]
   167aa:	7e5b      	ldrb	r3, [r3, #25]
   167ac:	4618      	mov	r0, r3
   167ae:	f000 f895 	bl	168dc <hciCoreTxReady>

      return;
   167b2:	e008      	b.n	167c6 <hciCoreConnFree+0x7a>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   167b4:	7bfb      	ldrb	r3, [r7, #15]
   167b6:	3b01      	subs	r3, #1
   167b8:	73fb      	strb	r3, [r7, #15]
   167ba:	68bb      	ldr	r3, [r7, #8]
   167bc:	331c      	adds	r3, #28
   167be:	60bb      	str	r3, [r7, #8]
   167c0:	7bfb      	ldrb	r3, [r7, #15]
   167c2:	2b00      	cmp	r3, #0
   167c4:	d1cc      	bne.n	16760 <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   167c6:	3710      	adds	r7, #16
   167c8:	46bd      	mov	sp, r7
   167ca:	bd80      	pop	{r7, pc}
   167cc:	10005bd4 	.word	0x10005bd4

000167d0 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   167d0:	b480      	push	{r7}
   167d2:	b085      	sub	sp, #20
   167d4:	af00      	add	r7, sp, #0
   167d6:	4603      	mov	r3, r0
   167d8:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   167da:	4b0e      	ldr	r3, [pc, #56]	; (16814 <hciCoreConnByHandle+0x44>)
   167dc:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   167de:	2308      	movs	r3, #8
   167e0:	73fb      	strb	r3, [r7, #15]
   167e2:	e00c      	b.n	167fe <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
   167e4:	68bb      	ldr	r3, [r7, #8]
   167e6:	8a1b      	ldrh	r3, [r3, #16]
   167e8:	88fa      	ldrh	r2, [r7, #6]
   167ea:	429a      	cmp	r2, r3
   167ec:	d101      	bne.n	167f2 <hciCoreConnByHandle+0x22>
    {
      return pConn;
   167ee:	68bb      	ldr	r3, [r7, #8]
   167f0:	e009      	b.n	16806 <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   167f2:	7bfb      	ldrb	r3, [r7, #15]
   167f4:	3b01      	subs	r3, #1
   167f6:	73fb      	strb	r3, [r7, #15]
   167f8:	68bb      	ldr	r3, [r7, #8]
   167fa:	331c      	adds	r3, #28
   167fc:	60bb      	str	r3, [r7, #8]
   167fe:	7bfb      	ldrb	r3, [r7, #15]
   16800:	2b00      	cmp	r3, #0
   16802:	d1ef      	bne.n	167e4 <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   16804:	2300      	movs	r3, #0
}
   16806:	4618      	mov	r0, r3
   16808:	3714      	adds	r7, #20
   1680a:	46bd      	mov	sp, r7
   1680c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16810:	4770      	bx	lr
   16812:	bf00      	nop
   16814:	10005bd4 	.word	0x10005bd4

00016818 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   16818:	b480      	push	{r7}
   1681a:	b083      	sub	sp, #12
   1681c:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1681e:	4b10      	ldr	r3, [pc, #64]	; (16860 <hciCoreNextConnFragment+0x48>)
   16820:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16822:	2308      	movs	r3, #8
   16824:	71fb      	strb	r3, [r7, #7]
   16826:	e011      	b.n	1684c <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   16828:	683b      	ldr	r3, [r7, #0]
   1682a:	8a1b      	ldrh	r3, [r3, #16]
   1682c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16830:	4293      	cmp	r3, r2
   16832:	d005      	beq.n	16840 <hciCoreNextConnFragment+0x28>
   16834:	683b      	ldr	r3, [r7, #0]
   16836:	7d9b      	ldrb	r3, [r3, #22]
   16838:	2b00      	cmp	r3, #0
   1683a:	d001      	beq.n	16840 <hciCoreNextConnFragment+0x28>
    {
      return pConn;
   1683c:	683b      	ldr	r3, [r7, #0]
   1683e:	e009      	b.n	16854 <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16840:	79fb      	ldrb	r3, [r7, #7]
   16842:	3b01      	subs	r3, #1
   16844:	71fb      	strb	r3, [r7, #7]
   16846:	683b      	ldr	r3, [r7, #0]
   16848:	331c      	adds	r3, #28
   1684a:	603b      	str	r3, [r7, #0]
   1684c:	79fb      	ldrb	r3, [r7, #7]
   1684e:	2b00      	cmp	r3, #0
   16850:	d1ea      	bne.n	16828 <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
   16852:	2300      	movs	r3, #0
}
   16854:	4618      	mov	r0, r3
   16856:	370c      	adds	r7, #12
   16858:	46bd      	mov	sp, r7
   1685a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1685e:	4770      	bx	lr
   16860:	10005bd4 	.word	0x10005bd4

00016864 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   16864:	b580      	push	{r7, lr}
   16866:	b082      	sub	sp, #8
   16868:	af00      	add	r7, sp, #0
   1686a:	4603      	mov	r3, r0
   1686c:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   1686e:	88fb      	ldrh	r3, [r7, #6]
   16870:	4618      	mov	r0, r3
   16872:	f7ff ff3d 	bl	166f0 <hciCoreConnAlloc>
}
   16876:	bf00      	nop
   16878:	3708      	adds	r7, #8
   1687a:	46bd      	mov	sp, r7
   1687c:	bd80      	pop	{r7, pc}

0001687e <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   1687e:	b580      	push	{r7, lr}
   16880:	b082      	sub	sp, #8
   16882:	af00      	add	r7, sp, #0
   16884:	4603      	mov	r3, r0
   16886:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   16888:	88fb      	ldrh	r3, [r7, #6]
   1688a:	4618      	mov	r0, r3
   1688c:	f7ff ff5e 	bl	1674c <hciCoreConnFree>
}
   16890:	bf00      	nop
   16892:	3708      	adds	r7, #8
   16894:	46bd      	mov	sp, r7
   16896:	bd80      	pop	{r7, pc}

00016898 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   16898:	b580      	push	{r7, lr}
   1689a:	b082      	sub	sp, #8
   1689c:	af00      	add	r7, sp, #0
   1689e:	6078      	str	r0, [r7, #4]
   168a0:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   168a2:	687b      	ldr	r3, [r7, #4]
   168a4:	7e5b      	ldrb	r3, [r3, #25]
   168a6:	3301      	adds	r3, #1
   168a8:	b2da      	uxtb	r2, r3
   168aa:	687b      	ldr	r3, [r7, #4]
   168ac:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   168ae:	6839      	ldr	r1, [r7, #0]
   168b0:	6878      	ldr	r0, [r7, #4]
   168b2:	f002 fa47 	bl	18d44 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   168b6:	4b08      	ldr	r3, [pc, #32]	; (168d8 <hciCoreSendAclData+0x40>)
   168b8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   168bc:	2b00      	cmp	r3, #0
   168be:	d007      	beq.n	168d0 <hciCoreSendAclData+0x38>
  {
    hciCoreCb.availBufs--;
   168c0:	4b05      	ldr	r3, [pc, #20]	; (168d8 <hciCoreSendAclData+0x40>)
   168c2:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   168c6:	3b01      	subs	r3, #1
   168c8:	b2da      	uxtb	r2, r3
   168ca:	4b03      	ldr	r3, [pc, #12]	; (168d8 <hciCoreSendAclData+0x40>)
   168cc:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   168d0:	bf00      	nop
   168d2:	3708      	adds	r7, #8
   168d4:	46bd      	mov	sp, r7
   168d6:	bd80      	pop	{r7, pc}
   168d8:	10005bd4 	.word	0x10005bd4

000168dc <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   168dc:	b580      	push	{r7, lr}
   168de:	b086      	sub	sp, #24
   168e0:	af00      	add	r7, sp, #0
   168e2:	4603      	mov	r3, r0
   168e4:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   168e6:	79fb      	ldrb	r3, [r7, #7]
   168e8:	2b00      	cmp	r3, #0
   168ea:	d050      	beq.n	1698e <hciCoreTxReady+0xb2>
  {
    hciCoreCb.availBufs += bufs;
   168ec:	4b2d      	ldr	r3, [pc, #180]	; (169a4 <hciCoreTxReady+0xc8>)
   168ee:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   168f2:	79fb      	ldrb	r3, [r7, #7]
   168f4:	4413      	add	r3, r2
   168f6:	b2da      	uxtb	r2, r3
   168f8:	4b2a      	ldr	r3, [pc, #168]	; (169a4 <hciCoreTxReady+0xc8>)
   168fa:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   168fe:	4b29      	ldr	r3, [pc, #164]	; (169a4 <hciCoreTxReady+0xc8>)
   16900:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   16904:	4b27      	ldr	r3, [pc, #156]	; (169a4 <hciCoreTxReady+0xc8>)
   16906:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   1690a:	429a      	cmp	r2, r3
   1690c:	d93f      	bls.n	1698e <hciCoreTxReady+0xb2>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   1690e:	4b25      	ldr	r3, [pc, #148]	; (169a4 <hciCoreTxReady+0xc8>)
   16910:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   16914:	4b23      	ldr	r3, [pc, #140]	; (169a4 <hciCoreTxReady+0xc8>)
   16916:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   1691a:	e038      	b.n	1698e <hciCoreTxReady+0xb2>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   1691c:	2000      	movs	r0, #0
   1691e:	f000 f88d 	bl	16a3c <hciCoreTxAclContinue>
   16922:	4603      	mov	r3, r0
   16924:	2b00      	cmp	r3, #0
   16926:	d132      	bne.n	1698e <hciCoreTxReady+0xb2>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   16928:	f107 030b 	add.w	r3, r7, #11
   1692c:	4619      	mov	r1, r3
   1692e:	481e      	ldr	r0, [pc, #120]	; (169a8 <hciCoreTxReady+0xcc>)
   16930:	f7fe fcd8 	bl	152e4 <WsfMsgDeq>
   16934:	6178      	str	r0, [r7, #20]
   16936:	697b      	ldr	r3, [r7, #20]
   16938:	2b00      	cmp	r3, #0
   1693a:	d02e      	beq.n	1699a <hciCoreTxReady+0xbe>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   1693c:	697b      	ldr	r3, [r7, #20]
   1693e:	781b      	ldrb	r3, [r3, #0]
   16940:	b29a      	uxth	r2, r3
   16942:	697b      	ldr	r3, [r7, #20]
   16944:	3301      	adds	r3, #1
   16946:	781b      	ldrb	r3, [r3, #0]
   16948:	b29b      	uxth	r3, r3
   1694a:	021b      	lsls	r3, r3, #8
   1694c:	b29b      	uxth	r3, r3
   1694e:	4413      	add	r3, r2
   16950:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   16952:	697b      	ldr	r3, [r7, #20]
   16954:	3302      	adds	r3, #2
   16956:	781b      	ldrb	r3, [r3, #0]
   16958:	b29a      	uxth	r2, r3
   1695a:	697b      	ldr	r3, [r7, #20]
   1695c:	3303      	adds	r3, #3
   1695e:	781b      	ldrb	r3, [r3, #0]
   16960:	b29b      	uxth	r3, r3
   16962:	021b      	lsls	r3, r3, #8
   16964:	b29b      	uxth	r3, r3
   16966:	4413      	add	r3, r2
   16968:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1696a:	8a7b      	ldrh	r3, [r7, #18]
   1696c:	4618      	mov	r0, r3
   1696e:	f7ff ff2f 	bl	167d0 <hciCoreConnByHandle>
   16972:	60f8      	str	r0, [r7, #12]
   16974:	68fb      	ldr	r3, [r7, #12]
   16976:	2b00      	cmp	r3, #0
   16978:	d006      	beq.n	16988 <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
   1697a:	8a3b      	ldrh	r3, [r7, #16]
   1697c:	697a      	ldr	r2, [r7, #20]
   1697e:	4619      	mov	r1, r3
   16980:	68f8      	ldr	r0, [r7, #12]
   16982:	f000 f813 	bl	169ac <hciCoreTxAclStart>
   16986:	e002      	b.n	1698e <hciCoreTxReady+0xb2>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   16988:	6978      	ldr	r0, [r7, #20]
   1698a:	f7fe fc71 	bl	15270 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   1698e:	4b05      	ldr	r3, [pc, #20]	; (169a4 <hciCoreTxReady+0xc8>)
   16990:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16994:	2b00      	cmp	r3, #0
   16996:	d1c1      	bne.n	1691c <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   16998:	e000      	b.n	1699c <hciCoreTxReady+0xc0>
        break;
   1699a:	bf00      	nop
}
   1699c:	bf00      	nop
   1699e:	3718      	adds	r7, #24
   169a0:	46bd      	mov	sp, r7
   169a2:	bd80      	pop	{r7, pc}
   169a4:	10005bd4 	.word	0x10005bd4
   169a8:	10005cc4 	.word	0x10005cc4

000169ac <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   169ac:	b580      	push	{r7, lr}
   169ae:	b086      	sub	sp, #24
   169b0:	af00      	add	r7, sp, #0
   169b2:	60f8      	str	r0, [r7, #12]
   169b4:	460b      	mov	r3, r1
   169b6:	607a      	str	r2, [r7, #4]
   169b8:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   169ba:	f000 fb85 	bl	170c8 <HciGetBufSize>
   169be:	4603      	mov	r3, r0
   169c0:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   169c2:	897a      	ldrh	r2, [r7, #10]
   169c4:	8afb      	ldrh	r3, [r7, #22]
   169c6:	429a      	cmp	r2, r3
   169c8:	d92d      	bls.n	16a26 <hciCoreTxAclStart+0x7a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   169ca:	897a      	ldrh	r2, [r7, #10]
   169cc:	8afb      	ldrh	r3, [r7, #22]
   169ce:	1ad3      	subs	r3, r2, r3
   169d0:	b29a      	uxth	r2, r3
   169d2:	68fb      	ldr	r3, [r7, #12]
   169d4:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   169d6:	8afb      	ldrh	r3, [r7, #22]
   169d8:	687a      	ldr	r2, [r7, #4]
   169da:	441a      	add	r2, r3
   169dc:	68fb      	ldr	r3, [r7, #12]
   169de:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   169e0:	68fb      	ldr	r3, [r7, #12]
   169e2:	687a      	ldr	r2, [r7, #4]
   169e4:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   169e6:	68fb      	ldr	r3, [r7, #12]
   169e8:	2201      	movs	r2, #1
   169ea:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   169ec:	687b      	ldr	r3, [r7, #4]
   169ee:	3302      	adds	r3, #2
   169f0:	8afa      	ldrh	r2, [r7, #22]
   169f2:	b2d2      	uxtb	r2, r2
   169f4:	701a      	strb	r2, [r3, #0]
   169f6:	687b      	ldr	r3, [r7, #4]
   169f8:	3303      	adds	r3, #3
   169fa:	8afa      	ldrh	r2, [r7, #22]
   169fc:	0a12      	lsrs	r2, r2, #8
   169fe:	b292      	uxth	r2, r2
   16a00:	b2d2      	uxtb	r2, r2
   16a02:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   16a04:	6879      	ldr	r1, [r7, #4]
   16a06:	68f8      	ldr	r0, [r7, #12]
   16a08:	f7ff ff46 	bl	16898 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   16a0c:	bf00      	nop
   16a0e:	4b0a      	ldr	r3, [pc, #40]	; (16a38 <hciCoreTxAclStart+0x8c>)
   16a10:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16a14:	2b00      	cmp	r3, #0
   16a16:	d00a      	beq.n	16a2e <hciCoreTxAclStart+0x82>
   16a18:	68f8      	ldr	r0, [r7, #12]
   16a1a:	f000 f80f 	bl	16a3c <hciCoreTxAclContinue>
   16a1e:	4603      	mov	r3, r0
   16a20:	2b00      	cmp	r3, #0
   16a22:	d1f4      	bne.n	16a0e <hciCoreTxAclStart+0x62>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   16a24:	e003      	b.n	16a2e <hciCoreTxAclStart+0x82>
    hciCoreSendAclData(pConn, pData);
   16a26:	6879      	ldr	r1, [r7, #4]
   16a28:	68f8      	ldr	r0, [r7, #12]
   16a2a:	f7ff ff35 	bl	16898 <hciCoreSendAclData>
}
   16a2e:	bf00      	nop
   16a30:	3718      	adds	r7, #24
   16a32:	46bd      	mov	sp, r7
   16a34:	bd80      	pop	{r7, pc}
   16a36:	bf00      	nop
   16a38:	10005bd4 	.word	0x10005bd4

00016a3c <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   16a3c:	b590      	push	{r4, r7, lr}
   16a3e:	b085      	sub	sp, #20
   16a40:	af00      	add	r7, sp, #0
   16a42:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   16a44:	687b      	ldr	r3, [r7, #4]
   16a46:	2b00      	cmp	r3, #0
   16a48:	d102      	bne.n	16a50 <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
   16a4a:	f7ff fee5 	bl	16818 <hciCoreNextConnFragment>
   16a4e:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
   16a50:	687b      	ldr	r3, [r7, #4]
   16a52:	2b00      	cmp	r3, #0
   16a54:	d049      	beq.n	16aea <hciCoreTxAclContinue+0xae>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   16a56:	687b      	ldr	r3, [r7, #4]
   16a58:	8a5c      	ldrh	r4, [r3, #18]
   16a5a:	f000 fb35 	bl	170c8 <HciGetBufSize>
   16a5e:	4603      	mov	r3, r0
   16a60:	429c      	cmp	r4, r3
   16a62:	d202      	bcs.n	16a6a <hciCoreTxAclContinue+0x2e>
   16a64:	687b      	ldr	r3, [r7, #4]
   16a66:	8a5b      	ldrh	r3, [r3, #18]
   16a68:	e002      	b.n	16a70 <hciCoreTxAclContinue+0x34>
   16a6a:	f000 fb2d 	bl	170c8 <HciGetBufSize>
   16a6e:	4603      	mov	r3, r0
   16a70:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
   16a72:	89fb      	ldrh	r3, [r7, #14]
   16a74:	2b00      	cmp	r3, #0
   16a76:	d038      	beq.n	16aea <hciCoreTxAclContinue+0xae>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   16a78:	687b      	ldr	r3, [r7, #4]
   16a7a:	8a5a      	ldrh	r2, [r3, #18]
   16a7c:	89fb      	ldrh	r3, [r7, #14]
   16a7e:	1ad3      	subs	r3, r2, r3
   16a80:	b29a      	uxth	r2, r3
   16a82:	687b      	ldr	r3, [r7, #4]
   16a84:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   16a86:	687b      	ldr	r3, [r7, #4]
   16a88:	685b      	ldr	r3, [r3, #4]
   16a8a:	687a      	ldr	r2, [r7, #4]
   16a8c:	8a12      	ldrh	r2, [r2, #16]
   16a8e:	b2d2      	uxtb	r2, r2
   16a90:	701a      	strb	r2, [r3, #0]
   16a92:	687b      	ldr	r3, [r7, #4]
   16a94:	685b      	ldr	r3, [r3, #4]
   16a96:	3301      	adds	r3, #1
   16a98:	687a      	ldr	r2, [r7, #4]
   16a9a:	8a12      	ldrh	r2, [r2, #16]
   16a9c:	0a12      	lsrs	r2, r2, #8
   16a9e:	b292      	uxth	r2, r2
   16aa0:	f042 0210 	orr.w	r2, r2, #16
   16aa4:	b292      	uxth	r2, r2
   16aa6:	b2d2      	uxtb	r2, r2
   16aa8:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   16aaa:	687b      	ldr	r3, [r7, #4]
   16aac:	685b      	ldr	r3, [r3, #4]
   16aae:	3302      	adds	r3, #2
   16ab0:	89fa      	ldrh	r2, [r7, #14]
   16ab2:	b2d2      	uxtb	r2, r2
   16ab4:	701a      	strb	r2, [r3, #0]
   16ab6:	687b      	ldr	r3, [r7, #4]
   16ab8:	685b      	ldr	r3, [r3, #4]
   16aba:	3303      	adds	r3, #3
   16abc:	89fa      	ldrh	r2, [r7, #14]
   16abe:	0a12      	lsrs	r2, r2, #8
   16ac0:	b292      	uxth	r2, r2
   16ac2:	b2d2      	uxtb	r2, r2
   16ac4:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   16ac6:	687b      	ldr	r3, [r7, #4]
   16ac8:	685b      	ldr	r3, [r3, #4]
   16aca:	4619      	mov	r1, r3
   16acc:	6878      	ldr	r0, [r7, #4]
   16ace:	f7ff fee3 	bl	16898 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   16ad2:	687b      	ldr	r3, [r7, #4]
   16ad4:	8a5b      	ldrh	r3, [r3, #18]
   16ad6:	2b00      	cmp	r3, #0
   16ad8:	d005      	beq.n	16ae6 <hciCoreTxAclContinue+0xaa>
      {
        pConn->pNextTxFrag += aclLen;
   16ada:	687b      	ldr	r3, [r7, #4]
   16adc:	685a      	ldr	r2, [r3, #4]
   16ade:	89fb      	ldrh	r3, [r7, #14]
   16ae0:	441a      	add	r2, r3
   16ae2:	687b      	ldr	r3, [r7, #4]
   16ae4:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   16ae6:	2301      	movs	r3, #1
   16ae8:	e000      	b.n	16aec <hciCoreTxAclContinue+0xb0>
    }
  }

  return FALSE;
   16aea:	2300      	movs	r3, #0
}
   16aec:	4618      	mov	r0, r3
   16aee:	3714      	adds	r7, #20
   16af0:	46bd      	mov	sp, r7
   16af2:	bd90      	pop	{r4, r7, pc}

00016af4 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   16af4:	b580      	push	{r7, lr}
   16af6:	b082      	sub	sp, #8
   16af8:	af00      	add	r7, sp, #0
   16afa:	6078      	str	r0, [r7, #4]
   16afc:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   16afe:	687b      	ldr	r3, [r7, #4]
   16b00:	7d9b      	ldrb	r3, [r3, #22]
   16b02:	2b00      	cmp	r3, #0
   16b04:	d00f      	beq.n	16b26 <hciCoreTxAclComplete+0x32>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   16b06:	687b      	ldr	r3, [r7, #4]
   16b08:	8a5b      	ldrh	r3, [r3, #18]
   16b0a:	2b00      	cmp	r3, #0
   16b0c:	d111      	bne.n	16b32 <hciCoreTxAclComplete+0x3e>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   16b0e:	687b      	ldr	r3, [r7, #4]
   16b10:	681b      	ldr	r3, [r3, #0]
   16b12:	4618      	mov	r0, r3
   16b14:	f7fe fbac 	bl	15270 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   16b18:	687b      	ldr	r3, [r7, #4]
   16b1a:	2200      	movs	r2, #0
   16b1c:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   16b1e:	687b      	ldr	r3, [r7, #4]
   16b20:	2200      	movs	r2, #0
   16b22:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   16b24:	e005      	b.n	16b32 <hciCoreTxAclComplete+0x3e>
  else if (pData != NULL)
   16b26:	683b      	ldr	r3, [r7, #0]
   16b28:	2b00      	cmp	r3, #0
   16b2a:	d002      	beq.n	16b32 <hciCoreTxAclComplete+0x3e>
    WsfMsgFree(pData);
   16b2c:	6838      	ldr	r0, [r7, #0]
   16b2e:	f7fe fb9f 	bl	15270 <WsfMsgFree>
}
   16b32:	bf00      	nop
   16b34:	3708      	adds	r7, #8
   16b36:	46bd      	mov	sp, r7
   16b38:	bd80      	pop	{r7, pc}
	...

00016b3c <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   16b3c:	b580      	push	{r7, lr}
   16b3e:	b088      	sub	sp, #32
   16b40:	af00      	add	r7, sp, #0
   16b42:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   16b44:	2300      	movs	r3, #0
   16b46:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   16b48:	2301      	movs	r3, #1
   16b4a:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
   16b4c:	687b      	ldr	r3, [r7, #4]
   16b4e:	781b      	ldrb	r3, [r3, #0]
   16b50:	b29a      	uxth	r2, r3
   16b52:	687b      	ldr	r3, [r7, #4]
   16b54:	3301      	adds	r3, #1
   16b56:	781b      	ldrb	r3, [r3, #0]
   16b58:	b29b      	uxth	r3, r3
   16b5a:	021b      	lsls	r3, r3, #8
   16b5c:	b29b      	uxth	r3, r3
   16b5e:	4413      	add	r3, r2
   16b60:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   16b62:	8b3b      	ldrh	r3, [r7, #24]
   16b64:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   16b68:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
   16b6a:	8b3b      	ldrh	r3, [r7, #24]
   16b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   16b70:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   16b72:	687b      	ldr	r3, [r7, #4]
   16b74:	3302      	adds	r3, #2
   16b76:	781b      	ldrb	r3, [r3, #0]
   16b78:	b29a      	uxth	r2, r3
   16b7a:	687b      	ldr	r3, [r7, #4]
   16b7c:	3303      	adds	r3, #3
   16b7e:	781b      	ldrb	r3, [r3, #0]
   16b80:	b29b      	uxth	r3, r3
   16b82:	021b      	lsls	r3, r3, #8
   16b84:	b29b      	uxth	r3, r3
   16b86:	4413      	add	r3, r2
   16b88:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16b8a:	8b3b      	ldrh	r3, [r7, #24]
   16b8c:	4618      	mov	r0, r3
   16b8e:	f7ff fe1f 	bl	167d0 <hciCoreConnByHandle>
   16b92:	6138      	str	r0, [r7, #16]
   16b94:	693b      	ldr	r3, [r7, #16]
   16b96:	2b00      	cmp	r3, #0
   16b98:	f000 80ad 	beq.w	16cf6 <hciCoreAclReassembly+0x1ba>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   16b9c:	8afb      	ldrh	r3, [r7, #22]
   16b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   16ba2:	d17c      	bne.n	16c9e <hciCoreAclReassembly+0x162>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   16ba4:	693b      	ldr	r3, [r7, #16]
   16ba6:	689b      	ldr	r3, [r3, #8]
   16ba8:	2b00      	cmp	r3, #0
   16baa:	d007      	beq.n	16bbc <hciCoreAclReassembly+0x80>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   16bac:	693b      	ldr	r3, [r7, #16]
   16bae:	689b      	ldr	r3, [r3, #8]
   16bb0:	4618      	mov	r0, r3
   16bb2:	f7fe fb5d 	bl	15270 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   16bb6:	693b      	ldr	r3, [r7, #16]
   16bb8:	2200      	movs	r2, #0
   16bba:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   16bbc:	8abb      	ldrh	r3, [r7, #20]
   16bbe:	2b03      	cmp	r3, #3
   16bc0:	f240 8099 	bls.w	16cf6 <hciCoreAclReassembly+0x1ba>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   16bc4:	687b      	ldr	r3, [r7, #4]
   16bc6:	3304      	adds	r3, #4
   16bc8:	781b      	ldrb	r3, [r3, #0]
   16bca:	b29a      	uxth	r2, r3
   16bcc:	687b      	ldr	r3, [r7, #4]
   16bce:	3305      	adds	r3, #5
   16bd0:	781b      	ldrb	r3, [r3, #0]
   16bd2:	b29b      	uxth	r3, r3
   16bd4:	021b      	lsls	r3, r3, #8
   16bd6:	b29b      	uxth	r3, r3
   16bd8:	4413      	add	r3, r2
   16bda:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   16bdc:	89fb      	ldrh	r3, [r7, #14]
   16bde:	3304      	adds	r3, #4
   16be0:	4a4a      	ldr	r2, [pc, #296]	; (16d0c <hciCoreAclReassembly+0x1d0>)
   16be2:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
   16be6:	4293      	cmp	r3, r2
   16be8:	f300 8085 	bgt.w	16cf6 <hciCoreAclReassembly+0x1ba>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   16bec:	89fb      	ldrh	r3, [r7, #14]
   16bee:	1d1a      	adds	r2, r3, #4
   16bf0:	8abb      	ldrh	r3, [r7, #20]
   16bf2:	429a      	cmp	r2, r3
   16bf4:	dd4e      	ble.n	16c94 <hciCoreAclReassembly+0x158>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   16bf6:	89fb      	ldrh	r3, [r7, #14]
   16bf8:	3308      	adds	r3, #8
   16bfa:	b29b      	uxth	r3, r3
   16bfc:	2100      	movs	r1, #0
   16bfe:	4618      	mov	r0, r3
   16c00:	f7fe fb0a 	bl	15218 <WsfMsgDataAlloc>
   16c04:	4602      	mov	r2, r0
   16c06:	693b      	ldr	r3, [r7, #16]
   16c08:	609a      	str	r2, [r3, #8]
   16c0a:	693b      	ldr	r3, [r7, #16]
   16c0c:	689b      	ldr	r3, [r3, #8]
   16c0e:	2b00      	cmp	r3, #0
   16c10:	d071      	beq.n	16cf6 <hciCoreAclReassembly+0x1ba>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   16c12:	693b      	ldr	r3, [r7, #16]
   16c14:	689a      	ldr	r2, [r3, #8]
   16c16:	693b      	ldr	r3, [r7, #16]
   16c18:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   16c1a:	693b      	ldr	r3, [r7, #16]
   16c1c:	68db      	ldr	r3, [r3, #12]
   16c1e:	1c59      	adds	r1, r3, #1
   16c20:	693a      	ldr	r2, [r7, #16]
   16c22:	60d1      	str	r1, [r2, #12]
   16c24:	8b3a      	ldrh	r2, [r7, #24]
   16c26:	b2d2      	uxtb	r2, r2
   16c28:	701a      	strb	r2, [r3, #0]
   16c2a:	693b      	ldr	r3, [r7, #16]
   16c2c:	68db      	ldr	r3, [r3, #12]
   16c2e:	1c59      	adds	r1, r3, #1
   16c30:	693a      	ldr	r2, [r7, #16]
   16c32:	60d1      	str	r1, [r2, #12]
   16c34:	8b3a      	ldrh	r2, [r7, #24]
   16c36:	0a12      	lsrs	r2, r2, #8
   16c38:	b292      	uxth	r2, r2
   16c3a:	b2d2      	uxtb	r2, r2
   16c3c:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   16c3e:	693b      	ldr	r3, [r7, #16]
   16c40:	68db      	ldr	r3, [r3, #12]
   16c42:	1c59      	adds	r1, r3, #1
   16c44:	693a      	ldr	r2, [r7, #16]
   16c46:	60d1      	str	r1, [r2, #12]
   16c48:	89fa      	ldrh	r2, [r7, #14]
   16c4a:	b2d2      	uxtb	r2, r2
   16c4c:	3204      	adds	r2, #4
   16c4e:	b2d2      	uxtb	r2, r2
   16c50:	701a      	strb	r2, [r3, #0]
   16c52:	693b      	ldr	r3, [r7, #16]
   16c54:	68db      	ldr	r3, [r3, #12]
   16c56:	1c59      	adds	r1, r3, #1
   16c58:	693a      	ldr	r2, [r7, #16]
   16c5a:	60d1      	str	r1, [r2, #12]
   16c5c:	89fa      	ldrh	r2, [r7, #14]
   16c5e:	3204      	adds	r2, #4
   16c60:	1212      	asrs	r2, r2, #8
   16c62:	b2d2      	uxtb	r2, r2
   16c64:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   16c66:	693b      	ldr	r3, [r7, #16]
   16c68:	68d8      	ldr	r0, [r3, #12]
   16c6a:	687b      	ldr	r3, [r7, #4]
   16c6c:	3304      	adds	r3, #4
   16c6e:	8aba      	ldrh	r2, [r7, #20]
   16c70:	4619      	mov	r1, r3
   16c72:	f7f5 fa75 	bl	c160 <memcpy>
            pConn->pNextRxFrag += aclLen;
   16c76:	693b      	ldr	r3, [r7, #16]
   16c78:	68da      	ldr	r2, [r3, #12]
   16c7a:	8abb      	ldrh	r3, [r7, #20]
   16c7c:	441a      	add	r2, r3
   16c7e:	693b      	ldr	r3, [r7, #16]
   16c80:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   16c82:	89fa      	ldrh	r2, [r7, #14]
   16c84:	8abb      	ldrh	r3, [r7, #20]
   16c86:	1ad3      	subs	r3, r2, r3
   16c88:	b29b      	uxth	r3, r3
   16c8a:	3304      	adds	r3, #4
   16c8c:	b29a      	uxth	r2, r3
   16c8e:	693b      	ldr	r3, [r7, #16]
   16c90:	829a      	strh	r2, [r3, #20]
   16c92:	e030      	b.n	16cf6 <hciCoreAclReassembly+0x1ba>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   16c94:	687b      	ldr	r3, [r7, #4]
   16c96:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
   16c98:	2300      	movs	r3, #0
   16c9a:	76fb      	strb	r3, [r7, #27]
   16c9c:	e02b      	b.n	16cf6 <hciCoreAclReassembly+0x1ba>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   16c9e:	8afb      	ldrh	r3, [r7, #22]
   16ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16ca4:	d127      	bne.n	16cf6 <hciCoreAclReassembly+0x1ba>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   16ca6:	693b      	ldr	r3, [r7, #16]
   16ca8:	689b      	ldr	r3, [r3, #8]
   16caa:	2b00      	cmp	r3, #0
   16cac:	d023      	beq.n	16cf6 <hciCoreAclReassembly+0x1ba>
      {
        if (aclLen <= pConn->rxAclRemLen)
   16cae:	693b      	ldr	r3, [r7, #16]
   16cb0:	8a9b      	ldrh	r3, [r3, #20]
   16cb2:	8aba      	ldrh	r2, [r7, #20]
   16cb4:	429a      	cmp	r2, r3
   16cb6:	d81e      	bhi.n	16cf6 <hciCoreAclReassembly+0x1ba>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   16cb8:	693b      	ldr	r3, [r7, #16]
   16cba:	68d8      	ldr	r0, [r3, #12]
   16cbc:	687b      	ldr	r3, [r7, #4]
   16cbe:	3304      	adds	r3, #4
   16cc0:	8aba      	ldrh	r2, [r7, #20]
   16cc2:	4619      	mov	r1, r3
   16cc4:	f7f5 fa4c 	bl	c160 <memcpy>
          pConn->pNextRxFrag += aclLen;
   16cc8:	693b      	ldr	r3, [r7, #16]
   16cca:	68da      	ldr	r2, [r3, #12]
   16ccc:	8abb      	ldrh	r3, [r7, #20]
   16cce:	441a      	add	r2, r3
   16cd0:	693b      	ldr	r3, [r7, #16]
   16cd2:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   16cd4:	693b      	ldr	r3, [r7, #16]
   16cd6:	8a9a      	ldrh	r2, [r3, #20]
   16cd8:	8abb      	ldrh	r3, [r7, #20]
   16cda:	1ad3      	subs	r3, r2, r3
   16cdc:	b29a      	uxth	r2, r3
   16cde:	693b      	ldr	r3, [r7, #16]
   16ce0:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   16ce2:	693b      	ldr	r3, [r7, #16]
   16ce4:	8a9b      	ldrh	r3, [r3, #20]
   16ce6:	2b00      	cmp	r3, #0
   16ce8:	d105      	bne.n	16cf6 <hciCoreAclReassembly+0x1ba>
          {
            pDataRtn = pConn->pRxAclPkt;
   16cea:	693b      	ldr	r3, [r7, #16]
   16cec:	689b      	ldr	r3, [r3, #8]
   16cee:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
   16cf0:	693b      	ldr	r3, [r7, #16]
   16cf2:	2200      	movs	r2, #0
   16cf4:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   16cf6:	7efb      	ldrb	r3, [r7, #27]
   16cf8:	2b00      	cmp	r3, #0
   16cfa:	d002      	beq.n	16d02 <hciCoreAclReassembly+0x1c6>
  {
    WsfMsgFree(pData);
   16cfc:	6878      	ldr	r0, [r7, #4]
   16cfe:	f7fe fab7 	bl	15270 <WsfMsgFree>
  }

  return pDataRtn;
   16d02:	69fb      	ldr	r3, [r7, #28]
}
   16d04:	4618      	mov	r0, r3
   16d06:	3720      	adds	r7, #32
   16d08:	46bd      	mov	sp, r7
   16d0a:	bd80      	pop	{r7, pc}
   16d0c:	10005bd4 	.word	0x10005bd4

00016d10 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   16d10:	b580      	push	{r7, lr}
   16d12:	b082      	sub	sp, #8
   16d14:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   16d16:	4b19      	ldr	r3, [pc, #100]	; (16d7c <HciCoreInit+0x6c>)
   16d18:	2200      	movs	r2, #0
   16d1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   16d1e:	4b17      	ldr	r3, [pc, #92]	; (16d7c <HciCoreInit+0x6c>)
   16d20:	2200      	movs	r2, #0
   16d22:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
   16d26:	2300      	movs	r3, #0
   16d28:	71fb      	strb	r3, [r7, #7]
   16d2a:	e00d      	b.n	16d48 <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   16d2c:	79fa      	ldrb	r2, [r7, #7]
   16d2e:	4913      	ldr	r1, [pc, #76]	; (16d7c <HciCoreInit+0x6c>)
   16d30:	4613      	mov	r3, r2
   16d32:	00db      	lsls	r3, r3, #3
   16d34:	1a9b      	subs	r3, r3, r2
   16d36:	009b      	lsls	r3, r3, #2
   16d38:	440b      	add	r3, r1
   16d3a:	3310      	adds	r3, #16
   16d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16d40:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   16d42:	79fb      	ldrb	r3, [r7, #7]
   16d44:	3301      	adds	r3, #1
   16d46:	71fb      	strb	r3, [r7, #7]
   16d48:	79fb      	ldrb	r3, [r7, #7]
   16d4a:	2b07      	cmp	r3, #7
   16d4c:	d9ee      	bls.n	16d2c <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   16d4e:	4b0b      	ldr	r3, [pc, #44]	; (16d7c <HciCoreInit+0x6c>)
   16d50:	221b      	movs	r2, #27
   16d52:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   16d56:	4b09      	ldr	r3, [pc, #36]	; (16d7c <HciCoreInit+0x6c>)
   16d58:	2205      	movs	r2, #5
   16d5a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   16d5e:	4b07      	ldr	r3, [pc, #28]	; (16d7c <HciCoreInit+0x6c>)
   16d60:	2203      	movs	r2, #3
   16d62:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
   16d66:	4b05      	ldr	r3, [pc, #20]	; (16d7c <HciCoreInit+0x6c>)
   16d68:	2200      	movs	r2, #0
   16d6a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
   16d6e:	f000 f8d5 	bl	16f1c <hciCoreInit>
}
   16d72:	bf00      	nop
   16d74:	3708      	adds	r7, #8
   16d76:	46bd      	mov	sp, r7
   16d78:	bd80      	pop	{r7, pc}
   16d7a:	bf00      	nop
   16d7c:	10005bd4 	.word	0x10005bd4

00016d80 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   16d80:	b580      	push	{r7, lr}
   16d82:	b084      	sub	sp, #16
   16d84:	af00      	add	r7, sp, #0
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   16d86:	4b24      	ldr	r3, [pc, #144]	; (16e18 <HciResetSequence+0x98>)
   16d88:	60bb      	str	r3, [r7, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16d8a:	e002      	b.n	16d92 <HciResetSequence+0x12>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   16d8c:	6878      	ldr	r0, [r7, #4]
   16d8e:	f7fe fa6f 	bl	15270 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16d92:	1cfb      	adds	r3, r7, #3
   16d94:	4619      	mov	r1, r3
   16d96:	4821      	ldr	r0, [pc, #132]	; (16e1c <HciResetSequence+0x9c>)
   16d98:	f7fe faa4 	bl	152e4 <WsfMsgDeq>
   16d9c:	6078      	str	r0, [r7, #4]
   16d9e:	687b      	ldr	r3, [r7, #4]
   16da0:	2b00      	cmp	r3, #0
   16da2:	d1f3      	bne.n	16d8c <HciResetSequence+0xc>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16da4:	2308      	movs	r3, #8
   16da6:	73fb      	strb	r3, [r7, #15]
   16da8:	e029      	b.n	16dfe <HciResetSequence+0x7e>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   16daa:	68bb      	ldr	r3, [r7, #8]
   16dac:	681b      	ldr	r3, [r3, #0]
   16dae:	2b00      	cmp	r3, #0
   16db0:	d007      	beq.n	16dc2 <HciResetSequence+0x42>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   16db2:	68bb      	ldr	r3, [r7, #8]
   16db4:	681b      	ldr	r3, [r3, #0]
   16db6:	4618      	mov	r0, r3
   16db8:	f7fe fa5a 	bl	15270 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   16dbc:	68bb      	ldr	r3, [r7, #8]
   16dbe:	2200      	movs	r2, #0
   16dc0:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   16dc2:	68bb      	ldr	r3, [r7, #8]
   16dc4:	2200      	movs	r2, #0
   16dc6:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   16dc8:	68bb      	ldr	r3, [r7, #8]
   16dca:	689b      	ldr	r3, [r3, #8]
   16dcc:	2b00      	cmp	r3, #0
   16dce:	d007      	beq.n	16de0 <HciResetSequence+0x60>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   16dd0:	68bb      	ldr	r3, [r7, #8]
   16dd2:	689b      	ldr	r3, [r3, #8]
   16dd4:	4618      	mov	r0, r3
   16dd6:	f7fe fa4b 	bl	15270 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   16dda:	68bb      	ldr	r3, [r7, #8]
   16ddc:	2200      	movs	r2, #0
   16dde:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   16de0:	68bb      	ldr	r3, [r7, #8]
   16de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16de6:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   16de8:	68bb      	ldr	r3, [r7, #8]
   16dea:	7e5b      	ldrb	r3, [r3, #25]
   16dec:	4618      	mov	r0, r3
   16dee:	f7ff fd75 	bl	168dc <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16df2:	7bfb      	ldrb	r3, [r7, #15]
   16df4:	3b01      	subs	r3, #1
   16df6:	73fb      	strb	r3, [r7, #15]
   16df8:	68bb      	ldr	r3, [r7, #8]
   16dfa:	331c      	adds	r3, #28
   16dfc:	60bb      	str	r3, [r7, #8]
   16dfe:	7bfb      	ldrb	r3, [r7, #15]
   16e00:	2b00      	cmp	r3, #0
   16e02:	d1d2      	bne.n	16daa <HciResetSequence+0x2a>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   16e04:	4b05      	ldr	r3, [pc, #20]	; (16e1c <HciResetSequence+0x9c>)
   16e06:	2201      	movs	r2, #1
   16e08:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   16e0a:	f002 f923 	bl	19054 <hciCoreResetStart>
}
   16e0e:	bf00      	nop
   16e10:	3710      	adds	r7, #16
   16e12:	46bd      	mov	sp, r7
   16e14:	bd80      	pop	{r7, pc}
   16e16:	bf00      	nop
   16e18:	10005bd4 	.word	0x10005bd4
   16e1c:	100051fc 	.word	0x100051fc

00016e20 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   16e20:	b480      	push	{r7}
   16e22:	b083      	sub	sp, #12
   16e24:	af00      	add	r7, sp, #0
   16e26:	4603      	mov	r3, r0
   16e28:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
   16e2a:	4a05      	ldr	r2, [pc, #20]	; (16e40 <HciSetMaxRxAclLen+0x20>)
   16e2c:	88fb      	ldrh	r3, [r7, #6]
   16e2e:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
   16e32:	bf00      	nop
   16e34:	370c      	adds	r7, #12
   16e36:	46bd      	mov	sp, r7
   16e38:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e3c:	4770      	bx	lr
   16e3e:	bf00      	nop
   16e40:	10005bd4 	.word	0x10005bd4

00016e44 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   16e44:	b590      	push	{r4, r7, lr}
   16e46:	b085      	sub	sp, #20
   16e48:	af00      	add	r7, sp, #0
   16e4a:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   16e4c:	687b      	ldr	r3, [r7, #4]
   16e4e:	781b      	ldrb	r3, [r3, #0]
   16e50:	b29a      	uxth	r2, r3
   16e52:	687b      	ldr	r3, [r7, #4]
   16e54:	3301      	adds	r3, #1
   16e56:	781b      	ldrb	r3, [r3, #0]
   16e58:	b29b      	uxth	r3, r3
   16e5a:	021b      	lsls	r3, r3, #8
   16e5c:	b29b      	uxth	r3, r3
   16e5e:	4413      	add	r3, r2
   16e60:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   16e62:	687b      	ldr	r3, [r7, #4]
   16e64:	3302      	adds	r3, #2
   16e66:	781b      	ldrb	r3, [r3, #0]
   16e68:	b29a      	uxth	r2, r3
   16e6a:	687b      	ldr	r3, [r7, #4]
   16e6c:	3303      	adds	r3, #3
   16e6e:	781b      	ldrb	r3, [r3, #0]
   16e70:	b29b      	uxth	r3, r3
   16e72:	021b      	lsls	r3, r3, #8
   16e74:	b29b      	uxth	r3, r3
   16e76:	4413      	add	r3, r2
   16e78:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16e7a:	89fb      	ldrh	r3, [r7, #14]
   16e7c:	4618      	mov	r0, r3
   16e7e:	f7ff fca7 	bl	167d0 <hciCoreConnByHandle>
   16e82:	60b8      	str	r0, [r7, #8]
   16e84:	68bb      	ldr	r3, [r7, #8]
   16e86:	2b00      	cmp	r3, #0
   16e88:	d03a      	beq.n	16f00 <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   16e8a:	4821      	ldr	r0, [pc, #132]	; (16f10 <HciSendAclData+0xcc>)
   16e8c:	f7fe fb0b 	bl	154a6 <WsfQueueEmpty>
   16e90:	4603      	mov	r3, r0
   16e92:	2b00      	cmp	r3, #0
   16e94:	d00b      	beq.n	16eae <HciSendAclData+0x6a>
   16e96:	4b1f      	ldr	r3, [pc, #124]	; (16f14 <HciSendAclData+0xd0>)
   16e98:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16e9c:	2b00      	cmp	r3, #0
   16e9e:	d006      	beq.n	16eae <HciSendAclData+0x6a>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   16ea0:	89bb      	ldrh	r3, [r7, #12]
   16ea2:	687a      	ldr	r2, [r7, #4]
   16ea4:	4619      	mov	r1, r3
   16ea6:	68b8      	ldr	r0, [r7, #8]
   16ea8:	f7ff fd80 	bl	169ac <hciCoreTxAclStart>
   16eac:	e004      	b.n	16eb8 <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   16eae:	687a      	ldr	r2, [r7, #4]
   16eb0:	2100      	movs	r1, #0
   16eb2:	4817      	ldr	r0, [pc, #92]	; (16f10 <HciSendAclData+0xcc>)
   16eb4:	f7fe fa01 	bl	152ba <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   16eb8:	89bb      	ldrh	r3, [r7, #12]
   16eba:	1e5c      	subs	r4, r3, #1
   16ebc:	f000 f904 	bl	170c8 <HciGetBufSize>
   16ec0:	4603      	mov	r3, r0
   16ec2:	fb94 f3f3 	sdiv	r3, r4, r3
   16ec6:	1c59      	adds	r1, r3, #1
   16ec8:	68bb      	ldr	r3, [r7, #8]
   16eca:	7e1a      	ldrb	r2, [r3, #24]
   16ecc:	b2cb      	uxtb	r3, r1
   16ece:	4413      	add	r3, r2
   16ed0:	b2da      	uxtb	r2, r3
   16ed2:	68bb      	ldr	r3, [r7, #8]
   16ed4:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   16ed6:	68bb      	ldr	r3, [r7, #8]
   16ed8:	7e1a      	ldrb	r2, [r3, #24]
   16eda:	4b0e      	ldr	r3, [pc, #56]	; (16f14 <HciSendAclData+0xd0>)
   16edc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   16ee0:	429a      	cmp	r2, r3
   16ee2:	d310      	bcc.n	16f06 <HciSendAclData+0xc2>
   16ee4:	68bb      	ldr	r3, [r7, #8]
   16ee6:	7ddb      	ldrb	r3, [r3, #23]
   16ee8:	2b00      	cmp	r3, #0
   16eea:	d10c      	bne.n	16f06 <HciSendAclData+0xc2>
    {
      pConn->flowDisabled = TRUE;
   16eec:	68bb      	ldr	r3, [r7, #8]
   16eee:	2201      	movs	r2, #1
   16ef0:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   16ef2:	4b09      	ldr	r3, [pc, #36]	; (16f18 <HciSendAclData+0xd4>)
   16ef4:	695b      	ldr	r3, [r3, #20]
   16ef6:	89fa      	ldrh	r2, [r7, #14]
   16ef8:	2101      	movs	r1, #1
   16efa:	4610      	mov	r0, r2
   16efc:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   16efe:	e002      	b.n	16f06 <HciSendAclData+0xc2>
    WsfMsgFree(pData);
   16f00:	6878      	ldr	r0, [r7, #4]
   16f02:	f7fe f9b5 	bl	15270 <WsfMsgFree>
}
   16f06:	bf00      	nop
   16f08:	3714      	adds	r7, #20
   16f0a:	46bd      	mov	sp, r7
   16f0c:	bd90      	pop	{r4, r7, pc}
   16f0e:	bf00      	nop
   16f10:	10005cc4 	.word	0x10005cc4
   16f14:	10005bd4 	.word	0x10005bd4
   16f18:	100051fc 	.word	0x100051fc

00016f1c <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   16f1c:	b580      	push	{r7, lr}
   16f1e:	af00      	add	r7, sp, #0
  hciCmdInit();
   16f20:	f7fe fc5e 	bl	157e0 <hciCmdInit>
}
   16f24:	bf00      	nop
   16f26:	bd80      	pop	{r7, pc}

00016f28 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   16f28:	b580      	push	{r7, lr}
   16f2a:	b086      	sub	sp, #24
   16f2c:	af00      	add	r7, sp, #0
   16f2e:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   16f30:	2300      	movs	r3, #0
   16f32:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   16f34:	687b      	ldr	r3, [r7, #4]
   16f36:	1c5a      	adds	r2, r3, #1
   16f38:	607a      	str	r2, [r7, #4]
   16f3a:	781b      	ldrb	r3, [r3, #0]
   16f3c:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   16f3e:	e04c      	b.n	16fda <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   16f40:	687b      	ldr	r3, [r7, #4]
   16f42:	781b      	ldrb	r3, [r3, #0]
   16f44:	b29a      	uxth	r2, r3
   16f46:	687b      	ldr	r3, [r7, #4]
   16f48:	3301      	adds	r3, #1
   16f4a:	781b      	ldrb	r3, [r3, #0]
   16f4c:	b29b      	uxth	r3, r3
   16f4e:	021b      	lsls	r3, r3, #8
   16f50:	b29b      	uxth	r3, r3
   16f52:	4413      	add	r3, r2
   16f54:	82bb      	strh	r3, [r7, #20]
   16f56:	687b      	ldr	r3, [r7, #4]
   16f58:	3302      	adds	r3, #2
   16f5a:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   16f5c:	687b      	ldr	r3, [r7, #4]
   16f5e:	781b      	ldrb	r3, [r3, #0]
   16f60:	b29a      	uxth	r2, r3
   16f62:	687b      	ldr	r3, [r7, #4]
   16f64:	3301      	adds	r3, #1
   16f66:	781b      	ldrb	r3, [r3, #0]
   16f68:	b29b      	uxth	r3, r3
   16f6a:	021b      	lsls	r3, r3, #8
   16f6c:	b29b      	uxth	r3, r3
   16f6e:	4413      	add	r3, r2
   16f70:	827b      	strh	r3, [r7, #18]
   16f72:	687b      	ldr	r3, [r7, #4]
   16f74:	3302      	adds	r3, #2
   16f76:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16f78:	8abb      	ldrh	r3, [r7, #20]
   16f7a:	4618      	mov	r0, r3
   16f7c:	f7ff fc28 	bl	167d0 <hciCoreConnByHandle>
   16f80:	60f8      	str	r0, [r7, #12]
   16f82:	68fb      	ldr	r3, [r7, #12]
   16f84:	2b00      	cmp	r3, #0
   16f86:	d028      	beq.n	16fda <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   16f88:	68fb      	ldr	r3, [r7, #12]
   16f8a:	7e5a      	ldrb	r2, [r3, #25]
   16f8c:	8a7b      	ldrh	r3, [r7, #18]
   16f8e:	b2db      	uxtb	r3, r3
   16f90:	1ad3      	subs	r3, r2, r3
   16f92:	b2da      	uxtb	r2, r3
   16f94:	68fb      	ldr	r3, [r7, #12]
   16f96:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   16f98:	68fb      	ldr	r3, [r7, #12]
   16f9a:	7e1a      	ldrb	r2, [r3, #24]
   16f9c:	8a7b      	ldrh	r3, [r7, #18]
   16f9e:	b2db      	uxtb	r3, r3
   16fa0:	1ad3      	subs	r3, r2, r3
   16fa2:	b2da      	uxtb	r2, r3
   16fa4:	68fb      	ldr	r3, [r7, #12]
   16fa6:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   16fa8:	8a7b      	ldrh	r3, [r7, #18]
   16faa:	b2da      	uxtb	r2, r3
   16fac:	7dbb      	ldrb	r3, [r7, #22]
   16fae:	4413      	add	r3, r2
   16fb0:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   16fb2:	68fb      	ldr	r3, [r7, #12]
   16fb4:	7ddb      	ldrb	r3, [r3, #23]
   16fb6:	2b00      	cmp	r3, #0
   16fb8:	d00f      	beq.n	16fda <hciCoreNumCmplPkts+0xb2>
   16fba:	68fb      	ldr	r3, [r7, #12]
   16fbc:	7e1a      	ldrb	r2, [r3, #24]
   16fbe:	4b0d      	ldr	r3, [pc, #52]	; (16ff4 <hciCoreNumCmplPkts+0xcc>)
   16fc0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   16fc4:	429a      	cmp	r2, r3
   16fc6:	d808      	bhi.n	16fda <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
   16fc8:	68fb      	ldr	r3, [r7, #12]
   16fca:	2200      	movs	r2, #0
   16fcc:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   16fce:	4b0a      	ldr	r3, [pc, #40]	; (16ff8 <hciCoreNumCmplPkts+0xd0>)
   16fd0:	695b      	ldr	r3, [r3, #20]
   16fd2:	8aba      	ldrh	r2, [r7, #20]
   16fd4:	2100      	movs	r1, #0
   16fd6:	4610      	mov	r0, r2
   16fd8:	4798      	blx	r3
  while (numHandles-- > 0)
   16fda:	7dfb      	ldrb	r3, [r7, #23]
   16fdc:	1e5a      	subs	r2, r3, #1
   16fde:	75fa      	strb	r2, [r7, #23]
   16fe0:	2b00      	cmp	r3, #0
   16fe2:	d1ad      	bne.n	16f40 <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   16fe4:	7dbb      	ldrb	r3, [r7, #22]
   16fe6:	4618      	mov	r0, r3
   16fe8:	f7ff fc78 	bl	168dc <hciCoreTxReady>
}
   16fec:	bf00      	nop
   16fee:	3718      	adds	r7, #24
   16ff0:	46bd      	mov	sp, r7
   16ff2:	bd80      	pop	{r7, pc}
   16ff4:	10005bd4 	.word	0x10005bd4
   16ff8:	100051fc 	.word	0x100051fc

00016ffc <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   16ffc:	b580      	push	{r7, lr}
   16ffe:	b082      	sub	sp, #8
   17000:	af00      	add	r7, sp, #0
   17002:	4603      	mov	r3, r0
   17004:	6039      	str	r1, [r7, #0]
   17006:	71fb      	strb	r3, [r7, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   17008:	79fb      	ldrb	r3, [r7, #7]
   1700a:	683a      	ldr	r2, [r7, #0]
   1700c:	4619      	mov	r1, r3
   1700e:	4806      	ldr	r0, [pc, #24]	; (17028 <hciCoreRecv+0x2c>)
   17010:	f7fe f953 	bl	152ba <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   17014:	4b04      	ldr	r3, [pc, #16]	; (17028 <hciCoreRecv+0x2c>)
   17016:	7e1b      	ldrb	r3, [r3, #24]
   17018:	2101      	movs	r1, #1
   1701a:	4618      	mov	r0, r3
   1701c:	f002 fc60 	bl	198e0 <WsfSetEvent>
}
   17020:	bf00      	nop
   17022:	3708      	adds	r7, #8
   17024:	46bd      	mov	sp, r7
   17026:	bd80      	pop	{r7, pc}
   17028:	100051fc 	.word	0x100051fc

0001702c <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1702c:	b580      	push	{r7, lr}
   1702e:	b084      	sub	sp, #16
   17030:	af00      	add	r7, sp, #0
   17032:	4603      	mov	r3, r0
   17034:	6039      	str	r1, [r7, #0]
   17036:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   17038:	683b      	ldr	r3, [r7, #0]
   1703a:	2b00      	cmp	r3, #0
   1703c:	d007      	beq.n	1704e <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   1703e:	683b      	ldr	r3, [r7, #0]
   17040:	789b      	ldrb	r3, [r3, #2]
   17042:	2b01      	cmp	r3, #1
   17044:	d12f      	bne.n	170a6 <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
   17046:	6838      	ldr	r0, [r7, #0]
   17048:	f7fe fbe6 	bl	15818 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   1704c:	e02b      	b.n	170a6 <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
   1704e:	79fb      	ldrb	r3, [r7, #7]
   17050:	f003 0301 	and.w	r3, r3, #1
   17054:	2b00      	cmp	r3, #0
   17056:	d026      	beq.n	170a6 <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   17058:	e01b      	b.n	17092 <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
   1705a:	7afb      	ldrb	r3, [r7, #11]
   1705c:	2b04      	cmp	r3, #4
   1705e:	d10d      	bne.n	1707c <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
   17060:	68f8      	ldr	r0, [r7, #12]
   17062:	f001 fcd5 	bl	18a10 <hciEvtProcessMsg>
        if (hciCb.resetting)
   17066:	4b12      	ldr	r3, [pc, #72]	; (170b0 <HciCoreHandler+0x84>)
   17068:	7e5b      	ldrb	r3, [r3, #25]
   1706a:	2b00      	cmp	r3, #0
   1706c:	d002      	beq.n	17074 <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
   1706e:	68f8      	ldr	r0, [r7, #12]
   17070:	f001 fff6 	bl	19060 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   17074:	68f8      	ldr	r0, [r7, #12]
   17076:	f7fe f8fb 	bl	15270 <WsfMsgFree>
   1707a:	e00a      	b.n	17092 <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   1707c:	68f8      	ldr	r0, [r7, #12]
   1707e:	f7ff fd5d 	bl	16b3c <hciCoreAclReassembly>
   17082:	60f8      	str	r0, [r7, #12]
   17084:	68fb      	ldr	r3, [r7, #12]
   17086:	2b00      	cmp	r3, #0
   17088:	d003      	beq.n	17092 <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
   1708a:	4b09      	ldr	r3, [pc, #36]	; (170b0 <HciCoreHandler+0x84>)
   1708c:	691b      	ldr	r3, [r3, #16]
   1708e:	68f8      	ldr	r0, [r7, #12]
   17090:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   17092:	f107 030b 	add.w	r3, r7, #11
   17096:	4619      	mov	r1, r3
   17098:	4805      	ldr	r0, [pc, #20]	; (170b0 <HciCoreHandler+0x84>)
   1709a:	f7fe f923 	bl	152e4 <WsfMsgDeq>
   1709e:	60f8      	str	r0, [r7, #12]
   170a0:	68fb      	ldr	r3, [r7, #12]
   170a2:	2b00      	cmp	r3, #0
   170a4:	d1d9      	bne.n	1705a <HciCoreHandler+0x2e>
}
   170a6:	bf00      	nop
   170a8:	3710      	adds	r7, #16
   170aa:	46bd      	mov	sp, r7
   170ac:	bd80      	pop	{r7, pc}
   170ae:	bf00      	nop
   170b0:	100051fc 	.word	0x100051fc

000170b4 <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
   170b4:	b480      	push	{r7}
   170b6:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
   170b8:	4b02      	ldr	r3, [pc, #8]	; (170c4 <HciGetBdAddr+0x10>)
}
   170ba:	4618      	mov	r0, r3
   170bc:	46bd      	mov	sp, r7
   170be:	f85d 7b04 	ldr.w	r7, [sp], #4
   170c2:	4770      	bx	lr
   170c4:	10005cbc 	.word	0x10005cbc

000170c8 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
   170c8:	b480      	push	{r7}
   170ca:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
   170cc:	4b03      	ldr	r3, [pc, #12]	; (170dc <HciGetBufSize+0x14>)
   170ce:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
   170d2:	4618      	mov	r0, r3
   170d4:	46bd      	mov	sp, r7
   170d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   170da:	4770      	bx	lr
   170dc:	10005bd4 	.word	0x10005bd4

000170e0 <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
   170e0:	b480      	push	{r7}
   170e2:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   170e4:	4b05      	ldr	r3, [pc, #20]	; (170fc <HciGetLeSupFeat+0x1c>)
   170e6:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   170ea:	f023 0302 	bic.w	r3, r3, #2
   170ee:	b29b      	uxth	r3, r3
}
   170f0:	4618      	mov	r0, r3
   170f2:	46bd      	mov	sp, r7
   170f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   170f8:	4770      	bx	lr
   170fa:	bf00      	nop
   170fc:	10005bd4 	.word	0x10005bd4

00017100 <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
   17100:	b480      	push	{r7}
   17102:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
   17104:	4b03      	ldr	r3, [pc, #12]	; (17114 <HciGetMaxRxAclLen+0x14>)
   17106:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
   1710a:	4618      	mov	r0, r3
   1710c:	46bd      	mov	sp, r7
   1710e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17112:	4770      	bx	lr
   17114:	10005bd4 	.word	0x10005bd4

00017118 <HciLlPrivacySupported>:
 *
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
   17118:	b480      	push	{r7}
   1711a:	af00      	add	r7, sp, #0
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   1711c:	4b06      	ldr	r3, [pc, #24]	; (17138 <HciLlPrivacySupported+0x20>)
   1711e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
   17122:	2b00      	cmp	r3, #0
   17124:	bf14      	ite	ne
   17126:	2301      	movne	r3, #1
   17128:	2300      	moveq	r3, #0
   1712a:	b2db      	uxtb	r3, r3
}
   1712c:	4618      	mov	r0, r3
   1712e:	46bd      	mov	sp, r7
   17130:	f85d 7b04 	ldr.w	r7, [sp], #4
   17134:	4770      	bx	lr
   17136:	bf00      	nop
   17138:	10005bd4 	.word	0x10005bd4

0001713c <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1713c:	b580      	push	{r7, lr}
   1713e:	b084      	sub	sp, #16
   17140:	af00      	add	r7, sp, #0
   17142:	60f8      	str	r0, [r7, #12]
   17144:	60b9      	str	r1, [r7, #8]
   17146:	4613      	mov	r3, r2
   17148:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1714a:	68bb      	ldr	r3, [r7, #8]
   1714c:	1c5a      	adds	r2, r3, #1
   1714e:	60ba      	str	r2, [r7, #8]
   17150:	781a      	ldrb	r2, [r3, #0]
   17152:	68fb      	ldr	r3, [r7, #12]
   17154:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   17156:	68bb      	ldr	r3, [r7, #8]
   17158:	781b      	ldrb	r3, [r3, #0]
   1715a:	b29a      	uxth	r2, r3
   1715c:	68bb      	ldr	r3, [r7, #8]
   1715e:	3301      	adds	r3, #1
   17160:	781b      	ldrb	r3, [r3, #0]
   17162:	b29b      	uxth	r3, r3
   17164:	021b      	lsls	r3, r3, #8
   17166:	b29b      	uxth	r3, r3
   17168:	4413      	add	r3, r2
   1716a:	b29a      	uxth	r2, r3
   1716c:	68fb      	ldr	r3, [r7, #12]
   1716e:	80da      	strh	r2, [r3, #6]
   17170:	68bb      	ldr	r3, [r7, #8]
   17172:	3302      	adds	r3, #2
   17174:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   17176:	68bb      	ldr	r3, [r7, #8]
   17178:	1c5a      	adds	r2, r3, #1
   1717a:	60ba      	str	r2, [r7, #8]
   1717c:	781a      	ldrb	r2, [r3, #0]
   1717e:	68fb      	ldr	r3, [r7, #12]
   17180:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   17182:	68bb      	ldr	r3, [r7, #8]
   17184:	1c5a      	adds	r2, r3, #1
   17186:	60ba      	str	r2, [r7, #8]
   17188:	781a      	ldrb	r2, [r3, #0]
   1718a:	68fb      	ldr	r3, [r7, #12]
   1718c:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1718e:	68fb      	ldr	r3, [r7, #12]
   17190:	330a      	adds	r3, #10
   17192:	68b9      	ldr	r1, [r7, #8]
   17194:	4618      	mov	r0, r3
   17196:	f7fd f9f7 	bl	14588 <BdaCpy>
   1719a:	68bb      	ldr	r3, [r7, #8]
   1719c:	3306      	adds	r3, #6
   1719e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   171a0:	68bb      	ldr	r3, [r7, #8]
   171a2:	781b      	ldrb	r3, [r3, #0]
   171a4:	b29a      	uxth	r2, r3
   171a6:	68bb      	ldr	r3, [r7, #8]
   171a8:	3301      	adds	r3, #1
   171aa:	781b      	ldrb	r3, [r3, #0]
   171ac:	b29b      	uxth	r3, r3
   171ae:	021b      	lsls	r3, r3, #8
   171b0:	b29b      	uxth	r3, r3
   171b2:	4413      	add	r3, r2
   171b4:	b29a      	uxth	r2, r3
   171b6:	68fb      	ldr	r3, [r7, #12]
   171b8:	821a      	strh	r2, [r3, #16]
   171ba:	68bb      	ldr	r3, [r7, #8]
   171bc:	3302      	adds	r3, #2
   171be:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   171c0:	68bb      	ldr	r3, [r7, #8]
   171c2:	781b      	ldrb	r3, [r3, #0]
   171c4:	b29a      	uxth	r2, r3
   171c6:	68bb      	ldr	r3, [r7, #8]
   171c8:	3301      	adds	r3, #1
   171ca:	781b      	ldrb	r3, [r3, #0]
   171cc:	b29b      	uxth	r3, r3
   171ce:	021b      	lsls	r3, r3, #8
   171d0:	b29b      	uxth	r3, r3
   171d2:	4413      	add	r3, r2
   171d4:	b29a      	uxth	r2, r3
   171d6:	68fb      	ldr	r3, [r7, #12]
   171d8:	825a      	strh	r2, [r3, #18]
   171da:	68bb      	ldr	r3, [r7, #8]
   171dc:	3302      	adds	r3, #2
   171de:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   171e0:	68bb      	ldr	r3, [r7, #8]
   171e2:	781b      	ldrb	r3, [r3, #0]
   171e4:	b29a      	uxth	r2, r3
   171e6:	68bb      	ldr	r3, [r7, #8]
   171e8:	3301      	adds	r3, #1
   171ea:	781b      	ldrb	r3, [r3, #0]
   171ec:	b29b      	uxth	r3, r3
   171ee:	021b      	lsls	r3, r3, #8
   171f0:	b29b      	uxth	r3, r3
   171f2:	4413      	add	r3, r2
   171f4:	b29a      	uxth	r2, r3
   171f6:	68fb      	ldr	r3, [r7, #12]
   171f8:	829a      	strh	r2, [r3, #20]
   171fa:	68bb      	ldr	r3, [r7, #8]
   171fc:	3302      	adds	r3, #2
   171fe:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   17200:	68bb      	ldr	r3, [r7, #8]
   17202:	1c5a      	adds	r2, r3, #1
   17204:	60ba      	str	r2, [r7, #8]
   17206:	781a      	ldrb	r2, [r3, #0]
   17208:	68fb      	ldr	r3, [r7, #12]
   1720a:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   1720c:	68fb      	ldr	r3, [r7, #12]
   1720e:	3317      	adds	r3, #23
   17210:	2206      	movs	r2, #6
   17212:	2100      	movs	r1, #0
   17214:	4618      	mov	r0, r3
   17216:	f7f5 f8a1 	bl	c35c <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   1721a:	68fb      	ldr	r3, [r7, #12]
   1721c:	331d      	adds	r3, #29
   1721e:	2206      	movs	r2, #6
   17220:	2100      	movs	r1, #0
   17222:	4618      	mov	r0, r3
   17224:	f7f5 f89a 	bl	c35c <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   17228:	68fb      	ldr	r3, [r7, #12]
   1722a:	88da      	ldrh	r2, [r3, #6]
   1722c:	68fb      	ldr	r3, [r7, #12]
   1722e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   17230:	68fb      	ldr	r3, [r7, #12]
   17232:	791a      	ldrb	r2, [r3, #4]
   17234:	68fb      	ldr	r3, [r7, #12]
   17236:	70da      	strb	r2, [r3, #3]
}
   17238:	bf00      	nop
   1723a:	3710      	adds	r7, #16
   1723c:	46bd      	mov	sp, r7
   1723e:	bd80      	pop	{r7, pc}

00017240 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17240:	b580      	push	{r7, lr}
   17242:	b084      	sub	sp, #16
   17244:	af00      	add	r7, sp, #0
   17246:	60f8      	str	r0, [r7, #12]
   17248:	60b9      	str	r1, [r7, #8]
   1724a:	4613      	mov	r3, r2
   1724c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1724e:	68bb      	ldr	r3, [r7, #8]
   17250:	1c5a      	adds	r2, r3, #1
   17252:	60ba      	str	r2, [r7, #8]
   17254:	781a      	ldrb	r2, [r3, #0]
   17256:	68fb      	ldr	r3, [r7, #12]
   17258:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1725a:	68bb      	ldr	r3, [r7, #8]
   1725c:	781b      	ldrb	r3, [r3, #0]
   1725e:	b29a      	uxth	r2, r3
   17260:	68bb      	ldr	r3, [r7, #8]
   17262:	3301      	adds	r3, #1
   17264:	781b      	ldrb	r3, [r3, #0]
   17266:	b29b      	uxth	r3, r3
   17268:	021b      	lsls	r3, r3, #8
   1726a:	b29b      	uxth	r3, r3
   1726c:	4413      	add	r3, r2
   1726e:	b29a      	uxth	r2, r3
   17270:	68fb      	ldr	r3, [r7, #12]
   17272:	80da      	strh	r2, [r3, #6]
   17274:	68bb      	ldr	r3, [r7, #8]
   17276:	3302      	adds	r3, #2
   17278:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1727a:	68bb      	ldr	r3, [r7, #8]
   1727c:	1c5a      	adds	r2, r3, #1
   1727e:	60ba      	str	r2, [r7, #8]
   17280:	781a      	ldrb	r2, [r3, #0]
   17282:	68fb      	ldr	r3, [r7, #12]
   17284:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   17286:	68bb      	ldr	r3, [r7, #8]
   17288:	1c5a      	adds	r2, r3, #1
   1728a:	60ba      	str	r2, [r7, #8]
   1728c:	781a      	ldrb	r2, [r3, #0]
   1728e:	68fb      	ldr	r3, [r7, #12]
   17290:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   17292:	68fb      	ldr	r3, [r7, #12]
   17294:	330a      	adds	r3, #10
   17296:	68b9      	ldr	r1, [r7, #8]
   17298:	4618      	mov	r0, r3
   1729a:	f7fd f975 	bl	14588 <BdaCpy>
   1729e:	68bb      	ldr	r3, [r7, #8]
   172a0:	3306      	adds	r3, #6
   172a2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   172a4:	68fb      	ldr	r3, [r7, #12]
   172a6:	3317      	adds	r3, #23
   172a8:	68b9      	ldr	r1, [r7, #8]
   172aa:	4618      	mov	r0, r3
   172ac:	f7fd f96c 	bl	14588 <BdaCpy>
   172b0:	68bb      	ldr	r3, [r7, #8]
   172b2:	3306      	adds	r3, #6
   172b4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   172b6:	68fb      	ldr	r3, [r7, #12]
   172b8:	331d      	adds	r3, #29
   172ba:	68b9      	ldr	r1, [r7, #8]
   172bc:	4618      	mov	r0, r3
   172be:	f7fd f963 	bl	14588 <BdaCpy>
   172c2:	68bb      	ldr	r3, [r7, #8]
   172c4:	3306      	adds	r3, #6
   172c6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   172c8:	68bb      	ldr	r3, [r7, #8]
   172ca:	781b      	ldrb	r3, [r3, #0]
   172cc:	b29a      	uxth	r2, r3
   172ce:	68bb      	ldr	r3, [r7, #8]
   172d0:	3301      	adds	r3, #1
   172d2:	781b      	ldrb	r3, [r3, #0]
   172d4:	b29b      	uxth	r3, r3
   172d6:	021b      	lsls	r3, r3, #8
   172d8:	b29b      	uxth	r3, r3
   172da:	4413      	add	r3, r2
   172dc:	b29a      	uxth	r2, r3
   172de:	68fb      	ldr	r3, [r7, #12]
   172e0:	821a      	strh	r2, [r3, #16]
   172e2:	68bb      	ldr	r3, [r7, #8]
   172e4:	3302      	adds	r3, #2
   172e6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   172e8:	68bb      	ldr	r3, [r7, #8]
   172ea:	781b      	ldrb	r3, [r3, #0]
   172ec:	b29a      	uxth	r2, r3
   172ee:	68bb      	ldr	r3, [r7, #8]
   172f0:	3301      	adds	r3, #1
   172f2:	781b      	ldrb	r3, [r3, #0]
   172f4:	b29b      	uxth	r3, r3
   172f6:	021b      	lsls	r3, r3, #8
   172f8:	b29b      	uxth	r3, r3
   172fa:	4413      	add	r3, r2
   172fc:	b29a      	uxth	r2, r3
   172fe:	68fb      	ldr	r3, [r7, #12]
   17300:	825a      	strh	r2, [r3, #18]
   17302:	68bb      	ldr	r3, [r7, #8]
   17304:	3302      	adds	r3, #2
   17306:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   17308:	68bb      	ldr	r3, [r7, #8]
   1730a:	781b      	ldrb	r3, [r3, #0]
   1730c:	b29a      	uxth	r2, r3
   1730e:	68bb      	ldr	r3, [r7, #8]
   17310:	3301      	adds	r3, #1
   17312:	781b      	ldrb	r3, [r3, #0]
   17314:	b29b      	uxth	r3, r3
   17316:	021b      	lsls	r3, r3, #8
   17318:	b29b      	uxth	r3, r3
   1731a:	4413      	add	r3, r2
   1731c:	b29a      	uxth	r2, r3
   1731e:	68fb      	ldr	r3, [r7, #12]
   17320:	829a      	strh	r2, [r3, #20]
   17322:	68bb      	ldr	r3, [r7, #8]
   17324:	3302      	adds	r3, #2
   17326:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   17328:	68bb      	ldr	r3, [r7, #8]
   1732a:	1c5a      	adds	r2, r3, #1
   1732c:	60ba      	str	r2, [r7, #8]
   1732e:	781a      	ldrb	r2, [r3, #0]
   17330:	68fb      	ldr	r3, [r7, #12]
   17332:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   17334:	68fb      	ldr	r3, [r7, #12]
   17336:	88da      	ldrh	r2, [r3, #6]
   17338:	68fb      	ldr	r3, [r7, #12]
   1733a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1733c:	68fb      	ldr	r3, [r7, #12]
   1733e:	791a      	ldrb	r2, [r3, #4]
   17340:	68fb      	ldr	r3, [r7, #12]
   17342:	70da      	strb	r2, [r3, #3]
}
   17344:	bf00      	nop
   17346:	3710      	adds	r7, #16
   17348:	46bd      	mov	sp, r7
   1734a:	bd80      	pop	{r7, pc}

0001734c <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1734c:	b480      	push	{r7}
   1734e:	b085      	sub	sp, #20
   17350:	af00      	add	r7, sp, #0
   17352:	60f8      	str	r0, [r7, #12]
   17354:	60b9      	str	r1, [r7, #8]
   17356:	4613      	mov	r3, r2
   17358:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   1735a:	68bb      	ldr	r3, [r7, #8]
   1735c:	1c5a      	adds	r2, r3, #1
   1735e:	60ba      	str	r2, [r7, #8]
   17360:	781a      	ldrb	r2, [r3, #0]
   17362:	68fb      	ldr	r3, [r7, #12]
   17364:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   17366:	68bb      	ldr	r3, [r7, #8]
   17368:	781b      	ldrb	r3, [r3, #0]
   1736a:	b29a      	uxth	r2, r3
   1736c:	68bb      	ldr	r3, [r7, #8]
   1736e:	3301      	adds	r3, #1
   17370:	781b      	ldrb	r3, [r3, #0]
   17372:	b29b      	uxth	r3, r3
   17374:	021b      	lsls	r3, r3, #8
   17376:	b29b      	uxth	r3, r3
   17378:	4413      	add	r3, r2
   1737a:	b29a      	uxth	r2, r3
   1737c:	68fb      	ldr	r3, [r7, #12]
   1737e:	80da      	strh	r2, [r3, #6]
   17380:	68bb      	ldr	r3, [r7, #8]
   17382:	3302      	adds	r3, #2
   17384:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   17386:	68bb      	ldr	r3, [r7, #8]
   17388:	1c5a      	adds	r2, r3, #1
   1738a:	60ba      	str	r2, [r7, #8]
   1738c:	781a      	ldrb	r2, [r3, #0]
   1738e:	68fb      	ldr	r3, [r7, #12]
   17390:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   17392:	68fb      	ldr	r3, [r7, #12]
   17394:	88da      	ldrh	r2, [r3, #6]
   17396:	68fb      	ldr	r3, [r7, #12]
   17398:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   1739a:	68fb      	ldr	r3, [r7, #12]
   1739c:	791a      	ldrb	r2, [r3, #4]
   1739e:	68fb      	ldr	r3, [r7, #12]
   173a0:	70da      	strb	r2, [r3, #3]
}
   173a2:	bf00      	nop
   173a4:	3714      	adds	r7, #20
   173a6:	46bd      	mov	sp, r7
   173a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   173ac:	4770      	bx	lr

000173ae <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   173ae:	b480      	push	{r7}
   173b0:	b085      	sub	sp, #20
   173b2:	af00      	add	r7, sp, #0
   173b4:	60f8      	str	r0, [r7, #12]
   173b6:	60b9      	str	r1, [r7, #8]
   173b8:	4613      	mov	r3, r2
   173ba:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   173bc:	68bb      	ldr	r3, [r7, #8]
   173be:	1c5a      	adds	r2, r3, #1
   173c0:	60ba      	str	r2, [r7, #8]
   173c2:	781a      	ldrb	r2, [r3, #0]
   173c4:	68fb      	ldr	r3, [r7, #12]
   173c6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   173c8:	68bb      	ldr	r3, [r7, #8]
   173ca:	781b      	ldrb	r3, [r3, #0]
   173cc:	b29a      	uxth	r2, r3
   173ce:	68bb      	ldr	r3, [r7, #8]
   173d0:	3301      	adds	r3, #1
   173d2:	781b      	ldrb	r3, [r3, #0]
   173d4:	b29b      	uxth	r3, r3
   173d6:	021b      	lsls	r3, r3, #8
   173d8:	b29b      	uxth	r3, r3
   173da:	4413      	add	r3, r2
   173dc:	b29a      	uxth	r2, r3
   173de:	68fb      	ldr	r3, [r7, #12]
   173e0:	80da      	strh	r2, [r3, #6]
   173e2:	68bb      	ldr	r3, [r7, #8]
   173e4:	3302      	adds	r3, #2
   173e6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   173e8:	68bb      	ldr	r3, [r7, #8]
   173ea:	781b      	ldrb	r3, [r3, #0]
   173ec:	b29a      	uxth	r2, r3
   173ee:	68bb      	ldr	r3, [r7, #8]
   173f0:	3301      	adds	r3, #1
   173f2:	781b      	ldrb	r3, [r3, #0]
   173f4:	b29b      	uxth	r3, r3
   173f6:	021b      	lsls	r3, r3, #8
   173f8:	b29b      	uxth	r3, r3
   173fa:	4413      	add	r3, r2
   173fc:	b29a      	uxth	r2, r3
   173fe:	68fb      	ldr	r3, [r7, #12]
   17400:	811a      	strh	r2, [r3, #8]
   17402:	68bb      	ldr	r3, [r7, #8]
   17404:	3302      	adds	r3, #2
   17406:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   17408:	68bb      	ldr	r3, [r7, #8]
   1740a:	781b      	ldrb	r3, [r3, #0]
   1740c:	b29a      	uxth	r2, r3
   1740e:	68bb      	ldr	r3, [r7, #8]
   17410:	3301      	adds	r3, #1
   17412:	781b      	ldrb	r3, [r3, #0]
   17414:	b29b      	uxth	r3, r3
   17416:	021b      	lsls	r3, r3, #8
   17418:	b29b      	uxth	r3, r3
   1741a:	4413      	add	r3, r2
   1741c:	b29a      	uxth	r2, r3
   1741e:	68fb      	ldr	r3, [r7, #12]
   17420:	815a      	strh	r2, [r3, #10]
   17422:	68bb      	ldr	r3, [r7, #8]
   17424:	3302      	adds	r3, #2
   17426:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   17428:	68bb      	ldr	r3, [r7, #8]
   1742a:	781b      	ldrb	r3, [r3, #0]
   1742c:	b29a      	uxth	r2, r3
   1742e:	68bb      	ldr	r3, [r7, #8]
   17430:	3301      	adds	r3, #1
   17432:	781b      	ldrb	r3, [r3, #0]
   17434:	b29b      	uxth	r3, r3
   17436:	021b      	lsls	r3, r3, #8
   17438:	b29b      	uxth	r3, r3
   1743a:	4413      	add	r3, r2
   1743c:	b29a      	uxth	r2, r3
   1743e:	68fb      	ldr	r3, [r7, #12]
   17440:	819a      	strh	r2, [r3, #12]
   17442:	68bb      	ldr	r3, [r7, #8]
   17444:	3302      	adds	r3, #2
   17446:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   17448:	68fb      	ldr	r3, [r7, #12]
   1744a:	88da      	ldrh	r2, [r3, #6]
   1744c:	68fb      	ldr	r3, [r7, #12]
   1744e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   17450:	68fb      	ldr	r3, [r7, #12]
   17452:	791a      	ldrb	r2, [r3, #4]
   17454:	68fb      	ldr	r3, [r7, #12]
   17456:	70da      	strb	r2, [r3, #3]
}
   17458:	bf00      	nop
   1745a:	3714      	adds	r7, #20
   1745c:	46bd      	mov	sp, r7
   1745e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17462:	4770      	bx	lr

00017464 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17464:	b480      	push	{r7}
   17466:	b085      	sub	sp, #20
   17468:	af00      	add	r7, sp, #0
   1746a:	60f8      	str	r0, [r7, #12]
   1746c:	60b9      	str	r1, [r7, #8]
   1746e:	4613      	mov	r3, r2
   17470:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   17472:	68bb      	ldr	r3, [r7, #8]
   17474:	1c5a      	adds	r2, r3, #1
   17476:	60ba      	str	r2, [r7, #8]
   17478:	781a      	ldrb	r2, [r3, #0]
   1747a:	68fb      	ldr	r3, [r7, #12]
   1747c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   1747e:	68fb      	ldr	r3, [r7, #12]
   17480:	791a      	ldrb	r2, [r3, #4]
   17482:	68fb      	ldr	r3, [r7, #12]
   17484:	70da      	strb	r2, [r3, #3]
}
   17486:	bf00      	nop
   17488:	3714      	adds	r7, #20
   1748a:	46bd      	mov	sp, r7
   1748c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17490:	4770      	bx	lr

00017492 <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17492:	b480      	push	{r7}
   17494:	b085      	sub	sp, #20
   17496:	af00      	add	r7, sp, #0
   17498:	60f8      	str	r0, [r7, #12]
   1749a:	60b9      	str	r1, [r7, #8]
   1749c:	4613      	mov	r3, r2
   1749e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   174a0:	68bb      	ldr	r3, [r7, #8]
   174a2:	1c5a      	adds	r2, r3, #1
   174a4:	60ba      	str	r2, [r7, #8]
   174a6:	781a      	ldrb	r2, [r3, #0]
   174a8:	68fb      	ldr	r3, [r7, #12]
   174aa:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   174ac:	68bb      	ldr	r3, [r7, #8]
   174ae:	781b      	ldrb	r3, [r3, #0]
   174b0:	b29a      	uxth	r2, r3
   174b2:	68bb      	ldr	r3, [r7, #8]
   174b4:	3301      	adds	r3, #1
   174b6:	781b      	ldrb	r3, [r3, #0]
   174b8:	b29b      	uxth	r3, r3
   174ba:	021b      	lsls	r3, r3, #8
   174bc:	b29b      	uxth	r3, r3
   174be:	4413      	add	r3, r2
   174c0:	b29a      	uxth	r2, r3
   174c2:	68fb      	ldr	r3, [r7, #12]
   174c4:	80da      	strh	r2, [r3, #6]
   174c6:	68bb      	ldr	r3, [r7, #8]
   174c8:	3302      	adds	r3, #2
   174ca:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   174cc:	68bb      	ldr	r3, [r7, #8]
   174ce:	1c5a      	adds	r2, r3, #1
   174d0:	60ba      	str	r2, [r7, #8]
   174d2:	781b      	ldrb	r3, [r3, #0]
   174d4:	b25a      	sxtb	r2, r3
   174d6:	68fb      	ldr	r3, [r7, #12]
   174d8:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   174da:	68fb      	ldr	r3, [r7, #12]
   174dc:	88da      	ldrh	r2, [r3, #6]
   174de:	68fb      	ldr	r3, [r7, #12]
   174e0:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   174e2:	68fb      	ldr	r3, [r7, #12]
   174e4:	791a      	ldrb	r2, [r3, #4]
   174e6:	68fb      	ldr	r3, [r7, #12]
   174e8:	70da      	strb	r2, [r3, #3]
}
   174ea:	bf00      	nop
   174ec:	3714      	adds	r7, #20
   174ee:	46bd      	mov	sp, r7
   174f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   174f4:	4770      	bx	lr

000174f6 <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   174f6:	b580      	push	{r7, lr}
   174f8:	b084      	sub	sp, #16
   174fa:	af00      	add	r7, sp, #0
   174fc:	60f8      	str	r0, [r7, #12]
   174fe:	60b9      	str	r1, [r7, #8]
   17500:	4613      	mov	r3, r2
   17502:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   17504:	68bb      	ldr	r3, [r7, #8]
   17506:	1c5a      	adds	r2, r3, #1
   17508:	60ba      	str	r2, [r7, #8]
   1750a:	781a      	ldrb	r2, [r3, #0]
   1750c:	68fb      	ldr	r3, [r7, #12]
   1750e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   17510:	68bb      	ldr	r3, [r7, #8]
   17512:	781b      	ldrb	r3, [r3, #0]
   17514:	b29a      	uxth	r2, r3
   17516:	68bb      	ldr	r3, [r7, #8]
   17518:	3301      	adds	r3, #1
   1751a:	781b      	ldrb	r3, [r3, #0]
   1751c:	b29b      	uxth	r3, r3
   1751e:	021b      	lsls	r3, r3, #8
   17520:	b29b      	uxth	r3, r3
   17522:	4413      	add	r3, r2
   17524:	b29a      	uxth	r2, r3
   17526:	68fb      	ldr	r3, [r7, #12]
   17528:	80da      	strh	r2, [r3, #6]
   1752a:	68bb      	ldr	r3, [r7, #8]
   1752c:	3302      	adds	r3, #2
   1752e:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   17530:	68fb      	ldr	r3, [r7, #12]
   17532:	3308      	adds	r3, #8
   17534:	2205      	movs	r2, #5
   17536:	68b9      	ldr	r1, [r7, #8]
   17538:	4618      	mov	r0, r3
   1753a:	f7f4 fe11 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   1753e:	68fb      	ldr	r3, [r7, #12]
   17540:	88da      	ldrh	r2, [r3, #6]
   17542:	68fb      	ldr	r3, [r7, #12]
   17544:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   17546:	68fb      	ldr	r3, [r7, #12]
   17548:	791a      	ldrb	r2, [r3, #4]
   1754a:	68fb      	ldr	r3, [r7, #12]
   1754c:	70da      	strb	r2, [r3, #3]
}
   1754e:	bf00      	nop
   17550:	3710      	adds	r7, #16
   17552:	46bd      	mov	sp, r7
   17554:	bd80      	pop	{r7, pc}

00017556 <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17556:	b480      	push	{r7}
   17558:	b085      	sub	sp, #20
   1755a:	af00      	add	r7, sp, #0
   1755c:	60f8      	str	r0, [r7, #12]
   1755e:	60b9      	str	r1, [r7, #8]
   17560:	4613      	mov	r3, r2
   17562:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   17564:	68bb      	ldr	r3, [r7, #8]
   17566:	1c5a      	adds	r2, r3, #1
   17568:	60ba      	str	r2, [r7, #8]
   1756a:	781a      	ldrb	r2, [r3, #0]
   1756c:	68fb      	ldr	r3, [r7, #12]
   1756e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   17570:	68bb      	ldr	r3, [r7, #8]
   17572:	781a      	ldrb	r2, [r3, #0]
   17574:	68fb      	ldr	r3, [r7, #12]
   17576:	715a      	strb	r2, [r3, #5]
   17578:	68bb      	ldr	r3, [r7, #8]
   1757a:	3302      	adds	r3, #2
   1757c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   1757e:	68bb      	ldr	r3, [r7, #8]
   17580:	1c5a      	adds	r2, r3, #1
   17582:	60ba      	str	r2, [r7, #8]
   17584:	781b      	ldrb	r3, [r3, #0]
   17586:	b25a      	sxtb	r2, r3
   17588:	68fb      	ldr	r3, [r7, #12]
   1758a:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   1758c:	68fb      	ldr	r3, [r7, #12]
   1758e:	795b      	ldrb	r3, [r3, #5]
   17590:	b29a      	uxth	r2, r3
   17592:	68fb      	ldr	r3, [r7, #12]
   17594:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   17596:	68fb      	ldr	r3, [r7, #12]
   17598:	791a      	ldrb	r2, [r3, #4]
   1759a:	68fb      	ldr	r3, [r7, #12]
   1759c:	70da      	strb	r2, [r3, #3]
}
   1759e:	bf00      	nop
   175a0:	3714      	adds	r7, #20
   175a2:	46bd      	mov	sp, r7
   175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   175a8:	4770      	bx	lr

000175aa <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   175aa:	b480      	push	{r7}
   175ac:	b085      	sub	sp, #20
   175ae:	af00      	add	r7, sp, #0
   175b0:	60f8      	str	r0, [r7, #12]
   175b2:	60b9      	str	r1, [r7, #8]
   175b4:	4613      	mov	r3, r2
   175b6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   175b8:	68bb      	ldr	r3, [r7, #8]
   175ba:	1c5a      	adds	r2, r3, #1
   175bc:	60ba      	str	r2, [r7, #8]
   175be:	781a      	ldrb	r2, [r3, #0]
   175c0:	68fb      	ldr	r3, [r7, #12]
   175c2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   175c4:	68bb      	ldr	r3, [r7, #8]
   175c6:	781b      	ldrb	r3, [r3, #0]
   175c8:	b29a      	uxth	r2, r3
   175ca:	68bb      	ldr	r3, [r7, #8]
   175cc:	3301      	adds	r3, #1
   175ce:	781b      	ldrb	r3, [r3, #0]
   175d0:	b29b      	uxth	r3, r3
   175d2:	021b      	lsls	r3, r3, #8
   175d4:	b29b      	uxth	r3, r3
   175d6:	4413      	add	r3, r2
   175d8:	b29a      	uxth	r2, r3
   175da:	68fb      	ldr	r3, [r7, #12]
   175dc:	80da      	strh	r2, [r3, #6]
   175de:	68bb      	ldr	r3, [r7, #8]
   175e0:	3302      	adds	r3, #2
   175e2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   175e4:	68bb      	ldr	r3, [r7, #8]
   175e6:	1c5a      	adds	r2, r3, #1
   175e8:	60ba      	str	r2, [r7, #8]
   175ea:	781a      	ldrb	r2, [r3, #0]
   175ec:	68fb      	ldr	r3, [r7, #12]
   175ee:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   175f0:	68bb      	ldr	r3, [r7, #8]
   175f2:	781b      	ldrb	r3, [r3, #0]
   175f4:	b29a      	uxth	r2, r3
   175f6:	68bb      	ldr	r3, [r7, #8]
   175f8:	3301      	adds	r3, #1
   175fa:	781b      	ldrb	r3, [r3, #0]
   175fc:	b29b      	uxth	r3, r3
   175fe:	021b      	lsls	r3, r3, #8
   17600:	b29b      	uxth	r3, r3
   17602:	4413      	add	r3, r2
   17604:	b29a      	uxth	r2, r3
   17606:	68fb      	ldr	r3, [r7, #12]
   17608:	815a      	strh	r2, [r3, #10]
   1760a:	68bb      	ldr	r3, [r7, #8]
   1760c:	3302      	adds	r3, #2
   1760e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   17610:	68bb      	ldr	r3, [r7, #8]
   17612:	781b      	ldrb	r3, [r3, #0]
   17614:	b29a      	uxth	r2, r3
   17616:	68bb      	ldr	r3, [r7, #8]
   17618:	3301      	adds	r3, #1
   1761a:	781b      	ldrb	r3, [r3, #0]
   1761c:	b29b      	uxth	r3, r3
   1761e:	021b      	lsls	r3, r3, #8
   17620:	b29b      	uxth	r3, r3
   17622:	4413      	add	r3, r2
   17624:	b29a      	uxth	r2, r3
   17626:	68fb      	ldr	r3, [r7, #12]
   17628:	819a      	strh	r2, [r3, #12]
   1762a:	68bb      	ldr	r3, [r7, #8]
   1762c:	3302      	adds	r3, #2
   1762e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   17630:	68fb      	ldr	r3, [r7, #12]
   17632:	88da      	ldrh	r2, [r3, #6]
   17634:	68fb      	ldr	r3, [r7, #12]
   17636:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   17638:	68fb      	ldr	r3, [r7, #12]
   1763a:	791a      	ldrb	r2, [r3, #4]
   1763c:	68fb      	ldr	r3, [r7, #12]
   1763e:	70da      	strb	r2, [r3, #3]
}
   17640:	bf00      	nop
   17642:	3714      	adds	r7, #20
   17644:	46bd      	mov	sp, r7
   17646:	f85d 7b04 	ldr.w	r7, [sp], #4
   1764a:	4770      	bx	lr

0001764c <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1764c:	b580      	push	{r7, lr}
   1764e:	b084      	sub	sp, #16
   17650:	af00      	add	r7, sp, #0
   17652:	60f8      	str	r0, [r7, #12]
   17654:	60b9      	str	r1, [r7, #8]
   17656:	4613      	mov	r3, r2
   17658:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   1765a:	68bb      	ldr	r3, [r7, #8]
   1765c:	1c5a      	adds	r2, r3, #1
   1765e:	60ba      	str	r2, [r7, #8]
   17660:	781a      	ldrb	r2, [r3, #0]
   17662:	68fb      	ldr	r3, [r7, #12]
   17664:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   17666:	68bb      	ldr	r3, [r7, #8]
   17668:	781b      	ldrb	r3, [r3, #0]
   1766a:	b29a      	uxth	r2, r3
   1766c:	68bb      	ldr	r3, [r7, #8]
   1766e:	3301      	adds	r3, #1
   17670:	781b      	ldrb	r3, [r3, #0]
   17672:	b29b      	uxth	r3, r3
   17674:	021b      	lsls	r3, r3, #8
   17676:	b29b      	uxth	r3, r3
   17678:	4413      	add	r3, r2
   1767a:	b29a      	uxth	r2, r3
   1767c:	68fb      	ldr	r3, [r7, #12]
   1767e:	80da      	strh	r2, [r3, #6]
   17680:	68bb      	ldr	r3, [r7, #8]
   17682:	3302      	adds	r3, #2
   17684:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   17686:	68fb      	ldr	r3, [r7, #12]
   17688:	3308      	adds	r3, #8
   1768a:	2208      	movs	r2, #8
   1768c:	68b9      	ldr	r1, [r7, #8]
   1768e:	4618      	mov	r0, r3
   17690:	f7f4 fd66 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   17694:	68fb      	ldr	r3, [r7, #12]
   17696:	88da      	ldrh	r2, [r3, #6]
   17698:	68fb      	ldr	r3, [r7, #12]
   1769a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   1769c:	68fb      	ldr	r3, [r7, #12]
   1769e:	791a      	ldrb	r2, [r3, #4]
   176a0:	68fb      	ldr	r3, [r7, #12]
   176a2:	70da      	strb	r2, [r3, #3]
}
   176a4:	bf00      	nop
   176a6:	3710      	adds	r7, #16
   176a8:	46bd      	mov	sp, r7
   176aa:	bd80      	pop	{r7, pc}

000176ac <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   176ac:	b480      	push	{r7}
   176ae:	b085      	sub	sp, #20
   176b0:	af00      	add	r7, sp, #0
   176b2:	60f8      	str	r0, [r7, #12]
   176b4:	60b9      	str	r1, [r7, #8]
   176b6:	4613      	mov	r3, r2
   176b8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   176ba:	68bb      	ldr	r3, [r7, #8]
   176bc:	1c5a      	adds	r2, r3, #1
   176be:	60ba      	str	r2, [r7, #8]
   176c0:	781a      	ldrb	r2, [r3, #0]
   176c2:	68fb      	ldr	r3, [r7, #12]
   176c4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   176c6:	68bb      	ldr	r3, [r7, #8]
   176c8:	781b      	ldrb	r3, [r3, #0]
   176ca:	b29a      	uxth	r2, r3
   176cc:	68bb      	ldr	r3, [r7, #8]
   176ce:	3301      	adds	r3, #1
   176d0:	781b      	ldrb	r3, [r3, #0]
   176d2:	b29b      	uxth	r3, r3
   176d4:	021b      	lsls	r3, r3, #8
   176d6:	b29b      	uxth	r3, r3
   176d8:	4413      	add	r3, r2
   176da:	b29a      	uxth	r2, r3
   176dc:	68fb      	ldr	r3, [r7, #12]
   176de:	80da      	strh	r2, [r3, #6]
   176e0:	68bb      	ldr	r3, [r7, #8]
   176e2:	3302      	adds	r3, #2
   176e4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   176e6:	68fb      	ldr	r3, [r7, #12]
   176e8:	88da      	ldrh	r2, [r3, #6]
   176ea:	68fb      	ldr	r3, [r7, #12]
   176ec:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   176ee:	68fb      	ldr	r3, [r7, #12]
   176f0:	791a      	ldrb	r2, [r3, #4]
   176f2:	68fb      	ldr	r3, [r7, #12]
   176f4:	70da      	strb	r2, [r3, #3]
}
   176f6:	bf00      	nop
   176f8:	3714      	adds	r7, #20
   176fa:	46bd      	mov	sp, r7
   176fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   17700:	4770      	bx	lr

00017702 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17702:	b480      	push	{r7}
   17704:	b085      	sub	sp, #20
   17706:	af00      	add	r7, sp, #0
   17708:	60f8      	str	r0, [r7, #12]
   1770a:	60b9      	str	r1, [r7, #8]
   1770c:	4613      	mov	r3, r2
   1770e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   17710:	68bb      	ldr	r3, [r7, #8]
   17712:	1c5a      	adds	r2, r3, #1
   17714:	60ba      	str	r2, [r7, #8]
   17716:	781a      	ldrb	r2, [r3, #0]
   17718:	68fb      	ldr	r3, [r7, #12]
   1771a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   1771c:	68bb      	ldr	r3, [r7, #8]
   1771e:	781b      	ldrb	r3, [r3, #0]
   17720:	b29a      	uxth	r2, r3
   17722:	68bb      	ldr	r3, [r7, #8]
   17724:	3301      	adds	r3, #1
   17726:	781b      	ldrb	r3, [r3, #0]
   17728:	b29b      	uxth	r3, r3
   1772a:	021b      	lsls	r3, r3, #8
   1772c:	b29b      	uxth	r3, r3
   1772e:	4413      	add	r3, r2
   17730:	b29a      	uxth	r2, r3
   17732:	68fb      	ldr	r3, [r7, #12]
   17734:	80da      	strh	r2, [r3, #6]
   17736:	68bb      	ldr	r3, [r7, #8]
   17738:	3302      	adds	r3, #2
   1773a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   1773c:	68fb      	ldr	r3, [r7, #12]
   1773e:	88da      	ldrh	r2, [r3, #6]
   17740:	68fb      	ldr	r3, [r7, #12]
   17742:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   17744:	68fb      	ldr	r3, [r7, #12]
   17746:	791a      	ldrb	r2, [r3, #4]
   17748:	68fb      	ldr	r3, [r7, #12]
   1774a:	70da      	strb	r2, [r3, #3]
}
   1774c:	bf00      	nop
   1774e:	3714      	adds	r7, #20
   17750:	46bd      	mov	sp, r7
   17752:	f85d 7b04 	ldr.w	r7, [sp], #4
   17756:	4770      	bx	lr

00017758 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17758:	b480      	push	{r7}
   1775a:	b085      	sub	sp, #20
   1775c:	af00      	add	r7, sp, #0
   1775e:	60f8      	str	r0, [r7, #12]
   17760:	60b9      	str	r1, [r7, #8]
   17762:	4613      	mov	r3, r2
   17764:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   17766:	68bb      	ldr	r3, [r7, #8]
   17768:	1c5a      	adds	r2, r3, #1
   1776a:	60ba      	str	r2, [r7, #8]
   1776c:	781a      	ldrb	r2, [r3, #0]
   1776e:	68fb      	ldr	r3, [r7, #12]
   17770:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   17772:	68bb      	ldr	r3, [r7, #8]
   17774:	781b      	ldrb	r3, [r3, #0]
   17776:	b29a      	uxth	r2, r3
   17778:	68bb      	ldr	r3, [r7, #8]
   1777a:	3301      	adds	r3, #1
   1777c:	781b      	ldrb	r3, [r3, #0]
   1777e:	b29b      	uxth	r3, r3
   17780:	021b      	lsls	r3, r3, #8
   17782:	b29b      	uxth	r3, r3
   17784:	4413      	add	r3, r2
   17786:	b29a      	uxth	r2, r3
   17788:	68fb      	ldr	r3, [r7, #12]
   1778a:	80da      	strh	r2, [r3, #6]
   1778c:	68bb      	ldr	r3, [r7, #8]
   1778e:	3302      	adds	r3, #2
   17790:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   17792:	68fb      	ldr	r3, [r7, #12]
   17794:	88da      	ldrh	r2, [r3, #6]
   17796:	68fb      	ldr	r3, [r7, #12]
   17798:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   1779a:	68fb      	ldr	r3, [r7, #12]
   1779c:	791a      	ldrb	r2, [r3, #4]
   1779e:	68fb      	ldr	r3, [r7, #12]
   177a0:	70da      	strb	r2, [r3, #3]
}
   177a2:	bf00      	nop
   177a4:	3714      	adds	r7, #20
   177a6:	46bd      	mov	sp, r7
   177a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   177ac:	4770      	bx	lr

000177ae <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   177ae:	b480      	push	{r7}
   177b0:	b085      	sub	sp, #20
   177b2:	af00      	add	r7, sp, #0
   177b4:	60f8      	str	r0, [r7, #12]
   177b6:	60b9      	str	r1, [r7, #8]
   177b8:	4613      	mov	r3, r2
   177ba:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   177bc:	68bb      	ldr	r3, [r7, #8]
   177be:	1c5a      	adds	r2, r3, #1
   177c0:	60ba      	str	r2, [r7, #8]
   177c2:	781a      	ldrb	r2, [r3, #0]
   177c4:	68fb      	ldr	r3, [r7, #12]
   177c6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   177c8:	68bb      	ldr	r3, [r7, #8]
   177ca:	781b      	ldrb	r3, [r3, #0]
   177cc:	b29a      	uxth	r2, r3
   177ce:	68bb      	ldr	r3, [r7, #8]
   177d0:	3301      	adds	r3, #1
   177d2:	781b      	ldrb	r3, [r3, #0]
   177d4:	b29b      	uxth	r3, r3
   177d6:	021b      	lsls	r3, r3, #8
   177d8:	b29b      	uxth	r3, r3
   177da:	4413      	add	r3, r2
   177dc:	b29a      	uxth	r2, r3
   177de:	68fb      	ldr	r3, [r7, #12]
   177e0:	80da      	strh	r2, [r3, #6]
   177e2:	68bb      	ldr	r3, [r7, #8]
   177e4:	3302      	adds	r3, #2
   177e6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   177e8:	68bb      	ldr	r3, [r7, #8]
   177ea:	1c5a      	adds	r2, r3, #1
   177ec:	60ba      	str	r2, [r7, #8]
   177ee:	781a      	ldrb	r2, [r3, #0]
   177f0:	68fb      	ldr	r3, [r7, #12]
   177f2:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   177f4:	68fb      	ldr	r3, [r7, #12]
   177f6:	88da      	ldrh	r2, [r3, #6]
   177f8:	68fb      	ldr	r3, [r7, #12]
   177fa:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   177fc:	68fb      	ldr	r3, [r7, #12]
   177fe:	791a      	ldrb	r2, [r3, #4]
   17800:	68fb      	ldr	r3, [r7, #12]
   17802:	70da      	strb	r2, [r3, #3]
}
   17804:	bf00      	nop
   17806:	3714      	adds	r7, #20
   17808:	46bd      	mov	sp, r7
   1780a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1780e:	4770      	bx	lr

00017810 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17810:	b580      	push	{r7, lr}
   17812:	b084      	sub	sp, #16
   17814:	af00      	add	r7, sp, #0
   17816:	60f8      	str	r0, [r7, #12]
   17818:	60b9      	str	r1, [r7, #8]
   1781a:	4613      	mov	r3, r2
   1781c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   1781e:	68bb      	ldr	r3, [r7, #8]
   17820:	781b      	ldrb	r3, [r3, #0]
   17822:	b29a      	uxth	r2, r3
   17824:	68bb      	ldr	r3, [r7, #8]
   17826:	3301      	adds	r3, #1
   17828:	781b      	ldrb	r3, [r3, #0]
   1782a:	b29b      	uxth	r3, r3
   1782c:	021b      	lsls	r3, r3, #8
   1782e:	b29b      	uxth	r3, r3
   17830:	4413      	add	r3, r2
   17832:	b29a      	uxth	r2, r3
   17834:	68fb      	ldr	r3, [r7, #12]
   17836:	809a      	strh	r2, [r3, #4]
   17838:	68bb      	ldr	r3, [r7, #8]
   1783a:	3302      	adds	r3, #2
   1783c:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   1783e:	68fb      	ldr	r3, [r7, #12]
   17840:	3306      	adds	r3, #6
   17842:	2208      	movs	r2, #8
   17844:	68b9      	ldr	r1, [r7, #8]
   17846:	4618      	mov	r0, r3
   17848:	f7f4 fc8a 	bl	c160 <memcpy>
  p += HCI_RAND_LEN;
   1784c:	68bb      	ldr	r3, [r7, #8]
   1784e:	3308      	adds	r3, #8
   17850:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   17852:	68bb      	ldr	r3, [r7, #8]
   17854:	781b      	ldrb	r3, [r3, #0]
   17856:	b29a      	uxth	r2, r3
   17858:	68bb      	ldr	r3, [r7, #8]
   1785a:	3301      	adds	r3, #1
   1785c:	781b      	ldrb	r3, [r3, #0]
   1785e:	b29b      	uxth	r3, r3
   17860:	021b      	lsls	r3, r3, #8
   17862:	b29b      	uxth	r3, r3
   17864:	4413      	add	r3, r2
   17866:	b29a      	uxth	r2, r3
   17868:	68fb      	ldr	r3, [r7, #12]
   1786a:	81da      	strh	r2, [r3, #14]
   1786c:	68bb      	ldr	r3, [r7, #8]
   1786e:	3302      	adds	r3, #2
   17870:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   17872:	68fb      	ldr	r3, [r7, #12]
   17874:	889a      	ldrh	r2, [r3, #4]
   17876:	68fb      	ldr	r3, [r7, #12]
   17878:	801a      	strh	r2, [r3, #0]
}
   1787a:	bf00      	nop
   1787c:	3710      	adds	r7, #16
   1787e:	46bd      	mov	sp, r7
   17880:	bd80      	pop	{r7, pc}

00017882 <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17882:	b480      	push	{r7}
   17884:	b085      	sub	sp, #20
   17886:	af00      	add	r7, sp, #0
   17888:	60f8      	str	r0, [r7, #12]
   1788a:	60b9      	str	r1, [r7, #8]
   1788c:	4613      	mov	r3, r2
   1788e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   17890:	68bb      	ldr	r3, [r7, #8]
   17892:	781b      	ldrb	r3, [r3, #0]
   17894:	b29a      	uxth	r2, r3
   17896:	68bb      	ldr	r3, [r7, #8]
   17898:	3301      	adds	r3, #1
   1789a:	781b      	ldrb	r3, [r3, #0]
   1789c:	b29b      	uxth	r3, r3
   1789e:	021b      	lsls	r3, r3, #8
   178a0:	b29b      	uxth	r3, r3
   178a2:	4413      	add	r3, r2
   178a4:	b29a      	uxth	r2, r3
   178a6:	68fb      	ldr	r3, [r7, #12]
   178a8:	809a      	strh	r2, [r3, #4]
   178aa:	68bb      	ldr	r3, [r7, #8]
   178ac:	3302      	adds	r3, #2
   178ae:	60bb      	str	r3, [r7, #8]
}
   178b0:	bf00      	nop
   178b2:	3714      	adds	r7, #20
   178b4:	46bd      	mov	sp, r7
   178b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   178ba:	4770      	bx	lr

000178bc <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   178bc:	b580      	push	{r7, lr}
   178be:	b084      	sub	sp, #16
   178c0:	af00      	add	r7, sp, #0
   178c2:	60f8      	str	r0, [r7, #12]
   178c4:	60b9      	str	r1, [r7, #8]
   178c6:	4613      	mov	r3, r2
   178c8:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
   178ca:	68bb      	ldr	r3, [r7, #8]
   178cc:	3b02      	subs	r3, #2
   178ce:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   178d0:	68bb      	ldr	r3, [r7, #8]
   178d2:	781b      	ldrb	r3, [r3, #0]
   178d4:	b29a      	uxth	r2, r3
   178d6:	68bb      	ldr	r3, [r7, #8]
   178d8:	3301      	adds	r3, #1
   178da:	781b      	ldrb	r3, [r3, #0]
   178dc:	b29b      	uxth	r3, r3
   178de:	021b      	lsls	r3, r3, #8
   178e0:	b29b      	uxth	r3, r3
   178e2:	4413      	add	r3, r2
   178e4:	b29a      	uxth	r2, r3
   178e6:	68fb      	ldr	r3, [r7, #12]
   178e8:	809a      	strh	r2, [r3, #4]
   178ea:	68bb      	ldr	r3, [r7, #8]
   178ec:	3302      	adds	r3, #2
   178ee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   178f0:	68bb      	ldr	r3, [r7, #8]
   178f2:	1c5a      	adds	r2, r3, #1
   178f4:	60ba      	str	r2, [r7, #8]
   178f6:	781a      	ldrb	r2, [r3, #0]
   178f8:	68fb      	ldr	r3, [r7, #12]
   178fa:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   178fc:	68fb      	ldr	r3, [r7, #12]
   178fe:	1d98      	adds	r0, r3, #6
   17900:	79fb      	ldrb	r3, [r7, #7]
   17902:	3b04      	subs	r3, #4
   17904:	461a      	mov	r2, r3
   17906:	68b9      	ldr	r1, [r7, #8]
   17908:	f7f4 fc2a 	bl	c160 <memcpy>
}
   1790c:	bf00      	nop
   1790e:	3710      	adds	r7, #16
   17910:	46bd      	mov	sp, r7
   17912:	bd80      	pop	{r7, pc}

00017914 <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17914:	b580      	push	{r7, lr}
   17916:	b084      	sub	sp, #16
   17918:	af00      	add	r7, sp, #0
   1791a:	60f8      	str	r0, [r7, #12]
   1791c:	60b9      	str	r1, [r7, #8]
   1791e:	4613      	mov	r3, r2
   17920:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   17922:	68fb      	ldr	r3, [r7, #12]
   17924:	3304      	adds	r3, #4
   17926:	79fa      	ldrb	r2, [r7, #7]
   17928:	68b9      	ldr	r1, [r7, #8]
   1792a:	4618      	mov	r0, r3
   1792c:	f7f4 fc18 	bl	c160 <memcpy>
}
   17930:	bf00      	nop
   17932:	3710      	adds	r7, #16
   17934:	46bd      	mov	sp, r7
   17936:	bd80      	pop	{r7, pc}

00017938 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17938:	b480      	push	{r7}
   1793a:	b085      	sub	sp, #20
   1793c:	af00      	add	r7, sp, #0
   1793e:	60f8      	str	r0, [r7, #12]
   17940:	60b9      	str	r1, [r7, #8]
   17942:	4613      	mov	r3, r2
   17944:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   17946:	68bb      	ldr	r3, [r7, #8]
   17948:	1c5a      	adds	r2, r3, #1
   1794a:	60ba      	str	r2, [r7, #8]
   1794c:	781a      	ldrb	r2, [r3, #0]
   1794e:	68fb      	ldr	r3, [r7, #12]
   17950:	711a      	strb	r2, [r3, #4]
}
   17952:	bf00      	nop
   17954:	3714      	adds	r7, #20
   17956:	46bd      	mov	sp, r7
   17958:	f85d 7b04 	ldr.w	r7, [sp], #4
   1795c:	4770      	bx	lr

0001795e <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1795e:	b580      	push	{r7, lr}
   17960:	b084      	sub	sp, #16
   17962:	af00      	add	r7, sp, #0
   17964:	60f8      	str	r0, [r7, #12]
   17966:	60b9      	str	r1, [r7, #8]
   17968:	4613      	mov	r3, r2
   1796a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   1796c:	68bb      	ldr	r3, [r7, #8]
   1796e:	1c5a      	adds	r2, r3, #1
   17970:	60ba      	str	r2, [r7, #8]
   17972:	781a      	ldrb	r2, [r3, #0]
   17974:	68fb      	ldr	r3, [r7, #12]
   17976:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   17978:	68fb      	ldr	r3, [r7, #12]
   1797a:	3305      	adds	r3, #5
   1797c:	2210      	movs	r2, #16
   1797e:	68b9      	ldr	r1, [r7, #8]
   17980:	4618      	mov	r0, r3
   17982:	f7f4 fbed 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   17986:	68fb      	ldr	r3, [r7, #12]
   17988:	791a      	ldrb	r2, [r3, #4]
   1798a:	68fb      	ldr	r3, [r7, #12]
   1798c:	70da      	strb	r2, [r3, #3]
}
   1798e:	bf00      	nop
   17990:	3710      	adds	r7, #16
   17992:	46bd      	mov	sp, r7
   17994:	bd80      	pop	{r7, pc}

00017996 <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17996:	b580      	push	{r7, lr}
   17998:	b084      	sub	sp, #16
   1799a:	af00      	add	r7, sp, #0
   1799c:	60f8      	str	r0, [r7, #12]
   1799e:	60b9      	str	r1, [r7, #8]
   179a0:	4613      	mov	r3, r2
   179a2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   179a4:	68bb      	ldr	r3, [r7, #8]
   179a6:	1c5a      	adds	r2, r3, #1
   179a8:	60ba      	str	r2, [r7, #8]
   179aa:	781a      	ldrb	r2, [r3, #0]
   179ac:	68fb      	ldr	r3, [r7, #12]
   179ae:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   179b0:	68fb      	ldr	r3, [r7, #12]
   179b2:	3305      	adds	r3, #5
   179b4:	2208      	movs	r2, #8
   179b6:	68b9      	ldr	r1, [r7, #8]
   179b8:	4618      	mov	r0, r3
   179ba:	f7f4 fbd1 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   179be:	68fb      	ldr	r3, [r7, #12]
   179c0:	791a      	ldrb	r2, [r3, #4]
   179c2:	68fb      	ldr	r3, [r7, #12]
   179c4:	70da      	strb	r2, [r3, #3]
}
   179c6:	bf00      	nop
   179c8:	3710      	adds	r7, #16
   179ca:	46bd      	mov	sp, r7
   179cc:	bd80      	pop	{r7, pc}

000179ce <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   179ce:	b480      	push	{r7}
   179d0:	b085      	sub	sp, #20
   179d2:	af00      	add	r7, sp, #0
   179d4:	60f8      	str	r0, [r7, #12]
   179d6:	60b9      	str	r1, [r7, #8]
   179d8:	4613      	mov	r3, r2
   179da:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   179dc:	68bb      	ldr	r3, [r7, #8]
   179de:	1c5a      	adds	r2, r3, #1
   179e0:	60ba      	str	r2, [r7, #8]
   179e2:	781a      	ldrb	r2, [r3, #0]
   179e4:	68fb      	ldr	r3, [r7, #12]
   179e6:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   179e8:	68fb      	ldr	r3, [r7, #12]
   179ea:	791a      	ldrb	r2, [r3, #4]
   179ec:	68fb      	ldr	r3, [r7, #12]
   179ee:	70da      	strb	r2, [r3, #3]
}
   179f0:	bf00      	nop
   179f2:	3714      	adds	r7, #20
   179f4:	46bd      	mov	sp, r7
   179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   179fa:	4770      	bx	lr

000179fc <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   179fc:	b480      	push	{r7}
   179fe:	b085      	sub	sp, #20
   17a00:	af00      	add	r7, sp, #0
   17a02:	60f8      	str	r0, [r7, #12]
   17a04:	60b9      	str	r1, [r7, #8]
   17a06:	4613      	mov	r3, r2
   17a08:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   17a0a:	68bb      	ldr	r3, [r7, #8]
   17a0c:	1c5a      	adds	r2, r3, #1
   17a0e:	60ba      	str	r2, [r7, #8]
   17a10:	781a      	ldrb	r2, [r3, #0]
   17a12:	68fb      	ldr	r3, [r7, #12]
   17a14:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   17a16:	68fb      	ldr	r3, [r7, #12]
   17a18:	791a      	ldrb	r2, [r3, #4]
   17a1a:	68fb      	ldr	r3, [r7, #12]
   17a1c:	70da      	strb	r2, [r3, #3]
}
   17a1e:	bf00      	nop
   17a20:	3714      	adds	r7, #20
   17a22:	46bd      	mov	sp, r7
   17a24:	f85d 7b04 	ldr.w	r7, [sp], #4
   17a28:	4770      	bx	lr

00017a2a <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17a2a:	b480      	push	{r7}
   17a2c:	b085      	sub	sp, #20
   17a2e:	af00      	add	r7, sp, #0
   17a30:	60f8      	str	r0, [r7, #12]
   17a32:	60b9      	str	r1, [r7, #8]
   17a34:	4613      	mov	r3, r2
   17a36:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   17a38:	68bb      	ldr	r3, [r7, #8]
   17a3a:	1c5a      	adds	r2, r3, #1
   17a3c:	60ba      	str	r2, [r7, #8]
   17a3e:	781a      	ldrb	r2, [r3, #0]
   17a40:	68fb      	ldr	r3, [r7, #12]
   17a42:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   17a44:	68fb      	ldr	r3, [r7, #12]
   17a46:	791a      	ldrb	r2, [r3, #4]
   17a48:	68fb      	ldr	r3, [r7, #12]
   17a4a:	70da      	strb	r2, [r3, #3]
}
   17a4c:	bf00      	nop
   17a4e:	3714      	adds	r7, #20
   17a50:	46bd      	mov	sp, r7
   17a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   17a56:	4770      	bx	lr

00017a58 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17a58:	b580      	push	{r7, lr}
   17a5a:	b084      	sub	sp, #16
   17a5c:	af00      	add	r7, sp, #0
   17a5e:	60f8      	str	r0, [r7, #12]
   17a60:	60b9      	str	r1, [r7, #8]
   17a62:	4613      	mov	r3, r2
   17a64:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   17a66:	68bb      	ldr	r3, [r7, #8]
   17a68:	1c5a      	adds	r2, r3, #1
   17a6a:	60ba      	str	r2, [r7, #8]
   17a6c:	781a      	ldrb	r2, [r3, #0]
   17a6e:	68fb      	ldr	r3, [r7, #12]
   17a70:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   17a72:	68fb      	ldr	r3, [r7, #12]
   17a74:	3305      	adds	r3, #5
   17a76:	68b9      	ldr	r1, [r7, #8]
   17a78:	4618      	mov	r0, r3
   17a7a:	f7fc fd85 	bl	14588 <BdaCpy>
   17a7e:	68bb      	ldr	r3, [r7, #8]
   17a80:	3306      	adds	r3, #6
   17a82:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   17a84:	68fb      	ldr	r3, [r7, #12]
   17a86:	791a      	ldrb	r2, [r3, #4]
   17a88:	68fb      	ldr	r3, [r7, #12]
   17a8a:	70da      	strb	r2, [r3, #3]
}
   17a8c:	bf00      	nop
   17a8e:	3710      	adds	r7, #16
   17a90:	46bd      	mov	sp, r7
   17a92:	bd80      	pop	{r7, pc}

00017a94 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17a94:	b580      	push	{r7, lr}
   17a96:	b084      	sub	sp, #16
   17a98:	af00      	add	r7, sp, #0
   17a9a:	60f8      	str	r0, [r7, #12]
   17a9c:	60b9      	str	r1, [r7, #8]
   17a9e:	4613      	mov	r3, r2
   17aa0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   17aa2:	68bb      	ldr	r3, [r7, #8]
   17aa4:	1c5a      	adds	r2, r3, #1
   17aa6:	60ba      	str	r2, [r7, #8]
   17aa8:	781a      	ldrb	r2, [r3, #0]
   17aaa:	68fb      	ldr	r3, [r7, #12]
   17aac:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   17aae:	68fb      	ldr	r3, [r7, #12]
   17ab0:	3305      	adds	r3, #5
   17ab2:	68b9      	ldr	r1, [r7, #8]
   17ab4:	4618      	mov	r0, r3
   17ab6:	f7fc fd67 	bl	14588 <BdaCpy>
   17aba:	68bb      	ldr	r3, [r7, #8]
   17abc:	3306      	adds	r3, #6
   17abe:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   17ac0:	68fb      	ldr	r3, [r7, #12]
   17ac2:	791a      	ldrb	r2, [r3, #4]
   17ac4:	68fb      	ldr	r3, [r7, #12]
   17ac6:	70da      	strb	r2, [r3, #3]
}
   17ac8:	bf00      	nop
   17aca:	3710      	adds	r7, #16
   17acc:	46bd      	mov	sp, r7
   17ace:	bd80      	pop	{r7, pc}

00017ad0 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17ad0:	b480      	push	{r7}
   17ad2:	b085      	sub	sp, #20
   17ad4:	af00      	add	r7, sp, #0
   17ad6:	60f8      	str	r0, [r7, #12]
   17ad8:	60b9      	str	r1, [r7, #8]
   17ada:	4613      	mov	r3, r2
   17adc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   17ade:	68bb      	ldr	r3, [r7, #8]
   17ae0:	1c5a      	adds	r2, r3, #1
   17ae2:	60ba      	str	r2, [r7, #8]
   17ae4:	781a      	ldrb	r2, [r3, #0]
   17ae6:	68fb      	ldr	r3, [r7, #12]
   17ae8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   17aea:	68fb      	ldr	r3, [r7, #12]
   17aec:	791a      	ldrb	r2, [r3, #4]
   17aee:	68fb      	ldr	r3, [r7, #12]
   17af0:	70da      	strb	r2, [r3, #3]
}
   17af2:	bf00      	nop
   17af4:	3714      	adds	r7, #20
   17af6:	46bd      	mov	sp, r7
   17af8:	f85d 7b04 	ldr.w	r7, [sp], #4
   17afc:	4770      	bx	lr

00017afe <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17afe:	b480      	push	{r7}
   17b00:	b085      	sub	sp, #20
   17b02:	af00      	add	r7, sp, #0
   17b04:	60f8      	str	r0, [r7, #12]
   17b06:	60b9      	str	r1, [r7, #8]
   17b08:	4613      	mov	r3, r2
   17b0a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   17b0c:	68bb      	ldr	r3, [r7, #8]
   17b0e:	1c5a      	adds	r2, r3, #1
   17b10:	60ba      	str	r2, [r7, #8]
   17b12:	781a      	ldrb	r2, [r3, #0]
   17b14:	68fb      	ldr	r3, [r7, #12]
   17b16:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   17b18:	68bb      	ldr	r3, [r7, #8]
   17b1a:	781b      	ldrb	r3, [r3, #0]
   17b1c:	b29a      	uxth	r2, r3
   17b1e:	68bb      	ldr	r3, [r7, #8]
   17b20:	3301      	adds	r3, #1
   17b22:	781b      	ldrb	r3, [r3, #0]
   17b24:	b29b      	uxth	r3, r3
   17b26:	021b      	lsls	r3, r3, #8
   17b28:	b29b      	uxth	r3, r3
   17b2a:	4413      	add	r3, r2
   17b2c:	b29a      	uxth	r2, r3
   17b2e:	68fb      	ldr	r3, [r7, #12]
   17b30:	80da      	strh	r2, [r3, #6]
   17b32:	68bb      	ldr	r3, [r7, #8]
   17b34:	3302      	adds	r3, #2
   17b36:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   17b38:	68fb      	ldr	r3, [r7, #12]
   17b3a:	791a      	ldrb	r2, [r3, #4]
   17b3c:	68fb      	ldr	r3, [r7, #12]
   17b3e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   17b40:	68fb      	ldr	r3, [r7, #12]
   17b42:	88da      	ldrh	r2, [r3, #6]
   17b44:	68fb      	ldr	r3, [r7, #12]
   17b46:	801a      	strh	r2, [r3, #0]
}
   17b48:	bf00      	nop
   17b4a:	3714      	adds	r7, #20
   17b4c:	46bd      	mov	sp, r7
   17b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17b52:	4770      	bx	lr

00017b54 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17b54:	b480      	push	{r7}
   17b56:	b085      	sub	sp, #20
   17b58:	af00      	add	r7, sp, #0
   17b5a:	60f8      	str	r0, [r7, #12]
   17b5c:	60b9      	str	r1, [r7, #8]
   17b5e:	4613      	mov	r3, r2
   17b60:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   17b62:	68bb      	ldr	r3, [r7, #8]
   17b64:	1c5a      	adds	r2, r3, #1
   17b66:	60ba      	str	r2, [r7, #8]
   17b68:	781a      	ldrb	r2, [r3, #0]
   17b6a:	68fb      	ldr	r3, [r7, #12]
   17b6c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   17b6e:	68bb      	ldr	r3, [r7, #8]
   17b70:	781b      	ldrb	r3, [r3, #0]
   17b72:	b29a      	uxth	r2, r3
   17b74:	68bb      	ldr	r3, [r7, #8]
   17b76:	3301      	adds	r3, #1
   17b78:	781b      	ldrb	r3, [r3, #0]
   17b7a:	b29b      	uxth	r3, r3
   17b7c:	021b      	lsls	r3, r3, #8
   17b7e:	b29b      	uxth	r3, r3
   17b80:	4413      	add	r3, r2
   17b82:	b29a      	uxth	r2, r3
   17b84:	68fb      	ldr	r3, [r7, #12]
   17b86:	80da      	strh	r2, [r3, #6]
   17b88:	68bb      	ldr	r3, [r7, #8]
   17b8a:	3302      	adds	r3, #2
   17b8c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   17b8e:	68fb      	ldr	r3, [r7, #12]
   17b90:	791a      	ldrb	r2, [r3, #4]
   17b92:	68fb      	ldr	r3, [r7, #12]
   17b94:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   17b96:	68fb      	ldr	r3, [r7, #12]
   17b98:	88da      	ldrh	r2, [r3, #6]
   17b9a:	68fb      	ldr	r3, [r7, #12]
   17b9c:	801a      	strh	r2, [r3, #0]
}
   17b9e:	bf00      	nop
   17ba0:	3714      	adds	r7, #20
   17ba2:	46bd      	mov	sp, r7
   17ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
   17ba8:	4770      	bx	lr

00017baa <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17baa:	b480      	push	{r7}
   17bac:	b085      	sub	sp, #20
   17bae:	af00      	add	r7, sp, #0
   17bb0:	60f8      	str	r0, [r7, #12]
   17bb2:	60b9      	str	r1, [r7, #8]
   17bb4:	4613      	mov	r3, r2
   17bb6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   17bb8:	68bb      	ldr	r3, [r7, #8]
   17bba:	1c5a      	adds	r2, r3, #1
   17bbc:	60ba      	str	r2, [r7, #8]
   17bbe:	781a      	ldrb	r2, [r3, #0]
   17bc0:	68fb      	ldr	r3, [r7, #12]
   17bc2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   17bc4:	68bb      	ldr	r3, [r7, #8]
   17bc6:	781b      	ldrb	r3, [r3, #0]
   17bc8:	b29a      	uxth	r2, r3
   17bca:	68bb      	ldr	r3, [r7, #8]
   17bcc:	3301      	adds	r3, #1
   17bce:	781b      	ldrb	r3, [r3, #0]
   17bd0:	b29b      	uxth	r3, r3
   17bd2:	021b      	lsls	r3, r3, #8
   17bd4:	b29b      	uxth	r3, r3
   17bd6:	4413      	add	r3, r2
   17bd8:	b29a      	uxth	r2, r3
   17bda:	68fb      	ldr	r3, [r7, #12]
   17bdc:	80da      	strh	r2, [r3, #6]
   17bde:	68bb      	ldr	r3, [r7, #8]
   17be0:	3302      	adds	r3, #2
   17be2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   17be4:	68bb      	ldr	r3, [r7, #8]
   17be6:	781b      	ldrb	r3, [r3, #0]
   17be8:	b29a      	uxth	r2, r3
   17bea:	68bb      	ldr	r3, [r7, #8]
   17bec:	3301      	adds	r3, #1
   17bee:	781b      	ldrb	r3, [r3, #0]
   17bf0:	b29b      	uxth	r3, r3
   17bf2:	021b      	lsls	r3, r3, #8
   17bf4:	b29b      	uxth	r3, r3
   17bf6:	4413      	add	r3, r2
   17bf8:	b29a      	uxth	r2, r3
   17bfa:	68fb      	ldr	r3, [r7, #12]
   17bfc:	811a      	strh	r2, [r3, #8]
   17bfe:	68bb      	ldr	r3, [r7, #8]
   17c00:	3302      	adds	r3, #2
   17c02:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   17c04:	68fb      	ldr	r3, [r7, #12]
   17c06:	791a      	ldrb	r2, [r3, #4]
   17c08:	68fb      	ldr	r3, [r7, #12]
   17c0a:	70da      	strb	r2, [r3, #3]
}
   17c0c:	bf00      	nop
   17c0e:	3714      	adds	r7, #20
   17c10:	46bd      	mov	sp, r7
   17c12:	f85d 7b04 	ldr.w	r7, [sp], #4
   17c16:	4770      	bx	lr

00017c18 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17c18:	b480      	push	{r7}
   17c1a:	b085      	sub	sp, #20
   17c1c:	af00      	add	r7, sp, #0
   17c1e:	60f8      	str	r0, [r7, #12]
   17c20:	60b9      	str	r1, [r7, #8]
   17c22:	4613      	mov	r3, r2
   17c24:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   17c26:	68bb      	ldr	r3, [r7, #8]
   17c28:	1c5a      	adds	r2, r3, #1
   17c2a:	60ba      	str	r2, [r7, #8]
   17c2c:	781a      	ldrb	r2, [r3, #0]
   17c2e:	68fb      	ldr	r3, [r7, #12]
   17c30:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   17c32:	68fb      	ldr	r3, [r7, #12]
   17c34:	791a      	ldrb	r2, [r3, #4]
   17c36:	68fb      	ldr	r3, [r7, #12]
   17c38:	70da      	strb	r2, [r3, #3]
}
   17c3a:	bf00      	nop
   17c3c:	3714      	adds	r7, #20
   17c3e:	46bd      	mov	sp, r7
   17c40:	f85d 7b04 	ldr.w	r7, [sp], #4
   17c44:	4770      	bx	lr

00017c46 <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17c46:	b480      	push	{r7}
   17c48:	b085      	sub	sp, #20
   17c4a:	af00      	add	r7, sp, #0
   17c4c:	60f8      	str	r0, [r7, #12]
   17c4e:	60b9      	str	r1, [r7, #8]
   17c50:	4613      	mov	r3, r2
   17c52:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   17c54:	68bb      	ldr	r3, [r7, #8]
   17c56:	1c5a      	adds	r2, r3, #1
   17c58:	60ba      	str	r2, [r7, #8]
   17c5a:	781a      	ldrb	r2, [r3, #0]
   17c5c:	68fb      	ldr	r3, [r7, #12]
   17c5e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   17c60:	68bb      	ldr	r3, [r7, #8]
   17c62:	781b      	ldrb	r3, [r3, #0]
   17c64:	b29a      	uxth	r2, r3
   17c66:	68bb      	ldr	r3, [r7, #8]
   17c68:	3301      	adds	r3, #1
   17c6a:	781b      	ldrb	r3, [r3, #0]
   17c6c:	b29b      	uxth	r3, r3
   17c6e:	021b      	lsls	r3, r3, #8
   17c70:	b29b      	uxth	r3, r3
   17c72:	4413      	add	r3, r2
   17c74:	b29a      	uxth	r2, r3
   17c76:	68fb      	ldr	r3, [r7, #12]
   17c78:	80da      	strh	r2, [r3, #6]
   17c7a:	68bb      	ldr	r3, [r7, #8]
   17c7c:	3302      	adds	r3, #2
   17c7e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   17c80:	68fb      	ldr	r3, [r7, #12]
   17c82:	791a      	ldrb	r2, [r3, #4]
   17c84:	68fb      	ldr	r3, [r7, #12]
   17c86:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   17c88:	68fb      	ldr	r3, [r7, #12]
   17c8a:	88da      	ldrh	r2, [r3, #6]
   17c8c:	68fb      	ldr	r3, [r7, #12]
   17c8e:	801a      	strh	r2, [r3, #0]
}
   17c90:	bf00      	nop
   17c92:	3714      	adds	r7, #20
   17c94:	46bd      	mov	sp, r7
   17c96:	f85d 7b04 	ldr.w	r7, [sp], #4
   17c9a:	4770      	bx	lr

00017c9c <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17c9c:	b480      	push	{r7}
   17c9e:	b085      	sub	sp, #20
   17ca0:	af00      	add	r7, sp, #0
   17ca2:	60f8      	str	r0, [r7, #12]
   17ca4:	60b9      	str	r1, [r7, #8]
   17ca6:	4613      	mov	r3, r2
   17ca8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   17caa:	68bb      	ldr	r3, [r7, #8]
   17cac:	1c5a      	adds	r2, r3, #1
   17cae:	60ba      	str	r2, [r7, #8]
   17cb0:	781a      	ldrb	r2, [r3, #0]
   17cb2:	68fb      	ldr	r3, [r7, #12]
   17cb4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   17cb6:	68bb      	ldr	r3, [r7, #8]
   17cb8:	781b      	ldrb	r3, [r3, #0]
   17cba:	b29a      	uxth	r2, r3
   17cbc:	68bb      	ldr	r3, [r7, #8]
   17cbe:	3301      	adds	r3, #1
   17cc0:	781b      	ldrb	r3, [r3, #0]
   17cc2:	b29b      	uxth	r3, r3
   17cc4:	021b      	lsls	r3, r3, #8
   17cc6:	b29b      	uxth	r3, r3
   17cc8:	4413      	add	r3, r2
   17cca:	b29a      	uxth	r2, r3
   17ccc:	68fb      	ldr	r3, [r7, #12]
   17cce:	80da      	strh	r2, [r3, #6]
   17cd0:	68bb      	ldr	r3, [r7, #8]
   17cd2:	3302      	adds	r3, #2
   17cd4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   17cd6:	68bb      	ldr	r3, [r7, #8]
   17cd8:	781b      	ldrb	r3, [r3, #0]
   17cda:	b29a      	uxth	r2, r3
   17cdc:	68bb      	ldr	r3, [r7, #8]
   17cde:	3301      	adds	r3, #1
   17ce0:	781b      	ldrb	r3, [r3, #0]
   17ce2:	b29b      	uxth	r3, r3
   17ce4:	021b      	lsls	r3, r3, #8
   17ce6:	b29b      	uxth	r3, r3
   17ce8:	4413      	add	r3, r2
   17cea:	b29a      	uxth	r2, r3
   17cec:	68fb      	ldr	r3, [r7, #12]
   17cee:	811a      	strh	r2, [r3, #8]
   17cf0:	68bb      	ldr	r3, [r7, #8]
   17cf2:	3302      	adds	r3, #2
   17cf4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   17cf6:	68bb      	ldr	r3, [r7, #8]
   17cf8:	781b      	ldrb	r3, [r3, #0]
   17cfa:	b29a      	uxth	r2, r3
   17cfc:	68bb      	ldr	r3, [r7, #8]
   17cfe:	3301      	adds	r3, #1
   17d00:	781b      	ldrb	r3, [r3, #0]
   17d02:	b29b      	uxth	r3, r3
   17d04:	021b      	lsls	r3, r3, #8
   17d06:	b29b      	uxth	r3, r3
   17d08:	4413      	add	r3, r2
   17d0a:	b29a      	uxth	r2, r3
   17d0c:	68fb      	ldr	r3, [r7, #12]
   17d0e:	815a      	strh	r2, [r3, #10]
   17d10:	68bb      	ldr	r3, [r7, #8]
   17d12:	3302      	adds	r3, #2
   17d14:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   17d16:	68bb      	ldr	r3, [r7, #8]
   17d18:	781b      	ldrb	r3, [r3, #0]
   17d1a:	b29a      	uxth	r2, r3
   17d1c:	68bb      	ldr	r3, [r7, #8]
   17d1e:	3301      	adds	r3, #1
   17d20:	781b      	ldrb	r3, [r3, #0]
   17d22:	b29b      	uxth	r3, r3
   17d24:	021b      	lsls	r3, r3, #8
   17d26:	b29b      	uxth	r3, r3
   17d28:	4413      	add	r3, r2
   17d2a:	b29a      	uxth	r2, r3
   17d2c:	68fb      	ldr	r3, [r7, #12]
   17d2e:	819a      	strh	r2, [r3, #12]
   17d30:	68bb      	ldr	r3, [r7, #8]
   17d32:	3302      	adds	r3, #2
   17d34:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   17d36:	68fb      	ldr	r3, [r7, #12]
   17d38:	791a      	ldrb	r2, [r3, #4]
   17d3a:	68fb      	ldr	r3, [r7, #12]
   17d3c:	70da      	strb	r2, [r3, #3]
}
   17d3e:	bf00      	nop
   17d40:	3714      	adds	r7, #20
   17d42:	46bd      	mov	sp, r7
   17d44:	f85d 7b04 	ldr.w	r7, [sp], #4
   17d48:	4770      	bx	lr

00017d4a <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17d4a:	b480      	push	{r7}
   17d4c:	b085      	sub	sp, #20
   17d4e:	af00      	add	r7, sp, #0
   17d50:	60f8      	str	r0, [r7, #12]
   17d52:	60b9      	str	r1, [r7, #8]
   17d54:	4613      	mov	r3, r2
   17d56:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   17d58:	68bb      	ldr	r3, [r7, #8]
   17d5a:	781b      	ldrb	r3, [r3, #0]
   17d5c:	b29a      	uxth	r2, r3
   17d5e:	68bb      	ldr	r3, [r7, #8]
   17d60:	3301      	adds	r3, #1
   17d62:	781b      	ldrb	r3, [r3, #0]
   17d64:	b29b      	uxth	r3, r3
   17d66:	021b      	lsls	r3, r3, #8
   17d68:	b29b      	uxth	r3, r3
   17d6a:	4413      	add	r3, r2
   17d6c:	b29a      	uxth	r2, r3
   17d6e:	68fb      	ldr	r3, [r7, #12]
   17d70:	809a      	strh	r2, [r3, #4]
   17d72:	68bb      	ldr	r3, [r7, #8]
   17d74:	3302      	adds	r3, #2
   17d76:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   17d78:	68bb      	ldr	r3, [r7, #8]
   17d7a:	781b      	ldrb	r3, [r3, #0]
   17d7c:	b29a      	uxth	r2, r3
   17d7e:	68bb      	ldr	r3, [r7, #8]
   17d80:	3301      	adds	r3, #1
   17d82:	781b      	ldrb	r3, [r3, #0]
   17d84:	b29b      	uxth	r3, r3
   17d86:	021b      	lsls	r3, r3, #8
   17d88:	b29b      	uxth	r3, r3
   17d8a:	4413      	add	r3, r2
   17d8c:	b29a      	uxth	r2, r3
   17d8e:	68fb      	ldr	r3, [r7, #12]
   17d90:	80da      	strh	r2, [r3, #6]
   17d92:	68bb      	ldr	r3, [r7, #8]
   17d94:	3302      	adds	r3, #2
   17d96:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   17d98:	68bb      	ldr	r3, [r7, #8]
   17d9a:	781b      	ldrb	r3, [r3, #0]
   17d9c:	b29a      	uxth	r2, r3
   17d9e:	68bb      	ldr	r3, [r7, #8]
   17da0:	3301      	adds	r3, #1
   17da2:	781b      	ldrb	r3, [r3, #0]
   17da4:	b29b      	uxth	r3, r3
   17da6:	021b      	lsls	r3, r3, #8
   17da8:	b29b      	uxth	r3, r3
   17daa:	4413      	add	r3, r2
   17dac:	b29a      	uxth	r2, r3
   17dae:	68fb      	ldr	r3, [r7, #12]
   17db0:	811a      	strh	r2, [r3, #8]
   17db2:	68bb      	ldr	r3, [r7, #8]
   17db4:	3302      	adds	r3, #2
   17db6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   17db8:	68bb      	ldr	r3, [r7, #8]
   17dba:	781b      	ldrb	r3, [r3, #0]
   17dbc:	b29a      	uxth	r2, r3
   17dbe:	68bb      	ldr	r3, [r7, #8]
   17dc0:	3301      	adds	r3, #1
   17dc2:	781b      	ldrb	r3, [r3, #0]
   17dc4:	b29b      	uxth	r3, r3
   17dc6:	021b      	lsls	r3, r3, #8
   17dc8:	b29b      	uxth	r3, r3
   17dca:	4413      	add	r3, r2
   17dcc:	b29a      	uxth	r2, r3
   17dce:	68fb      	ldr	r3, [r7, #12]
   17dd0:	815a      	strh	r2, [r3, #10]
   17dd2:	68bb      	ldr	r3, [r7, #8]
   17dd4:	3302      	adds	r3, #2
   17dd6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   17dd8:	68bb      	ldr	r3, [r7, #8]
   17dda:	781b      	ldrb	r3, [r3, #0]
   17ddc:	b29a      	uxth	r2, r3
   17dde:	68bb      	ldr	r3, [r7, #8]
   17de0:	3301      	adds	r3, #1
   17de2:	781b      	ldrb	r3, [r3, #0]
   17de4:	b29b      	uxth	r3, r3
   17de6:	021b      	lsls	r3, r3, #8
   17de8:	b29b      	uxth	r3, r3
   17dea:	4413      	add	r3, r2
   17dec:	b29a      	uxth	r2, r3
   17dee:	68fb      	ldr	r3, [r7, #12]
   17df0:	819a      	strh	r2, [r3, #12]
   17df2:	68bb      	ldr	r3, [r7, #8]
   17df4:	3302      	adds	r3, #2
   17df6:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   17df8:	68fb      	ldr	r3, [r7, #12]
   17dfa:	889a      	ldrh	r2, [r3, #4]
   17dfc:	68fb      	ldr	r3, [r7, #12]
   17dfe:	801a      	strh	r2, [r3, #0]
}
   17e00:	bf00      	nop
   17e02:	3714      	adds	r7, #20
   17e04:	46bd      	mov	sp, r7
   17e06:	f85d 7b04 	ldr.w	r7, [sp], #4
   17e0a:	4770      	bx	lr

00017e0c <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17e0c:	b480      	push	{r7}
   17e0e:	b085      	sub	sp, #20
   17e10:	af00      	add	r7, sp, #0
   17e12:	60f8      	str	r0, [r7, #12]
   17e14:	60b9      	str	r1, [r7, #8]
   17e16:	4613      	mov	r3, r2
   17e18:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   17e1a:	68bb      	ldr	r3, [r7, #8]
   17e1c:	781b      	ldrb	r3, [r3, #0]
   17e1e:	b29a      	uxth	r2, r3
   17e20:	68bb      	ldr	r3, [r7, #8]
   17e22:	3301      	adds	r3, #1
   17e24:	781b      	ldrb	r3, [r3, #0]
   17e26:	b29b      	uxth	r3, r3
   17e28:	021b      	lsls	r3, r3, #8
   17e2a:	b29b      	uxth	r3, r3
   17e2c:	4413      	add	r3, r2
   17e2e:	b29a      	uxth	r2, r3
   17e30:	68fb      	ldr	r3, [r7, #12]
   17e32:	809a      	strh	r2, [r3, #4]
   17e34:	68bb      	ldr	r3, [r7, #8]
   17e36:	3302      	adds	r3, #2
   17e38:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   17e3a:	68bb      	ldr	r3, [r7, #8]
   17e3c:	781b      	ldrb	r3, [r3, #0]
   17e3e:	b29a      	uxth	r2, r3
   17e40:	68bb      	ldr	r3, [r7, #8]
   17e42:	3301      	adds	r3, #1
   17e44:	781b      	ldrb	r3, [r3, #0]
   17e46:	b29b      	uxth	r3, r3
   17e48:	021b      	lsls	r3, r3, #8
   17e4a:	b29b      	uxth	r3, r3
   17e4c:	4413      	add	r3, r2
   17e4e:	b29a      	uxth	r2, r3
   17e50:	68fb      	ldr	r3, [r7, #12]
   17e52:	80da      	strh	r2, [r3, #6]
   17e54:	68bb      	ldr	r3, [r7, #8]
   17e56:	3302      	adds	r3, #2
   17e58:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   17e5a:	68bb      	ldr	r3, [r7, #8]
   17e5c:	781b      	ldrb	r3, [r3, #0]
   17e5e:	b29a      	uxth	r2, r3
   17e60:	68bb      	ldr	r3, [r7, #8]
   17e62:	3301      	adds	r3, #1
   17e64:	781b      	ldrb	r3, [r3, #0]
   17e66:	b29b      	uxth	r3, r3
   17e68:	021b      	lsls	r3, r3, #8
   17e6a:	b29b      	uxth	r3, r3
   17e6c:	4413      	add	r3, r2
   17e6e:	b29a      	uxth	r2, r3
   17e70:	68fb      	ldr	r3, [r7, #12]
   17e72:	811a      	strh	r2, [r3, #8]
   17e74:	68bb      	ldr	r3, [r7, #8]
   17e76:	3302      	adds	r3, #2
   17e78:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   17e7a:	68bb      	ldr	r3, [r7, #8]
   17e7c:	781b      	ldrb	r3, [r3, #0]
   17e7e:	b29a      	uxth	r2, r3
   17e80:	68bb      	ldr	r3, [r7, #8]
   17e82:	3301      	adds	r3, #1
   17e84:	781b      	ldrb	r3, [r3, #0]
   17e86:	b29b      	uxth	r3, r3
   17e88:	021b      	lsls	r3, r3, #8
   17e8a:	b29b      	uxth	r3, r3
   17e8c:	4413      	add	r3, r2
   17e8e:	b29a      	uxth	r2, r3
   17e90:	68fb      	ldr	r3, [r7, #12]
   17e92:	815a      	strh	r2, [r3, #10]
   17e94:	68bb      	ldr	r3, [r7, #8]
   17e96:	3302      	adds	r3, #2
   17e98:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   17e9a:	68bb      	ldr	r3, [r7, #8]
   17e9c:	781b      	ldrb	r3, [r3, #0]
   17e9e:	b29a      	uxth	r2, r3
   17ea0:	68bb      	ldr	r3, [r7, #8]
   17ea2:	3301      	adds	r3, #1
   17ea4:	781b      	ldrb	r3, [r3, #0]
   17ea6:	b29b      	uxth	r3, r3
   17ea8:	021b      	lsls	r3, r3, #8
   17eaa:	b29b      	uxth	r3, r3
   17eac:	4413      	add	r3, r2
   17eae:	b29a      	uxth	r2, r3
   17eb0:	68fb      	ldr	r3, [r7, #12]
   17eb2:	819a      	strh	r2, [r3, #12]
   17eb4:	68bb      	ldr	r3, [r7, #8]
   17eb6:	3302      	adds	r3, #2
   17eb8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   17eba:	68fb      	ldr	r3, [r7, #12]
   17ebc:	889a      	ldrh	r2, [r3, #4]
   17ebe:	68fb      	ldr	r3, [r7, #12]
   17ec0:	801a      	strh	r2, [r3, #0]
}
   17ec2:	bf00      	nop
   17ec4:	3714      	adds	r7, #20
   17ec6:	46bd      	mov	sp, r7
   17ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
   17ecc:	4770      	bx	lr

00017ece <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17ece:	b580      	push	{r7, lr}
   17ed0:	b084      	sub	sp, #16
   17ed2:	af00      	add	r7, sp, #0
   17ed4:	60f8      	str	r0, [r7, #12]
   17ed6:	60b9      	str	r1, [r7, #8]
   17ed8:	4613      	mov	r3, r2
   17eda:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   17edc:	68bb      	ldr	r3, [r7, #8]
   17ede:	1c5a      	adds	r2, r3, #1
   17ee0:	60ba      	str	r2, [r7, #8]
   17ee2:	781a      	ldrb	r2, [r3, #0]
   17ee4:	68fb      	ldr	r3, [r7, #12]
   17ee6:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   17ee8:	68fb      	ldr	r3, [r7, #12]
   17eea:	3305      	adds	r3, #5
   17eec:	2240      	movs	r2, #64	; 0x40
   17eee:	68b9      	ldr	r1, [r7, #8]
   17ef0:	4618      	mov	r0, r3
   17ef2:	f7f4 f935 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   17ef6:	68fb      	ldr	r3, [r7, #12]
   17ef8:	791a      	ldrb	r2, [r3, #4]
   17efa:	68fb      	ldr	r3, [r7, #12]
   17efc:	70da      	strb	r2, [r3, #3]
}
   17efe:	bf00      	nop
   17f00:	3710      	adds	r7, #16
   17f02:	46bd      	mov	sp, r7
   17f04:	bd80      	pop	{r7, pc}

00017f06 <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17f06:	b580      	push	{r7, lr}
   17f08:	b084      	sub	sp, #16
   17f0a:	af00      	add	r7, sp, #0
   17f0c:	60f8      	str	r0, [r7, #12]
   17f0e:	60b9      	str	r1, [r7, #8]
   17f10:	4613      	mov	r3, r2
   17f12:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   17f14:	68bb      	ldr	r3, [r7, #8]
   17f16:	1c5a      	adds	r2, r3, #1
   17f18:	60ba      	str	r2, [r7, #8]
   17f1a:	781a      	ldrb	r2, [r3, #0]
   17f1c:	68fb      	ldr	r3, [r7, #12]
   17f1e:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   17f20:	68fb      	ldr	r3, [r7, #12]
   17f22:	3305      	adds	r3, #5
   17f24:	2220      	movs	r2, #32
   17f26:	68b9      	ldr	r1, [r7, #8]
   17f28:	4618      	mov	r0, r3
   17f2a:	f7f4 f919 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   17f2e:	68fb      	ldr	r3, [r7, #12]
   17f30:	791a      	ldrb	r2, [r3, #4]
   17f32:	68fb      	ldr	r3, [r7, #12]
   17f34:	70da      	strb	r2, [r3, #3]
}
   17f36:	bf00      	nop
   17f38:	3710      	adds	r7, #16
   17f3a:	46bd      	mov	sp, r7
   17f3c:	bd80      	pop	{r7, pc}

00017f3e <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17f3e:	b480      	push	{r7}
   17f40:	b085      	sub	sp, #20
   17f42:	af00      	add	r7, sp, #0
   17f44:	60f8      	str	r0, [r7, #12]
   17f46:	60b9      	str	r1, [r7, #8]
   17f48:	4613      	mov	r3, r2
   17f4a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   17f4c:	68bb      	ldr	r3, [r7, #8]
   17f4e:	1c5a      	adds	r2, r3, #1
   17f50:	60ba      	str	r2, [r7, #8]
   17f52:	781a      	ldrb	r2, [r3, #0]
   17f54:	68fb      	ldr	r3, [r7, #12]
   17f56:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   17f58:	68bb      	ldr	r3, [r7, #8]
   17f5a:	781b      	ldrb	r3, [r3, #0]
   17f5c:	b29a      	uxth	r2, r3
   17f5e:	68bb      	ldr	r3, [r7, #8]
   17f60:	3301      	adds	r3, #1
   17f62:	781b      	ldrb	r3, [r3, #0]
   17f64:	b29b      	uxth	r3, r3
   17f66:	021b      	lsls	r3, r3, #8
   17f68:	b29b      	uxth	r3, r3
   17f6a:	4413      	add	r3, r2
   17f6c:	b29a      	uxth	r2, r3
   17f6e:	68fb      	ldr	r3, [r7, #12]
   17f70:	80da      	strh	r2, [r3, #6]
   17f72:	68bb      	ldr	r3, [r7, #8]
   17f74:	3302      	adds	r3, #2
   17f76:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   17f78:	68fb      	ldr	r3, [r7, #12]
   17f7a:	791a      	ldrb	r2, [r3, #4]
   17f7c:	68fb      	ldr	r3, [r7, #12]
   17f7e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   17f80:	68fb      	ldr	r3, [r7, #12]
   17f82:	88da      	ldrh	r2, [r3, #6]
   17f84:	68fb      	ldr	r3, [r7, #12]
   17f86:	801a      	strh	r2, [r3, #0]
}
   17f88:	bf00      	nop
   17f8a:	3714      	adds	r7, #20
   17f8c:	46bd      	mov	sp, r7
   17f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17f92:	4770      	bx	lr

00017f94 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17f94:	b480      	push	{r7}
   17f96:	b085      	sub	sp, #20
   17f98:	af00      	add	r7, sp, #0
   17f9a:	60f8      	str	r0, [r7, #12]
   17f9c:	60b9      	str	r1, [r7, #8]
   17f9e:	4613      	mov	r3, r2
   17fa0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   17fa2:	68bb      	ldr	r3, [r7, #8]
   17fa4:	781b      	ldrb	r3, [r3, #0]
   17fa6:	b29a      	uxth	r2, r3
   17fa8:	68bb      	ldr	r3, [r7, #8]
   17faa:	3301      	adds	r3, #1
   17fac:	781b      	ldrb	r3, [r3, #0]
   17fae:	b29b      	uxth	r3, r3
   17fb0:	021b      	lsls	r3, r3, #8
   17fb2:	b29b      	uxth	r3, r3
   17fb4:	4413      	add	r3, r2
   17fb6:	b29a      	uxth	r2, r3
   17fb8:	68fb      	ldr	r3, [r7, #12]
   17fba:	809a      	strh	r2, [r3, #4]
   17fbc:	68bb      	ldr	r3, [r7, #8]
   17fbe:	3302      	adds	r3, #2
   17fc0:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   17fc2:	68fb      	ldr	r3, [r7, #12]
   17fc4:	889a      	ldrh	r2, [r3, #4]
   17fc6:	68fb      	ldr	r3, [r7, #12]
   17fc8:	801a      	strh	r2, [r3, #0]
}
   17fca:	bf00      	nop
   17fcc:	3714      	adds	r7, #20
   17fce:	46bd      	mov	sp, r7
   17fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
   17fd4:	4770      	bx	lr

00017fd6 <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17fd6:	b480      	push	{r7}
   17fd8:	b085      	sub	sp, #20
   17fda:	af00      	add	r7, sp, #0
   17fdc:	60f8      	str	r0, [r7, #12]
   17fde:	60b9      	str	r1, [r7, #8]
   17fe0:	4613      	mov	r3, r2
   17fe2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   17fe4:	68bb      	ldr	r3, [r7, #8]
   17fe6:	1c5a      	adds	r2, r3, #1
   17fe8:	60ba      	str	r2, [r7, #8]
   17fea:	781a      	ldrb	r2, [r3, #0]
   17fec:	68fb      	ldr	r3, [r7, #12]
   17fee:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   17ff0:	68bb      	ldr	r3, [r7, #8]
   17ff2:	781b      	ldrb	r3, [r3, #0]
   17ff4:	b29a      	uxth	r2, r3
   17ff6:	68bb      	ldr	r3, [r7, #8]
   17ff8:	3301      	adds	r3, #1
   17ffa:	781b      	ldrb	r3, [r3, #0]
   17ffc:	b29b      	uxth	r3, r3
   17ffe:	021b      	lsls	r3, r3, #8
   18000:	b29b      	uxth	r3, r3
   18002:	4413      	add	r3, r2
   18004:	b29a      	uxth	r2, r3
   18006:	68fb      	ldr	r3, [r7, #12]
   18008:	80da      	strh	r2, [r3, #6]
   1800a:	68bb      	ldr	r3, [r7, #8]
   1800c:	3302      	adds	r3, #2
   1800e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   18010:	68bb      	ldr	r3, [r7, #8]
   18012:	1c5a      	adds	r2, r3, #1
   18014:	60ba      	str	r2, [r7, #8]
   18016:	781a      	ldrb	r2, [r3, #0]
   18018:	68fb      	ldr	r3, [r7, #12]
   1801a:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   1801c:	68bb      	ldr	r3, [r7, #8]
   1801e:	1c5a      	adds	r2, r3, #1
   18020:	60ba      	str	r2, [r7, #8]
   18022:	781a      	ldrb	r2, [r3, #0]
   18024:	68fb      	ldr	r3, [r7, #12]
   18026:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   18028:	68fb      	ldr	r3, [r7, #12]
   1802a:	791a      	ldrb	r2, [r3, #4]
   1802c:	68fb      	ldr	r3, [r7, #12]
   1802e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   18030:	68fb      	ldr	r3, [r7, #12]
   18032:	88da      	ldrh	r2, [r3, #6]
   18034:	68fb      	ldr	r3, [r7, #12]
   18036:	801a      	strh	r2, [r3, #0]
}
   18038:	bf00      	nop
   1803a:	3714      	adds	r7, #20
   1803c:	46bd      	mov	sp, r7
   1803e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18042:	4770      	bx	lr

00018044 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18044:	b480      	push	{r7}
   18046:	b085      	sub	sp, #20
   18048:	af00      	add	r7, sp, #0
   1804a:	60f8      	str	r0, [r7, #12]
   1804c:	60b9      	str	r1, [r7, #8]
   1804e:	4613      	mov	r3, r2
   18050:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   18052:	68bb      	ldr	r3, [r7, #8]
   18054:	1c5a      	adds	r2, r3, #1
   18056:	60ba      	str	r2, [r7, #8]
   18058:	781a      	ldrb	r2, [r3, #0]
   1805a:	68fb      	ldr	r3, [r7, #12]
   1805c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   1805e:	68fb      	ldr	r3, [r7, #12]
   18060:	791a      	ldrb	r2, [r3, #4]
   18062:	68fb      	ldr	r3, [r7, #12]
   18064:	70da      	strb	r2, [r3, #3]
}
   18066:	bf00      	nop
   18068:	3714      	adds	r7, #20
   1806a:	46bd      	mov	sp, r7
   1806c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18070:	4770      	bx	lr

00018072 <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18072:	b480      	push	{r7}
   18074:	b085      	sub	sp, #20
   18076:	af00      	add	r7, sp, #0
   18078:	60f8      	str	r0, [r7, #12]
   1807a:	60b9      	str	r1, [r7, #8]
   1807c:	4613      	mov	r3, r2
   1807e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   18080:	68bb      	ldr	r3, [r7, #8]
   18082:	1c5a      	adds	r2, r3, #1
   18084:	60ba      	str	r2, [r7, #8]
   18086:	781a      	ldrb	r2, [r3, #0]
   18088:	68fb      	ldr	r3, [r7, #12]
   1808a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   1808c:	68bb      	ldr	r3, [r7, #8]
   1808e:	781b      	ldrb	r3, [r3, #0]
   18090:	b29a      	uxth	r2, r3
   18092:	68bb      	ldr	r3, [r7, #8]
   18094:	3301      	adds	r3, #1
   18096:	781b      	ldrb	r3, [r3, #0]
   18098:	b29b      	uxth	r3, r3
   1809a:	021b      	lsls	r3, r3, #8
   1809c:	b29b      	uxth	r3, r3
   1809e:	4413      	add	r3, r2
   180a0:	b29a      	uxth	r2, r3
   180a2:	68fb      	ldr	r3, [r7, #12]
   180a4:	80da      	strh	r2, [r3, #6]
   180a6:	68bb      	ldr	r3, [r7, #8]
   180a8:	3302      	adds	r3, #2
   180aa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   180ac:	68bb      	ldr	r3, [r7, #8]
   180ae:	1c5a      	adds	r2, r3, #1
   180b0:	60ba      	str	r2, [r7, #8]
   180b2:	781a      	ldrb	r2, [r3, #0]
   180b4:	68fb      	ldr	r3, [r7, #12]
   180b6:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   180b8:	68bb      	ldr	r3, [r7, #8]
   180ba:	1c5a      	adds	r2, r3, #1
   180bc:	60ba      	str	r2, [r7, #8]
   180be:	781a      	ldrb	r2, [r3, #0]
   180c0:	68fb      	ldr	r3, [r7, #12]
   180c2:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   180c4:	68fb      	ldr	r3, [r7, #12]
   180c6:	791a      	ldrb	r2, [r3, #4]
   180c8:	68fb      	ldr	r3, [r7, #12]
   180ca:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   180cc:	68fb      	ldr	r3, [r7, #12]
   180ce:	88da      	ldrh	r2, [r3, #6]
   180d0:	68fb      	ldr	r3, [r7, #12]
   180d2:	801a      	strh	r2, [r3, #0]
}
   180d4:	bf00      	nop
   180d6:	3714      	adds	r7, #20
   180d8:	46bd      	mov	sp, r7
   180da:	f85d 7b04 	ldr.w	r7, [sp], #4
   180de:	4770      	bx	lr

000180e0 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   180e0:	b580      	push	{r7, lr}
   180e2:	b084      	sub	sp, #16
   180e4:	af00      	add	r7, sp, #0
   180e6:	6078      	str	r0, [r7, #4]
   180e8:	460b      	mov	r3, r1
   180ea:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   180ec:	687b      	ldr	r3, [r7, #4]
   180ee:	1c5a      	adds	r2, r3, #1
   180f0:	607a      	str	r2, [r7, #4]
   180f2:	781b      	ldrb	r3, [r3, #0]
   180f4:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   180f6:	7bfb      	ldrb	r3, [r7, #15]
   180f8:	2b0f      	cmp	r3, #15
   180fa:	d862      	bhi.n	181c2 <hciEvtProcessLeAdvReport+0xe2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   180fc:	203b      	movs	r0, #59	; 0x3b
   180fe:	f7fd f811 	bl	15124 <WsfBufAlloc>
   18102:	60b8      	str	r0, [r7, #8]
   18104:	68bb      	ldr	r3, [r7, #8]
   18106:	2b00      	cmp	r3, #0
   18108:	d05c      	beq.n	181c4 <hciEvtProcessLeAdvReport+0xe4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   1810a:	e04f      	b.n	181ac <hciEvtProcessLeAdvReport+0xcc>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   1810c:	687b      	ldr	r3, [r7, #4]
   1810e:	1c5a      	adds	r2, r3, #1
   18110:	607a      	str	r2, [r7, #4]
   18112:	781a      	ldrb	r2, [r3, #0]
   18114:	68bb      	ldr	r3, [r7, #8]
   18116:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   18118:	687b      	ldr	r3, [r7, #4]
   1811a:	1c5a      	adds	r2, r3, #1
   1811c:	607a      	str	r2, [r7, #4]
   1811e:	781a      	ldrb	r2, [r3, #0]
   18120:	68bb      	ldr	r3, [r7, #8]
   18122:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   18124:	68bb      	ldr	r3, [r7, #8]
   18126:	330c      	adds	r3, #12
   18128:	6879      	ldr	r1, [r7, #4]
   1812a:	4618      	mov	r0, r3
   1812c:	f7fc fa2c 	bl	14588 <BdaCpy>
   18130:	687b      	ldr	r3, [r7, #4]
   18132:	3306      	adds	r3, #6
   18134:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   18136:	687b      	ldr	r3, [r7, #4]
   18138:	1c5a      	adds	r2, r3, #1
   1813a:	607a      	str	r2, [r7, #4]
   1813c:	781a      	ldrb	r2, [r3, #0]
   1813e:	68bb      	ldr	r3, [r7, #8]
   18140:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   18142:	68bb      	ldr	r3, [r7, #8]
   18144:	7a1b      	ldrb	r3, [r3, #8]
   18146:	2b1f      	cmp	r3, #31
   18148:	d836      	bhi.n	181b8 <hciEvtProcessLeAdvReport+0xd8>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   1814a:	68bb      	ldr	r3, [r7, #8]
   1814c:	f103 021c 	add.w	r2, r3, #28
   18150:	68bb      	ldr	r3, [r7, #8]
   18152:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   18154:	68bb      	ldr	r3, [r7, #8]
   18156:	6858      	ldr	r0, [r3, #4]
   18158:	68bb      	ldr	r3, [r7, #8]
   1815a:	7a1b      	ldrb	r3, [r3, #8]
   1815c:	461a      	mov	r2, r3
   1815e:	6879      	ldr	r1, [r7, #4]
   18160:	f7f3 fffe 	bl	c160 <memcpy>
      p += pMsg->len;
   18164:	68bb      	ldr	r3, [r7, #8]
   18166:	7a1b      	ldrb	r3, [r3, #8]
   18168:	461a      	mov	r2, r3
   1816a:	687b      	ldr	r3, [r7, #4]
   1816c:	4413      	add	r3, r2
   1816e:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   18170:	687b      	ldr	r3, [r7, #4]
   18172:	1c5a      	adds	r2, r3, #1
   18174:	607a      	str	r2, [r7, #4]
   18176:	781b      	ldrb	r3, [r3, #0]
   18178:	b25a      	sxtb	r2, r3
   1817a:	68bb      	ldr	r3, [r7, #8]
   1817c:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   1817e:	68bb      	ldr	r3, [r7, #8]
   18180:	2200      	movs	r2, #0
   18182:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   18184:	68bb      	ldr	r3, [r7, #8]
   18186:	3313      	adds	r3, #19
   18188:	2206      	movs	r2, #6
   1818a:	2100      	movs	r1, #0
   1818c:	4618      	mov	r0, r3
   1818e:	f7f4 f8e5 	bl	c35c <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   18192:	68bb      	ldr	r3, [r7, #8]
   18194:	2200      	movs	r2, #0
   18196:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   18198:	68bb      	ldr	r3, [r7, #8]
   1819a:	2206      	movs	r2, #6
   1819c:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1819e:	68bb      	ldr	r3, [r7, #8]
   181a0:	2200      	movs	r2, #0
   181a2:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   181a4:	4b09      	ldr	r3, [pc, #36]	; (181cc <hciEvtProcessLeAdvReport+0xec>)
   181a6:	689b      	ldr	r3, [r3, #8]
   181a8:	68b8      	ldr	r0, [r7, #8]
   181aa:	4798      	blx	r3
    while (i-- > 0)
   181ac:	7bfb      	ldrb	r3, [r7, #15]
   181ae:	1e5a      	subs	r2, r3, #1
   181b0:	73fa      	strb	r2, [r7, #15]
   181b2:	2b00      	cmp	r3, #0
   181b4:	d1aa      	bne.n	1810c <hciEvtProcessLeAdvReport+0x2c>
   181b6:	e000      	b.n	181ba <hciEvtProcessLeAdvReport+0xda>
        break;
   181b8:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   181ba:	68b8      	ldr	r0, [r7, #8]
   181bc:	f7fc fff2 	bl	151a4 <WsfBufFree>
   181c0:	e000      	b.n	181c4 <hciEvtProcessLeAdvReport+0xe4>
    return;
   181c2:	bf00      	nop
  }
}
   181c4:	3710      	adds	r7, #16
   181c6:	46bd      	mov	sp, r7
   181c8:	bd80      	pop	{r7, pc}
   181ca:	bf00      	nop
   181cc:	100051fc 	.word	0x100051fc

000181d0 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   181d0:	b580      	push	{r7, lr}
   181d2:	b086      	sub	sp, #24
   181d4:	af00      	add	r7, sp, #0
   181d6:	6078      	str	r0, [r7, #4]
   181d8:	460b      	mov	r3, r1
   181da:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   181dc:	687b      	ldr	r3, [r7, #4]
   181de:	781b      	ldrb	r3, [r3, #0]
   181e0:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   181e2:	7dfb      	ldrb	r3, [r7, #23]
   181e4:	2b0f      	cmp	r3, #15
   181e6:	f200 80c4 	bhi.w	18372 <hciEvtProcessLeExtAdvReport+0x1a2>
  {
    return;
  }

  ptr = p + 1;
   181ea:	687b      	ldr	r3, [r7, #4]
   181ec:	3301      	adds	r3, #1
   181ee:	613b      	str	r3, [r7, #16]
  maxLen = 0;
   181f0:	2300      	movs	r3, #0
   181f2:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   181f4:	e011      	b.n	1821a <hciEvtProcessLeExtAdvReport+0x4a>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   181f6:	693b      	ldr	r3, [r7, #16]
   181f8:	3317      	adds	r3, #23
   181fa:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   181fc:	693b      	ldr	r3, [r7, #16]
   181fe:	1c5a      	adds	r2, r3, #1
   18200:	613a      	str	r2, [r7, #16]
   18202:	781b      	ldrb	r3, [r3, #0]
   18204:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
   18206:	7bbb      	ldrb	r3, [r7, #14]
   18208:	693a      	ldr	r2, [r7, #16]
   1820a:	4413      	add	r3, r2
   1820c:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   1820e:	7bba      	ldrb	r2, [r7, #14]
   18210:	7bfb      	ldrb	r3, [r7, #15]
   18212:	429a      	cmp	r2, r3
   18214:	d901      	bls.n	1821a <hciEvtProcessLeExtAdvReport+0x4a>
    {
      /* update max len */
      maxLen = dataLen;
   18216:	7bbb      	ldrb	r3, [r7, #14]
   18218:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
   1821a:	7dfb      	ldrb	r3, [r7, #23]
   1821c:	1e5a      	subs	r2, r3, #1
   1821e:	75fa      	strb	r2, [r7, #23]
   18220:	2b00      	cmp	r3, #0
   18222:	d1e8      	bne.n	181f6 <hciEvtProcessLeExtAdvReport+0x26>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   18224:	7bfb      	ldrb	r3, [r7, #15]
   18226:	b29b      	uxth	r3, r3
   18228:	3320      	adds	r3, #32
   1822a:	b29b      	uxth	r3, r3
   1822c:	4618      	mov	r0, r3
   1822e:	f7fc ff79 	bl	15124 <WsfBufAlloc>
   18232:	60b8      	str	r0, [r7, #8]
   18234:	68bb      	ldr	r3, [r7, #8]
   18236:	2b00      	cmp	r3, #0
   18238:	f000 809c 	beq.w	18374 <hciEvtProcessLeExtAdvReport+0x1a4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   1823c:	687b      	ldr	r3, [r7, #4]
   1823e:	1c5a      	adds	r2, r3, #1
   18240:	607a      	str	r2, [r7, #4]
   18242:	781b      	ldrb	r3, [r3, #0]
   18244:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   18246:	e088      	b.n	1835a <hciEvtProcessLeExtAdvReport+0x18a>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   18248:	687b      	ldr	r3, [r7, #4]
   1824a:	781b      	ldrb	r3, [r3, #0]
   1824c:	b29a      	uxth	r2, r3
   1824e:	687b      	ldr	r3, [r7, #4]
   18250:	3301      	adds	r3, #1
   18252:	781b      	ldrb	r3, [r3, #0]
   18254:	b29b      	uxth	r3, r3
   18256:	021b      	lsls	r3, r3, #8
   18258:	b29b      	uxth	r3, r3
   1825a:	4413      	add	r3, r2
   1825c:	b29a      	uxth	r2, r3
   1825e:	68bb      	ldr	r3, [r7, #8]
   18260:	809a      	strh	r2, [r3, #4]
   18262:	687b      	ldr	r3, [r7, #4]
   18264:	3302      	adds	r3, #2
   18266:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   18268:	687b      	ldr	r3, [r7, #4]
   1826a:	1c5a      	adds	r2, r3, #1
   1826c:	607a      	str	r2, [r7, #4]
   1826e:	781a      	ldrb	r2, [r3, #0]
   18270:	68bb      	ldr	r3, [r7, #8]
   18272:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   18274:	68bb      	ldr	r3, [r7, #8]
   18276:	3307      	adds	r3, #7
   18278:	6879      	ldr	r1, [r7, #4]
   1827a:	4618      	mov	r0, r3
   1827c:	f7fc f984 	bl	14588 <BdaCpy>
   18280:	687b      	ldr	r3, [r7, #4]
   18282:	3306      	adds	r3, #6
   18284:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   18286:	687b      	ldr	r3, [r7, #4]
   18288:	1c5a      	adds	r2, r3, #1
   1828a:	607a      	str	r2, [r7, #4]
   1828c:	781a      	ldrb	r2, [r3, #0]
   1828e:	68bb      	ldr	r3, [r7, #8]
   18290:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   18292:	687b      	ldr	r3, [r7, #4]
   18294:	1c5a      	adds	r2, r3, #1
   18296:	607a      	str	r2, [r7, #4]
   18298:	781a      	ldrb	r2, [r3, #0]
   1829a:	68bb      	ldr	r3, [r7, #8]
   1829c:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   1829e:	687b      	ldr	r3, [r7, #4]
   182a0:	1c5a      	adds	r2, r3, #1
   182a2:	607a      	str	r2, [r7, #4]
   182a4:	781a      	ldrb	r2, [r3, #0]
   182a6:	68bb      	ldr	r3, [r7, #8]
   182a8:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   182aa:	687b      	ldr	r3, [r7, #4]
   182ac:	1c5a      	adds	r2, r3, #1
   182ae:	607a      	str	r2, [r7, #4]
   182b0:	781b      	ldrb	r3, [r3, #0]
   182b2:	b25a      	sxtb	r2, r3
   182b4:	68bb      	ldr	r3, [r7, #8]
   182b6:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   182b8:	687b      	ldr	r3, [r7, #4]
   182ba:	1c5a      	adds	r2, r3, #1
   182bc:	607a      	str	r2, [r7, #4]
   182be:	781b      	ldrb	r3, [r3, #0]
   182c0:	b25a      	sxtb	r2, r3
   182c2:	68bb      	ldr	r3, [r7, #8]
   182c4:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   182c6:	687b      	ldr	r3, [r7, #4]
   182c8:	781b      	ldrb	r3, [r3, #0]
   182ca:	b29a      	uxth	r2, r3
   182cc:	687b      	ldr	r3, [r7, #4]
   182ce:	3301      	adds	r3, #1
   182d0:	781b      	ldrb	r3, [r3, #0]
   182d2:	b29b      	uxth	r3, r3
   182d4:	021b      	lsls	r3, r3, #8
   182d6:	b29b      	uxth	r3, r3
   182d8:	4413      	add	r3, r2
   182da:	b29b      	uxth	r3, r3
   182dc:	b21a      	sxth	r2, r3
   182de:	68bb      	ldr	r3, [r7, #8]
   182e0:	825a      	strh	r2, [r3, #18]
   182e2:	687b      	ldr	r3, [r7, #4]
   182e4:	3302      	adds	r3, #2
   182e6:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   182e8:	687b      	ldr	r3, [r7, #4]
   182ea:	1c5a      	adds	r2, r3, #1
   182ec:	607a      	str	r2, [r7, #4]
   182ee:	781a      	ldrb	r2, [r3, #0]
   182f0:	68bb      	ldr	r3, [r7, #8]
   182f2:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   182f4:	68bb      	ldr	r3, [r7, #8]
   182f6:	3315      	adds	r3, #21
   182f8:	6879      	ldr	r1, [r7, #4]
   182fa:	4618      	mov	r0, r3
   182fc:	f7fc f944 	bl	14588 <BdaCpy>
   18300:	687b      	ldr	r3, [r7, #4]
   18302:	3306      	adds	r3, #6
   18304:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   18306:	687b      	ldr	r3, [r7, #4]
   18308:	1c5a      	adds	r2, r3, #1
   1830a:	607a      	str	r2, [r7, #4]
   1830c:	781a      	ldrb	r2, [r3, #0]
   1830e:	68bb      	ldr	r3, [r7, #8]
   18310:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   18312:	68bb      	ldr	r3, [r7, #8]
   18314:	7edb      	ldrb	r3, [r3, #27]
   18316:	2be5      	cmp	r3, #229	; 0xe5
   18318:	d826      	bhi.n	18368 <hciEvtProcessLeExtAdvReport+0x198>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   1831a:	68bb      	ldr	r3, [r7, #8]
   1831c:	f103 0220 	add.w	r2, r3, #32
   18320:	68bb      	ldr	r3, [r7, #8]
   18322:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
   18324:	68bb      	ldr	r3, [r7, #8]
   18326:	69d8      	ldr	r0, [r3, #28]
   18328:	68bb      	ldr	r3, [r7, #8]
   1832a:	7edb      	ldrb	r3, [r3, #27]
   1832c:	461a      	mov	r2, r3
   1832e:	6879      	ldr	r1, [r7, #4]
   18330:	f7f3 ff16 	bl	c160 <memcpy>
      p += pMsg->len;
   18334:	68bb      	ldr	r3, [r7, #8]
   18336:	7edb      	ldrb	r3, [r3, #27]
   18338:	461a      	mov	r2, r3
   1833a:	687b      	ldr	r3, [r7, #4]
   1833c:	4413      	add	r3, r2
   1833e:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   18340:	68bb      	ldr	r3, [r7, #8]
   18342:	2200      	movs	r2, #0
   18344:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   18346:	68bb      	ldr	r3, [r7, #8]
   18348:	222c      	movs	r2, #44	; 0x2c
   1834a:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1834c:	68bb      	ldr	r3, [r7, #8]
   1834e:	2200      	movs	r2, #0
   18350:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   18352:	4b0a      	ldr	r3, [pc, #40]	; (1837c <hciEvtProcessLeExtAdvReport+0x1ac>)
   18354:	689b      	ldr	r3, [r3, #8]
   18356:	68b8      	ldr	r0, [r7, #8]
   18358:	4798      	blx	r3
    while (i-- > 0)
   1835a:	7dfb      	ldrb	r3, [r7, #23]
   1835c:	1e5a      	subs	r2, r3, #1
   1835e:	75fa      	strb	r2, [r7, #23]
   18360:	2b00      	cmp	r3, #0
   18362:	f47f af71 	bne.w	18248 <hciEvtProcessLeExtAdvReport+0x78>
   18366:	e000      	b.n	1836a <hciEvtProcessLeExtAdvReport+0x19a>
        break;
   18368:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   1836a:	68b8      	ldr	r0, [r7, #8]
   1836c:	f7fc ff1a 	bl	151a4 <WsfBufFree>
   18370:	e000      	b.n	18374 <hciEvtProcessLeExtAdvReport+0x1a4>
    return;
   18372:	bf00      	nop
  }
}
   18374:	3718      	adds	r7, #24
   18376:	46bd      	mov	sp, r7
   18378:	bd80      	pop	{r7, pc}
   1837a:	bf00      	nop
   1837c:	100051fc 	.word	0x100051fc

00018380 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18380:	b480      	push	{r7}
   18382:	b085      	sub	sp, #20
   18384:	af00      	add	r7, sp, #0
   18386:	60f8      	str	r0, [r7, #12]
   18388:	60b9      	str	r1, [r7, #8]
   1838a:	4613      	mov	r3, r2
   1838c:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
   1838e:	bf00      	nop
   18390:	3714      	adds	r7, #20
   18392:	46bd      	mov	sp, r7
   18394:	f85d 7b04 	ldr.w	r7, [sp], #4
   18398:	4770      	bx	lr

0001839a <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1839a:	b480      	push	{r7}
   1839c:	b085      	sub	sp, #20
   1839e:	af00      	add	r7, sp, #0
   183a0:	60f8      	str	r0, [r7, #12]
   183a2:	60b9      	str	r1, [r7, #8]
   183a4:	4613      	mov	r3, r2
   183a6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   183a8:	68bb      	ldr	r3, [r7, #8]
   183aa:	1c5a      	adds	r2, r3, #1
   183ac:	60ba      	str	r2, [r7, #8]
   183ae:	781a      	ldrb	r2, [r3, #0]
   183b0:	68fb      	ldr	r3, [r7, #12]
   183b2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   183b4:	68bb      	ldr	r3, [r7, #8]
   183b6:	1c5a      	adds	r2, r3, #1
   183b8:	60ba      	str	r2, [r7, #8]
   183ba:	781a      	ldrb	r2, [r3, #0]
   183bc:	68fb      	ldr	r3, [r7, #12]
   183be:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   183c0:	68bb      	ldr	r3, [r7, #8]
   183c2:	781b      	ldrb	r3, [r3, #0]
   183c4:	b29a      	uxth	r2, r3
   183c6:	68bb      	ldr	r3, [r7, #8]
   183c8:	3301      	adds	r3, #1
   183ca:	781b      	ldrb	r3, [r3, #0]
   183cc:	b29b      	uxth	r3, r3
   183ce:	021b      	lsls	r3, r3, #8
   183d0:	b29b      	uxth	r3, r3
   183d2:	4413      	add	r3, r2
   183d4:	b29a      	uxth	r2, r3
   183d6:	68fb      	ldr	r3, [r7, #12]
   183d8:	80da      	strh	r2, [r3, #6]
   183da:	68bb      	ldr	r3, [r7, #8]
   183dc:	3302      	adds	r3, #2
   183de:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   183e0:	68bb      	ldr	r3, [r7, #8]
   183e2:	1c5a      	adds	r2, r3, #1
   183e4:	60ba      	str	r2, [r7, #8]
   183e6:	781a      	ldrb	r2, [r3, #0]
   183e8:	68fb      	ldr	r3, [r7, #12]
   183ea:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   183ec:	68fb      	ldr	r3, [r7, #12]
   183ee:	791a      	ldrb	r2, [r3, #4]
   183f0:	68fb      	ldr	r3, [r7, #12]
   183f2:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   183f4:	68fb      	ldr	r3, [r7, #12]
   183f6:	88da      	ldrh	r2, [r3, #6]
   183f8:	68fb      	ldr	r3, [r7, #12]
   183fa:	801a      	strh	r2, [r3, #0]
}
   183fc:	bf00      	nop
   183fe:	3714      	adds	r7, #20
   18400:	46bd      	mov	sp, r7
   18402:	f85d 7b04 	ldr.w	r7, [sp], #4
   18406:	4770      	bx	lr

00018408 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18408:	b580      	push	{r7, lr}
   1840a:	b084      	sub	sp, #16
   1840c:	af00      	add	r7, sp, #0
   1840e:	60f8      	str	r0, [r7, #12]
   18410:	60b9      	str	r1, [r7, #8]
   18412:	4613      	mov	r3, r2
   18414:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   18416:	68bb      	ldr	r3, [r7, #8]
   18418:	1c5a      	adds	r2, r3, #1
   1841a:	60ba      	str	r2, [r7, #8]
   1841c:	781a      	ldrb	r2, [r3, #0]
   1841e:	68fb      	ldr	r3, [r7, #12]
   18420:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   18422:	68bb      	ldr	r3, [r7, #8]
   18424:	1c5a      	adds	r2, r3, #1
   18426:	60ba      	str	r2, [r7, #8]
   18428:	781a      	ldrb	r2, [r3, #0]
   1842a:	68fb      	ldr	r3, [r7, #12]
   1842c:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   1842e:	68fb      	ldr	r3, [r7, #12]
   18430:	3306      	adds	r3, #6
   18432:	68b9      	ldr	r1, [r7, #8]
   18434:	4618      	mov	r0, r3
   18436:	f7fc f8a7 	bl	14588 <BdaCpy>
   1843a:	68bb      	ldr	r3, [r7, #8]
   1843c:	3306      	adds	r3, #6
   1843e:	60bb      	str	r3, [r7, #8]
}
   18440:	bf00      	nop
   18442:	3710      	adds	r7, #16
   18444:	46bd      	mov	sp, r7
   18446:	bd80      	pop	{r7, pc}

00018448 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18448:	b580      	push	{r7, lr}
   1844a:	b084      	sub	sp, #16
   1844c:	af00      	add	r7, sp, #0
   1844e:	60f8      	str	r0, [r7, #12]
   18450:	60b9      	str	r1, [r7, #8]
   18452:	4613      	mov	r3, r2
   18454:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   18456:	68bb      	ldr	r3, [r7, #8]
   18458:	1c5a      	adds	r2, r3, #1
   1845a:	60ba      	str	r2, [r7, #8]
   1845c:	781a      	ldrb	r2, [r3, #0]
   1845e:	68fb      	ldr	r3, [r7, #12]
   18460:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   18462:	68bb      	ldr	r3, [r7, #8]
   18464:	781b      	ldrb	r3, [r3, #0]
   18466:	b29a      	uxth	r2, r3
   18468:	68bb      	ldr	r3, [r7, #8]
   1846a:	3301      	adds	r3, #1
   1846c:	781b      	ldrb	r3, [r3, #0]
   1846e:	b29b      	uxth	r3, r3
   18470:	021b      	lsls	r3, r3, #8
   18472:	b29b      	uxth	r3, r3
   18474:	4413      	add	r3, r2
   18476:	b29a      	uxth	r2, r3
   18478:	68fb      	ldr	r3, [r7, #12]
   1847a:	80da      	strh	r2, [r3, #6]
   1847c:	68bb      	ldr	r3, [r7, #8]
   1847e:	3302      	adds	r3, #2
   18480:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   18482:	68bb      	ldr	r3, [r7, #8]
   18484:	1c5a      	adds	r2, r3, #1
   18486:	60ba      	str	r2, [r7, #8]
   18488:	781a      	ldrb	r2, [r3, #0]
   1848a:	68fb      	ldr	r3, [r7, #12]
   1848c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   1848e:	68bb      	ldr	r3, [r7, #8]
   18490:	1c5a      	adds	r2, r3, #1
   18492:	60ba      	str	r2, [r7, #8]
   18494:	781a      	ldrb	r2, [r3, #0]
   18496:	68fb      	ldr	r3, [r7, #12]
   18498:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   1849a:	68fb      	ldr	r3, [r7, #12]
   1849c:	330a      	adds	r3, #10
   1849e:	68b9      	ldr	r1, [r7, #8]
   184a0:	4618      	mov	r0, r3
   184a2:	f7fc f871 	bl	14588 <BdaCpy>
   184a6:	68bb      	ldr	r3, [r7, #8]
   184a8:	3306      	adds	r3, #6
   184aa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   184ac:	68bb      	ldr	r3, [r7, #8]
   184ae:	1c5a      	adds	r2, r3, #1
   184b0:	60ba      	str	r2, [r7, #8]
   184b2:	781a      	ldrb	r2, [r3, #0]
   184b4:	68fb      	ldr	r3, [r7, #12]
   184b6:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   184b8:	68bb      	ldr	r3, [r7, #8]
   184ba:	781b      	ldrb	r3, [r3, #0]
   184bc:	b29a      	uxth	r2, r3
   184be:	68bb      	ldr	r3, [r7, #8]
   184c0:	3301      	adds	r3, #1
   184c2:	781b      	ldrb	r3, [r3, #0]
   184c4:	b29b      	uxth	r3, r3
   184c6:	021b      	lsls	r3, r3, #8
   184c8:	b29b      	uxth	r3, r3
   184ca:	4413      	add	r3, r2
   184cc:	b29a      	uxth	r2, r3
   184ce:	68fb      	ldr	r3, [r7, #12]
   184d0:	825a      	strh	r2, [r3, #18]
   184d2:	68bb      	ldr	r3, [r7, #8]
   184d4:	3302      	adds	r3, #2
   184d6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   184d8:	68bb      	ldr	r3, [r7, #8]
   184da:	1c5a      	adds	r2, r3, #1
   184dc:	60ba      	str	r2, [r7, #8]
   184de:	781a      	ldrb	r2, [r3, #0]
   184e0:	68fb      	ldr	r3, [r7, #12]
   184e2:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   184e4:	68fb      	ldr	r3, [r7, #12]
   184e6:	791a      	ldrb	r2, [r3, #4]
   184e8:	68fb      	ldr	r3, [r7, #12]
   184ea:	70da      	strb	r2, [r3, #3]
}
   184ec:	bf00      	nop
   184ee:	3710      	adds	r7, #16
   184f0:	46bd      	mov	sp, r7
   184f2:	bd80      	pop	{r7, pc}

000184f4 <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   184f4:	b580      	push	{r7, lr}
   184f6:	b084      	sub	sp, #16
   184f8:	af00      	add	r7, sp, #0
   184fa:	6078      	str	r0, [r7, #4]
   184fc:	460b      	mov	r3, r1
   184fe:	70fb      	strb	r3, [r7, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   18500:	687b      	ldr	r3, [r7, #4]
   18502:	795b      	ldrb	r3, [r3, #5]
   18504:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   18506:	7bfb      	ldrb	r3, [r7, #15]
   18508:	2bf8      	cmp	r3, #248	; 0xf8
   1850a:	d857      	bhi.n	185bc <hciEvtProcessLePerAdvReport+0xc8>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   1850c:	7bfb      	ldrb	r3, [r7, #15]
   1850e:	b29b      	uxth	r3, r3
   18510:	3310      	adds	r3, #16
   18512:	b29b      	uxth	r3, r3
   18514:	4618      	mov	r0, r3
   18516:	f7fc fe05 	bl	15124 <WsfBufAlloc>
   1851a:	60b8      	str	r0, [r7, #8]
   1851c:	68bb      	ldr	r3, [r7, #8]
   1851e:	2b00      	cmp	r3, #0
   18520:	d04d      	beq.n	185be <hciEvtProcessLePerAdvReport+0xca>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   18522:	687b      	ldr	r3, [r7, #4]
   18524:	781b      	ldrb	r3, [r3, #0]
   18526:	b29a      	uxth	r2, r3
   18528:	687b      	ldr	r3, [r7, #4]
   1852a:	3301      	adds	r3, #1
   1852c:	781b      	ldrb	r3, [r3, #0]
   1852e:	b29b      	uxth	r3, r3
   18530:	021b      	lsls	r3, r3, #8
   18532:	b29b      	uxth	r3, r3
   18534:	4413      	add	r3, r2
   18536:	b29a      	uxth	r2, r3
   18538:	68bb      	ldr	r3, [r7, #8]
   1853a:	809a      	strh	r2, [r3, #4]
   1853c:	687b      	ldr	r3, [r7, #4]
   1853e:	3302      	adds	r3, #2
   18540:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   18542:	687b      	ldr	r3, [r7, #4]
   18544:	1c5a      	adds	r2, r3, #1
   18546:	607a      	str	r2, [r7, #4]
   18548:	781a      	ldrb	r2, [r3, #0]
   1854a:	68bb      	ldr	r3, [r7, #8]
   1854c:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   1854e:	687b      	ldr	r3, [r7, #4]
   18550:	1c5a      	adds	r2, r3, #1
   18552:	607a      	str	r2, [r7, #4]
   18554:	781a      	ldrb	r2, [r3, #0]
   18556:	68bb      	ldr	r3, [r7, #8]
   18558:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   1855a:	687b      	ldr	r3, [r7, #4]
   1855c:	1c5a      	adds	r2, r3, #1
   1855e:	607a      	str	r2, [r7, #4]
   18560:	781a      	ldrb	r2, [r3, #0]
   18562:	68bb      	ldr	r3, [r7, #8]
   18564:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   18566:	687b      	ldr	r3, [r7, #4]
   18568:	1c5a      	adds	r2, r3, #1
   1856a:	607a      	str	r2, [r7, #4]
   1856c:	781a      	ldrb	r2, [r3, #0]
   1856e:	68bb      	ldr	r3, [r7, #8]
   18570:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   18572:	687b      	ldr	r3, [r7, #4]
   18574:	1c5a      	adds	r2, r3, #1
   18576:	607a      	str	r2, [r7, #4]
   18578:	781a      	ldrb	r2, [r3, #0]
   1857a:	68bb      	ldr	r3, [r7, #8]
   1857c:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   1857e:	68bb      	ldr	r3, [r7, #8]
   18580:	f103 0210 	add.w	r2, r3, #16
   18584:	68bb      	ldr	r3, [r7, #8]
   18586:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   18588:	68bb      	ldr	r3, [r7, #8]
   1858a:	68d8      	ldr	r0, [r3, #12]
   1858c:	68bb      	ldr	r3, [r7, #8]
   1858e:	7a9b      	ldrb	r3, [r3, #10]
   18590:	461a      	mov	r2, r3
   18592:	6879      	ldr	r1, [r7, #4]
   18594:	f7f3 fde4 	bl	c160 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   18598:	68bb      	ldr	r3, [r7, #8]
   1859a:	2200      	movs	r2, #0
   1859c:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   1859e:	68bb      	ldr	r3, [r7, #8]
   185a0:	2231      	movs	r2, #49	; 0x31
   185a2:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   185a4:	68bb      	ldr	r3, [r7, #8]
   185a6:	7a5a      	ldrb	r2, [r3, #9]
   185a8:	68bb      	ldr	r3, [r7, #8]
   185aa:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   185ac:	4b05      	ldr	r3, [pc, #20]	; (185c4 <hciEvtProcessLePerAdvReport+0xd0>)
   185ae:	689b      	ldr	r3, [r3, #8]
   185b0:	68b8      	ldr	r0, [r7, #8]
   185b2:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   185b4:	68b8      	ldr	r0, [r7, #8]
   185b6:	f7fc fdf5 	bl	151a4 <WsfBufFree>
   185ba:	e000      	b.n	185be <hciEvtProcessLePerAdvReport+0xca>
    return;
   185bc:	bf00      	nop
  }
}
   185be:	3710      	adds	r7, #16
   185c0:	46bd      	mov	sp, r7
   185c2:	bd80      	pop	{r7, pc}
   185c4:	100051fc 	.word	0x100051fc

000185c8 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   185c8:	b480      	push	{r7}
   185ca:	b085      	sub	sp, #20
   185cc:	af00      	add	r7, sp, #0
   185ce:	60f8      	str	r0, [r7, #12]
   185d0:	60b9      	str	r1, [r7, #8]
   185d2:	4613      	mov	r3, r2
   185d4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   185d6:	68bb      	ldr	r3, [r7, #8]
   185d8:	1c5a      	adds	r2, r3, #1
   185da:	60ba      	str	r2, [r7, #8]
   185dc:	781a      	ldrb	r2, [r3, #0]
   185de:	68fb      	ldr	r3, [r7, #12]
   185e0:	70da      	strb	r2, [r3, #3]
}
   185e2:	bf00      	nop
   185e4:	3714      	adds	r7, #20
   185e6:	46bd      	mov	sp, r7
   185e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   185ec:	4770      	bx	lr

000185ee <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   185ee:	b480      	push	{r7}
   185f0:	b085      	sub	sp, #20
   185f2:	af00      	add	r7, sp, #0
   185f4:	60f8      	str	r0, [r7, #12]
   185f6:	60b9      	str	r1, [r7, #8]
   185f8:	4613      	mov	r3, r2
   185fa:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   185fc:	68bb      	ldr	r3, [r7, #8]
   185fe:	781b      	ldrb	r3, [r3, #0]
   18600:	b29a      	uxth	r2, r3
   18602:	68bb      	ldr	r3, [r7, #8]
   18604:	3301      	adds	r3, #1
   18606:	781b      	ldrb	r3, [r3, #0]
   18608:	b29b      	uxth	r3, r3
   1860a:	021b      	lsls	r3, r3, #8
   1860c:	b29b      	uxth	r3, r3
   1860e:	4413      	add	r3, r2
   18610:	b29a      	uxth	r2, r3
   18612:	68fb      	ldr	r3, [r7, #12]
   18614:	809a      	strh	r2, [r3, #4]
   18616:	68bb      	ldr	r3, [r7, #8]
   18618:	3302      	adds	r3, #2
   1861a:	60bb      	str	r3, [r7, #8]
}
   1861c:	bf00      	nop
   1861e:	3714      	adds	r7, #20
   18620:	46bd      	mov	sp, r7
   18622:	f85d 7b04 	ldr.w	r7, [sp], #4
   18626:	4770      	bx	lr

00018628 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   18628:	b580      	push	{r7, lr}
   1862a:	b084      	sub	sp, #16
   1862c:	af00      	add	r7, sp, #0
   1862e:	6078      	str	r0, [r7, #4]
   18630:	460b      	mov	r3, r1
   18632:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   18634:	687b      	ldr	r3, [r7, #4]
   18636:	1c5a      	adds	r2, r3, #1
   18638:	607a      	str	r2, [r7, #4]
   1863a:	781b      	ldrb	r3, [r3, #0]
   1863c:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   1863e:	7bfb      	ldrb	r3, [r7, #15]
   18640:	2b0f      	cmp	r3, #15
   18642:	d84e      	bhi.n	186e2 <hciEvtProcessLeDirectAdvReport+0xba>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   18644:	201c      	movs	r0, #28
   18646:	f7fc fd6d 	bl	15124 <WsfBufAlloc>
   1864a:	60b8      	str	r0, [r7, #8]
   1864c:	68bb      	ldr	r3, [r7, #8]
   1864e:	2b00      	cmp	r3, #0
   18650:	d048      	beq.n	186e4 <hciEvtProcessLeDirectAdvReport+0xbc>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   18652:	e03d      	b.n	186d0 <hciEvtProcessLeDirectAdvReport+0xa8>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   18654:	687b      	ldr	r3, [r7, #4]
   18656:	1c5a      	adds	r2, r3, #1
   18658:	607a      	str	r2, [r7, #4]
   1865a:	781a      	ldrb	r2, [r3, #0]
   1865c:	68bb      	ldr	r3, [r7, #8]
   1865e:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   18660:	687b      	ldr	r3, [r7, #4]
   18662:	1c5a      	adds	r2, r3, #1
   18664:	607a      	str	r2, [r7, #4]
   18666:	781a      	ldrb	r2, [r3, #0]
   18668:	68bb      	ldr	r3, [r7, #8]
   1866a:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1866c:	68bb      	ldr	r3, [r7, #8]
   1866e:	330c      	adds	r3, #12
   18670:	6879      	ldr	r1, [r7, #4]
   18672:	4618      	mov	r0, r3
   18674:	f7fb ff88 	bl	14588 <BdaCpy>
   18678:	687b      	ldr	r3, [r7, #4]
   1867a:	3306      	adds	r3, #6
   1867c:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   1867e:	687b      	ldr	r3, [r7, #4]
   18680:	1c5a      	adds	r2, r3, #1
   18682:	607a      	str	r2, [r7, #4]
   18684:	781a      	ldrb	r2, [r3, #0]
   18686:	68bb      	ldr	r3, [r7, #8]
   18688:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   1868a:	68bb      	ldr	r3, [r7, #8]
   1868c:	3313      	adds	r3, #19
   1868e:	6879      	ldr	r1, [r7, #4]
   18690:	4618      	mov	r0, r3
   18692:	f7fb ff79 	bl	14588 <BdaCpy>
   18696:	687b      	ldr	r3, [r7, #4]
   18698:	3306      	adds	r3, #6
   1869a:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   1869c:	687b      	ldr	r3, [r7, #4]
   1869e:	1c5a      	adds	r2, r3, #1
   186a0:	607a      	str	r2, [r7, #4]
   186a2:	781b      	ldrb	r3, [r3, #0]
   186a4:	b25a      	sxtb	r2, r3
   186a6:	68bb      	ldr	r3, [r7, #8]
   186a8:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   186aa:	68bb      	ldr	r3, [r7, #8]
   186ac:	2200      	movs	r2, #0
   186ae:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   186b0:	68bb      	ldr	r3, [r7, #8]
   186b2:	2200      	movs	r2, #0
   186b4:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   186b6:	68bb      	ldr	r3, [r7, #8]
   186b8:	2200      	movs	r2, #0
   186ba:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   186bc:	68bb      	ldr	r3, [r7, #8]
   186be:	2206      	movs	r2, #6
   186c0:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   186c2:	68bb      	ldr	r3, [r7, #8]
   186c4:	2200      	movs	r2, #0
   186c6:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   186c8:	4b08      	ldr	r3, [pc, #32]	; (186ec <hciEvtProcessLeDirectAdvReport+0xc4>)
   186ca:	689b      	ldr	r3, [r3, #8]
   186cc:	68b8      	ldr	r0, [r7, #8]
   186ce:	4798      	blx	r3
    while (i-- > 0)
   186d0:	7bfb      	ldrb	r3, [r7, #15]
   186d2:	1e5a      	subs	r2, r3, #1
   186d4:	73fa      	strb	r2, [r7, #15]
   186d6:	2b00      	cmp	r3, #0
   186d8:	d1bc      	bne.n	18654 <hciEvtProcessLeDirectAdvReport+0x2c>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   186da:	68b8      	ldr	r0, [r7, #8]
   186dc:	f7fc fd62 	bl	151a4 <WsfBufFree>
   186e0:	e000      	b.n	186e4 <hciEvtProcessLeDirectAdvReport+0xbc>
    return;
   186e2:	bf00      	nop
  }
}
   186e4:	3710      	adds	r7, #16
   186e6:	46bd      	mov	sp, r7
   186e8:	bd80      	pop	{r7, pc}
   186ea:	bf00      	nop
   186ec:	100051fc 	.word	0x100051fc

000186f0 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   186f0:	b480      	push	{r7}
   186f2:	b083      	sub	sp, #12
   186f4:	af00      	add	r7, sp, #0
   186f6:	4603      	mov	r3, r0
   186f8:	460a      	mov	r2, r1
   186fa:	71fb      	strb	r3, [r7, #7]
   186fc:	4613      	mov	r3, r2
   186fe:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   18700:	bf00      	nop
   18702:	370c      	adds	r7, #12
   18704:	46bd      	mov	sp, r7
   18706:	f85d 7b04 	ldr.w	r7, [sp], #4
   1870a:	4770      	bx	lr

0001870c <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   1870c:	b580      	push	{r7, lr}
   1870e:	b084      	sub	sp, #16
   18710:	af00      	add	r7, sp, #0
   18712:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   18714:	687b      	ldr	r3, [r7, #4]
   18716:	1c5a      	adds	r2, r3, #1
   18718:	607a      	str	r2, [r7, #4]
   1871a:	781b      	ldrb	r3, [r3, #0]
   1871c:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   1871e:	687b      	ldr	r3, [r7, #4]
   18720:	1c5a      	adds	r2, r3, #1
   18722:	607a      	str	r2, [r7, #4]
   18724:	781b      	ldrb	r3, [r3, #0]
   18726:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
   18728:	687b      	ldr	r3, [r7, #4]
   1872a:	781b      	ldrb	r3, [r3, #0]
   1872c:	b29a      	uxth	r2, r3
   1872e:	687b      	ldr	r3, [r7, #4]
   18730:	3301      	adds	r3, #1
   18732:	781b      	ldrb	r3, [r3, #0]
   18734:	b29b      	uxth	r3, r3
   18736:	021b      	lsls	r3, r3, #8
   18738:	b29b      	uxth	r3, r3
   1873a:	4413      	add	r3, r2
   1873c:	81bb      	strh	r3, [r7, #12]
   1873e:	687b      	ldr	r3, [r7, #4]
   18740:	3302      	adds	r3, #2
   18742:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   18744:	7bfb      	ldrb	r3, [r7, #15]
   18746:	2b00      	cmp	r3, #0
   18748:	d005      	beq.n	18756 <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
   1874a:	89ba      	ldrh	r2, [r7, #12]
   1874c:	7bfb      	ldrb	r3, [r7, #15]
   1874e:	4611      	mov	r1, r2
   18750:	4618      	mov	r0, r3
   18752:	f7ff ffcd 	bl	186f0 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   18756:	7bbb      	ldrb	r3, [r7, #14]
   18758:	4618      	mov	r0, r3
   1875a:	f7fd f86d 	bl	15838 <hciCmdRecvCmpl>
}
   1875e:	bf00      	nop
   18760:	3710      	adds	r7, #16
   18762:	46bd      	mov	sp, r7
   18764:	bd80      	pop	{r7, pc}
	...

00018768 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   18768:	b580      	push	{r7, lr}
   1876a:	b086      	sub	sp, #24
   1876c:	af00      	add	r7, sp, #0
   1876e:	6078      	str	r0, [r7, #4]
   18770:	460b      	mov	r3, r1
   18772:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   18774:	2300      	movs	r3, #0
   18776:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   18778:	4ba2      	ldr	r3, [pc, #648]	; (18a04 <hciEvtProcessCmdCmpl+0x29c>)
   1877a:	689b      	ldr	r3, [r3, #8]
   1877c:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   1877e:	687b      	ldr	r3, [r7, #4]
   18780:	1c5a      	adds	r2, r3, #1
   18782:	607a      	str	r2, [r7, #4]
   18784:	781b      	ldrb	r3, [r3, #0]
   18786:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
   18788:	687b      	ldr	r3, [r7, #4]
   1878a:	781b      	ldrb	r3, [r3, #0]
   1878c:	b29a      	uxth	r2, r3
   1878e:	687b      	ldr	r3, [r7, #4]
   18790:	3301      	adds	r3, #1
   18792:	781b      	ldrb	r3, [r3, #0]
   18794:	b29b      	uxth	r3, r3
   18796:	021b      	lsls	r3, r3, #8
   18798:	b29b      	uxth	r3, r3
   1879a:	4413      	add	r3, r2
   1879c:	81bb      	strh	r3, [r7, #12]
   1879e:	687b      	ldr	r3, [r7, #4]
   187a0:	3302      	adds	r3, #2
   187a2:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   187a4:	89bb      	ldrh	r3, [r7, #12]
   187a6:	f242 0222 	movw	r2, #8226	; 0x2022
   187aa:	4293      	cmp	r3, r2
   187ac:	f000 80aa 	beq.w	18904 <hciEvtProcessCmdCmpl+0x19c>
   187b0:	f242 0222 	movw	r2, #8226	; 0x2022
   187b4:	4293      	cmp	r3, r2
   187b6:	dc49      	bgt.n	1884c <hciEvtProcessCmdCmpl+0xe4>
   187b8:	f242 0215 	movw	r2, #8213	; 0x2015
   187bc:	4293      	cmp	r3, r2
   187be:	f000 80b3 	beq.w	18928 <hciEvtProcessCmdCmpl+0x1c0>
   187c2:	f242 0215 	movw	r2, #8213	; 0x2015
   187c6:	4293      	cmp	r3, r2
   187c8:	dc22      	bgt.n	18810 <hciEvtProcessCmdCmpl+0xa8>
   187ca:	f241 4205 	movw	r2, #5125	; 0x1405
   187ce:	4293      	cmp	r3, r2
   187d0:	f000 80ad 	beq.w	1892e <hciEvtProcessCmdCmpl+0x1c6>
   187d4:	f241 4205 	movw	r2, #5125	; 0x1405
   187d8:	4293      	cmp	r3, r2
   187da:	dc0a      	bgt.n	187f2 <hciEvtProcessCmdCmpl+0x8a>
   187dc:	f640 422d 	movw	r2, #3117	; 0xc2d
   187e0:	4293      	cmp	r3, r2
   187e2:	f000 80a7 	beq.w	18934 <hciEvtProcessCmdCmpl+0x1cc>
   187e6:	f640 427c 	movw	r2, #3196	; 0xc7c
   187ea:	4293      	cmp	r3, r2
   187ec:	f000 80b7 	beq.w	1895e <hciEvtProcessCmdCmpl+0x1f6>
   187f0:	e0cd      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
   187f2:	f242 020c 	movw	r2, #8204	; 0x200c
   187f6:	4293      	cmp	r3, r2
   187f8:	f000 80ba 	beq.w	18970 <hciEvtProcessCmdCmpl+0x208>
   187fc:	f242 020e 	movw	r2, #8206	; 0x200e
   18800:	4293      	cmp	r3, r2
   18802:	d06a      	beq.n	188da <hciEvtProcessCmdCmpl+0x172>
   18804:	f242 020a 	movw	r2, #8202	; 0x200a
   18808:	4293      	cmp	r3, r2
   1880a:	f000 80b4 	beq.w	18976 <hciEvtProcessCmdCmpl+0x20e>
   1880e:	e0be      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
   18810:	f242 021a 	movw	r2, #8218	; 0x201a
   18814:	4293      	cmp	r3, r2
   18816:	d07b      	beq.n	18910 <hciEvtProcessCmdCmpl+0x1a8>
   18818:	f242 021a 	movw	r2, #8218	; 0x201a
   1881c:	4293      	cmp	r3, r2
   1881e:	dc08      	bgt.n	18832 <hciEvtProcessCmdCmpl+0xca>
   18820:	f242 0217 	movw	r2, #8215	; 0x2017
   18824:	4293      	cmp	r3, r2
   18826:	d05b      	beq.n	188e0 <hciEvtProcessCmdCmpl+0x178>
   18828:	f242 0218 	movw	r2, #8216	; 0x2018
   1882c:	4293      	cmp	r3, r2
   1882e:	d075      	beq.n	1891c <hciEvtProcessCmdCmpl+0x1b4>
   18830:	e0ad      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
   18832:	f242 0220 	movw	r2, #8224	; 0x2020
   18836:	4293      	cmp	r3, r2
   18838:	d058      	beq.n	188ec <hciEvtProcessCmdCmpl+0x184>
   1883a:	f242 0220 	movw	r2, #8224	; 0x2020
   1883e:	4293      	cmp	r3, r2
   18840:	dc57      	bgt.n	188f2 <hciEvtProcessCmdCmpl+0x18a>
   18842:	f242 021b 	movw	r2, #8219	; 0x201b
   18846:	4293      	cmp	r3, r2
   18848:	d065      	beq.n	18916 <hciEvtProcessCmdCmpl+0x1ae>
   1884a:	e0a0      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
   1884c:	f242 022c 	movw	r2, #8236	; 0x202c
   18850:	4293      	cmp	r3, r2
   18852:	d07e      	beq.n	18952 <hciEvtProcessCmdCmpl+0x1ea>
   18854:	f242 022c 	movw	r2, #8236	; 0x202c
   18858:	4293      	cmp	r3, r2
   1885a:	dc1d      	bgt.n	18898 <hciEvtProcessCmdCmpl+0x130>
   1885c:	f242 0227 	movw	r2, #8231	; 0x2027
   18860:	4293      	cmp	r3, r2
   18862:	d06a      	beq.n	1893a <hciEvtProcessCmdCmpl+0x1d2>
   18864:	f242 0227 	movw	r2, #8231	; 0x2027
   18868:	4293      	cmp	r3, r2
   1886a:	dc08      	bgt.n	1887e <hciEvtProcessCmdCmpl+0x116>
   1886c:	f242 0223 	movw	r2, #8227	; 0x2023
   18870:	4293      	cmp	r3, r2
   18872:	d041      	beq.n	188f8 <hciEvtProcessCmdCmpl+0x190>
   18874:	f242 0224 	movw	r2, #8228	; 0x2024
   18878:	4293      	cmp	r3, r2
   1887a:	d040      	beq.n	188fe <hciEvtProcessCmdCmpl+0x196>
   1887c:	e087      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
   1887e:	f242 0229 	movw	r2, #8233	; 0x2029
   18882:	4293      	cmp	r3, r2
   18884:	d05f      	beq.n	18946 <hciEvtProcessCmdCmpl+0x1de>
   18886:	f242 0229 	movw	r2, #8233	; 0x2029
   1888a:	4293      	cmp	r3, r2
   1888c:	db58      	blt.n	18940 <hciEvtProcessCmdCmpl+0x1d8>
   1888e:	f242 022b 	movw	r2, #8235	; 0x202b
   18892:	4293      	cmp	r3, r2
   18894:	d05a      	beq.n	1894c <hciEvtProcessCmdCmpl+0x1e4>
   18896:	e07a      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
   18898:	f242 0231 	movw	r2, #8241	; 0x2031
   1889c:	4293      	cmp	r3, r2
   1889e:	d064      	beq.n	1896a <hciEvtProcessCmdCmpl+0x202>
   188a0:	f242 0231 	movw	r2, #8241	; 0x2031
   188a4:	4293      	cmp	r3, r2
   188a6:	dc0c      	bgt.n	188c2 <hciEvtProcessCmdCmpl+0x15a>
   188a8:	f242 022f 	movw	r2, #8239	; 0x202f
   188ac:	4293      	cmp	r3, r2
   188ae:	d02c      	beq.n	1890a <hciEvtProcessCmdCmpl+0x1a2>
   188b0:	f242 022f 	movw	r2, #8239	; 0x202f
   188b4:	4293      	cmp	r3, r2
   188b6:	dc55      	bgt.n	18964 <hciEvtProcessCmdCmpl+0x1fc>
   188b8:	f242 022d 	movw	r2, #8237	; 0x202d
   188bc:	4293      	cmp	r3, r2
   188be:	d04b      	beq.n	18958 <hciEvtProcessCmdCmpl+0x1f0>
   188c0:	e065      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
   188c2:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   188c6:	d05f      	beq.n	18988 <hciEvtProcessCmdCmpl+0x220>
   188c8:	f242 0242 	movw	r2, #8258	; 0x2042
   188cc:	4293      	cmp	r3, r2
   188ce:	d055      	beq.n	1897c <hciEvtProcessCmdCmpl+0x214>
   188d0:	f242 0239 	movw	r2, #8249	; 0x2039
   188d4:	4293      	cmp	r3, r2
   188d6:	d054      	beq.n	18982 <hciEvtProcessCmdCmpl+0x21a>
   188d8:	e059      	b.n	1898e <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   188da:	2305      	movs	r3, #5
   188dc:	75fb      	strb	r3, [r7, #23]
    break;
   188de:	e064      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   188e0:	231b      	movs	r3, #27
   188e2:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   188e4:	4b47      	ldr	r3, [pc, #284]	; (18a04 <hciEvtProcessCmdCmpl+0x29c>)
   188e6:	68db      	ldr	r3, [r3, #12]
   188e8:	613b      	str	r3, [r7, #16]
    break;
   188ea:	e05e      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   188ec:	231d      	movs	r3, #29
   188ee:	75fb      	strb	r3, [r7, #23]
    break;
   188f0:	e05b      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   188f2:	231e      	movs	r3, #30
   188f4:	75fb      	strb	r3, [r7, #23]
    break;
   188f6:	e058      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   188f8:	231f      	movs	r3, #31
   188fa:	75fb      	strb	r3, [r7, #23]
    break;
   188fc:	e055      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   188fe:	2320      	movs	r3, #32
   18900:	75fb      	strb	r3, [r7, #23]
    break;
   18902:	e052      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   18904:	2321      	movs	r3, #33	; 0x21
   18906:	75fb      	strb	r3, [r7, #23]
    break;
   18908:	e04f      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1890a:	2322      	movs	r3, #34	; 0x22
   1890c:	75fb      	strb	r3, [r7, #23]
    break;
   1890e:	e04c      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   18910:	230c      	movs	r3, #12
   18912:	75fb      	strb	r3, [r7, #23]
    break;
   18914:	e049      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   18916:	230d      	movs	r3, #13
   18918:	75fb      	strb	r3, [r7, #23]
    break;
   1891a:	e046      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   1891c:	231c      	movs	r3, #28
   1891e:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   18920:	4b38      	ldr	r3, [pc, #224]	; (18a04 <hciEvtProcessCmdCmpl+0x29c>)
   18922:	68db      	ldr	r3, [r3, #12]
   18924:	613b      	str	r3, [r7, #16]
    break;
   18926:	e040      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   18928:	2308      	movs	r3, #8
   1892a:	75fb      	strb	r3, [r7, #23]
    break;
   1892c:	e03d      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   1892e:	2307      	movs	r3, #7
   18930:	75fb      	strb	r3, [r7, #23]
    break;
   18932:	e03a      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   18934:	2309      	movs	r3, #9
   18936:	75fb      	strb	r3, [r7, #23]
    break;
   18938:	e037      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   1893a:	2315      	movs	r3, #21
   1893c:	75fb      	strb	r3, [r7, #23]
    break;
   1893e:	e034      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   18940:	2316      	movs	r3, #22
   18942:	75fb      	strb	r3, [r7, #23]
    break;
   18944:	e031      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   18946:	2317      	movs	r3, #23
   18948:	75fb      	strb	r3, [r7, #23]
    break;
   1894a:	e02e      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   1894c:	2318      	movs	r3, #24
   1894e:	75fb      	strb	r3, [r7, #23]
    break;
   18950:	e02b      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   18952:	2319      	movs	r3, #25
   18954:	75fb      	strb	r3, [r7, #23]
    break;
   18956:	e028      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   18958:	231a      	movs	r3, #26
   1895a:	75fb      	strb	r3, [r7, #23]
    break;
   1895c:	e025      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   1895e:	2327      	movs	r3, #39	; 0x27
   18960:	75fb      	strb	r3, [r7, #23]
    break;
   18962:	e022      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   18964:	2329      	movs	r3, #41	; 0x29
   18966:	75fb      	strb	r3, [r7, #23]
    break;
   18968:	e01f      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   1896a:	232a      	movs	r3, #42	; 0x2a
   1896c:	75fb      	strb	r3, [r7, #23]
    break;
   1896e:	e01c      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
   18970:	2334      	movs	r3, #52	; 0x34
   18972:	75fb      	strb	r3, [r7, #23]
    break;
   18974:	e019      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
   18976:	2335      	movs	r3, #53	; 0x35
   18978:	75fb      	strb	r3, [r7, #23]
    break;
   1897a:	e016      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
   1897c:	2336      	movs	r3, #54	; 0x36
   1897e:	75fb      	strb	r3, [r7, #23]
    break;
   18980:	e013      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
   18982:	2337      	movs	r3, #55	; 0x37
   18984:	75fb      	strb	r3, [r7, #23]
    break;
   18986:	e010      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
   18988:	2338      	movs	r3, #56	; 0x38
   1898a:	75fb      	strb	r3, [r7, #23]
    break;
   1898c:	e00d      	b.n	189aa <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   1898e:	89bb      	ldrh	r3, [r7, #12]
   18990:	0a9b      	lsrs	r3, r3, #10
   18992:	b29b      	uxth	r3, r3
   18994:	2b3f      	cmp	r3, #63	; 0x3f
   18996:	d107      	bne.n	189a8 <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   18998:	78fa      	ldrb	r2, [r7, #3]
   1899a:	89bb      	ldrh	r3, [r7, #12]
   1899c:	6879      	ldr	r1, [r7, #4]
   1899e:	4618      	mov	r0, r3
   189a0:	f000 fcc4 	bl	1932c <hciCoreVsCmdCmplRcvd>
   189a4:	4603      	mov	r3, r0
   189a6:	75fb      	strb	r3, [r7, #23]
    }
    break;
   189a8:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   189aa:	7dfb      	ldrb	r3, [r7, #23]
   189ac:	2b00      	cmp	r3, #0
   189ae:	d021      	beq.n	189f4 <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   189b0:	7dfb      	ldrb	r3, [r7, #23]
   189b2:	4a15      	ldr	r2, [pc, #84]	; (18a08 <hciEvtProcessCmdCmpl+0x2a0>)
   189b4:	5cd3      	ldrb	r3, [r2, r3]
   189b6:	b29b      	uxth	r3, r3
   189b8:	4618      	mov	r0, r3
   189ba:	f7fc fbb3 	bl	15124 <WsfBufAlloc>
   189be:	60b8      	str	r0, [r7, #8]
   189c0:	68bb      	ldr	r3, [r7, #8]
   189c2:	2b00      	cmp	r3, #0
   189c4:	d016      	beq.n	189f4 <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   189c6:	68bb      	ldr	r3, [r7, #8]
   189c8:	2200      	movs	r2, #0
   189ca:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   189cc:	68bb      	ldr	r3, [r7, #8]
   189ce:	7dfa      	ldrb	r2, [r7, #23]
   189d0:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   189d2:	68bb      	ldr	r3, [r7, #8]
   189d4:	2200      	movs	r2, #0
   189d6:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   189d8:	7dfb      	ldrb	r3, [r7, #23]
   189da:	4a0c      	ldr	r2, [pc, #48]	; (18a0c <hciEvtProcessCmdCmpl+0x2a4>)
   189dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   189e0:	78fa      	ldrb	r2, [r7, #3]
   189e2:	6879      	ldr	r1, [r7, #4]
   189e4:	68b8      	ldr	r0, [r7, #8]
   189e6:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   189e8:	693b      	ldr	r3, [r7, #16]
   189ea:	68b8      	ldr	r0, [r7, #8]
   189ec:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   189ee:	68b8      	ldr	r0, [r7, #8]
   189f0:	f7fc fbd8 	bl	151a4 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   189f4:	7bfb      	ldrb	r3, [r7, #15]
   189f6:	4618      	mov	r0, r3
   189f8:	f7fc ff1e 	bl	15838 <hciCmdRecvCmpl>
}
   189fc:	bf00      	nop
   189fe:	3718      	adds	r7, #24
   18a00:	46bd      	mov	sp, r7
   18a02:	bd80      	pop	{r7, pc}
   18a04:	100051fc 	.word	0x100051fc
   18a08:	00022b48 	.word	0x00022b48
   18a0c:	00022a64 	.word	0x00022a64

00018a10 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   18a10:	b580      	push	{r7, lr}
   18a12:	b088      	sub	sp, #32
   18a14:	af00      	add	r7, sp, #0
   18a16:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   18a18:	2300      	movs	r3, #0
   18a1a:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   18a1c:	4ba1      	ldr	r3, [pc, #644]	; (18ca4 <hciEvtProcessMsg+0x294>)
   18a1e:	689b      	ldr	r3, [r3, #8]
   18a20:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   18a22:	687b      	ldr	r3, [r7, #4]
   18a24:	1c5a      	adds	r2, r3, #1
   18a26:	607a      	str	r2, [r7, #4]
   18a28:	781b      	ldrb	r3, [r3, #0]
   18a2a:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   18a2c:	687b      	ldr	r3, [r7, #4]
   18a2e:	1c5a      	adds	r2, r3, #1
   18a30:	607a      	str	r2, [r7, #4]
   18a32:	781b      	ldrb	r3, [r3, #0]
   18a34:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   18a36:	7dfb      	ldrb	r3, [r7, #23]
   18a38:	2b10      	cmp	r3, #16
   18a3a:	f000 8121 	beq.w	18c80 <hciEvtProcessMsg+0x270>
   18a3e:	2b10      	cmp	r3, #16
   18a40:	dc10      	bgt.n	18a64 <hciEvtProcessMsg+0x54>
   18a42:	2b0c      	cmp	r3, #12
   18a44:	f000 8103 	beq.w	18c4e <hciEvtProcessMsg+0x23e>
   18a48:	2b0c      	cmp	r3, #12
   18a4a:	dc06      	bgt.n	18a5a <hciEvtProcessMsg+0x4a>
   18a4c:	2b05      	cmp	r3, #5
   18a4e:	f000 80ec 	beq.w	18c2a <hciEvtProcessMsg+0x21a>
   18a52:	2b08      	cmp	r3, #8
   18a54:	f000 80f2 	beq.w	18c3c <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   18a58:	e131      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
  switch (evt)
   18a5a:	2b0e      	cmp	r3, #14
   18a5c:	d020      	beq.n	18aa0 <hciEvtProcessMsg+0x90>
   18a5e:	2b0f      	cmp	r3, #15
   18a60:	d014      	beq.n	18a8c <hciEvtProcessMsg+0x7c>
      break;
   18a62:	e12c      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
  switch (evt)
   18a64:	2b30      	cmp	r3, #48	; 0x30
   18a66:	f000 80fb 	beq.w	18c60 <hciEvtProcessMsg+0x250>
   18a6a:	2b30      	cmp	r3, #48	; 0x30
   18a6c:	dc05      	bgt.n	18a7a <hciEvtProcessMsg+0x6a>
   18a6e:	2b13      	cmp	r3, #19
   18a70:	d022      	beq.n	18ab8 <hciEvtProcessMsg+0xa8>
   18a72:	2b1a      	cmp	r3, #26
   18a74:	f000 80fd 	beq.w	18c72 <hciEvtProcessMsg+0x262>
      break;
   18a78:	e121      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
  switch (evt)
   18a7a:	2b57      	cmp	r3, #87	; 0x57
   18a7c:	f000 8109 	beq.w	18c92 <hciEvtProcessMsg+0x282>
   18a80:	2bff      	cmp	r3, #255	; 0xff
   18a82:	f000 8113 	beq.w	18cac <hciEvtProcessMsg+0x29c>
   18a86:	2b3e      	cmp	r3, #62	; 0x3e
   18a88:	d020      	beq.n	18acc <hciEvtProcessMsg+0xbc>
      break;
   18a8a:	e118      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
   18a8c:	4b86      	ldr	r3, [pc, #536]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18a8e:	891b      	ldrh	r3, [r3, #8]
   18a90:	3301      	adds	r3, #1
   18a92:	b29a      	uxth	r2, r3
   18a94:	4b84      	ldr	r3, [pc, #528]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18a96:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   18a98:	6878      	ldr	r0, [r7, #4]
   18a9a:	f7ff fe37 	bl	1870c <hciEvtProcessCmdStatus>
      break;
   18a9e:	e10e      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
   18aa0:	4b81      	ldr	r3, [pc, #516]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18aa2:	88db      	ldrh	r3, [r3, #6]
   18aa4:	3301      	adds	r3, #1
   18aa6:	b29a      	uxth	r2, r3
   18aa8:	4b7f      	ldr	r3, [pc, #508]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18aaa:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   18aac:	7dbb      	ldrb	r3, [r7, #22]
   18aae:	4619      	mov	r1, r3
   18ab0:	6878      	ldr	r0, [r7, #4]
   18ab2:	f7ff fe59 	bl	18768 <hciEvtProcessCmdCmpl>
      break;
   18ab6:	e102      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
   18ab8:	6878      	ldr	r0, [r7, #4]
   18aba:	f7fe fa35 	bl	16f28 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   18abe:	4b7a      	ldr	r3, [pc, #488]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18ac0:	899b      	ldrh	r3, [r3, #12]
   18ac2:	3301      	adds	r3, #1
   18ac4:	b29a      	uxth	r2, r3
   18ac6:	4b78      	ldr	r3, [pc, #480]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18ac8:	819a      	strh	r2, [r3, #12]
      break;
   18aca:	e0f8      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   18acc:	687b      	ldr	r3, [r7, #4]
   18ace:	1c5a      	adds	r2, r3, #1
   18ad0:	607a      	str	r2, [r7, #4]
   18ad2:	781b      	ldrb	r3, [r3, #0]
   18ad4:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
   18ad6:	4b74      	ldr	r3, [pc, #464]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18ad8:	8a5b      	ldrh	r3, [r3, #18]
   18ada:	3301      	adds	r3, #1
   18adc:	b29a      	uxth	r2, r3
   18ade:	4b72      	ldr	r3, [pc, #456]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18ae0:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   18ae2:	7d7b      	ldrb	r3, [r7, #21]
   18ae4:	3b01      	subs	r3, #1
   18ae6:	2b12      	cmp	r3, #18
   18ae8:	f200 809d 	bhi.w	18c26 <hciEvtProcessMsg+0x216>
   18aec:	a201      	add	r2, pc, #4	; (adr r2, 18af4 <hciEvtProcessMsg+0xe4>)
   18aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18af2:	bf00      	nop
   18af4:	00018b41 	.word	0x00018b41
   18af8:	00018b6f 	.word	0x00018b6f
   18afc:	00018b7b 	.word	0x00018b7b
   18b00:	00018b81 	.word	0x00018b81
   18b04:	00018b87 	.word	0x00018b87
   18b08:	00018bc7 	.word	0x00018bc7
   18b0c:	00018bcd 	.word	0x00018bcd
   18b10:	00018bd3 	.word	0x00018bd3
   18b14:	00018bdf 	.word	0x00018bdf
   18b18:	00018b8d 	.word	0x00018b8d
   18b1c:	00018bbb 	.word	0x00018bbb
   18b20:	00018beb 	.word	0x00018beb
   18b24:	00018bf1 	.word	0x00018bf1
   18b28:	00018c0f 	.word	0x00018c0f
   18b2c:	00018c15 	.word	0x00018c15
   18b30:	00018c21 	.word	0x00018c21
   18b34:	00018bfd 	.word	0x00018bfd
   18b38:	00018c03 	.word	0x00018c03
   18b3c:	00018c09 	.word	0x00018c09
          if (*pEvt == HCI_SUCCESS)
   18b40:	687b      	ldr	r3, [r7, #4]
   18b42:	781b      	ldrb	r3, [r3, #0]
   18b44:	2b00      	cmp	r3, #0
   18b46:	d10f      	bne.n	18b68 <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18b48:	687b      	ldr	r3, [r7, #4]
   18b4a:	3301      	adds	r3, #1
   18b4c:	781b      	ldrb	r3, [r3, #0]
   18b4e:	b29a      	uxth	r2, r3
   18b50:	687b      	ldr	r3, [r7, #4]
   18b52:	3302      	adds	r3, #2
   18b54:	781b      	ldrb	r3, [r3, #0]
   18b56:	b29b      	uxth	r3, r3
   18b58:	021b      	lsls	r3, r3, #8
   18b5a:	b29b      	uxth	r3, r3
   18b5c:	4413      	add	r3, r2
   18b5e:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   18b60:	8a7b      	ldrh	r3, [r7, #18]
   18b62:	4618      	mov	r0, r3
   18b64:	f7fd fe7e 	bl	16864 <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   18b68:	2301      	movs	r3, #1
   18b6a:	77fb      	strb	r3, [r7, #31]
          break;
   18b6c:	e05c      	b.n	18c28 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
   18b6e:	7dbb      	ldrb	r3, [r7, #22]
   18b70:	4619      	mov	r1, r3
   18b72:	6878      	ldr	r0, [r7, #4]
   18b74:	f7ff fab4 	bl	180e0 <hciEvtProcessLeAdvReport>
          break;
   18b78:	e056      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   18b7a:	2304      	movs	r3, #4
   18b7c:	77fb      	strb	r3, [r7, #31]
          break;
   18b7e:	e053      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   18b80:	230b      	movs	r3, #11
   18b82:	77fb      	strb	r3, [r7, #31]
          break;
   18b84:	e050      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   18b86:	2310      	movs	r3, #16
   18b88:	77fb      	strb	r3, [r7, #31]
          break;
   18b8a:	e04d      	b.n	18c28 <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
   18b8c:	687b      	ldr	r3, [r7, #4]
   18b8e:	781b      	ldrb	r3, [r3, #0]
   18b90:	2b00      	cmp	r3, #0
   18b92:	d10f      	bne.n	18bb4 <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18b94:	687b      	ldr	r3, [r7, #4]
   18b96:	3301      	adds	r3, #1
   18b98:	781b      	ldrb	r3, [r3, #0]
   18b9a:	b29a      	uxth	r2, r3
   18b9c:	687b      	ldr	r3, [r7, #4]
   18b9e:	3302      	adds	r3, #2
   18ba0:	781b      	ldrb	r3, [r3, #0]
   18ba2:	b29b      	uxth	r3, r3
   18ba4:	021b      	lsls	r3, r3, #8
   18ba6:	b29b      	uxth	r3, r3
   18ba8:	4413      	add	r3, r2
   18baa:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   18bac:	8a7b      	ldrh	r3, [r7, #18]
   18bae:	4618      	mov	r0, r3
   18bb0:	f7fd fe58 	bl	16864 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   18bb4:	2302      	movs	r3, #2
   18bb6:	77fb      	strb	r3, [r7, #31]
          break;
   18bb8:	e036      	b.n	18c28 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   18bba:	7dbb      	ldrb	r3, [r7, #22]
   18bbc:	4619      	mov	r1, r3
   18bbe:	6878      	ldr	r0, [r7, #4]
   18bc0:	f7ff fd32 	bl	18628 <hciEvtProcessLeDirectAdvReport>
          break;
   18bc4:	e030      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   18bc6:	2323      	movs	r3, #35	; 0x23
   18bc8:	77fb      	strb	r3, [r7, #31]
          break;
   18bca:	e02d      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   18bcc:	2324      	movs	r3, #36	; 0x24
   18bce:	77fb      	strb	r3, [r7, #31]
          break;
   18bd0:	e02a      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   18bd2:	4b34      	ldr	r3, [pc, #208]	; (18ca4 <hciEvtProcessMsg+0x294>)
   18bd4:	68db      	ldr	r3, [r3, #12]
   18bd6:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   18bd8:	2325      	movs	r3, #37	; 0x25
   18bda:	77fb      	strb	r3, [r7, #31]
          break;
   18bdc:	e024      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   18bde:	4b31      	ldr	r3, [pc, #196]	; (18ca4 <hciEvtProcessMsg+0x294>)
   18be0:	68db      	ldr	r3, [r3, #12]
   18be2:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   18be4:	2326      	movs	r3, #38	; 0x26
   18be6:	77fb      	strb	r3, [r7, #31]
          break;
   18be8:	e01e      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   18bea:	232b      	movs	r3, #43	; 0x2b
   18bec:	77fb      	strb	r3, [r7, #31]
          break;
   18bee:	e01b      	b.n	18c28 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   18bf0:	7dbb      	ldrb	r3, [r7, #22]
   18bf2:	4619      	mov	r1, r3
   18bf4:	6878      	ldr	r0, [r7, #4]
   18bf6:	f7ff faeb 	bl	181d0 <hciEvtProcessLeExtAdvReport>
          break;
   18bfa:	e015      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   18bfc:	232d      	movs	r3, #45	; 0x2d
   18bfe:	77fb      	strb	r3, [r7, #31]
          break;
   18c00:	e012      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   18c02:	232e      	movs	r3, #46	; 0x2e
   18c04:	77fb      	strb	r3, [r7, #31]
          break;
   18c06:	e00f      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   18c08:	232f      	movs	r3, #47	; 0x2f
   18c0a:	77fb      	strb	r3, [r7, #31]
          break;
   18c0c:	e00c      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   18c0e:	2330      	movs	r3, #48	; 0x30
   18c10:	77fb      	strb	r3, [r7, #31]
          break;
   18c12:	e009      	b.n	18c28 <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
   18c14:	7dbb      	ldrb	r3, [r7, #22]
   18c16:	4619      	mov	r1, r3
   18c18:	6878      	ldr	r0, [r7, #4]
   18c1a:	f7ff fc6b 	bl	184f4 <hciEvtProcessLePerAdvReport>
          break;
   18c1e:	e003      	b.n	18c28 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   18c20:	2332      	movs	r3, #50	; 0x32
   18c22:	77fb      	strb	r3, [r7, #31]
          break;
   18c24:	e000      	b.n	18c28 <hciEvtProcessMsg+0x218>
          break;
   18c26:	bf00      	nop
      break;
   18c28:	e049      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
   18c2a:	4b1f      	ldr	r3, [pc, #124]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c2c:	881b      	ldrh	r3, [r3, #0]
   18c2e:	3301      	adds	r3, #1
   18c30:	b29a      	uxth	r2, r3
   18c32:	4b1d      	ldr	r3, [pc, #116]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c34:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   18c36:	2303      	movs	r3, #3
   18c38:	77fb      	strb	r3, [r7, #31]
      break;
   18c3a:	e040      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
   18c3c:	4b1a      	ldr	r3, [pc, #104]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c3e:	885b      	ldrh	r3, [r3, #2]
   18c40:	3301      	adds	r3, #1
   18c42:	b29a      	uxth	r2, r3
   18c44:	4b18      	ldr	r3, [pc, #96]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c46:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   18c48:	230f      	movs	r3, #15
   18c4a:	77fb      	strb	r3, [r7, #31]
      break;
   18c4c:	e037      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   18c4e:	4b16      	ldr	r3, [pc, #88]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c50:	889b      	ldrh	r3, [r3, #4]
   18c52:	3301      	adds	r3, #1
   18c54:	b29a      	uxth	r2, r3
   18c56:	4b14      	ldr	r3, [pc, #80]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c58:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   18c5a:	230a      	movs	r3, #10
   18c5c:	77fb      	strb	r3, [r7, #31]
      break;
   18c5e:	e02e      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   18c60:	4b11      	ldr	r3, [pc, #68]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c62:	8a1b      	ldrh	r3, [r3, #16]
   18c64:	3301      	adds	r3, #1
   18c66:	b29a      	uxth	r2, r3
   18c68:	4b0f      	ldr	r3, [pc, #60]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c6a:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   18c6c:	230e      	movs	r3, #14
   18c6e:	77fb      	strb	r3, [r7, #31]
      break;
   18c70:	e025      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
   18c72:	4b0d      	ldr	r3, [pc, #52]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c74:	89db      	ldrh	r3, [r3, #14]
   18c76:	3301      	adds	r3, #1
   18c78:	b29a      	uxth	r2, r3
   18c7a:	4b0b      	ldr	r3, [pc, #44]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c7c:	81da      	strh	r2, [r3, #14]
      break;
   18c7e:	e01e      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
   18c80:	4b09      	ldr	r3, [pc, #36]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c82:	895b      	ldrh	r3, [r3, #10]
   18c84:	3301      	adds	r3, #1
   18c86:	b29a      	uxth	r2, r3
   18c88:	4b07      	ldr	r3, [pc, #28]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c8a:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   18c8c:	2314      	movs	r3, #20
   18c8e:	77fb      	strb	r3, [r7, #31]
      break;
   18c90:	e015      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
   18c92:	4b05      	ldr	r3, [pc, #20]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c94:	8adb      	ldrh	r3, [r3, #22]
   18c96:	3301      	adds	r3, #1
   18c98:	b29a      	uxth	r2, r3
   18c9a:	4b03      	ldr	r3, [pc, #12]	; (18ca8 <hciEvtProcessMsg+0x298>)
   18c9c:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   18c9e:	2328      	movs	r3, #40	; 0x28
   18ca0:	77fb      	strb	r3, [r7, #31]
      break;
   18ca2:	e00c      	b.n	18cbe <hciEvtProcessMsg+0x2ae>
   18ca4:	100051fc 	.word	0x100051fc
   18ca8:	100043cc 	.word	0x100043cc
      hciEvtStats.numVendorSpecEvt++;
   18cac:	4b22      	ldr	r3, [pc, #136]	; (18d38 <hciEvtProcessMsg+0x328>)
   18cae:	8a9b      	ldrh	r3, [r3, #20]
   18cb0:	3301      	adds	r3, #1
   18cb2:	b29a      	uxth	r2, r3
   18cb4:	4b20      	ldr	r3, [pc, #128]	; (18d38 <hciEvtProcessMsg+0x328>)
   18cb6:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   18cb8:	2313      	movs	r3, #19
   18cba:	77fb      	strb	r3, [r7, #31]
      break;
   18cbc:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   18cbe:	7ffb      	ldrb	r3, [r7, #31]
   18cc0:	2b00      	cmp	r3, #0
   18cc2:	d034      	beq.n	18d2e <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   18cc4:	7ffb      	ldrb	r3, [r7, #31]
   18cc6:	4a1d      	ldr	r2, [pc, #116]	; (18d3c <hciEvtProcessMsg+0x32c>)
   18cc8:	5cd3      	ldrb	r3, [r2, r3]
   18cca:	b29b      	uxth	r3, r3
   18ccc:	4618      	mov	r0, r3
   18cce:	f7fc fa29 	bl	15124 <WsfBufAlloc>
   18cd2:	60f8      	str	r0, [r7, #12]
   18cd4:	68fb      	ldr	r3, [r7, #12]
   18cd6:	2b00      	cmp	r3, #0
   18cd8:	d016      	beq.n	18d08 <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   18cda:	68fb      	ldr	r3, [r7, #12]
   18cdc:	2200      	movs	r2, #0
   18cde:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   18ce0:	68fb      	ldr	r3, [r7, #12]
   18ce2:	7ffa      	ldrb	r2, [r7, #31]
   18ce4:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   18ce6:	68fb      	ldr	r3, [r7, #12]
   18ce8:	2200      	movs	r2, #0
   18cea:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   18cec:	7ffb      	ldrb	r3, [r7, #31]
   18cee:	4a14      	ldr	r2, [pc, #80]	; (18d40 <hciEvtProcessMsg+0x330>)
   18cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18cf4:	7dba      	ldrb	r2, [r7, #22]
   18cf6:	6879      	ldr	r1, [r7, #4]
   18cf8:	68f8      	ldr	r0, [r7, #12]
   18cfa:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   18cfc:	69bb      	ldr	r3, [r7, #24]
   18cfe:	68f8      	ldr	r0, [r7, #12]
   18d00:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   18d02:	68f8      	ldr	r0, [r7, #12]
   18d04:	f7fc fa4e 	bl	151a4 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   18d08:	7ffb      	ldrb	r3, [r7, #31]
   18d0a:	2b03      	cmp	r3, #3
   18d0c:	d10f      	bne.n	18d2e <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   18d0e:	687b      	ldr	r3, [r7, #4]
   18d10:	3301      	adds	r3, #1
   18d12:	781b      	ldrb	r3, [r3, #0]
   18d14:	b29a      	uxth	r2, r3
   18d16:	687b      	ldr	r3, [r7, #4]
   18d18:	3302      	adds	r3, #2
   18d1a:	781b      	ldrb	r3, [r3, #0]
   18d1c:	b29b      	uxth	r3, r3
   18d1e:	021b      	lsls	r3, r3, #8
   18d20:	b29b      	uxth	r3, r3
   18d22:	4413      	add	r3, r2
   18d24:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
   18d26:	8a7b      	ldrh	r3, [r7, #18]
   18d28:	4618      	mov	r0, r3
   18d2a:	f7fd fda8 	bl	1687e <hciCoreConnClose>
    }
  }
}
   18d2e:	bf00      	nop
   18d30:	3720      	adds	r7, #32
   18d32:	46bd      	mov	sp, r7
   18d34:	bd80      	pop	{r7, pc}
   18d36:	bf00      	nop
   18d38:	100043cc 	.word	0x100043cc
   18d3c:	00022b48 	.word	0x00022b48
   18d40:	00022a64 	.word	0x00022a64

00018d44 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   18d44:	b580      	push	{r7, lr}
   18d46:	b084      	sub	sp, #16
   18d48:	af00      	add	r7, sp, #0
   18d4a:	6078      	str	r0, [r7, #4]
   18d4c:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   18d4e:	683b      	ldr	r3, [r7, #0]
   18d50:	3302      	adds	r3, #2
   18d52:	781b      	ldrb	r3, [r3, #0]
   18d54:	b29a      	uxth	r2, r3
   18d56:	683b      	ldr	r3, [r7, #0]
   18d58:	3303      	adds	r3, #3
   18d5a:	781b      	ldrb	r3, [r3, #0]
   18d5c:	b29b      	uxth	r3, r3
   18d5e:	021b      	lsls	r3, r3, #8
   18d60:	b29b      	uxth	r3, r3
   18d62:	4413      	add	r3, r2
   18d64:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
   18d66:	89fb      	ldrh	r3, [r7, #14]
   18d68:	3304      	adds	r3, #4
   18d6a:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   18d6c:	89fb      	ldrh	r3, [r7, #14]
   18d6e:	683a      	ldr	r2, [r7, #0]
   18d70:	4619      	mov	r1, r3
   18d72:	2002      	movs	r0, #2
   18d74:	f7fb ff0c 	bl	14b90 <hciDrvWrite>
   18d78:	4603      	mov	r3, r0
   18d7a:	461a      	mov	r2, r3
   18d7c:	89fb      	ldrh	r3, [r7, #14]
   18d7e:	4293      	cmp	r3, r2
   18d80:	d103      	bne.n	18d8a <hciTrSendAclData+0x46>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   18d82:	6839      	ldr	r1, [r7, #0]
   18d84:	6878      	ldr	r0, [r7, #4]
   18d86:	f7fd feb5 	bl	16af4 <hciCoreTxAclComplete>
  }
}
   18d8a:	bf00      	nop
   18d8c:	3710      	adds	r7, #16
   18d8e:	46bd      	mov	sp, r7
   18d90:	bd80      	pop	{r7, pc}

00018d92 <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   18d92:	b580      	push	{r7, lr}
   18d94:	b084      	sub	sp, #16
   18d96:	af00      	add	r7, sp, #0
   18d98:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   18d9a:	687b      	ldr	r3, [r7, #4]
   18d9c:	3302      	adds	r3, #2
   18d9e:	781b      	ldrb	r3, [r3, #0]
   18da0:	3303      	adds	r3, #3
   18da2:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   18da4:	7bfb      	ldrb	r3, [r7, #15]
   18da6:	b29b      	uxth	r3, r3
   18da8:	687a      	ldr	r2, [r7, #4]
   18daa:	4619      	mov	r1, r3
   18dac:	2001      	movs	r0, #1
   18dae:	f7fb feef 	bl	14b90 <hciDrvWrite>
   18db2:	4603      	mov	r3, r0
   18db4:	461a      	mov	r2, r3
   18db6:	7bfb      	ldrb	r3, [r7, #15]
   18db8:	b29b      	uxth	r3, r3
   18dba:	429a      	cmp	r2, r3
   18dbc:	d102      	bne.n	18dc4 <hciTrSendCmd+0x32>
  {
    /* free buffer */
    WsfMsgFree(pData);
   18dbe:	6878      	ldr	r0, [r7, #4]
   18dc0:	f7fc fa56 	bl	15270 <WsfMsgFree>
  }
}
   18dc4:	bf00      	nop
   18dc6:	3710      	adds	r7, #16
   18dc8:	46bd      	mov	sp, r7
   18dca:	bd80      	pop	{r7, pc}

00018dcc <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   18dcc:	b580      	push	{r7, lr}
   18dce:	b084      	sub	sp, #16
   18dd0:	af00      	add	r7, sp, #0
   18dd2:	6078      	str	r0, [r7, #4]
   18dd4:	460b      	mov	r3, r1
   18dd6:	807b      	strh	r3, [r7, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   18dd8:	2300      	movs	r3, #0
   18dda:	81fb      	strh	r3, [r7, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   18ddc:	e0e9      	b.n	18fb2 <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   18dde:	687b      	ldr	r3, [r7, #4]
   18de0:	781b      	ldrb	r3, [r3, #0]
   18de2:	723b      	strb	r3, [r7, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   18de4:	4b77      	ldr	r3, [pc, #476]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18de6:	781b      	ldrb	r3, [r3, #0]
   18de8:	2b00      	cmp	r3, #0
   18dea:	d115      	bne.n	18e18 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   18dec:	4a76      	ldr	r2, [pc, #472]	; (18fc8 <hciTrSerialRxIncoming+0x1fc>)
   18dee:	7a3b      	ldrb	r3, [r7, #8]
   18df0:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   18df2:	4b76      	ldr	r3, [pc, #472]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18df4:	2200      	movs	r2, #0
   18df6:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   18df8:	4b72      	ldr	r3, [pc, #456]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18dfa:	2201      	movs	r2, #1
   18dfc:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   18dfe:	4b74      	ldr	r3, [pc, #464]	; (18fd0 <hciTrSerialRxIncoming+0x204>)
   18e00:	2201      	movs	r2, #1
   18e02:	701a      	strb	r2, [r3, #0]
      pBuf++;
   18e04:	687b      	ldr	r3, [r7, #4]
   18e06:	3301      	adds	r3, #1
   18e08:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   18e0a:	89fb      	ldrh	r3, [r7, #14]
   18e0c:	3301      	adds	r3, #1
   18e0e:	81fb      	strh	r3, [r7, #14]
      len--;
   18e10:	887b      	ldrh	r3, [r7, #2]
   18e12:	3b01      	subs	r3, #1
   18e14:	807b      	strh	r3, [r7, #2]
   18e16:	e0b6      	b.n	18f86 <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   18e18:	4b6a      	ldr	r3, [pc, #424]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18e1a:	781b      	ldrb	r3, [r3, #0]
   18e1c:	2b01      	cmp	r3, #1
   18e1e:	f040 8091 	bne.w	18f44 <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
   18e22:	2300      	movs	r3, #0
   18e24:	737b      	strb	r3, [r7, #13]
      uint16_t dataLen = 0;
   18e26:	2300      	movs	r3, #0
   18e28:	817b      	strh	r3, [r7, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   18e2a:	4b67      	ldr	r3, [pc, #412]	; (18fc8 <hciTrSerialRxIncoming+0x1fc>)
   18e2c:	781b      	ldrb	r3, [r3, #0]
   18e2e:	2b04      	cmp	r3, #4
   18e30:	d102      	bne.n	18e38 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   18e32:	2302      	movs	r3, #2
   18e34:	737b      	strb	r3, [r7, #13]
   18e36:	e008      	b.n	18e4a <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   18e38:	4b63      	ldr	r3, [pc, #396]	; (18fc8 <hciTrSerialRxIncoming+0x1fc>)
   18e3a:	781b      	ldrb	r3, [r3, #0]
   18e3c:	2b02      	cmp	r3, #2
   18e3e:	d102      	bne.n	18e46 <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   18e40:	2304      	movs	r3, #4
   18e42:	737b      	strb	r3, [r7, #13]
   18e44:	e001      	b.n	18e4a <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   18e46:	89fb      	ldrh	r3, [r7, #14]
   18e48:	e0b8      	b.n	18fbc <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
   18e4a:	7b7b      	ldrb	r3, [r7, #13]
   18e4c:	b29a      	uxth	r2, r3
   18e4e:	4b5f      	ldr	r3, [pc, #380]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18e50:	881b      	ldrh	r3, [r3, #0]
   18e52:	429a      	cmp	r2, r3
   18e54:	d012      	beq.n	18e7c <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   18e56:	4b5d      	ldr	r3, [pc, #372]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18e58:	881b      	ldrh	r3, [r3, #0]
   18e5a:	1c5a      	adds	r2, r3, #1
   18e5c:	b291      	uxth	r1, r2
   18e5e:	4a5b      	ldr	r2, [pc, #364]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18e60:	8011      	strh	r1, [r2, #0]
   18e62:	4619      	mov	r1, r3
   18e64:	4a5b      	ldr	r2, [pc, #364]	; (18fd4 <hciTrSerialRxIncoming+0x208>)
   18e66:	7a3b      	ldrb	r3, [r7, #8]
   18e68:	5453      	strb	r3, [r2, r1]
        pBuf++;
   18e6a:	687b      	ldr	r3, [r7, #4]
   18e6c:	3301      	adds	r3, #1
   18e6e:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
   18e70:	89fb      	ldrh	r3, [r7, #14]
   18e72:	3301      	adds	r3, #1
   18e74:	81fb      	strh	r3, [r7, #14]
        len--;
   18e76:	887b      	ldrh	r3, [r7, #2]
   18e78:	3b01      	subs	r3, #1
   18e7a:	807b      	strh	r3, [r7, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   18e7c:	7b7b      	ldrb	r3, [r7, #13]
   18e7e:	b29a      	uxth	r2, r3
   18e80:	4b52      	ldr	r3, [pc, #328]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18e82:	881b      	ldrh	r3, [r3, #0]
   18e84:	429a      	cmp	r2, r3
   18e86:	d17e      	bne.n	18f86 <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   18e88:	4b4f      	ldr	r3, [pc, #316]	; (18fc8 <hciTrSerialRxIncoming+0x1fc>)
   18e8a:	781b      	ldrb	r3, [r3, #0]
   18e8c:	2b04      	cmp	r3, #4
   18e8e:	d103      	bne.n	18e98 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
   18e90:	4b50      	ldr	r3, [pc, #320]	; (18fd4 <hciTrSerialRxIncoming+0x208>)
   18e92:	785b      	ldrb	r3, [r3, #1]
   18e94:	817b      	strh	r3, [r7, #10]
   18e96:	e00d      	b.n	18eb4 <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   18e98:	4b4b      	ldr	r3, [pc, #300]	; (18fc8 <hciTrSerialRxIncoming+0x1fc>)
   18e9a:	781b      	ldrb	r3, [r3, #0]
   18e9c:	2b02      	cmp	r3, #2
   18e9e:	d109      	bne.n	18eb4 <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   18ea0:	4b4c      	ldr	r3, [pc, #304]	; (18fd4 <hciTrSerialRxIncoming+0x208>)
   18ea2:	789b      	ldrb	r3, [r3, #2]
   18ea4:	b29a      	uxth	r2, r3
   18ea6:	4b4c      	ldr	r3, [pc, #304]	; (18fd8 <hciTrSerialRxIncoming+0x20c>)
   18ea8:	781b      	ldrb	r3, [r3, #0]
   18eaa:	b29b      	uxth	r3, r3
   18eac:	021b      	lsls	r3, r3, #8
   18eae:	b29b      	uxth	r3, r3
   18eb0:	4413      	add	r3, r2
   18eb2:	817b      	strh	r3, [r7, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   18eb4:	4b44      	ldr	r3, [pc, #272]	; (18fc8 <hciTrSerialRxIncoming+0x1fc>)
   18eb6:	781b      	ldrb	r3, [r3, #0]
   18eb8:	2b02      	cmp	r3, #2
   18eba:	d10c      	bne.n	18ed6 <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   18ebc:	7b7b      	ldrb	r3, [r7, #13]
   18ebe:	b29a      	uxth	r2, r3
   18ec0:	897b      	ldrh	r3, [r7, #10]
   18ec2:	4413      	add	r3, r2
   18ec4:	b29b      	uxth	r3, r3
   18ec6:	2100      	movs	r1, #0
   18ec8:	4618      	mov	r0, r3
   18eca:	f7fc f9a5 	bl	15218 <WsfMsgDataAlloc>
   18ece:	4602      	mov	r2, r0
   18ed0:	4b42      	ldr	r3, [pc, #264]	; (18fdc <hciTrSerialRxIncoming+0x210>)
   18ed2:	601a      	str	r2, [r3, #0]
   18ed4:	e00a      	b.n	18eec <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   18ed6:	7b7b      	ldrb	r3, [r7, #13]
   18ed8:	b29a      	uxth	r2, r3
   18eda:	897b      	ldrh	r3, [r7, #10]
   18edc:	4413      	add	r3, r2
   18ede:	b29b      	uxth	r3, r3
   18ee0:	4618      	mov	r0, r3
   18ee2:	f7fc f9ae 	bl	15242 <WsfMsgAlloc>
   18ee6:	4602      	mov	r2, r0
   18ee8:	4b3c      	ldr	r3, [pc, #240]	; (18fdc <hciTrSerialRxIncoming+0x210>)
   18eea:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   18eec:	4b3b      	ldr	r3, [pc, #236]	; (18fdc <hciTrSerialRxIncoming+0x210>)
   18eee:	681b      	ldr	r3, [r3, #0]
   18ef0:	2b00      	cmp	r3, #0
   18ef2:	d025      	beq.n	18f40 <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
   18ef4:	4b39      	ldr	r3, [pc, #228]	; (18fdc <hciTrSerialRxIncoming+0x210>)
   18ef6:	681b      	ldr	r3, [r3, #0]
   18ef8:	4a39      	ldr	r2, [pc, #228]	; (18fe0 <hciTrSerialRxIncoming+0x214>)
   18efa:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   18efc:	2300      	movs	r3, #0
   18efe:	727b      	strb	r3, [r7, #9]
   18f00:	e00b      	b.n	18f1a <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
   18f02:	4b37      	ldr	r3, [pc, #220]	; (18fe0 <hciTrSerialRxIncoming+0x214>)
   18f04:	681b      	ldr	r3, [r3, #0]
   18f06:	1c5a      	adds	r2, r3, #1
   18f08:	4935      	ldr	r1, [pc, #212]	; (18fe0 <hciTrSerialRxIncoming+0x214>)
   18f0a:	600a      	str	r2, [r1, #0]
   18f0c:	7a7a      	ldrb	r2, [r7, #9]
   18f0e:	4931      	ldr	r1, [pc, #196]	; (18fd4 <hciTrSerialRxIncoming+0x208>)
   18f10:	5c8a      	ldrb	r2, [r1, r2]
   18f12:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   18f14:	7a7b      	ldrb	r3, [r7, #9]
   18f16:	3301      	adds	r3, #1
   18f18:	727b      	strb	r3, [r7, #9]
   18f1a:	7a7a      	ldrb	r2, [r7, #9]
   18f1c:	7b7b      	ldrb	r3, [r7, #13]
   18f1e:	429a      	cmp	r2, r3
   18f20:	d3ef      	bcc.n	18f02 <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   18f22:	4a2a      	ldr	r2, [pc, #168]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18f24:	897b      	ldrh	r3, [r7, #10]
   18f26:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   18f28:	4b28      	ldr	r3, [pc, #160]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18f2a:	881b      	ldrh	r3, [r3, #0]
   18f2c:	2b00      	cmp	r3, #0
   18f2e:	d103      	bne.n	18f38 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   18f30:	4b24      	ldr	r3, [pc, #144]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18f32:	2203      	movs	r2, #3
   18f34:	701a      	strb	r2, [r3, #0]
   18f36:	e026      	b.n	18f86 <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   18f38:	4b22      	ldr	r3, [pc, #136]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18f3a:	2202      	movs	r2, #2
   18f3c:	701a      	strb	r2, [r3, #0]
   18f3e:	e022      	b.n	18f86 <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   18f40:	89fb      	ldrh	r3, [r7, #14]
   18f42:	e03b      	b.n	18fbc <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   18f44:	4b1f      	ldr	r3, [pc, #124]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18f46:	781b      	ldrb	r3, [r3, #0]
   18f48:	2b02      	cmp	r3, #2
   18f4a:	d11c      	bne.n	18f86 <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   18f4c:	4b24      	ldr	r3, [pc, #144]	; (18fe0 <hciTrSerialRxIncoming+0x214>)
   18f4e:	681b      	ldr	r3, [r3, #0]
   18f50:	1c5a      	adds	r2, r3, #1
   18f52:	4923      	ldr	r1, [pc, #140]	; (18fe0 <hciTrSerialRxIncoming+0x214>)
   18f54:	600a      	str	r2, [r1, #0]
   18f56:	7a3a      	ldrb	r2, [r7, #8]
   18f58:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   18f5a:	4b1c      	ldr	r3, [pc, #112]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18f5c:	881b      	ldrh	r3, [r3, #0]
   18f5e:	3b01      	subs	r3, #1
   18f60:	b29a      	uxth	r2, r3
   18f62:	4b1a      	ldr	r3, [pc, #104]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18f64:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   18f66:	4b19      	ldr	r3, [pc, #100]	; (18fcc <hciTrSerialRxIncoming+0x200>)
   18f68:	881b      	ldrh	r3, [r3, #0]
   18f6a:	2b00      	cmp	r3, #0
   18f6c:	d102      	bne.n	18f74 <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   18f6e:	4b15      	ldr	r3, [pc, #84]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18f70:	2203      	movs	r2, #3
   18f72:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   18f74:	687b      	ldr	r3, [r7, #4]
   18f76:	3301      	adds	r3, #1
   18f78:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   18f7a:	89fb      	ldrh	r3, [r7, #14]
   18f7c:	3301      	adds	r3, #1
   18f7e:	81fb      	strh	r3, [r7, #14]
      len--;
   18f80:	887b      	ldrh	r3, [r7, #2]
   18f82:	3b01      	subs	r3, #1
   18f84:	807b      	strh	r3, [r7, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   18f86:	4b0f      	ldr	r3, [pc, #60]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18f88:	781b      	ldrb	r3, [r3, #0]
   18f8a:	2b03      	cmp	r3, #3
   18f8c:	d111      	bne.n	18fb2 <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
   18f8e:	4b10      	ldr	r3, [pc, #64]	; (18fd0 <hciTrSerialRxIncoming+0x204>)
   18f90:	2200      	movs	r2, #0
   18f92:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   18f94:	4b11      	ldr	r3, [pc, #68]	; (18fdc <hciTrSerialRxIncoming+0x210>)
   18f96:	681b      	ldr	r3, [r3, #0]
   18f98:	2b00      	cmp	r3, #0
   18f9a:	d007      	beq.n	18fac <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   18f9c:	4b0a      	ldr	r3, [pc, #40]	; (18fc8 <hciTrSerialRxIncoming+0x1fc>)
   18f9e:	781a      	ldrb	r2, [r3, #0]
   18fa0:	4b0e      	ldr	r3, [pc, #56]	; (18fdc <hciTrSerialRxIncoming+0x210>)
   18fa2:	681b      	ldr	r3, [r3, #0]
   18fa4:	4619      	mov	r1, r3
   18fa6:	4610      	mov	r0, r2
   18fa8:	f7fe f828 	bl	16ffc <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   18fac:	4b05      	ldr	r3, [pc, #20]	; (18fc4 <hciTrSerialRxIncoming+0x1f8>)
   18fae:	2200      	movs	r2, #0
   18fb0:	701a      	strb	r2, [r3, #0]
  while (len)
   18fb2:	887b      	ldrh	r3, [r7, #2]
   18fb4:	2b00      	cmp	r3, #0
   18fb6:	f47f af12 	bne.w	18dde <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
   18fba:	89fb      	ldrh	r3, [r7, #14]
}
   18fbc:	4618      	mov	r0, r3
   18fbe:	3710      	adds	r7, #16
   18fc0:	46bd      	mov	sp, r7
   18fc2:	bd80      	pop	{r7, pc}
   18fc4:	100043e5 	.word	0x100043e5
   18fc8:	100043e6 	.word	0x100043e6
   18fcc:	100043e8 	.word	0x100043e8
   18fd0:	100043e4 	.word	0x100043e4
   18fd4:	100043ec 	.word	0x100043ec
   18fd8:	100043ef 	.word	0x100043ef
   18fdc:	100043f0 	.word	0x100043f0
   18fe0:	100043f4 	.word	0x100043f4

00018fe4 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   18fe4:	b580      	push	{r7, lr}
   18fe6:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   18fe8:	4b0b      	ldr	r3, [pc, #44]	; (19018 <hciCoreReadResolvingListSize+0x34>)
   18fea:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   18fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
   18ff2:	2b00      	cmp	r3, #0
   18ff4:	d008      	beq.n	19008 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   18ff6:	4b09      	ldr	r3, [pc, #36]	; (1901c <hciCoreReadResolvingListSize+0x38>)
   18ff8:	881b      	ldrh	r3, [r3, #0]
   18ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   18ffe:	2b00      	cmp	r3, #0
   19000:	d002      	beq.n	19008 <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   19002:	f7fd fa86 	bl	16512 <HciLeReadResolvingListSize>
   19006:	e005      	b.n	19014 <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   19008:	4b03      	ldr	r3, [pc, #12]	; (19018 <hciCoreReadResolvingListSize+0x34>)
   1900a:	2200      	movs	r2, #0
   1900c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   19010:	f000 f806 	bl	19020 <hciCoreReadMaxDataLen>
  }
}
   19014:	bf00      	nop
   19016:	bd80      	pop	{r7, pc}
   19018:	10005bd4 	.word	0x10005bd4
   1901c:	10002bb0 	.word	0x10002bb0

00019020 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   19020:	b580      	push	{r7, lr}
   19022:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   19024:	4b09      	ldr	r3, [pc, #36]	; (1904c <hciCoreReadMaxDataLen+0x2c>)
   19026:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   1902a:	f003 0320 	and.w	r3, r3, #32
   1902e:	2b00      	cmp	r3, #0
   19030:	d008      	beq.n	19044 <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   19032:	4b07      	ldr	r3, [pc, #28]	; (19050 <hciCoreReadMaxDataLen+0x30>)
   19034:	881b      	ldrh	r3, [r3, #0]
   19036:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1903a:	2b00      	cmp	r3, #0
   1903c:	d002      	beq.n	19044 <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   1903e:	f7fc fe75 	bl	15d2c <HciLeReadMaxDataLen>
   19042:	e001      	b.n	19048 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   19044:	f7fc fefc 	bl	15e40 <HciLeRandCmd>
  }
}
   19048:	bf00      	nop
   1904a:	bd80      	pop	{r7, pc}
   1904c:	10005bd4 	.word	0x10005bd4
   19050:	10002bb0 	.word	0x10002bb0

00019054 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   19054:	b580      	push	{r7, lr}
   19056:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   19058:	f7fd f94e 	bl	162f8 <HciResetCmd>
}
   1905c:	bf00      	nop
   1905e:	bd80      	pop	{r7, pc}

00019060 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   19060:	b580      	push	{r7, lr}
   19062:	b086      	sub	sp, #24
   19064:	af00      	add	r7, sp, #0
   19066:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   19068:	687b      	ldr	r3, [r7, #4]
   1906a:	781b      	ldrb	r3, [r3, #0]
   1906c:	2b0e      	cmp	r3, #14
   1906e:	f040 814b 	bne.w	19308 <hciCoreResetSequence+0x2a8>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   19072:	687b      	ldr	r3, [r7, #4]
   19074:	3302      	adds	r3, #2
   19076:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
   19078:	687b      	ldr	r3, [r7, #4]
   1907a:	3301      	adds	r3, #1
   1907c:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   1907e:	687b      	ldr	r3, [r7, #4]
   19080:	781b      	ldrb	r3, [r3, #0]
   19082:	b29a      	uxth	r2, r3
   19084:	687b      	ldr	r3, [r7, #4]
   19086:	3301      	adds	r3, #1
   19088:	781b      	ldrb	r3, [r3, #0]
   1908a:	b29b      	uxth	r3, r3
   1908c:	021b      	lsls	r3, r3, #8
   1908e:	b29b      	uxth	r3, r3
   19090:	4413      	add	r3, r2
   19092:	82fb      	strh	r3, [r7, #22]
   19094:	687b      	ldr	r3, [r7, #4]
   19096:	3302      	adds	r3, #2
   19098:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
   1909a:	687b      	ldr	r3, [r7, #4]
   1909c:	3301      	adds	r3, #1
   1909e:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
   190a0:	8afb      	ldrh	r3, [r7, #22]
   190a2:	f242 020f 	movw	r2, #8207	; 0x200f
   190a6:	4293      	cmp	r3, r2
   190a8:	f000 809e 	beq.w	191e8 <hciCoreResetSequence+0x188>
   190ac:	f242 020f 	movw	r2, #8207	; 0x200f
   190b0:	4293      	cmp	r3, r2
   190b2:	dc22      	bgt.n	190fa <hciCoreResetSequence+0x9a>
   190b4:	f241 0209 	movw	r2, #4105	; 0x1009
   190b8:	4293      	cmp	r3, r2
   190ba:	d05c      	beq.n	19176 <hciCoreResetSequence+0x116>
   190bc:	f241 0209 	movw	r2, #4105	; 0x1009
   190c0:	4293      	cmp	r3, r2
   190c2:	dc0c      	bgt.n	190de <hciCoreResetSequence+0x7e>
   190c4:	f640 4203 	movw	r2, #3075	; 0xc03
   190c8:	4293      	cmp	r3, r2
   190ca:	d042      	beq.n	19152 <hciCoreResetSequence+0xf2>
   190cc:	f640 4263 	movw	r2, #3171	; 0xc63
   190d0:	4293      	cmp	r3, r2
   190d2:	d04d      	beq.n	19170 <hciCoreResetSequence+0x110>
   190d4:	f640 4201 	movw	r2, #3073	; 0xc01
   190d8:	4293      	cmp	r3, r2
   190da:	d041      	beq.n	19160 <hciCoreResetSequence+0x100>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   190dc:	e114      	b.n	19308 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   190de:	f242 0202 	movw	r2, #8194	; 0x2002
   190e2:	4293      	cmp	r3, r2
   190e4:	d04e      	beq.n	19184 <hciCoreResetSequence+0x124>
   190e6:	f242 0203 	movw	r2, #8195	; 0x2003
   190ea:	4293      	cmp	r3, r2
   190ec:	f000 8086 	beq.w	191fc <hciCoreResetSequence+0x19c>
   190f0:	f242 0201 	movw	r2, #8193	; 0x2001
   190f4:	4293      	cmp	r3, r2
   190f6:	d037      	beq.n	19168 <hciCoreResetSequence+0x108>
        break;
   190f8:	e106      	b.n	19308 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   190fa:	f242 022a 	movw	r2, #8234	; 0x202a
   190fe:	4293      	cmp	r3, r2
   19100:	f000 8090 	beq.w	19224 <hciCoreResetSequence+0x1c4>
   19104:	f242 022a 	movw	r2, #8234	; 0x202a
   19108:	4293      	cmp	r3, r2
   1910a:	dc0e      	bgt.n	1912a <hciCoreResetSequence+0xca>
   1910c:	f242 021c 	movw	r2, #8220	; 0x201c
   19110:	4293      	cmp	r3, r2
   19112:	d060      	beq.n	191d6 <hciCoreResetSequence+0x176>
   19114:	f242 0224 	movw	r2, #8228	; 0x2024
   19118:	4293      	cmp	r3, r2
   1911a:	f000 80b0 	beq.w	1927e <hciCoreResetSequence+0x21e>
   1911e:	f242 0218 	movw	r2, #8216	; 0x2018
   19122:	4293      	cmp	r3, r2
   19124:	f000 80d4 	beq.w	192d0 <hciCoreResetSequence+0x270>
        break;
   19128:	e0ee      	b.n	19308 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   1912a:	f242 023b 	movw	r2, #8251	; 0x203b
   1912e:	4293      	cmp	r3, r2
   19130:	dc09      	bgt.n	19146 <hciCoreResetSequence+0xe6>
   19132:	f242 023a 	movw	r2, #8250	; 0x203a
   19136:	4293      	cmp	r3, r2
   19138:	f280 80bd 	bge.w	192b6 <hciCoreResetSequence+0x256>
   1913c:	f242 022f 	movw	r2, #8239	; 0x202f
   19140:	4293      	cmp	r3, r2
   19142:	d079      	beq.n	19238 <hciCoreResetSequence+0x1d8>
        break;
   19144:	e0e0      	b.n	19308 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   19146:	f242 024a 	movw	r2, #8266	; 0x204a
   1914a:	4293      	cmp	r3, r2
   1914c:	f000 80b3 	beq.w	192b6 <hciCoreResetSequence+0x256>
        break;
   19150:	e0da      	b.n	19308 <hciCoreResetSequence+0x2a8>
        randCnt = 0;
   19152:	4b6f      	ldr	r3, [pc, #444]	; (19310 <hciCoreResetSequence+0x2b0>)
   19154:	2200      	movs	r2, #0
   19156:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   19158:	486e      	ldr	r0, [pc, #440]	; (19314 <hciCoreResetSequence+0x2b4>)
   1915a:	f7fd f8ff 	bl	1635c <HciSetEventMaskCmd>
        break;
   1915e:	e0d3      	b.n	19308 <hciCoreResetSequence+0x2a8>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   19160:	486d      	ldr	r0, [pc, #436]	; (19318 <hciCoreResetSequence+0x2b8>)
   19162:	f7fc ffcd 	bl	16100 <HciLeSetEventMaskCmd>
        break;
   19166:	e0cf      	b.n	19308 <hciCoreResetSequence+0x2a8>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   19168:	486c      	ldr	r0, [pc, #432]	; (1931c <hciCoreResetSequence+0x2bc>)
   1916a:	f7fd f913 	bl	16394 <HciSetEventMaskPage2Cmd>
        break;
   1916e:	e0cb      	b.n	19308 <hciCoreResetSequence+0x2a8>
        HciReadBdAddrCmd();
   19170:	f7fd f875 	bl	1625e <HciReadBdAddrCmd>
        break;
   19174:	e0c8      	b.n	19308 <hciCoreResetSequence+0x2a8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   19176:	6879      	ldr	r1, [r7, #4]
   19178:	4869      	ldr	r0, [pc, #420]	; (19320 <hciCoreResetSequence+0x2c0>)
   1917a:	f7fb fa05 	bl	14588 <BdaCpy>
        HciLeReadBufSizeCmd();
   1917e:	f7fc fe72 	bl	15e66 <HciLeReadBufSizeCmd>
        break;
   19182:	e0c1      	b.n	19308 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   19184:	687b      	ldr	r3, [r7, #4]
   19186:	781b      	ldrb	r3, [r3, #0]
   19188:	b29a      	uxth	r2, r3
   1918a:	687b      	ldr	r3, [r7, #4]
   1918c:	3301      	adds	r3, #1
   1918e:	781b      	ldrb	r3, [r3, #0]
   19190:	b29b      	uxth	r3, r3
   19192:	021b      	lsls	r3, r3, #8
   19194:	b29b      	uxth	r3, r3
   19196:	4413      	add	r3, r2
   19198:	b29a      	uxth	r2, r3
   1919a:	4b62      	ldr	r3, [pc, #392]	; (19324 <hciCoreResetSequence+0x2c4>)
   1919c:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
   191a0:	687b      	ldr	r3, [r7, #4]
   191a2:	3302      	adds	r3, #2
   191a4:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   191a6:	687b      	ldr	r3, [r7, #4]
   191a8:	1c5a      	adds	r2, r3, #1
   191aa:	607a      	str	r2, [r7, #4]
   191ac:	781a      	ldrb	r2, [r3, #0]
   191ae:	4b5d      	ldr	r3, [pc, #372]	; (19324 <hciCoreResetSequence+0x2c4>)
   191b0:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.numBufs--;
   191b4:	4b5b      	ldr	r3, [pc, #364]	; (19324 <hciCoreResetSequence+0x2c4>)
   191b6:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   191ba:	3b01      	subs	r3, #1
   191bc:	b2da      	uxtb	r2, r3
   191be:	4b59      	ldr	r3, [pc, #356]	; (19324 <hciCoreResetSequence+0x2c4>)
   191c0:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   191c4:	4b57      	ldr	r3, [pc, #348]	; (19324 <hciCoreResetSequence+0x2c4>)
   191c6:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   191ca:	4b56      	ldr	r3, [pc, #344]	; (19324 <hciCoreResetSequence+0x2c4>)
   191cc:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
   191d0:	f7fc fe95 	bl	15efe <HciLeReadSupStatesCmd>
        break;
   191d4:	e098      	b.n	19308 <hciCoreResetSequence+0x2a8>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   191d6:	4b53      	ldr	r3, [pc, #332]	; (19324 <hciCoreResetSequence+0x2c4>)
   191d8:	687a      	ldr	r2, [r7, #4]
   191da:	33e0      	adds	r3, #224	; 0xe0
   191dc:	6810      	ldr	r0, [r2, #0]
   191de:	6851      	ldr	r1, [r2, #4]
   191e0:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   191e2:	f7fc fe9f 	bl	15f24 <HciLeReadWhiteListSizeCmd>
        break;
   191e6:	e08f      	b.n	19308 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   191e8:	687b      	ldr	r3, [r7, #4]
   191ea:	1c5a      	adds	r2, r3, #1
   191ec:	607a      	str	r2, [r7, #4]
   191ee:	781a      	ldrb	r2, [r3, #0]
   191f0:	4b4c      	ldr	r3, [pc, #304]	; (19324 <hciCoreResetSequence+0x2c4>)
   191f2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
   191f6:	f7fc fe49 	bl	15e8c <HciLeReadLocalSupFeatCmd>
        break;
   191fa:	e085      	b.n	19308 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   191fc:	687b      	ldr	r3, [r7, #4]
   191fe:	781b      	ldrb	r3, [r3, #0]
   19200:	b29a      	uxth	r2, r3
   19202:	687b      	ldr	r3, [r7, #4]
   19204:	3301      	adds	r3, #1
   19206:	781b      	ldrb	r3, [r3, #0]
   19208:	b29b      	uxth	r3, r3
   1920a:	021b      	lsls	r3, r3, #8
   1920c:	b29b      	uxth	r3, r3
   1920e:	4413      	add	r3, r2
   19210:	b29a      	uxth	r2, r3
   19212:	4b44      	ldr	r3, [pc, #272]	; (19324 <hciCoreResetSequence+0x2c4>)
   19214:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
   19218:	687b      	ldr	r3, [r7, #4]
   1921a:	3302      	adds	r3, #2
   1921c:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
   1921e:	f7ff fee1 	bl	18fe4 <hciCoreReadResolvingListSize>
        break;
   19222:	e071      	b.n	19308 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   19224:	687b      	ldr	r3, [r7, #4]
   19226:	1c5a      	adds	r2, r3, #1
   19228:	607a      	str	r2, [r7, #4]
   1922a:	781a      	ldrb	r2, [r3, #0]
   1922c:	4b3d      	ldr	r3, [pc, #244]	; (19324 <hciCoreResetSequence+0x2c4>)
   1922e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
   19232:	f7ff fef5 	bl	19020 <hciCoreReadMaxDataLen>
        break;
   19236:	e067      	b.n	19308 <hciCoreResetSequence+0x2a8>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   19238:	687b      	ldr	r3, [r7, #4]
   1923a:	781b      	ldrb	r3, [r3, #0]
   1923c:	b29a      	uxth	r2, r3
   1923e:	687b      	ldr	r3, [r7, #4]
   19240:	3301      	adds	r3, #1
   19242:	781b      	ldrb	r3, [r3, #0]
   19244:	b29b      	uxth	r3, r3
   19246:	021b      	lsls	r3, r3, #8
   19248:	b29b      	uxth	r3, r3
   1924a:	4413      	add	r3, r2
   1924c:	82bb      	strh	r3, [r7, #20]
   1924e:	687b      	ldr	r3, [r7, #4]
   19250:	3302      	adds	r3, #2
   19252:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   19254:	687b      	ldr	r3, [r7, #4]
   19256:	781b      	ldrb	r3, [r3, #0]
   19258:	b29a      	uxth	r2, r3
   1925a:	687b      	ldr	r3, [r7, #4]
   1925c:	3301      	adds	r3, #1
   1925e:	781b      	ldrb	r3, [r3, #0]
   19260:	b29b      	uxth	r3, r3
   19262:	021b      	lsls	r3, r3, #8
   19264:	b29b      	uxth	r3, r3
   19266:	4413      	add	r3, r2
   19268:	827b      	strh	r3, [r7, #18]
   1926a:	687b      	ldr	r3, [r7, #4]
   1926c:	3302      	adds	r3, #2
   1926e:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   19270:	8a7a      	ldrh	r2, [r7, #18]
   19272:	8abb      	ldrh	r3, [r7, #20]
   19274:	4611      	mov	r1, r2
   19276:	4618      	mov	r0, r3
   19278:	f7fc fcea 	bl	15c50 <HciLeWriteDefDataLen>
        break;
   1927c:	e044      	b.n	19308 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   1927e:	4b29      	ldr	r3, [pc, #164]	; (19324 <hciCoreResetSequence+0x2c4>)
   19280:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   19284:	2b00      	cmp	r3, #0
   19286:	d007      	beq.n	19298 <hciCoreResetSequence+0x238>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   19288:	4b26      	ldr	r3, [pc, #152]	; (19324 <hciCoreResetSequence+0x2c4>)
   1928a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1928e:	8afa      	ldrh	r2, [r7, #22]
   19290:	4611      	mov	r1, r2
   19292:	6878      	ldr	r0, [r7, #4]
   19294:	4798      	blx	r3
        break;
   19296:	e037      	b.n	19308 <hciCoreResetSequence+0x2a8>
          hciCoreCb.maxAdvDataLen = 0;
   19298:	4b22      	ldr	r3, [pc, #136]	; (19324 <hciCoreResetSequence+0x2c4>)
   1929a:	2200      	movs	r2, #0
   1929c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
   192a0:	4b20      	ldr	r3, [pc, #128]	; (19324 <hciCoreResetSequence+0x2c4>)
   192a2:	2200      	movs	r2, #0
   192a4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
   192a8:	4b1e      	ldr	r3, [pc, #120]	; (19324 <hciCoreResetSequence+0x2c4>)
   192aa:	2200      	movs	r2, #0
   192ac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
   192b0:	f7fc fdc6 	bl	15e40 <HciLeRandCmd>
        break;
   192b4:	e028      	b.n	19308 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   192b6:	4b1b      	ldr	r3, [pc, #108]	; (19324 <hciCoreResetSequence+0x2c4>)
   192b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   192bc:	2b00      	cmp	r3, #0
   192be:	d022      	beq.n	19306 <hciCoreResetSequence+0x2a6>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   192c0:	4b18      	ldr	r3, [pc, #96]	; (19324 <hciCoreResetSequence+0x2c4>)
   192c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   192c6:	8afa      	ldrh	r2, [r7, #22]
   192c8:	4611      	mov	r1, r2
   192ca:	6878      	ldr	r0, [r7, #4]
   192cc:	4798      	blx	r3
        break;
   192ce:	e01a      	b.n	19306 <hciCoreResetSequence+0x2a6>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   192d0:	4b0f      	ldr	r3, [pc, #60]	; (19310 <hciCoreResetSequence+0x2b0>)
   192d2:	781b      	ldrb	r3, [r3, #0]
   192d4:	2b02      	cmp	r3, #2
   192d6:	d808      	bhi.n	192ea <hciCoreResetSequence+0x28a>
          randCnt++;
   192d8:	4b0d      	ldr	r3, [pc, #52]	; (19310 <hciCoreResetSequence+0x2b0>)
   192da:	781b      	ldrb	r3, [r3, #0]
   192dc:	3301      	adds	r3, #1
   192de:	b2da      	uxtb	r2, r3
   192e0:	4b0b      	ldr	r3, [pc, #44]	; (19310 <hciCoreResetSequence+0x2b0>)
   192e2:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   192e4:	f7fc fdac 	bl	15e40 <HciLeRandCmd>
        break;
   192e8:	e00e      	b.n	19308 <hciCoreResetSequence+0x2a8>
          hciCb.resetting = FALSE;
   192ea:	4b0f      	ldr	r3, [pc, #60]	; (19328 <hciCoreResetSequence+0x2c8>)
   192ec:	2200      	movs	r2, #0
   192ee:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   192f0:	2300      	movs	r3, #0
   192f2:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   192f4:	2300      	movs	r3, #0
   192f6:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   192f8:	4b0b      	ldr	r3, [pc, #44]	; (19328 <hciCoreResetSequence+0x2c8>)
   192fa:	689b      	ldr	r3, [r3, #8]
   192fc:	f107 020c 	add.w	r2, r7, #12
   19300:	4610      	mov	r0, r2
   19302:	4798      	blx	r3
        break;
   19304:	e000      	b.n	19308 <hciCoreResetSequence+0x2a8>
        break;
   19306:	bf00      	nop
    }
  }
}
   19308:	bf00      	nop
   1930a:	3718      	adds	r7, #24
   1930c:	46bd      	mov	sp, r7
   1930e:	bd80      	pop	{r7, pc}
   19310:	100043f8 	.word	0x100043f8
   19314:	00022a4c 	.word	0x00022a4c
   19318:	00022a54 	.word	0x00022a54
   1931c:	00022a5c 	.word	0x00022a5c
   19320:	10005cbc 	.word	0x10005cbc
   19324:	10005bd4 	.word	0x10005bd4
   19328:	100051fc 	.word	0x100051fc

0001932c <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   1932c:	b480      	push	{r7}
   1932e:	b083      	sub	sp, #12
   19330:	af00      	add	r7, sp, #0
   19332:	4603      	mov	r3, r0
   19334:	6039      	str	r1, [r7, #0]
   19336:	80fb      	strh	r3, [r7, #6]
   19338:	4613      	mov	r3, r2
   1933a:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   1933c:	2312      	movs	r3, #18
}
   1933e:	4618      	mov	r0, r3
   19340:	370c      	adds	r7, #12
   19342:	46bd      	mov	sp, r7
   19344:	f85d 7b04 	ldr.w	r7, [sp], #4
   19348:	4770      	bx	lr

0001934a <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   1934a:	b480      	push	{r7}
   1934c:	b083      	sub	sp, #12
   1934e:	af00      	add	r7, sp, #0
   19350:	4603      	mov	r3, r0
   19352:	71fb      	strb	r3, [r7, #7]

}
   19354:	bf00      	nop
   19356:	370c      	adds	r7, #12
   19358:	46bd      	mov	sp, r7
   1935a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1935e:	4770      	bx	lr

00019360 <__NVIC_EnableIRQ>:
{
   19360:	b480      	push	{r7}
   19362:	b083      	sub	sp, #12
   19364:	af00      	add	r7, sp, #0
   19366:	4603      	mov	r3, r0
   19368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1936a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1936e:	2b00      	cmp	r3, #0
   19370:	db0b      	blt.n	1938a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19372:	4909      	ldr	r1, [pc, #36]	; (19398 <__NVIC_EnableIRQ+0x38>)
   19374:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19378:	095b      	lsrs	r3, r3, #5
   1937a:	79fa      	ldrb	r2, [r7, #7]
   1937c:	f002 021f 	and.w	r2, r2, #31
   19380:	2001      	movs	r0, #1
   19382:	fa00 f202 	lsl.w	r2, r0, r2
   19386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1938a:	bf00      	nop
   1938c:	370c      	adds	r7, #12
   1938e:	46bd      	mov	sp, r7
   19390:	f85d 7b04 	ldr.w	r7, [sp], #4
   19394:	4770      	bx	lr
   19396:	bf00      	nop
   19398:	e000e100 	.word	0xe000e100

0001939c <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
   1939c:	b580      	push	{r7, lr}
   1939e:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
   193a0:	f008 f902 	bl	215a8 <am_bsp_itm_printf_enable>
}
   193a4:	bf00      	nop
   193a6:	bd80      	pop	{r7, pc}

000193a8 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   193a8:	b580      	push	{r7, lr}
   193aa:	b082      	sub	sp, #8
   193ac:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;

    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
   193ae:	f000 f89d 	bl	194ec <scheduler_timer_init>
    WsfTimerInit();
   193b2:	f7fc f8ef 	bl	15594 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    WsfBufInit(sizeof(g_pui32BufMem), (uint8_t*)g_pui32BufMem, WSF_BUF_POOLS, g_psPoolDescriptors);
   193b6:	4b41      	ldr	r3, [pc, #260]	; (194bc <exactle_stack_init+0x114>)
   193b8:	2204      	movs	r2, #4
   193ba:	4941      	ldr	r1, [pc, #260]	; (194c0 <exactle_stack_init+0x118>)
   193bc:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   193c0:	f7fb fe06 	bl	14fd0 <WsfBufInit>

    //
    // Initialize security.
    //
    SecInit();
   193c4:	f7fb f8a6 	bl	14514 <SecInit>
    SecAesInit();
   193c8:	f7fa fd40 	bl	13e4c <SecAesInit>
    SecCmacInit();
   193cc:	f7fa ff12 	bl	141f4 <SecCmacInit>
    SecEccInit();
   193d0:	f7fb f81e 	bl	14410 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   193d4:	483b      	ldr	r0, [pc, #236]	; (194c4 <exactle_stack_init+0x11c>)
   193d6:	f000 fadf 	bl	19998 <WsfOsSetNextHandler>
   193da:	4603      	mov	r3, r0
   193dc:	71fb      	strb	r3, [r7, #7]
    HciHandlerInit(handlerId);
   193de:	79fb      	ldrb	r3, [r7, #7]
   193e0:	4618      	mov	r0, r3
   193e2:	f7fa fc93 	bl	13d0c <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   193e6:	4838      	ldr	r0, [pc, #224]	; (194c8 <exactle_stack_init+0x120>)
   193e8:	f000 fad6 	bl	19998 <WsfOsSetNextHandler>
   193ec:	4603      	mov	r3, r0
   193ee:	71fb      	strb	r3, [r7, #7]
    DmDevVsInit(0);
   193f0:	2000      	movs	r0, #0
   193f2:	f7f6 fe24 	bl	1003e <DmDevVsInit>
    DmAdvInit();
   193f6:	f7f5 ff9b 	bl	f330 <DmAdvInit>
    DmConnInit();
   193fa:	f7f6 fb1b 	bl	fa34 <DmConnInit>
    DmConnSlaveInit();
   193fe:	f7f6 fd79 	bl	fef4 <DmConnSlaveInit>
    DmSecInit();
   19402:	f7f7 f9d6 	bl	107b2 <DmSecInit>
    DmSecLescInit();
   19406:	f7f7 fb13 	bl	10a30 <DmSecLescInit>
    DmPrivInit();
   1940a:	f7f6 ffa3 	bl	10354 <DmPrivInit>
    DmHandlerInit(handlerId);
   1940e:	79fb      	ldrb	r3, [r7, #7]
   19410:	4618      	mov	r0, r3
   19412:	f7f6 fe5e 	bl	100d2 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   19416:	482d      	ldr	r0, [pc, #180]	; (194cc <exactle_stack_init+0x124>)
   19418:	f000 fabe 	bl	19998 <WsfOsSetNextHandler>
   1941c:	4603      	mov	r3, r0
   1941e:	71fb      	strb	r3, [r7, #7]
    L2cSlaveHandlerInit(handlerId);
   19420:	79fb      	ldrb	r3, [r7, #7]
   19422:	4618      	mov	r0, r3
   19424:	f7f7 fca6 	bl	10d74 <L2cSlaveHandlerInit>
    L2cInit();
   19428:	f7f7 fbd3 	bl	10bd2 <L2cInit>
    L2cSlaveInit();
   1942c:	f7f7 fc58 	bl	10ce0 <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   19430:	4827      	ldr	r0, [pc, #156]	; (194d0 <exactle_stack_init+0x128>)
   19432:	f000 fab1 	bl	19998 <WsfOsSetNextHandler>
   19436:	4603      	mov	r3, r0
   19438:	71fb      	strb	r3, [r7, #7]
    AttHandlerInit(handlerId);
   1943a:	79fb      	ldrb	r3, [r7, #7]
   1943c:	4618      	mov	r0, r3
   1943e:	f7f3 f8e6 	bl	c60e <AttHandlerInit>
    AttsInit();
   19442:	f7f4 fbe9 	bl	dc18 <AttsInit>
    AttsIndInit();
   19446:	f7f4 fae9 	bl	da1c <AttsIndInit>
    AttcInit();
   1944a:	f7f3 fd09 	bl	ce60 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   1944e:	4821      	ldr	r0, [pc, #132]	; (194d4 <exactle_stack_init+0x12c>)
   19450:	f000 faa2 	bl	19998 <WsfOsSetNextHandler>
   19454:	4603      	mov	r3, r0
   19456:	71fb      	strb	r3, [r7, #7]
    SmpHandlerInit(handlerId);
   19458:	79fb      	ldrb	r3, [r7, #7]
   1945a:	4618      	mov	r0, r3
   1945c:	f7f7 ff12 	bl	11284 <SmpHandlerInit>
    SmprInit();
   19460:	f7f8 fd68 	bl	11f34 <SmprInit>
    SmprScInit();
   19464:	f7f8 fd50 	bl	11f08 <SmprScInit>
    HciSetMaxRxAclLen(251);
   19468:	20fb      	movs	r0, #251	; 0xfb
   1946a:	f7fd fcd9 	bl	16e20 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   1946e:	481a      	ldr	r0, [pc, #104]	; (194d8 <exactle_stack_init+0x130>)
   19470:	f000 fa92 	bl	19998 <WsfOsSetNextHandler>
   19474:	4603      	mov	r3, r0
   19476:	71fb      	strb	r3, [r7, #7]
    AppHandlerInit(handlerId);
   19478:	79fb      	ldrb	r3, [r7, #7]
   1947a:	4618      	mov	r0, r3
   1947c:	f002 fdb8 	bl	1bff0 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(TagHandler);
   19480:	4816      	ldr	r0, [pc, #88]	; (194dc <exactle_stack_init+0x134>)
   19482:	f000 fa89 	bl	19998 <WsfOsSetNextHandler>
   19486:	4603      	mov	r3, r0
   19488:	71fb      	strb	r3, [r7, #7]
    TagHandlerInit(handlerId);
   1948a:	79fb      	ldrb	r3, [r7, #7]
   1948c:	4618      	mov	r0, r3
   1948e:	f001 f84b 	bl	1a528 <TagHandlerInit>

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   19492:	4813      	ldr	r0, [pc, #76]	; (194e0 <exactle_stack_init+0x138>)
   19494:	f000 fa80 	bl	19998 <WsfOsSetNextHandler>
   19498:	4603      	mov	r3, r0
   1949a:	461a      	mov	r2, r3
   1949c:	4b11      	ldr	r3, [pc, #68]	; (194e4 <exactle_stack_init+0x13c>)
   1949e:	701a      	strb	r2, [r3, #0]

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   194a0:	4811      	ldr	r0, [pc, #68]	; (194e8 <exactle_stack_init+0x140>)
   194a2:	f000 fa79 	bl	19998 <WsfOsSetNextHandler>
   194a6:	4603      	mov	r3, r0
   194a8:	71fb      	strb	r3, [r7, #7]
    HciDrvHandlerInit(handlerId);
   194aa:	79fb      	ldrb	r3, [r7, #7]
   194ac:	4618      	mov	r0, r3
   194ae:	f7fb fbf7 	bl	14ca0 <HciDrvHandlerInit>
}
   194b2:	bf00      	nop
   194b4:	3708      	adds	r7, #8
   194b6:	46bd      	mov	sp, r7
   194b8:	bd80      	pop	{r7, pc}
   194ba:	bf00      	nop
   194bc:	10002bb4 	.word	0x10002bb4
   194c0:	100043fc 	.word	0x100043fc
   194c4:	00013d39 	.word	0x00013d39
   194c8:	000100ed 	.word	0x000100ed
   194cc:	00010d85 	.word	0x00010d85
   194d0:	0000c64d 	.word	0x0000c64d
   194d4:	000112cd 	.word	0x000112cd
   194d8:	0001c011 	.word	0x0001c011
   194dc:	0001a5dd 	.word	0x0001a5dd
   194e0:	0001961d 	.word	0x0001961d
   194e4:	10005ce8 	.word	0x10005ce8
   194e8:	00014d2d 	.word	0x00014d2d

000194ec <scheduler_timer_init>:
// Set up a pair of timers to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
   194ec:	b580      	push	{r7, lr}
   194ee:	af00      	add	r7, sp, #0
    //
    // One of the timers will run in one-shot mode and provide interrupts for
    // scheduled events.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
   194f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   194f4:	2000      	movs	r0, #0
   194f6:	f006 fa79 	bl	1f9ec <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
   194fa:	f44f 7205 	mov.w	r2, #532	; 0x214
   194fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19502:	2000      	movs	r0, #0
   19504:	f006 f9f2 	bl	1f8ec <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_FN_ONCE));

    //
    // The other timer will run continuously and provide a constant time-base.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERB);
   19508:	490c      	ldr	r1, [pc, #48]	; (1953c <scheduler_timer_init+0x50>)
   1950a:	2000      	movs	r0, #0
   1950c:	f006 fa6e 	bl	1f9ec <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERB,
   19510:	f44f 72ca 	mov.w	r2, #404	; 0x194
   19514:	4909      	ldr	r1, [pc, #36]	; (1953c <scheduler_timer_init+0x50>)
   19516:	2000      	movs	r0, #0
   19518:	f006 f9e8 	bl	1f8ec <am_hal_ctimer_config_single>
                                 AM_HAL_CTIMER_FN_CONTINUOUS));

    //
    // Start the continuous timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERB);
   1951c:	4907      	ldr	r1, [pc, #28]	; (1953c <scheduler_timer_init+0x50>)
   1951e:	2000      	movs	r0, #0
   19520:	f006 fa24 	bl	1f96c <am_hal_ctimer_start>

    //
    // Enable the timer interrupt.
    //
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA0, radio_timer_handler);
   19524:	4906      	ldr	r1, [pc, #24]	; (19540 <scheduler_timer_init+0x54>)
   19526:	2001      	movs	r0, #1
   19528:	f006 f926 	bl	1f778 <am_hal_ctimer_int_register>
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
   1952c:	2001      	movs	r0, #1
   1952e:	f006 fb0d 	bl	1fb4c <am_hal_ctimer_int_enable>
    NVIC_EnableIRQ(CTIMER_IRQn);
   19532:	200e      	movs	r0, #14
   19534:	f7ff ff14 	bl	19360 <__NVIC_EnableIRQ>
}
   19538:	bf00      	nop
   1953a:	bd80      	pop	{r7, pc}
   1953c:	ffff0000 	.word	0xffff0000
   19540:	0001960b 	.word	0x0001960b

00019544 <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
   19544:	b580      	push	{r7, lr}
   19546:	b082      	sub	sp, #8
   19548:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = am_hal_ctimer_read(0, AM_HAL_CTIMER_TIMERB);
   1954a:	4914      	ldr	r1, [pc, #80]	; (1959c <update_scheduler_timers+0x58>)
   1954c:	2000      	movs	r0, #0
   1954e:	f006 fa61 	bl	1fa14 <am_hal_ctimer_read>
   19552:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = (ui32CurrentTime >= g_ui32LastTime ?
   19554:	4b12      	ldr	r3, [pc, #72]	; (195a0 <update_scheduler_timers+0x5c>)
   19556:	681b      	ldr	r3, [r3, #0]
                       (ui32CurrentTime - g_ui32LastTime) :
   19558:	687a      	ldr	r2, [r7, #4]
   1955a:	429a      	cmp	r2, r3
   1955c:	d304      	bcc.n	19568 <update_scheduler_timers+0x24>
   1955e:	4b10      	ldr	r3, [pc, #64]	; (195a0 <update_scheduler_timers+0x5c>)
   19560:	681b      	ldr	r3, [r3, #0]
   19562:	687a      	ldr	r2, [r7, #4]
   19564:	1ad3      	subs	r3, r2, r3
   19566:	e005      	b.n	19574 <update_scheduler_timers+0x30>
                       (0x10000 + ui32CurrentTime - g_ui32LastTime));
   19568:	4b0d      	ldr	r3, [pc, #52]	; (195a0 <update_scheduler_timers+0x5c>)
   1956a:	681b      	ldr	r3, [r3, #0]
   1956c:	687a      	ldr	r2, [r7, #4]
   1956e:	1ad3      	subs	r3, r2, r3
                       (ui32CurrentTime - g_ui32LastTime) :
   19570:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ui32ElapsedTime = (ui32CurrentTime >= g_ui32LastTime ?
   19574:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   19576:	683b      	ldr	r3, [r7, #0]
   19578:	2b04      	cmp	r3, #4
   1957a:	d90a      	bls.n	19592 <update_scheduler_timers+0x4e>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   1957c:	683b      	ldr	r3, [r7, #0]
   1957e:	4a09      	ldr	r2, [pc, #36]	; (195a4 <update_scheduler_timers+0x60>)
   19580:	fba2 2303 	umull	r2, r3, r2, r3
   19584:	089b      	lsrs	r3, r3, #2
   19586:	4618      	mov	r0, r3
   19588:	f7fc f84a 	bl	15620 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   1958c:	4a04      	ldr	r2, [pc, #16]	; (195a0 <update_scheduler_timers+0x5c>)
   1958e:	687b      	ldr	r3, [r7, #4]
   19590:	6013      	str	r3, [r2, #0]
    }
}
   19592:	bf00      	nop
   19594:	3708      	adds	r7, #8
   19596:	46bd      	mov	sp, r7
   19598:	bd80      	pop	{r7, pc}
   1959a:	bf00      	nop
   1959c:	ffff0000 	.word	0xffff0000
   195a0:	10004f80 	.word	0x10004f80
   195a4:	cccccccd 	.word	0xcccccccd

000195a8 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
   195a8:	b580      	push	{r7, lr}
   195aa:	b082      	sub	sp, #8
   195ac:	af00      	add	r7, sp, #0
    wsfTimerTicks_t xNextExpiration;

    //
    // Stop and clear the scheduling timer.
    //
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
   195ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   195b2:	2000      	movs	r0, #0
   195b4:	f006 fa04 	bl	1f9c0 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
   195b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   195bc:	2000      	movs	r0, #0
   195be:	f006 fa15 	bl	1f9ec <am_hal_ctimer_clear>

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   195c2:	1cfb      	adds	r3, r7, #3
   195c4:	4618      	mov	r0, r3
   195c6:	f7fc f859 	bl	1567c <WsfTimerNextExpiration>
   195ca:	6078      	str	r0, [r7, #4]
    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it. Otherwise, set an interrupt to wake us up in time to
    // prevent a double-overflow of our continuous timer.
    //
    if ( xNextExpiration )
   195cc:	687b      	ldr	r3, [r7, #4]
   195ce:	2b00      	cmp	r3, #0
   195d0:	d00a      	beq.n	195e8 <set_next_wakeup+0x40>
    {
        am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA,
   195d2:	687a      	ldr	r2, [r7, #4]
   195d4:	4613      	mov	r3, r2
   195d6:	009b      	lsls	r3, r3, #2
   195d8:	441a      	add	r2, r3
   195da:	2300      	movs	r3, #0
   195dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   195e0:	2000      	movs	r0, #0
   195e2:	f006 fa5d 	bl	1faa0 <am_hal_ctimer_period_set>
   195e6:	e007      	b.n	195f8 <set_next_wakeup+0x50>
                                 xNextExpiration * CLK_TICKS_PER_WSF_TICKS, 0);
    }
    else
    {
        am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, 0x8000, 0);
   195e8:	2300      	movs	r3, #0
   195ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   195ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   195f2:	2000      	movs	r0, #0
   195f4:	f006 fa54 	bl	1faa0 <am_hal_ctimer_period_set>
    }

    //
    // Start the scheduling timer.
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
   195f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   195fc:	2000      	movs	r0, #0
   195fe:	f006 f9b5 	bl	1f96c <am_hal_ctimer_start>
}
   19602:	bf00      	nop
   19604:	3708      	adds	r7, #8
   19606:	46bd      	mov	sp, r7
   19608:	bd80      	pop	{r7, pc}

0001960a <radio_timer_handler>:
// Interrupt handler for the CTIMERs
//
//*****************************************************************************
void
radio_timer_handler(void)
{
   1960a:	b580      	push	{r7, lr}
   1960c:	af00      	add	r7, sp, #0
    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1960e:	2100      	movs	r1, #0
   19610:	2000      	movs	r0, #0
   19612:	f000 f995 	bl	19940 <WsfTaskSetReady>
}
   19616:	bf00      	nop
   19618:	bd80      	pop	{r7, pc}
	...

0001961c <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1961c:	b580      	push	{r7, lr}
   1961e:	b084      	sub	sp, #16
   19620:	af00      	add	r7, sp, #0
   19622:	4603      	mov	r3, r0
   19624:	6039      	str	r1, [r7, #0]
   19626:	71fb      	strb	r3, [r7, #7]
    if ( pMsg->event == BUTTON_TIMER_EVENT )
   19628:	683b      	ldr	r3, [r7, #0]
   1962a:	789b      	ldrb	r3, [r3, #2]
   1962c:	2ba0      	cmp	r3, #160	; 0xa0
   1962e:	d139      	bne.n	196a4 <button_handler+0x88>
    {
        //
        // Restart the button timer.
        //
        WsfTimerStartMs(&ButtonTimer, 10);
   19630:	210a      	movs	r1, #10
   19632:	483a      	ldr	r0, [pc, #232]	; (1971c <button_handler+0x100>)
   19634:	f7fb ffd0 	bl	155d8 <WsfTimerStartMs>

        //
        // Every time we get a button timer tick, check all of our buttons.
        //
        am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   19638:	2103      	movs	r1, #3
   1963a:	4839      	ldr	r0, [pc, #228]	; (19720 <button_handler+0x104>)
   1963c:	f004 fa4e 	bl	1dadc <am_devices_button_array_tick>

        //
        // If we got a a press, do something with it.
        //
        if ( am_devices_button_released(am_bsp_psButtons[0]) )
   19640:	4b37      	ldr	r3, [pc, #220]	; (19720 <button_handler+0x104>)
   19642:	7b1b      	ldrb	r3, [r3, #12]
   19644:	f083 0301 	eor.w	r3, r3, #1
   19648:	b2db      	uxtb	r3, r3
   1964a:	2b00      	cmp	r3, #0
   1964c:	d009      	beq.n	19662 <button_handler+0x46>
   1964e:	4b34      	ldr	r3, [pc, #208]	; (19720 <button_handler+0x104>)
   19650:	7b5b      	ldrb	r3, [r3, #13]
   19652:	2b00      	cmp	r3, #0
   19654:	d005      	beq.n	19662 <button_handler+0x46>
        {
            am_util_debug_printf("Got Button 0 Press\n");
   19656:	4833      	ldr	r0, [pc, #204]	; (19724 <button_handler+0x108>)
   19658:	f001 ff72 	bl	1b540 <am_util_stdio_printf>
            AppUiBtnTest(APP_UI_BTN_1_SHORT);
   1965c:	2002      	movs	r0, #2
   1965e:	f7fa fadb 	bl	13c18 <AppUiBtnTest>
        }

        if ( am_devices_button_released(am_bsp_psButtons[1]) )
   19662:	4b2f      	ldr	r3, [pc, #188]	; (19720 <button_handler+0x104>)
   19664:	7f1b      	ldrb	r3, [r3, #28]
   19666:	f083 0301 	eor.w	r3, r3, #1
   1966a:	b2db      	uxtb	r3, r3
   1966c:	2b00      	cmp	r3, #0
   1966e:	d009      	beq.n	19684 <button_handler+0x68>
   19670:	4b2b      	ldr	r3, [pc, #172]	; (19720 <button_handler+0x104>)
   19672:	7f5b      	ldrb	r3, [r3, #29]
   19674:	2b00      	cmp	r3, #0
   19676:	d005      	beq.n	19684 <button_handler+0x68>
        {
            am_util_debug_printf("Got Button 1 Press\n");
   19678:	482b      	ldr	r0, [pc, #172]	; (19728 <button_handler+0x10c>)
   1967a:	f001 ff61 	bl	1b540 <am_util_stdio_printf>
            AppUiBtnTest(APP_UI_BTN_1_SHORT);
   1967e:	2002      	movs	r0, #2
   19680:	f7fa faca 	bl	13c18 <AppUiBtnTest>
        }

        if ( am_devices_button_released(am_bsp_psButtons[2]) )
   19684:	4b26      	ldr	r3, [pc, #152]	; (19720 <button_handler+0x104>)
   19686:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1968a:	f083 0301 	eor.w	r3, r3, #1
   1968e:	b2db      	uxtb	r3, r3
   19690:	2b00      	cmp	r3, #0
   19692:	d007      	beq.n	196a4 <button_handler+0x88>
   19694:	4b22      	ldr	r3, [pc, #136]	; (19720 <button_handler+0x104>)
   19696:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1969a:	2b00      	cmp	r3, #0
   1969c:	d002      	beq.n	196a4 <button_handler+0x88>
        {
            am_util_debug_printf("Got Button 2 Press\n");
   1969e:	4823      	ldr	r0, [pc, #140]	; (1972c <button_handler+0x110>)
   196a0:	f001 ff4e 	bl	1b540 <am_util_stdio_printf>
        }

    }

    if (pMsg->event == POWERCYCLE_TIMER_EVENT)
   196a4:	683b      	ldr	r3, [r7, #0]
   196a6:	789b      	ldrb	r3, [r3, #2]
   196a8:	2ba1      	cmp	r3, #161	; 0xa1
   196aa:	d133      	bne.n	19714 <button_handler+0xf8>
    {
        // restart timer
        if ( ble_on == true )
   196ac:	4b20      	ldr	r3, [pc, #128]	; (19730 <button_handler+0x114>)
   196ae:	781b      	ldrb	r3, [r3, #0]
   196b0:	2b00      	cmp	r3, #0
   196b2:	d020      	beq.n	196f6 <button_handler+0xda>
        {
            dmConnId_t  connId;

            WsfTimerStartSec(&PowerCycleTimer, 1);
   196b4:	2101      	movs	r1, #1
   196b6:	481f      	ldr	r0, [pc, #124]	; (19734 <button_handler+0x118>)
   196b8:	f7fb ff7c 	bl	155b4 <WsfTimerStartSec>

            if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   196bc:	f002 fd38 	bl	1c130 <AppConnIsOpen>
   196c0:	4603      	mov	r3, r0
   196c2:	73fb      	strb	r3, [r7, #15]
   196c4:	7bfb      	ldrb	r3, [r7, #15]
   196c6:	2b00      	cmp	r3, #0
   196c8:	d004      	beq.n	196d4 <button_handler+0xb8>
            {
                AppConnClose(connId);
   196ca:	7bfb      	ldrb	r3, [r7, #15]
   196cc:	4618      	mov	r0, r3
   196ce:	f002 fd1f 	bl	1c110 <AppConnClose>
                return;
   196d2:	e01f      	b.n	19714 <button_handler+0xf8>
            }

            if ( AppSlaveIsAdvertising() == true )
   196d4:	f004 f81c 	bl	1d710 <AppSlaveIsAdvertising>
   196d8:	4603      	mov	r3, r0
   196da:	2b01      	cmp	r3, #1
   196dc:	d102      	bne.n	196e4 <button_handler+0xc8>
            {
                AppAdvStop();
   196de:	f004 f947 	bl	1d970 <AppAdvStop>
                return;
   196e2:	e017      	b.n	19714 <button_handler+0xf8>
            }
            am_util_debug_printf("Power off Apollo3 BLE controller\n");
   196e4:	4814      	ldr	r0, [pc, #80]	; (19738 <button_handler+0x11c>)
   196e6:	f001 ff2b 	bl	1b540 <am_util_stdio_printf>
            HciDrvRadioShutdown();
   196ea:	f7fb fa07 	bl	14afc <HciDrvRadioShutdown>
            ble_on = false;
   196ee:	4b10      	ldr	r3, [pc, #64]	; (19730 <button_handler+0x114>)
   196f0:	2200      	movs	r2, #0
   196f2:	701a      	strb	r2, [r3, #0]
   196f4:	e00e      	b.n	19714 <button_handler+0xf8>
        }
        else
        {
            am_util_debug_printf("Power on Apollo3 BLE controller\n");
   196f6:	4811      	ldr	r0, [pc, #68]	; (1973c <button_handler+0x120>)
   196f8:	f001 ff22 	bl	1b540 <am_util_stdio_printf>
            HciDrvRadioBoot(1);
   196fc:	2001      	movs	r0, #1
   196fe:	f7fb f903 	bl	14908 <HciDrvRadioBoot>
            DmDevReset();
   19702:	f7f6 fc55 	bl	ffb0 <DmDevReset>
            ble_on = true;
   19706:	4b0a      	ldr	r3, [pc, #40]	; (19730 <button_handler+0x114>)
   19708:	2201      	movs	r2, #1
   1970a:	701a      	strb	r2, [r3, #0]
            WsfTimerStartSec(&PowerCycleTimer, 10);
   1970c:	210a      	movs	r1, #10
   1970e:	4809      	ldr	r0, [pc, #36]	; (19734 <button_handler+0x118>)
   19710:	f7fb ff50 	bl	155b4 <WsfTimerStartSec>
        }
    }
}
   19714:	3710      	adds	r7, #16
   19716:	46bd      	mov	sp, r7
   19718:	bd80      	pop	{r7, pc}
   1971a:	bf00      	nop
   1971c:	10005cec 	.word	0x10005cec
   19720:	10003720 	.word	0x10003720
   19724:	00021b0c 	.word	0x00021b0c
   19728:	00021b20 	.word	0x00021b20
   1972c:	00021b34 	.word	0x00021b34
   19730:	10004f7c 	.word	0x10004f7c
   19734:	10005cfc 	.word	0x10005cfc
   19738:	00021b48 	.word	0x00021b48
   1973c:	00021b6c 	.word	0x00021b6c

00019740 <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
   19740:	b580      	push	{r7, lr}
   19742:	af00      	add	r7, sp, #0
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   19744:	2103      	movs	r1, #3
   19746:	480d      	ldr	r0, [pc, #52]	; (1977c <setup_buttons+0x3c>)
   19748:	f004 f964 	bl	1da14 <am_devices_button_array_init>

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
   1974c:	4b0c      	ldr	r3, [pc, #48]	; (19780 <setup_buttons+0x40>)
   1974e:	781a      	ldrb	r2, [r3, #0]
   19750:	4b0c      	ldr	r3, [pc, #48]	; (19784 <setup_buttons+0x44>)
   19752:	721a      	strb	r2, [r3, #8]
    ButtonTimer.msg.event = BUTTON_TIMER_EVENT;
   19754:	4b0b      	ldr	r3, [pc, #44]	; (19784 <setup_buttons+0x44>)
   19756:	22a0      	movs	r2, #160	; 0xa0
   19758:	731a      	strb	r2, [r3, #12]

    WsfTimerStartSec(&ButtonTimer, 2);
   1975a:	2102      	movs	r1, #2
   1975c:	4809      	ldr	r0, [pc, #36]	; (19784 <setup_buttons+0x44>)
   1975e:	f7fb ff29 	bl	155b4 <WsfTimerStartSec>


    //
    // Start a timer.
    //
    PowerCycleTimer.handlerId = ButtonHandlerId;
   19762:	4b07      	ldr	r3, [pc, #28]	; (19780 <setup_buttons+0x40>)
   19764:	781a      	ldrb	r2, [r3, #0]
   19766:	4b08      	ldr	r3, [pc, #32]	; (19788 <setup_buttons+0x48>)
   19768:	721a      	strb	r2, [r3, #8]
    PowerCycleTimer.msg.event = POWERCYCLE_TIMER_EVENT;
   1976a:	4b07      	ldr	r3, [pc, #28]	; (19788 <setup_buttons+0x48>)
   1976c:	22a1      	movs	r2, #161	; 0xa1
   1976e:	731a      	strb	r2, [r3, #12]

    WsfTimerStartSec(&PowerCycleTimer, 4);
   19770:	2104      	movs	r1, #4
   19772:	4805      	ldr	r0, [pc, #20]	; (19788 <setup_buttons+0x48>)
   19774:	f7fb ff1e 	bl	155b4 <WsfTimerStartSec>

}
   19778:	bf00      	nop
   1977a:	bd80      	pop	{r7, pc}
   1977c:	10003720 	.word	0x10003720
   19780:	10005ce8 	.word	0x10005ce8
   19784:	10005cec 	.word	0x10005cec
   19788:	10005cfc 	.word	0x10005cfc

0001978c <am_ctimer_isr>:
// Interrupt handler for the CTIMERs
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   1978c:	b580      	push	{r7, lr}
   1978e:	b082      	sub	sp, #8
   19790:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check and clear any active CTIMER interrupts.
    //
    ui32Status = am_hal_ctimer_int_status_get(true);
   19792:	2001      	movs	r0, #1
   19794:	f006 f9fe 	bl	1fb94 <am_hal_ctimer_int_status_get>
   19798:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
   1979a:	6878      	ldr	r0, [r7, #4]
   1979c:	f006 f9ea 	bl	1fb74 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   197a0:	6878      	ldr	r0, [r7, #4]
   197a2:	f005 ffd1 	bl	1f748 <am_hal_ctimer_int_service>

}
   197a6:	bf00      	nop
   197a8:	3708      	adds	r7, #8
   197aa:	46bd      	mov	sp, r7
   197ac:	bd80      	pop	{r7, pc}

000197ae <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   197ae:	b580      	push	{r7, lr}
   197b0:	af00      	add	r7, sp, #0
    HciDrvIntService();
   197b2:	f7fb fa95 	bl	14ce0 <HciDrvIntService>
}
   197b6:	bf00      	nop
   197b8:	bd80      	pop	{r7, pc}
	...

000197bc <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
   197bc:	b580      	push	{r7, lr}
   197be:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   197c0:	2100      	movs	r1, #0
   197c2:	2000      	movs	r0, #0
   197c4:	f005 ff08 	bl	1f5d8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   197c8:	481a      	ldr	r0, [pc, #104]	; (19834 <main+0x78>)
   197ca:	f005 fd63 	bl	1f294 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   197ce:	f005 fd87 	bl	1f2e0 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   197d2:	f006 fe65 	bl	204a0 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   197d6:	2001      	movs	r0, #1
   197d8:	f006 fe6a 	bl	204b0 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   197dc:	f007 fec4 	bl	21568 <am_bsp_low_power_init>

    // Turn off unused Flash & SRAM
#if 1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_96K);
   197e0:	2004      	movs	r0, #4
   197e2:	f006 fcef 	bl	201c4 <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K);
   197e6:	200e      	movs	r0, #14
   197e8:	f006 fcec 	bl	201c4 <am_hal_pwrctrl_memory_enable>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
   197ec:	f7ff fdd6 	bl	1939c <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("Cordio Power Cycle Example\n");
   197f0:	4811      	ldr	r0, [pc, #68]	; (19838 <main+0x7c>)
   197f2:	f001 fea5 	bl	1b540 <am_util_stdio_printf>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   197f6:	2001      	movs	r0, #1
   197f8:	f7fb f886 	bl	14908 <HciDrvRadioBoot>

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   197fc:	f7ff fdd4 	bl	193a8 <exactle_stack_init>

    //
    // Prep the buttons for use
    //
    setup_buttons();
   19800:	f7ff ff9e 	bl	19740 <setup_buttons>

    //
    // Start the "Tag" profile.
    //
    TagStart();
   19804:	f000 ff18 	bl	1a638 <TagStart>

    ble_on = true;
   19808:	4b0c      	ldr	r3, [pc, #48]	; (1983c <main+0x80>)
   1980a:	2201      	movs	r2, #1
   1980c:	701a      	strb	r2, [r3, #0]
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
   1980e:	f7ff fe99 	bl	19544 <update_scheduler_timers>
        wsfOsDispatcher();
   19812:	f000 f8ef 	bl	199f4 <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled event.
        //
        set_next_wakeup();
   19816:	f7ff fec7 	bl	195a8 <set_next_wakeup>

        am_hal_interrupt_master_disable();
   1981a:	f006 fbdf 	bl	1ffdc <am_hal_interrupt_master_disable>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
   1981e:	f000 f8d7 	bl	199d0 <wsfOsReadyToSleep>
   19822:	4603      	mov	r3, r0
   19824:	2b00      	cmp	r3, #0
   19826:	d002      	beq.n	1982e <main+0x72>
        {
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   19828:	2001      	movs	r0, #1
   1982a:	f006 fe01 	bl	20430 <am_hal_sysctrl_sleep>
        }
        am_hal_interrupt_master_enable();
   1982e:	f006 fbd1 	bl	1ffd4 <am_hal_interrupt_master_enable>
        update_scheduler_timers();
   19832:	e7ec      	b.n	1980e <main+0x52>
   19834:	000245f8 	.word	0x000245f8
   19838:	00021b90 	.word	0x00021b90
   1983c:	10004f7c 	.word	0x10004f7c

00019840 <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   19840:	b480      	push	{r7}
   19842:	b085      	sub	sp, #20
   19844:	af00      	add	r7, sp, #0
   19846:	6078      	str	r0, [r7, #4]
   19848:	460b      	mov	r3, r1
   1984a:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
   1984c:	2300      	movs	r3, #0
   1984e:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   19850:	7bfb      	ldrb	r3, [r7, #15]
   19852:	b2db      	uxtb	r3, r3
   19854:	2b00      	cmp	r3, #0
   19856:	d100      	bne.n	1985a <WsfAssert+0x1a>
   19858:	e7fa      	b.n	19850 <WsfAssert+0x10>
    {
      break;
   1985a:	bf00      	nop
    }
  }
}
   1985c:	bf00      	nop
   1985e:	3714      	adds	r7, #20
   19860:	46bd      	mov	sp, r7
   19862:	f85d 7b04 	ldr.w	r7, [sp], #4
   19866:	4770      	bx	lr

00019868 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
   19868:	b480      	push	{r7}
   1986a:	af00      	add	r7, sp, #0
  if (csNesting == 0)
   1986c:	4b07      	ldr	r3, [pc, #28]	; (1988c <WsfCsEnter+0x24>)
   1986e:	781b      	ldrb	r3, [r3, #0]
   19870:	2b00      	cmp	r3, #0
   19872:	d100      	bne.n	19876 <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   19874:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   19876:	4b05      	ldr	r3, [pc, #20]	; (1988c <WsfCsEnter+0x24>)
   19878:	781b      	ldrb	r3, [r3, #0]
   1987a:	3301      	adds	r3, #1
   1987c:	b2da      	uxtb	r2, r3
   1987e:	4b03      	ldr	r3, [pc, #12]	; (1988c <WsfCsEnter+0x24>)
   19880:	701a      	strb	r2, [r3, #0]
}
   19882:	bf00      	nop
   19884:	46bd      	mov	sp, r7
   19886:	f85d 7b04 	ldr.w	r7, [sp], #4
   1988a:	4770      	bx	lr
   1988c:	10004f84 	.word	0x10004f84

00019890 <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
   19890:	b480      	push	{r7}
   19892:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   19894:	4b07      	ldr	r3, [pc, #28]	; (198b4 <WsfCsExit+0x24>)
   19896:	781b      	ldrb	r3, [r3, #0]
   19898:	3b01      	subs	r3, #1
   1989a:	b2da      	uxtb	r2, r3
   1989c:	4b05      	ldr	r3, [pc, #20]	; (198b4 <WsfCsExit+0x24>)
   1989e:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   198a0:	4b04      	ldr	r3, [pc, #16]	; (198b4 <WsfCsExit+0x24>)
   198a2:	781b      	ldrb	r3, [r3, #0]
   198a4:	2b00      	cmp	r3, #0
   198a6:	d100      	bne.n	198aa <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   198a8:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   198aa:	bf00      	nop
   198ac:	46bd      	mov	sp, r7
   198ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   198b2:	4770      	bx	lr
   198b4:	10004f84 	.word	0x10004f84

000198b8 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   198b8:	b580      	push	{r7, lr}
   198ba:	af00      	add	r7, sp, #0
  WsfCsEnter();
   198bc:	f7ff ffd4 	bl	19868 <WsfCsEnter>
}
   198c0:	bf00      	nop
   198c2:	bd80      	pop	{r7, pc}

000198c4 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   198c4:	b580      	push	{r7, lr}
   198c6:	af00      	add	r7, sp, #0
  WsfCsExit();
   198c8:	f7ff ffe2 	bl	19890 <WsfCsExit>
}
   198cc:	bf00      	nop
   198ce:	bd80      	pop	{r7, pc}

000198d0 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   198d0:	b480      	push	{r7}
   198d2:	af00      	add	r7, sp, #0
          }
      }

  }    
#endif
}
   198d4:	bf00      	nop
   198d6:	46bd      	mov	sp, r7
   198d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   198dc:	4770      	bx	lr
	...

000198e0 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   198e0:	b580      	push	{r7, lr}
   198e2:	b082      	sub	sp, #8
   198e4:	af00      	add	r7, sp, #0
   198e6:	4603      	mov	r3, r0
   198e8:	460a      	mov	r2, r1
   198ea:	71fb      	strb	r3, [r7, #7]
   198ec:	4613      	mov	r3, r2
   198ee:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   198f0:	f7ff ffba 	bl	19868 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   198f4:	79fb      	ldrb	r3, [r7, #7]
   198f6:	f003 030f 	and.w	r3, r3, #15
   198fa:	79fa      	ldrb	r2, [r7, #7]
   198fc:	f002 020f 	and.w	r2, r2, #15
   19900:	490e      	ldr	r1, [pc, #56]	; (1993c <WsfSetEvent+0x5c>)
   19902:	440a      	add	r2, r1
   19904:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   19908:	79ba      	ldrb	r2, [r7, #6]
   1990a:	430a      	orrs	r2, r1
   1990c:	b2d1      	uxtb	r1, r2
   1990e:	4a0b      	ldr	r2, [pc, #44]	; (1993c <WsfSetEvent+0x5c>)
   19910:	4413      	add	r3, r2
   19912:	460a      	mov	r2, r1
   19914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   19918:	4b08      	ldr	r3, [pc, #32]	; (1993c <WsfSetEvent+0x5c>)
   1991a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1991e:	f043 0304 	orr.w	r3, r3, #4
   19922:	b2da      	uxtb	r2, r3
   19924:	4b05      	ldr	r3, [pc, #20]	; (1993c <WsfSetEvent+0x5c>)
   19926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1992a:	f7ff ffb1 	bl	19890 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1992e:	f7ff ffcf 	bl	198d0 <WsfSetOsSpecificEvent>
}
   19932:	bf00      	nop
   19934:	3708      	adds	r7, #8
   19936:	46bd      	mov	sp, r7
   19938:	bd80      	pop	{r7, pc}
   1993a:	bf00      	nop
   1993c:	10005d0c 	.word	0x10005d0c

00019940 <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   19940:	b580      	push	{r7, lr}
   19942:	b082      	sub	sp, #8
   19944:	af00      	add	r7, sp, #0
   19946:	4603      	mov	r3, r0
   19948:	460a      	mov	r2, r1
   1994a:	71fb      	strb	r3, [r7, #7]
   1994c:	4613      	mov	r3, r2
   1994e:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   19950:	f7ff ff8a 	bl	19868 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   19954:	4b08      	ldr	r3, [pc, #32]	; (19978 <WsfTaskSetReady+0x38>)
   19956:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1995a:	79bb      	ldrb	r3, [r7, #6]
   1995c:	4313      	orrs	r3, r2
   1995e:	b2da      	uxtb	r2, r3
   19960:	4b05      	ldr	r3, [pc, #20]	; (19978 <WsfTaskSetReady+0x38>)
   19962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   19966:	f7ff ff93 	bl	19890 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1996a:	f7ff ffb1 	bl	198d0 <WsfSetOsSpecificEvent>
}
   1996e:	bf00      	nop
   19970:	3708      	adds	r7, #8
   19972:	46bd      	mov	sp, r7
   19974:	bd80      	pop	{r7, pc}
   19976:	bf00      	nop
   19978:	10005d0c 	.word	0x10005d0c

0001997c <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   1997c:	b480      	push	{r7}
   1997e:	b083      	sub	sp, #12
   19980:	af00      	add	r7, sp, #0
   19982:	4603      	mov	r3, r0
   19984:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
   19986:	4b03      	ldr	r3, [pc, #12]	; (19994 <WsfTaskMsgQueue+0x18>)
}
   19988:	4618      	mov	r0, r3
   1998a:	370c      	adds	r7, #12
   1998c:	46bd      	mov	sp, r7
   1998e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19992:	4770      	bx	lr
   19994:	10005d3c 	.word	0x10005d3c

00019998 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   19998:	b480      	push	{r7}
   1999a:	b085      	sub	sp, #20
   1999c:	af00      	add	r7, sp, #0
   1999e:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   199a0:	4b0a      	ldr	r3, [pc, #40]	; (199cc <WsfOsSetNextHandler+0x34>)
   199a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   199a6:	1c5a      	adds	r2, r3, #1
   199a8:	b2d1      	uxtb	r1, r2
   199aa:	4a08      	ldr	r2, [pc, #32]	; (199cc <WsfOsSetNextHandler+0x34>)
   199ac:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   199b0:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   199b2:	7bfb      	ldrb	r3, [r7, #15]
   199b4:	4905      	ldr	r1, [pc, #20]	; (199cc <WsfOsSetNextHandler+0x34>)
   199b6:	687a      	ldr	r2, [r7, #4]
   199b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   199bc:	7bfb      	ldrb	r3, [r7, #15]
}
   199be:	4618      	mov	r0, r3
   199c0:	3714      	adds	r7, #20
   199c2:	46bd      	mov	sp, r7
   199c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   199c8:	4770      	bx	lr
   199ca:	bf00      	nop
   199cc:	10005d0c 	.word	0x10005d0c

000199d0 <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
   199d0:	b480      	push	{r7}
   199d2:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
   199d4:	4b06      	ldr	r3, [pc, #24]	; (199f0 <wsfOsReadyToSleep+0x20>)
   199d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   199da:	2b00      	cmp	r3, #0
   199dc:	bf0c      	ite	eq
   199de:	2301      	moveq	r3, #1
   199e0:	2300      	movne	r3, #0
   199e2:	b2db      	uxtb	r3, r3
}
   199e4:	4618      	mov	r0, r3
   199e6:	46bd      	mov	sp, r7
   199e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   199ec:	4770      	bx	lr
   199ee:	bf00      	nop
   199f0:	10005d0c 	.word	0x10005d0c

000199f4 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   199f4:	b580      	push	{r7, lr}
   199f6:	b086      	sub	sp, #24
   199f8:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   199fa:	4b3f      	ldr	r3, [pc, #252]	; (19af8 <wsfOsDispatcher+0x104>)
   199fc:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
   199fe:	e072      	b.n	19ae6 <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   19a00:	f7ff ff32 	bl	19868 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   19a04:	693b      	ldr	r3, [r7, #16]
   19a06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   19a0a:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
   19a0c:	693b      	ldr	r3, [r7, #16]
   19a0e:	2200      	movs	r2, #0
   19a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   19a14:	f7ff ff3c 	bl	19890 <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   19a18:	7bfb      	ldrb	r3, [r7, #15]
   19a1a:	f003 0301 	and.w	r3, r3, #1
   19a1e:	2b00      	cmp	r3, #0
   19a20:	d016      	beq.n	19a50 <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   19a22:	e00a      	b.n	19a3a <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   19a24:	78bb      	ldrb	r3, [r7, #2]
   19a26:	461a      	mov	r2, r3
   19a28:	693b      	ldr	r3, [r7, #16]
   19a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19a2e:	68b9      	ldr	r1, [r7, #8]
   19a30:	2000      	movs	r0, #0
   19a32:	4798      	blx	r3
        WsfMsgFree(pMsg);
   19a34:	68b8      	ldr	r0, [r7, #8]
   19a36:	f7fb fc1b 	bl	15270 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   19a3a:	693b      	ldr	r3, [r7, #16]
   19a3c:	3330      	adds	r3, #48	; 0x30
   19a3e:	1cba      	adds	r2, r7, #2
   19a40:	4611      	mov	r1, r2
   19a42:	4618      	mov	r0, r3
   19a44:	f7fb fc4e 	bl	152e4 <WsfMsgDeq>
   19a48:	60b8      	str	r0, [r7, #8]
   19a4a:	68bb      	ldr	r3, [r7, #8]
   19a4c:	2b00      	cmp	r3, #0
   19a4e:	d1e9      	bne.n	19a24 <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   19a50:	7bfb      	ldrb	r3, [r7, #15]
   19a52:	f003 0302 	and.w	r3, r3, #2
   19a56:	2b00      	cmp	r3, #0
   19a58:	d012      	beq.n	19a80 <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   19a5a:	e00a      	b.n	19a72 <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   19a5c:	687b      	ldr	r3, [r7, #4]
   19a5e:	7a1b      	ldrb	r3, [r3, #8]
   19a60:	461a      	mov	r2, r3
   19a62:	693b      	ldr	r3, [r7, #16]
   19a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19a68:	687a      	ldr	r2, [r7, #4]
   19a6a:	320a      	adds	r2, #10
   19a6c:	4611      	mov	r1, r2
   19a6e:	2000      	movs	r0, #0
   19a70:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   19a72:	2000      	movs	r0, #0
   19a74:	f7fb fe22 	bl	156bc <WsfTimerServiceExpired>
   19a78:	6078      	str	r0, [r7, #4]
   19a7a:	687b      	ldr	r3, [r7, #4]
   19a7c:	2b00      	cmp	r3, #0
   19a7e:	d1ed      	bne.n	19a5c <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   19a80:	7bfb      	ldrb	r3, [r7, #15]
   19a82:	f003 0304 	and.w	r3, r3, #4
   19a86:	2b00      	cmp	r3, #0
   19a88:	d02d      	beq.n	19ae6 <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   19a8a:	2300      	movs	r3, #0
   19a8c:	75fb      	strb	r3, [r7, #23]
   19a8e:	e027      	b.n	19ae0 <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   19a90:	7dfb      	ldrb	r3, [r7, #23]
   19a92:	693a      	ldr	r2, [r7, #16]
   19a94:	4413      	add	r3, r2
   19a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19a9a:	2b00      	cmp	r3, #0
   19a9c:	d01d      	beq.n	19ada <wsfOsDispatcher+0xe6>
   19a9e:	7dfa      	ldrb	r2, [r7, #23]
   19aa0:	693b      	ldr	r3, [r7, #16]
   19aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19aa6:	2b00      	cmp	r3, #0
   19aa8:	d017      	beq.n	19ada <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
   19aaa:	f7ff fedd 	bl	19868 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   19aae:	7dfb      	ldrb	r3, [r7, #23]
   19ab0:	693a      	ldr	r2, [r7, #16]
   19ab2:	4413      	add	r3, r2
   19ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19ab8:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
   19aba:	7dfb      	ldrb	r3, [r7, #23]
   19abc:	693a      	ldr	r2, [r7, #16]
   19abe:	4413      	add	r3, r2
   19ac0:	2200      	movs	r2, #0
   19ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   19ac6:	f7ff fee3 	bl	19890 <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   19aca:	7dfa      	ldrb	r2, [r7, #23]
   19acc:	693b      	ldr	r3, [r7, #16]
   19ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19ad2:	78fa      	ldrb	r2, [r7, #3]
   19ad4:	2100      	movs	r1, #0
   19ad6:	4610      	mov	r0, r2
   19ad8:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   19ada:	7dfb      	ldrb	r3, [r7, #23]
   19adc:	3301      	adds	r3, #1
   19ade:	75fb      	strb	r3, [r7, #23]
   19ae0:	7dfb      	ldrb	r3, [r7, #23]
   19ae2:	2b08      	cmp	r3, #8
   19ae4:	d9d4      	bls.n	19a90 <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
   19ae6:	693b      	ldr	r3, [r7, #16]
   19ae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   19aec:	2b00      	cmp	r3, #0
   19aee:	d187      	bne.n	19a00 <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
   19af0:	bf00      	nop
   19af2:	3718      	adds	r7, #24
   19af4:	46bd      	mov	sp, r7
   19af6:	bd80      	pop	{r7, pc}
   19af8:	10005d0c 	.word	0x10005d0c

00019afc <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   19afc:	b40f      	push	{r0, r1, r2, r3}
   19afe:	b580      	push	{r7, lr}
   19b00:	b0c2      	sub	sp, #264	; 0x108
   19b02:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
   19b04:	f507 728a 	add.w	r2, r7, #276	; 0x114
   19b08:	463b      	mov	r3, r7
   19b0a:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   19b0c:	463b      	mov	r3, r7
   19b0e:	1d38      	adds	r0, r7, #4
   19b10:	681a      	ldr	r2, [r3, #0]
   19b12:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
   19b16:	f001 fa07 	bl	1af28 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   19b1a:	1d3b      	adds	r3, r7, #4
   19b1c:	4618      	mov	r0, r3
   19b1e:	f001 fd0f 	bl	1b540 <am_util_stdio_printf>
   19b22:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   19b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   19b2a:	2bff      	cmp	r3, #255	; 0xff
   19b2c:	d903      	bls.n	19b36 <WsfTrace+0x3a>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   19b2e:	2183      	movs	r1, #131	; 0x83
   19b30:	4806      	ldr	r0, [pc, #24]	; (19b4c <WsfTrace+0x50>)
   19b32:	f7ff fe85 	bl	19840 <WsfAssert>
  am_util_debug_printf("\n");
   19b36:	4806      	ldr	r0, [pc, #24]	; (19b50 <WsfTrace+0x54>)
   19b38:	f001 fd02 	bl	1b540 <am_util_stdio_printf>
}
   19b3c:	bf00      	nop
   19b3e:	f507 7784 	add.w	r7, r7, #264	; 0x108
   19b42:	46bd      	mov	sp, r7
   19b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   19b48:	b004      	add	sp, #16
   19b4a:	4770      	bx	lr
   19b4c:	00021bbc 	.word	0x00021bbc
   19b50:	00021bb4 	.word	0x00021bb4

00019b54 <tagAlert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagAlert(uint8_t alert)
{
   19b54:	b580      	push	{r7, lr}
   19b56:	b082      	sub	sp, #8
   19b58:	af00      	add	r7, sp, #0
   19b5a:	4603      	mov	r3, r0
   19b5c:	71fb      	strb	r3, [r7, #7]
  /* perform alert according to setting of alert alert */
  if (alert == CH_ALERT_LVL_NONE)
   19b5e:	79fb      	ldrb	r3, [r7, #7]
   19b60:	2b00      	cmp	r3, #0
   19b62:	d103      	bne.n	19b6c <tagAlert+0x18>
  {
    AppUiAction(APP_UI_ALERT_CANCEL);
   19b64:	200f      	movs	r0, #15
   19b66:	f7f9 ff69 	bl	13a3c <AppUiAction>
  }
  else if (alert == CH_ALERT_LVL_HIGH)
  {
    AppUiAction(APP_UI_ALERT_HIGH);
  }
}
   19b6a:	e00c      	b.n	19b86 <tagAlert+0x32>
  else if (alert == CH_ALERT_LVL_MILD)
   19b6c:	79fb      	ldrb	r3, [r7, #7]
   19b6e:	2b01      	cmp	r3, #1
   19b70:	d103      	bne.n	19b7a <tagAlert+0x26>
    AppUiAction(APP_UI_ALERT_LOW);
   19b72:	2010      	movs	r0, #16
   19b74:	f7f9 ff62 	bl	13a3c <AppUiAction>
}
   19b78:	e005      	b.n	19b86 <tagAlert+0x32>
  else if (alert == CH_ALERT_LVL_HIGH)
   19b7a:	79fb      	ldrb	r3, [r7, #7]
   19b7c:	2b02      	cmp	r3, #2
   19b7e:	d102      	bne.n	19b86 <tagAlert+0x32>
    AppUiAction(APP_UI_ALERT_HIGH);
   19b80:	2011      	movs	r0, #17
   19b82:	f7f9 ff5b 	bl	13a3c <AppUiAction>
}
   19b86:	bf00      	nop
   19b88:	3708      	adds	r7, #8
   19b8a:	46bd      	mov	sp, r7
   19b8c:	bd80      	pop	{r7, pc}
	...

00019b90 <tagDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagDmCback(dmEvt_t *pDmEvt)
{
   19b90:	b580      	push	{r7, lr}
   19b92:	b084      	sub	sp, #16
   19b94:	af00      	add	r7, sp, #0
   19b96:	6078      	str	r0, [r7, #4]
  dmEvt_t *pMsg;
  uint16_t  len;

  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
   19b98:	687b      	ldr	r3, [r7, #4]
   19b9a:	789b      	ldrb	r3, [r3, #2]
   19b9c:	2b34      	cmp	r3, #52	; 0x34
   19b9e:	d108      	bne.n	19bb2 <tagDmCback+0x22>
  {
    DmSecSetEccKey(&pDmEvt->eccMsg.data.key);
   19ba0:	687b      	ldr	r3, [r7, #4]
   19ba2:	3304      	adds	r3, #4
   19ba4:	4618      	mov	r0, r3
   19ba6:	f7f6 ff0f 	bl	109c8 <DmSecSetEccKey>
    tagSetup(NULL);
   19baa:	2000      	movs	r0, #0
   19bac:	f000 f92c 	bl	19e08 <tagSetup>
    {
      memcpy(pMsg, pDmEvt, len);
      WsfMsgSend(tagCb.handlerId, pMsg);
    }
  }
}
   19bb0:	e019      	b.n	19be6 <tagDmCback+0x56>
    len = DmSizeOfEvt(pDmEvt);
   19bb2:	6878      	ldr	r0, [r7, #4]
   19bb4:	f7f6 facc 	bl	10150 <DmSizeOfEvt>
   19bb8:	4603      	mov	r3, r0
   19bba:	81fb      	strh	r3, [r7, #14]
    if ((pMsg = WsfMsgAlloc(len)) != NULL)
   19bbc:	89fb      	ldrh	r3, [r7, #14]
   19bbe:	4618      	mov	r0, r3
   19bc0:	f7fb fb3f 	bl	15242 <WsfMsgAlloc>
   19bc4:	60b8      	str	r0, [r7, #8]
   19bc6:	68bb      	ldr	r3, [r7, #8]
   19bc8:	2b00      	cmp	r3, #0
   19bca:	d00c      	beq.n	19be6 <tagDmCback+0x56>
      memcpy(pMsg, pDmEvt, len);
   19bcc:	89fb      	ldrh	r3, [r7, #14]
   19bce:	461a      	mov	r2, r3
   19bd0:	6879      	ldr	r1, [r7, #4]
   19bd2:	68b8      	ldr	r0, [r7, #8]
   19bd4:	f7f2 fac4 	bl	c160 <memcpy>
      WsfMsgSend(tagCb.handlerId, pMsg);
   19bd8:	4b05      	ldr	r3, [pc, #20]	; (19bf0 <tagDmCback+0x60>)
   19bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19bde:	68b9      	ldr	r1, [r7, #8]
   19be0:	4618      	mov	r0, r3
   19be2:	f7fb fb52 	bl	1528a <WsfMsgSend>
}
   19be6:	bf00      	nop
   19be8:	3710      	adds	r7, #16
   19bea:	46bd      	mov	sp, r7
   19bec:	bd80      	pop	{r7, pc}
   19bee:	bf00      	nop
   19bf0:	10004f88 	.word	0x10004f88

00019bf4 <tagAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagAttCback(attEvt_t *pEvt)
{
   19bf4:	b580      	push	{r7, lr}
   19bf6:	b084      	sub	sp, #16
   19bf8:	af00      	add	r7, sp, #0
   19bfa:	6078      	str	r0, [r7, #4]
  attEvt_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   19bfc:	687b      	ldr	r3, [r7, #4]
   19bfe:	891b      	ldrh	r3, [r3, #8]
   19c00:	3310      	adds	r3, #16
   19c02:	b29b      	uxth	r3, r3
   19c04:	4618      	mov	r0, r3
   19c06:	f7fb fb1c 	bl	15242 <WsfMsgAlloc>
   19c0a:	60f8      	str	r0, [r7, #12]
   19c0c:	68fb      	ldr	r3, [r7, #12]
   19c0e:	2b00      	cmp	r3, #0
   19c10:	d01a      	beq.n	19c48 <tagAttCback+0x54>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   19c12:	2210      	movs	r2, #16
   19c14:	6879      	ldr	r1, [r7, #4]
   19c16:	68f8      	ldr	r0, [r7, #12]
   19c18:	f7f2 faa2 	bl	c160 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   19c1c:	68fb      	ldr	r3, [r7, #12]
   19c1e:	f103 0210 	add.w	r2, r3, #16
   19c22:	68fb      	ldr	r3, [r7, #12]
   19c24:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   19c26:	68fb      	ldr	r3, [r7, #12]
   19c28:	6858      	ldr	r0, [r3, #4]
   19c2a:	687b      	ldr	r3, [r7, #4]
   19c2c:	6859      	ldr	r1, [r3, #4]
   19c2e:	687b      	ldr	r3, [r7, #4]
   19c30:	891b      	ldrh	r3, [r3, #8]
   19c32:	461a      	mov	r2, r3
   19c34:	f7f2 fa94 	bl	c160 <memcpy>
    WsfMsgSend(tagCb.handlerId, pMsg);
   19c38:	4b05      	ldr	r3, [pc, #20]	; (19c50 <tagAttCback+0x5c>)
   19c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19c3e:	68f9      	ldr	r1, [r7, #12]
   19c40:	4618      	mov	r0, r3
   19c42:	f7fb fb22 	bl	1528a <WsfMsgSend>
  }

  return;
   19c46:	bf00      	nop
   19c48:	bf00      	nop
}
   19c4a:	3710      	adds	r7, #16
   19c4c:	46bd      	mov	sp, r7
   19c4e:	bd80      	pop	{r7, pc}
   19c50:	10004f88 	.word	0x10004f88

00019c54 <tagCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagCccCback(attsCccEvt_t *pEvt)
{
   19c54:	b580      	push	{r7, lr}
   19c56:	b084      	sub	sp, #16
   19c58:	af00      	add	r7, sp, #0
   19c5a:	6078      	str	r0, [r7, #4]
  attsCccEvt_t  *pMsg;
  appDbHdl_t    dbHdl;

  /* if CCC not set from initialization and there's a device record */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   19c5c:	687b      	ldr	r3, [r7, #4]
   19c5e:	889b      	ldrh	r3, [r3, #4]
   19c60:	2b00      	cmp	r3, #0
   19c62:	d012      	beq.n	19c8a <tagCccCback+0x36>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
   19c64:	687b      	ldr	r3, [r7, #4]
   19c66:	881b      	ldrh	r3, [r3, #0]
   19c68:	b2db      	uxtb	r3, r3
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   19c6a:	4618      	mov	r0, r3
   19c6c:	f002 fa82 	bl	1c174 <AppDbGetHdl>
   19c70:	60f8      	str	r0, [r7, #12]
   19c72:	68fb      	ldr	r3, [r7, #12]
   19c74:	2b00      	cmp	r3, #0
   19c76:	d008      	beq.n	19c8a <tagCccCback+0x36>
  {
    /* store value in device database */
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   19c78:	687b      	ldr	r3, [r7, #4]
   19c7a:	7a1b      	ldrb	r3, [r3, #8]
   19c7c:	b299      	uxth	r1, r3
   19c7e:	687b      	ldr	r3, [r7, #4]
   19c80:	88db      	ldrh	r3, [r3, #6]
   19c82:	461a      	mov	r2, r3
   19c84:	68f8      	ldr	r0, [r7, #12]
   19c86:	f7f9 fe17 	bl	138b8 <AppDbSetCccTblValue>
  }

  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   19c8a:	200a      	movs	r0, #10
   19c8c:	f7fb fad9 	bl	15242 <WsfMsgAlloc>
   19c90:	60b8      	str	r0, [r7, #8]
   19c92:	68bb      	ldr	r3, [r7, #8]
   19c94:	2b00      	cmp	r3, #0
   19c96:	d00b      	beq.n	19cb0 <tagCccCback+0x5c>
  {
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   19c98:	220a      	movs	r2, #10
   19c9a:	6879      	ldr	r1, [r7, #4]
   19c9c:	68b8      	ldr	r0, [r7, #8]
   19c9e:	f7f2 fa5f 	bl	c160 <memcpy>
    WsfMsgSend(tagCb.handlerId, pMsg);
   19ca2:	4b05      	ldr	r3, [pc, #20]	; (19cb8 <tagCccCback+0x64>)
   19ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19ca8:	68b9      	ldr	r1, [r7, #8]
   19caa:	4618      	mov	r0, r3
   19cac:	f7fb faed 	bl	1528a <WsfMsgSend>
  }
}
   19cb0:	bf00      	nop
   19cb2:	3710      	adds	r7, #16
   19cb4:	46bd      	mov	sp, r7
   19cb6:	bd80      	pop	{r7, pc}
   19cb8:	10004f88 	.word	0x10004f88

00019cbc <tagIasWriteCback>:
 */
/*************************************************************************************************/
static uint8_t tagIasWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                                uint16_t offset, uint16_t len, uint8_t *pValue,
                                attsAttr_t *pAttr)
{
   19cbc:	b590      	push	{r4, r7, lr}
   19cbe:	b083      	sub	sp, #12
   19cc0:	af00      	add	r7, sp, #0
   19cc2:	4604      	mov	r4, r0
   19cc4:	4608      	mov	r0, r1
   19cc6:	4611      	mov	r1, r2
   19cc8:	461a      	mov	r2, r3
   19cca:	4623      	mov	r3, r4
   19ccc:	71fb      	strb	r3, [r7, #7]
   19cce:	4603      	mov	r3, r0
   19cd0:	80bb      	strh	r3, [r7, #4]
   19cd2:	460b      	mov	r3, r1
   19cd4:	71bb      	strb	r3, [r7, #6]
   19cd6:	4613      	mov	r3, r2
   19cd8:	807b      	strh	r3, [r7, #2]
  ATT_TRACE_INFO3("tagIasWriteCback connId:%d handle:0x%04x op:0x%02x",
   19cda:	79f9      	ldrb	r1, [r7, #7]
   19cdc:	88ba      	ldrh	r2, [r7, #4]
   19cde:	79bb      	ldrb	r3, [r7, #6]
   19ce0:	4809      	ldr	r0, [pc, #36]	; (19d08 <tagIasWriteCback+0x4c>)
   19ce2:	f7ff ff0b 	bl	19afc <WsfTrace>
                  connId, handle, operation);
  ATT_TRACE_INFO2("                 offset:0x%04x len:0x%04x", offset, len);
   19ce6:	887b      	ldrh	r3, [r7, #2]
   19ce8:	8b3a      	ldrh	r2, [r7, #24]
   19cea:	4619      	mov	r1, r3
   19cec:	4807      	ldr	r0, [pc, #28]	; (19d0c <tagIasWriteCback+0x50>)
   19cee:	f7ff ff05 	bl	19afc <WsfTrace>

  tagAlert(*pValue);
   19cf2:	69fb      	ldr	r3, [r7, #28]
   19cf4:	781b      	ldrb	r3, [r3, #0]
   19cf6:	4618      	mov	r0, r3
   19cf8:	f7ff ff2c 	bl	19b54 <tagAlert>

  return ATT_SUCCESS;
   19cfc:	2300      	movs	r3, #0
}
   19cfe:	4618      	mov	r0, r3
   19d00:	370c      	adds	r7, #12
   19d02:	46bd      	mov	sp, r7
   19d04:	bd90      	pop	{r4, r7, pc}
   19d06:	bf00      	nop
   19d08:	00021c00 	.word	0x00021c00
   19d0c:	00021c34 	.word	0x00021c34

00019d10 <tagOpen>:
*
*  \return None.
*/
/*************************************************************************************************/
static void tagOpen(dmEvt_t *pMsg)
{
   19d10:	b580      	push	{r7, lr}
   19d12:	b082      	sub	sp, #8
   19d14:	af00      	add	r7, sp, #0
   19d16:	6078      	str	r0, [r7, #4]
  /* Update peer address info */
  tagCb.addrType = pMsg->connOpen.addrType;
   19d18:	687b      	ldr	r3, [r7, #4]
   19d1a:	7a5a      	ldrb	r2, [r3, #9]
   19d1c:	4b06      	ldr	r3, [pc, #24]	; (19d38 <tagOpen+0x28>)
   19d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  BdaCpy(tagCb.peerAddr, pMsg->connOpen.peerAddr);
   19d22:	687b      	ldr	r3, [r7, #4]
   19d24:	330a      	adds	r3, #10
   19d26:	4619      	mov	r1, r3
   19d28:	4804      	ldr	r0, [pc, #16]	; (19d3c <tagOpen+0x2c>)
   19d2a:	f7fa fc2d 	bl	14588 <BdaCpy>
}
   19d2e:	bf00      	nop
   19d30:	3708      	adds	r7, #8
   19d32:	46bd      	mov	sp, r7
   19d34:	bd80      	pop	{r7, pc}
   19d36:	bf00      	nop
   19d38:	10004f88 	.word	0x10004f88
   19d3c:	10004fc5 	.word	0x10004fc5

00019d40 <tagClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagClose(dmEvt_t *pMsg)
{
   19d40:	b580      	push	{r7, lr}
   19d42:	b084      	sub	sp, #16
   19d44:	af00      	add	r7, sp, #0
   19d46:	6078      	str	r0, [r7, #4]
  uint8_t   *pVal;
  uint16_t  len;

  /* perform alert according to setting of link loss alert */
  if (AttsGetAttr(LLS_AL_HDL, &len, &pVal) == ATT_SUCCESS)
   19d48:	f107 020c 	add.w	r2, r7, #12
   19d4c:	f107 030a 	add.w	r3, r7, #10
   19d50:	4619      	mov	r1, r3
   19d52:	2052      	movs	r0, #82	; 0x52
   19d54:	f7f3 ffd4 	bl	dd00 <AttsGetAttr>
   19d58:	4603      	mov	r3, r0
   19d5a:	2b00      	cmp	r3, #0
   19d5c:	d10c      	bne.n	19d78 <tagClose+0x38>
  {
    if (*pVal == CH_ALERT_LVL_MILD || *pVal == CH_ALERT_LVL_HIGH)
   19d5e:	68fb      	ldr	r3, [r7, #12]
   19d60:	781b      	ldrb	r3, [r3, #0]
   19d62:	2b01      	cmp	r3, #1
   19d64:	d003      	beq.n	19d6e <tagClose+0x2e>
   19d66:	68fb      	ldr	r3, [r7, #12]
   19d68:	781b      	ldrb	r3, [r3, #0]
   19d6a:	2b02      	cmp	r3, #2
   19d6c:	d104      	bne.n	19d78 <tagClose+0x38>
    {
      tagAlert(*pVal);
   19d6e:	68fb      	ldr	r3, [r7, #12]
   19d70:	781b      	ldrb	r3, [r3, #0]
   19d72:	4618      	mov	r0, r3
   19d74:	f7ff feee 	bl	19b54 <tagAlert>
    }
  }

  /* if read RSSI in progress, stop timer */
  if (tagCb.inProgress)
   19d78:	4b07      	ldr	r3, [pc, #28]	; (19d98 <tagClose+0x58>)
   19d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   19d7e:	2b00      	cmp	r3, #0
   19d80:	d006      	beq.n	19d90 <tagClose+0x50>
  {
    tagCb.inProgress = FALSE;
   19d82:	4b05      	ldr	r3, [pc, #20]	; (19d98 <tagClose+0x58>)
   19d84:	2200      	movs	r2, #0
   19d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* stop timer */
    WsfTimerStop(&tagCb.rssiTimer);
   19d8a:	4804      	ldr	r0, [pc, #16]	; (19d9c <tagClose+0x5c>)
   19d8c:	f7fb fc38 	bl	15600 <WsfTimerStop>
  }
}
   19d90:	bf00      	nop
   19d92:	3710      	adds	r7, #16
   19d94:	46bd      	mov	sp, r7
   19d96:	bd80      	pop	{r7, pc}
   19d98:	10004f88 	.word	0x10004f88
   19d9c:	10004fb4 	.word	0x10004fb4

00019da0 <tagSecPairCmpl>:
*
*  \return None.
*/
/*************************************************************************************************/
static void tagSecPairCmpl(dmEvt_t *pMsg)
{
   19da0:	b580      	push	{r7, lr}
   19da2:	b084      	sub	sp, #16
   19da4:	af00      	add	r7, sp, #0
   19da6:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  dmSecKey_t *pPeerKey;

  /* if LL Privacy has been enabled */
  if (DmLlPrivEnabled())
   19da8:	f7f6 f9b2 	bl	10110 <DmLlPrivEnabled>
   19dac:	4603      	mov	r3, r0
   19dae:	2b00      	cmp	r3, #0
   19db0:	d020      	beq.n	19df4 <tagSecPairCmpl+0x54>
  {
    /* look up app connection control block from DM connection ID */
    pCb = &appConnCb[pMsg->hdr.param - 1];
   19db2:	687b      	ldr	r3, [r7, #4]
   19db4:	881b      	ldrh	r3, [r3, #0]
   19db6:	3b01      	subs	r3, #1
   19db8:	015b      	lsls	r3, r3, #5
   19dba:	4a10      	ldr	r2, [pc, #64]	; (19dfc <tagSecPairCmpl+0x5c>)
   19dbc:	4413      	add	r3, r2
   19dbe:	60fb      	str	r3, [r7, #12]

    /* if database record handle valid */
    if ((pCb->dbHdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(pCb->dbHdl, DM_KEY_IRK, NULL)) != NULL))
   19dc0:	68fb      	ldr	r3, [r7, #12]
   19dc2:	681b      	ldr	r3, [r3, #0]
   19dc4:	2b00      	cmp	r3, #0
   19dc6:	d015      	beq.n	19df4 <tagSecPairCmpl+0x54>
   19dc8:	68fb      	ldr	r3, [r7, #12]
   19dca:	681b      	ldr	r3, [r3, #0]
   19dcc:	2200      	movs	r2, #0
   19dce:	2104      	movs	r1, #4
   19dd0:	4618      	mov	r0, r3
   19dd2:	f7f9 fc9f 	bl	13714 <AppDbGetKey>
   19dd6:	60b8      	str	r0, [r7, #8]
   19dd8:	68bb      	ldr	r3, [r7, #8]
   19dda:	2b00      	cmp	r3, #0
   19ddc:	d00a      	beq.n	19df4 <tagSecPairCmpl+0x54>
    {
      /* store peer identity info */
      BdaCpy(tagCb.peerAddr, pPeerKey->irk.bdAddr);
   19dde:	68bb      	ldr	r3, [r7, #8]
   19de0:	3310      	adds	r3, #16
   19de2:	4619      	mov	r1, r3
   19de4:	4806      	ldr	r0, [pc, #24]	; (19e00 <tagSecPairCmpl+0x60>)
   19de6:	f7fa fbcf 	bl	14588 <BdaCpy>
      tagCb.addrType = pPeerKey->irk.addrType;
   19dea:	68bb      	ldr	r3, [r7, #8]
   19dec:	7d9a      	ldrb	r2, [r3, #22]
   19dee:	4b05      	ldr	r3, [pc, #20]	; (19e04 <tagSecPairCmpl+0x64>)
   19df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }
}
   19df4:	bf00      	nop
   19df6:	3710      	adds	r7, #16
   19df8:	46bd      	mov	sp, r7
   19dfa:	bd80      	pop	{r7, pc}
   19dfc:	10005d7c 	.word	0x10005d7c
   19e00:	10004fc5 	.word	0x10004fc5
   19e04:	10004f88 	.word	0x10004f88

00019e08 <tagSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagSetup(dmEvt_t *pMsg)
{
   19e08:	b580      	push	{r7, lr}
   19e0a:	b082      	sub	sp, #8
   19e0c:	af00      	add	r7, sp, #0
   19e0e:	6078      	str	r0, [r7, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(tagAdvDataDisc), (uint8_t *) tagAdvDataDisc);
   19e10:	4a0d      	ldr	r2, [pc, #52]	; (19e48 <tagSetup+0x40>)
   19e12:	210b      	movs	r1, #11
   19e14:	2002      	movs	r0, #2
   19e16:	f003 fd5b 	bl	1d8d0 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(tagScanData), (uint8_t *) tagScanData);
   19e1a:	4a0c      	ldr	r2, [pc, #48]	; (19e4c <tagSetup+0x44>)
   19e1c:	2108      	movs	r1, #8
   19e1e:	2003      	movs	r0, #3
   19e20:	f003 fd56 	bl	1d8d0 <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, sizeof(tagAdvDataDisc), (uint8_t *) tagAdvDataDisc);
   19e24:	4a08      	ldr	r2, [pc, #32]	; (19e48 <tagSetup+0x40>)
   19e26:	210b      	movs	r1, #11
   19e28:	2000      	movs	r0, #0
   19e2a:	f003 fd51 	bl	1d8d0 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(tagScanData), (uint8_t *) tagScanData);
   19e2e:	4a07      	ldr	r2, [pc, #28]	; (19e4c <tagSetup+0x44>)
   19e30:	2108      	movs	r1, #8
   19e32:	2001      	movs	r0, #1
   19e34:	f003 fd4c 	bl	1d8d0 <AppAdvSetData>

  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   19e38:	2002      	movs	r0, #2
   19e3a:	f003 fd6b 	bl	1d914 <AppAdvStart>
}
   19e3e:	bf00      	nop
   19e40:	3708      	adds	r7, #8
   19e42:	46bd      	mov	sp, r7
   19e44:	bd80      	pop	{r7, pc}
   19e46:	bf00      	nop
   19e48:	00022bbc 	.word	0x00022bbc
   19e4c:	00022bc8 	.word	0x00022bc8

00019e50 <tagValueUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagValueUpdate(attEvt_t *pMsg)
{
   19e50:	b580      	push	{r7, lr}
   19e52:	b082      	sub	sp, #8
   19e54:	af00      	add	r7, sp, #0
   19e56:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == ATT_SUCCESS)
   19e58:	687b      	ldr	r3, [r7, #4]
   19e5a:	78db      	ldrb	r3, [r3, #3]
   19e5c:	2b00      	cmp	r3, #0
   19e5e:	d112      	bne.n	19e86 <tagValueUpdate+0x36>
  {
    /* determine which profile the handle belongs to */

    /* GATT */
    if (GattValueUpdate(pTagGattHdlList, pMsg) == ATT_SUCCESS)
   19e60:	4b0a      	ldr	r3, [pc, #40]	; (19e8c <tagValueUpdate+0x3c>)
   19e62:	681b      	ldr	r3, [r3, #0]
   19e64:	6879      	ldr	r1, [r7, #4]
   19e66:	4618      	mov	r0, r3
   19e68:	f7fa fcda 	bl	14820 <GattValueUpdate>
   19e6c:	4603      	mov	r3, r0
   19e6e:	2b00      	cmp	r3, #0
   19e70:	d008      	beq.n	19e84 <tagValueUpdate+0x34>
    {
      return;
    }

    /* GAP */
    if (GapValueUpdate(pTagGapHdlList, pMsg) == ATT_SUCCESS)
   19e72:	4b07      	ldr	r3, [pc, #28]	; (19e90 <tagValueUpdate+0x40>)
   19e74:	681b      	ldr	r3, [r3, #0]
   19e76:	6879      	ldr	r1, [r7, #4]
   19e78:	4618      	mov	r0, r3
   19e7a:	f7fa fc7d 	bl	14778 <GapValueUpdate>
   19e7e:	4603      	mov	r3, r0
   19e80:	2b00      	cmp	r3, #0
   19e82:	e000      	b.n	19e86 <tagValueUpdate+0x36>
      return;
   19e84:	bf00      	nop
    {
      return;
    }
  }
}
   19e86:	3708      	adds	r7, #8
   19e88:	46bd      	mov	sp, r7
   19e8a:	bd80      	pop	{r7, pc}
   19e8c:	10002bd8 	.word	0x10002bd8
   19e90:	10002bdc 	.word	0x10002bdc

00019e94 <tagDiscGapCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagDiscGapCmpl(dmConnId_t connId)
{
   19e94:	b580      	push	{r7, lr}
   19e96:	b084      	sub	sp, #16
   19e98:	af00      	add	r7, sp, #0
   19e9a:	4603      	mov	r3, r0
   19e9c:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t dbHdl;

  /* if RPA Only attribute found on peer device */
  if ((pTagGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
   19e9e:	4b0b      	ldr	r3, [pc, #44]	; (19ecc <tagDiscGapCmpl+0x38>)
   19ea0:	681b      	ldr	r3, [r3, #0]
   19ea2:	3302      	adds	r3, #2
   19ea4:	881b      	ldrh	r3, [r3, #0]
   19ea6:	2b00      	cmp	r3, #0
   19ea8:	d00b      	beq.n	19ec2 <tagDiscGapCmpl+0x2e>
   19eaa:	79fb      	ldrb	r3, [r7, #7]
   19eac:	4618      	mov	r0, r3
   19eae:	f002 f961 	bl	1c174 <AppDbGetHdl>
   19eb2:	60f8      	str	r0, [r7, #12]
   19eb4:	68fb      	ldr	r3, [r7, #12]
   19eb6:	2b00      	cmp	r3, #0
   19eb8:	d003      	beq.n	19ec2 <tagDiscGapCmpl+0x2e>
      ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
  {
    /* update DB */
    AppDbSetPeerRpao(dbHdl, TRUE);
   19eba:	2101      	movs	r1, #1
   19ebc:	68f8      	ldr	r0, [r7, #12]
   19ebe:	f7f9 fdac 	bl	13a1a <AppDbSetPeerRpao>
  }
}
   19ec2:	bf00      	nop
   19ec4:	3710      	adds	r7, #16
   19ec6:	46bd      	mov	sp, r7
   19ec8:	bd80      	pop	{r7, pc}
   19eca:	bf00      	nop
   19ecc:	10002bdc 	.word	0x10002bdc

00019ed0 <tagProcRssiTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagProcRssiTimer(dmEvt_t *pMsg)
{
   19ed0:	b580      	push	{r7, lr}
   19ed2:	b084      	sub	sp, #16
   19ed4:	af00      	add	r7, sp, #0
   19ed6:	6078      	str	r0, [r7, #4]
  dmConnId_t  connId;

  /* if still connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   19ed8:	f002 f92a 	bl	1c130 <AppConnIsOpen>
   19edc:	4603      	mov	r3, r0
   19ede:	73fb      	strb	r3, [r7, #15]
   19ee0:	7bfb      	ldrb	r3, [r7, #15]
   19ee2:	2b00      	cmp	r3, #0
   19ee4:	d007      	beq.n	19ef6 <tagProcRssiTimer+0x26>
  {
    /* read RSSI value for the active connection */
    DmConnReadRssi(connId);
   19ee6:	7bfb      	ldrb	r3, [r7, #15]
   19ee8:	4618      	mov	r0, r3
   19eea:	f7f5 fe58 	bl	fb9e <DmConnReadRssi>

    /* restart timer */
    WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   19eee:	2103      	movs	r1, #3
   19ef0:	4803      	ldr	r0, [pc, #12]	; (19f00 <tagProcRssiTimer+0x30>)
   19ef2:	f7fb fb5f 	bl	155b4 <WsfTimerStartSec>
  }
}
   19ef6:	bf00      	nop
   19ef8:	3710      	adds	r7, #16
   19efa:	46bd      	mov	sp, r7
   19efc:	bd80      	pop	{r7, pc}
   19efe:	bf00      	nop
   19f00:	10004fb4 	.word	0x10004fb4

00019f04 <tagBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagBtnCback(uint8_t btn)
{
   19f04:	b580      	push	{r7, lr}
   19f06:	b084      	sub	sp, #16
   19f08:	af00      	add	r7, sp, #0
   19f0a:	4603      	mov	r3, r0
   19f0c:	71fb      	strb	r3, [r7, #7]
  dmConnId_t  connId;

  /* button actions when connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   19f0e:	f002 f90f 	bl	1c130 <AppConnIsOpen>
   19f12:	4603      	mov	r3, r0
   19f14:	73fb      	strb	r3, [r7, #15]
   19f16:	7bfb      	ldrb	r3, [r7, #15]
   19f18:	2b00      	cmp	r3, #0
   19f1a:	d05e      	beq.n	19fda <tagBtnCback+0xd6>
  {
    switch (btn)
   19f1c:	79fb      	ldrb	r3, [r7, #7]
   19f1e:	3b02      	subs	r3, #2
   19f20:	2b06      	cmp	r3, #6
   19f22:	f200 80ae 	bhi.w	1a082 <tagBtnCback+0x17e>
   19f26:	a201      	add	r2, pc, #4	; (adr r2, 19f2c <tagBtnCback+0x28>)
   19f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19f2c:	00019f49 	.word	0x00019f49
   19f30:	00019f5b 	.word	0x00019f5b
   19f34:	00019f6d 	.word	0x00019f6d
   19f38:	0001a083 	.word	0x0001a083
   19f3c:	0001a083 	.word	0x0001a083
   19f40:	00019f77 	.word	0x00019f77
   19f44:	00019fab 	.word	0x00019fab
    {
      case APP_UI_BTN_1_SHORT:
        /* send immediate alert, high */
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_HIGH);
   19f48:	4b52      	ldr	r3, [pc, #328]	; (1a094 <tagBtnCback+0x190>)
   19f4a:	681b      	ldr	r3, [r3, #0]
   19f4c:	8819      	ldrh	r1, [r3, #0]
   19f4e:	7bfb      	ldrb	r3, [r7, #15]
   19f50:	2202      	movs	r2, #2
   19f52:	4618      	mov	r0, r3
   19f54:	f7f9 fe8c 	bl	13c70 <FmplSendAlert>
        break;
   19f58:	e098      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_1_MED:
        /* send immediate alert, none */
        FmplSendAlert(connId, pTagIasHdlList[FMPL_IAS_AL_HDL_IDX], CH_ALERT_LVL_NONE);
   19f5a:	4b4e      	ldr	r3, [pc, #312]	; (1a094 <tagBtnCback+0x190>)
   19f5c:	681b      	ldr	r3, [r3, #0]
   19f5e:	8819      	ldrh	r1, [r3, #0]
   19f60:	7bfb      	ldrb	r3, [r7, #15]
   19f62:	2200      	movs	r2, #0
   19f64:	4618      	mov	r0, r3
   19f66:	f7f9 fe83 	bl	13c70 <FmplSendAlert>
        break;
   19f6a:	e08f      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_1_LONG:
        /* disconnect */
        AppConnClose(connId);
   19f6c:	7bfb      	ldrb	r3, [r7, #15]
   19f6e:	4618      	mov	r0, r3
   19f70:	f002 f8ce 	bl	1c110 <AppConnClose>
        break;
   19f74:	e08a      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_2_SHORT:
        /* if read RSSI in progress, stop timer */
        if (tagCb.inProgress)
   19f76:	4b48      	ldr	r3, [pc, #288]	; (1a098 <tagBtnCback+0x194>)
   19f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   19f7c:	2b00      	cmp	r3, #0
   19f7e:	d007      	beq.n	19f90 <tagBtnCback+0x8c>
        {
          tagCb.inProgress = FALSE;
   19f80:	4b45      	ldr	r3, [pc, #276]	; (1a098 <tagBtnCback+0x194>)
   19f82:	2200      	movs	r2, #0
   19f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          /* stop timer */
          WsfTimerStop(&tagCb.rssiTimer);
   19f88:	4844      	ldr	r0, [pc, #272]	; (1a09c <tagBtnCback+0x198>)
   19f8a:	f7fb fb39 	bl	15600 <WsfTimerStop>
          DmConnReadRssi(connId);

          /* start timer */
          WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
        }
        break;
   19f8e:	e07d      	b.n	1a08c <tagBtnCback+0x188>
          tagCb.inProgress = TRUE;
   19f90:	4b41      	ldr	r3, [pc, #260]	; (1a098 <tagBtnCback+0x194>)
   19f92:	2201      	movs	r2, #1
   19f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          DmConnReadRssi(connId);
   19f98:	7bfb      	ldrb	r3, [r7, #15]
   19f9a:	4618      	mov	r0, r3
   19f9c:	f7f5 fdff 	bl	fb9e <DmConnReadRssi>
          WsfTimerStartSec(&tagCb.rssiTimer, TAG_READ_RSSI_INTERVAL);
   19fa0:	2103      	movs	r1, #3
   19fa2:	483e      	ldr	r0, [pc, #248]	; (1a09c <tagBtnCback+0x198>)
   19fa4:	f7fb fb06 	bl	155b4 <WsfTimerStartSec>
        break;
   19fa8:	e070      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_2_MED:
        {
          uint8_t addrType = DmConnPeerAddrType(connId);
   19faa:	7bfb      	ldrb	r3, [r7, #15]
   19fac:	4618      	mov	r0, r3
   19fae:	f7f5 fe87 	bl	fcc0 <DmConnPeerAddrType>
   19fb2:	4603      	mov	r3, r0
   19fb4:	73bb      	strb	r3, [r7, #14]

          /* if peer is using a public address */
          if (addrType == DM_ADDR_PUBLIC)
   19fb6:	7bbb      	ldrb	r3, [r7, #14]
   19fb8:	2b00      	cmp	r3, #0
   19fba:	d164      	bne.n	1a086 <tagBtnCback+0x182>
          {
            /* add peer to the white list */
            DmDevWhiteListAdd(addrType, DmConnPeerAddr(connId));
   19fbc:	7bfb      	ldrb	r3, [r7, #15]
   19fbe:	4618      	mov	r0, r3
   19fc0:	f7f5 fe88 	bl	fcd4 <DmConnPeerAddr>
   19fc4:	4602      	mov	r2, r0
   19fc6:	7bbb      	ldrb	r3, [r7, #14]
   19fc8:	4611      	mov	r1, r2
   19fca:	4618      	mov	r0, r3
   19fcc:	f7f6 f810 	bl	fff0 <DmDevWhiteListAdd>

            /* set Advertising filter policy to All */
            DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_ALL);
   19fd0:	2103      	movs	r1, #3
   19fd2:	2000      	movs	r0, #0
   19fd4:	f7f6 f82c 	bl	10030 <DmDevSetFilterPolicy>
          }
        }
        break;
   19fd8:	e055      	b.n	1a086 <tagBtnCback+0x182>
    }
  }
  /* button actions when not connected */
  else
  {
    switch (btn)
   19fda:	79fb      	ldrb	r3, [r7, #7]
   19fdc:	3b02      	subs	r3, #2
   19fde:	2b08      	cmp	r3, #8
   19fe0:	d853      	bhi.n	1a08a <tagBtnCback+0x186>
   19fe2:	a201      	add	r2, pc, #4	; (adr r2, 19fe8 <tagBtnCback+0xe4>)
   19fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19fe8:	0001a00d 	.word	0x0001a00d
   19fec:	0001a015 	.word	0x0001a015
   19ff0:	0001a023 	.word	0x0001a023
   19ff4:	0001a04d 	.word	0x0001a04d
   19ff8:	0001a08b 	.word	0x0001a08b
   19ffc:	0001a061 	.word	0x0001a061
   1a000:	0001a053 	.word	0x0001a053
   1a004:	0001a067 	.word	0x0001a067
   1a008:	0001a079 	.word	0x0001a079
    {
      case APP_UI_BTN_1_SHORT:
        /* start or restart advertising */
        AppAdvStart(APP_MODE_AUTO_INIT);
   1a00c:	2002      	movs	r0, #2
   1a00e:	f003 fc81 	bl	1d914 <AppAdvStart>
        break;
   1a012:	e03b      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_1_MED:
        /* enter discoverable and bondable mode mode */
        AppSetBondable(TRUE);
   1a014:	2001      	movs	r0, #1
   1a016:	f003 fb39 	bl	1d68c <AppSetBondable>
        AppAdvStart(APP_MODE_DISCOVERABLE);
   1a01a:	2001      	movs	r0, #1
   1a01c:	f003 fc7a 	bl	1d914 <AppAdvStart>
        break;
   1a020:	e034      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_1_LONG:
        /* clear bonded device info */
        AppDbDeleteAllRecords();
   1a022:	f7f9 faf1 	bl	13608 <AppDbDeleteAllRecords>

        /* if LL Privacy is supported */
        if (HciLlPrivacySupported())
   1a026:	f7fd f877 	bl	17118 <HciLlPrivacySupported>
   1a02a:	4603      	mov	r3, r0
   1a02c:	2b00      	cmp	r3, #0
   1a02e:	d009      	beq.n	1a044 <tagBtnCback+0x140>
        {
          /* if LL Privacy has been enabled */
          if (DmLlPrivEnabled())
   1a030:	f7f6 f86e 	bl	10110 <DmLlPrivEnabled>
   1a034:	4603      	mov	r3, r0
   1a036:	2b00      	cmp	r3, #0
   1a038:	d002      	beq.n	1a040 <tagBtnCback+0x13c>
          {
            /* make sure LL Privacy is disabled before restarting advertising */
            DmPrivSetAddrResEnable(FALSE);
   1a03a:	2000      	movs	r0, #0
   1a03c:	f7f6 fa14 	bl	10468 <DmPrivSetAddrResEnable>
          }

          /* clear resolving list */
          DmPrivClearResList();
   1a040:	f7f6 f9fc 	bl	1043c <DmPrivClearResList>
        }

        /* restart advertising */
        AppAdvStart(APP_MODE_AUTO_INIT);
   1a044:	2002      	movs	r0, #2
   1a046:	f003 fc65 	bl	1d914 <AppAdvStart>
        break;
   1a04a:	e01f      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_1_EX_LONG:
        /* add RPAO characteristic to GAP service -- needed only when DM Privacy enabled */
        SvcCoreGapAddRpaoCh();
   1a04c:	f001 faba 	bl	1b5c4 <SvcCoreGapAddRpaoCh>
        break;
   1a050:	e01c      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_2_MED:
        /* clear the white list */
        DmDevWhiteListClear();
   1a052:	f7f5 ffd1 	bl	fff8 <DmDevWhiteListClear>

        /* set Advertising filter policy to None */
        DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_ADV, HCI_ADV_FILT_NONE);
   1a056:	2100      	movs	r1, #0
   1a058:	2000      	movs	r0, #0
   1a05a:	f7f5 ffe9 	bl	10030 <DmDevSetFilterPolicy>
        break;
   1a05e:	e015      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_2_SHORT:
        /* stop advertising */
        AppAdvStop();
   1a060:	f003 fc86 	bl	1d970 <AppAdvStop>
        break;
   1a064:	e012      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_2_LONG:
        /* start directed advertising using peer address */
        AppConnAccept(DM_ADV_CONN_DIRECT_LO_DUTY, tagCb.addrType, tagCb.peerAddr);
   1a066:	4b0c      	ldr	r3, [pc, #48]	; (1a098 <tagBtnCback+0x194>)
   1a068:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   1a06c:	4a0c      	ldr	r2, [pc, #48]	; (1a0a0 <tagBtnCback+0x19c>)
   1a06e:	4619      	mov	r1, r3
   1a070:	2004      	movs	r0, #4
   1a072:	f003 fc91 	bl	1d998 <AppConnAccept>
        break;
   1a076:	e009      	b.n	1a08c <tagBtnCback+0x188>

      case APP_UI_BTN_2_EX_LONG:
        /* enable device privacy -- start generating local RPAs every 15 minutes */
        DmAdvPrivStart(15 * 60);
   1a078:	f44f 7061 	mov.w	r0, #900	; 0x384
   1a07c:	f7f5 fa56 	bl	f52c <DmAdvPrivStart>
        break;
   1a080:	e004      	b.n	1a08c <tagBtnCback+0x188>
        break;
   1a082:	bf00      	nop
   1a084:	e002      	b.n	1a08c <tagBtnCback+0x188>
        break;
   1a086:	bf00      	nop
   1a088:	e000      	b.n	1a08c <tagBtnCback+0x188>

      default:
        break;
   1a08a:	bf00      	nop
    }
  }
}
   1a08c:	bf00      	nop
   1a08e:	3710      	adds	r7, #16
   1a090:	46bd      	mov	sp, r7
   1a092:	bd80      	pop	{r7, pc}
   1a094:	10002bd4 	.word	0x10002bd4
   1a098:	10004f88 	.word	0x10004f88
   1a09c:	10004fb4 	.word	0x10004fb4
   1a0a0:	10004fc5 	.word	0x10004fc5

0001a0a4 <tagDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagDiscCback(dmConnId_t connId, uint8_t status)
{
   1a0a4:	b580      	push	{r7, lr}
   1a0a6:	b084      	sub	sp, #16
   1a0a8:	af02      	add	r7, sp, #8
   1a0aa:	4603      	mov	r3, r0
   1a0ac:	460a      	mov	r2, r1
   1a0ae:	71fb      	strb	r3, [r7, #7]
   1a0b0:	4613      	mov	r3, r2
   1a0b2:	71bb      	strb	r3, [r7, #6]
  switch(status)
   1a0b4:	79bb      	ldrb	r3, [r7, #6]
   1a0b6:	2b07      	cmp	r3, #7
   1a0b8:	f200 8083 	bhi.w	1a1c2 <tagDiscCback+0x11e>
   1a0bc:	a201      	add	r2, pc, #4	; (adr r2, 1a0c4 <tagDiscCback+0x20>)
   1a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a0c2:	bf00      	nop
   1a0c4:	0001a0e5 	.word	0x0001a0e5
   1a0c8:	0001a0f3 	.word	0x0001a0f3
   1a0cc:	0001a0fd 	.word	0x0001a0fd
   1a0d0:	0001a135 	.word	0x0001a135
   1a0d4:	0001a115 	.word	0x0001a115
   1a0d8:	0001a1a1 	.word	0x0001a1a1
   1a0dc:	0001a1c3 	.word	0x0001a1c3
   1a0e0:	0001a1b7 	.word	0x0001a1b7
  {
    case APP_DISC_INIT:
      /* set handle list when initialization requested */
      AppDiscSetHdlList(connId, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
   1a0e4:	79fb      	ldrb	r3, [r7, #7]
   1a0e6:	4a39      	ldr	r2, [pc, #228]	; (1a1cc <tagDiscCback+0x128>)
   1a0e8:	2105      	movs	r1, #5
   1a0ea:	4618      	mov	r0, r3
   1a0ec:	f001 fd48 	bl	1bb80 <AppDiscSetHdlList>
      break;
   1a0f0:	e068      	b.n	1a1c4 <tagDiscCback+0x120>

    case APP_DISC_SEC_REQUIRED:
      /* request security */
      AppSlaveSecurityReq(connId);
   1a0f2:	79fb      	ldrb	r3, [r7, #7]
   1a0f4:	4618      	mov	r0, r3
   1a0f6:	f003 faf1 	bl	1d6dc <AppSlaveSecurityReq>
      break;
   1a0fa:	e063      	b.n	1a1c4 <tagDiscCback+0x120>

    case APP_DISC_START:
      /* initialize discovery state */
      tagCb.discState = TAG_DISC_IAS_SVC;
   1a0fc:	4b33      	ldr	r3, [pc, #204]	; (1a1cc <tagDiscCback+0x128>)
   1a0fe:	2200      	movs	r2, #0
   1a100:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* discover immediate alert service */
      FmplIasDiscover(connId, pTagIasHdlList);
   1a104:	4b32      	ldr	r3, [pc, #200]	; (1a1d0 <tagDiscCback+0x12c>)
   1a106:	681a      	ldr	r2, [r3, #0]
   1a108:	79fb      	ldrb	r3, [r7, #7]
   1a10a:	4611      	mov	r1, r2
   1a10c:	4618      	mov	r0, r3
   1a10e:	f7f9 fd97 	bl	13c40 <FmplIasDiscover>
      break;
   1a112:	e057      	b.n	1a1c4 <tagDiscCback+0x120>

    case APP_DISC_FAILED:
      if (pAppCfg->abortDisc)
   1a114:	4b2f      	ldr	r3, [pc, #188]	; (1a1d4 <tagDiscCback+0x130>)
   1a116:	681b      	ldr	r3, [r3, #0]
   1a118:	781b      	ldrb	r3, [r3, #0]
   1a11a:	2b00      	cmp	r3, #0
   1a11c:	d00a      	beq.n	1a134 <tagDiscCback+0x90>
      {
        /* if immediate alert service not found */
        if (tagCb.discState == TAG_DISC_IAS_SVC)
   1a11e:	4b2b      	ldr	r3, [pc, #172]	; (1a1cc <tagDiscCback+0x128>)
   1a120:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a124:	2b00      	cmp	r3, #0
   1a126:	d105      	bne.n	1a134 <tagDiscCback+0x90>
        {
          /* discovery failed */
          AppDiscComplete(connId, APP_DISC_FAILED);
   1a128:	79fb      	ldrb	r3, [r7, #7]
   1a12a:	2104      	movs	r1, #4
   1a12c:	4618      	mov	r0, r3
   1a12e:	f001 fd43 	bl	1bbb8 <AppDiscComplete>
          break;
   1a132:	e047      	b.n	1a1c4 <tagDiscCback+0x120>
      }
      /* else fall through to continue discovery */

    case APP_DISC_CMPL:
      /* next discovery state */
      tagCb.discState++;
   1a134:	4b25      	ldr	r3, [pc, #148]	; (1a1cc <tagDiscCback+0x128>)
   1a136:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a13a:	3301      	adds	r3, #1
   1a13c:	b2da      	uxtb	r2, r3
   1a13e:	4b23      	ldr	r3, [pc, #140]	; (1a1cc <tagDiscCback+0x128>)
   1a140:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      if (tagCb.discState == TAG_DISC_GATT_SVC)
   1a144:	4b21      	ldr	r3, [pc, #132]	; (1a1cc <tagDiscCback+0x128>)
   1a146:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a14a:	2b01      	cmp	r3, #1
   1a14c:	d107      	bne.n	1a15e <tagDiscCback+0xba>
      {
        /* discover GATT service */
        GattDiscover(connId, pTagGattHdlList);
   1a14e:	4b22      	ldr	r3, [pc, #136]	; (1a1d8 <tagDiscCback+0x134>)
   1a150:	681a      	ldr	r2, [r3, #0]
   1a152:	79fb      	ldrb	r3, [r7, #7]
   1a154:	4611      	mov	r1, r2
   1a156:	4618      	mov	r0, r3
   1a158:	f7fa fb4a 	bl	147f0 <GattDiscover>

        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
                         (attcDiscCfg_t *) tagDiscCfgList, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
      }
      break;
   1a15c:	e032      	b.n	1a1c4 <tagDiscCback+0x120>
      else if (tagCb.discState == TAG_DISC_GAP_SVC)
   1a15e:	4b1b      	ldr	r3, [pc, #108]	; (1a1cc <tagDiscCback+0x128>)
   1a160:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a164:	2b02      	cmp	r3, #2
   1a166:	d107      	bne.n	1a178 <tagDiscCback+0xd4>
        GapDiscover(connId, pTagGapHdlList);
   1a168:	4b1c      	ldr	r3, [pc, #112]	; (1a1dc <tagDiscCback+0x138>)
   1a16a:	681a      	ldr	r2, [r3, #0]
   1a16c:	79fb      	ldrb	r3, [r7, #7]
   1a16e:	4611      	mov	r1, r2
   1a170:	4618      	mov	r0, r3
   1a172:	f7fa fae9 	bl	14748 <GapDiscover>
      break;
   1a176:	e025      	b.n	1a1c4 <tagDiscCback+0x120>
        AppDiscComplete(connId, APP_DISC_CMPL);
   1a178:	79fb      	ldrb	r3, [r7, #7]
   1a17a:	2103      	movs	r1, #3
   1a17c:	4618      	mov	r0, r3
   1a17e:	f001 fd1b 	bl	1bbb8 <AppDiscComplete>
        tagDiscGapCmpl(connId);
   1a182:	79fb      	ldrb	r3, [r7, #7]
   1a184:	4618      	mov	r0, r3
   1a186:	f7ff fe85 	bl	19e94 <tagDiscGapCmpl>
        AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
   1a18a:	79f8      	ldrb	r0, [r7, #7]
   1a18c:	4b0f      	ldr	r3, [pc, #60]	; (1a1cc <tagDiscCback+0x128>)
   1a18e:	9301      	str	r3, [sp, #4]
   1a190:	2305      	movs	r3, #5
   1a192:	9300      	str	r3, [sp, #0]
   1a194:	4b12      	ldr	r3, [pc, #72]	; (1a1e0 <tagDiscCback+0x13c>)
   1a196:	2202      	movs	r2, #2
   1a198:	2105      	movs	r1, #5
   1a19a:	f001 fdb1 	bl	1bd00 <AppDiscConfigure>
      break;
   1a19e:	e011      	b.n	1a1c4 <tagDiscCback+0x120>

    case APP_DISC_CFG_START:
      /* start configuration */
      AppDiscConfigure(connId, APP_DISC_CFG_START, TAG_DISC_CFG_LIST_LEN,
   1a1a0:	79f8      	ldrb	r0, [r7, #7]
   1a1a2:	4b0a      	ldr	r3, [pc, #40]	; (1a1cc <tagDiscCback+0x128>)
   1a1a4:	9301      	str	r3, [sp, #4]
   1a1a6:	2305      	movs	r3, #5
   1a1a8:	9300      	str	r3, [sp, #0]
   1a1aa:	4b0d      	ldr	r3, [pc, #52]	; (1a1e0 <tagDiscCback+0x13c>)
   1a1ac:	2202      	movs	r2, #2
   1a1ae:	2105      	movs	r1, #5
   1a1b0:	f001 fda6 	bl	1bd00 <AppDiscConfigure>
                       (attcDiscCfg_t *) tagDiscCfgList, TAG_DISC_HDL_LIST_LEN, tagCb.hdlList);
      break;
   1a1b4:	e006      	b.n	1a1c4 <tagDiscCback+0x120>

    case APP_DISC_CFG_CMPL:
      AppDiscComplete(connId, APP_DISC_CFG_CMPL);
   1a1b6:	79fb      	ldrb	r3, [r7, #7]
   1a1b8:	2107      	movs	r1, #7
   1a1ba:	4618      	mov	r0, r3
   1a1bc:	f001 fcfc 	bl	1bbb8 <AppDiscComplete>
      break;
   1a1c0:	e000      	b.n	1a1c4 <tagDiscCback+0x120>
    case APP_DISC_CFG_CONN_START:
      /* no connection setup configuration for this application */
      break;

    default:
      break;
   1a1c2:	bf00      	nop
  }
}
   1a1c4:	bf00      	nop
   1a1c6:	3708      	adds	r7, #8
   1a1c8:	46bd      	mov	sp, r7
   1a1ca:	bd80      	pop	{r7, pc}
   1a1cc:	10004f88 	.word	0x10004f88
   1a1d0:	10002bd4 	.word	0x10002bd4
   1a1d4:	10005d70 	.word	0x10005d70
   1a1d8:	10002bd8 	.word	0x10002bd8
   1a1dc:	10002bdc 	.word	0x10002bdc
   1a1e0:	00022bd4 	.word	0x00022bd4

0001a1e4 <tagProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void tagProcMsg(dmEvt_t *pMsg)
{
   1a1e4:	b580      	push	{r7, lr}
   1a1e6:	b084      	sub	sp, #16
   1a1e8:	af00      	add	r7, sp, #0
   1a1ea:	6078      	str	r0, [r7, #4]
  uint8_t uiEvent = APP_UI_NONE;
   1a1ec:	2300      	movs	r3, #0
   1a1ee:	73fb      	strb	r3, [r7, #15]

  switch(pMsg->hdr.event)
   1a1f0:	687b      	ldr	r3, [r7, #4]
   1a1f2:	789b      	ldrb	r3, [r3, #2]
   1a1f4:	3b05      	subs	r3, #5
   1a1f6:	2b9b      	cmp	r3, #155	; 0x9b
   1a1f8:	f200 8186 	bhi.w	1a508 <tagProcMsg+0x324>
   1a1fc:	a201      	add	r2, pc, #4	; (adr r2, 1a204 <tagProcMsg+0x20>)
   1a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a202:	bf00      	nop
   1a204:	0001a475 	.word	0x0001a475
   1a208:	0001a509 	.word	0x0001a509
   1a20c:	0001a509 	.word	0x0001a509
   1a210:	0001a509 	.word	0x0001a509
   1a214:	0001a509 	.word	0x0001a509
   1a218:	0001a509 	.word	0x0001a509
   1a21c:	0001a509 	.word	0x0001a509
   1a220:	0001a509 	.word	0x0001a509
   1a224:	0001a509 	.word	0x0001a509
   1a228:	0001a475 	.word	0x0001a475
   1a22c:	0001a509 	.word	0x0001a509
   1a230:	0001a509 	.word	0x0001a509
   1a234:	0001a47d 	.word	0x0001a47d
   1a238:	0001a509 	.word	0x0001a509
   1a23c:	0001a509 	.word	0x0001a509
   1a240:	0001a509 	.word	0x0001a509
   1a244:	0001a509 	.word	0x0001a509
   1a248:	0001a509 	.word	0x0001a509
   1a24c:	0001a509 	.word	0x0001a509
   1a250:	0001a509 	.word	0x0001a509
   1a254:	0001a509 	.word	0x0001a509
   1a258:	0001a509 	.word	0x0001a509
   1a25c:	0001a509 	.word	0x0001a509
   1a260:	0001a509 	.word	0x0001a509
   1a264:	0001a509 	.word	0x0001a509
   1a268:	0001a509 	.word	0x0001a509
   1a26c:	0001a509 	.word	0x0001a509
   1a270:	0001a48b 	.word	0x0001a48b
   1a274:	0001a495 	.word	0x0001a495
   1a278:	0001a49b 	.word	0x0001a49b
   1a27c:	0001a509 	.word	0x0001a509
   1a280:	0001a509 	.word	0x0001a509
   1a284:	0001a509 	.word	0x0001a509
   1a288:	0001a509 	.word	0x0001a509
   1a28c:	0001a4a1 	.word	0x0001a4a1
   1a290:	0001a4ad 	.word	0x0001a4ad
   1a294:	0001a509 	.word	0x0001a509
   1a298:	0001a4b9 	.word	0x0001a4b9
   1a29c:	0001a4c5 	.word	0x0001a4c5
   1a2a0:	0001a4cb 	.word	0x0001a4cb
   1a2a4:	0001a4d1 	.word	0x0001a4d1
   1a2a8:	0001a4d7 	.word	0x0001a4d7
   1a2ac:	0001a509 	.word	0x0001a509
   1a2b0:	0001a509 	.word	0x0001a509
   1a2b4:	0001a509 	.word	0x0001a509
   1a2b8:	0001a509 	.word	0x0001a509
   1a2bc:	0001a509 	.word	0x0001a509
   1a2c0:	0001a509 	.word	0x0001a509
   1a2c4:	0001a4e1 	.word	0x0001a4e1
   1a2c8:	0001a509 	.word	0x0001a509
   1a2cc:	0001a509 	.word	0x0001a509
   1a2d0:	0001a4f3 	.word	0x0001a4f3
   1a2d4:	0001a509 	.word	0x0001a509
   1a2d8:	0001a509 	.word	0x0001a509
   1a2dc:	0001a509 	.word	0x0001a509
   1a2e0:	0001a509 	.word	0x0001a509
   1a2e4:	0001a509 	.word	0x0001a509
   1a2e8:	0001a509 	.word	0x0001a509
   1a2ec:	0001a509 	.word	0x0001a509
   1a2f0:	0001a509 	.word	0x0001a509
   1a2f4:	0001a509 	.word	0x0001a509
   1a2f8:	0001a509 	.word	0x0001a509
   1a2fc:	0001a509 	.word	0x0001a509
   1a300:	0001a509 	.word	0x0001a509
   1a304:	0001a509 	.word	0x0001a509
   1a308:	0001a509 	.word	0x0001a509
   1a30c:	0001a509 	.word	0x0001a509
   1a310:	0001a509 	.word	0x0001a509
   1a314:	0001a509 	.word	0x0001a509
   1a318:	0001a509 	.word	0x0001a509
   1a31c:	0001a509 	.word	0x0001a509
   1a320:	0001a509 	.word	0x0001a509
   1a324:	0001a509 	.word	0x0001a509
   1a328:	0001a509 	.word	0x0001a509
   1a32c:	0001a509 	.word	0x0001a509
   1a330:	0001a509 	.word	0x0001a509
   1a334:	0001a509 	.word	0x0001a509
   1a338:	0001a509 	.word	0x0001a509
   1a33c:	0001a509 	.word	0x0001a509
   1a340:	0001a509 	.word	0x0001a509
   1a344:	0001a509 	.word	0x0001a509
   1a348:	0001a509 	.word	0x0001a509
   1a34c:	0001a509 	.word	0x0001a509
   1a350:	0001a509 	.word	0x0001a509
   1a354:	0001a509 	.word	0x0001a509
   1a358:	0001a509 	.word	0x0001a509
   1a35c:	0001a509 	.word	0x0001a509
   1a360:	0001a509 	.word	0x0001a509
   1a364:	0001a509 	.word	0x0001a509
   1a368:	0001a509 	.word	0x0001a509
   1a36c:	0001a509 	.word	0x0001a509
   1a370:	0001a509 	.word	0x0001a509
   1a374:	0001a509 	.word	0x0001a509
   1a378:	0001a509 	.word	0x0001a509
   1a37c:	0001a509 	.word	0x0001a509
   1a380:	0001a509 	.word	0x0001a509
   1a384:	0001a509 	.word	0x0001a509
   1a388:	0001a509 	.word	0x0001a509
   1a38c:	0001a509 	.word	0x0001a509
   1a390:	0001a509 	.word	0x0001a509
   1a394:	0001a509 	.word	0x0001a509
   1a398:	0001a509 	.word	0x0001a509
   1a39c:	0001a509 	.word	0x0001a509
   1a3a0:	0001a509 	.word	0x0001a509
   1a3a4:	0001a509 	.word	0x0001a509
   1a3a8:	0001a509 	.word	0x0001a509
   1a3ac:	0001a509 	.word	0x0001a509
   1a3b0:	0001a509 	.word	0x0001a509
   1a3b4:	0001a509 	.word	0x0001a509
   1a3b8:	0001a509 	.word	0x0001a509
   1a3bc:	0001a509 	.word	0x0001a509
   1a3c0:	0001a509 	.word	0x0001a509
   1a3c4:	0001a509 	.word	0x0001a509
   1a3c8:	0001a509 	.word	0x0001a509
   1a3cc:	0001a509 	.word	0x0001a509
   1a3d0:	0001a509 	.word	0x0001a509
   1a3d4:	0001a509 	.word	0x0001a509
   1a3d8:	0001a509 	.word	0x0001a509
   1a3dc:	0001a509 	.word	0x0001a509
   1a3e0:	0001a509 	.word	0x0001a509
   1a3e4:	0001a509 	.word	0x0001a509
   1a3e8:	0001a509 	.word	0x0001a509
   1a3ec:	0001a509 	.word	0x0001a509
   1a3f0:	0001a509 	.word	0x0001a509
   1a3f4:	0001a509 	.word	0x0001a509
   1a3f8:	0001a509 	.word	0x0001a509
   1a3fc:	0001a509 	.word	0x0001a509
   1a400:	0001a509 	.word	0x0001a509
   1a404:	0001a509 	.word	0x0001a509
   1a408:	0001a509 	.word	0x0001a509
   1a40c:	0001a509 	.word	0x0001a509
   1a410:	0001a509 	.word	0x0001a509
   1a414:	0001a509 	.word	0x0001a509
   1a418:	0001a509 	.word	0x0001a509
   1a41c:	0001a509 	.word	0x0001a509
   1a420:	0001a509 	.word	0x0001a509
   1a424:	0001a509 	.word	0x0001a509
   1a428:	0001a509 	.word	0x0001a509
   1a42c:	0001a509 	.word	0x0001a509
   1a430:	0001a509 	.word	0x0001a509
   1a434:	0001a509 	.word	0x0001a509
   1a438:	0001a509 	.word	0x0001a509
   1a43c:	0001a509 	.word	0x0001a509
   1a440:	0001a509 	.word	0x0001a509
   1a444:	0001a509 	.word	0x0001a509
   1a448:	0001a509 	.word	0x0001a509
   1a44c:	0001a509 	.word	0x0001a509
   1a450:	0001a509 	.word	0x0001a509
   1a454:	0001a509 	.word	0x0001a509
   1a458:	0001a509 	.word	0x0001a509
   1a45c:	0001a509 	.word	0x0001a509
   1a460:	0001a509 	.word	0x0001a509
   1a464:	0001a509 	.word	0x0001a509
   1a468:	0001a509 	.word	0x0001a509
   1a46c:	0001a509 	.word	0x0001a509
   1a470:	0001a4eb 	.word	0x0001a4eb
  {
    case ATTC_READ_RSP:
    case ATTC_HANDLE_VALUE_IND:
      tagValueUpdate((attEvt_t *) pMsg);
   1a474:	6878      	ldr	r0, [r7, #4]
   1a476:	f7ff fceb 	bl	19e50 <tagValueUpdate>
      break;
   1a47a:	e048      	b.n	1a50e <tagProcMsg+0x32a>

    case ATT_MTU_UPDATE_IND:
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
   1a47c:	687b      	ldr	r3, [r7, #4]
   1a47e:	89db      	ldrh	r3, [r3, #14]
   1a480:	4619      	mov	r1, r3
   1a482:	4828      	ldr	r0, [pc, #160]	; (1a524 <tagProcMsg+0x340>)
   1a484:	f7ff fb3a 	bl	19afc <WsfTrace>
      break;  
   1a488:	e041      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_RESET_CMPL_IND:
      DmSecGenerateEccKeyReq();
   1a48a:	f7f6 fa3f 	bl	1090c <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_RESET_CMPL;
   1a48e:	2301      	movs	r3, #1
   1a490:	73fb      	strb	r3, [r7, #15]
      break;
   1a492:	e03c      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   1a494:	2303      	movs	r3, #3
   1a496:	73fb      	strb	r3, [r7, #15]
      break;
   1a498:	e039      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_ADV_STOP_IND:
      uiEvent = APP_UI_ADV_STOP;
   1a49a:	2304      	movs	r3, #4
   1a49c:	73fb      	strb	r3, [r7, #15]
      break;
   1a49e:	e036      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_CONN_OPEN_IND:
      tagOpen(pMsg);
   1a4a0:	6878      	ldr	r0, [r7, #4]
   1a4a2:	f7ff fc35 	bl	19d10 <tagOpen>
      uiEvent = APP_UI_CONN_OPEN;
   1a4a6:	2308      	movs	r3, #8
   1a4a8:	73fb      	strb	r3, [r7, #15]
      break;
   1a4aa:	e030      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_CONN_CLOSE_IND:
      tagClose(pMsg);
   1a4ac:	6878      	ldr	r0, [r7, #4]
   1a4ae:	f7ff fc47 	bl	19d40 <tagClose>
      uiEvent = APP_UI_CONN_CLOSE;
   1a4b2:	2309      	movs	r3, #9
   1a4b4:	73fb      	strb	r3, [r7, #15]
      break;
   1a4b6:	e02a      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_SEC_PAIR_CMPL_IND:
      tagSecPairCmpl(pMsg);
   1a4b8:	6878      	ldr	r0, [r7, #4]
   1a4ba:	f7ff fc71 	bl	19da0 <tagSecPairCmpl>
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   1a4be:	230a      	movs	r3, #10
   1a4c0:	73fb      	strb	r3, [r7, #15]
      break;
   1a4c2:	e024      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_SEC_PAIR_FAIL_IND:
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   1a4c4:	230b      	movs	r3, #11
   1a4c6:	73fb      	strb	r3, [r7, #15]
      break;
   1a4c8:	e021      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   1a4ca:	230c      	movs	r3, #12
   1a4cc:	73fb      	strb	r3, [r7, #15]
      break;
   1a4ce:	e01e      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   1a4d0:	230d      	movs	r3, #13
   1a4d2:	73fb      	strb	r3, [r7, #15]
      break;
   1a4d4:	e01b      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_SEC_AUTH_REQ_IND:
      AppHandlePasskey(&pMsg->authReq);
   1a4d6:	687b      	ldr	r3, [r7, #4]
   1a4d8:	4618      	mov	r0, r3
   1a4da:	f001 fdc5 	bl	1c068 <AppHandlePasskey>
      break;
   1a4de:	e016      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->cnfInd);
   1a4e0:	687b      	ldr	r3, [r7, #4]
   1a4e2:	4618      	mov	r0, r3
   1a4e4:	f001 fdfc 	bl	1c0e0 <AppHandleNumericComparison>
      break;
   1a4e8:	e011      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_ADV_NEW_ADDR_IND:
      break;

    case TAG_RSSI_TIMER_IND:
      tagProcRssiTimer(pMsg);
   1a4ea:	6878      	ldr	r0, [r7, #4]
   1a4ec:	f7ff fcf0 	bl	19ed0 <tagProcRssiTimer>
      break;
   1a4f0:	e00d      	b.n	1a50e <tagProcMsg+0x32a>

    case DM_CONN_READ_RSSI_IND:
      /* if successful */
      if (pMsg->hdr.status == HCI_SUCCESS)
   1a4f2:	687b      	ldr	r3, [r7, #4]
   1a4f4:	78db      	ldrb	r3, [r3, #3]
   1a4f6:	2b00      	cmp	r3, #0
   1a4f8:	d108      	bne.n	1a50c <tagProcMsg+0x328>
      {
        /* display RSSI value */
        AppUiDisplayRssi(pMsg->readRssi.rssi);
   1a4fa:	687b      	ldr	r3, [r7, #4]
   1a4fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
   1a500:	4618      	mov	r0, r3
   1a502:	f7f9 fb4d 	bl	13ba0 <AppUiDisplayRssi>
      }
      break;
   1a506:	e001      	b.n	1a50c <tagProcMsg+0x328>
          
        #endif
      }
      break;
    default:
      break;
   1a508:	bf00      	nop
   1a50a:	e000      	b.n	1a50e <tagProcMsg+0x32a>
      break;
   1a50c:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   1a50e:	7bfb      	ldrb	r3, [r7, #15]
   1a510:	2b00      	cmp	r3, #0
   1a512:	d003      	beq.n	1a51c <tagProcMsg+0x338>
  {
    AppUiAction(uiEvent);
   1a514:	7bfb      	ldrb	r3, [r7, #15]
   1a516:	4618      	mov	r0, r3
   1a518:	f7f9 fa90 	bl	13a3c <AppUiAction>
  }
}
   1a51c:	bf00      	nop
   1a51e:	3710      	adds	r7, #16
   1a520:	46bd      	mov	sp, r7
   1a522:	bd80      	pop	{r7, pc}
   1a524:	00021c60 	.word	0x00021c60

0001a528 <TagHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TagHandlerInit(wsfHandlerId_t handlerId)
{
   1a528:	b580      	push	{r7, lr}
   1a52a:	b082      	sub	sp, #8
   1a52c:	af00      	add	r7, sp, #0
   1a52e:	4603      	mov	r3, r0
   1a530:	71fb      	strb	r3, [r7, #7]
  APP_TRACE_INFO0("TagHandlerInit");
   1a532:	4819      	ldr	r0, [pc, #100]	; (1a598 <TagHandlerInit+0x70>)
   1a534:	f7ff fae2 	bl	19afc <WsfTrace>

  /* store handler ID */
  tagCb.handlerId = handlerId;
   1a538:	4a18      	ldr	r2, [pc, #96]	; (1a59c <TagHandlerInit+0x74>)
   1a53a:	79fb      	ldrb	r3, [r7, #7]
   1a53c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

  /* initialize control block */
  tagCb.rssiTimer.handlerId = handlerId;
   1a540:	4a16      	ldr	r2, [pc, #88]	; (1a59c <TagHandlerInit+0x74>)
   1a542:	79fb      	ldrb	r3, [r7, #7]
   1a544:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  tagCb.rssiTimer.msg.event = TAG_RSSI_TIMER_IND;
   1a548:	4b14      	ldr	r3, [pc, #80]	; (1a59c <TagHandlerInit+0x74>)
   1a54a:	22a0      	movs	r2, #160	; 0xa0
   1a54c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  tagCb.inProgress = FALSE;
   1a550:	4b12      	ldr	r3, [pc, #72]	; (1a59c <TagHandlerInit+0x74>)
   1a552:	2200      	movs	r2, #0
   1a554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set configuration pointers */
  pAppSlaveCfg = (appSlaveCfg_t *) &tagSlaveCfg;
   1a558:	4b11      	ldr	r3, [pc, #68]	; (1a5a0 <TagHandlerInit+0x78>)
   1a55a:	4a12      	ldr	r2, [pc, #72]	; (1a5a4 <TagHandlerInit+0x7c>)
   1a55c:	601a      	str	r2, [r3, #0]
  pAppAdvCfg = (appAdvCfg_t *) &tagAdvCfg;
   1a55e:	4b12      	ldr	r3, [pc, #72]	; (1a5a8 <TagHandlerInit+0x80>)
   1a560:	4a12      	ldr	r2, [pc, #72]	; (1a5ac <TagHandlerInit+0x84>)
   1a562:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &tagSecCfg;
   1a564:	4b12      	ldr	r3, [pc, #72]	; (1a5b0 <TagHandlerInit+0x88>)
   1a566:	4a13      	ldr	r2, [pc, #76]	; (1a5b4 <TagHandlerInit+0x8c>)
   1a568:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &tagUpdateCfg;
   1a56a:	4b13      	ldr	r3, [pc, #76]	; (1a5b8 <TagHandlerInit+0x90>)
   1a56c:	4a13      	ldr	r2, [pc, #76]	; (1a5bc <TagHandlerInit+0x94>)
   1a56e:	601a      	str	r2, [r3, #0]
  pAppDiscCfg = (appDiscCfg_t *) &tagDiscCfg;
   1a570:	4b13      	ldr	r3, [pc, #76]	; (1a5c0 <TagHandlerInit+0x98>)
   1a572:	4a14      	ldr	r2, [pc, #80]	; (1a5c4 <TagHandlerInit+0x9c>)
   1a574:	601a      	str	r2, [r3, #0]
  pAppCfg = (appCfg_t *) &tagAppCfg;
   1a576:	4b14      	ldr	r3, [pc, #80]	; (1a5c8 <TagHandlerInit+0xa0>)
   1a578:	4a14      	ldr	r2, [pc, #80]	; (1a5cc <TagHandlerInit+0xa4>)
   1a57a:	601a      	str	r2, [r3, #0]

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *)&tagSmpCfg;
   1a57c:	4b14      	ldr	r3, [pc, #80]	; (1a5d0 <TagHandlerInit+0xa8>)
   1a57e:	4a15      	ldr	r2, [pc, #84]	; (1a5d4 <TagHandlerInit+0xac>)
   1a580:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   1a582:	f002 fd13 	bl	1cfac <AppSlaveInit>
  AppDiscInit();
   1a586:	f001 fac9 	bl	1bb1c <AppDiscInit>

  /* Set IRK for the local device */
  DmSecSetLocalIrk(localIrk);
   1a58a:	4813      	ldr	r0, [pc, #76]	; (1a5d8 <TagHandlerInit+0xb0>)
   1a58c:	f7f6 f92e 	bl	107ec <DmSecSetLocalIrk>
}
   1a590:	bf00      	nop
   1a592:	3708      	adds	r7, #8
   1a594:	46bd      	mov	sp, r7
   1a596:	bd80      	pop	{r7, pc}
   1a598:	00021c74 	.word	0x00021c74
   1a59c:	10004f88 	.word	0x10004f88
   1a5a0:	10005d54 	.word	0x10005d54
   1a5a4:	00022b90 	.word	0x00022b90
   1a5a8:	10005d78 	.word	0x10005d78
   1a5ac:	00022b84 	.word	0x00022b84
   1a5b0:	10005d6c 	.word	0x10005d6c
   1a5b4:	00022b94 	.word	0x00022b94
   1a5b8:	10005d50 	.word	0x10005d50
   1a5bc:	00022b9c 	.word	0x00022b9c
   1a5c0:	10005d60 	.word	0x10005d60
   1a5c4:	00022bac 	.word	0x00022bac
   1a5c8:	10005d70 	.word	0x10005d70
   1a5cc:	00022bb8 	.word	0x00022bb8
   1a5d0:	10002ba0 	.word	0x10002ba0
   1a5d4:	00022bb0 	.word	0x00022bb0
   1a5d8:	10002bc4 	.word	0x10002bc4

0001a5dc <TagHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TagHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1a5dc:	b580      	push	{r7, lr}
   1a5de:	b082      	sub	sp, #8
   1a5e0:	af00      	add	r7, sp, #0
   1a5e2:	4603      	mov	r3, r0
   1a5e4:	6039      	str	r1, [r7, #0]
   1a5e6:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1a5e8:	683b      	ldr	r3, [r7, #0]
   1a5ea:	2b00      	cmp	r3, #0
   1a5ec:	d01d      	beq.n	1a62a <TagHandler+0x4e>
  {
    APP_TRACE_INFO1("Tag got evt %d", pMsg->event);
   1a5ee:	683b      	ldr	r3, [r7, #0]
   1a5f0:	789b      	ldrb	r3, [r3, #2]
   1a5f2:	4619      	mov	r1, r3
   1a5f4:	480f      	ldr	r0, [pc, #60]	; (1a634 <TagHandler+0x58>)
   1a5f6:	f7ff fa81 	bl	19afc <WsfTrace>

    /* process ATT messages */
    if (pMsg->event <= ATT_CBACK_END)
   1a5fa:	683b      	ldr	r3, [r7, #0]
   1a5fc:	789b      	ldrb	r3, [r3, #2]
   1a5fe:	2b11      	cmp	r3, #17
   1a600:	d803      	bhi.n	1a60a <TagHandler+0x2e>
    {
      /* process discovery-related ATT messages */
      AppDiscProcAttMsg((attEvt_t *) pMsg);
   1a602:	6838      	ldr	r0, [r7, #0]
   1a604:	f001 f9be 	bl	1b984 <AppDiscProcAttMsg>
   1a608:	e00c      	b.n	1a624 <TagHandler+0x48>
    }
    /* process DM messages */
    else if (pMsg->event <= DM_CBACK_END)
   1a60a:	683b      	ldr	r3, [r7, #0]
   1a60c:	789b      	ldrb	r3, [r3, #2]
   1a60e:	2b55      	cmp	r3, #85	; 0x55
   1a610:	d808      	bhi.n	1a624 <TagHandler+0x48>
    {
      /* process advertising and connection-related messages */
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   1a612:	6838      	ldr	r0, [r7, #0]
   1a614:	f002 fd0a 	bl	1d02c <AppSlaveProcDmMsg>

      /* process security-related messages */
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   1a618:	6838      	ldr	r0, [r7, #0]
   1a61a:	f002 ffb5 	bl	1d588 <AppSlaveSecProcDmMsg>

      /* process discovery-related messages */
      AppDiscProcDmMsg((dmEvt_t *) pMsg);
   1a61e:	6838      	ldr	r0, [r7, #0]
   1a620:	f001 f982 	bl	1b928 <AppDiscProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    tagProcMsg((dmEvt_t *) pMsg);
   1a624:	6838      	ldr	r0, [r7, #0]
   1a626:	f7ff fddd 	bl	1a1e4 <tagProcMsg>
  }
}
   1a62a:	bf00      	nop
   1a62c:	3708      	adds	r7, #8
   1a62e:	46bd      	mov	sp, r7
   1a630:	bd80      	pop	{r7, pc}
   1a632:	bf00      	nop
   1a634:	00021c84 	.word	0x00021c84

0001a638 <TagStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TagStart(void)
{
   1a638:	b580      	push	{r7, lr}
   1a63a:	af00      	add	r7, sp, #0
  /* Register for stack callbacks */
  DmRegister(tagDmCback);
   1a63c:	4811      	ldr	r0, [pc, #68]	; (1a684 <TagStart+0x4c>)
   1a63e:	f7f5 fd17 	bl	10070 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, tagDmCback);
   1a642:	4910      	ldr	r1, [pc, #64]	; (1a684 <TagStart+0x4c>)
   1a644:	2003      	movs	r0, #3
   1a646:	f7f5 fa07 	bl	fa58 <DmConnRegister>
  AttRegister(tagAttCback);
   1a64a:	480f      	ldr	r0, [pc, #60]	; (1a688 <TagStart+0x50>)
   1a64c:	f7f2 f80e 	bl	c66c <AttRegister>
  AttConnRegister(AppServerConnCback);
   1a650:	480e      	ldr	r0, [pc, #56]	; (1a68c <TagStart+0x54>)
   1a652:	f7f2 f825 	bl	c6a0 <AttConnRegister>
  AttsCccRegister(TAG_NUM_CCC_IDX, (attsCccSet_t *) tagCccSet, tagCccCback);
   1a656:	4a0e      	ldr	r2, [pc, #56]	; (1a690 <TagStart+0x58>)
   1a658:	490e      	ldr	r1, [pc, #56]	; (1a694 <TagStart+0x5c>)
   1a65a:	2001      	movs	r0, #1
   1a65c:	f7f3 f806 	bl	d66c <AttsCccRegister>

  /* Register for app framework button callbacks */
  AppUiBtnRegister(tagBtnCback);
   1a660:	480d      	ldr	r0, [pc, #52]	; (1a698 <TagStart+0x60>)
   1a662:	f7f9 fac1 	bl	13be8 <AppUiBtnRegister>

  /* Register for app framework discovery callbacks */
  AppDiscRegister(tagDiscCback);
   1a666:	480d      	ldr	r0, [pc, #52]	; (1a69c <TagStart+0x64>)
   1a668:	f001 fa7a 	bl	1bb60 <AppDiscRegister>

  /* Initialize attribute server database */
  SvcCoreAddGroup();
   1a66c:	f000 ff8c 	bl	1b588 <SvcCoreAddGroup>
  SvcPxCbackRegister(NULL, tagIasWriteCback);
   1a670:	490b      	ldr	r1, [pc, #44]	; (1a6a0 <TagStart+0x68>)
   1a672:	2000      	movs	r0, #0
   1a674:	f000 ffc0 	bl	1b5f8 <SvcPxCbackRegister>
  SvcPxAddGroup();
   1a678:	f000 ffb4 	bl	1b5e4 <SvcPxAddGroup>

  /* Reset the device */
  DmDevReset();
   1a67c:	f7f5 fc98 	bl	ffb0 <DmDevReset>
}
   1a680:	bf00      	nop
   1a682:	bd80      	pop	{r7, pc}
   1a684:	00019b91 	.word	0x00019b91
   1a688:	00019bf5 	.word	0x00019bf5
   1a68c:	0001c2b3 	.word	0x0001c2b3
   1a690:	00019c55 	.word	0x00019c55
   1a694:	00022be4 	.word	0x00022be4
   1a698:	00019f05 	.word	0x00019f05
   1a69c:	0001a0a5 	.word	0x0001a0a5
   1a6a0:	00019cbd 	.word	0x00019cbd

0001a6a4 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1a6a4:	b580      	push	{r7, lr}
   1a6a6:	b088      	sub	sp, #32
   1a6a8:	af00      	add	r7, sp, #0
   1a6aa:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1a6ac:	f107 030c 	add.w	r3, r7, #12
   1a6b0:	4618      	mov	r0, r3
   1a6b2:	f005 f81d 	bl	1f6f0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1a6b6:	68fb      	ldr	r3, [r7, #12]
   1a6b8:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1a6ba:	69fb      	ldr	r3, [r7, #28]
   1a6bc:	4a07      	ldr	r2, [pc, #28]	; (1a6dc <am_util_delay_ms+0x38>)
   1a6be:	fba2 2303 	umull	r2, r3, r2, r3
   1a6c2:	099b      	lsrs	r3, r3, #6
   1a6c4:	687a      	ldr	r2, [r7, #4]
   1a6c6:	fb02 f303 	mul.w	r3, r2, r3
   1a6ca:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1a6cc:	69b8      	ldr	r0, [r7, #24]
   1a6ce:	f005 fa7b 	bl	1fbc8 <am_hal_flash_delay>
}
   1a6d2:	bf00      	nop
   1a6d4:	3720      	adds	r7, #32
   1a6d6:	46bd      	mov	sp, r7
   1a6d8:	bd80      	pop	{r7, pc}
   1a6da:	bf00      	nop
   1a6dc:	057619f1 	.word	0x057619f1

0001a6e0 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1a6e0:	b580      	push	{r7, lr}
   1a6e2:	b088      	sub	sp, #32
   1a6e4:	af00      	add	r7, sp, #0
   1a6e6:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1a6e8:	f107 030c 	add.w	r3, r7, #12
   1a6ec:	4618      	mov	r0, r3
   1a6ee:	f004 ffff 	bl	1f6f0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1a6f2:	68fb      	ldr	r3, [r7, #12]
   1a6f4:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1a6f6:	69fb      	ldr	r3, [r7, #28]
   1a6f8:	4a07      	ldr	r2, [pc, #28]	; (1a718 <am_util_delay_us+0x38>)
   1a6fa:	fba2 2303 	umull	r2, r3, r2, r3
   1a6fe:	0c9b      	lsrs	r3, r3, #18
   1a700:	687a      	ldr	r2, [r7, #4]
   1a702:	fb02 f303 	mul.w	r3, r2, r3
   1a706:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1a708:	69b8      	ldr	r0, [r7, #24]
   1a70a:	f005 fa5d 	bl	1fbc8 <am_hal_flash_delay>
}
   1a70e:	bf00      	nop
   1a710:	3720      	adds	r7, #32
   1a712:	46bd      	mov	sp, r7
   1a714:	bd80      	pop	{r7, pc}
   1a716:	bf00      	nop
   1a718:	165e9f81 	.word	0x165e9f81

0001a71c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1a71c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1a71e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1a722:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1a724:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1a728:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1a72c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1a730:	f000 f80a 	bl	1a748 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1a734:	bd01      	pop	{r0, pc}
}
   1a736:	bf00      	nop
   1a738:	4618      	mov	r0, r3

0001a73a <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1a73a:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1a73c:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1a73e:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1a740:	4770      	bx	lr
}
   1a742:	bf00      	nop
   1a744:	4618      	mov	r0, r3
	...

0001a748 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1a748:	b580      	push	{r7, lr}
   1a74a:	b096      	sub	sp, #88	; 0x58
   1a74c:	af00      	add	r7, sp, #0
   1a74e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1a750:	f107 030c 	add.w	r3, r7, #12
   1a754:	2200      	movs	r2, #0
   1a756:	601a      	str	r2, [r3, #0]
   1a758:	605a      	str	r2, [r3, #4]
   1a75a:	609a      	str	r2, [r3, #8]
   1a75c:	60da      	str	r2, [r3, #12]
   1a75e:	611a      	str	r2, [r3, #16]
   1a760:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   1a762:	2300      	movs	r3, #0
   1a764:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1a766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a768:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1a76a:	4b2e      	ldr	r3, [pc, #184]	; (1a824 <am_util_faultisr_collect_data+0xdc>)
   1a76c:	681b      	ldr	r3, [r3, #0]
   1a76e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1a770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a772:	b2db      	uxtb	r3, r3
   1a774:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1a778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a77a:	0a1b      	lsrs	r3, r3, #8
   1a77c:	b2db      	uxtb	r3, r3
   1a77e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1a782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a784:	0c1b      	lsrs	r3, r3, #16
   1a786:	b29b      	uxth	r3, r3
   1a788:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1a78c:	4b26      	ldr	r3, [pc, #152]	; (1a828 <am_util_faultisr_collect_data+0xe0>)
   1a78e:	681b      	ldr	r3, [r3, #0]
   1a790:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1a792:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   1a796:	b2db      	uxtb	r3, r3
   1a798:	f003 0302 	and.w	r3, r3, #2
   1a79c:	2b00      	cmp	r3, #0
   1a79e:	d005      	beq.n	1a7ac <am_util_faultisr_collect_data+0x64>
   1a7a0:	6879      	ldr	r1, [r7, #4]
   1a7a2:	2006      	movs	r0, #6
   1a7a4:	f7ff ffc9 	bl	1a73a <getStackedReg>
   1a7a8:	4603      	mov	r3, r0
   1a7aa:	e001      	b.n	1a7b0 <am_util_faultisr_collect_data+0x68>
   1a7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a7b0:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1a7b2:	6879      	ldr	r1, [r7, #4]
   1a7b4:	2000      	movs	r0, #0
   1a7b6:	f7ff ffc0 	bl	1a73a <getStackedReg>
   1a7ba:	4603      	mov	r3, r0
   1a7bc:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1a7be:	6879      	ldr	r1, [r7, #4]
   1a7c0:	2001      	movs	r0, #1
   1a7c2:	f7ff ffba 	bl	1a73a <getStackedReg>
   1a7c6:	4603      	mov	r3, r0
   1a7c8:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1a7ca:	6879      	ldr	r1, [r7, #4]
   1a7cc:	2002      	movs	r0, #2
   1a7ce:	f7ff ffb4 	bl	1a73a <getStackedReg>
   1a7d2:	4603      	mov	r3, r0
   1a7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1a7d6:	6879      	ldr	r1, [r7, #4]
   1a7d8:	2003      	movs	r0, #3
   1a7da:	f7ff ffae 	bl	1a73a <getStackedReg>
   1a7de:	4603      	mov	r3, r0
   1a7e0:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1a7e2:	6879      	ldr	r1, [r7, #4]
   1a7e4:	2004      	movs	r0, #4
   1a7e6:	f7ff ffa8 	bl	1a73a <getStackedReg>
   1a7ea:	4603      	mov	r3, r0
   1a7ec:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1a7ee:	6879      	ldr	r1, [r7, #4]
   1a7f0:	2005      	movs	r0, #5
   1a7f2:	f7ff ffa2 	bl	1a73a <getStackedReg>
   1a7f6:	4603      	mov	r3, r0
   1a7f8:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1a7fa:	6879      	ldr	r1, [r7, #4]
   1a7fc:	2006      	movs	r0, #6
   1a7fe:	f7ff ff9c 	bl	1a73a <getStackedReg>
   1a802:	4603      	mov	r3, r0
   1a804:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1a806:	6879      	ldr	r1, [r7, #4]
   1a808:	2007      	movs	r0, #7
   1a80a:	f7ff ff96 	bl	1a73a <getStackedReg>
   1a80e:	4603      	mov	r3, r0
   1a810:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1a812:	f107 030c 	add.w	r3, r7, #12
   1a816:	4619      	mov	r1, r3
   1a818:	2002      	movs	r0, #2
   1a81a:	f005 fbe7 	bl	1ffec <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
   1a81e:	2300      	movs	r3, #0
   1a820:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1a822:	e7fe      	b.n	1a822 <am_util_faultisr_collect_data+0xda>
   1a824:	e000ed28 	.word	0xe000ed28
   1a828:	e000ed38 	.word	0xe000ed38

0001a82c <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   1a82c:	b480      	push	{r7}
   1a82e:	b083      	sub	sp, #12
   1a830:	af00      	add	r7, sp, #0
   1a832:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   1a834:	4a04      	ldr	r2, [pc, #16]	; (1a848 <am_util_stdio_printf_init+0x1c>)
   1a836:	687b      	ldr	r3, [r7, #4]
   1a838:	6013      	str	r3, [r2, #0]
}
   1a83a:	bf00      	nop
   1a83c:	370c      	adds	r7, #12
   1a83e:	46bd      	mov	sp, r7
   1a840:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a844:	4770      	bx	lr
   1a846:	bf00      	nop
   1a848:	10005d48 	.word	0x10005d48

0001a84c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   1a84c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1a850:	b096      	sub	sp, #88	; 0x58
   1a852:	af00      	add	r7, sp, #0
   1a854:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   1a858:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1a85c:	0025      	movs	r5, r4
   1a85e:	2600      	movs	r6, #0
   1a860:	ea55 0306 	orrs.w	r3, r5, r6
   1a864:	f000 80a0 	beq.w	1a9a8 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1a868:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1a86c:	0862      	lsrs	r2, r4, #1
   1a86e:	ea4f 0133 	mov.w	r1, r3, rrx
   1a872:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1a876:	ea4f 0893 	mov.w	r8, r3, lsr #2
   1a87a:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
   1a87e:	ea4f 0994 	mov.w	r9, r4, lsr #2
   1a882:	eb11 0308 	adds.w	r3, r1, r8
   1a886:	eb42 0409 	adc.w	r4, r2, r9
   1a88a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
   1a88e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a892:	ea4f 1a13 	mov.w	sl, r3, lsr #4
   1a896:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
   1a89a:	ea4f 1b14 	mov.w	fp, r4, lsr #4
   1a89e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a8a2:	eb13 030a 	adds.w	r3, r3, sl
   1a8a6:	eb44 040b 	adc.w	r4, r4, fp
   1a8aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
   1a8ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a8b2:	0a1a      	lsrs	r2, r3, #8
   1a8b4:	62ba      	str	r2, [r7, #40]	; 0x28
   1a8b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a8b8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   1a8bc:	62ba      	str	r2, [r7, #40]	; 0x28
   1a8be:	0a23      	lsrs	r3, r4, #8
   1a8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a8c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a8c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   1a8ca:	18c9      	adds	r1, r1, r3
   1a8cc:	eb42 0204 	adc.w	r2, r2, r4
   1a8d0:	460b      	mov	r3, r1
   1a8d2:	4614      	mov	r4, r2
   1a8d4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
   1a8d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a8dc:	0c1a      	lsrs	r2, r3, #16
   1a8de:	623a      	str	r2, [r7, #32]
   1a8e0:	6a3a      	ldr	r2, [r7, #32]
   1a8e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   1a8e6:	623a      	str	r2, [r7, #32]
   1a8e8:	0c23      	lsrs	r3, r4, #16
   1a8ea:	627b      	str	r3, [r7, #36]	; 0x24
   1a8ec:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a8f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
   1a8f4:	18c9      	adds	r1, r1, r3
   1a8f6:	eb42 0204 	adc.w	r2, r2, r4
   1a8fa:	460b      	mov	r3, r1
   1a8fc:	4614      	mov	r4, r2
   1a8fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
   1a902:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a906:	0023      	movs	r3, r4
   1a908:	603b      	str	r3, [r7, #0]
   1a90a:	2300      	movs	r3, #0
   1a90c:	607b      	str	r3, [r7, #4]
   1a90e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a912:	e9d7 1200 	ldrd	r1, r2, [r7]
   1a916:	18c9      	adds	r1, r1, r3
   1a918:	eb42 0204 	adc.w	r2, r2, r4
   1a91c:	460b      	mov	r3, r1
   1a91e:	4614      	mov	r4, r2
   1a920:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
   1a924:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a928:	08da      	lsrs	r2, r3, #3
   1a92a:	613a      	str	r2, [r7, #16]
   1a92c:	693a      	ldr	r2, [r7, #16]
   1a92e:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
   1a932:	613a      	str	r2, [r7, #16]
   1a934:	08e3      	lsrs	r3, r4, #3
   1a936:	617b      	str	r3, [r7, #20]
   1a938:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   1a93c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
   1a940:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
   1a944:	460b      	mov	r3, r1
   1a946:	4614      	mov	r4, r2
   1a948:	00a0      	lsls	r0, r4, #2
   1a94a:	60f8      	str	r0, [r7, #12]
   1a94c:	68f8      	ldr	r0, [r7, #12]
   1a94e:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   1a952:	60f8      	str	r0, [r7, #12]
   1a954:	009b      	lsls	r3, r3, #2
   1a956:	60bb      	str	r3, [r7, #8]
   1a958:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   1a95c:	185b      	adds	r3, r3, r1
   1a95e:	eb44 0402 	adc.w	r4, r4, r2
   1a962:	18db      	adds	r3, r3, r3
   1a964:	eb44 0404 	adc.w	r4, r4, r4
   1a968:	4619      	mov	r1, r3
   1a96a:	4622      	mov	r2, r4
   1a96c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1a970:	1a5b      	subs	r3, r3, r1
   1a972:	eb64 0402 	sbc.w	r4, r4, r2
   1a976:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
   1a97a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
   1a97e:	3306      	adds	r3, #6
   1a980:	f144 0400 	adc.w	r4, r4, #0
   1a984:	091a      	lsrs	r2, r3, #4
   1a986:	61ba      	str	r2, [r7, #24]
   1a988:	69ba      	ldr	r2, [r7, #24]
   1a98a:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
   1a98e:	61ba      	str	r2, [r7, #24]
   1a990:	0923      	lsrs	r3, r4, #4
   1a992:	61fb      	str	r3, [r7, #28]
   1a994:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1a998:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
   1a99c:	18c9      	adds	r1, r1, r3
   1a99e:	eb42 0204 	adc.w	r2, r2, r4
   1a9a2:	460b      	mov	r3, r1
   1a9a4:	4614      	mov	r4, r2
   1a9a6:	e029      	b.n	1a9fc <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   1a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9aa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1a9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a9ae:	085a      	lsrs	r2, r3, #1
   1a9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a9b2:	089b      	lsrs	r3, r3, #2
   1a9b4:	4413      	add	r3, r2
   1a9b6:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
   1a9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a9ba:	091b      	lsrs	r3, r3, #4
   1a9bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9be:	4413      	add	r3, r2
   1a9c0:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
   1a9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a9c4:	0a1b      	lsrs	r3, r3, #8
   1a9c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9c8:	4413      	add	r3, r2
   1a9ca:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
   1a9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a9ce:	0c1b      	lsrs	r3, r3, #16
   1a9d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9d2:	4413      	add	r3, r2
   1a9d4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
   1a9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a9d8:	08db      	lsrs	r3, r3, #3
   1a9da:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
   1a9dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9de:	4613      	mov	r3, r2
   1a9e0:	009b      	lsls	r3, r3, #2
   1a9e2:	4413      	add	r3, r2
   1a9e4:	005b      	lsls	r3, r3, #1
   1a9e6:	461a      	mov	r2, r3
   1a9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a9ea:	1a9b      	subs	r3, r3, r2
   1a9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1a9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a9f0:	3306      	adds	r3, #6
   1a9f2:	091a      	lsrs	r2, r3, #4
   1a9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a9f6:	4413      	add	r3, r2
   1a9f8:	f04f 0400 	mov.w	r4, #0
    }
}
   1a9fc:	4618      	mov	r0, r3
   1a9fe:	4621      	mov	r1, r4
   1aa00:	3758      	adds	r7, #88	; 0x58
   1aa02:	46bd      	mov	sp, r7
   1aa04:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1aa08:	4770      	bx	lr

0001aa0a <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   1aa0a:	b590      	push	{r4, r7, lr}
   1aa0c:	b085      	sub	sp, #20
   1aa0e:	af00      	add	r7, sp, #0
   1aa10:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   1aa14:	683a      	ldr	r2, [r7, #0]
   1aa16:	687b      	ldr	r3, [r7, #4]
   1aa18:	4313      	orrs	r3, r2
   1aa1a:	2b00      	cmp	r3, #0
   1aa1c:	bf0c      	ite	eq
   1aa1e:	2301      	moveq	r3, #1
   1aa20:	2300      	movne	r3, #0
   1aa22:	b2db      	uxtb	r3, r3
   1aa24:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   1aa26:	e008      	b.n	1aa3a <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   1aa28:	e9d7 0100 	ldrd	r0, r1, [r7]
   1aa2c:	f7ff ff0e 	bl	1a84c <divu64_10>
   1aa30:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   1aa34:	68fb      	ldr	r3, [r7, #12]
   1aa36:	3301      	adds	r3, #1
   1aa38:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   1aa3a:	e9d7 3400 	ldrd	r3, r4, [r7]
   1aa3e:	4323      	orrs	r3, r4
   1aa40:	d1f2      	bne.n	1aa28 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
   1aa42:	68fb      	ldr	r3, [r7, #12]
}
   1aa44:	4618      	mov	r0, r3
   1aa46:	3714      	adds	r7, #20
   1aa48:	46bd      	mov	sp, r7
   1aa4a:	bd90      	pop	{r4, r7, pc}

0001aa4c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   1aa4c:	b590      	push	{r4, r7, lr}
   1aa4e:	b083      	sub	sp, #12
   1aa50:	af00      	add	r7, sp, #0
   1aa52:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   1aa56:	e9d7 3400 	ldrd	r3, r4, [r7]
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	f174 0300 	sbcs.w	r3, r4, #0
   1aa60:	da06      	bge.n	1aa70 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   1aa62:	e9d7 3400 	ldrd	r3, r4, [r7]
   1aa66:	425b      	negs	r3, r3
   1aa68:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   1aa6c:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   1aa70:	e9d7 3400 	ldrd	r3, r4, [r7]
   1aa74:	4618      	mov	r0, r3
   1aa76:	4621      	mov	r1, r4
   1aa78:	f7ff ffc7 	bl	1aa0a <ndigits_in_u64>
   1aa7c:	4603      	mov	r3, r0
}
   1aa7e:	4618      	mov	r0, r3
   1aa80:	370c      	adds	r7, #12
   1aa82:	46bd      	mov	sp, r7
   1aa84:	bd90      	pop	{r4, r7, pc}

0001aa86 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   1aa86:	b490      	push	{r4, r7}
   1aa88:	b084      	sub	sp, #16
   1aa8a:	af00      	add	r7, sp, #0
   1aa8c:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   1aa90:	6839      	ldr	r1, [r7, #0]
   1aa92:	687a      	ldr	r2, [r7, #4]
   1aa94:	430a      	orrs	r2, r1
   1aa96:	2a00      	cmp	r2, #0
   1aa98:	bf0c      	ite	eq
   1aa9a:	2201      	moveq	r2, #1
   1aa9c:	2200      	movne	r2, #0
   1aa9e:	b2d2      	uxtb	r2, r2
   1aaa0:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
   1aaa2:	e00a      	b.n	1aaba <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
   1aaa4:	e9d7 1200 	ldrd	r1, r2, [r7]
   1aaa8:	090b      	lsrs	r3, r1, #4
   1aaaa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   1aaae:	0914      	lsrs	r4, r2, #4
   1aab0:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
   1aab4:	68fa      	ldr	r2, [r7, #12]
   1aab6:	3201      	adds	r2, #1
   1aab8:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
   1aaba:	e9d7 1200 	ldrd	r1, r2, [r7]
   1aabe:	430a      	orrs	r2, r1
   1aac0:	d1f0      	bne.n	1aaa4 <ndigits_in_hex+0x1e>
    }

    return iDigits;
   1aac2:	68fb      	ldr	r3, [r7, #12]
}
   1aac4:	4618      	mov	r0, r3
   1aac6:	3710      	adds	r7, #16
   1aac8:	46bd      	mov	sp, r7
   1aaca:	bc90      	pop	{r4, r7}
   1aacc:	4770      	bx	lr

0001aace <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   1aace:	b480      	push	{r7}
   1aad0:	b087      	sub	sp, #28
   1aad2:	af00      	add	r7, sp, #0
   1aad4:	6078      	str	r0, [r7, #4]
   1aad6:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   1aad8:	2300      	movs	r3, #0
   1aada:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   1aadc:	2300      	movs	r3, #0
   1aade:	613b      	str	r3, [r7, #16]
   1aae0:	2300      	movs	r3, #0
   1aae2:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   1aae4:	687b      	ldr	r3, [r7, #4]
   1aae6:	781b      	ldrb	r3, [r3, #0]
   1aae8:	2b2d      	cmp	r3, #45	; 0x2d
   1aaea:	d11b      	bne.n	1ab24 <decstr_to_int+0x56>
    {
        bNeg = true;
   1aaec:	2301      	movs	r3, #1
   1aaee:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   1aaf0:	687b      	ldr	r3, [r7, #4]
   1aaf2:	3301      	adds	r3, #1
   1aaf4:	607b      	str	r3, [r7, #4]
        uCnt++;
   1aaf6:	68fb      	ldr	r3, [r7, #12]
   1aaf8:	3301      	adds	r3, #1
   1aafa:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1aafc:	e012      	b.n	1ab24 <decstr_to_int+0x56>
    {
        ++uCnt;
   1aafe:	68fb      	ldr	r3, [r7, #12]
   1ab00:	3301      	adds	r3, #1
   1ab02:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   1ab04:	693a      	ldr	r2, [r7, #16]
   1ab06:	4613      	mov	r3, r2
   1ab08:	009b      	lsls	r3, r3, #2
   1ab0a:	4413      	add	r3, r2
   1ab0c:	005b      	lsls	r3, r3, #1
   1ab0e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   1ab10:	687b      	ldr	r3, [r7, #4]
   1ab12:	781b      	ldrb	r3, [r3, #0]
   1ab14:	461a      	mov	r2, r3
   1ab16:	693b      	ldr	r3, [r7, #16]
   1ab18:	4413      	add	r3, r2
   1ab1a:	3b30      	subs	r3, #48	; 0x30
   1ab1c:	613b      	str	r3, [r7, #16]
        pcStr++;
   1ab1e:	687b      	ldr	r3, [r7, #4]
   1ab20:	3301      	adds	r3, #1
   1ab22:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1ab24:	687b      	ldr	r3, [r7, #4]
   1ab26:	781b      	ldrb	r3, [r3, #0]
   1ab28:	2b2f      	cmp	r3, #47	; 0x2f
   1ab2a:	d903      	bls.n	1ab34 <decstr_to_int+0x66>
   1ab2c:	687b      	ldr	r3, [r7, #4]
   1ab2e:	781b      	ldrb	r3, [r3, #0]
   1ab30:	2b39      	cmp	r3, #57	; 0x39
   1ab32:	d9e4      	bls.n	1aafe <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   1ab34:	683b      	ldr	r3, [r7, #0]
   1ab36:	2b00      	cmp	r3, #0
   1ab38:	d002      	beq.n	1ab40 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   1ab3a:	683b      	ldr	r3, [r7, #0]
   1ab3c:	68fa      	ldr	r2, [r7, #12]
   1ab3e:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   1ab40:	7dfb      	ldrb	r3, [r7, #23]
   1ab42:	2b00      	cmp	r3, #0
   1ab44:	d002      	beq.n	1ab4c <decstr_to_int+0x7e>
   1ab46:	693b      	ldr	r3, [r7, #16]
   1ab48:	425b      	negs	r3, r3
   1ab4a:	e000      	b.n	1ab4e <decstr_to_int+0x80>
   1ab4c:	693b      	ldr	r3, [r7, #16]
}
   1ab4e:	4618      	mov	r0, r3
   1ab50:	371c      	adds	r7, #28
   1ab52:	46bd      	mov	sp, r7
   1ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ab58:	4770      	bx	lr

0001ab5a <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   1ab5a:	b590      	push	{r4, r7, lr}
   1ab5c:	b091      	sub	sp, #68	; 0x44
   1ab5e:	af00      	add	r7, sp, #0
   1ab60:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1ab64:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   1ab66:	2300      	movs	r3, #0
   1ab68:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ab6a:	2300      	movs	r3, #0
   1ab6c:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   1ab6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1ab72:	f7ff fe6b 	bl	1a84c <divu64_10>
   1ab76:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   1ab7a:	68b9      	ldr	r1, [r7, #8]
   1ab7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab7e:	4613      	mov	r3, r2
   1ab80:	009b      	lsls	r3, r3, #2
   1ab82:	4413      	add	r3, r2
   1ab84:	005b      	lsls	r3, r3, #1
   1ab86:	1acb      	subs	r3, r1, r3
   1ab88:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   1ab8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ab8c:	1c5a      	adds	r2, r3, #1
   1ab8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   1ab90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ab92:	b2d2      	uxtb	r2, r2
   1ab94:	3230      	adds	r2, #48	; 0x30
   1ab96:	b2d2      	uxtb	r2, r2
   1ab98:	f107 0140 	add.w	r1, r7, #64	; 0x40
   1ab9c:	440b      	add	r3, r1
   1ab9e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   1aba2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1aba6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
   1abaa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   1abae:	4323      	orrs	r3, r4
   1abb0:	d1dd      	bne.n	1ab6e <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1abb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1abb4:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1abb6:	687b      	ldr	r3, [r7, #4]
   1abb8:	2b00      	cmp	r3, #0
   1abba:	d011      	beq.n	1abe0 <uint64_to_str+0x86>
    {
        while ( ix-- )
   1abbc:	e008      	b.n	1abd0 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
   1abbe:	687b      	ldr	r3, [r7, #4]
   1abc0:	1c5a      	adds	r2, r3, #1
   1abc2:	607a      	str	r2, [r7, #4]
   1abc4:	f107 0110 	add.w	r1, r7, #16
   1abc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1abca:	440a      	add	r2, r1
   1abcc:	7812      	ldrb	r2, [r2, #0]
   1abce:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   1abd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1abd2:	1e5a      	subs	r2, r3, #1
   1abd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   1abd6:	2b00      	cmp	r3, #0
   1abd8:	d1f1      	bne.n	1abbe <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1abda:	687b      	ldr	r3, [r7, #4]
   1abdc:	2200      	movs	r2, #0
   1abde:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   1abe2:	4618      	mov	r0, r3
   1abe4:	3744      	adds	r7, #68	; 0x44
   1abe6:	46bd      	mov	sp, r7
   1abe8:	bd90      	pop	{r4, r7, pc}

0001abea <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   1abea:	b4b0      	push	{r4, r5, r7}
   1abec:	b08d      	sub	sp, #52	; 0x34
   1abee:	af00      	add	r7, sp, #0
   1abf0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1abf4:	607a      	str	r2, [r7, #4]
   1abf6:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   1abf8:	2300      	movs	r3, #0
   1abfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   1abfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1ac00:	4313      	orrs	r3, r2
   1ac02:	d131      	bne.n	1ac68 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
   1ac04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac06:	1c5a      	adds	r2, r3, #1
   1ac08:	62fa      	str	r2, [r7, #44]	; 0x2c
   1ac0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1ac0e:	4413      	add	r3, r2
   1ac10:	2230      	movs	r2, #48	; 0x30
   1ac12:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   1ac16:	e027      	b.n	1ac68 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
   1ac18:	7a3b      	ldrb	r3, [r7, #8]
   1ac1a:	f003 030f 	and.w	r3, r3, #15
   1ac1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   1ac22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1ac26:	2b09      	cmp	r3, #9
   1ac28:	d90a      	bls.n	1ac40 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   1ac2a:	78fb      	ldrb	r3, [r7, #3]
   1ac2c:	2b00      	cmp	r3, #0
   1ac2e:	d001      	beq.n	1ac34 <uint64_to_hexstr+0x4a>
   1ac30:	2227      	movs	r2, #39	; 0x27
   1ac32:	e000      	b.n	1ac36 <uint64_to_hexstr+0x4c>
   1ac34:	2207      	movs	r2, #7
   1ac36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1ac3a:	4413      	add	r3, r2
   1ac3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   1ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac42:	1c5a      	adds	r2, r3, #1
   1ac44:	62fa      	str	r2, [r7, #44]	; 0x2c
   1ac46:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   1ac4a:	3230      	adds	r2, #48	; 0x30
   1ac4c:	b2d2      	uxtb	r2, r2
   1ac4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1ac52:	440b      	add	r3, r1
   1ac54:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   1ac58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1ac5c:	0914      	lsrs	r4, r2, #4
   1ac5e:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
   1ac62:	091d      	lsrs	r5, r3, #4
   1ac64:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
   1ac68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1ac6c:	4313      	orrs	r3, r2
   1ac6e:	d1d3      	bne.n	1ac18 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac72:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   1ac74:	687b      	ldr	r3, [r7, #4]
   1ac76:	2b00      	cmp	r3, #0
   1ac78:	d011      	beq.n	1ac9e <uint64_to_hexstr+0xb4>
    {
        while (ix--)
   1ac7a:	e008      	b.n	1ac8e <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
   1ac7c:	687b      	ldr	r3, [r7, #4]
   1ac7e:	1c5a      	adds	r2, r3, #1
   1ac80:	607a      	str	r2, [r7, #4]
   1ac82:	f107 0110 	add.w	r1, r7, #16
   1ac86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ac88:	440a      	add	r2, r1
   1ac8a:	7812      	ldrb	r2, [r2, #0]
   1ac8c:	701a      	strb	r2, [r3, #0]
        while (ix--)
   1ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac90:	1e5a      	subs	r2, r3, #1
   1ac92:	62fa      	str	r2, [r7, #44]	; 0x2c
   1ac94:	2b00      	cmp	r3, #0
   1ac96:	d1f1      	bne.n	1ac7c <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   1ac98:	687b      	ldr	r3, [r7, #4]
   1ac9a:	2200      	movs	r2, #0
   1ac9c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1aca0:	4618      	mov	r0, r3
   1aca2:	3734      	adds	r7, #52	; 0x34
   1aca4:	46bd      	mov	sp, r7
   1aca6:	bcb0      	pop	{r4, r5, r7}
   1aca8:	4770      	bx	lr

0001acaa <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   1acaa:	b480      	push	{r7}
   1acac:	b085      	sub	sp, #20
   1acae:	af00      	add	r7, sp, #0
   1acb0:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   1acb2:	2300      	movs	r3, #0
   1acb4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   1acb6:	687b      	ldr	r3, [r7, #4]
   1acb8:	2b00      	cmp	r3, #0
   1acba:	d104      	bne.n	1acc6 <simple_strlen+0x1c>
    {
        return ui32RetVal;
   1acbc:	68fb      	ldr	r3, [r7, #12]
   1acbe:	e009      	b.n	1acd4 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   1acc0:	68fb      	ldr	r3, [r7, #12]
   1acc2:	3301      	adds	r3, #1
   1acc4:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
   1acc6:	687b      	ldr	r3, [r7, #4]
   1acc8:	1c5a      	adds	r2, r3, #1
   1acca:	607a      	str	r2, [r7, #4]
   1accc:	781b      	ldrb	r3, [r3, #0]
   1acce:	2b00      	cmp	r3, #0
   1acd0:	d1f6      	bne.n	1acc0 <simple_strlen+0x16>
    }
    return ui32RetVal;
   1acd2:	68fb      	ldr	r3, [r7, #12]
}
   1acd4:	4618      	mov	r0, r3
   1acd6:	3714      	adds	r7, #20
   1acd8:	46bd      	mov	sp, r7
   1acda:	f85d 7b04 	ldr.w	r7, [sp], #4
   1acde:	4770      	bx	lr

0001ace0 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   1ace0:	b480      	push	{r7}
   1ace2:	b087      	sub	sp, #28
   1ace4:	af00      	add	r7, sp, #0
   1ace6:	60f8      	str	r0, [r7, #12]
   1ace8:	460b      	mov	r3, r1
   1acea:	607a      	str	r2, [r7, #4]
   1acec:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   1acee:	2300      	movs	r3, #0
   1acf0:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   1acf2:	687b      	ldr	r3, [r7, #4]
   1acf4:	2b00      	cmp	r3, #0
   1acf6:	dc0c      	bgt.n	1ad12 <padbuffer+0x32>
    {
        return i32Cnt;
   1acf8:	697b      	ldr	r3, [r7, #20]
   1acfa:	e010      	b.n	1ad1e <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   1acfc:	68fb      	ldr	r3, [r7, #12]
   1acfe:	2b00      	cmp	r3, #0
   1ad00:	d004      	beq.n	1ad0c <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   1ad02:	68fb      	ldr	r3, [r7, #12]
   1ad04:	1c5a      	adds	r2, r3, #1
   1ad06:	60fa      	str	r2, [r7, #12]
   1ad08:	7afa      	ldrb	r2, [r7, #11]
   1ad0a:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   1ad0c:	697b      	ldr	r3, [r7, #20]
   1ad0e:	3301      	adds	r3, #1
   1ad10:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
   1ad12:	687b      	ldr	r3, [r7, #4]
   1ad14:	1e5a      	subs	r2, r3, #1
   1ad16:	607a      	str	r2, [r7, #4]
   1ad18:	2b00      	cmp	r3, #0
   1ad1a:	d1ef      	bne.n	1acfc <padbuffer+0x1c>
    }

    return i32Cnt;
   1ad1c:	697b      	ldr	r3, [r7, #20]
}
   1ad1e:	4618      	mov	r0, r3
   1ad20:	371c      	adds	r7, #28
   1ad22:	46bd      	mov	sp, r7
   1ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad28:	4770      	bx	lr
	...

0001ad2c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   1ad2c:	b590      	push	{r4, r7, lr}
   1ad2e:	b08f      	sub	sp, #60	; 0x3c
   1ad30:	af00      	add	r7, sp, #0
   1ad32:	ed87 0a03 	vstr	s0, [r7, #12]
   1ad36:	60b8      	str	r0, [r7, #8]
   1ad38:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   1ad3a:	68bb      	ldr	r3, [r7, #8]
   1ad3c:	681b      	ldr	r3, [r3, #0]
   1ad3e:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   1ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad42:	2b03      	cmp	r3, #3
   1ad44:	dc02      	bgt.n	1ad4c <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
   1ad46:	f06f 0302 	mvn.w	r3, #2
   1ad4a:	e0e7      	b.n	1af1c <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
   1ad4c:	edd7 7a03 	vldr	s15, [r7, #12]
   1ad50:	eef5 7a40 	vcmp.f32	s15, #0.0
   1ad54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad58:	d104      	bne.n	1ad64 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   1ad5a:	68bb      	ldr	r3, [r7, #8]
   1ad5c:	4a71      	ldr	r2, [pc, #452]	; (1af24 <ftoa+0x1f8>)
   1ad5e:	601a      	str	r2, [r3, #0]
        return 3;
   1ad60:	2303      	movs	r3, #3
   1ad62:	e0db      	b.n	1af1c <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
   1ad64:	68bb      	ldr	r3, [r7, #8]
   1ad66:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   1ad68:	68fb      	ldr	r3, [r7, #12]
   1ad6a:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   1ad6c:	693b      	ldr	r3, [r7, #16]
   1ad6e:	15db      	asrs	r3, r3, #23
   1ad70:	b2db      	uxtb	r3, r3
   1ad72:	3b7f      	subs	r3, #127	; 0x7f
   1ad74:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1ad76:	693b      	ldr	r3, [r7, #16]
   1ad78:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ad7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1ad80:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   1ad82:	2300      	movs	r3, #0
   1ad84:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   1ad86:	2300      	movs	r3, #0
   1ad88:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   1ad8a:	69fb      	ldr	r3, [r7, #28]
   1ad8c:	2b1e      	cmp	r3, #30
   1ad8e:	dd02      	ble.n	1ad96 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   1ad90:	f06f 0301 	mvn.w	r3, #1
   1ad94:	e0c2      	b.n	1af1c <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
   1ad96:	69fb      	ldr	r3, [r7, #28]
   1ad98:	f113 0f17 	cmn.w	r3, #23
   1ad9c:	da02      	bge.n	1ada4 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   1ad9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ada2:	e0bb      	b.n	1af1c <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
   1ada4:	69fb      	ldr	r3, [r7, #28]
   1ada6:	2b16      	cmp	r3, #22
   1ada8:	dd06      	ble.n	1adb8 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   1adaa:	69fb      	ldr	r3, [r7, #28]
   1adac:	3b17      	subs	r3, #23
   1adae:	69ba      	ldr	r2, [r7, #24]
   1adb0:	fa02 f303 	lsl.w	r3, r2, r3
   1adb4:	637b      	str	r3, [r7, #52]	; 0x34
   1adb6:	e01a      	b.n	1adee <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
   1adb8:	69fb      	ldr	r3, [r7, #28]
   1adba:	2b00      	cmp	r3, #0
   1adbc:	db0f      	blt.n	1adde <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   1adbe:	69fb      	ldr	r3, [r7, #28]
   1adc0:	f1c3 0317 	rsb	r3, r3, #23
   1adc4:	69ba      	ldr	r2, [r7, #24]
   1adc6:	fa42 f303 	asr.w	r3, r2, r3
   1adca:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1adcc:	69fb      	ldr	r3, [r7, #28]
   1adce:	3301      	adds	r3, #1
   1add0:	69ba      	ldr	r2, [r7, #24]
   1add2:	fa02 f303 	lsl.w	r3, r2, r3
   1add6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1adda:	633b      	str	r3, [r7, #48]	; 0x30
   1addc:	e007      	b.n	1adee <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1adde:	69bb      	ldr	r3, [r7, #24]
   1ade0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1ade4:	69fb      	ldr	r3, [r7, #28]
   1ade6:	43db      	mvns	r3, r3
   1ade8:	fa42 f303 	asr.w	r3, r2, r3
   1adec:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   1adee:	693b      	ldr	r3, [r7, #16]
   1adf0:	2b00      	cmp	r3, #0
   1adf2:	da04      	bge.n	1adfe <ftoa+0xd2>
    {
        *pcBuf++ = '-';
   1adf4:	68bb      	ldr	r3, [r7, #8]
   1adf6:	1c5a      	adds	r2, r3, #1
   1adf8:	60ba      	str	r2, [r7, #8]
   1adfa:	222d      	movs	r2, #45	; 0x2d
   1adfc:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   1adfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae00:	2b00      	cmp	r3, #0
   1ae02:	d105      	bne.n	1ae10 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
   1ae04:	68bb      	ldr	r3, [r7, #8]
   1ae06:	1c5a      	adds	r2, r3, #1
   1ae08:	60ba      	str	r2, [r7, #8]
   1ae0a:	2230      	movs	r2, #48	; 0x30
   1ae0c:	701a      	strb	r2, [r3, #0]
   1ae0e:	e021      	b.n	1ae54 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
   1ae10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae12:	2b00      	cmp	r3, #0
   1ae14:	dd08      	ble.n	1ae28 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
   1ae16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae18:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1ae1c:	68ba      	ldr	r2, [r7, #8]
   1ae1e:	4618      	mov	r0, r3
   1ae20:	4621      	mov	r1, r4
   1ae22:	f7ff fe9a 	bl	1ab5a <uint64_to_str>
   1ae26:	e011      	b.n	1ae4c <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
   1ae28:	68bb      	ldr	r3, [r7, #8]
   1ae2a:	1c5a      	adds	r2, r3, #1
   1ae2c:	60ba      	str	r2, [r7, #8]
   1ae2e:	222d      	movs	r2, #45	; 0x2d
   1ae30:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   1ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae34:	425b      	negs	r3, r3
   1ae36:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1ae3a:	68ba      	ldr	r2, [r7, #8]
   1ae3c:	4618      	mov	r0, r3
   1ae3e:	4621      	mov	r1, r4
   1ae40:	f7ff fe8b 	bl	1ab5a <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   1ae44:	e002      	b.n	1ae4c <ftoa+0x120>
        {
            pcBuf++;
   1ae46:	68bb      	ldr	r3, [r7, #8]
   1ae48:	3301      	adds	r3, #1
   1ae4a:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
   1ae4c:	68bb      	ldr	r3, [r7, #8]
   1ae4e:	781b      	ldrb	r3, [r3, #0]
   1ae50:	2b00      	cmp	r3, #0
   1ae52:	d1f8      	bne.n	1ae46 <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   1ae54:	68bb      	ldr	r3, [r7, #8]
   1ae56:	1c5a      	adds	r2, r3, #1
   1ae58:	60ba      	str	r2, [r7, #8]
   1ae5a:	222e      	movs	r2, #46	; 0x2e
   1ae5c:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   1ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae60:	2b00      	cmp	r3, #0
   1ae62:	d105      	bne.n	1ae70 <ftoa+0x144>
    {
        *pcBuf++ = '0';
   1ae64:	68bb      	ldr	r3, [r7, #8]
   1ae66:	1c5a      	adds	r2, r3, #1
   1ae68:	60ba      	str	r2, [r7, #8]
   1ae6a:	2230      	movs	r2, #48	; 0x30
   1ae6c:	701a      	strb	r2, [r3, #0]
   1ae6e:	e04f      	b.n	1af10 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1ae70:	68ba      	ldr	r2, [r7, #8]
   1ae72:	6a3b      	ldr	r3, [r7, #32]
   1ae74:	1ad3      	subs	r3, r2, r3
   1ae76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ae78:	1ad3      	subs	r3, r2, r3
   1ae7a:	3b01      	subs	r3, #1
   1ae7c:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1ae7e:	697a      	ldr	r2, [r7, #20]
   1ae80:	687b      	ldr	r3, [r7, #4]
   1ae82:	4293      	cmp	r3, r2
   1ae84:	bfa8      	it	ge
   1ae86:	4613      	movge	r3, r2
   1ae88:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   1ae8a:	2300      	movs	r3, #0
   1ae8c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ae8e:	e015      	b.n	1aebc <ftoa+0x190>
        {
            i32FracPart *= 10;
   1ae90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ae92:	4613      	mov	r3, r2
   1ae94:	009b      	lsls	r3, r3, #2
   1ae96:	4413      	add	r3, r2
   1ae98:	005b      	lsls	r3, r3, #1
   1ae9a:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1ae9c:	68bb      	ldr	r3, [r7, #8]
   1ae9e:	1c5a      	adds	r2, r3, #1
   1aea0:	60ba      	str	r2, [r7, #8]
   1aea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aea4:	1612      	asrs	r2, r2, #24
   1aea6:	b2d2      	uxtb	r2, r2
   1aea8:	3230      	adds	r2, #48	; 0x30
   1aeaa:	b2d2      	uxtb	r2, r2
   1aeac:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   1aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aeb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1aeb4:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   1aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aeb8:	3301      	adds	r3, #1
   1aeba:	62bb      	str	r3, [r7, #40]	; 0x28
   1aebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aebe:	697b      	ldr	r3, [r7, #20]
   1aec0:	429a      	cmp	r2, r3
   1aec2:	dbe5      	blt.n	1ae90 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1aec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aec6:	4613      	mov	r3, r2
   1aec8:	009b      	lsls	r3, r3, #2
   1aeca:	4413      	add	r3, r2
   1aecc:	005b      	lsls	r3, r3, #1
   1aece:	161b      	asrs	r3, r3, #24
   1aed0:	2b04      	cmp	r3, #4
   1aed2:	dd1d      	ble.n	1af10 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   1aed4:	68bb      	ldr	r3, [r7, #8]
   1aed6:	3b01      	subs	r3, #1
   1aed8:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   1aeda:	e015      	b.n	1af08 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
   1aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aede:	781b      	ldrb	r3, [r3, #0]
   1aee0:	2b2e      	cmp	r3, #46	; 0x2e
   1aee2:	d00e      	beq.n	1af02 <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
   1aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aee6:	781b      	ldrb	r3, [r3, #0]
   1aee8:	2b39      	cmp	r3, #57	; 0x39
   1aeea:	d103      	bne.n	1aef4 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
   1aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aeee:	2230      	movs	r2, #48	; 0x30
   1aef0:	701a      	strb	r2, [r3, #0]
   1aef2:	e006      	b.n	1af02 <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
   1aef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aef6:	781b      	ldrb	r3, [r3, #0]
   1aef8:	3301      	adds	r3, #1
   1aefa:	b2da      	uxtb	r2, r3
   1aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aefe:	701a      	strb	r2, [r3, #0]
                    break;
   1af00:	e006      	b.n	1af10 <ftoa+0x1e4>
                }
                pcBuftmp--;
   1af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1af04:	3b01      	subs	r3, #1
   1af06:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   1af08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1af0a:	6a3b      	ldr	r3, [r7, #32]
   1af0c:	429a      	cmp	r2, r3
   1af0e:	d2e5      	bcs.n	1aedc <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   1af10:	68bb      	ldr	r3, [r7, #8]
   1af12:	2200      	movs	r2, #0
   1af14:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   1af16:	68ba      	ldr	r2, [r7, #8]
   1af18:	6a3b      	ldr	r3, [r7, #32]
   1af1a:	1ad3      	subs	r3, r2, r3
} // ftoa()
   1af1c:	4618      	mov	r0, r3
   1af1e:	373c      	adds	r7, #60	; 0x3c
   1af20:	46bd      	mov	sp, r7
   1af22:	bd90      	pop	{r4, r7, pc}
   1af24:	00302e30 	.word	0x00302e30

0001af28 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1af28:	b590      	push	{r4, r7, lr}
   1af2a:	b095      	sub	sp, #84	; 0x54
   1af2c:	af00      	add	r7, sp, #0
   1af2e:	60f8      	str	r0, [r7, #12]
   1af30:	60b9      	str	r1, [r7, #8]
   1af32:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1af34:	2300      	movs	r3, #0
   1af36:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   1af38:	2300      	movs	r3, #0
   1af3a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   1af3c:	e2e9      	b.n	1b512 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   1af3e:	2306      	movs	r3, #6
   1af40:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
   1af42:	68bb      	ldr	r3, [r7, #8]
   1af44:	781b      	ldrb	r3, [r3, #0]
   1af46:	2b25      	cmp	r3, #37	; 0x25
   1af48:	d01f      	beq.n	1af8a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   1af4a:	68fb      	ldr	r3, [r7, #12]
   1af4c:	2b00      	cmp	r3, #0
   1af4e:	d015      	beq.n	1af7c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1af50:	68bb      	ldr	r3, [r7, #8]
   1af52:	781b      	ldrb	r3, [r3, #0]
   1af54:	2b0a      	cmp	r3, #10
   1af56:	d10b      	bne.n	1af70 <am_util_stdio_vsprintf+0x48>
   1af58:	4bb2      	ldr	r3, [pc, #712]	; (1b224 <am_util_stdio_vsprintf+0x2fc>)
   1af5a:	781b      	ldrb	r3, [r3, #0]
   1af5c:	2b00      	cmp	r3, #0
   1af5e:	d007      	beq.n	1af70 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
   1af60:	68fb      	ldr	r3, [r7, #12]
   1af62:	1c5a      	adds	r2, r3, #1
   1af64:	60fa      	str	r2, [r7, #12]
   1af66:	220d      	movs	r2, #13
   1af68:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   1af6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af6c:	3301      	adds	r3, #1
   1af6e:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   1af70:	68fb      	ldr	r3, [r7, #12]
   1af72:	1c5a      	adds	r2, r3, #1
   1af74:	60fa      	str	r2, [r7, #12]
   1af76:	68ba      	ldr	r2, [r7, #8]
   1af78:	7812      	ldrb	r2, [r2, #0]
   1af7a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   1af7c:	68bb      	ldr	r3, [r7, #8]
   1af7e:	3301      	adds	r3, #1
   1af80:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
   1af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af84:	3301      	adds	r3, #1
   1af86:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
   1af88:	e2c3      	b.n	1b512 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   1af8a:	68bb      	ldr	r3, [r7, #8]
   1af8c:	3301      	adds	r3, #1
   1af8e:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
   1af90:	2300      	movs	r3, #0
   1af92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   1af96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1af9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   1af9e:	2320      	movs	r3, #32
   1afa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
   1afa4:	68bb      	ldr	r3, [r7, #8]
   1afa6:	781b      	ldrb	r3, [r3, #0]
   1afa8:	2b30      	cmp	r3, #48	; 0x30
   1afaa:	d105      	bne.n	1afb8 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
   1afac:	2330      	movs	r3, #48	; 0x30
   1afae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
   1afb2:	68bb      	ldr	r3, [r7, #8]
   1afb4:	3301      	adds	r3, #1
   1afb6:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   1afb8:	f107 0310 	add.w	r3, r7, #16
   1afbc:	4619      	mov	r1, r3
   1afbe:	68b8      	ldr	r0, [r7, #8]
   1afc0:	f7ff fd85 	bl	1aace <decstr_to_int>
   1afc4:	4603      	mov	r3, r0
   1afc6:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
   1afc8:	693b      	ldr	r3, [r7, #16]
   1afca:	68ba      	ldr	r2, [r7, #8]
   1afcc:	4413      	add	r3, r2
   1afce:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1afd0:	68bb      	ldr	r3, [r7, #8]
   1afd2:	781b      	ldrb	r3, [r3, #0]
   1afd4:	2b73      	cmp	r3, #115	; 0x73
   1afd6:	d005      	beq.n	1afe4 <am_util_stdio_vsprintf+0xbc>
   1afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1afda:	2b00      	cmp	r3, #0
   1afdc:	da02      	bge.n	1afe4 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
   1afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1afe0:	425b      	negs	r3, r3
   1afe2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1afe4:	68bb      	ldr	r3, [r7, #8]
   1afe6:	781b      	ldrb	r3, [r3, #0]
   1afe8:	2b2e      	cmp	r3, #46	; 0x2e
   1afea:	d10e      	bne.n	1b00a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
   1afec:	68bb      	ldr	r3, [r7, #8]
   1afee:	3301      	adds	r3, #1
   1aff0:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1aff2:	f107 0310 	add.w	r3, r7, #16
   1aff6:	4619      	mov	r1, r3
   1aff8:	68b8      	ldr	r0, [r7, #8]
   1affa:	f7ff fd68 	bl	1aace <decstr_to_int>
   1affe:	4603      	mov	r3, r0
   1b000:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
   1b002:	693b      	ldr	r3, [r7, #16]
   1b004:	68ba      	ldr	r2, [r7, #8]
   1b006:	4413      	add	r3, r2
   1b008:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1b00a:	68bb      	ldr	r3, [r7, #8]
   1b00c:	781b      	ldrb	r3, [r3, #0]
   1b00e:	2b6c      	cmp	r3, #108	; 0x6c
   1b010:	d10c      	bne.n	1b02c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
   1b012:	68bb      	ldr	r3, [r7, #8]
   1b014:	3301      	adds	r3, #1
   1b016:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   1b018:	68bb      	ldr	r3, [r7, #8]
   1b01a:	781b      	ldrb	r3, [r3, #0]
   1b01c:	2b6c      	cmp	r3, #108	; 0x6c
   1b01e:	d105      	bne.n	1b02c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
   1b020:	68bb      	ldr	r3, [r7, #8]
   1b022:	3301      	adds	r3, #1
   1b024:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
   1b026:	2301      	movs	r3, #1
   1b028:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   1b02c:	68bb      	ldr	r3, [r7, #8]
   1b02e:	781b      	ldrb	r3, [r3, #0]
   1b030:	3b46      	subs	r3, #70	; 0x46
   1b032:	2b32      	cmp	r3, #50	; 0x32
   1b034:	f200 825a 	bhi.w	1b4ec <am_util_stdio_vsprintf+0x5c4>
   1b038:	a201      	add	r2, pc, #4	; (adr r2, 1b040 <am_util_stdio_vsprintf+0x118>)
   1b03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b03e:	bf00      	nop
   1b040:	0001b473 	.word	0x0001b473
   1b044:	0001b4ed 	.word	0x0001b4ed
   1b048:	0001b4ed 	.word	0x0001b4ed
   1b04c:	0001b4ed 	.word	0x0001b4ed
   1b050:	0001b4ed 	.word	0x0001b4ed
   1b054:	0001b4ed 	.word	0x0001b4ed
   1b058:	0001b4ed 	.word	0x0001b4ed
   1b05c:	0001b4ed 	.word	0x0001b4ed
   1b060:	0001b4ed 	.word	0x0001b4ed
   1b064:	0001b4ed 	.word	0x0001b4ed
   1b068:	0001b4ed 	.word	0x0001b4ed
   1b06c:	0001b4ed 	.word	0x0001b4ed
   1b070:	0001b4ed 	.word	0x0001b4ed
   1b074:	0001b4ed 	.word	0x0001b4ed
   1b078:	0001b4ed 	.word	0x0001b4ed
   1b07c:	0001b4ed 	.word	0x0001b4ed
   1b080:	0001b4ed 	.word	0x0001b4ed
   1b084:	0001b4ed 	.word	0x0001b4ed
   1b088:	0001b207 	.word	0x0001b207
   1b08c:	0001b4ed 	.word	0x0001b4ed
   1b090:	0001b4ed 	.word	0x0001b4ed
   1b094:	0001b4ed 	.word	0x0001b4ed
   1b098:	0001b4ed 	.word	0x0001b4ed
   1b09c:	0001b4ed 	.word	0x0001b4ed
   1b0a0:	0001b4ed 	.word	0x0001b4ed
   1b0a4:	0001b4ed 	.word	0x0001b4ed
   1b0a8:	0001b4ed 	.word	0x0001b4ed
   1b0ac:	0001b4ed 	.word	0x0001b4ed
   1b0b0:	0001b4ed 	.word	0x0001b4ed
   1b0b4:	0001b10d 	.word	0x0001b10d
   1b0b8:	0001b339 	.word	0x0001b339
   1b0bc:	0001b4ed 	.word	0x0001b4ed
   1b0c0:	0001b473 	.word	0x0001b473
   1b0c4:	0001b4ed 	.word	0x0001b4ed
   1b0c8:	0001b4ed 	.word	0x0001b4ed
   1b0cc:	0001b339 	.word	0x0001b339
   1b0d0:	0001b4ed 	.word	0x0001b4ed
   1b0d4:	0001b4ed 	.word	0x0001b4ed
   1b0d8:	0001b4ed 	.word	0x0001b4ed
   1b0dc:	0001b4ed 	.word	0x0001b4ed
   1b0e0:	0001b4ed 	.word	0x0001b4ed
   1b0e4:	0001b4ed 	.word	0x0001b4ed
   1b0e8:	0001b4ed 	.word	0x0001b4ed
   1b0ec:	0001b4ed 	.word	0x0001b4ed
   1b0f0:	0001b4ed 	.word	0x0001b4ed
   1b0f4:	0001b133 	.word	0x0001b133
   1b0f8:	0001b4ed 	.word	0x0001b4ed
   1b0fc:	0001b2a5 	.word	0x0001b2a5
   1b100:	0001b4ed 	.word	0x0001b4ed
   1b104:	0001b4ed 	.word	0x0001b4ed
   1b108:	0001b201 	.word	0x0001b201
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1b10c:	687b      	ldr	r3, [r7, #4]
   1b10e:	1d1a      	adds	r2, r3, #4
   1b110:	607a      	str	r2, [r7, #4]
   1b112:	681b      	ldr	r3, [r3, #0]
   1b114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
   1b118:	68fb      	ldr	r3, [r7, #12]
   1b11a:	2b00      	cmp	r3, #0
   1b11c:	d005      	beq.n	1b12a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   1b11e:	68fb      	ldr	r3, [r7, #12]
   1b120:	1c5a      	adds	r2, r3, #1
   1b122:	60fa      	str	r2, [r7, #12]
   1b124:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   1b128:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1b12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b12c:	3301      	adds	r3, #1
   1b12e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b130:	e1ec      	b.n	1b50c <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
   1b132:	687b      	ldr	r3, [r7, #4]
   1b134:	1d1a      	adds	r2, r3, #4
   1b136:	607a      	str	r2, [r7, #4]
   1b138:	681b      	ldr	r3, [r3, #0]
   1b13a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   1b13c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1b13e:	f7ff fdb4 	bl	1acaa <simple_strlen>
   1b142:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
   1b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b146:	2b00      	cmp	r3, #0
   1b148:	dd2e      	ble.n	1b1a8 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   1b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b14e:	429a      	cmp	r2, r3
   1b150:	d22a      	bcs.n	1b1a8 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1b152:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b156:	1ad3      	subs	r3, r2, r3
   1b158:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b15a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b15e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b160:	4619      	mov	r1, r3
   1b162:	68f8      	ldr	r0, [r7, #12]
   1b164:	f7ff fdbc 	bl	1ace0 <padbuffer>
   1b168:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1b16a:	68fb      	ldr	r3, [r7, #12]
   1b16c:	2b00      	cmp	r3, #0
   1b16e:	d001      	beq.n	1b174 <am_util_stdio_vsprintf+0x24c>
   1b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b172:	e000      	b.n	1b176 <am_util_stdio_vsprintf+0x24e>
   1b174:	2300      	movs	r3, #0
   1b176:	68fa      	ldr	r2, [r7, #12]
   1b178:	4413      	add	r3, r2
   1b17a:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b180:	4413      	add	r3, r2
   1b182:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1b184:	2300      	movs	r3, #0
   1b186:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   1b188:	e00e      	b.n	1b1a8 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   1b18a:	68fb      	ldr	r3, [r7, #12]
   1b18c:	2b00      	cmp	r3, #0
   1b18e:	d005      	beq.n	1b19c <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   1b190:	68fb      	ldr	r3, [r7, #12]
   1b192:	1c5a      	adds	r2, r3, #1
   1b194:	60fa      	str	r2, [r7, #12]
   1b196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1b198:	7812      	ldrb	r2, [r2, #0]
   1b19a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   1b19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b19e:	3301      	adds	r3, #1
   1b1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
   1b1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b1a4:	3301      	adds	r3, #1
   1b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
   1b1a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b1aa:	781b      	ldrb	r3, [r3, #0]
   1b1ac:	2b00      	cmp	r3, #0
   1b1ae:	d1ec      	bne.n	1b18a <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
   1b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b1b2:	2b00      	cmp	r3, #0
   1b1b4:	f000 81a7 	beq.w	1b506 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
   1b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b1ba:	425b      	negs	r3, r3
   1b1bc:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   1b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b1c2:	429a      	cmp	r2, r3
   1b1c4:	f080 819f 	bcs.w	1b506 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1b1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1cc:	1ad3      	subs	r3, r2, r3
   1b1ce:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b1d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b1d6:	4619      	mov	r1, r3
   1b1d8:	68f8      	ldr	r0, [r7, #12]
   1b1da:	f7ff fd81 	bl	1ace0 <padbuffer>
   1b1de:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1b1e0:	68fb      	ldr	r3, [r7, #12]
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	d001      	beq.n	1b1ea <am_util_stdio_vsprintf+0x2c2>
   1b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b1e8:	e000      	b.n	1b1ec <am_util_stdio_vsprintf+0x2c4>
   1b1ea:	2300      	movs	r3, #0
   1b1ec:	68fa      	ldr	r2, [r7, #12]
   1b1ee:	4413      	add	r3, r2
   1b1f0:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b1f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b1f6:	4413      	add	r3, r2
   1b1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1b1fa:	2300      	movs	r3, #0
   1b1fc:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
   1b1fe:	e182      	b.n	1b506 <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
   1b200:	2301      	movs	r3, #1
   1b202:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b206:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1b20a:	2b00      	cmp	r3, #0
   1b20c:	d00c      	beq.n	1b228 <am_util_stdio_vsprintf+0x300>
   1b20e:	687b      	ldr	r3, [r7, #4]
   1b210:	3307      	adds	r3, #7
   1b212:	f023 0307 	bic.w	r3, r3, #7
   1b216:	f103 0208 	add.w	r2, r3, #8
   1b21a:	607a      	str	r2, [r7, #4]
   1b21c:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b220:	e008      	b.n	1b234 <am_util_stdio_vsprintf+0x30c>
   1b222:	bf00      	nop
   1b224:	100050cc 	.word	0x100050cc
                                      va_arg(pArgs, uint32_t);
   1b228:	687b      	ldr	r3, [r7, #4]
   1b22a:	1d1a      	adds	r2, r3, #4
   1b22c:	607a      	str	r2, [r7, #4]
   1b22e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b230:	f04f 0400 	mov.w	r4, #0
   1b234:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   1b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b23a:	2b00      	cmp	r3, #0
   1b23c:	d01e      	beq.n	1b27c <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   1b23e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b242:	f7ff fc20 	bl	1aa86 <ndigits_in_hex>
   1b246:	4602      	mov	r2, r0
   1b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b24a:	1a9b      	subs	r3, r3, r2
   1b24c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b24e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b252:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b254:	4619      	mov	r1, r3
   1b256:	68f8      	ldr	r0, [r7, #12]
   1b258:	f7ff fd42 	bl	1ace0 <padbuffer>
   1b25c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1b25e:	68fb      	ldr	r3, [r7, #12]
   1b260:	2b00      	cmp	r3, #0
   1b262:	d001      	beq.n	1b268 <am_util_stdio_vsprintf+0x340>
   1b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b266:	e000      	b.n	1b26a <am_util_stdio_vsprintf+0x342>
   1b268:	2300      	movs	r3, #0
   1b26a:	68fa      	ldr	r2, [r7, #12]
   1b26c:	4413      	add	r3, r2
   1b26e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b274:	4413      	add	r3, r2
   1b276:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1b278:	2300      	movs	r3, #0
   1b27a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   1b27c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1b280:	68fa      	ldr	r2, [r7, #12]
   1b282:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b286:	f7ff fcb0 	bl	1abea <uint64_to_hexstr>
   1b28a:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1b28c:	68fb      	ldr	r3, [r7, #12]
   1b28e:	2b00      	cmp	r3, #0
   1b290:	d003      	beq.n	1b29a <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
   1b292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b294:	68fa      	ldr	r2, [r7, #12]
   1b296:	4413      	add	r3, r2
   1b298:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1b29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b29c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b29e:	4413      	add	r3, r2
   1b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b2a2:	e133      	b.n	1b50c <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b2a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1b2a8:	2b00      	cmp	r3, #0
   1b2aa:	d009      	beq.n	1b2c0 <am_util_stdio_vsprintf+0x398>
   1b2ac:	687b      	ldr	r3, [r7, #4]
   1b2ae:	3307      	adds	r3, #7
   1b2b0:	f023 0307 	bic.w	r3, r3, #7
   1b2b4:	f103 0208 	add.w	r2, r3, #8
   1b2b8:	607a      	str	r2, [r7, #4]
   1b2ba:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b2be:	e005      	b.n	1b2cc <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
   1b2c0:	687b      	ldr	r3, [r7, #4]
   1b2c2:	1d1a      	adds	r2, r3, #4
   1b2c4:	607a      	str	r2, [r7, #4]
   1b2c6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b2c8:	f04f 0400 	mov.w	r4, #0
   1b2cc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   1b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b2d2:	2b00      	cmp	r3, #0
   1b2d4:	d01e      	beq.n	1b314 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   1b2d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b2da:	f7ff fb96 	bl	1aa0a <ndigits_in_u64>
   1b2de:	4602      	mov	r2, r0
   1b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b2e2:	1a9b      	subs	r3, r3, r2
   1b2e4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b2e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b2ec:	4619      	mov	r1, r3
   1b2ee:	68f8      	ldr	r0, [r7, #12]
   1b2f0:	f7ff fcf6 	bl	1ace0 <padbuffer>
   1b2f4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1b2f6:	68fb      	ldr	r3, [r7, #12]
   1b2f8:	2b00      	cmp	r3, #0
   1b2fa:	d001      	beq.n	1b300 <am_util_stdio_vsprintf+0x3d8>
   1b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b2fe:	e000      	b.n	1b302 <am_util_stdio_vsprintf+0x3da>
   1b300:	2300      	movs	r3, #0
   1b302:	68fa      	ldr	r2, [r7, #12]
   1b304:	4413      	add	r3, r2
   1b306:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b30a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b30c:	4413      	add	r3, r2
   1b30e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1b310:	2300      	movs	r3, #0
   1b312:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1b314:	68fa      	ldr	r2, [r7, #12]
   1b316:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b31a:	f7ff fc1e 	bl	1ab5a <uint64_to_str>
   1b31e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1b320:	68fb      	ldr	r3, [r7, #12]
   1b322:	2b00      	cmp	r3, #0
   1b324:	d003      	beq.n	1b32e <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
   1b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b328:	68fa      	ldr	r2, [r7, #12]
   1b32a:	4413      	add	r3, r2
   1b32c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1b32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b332:	4413      	add	r3, r2
   1b334:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b336:	e0e9      	b.n	1b50c <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1b338:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1b33c:	2b00      	cmp	r3, #0
   1b33e:	d009      	beq.n	1b354 <am_util_stdio_vsprintf+0x42c>
   1b340:	687b      	ldr	r3, [r7, #4]
   1b342:	3307      	adds	r3, #7
   1b344:	f023 0307 	bic.w	r3, r3, #7
   1b348:	f103 0208 	add.w	r2, r3, #8
   1b34c:	607a      	str	r2, [r7, #4]
   1b34e:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b352:	e005      	b.n	1b360 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
   1b354:	687b      	ldr	r3, [r7, #4]
   1b356:	1d1a      	adds	r2, r3, #4
   1b358:	607a      	str	r2, [r7, #4]
   1b35a:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1b35c:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1b360:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   1b364:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1b368:	2b00      	cmp	r3, #0
   1b36a:	f174 0300 	sbcs.w	r3, r4, #0
   1b36e:	da0a      	bge.n	1b386 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
   1b370:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1b374:	425b      	negs	r3, r3
   1b376:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   1b37a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
   1b37e:	2301      	movs	r3, #1
   1b380:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   1b384:	e006      	b.n	1b394 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
   1b386:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1b38a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
   1b38e:	2300      	movs	r3, #0
   1b390:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
   1b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b396:	2b00      	cmp	r3, #0
   1b398:	d04a      	beq.n	1b430 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   1b39a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
   1b39e:	4618      	mov	r0, r3
   1b3a0:	4621      	mov	r1, r4
   1b3a2:	f7ff fb53 	bl	1aa4c <ndigits_in_i64>
   1b3a6:	4602      	mov	r2, r0
   1b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b3aa:	1a9b      	subs	r3, r3, r2
   1b3ac:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
   1b3ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1b3b2:	2b00      	cmp	r3, #0
   1b3b4:	d011      	beq.n	1b3da <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
   1b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b3b8:	3b01      	subs	r3, #1
   1b3ba:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   1b3bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b3c0:	2b30      	cmp	r3, #48	; 0x30
   1b3c2:	d10a      	bne.n	1b3da <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   1b3c4:	68fb      	ldr	r3, [r7, #12]
   1b3c6:	2b00      	cmp	r3, #0
   1b3c8:	d004      	beq.n	1b3d4 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
   1b3ca:	68fb      	ldr	r3, [r7, #12]
   1b3cc:	1c5a      	adds	r2, r3, #1
   1b3ce:	60fa      	str	r2, [r7, #12]
   1b3d0:	222d      	movs	r2, #45	; 0x2d
   1b3d2:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   1b3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b3d6:	3301      	adds	r3, #1
   1b3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b3e0:	4619      	mov	r1, r3
   1b3e2:	68f8      	ldr	r0, [r7, #12]
   1b3e4:	f7ff fc7c 	bl	1ace0 <padbuffer>
   1b3e8:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1b3ea:	68fb      	ldr	r3, [r7, #12]
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	d001      	beq.n	1b3f4 <am_util_stdio_vsprintf+0x4cc>
   1b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b3f2:	e000      	b.n	1b3f6 <am_util_stdio_vsprintf+0x4ce>
   1b3f4:	2300      	movs	r3, #0
   1b3f6:	68fa      	ldr	r2, [r7, #12]
   1b3f8:	4413      	add	r3, r2
   1b3fa:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b3fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b400:	4413      	add	r3, r2
   1b402:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1b404:	2300      	movs	r3, #0
   1b406:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1b408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1b40c:	2b00      	cmp	r3, #0
   1b40e:	d01e      	beq.n	1b44e <am_util_stdio_vsprintf+0x526>
   1b410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b414:	2b20      	cmp	r3, #32
   1b416:	d11a      	bne.n	1b44e <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   1b418:	68fb      	ldr	r3, [r7, #12]
   1b41a:	2b00      	cmp	r3, #0
   1b41c:	d004      	beq.n	1b428 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
   1b41e:	68fb      	ldr	r3, [r7, #12]
   1b420:	1c5a      	adds	r2, r3, #1
   1b422:	60fa      	str	r2, [r7, #12]
   1b424:	222d      	movs	r2, #45	; 0x2d
   1b426:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   1b428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b42a:	3301      	adds	r3, #1
   1b42c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1b42e:	e00e      	b.n	1b44e <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
   1b430:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1b434:	2b00      	cmp	r3, #0
   1b436:	d00a      	beq.n	1b44e <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
   1b438:	68fb      	ldr	r3, [r7, #12]
   1b43a:	2b00      	cmp	r3, #0
   1b43c:	d004      	beq.n	1b448 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
   1b43e:	68fb      	ldr	r3, [r7, #12]
   1b440:	1c5a      	adds	r2, r3, #1
   1b442:	60fa      	str	r2, [r7, #12]
   1b444:	222d      	movs	r2, #45	; 0x2d
   1b446:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   1b448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b44a:	3301      	adds	r3, #1
   1b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1b44e:	68fa      	ldr	r2, [r7, #12]
   1b450:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b454:	f7ff fb81 	bl	1ab5a <uint64_to_str>
   1b458:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1b45a:	68fb      	ldr	r3, [r7, #12]
   1b45c:	2b00      	cmp	r3, #0
   1b45e:	d003      	beq.n	1b468 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
   1b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b462:	68fa      	ldr	r2, [r7, #12]
   1b464:	4413      	add	r3, r2
   1b466:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1b468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b46a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b46c:	4413      	add	r3, r2
   1b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b470:	e04c      	b.n	1b50c <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
   1b472:	68fb      	ldr	r3, [r7, #12]
   1b474:	2b00      	cmp	r3, #0
   1b476:	d048      	beq.n	1b50a <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
   1b478:	687b      	ldr	r3, [r7, #4]
   1b47a:	3307      	adds	r3, #7
   1b47c:	f023 0307 	bic.w	r3, r3, #7
   1b480:	f103 0208 	add.w	r2, r3, #8
   1b484:	607a      	str	r2, [r7, #4]
   1b486:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b48a:	4618      	mov	r0, r3
   1b48c:	4621      	mov	r1, r4
   1b48e:	f7f0 ffb3 	bl	c3f8 <__aeabi_d2f>
   1b492:	4603      	mov	r3, r0
   1b494:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   1b496:	68fb      	ldr	r3, [r7, #12]
   1b498:	2214      	movs	r2, #20
   1b49a:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   1b49c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b49e:	68f8      	ldr	r0, [r7, #12]
   1b4a0:	ed97 0a05 	vldr	s0, [r7, #20]
   1b4a4:	f7ff fc42 	bl	1ad2c <ftoa>
   1b4a8:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
   1b4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b4ac:	2b00      	cmp	r3, #0
   1b4ae:	da14      	bge.n	1b4da <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1b4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b4b6:	d102      	bne.n	1b4be <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   1b4b8:	4b1e      	ldr	r3, [pc, #120]	; (1b534 <am_util_stdio_vsprintf+0x60c>)
   1b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   1b4bc:	e008      	b.n	1b4d0 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   1b4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b4c0:	f113 0f02 	cmn.w	r3, #2
   1b4c4:	d102      	bne.n	1b4cc <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1b4c6:	4b1c      	ldr	r3, [pc, #112]	; (1b538 <am_util_stdio_vsprintf+0x610>)
   1b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
   1b4ca:	e001      	b.n	1b4d0 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   1b4cc:	4b1b      	ldr	r3, [pc, #108]	; (1b53c <am_util_stdio_vsprintf+0x614>)
   1b4ce:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   1b4d0:	68fb      	ldr	r3, [r7, #12]
   1b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b4d4:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   1b4d6:	2303      	movs	r3, #3
   1b4d8:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   1b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b4dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b4de:	4413      	add	r3, r2
   1b4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
   1b4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b4e4:	68fa      	ldr	r2, [r7, #12]
   1b4e6:	4413      	add	r3, r2
   1b4e8:	60fb      	str	r3, [r7, #12]
                }
                break;
   1b4ea:	e00e      	b.n	1b50a <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   1b4ec:	68fb      	ldr	r3, [r7, #12]
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d005      	beq.n	1b4fe <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
   1b4f2:	68fb      	ldr	r3, [r7, #12]
   1b4f4:	1c5a      	adds	r2, r3, #1
   1b4f6:	60fa      	str	r2, [r7, #12]
   1b4f8:	68ba      	ldr	r2, [r7, #8]
   1b4fa:	7812      	ldrb	r2, [r2, #0]
   1b4fc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1b4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b500:	3301      	adds	r3, #1
   1b502:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b504:	e002      	b.n	1b50c <am_util_stdio_vsprintf+0x5e4>
                break;
   1b506:	bf00      	nop
   1b508:	e000      	b.n	1b50c <am_util_stdio_vsprintf+0x5e4>
                break;
   1b50a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   1b50c:	68bb      	ldr	r3, [r7, #8]
   1b50e:	3301      	adds	r3, #1
   1b510:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
   1b512:	68bb      	ldr	r3, [r7, #8]
   1b514:	781b      	ldrb	r3, [r3, #0]
   1b516:	2b00      	cmp	r3, #0
   1b518:	f47f ad11 	bne.w	1af3e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   1b51c:	68fb      	ldr	r3, [r7, #12]
   1b51e:	2b00      	cmp	r3, #0
   1b520:	d002      	beq.n	1b528 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
   1b522:	68fb      	ldr	r3, [r7, #12]
   1b524:	2200      	movs	r2, #0
   1b526:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   1b528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1b52a:	4618      	mov	r0, r3
   1b52c:	3754      	adds	r7, #84	; 0x54
   1b52e:	46bd      	mov	sp, r7
   1b530:	bd90      	pop	{r4, r7, pc}
   1b532:	bf00      	nop
   1b534:	00302e30 	.word	0x00302e30
   1b538:	00232e23 	.word	0x00232e23
   1b53c:	003f2e3f 	.word	0x003f2e3f

0001b540 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1b540:	b40f      	push	{r0, r1, r2, r3}
   1b542:	b580      	push	{r7, lr}
   1b544:	b082      	sub	sp, #8
   1b546:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   1b548:	4b0d      	ldr	r3, [pc, #52]	; (1b580 <am_util_stdio_printf+0x40>)
   1b54a:	681b      	ldr	r3, [r3, #0]
   1b54c:	2b00      	cmp	r3, #0
   1b54e:	d101      	bne.n	1b554 <am_util_stdio_printf+0x14>
    {
        return 0;
   1b550:	2300      	movs	r3, #0
   1b552:	e00d      	b.n	1b570 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   1b554:	f107 0314 	add.w	r3, r7, #20
   1b558:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1b55a:	683a      	ldr	r2, [r7, #0]
   1b55c:	6939      	ldr	r1, [r7, #16]
   1b55e:	4809      	ldr	r0, [pc, #36]	; (1b584 <am_util_stdio_printf+0x44>)
   1b560:	f7ff fce2 	bl	1af28 <am_util_stdio_vsprintf>
   1b564:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   1b566:	4b06      	ldr	r3, [pc, #24]	; (1b580 <am_util_stdio_printf+0x40>)
   1b568:	681b      	ldr	r3, [r3, #0]
   1b56a:	4806      	ldr	r0, [pc, #24]	; (1b584 <am_util_stdio_printf+0x44>)
   1b56c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   1b56e:	687b      	ldr	r3, [r7, #4]
}
   1b570:	4618      	mov	r0, r3
   1b572:	3708      	adds	r7, #8
   1b574:	46bd      	mov	sp, r7
   1b576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b57a:	b004      	add	sp, #16
   1b57c:	4770      	bx	lr
   1b57e:	bf00      	nop
   1b580:	10005d48 	.word	0x10005d48
   1b584:	10004fcc 	.word	0x10004fcc

0001b588 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1b588:	b580      	push	{r7, lr}
   1b58a:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcGapGroup);
   1b58c:	4803      	ldr	r0, [pc, #12]	; (1b59c <SvcCoreAddGroup+0x14>)
   1b58e:	f7f2 fb61 	bl	dc54 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   1b592:	4803      	ldr	r0, [pc, #12]	; (1b5a0 <SvcCoreAddGroup+0x18>)
   1b594:	f7f2 fb5e 	bl	dc54 <AttsAddGroup>
}
   1b598:	bf00      	nop
   1b59a:	bd80      	pop	{r7, pc}
   1b59c:	10002be0 	.word	0x10002be0
   1b5a0:	10002bf4 	.word	0x10002bf4

0001b5a4 <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   1b5a4:	b480      	push	{r7}
   1b5a6:	b083      	sub	sp, #12
   1b5a8:	af00      	add	r7, sp, #0
   1b5aa:	4603      	mov	r3, r0
   1b5ac:	71fb      	strb	r3, [r7, #7]
  gapValCar[0] = value;
   1b5ae:	4a04      	ldr	r2, [pc, #16]	; (1b5c0 <SvcCoreGapCentAddrResUpdate+0x1c>)
   1b5b0:	79fb      	ldrb	r3, [r7, #7]
   1b5b2:	7013      	strb	r3, [r2, #0]
}
   1b5b4:	bf00      	nop
   1b5b6:	370c      	adds	r7, #12
   1b5b8:	46bd      	mov	sp, r7
   1b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b5be:	4770      	bx	lr
   1b5c0:	100050d4 	.word	0x100050d4

0001b5c4 <SvcCoreGapAddRpaoCh>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapAddRpaoCh(void)
{
   1b5c4:	b480      	push	{r7}
   1b5c6:	af00      	add	r7, sp, #0
  /* if RPAO characteristic not already in GAP service */
  if (svcGapGroup.endHandle < GAP_RPAO_HDL)
   1b5c8:	4b05      	ldr	r3, [pc, #20]	; (1b5e0 <SvcCoreGapAddRpaoCh+0x1c>)
   1b5ca:	8a5b      	ldrh	r3, [r3, #18]
   1b5cc:	2b08      	cmp	r3, #8
   1b5ce:	d802      	bhi.n	1b5d6 <SvcCoreGapAddRpaoCh+0x12>
  {
    svcGapGroup.endHandle = GAP_RPAO_HDL;
   1b5d0:	4b03      	ldr	r3, [pc, #12]	; (1b5e0 <SvcCoreGapAddRpaoCh+0x1c>)
   1b5d2:	2209      	movs	r2, #9
   1b5d4:	825a      	strh	r2, [r3, #18]
  }
}
   1b5d6:	bf00      	nop
   1b5d8:	46bd      	mov	sp, r7
   1b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b5de:	4770      	bx	lr
   1b5e0:	10002be0 	.word	0x10002be0

0001b5e4 <SvcPxAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcPxAddGroup(void)
{
   1b5e4:	b580      	push	{r7, lr}
   1b5e6:	af00      	add	r7, sp, #0
  /* add services */
  AttsAddGroup(&svcPxGroup);
   1b5e8:	4802      	ldr	r0, [pc, #8]	; (1b5f4 <SvcPxAddGroup+0x10>)
   1b5ea:	f7f2 fb33 	bl	dc54 <AttsAddGroup>
}
   1b5ee:	bf00      	nop
   1b5f0:	bd80      	pop	{r7, pc}
   1b5f2:	bf00      	nop
   1b5f4:	10002c08 	.word	0x10002c08

0001b5f8 <SvcPxCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcPxCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   1b5f8:	b480      	push	{r7}
   1b5fa:	b083      	sub	sp, #12
   1b5fc:	af00      	add	r7, sp, #0
   1b5fe:	6078      	str	r0, [r7, #4]
   1b600:	6039      	str	r1, [r7, #0]
  svcPxGroup.readCback = readCback;
   1b602:	4a06      	ldr	r2, [pc, #24]	; (1b61c <SvcPxCbackRegister+0x24>)
   1b604:	687b      	ldr	r3, [r7, #4]
   1b606:	6093      	str	r3, [r2, #8]
  svcPxGroup.writeCback = writeCback;
   1b608:	4a04      	ldr	r2, [pc, #16]	; (1b61c <SvcPxCbackRegister+0x24>)
   1b60a:	683b      	ldr	r3, [r7, #0]
   1b60c:	60d3      	str	r3, [r2, #12]
}
   1b60e:	bf00      	nop
   1b610:	370c      	adds	r7, #12
   1b612:	46bd      	mov	sp, r7
   1b614:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b618:	4770      	bx	lr
   1b61a:	bf00      	nop
   1b61c:	10002c08 	.word	0x10002c08

0001b620 <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   1b620:	b590      	push	{r4, r7, lr}
   1b622:	b087      	sub	sp, #28
   1b624:	af00      	add	r7, sp, #0
   1b626:	4603      	mov	r3, r0
   1b628:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1b62a:	79fb      	ldrb	r3, [r7, #7]
   1b62c:	3b01      	subs	r3, #1
   1b62e:	011b      	lsls	r3, r3, #4
   1b630:	4a29      	ldr	r2, [pc, #164]	; (1b6d8 <appDiscStart+0xb8>)
   1b632:	4413      	add	r3, r2
   1b634:	613b      	str	r3, [r7, #16]

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1b636:	693b      	ldr	r3, [r7, #16]
   1b638:	7adb      	ldrb	r3, [r3, #11]
   1b63a:	2b00      	cmp	r3, #0
   1b63c:	d148      	bne.n	1b6d0 <appDiscStart+0xb0>
  {
    /* get discovery status */
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1b63e:	79fb      	ldrb	r3, [r7, #7]
   1b640:	4618      	mov	r0, r3
   1b642:	f000 fd97 	bl	1c174 <AppDbGetHdl>
   1b646:	60f8      	str	r0, [r7, #12]
   1b648:	68fb      	ldr	r3, [r7, #12]
   1b64a:	2b00      	cmp	r3, #0
   1b64c:	d005      	beq.n	1b65a <appDiscStart+0x3a>
    {
      status = AppDbGetDiscStatus(hdl);
   1b64e:	68f8      	ldr	r0, [r7, #12]
   1b650:	f7f8 f947 	bl	138e2 <AppDbGetDiscStatus>
   1b654:	4603      	mov	r3, r0
   1b656:	75fb      	strb	r3, [r7, #23]
   1b658:	e002      	b.n	1b660 <appDiscStart+0x40>
    }
    else
    {
      status = pAppDiscCb->cmplStatus;
   1b65a:	693b      	ldr	r3, [r7, #16]
   1b65c:	7a5b      	ldrb	r3, [r3, #9]
   1b65e:	75fb      	strb	r3, [r7, #23]
    }
  
    /* if discovery not complete */
    if (status < APP_DISC_CMPL)
   1b660:	7dfb      	ldrb	r3, [r7, #23]
   1b662:	2b02      	cmp	r3, #2
   1b664:	d806      	bhi.n	1b674 <appDiscStart+0x54>
    {
      /* notify application to start discovery */
      (*appDiscCback)(connId, APP_DISC_START);      
   1b666:	4b1d      	ldr	r3, [pc, #116]	; (1b6dc <appDiscStart+0xbc>)
   1b668:	681b      	ldr	r3, [r3, #0]
   1b66a:	79fa      	ldrb	r2, [r7, #7]
   1b66c:	2102      	movs	r1, #2
   1b66e:	4610      	mov	r0, r2
   1b670:	4798      	blx	r3
      {
        (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
      }
    }
  }
}
   1b672:	e02d      	b.n	1b6d0 <appDiscStart+0xb0>
    else if (status != APP_DISC_FAILED)
   1b674:	7dfb      	ldrb	r3, [r7, #23]
   1b676:	2b04      	cmp	r3, #4
   1b678:	d02a      	beq.n	1b6d0 <appDiscStart+0xb0>
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   1b67a:	68fb      	ldr	r3, [r7, #12]
   1b67c:	2b00      	cmp	r3, #0
   1b67e:	d010      	beq.n	1b6a2 <appDiscStart+0x82>
   1b680:	693b      	ldr	r3, [r7, #16]
   1b682:	685b      	ldr	r3, [r3, #4]
   1b684:	2b00      	cmp	r3, #0
   1b686:	d00c      	beq.n	1b6a2 <appDiscStart+0x82>
        memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1b688:	693b      	ldr	r3, [r7, #16]
   1b68a:	685c      	ldr	r4, [r3, #4]
   1b68c:	68f8      	ldr	r0, [r7, #12]
   1b68e:	f7f8 f945 	bl	1391c <AppDbGetHdlList>
   1b692:	4601      	mov	r1, r0
   1b694:	693b      	ldr	r3, [r7, #16]
   1b696:	7a9b      	ldrb	r3, [r3, #10]
   1b698:	005b      	lsls	r3, r3, #1
   1b69a:	461a      	mov	r2, r3
   1b69c:	4620      	mov	r0, r4
   1b69e:	f7f0 fd5f 	bl	c160 <memcpy>
      if (status < APP_DISC_CFG_CMPL)
   1b6a2:	7dfb      	ldrb	r3, [r7, #23]
   1b6a4:	2b06      	cmp	r3, #6
   1b6a6:	d806      	bhi.n	1b6b6 <appDiscStart+0x96>
        (*appDiscCback)(connId, APP_DISC_CFG_START);          
   1b6a8:	4b0c      	ldr	r3, [pc, #48]	; (1b6dc <appDiscStart+0xbc>)
   1b6aa:	681b      	ldr	r3, [r3, #0]
   1b6ac:	79fa      	ldrb	r2, [r7, #7]
   1b6ae:	2105      	movs	r1, #5
   1b6b0:	4610      	mov	r0, r2
   1b6b2:	4798      	blx	r3
}
   1b6b4:	e00c      	b.n	1b6d0 <appDiscStart+0xb0>
      else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1b6b6:	7dfb      	ldrb	r3, [r7, #23]
   1b6b8:	2b07      	cmp	r3, #7
   1b6ba:	d109      	bne.n	1b6d0 <appDiscStart+0xb0>
   1b6bc:	693b      	ldr	r3, [r7, #16]
   1b6be:	7a1b      	ldrb	r3, [r3, #8]
   1b6c0:	2b00      	cmp	r3, #0
   1b6c2:	d105      	bne.n	1b6d0 <appDiscStart+0xb0>
        (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1b6c4:	4b05      	ldr	r3, [pc, #20]	; (1b6dc <appDiscStart+0xbc>)
   1b6c6:	681b      	ldr	r3, [r3, #0]
   1b6c8:	79fa      	ldrb	r2, [r7, #7]
   1b6ca:	2106      	movs	r1, #6
   1b6cc:	4610      	mov	r0, r2
   1b6ce:	4798      	blx	r3
}
   1b6d0:	bf00      	nop
   1b6d2:	371c      	adds	r7, #28
   1b6d4:	46bd      	mov	sp, r7
   1b6d6:	bd90      	pop	{r4, r7, pc}
   1b6d8:	100050ec 	.word	0x100050ec
   1b6dc:	1000516c 	.word	0x1000516c

0001b6e0 <appDiscConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnOpen(dmEvt_t *pMsg)
{
   1b6e0:	b580      	push	{r7, lr}
   1b6e2:	b084      	sub	sp, #16
   1b6e4:	af00      	add	r7, sp, #0
   1b6e6:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b6e8:	687b      	ldr	r3, [r7, #4]
   1b6ea:	881b      	ldrh	r3, [r3, #0]
   1b6ec:	b2db      	uxtb	r3, r3
   1b6ee:	3b01      	subs	r3, #1
   1b6f0:	011b      	lsls	r3, r3, #4
   1b6f2:	4a1b      	ldr	r2, [pc, #108]	; (1b760 <appDiscConnOpen+0x80>)
   1b6f4:	4413      	add	r3, r2
   1b6f6:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->alreadySecure = FALSE;
   1b6f8:	68fb      	ldr	r3, [r7, #12]
   1b6fa:	2200      	movs	r2, #0
   1b6fc:	731a      	strb	r2, [r3, #12]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1b6fe:	68fb      	ldr	r3, [r7, #12]
   1b700:	2200      	movs	r2, #0
   1b702:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   1b704:	68fb      	ldr	r3, [r7, #12]
   1b706:	2200      	movs	r2, #0
   1b708:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   1b70a:	68fb      	ldr	r3, [r7, #12]
   1b70c:	2200      	movs	r2, #0
   1b70e:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   1b710:	68fb      	ldr	r3, [r7, #12]
   1b712:	2200      	movs	r2, #0
   1b714:	739a      	strb	r2, [r3, #14]
  
  /* tell app to set up handle list */
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1b716:	4b13      	ldr	r3, [pc, #76]	; (1b764 <appDiscConnOpen+0x84>)
   1b718:	681b      	ldr	r3, [r3, #0]
   1b71a:	687a      	ldr	r2, [r7, #4]
   1b71c:	8812      	ldrh	r2, [r2, #0]
   1b71e:	b2d2      	uxtb	r2, r2
   1b720:	2100      	movs	r1, #0
   1b722:	4610      	mov	r0, r2
   1b724:	4798      	blx	r3
  
  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1b726:	68fb      	ldr	r3, [r7, #12]
   1b728:	685b      	ldr	r3, [r3, #4]
   1b72a:	2b00      	cmp	r3, #0
   1b72c:	d008      	beq.n	1b740 <appDiscConnOpen+0x60>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1b72e:	68fb      	ldr	r3, [r7, #12]
   1b730:	6858      	ldr	r0, [r3, #4]
   1b732:	68fb      	ldr	r3, [r7, #12]
   1b734:	7a9b      	ldrb	r3, [r3, #10]
   1b736:	005b      	lsls	r3, r3, #1
   1b738:	461a      	mov	r2, r3
   1b73a:	2100      	movs	r1, #0
   1b73c:	f7f0 fe0e 	bl	c35c <memset>
  }
  
  /* if not waiting for security start discovery/configuration */
  if (!pAppDiscCfg->waitForSec)
   1b740:	4b09      	ldr	r3, [pc, #36]	; (1b768 <appDiscConnOpen+0x88>)
   1b742:	681b      	ldr	r3, [r3, #0]
   1b744:	781b      	ldrb	r3, [r3, #0]
   1b746:	2b00      	cmp	r3, #0
   1b748:	d105      	bne.n	1b756 <appDiscConnOpen+0x76>
  {
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b74a:	687b      	ldr	r3, [r7, #4]
   1b74c:	881b      	ldrh	r3, [r3, #0]
   1b74e:	b2db      	uxtb	r3, r3
   1b750:	4618      	mov	r0, r3
   1b752:	f7ff ff65 	bl	1b620 <appDiscStart>
  }
}
   1b756:	bf00      	nop
   1b758:	3710      	adds	r7, #16
   1b75a:	46bd      	mov	sp, r7
   1b75c:	bd80      	pop	{r7, pc}
   1b75e:	bf00      	nop
   1b760:	100050ec 	.word	0x100050ec
   1b764:	1000516c 	.word	0x1000516c
   1b768:	10005d60 	.word	0x10005d60

0001b76c <appDiscConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnClose(dmEvt_t *pMsg)
{
   1b76c:	b580      	push	{r7, lr}
   1b76e:	b084      	sub	sp, #16
   1b770:	af00      	add	r7, sp, #0
   1b772:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b774:	687b      	ldr	r3, [r7, #4]
   1b776:	881b      	ldrh	r3, [r3, #0]
   1b778:	b2db      	uxtb	r3, r3
   1b77a:	3b01      	subs	r3, #1
   1b77c:	011b      	lsls	r3, r3, #4
   1b77e:	4a12      	ldr	r2, [pc, #72]	; (1b7c8 <appDiscConnClose+0x5c>)
   1b780:	4413      	add	r3, r2
   1b782:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1b784:	68fb      	ldr	r3, [r7, #12]
   1b786:	2200      	movs	r2, #0
   1b788:	72da      	strb	r2, [r3, #11]

  appDbHdl_t  hdl;
  
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1b78a:	687b      	ldr	r3, [r7, #4]
   1b78c:	881b      	ldrh	r3, [r3, #0]
   1b78e:	b2db      	uxtb	r3, r3
   1b790:	4618      	mov	r0, r3
   1b792:	f000 fcef 	bl	1c174 <AppDbGetHdl>
   1b796:	60b8      	str	r0, [r7, #8]
   1b798:	68bb      	ldr	r3, [r7, #8]
   1b79a:	2b00      	cmp	r3, #0
   1b79c:	d003      	beq.n	1b7a6 <appDiscConnClose+0x3a>
  {
    // reset discovery status
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   1b79e:	2100      	movs	r1, #0
   1b7a0:	68b8      	ldr	r0, [r7, #8]
   1b7a2:	f7f8 f8ab 	bl	138fc <AppDbSetDiscStatus>
  }


  if (pAppDiscCb->pDiscCb != NULL)
   1b7a6:	68fb      	ldr	r3, [r7, #12]
   1b7a8:	681b      	ldr	r3, [r3, #0]
   1b7aa:	2b00      	cmp	r3, #0
   1b7ac:	d007      	beq.n	1b7be <appDiscConnClose+0x52>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1b7ae:	68fb      	ldr	r3, [r7, #12]
   1b7b0:	681b      	ldr	r3, [r3, #0]
   1b7b2:	4618      	mov	r0, r3
   1b7b4:	f7f9 fcf6 	bl	151a4 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1b7b8:	68fb      	ldr	r3, [r7, #12]
   1b7ba:	2200      	movs	r2, #0
   1b7bc:	601a      	str	r2, [r3, #0]
  }
}
   1b7be:	bf00      	nop
   1b7c0:	3710      	adds	r7, #16
   1b7c2:	46bd      	mov	sp, r7
   1b7c4:	bd80      	pop	{r7, pc}
   1b7c6:	bf00      	nop
   1b7c8:	100050ec 	.word	0x100050ec

0001b7cc <appDiscPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscPairCmpl(dmEvt_t *pMsg)
{
   1b7cc:	b580      	push	{r7, lr}
   1b7ce:	b084      	sub	sp, #16
   1b7d0:	af00      	add	r7, sp, #0
   1b7d2:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b7d4:	687b      	ldr	r3, [r7, #4]
   1b7d6:	881b      	ldrh	r3, [r3, #0]
   1b7d8:	b2db      	uxtb	r3, r3
   1b7da:	3b01      	subs	r3, #1
   1b7dc:	011b      	lsls	r3, r3, #4
   1b7de:	4a30      	ldr	r2, [pc, #192]	; (1b8a0 <appDiscPairCmpl+0xd4>)
   1b7e0:	4413      	add	r3, r2
   1b7e2:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* procedures triggered by security are only executed once */
  if (pAppDiscCb->alreadySecure)
   1b7e4:	68fb      	ldr	r3, [r7, #12]
   1b7e6:	7b1b      	ldrb	r3, [r3, #12]
   1b7e8:	2b00      	cmp	r3, #0
   1b7ea:	d154      	bne.n	1b896 <appDiscPairCmpl+0xca>
  {
    return;
  }

  /* if we are now bonded and discovery/configuration was performed before bonding */
  if (appCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   1b7ec:	687b      	ldr	r3, [r7, #4]
   1b7ee:	881b      	ldrh	r3, [r3, #0]
   1b7f0:	b2db      	uxtb	r3, r3
   1b7f2:	4618      	mov	r0, r3
   1b7f4:	f000 fba6 	bl	1bf44 <appCheckBonded>
   1b7f8:	4603      	mov	r3, r0
   1b7fa:	2b00      	cmp	r3, #0
   1b7fc:	d03a      	beq.n	1b874 <appDiscPairCmpl+0xa8>
   1b7fe:	68fb      	ldr	r3, [r7, #12]
   1b800:	7a5b      	ldrb	r3, [r3, #9]
   1b802:	2b00      	cmp	r3, #0
   1b804:	d036      	beq.n	1b874 <appDiscPairCmpl+0xa8>
  {
    if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1b806:	687b      	ldr	r3, [r7, #4]
   1b808:	881b      	ldrh	r3, [r3, #0]
   1b80a:	b2db      	uxtb	r3, r3
   1b80c:	4618      	mov	r0, r3
   1b80e:	f000 fcb1 	bl	1c174 <AppDbGetHdl>
   1b812:	60b8      	str	r0, [r7, #8]
   1b814:	68bb      	ldr	r3, [r7, #8]
   1b816:	2b00      	cmp	r3, #0
   1b818:	d017      	beq.n	1b84a <appDiscPairCmpl+0x7e>
    {
      /* store discovery status */
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   1b81a:	68fb      	ldr	r3, [r7, #12]
   1b81c:	7a5b      	ldrb	r3, [r3, #9]
   1b81e:	4619      	mov	r1, r3
   1b820:	68b8      	ldr	r0, [r7, #8]
   1b822:	f7f8 f86b 	bl	138fc <AppDbSetDiscStatus>

      /* store handle list */
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   1b826:	68fb      	ldr	r3, [r7, #12]
   1b828:	7a5b      	ldrb	r3, [r3, #9]
   1b82a:	2b03      	cmp	r3, #3
   1b82c:	d003      	beq.n	1b836 <appDiscPairCmpl+0x6a>
   1b82e:	68fb      	ldr	r3, [r7, #12]
   1b830:	7a5b      	ldrb	r3, [r3, #9]
   1b832:	2b07      	cmp	r3, #7
   1b834:	d109      	bne.n	1b84a <appDiscPairCmpl+0x7e>
      {
        if (pAppDiscCb->pHdlList != NULL)
   1b836:	68fb      	ldr	r3, [r7, #12]
   1b838:	685b      	ldr	r3, [r3, #4]
   1b83a:	2b00      	cmp	r3, #0
   1b83c:	d005      	beq.n	1b84a <appDiscPairCmpl+0x7e>
        {
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1b83e:	68fb      	ldr	r3, [r7, #12]
   1b840:	685b      	ldr	r3, [r3, #4]
   1b842:	4619      	mov	r1, r3
   1b844:	68b8      	ldr	r0, [r7, #8]
   1b846:	f7f8 f875 	bl	13934 <AppDbSetHdlList>
        }
      }
    }
    
    /* if configuration was waiting for security */
    if (pAppDiscCb->secRequired)
   1b84a:	68fb      	ldr	r3, [r7, #12]
   1b84c:	7b5b      	ldrb	r3, [r3, #13]
   1b84e:	2b00      	cmp	r3, #0
   1b850:	d01c      	beq.n	1b88c <appDiscPairCmpl+0xc0>
    {
      pAppDiscCb->secRequired = FALSE;
   1b852:	68fb      	ldr	r3, [r7, #12]
   1b854:	2200      	movs	r2, #0
   1b856:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1b858:	68fb      	ldr	r3, [r7, #12]
   1b85a:	681b      	ldr	r3, [r3, #0]
   1b85c:	2b00      	cmp	r3, #0
   1b85e:	d015      	beq.n	1b88c <appDiscPairCmpl+0xc0>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1b860:	687b      	ldr	r3, [r7, #4]
   1b862:	881b      	ldrh	r3, [r3, #0]
   1b864:	b2da      	uxtb	r2, r3
   1b866:	68fb      	ldr	r3, [r7, #12]
   1b868:	681b      	ldr	r3, [r3, #0]
   1b86a:	4619      	mov	r1, r3
   1b86c:	4610      	mov	r0, r2
   1b86e:	f7f1 f8f3 	bl	ca58 <AttcDiscConfigResume>
    if (pAppDiscCb->secRequired)
   1b872:	e00b      	b.n	1b88c <appDiscPairCmpl+0xc0>
    }
  } 
  else {
    
    /* if waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1b874:	4b0b      	ldr	r3, [pc, #44]	; (1b8a4 <appDiscPairCmpl+0xd8>)
   1b876:	681b      	ldr	r3, [r3, #0]
   1b878:	781b      	ldrb	r3, [r3, #0]
   1b87a:	2b00      	cmp	r3, #0
   1b87c:	d007      	beq.n	1b88e <appDiscPairCmpl+0xc2>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b87e:	687b      	ldr	r3, [r7, #4]
   1b880:	881b      	ldrh	r3, [r3, #0]
   1b882:	b2db      	uxtb	r3, r3
   1b884:	4618      	mov	r0, r3
   1b886:	f7ff fecb 	bl	1b620 <appDiscStart>
   1b88a:	e000      	b.n	1b88e <appDiscPairCmpl+0xc2>
    if (pAppDiscCb->secRequired)
   1b88c:	bf00      	nop
    }
  }  
    
  pAppDiscCb->alreadySecure = TRUE;
   1b88e:	68fb      	ldr	r3, [r7, #12]
   1b890:	2201      	movs	r2, #1
   1b892:	731a      	strb	r2, [r3, #12]
   1b894:	e000      	b.n	1b898 <appDiscPairCmpl+0xcc>
    return;
   1b896:	bf00      	nop
}
   1b898:	3710      	adds	r7, #16
   1b89a:	46bd      	mov	sp, r7
   1b89c:	bd80      	pop	{r7, pc}
   1b89e:	bf00      	nop
   1b8a0:	100050ec 	.word	0x100050ec
   1b8a4:	10005d60 	.word	0x10005d60

0001b8a8 <appDiscEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscEncryptInd(dmEvt_t *pMsg)
{
   1b8a8:	b580      	push	{r7, lr}
   1b8aa:	b084      	sub	sp, #16
   1b8ac:	af00      	add	r7, sp, #0
   1b8ae:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b8b0:	687b      	ldr	r3, [r7, #4]
   1b8b2:	881b      	ldrh	r3, [r3, #0]
   1b8b4:	b2db      	uxtb	r3, r3
   1b8b6:	3b01      	subs	r3, #1
   1b8b8:	011b      	lsls	r3, r3, #4
   1b8ba:	4a19      	ldr	r2, [pc, #100]	; (1b920 <appDiscEncryptInd+0x78>)
   1b8bc:	4413      	add	r3, r2
   1b8be:	60fb      	str	r3, [r7, #12]

  /* if encrypted with ltk */
  if (pMsg->encryptInd.usingLtk)
   1b8c0:	687b      	ldr	r3, [r7, #4]
   1b8c2:	791b      	ldrb	r3, [r3, #4]
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	d028      	beq.n	1b91a <appDiscEncryptInd+0x72>
  {
    /* procedures triggered by security are only executed once */
    if (pAppDiscCb->alreadySecure)
   1b8c8:	68fb      	ldr	r3, [r7, #12]
   1b8ca:	7b1b      	ldrb	r3, [r3, #12]
   1b8cc:	2b00      	cmp	r3, #0
   1b8ce:	d123      	bne.n	1b918 <appDiscEncryptInd+0x70>
    {
      return;
    }

    /* if we waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1b8d0:	4b14      	ldr	r3, [pc, #80]	; (1b924 <appDiscEncryptInd+0x7c>)
   1b8d2:	681b      	ldr	r3, [r3, #0]
   1b8d4:	781b      	ldrb	r3, [r3, #0]
   1b8d6:	2b00      	cmp	r3, #0
   1b8d8:	d006      	beq.n	1b8e8 <appDiscEncryptInd+0x40>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b8da:	687b      	ldr	r3, [r7, #4]
   1b8dc:	881b      	ldrh	r3, [r3, #0]
   1b8de:	b2db      	uxtb	r3, r3
   1b8e0:	4618      	mov	r0, r3
   1b8e2:	f7ff fe9d 	bl	1b620 <appDiscStart>
   1b8e6:	e013      	b.n	1b910 <appDiscEncryptInd+0x68>
    }
    /* else if configuration was waiting for security */
    else if (pAppDiscCb->secRequired)
   1b8e8:	68fb      	ldr	r3, [r7, #12]
   1b8ea:	7b5b      	ldrb	r3, [r3, #13]
   1b8ec:	2b00      	cmp	r3, #0
   1b8ee:	d00f      	beq.n	1b910 <appDiscEncryptInd+0x68>
    {
      pAppDiscCb->secRequired = FALSE;
   1b8f0:	68fb      	ldr	r3, [r7, #12]
   1b8f2:	2200      	movs	r2, #0
   1b8f4:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1b8f6:	68fb      	ldr	r3, [r7, #12]
   1b8f8:	681b      	ldr	r3, [r3, #0]
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	d008      	beq.n	1b910 <appDiscEncryptInd+0x68>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1b8fe:	687b      	ldr	r3, [r7, #4]
   1b900:	881b      	ldrh	r3, [r3, #0]
   1b902:	b2da      	uxtb	r2, r3
   1b904:	68fb      	ldr	r3, [r7, #12]
   1b906:	681b      	ldr	r3, [r3, #0]
   1b908:	4619      	mov	r1, r3
   1b90a:	4610      	mov	r0, r2
   1b90c:	f7f1 f8a4 	bl	ca58 <AttcDiscConfigResume>
      }
    }
      
    pAppDiscCb->alreadySecure = TRUE;
   1b910:	68fb      	ldr	r3, [r7, #12]
   1b912:	2201      	movs	r2, #1
   1b914:	731a      	strb	r2, [r3, #12]
   1b916:	e000      	b.n	1b91a <appDiscEncryptInd+0x72>
      return;
   1b918:	bf00      	nop
  }
}
   1b91a:	3710      	adds	r7, #16
   1b91c:	46bd      	mov	sp, r7
   1b91e:	bd80      	pop	{r7, pc}
   1b920:	100050ec 	.word	0x100050ec
   1b924:	10005d60 	.word	0x10005d60

0001b928 <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   1b928:	b580      	push	{r7, lr}
   1b92a:	b082      	sub	sp, #8
   1b92c:	af00      	add	r7, sp, #0
   1b92e:	6078      	str	r0, [r7, #4]
  switch(pMsg->hdr.event)
   1b930:	687b      	ldr	r3, [r7, #4]
   1b932:	789b      	ldrb	r3, [r3, #2]
   1b934:	3b27      	subs	r3, #39	; 0x27
   1b936:	2b05      	cmp	r3, #5
   1b938:	d81e      	bhi.n	1b978 <AppDiscProcDmMsg+0x50>
   1b93a:	a201      	add	r2, pc, #4	; (adr r2, 1b940 <AppDiscProcDmMsg+0x18>)
   1b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b940:	0001b959 	.word	0x0001b959
   1b944:	0001b961 	.word	0x0001b961
   1b948:	0001b979 	.word	0x0001b979
   1b94c:	0001b969 	.word	0x0001b969
   1b950:	0001b979 	.word	0x0001b979
   1b954:	0001b971 	.word	0x0001b971
  {
    case DM_CONN_OPEN_IND:
      appDiscConnOpen(pMsg);
   1b958:	6878      	ldr	r0, [r7, #4]
   1b95a:	f7ff fec1 	bl	1b6e0 <appDiscConnOpen>
      break;
   1b95e:	e00c      	b.n	1b97a <AppDiscProcDmMsg+0x52>

    case DM_CONN_CLOSE_IND:
      appDiscConnClose(pMsg);
   1b960:	6878      	ldr	r0, [r7, #4]
   1b962:	f7ff ff03 	bl	1b76c <appDiscConnClose>
      break;
   1b966:	e008      	b.n	1b97a <AppDiscProcDmMsg+0x52>

    case DM_SEC_PAIR_CMPL_IND:
      appDiscPairCmpl(pMsg);
   1b968:	6878      	ldr	r0, [r7, #4]
   1b96a:	f7ff ff2f 	bl	1b7cc <appDiscPairCmpl>
      break;
   1b96e:	e004      	b.n	1b97a <AppDiscProcDmMsg+0x52>
      
    case DM_SEC_ENCRYPT_IND:
      appDiscEncryptInd(pMsg);
   1b970:	6878      	ldr	r0, [r7, #4]
   1b972:	f7ff ff99 	bl	1b8a8 <appDiscEncryptInd>
      break;
   1b976:	e000      	b.n	1b97a <AppDiscProcDmMsg+0x52>
      
    default:
      break;
   1b978:	bf00      	nop
  }
}
   1b97a:	bf00      	nop
   1b97c:	3708      	adds	r7, #8
   1b97e:	46bd      	mov	sp, r7
   1b980:	bd80      	pop	{r7, pc}
   1b982:	bf00      	nop

0001b984 <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   1b984:	b580      	push	{r7, lr}
   1b986:	b084      	sub	sp, #16
   1b988:	af00      	add	r7, sp, #0
   1b98a:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b98c:	687b      	ldr	r3, [r7, #4]
   1b98e:	881b      	ldrh	r3, [r3, #0]
   1b990:	b2db      	uxtb	r3, r3
   1b992:	3b01      	subs	r3, #1
   1b994:	011b      	lsls	r3, r3, #4
   1b996:	4a5c      	ldr	r2, [pc, #368]	; (1bb08 <AppDiscProcAttMsg+0x184>)
   1b998:	4413      	add	r3, r2
   1b99a:	60fb      	str	r3, [r7, #12]
  uint8_t status;
  
  if (pAppDiscCb->inProgress == APP_DISC_IN_PROGRESS)
   1b99c:	68fb      	ldr	r3, [r7, #12]
   1b99e:	7adb      	ldrb	r3, [r3, #11]
   1b9a0:	2b01      	cmp	r3, #1
   1b9a2:	d157      	bne.n	1ba54 <AppDiscProcAttMsg+0xd0>
  {
    /* service discovery */
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   1b9a4:	687b      	ldr	r3, [r7, #4]
   1b9a6:	789b      	ldrb	r3, [r3, #2]
   1b9a8:	2b03      	cmp	r3, #3
   1b9aa:	d126      	bne.n	1b9fa <AppDiscProcAttMsg+0x76>
    {
      /* continue with service discovery */
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   1b9ac:	68fb      	ldr	r3, [r7, #12]
   1b9ae:	681b      	ldr	r3, [r3, #0]
   1b9b0:	6879      	ldr	r1, [r7, #4]
   1b9b2:	4618      	mov	r0, r3
   1b9b4:	f7f0 ff2c 	bl	c810 <AttcDiscServiceCmpl>
   1b9b8:	4603      	mov	r3, r0
   1b9ba:	72fb      	strb	r3, [r7, #11]
      
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   1b9bc:	7afb      	ldrb	r3, [r7, #11]
   1b9be:	4619      	mov	r1, r3
   1b9c0:	4852      	ldr	r0, [pc, #328]	; (1bb0c <AppDiscProcAttMsg+0x188>)
   1b9c2:	f7fe f89b 	bl	19afc <WsfTrace>
      
      /* if discovery complete  and successful */
      if (status == ATT_SUCCESS)
   1b9c6:	7afb      	ldrb	r3, [r7, #11]
   1b9c8:	2b00      	cmp	r3, #0
   1b9ca:	d109      	bne.n	1b9e0 <AppDiscProcAttMsg+0x5c>
      {
        /* proceed with characteristic discovery */
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1b9cc:	687b      	ldr	r3, [r7, #4]
   1b9ce:	881b      	ldrh	r3, [r3, #0]
   1b9d0:	b2da      	uxtb	r2, r3
   1b9d2:	68fb      	ldr	r3, [r7, #12]
   1b9d4:	681b      	ldr	r3, [r3, #0]
   1b9d6:	4619      	mov	r1, r3
   1b9d8:	4610      	mov	r0, r2
   1b9da:	f7f0 ff32 	bl	c842 <AttcDiscCharStart>
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
      }
    }
  }
}
   1b9de:	e08e      	b.n	1bafe <AppDiscProcAttMsg+0x17a>
      else if (status != ATT_CONTINUING)
   1b9e0:	7afb      	ldrb	r3, [r7, #11]
   1b9e2:	2b78      	cmp	r3, #120	; 0x78
   1b9e4:	f000 808b 	beq.w	1bafe <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1b9e8:	4b49      	ldr	r3, [pc, #292]	; (1bb10 <AppDiscProcAttMsg+0x18c>)
   1b9ea:	681b      	ldr	r3, [r3, #0]
   1b9ec:	687a      	ldr	r2, [r7, #4]
   1b9ee:	8812      	ldrh	r2, [r2, #0]
   1b9f0:	b2d2      	uxtb	r2, r2
   1b9f2:	2104      	movs	r1, #4
   1b9f4:	4610      	mov	r0, r2
   1b9f6:	4798      	blx	r3
}
   1b9f8:	e081      	b.n	1bafe <AppDiscProcAttMsg+0x17a>
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1b9fa:	687b      	ldr	r3, [r7, #4]
   1b9fc:	789b      	ldrb	r3, [r3, #2]
   1b9fe:	2b04      	cmp	r3, #4
   1ba00:	d003      	beq.n	1ba0a <AppDiscProcAttMsg+0x86>
             pMsg->hdr.event == ATTC_FIND_INFO_RSP)
   1ba02:	687b      	ldr	r3, [r7, #4]
   1ba04:	789b      	ldrb	r3, [r3, #2]
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1ba06:	2b02      	cmp	r3, #2
   1ba08:	d179      	bne.n	1bafe <AppDiscProcAttMsg+0x17a>
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   1ba0a:	68fb      	ldr	r3, [r7, #12]
   1ba0c:	681b      	ldr	r3, [r3, #0]
   1ba0e:	6879      	ldr	r1, [r7, #4]
   1ba10:	4618      	mov	r0, r3
   1ba12:	f7f0 ff29 	bl	c868 <AttcDiscCharCmpl>
   1ba16:	4603      	mov	r3, r0
   1ba18:	72fb      	strb	r3, [r7, #11]
      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   1ba1a:	7afb      	ldrb	r3, [r7, #11]
   1ba1c:	4619      	mov	r1, r3
   1ba1e:	483d      	ldr	r0, [pc, #244]	; (1bb14 <AppDiscProcAttMsg+0x190>)
   1ba20:	f7fe f86c 	bl	19afc <WsfTrace>
      if (status == ATT_SUCCESS)
   1ba24:	7afb      	ldrb	r3, [r7, #11]
   1ba26:	2b00      	cmp	r3, #0
   1ba28:	d108      	bne.n	1ba3c <AppDiscProcAttMsg+0xb8>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   1ba2a:	4b39      	ldr	r3, [pc, #228]	; (1bb10 <AppDiscProcAttMsg+0x18c>)
   1ba2c:	681b      	ldr	r3, [r3, #0]
   1ba2e:	687a      	ldr	r2, [r7, #4]
   1ba30:	8812      	ldrh	r2, [r2, #0]
   1ba32:	b2d2      	uxtb	r2, r2
   1ba34:	2103      	movs	r1, #3
   1ba36:	4610      	mov	r0, r2
   1ba38:	4798      	blx	r3
}
   1ba3a:	e060      	b.n	1bafe <AppDiscProcAttMsg+0x17a>
      else if (status != ATT_CONTINUING)
   1ba3c:	7afb      	ldrb	r3, [r7, #11]
   1ba3e:	2b78      	cmp	r3, #120	; 0x78
   1ba40:	d05d      	beq.n	1bafe <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1ba42:	4b33      	ldr	r3, [pc, #204]	; (1bb10 <AppDiscProcAttMsg+0x18c>)
   1ba44:	681b      	ldr	r3, [r3, #0]
   1ba46:	687a      	ldr	r2, [r7, #4]
   1ba48:	8812      	ldrh	r2, [r2, #0]
   1ba4a:	b2d2      	uxtb	r2, r2
   1ba4c:	2104      	movs	r1, #4
   1ba4e:	4610      	mov	r0, r2
   1ba50:	4798      	blx	r3
}
   1ba52:	e054      	b.n	1bafe <AppDiscProcAttMsg+0x17a>
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1ba54:	68fb      	ldr	r3, [r7, #12]
   1ba56:	7adb      	ldrb	r3, [r3, #11]
   1ba58:	2b02      	cmp	r3, #2
   1ba5a:	d150      	bne.n	1bafe <AppDiscProcAttMsg+0x17a>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1ba5c:	687b      	ldr	r3, [r7, #4]
   1ba5e:	789b      	ldrb	r3, [r3, #2]
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1ba60:	2b05      	cmp	r3, #5
   1ba62:	d003      	beq.n	1ba6c <AppDiscProcAttMsg+0xe8>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1ba64:	687b      	ldr	r3, [r7, #4]
   1ba66:	789b      	ldrb	r3, [r3, #2]
   1ba68:	2b09      	cmp	r3, #9
   1ba6a:	d148      	bne.n	1bafe <AppDiscProcAttMsg+0x17a>
    if (pAppDiscCb->scPending)
   1ba6c:	68fb      	ldr	r3, [r7, #12]
   1ba6e:	7b9b      	ldrb	r3, [r3, #14]
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d00c      	beq.n	1ba8e <AppDiscProcAttMsg+0x10a>
      pAppDiscCb->scPending = FALSE;
   1ba74:	68fb      	ldr	r3, [r7, #12]
   1ba76:	2200      	movs	r2, #0
   1ba78:	739a      	strb	r2, [r3, #14]
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   1ba7a:	68fb      	ldr	r3, [r7, #12]
   1ba7c:	2200      	movs	r2, #0
   1ba7e:	72da      	strb	r2, [r3, #11]
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1ba80:	687b      	ldr	r3, [r7, #4]
   1ba82:	881b      	ldrh	r3, [r3, #0]
   1ba84:	b2db      	uxtb	r3, r3
   1ba86:	4618      	mov	r0, r3
   1ba88:	f7ff fdca 	bl	1b620 <appDiscStart>
}
   1ba8c:	e037      	b.n	1bafe <AppDiscProcAttMsg+0x17a>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1ba8e:	687b      	ldr	r3, [r7, #4]
   1ba90:	78db      	ldrb	r3, [r3, #3]
   1ba92:	2b05      	cmp	r3, #5
   1ba94:	d003      	beq.n	1ba9e <AppDiscProcAttMsg+0x11a>
   1ba96:	687b      	ldr	r3, [r7, #4]
   1ba98:	78db      	ldrb	r3, [r3, #3]
   1ba9a:	2b0f      	cmp	r3, #15
   1ba9c:	d114      	bne.n	1bac8 <AppDiscProcAttMsg+0x144>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1ba9e:	687b      	ldr	r3, [r7, #4]
   1baa0:	881b      	ldrh	r3, [r3, #0]
   1baa2:	b2db      	uxtb	r3, r3
   1baa4:	4618      	mov	r0, r3
   1baa6:	f7f4 f945 	bl	fd34 <DmConnSecLevel>
   1baaa:	4603      	mov	r3, r0
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1baac:	2b00      	cmp	r3, #0
   1baae:	d10b      	bne.n	1bac8 <AppDiscProcAttMsg+0x144>
      pAppDiscCb->secRequired = TRUE;
   1bab0:	68fb      	ldr	r3, [r7, #12]
   1bab2:	2201      	movs	r2, #1
   1bab4:	735a      	strb	r2, [r3, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1bab6:	4b16      	ldr	r3, [pc, #88]	; (1bb10 <AppDiscProcAttMsg+0x18c>)
   1bab8:	681b      	ldr	r3, [r3, #0]
   1baba:	687a      	ldr	r2, [r7, #4]
   1babc:	8812      	ldrh	r2, [r2, #0]
   1babe:	b2d2      	uxtb	r2, r2
   1bac0:	2101      	movs	r1, #1
   1bac2:	4610      	mov	r0, r2
   1bac4:	4798      	blx	r3
}
   1bac6:	e01a      	b.n	1bafe <AppDiscProcAttMsg+0x17a>
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1bac8:	687b      	ldr	r3, [r7, #4]
   1baca:	881b      	ldrh	r3, [r3, #0]
   1bacc:	b2da      	uxtb	r2, r3
   1bace:	68fb      	ldr	r3, [r7, #12]
   1bad0:	681b      	ldr	r3, [r3, #0]
   1bad2:	4619      	mov	r1, r3
   1bad4:	4610      	mov	r0, r2
   1bad6:	f7f0 ffbb 	bl	ca50 <AttcDiscConfigCmpl>
   1bada:	4603      	mov	r3, r0
   1badc:	72fb      	strb	r3, [r7, #11]
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   1bade:	7afb      	ldrb	r3, [r7, #11]
   1bae0:	4619      	mov	r1, r3
   1bae2:	480d      	ldr	r0, [pc, #52]	; (1bb18 <AppDiscProcAttMsg+0x194>)
   1bae4:	f7fe f80a 	bl	19afc <WsfTrace>
      if (status != ATT_CONTINUING)
   1bae8:	7afb      	ldrb	r3, [r7, #11]
   1baea:	2b78      	cmp	r3, #120	; 0x78
   1baec:	d007      	beq.n	1bafe <AppDiscProcAttMsg+0x17a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1baee:	4b08      	ldr	r3, [pc, #32]	; (1bb10 <AppDiscProcAttMsg+0x18c>)
   1baf0:	681b      	ldr	r3, [r3, #0]
   1baf2:	687a      	ldr	r2, [r7, #4]
   1baf4:	8812      	ldrh	r2, [r2, #0]
   1baf6:	b2d2      	uxtb	r2, r2
   1baf8:	2107      	movs	r1, #7
   1bafa:	4610      	mov	r0, r2
   1bafc:	4798      	blx	r3
}
   1bafe:	bf00      	nop
   1bb00:	3710      	adds	r7, #16
   1bb02:	46bd      	mov	sp, r7
   1bb04:	bd80      	pop	{r7, pc}
   1bb06:	bf00      	nop
   1bb08:	100050ec 	.word	0x100050ec
   1bb0c:	00021c94 	.word	0x00021c94
   1bb10:	1000516c 	.word	0x1000516c
   1bb14:	00021cb8 	.word	0x00021cb8
   1bb18:	00021cd8 	.word	0x00021cd8

0001bb1c <AppDiscInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscInit(void)
{
   1bb1c:	b480      	push	{r7}
   1bb1e:	b083      	sub	sp, #12
   1bb20:	af00      	add	r7, sp, #0
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
   1bb22:	2300      	movs	r3, #0
   1bb24:	71fb      	strb	r3, [r7, #7]
   1bb26:	e00f      	b.n	1bb48 <AppDiscInit+0x2c>
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1bb28:	79fb      	ldrb	r3, [r7, #7]
   1bb2a:	4a0c      	ldr	r2, [pc, #48]	; (1bb5c <AppDiscInit+0x40>)
   1bb2c:	011b      	lsls	r3, r3, #4
   1bb2e:	4413      	add	r3, r2
   1bb30:	330b      	adds	r3, #11
   1bb32:	2200      	movs	r2, #0
   1bb34:	701a      	strb	r2, [r3, #0]
    appDiscCb[i].pDiscCb = NULL;
   1bb36:	79fb      	ldrb	r3, [r7, #7]
   1bb38:	4a08      	ldr	r2, [pc, #32]	; (1bb5c <AppDiscInit+0x40>)
   1bb3a:	011b      	lsls	r3, r3, #4
   1bb3c:	4413      	add	r3, r2
   1bb3e:	2200      	movs	r2, #0
   1bb40:	601a      	str	r2, [r3, #0]
  for (i=0; i<DM_CONN_MAX; i++)
   1bb42:	79fb      	ldrb	r3, [r7, #7]
   1bb44:	3301      	adds	r3, #1
   1bb46:	71fb      	strb	r3, [r7, #7]
   1bb48:	79fb      	ldrb	r3, [r7, #7]
   1bb4a:	2b07      	cmp	r3, #7
   1bb4c:	d9ec      	bls.n	1bb28 <AppDiscInit+0xc>
  }
}
   1bb4e:	bf00      	nop
   1bb50:	370c      	adds	r7, #12
   1bb52:	46bd      	mov	sp, r7
   1bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb58:	4770      	bx	lr
   1bb5a:	bf00      	nop
   1bb5c:	100050ec 	.word	0x100050ec

0001bb60 <AppDiscRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
   1bb60:	b480      	push	{r7}
   1bb62:	b083      	sub	sp, #12
   1bb64:	af00      	add	r7, sp, #0
   1bb66:	6078      	str	r0, [r7, #4]
  appDiscCback = cback;
   1bb68:	4a04      	ldr	r2, [pc, #16]	; (1bb7c <AppDiscRegister+0x1c>)
   1bb6a:	687b      	ldr	r3, [r7, #4]
   1bb6c:	6013      	str	r3, [r2, #0]
}
   1bb6e:	bf00      	nop
   1bb70:	370c      	adds	r7, #12
   1bb72:	46bd      	mov	sp, r7
   1bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb78:	4770      	bx	lr
   1bb7a:	bf00      	nop
   1bb7c:	1000516c 	.word	0x1000516c

0001bb80 <AppDiscSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1bb80:	b480      	push	{r7}
   1bb82:	b085      	sub	sp, #20
   1bb84:	af00      	add	r7, sp, #0
   1bb86:	4603      	mov	r3, r0
   1bb88:	603a      	str	r2, [r7, #0]
   1bb8a:	71fb      	strb	r3, [r7, #7]
   1bb8c:	460b      	mov	r3, r1
   1bb8e:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1bb90:	79fb      	ldrb	r3, [r7, #7]
   1bb92:	3b01      	subs	r3, #1
   1bb94:	011b      	lsls	r3, r3, #4
   1bb96:	4a07      	ldr	r2, [pc, #28]	; (1bbb4 <AppDiscSetHdlList+0x34>)
   1bb98:	4413      	add	r3, r2
   1bb9a:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->hdlListLen = hdlListLen;
   1bb9c:	68fb      	ldr	r3, [r7, #12]
   1bb9e:	79ba      	ldrb	r2, [r7, #6]
   1bba0:	729a      	strb	r2, [r3, #10]
  pAppDiscCb->pHdlList = pHdlList;
   1bba2:	68fb      	ldr	r3, [r7, #12]
   1bba4:	683a      	ldr	r2, [r7, #0]
   1bba6:	605a      	str	r2, [r3, #4]
}
   1bba8:	bf00      	nop
   1bbaa:	3714      	adds	r7, #20
   1bbac:	46bd      	mov	sp, r7
   1bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bbb2:	4770      	bx	lr
   1bbb4:	100050ec 	.word	0x100050ec

0001bbb8 <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   1bbb8:	b580      	push	{r7, lr}
   1bbba:	b084      	sub	sp, #16
   1bbbc:	af00      	add	r7, sp, #0
   1bbbe:	4603      	mov	r3, r0
   1bbc0:	460a      	mov	r2, r1
   1bbc2:	71fb      	strb	r3, [r7, #7]
   1bbc4:	4613      	mov	r3, r2
   1bbc6:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1bbc8:	79fb      	ldrb	r3, [r7, #7]
   1bbca:	3b01      	subs	r3, #1
   1bbcc:	011b      	lsls	r3, r3, #4
   1bbce:	4a29      	ldr	r2, [pc, #164]	; (1bc74 <AppDiscComplete+0xbc>)
   1bbd0:	4413      	add	r3, r2
   1bbd2:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1bbd4:	79fb      	ldrb	r3, [r7, #7]
   1bbd6:	2200      	movs	r2, #0
   1bbd8:	2108      	movs	r1, #8
   1bbda:	4618      	mov	r0, r3
   1bbdc:	f7f4 f8b4 	bl	fd48 <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1bbe0:	79bb      	ldrb	r3, [r7, #6]
   1bbe2:	2b07      	cmp	r3, #7
   1bbe4:	d103      	bne.n	1bbee <AppDiscComplete+0x36>
   1bbe6:	68fb      	ldr	r3, [r7, #12]
   1bbe8:	7a1b      	ldrb	r3, [r3, #8]
   1bbea:	2b06      	cmp	r3, #6
   1bbec:	d002      	beq.n	1bbf4 <AppDiscComplete+0x3c>
  {
    pAppDiscCb->cmplStatus = status;
   1bbee:	68fb      	ldr	r3, [r7, #12]
   1bbf0:	79ba      	ldrb	r2, [r7, #6]
   1bbf2:	725a      	strb	r2, [r3, #9]
  }
  
  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1bbf4:	68fb      	ldr	r3, [r7, #12]
   1bbf6:	2200      	movs	r2, #0
   1bbf8:	72da      	strb	r2, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   1bbfa:	68fb      	ldr	r3, [r7, #12]
   1bbfc:	681b      	ldr	r3, [r3, #0]
   1bbfe:	2b00      	cmp	r3, #0
   1bc00:	d007      	beq.n	1bc12 <AppDiscComplete+0x5a>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1bc02:	68fb      	ldr	r3, [r7, #12]
   1bc04:	681b      	ldr	r3, [r3, #0]
   1bc06:	4618      	mov	r0, r3
   1bc08:	f7f9 facc 	bl	151a4 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1bc0c:	68fb      	ldr	r3, [r7, #12]
   1bc0e:	2200      	movs	r2, #0
   1bc10:	601a      	str	r2, [r3, #0]
  }
  
  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1bc12:	79fb      	ldrb	r3, [r7, #7]
   1bc14:	4618      	mov	r0, r3
   1bc16:	f000 faad 	bl	1c174 <AppDbGetHdl>
   1bc1a:	60b8      	str	r0, [r7, #8]
   1bc1c:	68bb      	ldr	r3, [r7, #8]
   1bc1e:	2b00      	cmp	r3, #0
   1bc20:	d018      	beq.n	1bc54 <AppDiscComplete+0x9c>
  {
    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1bc22:	79bb      	ldrb	r3, [r7, #6]
   1bc24:	2b07      	cmp	r3, #7
   1bc26:	d103      	bne.n	1bc30 <AppDiscComplete+0x78>
   1bc28:	68fb      	ldr	r3, [r7, #12]
   1bc2a:	7a1b      	ldrb	r3, [r3, #8]
   1bc2c:	2b06      	cmp	r3, #6
   1bc2e:	d004      	beq.n	1bc3a <AppDiscComplete+0x82>
    {
      AppDbSetDiscStatus(hdl, status);
   1bc30:	79bb      	ldrb	r3, [r7, #6]
   1bc32:	4619      	mov	r1, r3
   1bc34:	68b8      	ldr	r0, [r7, #8]
   1bc36:	f7f7 fe61 	bl	138fc <AppDbSetDiscStatus>
    }

    if (pAppDiscCb->pHdlList != NULL)
   1bc3a:	68fb      	ldr	r3, [r7, #12]
   1bc3c:	685b      	ldr	r3, [r3, #4]
   1bc3e:	2b00      	cmp	r3, #0
   1bc40:	d008      	beq.n	1bc54 <AppDiscComplete+0x9c>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   1bc42:	79bb      	ldrb	r3, [r7, #6]
   1bc44:	2b03      	cmp	r3, #3
   1bc46:	d105      	bne.n	1bc54 <AppDiscComplete+0x9c>
      {
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1bc48:	68fb      	ldr	r3, [r7, #12]
   1bc4a:	685b      	ldr	r3, [r3, #4]
   1bc4c:	4619      	mov	r1, r3
   1bc4e:	68b8      	ldr	r0, [r7, #8]
   1bc50:	f7f7 fe70 	bl	13934 <AppDbSetHdlList>
  }
  
  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   1bc54:	79bb      	ldrb	r3, [r7, #6]
   1bc56:	2b07      	cmp	r3, #7
   1bc58:	d102      	bne.n	1bc60 <AppDiscComplete+0xa8>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   1bc5a:	68fb      	ldr	r3, [r7, #12]
   1bc5c:	2207      	movs	r2, #7
   1bc5e:	721a      	strb	r2, [r3, #8]
  }
  
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1bc60:	79fb      	ldrb	r3, [r7, #7]
   1bc62:	79ba      	ldrb	r2, [r7, #6]
   1bc64:	4619      	mov	r1, r3
   1bc66:	4804      	ldr	r0, [pc, #16]	; (1bc78 <AppDiscComplete+0xc0>)
   1bc68:	f7fd ff48 	bl	19afc <WsfTrace>
}
   1bc6c:	bf00      	nop
   1bc6e:	3710      	adds	r7, #16
   1bc70:	46bd      	mov	sp, r7
   1bc72:	bd80      	pop	{r7, pc}
   1bc74:	100050ec 	.word	0x100050ec
   1bc78:	00021cfc 	.word	0x00021cfc

0001bc7c <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   1bc7c:	b580      	push	{r7, lr}
   1bc7e:	b084      	sub	sp, #16
   1bc80:	af00      	add	r7, sp, #0
   1bc82:	603a      	str	r2, [r7, #0]
   1bc84:	461a      	mov	r2, r3
   1bc86:	4603      	mov	r3, r0
   1bc88:	71fb      	strb	r3, [r7, #7]
   1bc8a:	460b      	mov	r3, r1
   1bc8c:	71bb      	strb	r3, [r7, #6]
   1bc8e:	4613      	mov	r3, r2
   1bc90:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1bc92:	79fb      	ldrb	r3, [r7, #7]
   1bc94:	3b01      	subs	r3, #1
   1bc96:	011b      	lsls	r3, r3, #4
   1bc98:	4a18      	ldr	r2, [pc, #96]	; (1bcfc <AppDiscFindService+0x80>)
   1bc9a:	4413      	add	r3, r2
   1bc9c:	60fb      	str	r3, [r7, #12]

  if (pAppDiscCb->pDiscCb == NULL)
   1bc9e:	68fb      	ldr	r3, [r7, #12]
   1bca0:	681b      	ldr	r3, [r3, #0]
   1bca2:	2b00      	cmp	r3, #0
   1bca4:	d105      	bne.n	1bcb2 <AppDiscFindService+0x36>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1bca6:	2014      	movs	r0, #20
   1bca8:	f7f9 fa3c 	bl	15124 <WsfBufAlloc>
   1bcac:	4602      	mov	r2, r0
   1bcae:	68fb      	ldr	r3, [r7, #12]
   1bcb0:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1bcb2:	68fb      	ldr	r3, [r7, #12]
   1bcb4:	681b      	ldr	r3, [r3, #0]
   1bcb6:	2b00      	cmp	r3, #0
   1bcb8:	d01b      	beq.n	1bcf2 <AppDiscFindService+0x76>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1bcba:	79fb      	ldrb	r3, [r7, #7]
   1bcbc:	2201      	movs	r2, #1
   1bcbe:	2108      	movs	r1, #8
   1bcc0:	4618      	mov	r0, r3
   1bcc2:	f7f4 f841 	bl	fd48 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_IN_PROGRESS;
   1bcc6:	68fb      	ldr	r3, [r7, #12]
   1bcc8:	2201      	movs	r2, #1
   1bcca:	72da      	strb	r2, [r3, #11]
 
    pAppDiscCb->pDiscCb->pCharList = pCharList;
   1bccc:	68fb      	ldr	r3, [r7, #12]
   1bcce:	681b      	ldr	r3, [r3, #0]
   1bcd0:	69ba      	ldr	r2, [r7, #24]
   1bcd2:	601a      	str	r2, [r3, #0]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1bcd4:	68fb      	ldr	r3, [r7, #12]
   1bcd6:	681b      	ldr	r3, [r3, #0]
   1bcd8:	69fa      	ldr	r2, [r7, #28]
   1bcda:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   1bcdc:	68fb      	ldr	r3, [r7, #12]
   1bcde:	681b      	ldr	r3, [r3, #0]
   1bce0:	797a      	ldrb	r2, [r7, #5]
   1bce2:	731a      	strb	r2, [r3, #12]
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1bce4:	68fb      	ldr	r3, [r7, #12]
   1bce6:	6819      	ldr	r1, [r3, #0]
   1bce8:	79ba      	ldrb	r2, [r7, #6]
   1bcea:	79f8      	ldrb	r0, [r7, #7]
   1bcec:	683b      	ldr	r3, [r7, #0]
   1bcee:	f7f0 fd80 	bl	c7f2 <AttcDiscService>
  }
}
   1bcf2:	bf00      	nop
   1bcf4:	3710      	adds	r7, #16
   1bcf6:	46bd      	mov	sp, r7
   1bcf8:	bd80      	pop	{r7, pc}
   1bcfa:	bf00      	nop
   1bcfc:	100050ec 	.word	0x100050ec

0001bd00 <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1bd00:	b580      	push	{r7, lr}
   1bd02:	b084      	sub	sp, #16
   1bd04:	af00      	add	r7, sp, #0
   1bd06:	603b      	str	r3, [r7, #0]
   1bd08:	4603      	mov	r3, r0
   1bd0a:	71fb      	strb	r3, [r7, #7]
   1bd0c:	460b      	mov	r3, r1
   1bd0e:	71bb      	strb	r3, [r7, #6]
   1bd10:	4613      	mov	r3, r2
   1bd12:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1bd14:	79fb      	ldrb	r3, [r7, #7]
   1bd16:	3b01      	subs	r3, #1
   1bd18:	011b      	lsls	r3, r3, #4
   1bd1a:	4a23      	ldr	r2, [pc, #140]	; (1bda8 <AppDiscConfigure+0xa8>)
   1bd1c:	4413      	add	r3, r2
   1bd1e:	60fb      	str	r3, [r7, #12]
  uint8_t ret;
  
  if (pAppDiscCb->pDiscCb == NULL)
   1bd20:	68fb      	ldr	r3, [r7, #12]
   1bd22:	681b      	ldr	r3, [r3, #0]
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	d105      	bne.n	1bd34 <AppDiscConfigure+0x34>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1bd28:	2014      	movs	r0, #20
   1bd2a:	f7f9 f9fb 	bl	15124 <WsfBufAlloc>
   1bd2e:	4602      	mov	r2, r0
   1bd30:	68fb      	ldr	r3, [r7, #12]
   1bd32:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1bd34:	68fb      	ldr	r3, [r7, #12]
   1bd36:	681b      	ldr	r3, [r3, #0]
   1bd38:	2b00      	cmp	r3, #0
   1bd3a:	d030      	beq.n	1bd9e <AppDiscConfigure+0x9e>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1bd3c:	79fb      	ldrb	r3, [r7, #7]
   1bd3e:	2201      	movs	r2, #1
   1bd40:	2108      	movs	r1, #8
   1bd42:	4618      	mov	r0, r3
   1bd44:	f7f4 f800 	bl	fd48 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1bd48:	68fb      	ldr	r3, [r7, #12]
   1bd4a:	2202      	movs	r2, #2
   1bd4c:	72da      	strb	r2, [r3, #11]
 
    if (status == APP_DISC_CFG_CONN_START)
   1bd4e:	79bb      	ldrb	r3, [r7, #6]
   1bd50:	2b06      	cmp	r3, #6
   1bd52:	d102      	bne.n	1bd5a <AppDiscConfigure+0x5a>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   1bd54:	68fb      	ldr	r3, [r7, #12]
   1bd56:	2206      	movs	r2, #6
   1bd58:	721a      	strb	r2, [r3, #8]
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1bd5a:	68fb      	ldr	r3, [r7, #12]
   1bd5c:	681b      	ldr	r3, [r3, #0]
   1bd5e:	683a      	ldr	r2, [r7, #0]
   1bd60:	609a      	str	r2, [r3, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   1bd62:	68fb      	ldr	r3, [r7, #12]
   1bd64:	681b      	ldr	r3, [r3, #0]
   1bd66:	797a      	ldrb	r2, [r7, #5]
   1bd68:	735a      	strb	r2, [r3, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1bd6a:	68fb      	ldr	r3, [r7, #12]
   1bd6c:	681b      	ldr	r3, [r3, #0]
   1bd6e:	69fa      	ldr	r2, [r7, #28]
   1bd70:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   1bd72:	68fb      	ldr	r3, [r7, #12]
   1bd74:	681b      	ldr	r3, [r3, #0]
   1bd76:	7e3a      	ldrb	r2, [r7, #24]
   1bd78:	731a      	strb	r2, [r3, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1bd7a:	68fb      	ldr	r3, [r7, #12]
   1bd7c:	681a      	ldr	r2, [r3, #0]
   1bd7e:	79fb      	ldrb	r3, [r7, #7]
   1bd80:	4611      	mov	r1, r2
   1bd82:	4618      	mov	r0, r3
   1bd84:	f7f0 fe61 	bl	ca4a <AttcDiscConfigStart>
   1bd88:	4603      	mov	r3, r0
   1bd8a:	72fb      	strb	r3, [r7, #11]
    
    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   1bd8c:	7afb      	ldrb	r3, [r7, #11]
   1bd8e:	2b00      	cmp	r3, #0
   1bd90:	d105      	bne.n	1bd9e <AppDiscConfigure+0x9e>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1bd92:	4b06      	ldr	r3, [pc, #24]	; (1bdac <AppDiscConfigure+0xac>)
   1bd94:	681b      	ldr	r3, [r3, #0]
   1bd96:	79fa      	ldrb	r2, [r7, #7]
   1bd98:	2107      	movs	r1, #7
   1bd9a:	4610      	mov	r0, r2
   1bd9c:	4798      	blx	r3
    }    
  }
}
   1bd9e:	bf00      	nop
   1bda0:	3710      	adds	r7, #16
   1bda2:	46bd      	mov	sp, r7
   1bda4:	bd80      	pop	{r7, pc}
   1bda6:	bf00      	nop
   1bda8:	100050ec 	.word	0x100050ec
   1bdac:	1000516c 	.word	0x1000516c

0001bdb0 <AppDiscServiceChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscServiceChanged(attEvt_t *pMsg)
{
   1bdb0:	b580      	push	{r7, lr}
   1bdb2:	b088      	sub	sp, #32
   1bdb4:	af00      	add	r7, sp, #0
   1bdb6:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   1bdb8:	687b      	ldr	r3, [r7, #4]
   1bdba:	881b      	ldrh	r3, [r3, #0]
   1bdbc:	3b01      	subs	r3, #1
   1bdbe:	011b      	lsls	r3, r3, #4
   1bdc0:	4a53      	ldr	r2, [pc, #332]	; (1bf10 <AppDiscServiceChanged+0x160>)
   1bdc2:	4413      	add	r3, r2
   1bdc4:	617b      	str	r3, [r7, #20]
  uint8_t     i;
  bool_t      foundHdl;
  appDbHdl_t  dbHdl;
  
  /* verify characteristic length */
  if (pMsg->valueLen != CH_SC_LEN)
   1bdc6:	687b      	ldr	r3, [r7, #4]
   1bdc8:	891b      	ldrh	r3, [r3, #8]
   1bdca:	2b04      	cmp	r3, #4
   1bdcc:	f040 8095 	bne.w	1befa <AppDiscServiceChanged+0x14a>
  {
    return;
  }
  
  /* parse and verify handles */
  p = pMsg->pValue;
   1bdd0:	687b      	ldr	r3, [r7, #4]
   1bdd2:	685b      	ldr	r3, [r3, #4]
   1bdd4:	613b      	str	r3, [r7, #16]
  BSTREAM_TO_UINT16(startHdl, p);
   1bdd6:	693b      	ldr	r3, [r7, #16]
   1bdd8:	781b      	ldrb	r3, [r3, #0]
   1bdda:	b29a      	uxth	r2, r3
   1bddc:	693b      	ldr	r3, [r7, #16]
   1bdde:	3301      	adds	r3, #1
   1bde0:	781b      	ldrb	r3, [r3, #0]
   1bde2:	b29b      	uxth	r3, r3
   1bde4:	021b      	lsls	r3, r3, #8
   1bde6:	b29b      	uxth	r3, r3
   1bde8:	4413      	add	r3, r2
   1bdea:	81fb      	strh	r3, [r7, #14]
   1bdec:	693b      	ldr	r3, [r7, #16]
   1bdee:	3302      	adds	r3, #2
   1bdf0:	613b      	str	r3, [r7, #16]
  BSTREAM_TO_UINT16(endHdl, p);
   1bdf2:	693b      	ldr	r3, [r7, #16]
   1bdf4:	781b      	ldrb	r3, [r3, #0]
   1bdf6:	b29a      	uxth	r2, r3
   1bdf8:	693b      	ldr	r3, [r7, #16]
   1bdfa:	3301      	adds	r3, #1
   1bdfc:	781b      	ldrb	r3, [r3, #0]
   1bdfe:	b29b      	uxth	r3, r3
   1be00:	021b      	lsls	r3, r3, #8
   1be02:	b29b      	uxth	r3, r3
   1be04:	4413      	add	r3, r2
   1be06:	81bb      	strh	r3, [r7, #12]
   1be08:	693b      	ldr	r3, [r7, #16]
   1be0a:	3302      	adds	r3, #2
   1be0c:	613b      	str	r3, [r7, #16]
  if (startHdl == 0 || endHdl < startHdl)
   1be0e:	89fb      	ldrh	r3, [r7, #14]
   1be10:	2b00      	cmp	r3, #0
   1be12:	d074      	beq.n	1befe <AppDiscServiceChanged+0x14e>
   1be14:	89ba      	ldrh	r2, [r7, #12]
   1be16:	89fb      	ldrh	r3, [r7, #14]
   1be18:	429a      	cmp	r2, r3
   1be1a:	d370      	bcc.n	1befe <AppDiscServiceChanged+0x14e>
  {
    return;
  }
  
  /* if we don't have any stored handles within service changed handle range, ignore */
  foundHdl = FALSE;
   1be1c:	2300      	movs	r3, #0
   1be1e:	76bb      	strb	r3, [r7, #26]
  if (pAppDiscCb->pHdlList != NULL)
   1be20:	697b      	ldr	r3, [r7, #20]
   1be22:	685b      	ldr	r3, [r3, #4]
   1be24:	2b00      	cmp	r3, #0
   1be26:	d01c      	beq.n	1be62 <AppDiscServiceChanged+0xb2>
  {
    pHdl = pAppDiscCb->pHdlList;
   1be28:	697b      	ldr	r3, [r7, #20]
   1be2a:	685b      	ldr	r3, [r3, #4]
   1be2c:	61fb      	str	r3, [r7, #28]
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1be2e:	697b      	ldr	r3, [r7, #20]
   1be30:	7a9b      	ldrb	r3, [r3, #10]
   1be32:	76fb      	strb	r3, [r7, #27]
   1be34:	e012      	b.n	1be5c <AppDiscServiceChanged+0xac>
    {
      if (*pHdl >= startHdl && *pHdl <= endHdl)
   1be36:	69fb      	ldr	r3, [r7, #28]
   1be38:	881b      	ldrh	r3, [r3, #0]
   1be3a:	89fa      	ldrh	r2, [r7, #14]
   1be3c:	429a      	cmp	r2, r3
   1be3e:	d807      	bhi.n	1be50 <AppDiscServiceChanged+0xa0>
   1be40:	69fb      	ldr	r3, [r7, #28]
   1be42:	881b      	ldrh	r3, [r3, #0]
   1be44:	89ba      	ldrh	r2, [r7, #12]
   1be46:	429a      	cmp	r2, r3
   1be48:	d302      	bcc.n	1be50 <AppDiscServiceChanged+0xa0>
      {
        foundHdl = TRUE;
   1be4a:	2301      	movs	r3, #1
   1be4c:	76bb      	strb	r3, [r7, #26]
        break;
   1be4e:	e008      	b.n	1be62 <AppDiscServiceChanged+0xb2>
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1be50:	7efb      	ldrb	r3, [r7, #27]
   1be52:	3b01      	subs	r3, #1
   1be54:	76fb      	strb	r3, [r7, #27]
   1be56:	69fb      	ldr	r3, [r7, #28]
   1be58:	3302      	adds	r3, #2
   1be5a:	61fb      	str	r3, [r7, #28]
   1be5c:	7efb      	ldrb	r3, [r7, #27]
   1be5e:	2b00      	cmp	r3, #0
   1be60:	d1e9      	bne.n	1be36 <AppDiscServiceChanged+0x86>
      }
    }
  }
  if (foundHdl == FALSE)
   1be62:	7ebb      	ldrb	r3, [r7, #26]
   1be64:	2b00      	cmp	r3, #0
   1be66:	d04c      	beq.n	1bf02 <AppDiscServiceChanged+0x152>
  {
    return;
  }
  
  /* if discovery procedure already in progress */
  if (pAppDiscCb->inProgress == APP_DISC_IN_PROGRESS)
   1be68:	697b      	ldr	r3, [r7, #20]
   1be6a:	7adb      	ldrb	r3, [r3, #11]
   1be6c:	2b01      	cmp	r3, #1
   1be6e:	d04a      	beq.n	1bf06 <AppDiscServiceChanged+0x156>
    /* ignore service changed */
    return;
  }

  /* otherwise initialize discovery and configuration status */
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1be70:	697b      	ldr	r3, [r7, #20]
   1be72:	2200      	movs	r2, #0
   1be74:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   1be76:	697b      	ldr	r3, [r7, #20]
   1be78:	2200      	movs	r2, #0
   1be7a:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   1be7c:	697b      	ldr	r3, [r7, #20]
   1be7e:	2200      	movs	r2, #0
   1be80:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   1be82:	697b      	ldr	r3, [r7, #20]
   1be84:	2200      	movs	r2, #0
   1be86:	739a      	strb	r2, [r3, #14]
  
  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1be88:	697b      	ldr	r3, [r7, #20]
   1be8a:	685b      	ldr	r3, [r3, #4]
   1be8c:	2b00      	cmp	r3, #0
   1be8e:	d008      	beq.n	1bea2 <AppDiscServiceChanged+0xf2>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1be90:	697b      	ldr	r3, [r7, #20]
   1be92:	6858      	ldr	r0, [r3, #4]
   1be94:	697b      	ldr	r3, [r7, #20]
   1be96:	7a9b      	ldrb	r3, [r3, #10]
   1be98:	005b      	lsls	r3, r3, #1
   1be9a:	461a      	mov	r2, r3
   1be9c:	2100      	movs	r1, #0
   1be9e:	f7f0 fa5d 	bl	c35c <memset>
  }
 
  /* clear stored discovery status and handle list */
  if ((dbHdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1bea2:	687b      	ldr	r3, [r7, #4]
   1bea4:	881b      	ldrh	r3, [r3, #0]
   1bea6:	b2db      	uxtb	r3, r3
   1bea8:	4618      	mov	r0, r3
   1beaa:	f000 f963 	bl	1c174 <AppDbGetHdl>
   1beae:	60b8      	str	r0, [r7, #8]
   1beb0:	68bb      	ldr	r3, [r7, #8]
   1beb2:	2b00      	cmp	r3, #0
   1beb4:	d009      	beq.n	1beca <AppDiscServiceChanged+0x11a>
  {
      AppDbSetDiscStatus(dbHdl, APP_DISC_INIT);
   1beb6:	2100      	movs	r1, #0
   1beb8:	68b8      	ldr	r0, [r7, #8]
   1beba:	f7f7 fd1f 	bl	138fc <AppDbSetDiscStatus>
      AppDbSetHdlList(dbHdl, pAppDiscCb->pHdlList);
   1bebe:	697b      	ldr	r3, [r7, #20]
   1bec0:	685b      	ldr	r3, [r3, #4]
   1bec2:	4619      	mov	r1, r3
   1bec4:	68b8      	ldr	r0, [r7, #8]
   1bec6:	f7f7 fd35 	bl	13934 <AppDbSetHdlList>
  }
  
  /* if configuration in progress */
  if (pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS)
   1beca:	697b      	ldr	r3, [r7, #20]
   1becc:	7adb      	ldrb	r3, [r3, #11]
   1bece:	2b02      	cmp	r3, #2
   1bed0:	d103      	bne.n	1beda <AppDiscServiceChanged+0x12a>
  {
    /* set pending status to set up abort of configuration */
    pAppDiscCb->scPending = TRUE;
   1bed2:	697b      	ldr	r3, [r7, #20]
   1bed4:	2201      	movs	r2, #1
   1bed6:	739a      	strb	r2, [r3, #14]
   1bed8:	e016      	b.n	1bf08 <AppDiscServiceChanged+0x158>
  {
    /* if not waiting for security or connection is already secure, then
     * initiate discovery now; otherwise discovery will be initiated after
     * security is done
     */
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
   1beda:	4b0e      	ldr	r3, [pc, #56]	; (1bf14 <AppDiscServiceChanged+0x164>)
   1bedc:	681b      	ldr	r3, [r3, #0]
   1bede:	781b      	ldrb	r3, [r3, #0]
   1bee0:	2b00      	cmp	r3, #0
   1bee2:	d003      	beq.n	1beec <AppDiscServiceChanged+0x13c>
   1bee4:	697b      	ldr	r3, [r7, #20]
   1bee6:	7b1b      	ldrb	r3, [r3, #12]
   1bee8:	2b00      	cmp	r3, #0
   1beea:	d00d      	beq.n	1bf08 <AppDiscServiceChanged+0x158>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1beec:	687b      	ldr	r3, [r7, #4]
   1beee:	881b      	ldrh	r3, [r3, #0]
   1bef0:	b2db      	uxtb	r3, r3
   1bef2:	4618      	mov	r0, r3
   1bef4:	f7ff fb94 	bl	1b620 <appDiscStart>
   1bef8:	e006      	b.n	1bf08 <AppDiscServiceChanged+0x158>
    return;
   1befa:	bf00      	nop
   1befc:	e004      	b.n	1bf08 <AppDiscServiceChanged+0x158>
    return;
   1befe:	bf00      	nop
   1bf00:	e002      	b.n	1bf08 <AppDiscServiceChanged+0x158>
    return;
   1bf02:	bf00      	nop
   1bf04:	e000      	b.n	1bf08 <AppDiscServiceChanged+0x158>
    return;
   1bf06:	bf00      	nop
    }
  }
}
   1bf08:	3720      	adds	r7, #32
   1bf0a:	46bd      	mov	sp, r7
   1bf0c:	bd80      	pop	{r7, pc}
   1bf0e:	bf00      	nop
   1bf10:	100050ec 	.word	0x100050ec
   1bf14:	10005d60 	.word	0x10005d60

0001bf18 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   1bf18:	b580      	push	{r7, lr}
   1bf1a:	b082      	sub	sp, #8
   1bf1c:	af00      	add	r7, sp, #0
   1bf1e:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1bf20:	687b      	ldr	r3, [r7, #4]
   1bf22:	789b      	ldrb	r3, [r3, #2]
   1bf24:	2b00      	cmp	r3, #0
   1bf26:	d002      	beq.n	1bf2e <appProcMsg+0x16>
   1bf28:	2b01      	cmp	r3, #1
   1bf2a:	d003      	beq.n	1bf34 <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
   1bf2c:	e006      	b.n	1bf3c <appProcMsg+0x24>
      appUiBtnPoll();
   1bf2e:	f7f7 fe53 	bl	13bd8 <appUiBtnPoll>
      break;
   1bf32:	e003      	b.n	1bf3c <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
   1bf34:	6878      	ldr	r0, [r7, #4]
   1bf36:	f7f7 fe45 	bl	13bc4 <appUiTimerExpired>
      break;
   1bf3a:	bf00      	nop
  }
}
   1bf3c:	bf00      	nop
   1bf3e:	3708      	adds	r7, #8
   1bf40:	46bd      	mov	sp, r7
   1bf42:	bd80      	pop	{r7, pc}

0001bf44 <appCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t appCheckBonded(dmConnId_t connId)
{
   1bf44:	b480      	push	{r7}
   1bf46:	b083      	sub	sp, #12
   1bf48:	af00      	add	r7, sp, #0
   1bf4a:	4603      	mov	r3, r0
   1bf4c:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bonded;
   1bf4e:	79fb      	ldrb	r3, [r7, #7]
   1bf50:	3b01      	subs	r3, #1
   1bf52:	4a05      	ldr	r2, [pc, #20]	; (1bf68 <appCheckBonded+0x24>)
   1bf54:	015b      	lsls	r3, r3, #5
   1bf56:	4413      	add	r3, r2
   1bf58:	3305      	adds	r3, #5
   1bf5a:	781b      	ldrb	r3, [r3, #0]
}
   1bf5c:	4618      	mov	r0, r3
   1bf5e:	370c      	adds	r7, #12
   1bf60:	46bd      	mov	sp, r7
   1bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf66:	4770      	bx	lr
   1bf68:	10005d7c 	.word	0x10005d7c

0001bf6c <appCheckBondByLtk>:
 *
 *  \return Bond-by-LTK state.
 */
/*************************************************************************************************/
bool_t appCheckBondByLtk(dmConnId_t connId)
{
   1bf6c:	b480      	push	{r7}
   1bf6e:	b083      	sub	sp, #12
   1bf70:	af00      	add	r7, sp, #0
   1bf72:	4603      	mov	r3, r0
   1bf74:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bondByLtk;
   1bf76:	79fb      	ldrb	r3, [r7, #7]
   1bf78:	3b01      	subs	r3, #1
   1bf7a:	4a05      	ldr	r2, [pc, #20]	; (1bf90 <appCheckBondByLtk+0x24>)
   1bf7c:	015b      	lsls	r3, r3, #5
   1bf7e:	4413      	add	r3, r2
   1bf80:	3306      	adds	r3, #6
   1bf82:	781b      	ldrb	r3, [r3, #0]
}
   1bf84:	4618      	mov	r0, r3
   1bf86:	370c      	adds	r7, #12
   1bf88:	46bd      	mov	sp, r7
   1bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf8e:	4770      	bx	lr
   1bf90:	10005d7c 	.word	0x10005d7c

0001bf94 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   1bf94:	b580      	push	{r7, lr}
   1bf96:	b084      	sub	sp, #16
   1bf98:	af00      	add	r7, sp, #0
   1bf9a:	4603      	mov	r3, r0
   1bf9c:	71fb      	strb	r3, [r7, #7]
  appConnCb_t   *pCcb = appConnCb;
   1bf9e:	4b13      	ldr	r3, [pc, #76]	; (1bfec <appNumConns+0x58>)
   1bfa0:	60fb      	str	r3, [r7, #12]
  uint8_t       i, j;
  
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1bfa2:	2308      	movs	r3, #8
   1bfa4:	72fb      	strb	r3, [r7, #11]
   1bfa6:	2300      	movs	r3, #0
   1bfa8:	72bb      	strb	r3, [r7, #10]
   1bfaa:	e016      	b.n	1bfda <appNumConns+0x46>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1bfac:	68fb      	ldr	r3, [r7, #12]
   1bfae:	791b      	ldrb	r3, [r3, #4]
   1bfb0:	2b00      	cmp	r3, #0
   1bfb2:	d00c      	beq.n	1bfce <appNumConns+0x3a>
   1bfb4:	68fb      	ldr	r3, [r7, #12]
   1bfb6:	791b      	ldrb	r3, [r3, #4]
   1bfb8:	4618      	mov	r0, r3
   1bfba:	f7f3 feef 	bl	fd9c <DmConnRole>
   1bfbe:	4603      	mov	r3, r0
   1bfc0:	461a      	mov	r2, r3
   1bfc2:	79fb      	ldrb	r3, [r7, #7]
   1bfc4:	4293      	cmp	r3, r2
   1bfc6:	d102      	bne.n	1bfce <appNumConns+0x3a>
    {      
      j++;
   1bfc8:	7abb      	ldrb	r3, [r7, #10]
   1bfca:	3301      	adds	r3, #1
   1bfcc:	72bb      	strb	r3, [r7, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1bfce:	7afb      	ldrb	r3, [r7, #11]
   1bfd0:	3b01      	subs	r3, #1
   1bfd2:	72fb      	strb	r3, [r7, #11]
   1bfd4:	68fb      	ldr	r3, [r7, #12]
   1bfd6:	3320      	adds	r3, #32
   1bfd8:	60fb      	str	r3, [r7, #12]
   1bfda:	7afb      	ldrb	r3, [r7, #11]
   1bfdc:	2b00      	cmp	r3, #0
   1bfde:	d1e5      	bne.n	1bfac <appNumConns+0x18>
    }
  }

  return j;
   1bfe0:	7abb      	ldrb	r3, [r7, #10]
}
   1bfe2:	4618      	mov	r0, r3
   1bfe4:	3710      	adds	r7, #16
   1bfe6:	46bd      	mov	sp, r7
   1bfe8:	bd80      	pop	{r7, pc}
   1bfea:	bf00      	nop
   1bfec:	10005d7c 	.word	0x10005d7c

0001bff0 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   1bff0:	b580      	push	{r7, lr}
   1bff2:	b082      	sub	sp, #8
   1bff4:	af00      	add	r7, sp, #0
   1bff6:	4603      	mov	r3, r0
   1bff8:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
   1bffa:	4a04      	ldr	r2, [pc, #16]	; (1c00c <AppHandlerInit+0x1c>)
   1bffc:	79fb      	ldrb	r3, [r7, #7]
   1bffe:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
   1c000:	f7f7 f9f4 	bl	133ec <AppDbInit>
}
   1c004:	bf00      	nop
   1c006:	3708      	adds	r7, #8
   1c008:	46bd      	mov	sp, r7
   1c00a:	bd80      	pop	{r7, pc}
   1c00c:	10005d68 	.word	0x10005d68

0001c010 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1c010:	b580      	push	{r7, lr}
   1c012:	b082      	sub	sp, #8
   1c014:	af00      	add	r7, sp, #0
   1c016:	4603      	mov	r3, r0
   1c018:	6039      	str	r1, [r7, #0]
   1c01a:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1c01c:	683b      	ldr	r3, [r7, #0]
   1c01e:	2b00      	cmp	r3, #0
   1c020:	d015      	beq.n	1c04e <AppHandler+0x3e>
  {
    // APP_TRACE_INFO1("App got evt %d", pMsg->event);
    
    if (pMsg->event >= APP_MASTER_MSG_START)
   1c022:	683b      	ldr	r3, [r7, #0]
   1c024:	789b      	ldrb	r3, [r3, #2]
   1c026:	2b1f      	cmp	r3, #31
   1c028:	d904      	bls.n	1c034 <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
   1c02a:	4b0e      	ldr	r3, [pc, #56]	; (1c064 <AppHandler+0x54>)
   1c02c:	685b      	ldr	r3, [r3, #4]
   1c02e:	6838      	ldr	r0, [r7, #0]
   1c030:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1c032:	e013      	b.n	1c05c <AppHandler+0x4c>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1c034:	683b      	ldr	r3, [r7, #0]
   1c036:	789b      	ldrb	r3, [r3, #2]
   1c038:	2b0f      	cmp	r3, #15
   1c03a:	d904      	bls.n	1c046 <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);    
   1c03c:	4b09      	ldr	r3, [pc, #36]	; (1c064 <AppHandler+0x54>)
   1c03e:	681b      	ldr	r3, [r3, #0]
   1c040:	6838      	ldr	r0, [r7, #0]
   1c042:	4798      	blx	r3
}
   1c044:	e00a      	b.n	1c05c <AppHandler+0x4c>
      appProcMsg(pMsg);
   1c046:	6838      	ldr	r0, [r7, #0]
   1c048:	f7ff ff66 	bl	1bf18 <appProcMsg>
}
   1c04c:	e006      	b.n	1c05c <AppHandler+0x4c>
    if (event & APP_BTN_DOWN_EVT)
   1c04e:	79fb      	ldrb	r3, [r7, #7]
   1c050:	f003 0310 	and.w	r3, r3, #16
   1c054:	2b00      	cmp	r3, #0
   1c056:	d001      	beq.n	1c05c <AppHandler+0x4c>
      AppUiBtnPressed();
   1c058:	f7f7 fdd6 	bl	13c08 <AppUiBtnPressed>
}
   1c05c:	bf00      	nop
   1c05e:	3708      	adds	r7, #8
   1c060:	46bd      	mov	sp, r7
   1c062:	bd80      	pop	{r7, pc}
   1c064:	10005d58 	.word	0x10005d58

0001c068 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   1c068:	b580      	push	{r7, lr}
   1c06a:	b084      	sub	sp, #16
   1c06c:	af00      	add	r7, sp, #0
   1c06e:	6078      	str	r0, [r7, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];
  
  if (pAuthReq->display)
   1c070:	687b      	ldr	r3, [r7, #4]
   1c072:	795b      	ldrb	r3, [r3, #5]
   1c074:	2b00      	cmp	r3, #0
   1c076:	d028      	beq.n	1c0ca <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1c078:	f107 030c 	add.w	r3, r7, #12
   1c07c:	2104      	movs	r1, #4
   1c07e:	4618      	mov	r0, r3
   1c080:	f7f8 fa5e 	bl	14540 <SecRand>
    passkey %= 1000000;
   1c084:	68fa      	ldr	r2, [r7, #12]
   1c086:	4b14      	ldr	r3, [pc, #80]	; (1c0d8 <AppHandlePasskey+0x70>)
   1c088:	fba3 1302 	umull	r1, r3, r3, r2
   1c08c:	0c9b      	lsrs	r3, r3, #18
   1c08e:	4913      	ldr	r1, [pc, #76]	; (1c0dc <AppHandlePasskey+0x74>)
   1c090:	fb01 f303 	mul.w	r3, r1, r3
   1c094:	1ad3      	subs	r3, r2, r3
   1c096:	60fb      	str	r3, [r7, #12]
    
    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   1c098:	68fb      	ldr	r3, [r7, #12]
   1c09a:	b2db      	uxtb	r3, r3
   1c09c:	723b      	strb	r3, [r7, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1c09e:	68fb      	ldr	r3, [r7, #12]
   1c0a0:	0a1b      	lsrs	r3, r3, #8
   1c0a2:	b2db      	uxtb	r3, r3
   1c0a4:	727b      	strb	r3, [r7, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1c0a6:	68fb      	ldr	r3, [r7, #12]
   1c0a8:	0c1b      	lsrs	r3, r3, #16
   1c0aa:	b2db      	uxtb	r3, r3
   1c0ac:	72bb      	strb	r3, [r7, #10]
    
    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1c0ae:	687b      	ldr	r3, [r7, #4]
   1c0b0:	881b      	ldrh	r3, [r3, #0]
   1c0b2:	b2db      	uxtb	r3, r3
   1c0b4:	f107 0208 	add.w	r2, r7, #8
   1c0b8:	2103      	movs	r1, #3
   1c0ba:	4618      	mov	r0, r3
   1c0bc:	f7f4 fb60 	bl	10780 <DmSecAuthRsp>
    
    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1c0c0:	68fb      	ldr	r3, [r7, #12]
   1c0c2:	4618      	mov	r0, r3
   1c0c4:	f7f7 fd50 	bl	13b68 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  } 
}
   1c0c8:	e002      	b.n	1c0d0 <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1c0ca:	200e      	movs	r0, #14
   1c0cc:	f7f7 fcb6 	bl	13a3c <AppUiAction>
}
   1c0d0:	bf00      	nop
   1c0d2:	3710      	adds	r7, #16
   1c0d4:	46bd      	mov	sp, r7
   1c0d6:	bd80      	pop	{r7, pc}
   1c0d8:	431bde83 	.word	0x431bde83
   1c0dc:	000f4240 	.word	0x000f4240

0001c0e0 <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   1c0e0:	b580      	push	{r7, lr}
   1c0e2:	b084      	sub	sp, #16
   1c0e4:	af00      	add	r7, sp, #0
   1c0e6:	6078      	str	r0, [r7, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   1c0e8:	687b      	ldr	r3, [r7, #4]
   1c0ea:	3304      	adds	r3, #4
   1c0ec:	4618      	mov	r0, r3
   1c0ee:	f7f4 fc8d 	bl	10a0c <DmSecGetCompareValue>
   1c0f2:	60f8      	str	r0, [r7, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   1c0f4:	68f8      	ldr	r0, [r7, #12]
   1c0f6:	f7f7 fd45 	bl	13b84 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   1c0fa:	687b      	ldr	r3, [r7, #4]
   1c0fc:	881b      	ldrh	r3, [r3, #0]
   1c0fe:	b2db      	uxtb	r3, r3
   1c100:	2101      	movs	r1, #1
   1c102:	4618      	mov	r0, r3
   1c104:	f7f4 fc6e 	bl	109e4 <DmSecCompareRsp>
}
   1c108:	bf00      	nop
   1c10a:	3710      	adds	r7, #16
   1c10c:	46bd      	mov	sp, r7
   1c10e:	bd80      	pop	{r7, pc}

0001c110 <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1c110:	b580      	push	{r7, lr}
   1c112:	b082      	sub	sp, #8
   1c114:	af00      	add	r7, sp, #0
   1c116:	4603      	mov	r3, r0
   1c118:	71fb      	strb	r3, [r7, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1c11a:	79fb      	ldrb	r3, [r7, #7]
   1c11c:	2213      	movs	r2, #19
   1c11e:	4619      	mov	r1, r3
   1c120:	2003      	movs	r0, #3
   1c122:	f7f3 fca9 	bl	fa78 <DmConnClose>
}
   1c126:	bf00      	nop
   1c128:	3708      	adds	r7, #8
   1c12a:	46bd      	mov	sp, r7
   1c12c:	bd80      	pop	{r7, pc}
	...

0001c130 <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   1c130:	b480      	push	{r7}
   1c132:	b083      	sub	sp, #12
   1c134:	af00      	add	r7, sp, #0
  appConnCb_t   *pCcb = appConnCb;
   1c136:	4b0e      	ldr	r3, [pc, #56]	; (1c170 <AppConnIsOpen+0x40>)
   1c138:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1c13a:	2308      	movs	r3, #8
   1c13c:	70fb      	strb	r3, [r7, #3]
   1c13e:	e00c      	b.n	1c15a <AppConnIsOpen+0x2a>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1c140:	687b      	ldr	r3, [r7, #4]
   1c142:	791b      	ldrb	r3, [r3, #4]
   1c144:	2b00      	cmp	r3, #0
   1c146:	d002      	beq.n	1c14e <AppConnIsOpen+0x1e>
    {      
      return pCcb->connId;
   1c148:	687b      	ldr	r3, [r7, #4]
   1c14a:	791b      	ldrb	r3, [r3, #4]
   1c14c:	e009      	b.n	1c162 <AppConnIsOpen+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1c14e:	78fb      	ldrb	r3, [r7, #3]
   1c150:	3b01      	subs	r3, #1
   1c152:	70fb      	strb	r3, [r7, #3]
   1c154:	687b      	ldr	r3, [r7, #4]
   1c156:	3320      	adds	r3, #32
   1c158:	607b      	str	r3, [r7, #4]
   1c15a:	78fb      	ldrb	r3, [r7, #3]
   1c15c:	2b00      	cmp	r3, #0
   1c15e:	d1ef      	bne.n	1c140 <AppConnIsOpen+0x10>
    }
  }
  
  return DM_CONN_ID_NONE;
   1c160:	2300      	movs	r3, #0
}
   1c162:	4618      	mov	r0, r3
   1c164:	370c      	adds	r7, #12
   1c166:	46bd      	mov	sp, r7
   1c168:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c16c:	4770      	bx	lr
   1c16e:	bf00      	nop
   1c170:	10005d7c 	.word	0x10005d7c

0001c174 <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   1c174:	b480      	push	{r7}
   1c176:	b083      	sub	sp, #12
   1c178:	af00      	add	r7, sp, #0
   1c17a:	4603      	mov	r3, r0
   1c17c:	71fb      	strb	r3, [r7, #7]
  return appConnCb[connId-1].dbHdl;
   1c17e:	79fb      	ldrb	r3, [r7, #7]
   1c180:	3b01      	subs	r3, #1
   1c182:	4a05      	ldr	r2, [pc, #20]	; (1c198 <AppDbGetHdl+0x24>)
   1c184:	015b      	lsls	r3, r3, #5
   1c186:	4413      	add	r3, r2
   1c188:	681b      	ldr	r3, [r3, #0]
}
   1c18a:	4618      	mov	r0, r3
   1c18c:	370c      	adds	r7, #12
   1c18e:	46bd      	mov	sp, r7
   1c190:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c194:	4770      	bx	lr
   1c196:	bf00      	nop
   1c198:	10005d7c 	.word	0x10005d7c

0001c19c <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1c19c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c19e:	b087      	sub	sp, #28
   1c1a0:	af02      	add	r7, sp, #8
   1c1a2:	6078      	str	r0, [r7, #4]
   1c1a4:	460b      	mov	r3, r1
   1c1a6:	70fb      	strb	r3, [r7, #3]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1c1a8:	78fb      	ldrb	r3, [r7, #3]
   1c1aa:	3b01      	subs	r3, #1
   1c1ac:	4a15      	ldr	r2, [pc, #84]	; (1c204 <AppAddDevToResList+0x68>)
   1c1ae:	015b      	lsls	r3, r3, #5
   1c1b0:	4413      	add	r3, r2
   1c1b2:	681b      	ldr	r3, [r3, #0]
   1c1b4:	60fb      	str	r3, [r7, #12]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1c1b6:	f7fa ffaf 	bl	17118 <HciLlPrivacySupported>
   1c1ba:	4603      	mov	r3, r0
   1c1bc:	2b00      	cmp	r3, #0
   1c1be:	d01c      	beq.n	1c1fa <AppAddDevToResList+0x5e>
   1c1c0:	2200      	movs	r2, #0
   1c1c2:	2104      	movs	r1, #4
   1c1c4:	68f8      	ldr	r0, [r7, #12]
   1c1c6:	f7f7 faa5 	bl	13714 <AppDbGetKey>
   1c1ca:	60b8      	str	r0, [r7, #8]
   1c1cc:	68bb      	ldr	r3, [r7, #8]
   1c1ce:	2b00      	cmp	r3, #0
   1c1d0:	d013      	beq.n	1c1fa <AppAddDevToResList+0x5e>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1c1d2:	68bb      	ldr	r3, [r7, #8]
   1c1d4:	7d9c      	ldrb	r4, [r3, #22]
   1c1d6:	68bb      	ldr	r3, [r7, #8]
   1c1d8:	f103 0510 	add.w	r5, r3, #16
   1c1dc:	68be      	ldr	r6, [r7, #8]
   1c1de:	f7f4 fb17 	bl	10810 <DmSecGetLocalIrk>
   1c1e2:	4602      	mov	r2, r0
   1c1e4:	687b      	ldr	r3, [r7, #4]
   1c1e6:	881b      	ldrh	r3, [r3, #0]
   1c1e8:	9301      	str	r3, [sp, #4]
   1c1ea:	2301      	movs	r3, #1
   1c1ec:	9300      	str	r3, [sp, #0]
   1c1ee:	4613      	mov	r3, r2
   1c1f0:	4632      	mov	r2, r6
   1c1f2:	4629      	mov	r1, r5
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	f7f4 f8d5 	bl	103a4 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1c1fa:	bf00      	nop
   1c1fc:	3714      	adds	r7, #20
   1c1fe:	46bd      	mov	sp, r7
   1c200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c202:	bf00      	nop
   1c204:	10005d7c 	.word	0x10005d7c

0001c208 <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   1c208:	b580      	push	{r7, lr}
   1c20a:	b084      	sub	sp, #16
   1c20c:	af00      	add	r7, sp, #0
   1c20e:	6078      	str	r0, [r7, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1c210:	687b      	ldr	r3, [r7, #4]
   1c212:	2b00      	cmp	r3, #0
   1c214:	d020      	beq.n	1c258 <AppUpdatePrivacyMode+0x50>
   1c216:	6878      	ldr	r0, [r7, #4]
   1c218:	f7f7 fbd5 	bl	139c6 <AppDbGetPeerAddedToRl>
   1c21c:	4603      	mov	r3, r0
   1c21e:	2b00      	cmp	r3, #0
   1c220:	d01a      	beq.n	1c258 <AppUpdatePrivacyMode+0x50>
   1c222:	6878      	ldr	r0, [r7, #4]
   1c224:	f7f7 fbec 	bl	13a00 <AppDbGetPeerRpao>
   1c228:	4603      	mov	r3, r0
   1c22a:	2b00      	cmp	r3, #0
   1c22c:	d114      	bne.n	1c258 <AppUpdatePrivacyMode+0x50>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1c22e:	2200      	movs	r2, #0
   1c230:	2104      	movs	r1, #4
   1c232:	6878      	ldr	r0, [r7, #4]
   1c234:	f7f7 fa6e 	bl	13714 <AppDbGetKey>
   1c238:	60f8      	str	r0, [r7, #12]
    if (pPeerKey != NULL)
   1c23a:	68fb      	ldr	r3, [r7, #12]
   1c23c:	2b00      	cmp	r3, #0
   1c23e:	d00b      	beq.n	1c258 <AppUpdatePrivacyMode+0x50>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1c240:	68fb      	ldr	r3, [r7, #12]
   1c242:	7d98      	ldrb	r0, [r3, #22]
   1c244:	68fb      	ldr	r3, [r7, #12]
   1c246:	3310      	adds	r3, #16
   1c248:	2201      	movs	r2, #1
   1c24a:	4619      	mov	r1, r3
   1c24c:	f7f4 f924 	bl	10498 <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1c250:	2100      	movs	r1, #0
   1c252:	6878      	ldr	r0, [r7, #4]
   1c254:	f7f7 fbc4 	bl	139e0 <AppDbSetPeerAddedToRl>
    }
  }
}
   1c258:	bf00      	nop
   1c25a:	3710      	adds	r7, #16
   1c25c:	46bd      	mov	sp, r7
   1c25e:	bd80      	pop	{r7, pc}

0001c260 <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   1c260:	b580      	push	{r7, lr}
   1c262:	b084      	sub	sp, #16
   1c264:	af00      	add	r7, sp, #0
   1c266:	4603      	mov	r3, r0
   1c268:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1c26a:	79fb      	ldrb	r3, [r7, #7]
   1c26c:	4618      	mov	r0, r3
   1c26e:	f7ff ff81 	bl	1c174 <AppDbGetHdl>
   1c272:	60f8      	str	r0, [r7, #12]
   1c274:	68fb      	ldr	r3, [r7, #12]
   1c276:	2b00      	cmp	r3, #0
   1c278:	d017      	beq.n	1c2aa <appServerSetSigningInfo+0x4a>
   1c27a:	2200      	movs	r2, #0
   1c27c:	2108      	movs	r1, #8
   1c27e:	68f8      	ldr	r0, [r7, #12]
   1c280:	f7f7 fa48 	bl	13714 <AppDbGetKey>
   1c284:	60b8      	str	r0, [r7, #8]
   1c286:	68bb      	ldr	r3, [r7, #8]
   1c288:	2b00      	cmp	r3, #0
   1c28a:	d00e      	beq.n	1c2aa <appServerSetSigningInfo+0x4a>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key);
   1c28c:	68ba      	ldr	r2, [r7, #8]
   1c28e:	79fb      	ldrb	r3, [r7, #7]
   1c290:	4611      	mov	r1, r2
   1c292:	4618      	mov	r0, r3
   1c294:	f7f2 fbf8 	bl	ea88 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1c298:	68f8      	ldr	r0, [r7, #12]
   1c29a:	f7f7 fb78 	bl	1398e <AppDbGetPeerSignCounter>
   1c29e:	4602      	mov	r2, r0
   1c2a0:	79fb      	ldrb	r3, [r7, #7]
   1c2a2:	4611      	mov	r1, r2
   1c2a4:	4618      	mov	r0, r3
   1c2a6:	f7f2 fbf9 	bl	ea9c <AttsSetSignCounter>
  }
}
   1c2aa:	bf00      	nop
   1c2ac:	3710      	adds	r7, #16
   1c2ae:	46bd      	mov	sp, r7
   1c2b0:	bd80      	pop	{r7, pc}

0001c2b2 <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   1c2b2:	b580      	push	{r7, lr}
   1c2b4:	b084      	sub	sp, #16
   1c2b6:	af00      	add	r7, sp, #0
   1c2b8:	6078      	str	r0, [r7, #4]
  bool_t      bonded;
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   1c2ba:	687b      	ldr	r3, [r7, #4]
   1c2bc:	881b      	ldrh	r3, [r3, #0]
   1c2be:	73fb      	strb	r3, [r7, #15]
  
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1c2c0:	687b      	ldr	r3, [r7, #4]
   1c2c2:	789b      	ldrb	r3, [r3, #2]
   1c2c4:	2b27      	cmp	r3, #39	; 0x27
   1c2c6:	d109      	bne.n	1c2dc <AppServerConnCback+0x2a>
  {
    /* set up CCC table with uninitialized (all zero) values */
    AttsCccInitTable(connId, NULL);
   1c2c8:	7bfb      	ldrb	r3, [r7, #15]
   1c2ca:	2100      	movs	r1, #0
   1c2cc:	4618      	mov	r0, r3
   1c2ce:	f7f1 f9dd 	bl	d68c <AttsCccInitTable>

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   1c2d2:	7bfb      	ldrb	r3, [r7, #15]
   1c2d4:	4618      	mov	r0, r3
   1c2d6:	f7ff ffc3 	bl	1c260 <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   1c2da:	e067      	b.n	1c3ac <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   1c2dc:	687b      	ldr	r3, [r7, #4]
   1c2de:	789b      	ldrb	r3, [r3, #2]
   1c2e0:	2b2a      	cmp	r3, #42	; 0x2a
   1c2e2:	d129      	bne.n	1c338 <AppServerConnCback+0x86>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   1c2e4:	687b      	ldr	r3, [r7, #4]
   1c2e6:	791b      	ldrb	r3, [r3, #4]
   1c2e8:	f003 0301 	and.w	r3, r3, #1
   1c2ec:	2b00      	cmp	r3, #0
   1c2ee:	bf14      	ite	ne
   1c2f0:	2301      	movne	r3, #1
   1c2f2:	2300      	moveq	r3, #0
   1c2f4:	b2db      	uxtb	r3, r3
   1c2f6:	73bb      	strb	r3, [r7, #14]
    if (bonded && (appCheckBonded(connId) == FALSE))
   1c2f8:	7bbb      	ldrb	r3, [r7, #14]
   1c2fa:	2b00      	cmp	r3, #0
   1c2fc:	d017      	beq.n	1c32e <AppServerConnCback+0x7c>
   1c2fe:	7bfb      	ldrb	r3, [r7, #15]
   1c300:	4618      	mov	r0, r3
   1c302:	f7ff fe1f 	bl	1bf44 <appCheckBonded>
   1c306:	4603      	mov	r3, r0
   1c308:	2b00      	cmp	r3, #0
   1c30a:	d110      	bne.n	1c32e <AppServerConnCback+0x7c>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1c30c:	7bfb      	ldrb	r3, [r7, #15]
   1c30e:	4618      	mov	r0, r3
   1c310:	f7ff ff30 	bl	1c174 <AppDbGetHdl>
   1c314:	60b8      	str	r0, [r7, #8]
   1c316:	68bb      	ldr	r3, [r7, #8]
   1c318:	2b00      	cmp	r3, #0
   1c31a:	d008      	beq.n	1c32e <AppServerConnCback+0x7c>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1c31c:	68b8      	ldr	r0, [r7, #8]
   1c31e:	f7f7 fabf 	bl	138a0 <AppDbGetCccTbl>
   1c322:	4602      	mov	r2, r0
   1c324:	7bfb      	ldrb	r3, [r7, #15]
   1c326:	4611      	mov	r1, r2
   1c328:	4618      	mov	r0, r3
   1c32a:	f7f1 f9af 	bl	d68c <AttsCccInitTable>
    appServerSetSigningInfo(connId);
   1c32e:	7bfb      	ldrb	r3, [r7, #15]
   1c330:	4618      	mov	r0, r3
   1c332:	f7ff ff95 	bl	1c260 <appServerSetSigningInfo>
}
   1c336:	e039      	b.n	1c3ac <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   1c338:	687b      	ldr	r3, [r7, #4]
   1c33a:	789b      	ldrb	r3, [r3, #2]
   1c33c:	2b2c      	cmp	r3, #44	; 0x2c
   1c33e:	d11c      	bne.n	1c37a <AppServerConnCback+0xc8>
    if (pDmEvt->encryptInd.usingLtk && appCheckBondByLtk(connId))
   1c340:	687b      	ldr	r3, [r7, #4]
   1c342:	791b      	ldrb	r3, [r3, #4]
   1c344:	2b00      	cmp	r3, #0
   1c346:	d031      	beq.n	1c3ac <AppServerConnCback+0xfa>
   1c348:	7bfb      	ldrb	r3, [r7, #15]
   1c34a:	4618      	mov	r0, r3
   1c34c:	f7ff fe0e 	bl	1bf6c <appCheckBondByLtk>
   1c350:	4603      	mov	r3, r0
   1c352:	2b00      	cmp	r3, #0
   1c354:	d02a      	beq.n	1c3ac <AppServerConnCback+0xfa>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1c356:	7bfb      	ldrb	r3, [r7, #15]
   1c358:	4618      	mov	r0, r3
   1c35a:	f7ff ff0b 	bl	1c174 <AppDbGetHdl>
   1c35e:	60b8      	str	r0, [r7, #8]
   1c360:	68bb      	ldr	r3, [r7, #8]
   1c362:	2b00      	cmp	r3, #0
   1c364:	d022      	beq.n	1c3ac <AppServerConnCback+0xfa>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1c366:	68b8      	ldr	r0, [r7, #8]
   1c368:	f7f7 fa9a 	bl	138a0 <AppDbGetCccTbl>
   1c36c:	4602      	mov	r2, r0
   1c36e:	7bfb      	ldrb	r3, [r7, #15]
   1c370:	4611      	mov	r1, r2
   1c372:	4618      	mov	r0, r3
   1c374:	f7f1 f98a 	bl	d68c <AttsCccInitTable>
}
   1c378:	e018      	b.n	1c3ac <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1c37a:	687b      	ldr	r3, [r7, #4]
   1c37c:	789b      	ldrb	r3, [r3, #2]
   1c37e:	2b28      	cmp	r3, #40	; 0x28
   1c380:	d114      	bne.n	1c3ac <AppServerConnCback+0xfa>
    AttsCccClearTable(connId);
   1c382:	7bfb      	ldrb	r3, [r7, #15]
   1c384:	4618      	mov	r0, r3
   1c386:	f7f1 f9c3 	bl	d710 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1c38a:	7bfb      	ldrb	r3, [r7, #15]
   1c38c:	4618      	mov	r0, r3
   1c38e:	f7ff fef1 	bl	1c174 <AppDbGetHdl>
   1c392:	60b8      	str	r0, [r7, #8]
   1c394:	68bb      	ldr	r3, [r7, #8]
   1c396:	2b00      	cmp	r3, #0
   1c398:	d008      	beq.n	1c3ac <AppServerConnCback+0xfa>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1c39a:	7bfb      	ldrb	r3, [r7, #15]
   1c39c:	4618      	mov	r0, r3
   1c39e:	f7f2 fb85 	bl	eaac <AttsGetSignCounter>
   1c3a2:	4603      	mov	r3, r0
   1c3a4:	4619      	mov	r1, r3
   1c3a6:	68b8      	ldr	r0, [r7, #8]
   1c3a8:	f7f7 fafe 	bl	139a8 <AppDbSetPeerSignCounter>
}
   1c3ac:	bf00      	nop
   1c3ae:	3710      	adds	r7, #16
   1c3b0:	46bd      	mov	sp, r7
   1c3b2:	bd80      	pop	{r7, pc}

0001c3b4 <appSlaveAdvModeInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
   1c3b4:	b480      	push	{r7}
   1c3b6:	af00      	add	r7, sp, #0
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   1c3b8:	4b05      	ldr	r3, [pc, #20]	; (1c3d0 <appSlaveAdvModeInit+0x1c>)
   1c3ba:	2200      	movs	r2, #0
   1c3bc:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   1c3be:	4b04      	ldr	r3, [pc, #16]	; (1c3d0 <appSlaveAdvModeInit+0x1c>)
   1c3c0:	2200      	movs	r2, #0
   1c3c2:	645a      	str	r2, [r3, #68]	; 0x44
}
   1c3c4:	bf00      	nop
   1c3c6:	46bd      	mov	sp, r7
   1c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c3cc:	4770      	bx	lr
   1c3ce:	bf00      	nop
   1c3d0:	10005e7c 	.word	0x10005e7c

0001c3d4 <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   1c3d4:	b480      	push	{r7}
   1c3d6:	b085      	sub	sp, #20
   1c3d8:	af00      	add	r7, sp, #0
   1c3da:	4603      	mov	r3, r0
   1c3dc:	6039      	str	r1, [r7, #0]
   1c3de:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   1c3e0:	2300      	movs	r3, #0
   1c3e2:	73fb      	strb	r3, [r7, #15]
   1c3e4:	e022      	b.n	1c42c <appSlaveConnectableAdv+0x58>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1c3e6:	2300      	movs	r3, #0
   1c3e8:	73bb      	strb	r3, [r7, #14]
   1c3ea:	e019      	b.n	1c420 <appSlaveConnectableAdv+0x4c>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
   1c3ec:	7bfb      	ldrb	r3, [r7, #15]
   1c3ee:	683a      	ldr	r2, [r7, #0]
   1c3f0:	4413      	add	r3, r2
   1c3f2:	781b      	ldrb	r3, [r3, #0]
   1c3f4:	7bba      	ldrb	r2, [r7, #14]
   1c3f6:	429a      	cmp	r2, r3
   1c3f8:	d10f      	bne.n	1c41a <appSlaveConnectableAdv+0x46>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1c3fa:	7bbb      	ldrb	r3, [r7, #14]
   1c3fc:	4a11      	ldr	r2, [pc, #68]	; (1c444 <appSlaveConnectableAdv+0x70>)
   1c3fe:	4413      	add	r3, r2
   1c400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
      if ((pAdvHandles[i] == j)                            &&
   1c404:	2b00      	cmp	r3, #0
   1c406:	d006      	beq.n	1c416 <appSlaveConnectableAdv+0x42>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   1c408:	7bbb      	ldrb	r3, [r7, #14]
   1c40a:	4a0e      	ldr	r2, [pc, #56]	; (1c444 <appSlaveConnectableAdv+0x70>)
   1c40c:	4413      	add	r3, r2
   1c40e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1c412:	2b05      	cmp	r3, #5
   1c414:	d101      	bne.n	1c41a <appSlaveConnectableAdv+0x46>
      {
        return TRUE;
   1c416:	2301      	movs	r3, #1
   1c418:	e00d      	b.n	1c436 <appSlaveConnectableAdv+0x62>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1c41a:	7bbb      	ldrb	r3, [r7, #14]
   1c41c:	3301      	adds	r3, #1
   1c41e:	73bb      	strb	r3, [r7, #14]
   1c420:	7bbb      	ldrb	r3, [r7, #14]
   1c422:	2b00      	cmp	r3, #0
   1c424:	d0e2      	beq.n	1c3ec <appSlaveConnectableAdv+0x18>
  for (i = 0; i < numSets; i++)
   1c426:	7bfb      	ldrb	r3, [r7, #15]
   1c428:	3301      	adds	r3, #1
   1c42a:	73fb      	strb	r3, [r7, #15]
   1c42c:	7bfa      	ldrb	r2, [r7, #15]
   1c42e:	79fb      	ldrb	r3, [r7, #7]
   1c430:	429a      	cmp	r2, r3
   1c432:	d3d8      	bcc.n	1c3e6 <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   1c434:	2300      	movs	r3, #0
}
   1c436:	4618      	mov	r0, r3
   1c438:	3714      	adds	r7, #20
   1c43a:	46bd      	mov	sp, r7
   1c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c440:	4770      	bx	lr
   1c442:	bf00      	nop
   1c444:	10005e7c 	.word	0x10005e7c

0001c448 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   1c448:	b480      	push	{r7}
   1c44a:	b085      	sub	sp, #20
   1c44c:	af00      	add	r7, sp, #0
   1c44e:	4603      	mov	r3, r0
   1c450:	460a      	mov	r2, r1
   1c452:	71fb      	strb	r3, [r7, #7]
   1c454:	4613      	mov	r3, r2
   1c456:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1c458:	79bb      	ldrb	r3, [r7, #6]
   1c45a:	005b      	lsls	r3, r3, #1
   1c45c:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1c45e:	79bb      	ldrb	r3, [r7, #6]
   1c460:	005b      	lsls	r3, r3, #1
   1c462:	b2db      	uxtb	r3, r3
   1c464:	3301      	adds	r3, #1
   1c466:	73bb      	strb	r3, [r7, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1c468:	79fa      	ldrb	r2, [r7, #7]
   1c46a:	7bfb      	ldrb	r3, [r7, #15]
   1c46c:	490d      	ldr	r1, [pc, #52]	; (1c4a4 <appSlaveForceAdvDataSync+0x5c>)
   1c46e:	0092      	lsls	r2, r2, #2
   1c470:	4413      	add	r3, r2
   1c472:	3310      	adds	r3, #16
   1c474:	2200      	movs	r2, #0
   1c476:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1c47a:	79fa      	ldrb	r2, [r7, #7]
   1c47c:	7bbb      	ldrb	r3, [r7, #14]
   1c47e:	4909      	ldr	r1, [pc, #36]	; (1c4a4 <appSlaveForceAdvDataSync+0x5c>)
   1c480:	0092      	lsls	r2, r2, #2
   1c482:	4413      	add	r3, r2
   1c484:	3310      	adds	r3, #16
   1c486:	2200      	movs	r2, #0
   1c488:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1c48c:	79fb      	ldrb	r3, [r7, #7]
   1c48e:	4a05      	ldr	r2, [pc, #20]	; (1c4a4 <appSlaveForceAdvDataSync+0x5c>)
   1c490:	4413      	add	r3, r2
   1c492:	2200      	movs	r2, #0
   1c494:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   1c498:	bf00      	nop
   1c49a:	3714      	adds	r7, #20
   1c49c:	46bd      	mov	sp, r7
   1c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c4a2:	4770      	bx	lr
   1c4a4:	10005e7c 	.word	0x10005e7c

0001c4a8 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   1c4a8:	b5b0      	push	{r4, r5, r7, lr}
   1c4aa:	b088      	sub	sp, #32
   1c4ac:	af02      	add	r7, sp, #8
   1c4ae:	4603      	mov	r3, r0
   1c4b0:	460a      	mov	r2, r1
   1c4b2:	71fb      	strb	r3, [r7, #7]
   1c4b4:	4613      	mov	r3, r2
   1c4b6:	71bb      	strb	r3, [r7, #6]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   1c4b8:	2301      	movs	r3, #1
   1c4ba:	747b      	strb	r3, [r7, #17]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1c4bc:	79fa      	ldrb	r2, [r7, #7]
   1c4be:	79bb      	ldrb	r3, [r7, #6]
   1c4c0:	493a      	ldr	r1, [pc, #232]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c4c2:	0092      	lsls	r2, r2, #2
   1c4c4:	4413      	add	r3, r2
   1c4c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1c4ca:	60fb      	str	r3, [r7, #12]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1c4cc:	79fa      	ldrb	r2, [r7, #7]
   1c4ce:	79bb      	ldrb	r3, [r7, #6]
   1c4d0:	4936      	ldr	r1, [pc, #216]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c4d2:	0092      	lsls	r2, r2, #2
   1c4d4:	4413      	add	r3, r2
   1c4d6:	3308      	adds	r3, #8
   1c4d8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1c4dc:	79f9      	ldrb	r1, [r7, #7]
   1c4de:	79bb      	ldrb	r3, [r7, #6]
   1c4e0:	4832      	ldr	r0, [pc, #200]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c4e2:	0089      	lsls	r1, r1, #2
   1c4e4:	440b      	add	r3, r1
   1c4e6:	3310      	adds	r3, #16
   1c4e8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1c4ec:	1ad3      	subs	r3, r2, r3
   1c4ee:	827b      	strh	r3, [r7, #18]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1c4f0:	79fb      	ldrb	r3, [r7, #7]
   1c4f2:	4a2e      	ldr	r2, [pc, #184]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c4f4:	3314      	adds	r3, #20
   1c4f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1c4fa:	8a7a      	ldrh	r2, [r7, #18]
   1c4fc:	429a      	cmp	r2, r3
   1c4fe:	d94e      	bls.n	1c59e <appSetAdvScanDataFrag+0xf6>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   1c500:	79fb      	ldrb	r3, [r7, #7]
   1c502:	4a2a      	ldr	r2, [pc, #168]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c504:	3314      	adds	r3, #20
   1c506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1c50a:	827b      	strh	r3, [r7, #18]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1c50c:	e047      	b.n	1c59e <appSetAdvScanDataFrag+0xf6>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1c50e:	8a7b      	ldrh	r3, [r7, #18]
   1c510:	2bfb      	cmp	r3, #251	; 0xfb
   1c512:	d909      	bls.n	1c528 <appSetAdvScanDataFrag+0x80>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1c514:	23fb      	movs	r3, #251	; 0xfb
   1c516:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   1c518:	7c7b      	ldrb	r3, [r7, #17]
   1c51a:	2b00      	cmp	r3, #0
   1c51c:	bf14      	ite	ne
   1c51e:	2301      	movne	r3, #1
   1c520:	2300      	moveq	r3, #0
   1c522:	b2db      	uxtb	r3, r3
   1c524:	75fb      	strb	r3, [r7, #23]
   1c526:	e008      	b.n	1c53a <appSetAdvScanDataFrag+0x92>
      
    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   1c528:	8a7b      	ldrh	r3, [r7, #18]
   1c52a:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1c52c:	7c7b      	ldrb	r3, [r7, #17]
   1c52e:	2b00      	cmp	r3, #0
   1c530:	d001      	beq.n	1c536 <appSetAdvScanDataFrag+0x8e>
   1c532:	2303      	movs	r3, #3
   1c534:	e000      	b.n	1c538 <appSetAdvScanDataFrag+0x90>
   1c536:	2302      	movs	r3, #2
   1c538:	75fb      	strb	r3, [r7, #23]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1c53a:	79bb      	ldrb	r3, [r7, #6]
   1c53c:	f003 0301 	and.w	r3, r3, #1
   1c540:	b2dc      	uxtb	r4, r3
   1c542:	8abb      	ldrh	r3, [r7, #20]
   1c544:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   1c546:	79fa      	ldrb	r2, [r7, #7]
   1c548:	79bb      	ldrb	r3, [r7, #6]
   1c54a:	4918      	ldr	r1, [pc, #96]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c54c:	0092      	lsls	r2, r2, #2
   1c54e:	4413      	add	r3, r2
   1c550:	3310      	adds	r3, #16
   1c552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1c556:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1c558:	68fb      	ldr	r3, [r7, #12]
   1c55a:	4413      	add	r3, r2
   1c55c:	7df9      	ldrb	r1, [r7, #23]
   1c55e:	79f8      	ldrb	r0, [r7, #7]
   1c560:	9300      	str	r3, [sp, #0]
   1c562:	462b      	mov	r3, r5
   1c564:	4622      	mov	r2, r4
   1c566:	f7f2 fc89 	bl	ee7c <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1c56a:	79fa      	ldrb	r2, [r7, #7]
   1c56c:	79bb      	ldrb	r3, [r7, #6]
   1c56e:	79f8      	ldrb	r0, [r7, #7]
   1c570:	79b9      	ldrb	r1, [r7, #6]
   1c572:	4c0e      	ldr	r4, [pc, #56]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c574:	0080      	lsls	r0, r0, #2
   1c576:	4401      	add	r1, r0
   1c578:	3110      	adds	r1, #16
   1c57a:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   1c57e:	8ab9      	ldrh	r1, [r7, #20]
   1c580:	4401      	add	r1, r0
   1c582:	b288      	uxth	r0, r1
   1c584:	4909      	ldr	r1, [pc, #36]	; (1c5ac <appSetAdvScanDataFrag+0x104>)
   1c586:	0092      	lsls	r2, r2, #2
   1c588:	4413      	add	r3, r2
   1c58a:	3310      	adds	r3, #16
   1c58c:	4602      	mov	r2, r0
   1c58e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   1c592:	8a7a      	ldrh	r2, [r7, #18]
   1c594:	8abb      	ldrh	r3, [r7, #20]
   1c596:	1ad3      	subs	r3, r2, r3
   1c598:	827b      	strh	r3, [r7, #18]
    firstFrag = FALSE;
   1c59a:	2300      	movs	r3, #0
   1c59c:	747b      	strb	r3, [r7, #17]
  while (remainLen > 0)
   1c59e:	8a7b      	ldrh	r3, [r7, #18]
   1c5a0:	2b00      	cmp	r3, #0
   1c5a2:	d1b4      	bne.n	1c50e <appSetAdvScanDataFrag+0x66>
  }
}
   1c5a4:	bf00      	nop
   1c5a6:	3718      	adds	r7, #24
   1c5a8:	46bd      	mov	sp, r7
   1c5aa:	bdb0      	pop	{r4, r5, r7, pc}
   1c5ac:	10005e7c 	.word	0x10005e7c

0001c5b0 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   1c5b0:	b580      	push	{r7, lr}
   1c5b2:	b084      	sub	sp, #16
   1c5b4:	af00      	add	r7, sp, #0
   1c5b6:	4603      	mov	r3, r0
   1c5b8:	460a      	mov	r2, r1
   1c5ba:	71fb      	strb	r3, [r7, #7]
   1c5bc:	4613      	mov	r3, r2
   1c5be:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1c5c0:	79bb      	ldrb	r3, [r7, #6]
   1c5c2:	005b      	lsls	r3, r3, #1
   1c5c4:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1c5c6:	79bb      	ldrb	r3, [r7, #6]
   1c5c8:	005b      	lsls	r3, r3, #1
   1c5ca:	b2db      	uxtb	r3, r3
   1c5cc:	3301      	adds	r3, #1
   1c5ce:	73bb      	strb	r3, [r7, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1c5d0:	79fa      	ldrb	r2, [r7, #7]
   1c5d2:	7bfb      	ldrb	r3, [r7, #15]
   1c5d4:	492d      	ldr	r1, [pc, #180]	; (1c68c <appSetAdvScanData+0xdc>)
   1c5d6:	0092      	lsls	r2, r2, #2
   1c5d8:	4413      	add	r3, r2
   1c5da:	3310      	adds	r3, #16
   1c5dc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1c5e0:	79f9      	ldrb	r1, [r7, #7]
   1c5e2:	7bfb      	ldrb	r3, [r7, #15]
   1c5e4:	4829      	ldr	r0, [pc, #164]	; (1c68c <appSetAdvScanData+0xdc>)
   1c5e6:	0089      	lsls	r1, r1, #2
   1c5e8:	440b      	add	r3, r1
   1c5ea:	3308      	adds	r3, #8
   1c5ec:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1c5f0:	429a      	cmp	r2, r3
   1c5f2:	d205      	bcs.n	1c600 <appSetAdvScanData+0x50>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   1c5f4:	7bfa      	ldrb	r2, [r7, #15]
   1c5f6:	79fb      	ldrb	r3, [r7, #7]
   1c5f8:	4611      	mov	r1, r2
   1c5fa:	4618      	mov	r0, r3
   1c5fc:	f7ff ff54 	bl	1c4a8 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1c600:	79fa      	ldrb	r2, [r7, #7]
   1c602:	7bbb      	ldrb	r3, [r7, #14]
   1c604:	4921      	ldr	r1, [pc, #132]	; (1c68c <appSetAdvScanData+0xdc>)
   1c606:	0092      	lsls	r2, r2, #2
   1c608:	4413      	add	r3, r2
   1c60a:	3310      	adds	r3, #16
   1c60c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1c610:	79f9      	ldrb	r1, [r7, #7]
   1c612:	7bbb      	ldrb	r3, [r7, #14]
   1c614:	481d      	ldr	r0, [pc, #116]	; (1c68c <appSetAdvScanData+0xdc>)
   1c616:	0089      	lsls	r1, r1, #2
   1c618:	440b      	add	r3, r1
   1c61a:	3308      	adds	r3, #8
   1c61c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1c620:	429a      	cmp	r2, r3
   1c622:	d205      	bcs.n	1c630 <appSetAdvScanData+0x80>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1c624:	7bba      	ldrb	r2, [r7, #14]
   1c626:	79fb      	ldrb	r3, [r7, #7]
   1c628:	4611      	mov	r1, r2
   1c62a:	4618      	mov	r0, r3
   1c62c:	f7ff ff3c 	bl	1c4a8 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1c630:	79fa      	ldrb	r2, [r7, #7]
   1c632:	7bfb      	ldrb	r3, [r7, #15]
   1c634:	4915      	ldr	r1, [pc, #84]	; (1c68c <appSetAdvScanData+0xdc>)
   1c636:	0092      	lsls	r2, r2, #2
   1c638:	4413      	add	r3, r2
   1c63a:	3310      	adds	r3, #16
   1c63c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1c640:	79f9      	ldrb	r1, [r7, #7]
   1c642:	7bfb      	ldrb	r3, [r7, #15]
   1c644:	4811      	ldr	r0, [pc, #68]	; (1c68c <appSetAdvScanData+0xdc>)
   1c646:	0089      	lsls	r1, r1, #2
   1c648:	440b      	add	r3, r1
   1c64a:	3308      	adds	r3, #8
   1c64c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1c650:	429a      	cmp	r2, r3
   1c652:	d317      	bcc.n	1c684 <appSetAdvScanData+0xd4>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1c654:	79fa      	ldrb	r2, [r7, #7]
   1c656:	7bbb      	ldrb	r3, [r7, #14]
   1c658:	490c      	ldr	r1, [pc, #48]	; (1c68c <appSetAdvScanData+0xdc>)
   1c65a:	0092      	lsls	r2, r2, #2
   1c65c:	4413      	add	r3, r2
   1c65e:	3310      	adds	r3, #16
   1c660:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1c664:	79f9      	ldrb	r1, [r7, #7]
   1c666:	7bbb      	ldrb	r3, [r7, #14]
   1c668:	4808      	ldr	r0, [pc, #32]	; (1c68c <appSetAdvScanData+0xdc>)
   1c66a:	0089      	lsls	r1, r1, #2
   1c66c:	440b      	add	r3, r1
   1c66e:	3308      	adds	r3, #8
   1c670:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1c674:	429a      	cmp	r2, r3
   1c676:	d305      	bcc.n	1c684 <appSetAdvScanData+0xd4>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1c678:	79fb      	ldrb	r3, [r7, #7]
   1c67a:	4a04      	ldr	r2, [pc, #16]	; (1c68c <appSetAdvScanData+0xdc>)
   1c67c:	4413      	add	r3, r2
   1c67e:	2201      	movs	r2, #1
   1c680:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1c684:	bf00      	nop
   1c686:	3710      	adds	r7, #16
   1c688:	46bd      	mov	sp, r7
   1c68a:	bd80      	pop	{r7, pc}
   1c68c:	10005e7c 	.word	0x10005e7c

0001c690 <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   1c690:	b580      	push	{r7, lr}
   1c692:	b084      	sub	sp, #16
   1c694:	af00      	add	r7, sp, #0
   1c696:	4603      	mov	r3, r0
   1c698:	71fb      	strb	r3, [r7, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1c69a:	79fb      	ldrb	r3, [r7, #7]
   1c69c:	3b01      	subs	r3, #1
   1c69e:	015b      	lsls	r3, r3, #5
   1c6a0:	4a0d      	ldr	r2, [pc, #52]	; (1c6d8 <appConnUpdateTimerStart+0x48>)
   1c6a2:	4413      	add	r3, r2
   1c6a4:	60fb      	str	r3, [r7, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   1c6a6:	4b0d      	ldr	r3, [pc, #52]	; (1c6dc <appConnUpdateTimerStart+0x4c>)
   1c6a8:	781a      	ldrb	r2, [r3, #0]
   1c6aa:	68fb      	ldr	r3, [r7, #12]
   1c6ac:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1c6ae:	68fb      	ldr	r3, [r7, #12]
   1c6b0:	2210      	movs	r2, #16
   1c6b2:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   1c6b4:	79fb      	ldrb	r3, [r7, #7]
   1c6b6:	b29a      	uxth	r2, r3
   1c6b8:	68fb      	ldr	r3, [r7, #12]
   1c6ba:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1c6bc:	68fb      	ldr	r3, [r7, #12]
   1c6be:	f103 0210 	add.w	r2, r3, #16
   1c6c2:	4b07      	ldr	r3, [pc, #28]	; (1c6e0 <appConnUpdateTimerStart+0x50>)
   1c6c4:	681b      	ldr	r3, [r3, #0]
   1c6c6:	681b      	ldr	r3, [r3, #0]
   1c6c8:	4619      	mov	r1, r3
   1c6ca:	4610      	mov	r0, r2
   1c6cc:	f7f8 ff84 	bl	155d8 <WsfTimerStartMs>
}
   1c6d0:	bf00      	nop
   1c6d2:	3710      	adds	r7, #16
   1c6d4:	46bd      	mov	sp, r7
   1c6d6:	bd80      	pop	{r7, pc}
   1c6d8:	10005d7c 	.word	0x10005d7c
   1c6dc:	10005d68 	.word	0x10005d68
   1c6e0:	10005d50 	.word	0x10005d50

0001c6e4 <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   1c6e4:	b580      	push	{r7, lr}
   1c6e6:	b082      	sub	sp, #8
   1c6e8:	af00      	add	r7, sp, #0
   1c6ea:	6078      	str	r0, [r7, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   1c6ec:	4b06      	ldr	r3, [pc, #24]	; (1c708 <appConnUpdateTimerStop+0x24>)
   1c6ee:	681b      	ldr	r3, [r3, #0]
   1c6f0:	681b      	ldr	r3, [r3, #0]
   1c6f2:	2b00      	cmp	r3, #0
   1c6f4:	d004      	beq.n	1c700 <appConnUpdateTimerStop+0x1c>
  {
    WsfTimerStop(&pCb->updateTimer);
   1c6f6:	687b      	ldr	r3, [r7, #4]
   1c6f8:	3310      	adds	r3, #16
   1c6fa:	4618      	mov	r0, r3
   1c6fc:	f7f8 ff80 	bl	15600 <WsfTimerStop>
  }  
}
   1c700:	bf00      	nop
   1c702:	3708      	adds	r7, #8
   1c704:	46bd      	mov	sp, r7
   1c706:	bd80      	pop	{r7, pc}
   1c708:	10005d50 	.word	0x10005d50

0001c70c <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   1c70c:	b580      	push	{r7, lr}
   1c70e:	b084      	sub	sp, #16
   1c710:	af00      	add	r7, sp, #0
   1c712:	6078      	str	r0, [r7, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   1c714:	4b16      	ldr	r3, [pc, #88]	; (1c770 <appSlaveResolveAddr+0x64>)
   1c716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1c71a:	2b00      	cmp	r3, #0
   1c71c:	d124      	bne.n	1c768 <appSlaveResolveAddr+0x5c>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1c71e:	2000      	movs	r0, #0
   1c720:	f7f6 febe 	bl	134a0 <AppDbGetNextRecord>
   1c724:	60f8      	str	r0, [r7, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1c726:	68fb      	ldr	r3, [r7, #12]
   1c728:	2b00      	cmp	r3, #0
   1c72a:	d01e      	beq.n	1c76a <appSlaveResolveAddr+0x5e>
   1c72c:	2200      	movs	r2, #0
   1c72e:	2104      	movs	r1, #4
   1c730:	68f8      	ldr	r0, [r7, #12]
   1c732:	f7f6 ffef 	bl	13714 <AppDbGetKey>
   1c736:	60b8      	str	r0, [r7, #8]
   1c738:	68bb      	ldr	r3, [r7, #8]
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	d015      	beq.n	1c76a <appSlaveResolveAddr+0x5e>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   1c73e:	687b      	ldr	r3, [r7, #4]
   1c740:	f103 000a 	add.w	r0, r3, #10
   1c744:	68b9      	ldr	r1, [r7, #8]
   1c746:	687b      	ldr	r3, [r7, #4]
   1c748:	881b      	ldrh	r3, [r3, #0]
   1c74a:	461a      	mov	r2, r3
   1c74c:	f7f3 fe0a 	bl	10364 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   1c750:	4a07      	ldr	r2, [pc, #28]	; (1c770 <appSlaveResolveAddr+0x64>)
   1c752:	68fb      	ldr	r3, [r7, #12]
   1c754:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   1c756:	4b06      	ldr	r3, [pc, #24]	; (1c770 <appSlaveResolveAddr+0x64>)
   1c758:	2201      	movs	r2, #1
   1c75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   1c75e:	4b04      	ldr	r3, [pc, #16]	; (1c770 <appSlaveResolveAddr+0x64>)
   1c760:	2200      	movs	r2, #0
   1c762:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1c766:	e000      	b.n	1c76a <appSlaveResolveAddr+0x5e>
    return;
   1c768:	bf00      	nop
  }
}
   1c76a:	3710      	adds	r7, #16
   1c76c:	46bd      	mov	sp, r7
   1c76e:	bd80      	pop	{r7, pc}
   1c770:	10005e7c 	.word	0x10005e7c

0001c774 <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   1c774:	b580      	push	{r7, lr}
   1c776:	b084      	sub	sp, #16
   1c778:	af00      	add	r7, sp, #0
   1c77a:	6078      	str	r0, [r7, #4]
  dmSecKey_t  *pKey = NULL;
   1c77c:	2300      	movs	r3, #0
   1c77e:	60fb      	str	r3, [r7, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1c780:	687b      	ldr	r3, [r7, #4]
   1c782:	681b      	ldr	r3, [r3, #0]
   1c784:	2b00      	cmp	r3, #0
   1c786:	d008      	beq.n	1c79a <appSecRspLtk+0x26>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1c788:	687b      	ldr	r3, [r7, #4]
   1c78a:	681b      	ldr	r3, [r3, #0]
   1c78c:	f107 020b 	add.w	r2, r7, #11
   1c790:	2101      	movs	r1, #1
   1c792:	4618      	mov	r0, r3
   1c794:	f7f6 ffbe 	bl	13714 <AppDbGetKey>
   1c798:	60f8      	str	r0, [r7, #12]
  }

  if (pKey != NULL)
   1c79a:	68fb      	ldr	r3, [r7, #12]
   1c79c:	2b00      	cmp	r3, #0
   1c79e:	d011      	beq.n	1c7c4 <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   1c7a0:	687b      	ldr	r3, [r7, #4]
   1c7a2:	795b      	ldrb	r3, [r3, #5]
   1c7a4:	2b00      	cmp	r3, #0
   1c7a6:	bf0c      	ite	eq
   1c7a8:	2301      	moveq	r3, #1
   1c7aa:	2300      	movne	r3, #0
   1c7ac:	b2db      	uxtb	r3, r3
   1c7ae:	461a      	mov	r2, r3
   1c7b0:	687b      	ldr	r3, [r7, #4]
   1c7b2:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1c7b4:	687b      	ldr	r3, [r7, #4]
   1c7b6:	7918      	ldrb	r0, [r3, #4]
   1c7b8:	7afa      	ldrb	r2, [r7, #11]
   1c7ba:	68fb      	ldr	r3, [r7, #12]
   1c7bc:	2101      	movs	r1, #1
   1c7be:	f7f4 f96e 	bl	10a9e <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   1c7c2:	e009      	b.n	1c7d8 <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   1c7c4:	687b      	ldr	r3, [r7, #4]
   1c7c6:	2200      	movs	r2, #0
   1c7c8:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1c7ca:	687b      	ldr	r3, [r7, #4]
   1c7cc:	7918      	ldrb	r0, [r3, #4]
   1c7ce:	2300      	movs	r3, #0
   1c7d0:	2200      	movs	r2, #0
   1c7d2:	2100      	movs	r1, #0
   1c7d4:	f7f4 f963 	bl	10a9e <DmSecLtkRsp>
}
   1c7d8:	bf00      	nop
   1c7da:	3710      	adds	r7, #16
   1c7dc:	46bd      	mov	sp, r7
   1c7de:	bd80      	pop	{r7, pc}

0001c7e0 <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c7e0:	b580      	push	{r7, lr}
   1c7e2:	b082      	sub	sp, #8
   1c7e4:	af00      	add	r7, sp, #0
   1c7e6:	6078      	str	r0, [r7, #4]
   1c7e8:	6039      	str	r1, [r7, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   1c7ea:	6839      	ldr	r1, [r7, #0]
   1c7ec:	6878      	ldr	r0, [r7, #4]
   1c7ee:	f000 f83f 	bl	1c870 <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   1c7f2:	4b06      	ldr	r3, [pc, #24]	; (1c80c <appSlaveConnOpen+0x2c>)
   1c7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c7f6:	2b00      	cmp	r3, #0
   1c7f8:	d003      	beq.n	1c802 <appSlaveConnOpen+0x22>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   1c7fa:	4b04      	ldr	r3, [pc, #16]	; (1c80c <appSlaveConnOpen+0x2c>)
   1c7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c7fe:	6878      	ldr	r0, [r7, #4]
   1c800:	4798      	blx	r3
  }
}
   1c802:	bf00      	nop
   1c804:	3708      	adds	r7, #8
   1c806:	46bd      	mov	sp, r7
   1c808:	bd80      	pop	{r7, pc}
   1c80a:	bf00      	nop
   1c80c:	10005e7c 	.word	0x10005e7c

0001c810 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c810:	b580      	push	{r7, lr}
   1c812:	b084      	sub	sp, #16
   1c814:	af00      	add	r7, sp, #0
   1c816:	6078      	str	r0, [r7, #4]
   1c818:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   1c81a:	683b      	ldr	r3, [r7, #0]
   1c81c:	681b      	ldr	r3, [r3, #0]
   1c81e:	4618      	mov	r0, r3
   1c820:	f7ff fcf2 	bl	1c208 <AppUpdatePrivacyMode>

  /* if actually advertising has timed out (for high duty cycle connectable directed advertising) */
  if (pMsg->hdr.status == HCI_ERR_ADV_TIMEOUT)
   1c824:	687b      	ldr	r3, [r7, #4]
   1c826:	78db      	ldrb	r3, [r3, #3]
   1c828:	2b3c      	cmp	r3, #60	; 0x3c
   1c82a:	d10f      	bne.n	1c84c <appSlaveConnClose+0x3c>
  {
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c82c:	2300      	movs	r3, #0
   1c82e:	73fb      	strb	r3, [r7, #15]
   1c830:	e008      	b.n	1c844 <appSlaveConnClose+0x34>
    {
      /* done advertising */
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1c832:	7bfb      	ldrb	r3, [r7, #15]
   1c834:	4a0d      	ldr	r2, [pc, #52]	; (1c86c <appSlaveConnClose+0x5c>)
   1c836:	4413      	add	r3, r2
   1c838:	2203      	movs	r2, #3
   1c83a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c83e:	7bfb      	ldrb	r3, [r7, #15]
   1c840:	3301      	adds	r3, #1
   1c842:	73fb      	strb	r3, [r7, #15]
   1c844:	7bfb      	ldrb	r3, [r7, #15]
   1c846:	2b00      	cmp	r3, #0
   1c848:	d0f3      	beq.n	1c832 <appSlaveConnClose+0x22>
    {
      /* restart advertising */
      (*appSlaveCb.advRestartCback)(pMsg);
    }
  }
}
   1c84a:	e00b      	b.n	1c864 <appSlaveConnClose+0x54>
    appSlaveProcConnClose(pMsg, pCb);
   1c84c:	6839      	ldr	r1, [r7, #0]
   1c84e:	6878      	ldr	r0, [r7, #4]
   1c850:	f000 f84a 	bl	1c8e8 <appSlaveProcConnClose>
    if (appSlaveCb.advRestartCback != NULL)
   1c854:	4b05      	ldr	r3, [pc, #20]	; (1c86c <appSlaveConnClose+0x5c>)
   1c856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c858:	2b00      	cmp	r3, #0
   1c85a:	d003      	beq.n	1c864 <appSlaveConnClose+0x54>
      (*appSlaveCb.advRestartCback)(pMsg);
   1c85c:	4b03      	ldr	r3, [pc, #12]	; (1c86c <appSlaveConnClose+0x5c>)
   1c85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c860:	6878      	ldr	r0, [r7, #4]
   1c862:	4798      	blx	r3
}
   1c864:	bf00      	nop
   1c866:	3710      	adds	r7, #16
   1c868:	46bd      	mov	sp, r7
   1c86a:	bd80      	pop	{r7, pc}
   1c86c:	10005e7c 	.word	0x10005e7c

0001c870 <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{ 
   1c870:	b580      	push	{r7, lr}
   1c872:	b082      	sub	sp, #8
   1c874:	af00      	add	r7, sp, #0
   1c876:	6078      	str	r0, [r7, #4]
   1c878:	6039      	str	r1, [r7, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   1c87a:	687b      	ldr	r3, [r7, #4]
   1c87c:	881b      	ldrh	r3, [r3, #0]
   1c87e:	b2da      	uxtb	r2, r3
   1c880:	683b      	ldr	r3, [r7, #0]
   1c882:	711a      	strb	r2, [r3, #4]
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1c884:	4b17      	ldr	r3, [pc, #92]	; (1c8e4 <appSlaveProcConnOpen+0x74>)
   1c886:	681b      	ldr	r3, [r3, #0]
   1c888:	681b      	ldr	r3, [r3, #0]
   1c88a:	2b00      	cmp	r3, #0
   1c88c:	d026      	beq.n	1c8dc <appSlaveProcConnOpen+0x6c>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1c88e:	687b      	ldr	r3, [r7, #4]
   1c890:	8a1a      	ldrh	r2, [r3, #16]
   1c892:	4b14      	ldr	r3, [pc, #80]	; (1c8e4 <appSlaveProcConnOpen+0x74>)
   1c894:	681b      	ldr	r3, [r3, #0]
   1c896:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1c898:	429a      	cmp	r2, r3
   1c89a:	d314      	bcc.n	1c8c6 <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1c89c:	687b      	ldr	r3, [r7, #4]
   1c89e:	8a1a      	ldrh	r2, [r3, #16]
   1c8a0:	4b10      	ldr	r3, [pc, #64]	; (1c8e4 <appSlaveProcConnOpen+0x74>)
   1c8a2:	681b      	ldr	r3, [r3, #0]
   1c8a4:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1c8a6:	429a      	cmp	r2, r3
   1c8a8:	d80d      	bhi.n	1c8c6 <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1c8aa:	687b      	ldr	r3, [r7, #4]
   1c8ac:	8a5a      	ldrh	r2, [r3, #18]
   1c8ae:	4b0d      	ldr	r3, [pc, #52]	; (1c8e4 <appSlaveProcConnOpen+0x74>)
   1c8b0:	681b      	ldr	r3, [r3, #0]
   1c8b2:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1c8b4:	429a      	cmp	r2, r3
   1c8b6:	d106      	bne.n	1c8c6 <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   1c8b8:	687b      	ldr	r3, [r7, #4]
   1c8ba:	8a9a      	ldrh	r2, [r3, #20]
   1c8bc:	4b09      	ldr	r3, [pc, #36]	; (1c8e4 <appSlaveProcConnOpen+0x74>)
   1c8be:	681b      	ldr	r3, [r3, #0]
   1c8c0:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1c8c2:	429a      	cmp	r2, r3
   1c8c4:	d00a      	beq.n	1c8dc <appSlaveProcConnOpen+0x6c>
  {
    pCb->connWasIdle = FALSE;
   1c8c6:	683b      	ldr	r3, [r7, #0]
   1c8c8:	2200      	movs	r2, #0
   1c8ca:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   1c8cc:	683b      	ldr	r3, [r7, #0]
   1c8ce:	2200      	movs	r2, #0
   1c8d0:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   1c8d2:	683b      	ldr	r3, [r7, #0]
   1c8d4:	791b      	ldrb	r3, [r3, #4]
   1c8d6:	4618      	mov	r0, r3
   1c8d8:	f7ff feda 	bl	1c690 <appConnUpdateTimerStart>
  }
}
   1c8dc:	bf00      	nop
   1c8de:	3708      	adds	r7, #8
   1c8e0:	46bd      	mov	sp, r7
   1c8e2:	bd80      	pop	{r7, pc}
   1c8e4:	10005d50 	.word	0x10005d50

0001c8e8 <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c8e8:	b580      	push	{r7, lr}
   1c8ea:	b084      	sub	sp, #16
   1c8ec:	af00      	add	r7, sp, #0
   1c8ee:	6078      	str	r0, [r7, #4]
   1c8f0:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   1c8f2:	6838      	ldr	r0, [r7, #0]
   1c8f4:	f7ff fef6 	bl	1c6e4 <appConnUpdateTimerStop>
  
  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   1c8f8:	683b      	ldr	r3, [r7, #0]
   1c8fa:	2200      	movs	r2, #0
   1c8fc:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   1c8fe:	683b      	ldr	r3, [r7, #0]
   1c900:	2200      	movs	r2, #0
   1c902:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   1c904:	4b10      	ldr	r3, [pc, #64]	; (1c948 <appSlaveProcConnClose+0x60>)
   1c906:	2200      	movs	r2, #0
   1c908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   1c90c:	683b      	ldr	r3, [r7, #0]
   1c90e:	7a5b      	ldrb	r3, [r3, #9]
   1c910:	2b00      	cmp	r3, #0
   1c912:	d014      	beq.n	1c93e <appSlaveProcConnClose+0x56>
  {
    pCb->setConnectable = FALSE;
   1c914:	683b      	ldr	r3, [r7, #0]
   1c916:	2200      	movs	r2, #0
   1c918:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1c91a:	4b0b      	ldr	r3, [pc, #44]	; (1c948 <appSlaveProcConnClose+0x60>)
   1c91c:	2200      	movs	r2, #0
   1c91e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    
    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c922:	2300      	movs	r3, #0
   1c924:	73fb      	strb	r3, [r7, #15]
   1c926:	e007      	b.n	1c938 <appSlaveProcConnClose+0x50>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   1c928:	7bfb      	ldrb	r3, [r7, #15]
   1c92a:	2100      	movs	r1, #0
   1c92c:	4618      	mov	r0, r3
   1c92e:	f7ff fd8b 	bl	1c448 <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c932:	7bfb      	ldrb	r3, [r7, #15]
   1c934:	3301      	adds	r3, #1
   1c936:	73fb      	strb	r3, [r7, #15]
   1c938:	7bfb      	ldrb	r3, [r7, #15]
   1c93a:	2b00      	cmp	r3, #0
   1c93c:	d0f4      	beq.n	1c928 <appSlaveProcConnClose+0x40>
    }
  }
}
   1c93e:	bf00      	nop
   1c940:	3710      	adds	r7, #16
   1c942:	46bd      	mov	sp, r7
   1c944:	bd80      	pop	{r7, pc}
   1c946:	bf00      	nop
   1c948:	10005e7c 	.word	0x10005e7c

0001c94c <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c94c:	b580      	push	{r7, lr}
   1c94e:	b082      	sub	sp, #8
   1c950:	af00      	add	r7, sp, #0
   1c952:	6078      	str	r0, [r7, #4]
   1c954:	6039      	str	r1, [r7, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   1c956:	4b1a      	ldr	r3, [pc, #104]	; (1c9c0 <appSlaveConnUpdate+0x74>)
   1c958:	681b      	ldr	r3, [r3, #0]
   1c95a:	681b      	ldr	r3, [r3, #0]
   1c95c:	2b00      	cmp	r3, #0
   1c95e:	d02b      	beq.n	1c9b8 <appSlaveConnUpdate+0x6c>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   1c960:	687b      	ldr	r3, [r7, #4]
   1c962:	78db      	ldrb	r3, [r3, #3]
   1c964:	2b00      	cmp	r3, #0
   1c966:	d117      	bne.n	1c998 <appSlaveConnUpdate+0x4c>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   1c968:	4b15      	ldr	r3, [pc, #84]	; (1c9c0 <appSlaveConnUpdate+0x74>)
   1c96a:	681b      	ldr	r3, [r3, #0]
   1c96c:	889a      	ldrh	r2, [r3, #4]
   1c96e:	687b      	ldr	r3, [r7, #4]
   1c970:	891b      	ldrh	r3, [r3, #8]
   1c972:	429a      	cmp	r2, r3
   1c974:	d80a      	bhi.n	1c98c <appSlaveConnUpdate+0x40>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   1c976:	4b12      	ldr	r3, [pc, #72]	; (1c9c0 <appSlaveConnUpdate+0x74>)
   1c978:	681b      	ldr	r3, [r3, #0]
   1c97a:	88da      	ldrh	r2, [r3, #6]
   1c97c:	687b      	ldr	r3, [r7, #4]
   1c97e:	891b      	ldrh	r3, [r3, #8]
   1c980:	429a      	cmp	r2, r3
   1c982:	d303      	bcc.n	1c98c <appSlaveConnUpdate+0x40>
      {
        appConnUpdateTimerStop(pCb);
   1c984:	6838      	ldr	r0, [r7, #0]
   1c986:	f7ff fead 	bl	1c6e4 <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   1c98a:	e015      	b.n	1c9b8 <appSlaveConnUpdate+0x6c>
        appConnUpdateTimerStart(pCb->connId);
   1c98c:	683b      	ldr	r3, [r7, #0]
   1c98e:	791b      	ldrb	r3, [r3, #4]
   1c990:	4618      	mov	r0, r3
   1c992:	f7ff fe7d 	bl	1c690 <appConnUpdateTimerStart>
}
   1c996:	e00f      	b.n	1c9b8 <appSlaveConnUpdate+0x6c>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   1c998:	687b      	ldr	r3, [r7, #4]
   1c99a:	78db      	ldrb	r3, [r3, #3]
   1c99c:	2b0c      	cmp	r3, #12
   1c99e:	d00b      	beq.n	1c9b8 <appSlaveConnUpdate+0x6c>
   1c9a0:	683b      	ldr	r3, [r7, #0]
   1c9a2:	7b1a      	ldrb	r2, [r3, #12]
   1c9a4:	4b06      	ldr	r3, [pc, #24]	; (1c9c0 <appSlaveConnUpdate+0x74>)
   1c9a6:	681b      	ldr	r3, [r3, #0]
   1c9a8:	7b1b      	ldrb	r3, [r3, #12]
   1c9aa:	429a      	cmp	r2, r3
   1c9ac:	d204      	bcs.n	1c9b8 <appSlaveConnUpdate+0x6c>
      appConnUpdateTimerStart(pCb->connId);
   1c9ae:	683b      	ldr	r3, [r7, #0]
   1c9b0:	791b      	ldrb	r3, [r3, #4]
   1c9b2:	4618      	mov	r0, r3
   1c9b4:	f7ff fe6c 	bl	1c690 <appConnUpdateTimerStart>
}
   1c9b8:	bf00      	nop
   1c9ba:	3708      	adds	r7, #8
   1c9bc:	46bd      	mov	sp, r7
   1c9be:	bd80      	pop	{r7, pc}
   1c9c0:	10005d50 	.word	0x10005d50

0001c9c4 <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c9c4:	b580      	push	{r7, lr}
   1c9c6:	b084      	sub	sp, #16
   1c9c8:	af00      	add	r7, sp, #0
   1c9ca:	6078      	str	r0, [r7, #4]
   1c9cc:	6039      	str	r1, [r7, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   1c9ce:	4b27      	ldr	r3, [pc, #156]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1c9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1c9d4:	2b00      	cmp	r3, #0
   1c9d6:	d044      	beq.n	1ca62 <appSlaveResolvedAddrInd+0x9e>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   1c9d8:	687b      	ldr	r3, [r7, #4]
   1c9da:	78db      	ldrb	r3, [r3, #3]
   1c9dc:	2b00      	cmp	r3, #0
   1c9de:	d110      	bne.n	1ca02 <appSlaveResolvedAddrInd+0x3e>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   1c9e0:	4b22      	ldr	r3, [pc, #136]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1c9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c9e4:	683b      	ldr	r3, [r7, #0]
   1c9e6:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   1c9e8:	4b20      	ldr	r3, [pc, #128]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1c9ea:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   1c9ee:	2b00      	cmp	r3, #0
   1c9f0:	d032      	beq.n	1ca58 <appSlaveResolvedAddrInd+0x94>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   1c9f2:	6838      	ldr	r0, [r7, #0]
   1c9f4:	f7ff febe 	bl	1c774 <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   1c9f8:	4b1c      	ldr	r3, [pc, #112]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1c9fa:	2200      	movs	r2, #0
   1c9fc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1ca00:	e02a      	b.n	1ca58 <appSlaveResolvedAddrInd+0x94>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1ca02:	687b      	ldr	r3, [r7, #4]
   1ca04:	78db      	ldrb	r3, [r3, #3]
   1ca06:	2b05      	cmp	r3, #5
   1ca08:	d126      	bne.n	1ca58 <appSlaveResolvedAddrInd+0x94>
   1ca0a:	4b18      	ldr	r3, [pc, #96]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1ca0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ca0e:	2b00      	cmp	r3, #0
   1ca10:	d022      	beq.n	1ca58 <appSlaveResolvedAddrInd+0x94>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   1ca12:	4b16      	ldr	r3, [pc, #88]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1ca14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ca16:	4618      	mov	r0, r3
   1ca18:	f7f6 fd42 	bl	134a0 <AppDbGetNextRecord>
   1ca1c:	4602      	mov	r2, r0
   1ca1e:	4b13      	ldr	r3, [pc, #76]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1ca20:	639a      	str	r2, [r3, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1ca22:	4b12      	ldr	r3, [pc, #72]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1ca24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ca26:	2b00      	cmp	r3, #0
   1ca28:	d016      	beq.n	1ca58 <appSlaveResolvedAddrInd+0x94>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1ca2a:	4b10      	ldr	r3, [pc, #64]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1ca2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1ca2e:	2200      	movs	r2, #0
   1ca30:	2104      	movs	r1, #4
   1ca32:	4618      	mov	r0, r3
   1ca34:	f7f6 fe6e 	bl	13714 <AppDbGetKey>
   1ca38:	60f8      	str	r0, [r7, #12]
   1ca3a:	68fb      	ldr	r3, [r7, #12]
   1ca3c:	2b00      	cmp	r3, #0
   1ca3e:	d00b      	beq.n	1ca58 <appSlaveResolvedAddrInd+0x94>
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   1ca40:	683b      	ldr	r3, [r7, #0]
   1ca42:	791b      	ldrb	r3, [r3, #4]
   1ca44:	4618      	mov	r0, r3
   1ca46:	f7f3 f945 	bl	fcd4 <DmConnPeerAddr>
   1ca4a:	68f9      	ldr	r1, [r7, #12]
   1ca4c:	687b      	ldr	r3, [r7, #4]
   1ca4e:	881b      	ldrh	r3, [r3, #0]
   1ca50:	461a      	mov	r2, r3
   1ca52:	f7f3 fc87 	bl	10364 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1ca56:	e005      	b.n	1ca64 <appSlaveResolvedAddrInd+0xa0>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   1ca58:	4b04      	ldr	r3, [pc, #16]	; (1ca6c <appSlaveResolvedAddrInd+0xa8>)
   1ca5a:	2200      	movs	r2, #0
   1ca5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   1ca60:	e000      	b.n	1ca64 <appSlaveResolvedAddrInd+0xa0>
    return;
   1ca62:	bf00      	nop
}
   1ca64:	3710      	adds	r7, #16
   1ca66:	46bd      	mov	sp, r7
   1ca68:	bd80      	pop	{r7, pc}
   1ca6a:	bf00      	nop
   1ca6c:	10005e7c 	.word	0x10005e7c

0001ca70 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1ca70:	b580      	push	{r7, lr}
   1ca72:	b086      	sub	sp, #24
   1ca74:	af00      	add	r7, sp, #0
   1ca76:	6078      	str	r0, [r7, #4]
   1ca78:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1ca7a:	4b16      	ldr	r3, [pc, #88]	; (1cad4 <appSlaveRemoteConnParamReq+0x64>)
   1ca7c:	681b      	ldr	r3, [r3, #0]
   1ca7e:	781b      	ldrb	r3, [r3, #0]
   1ca80:	2b00      	cmp	r3, #0
   1ca82:	d118      	bne.n	1cab6 <appSlaveRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1ca84:	687b      	ldr	r3, [r7, #4]
   1ca86:	88db      	ldrh	r3, [r3, #6]
   1ca88:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   1ca8a:	687b      	ldr	r3, [r7, #4]
   1ca8c:	891b      	ldrh	r3, [r3, #8]
   1ca8e:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   1ca90:	687b      	ldr	r3, [r7, #4]
   1ca92:	895b      	ldrh	r3, [r3, #10]
   1ca94:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   1ca96:	687b      	ldr	r3, [r7, #4]
   1ca98:	899b      	ldrh	r3, [r3, #12]
   1ca9a:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1ca9c:	2300      	movs	r3, #0
   1ca9e:	82fb      	strh	r3, [r7, #22]
   1caa0:	8afb      	ldrh	r3, [r7, #22]
   1caa2:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1caa4:	683b      	ldr	r3, [r7, #0]
   1caa6:	791b      	ldrb	r3, [r3, #4]
   1caa8:	f107 020c 	add.w	r2, r7, #12
   1caac:	4611      	mov	r1, r2
   1caae:	4618      	mov	r0, r3
   1cab0:	f7f3 f888 	bl	fbc4 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   1cab4:	e00a      	b.n	1cacc <appSlaveRemoteConnParamReq+0x5c>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1cab6:	4b07      	ldr	r3, [pc, #28]	; (1cad4 <appSlaveRemoteConnParamReq+0x64>)
   1cab8:	681b      	ldr	r3, [r3, #0]
   1caba:	781b      	ldrb	r3, [r3, #0]
   1cabc:	2b01      	cmp	r3, #1
   1cabe:	d105      	bne.n	1cacc <appSlaveRemoteConnParamReq+0x5c>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1cac0:	683b      	ldr	r3, [r7, #0]
   1cac2:	791b      	ldrb	r3, [r3, #4]
   1cac4:	2111      	movs	r1, #17
   1cac6:	4618      	mov	r0, r3
   1cac8:	f7f3 f898 	bl	fbfc <DmRemoteConnParamReqNegReply>
}
   1cacc:	bf00      	nop
   1cace:	3718      	adds	r7, #24
   1cad0:	46bd      	mov	sp, r7
   1cad2:	bd80      	pop	{r7, pc}
   1cad4:	10002c1c 	.word	0x10002c1c

0001cad8 <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1cad8:	b580      	push	{r7, lr}
   1cada:	b082      	sub	sp, #8
   1cadc:	af00      	add	r7, sp, #0
   1cade:	6078      	str	r0, [r7, #4]
   1cae0:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  // don't reset bonded flag.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   1cae2:	683b      	ldr	r3, [r7, #0]
   1cae4:	2200      	movs	r2, #0
   1cae6:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   1cae8:	683b      	ldr	r3, [r7, #0]
   1caea:	2200      	movs	r2, #0
   1caec:	71da      	strb	r2, [r3, #7]
    
  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1caee:	687b      	ldr	r3, [r7, #4]
   1caf0:	7a5a      	ldrb	r2, [r3, #9]
   1caf2:	687b      	ldr	r3, [r7, #4]
   1caf4:	330a      	adds	r3, #10
   1caf6:	4619      	mov	r1, r3
   1caf8:	4610      	mov	r0, r2
   1cafa:	f7f6 fda3 	bl	13644 <AppDbFindByAddr>
   1cafe:	4602      	mov	r2, r0
   1cb00:	683b      	ldr	r3, [r7, #0]
   1cb02:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1cb04:	683b      	ldr	r3, [r7, #0]
   1cb06:	681b      	ldr	r3, [r3, #0]
   1cb08:	2b00      	cmp	r3, #0
   1cb0a:	d10c      	bne.n	1cb26 <appSlaveSecConnOpen+0x4e>
   1cb0c:	687b      	ldr	r3, [r7, #4]
   1cb0e:	7a5b      	ldrb	r3, [r3, #9]
   1cb10:	2b01      	cmp	r3, #1
   1cb12:	d108      	bne.n	1cb26 <appSlaveSecConnOpen+0x4e>
   1cb14:	687b      	ldr	r3, [r7, #4]
   1cb16:	7bdb      	ldrb	r3, [r3, #15]
   1cb18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cb1c:	2b40      	cmp	r3, #64	; 0x40
   1cb1e:	d102      	bne.n	1cb26 <appSlaveSecConnOpen+0x4e>
  {
    /* reslove master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   1cb20:	6878      	ldr	r0, [r7, #4]
   1cb22:	f7ff fdf3 	bl	1c70c <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1cb26:	4b0c      	ldr	r3, [pc, #48]	; (1cb58 <appSlaveSecConnOpen+0x80>)
   1cb28:	681b      	ldr	r3, [r3, #0]
   1cb2a:	791b      	ldrb	r3, [r3, #4]
   1cb2c:	2b00      	cmp	r3, #0
   1cb2e:	d00e      	beq.n	1cb4e <appSlaveSecConnOpen+0x76>
   1cb30:	f7f6 fd48 	bl	135c4 <AppDbCheckBonded>
   1cb34:	4603      	mov	r3, r0
   1cb36:	2b00      	cmp	r3, #0
   1cb38:	d009      	beq.n	1cb4e <appSlaveSecConnOpen+0x76>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1cb3a:	687b      	ldr	r3, [r7, #4]
   1cb3c:	881b      	ldrh	r3, [r3, #0]
   1cb3e:	b2da      	uxtb	r2, r3
   1cb40:	4b05      	ldr	r3, [pc, #20]	; (1cb58 <appSlaveSecConnOpen+0x80>)
   1cb42:	681b      	ldr	r3, [r3, #0]
   1cb44:	781b      	ldrb	r3, [r3, #0]
   1cb46:	4619      	mov	r1, r3
   1cb48:	4610      	mov	r0, r2
   1cb4a:	f7f3 ff98 	bl	10a7e <DmSecSlaveReq>
  }
}
   1cb4e:	bf00      	nop
   1cb50:	3708      	adds	r7, #8
   1cb52:	46bd      	mov	sp, r7
   1cb54:	bd80      	pop	{r7, pc}
   1cb56:	bf00      	nop
   1cb58:	10005d6c 	.word	0x10005d6c

0001cb5c <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1cb5c:	b580      	push	{r7, lr}
   1cb5e:	b082      	sub	sp, #8
   1cb60:	af00      	add	r7, sp, #0
   1cb62:	6078      	str	r0, [r7, #4]
   1cb64:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1cb66:	683b      	ldr	r3, [r7, #0]
   1cb68:	681b      	ldr	r3, [r3, #0]
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	d004      	beq.n	1cb78 <appSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   1cb6e:	683b      	ldr	r3, [r7, #0]
   1cb70:	681b      	ldr	r3, [r3, #0]
   1cb72:	4618      	mov	r0, r3
   1cb74:	f7f6 fcea 	bl	1354c <AppDbCheckValidRecord>
  }
}
   1cb78:	bf00      	nop
   1cb7a:	3708      	adds	r7, #8
   1cb7c:	46bd      	mov	sp, r7
   1cb7e:	bd80      	pop	{r7, pc}

0001cb80 <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1cb80:	b590      	push	{r4, r7, lr}
   1cb82:	b087      	sub	sp, #28
   1cb84:	af02      	add	r7, sp, #8
   1cb86:	6078      	str	r0, [r7, #4]
   1cb88:	6039      	str	r1, [r7, #0]
  uint8_t rKeyDist;
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   1cb8a:	4b3f      	ldr	r3, [pc, #252]	; (1cc88 <appSecPairInd+0x108>)
   1cb8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1cb90:	2b00      	cmp	r3, #0
   1cb92:	d111      	bne.n	1cbb8 <appSecPairInd+0x38>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1cb94:	687b      	ldr	r3, [r7, #4]
   1cb96:	791b      	ldrb	r3, [r3, #4]
   1cb98:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   1cb9c:	2b00      	cmp	r3, #0
   1cb9e:	d00b      	beq.n	1cbb8 <appSecPairInd+0x38>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1cba0:	683b      	ldr	r3, [r7, #0]
   1cba2:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1cba4:	2b00      	cmp	r3, #0
   1cba6:	d064      	beq.n	1cc72 <appSecPairInd+0xf2>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1cba8:	683b      	ldr	r3, [r7, #0]
   1cbaa:	791b      	ldrb	r3, [r3, #4]
   1cbac:	4618      	mov	r0, r3
   1cbae:	f7f3 f8c1 	bl	fd34 <DmConnSecLevel>
   1cbb2:	4603      	mov	r3, r0
   1cbb4:	2b00      	cmp	r3, #0
   1cbb6:	d15c      	bne.n	1cc72 <appSecPairInd+0xf2>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1cbb8:	687b      	ldr	r3, [r7, #4]
   1cbba:	791a      	ldrb	r2, [r3, #4]
   1cbbc:	4b33      	ldr	r3, [pc, #204]	; (1cc8c <appSecPairInd+0x10c>)
   1cbbe:	681b      	ldr	r3, [r3, #0]
   1cbc0:	781b      	ldrb	r3, [r3, #0]
   1cbc2:	4013      	ands	r3, r2
   1cbc4:	b2db      	uxtb	r3, r3
   1cbc6:	f003 0301 	and.w	r3, r3, #1
   1cbca:	2b00      	cmp	r3, #0
   1cbcc:	bf14      	ite	ne
   1cbce:	2301      	movne	r3, #1
   1cbd0:	2300      	moveq	r3, #0
   1cbd2:	b2db      	uxtb	r3, r3
   1cbd4:	461a      	mov	r2, r3
   1cbd6:	683b      	ldr	r3, [r7, #0]
   1cbd8:	71da      	strb	r2, [r3, #7]
    
    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1cbda:	683b      	ldr	r3, [r7, #0]
   1cbdc:	79db      	ldrb	r3, [r3, #7]
   1cbde:	2b00      	cmp	r3, #0
   1cbe0:	d017      	beq.n	1cc12 <appSecPairInd+0x92>
   1cbe2:	683b      	ldr	r3, [r7, #0]
   1cbe4:	681b      	ldr	r3, [r3, #0]
   1cbe6:	2b00      	cmp	r3, #0
   1cbe8:	d113      	bne.n	1cc12 <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId));
   1cbea:	683b      	ldr	r3, [r7, #0]
   1cbec:	791b      	ldrb	r3, [r3, #4]
   1cbee:	4618      	mov	r0, r3
   1cbf0:	f7f3 f866 	bl	fcc0 <DmConnPeerAddrType>
   1cbf4:	4603      	mov	r3, r0
   1cbf6:	461c      	mov	r4, r3
   1cbf8:	683b      	ldr	r3, [r7, #0]
   1cbfa:	791b      	ldrb	r3, [r3, #4]
   1cbfc:	4618      	mov	r0, r3
   1cbfe:	f7f3 f869 	bl	fcd4 <DmConnPeerAddr>
   1cc02:	4603      	mov	r3, r0
   1cc04:	4619      	mov	r1, r3
   1cc06:	4620      	mov	r0, r4
   1cc08:	f7f6 fbf8 	bl	133fc <AppDbNewRecord>
   1cc0c:	4602      	mov	r2, r0
   1cc0e:	683b      	ldr	r3, [r7, #0]
   1cc10:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   1cc12:	683b      	ldr	r3, [r7, #0]
   1cc14:	2200      	movs	r2, #0
   1cc16:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   1cc18:	4b1c      	ldr	r3, [pc, #112]	; (1cc8c <appSecPairInd+0x10c>)
   1cc1a:	681b      	ldr	r3, [r3, #0]
   1cc1c:	789b      	ldrb	r3, [r3, #2]
   1cc1e:	73bb      	strb	r3, [r7, #14]
    iKeyDist = pAppSecCfg->iKeyDist;
   1cc20:	4b1a      	ldr	r3, [pc, #104]	; (1cc8c <appSecPairInd+0x10c>)
   1cc22:	681b      	ldr	r3, [r3, #0]
   1cc24:	785b      	ldrb	r3, [r3, #1]
   1cc26:	73fb      	strb	r3, [r7, #15]
    
    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1cc28:	683b      	ldr	r3, [r7, #0]
   1cc2a:	791b      	ldrb	r3, [r3, #4]
   1cc2c:	4618      	mov	r0, r3
   1cc2e:	f7f3 f847 	bl	fcc0 <DmConnPeerAddrType>
   1cc32:	4603      	mov	r3, r0
   1cc34:	2b01      	cmp	r3, #1
   1cc36:	d103      	bne.n	1cc40 <appSecPairInd+0xc0>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   1cc38:	7bfb      	ldrb	r3, [r7, #15]
   1cc3a:	f043 0302 	orr.w	r3, r3, #2
   1cc3e:	73fb      	strb	r3, [r7, #15]
    }
    
    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   1cc40:	687b      	ldr	r3, [r7, #4]
   1cc42:	79da      	ldrb	r2, [r3, #7]
   1cc44:	7bbb      	ldrb	r3, [r7, #14]
   1cc46:	4013      	ands	r3, r2
   1cc48:	73bb      	strb	r3, [r7, #14]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   1cc4a:	687b      	ldr	r3, [r7, #4]
   1cc4c:	799a      	ldrb	r2, [r3, #6]
   1cc4e:	7bfb      	ldrb	r3, [r7, #15]
   1cc50:	4013      	ands	r3, r2
   1cc52:	73fb      	strb	r3, [r7, #15]
    
    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1cc54:	683b      	ldr	r3, [r7, #0]
   1cc56:	7918      	ldrb	r0, [r3, #4]
   1cc58:	4b0c      	ldr	r3, [pc, #48]	; (1cc8c <appSecPairInd+0x10c>)
   1cc5a:	681b      	ldr	r3, [r3, #0]
   1cc5c:	78d9      	ldrb	r1, [r3, #3]
   1cc5e:	4b0b      	ldr	r3, [pc, #44]	; (1cc8c <appSecPairInd+0x10c>)
   1cc60:	681b      	ldr	r3, [r3, #0]
   1cc62:	781a      	ldrb	r2, [r3, #0]
   1cc64:	7bfc      	ldrb	r4, [r7, #15]
   1cc66:	7bbb      	ldrb	r3, [r7, #14]
   1cc68:	9300      	str	r3, [sp, #0]
   1cc6a:	4623      	mov	r3, r4
   1cc6c:	f7f3 fee8 	bl	10a40 <DmSecPairRsp>
   1cc70:	e005      	b.n	1cc7e <appSecPairInd+0xfe>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   1cc72:	683b      	ldr	r3, [r7, #0]
   1cc74:	791b      	ldrb	r3, [r3, #4]
   1cc76:	2105      	movs	r1, #5
   1cc78:	4618      	mov	r0, r3
   1cc7a:	f7f3 fd71 	bl	10760 <DmSecCancelReq>
  }
}
   1cc7e:	bf00      	nop
   1cc80:	3714      	adds	r7, #20
   1cc82:	46bd      	mov	sp, r7
   1cc84:	bd90      	pop	{r4, r7, pc}
   1cc86:	bf00      	nop
   1cc88:	10005e7c 	.word	0x10005e7c
   1cc8c:	10005d6c 	.word	0x10005d6c

0001cc90 <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1cc90:	b580      	push	{r7, lr}
   1cc92:	b082      	sub	sp, #8
   1cc94:	af00      	add	r7, sp, #0
   1cc96:	6078      	str	r0, [r7, #4]
   1cc98:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1cc9a:	683b      	ldr	r3, [r7, #0]
   1cc9c:	79db      	ldrb	r3, [r3, #7]
   1cc9e:	2b00      	cmp	r3, #0
   1cca0:	d012      	beq.n	1ccc8 <appSecStoreKey+0x38>
   1cca2:	683b      	ldr	r3, [r7, #0]
   1cca4:	681b      	ldr	r3, [r3, #0]
   1cca6:	2b00      	cmp	r3, #0
   1cca8:	d00e      	beq.n	1ccc8 <appSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1ccaa:	683b      	ldr	r3, [r7, #0]
   1ccac:	7ada      	ldrb	r2, [r3, #11]
   1ccae:	687b      	ldr	r3, [r7, #4]
   1ccb0:	7f9b      	ldrb	r3, [r3, #30]
   1ccb2:	4313      	orrs	r3, r2
   1ccb4:	b2da      	uxtb	r2, r3
   1ccb6:	683b      	ldr	r3, [r7, #0]
   1ccb8:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1ccba:	683b      	ldr	r3, [r7, #0]
   1ccbc:	681b      	ldr	r3, [r3, #0]
   1ccbe:	687a      	ldr	r2, [r7, #4]
   1ccc0:	4611      	mov	r1, r2
   1ccc2:	4618      	mov	r0, r3
   1ccc4:	f7f6 fd70 	bl	137a8 <AppDbSetKey>
  }
}
   1ccc8:	bf00      	nop
   1ccca:	3708      	adds	r7, #8
   1cccc:	46bd      	mov	sp, r7
   1ccce:	bd80      	pop	{r7, pc}

0001ccd0 <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1ccd0:	b580      	push	{r7, lr}
   1ccd2:	b082      	sub	sp, #8
   1ccd4:	af00      	add	r7, sp, #0
   1ccd6:	6078      	str	r0, [r7, #4]
   1ccd8:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   1ccda:	683b      	ldr	r3, [r7, #0]
   1ccdc:	79db      	ldrb	r3, [r3, #7]
   1ccde:	2b00      	cmp	r3, #0
   1cce0:	d024      	beq.n	1cd2c <appSecPairCmpl+0x5c>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   1cce2:	683b      	ldr	r3, [r7, #0]
   1cce4:	2201      	movs	r2, #1
   1cce6:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1cce8:	683b      	ldr	r3, [r7, #0]
   1ccea:	681b      	ldr	r3, [r3, #0]
   1ccec:	2b00      	cmp	r3, #0
   1ccee:	d007      	beq.n	1cd00 <appSecPairCmpl+0x30>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1ccf0:	683b      	ldr	r3, [r7, #0]
   1ccf2:	681a      	ldr	r2, [r3, #0]
   1ccf4:	683b      	ldr	r3, [r7, #0]
   1ccf6:	7adb      	ldrb	r3, [r3, #11]
   1ccf8:	4619      	mov	r1, r3
   1ccfa:	4610      	mov	r0, r2
   1ccfc:	f7f6 fc12 	bl	13524 <AppDbValidateRecord>
    }    

    /* if bonded clear bondable mode */
    appSlaveCb.bondable = FALSE;
   1cd00:	4b0c      	ldr	r3, [pc, #48]	; (1cd34 <appSecPairCmpl+0x64>)
   1cd02:	2200      	movs	r2, #0
   1cd04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    
    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   1cd08:	4b0a      	ldr	r3, [pc, #40]	; (1cd34 <appSecPairCmpl+0x64>)
   1cd0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1cd0e:	2b01      	cmp	r3, #1
   1cd10:	d102      	bne.n	1cd18 <appSecPairCmpl+0x48>
    {
      pCb->setConnectable = TRUE;
   1cd12:	683b      	ldr	r3, [r7, #0]
   1cd14:	2201      	movs	r2, #1
   1cd16:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1cd18:	683b      	ldr	r3, [r7, #0]
   1cd1a:	681b      	ldr	r3, [r3, #0]
   1cd1c:	2b00      	cmp	r3, #0
   1cd1e:	d005      	beq.n	1cd2c <appSecPairCmpl+0x5c>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   1cd20:	683b      	ldr	r3, [r7, #0]
   1cd22:	791b      	ldrb	r3, [r3, #4]
   1cd24:	4619      	mov	r1, r3
   1cd26:	6878      	ldr	r0, [r7, #4]
   1cd28:	f7ff fa38 	bl	1c19c <AppAddDevToResList>
    }
  }
}
   1cd2c:	bf00      	nop
   1cd2e:	3708      	adds	r7, #8
   1cd30:	46bd      	mov	sp, r7
   1cd32:	bd80      	pop	{r7, pc}
   1cd34:	10005e7c 	.word	0x10005e7c

0001cd38 <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1cd38:	b480      	push	{r7}
   1cd3a:	b083      	sub	sp, #12
   1cd3c:	af00      	add	r7, sp, #0
   1cd3e:	6078      	str	r0, [r7, #4]
   1cd40:	6039      	str	r1, [r7, #0]
  return;
   1cd42:	bf00      	nop
}
   1cd44:	370c      	adds	r7, #12
   1cd46:	46bd      	mov	sp, r7
   1cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cd4c:	4770      	bx	lr

0001cd4e <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1cd4e:	b480      	push	{r7}
   1cd50:	b083      	sub	sp, #12
   1cd52:	af00      	add	r7, sp, #0
   1cd54:	6078      	str	r0, [r7, #4]
   1cd56:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1cd58:	683b      	ldr	r3, [r7, #0]
   1cd5a:	799b      	ldrb	r3, [r3, #6]
   1cd5c:	2b00      	cmp	r3, #0
   1cd5e:	d009      	beq.n	1cd74 <appSecEncryptInd+0x26>
   1cd60:	687b      	ldr	r3, [r7, #4]
   1cd62:	791b      	ldrb	r3, [r3, #4]
   1cd64:	2b00      	cmp	r3, #0
   1cd66:	d005      	beq.n	1cd74 <appSecEncryptInd+0x26>
  {
    pCb->bonded = TRUE;
   1cd68:	683b      	ldr	r3, [r7, #0]
   1cd6a:	2201      	movs	r2, #1
   1cd6c:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   1cd6e:	683b      	ldr	r3, [r7, #0]
   1cd70:	2200      	movs	r2, #0
   1cd72:	719a      	strb	r2, [r3, #6]
  }
}
   1cd74:	bf00      	nop
   1cd76:	370c      	adds	r7, #12
   1cd78:	46bd      	mov	sp, r7
   1cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cd7e:	4770      	bx	lr

0001cd80 <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1cd80:	b580      	push	{r7, lr}
   1cd82:	b082      	sub	sp, #8
   1cd84:	af00      	add	r7, sp, #0
   1cd86:	6078      	str	r0, [r7, #4]
   1cd88:	6039      	str	r1, [r7, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   1cd8a:	683b      	ldr	r3, [r7, #0]
   1cd8c:	681b      	ldr	r3, [r3, #0]
   1cd8e:	2b00      	cmp	r3, #0
   1cd90:	d12b      	bne.n	1cdea <appSecFindLtk+0x6a>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1cd92:	687b      	ldr	r3, [r7, #4]
   1cd94:	89db      	ldrh	r3, [r3, #14]
   1cd96:	2b00      	cmp	r3, #0
   1cd98:	d109      	bne.n	1cdae <appSecFindLtk+0x2e>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   1cd9a:	687b      	ldr	r3, [r7, #4]
   1cd9c:	3306      	adds	r3, #6
   1cd9e:	2208      	movs	r2, #8
   1cda0:	4915      	ldr	r1, [pc, #84]	; (1cdf8 <appSecFindLtk+0x78>)
   1cda2:	4618      	mov	r0, r3
   1cda4:	f7ef f9ac 	bl	c100 <memcmp>
   1cda8:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1cdaa:	2b00      	cmp	r3, #0
   1cdac:	d013      	beq.n	1cdd6 <appSecFindLtk+0x56>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   1cdae:	687b      	ldr	r3, [r7, #4]
   1cdb0:	89da      	ldrh	r2, [r3, #14]
   1cdb2:	687b      	ldr	r3, [r7, #4]
   1cdb4:	3306      	adds	r3, #6
   1cdb6:	4619      	mov	r1, r3
   1cdb8:	4610      	mov	r0, r2
   1cdba:	f7f6 fc79 	bl	136b0 <AppDbFindByLtkReq>
   1cdbe:	4602      	mov	r2, r0
   1cdc0:	683b      	ldr	r3, [r7, #0]
   1cdc2:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1cdc4:	683b      	ldr	r3, [r7, #0]
   1cdc6:	681b      	ldr	r3, [r3, #0]
   1cdc8:	2b00      	cmp	r3, #0
   1cdca:	d00e      	beq.n	1cdea <appSecFindLtk+0x6a>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   1cdcc:	4b0b      	ldr	r3, [pc, #44]	; (1cdfc <appSecFindLtk+0x7c>)
   1cdce:	2200      	movs	r2, #0
   1cdd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1cdd4:	e009      	b.n	1cdea <appSecFindLtk+0x6a>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   1cdd6:	4b09      	ldr	r3, [pc, #36]	; (1cdfc <appSecFindLtk+0x7c>)
   1cdd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1cddc:	2b00      	cmp	r3, #0
   1cdde:	d004      	beq.n	1cdea <appSecFindLtk+0x6a>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   1cde0:	4b06      	ldr	r3, [pc, #24]	; (1cdfc <appSecFindLtk+0x7c>)
   1cde2:	2201      	movs	r2, #1
   1cde4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   1cde8:	e002      	b.n	1cdf0 <appSecFindLtk+0x70>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   1cdea:	6838      	ldr	r0, [r7, #0]
   1cdec:	f7ff fcc2 	bl	1c774 <appSecRspLtk>
}
   1cdf0:	3708      	adds	r7, #8
   1cdf2:	46bd      	mov	sp, r7
   1cdf4:	bd80      	pop	{r7, pc}
   1cdf6:	bf00      	nop
   1cdf8:	00022a0c 	.word	0x00022a0c
   1cdfc:	10005e7c 	.word	0x10005e7c

0001ce00 <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   1ce00:	b580      	push	{r7, lr}
   1ce02:	b082      	sub	sp, #8
   1ce04:	af00      	add	r7, sp, #0
   1ce06:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1ce08:	687b      	ldr	r3, [r7, #4]
   1ce0a:	78db      	ldrb	r3, [r3, #3]
   1ce0c:	2b00      	cmp	r3, #0
   1ce0e:	d105      	bne.n	1ce1c <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1ce10:	f7f3 f97e 	bl	10110 <DmLlPrivEnabled>
   1ce14:	4603      	mov	r3, r0
   1ce16:	4618      	mov	r0, r3
   1ce18:	f7fe fbc4 	bl	1b5a4 <SvcCoreGapCentAddrResUpdate>
  }
}
   1ce1c:	bf00      	nop
   1ce1e:	3708      	adds	r7, #8
   1ce20:	46bd      	mov	sp, r7
   1ce22:	bd80      	pop	{r7, pc}

0001ce24 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1ce24:	b580      	push	{r7, lr}
   1ce26:	b084      	sub	sp, #16
   1ce28:	af00      	add	r7, sp, #0
   1ce2a:	6078      	str	r0, [r7, #4]
   1ce2c:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1ce2e:	687b      	ldr	r3, [r7, #4]
   1ce30:	78db      	ldrb	r3, [r3, #3]
   1ce32:	2b00      	cmp	r3, #0
   1ce34:	d11c      	bne.n	1ce70 <appPrivAddDevToResListInd+0x4c>
   1ce36:	683b      	ldr	r3, [r7, #0]
   1ce38:	681b      	ldr	r3, [r3, #0]
   1ce3a:	2b00      	cmp	r3, #0
   1ce3c:	d018      	beq.n	1ce70 <appPrivAddDevToResListInd+0x4c>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(pCb->dbHdl, DM_KEY_IRK, NULL);
   1ce3e:	683b      	ldr	r3, [r7, #0]
   1ce40:	681b      	ldr	r3, [r3, #0]
   1ce42:	2200      	movs	r2, #0
   1ce44:	2104      	movs	r1, #4
   1ce46:	4618      	mov	r0, r3
   1ce48:	f7f6 fc64 	bl	13714 <AppDbGetKey>
   1ce4c:	60f8      	str	r0, [r7, #12]

    /* if peer IRK present */
    if (pPeerKey != NULL)
   1ce4e:	68fb      	ldr	r3, [r7, #12]
   1ce50:	2b00      	cmp	r3, #0
   1ce52:	d007      	beq.n	1ce64 <appPrivAddDevToResListInd+0x40>
    {
      /* set advertising peer address */
      AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   1ce54:	68fb      	ldr	r3, [r7, #12]
   1ce56:	7d9a      	ldrb	r2, [r3, #22]
   1ce58:	68fb      	ldr	r3, [r7, #12]
   1ce5a:	3310      	adds	r3, #16
   1ce5c:	4619      	mov	r1, r3
   1ce5e:	4610      	mov	r0, r2
   1ce60:	f000 fc26 	bl	1d6b0 <AppSetAdvPeerAddr>
    }

    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1ce64:	683b      	ldr	r3, [r7, #0]
   1ce66:	681b      	ldr	r3, [r3, #0]
   1ce68:	2101      	movs	r1, #1
   1ce6a:	4618      	mov	r0, r3
   1ce6c:	f7f6 fdb8 	bl	139e0 <AppDbSetPeerAddedToRl>
  }
}
   1ce70:	bf00      	nop
   1ce72:	3710      	adds	r7, #16
   1ce74:	46bd      	mov	sp, r7
   1ce76:	bd80      	pop	{r7, pc}

0001ce78 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1ce78:	b580      	push	{r7, lr}
   1ce7a:	b082      	sub	sp, #8
   1ce7c:	af00      	add	r7, sp, #0
   1ce7e:	6078      	str	r0, [r7, #4]
   1ce80:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1ce82:	687b      	ldr	r3, [r7, #4]
   1ce84:	78db      	ldrb	r3, [r3, #3]
   1ce86:	2b00      	cmp	r3, #0
   1ce88:	d112      	bne.n	1ceb0 <appPrivRemDevFromResListInd+0x38>
   1ce8a:	683b      	ldr	r3, [r7, #0]
   1ce8c:	681b      	ldr	r3, [r3, #0]
   1ce8e:	2b00      	cmp	r3, #0
   1ce90:	d00e      	beq.n	1ceb0 <appPrivRemDevFromResListInd+0x38>
  {
    /* clear advertising peer address and its type */
    appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1ce92:	4b09      	ldr	r3, [pc, #36]	; (1ceb8 <appPrivRemDevFromResListInd+0x40>)
   1ce94:	2200      	movs	r2, #0
   1ce96:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1ce9a:	2206      	movs	r2, #6
   1ce9c:	2100      	movs	r1, #0
   1ce9e:	4807      	ldr	r0, [pc, #28]	; (1cebc <appPrivRemDevFromResListInd+0x44>)
   1cea0:	f7ef fa5c 	bl	c35c <memset>

    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1cea4:	683b      	ldr	r3, [r7, #0]
   1cea6:	681b      	ldr	r3, [r3, #0]
   1cea8:	2100      	movs	r1, #0
   1ceaa:	4618      	mov	r0, r3
   1ceac:	f7f6 fd98 	bl	139e0 <AppDbSetPeerAddedToRl>
  }
}
   1ceb0:	bf00      	nop
   1ceb2:	3708      	adds	r7, #8
   1ceb4:	46bd      	mov	sp, r7
   1ceb6:	bd80      	pop	{r7, pc}
   1ceb8:	10005e7c 	.word	0x10005e7c
   1cebc:	10005eac 	.word	0x10005eac

0001cec0 <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   1cec0:	b580      	push	{r7, lr}
   1cec2:	b086      	sub	sp, #24
   1cec4:	af00      	add	r7, sp, #0
   1cec6:	6078      	str	r0, [r7, #4]
   1cec8:	6039      	str	r1, [r7, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;
  
  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   1ceca:	683b      	ldr	r3, [r7, #0]
   1cecc:	2202      	movs	r2, #2
   1cece:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1ced0:	683b      	ldr	r3, [r7, #0]
   1ced2:	791b      	ldrb	r3, [r3, #4]
   1ced4:	4618      	mov	r0, r3
   1ced6:	f7f2 ff51 	bl	fd7c <DmConnCheckIdle>
   1ceda:	4603      	mov	r3, r0
   1cedc:	2b00      	cmp	r3, #0
   1cede:	bf0c      	ite	eq
   1cee0:	2301      	moveq	r3, #1
   1cee2:	2300      	movne	r3, #0
   1cee4:	b2db      	uxtb	r3, r3
   1cee6:	75fb      	strb	r3, [r7, #23]
  
  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   1cee8:	7dfb      	ldrb	r3, [r7, #23]
   1ceea:	2b00      	cmp	r3, #0
   1ceec:	d027      	beq.n	1cf3e <appSlaveConnUpdateTimeout+0x7e>
   1ceee:	683b      	ldr	r3, [r7, #0]
   1cef0:	7a9b      	ldrb	r3, [r3, #10]
   1cef2:	2b00      	cmp	r3, #0
   1cef4:	d023      	beq.n	1cf3e <appSlaveConnUpdateTimeout+0x7e>
  {
    /* do update */
    pCb->attempts++;
   1cef6:	683b      	ldr	r3, [r7, #0]
   1cef8:	7b1b      	ldrb	r3, [r3, #12]
   1cefa:	3301      	adds	r3, #1
   1cefc:	b2da      	uxtb	r2, r3
   1cefe:	683b      	ldr	r3, [r7, #0]
   1cf00:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1cf02:	4b15      	ldr	r3, [pc, #84]	; (1cf58 <appSlaveConnUpdateTimeout+0x98>)
   1cf04:	681b      	ldr	r3, [r3, #0]
   1cf06:	889b      	ldrh	r3, [r3, #4]
   1cf08:	813b      	strh	r3, [r7, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   1cf0a:	4b13      	ldr	r3, [pc, #76]	; (1cf58 <appSlaveConnUpdateTimeout+0x98>)
   1cf0c:	681b      	ldr	r3, [r3, #0]
   1cf0e:	88db      	ldrh	r3, [r3, #6]
   1cf10:	817b      	strh	r3, [r7, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   1cf12:	4b11      	ldr	r3, [pc, #68]	; (1cf58 <appSlaveConnUpdateTimeout+0x98>)
   1cf14:	681b      	ldr	r3, [r3, #0]
   1cf16:	891b      	ldrh	r3, [r3, #8]
   1cf18:	81bb      	strh	r3, [r7, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   1cf1a:	4b0f      	ldr	r3, [pc, #60]	; (1cf58 <appSlaveConnUpdateTimeout+0x98>)
   1cf1c:	681b      	ldr	r3, [r3, #0]
   1cf1e:	895b      	ldrh	r3, [r3, #10]
   1cf20:	81fb      	strh	r3, [r7, #14]
    connSpec.minCeLen = 0;
   1cf22:	2300      	movs	r3, #0
   1cf24:	823b      	strh	r3, [r7, #16]
    connSpec.maxCeLen = 0xffff;
   1cf26:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cf2a:	827b      	strh	r3, [r7, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   1cf2c:	683b      	ldr	r3, [r7, #0]
   1cf2e:	791b      	ldrb	r3, [r3, #4]
   1cf30:	f107 0208 	add.w	r2, r7, #8
   1cf34:	4611      	mov	r1, r2
   1cf36:	4618      	mov	r0, r3
   1cf38:	f7f2 fdc0 	bl	fabc <DmConnUpdate>
   1cf3c:	e007      	b.n	1cf4e <appSlaveConnUpdateTimeout+0x8e>
  }
  else
  {
    pCb->connWasIdle = idle;
   1cf3e:	683b      	ldr	r3, [r7, #0]
   1cf40:	7dfa      	ldrb	r2, [r7, #23]
   1cf42:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   1cf44:	683b      	ldr	r3, [r7, #0]
   1cf46:	791b      	ldrb	r3, [r3, #4]
   1cf48:	4618      	mov	r0, r3
   1cf4a:	f7ff fba1 	bl	1c690 <appConnUpdateTimerStart>
  }
}
   1cf4e:	bf00      	nop
   1cf50:	3718      	adds	r7, #24
   1cf52:	46bd      	mov	sp, r7
   1cf54:	bd80      	pop	{r7, pc}
   1cf56:	bf00      	nop
   1cf58:	10005d50 	.word	0x10005d50

0001cf5c <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   1cf5c:	b580      	push	{r7, lr}
   1cf5e:	b084      	sub	sp, #16
   1cf60:	af00      	add	r7, sp, #0
   1cf62:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   1cf64:	687b      	ldr	r3, [r7, #4]
   1cf66:	881b      	ldrh	r3, [r3, #0]
   1cf68:	3b01      	subs	r3, #1
   1cf6a:	015b      	lsls	r3, r3, #5
   1cf6c:	4a0e      	ldr	r2, [pc, #56]	; (1cfa8 <appSlaveProcMsg+0x4c>)
   1cf6e:	4413      	add	r3, r2
   1cf70:	60fb      	str	r3, [r7, #12]

  switch(pMsg->event)
   1cf72:	687b      	ldr	r3, [r7, #4]
   1cf74:	789b      	ldrb	r3, [r3, #2]
   1cf76:	2b10      	cmp	r3, #16
   1cf78:	d000      	beq.n	1cf7c <appSlaveProcMsg+0x20>
        DmReadRemoteFeatures(pCb->connId);
      }
      break;

    default:
      break;
   1cf7a:	e011      	b.n	1cfa0 <appSlaveProcMsg+0x44>
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1cf7c:	68fb      	ldr	r3, [r7, #12]
   1cf7e:	7b5b      	ldrb	r3, [r3, #13]
   1cf80:	2b02      	cmp	r3, #2
   1cf82:	d104      	bne.n	1cf8e <appSlaveProcMsg+0x32>
        appSlaveConnUpdateTimeout(pMsg, pCb);
   1cf84:	68f9      	ldr	r1, [r7, #12]
   1cf86:	6878      	ldr	r0, [r7, #4]
   1cf88:	f7ff ff9a 	bl	1cec0 <appSlaveConnUpdateTimeout>
      break;
   1cf8c:	e007      	b.n	1cf9e <appSlaveProcMsg+0x42>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   1cf8e:	68fb      	ldr	r3, [r7, #12]
   1cf90:	2201      	movs	r2, #1
   1cf92:	735a      	strb	r2, [r3, #13]
        DmReadRemoteFeatures(pCb->connId);
   1cf94:	68fb      	ldr	r3, [r7, #12]
   1cf96:	791b      	ldrb	r3, [r3, #4]
   1cf98:	4618      	mov	r0, r3
   1cf9a:	f7f2 fd85 	bl	faa8 <DmReadRemoteFeatures>
      break;
   1cf9e:	bf00      	nop
  }
}
   1cfa0:	bf00      	nop
   1cfa2:	3710      	adds	r7, #16
   1cfa4:	46bd      	mov	sp, r7
   1cfa6:	bd80      	pop	{r7, pc}
   1cfa8:	10005d7c 	.word	0x10005d7c

0001cfac <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   1cfac:	b580      	push	{r7, lr}
   1cfae:	b082      	sub	sp, #8
   1cfb0:	af00      	add	r7, sp, #0
  uint8_t i;
   
  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1cfb2:	2300      	movs	r3, #0
   1cfb4:	71fb      	strb	r3, [r7, #7]
   1cfb6:	e014      	b.n	1cfe2 <AppSlaveInit+0x36>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1cfb8:	79fb      	ldrb	r3, [r7, #7]
   1cfba:	4a18      	ldr	r2, [pc, #96]	; (1d01c <AppSlaveInit+0x70>)
   1cfbc:	4413      	add	r3, r2
   1cfbe:	2203      	movs	r2, #3
   1cfc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   1cfc4:	79fb      	ldrb	r3, [r7, #7]
   1cfc6:	4a15      	ldr	r2, [pc, #84]	; (1d01c <AppSlaveInit+0x70>)
   1cfc8:	4413      	add	r3, r2
   1cfca:	2200      	movs	r2, #0
   1cfcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   1cfd0:	79fb      	ldrb	r3, [r7, #7]
   1cfd2:	4a12      	ldr	r2, [pc, #72]	; (1d01c <AppSlaveInit+0x70>)
   1cfd4:	4413      	add	r3, r2
   1cfd6:	2200      	movs	r2, #0
   1cfd8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1cfdc:	79fb      	ldrb	r3, [r7, #7]
   1cfde:	3301      	adds	r3, #1
   1cfe0:	71fb      	strb	r3, [r7, #7]
   1cfe2:	79fb      	ldrb	r3, [r7, #7]
   1cfe4:	2b00      	cmp	r3, #0
   1cfe6:	d0e7      	beq.n	1cfb8 <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   1cfe8:	4b0c      	ldr	r3, [pc, #48]	; (1d01c <AppSlaveInit+0x70>)
   1cfea:	22ff      	movs	r2, #255	; 0xff
   1cfec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   1cff0:	f7ff f9e0 	bl	1c3b4 <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   1cff4:	4b09      	ldr	r3, [pc, #36]	; (1d01c <AppSlaveInit+0x70>)
   1cff6:	2200      	movs	r2, #0
   1cff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   1cffc:	4b08      	ldr	r3, [pc, #32]	; (1d020 <AppSlaveInit+0x74>)
   1cffe:	4a09      	ldr	r2, [pc, #36]	; (1d024 <AppSlaveInit+0x78>)
   1d000:	601a      	str	r2, [r3, #0]

  appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1d002:	4b06      	ldr	r3, [pc, #24]	; (1d01c <AppSlaveInit+0x70>)
   1d004:	2200      	movs	r2, #0
   1d006:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1d00a:	2206      	movs	r2, #6
   1d00c:	2100      	movs	r1, #0
   1d00e:	4806      	ldr	r0, [pc, #24]	; (1d028 <AppSlaveInit+0x7c>)
   1d010:	f7ef f9a4 	bl	c35c <memset>
}
   1d014:	bf00      	nop
   1d016:	3708      	adds	r7, #8
   1d018:	46bd      	mov	sp, r7
   1d01a:	bd80      	pop	{r7, pc}
   1d01c:	10005e7c 	.word	0x10005e7c
   1d020:	10005d58 	.word	0x10005d58
   1d024:	0001cf5d 	.word	0x0001cf5d
   1d028:	10005eac 	.word	0x10005eac

0001d02c <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   1d02c:	b580      	push	{r7, lr}
   1d02e:	b084      	sub	sp, #16
   1d030:	af00      	add	r7, sp, #0
   1d032:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   1d034:	2300      	movs	r3, #0
   1d036:	60fb      	str	r3, [r7, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1d038:	687b      	ldr	r3, [r7, #4]
   1d03a:	789b      	ldrb	r3, [r3, #2]
   1d03c:	2b22      	cmp	r3, #34	; 0x22
   1d03e:	d00a      	beq.n	1d056 <AppSlaveProcDmMsg+0x2a>
    (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   1d040:	687b      	ldr	r3, [r7, #4]
   1d042:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1d044:	2b47      	cmp	r3, #71	; 0x47
   1d046:	d006      	beq.n	1d056 <AppSlaveProcDmMsg+0x2a>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1d048:	687b      	ldr	r3, [r7, #4]
   1d04a:	881b      	ldrh	r3, [r3, #0]
   1d04c:	3b01      	subs	r3, #1
   1d04e:	015b      	lsls	r3, r3, #5
   1d050:	4a5a      	ldr	r2, [pc, #360]	; (1d1bc <AppSlaveProcDmMsg+0x190>)
   1d052:	4413      	add	r3, r2
   1d054:	60fb      	str	r3, [r7, #12]
  }

  switch (pMsg->hdr.event)
   1d056:	687b      	ldr	r3, [r7, #4]
   1d058:	789b      	ldrb	r3, [r3, #2]
   1d05a:	3b20      	subs	r3, #32
   1d05c:	2b35      	cmp	r3, #53	; 0x35
   1d05e:	f200 80a3 	bhi.w	1d1a8 <AppSlaveProcDmMsg+0x17c>
   1d062:	a201      	add	r2, pc, #4	; (adr r2, 1d068 <AppSlaveProcDmMsg+0x3c>)
   1d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d068:	0001d141 	.word	0x0001d141
   1d06c:	0001d1a9 	.word	0x0001d1a9
   1d070:	0001d147 	.word	0x0001d147
   1d074:	0001d1a9 	.word	0x0001d1a9
   1d078:	0001d1a9 	.word	0x0001d1a9
   1d07c:	0001d1a9 	.word	0x0001d1a9
   1d080:	0001d1a9 	.word	0x0001d1a9
   1d084:	0001d159 	.word	0x0001d159
   1d088:	0001d163 	.word	0x0001d163
   1d08c:	0001d16d 	.word	0x0001d16d
   1d090:	0001d1a9 	.word	0x0001d1a9
   1d094:	0001d1a9 	.word	0x0001d1a9
   1d098:	0001d1a9 	.word	0x0001d1a9
   1d09c:	0001d1a9 	.word	0x0001d1a9
   1d0a0:	0001d1a9 	.word	0x0001d1a9
   1d0a4:	0001d1a9 	.word	0x0001d1a9
   1d0a8:	0001d1a9 	.word	0x0001d1a9
   1d0ac:	0001d1a9 	.word	0x0001d1a9
   1d0b0:	0001d1a9 	.word	0x0001d1a9
   1d0b4:	0001d1a9 	.word	0x0001d1a9
   1d0b8:	0001d1a9 	.word	0x0001d1a9
   1d0bc:	0001d1a9 	.word	0x0001d1a9
   1d0c0:	0001d1a9 	.word	0x0001d1a9
   1d0c4:	0001d177 	.word	0x0001d177
   1d0c8:	0001d1a9 	.word	0x0001d1a9
   1d0cc:	0001d1a9 	.word	0x0001d1a9
   1d0d0:	0001d1a9 	.word	0x0001d1a9
   1d0d4:	0001d1a9 	.word	0x0001d1a9
   1d0d8:	0001d1a9 	.word	0x0001d1a9
   1d0dc:	0001d1a9 	.word	0x0001d1a9
   1d0e0:	0001d1a9 	.word	0x0001d1a9
   1d0e4:	0001d181 	.word	0x0001d181
   1d0e8:	0001d1a9 	.word	0x0001d1a9
   1d0ec:	0001d1a9 	.word	0x0001d1a9
   1d0f0:	0001d1a9 	.word	0x0001d1a9
   1d0f4:	0001d1a9 	.word	0x0001d1a9
   1d0f8:	0001d1a9 	.word	0x0001d1a9
   1d0fc:	0001d1a9 	.word	0x0001d1a9
   1d100:	0001d1a9 	.word	0x0001d1a9
   1d104:	0001d147 	.word	0x0001d147
   1d108:	0001d1a9 	.word	0x0001d1a9
   1d10c:	0001d1a9 	.word	0x0001d1a9
   1d110:	0001d1a9 	.word	0x0001d1a9
   1d114:	0001d1a9 	.word	0x0001d1a9
   1d118:	0001d1a9 	.word	0x0001d1a9
   1d11c:	0001d1a9 	.word	0x0001d1a9
   1d120:	0001d1a9 	.word	0x0001d1a9
   1d124:	0001d1a9 	.word	0x0001d1a9
   1d128:	0001d1a9 	.word	0x0001d1a9
   1d12c:	0001d18b 	.word	0x0001d18b
   1d130:	0001d1a9 	.word	0x0001d1a9
   1d134:	0001d1a9 	.word	0x0001d1a9
   1d138:	0001d1a9 	.word	0x0001d1a9
   1d13c:	0001d19d 	.word	0x0001d19d
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   1d140:	f7ff f938 	bl	1c3b4 <appSlaveAdvModeInit>
      break;
   1d144:	e035      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   1d146:	4b1e      	ldr	r3, [pc, #120]	; (1d1c0 <AppSlaveProcDmMsg+0x194>)
   1d148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d14a:	2b00      	cmp	r3, #0
   1d14c:	d02e      	beq.n	1d1ac <AppSlaveProcDmMsg+0x180>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   1d14e:	4b1c      	ldr	r3, [pc, #112]	; (1d1c0 <AppSlaveProcDmMsg+0x194>)
   1d150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d152:	6878      	ldr	r0, [r7, #4]
   1d154:	4798      	blx	r3
      }
      break;
   1d156:	e029      	b.n	1d1ac <AppSlaveProcDmMsg+0x180>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   1d158:	68f9      	ldr	r1, [r7, #12]
   1d15a:	6878      	ldr	r0, [r7, #4]
   1d15c:	f7ff fb40 	bl	1c7e0 <appSlaveConnOpen>
      break;
   1d160:	e027      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   1d162:	68f9      	ldr	r1, [r7, #12]
   1d164:	6878      	ldr	r0, [r7, #4]
   1d166:	f7ff fb53 	bl	1c810 <appSlaveConnClose>
      break;
   1d16a:	e022      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   1d16c:	68f9      	ldr	r1, [r7, #12]
   1d16e:	6878      	ldr	r0, [r7, #4]
   1d170:	f7ff fbec 	bl	1c94c <appSlaveConnUpdate>
      break;
   1d174:	e01d      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   1d176:	68f9      	ldr	r1, [r7, #12]
   1d178:	6878      	ldr	r0, [r7, #4]
   1d17a:	f7ff fc23 	bl	1c9c4 <appSlaveResolvedAddrInd>
      break;
   1d17e:	e018      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   1d180:	68f9      	ldr	r1, [r7, #12]
   1d182:	6878      	ldr	r0, [r7, #4]
   1d184:	f7ff fc74 	bl	1ca70 <appSlaveRemoteConnParamReq>
      break;
   1d188:	e013      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>
    
    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   1d18a:	68fb      	ldr	r3, [r7, #12]
   1d18c:	7b5b      	ldrb	r3, [r3, #13]
   1d18e:	2b01      	cmp	r3, #1
   1d190:	d10e      	bne.n	1d1b0 <AppSlaveProcDmMsg+0x184>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   1d192:	68f9      	ldr	r1, [r7, #12]
   1d194:	6878      	ldr	r0, [r7, #4]
   1d196:	f7ff fe93 	bl	1cec0 <appSlaveConnUpdateTimeout>
      }
      break;
   1d19a:	e009      	b.n	1d1b0 <AppSlaveProcDmMsg+0x184>
    
    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   1d19c:	2000      	movs	r0, #0
   1d19e:	f7f7 fbb3 	bl	14908 <HciDrvRadioBoot>
      DmDevReset();
   1d1a2:	f7f2 ff05 	bl	ffb0 <DmDevReset>
      break;
   1d1a6:	e004      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>

    default:
      break;
   1d1a8:	bf00      	nop
   1d1aa:	e002      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>
      break;
   1d1ac:	bf00      	nop
   1d1ae:	e000      	b.n	1d1b2 <AppSlaveProcDmMsg+0x186>
      break;
   1d1b0:	bf00      	nop
  }
}
   1d1b2:	bf00      	nop
   1d1b4:	3710      	adds	r7, #16
   1d1b6:	46bd      	mov	sp, r7
   1d1b8:	bd80      	pop	{r7, pc}
   1d1ba:	bf00      	nop
   1d1bc:	10005d7c 	.word	0x10005d7c
   1d1c0:	10005e7c 	.word	0x10005e7c

0001d1c4 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   1d1c4:	b580      	push	{r7, lr}
   1d1c6:	b082      	sub	sp, #8
   1d1c8:	af00      	add	r7, sp, #0
   1d1ca:	603b      	str	r3, [r7, #0]
   1d1cc:	4603      	mov	r3, r0
   1d1ce:	71fb      	strb	r3, [r7, #7]
   1d1d0:	460b      	mov	r3, r1
   1d1d2:	71bb      	strb	r3, [r7, #6]
   1d1d4:	4613      	mov	r3, r2
   1d1d6:	80bb      	strh	r3, [r7, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   1d1d8:	79fa      	ldrb	r2, [r7, #7]
   1d1da:	79bb      	ldrb	r3, [r7, #6]
   1d1dc:	4926      	ldr	r1, [pc, #152]	; (1d278 <appAdvSetData+0xb4>)
   1d1de:	0092      	lsls	r2, r2, #2
   1d1e0:	4413      	add	r3, r2
   1d1e2:	683a      	ldr	r2, [r7, #0]
   1d1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   1d1e8:	79fa      	ldrb	r2, [r7, #7]
   1d1ea:	79bb      	ldrb	r3, [r7, #6]
   1d1ec:	4922      	ldr	r1, [pc, #136]	; (1d278 <appAdvSetData+0xb4>)
   1d1ee:	0092      	lsls	r2, r2, #2
   1d1f0:	4413      	add	r3, r2
   1d1f2:	3308      	adds	r3, #8
   1d1f4:	88ba      	ldrh	r2, [r7, #4]
   1d1f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   1d1fa:	79fa      	ldrb	r2, [r7, #7]
   1d1fc:	79bb      	ldrb	r3, [r7, #6]
   1d1fe:	491e      	ldr	r1, [pc, #120]	; (1d278 <appAdvSetData+0xb4>)
   1d200:	0092      	lsls	r2, r2, #2
   1d202:	4413      	add	r3, r2
   1d204:	330c      	adds	r3, #12
   1d206:	8a3a      	ldrh	r2, [r7, #16]
   1d208:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   1d20c:	79fb      	ldrb	r3, [r7, #7]
   1d20e:	491a      	ldr	r1, [pc, #104]	; (1d278 <appAdvSetData+0xb4>)
   1d210:	3314      	adds	r3, #20
   1d212:	8aba      	ldrh	r2, [r7, #20]
   1d214:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   1d218:	79fa      	ldrb	r2, [r7, #7]
   1d21a:	79bb      	ldrb	r3, [r7, #6]
   1d21c:	4916      	ldr	r1, [pc, #88]	; (1d278 <appAdvSetData+0xb4>)
   1d21e:	0092      	lsls	r2, r2, #2
   1d220:	4413      	add	r3, r2
   1d222:	3310      	adds	r3, #16
   1d224:	2200      	movs	r2, #0
   1d226:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1d22a:	79fb      	ldrb	r3, [r7, #7]
   1d22c:	4a12      	ldr	r2, [pc, #72]	; (1d278 <appAdvSetData+0xb4>)
   1d22e:	4413      	add	r3, r2
   1d230:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1d234:	2b03      	cmp	r3, #3
   1d236:	d015      	beq.n	1d264 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1d238:	79bb      	ldrb	r3, [r7, #6]
   1d23a:	085b      	lsrs	r3, r3, #1
   1d23c:	b2da      	uxtb	r2, r3
   1d23e:	4b0e      	ldr	r3, [pc, #56]	; (1d278 <appAdvSetData+0xb4>)
   1d240:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1d244:	429a      	cmp	r2, r3
   1d246:	d10d      	bne.n	1d264 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1d248:	88bb      	ldrh	r3, [r7, #4]
   1d24a:	2bfb      	cmp	r3, #251	; 0xfb
   1d24c:	d80a      	bhi.n	1d264 <appAdvSetData+0xa0>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   1d24e:	88ba      	ldrh	r2, [r7, #4]
   1d250:	8abb      	ldrh	r3, [r7, #20]
   1d252:	429a      	cmp	r2, r3
   1d254:	d806      	bhi.n	1d264 <appAdvSetData+0xa0>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   1d256:	79ba      	ldrb	r2, [r7, #6]
   1d258:	79fb      	ldrb	r3, [r7, #7]
   1d25a:	4611      	mov	r1, r2
   1d25c:	4618      	mov	r0, r3
   1d25e:	f7ff f923 	bl	1c4a8 <appSetAdvScanDataFrag>
   1d262:	e005      	b.n	1d270 <appAdvSetData+0xac>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   1d264:	79fb      	ldrb	r3, [r7, #7]
   1d266:	4a04      	ldr	r2, [pc, #16]	; (1d278 <appAdvSetData+0xb4>)
   1d268:	4413      	add	r3, r2
   1d26a:	2200      	movs	r2, #0
   1d26c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1d270:	bf00      	nop
   1d272:	3708      	adds	r7, #8
   1d274:	46bd      	mov	sp, r7
   1d276:	bd80      	pop	{r7, pc}
   1d278:	10005e7c 	.word	0x10005e7c

0001d27c <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   1d27c:	b580      	push	{r7, lr}
   1d27e:	b086      	sub	sp, #24
   1d280:	af00      	add	r7, sp, #0
   1d282:	60b9      	str	r1, [r7, #8]
   1d284:	607a      	str	r2, [r7, #4]
   1d286:	603b      	str	r3, [r7, #0]
   1d288:	4603      	mov	r3, r0
   1d28a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) || (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   1d28c:	7bfb      	ldrb	r3, [r7, #15]
   1d28e:	68b9      	ldr	r1, [r7, #8]
   1d290:	4618      	mov	r0, r3
   1d292:	f7ff f89f 	bl	1c3d4 <appSlaveConnectableAdv>
   1d296:	4603      	mov	r3, r0
   1d298:	2b00      	cmp	r3, #0
   1d29a:	d009      	beq.n	1d2b0 <appAdvStart+0x34>
   1d29c:	2001      	movs	r0, #1
   1d29e:	f7fe fe79 	bl	1bf94 <appNumConns>
   1d2a2:	4603      	mov	r3, r0
   1d2a4:	461a      	mov	r2, r3
   1d2a6:	4b35      	ldr	r3, [pc, #212]	; (1d37c <appAdvStart+0x100>)
   1d2a8:	681b      	ldr	r3, [r3, #0]
   1d2aa:	781b      	ldrb	r3, [r3, #0]
   1d2ac:	429a      	cmp	r2, r3
   1d2ae:	d24e      	bcs.n	1d34e <appAdvStart+0xd2>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   1d2b0:	2300      	movs	r3, #0
   1d2b2:	75fb      	strb	r3, [r7, #23]
   1d2b4:	e040      	b.n	1d338 <appAdvStart+0xbc>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   1d2b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1d2ba:	2b00      	cmp	r3, #0
   1d2bc:	d023      	beq.n	1d306 <appAdvStart+0x8a>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   1d2be:	7dfb      	ldrb	r3, [r7, #23]
   1d2c0:	68ba      	ldr	r2, [r7, #8]
   1d2c2:	4413      	add	r3, r2
   1d2c4:	7818      	ldrb	r0, [r3, #0]
   1d2c6:	7dfb      	ldrb	r3, [r7, #23]
   1d2c8:	005b      	lsls	r3, r3, #1
   1d2ca:	687a      	ldr	r2, [r7, #4]
   1d2cc:	4413      	add	r3, r2
   1d2ce:	8819      	ldrh	r1, [r3, #0]
   1d2d0:	7dfb      	ldrb	r3, [r7, #23]
   1d2d2:	005b      	lsls	r3, r3, #1
   1d2d4:	687a      	ldr	r2, [r7, #4]
   1d2d6:	4413      	add	r3, r2
   1d2d8:	881b      	ldrh	r3, [r3, #0]
   1d2da:	461a      	mov	r2, r3
   1d2dc:	f7f1 fe50 	bl	ef80 <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]], appSlaveCb.peerAddrType,
   1d2e0:	7dfb      	ldrb	r3, [r7, #23]
   1d2e2:	68ba      	ldr	r2, [r7, #8]
   1d2e4:	4413      	add	r3, r2
   1d2e6:	7818      	ldrb	r0, [r3, #0]
   1d2e8:	7dfb      	ldrb	r3, [r7, #23]
   1d2ea:	68ba      	ldr	r2, [r7, #8]
   1d2ec:	4413      	add	r3, r2
   1d2ee:	781b      	ldrb	r3, [r3, #0]
   1d2f0:	461a      	mov	r2, r3
   1d2f2:	4b23      	ldr	r3, [pc, #140]	; (1d380 <appAdvStart+0x104>)
   1d2f4:	4413      	add	r3, r2
   1d2f6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
   1d2fa:	4b21      	ldr	r3, [pc, #132]	; (1d380 <appAdvStart+0x104>)
   1d2fc:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   1d300:	4b20      	ldr	r3, [pc, #128]	; (1d384 <appAdvStart+0x108>)
   1d302:	f7f1 fd9b 	bl	ee3c <DmAdvConfig>
                    appSlaveCb.peerAddr);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   1d306:	7dfb      	ldrb	r3, [r7, #23]
   1d308:	68ba      	ldr	r2, [r7, #8]
   1d30a:	4413      	add	r3, r2
   1d30c:	781b      	ldrb	r3, [r3, #0]
   1d30e:	461a      	mov	r2, r3
   1d310:	4b1b      	ldr	r3, [pc, #108]	; (1d380 <appAdvStart+0x104>)
   1d312:	4413      	add	r3, r2
   1d314:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   1d318:	2b00      	cmp	r3, #0
   1d31a:	d10a      	bne.n	1d332 <appAdvStart+0xb6>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   1d31c:	7dfb      	ldrb	r3, [r7, #23]
   1d31e:	68ba      	ldr	r2, [r7, #8]
   1d320:	4413      	add	r3, r2
   1d322:	781a      	ldrb	r2, [r3, #0]
   1d324:	4b16      	ldr	r3, [pc, #88]	; (1d380 <appAdvStart+0x104>)
   1d326:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1d32a:	4619      	mov	r1, r3
   1d32c:	4610      	mov	r0, r2
   1d32e:	f7ff f93f 	bl	1c5b0 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   1d332:	7dfb      	ldrb	r3, [r7, #23]
   1d334:	3301      	adds	r3, #1
   1d336:	75fb      	strb	r3, [r7, #23]
   1d338:	7dfa      	ldrb	r2, [r7, #23]
   1d33a:	7bfb      	ldrb	r3, [r7, #15]
   1d33c:	429a      	cmp	r2, r3
   1d33e:	d3ba      	bcc.n	1d2b6 <appAdvStart+0x3a>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   1d340:	7bf8      	ldrb	r0, [r7, #15]
   1d342:	6a3b      	ldr	r3, [r7, #32]
   1d344:	683a      	ldr	r2, [r7, #0]
   1d346:	68b9      	ldr	r1, [r7, #8]
   1d348:	f7f1 fdb6 	bl	eeb8 <DmAdvStart>

    return;
   1d34c:	e013      	b.n	1d376 <appAdvStart+0xfa>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   1d34e:	2300      	movs	r3, #0
   1d350:	75fb      	strb	r3, [r7, #23]
   1d352:	e00c      	b.n	1d36e <appAdvStart+0xf2>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1d354:	7dfb      	ldrb	r3, [r7, #23]
   1d356:	68ba      	ldr	r2, [r7, #8]
   1d358:	4413      	add	r3, r2
   1d35a:	781b      	ldrb	r3, [r3, #0]
   1d35c:	461a      	mov	r2, r3
   1d35e:	4b08      	ldr	r3, [pc, #32]	; (1d380 <appAdvStart+0x104>)
   1d360:	4413      	add	r3, r2
   1d362:	2203      	movs	r2, #3
   1d364:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < numSets; i++)
   1d368:	7dfb      	ldrb	r3, [r7, #23]
   1d36a:	3301      	adds	r3, #1
   1d36c:	75fb      	strb	r3, [r7, #23]
   1d36e:	7dfa      	ldrb	r2, [r7, #23]
   1d370:	7bfb      	ldrb	r3, [r7, #15]
   1d372:	429a      	cmp	r2, r3
   1d374:	d3ee      	bcc.n	1d354 <appAdvStart+0xd8>
  }
}
   1d376:	3718      	adds	r7, #24
   1d378:	46bd      	mov	sp, r7
   1d37a:	bd80      	pop	{r7, pc}
   1d37c:	10005d54 	.word	0x10005d54
   1d380:	10005e7c 	.word	0x10005e7c
   1d384:	10005eac 	.word	0x10005eac

0001d388 <appAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
   1d388:	b580      	push	{r7, lr}
   1d38a:	b084      	sub	sp, #16
   1d38c:	af00      	add	r7, sp, #0
   1d38e:	4603      	mov	r3, r0
   1d390:	6039      	str	r1, [r7, #0]
   1d392:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  /* if number of advertising sets is 0 */
  if (numSets == 0)
   1d394:	79fb      	ldrb	r3, [r7, #7]
   1d396:	2b00      	cmp	r3, #0
   1d398:	d10f      	bne.n	1d3ba <appAdvStop+0x32>
  {
    /* stop all advertising sets */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d39a:	2300      	movs	r3, #0
   1d39c:	73fb      	strb	r3, [r7, #15]
   1d39e:	e008      	b.n	1d3b2 <appAdvStop+0x2a>
    {
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1d3a0:	7bfb      	ldrb	r3, [r7, #15]
   1d3a2:	4a19      	ldr	r2, [pc, #100]	; (1d408 <appAdvStop+0x80>)
   1d3a4:	4413      	add	r3, r2
   1d3a6:	2203      	movs	r2, #3
   1d3a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d3ac:	7bfb      	ldrb	r3, [r7, #15]
   1d3ae:	3301      	adds	r3, #1
   1d3b0:	73fb      	strb	r3, [r7, #15]
   1d3b2:	7bfb      	ldrb	r3, [r7, #15]
   1d3b4:	2b00      	cmp	r3, #0
   1d3b6:	d0f3      	beq.n	1d3a0 <appAdvStop+0x18>
   1d3b8:	e013      	b.n	1d3e2 <appAdvStop+0x5a>
    }
  }
  else
  {
    for (i = 0; i < numSets; i++)
   1d3ba:	2300      	movs	r3, #0
   1d3bc:	73fb      	strb	r3, [r7, #15]
   1d3be:	e00c      	b.n	1d3da <appAdvStop+0x52>
    {
      WSF_ASSERT(pAdvHandles[i] < DM_NUM_ADV_SETS);

      /* stop advertising */
      appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1d3c0:	7bfb      	ldrb	r3, [r7, #15]
   1d3c2:	683a      	ldr	r2, [r7, #0]
   1d3c4:	4413      	add	r3, r2
   1d3c6:	781b      	ldrb	r3, [r3, #0]
   1d3c8:	461a      	mov	r2, r3
   1d3ca:	4b0f      	ldr	r3, [pc, #60]	; (1d408 <appAdvStop+0x80>)
   1d3cc:	4413      	add	r3, r2
   1d3ce:	2203      	movs	r2, #3
   1d3d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < numSets; i++)
   1d3d4:	7bfb      	ldrb	r3, [r7, #15]
   1d3d6:	3301      	adds	r3, #1
   1d3d8:	73fb      	strb	r3, [r7, #15]
   1d3da:	7bfa      	ldrb	r2, [r7, #15]
   1d3dc:	79fb      	ldrb	r3, [r7, #7]
   1d3de:	429a      	cmp	r2, r3
   1d3e0:	d3ee      	bcc.n	1d3c0 <appAdvStop+0x38>
    }
  }

  /* if no advertising set is active */
  if (!AppSlaveIsAdvertising())
   1d3e2:	f000 f995 	bl	1d710 <AppSlaveIsAdvertising>
   1d3e6:	4603      	mov	r3, r0
   1d3e8:	2b00      	cmp	r3, #0
   1d3ea:	d103      	bne.n	1d3f4 <appAdvStop+0x6c>
  {
    appSlaveCb.discMode = APP_MODE_NONE;
   1d3ec:	4b06      	ldr	r3, [pc, #24]	; (1d408 <appAdvStop+0x80>)
   1d3ee:	22ff      	movs	r2, #255	; 0xff
   1d3f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }

  DmAdvStop(numSets, pAdvHandles);
   1d3f4:	79fb      	ldrb	r3, [r7, #7]
   1d3f6:	6839      	ldr	r1, [r7, #0]
   1d3f8:	4618      	mov	r0, r3
   1d3fa:	f7f1 fd7b 	bl	eef4 <DmAdvStop>
}
   1d3fe:	bf00      	nop
   1d400:	3710      	adds	r7, #16
   1d402:	46bd      	mov	sp, r7
   1d404:	bd80      	pop	{r7, pc}
   1d406:	bf00      	nop
   1d408:	10005e7c 	.word	0x10005e7c

0001d40c <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   1d40c:	b580      	push	{r7, lr}
   1d40e:	b088      	sub	sp, #32
   1d410:	af02      	add	r7, sp, #8
   1d412:	60b9      	str	r1, [r7, #8]
   1d414:	607a      	str	r2, [r7, #4]
   1d416:	603b      	str	r3, [r7, #0]
   1d418:	4603      	mov	r3, r0
   1d41a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   1d41c:	4b25      	ldr	r3, [pc, #148]	; (1d4b4 <appSlaveAdvStart+0xa8>)
   1d41e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1d422:	75bb      	strb	r3, [r7, #22]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   1d424:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1d428:	2b02      	cmp	r3, #2
   1d42a:	d114      	bne.n	1d456 <appSlaveAdvStart+0x4a>
  {
    if (AppDbCheckBonded() == FALSE)
   1d42c:	f7f6 f8ca 	bl	135c4 <AppDbCheckBonded>
   1d430:	4603      	mov	r3, r0
   1d432:	2b00      	cmp	r3, #0
   1d434:	d107      	bne.n	1d446 <appSlaveAdvStart+0x3a>
    {
      AppSetBondable(TRUE);
   1d436:	2001      	movs	r0, #1
   1d438:	f000 f928 	bl	1d68c <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   1d43c:	4b1d      	ldr	r3, [pc, #116]	; (1d4b4 <appSlaveAdvStart+0xa8>)
   1d43e:	2201      	movs	r2, #1
   1d440:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1d444:	e00c      	b.n	1d460 <appSlaveAdvStart+0x54>
    }
    else
    {
      AppSetBondable(FALSE);
   1d446:	2000      	movs	r0, #0
   1d448:	f000 f920 	bl	1d68c <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1d44c:	4b19      	ldr	r3, [pc, #100]	; (1d4b4 <appSlaveAdvStart+0xa8>)
   1d44e:	2200      	movs	r2, #0
   1d450:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1d454:	e004      	b.n	1d460 <appSlaveAdvStart+0x54>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   1d456:	4a17      	ldr	r2, [pc, #92]	; (1d4b4 <appSlaveAdvStart+0xa8>)
   1d458:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1d45c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   1d460:	4b14      	ldr	r3, [pc, #80]	; (1d4b4 <appSlaveAdvStart+0xa8>)
   1d462:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1d466:	7dba      	ldrb	r2, [r7, #22]
   1d468:	429a      	cmp	r2, r3
   1d46a:	d014      	beq.n	1d496 <appSlaveAdvStart+0x8a>
  {
    for (i = 0; i < numSets; i++)
   1d46c:	2300      	movs	r3, #0
   1d46e:	75fb      	strb	r3, [r7, #23]
   1d470:	e00d      	b.n	1d48e <appSlaveAdvStart+0x82>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   1d472:	7dfb      	ldrb	r3, [r7, #23]
   1d474:	68ba      	ldr	r2, [r7, #8]
   1d476:	4413      	add	r3, r2
   1d478:	781a      	ldrb	r2, [r3, #0]
   1d47a:	4b0e      	ldr	r3, [pc, #56]	; (1d4b4 <appSlaveAdvStart+0xa8>)
   1d47c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1d480:	4619      	mov	r1, r3
   1d482:	4610      	mov	r0, r2
   1d484:	f7fe ffe0 	bl	1c448 <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   1d488:	7dfb      	ldrb	r3, [r7, #23]
   1d48a:	3301      	adds	r3, #1
   1d48c:	75fb      	strb	r3, [r7, #23]
   1d48e:	7dfa      	ldrb	r2, [r7, #23]
   1d490:	7bfb      	ldrb	r3, [r7, #15]
   1d492:	429a      	cmp	r2, r3
   1d494:	d3ed      	bcc.n	1d472 <appSlaveAdvStart+0x66>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   1d496:	7bf8      	ldrb	r0, [r7, #15]
   1d498:	2301      	movs	r3, #1
   1d49a:	9301      	str	r3, [sp, #4]
   1d49c:	6a3b      	ldr	r3, [r7, #32]
   1d49e:	9300      	str	r3, [sp, #0]
   1d4a0:	683b      	ldr	r3, [r7, #0]
   1d4a2:	687a      	ldr	r2, [r7, #4]
   1d4a4:	68b9      	ldr	r1, [r7, #8]
   1d4a6:	f7ff fee9 	bl	1d27c <appAdvStart>
}
   1d4aa:	bf00      	nop
   1d4ac:	3718      	adds	r7, #24
   1d4ae:	46bd      	mov	sp, r7
   1d4b0:	bd80      	pop	{r7, pc}
   1d4b2:	bf00      	nop
   1d4b4:	10005e7c 	.word	0x10005e7c

0001d4b8 <appConnAccept>:
 *  \return None.
 */
/*************************************************************************************************/
void appConnAccept(uint8_t advHandle, uint8_t advType, uint16_t interval, uint16_t duration,
                   uint8_t maxEaEvents, uint8_t addrType, uint8_t *pAddr)
{
   1d4b8:	b590      	push	{r4, r7, lr}
   1d4ba:	b089      	sub	sp, #36	; 0x24
   1d4bc:	af04      	add	r7, sp, #16
   1d4be:	4604      	mov	r4, r0
   1d4c0:	4608      	mov	r0, r1
   1d4c2:	4611      	mov	r1, r2
   1d4c4:	461a      	mov	r2, r3
   1d4c6:	4623      	mov	r3, r4
   1d4c8:	71fb      	strb	r3, [r7, #7]
   1d4ca:	4603      	mov	r3, r0
   1d4cc:	71bb      	strb	r3, [r7, #6]
   1d4ce:	460b      	mov	r3, r1
   1d4d0:	80bb      	strh	r3, [r7, #4]
   1d4d2:	4613      	mov	r3, r2
   1d4d4:	807b      	strh	r3, [r7, #2]
  /* if not already advertising and asked to enter direct connectable mode */
  if ((appSlaveCb.advState[advHandle] >= APP_ADV_STOPPED) &&
   1d4d6:	79fb      	ldrb	r3, [r7, #7]
   1d4d8:	4a2a      	ldr	r2, [pc, #168]	; (1d584 <appConnAccept+0xcc>)
   1d4da:	4413      	add	r3, r2
   1d4dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1d4e0:	2b02      	cmp	r3, #2
   1d4e2:	d94b      	bls.n	1d57c <appConnAccept+0xc4>
   1d4e4:	79bb      	ldrb	r3, [r7, #6]
   1d4e6:	2b01      	cmp	r3, #1
   1d4e8:	d002      	beq.n	1d4f0 <appConnAccept+0x38>
      ((advType == DM_ADV_CONN_DIRECT)                    ||
   1d4ea:	79bb      	ldrb	r3, [r7, #6]
   1d4ec:	2b04      	cmp	r3, #4
   1d4ee:	d145      	bne.n	1d57c <appConnAccept+0xc4>
       (advType == DM_ADV_CONN_DIRECT_LO_DUTY)))
  {
    /* if this advertising state is being used or high duty cycle directed advertising */
    if ((interval > 0) || (advType == DM_ADV_CONN_DIRECT))
   1d4f0:	88bb      	ldrh	r3, [r7, #4]
   1d4f2:	2b00      	cmp	r3, #0
   1d4f4:	d102      	bne.n	1d4fc <appConnAccept+0x44>
   1d4f6:	79bb      	ldrb	r3, [r7, #6]
   1d4f8:	2b01      	cmp	r3, #1
   1d4fa:	d13f      	bne.n	1d57c <appConnAccept+0xc4>
    {
      /* if LL Privacy has been enabled */
      if (DmLlPrivEnabled())
   1d4fc:	f7f2 fe08 	bl	10110 <DmLlPrivEnabled>
   1d500:	4603      	mov	r3, r0
   1d502:	2b00      	cmp	r3, #0
   1d504:	d00f      	beq.n	1d526 <appConnAccept+0x6e>
      {
        appDbHdl_t dbHdl = AppDbFindByAddr(addrType, pAddr);
   1d506:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1d50a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1d50c:	4618      	mov	r0, r3
   1d50e:	f7f6 f899 	bl	13644 <AppDbFindByAddr>
   1d512:	60f8      	str	r0, [r7, #12]

        /* if LL address resolution is not supported on peer device */
        if ((dbHdl == APP_DB_HDL_NONE) || !AppDbGetPeerAddrRes(dbHdl))
   1d514:	68fb      	ldr	r3, [r7, #12]
   1d516:	2b00      	cmp	r3, #0
   1d518:	d02f      	beq.n	1d57a <appConnAccept+0xc2>
   1d51a:	68f8      	ldr	r0, [r7, #12]
   1d51c:	f7f6 fa1a 	bl	13954 <AppDbGetPeerAddrRes>
   1d520:	4603      	mov	r3, r0
   1d522:	2b00      	cmp	r3, #0
   1d524:	d029      	beq.n	1d57a <appConnAccept+0xc2>
          return;
        }
      }

      /* set advertising state */
      appSlaveCb.advState[advHandle] = APP_ADV_STATE1;
   1d526:	79fb      	ldrb	r3, [r7, #7]
   1d528:	4a16      	ldr	r2, [pc, #88]	; (1d584 <appConnAccept+0xcc>)
   1d52a:	4413      	add	r3, r2
   1d52c:	2200      	movs	r2, #0
   1d52e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* if high duty cycle directed advertising */
      if (advType == DM_ADV_CONN_DIRECT)
   1d532:	79bb      	ldrb	r3, [r7, #6]
   1d534:	2b01      	cmp	r3, #1
   1d536:	d10a      	bne.n	1d54e <appConnAccept+0x96>
      {
        /* for high duty cycle directed advertising (<= 3.75 ms advertising interval):
         * - min and max advertising intervals are not used
         * - duration must be less than or equal to 1.28 seconds and cannot be 0
         */
        if ((duration > HCI_ADV_DIRECTED_MAX_DURATION) || (duration == 0))
   1d538:	887b      	ldrh	r3, [r7, #2]
   1d53a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1d53e:	d802      	bhi.n	1d546 <appConnAccept+0x8e>
   1d540:	887b      	ldrh	r3, [r7, #2]
   1d542:	2b00      	cmp	r3, #0
   1d544:	d109      	bne.n	1d55a <appConnAccept+0xa2>
        {
          duration = HCI_ADV_DIRECTED_MAX_DURATION;
   1d546:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   1d54a:	807b      	strh	r3, [r7, #2]
   1d54c:	e005      	b.n	1d55a <appConnAccept+0xa2>
        }
      }
      else
      {
        /* set min and max advertising intervals */
        DmAdvSetInterval(advHandle, interval, interval);
   1d54e:	88ba      	ldrh	r2, [r7, #4]
   1d550:	88b9      	ldrh	r1, [r7, #4]
   1d552:	79fb      	ldrb	r3, [r7, #7]
   1d554:	4618      	mov	r0, r3
   1d556:	f7f1 fd13 	bl	ef80 <DmAdvSetInterval>
      }

      /* accept connection */
      DmConnAccept(DM_CLIENT_ID_APP, advHandle, advType, duration, maxEaEvents, addrType, pAddr);
   1d55a:	8878      	ldrh	r0, [r7, #2]
   1d55c:	79ba      	ldrb	r2, [r7, #6]
   1d55e:	79f9      	ldrb	r1, [r7, #7]
   1d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d562:	9302      	str	r3, [sp, #8]
   1d564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1d568:	9301      	str	r3, [sp, #4]
   1d56a:	f897 3020 	ldrb.w	r3, [r7, #32]
   1d56e:	9300      	str	r3, [sp, #0]
   1d570:	4603      	mov	r3, r0
   1d572:	2003      	movs	r0, #3
   1d574:	f7f2 fc79 	bl	fe6a <DmConnAccept>
   1d578:	e000      	b.n	1d57c <appConnAccept+0xc4>
          return;
   1d57a:	bf00      	nop
    }
  }
}
   1d57c:	3714      	adds	r7, #20
   1d57e:	46bd      	mov	sp, r7
   1d580:	bd90      	pop	{r4, r7, pc}
   1d582:	bf00      	nop
   1d584:	10005e7c 	.word	0x10005e7c

0001d588 <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   1d588:	b580      	push	{r7, lr}
   1d58a:	b084      	sub	sp, #16
   1d58c:	af00      	add	r7, sp, #0
   1d58e:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1d590:	687b      	ldr	r3, [r7, #4]
   1d592:	881b      	ldrh	r3, [r3, #0]
   1d594:	3b01      	subs	r3, #1
   1d596:	015b      	lsls	r3, r3, #5
   1d598:	4a3b      	ldr	r2, [pc, #236]	; (1d688 <AppSlaveSecProcDmMsg+0x100>)
   1d59a:	4413      	add	r3, r2
   1d59c:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   1d59e:	687b      	ldr	r3, [r7, #4]
   1d5a0:	789b      	ldrb	r3, [r3, #2]
   1d5a2:	3b27      	subs	r3, #39	; 0x27
   1d5a4:	2b17      	cmp	r3, #23
   1d5a6:	d869      	bhi.n	1d67c <AppSlaveSecProcDmMsg+0xf4>
   1d5a8:	a201      	add	r2, pc, #4	; (adr r2, 1d5b0 <AppSlaveSecProcDmMsg+0x28>)
   1d5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d5ae:	bf00      	nop
   1d5b0:	0001d611 	.word	0x0001d611
   1d5b4:	0001d61b 	.word	0x0001d61b
   1d5b8:	0001d67d 	.word	0x0001d67d
   1d5bc:	0001d625 	.word	0x0001d625
   1d5c0:	0001d62f 	.word	0x0001d62f
   1d5c4:	0001d639 	.word	0x0001d639
   1d5c8:	0001d67d 	.word	0x0001d67d
   1d5cc:	0001d67d 	.word	0x0001d67d
   1d5d0:	0001d643 	.word	0x0001d643
   1d5d4:	0001d657 	.word	0x0001d657
   1d5d8:	0001d64d 	.word	0x0001d64d
   1d5dc:	0001d67d 	.word	0x0001d67d
   1d5e0:	0001d67d 	.word	0x0001d67d
   1d5e4:	0001d67d 	.word	0x0001d67d
   1d5e8:	0001d67d 	.word	0x0001d67d
   1d5ec:	0001d67d 	.word	0x0001d67d
   1d5f0:	0001d67d 	.word	0x0001d67d
   1d5f4:	0001d67d 	.word	0x0001d67d
   1d5f8:	0001d669 	.word	0x0001d669
   1d5fc:	0001d673 	.word	0x0001d673
   1d600:	0001d67d 	.word	0x0001d67d
   1d604:	0001d67d 	.word	0x0001d67d
   1d608:	0001d67d 	.word	0x0001d67d
   1d60c:	0001d661 	.word	0x0001d661
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   1d610:	68f9      	ldr	r1, [r7, #12]
   1d612:	6878      	ldr	r0, [r7, #4]
   1d614:	f7ff fa60 	bl	1cad8 <appSlaveSecConnOpen>
      break;
   1d618:	e031      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   1d61a:	68f9      	ldr	r1, [r7, #12]
   1d61c:	6878      	ldr	r0, [r7, #4]
   1d61e:	f7ff fa9d 	bl	1cb5c <appSecConnClose>
      break;
   1d622:	e02c      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   1d624:	68f9      	ldr	r1, [r7, #12]
   1d626:	6878      	ldr	r0, [r7, #4]
   1d628:	f7ff fb52 	bl	1ccd0 <appSecPairCmpl>
      break;
   1d62c:	e027      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   1d62e:	68f9      	ldr	r1, [r7, #12]
   1d630:	6878      	ldr	r0, [r7, #4]
   1d632:	f7ff fb81 	bl	1cd38 <appSecPairFailed>
      break;
   1d636:	e022      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   1d638:	68f9      	ldr	r1, [r7, #12]
   1d63a:	6878      	ldr	r0, [r7, #4]
   1d63c:	f7ff fb87 	bl	1cd4e <appSecEncryptInd>
      break;
   1d640:	e01d      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   1d642:	68f9      	ldr	r1, [r7, #12]
   1d644:	6878      	ldr	r0, [r7, #4]
   1d646:	f7ff fb23 	bl	1cc90 <appSecStoreKey>
      break;
   1d64a:	e018      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   1d64c:	68f9      	ldr	r1, [r7, #12]
   1d64e:	6878      	ldr	r0, [r7, #4]
   1d650:	f7ff fa96 	bl	1cb80 <appSecPairInd>
      break;
   1d654:	e013      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   1d656:	68f9      	ldr	r1, [r7, #12]
   1d658:	6878      	ldr	r0, [r7, #4]
   1d65a:	f7ff fb91 	bl	1cd80 <appSecFindLtk>
      break;
   1d65e:	e00e      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   1d660:	6878      	ldr	r0, [r7, #4]
   1d662:	f7ff fbcd 	bl	1ce00 <appPrivSetAddrResEnableInd>
      break;
   1d666:	e00a      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   1d668:	68f9      	ldr	r1, [r7, #12]
   1d66a:	6878      	ldr	r0, [r7, #4]
   1d66c:	f7ff fbda 	bl	1ce24 <appPrivAddDevToResListInd>
      break;
   1d670:	e005      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   1d672:	68f9      	ldr	r1, [r7, #12]
   1d674:	6878      	ldr	r0, [r7, #4]
   1d676:	f7ff fbff 	bl	1ce78 <appPrivRemDevFromResListInd>
      break;
   1d67a:	e000      	b.n	1d67e <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   1d67c:	bf00      	nop
  }
}
   1d67e:	bf00      	nop
   1d680:	3710      	adds	r7, #16
   1d682:	46bd      	mov	sp, r7
   1d684:	bd80      	pop	{r7, pc}
   1d686:	bf00      	nop
   1d688:	10005d7c 	.word	0x10005d7c

0001d68c <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   1d68c:	b480      	push	{r7}
   1d68e:	b083      	sub	sp, #12
   1d690:	af00      	add	r7, sp, #0
   1d692:	4603      	mov	r3, r0
   1d694:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.bondable = bondable;
   1d696:	4a05      	ldr	r2, [pc, #20]	; (1d6ac <AppSetBondable+0x20>)
   1d698:	79fb      	ldrb	r3, [r7, #7]
   1d69a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   1d69e:	bf00      	nop
   1d6a0:	370c      	adds	r7, #12
   1d6a2:	46bd      	mov	sp, r7
   1d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d6a8:	4770      	bx	lr
   1d6aa:	bf00      	nop
   1d6ac:	10005e7c 	.word	0x10005e7c

0001d6b0 <AppSetAdvPeerAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   1d6b0:	b580      	push	{r7, lr}
   1d6b2:	b082      	sub	sp, #8
   1d6b4:	af00      	add	r7, sp, #0
   1d6b6:	4603      	mov	r3, r0
   1d6b8:	6039      	str	r1, [r7, #0]
   1d6ba:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.peerAddrType = peerAddrType;
   1d6bc:	4a05      	ldr	r2, [pc, #20]	; (1d6d4 <AppSetAdvPeerAddr+0x24>)
   1d6be:	79fb      	ldrb	r3, [r7, #7]
   1d6c0:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  BdaCpy(appSlaveCb.peerAddr, pPeerAddr);
   1d6c4:	6839      	ldr	r1, [r7, #0]
   1d6c6:	4804      	ldr	r0, [pc, #16]	; (1d6d8 <AppSetAdvPeerAddr+0x28>)
   1d6c8:	f7f6 ff5e 	bl	14588 <BdaCpy>
}
   1d6cc:	bf00      	nop
   1d6ce:	3708      	adds	r7, #8
   1d6d0:	46bd      	mov	sp, r7
   1d6d2:	bd80      	pop	{r7, pc}
   1d6d4:	10005e7c 	.word	0x10005e7c
   1d6d8:	10005eac 	.word	0x10005eac

0001d6dc <AppSlaveSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecurityReq(dmConnId_t connId)
{
   1d6dc:	b580      	push	{r7, lr}
   1d6de:	b082      	sub	sp, #8
   1d6e0:	af00      	add	r7, sp, #0
   1d6e2:	4603      	mov	r3, r0
   1d6e4:	71fb      	strb	r3, [r7, #7]
  if (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE)
   1d6e6:	79fb      	ldrb	r3, [r7, #7]
   1d6e8:	4618      	mov	r0, r3
   1d6ea:	f7f2 fb23 	bl	fd34 <DmConnSecLevel>
   1d6ee:	4603      	mov	r3, r0
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d107      	bne.n	1d704 <AppSlaveSecurityReq+0x28>
  {
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   1d6f4:	4b05      	ldr	r3, [pc, #20]	; (1d70c <AppSlaveSecurityReq+0x30>)
   1d6f6:	681b      	ldr	r3, [r3, #0]
   1d6f8:	781a      	ldrb	r2, [r3, #0]
   1d6fa:	79fb      	ldrb	r3, [r7, #7]
   1d6fc:	4611      	mov	r1, r2
   1d6fe:	4618      	mov	r0, r3
   1d700:	f7f3 f9bd 	bl	10a7e <DmSecSlaveReq>
  }
}
   1d704:	bf00      	nop
   1d706:	3708      	adds	r7, #8
   1d708:	46bd      	mov	sp, r7
   1d70a:	bd80      	pop	{r7, pc}
   1d70c:	10005d6c 	.word	0x10005d6c

0001d710 <AppSlaveIsAdvertising>:
 *
 *  \return TRUE if device's advertising. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppSlaveIsAdvertising(void)
{
   1d710:	b480      	push	{r7}
   1d712:	b083      	sub	sp, #12
   1d714:	af00      	add	r7, sp, #0
  uint8_t i;

  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d716:	2300      	movs	r3, #0
   1d718:	71fb      	strb	r3, [r7, #7]
   1d71a:	e00b      	b.n	1d734 <AppSlaveIsAdvertising+0x24>
  {
    /* if advertising */
    if (appSlaveCb.advState[i] < APP_ADV_STOPPED)
   1d71c:	79fb      	ldrb	r3, [r7, #7]
   1d71e:	4a0a      	ldr	r2, [pc, #40]	; (1d748 <AppSlaveIsAdvertising+0x38>)
   1d720:	4413      	add	r3, r2
   1d722:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1d726:	2b02      	cmp	r3, #2
   1d728:	d801      	bhi.n	1d72e <AppSlaveIsAdvertising+0x1e>
    {
      return TRUE;
   1d72a:	2301      	movs	r3, #1
   1d72c:	e006      	b.n	1d73c <AppSlaveIsAdvertising+0x2c>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d72e:	79fb      	ldrb	r3, [r7, #7]
   1d730:	3301      	adds	r3, #1
   1d732:	71fb      	strb	r3, [r7, #7]
   1d734:	79fb      	ldrb	r3, [r7, #7]
   1d736:	2b00      	cmp	r3, #0
   1d738:	d0f0      	beq.n	1d71c <AppSlaveIsAdvertising+0xc>
    }
  }

  return FALSE;
   1d73a:	2300      	movs	r3, #0
}
   1d73c:	4618      	mov	r0, r3
   1d73e:	370c      	adds	r7, #12
   1d740:	46bd      	mov	sp, r7
   1d742:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d746:	4770      	bx	lr
   1d748:	10005e7c 	.word	0x10005e7c

0001d74c <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   1d74c:	b580      	push	{r7, lr}
   1d74e:	b084      	sub	sp, #16
   1d750:	af02      	add	r7, sp, #8
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1d752:	4b15      	ldr	r3, [pc, #84]	; (1d7a8 <appSlaveLegAdvStart+0x5c>)
   1d754:	681a      	ldr	r2, [r3, #0]
   1d756:	4b15      	ldr	r3, [pc, #84]	; (1d7ac <appSlaveLegAdvStart+0x60>)
   1d758:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1d75c:	005b      	lsls	r3, r3, #1
   1d75e:	4413      	add	r3, r2
   1d760:	88db      	ldrh	r3, [r3, #6]
   1d762:	80bb      	strh	r3, [r7, #4]

  /* if this advertising state is being used */
  if (interval > 0)
   1d764:	88bb      	ldrh	r3, [r7, #4]
   1d766:	2b00      	cmp	r3, #0
   1d768:	d015      	beq.n	1d796 <appSlaveLegAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1d76a:	2300      	movs	r3, #0
   1d76c:	71fb      	strb	r3, [r7, #7]
    maxEaEvents = 0;
   1d76e:	2300      	movs	r3, #0
   1d770:	71bb      	strb	r3, [r7, #6]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   1d772:	4b0d      	ldr	r3, [pc, #52]	; (1d7a8 <appSlaveLegAdvStart+0x5c>)
   1d774:	681a      	ldr	r2, [r3, #0]
   1d776:	4b0d      	ldr	r3, [pc, #52]	; (1d7ac <appSlaveLegAdvStart+0x60>)
   1d778:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    appAdvStart(1, &advHandle, &interval,
   1d77c:	005b      	lsls	r3, r3, #1
   1d77e:	18d0      	adds	r0, r2, r3
   1d780:	1d3a      	adds	r2, r7, #4
   1d782:	1df9      	adds	r1, r7, #7
   1d784:	2301      	movs	r3, #1
   1d786:	9301      	str	r3, [sp, #4]
   1d788:	1dbb      	adds	r3, r7, #6
   1d78a:	9300      	str	r3, [sp, #0]
   1d78c:	4603      	mov	r3, r0
   1d78e:	2001      	movs	r0, #1
   1d790:	f7ff fd74 	bl	1d27c <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   1d794:	e003      	b.n	1d79e <appSlaveLegAdvStart+0x52>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1d796:	4b05      	ldr	r3, [pc, #20]	; (1d7ac <appSlaveLegAdvStart+0x60>)
   1d798:	2203      	movs	r2, #3
   1d79a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   1d79e:	bf00      	nop
   1d7a0:	3708      	adds	r7, #8
   1d7a2:	46bd      	mov	sp, r7
   1d7a4:	bd80      	pop	{r7, pc}
   1d7a6:	bf00      	nop
   1d7a8:	10005d78 	.word	0x10005d78
   1d7ac:	10005e7c 	.word	0x10005e7c

0001d7b0 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   1d7b0:	b580      	push	{r7, lr}
   1d7b2:	b082      	sub	sp, #8
   1d7b4:	af00      	add	r7, sp, #0
   1d7b6:	6078      	str	r0, [r7, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   1d7b8:	4b06      	ldr	r3, [pc, #24]	; (1d7d4 <appSlaveLegAdvTypeChanged+0x24>)
   1d7ba:	2200      	movs	r2, #0
   1d7bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1d7c0:	4b04      	ldr	r3, [pc, #16]	; (1d7d4 <appSlaveLegAdvTypeChanged+0x24>)
   1d7c2:	2200      	movs	r2, #0
   1d7c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   1d7c8:	f7ff ffc0 	bl	1d74c <appSlaveLegAdvStart>
}
   1d7cc:	bf00      	nop
   1d7ce:	3708      	adds	r7, #8
   1d7d0:	46bd      	mov	sp, r7
   1d7d2:	bd80      	pop	{r7, pc}
   1d7d4:	10005e7c 	.word	0x10005e7c

0001d7d8 <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   1d7d8:	b580      	push	{r7, lr}
   1d7da:	b082      	sub	sp, #8
   1d7dc:	af00      	add	r7, sp, #0
   1d7de:	6078      	str	r0, [r7, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   1d7e0:	4b09      	ldr	r3, [pc, #36]	; (1d808 <appSlaveNextLegAdvState+0x30>)
   1d7e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1d7e6:	3301      	adds	r3, #1
   1d7e8:	b2da      	uxtb	r2, r3
   1d7ea:	4b07      	ldr	r3, [pc, #28]	; (1d808 <appSlaveNextLegAdvState+0x30>)
   1d7ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   1d7f0:	4b05      	ldr	r3, [pc, #20]	; (1d808 <appSlaveNextLegAdvState+0x30>)
   1d7f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1d7f6:	2b02      	cmp	r3, #2
   1d7f8:	d801      	bhi.n	1d7fe <appSlaveNextLegAdvState+0x26>
  {
    appSlaveLegAdvStart();
   1d7fa:	f7ff ffa7 	bl	1d74c <appSlaveLegAdvStart>
  }
}
   1d7fe:	bf00      	nop
   1d800:	3708      	adds	r7, #8
   1d802:	46bd      	mov	sp, r7
   1d804:	bd80      	pop	{r7, pc}
   1d806:	bf00      	nop
   1d808:	10005e7c 	.word	0x10005e7c

0001d80c <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   1d80c:	b580      	push	{r7, lr}
   1d80e:	b082      	sub	sp, #8
   1d810:	af00      	add	r7, sp, #0
   1d812:	6078      	str	r0, [r7, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   1d814:	687b      	ldr	r3, [r7, #4]
   1d816:	789b      	ldrb	r3, [r3, #2]
   1d818:	2b47      	cmp	r3, #71	; 0x47
   1d81a:	d103      	bne.n	1d824 <appSlaveLegAdvStop+0x18>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   1d81c:	687b      	ldr	r3, [r7, #4]
   1d81e:	791b      	ldrb	r3, [r3, #4]
   1d820:	2b00      	cmp	r3, #0
   1d822:	d00c      	beq.n	1d83e <appSlaveLegAdvStop+0x32>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   1d824:	4b08      	ldr	r3, [pc, #32]	; (1d848 <appSlaveLegAdvStop+0x3c>)
   1d826:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	d003      	beq.n	1d836 <appSlaveLegAdvStop+0x2a>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   1d82e:	6878      	ldr	r0, [r7, #4]
   1d830:	f7ff ffbe 	bl	1d7b0 <appSlaveLegAdvTypeChanged>
   1d834:	e004      	b.n	1d840 <appSlaveLegAdvStop+0x34>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   1d836:	6878      	ldr	r0, [r7, #4]
   1d838:	f7ff ffce 	bl	1d7d8 <appSlaveNextLegAdvState>
   1d83c:	e000      	b.n	1d840 <appSlaveLegAdvStop+0x34>
      return;
   1d83e:	bf00      	nop
  }
}
   1d840:	3708      	adds	r7, #8
   1d842:	46bd      	mov	sp, r7
   1d844:	bd80      	pop	{r7, pc}
   1d846:	bf00      	nop
   1d848:	10005e7c 	.word	0x10005e7c

0001d84c <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   1d84c:	b580      	push	{r7, lr}
   1d84e:	b082      	sub	sp, #8
   1d850:	af00      	add	r7, sp, #0
   1d852:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   1d854:	687b      	ldr	r3, [r7, #4]
   1d856:	789b      	ldrb	r3, [r3, #2]
   1d858:	2b27      	cmp	r3, #39	; 0x27
   1d85a:	d103      	bne.n	1d864 <appSlaveLegAdvRestart+0x18>
  {
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1d85c:	4b09      	ldr	r3, [pc, #36]	; (1d884 <appSlaveLegAdvRestart+0x38>)
   1d85e:	2203      	movs	r2, #3
   1d860:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   1d864:	4b07      	ldr	r3, [pc, #28]	; (1d884 <appSlaveLegAdvRestart+0x38>)
   1d866:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1d86a:	2b03      	cmp	r3, #3
   1d86c:	d105      	bne.n	1d87a <appSlaveLegAdvRestart+0x2e>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1d86e:	4b05      	ldr	r3, [pc, #20]	; (1d884 <appSlaveLegAdvRestart+0x38>)
   1d870:	2200      	movs	r2, #0
   1d872:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   1d876:	f7ff ff69 	bl	1d74c <appSlaveLegAdvStart>
  }
}
   1d87a:	bf00      	nop
   1d87c:	3708      	adds	r7, #8
   1d87e:	46bd      	mov	sp, r7
   1d880:	bd80      	pop	{r7, pc}
   1d882:	bf00      	nop
   1d884:	10005e7c 	.word	0x10005e7c

0001d888 <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   1d888:	b580      	push	{r7, lr}
   1d88a:	af00      	add	r7, sp, #0
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   1d88c:	4b0c      	ldr	r3, [pc, #48]	; (1d8c0 <appSlaveAdvMode+0x38>)
   1d88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d890:	2b00      	cmp	r3, #0
   1d892:	d107      	bne.n	1d8a4 <appSlaveAdvMode+0x1c>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1d894:	4b0a      	ldr	r3, [pc, #40]	; (1d8c0 <appSlaveAdvMode+0x38>)
   1d896:	4a0b      	ldr	r2, [pc, #44]	; (1d8c4 <appSlaveAdvMode+0x3c>)
   1d898:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1d89a:	4b09      	ldr	r3, [pc, #36]	; (1d8c0 <appSlaveAdvMode+0x38>)
   1d89c:	4a0a      	ldr	r2, [pc, #40]	; (1d8c8 <appSlaveAdvMode+0x40>)
   1d89e:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   1d8a0:	2301      	movs	r3, #1
   1d8a2:	e00a      	b.n	1d8ba <appSlaveAdvMode+0x32>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1d8a4:	4b06      	ldr	r3, [pc, #24]	; (1d8c0 <appSlaveAdvMode+0x38>)
   1d8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d8a8:	4a06      	ldr	r2, [pc, #24]	; (1d8c4 <appSlaveAdvMode+0x3c>)
   1d8aa:	4293      	cmp	r3, r2
   1d8ac:	d101      	bne.n	1d8b2 <appSlaveAdvMode+0x2a>
  {
    return TRUE;
   1d8ae:	2301      	movs	r3, #1
   1d8b0:	e003      	b.n	1d8ba <appSlaveAdvMode+0x32>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1d8b2:	4806      	ldr	r0, [pc, #24]	; (1d8cc <appSlaveAdvMode+0x44>)
   1d8b4:	f7fc f922 	bl	19afc <WsfTrace>

  return FALSE;
   1d8b8:	2300      	movs	r3, #0
}
   1d8ba:	4618      	mov	r0, r3
   1d8bc:	bd80      	pop	{r7, pc}
   1d8be:	bf00      	nop
   1d8c0:	10005e7c 	.word	0x10005e7c
   1d8c4:	0001d80d 	.word	0x0001d80d
   1d8c8:	0001d84d 	.word	0x0001d84d
   1d8cc:	00021d24 	.word	0x00021d24

0001d8d0 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   1d8d0:	b580      	push	{r7, lr}
   1d8d2:	b084      	sub	sp, #16
   1d8d4:	af02      	add	r7, sp, #8
   1d8d6:	4603      	mov	r3, r0
   1d8d8:	603a      	str	r2, [r7, #0]
   1d8da:	71fb      	strb	r3, [r7, #7]
   1d8dc:	460b      	mov	r3, r1
   1d8de:	71bb      	strb	r3, [r7, #6]
  if (appSlaveAdvMode())
   1d8e0:	f7ff ffd2 	bl	1d888 <appSlaveAdvMode>
   1d8e4:	4603      	mov	r3, r0
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	d00f      	beq.n	1d90a <AppAdvSetData+0x3a>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   1d8ea:	79bb      	ldrb	r3, [r7, #6]
   1d8ec:	2b1f      	cmp	r3, #31
   1d8ee:	d901      	bls.n	1d8f4 <AppAdvSetData+0x24>
    {
      len = HCI_ADV_DATA_LEN;
   1d8f0:	231f      	movs	r3, #31
   1d8f2:	71bb      	strb	r3, [r7, #6]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   1d8f4:	79bb      	ldrb	r3, [r7, #6]
   1d8f6:	b29a      	uxth	r2, r3
   1d8f8:	79f9      	ldrb	r1, [r7, #7]
   1d8fa:	231f      	movs	r3, #31
   1d8fc:	9301      	str	r3, [sp, #4]
   1d8fe:	231f      	movs	r3, #31
   1d900:	9300      	str	r3, [sp, #0]
   1d902:	683b      	ldr	r3, [r7, #0]
   1d904:	2000      	movs	r0, #0
   1d906:	f7ff fc5d 	bl	1d1c4 <appAdvSetData>
  }
}
   1d90a:	bf00      	nop
   1d90c:	3708      	adds	r7, #8
   1d90e:	46bd      	mov	sp, r7
   1d910:	bd80      	pop	{r7, pc}
	...

0001d914 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   1d914:	b580      	push	{r7, lr}
   1d916:	b088      	sub	sp, #32
   1d918:	af04      	add	r7, sp, #16
   1d91a:	4603      	mov	r3, r0
   1d91c:	71fb      	strb	r3, [r7, #7]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   1d91e:	f7ff ffb3 	bl	1d888 <appSlaveAdvMode>
   1d922:	4603      	mov	r3, r0
   1d924:	2b00      	cmp	r3, #0
   1d926:	d01a      	beq.n	1d95e <AppAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1d928:	2300      	movs	r3, #0
   1d92a:	73fb      	strb	r3, [r7, #15]
    maxEaEvents = 0;
   1d92c:	2300      	movs	r3, #0
   1d92e:	73bb      	strb	r3, [r7, #14]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1d930:	4b0d      	ldr	r3, [pc, #52]	; (1d968 <AppAdvStart+0x54>)
   1d932:	2200      	movs	r2, #0
   1d934:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1d938:	4b0c      	ldr	r3, [pc, #48]	; (1d96c <AppAdvStart+0x58>)
   1d93a:	681b      	ldr	r3, [r3, #0]
   1d93c:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   1d93e:	4b0b      	ldr	r3, [pc, #44]	; (1d96c <AppAdvStart+0x58>)
   1d940:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1d942:	4618      	mov	r0, r3
   1d944:	f107 010f 	add.w	r1, r7, #15
   1d948:	79fb      	ldrb	r3, [r7, #7]
   1d94a:	9302      	str	r3, [sp, #8]
   1d94c:	2301      	movs	r3, #1
   1d94e:	9301      	str	r3, [sp, #4]
   1d950:	f107 030e 	add.w	r3, r7, #14
   1d954:	9300      	str	r3, [sp, #0]
   1d956:	4603      	mov	r3, r0
   1d958:	2001      	movs	r0, #1
   1d95a:	f7ff fd57 	bl	1d40c <appSlaveAdvStart>
  }
}
   1d95e:	bf00      	nop
   1d960:	3710      	adds	r7, #16
   1d962:	46bd      	mov	sp, r7
   1d964:	bd80      	pop	{r7, pc}
   1d966:	bf00      	nop
   1d968:	10005e7c 	.word	0x10005e7c
   1d96c:	10005d78 	.word	0x10005d78

0001d970 <AppAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStop(void)
{
   1d970:	b580      	push	{r7, lr}
   1d972:	b082      	sub	sp, #8
   1d974:	af00      	add	r7, sp, #0
  uint8_t advHandle;

  if (appSlaveAdvMode())
   1d976:	f7ff ff87 	bl	1d888 <appSlaveAdvMode>
   1d97a:	4603      	mov	r3, r0
   1d97c:	2b00      	cmp	r3, #0
   1d97e:	d006      	beq.n	1d98e <AppAdvStop+0x1e>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1d980:	2300      	movs	r3, #0
   1d982:	71fb      	strb	r3, [r7, #7]

    appAdvStop(1, &advHandle);
   1d984:	1dfb      	adds	r3, r7, #7
   1d986:	4619      	mov	r1, r3
   1d988:	2001      	movs	r0, #1
   1d98a:	f7ff fcfd 	bl	1d388 <appAdvStop>
  }
}
   1d98e:	bf00      	nop
   1d990:	3708      	adds	r7, #8
   1d992:	46bd      	mov	sp, r7
   1d994:	bd80      	pop	{r7, pc}
	...

0001d998 <AppConnAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnAccept(uint8_t advType, uint8_t addrType, uint8_t *pAddr)
{
   1d998:	b580      	push	{r7, lr}
   1d99a:	b086      	sub	sp, #24
   1d99c:	af04      	add	r7, sp, #16
   1d99e:	4603      	mov	r3, r0
   1d9a0:	603a      	str	r2, [r7, #0]
   1d9a2:	71fb      	strb	r3, [r7, #7]
   1d9a4:	460b      	mov	r3, r1
   1d9a6:	71bb      	strb	r3, [r7, #6]
  if (appSlaveAdvMode())
   1d9a8:	f7ff ff6e 	bl	1d888 <appSlaveAdvMode>
   1d9ac:	4603      	mov	r3, r0
   1d9ae:	2b00      	cmp	r3, #0
   1d9b0:	d010      	beq.n	1d9d4 <AppConnAccept+0x3c>
  {
    appConnAccept(DM_ADV_HANDLE_DEFAULT, advType, pAppAdvCfg->advInterval[APP_ADV_STATE1],
   1d9b2:	4b0a      	ldr	r3, [pc, #40]	; (1d9dc <AppConnAccept+0x44>)
   1d9b4:	681b      	ldr	r3, [r3, #0]
   1d9b6:	88da      	ldrh	r2, [r3, #6]
                  pAppAdvCfg->advDuration[APP_ADV_STATE1], 0, addrType, pAddr);
   1d9b8:	4b08      	ldr	r3, [pc, #32]	; (1d9dc <AppConnAccept+0x44>)
   1d9ba:	681b      	ldr	r3, [r3, #0]
    appConnAccept(DM_ADV_HANDLE_DEFAULT, advType, pAppAdvCfg->advInterval[APP_ADV_STATE1],
   1d9bc:	8818      	ldrh	r0, [r3, #0]
   1d9be:	79f9      	ldrb	r1, [r7, #7]
   1d9c0:	683b      	ldr	r3, [r7, #0]
   1d9c2:	9302      	str	r3, [sp, #8]
   1d9c4:	79bb      	ldrb	r3, [r7, #6]
   1d9c6:	9301      	str	r3, [sp, #4]
   1d9c8:	2300      	movs	r3, #0
   1d9ca:	9300      	str	r3, [sp, #0]
   1d9cc:	4603      	mov	r3, r0
   1d9ce:	2000      	movs	r0, #0
   1d9d0:	f7ff fd72 	bl	1d4b8 <appConnAccept>
  }
}
   1d9d4:	bf00      	nop
   1d9d6:	3708      	adds	r7, #8
   1d9d8:	46bd      	mov	sp, r7
   1d9da:	bd80      	pop	{r7, pc}
   1d9dc:	10005d78 	.word	0x10005d78

0001d9e0 <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
   1d9e0:	b580      	push	{r7, lr}
   1d9e2:	b082      	sub	sp, #8
   1d9e4:	af00      	add	r7, sp, #0
   1d9e6:	6078      	str	r0, [r7, #4]
    //
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1d9e8:	687b      	ldr	r3, [r7, #4]
   1d9ea:	681a      	ldr	r2, [r3, #0]
   1d9ec:	4b08      	ldr	r3, [pc, #32]	; (1da10 <am_devices_button_init+0x30>)
   1d9ee:	6819      	ldr	r1, [r3, #0]
   1d9f0:	4610      	mov	r0, r2
   1d9f2:	f002 f93d 	bl	1fc70 <am_hal_gpio_pinconfig>


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
   1d9f6:	687b      	ldr	r3, [r7, #4]
   1d9f8:	2200      	movs	r2, #0
   1d9fa:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
   1d9fc:	687b      	ldr	r3, [r7, #4]
   1d9fe:	2200      	movs	r2, #0
   1da00:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
   1da02:	687b      	ldr	r3, [r7, #4]
   1da04:	2200      	movs	r2, #0
   1da06:	735a      	strb	r2, [r3, #13]
}
   1da08:	bf00      	nop
   1da0a:	3708      	adds	r7, #8
   1da0c:	46bd      	mov	sp, r7
   1da0e:	bd80      	pop	{r7, pc}
   1da10:	000247ac 	.word	0x000247ac

0001da14 <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   1da14:	b580      	push	{r7, lr}
   1da16:	b084      	sub	sp, #16
   1da18:	af00      	add	r7, sp, #0
   1da1a:	6078      	str	r0, [r7, #4]
   1da1c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   1da1e:	2300      	movs	r3, #0
   1da20:	60fb      	str	r3, [r7, #12]
   1da22:	e009      	b.n	1da38 <am_devices_button_array_init+0x24>
    {
        am_devices_button_init(psButtons + i);
   1da24:	68fb      	ldr	r3, [r7, #12]
   1da26:	011b      	lsls	r3, r3, #4
   1da28:	687a      	ldr	r2, [r7, #4]
   1da2a:	4413      	add	r3, r2
   1da2c:	4618      	mov	r0, r3
   1da2e:	f7ff ffd7 	bl	1d9e0 <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
   1da32:	68fb      	ldr	r3, [r7, #12]
   1da34:	3301      	adds	r3, #1
   1da36:	60fb      	str	r3, [r7, #12]
   1da38:	68fa      	ldr	r2, [r7, #12]
   1da3a:	683b      	ldr	r3, [r7, #0]
   1da3c:	429a      	cmp	r2, r3
   1da3e:	d3f1      	bcc.n	1da24 <am_devices_button_array_init+0x10>
    }
}
   1da40:	bf00      	nop
   1da42:	3710      	adds	r7, #16
   1da44:	46bd      	mov	sp, r7
   1da46:	bd80      	pop	{r7, pc}

0001da48 <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
   1da48:	b580      	push	{r7, lr}
   1da4a:	b084      	sub	sp, #16
   1da4c:	af00      	add	r7, sp, #0
   1da4e:	6078      	str	r0, [r7, #4]

    //
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   1da50:	687b      	ldr	r3, [r7, #4]
   1da52:	681a      	ldr	r2, [r3, #0]
   1da54:	4b1f      	ldr	r3, [pc, #124]	; (1dad4 <am_devices_button_tick+0x8c>)
   1da56:	6819      	ldr	r1, [r3, #0]
   1da58:	4610      	mov	r0, r2
   1da5a:	f002 f909 	bl	1fc70 <am_hal_gpio_pinconfig>
    //
    // Read the pin state. If the pin is in its normal (unpressed) state, set
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   1da5e:	687b      	ldr	r3, [r7, #4]
   1da60:	681b      	ldr	r3, [r3, #0]
   1da62:	f107 0208 	add.w	r2, r7, #8
   1da66:	2100      	movs	r1, #0
   1da68:	4618      	mov	r0, r3
   1da6a:	f002 fa3d 	bl	1fee8 <am_hal_gpio_state_read>
#endif // AM_APOLLO3_GPIO

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   1da6e:	687b      	ldr	r3, [r7, #4]
   1da70:	685a      	ldr	r2, [r3, #4]
   1da72:	68bb      	ldr	r3, [r7, #8]
   1da74:	429a      	cmp	r2, r3
   1da76:	bf14      	ite	ne
   1da78:	2301      	movne	r3, #1
   1da7a:	2300      	moveq	r3, #0
   1da7c:	73fb      	strb	r3, [r7, #15]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
   1da7e:	687b      	ldr	r3, [r7, #4]
   1da80:	7b1b      	ldrb	r3, [r3, #12]
   1da82:	7bfa      	ldrb	r2, [r7, #15]
   1da84:	429a      	cmp	r2, r3
   1da86:	d005      	beq.n	1da94 <am_devices_button_tick+0x4c>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
   1da88:	687b      	ldr	r3, [r7, #4]
   1da8a:	689b      	ldr	r3, [r3, #8]
   1da8c:	1c5a      	adds	r2, r3, #1
   1da8e:	687b      	ldr	r3, [r7, #4]
   1da90:	609a      	str	r2, [r3, #8]
   1da92:	e002      	b.n	1da9a <am_devices_button_tick+0x52>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
   1da94:	687b      	ldr	r3, [r7, #4]
   1da96:	2200      	movs	r2, #0
   1da98:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
   1da9a:	687b      	ldr	r3, [r7, #4]
   1da9c:	689b      	ldr	r3, [r3, #8]
   1da9e:	2b03      	cmp	r3, #3
   1daa0:	d909      	bls.n	1dab6 <am_devices_button_tick+0x6e>
    {
        psButton->bPressed = bRawButtonPressed;
   1daa2:	687b      	ldr	r3, [r7, #4]
   1daa4:	7bfa      	ldrb	r2, [r7, #15]
   1daa6:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
   1daa8:	687b      	ldr	r3, [r7, #4]
   1daaa:	2201      	movs	r2, #1
   1daac:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
   1daae:	687b      	ldr	r3, [r7, #4]
   1dab0:	2200      	movs	r2, #0
   1dab2:	609a      	str	r2, [r3, #8]
   1dab4:	e002      	b.n	1dabc <am_devices_button_tick+0x74>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
   1dab6:	687b      	ldr	r3, [r7, #4]
   1dab8:	2200      	movs	r2, #0
   1daba:	735a      	strb	r2, [r3, #13]

    //
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   1dabc:	687b      	ldr	r3, [r7, #4]
   1dabe:	681a      	ldr	r2, [r3, #0]
   1dac0:	4b05      	ldr	r3, [pc, #20]	; (1dad8 <am_devices_button_tick+0x90>)
   1dac2:	6819      	ldr	r1, [r3, #0]
   1dac4:	4610      	mov	r0, r2
   1dac6:	f002 f8d3 	bl	1fc70 <am_hal_gpio_pinconfig>
#else // AM_APOLLO3_GPIO
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
#endif // AM_APOLLO3_GPIO
}
   1daca:	bf00      	nop
   1dacc:	3710      	adds	r7, #16
   1dace:	46bd      	mov	sp, r7
   1dad0:	bd80      	pop	{r7, pc}
   1dad2:	bf00      	nop
   1dad4:	00024678 	.word	0x00024678
   1dad8:	000247ac 	.word	0x000247ac

0001dadc <am_devices_button_array_tick>:
//
//*****************************************************************************
void
am_devices_button_array_tick(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   1dadc:	b580      	push	{r7, lr}
   1dade:	b084      	sub	sp, #16
   1dae0:	af00      	add	r7, sp, #0
   1dae2:	6078      	str	r0, [r7, #4]
   1dae4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   1dae6:	2300      	movs	r3, #0
   1dae8:	60fb      	str	r3, [r7, #12]
   1daea:	e009      	b.n	1db00 <am_devices_button_array_tick+0x24>
    {
        am_devices_button_tick(psButtons + i);
   1daec:	68fb      	ldr	r3, [r7, #12]
   1daee:	011b      	lsls	r3, r3, #4
   1daf0:	687a      	ldr	r2, [r7, #4]
   1daf2:	4413      	add	r3, r2
   1daf4:	4618      	mov	r0, r3
   1daf6:	f7ff ffa7 	bl	1da48 <am_devices_button_tick>
    for ( i = 0; i < ui32NumButtons; i++ )
   1dafa:	68fb      	ldr	r3, [r7, #12]
   1dafc:	3301      	adds	r3, #1
   1dafe:	60fb      	str	r3, [r7, #12]
   1db00:	68fa      	ldr	r2, [r7, #12]
   1db02:	683b      	ldr	r3, [r7, #0]
   1db04:	429a      	cmp	r2, r3
   1db06:	d3f1      	bcc.n	1daec <am_devices_button_array_tick+0x10>
    }
}
   1db08:	bf00      	nop
   1db0a:	3710      	adds	r7, #16
   1db0c:	46bd      	mov	sp, r7
   1db0e:	bd80      	pop	{r7, pc}

0001db10 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   1db10:	4811      	ldr	r0, [pc, #68]	; (1db58 <zero_loop+0x12>)
   1db12:	4912      	ldr	r1, [pc, #72]	; (1db5c <zero_loop+0x16>)
   1db14:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   1db16:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   1db1a:	4811      	ldr	r0, [pc, #68]	; (1db60 <zero_loop+0x1a>)
   1db1c:	6801      	ldr	r1, [r0, #0]
   1db1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1db22:	6001      	str	r1, [r0, #0]
   1db24:	f3bf 8f4f 	dsb	sy
   1db28:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   1db2c:	480d      	ldr	r0, [pc, #52]	; (1db64 <zero_loop+0x1e>)
   1db2e:	490e      	ldr	r1, [pc, #56]	; (1db68 <zero_loop+0x22>)
   1db30:	4a0e      	ldr	r2, [pc, #56]	; (1db6c <zero_loop+0x26>)

0001db32 <copy_loop>:
   1db32:	f850 3b04 	ldr.w	r3, [r0], #4
   1db36:	f841 3b04 	str.w	r3, [r1], #4
   1db3a:	4291      	cmp	r1, r2
   1db3c:	dbf9      	blt.n	1db32 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   1db3e:	480c      	ldr	r0, [pc, #48]	; (1db70 <zero_loop+0x2a>)
   1db40:	490c      	ldr	r1, [pc, #48]	; (1db74 <zero_loop+0x2e>)
   1db42:	f04f 0200 	mov.w	r2, #0

0001db46 <zero_loop>:
   1db46:	4288      	cmp	r0, r1
   1db48:	bfb8      	it	lt
   1db4a:	f840 2b04 	strlt.w	r2, [r0], #4
   1db4e:	dbfa      	blt.n	1db46 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   1db50:	f7fb fe34 	bl	197bc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   1db54:	be00      	bkpt	0x0000
}
   1db56:	bf00      	nop
   1db58:	e000ed08 	.word	0xe000ed08
   1db5c:	0000c000 	.word	0x0000c000
   1db60:	e000ed88 	.word	0xe000ed88
   1db64:	0002505c 	.word	0x0002505c
   1db68:	10002b00 	.word	0x10002b00
   1db6c:	10003778 	.word	0x10003778
   1db70:	10003778 	.word	0x10003778
   1db74:	10005f90 	.word	0x10005f90

0001db78 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   1db78:	b480      	push	{r7}
   1db7a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1db7c:	e7fe      	b.n	1db7c <NMI_Handler+0x4>

0001db7e <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   1db7e:	b480      	push	{r7}
   1db80:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1db82:	e7fe      	b.n	1db82 <BusFault_Handler+0x4>

0001db84 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   1db84:	b480      	push	{r7}
   1db86:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1db88:	e7fe      	b.n	1db88 <DebugMon_Handler+0x4>
	...

0001db8c <am_hal_ble_blocking_transfer.part.7>:
   1db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db90:	4dcb      	ldr	r5, [pc, #812]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1db92:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   1db96:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1db9a:	f36f 13c7 	bfc	r3, #7, #1
   1db9e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1dba2:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1dba6:	f36f 2308 	bfc	r3, #8, #1
   1dbaa:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1dbae:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1dbb2:	f36f 0300 	bfc	r3, #0, #1
   1dbb6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1dbba:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1dbbe:	f36f 0341 	bfc	r3, #1, #1
   1dbc2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1dbc6:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   1dbca:	f043 0301 	orr.w	r3, r3, #1
   1dbce:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   1dbd2:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   1dbd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1dbda:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   1dbde:	7a8b      	ldrb	r3, [r1, #10]
   1dbe0:	2b01      	cmp	r3, #1
   1dbe2:	b085      	sub	sp, #20
   1dbe4:	460e      	mov	r6, r1
   1dbe6:	4604      	mov	r4, r0
   1dbe8:	d00a      	beq.n	1dc00 <am_hal_ble_blocking_transfer.part.7+0x74>
   1dbea:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1dbee:	061f      	lsls	r7, r3, #24
   1dbf0:	f100 8123 	bmi.w	1de3a <am_hal_ble_blocking_transfer.part.7+0x2ae>
   1dbf4:	48b3      	ldr	r0, [pc, #716]	; (1dec4 <am_hal_ble_blocking_transfer.part.7+0x338>)
   1dbf6:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   1dbfa:	b005      	add	sp, #20
   1dbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc00:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1dc04:	2b00      	cmp	r3, #0
   1dc06:	f000 80e6 	beq.w	1ddd6 <am_hal_ble_blocking_transfer.part.7+0x24a>
   1dc0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1dc0e:	2b00      	cmp	r3, #0
   1dc10:	f000 81f2 	beq.w	1dff8 <am_hal_ble_blocking_transfer.part.7+0x46c>
   1dc14:	2200      	movs	r2, #0
   1dc16:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   1dc1a:	b1a3      	cbz	r3, 1dc46 <am_hal_ble_blocking_transfer.part.7+0xba>
   1dc1c:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>
   1dc20:	f240 152d 	movw	r5, #301	; 0x12d
   1dc24:	2700      	movs	r7, #0
   1dc26:	e006      	b.n	1dc36 <am_hal_ble_blocking_transfer.part.7+0xaa>
   1dc28:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
   1dc2c:	20a0      	movs	r0, #160	; 0xa0
   1dc2e:	f001 ffcb 	bl	1fbc8 <am_hal_flash_delay>
   1dc32:	3d01      	subs	r5, #1
   1dc34:	d007      	beq.n	1dc46 <am_hal_ble_blocking_transfer.part.7+0xba>
   1dc36:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1dc3a:	2b00      	cmp	r3, #0
   1dc3c:	d1f4      	bne.n	1dc28 <am_hal_ble_blocking_transfer.part.7+0x9c>
   1dc3e:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   1dc42:	0718      	lsls	r0, r3, #28
   1dc44:	d4f2      	bmi.n	1dc2c <am_hal_ble_blocking_transfer.part.7+0xa0>
   1dc46:	4a9e      	ldr	r2, [pc, #632]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1dc48:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   1dc4c:	f043 0302 	orr.w	r3, r3, #2
   1dc50:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   1dc54:	2050      	movs	r0, #80	; 0x50
   1dc56:	f001 ffb7 	bl	1fbc8 <am_hal_flash_delay>
   1dc5a:	6823      	ldr	r3, [r4, #0]
   1dc5c:	4a9a      	ldr	r2, [pc, #616]	; (1dec8 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1dc5e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dc62:	4293      	cmp	r3, r2
   1dc64:	f000 81d5 	beq.w	1e012 <am_hal_ble_blocking_transfer.part.7+0x486>
   1dc68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1dc6c:	f8df 9250 	ldr.w	r9, [pc, #592]	; 1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>
   1dc70:	2500      	movs	r5, #0
   1dc72:	46aa      	mov	sl, r5
   1dc74:	2b00      	cmp	r3, #0
   1dc76:	f040 80c6 	bne.w	1de06 <am_hal_ble_blocking_transfer.part.7+0x27a>
   1dc7a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1dc7e:	2b00      	cmp	r3, #0
   1dc80:	f040 80ac 	bne.w	1dddc <am_hal_ble_blocking_transfer.part.7+0x250>
   1dc84:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   1dc88:	0719      	lsls	r1, r3, #28
   1dc8a:	f140 80ac 	bpl.w	1dde6 <am_hal_ble_blocking_transfer.part.7+0x25a>
   1dc8e:	f002 f9a5 	bl	1ffdc <am_hal_interrupt_master_disable>
   1dc92:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   1dc96:	9002      	str	r0, [sp, #8]
   1dc98:	9802      	ldr	r0, [sp, #8]
   1dc9a:	2f00      	cmp	r7, #0
   1dc9c:	f040 80b6 	bne.w	1de0c <am_hal_ble_blocking_transfer.part.7+0x280>
   1dca0:	2301      	movs	r3, #1
   1dca2:	6463      	str	r3, [r4, #68]	; 0x44
   1dca4:	f002 f99e 	bl	1ffe4 <am_hal_interrupt_master_set>
   1dca8:	4b85      	ldr	r3, [pc, #532]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1dcaa:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1dcae:	f367 0241 	bfi	r2, r7, #1, #1
   1dcb2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1dcb6:	7b33      	ldrb	r3, [r6, #12]
   1dcb8:	2b00      	cmp	r3, #0
   1dcba:	f000 80cb 	beq.w	1de54 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   1dcbe:	2301      	movs	r3, #1
   1dcc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   1dcc4:	f104 070c 	add.w	r7, r4, #12
   1dcc8:	6833      	ldr	r3, [r6, #0]
   1dcca:	6872      	ldr	r2, [r6, #4]
   1dccc:	68b0      	ldr	r0, [r6, #8]
   1dcce:	68f1      	ldr	r1, [r6, #12]
   1dcd0:	60e3      	str	r3, [r4, #12]
   1dcd2:	607a      	str	r2, [r7, #4]
   1dcd4:	60b8      	str	r0, [r7, #8]
   1dcd6:	60f9      	str	r1, [r7, #12]
   1dcd8:	6933      	ldr	r3, [r6, #16]
   1dcda:	6972      	ldr	r2, [r6, #20]
   1dcdc:	617a      	str	r2, [r7, #20]
   1dcde:	613b      	str	r3, [r7, #16]
   1dce0:	f002 f97c 	bl	1ffdc <am_hal_interrupt_master_disable>
   1dce4:	9001      	str	r0, [sp, #4]
   1dce6:	6823      	ldr	r3, [r4, #0]
   1dce8:	4a77      	ldr	r2, [pc, #476]	; (1dec8 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1dcea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dcee:	4293      	cmp	r3, r2
   1dcf0:	f000 8197 	beq.w	1e022 <am_hal_ble_blocking_transfer.part.7+0x496>
   1dcf4:	7ab3      	ldrb	r3, [r6, #10]
   1dcf6:	2b01      	cmp	r3, #1
   1dcf8:	f000 8185 	beq.w	1e006 <am_hal_ble_blocking_transfer.part.7+0x47a>
   1dcfc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   1dcfe:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   1dd02:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 1dec8 <am_hal_ble_blocking_transfer.part.7+0x33c>
   1dd06:	496e      	ldr	r1, [pc, #440]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1dd08:	f04f 0e00 	mov.w	lr, #0
   1dd0c:	45a9      	cmp	r9, r5
   1dd0e:	d926      	bls.n	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1dd10:	6823      	ldr	r3, [r4, #0]
   1dd12:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dd16:	4563      	cmp	r3, ip
   1dd18:	d1f8      	bne.n	1dd0c <am_hal_ble_blocking_transfer.part.7+0x180>
   1dd1a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   1dd1e:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1dd22:	2803      	cmp	r0, #3
   1dd24:	d9f2      	bls.n	1dd0c <am_hal_ble_blocking_transfer.part.7+0x180>
   1dd26:	4581      	cmp	r9, r0
   1dd28:	bf94      	ite	ls
   1dd2a:	ebc5 0009 	rsbls	r0, r5, r9
   1dd2e:	f020 0003 	bichi.w	r0, r0, #3
   1dd32:	68e2      	ldr	r2, [r4, #12]
   1dd34:	f025 0303 	bic.w	r3, r5, #3
   1dd38:	b168      	cbz	r0, 1dd56 <am_hal_ble_blocking_transfer.part.7+0x1ca>
   1dd3a:	441a      	add	r2, r3
   1dd3c:	2300      	movs	r3, #0
   1dd3e:	3304      	adds	r3, #4
   1dd40:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   1dd44:	f842 5b04 	str.w	r5, [r2], #4
   1dd48:	4283      	cmp	r3, r0
   1dd4a:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   1dd4e:	d3f6      	bcc.n	1dd3e <am_hal_ble_blocking_transfer.part.7+0x1b2>
   1dd50:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   1dd52:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   1dd56:	4405      	add	r5, r0
   1dd58:	45a9      	cmp	r9, r5
   1dd5a:	63e5      	str	r5, [r4, #60]	; 0x3c
   1dd5c:	d8d8      	bhi.n	1dd10 <am_hal_ble_blocking_transfer.part.7+0x184>
   1dd5e:	9801      	ldr	r0, [sp, #4]
   1dd60:	f002 f940 	bl	1ffe4 <am_hal_interrupt_master_set>
   1dd64:	4b56      	ldr	r3, [pc, #344]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1dd66:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   1dd6a:	07d2      	lsls	r2, r2, #31
   1dd6c:	d40d      	bmi.n	1dd8a <am_hal_ble_blocking_transfer.part.7+0x1fe>
   1dd6e:	4699      	mov	r9, r3
   1dd70:	f242 7510 	movw	r5, #10000	; 0x2710
   1dd74:	e002      	b.n	1dd7c <am_hal_ble_blocking_transfer.part.7+0x1f0>
   1dd76:	3d01      	subs	r5, #1
   1dd78:	f000 8149 	beq.w	1e00e <am_hal_ble_blocking_transfer.part.7+0x482>
   1dd7c:	2010      	movs	r0, #16
   1dd7e:	f001 ff23 	bl	1fbc8 <am_hal_flash_delay>
   1dd82:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1dd86:	07db      	lsls	r3, r3, #31
   1dd88:	d5f5      	bpl.n	1dd76 <am_hal_ble_blocking_transfer.part.7+0x1ea>
   1dd8a:	4a4d      	ldr	r2, [pc, #308]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1dd8c:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   1dd90:	f043 0301 	orr.w	r3, r3, #1
   1dd94:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   1dd98:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   1dd9c:	2300      	movs	r3, #0
   1dd9e:	f041 0102 	orr.w	r1, r1, #2
   1dda2:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   1dda6:	603b      	str	r3, [r7, #0]
   1dda8:	607b      	str	r3, [r7, #4]
   1ddaa:	60bb      	str	r3, [r7, #8]
   1ddac:	60fb      	str	r3, [r7, #12]
   1ddae:	613b      	str	r3, [r7, #16]
   1ddb0:	617b      	str	r3, [r7, #20]
   1ddb2:	63e3      	str	r3, [r4, #60]	; 0x3c
   1ddb4:	7ab3      	ldrb	r3, [r6, #10]
   1ddb6:	2b01      	cmp	r3, #1
   1ddb8:	f000 8113 	beq.w	1dfe2 <am_hal_ble_blocking_transfer.part.7+0x456>
   1ddbc:	2b02      	cmp	r3, #2
   1ddbe:	f000 8107 	beq.w	1dfd0 <am_hal_ble_blocking_transfer.part.7+0x444>
   1ddc2:	2300      	movs	r3, #0
   1ddc4:	4a3e      	ldr	r2, [pc, #248]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1ddc6:	4618      	mov	r0, r3
   1ddc8:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   1ddcc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   1ddd0:	b005      	add	sp, #20
   1ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddd6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1ddda:	e71e      	b.n	1dc1a <am_hal_ble_blocking_transfer.part.7+0x8e>
   1dddc:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1dde0:	05da      	lsls	r2, r3, #23
   1dde2:	f53f af54 	bmi.w	1dc8e <am_hal_ble_blocking_transfer.part.7+0x102>
   1dde6:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   1ddea:	d012      	beq.n	1de12 <am_hal_ble_blocking_transfer.part.7+0x286>
   1ddec:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   1ddf0:	061b      	lsls	r3, r3, #24
   1ddf2:	d40e      	bmi.n	1de12 <am_hal_ble_blocking_transfer.part.7+0x286>
   1ddf4:	20a0      	movs	r0, #160	; 0xa0
   1ddf6:	f001 fee7 	bl	1fbc8 <am_hal_flash_delay>
   1ddfa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1ddfe:	3501      	adds	r5, #1
   1de00:	2b00      	cmp	r3, #0
   1de02:	f43f af3a 	beq.w	1dc7a <am_hal_ble_blocking_transfer.part.7+0xee>
   1de06:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   1de0a:	e740      	b.n	1dc8e <am_hal_ble_blocking_transfer.part.7+0x102>
   1de0c:	f002 f8ea 	bl	1ffe4 <am_hal_interrupt_master_set>
   1de10:	e7f0      	b.n	1ddf4 <am_hal_ble_blocking_transfer.part.7+0x268>
   1de12:	6823      	ldr	r3, [r4, #0]
   1de14:	4a2c      	ldr	r2, [pc, #176]	; (1dec8 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1de16:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1de1a:	4293      	cmp	r3, r2
   1de1c:	f000 811e 	beq.w	1e05c <am_hal_ble_blocking_transfer.part.7+0x4d0>
   1de20:	4b27      	ldr	r3, [pc, #156]	; (1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1de22:	482a      	ldr	r0, [pc, #168]	; (1decc <am_hal_ble_blocking_transfer.part.7+0x340>)
   1de24:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1de28:	f36f 0241 	bfc	r2, #1, #1
   1de2c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1de30:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   1de34:	b005      	add	sp, #20
   1de36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de3a:	f002 f8cf 	bl	1ffdc <am_hal_interrupt_master_disable>
   1de3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1de42:	9003      	str	r0, [sp, #12]
   1de44:	9803      	ldr	r0, [sp, #12]
   1de46:	2b00      	cmp	r3, #0
   1de48:	d157      	bne.n	1defa <am_hal_ble_blocking_transfer.part.7+0x36e>
   1de4a:	2301      	movs	r3, #1
   1de4c:	6463      	str	r3, [r4, #68]	; 0x44
   1de4e:	f002 f8c9 	bl	1ffe4 <am_hal_interrupt_master_set>
   1de52:	e730      	b.n	1dcb6 <am_hal_ble_blocking_transfer.part.7+0x12a>
   1de54:	f104 070c 	add.w	r7, r4, #12
   1de58:	6833      	ldr	r3, [r6, #0]
   1de5a:	6872      	ldr	r2, [r6, #4]
   1de5c:	68b0      	ldr	r0, [r6, #8]
   1de5e:	68f1      	ldr	r1, [r6, #12]
   1de60:	60e3      	str	r3, [r4, #12]
   1de62:	607a      	str	r2, [r7, #4]
   1de64:	60b8      	str	r0, [r7, #8]
   1de66:	60f9      	str	r1, [r7, #12]
   1de68:	6933      	ldr	r3, [r6, #16]
   1de6a:	6972      	ldr	r2, [r6, #20]
   1de6c:	617a      	str	r2, [r7, #20]
   1de6e:	613b      	str	r3, [r7, #16]
   1de70:	f002 f8b4 	bl	1ffdc <am_hal_interrupt_master_disable>
   1de74:	9001      	str	r0, [sp, #4]
   1de76:	2c00      	cmp	r4, #0
   1de78:	f47f af35 	bne.w	1dce6 <am_hal_ble_blocking_transfer.part.7+0x15a>
   1de7c:	7ab3      	ldrb	r3, [r6, #10]
   1de7e:	2b01      	cmp	r3, #1
   1de80:	f47f af3c 	bne.w	1dcfc <am_hal_ble_blocking_transfer.part.7+0x170>
   1de84:	6823      	ldr	r3, [r4, #0]
   1de86:	4a10      	ldr	r2, [pc, #64]	; (1dec8 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1de88:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   1de8c:	68e5      	ldr	r5, [r4, #12]
   1de8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1de92:	4293      	cmp	r3, r2
   1de94:	d06b      	beq.n	1df6e <am_hal_ble_blocking_transfer.part.7+0x3e2>
   1de96:	f1bb 0f00 	cmp.w	fp, #0
   1de9a:	f43f af60 	beq.w	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1de9e:	f8df a020 	ldr.w	sl, [pc, #32]	; 1dec0 <am_hal_ble_blocking_transfer.part.7+0x334>
   1dea2:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1dea6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1deaa:	2b03      	cmp	r3, #3
   1deac:	d833      	bhi.n	1df16 <am_hal_ble_blocking_transfer.part.7+0x38a>
   1deae:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   1deb2:	07d9      	lsls	r1, r3, #31
   1deb4:	f53f af53 	bmi.w	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1deb8:	f8df 9014 	ldr.w	r9, [pc, #20]	; 1ded0 <am_hal_ble_blocking_transfer.part.7+0x344>
   1debc:	e013      	b.n	1dee6 <am_hal_ble_blocking_transfer.part.7+0x35a>
   1debe:	bf00      	nop
   1dec0:	5000c000 	.word	0x5000c000
   1dec4:	08000001 	.word	0x08000001
   1dec8:	01775230 	.word	0x01775230
   1decc:	08000002 	.word	0x08000002
   1ded0:	0007a120 	.word	0x0007a120
   1ded4:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   1ded8:	07d8      	lsls	r0, r3, #31
   1deda:	f53f af40 	bmi.w	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1dede:	f1b9 0901 	subs.w	r9, r9, #1
   1dee2:	f43f af3c 	beq.w	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1dee6:	2010      	movs	r0, #16
   1dee8:	f001 fe6e 	bl	1fbc8 <am_hal_flash_delay>
   1deec:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1def0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1def4:	2b03      	cmp	r3, #3
   1def6:	d9ed      	bls.n	1ded4 <am_hal_ble_blocking_transfer.part.7+0x348>
   1def8:	e00d      	b.n	1df16 <am_hal_ble_blocking_transfer.part.7+0x38a>
   1defa:	f002 f873 	bl	1ffe4 <am_hal_interrupt_master_set>
   1defe:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   1df02:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1df06:	e678      	b.n	1dbfa <am_hal_ble_blocking_transfer.part.7+0x6e>
   1df08:	2b03      	cmp	r3, #3
   1df0a:	f240 80b8 	bls.w	1e07e <am_hal_ble_blocking_transfer.part.7+0x4f2>
   1df0e:	f1bb 0f00 	cmp.w	fp, #0
   1df12:	f43f af24 	beq.w	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1df16:	f855 2b04 	ldr.w	r2, [r5], #4
   1df1a:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   1df1e:	f1bb 0f03 	cmp.w	fp, #3
   1df22:	f1a3 0304 	sub.w	r3, r3, #4
   1df26:	f1ab 0b04 	sub.w	fp, fp, #4
   1df2a:	f67f af18 	bls.w	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1df2e:	e7eb      	b.n	1df08 <am_hal_ble_blocking_transfer.part.7+0x37c>
   1df30:	2000      	movs	r0, #0
   1df32:	4602      	mov	r2, r0
   1df34:	f896 c00c 	ldrb.w	ip, [r6, #12]
   1df38:	f896 e00a 	ldrb.w	lr, [r6, #10]
   1df3c:	8935      	ldrh	r5, [r6, #8]
   1df3e:	4952      	ldr	r1, [pc, #328]	; (1e088 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   1df40:	015b      	lsls	r3, r3, #5
   1df42:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1df46:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   1df4a:	022d      	lsls	r5, r5, #8
   1df4c:	4029      	ands	r1, r5
   1df4e:	ea4e 0303 	orr.w	r3, lr, r3
   1df52:	430b      	orrs	r3, r1
   1df54:	494d      	ldr	r1, [pc, #308]	; (1e08c <am_hal_ble_blocking_transfer.part.7+0x500>)
   1df56:	4313      	orrs	r3, r2
   1df58:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   1df5c:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   1df60:	7ab3      	ldrb	r3, [r6, #10]
   1df62:	2b01      	cmp	r3, #1
   1df64:	f47f aeca 	bne.w	1dcfc <am_hal_ble_blocking_transfer.part.7+0x170>
   1df68:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   1df6c:	68e5      	ldr	r5, [r4, #12]
   1df6e:	79f2      	ldrb	r2, [r6, #7]
   1df70:	2a03      	cmp	r2, #3
   1df72:	d890      	bhi.n	1de96 <am_hal_ble_blocking_transfer.part.7+0x30a>
   1df74:	e8df f002 	tbb	[pc, r2]
   1df78:	1e242802 	.word	0x1e242802
   1df7c:	2100      	movs	r1, #0
   1df7e:	460b      	mov	r3, r1
   1df80:	f896 e00c 	ldrb.w	lr, [r6, #12]
   1df84:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   1df88:	483f      	ldr	r0, [pc, #252]	; (1e088 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   1df8a:	0152      	lsls	r2, r2, #5
   1df8c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   1df90:	f002 0260 	and.w	r2, r2, #96	; 0x60
   1df94:	f04e 0e01 	orr.w	lr, lr, #1
   1df98:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   1df9c:	ea0c 0000 	and.w	r0, ip, r0
   1dfa0:	ea4e 0202 	orr.w	r2, lr, r2
   1dfa4:	4302      	orrs	r2, r0
   1dfa6:	4839      	ldr	r0, [pc, #228]	; (1e08c <am_hal_ble_blocking_transfer.part.7+0x500>)
   1dfa8:	4313      	orrs	r3, r2
   1dfaa:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   1dfae:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   1dfb2:	e770      	b.n	1de96 <am_hal_ble_blocking_transfer.part.7+0x30a>
   1dfb4:	88b1      	ldrh	r1, [r6, #4]
   1dfb6:	79b3      	ldrb	r3, [r6, #6]
   1dfb8:	ba49      	rev16	r1, r1
   1dfba:	b289      	uxth	r1, r1
   1dfbc:	061b      	lsls	r3, r3, #24
   1dfbe:	e7df      	b.n	1df80 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   1dfc0:	7973      	ldrb	r3, [r6, #5]
   1dfc2:	7931      	ldrb	r1, [r6, #4]
   1dfc4:	061b      	lsls	r3, r3, #24
   1dfc6:	e7db      	b.n	1df80 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   1dfc8:	7933      	ldrb	r3, [r6, #4]
   1dfca:	2100      	movs	r1, #0
   1dfcc:	061b      	lsls	r3, r3, #24
   1dfce:	e7d7      	b.n	1df80 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   1dfd0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1dfd4:	2b00      	cmp	r3, #0
   1dfd6:	f43f aef4 	beq.w	1ddc2 <am_hal_ble_blocking_transfer.part.7+0x236>
   1dfda:	2300      	movs	r3, #0
   1dfdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1dfe0:	e6ef      	b.n	1ddc2 <am_hal_ble_blocking_transfer.part.7+0x236>
   1dfe2:	6823      	ldr	r3, [r4, #0]
   1dfe4:	492a      	ldr	r1, [pc, #168]	; (1e090 <am_hal_ble_blocking_transfer.part.7+0x504>)
   1dfe6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dfea:	428b      	cmp	r3, r1
   1dfec:	d03f      	beq.n	1e06e <am_hal_ble_blocking_transfer.part.7+0x4e2>
   1dfee:	2301      	movs	r3, #1
   1dff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1dff4:	7ab3      	ldrb	r3, [r6, #10]
   1dff6:	e6e1      	b.n	1ddbc <am_hal_ble_blocking_transfer.part.7+0x230>
   1dff8:	f64b 3080 	movw	r0, #48000	; 0xbb80
   1dffc:	f001 fde4 	bl	1fbc8 <am_hal_flash_delay>
   1e000:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1e004:	e606      	b.n	1dc14 <am_hal_ble_blocking_transfer.part.7+0x88>
   1e006:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   1e00a:	68e5      	ldr	r5, [r4, #12]
   1e00c:	e743      	b.n	1de96 <am_hal_ble_blocking_transfer.part.7+0x30a>
   1e00e:	4821      	ldr	r0, [pc, #132]	; (1e094 <am_hal_ble_blocking_transfer.part.7+0x508>)
   1e010:	e5f3      	b.n	1dbfa <am_hal_ble_blocking_transfer.part.7+0x6e>
   1e012:	4a1e      	ldr	r2, [pc, #120]	; (1e08c <am_hal_ble_blocking_transfer.part.7+0x500>)
   1e014:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   1e018:	f043 030c 	orr.w	r3, r3, #12
   1e01c:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   1e020:	e622      	b.n	1dc68 <am_hal_ble_blocking_transfer.part.7+0xdc>
   1e022:	79f3      	ldrb	r3, [r6, #7]
   1e024:	2b03      	cmp	r3, #3
   1e026:	f63f af29 	bhi.w	1de7c <am_hal_ble_blocking_transfer.part.7+0x2f0>
   1e02a:	a201      	add	r2, pc, #4	; (adr r2, 1e030 <am_hal_ble_blocking_transfer.part.7+0x4a4>)
   1e02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e030:	0001df31 	.word	0x0001df31
   1e034:	0001e055 	.word	0x0001e055
   1e038:	0001e04d 	.word	0x0001e04d
   1e03c:	0001e041 	.word	0x0001e041
   1e040:	88b0      	ldrh	r0, [r6, #4]
   1e042:	79b2      	ldrb	r2, [r6, #6]
   1e044:	ba40      	rev16	r0, r0
   1e046:	b280      	uxth	r0, r0
   1e048:	0612      	lsls	r2, r2, #24
   1e04a:	e773      	b.n	1df34 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   1e04c:	7972      	ldrb	r2, [r6, #5]
   1e04e:	7930      	ldrb	r0, [r6, #4]
   1e050:	0612      	lsls	r2, r2, #24
   1e052:	e76f      	b.n	1df34 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   1e054:	7932      	ldrb	r2, [r6, #4]
   1e056:	2000      	movs	r0, #0
   1e058:	0612      	lsls	r2, r2, #24
   1e05a:	e76b      	b.n	1df34 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   1e05c:	4b0b      	ldr	r3, [pc, #44]	; (1e08c <am_hal_ble_blocking_transfer.part.7+0x500>)
   1e05e:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1e062:	2102      	movs	r1, #2
   1e064:	f361 0283 	bfi	r2, r1, #2, #2
   1e068:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1e06c:	e6d8      	b.n	1de20 <am_hal_ble_blocking_transfer.part.7+0x294>
   1e06e:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   1e072:	2102      	movs	r1, #2
   1e074:	f361 0383 	bfi	r3, r1, #2, #2
   1e078:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   1e07c:	e7b7      	b.n	1dfee <am_hal_ble_blocking_transfer.part.7+0x462>
   1e07e:	f1bb 0f00 	cmp.w	fp, #0
   1e082:	f47f af0e 	bne.w	1dea2 <am_hal_ble_blocking_transfer.part.7+0x316>
   1e086:	e66a      	b.n	1dd5e <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e088:	000fff00 	.word	0x000fff00
   1e08c:	5000c000 	.word	0x5000c000
   1e090:	01775230 	.word	0x01775230
   1e094:	08000009 	.word	0x08000009

0001e098 <am_hal_ble_initialize>:
   1e098:	b108      	cbz	r0, 1e09e <am_hal_ble_initialize+0x6>
   1e09a:	2005      	movs	r0, #5
   1e09c:	4770      	bx	lr
   1e09e:	b149      	cbz	r1, 1e0b4 <am_hal_ble_initialize+0x1c>
   1e0a0:	b4f0      	push	{r4, r5, r6, r7}
   1e0a2:	4b19      	ldr	r3, [pc, #100]	; (1e108 <am_hal_ble_initialize+0x70>)
   1e0a4:	78dc      	ldrb	r4, [r3, #3]
   1e0a6:	f3c4 0200 	ubfx	r2, r4, #0, #1
   1e0aa:	b2d0      	uxtb	r0, r2
   1e0ac:	b120      	cbz	r0, 1e0b8 <am_hal_ble_initialize+0x20>
   1e0ae:	2007      	movs	r0, #7
   1e0b0:	bcf0      	pop	{r4, r5, r6, r7}
   1e0b2:	4770      	bx	lr
   1e0b4:	2006      	movs	r0, #6
   1e0b6:	4770      	bx	lr
   1e0b8:	f044 0401 	orr.w	r4, r4, #1
   1e0bc:	70dc      	strb	r4, [r3, #3]
   1e0be:	681e      	ldr	r6, [r3, #0]
   1e0c0:	4f12      	ldr	r7, [pc, #72]	; (1e10c <am_hal_ble_initialize+0x74>)
   1e0c2:	60d8      	str	r0, [r3, #12]
   1e0c4:	f367 0617 	bfi	r6, r7, #0, #24
   1e0c8:	6258      	str	r0, [r3, #36]	; 0x24
   1e0ca:	6058      	str	r0, [r3, #4]
   1e0cc:	63d8      	str	r0, [r3, #60]	; 0x3c
   1e0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1e0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1e0d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   1e0da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1e0de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1e0e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   1e0e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   1e0ea:	721a      	strb	r2, [r3, #8]
   1e0ec:	601e      	str	r6, [r3, #0]
   1e0ee:	6118      	str	r0, [r3, #16]
   1e0f0:	6158      	str	r0, [r3, #20]
   1e0f2:	6198      	str	r0, [r3, #24]
   1e0f4:	61d8      	str	r0, [r3, #28]
   1e0f6:	6218      	str	r0, [r3, #32]
   1e0f8:	6298      	str	r0, [r3, #40]	; 0x28
   1e0fa:	62d8      	str	r0, [r3, #44]	; 0x2c
   1e0fc:	6318      	str	r0, [r3, #48]	; 0x30
   1e0fe:	6358      	str	r0, [r3, #52]	; 0x34
   1e100:	6398      	str	r0, [r3, #56]	; 0x38
   1e102:	600b      	str	r3, [r1, #0]
   1e104:	e7d4      	b.n	1e0b0 <am_hal_ble_initialize+0x18>
   1e106:	bf00      	nop
   1e108:	10005ec4 	.word	0x10005ec4
   1e10c:	00775230 	.word	0x00775230

0001e110 <am_hal_ble_deinitialize>:
   1e110:	b128      	cbz	r0, 1e11e <am_hal_ble_deinitialize+0xe>
   1e112:	6803      	ldr	r3, [r0, #0]
   1e114:	4a13      	ldr	r2, [pc, #76]	; (1e164 <am_hal_ble_deinitialize+0x54>)
   1e116:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e11a:	4293      	cmp	r3, r2
   1e11c:	d001      	beq.n	1e122 <am_hal_ble_deinitialize+0x12>
   1e11e:	2002      	movs	r0, #2
   1e120:	4770      	bx	lr
   1e122:	78c2      	ldrb	r2, [r0, #3]
   1e124:	2300      	movs	r3, #0
   1e126:	f363 0200 	bfi	r2, r3, #0, #1
   1e12a:	70c2      	strb	r2, [r0, #3]
   1e12c:	6802      	ldr	r2, [r0, #0]
   1e12e:	60c3      	str	r3, [r0, #12]
   1e130:	f363 0217 	bfi	r2, r3, #0, #24
   1e134:	6103      	str	r3, [r0, #16]
   1e136:	6143      	str	r3, [r0, #20]
   1e138:	6183      	str	r3, [r0, #24]
   1e13a:	61c3      	str	r3, [r0, #28]
   1e13c:	6203      	str	r3, [r0, #32]
   1e13e:	6043      	str	r3, [r0, #4]
   1e140:	63c3      	str	r3, [r0, #60]	; 0x3c
   1e142:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1e146:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   1e14a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   1e14e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   1e152:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   1e156:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   1e15a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   1e15e:	6002      	str	r2, [r0, #0]
   1e160:	4618      	mov	r0, r3
   1e162:	4770      	bx	lr
   1e164:	01775230 	.word	0x01775230

0001e168 <am_hal_ble_config>:
   1e168:	b128      	cbz	r0, 1e176 <am_hal_ble_config+0xe>
   1e16a:	6803      	ldr	r3, [r0, #0]
   1e16c:	4a3c      	ldr	r2, [pc, #240]	; (1e260 <am_hal_ble_config+0xf8>)
   1e16e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e172:	4293      	cmp	r3, r2
   1e174:	d001      	beq.n	1e17a <am_hal_ble_config+0x12>
   1e176:	2002      	movs	r0, #2
   1e178:	4770      	bx	lr
   1e17a:	b4f0      	push	{r4, r5, r6, r7}
   1e17c:	4b39      	ldr	r3, [pc, #228]	; (1e264 <am_hal_ble_config+0xfc>)
   1e17e:	6844      	ldr	r4, [r0, #4]
   1e180:	4d38      	ldr	r5, [pc, #224]	; (1e264 <am_hal_ble_config+0xfc>)
   1e182:	2203      	movs	r2, #3
   1e184:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1e188:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1e18c:	f36f 4251 	bfc	r2, #17, #1
   1e190:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1e194:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1e198:	f36f 4210 	bfc	r2, #16, #1
   1e19c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1e1a0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1e1a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1e1a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1e1ac:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1e1b0:	6888      	ldr	r0, [r1, #8]
   1e1b2:	f360 220d 	bfi	r2, r0, #8, #6
   1e1b6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   1e1ba:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1e1be:	6848      	ldr	r0, [r1, #4]
   1e1c0:	f360 0205 	bfi	r2, r0, #0, #6
   1e1c4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   1e1c8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1e1cc:	f042 0201 	orr.w	r2, r2, #1
   1e1d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1e1d4:	680b      	ldr	r3, [r1, #0]
   1e1d6:	68c8      	ldr	r0, [r1, #12]
   1e1d8:	4a23      	ldr	r2, [pc, #140]	; (1e268 <am_hal_ble_config+0x100>)
   1e1da:	021b      	lsls	r3, r3, #8
   1e1dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1e1e0:	2802      	cmp	r0, #2
   1e1e2:	bf08      	it	eq
   1e1e4:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   1e1e8:	f043 0301 	orr.w	r3, r3, #1
   1e1ec:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   1e1f0:	68d3      	ldr	r3, [r2, #12]
   1e1f2:	b2db      	uxtb	r3, r3
   1e1f4:	2b12      	cmp	r3, #18
   1e1f6:	d009      	beq.n	1e20c <am_hal_ble_config+0xa4>
   1e1f8:	4b1c      	ldr	r3, [pc, #112]	; (1e26c <am_hal_ble_config+0x104>)
   1e1fa:	7e8a      	ldrb	r2, [r1, #26]
   1e1fc:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1e200:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1e204:	2000      	movs	r0, #0
   1e206:	7222      	strb	r2, [r4, #8]
   1e208:	bcf0      	pop	{r4, r5, r6, r7}
   1e20a:	4770      	bx	lr
   1e20c:	4f18      	ldr	r7, [pc, #96]	; (1e270 <am_hal_ble_config+0x108>)
   1e20e:	68fa      	ldr	r2, [r7, #12]
   1e210:	687b      	ldr	r3, [r7, #4]
   1e212:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   1e216:	6908      	ldr	r0, [r1, #16]
   1e218:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   1e21c:	6908      	ldr	r0, [r1, #16]
   1e21e:	0a00      	lsrs	r0, r0, #8
   1e220:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   1e224:	6948      	ldr	r0, [r1, #20]
   1e226:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   1e22a:	6948      	ldr	r0, [r1, #20]
   1e22c:	0a00      	lsrs	r0, r0, #8
   1e22e:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   1e232:	7e48      	ldrb	r0, [r1, #25]
   1e234:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   1e238:	7e08      	ldrb	r0, [r1, #24]
   1e23a:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   1e23e:	b16b      	cbz	r3, 1e25c <am_hal_ble_config+0xf4>
   1e240:	4e0c      	ldr	r6, [pc, #48]	; (1e274 <am_hal_ble_config+0x10c>)
   1e242:	18d5      	adds	r5, r2, r3
   1e244:	2300      	movs	r3, #0
   1e246:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e24a:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   1e24e:	4295      	cmp	r5, r2
   1e250:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   1e254:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   1e258:	b29b      	uxth	r3, r3
   1e25a:	d1f4      	bne.n	1e246 <am_hal_ble_config+0xde>
   1e25c:	60bb      	str	r3, [r7, #8]
   1e25e:	e7cb      	b.n	1e1f8 <am_hal_ble_config+0x90>
   1e260:	01775230 	.word	0x01775230
   1e264:	5000c000 	.word	0x5000c000
   1e268:	40020000 	.word	0x40020000
   1e26c:	10005ec4 	.word	0x10005ec4
   1e270:	10002c34 	.word	0x10002c34
   1e274:	00022da4 	.word	0x00022da4

0001e278 <am_hal_ble_power_control>:
   1e278:	b538      	push	{r3, r4, r5, lr}
   1e27a:	4b52      	ldr	r3, [pc, #328]	; (1e3c4 <am_hal_ble_power_control+0x14c>)
   1e27c:	68db      	ldr	r3, [r3, #12]
   1e27e:	b2db      	uxtb	r3, r3
   1e280:	2b11      	cmp	r3, #17
   1e282:	d903      	bls.n	1e28c <am_hal_ble_power_control+0x14>
   1e284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1e288:	4a4f      	ldr	r2, [pc, #316]	; (1e3c8 <am_hal_ble_power_control+0x150>)
   1e28a:	63da      	str	r2, [r3, #60]	; 0x3c
   1e28c:	b128      	cbz	r0, 1e29a <am_hal_ble_power_control+0x22>
   1e28e:	6803      	ldr	r3, [r0, #0]
   1e290:	4a4e      	ldr	r2, [pc, #312]	; (1e3cc <am_hal_ble_power_control+0x154>)
   1e292:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e296:	4293      	cmp	r3, r2
   1e298:	d002      	beq.n	1e2a0 <am_hal_ble_power_control+0x28>
   1e29a:	2402      	movs	r4, #2
   1e29c:	4620      	mov	r0, r4
   1e29e:	bd38      	pop	{r3, r4, r5, pc}
   1e2a0:	b9f9      	cbnz	r1, 1e2e2 <am_hal_ble_power_control+0x6a>
   1e2a2:	4b4b      	ldr	r3, [pc, #300]	; (1e3d0 <am_hal_ble_power_control+0x158>)
   1e2a4:	699b      	ldr	r3, [r3, #24]
   1e2a6:	05db      	lsls	r3, r3, #23
   1e2a8:	d454      	bmi.n	1e354 <am_hal_ble_power_control+0xdc>
   1e2aa:	4d46      	ldr	r5, [pc, #280]	; (1e3c4 <am_hal_ble_power_control+0x14c>)
   1e2ac:	69ab      	ldr	r3, [r5, #24]
   1e2ae:	f043 0301 	orr.w	r3, r3, #1
   1e2b2:	61ab      	str	r3, [r5, #24]
   1e2b4:	69ab      	ldr	r3, [r5, #24]
   1e2b6:	f003 0307 	and.w	r3, r3, #7
   1e2ba:	2b07      	cmp	r3, #7
   1e2bc:	d00b      	beq.n	1e2d6 <am_hal_ble_power_control+0x5e>
   1e2be:	4c45      	ldr	r4, [pc, #276]	; (1e3d4 <am_hal_ble_power_control+0x15c>)
   1e2c0:	e001      	b.n	1e2c6 <am_hal_ble_power_control+0x4e>
   1e2c2:	3c01      	subs	r4, #1
   1e2c4:	d06b      	beq.n	1e39e <am_hal_ble_power_control+0x126>
   1e2c6:	2010      	movs	r0, #16
   1e2c8:	f001 fc7e 	bl	1fbc8 <am_hal_flash_delay>
   1e2cc:	69ab      	ldr	r3, [r5, #24]
   1e2ce:	f003 0307 	and.w	r3, r3, #7
   1e2d2:	2b07      	cmp	r3, #7
   1e2d4:	d1f5      	bne.n	1e2c2 <am_hal_ble_power_control+0x4a>
   1e2d6:	200e      	movs	r0, #14
   1e2d8:	f001 ff1e 	bl	20118 <am_hal_pwrctrl_periph_enable>
   1e2dc:	b128      	cbz	r0, 1e2ea <am_hal_ble_power_control+0x72>
   1e2de:	4c3e      	ldr	r4, [pc, #248]	; (1e3d8 <am_hal_ble_power_control+0x160>)
   1e2e0:	e7dc      	b.n	1e29c <am_hal_ble_power_control+0x24>
   1e2e2:	2901      	cmp	r1, #1
   1e2e4:	d038      	beq.n	1e358 <am_hal_ble_power_control+0xe0>
   1e2e6:	2407      	movs	r4, #7
   1e2e8:	e7d8      	b.n	1e29c <am_hal_ble_power_control+0x24>
   1e2ea:	4b3c      	ldr	r3, [pc, #240]	; (1e3dc <am_hal_ble_power_control+0x164>)
   1e2ec:	4935      	ldr	r1, [pc, #212]	; (1e3c4 <am_hal_ble_power_control+0x14c>)
   1e2ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1e2f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1e2f6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1e2fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1e2fe:	f360 02df 	bfi	r2, r0, #3, #29
   1e302:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1e306:	68cb      	ldr	r3, [r1, #12]
   1e308:	b2db      	uxtb	r3, r3
   1e30a:	2b11      	cmp	r3, #17
   1e30c:	d949      	bls.n	1e3a2 <am_hal_ble_power_control+0x12a>
   1e30e:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   1e312:	f043 0320 	orr.w	r3, r3, #32
   1e316:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   1e31a:	4d30      	ldr	r5, [pc, #192]	; (1e3dc <am_hal_ble_power_control+0x164>)
   1e31c:	4830      	ldr	r0, [pc, #192]	; (1e3e0 <am_hal_ble_power_control+0x168>)
   1e31e:	f001 fc53 	bl	1fbc8 <am_hal_flash_delay>
   1e322:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   1e326:	f043 0301 	orr.w	r3, r3, #1
   1e32a:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   1e32e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1e332:	f3c3 2302 	ubfx	r3, r3, #8, #3
   1e336:	2b03      	cmp	r3, #3
   1e338:	d00c      	beq.n	1e354 <am_hal_ble_power_control+0xdc>
   1e33a:	4c2a      	ldr	r4, [pc, #168]	; (1e3e4 <am_hal_ble_power_control+0x16c>)
   1e33c:	e001      	b.n	1e342 <am_hal_ble_power_control+0xca>
   1e33e:	3c01      	subs	r4, #1
   1e340:	d039      	beq.n	1e3b6 <am_hal_ble_power_control+0x13e>
   1e342:	2010      	movs	r0, #16
   1e344:	f001 fc40 	bl	1fbc8 <am_hal_flash_delay>
   1e348:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1e34c:	f3c3 2302 	ubfx	r3, r3, #8, #3
   1e350:	2b03      	cmp	r3, #3
   1e352:	d1f4      	bne.n	1e33e <am_hal_ble_power_control+0xc6>
   1e354:	2400      	movs	r4, #0
   1e356:	e7a1      	b.n	1e29c <am_hal_ble_power_control+0x24>
   1e358:	4b20      	ldr	r3, [pc, #128]	; (1e3dc <am_hal_ble_power_control+0x164>)
   1e35a:	481a      	ldr	r0, [pc, #104]	; (1e3c4 <am_hal_ble_power_control+0x14c>)
   1e35c:	2200      	movs	r2, #0
   1e35e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1e362:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1e366:	f362 01df 	bfi	r1, r2, #3, #29
   1e36a:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   1e36e:	68c3      	ldr	r3, [r0, #12]
   1e370:	b2db      	uxtb	r3, r3
   1e372:	2b11      	cmp	r3, #17
   1e374:	d919      	bls.n	1e3aa <am_hal_ble_power_control+0x132>
   1e376:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   1e37a:	f362 1345 	bfi	r3, r2, #5, #1
   1e37e:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   1e382:	4b16      	ldr	r3, [pc, #88]	; (1e3dc <am_hal_ble_power_control+0x164>)
   1e384:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1e388:	f36f 0200 	bfc	r2, #0, #1
   1e38c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1e390:	200e      	movs	r0, #14
   1e392:	f001 feeb 	bl	2016c <am_hal_pwrctrl_periph_disable>
   1e396:	4604      	mov	r4, r0
   1e398:	b178      	cbz	r0, 1e3ba <am_hal_ble_power_control+0x142>
   1e39a:	4c13      	ldr	r4, [pc, #76]	; (1e3e8 <am_hal_ble_power_control+0x170>)
   1e39c:	e77e      	b.n	1e29c <am_hal_ble_power_control+0x24>
   1e39e:	4c13      	ldr	r4, [pc, #76]	; (1e3ec <am_hal_ble_power_control+0x174>)
   1e3a0:	e77c      	b.n	1e29c <am_hal_ble_power_control+0x24>
   1e3a2:	4b13      	ldr	r3, [pc, #76]	; (1e3f0 <am_hal_ble_power_control+0x178>)
   1e3a4:	2204      	movs	r2, #4
   1e3a6:	601a      	str	r2, [r3, #0]
   1e3a8:	e7b7      	b.n	1e31a <am_hal_ble_power_control+0xa2>
   1e3aa:	4a11      	ldr	r2, [pc, #68]	; (1e3f0 <am_hal_ble_power_control+0x178>)
   1e3ac:	6813      	ldr	r3, [r2, #0]
   1e3ae:	f023 0304 	bic.w	r3, r3, #4
   1e3b2:	6013      	str	r3, [r2, #0]
   1e3b4:	e7e5      	b.n	1e382 <am_hal_ble_power_control+0x10a>
   1e3b6:	4c0f      	ldr	r4, [pc, #60]	; (1e3f4 <am_hal_ble_power_control+0x17c>)
   1e3b8:	e770      	b.n	1e29c <am_hal_ble_power_control+0x24>
   1e3ba:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   1e3be:	f001 fc03 	bl	1fbc8 <am_hal_flash_delay>
   1e3c2:	e76b      	b.n	1e29c <am_hal_ble_power_control+0x24>
   1e3c4:	40020000 	.word	0x40020000
   1e3c8:	0fc0400f 	.word	0x0fc0400f
   1e3cc:	01775230 	.word	0x01775230
   1e3d0:	40021000 	.word	0x40021000
   1e3d4:	000186a0 	.word	0x000186a0
   1e3d8:	08000007 	.word	0x08000007
   1e3dc:	5000c000 	.word	0x5000c000
   1e3e0:	00013880 	.word	0x00013880
   1e3e4:	000f4240 	.word	0x000f4240
   1e3e8:	08000006 	.word	0x08000006
   1e3ec:	08000005 	.word	0x08000005
   1e3f0:	40020198 	.word	0x40020198
   1e3f4:	08000008 	.word	0x08000008

0001e3f8 <am_hal_ble_patch_copy_end_apply>:
   1e3f8:	b128      	cbz	r0, 1e406 <am_hal_ble_patch_copy_end_apply+0xe>
   1e3fa:	6803      	ldr	r3, [r0, #0]
   1e3fc:	4a46      	ldr	r2, [pc, #280]	; (1e518 <am_hal_ble_patch_copy_end_apply+0x120>)
   1e3fe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e402:	4293      	cmp	r3, r2
   1e404:	d001      	beq.n	1e40a <am_hal_ble_patch_copy_end_apply+0x12>
   1e406:	2002      	movs	r0, #2
   1e408:	4770      	bx	lr
   1e40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e40e:	b092      	sub	sp, #72	; 0x48
   1e410:	2501      	movs	r5, #1
   1e412:	2400      	movs	r4, #0
   1e414:	4606      	mov	r6, r0
   1e416:	21f1      	movs	r1, #241	; 0xf1
   1e418:	20ee      	movs	r0, #238	; 0xee
   1e41a:	2202      	movs	r2, #2
   1e41c:	f88d 5000 	strb.w	r5, [sp]
   1e420:	f88d 0001 	strb.w	r0, [sp, #1]
   1e424:	f88d 1002 	strb.w	r1, [sp, #2]
   1e428:	f88d 2003 	strb.w	r2, [sp, #3]
   1e42c:	f88d 4004 	strb.w	r4, [sp, #4]
   1e430:	f88d 4005 	strb.w	r4, [sp, #5]
   1e434:	f241 3588 	movw	r5, #5000	; 0x1388
   1e438:	f04f 0806 	mov.w	r8, #6
   1e43c:	461f      	mov	r7, r3
   1e43e:	2201      	movs	r2, #1
   1e440:	42bb      	cmp	r3, r7
   1e442:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   1e446:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1e44a:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   1e44e:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   1e452:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   1e456:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   1e45a:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   1e45e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   1e462:	940e      	str	r4, [sp, #56]	; 0x38
   1e464:	940f      	str	r4, [sp, #60]	; 0x3c
   1e466:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   1e46a:	d029      	beq.n	1e4c0 <am_hal_ble_patch_copy_end_apply+0xc8>
   1e46c:	4b2b      	ldr	r3, [pc, #172]	; (1e51c <am_hal_ble_patch_copy_end_apply+0x124>)
   1e46e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1e472:	0612      	lsls	r2, r2, #24
   1e474:	d40c      	bmi.n	1e490 <am_hal_ble_patch_copy_end_apply+0x98>
   1e476:	4d2a      	ldr	r5, [pc, #168]	; (1e520 <am_hal_ble_patch_copy_end_apply+0x128>)
   1e478:	461c      	mov	r4, r3
   1e47a:	2010      	movs	r0, #16
   1e47c:	f001 fba4 	bl	1fbc8 <am_hal_flash_delay>
   1e480:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1e484:	0619      	lsls	r1, r3, #24
   1e486:	d403      	bmi.n	1e490 <am_hal_ble_patch_copy_end_apply+0x98>
   1e488:	3d01      	subs	r5, #1
   1e48a:	d1f6      	bne.n	1e47a <am_hal_ble_patch_copy_end_apply+0x82>
   1e48c:	4825      	ldr	r0, [pc, #148]	; (1e524 <am_hal_ble_patch_copy_end_apply+0x12c>)
   1e48e:	e014      	b.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e490:	6832      	ldr	r2, [r6, #0]
   1e492:	4921      	ldr	r1, [pc, #132]	; (1e518 <am_hal_ble_patch_copy_end_apply+0x120>)
   1e494:	f8cd d010 	str.w	sp, [sp, #16]
   1e498:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1e49c:	2300      	movs	r3, #0
   1e49e:	2402      	movs	r4, #2
   1e4a0:	2005      	movs	r0, #5
   1e4a2:	428a      	cmp	r2, r1
   1e4a4:	9306      	str	r3, [sp, #24]
   1e4a6:	9305      	str	r3, [sp, #20]
   1e4a8:	9307      	str	r3, [sp, #28]
   1e4aa:	9308      	str	r3, [sp, #32]
   1e4ac:	9309      	str	r3, [sp, #36]	; 0x24
   1e4ae:	f88d 401a 	strb.w	r4, [sp, #26]
   1e4b2:	f8ad 0018 	strh.w	r0, [sp, #24]
   1e4b6:	d00f      	beq.n	1e4d8 <am_hal_ble_patch_copy_end_apply+0xe0>
   1e4b8:	2002      	movs	r0, #2
   1e4ba:	b012      	add	sp, #72	; 0x48
   1e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e4c0:	a90a      	add	r1, sp, #40	; 0x28
   1e4c2:	4630      	mov	r0, r6
   1e4c4:	f7ff fb62 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e4c8:	2800      	cmp	r0, #0
   1e4ca:	d0cf      	beq.n	1e46c <am_hal_ble_patch_copy_end_apply+0x74>
   1e4cc:	3d01      	subs	r5, #1
   1e4ce:	d0f4      	beq.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e4d0:	6833      	ldr	r3, [r6, #0]
   1e4d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e4d6:	e7b2      	b.n	1e43e <am_hal_ble_patch_copy_end_apply+0x46>
   1e4d8:	a904      	add	r1, sp, #16
   1e4da:	4630      	mov	r0, r6
   1e4dc:	f7ff fb56 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e4e0:	2800      	cmp	r0, #0
   1e4e2:	d1ea      	bne.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e4e4:	f89d 3000 	ldrb.w	r3, [sp]
   1e4e8:	2b04      	cmp	r3, #4
   1e4ea:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   1e4ee:	f04f 0001 	mov.w	r0, #1
   1e4f2:	d1e2      	bne.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e4f4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1e4f8:	2bee      	cmp	r3, #238	; 0xee
   1e4fa:	d1de      	bne.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e4fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1e500:	429a      	cmp	r2, r3
   1e502:	d1da      	bne.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e504:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e508:	4283      	cmp	r3, r0
   1e50a:	d1d6      	bne.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e50c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1e510:	3000      	adds	r0, #0
   1e512:	bf18      	it	ne
   1e514:	2001      	movne	r0, #1
   1e516:	e7d0      	b.n	1e4ba <am_hal_ble_patch_copy_end_apply+0xc2>
   1e518:	01775230 	.word	0x01775230
   1e51c:	5000c000 	.word	0x5000c000
   1e520:	000f4240 	.word	0x000f4240
   1e524:	08000004 	.word	0x08000004

0001e528 <am_hal_ble_blocking_hci_write>:
   1e528:	b530      	push	{r4, r5, lr}
   1e52a:	b087      	sub	sp, #28
   1e52c:	2400      	movs	r4, #0
   1e52e:	b29b      	uxth	r3, r3
   1e530:	2501      	movs	r5, #1
   1e532:	f88d 1004 	strb.w	r1, [sp, #4]
   1e536:	f8ad 3008 	strh.w	r3, [sp, #8]
   1e53a:	9200      	str	r2, [sp, #0]
   1e53c:	f88d 4005 	strb.w	r4, [sp, #5]
   1e540:	f88d 4006 	strb.w	r4, [sp, #6]
   1e544:	f88d 4007 	strb.w	r4, [sp, #7]
   1e548:	f88d 400b 	strb.w	r4, [sp, #11]
   1e54c:	f88d 400c 	strb.w	r4, [sp, #12]
   1e550:	9404      	str	r4, [sp, #16]
   1e552:	9405      	str	r4, [sp, #20]
   1e554:	f88d 500a 	strb.w	r5, [sp, #10]
   1e558:	b128      	cbz	r0, 1e566 <am_hal_ble_blocking_hci_write+0x3e>
   1e55a:	6802      	ldr	r2, [r0, #0]
   1e55c:	4c09      	ldr	r4, [pc, #36]	; (1e584 <am_hal_ble_blocking_hci_write+0x5c>)
   1e55e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1e562:	42a2      	cmp	r2, r4
   1e564:	d002      	beq.n	1e56c <am_hal_ble_blocking_hci_write+0x44>
   1e566:	2000      	movs	r0, #0
   1e568:	b007      	add	sp, #28
   1e56a:	bd30      	pop	{r4, r5, pc}
   1e56c:	b939      	cbnz	r1, 1e57e <am_hal_ble_blocking_hci_write+0x56>
   1e56e:	2b00      	cmp	r3, #0
   1e570:	d0f9      	beq.n	1e566 <am_hal_ble_blocking_hci_write+0x3e>
   1e572:	4669      	mov	r1, sp
   1e574:	f7ff fb0a 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e578:	2800      	cmp	r0, #0
   1e57a:	d0f4      	beq.n	1e566 <am_hal_ble_blocking_hci_write+0x3e>
   1e57c:	e7f4      	b.n	1e568 <am_hal_ble_blocking_hci_write+0x40>
   1e57e:	f88d 5007 	strb.w	r5, [sp, #7]
   1e582:	e7f4      	b.n	1e56e <am_hal_ble_blocking_hci_write+0x46>
   1e584:	01775230 	.word	0x01775230

0001e588 <am_hal_ble_blocking_hci_read>:
   1e588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e58c:	b089      	sub	sp, #36	; 0x24
   1e58e:	2300      	movs	r3, #0
   1e590:	2502      	movs	r5, #2
   1e592:	ac01      	add	r4, sp, #4
   1e594:	9402      	str	r4, [sp, #8]
   1e596:	f88d 300c 	strb.w	r3, [sp, #12]
   1e59a:	f88d 300d 	strb.w	r3, [sp, #13]
   1e59e:	f88d 300e 	strb.w	r3, [sp, #14]
   1e5a2:	f88d 300f 	strb.w	r3, [sp, #15]
   1e5a6:	f88d 3013 	strb.w	r3, [sp, #19]
   1e5aa:	f88d 3014 	strb.w	r3, [sp, #20]
   1e5ae:	9306      	str	r3, [sp, #24]
   1e5b0:	9307      	str	r3, [sp, #28]
   1e5b2:	f8ad 5010 	strh.w	r5, [sp, #16]
   1e5b6:	f88d 5012 	strb.w	r5, [sp, #18]
   1e5ba:	b128      	cbz	r0, 1e5c8 <am_hal_ble_blocking_hci_read+0x40>
   1e5bc:	6804      	ldr	r4, [r0, #0]
   1e5be:	4e1f      	ldr	r6, [pc, #124]	; (1e63c <am_hal_ble_blocking_hci_read+0xb4>)
   1e5c0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   1e5c4:	42b4      	cmp	r4, r6
   1e5c6:	d003      	beq.n	1e5d0 <am_hal_ble_blocking_hci_read+0x48>
   1e5c8:	2000      	movs	r0, #0
   1e5ca:	b009      	add	sp, #36	; 0x24
   1e5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e5d0:	460f      	mov	r7, r1
   1e5d2:	491b      	ldr	r1, [pc, #108]	; (1e640 <am_hal_ble_blocking_hci_read+0xb8>)
   1e5d4:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   1e5d8:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   1e5dc:	4681      	mov	r9, r0
   1e5de:	4690      	mov	r8, r2
   1e5e0:	b92e      	cbnz	r6, 1e5ee <am_hal_ble_blocking_hci_read+0x66>
   1e5e2:	f1b8 0f00 	cmp.w	r8, #0
   1e5e6:	d0ef      	beq.n	1e5c8 <am_hal_ble_blocking_hci_read+0x40>
   1e5e8:	f8c8 6000 	str.w	r6, [r8]
   1e5ec:	e7ec      	b.n	1e5c8 <am_hal_ble_blocking_hci_read+0x40>
   1e5ee:	a902      	add	r1, sp, #8
   1e5f0:	f7ff facc 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e5f4:	2800      	cmp	r0, #0
   1e5f6:	d1e8      	bne.n	1e5ca <am_hal_ble_blocking_hci_read+0x42>
   1e5f8:	f89d 0005 	ldrb.w	r0, [sp, #5]
   1e5fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1e600:	9702      	str	r7, [sp, #8]
   1e602:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   1e606:	b289      	uxth	r1, r1
   1e608:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1e60c:	f8ad 1010 	strh.w	r1, [sp, #16]
   1e610:	d901      	bls.n	1e616 <am_hal_ble_blocking_hci_read+0x8e>
   1e612:	2005      	movs	r0, #5
   1e614:	e7d9      	b.n	1e5ca <am_hal_ble_blocking_hci_read+0x42>
   1e616:	f8d9 0000 	ldr.w	r0, [r9]
   1e61a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1e61e:	42a0      	cmp	r0, r4
   1e620:	d001      	beq.n	1e626 <am_hal_ble_blocking_hci_read+0x9e>
   1e622:	4628      	mov	r0, r5
   1e624:	e7d1      	b.n	1e5ca <am_hal_ble_blocking_hci_read+0x42>
   1e626:	b129      	cbz	r1, 1e634 <am_hal_ble_blocking_hci_read+0xac>
   1e628:	a902      	add	r1, sp, #8
   1e62a:	4648      	mov	r0, r9
   1e62c:	f7ff faae 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e630:	2800      	cmp	r0, #0
   1e632:	d1ca      	bne.n	1e5ca <am_hal_ble_blocking_hci_read+0x42>
   1e634:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   1e638:	e7d3      	b.n	1e5e2 <am_hal_ble_blocking_hci_read+0x5a>
   1e63a:	bf00      	nop
   1e63c:	01775230 	.word	0x01775230
   1e640:	5000c000 	.word	0x5000c000

0001e644 <am_hal_ble_blocking_transfer>:
   1e644:	b128      	cbz	r0, 1e652 <am_hal_ble_blocking_transfer+0xe>
   1e646:	6803      	ldr	r3, [r0, #0]
   1e648:	4a08      	ldr	r2, [pc, #32]	; (1e66c <am_hal_ble_blocking_transfer+0x28>)
   1e64a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e64e:	4293      	cmp	r3, r2
   1e650:	d001      	beq.n	1e656 <am_hal_ble_blocking_transfer+0x12>
   1e652:	2002      	movs	r0, #2
   1e654:	4770      	bx	lr
   1e656:	890b      	ldrh	r3, [r1, #8]
   1e658:	b410      	push	{r4}
   1e65a:	b11b      	cbz	r3, 1e664 <am_hal_ble_blocking_transfer+0x20>
   1e65c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e660:	f7ff ba94 	b.w	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e664:	4618      	mov	r0, r3
   1e666:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e66a:	4770      	bx	lr
   1e66c:	01775230 	.word	0x01775230

0001e670 <am_hal_ble_patch_apply>:
   1e670:	b128      	cbz	r0, 1e67e <am_hal_ble_patch_apply+0xe>
   1e672:	6803      	ldr	r3, [r0, #0]
   1e674:	4aae      	ldr	r2, [pc, #696]	; (1e930 <am_hal_ble_patch_apply+0x2c0>)
   1e676:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e67a:	4293      	cmp	r3, r2
   1e67c:	d002      	beq.n	1e684 <am_hal_ble_patch_apply+0x14>
   1e67e:	2302      	movs	r3, #2
   1e680:	4618      	mov	r0, r3
   1e682:	4770      	bx	lr
   1e684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e688:	684a      	ldr	r2, [r1, #4]
   1e68a:	680d      	ldr	r5, [r1, #0]
   1e68c:	b095      	sub	sp, #84	; 0x54
   1e68e:	2701      	movs	r7, #1
   1e690:	4604      	mov	r4, r0
   1e692:	460e      	mov	r6, r1
   1e694:	f88d 200c 	strb.w	r2, [sp, #12]
   1e698:	20f1      	movs	r0, #241	; 0xf1
   1e69a:	0a12      	lsrs	r2, r2, #8
   1e69c:	2102      	movs	r1, #2
   1e69e:	f88d 7008 	strb.w	r7, [sp, #8]
   1e6a2:	f88d 5009 	strb.w	r5, [sp, #9]
   1e6a6:	f88d 200d 	strb.w	r2, [sp, #13]
   1e6aa:	f88d 000a 	strb.w	r0, [sp, #10]
   1e6ae:	f88d 100b 	strb.w	r1, [sp, #11]
   1e6b2:	f241 3788 	movw	r7, #5000	; 0x1388
   1e6b6:	2500      	movs	r5, #0
   1e6b8:	f04f 0906 	mov.w	r9, #6
   1e6bc:	4698      	mov	r8, r3
   1e6be:	2201      	movs	r2, #1
   1e6c0:	a902      	add	r1, sp, #8
   1e6c2:	4543      	cmp	r3, r8
   1e6c4:	910c      	str	r1, [sp, #48]	; 0x30
   1e6c6:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1e6ca:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   1e6ce:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   1e6d2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e6d6:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   1e6da:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   1e6de:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   1e6e2:	9510      	str	r5, [sp, #64]	; 0x40
   1e6e4:	9511      	str	r5, [sp, #68]	; 0x44
   1e6e6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   1e6ea:	d02b      	beq.n	1e744 <am_hal_ble_patch_apply+0xd4>
   1e6ec:	4b91      	ldr	r3, [pc, #580]	; (1e934 <am_hal_ble_patch_apply+0x2c4>)
   1e6ee:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1e6f2:	0612      	lsls	r2, r2, #24
   1e6f4:	d40c      	bmi.n	1e710 <am_hal_ble_patch_apply+0xa0>
   1e6f6:	4f90      	ldr	r7, [pc, #576]	; (1e938 <am_hal_ble_patch_apply+0x2c8>)
   1e6f8:	461d      	mov	r5, r3
   1e6fa:	2010      	movs	r0, #16
   1e6fc:	f001 fa64 	bl	1fbc8 <am_hal_flash_delay>
   1e700:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1e704:	061b      	lsls	r3, r3, #24
   1e706:	d403      	bmi.n	1e710 <am_hal_ble_patch_apply+0xa0>
   1e708:	3f01      	subs	r7, #1
   1e70a:	d1f6      	bne.n	1e6fa <am_hal_ble_patch_apply+0x8a>
   1e70c:	4b8b      	ldr	r3, [pc, #556]	; (1e93c <am_hal_ble_patch_apply+0x2cc>)
   1e70e:	e015      	b.n	1e73c <am_hal_ble_patch_apply+0xcc>
   1e710:	6825      	ldr	r5, [r4, #0]
   1e712:	4a87      	ldr	r2, [pc, #540]	; (1e930 <am_hal_ble_patch_apply+0x2c0>)
   1e714:	ab02      	add	r3, sp, #8
   1e716:	9306      	str	r3, [sp, #24]
   1e718:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   1e71c:	2300      	movs	r3, #0
   1e71e:	9308      	str	r3, [sp, #32]
   1e720:	2102      	movs	r1, #2
   1e722:	9307      	str	r3, [sp, #28]
   1e724:	9309      	str	r3, [sp, #36]	; 0x24
   1e726:	930a      	str	r3, [sp, #40]	; 0x28
   1e728:	930b      	str	r3, [sp, #44]	; 0x2c
   1e72a:	4295      	cmp	r5, r2
   1e72c:	f04f 0305 	mov.w	r3, #5
   1e730:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   1e734:	f8ad 3020 	strh.w	r3, [sp, #32]
   1e738:	d011      	beq.n	1e75e <am_hal_ble_patch_apply+0xee>
   1e73a:	2302      	movs	r3, #2
   1e73c:	4618      	mov	r0, r3
   1e73e:	b015      	add	sp, #84	; 0x54
   1e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e744:	a90c      	add	r1, sp, #48	; 0x30
   1e746:	4620      	mov	r0, r4
   1e748:	f7ff fa20 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e74c:	4603      	mov	r3, r0
   1e74e:	2800      	cmp	r0, #0
   1e750:	d0cc      	beq.n	1e6ec <am_hal_ble_patch_apply+0x7c>
   1e752:	3f01      	subs	r7, #1
   1e754:	d0f2      	beq.n	1e73c <am_hal_ble_patch_apply+0xcc>
   1e756:	6823      	ldr	r3, [r4, #0]
   1e758:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e75c:	e7af      	b.n	1e6be <am_hal_ble_patch_apply+0x4e>
   1e75e:	a906      	add	r1, sp, #24
   1e760:	4620      	mov	r0, r4
   1e762:	f7ff fa13 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e766:	4603      	mov	r3, r0
   1e768:	2800      	cmp	r0, #0
   1e76a:	d1e7      	bne.n	1e73c <am_hal_ble_patch_apply+0xcc>
   1e76c:	2304      	movs	r3, #4
   1e76e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1e772:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1e776:	23f1      	movs	r3, #241	; 0xf1
   1e778:	7832      	ldrb	r2, [r6, #0]
   1e77a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1e77e:	2904      	cmp	r1, #4
   1e780:	f04f 0301 	mov.w	r3, #1
   1e784:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   1e788:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   1e78c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1e790:	f040 811a 	bne.w	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e794:	f89d 1009 	ldrb.w	r1, [sp, #9]
   1e798:	b2d3      	uxtb	r3, r2
   1e79a:	4299      	cmp	r1, r3
   1e79c:	f040 8114 	bne.w	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e7a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1e7a4:	2bf1      	cmp	r3, #241	; 0xf1
   1e7a6:	f040 810f 	bne.w	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e7aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1e7ae:	2b01      	cmp	r3, #1
   1e7b0:	f040 810a 	bne.w	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e7b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1e7b8:	2b00      	cmp	r3, #0
   1e7ba:	f040 8105 	bne.w	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e7be:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1e7c2:	f1ba 0f00 	cmp.w	sl, #0
   1e7c6:	f000 8091 	beq.w	1e8ec <am_hal_ble_patch_apply+0x27c>
   1e7ca:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1e944 <am_hal_ble_patch_apply+0x2d4>
   1e7ce:	4f59      	ldr	r7, [pc, #356]	; (1e934 <am_hal_ble_patch_apply+0x2c4>)
   1e7d0:	9501      	str	r5, [sp, #4]
   1e7d2:	469b      	mov	fp, r3
   1e7d4:	2201      	movs	r2, #1
   1e7d6:	f889 2000 	strb.w	r2, [r9]
   1e7da:	6833      	ldr	r3, [r6, #0]
   1e7dc:	f889 3001 	strb.w	r3, [r9, #1]
   1e7e0:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   1e7e4:	46d0      	mov	r8, sl
   1e7e6:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   1e7ea:	bf28      	it	cs
   1e7ec:	f04f 0880 	movcs.w	r8, #128	; 0x80
   1e7f0:	f889 3002 	strb.w	r3, [r9, #2]
   1e7f4:	f889 8003 	strb.w	r8, [r9, #3]
   1e7f8:	68f1      	ldr	r1, [r6, #12]
   1e7fa:	4851      	ldr	r0, [pc, #324]	; (1e940 <am_hal_ble_patch_apply+0x2d0>)
   1e7fc:	f8cd 9018 	str.w	r9, [sp, #24]
   1e800:	2300      	movs	r3, #0
   1e802:	f02b 0503 	bic.w	r5, fp, #3
   1e806:	9308      	str	r3, [sp, #32]
   1e808:	4429      	add	r1, r5
   1e80a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1e80e:	f108 0504 	add.w	r5, r8, #4
   1e812:	4642      	mov	r2, r8
   1e814:	9307      	str	r3, [sp, #28]
   1e816:	9309      	str	r3, [sp, #36]	; 0x24
   1e818:	930a      	str	r3, [sp, #40]	; 0x28
   1e81a:	930b      	str	r3, [sp, #44]	; 0x2c
   1e81c:	f8ad 5020 	strh.w	r5, [sp, #32]
   1e820:	f7ed fc9e 	bl	c160 <memcpy>
   1e824:	6823      	ldr	r3, [r4, #0]
   1e826:	9a01      	ldr	r2, [sp, #4]
   1e828:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e82c:	4293      	cmp	r3, r2
   1e82e:	d184      	bne.n	1e73a <am_hal_ble_patch_apply+0xca>
   1e830:	a906      	add	r1, sp, #24
   1e832:	4620      	mov	r0, r4
   1e834:	f7ff f9aa 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e838:	4603      	mov	r3, r0
   1e83a:	2800      	cmp	r0, #0
   1e83c:	f47f af7e 	bne.w	1e73c <am_hal_ble_patch_apply+0xcc>
   1e840:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1e844:	061d      	lsls	r5, r3, #24
   1e846:	d40b      	bmi.n	1e860 <am_hal_ble_patch_apply+0x1f0>
   1e848:	4d3b      	ldr	r5, [pc, #236]	; (1e938 <am_hal_ble_patch_apply+0x2c8>)
   1e84a:	e002      	b.n	1e852 <am_hal_ble_patch_apply+0x1e2>
   1e84c:	3d01      	subs	r5, #1
   1e84e:	f43f af5d 	beq.w	1e70c <am_hal_ble_patch_apply+0x9c>
   1e852:	2010      	movs	r0, #16
   1e854:	f001 f9b8 	bl	1fbc8 <am_hal_flash_delay>
   1e858:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1e85c:	0618      	lsls	r0, r3, #24
   1e85e:	d5f5      	bpl.n	1e84c <am_hal_ble_patch_apply+0x1dc>
   1e860:	ab02      	add	r3, sp, #8
   1e862:	9306      	str	r3, [sp, #24]
   1e864:	2300      	movs	r3, #0
   1e866:	9308      	str	r3, [sp, #32]
   1e868:	6822      	ldr	r2, [r4, #0]
   1e86a:	9307      	str	r3, [sp, #28]
   1e86c:	9309      	str	r3, [sp, #36]	; 0x24
   1e86e:	930a      	str	r3, [sp, #40]	; 0x28
   1e870:	930b      	str	r3, [sp, #44]	; 0x2c
   1e872:	2305      	movs	r3, #5
   1e874:	f8ad 3020 	strh.w	r3, [sp, #32]
   1e878:	9b01      	ldr	r3, [sp, #4]
   1e87a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1e87e:	2102      	movs	r1, #2
   1e880:	429a      	cmp	r2, r3
   1e882:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   1e886:	f47f af58 	bne.w	1e73a <am_hal_ble_patch_apply+0xca>
   1e88a:	a906      	add	r1, sp, #24
   1e88c:	4620      	mov	r0, r4
   1e88e:	f7ff f97d 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1e892:	4603      	mov	r3, r0
   1e894:	2800      	cmp	r0, #0
   1e896:	f47f af51 	bne.w	1e73c <am_hal_ble_patch_apply+0xcc>
   1e89a:	2304      	movs	r3, #4
   1e89c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1e8a0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1e8a4:	23f2      	movs	r3, #242	; 0xf2
   1e8a6:	7832      	ldrb	r2, [r6, #0]
   1e8a8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1e8ac:	2904      	cmp	r1, #4
   1e8ae:	f04f 0301 	mov.w	r3, #1
   1e8b2:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   1e8b6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   1e8ba:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1e8be:	f040 8083 	bne.w	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e8c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1e8c6:	4293      	cmp	r3, r2
   1e8c8:	d17e      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e8ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1e8ce:	2bf2      	cmp	r3, #242	; 0xf2
   1e8d0:	d17a      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e8d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1e8d6:	2b01      	cmp	r3, #1
   1e8d8:	d176      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e8da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	d172      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e8e2:	ebba 0a08 	subs.w	sl, sl, r8
   1e8e6:	44c3      	add	fp, r8
   1e8e8:	f47f af74 	bne.w	1e7d4 <am_hal_ble_patch_apply+0x164>
   1e8ec:	68b3      	ldr	r3, [r6, #8]
   1e8ee:	f88d 2009 	strb.w	r2, [sp, #9]
   1e8f2:	2101      	movs	r1, #1
   1e8f4:	0a1a      	lsrs	r2, r3, #8
   1e8f6:	20f3      	movs	r0, #243	; 0xf3
   1e8f8:	f88d 300c 	strb.w	r3, [sp, #12]
   1e8fc:	f88d 200d 	strb.w	r2, [sp, #13]
   1e900:	2306      	movs	r3, #6
   1e902:	f88d 1008 	strb.w	r1, [sp, #8]
   1e906:	f88d 000a 	strb.w	r0, [sp, #10]
   1e90a:	2502      	movs	r5, #2
   1e90c:	aa02      	add	r2, sp, #8
   1e90e:	2100      	movs	r1, #0
   1e910:	4620      	mov	r0, r4
   1e912:	f88d 500b 	strb.w	r5, [sp, #11]
   1e916:	f7ff fe07 	bl	1e528 <am_hal_ble_blocking_hci_write>
   1e91a:	4603      	mov	r3, r0
   1e91c:	2800      	cmp	r0, #0
   1e91e:	d153      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e920:	4f04      	ldr	r7, [pc, #16]	; (1e934 <am_hal_ble_patch_apply+0x2c4>)
   1e922:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   1e926:	0611      	lsls	r1, r2, #24
   1e928:	d41b      	bmi.n	1e962 <am_hal_ble_patch_apply+0x2f2>
   1e92a:	4d03      	ldr	r5, [pc, #12]	; (1e938 <am_hal_ble_patch_apply+0x2c8>)
   1e92c:	e00f      	b.n	1e94e <am_hal_ble_patch_apply+0x2de>
   1e92e:	bf00      	nop
   1e930:	01775230 	.word	0x01775230
   1e934:	5000c000 	.word	0x5000c000
   1e938:	000f4240 	.word	0x000f4240
   1e93c:	08000004 	.word	0x08000004
   1e940:	10005f10 	.word	0x10005f10
   1e944:	10005f0c 	.word	0x10005f0c
   1e948:	3d01      	subs	r5, #1
   1e94a:	f43f aedf 	beq.w	1e70c <am_hal_ble_patch_apply+0x9c>
   1e94e:	2010      	movs	r0, #16
   1e950:	9301      	str	r3, [sp, #4]
   1e952:	f001 f939 	bl	1fbc8 <am_hal_flash_delay>
   1e956:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   1e95a:	9b01      	ldr	r3, [sp, #4]
   1e95c:	f012 0f80 	tst.w	r2, #128	; 0x80
   1e960:	d0f2      	beq.n	1e948 <am_hal_ble_patch_apply+0x2d8>
   1e962:	2200      	movs	r2, #0
   1e964:	9301      	str	r3, [sp, #4]
   1e966:	4620      	mov	r0, r4
   1e968:	ab02      	add	r3, sp, #8
   1e96a:	a906      	add	r1, sp, #24
   1e96c:	2502      	movs	r5, #2
   1e96e:	2405      	movs	r4, #5
   1e970:	9208      	str	r2, [sp, #32]
   1e972:	9306      	str	r3, [sp, #24]
   1e974:	9207      	str	r2, [sp, #28]
   1e976:	9209      	str	r2, [sp, #36]	; 0x24
   1e978:	920a      	str	r2, [sp, #40]	; 0x28
   1e97a:	920b      	str	r2, [sp, #44]	; 0x2c
   1e97c:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   1e980:	f8ad 4020 	strh.w	r4, [sp, #32]
   1e984:	f7ff fe5e 	bl	1e644 <am_hal_ble_blocking_transfer>
   1e988:	9b01      	ldr	r3, [sp, #4]
   1e98a:	b9f8      	cbnz	r0, 1e9cc <am_hal_ble_patch_apply+0x35c>
   1e98c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1e990:	6831      	ldr	r1, [r6, #0]
   1e992:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   1e996:	2a04      	cmp	r2, #4
   1e998:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   1e99c:	f04f 0101 	mov.w	r1, #1
   1e9a0:	d112      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e9a2:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   1e9a6:	f89d 2009 	ldrb.w	r2, [sp, #9]
   1e9aa:	4294      	cmp	r4, r2
   1e9ac:	d10c      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e9ae:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1e9b2:	4290      	cmp	r0, r2
   1e9b4:	d108      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e9b6:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1e9ba:	4291      	cmp	r1, r2
   1e9bc:	d104      	bne.n	1e9c8 <am_hal_ble_patch_apply+0x358>
   1e9be:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1e9c2:	2a00      	cmp	r2, #0
   1e9c4:	f43f aeba 	beq.w	1e73c <am_hal_ble_patch_apply+0xcc>
   1e9c8:	2301      	movs	r3, #1
   1e9ca:	e6b7      	b.n	1e73c <am_hal_ble_patch_apply+0xcc>
   1e9cc:	4603      	mov	r3, r0
   1e9ce:	e6b5      	b.n	1e73c <am_hal_ble_patch_apply+0xcc>

0001e9d0 <am_hal_ble_int_enable>:
   1e9d0:	b128      	cbz	r0, 1e9de <am_hal_ble_int_enable+0xe>
   1e9d2:	6803      	ldr	r3, [r0, #0]
   1e9d4:	4a0c      	ldr	r2, [pc, #48]	; (1ea08 <am_hal_ble_int_enable+0x38>)
   1e9d6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e9da:	4293      	cmp	r3, r2
   1e9dc:	d001      	beq.n	1e9e2 <am_hal_ble_int_enable+0x12>
   1e9de:	2002      	movs	r0, #2
   1e9e0:	4770      	bx	lr
   1e9e2:	b510      	push	{r4, lr}
   1e9e4:	b082      	sub	sp, #8
   1e9e6:	460c      	mov	r4, r1
   1e9e8:	f001 faf8 	bl	1ffdc <am_hal_interrupt_master_disable>
   1e9ec:	4b07      	ldr	r3, [pc, #28]	; (1ea0c <am_hal_ble_int_enable+0x3c>)
   1e9ee:	9001      	str	r0, [sp, #4]
   1e9f0:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   1e9f4:	4321      	orrs	r1, r4
   1e9f6:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   1e9fa:	9801      	ldr	r0, [sp, #4]
   1e9fc:	f001 faf2 	bl	1ffe4 <am_hal_interrupt_master_set>
   1ea00:	2000      	movs	r0, #0
   1ea02:	b002      	add	sp, #8
   1ea04:	bd10      	pop	{r4, pc}
   1ea06:	bf00      	nop
   1ea08:	01775230 	.word	0x01775230
   1ea0c:	5000c000 	.word	0x5000c000

0001ea10 <am_hal_ble_int_status>:
   1ea10:	4b05      	ldr	r3, [pc, #20]	; (1ea28 <am_hal_ble_int_status+0x18>)
   1ea12:	b911      	cbnz	r1, 1ea1a <am_hal_ble_int_status+0xa>
   1ea14:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   1ea18:	4770      	bx	lr
   1ea1a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   1ea1e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   1ea22:	4018      	ands	r0, r3
   1ea24:	4770      	bx	lr
   1ea26:	bf00      	nop
   1ea28:	5000c000 	.word	0x5000c000

0001ea2c <am_hal_ble_int_clear>:
   1ea2c:	b128      	cbz	r0, 1ea3a <am_hal_ble_int_clear+0xe>
   1ea2e:	6803      	ldr	r3, [r0, #0]
   1ea30:	4a05      	ldr	r2, [pc, #20]	; (1ea48 <am_hal_ble_int_clear+0x1c>)
   1ea32:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ea36:	4293      	cmp	r3, r2
   1ea38:	d001      	beq.n	1ea3e <am_hal_ble_int_clear+0x12>
   1ea3a:	2002      	movs	r0, #2
   1ea3c:	4770      	bx	lr
   1ea3e:	4b03      	ldr	r3, [pc, #12]	; (1ea4c <am_hal_ble_int_clear+0x20>)
   1ea40:	2000      	movs	r0, #0
   1ea42:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   1ea46:	4770      	bx	lr
   1ea48:	01775230 	.word	0x01775230
   1ea4c:	5000c000 	.word	0x5000c000

0001ea50 <am_hal_ble_plf_reg_read>:
   1ea50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea54:	b092      	sub	sp, #72	; 0x48
   1ea56:	0a0e      	lsrs	r6, r1, #8
   1ea58:	0c0d      	lsrs	r5, r1, #16
   1ea5a:	2300      	movs	r3, #0
   1ea5c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   1ea60:	f88d 100c 	strb.w	r1, [sp, #12]
   1ea64:	f88d 600d 	strb.w	r6, [sp, #13]
   1ea68:	f88d 500e 	strb.w	r5, [sp, #14]
   1ea6c:	2401      	movs	r4, #1
   1ea6e:	2702      	movs	r7, #2
   1ea70:	26fd      	movs	r6, #253	; 0xfd
   1ea72:	2504      	movs	r5, #4
   1ea74:	4952      	ldr	r1, [pc, #328]	; (1ebc0 <am_hal_ble_plf_reg_read+0x170>)
   1ea76:	f88d e00f 	strb.w	lr, [sp, #15]
   1ea7a:	f88d 7009 	strb.w	r7, [sp, #9]
   1ea7e:	f88d 500b 	strb.w	r5, [sp, #11]
   1ea82:	930a      	str	r3, [sp, #40]	; 0x28
   1ea84:	930b      	str	r3, [sp, #44]	; 0x2c
   1ea86:	930c      	str	r3, [sp, #48]	; 0x30
   1ea88:	f88d 4008 	strb.w	r4, [sp, #8]
   1ea8c:	f88d 600a 	strb.w	r6, [sp, #10]
   1ea90:	f10d 0e08 	add.w	lr, sp, #8
   1ea94:	2508      	movs	r5, #8
   1ea96:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   1ea9a:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   1ea9e:	4617      	mov	r7, r2
   1eaa0:	f88d 3014 	strb.w	r3, [sp, #20]
   1eaa4:	f88d 3015 	strb.w	r3, [sp, #21]
   1eaa8:	f88d 3016 	strb.w	r3, [sp, #22]
   1eaac:	f88d 3017 	strb.w	r3, [sp, #23]
   1eab0:	f88d 401a 	strb.w	r4, [sp, #26]
   1eab4:	f88d 301b 	strb.w	r3, [sp, #27]
   1eab8:	f88d 301c 	strb.w	r3, [sp, #28]
   1eabc:	9308      	str	r3, [sp, #32]
   1eabe:	9309      	str	r3, [sp, #36]	; 0x24
   1eac0:	f8cd e010 	str.w	lr, [sp, #16]
   1eac4:	f8ad 5018 	strh.w	r5, [sp, #24]
   1eac8:	4680      	mov	r8, r0
   1eaca:	b128      	cbz	r0, 1ead8 <am_hal_ble_plf_reg_read+0x88>
   1eacc:	6803      	ldr	r3, [r0, #0]
   1eace:	4a3d      	ldr	r2, [pc, #244]	; (1ebc4 <am_hal_ble_plf_reg_read+0x174>)
   1ead0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ead4:	4293      	cmp	r3, r2
   1ead6:	d06e      	beq.n	1ebb6 <am_hal_ble_plf_reg_read+0x166>
   1ead8:	4d39      	ldr	r5, [pc, #228]	; (1ebc0 <am_hal_ble_plf_reg_read+0x170>)
   1eada:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   1eade:	f043 0302 	orr.w	r3, r3, #2
   1eae2:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1eae6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1eaea:	0619      	lsls	r1, r3, #24
   1eaec:	d40a      	bmi.n	1eb04 <am_hal_ble_plf_reg_read+0xb4>
   1eaee:	4c36      	ldr	r4, [pc, #216]	; (1ebc8 <am_hal_ble_plf_reg_read+0x178>)
   1eaf0:	e001      	b.n	1eaf6 <am_hal_ble_plf_reg_read+0xa6>
   1eaf2:	3c01      	subs	r4, #1
   1eaf4:	d05b      	beq.n	1ebae <am_hal_ble_plf_reg_read+0x15e>
   1eaf6:	2010      	movs	r0, #16
   1eaf8:	f001 f866 	bl	1fbc8 <am_hal_flash_delay>
   1eafc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1eb00:	061a      	lsls	r2, r3, #24
   1eb02:	d5f6      	bpl.n	1eaf2 <am_hal_ble_plf_reg_read+0xa2>
   1eb04:	2300      	movs	r3, #0
   1eb06:	2202      	movs	r2, #2
   1eb08:	a901      	add	r1, sp, #4
   1eb0a:	9104      	str	r1, [sp, #16]
   1eb0c:	f88d 3014 	strb.w	r3, [sp, #20]
   1eb10:	f88d 3015 	strb.w	r3, [sp, #21]
   1eb14:	f88d 3016 	strb.w	r3, [sp, #22]
   1eb18:	f88d 3017 	strb.w	r3, [sp, #23]
   1eb1c:	f88d 301b 	strb.w	r3, [sp, #27]
   1eb20:	f88d 301c 	strb.w	r3, [sp, #28]
   1eb24:	9308      	str	r3, [sp, #32]
   1eb26:	9309      	str	r3, [sp, #36]	; 0x24
   1eb28:	f8ad 2018 	strh.w	r2, [sp, #24]
   1eb2c:	f88d 201a 	strb.w	r2, [sp, #26]
   1eb30:	f1b8 0f00 	cmp.w	r8, #0
   1eb34:	d006      	beq.n	1eb44 <am_hal_ble_plf_reg_read+0xf4>
   1eb36:	f8d8 4000 	ldr.w	r4, [r8]
   1eb3a:	4b22      	ldr	r3, [pc, #136]	; (1ebc4 <am_hal_ble_plf_reg_read+0x174>)
   1eb3c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   1eb40:	429c      	cmp	r4, r3
   1eb42:	d00e      	beq.n	1eb62 <am_hal_ble_plf_reg_read+0x112>
   1eb44:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1eb48:	990c      	ldr	r1, [sp, #48]	; 0x30
   1eb4a:	4a1d      	ldr	r2, [pc, #116]	; (1ebc0 <am_hal_ble_plf_reg_read+0x170>)
   1eb4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1eb50:	2000      	movs	r0, #0
   1eb52:	603b      	str	r3, [r7, #0]
   1eb54:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   1eb58:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   1eb5c:	b012      	add	sp, #72	; 0x48
   1eb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb62:	4b17      	ldr	r3, [pc, #92]	; (1ebc0 <am_hal_ble_plf_reg_read+0x170>)
   1eb64:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1eb68:	061b      	lsls	r3, r3, #24
   1eb6a:	d5eb      	bpl.n	1eb44 <am_hal_ble_plf_reg_read+0xf4>
   1eb6c:	a904      	add	r1, sp, #16
   1eb6e:	4640      	mov	r0, r8
   1eb70:	f7ff f80c 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1eb74:	2800      	cmp	r0, #0
   1eb76:	d1e5      	bne.n	1eb44 <am_hal_ble_plf_reg_read+0xf4>
   1eb78:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1eb7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1eb80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1eb84:	b29b      	uxth	r3, r3
   1eb86:	aa0a      	add	r2, sp, #40	; 0x28
   1eb88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1eb8c:	f8ad 3018 	strh.w	r3, [sp, #24]
   1eb90:	9204      	str	r2, [sp, #16]
   1eb92:	d8d7      	bhi.n	1eb44 <am_hal_ble_plf_reg_read+0xf4>
   1eb94:	f8d8 2000 	ldr.w	r2, [r8]
   1eb98:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1eb9c:	42a2      	cmp	r2, r4
   1eb9e:	d1d1      	bne.n	1eb44 <am_hal_ble_plf_reg_read+0xf4>
   1eba0:	2b00      	cmp	r3, #0
   1eba2:	d0cf      	beq.n	1eb44 <am_hal_ble_plf_reg_read+0xf4>
   1eba4:	a904      	add	r1, sp, #16
   1eba6:	4640      	mov	r0, r8
   1eba8:	f7fe fff0 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ebac:	e7ca      	b.n	1eb44 <am_hal_ble_plf_reg_read+0xf4>
   1ebae:	4807      	ldr	r0, [pc, #28]	; (1ebcc <am_hal_ble_plf_reg_read+0x17c>)
   1ebb0:	b012      	add	sp, #72	; 0x48
   1ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ebb6:	a904      	add	r1, sp, #16
   1ebb8:	f7fe ffe8 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ebbc:	e78c      	b.n	1ead8 <am_hal_ble_plf_reg_read+0x88>
   1ebbe:	bf00      	nop
   1ebc0:	5000c000 	.word	0x5000c000
   1ebc4:	01775230 	.word	0x01775230
   1ebc8:	0007a120 	.word	0x0007a120
   1ebcc:	08000004 	.word	0x08000004

0001ebd0 <am_hal_ble_plf_reg_write>:
   1ebd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebd2:	b091      	sub	sp, #68	; 0x44
   1ebd4:	0c0f      	lsrs	r7, r1, #16
   1ebd6:	0e0e      	lsrs	r6, r1, #24
   1ebd8:	0c14      	lsrs	r4, r2, #16
   1ebda:	0e13      	lsrs	r3, r2, #24
   1ebdc:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   1ebe0:	0a15      	lsrs	r5, r2, #8
   1ebe2:	f88d 2008 	strb.w	r2, [sp, #8]
   1ebe6:	f88d 6007 	strb.w	r6, [sp, #7]
   1ebea:	f88d 400a 	strb.w	r4, [sp, #10]
   1ebee:	f88d 300b 	strb.w	r3, [sp, #11]
   1ebf2:	f88d 1004 	strb.w	r1, [sp, #4]
   1ebf6:	f88d e005 	strb.w	lr, [sp, #5]
   1ebfa:	f88d 7006 	strb.w	r7, [sp, #6]
   1ebfe:	f88d 5009 	strb.w	r5, [sp, #9]
   1ec02:	ab01      	add	r3, sp, #4
   1ec04:	4606      	mov	r6, r0
   1ec06:	e893 0003 	ldmia.w	r3, {r0, r1}
   1ec0a:	ab04      	add	r3, sp, #16
   1ec0c:	e883 0003 	stmia.w	r3, {r0, r1}
   1ec10:	4a47      	ldr	r2, [pc, #284]	; (1ed30 <am_hal_ble_plf_reg_write+0x160>)
   1ec12:	4b48      	ldr	r3, [pc, #288]	; (1ed34 <am_hal_ble_plf_reg_write+0x164>)
   1ec14:	9303      	str	r3, [sp, #12]
   1ec16:	ac03      	add	r4, sp, #12
   1ec18:	2300      	movs	r3, #0
   1ec1a:	200c      	movs	r0, #12
   1ec1c:	2101      	movs	r1, #1
   1ec1e:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   1ec22:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   1ec26:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1ec2a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   1ec2e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   1ec32:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1ec36:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1ec3a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1ec3e:	930e      	str	r3, [sp, #56]	; 0x38
   1ec40:	930f      	str	r3, [sp, #60]	; 0x3c
   1ec42:	940a      	str	r4, [sp, #40]	; 0x28
   1ec44:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   1ec48:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   1ec4c:	b12e      	cbz	r6, 1ec5a <am_hal_ble_plf_reg_write+0x8a>
   1ec4e:	6833      	ldr	r3, [r6, #0]
   1ec50:	4a39      	ldr	r2, [pc, #228]	; (1ed38 <am_hal_ble_plf_reg_write+0x168>)
   1ec52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ec56:	4293      	cmp	r3, r2
   1ec58:	d064      	beq.n	1ed24 <am_hal_ble_plf_reg_write+0x154>
   1ec5a:	4d35      	ldr	r5, [pc, #212]	; (1ed30 <am_hal_ble_plf_reg_write+0x160>)
   1ec5c:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   1ec60:	f043 0302 	orr.w	r3, r3, #2
   1ec64:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1ec68:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1ec6c:	0619      	lsls	r1, r3, #24
   1ec6e:	bf58      	it	pl
   1ec70:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   1ec74:	d502      	bpl.n	1ec7c <am_hal_ble_plf_reg_write+0xac>
   1ec76:	e008      	b.n	1ec8a <am_hal_ble_plf_reg_write+0xba>
   1ec78:	3c01      	subs	r4, #1
   1ec7a:	d050      	beq.n	1ed1e <am_hal_ble_plf_reg_write+0x14e>
   1ec7c:	2010      	movs	r0, #16
   1ec7e:	f000 ffa3 	bl	1fbc8 <am_hal_flash_delay>
   1ec82:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1ec86:	061a      	lsls	r2, r3, #24
   1ec88:	d5f6      	bpl.n	1ec78 <am_hal_ble_plf_reg_write+0xa8>
   1ec8a:	2300      	movs	r3, #0
   1ec8c:	2202      	movs	r2, #2
   1ec8e:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   1ec92:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1ec96:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   1ec9a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   1ec9e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1eca2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1eca6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1ecaa:	930e      	str	r3, [sp, #56]	; 0x38
   1ecac:	930f      	str	r3, [sp, #60]	; 0x3c
   1ecae:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   1ecb2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   1ecb6:	b12e      	cbz	r6, 1ecc4 <am_hal_ble_plf_reg_write+0xf4>
   1ecb8:	6834      	ldr	r4, [r6, #0]
   1ecba:	4b1f      	ldr	r3, [pc, #124]	; (1ed38 <am_hal_ble_plf_reg_write+0x168>)
   1ecbc:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   1ecc0:	429c      	cmp	r4, r3
   1ecc2:	d007      	beq.n	1ecd4 <am_hal_ble_plf_reg_write+0x104>
   1ecc4:	4b1a      	ldr	r3, [pc, #104]	; (1ed30 <am_hal_ble_plf_reg_write+0x160>)
   1ecc6:	2000      	movs	r0, #0
   1ecc8:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   1eccc:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   1ecd0:	b011      	add	sp, #68	; 0x44
   1ecd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ecd4:	4b16      	ldr	r3, [pc, #88]	; (1ed30 <am_hal_ble_plf_reg_write+0x160>)
   1ecd6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1ecda:	061b      	lsls	r3, r3, #24
   1ecdc:	d5f2      	bpl.n	1ecc4 <am_hal_ble_plf_reg_write+0xf4>
   1ecde:	a90a      	add	r1, sp, #40	; 0x28
   1ece0:	4630      	mov	r0, r6
   1ece2:	f7fe ff53 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ece6:	2800      	cmp	r0, #0
   1ece8:	d1ec      	bne.n	1ecc4 <am_hal_ble_plf_reg_write+0xf4>
   1ecea:	f89d 2001 	ldrb.w	r2, [sp, #1]
   1ecee:	f89d 3000 	ldrb.w	r3, [sp]
   1ecf2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1ecf6:	b29b      	uxth	r3, r3
   1ecf8:	aa06      	add	r2, sp, #24
   1ecfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1ecfe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1ed02:	920a      	str	r2, [sp, #40]	; 0x28
   1ed04:	d8de      	bhi.n	1ecc4 <am_hal_ble_plf_reg_write+0xf4>
   1ed06:	6832      	ldr	r2, [r6, #0]
   1ed08:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1ed0c:	42a2      	cmp	r2, r4
   1ed0e:	d1d9      	bne.n	1ecc4 <am_hal_ble_plf_reg_write+0xf4>
   1ed10:	2b00      	cmp	r3, #0
   1ed12:	d0d7      	beq.n	1ecc4 <am_hal_ble_plf_reg_write+0xf4>
   1ed14:	a90a      	add	r1, sp, #40	; 0x28
   1ed16:	4630      	mov	r0, r6
   1ed18:	f7fe ff38 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ed1c:	e7d2      	b.n	1ecc4 <am_hal_ble_plf_reg_write+0xf4>
   1ed1e:	4807      	ldr	r0, [pc, #28]	; (1ed3c <am_hal_ble_plf_reg_write+0x16c>)
   1ed20:	b011      	add	sp, #68	; 0x44
   1ed22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed24:	a90a      	add	r1, sp, #40	; 0x28
   1ed26:	4630      	mov	r0, r6
   1ed28:	f7fe ff30 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ed2c:	e795      	b.n	1ec5a <am_hal_ble_plf_reg_write+0x8a>
   1ed2e:	bf00      	nop
   1ed30:	5000c000 	.word	0x5000c000
   1ed34:	08fd0301 	.word	0x08fd0301
   1ed38:	01775230 	.word	0x01775230
   1ed3c:	08000004 	.word	0x08000004

0001ed40 <am_hal_ble_transmitter_modex_set>:
   1ed40:	b530      	push	{r4, r5, lr}
   1ed42:	b085      	sub	sp, #20
   1ed44:	4604      	mov	r4, r0
   1ed46:	2300      	movs	r3, #0
   1ed48:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   1ed4c:	466a      	mov	r2, sp
   1ed4e:	4927      	ldr	r1, [pc, #156]	; (1edec <am_hal_ble_transmitter_modex_set+0xac>)
   1ed50:	9303      	str	r3, [sp, #12]
   1ed52:	f7ff fe7d 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1ed56:	4620      	mov	r0, r4
   1ed58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ed5c:	4923      	ldr	r1, [pc, #140]	; (1edec <am_hal_ble_transmitter_modex_set+0xac>)
   1ed5e:	f7ff ff37 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1ed62:	aa03      	add	r2, sp, #12
   1ed64:	4620      	mov	r0, r4
   1ed66:	4922      	ldr	r1, [pc, #136]	; (1edf0 <am_hal_ble_transmitter_modex_set+0xb0>)
   1ed68:	f7ff fe72 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1ed6c:	9b03      	ldr	r3, [sp, #12]
   1ed6e:	aa02      	add	r2, sp, #8
   1ed70:	f043 0308 	orr.w	r3, r3, #8
   1ed74:	4620      	mov	r0, r4
   1ed76:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   1ed7a:	9303      	str	r3, [sp, #12]
   1ed7c:	f7ff fe68 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1ed80:	9b02      	ldr	r3, [sp, #8]
   1ed82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ed86:	461a      	mov	r2, r3
   1ed88:	4620      	mov	r0, r4
   1ed8a:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   1ed8e:	9302      	str	r3, [sp, #8]
   1ed90:	f7ff ff1e 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1ed94:	aa01      	add	r2, sp, #4
   1ed96:	4620      	mov	r0, r4
   1ed98:	4916      	ldr	r1, [pc, #88]	; (1edf4 <am_hal_ble_transmitter_modex_set+0xb4>)
   1ed9a:	f7ff fe59 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1ed9e:	9a01      	ldr	r2, [sp, #4]
   1eda0:	4914      	ldr	r1, [pc, #80]	; (1edf4 <am_hal_ble_transmitter_modex_set+0xb4>)
   1eda2:	4620      	mov	r0, r4
   1eda4:	f042 0208 	orr.w	r2, r2, #8
   1eda8:	f7ff ff12 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1edac:	006a      	lsls	r2, r5, #1
   1edae:	f042 0201 	orr.w	r2, r2, #1
   1edb2:	4620      	mov	r0, r4
   1edb4:	4910      	ldr	r1, [pc, #64]	; (1edf8 <am_hal_ble_transmitter_modex_set+0xb8>)
   1edb6:	f7ff ff0b 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1edba:	490d      	ldr	r1, [pc, #52]	; (1edf0 <am_hal_ble_transmitter_modex_set+0xb0>)
   1edbc:	9a03      	ldr	r2, [sp, #12]
   1edbe:	4620      	mov	r0, r4
   1edc0:	f7ff ff06 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1edc4:	4b0d      	ldr	r3, [pc, #52]	; (1edfc <am_hal_ble_transmitter_modex_set+0xbc>)
   1edc6:	68db      	ldr	r3, [r3, #12]
   1edc8:	b2db      	uxtb	r3, r3
   1edca:	2b21      	cmp	r3, #33	; 0x21
   1edcc:	bf0c      	ite	eq
   1edce:	490c      	ldreq	r1, [pc, #48]	; (1ee00 <am_hal_ble_transmitter_modex_set+0xc0>)
   1edd0:	490c      	ldrne	r1, [pc, #48]	; (1ee04 <am_hal_ble_transmitter_modex_set+0xc4>)
   1edd2:	462a      	mov	r2, r5
   1edd4:	4620      	mov	r0, r4
   1edd6:	f7ff fefb 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1edda:	4620      	mov	r0, r4
   1eddc:	9a00      	ldr	r2, [sp, #0]
   1edde:	4903      	ldr	r1, [pc, #12]	; (1edec <am_hal_ble_transmitter_modex_set+0xac>)
   1ede0:	f7ff fef6 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1ede4:	2000      	movs	r0, #0
   1ede6:	b005      	add	sp, #20
   1ede8:	bd30      	pop	{r4, r5, pc}
   1edea:	bf00      	nop
   1edec:	43000004 	.word	0x43000004
   1edf0:	52000008 	.word	0x52000008
   1edf4:	45800070 	.word	0x45800070
   1edf8:	52000014 	.word	0x52000014
   1edfc:	40020000 	.word	0x40020000
   1ee00:	20006874 	.word	0x20006874
   1ee04:	20006070 	.word	0x20006070

0001ee08 <am_hal_ble_patch_complete.part.10>:
   1ee08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee0c:	b08c      	sub	sp, #48	; 0x30
   1ee0e:	2300      	movs	r3, #0
   1ee10:	9308      	str	r3, [sp, #32]
   1ee12:	2201      	movs	r2, #1
   1ee14:	2506      	movs	r5, #6
   1ee16:	24ee      	movs	r4, #238	; 0xee
   1ee18:	21f1      	movs	r1, #241	; 0xf1
   1ee1a:	9307      	str	r3, [sp, #28]
   1ee1c:	9309      	str	r3, [sp, #36]	; 0x24
   1ee1e:	930a      	str	r3, [sp, #40]	; 0x28
   1ee20:	930b      	str	r3, [sp, #44]	; 0x2c
   1ee22:	f88d 3004 	strb.w	r3, [sp, #4]
   1ee26:	f88d 3005 	strb.w	r3, [sp, #5]
   1ee2a:	2302      	movs	r3, #2
   1ee2c:	f8ad 5020 	strh.w	r5, [sp, #32]
   1ee30:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1ee34:	f88d 2000 	strb.w	r2, [sp]
   1ee38:	f8cd d018 	str.w	sp, [sp, #24]
   1ee3c:	f88d 4001 	strb.w	r4, [sp, #1]
   1ee40:	f88d 1002 	strb.w	r1, [sp, #2]
   1ee44:	f88d 3003 	strb.w	r3, [sp, #3]
   1ee48:	4605      	mov	r5, r0
   1ee4a:	2800      	cmp	r0, #0
   1ee4c:	f000 80e4 	beq.w	1f018 <am_hal_ble_patch_complete.part.10+0x210>
   1ee50:	4e7d      	ldr	r6, [pc, #500]	; (1f048 <am_hal_ble_patch_complete.part.10+0x240>)
   1ee52:	f241 3488 	movw	r4, #5000	; 0x1388
   1ee56:	e001      	b.n	1ee5c <am_hal_ble_patch_complete.part.10+0x54>
   1ee58:	3c01      	subs	r4, #1
   1ee5a:	d00d      	beq.n	1ee78 <am_hal_ble_patch_complete.part.10+0x70>
   1ee5c:	682b      	ldr	r3, [r5, #0]
   1ee5e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ee62:	42b3      	cmp	r3, r6
   1ee64:	d1f8      	bne.n	1ee58 <am_hal_ble_patch_complete.part.10+0x50>
   1ee66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1ee6a:	a906      	add	r1, sp, #24
   1ee6c:	4628      	mov	r0, r5
   1ee6e:	b11b      	cbz	r3, 1ee78 <am_hal_ble_patch_complete.part.10+0x70>
   1ee70:	f7fe fe8c 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ee74:	2800      	cmp	r0, #0
   1ee76:	d1ef      	bne.n	1ee58 <am_hal_ble_patch_complete.part.10+0x50>
   1ee78:	4b74      	ldr	r3, [pc, #464]	; (1f04c <am_hal_ble_patch_complete.part.10+0x244>)
   1ee7a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1ee7e:	061b      	lsls	r3, r3, #24
   1ee80:	f100 80d1 	bmi.w	1f026 <am_hal_ble_patch_complete.part.10+0x21e>
   1ee84:	4c72      	ldr	r4, [pc, #456]	; (1f050 <am_hal_ble_patch_complete.part.10+0x248>)
   1ee86:	4e71      	ldr	r6, [pc, #452]	; (1f04c <am_hal_ble_patch_complete.part.10+0x244>)
   1ee88:	e001      	b.n	1ee8e <am_hal_ble_patch_complete.part.10+0x86>
   1ee8a:	3c01      	subs	r4, #1
   1ee8c:	d019      	beq.n	1eec2 <am_hal_ble_patch_complete.part.10+0xba>
   1ee8e:	2010      	movs	r0, #16
   1ee90:	f000 fe9a 	bl	1fbc8 <am_hal_flash_delay>
   1ee94:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1ee98:	061f      	lsls	r7, r3, #24
   1ee9a:	d5f6      	bpl.n	1ee8a <am_hal_ble_patch_complete.part.10+0x82>
   1ee9c:	2302      	movs	r3, #2
   1ee9e:	af03      	add	r7, sp, #12
   1eea0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1eea4:	f8ad 3020 	strh.w	r3, [sp, #32]
   1eea8:	9706      	str	r7, [sp, #24]
   1eeaa:	b12d      	cbz	r5, 1eeb8 <am_hal_ble_patch_complete.part.10+0xb0>
   1eeac:	682e      	ldr	r6, [r5, #0]
   1eeae:	4b66      	ldr	r3, [pc, #408]	; (1f048 <am_hal_ble_patch_complete.part.10+0x240>)
   1eeb0:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   1eeb4:	429e      	cmp	r6, r3
   1eeb6:	d009      	beq.n	1eecc <am_hal_ble_patch_complete.part.10+0xc4>
   1eeb8:	2402      	movs	r4, #2
   1eeba:	4620      	mov	r0, r4
   1eebc:	b00c      	add	sp, #48	; 0x30
   1eebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eec2:	4c64      	ldr	r4, [pc, #400]	; (1f054 <am_hal_ble_patch_complete.part.10+0x24c>)
   1eec4:	4620      	mov	r0, r4
   1eec6:	b00c      	add	sp, #48	; 0x30
   1eec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eecc:	a906      	add	r1, sp, #24
   1eece:	4628      	mov	r0, r5
   1eed0:	f7fe fe5c 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1eed4:	4604      	mov	r4, r0
   1eed6:	2800      	cmp	r0, #0
   1eed8:	d1ef      	bne.n	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1eeda:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1eede:	29ee      	cmp	r1, #238	; 0xee
   1eee0:	d01a      	beq.n	1ef18 <am_hal_ble_patch_complete.part.10+0x110>
   1eee2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1eee6:	682a      	ldr	r2, [r5, #0]
   1eee8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1eeec:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1eef0:	b29b      	uxth	r3, r3
   1eef2:	42b2      	cmp	r2, r6
   1eef4:	f8ad 3020 	strh.w	r3, [sp, #32]
   1eef8:	d1de      	bne.n	1eeb8 <am_hal_ble_patch_complete.part.10+0xb0>
   1eefa:	b133      	cbz	r3, 1ef0a <am_hal_ble_patch_complete.part.10+0x102>
   1eefc:	a906      	add	r1, sp, #24
   1eefe:	4628      	mov	r0, r5
   1ef00:	f7fe fe44 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ef04:	b108      	cbz	r0, 1ef0a <am_hal_ble_patch_complete.part.10+0x102>
   1ef06:	4604      	mov	r4, r0
   1ef08:	e7d7      	b.n	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1ef0a:	2301      	movs	r3, #1
   1ef0c:	4620      	mov	r0, r4
   1ef0e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   1ef12:	b00c      	add	sp, #48	; 0x30
   1ef14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef18:	682b      	ldr	r3, [r5, #0]
   1ef1a:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   1ef1e:	2203      	movs	r2, #3
   1ef20:	45b0      	cmp	r8, r6
   1ef22:	f8ad 2020 	strh.w	r2, [sp, #32]
   1ef26:	d1c7      	bne.n	1eeb8 <am_hal_ble_patch_complete.part.10+0xb0>
   1ef28:	a906      	add	r1, sp, #24
   1ef2a:	4628      	mov	r0, r5
   1ef2c:	f7fe fe2e 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ef30:	4604      	mov	r4, r0
   1ef32:	2800      	cmp	r0, #0
   1ef34:	d1c1      	bne.n	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1ef36:	2301      	movs	r3, #1
   1ef38:	2005      	movs	r0, #5
   1ef3a:	2104      	movs	r1, #4
   1ef3c:	22fd      	movs	r2, #253	; 0xfd
   1ef3e:	9408      	str	r4, [sp, #32]
   1ef40:	9407      	str	r4, [sp, #28]
   1ef42:	9409      	str	r4, [sp, #36]	; 0x24
   1ef44:	940a      	str	r4, [sp, #40]	; 0x28
   1ef46:	940b      	str	r4, [sp, #44]	; 0x2c
   1ef48:	f8cd d018 	str.w	sp, [sp, #24]
   1ef4c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1ef50:	f88d 3000 	strb.w	r3, [sp]
   1ef54:	f88d 3003 	strb.w	r3, [sp, #3]
   1ef58:	f88d 3004 	strb.w	r3, [sp, #4]
   1ef5c:	f8ad 0020 	strh.w	r0, [sp, #32]
   1ef60:	f88d 1001 	strb.w	r1, [sp, #1]
   1ef64:	f88d 2002 	strb.w	r2, [sp, #2]
   1ef68:	f241 3688 	movw	r6, #5000	; 0x1388
   1ef6c:	e002      	b.n	1ef74 <am_hal_ble_patch_complete.part.10+0x16c>
   1ef6e:	2402      	movs	r4, #2
   1ef70:	3e01      	subs	r6, #1
   1ef72:	d0a2      	beq.n	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1ef74:	682b      	ldr	r3, [r5, #0]
   1ef76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ef7a:	4543      	cmp	r3, r8
   1ef7c:	d1f7      	bne.n	1ef6e <am_hal_ble_patch_complete.part.10+0x166>
   1ef7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1ef82:	a906      	add	r1, sp, #24
   1ef84:	4628      	mov	r0, r5
   1ef86:	b123      	cbz	r3, 1ef92 <am_hal_ble_patch_complete.part.10+0x18a>
   1ef88:	f7fe fe00 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1ef8c:	4604      	mov	r4, r0
   1ef8e:	2800      	cmp	r0, #0
   1ef90:	d1ee      	bne.n	1ef70 <am_hal_ble_patch_complete.part.10+0x168>
   1ef92:	4e2e      	ldr	r6, [pc, #184]	; (1f04c <am_hal_ble_patch_complete.part.10+0x244>)
   1ef94:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1ef98:	0619      	lsls	r1, r3, #24
   1ef9a:	d40a      	bmi.n	1efb2 <am_hal_ble_patch_complete.part.10+0x1aa>
   1ef9c:	4c2c      	ldr	r4, [pc, #176]	; (1f050 <am_hal_ble_patch_complete.part.10+0x248>)
   1ef9e:	e001      	b.n	1efa4 <am_hal_ble_patch_complete.part.10+0x19c>
   1efa0:	3c01      	subs	r4, #1
   1efa2:	d08e      	beq.n	1eec2 <am_hal_ble_patch_complete.part.10+0xba>
   1efa4:	2010      	movs	r0, #16
   1efa6:	f000 fe0f 	bl	1fbc8 <am_hal_flash_delay>
   1efaa:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1efae:	0618      	lsls	r0, r3, #24
   1efb0:	d5f6      	bpl.n	1efa0 <am_hal_ble_patch_complete.part.10+0x198>
   1efb2:	682e      	ldr	r6, [r5, #0]
   1efb4:	4b24      	ldr	r3, [pc, #144]	; (1f048 <am_hal_ble_patch_complete.part.10+0x240>)
   1efb6:	9706      	str	r7, [sp, #24]
   1efb8:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   1efbc:	2702      	movs	r7, #2
   1efbe:	2209      	movs	r2, #9
   1efc0:	429e      	cmp	r6, r3
   1efc2:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   1efc6:	f8ad 2020 	strh.w	r2, [sp, #32]
   1efca:	f47f af75 	bne.w	1eeb8 <am_hal_ble_patch_complete.part.10+0xb0>
   1efce:	a906      	add	r1, sp, #24
   1efd0:	4628      	mov	r0, r5
   1efd2:	f7fe fddb 	bl	1db8c <am_hal_ble_blocking_transfer.part.7>
   1efd6:	4604      	mov	r4, r0
   1efd8:	2800      	cmp	r0, #0
   1efda:	f47f af6e 	bne.w	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1efde:	682b      	ldr	r3, [r5, #0]
   1efe0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1efe4:	42b3      	cmp	r3, r6
   1efe6:	d026      	beq.n	1f036 <am_hal_ble_patch_complete.part.10+0x22e>
   1efe8:	2301      	movs	r3, #1
   1efea:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   1efee:	481a      	ldr	r0, [pc, #104]	; (1f058 <am_hal_ble_patch_complete.part.10+0x250>)
   1eff0:	f000 fdea 	bl	1fbc8 <am_hal_flash_delay>
   1eff4:	4a19      	ldr	r2, [pc, #100]	; (1f05c <am_hal_ble_patch_complete.part.10+0x254>)
   1eff6:	4b1a      	ldr	r3, [pc, #104]	; (1f060 <am_hal_ble_patch_complete.part.10+0x258>)
   1eff8:	6811      	ldr	r1, [r2, #0]
   1effa:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   1effe:	429a      	cmp	r2, r3
   1f000:	f47f af5b 	bne.w	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1f004:	b2c9      	uxtb	r1, r1
   1f006:	f1a1 0320 	sub.w	r3, r1, #32
   1f00a:	2b20      	cmp	r3, #32
   1f00c:	f63f af55 	bhi.w	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1f010:	4628      	mov	r0, r5
   1f012:	f7ff fe95 	bl	1ed40 <am_hal_ble_transmitter_modex_set>
   1f016:	e750      	b.n	1eeba <am_hal_ble_patch_complete.part.10+0xb2>
   1f018:	4b0c      	ldr	r3, [pc, #48]	; (1f04c <am_hal_ble_patch_complete.part.10+0x244>)
   1f01a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1f01e:	061a      	lsls	r2, r3, #24
   1f020:	f57f af30 	bpl.w	1ee84 <am_hal_ble_patch_complete.part.10+0x7c>
   1f024:	e748      	b.n	1eeb8 <am_hal_ble_patch_complete.part.10+0xb0>
   1f026:	2302      	movs	r3, #2
   1f028:	af03      	add	r7, sp, #12
   1f02a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1f02e:	f8ad 3020 	strh.w	r3, [sp, #32]
   1f032:	9706      	str	r7, [sp, #24]
   1f034:	e73a      	b.n	1eeac <am_hal_ble_patch_complete.part.10+0xa4>
   1f036:	4b05      	ldr	r3, [pc, #20]	; (1f04c <am_hal_ble_patch_complete.part.10+0x244>)
   1f038:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1f03c:	f367 0283 	bfi	r2, r7, #2, #2
   1f040:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1f044:	e7d0      	b.n	1efe8 <am_hal_ble_patch_complete.part.10+0x1e0>
   1f046:	bf00      	nop
   1f048:	01775230 	.word	0x01775230
   1f04c:	5000c000 	.word	0x5000c000
   1f050:	000186a0 	.word	0x000186a0
   1f054:	08000004 	.word	0x08000004
   1f058:	007a1200 	.word	0x007a1200
   1f05c:	50023808 	.word	0x50023808
   1f060:	18240600 	.word	0x18240600

0001f064 <am_hal_ble_boot>:
   1f064:	b128      	cbz	r0, 1f072 <am_hal_ble_boot+0xe>
   1f066:	6803      	ldr	r3, [r0, #0]
   1f068:	4a59      	ldr	r2, [pc, #356]	; (1f1d0 <am_hal_ble_boot+0x16c>)
   1f06a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f06e:	4293      	cmp	r3, r2
   1f070:	d001      	beq.n	1f076 <am_hal_ble_boot+0x12>
   1f072:	2002      	movs	r0, #2
   1f074:	4770      	bx	lr
   1f076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f07a:	7a03      	ldrb	r3, [r0, #8]
   1f07c:	b082      	sub	sp, #8
   1f07e:	4604      	mov	r4, r0
   1f080:	2b00      	cmp	r3, #0
   1f082:	d065      	beq.n	1f150 <am_hal_ble_boot+0xec>
   1f084:	4a53      	ldr	r2, [pc, #332]	; (1f1d4 <am_hal_ble_boot+0x170>)
   1f086:	68d3      	ldr	r3, [r2, #12]
   1f088:	b2db      	uxtb	r3, r3
   1f08a:	2b11      	cmp	r3, #17
   1f08c:	d076      	beq.n	1f17c <am_hal_ble_boot+0x118>
   1f08e:	68d3      	ldr	r3, [r2, #12]
   1f090:	b2db      	uxtb	r3, r3
   1f092:	2b12      	cmp	r3, #18
   1f094:	d072      	beq.n	1f17c <am_hal_ble_boot+0x118>
   1f096:	4b4f      	ldr	r3, [pc, #316]	; (1f1d4 <am_hal_ble_boot+0x170>)
   1f098:	68db      	ldr	r3, [r3, #12]
   1f09a:	b2db      	uxtb	r3, r3
   1f09c:	2b21      	cmp	r3, #33	; 0x21
   1f09e:	f000 808d 	beq.w	1f1bc <am_hal_ble_boot+0x158>
   1f0a2:	4b4d      	ldr	r3, [pc, #308]	; (1f1d8 <am_hal_ble_boot+0x174>)
   1f0a4:	68da      	ldr	r2, [r3, #12]
   1f0a6:	4b4d      	ldr	r3, [pc, #308]	; (1f1dc <am_hal_ble_boot+0x178>)
   1f0a8:	681b      	ldr	r3, [r3, #0]
   1f0aa:	ba1b      	rev	r3, r3
   1f0ac:	1c5d      	adds	r5, r3, #1
   1f0ae:	bf18      	it	ne
   1f0b0:	6093      	strne	r3, [r2, #8]
   1f0b2:	4b4b      	ldr	r3, [pc, #300]	; (1f1e0 <am_hal_ble_boot+0x17c>)
   1f0b4:	681b      	ldr	r3, [r3, #0]
   1f0b6:	1c58      	adds	r0, r3, #1
   1f0b8:	d009      	beq.n	1f0ce <am_hal_ble_boot+0x6a>
   1f0ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f0be:	ba1b      	rev	r3, r3
   1f0c0:	1c59      	adds	r1, r3, #1
   1f0c2:	d004      	beq.n	1f0ce <am_hal_ble_boot+0x6a>
   1f0c4:	68d1      	ldr	r1, [r2, #12]
   1f0c6:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   1f0ca:	430b      	orrs	r3, r1
   1f0cc:	60d3      	str	r3, [r2, #12]
   1f0ce:	4a41      	ldr	r2, [pc, #260]	; (1f1d4 <am_hal_ble_boot+0x170>)
   1f0d0:	68d3      	ldr	r3, [r2, #12]
   1f0d2:	b2db      	uxtb	r3, r3
   1f0d4:	2b11      	cmp	r3, #17
   1f0d6:	d031      	beq.n	1f13c <am_hal_ble_boot+0xd8>
   1f0d8:	68d3      	ldr	r3, [r2, #12]
   1f0da:	b2db      	uxtb	r3, r3
   1f0dc:	2b12      	cmp	r3, #18
   1f0de:	d02d      	beq.n	1f13c <am_hal_ble_boot+0xd8>
   1f0e0:	4a40      	ldr	r2, [pc, #256]	; (1f1e4 <am_hal_ble_boot+0x180>)
   1f0e2:	4b41      	ldr	r3, [pc, #260]	; (1f1e8 <am_hal_ble_boot+0x184>)
   1f0e4:	6816      	ldr	r6, [r2, #0]
   1f0e6:	681b      	ldr	r3, [r3, #0]
   1f0e8:	b1f6      	cbz	r6, 1f128 <am_hal_ble_boot+0xc4>
   1f0ea:	4d40      	ldr	r5, [pc, #256]	; (1f1ec <am_hal_ble_boot+0x188>)
   1f0ec:	f1a3 0804 	sub.w	r8, r3, #4
   1f0f0:	2700      	movs	r7, #0
   1f0f2:	f858 1f04 	ldr.w	r1, [r8, #4]!
   1f0f6:	684b      	ldr	r3, [r1, #4]
   1f0f8:	68c8      	ldr	r0, [r1, #12]
   1f0fa:	b16b      	cbz	r3, 1f118 <am_hal_ble_boot+0xb4>
   1f0fc:	eb00 0e03 	add.w	lr, r0, r3
   1f100:	2300      	movs	r3, #0
   1f102:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f106:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   1f10a:	4570      	cmp	r0, lr
   1f10c:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   1f110:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   1f114:	b29b      	uxth	r3, r3
   1f116:	d1f4      	bne.n	1f102 <am_hal_ble_boot+0x9e>
   1f118:	608b      	str	r3, [r1, #8]
   1f11a:	4620      	mov	r0, r4
   1f11c:	f7ff faa8 	bl	1e670 <am_hal_ble_patch_apply>
   1f120:	b948      	cbnz	r0, 1f136 <am_hal_ble_boot+0xd2>
   1f122:	3701      	adds	r7, #1
   1f124:	42b7      	cmp	r7, r6
   1f126:	d1e4      	bne.n	1f0f2 <am_hal_ble_boot+0x8e>
   1f128:	6823      	ldr	r3, [r4, #0]
   1f12a:	4a29      	ldr	r2, [pc, #164]	; (1f1d0 <am_hal_ble_boot+0x16c>)
   1f12c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f130:	4293      	cmp	r3, r2
   1f132:	d008      	beq.n	1f146 <am_hal_ble_boot+0xe2>
   1f134:	2002      	movs	r0, #2
   1f136:	b002      	add	sp, #8
   1f138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f13c:	4a2c      	ldr	r2, [pc, #176]	; (1f1f0 <am_hal_ble_boot+0x18c>)
   1f13e:	4b2d      	ldr	r3, [pc, #180]	; (1f1f4 <am_hal_ble_boot+0x190>)
   1f140:	6816      	ldr	r6, [r2, #0]
   1f142:	681b      	ldr	r3, [r3, #0]
   1f144:	e7d0      	b.n	1f0e8 <am_hal_ble_boot+0x84>
   1f146:	4620      	mov	r0, r4
   1f148:	f7ff fe5e 	bl	1ee08 <am_hal_ble_patch_complete.part.10>
   1f14c:	2800      	cmp	r0, #0
   1f14e:	d1f2      	bne.n	1f136 <am_hal_ble_boot+0xd2>
   1f150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f154:	4b1f      	ldr	r3, [pc, #124]	; (1f1d4 <am_hal_ble_boot+0x170>)
   1f156:	9201      	str	r2, [sp, #4]
   1f158:	68db      	ldr	r3, [r3, #12]
   1f15a:	b2db      	uxtb	r3, r3
   1f15c:	2b21      	cmp	r3, #33	; 0x21
   1f15e:	d030      	beq.n	1f1c2 <am_hal_ble_boot+0x15e>
   1f160:	4620      	mov	r0, r4
   1f162:	aa01      	add	r2, sp, #4
   1f164:	4924      	ldr	r1, [pc, #144]	; (1f1f8 <am_hal_ble_boot+0x194>)
   1f166:	f7ff fc73 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1f16a:	9b01      	ldr	r3, [sp, #4]
   1f16c:	4823      	ldr	r0, [pc, #140]	; (1f1fc <am_hal_ble_boot+0x198>)
   1f16e:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   1f172:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1f176:	bf98      	it	ls
   1f178:	2000      	movls	r0, #0
   1f17a:	e7dc      	b.n	1f136 <am_hal_ble_boot+0xd2>
   1f17c:	4b20      	ldr	r3, [pc, #128]	; (1f200 <am_hal_ble_boot+0x19c>)
   1f17e:	681b      	ldr	r3, [r3, #0]
   1f180:	6819      	ldr	r1, [r3, #0]
   1f182:	684b      	ldr	r3, [r1, #4]
   1f184:	68c8      	ldr	r0, [r1, #12]
   1f186:	b16b      	cbz	r3, 1f1a4 <am_hal_ble_boot+0x140>
   1f188:	4e18      	ldr	r6, [pc, #96]	; (1f1ec <am_hal_ble_boot+0x188>)
   1f18a:	18c5      	adds	r5, r0, r3
   1f18c:	2300      	movs	r3, #0
   1f18e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f192:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   1f196:	4285      	cmp	r5, r0
   1f198:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   1f19c:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   1f1a0:	b29b      	uxth	r3, r3
   1f1a2:	d1f4      	bne.n	1f18e <am_hal_ble_boot+0x12a>
   1f1a4:	608b      	str	r3, [r1, #8]
   1f1a6:	4620      	mov	r0, r4
   1f1a8:	f7ff fa62 	bl	1e670 <am_hal_ble_patch_apply>
   1f1ac:	2800      	cmp	r0, #0
   1f1ae:	d1c2      	bne.n	1f136 <am_hal_ble_boot+0xd2>
   1f1b0:	4620      	mov	r0, r4
   1f1b2:	f7ff f921 	bl	1e3f8 <am_hal_ble_patch_copy_end_apply>
   1f1b6:	2800      	cmp	r0, #0
   1f1b8:	d1bd      	bne.n	1f136 <am_hal_ble_boot+0xd2>
   1f1ba:	e76c      	b.n	1f096 <am_hal_ble_boot+0x32>
   1f1bc:	4b11      	ldr	r3, [pc, #68]	; (1f204 <am_hal_ble_boot+0x1a0>)
   1f1be:	68da      	ldr	r2, [r3, #12]
   1f1c0:	e771      	b.n	1f0a6 <am_hal_ble_boot+0x42>
   1f1c2:	4620      	mov	r0, r4
   1f1c4:	aa01      	add	r2, sp, #4
   1f1c6:	4910      	ldr	r1, [pc, #64]	; (1f208 <am_hal_ble_boot+0x1a4>)
   1f1c8:	f7ff fc42 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1f1cc:	e7cd      	b.n	1f16a <am_hal_ble_boot+0x106>
   1f1ce:	bf00      	nop
   1f1d0:	01775230 	.word	0x01775230
   1f1d4:	40020000 	.word	0x40020000
   1f1d8:	10002c44 	.word	0x10002c44
   1f1dc:	50023800 	.word	0x50023800
   1f1e0:	50023804 	.word	0x50023804
   1f1e4:	000245f4 	.word	0x000245f4
   1f1e8:	100036f0 	.word	0x100036f0
   1f1ec:	00022da4 	.word	0x00022da4
   1f1f0:	00023cdc 	.word	0x00023cdc
   1f1f4:	10002d68 	.word	0x10002d68
   1f1f8:	20006054 	.word	0x20006054
   1f1fc:	0800000b 	.word	0x0800000b
   1f200:	10002c30 	.word	0x10002c30
   1f204:	100036f4 	.word	0x100036f4
   1f208:	20006858 	.word	0x20006858

0001f20c <am_hal_ble_tx_power_set>:
   1f20c:	b570      	push	{r4, r5, r6, lr}
   1f20e:	b082      	sub	sp, #8
   1f210:	4605      	mov	r5, r0
   1f212:	2300      	movs	r3, #0
   1f214:	460e      	mov	r6, r1
   1f216:	466a      	mov	r2, sp
   1f218:	040c      	lsls	r4, r1, #16
   1f21a:	4919      	ldr	r1, [pc, #100]	; (1f280 <am_hal_ble_tx_power_set+0x74>)
   1f21c:	9301      	str	r3, [sp, #4]
   1f21e:	f7ff fc17 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1f222:	4917      	ldr	r1, [pc, #92]	; (1f280 <am_hal_ble_tx_power_set+0x74>)
   1f224:	4628      	mov	r0, r5
   1f226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f22a:	f7ff fcd1 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1f22e:	4b15      	ldr	r3, [pc, #84]	; (1f284 <am_hal_ble_tx_power_set+0x78>)
   1f230:	68db      	ldr	r3, [r3, #12]
   1f232:	b2db      	uxtb	r3, r3
   1f234:	2b21      	cmp	r3, #33	; 0x21
   1f236:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   1f23a:	bf0c      	ite	eq
   1f23c:	4912      	ldreq	r1, [pc, #72]	; (1f288 <am_hal_ble_tx_power_set+0x7c>)
   1f23e:	4913      	ldrne	r1, [pc, #76]	; (1f28c <am_hal_ble_tx_power_set+0x80>)
   1f240:	aa01      	add	r2, sp, #4
   1f242:	f044 0408 	orr.w	r4, r4, #8
   1f246:	4628      	mov	r0, r5
   1f248:	f7ff fc02 	bl	1ea50 <am_hal_ble_plf_reg_read>
   1f24c:	4910      	ldr	r1, [pc, #64]	; (1f290 <am_hal_ble_tx_power_set+0x84>)
   1f24e:	f88d 6004 	strb.w	r6, [sp, #4]
   1f252:	4622      	mov	r2, r4
   1f254:	4628      	mov	r0, r5
   1f256:	f7ff fcbb 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1f25a:	4b0a      	ldr	r3, [pc, #40]	; (1f284 <am_hal_ble_tx_power_set+0x78>)
   1f25c:	9a01      	ldr	r2, [sp, #4]
   1f25e:	68db      	ldr	r3, [r3, #12]
   1f260:	b2db      	uxtb	r3, r3
   1f262:	2b21      	cmp	r3, #33	; 0x21
   1f264:	bf0c      	ite	eq
   1f266:	4908      	ldreq	r1, [pc, #32]	; (1f288 <am_hal_ble_tx_power_set+0x7c>)
   1f268:	4908      	ldrne	r1, [pc, #32]	; (1f28c <am_hal_ble_tx_power_set+0x80>)
   1f26a:	4628      	mov	r0, r5
   1f26c:	f7ff fcb0 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1f270:	4628      	mov	r0, r5
   1f272:	9a00      	ldr	r2, [sp, #0]
   1f274:	4902      	ldr	r1, [pc, #8]	; (1f280 <am_hal_ble_tx_power_set+0x74>)
   1f276:	f7ff fcab 	bl	1ebd0 <am_hal_ble_plf_reg_write>
   1f27a:	2000      	movs	r0, #0
   1f27c:	b002      	add	sp, #8
   1f27e:	bd70      	pop	{r4, r5, r6, pc}
   1f280:	43000004 	.word	0x43000004
   1f284:	40020000 	.word	0x40020000
   1f288:	20006838 	.word	0x20006838
   1f28c:	20006038 	.word	0x20006038
   1f290:	52400018 	.word	0x52400018

0001f294 <am_hal_cachectrl_config>:
   1f294:	b530      	push	{r4, r5, lr}
   1f296:	b083      	sub	sp, #12
   1f298:	4605      	mov	r5, r0
   1f29a:	f000 fe9f 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f29e:	4c0f      	ldr	r4, [pc, #60]	; (1f2dc <am_hal_cachectrl_config+0x48>)
   1f2a0:	9001      	str	r0, [sp, #4]
   1f2a2:	6823      	ldr	r3, [r4, #0]
   1f2a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1f2a8:	6023      	str	r3, [r4, #0]
   1f2aa:	9801      	ldr	r0, [sp, #4]
   1f2ac:	f000 fe9a 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f2b0:	78ab      	ldrb	r3, [r5, #2]
   1f2b2:	782a      	ldrb	r2, [r5, #0]
   1f2b4:	7869      	ldrb	r1, [r5, #1]
   1f2b6:	005b      	lsls	r3, r3, #1
   1f2b8:	0112      	lsls	r2, r2, #4
   1f2ba:	b2d2      	uxtb	r2, r2
   1f2bc:	f003 0302 	and.w	r3, r3, #2
   1f2c0:	4313      	orrs	r3, r2
   1f2c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1f2c6:	020a      	lsls	r2, r1, #8
   1f2c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
   1f2cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f2d0:	4313      	orrs	r3, r2
   1f2d2:	2000      	movs	r0, #0
   1f2d4:	6023      	str	r3, [r4, #0]
   1f2d6:	b003      	add	sp, #12
   1f2d8:	bd30      	pop	{r4, r5, pc}
   1f2da:	bf00      	nop
   1f2dc:	40018000 	.word	0x40018000

0001f2e0 <am_hal_cachectrl_enable>:
   1f2e0:	4a03      	ldr	r2, [pc, #12]	; (1f2f0 <am_hal_cachectrl_enable+0x10>)
   1f2e2:	6813      	ldr	r3, [r2, #0]
   1f2e4:	f043 0301 	orr.w	r3, r3, #1
   1f2e8:	6013      	str	r3, [r2, #0]
   1f2ea:	2000      	movs	r0, #0
   1f2ec:	4770      	bx	lr
   1f2ee:	bf00      	nop
   1f2f0:	40018000 	.word	0x40018000

0001f2f4 <am_hal_cachectrl_control>:
   1f2f4:	b510      	push	{r4, lr}
   1f2f6:	3801      	subs	r0, #1
   1f2f8:	b08e      	sub	sp, #56	; 0x38
   1f2fa:	2810      	cmp	r0, #16
   1f2fc:	f200 8143 	bhi.w	1f586 <am_hal_cachectrl_control+0x292>
   1f300:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f304:	01380136 	.word	0x01380136
   1f308:	0011013e 	.word	0x0011013e
   1f30c:	001a0018 	.word	0x001a0018
   1f310:	001f001c 	.word	0x001f001c
   1f314:	00300022 	.word	0x00300022
   1f318:	0074003c 	.word	0x0074003c
   1f31c:	00e400ac 	.word	0x00e400ac
   1f320:	011a00ff 	.word	0x011a00ff
   1f324:	0120      	.short	0x0120
   1f326:	f44f 7208 	mov.w	r2, #544	; 0x220
   1f32a:	4ba8      	ldr	r3, [pc, #672]	; (1f5cc <am_hal_cachectrl_control+0x2d8>)
   1f32c:	2000      	movs	r0, #0
   1f32e:	609a      	str	r2, [r3, #8]
   1f330:	b00e      	add	sp, #56	; 0x38
   1f332:	bd10      	pop	{r4, pc}
   1f334:	2240      	movs	r2, #64	; 0x40
   1f336:	e7f8      	b.n	1f32a <am_hal_cachectrl_control+0x36>
   1f338:	2220      	movs	r2, #32
   1f33a:	e7f6      	b.n	1f32a <am_hal_cachectrl_control+0x36>
   1f33c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f340:	e7f3      	b.n	1f32a <am_hal_cachectrl_control+0x36>
   1f342:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f346:	e7f0      	b.n	1f32a <am_hal_cachectrl_control+0x36>
   1f348:	f000 fe48 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f34c:	4a9f      	ldr	r2, [pc, #636]	; (1f5cc <am_hal_cachectrl_control+0x2d8>)
   1f34e:	9000      	str	r0, [sp, #0]
   1f350:	6813      	ldr	r3, [r2, #0]
   1f352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1f356:	6013      	str	r3, [r2, #0]
   1f358:	9800      	ldr	r0, [sp, #0]
   1f35a:	f000 fe43 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f35e:	2000      	movs	r0, #0
   1f360:	b00e      	add	sp, #56	; 0x38
   1f362:	bd10      	pop	{r4, pc}
   1f364:	f000 fe3a 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f368:	4a98      	ldr	r2, [pc, #608]	; (1f5cc <am_hal_cachectrl_control+0x2d8>)
   1f36a:	9001      	str	r0, [sp, #4]
   1f36c:	6813      	ldr	r3, [r2, #0]
   1f36e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f372:	6013      	str	r3, [r2, #0]
   1f374:	9801      	ldr	r0, [sp, #4]
   1f376:	f000 fe35 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f37a:	e7f0      	b.n	1f35e <am_hal_cachectrl_control+0x6a>
   1f37c:	f000 fe2e 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f380:	4603      	mov	r3, r0
   1f382:	4893      	ldr	r0, [pc, #588]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f384:	9302      	str	r3, [sp, #8]
   1f386:	f000 fc69 	bl	1fc5c <am_hal_flash_load_ui32>
   1f38a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1f38e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1f392:	488f      	ldr	r0, [pc, #572]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f394:	f000 fc66 	bl	1fc64 <am_hal_flash_store_ui32>
   1f398:	9802      	ldr	r0, [sp, #8]
   1f39a:	f000 fe23 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f39e:	f000 fe1d 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f3a2:	4603      	mov	r3, r0
   1f3a4:	488a      	ldr	r0, [pc, #552]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f3a6:	9303      	str	r3, [sp, #12]
   1f3a8:	f000 fc58 	bl	1fc5c <am_hal_flash_load_ui32>
   1f3ac:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1f3b0:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
   1f3b4:	4886      	ldr	r0, [pc, #536]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f3b6:	f000 fc55 	bl	1fc64 <am_hal_flash_store_ui32>
   1f3ba:	9803      	ldr	r0, [sp, #12]
   1f3bc:	f000 fe12 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f3c0:	f000 fe0c 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f3c4:	4603      	mov	r3, r0
   1f3c6:	4882      	ldr	r0, [pc, #520]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f3c8:	9304      	str	r3, [sp, #16]
   1f3ca:	f000 fc47 	bl	1fc5c <am_hal_flash_load_ui32>
   1f3ce:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1f3d2:	f021 010f 	bic.w	r1, r1, #15
   1f3d6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1f3da:	f041 0103 	orr.w	r1, r1, #3
   1f3de:	487c      	ldr	r0, [pc, #496]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f3e0:	f000 fc40 	bl	1fc64 <am_hal_flash_store_ui32>
   1f3e4:	9804      	ldr	r0, [sp, #16]
   1f3e6:	f000 fdfd 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f3ea:	e7b8      	b.n	1f35e <am_hal_cachectrl_control+0x6a>
   1f3ec:	f000 fdf6 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f3f0:	4603      	mov	r3, r0
   1f3f2:	4877      	ldr	r0, [pc, #476]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f3f4:	9305      	str	r3, [sp, #20]
   1f3f6:	f000 fc31 	bl	1fc5c <am_hal_flash_load_ui32>
   1f3fa:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1f3fe:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   1f402:	4873      	ldr	r0, [pc, #460]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f404:	f000 fc2e 	bl	1fc64 <am_hal_flash_store_ui32>
   1f408:	9805      	ldr	r0, [sp, #20]
   1f40a:	f000 fdeb 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f40e:	f000 fde5 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f412:	4603      	mov	r3, r0
   1f414:	486e      	ldr	r0, [pc, #440]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f416:	9306      	str	r3, [sp, #24]
   1f418:	f000 fc20 	bl	1fc5c <am_hal_flash_load_ui32>
   1f41c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1f420:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
   1f424:	486a      	ldr	r0, [pc, #424]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f426:	f000 fc1d 	bl	1fc64 <am_hal_flash_store_ui32>
   1f42a:	9806      	ldr	r0, [sp, #24]
   1f42c:	f000 fdda 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f430:	f000 fdd4 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f434:	4603      	mov	r3, r0
   1f436:	4866      	ldr	r0, [pc, #408]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f438:	9307      	str	r3, [sp, #28]
   1f43a:	f000 fc0f 	bl	1fc5c <am_hal_flash_load_ui32>
   1f43e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1f442:	f021 010f 	bic.w	r1, r1, #15
   1f446:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1f44a:	f041 0101 	orr.w	r1, r1, #1
   1f44e:	4860      	ldr	r0, [pc, #384]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f450:	f000 fc08 	bl	1fc64 <am_hal_flash_store_ui32>
   1f454:	9807      	ldr	r0, [sp, #28]
   1f456:	f000 fdc5 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f45a:	e780      	b.n	1f35e <am_hal_cachectrl_control+0x6a>
   1f45c:	f000 fdbe 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f460:	4603      	mov	r3, r0
   1f462:	485b      	ldr	r0, [pc, #364]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f464:	9308      	str	r3, [sp, #32]
   1f466:	f000 fbf9 	bl	1fc5c <am_hal_flash_load_ui32>
   1f46a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1f46e:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   1f472:	4857      	ldr	r0, [pc, #348]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f474:	f000 fbf6 	bl	1fc64 <am_hal_flash_store_ui32>
   1f478:	9808      	ldr	r0, [sp, #32]
   1f47a:	f000 fdb3 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f47e:	f000 fdad 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f482:	4603      	mov	r3, r0
   1f484:	4852      	ldr	r0, [pc, #328]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f486:	9309      	str	r3, [sp, #36]	; 0x24
   1f488:	f000 fbe8 	bl	1fc5c <am_hal_flash_load_ui32>
   1f48c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1f490:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
   1f494:	484e      	ldr	r0, [pc, #312]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f496:	f000 fbe5 	bl	1fc64 <am_hal_flash_store_ui32>
   1f49a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1f49c:	f000 fda2 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f4a0:	f000 fd9c 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f4a4:	4603      	mov	r3, r0
   1f4a6:	484a      	ldr	r0, [pc, #296]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f4a8:	930a      	str	r3, [sp, #40]	; 0x28
   1f4aa:	f000 fbd7 	bl	1fc5c <am_hal_flash_load_ui32>
   1f4ae:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1f4b2:	f021 010f 	bic.w	r1, r1, #15
   1f4b6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1f4ba:	f041 0101 	orr.w	r1, r1, #1
   1f4be:	4844      	ldr	r0, [pc, #272]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f4c0:	f000 fbd0 	bl	1fc64 <am_hal_flash_store_ui32>
   1f4c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1f4c6:	f000 fd8d 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f4ca:	e748      	b.n	1f35e <am_hal_cachectrl_control+0x6a>
   1f4cc:	2900      	cmp	r1, #0
   1f4ce:	d05a      	beq.n	1f586 <am_hal_cachectrl_control+0x292>
   1f4d0:	680c      	ldr	r4, [r1, #0]
   1f4d2:	2c03      	cmp	r4, #3
   1f4d4:	d834      	bhi.n	1f540 <am_hal_cachectrl_control+0x24c>
   1f4d6:	f000 fd81 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f4da:	4603      	mov	r3, r0
   1f4dc:	483c      	ldr	r0, [pc, #240]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f4de:	930b      	str	r3, [sp, #44]	; 0x2c
   1f4e0:	f000 fbbc 	bl	1fc5c <am_hal_flash_load_ui32>
   1f4e4:	0323      	lsls	r3, r4, #12
   1f4e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   1f4ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   1f4ee:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1f4f2:	4319      	orrs	r1, r3
   1f4f4:	4836      	ldr	r0, [pc, #216]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f4f6:	f000 fbb5 	bl	1fc64 <am_hal_flash_store_ui32>
   1f4fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1f4fc:	f000 fd72 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f500:	e72d      	b.n	1f35e <am_hal_cachectrl_control+0x6a>
   1f502:	2900      	cmp	r1, #0
   1f504:	d03f      	beq.n	1f586 <am_hal_cachectrl_control+0x292>
   1f506:	680c      	ldr	r4, [r1, #0]
   1f508:	2c07      	cmp	r4, #7
   1f50a:	d819      	bhi.n	1f540 <am_hal_cachectrl_control+0x24c>
   1f50c:	f000 fd66 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f510:	4603      	mov	r3, r0
   1f512:	482f      	ldr	r0, [pc, #188]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f514:	930c      	str	r3, [sp, #48]	; 0x30
   1f516:	f000 fba1 	bl	1fc5c <am_hal_flash_load_ui32>
   1f51a:	0123      	lsls	r3, r4, #4
   1f51c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1f520:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   1f524:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1f528:	4319      	orrs	r1, r3
   1f52a:	4829      	ldr	r0, [pc, #164]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f52c:	f000 fb9a 	bl	1fc64 <am_hal_flash_store_ui32>
   1f530:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f532:	f000 fd57 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f536:	e712      	b.n	1f35e <am_hal_cachectrl_control+0x6a>
   1f538:	b329      	cbz	r1, 1f586 <am_hal_cachectrl_control+0x292>
   1f53a:	680c      	ldr	r4, [r1, #0]
   1f53c:	2c0f      	cmp	r4, #15
   1f53e:	d926      	bls.n	1f58e <am_hal_cachectrl_control+0x29a>
   1f540:	2001      	movs	r0, #1
   1f542:	e6f5      	b.n	1f330 <am_hal_cachectrl_control+0x3c>
   1f544:	b1f9      	cbz	r1, 1f586 <am_hal_cachectrl_control+0x292>
   1f546:	684a      	ldr	r2, [r1, #4]
   1f548:	4b22      	ldr	r3, [pc, #136]	; (1f5d4 <am_hal_cachectrl_control+0x2e0>)
   1f54a:	4013      	ands	r3, r2
   1f54c:	b9db      	cbnz	r3, 1f586 <am_hal_cachectrl_control+0x292>
   1f54e:	688b      	ldr	r3, [r1, #8]
   1f550:	4820      	ldr	r0, [pc, #128]	; (1f5d4 <am_hal_cachectrl_control+0x2e0>)
   1f552:	4018      	ands	r0, r3
   1f554:	b9b8      	cbnz	r0, 1f586 <am_hal_cachectrl_control+0x292>
   1f556:	780c      	ldrb	r4, [r1, #0]
   1f558:	b374      	cbz	r4, 1f5b8 <am_hal_cachectrl_control+0x2c4>
   1f55a:	2c01      	cmp	r4, #1
   1f55c:	d113      	bne.n	1f586 <am_hal_cachectrl_control+0x292>
   1f55e:	4c1b      	ldr	r4, [pc, #108]	; (1f5cc <am_hal_cachectrl_control+0x2d8>)
   1f560:	61a2      	str	r2, [r4, #24]
   1f562:	61e3      	str	r3, [r4, #28]
   1f564:	784a      	ldrb	r2, [r1, #1]
   1f566:	6823      	ldr	r3, [r4, #0]
   1f568:	f362 03c3 	bfi	r3, r2, #3, #1
   1f56c:	6023      	str	r3, [r4, #0]
   1f56e:	e6df      	b.n	1f330 <am_hal_cachectrl_control+0x3c>
   1f570:	2201      	movs	r2, #1
   1f572:	e6da      	b.n	1f32a <am_hal_cachectrl_control+0x36>
   1f574:	4b15      	ldr	r3, [pc, #84]	; (1f5cc <am_hal_cachectrl_control+0x2d8>)
   1f576:	681b      	ldr	r3, [r3, #0]
   1f578:	01db      	lsls	r3, r3, #7
   1f57a:	d406      	bmi.n	1f58a <am_hal_cachectrl_control+0x296>
   1f57c:	2007      	movs	r0, #7
   1f57e:	e6d7      	b.n	1f330 <am_hal_cachectrl_control+0x3c>
   1f580:	f44f 6288 	mov.w	r2, #1088	; 0x440
   1f584:	e6d1      	b.n	1f32a <am_hal_cachectrl_control+0x36>
   1f586:	2006      	movs	r0, #6
   1f588:	e6d2      	b.n	1f330 <am_hal_cachectrl_control+0x3c>
   1f58a:	2202      	movs	r2, #2
   1f58c:	e6cd      	b.n	1f32a <am_hal_cachectrl_control+0x36>
   1f58e:	f000 fd25 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f592:	4603      	mov	r3, r0
   1f594:	480e      	ldr	r0, [pc, #56]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f596:	930d      	str	r3, [sp, #52]	; 0x34
   1f598:	f000 fb60 	bl	1fc5c <am_hal_flash_load_ui32>
   1f59c:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1f5a0:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   1f5a4:	f021 010f 	bic.w	r1, r1, #15
   1f5a8:	4321      	orrs	r1, r4
   1f5aa:	4809      	ldr	r0, [pc, #36]	; (1f5d0 <am_hal_cachectrl_control+0x2dc>)
   1f5ac:	f000 fb5a 	bl	1fc64 <am_hal_flash_store_ui32>
   1f5b0:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f5b2:	f000 fd17 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f5b6:	e6d2      	b.n	1f35e <am_hal_cachectrl_control+0x6a>
   1f5b8:	4c04      	ldr	r4, [pc, #16]	; (1f5cc <am_hal_cachectrl_control+0x2d8>)
   1f5ba:	6122      	str	r2, [r4, #16]
   1f5bc:	6163      	str	r3, [r4, #20]
   1f5be:	784a      	ldrb	r2, [r1, #1]
   1f5c0:	6823      	ldr	r3, [r4, #0]
   1f5c2:	f362 0382 	bfi	r3, r2, #2, #1
   1f5c6:	6023      	str	r3, [r4, #0]
   1f5c8:	e6b2      	b.n	1f330 <am_hal_cachectrl_control+0x3c>
   1f5ca:	bf00      	nop
   1f5cc:	40018000 	.word	0x40018000
   1f5d0:	40018004 	.word	0x40018004
   1f5d4:	f800000f 	.word	0xf800000f

0001f5d8 <am_hal_clkgen_control>:
   1f5d8:	4b41      	ldr	r3, [pc, #260]	; (1f6e0 <am_hal_clkgen_control+0x108>)
   1f5da:	681a      	ldr	r2, [r3, #0]
   1f5dc:	b912      	cbnz	r2, 1f5e4 <am_hal_clkgen_control+0xc>
   1f5de:	4a41      	ldr	r2, [pc, #260]	; (1f6e4 <am_hal_clkgen_control+0x10c>)
   1f5e0:	6812      	ldr	r2, [r2, #0]
   1f5e2:	601a      	str	r2, [r3, #0]
   1f5e4:	2809      	cmp	r0, #9
   1f5e6:	d878      	bhi.n	1f6da <am_hal_clkgen_control+0x102>
   1f5e8:	e8df f000 	tbb	[pc, r0]
   1f5ec:	261e160d 	.word	0x261e160d
   1f5f0:	524c423a 	.word	0x524c423a
   1f5f4:	055a      	.short	0x055a
   1f5f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1f5fa:	2000      	movs	r0, #0
   1f5fc:	6a1a      	ldr	r2, [r3, #32]
   1f5fe:	f36f 0200 	bfc	r2, #0, #1
   1f602:	621a      	str	r2, [r3, #32]
   1f604:	4770      	bx	lr
   1f606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1f60a:	2200      	movs	r2, #0
   1f60c:	2147      	movs	r1, #71	; 0x47
   1f60e:	6159      	str	r1, [r3, #20]
   1f610:	4610      	mov	r0, r2
   1f612:	619a      	str	r2, [r3, #24]
   1f614:	615a      	str	r2, [r3, #20]
   1f616:	4770      	bx	lr
   1f618:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1f61c:	2000      	movs	r0, #0
   1f61e:	68d3      	ldr	r3, [r2, #12]
   1f620:	f023 0301 	bic.w	r3, r3, #1
   1f624:	60d3      	str	r3, [r2, #12]
   1f626:	4770      	bx	lr
   1f628:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1f62c:	2000      	movs	r0, #0
   1f62e:	68d3      	ldr	r3, [r2, #12]
   1f630:	f023 0302 	bic.w	r3, r3, #2
   1f634:	60d3      	str	r3, [r2, #12]
   1f636:	4770      	bx	lr
   1f638:	4a2b      	ldr	r2, [pc, #172]	; (1f6e8 <am_hal_clkgen_control+0x110>)
   1f63a:	68d3      	ldr	r3, [r2, #12]
   1f63c:	b2db      	uxtb	r3, r3
   1f63e:	2b21      	cmp	r3, #33	; 0x21
   1f640:	d106      	bne.n	1f650 <am_hal_clkgen_control+0x78>
   1f642:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   1f646:	2101      	movs	r1, #1
   1f648:	f361 2309 	bfi	r3, r1, #8, #2
   1f64c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   1f650:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1f654:	2000      	movs	r0, #0
   1f656:	68d3      	ldr	r3, [r2, #12]
   1f658:	f043 0301 	orr.w	r3, r3, #1
   1f65c:	60d3      	str	r3, [r2, #12]
   1f65e:	4770      	bx	lr
   1f660:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1f664:	2000      	movs	r0, #0
   1f666:	68d3      	ldr	r3, [r2, #12]
   1f668:	f043 0302 	orr.w	r3, r3, #2
   1f66c:	60d3      	str	r3, [r2, #12]
   1f66e:	4770      	bx	lr
   1f670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1f674:	2200      	movs	r2, #0
   1f676:	2047      	movs	r0, #71	; 0x47
   1f678:	2101      	movs	r1, #1
   1f67a:	6158      	str	r0, [r3, #20]
   1f67c:	6199      	str	r1, [r3, #24]
   1f67e:	4610      	mov	r0, r2
   1f680:	615a      	str	r2, [r3, #20]
   1f682:	4770      	bx	lr
   1f684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1f688:	2000      	movs	r0, #0
   1f68a:	68da      	ldr	r2, [r3, #12]
   1f68c:	60da      	str	r2, [r3, #12]
   1f68e:	4770      	bx	lr
   1f690:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1f694:	2000      	movs	r0, #0
   1f696:	68d3      	ldr	r3, [r2, #12]
   1f698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f69c:	60d3      	str	r3, [r2, #12]
   1f69e:	4770      	bx	lr
   1f6a0:	b510      	push	{r4, lr}
   1f6a2:	4a11      	ldr	r2, [pc, #68]	; (1f6e8 <am_hal_clkgen_control+0x110>)
   1f6a4:	68d3      	ldr	r3, [r2, #12]
   1f6a6:	b2db      	uxtb	r3, r3
   1f6a8:	2b21      	cmp	r3, #33	; 0x21
   1f6aa:	460c      	mov	r4, r1
   1f6ac:	d008      	beq.n	1f6c0 <am_hal_clkgen_control+0xe8>
   1f6ae:	b194      	cbz	r4, 1f6d6 <am_hal_clkgen_control+0xfe>
   1f6b0:	6823      	ldr	r3, [r4, #0]
   1f6b2:	f043 0301 	orr.w	r3, r3, #1
   1f6b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1f6ba:	2000      	movs	r0, #0
   1f6bc:	6213      	str	r3, [r2, #32]
   1f6be:	bd10      	pop	{r4, pc}
   1f6c0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   1f6c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1f6c8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   1f6cc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   1f6d0:	f000 fa7a 	bl	1fbc8 <am_hal_flash_delay>
   1f6d4:	e7eb      	b.n	1f6ae <am_hal_clkgen_control+0xd6>
   1f6d6:	4b05      	ldr	r3, [pc, #20]	; (1f6ec <am_hal_clkgen_control+0x114>)
   1f6d8:	e7ed      	b.n	1f6b6 <am_hal_clkgen_control+0xde>
   1f6da:	2006      	movs	r0, #6
   1f6dc:	4770      	bx	lr
   1f6de:	bf00      	nop
   1f6e0:	100051f0 	.word	0x100051f0
   1f6e4:	4ffff000 	.word	0x4ffff000
   1f6e8:	40020000 	.word	0x40020000
   1f6ec:	0025b801 	.word	0x0025b801

0001f6f0 <am_hal_clkgen_status_get>:
   1f6f0:	b1a8      	cbz	r0, 1f71e <am_hal_clkgen_status_get+0x2e>
   1f6f2:	b410      	push	{r4}
   1f6f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1f6f8:	490a      	ldr	r1, [pc, #40]	; (1f724 <am_hal_clkgen_status_get+0x34>)
   1f6fa:	6994      	ldr	r4, [r2, #24]
   1f6fc:	4b0a      	ldr	r3, [pc, #40]	; (1f728 <am_hal_clkgen_status_get+0x38>)
   1f6fe:	f014 0f01 	tst.w	r4, #1
   1f702:	bf08      	it	eq
   1f704:	460b      	moveq	r3, r1
   1f706:	6003      	str	r3, [r0, #0]
   1f708:	69d3      	ldr	r3, [r2, #28]
   1f70a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f70e:	f003 0201 	and.w	r2, r3, #1
   1f712:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1f716:	6042      	str	r2, [r0, #4]
   1f718:	7203      	strb	r3, [r0, #8]
   1f71a:	2000      	movs	r0, #0
   1f71c:	4770      	bx	lr
   1f71e:	2006      	movs	r0, #6
   1f720:	4770      	bx	lr
   1f722:	bf00      	nop
   1f724:	02dc6c00 	.word	0x02dc6c00
   1f728:	016e3600 	.word	0x016e3600

0001f72c <am_hal_triple_read>:
   1f72c:	b412      	push	{r1, r4}
   1f72e:	f3ef 8410 	mrs	r4, PRIMASK
   1f732:	b672      	cpsid	i
   1f734:	6801      	ldr	r1, [r0, #0]
   1f736:	6802      	ldr	r2, [r0, #0]
   1f738:	6803      	ldr	r3, [r0, #0]
   1f73a:	f384 8810 	msr	PRIMASK, r4
   1f73e:	bc11      	pop	{r0, r4}
   1f740:	6001      	str	r1, [r0, #0]
   1f742:	6042      	str	r2, [r0, #4]
   1f744:	6083      	str	r3, [r0, #8]
   1f746:	4770      	bx	lr

0001f748 <am_hal_ctimer_int_service>:
   1f748:	b198      	cbz	r0, 1f772 <am_hal_ctimer_int_service+0x2a>
   1f74a:	b570      	push	{r4, r5, r6, lr}
   1f74c:	4e09      	ldr	r6, [pc, #36]	; (1f774 <am_hal_ctimer_int_service+0x2c>)
   1f74e:	4604      	mov	r4, r0
   1f750:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1f754:	fab4 f384 	clz	r3, r4
   1f758:	f1c3 021f 	rsb	r2, r3, #31
   1f75c:	fa25 f303 	lsr.w	r3, r5, r3
   1f760:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   1f764:	ea24 0403 	bic.w	r4, r4, r3
   1f768:	b102      	cbz	r2, 1f76c <am_hal_ctimer_int_service+0x24>
   1f76a:	4790      	blx	r2
   1f76c:	2c00      	cmp	r4, #0
   1f76e:	d1f1      	bne.n	1f754 <am_hal_ctimer_int_service+0xc>
   1f770:	bd70      	pop	{r4, r5, r6, pc}
   1f772:	4770      	bx	lr
   1f774:	10005170 	.word	0x10005170

0001f778 <am_hal_ctimer_int_register>:
   1f778:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1f77c:	b510      	push	{r4, lr}
   1f77e:	460c      	mov	r4, r1
   1f780:	f000 80aa 	beq.w	1f8d8 <am_hal_ctimer_int_register+0x160>
   1f784:	d917      	bls.n	1f7b6 <am_hal_ctimer_int_register+0x3e>
   1f786:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f78a:	f000 8085 	beq.w	1f898 <am_hal_ctimer_int_register+0x120>
   1f78e:	d921      	bls.n	1f7d4 <am_hal_ctimer_int_register+0x5c>
   1f790:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   1f794:	f000 80a2 	beq.w	1f8dc <am_hal_ctimer_int_register+0x164>
   1f798:	d93a      	bls.n	1f810 <am_hal_ctimer_int_register+0x98>
   1f79a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1f79e:	f000 8093 	beq.w	1f8c8 <am_hal_ctimer_int_register+0x150>
   1f7a2:	d97f      	bls.n	1f8a4 <am_hal_ctimer_int_register+0x12c>
   1f7a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   1f7a8:	d064      	beq.n	1f874 <am_hal_ctimer_int_register+0xfc>
   1f7aa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1f7ae:	bf08      	it	eq
   1f7b0:	221f      	moveq	r2, #31
   1f7b2:	d03d      	beq.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f7b4:	e035      	b.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f7b6:	2880      	cmp	r0, #128	; 0x80
   1f7b8:	f000 808c 	beq.w	1f8d4 <am_hal_ctimer_int_register+0x15c>
   1f7bc:	d819      	bhi.n	1f7f2 <am_hal_ctimer_int_register+0x7a>
   1f7be:	2808      	cmp	r0, #8
   1f7c0:	d068      	beq.n	1f894 <am_hal_ctimer_int_register+0x11c>
   1f7c2:	d84f      	bhi.n	1f864 <am_hal_ctimer_int_register+0xec>
   1f7c4:	2802      	cmp	r0, #2
   1f7c6:	d077      	beq.n	1f8b8 <am_hal_ctimer_int_register+0x140>
   1f7c8:	2804      	cmp	r0, #4
   1f7ca:	d05d      	beq.n	1f888 <am_hal_ctimer_int_register+0x110>
   1f7cc:	2801      	cmp	r0, #1
   1f7ce:	d128      	bne.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f7d0:	2200      	movs	r2, #0
   1f7d2:	e02d      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f7d4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
   1f7d8:	d062      	beq.n	1f8a0 <am_hal_ctimer_int_register+0x128>
   1f7da:	d82d      	bhi.n	1f838 <am_hal_ctimer_int_register+0xc0>
   1f7dc:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   1f7e0:	d076      	beq.n	1f8d0 <am_hal_ctimer_int_register+0x158>
   1f7e2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
   1f7e6:	d04d      	beq.n	1f884 <am_hal_ctimer_int_register+0x10c>
   1f7e8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1f7ec:	d119      	bne.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f7ee:	2210      	movs	r2, #16
   1f7f0:	e01e      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f7f2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1f7f6:	d051      	beq.n	1f89c <am_hal_ctimer_int_register+0x124>
   1f7f8:	d829      	bhi.n	1f84e <am_hal_ctimer_int_register+0xd6>
   1f7fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1f7fe:	d059      	beq.n	1f8b4 <am_hal_ctimer_int_register+0x13c>
   1f800:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1f804:	d03a      	beq.n	1f87c <am_hal_ctimer_int_register+0x104>
   1f806:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1f80a:	d10a      	bne.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f80c:	2208      	movs	r2, #8
   1f80e:	e00f      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f810:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
   1f814:	d056      	beq.n	1f8c4 <am_hal_ctimer_int_register+0x14c>
   1f816:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
   1f81a:	d031      	beq.n	1f880 <am_hal_ctimer_int_register+0x108>
   1f81c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1f820:	d054      	beq.n	1f8cc <am_hal_ctimer_int_register+0x154>
   1f822:	4a2f      	ldr	r2, [pc, #188]	; (1f8e0 <am_hal_ctimer_int_register+0x168>)
   1f824:	482f      	ldr	r0, [pc, #188]	; (1f8e4 <am_hal_ctimer_int_register+0x16c>)
   1f826:	f44f 7102 	mov.w	r1, #520	; 0x208
   1f82a:	f000 f9cb 	bl	1fbc4 <am_hal_debug_error>
   1f82e:	2200      	movs	r2, #0
   1f830:	4b2d      	ldr	r3, [pc, #180]	; (1f8e8 <am_hal_ctimer_int_register+0x170>)
   1f832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   1f836:	bd10      	pop	{r4, pc}
   1f838:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
   1f83c:	d040      	beq.n	1f8c0 <am_hal_ctimer_int_register+0x148>
   1f83e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   1f842:	d025      	beq.n	1f890 <am_hal_ctimer_int_register+0x118>
   1f844:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1f848:	d1eb      	bne.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f84a:	2214      	movs	r2, #20
   1f84c:	e7f0      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f84e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
   1f852:	d033      	beq.n	1f8bc <am_hal_ctimer_int_register+0x144>
   1f854:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   1f858:	d018      	beq.n	1f88c <am_hal_ctimer_int_register+0x114>
   1f85a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   1f85e:	d1e0      	bne.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f860:	220c      	movs	r2, #12
   1f862:	e7e5      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f864:	2820      	cmp	r0, #32
   1f866:	d023      	beq.n	1f8b0 <am_hal_ctimer_int_register+0x138>
   1f868:	2840      	cmp	r0, #64	; 0x40
   1f86a:	d005      	beq.n	1f878 <am_hal_ctimer_int_register+0x100>
   1f86c:	2810      	cmp	r0, #16
   1f86e:	d1d8      	bne.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f870:	2204      	movs	r2, #4
   1f872:	e7dd      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f874:	221e      	movs	r2, #30
   1f876:	e7db      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f878:	2206      	movs	r2, #6
   1f87a:	e7d9      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f87c:	220a      	movs	r2, #10
   1f87e:	e7d7      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f880:	221a      	movs	r2, #26
   1f882:	e7d5      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f884:	2212      	movs	r2, #18
   1f886:	e7d3      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f888:	2202      	movs	r2, #2
   1f88a:	e7d1      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f88c:	220e      	movs	r2, #14
   1f88e:	e7cf      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f890:	2216      	movs	r2, #22
   1f892:	e7cd      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f894:	2203      	movs	r2, #3
   1f896:	e7cb      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f898:	2217      	movs	r2, #23
   1f89a:	e7c9      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f89c:	220b      	movs	r2, #11
   1f89e:	e7c7      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8a0:	2213      	movs	r2, #19
   1f8a2:	e7c5      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8a4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   1f8a8:	bf08      	it	eq
   1f8aa:	221c      	moveq	r2, #28
   1f8ac:	d0c0      	beq.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8ae:	e7b8      	b.n	1f822 <am_hal_ctimer_int_register+0xaa>
   1f8b0:	2205      	movs	r2, #5
   1f8b2:	e7bd      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8b4:	2209      	movs	r2, #9
   1f8b6:	e7bb      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8b8:	2201      	movs	r2, #1
   1f8ba:	e7b9      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8bc:	220d      	movs	r2, #13
   1f8be:	e7b7      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8c0:	2215      	movs	r2, #21
   1f8c2:	e7b5      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8c4:	2219      	movs	r2, #25
   1f8c6:	e7b3      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8c8:	221d      	movs	r2, #29
   1f8ca:	e7b1      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8cc:	2218      	movs	r2, #24
   1f8ce:	e7af      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8d0:	2211      	movs	r2, #17
   1f8d2:	e7ad      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8d4:	2207      	movs	r2, #7
   1f8d6:	e7ab      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8d8:	220f      	movs	r2, #15
   1f8da:	e7a9      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8dc:	221b      	movs	r2, #27
   1f8de:	e7a7      	b.n	1f830 <am_hal_ctimer_int_register+0xb8>
   1f8e0:	0002461c 	.word	0x0002461c
   1f8e4:	00024644 	.word	0x00024644
   1f8e8:	10005170 	.word	0x10005170

0001f8ec <am_hal_ctimer_config_single>:
   1f8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8ee:	b083      	sub	sp, #12
   1f8f0:	460e      	mov	r6, r1
   1f8f2:	4614      	mov	r4, r2
   1f8f4:	0147      	lsls	r7, r0, #5
   1f8f6:	4605      	mov	r5, r0
   1f8f8:	f000 fb70 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f8fc:	4a19      	ldr	r2, [pc, #100]	; (1f964 <am_hal_ctimer_config_single+0x78>)
   1f8fe:	9001      	str	r0, [sp, #4]
   1f900:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
   1f904:	58bb      	ldr	r3, [r7, r2]
   1f906:	d021      	beq.n	1f94c <am_hal_ctimer_config_single+0x60>
   1f908:	ea23 0306 	bic.w	r3, r3, r6
   1f90c:	1c71      	adds	r1, r6, #1
   1f90e:	ea43 0304 	orr.w	r3, r3, r4
   1f912:	d00c      	beq.n	1f92e <am_hal_ctimer_config_single+0x42>
   1f914:	50bb      	str	r3, [r7, r2]
   1f916:	9801      	ldr	r0, [sp, #4]
   1f918:	f000 fb64 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f91c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f920:	429e      	cmp	r6, r3
   1f922:	d01c      	beq.n	1f95e <am_hal_ctimer_config_single+0x72>
   1f924:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
   1f928:	d017      	beq.n	1f95a <am_hal_ctimer_config_single+0x6e>
   1f92a:	b003      	add	sp, #12
   1f92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f92e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1f932:	50bb      	str	r3, [r7, r2]
   1f934:	9801      	ldr	r0, [sp, #4]
   1f936:	f000 fb55 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f93a:	2200      	movs	r2, #0
   1f93c:	4b0a      	ldr	r3, [pc, #40]	; (1f968 <am_hal_ctimer_config_single+0x7c>)
   1f93e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   1f942:	f3c4 0444 	ubfx	r4, r4, #1, #5
   1f946:	54ac      	strb	r4, [r5, r2]
   1f948:	b003      	add	sp, #12
   1f94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f94c:	0424      	lsls	r4, r4, #16
   1f94e:	b29b      	uxth	r3, r3
   1f950:	4323      	orrs	r3, r4
   1f952:	50bb      	str	r3, [r7, r2]
   1f954:	9801      	ldr	r0, [sp, #4]
   1f956:	f000 fb45 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f95a:	2201      	movs	r2, #1
   1f95c:	e7ee      	b.n	1f93c <am_hal_ctimer_config_single+0x50>
   1f95e:	2200      	movs	r2, #0
   1f960:	e7ec      	b.n	1f93c <am_hal_ctimer_config_single+0x50>
   1f962:	bf00      	nop
   1f964:	4000800c 	.word	0x4000800c
   1f968:	10003704 	.word	0x10003704

0001f96c <am_hal_ctimer_start>:
   1f96c:	b570      	push	{r4, r5, r6, lr}
   1f96e:	b082      	sub	sp, #8
   1f970:	460c      	mov	r4, r1
   1f972:	0146      	lsls	r6, r0, #5
   1f974:	4605      	mov	r5, r0
   1f976:	f000 fb31 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f97a:	4a0f      	ldr	r2, [pc, #60]	; (1f9b8 <am_hal_ctimer_start+0x4c>)
   1f97c:	9001      	str	r0, [sp, #4]
   1f97e:	58b3      	ldr	r3, [r6, r2]
   1f980:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
   1f984:	ea23 0301 	bic.w	r3, r3, r1
   1f988:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
   1f98c:	430b      	orrs	r3, r1
   1f98e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   1f992:	bf0c      	ite	eq
   1f994:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
   1f998:	f3c3 0444 	ubfxne	r4, r3, #1, #5
   1f99c:	50b3      	str	r3, [r6, r2]
   1f99e:	4b07      	ldr	r3, [pc, #28]	; (1f9bc <am_hal_ctimer_start+0x50>)
   1f9a0:	9801      	ldr	r0, [sp, #4]
   1f9a2:	bf0c      	ite	eq
   1f9a4:	2101      	moveq	r1, #1
   1f9a6:	2100      	movne	r1, #0
   1f9a8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   1f9ac:	545c      	strb	r4, [r3, r1]
   1f9ae:	f000 fb19 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f9b2:	b002      	add	sp, #8
   1f9b4:	bd70      	pop	{r4, r5, r6, pc}
   1f9b6:	bf00      	nop
   1f9b8:	4000800c 	.word	0x4000800c
   1f9bc:	10003704 	.word	0x10003704

0001f9c0 <am_hal_ctimer_stop>:
   1f9c0:	b570      	push	{r4, r5, r6, lr}
   1f9c2:	b082      	sub	sp, #8
   1f9c4:	0146      	lsls	r6, r0, #5
   1f9c6:	460c      	mov	r4, r1
   1f9c8:	f000 fb08 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f9cc:	4d06      	ldr	r5, [pc, #24]	; (1f9e8 <am_hal_ctimer_stop+0x28>)
   1f9ce:	9001      	str	r0, [sp, #4]
   1f9d0:	5973      	ldr	r3, [r6, r5]
   1f9d2:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
   1f9d6:	ea23 0101 	bic.w	r1, r3, r1
   1f9da:	5171      	str	r1, [r6, r5]
   1f9dc:	9801      	ldr	r0, [sp, #4]
   1f9de:	f000 fb01 	bl	1ffe4 <am_hal_interrupt_master_set>
   1f9e2:	b002      	add	sp, #8
   1f9e4:	bd70      	pop	{r4, r5, r6, pc}
   1f9e6:	bf00      	nop
   1f9e8:	4000800c 	.word	0x4000800c

0001f9ec <am_hal_ctimer_clear>:
   1f9ec:	b570      	push	{r4, r5, r6, lr}
   1f9ee:	b082      	sub	sp, #8
   1f9f0:	0146      	lsls	r6, r0, #5
   1f9f2:	460c      	mov	r4, r1
   1f9f4:	f000 faf2 	bl	1ffdc <am_hal_interrupt_master_disable>
   1f9f8:	4d05      	ldr	r5, [pc, #20]	; (1fa10 <am_hal_ctimer_clear+0x24>)
   1f9fa:	9001      	str	r0, [sp, #4]
   1f9fc:	5973      	ldr	r3, [r6, r5]
   1f9fe:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
   1fa02:	4319      	orrs	r1, r3
   1fa04:	5171      	str	r1, [r6, r5]
   1fa06:	9801      	ldr	r0, [sp, #4]
   1fa08:	f000 faec 	bl	1ffe4 <am_hal_interrupt_master_set>
   1fa0c:	b002      	add	sp, #8
   1fa0e:	bd70      	pop	{r4, r5, r6, pc}
   1fa10:	4000800c 	.word	0x4000800c

0001fa14 <am_hal_ctimer_read>:
   1fa14:	b570      	push	{r4, r5, r6, lr}
   1fa16:	460a      	mov	r2, r1
   1fa18:	4d1e      	ldr	r5, [pc, #120]	; (1fa94 <am_hal_ctimer_read+0x80>)
   1fa1a:	4e1f      	ldr	r6, [pc, #124]	; (1fa98 <am_hal_ctimer_read+0x84>)
   1fa1c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
   1fa20:	ea4f 0140 	mov.w	r1, r0, lsl #1
   1fa24:	bf14      	ite	ne
   1fa26:	2400      	movne	r4, #0
   1fa28:	2401      	moveq	r4, #1
   1fa2a:	186b      	adds	r3, r5, r1
   1fa2c:	b084      	sub	sp, #16
   1fa2e:	5d1b      	ldrb	r3, [r3, r4]
   1fa30:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1fa34:	2bff      	cmp	r3, #255	; 0xff
   1fa36:	d021      	beq.n	1fa7c <am_hal_ctimer_read+0x68>
   1fa38:	f003 031f 	and.w	r3, r3, #31
   1fa3c:	4917      	ldr	r1, [pc, #92]	; (1fa9c <am_hal_ctimer_read+0x88>)
   1fa3e:	5ccb      	ldrb	r3, [r1, r3]
   1fa40:	b1c3      	cbz	r3, 1fa74 <am_hal_ctimer_read+0x60>
   1fa42:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
   1fa46:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1fa48:	0749      	lsls	r1, r1, #29
   1fa4a:	bf48      	it	mi
   1fa4c:	005b      	lslmi	r3, r3, #1
   1fa4e:	a901      	add	r1, sp, #4
   1fa50:	bf48      	it	mi
   1fa52:	f043 0301 	orrmi.w	r3, r3, #1
   1fa56:	f7ff fe69 	bl	1f72c <am_hal_triple_read>
   1fa5a:	9802      	ldr	r0, [sp, #8]
   1fa5c:	9901      	ldr	r1, [sp, #4]
   1fa5e:	4041      	eors	r1, r0
   1fa60:	ea31 0303 	bics.w	r3, r1, r3
   1fa64:	d108      	bne.n	1fa78 <am_hal_ctimer_read+0x64>
   1fa66:	4010      	ands	r0, r2
   1fa68:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
   1fa6c:	bf08      	it	eq
   1fa6e:	0c00      	lsreq	r0, r0, #16
   1fa70:	b004      	add	sp, #16
   1fa72:	bd70      	pop	{r4, r5, r6, pc}
   1fa74:	6800      	ldr	r0, [r0, #0]
   1fa76:	e7f6      	b.n	1fa66 <am_hal_ctimer_read+0x52>
   1fa78:	9803      	ldr	r0, [sp, #12]
   1fa7a:	e7f4      	b.n	1fa66 <am_hal_ctimer_read+0x52>
   1fa7c:	68c3      	ldr	r3, [r0, #12]
   1fa7e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
   1fa82:	4429      	add	r1, r5
   1fa84:	bf0c      	ite	eq
   1fa86:	f3c3 4344 	ubfxeq	r3, r3, #17, #5
   1fa8a:	f3c3 0344 	ubfxne	r3, r3, #1, #5
   1fa8e:	550b      	strb	r3, [r1, r4]
   1fa90:	e7d2      	b.n	1fa38 <am_hal_ctimer_read+0x24>
   1fa92:	bf00      	nop
   1fa94:	10003704 	.word	0x10003704
   1fa98:	00024658 	.word	0x00024658
   1fa9c:	000245fc 	.word	0x000245fc

0001faa0 <am_hal_ctimer_period_set>:
   1faa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1faa4:	b082      	sub	sp, #8
   1faa6:	4689      	mov	r9, r1
   1faa8:	4698      	mov	r8, r3
   1faaa:	0147      	lsls	r7, r0, #5
   1faac:	4614      	mov	r4, r2
   1faae:	f000 fa95 	bl	1ffdc <am_hal_interrupt_master_disable>
   1fab2:	f8df a094 	ldr.w	sl, [pc, #148]	; 1fb48 <am_hal_ctimer_period_set+0xa8>
   1fab6:	9001      	str	r0, [sp, #4]
   1fab8:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
   1fabc:	4d20      	ldr	r5, [pc, #128]	; (1fb40 <am_hal_ctimer_period_set+0xa0>)
   1fabe:	4e21      	ldr	r6, [pc, #132]	; (1fb44 <am_hal_ctimer_period_set+0xa4>)
   1fac0:	f857 300a 	ldr.w	r3, [r7, sl]
   1fac4:	d01a      	beq.n	1fafc <am_hal_ctimer_period_set+0x5c>
   1fac6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   1faca:	2b80      	cmp	r3, #128	; 0x80
   1facc:	d01b      	beq.n	1fb06 <am_hal_ctimer_period_set+0x66>
   1face:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1fad2:	2000      	movs	r0, #0
   1fad4:	4591      	cmp	r9, r2
   1fad6:	4603      	mov	r3, r0
   1fad8:	d01e      	beq.n	1fb18 <am_hal_ctimer_period_set+0x78>
   1fada:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
   1fade:	d025      	beq.n	1fb2c <am_hal_ctimer_period_set+0x8c>
   1fae0:	0c1b      	lsrs	r3, r3, #16
   1fae2:	b2a2      	uxth	r2, r4
   1fae4:	041b      	lsls	r3, r3, #16
   1fae6:	4310      	orrs	r0, r2
   1fae8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   1faec:	5178      	str	r0, [r7, r5]
   1faee:	51bb      	str	r3, [r7, r6]
   1faf0:	9801      	ldr	r0, [sp, #4]
   1faf2:	f000 fa77 	bl	1ffe4 <am_hal_interrupt_master_set>
   1faf6:	b002      	add	sp, #8
   1faf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fafc:	0c1b      	lsrs	r3, r3, #16
   1fafe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   1fb02:	2b80      	cmp	r3, #128	; 0x80
   1fb04:	d111      	bne.n	1fb2a <am_hal_ctimer_period_set+0x8a>
   1fb06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1fb0a:	4591      	cmp	r9, r2
   1fb0c:	ea4f 4004 	mov.w	r0, r4, lsl #16
   1fb10:	4623      	mov	r3, r4
   1fb12:	ebc8 0404 	rsb	r4, r8, r4
   1fb16:	d1e0      	bne.n	1fada <am_hal_ctimer_period_set+0x3a>
   1fb18:	b2a3      	uxth	r3, r4
   1fb1a:	4318      	orrs	r0, r3
   1fb1c:	5178      	str	r0, [r7, r5]
   1fb1e:	9801      	ldr	r0, [sp, #4]
   1fb20:	f000 fa60 	bl	1ffe4 <am_hal_interrupt_master_set>
   1fb24:	b002      	add	sp, #8
   1fb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fb2a:	2000      	movs	r0, #0
   1fb2c:	b2a3      	uxth	r3, r4
   1fb2e:	4318      	orrs	r0, r3
   1fb30:	51b8      	str	r0, [r7, r6]
   1fb32:	9801      	ldr	r0, [sp, #4]
   1fb34:	f000 fa56 	bl	1ffe4 <am_hal_interrupt_master_set>
   1fb38:	b002      	add	sp, #8
   1fb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fb3e:	bf00      	nop
   1fb40:	40008004 	.word	0x40008004
   1fb44:	40008008 	.word	0x40008008
   1fb48:	4000800c 	.word	0x4000800c

0001fb4c <am_hal_ctimer_int_enable>:
   1fb4c:	b510      	push	{r4, lr}
   1fb4e:	b082      	sub	sp, #8
   1fb50:	4604      	mov	r4, r0
   1fb52:	f000 fa43 	bl	1ffdc <am_hal_interrupt_master_disable>
   1fb56:	4b06      	ldr	r3, [pc, #24]	; (1fb70 <am_hal_ctimer_int_enable+0x24>)
   1fb58:	9001      	str	r0, [sp, #4]
   1fb5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1fb5e:	4314      	orrs	r4, r2
   1fb60:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
   1fb64:	9801      	ldr	r0, [sp, #4]
   1fb66:	f000 fa3d 	bl	1ffe4 <am_hal_interrupt_master_set>
   1fb6a:	b002      	add	sp, #8
   1fb6c:	bd10      	pop	{r4, pc}
   1fb6e:	bf00      	nop
   1fb70:	40008000 	.word	0x40008000

0001fb74 <am_hal_ctimer_int_clear>:
   1fb74:	b510      	push	{r4, lr}
   1fb76:	b082      	sub	sp, #8
   1fb78:	4604      	mov	r4, r0
   1fb7a:	f000 fa2f 	bl	1ffdc <am_hal_interrupt_master_disable>
   1fb7e:	4b04      	ldr	r3, [pc, #16]	; (1fb90 <am_hal_ctimer_int_clear+0x1c>)
   1fb80:	9001      	str	r0, [sp, #4]
   1fb82:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   1fb86:	9801      	ldr	r0, [sp, #4]
   1fb88:	f000 fa2c 	bl	1ffe4 <am_hal_interrupt_master_set>
   1fb8c:	b002      	add	sp, #8
   1fb8e:	bd10      	pop	{r4, pc}
   1fb90:	40008000 	.word	0x40008000

0001fb94 <am_hal_ctimer_int_status_get>:
   1fb94:	b510      	push	{r4, lr}
   1fb96:	b082      	sub	sp, #8
   1fb98:	4604      	mov	r4, r0
   1fb9a:	f000 fa1f 	bl	1ffdc <am_hal_interrupt_master_disable>
   1fb9e:	4b08      	ldr	r3, [pc, #32]	; (1fbc0 <am_hal_ctimer_int_status_get+0x2c>)
   1fba0:	9001      	str	r0, [sp, #4]
   1fba2:	b93c      	cbnz	r4, 1fbb4 <am_hal_ctimer_int_status_get+0x20>
   1fba4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   1fba8:	9801      	ldr	r0, [sp, #4]
   1fbaa:	f000 fa1b 	bl	1ffe4 <am_hal_interrupt_master_set>
   1fbae:	4620      	mov	r0, r4
   1fbb0:	b002      	add	sp, #8
   1fbb2:	bd10      	pop	{r4, pc}
   1fbb4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   1fbb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1fbbc:	401c      	ands	r4, r3
   1fbbe:	e7f3      	b.n	1fba8 <am_hal_ctimer_int_status_get+0x14>
   1fbc0:	40008000 	.word	0x40008000

0001fbc4 <am_hal_debug_error>:
   1fbc4:	e7fe      	b.n	1fbc4 <am_hal_debug_error>
   1fbc6:	bf00      	nop

0001fbc8 <am_hal_flash_delay>:
   1fbc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1fbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1fbce:	075b      	lsls	r3, r3, #29
   1fbd0:	bf46      	itte	mi
   1fbd2:	0040      	lslmi	r0, r0, #1
   1fbd4:	230e      	movmi	r3, #14
   1fbd6:	230b      	movpl	r3, #11
   1fbd8:	4298      	cmp	r0, r3
   1fbda:	d800      	bhi.n	1fbde <am_hal_flash_delay+0x16>
   1fbdc:	4770      	bx	lr
   1fbde:	1ac0      	subs	r0, r0, r3
   1fbe0:	4b00      	ldr	r3, [pc, #0]	; (1fbe4 <am_hal_flash_delay+0x1c>)
   1fbe2:	4718      	bx	r3
   1fbe4:	0800009d 	.word	0x0800009d

0001fbe8 <am_hal_flash_delay_status_check>:
   1fbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fbec:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1fbf0:	460d      	mov	r5, r1
   1fbf2:	4616      	mov	r6, r2
   1fbf4:	461f      	mov	r7, r3
   1fbf6:	b1b4      	cbz	r4, 1fc26 <am_hal_flash_delay_status_check+0x3e>
   1fbf8:	4604      	mov	r4, r0
   1fbfa:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   1fbfe:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1fc58 <am_hal_flash_delay_status_check+0x70>
   1fc02:	e009      	b.n	1fc18 <am_hal_flash_delay_status_check+0x30>
   1fc04:	b324      	cbz	r4, 1fc50 <am_hal_flash_delay_status_check+0x68>
   1fc06:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   1fc0a:	f013 0f04 	tst.w	r3, #4
   1fc0e:	bf14      	ite	ne
   1fc10:	2012      	movne	r0, #18
   1fc12:	2005      	moveq	r0, #5
   1fc14:	3c01      	subs	r4, #1
   1fc16:	47c0      	blx	r8
   1fc18:	682b      	ldr	r3, [r5, #0]
   1fc1a:	4033      	ands	r3, r6
   1fc1c:	429f      	cmp	r7, r3
   1fc1e:	d1f1      	bne.n	1fc04 <am_hal_flash_delay_status_check+0x1c>
   1fc20:	2000      	movs	r0, #0
   1fc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fc26:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1fc58 <am_hal_flash_delay_status_check+0x70>
   1fc2a:	4604      	mov	r4, r0
   1fc2c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   1fc30:	e009      	b.n	1fc46 <am_hal_flash_delay_status_check+0x5e>
   1fc32:	b16c      	cbz	r4, 1fc50 <am_hal_flash_delay_status_check+0x68>
   1fc34:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   1fc38:	f013 0f04 	tst.w	r3, #4
   1fc3c:	bf14      	ite	ne
   1fc3e:	2012      	movne	r0, #18
   1fc40:	2005      	moveq	r0, #5
   1fc42:	3c01      	subs	r4, #1
   1fc44:	47c0      	blx	r8
   1fc46:	682b      	ldr	r3, [r5, #0]
   1fc48:	4033      	ands	r3, r6
   1fc4a:	429f      	cmp	r7, r3
   1fc4c:	d0f1      	beq.n	1fc32 <am_hal_flash_delay_status_check+0x4a>
   1fc4e:	e7e7      	b.n	1fc20 <am_hal_flash_delay_status_check+0x38>
   1fc50:	2004      	movs	r0, #4
   1fc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fc56:	bf00      	nop
   1fc58:	0800009d 	.word	0x0800009d

0001fc5c <am_hal_flash_load_ui32>:
   1fc5c:	4b00      	ldr	r3, [pc, #0]	; (1fc60 <am_hal_flash_load_ui32+0x4>)
   1fc5e:	4718      	bx	r3
   1fc60:	08000075 	.word	0x08000075

0001fc64 <am_hal_flash_store_ui32>:
   1fc64:	4b01      	ldr	r3, [pc, #4]	; (1fc6c <am_hal_flash_store_ui32+0x8>)
   1fc66:	f043 0301 	orr.w	r3, r3, #1
   1fc6a:	4718      	bx	r3
   1fc6c:	10003714 	.word	0x10003714

0001fc70 <am_hal_gpio_pinconfig>:
   1fc70:	2831      	cmp	r0, #49	; 0x31
   1fc72:	d901      	bls.n	1fc78 <am_hal_gpio_pinconfig+0x8>
   1fc74:	2006      	movs	r0, #6
   1fc76:	4770      	bx	lr
   1fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc7c:	f001 0307 	and.w	r3, r1, #7
   1fc80:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
   1fc84:	b085      	sub	sp, #20
   1fc86:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   1fc8a:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   1fc8e:	d014      	beq.n	1fcba <am_hal_gpio_pinconfig+0x4a>
   1fc90:	f3c1 1742 	ubfx	r7, r1, #5, #3
   1fc94:	1dbd      	adds	r5, r7, #6
   1fc96:	f005 0507 	and.w	r5, r5, #7
   1fc9a:	2d03      	cmp	r5, #3
   1fc9c:	f042 0201 	orr.w	r2, r2, #1
   1fca0:	f200 80a7 	bhi.w	1fdf2 <am_hal_gpio_pinconfig+0x182>
   1fca4:	4d82      	ldr	r5, [pc, #520]	; (1feb0 <am_hal_gpio_pinconfig+0x240>)
   1fca6:	5c2d      	ldrb	r5, [r5, r0]
   1fca8:	07ee      	lsls	r6, r5, #31
   1fcaa:	d403      	bmi.n	1fcb4 <am_hal_gpio_pinconfig+0x44>
   1fcac:	4881      	ldr	r0, [pc, #516]	; (1feb4 <am_hal_gpio_pinconfig+0x244>)
   1fcae:	b005      	add	sp, #20
   1fcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcb4:	3f02      	subs	r7, #2
   1fcb6:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   1fcba:	2c00      	cmp	r4, #0
   1fcbc:	f040 8091 	bne.w	1fde2 <am_hal_gpio_pinconfig+0x172>
   1fcc0:	4c7d      	ldr	r4, [pc, #500]	; (1feb8 <am_hal_gpio_pinconfig+0x248>)
   1fcc2:	4d7e      	ldr	r5, [pc, #504]	; (1febc <am_hal_gpio_pinconfig+0x24c>)
   1fcc4:	5c24      	ldrb	r4, [r4, r0]
   1fcc6:	5c2d      	ldrb	r5, [r5, r0]
   1fcc8:	411c      	asrs	r4, r3
   1fcca:	f014 0f01 	tst.w	r4, #1
   1fcce:	bf0c      	ite	eq
   1fcd0:	2400      	moveq	r4, #0
   1fcd2:	2402      	movne	r4, #2
   1fcd4:	42ab      	cmp	r3, r5
   1fcd6:	ea42 0204 	orr.w	r2, r2, r4
   1fcda:	f000 8096 	beq.w	1fe0a <am_hal_gpio_pinconfig+0x19a>
   1fcde:	f3c1 3341 	ubfx	r3, r1, #13, #2
   1fce2:	105d      	asrs	r5, r3, #1
   1fce4:	f3c1 2681 	ubfx	r6, r1, #10, #2
   1fce8:	00db      	lsls	r3, r3, #3
   1fcea:	f3c1 2e07 	ubfx	lr, r1, #8, #8
   1fcee:	f003 0408 	and.w	r4, r3, #8
   1fcf2:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   1fcf6:	f00e 060c 	and.w	r6, lr, #12
   1fcfa:	f3c1 3500 	ubfx	r5, r1, #12, #1
   1fcfe:	2e04      	cmp	r6, #4
   1fd00:	ea43 0304 	orr.w	r3, r3, r4
   1fd04:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   1fd08:	462c      	mov	r4, r5
   1fd0a:	f000 808b 	beq.w	1fe24 <am_hal_gpio_pinconfig+0x1b4>
   1fd0e:	4c6c      	ldr	r4, [pc, #432]	; (1fec0 <am_hal_gpio_pinconfig+0x250>)
   1fd10:	6827      	ldr	r7, [r4, #0]
   1fd12:	1bcf      	subs	r7, r1, r7
   1fd14:	fab7 f787 	clz	r7, r7
   1fd18:	097f      	lsrs	r7, r7, #5
   1fd1a:	f01e 0f60 	tst.w	lr, #96	; 0x60
   1fd1e:	bf04      	itt	eq
   1fd20:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   1fd24:	f364 0300 	bfieq	r3, r4, #0, #1
   1fd28:	0084      	lsls	r4, r0, #2
   1fd2a:	f3c1 2101 	ubfx	r1, r1, #8, #2
   1fd2e:	2902      	cmp	r1, #2
   1fd30:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   1fd34:	d078      	beq.n	1fe28 <am_hal_gpio_pinconfig+0x1b8>
   1fd36:	d87f      	bhi.n	1fe38 <am_hal_gpio_pinconfig+0x1c8>
   1fd38:	2901      	cmp	r1, #1
   1fd3a:	f04f 0100 	mov.w	r1, #0
   1fd3e:	bf08      	it	eq
   1fd40:	f042 0204 	orreq.w	r2, r2, #4
   1fd44:	f005 0518 	and.w	r5, r5, #24
   1fd48:	9101      	str	r1, [sp, #4]
   1fd4a:	f004 041c 	and.w	r4, r4, #28
   1fd4e:	f020 0a03 	bic.w	sl, r0, #3
   1fd52:	f04f 090f 	mov.w	r9, #15
   1fd56:	fa09 f904 	lsl.w	r9, r9, r4
   1fd5a:	0841      	lsrs	r1, r0, #1
   1fd5c:	26ff      	movs	r6, #255	; 0xff
   1fd5e:	fa03 f404 	lsl.w	r4, r3, r4
   1fd62:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   1fd66:	40ae      	lsls	r6, r5
   1fd68:	9300      	str	r3, [sp, #0]
   1fd6a:	fa02 f505 	lsl.w	r5, r2, r5
   1fd6e:	4683      	mov	fp, r0
   1fd70:	f021 0803 	bic.w	r8, r1, #3
   1fd74:	f000 f932 	bl	1ffdc <am_hal_interrupt_master_disable>
   1fd78:	9b00      	ldr	r3, [sp, #0]
   1fd7a:	9003      	str	r0, [sp, #12]
   1fd7c:	ea6f 0909 	mvn.w	r9, r9
   1fd80:	43f6      	mvns	r6, r6
   1fd82:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   1fd86:	f8df e15c 	ldr.w	lr, [pc, #348]	; 1fee4 <am_hal_gpio_pinconfig+0x274>
   1fd8a:	4a4e      	ldr	r2, [pc, #312]	; (1fec4 <am_hal_gpio_pinconfig+0x254>)
   1fd8c:	b15f      	cbz	r7, 1fda6 <am_hal_gpio_pinconfig+0x136>
   1fd8e:	ea4f 07db 	mov.w	r7, fp, lsr #3
   1fd92:	f00b 001f 	and.w	r0, fp, #31
   1fd96:	f007 0704 	and.w	r7, r7, #4
   1fd9a:	f04f 0b01 	mov.w	fp, #1
   1fd9e:	494a      	ldr	r1, [pc, #296]	; (1fec8 <am_hal_gpio_pinconfig+0x258>)
   1fda0:	fa0b f000 	lsl.w	r0, fp, r0
   1fda4:	5078      	str	r0, [r7, r1]
   1fda6:	4849      	ldr	r0, [pc, #292]	; (1fecc <am_hal_gpio_pinconfig+0x25c>)
   1fda8:	2773      	movs	r7, #115	; 0x73
   1fdaa:	6607      	str	r7, [r0, #96]	; 0x60
   1fdac:	681f      	ldr	r7, [r3, #0]
   1fdae:	4037      	ands	r7, r6
   1fdb0:	433d      	orrs	r5, r7
   1fdb2:	601d      	str	r5, [r3, #0]
   1fdb4:	f858 300e 	ldr.w	r3, [r8, lr]
   1fdb8:	ea09 0303 	and.w	r3, r9, r3
   1fdbc:	4323      	orrs	r3, r4
   1fdbe:	f848 300e 	str.w	r3, [r8, lr]
   1fdc2:	f85a 3002 	ldr.w	r3, [sl, r2]
   1fdc6:	401e      	ands	r6, r3
   1fdc8:	9b01      	ldr	r3, [sp, #4]
   1fdca:	2400      	movs	r4, #0
   1fdcc:	431e      	orrs	r6, r3
   1fdce:	f84a 6002 	str.w	r6, [sl, r2]
   1fdd2:	6604      	str	r4, [r0, #96]	; 0x60
   1fdd4:	9803      	ldr	r0, [sp, #12]
   1fdd6:	f000 f905 	bl	1ffe4 <am_hal_interrupt_master_set>
   1fdda:	4620      	mov	r0, r4
   1fddc:	b005      	add	sp, #20
   1fdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fde2:	2c01      	cmp	r4, #1
   1fde4:	d017      	beq.n	1fe16 <am_hal_gpio_pinconfig+0x1a6>
   1fde6:	2c02      	cmp	r4, #2
   1fde8:	d035      	beq.n	1fe56 <am_hal_gpio_pinconfig+0x1e6>
   1fdea:	4839      	ldr	r0, [pc, #228]	; (1fed0 <am_hal_gpio_pinconfig+0x260>)
   1fdec:	b005      	add	sp, #20
   1fdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdf2:	2ec0      	cmp	r6, #192	; 0xc0
   1fdf4:	d02a      	beq.n	1fe4c <am_hal_gpio_pinconfig+0x1dc>
   1fdf6:	2e20      	cmp	r6, #32
   1fdf8:	f47f af5f 	bne.w	1fcba <am_hal_gpio_pinconfig+0x4a>
   1fdfc:	2814      	cmp	r0, #20
   1fdfe:	f43f af55 	beq.w	1fcac <am_hal_gpio_pinconfig+0x3c>
   1fe02:	2c00      	cmp	r4, #0
   1fe04:	f43f af5c 	beq.w	1fcc0 <am_hal_gpio_pinconfig+0x50>
   1fe08:	e7eb      	b.n	1fde2 <am_hal_gpio_pinconfig+0x172>
   1fe0a:	f3c1 4402 	ubfx	r4, r1, #16, #3
   1fe0e:	2c07      	cmp	r4, #7
   1fe10:	d128      	bne.n	1fe64 <am_hal_gpio_pinconfig+0x1f4>
   1fe12:	4830      	ldr	r0, [pc, #192]	; (1fed4 <am_hal_gpio_pinconfig+0x264>)
   1fe14:	e74b      	b.n	1fcae <am_hal_gpio_pinconfig+0x3e>
   1fe16:	4c26      	ldr	r4, [pc, #152]	; (1feb0 <am_hal_gpio_pinconfig+0x240>)
   1fe18:	5c24      	ldrb	r4, [r4, r0]
   1fe1a:	07a5      	lsls	r5, r4, #30
   1fe1c:	d5e5      	bpl.n	1fdea <am_hal_gpio_pinconfig+0x17a>
   1fe1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1fe22:	e74d      	b.n	1fcc0 <am_hal_gpio_pinconfig+0x50>
   1fe24:	2701      	movs	r7, #1
   1fe26:	e778      	b.n	1fd1a <am_hal_gpio_pinconfig+0xaa>
   1fe28:	f005 0518 	and.w	r5, r5, #24
   1fe2c:	f04f 0801 	mov.w	r8, #1
   1fe30:	fa08 f105 	lsl.w	r1, r8, r5
   1fe34:	9101      	str	r1, [sp, #4]
   1fe36:	e788      	b.n	1fd4a <am_hal_gpio_pinconfig+0xda>
   1fe38:	f005 0518 	and.w	r5, r5, #24
   1fe3c:	f04f 0801 	mov.w	r8, #1
   1fe40:	fa08 f105 	lsl.w	r1, r8, r5
   1fe44:	f042 0204 	orr.w	r2, r2, #4
   1fe48:	9101      	str	r1, [sp, #4]
   1fe4a:	e77e      	b.n	1fd4a <am_hal_gpio_pinconfig+0xda>
   1fe4c:	2814      	cmp	r0, #20
   1fe4e:	f43f af34 	beq.w	1fcba <am_hal_gpio_pinconfig+0x4a>
   1fe52:	4821      	ldr	r0, [pc, #132]	; (1fed8 <am_hal_gpio_pinconfig+0x268>)
   1fe54:	e72b      	b.n	1fcae <am_hal_gpio_pinconfig+0x3e>
   1fe56:	4c16      	ldr	r4, [pc, #88]	; (1feb0 <am_hal_gpio_pinconfig+0x240>)
   1fe58:	5c24      	ldrb	r4, [r4, r0]
   1fe5a:	0764      	lsls	r4, r4, #29
   1fe5c:	d5c5      	bpl.n	1fdea <am_hal_gpio_pinconfig+0x17a>
   1fe5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1fe62:	e72d      	b.n	1fcc0 <am_hal_gpio_pinconfig+0x50>
   1fe64:	4d1d      	ldr	r5, [pc, #116]	; (1fedc <am_hal_gpio_pinconfig+0x26c>)
   1fe66:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   1fe6a:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   1fe6e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   1fe72:	429e      	cmp	r6, r3
   1fe74:	d00c      	beq.n	1fe90 <am_hal_gpio_pinconfig+0x220>
   1fe76:	0084      	lsls	r4, r0, #2
   1fe78:	4425      	add	r5, r4
   1fe7a:	786e      	ldrb	r6, [r5, #1]
   1fe7c:	429e      	cmp	r6, r3
   1fe7e:	d012      	beq.n	1fea6 <am_hal_gpio_pinconfig+0x236>
   1fe80:	78ae      	ldrb	r6, [r5, #2]
   1fe82:	429e      	cmp	r6, r3
   1fe84:	d00d      	beq.n	1fea2 <am_hal_gpio_pinconfig+0x232>
   1fe86:	78ed      	ldrb	r5, [r5, #3]
   1fe88:	429d      	cmp	r5, r3
   1fe8a:	d00e      	beq.n	1feaa <am_hal_gpio_pinconfig+0x23a>
   1fe8c:	4814      	ldr	r0, [pc, #80]	; (1fee0 <am_hal_gpio_pinconfig+0x270>)
   1fe8e:	e70e      	b.n	1fcae <am_hal_gpio_pinconfig+0x3e>
   1fe90:	2300      	movs	r3, #0
   1fe92:	0084      	lsls	r4, r0, #2
   1fe94:	005b      	lsls	r3, r3, #1
   1fe96:	f3c1 5540 	ubfx	r5, r1, #21, #1
   1fe9a:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   1fe9e:	2700      	movs	r7, #0
   1fea0:	e743      	b.n	1fd2a <am_hal_gpio_pinconfig+0xba>
   1fea2:	2302      	movs	r3, #2
   1fea4:	e7f6      	b.n	1fe94 <am_hal_gpio_pinconfig+0x224>
   1fea6:	2301      	movs	r3, #1
   1fea8:	e7f4      	b.n	1fe94 <am_hal_gpio_pinconfig+0x224>
   1feaa:	2303      	movs	r3, #3
   1feac:	e7f2      	b.n	1fe94 <am_hal_gpio_pinconfig+0x224>
   1feae:	bf00      	nop
   1feb0:	0002467c 	.word	0x0002467c
   1feb4:	08000100 	.word	0x08000100
   1feb8:	00024778 	.word	0x00024778
   1febc:	000247b4 	.word	0x000247b4
   1fec0:	000247ac 	.word	0x000247ac
   1fec4:	400100e0 	.word	0x400100e0
   1fec8:	400100b4 	.word	0x400100b4
   1fecc:	40010000 	.word	0x40010000
   1fed0:	08000102 	.word	0x08000102
   1fed4:	08000103 	.word	0x08000103
   1fed8:	08000101 	.word	0x08000101
   1fedc:	000246b0 	.word	0x000246b0
   1fee0:	08000104 	.word	0x08000104
   1fee4:	40010040 	.word	0x40010040

0001fee8 <am_hal_gpio_state_read>:
   1fee8:	b1ca      	cbz	r2, 1ff1e <am_hal_gpio_state_read+0x36>
   1feea:	2831      	cmp	r0, #49	; 0x31
   1feec:	d904      	bls.n	1fef8 <am_hal_gpio_state_read+0x10>
   1feee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fef2:	6013      	str	r3, [r2, #0]
   1fef4:	2005      	movs	r0, #5
   1fef6:	4770      	bx	lr
   1fef8:	08c3      	lsrs	r3, r0, #3
   1fefa:	2901      	cmp	r1, #1
   1fefc:	f003 0304 	and.w	r3, r3, #4
   1ff00:	f000 001f 	and.w	r0, r0, #31
   1ff04:	d00d      	beq.n	1ff22 <am_hal_gpio_state_read+0x3a>
   1ff06:	d313      	bcc.n	1ff30 <am_hal_gpio_state_read+0x48>
   1ff08:	2902      	cmp	r1, #2
   1ff0a:	d108      	bne.n	1ff1e <am_hal_gpio_state_read+0x36>
   1ff0c:	490c      	ldr	r1, [pc, #48]	; (1ff40 <am_hal_gpio_state_read+0x58>)
   1ff0e:	585b      	ldr	r3, [r3, r1]
   1ff10:	fa23 f000 	lsr.w	r0, r3, r0
   1ff14:	f000 0001 	and.w	r0, r0, #1
   1ff18:	6010      	str	r0, [r2, #0]
   1ff1a:	2000      	movs	r0, #0
   1ff1c:	4770      	bx	lr
   1ff1e:	2006      	movs	r0, #6
   1ff20:	4770      	bx	lr
   1ff22:	4908      	ldr	r1, [pc, #32]	; (1ff44 <am_hal_gpio_state_read+0x5c>)
   1ff24:	585b      	ldr	r3, [r3, r1]
   1ff26:	fa23 f000 	lsr.w	r0, r3, r0
   1ff2a:	f000 0001 	and.w	r0, r0, #1
   1ff2e:	e7f3      	b.n	1ff18 <am_hal_gpio_state_read+0x30>
   1ff30:	4905      	ldr	r1, [pc, #20]	; (1ff48 <am_hal_gpio_state_read+0x60>)
   1ff32:	585b      	ldr	r3, [r3, r1]
   1ff34:	fa23 f000 	lsr.w	r0, r3, r0
   1ff38:	f000 0001 	and.w	r0, r0, #1
   1ff3c:	e7ec      	b.n	1ff18 <am_hal_gpio_state_read+0x30>
   1ff3e:	bf00      	nop
   1ff40:	400100a0 	.word	0x400100a0
   1ff44:	40010088 	.word	0x40010088
   1ff48:	40010080 	.word	0x40010080

0001ff4c <am_hal_gpio_state_write>:
   1ff4c:	2831      	cmp	r0, #49	; 0x31
   1ff4e:	d901      	bls.n	1ff54 <am_hal_gpio_state_write+0x8>
   1ff50:	2005      	movs	r0, #5
   1ff52:	4770      	bx	lr
   1ff54:	2905      	cmp	r1, #5
   1ff56:	d901      	bls.n	1ff5c <am_hal_gpio_state_write+0x10>
   1ff58:	2006      	movs	r0, #6
   1ff5a:	4770      	bx	lr
   1ff5c:	b570      	push	{r4, r5, r6, lr}
   1ff5e:	f000 031f 	and.w	r3, r0, #31
   1ff62:	b082      	sub	sp, #8
   1ff64:	08c0      	lsrs	r0, r0, #3
   1ff66:	2201      	movs	r2, #1
   1ff68:	460d      	mov	r5, r1
   1ff6a:	f000 0404 	and.w	r4, r0, #4
   1ff6e:	fa02 f603 	lsl.w	r6, r2, r3
   1ff72:	f000 f833 	bl	1ffdc <am_hal_interrupt_master_disable>
   1ff76:	1e69      	subs	r1, r5, #1
   1ff78:	9001      	str	r0, [sp, #4]
   1ff7a:	2904      	cmp	r1, #4
   1ff7c:	d817      	bhi.n	1ffae <am_hal_gpio_state_write+0x62>
   1ff7e:	e8df f001 	tbb	[pc, r1]
   1ff82:	0e13      	.short	0x0e13
   1ff84:	030b      	.short	0x030b
   1ff86:	19          	.byte	0x19
   1ff87:	00          	.byte	0x00
   1ff88:	4b0d      	ldr	r3, [pc, #52]	; (1ffc0 <am_hal_gpio_state_write+0x74>)
   1ff8a:	50e6      	str	r6, [r4, r3]
   1ff8c:	9801      	ldr	r0, [sp, #4]
   1ff8e:	f000 f829 	bl	1ffe4 <am_hal_interrupt_master_set>
   1ff92:	2000      	movs	r0, #0
   1ff94:	b002      	add	sp, #8
   1ff96:	bd70      	pop	{r4, r5, r6, pc}
   1ff98:	4b0a      	ldr	r3, [pc, #40]	; (1ffc4 <am_hal_gpio_state_write+0x78>)
   1ff9a:	50e6      	str	r6, [r4, r3]
   1ff9c:	e7f6      	b.n	1ff8c <am_hal_gpio_state_write+0x40>
   1ff9e:	4a0a      	ldr	r2, [pc, #40]	; (1ffc8 <am_hal_gpio_state_write+0x7c>)
   1ffa0:	58a3      	ldr	r3, [r4, r2]
   1ffa2:	4073      	eors	r3, r6
   1ffa4:	50a3      	str	r3, [r4, r2]
   1ffa6:	e7f1      	b.n	1ff8c <am_hal_gpio_state_write+0x40>
   1ffa8:	4b08      	ldr	r3, [pc, #32]	; (1ffcc <am_hal_gpio_state_write+0x80>)
   1ffaa:	50e6      	str	r6, [r4, r3]
   1ffac:	e7ee      	b.n	1ff8c <am_hal_gpio_state_write+0x40>
   1ffae:	4b08      	ldr	r3, [pc, #32]	; (1ffd0 <am_hal_gpio_state_write+0x84>)
   1ffb0:	50e6      	str	r6, [r4, r3]
   1ffb2:	e7eb      	b.n	1ff8c <am_hal_gpio_state_write+0x40>
   1ffb4:	4a03      	ldr	r2, [pc, #12]	; (1ffc4 <am_hal_gpio_state_write+0x78>)
   1ffb6:	58a3      	ldr	r3, [r4, r2]
   1ffb8:	4073      	eors	r3, r6
   1ffba:	50a3      	str	r3, [r4, r2]
   1ffbc:	e7e6      	b.n	1ff8c <am_hal_gpio_state_write+0x40>
   1ffbe:	bf00      	nop
   1ffc0:	400100a8 	.word	0x400100a8
   1ffc4:	400100b4 	.word	0x400100b4
   1ffc8:	40010088 	.word	0x40010088
   1ffcc:	40010090 	.word	0x40010090
   1ffd0:	40010098 	.word	0x40010098

0001ffd4 <am_hal_interrupt_master_enable>:
   1ffd4:	f3ef 8010 	mrs	r0, PRIMASK
   1ffd8:	b662      	cpsie	i
   1ffda:	4770      	bx	lr

0001ffdc <am_hal_interrupt_master_disable>:
   1ffdc:	f3ef 8010 	mrs	r0, PRIMASK
   1ffe0:	b672      	cpsid	i
   1ffe2:	4770      	bx	lr

0001ffe4 <am_hal_interrupt_master_set>:
   1ffe4:	f380 8810 	msr	PRIMASK, r0
   1ffe8:	4770      	bx	lr
   1ffea:	bf00      	nop

0001ffec <am_hal_mcuctrl_info_get>:
   1ffec:	b4f0      	push	{r4, r5, r6, r7}
   1ffee:	b121      	cbz	r1, 1fffa <am_hal_mcuctrl_info_get+0xe>
   1fff0:	2801      	cmp	r0, #1
   1fff2:	d038      	beq.n	20066 <am_hal_mcuctrl_info_get+0x7a>
   1fff4:	d320      	bcc.n	20038 <am_hal_mcuctrl_info_get+0x4c>
   1fff6:	2802      	cmp	r0, #2
   1fff8:	d002      	beq.n	20000 <am_hal_mcuctrl_info_get+0x14>
   1fffa:	2006      	movs	r0, #6
   1fffc:	bcf0      	pop	{r4, r5, r6, r7}
   1fffe:	4770      	bx	lr
   20000:	4a41      	ldr	r2, [pc, #260]	; (20108 <am_hal_mcuctrl_info_get+0x11c>)
   20002:	684d      	ldr	r5, [r1, #4]
   20004:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   20008:	694c      	ldr	r4, [r1, #20]
   2000a:	f003 0601 	and.w	r6, r3, #1
   2000e:	f3c3 0040 	ubfx	r0, r3, #1, #1
   20012:	f3c3 0380 	ubfx	r3, r3, #2, #1
   20016:	700e      	strb	r6, [r1, #0]
   20018:	7208      	strb	r0, [r1, #8]
   2001a:	740b      	strb	r3, [r1, #16]
   2001c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   20020:	60cb      	str	r3, [r1, #12]
   20022:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   20026:	4328      	orrs	r0, r5
   20028:	6048      	str	r0, [r1, #4]
   2002a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   2002e:	4323      	orrs	r3, r4
   20030:	2000      	movs	r0, #0
   20032:	614b      	str	r3, [r1, #20]
   20034:	bcf0      	pop	{r4, r5, r6, r7}
   20036:	4770      	bx	lr
   20038:	4a33      	ldr	r2, [pc, #204]	; (20108 <am_hal_mcuctrl_info_get+0x11c>)
   2003a:	6993      	ldr	r3, [r2, #24]
   2003c:	f3c3 1080 	ubfx	r0, r3, #6, #1
   20040:	f3c3 0380 	ubfx	r3, r3, #2, #1
   20044:	7008      	strb	r0, [r1, #0]
   20046:	704b      	strb	r3, [r1, #1]
   20048:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   2004c:	f3c3 6381 	ubfx	r3, r3, #26, #2
   20050:	710b      	strb	r3, [r1, #4]
   20052:	6953      	ldr	r3, [r2, #20]
   20054:	f3c3 0240 	ubfx	r2, r3, #1, #1
   20058:	f003 0301 	and.w	r3, r3, #1
   2005c:	2000      	movs	r0, #0
   2005e:	708a      	strb	r2, [r1, #2]
   20060:	70cb      	strb	r3, [r1, #3]
   20062:	bcf0      	pop	{r4, r5, r6, r7}
   20064:	4770      	bx	lr
   20066:	4b28      	ldr	r3, [pc, #160]	; (20108 <am_hal_mcuctrl_info_get+0x11c>)
   20068:	4c28      	ldr	r4, [pc, #160]	; (2010c <am_hal_mcuctrl_info_get+0x120>)
   2006a:	681a      	ldr	r2, [r3, #0]
   2006c:	600a      	str	r2, [r1, #0]
   2006e:	6858      	ldr	r0, [r3, #4]
   20070:	6048      	str	r0, [r1, #4]
   20072:	6898      	ldr	r0, [r3, #8]
   20074:	6088      	str	r0, [r1, #8]
   20076:	68d8      	ldr	r0, [r3, #12]
   20078:	60c8      	str	r0, [r1, #12]
   2007a:	691d      	ldr	r5, [r3, #16]
   2007c:	4824      	ldr	r0, [pc, #144]	; (20110 <am_hal_mcuctrl_info_get+0x124>)
   2007e:	610d      	str	r5, [r1, #16]
   20080:	f3c2 5703 	ubfx	r7, r2, #20, #4
   20084:	f3c2 4603 	ubfx	r6, r2, #16, #4
   20088:	695d      	ldr	r5, [r3, #20]
   2008a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   2008e:	4b21      	ldr	r3, [pc, #132]	; (20114 <am_hal_mcuctrl_info_get+0x128>)
   20090:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   20094:	6208      	str	r0, [r1, #32]
   20096:	f002 0201 	and.w	r2, r2, #1
   2009a:	614d      	str	r5, [r1, #20]
   2009c:	61cc      	str	r4, [r1, #28]
   2009e:	618a      	str	r2, [r1, #24]
   200a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   200a4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   200a8:	b2d0      	uxtb	r0, r2
   200aa:	f004 020f 	and.w	r2, r4, #15
   200ae:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   200b2:	624a      	str	r2, [r1, #36]	; 0x24
   200b4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   200b8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   200bc:	f3c2 1003 	ubfx	r0, r2, #4, #4
   200c0:	f004 020f 	and.w	r2, r4, #15
   200c4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   200c8:	628a      	str	r2, [r1, #40]	; 0x28
   200ca:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   200ce:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   200d2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   200d6:	f3c2 1203 	ubfx	r2, r2, #4, #4
   200da:	4302      	orrs	r2, r0
   200dc:	62ca      	str	r2, [r1, #44]	; 0x2c
   200de:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   200e2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   200e6:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   200ea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   200ee:	b2c0      	uxtb	r0, r0
   200f0:	0400      	lsls	r0, r0, #16
   200f2:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   200f6:	b2d2      	uxtb	r2, r2
   200f8:	431a      	orrs	r2, r3
   200fa:	b2e3      	uxtb	r3, r4
   200fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   20100:	630b      	str	r3, [r1, #48]	; 0x30
   20102:	2000      	movs	r0, #0
   20104:	bcf0      	pop	{r4, r5, r6, r7}
   20106:	4770      	bx	lr
   20108:	40020000 	.word	0x40020000
   2010c:	000247e8 	.word	0x000247e8
   20110:	00024828 	.word	0x00024828
   20114:	f0000f00 	.word	0xf0000f00

00020118 <am_hal_pwrctrl_periph_enable>:
   20118:	b570      	push	{r4, r5, r6, lr}
   2011a:	b082      	sub	sp, #8
   2011c:	4604      	mov	r4, r0
   2011e:	f7ff ff5d 	bl	1ffdc <am_hal_interrupt_master_disable>
   20122:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20126:	4d0f      	ldr	r5, [pc, #60]	; (20164 <am_hal_pwrctrl_periph_enable+0x4c>)
   20128:	4e0f      	ldr	r6, [pc, #60]	; (20168 <am_hal_pwrctrl_periph_enable+0x50>)
   2012a:	9001      	str	r0, [sp, #4]
   2012c:	00a4      	lsls	r4, r4, #2
   2012e:	68aa      	ldr	r2, [r5, #8]
   20130:	5933      	ldr	r3, [r6, r4]
   20132:	4313      	orrs	r3, r2
   20134:	60ab      	str	r3, [r5, #8]
   20136:	9801      	ldr	r0, [sp, #4]
   20138:	4434      	add	r4, r6
   2013a:	f7ff ff53 	bl	1ffe4 <am_hal_interrupt_master_set>
   2013e:	20a0      	movs	r0, #160	; 0xa0
   20140:	f7ff fd42 	bl	1fbc8 <am_hal_flash_delay>
   20144:	69ab      	ldr	r3, [r5, #24]
   20146:	6864      	ldr	r4, [r4, #4]
   20148:	4223      	tst	r3, r4
   2014a:	d103      	bne.n	20154 <am_hal_pwrctrl_periph_enable+0x3c>
   2014c:	20a0      	movs	r0, #160	; 0xa0
   2014e:	f7ff fd3b 	bl	1fbc8 <am_hal_flash_delay>
   20152:	69ab      	ldr	r3, [r5, #24]
   20154:	4b03      	ldr	r3, [pc, #12]	; (20164 <am_hal_pwrctrl_periph_enable+0x4c>)
   20156:	699b      	ldr	r3, [r3, #24]
   20158:	4223      	tst	r3, r4
   2015a:	bf0c      	ite	eq
   2015c:	2001      	moveq	r0, #1
   2015e:	2000      	movne	r0, #0
   20160:	b002      	add	sp, #8
   20162:	bd70      	pop	{r4, r5, r6, pc}
   20164:	40021000 	.word	0x40021000
   20168:	00024868 	.word	0x00024868

0002016c <am_hal_pwrctrl_periph_disable>:
   2016c:	b570      	push	{r4, r5, r6, lr}
   2016e:	b082      	sub	sp, #8
   20170:	4604      	mov	r4, r0
   20172:	f7ff ff33 	bl	1ffdc <am_hal_interrupt_master_disable>
   20176:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2017a:	4d10      	ldr	r5, [pc, #64]	; (201bc <am_hal_pwrctrl_periph_disable+0x50>)
   2017c:	4e10      	ldr	r6, [pc, #64]	; (201c0 <am_hal_pwrctrl_periph_disable+0x54>)
   2017e:	9001      	str	r0, [sp, #4]
   20180:	00a4      	lsls	r4, r4, #2
   20182:	68ab      	ldr	r3, [r5, #8]
   20184:	5932      	ldr	r2, [r6, r4]
   20186:	ea23 0302 	bic.w	r3, r3, r2
   2018a:	60ab      	str	r3, [r5, #8]
   2018c:	9801      	ldr	r0, [sp, #4]
   2018e:	4434      	add	r4, r6
   20190:	f7ff ff28 	bl	1ffe4 <am_hal_interrupt_master_set>
   20194:	20a0      	movs	r0, #160	; 0xa0
   20196:	f7ff fd17 	bl	1fbc8 <am_hal_flash_delay>
   2019a:	69ab      	ldr	r3, [r5, #24]
   2019c:	6864      	ldr	r4, [r4, #4]
   2019e:	4223      	tst	r3, r4
   201a0:	d003      	beq.n	201aa <am_hal_pwrctrl_periph_disable+0x3e>
   201a2:	20a0      	movs	r0, #160	; 0xa0
   201a4:	f7ff fd10 	bl	1fbc8 <am_hal_flash_delay>
   201a8:	69ab      	ldr	r3, [r5, #24]
   201aa:	4b04      	ldr	r3, [pc, #16]	; (201bc <am_hal_pwrctrl_periph_disable+0x50>)
   201ac:	699b      	ldr	r3, [r3, #24]
   201ae:	4223      	tst	r3, r4
   201b0:	bf14      	ite	ne
   201b2:	2001      	movne	r0, #1
   201b4:	2000      	moveq	r0, #0
   201b6:	b002      	add	sp, #8
   201b8:	bd70      	pop	{r4, r5, r6, pc}
   201ba:	bf00      	nop
   201bc:	40021000 	.word	0x40021000
   201c0:	00024868 	.word	0x00024868

000201c4 <am_hal_pwrctrl_memory_enable>:
   201c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   201c8:	ea4f 0880 	mov.w	r8, r0, lsl #2
   201cc:	eb08 0300 	add.w	r3, r8, r0
   201d0:	009b      	lsls	r3, r3, #2
   201d2:	4d1e      	ldr	r5, [pc, #120]	; (2024c <am_hal_pwrctrl_memory_enable+0x88>)
   201d4:	58ee      	ldr	r6, [r5, r3]
   201d6:	18ea      	adds	r2, r5, r3
   201d8:	43f1      	mvns	r1, r6
   201da:	4604      	mov	r4, r0
   201dc:	6917      	ldr	r7, [r2, #16]
   201de:	d126      	bne.n	2022e <am_hal_pwrctrl_memory_enable+0x6a>
   201e0:	b95e      	cbnz	r6, 201fa <am_hal_pwrctrl_memory_enable+0x36>
   201e2:	4444      	add	r4, r8
   201e4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   201e8:	6868      	ldr	r0, [r5, #4]
   201ea:	4b19      	ldr	r3, [pc, #100]	; (20250 <am_hal_pwrctrl_memory_enable+0x8c>)
   201ec:	695b      	ldr	r3, [r3, #20]
   201ee:	403b      	ands	r3, r7
   201f0:	1a18      	subs	r0, r3, r0
   201f2:	bf18      	it	ne
   201f4:	2001      	movne	r0, #1
   201f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   201fa:	f8df 9054 	ldr.w	r9, [pc, #84]	; 20250 <am_hal_pwrctrl_memory_enable+0x8c>
   201fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
   20202:	4444      	add	r4, r8
   20204:	431e      	orrs	r6, r3
   20206:	20a0      	movs	r0, #160	; 0xa0
   20208:	f8c9 6010 	str.w	r6, [r9, #16]
   2020c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   20210:	f7ff fcda 	bl	1fbc8 <am_hal_flash_delay>
   20214:	f8d9 0014 	ldr.w	r0, [r9, #20]
   20218:	686c      	ldr	r4, [r5, #4]
   2021a:	4038      	ands	r0, r7
   2021c:	42a0      	cmp	r0, r4
   2021e:	d0e4      	beq.n	201ea <am_hal_pwrctrl_memory_enable+0x26>
   20220:	20a0      	movs	r0, #160	; 0xa0
   20222:	f7ff fcd1 	bl	1fbc8 <am_hal_flash_delay>
   20226:	f8d9 3014 	ldr.w	r3, [r9, #20]
   2022a:	4620      	mov	r0, r4
   2022c:	e7dd      	b.n	201ea <am_hal_pwrctrl_memory_enable+0x26>
   2022e:	68d3      	ldr	r3, [r2, #12]
   20230:	4807      	ldr	r0, [pc, #28]	; (20250 <am_hal_pwrctrl_memory_enable+0x8c>)
   20232:	400b      	ands	r3, r1
   20234:	43db      	mvns	r3, r3
   20236:	6902      	ldr	r2, [r0, #16]
   20238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2023c:	f043 0301 	orr.w	r3, r3, #1
   20240:	4013      	ands	r3, r2
   20242:	6103      	str	r3, [r0, #16]
   20244:	2010      	movs	r0, #16
   20246:	f7ff fcbf 	bl	1fbc8 <am_hal_flash_delay>
   2024a:	e7c9      	b.n	201e0 <am_hal_pwrctrl_memory_enable+0x1c>
   2024c:	0002491c 	.word	0x0002491c
   20250:	40021000 	.word	0x40021000

00020254 <am_hal_pwrctrl_low_power_init>:
   20254:	b530      	push	{r4, r5, lr}
   20256:	4b33      	ldr	r3, [pc, #204]	; (20324 <am_hal_pwrctrl_low_power_init+0xd0>)
   20258:	681a      	ldr	r2, [r3, #0]
   2025a:	b085      	sub	sp, #20
   2025c:	b912      	cbnz	r2, 20264 <am_hal_pwrctrl_low_power_init+0x10>
   2025e:	4a32      	ldr	r2, [pc, #200]	; (20328 <am_hal_pwrctrl_low_power_init+0xd4>)
   20260:	6812      	ldr	r2, [r2, #0]
   20262:	601a      	str	r2, [r3, #0]
   20264:	4b31      	ldr	r3, [pc, #196]	; (2032c <am_hal_pwrctrl_low_power_init+0xd8>)
   20266:	68db      	ldr	r3, [r3, #12]
   20268:	b2db      	uxtb	r3, r3
   2026a:	2b12      	cmp	r3, #18
   2026c:	d00a      	beq.n	20284 <am_hal_pwrctrl_low_power_init+0x30>
   2026e:	4c30      	ldr	r4, [pc, #192]	; (20330 <am_hal_pwrctrl_low_power_init+0xdc>)
   20270:	2100      	movs	r1, #0
   20272:	200c      	movs	r0, #12
   20274:	f7ff f83e 	bl	1f2f4 <am_hal_cachectrl_control>
   20278:	69a3      	ldr	r3, [r4, #24]
   2027a:	05d8      	lsls	r0, r3, #23
   2027c:	d520      	bpl.n	202c0 <am_hal_pwrctrl_low_power_init+0x6c>
   2027e:	2000      	movs	r0, #0
   20280:	b005      	add	sp, #20
   20282:	bd30      	pop	{r4, r5, pc}
   20284:	4c2a      	ldr	r4, [pc, #168]	; (20330 <am_hal_pwrctrl_low_power_init+0xdc>)
   20286:	6863      	ldr	r3, [r4, #4]
   20288:	07d9      	lsls	r1, r3, #31
   2028a:	d5f0      	bpl.n	2026e <am_hal_pwrctrl_low_power_init+0x1a>
   2028c:	f7ff fea6 	bl	1ffdc <am_hal_interrupt_master_disable>
   20290:	9003      	str	r0, [sp, #12]
   20292:	68a3      	ldr	r3, [r4, #8]
   20294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   20298:	60a3      	str	r3, [r4, #8]
   2029a:	9803      	ldr	r0, [sp, #12]
   2029c:	f7ff fea2 	bl	1ffe4 <am_hal_interrupt_master_set>
   202a0:	20a0      	movs	r0, #160	; 0xa0
   202a2:	f7ff fc91 	bl	1fbc8 <am_hal_flash_delay>
   202a6:	69a3      	ldr	r3, [r4, #24]
   202a8:	061a      	lsls	r2, r3, #24
   202aa:	d403      	bmi.n	202b4 <am_hal_pwrctrl_low_power_init+0x60>
   202ac:	20a0      	movs	r0, #160	; 0xa0
   202ae:	f7ff fc8b 	bl	1fbc8 <am_hal_flash_delay>
   202b2:	69a3      	ldr	r3, [r4, #24]
   202b4:	4b1e      	ldr	r3, [pc, #120]	; (20330 <am_hal_pwrctrl_low_power_init+0xdc>)
   202b6:	699b      	ldr	r3, [r3, #24]
   202b8:	061b      	lsls	r3, r3, #24
   202ba:	d4d8      	bmi.n	2026e <am_hal_pwrctrl_low_power_init+0x1a>
   202bc:	2001      	movs	r0, #1
   202be:	e7df      	b.n	20280 <am_hal_pwrctrl_low_power_init+0x2c>
   202c0:	4d1a      	ldr	r5, [pc, #104]	; (2032c <am_hal_pwrctrl_low_power_init+0xd8>)
   202c2:	491c      	ldr	r1, [pc, #112]	; (20334 <am_hal_pwrctrl_low_power_init+0xe0>)
   202c4:	7e2a      	ldrb	r2, [r5, #24]
   202c6:	2001      	movs	r0, #1
   202c8:	4302      	orrs	r2, r0
   202ca:	2307      	movs	r3, #7
   202cc:	762a      	strb	r2, [r5, #24]
   202ce:	9000      	str	r0, [sp, #0]
   202d0:	461a      	mov	r2, r3
   202d2:	f242 7010 	movw	r0, #10000	; 0x2710
   202d6:	f7ff fc87 	bl	1fbe8 <am_hal_flash_delay_status_check>
   202da:	b110      	cbz	r0, 202e2 <am_hal_pwrctrl_low_power_init+0x8e>
   202dc:	2004      	movs	r0, #4
   202de:	b005      	add	sp, #20
   202e0:	bd30      	pop	{r4, r5, pc}
   202e2:	6823      	ldr	r3, [r4, #0]
   202e4:	f043 0301 	orr.w	r3, r3, #1
   202e8:	6023      	str	r3, [r4, #0]
   202ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   202ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   202f0:	6263      	str	r3, [r4, #36]	; 0x24
   202f2:	68eb      	ldr	r3, [r5, #12]
   202f4:	b2db      	uxtb	r3, r3
   202f6:	2b11      	cmp	r3, #17
   202f8:	d1c1      	bne.n	2027e <am_hal_pwrctrl_low_power_init+0x2a>
   202fa:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   202fe:	f360 5356 	bfi	r3, r0, #21, #2
   20302:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   20306:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   2030a:	220f      	movs	r2, #15
   2030c:	f362 138b 	bfi	r3, r2, #6, #6
   20310:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   20314:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   20318:	f362 0305 	bfi	r3, r2, #0, #6
   2031c:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   20320:	e7ae      	b.n	20280 <am_hal_pwrctrl_low_power_init+0x2c>
   20322:	bf00      	nop
   20324:	100051f0 	.word	0x100051f0
   20328:	4ffff000 	.word	0x4ffff000
   2032c:	40020000 	.word	0x40020000
   20330:	40021000 	.word	0x40021000
   20334:	40020018 	.word	0x40020018

00020338 <am_hal_queue_init>:
   20338:	b410      	push	{r4}
   2033a:	2400      	movs	r4, #0
   2033c:	6004      	str	r4, [r0, #0]
   2033e:	6044      	str	r4, [r0, #4]
   20340:	6084      	str	r4, [r0, #8]
   20342:	60c3      	str	r3, [r0, #12]
   20344:	6102      	str	r2, [r0, #16]
   20346:	6141      	str	r1, [r0, #20]
   20348:	f85d 4b04 	ldr.w	r4, [sp], #4
   2034c:	4770      	bx	lr
   2034e:	bf00      	nop

00020350 <am_hal_queue_item_add>:
   20350:	b5f0      	push	{r4, r5, r6, r7, lr}
   20352:	4604      	mov	r4, r0
   20354:	6906      	ldr	r6, [r0, #16]
   20356:	b083      	sub	sp, #12
   20358:	fb06 f602 	mul.w	r6, r6, r2
   2035c:	460d      	mov	r5, r1
   2035e:	f7ff fe3d 	bl	1ffdc <am_hal_interrupt_master_disable>
   20362:	68e7      	ldr	r7, [r4, #12]
   20364:	68a2      	ldr	r2, [r4, #8]
   20366:	9001      	str	r0, [sp, #4]
   20368:	1abb      	subs	r3, r7, r2
   2036a:	429e      	cmp	r6, r3
   2036c:	d826      	bhi.n	203bc <am_hal_queue_item_add+0x6c>
   2036e:	b196      	cbz	r6, 20396 <am_hal_queue_item_add+0x46>
   20370:	6823      	ldr	r3, [r4, #0]
   20372:	4629      	mov	r1, r5
   20374:	b1c5      	cbz	r5, 203a8 <am_hal_queue_item_add+0x58>
   20376:	19af      	adds	r7, r5, r6
   20378:	6962      	ldr	r2, [r4, #20]
   2037a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2037e:	54d0      	strb	r0, [r2, r3]
   20380:	6823      	ldr	r3, [r4, #0]
   20382:	68e5      	ldr	r5, [r4, #12]
   20384:	3301      	adds	r3, #1
   20386:	42b9      	cmp	r1, r7
   20388:	fbb3 f0f5 	udiv	r0, r3, r5
   2038c:	fb05 3310 	mls	r3, r5, r0, r3
   20390:	6023      	str	r3, [r4, #0]
   20392:	d1f1      	bne.n	20378 <am_hal_queue_item_add+0x28>
   20394:	68a2      	ldr	r2, [r4, #8]
   20396:	4432      	add	r2, r6
   20398:	60a2      	str	r2, [r4, #8]
   2039a:	2401      	movs	r4, #1
   2039c:	9801      	ldr	r0, [sp, #4]
   2039e:	f7ff fe21 	bl	1ffe4 <am_hal_interrupt_master_set>
   203a2:	4620      	mov	r0, r4
   203a4:	b003      	add	sp, #12
   203a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   203a8:	3101      	adds	r1, #1
   203aa:	3301      	adds	r3, #1
   203ac:	428e      	cmp	r6, r1
   203ae:	fbb3 f0f7 	udiv	r0, r3, r7
   203b2:	fb07 3310 	mls	r3, r7, r0, r3
   203b6:	d1f7      	bne.n	203a8 <am_hal_queue_item_add+0x58>
   203b8:	6023      	str	r3, [r4, #0]
   203ba:	e7ec      	b.n	20396 <am_hal_queue_item_add+0x46>
   203bc:	2400      	movs	r4, #0
   203be:	e7ed      	b.n	2039c <am_hal_queue_item_add+0x4c>

000203c0 <am_hal_queue_item_get>:
   203c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   203c2:	4604      	mov	r4, r0
   203c4:	6906      	ldr	r6, [r0, #16]
   203c6:	b083      	sub	sp, #12
   203c8:	fb06 f602 	mul.w	r6, r6, r2
   203cc:	460d      	mov	r5, r1
   203ce:	f7ff fe05 	bl	1ffdc <am_hal_interrupt_master_disable>
   203d2:	68a2      	ldr	r2, [r4, #8]
   203d4:	9001      	str	r0, [sp, #4]
   203d6:	4296      	cmp	r6, r2
   203d8:	d81c      	bhi.n	20414 <am_hal_queue_item_get+0x54>
   203da:	b196      	cbz	r6, 20402 <am_hal_queue_item_get+0x42>
   203dc:	6863      	ldr	r3, [r4, #4]
   203de:	b1dd      	cbz	r5, 20418 <am_hal_queue_item_get+0x58>
   203e0:	4629      	mov	r1, r5
   203e2:	19af      	adds	r7, r5, r6
   203e4:	6962      	ldr	r2, [r4, #20]
   203e6:	5cd3      	ldrb	r3, [r2, r3]
   203e8:	f801 3b01 	strb.w	r3, [r1], #1
   203ec:	6863      	ldr	r3, [r4, #4]
   203ee:	68e5      	ldr	r5, [r4, #12]
   203f0:	3301      	adds	r3, #1
   203f2:	428f      	cmp	r7, r1
   203f4:	fbb3 f0f5 	udiv	r0, r3, r5
   203f8:	fb05 3310 	mls	r3, r5, r0, r3
   203fc:	6063      	str	r3, [r4, #4]
   203fe:	d1f1      	bne.n	203e4 <am_hal_queue_item_get+0x24>
   20400:	68a2      	ldr	r2, [r4, #8]
   20402:	1b92      	subs	r2, r2, r6
   20404:	60a2      	str	r2, [r4, #8]
   20406:	2401      	movs	r4, #1
   20408:	9801      	ldr	r0, [sp, #4]
   2040a:	f7ff fdeb 	bl	1ffe4 <am_hal_interrupt_master_set>
   2040e:	4620      	mov	r0, r4
   20410:	b003      	add	sp, #12
   20412:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20414:	2400      	movs	r4, #0
   20416:	e7f7      	b.n	20408 <am_hal_queue_item_get+0x48>
   20418:	68e0      	ldr	r0, [r4, #12]
   2041a:	4629      	mov	r1, r5
   2041c:	3101      	adds	r1, #1
   2041e:	3301      	adds	r3, #1
   20420:	428e      	cmp	r6, r1
   20422:	fbb3 f5f0 	udiv	r5, r3, r0
   20426:	fb00 3315 	mls	r3, r0, r5, r3
   2042a:	d1f7      	bne.n	2041c <am_hal_queue_item_get+0x5c>
   2042c:	6063      	str	r3, [r4, #4]
   2042e:	e7e8      	b.n	20402 <am_hal_queue_item_get+0x42>

00020430 <am_hal_sysctrl_sleep>:
   20430:	b510      	push	{r4, lr}
   20432:	b082      	sub	sp, #8
   20434:	4604      	mov	r4, r0
   20436:	f7ff fdd1 	bl	1ffdc <am_hal_interrupt_master_disable>
   2043a:	9001      	str	r0, [sp, #4]
   2043c:	b124      	cbz	r4, 20448 <am_hal_sysctrl_sleep+0x18>
   2043e:	4b12      	ldr	r3, [pc, #72]	; (20488 <am_hal_sysctrl_sleep+0x58>)
   20440:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   20444:	07db      	lsls	r3, r3, #31
   20446:	d512      	bpl.n	2046e <am_hal_sysctrl_sleep+0x3e>
   20448:	4a10      	ldr	r2, [pc, #64]	; (2048c <am_hal_sysctrl_sleep+0x5c>)
   2044a:	6913      	ldr	r3, [r2, #16]
   2044c:	f023 0304 	bic.w	r3, r3, #4
   20450:	6113      	str	r3, [r2, #16]
   20452:	f3bf 8f4f 	dsb	sy
   20456:	4a0e      	ldr	r2, [pc, #56]	; (20490 <am_hal_sysctrl_sleep+0x60>)
   20458:	4b0e      	ldr	r3, [pc, #56]	; (20494 <am_hal_sysctrl_sleep+0x64>)
   2045a:	6812      	ldr	r2, [r2, #0]
   2045c:	601a      	str	r2, [r3, #0]
   2045e:	bf30      	wfi
   20460:	f3bf 8f6f 	isb	sy
   20464:	9801      	ldr	r0, [sp, #4]
   20466:	f7ff fdbd 	bl	1ffe4 <am_hal_interrupt_master_set>
   2046a:	b002      	add	sp, #8
   2046c:	bd10      	pop	{r4, pc}
   2046e:	4b0a      	ldr	r3, [pc, #40]	; (20498 <am_hal_sysctrl_sleep+0x68>)
   20470:	681a      	ldr	r2, [r3, #0]
   20472:	b912      	cbnz	r2, 2047a <am_hal_sysctrl_sleep+0x4a>
   20474:	4a09      	ldr	r2, [pc, #36]	; (2049c <am_hal_sysctrl_sleep+0x6c>)
   20476:	6812      	ldr	r2, [r2, #0]
   20478:	601a      	str	r2, [r3, #0]
   2047a:	4a04      	ldr	r2, [pc, #16]	; (2048c <am_hal_sysctrl_sleep+0x5c>)
   2047c:	6913      	ldr	r3, [r2, #16]
   2047e:	f043 0304 	orr.w	r3, r3, #4
   20482:	6113      	str	r3, [r2, #16]
   20484:	e7e5      	b.n	20452 <am_hal_sysctrl_sleep+0x22>
   20486:	bf00      	nop
   20488:	40020000 	.word	0x40020000
   2048c:	e000ed00 	.word	0xe000ed00
   20490:	5fff0000 	.word	0x5fff0000
   20494:	100051f4 	.word	0x100051f4
   20498:	100051f0 	.word	0x100051f0
   2049c:	4ffff000 	.word	0x4ffff000

000204a0 <am_hal_sysctrl_fpu_enable>:
   204a0:	4b02      	ldr	r3, [pc, #8]	; (204ac <am_hal_sysctrl_fpu_enable+0xc>)
   204a2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   204a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   204aa:	4770      	bx	lr
   204ac:	e000ed00 	.word	0xe000ed00

000204b0 <am_hal_sysctrl_fpu_stacking_enable>:
   204b0:	b510      	push	{r4, lr}
   204b2:	b082      	sub	sp, #8
   204b4:	4604      	mov	r4, r0
   204b6:	f7ff fd91 	bl	1ffdc <am_hal_interrupt_master_disable>
   204ba:	4a09      	ldr	r2, [pc, #36]	; (204e0 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   204bc:	9001      	str	r0, [sp, #4]
   204be:	6853      	ldr	r3, [r2, #4]
   204c0:	2c00      	cmp	r4, #0
   204c2:	bf14      	ite	ne
   204c4:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
   204c8:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   204cc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   204d0:	430b      	orrs	r3, r1
   204d2:	6053      	str	r3, [r2, #4]
   204d4:	9801      	ldr	r0, [sp, #4]
   204d6:	f7ff fd85 	bl	1ffe4 <am_hal_interrupt_master_set>
   204da:	b002      	add	sp, #8
   204dc:	bd10      	pop	{r4, pc}
   204de:	bf00      	nop
   204e0:	e000ef30 	.word	0xe000ef30
	...

000204f0 <uECC_vli_sub>:
   204f0:	f1c3 0308 	rsb	r3, r3, #8
   204f4:	00db      	lsls	r3, r3, #3
   204f6:	b470      	push	{r4, r5, r6}
   204f8:	3301      	adds	r3, #1
   204fa:	2400      	movs	r4, #0
   204fc:	a503      	add	r5, pc, #12	; (adr r5, 2050c <uECC_vli_sub+0x1c>)
   204fe:	bf00      	nop
   20500:	195b      	adds	r3, r3, r5
   20502:	c920      	ldmia	r1!, {r5}
   20504:	ca40      	ldmia	r2!, {r6}
   20506:	1bad      	subs	r5, r5, r6
   20508:	c020      	stmia	r0!, {r5}
   2050a:	4718      	bx	r3
   2050c:	c920      	ldmia	r1!, {r5}
   2050e:	ca40      	ldmia	r2!, {r6}
   20510:	41b5      	sbcs	r5, r6
   20512:	c020      	stmia	r0!, {r5}
   20514:	c920      	ldmia	r1!, {r5}
   20516:	ca40      	ldmia	r2!, {r6}
   20518:	41b5      	sbcs	r5, r6
   2051a:	c020      	stmia	r0!, {r5}
   2051c:	c920      	ldmia	r1!, {r5}
   2051e:	ca40      	ldmia	r2!, {r6}
   20520:	41b5      	sbcs	r5, r6
   20522:	c020      	stmia	r0!, {r5}
   20524:	c920      	ldmia	r1!, {r5}
   20526:	ca40      	ldmia	r2!, {r6}
   20528:	41b5      	sbcs	r5, r6
   2052a:	c020      	stmia	r0!, {r5}
   2052c:	c920      	ldmia	r1!, {r5}
   2052e:	ca40      	ldmia	r2!, {r6}
   20530:	41b5      	sbcs	r5, r6
   20532:	c020      	stmia	r0!, {r5}
   20534:	c920      	ldmia	r1!, {r5}
   20536:	ca40      	ldmia	r2!, {r6}
   20538:	41b5      	sbcs	r5, r6
   2053a:	c020      	stmia	r0!, {r5}
   2053c:	c920      	ldmia	r1!, {r5}
   2053e:	ca40      	ldmia	r2!, {r6}
   20540:	41b5      	sbcs	r5, r6
   20542:	c020      	stmia	r0!, {r5}
   20544:	4164      	adcs	r4, r4
   20546:	fab4 f084 	clz	r0, r4
   2054a:	0940      	lsrs	r0, r0, #5
   2054c:	bc70      	pop	{r4, r5, r6}
   2054e:	4770      	bx	lr

00020550 <uECC_vli_mult>:
   20550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20554:	b408      	push	{r3}
   20556:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
   20558:	b404      	push	{r2}
   2055a:	f851 2b04 	ldr.w	r2, [r1], #4
   2055e:	fba3 8902 	umull	r8, r9, r3, r2
   20562:	f840 8b04 	str.w	r8, [r0], #4
   20566:	f04f 0a00 	mov.w	sl, #0
   2056a:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2056e:	f04f 0b00 	mov.w	fp, #0
   20572:	fbe5 ab62 	umaal	sl, fp, r5, r2
   20576:	f04f 0c00 	mov.w	ip, #0
   2057a:	fbe6 bc62 	umaal	fp, ip, r6, r2
   2057e:	f04f 0e00 	mov.w	lr, #0
   20582:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20586:	f851 2b04 	ldr.w	r2, [r1], #4
   2058a:	f04f 0800 	mov.w	r8, #0
   2058e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20592:	f840 8b04 	str.w	r8, [r0], #4
   20596:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2059a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2059e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   205a2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   205a6:	f851 2b04 	ldr.w	r2, [r1], #4
   205aa:	f04f 0800 	mov.w	r8, #0
   205ae:	fbe3 8962 	umaal	r8, r9, r3, r2
   205b2:	f840 8b04 	str.w	r8, [r0], #4
   205b6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   205ba:	fbe5 ab62 	umaal	sl, fp, r5, r2
   205be:	fbe6 bc62 	umaal	fp, ip, r6, r2
   205c2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   205c6:	f851 2b04 	ldr.w	r2, [r1], #4
   205ca:	f04f 0800 	mov.w	r8, #0
   205ce:	fbe3 8962 	umaal	r8, r9, r3, r2
   205d2:	f840 8b04 	str.w	r8, [r0], #4
   205d6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   205da:	fbe5 ab62 	umaal	sl, fp, r5, r2
   205de:	fbe6 bc62 	umaal	fp, ip, r6, r2
   205e2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   205e6:	f851 2b04 	ldr.w	r2, [r1], #4
   205ea:	f04f 0800 	mov.w	r8, #0
   205ee:	fbe3 8962 	umaal	r8, r9, r3, r2
   205f2:	f840 8b04 	str.w	r8, [r0], #4
   205f6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   205fa:	fbe5 ab62 	umaal	sl, fp, r5, r2
   205fe:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20602:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20606:	f840 9b04 	str.w	r9, [r0], #4
   2060a:	f840 ab04 	str.w	sl, [r0], #4
   2060e:	f840 bb04 	str.w	fp, [r0], #4
   20612:	f840 cb04 	str.w	ip, [r0], #4
   20616:	f840 eb04 	str.w	lr, [r0], #4
   2061a:	bc0c      	pop	{r2, r3}
   2061c:	2b05      	cmp	r3, #5
   2061e:	f000 811e 	beq.w	2085e <uECC_vli_mult+0x30e>
   20622:	680c      	ldr	r4, [r1, #0]
   20624:	f1a0 0014 	sub.w	r0, r0, #20
   20628:	f1a1 0114 	sub.w	r1, r1, #20
   2062c:	f1a2 0214 	sub.w	r2, r2, #20
   20630:	f852 eb04 	ldr.w	lr, [r2], #4
   20634:	f04f 0500 	mov.w	r5, #0
   20638:	f850 6b04 	ldr.w	r6, [r0], #4
   2063c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20640:	f852 eb04 	ldr.w	lr, [r2], #4
   20644:	f850 7b04 	ldr.w	r7, [r0], #4
   20648:	fbe4 676e 	umaal	r6, r7, r4, lr
   2064c:	f852 eb04 	ldr.w	lr, [r2], #4
   20650:	f850 8b04 	ldr.w	r8, [r0], #4
   20654:	fbe4 786e 	umaal	r7, r8, r4, lr
   20658:	f852 eb04 	ldr.w	lr, [r2], #4
   2065c:	f850 9b04 	ldr.w	r9, [r0], #4
   20660:	fbe4 896e 	umaal	r8, r9, r4, lr
   20664:	f852 eb04 	ldr.w	lr, [r2], #4
   20668:	f850 ab04 	ldr.w	sl, [r0], #4
   2066c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20670:	f1a0 0014 	sub.w	r0, r0, #20
   20674:	f852 4b04 	ldr.w	r4, [r2], #4
   20678:	f851 eb04 	ldr.w	lr, [r1], #4
   2067c:	f04f 0c00 	mov.w	ip, #0
   20680:	fbe4 c56e 	umaal	ip, r5, r4, lr
   20684:	f840 cb04 	str.w	ip, [r0], #4
   20688:	f851 eb04 	ldr.w	lr, [r1], #4
   2068c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20690:	f840 5b04 	str.w	r5, [r0], #4
   20694:	f851 eb04 	ldr.w	lr, [r1], #4
   20698:	fbe4 676e 	umaal	r6, r7, r4, lr
   2069c:	f840 6b04 	str.w	r6, [r0], #4
   206a0:	f851 eb04 	ldr.w	lr, [r1], #4
   206a4:	fbe4 786e 	umaal	r7, r8, r4, lr
   206a8:	f840 7b04 	str.w	r7, [r0], #4
   206ac:	f851 eb04 	ldr.w	lr, [r1], #4
   206b0:	fbe4 896e 	umaal	r8, r9, r4, lr
   206b4:	f840 8b04 	str.w	r8, [r0], #4
   206b8:	f851 eb04 	ldr.w	lr, [r1], #4
   206bc:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   206c0:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   206c4:	2b06      	cmp	r3, #6
   206c6:	f000 80ca 	beq.w	2085e <uECC_vli_mult+0x30e>
   206ca:	680c      	ldr	r4, [r1, #0]
   206cc:	f1a0 0018 	sub.w	r0, r0, #24
   206d0:	f1a1 0118 	sub.w	r1, r1, #24
   206d4:	f1a2 0218 	sub.w	r2, r2, #24
   206d8:	f852 eb04 	ldr.w	lr, [r2], #4
   206dc:	f04f 0500 	mov.w	r5, #0
   206e0:	f850 6b04 	ldr.w	r6, [r0], #4
   206e4:	fbe4 566e 	umaal	r5, r6, r4, lr
   206e8:	f852 eb04 	ldr.w	lr, [r2], #4
   206ec:	f850 7b04 	ldr.w	r7, [r0], #4
   206f0:	fbe4 676e 	umaal	r6, r7, r4, lr
   206f4:	f852 eb04 	ldr.w	lr, [r2], #4
   206f8:	f850 8b04 	ldr.w	r8, [r0], #4
   206fc:	fbe4 786e 	umaal	r7, r8, r4, lr
   20700:	f852 eb04 	ldr.w	lr, [r2], #4
   20704:	f850 9b04 	ldr.w	r9, [r0], #4
   20708:	fbe4 896e 	umaal	r8, r9, r4, lr
   2070c:	f852 eb04 	ldr.w	lr, [r2], #4
   20710:	f850 ab04 	ldr.w	sl, [r0], #4
   20714:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20718:	f852 eb04 	ldr.w	lr, [r2], #4
   2071c:	f850 bb04 	ldr.w	fp, [r0], #4
   20720:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20724:	f1a0 0018 	sub.w	r0, r0, #24
   20728:	f852 4b04 	ldr.w	r4, [r2], #4
   2072c:	f851 eb04 	ldr.w	lr, [r1], #4
   20730:	f04f 0c00 	mov.w	ip, #0
   20734:	fbe4 c56e 	umaal	ip, r5, r4, lr
   20738:	f840 cb04 	str.w	ip, [r0], #4
   2073c:	f851 eb04 	ldr.w	lr, [r1], #4
   20740:	fbe4 566e 	umaal	r5, r6, r4, lr
   20744:	f840 5b04 	str.w	r5, [r0], #4
   20748:	f851 eb04 	ldr.w	lr, [r1], #4
   2074c:	fbe4 676e 	umaal	r6, r7, r4, lr
   20750:	f840 6b04 	str.w	r6, [r0], #4
   20754:	f851 eb04 	ldr.w	lr, [r1], #4
   20758:	fbe4 786e 	umaal	r7, r8, r4, lr
   2075c:	f840 7b04 	str.w	r7, [r0], #4
   20760:	f851 eb04 	ldr.w	lr, [r1], #4
   20764:	fbe4 896e 	umaal	r8, r9, r4, lr
   20768:	f840 8b04 	str.w	r8, [r0], #4
   2076c:	f851 eb04 	ldr.w	lr, [r1], #4
   20770:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20774:	f840 9b04 	str.w	r9, [r0], #4
   20778:	f851 eb04 	ldr.w	lr, [r1], #4
   2077c:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20780:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   20784:	2b07      	cmp	r3, #7
   20786:	d06a      	beq.n	2085e <uECC_vli_mult+0x30e>
   20788:	b408      	push	{r3}
   2078a:	680c      	ldr	r4, [r1, #0]
   2078c:	f1a0 001c 	sub.w	r0, r0, #28
   20790:	f1a1 011c 	sub.w	r1, r1, #28
   20794:	f1a2 021c 	sub.w	r2, r2, #28
   20798:	f852 eb04 	ldr.w	lr, [r2], #4
   2079c:	f04f 0500 	mov.w	r5, #0
   207a0:	f850 6b04 	ldr.w	r6, [r0], #4
   207a4:	fbe4 566e 	umaal	r5, r6, r4, lr
   207a8:	f852 eb04 	ldr.w	lr, [r2], #4
   207ac:	f850 7b04 	ldr.w	r7, [r0], #4
   207b0:	fbe4 676e 	umaal	r6, r7, r4, lr
   207b4:	f852 eb04 	ldr.w	lr, [r2], #4
   207b8:	f850 8b04 	ldr.w	r8, [r0], #4
   207bc:	fbe4 786e 	umaal	r7, r8, r4, lr
   207c0:	f852 eb04 	ldr.w	lr, [r2], #4
   207c4:	f850 9b04 	ldr.w	r9, [r0], #4
   207c8:	fbe4 896e 	umaal	r8, r9, r4, lr
   207cc:	f852 eb04 	ldr.w	lr, [r2], #4
   207d0:	f850 ab04 	ldr.w	sl, [r0], #4
   207d4:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   207d8:	f852 eb04 	ldr.w	lr, [r2], #4
   207dc:	f850 bb04 	ldr.w	fp, [r0], #4
   207e0:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   207e4:	f852 eb04 	ldr.w	lr, [r2], #4
   207e8:	f850 cb04 	ldr.w	ip, [r0], #4
   207ec:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   207f0:	f1a0 001c 	sub.w	r0, r0, #28
   207f4:	f852 4b04 	ldr.w	r4, [r2], #4
   207f8:	f851 eb04 	ldr.w	lr, [r1], #4
   207fc:	f04f 0300 	mov.w	r3, #0
   20800:	fbe4 356e 	umaal	r3, r5, r4, lr
   20804:	f840 3b04 	str.w	r3, [r0], #4
   20808:	f851 eb04 	ldr.w	lr, [r1], #4
   2080c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20810:	f840 5b04 	str.w	r5, [r0], #4
   20814:	f851 eb04 	ldr.w	lr, [r1], #4
   20818:	fbe4 676e 	umaal	r6, r7, r4, lr
   2081c:	f840 6b04 	str.w	r6, [r0], #4
   20820:	f851 eb04 	ldr.w	lr, [r1], #4
   20824:	fbe4 786e 	umaal	r7, r8, r4, lr
   20828:	f840 7b04 	str.w	r7, [r0], #4
   2082c:	f851 eb04 	ldr.w	lr, [r1], #4
   20830:	fbe4 896e 	umaal	r8, r9, r4, lr
   20834:	f840 8b04 	str.w	r8, [r0], #4
   20838:	f851 eb04 	ldr.w	lr, [r1], #4
   2083c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20840:	f840 9b04 	str.w	r9, [r0], #4
   20844:	f851 eb04 	ldr.w	lr, [r1], #4
   20848:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   2084c:	f840 ab04 	str.w	sl, [r0], #4
   20850:	f851 eb04 	ldr.w	lr, [r1], #4
   20854:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   20858:	e8a0 1800 	stmia.w	r0!, {fp, ip}
   2085c:	bc08      	pop	{r3}
   2085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20862:	bf00      	nop
	...

00020870 <uECC_vli_modAdd>:
   20870:	b5f0      	push	{r4, r5, r6, r7, lr}
   20872:	f99d c014 	ldrsb.w	ip, [sp, #20]
   20876:	f1cc 0408 	rsb	r4, ip, #8
   2087a:	00e4      	lsls	r4, r4, #3
   2087c:	3401      	adds	r4, #1
   2087e:	469e      	mov	lr, r3
   20880:	4623      	mov	r3, r4
   20882:	4604      	mov	r4, r0
   20884:	2700      	movs	r7, #0
   20886:	a505      	add	r5, pc, #20	; (adr r5, 2089c <uECC_vli_modAdd+0x2c>)
   20888:	f3af 8000 	nop.w
   2088c:	f3af 8000 	nop.w
   20890:	195b      	adds	r3, r3, r5
   20892:	c920      	ldmia	r1!, {r5}
   20894:	ca40      	ldmia	r2!, {r6}
   20896:	19ad      	adds	r5, r5, r6
   20898:	c420      	stmia	r4!, {r5}
   2089a:	4718      	bx	r3
   2089c:	c920      	ldmia	r1!, {r5}
   2089e:	ca40      	ldmia	r2!, {r6}
   208a0:	4175      	adcs	r5, r6
   208a2:	c420      	stmia	r4!, {r5}
   208a4:	c920      	ldmia	r1!, {r5}
   208a6:	ca40      	ldmia	r2!, {r6}
   208a8:	4175      	adcs	r5, r6
   208aa:	c420      	stmia	r4!, {r5}
   208ac:	c920      	ldmia	r1!, {r5}
   208ae:	ca40      	ldmia	r2!, {r6}
   208b0:	4175      	adcs	r5, r6
   208b2:	c420      	stmia	r4!, {r5}
   208b4:	c920      	ldmia	r1!, {r5}
   208b6:	ca40      	ldmia	r2!, {r6}
   208b8:	4175      	adcs	r5, r6
   208ba:	c420      	stmia	r4!, {r5}
   208bc:	c920      	ldmia	r1!, {r5}
   208be:	ca40      	ldmia	r2!, {r6}
   208c0:	4175      	adcs	r5, r6
   208c2:	c420      	stmia	r4!, {r5}
   208c4:	c920      	ldmia	r1!, {r5}
   208c6:	ca40      	ldmia	r2!, {r6}
   208c8:	4175      	adcs	r5, r6
   208ca:	c420      	stmia	r4!, {r5}
   208cc:	c920      	ldmia	r1!, {r5}
   208ce:	ca40      	ldmia	r2!, {r6}
   208d0:	4175      	adcs	r5, r6
   208d2:	c420      	stmia	r4!, {r5}
   208d4:	417f      	adcs	r7, r7
   208d6:	b9c7      	cbnz	r7, 2090a <uECC_vli_modAdd+0x9a>
   208d8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   208dc:	b25b      	sxtb	r3, r3
   208de:	2b00      	cmp	r3, #0
   208e0:	db13      	blt.n	2090a <uECC_vli_modAdd+0x9a>
   208e2:	b21a      	sxth	r2, r3
   208e4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   208e8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   208ec:	4291      	cmp	r1, r2
   208ee:	d80b      	bhi.n	20908 <uECC_vli_modAdd+0x98>
   208f0:	d30b      	bcc.n	2090a <uECC_vli_modAdd+0x9a>
   208f2:	3b01      	subs	r3, #1
   208f4:	b25b      	sxtb	r3, r3
   208f6:	1c59      	adds	r1, r3, #1
   208f8:	b21a      	sxth	r2, r3
   208fa:	d006      	beq.n	2090a <uECC_vli_modAdd+0x9a>
   208fc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   20900:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   20904:	4291      	cmp	r1, r2
   20906:	d9f3      	bls.n	208f0 <uECC_vli_modAdd+0x80>
   20908:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2090a:	4672      	mov	r2, lr
   2090c:	4663      	mov	r3, ip
   2090e:	4601      	mov	r1, r0
   20910:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20914:	f7ff bdec 	b.w	204f0 <uECC_vli_sub>
	...

00020920 <uECC_vli_modSub>:
   20920:	b5f0      	push	{r4, r5, r6, r7, lr}
   20922:	f99d 4014 	ldrsb.w	r4, [sp, #20]
   20926:	f1c4 0408 	rsb	r4, r4, #8
   2092a:	00e4      	lsls	r4, r4, #3
   2092c:	1c66      	adds	r6, r4, #1
   2092e:	4686      	mov	lr, r0
   20930:	469c      	mov	ip, r3
   20932:	4635      	mov	r5, r6
   20934:	4604      	mov	r4, r0
   20936:	2700      	movs	r7, #0
   20938:	a304      	add	r3, pc, #16	; (adr r3, 2094c <uECC_vli_modSub+0x2c>)
   2093a:	bf00      	nop
   2093c:	f3af 8000 	nop.w
   20940:	18ed      	adds	r5, r5, r3
   20942:	c908      	ldmia	r1!, {r3}
   20944:	ca01      	ldmia	r2!, {r0}
   20946:	1a1b      	subs	r3, r3, r0
   20948:	c408      	stmia	r4!, {r3}
   2094a:	4728      	bx	r5
   2094c:	c908      	ldmia	r1!, {r3}
   2094e:	ca01      	ldmia	r2!, {r0}
   20950:	4183      	sbcs	r3, r0
   20952:	c408      	stmia	r4!, {r3}
   20954:	c908      	ldmia	r1!, {r3}
   20956:	ca01      	ldmia	r2!, {r0}
   20958:	4183      	sbcs	r3, r0
   2095a:	c408      	stmia	r4!, {r3}
   2095c:	c908      	ldmia	r1!, {r3}
   2095e:	ca01      	ldmia	r2!, {r0}
   20960:	4183      	sbcs	r3, r0
   20962:	c408      	stmia	r4!, {r3}
   20964:	c908      	ldmia	r1!, {r3}
   20966:	ca01      	ldmia	r2!, {r0}
   20968:	4183      	sbcs	r3, r0
   2096a:	c408      	stmia	r4!, {r3}
   2096c:	c908      	ldmia	r1!, {r3}
   2096e:	ca01      	ldmia	r2!, {r0}
   20970:	4183      	sbcs	r3, r0
   20972:	c408      	stmia	r4!, {r3}
   20974:	c908      	ldmia	r1!, {r3}
   20976:	ca01      	ldmia	r2!, {r0}
   20978:	4183      	sbcs	r3, r0
   2097a:	c408      	stmia	r4!, {r3}
   2097c:	c908      	ldmia	r1!, {r3}
   2097e:	ca01      	ldmia	r2!, {r0}
   20980:	4183      	sbcs	r3, r0
   20982:	c408      	stmia	r4!, {r3}
   20984:	417f      	adcs	r7, r7
   20986:	2f00      	cmp	r7, #0
   20988:	d12d      	bne.n	209e6 <uECC_vli_modSub+0xc6>
   2098a:	4670      	mov	r0, lr
   2098c:	4663      	mov	r3, ip
   2098e:	4634      	mov	r4, r6
   20990:	4672      	mov	r2, lr
   20992:	2100      	movs	r1, #0
   20994:	a505      	add	r5, pc, #20	; (adr r5, 209ac <uECC_vli_modSub+0x8c>)
   20996:	bf00      	nop
   20998:	f3af 8000 	nop.w
   2099c:	f3af 8000 	nop.w
   209a0:	1964      	adds	r4, r4, r5
   209a2:	ca20      	ldmia	r2!, {r5}
   209a4:	cb40      	ldmia	r3!, {r6}
   209a6:	19ad      	adds	r5, r5, r6
   209a8:	c020      	stmia	r0!, {r5}
   209aa:	4720      	bx	r4
   209ac:	ca20      	ldmia	r2!, {r5}
   209ae:	cb40      	ldmia	r3!, {r6}
   209b0:	4175      	adcs	r5, r6
   209b2:	c020      	stmia	r0!, {r5}
   209b4:	ca20      	ldmia	r2!, {r5}
   209b6:	cb40      	ldmia	r3!, {r6}
   209b8:	4175      	adcs	r5, r6
   209ba:	c020      	stmia	r0!, {r5}
   209bc:	ca20      	ldmia	r2!, {r5}
   209be:	cb40      	ldmia	r3!, {r6}
   209c0:	4175      	adcs	r5, r6
   209c2:	c020      	stmia	r0!, {r5}
   209c4:	ca20      	ldmia	r2!, {r5}
   209c6:	cb40      	ldmia	r3!, {r6}
   209c8:	4175      	adcs	r5, r6
   209ca:	c020      	stmia	r0!, {r5}
   209cc:	ca20      	ldmia	r2!, {r5}
   209ce:	cb40      	ldmia	r3!, {r6}
   209d0:	4175      	adcs	r5, r6
   209d2:	c020      	stmia	r0!, {r5}
   209d4:	ca20      	ldmia	r2!, {r5}
   209d6:	cb40      	ldmia	r3!, {r6}
   209d8:	4175      	adcs	r5, r6
   209da:	c020      	stmia	r0!, {r5}
   209dc:	ca20      	ldmia	r2!, {r5}
   209de:	cb40      	ldmia	r3!, {r6}
   209e0:	4175      	adcs	r5, r6
   209e2:	c020      	stmia	r0!, {r5}
   209e4:	4149      	adcs	r1, r1
   209e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000209f0 <x_side_default>:
   209f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209f4:	4693      	mov	fp, r2
   209f6:	b09b      	sub	sp, #108	; 0x6c
   209f8:	4604      	mov	r4, r0
   209fa:	4689      	mov	r9, r1
   209fc:	a802      	add	r0, sp, #8
   209fe:	2220      	movs	r2, #32
   20a00:	2100      	movs	r1, #0
   20a02:	f7eb fcab 	bl	c35c <memset>
   20a06:	f99b 3000 	ldrsb.w	r3, [fp]
   20a0a:	9301      	str	r3, [sp, #4]
   20a0c:	464a      	mov	r2, r9
   20a0e:	4649      	mov	r1, r9
   20a10:	a80a      	add	r0, sp, #40	; 0x28
   20a12:	2503      	movs	r5, #3
   20a14:	461e      	mov	r6, r3
   20a16:	9502      	str	r5, [sp, #8]
   20a18:	f7ff fd9a 	bl	20550 <uECC_vli_mult>
   20a1c:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   20a20:	a90a      	add	r1, sp, #40	; 0x28
   20a22:	4620      	mov	r0, r4
   20a24:	4798      	blx	r3
   20a26:	f1c6 0108 	rsb	r1, r6, #8
   20a2a:	40a9      	lsls	r1, r5
   20a2c:	f101 0801 	add.w	r8, r1, #1
   20a30:	aa02      	add	r2, sp, #8
   20a32:	4641      	mov	r1, r8
   20a34:	f10b 0a04 	add.w	sl, fp, #4
   20a38:	4623      	mov	r3, r4
   20a3a:	4626      	mov	r6, r4
   20a3c:	2000      	movs	r0, #0
   20a3e:	a703      	add	r7, pc, #12	; (adr r7, 20a4c <x_side_default+0x5c>)
   20a40:	19c9      	adds	r1, r1, r7
   20a42:	ce80      	ldmia	r6!, {r7}
   20a44:	ca20      	ldmia	r2!, {r5}
   20a46:	1b7f      	subs	r7, r7, r5
   20a48:	c380      	stmia	r3!, {r7}
   20a4a:	4708      	bx	r1
   20a4c:	ce80      	ldmia	r6!, {r7}
   20a4e:	ca20      	ldmia	r2!, {r5}
   20a50:	41af      	sbcs	r7, r5
   20a52:	c380      	stmia	r3!, {r7}
   20a54:	ce80      	ldmia	r6!, {r7}
   20a56:	ca20      	ldmia	r2!, {r5}
   20a58:	41af      	sbcs	r7, r5
   20a5a:	c380      	stmia	r3!, {r7}
   20a5c:	ce80      	ldmia	r6!, {r7}
   20a5e:	ca20      	ldmia	r2!, {r5}
   20a60:	41af      	sbcs	r7, r5
   20a62:	c380      	stmia	r3!, {r7}
   20a64:	ce80      	ldmia	r6!, {r7}
   20a66:	ca20      	ldmia	r2!, {r5}
   20a68:	41af      	sbcs	r7, r5
   20a6a:	c380      	stmia	r3!, {r7}
   20a6c:	ce80      	ldmia	r6!, {r7}
   20a6e:	ca20      	ldmia	r2!, {r5}
   20a70:	41af      	sbcs	r7, r5
   20a72:	c380      	stmia	r3!, {r7}
   20a74:	ce80      	ldmia	r6!, {r7}
   20a76:	ca20      	ldmia	r2!, {r5}
   20a78:	41af      	sbcs	r7, r5
   20a7a:	c380      	stmia	r3!, {r7}
   20a7c:	ce80      	ldmia	r6!, {r7}
   20a7e:	ca20      	ldmia	r2!, {r5}
   20a80:	41af      	sbcs	r7, r5
   20a82:	c380      	stmia	r3!, {r7}
   20a84:	4140      	adcs	r0, r0
   20a86:	2800      	cmp	r0, #0
   20a88:	d12d      	bne.n	20ae6 <x_side_default+0xf6>
   20a8a:	4623      	mov	r3, r4
   20a8c:	4652      	mov	r2, sl
   20a8e:	4641      	mov	r1, r8
   20a90:	4620      	mov	r0, r4
   20a92:	2500      	movs	r5, #0
   20a94:	a605      	add	r6, pc, #20	; (adr r6, 20aac <x_side_default+0xbc>)
   20a96:	bf00      	nop
   20a98:	f3af 8000 	nop.w
   20a9c:	f3af 8000 	nop.w
   20aa0:	1989      	adds	r1, r1, r6
   20aa2:	c840      	ldmia	r0!, {r6}
   20aa4:	ca80      	ldmia	r2!, {r7}
   20aa6:	19f6      	adds	r6, r6, r7
   20aa8:	c340      	stmia	r3!, {r6}
   20aaa:	4708      	bx	r1
   20aac:	c840      	ldmia	r0!, {r6}
   20aae:	ca80      	ldmia	r2!, {r7}
   20ab0:	417e      	adcs	r6, r7
   20ab2:	c340      	stmia	r3!, {r6}
   20ab4:	c840      	ldmia	r0!, {r6}
   20ab6:	ca80      	ldmia	r2!, {r7}
   20ab8:	417e      	adcs	r6, r7
   20aba:	c340      	stmia	r3!, {r6}
   20abc:	c840      	ldmia	r0!, {r6}
   20abe:	ca80      	ldmia	r2!, {r7}
   20ac0:	417e      	adcs	r6, r7
   20ac2:	c340      	stmia	r3!, {r6}
   20ac4:	c840      	ldmia	r0!, {r6}
   20ac6:	ca80      	ldmia	r2!, {r7}
   20ac8:	417e      	adcs	r6, r7
   20aca:	c340      	stmia	r3!, {r6}
   20acc:	c840      	ldmia	r0!, {r6}
   20ace:	ca80      	ldmia	r2!, {r7}
   20ad0:	417e      	adcs	r6, r7
   20ad2:	c340      	stmia	r3!, {r6}
   20ad4:	c840      	ldmia	r0!, {r6}
   20ad6:	ca80      	ldmia	r2!, {r7}
   20ad8:	417e      	adcs	r6, r7
   20ada:	c340      	stmia	r3!, {r6}
   20adc:	c840      	ldmia	r0!, {r6}
   20ade:	ca80      	ldmia	r2!, {r7}
   20ae0:	417e      	adcs	r6, r7
   20ae2:	c340      	stmia	r3!, {r6}
   20ae4:	416d      	adcs	r5, r5
   20ae6:	464a      	mov	r2, r9
   20ae8:	f99b 3000 	ldrsb.w	r3, [fp]
   20aec:	4621      	mov	r1, r4
   20aee:	a80a      	add	r0, sp, #40	; 0x28
   20af0:	f7ff fd2e 	bl	20550 <uECC_vli_mult>
   20af4:	a90a      	add	r1, sp, #40	; 0x28
   20af6:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   20afa:	4620      	mov	r0, r4
   20afc:	4798      	blx	r3
   20afe:	4626      	mov	r6, r4
   20b00:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   20b04:	4641      	mov	r1, r8
   20b06:	4622      	mov	r2, r4
   20b08:	2000      	movs	r0, #0
   20b0a:	a504      	add	r5, pc, #16	; (adr r5, 20b1c <x_side_default+0x12c>)
   20b0c:	f3af 8000 	nop.w
   20b10:	1949      	adds	r1, r1, r5
   20b12:	ce20      	ldmia	r6!, {r5}
   20b14:	cb80      	ldmia	r3!, {r7}
   20b16:	19ed      	adds	r5, r5, r7
   20b18:	c220      	stmia	r2!, {r5}
   20b1a:	4708      	bx	r1
   20b1c:	ce20      	ldmia	r6!, {r5}
   20b1e:	cb80      	ldmia	r3!, {r7}
   20b20:	417d      	adcs	r5, r7
   20b22:	c220      	stmia	r2!, {r5}
   20b24:	ce20      	ldmia	r6!, {r5}
   20b26:	cb80      	ldmia	r3!, {r7}
   20b28:	417d      	adcs	r5, r7
   20b2a:	c220      	stmia	r2!, {r5}
   20b2c:	ce20      	ldmia	r6!, {r5}
   20b2e:	cb80      	ldmia	r3!, {r7}
   20b30:	417d      	adcs	r5, r7
   20b32:	c220      	stmia	r2!, {r5}
   20b34:	ce20      	ldmia	r6!, {r5}
   20b36:	cb80      	ldmia	r3!, {r7}
   20b38:	417d      	adcs	r5, r7
   20b3a:	c220      	stmia	r2!, {r5}
   20b3c:	ce20      	ldmia	r6!, {r5}
   20b3e:	cb80      	ldmia	r3!, {r7}
   20b40:	417d      	adcs	r5, r7
   20b42:	c220      	stmia	r2!, {r5}
   20b44:	ce20      	ldmia	r6!, {r5}
   20b46:	cb80      	ldmia	r3!, {r7}
   20b48:	417d      	adcs	r5, r7
   20b4a:	c220      	stmia	r2!, {r5}
   20b4c:	ce20      	ldmia	r6!, {r5}
   20b4e:	cb80      	ldmia	r3!, {r7}
   20b50:	417d      	adcs	r5, r7
   20b52:	c220      	stmia	r2!, {r5}
   20b54:	4140      	adcs	r0, r0
   20b56:	b9d0      	cbnz	r0, 20b8e <x_side_default+0x19e>
   20b58:	9b01      	ldr	r3, [sp, #4]
   20b5a:	3b01      	subs	r3, #1
   20b5c:	b25b      	sxtb	r3, r3
   20b5e:	2b00      	cmp	r3, #0
   20b60:	db15      	blt.n	20b8e <x_side_default+0x19e>
   20b62:	b21a      	sxth	r2, r3
   20b64:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   20b68:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   20b6c:	4291      	cmp	r1, r2
   20b6e:	d80b      	bhi.n	20b88 <x_side_default+0x198>
   20b70:	d30d      	bcc.n	20b8e <x_side_default+0x19e>
   20b72:	3b01      	subs	r3, #1
   20b74:	b25b      	sxtb	r3, r3
   20b76:	1c59      	adds	r1, r3, #1
   20b78:	b21a      	sxth	r2, r3
   20b7a:	d008      	beq.n	20b8e <x_side_default+0x19e>
   20b7c:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   20b80:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   20b84:	4291      	cmp	r1, r2
   20b86:	d9f3      	bls.n	20b70 <x_side_default+0x180>
   20b88:	b01b      	add	sp, #108	; 0x6c
   20b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b8e:	9b01      	ldr	r3, [sp, #4]
   20b90:	4652      	mov	r2, sl
   20b92:	4621      	mov	r1, r4
   20b94:	4620      	mov	r0, r4
   20b96:	f7ff fcab 	bl	204f0 <uECC_vli_sub>
   20b9a:	b01b      	add	sp, #108	; 0x6c
   20b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020ba0 <vli_mmod_fast_secp256r1>:
   20ba0:	680b      	ldr	r3, [r1, #0]
   20ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ba6:	6003      	str	r3, [r0, #0]
   20ba8:	684b      	ldr	r3, [r1, #4]
   20baa:	6043      	str	r3, [r0, #4]
   20bac:	688b      	ldr	r3, [r1, #8]
   20bae:	6083      	str	r3, [r0, #8]
   20bb0:	68cb      	ldr	r3, [r1, #12]
   20bb2:	60c3      	str	r3, [r0, #12]
   20bb4:	690b      	ldr	r3, [r1, #16]
   20bb6:	6103      	str	r3, [r0, #16]
   20bb8:	694b      	ldr	r3, [r1, #20]
   20bba:	6143      	str	r3, [r0, #20]
   20bbc:	698b      	ldr	r3, [r1, #24]
   20bbe:	6183      	str	r3, [r0, #24]
   20bc0:	69cb      	ldr	r3, [r1, #28]
   20bc2:	61c3      	str	r3, [r0, #28]
   20bc4:	b08d      	sub	sp, #52	; 0x34
   20bc6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   20bc8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
   20bca:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   20bcc:	6b8d      	ldr	r5, [r1, #56]	; 0x38
   20bce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   20bd0:	940b      	str	r4, [sp, #44]	; 0x2c
   20bd2:	f04f 0a00 	mov.w	sl, #0
   20bd6:	ac04      	add	r4, sp, #16
   20bd8:	9708      	str	r7, [sp, #32]
   20bda:	9609      	str	r6, [sp, #36]	; 0x24
   20bdc:	950a      	str	r5, [sp, #40]	; 0x28
   20bde:	4681      	mov	r9, r0
   20be0:	9307      	str	r3, [sp, #28]
   20be2:	f8cd a018 	str.w	sl, [sp, #24]
   20be6:	f8cd a014 	str.w	sl, [sp, #20]
   20bea:	f8cd a010 	str.w	sl, [sp, #16]
   20bee:	2501      	movs	r5, #1
   20bf0:	4626      	mov	r6, r4
   20bf2:	4627      	mov	r7, r4
   20bf4:	2300      	movs	r3, #0
   20bf6:	a205      	add	r2, pc, #20	; (adr r2, 20c0c <vli_mmod_fast_secp256r1+0x6c>)
   20bf8:	f3af 8000 	nop.w
   20bfc:	f3af 8000 	nop.w
   20c00:	18ad      	adds	r5, r5, r2
   20c02:	ce04      	ldmia	r6!, {r2}
   20c04:	cf01      	ldmia	r7!, {r0}
   20c06:	1812      	adds	r2, r2, r0
   20c08:	c404      	stmia	r4!, {r2}
   20c0a:	4728      	bx	r5
   20c0c:	ce04      	ldmia	r6!, {r2}
   20c0e:	cf01      	ldmia	r7!, {r0}
   20c10:	4142      	adcs	r2, r0
   20c12:	c404      	stmia	r4!, {r2}
   20c14:	ce04      	ldmia	r6!, {r2}
   20c16:	cf01      	ldmia	r7!, {r0}
   20c18:	4142      	adcs	r2, r0
   20c1a:	c404      	stmia	r4!, {r2}
   20c1c:	ce04      	ldmia	r6!, {r2}
   20c1e:	cf01      	ldmia	r7!, {r0}
   20c20:	4142      	adcs	r2, r0
   20c22:	c404      	stmia	r4!, {r2}
   20c24:	ce04      	ldmia	r6!, {r2}
   20c26:	cf01      	ldmia	r7!, {r0}
   20c28:	4142      	adcs	r2, r0
   20c2a:	c404      	stmia	r4!, {r2}
   20c2c:	ce04      	ldmia	r6!, {r2}
   20c2e:	cf01      	ldmia	r7!, {r0}
   20c30:	4142      	adcs	r2, r0
   20c32:	c404      	stmia	r4!, {r2}
   20c34:	ce04      	ldmia	r6!, {r2}
   20c36:	cf01      	ldmia	r7!, {r0}
   20c38:	4142      	adcs	r2, r0
   20c3a:	c404      	stmia	r4!, {r2}
   20c3c:	ce04      	ldmia	r6!, {r2}
   20c3e:	cf01      	ldmia	r7!, {r0}
   20c40:	4142      	adcs	r2, r0
   20c42:	c404      	stmia	r4!, {r2}
   20c44:	415b      	adcs	r3, r3
   20c46:	2601      	movs	r6, #1
   20c48:	9300      	str	r3, [sp, #0]
   20c4a:	464c      	mov	r4, r9
   20c4c:	ad04      	add	r5, sp, #16
   20c4e:	464f      	mov	r7, r9
   20c50:	2300      	movs	r3, #0
   20c52:	a206      	add	r2, pc, #24	; (adr r2, 20c6c <vli_mmod_fast_secp256r1+0xcc>)
   20c54:	f3af 8000 	nop.w
   20c58:	f3af 8000 	nop.w
   20c5c:	f3af 8000 	nop.w
   20c60:	18b6      	adds	r6, r6, r2
   20c62:	cf04      	ldmia	r7!, {r2}
   20c64:	cd01      	ldmia	r5!, {r0}
   20c66:	1812      	adds	r2, r2, r0
   20c68:	c404      	stmia	r4!, {r2}
   20c6a:	4730      	bx	r6
   20c6c:	cf04      	ldmia	r7!, {r2}
   20c6e:	cd01      	ldmia	r5!, {r0}
   20c70:	4142      	adcs	r2, r0
   20c72:	c404      	stmia	r4!, {r2}
   20c74:	cf04      	ldmia	r7!, {r2}
   20c76:	cd01      	ldmia	r5!, {r0}
   20c78:	4142      	adcs	r2, r0
   20c7a:	c404      	stmia	r4!, {r2}
   20c7c:	cf04      	ldmia	r7!, {r2}
   20c7e:	cd01      	ldmia	r5!, {r0}
   20c80:	4142      	adcs	r2, r0
   20c82:	c404      	stmia	r4!, {r2}
   20c84:	cf04      	ldmia	r7!, {r2}
   20c86:	cd01      	ldmia	r5!, {r0}
   20c88:	4142      	adcs	r2, r0
   20c8a:	c404      	stmia	r4!, {r2}
   20c8c:	cf04      	ldmia	r7!, {r2}
   20c8e:	cd01      	ldmia	r5!, {r0}
   20c90:	4142      	adcs	r2, r0
   20c92:	c404      	stmia	r4!, {r2}
   20c94:	cf04      	ldmia	r7!, {r2}
   20c96:	cd01      	ldmia	r5!, {r0}
   20c98:	4142      	adcs	r2, r0
   20c9a:	c404      	stmia	r4!, {r2}
   20c9c:	cf04      	ldmia	r7!, {r2}
   20c9e:	cd01      	ldmia	r5!, {r0}
   20ca0:	4142      	adcs	r2, r0
   20ca2:	c404      	stmia	r4!, {r2}
   20ca4:	415b      	adcs	r3, r3
   20ca6:	f101 0434 	add.w	r4, r1, #52	; 0x34
   20caa:	ccd0      	ldmia	r4, {r4, r6, r7}
   20cac:	6b0d      	ldr	r5, [r1, #48]	; 0x30
   20cae:	9408      	str	r4, [sp, #32]
   20cb0:	ac04      	add	r4, sp, #16
   20cb2:	9507      	str	r5, [sp, #28]
   20cb4:	9609      	str	r6, [sp, #36]	; 0x24
   20cb6:	970a      	str	r7, [sp, #40]	; 0x28
   20cb8:	4698      	mov	r8, r3
   20cba:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   20cbe:	2501      	movs	r5, #1
   20cc0:	4626      	mov	r6, r4
   20cc2:	4627      	mov	r7, r4
   20cc4:	2300      	movs	r3, #0
   20cc6:	a205      	add	r2, pc, #20	; (adr r2, 20cdc <vli_mmod_fast_secp256r1+0x13c>)
   20cc8:	f3af 8000 	nop.w
   20ccc:	f3af 8000 	nop.w
   20cd0:	18ad      	adds	r5, r5, r2
   20cd2:	ce04      	ldmia	r6!, {r2}
   20cd4:	cf01      	ldmia	r7!, {r0}
   20cd6:	1812      	adds	r2, r2, r0
   20cd8:	c404      	stmia	r4!, {r2}
   20cda:	4728      	bx	r5
   20cdc:	ce04      	ldmia	r6!, {r2}
   20cde:	cf01      	ldmia	r7!, {r0}
   20ce0:	4142      	adcs	r2, r0
   20ce2:	c404      	stmia	r4!, {r2}
   20ce4:	ce04      	ldmia	r6!, {r2}
   20ce6:	cf01      	ldmia	r7!, {r0}
   20ce8:	4142      	adcs	r2, r0
   20cea:	c404      	stmia	r4!, {r2}
   20cec:	ce04      	ldmia	r6!, {r2}
   20cee:	cf01      	ldmia	r7!, {r0}
   20cf0:	4142      	adcs	r2, r0
   20cf2:	c404      	stmia	r4!, {r2}
   20cf4:	ce04      	ldmia	r6!, {r2}
   20cf6:	cf01      	ldmia	r7!, {r0}
   20cf8:	4142      	adcs	r2, r0
   20cfa:	c404      	stmia	r4!, {r2}
   20cfc:	ce04      	ldmia	r6!, {r2}
   20cfe:	cf01      	ldmia	r7!, {r0}
   20d00:	4142      	adcs	r2, r0
   20d02:	c404      	stmia	r4!, {r2}
   20d04:	ce04      	ldmia	r6!, {r2}
   20d06:	cf01      	ldmia	r7!, {r0}
   20d08:	4142      	adcs	r2, r0
   20d0a:	c404      	stmia	r4!, {r2}
   20d0c:	ce04      	ldmia	r6!, {r2}
   20d0e:	cf01      	ldmia	r7!, {r0}
   20d10:	4142      	adcs	r2, r0
   20d12:	c404      	stmia	r4!, {r2}
   20d14:	415b      	adcs	r3, r3
   20d16:	2601      	movs	r6, #1
   20d18:	9301      	str	r3, [sp, #4]
   20d1a:	464c      	mov	r4, r9
   20d1c:	ad04      	add	r5, sp, #16
   20d1e:	464f      	mov	r7, r9
   20d20:	2300      	movs	r3, #0
   20d22:	a206      	add	r2, pc, #24	; (adr r2, 20d3c <vli_mmod_fast_secp256r1+0x19c>)
   20d24:	f3af 8000 	nop.w
   20d28:	f3af 8000 	nop.w
   20d2c:	f3af 8000 	nop.w
   20d30:	18b6      	adds	r6, r6, r2
   20d32:	cf04      	ldmia	r7!, {r2}
   20d34:	cd01      	ldmia	r5!, {r0}
   20d36:	1812      	adds	r2, r2, r0
   20d38:	c404      	stmia	r4!, {r2}
   20d3a:	4730      	bx	r6
   20d3c:	cf04      	ldmia	r7!, {r2}
   20d3e:	cd01      	ldmia	r5!, {r0}
   20d40:	4142      	adcs	r2, r0
   20d42:	c404      	stmia	r4!, {r2}
   20d44:	cf04      	ldmia	r7!, {r2}
   20d46:	cd01      	ldmia	r5!, {r0}
   20d48:	4142      	adcs	r2, r0
   20d4a:	c404      	stmia	r4!, {r2}
   20d4c:	cf04      	ldmia	r7!, {r2}
   20d4e:	cd01      	ldmia	r5!, {r0}
   20d50:	4142      	adcs	r2, r0
   20d52:	c404      	stmia	r4!, {r2}
   20d54:	cf04      	ldmia	r7!, {r2}
   20d56:	cd01      	ldmia	r5!, {r0}
   20d58:	4142      	adcs	r2, r0
   20d5a:	c404      	stmia	r4!, {r2}
   20d5c:	cf04      	ldmia	r7!, {r2}
   20d5e:	cd01      	ldmia	r5!, {r0}
   20d60:	4142      	adcs	r2, r0
   20d62:	c404      	stmia	r4!, {r2}
   20d64:	cf04      	ldmia	r7!, {r2}
   20d66:	cd01      	ldmia	r5!, {r0}
   20d68:	4142      	adcs	r2, r0
   20d6a:	c404      	stmia	r4!, {r2}
   20d6c:	cf04      	ldmia	r7!, {r2}
   20d6e:	cd01      	ldmia	r5!, {r0}
   20d70:	4142      	adcs	r2, r0
   20d72:	c404      	stmia	r4!, {r2}
   20d74:	415b      	adcs	r3, r3
   20d76:	f101 0420 	add.w	r4, r1, #32
   20d7a:	cc70      	ldmia	r4, {r4, r5, r6}
   20d7c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   20d7e:	9404      	str	r4, [sp, #16]
   20d80:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   20d82:	9505      	str	r5, [sp, #20]
   20d84:	9606      	str	r6, [sp, #24]
   20d86:	970a      	str	r7, [sp, #40]	; 0x28
   20d88:	940b      	str	r4, [sp, #44]	; 0x2c
   20d8a:	9302      	str	r3, [sp, #8]
   20d8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20d90:	f8cd a020 	str.w	sl, [sp, #32]
   20d94:	f8cd a01c 	str.w	sl, [sp, #28]
   20d98:	464c      	mov	r4, r9
   20d9a:	ad04      	add	r5, sp, #16
   20d9c:	2601      	movs	r6, #1
   20d9e:	464f      	mov	r7, r9
   20da0:	2300      	movs	r3, #0
   20da2:	a206      	add	r2, pc, #24	; (adr r2, 20dbc <vli_mmod_fast_secp256r1+0x21c>)
   20da4:	f3af 8000 	nop.w
   20da8:	f3af 8000 	nop.w
   20dac:	f3af 8000 	nop.w
   20db0:	18b6      	adds	r6, r6, r2
   20db2:	cf04      	ldmia	r7!, {r2}
   20db4:	cd01      	ldmia	r5!, {r0}
   20db6:	1812      	adds	r2, r2, r0
   20db8:	c404      	stmia	r4!, {r2}
   20dba:	4730      	bx	r6
   20dbc:	cf04      	ldmia	r7!, {r2}
   20dbe:	cd01      	ldmia	r5!, {r0}
   20dc0:	4142      	adcs	r2, r0
   20dc2:	c404      	stmia	r4!, {r2}
   20dc4:	cf04      	ldmia	r7!, {r2}
   20dc6:	cd01      	ldmia	r5!, {r0}
   20dc8:	4142      	adcs	r2, r0
   20dca:	c404      	stmia	r4!, {r2}
   20dcc:	cf04      	ldmia	r7!, {r2}
   20dce:	cd01      	ldmia	r5!, {r0}
   20dd0:	4142      	adcs	r2, r0
   20dd2:	c404      	stmia	r4!, {r2}
   20dd4:	cf04      	ldmia	r7!, {r2}
   20dd6:	cd01      	ldmia	r5!, {r0}
   20dd8:	4142      	adcs	r2, r0
   20dda:	c404      	stmia	r4!, {r2}
   20ddc:	cf04      	ldmia	r7!, {r2}
   20dde:	cd01      	ldmia	r5!, {r0}
   20de0:	4142      	adcs	r2, r0
   20de2:	c404      	stmia	r4!, {r2}
   20de4:	cf04      	ldmia	r7!, {r2}
   20de6:	cd01      	ldmia	r5!, {r0}
   20de8:	4142      	adcs	r2, r0
   20dea:	c404      	stmia	r4!, {r2}
   20dec:	cf04      	ldmia	r7!, {r2}
   20dee:	cd01      	ldmia	r5!, {r0}
   20df0:	4142      	adcs	r2, r0
   20df2:	c404      	stmia	r4!, {r2}
   20df4:	415b      	adcs	r3, r3
   20df6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   20df8:	9505      	str	r5, [sp, #20]
   20dfa:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   20dfc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   20dfe:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   20e00:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   20e02:	9303      	str	r3, [sp, #12]
   20e04:	9509      	str	r5, [sp, #36]	; 0x24
   20e06:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   20e08:	6a0d      	ldr	r5, [r1, #32]
   20e0a:	9606      	str	r6, [sp, #24]
   20e0c:	9708      	str	r7, [sp, #32]
   20e0e:	950b      	str	r5, [sp, #44]	; 0x2c
   20e10:	9407      	str	r4, [sp, #28]
   20e12:	940a      	str	r4, [sp, #40]	; 0x28
   20e14:	9304      	str	r3, [sp, #16]
   20e16:	464c      	mov	r4, r9
   20e18:	ad04      	add	r5, sp, #16
   20e1a:	2601      	movs	r6, #1
   20e1c:	464f      	mov	r7, r9
   20e1e:	2300      	movs	r3, #0
   20e20:	a206      	add	r2, pc, #24	; (adr r2, 20e3c <vli_mmod_fast_secp256r1+0x29c>)
   20e22:	bf00      	nop
   20e24:	f3af 8000 	nop.w
   20e28:	f3af 8000 	nop.w
   20e2c:	f3af 8000 	nop.w
   20e30:	18b6      	adds	r6, r6, r2
   20e32:	cf04      	ldmia	r7!, {r2}
   20e34:	cd01      	ldmia	r5!, {r0}
   20e36:	1812      	adds	r2, r2, r0
   20e38:	c404      	stmia	r4!, {r2}
   20e3a:	4730      	bx	r6
   20e3c:	cf04      	ldmia	r7!, {r2}
   20e3e:	cd01      	ldmia	r5!, {r0}
   20e40:	4142      	adcs	r2, r0
   20e42:	c404      	stmia	r4!, {r2}
   20e44:	cf04      	ldmia	r7!, {r2}
   20e46:	cd01      	ldmia	r5!, {r0}
   20e48:	4142      	adcs	r2, r0
   20e4a:	c404      	stmia	r4!, {r2}
   20e4c:	cf04      	ldmia	r7!, {r2}
   20e4e:	cd01      	ldmia	r5!, {r0}
   20e50:	4142      	adcs	r2, r0
   20e52:	c404      	stmia	r4!, {r2}
   20e54:	cf04      	ldmia	r7!, {r2}
   20e56:	cd01      	ldmia	r5!, {r0}
   20e58:	4142      	adcs	r2, r0
   20e5a:	c404      	stmia	r4!, {r2}
   20e5c:	cf04      	ldmia	r7!, {r2}
   20e5e:	cd01      	ldmia	r5!, {r0}
   20e60:	4142      	adcs	r2, r0
   20e62:	c404      	stmia	r4!, {r2}
   20e64:	cf04      	ldmia	r7!, {r2}
   20e66:	cd01      	ldmia	r5!, {r0}
   20e68:	4142      	adcs	r2, r0
   20e6a:	c404      	stmia	r4!, {r2}
   20e6c:	cf04      	ldmia	r7!, {r2}
   20e6e:	cd01      	ldmia	r5!, {r0}
   20e70:	4142      	adcs	r2, r0
   20e72:	c404      	stmia	r4!, {r2}
   20e74:	415b      	adcs	r3, r3
   20e76:	f101 042c 	add.w	r4, r1, #44	; 0x2c
   20e7a:	cc70      	ldmia	r4, {r4, r5, r6}
   20e7c:	6a0f      	ldr	r7, [r1, #32]
   20e7e:	9404      	str	r4, [sp, #16]
   20e80:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   20e82:	9505      	str	r5, [sp, #20]
   20e84:	9606      	str	r6, [sp, #24]
   20e86:	970a      	str	r7, [sp, #40]	; 0x28
   20e88:	940b      	str	r4, [sp, #44]	; 0x2c
   20e8a:	469b      	mov	fp, r3
   20e8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20e90:	f8cd a020 	str.w	sl, [sp, #32]
   20e94:	f8cd a01c 	str.w	sl, [sp, #28]
   20e98:	464c      	mov	r4, r9
   20e9a:	ad04      	add	r5, sp, #16
   20e9c:	2601      	movs	r6, #1
   20e9e:	464f      	mov	r7, r9
   20ea0:	2300      	movs	r3, #0
   20ea2:	a206      	add	r2, pc, #24	; (adr r2, 20ebc <vli_mmod_fast_secp256r1+0x31c>)
   20ea4:	f3af 8000 	nop.w
   20ea8:	f3af 8000 	nop.w
   20eac:	f3af 8000 	nop.w
   20eb0:	18b6      	adds	r6, r6, r2
   20eb2:	cf04      	ldmia	r7!, {r2}
   20eb4:	cd01      	ldmia	r5!, {r0}
   20eb6:	1a12      	subs	r2, r2, r0
   20eb8:	c404      	stmia	r4!, {r2}
   20eba:	4730      	bx	r6
   20ebc:	cf04      	ldmia	r7!, {r2}
   20ebe:	cd01      	ldmia	r5!, {r0}
   20ec0:	4182      	sbcs	r2, r0
   20ec2:	c404      	stmia	r4!, {r2}
   20ec4:	cf04      	ldmia	r7!, {r2}
   20ec6:	cd01      	ldmia	r5!, {r0}
   20ec8:	4182      	sbcs	r2, r0
   20eca:	c404      	stmia	r4!, {r2}
   20ecc:	cf04      	ldmia	r7!, {r2}
   20ece:	cd01      	ldmia	r5!, {r0}
   20ed0:	4182      	sbcs	r2, r0
   20ed2:	c404      	stmia	r4!, {r2}
   20ed4:	cf04      	ldmia	r7!, {r2}
   20ed6:	cd01      	ldmia	r5!, {r0}
   20ed8:	4182      	sbcs	r2, r0
   20eda:	c404      	stmia	r4!, {r2}
   20edc:	cf04      	ldmia	r7!, {r2}
   20ede:	cd01      	ldmia	r5!, {r0}
   20ee0:	4182      	sbcs	r2, r0
   20ee2:	c404      	stmia	r4!, {r2}
   20ee4:	cf04      	ldmia	r7!, {r2}
   20ee6:	cd01      	ldmia	r5!, {r0}
   20ee8:	4182      	sbcs	r2, r0
   20eea:	c404      	stmia	r4!, {r2}
   20eec:	cf04      	ldmia	r7!, {r2}
   20eee:	cd01      	ldmia	r5!, {r0}
   20ef0:	4182      	sbcs	r2, r0
   20ef2:	c404      	stmia	r4!, {r2}
   20ef4:	415b      	adcs	r3, r3
   20ef6:	f101 0430 	add.w	r4, r1, #48	; 0x30
   20efa:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
   20efc:	9404      	str	r4, [sp, #16]
   20efe:	9505      	str	r5, [sp, #20]
   20f00:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   20f02:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   20f04:	9606      	str	r6, [sp, #24]
   20f06:	9707      	str	r7, [sp, #28]
   20f08:	950a      	str	r5, [sp, #40]	; 0x28
   20f0a:	940b      	str	r4, [sp, #44]	; 0x2c
   20f0c:	469c      	mov	ip, r3
   20f0e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20f12:	f8cd a020 	str.w	sl, [sp, #32]
   20f16:	464c      	mov	r4, r9
   20f18:	ad04      	add	r5, sp, #16
   20f1a:	2601      	movs	r6, #1
   20f1c:	464f      	mov	r7, r9
   20f1e:	2300      	movs	r3, #0
   20f20:	a206      	add	r2, pc, #24	; (adr r2, 20f3c <vli_mmod_fast_secp256r1+0x39c>)
   20f22:	bf00      	nop
   20f24:	f3af 8000 	nop.w
   20f28:	f3af 8000 	nop.w
   20f2c:	f3af 8000 	nop.w
   20f30:	18b6      	adds	r6, r6, r2
   20f32:	cf04      	ldmia	r7!, {r2}
   20f34:	cd01      	ldmia	r5!, {r0}
   20f36:	1a12      	subs	r2, r2, r0
   20f38:	c404      	stmia	r4!, {r2}
   20f3a:	4730      	bx	r6
   20f3c:	cf04      	ldmia	r7!, {r2}
   20f3e:	cd01      	ldmia	r5!, {r0}
   20f40:	4182      	sbcs	r2, r0
   20f42:	c404      	stmia	r4!, {r2}
   20f44:	cf04      	ldmia	r7!, {r2}
   20f46:	cd01      	ldmia	r5!, {r0}
   20f48:	4182      	sbcs	r2, r0
   20f4a:	c404      	stmia	r4!, {r2}
   20f4c:	cf04      	ldmia	r7!, {r2}
   20f4e:	cd01      	ldmia	r5!, {r0}
   20f50:	4182      	sbcs	r2, r0
   20f52:	c404      	stmia	r4!, {r2}
   20f54:	cf04      	ldmia	r7!, {r2}
   20f56:	cd01      	ldmia	r5!, {r0}
   20f58:	4182      	sbcs	r2, r0
   20f5a:	c404      	stmia	r4!, {r2}
   20f5c:	cf04      	ldmia	r7!, {r2}
   20f5e:	cd01      	ldmia	r5!, {r0}
   20f60:	4182      	sbcs	r2, r0
   20f62:	c404      	stmia	r4!, {r2}
   20f64:	cf04      	ldmia	r7!, {r2}
   20f66:	cd01      	ldmia	r5!, {r0}
   20f68:	4182      	sbcs	r2, r0
   20f6a:	c404      	stmia	r4!, {r2}
   20f6c:	cf04      	ldmia	r7!, {r2}
   20f6e:	cd01      	ldmia	r5!, {r0}
   20f70:	4182      	sbcs	r2, r0
   20f72:	c404      	stmia	r4!, {r2}
   20f74:	415b      	adcs	r3, r3
   20f76:	f101 0434 	add.w	r4, r1, #52	; 0x34
   20f7a:	cc70      	ldmia	r4, {r4, r5, r6}
   20f7c:	6a0f      	ldr	r7, [r1, #32]
   20f7e:	9404      	str	r4, [sp, #16]
   20f80:	9505      	str	r5, [sp, #20]
   20f82:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   20f84:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   20f86:	9606      	str	r6, [sp, #24]
   20f88:	6b0e      	ldr	r6, [r1, #48]	; 0x30
   20f8a:	9408      	str	r4, [sp, #32]
   20f8c:	469e      	mov	lr, r3
   20f8e:	9509      	str	r5, [sp, #36]	; 0x24
   20f90:	960b      	str	r6, [sp, #44]	; 0x2c
   20f92:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   20f96:	9707      	str	r7, [sp, #28]
   20f98:	464c      	mov	r4, r9
   20f9a:	ad04      	add	r5, sp, #16
   20f9c:	2601      	movs	r6, #1
   20f9e:	464b      	mov	r3, r9
   20fa0:	2700      	movs	r7, #0
   20fa2:	a206      	add	r2, pc, #24	; (adr r2, 20fbc <vli_mmod_fast_secp256r1+0x41c>)
   20fa4:	f3af 8000 	nop.w
   20fa8:	f3af 8000 	nop.w
   20fac:	f3af 8000 	nop.w
   20fb0:	18b6      	adds	r6, r6, r2
   20fb2:	cb04      	ldmia	r3!, {r2}
   20fb4:	cd01      	ldmia	r5!, {r0}
   20fb6:	1a12      	subs	r2, r2, r0
   20fb8:	c404      	stmia	r4!, {r2}
   20fba:	4730      	bx	r6
   20fbc:	cb04      	ldmia	r3!, {r2}
   20fbe:	cd01      	ldmia	r5!, {r0}
   20fc0:	4182      	sbcs	r2, r0
   20fc2:	c404      	stmia	r4!, {r2}
   20fc4:	cb04      	ldmia	r3!, {r2}
   20fc6:	cd01      	ldmia	r5!, {r0}
   20fc8:	4182      	sbcs	r2, r0
   20fca:	c404      	stmia	r4!, {r2}
   20fcc:	cb04      	ldmia	r3!, {r2}
   20fce:	cd01      	ldmia	r5!, {r0}
   20fd0:	4182      	sbcs	r2, r0
   20fd2:	c404      	stmia	r4!, {r2}
   20fd4:	cb04      	ldmia	r3!, {r2}
   20fd6:	cd01      	ldmia	r5!, {r0}
   20fd8:	4182      	sbcs	r2, r0
   20fda:	c404      	stmia	r4!, {r2}
   20fdc:	cb04      	ldmia	r3!, {r2}
   20fde:	cd01      	ldmia	r5!, {r0}
   20fe0:	4182      	sbcs	r2, r0
   20fe2:	c404      	stmia	r4!, {r2}
   20fe4:	cb04      	ldmia	r3!, {r2}
   20fe6:	cd01      	ldmia	r5!, {r0}
   20fe8:	4182      	sbcs	r2, r0
   20fea:	c404      	stmia	r4!, {r2}
   20fec:	cb04      	ldmia	r3!, {r2}
   20fee:	cd01      	ldmia	r5!, {r0}
   20ff0:	4182      	sbcs	r2, r0
   20ff2:	c404      	stmia	r4!, {r2}
   20ff4:	417f      	adcs	r7, r7
   20ff6:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   20ff8:	6a4e      	ldr	r6, [r1, #36]	; 0x24
   20ffa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   20ffc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   20ffe:	9404      	str	r4, [sp, #16]
   21000:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   21002:	6b49      	ldr	r1, [r1, #52]	; 0x34
   21004:	9208      	str	r2, [sp, #32]
   21006:	9607      	str	r6, [sp, #28]
   21008:	9409      	str	r4, [sp, #36]	; 0x24
   2100a:	910b      	str	r1, [sp, #44]	; 0x2c
   2100c:	f8cd a018 	str.w	sl, [sp, #24]
   21010:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   21014:	9505      	str	r5, [sp, #20]
   21016:	aa04      	add	r2, sp, #16
   21018:	4649      	mov	r1, r9
   2101a:	2401      	movs	r4, #1
   2101c:	464e      	mov	r6, r9
   2101e:	2500      	movs	r5, #0
   21020:	a006      	add	r0, pc, #24	; (adr r0, 2103c <vli_mmod_fast_secp256r1+0x49c>)
   21022:	bf00      	nop
   21024:	f3af 8000 	nop.w
   21028:	f3af 8000 	nop.w
   2102c:	f3af 8000 	nop.w
   21030:	1824      	adds	r4, r4, r0
   21032:	ce01      	ldmia	r6!, {r0}
   21034:	ca08      	ldmia	r2!, {r3}
   21036:	1ac0      	subs	r0, r0, r3
   21038:	c101      	stmia	r1!, {r0}
   2103a:	4720      	bx	r4
   2103c:	ce01      	ldmia	r6!, {r0}
   2103e:	ca08      	ldmia	r2!, {r3}
   21040:	4198      	sbcs	r0, r3
   21042:	c101      	stmia	r1!, {r0}
   21044:	ce01      	ldmia	r6!, {r0}
   21046:	ca08      	ldmia	r2!, {r3}
   21048:	4198      	sbcs	r0, r3
   2104a:	c101      	stmia	r1!, {r0}
   2104c:	ce01      	ldmia	r6!, {r0}
   2104e:	ca08      	ldmia	r2!, {r3}
   21050:	4198      	sbcs	r0, r3
   21052:	c101      	stmia	r1!, {r0}
   21054:	ce01      	ldmia	r6!, {r0}
   21056:	ca08      	ldmia	r2!, {r3}
   21058:	4198      	sbcs	r0, r3
   2105a:	c101      	stmia	r1!, {r0}
   2105c:	ce01      	ldmia	r6!, {r0}
   2105e:	ca08      	ldmia	r2!, {r3}
   21060:	4198      	sbcs	r0, r3
   21062:	c101      	stmia	r1!, {r0}
   21064:	ce01      	ldmia	r6!, {r0}
   21066:	ca08      	ldmia	r2!, {r3}
   21068:	4198      	sbcs	r0, r3
   2106a:	c101      	stmia	r1!, {r0}
   2106c:	ce01      	ldmia	r6!, {r0}
   2106e:	ca08      	ldmia	r2!, {r3}
   21070:	4198      	sbcs	r0, r3
   21072:	c101      	stmia	r1!, {r0}
   21074:	416d      	adcs	r5, r5
   21076:	9b00      	ldr	r3, [sp, #0]
   21078:	eb08 0203 	add.w	r2, r8, r3
   2107c:	9b01      	ldr	r3, [sp, #4]
   2107e:	441a      	add	r2, r3
   21080:	9b02      	ldr	r3, [sp, #8]
   21082:	441a      	add	r2, r3
   21084:	9b03      	ldr	r3, [sp, #12]
   21086:	441a      	add	r2, r3
   21088:	445a      	add	r2, fp
   2108a:	45d4      	cmp	ip, sl
   2108c:	bf14      	ite	ne
   2108e:	4694      	movne	ip, r2
   21090:	f1a2 0c01 	subeq.w	ip, r2, #1
   21094:	45d6      	cmp	lr, sl
   21096:	bf14      	ite	ne
   21098:	46e6      	movne	lr, ip
   2109a:	f1ac 0e01 	subeq.w	lr, ip, #1
   2109e:	4557      	cmp	r7, sl
   210a0:	bf14      	ite	ne
   210a2:	4677      	movne	r7, lr
   210a4:	f1ae 0701 	subeq.w	r7, lr, #1
   210a8:	4555      	cmp	r5, sl
   210aa:	bf14      	ite	ne
   210ac:	463d      	movne	r5, r7
   210ae:	1e7d      	subeq	r5, r7, #1
   210b0:	4555      	cmp	r5, sl
   210b2:	db4d      	blt.n	21150 <vli_mmod_fast_secp256r1+0x5b0>
   210b4:	f8df c108 	ldr.w	ip, [pc, #264]	; 211c0 <vli_mmod_fast_secp256r1+0x620>
   210b8:	f04f 0801 	mov.w	r8, #1
   210bc:	46ae      	mov	lr, r5
   210be:	4648      	mov	r0, r9
   210c0:	f1be 0f00 	cmp.w	lr, #0
   210c4:	d116      	bne.n	210f4 <vli_mmod_fast_secp256r1+0x554>
   210c6:	69c2      	ldr	r2, [r0, #28]
   210c8:	3201      	adds	r2, #1
   210ca:	d176      	bne.n	211ba <vli_mmod_fast_secp256r1+0x61a>
   210cc:	6982      	ldr	r2, [r0, #24]
   210ce:	2a00      	cmp	r2, #0
   210d0:	d073      	beq.n	211ba <vli_mmod_fast_secp256r1+0x61a>
   210d2:	2a01      	cmp	r2, #1
   210d4:	d80e      	bhi.n	210f4 <vli_mmod_fast_secp256r1+0x554>
   210d6:	6942      	ldr	r2, [r0, #20]
   210d8:	b962      	cbnz	r2, 210f4 <vli_mmod_fast_secp256r1+0x554>
   210da:	6902      	ldr	r2, [r0, #16]
   210dc:	b952      	cbnz	r2, 210f4 <vli_mmod_fast_secp256r1+0x554>
   210de:	68c2      	ldr	r2, [r0, #12]
   210e0:	b942      	cbnz	r2, 210f4 <vli_mmod_fast_secp256r1+0x554>
   210e2:	6882      	ldr	r2, [r0, #8]
   210e4:	3201      	adds	r2, #1
   210e6:	d168      	bne.n	211ba <vli_mmod_fast_secp256r1+0x61a>
   210e8:	6842      	ldr	r2, [r0, #4]
   210ea:	3201      	adds	r2, #1
   210ec:	d165      	bne.n	211ba <vli_mmod_fast_secp256r1+0x61a>
   210ee:	6802      	ldr	r2, [r0, #0]
   210f0:	3201      	adds	r2, #1
   210f2:	d162      	bne.n	211ba <vli_mmod_fast_secp256r1+0x61a>
   210f4:	4602      	mov	r2, r0
   210f6:	4661      	mov	r1, ip
   210f8:	4644      	mov	r4, r8
   210fa:	4603      	mov	r3, r0
   210fc:	2600      	movs	r6, #0
   210fe:	a703      	add	r7, pc, #12	; (adr r7, 2110c <vli_mmod_fast_secp256r1+0x56c>)
   21100:	19e4      	adds	r4, r4, r7
   21102:	cb80      	ldmia	r3!, {r7}
   21104:	c920      	ldmia	r1!, {r5}
   21106:	1b7f      	subs	r7, r7, r5
   21108:	c280      	stmia	r2!, {r7}
   2110a:	4720      	bx	r4
   2110c:	cb80      	ldmia	r3!, {r7}
   2110e:	c920      	ldmia	r1!, {r5}
   21110:	41af      	sbcs	r7, r5
   21112:	c280      	stmia	r2!, {r7}
   21114:	cb80      	ldmia	r3!, {r7}
   21116:	c920      	ldmia	r1!, {r5}
   21118:	41af      	sbcs	r7, r5
   2111a:	c280      	stmia	r2!, {r7}
   2111c:	cb80      	ldmia	r3!, {r7}
   2111e:	c920      	ldmia	r1!, {r5}
   21120:	41af      	sbcs	r7, r5
   21122:	c280      	stmia	r2!, {r7}
   21124:	cb80      	ldmia	r3!, {r7}
   21126:	c920      	ldmia	r1!, {r5}
   21128:	41af      	sbcs	r7, r5
   2112a:	c280      	stmia	r2!, {r7}
   2112c:	cb80      	ldmia	r3!, {r7}
   2112e:	c920      	ldmia	r1!, {r5}
   21130:	41af      	sbcs	r7, r5
   21132:	c280      	stmia	r2!, {r7}
   21134:	cb80      	ldmia	r3!, {r7}
   21136:	c920      	ldmia	r1!, {r5}
   21138:	41af      	sbcs	r7, r5
   2113a:	c280      	stmia	r2!, {r7}
   2113c:	cb80      	ldmia	r3!, {r7}
   2113e:	c920      	ldmia	r1!, {r5}
   21140:	41af      	sbcs	r7, r5
   21142:	c280      	stmia	r2!, {r7}
   21144:	4176      	adcs	r6, r6
   21146:	2e00      	cmp	r6, #0
   21148:	bf08      	it	eq
   2114a:	f1ae 0e01 	subeq.w	lr, lr, #1
   2114e:	e7b7      	b.n	210c0 <vli_mmod_fast_secp256r1+0x520>
   21150:	f8df e06c 	ldr.w	lr, [pc, #108]	; 211c0 <vli_mmod_fast_secp256r1+0x620>
   21154:	f04f 0c01 	mov.w	ip, #1
   21158:	46c8      	mov	r8, r9
   2115a:	4642      	mov	r2, r8
   2115c:	4671      	mov	r1, lr
   2115e:	4664      	mov	r4, ip
   21160:	4643      	mov	r3, r8
   21162:	2600      	movs	r6, #0
   21164:	a705      	add	r7, pc, #20	; (adr r7, 2117c <vli_mmod_fast_secp256r1+0x5dc>)
   21166:	bf00      	nop
   21168:	f3af 8000 	nop.w
   2116c:	f3af 8000 	nop.w
   21170:	19e4      	adds	r4, r4, r7
   21172:	cb80      	ldmia	r3!, {r7}
   21174:	c901      	ldmia	r1!, {r0}
   21176:	183f      	adds	r7, r7, r0
   21178:	c280      	stmia	r2!, {r7}
   2117a:	4720      	bx	r4
   2117c:	cb80      	ldmia	r3!, {r7}
   2117e:	c901      	ldmia	r1!, {r0}
   21180:	4147      	adcs	r7, r0
   21182:	c280      	stmia	r2!, {r7}
   21184:	cb80      	ldmia	r3!, {r7}
   21186:	c901      	ldmia	r1!, {r0}
   21188:	4147      	adcs	r7, r0
   2118a:	c280      	stmia	r2!, {r7}
   2118c:	cb80      	ldmia	r3!, {r7}
   2118e:	c901      	ldmia	r1!, {r0}
   21190:	4147      	adcs	r7, r0
   21192:	c280      	stmia	r2!, {r7}
   21194:	cb80      	ldmia	r3!, {r7}
   21196:	c901      	ldmia	r1!, {r0}
   21198:	4147      	adcs	r7, r0
   2119a:	c280      	stmia	r2!, {r7}
   2119c:	cb80      	ldmia	r3!, {r7}
   2119e:	c901      	ldmia	r1!, {r0}
   211a0:	4147      	adcs	r7, r0
   211a2:	c280      	stmia	r2!, {r7}
   211a4:	cb80      	ldmia	r3!, {r7}
   211a6:	c901      	ldmia	r1!, {r0}
   211a8:	4147      	adcs	r7, r0
   211aa:	c280      	stmia	r2!, {r7}
   211ac:	cb80      	ldmia	r3!, {r7}
   211ae:	c901      	ldmia	r1!, {r0}
   211b0:	4147      	adcs	r7, r0
   211b2:	c280      	stmia	r2!, {r7}
   211b4:	4176      	adcs	r6, r6
   211b6:	19ad      	adds	r5, r5, r6
   211b8:	d4cf      	bmi.n	2115a <vli_mmod_fast_secp256r1+0x5ba>
   211ba:	b00d      	add	sp, #52	; 0x34
   211bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211c0:	00024a88 	.word	0x00024a88
	...

000211d0 <double_jacobian_default>:
   211d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211d4:	f993 9000 	ldrsb.w	r9, [r3]
   211d8:	f1b9 0f00 	cmp.w	r9, #0
   211dc:	b0a9      	sub	sp, #164	; 0xa4
   211de:	dd15      	ble.n	2120c <double_jacobian_default+0x3c>
   211e0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   211e4:	b2e4      	uxtb	r4, r4
   211e6:	1f15      	subs	r5, r2, #4
   211e8:	9405      	str	r4, [sp, #20]
   211ea:	00a4      	lsls	r4, r4, #2
   211ec:	462e      	mov	r6, r5
   211ee:	9406      	str	r4, [sp, #24]
   211f0:	1914      	adds	r4, r2, r4
   211f2:	4625      	mov	r5, r4
   211f4:	46b6      	mov	lr, r6
   211f6:	2400      	movs	r4, #0
   211f8:	4637      	mov	r7, r6
   211fa:	f85e 6f04 	ldr.w	r6, [lr, #4]!
   211fe:	4575      	cmp	r5, lr
   21200:	ea44 0406 	orr.w	r4, r4, r6
   21204:	d1f9      	bne.n	211fa <double_jacobian_default+0x2a>
   21206:	9703      	str	r7, [sp, #12]
   21208:	9504      	str	r5, [sp, #16]
   2120a:	b914      	cbnz	r4, 21212 <double_jacobian_default+0x42>
   2120c:	b029      	add	sp, #164	; 0xa4
   2120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21212:	4698      	mov	r8, r3
   21214:	4615      	mov	r5, r2
   21216:	4604      	mov	r4, r0
   21218:	9207      	str	r2, [sp, #28]
   2121a:	a818      	add	r0, sp, #96	; 0x60
   2121c:	460a      	mov	r2, r1
   2121e:	464b      	mov	r3, r9
   21220:	468a      	mov	sl, r1
   21222:	f7ff f995 	bl	20550 <uECC_vli_mult>
   21226:	a918      	add	r1, sp, #96	; 0x60
   21228:	a808      	add	r0, sp, #32
   2122a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2122e:	4798      	blx	r3
   21230:	aa08      	add	r2, sp, #32
   21232:	a818      	add	r0, sp, #96	; 0x60
   21234:	f998 3000 	ldrsb.w	r3, [r8]
   21238:	4621      	mov	r1, r4
   2123a:	f7ff f989 	bl	20550 <uECC_vli_mult>
   2123e:	a918      	add	r1, sp, #96	; 0x60
   21240:	a810      	add	r0, sp, #64	; 0x40
   21242:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21246:	4798      	blx	r3
   21248:	aa08      	add	r2, sp, #32
   2124a:	4611      	mov	r1, r2
   2124c:	a818      	add	r0, sp, #96	; 0x60
   2124e:	f998 3000 	ldrsb.w	r3, [r8]
   21252:	f7ff f97d 	bl	20550 <uECC_vli_mult>
   21256:	a918      	add	r1, sp, #96	; 0x60
   21258:	a808      	add	r0, sp, #32
   2125a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2125e:	4798      	blx	r3
   21260:	462a      	mov	r2, r5
   21262:	a818      	add	r0, sp, #96	; 0x60
   21264:	f998 3000 	ldrsb.w	r3, [r8]
   21268:	4651      	mov	r1, sl
   2126a:	f7ff f971 	bl	20550 <uECC_vli_mult>
   2126e:	a918      	add	r1, sp, #96	; 0x60
   21270:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21274:	4650      	mov	r0, sl
   21276:	4798      	blx	r3
   21278:	462a      	mov	r2, r5
   2127a:	a818      	add	r0, sp, #96	; 0x60
   2127c:	f998 3000 	ldrsb.w	r3, [r8]
   21280:	4629      	mov	r1, r5
   21282:	f7ff f965 	bl	20550 <uECC_vli_mult>
   21286:	f108 0b04 	add.w	fp, r8, #4
   2128a:	a918      	add	r1, sp, #96	; 0x60
   2128c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21290:	4628      	mov	r0, r5
   21292:	4798      	blx	r3
   21294:	465b      	mov	r3, fp
   21296:	462a      	mov	r2, r5
   21298:	4621      	mov	r1, r4
   2129a:	4620      	mov	r0, r4
   2129c:	f8cd 9000 	str.w	r9, [sp]
   212a0:	f7ff fae6 	bl	20870 <uECC_vli_modAdd>
   212a4:	465b      	mov	r3, fp
   212a6:	462a      	mov	r2, r5
   212a8:	4629      	mov	r1, r5
   212aa:	4628      	mov	r0, r5
   212ac:	f8cd 9000 	str.w	r9, [sp]
   212b0:	f7ff fade 	bl	20870 <uECC_vli_modAdd>
   212b4:	465b      	mov	r3, fp
   212b6:	462a      	mov	r2, r5
   212b8:	4621      	mov	r1, r4
   212ba:	4628      	mov	r0, r5
   212bc:	f8cd 9000 	str.w	r9, [sp]
   212c0:	f7ff fb2e 	bl	20920 <uECC_vli_modSub>
   212c4:	462a      	mov	r2, r5
   212c6:	a818      	add	r0, sp, #96	; 0x60
   212c8:	f998 3000 	ldrsb.w	r3, [r8]
   212cc:	4621      	mov	r1, r4
   212ce:	f7ff f93f 	bl	20550 <uECC_vli_mult>
   212d2:	a918      	add	r1, sp, #96	; 0x60
   212d4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   212d8:	4620      	mov	r0, r4
   212da:	4798      	blx	r3
   212dc:	465b      	mov	r3, fp
   212de:	4622      	mov	r2, r4
   212e0:	4621      	mov	r1, r4
   212e2:	4628      	mov	r0, r5
   212e4:	f8cd 9000 	str.w	r9, [sp]
   212e8:	f7ff fac2 	bl	20870 <uECC_vli_modAdd>
   212ec:	465b      	mov	r3, fp
   212ee:	f8cd 9000 	str.w	r9, [sp]
   212f2:	462a      	mov	r2, r5
   212f4:	4621      	mov	r1, r4
   212f6:	4620      	mov	r0, r4
   212f8:	f7ff faba 	bl	20870 <uECC_vli_modAdd>
   212fc:	6823      	ldr	r3, [r4, #0]
   212fe:	f013 0301 	ands.w	r3, r3, #1
   21302:	d16a      	bne.n	213da <double_jacobian_default+0x20a>
   21304:	eb04 0289 	add.w	r2, r4, r9, lsl #2
   21308:	4294      	cmp	r4, r2
   2130a:	d20e      	bcs.n	2132a <double_jacobian_default+0x15a>
   2130c:	9f03      	ldr	r7, [sp, #12]
   2130e:	9d04      	ldr	r5, [sp, #16]
   21310:	9e07      	ldr	r6, [sp, #28]
   21312:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   21316:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   2131a:	4294      	cmp	r4, r2
   2131c:	6013      	str	r3, [r2, #0]
   2131e:	ea4f 73c1 	mov.w	r3, r1, lsl #31
   21322:	d3f6      	bcc.n	21312 <double_jacobian_default+0x142>
   21324:	9703      	str	r7, [sp, #12]
   21326:	9504      	str	r5, [sp, #16]
   21328:	9607      	str	r6, [sp, #28]
   2132a:	4622      	mov	r2, r4
   2132c:	4621      	mov	r1, r4
   2132e:	f998 3000 	ldrsb.w	r3, [r8]
   21332:	a818      	add	r0, sp, #96	; 0x60
   21334:	f7ff f90c 	bl	20550 <uECC_vli_mult>
   21338:	9d07      	ldr	r5, [sp, #28]
   2133a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2133e:	4628      	mov	r0, r5
   21340:	a918      	add	r1, sp, #96	; 0x60
   21342:	4798      	blx	r3
   21344:	4629      	mov	r1, r5
   21346:	4628      	mov	r0, r5
   21348:	465b      	mov	r3, fp
   2134a:	aa10      	add	r2, sp, #64	; 0x40
   2134c:	f8cd 9000 	str.w	r9, [sp]
   21350:	f7ff fae6 	bl	20920 <uECC_vli_modSub>
   21354:	4629      	mov	r1, r5
   21356:	4628      	mov	r0, r5
   21358:	465b      	mov	r3, fp
   2135a:	aa10      	add	r2, sp, #64	; 0x40
   2135c:	f8cd 9000 	str.w	r9, [sp]
   21360:	f7ff fade 	bl	20920 <uECC_vli_modSub>
   21364:	a910      	add	r1, sp, #64	; 0x40
   21366:	462a      	mov	r2, r5
   21368:	4608      	mov	r0, r1
   2136a:	465b      	mov	r3, fp
   2136c:	f8cd 9000 	str.w	r9, [sp]
   21370:	f7ff fad6 	bl	20920 <uECC_vli_modSub>
   21374:	aa10      	add	r2, sp, #64	; 0x40
   21376:	4621      	mov	r1, r4
   21378:	f998 3000 	ldrsb.w	r3, [r8]
   2137c:	a818      	add	r0, sp, #96	; 0x60
   2137e:	f7ff f8e7 	bl	20550 <uECC_vli_mult>
   21382:	4620      	mov	r0, r4
   21384:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21388:	a918      	add	r1, sp, #96	; 0x60
   2138a:	4798      	blx	r3
   2138c:	aa08      	add	r2, sp, #32
   2138e:	465b      	mov	r3, fp
   21390:	4621      	mov	r1, r4
   21392:	f8cd 9000 	str.w	r9, [sp]
   21396:	4610      	mov	r0, r2
   21398:	f7ff fac2 	bl	20920 <uECC_vli_modSub>
   2139c:	9f03      	ldr	r7, [sp, #12]
   2139e:	9d04      	ldr	r5, [sp, #16]
   213a0:	3c04      	subs	r4, #4
   213a2:	463b      	mov	r3, r7
   213a4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   213a8:	f844 2f04 	str.w	r2, [r4, #4]!
   213ac:	42ab      	cmp	r3, r5
   213ae:	d1f9      	bne.n	213a4 <double_jacobian_default+0x1d4>
   213b0:	9b06      	ldr	r3, [sp, #24]
   213b2:	4453      	add	r3, sl
   213b4:	4619      	mov	r1, r3
   213b6:	f1aa 0304 	sub.w	r3, sl, #4
   213ba:	f853 2f04 	ldr.w	r2, [r3, #4]!
   213be:	f847 2f04 	str.w	r2, [r7, #4]!
   213c2:	428b      	cmp	r3, r1
   213c4:	d1f9      	bne.n	213ba <double_jacobian_default+0x1ea>
   213c6:	9a05      	ldr	r2, [sp, #20]
   213c8:	3201      	adds	r2, #1
   213ca:	0092      	lsls	r2, r2, #2
   213cc:	a908      	add	r1, sp, #32
   213ce:	4650      	mov	r0, sl
   213d0:	f7ea fec6 	bl	c160 <memcpy>
   213d4:	b029      	add	sp, #164	; 0xa4
   213d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213da:	f1c9 0208 	rsb	r2, r9, #8
   213de:	00d2      	lsls	r2, r2, #3
   213e0:	3201      	adds	r2, #1
   213e2:	4623      	mov	r3, r4
   213e4:	4659      	mov	r1, fp
   213e6:	4620      	mov	r0, r4
   213e8:	2500      	movs	r5, #0
   213ea:	a704      	add	r7, pc, #16	; (adr r7, 213fc <double_jacobian_default+0x22c>)
   213ec:	f3af 8000 	nop.w
   213f0:	19d2      	adds	r2, r2, r7
   213f2:	c880      	ldmia	r0!, {r7}
   213f4:	c940      	ldmia	r1!, {r6}
   213f6:	19bf      	adds	r7, r7, r6
   213f8:	c380      	stmia	r3!, {r7}
   213fa:	4710      	bx	r2
   213fc:	c880      	ldmia	r0!, {r7}
   213fe:	c940      	ldmia	r1!, {r6}
   21400:	4177      	adcs	r7, r6
   21402:	c380      	stmia	r3!, {r7}
   21404:	c880      	ldmia	r0!, {r7}
   21406:	c940      	ldmia	r1!, {r6}
   21408:	4177      	adcs	r7, r6
   2140a:	c380      	stmia	r3!, {r7}
   2140c:	c880      	ldmia	r0!, {r7}
   2140e:	c940      	ldmia	r1!, {r6}
   21410:	4177      	adcs	r7, r6
   21412:	c380      	stmia	r3!, {r7}
   21414:	c880      	ldmia	r0!, {r7}
   21416:	c940      	ldmia	r1!, {r6}
   21418:	4177      	adcs	r7, r6
   2141a:	c380      	stmia	r3!, {r7}
   2141c:	c880      	ldmia	r0!, {r7}
   2141e:	c940      	ldmia	r1!, {r6}
   21420:	4177      	adcs	r7, r6
   21422:	c380      	stmia	r3!, {r7}
   21424:	c880      	ldmia	r0!, {r7}
   21426:	c940      	ldmia	r1!, {r6}
   21428:	4177      	adcs	r7, r6
   2142a:	c380      	stmia	r3!, {r7}
   2142c:	c880      	ldmia	r0!, {r7}
   2142e:	c940      	ldmia	r1!, {r6}
   21430:	4177      	adcs	r7, r6
   21432:	c380      	stmia	r3!, {r7}
   21434:	416d      	adcs	r5, r5
   21436:	ea4f 0189 	mov.w	r1, r9, lsl #2
   2143a:	1863      	adds	r3, r4, r1
   2143c:	429c      	cmp	r4, r3
   2143e:	46ae      	mov	lr, r5
   21440:	d20f      	bcs.n	21462 <double_jacobian_default+0x292>
   21442:	9f03      	ldr	r7, [sp, #12]
   21444:	9d04      	ldr	r5, [sp, #16]
   21446:	9e07      	ldr	r6, [sp, #28]
   21448:	2200      	movs	r2, #0
   2144a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   2144e:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   21452:	429c      	cmp	r4, r3
   21454:	601a      	str	r2, [r3, #0]
   21456:	ea4f 72c0 	mov.w	r2, r0, lsl #31
   2145a:	d3f6      	bcc.n	2144a <double_jacobian_default+0x27a>
   2145c:	9703      	str	r7, [sp, #12]
   2145e:	9504      	str	r5, [sp, #16]
   21460:	9607      	str	r6, [sp, #28]
   21462:	3904      	subs	r1, #4
   21464:	5863      	ldr	r3, [r4, r1]
   21466:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   2146a:	5063      	str	r3, [r4, r1]
   2146c:	e75d      	b.n	2132a <double_jacobian_default+0x15a>
   2146e:	bf00      	nop

00021470 <uECC_secp256r1>:
   21470:	4800      	ldr	r0, [pc, #0]	; (21474 <uECC_secp256r1+0x4>)
   21472:	4770      	bx	lr
   21474:	00024a84 	.word	0x00024a84

00021478 <uECC_valid_point>:
   21478:	b5f0      	push	{r4, r5, r6, r7, lr}
   2147a:	f991 3000 	ldrsb.w	r3, [r1]
   2147e:	b2da      	uxtb	r2, r3
   21480:	0057      	lsls	r7, r2, #1
   21482:	b2ff      	uxtb	r7, r7
   21484:	b27c      	sxtb	r4, r7
   21486:	2c00      	cmp	r4, #0
   21488:	b099      	sub	sp, #100	; 0x64
   2148a:	dd28      	ble.n	214de <uECC_valid_point+0x66>
   2148c:	3f01      	subs	r7, #1
   2148e:	b2ff      	uxtb	r7, r7
   21490:	eb00 0787 	add.w	r7, r0, r7, lsl #2
   21494:	1f04      	subs	r4, r0, #4
   21496:	2500      	movs	r5, #0
   21498:	f854 6f04 	ldr.w	r6, [r4, #4]!
   2149c:	42bc      	cmp	r4, r7
   2149e:	ea45 0506 	orr.w	r5, r5, r6
   214a2:	d1f9      	bne.n	21498 <uECC_valid_point+0x20>
   214a4:	b1f5      	cbz	r5, 214e4 <uECC_valid_point+0x6c>
   214a6:	1e55      	subs	r5, r2, #1
   214a8:	b26d      	sxtb	r5, r5
   214aa:	2d00      	cmp	r5, #0
   214ac:	f101 0e04 	add.w	lr, r1, #4
   214b0:	db15      	blt.n	214de <uECC_valid_point+0x66>
   214b2:	b22e      	sxth	r6, r5
   214b4:	f85e c026 	ldr.w	ip, [lr, r6, lsl #2]
   214b8:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
   214bc:	4594      	cmp	ip, r2
   214be:	d814      	bhi.n	214ea <uECC_valid_point+0x72>
   214c0:	d30d      	bcc.n	214de <uECC_valid_point+0x66>
   214c2:	462c      	mov	r4, r5
   214c4:	e006      	b.n	214d4 <uECC_valid_point+0x5c>
   214c6:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
   214ca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   214ce:	4297      	cmp	r7, r2
   214d0:	d80b      	bhi.n	214ea <uECC_valid_point+0x72>
   214d2:	d304      	bcc.n	214de <uECC_valid_point+0x66>
   214d4:	3c01      	subs	r4, #1
   214d6:	b264      	sxtb	r4, r4
   214d8:	1c67      	adds	r7, r4, #1
   214da:	b222      	sxth	r2, r4
   214dc:	d1f3      	bne.n	214c6 <uECC_valid_point+0x4e>
   214de:	2000      	movs	r0, #0
   214e0:	b019      	add	sp, #100	; 0x64
   214e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214e4:	4628      	mov	r0, r5
   214e6:	b019      	add	sp, #100	; 0x64
   214e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   214ea:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   214ee:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   214f2:	4564      	cmp	r4, ip
   214f4:	d310      	bcc.n	21518 <uECC_valid_point+0xa0>
   214f6:	d8f2      	bhi.n	214de <uECC_valid_point+0x66>
   214f8:	462c      	mov	r4, r5
   214fa:	e006      	b.n	2150a <uECC_valid_point+0x92>
   214fc:	f85e c027 	ldr.w	ip, [lr, r7, lsl #2]
   21500:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
   21504:	45bc      	cmp	ip, r7
   21506:	d807      	bhi.n	21518 <uECC_valid_point+0xa0>
   21508:	d3e9      	bcc.n	214de <uECC_valid_point+0x66>
   2150a:	3c01      	subs	r4, #1
   2150c:	b264      	sxtb	r4, r4
   2150e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   21512:	b227      	sxth	r7, r4
   21514:	d1f2      	bne.n	214fc <uECC_valid_point+0x84>
   21516:	e7e2      	b.n	214de <uECC_valid_point+0x66>
   21518:	460f      	mov	r7, r1
   2151a:	4604      	mov	r4, r0
   2151c:	4611      	mov	r1, r2
   2151e:	a808      	add	r0, sp, #32
   21520:	f7ff f816 	bl	20550 <uECC_vli_mult>
   21524:	a908      	add	r1, sp, #32
   21526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   2152a:	4668      	mov	r0, sp
   2152c:	4798      	blx	r3
   2152e:	a808      	add	r0, sp, #32
   21530:	4621      	mov	r1, r4
   21532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   21536:	463a      	mov	r2, r7
   21538:	4798      	blx	r3
   2153a:	2000      	movs	r0, #0
   2153c:	e000      	b.n	21540 <uECC_valid_point+0xc8>
   2153e:	b22e      	sxth	r6, r5
   21540:	ab18      	add	r3, sp, #96	; 0x60
   21542:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   21546:	3d01      	subs	r5, #1
   21548:	f856 2c60 	ldr.w	r2, [r6, #-96]
   2154c:	f856 3c40 	ldr.w	r3, [r6, #-64]
   21550:	b26d      	sxtb	r5, r5
   21552:	4053      	eors	r3, r2
   21554:	4318      	orrs	r0, r3
   21556:	1c6b      	adds	r3, r5, #1
   21558:	d1f1      	bne.n	2153e <uECC_valid_point+0xc6>
   2155a:	fab0 f080 	clz	r0, r0
   2155e:	0940      	lsrs	r0, r0, #5
   21560:	e7be      	b.n	214e0 <uECC_valid_point+0x68>
   21562:	bf00      	nop

00021564 <uECC_valid_public_key>:
   21564:	f7ff bf88 	b.w	21478 <uECC_valid_point>

00021568 <am_bsp_low_power_init>:
   21568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2156a:	f7fe fe73 	bl	20254 <am_hal_pwrctrl_low_power_init>
   2156e:	f000 f871 	bl	21654 <am_hal_rtc_osc_disable>
   21572:	4b0b      	ldr	r3, [pc, #44]	; (215a0 <am_bsp_low_power_init+0x38>)
   21574:	4f0b      	ldr	r7, [pc, #44]	; (215a4 <am_bsp_low_power_init+0x3c>)
   21576:	681e      	ldr	r6, [r3, #0]
   21578:	2400      	movs	r4, #0
   2157a:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   2157e:	4631      	mov	r1, r6
   21580:	4628      	mov	r0, r5
   21582:	f7fe fb75 	bl	1fc70 <am_hal_gpio_pinconfig>
   21586:	2103      	movs	r1, #3
   21588:	4628      	mov	r0, r5
   2158a:	f7fe fcdf 	bl	1ff4c <am_hal_gpio_state_write>
   2158e:	3401      	adds	r4, #1
   21590:	4628      	mov	r0, r5
   21592:	2100      	movs	r1, #0
   21594:	f7fe fcda 	bl	1ff4c <am_hal_gpio_state_write>
   21598:	2c05      	cmp	r4, #5
   2159a:	d1ee      	bne.n	2157a <am_bsp_low_power_init+0x12>
   2159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2159e:	bf00      	nop
   215a0:	000247b0 	.word	0x000247b0
   215a4:	10003750 	.word	0x10003750

000215a8 <am_bsp_itm_printf_enable>:
   215a8:	b500      	push	{lr}
   215aa:	4b0b      	ldr	r3, [pc, #44]	; (215d8 <am_bsp_itm_printf_enable+0x30>)
   215ac:	b087      	sub	sp, #28
   215ae:	2201      	movs	r2, #1
   215b0:	601a      	str	r2, [r3, #0]
   215b2:	f000 f819 	bl	215e8 <am_hal_itm_enable>
   215b6:	a806      	add	r0, sp, #24
   215b8:	4b08      	ldr	r3, [pc, #32]	; (215dc <am_bsp_itm_printf_enable+0x34>)
   215ba:	f840 3d14 	str.w	r3, [r0, #-20]!
   215be:	f000 f853 	bl	21668 <am_hal_tpiu_enable>
   215c2:	4b07      	ldr	r3, [pc, #28]	; (215e0 <am_bsp_itm_printf_enable+0x38>)
   215c4:	2029      	movs	r0, #41	; 0x29
   215c6:	6819      	ldr	r1, [r3, #0]
   215c8:	f7fe fb52 	bl	1fc70 <am_hal_gpio_pinconfig>
   215cc:	4805      	ldr	r0, [pc, #20]	; (215e4 <am_bsp_itm_printf_enable+0x3c>)
   215ce:	f7f9 f92d 	bl	1a82c <am_util_stdio_printf_init>
   215d2:	b007      	add	sp, #28
   215d4:	f85d fb04 	ldr.w	pc, [sp], #4
   215d8:	100051f8 	.word	0x100051f8
   215dc:	000f4240 	.word	0x000f4240
   215e0:	00024b34 	.word	0x00024b34
   215e4:	00021625 	.word	0x00021625

000215e8 <am_hal_itm_enable>:
   215e8:	4a0b      	ldr	r2, [pc, #44]	; (21618 <am_hal_itm_enable+0x30>)
   215ea:	68d3      	ldr	r3, [r2, #12]
   215ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   215f0:	60d3      	str	r3, [r2, #12]
   215f2:	68d3      	ldr	r3, [r2, #12]
   215f4:	01db      	lsls	r3, r3, #7
   215f6:	d5fc      	bpl.n	215f2 <am_hal_itm_enable+0xa>
   215f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   215fc:	4907      	ldr	r1, [pc, #28]	; (2161c <am_hal_itm_enable+0x34>)
   215fe:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   21602:	4a07      	ldr	r2, [pc, #28]	; (21620 <am_hal_itm_enable+0x38>)
   21604:	200f      	movs	r0, #15
   21606:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2160a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2160e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   21612:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   21616:	4770      	bx	lr
   21618:	e000edf0 	.word	0xe000edf0
   2161c:	c5acce55 	.word	0xc5acce55
   21620:	00150511 	.word	0x00150511

00021624 <am_hal_itm_print>:
   21624:	7803      	ldrb	r3, [r0, #0]
   21626:	b1a3      	cbz	r3, 21652 <am_hal_itm_print+0x2e>
   21628:	4602      	mov	r2, r0
   2162a:	2300      	movs	r3, #0
   2162c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   21630:	3301      	adds	r3, #1
   21632:	2900      	cmp	r1, #0
   21634:	d1fa      	bne.n	2162c <am_hal_itm_print+0x8>
   21636:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2163a:	b430      	push	{r4, r5}
   2163c:	18c1      	adds	r1, r0, r3
   2163e:	4615      	mov	r5, r2
   21640:	f810 4b01 	ldrb.w	r4, [r0], #1
   21644:	6813      	ldr	r3, [r2, #0]
   21646:	2b00      	cmp	r3, #0
   21648:	d0fc      	beq.n	21644 <am_hal_itm_print+0x20>
   2164a:	4288      	cmp	r0, r1
   2164c:	702c      	strb	r4, [r5, #0]
   2164e:	d1f7      	bne.n	21640 <am_hal_itm_print+0x1c>
   21650:	bc30      	pop	{r4, r5}
   21652:	4770      	bx	lr

00021654 <am_hal_rtc_osc_disable>:
   21654:	4a03      	ldr	r2, [pc, #12]	; (21664 <am_hal_rtc_osc_disable+0x10>)
   21656:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   2165a:	f043 0310 	orr.w	r3, r3, #16
   2165e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   21662:	4770      	bx	lr
   21664:	40004200 	.word	0x40004200

00021668 <am_hal_tpiu_enable>:
   21668:	b530      	push	{r4, r5, lr}
   2166a:	4a23      	ldr	r2, [pc, #140]	; (216f8 <am_hal_tpiu_enable+0x90>)
   2166c:	6804      	ldr	r4, [r0, #0]
   2166e:	2300      	movs	r3, #0
   21670:	b085      	sub	sp, #20
   21672:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   21676:	b334      	cbz	r4, 216c6 <am_hal_tpiu_enable+0x5e>
   21678:	4b20      	ldr	r3, [pc, #128]	; (216fc <am_hal_tpiu_enable+0x94>)
   2167a:	4921      	ldr	r1, [pc, #132]	; (21700 <am_hal_tpiu_enable+0x98>)
   2167c:	2001      	movs	r0, #1
   2167e:	6050      	str	r0, [r2, #4]
   21680:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   21684:	a801      	add	r0, sp, #4
   21686:	428a      	cmp	r2, r1
   21688:	bf88      	it	hi
   2168a:	461c      	movhi	r4, r3
   2168c:	f7fe f830 	bl	1f6f0 <am_hal_clkgen_status_get>
   21690:	9b01      	ldr	r3, [sp, #4]
   21692:	1c5a      	adds	r2, r3, #1
   21694:	d02d      	beq.n	216f2 <am_hal_tpiu_enable+0x8a>
   21696:	08db      	lsrs	r3, r3, #3
   21698:	fbb3 f3f4 	udiv	r3, r3, r4
   2169c:	3b01      	subs	r3, #1
   2169e:	b29b      	uxth	r3, r3
   216a0:	4a15      	ldr	r2, [pc, #84]	; (216f8 <am_hal_tpiu_enable+0x90>)
   216a2:	4918      	ldr	r1, [pc, #96]	; (21704 <am_hal_tpiu_enable+0x9c>)
   216a4:	6113      	str	r3, [r2, #16]
   216a6:	2402      	movs	r4, #2
   216a8:	f240 2301 	movw	r3, #513	; 0x201
   216ac:	2000      	movs	r0, #0
   216ae:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   216b2:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   216b6:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   216ba:	f44f 7048 	mov.w	r0, #800	; 0x320
   216be:	f7fe fa83 	bl	1fbc8 <am_hal_flash_delay>
   216c2:	b005      	add	sp, #20
   216c4:	bd30      	pop	{r4, r5, pc}
   216c6:	6903      	ldr	r3, [r0, #16]
   216c8:	6113      	str	r3, [r2, #16]
   216ca:	6883      	ldr	r3, [r0, #8]
   216cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   216d0:	68c3      	ldr	r3, [r0, #12]
   216d2:	4d0c      	ldr	r5, [pc, #48]	; (21704 <am_hal_tpiu_enable+0x9c>)
   216d4:	1e59      	subs	r1, r3, #1
   216d6:	2301      	movs	r3, #1
   216d8:	408b      	lsls	r3, r1
   216da:	6053      	str	r3, [r2, #4]
   216dc:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   216e0:	6843      	ldr	r3, [r0, #4]
   216e2:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   216e6:	f44f 7048 	mov.w	r0, #800	; 0x320
   216ea:	f7fe fa6d 	bl	1fbc8 <am_hal_flash_delay>
   216ee:	b005      	add	sp, #20
   216f0:	bd30      	pop	{r4, r5, pc}
   216f2:	2305      	movs	r3, #5
   216f4:	e7d4      	b.n	216a0 <am_hal_tpiu_enable+0x38>
   216f6:	bf00      	nop
   216f8:	e0040000 	.word	0xe0040000
   216fc:	000f4240 	.word	0x000f4240
   21700:	001da380 	.word	0x001da380
   21704:	40020000 	.word	0x40020000
   21708:	203e3e3e 	.word	0x203e3e3e
   2170c:	65736552 	.word	0x65736552
   21710:	6f632074 	.word	0x6f632074
   21714:	656c706d 	.word	0x656c706d
   21718:	3c206574 	.word	0x3c206574
   2171c:	00003c3c 	.word	0x00003c3c
   21720:	203e3e3e 	.word	0x203e3e3e
   21724:	65766441 	.word	0x65766441
   21728:	73697472 	.word	0x73697472
   2172c:	20676e69 	.word	0x20676e69
   21730:	72617473 	.word	0x72617473
   21734:	20646574 	.word	0x20646574
   21738:	003c3c3c 	.word	0x003c3c3c
   2173c:	203e3e3e 	.word	0x203e3e3e
   21740:	65766441 	.word	0x65766441
   21744:	73697472 	.word	0x73697472
   21748:	20676e69 	.word	0x20676e69
   2174c:	706f7473 	.word	0x706f7473
   21750:	20646570 	.word	0x20646570
   21754:	003c3c3c 	.word	0x003c3c3c
   21758:	203e3e3e 	.word	0x203e3e3e
   2175c:	6e616353 	.word	0x6e616353
   21760:	676e696e 	.word	0x676e696e
   21764:	61747320 	.word	0x61747320
   21768:	64657472 	.word	0x64657472
   2176c:	3c3c3c20 	.word	0x3c3c3c20
   21770:	00000000 	.word	0x00000000
   21774:	203e3e3e 	.word	0x203e3e3e
   21778:	6e616353 	.word	0x6e616353
   2177c:	676e696e 	.word	0x676e696e
   21780:	6f747320 	.word	0x6f747320
   21784:	64657070 	.word	0x64657070
   21788:	3c3c3c20 	.word	0x3c3c3c20
   2178c:	00000000 	.word	0x00000000
   21790:	203e3e3e 	.word	0x203e3e3e
   21794:	6e616353 	.word	0x6e616353
   21798:	74616420 	.word	0x74616420
   2179c:	65722061 	.word	0x65722061
   217a0:	76696563 	.word	0x76696563
   217a4:	66206465 	.word	0x66206465
   217a8:	206d6f72 	.word	0x206d6f72
   217ac:	72656570 	.word	0x72656570
   217b0:	3c3c3c20 	.word	0x3c3c3c20
   217b4:	00000000 	.word	0x00000000
   217b8:	203e3e3e 	.word	0x203e3e3e
   217bc:	6e6e6f43 	.word	0x6e6e6f43
   217c0:	69746365 	.word	0x69746365
   217c4:	6f206e6f 	.word	0x6f206e6f
   217c8:	656e6570 	.word	0x656e6570
   217cc:	3c3c2064 	.word	0x3c3c2064
   217d0:	0000003c 	.word	0x0000003c
   217d4:	203e3e3e 	.word	0x203e3e3e
   217d8:	6e6e6f43 	.word	0x6e6e6f43
   217dc:	69746365 	.word	0x69746365
   217e0:	63206e6f 	.word	0x63206e6f
   217e4:	65736f6c 	.word	0x65736f6c
   217e8:	3c3c2064 	.word	0x3c3c2064
   217ec:	0000003c 	.word	0x0000003c
   217f0:	203e3e3e 	.word	0x203e3e3e
   217f4:	72696150 	.word	0x72696150
   217f8:	20676e69 	.word	0x20676e69
   217fc:	706d6f63 	.word	0x706d6f63
   21800:	6574656c 	.word	0x6574656c
   21804:	75732064 	.word	0x75732064
   21808:	73656363 	.word	0x73656363
   2180c:	6c756673 	.word	0x6c756673
   21810:	3c20796c 	.word	0x3c20796c
   21814:	00003c3c 	.word	0x00003c3c
   21818:	203e3e3e 	.word	0x203e3e3e
   2181c:	72696150 	.word	0x72696150
   21820:	20676e69 	.word	0x20676e69
   21824:	6c696166 	.word	0x6c696166
   21828:	3c206465 	.word	0x3c206465
   2182c:	00003c3c 	.word	0x00003c3c
   21830:	203e3e3e 	.word	0x203e3e3e
   21834:	6e6e6f43 	.word	0x6e6e6f43
   21838:	69746365 	.word	0x69746365
   2183c:	65206e6f 	.word	0x65206e6f
   21840:	7972636e 	.word	0x7972636e
   21844:	64657470 	.word	0x64657470
   21848:	3c3c3c20 	.word	0x3c3c3c20
   2184c:	00000000 	.word	0x00000000
   21850:	203e3e3e 	.word	0x203e3e3e
   21854:	72636e45 	.word	0x72636e45
   21858:	69747079 	.word	0x69747079
   2185c:	66206e6f 	.word	0x66206e6f
   21860:	656c6961 	.word	0x656c6961
   21864:	3c3c2064 	.word	0x3c3c2064
   21868:	0000003c 	.word	0x0000003c
   2186c:	203e3e3e 	.word	0x203e3e3e
   21870:	6d6f7250 	.word	0x6d6f7250
   21874:	75207470 	.word	0x75207470
   21878:	20726573 	.word	0x20726573
   2187c:	65206f74 	.word	0x65206f74
   21880:	7265746e 	.word	0x7265746e
   21884:	73617020 	.word	0x73617020
   21888:	79656b73 	.word	0x79656b73
   2188c:	3c3c3c20 	.word	0x3c3c3c20
   21890:	00000000 	.word	0x00000000
   21894:	203e3e3e 	.word	0x203e3e3e
   21898:	636e6143 	.word	0x636e6143
   2189c:	61206c65 	.word	0x61206c65
   218a0:	776f6c20 	.word	0x776f6c20
   218a4:	20726f20 	.word	0x20726f20
   218a8:	68676968 	.word	0x68676968
   218ac:	656c6120 	.word	0x656c6120
   218b0:	3c207472 	.word	0x3c207472
   218b4:	00003c3c 	.word	0x00003c3c
   218b8:	203e3e3e 	.word	0x203e3e3e
   218bc:	20776f4c 	.word	0x20776f4c
   218c0:	72656c61 	.word	0x72656c61
   218c4:	3c3c2074 	.word	0x3c3c2074
   218c8:	0000003c 	.word	0x0000003c
   218cc:	203e3e3e 	.word	0x203e3e3e
   218d0:	68676948 	.word	0x68676948
   218d4:	656c6120 	.word	0x656c6120
   218d8:	3c207472 	.word	0x3c207472
   218dc:	00003c3c 	.word	0x00003c3c
   218e0:	203e3e3e 	.word	0x203e3e3e
   218e4:	73736150 	.word	0x73736150
   218e8:	3a79656b 	.word	0x3a79656b
   218ec:	20642520 	.word	0x20642520
   218f0:	003c3c3c 	.word	0x003c3c3c
   218f4:	203e3e3e 	.word	0x203e3e3e
   218f8:	666e6f43 	.word	0x666e6f43
   218fc:	206d7269 	.word	0x206d7269
   21900:	756c6156 	.word	0x756c6156
   21904:	25203a65 	.word	0x25203a65
   21908:	3c3c2064 	.word	0x3c3c2064
   2190c:	0000003c 	.word	0x0000003c
   21910:	203e3e3e 	.word	0x203e3e3e
   21914:	49535352 	.word	0x49535352
   21918:	6425203a 	.word	0x6425203a
   2191c:	6d426420 	.word	0x6d426420
   21920:	003c3c3c 	.word	0x003c3c3c
   21924:	20465357 	.word	0x20465357
   21928:	20636573 	.word	0x20636573
   2192c:	20746f6e 	.word	0x20746f6e
   21930:	69676572 	.word	0x69676572
   21934:	72657473 	.word	0x72657473
   21938:	00006465 	.word	0x00006465
   2193c:	20465357 	.word	0x20465357
   21940:	20636573 	.word	0x20636573
   21944:	75657571 	.word	0x75657571
   21948:	6d652065 	.word	0x6d652065
   2194c:	21797470 	.word	0x21797470
   21950:	00000000 	.word	0x00000000
   21954:	746e6543 	.word	0x746e6543
   21958:	206c6172 	.word	0x206c6172
   2195c:	72646461 	.word	0x72646461
   21960:	20737365 	.word	0x20737365
   21964:	6f736572 	.word	0x6f736572
   21968:	6974756c 	.word	0x6974756c
   2196c:	203a6e6f 	.word	0x203a6e6f
   21970:	00006425 	.word	0x00006425
   21974:	4f525245 	.word	0x4f525245
   21978:	48435f52 	.word	0x48435f52
   2197c:	5f4b4345 	.word	0x5f4b4345
   21980:	44494f56 	.word	0x44494f56
   21984:	5f6d6120 	.word	0x5f6d6120
   21988:	5f6c6168 	.word	0x5f6c6168
   2198c:	5f656c62 	.word	0x5f656c62
   21990:	74696e69 	.word	0x74696e69
   21994:	696c6169 	.word	0x696c6169
   21998:	3028657a 	.word	0x3028657a
   2199c:	4226202c 	.word	0x4226202c
   219a0:	0a29454c 	.word	0x0a29454c
   219a4:	00000000 	.word	0x00000000
   219a8:	4f525245 	.word	0x4f525245
   219ac:	48435f52 	.word	0x48435f52
   219b0:	5f4b4345 	.word	0x5f4b4345
   219b4:	44494f56 	.word	0x44494f56
   219b8:	5f6d6120 	.word	0x5f6d6120
   219bc:	5f6c6168 	.word	0x5f6c6168
   219c0:	5f656c62 	.word	0x5f656c62
   219c4:	65776f70 	.word	0x65776f70
   219c8:	6f635f72 	.word	0x6f635f72
   219cc:	6f72746e 	.word	0x6f72746e
   219d0:	4c42286c 	.word	0x4c42286c
   219d4:	41202c45 	.word	0x41202c45
   219d8:	41485f4d 	.word	0x41485f4d
   219dc:	4c425f4c 	.word	0x4c425f4c
   219e0:	4f505f45 	.word	0x4f505f45
   219e4:	5f524557 	.word	0x5f524557
   219e8:	49544341 	.word	0x49544341
   219ec:	0a294556 	.word	0x0a294556
   219f0:	00000000 	.word	0x00000000
   219f4:	4f525245 	.word	0x4f525245
   219f8:	48435f52 	.word	0x48435f52
   219fc:	5f4b4345 	.word	0x5f4b4345
   21a00:	44494f56 	.word	0x44494f56
   21a04:	5f6d6120 	.word	0x5f6d6120
   21a08:	5f6c6168 	.word	0x5f6c6168
   21a0c:	5f656c62 	.word	0x5f656c62
   21a10:	666e6f63 	.word	0x666e6f63
   21a14:	42286769 	.word	0x42286769
   21a18:	202c454c 	.word	0x202c454c
   21a1c:	6c427326 	.word	0x6c427326
   21a20:	6e6f4365 	.word	0x6e6f4365
   21a24:	29676966 	.word	0x29676966
   21a28:	0000000a 	.word	0x0000000a
   21a2c:	4f525245 	.word	0x4f525245
   21a30:	48435f52 	.word	0x48435f52
   21a34:	5f4b4345 	.word	0x5f4b4345
   21a38:	44494f56 	.word	0x44494f56
   21a3c:	5f6d6120 	.word	0x5f6d6120
   21a40:	5f6c6168 	.word	0x5f6c6168
   21a44:	5f656c62 	.word	0x5f656c62
   21a48:	65776f70 	.word	0x65776f70
   21a4c:	6f635f72 	.word	0x6f635f72
   21a50:	6f72746e 	.word	0x6f72746e
   21a54:	4c42286c 	.word	0x4c42286c
   21a58:	41202c45 	.word	0x41202c45
   21a5c:	41485f4d 	.word	0x41485f4d
   21a60:	4c425f4c 	.word	0x4c425f4c
   21a64:	4f505f45 	.word	0x4f505f45
   21a68:	5f524557 	.word	0x5f524557
   21a6c:	2946464f 	.word	0x2946464f
   21a70:	0000000a 	.word	0x0000000a
   21a74:	4f525245 	.word	0x4f525245
   21a78:	48435f52 	.word	0x48435f52
   21a7c:	5f4b4345 	.word	0x5f4b4345
   21a80:	44494f56 	.word	0x44494f56
   21a84:	5f6d6120 	.word	0x5f6d6120
   21a88:	5f6c6168 	.word	0x5f6c6168
   21a8c:	5f656c62 	.word	0x5f656c62
   21a90:	6e696564 	.word	0x6e696564
   21a94:	61697469 	.word	0x61697469
   21a98:	657a696c 	.word	0x657a696c
   21a9c:	454c4228 	.word	0x454c4228
   21aa0:	00000a29 	.word	0x00000a29
   21aa4:	00000004 	.word	0x00000004
   21aa8:	00000020 	.word	0x00000020
   21aac:	00000020 	.word	0x00000020
   21ab0:	00000002 	.word	0x00000002
   21ab4:	00000000 	.word	0x00000000
   21ab8:	00000032 	.word	0x00000032
   21abc:	00010101 	.word	0x00010101
   21ac0:	4f525245 	.word	0x4f525245
   21ac4:	48435f52 	.word	0x48435f52
   21ac8:	5f4b4345 	.word	0x5f4b4345
   21acc:	44494f56 	.word	0x44494f56
   21ad0:	49434820 	.word	0x49434820
   21ad4:	5652445f 	.word	0x5652445f
   21ad8:	5f58525f 	.word	0x5f58525f
   21adc:	4b434150 	.word	0x4b434150
   21ae0:	545f5445 	.word	0x545f5445
   21ae4:	4c5f4f4f 	.word	0x4c5f4f4f
   21ae8:	45475241 	.word	0x45475241
   21aec:	0000000a 	.word	0x0000000a
   21af0:	42667357 	.word	0x42667357
   21af4:	6c416675 	.word	0x6c416675
   21af8:	20636f6c 	.word	0x20636f6c
   21afc:	6c696166 	.word	0x6c696166
   21b00:	6c206465 	.word	0x6c206465
   21b04:	253a6e65 	.word	0x253a6e65
   21b08:	00000075 	.word	0x00000075
   21b0c:	20746f47 	.word	0x20746f47
   21b10:	74747542 	.word	0x74747542
   21b14:	30206e6f 	.word	0x30206e6f
   21b18:	65725020 	.word	0x65725020
   21b1c:	000a7373 	.word	0x000a7373
   21b20:	20746f47 	.word	0x20746f47
   21b24:	74747542 	.word	0x74747542
   21b28:	31206e6f 	.word	0x31206e6f
   21b2c:	65725020 	.word	0x65725020
   21b30:	000a7373 	.word	0x000a7373
   21b34:	20746f47 	.word	0x20746f47
   21b38:	74747542 	.word	0x74747542
   21b3c:	32206e6f 	.word	0x32206e6f
   21b40:	65725020 	.word	0x65725020
   21b44:	000a7373 	.word	0x000a7373
   21b48:	65776f50 	.word	0x65776f50
   21b4c:	666f2072 	.word	0x666f2072
   21b50:	70412066 	.word	0x70412066
   21b54:	6f6c6c6f 	.word	0x6f6c6c6f
   21b58:	4c422033 	.word	0x4c422033
   21b5c:	6f632045 	.word	0x6f632045
   21b60:	6f72746e 	.word	0x6f72746e
   21b64:	72656c6c 	.word	0x72656c6c
   21b68:	0000000a 	.word	0x0000000a
   21b6c:	65776f50 	.word	0x65776f50
   21b70:	6e6f2072 	.word	0x6e6f2072
   21b74:	6f704120 	.word	0x6f704120
   21b78:	336f6c6c 	.word	0x336f6c6c
   21b7c:	454c4220 	.word	0x454c4220
   21b80:	6e6f6320 	.word	0x6e6f6320
   21b84:	6c6f7274 	.word	0x6c6f7274
   21b88:	0a72656c 	.word	0x0a72656c
   21b8c:	00000000 	.word	0x00000000
   21b90:	64726f43 	.word	0x64726f43
   21b94:	50206f69 	.word	0x50206f69
   21b98:	7265776f 	.word	0x7265776f
   21b9c:	63794320 	.word	0x63794320
   21ba0:	4520656c 	.word	0x4520656c
   21ba4:	706d6178 	.word	0x706d6178
   21ba8:	000a656c 	.word	0x000a656c
   21bac:	58323025 	.word	0x58323025
   21bb0:	00000020 	.word	0x00000020
   21bb4:	0000000a 	.word	0x0000000a
   21bb8:	00000a0a 	.word	0x00000a0a
   21bbc:	2e2f2e2e 	.word	0x2e2f2e2e
   21bc0:	2e2e2f2e 	.word	0x2e2e2f2e
   21bc4:	2f2e2e2f 	.word	0x2f2e2e2f
   21bc8:	742f2e2e 	.word	0x742f2e2e
   21bcc:	64726968 	.word	0x64726968
   21bd0:	7261705f 	.word	0x7261705f
   21bd4:	652f7974 	.word	0x652f7974
   21bd8:	74636178 	.word	0x74636178
   21bdc:	772f656c 	.word	0x772f656c
   21be0:	6f632d73 	.word	0x6f632d73
   21be4:	732f6572 	.word	0x732f6572
   21be8:	73772f77 	.word	0x73772f77
   21bec:	6d612f66 	.word	0x6d612f66
   21bf0:	2f716962 	.word	0x2f716962
   21bf4:	5f667377 	.word	0x5f667377
   21bf8:	63617274 	.word	0x63617274
   21bfc:	00632e65 	.word	0x00632e65
   21c00:	49676174 	.word	0x49676174
   21c04:	72577361 	.word	0x72577361
   21c08:	43657469 	.word	0x43657469
   21c0c:	6b636162 	.word	0x6b636162
   21c10:	6e6f6320 	.word	0x6e6f6320
   21c14:	3a64496e 	.word	0x3a64496e
   21c18:	68206425 	.word	0x68206425
   21c1c:	6c646e61 	.word	0x6c646e61
   21c20:	78303a65 	.word	0x78303a65
   21c24:	78343025 	.word	0x78343025
   21c28:	3a706f20 	.word	0x3a706f20
   21c2c:	30257830 	.word	0x30257830
   21c30:	00007832 	.word	0x00007832
   21c34:	20202020 	.word	0x20202020
   21c38:	20202020 	.word	0x20202020
   21c3c:	20202020 	.word	0x20202020
   21c40:	20202020 	.word	0x20202020
   21c44:	66666f20 	.word	0x66666f20
   21c48:	3a746573 	.word	0x3a746573
   21c4c:	30257830 	.word	0x30257830
   21c50:	6c207834 	.word	0x6c207834
   21c54:	303a6e65 	.word	0x303a6e65
   21c58:	34302578 	.word	0x34302578
   21c5c:	00000078 	.word	0x00000078
   21c60:	6f67654e 	.word	0x6f67654e
   21c64:	74616974 	.word	0x74616974
   21c68:	4d206465 	.word	0x4d206465
   21c6c:	25205554 	.word	0x25205554
   21c70:	00000064 	.word	0x00000064
   21c74:	48676154 	.word	0x48676154
   21c78:	6c646e61 	.word	0x6c646e61
   21c7c:	6e497265 	.word	0x6e497265
   21c80:	00007469 	.word	0x00007469
   21c84:	20676154 	.word	0x20676154
   21c88:	20746f67 	.word	0x20746f67
   21c8c:	20747665 	.word	0x20747665
   21c90:	00006425 	.word	0x00006425
   21c94:	63747441 	.word	0x63747441
   21c98:	63736944 	.word	0x63736944
   21c9c:	76726553 	.word	0x76726553
   21ca0:	43656369 	.word	0x43656369
   21ca4:	206c706d 	.word	0x206c706d
   21ca8:	74617473 	.word	0x74617473
   21cac:	30207375 	.word	0x30207375
   21cb0:	32302578 	.word	0x32302578
   21cb4:	00000078 	.word	0x00000078
   21cb8:	63747441 	.word	0x63747441
   21cbc:	63736944 	.word	0x63736944
   21cc0:	72616843 	.word	0x72616843
   21cc4:	6c706d43 	.word	0x6c706d43
   21cc8:	61747320 	.word	0x61747320
   21ccc:	20737574 	.word	0x20737574
   21cd0:	30257830 	.word	0x30257830
   21cd4:	00007832 	.word	0x00007832
   21cd8:	63747441 	.word	0x63747441
   21cdc:	63736944 	.word	0x63736944
   21ce0:	666e6f43 	.word	0x666e6f43
   21ce4:	6d436769 	.word	0x6d436769
   21ce8:	73206c70 	.word	0x73206c70
   21cec:	75746174 	.word	0x75746174
   21cf0:	78302073 	.word	0x78302073
   21cf4:	78323025 	.word	0x78323025
   21cf8:	00000000 	.word	0x00000000
   21cfc:	44707041 	.word	0x44707041
   21d00:	43637369 	.word	0x43637369
   21d04:	6c706d6f 	.word	0x6c706d6f
   21d08:	20657465 	.word	0x20657465
   21d0c:	6e6e6f63 	.word	0x6e6e6f63
   21d10:	253a6449 	.word	0x253a6449
   21d14:	74732064 	.word	0x74732064
   21d18:	73757461 	.word	0x73757461
   21d1c:	2578303a 	.word	0x2578303a
   21d20:	00783230 	.word	0x00783230
   21d24:	61766e49 	.word	0x61766e49
   21d28:	2064696c 	.word	0x2064696c
   21d2c:	61204d44 	.word	0x61204d44
   21d30:	72657664 	.word	0x72657664
   21d34:	69736974 	.word	0x69736974
   21d38:	6d20676e 	.word	0x6d20676e
   21d3c:	3b65646f 	.word	0x3b65646f
   21d40:	646f6d20 	.word	0x646f6d20
   21d44:	6f632065 	.word	0x6f632065
   21d48:	6769666e 	.word	0x6769666e
   21d4c:	64657275 	.word	0x64657275
   21d50:	20736120 	.word	0x20736120
   21d54:	65747865 	.word	0x65747865
   21d58:	6465646e 	.word	0x6465646e
   21d5c:	00000000 	.word	0x00000000

00021d60 <attFcnDefault>:
   21d60:	0000c505 0000c501 0000c501 0000c503     ................

00021d70 <attWsfChUuid>:
   21d70:	2a9d2a9e                                         .*

00021d72 <attWmChUuid>:
   21d72:	181d2a9d                                         .*

00021d74 <attWssSvcUuid>:
   21d74:	2a9f181d                                         ..

00021d76 <attUcpChUuid>:
   21d76:	2a9a2a9f                                         .*

00021d78 <attUiChUuid>:
   21d78:	2a992a9a                                         .*

00021d7a <attDbciChUuid>:
   21d7a:	2ac92a99                                         .*

00021d7c <attRpaoChUuid>:
   21d7c:	2a5f2ac9                                         .*

00021d7e <attPlxcmChUuid>:
   21d7e:	2a5e2a5f                                         _*

00021d80 <attPlxscmChUuid>:
   21d80:	2a602a5e                                         ^*

00021d82 <attPlxfChUuid>:
   21d82:	2a5d2a60                                         `*

00021d84 <attSlChUuid>:
   21d84:	2a5b2a5d                                         ]*

00021d86 <attCsmChUuid>:
   21d86:	2a5c2a5b                                         [*

00021d88 <attCsfChUuid>:
   21d88:	2a632a5c                                         \*

00021d8a <attCpmChUuid>:
   21d8a:	2a652a63                                         c*

00021d8c <attCpfChUuid>:
   21d8c:	2a532a65                                         e*

00021d8e <attRsmChUuid>:
   21d8e:	2a542a53                                         S*

00021d90 <attRsfChUuid>:
   21d90:	2aa62a54                                         T*

00021d92 <attCarChUuid>:
   21d92:	2a522aa6                                         .*

00021d94 <attRacpChUuid>:
   21d94:	2a512a52                                         R*

00021d96 <attGlfChUuid>:
   21d96:	2a502a51                                         Q*

00021d98 <attPnpChUuid>:
   21d98:	2a4f2a50                                         P*

00021d9a <attSiwChUuid>:
   21d9a:	2a4e2a4f                                         O*

00021d9c <attHidPmChUuid>:
   21d9c:	2a4d2a4e                                         N*

00021d9e <attHidRepChUuid>:
   21d9e:	2a4c2a4d                                         M*

00021da0 <attHidcpChUuid>:
   21da0:	2a4b2a4c                                         L*

00021da2 <attHidRmChUuid>:
   21da2:	2a4a2a4b                                         K*

00021da4 <attHidiChUuid>:
   21da4:	2a322a4a                                         J*

00021da6 <attHidBkoChUuid>:
   21da6:	2a222a32                                         2*

00021da8 <attHidBkiChUuid>:
   21da8:	2a212a22                                         "*

00021daa <attHidBmiChUuid>:
   21daa:	2a492a21                                         !*

00021dac <attBpfChUuid>:
   21dac:	2a482a49                                         I*

00021dae <attSuacChUuid>:
   21dae:	2a472a48                                         H*

00021db0 <attSnacChUuid>:
   21db0:	2a462a47                                         G*

00021db2 <attNaChUuid>:
   21db2:	2a452a46                                         F*

00021db4 <attUasChUuid>:
   21db4:	2a442a45                                         E*

00021db6 <attAncpChUuid>:
   21db6:	2a432a44                                         D*

00021db8 <attAcChUuid>:
   21db8:	2a422a43                                         C*

00021dba <attAcbmChUuid>:
   21dba:	2a412a42                                         B*

00021dbc <attRsChUuid>:
   21dbc:	2a402a41                                         A*

00021dbe <attRcpChUuid>:
   21dbe:	2a3f2a40                                         @*

00021dc0 <attAsChUuid>:
   21dc0:	2a3e2a3f                                         ?*

00021dc2 <attNwaChUuid>:
   21dc2:	2a3d2a3e                                         >*

00021dc4 <attStrChUuid>:
   21dc4:	2a3c2a3d                                         =*

00021dc6 <attStcChUuid>:
   21dc6:	2a3b2a3c                                         <*

00021dc8 <attSrChUuid>:
   21dc8:	2a3a2a3b                                         ;*

00021dca <attRemChUuid>:
   21dca:	2a392a3a                                         :*

00021dcc <attHrcpChUuid>:
   21dcc:	2a382a39                                         9*

00021dce <attBslChUuid>:
   21dce:	2a372a38                                         8*

00021dd0 <attHrmChUuid>:
   21dd0:	2a362a37                                         7*

00021dd2 <attIcpChUuid>:
   21dd2:	2a352a36                                         6*

00021dd4 <attBpmChUuid>:
   21dd4:	2a342a35                                         5*

00021dd6 <attGlmcChUuid>:
   21dd6:	2a332a34                                         4*

00021dd8 <attHbmiChUuid>:
   21dd8:	2a312a33                                         3*

00021dda <attVidChUuid>:
   21dda:	2a302a31                                         1*

00021ddc <attP3dChUuid>:
   21ddc:	2a2f2a30                                         0*

00021dde <attP2dChUuid>:
   21dde:	2a2e2a2f                                         /*

00021de0 <attLongChUuid>:
   21de0:	2a2d2a2e                                         .*

00021de2 <attLatChUuid>:
   21de2:	2a2c2a2d                                         -*

00021de4 <attElChUuid>:
   21de4:	2a2b2a2c                                         ,*

00021de6 <attCtChUuid>:
   21de6:	2a2a2a2b                                         +*

00021de8 <attIeeeChUuid>:
   21de8:	2a292a2a                                         **

00021dea <attMfnsChUuid>:
   21dea:	2a282a29                                         )*

00021dec <attSrsChUuid>:
   21dec:	2a272a28                                         (*

00021dee <attHrsChUuid>:
   21dee:	2a262a27                                         '*

00021df0 <attFrsChUuid>:
   21df0:	2a252a26                                         &*

00021df2 <attSnsChUuid>:
   21df2:	2a242a25                                         %*

00021df4 <attMnsChUuid>:
   21df4:	2a232a24                                         $*

00021df6 <attSidChUuid>:
   21df6:	2a202a23                                         #*

00021df8 <attTfahChUuid>:
   21df8:	2a1f2a20                                          *

00021dfa <attTcelChUuid>:
   21dfa:	2a1e2a1f                                         .*

00021dfc <attItChUuid>:
   21dfc:	2a1d2a1e                                         .*

00021dfe <attTtChUuid>:
   21dfe:	2a1c2a1d                                         .*

00021e00 <attTmChUuid>:
   21e00:	2a1b2a1c                                         .*

00021e02 <attBlsChUuid>:
   21e02:	2a1a2a1b                                         .*

00021e04 <attBpsChUuid>:
   21e04:	2a192a1a                                         .*

00021e06 <attBlChUuid>:
   21e06:	2a182a19                                         .*

00021e08 <attGlmChUuid>:
   21e08:	2a172a18                                         .*

00021e0a <attTusChUuid>:
   21e0a:	2a162a17                                         .*

00021e0c <attTucpChUuid>:
   21e0c:	2a152a16                                         .*

00021e0e <attTbChUuid>:
   21e0e:	2a142a15                                         .*

00021e10 <attRtiChUuid>:
   21e10:	2a132a14                                         .*

00021e12 <attTsChUuid>:
   21e12:	2a122a13                                         .*

00021e14 <attTaChUuid>:
   21e14:	2a112a12                                         .*

00021e16 <attTdstChUuid>:
   21e16:	2a102a11                                         .*

00021e18 <attStzChUuid>:
   21e18:	2a0f2a10                                         .*

00021e1a <attLtiChUuid>:
   21e1a:	2a0e2a0f                                         .*

00021e1c <attTzChUuid>:
   21e1c:	2a0d2a0e                                         .*

00021e1e <attDstoChUuid>:
   21e1e:	2a0c2a0d                                         .*

00021e20 <attEt256ChUuid>:
   21e20:	2a0b2a0c                                         .*

00021e22 <attEt100ChUuid>:
   21e22:	2a0a2a0b                                         .*

00021e24 <attDdtChUuid>:
   21e24:	2a092a0a                                         .*

00021e26 <attDwChUuid>:
   21e26:	2a082a09                                         .*

00021e28 <attDtChUuid>:
   21e28:	2a072a08                                         .*

00021e2a <attTxpChUuid>:
   21e2a:	2a062a07                                         .*

00021e2c <attAlChUuid>:
   21e2c:	2a052a06                                         .*

00021e2e <attScChUuid>:
   21e2e:	2a042a05                                         .*

00021e30 <attPpcpChUuid>:
   21e30:	2a032a04                                         .*

00021e32 <attRaChUuid>:
   21e32:	2a022a03                                         .*

00021e34 <attPpfChUuid>:
   21e34:	2a012a02                                         .*

00021e36 <attApChUuid>:
   21e36:	2a002a01                                         .*

00021e38 <attDnChUuid>:
   21e38:	29082a00                                         .*

00021e3a <attHidRimUuid>:
   21e3a:	29072908                                         .)

00021e3c <attHidErmUuid>:
   21e3c:	29062907                                         .)

00021e3e <attValRangeUuid>:
   21e3e:	29052906                                         .)

00021e40 <attAggFmtUuid>:
   21e40:	29042905                                         .)

00021e42 <attChPresFmtUuid>:
   21e42:	29032904                                         .)

00021e44 <attSrvChCfgUuid>:
   21e44:	29022903                                         .)

00021e46 <attCliChCfgUuid>:
   21e46:	29012902                                         .)

00021e48 <attChUserDescUuid>:
   21e48:	29002901                                         .)

00021e4a <attChExtUuid>:
   21e4a:	28032900                                         .)

00021e4c <attChUuid>:
   21e4c:	28022803                                         .(

00021e4e <attIncUuid>:
   21e4e:	28012802                                         .(

00021e50 <attSecSvcUuid>:
   21e50:	28002801                                         .(

00021e52 <attPrimSvcUuid>:
   21e52:	181c2800                                         .(

00021e54 <attUdsSvcUuid>:
   21e54:	1822181c                                         ..

00021e56 <attPlxsSvcUuid>:
   21e56:	18131822                                         ".

00021e58 <attSpsSvcUuid>:
   21e58:	18121813                                         ..

00021e5a <attHidSvcUuid>:
   21e5a:	18111812                                         ..

00021e5c <attAnsSvcUuid>:
   21e5c:	18101811                                         ..

00021e5e <attBpsSvcUuid>:
   21e5e:	180f1810                                         ..

00021e60 <attBasSvcUuid>:
   21e60:	180e180f                                         ..

00021e62 <attPassSvcUuid>:
   21e62:	180d180e                                         ..

00021e64 <attHrsSvcUuid>:
   21e64:	180c180d                                         ..

00021e66 <attWdsSvcUuid>:
   21e66:	180b180c                                         ..

00021e68 <attNwaSvcUuid>:
   21e68:	180a180b                                         ..

00021e6a <attDisSvcUuid>:
   21e6a:	1809180a                                         ..

00021e6c <attHtsSvcUuid>:
   21e6c:	18081809                                         ..

00021e6e <attGlsSvcUuid>:
   21e6e:	18071808                                         ..

00021e70 <attNdcsSvcUuid>:
   21e70:	18061807                                         ..

00021e72 <attRtusSvcUuid>:
   21e72:	18051806                                         ..

00021e74 <attCtsSvcUuid>:
   21e74:	18041805                                         ..

00021e76 <attTpsSvcUuid>:
   21e76:	18031804                                         ..

00021e78 <attLlsSvcUuid>:
   21e78:	18021803                                         ..

00021e7a <attIasSvcUuid>:
   21e7a:	18011802                                         ..

00021e7c <attGattSvcUuid>:
   21e7c:	18001801                                         ..

00021e7e <attGapSvcUuid>:
   21e7e:	00001800                                         ..

00021e80 <attcSendReqTbl>:
   21e80:	00000000 0000cb47 0000cc65 0000cc65     ....G...e...e...
   21e90:	0000cc65 0000ca5d 0000cc65 0000ca5d     e...]...e...]...
   21ea0:	0000cc65 0000ca5d 0000cb79 0000cbb7     e...]...y.......
   21eb0:	0000ca5d                                ]...

00021eb4 <attcFcnIf>:
   21eb4:	0000cafd 0000c501 0000cda5 0000cce9     ................

00021ec4 <attcProcRspTbl>:
   21ec4:	0000cea1 0000cf95 0000cecd 0000d289     ................
   21ed4:	0000cecd 0000cf8d 0000d2fb 0000cf8d     ................
   21ee4:	0000cecd 0000cf8f 00000000 0000d4af     ................
   21ef4:	0000cf8f                                ....

00021ef8 <attsIndFcnIf>:
   21ef8:	0000c505 0000d7f1 0000d80b 0000d9b1     ................

00021f08 <attsMinPduLen>:
   21f08:	07050300 05050305 05030305 01000002     ................
   21f18:	0000000f                                ....

00021f1c <attsFcnIf>:
   21f1c:	0000db13 0000daa5 0000dab1 0000dba1     ................
   21f2c:	00002801                                .(..

00021f30 <dmAdvAct>:
   21f30:	0000f19d 0000f1bd 0000f1dd 0000f201     ................
   21f40:	0000f0fd 0000f2d1 0000f225              ........%...

00021f4c <dmAdvFcnIf>:
   21f4c:	0000f15d 0000f229 0000f0ff              ]...).......

00021f58 <dmAdvPrivAct>:
   21f58:	0000f3d1 0000f435 0000f481 0000f4b9     ....5...........
   21f68:	0000f469 0000f425                       i...%...

00021f70 <dmAdvPrivFcnIf>:
   21f70:	0000f4a1 0001006f 0000f369              ....o...i...

00021f7c <dmConnSpecDefaults>:
   21f7c:	00280018 07d00000 00000000              ..(.........

00021f88 <dmConnFcnIf>:
   21f88:	0000f595 0000f7cd 0000f865              ........e...

00021f94 <dmConn2FcnIf>:
   21f94:	0001006d 0000f6a1 0000f87d              m.......}...

00021fa0 <dmConnActSetMain>:
   21fa0:	0000f579 0000f58d 0000f911 0000f97d     y...........}...
   21fb0:	0000f98b 0000f57b                       ....{...

00021fb8 <dmConnActSetSlave>:
   21fb8:	0000fe95 0000feb3 0000fdb1 0000fec9     ................
   21fc8:	0000fedf 0000fe0d                       ........

00021fd0 <dmConnStateTbl>:
   21fd0:	00001001 00002002 00000000 00000000     ..... ..........
   21fe0:	00002303 00000000 00010000 00011104     .#..............
   21ff0:	00010001 00010001 02030300 00010300     ................
   22000:	00010001 21000002 00020002 00020002     .......!........
   22010:	24000002 24002303 00020002 00030002     ...$.#.$........
   22020:	00030104 22031203 25031303 00030003     ......."...%....
   22030:	05030400 05030003 00040004 00040004     ................
   22040:	00040004 04000004 04000104 00040004     ................
   22050:	00000004                                ....

00022054 <dmDevFcnIf>:
   22054:	0001006d 0000ff49 0000ffad              m...I.......

00022060 <dmHciToIdTbl>:
   22060:	03030307 04020303 04040404 05050505     ................
   22070:	07070705 06060607 05060606 07040405     ................
   22080:	04070407 04050504 09090904 00000202     ................
   22090:	070b0b0b 00020002 0000000a              ............

0002209c <dmFcnDefault>:
   2209c:	0001006d 0001006f 0001006f              m...o...o...

000220a8 <dmEvtCbackLen>:
   220a8:	00040004 000c0004 00040004 0024001c     ..............$.
   220b8:	000e000a 00040006 00040006 00220006     ..............".
   220c8:	00080010 00240006 00140064 00040006     ......$.d.......
   220d8:	0006000a 00060006 000c000c 000e0006     ................
   220e8:	0008000e 000a0006 000a0006 000a0006     ................
   220f8:	0004000c 00200004 00060006 00060016     ...... .........
   22108:	00100010 00440004 00040046              ......D.F...

00022114 <dmPrivAct>:
   22114:	00010247 000101c1 000101f9 00010221     G...........!...
   22124:	00010239 000102a9 0001023d              9.......=...

00022130 <dmPrivFcnIf>:
   22130:	000101ad 000102bd 00010199              ............

0002213c <dmSecFcnIf>:
   2213c:	0001006d 000106a5 000105cd d4f6493f     m...........?I..
   2214c:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   2215c:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   2216c:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   2217c:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   2218c:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   2219c:	2430ed8f d08e1c74 8bd28915              ..0$t.......

000221a8 <dmSecLescFcnIf>:
   221a8:	0001006d 0001006f 0001081d              m...o.......

000221b4 <smpPktLenTbl>:
   221b4:	11070700 0b110211 02110811 00021141     ............A...

000221c4 <CSWTCH.23>:
   221c4:	00024b38 00024e9c 00024b45 00024b54     8K...N..EK..TK..
   221d4:	00024b61 00024b72 00024b7a 00024b8d     aK..rK..zK...K..
   221e4:	00024b9d 00024baf 00024bbd 00024bca     .K...K...K...K..
   221f4:	00024bdc 00024bed 00024bfe 00024c0a     .K...K...K...L..
   22204:	00024c13 00024c1e 00024c28 00024c34     .L...L..(L..4L..
   22214:	00024c3c 00024c4d 00024c5f 00024c71     <L..ML.._L..qL..
   22224:	00024c7e 00024c8a 00024c96 00024ca4     ~L...L...L...L..
   22234:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

00022244 <smpScF5Key>:
   22244:	656c7462                                btle

00022248 <smpiScSmIf>:
   22248:	000222e8 000224b0 0002249f              ."...$...$..

00022254 <CSWTCH.2>:
   22254:	00024cbf 00024e9e 00024cc6 00024cd4     .L...N...L...L..
   22264:	00024cdf 00024ce9 00024cf7 00024d07     .L...L...L...M..
   22274:	00024d13 00024d22 00024d31 00024d42     .M.."M..1M..BM..
   22284:	00024d50 00024d5a 00024d63 00024d6d     PM..ZM..cM..mM..
   22294:	00024d78 00024d84 00024d94 00024cb5     xM...M...M...L..
   222a4:	00024da4 00024db3 00024dc4 00024dd2     .M...M...M...M..
   222b4:	00024ddf 00024dec 00024dfe 00024e0b     .M...M...M...N..
   222c4:	00024e18 00024e25 00024e30 00024e3c     .N..%N..0N..<N..
   222d4:	00024e4d 00024e5e 00024e69 00024e73     MN..^N..iN..sN..
   222e4:	00024e7e                                ~N..

000222e8 <smpiScStateTbl>:
   222e8:	0002248a 00022484 0002247b 00022475     .$...$..{$..u$..
   222f8:	0002246f 00022463 0002245d 00022457     o$..c$..]$..W$..
   22308:	00022451 0002244b 00022445 00022439     Q$..K$..E$..9$..
   22318:	00022433 0002242d 00022427 00022421     3$..-$..'$..!$..
   22328:	00022418 00022412 0002240c 00022406     .$...$...$...$..
   22338:	00022400 000223fa 000223f4 000223ee     .$...#...#...#..
   22348:	000223e8 000223e2 000223dc 000223d6     .#...#...#...#..
   22358:	000223d0 000223ca 000223c4 000223be     .#...#...#...#..
   22368:	000223b8 000223af 000223a0 00022391     .#...#...#...#..
   22378:	0002237c                                |#..

0002237c <smpiScStateTblAttempts>:
   2237c:	060b000f 01010a24 01000a0d 07010003     ....$...........
   2238c:	00000024 15230600                                $....

00022391 <smpiScStateTblKeyDist>:
   22391:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

000223a0 <smpiScStateTblEncrypt>:
   223a0:	09142308 22030200 03001c00 0b000000              .#.....".......

000223af <smpiScStateTblStkCalc>:
   223af:	0d13220b 00000924 12210b00                       ."..$....

000223b8 <smpiScStateTblCnfVerCalc2>:
   223b8:	0012210b 200b0000                                .!....

000223be <smpiScStateTblCnfVerCalc1>:
   223be:	0008200b 1f060000                                . ....

000223c4 <smpiScStateTblPairRand>:
   223c4:	00071f06 1e060000                                ......

000223ca <smpiScStateTblPairCnf>:
   223ca:	00111e06 1d0b0000                                ......

000223d0 <smpiScStateTblCnfCalc2>:
   223d0:	00061d0b 1c0b0000                                ......

000223d6 <smpiScStateTblCnfCalc1>:
   223d6:	00051c0b 1b040000                                ......

000223dc <smpiScStateTblLegacyPin>:
   223dc:	00041b04 22060000                                ......

000223e2 <smpiScStateTblVerifyDHCheck>:
   223e2:	00302206 191b0000                                ."0...

000223e8 <smpiScStateTblDhCalcF6Eb>:
   223e8:	002f191b 181b0000                                ../...

000223ee <smpiScStateTblDhCalcF6Ea>:
   223ee:	002e181b 171b0000                                ......

000223f4 <smpiScStateTblCalcF5LTK>:
   223f4:	002d171b 161b0000                                ..-...

000223fa <smpiScStateTblCalcF5MacKey>:
   223fa:	002c161b 151b0000                                ..,...

00022400 <smpiScStateTblCalcF5TKey>:
   22400:	002b151b 14180000                                ..+...

00022406 <smpiScStateTblCalcDHKey>:
   22406:	002a1418 13060000                                ..*...

0002240c <smpiScStateTblOobWaitRand>:
   2240c:	00281306 121b0000                                ..(...

00022412 <smpiScStateTblOobSendRand>:
   22412:	0027121b 0c190000                                ..'...

00022418 <smpiScStateTblPasskeyRepeat>:
   22418:	1a210c19 00002913 25101b00                       ..!..)...

00022421 <smpiScStateTblPasskeyCheck>:
   22421:	0025101b 0f060000                                ..%...

00022427 <smpiScStateTblPasskeyRand>:
   22427:	00220f06 0e060000                                .."...

0002242d <smpiScStateTblPasskeyCnf>:
   2242d:	00240e06 0d1b0000                                ..$...

00022433 <smpiScStateTblPasskeyCalc>:
   22433:	00230d1b 0b060000                                ..#...

00022439 <smprScStateTblPasskeyKeypress>:
   22439:	161f0b06 0c04200b 00000021              ..... ..!...

00022445 <smpiScStateTblJwNcWaitUser>:
   22445:	00291315 0a1b0000                                ..)...

0002244b <smpiScStateTblJwNcCheck2>:
   2244b:	001d0a1b 091b0000                                ......

00022451 <smpiScStateTblJwNcCheck1>:
   22451:	001c091b 08060000                                ......

00022457 <smpiScStateTblJwNcRand>:
   22457:	001b0806 07060000                                ......

0002245d <smpiScStateTblJwNcWaitCnf>:
   2245d:	001a0706 06120000                                ......

00022463 <smpiScStateTblAuthSelect>:
   22463:	13190612 11141e0b 00000026              ........&...

0002246f <smpiScStateTblPubKey>:
   2246f:	00180506 04040000                                ......

00022475 <smpiScStateTblLescPin>:
   22475:	00170404 03100000                                ......

0002247b <smpiScStateTblModeSelect>:
   2247b:	11000310 0000001a 10020600                       .........

00022484 <smpiScStateTblPairRsp>:
   22484:	00100206 01010000                                ......

0002248a <smpiScStateTblIdle>:
   2248a:	0a0d0101 00030100 0f00060e 0f000007     ................
   2249a:	00000000 02000a00                                .....

0002249f <smpiScStateTblCommon>:
   2249f:	0702000a 00030200 02000f03 00000000     ................
	...

000224b0 <smpiScActionTbl>:
   224b0:	00012189 00011a13 00011a25 00011a3b     .!......%...;...
   224c0:	0001224b 0001226d 00012275 000122bf     K"..m"..u"..."..
   224d0:	000122e3 0001251d 00012541 00012549     ."...%..A%..I%..
   224e0:	0001256b 0001273d 000127ad 000127c1     k%..='...'...'..
   224f0:	000127eb 00012851 000128a7 00012909     .'..Q(...(...)..
   22500:	0001294d 000129d1 000129ff 00012a29     M)...)...)..)*..
   22510:	00012a25 00012a33 00012a69 00012a95     %*..3*..i*...*..
   22520:	00012ab7 00011b93 00011ab5 00011bd7     .*..............
   22530:	00011c0d 00012af3 00012b6d 00012bad     .....*..m+...+..
   22540:	00012bb3 00012bb7 00012c07 00012c69     .+...+...,..i,..
   22550:	00012cbf 00011c4d 00011cc1 00011d21     .,..M.......!...
   22560:	00011d91 00011e01 00011e6f 00012ce1     ........o....,..
   22570:	00012d0b                                .-..

00022574 <smprScSmIf>:
   22574:	00022614 000227ec 000227da              .&...'...'..

00022580 <CSWTCH.2>:
   22580:	00024e93 00024e9a 00024ea9 00024eb7     .N...N...N...N..
   22590:	00024e89 00024ec1 00024ecf 00024edc     .N...N...N...N..
   225a0:	00024eed 00024efc 00024f0d 00024e89     .N...N...O...N..
   225b0:	00024f1b 00024f29 00024f33 00024f3d     .O..)O..3O..=O..
   225c0:	00024f48 00024f54 00024f64 00024f74     HO..TO..dO..tO..
   225d0:	00024e89 00024f84 00024f93 00024fa4     .N...O...O...O..
   225e0:	00024fb2 00024fbf 00024fcc 00024fd9     .O...O...O...O..
   225f0:	00024fe6 00024ff3 00025000 0002500c     .O...O...P...P..
   22600:	0002501d 0002502e 00025039 00025043     .P...P..9P..CP..
   22610:	0002504e                                NP..

00022614 <smprScStateTbl>:
   22614:	000227bf 000227b9 000227b0 000227a4     .'...'...'...'..
   22624:	000227aa 00022798 00022792 0002278c     .'...'...'...'..
   22634:	00022786 00022780 00022771 0002276b     .'...'..q'..k'..
   22644:	00022765 0002275f 00022759 00022753     e'.._'..Y'..S'..
   22654:	0002274a 0002273e 00022744 00022738     J'..>'..D'..8'..
   22664:	00022732 0002272c 00022726 00022720     2'..,'..&'.. '..
   22674:	0002271a 00022714 0002270b 00022702     .'...'...'...'..
   22684:	000226fc 000226f6 000226f0 000226ea     .&...&...&...&..
   22694:	000226e4 000226db 000226cc 000226bd     .&...&...&...&..
   226a4:	000226a8                                .&..

000226a8 <smprScStateTblAttempts>:
   226a8:	060e000f 00050f24 01000a10 07010003     ....$...........
   226b8:	00000024 33230600                                $....

000226bd <smprScStateTblKeyDist>:
   226bd:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

000226cc <smprScStateTblEncrypt>:
   226cc:	09322308 22030200 03001c00 0b000000              .#2....".......

000226db <smprScStateTblStkCalc>:
   226db:	0d31220b 00000c24 30210b00                       ."1.$....

000226e4 <smprStateTblCnfVerCalc2>:
   226e4:	0030210b 200b0000                                .!0...

000226ea <smprStateTblCnfVerCalc1>:
   226ea:	000b200b 1f060000                                . ....

000226f0 <smprStateTblPairRand>:
   226f0:	000a1f06 1e0b0000                                ......

000226f6 <smprStateTblCnfCalc2>:
   226f6:	00091e0b 1d0b0000                                ......

000226fc <smprStateTblCnfCalc1>:
   226fc:	00081d0b 1c040000                                ......

00022702 <smprStateTblPinPair2>:
   22702:	06071c04 00002f1c 051b0400                       ...../...

0002270b <smprStateTblPinPair1>:
   2270b:	06051b04 0000151b 2e221b00                       .........

00022714 <smprScStateTblDhCalcF6Eb>:
   22714:	002e221b 191b0000                                ."....

0002271a <smprScStateTblDhCalcF6Ea>:
   2271a:	002d191b 181b0000                                ..-...

00022720 <smprScStateTblCalcF5LTK>:
   22720:	002c181b 171b0000                                ..,...

00022726 <smprScStateTblCalcF5MacKey>:
   22726:	002b171b 161b0000                                ..+...

0002272c <smprScStateTblCalcF5TKey>:
   2272c:	002a161b 15180000                                ..*...

00022732 <smprScStateTblCalcDHKey>:
   22732:	00291518 14060000                                ..)...

00022738 <smprScStateTblWaitDhCheck>:
   22738:	00281406 131b0000                                ..(...

0002273e <smprScStateTblOobSendRand>:
   2273e:	0026131b 11060000                                ..&...

00022744 <smprScStateTblOobWaitRand>:
   22744:	00251106 0c190000                                ..%...

0002274a <smprScStateTblPasskeyRepeat>:
   2274a:	1a000c19 00002713 23101b00                       .....'...

00022753 <smprScStateTblPasskeyCheck>:
   22753:	0023101b 0f060000                                ..#...

00022759 <smprScStateTblPasskeyRand>:
   22759:	00220f06 0e1b0000                                .."...

0002275f <smprScStateTblPasskeyCalc>:
   2275f:	00210e1b 0d060000                                ..!...

00022765 <smprScStateTblPasskeyWaitCnf>:
   22765:	001e0d06 0d040000                                ......

0002276b <smprScStateTblPassWaitAuthRsp>:
   2276b:	001f0d04 0a060000                                ......

00022771 <smprScStateTblPassKeyKeypress>:
   22771:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

00022780 <smprScStateTblJwNcWaitUser>:
   22780:	00271315 091b0000                                ..'...

00022786 <smprScStateTblJwNcCalcG2>:
   22786:	0019091b 08060000                                ......

0002278c <smprScStateTblJwNcWaitRand>:
   2278c:	00180806 071b0000                                ......

00022792 <smprScStateTblJwNcSetup>:
   22792:	0017071b 06120000                                ......

00022798 <smprScStateTblAuthSelect>:
   22798:	13160612 12141a0a 00000024              ........$...

000227a4 <smprScStateTblPubKey>:
   227a4:	00040506 03040000                                ......

000227aa <smprScStateTblLescPin>:
   227aa:	00060304 04100000                                ......

000227b0 <smprScStateTblModeSelect>:
   227b0:	11000410 0000001a 14020200                       .........

000227b9 <smprScStateTblApiPairRsp>:
   227b9:	00140202 00050000                                ......

000227bf <smprScStateTblIdle>:
   227bf:	0a100005 00080100 12000912 07130106     ................
   227cf:	00031100 00000f01 0a000000                       ...........

000227da <smprScStateTblCommon>:
   227da:	0702000a 00030200 02000f03 00000000     ................
	...

000227ec <smprScActionTbl>:
   227ec:	00012189 00011a13 00011a25 00011a3b     .!......%...;...
   227fc:	000130d5 00012223 00013085 0001224b     .0..#"...0..K"..
   2280c:	0001226d 00012275 000122bf 000122e3     m"..u"..."..."..
   2281c:	0001251d 0001256b 00012549 00012541     .%..k%..I%..A%..
   2282c:	00012d71 00012d9b 00012da7 00012daf     q-...-...-...-..
   2283c:	00012e21 00012eb1 000130eb 0001312d     !........0..-1..
   2284c:	00013133 00011b93 00011ab5 00011bd7     31..............
   2285c:	00011c0d 00013153 000131a5 000131bb     ....S1...1...1..
   2286c:	00013163 000131d1 000131d5 00013211     c1...1...1...2..
   2287c:	0001327b 00013283 000132f1 00013349     {2...2...2..I3..
   2288c:	00013361 00011cc1 00011d21 00011d91     a3......!.......
   2289c:	00011e01 00011e6f 00013383 00012ed3     ....o....3......
   228ac:	00012ef5 00012f51 00013019 0001305b     ....Q/...0..[0..
   228bc:	00012fb1                                ./..

000228c0 <smprSmIf>:
   228c0:	000228cc 0002299c 0002298a              .(...)...)..

000228cc <smprStateTbl>:
   228cc:	0002296f 00022969 00022960 00022957     o)..i)..`)..W)..
   228dc:	00022951 0002294b 00022945 0002293f     Q)..K)..E)..?)..
   228ec:	00022939 00022930 00022924 00022915     9)..0)..$)...)..
   228fc:	00022900                                .)..

00022900 <smprStateTblAttempts>:
   22900:	060c000f 00050b0c 01000a0e 07010003     ................
   22910:	0000000c 180b0c00                                .....

00022915 <smprStateTblKeyDist>:
   22915:	06180b0c 000e190b 000b030d 08000000              ...............

00022924 <smprStateTblEncrypt>:
   22924:	09170b08 0a030200 00000000              ............

00022930 <smprStateTblStkCalc>:
   22930:	0d160a0b 00000a0c 15090b00                       .........

00022939 <smprStateTblCnfVerCalc2>:
   22939:	0015090b 080b0000                                ......

0002293f <smprStateTblCnfVerCalc1>:
   2293f:	0009080b 07060000                                ......

00022945 <smprStateTblPairRand>:
   22945:	00080706 060b0000                                ......

0002294b <smprStateTblCnfCalc2>:
   2294b:	0007060b 050b0000                                ......

00022951 <smprStateTblCnfCalc1>:
   22951:	0006050b 04040000                                ......

00022957 <smprStateTblPinPair2>:
   22957:	06050404 00001404 04030400                       .........

00022960 <smprStateTblPinPair1>:
   22960:	06040304 00001303 12020200                       .........

00022969 <smprStateTblApiPairRsp>:
   22969:	00120202 00050000                                ......

0002296f <smprStateTblIdle>:
   2296f:	0a0e0005 00080100 10000910 07110106     ................
   2297f:	00030f00 00000f01 0a000000                       ...........

0002298a <smprStateTblCommon>:
   2298a:	0702000a 00030200 02000f03 00000000     ................
	...

0002299c <smprActionTbl>:
   2299c:	00012189 000121bd 000121e3 0001220b     .!...!...!..."..
   229ac:	00012223 0001224b 0001226d 00012275     #"..K"..m"..u"..
   229bc:	000122bf 000122e3 0001251d 00012541     ."..."...%..A%..
   229cc:	00012549 0001256b 00012d71 00012d9b     I%..k%..q-...-..
   229dc:	00012da7 00012daf 00012e21 00012eb1     .-...-..!.......
   229ec:	00012ed3 00012ef5 00012f51 00013019     ........Q/...0..
   229fc:	00012fb1 0001305b                       ./..[0..

00022a04 <fmplIasAl>:
   22a04:	00021e2c 00000002                       ,.......

00022a0c <calc128Zeros>:
	...

00022a1c <gapCar>:
   22a1c:	00021d92 00000000                       ........

00022a24 <gapRpao>:
   22a24:	00021d7c 00000000                       |.......

00022a2c <gattSc>:
   22a2c:	00021e2e 00000000                       ........

00022a34 <gattScCcc>:
   22a34:	00021e46 00000004                       F.......

00022a3c <attCfg>:
   22a3c:	0000000f 041e01e0                       ........

00022a44 <smpCfg>:
   22a44:	07030bb8 00000310                       ........

00022a4c <hciEventMask>:
   22a4c:	02008890 20008000                       ....... 

00022a54 <hciLeEventMask>:
   22a54:	000fffff 00000000                       ........

00022a5c <hciEventMaskPage2>:
   22a5c:	00800000 00000000                       ........

00022a64 <hciEvtParseFcnTbl>:
   22a64:	00000000 0001713d 00017241 0001734d     ....=q..Ar..Ms..
   22a74:	000173af 00017465 00000000 00017493     .s..et.......t..
   22a84:	000174f7 00017557 000175ab 0001764d     .t..Wu...u..Mv..
   22a94:	000176ad 00017703 00017759 000177af     .v...w..Yw...w..
   22aa4:	00017811 00017883 000178bd 00017915     .x...x...x...y..
   22ab4:	00017939 000179cf 000179fd 00017a2b     9y...y...y..+z..
   22ac4:	00017a59 00017a95 00017ad1 0001795f     Yz...z...z.._y..
   22ad4:	00017997 00017aff 00017b55 00017bab     .y...z..U{...{..
   22ae4:	00017c19 00017c47 00017c9d 00017d4b     .|..G|...|..K}..
   22af4:	00017e0d 00017ecf 00017f07 00017f3f     .~...~......?...
   22b04:	00017f95 00017fd7 00018045 00018073     ........E...s...
   22b14:	00000000 00018381 0001839b 00018409     ................
   22b24:	00018449 00000000 000185ef 00000000     I...............
   22b34:	000185c9 000185c9 000185c9 000185c9     ................
   22b44:	000185c9                                ....

00022b48 <hciEvtCbackLen>:
   22b48:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   22b58:	44460610 06060606 16060c0c 0a08080e     ..FD............
   22b68:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   22b78:	04061016 04040404 00000004              ............

00022b84 <tagAdvCfg>:
   22b84:	afc83a98 00380000 07200280              .:....8... .

00022b90 <tagSlaveCfg>:
   22b90:	00000001                                ....

00022b94 <tagSecCfg>:
   22b94:	00030201 00000000                       ........

00022b9c <tagUpdateCfg>:
   22b9c:	00001770 03200280 02580000 00000005     p..... ...X.....

00022bac <tagDiscCfg>:
   22bac:	00000000                                ....

00022bb0 <tagSmpCfg>:
   22bb0:	07030bb8 00000310                       ........

00022bb8 <tagAppCfg>:
   22bb8:	00000101                                ....

00022bbc <tagAdvDataDisc>:
   22bbc:	02050102 0904000a 00676154              ........Tag.

00022bc8 <tagScanData>:
   22bc8:	18030307 18041802                       ........

00022bd0 <tagGattScCccVal>:
   22bd0:	00000002                                ....

00022bd4 <tagDiscCfgList>:
   22bd4:	00022bd0 00000202 00000000 00000300     .+..............

00022be4 <tagCccSet>:
   22be4:	00020013 00000001                       ........

00022bec <gapValSvc>:
   22bec:	00021800                                         ..

00022bee <gapLenSvc>:
   22bee:	05020002                                         ..

00022bf0 <gapValApCh>:
   22bf0:	01000502 0005002a                                ....*.

00022bf6 <gapLenApCh>:
   22bf6:	00020005                                         ..

00022bf8 <gapLenAp>:
   22bf8:	00000002                                ....

00022bfc <gapValCarCh>:
   22bfc:	a6000702 0005002a                                ....*.

00022c02 <gapLenCarCh>:
   22c02:	00010005                                         ..

00022c04 <gapLenCar>:
   22c04:	00000001                                ....

00022c08 <gapValRpaoCh>:
   22c08:	c9000902 0005002a                                ....*.

00022c0e <gapLenRpaoCh>:
   22c0e:	00010005                                         ..

00022c10 <gapLenRpao>:
   22c10:	00000001                                ....

00022c14 <gapList>:
   22c14:	00021e52 00022bec 00022bee 01000002     R....+...+......
   22c24:	00021e4c 00022bf0 00022bf6 01000005     L....+...+......
   22c34:	00021e36 100050d0 00022bf8 01000002     6....P...+......
   22c44:	00021e4c 00022bfc 00022c02 01000005     L....+...,......
   22c54:	00021d92 100050d4 00022c04 01000001     .....P...,......
   22c64:	00021e4c 00022c08 00022c0e 01000005     L....,...,......
   22c74:	00021d7c 100050d8 00022c10 01000001     |....P...,......

00022c84 <gattValSvc>:
   22c84:	00021801                                         ..

00022c86 <gattLenSvc>:
   22c86:	12200002                                         ..

00022c88 <gattValScCh>:
   22c88:	05001220 0005002a                                 ...*.

00022c8e <gattLenScCh>:
   22c8e:	00010005                                         ..

00022c90 <gattValSc>:
   22c90:	ffff0001                                ....

00022c94 <gattLenSc>:
   22c94:	00020004                                         ..

00022c96 <gattLenScChCcc>:
   22c96:	1e520002                                         ..

00022c98 <gattList>:
   22c98:	00021e52 00022c84 00022c86 01000002     R....,...,......
   22ca8:	00021e4c 00022c88 00022c8e 01000005     L....,...,......
   22cb8:	00021e2e 00022c90 00022c94 00000004     .....,...,......
   22cc8:	00021e46 100050dc 00022c96 11200002     F....P...,.... .

00022cd8 <svcAlLvlUuid>:
   22cd8:	00002a06                                .*..

00022cdc <svcTxPwrUuid>:
   22cdc:	00002a07                                .*..

00022ce0 <llsValSvc>:
   22ce0:	00021803                                         ..

00022ce2 <llsLenSvc>:
   22ce2:	520a0002                                         ..

00022ce4 <llsValAlCh>:
   22ce4:	0600520a 0005002a                                .R..*.

00022cea <llsLenAlCh>:
   22cea:	00010005                                         ..

00022cec <llsLenAl>:
   22cec:	00000001                                ....

00022cf0 <iasValSvc>:
   22cf0:	00021802                                         ..

00022cf2 <iasLenSvc>:
   22cf2:	55040002                                         ..

00022cf4 <iasValAlCh>:
   22cf4:	06005504 0005002a                                .U..*.

00022cfa <iasLenAlCh>:
   22cfa:	00010005                                         ..

00022cfc <iasLenAl>:
   22cfc:	00000001                                ....

00022d00 <txsValSvc>:
   22d00:	00021804                                         ..

00022d02 <txsLenSvc>:
   22d02:	58020002                                         ..

00022d04 <txsValTxCh>:
   22d04:	07005802 0005002a                                .X..*.

00022d0a <txsLenTxCh>:
   22d0a:	00010005                                         ..

00022d0c <txsLenTx>:
   22d0c:	00000001                                ....

00022d10 <pxList>:
   22d10:	00021e52 00022ce0 00022ce2 01000002     R....,...,......
   22d20:	00021e4c 00022ce4 00022cea 01000005     L....,...,......
   22d30:	00022cd8 100050e0 00022cec 11000001     .,...P...,......
   22d40:	00021e52 00022cf0 00022cf2 01000002     R....,...,......
   22d50:	00021e4c 00022cf4 00022cfa 01000005     L....,...,......
   22d60:	00022cd8 100050e4 00022cfc 10020001     .,...P...,......
   22d70:	00021e52 00022d00 00022d02 01000002     R....-...-......
   22d80:	00021e4c 00022d04 00022d0a 01000005     L....-...-......
   22d90:	00022cdc 100050e8 00022d0c 01000001     .,...P...-......

00022da0 <appReqActCfg>:
   22da0:	00000000                                ....

00022da4 <ccitt_table>:
   22da4:	80050000 000a800f 001e801b 80110014     ................
   22db4:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   22dc4:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   22dd4:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   22de4:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   22df4:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   22e04:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   22e14:	00968093 8099009c 808d0088 00828087     ................
   22e24:	01868183 8189018c 819d0198 01928197     ................
   22e34:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   22e44:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   22e54:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   22e64:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   22e74:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   22e84:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   22e94:	81150110 011a811f 010e810b 81010104     ................
   22ea4:	03068303 8309030c 831d0318 03128317     ................
   22eb4:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   22ec4:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   22ed4:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   22ee4:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   22ef4:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   22f04:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   22f14:	83950390 039a839f 038e838b 83810384     ................
   22f24:	82850280 028a828f 029e829b 82910294     ................
   22f34:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   22f44:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   22f54:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   22f64:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   22f74:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   22f84:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   22f94:	02168213 8219021c 820d0208 02028207     ................

00022fa4 <am_ble_buffer_patch_data>:
   22fa4:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   22fb4:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   22fc4:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   22fd4:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   22fe4:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   23020:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   23030:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   23040:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   23050:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   23060:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   23070:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   23080:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   23090:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   230a0:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   230b0:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   230c0:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   230d0:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   230e0:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   230f0:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   23100:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   23110:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   23120:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   23130:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   23140:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   23150:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   23160:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   23170:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   23180:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   23190:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   231a0:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   231b0:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   231c0:	8f809011 9812900e 900d3008 30309812     .........0....00
   231d0:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   231e0:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   231f0:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   23200:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   23210:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   23220:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   23230:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   23240:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   23250:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   23260:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   23270:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   23280:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   23290:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   232b0:	00000021 00000000 00000001 00000000     !...............
   232c0:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   232d0:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   232e0:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   232f0:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   23300:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   23310:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   23320:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   23330:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   23340:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   23350:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   23360:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   23370:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   23380:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   23390:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   233a0:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   233b0:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   233c0:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   233d0:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   233e0:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   233f0:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   23400:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   23410:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   23420:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   23430:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   23440:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   23450:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   23460:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   23470:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   23480:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   23490:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   234a0:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   234b0:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   234c0:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   234d0:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   234e0:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   234f0:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   23500:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   23510:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   23520:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   23530:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   23540:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   23550:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   23560:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   23570:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   23580:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   23590:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   235a0:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   235b0:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   235c0:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   235d0:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   235e0:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   235f0:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   23600:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   23610:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   23620:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   23630:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   23640:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   23650:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   23660:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   23670:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   23680:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   23690:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   236a0:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   236b0:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   236c0:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   236d0:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   236e0:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   236f0:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   23700:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   23710:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   23720:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   23730:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   23740:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   23750:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   23760:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   23770:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   23780:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   23790:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   237a0:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   237b0:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   237c0:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   237d0:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   237e0:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   237f0:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   23800:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   23810:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   23820:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   23830:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   23840:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   23850:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   23860:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   23870:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   23880:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   23890:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   238a0:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   238b0:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   238c0:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   238d0:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   238e0:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   238f0:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   23900:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   23910:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   23920:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   23930:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   23940:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   23950:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   23960:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   23970:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   23980:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   23990:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   239a0:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   239b0:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   239c0:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   239d0:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   239e0:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   239f0:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   23a00:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   23a10:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   23a20:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   23a30:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   23a40:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   23a50:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   23a60:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   23a70:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   23a80:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   23a90:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   23aa0:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   23ab0:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   23ac0:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   23ad0:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   23ae0:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   23af0:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   23b00:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   23b10:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   23b20:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   23b30:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   23b40:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   23b50:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   23b60:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   23b70:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   23b80:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   23b90:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   23ba0:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   23bb0:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   23bc0:	00010341 50804000 000093a5 00000466     A....@.P....f...
   23bd0:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   23be0:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   23bf0:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   23c00:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   23c10:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   23c20:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   23c30:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   23c40:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   23c50:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   23c60:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   23c70:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   23c80:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   23c90:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   23ca0:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   23cb0:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   23cc0:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   23cd0:	00004770 20006780 20006054              pG...g. T`. 

00023cdc <am_hal_ble_num_default_patches>:
   23cdc:	00000003                                ....

00023ce0 <am_ble_performance_copy_patch_data>:
   23ce0:	006e1100 00000400 00000000 01c50101     ..n.............
   23cf0:	00000039 00000000 00000000 00000000     9...............
   23d00:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   23d10:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   23d20:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   23d30:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   23d40:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   23d50:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   23d60:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   23d70:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   23d80:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   23d90:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   23da0:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   23db0:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   23dc0:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   23dd0:	f000e00a e007fb94 b2c09801 fac7f000     ................
   23de0:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   23df0:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   23e00:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   23e10:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   23e20:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   23e30:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   23e40:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   23e50:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   23e60:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   23e70:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   23e80:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   23e90:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   23ea0:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   23eb0:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   23ec0:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   23ed0:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   23ee0:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   23ef0:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   23f00:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   23f10:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   23f20:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   23f30:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   23f40:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   23f50:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   23f60:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   23f70:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   23f80:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   23f90:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   23fa0:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   23fb0:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   23fc0:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   23fd0:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   23fe0:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   23ff0:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   24000:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   24010:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   24020:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   24030:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   24040:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   24050:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   24060:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   24070:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   24080:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   24090:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   240a0:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   240b0:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   240c0:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   240d0:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   240e0:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   240f0:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   24100:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   24110:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   24120:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   24130:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   24140:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   24150:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   24160:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   24170:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   24180:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   24190:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   241a0:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   241b0:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   241c0:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   241d0:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   241e0:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   241f0:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   24200:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   24210:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   24220:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   24230:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   24240:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   24250:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   24260:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   24270:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   24280:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   24290:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   242a0:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   242b0:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   242c0:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   242d0:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   242e0:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   242f0:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   24300:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   24310:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   24320:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   24330:	00400000 00804580 021e4580 00030000     ..@..E...E......
   24340:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   24350:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   24360:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   24370:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   24380:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   24390:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   243a0:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   243b0:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   243c0:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   243d0:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   243e0:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   243f0:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   24400:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   24410:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   24420:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   24430:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   24440:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   24450:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   24460:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   24470:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   24480:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   24490:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   244a0:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   244b0:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   244c0:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   244d0:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   244e0:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   244f0:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   24500:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   24510:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   24520:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   24530:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   24540:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   24550:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   24560:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   24570:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   24580:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   24590:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   245a0:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   245b0:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   245c0:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   245d0:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   245e0:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   245f0:	00000001                                ....

000245f4 <am_hal_ble_num_default_patches_b0>:
   245f4:	00000003                                ....

000245f8 <am_hal_cachectrl_defaults>:
   245f8:	00000308                                ....

000245fc <g_ui8TmrClkSrcMask>:
   245fc:	01030f0f 00000101 00000000 00000000     ................
   2460c:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................
   2461c:	6d695443 69207265 7265746e 74707572     CTimer interrupt
   2462c:	6d756e20 20726562 2074756f 7220666f      number out of r
   2463c:	65676e61 0000002e 612f2e2e 61685f6d     ange....../am_ha
   2464c:	74635f6c 72656d69 0000632e              l_ctimer.c..

00024658 <g_ui32TMRAddrTbl>:
   24658:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   24668:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

00024678 <g_AM_HAL_GPIO_INPUT>:
   24678:	00001003                                ....

0002467c <g_ui8Bit76Capabilities>:
   2467c:	02800101 80010180 80800101 80808080     ................
   2468c:	80808080 80808008 01800180 80808080     ................
   2469c:	80808080 01800402 01010401 80808080     ................
   246ac:	00000101                                ....

000246b0 <g_ui8NCEtable>:
   246b0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   246c0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   246d0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   246e0:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   246f0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   24700:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   24710:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   24720:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   24730:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   24740:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   24750:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   24760:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   24770:	32221202 43231303                       .."2..#C

00024778 <g_ui8Inpen>:
   24778:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   24788:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   24798:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   247a8:	00003130                                01..

000247ac <g_AM_HAL_GPIO_DISABLE>:
   247ac:	00000003                                ....

000247b0 <g_AM_HAL_GPIO_OUTPUT>:
   247b0:	00000403                                ....

000247b4 <g_ui8nCEpins>:
   247b4:	02070707 00080802 01020202 01010101     ................
   247c4:	01010101 01010101 01010101 01010101     ................
   247d4:	01010101 08010101 01010008 01010101     ................
   247e4:	00000101                                ....

000247e8 <g_am_hal_mcuctrl_flash_size>:
   247e8:	00004000 00008000 00010000 00020000     .@..............
   247f8:	00040000 00080000 00100000 00200000     .............. .
   24808:	00180000 00000000 00000000 00000000     ................
	...

00024828 <g_am_hal_mcuctrl_sram_size>:
   24828:	00004000 00008000 00010000 00020000     .@..............
   24838:	00040000 00080000 00100000 00060000     ................
   24848:	000c0000 00000000 00000000 00000000     ................
	...

00024868 <am_hal_pwrctrl_peripheral_control>:
	...
   24874:	00000001 00000004 00000004 00000002     ................
   24884:	00000008 00000008 00000004 00000008     ................
   24894:	00000008 00000008 00000008 00000008     ................
   248a4:	00000010 00000010 00000010 00000020     ............ ...
   248b4:	00000010 00000010 00000040 00000010     ........@.......
   248c4:	00000010 00000080 00000004 00000004     ................
   248d4:	00000100 00000004 00000004 00000200     ................
   248e4:	00000020 00000020 00000400 00000004      ... ...........
   248f4:	00000004 00000800 00000040 00000040     ........@...@...
   24904:	00001000 00000080 00000080 00002000     ............. ..
   24914:	00000100 00000100                       ........

0002491c <am_hal_pwrctrl_memory_control>:
	...
   24930:	00000001 00000001 00000001 00001fff     ................
   24940:	00001fff 00000003 00000003 00000003     ................
   24950:	00001fff 00001fff 00000007 00000007     ................
   24960:	00000007 00001fff 00001fff 0000000f     ................
   24970:	0000000f 0000000f 00001fff 00001fff     ................
   24980:	0000001f 0000001f 0000001f 00001fff     ................
   24990:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
   249a0:	00001fff 00001fff 0000007f 0000007f     ................
   249b0:	0000007f 00001fff 00001fff 000000ff     ................
   249c0:	000000ff 000000ff 00001fff 00001fff     ................
   249d0:	000001ff 000001ff 000001ff 00001fff     ................
   249e0:	00001fff 000003ff 000003ff 000003ff     ................
   249f0:	00001fff 00001fff 000007ff 000007ff     ................
   24a00:	000007ff 00001fff 00001fff 00000fff     ................
   24a10:	00000fff 00000fff 00001fff 00001fff     ................
   24a20:	00001fff 00001fff 00001fff 00001fff     ................
   24a30:	00001fff 00002000 00002000 00002000     ..... ... ... ..
   24a40:	00006000 00006000 00006000 00006000     .`...`...`...`..
   24a50:	00006000 00006000 00006000 c0000000     .`...`...`......
   24a60:	00000000 c0000000 c0000000 00000000     ................
   24a70:	c0007fff 00007fff c0007fff c0007fff     ................
   24a80:	00007fff                                ....

00024a84 <curve_secp256r1>:
   24a84:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   24aa0:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   24ab0:	a7179e84 bce6faad ffffffff ffffffff     ................
   24ac0:	00000000 ffffffff d898c296 f4a13945     ............E9..
   24ad0:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   24ae0:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   24af0:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   24b00:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   24b10:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   24b20:	aa3a93e7 5ac635d8 000211d1 000209f1     ..:..5.Z........
   24b30:	00020ba1                                ....

00024b34 <g_AM_BSP_GPIO_ITM_SWO>:
   24b34:	00000002 5f495041 52494150 5145525f     ....API_PAIR_REQ
   24b44:	49504100 4e41435f 5f4c4543 00514552     .API_CANCEL_REQ.
   24b54:	5f495041 48545541 5053525f 49504100     API_AUTH_RSP.API
   24b64:	4345535f 54495255 45525f59 4d430051     _SECURITY_REQ.CM
   24b74:	4b505f44 4d430054 41505f44 4e495249     D_PKT.CMD_PAIRIN
   24b84:	41465f47 44454c49 5f4d4400 52434e45     G_FAILED.DM_ENCR
   24b94:	5f545059 4c504d43 5f4d4400 52434e45     YPT_CMPL.DM_ENCR
   24ba4:	5f545059 4c494146 44004445 4f435f4d     YPT_FAILED.DM_CO
   24bb4:	435f4e4e 45534f4c 46535700 5345415f     NN_CLOSE.WSF_AES
   24bc4:	504d435f 4e49004c 45535f54 4e5f444e     _CMPL.INT_SEND_N
   24bd4:	5f545845 0059454b 5f544e49 5f58414d     EXT_KEY.INT_MAX_
   24be4:	45545441 5354504d 544e4900 4941505f     ATTEMPTS.INT_PAI
   24bf4:	474e4952 504d435f 4e49004c 49545f54     RING_CMPL.INT_TI
   24c04:	554f454d 4e490054 454c5f54 49004353     MEOUT.INT_LESC.I
   24c14:	4c5f544e 43414745 4e490059 574a5f54     NT_LEGACY.INT_JW
   24c24:	00434e5f 5f544e49 53534150 0059454b     _NC.INT_PASSKEY.
   24c34:	5f544e49 00424f4f 5f495041 52455355     INT_OOB.API_USER
   24c44:	4e4f435f 4d524946 49504100 4553555f     _CONFIRM.API_USE
   24c54:	454b5f52 45525059 41005353 4b5f4950     R_KEYPRESS.API_K
   24c64:	52505945 5f535345 4c504d43 46535700     EYPRESS_CMPL.WSF
   24c74:	4343455f 504d435f 4e49004c 4b505f54     _ECC_CMPL.INT_PK
   24c84:	58454e5f 4e490054 4b505f54 504d435f     _NEXT.INT_PK_CMP
   24c94:	5357004c 4d435f46 435f4341 004c504d     L.WSF_CMAC_CMPL.
   24ca4:	435f4844 4b434548 4941465f 4552554c     DH_CHECK_FAILURE
   24cb4:	555f4900 6f6e6b6e 49006e77 4c44495f     .I_Unknown.I_IDL
   24cc4:	5f490045 45444f4d 4c45535f 00544345     E.I_MODE_SELECT.
   24cd4:	454c5f49 505f4353 49004e49 4255505f     I_LESC_PIN.I_PUB
   24ce4:	59454b5f 415f4900 5f485455 454c4553     _KEY.I_AUTH_SELE
   24cf4:	49005443 4e574a5f 41575f43 435f5449     CT.I_JWNC_WAIT_C
   24d04:	4900464e 4e574a5f 41525f43 4900444e     NF.I_JWNC_RAND.I
   24d14:	4e574a5f 48435f43 5f4b4345 5f490031     _JWNC_CHECK_1.I_
   24d24:	434e574a 4548435f 325f4b43 4a5f4900     JWNC_CHECK_2.I_J
   24d34:	5f434e57 54494157 4553555f 5f490052     WNC_WAIT_USER.I_
   24d44:	4b5f4b50 52505945 00535345 4b505f49     PK_KEYPRESS.I_PK
   24d54:	4c41435f 5f490043 435f4b50 4900464e     _CALC.I_PK_CNF.I
   24d64:	5f4b505f 444e4152 505f4900 48435f4b     _PK_RAND.I_PK_CH
   24d74:	004b4345 4b505f49 5045525f 00544145     ECK.I_PK_REPEAT.
   24d84:	4f4f5f49 45535f42 525f444e 00444e41     I_OOB_SEND_RAND.
   24d94:	4f4f5f49 41575f42 525f5449 00444e41     I_OOB_WAIT_RAND.
   24da4:	41435f49 465f434c 4b545f35 49005945     I_CALC_F5_TKEY.I
   24db4:	4c41435f 35465f43 43414d5f 0059454b     _CALC_F5_MACKEY.
   24dc4:	41435f49 465f434c 544c5f35 5f49004b     I_CALC_F5_LTK.I_
   24dd4:	434c4143 5f36465f 49004145 4c41435f     CALC_F6_EA.I_CAL
   24de4:	36465f43 0042455f 45565f49 59464952     C_F6_EB.I_VERIFY
   24df4:	5f48445f 43454843 5f49004b 4147454c     _DH_CHECK.I_LEGA
   24e04:	505f5943 49004e49 464e435f 4c41435f     CY_PIN.I_CNF_CAL
   24e14:	00315f43 4e435f49 41435f46 325f434c     C_1.I_CNF_CALC_2
   24e24:	505f4900 5f524941 00464e43 41505f49     .I_PAIR_CNF.I_PA
   24e34:	525f5249 00444e41 4e435f49 45565f46     IR_RAND.I_CNF_VE
   24e44:	41435f52 315f434c 435f4900 565f464e     R_CALC_1.I_CNF_V
   24e54:	435f5245 5f434c41 5f490032 5f4b5453     ER_CALC_2.I_STK_
   24e64:	434c4143 455f4900 5952434e 49005450     CALC.I_ENCRYPT.I
   24e74:	59454b5f 5349445f 5f490054 45545441     _KEY_DIST.I_ATTE
   24e84:	5354504d 555f5200 6f6e6b6e 52006e77     MPTS.R_Unknown.R
   24e94:	4c44495f 5f520045 5f495041 52494150     _IDLE.R_API_PAIR
   24ea4:	5053525f 4d5f5200 5f45444f 454c4553     _RSP.R_MODE_SELE
   24eb4:	52005443 4255505f 59454b5f 415f5200     CT.R_PUB_KEY.R_A
   24ec4:	5f485455 454c4553 52005443 4e574a5f     UTH_SELECT.R_JWN
   24ed4:	45535f43 00505554 574a5f52 575f434e     C_SETUP.R_JWNC_W
   24ee4:	5f544941 444e4152 4a5f5200 5f434e57     AIT_RAND.R_JWNC_
   24ef4:	434c4143 0032475f 574a5f52 575f434e     CALC_G2.R_JWNC_W
   24f04:	5f544941 52455355 505f5200 454b5f4b     AIT_USER.R_PK_KE
   24f14:	45525059 52005353 5f4b505f 54494157     YPRESS.R_PK_WAIT
   24f24:	464e435f 505f5200 41435f4b 5200434c     _CNF.R_PK_CALC.R
   24f34:	5f4b505f 444e4152 505f5200 48435f4b     _PK_RAND.R_PK_CH
   24f44:	004b4345 4b505f52 5045525f 00544145     ECK.R_PK_REPEAT.
   24f54:	4f4f5f52 45535f42 525f444e 00444e41     R_OOB_SEND_RAND.
   24f64:	4f4f5f52 41575f42 525f5449 00444e41     R_OOB_WAIT_RAND.
   24f74:	41575f52 445f5449 48435f48 004b4345     R_WAIT_DH_CHECK.
   24f84:	41435f52 465f434c 4b545f35 52005945     R_CALC_F5_TKEY.R
   24f94:	4c41435f 35465f43 43414d5f 0059454b     _CALC_F5_MACKEY.
   24fa4:	41435f52 465f434c 544c5f35 5f52004b     R_CALC_F5_LTK.R_
   24fb4:	434c4143 5f36465f 52004145 4c41435f     CALC_F6_EA.R_CAL
   24fc4:	36465f43 0042455f 49505f52 41505f4e     C_F6_EB.R_PIN_PA
   24fd4:	315f5249 505f5200 505f4e49 5f524941     IR_1.R_PIN_PAIR_
   24fe4:	5f520032 5f464e43 434c4143 5200315f     2.R_CNF_CALC_1.R
   24ff4:	464e435f 4c41435f 00325f43 41505f52     _CNF_CALC_2.R_PA
   25004:	525f5249 00444e41 4e435f52 45565f46     IR_RAND.R_CNF_VE
   25014:	41435f52 315f434c 435f5200 565f464e     R_CALC_1.R_CNF_V
   25024:	435f5245 5f434c41 5f520032 5f4b5453     ER_CALC_2.R_STK_
   25034:	434c4143 455f5200 5952434e 52005450     CALC.R_ENCRYPT.R
   25044:	59454b5f 5349445f 5f520054 45545441     _KEY_DIST.R_ATTE
   25054:	5354504d 00000000                       MPTS....
