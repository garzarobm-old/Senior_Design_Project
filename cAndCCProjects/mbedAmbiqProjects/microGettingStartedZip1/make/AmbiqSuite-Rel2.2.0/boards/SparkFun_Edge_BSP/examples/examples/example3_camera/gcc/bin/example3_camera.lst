
bin/example3_camera.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 01 d2 00 00 69 d2 00 00 35 c3 00 00     ........i...5...
    c010:	35 c3 00 00 35 c3 00 00 35 c3 00 00 00 00 00 00     5...5...5.......
	...
    c02c:	6f d2 00 00 6f d2 00 00 00 00 00 00 6f d2 00 00     o...o.......o...
    c03c:	6f d2 00 00 6f d2 00 00 6f d2 00 00 6f d2 00 00     o...o...o...o...
    c04c:	6f d2 00 00 6f d2 00 00 6f d2 00 00 6f d2 00 00     o...o...o...o...
    c05c:	6f d2 00 00 6f d2 00 00 6f d2 00 00 6f d2 00 00     o...o...o...o...
    c06c:	6f d2 00 00 6f d2 00 00 a1 c1 00 00 6f d2 00 00     o...o.......o...
    c07c:	6f d2 00 00 6f d2 00 00 6f d2 00 00 6f d2 00 00     o...o...o...o...
    c08c:	6f d2 00 00 6f d2 00 00 6f d2 00 00 6f d2 00 00     o...o...o...o...
    c09c:	6f d2 00 00 6f d2 00 00 6f d2 00 00 6f d2 00 00     o...o...o...o...
    c0ac:	6f d2 00 00 6f d2 00 00 6f d2 00 00 6f d2 00 00     o...o...o...o...
    c0bc:	6f d2 00 00                                         o...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <am_gpio_isr>:
static int  boardSetup(void);
static void boardTeardown(void);

void
am_gpio_isr(void)
{
    c1a0:	b590      	push	{r4, r7, lr}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    uint64_t ui64IntMask = 0x00;
    c1a6:	f04f 0300 	mov.w	r3, #0
    c1aa:	f04f 0400 	mov.w	r4, #0
    c1ae:	e9c7 3400 	strd	r3, r4, [r7]

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_gpio_interrupt_status_get(false, &ui64IntMask))
    c1b2:	463b      	mov	r3, r7
    c1b4:	4619      	mov	r1, r3
    c1b6:	2000      	movs	r0, #0
    c1b8:	f001 fd0a 	bl	dbd0 <am_hal_gpio_interrupt_status_get>
    c1bc:	4603      	mov	r3, r0
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d002      	beq.n	c1c8 <am_gpio_isr+0x28>
    {
        am_util_stdio_printf("Error reading interrupt status\n");
    c1c2:	480c      	ldr	r0, [pc, #48]	; (c1f4 <am_gpio_isr+0x54>)
    c1c4:	f000 ffee 	bl	d1a4 <am_util_stdio_printf>
    }

    //
    // Clear the GPIO interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_gpio_interrupt_clear(ui64IntMask))
    c1c8:	e9d7 3400 	ldrd	r3, r4, [r7]
    c1cc:	4618      	mov	r0, r3
    c1ce:	4621      	mov	r1, r4
    c1d0:	f001 fce0 	bl	db94 <am_hal_gpio_interrupt_clear>
    c1d4:	4603      	mov	r3, r0
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d002      	beq.n	c1e0 <am_gpio_isr+0x40>
    {
        am_util_stdio_printf("Error clearing interrupt status\n");
    c1da:	4807      	ldr	r0, [pc, #28]	; (c1f8 <am_gpio_isr+0x58>)
    c1dc:	f000 ffe2 	bl	d1a4 <am_util_stdio_printf>
    }

    // Add your interrupt hooks here!
    edge_cam_isr( ui64IntMask );
    c1e0:	e9d7 3400 	ldrd	r3, r4, [r7]
    c1e4:	4618      	mov	r0, r3
    c1e6:	4621      	mov	r1, r4
    c1e8:	f001 f8ee 	bl	d3c8 <edge_cam_isr>
}
    c1ec:	bf00      	nop
    c1ee:	370c      	adds	r7, #12
    c1f0:	46bd      	mov	sp, r7
    c1f2:	bd90      	pop	{r4, r7, pc}
    c1f4:	0000e924 	.word	0x0000e924
    c1f8:	0000e944 	.word	0x0000e944

0000c1fc <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b082      	sub	sp, #8
    c200:	af00      	add	r7, sp, #0
    boardSetup();
    c202:	f000 f83d 	bl	c280 <boardSetup>

    am_util_stdio_terminal_clear();
    c206:	f000 fff1 	bl	d1ec <am_util_stdio_terminal_clear>

    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c20a:	4816      	ldr	r0, [pc, #88]	; (c264 <main+0x68>)
    c20c:	f000 ffca 	bl	d1a4 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c210:	4a15      	ldr	r2, [pc, #84]	; (c268 <main+0x6c>)
    c212:	4916      	ldr	r1, [pc, #88]	; (c26c <main+0x70>)
    c214:	4816      	ldr	r0, [pc, #88]	; (c270 <main+0x74>)
    c216:	f000 ffc5 	bl	d1a4 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (UART)\r\n");
    c21a:	4816      	ldr	r0, [pc, #88]	; (c274 <main+0x78>)
    c21c:	f000 ffc2 	bl	d1a4 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c220:	4815      	ldr	r0, [pc, #84]	; (c278 <main+0x7c>)
    c222:	f001 f927 	bl	d474 <am_bsp_uart_string_print>

    // camResult
    am_util_stdio_printf("camera init result: %x\r\n", cameraSetup());
    c226:	f001 f843 	bl	d2b0 <cameraSetup>
    c22a:	4603      	mov	r3, r0
    c22c:	4619      	mov	r1, r3
    c22e:	4813      	ldr	r0, [pc, #76]	; (c27c <main+0x80>)
    c230:	f000 ffb8 	bl	d1a4 <am_util_stdio_printf>
    * Read samples in polling mode (no int)
    */
    while(1)
    {
        // Use Button 14 to break the loop and shut down
        uint32_t pin14Val = 1; 
    c234:	2301      	movs	r3, #1
    c236:	607b      	str	r3, [r7, #4]
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c238:	1d3b      	adds	r3, r7, #4
    c23a:	461a      	mov	r2, r3
    c23c:	2100      	movs	r1, #0
    c23e:	200e      	movs	r0, #14
    c240:	f001 fc06 	bl	da50 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c244:	687b      	ldr	r3, [r7, #4]
    c246:	2b00      	cmp	r3, #0
    c248:	d1f4      	bne.n	c234 <main+0x38>
        // am_util_stdio_printf("Clkgen status: SysclkFreq - %d, eRTCOSC - %d, xtalfail %d\r\n", rxClkStat.ui32SysclkFreq, rxClkStat.eRTCOSC, rxClkStat.bXtalFailure);

    }

    // Turn off leds
    boardTeardown();
    c24a:	f000 f85b 	bl	c304 <boardTeardown>

    // Disable debug
    am_bsp_debug_printf_disable();
    c24e:	f001 f967 	bl	d520 <am_bsp_debug_printf_disable>
    
    // Go to Deep Sleep.
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c252:	2001      	movs	r0, #1
    c254:	f001 fe98 	bl	df88 <am_hal_sysctrl_sleep>
    c258:	2300      	movs	r3, #0
}
    c25a:	4618      	mov	r0, r3
    c25c:	3708      	adds	r7, #8
    c25e:	46bd      	mov	sp, r7
    c260:	bd80      	pop	{r7, pc}
    c262:	bf00      	nop
    c264:	0000e968 	.word	0x0000e968
    c268:	0000e984 	.word	0x0000e984
    c26c:	0000e990 	.word	0x0000e990
    c270:	0000e99c 	.word	0x0000e99c
    c274:	0000e9b4 	.word	0x0000e9b4
    c278:	0000e9e0 	.word	0x0000e9e0
    c27c:	0000e9f0 	.word	0x0000e9f0

0000c280 <boardSetup>:

static int boardSetup(void)
{
    c280:	b580      	push	{r7, lr}
    c282:	af00      	add	r7, sp, #0
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c284:	2100      	movs	r1, #0
    c286:	2000      	movs	r0, #0
    c288:	f001 f9e2 	bl	d650 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c28c:	4819      	ldr	r0, [pc, #100]	; (c2f4 <boardSetup+0x74>)
    c28e:	f001 f9ab 	bl	d5e8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c292:	f001 f9d3 	bl	d63c <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c296:	f001 f911 	bl	d4bc <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c29a:	f001 f977 	bl	d58c <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c29e:	4b16      	ldr	r3, [pc, #88]	; (c2f8 <boardSetup+0x78>)
    c2a0:	6819      	ldr	r1, [r3, #0]
    c2a2:	202e      	movs	r0, #46	; 0x2e
    c2a4:	f001 fa94 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c2a8:	4b13      	ldr	r3, [pc, #76]	; (c2f8 <boardSetup+0x78>)
    c2aa:	6819      	ldr	r1, [r3, #0]
    c2ac:	2025      	movs	r0, #37	; 0x25
    c2ae:	f001 fa8f 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c2b2:	4b11      	ldr	r3, [pc, #68]	; (c2f8 <boardSetup+0x78>)
    c2b4:	6819      	ldr	r1, [r3, #0]
    c2b6:	202c      	movs	r0, #44	; 0x2c
    c2b8:	f001 fa8a 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c2bc:	4b0e      	ldr	r3, [pc, #56]	; (c2f8 <boardSetup+0x78>)
    c2be:	6819      	ldr	r1, [r3, #0]
    c2c0:	202f      	movs	r0, #47	; 0x2f
    c2c2:	f001 fa85 	bl	d7d0 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c2c6:	4b0d      	ldr	r3, [pc, #52]	; (c2fc <boardSetup+0x7c>)
    c2c8:	6819      	ldr	r1, [r3, #0]
    c2ca:	200e      	movs	r0, #14
    c2cc:	f001 fa80 	bl	d7d0 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c2d0:	4b0b      	ldr	r3, [pc, #44]	; (c300 <boardSetup+0x80>)
    c2d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c2d6:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c2d8:	4b09      	ldr	r3, [pc, #36]	; (c300 <boardSetup+0x80>)
    c2da:	2220      	movs	r2, #32
    c2dc:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c2de:	4b08      	ldr	r3, [pc, #32]	; (c300 <boardSetup+0x80>)
    c2e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c2e4:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c2e6:	4b06      	ldr	r3, [pc, #24]	; (c300 <boardSetup+0x80>)
    c2e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c2ec:	601a      	str	r2, [r3, #0]

    return 0;
    c2ee:	2300      	movs	r3, #0
}
    c2f0:	4618      	mov	r0, r3
    c2f2:	bd80      	pop	{r7, pc}
    c2f4:	0000eaa8 	.word	0x0000eaa8
    c2f8:	0000ec1c 	.word	0x0000ec1c
    c2fc:	0000eaac 	.word	0x0000eaac
    c300:	40010094 	.word	0x40010094

0000c304 <boardTeardown>:

static void boardTeardown(void)
{
    c304:	b480      	push	{r7}
    c306:	af00      	add	r7, sp, #0
    // Lights out
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c308:	4b09      	ldr	r3, [pc, #36]	; (c330 <boardTeardown+0x2c>)
    c30a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c30e:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c310:	4b07      	ldr	r3, [pc, #28]	; (c330 <boardTeardown+0x2c>)
    c312:	2220      	movs	r2, #32
    c314:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c316:	4b06      	ldr	r3, [pc, #24]	; (c330 <boardTeardown+0x2c>)
    c318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c31c:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c31e:	4b04      	ldr	r3, [pc, #16]	; (c330 <boardTeardown+0x2c>)
    c320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c324:	601a      	str	r2, [r3, #0]
    c326:	bf00      	nop
    c328:	46bd      	mov	sp, r7
    c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c32e:	4770      	bx	lr
    c330:	4001009c 	.word	0x4001009c

0000c334 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c334:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c336:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c33a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c33c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c340:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c344:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c348:	f000 f80a 	bl	c360 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c34c:	bd01      	pop	{r0, pc}
}
    c34e:	bf00      	nop
    c350:	4618      	mov	r0, r3

0000c352 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c352:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c354:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c356:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c358:	4770      	bx	lr
}
    c35a:	bf00      	nop
    c35c:	4618      	mov	r0, r3
	...

0000c360 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c360:	b580      	push	{r7, lr}
    c362:	b096      	sub	sp, #88	; 0x58
    c364:	af00      	add	r7, sp, #0
    c366:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c368:	f107 030c 	add.w	r3, r7, #12
    c36c:	2200      	movs	r2, #0
    c36e:	601a      	str	r2, [r3, #0]
    c370:	605a      	str	r2, [r3, #4]
    c372:	609a      	str	r2, [r3, #8]
    c374:	60da      	str	r2, [r3, #12]
    c376:	611a      	str	r2, [r3, #16]
    c378:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c37a:	2300      	movs	r3, #0
    c37c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c37e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c380:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c382:	4b2e      	ldr	r3, [pc, #184]	; (c43c <am_util_faultisr_collect_data+0xdc>)
    c384:	681b      	ldr	r3, [r3, #0]
    c386:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c38a:	b2db      	uxtb	r3, r3
    c38c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c392:	0a1b      	lsrs	r3, r3, #8
    c394:	b2db      	uxtb	r3, r3
    c396:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c39c:	0c1b      	lsrs	r3, r3, #16
    c39e:	b29b      	uxth	r3, r3
    c3a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3a4:	4b26      	ldr	r3, [pc, #152]	; (c440 <am_util_faultisr_collect_data+0xe0>)
    c3a6:	681b      	ldr	r3, [r3, #0]
    c3a8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3aa:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c3ae:	b2db      	uxtb	r3, r3
    c3b0:	f003 0302 	and.w	r3, r3, #2
    c3b4:	2b00      	cmp	r3, #0
    c3b6:	d005      	beq.n	c3c4 <am_util_faultisr_collect_data+0x64>
    c3b8:	6879      	ldr	r1, [r7, #4]
    c3ba:	2006      	movs	r0, #6
    c3bc:	f7ff ffc9 	bl	c352 <getStackedReg>
    c3c0:	4603      	mov	r3, r0
    c3c2:	e001      	b.n	c3c8 <am_util_faultisr_collect_data+0x68>
    c3c4:	f04f 33ff 	mov.w	r3, #4294967295
    c3c8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3ca:	6879      	ldr	r1, [r7, #4]
    c3cc:	2000      	movs	r0, #0
    c3ce:	f7ff ffc0 	bl	c352 <getStackedReg>
    c3d2:	4603      	mov	r3, r0
    c3d4:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3d6:	6879      	ldr	r1, [r7, #4]
    c3d8:	2001      	movs	r0, #1
    c3da:	f7ff ffba 	bl	c352 <getStackedReg>
    c3de:	4603      	mov	r3, r0
    c3e0:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3e2:	6879      	ldr	r1, [r7, #4]
    c3e4:	2002      	movs	r0, #2
    c3e6:	f7ff ffb4 	bl	c352 <getStackedReg>
    c3ea:	4603      	mov	r3, r0
    c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3ee:	6879      	ldr	r1, [r7, #4]
    c3f0:	2003      	movs	r0, #3
    c3f2:	f7ff ffae 	bl	c352 <getStackedReg>
    c3f6:	4603      	mov	r3, r0
    c3f8:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3fa:	6879      	ldr	r1, [r7, #4]
    c3fc:	2004      	movs	r0, #4
    c3fe:	f7ff ffa8 	bl	c352 <getStackedReg>
    c402:	4603      	mov	r3, r0
    c404:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c406:	6879      	ldr	r1, [r7, #4]
    c408:	2005      	movs	r0, #5
    c40a:	f7ff ffa2 	bl	c352 <getStackedReg>
    c40e:	4603      	mov	r3, r0
    c410:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c412:	6879      	ldr	r1, [r7, #4]
    c414:	2006      	movs	r0, #6
    c416:	f7ff ff9c 	bl	c352 <getStackedReg>
    c41a:	4603      	mov	r3, r0
    c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c41e:	6879      	ldr	r1, [r7, #4]
    c420:	2007      	movs	r0, #7
    c422:	f7ff ff96 	bl	c352 <getStackedReg>
    c426:	4603      	mov	r3, r0
    c428:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c42a:	f107 030c 	add.w	r3, r7, #12
    c42e:	4619      	mov	r1, r3
    c430:	2002      	movs	r0, #2
    c432:	f001 fc5d 	bl	dcf0 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c436:	2300      	movs	r3, #0
    c438:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c43a:	e7fe      	b.n	c43a <am_util_faultisr_collect_data+0xda>
    c43c:	e000ed28 	.word	0xe000ed28
    c440:	e000ed38 	.word	0xe000ed38

0000c444 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c444:	b480      	push	{r7}
    c446:	b083      	sub	sp, #12
    c448:	af00      	add	r7, sp, #0
    c44a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c44c:	4a04      	ldr	r2, [pc, #16]	; (c460 <am_util_stdio_printf_init+0x1c>)
    c44e:	687b      	ldr	r3, [r7, #4]
    c450:	6013      	str	r3, [r2, #0]
}
    c452:	bf00      	nop
    c454:	370c      	adds	r7, #12
    c456:	46bd      	mov	sp, r7
    c458:	f85d 7b04 	ldr.w	r7, [sp], #4
    c45c:	4770      	bx	lr
    c45e:	bf00      	nop
    c460:	10001134 	.word	0x10001134

0000c464 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c464:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c468:	b098      	sub	sp, #96	; 0x60
    c46a:	af00      	add	r7, sp, #0
    c46c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c470:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c474:	f04f 0100 	mov.w	r1, #0
    c478:	f04f 0200 	mov.w	r2, #0
    c47c:	0021      	movs	r1, r4
    c47e:	2200      	movs	r2, #0
    c480:	ea51 0302 	orrs.w	r3, r1, r2
    c484:	f000 80b5 	beq.w	c5f2 <divu64_10+0x18e>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c488:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c48c:	f04f 0500 	mov.w	r5, #0
    c490:	f04f 0600 	mov.w	r6, #0
    c494:	085d      	lsrs	r5, r3, #1
    c496:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
    c49a:	0866      	lsrs	r6, r4, #1
    c49c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c4a0:	f04f 0100 	mov.w	r1, #0
    c4a4:	f04f 0200 	mov.w	r2, #0
    c4a8:	0899      	lsrs	r1, r3, #2
    c4aa:	ea41 7184 	orr.w	r1, r1, r4, lsl #30
    c4ae:	08a2      	lsrs	r2, r4, #2
    c4b0:	eb15 0a01 	adds.w	sl, r5, r1
    c4b4:	eb46 0b02 	adc.w	fp, r6, r2
    c4b8:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
        q64 += (q64 >> 4);
    c4bc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c4c0:	f04f 0100 	mov.w	r1, #0
    c4c4:	f04f 0200 	mov.w	r2, #0
    c4c8:	0919      	lsrs	r1, r3, #4
    c4ca:	ea41 7104 	orr.w	r1, r1, r4, lsl #28
    c4ce:	0922      	lsrs	r2, r4, #4
    c4d0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c4d4:	1858      	adds	r0, r3, r1
    c4d6:	62b8      	str	r0, [r7, #40]	; 0x28
    c4d8:	eb44 0302 	adc.w	r3, r4, r2
    c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4de:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
    c4e2:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 8);
    c4e6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c4ea:	f04f 0100 	mov.w	r1, #0
    c4ee:	f04f 0200 	mov.w	r2, #0
    c4f2:	0a19      	lsrs	r1, r3, #8
    c4f4:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
    c4f8:	0a22      	lsrs	r2, r4, #8
    c4fa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c4fe:	1858      	adds	r0, r3, r1
    c500:	6238      	str	r0, [r7, #32]
    c502:	eb44 0302 	adc.w	r3, r4, r2
    c506:	627b      	str	r3, [r7, #36]	; 0x24
    c508:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    c50c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 16);
    c510:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c514:	f04f 0100 	mov.w	r1, #0
    c518:	f04f 0200 	mov.w	r2, #0
    c51c:	0c19      	lsrs	r1, r3, #16
    c51e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    c522:	0c22      	lsrs	r2, r4, #16
    c524:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c528:	1858      	adds	r0, r3, r1
    c52a:	61b8      	str	r0, [r7, #24]
    c52c:	eb44 0302 	adc.w	r3, r4, r2
    c530:	61fb      	str	r3, [r7, #28]
    c532:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    c536:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 32);
    c53a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c53e:	f04f 0300 	mov.w	r3, #0
    c542:	f04f 0400 	mov.w	r4, #0
    c546:	0013      	movs	r3, r2
    c548:	2400      	movs	r4, #0
    c54a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c54e:	18c8      	adds	r0, r1, r3
    c550:	6138      	str	r0, [r7, #16]
    c552:	eb42 0304 	adc.w	r3, r2, r4
    c556:	617b      	str	r3, [r7, #20]
    c558:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c55c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 >>= 3;
    c560:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c564:	f04f 0300 	mov.w	r3, #0
    c568:	f04f 0400 	mov.w	r4, #0
    c56c:	08cb      	lsrs	r3, r1, #3
    c56e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c572:	08d4      	lsrs	r4, r2, #3
    c574:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        r64 = ui64Val - q64*10;
    c578:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
    c57c:	462b      	mov	r3, r5
    c57e:	4634      	mov	r4, r6
    c580:	f04f 0100 	mov.w	r1, #0
    c584:	f04f 0200 	mov.w	r2, #0
    c588:	00a2      	lsls	r2, r4, #2
    c58a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    c58e:	0099      	lsls	r1, r3, #2
    c590:	460b      	mov	r3, r1
    c592:	4614      	mov	r4, r2
    c594:	195b      	adds	r3, r3, r5
    c596:	eb46 0404 	adc.w	r4, r6, r4
    c59a:	18da      	adds	r2, r3, r3
    c59c:	60ba      	str	r2, [r7, #8]
    c59e:	eb44 0304 	adc.w	r3, r4, r4
    c5a2:	60fb      	str	r3, [r7, #12]
    c5a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c5a8:	4619      	mov	r1, r3
    c5aa:	4622      	mov	r2, r4
    c5ac:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c5b0:	1a58      	subs	r0, r3, r1
    c5b2:	6038      	str	r0, [r7, #0]
    c5b4:	eb64 0302 	sbc.w	r3, r4, r2
    c5b8:	607b      	str	r3, [r7, #4]
    c5ba:	e9d7 3400 	ldrd	r3, r4, [r7]
    c5be:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        return q64 + ((r64 + 6) >> 4);
    c5c2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5c6:	f113 0806 	adds.w	r8, r3, #6
    c5ca:	f144 0900 	adc.w	r9, r4, #0
    c5ce:	f04f 0300 	mov.w	r3, #0
    c5d2:	f04f 0400 	mov.w	r4, #0
    c5d6:	ea4f 1318 	mov.w	r3, r8, lsr #4
    c5da:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    c5de:	ea4f 1419 	mov.w	r4, r9, lsr #4
    c5e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c5e6:	1858      	adds	r0, r3, r1
    c5e8:	6338      	str	r0, [r7, #48]	; 0x30
    c5ea:	eb44 0302 	adc.w	r3, r4, r2
    c5ee:	637b      	str	r3, [r7, #52]	; 0x34
    c5f0:	e02c      	b.n	c64c <divu64_10+0x1e8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c5f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c5f8:	085a      	lsrs	r2, r3, #1
    c5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c5fc:	089b      	lsrs	r3, r3, #2
    c5fe:	4413      	add	r3, r2
    c600:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 4);
    c602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c604:	091b      	lsrs	r3, r3, #4
    c606:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c608:	4413      	add	r3, r2
    c60a:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 8);
    c60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c60e:	0a1b      	lsrs	r3, r3, #8
    c610:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c612:	4413      	add	r3, r2
    c614:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 16);
    c616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c618:	0c1b      	lsrs	r3, r3, #16
    c61a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c61c:	4413      	add	r3, r2
    c61e:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 >>= 3;
    c620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c622:	08db      	lsrs	r3, r3, #3
    c624:	64bb      	str	r3, [r7, #72]	; 0x48
        r32 = ui32Val - q32*10;
    c626:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c628:	4613      	mov	r3, r2
    c62a:	009b      	lsls	r3, r3, #2
    c62c:	4413      	add	r3, r2
    c62e:	005b      	lsls	r3, r3, #1
    c630:	461a      	mov	r2, r3
    c632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c634:	1a9b      	subs	r3, r3, r2
    c636:	647b      	str	r3, [r7, #68]	; 0x44
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c63a:	3306      	adds	r3, #6
    c63c:	091a      	lsrs	r2, r3, #4
    c63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c640:	4413      	add	r3, r2
    c642:	4619      	mov	r1, r3
    c644:	f04f 0200 	mov.w	r2, #0
    c648:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30
    c64c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    }
}
    c650:	4618      	mov	r0, r3
    c652:	4621      	mov	r1, r4
    c654:	3760      	adds	r7, #96	; 0x60
    c656:	46bd      	mov	sp, r7
    c658:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c65c:	4770      	bx	lr

0000c65e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c65e:	b590      	push	{r4, r7, lr}
    c660:	b085      	sub	sp, #20
    c662:	af00      	add	r7, sp, #0
    c664:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c668:	683a      	ldr	r2, [r7, #0]
    c66a:	687b      	ldr	r3, [r7, #4]
    c66c:	4313      	orrs	r3, r2
    c66e:	2b00      	cmp	r3, #0
    c670:	bf0c      	ite	eq
    c672:	2301      	moveq	r3, #1
    c674:	2300      	movne	r3, #0
    c676:	b2db      	uxtb	r3, r3
    c678:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c67a:	e008      	b.n	c68e <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c67c:	e9d7 0100 	ldrd	r0, r1, [r7]
    c680:	f7ff fef0 	bl	c464 <divu64_10>
    c684:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c688:	68fb      	ldr	r3, [r7, #12]
    c68a:	3301      	adds	r3, #1
    c68c:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c68e:	e9d7 3400 	ldrd	r3, r4, [r7]
    c692:	4323      	orrs	r3, r4
    c694:	d1f2      	bne.n	c67c <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c696:	68fb      	ldr	r3, [r7, #12]
}
    c698:	4618      	mov	r0, r3
    c69a:	3714      	adds	r7, #20
    c69c:	46bd      	mov	sp, r7
    c69e:	bd90      	pop	{r4, r7, pc}

0000c6a0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c6a0:	b590      	push	{r4, r7, lr}
    c6a2:	b083      	sub	sp, #12
    c6a4:	af00      	add	r7, sp, #0
    c6a6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c6aa:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	f174 0300 	sbcs.w	r3, r4, #0
    c6b4:	da06      	bge.n	c6c4 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c6b6:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6ba:	425b      	negs	r3, r3
    c6bc:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c6c0:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c6c4:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6c8:	4618      	mov	r0, r3
    c6ca:	4621      	mov	r1, r4
    c6cc:	f7ff ffc7 	bl	c65e <ndigits_in_u64>
    c6d0:	4603      	mov	r3, r0
}
    c6d2:	4618      	mov	r0, r3
    c6d4:	370c      	adds	r7, #12
    c6d6:	46bd      	mov	sp, r7
    c6d8:	bd90      	pop	{r4, r7, pc}

0000c6da <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c6da:	b490      	push	{r4, r7}
    c6dc:	b084      	sub	sp, #16
    c6de:	af00      	add	r7, sp, #0
    c6e0:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c6e4:	683a      	ldr	r2, [r7, #0]
    c6e6:	687b      	ldr	r3, [r7, #4]
    c6e8:	4313      	orrs	r3, r2
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	bf0c      	ite	eq
    c6ee:	2301      	moveq	r3, #1
    c6f0:	2300      	movne	r3, #0
    c6f2:	b2db      	uxtb	r3, r3
    c6f4:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c6f6:	e00e      	b.n	c716 <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    c6f8:	e9d7 1200 	ldrd	r1, r2, [r7]
    c6fc:	f04f 0300 	mov.w	r3, #0
    c700:	f04f 0400 	mov.w	r4, #0
    c704:	090b      	lsrs	r3, r1, #4
    c706:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c70a:	0914      	lsrs	r4, r2, #4
    c70c:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    c710:	68fb      	ldr	r3, [r7, #12]
    c712:	3301      	adds	r3, #1
    c714:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c716:	e9d7 3400 	ldrd	r3, r4, [r7]
    c71a:	4323      	orrs	r3, r4
    c71c:	d1ec      	bne.n	c6f8 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c71e:	68fb      	ldr	r3, [r7, #12]
}
    c720:	4618      	mov	r0, r3
    c722:	3710      	adds	r7, #16
    c724:	46bd      	mov	sp, r7
    c726:	bc90      	pop	{r4, r7}
    c728:	4770      	bx	lr

0000c72a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c72a:	b480      	push	{r7}
    c72c:	b087      	sub	sp, #28
    c72e:	af00      	add	r7, sp, #0
    c730:	6078      	str	r0, [r7, #4]
    c732:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c734:	2300      	movs	r3, #0
    c736:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c738:	2300      	movs	r3, #0
    c73a:	613b      	str	r3, [r7, #16]
    c73c:	2300      	movs	r3, #0
    c73e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c740:	687b      	ldr	r3, [r7, #4]
    c742:	781b      	ldrb	r3, [r3, #0]
    c744:	2b2d      	cmp	r3, #45	; 0x2d
    c746:	d11b      	bne.n	c780 <decstr_to_int+0x56>
    {
        bNeg = true;
    c748:	2301      	movs	r3, #1
    c74a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	3301      	adds	r3, #1
    c750:	607b      	str	r3, [r7, #4]
        uCnt++;
    c752:	68fb      	ldr	r3, [r7, #12]
    c754:	3301      	adds	r3, #1
    c756:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c758:	e012      	b.n	c780 <decstr_to_int+0x56>
    {
        ++uCnt;
    c75a:	68fb      	ldr	r3, [r7, #12]
    c75c:	3301      	adds	r3, #1
    c75e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c760:	693a      	ldr	r2, [r7, #16]
    c762:	4613      	mov	r3, r2
    c764:	009b      	lsls	r3, r3, #2
    c766:	4413      	add	r3, r2
    c768:	005b      	lsls	r3, r3, #1
    c76a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c76c:	687b      	ldr	r3, [r7, #4]
    c76e:	781b      	ldrb	r3, [r3, #0]
    c770:	461a      	mov	r2, r3
    c772:	693b      	ldr	r3, [r7, #16]
    c774:	4413      	add	r3, r2
    c776:	3b30      	subs	r3, #48	; 0x30
    c778:	613b      	str	r3, [r7, #16]
        pcStr++;
    c77a:	687b      	ldr	r3, [r7, #4]
    c77c:	3301      	adds	r3, #1
    c77e:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c780:	687b      	ldr	r3, [r7, #4]
    c782:	781b      	ldrb	r3, [r3, #0]
    c784:	2b2f      	cmp	r3, #47	; 0x2f
    c786:	d903      	bls.n	c790 <decstr_to_int+0x66>
    c788:	687b      	ldr	r3, [r7, #4]
    c78a:	781b      	ldrb	r3, [r3, #0]
    c78c:	2b39      	cmp	r3, #57	; 0x39
    c78e:	d9e4      	bls.n	c75a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c790:	683b      	ldr	r3, [r7, #0]
    c792:	2b00      	cmp	r3, #0
    c794:	d002      	beq.n	c79c <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c796:	683b      	ldr	r3, [r7, #0]
    c798:	68fa      	ldr	r2, [r7, #12]
    c79a:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c79c:	7dfb      	ldrb	r3, [r7, #23]
    c79e:	2b00      	cmp	r3, #0
    c7a0:	d002      	beq.n	c7a8 <decstr_to_int+0x7e>
    c7a2:	693b      	ldr	r3, [r7, #16]
    c7a4:	425b      	negs	r3, r3
    c7a6:	e000      	b.n	c7aa <decstr_to_int+0x80>
    c7a8:	693b      	ldr	r3, [r7, #16]
}
    c7aa:	4618      	mov	r0, r3
    c7ac:	371c      	adds	r7, #28
    c7ae:	46bd      	mov	sp, r7
    c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7b4:	4770      	bx	lr

0000c7b6 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c7b6:	b590      	push	{r4, r7, lr}
    c7b8:	b091      	sub	sp, #68	; 0x44
    c7ba:	af00      	add	r7, sp, #0
    c7bc:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c7c0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c7c2:	2300      	movs	r3, #0
    c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    c7c6:	2300      	movs	r3, #0
    c7c8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c7ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c7ce:	f7ff fe49 	bl	c464 <divu64_10>
    c7d2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c7d6:	68b9      	ldr	r1, [r7, #8]
    c7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c7da:	4613      	mov	r3, r2
    c7dc:	009b      	lsls	r3, r3, #2
    c7de:	4413      	add	r3, r2
    c7e0:	005b      	lsls	r3, r3, #1
    c7e2:	1acb      	subs	r3, r1, r3
    c7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c7e8:	b2da      	uxtb	r2, r3
    c7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7ec:	1c59      	adds	r1, r3, #1
    c7ee:	63f9      	str	r1, [r7, #60]	; 0x3c
    c7f0:	3230      	adds	r2, #48	; 0x30
    c7f2:	b2d2      	uxtb	r2, r2
    c7f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c7f8:	440b      	add	r3, r1
    c7fa:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c7fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c802:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c806:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c80a:	4323      	orrs	r3, r4
    c80c:	d1dd      	bne.n	c7ca <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c810:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c812:	687b      	ldr	r3, [r7, #4]
    c814:	2b00      	cmp	r3, #0
    c816:	d011      	beq.n	c83c <uint64_to_str+0x86>
    {
        while ( ix-- )
    c818:	e008      	b.n	c82c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	1c5a      	adds	r2, r3, #1
    c81e:	607a      	str	r2, [r7, #4]
    c820:	f107 0110 	add.w	r1, r7, #16
    c824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c826:	440a      	add	r2, r1
    c828:	7812      	ldrb	r2, [r2, #0]
    c82a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c82e:	1e5a      	subs	r2, r3, #1
    c830:	63fa      	str	r2, [r7, #60]	; 0x3c
    c832:	2b00      	cmp	r3, #0
    c834:	d1f1      	bne.n	c81a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c836:	687b      	ldr	r3, [r7, #4]
    c838:	2200      	movs	r2, #0
    c83a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c83e:	4618      	mov	r0, r3
    c840:	3744      	adds	r7, #68	; 0x44
    c842:	46bd      	mov	sp, r7
    c844:	bd90      	pop	{r4, r7, pc}

0000c846 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c846:	b490      	push	{r4, r7}
    c848:	b08c      	sub	sp, #48	; 0x30
    c84a:	af00      	add	r7, sp, #0
    c84c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c850:	607a      	str	r2, [r7, #4]
    c852:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c854:	2300      	movs	r3, #0
    c856:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c858:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c85c:	4323      	orrs	r3, r4
    c85e:	d135      	bne.n	c8cc <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c862:	1c5a      	adds	r2, r3, #1
    c864:	62fa      	str	r2, [r7, #44]	; 0x2c
    c866:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c86a:	4413      	add	r3, r2
    c86c:	2230      	movs	r2, #48	; 0x30
    c86e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c872:	e02b      	b.n	c8cc <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    c874:	7a3b      	ldrb	r3, [r7, #8]
    c876:	f003 030f 	and.w	r3, r3, #15
    c87a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c87e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c882:	2b09      	cmp	r3, #9
    c884:	d90a      	bls.n	c89c <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c886:	78fb      	ldrb	r3, [r7, #3]
    c888:	2b00      	cmp	r3, #0
    c88a:	d001      	beq.n	c890 <uint64_to_hexstr+0x4a>
    c88c:	2227      	movs	r2, #39	; 0x27
    c88e:	e000      	b.n	c892 <uint64_to_hexstr+0x4c>
    c890:	2207      	movs	r2, #7
    c892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c896:	4413      	add	r3, r2
    c898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c89e:	1c5a      	adds	r2, r3, #1
    c8a0:	62fa      	str	r2, [r7, #44]	; 0x2c
    c8a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c8a6:	3230      	adds	r2, #48	; 0x30
    c8a8:	b2d2      	uxtb	r2, r2
    c8aa:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c8ae:	440b      	add	r3, r1
    c8b0:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c8b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    c8b8:	f04f 0300 	mov.w	r3, #0
    c8bc:	f04f 0400 	mov.w	r4, #0
    c8c0:	090b      	lsrs	r3, r1, #4
    c8c2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c8c6:	0914      	lsrs	r4, r2, #4
    c8c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    c8cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c8d0:	4323      	orrs	r3, r4
    c8d2:	d1cf      	bne.n	c874 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8d6:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c8d8:	687b      	ldr	r3, [r7, #4]
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d011      	beq.n	c902 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    c8de:	e008      	b.n	c8f2 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    c8e0:	687b      	ldr	r3, [r7, #4]
    c8e2:	1c5a      	adds	r2, r3, #1
    c8e4:	607a      	str	r2, [r7, #4]
    c8e6:	f107 0110 	add.w	r1, r7, #16
    c8ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c8ec:	440a      	add	r2, r1
    c8ee:	7812      	ldrb	r2, [r2, #0]
    c8f0:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8f4:	1e5a      	subs	r2, r3, #1
    c8f6:	62fa      	str	r2, [r7, #44]	; 0x2c
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d1f1      	bne.n	c8e0 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c8fc:	687b      	ldr	r3, [r7, #4]
    c8fe:	2200      	movs	r2, #0
    c900:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c904:	4618      	mov	r0, r3
    c906:	3730      	adds	r7, #48	; 0x30
    c908:	46bd      	mov	sp, r7
    c90a:	bc90      	pop	{r4, r7}
    c90c:	4770      	bx	lr

0000c90e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c90e:	b480      	push	{r7}
    c910:	b085      	sub	sp, #20
    c912:	af00      	add	r7, sp, #0
    c914:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    c916:	2300      	movs	r3, #0
    c918:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	2b00      	cmp	r3, #0
    c91e:	d104      	bne.n	c92a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    c920:	68fb      	ldr	r3, [r7, #12]
    c922:	e009      	b.n	c938 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c924:	68fb      	ldr	r3, [r7, #12]
    c926:	3301      	adds	r3, #1
    c928:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    c92a:	687b      	ldr	r3, [r7, #4]
    c92c:	1c5a      	adds	r2, r3, #1
    c92e:	607a      	str	r2, [r7, #4]
    c930:	781b      	ldrb	r3, [r3, #0]
    c932:	2b00      	cmp	r3, #0
    c934:	d1f6      	bne.n	c924 <simple_strlen+0x16>
    }
    return ui32RetVal;
    c936:	68fb      	ldr	r3, [r7, #12]
}
    c938:	4618      	mov	r0, r3
    c93a:	3714      	adds	r7, #20
    c93c:	46bd      	mov	sp, r7
    c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c942:	4770      	bx	lr

0000c944 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c944:	b480      	push	{r7}
    c946:	b087      	sub	sp, #28
    c948:	af00      	add	r7, sp, #0
    c94a:	60f8      	str	r0, [r7, #12]
    c94c:	460b      	mov	r3, r1
    c94e:	607a      	str	r2, [r7, #4]
    c950:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    c952:	2300      	movs	r3, #0
    c954:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    c956:	687b      	ldr	r3, [r7, #4]
    c958:	2b00      	cmp	r3, #0
    c95a:	dc0c      	bgt.n	c976 <padbuffer+0x32>
    {
        return i32Cnt;
    c95c:	697b      	ldr	r3, [r7, #20]
    c95e:	e010      	b.n	c982 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c960:	68fb      	ldr	r3, [r7, #12]
    c962:	2b00      	cmp	r3, #0
    c964:	d004      	beq.n	c970 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c966:	68fb      	ldr	r3, [r7, #12]
    c968:	1c5a      	adds	r2, r3, #1
    c96a:	60fa      	str	r2, [r7, #12]
    c96c:	7afa      	ldrb	r2, [r7, #11]
    c96e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c970:	697b      	ldr	r3, [r7, #20]
    c972:	3301      	adds	r3, #1
    c974:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    c976:	687b      	ldr	r3, [r7, #4]
    c978:	1e5a      	subs	r2, r3, #1
    c97a:	607a      	str	r2, [r7, #4]
    c97c:	2b00      	cmp	r3, #0
    c97e:	d1ef      	bne.n	c960 <padbuffer+0x1c>
    }

    return i32Cnt;
    c980:	697b      	ldr	r3, [r7, #20]
}
    c982:	4618      	mov	r0, r3
    c984:	371c      	adds	r7, #28
    c986:	46bd      	mov	sp, r7
    c988:	f85d 7b04 	ldr.w	r7, [sp], #4
    c98c:	4770      	bx	lr
	...

0000c990 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c990:	b590      	push	{r4, r7, lr}
    c992:	b08f      	sub	sp, #60	; 0x3c
    c994:	af00      	add	r7, sp, #0
    c996:	ed87 0a03 	vstr	s0, [r7, #12]
    c99a:	60b8      	str	r0, [r7, #8]
    c99c:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c99e:	68bb      	ldr	r3, [r7, #8]
    c9a0:	681b      	ldr	r3, [r3, #0]
    c9a2:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c9a6:	2b03      	cmp	r3, #3
    c9a8:	dc02      	bgt.n	c9b0 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c9aa:	f06f 0302 	mvn.w	r3, #2
    c9ae:	e0e7      	b.n	cb80 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    c9b0:	edd7 7a03 	vldr	s15, [r7, #12]
    c9b4:	eef5 7a40 	vcmp.f32	s15, #0.0
    c9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c9bc:	d104      	bne.n	c9c8 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c9be:	68bb      	ldr	r3, [r7, #8]
    c9c0:	4a71      	ldr	r2, [pc, #452]	; (cb88 <ftoa+0x1f8>)
    c9c2:	601a      	str	r2, [r3, #0]
        return 3;
    c9c4:	2303      	movs	r3, #3
    c9c6:	e0db      	b.n	cb80 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    c9c8:	68bb      	ldr	r3, [r7, #8]
    c9ca:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    c9cc:	68fb      	ldr	r3, [r7, #12]
    c9ce:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c9d0:	693b      	ldr	r3, [r7, #16]
    c9d2:	15db      	asrs	r3, r3, #23
    c9d4:	b2db      	uxtb	r3, r3
    c9d6:	3b7f      	subs	r3, #127	; 0x7f
    c9d8:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c9da:	693b      	ldr	r3, [r7, #16]
    c9dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c9e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c9e4:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    c9e6:	2300      	movs	r3, #0
    c9e8:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    c9ea:	2300      	movs	r3, #0
    c9ec:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    c9ee:	69fb      	ldr	r3, [r7, #28]
    c9f0:	2b1e      	cmp	r3, #30
    c9f2:	dd02      	ble.n	c9fa <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c9f4:	f06f 0301 	mvn.w	r3, #1
    c9f8:	e0c2      	b.n	cb80 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    c9fa:	69fb      	ldr	r3, [r7, #28]
    c9fc:	f113 0f17 	cmn.w	r3, #23
    ca00:	da02      	bge.n	ca08 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    ca02:	f04f 33ff 	mov.w	r3, #4294967295
    ca06:	e0bb      	b.n	cb80 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    ca08:	69fb      	ldr	r3, [r7, #28]
    ca0a:	2b16      	cmp	r3, #22
    ca0c:	dd06      	ble.n	ca1c <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    ca0e:	69fb      	ldr	r3, [r7, #28]
    ca10:	3b17      	subs	r3, #23
    ca12:	69ba      	ldr	r2, [r7, #24]
    ca14:	fa02 f303 	lsl.w	r3, r2, r3
    ca18:	637b      	str	r3, [r7, #52]	; 0x34
    ca1a:	e01a      	b.n	ca52 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    ca1c:	69fb      	ldr	r3, [r7, #28]
    ca1e:	2b00      	cmp	r3, #0
    ca20:	db0f      	blt.n	ca42 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    ca22:	69fb      	ldr	r3, [r7, #28]
    ca24:	f1c3 0317 	rsb	r3, r3, #23
    ca28:	69ba      	ldr	r2, [r7, #24]
    ca2a:	fa42 f303 	asr.w	r3, r2, r3
    ca2e:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ca30:	69fb      	ldr	r3, [r7, #28]
    ca32:	3301      	adds	r3, #1
    ca34:	69ba      	ldr	r2, [r7, #24]
    ca36:	fa02 f303 	lsl.w	r3, r2, r3
    ca3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca3e:	633b      	str	r3, [r7, #48]	; 0x30
    ca40:	e007      	b.n	ca52 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ca42:	69bb      	ldr	r3, [r7, #24]
    ca44:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ca48:	69fb      	ldr	r3, [r7, #28]
    ca4a:	43db      	mvns	r3, r3
    ca4c:	fa42 f303 	asr.w	r3, r2, r3
    ca50:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ca52:	693b      	ldr	r3, [r7, #16]
    ca54:	2b00      	cmp	r3, #0
    ca56:	da04      	bge.n	ca62 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    ca58:	68bb      	ldr	r3, [r7, #8]
    ca5a:	1c5a      	adds	r2, r3, #1
    ca5c:	60ba      	str	r2, [r7, #8]
    ca5e:	222d      	movs	r2, #45	; 0x2d
    ca60:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca64:	2b00      	cmp	r3, #0
    ca66:	d105      	bne.n	ca74 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    ca68:	68bb      	ldr	r3, [r7, #8]
    ca6a:	1c5a      	adds	r2, r3, #1
    ca6c:	60ba      	str	r2, [r7, #8]
    ca6e:	2230      	movs	r2, #48	; 0x30
    ca70:	701a      	strb	r2, [r3, #0]
    ca72:	e021      	b.n	cab8 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    ca74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca76:	2b00      	cmp	r3, #0
    ca78:	dd08      	ble.n	ca8c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ca7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca7c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca80:	68ba      	ldr	r2, [r7, #8]
    ca82:	4618      	mov	r0, r3
    ca84:	4621      	mov	r1, r4
    ca86:	f7ff fe96 	bl	c7b6 <uint64_to_str>
    ca8a:	e011      	b.n	cab0 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    ca8c:	68bb      	ldr	r3, [r7, #8]
    ca8e:	1c5a      	adds	r2, r3, #1
    ca90:	60ba      	str	r2, [r7, #8]
    ca92:	222d      	movs	r2, #45	; 0x2d
    ca94:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ca96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca98:	425b      	negs	r3, r3
    ca9a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ca9e:	68ba      	ldr	r2, [r7, #8]
    caa0:	4618      	mov	r0, r3
    caa2:	4621      	mov	r1, r4
    caa4:	f7ff fe87 	bl	c7b6 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    caa8:	e002      	b.n	cab0 <ftoa+0x120>
        {
            pcBuf++;
    caaa:	68bb      	ldr	r3, [r7, #8]
    caac:	3301      	adds	r3, #1
    caae:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cab0:	68bb      	ldr	r3, [r7, #8]
    cab2:	781b      	ldrb	r3, [r3, #0]
    cab4:	2b00      	cmp	r3, #0
    cab6:	d1f8      	bne.n	caaa <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cab8:	68bb      	ldr	r3, [r7, #8]
    caba:	1c5a      	adds	r2, r3, #1
    cabc:	60ba      	str	r2, [r7, #8]
    cabe:	222e      	movs	r2, #46	; 0x2e
    cac0:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cac4:	2b00      	cmp	r3, #0
    cac6:	d105      	bne.n	cad4 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    cac8:	68bb      	ldr	r3, [r7, #8]
    caca:	1c5a      	adds	r2, r3, #1
    cacc:	60ba      	str	r2, [r7, #8]
    cace:	2230      	movs	r2, #48	; 0x30
    cad0:	701a      	strb	r2, [r3, #0]
    cad2:	e04f      	b.n	cb74 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cad4:	68ba      	ldr	r2, [r7, #8]
    cad6:	6a3b      	ldr	r3, [r7, #32]
    cad8:	1ad3      	subs	r3, r2, r3
    cada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cadc:	1ad3      	subs	r3, r2, r3
    cade:	3b01      	subs	r3, #1
    cae0:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cae2:	697a      	ldr	r2, [r7, #20]
    cae4:	687b      	ldr	r3, [r7, #4]
    cae6:	4293      	cmp	r3, r2
    cae8:	bfa8      	it	ge
    caea:	4613      	movge	r3, r2
    caec:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    caee:	2300      	movs	r3, #0
    caf0:	62bb      	str	r3, [r7, #40]	; 0x28
    caf2:	e015      	b.n	cb20 <ftoa+0x190>
        {
            i32FracPart *= 10;
    caf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    caf6:	4613      	mov	r3, r2
    caf8:	009b      	lsls	r3, r3, #2
    cafa:	4413      	add	r3, r2
    cafc:	005b      	lsls	r3, r3, #1
    cafe:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb02:	161b      	asrs	r3, r3, #24
    cb04:	b2da      	uxtb	r2, r3
    cb06:	68bb      	ldr	r3, [r7, #8]
    cb08:	1c59      	adds	r1, r3, #1
    cb0a:	60b9      	str	r1, [r7, #8]
    cb0c:	3230      	adds	r2, #48	; 0x30
    cb0e:	b2d2      	uxtb	r2, r2
    cb10:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb18:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb1c:	3301      	adds	r3, #1
    cb1e:	62bb      	str	r3, [r7, #40]	; 0x28
    cb20:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cb22:	697b      	ldr	r3, [r7, #20]
    cb24:	429a      	cmp	r2, r3
    cb26:	dbe5      	blt.n	caf4 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cb28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb2a:	4613      	mov	r3, r2
    cb2c:	009b      	lsls	r3, r3, #2
    cb2e:	4413      	add	r3, r2
    cb30:	005b      	lsls	r3, r3, #1
    cb32:	161b      	asrs	r3, r3, #24
    cb34:	2b04      	cmp	r3, #4
    cb36:	dd1d      	ble.n	cb74 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cb38:	68bb      	ldr	r3, [r7, #8]
    cb3a:	3b01      	subs	r3, #1
    cb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb3e:	e015      	b.n	cb6c <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb42:	781b      	ldrb	r3, [r3, #0]
    cb44:	2b2e      	cmp	r3, #46	; 0x2e
    cb46:	d00e      	beq.n	cb66 <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb4a:	781b      	ldrb	r3, [r3, #0]
    cb4c:	2b39      	cmp	r3, #57	; 0x39
    cb4e:	d103      	bne.n	cb58 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb52:	2230      	movs	r2, #48	; 0x30
    cb54:	701a      	strb	r2, [r3, #0]
    cb56:	e006      	b.n	cb66 <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb5a:	781b      	ldrb	r3, [r3, #0]
    cb5c:	3301      	adds	r3, #1
    cb5e:	b2da      	uxtb	r2, r3
    cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb62:	701a      	strb	r2, [r3, #0]
                    break;
    cb64:	e006      	b.n	cb74 <ftoa+0x1e4>
                }
                pcBuftmp--;
    cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb68:	3b01      	subs	r3, #1
    cb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb6e:	6a3b      	ldr	r3, [r7, #32]
    cb70:	429a      	cmp	r2, r3
    cb72:	d2e5      	bcs.n	cb40 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cb74:	68bb      	ldr	r3, [r7, #8]
    cb76:	2200      	movs	r2, #0
    cb78:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cb7a:	68ba      	ldr	r2, [r7, #8]
    cb7c:	6a3b      	ldr	r3, [r7, #32]
    cb7e:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cb80:	4618      	mov	r0, r3
    cb82:	373c      	adds	r7, #60	; 0x3c
    cb84:	46bd      	mov	sp, r7
    cb86:	bd90      	pop	{r4, r7, pc}
    cb88:	00302e30 	.word	0x00302e30

0000cb8c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb8c:	b590      	push	{r4, r7, lr}
    cb8e:	b095      	sub	sp, #84	; 0x54
    cb90:	af00      	add	r7, sp, #0
    cb92:	60f8      	str	r0, [r7, #12]
    cb94:	60b9      	str	r1, [r7, #8]
    cb96:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb98:	2300      	movs	r3, #0
    cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cb9c:	2300      	movs	r3, #0
    cb9e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cba0:	e2e9      	b.n	d176 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cba2:	2306      	movs	r3, #6
    cba4:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cba6:	68bb      	ldr	r3, [r7, #8]
    cba8:	781b      	ldrb	r3, [r3, #0]
    cbaa:	2b25      	cmp	r3, #37	; 0x25
    cbac:	d01f      	beq.n	cbee <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cbae:	68fb      	ldr	r3, [r7, #12]
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	d015      	beq.n	cbe0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cbb4:	68bb      	ldr	r3, [r7, #8]
    cbb6:	781b      	ldrb	r3, [r3, #0]
    cbb8:	2b0a      	cmp	r3, #10
    cbba:	d10b      	bne.n	cbd4 <am_util_stdio_vsprintf+0x48>
    cbbc:	4bb2      	ldr	r3, [pc, #712]	; (ce88 <am_util_stdio_vsprintf+0x2fc>)
    cbbe:	781b      	ldrb	r3, [r3, #0]
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d007      	beq.n	cbd4 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cbc4:	68fb      	ldr	r3, [r7, #12]
    cbc6:	1c5a      	adds	r2, r3, #1
    cbc8:	60fa      	str	r2, [r7, #12]
    cbca:	220d      	movs	r2, #13
    cbcc:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbd0:	3301      	adds	r3, #1
    cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cbd4:	68fb      	ldr	r3, [r7, #12]
    cbd6:	1c5a      	adds	r2, r3, #1
    cbd8:	60fa      	str	r2, [r7, #12]
    cbda:	68ba      	ldr	r2, [r7, #8]
    cbdc:	7812      	ldrb	r2, [r2, #0]
    cbde:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cbe0:	68bb      	ldr	r3, [r7, #8]
    cbe2:	3301      	adds	r3, #1
    cbe4:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cbe8:	3301      	adds	r3, #1
    cbea:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cbec:	e2c3      	b.n	d176 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cbee:	68bb      	ldr	r3, [r7, #8]
    cbf0:	3301      	adds	r3, #1
    cbf2:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cbf4:	2300      	movs	r3, #0
    cbf6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cbfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cbfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cc02:	2320      	movs	r3, #32
    cc04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cc08:	68bb      	ldr	r3, [r7, #8]
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	2b30      	cmp	r3, #48	; 0x30
    cc0e:	d105      	bne.n	cc1c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cc10:	2330      	movs	r3, #48	; 0x30
    cc12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cc16:	68bb      	ldr	r3, [r7, #8]
    cc18:	3301      	adds	r3, #1
    cc1a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cc1c:	f107 0310 	add.w	r3, r7, #16
    cc20:	4619      	mov	r1, r3
    cc22:	68b8      	ldr	r0, [r7, #8]
    cc24:	f7ff fd81 	bl	c72a <decstr_to_int>
    cc28:	4603      	mov	r3, r0
    cc2a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cc2c:	693b      	ldr	r3, [r7, #16]
    cc2e:	68ba      	ldr	r2, [r7, #8]
    cc30:	4413      	add	r3, r2
    cc32:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cc34:	68bb      	ldr	r3, [r7, #8]
    cc36:	781b      	ldrb	r3, [r3, #0]
    cc38:	2b73      	cmp	r3, #115	; 0x73
    cc3a:	d005      	beq.n	cc48 <am_util_stdio_vsprintf+0xbc>
    cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc3e:	2b00      	cmp	r3, #0
    cc40:	da02      	bge.n	cc48 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc44:	425b      	negs	r3, r3
    cc46:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cc48:	68bb      	ldr	r3, [r7, #8]
    cc4a:	781b      	ldrb	r3, [r3, #0]
    cc4c:	2b2e      	cmp	r3, #46	; 0x2e
    cc4e:	d10e      	bne.n	cc6e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cc50:	68bb      	ldr	r3, [r7, #8]
    cc52:	3301      	adds	r3, #1
    cc54:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cc56:	f107 0310 	add.w	r3, r7, #16
    cc5a:	4619      	mov	r1, r3
    cc5c:	68b8      	ldr	r0, [r7, #8]
    cc5e:	f7ff fd64 	bl	c72a <decstr_to_int>
    cc62:	4603      	mov	r3, r0
    cc64:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cc66:	693b      	ldr	r3, [r7, #16]
    cc68:	68ba      	ldr	r2, [r7, #8]
    cc6a:	4413      	add	r3, r2
    cc6c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc6e:	68bb      	ldr	r3, [r7, #8]
    cc70:	781b      	ldrb	r3, [r3, #0]
    cc72:	2b6c      	cmp	r3, #108	; 0x6c
    cc74:	d10c      	bne.n	cc90 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cc76:	68bb      	ldr	r3, [r7, #8]
    cc78:	3301      	adds	r3, #1
    cc7a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc7c:	68bb      	ldr	r3, [r7, #8]
    cc7e:	781b      	ldrb	r3, [r3, #0]
    cc80:	2b6c      	cmp	r3, #108	; 0x6c
    cc82:	d105      	bne.n	cc90 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cc84:	68bb      	ldr	r3, [r7, #8]
    cc86:	3301      	adds	r3, #1
    cc88:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cc8a:	2301      	movs	r3, #1
    cc8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cc90:	68bb      	ldr	r3, [r7, #8]
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	3b46      	subs	r3, #70	; 0x46
    cc96:	2b32      	cmp	r3, #50	; 0x32
    cc98:	f200 825a 	bhi.w	d150 <am_util_stdio_vsprintf+0x5c4>
    cc9c:	a201      	add	r2, pc, #4	; (adr r2, cca4 <am_util_stdio_vsprintf+0x118>)
    cc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cca2:	bf00      	nop
    cca4:	0000d0d7 	.word	0x0000d0d7
    cca8:	0000d151 	.word	0x0000d151
    ccac:	0000d151 	.word	0x0000d151
    ccb0:	0000d151 	.word	0x0000d151
    ccb4:	0000d151 	.word	0x0000d151
    ccb8:	0000d151 	.word	0x0000d151
    ccbc:	0000d151 	.word	0x0000d151
    ccc0:	0000d151 	.word	0x0000d151
    ccc4:	0000d151 	.word	0x0000d151
    ccc8:	0000d151 	.word	0x0000d151
    cccc:	0000d151 	.word	0x0000d151
    ccd0:	0000d151 	.word	0x0000d151
    ccd4:	0000d151 	.word	0x0000d151
    ccd8:	0000d151 	.word	0x0000d151
    ccdc:	0000d151 	.word	0x0000d151
    cce0:	0000d151 	.word	0x0000d151
    cce4:	0000d151 	.word	0x0000d151
    cce8:	0000d151 	.word	0x0000d151
    ccec:	0000ce6b 	.word	0x0000ce6b
    ccf0:	0000d151 	.word	0x0000d151
    ccf4:	0000d151 	.word	0x0000d151
    ccf8:	0000d151 	.word	0x0000d151
    ccfc:	0000d151 	.word	0x0000d151
    cd00:	0000d151 	.word	0x0000d151
    cd04:	0000d151 	.word	0x0000d151
    cd08:	0000d151 	.word	0x0000d151
    cd0c:	0000d151 	.word	0x0000d151
    cd10:	0000d151 	.word	0x0000d151
    cd14:	0000d151 	.word	0x0000d151
    cd18:	0000cd71 	.word	0x0000cd71
    cd1c:	0000cf9d 	.word	0x0000cf9d
    cd20:	0000d151 	.word	0x0000d151
    cd24:	0000d0d7 	.word	0x0000d0d7
    cd28:	0000d151 	.word	0x0000d151
    cd2c:	0000d151 	.word	0x0000d151
    cd30:	0000cf9d 	.word	0x0000cf9d
    cd34:	0000d151 	.word	0x0000d151
    cd38:	0000d151 	.word	0x0000d151
    cd3c:	0000d151 	.word	0x0000d151
    cd40:	0000d151 	.word	0x0000d151
    cd44:	0000d151 	.word	0x0000d151
    cd48:	0000d151 	.word	0x0000d151
    cd4c:	0000d151 	.word	0x0000d151
    cd50:	0000d151 	.word	0x0000d151
    cd54:	0000d151 	.word	0x0000d151
    cd58:	0000cd97 	.word	0x0000cd97
    cd5c:	0000d151 	.word	0x0000d151
    cd60:	0000cf09 	.word	0x0000cf09
    cd64:	0000d151 	.word	0x0000d151
    cd68:	0000d151 	.word	0x0000d151
    cd6c:	0000ce65 	.word	0x0000ce65
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cd70:	687b      	ldr	r3, [r7, #4]
    cd72:	1d1a      	adds	r2, r3, #4
    cd74:	607a      	str	r2, [r7, #4]
    cd76:	681b      	ldr	r3, [r3, #0]
    cd78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cd7c:	68fb      	ldr	r3, [r7, #12]
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d005      	beq.n	cd8e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cd82:	68fb      	ldr	r3, [r7, #12]
    cd84:	1c5a      	adds	r2, r3, #1
    cd86:	60fa      	str	r2, [r7, #12]
    cd88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cd8c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd90:	3301      	adds	r3, #1
    cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cd94:	e1ec      	b.n	d170 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cd96:	687b      	ldr	r3, [r7, #4]
    cd98:	1d1a      	adds	r2, r3, #4
    cd9a:	607a      	str	r2, [r7, #4]
    cd9c:	681b      	ldr	r3, [r3, #0]
    cd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cda0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cda2:	f7ff fdb4 	bl	c90e <simple_strlen>
    cda6:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdaa:	2b00      	cmp	r3, #0
    cdac:	dd2e      	ble.n	ce0c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cdb2:	429a      	cmp	r2, r3
    cdb4:	d22a      	bcs.n	ce0c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cdb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cdba:	1ad3      	subs	r3, r2, r3
    cdbc:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cdbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cdc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cdc4:	4619      	mov	r1, r3
    cdc6:	68f8      	ldr	r0, [r7, #12]
    cdc8:	f7ff fdbc 	bl	c944 <padbuffer>
    cdcc:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cdce:	68fb      	ldr	r3, [r7, #12]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d001      	beq.n	cdd8 <am_util_stdio_vsprintf+0x24c>
    cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdd6:	e000      	b.n	cdda <am_util_stdio_vsprintf+0x24e>
    cdd8:	2300      	movs	r3, #0
    cdda:	68fa      	ldr	r2, [r7, #12]
    cddc:	4413      	add	r3, r2
    cdde:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cde2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cde4:	4413      	add	r3, r2
    cde6:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cde8:	2300      	movs	r3, #0
    cdea:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cdec:	e00e      	b.n	ce0c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cdee:	68fb      	ldr	r3, [r7, #12]
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	d005      	beq.n	ce00 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cdf4:	68fb      	ldr	r3, [r7, #12]
    cdf6:	1c5a      	adds	r2, r3, #1
    cdf8:	60fa      	str	r2, [r7, #12]
    cdfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cdfc:	7812      	ldrb	r2, [r2, #0]
    cdfe:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ce00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce02:	3301      	adds	r3, #1
    ce04:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    ce06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce08:	3301      	adds	r3, #1
    ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    ce0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce0e:	781b      	ldrb	r3, [r3, #0]
    ce10:	2b00      	cmp	r3, #0
    ce12:	d1ec      	bne.n	cdee <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce16:	2b00      	cmp	r3, #0
    ce18:	f000 81a7 	beq.w	d16a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce1e:	425b      	negs	r3, r3
    ce20:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce26:	429a      	cmp	r2, r3
    ce28:	f080 819f 	bcs.w	d16a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ce2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce30:	1ad3      	subs	r3, r2, r3
    ce32:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ce38:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce3a:	4619      	mov	r1, r3
    ce3c:	68f8      	ldr	r0, [r7, #12]
    ce3e:	f7ff fd81 	bl	c944 <padbuffer>
    ce42:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    ce44:	68fb      	ldr	r3, [r7, #12]
    ce46:	2b00      	cmp	r3, #0
    ce48:	d001      	beq.n	ce4e <am_util_stdio_vsprintf+0x2c2>
    ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce4c:	e000      	b.n	ce50 <am_util_stdio_vsprintf+0x2c4>
    ce4e:	2300      	movs	r3, #0
    ce50:	68fa      	ldr	r2, [r7, #12]
    ce52:	4413      	add	r3, r2
    ce54:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce5a:	4413      	add	r3, r2
    ce5c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    ce5e:	2300      	movs	r3, #0
    ce60:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    ce62:	e182      	b.n	d16a <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
    ce64:	2301      	movs	r3, #1
    ce66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ce6e:	2b00      	cmp	r3, #0
    ce70:	d00c      	beq.n	ce8c <am_util_stdio_vsprintf+0x300>
    ce72:	687b      	ldr	r3, [r7, #4]
    ce74:	3307      	adds	r3, #7
    ce76:	f023 0307 	bic.w	r3, r3, #7
    ce7a:	f103 0208 	add.w	r2, r3, #8
    ce7e:	607a      	str	r2, [r7, #4]
    ce80:	e9d3 3400 	ldrd	r3, r4, [r3]
    ce84:	e008      	b.n	ce98 <am_util_stdio_vsprintf+0x30c>
    ce86:	bf00      	nop
    ce88:	10001120 	.word	0x10001120
                                      va_arg(pArgs, uint32_t);
    ce8c:	687b      	ldr	r3, [r7, #4]
    ce8e:	1d1a      	adds	r2, r3, #4
    ce90:	607a      	str	r2, [r7, #4]
    ce92:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce94:	f04f 0400 	mov.w	r4, #0
    ce98:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce9e:	2b00      	cmp	r3, #0
    cea0:	d01e      	beq.n	cee0 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cea2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cea6:	f7ff fc18 	bl	c6da <ndigits_in_hex>
    ceaa:	4602      	mov	r2, r0
    ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ceae:	1a9b      	subs	r3, r3, r2
    ceb0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ceb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ceb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ceb8:	4619      	mov	r1, r3
    ceba:	68f8      	ldr	r0, [r7, #12]
    cebc:	f7ff fd42 	bl	c944 <padbuffer>
    cec0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cec2:	68fb      	ldr	r3, [r7, #12]
    cec4:	2b00      	cmp	r3, #0
    cec6:	d001      	beq.n	cecc <am_util_stdio_vsprintf+0x340>
    cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ceca:	e000      	b.n	cece <am_util_stdio_vsprintf+0x342>
    cecc:	2300      	movs	r3, #0
    cece:	68fa      	ldr	r2, [r7, #12]
    ced0:	4413      	add	r3, r2
    ced2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    ced4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ced6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ced8:	4413      	add	r3, r2
    ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cedc:	2300      	movs	r3, #0
    cede:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cee0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cee4:	68fa      	ldr	r2, [r7, #12]
    cee6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    ceea:	f7ff fcac 	bl	c846 <uint64_to_hexstr>
    ceee:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cef0:	68fb      	ldr	r3, [r7, #12]
    cef2:	2b00      	cmp	r3, #0
    cef4:	d003      	beq.n	cefe <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
    cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cef8:	68fa      	ldr	r2, [r7, #12]
    cefa:	4413      	add	r3, r2
    cefc:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf02:	4413      	add	r3, r2
    cf04:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf06:	e133      	b.n	d170 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d009      	beq.n	cf24 <am_util_stdio_vsprintf+0x398>
    cf10:	687b      	ldr	r3, [r7, #4]
    cf12:	3307      	adds	r3, #7
    cf14:	f023 0307 	bic.w	r3, r3, #7
    cf18:	f103 0208 	add.w	r2, r3, #8
    cf1c:	607a      	str	r2, [r7, #4]
    cf1e:	e9d3 3400 	ldrd	r3, r4, [r3]
    cf22:	e005      	b.n	cf30 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
    cf24:	687b      	ldr	r3, [r7, #4]
    cf26:	1d1a      	adds	r2, r3, #4
    cf28:	607a      	str	r2, [r7, #4]
    cf2a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf2c:	f04f 0400 	mov.w	r4, #0
    cf30:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf36:	2b00      	cmp	r3, #0
    cf38:	d01e      	beq.n	cf78 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cf3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf3e:	f7ff fb8e 	bl	c65e <ndigits_in_u64>
    cf42:	4602      	mov	r2, r0
    cf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf46:	1a9b      	subs	r3, r3, r2
    cf48:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf50:	4619      	mov	r1, r3
    cf52:	68f8      	ldr	r0, [r7, #12]
    cf54:	f7ff fcf6 	bl	c944 <padbuffer>
    cf58:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cf5a:	68fb      	ldr	r3, [r7, #12]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d001      	beq.n	cf64 <am_util_stdio_vsprintf+0x3d8>
    cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf62:	e000      	b.n	cf66 <am_util_stdio_vsprintf+0x3da>
    cf64:	2300      	movs	r3, #0
    cf66:	68fa      	ldr	r2, [r7, #12]
    cf68:	4413      	add	r3, r2
    cf6a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf70:	4413      	add	r3, r2
    cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cf74:	2300      	movs	r3, #0
    cf76:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf78:	68fa      	ldr	r2, [r7, #12]
    cf7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf7e:	f7ff fc1a 	bl	c7b6 <uint64_to_str>
    cf82:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cf84:	68fb      	ldr	r3, [r7, #12]
    cf86:	2b00      	cmp	r3, #0
    cf88:	d003      	beq.n	cf92 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
    cf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf8c:	68fa      	ldr	r2, [r7, #12]
    cf8e:	4413      	add	r3, r2
    cf90:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf96:	4413      	add	r3, r2
    cf98:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf9a:	e0e9      	b.n	d170 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d009      	beq.n	cfb8 <am_util_stdio_vsprintf+0x42c>
    cfa4:	687b      	ldr	r3, [r7, #4]
    cfa6:	3307      	adds	r3, #7
    cfa8:	f023 0307 	bic.w	r3, r3, #7
    cfac:	f103 0208 	add.w	r2, r3, #8
    cfb0:	607a      	str	r2, [r7, #4]
    cfb2:	e9d3 3400 	ldrd	r3, r4, [r3]
    cfb6:	e005      	b.n	cfc4 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    cfb8:	687b      	ldr	r3, [r7, #4]
    cfba:	1d1a      	adds	r2, r3, #4
    cfbc:	607a      	str	r2, [r7, #4]
    cfbe:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cfc0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cfc4:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cfc8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cfcc:	2b00      	cmp	r3, #0
    cfce:	f174 0300 	sbcs.w	r3, r4, #0
    cfd2:	da0a      	bge.n	cfea <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cfd4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cfd8:	425b      	negs	r3, r3
    cfda:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    cfde:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    cfe2:	2301      	movs	r3, #1
    cfe4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    cfe8:	e006      	b.n	cff8 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    cfea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cfee:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    cff2:	2300      	movs	r3, #0
    cff4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    cff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cffa:	2b00      	cmp	r3, #0
    cffc:	d04a      	beq.n	d094 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cffe:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d002:	4618      	mov	r0, r3
    d004:	4621      	mov	r1, r4
    d006:	f7ff fb4b 	bl	c6a0 <ndigits_in_i64>
    d00a:	4602      	mov	r2, r0
    d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d00e:	1a9b      	subs	r3, r3, r2
    d010:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d016:	2b00      	cmp	r3, #0
    d018:	d011      	beq.n	d03e <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d01c:	3b01      	subs	r3, #1
    d01e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d024:	2b30      	cmp	r3, #48	; 0x30
    d026:	d10a      	bne.n	d03e <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d028:	68fb      	ldr	r3, [r7, #12]
    d02a:	2b00      	cmp	r3, #0
    d02c:	d004      	beq.n	d038 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d02e:	68fb      	ldr	r3, [r7, #12]
    d030:	1c5a      	adds	r2, r3, #1
    d032:	60fa      	str	r2, [r7, #12]
    d034:	222d      	movs	r2, #45	; 0x2d
    d036:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d03a:	3301      	adds	r3, #1
    d03c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d03e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d042:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d044:	4619      	mov	r1, r3
    d046:	68f8      	ldr	r0, [r7, #12]
    d048:	f7ff fc7c 	bl	c944 <padbuffer>
    d04c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d04e:	68fb      	ldr	r3, [r7, #12]
    d050:	2b00      	cmp	r3, #0
    d052:	d001      	beq.n	d058 <am_util_stdio_vsprintf+0x4cc>
    d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d056:	e000      	b.n	d05a <am_util_stdio_vsprintf+0x4ce>
    d058:	2300      	movs	r3, #0
    d05a:	68fa      	ldr	r2, [r7, #12]
    d05c:	4413      	add	r3, r2
    d05e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d064:	4413      	add	r3, r2
    d066:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d068:	2300      	movs	r3, #0
    d06a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d06c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d070:	2b00      	cmp	r3, #0
    d072:	d01e      	beq.n	d0b2 <am_util_stdio_vsprintf+0x526>
    d074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d078:	2b20      	cmp	r3, #32
    d07a:	d11a      	bne.n	d0b2 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d07c:	68fb      	ldr	r3, [r7, #12]
    d07e:	2b00      	cmp	r3, #0
    d080:	d004      	beq.n	d08c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d082:	68fb      	ldr	r3, [r7, #12]
    d084:	1c5a      	adds	r2, r3, #1
    d086:	60fa      	str	r2, [r7, #12]
    d088:	222d      	movs	r2, #45	; 0x2d
    d08a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d08e:	3301      	adds	r3, #1
    d090:	63fb      	str	r3, [r7, #60]	; 0x3c
    d092:	e00e      	b.n	d0b2 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d094:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d098:	2b00      	cmp	r3, #0
    d09a:	d00a      	beq.n	d0b2 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d09c:	68fb      	ldr	r3, [r7, #12]
    d09e:	2b00      	cmp	r3, #0
    d0a0:	d004      	beq.n	d0ac <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d0a2:	68fb      	ldr	r3, [r7, #12]
    d0a4:	1c5a      	adds	r2, r3, #1
    d0a6:	60fa      	str	r2, [r7, #12]
    d0a8:	222d      	movs	r2, #45	; 0x2d
    d0aa:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0ae:	3301      	adds	r3, #1
    d0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d0b2:	68fa      	ldr	r2, [r7, #12]
    d0b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0b8:	f7ff fb7d 	bl	c7b6 <uint64_to_str>
    d0bc:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d0be:	68fb      	ldr	r3, [r7, #12]
    d0c0:	2b00      	cmp	r3, #0
    d0c2:	d003      	beq.n	d0cc <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0c6:	68fa      	ldr	r2, [r7, #12]
    d0c8:	4413      	add	r3, r2
    d0ca:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0d0:	4413      	add	r3, r2
    d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d0d4:	e04c      	b.n	d170 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d0d6:	68fb      	ldr	r3, [r7, #12]
    d0d8:	2b00      	cmp	r3, #0
    d0da:	d048      	beq.n	d16e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d0dc:	687b      	ldr	r3, [r7, #4]
    d0de:	3307      	adds	r3, #7
    d0e0:	f023 0307 	bic.w	r3, r3, #7
    d0e4:	f103 0208 	add.w	r2, r3, #8
    d0e8:	607a      	str	r2, [r7, #4]
    d0ea:	e9d3 3400 	ldrd	r3, r4, [r3]
    d0ee:	4618      	mov	r0, r3
    d0f0:	4621      	mov	r1, r4
    d0f2:	f7ff f805 	bl	c100 <__aeabi_d2f>
    d0f6:	4603      	mov	r3, r0
    d0f8:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d0fa:	68fb      	ldr	r3, [r7, #12]
    d0fc:	2214      	movs	r2, #20
    d0fe:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d100:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d102:	68f8      	ldr	r0, [r7, #12]
    d104:	ed97 0a05 	vldr	s0, [r7, #20]
    d108:	f7ff fc42 	bl	c990 <ftoa>
    d10c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d110:	2b00      	cmp	r3, #0
    d112:	da14      	bge.n	d13e <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d116:	f1b3 3fff 	cmp.w	r3, #4294967295
    d11a:	d102      	bne.n	d122 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d11c:	4b1e      	ldr	r3, [pc, #120]	; (d198 <am_util_stdio_vsprintf+0x60c>)
    d11e:	62bb      	str	r3, [r7, #40]	; 0x28
    d120:	e008      	b.n	d134 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d124:	f113 0f02 	cmn.w	r3, #2
    d128:	d102      	bne.n	d130 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d12a:	4b1c      	ldr	r3, [pc, #112]	; (d19c <am_util_stdio_vsprintf+0x610>)
    d12c:	62bb      	str	r3, [r7, #40]	; 0x28
    d12e:	e001      	b.n	d134 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d130:	4b1b      	ldr	r3, [pc, #108]	; (d1a0 <am_util_stdio_vsprintf+0x614>)
    d132:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d134:	68fb      	ldr	r3, [r7, #12]
    d136:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d138:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d13a:	2303      	movs	r3, #3
    d13c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d142:	4413      	add	r3, r2
    d144:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d148:	68fa      	ldr	r2, [r7, #12]
    d14a:	4413      	add	r3, r2
    d14c:	60fb      	str	r3, [r7, #12]
                }
                break;
    d14e:	e00e      	b.n	d16e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d150:	68fb      	ldr	r3, [r7, #12]
    d152:	2b00      	cmp	r3, #0
    d154:	d005      	beq.n	d162 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d156:	68fb      	ldr	r3, [r7, #12]
    d158:	1c5a      	adds	r2, r3, #1
    d15a:	60fa      	str	r2, [r7, #12]
    d15c:	68ba      	ldr	r2, [r7, #8]
    d15e:	7812      	ldrb	r2, [r2, #0]
    d160:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d164:	3301      	adds	r3, #1
    d166:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d168:	e002      	b.n	d170 <am_util_stdio_vsprintf+0x5e4>
                break;
    d16a:	bf00      	nop
    d16c:	e000      	b.n	d170 <am_util_stdio_vsprintf+0x5e4>
                break;
    d16e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d170:	68bb      	ldr	r3, [r7, #8]
    d172:	3301      	adds	r3, #1
    d174:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d176:	68bb      	ldr	r3, [r7, #8]
    d178:	781b      	ldrb	r3, [r3, #0]
    d17a:	2b00      	cmp	r3, #0
    d17c:	f47f ad11 	bne.w	cba2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d180:	68fb      	ldr	r3, [r7, #12]
    d182:	2b00      	cmp	r3, #0
    d184:	d002      	beq.n	d18c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d186:	68fb      	ldr	r3, [r7, #12]
    d188:	2200      	movs	r2, #0
    d18a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d18e:	4618      	mov	r0, r3
    d190:	3754      	adds	r7, #84	; 0x54
    d192:	46bd      	mov	sp, r7
    d194:	bd90      	pop	{r4, r7, pc}
    d196:	bf00      	nop
    d198:	00302e30 	.word	0x00302e30
    d19c:	00232e23 	.word	0x00232e23
    d1a0:	003f2e3f 	.word	0x003f2e3f

0000d1a4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d1a4:	b40f      	push	{r0, r1, r2, r3}
    d1a6:	b580      	push	{r7, lr}
    d1a8:	b082      	sub	sp, #8
    d1aa:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d1ac:	4b0d      	ldr	r3, [pc, #52]	; (d1e4 <am_util_stdio_printf+0x40>)
    d1ae:	681b      	ldr	r3, [r3, #0]
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	d101      	bne.n	d1b8 <am_util_stdio_printf+0x14>
    {
        return 0;
    d1b4:	2300      	movs	r3, #0
    d1b6:	e00d      	b.n	d1d4 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d1b8:	f107 0314 	add.w	r3, r7, #20
    d1bc:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d1be:	683a      	ldr	r2, [r7, #0]
    d1c0:	6939      	ldr	r1, [r7, #16]
    d1c2:	4809      	ldr	r0, [pc, #36]	; (d1e8 <am_util_stdio_printf+0x44>)
    d1c4:	f7ff fce2 	bl	cb8c <am_util_stdio_vsprintf>
    d1c8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d1ca:	4b06      	ldr	r3, [pc, #24]	; (d1e4 <am_util_stdio_printf+0x40>)
    d1cc:	681b      	ldr	r3, [r3, #0]
    d1ce:	4806      	ldr	r0, [pc, #24]	; (d1e8 <am_util_stdio_printf+0x44>)
    d1d0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d1d2:	687b      	ldr	r3, [r7, #4]
}
    d1d4:	4618      	mov	r0, r3
    d1d6:	3708      	adds	r7, #8
    d1d8:	46bd      	mov	sp, r7
    d1da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d1de:	b004      	add	sp, #16
    d1e0:	4770      	bx	lr
    d1e2:	bf00      	nop
    d1e4:	10001134 	.word	0x10001134
    d1e8:	10001020 	.word	0x10001020

0000d1ec <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d1ec:	b580      	push	{r7, lr}
    d1ee:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d1f0:	4802      	ldr	r0, [pc, #8]	; (d1fc <am_util_stdio_terminal_clear+0x10>)
    d1f2:	f7ff ffd7 	bl	d1a4 <am_util_stdio_printf>
}
    d1f6:	bf00      	nop
    d1f8:	bd80      	pop	{r7, pc}
    d1fa:	bf00      	nop
    d1fc:	0000ea0c 	.word	0x0000ea0c

0000d200 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d200:	4811      	ldr	r0, [pc, #68]	; (d248 <zero_loop+0x12>)
    d202:	4912      	ldr	r1, [pc, #72]	; (d24c <zero_loop+0x16>)
    d204:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d206:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d20a:	4811      	ldr	r0, [pc, #68]	; (d250 <zero_loop+0x1a>)
    d20c:	6801      	ldr	r1, [r0, #0]
    d20e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d212:	6001      	str	r1, [r0, #0]
    d214:	f3bf 8f4f 	dsb	sy
    d218:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d21c:	480d      	ldr	r0, [pc, #52]	; (d254 <zero_loop+0x1e>)
    d21e:	490e      	ldr	r1, [pc, #56]	; (d258 <zero_loop+0x22>)
    d220:	4a0e      	ldr	r2, [pc, #56]	; (d25c <zero_loop+0x26>)

0000d222 <copy_loop>:
    d222:	f850 3b04 	ldr.w	r3, [r0], #4
    d226:	f841 3b04 	str.w	r3, [r1], #4
    d22a:	4291      	cmp	r1, r2
    d22c:	dbf9      	blt.n	d222 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d22e:	480c      	ldr	r0, [pc, #48]	; (d260 <zero_loop+0x2a>)
    d230:	490c      	ldr	r1, [pc, #48]	; (d264 <zero_loop+0x2e>)
    d232:	f04f 0200 	mov.w	r2, #0

0000d236 <zero_loop>:
    d236:	4288      	cmp	r0, r1
    d238:	bfb8      	it	lt
    d23a:	f840 2b04 	strlt.w	r2, [r0], #4
    d23e:	dbfa      	blt.n	d236 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d240:	f7fe ffdc 	bl	c1fc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d244:	be00      	bkpt	0x0000
}
    d246:	bf00      	nop
    d248:	e000ed08 	.word	0xe000ed08
    d24c:	0000c000 	.word	0x0000c000
    d250:	e000ed88 	.word	0xe000ed88
    d254:	0000ed54 	.word	0x0000ed54
    d258:	10001000 	.word	0x10001000
    d25c:	10001020 	.word	0x10001020
    d260:	10001020 	.word	0x10001020
    d264:	10001200 	.word	0x10001200

0000d268 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    d268:	b480      	push	{r7}
    d26a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d26c:	e7fe      	b.n	d26c <NMI_Handler+0x4>

0000d26e <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d26e:	b480      	push	{r7}
    d270:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d272:	e7fe      	b.n	d272 <DebugMon_Handler+0x4>

0000d274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    d274:	b480      	push	{r7}
    d276:	b083      	sub	sp, #12
    d278:	af00      	add	r7, sp, #0
    d27a:	4603      	mov	r3, r0
    d27c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    d27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d282:	2b00      	cmp	r3, #0
    d284:	db0b      	blt.n	d29e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d286:	79fb      	ldrb	r3, [r7, #7]
    d288:	f003 021f 	and.w	r2, r3, #31
    d28c:	4907      	ldr	r1, [pc, #28]	; (d2ac <__NVIC_EnableIRQ+0x38>)
    d28e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d292:	095b      	lsrs	r3, r3, #5
    d294:	2001      	movs	r0, #1
    d296:	fa00 f202 	lsl.w	r2, r0, r2
    d29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    d29e:	bf00      	nop
    d2a0:	370c      	adds	r7, #12
    d2a2:	46bd      	mov	sp, r7
    d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2a8:	4770      	bx	lr
    d2aa:	bf00      	nop
    d2ac:	e000e100 	.word	0xe000e100

0000d2b0 <cameraSetup>:
#include "edge_camera.h"




uint32_t cameraSetup( void ){
    d2b0:	b580      	push	{r7, lr}
    d2b2:	b082      	sub	sp, #8
    d2b4:	af00      	add	r7, sp, #0
    uint32_t retval = 0x00;
    d2b6:	2300      	movs	r3, #0
    d2b8:	607b      	str	r3, [r7, #4]

    // Setup Pins
    am_hal_gpio_pinconfig(AM_BSP_CAM_XCLK, g_AM_BSP_CAM_XCLK);          // Clock generation for camera
    d2ba:	4b37      	ldr	r3, [pc, #220]	; (d398 <cameraSetup+0xe8>)
    d2bc:	6819      	ldr	r1, [r3, #0]
    d2be:	2007      	movs	r0, #7
    d2c0:	f000 fa86 	bl	d7d0 <am_hal_gpio_pinconfig>

    am_hal_gpio_pinconfig(AM_BSP_CAM_PCLK, g_AM_BSP_CAM_PCLK);          // Interrupts for state
    d2c4:	4b35      	ldr	r3, [pc, #212]	; (d39c <cameraSetup+0xec>)
    d2c6:	6819      	ldr	r1, [r3, #0]
    d2c8:	2017      	movs	r0, #23
    d2ca:	f000 fa81 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_HREF, g_AM_BSP_CAM_HREF);          
    d2ce:	4b34      	ldr	r3, [pc, #208]	; (d3a0 <cameraSetup+0xf0>)
    d2d0:	6819      	ldr	r1, [r3, #0]
    d2d2:	201a      	movs	r0, #26
    d2d4:	f000 fa7c 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_VSYNC, g_AM_BSP_CAM_VSYNC);
    d2d8:	4b32      	ldr	r3, [pc, #200]	; (d3a4 <cameraSetup+0xf4>)
    d2da:	6819      	ldr	r1, [r3, #0]
    d2dc:	200c      	movs	r0, #12
    d2de:	f000 fa77 	bl	d7d0 <am_hal_gpio_pinconfig>

    am_hal_gpio_pinconfig(AM_BSP_CAM_Y0, g_AM_BSP_CAM_Y0);              // Inputs for data
    d2e2:	4b31      	ldr	r3, [pc, #196]	; (d3a8 <cameraSetup+0xf8>)
    d2e4:	6819      	ldr	r1, [r3, #0]
    d2e6:	2006      	movs	r0, #6
    d2e8:	f000 fa72 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y1, g_AM_BSP_CAM_Y1);
    d2ec:	4b2f      	ldr	r3, [pc, #188]	; (d3ac <cameraSetup+0xfc>)
    d2ee:	6819      	ldr	r1, [r3, #0]
    d2f0:	2008      	movs	r0, #8
    d2f2:	f000 fa6d 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y2, g_AM_BSP_CAM_Y2);
    d2f6:	4b2e      	ldr	r3, [pc, #184]	; (d3b0 <cameraSetup+0x100>)
    d2f8:	6819      	ldr	r1, [r3, #0]
    d2fa:	2009      	movs	r0, #9
    d2fc:	f000 fa68 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y3, g_AM_BSP_CAM_Y3);
    d300:	4b2c      	ldr	r3, [pc, #176]	; (d3b4 <cameraSetup+0x104>)
    d302:	6819      	ldr	r1, [r3, #0]
    d304:	2005      	movs	r0, #5
    d306:	f000 fa63 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y4, g_AM_BSP_CAM_Y4);
    d30a:	4b2b      	ldr	r3, [pc, #172]	; (d3b8 <cameraSetup+0x108>)
    d30c:	6819      	ldr	r1, [r3, #0]
    d30e:	2004      	movs	r0, #4
    d310:	f000 fa5e 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y5, g_AM_BSP_CAM_Y5);
    d314:	4b29      	ldr	r3, [pc, #164]	; (d3bc <cameraSetup+0x10c>)
    d316:	6819      	ldr	r1, [r3, #0]
    d318:	2016      	movs	r0, #22
    d31a:	f000 fa59 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y6, g_AM_BSP_CAM_Y6);
    d31e:	4b28      	ldr	r3, [pc, #160]	; (d3c0 <cameraSetup+0x110>)
    d320:	6819      	ldr	r1, [r3, #0]
    d322:	2018      	movs	r0, #24
    d324:	f000 fa54 	bl	d7d0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y7, g_AM_BSP_CAM_Y7);
    d328:	4b26      	ldr	r3, [pc, #152]	; (d3c4 <cameraSetup+0x114>)
    d32a:	6819      	ldr	r1, [r3, #0]
    d32c:	201c      	movs	r0, #28
    d32e:	f000 fa4f 	bl	d7d0 <am_hal_gpio_pinconfig>
    // retval = am_hal_gpio_interrupt_register(AM_BSP_CAM_VSYNC, &edge_cam_int_vsync);
    // if(retval){ return retval; }


    // Enable interrupts
    retval = am_hal_gpio_interrupt_enable( (0b1 << AM_BSP_CAM_PCLK) );
    d332:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d336:	f04f 0100 	mov.w	r1, #0
    d33a:	f000 fc07 	bl	db4c <am_hal_gpio_interrupt_enable>
    d33e:	6078      	str	r0, [r7, #4]
    if(retval){ return retval; }
    d340:	687b      	ldr	r3, [r7, #4]
    d342:	2b00      	cmp	r3, #0
    d344:	d001      	beq.n	d34a <cameraSetup+0x9a>
    d346:	687b      	ldr	r3, [r7, #4]
    d348:	e021      	b.n	d38e <cameraSetup+0xde>
    retval = am_hal_gpio_interrupt_enable( (0b1 << AM_BSP_CAM_HREF) );
    d34a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    d34e:	f04f 0100 	mov.w	r1, #0
    d352:	f000 fbfb 	bl	db4c <am_hal_gpio_interrupt_enable>
    d356:	6078      	str	r0, [r7, #4]
    if(retval){ return retval; }    
    d358:	687b      	ldr	r3, [r7, #4]
    d35a:	2b00      	cmp	r3, #0
    d35c:	d001      	beq.n	d362 <cameraSetup+0xb2>
    d35e:	687b      	ldr	r3, [r7, #4]
    d360:	e015      	b.n	d38e <cameraSetup+0xde>
    retval = am_hal_gpio_interrupt_enable( (0b1 << AM_BSP_CAM_VSYNC) );
    d362:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d366:	f04f 0100 	mov.w	r1, #0
    d36a:	f000 fbef 	bl	db4c <am_hal_gpio_interrupt_enable>
    d36e:	6078      	str	r0, [r7, #4]
    if(retval){ return retval; }    
    d370:	687b      	ldr	r3, [r7, #4]
    d372:	2b00      	cmp	r3, #0
    d374:	d001      	beq.n	d37a <cameraSetup+0xca>
    d376:	687b      	ldr	r3, [r7, #4]
    d378:	e009      	b.n	d38e <cameraSetup+0xde>

    //
    // Enable interrupts.
    //
    NVIC_EnableIRQ(GPIO_IRQn);
    d37a:	200d      	movs	r0, #13
    d37c:	f7ff ff7a 	bl	d274 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    d380:	f000 fc54 	bl	dc2c <am_hal_interrupt_master_enable>

    //
    // Configure clock source
    //
    am_hal_clkgen_clkout_enable (1, 26); // 26 = HFRC/4, 27=HFRC/8
    d384:	211a      	movs	r1, #26
    d386:	2001      	movs	r0, #1
    d388:	f000 f9ce 	bl	d728 <am_hal_clkgen_clkout_enable>

    return retval;
    d38c:	687b      	ldr	r3, [r7, #4]
}
    d38e:	4618      	mov	r0, r3
    d390:	3708      	adds	r7, #8
    d392:	46bd      	mov	sp, r7
    d394:	bd80      	pop	{r7, pc}
    d396:	bf00      	nop
    d398:	0000ea7c 	.word	0x0000ea7c
    d39c:	0000ea74 	.word	0x0000ea74
    d3a0:	0000ea70 	.word	0x0000ea70
    d3a4:	0000ea78 	.word	0x0000ea78
    d3a8:	0000ea80 	.word	0x0000ea80
    d3ac:	0000ea84 	.word	0x0000ea84
    d3b0:	0000ea88 	.word	0x0000ea88
    d3b4:	0000ea8c 	.word	0x0000ea8c
    d3b8:	0000ea90 	.word	0x0000ea90
    d3bc:	0000ea94 	.word	0x0000ea94
    d3c0:	0000ea98 	.word	0x0000ea98
    d3c4:	0000ea9c 	.word	0x0000ea9c

0000d3c8 <edge_cam_isr>:


void edge_cam_isr( uint64_t ui64IntMask ){
    d3c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    d3cc:	b082      	sub	sp, #8
    d3ce:	af00      	add	r7, sp, #0
    d3d0:	e9c7 0100 	strd	r0, r1, [r7]
    // Conditionally call the camera interrupts if their bits are set. Use the priority that makes the most sense

    // if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_PCLK + 4) )){
    if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_PCLK + 0) )){
    d3d4:	e9d7 0100 	ldrd	r0, r1, [r7]
    d3d8:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
    d3dc:	f04f 0b00 	mov.w	fp, #0
    d3e0:	ea00 020a 	and.w	r2, r0, sl
    d3e4:	ea01 030b 	and.w	r3, r1, fp
    d3e8:	4313      	orrs	r3, r2
    d3ea:	d001      	beq.n	d3f0 <edge_cam_isr+0x28>
        edge_cam_int_pclk();
    d3ec:	f000 f824 	bl	d438 <edge_cam_int_pclk>
    }
    // if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_HREF + 4) )){
    if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_HREF + 0) )){
    d3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
    d3f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    d3f8:	f04f 0100 	mov.w	r1, #0
    d3fc:	ea02 0800 	and.w	r8, r2, r0
    d400:	ea03 0901 	and.w	r9, r3, r1
    d404:	ea58 0309 	orrs.w	r3, r8, r9
    d408:	d001      	beq.n	d40e <edge_cam_isr+0x46>
        edge_cam_int_href();
    d40a:	f000 f81f 	bl	d44c <edge_cam_int_href>
    }
    // if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_VSYNC + 4) )){
    if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_VSYNC + 0) )){
    d40e:	e9d7 2300 	ldrd	r2, r3, [r7]
    d412:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d416:	f04f 0100 	mov.w	r1, #0
    d41a:	ea02 0400 	and.w	r4, r2, r0
    d41e:	ea03 0501 	and.w	r5, r3, r1
    d422:	ea54 0305 	orrs.w	r3, r4, r5
    d426:	d001      	beq.n	d42c <edge_cam_isr+0x64>
        edge_cam_int_vsync();
    d428:	f000 f81a 	bl	d460 <edge_cam_int_vsync>
    }
}
    d42c:	bf00      	nop
    d42e:	3708      	adds	r7, #8
    d430:	46bd      	mov	sp, r7
    d432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0000d438 <edge_cam_int_pclk>:

void edge_cam_int_pclk( void ){
    d438:	b580      	push	{r7, lr}
    d43a:	af00      	add	r7, sp, #0
    am_bsp_uart_string_print("PCLK INT!\r\n");
    d43c:	4802      	ldr	r0, [pc, #8]	; (d448 <edge_cam_int_pclk+0x10>)
    d43e:	f000 f819 	bl	d474 <am_bsp_uart_string_print>
}
    d442:	bf00      	nop
    d444:	bd80      	pop	{r7, pc}
    d446:	bf00      	nop
    d448:	0000ea20 	.word	0x0000ea20

0000d44c <edge_cam_int_href>:

void edge_cam_int_href( void ){
    d44c:	b580      	push	{r7, lr}
    d44e:	af00      	add	r7, sp, #0
    am_bsp_uart_string_print("HREF INT!\r\n");
    d450:	4802      	ldr	r0, [pc, #8]	; (d45c <edge_cam_int_href+0x10>)
    d452:	f000 f80f 	bl	d474 <am_bsp_uart_string_print>
}
    d456:	bf00      	nop
    d458:	bd80      	pop	{r7, pc}
    d45a:	bf00      	nop
    d45c:	0000ea2c 	.word	0x0000ea2c

0000d460 <edge_cam_int_vsync>:

void edge_cam_int_vsync( void ){
    d460:	b580      	push	{r7, lr}
    d462:	af00      	add	r7, sp, #0
    am_bsp_uart_string_print("VSYNC INT!\r\n");
    d464:	4802      	ldr	r0, [pc, #8]	; (d470 <edge_cam_int_vsync+0x10>)
    d466:	f000 f805 	bl	d474 <am_bsp_uart_string_print>
}
    d46a:	bf00      	nop
    d46c:	bd80      	pop	{r7, pc}
    d46e:	bf00      	nop
    d470:	0000ea38 	.word	0x0000ea38

0000d474 <am_bsp_uart_string_print>:
    d474:	b510      	push	{r4, lr}
    d476:	b086      	sub	sp, #24
    d478:	7804      	ldrb	r4, [r0, #0]
    d47a:	2300      	movs	r3, #0
    d47c:	9300      	str	r3, [sp, #0]
    d47e:	b13c      	cbz	r4, d490 <am_bsp_uart_string_print+0x1c>
    d480:	4603      	mov	r3, r0
    d482:	f1c0 0201 	rsb	r2, r0, #1
    d486:	18d4      	adds	r4, r2, r3
    d488:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d48c:	2900      	cmp	r1, #0
    d48e:	d1fa      	bne.n	d486 <am_bsp_uart_string_print+0x12>
    d490:	4b09      	ldr	r3, [pc, #36]	; (d4b8 <am_bsp_uart_string_print+0x44>)
    d492:	9002      	str	r0, [sp, #8]
    d494:	2200      	movs	r2, #0
    d496:	6818      	ldr	r0, [r3, #0]
    d498:	9403      	str	r4, [sp, #12]
    d49a:	f04f 33ff 	mov.w	r3, #4294967295
    d49e:	a901      	add	r1, sp, #4
    d4a0:	9304      	str	r3, [sp, #16]
    d4a2:	9201      	str	r2, [sp, #4]
    d4a4:	f8cd d014 	str.w	sp, [sp, #20]
    d4a8:	f000 ff54 	bl	e354 <am_hal_uart_transfer>
    d4ac:	9b00      	ldr	r3, [sp, #0]
    d4ae:	42a3      	cmp	r3, r4
    d4b0:	d000      	beq.n	d4b4 <am_bsp_uart_string_print+0x40>
    d4b2:	e7fe      	b.n	d4b2 <am_bsp_uart_string_print+0x3e>
    d4b4:	b006      	add	sp, #24
    d4b6:	bd10      	pop	{r4, pc}
    d4b8:	10001124 	.word	0x10001124

0000d4bc <am_bsp_low_power_init>:
    d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4be:	f000 fbc1 	bl	dc44 <am_hal_itm_disable>
    d4c2:	2000      	movs	r0, #0
    d4c4:	f7fe ffbe 	bl	c444 <am_util_stdio_printf_init>
    d4c8:	4b12      	ldr	r3, [pc, #72]	; (d514 <am_bsp_low_power_init+0x58>)
    d4ca:	4f13      	ldr	r7, [pc, #76]	; (d518 <am_bsp_low_power_init+0x5c>)
    d4cc:	6819      	ldr	r1, [r3, #0]
    d4ce:	2021      	movs	r0, #33	; 0x21
    d4d0:	f000 f97e 	bl	d7d0 <am_hal_gpio_pinconfig>
    d4d4:	f000 fcf8 	bl	dec8 <am_hal_pwrctrl_low_power_init>
    d4d8:	2001      	movs	r0, #1
    d4da:	f000 fd3f 	bl	df5c <am_hal_rtc_osc_select>
    d4de:	2100      	movs	r1, #0
    d4e0:	2003      	movs	r0, #3
    d4e2:	f000 f8b5 	bl	d650 <am_hal_clkgen_control>
    d4e6:	f000 fd45 	bl	df74 <am_hal_rtc_osc_disable>
    d4ea:	4b0c      	ldr	r3, [pc, #48]	; (d51c <am_bsp_low_power_init+0x60>)
    d4ec:	681e      	ldr	r6, [r3, #0]
    d4ee:	2400      	movs	r4, #0
    d4f0:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d4f4:	4631      	mov	r1, r6
    d4f6:	4628      	mov	r0, r5
    d4f8:	f000 f96a 	bl	d7d0 <am_hal_gpio_pinconfig>
    d4fc:	2103      	movs	r1, #3
    d4fe:	4628      	mov	r0, r5
    d500:	f000 fada 	bl	dab8 <am_hal_gpio_state_write>
    d504:	3401      	adds	r4, #1
    d506:	4628      	mov	r0, r5
    d508:	2100      	movs	r1, #0
    d50a:	f000 fad5 	bl	dab8 <am_hal_gpio_state_write>
    d50e:	2c04      	cmp	r4, #4
    d510:	d1ee      	bne.n	d4f0 <am_bsp_low_power_init+0x34>
    d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d514:	0000ebe0 	.word	0x0000ebe0
    d518:	10001000 	.word	0x10001000
    d51c:	0000ebe4 	.word	0x0000ebe4

0000d520 <am_bsp_debug_printf_disable>:
    d520:	b538      	push	{r3, r4, r5, lr}
    d522:	4b17      	ldr	r3, [pc, #92]	; (d580 <am_bsp_debug_printf_disable+0x60>)
    d524:	681c      	ldr	r4, [r3, #0]
    d526:	2c01      	cmp	r4, #1
    d528:	d002      	beq.n	d530 <am_bsp_debug_printf_disable+0x10>
    d52a:	2c02      	cmp	r4, #2
    d52c:	d00c      	beq.n	d548 <am_bsp_debug_printf_disable+0x28>
    d52e:	bd38      	pop	{r3, r4, r5, pc}
    d530:	f000 fb88 	bl	dc44 <am_hal_itm_disable>
    d534:	2000      	movs	r0, #0
    d536:	f7fe ff85 	bl	c444 <am_util_stdio_printf_init>
    d53a:	4b12      	ldr	r3, [pc, #72]	; (d584 <am_bsp_debug_printf_disable+0x64>)
    d53c:	2021      	movs	r0, #33	; 0x21
    d53e:	6819      	ldr	r1, [r3, #0]
    d540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d544:	f000 b944 	b.w	d7d0 <am_hal_gpio_pinconfig>
    d548:	4d0f      	ldr	r5, [pc, #60]	; (d588 <am_bsp_debug_printf_disable+0x68>)
    d54a:	6828      	ldr	r0, [r5, #0]
    d54c:	f001 f93c 	bl	e7c8 <am_hal_uart_tx_flush>
    d550:	2000      	movs	r0, #0
    d552:	f7fe ff77 	bl	c444 <am_util_stdio_printf_init>
    d556:	4621      	mov	r1, r4
    d558:	2200      	movs	r2, #0
    d55a:	6828      	ldr	r0, [r5, #0]
    d55c:	f000 fd7c 	bl	e058 <am_hal_uart_power_control>
    d560:	6828      	ldr	r0, [r5, #0]
    d562:	f000 fd65 	bl	e030 <am_hal_uart_deinitialize>
    d566:	4b07      	ldr	r3, [pc, #28]	; (d584 <am_bsp_debug_printf_disable+0x64>)
    d568:	681c      	ldr	r4, [r3, #0]
    d56a:	2030      	movs	r0, #48	; 0x30
    d56c:	4621      	mov	r1, r4
    d56e:	f000 f92f 	bl	d7d0 <am_hal_gpio_pinconfig>
    d572:	4621      	mov	r1, r4
    d574:	2031      	movs	r0, #49	; 0x31
    d576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d57a:	f000 b929 	b.w	d7d0 <am_hal_gpio_pinconfig>
    d57e:	bf00      	nop
    d580:	10001128 	.word	0x10001128
    d584:	0000ebe0 	.word	0x0000ebe0
    d588:	10001124 	.word	0x10001124

0000d58c <am_bsp_uart_printf_enable>:
    d58c:	b510      	push	{r4, lr}
    d58e:	4c10      	ldr	r4, [pc, #64]	; (d5d0 <am_bsp_uart_printf_enable+0x44>)
    d590:	4b10      	ldr	r3, [pc, #64]	; (d5d4 <am_bsp_uart_printf_enable+0x48>)
    d592:	4621      	mov	r1, r4
    d594:	2202      	movs	r2, #2
    d596:	2000      	movs	r0, #0
    d598:	601a      	str	r2, [r3, #0]
    d59a:	f000 fd21 	bl	dfe0 <am_hal_uart_initialize>
    d59e:	2200      	movs	r2, #0
    d5a0:	4611      	mov	r1, r2
    d5a2:	6820      	ldr	r0, [r4, #0]
    d5a4:	f000 fd58 	bl	e058 <am_hal_uart_power_control>
    d5a8:	6820      	ldr	r0, [r4, #0]
    d5aa:	490b      	ldr	r1, [pc, #44]	; (d5d8 <am_bsp_uart_printf_enable+0x4c>)
    d5ac:	f000 fdc6 	bl	e13c <am_hal_uart_configure>
    d5b0:	4b0a      	ldr	r3, [pc, #40]	; (d5dc <am_bsp_uart_printf_enable+0x50>)
    d5b2:	2030      	movs	r0, #48	; 0x30
    d5b4:	6819      	ldr	r1, [r3, #0]
    d5b6:	f000 f90b 	bl	d7d0 <am_hal_gpio_pinconfig>
    d5ba:	4b09      	ldr	r3, [pc, #36]	; (d5e0 <am_bsp_uart_printf_enable+0x54>)
    d5bc:	2031      	movs	r0, #49	; 0x31
    d5be:	6819      	ldr	r1, [r3, #0]
    d5c0:	f000 f906 	bl	d7d0 <am_hal_gpio_pinconfig>
    d5c4:	4807      	ldr	r0, [pc, #28]	; (d5e4 <am_bsp_uart_printf_enable+0x58>)
    d5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5ca:	f7fe bf3b 	b.w	c444 <am_util_stdio_printf_init>
    d5ce:	bf00      	nop
    d5d0:	10001124 	.word	0x10001124
    d5d4:	10001128 	.word	0x10001128
    d5d8:	0000ea48 	.word	0x0000ea48
    d5dc:	0000eaa4 	.word	0x0000eaa4
    d5e0:	0000eaa0 	.word	0x0000eaa0
    d5e4:	0000d475 	.word	0x0000d475

0000d5e8 <am_hal_cachectrl_config>:
    d5e8:	b530      	push	{r4, r5, lr}
    d5ea:	b083      	sub	sp, #12
    d5ec:	4605      	mov	r5, r0
    d5ee:	f000 fb21 	bl	dc34 <am_hal_interrupt_master_disable>
    d5f2:	4c11      	ldr	r4, [pc, #68]	; (d638 <am_hal_cachectrl_config+0x50>)
    d5f4:	9001      	str	r0, [sp, #4]
    d5f6:	6823      	ldr	r3, [r4, #0]
    d5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d5fc:	6023      	str	r3, [r4, #0]
    d5fe:	9801      	ldr	r0, [sp, #4]
    d600:	f000 fb1c 	bl	dc3c <am_hal_interrupt_master_set>
    d604:	78eb      	ldrb	r3, [r5, #3]
    d606:	782a      	ldrb	r2, [r5, #0]
    d608:	78a8      	ldrb	r0, [r5, #2]
    d60a:	7869      	ldrb	r1, [r5, #1]
    d60c:	005b      	lsls	r3, r3, #1
    d60e:	0112      	lsls	r2, r2, #4
    d610:	b2d2      	uxtb	r2, r2
    d612:	f003 0302 	and.w	r3, r3, #2
    d616:	4313      	orrs	r3, r2
    d618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d61c:	0080      	lsls	r0, r0, #2
    d61e:	f000 000c 	and.w	r0, r0, #12
    d622:	020a      	lsls	r2, r1, #8
    d624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d628:	4303      	orrs	r3, r0
    d62a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d62e:	4313      	orrs	r3, r2
    d630:	2000      	movs	r0, #0
    d632:	6023      	str	r3, [r4, #0]
    d634:	b003      	add	sp, #12
    d636:	bd30      	pop	{r4, r5, pc}
    d638:	40018000 	.word	0x40018000

0000d63c <am_hal_cachectrl_enable>:
    d63c:	4a03      	ldr	r2, [pc, #12]	; (d64c <am_hal_cachectrl_enable+0x10>)
    d63e:	6813      	ldr	r3, [r2, #0]
    d640:	f043 0301 	orr.w	r3, r3, #1
    d644:	6013      	str	r3, [r2, #0]
    d646:	2000      	movs	r0, #0
    d648:	4770      	bx	lr
    d64a:	bf00      	nop
    d64c:	40018000 	.word	0x40018000

0000d650 <am_hal_clkgen_control>:
    d650:	4b32      	ldr	r3, [pc, #200]	; (d71c <am_hal_clkgen_control+0xcc>)
    d652:	681a      	ldr	r2, [r3, #0]
    d654:	b912      	cbnz	r2, d65c <am_hal_clkgen_control+0xc>
    d656:	4a32      	ldr	r2, [pc, #200]	; (d720 <am_hal_clkgen_control+0xd0>)
    d658:	6812      	ldr	r2, [r2, #0]
    d65a:	601a      	str	r2, [r3, #0]
    d65c:	2809      	cmp	r0, #9
    d65e:	d85a      	bhi.n	d716 <am_hal_clkgen_control+0xc6>
    d660:	e8df f000 	tbb	[pc, r0]
    d664:	261e160d 	.word	0x261e160d
    d668:	4640362e 	.word	0x4640362e
    d66c:	054e      	.short	0x054e
    d66e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d672:	2000      	movs	r0, #0
    d674:	6a1a      	ldr	r2, [r3, #32]
    d676:	f36f 0200 	bfc	r2, #0, #1
    d67a:	621a      	str	r2, [r3, #32]
    d67c:	4770      	bx	lr
    d67e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d682:	2200      	movs	r2, #0
    d684:	2147      	movs	r1, #71	; 0x47
    d686:	6159      	str	r1, [r3, #20]
    d688:	4610      	mov	r0, r2
    d68a:	619a      	str	r2, [r3, #24]
    d68c:	615a      	str	r2, [r3, #20]
    d68e:	4770      	bx	lr
    d690:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d694:	2000      	movs	r0, #0
    d696:	68d3      	ldr	r3, [r2, #12]
    d698:	f023 0301 	bic.w	r3, r3, #1
    d69c:	60d3      	str	r3, [r2, #12]
    d69e:	4770      	bx	lr
    d6a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6a4:	2000      	movs	r0, #0
    d6a6:	68d3      	ldr	r3, [r2, #12]
    d6a8:	f023 0302 	bic.w	r3, r3, #2
    d6ac:	60d3      	str	r3, [r2, #12]
    d6ae:	4770      	bx	lr
    d6b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6b4:	2000      	movs	r0, #0
    d6b6:	68d3      	ldr	r3, [r2, #12]
    d6b8:	f043 0301 	orr.w	r3, r3, #1
    d6bc:	60d3      	str	r3, [r2, #12]
    d6be:	4770      	bx	lr
    d6c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6c4:	2000      	movs	r0, #0
    d6c6:	68d3      	ldr	r3, [r2, #12]
    d6c8:	f043 0302 	orr.w	r3, r3, #2
    d6cc:	60d3      	str	r3, [r2, #12]
    d6ce:	4770      	bx	lr
    d6d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6d4:	2200      	movs	r2, #0
    d6d6:	2047      	movs	r0, #71	; 0x47
    d6d8:	2101      	movs	r1, #1
    d6da:	6158      	str	r0, [r3, #20]
    d6dc:	6199      	str	r1, [r3, #24]
    d6de:	4610      	mov	r0, r2
    d6e0:	615a      	str	r2, [r3, #20]
    d6e2:	4770      	bx	lr
    d6e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6e8:	2000      	movs	r0, #0
    d6ea:	68da      	ldr	r2, [r3, #12]
    d6ec:	60da      	str	r2, [r3, #12]
    d6ee:	4770      	bx	lr
    d6f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d6f4:	2000      	movs	r0, #0
    d6f6:	68d3      	ldr	r3, [r2, #12]
    d6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d6fc:	60d3      	str	r3, [r2, #12]
    d6fe:	4770      	bx	lr
    d700:	b139      	cbz	r1, d712 <am_hal_clkgen_control+0xc2>
    d702:	680b      	ldr	r3, [r1, #0]
    d704:	f043 0301 	orr.w	r3, r3, #1
    d708:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d70c:	2000      	movs	r0, #0
    d70e:	6213      	str	r3, [r2, #32]
    d710:	4770      	bx	lr
    d712:	4b04      	ldr	r3, [pc, #16]	; (d724 <am_hal_clkgen_control+0xd4>)
    d714:	e7f8      	b.n	d708 <am_hal_clkgen_control+0xb8>
    d716:	2006      	movs	r0, #6
    d718:	4770      	bx	lr
    d71a:	bf00      	nop
    d71c:	1000112c 	.word	0x1000112c
    d720:	4ffff000 	.word	0x4ffff000
    d724:	0025b801 	.word	0x0025b801

0000d728 <am_hal_clkgen_clkout_enable>:
    d728:	4603      	mov	r3, r0
    d72a:	b928      	cbnz	r0, d738 <am_hal_clkgen_clkout_enable+0x10>
    d72c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    d730:	7c02      	ldrb	r2, [r0, #16]
    d732:	f363 12c7 	bfi	r2, r3, #7, #1
    d736:	7402      	strb	r2, [r0, #16]
    d738:	2939      	cmp	r1, #57	; 0x39
    d73a:	d901      	bls.n	d740 <am_hal_clkgen_clkout_enable+0x18>
    d73c:	2006      	movs	r0, #6
    d73e:	4770      	bx	lr
    d740:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d744:	6910      	ldr	r0, [r2, #16]
    d746:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d74a:	4288      	cmp	r0, r1
    d74c:	d007      	beq.n	d75e <am_hal_clkgen_clkout_enable+0x36>
    d74e:	7c10      	ldrb	r0, [r2, #16]
    d750:	f36f 10c7 	bfc	r0, #7, #1
    d754:	7410      	strb	r0, [r2, #16]
    d756:	7c10      	ldrb	r0, [r2, #16]
    d758:	f361 0005 	bfi	r0, r1, #0, #6
    d75c:	7410      	strb	r0, [r2, #16]
    d75e:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d762:	2000      	movs	r0, #0
    d764:	7c0a      	ldrb	r2, [r1, #16]
    d766:	f363 12c7 	bfi	r2, r3, #7, #1
    d76a:	740a      	strb	r2, [r1, #16]
    d76c:	4770      	bx	lr
    d76e:	bf00      	nop

0000d770 <am_hal_flash_delay>:
    d770:	4b00      	ldr	r3, [pc, #0]	; (d774 <am_hal_flash_delay+0x4>)
    d772:	4718      	bx	r3
    d774:	0800009d 	.word	0x0800009d

0000d778 <am_hal_flash_delay_status_check>:
    d778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d77c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    d780:	460d      	mov	r5, r1
    d782:	4616      	mov	r6, r2
    d784:	461f      	mov	r7, r3
    d786:	b17c      	cbz	r4, d7a8 <am_hal_flash_delay_status_check+0x30>
    d788:	4604      	mov	r4, r0
    d78a:	f8df 8040 	ldr.w	r8, [pc, #64]	; d7cc <am_hal_flash_delay_status_check+0x54>
    d78e:	e002      	b.n	d796 <am_hal_flash_delay_status_check+0x1e>
    d790:	b1c4      	cbz	r4, d7c4 <am_hal_flash_delay_status_check+0x4c>
    d792:	47c0      	blx	r8
    d794:	3c01      	subs	r4, #1
    d796:	682b      	ldr	r3, [r5, #0]
    d798:	4033      	ands	r3, r6
    d79a:	429f      	cmp	r7, r3
    d79c:	f04f 0001 	mov.w	r0, #1
    d7a0:	d1f6      	bne.n	d790 <am_hal_flash_delay_status_check+0x18>
    d7a2:	2000      	movs	r0, #0
    d7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7a8:	f8df 8020 	ldr.w	r8, [pc, #32]	; d7cc <am_hal_flash_delay_status_check+0x54>
    d7ac:	4604      	mov	r4, r0
    d7ae:	e002      	b.n	d7b6 <am_hal_flash_delay_status_check+0x3e>
    d7b0:	b144      	cbz	r4, d7c4 <am_hal_flash_delay_status_check+0x4c>
    d7b2:	47c0      	blx	r8
    d7b4:	3c01      	subs	r4, #1
    d7b6:	682b      	ldr	r3, [r5, #0]
    d7b8:	4033      	ands	r3, r6
    d7ba:	429f      	cmp	r7, r3
    d7bc:	f04f 0001 	mov.w	r0, #1
    d7c0:	d0f6      	beq.n	d7b0 <am_hal_flash_delay_status_check+0x38>
    d7c2:	e7ee      	b.n	d7a2 <am_hal_flash_delay_status_check+0x2a>
    d7c4:	2004      	movs	r0, #4
    d7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7ca:	bf00      	nop
    d7cc:	0800009d 	.word	0x0800009d

0000d7d0 <am_hal_gpio_pinconfig>:
    d7d0:	2831      	cmp	r0, #49	; 0x31
    d7d2:	d901      	bls.n	d7d8 <am_hal_gpio_pinconfig+0x8>
    d7d4:	2006      	movs	r0, #6
    d7d6:	4770      	bx	lr
    d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7dc:	f001 0307 	and.w	r3, r1, #7
    d7e0:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    d7e4:	b085      	sub	sp, #20
    d7e6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    d7ea:	d014      	beq.n	d816 <am_hal_gpio_pinconfig+0x46>
    d7ec:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d7f0:	1db4      	adds	r4, r6, #6
    d7f2:	f004 0407 	and.w	r4, r4, #7
    d7f6:	2c03      	cmp	r4, #3
    d7f8:	f042 0201 	orr.w	r2, r2, #1
    d7fc:	f200 80ae 	bhi.w	d95c <am_hal_gpio_pinconfig+0x18c>
    d800:	4c85      	ldr	r4, [pc, #532]	; (da18 <am_hal_gpio_pinconfig+0x248>)
    d802:	5c24      	ldrb	r4, [r4, r0]
    d804:	07e7      	lsls	r7, r4, #31
    d806:	d403      	bmi.n	d810 <am_hal_gpio_pinconfig+0x40>
    d808:	4884      	ldr	r0, [pc, #528]	; (da1c <am_hal_gpio_pinconfig+0x24c>)
    d80a:	b005      	add	sp, #20
    d80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d810:	3e02      	subs	r6, #2
    d812:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d816:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    d81a:	2c00      	cmp	r4, #0
    d81c:	f040 8098 	bne.w	d950 <am_hal_gpio_pinconfig+0x180>
    d820:	4c7f      	ldr	r4, [pc, #508]	; (da20 <am_hal_gpio_pinconfig+0x250>)
    d822:	4d80      	ldr	r5, [pc, #512]	; (da24 <am_hal_gpio_pinconfig+0x254>)
    d824:	5c24      	ldrb	r4, [r4, r0]
    d826:	5c2d      	ldrb	r5, [r5, r0]
    d828:	411c      	asrs	r4, r3
    d82a:	f014 0f01 	tst.w	r4, #1
    d82e:	bf0c      	ite	eq
    d830:	2400      	moveq	r4, #0
    d832:	2402      	movne	r4, #2
    d834:	42ab      	cmp	r3, r5
    d836:	ea42 0204 	orr.w	r2, r2, r4
    d83a:	f000 809b 	beq.w	d974 <am_hal_gpio_pinconfig+0x1a4>
    d83e:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d842:	105d      	asrs	r5, r3, #1
    d844:	f3c1 2681 	ubfx	r6, r1, #10, #2
    d848:	00db      	lsls	r3, r3, #3
    d84a:	f3c1 2707 	ubfx	r7, r1, #8, #8
    d84e:	f003 0408 	and.w	r4, r3, #8
    d852:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    d856:	f007 060c 	and.w	r6, r7, #12
    d85a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    d85e:	2e04      	cmp	r6, #4
    d860:	ea43 0304 	orr.w	r3, r3, r4
    d864:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d868:	462c      	mov	r4, r5
    d86a:	f000 8090 	beq.w	d98e <am_hal_gpio_pinconfig+0x1be>
    d86e:	4c6e      	ldr	r4, [pc, #440]	; (da28 <am_hal_gpio_pinconfig+0x258>)
    d870:	6824      	ldr	r4, [r4, #0]
    d872:	ebc4 0901 	rsb	r9, r4, r1
    d876:	fab9 f989 	clz	r9, r9
    d87a:	ea4f 1959 	mov.w	r9, r9, lsr #5
    d87e:	f017 0f60 	tst.w	r7, #96	; 0x60
    d882:	bf04      	itt	eq
    d884:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    d888:	f364 0300 	bfieq	r3, r4, #0, #1
    d88c:	0084      	lsls	r4, r0, #2
    d88e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d892:	2902      	cmp	r1, #2
    d894:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d898:	d07c      	beq.n	d994 <am_hal_gpio_pinconfig+0x1c4>
    d89a:	f200 8082 	bhi.w	d9a2 <am_hal_gpio_pinconfig+0x1d2>
    d89e:	2901      	cmp	r1, #1
    d8a0:	bf08      	it	eq
    d8a2:	f042 0204 	orreq.w	r2, r2, #4
    d8a6:	f005 0518 	and.w	r5, r5, #24
    d8aa:	f04f 0800 	mov.w	r8, #0
    d8ae:	f004 041c 	and.w	r4, r4, #28
    d8b2:	0841      	lsrs	r1, r0, #1
    d8b4:	f020 0a03 	bic.w	sl, r0, #3
    d8b8:	270f      	movs	r7, #15
    d8ba:	f021 0103 	bic.w	r1, r1, #3
    d8be:	40a7      	lsls	r7, r4
    d8c0:	26ff      	movs	r6, #255	; 0xff
    d8c2:	fa03 f404 	lsl.w	r4, r3, r4
    d8c6:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    d8ca:	40ae      	lsls	r6, r5
    d8cc:	9101      	str	r1, [sp, #4]
    d8ce:	9300      	str	r3, [sp, #0]
    d8d0:	4683      	mov	fp, r0
    d8d2:	fa02 f505 	lsl.w	r5, r2, r5
    d8d6:	f000 f9ad 	bl	dc34 <am_hal_interrupt_master_disable>
    d8da:	9b00      	ldr	r3, [sp, #0]
    d8dc:	9003      	str	r0, [sp, #12]
    d8de:	43ff      	mvns	r7, r7
    d8e0:	43f6      	mvns	r6, r6
    d8e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d8e6:	f8df e160 	ldr.w	lr, [pc, #352]	; da48 <am_hal_gpio_pinconfig+0x278>
    d8ea:	4850      	ldr	r0, [pc, #320]	; (da2c <am_hal_gpio_pinconfig+0x25c>)
    d8ec:	9901      	ldr	r1, [sp, #4]
    d8ee:	f1b9 0f00 	cmp.w	r9, #0
    d8f2:	d00b      	beq.n	d90c <am_hal_gpio_pinconfig+0x13c>
    d8f4:	f00b 021f 	and.w	r2, fp, #31
    d8f8:	f04f 0901 	mov.w	r9, #1
    d8fc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    d900:	f8df c148 	ldr.w	ip, [pc, #328]	; da4c <am_hal_gpio_pinconfig+0x27c>
    d904:	fa09 f202 	lsl.w	r2, r9, r2
    d908:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    d90c:	4a48      	ldr	r2, [pc, #288]	; (da30 <am_hal_gpio_pinconfig+0x260>)
    d90e:	f04f 0c73 	mov.w	ip, #115	; 0x73
    d912:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    d916:	f8d3 c000 	ldr.w	ip, [r3]
    d91a:	ea06 0c0c 	and.w	ip, r6, ip
    d91e:	ea4c 0505 	orr.w	r5, ip, r5
    d922:	601d      	str	r5, [r3, #0]
    d924:	f851 300e 	ldr.w	r3, [r1, lr]
    d928:	403b      	ands	r3, r7
    d92a:	4323      	orrs	r3, r4
    d92c:	f841 300e 	str.w	r3, [r1, lr]
    d930:	f85a 3000 	ldr.w	r3, [sl, r0]
    d934:	401e      	ands	r6, r3
    d936:	2400      	movs	r4, #0
    d938:	ea46 0608 	orr.w	r6, r6, r8
    d93c:	f84a 6000 	str.w	r6, [sl, r0]
    d940:	6614      	str	r4, [r2, #96]	; 0x60
    d942:	9803      	ldr	r0, [sp, #12]
    d944:	f000 f97a 	bl	dc3c <am_hal_interrupt_master_set>
    d948:	4620      	mov	r0, r4
    d94a:	b005      	add	sp, #20
    d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d950:	2c01      	cmp	r4, #1
    d952:	d015      	beq.n	d980 <am_hal_gpio_pinconfig+0x1b0>
    d954:	2c02      	cmp	r4, #2
    d956:	d032      	beq.n	d9be <am_hal_gpio_pinconfig+0x1ee>
    d958:	4836      	ldr	r0, [pc, #216]	; (da34 <am_hal_gpio_pinconfig+0x264>)
    d95a:	e756      	b.n	d80a <am_hal_gpio_pinconfig+0x3a>
    d95c:	2dc0      	cmp	r5, #192	; 0xc0
    d95e:	d029      	beq.n	d9b4 <am_hal_gpio_pinconfig+0x1e4>
    d960:	2d20      	cmp	r5, #32
    d962:	f47f af58 	bne.w	d816 <am_hal_gpio_pinconfig+0x46>
    d966:	4c2c      	ldr	r4, [pc, #176]	; (da18 <am_hal_gpio_pinconfig+0x248>)
    d968:	5c24      	ldrb	r4, [r4, r0]
    d96a:	f014 0f09 	tst.w	r4, #9
    d96e:	f47f af4b 	bne.w	d808 <am_hal_gpio_pinconfig+0x38>
    d972:	e750      	b.n	d816 <am_hal_gpio_pinconfig+0x46>
    d974:	f3c1 4402 	ubfx	r4, r1, #16, #3
    d978:	2c07      	cmp	r4, #7
    d97a:	d127      	bne.n	d9cc <am_hal_gpio_pinconfig+0x1fc>
    d97c:	482e      	ldr	r0, [pc, #184]	; (da38 <am_hal_gpio_pinconfig+0x268>)
    d97e:	e744      	b.n	d80a <am_hal_gpio_pinconfig+0x3a>
    d980:	4c25      	ldr	r4, [pc, #148]	; (da18 <am_hal_gpio_pinconfig+0x248>)
    d982:	5c24      	ldrb	r4, [r4, r0]
    d984:	07a5      	lsls	r5, r4, #30
    d986:	d5e7      	bpl.n	d958 <am_hal_gpio_pinconfig+0x188>
    d988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d98c:	e748      	b.n	d820 <am_hal_gpio_pinconfig+0x50>
    d98e:	f04f 0901 	mov.w	r9, #1
    d992:	e774      	b.n	d87e <am_hal_gpio_pinconfig+0xae>
    d994:	f005 0518 	and.w	r5, r5, #24
    d998:	f04f 0801 	mov.w	r8, #1
    d99c:	fa08 f805 	lsl.w	r8, r8, r5
    d9a0:	e785      	b.n	d8ae <am_hal_gpio_pinconfig+0xde>
    d9a2:	f005 0518 	and.w	r5, r5, #24
    d9a6:	f04f 0801 	mov.w	r8, #1
    d9aa:	f042 0204 	orr.w	r2, r2, #4
    d9ae:	fa08 f805 	lsl.w	r8, r8, r5
    d9b2:	e77c      	b.n	d8ae <am_hal_gpio_pinconfig+0xde>
    d9b4:	2814      	cmp	r0, #20
    d9b6:	f43f af2e 	beq.w	d816 <am_hal_gpio_pinconfig+0x46>
    d9ba:	4820      	ldr	r0, [pc, #128]	; (da3c <am_hal_gpio_pinconfig+0x26c>)
    d9bc:	e725      	b.n	d80a <am_hal_gpio_pinconfig+0x3a>
    d9be:	4c16      	ldr	r4, [pc, #88]	; (da18 <am_hal_gpio_pinconfig+0x248>)
    d9c0:	5c24      	ldrb	r4, [r4, r0]
    d9c2:	0764      	lsls	r4, r4, #29
    d9c4:	d5c8      	bpl.n	d958 <am_hal_gpio_pinconfig+0x188>
    d9c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d9ca:	e729      	b.n	d820 <am_hal_gpio_pinconfig+0x50>
    d9cc:	4d1c      	ldr	r5, [pc, #112]	; (da40 <am_hal_gpio_pinconfig+0x270>)
    d9ce:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    d9d2:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    d9d6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    d9da:	429e      	cmp	r6, r3
    d9dc:	d00c      	beq.n	d9f8 <am_hal_gpio_pinconfig+0x228>
    d9de:	0084      	lsls	r4, r0, #2
    d9e0:	4425      	add	r5, r4
    d9e2:	786e      	ldrb	r6, [r5, #1]
    d9e4:	429e      	cmp	r6, r3
    d9e6:	d013      	beq.n	da10 <am_hal_gpio_pinconfig+0x240>
    d9e8:	78ae      	ldrb	r6, [r5, #2]
    d9ea:	429e      	cmp	r6, r3
    d9ec:	d00e      	beq.n	da0c <am_hal_gpio_pinconfig+0x23c>
    d9ee:	78ed      	ldrb	r5, [r5, #3]
    d9f0:	429d      	cmp	r5, r3
    d9f2:	d00f      	beq.n	da14 <am_hal_gpio_pinconfig+0x244>
    d9f4:	4813      	ldr	r0, [pc, #76]	; (da44 <am_hal_gpio_pinconfig+0x274>)
    d9f6:	e708      	b.n	d80a <am_hal_gpio_pinconfig+0x3a>
    d9f8:	2300      	movs	r3, #0
    d9fa:	0084      	lsls	r4, r0, #2
    d9fc:	005b      	lsls	r3, r3, #1
    d9fe:	f3c1 5540 	ubfx	r5, r1, #21, #1
    da02:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    da06:	f04f 0900 	mov.w	r9, #0
    da0a:	e740      	b.n	d88e <am_hal_gpio_pinconfig+0xbe>
    da0c:	2302      	movs	r3, #2
    da0e:	e7f5      	b.n	d9fc <am_hal_gpio_pinconfig+0x22c>
    da10:	2301      	movs	r3, #1
    da12:	e7f3      	b.n	d9fc <am_hal_gpio_pinconfig+0x22c>
    da14:	2303      	movs	r3, #3
    da16:	e7f1      	b.n	d9fc <am_hal_gpio_pinconfig+0x22c>
    da18:	0000eab0 	.word	0x0000eab0
    da1c:	08000100 	.word	0x08000100
    da20:	0000ebac 	.word	0x0000ebac
    da24:	0000ebe8 	.word	0x0000ebe8
    da28:	0000ebe0 	.word	0x0000ebe0
    da2c:	400100e0 	.word	0x400100e0
    da30:	40010000 	.word	0x40010000
    da34:	08000102 	.word	0x08000102
    da38:	08000103 	.word	0x08000103
    da3c:	08000101 	.word	0x08000101
    da40:	0000eae4 	.word	0x0000eae4
    da44:	08000104 	.word	0x08000104
    da48:	40010040 	.word	0x40010040
    da4c:	400100b4 	.word	0x400100b4

0000da50 <am_hal_gpio_state_read>:
    da50:	b1ca      	cbz	r2, da86 <am_hal_gpio_state_read+0x36>
    da52:	2831      	cmp	r0, #49	; 0x31
    da54:	d904      	bls.n	da60 <am_hal_gpio_state_read+0x10>
    da56:	f04f 33ff 	mov.w	r3, #4294967295
    da5a:	6013      	str	r3, [r2, #0]
    da5c:	2005      	movs	r0, #5
    da5e:	4770      	bx	lr
    da60:	2901      	cmp	r1, #1
    da62:	ea4f 1350 	mov.w	r3, r0, lsr #5
    da66:	f000 001f 	and.w	r0, r0, #31
    da6a:	d00e      	beq.n	da8a <am_hal_gpio_state_read+0x3a>
    da6c:	d315      	bcc.n	da9a <am_hal_gpio_state_read+0x4a>
    da6e:	2902      	cmp	r1, #2
    da70:	d109      	bne.n	da86 <am_hal_gpio_state_read+0x36>
    da72:	490e      	ldr	r1, [pc, #56]	; (daac <am_hal_gpio_state_read+0x5c>)
    da74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    da78:	fa23 f000 	lsr.w	r0, r3, r0
    da7c:	f000 0001 	and.w	r0, r0, #1
    da80:	6010      	str	r0, [r2, #0]
    da82:	2000      	movs	r0, #0
    da84:	4770      	bx	lr
    da86:	2006      	movs	r0, #6
    da88:	4770      	bx	lr
    da8a:	4909      	ldr	r1, [pc, #36]	; (dab0 <am_hal_gpio_state_read+0x60>)
    da8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    da90:	fa23 f000 	lsr.w	r0, r3, r0
    da94:	f000 0001 	and.w	r0, r0, #1
    da98:	e7f2      	b.n	da80 <am_hal_gpio_state_read+0x30>
    da9a:	4906      	ldr	r1, [pc, #24]	; (dab4 <am_hal_gpio_state_read+0x64>)
    da9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    daa0:	fa23 f000 	lsr.w	r0, r3, r0
    daa4:	f000 0001 	and.w	r0, r0, #1
    daa8:	e7ea      	b.n	da80 <am_hal_gpio_state_read+0x30>
    daaa:	bf00      	nop
    daac:	400100a0 	.word	0x400100a0
    dab0:	40010088 	.word	0x40010088
    dab4:	40010080 	.word	0x40010080

0000dab8 <am_hal_gpio_state_write>:
    dab8:	2831      	cmp	r0, #49	; 0x31
    daba:	d901      	bls.n	dac0 <am_hal_gpio_state_write+0x8>
    dabc:	2005      	movs	r0, #5
    dabe:	4770      	bx	lr
    dac0:	2905      	cmp	r1, #5
    dac2:	d901      	bls.n	dac8 <am_hal_gpio_state_write+0x10>
    dac4:	2006      	movs	r0, #6
    dac6:	4770      	bx	lr
    dac8:	b570      	push	{r4, r5, r6, lr}
    daca:	f000 031f 	and.w	r3, r0, #31
    dace:	b082      	sub	sp, #8
    dad0:	2201      	movs	r2, #1
    dad2:	460d      	mov	r5, r1
    dad4:	4604      	mov	r4, r0
    dad6:	fa02 f603 	lsl.w	r6, r2, r3
    dada:	f000 f8ab 	bl	dc34 <am_hal_interrupt_master_disable>
    dade:	1e69      	subs	r1, r5, #1
    dae0:	9001      	str	r0, [sp, #4]
    dae2:	0960      	lsrs	r0, r4, #5
    dae4:	2904      	cmp	r1, #4
    dae6:	d81c      	bhi.n	db22 <am_hal_gpio_state_write+0x6a>
    dae8:	e8df f001 	tbb	[pc, r1]
    daec:	030c1017 	.word	0x030c1017
    daf0:	1f          	.byte	0x1f
    daf1:	00          	.byte	0x00
    daf2:	4b11      	ldr	r3, [pc, #68]	; (db38 <am_hal_gpio_state_write+0x80>)
    daf4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    daf8:	9801      	ldr	r0, [sp, #4]
    dafa:	f000 f89f 	bl	dc3c <am_hal_interrupt_master_set>
    dafe:	2000      	movs	r0, #0
    db00:	b002      	add	sp, #8
    db02:	bd70      	pop	{r4, r5, r6, pc}
    db04:	4b0d      	ldr	r3, [pc, #52]	; (db3c <am_hal_gpio_state_write+0x84>)
    db06:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    db0a:	e7f5      	b.n	daf8 <am_hal_gpio_state_write+0x40>
    db0c:	4a0c      	ldr	r2, [pc, #48]	; (db40 <am_hal_gpio_state_write+0x88>)
    db0e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    db12:	4073      	eors	r3, r6
    db14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    db18:	e7ee      	b.n	daf8 <am_hal_gpio_state_write+0x40>
    db1a:	4b0a      	ldr	r3, [pc, #40]	; (db44 <am_hal_gpio_state_write+0x8c>)
    db1c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    db20:	e7ea      	b.n	daf8 <am_hal_gpio_state_write+0x40>
    db22:	4b09      	ldr	r3, [pc, #36]	; (db48 <am_hal_gpio_state_write+0x90>)
    db24:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    db28:	e7e6      	b.n	daf8 <am_hal_gpio_state_write+0x40>
    db2a:	4a04      	ldr	r2, [pc, #16]	; (db3c <am_hal_gpio_state_write+0x84>)
    db2c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    db30:	4073      	eors	r3, r6
    db32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    db36:	e7df      	b.n	daf8 <am_hal_gpio_state_write+0x40>
    db38:	400100a8 	.word	0x400100a8
    db3c:	400100b4 	.word	0x400100b4
    db40:	40010088 	.word	0x40010088
    db44:	40010090 	.word	0x40010090
    db48:	40010098 	.word	0x40010098

0000db4c <am_hal_gpio_interrupt_enable>:
    db4c:	4b0f      	ldr	r3, [pc, #60]	; (db8c <am_hal_gpio_interrupt_enable+0x40>)
    db4e:	2200      	movs	r2, #0
    db50:	4002      	ands	r2, r0
    db52:	400b      	ands	r3, r1
    db54:	4313      	orrs	r3, r2
    db56:	d001      	beq.n	db5c <am_hal_gpio_interrupt_enable+0x10>
    db58:	2005      	movs	r0, #5
    db5a:	4770      	bx	lr
    db5c:	b530      	push	{r4, r5, lr}
    db5e:	b083      	sub	sp, #12
    db60:	460d      	mov	r5, r1
    db62:	4604      	mov	r4, r0
    db64:	f000 f866 	bl	dc34 <am_hal_interrupt_master_disable>
    db68:	4b09      	ldr	r3, [pc, #36]	; (db90 <am_hal_gpio_interrupt_enable+0x44>)
    db6a:	9001      	str	r0, [sp, #4]
    db6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    db70:	4322      	orrs	r2, r4
    db72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    db76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
    db7a:	432a      	orrs	r2, r5
    db7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    db80:	9801      	ldr	r0, [sp, #4]
    db82:	f000 f85b 	bl	dc3c <am_hal_interrupt_master_set>
    db86:	2000      	movs	r0, #0
    db88:	b003      	add	sp, #12
    db8a:	bd30      	pop	{r4, r5, pc}
    db8c:	fffc0000 	.word	0xfffc0000
    db90:	40010000 	.word	0x40010000

0000db94 <am_hal_gpio_interrupt_clear>:
    db94:	4b0c      	ldr	r3, [pc, #48]	; (dbc8 <am_hal_gpio_interrupt_clear+0x34>)
    db96:	2200      	movs	r2, #0
    db98:	4002      	ands	r2, r0
    db9a:	400b      	ands	r3, r1
    db9c:	4313      	orrs	r3, r2
    db9e:	d001      	beq.n	dba4 <am_hal_gpio_interrupt_clear+0x10>
    dba0:	2005      	movs	r0, #5
    dba2:	4770      	bx	lr
    dba4:	b530      	push	{r4, r5, lr}
    dba6:	b083      	sub	sp, #12
    dba8:	460d      	mov	r5, r1
    dbaa:	4604      	mov	r4, r0
    dbac:	f000 f842 	bl	dc34 <am_hal_interrupt_master_disable>
    dbb0:	4b06      	ldr	r3, [pc, #24]	; (dbcc <am_hal_gpio_interrupt_clear+0x38>)
    dbb2:	9001      	str	r0, [sp, #4]
    dbb4:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    dbb8:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    dbbc:	9801      	ldr	r0, [sp, #4]
    dbbe:	f000 f83d 	bl	dc3c <am_hal_interrupt_master_set>
    dbc2:	2000      	movs	r0, #0
    dbc4:	b003      	add	sp, #12
    dbc6:	bd30      	pop	{r4, r5, pc}
    dbc8:	fffc0000 	.word	0xfffc0000
    dbcc:	40010000 	.word	0x40010000

0000dbd0 <am_hal_gpio_interrupt_status_get>:
    dbd0:	b339      	cbz	r1, dc22 <am_hal_gpio_interrupt_status_get+0x52>
    dbd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbd4:	b083      	sub	sp, #12
    dbd6:	460c      	mov	r4, r1
    dbd8:	4605      	mov	r5, r0
    dbda:	f000 f82b 	bl	dc34 <am_hal_interrupt_master_disable>
    dbde:	4b12      	ldr	r3, [pc, #72]	; (dc28 <am_hal_gpio_interrupt_status_get+0x58>)
    dbe0:	9001      	str	r0, [sp, #4]
    dbe2:	f8d3 6214 	ldr.w	r6, [r3, #532]	; 0x214
    dbe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    dbea:	4631      	mov	r1, r6
    dbec:	2000      	movs	r0, #0
    dbee:	ea40 0602 	orr.w	r6, r0, r2
    dbf2:	460f      	mov	r7, r1
    dbf4:	b96d      	cbnz	r5, dc12 <am_hal_gpio_interrupt_status_get+0x42>
    dbf6:	f04f 32ff 	mov.w	r2, #4294967295
    dbfa:	f04f 33ff 	mov.w	r3, #4294967295
    dbfe:	4032      	ands	r2, r6
    dc00:	403b      	ands	r3, r7
    dc02:	9801      	ldr	r0, [sp, #4]
    dc04:	e9c4 2300 	strd	r2, r3, [r4]
    dc08:	f000 f818 	bl	dc3c <am_hal_interrupt_master_set>
    dc0c:	2000      	movs	r0, #0
    dc0e:	b003      	add	sp, #12
    dc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc12:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
    dc16:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    dc1a:	4602      	mov	r2, r0
    dc1c:	462b      	mov	r3, r5
    dc1e:	430a      	orrs	r2, r1
    dc20:	e7ed      	b.n	dbfe <am_hal_gpio_interrupt_status_get+0x2e>
    dc22:	2006      	movs	r0, #6
    dc24:	4770      	bx	lr
    dc26:	bf00      	nop
    dc28:	40010000 	.word	0x40010000

0000dc2c <am_hal_interrupt_master_enable>:
    dc2c:	f3ef 8010 	mrs	r0, PRIMASK
    dc30:	b662      	cpsie	i
    dc32:	4770      	bx	lr

0000dc34 <am_hal_interrupt_master_disable>:
    dc34:	f3ef 8010 	mrs	r0, PRIMASK
    dc38:	b672      	cpsid	i
    dc3a:	4770      	bx	lr

0000dc3c <am_hal_interrupt_master_set>:
    dc3c:	f380 8810 	msr	PRIMASK, r0
    dc40:	4770      	bx	lr
    dc42:	bf00      	nop

0000dc44 <am_hal_itm_disable>:
    dc44:	b510      	push	{r4, lr}
    dc46:	4b25      	ldr	r3, [pc, #148]	; (dcdc <am_hal_itm_disable+0x98>)
    dc48:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dc4c:	b9b3      	cbnz	r3, dc7c <am_hal_itm_disable+0x38>
    dc4e:	4b24      	ldr	r3, [pc, #144]	; (dce0 <am_hal_itm_disable+0x9c>)
    dc50:	68da      	ldr	r2, [r3, #12]
    dc52:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    dc56:	60da      	str	r2, [r3, #12]
    dc58:	68da      	ldr	r2, [r3, #12]
    dc5a:	01d2      	lsls	r2, r2, #7
    dc5c:	d5fc      	bpl.n	dc58 <am_hal_itm_disable+0x14>
    dc5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dc62:	4920      	ldr	r1, [pc, #128]	; (dce4 <am_hal_itm_disable+0xa0>)
    dc64:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    dc68:	4a1f      	ldr	r2, [pc, #124]	; (dce8 <am_hal_itm_disable+0xa4>)
    dc6a:	200f      	movs	r0, #15
    dc6c:	f04f 31ff 	mov.w	r1, #4294967295
    dc70:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dc74:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dc78:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dc7c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    dc80:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    dc84:	021b      	lsls	r3, r3, #8
    dc86:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dc8a:	d4f9      	bmi.n	dc80 <am_hal_itm_disable+0x3c>
    dc8c:	f240 20f7 	movw	r0, #759	; 0x2f7
    dc90:	f7ff fd6e 	bl	d770 <am_hal_flash_delay>
    dc94:	4b13      	ldr	r3, [pc, #76]	; (dce4 <am_hal_itm_disable+0xa0>)
    dc96:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    dc9a:	4621      	mov	r1, r4
    dc9c:	2064      	movs	r0, #100	; 0x64
    dc9e:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    dca2:	f023 0301 	bic.w	r3, r3, #1
    dca6:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    dcaa:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    dcae:	4b0f      	ldr	r3, [pc, #60]	; (dcec <am_hal_itm_disable+0xa8>)
    dcb0:	4013      	ands	r3, r2
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d1f9      	bne.n	dcaa <am_hal_itm_disable+0x66>
    dcb6:	3801      	subs	r0, #1
    dcb8:	d1f1      	bne.n	dc9e <am_hal_itm_disable+0x5a>
    dcba:	4a09      	ldr	r2, [pc, #36]	; (dce0 <am_hal_itm_disable+0x9c>)
    dcbc:	68d3      	ldr	r3, [r2, #12]
    dcbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    dcc2:	60d3      	str	r3, [r2, #12]
    dcc4:	68d3      	ldr	r3, [r2, #12]
    dcc6:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    dcca:	d1fb      	bne.n	dcc4 <am_hal_itm_disable+0x80>
    dccc:	4a03      	ldr	r2, [pc, #12]	; (dcdc <am_hal_itm_disable+0x98>)
    dcce:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    dcd2:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	d1fb      	bne.n	dcd2 <am_hal_itm_disable+0x8e>
    dcda:	bd10      	pop	{r4, pc}
    dcdc:	40020000 	.word	0x40020000
    dce0:	e000edf0 	.word	0xe000edf0
    dce4:	c5acce55 	.word	0xc5acce55
    dce8:	00150511 	.word	0x00150511
    dcec:	00800001 	.word	0x00800001

0000dcf0 <am_hal_mcuctrl_info_get>:
    dcf0:	b4f0      	push	{r4, r5, r6, r7}
    dcf2:	b121      	cbz	r1, dcfe <am_hal_mcuctrl_info_get+0xe>
    dcf4:	2801      	cmp	r0, #1
    dcf6:	d038      	beq.n	dd6a <am_hal_mcuctrl_info_get+0x7a>
    dcf8:	d320      	bcc.n	dd3c <am_hal_mcuctrl_info_get+0x4c>
    dcfa:	2802      	cmp	r0, #2
    dcfc:	d002      	beq.n	dd04 <am_hal_mcuctrl_info_get+0x14>
    dcfe:	2006      	movs	r0, #6
    dd00:	bcf0      	pop	{r4, r5, r6, r7}
    dd02:	4770      	bx	lr
    dd04:	4a41      	ldr	r2, [pc, #260]	; (de0c <am_hal_mcuctrl_info_get+0x11c>)
    dd06:	684d      	ldr	r5, [r1, #4]
    dd08:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    dd0c:	694c      	ldr	r4, [r1, #20]
    dd0e:	f003 0601 	and.w	r6, r3, #1
    dd12:	f3c3 0040 	ubfx	r0, r3, #1, #1
    dd16:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dd1a:	700e      	strb	r6, [r1, #0]
    dd1c:	7208      	strb	r0, [r1, #8]
    dd1e:	740b      	strb	r3, [r1, #16]
    dd20:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    dd24:	60cb      	str	r3, [r1, #12]
    dd26:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    dd2a:	4328      	orrs	r0, r5
    dd2c:	6048      	str	r0, [r1, #4]
    dd2e:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    dd32:	4323      	orrs	r3, r4
    dd34:	2000      	movs	r0, #0
    dd36:	614b      	str	r3, [r1, #20]
    dd38:	bcf0      	pop	{r4, r5, r6, r7}
    dd3a:	4770      	bx	lr
    dd3c:	4a33      	ldr	r2, [pc, #204]	; (de0c <am_hal_mcuctrl_info_get+0x11c>)
    dd3e:	6993      	ldr	r3, [r2, #24]
    dd40:	f3c3 1080 	ubfx	r0, r3, #6, #1
    dd44:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dd48:	7008      	strb	r0, [r1, #0]
    dd4a:	704b      	strb	r3, [r1, #1]
    dd4c:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    dd50:	f3c3 6381 	ubfx	r3, r3, #26, #2
    dd54:	710b      	strb	r3, [r1, #4]
    dd56:	6953      	ldr	r3, [r2, #20]
    dd58:	f3c3 0240 	ubfx	r2, r3, #1, #1
    dd5c:	f003 0301 	and.w	r3, r3, #1
    dd60:	2000      	movs	r0, #0
    dd62:	708a      	strb	r2, [r1, #2]
    dd64:	70cb      	strb	r3, [r1, #3]
    dd66:	bcf0      	pop	{r4, r5, r6, r7}
    dd68:	4770      	bx	lr
    dd6a:	4b28      	ldr	r3, [pc, #160]	; (de0c <am_hal_mcuctrl_info_get+0x11c>)
    dd6c:	4c28      	ldr	r4, [pc, #160]	; (de10 <am_hal_mcuctrl_info_get+0x120>)
    dd6e:	681a      	ldr	r2, [r3, #0]
    dd70:	600a      	str	r2, [r1, #0]
    dd72:	6858      	ldr	r0, [r3, #4]
    dd74:	6048      	str	r0, [r1, #4]
    dd76:	6898      	ldr	r0, [r3, #8]
    dd78:	6088      	str	r0, [r1, #8]
    dd7a:	68d8      	ldr	r0, [r3, #12]
    dd7c:	60c8      	str	r0, [r1, #12]
    dd7e:	691d      	ldr	r5, [r3, #16]
    dd80:	4824      	ldr	r0, [pc, #144]	; (de14 <am_hal_mcuctrl_info_get+0x124>)
    dd82:	610d      	str	r5, [r1, #16]
    dd84:	f3c2 5703 	ubfx	r7, r2, #20, #4
    dd88:	f3c2 4603 	ubfx	r6, r2, #16, #4
    dd8c:	695d      	ldr	r5, [r3, #20]
    dd8e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    dd92:	4b21      	ldr	r3, [pc, #132]	; (de18 <am_hal_mcuctrl_info_get+0x128>)
    dd94:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    dd98:	6208      	str	r0, [r1, #32]
    dd9a:	f002 0201 	and.w	r2, r2, #1
    dd9e:	614d      	str	r5, [r1, #20]
    dda0:	61cc      	str	r4, [r1, #28]
    dda2:	618a      	str	r2, [r1, #24]
    dda4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    dda8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    ddac:	b2d0      	uxtb	r0, r2
    ddae:	f004 020f 	and.w	r2, r4, #15
    ddb2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    ddb6:	624a      	str	r2, [r1, #36]	; 0x24
    ddb8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    ddbc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    ddc0:	f3c2 1003 	ubfx	r0, r2, #4, #4
    ddc4:	f004 020f 	and.w	r2, r4, #15
    ddc8:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    ddcc:	628a      	str	r2, [r1, #40]	; 0x28
    ddce:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    ddd2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    ddd6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    ddda:	f3c2 1203 	ubfx	r2, r2, #4, #4
    ddde:	4302      	orrs	r2, r0
    dde0:	62ca      	str	r2, [r1, #44]	; 0x2c
    dde2:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    dde6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    ddea:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    ddee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    ddf2:	b2c0      	uxtb	r0, r0
    ddf4:	0400      	lsls	r0, r0, #16
    ddf6:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    ddfa:	b2d2      	uxtb	r2, r2
    ddfc:	431a      	orrs	r2, r3
    ddfe:	b2e3      	uxtb	r3, r4
    de00:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    de04:	630b      	str	r3, [r1, #48]	; 0x30
    de06:	2000      	movs	r0, #0
    de08:	bcf0      	pop	{r4, r5, r6, r7}
    de0a:	4770      	bx	lr
    de0c:	40020000 	.word	0x40020000
    de10:	0000ec20 	.word	0x0000ec20
    de14:	0000ec60 	.word	0x0000ec60
    de18:	f0000f00 	.word	0xf0000f00

0000de1c <am_hal_pwrctrl_periph_enable>:
    de1c:	b570      	push	{r4, r5, r6, lr}
    de1e:	b082      	sub	sp, #8
    de20:	4604      	mov	r4, r0
    de22:	f7ff ff07 	bl	dc34 <am_hal_interrupt_master_disable>
    de26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    de2a:	4d0f      	ldr	r5, [pc, #60]	; (de68 <am_hal_pwrctrl_periph_enable+0x4c>)
    de2c:	4e0f      	ldr	r6, [pc, #60]	; (de6c <am_hal_pwrctrl_periph_enable+0x50>)
    de2e:	9001      	str	r0, [sp, #4]
    de30:	00a4      	lsls	r4, r4, #2
    de32:	68aa      	ldr	r2, [r5, #8]
    de34:	5933      	ldr	r3, [r6, r4]
    de36:	4313      	orrs	r3, r2
    de38:	60ab      	str	r3, [r5, #8]
    de3a:	9801      	ldr	r0, [sp, #4]
    de3c:	4434      	add	r4, r6
    de3e:	f7ff fefd 	bl	dc3c <am_hal_interrupt_master_set>
    de42:	2077      	movs	r0, #119	; 0x77
    de44:	f7ff fc94 	bl	d770 <am_hal_flash_delay>
    de48:	69ab      	ldr	r3, [r5, #24]
    de4a:	6864      	ldr	r4, [r4, #4]
    de4c:	4223      	tst	r3, r4
    de4e:	d103      	bne.n	de58 <am_hal_pwrctrl_periph_enable+0x3c>
    de50:	2077      	movs	r0, #119	; 0x77
    de52:	f7ff fc8d 	bl	d770 <am_hal_flash_delay>
    de56:	69ab      	ldr	r3, [r5, #24]
    de58:	4b03      	ldr	r3, [pc, #12]	; (de68 <am_hal_pwrctrl_periph_enable+0x4c>)
    de5a:	699b      	ldr	r3, [r3, #24]
    de5c:	4223      	tst	r3, r4
    de5e:	bf0c      	ite	eq
    de60:	2001      	moveq	r0, #1
    de62:	2000      	movne	r0, #0
    de64:	b002      	add	sp, #8
    de66:	bd70      	pop	{r4, r5, r6, pc}
    de68:	40021000 	.word	0x40021000
    de6c:	0000eca0 	.word	0x0000eca0

0000de70 <am_hal_pwrctrl_periph_disable>:
    de70:	b570      	push	{r4, r5, r6, lr}
    de72:	b082      	sub	sp, #8
    de74:	4604      	mov	r4, r0
    de76:	f7ff fedd 	bl	dc34 <am_hal_interrupt_master_disable>
    de7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    de7e:	4d10      	ldr	r5, [pc, #64]	; (dec0 <am_hal_pwrctrl_periph_disable+0x50>)
    de80:	4e10      	ldr	r6, [pc, #64]	; (dec4 <am_hal_pwrctrl_periph_disable+0x54>)
    de82:	9001      	str	r0, [sp, #4]
    de84:	00a4      	lsls	r4, r4, #2
    de86:	68ab      	ldr	r3, [r5, #8]
    de88:	5932      	ldr	r2, [r6, r4]
    de8a:	ea23 0302 	bic.w	r3, r3, r2
    de8e:	60ab      	str	r3, [r5, #8]
    de90:	9801      	ldr	r0, [sp, #4]
    de92:	4434      	add	r4, r6
    de94:	f7ff fed2 	bl	dc3c <am_hal_interrupt_master_set>
    de98:	2077      	movs	r0, #119	; 0x77
    de9a:	f7ff fc69 	bl	d770 <am_hal_flash_delay>
    de9e:	69ab      	ldr	r3, [r5, #24]
    dea0:	6864      	ldr	r4, [r4, #4]
    dea2:	4223      	tst	r3, r4
    dea4:	d003      	beq.n	deae <am_hal_pwrctrl_periph_disable+0x3e>
    dea6:	2077      	movs	r0, #119	; 0x77
    dea8:	f7ff fc62 	bl	d770 <am_hal_flash_delay>
    deac:	69ab      	ldr	r3, [r5, #24]
    deae:	4b04      	ldr	r3, [pc, #16]	; (dec0 <am_hal_pwrctrl_periph_disable+0x50>)
    deb0:	699b      	ldr	r3, [r3, #24]
    deb2:	4223      	tst	r3, r4
    deb4:	bf14      	ite	ne
    deb6:	2001      	movne	r0, #1
    deb8:	2000      	moveq	r0, #0
    deba:	b002      	add	sp, #8
    debc:	bd70      	pop	{r4, r5, r6, pc}
    debe:	bf00      	nop
    dec0:	40021000 	.word	0x40021000
    dec4:	0000eca0 	.word	0x0000eca0

0000dec8 <am_hal_pwrctrl_low_power_init>:
    dec8:	b530      	push	{r4, r5, lr}
    deca:	4b1f      	ldr	r3, [pc, #124]	; (df48 <am_hal_pwrctrl_low_power_init+0x80>)
    decc:	681a      	ldr	r2, [r3, #0]
    dece:	b083      	sub	sp, #12
    ded0:	b912      	cbnz	r2, ded8 <am_hal_pwrctrl_low_power_init+0x10>
    ded2:	4a1e      	ldr	r2, [pc, #120]	; (df4c <am_hal_pwrctrl_low_power_init+0x84>)
    ded4:	6812      	ldr	r2, [r2, #0]
    ded6:	601a      	str	r2, [r3, #0]
    ded8:	4c1d      	ldr	r4, [pc, #116]	; (df50 <am_hal_pwrctrl_low_power_init+0x88>)
    deda:	69a3      	ldr	r3, [r4, #24]
    dedc:	05db      	lsls	r3, r3, #23
    dede:	d502      	bpl.n	dee6 <am_hal_pwrctrl_low_power_init+0x1e>
    dee0:	2000      	movs	r0, #0
    dee2:	b003      	add	sp, #12
    dee4:	bd30      	pop	{r4, r5, pc}
    dee6:	4d1b      	ldr	r5, [pc, #108]	; (df54 <am_hal_pwrctrl_low_power_init+0x8c>)
    dee8:	491b      	ldr	r1, [pc, #108]	; (df58 <am_hal_pwrctrl_low_power_init+0x90>)
    deea:	7e2a      	ldrb	r2, [r5, #24]
    deec:	2001      	movs	r0, #1
    deee:	4302      	orrs	r2, r0
    def0:	2307      	movs	r3, #7
    def2:	762a      	strb	r2, [r5, #24]
    def4:	9000      	str	r0, [sp, #0]
    def6:	461a      	mov	r2, r3
    def8:	f242 7010 	movw	r0, #10000	; 0x2710
    defc:	f7ff fc3c 	bl	d778 <am_hal_flash_delay_status_check>
    df00:	b110      	cbz	r0, df08 <am_hal_pwrctrl_low_power_init+0x40>
    df02:	2004      	movs	r0, #4
    df04:	b003      	add	sp, #12
    df06:	bd30      	pop	{r4, r5, pc}
    df08:	6823      	ldr	r3, [r4, #0]
    df0a:	f043 0301 	orr.w	r3, r3, #1
    df0e:	6023      	str	r3, [r4, #0]
    df10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    df12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    df16:	6263      	str	r3, [r4, #36]	; 0x24
    df18:	68eb      	ldr	r3, [r5, #12]
    df1a:	b2db      	uxtb	r3, r3
    df1c:	2b11      	cmp	r3, #17
    df1e:	d1df      	bne.n	dee0 <am_hal_pwrctrl_low_power_init+0x18>
    df20:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    df24:	f360 5356 	bfi	r3, r0, #21, #2
    df28:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    df2c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    df30:	220f      	movs	r2, #15
    df32:	f362 138b 	bfi	r3, r2, #6, #6
    df36:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    df3a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    df3e:	f362 0305 	bfi	r3, r2, #0, #6
    df42:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    df46:	e7cc      	b.n	dee2 <am_hal_pwrctrl_low_power_init+0x1a>
    df48:	1000112c 	.word	0x1000112c
    df4c:	4ffff000 	.word	0x4ffff000
    df50:	40021000 	.word	0x40021000
    df54:	40020000 	.word	0x40020000
    df58:	40020018 	.word	0x40020018

0000df5c <am_hal_rtc_osc_select>:
    df5c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    df60:	2801      	cmp	r0, #1
    df62:	68d3      	ldr	r3, [r2, #12]
    df64:	bf0c      	ite	eq
    df66:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    df6a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    df6e:	60d3      	str	r3, [r2, #12]
    df70:	4770      	bx	lr
    df72:	bf00      	nop

0000df74 <am_hal_rtc_osc_disable>:
    df74:	4a03      	ldr	r2, [pc, #12]	; (df84 <am_hal_rtc_osc_disable+0x10>)
    df76:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    df7a:	f043 0310 	orr.w	r3, r3, #16
    df7e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    df82:	4770      	bx	lr
    df84:	40004200 	.word	0x40004200

0000df88 <am_hal_sysctrl_sleep>:
    df88:	b510      	push	{r4, lr}
    df8a:	b082      	sub	sp, #8
    df8c:	4604      	mov	r4, r0
    df8e:	f7ff fe51 	bl	dc34 <am_hal_interrupt_master_disable>
    df92:	4a0f      	ldr	r2, [pc, #60]	; (dfd0 <am_hal_sysctrl_sleep+0x48>)
    df94:	9001      	str	r0, [sp, #4]
    df96:	b124      	cbz	r4, dfa2 <am_hal_sysctrl_sleep+0x1a>
    df98:	4b0e      	ldr	r3, [pc, #56]	; (dfd4 <am_hal_sysctrl_sleep+0x4c>)
    df9a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    df9e:	07db      	lsls	r3, r3, #31
    dfa0:	d511      	bpl.n	dfc6 <am_hal_sysctrl_sleep+0x3e>
    dfa2:	6913      	ldr	r3, [r2, #16]
    dfa4:	f023 0304 	bic.w	r3, r3, #4
    dfa8:	6113      	str	r3, [r2, #16]
    dfaa:	f3bf 8f4f 	dsb	sy
    dfae:	4a0a      	ldr	r2, [pc, #40]	; (dfd8 <am_hal_sysctrl_sleep+0x50>)
    dfb0:	4b0a      	ldr	r3, [pc, #40]	; (dfdc <am_hal_sysctrl_sleep+0x54>)
    dfb2:	6812      	ldr	r2, [r2, #0]
    dfb4:	601a      	str	r2, [r3, #0]
    dfb6:	bf30      	wfi
    dfb8:	f3bf 8f6f 	isb	sy
    dfbc:	9801      	ldr	r0, [sp, #4]
    dfbe:	f7ff fe3d 	bl	dc3c <am_hal_interrupt_master_set>
    dfc2:	b002      	add	sp, #8
    dfc4:	bd10      	pop	{r4, pc}
    dfc6:	6913      	ldr	r3, [r2, #16]
    dfc8:	f043 0304 	orr.w	r3, r3, #4
    dfcc:	6113      	str	r3, [r2, #16]
    dfce:	e7ec      	b.n	dfaa <am_hal_sysctrl_sleep+0x22>
    dfd0:	e000ed00 	.word	0xe000ed00
    dfd4:	40020000 	.word	0x40020000
    dfd8:	5fff0000 	.word	0x5fff0000
    dfdc:	10001130 	.word	0x10001130

0000dfe0 <am_hal_uart_initialize>:
    dfe0:	2801      	cmp	r0, #1
    dfe2:	d901      	bls.n	dfe8 <am_hal_uart_initialize+0x8>
    dfe4:	2005      	movs	r0, #5
    dfe6:	4770      	bx	lr
    dfe8:	b169      	cbz	r1, e006 <am_hal_uart_initialize+0x26>
    dfea:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfec:	2264      	movs	r2, #100	; 0x64
    dfee:	4e0e      	ldr	r6, [pc, #56]	; (e028 <am_hal_uart_initialize+0x48>)
    dff0:	fb02 f200 	mul.w	r2, r2, r0
    dff4:	18b4      	adds	r4, r6, r2
    dff6:	4603      	mov	r3, r0
    dff8:	78e0      	ldrb	r0, [r4, #3]
    dffa:	f3c0 0700 	ubfx	r7, r0, #0, #1
    dffe:	b2fd      	uxtb	r5, r7
    e000:	b11d      	cbz	r5, e00a <am_hal_uart_initialize+0x2a>
    e002:	2007      	movs	r0, #7
    e004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e006:	2006      	movs	r0, #6
    e008:	4770      	bx	lr
    e00a:	f040 0001 	orr.w	r0, r0, #1
    e00e:	70e0      	strb	r0, [r4, #3]
    e010:	58b0      	ldr	r0, [r6, r2]
    e012:	f8df e018 	ldr.w	lr, [pc, #24]	; e02c <am_hal_uart_initialize+0x4c>
    e016:	f36e 0017 	bfi	r0, lr, #0, #24
    e01a:	50b0      	str	r0, [r6, r2]
    e01c:	6263      	str	r3, [r4, #36]	; 0x24
    e01e:	7127      	strb	r7, [r4, #4]
    e020:	6625      	str	r5, [r4, #96]	; 0x60
    e022:	4628      	mov	r0, r5
    e024:	600c      	str	r4, [r1, #0]
    e026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e028:	10001138 	.word	0x10001138
    e02c:	00ea9e06 	.word	0x00ea9e06

0000e030 <am_hal_uart_deinitialize>:
    e030:	b128      	cbz	r0, e03e <am_hal_uart_deinitialize+0xe>
    e032:	6803      	ldr	r3, [r0, #0]
    e034:	4a07      	ldr	r2, [pc, #28]	; (e054 <am_hal_uart_deinitialize+0x24>)
    e036:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e03a:	4293      	cmp	r3, r2
    e03c:	d001      	beq.n	e042 <am_hal_uart_deinitialize+0x12>
    e03e:	2002      	movs	r0, #2
    e040:	4770      	bx	lr
    e042:	78c2      	ldrb	r2, [r0, #3]
    e044:	2300      	movs	r3, #0
    e046:	f36f 0200 	bfc	r2, #0, #1
    e04a:	70c2      	strb	r2, [r0, #3]
    e04c:	6243      	str	r3, [r0, #36]	; 0x24
    e04e:	7103      	strb	r3, [r0, #4]
    e050:	4618      	mov	r0, r3
    e052:	4770      	bx	lr
    e054:	01ea9e06 	.word	0x01ea9e06

0000e058 <am_hal_uart_power_control>:
    e058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e05c:	6804      	ldr	r4, [r0, #0]
    e05e:	4b36      	ldr	r3, [pc, #216]	; (e138 <am_hal_uart_power_control+0xe0>)
    e060:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e064:	429c      	cmp	r4, r3
    e066:	b083      	sub	sp, #12
    e068:	d003      	beq.n	e072 <am_hal_uart_power_control+0x1a>
    e06a:	2002      	movs	r0, #2
    e06c:	b003      	add	sp, #12
    e06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e072:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e074:	4605      	mov	r5, r0
    e076:	f107 0008 	add.w	r0, r7, #8
    e07a:	4691      	mov	r9, r2
    e07c:	460e      	mov	r6, r1
    e07e:	fa5f f880 	uxtb.w	r8, r0
    e082:	b181      	cbz	r1, e0a6 <am_hal_uart_power_control+0x4e>
    e084:	2902      	cmp	r1, #2
    e086:	d80c      	bhi.n	e0a2 <am_hal_uart_power_control+0x4a>
    e088:	b992      	cbnz	r2, e0b0 <am_hal_uart_power_control+0x58>
    e08a:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e08e:	371c      	adds	r7, #28
    e090:	033f      	lsls	r7, r7, #12
    e092:	f04f 33ff 	mov.w	r3, #4294967295
    e096:	647b      	str	r3, [r7, #68]	; 0x44
    e098:	4640      	mov	r0, r8
    e09a:	f7ff fee9 	bl	de70 <am_hal_pwrctrl_periph_disable>
    e09e:	2000      	movs	r0, #0
    e0a0:	e7e4      	b.n	e06c <am_hal_uart_power_control+0x14>
    e0a2:	2006      	movs	r0, #6
    e0a4:	e7e2      	b.n	e06c <am_hal_uart_power_control+0x14>
    e0a6:	b322      	cbz	r2, e0f2 <am_hal_uart_power_control+0x9a>
    e0a8:	792b      	ldrb	r3, [r5, #4]
    e0aa:	bb3b      	cbnz	r3, e0fc <am_hal_uart_power_control+0xa4>
    e0ac:	2007      	movs	r0, #7
    e0ae:	e7dd      	b.n	e06c <am_hal_uart_power_control+0x14>
    e0b0:	f7ff fdc0 	bl	dc34 <am_hal_interrupt_master_disable>
    e0b4:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e0b8:	331c      	adds	r3, #28
    e0ba:	031b      	lsls	r3, r3, #12
    e0bc:	9001      	str	r0, [sp, #4]
    e0be:	6a1a      	ldr	r2, [r3, #32]
    e0c0:	60aa      	str	r2, [r5, #8]
    e0c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e0c4:	60ea      	str	r2, [r5, #12]
    e0c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e0c8:	612a      	str	r2, [r5, #16]
    e0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e0cc:	616a      	str	r2, [r5, #20]
    e0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e0d0:	61aa      	str	r2, [r5, #24]
    e0d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e0d4:	61ea      	str	r2, [r5, #28]
    e0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e0d8:	622b      	str	r3, [r5, #32]
    e0da:	2301      	movs	r3, #1
    e0dc:	712b      	strb	r3, [r5, #4]
    e0de:	9801      	ldr	r0, [sp, #4]
    e0e0:	f7ff fdac 	bl	dc3c <am_hal_interrupt_master_set>
    e0e4:	682b      	ldr	r3, [r5, #0]
    e0e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e0ea:	42a3      	cmp	r3, r4
    e0ec:	d1d4      	bne.n	e098 <am_hal_uart_power_control+0x40>
    e0ee:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e0f0:	e7cb      	b.n	e08a <am_hal_uart_power_control+0x32>
    e0f2:	4640      	mov	r0, r8
    e0f4:	f7ff fe92 	bl	de1c <am_hal_pwrctrl_periph_enable>
    e0f8:	4648      	mov	r0, r9
    e0fa:	e7b7      	b.n	e06c <am_hal_uart_power_control+0x14>
    e0fc:	4640      	mov	r0, r8
    e0fe:	f7ff fe8d 	bl	de1c <am_hal_pwrctrl_periph_enable>
    e102:	f7ff fd97 	bl	dc34 <am_hal_interrupt_master_disable>
    e106:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e10a:	331c      	adds	r3, #28
    e10c:	031b      	lsls	r3, r3, #12
    e10e:	68aa      	ldr	r2, [r5, #8]
    e110:	9000      	str	r0, [sp, #0]
    e112:	621a      	str	r2, [r3, #32]
    e114:	68ea      	ldr	r2, [r5, #12]
    e116:	625a      	str	r2, [r3, #36]	; 0x24
    e118:	692a      	ldr	r2, [r5, #16]
    e11a:	629a      	str	r2, [r3, #40]	; 0x28
    e11c:	696a      	ldr	r2, [r5, #20]
    e11e:	62da      	str	r2, [r3, #44]	; 0x2c
    e120:	69aa      	ldr	r2, [r5, #24]
    e122:	631a      	str	r2, [r3, #48]	; 0x30
    e124:	69ea      	ldr	r2, [r5, #28]
    e126:	635a      	str	r2, [r3, #52]	; 0x34
    e128:	6a2a      	ldr	r2, [r5, #32]
    e12a:	639a      	str	r2, [r3, #56]	; 0x38
    e12c:	9800      	ldr	r0, [sp, #0]
    e12e:	712e      	strb	r6, [r5, #4]
    e130:	f7ff fd84 	bl	dc3c <am_hal_interrupt_master_set>
    e134:	4630      	mov	r0, r6
    e136:	e799      	b.n	e06c <am_hal_uart_power_control+0x14>
    e138:	01ea9e06 	.word	0x01ea9e06

0000e13c <am_hal_uart_configure>:
    e13c:	6803      	ldr	r3, [r0, #0]
    e13e:	4a7a      	ldr	r2, [pc, #488]	; (e328 <am_hal_uart_configure+0x1ec>)
    e140:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e144:	4293      	cmp	r3, r2
    e146:	d001      	beq.n	e14c <am_hal_uart_configure+0x10>
    e148:	2002      	movs	r0, #2
    e14a:	4770      	bx	lr
    e14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e150:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e152:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e156:	351c      	adds	r5, #28
    e158:	032d      	lsls	r5, r5, #12
    e15a:	2700      	movs	r7, #0
    e15c:	b084      	sub	sp, #16
    e15e:	632f      	str	r7, [r5, #48]	; 0x30
    e160:	460e      	mov	r6, r1
    e162:	4604      	mov	r4, r0
    e164:	f7ff fd66 	bl	dc34 <am_hal_interrupt_master_disable>
    e168:	9001      	str	r0, [sp, #4]
    e16a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e16c:	f043 0308 	orr.w	r3, r3, #8
    e170:	862b      	strh	r3, [r5, #48]	; 0x30
    e172:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e174:	2201      	movs	r2, #1
    e176:	f362 1306 	bfi	r3, r2, #4, #3
    e17a:	862b      	strh	r3, [r5, #48]	; 0x30
    e17c:	9801      	ldr	r0, [sp, #4]
    e17e:	f7ff fd5d 	bl	dc3c <am_hal_interrupt_master_set>
    e182:	f7ff fd57 	bl	dc34 <am_hal_interrupt_master_disable>
    e186:	9002      	str	r0, [sp, #8]
    e188:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e18a:	f367 0300 	bfi	r3, r7, #0, #1
    e18e:	862b      	strh	r3, [r5, #48]	; 0x30
    e190:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e192:	f367 2349 	bfi	r3, r7, #9, #1
    e196:	862b      	strh	r3, [r5, #48]	; 0x30
    e198:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e19a:	f367 2308 	bfi	r3, r7, #8, #1
    e19e:	862b      	strh	r3, [r5, #48]	; 0x30
    e1a0:	9802      	ldr	r0, [sp, #8]
    e1a2:	f7ff fd4b 	bl	dc3c <am_hal_interrupt_master_set>
    e1a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e1a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e1ac:	3b01      	subs	r3, #1
    e1ae:	2b03      	cmp	r3, #3
    e1b0:	d854      	bhi.n	e25c <am_hal_uart_configure+0x120>
    e1b2:	e8df f003 	tbb	[pc, r3]
    e1b6:	020e      	.short	0x020e
    e1b8:	1114      	.short	0x1114
    e1ba:	495c      	ldr	r1, [pc, #368]	; (e32c <am_hal_uart_configure+0x1f0>)
    e1bc:	485c      	ldr	r0, [pc, #368]	; (e330 <am_hal_uart_configure+0x1f4>)
    e1be:	6832      	ldr	r2, [r6, #0]
    e1c0:	0112      	lsls	r2, r2, #4
    e1c2:	fbb0 f3f2 	udiv	r3, r0, r2
    e1c6:	b96b      	cbnz	r3, e1e4 <am_hal_uart_configure+0xa8>
    e1c8:	485a      	ldr	r0, [pc, #360]	; (e334 <am_hal_uart_configure+0x1f8>)
    e1ca:	6623      	str	r3, [r4, #96]	; 0x60
    e1cc:	b004      	add	sp, #16
    e1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e1d2:	4959      	ldr	r1, [pc, #356]	; (e338 <am_hal_uart_configure+0x1fc>)
    e1d4:	4859      	ldr	r0, [pc, #356]	; (e33c <am_hal_uart_configure+0x200>)
    e1d6:	e7f2      	b.n	e1be <am_hal_uart_configure+0x82>
    e1d8:	4959      	ldr	r1, [pc, #356]	; (e340 <am_hal_uart_configure+0x204>)
    e1da:	485a      	ldr	r0, [pc, #360]	; (e344 <am_hal_uart_configure+0x208>)
    e1dc:	e7ef      	b.n	e1be <am_hal_uart_configure+0x82>
    e1de:	495a      	ldr	r1, [pc, #360]	; (e348 <am_hal_uart_configure+0x20c>)
    e1e0:	485a      	ldr	r0, [pc, #360]	; (e34c <am_hal_uart_configure+0x210>)
    e1e2:	e7ec      	b.n	e1be <am_hal_uart_configure+0x82>
    e1e4:	fbb1 f2f2 	udiv	r2, r1, r2
    e1e8:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e1ec:	626b      	str	r3, [r5, #36]	; 0x24
    e1ee:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    e1f2:	626b      	str	r3, [r5, #36]	; 0x24
    e1f4:	fbb0 f0f1 	udiv	r0, r0, r1
    e1f8:	62aa      	str	r2, [r5, #40]	; 0x28
    e1fa:	6620      	str	r0, [r4, #96]	; 0x60
    e1fc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e1fe:	f36f 338e 	bfc	r3, #14, #1
    e202:	862b      	strh	r3, [r5, #48]	; 0x30
    e204:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e206:	f36f 33cf 	bfc	r3, #15, #1
    e20a:	862b      	strh	r3, [r5, #48]	; 0x30
    e20c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e20e:	6933      	ldr	r3, [r6, #16]
    e210:	4313      	orrs	r3, r2
    e212:	632b      	str	r3, [r5, #48]	; 0x30
    e214:	6973      	ldr	r3, [r6, #20]
    e216:	636b      	str	r3, [r5, #52]	; 0x34
    e218:	6871      	ldr	r1, [r6, #4]
    e21a:	68b3      	ldr	r3, [r6, #8]
    e21c:	68f2      	ldr	r2, [r6, #12]
    e21e:	430b      	orrs	r3, r1
    e220:	f043 0310 	orr.w	r3, r3, #16
    e224:	4313      	orrs	r3, r2
    e226:	62eb      	str	r3, [r5, #44]	; 0x2c
    e228:	f7ff fd04 	bl	dc34 <am_hal_interrupt_master_disable>
    e22c:	9003      	str	r0, [sp, #12]
    e22e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e230:	f043 0301 	orr.w	r3, r3, #1
    e234:	862b      	strh	r3, [r5, #48]	; 0x30
    e236:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e23c:	862b      	strh	r3, [r5, #48]	; 0x30
    e23e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e244:	862b      	strh	r3, [r5, #48]	; 0x30
    e246:	9803      	ldr	r0, [sp, #12]
    e248:	f7ff fcf8 	bl	dc3c <am_hal_interrupt_master_set>
    e24c:	6825      	ldr	r5, [r4, #0]
    e24e:	4b36      	ldr	r3, [pc, #216]	; (e328 <am_hal_uart_configure+0x1ec>)
    e250:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e254:	429d      	cmp	r5, r3
    e256:	d005      	beq.n	e264 <am_hal_uart_configure+0x128>
    e258:	2000      	movs	r0, #0
    e25a:	e7b7      	b.n	e1cc <am_hal_uart_configure+0x90>
    e25c:	2300      	movs	r3, #0
    e25e:	6623      	str	r3, [r4, #96]	; 0x60
    e260:	483b      	ldr	r0, [pc, #236]	; (e350 <am_hal_uart_configure+0x214>)
    e262:	e7b3      	b.n	e1cc <am_hal_uart_configure+0x90>
    e264:	69b1      	ldr	r1, [r6, #24]
    e266:	6a37      	ldr	r7, [r6, #32]
    e268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e26c:	b109      	cbz	r1, e272 <am_hal_uart_configure+0x136>
    e26e:	69f3      	ldr	r3, [r6, #28]
    e270:	bb3b      	cbnz	r3, e2c2 <am_hal_uart_configure+0x186>
    e272:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e274:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e278:	f103 021c 	add.w	r2, r3, #28
    e27c:	0312      	lsls	r2, r2, #12
    e27e:	2100      	movs	r1, #0
    e280:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e284:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e286:	f021 0120 	bic.w	r1, r1, #32
    e28a:	6391      	str	r1, [r2, #56]	; 0x38
    e28c:	b1b7      	cbz	r7, e2bc <am_hal_uart_configure+0x180>
    e28e:	f1b8 0f00 	cmp.w	r8, #0
    e292:	d12e      	bne.n	e2f2 <am_hal_uart_configure+0x1b6>
    e294:	6823      	ldr	r3, [r4, #0]
    e296:	4a24      	ldr	r2, [pc, #144]	; (e328 <am_hal_uart_configure+0x1ec>)
    e298:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e29c:	2100      	movs	r1, #0
    e29e:	4293      	cmp	r3, r2
    e2a0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e2a4:	d1d8      	bne.n	e258 <am_hal_uart_configure+0x11c>
    e2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e2a8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e2ac:	331c      	adds	r3, #28
    e2ae:	031b      	lsls	r3, r3, #12
    e2b0:	2000      	movs	r0, #0
    e2b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e2b4:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e2b8:	639a      	str	r2, [r3, #56]	; 0x38
    e2ba:	e787      	b.n	e1cc <am_hal_uart_configure+0x90>
    e2bc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e2c0:	e7f4      	b.n	e2ac <am_hal_uart_configure+0x170>
    e2c2:	2201      	movs	r2, #1
    e2c4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e2c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e2cc:	f000 faae 	bl	e82c <am_hal_queue_init>
    e2d0:	6823      	ldr	r3, [r4, #0]
    e2d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e2d6:	42ab      	cmp	r3, r5
    e2d8:	d1be      	bne.n	e258 <am_hal_uart_configure+0x11c>
    e2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e2dc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e2e0:	331c      	adds	r3, #28
    e2e2:	031b      	lsls	r3, r3, #12
    e2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e2e6:	f042 0220 	orr.w	r2, r2, #32
    e2ea:	639a      	str	r2, [r3, #56]	; 0x38
    e2ec:	2f00      	cmp	r7, #0
    e2ee:	d1ce      	bne.n	e28e <am_hal_uart_configure+0x152>
    e2f0:	e7d0      	b.n	e294 <am_hal_uart_configure+0x158>
    e2f2:	2201      	movs	r2, #1
    e2f4:	4643      	mov	r3, r8
    e2f6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e2fa:	4639      	mov	r1, r7
    e2fc:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e300:	f000 fa94 	bl	e82c <am_hal_queue_init>
    e304:	6823      	ldr	r3, [r4, #0]
    e306:	4a08      	ldr	r2, [pc, #32]	; (e328 <am_hal_uart_configure+0x1ec>)
    e308:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e30c:	4293      	cmp	r3, r2
    e30e:	d1a3      	bne.n	e258 <am_hal_uart_configure+0x11c>
    e310:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e312:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e316:	331c      	adds	r3, #28
    e318:	031b      	lsls	r3, r3, #12
    e31a:	2000      	movs	r0, #0
    e31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e31e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e322:	639a      	str	r2, [r3, #56]	; 0x38
    e324:	e752      	b.n	e1cc <am_hal_uart_configure+0x90>
    e326:	bf00      	nop
    e328:	01ea9e06 	.word	0x01ea9e06
    e32c:	2dc6c000 	.word	0x2dc6c000
    e330:	00b71b00 	.word	0x00b71b00
    e334:	08000003 	.word	0x08000003
    e338:	5b8d8000 	.word	0x5b8d8000
    e33c:	016e3600 	.word	0x016e3600
    e340:	0b71b000 	.word	0x0b71b000
    e344:	002dc6c0 	.word	0x002dc6c0
    e348:	16e36000 	.word	0x16e36000
    e34c:	005b8d80 	.word	0x005b8d80
    e350:	08000002 	.word	0x08000002

0000e354 <am_hal_uart_transfer>:
    e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e358:	680f      	ldr	r7, [r1, #0]
    e35a:	b091      	sub	sp, #68	; 0x44
    e35c:	4605      	mov	r5, r0
    e35e:	b13f      	cbz	r7, e370 <am_hal_uart_transfer+0x1c>
    e360:	2f01      	cmp	r7, #1
    e362:	bf18      	it	ne
    e364:	2707      	movne	r7, #7
    e366:	d024      	beq.n	e3b2 <am_hal_uart_transfer+0x5e>
    e368:	4638      	mov	r0, r7
    e36a:	b011      	add	sp, #68	; 0x44
    e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e370:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e374:	690b      	ldr	r3, [r1, #16]
    e376:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e37a:	688e      	ldr	r6, [r1, #8]
    e37c:	9300      	str	r3, [sp, #0]
    e37e:	f1b9 0f00 	cmp.w	r9, #0
    e382:	d031      	beq.n	e3e8 <am_hal_uart_transfer+0x94>
    e384:	2e00      	cmp	r6, #0
    e386:	f000 819c 	beq.w	e6c2 <am_hal_uart_transfer+0x36e>
    e38a:	2800      	cmp	r0, #0
    e38c:	f000 8097 	beq.w	e4be <am_hal_uart_transfer+0x16a>
    e390:	6803      	ldr	r3, [r0, #0]
    e392:	4aa9      	ldr	r2, [pc, #676]	; (e638 <am_hal_uart_transfer+0x2e4>)
    e394:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e398:	4293      	cmp	r3, r2
    e39a:	f000 8092 	beq.w	e4c2 <am_hal_uart_transfer+0x16e>
    e39e:	46b8      	mov	r8, r7
    e3a0:	9b00      	ldr	r3, [sp, #0]
    e3a2:	b10b      	cbz	r3, e3a8 <am_hal_uart_transfer+0x54>
    e3a4:	f8c3 8000 	str.w	r8, [r3]
    e3a8:	2702      	movs	r7, #2
    e3aa:	4638      	mov	r0, r7
    e3ac:	b011      	add	sp, #68	; 0x44
    e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3b2:	1d0b      	adds	r3, r1, #4
    e3b4:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    e3b8:	f1b9 0f00 	cmp.w	r9, #0
    e3bc:	d043      	beq.n	e446 <am_hal_uart_transfer+0xf2>
    e3be:	2f00      	cmp	r7, #0
    e3c0:	f000 8185 	beq.w	e6ce <am_hal_uart_transfer+0x37a>
    e3c4:	2800      	cmp	r0, #0
    e3c6:	f000 80eb 	beq.w	e5a0 <am_hal_uart_transfer+0x24c>
    e3ca:	6802      	ldr	r2, [r0, #0]
    e3cc:	499a      	ldr	r1, [pc, #616]	; (e638 <am_hal_uart_transfer+0x2e4>)
    e3ce:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e3d2:	428a      	cmp	r2, r1
    e3d4:	f000 80e7 	beq.w	e5a6 <am_hal_uart_transfer+0x252>
    e3d8:	2600      	movs	r6, #0
    e3da:	2702      	movs	r7, #2
    e3dc:	f1bb 0f00 	cmp.w	fp, #0
    e3e0:	d0c2      	beq.n	e368 <am_hal_uart_transfer+0x14>
    e3e2:	f8cb 6000 	str.w	r6, [fp]
    e3e6:	e7bf      	b.n	e368 <am_hal_uart_transfer+0x14>
    e3e8:	2800      	cmp	r0, #0
    e3ea:	d0dd      	beq.n	e3a8 <am_hal_uart_transfer+0x54>
    e3ec:	6803      	ldr	r3, [r0, #0]
    e3ee:	4a92      	ldr	r2, [pc, #584]	; (e638 <am_hal_uart_transfer+0x2e4>)
    e3f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e3f4:	4293      	cmp	r3, r2
    e3f6:	d1d7      	bne.n	e3a8 <am_hal_uart_transfer+0x54>
    e3f8:	9b00      	ldr	r3, [sp, #0]
    e3fa:	b10b      	cbz	r3, e400 <am_hal_uart_transfer+0xac>
    e3fc:	f8c3 9000 	str.w	r9, [r3]
    e400:	b1fe      	cbz	r6, e442 <am_hal_uart_transfer+0xee>
    e402:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e406:	2b00      	cmp	r3, #0
    e408:	f040 8165 	bne.w	e6d6 <am_hal_uart_transfer+0x382>
    e40c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e40e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e412:	311c      	adds	r1, #28
    e414:	0309      	lsls	r1, r1, #12
    e416:	698a      	ldr	r2, [r1, #24]
    e418:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e41c:	2a00      	cmp	r2, #0
    e41e:	f040 818d 	bne.w	e73c <am_hal_uart_transfer+0x3e8>
    e422:	f10a 33ff 	add.w	r3, sl, #4294967295
    e426:	e003      	b.n	e430 <am_hal_uart_transfer+0xdc>
    e428:	6988      	ldr	r0, [r1, #24]
    e42a:	0680      	lsls	r0, r0, #26
    e42c:	f100 8151 	bmi.w	e6d2 <am_hal_uart_transfer+0x37e>
    e430:	3201      	adds	r2, #1
    e432:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    e436:	6008      	str	r0, [r1, #0]
    e438:	4296      	cmp	r6, r2
    e43a:	d1f5      	bne.n	e428 <am_hal_uart_transfer+0xd4>
    e43c:	9b00      	ldr	r3, [sp, #0]
    e43e:	b103      	cbz	r3, e442 <am_hal_uart_transfer+0xee>
    e440:	601e      	str	r6, [r3, #0]
    e442:	2700      	movs	r7, #0
    e444:	e790      	b.n	e368 <am_hal_uart_transfer+0x14>
    e446:	2800      	cmp	r0, #0
    e448:	d0ae      	beq.n	e3a8 <am_hal_uart_transfer+0x54>
    e44a:	6802      	ldr	r2, [r0, #0]
    e44c:	497a      	ldr	r1, [pc, #488]	; (e638 <am_hal_uart_transfer+0x2e4>)
    e44e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e452:	428a      	cmp	r2, r1
    e454:	d1a8      	bne.n	e3a8 <am_hal_uart_transfer+0x54>
    e456:	f1bb 0f00 	cmp.w	fp, #0
    e45a:	d001      	beq.n	e460 <am_hal_uart_transfer+0x10c>
    e45c:	f8cb 9000 	str.w	r9, [fp]
    e460:	2f00      	cmp	r7, #0
    e462:	d0ee      	beq.n	e442 <am_hal_uart_transfer+0xee>
    e464:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    e468:	2c00      	cmp	r4, #0
    e46a:	f040 816c 	bne.w	e746 <am_hal_uart_transfer+0x3f2>
    e46e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e470:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e474:	321c      	adds	r2, #28
    e476:	0312      	lsls	r2, r2, #12
    e478:	6990      	ldr	r0, [r2, #24]
    e47a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e47e:	2800      	cmp	r0, #0
    e480:	f040 819d 	bne.w	e7be <am_hal_uart_transfer+0x46a>
    e484:	6811      	ldr	r1, [r2, #0]
    e486:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    e48a:	bf08      	it	eq
    e48c:	f103 33ff 	addeq.w	r3, r3, #4294967295
    e490:	d008      	beq.n	e4a4 <am_hal_uart_transfer+0x150>
    e492:	e190      	b.n	e7b6 <am_hal_uart_transfer+0x462>
    e494:	6991      	ldr	r1, [r2, #24]
    e496:	06c8      	lsls	r0, r1, #27
    e498:	d409      	bmi.n	e4ae <am_hal_uart_transfer+0x15a>
    e49a:	6811      	ldr	r1, [r2, #0]
    e49c:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e4a0:	f040 814e 	bne.w	e740 <am_hal_uart_transfer+0x3ec>
    e4a4:	3401      	adds	r4, #1
    e4a6:	42a7      	cmp	r7, r4
    e4a8:	f803 1f01 	strb.w	r1, [r3, #1]!
    e4ac:	d1f2      	bne.n	e494 <am_hal_uart_transfer+0x140>
    e4ae:	2700      	movs	r7, #0
    e4b0:	f1bb 0f00 	cmp.w	fp, #0
    e4b4:	f43f af58 	beq.w	e368 <am_hal_uart_transfer+0x14>
    e4b8:	f8cb 4000 	str.w	r4, [fp]
    e4bc:	e754      	b.n	e368 <am_hal_uart_transfer+0x14>
    e4be:	4680      	mov	r8, r0
    e4c0:	e76e      	b.n	e3a0 <am_hal_uart_transfer+0x4c>
    e4c2:	9301      	str	r3, [sp, #4]
    e4c4:	4651      	mov	r1, sl
    e4c6:	46bb      	mov	fp, r7
    e4c8:	46b8      	mov	r8, r7
    e4ca:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e4ce:	b9f2      	cbnz	r2, e50e <am_hal_uart_transfer+0x1ba>
    e4d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e4d2:	b19e      	cbz	r6, e4fc <am_hal_uart_transfer+0x1a8>
    e4d4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e4d8:	321c      	adds	r2, #28
    e4da:	0312      	lsls	r2, r2, #12
    e4dc:	3901      	subs	r1, #1
    e4de:	6994      	ldr	r4, [r2, #24]
    e4e0:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e4e4:	b11c      	cbz	r4, e4ee <am_hal_uart_transfer+0x19a>
    e4e6:	e047      	b.n	e578 <am_hal_uart_transfer+0x224>
    e4e8:	6993      	ldr	r3, [r2, #24]
    e4ea:	069b      	lsls	r3, r3, #26
    e4ec:	d441      	bmi.n	e572 <am_hal_uart_transfer+0x21e>
    e4ee:	3401      	adds	r4, #1
    e4f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e4f4:	6013      	str	r3, [r2, #0]
    e4f6:	42b4      	cmp	r4, r6
    e4f8:	d1f6      	bne.n	e4e8 <am_hal_uart_transfer+0x194>
    e4fa:	44a0      	add	r8, r4
    e4fc:	9b00      	ldr	r3, [sp, #0]
    e4fe:	2b00      	cmp	r3, #0
    e500:	d09f      	beq.n	e442 <am_hal_uart_transfer+0xee>
    e502:	4638      	mov	r0, r7
    e504:	f8c3 8000 	str.w	r8, [r3]
    e508:	b011      	add	sp, #68	; 0x44
    e50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e50e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e510:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    e512:	1b14      	subs	r4, r2, r4
    e514:	42b4      	cmp	r4, r6
    e516:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    e51a:	bf28      	it	cs
    e51c:	4634      	movcs	r4, r6
    e51e:	4622      	mov	r2, r4
    e520:	4618      	mov	r0, r3
    e522:	9302      	str	r3, [sp, #8]
    e524:	f000 f98e 	bl	e844 <am_hal_queue_item_add>
    e528:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e52a:	9303      	str	r3, [sp, #12]
    e52c:	f7ff fb82 	bl	dc34 <am_hal_interrupt_master_disable>
    e530:	9b03      	ldr	r3, [sp, #12]
    e532:	9008      	str	r0, [sp, #32]
    e534:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e538:	331c      	adds	r3, #28
    e53a:	031b      	lsls	r3, r3, #12
    e53c:	9303      	str	r3, [sp, #12]
    e53e:	e00d      	b.n	e55c <am_hal_uart_transfer+0x208>
    e540:	f000 f9b8 	bl	e8b4 <am_hal_queue_item_get>
    e544:	b190      	cbz	r0, e56c <am_hal_uart_transfer+0x218>
    e546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e548:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e54c:	331c      	adds	r3, #28
    e54e:	031b      	lsls	r3, r3, #12
    e550:	699a      	ldr	r2, [r3, #24]
    e552:	0692      	lsls	r2, r2, #26
    e554:	bf5c      	itt	pl
    e556:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e55a:	601a      	strpl	r2, [r3, #0]
    e55c:	9b03      	ldr	r3, [sp, #12]
    e55e:	9802      	ldr	r0, [sp, #8]
    e560:	699b      	ldr	r3, [r3, #24]
    e562:	069b      	lsls	r3, r3, #26
    e564:	f04f 0201 	mov.w	r2, #1
    e568:	a907      	add	r1, sp, #28
    e56a:	d5e9      	bpl.n	e540 <am_hal_uart_transfer+0x1ec>
    e56c:	9808      	ldr	r0, [sp, #32]
    e56e:	f7ff fb65 	bl	dc3c <am_hal_interrupt_master_set>
    e572:	1b36      	subs	r6, r6, r4
    e574:	44a0      	add	r8, r4
    e576:	d0c1      	beq.n	e4fc <am_hal_uart_transfer+0x1a8>
    e578:	2001      	movs	r0, #1
    e57a:	f7ff f8f9 	bl	d770 <am_hal_flash_delay>
    e57e:	f1b9 3fff 	cmp.w	r9, #4294967295
    e582:	d001      	beq.n	e588 <am_hal_uart_transfer+0x234>
    e584:	f10b 0b01 	add.w	fp, fp, #1
    e588:	45d9      	cmp	r9, fp
    e58a:	d9b7      	bls.n	e4fc <am_hal_uart_transfer+0x1a8>
    e58c:	682a      	ldr	r2, [r5, #0]
    e58e:	9b01      	ldr	r3, [sp, #4]
    e590:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e594:	429a      	cmp	r2, r3
    e596:	eb0a 0108 	add.w	r1, sl, r8
    e59a:	f47f af01 	bne.w	e3a0 <am_hal_uart_transfer+0x4c>
    e59e:	e794      	b.n	e4ca <am_hal_uart_transfer+0x176>
    e5a0:	4606      	mov	r6, r0
    e5a2:	2702      	movs	r7, #2
    e5a4:	e71a      	b.n	e3dc <am_hal_uart_transfer+0x88>
    e5a6:	9200      	str	r2, [sp, #0]
    e5a8:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e5ac:	f04f 0a00 	mov.w	sl, #0
    e5b0:	9202      	str	r2, [sp, #8]
    e5b2:	465a      	mov	r2, fp
    e5b4:	4698      	mov	r8, r3
    e5b6:	469b      	mov	fp, r3
    e5b8:	4656      	mov	r6, sl
    e5ba:	4613      	mov	r3, r2
    e5bc:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    e5c0:	2a00      	cmp	r2, #0
    e5c2:	d152      	bne.n	e66a <am_hal_uart_transfer+0x316>
    e5c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e5c6:	b3a7      	cbz	r7, e632 <am_hal_uart_transfer+0x2de>
    e5c8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e5cc:	311c      	adds	r1, #28
    e5ce:	0309      	lsls	r1, r1, #12
    e5d0:	698a      	ldr	r2, [r1, #24]
    e5d2:	06d0      	lsls	r0, r2, #27
    e5d4:	d432      	bmi.n	e63c <am_hal_uart_transfer+0x2e8>
    e5d6:	680a      	ldr	r2, [r1, #0]
    e5d8:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    e5dc:	f040 80aa 	bne.w	e734 <am_hal_uart_transfer+0x3e0>
    e5e0:	f108 38ff 	add.w	r8, r8, #4294967295
    e5e4:	e006      	b.n	e5f4 <am_hal_uart_transfer+0x2a0>
    e5e6:	698a      	ldr	r2, [r1, #24]
    e5e8:	06d2      	lsls	r2, r2, #27
    e5ea:	d41f      	bmi.n	e62c <am_hal_uart_transfer+0x2d8>
    e5ec:	680a      	ldr	r2, [r1, #0]
    e5ee:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e5f2:	d161      	bne.n	e6b8 <am_hal_uart_transfer+0x364>
    e5f4:	3401      	adds	r4, #1
    e5f6:	42bc      	cmp	r4, r7
    e5f8:	f808 2f01 	strb.w	r2, [r8, #1]!
    e5fc:	d1f3      	bne.n	e5e6 <am_hal_uart_transfer+0x292>
    e5fe:	469b      	mov	fp, r3
    e600:	4426      	add	r6, r4
    e602:	f1bb 0f00 	cmp.w	fp, #0
    e606:	f43f af1c 	beq.w	e442 <am_hal_uart_transfer+0xee>
    e60a:	f8cb 6000 	str.w	r6, [fp]
    e60e:	2700      	movs	r7, #0
    e610:	e6aa      	b.n	e368 <am_hal_uart_transfer+0x14>
    e612:	9807      	ldr	r0, [sp, #28]
    e614:	f7ff fb12 	bl	dc3c <am_hal_interrupt_master_set>
    e618:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e61a:	9802      	ldr	r0, [sp, #8]
    e61c:	42bc      	cmp	r4, r7
    e61e:	bf28      	it	cs
    e620:	463c      	movcs	r4, r7
    e622:	4641      	mov	r1, r8
    e624:	4622      	mov	r2, r4
    e626:	f000 f945 	bl	e8b4 <am_hal_queue_item_get>
    e62a:	9b01      	ldr	r3, [sp, #4]
    e62c:	1b3f      	subs	r7, r7, r4
    e62e:	4426      	add	r6, r4
    e630:	d104      	bne.n	e63c <am_hal_uart_transfer+0x2e8>
    e632:	469b      	mov	fp, r3
    e634:	e7e5      	b.n	e602 <am_hal_uart_transfer+0x2ae>
    e636:	bf00      	nop
    e638:	01ea9e06 	.word	0x01ea9e06
    e63c:	2001      	movs	r0, #1
    e63e:	9301      	str	r3, [sp, #4]
    e640:	f7ff f896 	bl	d770 <am_hal_flash_delay>
    e644:	f1b9 3fff 	cmp.w	r9, #4294967295
    e648:	9b01      	ldr	r3, [sp, #4]
    e64a:	d001      	beq.n	e650 <am_hal_uart_transfer+0x2fc>
    e64c:	f10a 0a01 	add.w	sl, sl, #1
    e650:	45d1      	cmp	r9, sl
    e652:	d9ee      	bls.n	e632 <am_hal_uart_transfer+0x2de>
    e654:	682a      	ldr	r2, [r5, #0]
    e656:	9900      	ldr	r1, [sp, #0]
    e658:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e65c:	428a      	cmp	r2, r1
    e65e:	eb0b 0806 	add.w	r8, fp, r6
    e662:	d0ab      	beq.n	e5bc <am_hal_uart_transfer+0x268>
    e664:	469b      	mov	fp, r3
    e666:	2702      	movs	r7, #2
    e668:	e6b8      	b.n	e3dc <am_hal_uart_transfer+0x88>
    e66a:	9301      	str	r3, [sp, #4]
    e66c:	f7ff fae2 	bl	dc34 <am_hal_interrupt_master_disable>
    e670:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e672:	9007      	str	r0, [sp, #28]
    e674:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e678:	301c      	adds	r0, #28
    e67a:	9b01      	ldr	r3, [sp, #4]
    e67c:	0300      	lsls	r0, r0, #12
    e67e:	ac08      	add	r4, sp, #32
    e680:	2200      	movs	r2, #0
    e682:	6981      	ldr	r1, [r0, #24]
    e684:	06c9      	lsls	r1, r1, #27
    e686:	d409      	bmi.n	e69c <am_hal_uart_transfer+0x348>
    e688:	6801      	ldr	r1, [r0, #0]
    e68a:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e68e:	f102 0201 	add.w	r2, r2, #1
    e692:	d118      	bne.n	e6c6 <am_hal_uart_transfer+0x372>
    e694:	2a20      	cmp	r2, #32
    e696:	f804 1b01 	strb.w	r1, [r4], #1
    e69a:	d1f2      	bne.n	e682 <am_hal_uart_transfer+0x32e>
    e69c:	a908      	add	r1, sp, #32
    e69e:	9802      	ldr	r0, [sp, #8]
    e6a0:	9301      	str	r3, [sp, #4]
    e6a2:	f000 f8cf 	bl	e844 <am_hal_queue_item_add>
    e6a6:	9b01      	ldr	r3, [sp, #4]
    e6a8:	2800      	cmp	r0, #0
    e6aa:	d1b2      	bne.n	e612 <am_hal_uart_transfer+0x2be>
    e6ac:	4f45      	ldr	r7, [pc, #276]	; (e7c4 <am_hal_uart_transfer+0x470>)
    e6ae:	469b      	mov	fp, r3
    e6b0:	9807      	ldr	r0, [sp, #28]
    e6b2:	f7ff fac3 	bl	dc3c <am_hal_interrupt_master_set>
    e6b6:	e691      	b.n	e3dc <am_hal_uart_transfer+0x88>
    e6b8:	469b      	mov	fp, r3
    e6ba:	4426      	add	r6, r4
    e6bc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e6c0:	e68c      	b.n	e3dc <am_hal_uart_transfer+0x88>
    e6c2:	46b8      	mov	r8, r7
    e6c4:	e71a      	b.n	e4fc <am_hal_uart_transfer+0x1a8>
    e6c6:	469b      	mov	fp, r3
    e6c8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e6cc:	e7f0      	b.n	e6b0 <am_hal_uart_transfer+0x35c>
    e6ce:	463e      	mov	r6, r7
    e6d0:	e797      	b.n	e602 <am_hal_uart_transfer+0x2ae>
    e6d2:	4616      	mov	r6, r2
    e6d4:	e6b2      	b.n	e43c <am_hal_uart_transfer+0xe8>
    e6d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e6d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e6da:	1a9b      	subs	r3, r3, r2
    e6dc:	429e      	cmp	r6, r3
    e6de:	bf28      	it	cs
    e6e0:	461e      	movcs	r6, r3
    e6e2:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    e6e6:	4651      	mov	r1, sl
    e6e8:	4632      	mov	r2, r6
    e6ea:	4620      	mov	r0, r4
    e6ec:	f000 f8aa 	bl	e844 <am_hal_queue_item_add>
    e6f0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e6f2:	f7ff fa9f 	bl	dc34 <am_hal_interrupt_master_disable>
    e6f6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e6fa:	371c      	adds	r7, #28
    e6fc:	033f      	lsls	r7, r7, #12
    e6fe:	9005      	str	r0, [sp, #20]
    e700:	e00d      	b.n	e71e <am_hal_uart_transfer+0x3ca>
    e702:	f000 f8d7 	bl	e8b4 <am_hal_queue_item_get>
    e706:	b188      	cbz	r0, e72c <am_hal_uart_transfer+0x3d8>
    e708:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e70a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e70e:	331c      	adds	r3, #28
    e710:	031b      	lsls	r3, r3, #12
    e712:	699a      	ldr	r2, [r3, #24]
    e714:	0692      	lsls	r2, r2, #26
    e716:	bf5c      	itt	pl
    e718:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    e71c:	601a      	strpl	r2, [r3, #0]
    e71e:	69bb      	ldr	r3, [r7, #24]
    e720:	069b      	lsls	r3, r3, #26
    e722:	f04f 0201 	mov.w	r2, #1
    e726:	a908      	add	r1, sp, #32
    e728:	4620      	mov	r0, r4
    e72a:	d5ea      	bpl.n	e702 <am_hal_uart_transfer+0x3ae>
    e72c:	9805      	ldr	r0, [sp, #20]
    e72e:	f7ff fa85 	bl	dc3c <am_hal_interrupt_master_set>
    e732:	e683      	b.n	e43c <am_hal_uart_transfer+0xe8>
    e734:	469b      	mov	fp, r3
    e736:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e73a:	e64f      	b.n	e3dc <am_hal_uart_transfer+0x88>
    e73c:	461e      	mov	r6, r3
    e73e:	e67d      	b.n	e43c <am_hal_uart_transfer+0xe8>
    e740:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e744:	e6b4      	b.n	e4b0 <am_hal_uart_transfer+0x15c>
    e746:	9300      	str	r3, [sp, #0]
    e748:	f7ff fa74 	bl	dc34 <am_hal_interrupt_master_disable>
    e74c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e74e:	9006      	str	r0, [sp, #24]
    e750:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e754:	321c      	adds	r2, #28
    e756:	0311      	lsls	r1, r2, #12
    e758:	a808      	add	r0, sp, #32
    e75a:	2200      	movs	r2, #0
    e75c:	9b00      	ldr	r3, [sp, #0]
    e75e:	e009      	b.n	e774 <am_hal_uart_transfer+0x420>
    e760:	680c      	ldr	r4, [r1, #0]
    e762:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    e766:	f102 0201 	add.w	r2, r2, #1
    e76a:	d121      	bne.n	e7b0 <am_hal_uart_transfer+0x45c>
    e76c:	2a20      	cmp	r2, #32
    e76e:	f800 4b01 	strb.w	r4, [r0], #1
    e772:	d002      	beq.n	e77a <am_hal_uart_transfer+0x426>
    e774:	698c      	ldr	r4, [r1, #24]
    e776:	06e4      	lsls	r4, r4, #27
    e778:	d5f2      	bpl.n	e760 <am_hal_uart_transfer+0x40c>
    e77a:	f105 0648 	add.w	r6, r5, #72	; 0x48
    e77e:	a908      	add	r1, sp, #32
    e780:	4630      	mov	r0, r6
    e782:	9300      	str	r3, [sp, #0]
    e784:	f000 f85e 	bl	e844 <am_hal_queue_item_add>
    e788:	b920      	cbnz	r0, e794 <am_hal_uart_transfer+0x440>
    e78a:	4f0e      	ldr	r7, [pc, #56]	; (e7c4 <am_hal_uart_transfer+0x470>)
    e78c:	9806      	ldr	r0, [sp, #24]
    e78e:	f7ff fa55 	bl	dc3c <am_hal_interrupt_master_set>
    e792:	e5e9      	b.n	e368 <am_hal_uart_transfer+0x14>
    e794:	9806      	ldr	r0, [sp, #24]
    e796:	f7ff fa51 	bl	dc3c <am_hal_interrupt_master_set>
    e79a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e79c:	9b00      	ldr	r3, [sp, #0]
    e79e:	42bc      	cmp	r4, r7
    e7a0:	bf28      	it	cs
    e7a2:	463c      	movcs	r4, r7
    e7a4:	4619      	mov	r1, r3
    e7a6:	4630      	mov	r0, r6
    e7a8:	4622      	mov	r2, r4
    e7aa:	f000 f883 	bl	e8b4 <am_hal_queue_item_get>
    e7ae:	e67e      	b.n	e4ae <am_hal_uart_transfer+0x15a>
    e7b0:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e7b4:	e7ea      	b.n	e78c <am_hal_uart_transfer+0x438>
    e7b6:	4604      	mov	r4, r0
    e7b8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    e7bc:	e678      	b.n	e4b0 <am_hal_uart_transfer+0x15c>
    e7be:	4627      	mov	r7, r4
    e7c0:	e676      	b.n	e4b0 <am_hal_uart_transfer+0x15c>
    e7c2:	bf00      	nop
    e7c4:	08000001 	.word	0x08000001

0000e7c8 <am_hal_uart_tx_flush>:
    e7c8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e7cc:	b570      	push	{r4, r5, r6, lr}
    e7ce:	4604      	mov	r4, r0
    e7d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e7d2:	b183      	cbz	r3, e7f6 <am_hal_uart_tx_flush+0x2e>
    e7d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e7d6:	b173      	cbz	r3, e7f6 <am_hal_uart_tx_flush+0x2e>
    e7d8:	4e13      	ldr	r6, [pc, #76]	; (e828 <am_hal_uart_tx_flush+0x60>)
    e7da:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e7dc:	fbb6 f0f0 	udiv	r0, r6, r0
    e7e0:	2802      	cmp	r0, #2
    e7e2:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e7e6:	bf8c      	ite	hi
    e7e8:	3829      	subhi	r0, #41	; 0x29
    e7ea:	2001      	movls	r0, #1
    e7ec:	f7fe ffc0 	bl	d770 <am_hal_flash_delay>
    e7f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e7f2:	2b00      	cmp	r3, #0
    e7f4:	d1f1      	bne.n	e7da <am_hal_uart_tx_flush+0x12>
    e7f6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e7fa:	351c      	adds	r5, #28
    e7fc:	032d      	lsls	r5, r5, #12
    e7fe:	69ab      	ldr	r3, [r5, #24]
    e800:	071a      	lsls	r2, r3, #28
    e802:	d50e      	bpl.n	e822 <am_hal_uart_tx_flush+0x5a>
    e804:	4e08      	ldr	r6, [pc, #32]	; (e828 <am_hal_uart_tx_flush+0x60>)
    e806:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e808:	fbb6 f0f0 	udiv	r0, r6, r0
    e80c:	2802      	cmp	r0, #2
    e80e:	ea4f 1000 	mov.w	r0, r0, lsl #4
    e812:	bf8c      	ite	hi
    e814:	3829      	subhi	r0, #41	; 0x29
    e816:	2001      	movls	r0, #1
    e818:	f7fe ffaa 	bl	d770 <am_hal_flash_delay>
    e81c:	69ab      	ldr	r3, [r5, #24]
    e81e:	071b      	lsls	r3, r3, #28
    e820:	d4f1      	bmi.n	e806 <am_hal_uart_tx_flush+0x3e>
    e822:	2000      	movs	r0, #0
    e824:	bd70      	pop	{r4, r5, r6, pc}
    e826:	bf00      	nop
    e828:	00b71b00 	.word	0x00b71b00

0000e82c <am_hal_queue_init>:
    e82c:	b410      	push	{r4}
    e82e:	2400      	movs	r4, #0
    e830:	6004      	str	r4, [r0, #0]
    e832:	6044      	str	r4, [r0, #4]
    e834:	6084      	str	r4, [r0, #8]
    e836:	60c3      	str	r3, [r0, #12]
    e838:	6102      	str	r2, [r0, #16]
    e83a:	6141      	str	r1, [r0, #20]
    e83c:	f85d 4b04 	ldr.w	r4, [sp], #4
    e840:	4770      	bx	lr
    e842:	bf00      	nop

0000e844 <am_hal_queue_item_add>:
    e844:	b5f0      	push	{r4, r5, r6, r7, lr}
    e846:	4604      	mov	r4, r0
    e848:	6906      	ldr	r6, [r0, #16]
    e84a:	b083      	sub	sp, #12
    e84c:	fb06 f602 	mul.w	r6, r6, r2
    e850:	460d      	mov	r5, r1
    e852:	f7ff f9ef 	bl	dc34 <am_hal_interrupt_master_disable>
    e856:	68e7      	ldr	r7, [r4, #12]
    e858:	68a2      	ldr	r2, [r4, #8]
    e85a:	9001      	str	r0, [sp, #4]
    e85c:	1abb      	subs	r3, r7, r2
    e85e:	429e      	cmp	r6, r3
    e860:	d826      	bhi.n	e8b0 <am_hal_queue_item_add+0x6c>
    e862:	b196      	cbz	r6, e88a <am_hal_queue_item_add+0x46>
    e864:	6823      	ldr	r3, [r4, #0]
    e866:	4629      	mov	r1, r5
    e868:	b1c5      	cbz	r5, e89c <am_hal_queue_item_add+0x58>
    e86a:	19af      	adds	r7, r5, r6
    e86c:	6962      	ldr	r2, [r4, #20]
    e86e:	f811 0b01 	ldrb.w	r0, [r1], #1
    e872:	54d0      	strb	r0, [r2, r3]
    e874:	6823      	ldr	r3, [r4, #0]
    e876:	68e5      	ldr	r5, [r4, #12]
    e878:	3301      	adds	r3, #1
    e87a:	42b9      	cmp	r1, r7
    e87c:	fbb3 f0f5 	udiv	r0, r3, r5
    e880:	fb05 3310 	mls	r3, r5, r0, r3
    e884:	6023      	str	r3, [r4, #0]
    e886:	d1f1      	bne.n	e86c <am_hal_queue_item_add+0x28>
    e888:	68a2      	ldr	r2, [r4, #8]
    e88a:	4432      	add	r2, r6
    e88c:	60a2      	str	r2, [r4, #8]
    e88e:	2401      	movs	r4, #1
    e890:	9801      	ldr	r0, [sp, #4]
    e892:	f7ff f9d3 	bl	dc3c <am_hal_interrupt_master_set>
    e896:	4620      	mov	r0, r4
    e898:	b003      	add	sp, #12
    e89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e89c:	3101      	adds	r1, #1
    e89e:	3301      	adds	r3, #1
    e8a0:	428e      	cmp	r6, r1
    e8a2:	fbb3 f0f7 	udiv	r0, r3, r7
    e8a6:	fb07 3310 	mls	r3, r7, r0, r3
    e8aa:	d1f7      	bne.n	e89c <am_hal_queue_item_add+0x58>
    e8ac:	6023      	str	r3, [r4, #0]
    e8ae:	e7ec      	b.n	e88a <am_hal_queue_item_add+0x46>
    e8b0:	2400      	movs	r4, #0
    e8b2:	e7ed      	b.n	e890 <am_hal_queue_item_add+0x4c>

0000e8b4 <am_hal_queue_item_get>:
    e8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8b6:	4604      	mov	r4, r0
    e8b8:	6906      	ldr	r6, [r0, #16]
    e8ba:	b083      	sub	sp, #12
    e8bc:	fb06 f602 	mul.w	r6, r6, r2
    e8c0:	460d      	mov	r5, r1
    e8c2:	f7ff f9b7 	bl	dc34 <am_hal_interrupt_master_disable>
    e8c6:	68a2      	ldr	r2, [r4, #8]
    e8c8:	9001      	str	r0, [sp, #4]
    e8ca:	4296      	cmp	r6, r2
    e8cc:	d81c      	bhi.n	e908 <am_hal_queue_item_get+0x54>
    e8ce:	b196      	cbz	r6, e8f6 <am_hal_queue_item_get+0x42>
    e8d0:	6863      	ldr	r3, [r4, #4]
    e8d2:	b1dd      	cbz	r5, e90c <am_hal_queue_item_get+0x58>
    e8d4:	4629      	mov	r1, r5
    e8d6:	19af      	adds	r7, r5, r6
    e8d8:	6962      	ldr	r2, [r4, #20]
    e8da:	5cd3      	ldrb	r3, [r2, r3]
    e8dc:	f801 3b01 	strb.w	r3, [r1], #1
    e8e0:	6863      	ldr	r3, [r4, #4]
    e8e2:	68e5      	ldr	r5, [r4, #12]
    e8e4:	3301      	adds	r3, #1
    e8e6:	428f      	cmp	r7, r1
    e8e8:	fbb3 f0f5 	udiv	r0, r3, r5
    e8ec:	fb05 3310 	mls	r3, r5, r0, r3
    e8f0:	6063      	str	r3, [r4, #4]
    e8f2:	d1f1      	bne.n	e8d8 <am_hal_queue_item_get+0x24>
    e8f4:	68a2      	ldr	r2, [r4, #8]
    e8f6:	1b92      	subs	r2, r2, r6
    e8f8:	60a2      	str	r2, [r4, #8]
    e8fa:	2401      	movs	r4, #1
    e8fc:	9801      	ldr	r0, [sp, #4]
    e8fe:	f7ff f99d 	bl	dc3c <am_hal_interrupt_master_set>
    e902:	4620      	mov	r0, r4
    e904:	b003      	add	sp, #12
    e906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e908:	2400      	movs	r4, #0
    e90a:	e7f7      	b.n	e8fc <am_hal_queue_item_get+0x48>
    e90c:	68e0      	ldr	r0, [r4, #12]
    e90e:	4629      	mov	r1, r5
    e910:	3101      	adds	r1, #1
    e912:	3301      	adds	r3, #1
    e914:	428e      	cmp	r6, r1
    e916:	fbb3 f5f0 	udiv	r5, r3, r0
    e91a:	fb00 3315 	mls	r3, r0, r5, r3
    e91e:	d1f7      	bne.n	e910 <am_hal_queue_item_get+0x5c>
    e920:	6063      	str	r3, [r4, #4]
    e922:	e7e8      	b.n	e8f6 <am_hal_queue_item_get+0x42>
    e924:	6f727245 	.word	0x6f727245
    e928:	65722072 	.word	0x65722072
    e92c:	6e696461 	.word	0x6e696461
    e930:	6e692067 	.word	0x6e692067
    e934:	72726574 	.word	0x72726574
    e938:	20747075 	.word	0x20747075
    e93c:	74617473 	.word	0x74617473
    e940:	000a7375 	.word	0x000a7375
    e944:	6f727245 	.word	0x6f727245
    e948:	6c632072 	.word	0x6c632072
    e94c:	69726165 	.word	0x69726165
    e950:	6920676e 	.word	0x6920676e
    e954:	7265746e 	.word	0x7265746e
    e958:	74707572 	.word	0x74707572
    e95c:	61747320 	.word	0x61747320
    e960:	0a737574 	.word	0x0a737574
    e964:	00000000 	.word	0x00000000
    e968:	72617053 	.word	0x72617053
    e96c:	6e75466b 	.word	0x6e75466b
    e970:	67644520 	.word	0x67644520
    e974:	6f422065 	.word	0x6f422065
    e978:	20647261 	.word	0x20647261
    e97c:	74736554 	.word	0x74736554
    e980:	0000000a 	.word	0x0000000a
    e984:	313a3930 	.word	0x313a3930
    e988:	33333a39 	.word	0x33333a39
    e98c:	00000000 	.word	0x00000000
    e990:	2072614d 	.word	0x2072614d
    e994:	32203232 	.word	0x32203232
    e998:	00393130 	.word	0x00393130
    e99c:	706d6f43 	.word	0x706d6f43
    e9a0:	64656c69 	.word	0x64656c69
    e9a4:	206e6f20 	.word	0x206e6f20
    e9a8:	202c7325 	.word	0x202c7325
    e9ac:	0a0a7325 	.word	0x0a0a7325
    e9b0:	00000000 	.word	0x00000000
    e9b4:	72617053 	.word	0x72617053
    e9b8:	6e75466b 	.word	0x6e75466b
    e9bc:	6e655420 	.word	0x6e655420
    e9c0:	66726f73 	.word	0x66726f73
    e9c4:	20776f6c 	.word	0x20776f6c
    e9c8:	75626544 	.word	0x75626544
    e9cc:	754f2067 	.word	0x754f2067
    e9d0:	74757074 	.word	0x74757074
    e9d4:	41552820 	.word	0x41552820
    e9d8:	0d295452 	.word	0x0d295452
    e9dc:	0000000a 	.word	0x0000000a
    e9e0:	6c6c6548 	.word	0x6c6c6548
    e9e4:	55202c6f 	.word	0x55202c6f
    e9e8:	21545241 	.word	0x21545241
    e9ec:	00000a0d 	.word	0x00000a0d
    e9f0:	656d6163 	.word	0x656d6163
    e9f4:	69206172 	.word	0x69206172
    e9f8:	2074696e 	.word	0x2074696e
    e9fc:	75736572 	.word	0x75736572
    ea00:	203a746c 	.word	0x203a746c
    ea04:	0a0d7825 	.word	0x0a0d7825
    ea08:	00000000 	.word	0x00000000
    ea0c:	0a0a0a0a 	.word	0x0a0a0a0a
    ea10:	0a0a0a0a 	.word	0x0a0a0a0a
    ea14:	0a0a0a0a 	.word	0x0a0a0a0a
    ea18:	0a0a0a0a 	.word	0x0a0a0a0a
    ea1c:	00000a0a 	.word	0x00000a0a
    ea20:	4b4c4350 	.word	0x4b4c4350
    ea24:	544e4920 	.word	0x544e4920
    ea28:	000a0d21 	.word	0x000a0d21
    ea2c:	46455248 	.word	0x46455248
    ea30:	544e4920 	.word	0x544e4920
    ea34:	000a0d21 	.word	0x000a0d21
    ea38:	4e595356 	.word	0x4e595356
    ea3c:	4e492043 	.word	0x4e492043
    ea40:	0a0d2154 	.word	0x0a0d2154
    ea44:	00000000 	.word	0x00000000

0000ea48 <g_sBspUartConfig>:
    ea48:	0001c200 00000060 00000000 00000000     ....`...........
    ea58:	00000000 00000012 00000000 00000000     ................
	...

0000ea70 <g_AM_BSP_CAM_HREF>:
    ea70:	00001003                                ....

0000ea74 <g_AM_BSP_CAM_PCLK>:
    ea74:	00001003                                ....

0000ea78 <g_AM_BSP_CAM_VSYNC>:
    ea78:	00003003                                .0..

0000ea7c <g_AM_BSP_CAM_XCLK>:
    ea7c:	00000302                                ....

0000ea80 <g_AM_BSP_CAM_Y0>:
    ea80:	00001003                                ....

0000ea84 <g_AM_BSP_CAM_Y1>:
    ea84:	00001003                                ....

0000ea88 <g_AM_BSP_CAM_Y2>:
    ea88:	00001003                                ....

0000ea8c <g_AM_BSP_CAM_Y3>:
    ea8c:	00001003                                ....

0000ea90 <g_AM_BSP_CAM_Y4>:
    ea90:	00001003                                ....

0000ea94 <g_AM_BSP_CAM_Y5>:
    ea94:	00001003                                ....

0000ea98 <g_AM_BSP_CAM_Y6>:
    ea98:	00001003                                ....

0000ea9c <g_AM_BSP_CAM_Y7>:
    ea9c:	00001003                                ....

0000eaa0 <g_AM_BSP_GPIO_COM_UART_RX>:
    eaa0:	00000000                                ....

0000eaa4 <g_AM_BSP_GPIO_COM_UART_TX>:
    eaa4:	00000000                                ....

0000eaa8 <am_hal_cachectrl_defaults>:
    eaa8:	00000308                                ....

0000eaac <g_AM_HAL_GPIO_INPUT>:
    eaac:	00001003                                ....

0000eab0 <g_ui8Bit76Capabilities>:
    eab0:	02800101 80010180 80800101 80808080     ................
    eac0:	80808080 80808008 01800180 80808080     ................
    ead0:	80808080 01800402 01010401 80808080     ................
    eae0:	00000101                                ....

0000eae4 <g_ui8NCEtable>:
    eae4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    eaf4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    eb04:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    eb14:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    eb24:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    eb34:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    eb44:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    eb54:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    eb64:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    eb74:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    eb84:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    eb94:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    eba4:	32221202 43231303                       .."2..#C

0000ebac <g_ui8Inpen>:
    ebac:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    ebbc:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    ebcc:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    ebdc:	00003130                                01..

0000ebe0 <g_AM_HAL_GPIO_DISABLE>:
    ebe0:	00000003                                ....

0000ebe4 <g_AM_HAL_GPIO_OUTPUT>:
    ebe4:	00000403                                ....

0000ebe8 <g_ui8nCEpins>:
    ebe8:	02070707 00080802 01020202 01010101     ................
    ebf8:	01010101 01010101 01010101 01010101     ................
    ec08:	01010101 08010101 01010008 01010101     ................
    ec18:	00000101                                ....

0000ec1c <g_AM_HAL_GPIO_OUTPUT_12>:
    ec1c:	00000703                                ....

0000ec20 <g_am_hal_mcuctrl_flash_size>:
    ec20:	00004000 00008000 00010000 00020000     .@..............
    ec30:	00040000 00080000 00100000 00200000     .............. .
	...

0000ec60 <g_am_hal_mcuctrl_sram_size>:
    ec60:	00004000 00008000 00010000 00020000     .@..............
    ec70:	00040000 00080000 00100000 00060000     ................
	...

0000eca0 <am_hal_pwrctrl_peripheral_control>:
	...
    ecac:	00000001 00000004 00000004 00000002     ................
    ecbc:	00000008 00000008 00000004 00000008     ................
    eccc:	00000008 00000008 00000008 00000008     ................
    ecdc:	00000010 00000010 00000010 00000020     ............ ...
    ecec:	00000010 00000010 00000040 00000010     ........@.......
    ecfc:	00000010 00000080 00000004 00000004     ................
    ed0c:	00000100 00000004 00000004 00000200     ................
    ed1c:	00000020 00000020 00000400 00000004      ... ...........
    ed2c:	00000004 00000800 00000040 00000040     ........@...@...
    ed3c:	00001000 00000080 00000080 00002000     ............. ..
    ed4c:	00000100 00000100                       ........
