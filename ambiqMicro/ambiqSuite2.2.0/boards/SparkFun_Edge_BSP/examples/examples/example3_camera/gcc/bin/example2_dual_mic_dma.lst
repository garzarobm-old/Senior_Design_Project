
bin/example2_dual_mic_dma.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 31 d2 00 00 99 d2 00 00 65 c3 00 00     ....1.......e...
    c010:	65 c3 00 00 65 c3 00 00 65 c3 00 00 00 00 00 00     e...e...e.......
	...
    c02c:	9f d2 00 00 9f d2 00 00 00 00 00 00 9f d2 00 00     ................
    c03c:	9f d2 00 00 9f d2 00 00 9f d2 00 00 9f d2 00 00     ................
    c04c:	9f d2 00 00 9f d2 00 00 9f d2 00 00 fd c1 00 00     ................
    c05c:	9f d2 00 00 9f d2 00 00 9f d2 00 00 9f d2 00 00     ................
    c06c:	9f d2 00 00 9f d2 00 00 a1 c1 00 00 9f d2 00 00     ................
    c07c:	9f d2 00 00 9f d2 00 00 9f d2 00 00 9f d2 00 00     ................
    c08c:	9f d2 00 00 9f d2 00 00 9f d2 00 00 9f d2 00 00     ................
    c09c:	9f d2 00 00 9f d2 00 00 9f d2 00 00 9f d2 00 00     ................
    c0ac:	9f d2 00 00 9f d2 00 00 9f d2 00 00 9f d2 00 00     ................
    c0bc:	9f d2 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <am_gpio_isr>:
static int  boardSetup(void);
static void boardTeardown(void);

void
am_gpio_isr(void)
{
    c1a0:	b590      	push	{r4, r7, lr}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    uint64_t ui64IntMask = 0x00;
    c1a6:	f04f 0300 	mov.w	r3, #0
    c1aa:	f04f 0400 	mov.w	r4, #0
    c1ae:	e9c7 3400 	strd	r3, r4, [r7]

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_gpio_interrupt_status_get(false, &ui64IntMask))
    c1b2:	463b      	mov	r3, r7
    c1b4:	4619      	mov	r1, r3
    c1b6:	2000      	movs	r0, #0
    c1b8:	f001 fd62 	bl	dc80 <am_hal_gpio_interrupt_status_get>
    c1bc:	4603      	mov	r3, r0
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d002      	beq.n	c1c8 <am_gpio_isr+0x28>
    {
        am_util_stdio_printf("Error reading interrupt status\n");
    c1c2:	480c      	ldr	r0, [pc, #48]	; (c1f4 <am_gpio_isr+0x54>)
    c1c4:	f001 f806 	bl	d1d4 <am_util_stdio_printf>
    }

    //
    // Clear the GPIO interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_gpio_interrupt_clear(ui64IntMask))
    c1c8:	e9d7 3400 	ldrd	r3, r4, [r7]
    c1cc:	4618      	mov	r0, r3
    c1ce:	4621      	mov	r1, r4
    c1d0:	f001 fd38 	bl	dc44 <am_hal_gpio_interrupt_clear>
    c1d4:	4603      	mov	r3, r0
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d002      	beq.n	c1e0 <am_gpio_isr+0x40>
    {
        am_util_stdio_printf("Error clearing interrupt status\n");
    c1da:	4807      	ldr	r0, [pc, #28]	; (c1f8 <am_gpio_isr+0x58>)
    c1dc:	f000 fffa 	bl	d1d4 <am_util_stdio_printf>
    }

    // Add your interrupt hooks here!
    edge_cam_isr( ui64IntMask );
    c1e0:	e9d7 3400 	ldrd	r3, r4, [r7]
    c1e4:	4618      	mov	r0, r3
    c1e6:	4621      	mov	r1, r4
    c1e8:	f001 f94c 	bl	d484 <edge_cam_isr>
}
    c1ec:	bf00      	nop
    c1ee:	370c      	adds	r7, #12
    c1f0:	46bd      	mov	sp, r7
    c1f2:	bd90      	pop	{r4, r7, pc}
    c1f4:	0000f098 	.word	0x0000f098
    c1f8:	0000f0b8 	.word	0x0000f0b8

0000c1fc <am_iomaster0_isr>:

void am_iomaster0_isr(void){
    c1fc:	b580      	push	{r7, lr}
    c1fe:	af00      	add	r7, sp, #0
    am_util_stdio_printf("IOM0 ISR!\n");
    c200:	4802      	ldr	r0, [pc, #8]	; (c20c <am_iomaster0_isr+0x10>)
    c202:	f000 ffe7 	bl	d1d4 <am_util_stdio_printf>
}
    c206:	bf00      	nop
    c208:	bd80      	pop	{r7, pc}
    c20a:	bf00      	nop
    c20c:	0000f0dc 	.word	0x0000f0dc

0000c210 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c210:	b580      	push	{r7, lr}
    c212:	b084      	sub	sp, #16
    c214:	af00      	add	r7, sp, #0
    boardSetup();
    c216:	f000 f84b 	bl	c2b0 <boardSetup>

    am_util_stdio_terminal_clear();
    c21a:	f000 ffff 	bl	d21c <am_util_stdio_terminal_clear>

    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c21e:	481c      	ldr	r0, [pc, #112]	; (c290 <main+0x80>)
    c220:	f000 ffd8 	bl	d1d4 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c224:	4a1b      	ldr	r2, [pc, #108]	; (c294 <main+0x84>)
    c226:	491c      	ldr	r1, [pc, #112]	; (c298 <main+0x88>)
    c228:	481c      	ldr	r0, [pc, #112]	; (c29c <main+0x8c>)
    c22a:	f000 ffd3 	bl	d1d4 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (UART)\r\n");
    c22e:	481c      	ldr	r0, [pc, #112]	; (c2a0 <main+0x90>)
    c230:	f000 ffd0 	bl	d1d4 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c234:	481b      	ldr	r0, [pc, #108]	; (c2a4 <main+0x94>)
    c236:	f001 f97b 	bl	d530 <am_bsp_uart_string_print>

    // camResult
    am_util_stdio_printf("camera init result: %x\r\n", cameraSetup());
    c23a:	f001 f851 	bl	d2e0 <cameraSetup>
    c23e:	4603      	mov	r3, r0
    c240:	4619      	mov	r1, r3
    c242:	4819      	ldr	r0, [pc, #100]	; (c2a8 <main+0x98>)
    c244:	f000 ffc6 	bl	d1d4 <am_util_stdio_printf>
    * Read samples in polling mode (no int)
    */
    while(1)
    {
        // Use Button 14 to break the loop and shut down
        uint32_t pin14Val = 1; 
    c248:	2301      	movs	r3, #1
    c24a:	60fb      	str	r3, [r7, #12]
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c24c:	f107 030c 	add.w	r3, r7, #12
    c250:	461a      	mov	r2, r3
    c252:	2100      	movs	r1, #0
    c254:	200e      	movs	r0, #14
    c256:	f001 fc53 	bl	db00 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c25a:	68fb      	ldr	r3, [r7, #12]
    c25c:	2b00      	cmp	r3, #0
    c25e:	d108      	bne.n	c272 <main+0x62>


    }

    // Turn off leds
    boardTeardown();
    c260:	f000 f868 	bl	c334 <boardTeardown>

    // Disable debug
    am_bsp_debug_printf_disable();
    c264:	f001 f9ba 	bl	d5dc <am_bsp_debug_printf_disable>
    
    // Go to Deep Sleep.
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c268:	2001      	movs	r0, #1
    c26a:	f002 f9c3 	bl	e5f4 <am_hal_sysctrl_sleep>
    c26e:	2300      	movs	r3, #0
    c270:	e00a      	b.n	c288 <main+0x78>
    am_hal_clkgen_status_get(&rxClkStat);
    c272:	463b      	mov	r3, r7
    c274:	4618      	mov	r0, r3
    c276:	f001 fab5 	bl	d7e4 <am_hal_clkgen_status_get>
    am_util_stdio_printf("Clkgen status: SysclkFreq - %d, eRTCOSC - %d, xtalfail %d\r\n", rxClkStat.ui32SysclkFreq, rxClkStat.eRTCOSC, rxClkStat.bXtalFailure);
    c27a:	6839      	ldr	r1, [r7, #0]
    c27c:	687a      	ldr	r2, [r7, #4]
    c27e:	7a3b      	ldrb	r3, [r7, #8]
    c280:	480a      	ldr	r0, [pc, #40]	; (c2ac <main+0x9c>)
    c282:	f000 ffa7 	bl	d1d4 <am_util_stdio_printf>
    {
    c286:	e7df      	b.n	c248 <main+0x38>
}
    c288:	4618      	mov	r0, r3
    c28a:	3710      	adds	r7, #16
    c28c:	46bd      	mov	sp, r7
    c28e:	bd80      	pop	{r7, pc}
    c290:	0000f0e8 	.word	0x0000f0e8
    c294:	0000f104 	.word	0x0000f104
    c298:	0000f110 	.word	0x0000f110
    c29c:	0000f11c 	.word	0x0000f11c
    c2a0:	0000f134 	.word	0x0000f134
    c2a4:	0000f160 	.word	0x0000f160
    c2a8:	0000f170 	.word	0x0000f170
    c2ac:	0000f18c 	.word	0x0000f18c

0000c2b0 <boardSetup>:

static int boardSetup(void)
{
    c2b0:	b580      	push	{r7, lr}
    c2b2:	af00      	add	r7, sp, #0
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c2b4:	2100      	movs	r1, #0
    c2b6:	2000      	movs	r0, #0
    c2b8:	f001 fa28 	bl	d70c <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c2bc:	4819      	ldr	r0, [pc, #100]	; (c324 <boardSetup+0x74>)
    c2be:	f001 f9f1 	bl	d6a4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c2c2:	f001 fa19 	bl	d6f8 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c2c6:	f001 f957 	bl	d578 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c2ca:	f001 f9bd 	bl	d648 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c2ce:	4b16      	ldr	r3, [pc, #88]	; (c328 <boardSetup+0x78>)
    c2d0:	6819      	ldr	r1, [r3, #0]
    c2d2:	202e      	movs	r0, #46	; 0x2e
    c2d4:	f001 fad4 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c2d8:	4b13      	ldr	r3, [pc, #76]	; (c328 <boardSetup+0x78>)
    c2da:	6819      	ldr	r1, [r3, #0]
    c2dc:	2025      	movs	r0, #37	; 0x25
    c2de:	f001 facf 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c2e2:	4b11      	ldr	r3, [pc, #68]	; (c328 <boardSetup+0x78>)
    c2e4:	6819      	ldr	r1, [r3, #0]
    c2e6:	202c      	movs	r0, #44	; 0x2c
    c2e8:	f001 faca 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c2ec:	4b0e      	ldr	r3, [pc, #56]	; (c328 <boardSetup+0x78>)
    c2ee:	6819      	ldr	r1, [r3, #0]
    c2f0:	202f      	movs	r0, #47	; 0x2f
    c2f2:	f001 fac5 	bl	d880 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c2f6:	4b0d      	ldr	r3, [pc, #52]	; (c32c <boardSetup+0x7c>)
    c2f8:	6819      	ldr	r1, [r3, #0]
    c2fa:	200e      	movs	r0, #14
    c2fc:	f001 fac0 	bl	d880 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c300:	4b0b      	ldr	r3, [pc, #44]	; (c330 <boardSetup+0x80>)
    c302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c306:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c308:	4b09      	ldr	r3, [pc, #36]	; (c330 <boardSetup+0x80>)
    c30a:	2220      	movs	r2, #32
    c30c:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c30e:	4b08      	ldr	r3, [pc, #32]	; (c330 <boardSetup+0x80>)
    c310:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c314:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c316:	4b06      	ldr	r3, [pc, #24]	; (c330 <boardSetup+0x80>)
    c318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c31c:	601a      	str	r2, [r3, #0]

    return 0;
    c31e:	2300      	movs	r3, #0
}
    c320:	4618      	mov	r0, r3
    c322:	bd80      	pop	{r7, pc}
    c324:	0000f264 	.word	0x0000f264
    c328:	0000f3d8 	.word	0x0000f3d8
    c32c:	0000f268 	.word	0x0000f268
    c330:	40010094 	.word	0x40010094

0000c334 <boardTeardown>:

static void boardTeardown(void)
{
    c334:	b480      	push	{r7}
    c336:	af00      	add	r7, sp, #0
    // Lights out
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c338:	4b09      	ldr	r3, [pc, #36]	; (c360 <boardTeardown+0x2c>)
    c33a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c33e:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c340:	4b07      	ldr	r3, [pc, #28]	; (c360 <boardTeardown+0x2c>)
    c342:	2220      	movs	r2, #32
    c344:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c346:	4b06      	ldr	r3, [pc, #24]	; (c360 <boardTeardown+0x2c>)
    c348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c34c:	601a      	str	r2, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c34e:	4b04      	ldr	r3, [pc, #16]	; (c360 <boardTeardown+0x2c>)
    c350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c354:	601a      	str	r2, [r3, #0]
    c356:	bf00      	nop
    c358:	46bd      	mov	sp, r7
    c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c35e:	4770      	bx	lr
    c360:	4001009c 	.word	0x4001009c

0000c364 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c364:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c366:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c36a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c36c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c370:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c374:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c378:	f000 f80a 	bl	c390 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c37c:	bd01      	pop	{r0, pc}
}
    c37e:	bf00      	nop
    c380:	4618      	mov	r0, r3

0000c382 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c382:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c384:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c386:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c388:	4770      	bx	lr
}
    c38a:	bf00      	nop
    c38c:	4618      	mov	r0, r3
	...

0000c390 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c390:	b580      	push	{r7, lr}
    c392:	b096      	sub	sp, #88	; 0x58
    c394:	af00      	add	r7, sp, #0
    c396:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c398:	f107 030c 	add.w	r3, r7, #12
    c39c:	2200      	movs	r2, #0
    c39e:	601a      	str	r2, [r3, #0]
    c3a0:	605a      	str	r2, [r3, #4]
    c3a2:	609a      	str	r2, [r3, #8]
    c3a4:	60da      	str	r2, [r3, #12]
    c3a6:	611a      	str	r2, [r3, #16]
    c3a8:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c3aa:	2300      	movs	r3, #0
    c3ac:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c3b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c3b2:	4b2e      	ldr	r3, [pc, #184]	; (c46c <am_util_faultisr_collect_data+0xdc>)
    c3b4:	681b      	ldr	r3, [r3, #0]
    c3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c3b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3ba:	b2db      	uxtb	r3, r3
    c3bc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3c2:	0a1b      	lsrs	r3, r3, #8
    c3c4:	b2db      	uxtb	r3, r3
    c3c6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3cc:	0c1b      	lsrs	r3, r3, #16
    c3ce:	b29b      	uxth	r3, r3
    c3d0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3d4:	4b26      	ldr	r3, [pc, #152]	; (c470 <am_util_faultisr_collect_data+0xe0>)
    c3d6:	681b      	ldr	r3, [r3, #0]
    c3d8:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3da:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c3de:	b2db      	uxtb	r3, r3
    c3e0:	f003 0302 	and.w	r3, r3, #2
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	d005      	beq.n	c3f4 <am_util_faultisr_collect_data+0x64>
    c3e8:	6879      	ldr	r1, [r7, #4]
    c3ea:	2006      	movs	r0, #6
    c3ec:	f7ff ffc9 	bl	c382 <getStackedReg>
    c3f0:	4603      	mov	r3, r0
    c3f2:	e001      	b.n	c3f8 <am_util_faultisr_collect_data+0x68>
    c3f4:	f04f 33ff 	mov.w	r3, #4294967295
    c3f8:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3fa:	6879      	ldr	r1, [r7, #4]
    c3fc:	2000      	movs	r0, #0
    c3fe:	f7ff ffc0 	bl	c382 <getStackedReg>
    c402:	4603      	mov	r3, r0
    c404:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c406:	6879      	ldr	r1, [r7, #4]
    c408:	2001      	movs	r0, #1
    c40a:	f7ff ffba 	bl	c382 <getStackedReg>
    c40e:	4603      	mov	r3, r0
    c410:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c412:	6879      	ldr	r1, [r7, #4]
    c414:	2002      	movs	r0, #2
    c416:	f7ff ffb4 	bl	c382 <getStackedReg>
    c41a:	4603      	mov	r3, r0
    c41c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c41e:	6879      	ldr	r1, [r7, #4]
    c420:	2003      	movs	r0, #3
    c422:	f7ff ffae 	bl	c382 <getStackedReg>
    c426:	4603      	mov	r3, r0
    c428:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c42a:	6879      	ldr	r1, [r7, #4]
    c42c:	2004      	movs	r0, #4
    c42e:	f7ff ffa8 	bl	c382 <getStackedReg>
    c432:	4603      	mov	r3, r0
    c434:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c436:	6879      	ldr	r1, [r7, #4]
    c438:	2005      	movs	r0, #5
    c43a:	f7ff ffa2 	bl	c382 <getStackedReg>
    c43e:	4603      	mov	r3, r0
    c440:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c442:	6879      	ldr	r1, [r7, #4]
    c444:	2006      	movs	r0, #6
    c446:	f7ff ff9c 	bl	c382 <getStackedReg>
    c44a:	4603      	mov	r3, r0
    c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c44e:	6879      	ldr	r1, [r7, #4]
    c450:	2007      	movs	r0, #7
    c452:	f7ff ff96 	bl	c382 <getStackedReg>
    c456:	4603      	mov	r3, r0
    c458:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c45a:	f107 030c 	add.w	r3, r7, #12
    c45e:	4619      	mov	r1, r3
    c460:	2002      	movs	r0, #2
    c462:	f001 ff7b 	bl	e35c <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c466:	2300      	movs	r3, #0
    c468:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c46a:	e7fe      	b.n	c46a <am_util_faultisr_collect_data+0xda>
    c46c:	e000ed28 	.word	0xe000ed28
    c470:	e000ed38 	.word	0xe000ed38

0000c474 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c474:	b480      	push	{r7}
    c476:	b083      	sub	sp, #12
    c478:	af00      	add	r7, sp, #0
    c47a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c47c:	4a04      	ldr	r2, [pc, #16]	; (c490 <am_util_stdio_printf_init+0x1c>)
    c47e:	687b      	ldr	r3, [r7, #4]
    c480:	6013      	str	r3, [r2, #0]
}
    c482:	bf00      	nop
    c484:	370c      	adds	r7, #12
    c486:	46bd      	mov	sp, r7
    c488:	f85d 7b04 	ldr.w	r7, [sp], #4
    c48c:	4770      	bx	lr
    c48e:	bf00      	nop
    c490:	10001294 	.word	0x10001294

0000c494 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c494:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c498:	b098      	sub	sp, #96	; 0x60
    c49a:	af00      	add	r7, sp, #0
    c49c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c4a0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c4a4:	f04f 0100 	mov.w	r1, #0
    c4a8:	f04f 0200 	mov.w	r2, #0
    c4ac:	0021      	movs	r1, r4
    c4ae:	2200      	movs	r2, #0
    c4b0:	ea51 0302 	orrs.w	r3, r1, r2
    c4b4:	f000 80b5 	beq.w	c622 <divu64_10+0x18e>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4b8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c4bc:	f04f 0500 	mov.w	r5, #0
    c4c0:	f04f 0600 	mov.w	r6, #0
    c4c4:	085d      	lsrs	r5, r3, #1
    c4c6:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
    c4ca:	0866      	lsrs	r6, r4, #1
    c4cc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c4d0:	f04f 0100 	mov.w	r1, #0
    c4d4:	f04f 0200 	mov.w	r2, #0
    c4d8:	0899      	lsrs	r1, r3, #2
    c4da:	ea41 7184 	orr.w	r1, r1, r4, lsl #30
    c4de:	08a2      	lsrs	r2, r4, #2
    c4e0:	eb15 0a01 	adds.w	sl, r5, r1
    c4e4:	eb46 0b02 	adc.w	fp, r6, r2
    c4e8:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
        q64 += (q64 >> 4);
    c4ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c4f0:	f04f 0100 	mov.w	r1, #0
    c4f4:	f04f 0200 	mov.w	r2, #0
    c4f8:	0919      	lsrs	r1, r3, #4
    c4fa:	ea41 7104 	orr.w	r1, r1, r4, lsl #28
    c4fe:	0922      	lsrs	r2, r4, #4
    c500:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c504:	1858      	adds	r0, r3, r1
    c506:	62b8      	str	r0, [r7, #40]	; 0x28
    c508:	eb44 0302 	adc.w	r3, r4, r2
    c50c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c50e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
    c512:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 8);
    c516:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c51a:	f04f 0100 	mov.w	r1, #0
    c51e:	f04f 0200 	mov.w	r2, #0
    c522:	0a19      	lsrs	r1, r3, #8
    c524:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
    c528:	0a22      	lsrs	r2, r4, #8
    c52a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c52e:	1858      	adds	r0, r3, r1
    c530:	6238      	str	r0, [r7, #32]
    c532:	eb44 0302 	adc.w	r3, r4, r2
    c536:	627b      	str	r3, [r7, #36]	; 0x24
    c538:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    c53c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 16);
    c540:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c544:	f04f 0100 	mov.w	r1, #0
    c548:	f04f 0200 	mov.w	r2, #0
    c54c:	0c19      	lsrs	r1, r3, #16
    c54e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    c552:	0c22      	lsrs	r2, r4, #16
    c554:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
    c558:	1858      	adds	r0, r3, r1
    c55a:	61b8      	str	r0, [r7, #24]
    c55c:	eb44 0302 	adc.w	r3, r4, r2
    c560:	61fb      	str	r3, [r7, #28]
    c562:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    c566:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 32);
    c56a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c56e:	f04f 0300 	mov.w	r3, #0
    c572:	f04f 0400 	mov.w	r4, #0
    c576:	0013      	movs	r3, r2
    c578:	2400      	movs	r4, #0
    c57a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c57e:	18c8      	adds	r0, r1, r3
    c580:	6138      	str	r0, [r7, #16]
    c582:	eb42 0304 	adc.w	r3, r2, r4
    c586:	617b      	str	r3, [r7, #20]
    c588:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c58c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 >>= 3;
    c590:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c594:	f04f 0300 	mov.w	r3, #0
    c598:	f04f 0400 	mov.w	r4, #0
    c59c:	08cb      	lsrs	r3, r1, #3
    c59e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    c5a2:	08d4      	lsrs	r4, r2, #3
    c5a4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        r64 = ui64Val - q64*10;
    c5a8:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
    c5ac:	462b      	mov	r3, r5
    c5ae:	4634      	mov	r4, r6
    c5b0:	f04f 0100 	mov.w	r1, #0
    c5b4:	f04f 0200 	mov.w	r2, #0
    c5b8:	00a2      	lsls	r2, r4, #2
    c5ba:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    c5be:	0099      	lsls	r1, r3, #2
    c5c0:	460b      	mov	r3, r1
    c5c2:	4614      	mov	r4, r2
    c5c4:	195b      	adds	r3, r3, r5
    c5c6:	eb46 0404 	adc.w	r4, r6, r4
    c5ca:	18da      	adds	r2, r3, r3
    c5cc:	60ba      	str	r2, [r7, #8]
    c5ce:	eb44 0304 	adc.w	r3, r4, r4
    c5d2:	60fb      	str	r3, [r7, #12]
    c5d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c5d8:	4619      	mov	r1, r3
    c5da:	4622      	mov	r2, r4
    c5dc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
    c5e0:	1a58      	subs	r0, r3, r1
    c5e2:	6038      	str	r0, [r7, #0]
    c5e4:	eb64 0302 	sbc.w	r3, r4, r2
    c5e8:	607b      	str	r3, [r7, #4]
    c5ea:	e9d7 3400 	ldrd	r3, r4, [r7]
    c5ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        return q64 + ((r64 + 6) >> 4);
    c5f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c5f6:	f113 0806 	adds.w	r8, r3, #6
    c5fa:	f144 0900 	adc.w	r9, r4, #0
    c5fe:	f04f 0300 	mov.w	r3, #0
    c602:	f04f 0400 	mov.w	r4, #0
    c606:	ea4f 1318 	mov.w	r3, r8, lsr #4
    c60a:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    c60e:	ea4f 1419 	mov.w	r4, r9, lsr #4
    c612:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
    c616:	1858      	adds	r0, r3, r1
    c618:	6338      	str	r0, [r7, #48]	; 0x30
    c61a:	eb44 0302 	adc.w	r3, r4, r2
    c61e:	637b      	str	r3, [r7, #52]	; 0x34
    c620:	e02c      	b.n	c67c <divu64_10+0x1e8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c624:	64fb      	str	r3, [r7, #76]	; 0x4c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c628:	085a      	lsrs	r2, r3, #1
    c62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c62c:	089b      	lsrs	r3, r3, #2
    c62e:	4413      	add	r3, r2
    c630:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 4);
    c632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c634:	091b      	lsrs	r3, r3, #4
    c636:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c638:	4413      	add	r3, r2
    c63a:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 8);
    c63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c63e:	0a1b      	lsrs	r3, r3, #8
    c640:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c642:	4413      	add	r3, r2
    c644:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 16);
    c646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c648:	0c1b      	lsrs	r3, r3, #16
    c64a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c64c:	4413      	add	r3, r2
    c64e:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 >>= 3;
    c650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c652:	08db      	lsrs	r3, r3, #3
    c654:	64bb      	str	r3, [r7, #72]	; 0x48
        r32 = ui32Val - q32*10;
    c656:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c658:	4613      	mov	r3, r2
    c65a:	009b      	lsls	r3, r3, #2
    c65c:	4413      	add	r3, r2
    c65e:	005b      	lsls	r3, r3, #1
    c660:	461a      	mov	r2, r3
    c662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c664:	1a9b      	subs	r3, r3, r2
    c666:	647b      	str	r3, [r7, #68]	; 0x44
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c66a:	3306      	adds	r3, #6
    c66c:	091a      	lsrs	r2, r3, #4
    c66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c670:	4413      	add	r3, r2
    c672:	4619      	mov	r1, r3
    c674:	f04f 0200 	mov.w	r2, #0
    c678:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30
    c67c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    }
}
    c680:	4618      	mov	r0, r3
    c682:	4621      	mov	r1, r4
    c684:	3760      	adds	r7, #96	; 0x60
    c686:	46bd      	mov	sp, r7
    c688:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c68c:	4770      	bx	lr

0000c68e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c68e:	b590      	push	{r4, r7, lr}
    c690:	b085      	sub	sp, #20
    c692:	af00      	add	r7, sp, #0
    c694:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c698:	683a      	ldr	r2, [r7, #0]
    c69a:	687b      	ldr	r3, [r7, #4]
    c69c:	4313      	orrs	r3, r2
    c69e:	2b00      	cmp	r3, #0
    c6a0:	bf0c      	ite	eq
    c6a2:	2301      	moveq	r3, #1
    c6a4:	2300      	movne	r3, #0
    c6a6:	b2db      	uxtb	r3, r3
    c6a8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c6aa:	e008      	b.n	c6be <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c6ac:	e9d7 0100 	ldrd	r0, r1, [r7]
    c6b0:	f7ff fef0 	bl	c494 <divu64_10>
    c6b4:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c6b8:	68fb      	ldr	r3, [r7, #12]
    c6ba:	3301      	adds	r3, #1
    c6bc:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c6be:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6c2:	4323      	orrs	r3, r4
    c6c4:	d1f2      	bne.n	c6ac <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c6c6:	68fb      	ldr	r3, [r7, #12]
}
    c6c8:	4618      	mov	r0, r3
    c6ca:	3714      	adds	r7, #20
    c6cc:	46bd      	mov	sp, r7
    c6ce:	bd90      	pop	{r4, r7, pc}

0000c6d0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c6d0:	b590      	push	{r4, r7, lr}
    c6d2:	b083      	sub	sp, #12
    c6d4:	af00      	add	r7, sp, #0
    c6d6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c6da:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6de:	2b00      	cmp	r3, #0
    c6e0:	f174 0300 	sbcs.w	r3, r4, #0
    c6e4:	da06      	bge.n	c6f4 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c6e6:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6ea:	425b      	negs	r3, r3
    c6ec:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c6f0:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c6f4:	e9d7 3400 	ldrd	r3, r4, [r7]
    c6f8:	4618      	mov	r0, r3
    c6fa:	4621      	mov	r1, r4
    c6fc:	f7ff ffc7 	bl	c68e <ndigits_in_u64>
    c700:	4603      	mov	r3, r0
}
    c702:	4618      	mov	r0, r3
    c704:	370c      	adds	r7, #12
    c706:	46bd      	mov	sp, r7
    c708:	bd90      	pop	{r4, r7, pc}

0000c70a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c70a:	b490      	push	{r4, r7}
    c70c:	b084      	sub	sp, #16
    c70e:	af00      	add	r7, sp, #0
    c710:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c714:	683a      	ldr	r2, [r7, #0]
    c716:	687b      	ldr	r3, [r7, #4]
    c718:	4313      	orrs	r3, r2
    c71a:	2b00      	cmp	r3, #0
    c71c:	bf0c      	ite	eq
    c71e:	2301      	moveq	r3, #1
    c720:	2300      	movne	r3, #0
    c722:	b2db      	uxtb	r3, r3
    c724:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c726:	e00e      	b.n	c746 <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
    c728:	e9d7 1200 	ldrd	r1, r2, [r7]
    c72c:	f04f 0300 	mov.w	r3, #0
    c730:	f04f 0400 	mov.w	r4, #0
    c734:	090b      	lsrs	r3, r1, #4
    c736:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c73a:	0914      	lsrs	r4, r2, #4
    c73c:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    c740:	68fb      	ldr	r3, [r7, #12]
    c742:	3301      	adds	r3, #1
    c744:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c746:	e9d7 3400 	ldrd	r3, r4, [r7]
    c74a:	4323      	orrs	r3, r4
    c74c:	d1ec      	bne.n	c728 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c74e:	68fb      	ldr	r3, [r7, #12]
}
    c750:	4618      	mov	r0, r3
    c752:	3710      	adds	r7, #16
    c754:	46bd      	mov	sp, r7
    c756:	bc90      	pop	{r4, r7}
    c758:	4770      	bx	lr

0000c75a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c75a:	b480      	push	{r7}
    c75c:	b087      	sub	sp, #28
    c75e:	af00      	add	r7, sp, #0
    c760:	6078      	str	r0, [r7, #4]
    c762:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c764:	2300      	movs	r3, #0
    c766:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c768:	2300      	movs	r3, #0
    c76a:	613b      	str	r3, [r7, #16]
    c76c:	2300      	movs	r3, #0
    c76e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c770:	687b      	ldr	r3, [r7, #4]
    c772:	781b      	ldrb	r3, [r3, #0]
    c774:	2b2d      	cmp	r3, #45	; 0x2d
    c776:	d11b      	bne.n	c7b0 <decstr_to_int+0x56>
    {
        bNeg = true;
    c778:	2301      	movs	r3, #1
    c77a:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c77c:	687b      	ldr	r3, [r7, #4]
    c77e:	3301      	adds	r3, #1
    c780:	607b      	str	r3, [r7, #4]
        uCnt++;
    c782:	68fb      	ldr	r3, [r7, #12]
    c784:	3301      	adds	r3, #1
    c786:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c788:	e012      	b.n	c7b0 <decstr_to_int+0x56>
    {
        ++uCnt;
    c78a:	68fb      	ldr	r3, [r7, #12]
    c78c:	3301      	adds	r3, #1
    c78e:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c790:	693a      	ldr	r2, [r7, #16]
    c792:	4613      	mov	r3, r2
    c794:	009b      	lsls	r3, r3, #2
    c796:	4413      	add	r3, r2
    c798:	005b      	lsls	r3, r3, #1
    c79a:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c79c:	687b      	ldr	r3, [r7, #4]
    c79e:	781b      	ldrb	r3, [r3, #0]
    c7a0:	461a      	mov	r2, r3
    c7a2:	693b      	ldr	r3, [r7, #16]
    c7a4:	4413      	add	r3, r2
    c7a6:	3b30      	subs	r3, #48	; 0x30
    c7a8:	613b      	str	r3, [r7, #16]
        pcStr++;
    c7aa:	687b      	ldr	r3, [r7, #4]
    c7ac:	3301      	adds	r3, #1
    c7ae:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	781b      	ldrb	r3, [r3, #0]
    c7b4:	2b2f      	cmp	r3, #47	; 0x2f
    c7b6:	d903      	bls.n	c7c0 <decstr_to_int+0x66>
    c7b8:	687b      	ldr	r3, [r7, #4]
    c7ba:	781b      	ldrb	r3, [r3, #0]
    c7bc:	2b39      	cmp	r3, #57	; 0x39
    c7be:	d9e4      	bls.n	c78a <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c7c0:	683b      	ldr	r3, [r7, #0]
    c7c2:	2b00      	cmp	r3, #0
    c7c4:	d002      	beq.n	c7cc <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c7c6:	683b      	ldr	r3, [r7, #0]
    c7c8:	68fa      	ldr	r2, [r7, #12]
    c7ca:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c7cc:	7dfb      	ldrb	r3, [r7, #23]
    c7ce:	2b00      	cmp	r3, #0
    c7d0:	d002      	beq.n	c7d8 <decstr_to_int+0x7e>
    c7d2:	693b      	ldr	r3, [r7, #16]
    c7d4:	425b      	negs	r3, r3
    c7d6:	e000      	b.n	c7da <decstr_to_int+0x80>
    c7d8:	693b      	ldr	r3, [r7, #16]
}
    c7da:	4618      	mov	r0, r3
    c7dc:	371c      	adds	r7, #28
    c7de:	46bd      	mov	sp, r7
    c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7e4:	4770      	bx	lr

0000c7e6 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c7e6:	b590      	push	{r4, r7, lr}
    c7e8:	b091      	sub	sp, #68	; 0x44
    c7ea:	af00      	add	r7, sp, #0
    c7ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c7f0:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c7f2:	2300      	movs	r3, #0
    c7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    c7f6:	2300      	movs	r3, #0
    c7f8:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c7fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c7fe:	f7ff fe49 	bl	c494 <divu64_10>
    c802:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c806:	68b9      	ldr	r1, [r7, #8]
    c808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c80a:	4613      	mov	r3, r2
    c80c:	009b      	lsls	r3, r3, #2
    c80e:	4413      	add	r3, r2
    c810:	005b      	lsls	r3, r3, #1
    c812:	1acb      	subs	r3, r1, r3
    c814:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c818:	b2da      	uxtb	r2, r3
    c81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c81c:	1c59      	adds	r1, r3, #1
    c81e:	63f9      	str	r1, [r7, #60]	; 0x3c
    c820:	3230      	adds	r2, #48	; 0x30
    c822:	b2d2      	uxtb	r2, r2
    c824:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c828:	440b      	add	r3, r1
    c82a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c82e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c832:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c836:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c83a:	4323      	orrs	r3, r4
    c83c:	d1dd      	bne.n	c7fa <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c840:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c842:	687b      	ldr	r3, [r7, #4]
    c844:	2b00      	cmp	r3, #0
    c846:	d011      	beq.n	c86c <uint64_to_str+0x86>
    {
        while ( ix-- )
    c848:	e008      	b.n	c85c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c84a:	687b      	ldr	r3, [r7, #4]
    c84c:	1c5a      	adds	r2, r3, #1
    c84e:	607a      	str	r2, [r7, #4]
    c850:	f107 0110 	add.w	r1, r7, #16
    c854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c856:	440a      	add	r2, r1
    c858:	7812      	ldrb	r2, [r2, #0]
    c85a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c85e:	1e5a      	subs	r2, r3, #1
    c860:	63fa      	str	r2, [r7, #60]	; 0x3c
    c862:	2b00      	cmp	r3, #0
    c864:	d1f1      	bne.n	c84a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c866:	687b      	ldr	r3, [r7, #4]
    c868:	2200      	movs	r2, #0
    c86a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c86e:	4618      	mov	r0, r3
    c870:	3744      	adds	r7, #68	; 0x44
    c872:	46bd      	mov	sp, r7
    c874:	bd90      	pop	{r4, r7, pc}

0000c876 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c876:	b490      	push	{r4, r7}
    c878:	b08c      	sub	sp, #48	; 0x30
    c87a:	af00      	add	r7, sp, #0
    c87c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c880:	607a      	str	r2, [r7, #4]
    c882:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c884:	2300      	movs	r3, #0
    c886:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c888:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c88c:	4323      	orrs	r3, r4
    c88e:	d135      	bne.n	c8fc <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c892:	1c5a      	adds	r2, r3, #1
    c894:	62fa      	str	r2, [r7, #44]	; 0x2c
    c896:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c89a:	4413      	add	r3, r2
    c89c:	2230      	movs	r2, #48	; 0x30
    c89e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c8a2:	e02b      	b.n	c8fc <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
    c8a4:	7a3b      	ldrb	r3, [r7, #8]
    c8a6:	f003 030f 	and.w	r3, r3, #15
    c8aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c8ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c8b2:	2b09      	cmp	r3, #9
    c8b4:	d90a      	bls.n	c8cc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c8b6:	78fb      	ldrb	r3, [r7, #3]
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d001      	beq.n	c8c0 <uint64_to_hexstr+0x4a>
    c8bc:	2227      	movs	r2, #39	; 0x27
    c8be:	e000      	b.n	c8c2 <uint64_to_hexstr+0x4c>
    c8c0:	2207      	movs	r2, #7
    c8c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c8c6:	4413      	add	r3, r2
    c8c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8ce:	1c5a      	adds	r2, r3, #1
    c8d0:	62fa      	str	r2, [r7, #44]	; 0x2c
    c8d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    c8d6:	3230      	adds	r2, #48	; 0x30
    c8d8:	b2d2      	uxtb	r2, r2
    c8da:	f107 0130 	add.w	r1, r7, #48	; 0x30
    c8de:	440b      	add	r3, r1
    c8e0:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c8e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    c8e8:	f04f 0300 	mov.w	r3, #0
    c8ec:	f04f 0400 	mov.w	r4, #0
    c8f0:	090b      	lsrs	r3, r1, #4
    c8f2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c8f6:	0914      	lsrs	r4, r2, #4
    c8f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
    c8fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c900:	4323      	orrs	r3, r4
    c902:	d1cf      	bne.n	c8a4 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c906:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c908:	687b      	ldr	r3, [r7, #4]
    c90a:	2b00      	cmp	r3, #0
    c90c:	d011      	beq.n	c932 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
    c90e:	e008      	b.n	c922 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
    c910:	687b      	ldr	r3, [r7, #4]
    c912:	1c5a      	adds	r2, r3, #1
    c914:	607a      	str	r2, [r7, #4]
    c916:	f107 0110 	add.w	r1, r7, #16
    c91a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c91c:	440a      	add	r2, r1
    c91e:	7812      	ldrb	r2, [r2, #0]
    c920:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c924:	1e5a      	subs	r2, r3, #1
    c926:	62fa      	str	r2, [r7, #44]	; 0x2c
    c928:	2b00      	cmp	r3, #0
    c92a:	d1f1      	bne.n	c910 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c92c:	687b      	ldr	r3, [r7, #4]
    c92e:	2200      	movs	r2, #0
    c930:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c934:	4618      	mov	r0, r3
    c936:	3730      	adds	r7, #48	; 0x30
    c938:	46bd      	mov	sp, r7
    c93a:	bc90      	pop	{r4, r7}
    c93c:	4770      	bx	lr

0000c93e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c93e:	b480      	push	{r7}
    c940:	b085      	sub	sp, #20
    c942:	af00      	add	r7, sp, #0
    c944:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    c946:	2300      	movs	r3, #0
    c948:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    c94a:	687b      	ldr	r3, [r7, #4]
    c94c:	2b00      	cmp	r3, #0
    c94e:	d104      	bne.n	c95a <simple_strlen+0x1c>
    {
        return ui32RetVal;
    c950:	68fb      	ldr	r3, [r7, #12]
    c952:	e009      	b.n	c968 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c954:	68fb      	ldr	r3, [r7, #12]
    c956:	3301      	adds	r3, #1
    c958:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    c95a:	687b      	ldr	r3, [r7, #4]
    c95c:	1c5a      	adds	r2, r3, #1
    c95e:	607a      	str	r2, [r7, #4]
    c960:	781b      	ldrb	r3, [r3, #0]
    c962:	2b00      	cmp	r3, #0
    c964:	d1f6      	bne.n	c954 <simple_strlen+0x16>
    }
    return ui32RetVal;
    c966:	68fb      	ldr	r3, [r7, #12]
}
    c968:	4618      	mov	r0, r3
    c96a:	3714      	adds	r7, #20
    c96c:	46bd      	mov	sp, r7
    c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c972:	4770      	bx	lr

0000c974 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c974:	b480      	push	{r7}
    c976:	b087      	sub	sp, #28
    c978:	af00      	add	r7, sp, #0
    c97a:	60f8      	str	r0, [r7, #12]
    c97c:	460b      	mov	r3, r1
    c97e:	607a      	str	r2, [r7, #4]
    c980:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    c982:	2300      	movs	r3, #0
    c984:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    c986:	687b      	ldr	r3, [r7, #4]
    c988:	2b00      	cmp	r3, #0
    c98a:	dc0c      	bgt.n	c9a6 <padbuffer+0x32>
    {
        return i32Cnt;
    c98c:	697b      	ldr	r3, [r7, #20]
    c98e:	e010      	b.n	c9b2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c990:	68fb      	ldr	r3, [r7, #12]
    c992:	2b00      	cmp	r3, #0
    c994:	d004      	beq.n	c9a0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c996:	68fb      	ldr	r3, [r7, #12]
    c998:	1c5a      	adds	r2, r3, #1
    c99a:	60fa      	str	r2, [r7, #12]
    c99c:	7afa      	ldrb	r2, [r7, #11]
    c99e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c9a0:	697b      	ldr	r3, [r7, #20]
    c9a2:	3301      	adds	r3, #1
    c9a4:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    c9a6:	687b      	ldr	r3, [r7, #4]
    c9a8:	1e5a      	subs	r2, r3, #1
    c9aa:	607a      	str	r2, [r7, #4]
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d1ef      	bne.n	c990 <padbuffer+0x1c>
    }

    return i32Cnt;
    c9b0:	697b      	ldr	r3, [r7, #20]
}
    c9b2:	4618      	mov	r0, r3
    c9b4:	371c      	adds	r7, #28
    c9b6:	46bd      	mov	sp, r7
    c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9bc:	4770      	bx	lr
	...

0000c9c0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c9c0:	b590      	push	{r4, r7, lr}
    c9c2:	b08f      	sub	sp, #60	; 0x3c
    c9c4:	af00      	add	r7, sp, #0
    c9c6:	ed87 0a03 	vstr	s0, [r7, #12]
    c9ca:	60b8      	str	r0, [r7, #8]
    c9cc:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c9ce:	68bb      	ldr	r3, [r7, #8]
    c9d0:	681b      	ldr	r3, [r3, #0]
    c9d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c9d6:	2b03      	cmp	r3, #3
    c9d8:	dc02      	bgt.n	c9e0 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c9da:	f06f 0302 	mvn.w	r3, #2
    c9de:	e0e7      	b.n	cbb0 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    c9e0:	edd7 7a03 	vldr	s15, [r7, #12]
    c9e4:	eef5 7a40 	vcmp.f32	s15, #0.0
    c9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c9ec:	d104      	bne.n	c9f8 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c9ee:	68bb      	ldr	r3, [r7, #8]
    c9f0:	4a71      	ldr	r2, [pc, #452]	; (cbb8 <ftoa+0x1f8>)
    c9f2:	601a      	str	r2, [r3, #0]
        return 3;
    c9f4:	2303      	movs	r3, #3
    c9f6:	e0db      	b.n	cbb0 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    c9f8:	68bb      	ldr	r3, [r7, #8]
    c9fa:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    c9fc:	68fb      	ldr	r3, [r7, #12]
    c9fe:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    ca00:	693b      	ldr	r3, [r7, #16]
    ca02:	15db      	asrs	r3, r3, #23
    ca04:	b2db      	uxtb	r3, r3
    ca06:	3b7f      	subs	r3, #127	; 0x7f
    ca08:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    ca0a:	693b      	ldr	r3, [r7, #16]
    ca0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
    ca10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    ca14:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    ca16:	2300      	movs	r3, #0
    ca18:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    ca1a:	2300      	movs	r3, #0
    ca1c:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    ca1e:	69fb      	ldr	r3, [r7, #28]
    ca20:	2b1e      	cmp	r3, #30
    ca22:	dd02      	ble.n	ca2a <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    ca24:	f06f 0301 	mvn.w	r3, #1
    ca28:	e0c2      	b.n	cbb0 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    ca2a:	69fb      	ldr	r3, [r7, #28]
    ca2c:	f113 0f17 	cmn.w	r3, #23
    ca30:	da02      	bge.n	ca38 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    ca32:	f04f 33ff 	mov.w	r3, #4294967295
    ca36:	e0bb      	b.n	cbb0 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    ca38:	69fb      	ldr	r3, [r7, #28]
    ca3a:	2b16      	cmp	r3, #22
    ca3c:	dd06      	ble.n	ca4c <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    ca3e:	69fb      	ldr	r3, [r7, #28]
    ca40:	3b17      	subs	r3, #23
    ca42:	69ba      	ldr	r2, [r7, #24]
    ca44:	fa02 f303 	lsl.w	r3, r2, r3
    ca48:	637b      	str	r3, [r7, #52]	; 0x34
    ca4a:	e01a      	b.n	ca82 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    ca4c:	69fb      	ldr	r3, [r7, #28]
    ca4e:	2b00      	cmp	r3, #0
    ca50:	db0f      	blt.n	ca72 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    ca52:	69fb      	ldr	r3, [r7, #28]
    ca54:	f1c3 0317 	rsb	r3, r3, #23
    ca58:	69ba      	ldr	r2, [r7, #24]
    ca5a:	fa42 f303 	asr.w	r3, r2, r3
    ca5e:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ca60:	69fb      	ldr	r3, [r7, #28]
    ca62:	3301      	adds	r3, #1
    ca64:	69ba      	ldr	r2, [r7, #24]
    ca66:	fa02 f303 	lsl.w	r3, r2, r3
    ca6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca6e:	633b      	str	r3, [r7, #48]	; 0x30
    ca70:	e007      	b.n	ca82 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ca72:	69bb      	ldr	r3, [r7, #24]
    ca74:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ca78:	69fb      	ldr	r3, [r7, #28]
    ca7a:	43db      	mvns	r3, r3
    ca7c:	fa42 f303 	asr.w	r3, r2, r3
    ca80:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ca82:	693b      	ldr	r3, [r7, #16]
    ca84:	2b00      	cmp	r3, #0
    ca86:	da04      	bge.n	ca92 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    ca88:	68bb      	ldr	r3, [r7, #8]
    ca8a:	1c5a      	adds	r2, r3, #1
    ca8c:	60ba      	str	r2, [r7, #8]
    ca8e:	222d      	movs	r2, #45	; 0x2d
    ca90:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ca92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca94:	2b00      	cmp	r3, #0
    ca96:	d105      	bne.n	caa4 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    ca98:	68bb      	ldr	r3, [r7, #8]
    ca9a:	1c5a      	adds	r2, r3, #1
    ca9c:	60ba      	str	r2, [r7, #8]
    ca9e:	2230      	movs	r2, #48	; 0x30
    caa0:	701a      	strb	r2, [r3, #0]
    caa2:	e021      	b.n	cae8 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    caa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    caa6:	2b00      	cmp	r3, #0
    caa8:	dd08      	ble.n	cabc <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    caaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    caac:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cab0:	68ba      	ldr	r2, [r7, #8]
    cab2:	4618      	mov	r0, r3
    cab4:	4621      	mov	r1, r4
    cab6:	f7ff fe96 	bl	c7e6 <uint64_to_str>
    caba:	e011      	b.n	cae0 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    cabc:	68bb      	ldr	r3, [r7, #8]
    cabe:	1c5a      	adds	r2, r3, #1
    cac0:	60ba      	str	r2, [r7, #8]
    cac2:	222d      	movs	r2, #45	; 0x2d
    cac4:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cac8:	425b      	negs	r3, r3
    caca:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cace:	68ba      	ldr	r2, [r7, #8]
    cad0:	4618      	mov	r0, r3
    cad2:	4621      	mov	r1, r4
    cad4:	f7ff fe87 	bl	c7e6 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cad8:	e002      	b.n	cae0 <ftoa+0x120>
        {
            pcBuf++;
    cada:	68bb      	ldr	r3, [r7, #8]
    cadc:	3301      	adds	r3, #1
    cade:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cae0:	68bb      	ldr	r3, [r7, #8]
    cae2:	781b      	ldrb	r3, [r3, #0]
    cae4:	2b00      	cmp	r3, #0
    cae6:	d1f8      	bne.n	cada <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cae8:	68bb      	ldr	r3, [r7, #8]
    caea:	1c5a      	adds	r2, r3, #1
    caec:	60ba      	str	r2, [r7, #8]
    caee:	222e      	movs	r2, #46	; 0x2e
    caf0:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    caf4:	2b00      	cmp	r3, #0
    caf6:	d105      	bne.n	cb04 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    caf8:	68bb      	ldr	r3, [r7, #8]
    cafa:	1c5a      	adds	r2, r3, #1
    cafc:	60ba      	str	r2, [r7, #8]
    cafe:	2230      	movs	r2, #48	; 0x30
    cb00:	701a      	strb	r2, [r3, #0]
    cb02:	e04f      	b.n	cba4 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cb04:	68ba      	ldr	r2, [r7, #8]
    cb06:	6a3b      	ldr	r3, [r7, #32]
    cb08:	1ad3      	subs	r3, r2, r3
    cb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cb0c:	1ad3      	subs	r3, r2, r3
    cb0e:	3b01      	subs	r3, #1
    cb10:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cb12:	697a      	ldr	r2, [r7, #20]
    cb14:	687b      	ldr	r3, [r7, #4]
    cb16:	4293      	cmp	r3, r2
    cb18:	bfa8      	it	ge
    cb1a:	4613      	movge	r3, r2
    cb1c:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cb1e:	2300      	movs	r3, #0
    cb20:	62bb      	str	r3, [r7, #40]	; 0x28
    cb22:	e015      	b.n	cb50 <ftoa+0x190>
        {
            i32FracPart *= 10;
    cb24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb26:	4613      	mov	r3, r2
    cb28:	009b      	lsls	r3, r3, #2
    cb2a:	4413      	add	r3, r2
    cb2c:	005b      	lsls	r3, r3, #1
    cb2e:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb32:	161b      	asrs	r3, r3, #24
    cb34:	b2da      	uxtb	r2, r3
    cb36:	68bb      	ldr	r3, [r7, #8]
    cb38:	1c59      	adds	r1, r3, #1
    cb3a:	60b9      	str	r1, [r7, #8]
    cb3c:	3230      	adds	r2, #48	; 0x30
    cb3e:	b2d2      	uxtb	r2, r2
    cb40:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cb44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb48:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cb4c:	3301      	adds	r3, #1
    cb4e:	62bb      	str	r3, [r7, #40]	; 0x28
    cb50:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cb52:	697b      	ldr	r3, [r7, #20]
    cb54:	429a      	cmp	r2, r3
    cb56:	dbe5      	blt.n	cb24 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cb58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb5a:	4613      	mov	r3, r2
    cb5c:	009b      	lsls	r3, r3, #2
    cb5e:	4413      	add	r3, r2
    cb60:	005b      	lsls	r3, r3, #1
    cb62:	161b      	asrs	r3, r3, #24
    cb64:	2b04      	cmp	r3, #4
    cb66:	dd1d      	ble.n	cba4 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cb68:	68bb      	ldr	r3, [r7, #8]
    cb6a:	3b01      	subs	r3, #1
    cb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb6e:	e015      	b.n	cb9c <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb72:	781b      	ldrb	r3, [r3, #0]
    cb74:	2b2e      	cmp	r3, #46	; 0x2e
    cb76:	d00e      	beq.n	cb96 <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb7a:	781b      	ldrb	r3, [r3, #0]
    cb7c:	2b39      	cmp	r3, #57	; 0x39
    cb7e:	d103      	bne.n	cb88 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    cb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb82:	2230      	movs	r2, #48	; 0x30
    cb84:	701a      	strb	r2, [r3, #0]
    cb86:	e006      	b.n	cb96 <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb8a:	781b      	ldrb	r3, [r3, #0]
    cb8c:	3301      	adds	r3, #1
    cb8e:	b2da      	uxtb	r2, r3
    cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb92:	701a      	strb	r2, [r3, #0]
                    break;
    cb94:	e006      	b.n	cba4 <ftoa+0x1e4>
                }
                pcBuftmp--;
    cb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cb98:	3b01      	subs	r3, #1
    cb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb9e:	6a3b      	ldr	r3, [r7, #32]
    cba0:	429a      	cmp	r2, r3
    cba2:	d2e5      	bcs.n	cb70 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cba4:	68bb      	ldr	r3, [r7, #8]
    cba6:	2200      	movs	r2, #0
    cba8:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cbaa:	68ba      	ldr	r2, [r7, #8]
    cbac:	6a3b      	ldr	r3, [r7, #32]
    cbae:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cbb0:	4618      	mov	r0, r3
    cbb2:	373c      	adds	r7, #60	; 0x3c
    cbb4:	46bd      	mov	sp, r7
    cbb6:	bd90      	pop	{r4, r7, pc}
    cbb8:	00302e30 	.word	0x00302e30

0000cbbc <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cbbc:	b590      	push	{r4, r7, lr}
    cbbe:	b095      	sub	sp, #84	; 0x54
    cbc0:	af00      	add	r7, sp, #0
    cbc2:	60f8      	str	r0, [r7, #12]
    cbc4:	60b9      	str	r1, [r7, #8]
    cbc6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cbc8:	2300      	movs	r3, #0
    cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cbcc:	2300      	movs	r3, #0
    cbce:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cbd0:	e2e9      	b.n	d1a6 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cbd2:	2306      	movs	r3, #6
    cbd4:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cbd6:	68bb      	ldr	r3, [r7, #8]
    cbd8:	781b      	ldrb	r3, [r3, #0]
    cbda:	2b25      	cmp	r3, #37	; 0x25
    cbdc:	d01f      	beq.n	cc1e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cbde:	68fb      	ldr	r3, [r7, #12]
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d015      	beq.n	cc10 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cbe4:	68bb      	ldr	r3, [r7, #8]
    cbe6:	781b      	ldrb	r3, [r3, #0]
    cbe8:	2b0a      	cmp	r3, #10
    cbea:	d10b      	bne.n	cc04 <am_util_stdio_vsprintf+0x48>
    cbec:	4bb2      	ldr	r3, [pc, #712]	; (ceb8 <am_util_stdio_vsprintf+0x2fc>)
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	d007      	beq.n	cc04 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cbf4:	68fb      	ldr	r3, [r7, #12]
    cbf6:	1c5a      	adds	r2, r3, #1
    cbf8:	60fa      	str	r2, [r7, #12]
    cbfa:	220d      	movs	r2, #13
    cbfc:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc00:	3301      	adds	r3, #1
    cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cc04:	68fb      	ldr	r3, [r7, #12]
    cc06:	1c5a      	adds	r2, r3, #1
    cc08:	60fa      	str	r2, [r7, #12]
    cc0a:	68ba      	ldr	r2, [r7, #8]
    cc0c:	7812      	ldrb	r2, [r2, #0]
    cc0e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cc10:	68bb      	ldr	r3, [r7, #8]
    cc12:	3301      	adds	r3, #1
    cc14:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc18:	3301      	adds	r3, #1
    cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cc1c:	e2c3      	b.n	d1a6 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cc1e:	68bb      	ldr	r3, [r7, #8]
    cc20:	3301      	adds	r3, #1
    cc22:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cc24:	2300      	movs	r3, #0
    cc26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cc2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cc2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cc32:	2320      	movs	r3, #32
    cc34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cc38:	68bb      	ldr	r3, [r7, #8]
    cc3a:	781b      	ldrb	r3, [r3, #0]
    cc3c:	2b30      	cmp	r3, #48	; 0x30
    cc3e:	d105      	bne.n	cc4c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cc40:	2330      	movs	r3, #48	; 0x30
    cc42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cc46:	68bb      	ldr	r3, [r7, #8]
    cc48:	3301      	adds	r3, #1
    cc4a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cc4c:	f107 0310 	add.w	r3, r7, #16
    cc50:	4619      	mov	r1, r3
    cc52:	68b8      	ldr	r0, [r7, #8]
    cc54:	f7ff fd81 	bl	c75a <decstr_to_int>
    cc58:	4603      	mov	r3, r0
    cc5a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cc5c:	693b      	ldr	r3, [r7, #16]
    cc5e:	68ba      	ldr	r2, [r7, #8]
    cc60:	4413      	add	r3, r2
    cc62:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cc64:	68bb      	ldr	r3, [r7, #8]
    cc66:	781b      	ldrb	r3, [r3, #0]
    cc68:	2b73      	cmp	r3, #115	; 0x73
    cc6a:	d005      	beq.n	cc78 <am_util_stdio_vsprintf+0xbc>
    cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc6e:	2b00      	cmp	r3, #0
    cc70:	da02      	bge.n	cc78 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc74:	425b      	negs	r3, r3
    cc76:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cc78:	68bb      	ldr	r3, [r7, #8]
    cc7a:	781b      	ldrb	r3, [r3, #0]
    cc7c:	2b2e      	cmp	r3, #46	; 0x2e
    cc7e:	d10e      	bne.n	cc9e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cc80:	68bb      	ldr	r3, [r7, #8]
    cc82:	3301      	adds	r3, #1
    cc84:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cc86:	f107 0310 	add.w	r3, r7, #16
    cc8a:	4619      	mov	r1, r3
    cc8c:	68b8      	ldr	r0, [r7, #8]
    cc8e:	f7ff fd64 	bl	c75a <decstr_to_int>
    cc92:	4603      	mov	r3, r0
    cc94:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cc96:	693b      	ldr	r3, [r7, #16]
    cc98:	68ba      	ldr	r2, [r7, #8]
    cc9a:	4413      	add	r3, r2
    cc9c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc9e:	68bb      	ldr	r3, [r7, #8]
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	2b6c      	cmp	r3, #108	; 0x6c
    cca4:	d10c      	bne.n	ccc0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cca6:	68bb      	ldr	r3, [r7, #8]
    cca8:	3301      	adds	r3, #1
    ccaa:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ccac:	68bb      	ldr	r3, [r7, #8]
    ccae:	781b      	ldrb	r3, [r3, #0]
    ccb0:	2b6c      	cmp	r3, #108	; 0x6c
    ccb2:	d105      	bne.n	ccc0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    ccb4:	68bb      	ldr	r3, [r7, #8]
    ccb6:	3301      	adds	r3, #1
    ccb8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    ccba:	2301      	movs	r3, #1
    ccbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    ccc0:	68bb      	ldr	r3, [r7, #8]
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	3b46      	subs	r3, #70	; 0x46
    ccc6:	2b32      	cmp	r3, #50	; 0x32
    ccc8:	f200 825a 	bhi.w	d180 <am_util_stdio_vsprintf+0x5c4>
    cccc:	a201      	add	r2, pc, #4	; (adr r2, ccd4 <am_util_stdio_vsprintf+0x118>)
    ccce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccd2:	bf00      	nop
    ccd4:	0000d107 	.word	0x0000d107
    ccd8:	0000d181 	.word	0x0000d181
    ccdc:	0000d181 	.word	0x0000d181
    cce0:	0000d181 	.word	0x0000d181
    cce4:	0000d181 	.word	0x0000d181
    cce8:	0000d181 	.word	0x0000d181
    ccec:	0000d181 	.word	0x0000d181
    ccf0:	0000d181 	.word	0x0000d181
    ccf4:	0000d181 	.word	0x0000d181
    ccf8:	0000d181 	.word	0x0000d181
    ccfc:	0000d181 	.word	0x0000d181
    cd00:	0000d181 	.word	0x0000d181
    cd04:	0000d181 	.word	0x0000d181
    cd08:	0000d181 	.word	0x0000d181
    cd0c:	0000d181 	.word	0x0000d181
    cd10:	0000d181 	.word	0x0000d181
    cd14:	0000d181 	.word	0x0000d181
    cd18:	0000d181 	.word	0x0000d181
    cd1c:	0000ce9b 	.word	0x0000ce9b
    cd20:	0000d181 	.word	0x0000d181
    cd24:	0000d181 	.word	0x0000d181
    cd28:	0000d181 	.word	0x0000d181
    cd2c:	0000d181 	.word	0x0000d181
    cd30:	0000d181 	.word	0x0000d181
    cd34:	0000d181 	.word	0x0000d181
    cd38:	0000d181 	.word	0x0000d181
    cd3c:	0000d181 	.word	0x0000d181
    cd40:	0000d181 	.word	0x0000d181
    cd44:	0000d181 	.word	0x0000d181
    cd48:	0000cda1 	.word	0x0000cda1
    cd4c:	0000cfcd 	.word	0x0000cfcd
    cd50:	0000d181 	.word	0x0000d181
    cd54:	0000d107 	.word	0x0000d107
    cd58:	0000d181 	.word	0x0000d181
    cd5c:	0000d181 	.word	0x0000d181
    cd60:	0000cfcd 	.word	0x0000cfcd
    cd64:	0000d181 	.word	0x0000d181
    cd68:	0000d181 	.word	0x0000d181
    cd6c:	0000d181 	.word	0x0000d181
    cd70:	0000d181 	.word	0x0000d181
    cd74:	0000d181 	.word	0x0000d181
    cd78:	0000d181 	.word	0x0000d181
    cd7c:	0000d181 	.word	0x0000d181
    cd80:	0000d181 	.word	0x0000d181
    cd84:	0000d181 	.word	0x0000d181
    cd88:	0000cdc7 	.word	0x0000cdc7
    cd8c:	0000d181 	.word	0x0000d181
    cd90:	0000cf39 	.word	0x0000cf39
    cd94:	0000d181 	.word	0x0000d181
    cd98:	0000d181 	.word	0x0000d181
    cd9c:	0000ce95 	.word	0x0000ce95
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cda0:	687b      	ldr	r3, [r7, #4]
    cda2:	1d1a      	adds	r2, r3, #4
    cda4:	607a      	str	r2, [r7, #4]
    cda6:	681b      	ldr	r3, [r3, #0]
    cda8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cdac:	68fb      	ldr	r3, [r7, #12]
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d005      	beq.n	cdbe <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cdb2:	68fb      	ldr	r3, [r7, #12]
    cdb4:	1c5a      	adds	r2, r3, #1
    cdb6:	60fa      	str	r2, [r7, #12]
    cdb8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cdbc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cdc0:	3301      	adds	r3, #1
    cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cdc4:	e1ec      	b.n	d1a0 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cdc6:	687b      	ldr	r3, [r7, #4]
    cdc8:	1d1a      	adds	r2, r3, #4
    cdca:	607a      	str	r2, [r7, #4]
    cdcc:	681b      	ldr	r3, [r3, #0]
    cdce:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cdd0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cdd2:	f7ff fdb4 	bl	c93e <simple_strlen>
    cdd6:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdda:	2b00      	cmp	r3, #0
    cddc:	dd2e      	ble.n	ce3c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cde0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cde2:	429a      	cmp	r2, r3
    cde4:	d22a      	bcs.n	ce3c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cde6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cdea:	1ad3      	subs	r3, r2, r3
    cdec:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cdee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cdf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cdf4:	4619      	mov	r1, r3
    cdf6:	68f8      	ldr	r0, [r7, #12]
    cdf8:	f7ff fdbc 	bl	c974 <padbuffer>
    cdfc:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cdfe:	68fb      	ldr	r3, [r7, #12]
    ce00:	2b00      	cmp	r3, #0
    ce02:	d001      	beq.n	ce08 <am_util_stdio_vsprintf+0x24c>
    ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce06:	e000      	b.n	ce0a <am_util_stdio_vsprintf+0x24e>
    ce08:	2300      	movs	r3, #0
    ce0a:	68fa      	ldr	r2, [r7, #12]
    ce0c:	4413      	add	r3, r2
    ce0e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce14:	4413      	add	r3, r2
    ce16:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    ce18:	2300      	movs	r3, #0
    ce1a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    ce1c:	e00e      	b.n	ce3c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    ce1e:	68fb      	ldr	r3, [r7, #12]
    ce20:	2b00      	cmp	r3, #0
    ce22:	d005      	beq.n	ce30 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    ce24:	68fb      	ldr	r3, [r7, #12]
    ce26:	1c5a      	adds	r2, r3, #1
    ce28:	60fa      	str	r2, [r7, #12]
    ce2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ce2c:	7812      	ldrb	r2, [r2, #0]
    ce2e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ce30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce32:	3301      	adds	r3, #1
    ce34:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    ce36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ce38:	3301      	adds	r3, #1
    ce3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    ce3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d1ec      	bne.n	ce1e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce46:	2b00      	cmp	r3, #0
    ce48:	f000 81a7 	beq.w	d19a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce4e:	425b      	negs	r3, r3
    ce50:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce56:	429a      	cmp	r2, r3
    ce58:	f080 819f 	bcs.w	d19a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ce5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce60:	1ad3      	subs	r3, r2, r3
    ce62:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ce68:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ce6a:	4619      	mov	r1, r3
    ce6c:	68f8      	ldr	r0, [r7, #12]
    ce6e:	f7ff fd81 	bl	c974 <padbuffer>
    ce72:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    ce74:	68fb      	ldr	r3, [r7, #12]
    ce76:	2b00      	cmp	r3, #0
    ce78:	d001      	beq.n	ce7e <am_util_stdio_vsprintf+0x2c2>
    ce7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce7c:	e000      	b.n	ce80 <am_util_stdio_vsprintf+0x2c4>
    ce7e:	2300      	movs	r3, #0
    ce80:	68fa      	ldr	r2, [r7, #12]
    ce82:	4413      	add	r3, r2
    ce84:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ce88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ce8a:	4413      	add	r3, r2
    ce8c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    ce8e:	2300      	movs	r3, #0
    ce90:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    ce92:	e182      	b.n	d19a <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
    ce94:	2301      	movs	r3, #1
    ce96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    ce9e:	2b00      	cmp	r3, #0
    cea0:	d00c      	beq.n	cebc <am_util_stdio_vsprintf+0x300>
    cea2:	687b      	ldr	r3, [r7, #4]
    cea4:	3307      	adds	r3, #7
    cea6:	f023 0307 	bic.w	r3, r3, #7
    ceaa:	f103 0208 	add.w	r2, r3, #8
    ceae:	607a      	str	r2, [r7, #4]
    ceb0:	e9d3 3400 	ldrd	r3, r4, [r3]
    ceb4:	e008      	b.n	cec8 <am_util_stdio_vsprintf+0x30c>
    ceb6:	bf00      	nop
    ceb8:	10001120 	.word	0x10001120
                                      va_arg(pArgs, uint32_t);
    cebc:	687b      	ldr	r3, [r7, #4]
    cebe:	1d1a      	adds	r2, r3, #4
    cec0:	607a      	str	r2, [r7, #4]
    cec2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cec4:	f04f 0400 	mov.w	r4, #0
    cec8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cece:	2b00      	cmp	r3, #0
    ced0:	d01e      	beq.n	cf10 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    ced2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    ced6:	f7ff fc18 	bl	c70a <ndigits_in_hex>
    ceda:	4602      	mov	r2, r0
    cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cede:	1a9b      	subs	r3, r3, r2
    cee0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cee8:	4619      	mov	r1, r3
    ceea:	68f8      	ldr	r0, [r7, #12]
    ceec:	f7ff fd42 	bl	c974 <padbuffer>
    cef0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cef2:	68fb      	ldr	r3, [r7, #12]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d001      	beq.n	cefc <am_util_stdio_vsprintf+0x340>
    cef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cefa:	e000      	b.n	cefe <am_util_stdio_vsprintf+0x342>
    cefc:	2300      	movs	r3, #0
    cefe:	68fa      	ldr	r2, [r7, #12]
    cf00:	4413      	add	r3, r2
    cf02:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf08:	4413      	add	r3, r2
    cf0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cf0c:	2300      	movs	r3, #0
    cf0e:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cf10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    cf14:	68fa      	ldr	r2, [r7, #12]
    cf16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf1a:	f7ff fcac 	bl	c876 <uint64_to_hexstr>
    cf1e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cf20:	68fb      	ldr	r3, [r7, #12]
    cf22:	2b00      	cmp	r3, #0
    cf24:	d003      	beq.n	cf2e <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
    cf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf28:	68fa      	ldr	r2, [r7, #12]
    cf2a:	4413      	add	r3, r2
    cf2c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cf2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cf30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf32:	4413      	add	r3, r2
    cf34:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf36:	e133      	b.n	d1a0 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	d009      	beq.n	cf54 <am_util_stdio_vsprintf+0x398>
    cf40:	687b      	ldr	r3, [r7, #4]
    cf42:	3307      	adds	r3, #7
    cf44:	f023 0307 	bic.w	r3, r3, #7
    cf48:	f103 0208 	add.w	r2, r3, #8
    cf4c:	607a      	str	r2, [r7, #4]
    cf4e:	e9d3 3400 	ldrd	r3, r4, [r3]
    cf52:	e005      	b.n	cf60 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
    cf54:	687b      	ldr	r3, [r7, #4]
    cf56:	1d1a      	adds	r2, r3, #4
    cf58:	607a      	str	r2, [r7, #4]
    cf5a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf5c:	f04f 0400 	mov.w	r4, #0
    cf60:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf66:	2b00      	cmp	r3, #0
    cf68:	d01e      	beq.n	cfa8 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cf6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cf6e:	f7ff fb8e 	bl	c68e <ndigits_in_u64>
    cf72:	4602      	mov	r2, r0
    cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf76:	1a9b      	subs	r3, r3, r2
    cf78:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf80:	4619      	mov	r1, r3
    cf82:	68f8      	ldr	r0, [r7, #12]
    cf84:	f7ff fcf6 	bl	c974 <padbuffer>
    cf88:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    cf8a:	68fb      	ldr	r3, [r7, #12]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d001      	beq.n	cf94 <am_util_stdio_vsprintf+0x3d8>
    cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf92:	e000      	b.n	cf96 <am_util_stdio_vsprintf+0x3da>
    cf94:	2300      	movs	r3, #0
    cf96:	68fa      	ldr	r2, [r7, #12]
    cf98:	4413      	add	r3, r2
    cf9a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfa0:	4413      	add	r3, r2
    cfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    cfa4:	2300      	movs	r3, #0
    cfa6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cfa8:	68fa      	ldr	r2, [r7, #12]
    cfaa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    cfae:	f7ff fc1a 	bl	c7e6 <uint64_to_str>
    cfb2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    cfb4:	68fb      	ldr	r3, [r7, #12]
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d003      	beq.n	cfc2 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
    cfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cfbc:	68fa      	ldr	r2, [r7, #12]
    cfbe:	4413      	add	r3, r2
    cfc0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    cfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cfc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfc6:	4413      	add	r3, r2
    cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cfca:	e0e9      	b.n	d1a0 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cfcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	d009      	beq.n	cfe8 <am_util_stdio_vsprintf+0x42c>
    cfd4:	687b      	ldr	r3, [r7, #4]
    cfd6:	3307      	adds	r3, #7
    cfd8:	f023 0307 	bic.w	r3, r3, #7
    cfdc:	f103 0208 	add.w	r2, r3, #8
    cfe0:	607a      	str	r2, [r7, #4]
    cfe2:	e9d3 3400 	ldrd	r3, r4, [r3]
    cfe6:	e005      	b.n	cff4 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    cfe8:	687b      	ldr	r3, [r7, #4]
    cfea:	1d1a      	adds	r2, r3, #4
    cfec:	607a      	str	r2, [r7, #4]
    cfee:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cff0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cff4:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cff8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    cffc:	2b00      	cmp	r3, #0
    cffe:	f174 0300 	sbcs.w	r3, r4, #0
    d002:	da0a      	bge.n	d01a <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d004:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d008:	425b      	negs	r3, r3
    d00a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d00e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d012:	2301      	movs	r3, #1
    d014:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d018:	e006      	b.n	d028 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d01a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d01e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d022:	2300      	movs	r3, #0
    d024:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d02a:	2b00      	cmp	r3, #0
    d02c:	d04a      	beq.n	d0c4 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d02e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d032:	4618      	mov	r0, r3
    d034:	4621      	mov	r1, r4
    d036:	f7ff fb4b 	bl	c6d0 <ndigits_in_i64>
    d03a:	4602      	mov	r2, r0
    d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d03e:	1a9b      	subs	r3, r3, r2
    d040:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d042:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d046:	2b00      	cmp	r3, #0
    d048:	d011      	beq.n	d06e <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d04c:	3b01      	subs	r3, #1
    d04e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d054:	2b30      	cmp	r3, #48	; 0x30
    d056:	d10a      	bne.n	d06e <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d058:	68fb      	ldr	r3, [r7, #12]
    d05a:	2b00      	cmp	r3, #0
    d05c:	d004      	beq.n	d068 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d05e:	68fb      	ldr	r3, [r7, #12]
    d060:	1c5a      	adds	r2, r3, #1
    d062:	60fa      	str	r2, [r7, #12]
    d064:	222d      	movs	r2, #45	; 0x2d
    d066:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d06a:	3301      	adds	r3, #1
    d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d06e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d072:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d074:	4619      	mov	r1, r3
    d076:	68f8      	ldr	r0, [r7, #12]
    d078:	f7ff fc7c 	bl	c974 <padbuffer>
    d07c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d07e:	68fb      	ldr	r3, [r7, #12]
    d080:	2b00      	cmp	r3, #0
    d082:	d001      	beq.n	d088 <am_util_stdio_vsprintf+0x4cc>
    d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d086:	e000      	b.n	d08a <am_util_stdio_vsprintf+0x4ce>
    d088:	2300      	movs	r3, #0
    d08a:	68fa      	ldr	r2, [r7, #12]
    d08c:	4413      	add	r3, r2
    d08e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d094:	4413      	add	r3, r2
    d096:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d098:	2300      	movs	r3, #0
    d09a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d09c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	d01e      	beq.n	d0e2 <am_util_stdio_vsprintf+0x526>
    d0a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0a8:	2b20      	cmp	r3, #32
    d0aa:	d11a      	bne.n	d0e2 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d0ac:	68fb      	ldr	r3, [r7, #12]
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d004      	beq.n	d0bc <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d0b2:	68fb      	ldr	r3, [r7, #12]
    d0b4:	1c5a      	adds	r2, r3, #1
    d0b6:	60fa      	str	r2, [r7, #12]
    d0b8:	222d      	movs	r2, #45	; 0x2d
    d0ba:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0be:	3301      	adds	r3, #1
    d0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    d0c2:	e00e      	b.n	d0e2 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d0c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d00a      	beq.n	d0e2 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d0cc:	68fb      	ldr	r3, [r7, #12]
    d0ce:	2b00      	cmp	r3, #0
    d0d0:	d004      	beq.n	d0dc <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d0d2:	68fb      	ldr	r3, [r7, #12]
    d0d4:	1c5a      	adds	r2, r3, #1
    d0d6:	60fa      	str	r2, [r7, #12]
    d0d8:	222d      	movs	r2, #45	; 0x2d
    d0da:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0de:	3301      	adds	r3, #1
    d0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d0e2:	68fa      	ldr	r2, [r7, #12]
    d0e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0e8:	f7ff fb7d 	bl	c7e6 <uint64_to_str>
    d0ec:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d0ee:	68fb      	ldr	r3, [r7, #12]
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d003      	beq.n	d0fc <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0f6:	68fa      	ldr	r2, [r7, #12]
    d0f8:	4413      	add	r3, r2
    d0fa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d0fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d100:	4413      	add	r3, r2
    d102:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d104:	e04c      	b.n	d1a0 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d106:	68fb      	ldr	r3, [r7, #12]
    d108:	2b00      	cmp	r3, #0
    d10a:	d048      	beq.n	d19e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d10c:	687b      	ldr	r3, [r7, #4]
    d10e:	3307      	adds	r3, #7
    d110:	f023 0307 	bic.w	r3, r3, #7
    d114:	f103 0208 	add.w	r2, r3, #8
    d118:	607a      	str	r2, [r7, #4]
    d11a:	e9d3 3400 	ldrd	r3, r4, [r3]
    d11e:	4618      	mov	r0, r3
    d120:	4621      	mov	r1, r4
    d122:	f7fe ffed 	bl	c100 <__aeabi_d2f>
    d126:	4603      	mov	r3, r0
    d128:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d12a:	68fb      	ldr	r3, [r7, #12]
    d12c:	2214      	movs	r2, #20
    d12e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d130:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d132:	68f8      	ldr	r0, [r7, #12]
    d134:	ed97 0a05 	vldr	s0, [r7, #20]
    d138:	f7ff fc42 	bl	c9c0 <ftoa>
    d13c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d140:	2b00      	cmp	r3, #0
    d142:	da14      	bge.n	d16e <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d146:	f1b3 3fff 	cmp.w	r3, #4294967295
    d14a:	d102      	bne.n	d152 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d14c:	4b1e      	ldr	r3, [pc, #120]	; (d1c8 <am_util_stdio_vsprintf+0x60c>)
    d14e:	62bb      	str	r3, [r7, #40]	; 0x28
    d150:	e008      	b.n	d164 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d154:	f113 0f02 	cmn.w	r3, #2
    d158:	d102      	bne.n	d160 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d15a:	4b1c      	ldr	r3, [pc, #112]	; (d1cc <am_util_stdio_vsprintf+0x610>)
    d15c:	62bb      	str	r3, [r7, #40]	; 0x28
    d15e:	e001      	b.n	d164 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d160:	4b1b      	ldr	r3, [pc, #108]	; (d1d0 <am_util_stdio_vsprintf+0x614>)
    d162:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d164:	68fb      	ldr	r3, [r7, #12]
    d166:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d168:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d16a:	2303      	movs	r3, #3
    d16c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d172:	4413      	add	r3, r2
    d174:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d178:	68fa      	ldr	r2, [r7, #12]
    d17a:	4413      	add	r3, r2
    d17c:	60fb      	str	r3, [r7, #12]
                }
                break;
    d17e:	e00e      	b.n	d19e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d180:	68fb      	ldr	r3, [r7, #12]
    d182:	2b00      	cmp	r3, #0
    d184:	d005      	beq.n	d192 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d186:	68fb      	ldr	r3, [r7, #12]
    d188:	1c5a      	adds	r2, r3, #1
    d18a:	60fa      	str	r2, [r7, #12]
    d18c:	68ba      	ldr	r2, [r7, #8]
    d18e:	7812      	ldrb	r2, [r2, #0]
    d190:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d194:	3301      	adds	r3, #1
    d196:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d198:	e002      	b.n	d1a0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d19a:	bf00      	nop
    d19c:	e000      	b.n	d1a0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d19e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d1a0:	68bb      	ldr	r3, [r7, #8]
    d1a2:	3301      	adds	r3, #1
    d1a4:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d1a6:	68bb      	ldr	r3, [r7, #8]
    d1a8:	781b      	ldrb	r3, [r3, #0]
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	f47f ad11 	bne.w	cbd2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d1b0:	68fb      	ldr	r3, [r7, #12]
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d002      	beq.n	d1bc <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d1b6:	68fb      	ldr	r3, [r7, #12]
    d1b8:	2200      	movs	r2, #0
    d1ba:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d1be:	4618      	mov	r0, r3
    d1c0:	3754      	adds	r7, #84	; 0x54
    d1c2:	46bd      	mov	sp, r7
    d1c4:	bd90      	pop	{r4, r7, pc}
    d1c6:	bf00      	nop
    d1c8:	00302e30 	.word	0x00302e30
    d1cc:	00232e23 	.word	0x00232e23
    d1d0:	003f2e3f 	.word	0x003f2e3f

0000d1d4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d1d4:	b40f      	push	{r0, r1, r2, r3}
    d1d6:	b580      	push	{r7, lr}
    d1d8:	b082      	sub	sp, #8
    d1da:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d1dc:	4b0d      	ldr	r3, [pc, #52]	; (d214 <am_util_stdio_printf+0x40>)
    d1de:	681b      	ldr	r3, [r3, #0]
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	d101      	bne.n	d1e8 <am_util_stdio_printf+0x14>
    {
        return 0;
    d1e4:	2300      	movs	r3, #0
    d1e6:	e00d      	b.n	d204 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d1e8:	f107 0314 	add.w	r3, r7, #20
    d1ec:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d1ee:	683a      	ldr	r2, [r7, #0]
    d1f0:	6939      	ldr	r1, [r7, #16]
    d1f2:	4809      	ldr	r0, [pc, #36]	; (d218 <am_util_stdio_printf+0x44>)
    d1f4:	f7ff fce2 	bl	cbbc <am_util_stdio_vsprintf>
    d1f8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d1fa:	4b06      	ldr	r3, [pc, #24]	; (d214 <am_util_stdio_printf+0x40>)
    d1fc:	681b      	ldr	r3, [r3, #0]
    d1fe:	4806      	ldr	r0, [pc, #24]	; (d218 <am_util_stdio_printf+0x44>)
    d200:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d202:	687b      	ldr	r3, [r7, #4]
}
    d204:	4618      	mov	r0, r3
    d206:	3708      	adds	r7, #8
    d208:	46bd      	mov	sp, r7
    d20a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d20e:	b004      	add	sp, #16
    d210:	4770      	bx	lr
    d212:	bf00      	nop
    d214:	10001294 	.word	0x10001294
    d218:	10001020 	.word	0x10001020

0000d21c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d21c:	b580      	push	{r7, lr}
    d21e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d220:	4802      	ldr	r0, [pc, #8]	; (d22c <am_util_stdio_terminal_clear+0x10>)
    d222:	f7ff ffd7 	bl	d1d4 <am_util_stdio_printf>
}
    d226:	bf00      	nop
    d228:	bd80      	pop	{r7, pc}
    d22a:	bf00      	nop
    d22c:	0000f1c8 	.word	0x0000f1c8

0000d230 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d230:	4811      	ldr	r0, [pc, #68]	; (d278 <zero_loop+0x12>)
    d232:	4912      	ldr	r1, [pc, #72]	; (d27c <zero_loop+0x16>)
    d234:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d236:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d23a:	4811      	ldr	r0, [pc, #68]	; (d280 <zero_loop+0x1a>)
    d23c:	6801      	ldr	r1, [r0, #0]
    d23e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d242:	6001      	str	r1, [r0, #0]
    d244:	f3bf 8f4f 	dsb	sy
    d248:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d24c:	480d      	ldr	r0, [pc, #52]	; (d284 <zero_loop+0x1e>)
    d24e:	490e      	ldr	r1, [pc, #56]	; (d288 <zero_loop+0x22>)
    d250:	4a0e      	ldr	r2, [pc, #56]	; (d28c <zero_loop+0x26>)

0000d252 <copy_loop>:
    d252:	f850 3b04 	ldr.w	r3, [r0], #4
    d256:	f841 3b04 	str.w	r3, [r1], #4
    d25a:	4291      	cmp	r1, r2
    d25c:	dbf9      	blt.n	d252 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d25e:	480c      	ldr	r0, [pc, #48]	; (d290 <zero_loop+0x2a>)
    d260:	490c      	ldr	r1, [pc, #48]	; (d294 <zero_loop+0x2e>)
    d262:	f04f 0200 	mov.w	r2, #0

0000d266 <zero_loop>:
    d266:	4288      	cmp	r0, r1
    d268:	bfb8      	it	lt
    d26a:	f840 2b04 	strlt.w	r2, [r0], #4
    d26e:	dbfa      	blt.n	d266 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d270:	f7fe ffce 	bl	c210 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d274:	be00      	bkpt	0x0000
}
    d276:	bf00      	nop
    d278:	e000ed08 	.word	0xe000ed08
    d27c:	0000c000 	.word	0x0000c000
    d280:	e000ed88 	.word	0xe000ed88
    d284:	0000f650 	.word	0x0000f650
    d288:	10001000 	.word	0x10001000
    d28c:	10001020 	.word	0x10001020
    d290:	10001020 	.word	0x10001020
    d294:	1000570c 	.word	0x1000570c

0000d298 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    d298:	b480      	push	{r7}
    d29a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d29c:	e7fe      	b.n	d29c <NMI_Handler+0x4>

0000d29e <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d29e:	b480      	push	{r7}
    d2a0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d2a2:	e7fe      	b.n	d2a2 <DebugMon_Handler+0x4>

0000d2a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    d2a4:	b480      	push	{r7}
    d2a6:	b083      	sub	sp, #12
    d2a8:	af00      	add	r7, sp, #0
    d2aa:	4603      	mov	r3, r0
    d2ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    d2ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d2b2:	2b00      	cmp	r3, #0
    d2b4:	db0b      	blt.n	d2ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d2b6:	79fb      	ldrb	r3, [r7, #7]
    d2b8:	f003 021f 	and.w	r2, r3, #31
    d2bc:	4907      	ldr	r1, [pc, #28]	; (d2dc <__NVIC_EnableIRQ+0x38>)
    d2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
    d2c2:	095b      	lsrs	r3, r3, #5
    d2c4:	2001      	movs	r0, #1
    d2c6:	fa00 f202 	lsl.w	r2, r0, r2
    d2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    d2ce:	bf00      	nop
    d2d0:	370c      	adds	r7, #12
    d2d2:	46bd      	mov	sp, r7
    d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2d8:	4770      	bx	lr
    d2da:	bf00      	nop
    d2dc:	e000e100 	.word	0xe000e100

0000d2e0 <cameraSetup>:
#define CLKBUFFLEN_4 1024
uint32_t clkbuff[CLKBUFFLEN_4];
void * iomHandle;


uint32_t cameraSetup( void ){
    d2e0:	b580      	push	{r7, lr}
    d2e2:	b086      	sub	sp, #24
    d2e4:	af00      	add	r7, sp, #0
    uint32_t retval = 0x00;
    d2e6:	2300      	movs	r3, #0
    d2e8:	617b      	str	r3, [r7, #20]

    // Setup Pins
    am_hal_gpio_pinconfig(AM_BSP_CAM_XCLK, g_AM_BSP_CAM_XCLK);          // Clock generation for camera
    d2ea:	4b57      	ldr	r3, [pc, #348]	; (d448 <cameraSetup+0x168>)
    d2ec:	6819      	ldr	r1, [r3, #0]
    d2ee:	2007      	movs	r0, #7
    d2f0:	f000 fac6 	bl	d880 <am_hal_gpio_pinconfig>

    am_hal_gpio_pinconfig(AM_BSP_CAM_PCLK, g_AM_BSP_CAM_PCLK);          // Interrupts for state
    d2f4:	4b55      	ldr	r3, [pc, #340]	; (d44c <cameraSetup+0x16c>)
    d2f6:	6819      	ldr	r1, [r3, #0]
    d2f8:	2017      	movs	r0, #23
    d2fa:	f000 fac1 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_HREF, g_AM_BSP_CAM_HREF);          
    d2fe:	4b54      	ldr	r3, [pc, #336]	; (d450 <cameraSetup+0x170>)
    d300:	6819      	ldr	r1, [r3, #0]
    d302:	201a      	movs	r0, #26
    d304:	f000 fabc 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_VSYNC, g_AM_BSP_CAM_VSYNC);
    d308:	4b52      	ldr	r3, [pc, #328]	; (d454 <cameraSetup+0x174>)
    d30a:	6819      	ldr	r1, [r3, #0]
    d30c:	200c      	movs	r0, #12
    d30e:	f000 fab7 	bl	d880 <am_hal_gpio_pinconfig>

    am_hal_gpio_pinconfig(AM_BSP_CAM_Y0, g_AM_BSP_CAM_Y0);              // Inputs for data
    d312:	4b51      	ldr	r3, [pc, #324]	; (d458 <cameraSetup+0x178>)
    d314:	6819      	ldr	r1, [r3, #0]
    d316:	2006      	movs	r0, #6
    d318:	f000 fab2 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y1, g_AM_BSP_CAM_Y1);
    d31c:	4b4f      	ldr	r3, [pc, #316]	; (d45c <cameraSetup+0x17c>)
    d31e:	6819      	ldr	r1, [r3, #0]
    d320:	2008      	movs	r0, #8
    d322:	f000 faad 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y2, g_AM_BSP_CAM_Y2);
    d326:	4b4e      	ldr	r3, [pc, #312]	; (d460 <cameraSetup+0x180>)
    d328:	6819      	ldr	r1, [r3, #0]
    d32a:	2009      	movs	r0, #9
    d32c:	f000 faa8 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y3, g_AM_BSP_CAM_Y3);
    d330:	4b4c      	ldr	r3, [pc, #304]	; (d464 <cameraSetup+0x184>)
    d332:	6819      	ldr	r1, [r3, #0]
    d334:	2005      	movs	r0, #5
    d336:	f000 faa3 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y4, g_AM_BSP_CAM_Y4);
    d33a:	4b4b      	ldr	r3, [pc, #300]	; (d468 <cameraSetup+0x188>)
    d33c:	6819      	ldr	r1, [r3, #0]
    d33e:	2004      	movs	r0, #4
    d340:	f000 fa9e 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y5, g_AM_BSP_CAM_Y5);
    d344:	4b49      	ldr	r3, [pc, #292]	; (d46c <cameraSetup+0x18c>)
    d346:	6819      	ldr	r1, [r3, #0]
    d348:	2016      	movs	r0, #22
    d34a:	f000 fa99 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y6, g_AM_BSP_CAM_Y6);
    d34e:	4b48      	ldr	r3, [pc, #288]	; (d470 <cameraSetup+0x190>)
    d350:	6819      	ldr	r1, [r3, #0]
    d352:	2018      	movs	r0, #24
    d354:	f000 fa94 	bl	d880 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_CAM_Y7, g_AM_BSP_CAM_Y7);
    d358:	4b46      	ldr	r3, [pc, #280]	; (d474 <cameraSetup+0x194>)
    d35a:	6819      	ldr	r1, [r3, #0]
    d35c:	201c      	movs	r0, #28
    d35e:	f000 fa8f 	bl	d880 <am_hal_gpio_pinconfig>
    // retval = am_hal_gpio_interrupt_register(AM_BSP_CAM_VSYNC, &edge_cam_int_vsync);
    // if(retval){ return retval; }


    // Enable interrupts
    retval = am_hal_gpio_interrupt_enable( (0b1 << AM_BSP_CAM_PCLK) );
    d362:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    d366:	f04f 0100 	mov.w	r1, #0
    d36a:	f000 fc47 	bl	dbfc <am_hal_gpio_interrupt_enable>
    d36e:	6178      	str	r0, [r7, #20]
    if(retval){ return retval; }
    d370:	697b      	ldr	r3, [r7, #20]
    d372:	2b00      	cmp	r3, #0
    d374:	d001      	beq.n	d37a <cameraSetup+0x9a>
    d376:	697b      	ldr	r3, [r7, #20]
    d378:	e062      	b.n	d440 <cameraSetup+0x160>
    retval = am_hal_gpio_interrupt_enable( (0b1 << AM_BSP_CAM_HREF) );
    d37a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    d37e:	f04f 0100 	mov.w	r1, #0
    d382:	f000 fc3b 	bl	dbfc <am_hal_gpio_interrupt_enable>
    d386:	6178      	str	r0, [r7, #20]
    if(retval){ return retval; }    
    d388:	697b      	ldr	r3, [r7, #20]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d001      	beq.n	d392 <cameraSetup+0xb2>
    d38e:	697b      	ldr	r3, [r7, #20]
    d390:	e056      	b.n	d440 <cameraSetup+0x160>
    retval = am_hal_gpio_interrupt_enable( (0b1 << AM_BSP_CAM_VSYNC) );
    d392:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d396:	f04f 0100 	mov.w	r1, #0
    d39a:	f000 fc2f 	bl	dbfc <am_hal_gpio_interrupt_enable>
    d39e:	6178      	str	r0, [r7, #20]
    if(retval){ return retval; }    
    d3a0:	697b      	ldr	r3, [r7, #20]
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	d001      	beq.n	d3aa <cameraSetup+0xca>
    d3a6:	697b      	ldr	r3, [r7, #20]
    d3a8:	e04a      	b.n	d440 <cameraSetup+0x160>

    //
    // Enable interrupts.
    //
    NVIC_EnableIRQ(GPIO_IRQn);
    d3aa:	200d      	movs	r0, #13
    d3ac:	f7ff ff7a 	bl	d2a4 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    d3b0:	f000 fc94 	bl	dcdc <am_hal_interrupt_master_enable>
//     am_hal_clkgen_status_t rxClkStat;
//     am_hal_clkgen_status_get(&rxClkStat);

//     am_util_stdio_printf("Clkgen status: SysclkFreq - %d, eRTCOSC - %d, xtalfail %d\r\n", rxClkStat.ui32SysclkFreq, rxClkStat.eRTCOSC, rxClkStat.bXtalFailure);

    am_hal_iom_config_t spiConfig =
    d3b4:	463b      	mov	r3, r7
    d3b6:	2200      	movs	r2, #0
    d3b8:	601a      	str	r2, [r3, #0]
    d3ba:	605a      	str	r2, [r3, #4]
    d3bc:	609a      	str	r2, [r3, #8]
    d3be:	60da      	str	r2, [r3, #12]
    d3c0:	611a      	str	r2, [r3, #16]
    d3c2:	4b2d      	ldr	r3, [pc, #180]	; (d478 <cameraSetup+0x198>)
    d3c4:	607b      	str	r3, [r7, #4]
    d3c6:	4b2d      	ldr	r3, [pc, #180]	; (d47c <cameraSetup+0x19c>)
    d3c8:	60fb      	str	r3, [r7, #12]
    d3ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    d3ce:	613b      	str	r3, [r7, #16]
        .pNBTxnBuf = clkbuff,
        .ui32NBTxnBufLength = 4*CLKBUFFLEN_4,
    };

    // Initialize the IOM.
    retval = am_hal_iom_initialize(AM_BSP_CAM_CLKGEN_IOM, &iomHandle);
    d3d0:	492b      	ldr	r1, [pc, #172]	; (d480 <cameraSetup+0x1a0>)
    d3d2:	2000      	movs	r0, #0
    d3d4:	f000 fc8e 	bl	dcf4 <am_hal_iom_initialize>
    d3d8:	6178      	str	r0, [r7, #20]
    if (retval != AM_HAL_STATUS_SUCCESS) return retval; // -1;
    d3da:	697b      	ldr	r3, [r7, #20]
    d3dc:	2b00      	cmp	r3, #0
    d3de:	d001      	beq.n	d3e4 <cameraSetup+0x104>
    d3e0:	697b      	ldr	r3, [r7, #20]
    d3e2:	e02d      	b.n	d440 <cameraSetup+0x160>

    retval = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d3e4:	4b26      	ldr	r3, [pc, #152]	; (d480 <cameraSetup+0x1a0>)
    d3e6:	681b      	ldr	r3, [r3, #0]
    d3e8:	2200      	movs	r2, #0
    d3ea:	2100      	movs	r1, #0
    d3ec:	4618      	mov	r0, r3
    d3ee:	f000 fd19 	bl	de24 <am_hal_iom_power_ctrl>
    d3f2:	6178      	str	r0, [r7, #20]
    if (retval != AM_HAL_STATUS_SUCCESS) return retval; // -2;
    d3f4:	697b      	ldr	r3, [r7, #20]
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d001      	beq.n	d3fe <cameraSetup+0x11e>
    d3fa:	697b      	ldr	r3, [r7, #20]
    d3fc:	e020      	b.n	d440 <cameraSetup+0x160>
    
    // Set the required configuration settings for the IOM.
    //
    retval = am_hal_iom_configure(iomHandle, &spiConfig);
    d3fe:	4b20      	ldr	r3, [pc, #128]	; (d480 <cameraSetup+0x1a0>)
    d400:	681b      	ldr	r3, [r3, #0]
    d402:	463a      	mov	r2, r7
    d404:	4611      	mov	r1, r2
    d406:	4618      	mov	r0, r3
    d408:	f000 fe1c 	bl	e044 <am_hal_iom_configure>
    d40c:	6178      	str	r0, [r7, #20]
    if (retval != AM_HAL_STATUS_SUCCESS) return retval; // -3;
    d40e:	697b      	ldr	r3, [r7, #20]
    d410:	2b00      	cmp	r3, #0
    d412:	d001      	beq.n	d418 <cameraSetup+0x138>
    d414:	697b      	ldr	r3, [r7, #20]
    d416:	e013      	b.n	d440 <cameraSetup+0x160>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_CAM_XCLK,  g_AM_BSP_CAM_XCLK); // 7
    d418:	4b0b      	ldr	r3, [pc, #44]	; (d448 <cameraSetup+0x168>)
    d41a:	6819      	ldr	r1, [r3, #0]
    d41c:	2007      	movs	r0, #7
    d41e:	f000 fa2f 	bl	d880 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retval = am_hal_iom_enable(iomHandle);
    d422:	4b17      	ldr	r3, [pc, #92]	; (d480 <cameraSetup+0x1a0>)
    d424:	681b      	ldr	r3, [r3, #0]
    d426:	4618      	mov	r0, r3
    d428:	f000 fc8c 	bl	dd44 <am_hal_iom_enable>
    d42c:	6178      	str	r0, [r7, #20]
    if (retval != AM_HAL_STATUS_SUCCESS) return retval; // -4;
    d42e:	697b      	ldr	r3, [r7, #20]
    d430:	2b00      	cmp	r3, #0
    d432:	d001      	beq.n	d438 <cameraSetup+0x158>
    d434:	697b      	ldr	r3, [r7, #20]
    d436:	e003      	b.n	d440 <cameraSetup+0x160>

    // Enable interrupts for IOM0
    NVIC_EnableIRQ(IOMSTR0_IRQn);
    d438:	2006      	movs	r0, #6
    d43a:	f7ff ff33 	bl	d2a4 <__NVIC_EnableIRQ>


    return retval;
    d43e:	697b      	ldr	r3, [r7, #20]
}
    d440:	4618      	mov	r0, r3
    d442:	3718      	adds	r7, #24
    d444:	46bd      	mov	sp, r7
    d446:	bd80      	pop	{r7, pc}
    d448:	0000f238 	.word	0x0000f238
    d44c:	0000f230 	.word	0x0000f230
    d450:	0000f22c 	.word	0x0000f22c
    d454:	0000f234 	.word	0x0000f234
    d458:	0000f23c 	.word	0x0000f23c
    d45c:	0000f240 	.word	0x0000f240
    d460:	0000f244 	.word	0x0000f244
    d464:	0000f248 	.word	0x0000f248
    d468:	0000f24c 	.word	0x0000f24c
    d46c:	0000f250 	.word	0x0000f250
    d470:	0000f254 	.word	0x0000f254
    d474:	0000f258 	.word	0x0000f258
    d478:	00f42400 	.word	0x00f42400
    d47c:	1000129c 	.word	0x1000129c
    d480:	10001298 	.word	0x10001298

0000d484 <edge_cam_isr>:


void edge_cam_isr( uint64_t ui64IntMask ){
    d484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    d488:	b082      	sub	sp, #8
    d48a:	af00      	add	r7, sp, #0
    d48c:	e9c7 0100 	strd	r0, r1, [r7]
    // Conditionally call the camera interrupts if their bits are set. Use the priority that makes the most sense

    // if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_PCLK + 4) )){
    if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_PCLK + 0) )){
    d490:	e9d7 0100 	ldrd	r0, r1, [r7]
    d494:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
    d498:	f04f 0b00 	mov.w	fp, #0
    d49c:	ea00 020a 	and.w	r2, r0, sl
    d4a0:	ea01 030b 	and.w	r3, r1, fp
    d4a4:	4313      	orrs	r3, r2
    d4a6:	d001      	beq.n	d4ac <edge_cam_isr+0x28>
        edge_cam_int_pclk();
    d4a8:	f000 f824 	bl	d4f4 <edge_cam_int_pclk>
    }
    // if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_HREF + 4) )){
    if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_HREF + 0) )){
    d4ac:	e9d7 2300 	ldrd	r2, r3, [r7]
    d4b0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    d4b4:	f04f 0100 	mov.w	r1, #0
    d4b8:	ea02 0800 	and.w	r8, r2, r0
    d4bc:	ea03 0901 	and.w	r9, r3, r1
    d4c0:	ea58 0309 	orrs.w	r3, r8, r9
    d4c4:	d001      	beq.n	d4ca <edge_cam_isr+0x46>
        edge_cam_int_href();
    d4c6:	f000 f81f 	bl	d508 <edge_cam_int_href>
    }
    // if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_VSYNC + 4) )){
    if(ui64IntMask & ( 0b1 << (AM_BSP_CAM_VSYNC + 0) )){
    d4ca:	e9d7 2300 	ldrd	r2, r3, [r7]
    d4ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    d4d2:	f04f 0100 	mov.w	r1, #0
    d4d6:	ea02 0400 	and.w	r4, r2, r0
    d4da:	ea03 0501 	and.w	r5, r3, r1
    d4de:	ea54 0305 	orrs.w	r3, r4, r5
    d4e2:	d001      	beq.n	d4e8 <edge_cam_isr+0x64>
        edge_cam_int_vsync();
    d4e4:	f000 f81a 	bl	d51c <edge_cam_int_vsync>
    }
}
    d4e8:	bf00      	nop
    d4ea:	3708      	adds	r7, #8
    d4ec:	46bd      	mov	sp, r7
    d4ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0000d4f4 <edge_cam_int_pclk>:

void edge_cam_int_pclk( void ){
    d4f4:	b580      	push	{r7, lr}
    d4f6:	af00      	add	r7, sp, #0
    am_bsp_uart_string_print("PCLK INT!\r\n");
    d4f8:	4802      	ldr	r0, [pc, #8]	; (d504 <edge_cam_int_pclk+0x10>)
    d4fa:	f000 f819 	bl	d530 <am_bsp_uart_string_print>
}
    d4fe:	bf00      	nop
    d500:	bd80      	pop	{r7, pc}
    d502:	bf00      	nop
    d504:	0000f1dc 	.word	0x0000f1dc

0000d508 <edge_cam_int_href>:

void edge_cam_int_href( void ){
    d508:	b580      	push	{r7, lr}
    d50a:	af00      	add	r7, sp, #0
    am_bsp_uart_string_print("HREF INT!\r\n");
    d50c:	4802      	ldr	r0, [pc, #8]	; (d518 <edge_cam_int_href+0x10>)
    d50e:	f000 f80f 	bl	d530 <am_bsp_uart_string_print>
}
    d512:	bf00      	nop
    d514:	bd80      	pop	{r7, pc}
    d516:	bf00      	nop
    d518:	0000f1e8 	.word	0x0000f1e8

0000d51c <edge_cam_int_vsync>:

void edge_cam_int_vsync( void ){
    d51c:	b580      	push	{r7, lr}
    d51e:	af00      	add	r7, sp, #0
    am_bsp_uart_string_print("VSYNC INT!\r\n");
    d520:	4802      	ldr	r0, [pc, #8]	; (d52c <edge_cam_int_vsync+0x10>)
    d522:	f000 f805 	bl	d530 <am_bsp_uart_string_print>
    d526:	bf00      	nop
    d528:	bd80      	pop	{r7, pc}
    d52a:	bf00      	nop
    d52c:	0000f1f4 	.word	0x0000f1f4

0000d530 <am_bsp_uart_string_print>:
    d530:	b510      	push	{r4, lr}
    d532:	b086      	sub	sp, #24
    d534:	7804      	ldrb	r4, [r0, #0]
    d536:	2300      	movs	r3, #0
    d538:	9300      	str	r3, [sp, #0]
    d53a:	b13c      	cbz	r4, d54c <am_bsp_uart_string_print+0x1c>
    d53c:	4603      	mov	r3, r0
    d53e:	f1c0 0201 	rsb	r2, r0, #1
    d542:	18d4      	adds	r4, r2, r3
    d544:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d548:	2900      	cmp	r1, #0
    d54a:	d1fa      	bne.n	d542 <am_bsp_uart_string_print+0x12>
    d54c:	4b09      	ldr	r3, [pc, #36]	; (d574 <am_bsp_uart_string_print+0x44>)
    d54e:	9002      	str	r0, [sp, #8]
    d550:	2200      	movs	r2, #0
    d552:	6818      	ldr	r0, [r3, #0]
    d554:	9403      	str	r4, [sp, #12]
    d556:	f04f 33ff 	mov.w	r3, #4294967295
    d55a:	a901      	add	r1, sp, #4
    d55c:	9304      	str	r3, [sp, #16]
    d55e:	9201      	str	r2, [sp, #4]
    d560:	f8cd d014 	str.w	sp, [sp, #20]
    d564:	f001 fa2c 	bl	e9c0 <am_hal_uart_transfer>
    d568:	9b00      	ldr	r3, [sp, #0]
    d56a:	42a3      	cmp	r3, r4
    d56c:	d000      	beq.n	d570 <am_bsp_uart_string_print+0x40>
    d56e:	e7fe      	b.n	d56e <am_bsp_uart_string_print+0x3e>
    d570:	b006      	add	sp, #24
    d572:	bd10      	pop	{r4, pc}
    d574:	10001124 	.word	0x10001124

0000d578 <am_bsp_low_power_init>:
    d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d57a:	f000 fe99 	bl	e2b0 <am_hal_itm_disable>
    d57e:	2000      	movs	r0, #0
    d580:	f7fe ff78 	bl	c474 <am_util_stdio_printf_init>
    d584:	4b12      	ldr	r3, [pc, #72]	; (d5d0 <am_bsp_low_power_init+0x58>)
    d586:	4f13      	ldr	r7, [pc, #76]	; (d5d4 <am_bsp_low_power_init+0x5c>)
    d588:	6819      	ldr	r1, [r3, #0]
    d58a:	2021      	movs	r0, #33	; 0x21
    d58c:	f000 f978 	bl	d880 <am_hal_gpio_pinconfig>
    d590:	f000 ffd0 	bl	e534 <am_hal_pwrctrl_low_power_init>
    d594:	2001      	movs	r0, #1
    d596:	f001 f817 	bl	e5c8 <am_hal_rtc_osc_select>
    d59a:	2100      	movs	r1, #0
    d59c:	2003      	movs	r0, #3
    d59e:	f000 f8b5 	bl	d70c <am_hal_clkgen_control>
    d5a2:	f001 f81d 	bl	e5e0 <am_hal_rtc_osc_disable>
    d5a6:	4b0c      	ldr	r3, [pc, #48]	; (d5d8 <am_bsp_low_power_init+0x60>)
    d5a8:	681e      	ldr	r6, [r3, #0]
    d5aa:	2400      	movs	r4, #0
    d5ac:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d5b0:	4631      	mov	r1, r6
    d5b2:	4628      	mov	r0, r5
    d5b4:	f000 f964 	bl	d880 <am_hal_gpio_pinconfig>
    d5b8:	2103      	movs	r1, #3
    d5ba:	4628      	mov	r0, r5
    d5bc:	f000 fad4 	bl	db68 <am_hal_gpio_state_write>
    d5c0:	3401      	adds	r4, #1
    d5c2:	4628      	mov	r0, r5
    d5c4:	2100      	movs	r1, #0
    d5c6:	f000 facf 	bl	db68 <am_hal_gpio_state_write>
    d5ca:	2c04      	cmp	r4, #4
    d5cc:	d1ee      	bne.n	d5ac <am_bsp_low_power_init+0x34>
    d5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5d0:	0000f39c 	.word	0x0000f39c
    d5d4:	10001000 	.word	0x10001000
    d5d8:	0000f3a0 	.word	0x0000f3a0

0000d5dc <am_bsp_debug_printf_disable>:
    d5dc:	b538      	push	{r3, r4, r5, lr}
    d5de:	4b17      	ldr	r3, [pc, #92]	; (d63c <am_bsp_debug_printf_disable+0x60>)
    d5e0:	681c      	ldr	r4, [r3, #0]
    d5e2:	2c01      	cmp	r4, #1
    d5e4:	d002      	beq.n	d5ec <am_bsp_debug_printf_disable+0x10>
    d5e6:	2c02      	cmp	r4, #2
    d5e8:	d00c      	beq.n	d604 <am_bsp_debug_printf_disable+0x28>
    d5ea:	bd38      	pop	{r3, r4, r5, pc}
    d5ec:	f000 fe60 	bl	e2b0 <am_hal_itm_disable>
    d5f0:	2000      	movs	r0, #0
    d5f2:	f7fe ff3f 	bl	c474 <am_util_stdio_printf_init>
    d5f6:	4b12      	ldr	r3, [pc, #72]	; (d640 <am_bsp_debug_printf_disable+0x64>)
    d5f8:	2021      	movs	r0, #33	; 0x21
    d5fa:	6819      	ldr	r1, [r3, #0]
    d5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d600:	f000 b93e 	b.w	d880 <am_hal_gpio_pinconfig>
    d604:	4d0f      	ldr	r5, [pc, #60]	; (d644 <am_bsp_debug_printf_disable+0x68>)
    d606:	6828      	ldr	r0, [r5, #0]
    d608:	f001 fc14 	bl	ee34 <am_hal_uart_tx_flush>
    d60c:	2000      	movs	r0, #0
    d60e:	f7fe ff31 	bl	c474 <am_util_stdio_printf_init>
    d612:	4621      	mov	r1, r4
    d614:	2200      	movs	r2, #0
    d616:	6828      	ldr	r0, [r5, #0]
    d618:	f001 f854 	bl	e6c4 <am_hal_uart_power_control>
    d61c:	6828      	ldr	r0, [r5, #0]
    d61e:	f001 f83d 	bl	e69c <am_hal_uart_deinitialize>
    d622:	4b07      	ldr	r3, [pc, #28]	; (d640 <am_bsp_debug_printf_disable+0x64>)
    d624:	681c      	ldr	r4, [r3, #0]
    d626:	2030      	movs	r0, #48	; 0x30
    d628:	4621      	mov	r1, r4
    d62a:	f000 f929 	bl	d880 <am_hal_gpio_pinconfig>
    d62e:	4621      	mov	r1, r4
    d630:	2031      	movs	r0, #49	; 0x31
    d632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d636:	f000 b923 	b.w	d880 <am_hal_gpio_pinconfig>
    d63a:	bf00      	nop
    d63c:	10001128 	.word	0x10001128
    d640:	0000f39c 	.word	0x0000f39c
    d644:	10001124 	.word	0x10001124

0000d648 <am_bsp_uart_printf_enable>:
    d648:	b510      	push	{r4, lr}
    d64a:	4c10      	ldr	r4, [pc, #64]	; (d68c <am_bsp_uart_printf_enable+0x44>)
    d64c:	4b10      	ldr	r3, [pc, #64]	; (d690 <am_bsp_uart_printf_enable+0x48>)
    d64e:	4621      	mov	r1, r4
    d650:	2202      	movs	r2, #2
    d652:	2000      	movs	r0, #0
    d654:	601a      	str	r2, [r3, #0]
    d656:	f000 fff9 	bl	e64c <am_hal_uart_initialize>
    d65a:	2200      	movs	r2, #0
    d65c:	4611      	mov	r1, r2
    d65e:	6820      	ldr	r0, [r4, #0]
    d660:	f001 f830 	bl	e6c4 <am_hal_uart_power_control>
    d664:	6820      	ldr	r0, [r4, #0]
    d666:	490b      	ldr	r1, [pc, #44]	; (d694 <am_bsp_uart_printf_enable+0x4c>)
    d668:	f001 f89e 	bl	e7a8 <am_hal_uart_configure>
    d66c:	4b0a      	ldr	r3, [pc, #40]	; (d698 <am_bsp_uart_printf_enable+0x50>)
    d66e:	2030      	movs	r0, #48	; 0x30
    d670:	6819      	ldr	r1, [r3, #0]
    d672:	f000 f905 	bl	d880 <am_hal_gpio_pinconfig>
    d676:	4b09      	ldr	r3, [pc, #36]	; (d69c <am_bsp_uart_printf_enable+0x54>)
    d678:	2031      	movs	r0, #49	; 0x31
    d67a:	6819      	ldr	r1, [r3, #0]
    d67c:	f000 f900 	bl	d880 <am_hal_gpio_pinconfig>
    d680:	4807      	ldr	r0, [pc, #28]	; (d6a0 <am_bsp_uart_printf_enable+0x58>)
    d682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d686:	f7fe bef5 	b.w	c474 <am_util_stdio_printf_init>
    d68a:	bf00      	nop
    d68c:	10001124 	.word	0x10001124
    d690:	10001128 	.word	0x10001128
    d694:	0000f204 	.word	0x0000f204
    d698:	0000f260 	.word	0x0000f260
    d69c:	0000f25c 	.word	0x0000f25c
    d6a0:	0000d531 	.word	0x0000d531

0000d6a4 <am_hal_cachectrl_config>:
    d6a4:	b530      	push	{r4, r5, lr}
    d6a6:	b083      	sub	sp, #12
    d6a8:	4605      	mov	r5, r0
    d6aa:	f000 fb1b 	bl	dce4 <am_hal_interrupt_master_disable>
    d6ae:	4c11      	ldr	r4, [pc, #68]	; (d6f4 <am_hal_cachectrl_config+0x50>)
    d6b0:	9001      	str	r0, [sp, #4]
    d6b2:	6823      	ldr	r3, [r4, #0]
    d6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d6b8:	6023      	str	r3, [r4, #0]
    d6ba:	9801      	ldr	r0, [sp, #4]
    d6bc:	f000 fb16 	bl	dcec <am_hal_interrupt_master_set>
    d6c0:	78eb      	ldrb	r3, [r5, #3]
    d6c2:	782a      	ldrb	r2, [r5, #0]
    d6c4:	78a8      	ldrb	r0, [r5, #2]
    d6c6:	7869      	ldrb	r1, [r5, #1]
    d6c8:	005b      	lsls	r3, r3, #1
    d6ca:	0112      	lsls	r2, r2, #4
    d6cc:	b2d2      	uxtb	r2, r2
    d6ce:	f003 0302 	and.w	r3, r3, #2
    d6d2:	4313      	orrs	r3, r2
    d6d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d6d8:	0080      	lsls	r0, r0, #2
    d6da:	f000 000c 	and.w	r0, r0, #12
    d6de:	020a      	lsls	r2, r1, #8
    d6e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d6e4:	4303      	orrs	r3, r0
    d6e6:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d6ea:	4313      	orrs	r3, r2
    d6ec:	2000      	movs	r0, #0
    d6ee:	6023      	str	r3, [r4, #0]
    d6f0:	b003      	add	sp, #12
    d6f2:	bd30      	pop	{r4, r5, pc}
    d6f4:	40018000 	.word	0x40018000

0000d6f8 <am_hal_cachectrl_enable>:
    d6f8:	4a03      	ldr	r2, [pc, #12]	; (d708 <am_hal_cachectrl_enable+0x10>)
    d6fa:	6813      	ldr	r3, [r2, #0]
    d6fc:	f043 0301 	orr.w	r3, r3, #1
    d700:	6013      	str	r3, [r2, #0]
    d702:	2000      	movs	r0, #0
    d704:	4770      	bx	lr
    d706:	bf00      	nop
    d708:	40018000 	.word	0x40018000

0000d70c <am_hal_clkgen_control>:
    d70c:	4b32      	ldr	r3, [pc, #200]	; (d7d8 <am_hal_clkgen_control+0xcc>)
    d70e:	681a      	ldr	r2, [r3, #0]
    d710:	b912      	cbnz	r2, d718 <am_hal_clkgen_control+0xc>
    d712:	4a32      	ldr	r2, [pc, #200]	; (d7dc <am_hal_clkgen_control+0xd0>)
    d714:	6812      	ldr	r2, [r2, #0]
    d716:	601a      	str	r2, [r3, #0]
    d718:	2809      	cmp	r0, #9
    d71a:	d85a      	bhi.n	d7d2 <am_hal_clkgen_control+0xc6>
    d71c:	e8df f000 	tbb	[pc, r0]
    d720:	261e160d 	.word	0x261e160d
    d724:	4640362e 	.word	0x4640362e
    d728:	054e      	.short	0x054e
    d72a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d72e:	2000      	movs	r0, #0
    d730:	6a1a      	ldr	r2, [r3, #32]
    d732:	f36f 0200 	bfc	r2, #0, #1
    d736:	621a      	str	r2, [r3, #32]
    d738:	4770      	bx	lr
    d73a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d73e:	2200      	movs	r2, #0
    d740:	2147      	movs	r1, #71	; 0x47
    d742:	6159      	str	r1, [r3, #20]
    d744:	4610      	mov	r0, r2
    d746:	619a      	str	r2, [r3, #24]
    d748:	615a      	str	r2, [r3, #20]
    d74a:	4770      	bx	lr
    d74c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d750:	2000      	movs	r0, #0
    d752:	68d3      	ldr	r3, [r2, #12]
    d754:	f023 0301 	bic.w	r3, r3, #1
    d758:	60d3      	str	r3, [r2, #12]
    d75a:	4770      	bx	lr
    d75c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d760:	2000      	movs	r0, #0
    d762:	68d3      	ldr	r3, [r2, #12]
    d764:	f023 0302 	bic.w	r3, r3, #2
    d768:	60d3      	str	r3, [r2, #12]
    d76a:	4770      	bx	lr
    d76c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d770:	2000      	movs	r0, #0
    d772:	68d3      	ldr	r3, [r2, #12]
    d774:	f043 0301 	orr.w	r3, r3, #1
    d778:	60d3      	str	r3, [r2, #12]
    d77a:	4770      	bx	lr
    d77c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d780:	2000      	movs	r0, #0
    d782:	68d3      	ldr	r3, [r2, #12]
    d784:	f043 0302 	orr.w	r3, r3, #2
    d788:	60d3      	str	r3, [r2, #12]
    d78a:	4770      	bx	lr
    d78c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d790:	2200      	movs	r2, #0
    d792:	2047      	movs	r0, #71	; 0x47
    d794:	2101      	movs	r1, #1
    d796:	6158      	str	r0, [r3, #20]
    d798:	6199      	str	r1, [r3, #24]
    d79a:	4610      	mov	r0, r2
    d79c:	615a      	str	r2, [r3, #20]
    d79e:	4770      	bx	lr
    d7a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d7a4:	2000      	movs	r0, #0
    d7a6:	68da      	ldr	r2, [r3, #12]
    d7a8:	60da      	str	r2, [r3, #12]
    d7aa:	4770      	bx	lr
    d7ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d7b0:	2000      	movs	r0, #0
    d7b2:	68d3      	ldr	r3, [r2, #12]
    d7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d7b8:	60d3      	str	r3, [r2, #12]
    d7ba:	4770      	bx	lr
    d7bc:	b139      	cbz	r1, d7ce <am_hal_clkgen_control+0xc2>
    d7be:	680b      	ldr	r3, [r1, #0]
    d7c0:	f043 0301 	orr.w	r3, r3, #1
    d7c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d7c8:	2000      	movs	r0, #0
    d7ca:	6213      	str	r3, [r2, #32]
    d7cc:	4770      	bx	lr
    d7ce:	4b04      	ldr	r3, [pc, #16]	; (d7e0 <am_hal_clkgen_control+0xd4>)
    d7d0:	e7f8      	b.n	d7c4 <am_hal_clkgen_control+0xb8>
    d7d2:	2006      	movs	r0, #6
    d7d4:	4770      	bx	lr
    d7d6:	bf00      	nop
    d7d8:	1000112c 	.word	0x1000112c
    d7dc:	4ffff000 	.word	0x4ffff000
    d7e0:	0025b801 	.word	0x0025b801

0000d7e4 <am_hal_clkgen_status_get>:
    d7e4:	b1a8      	cbz	r0, d812 <am_hal_clkgen_status_get+0x2e>
    d7e6:	b410      	push	{r4}
    d7e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d7ec:	490a      	ldr	r1, [pc, #40]	; (d818 <am_hal_clkgen_status_get+0x34>)
    d7ee:	6994      	ldr	r4, [r2, #24]
    d7f0:	4b0a      	ldr	r3, [pc, #40]	; (d81c <am_hal_clkgen_status_get+0x38>)
    d7f2:	f014 0f01 	tst.w	r4, #1
    d7f6:	bf08      	it	eq
    d7f8:	460b      	moveq	r3, r1
    d7fa:	6003      	str	r3, [r0, #0]
    d7fc:	69d3      	ldr	r3, [r2, #28]
    d7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    d802:	f003 0201 	and.w	r2, r3, #1
    d806:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d80a:	6042      	str	r2, [r0, #4]
    d80c:	7203      	strb	r3, [r0, #8]
    d80e:	2000      	movs	r0, #0
    d810:	4770      	bx	lr
    d812:	2006      	movs	r0, #6
    d814:	4770      	bx	lr
    d816:	bf00      	nop
    d818:	02dc6c00 	.word	0x02dc6c00
    d81c:	016e3600 	.word	0x016e3600

0000d820 <am_hal_flash_delay>:
    d820:	4b00      	ldr	r3, [pc, #0]	; (d824 <am_hal_flash_delay+0x4>)
    d822:	4718      	bx	r3
    d824:	0800009d 	.word	0x0800009d

0000d828 <am_hal_flash_delay_status_check>:
    d828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d82c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    d830:	460d      	mov	r5, r1
    d832:	4616      	mov	r6, r2
    d834:	461f      	mov	r7, r3
    d836:	b17c      	cbz	r4, d858 <am_hal_flash_delay_status_check+0x30>
    d838:	4604      	mov	r4, r0
    d83a:	f8df 8040 	ldr.w	r8, [pc, #64]	; d87c <am_hal_flash_delay_status_check+0x54>
    d83e:	e002      	b.n	d846 <am_hal_flash_delay_status_check+0x1e>
    d840:	b1c4      	cbz	r4, d874 <am_hal_flash_delay_status_check+0x4c>
    d842:	47c0      	blx	r8
    d844:	3c01      	subs	r4, #1
    d846:	682b      	ldr	r3, [r5, #0]
    d848:	4033      	ands	r3, r6
    d84a:	429f      	cmp	r7, r3
    d84c:	f04f 0001 	mov.w	r0, #1
    d850:	d1f6      	bne.n	d840 <am_hal_flash_delay_status_check+0x18>
    d852:	2000      	movs	r0, #0
    d854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d858:	f8df 8020 	ldr.w	r8, [pc, #32]	; d87c <am_hal_flash_delay_status_check+0x54>
    d85c:	4604      	mov	r4, r0
    d85e:	e002      	b.n	d866 <am_hal_flash_delay_status_check+0x3e>
    d860:	b144      	cbz	r4, d874 <am_hal_flash_delay_status_check+0x4c>
    d862:	47c0      	blx	r8
    d864:	3c01      	subs	r4, #1
    d866:	682b      	ldr	r3, [r5, #0]
    d868:	4033      	ands	r3, r6
    d86a:	429f      	cmp	r7, r3
    d86c:	f04f 0001 	mov.w	r0, #1
    d870:	d0f6      	beq.n	d860 <am_hal_flash_delay_status_check+0x38>
    d872:	e7ee      	b.n	d852 <am_hal_flash_delay_status_check+0x2a>
    d874:	2004      	movs	r0, #4
    d876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d87a:	bf00      	nop
    d87c:	0800009d 	.word	0x0800009d

0000d880 <am_hal_gpio_pinconfig>:
    d880:	2831      	cmp	r0, #49	; 0x31
    d882:	d901      	bls.n	d888 <am_hal_gpio_pinconfig+0x8>
    d884:	2006      	movs	r0, #6
    d886:	4770      	bx	lr
    d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d88c:	f001 0307 	and.w	r3, r1, #7
    d890:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    d894:	b085      	sub	sp, #20
    d896:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    d89a:	d014      	beq.n	d8c6 <am_hal_gpio_pinconfig+0x46>
    d89c:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d8a0:	1db4      	adds	r4, r6, #6
    d8a2:	f004 0407 	and.w	r4, r4, #7
    d8a6:	2c03      	cmp	r4, #3
    d8a8:	f042 0201 	orr.w	r2, r2, #1
    d8ac:	f200 80ae 	bhi.w	da0c <am_hal_gpio_pinconfig+0x18c>
    d8b0:	4c85      	ldr	r4, [pc, #532]	; (dac8 <am_hal_gpio_pinconfig+0x248>)
    d8b2:	5c24      	ldrb	r4, [r4, r0]
    d8b4:	07e7      	lsls	r7, r4, #31
    d8b6:	d403      	bmi.n	d8c0 <am_hal_gpio_pinconfig+0x40>
    d8b8:	4884      	ldr	r0, [pc, #528]	; (dacc <am_hal_gpio_pinconfig+0x24c>)
    d8ba:	b005      	add	sp, #20
    d8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8c0:	3e02      	subs	r6, #2
    d8c2:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d8c6:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    d8ca:	2c00      	cmp	r4, #0
    d8cc:	f040 8098 	bne.w	da00 <am_hal_gpio_pinconfig+0x180>
    d8d0:	4c7f      	ldr	r4, [pc, #508]	; (dad0 <am_hal_gpio_pinconfig+0x250>)
    d8d2:	4d80      	ldr	r5, [pc, #512]	; (dad4 <am_hal_gpio_pinconfig+0x254>)
    d8d4:	5c24      	ldrb	r4, [r4, r0]
    d8d6:	5c2d      	ldrb	r5, [r5, r0]
    d8d8:	411c      	asrs	r4, r3
    d8da:	f014 0f01 	tst.w	r4, #1
    d8de:	bf0c      	ite	eq
    d8e0:	2400      	moveq	r4, #0
    d8e2:	2402      	movne	r4, #2
    d8e4:	42ab      	cmp	r3, r5
    d8e6:	ea42 0204 	orr.w	r2, r2, r4
    d8ea:	f000 809b 	beq.w	da24 <am_hal_gpio_pinconfig+0x1a4>
    d8ee:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d8f2:	105d      	asrs	r5, r3, #1
    d8f4:	f3c1 2681 	ubfx	r6, r1, #10, #2
    d8f8:	00db      	lsls	r3, r3, #3
    d8fa:	f3c1 2707 	ubfx	r7, r1, #8, #8
    d8fe:	f003 0408 	and.w	r4, r3, #8
    d902:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    d906:	f007 060c 	and.w	r6, r7, #12
    d90a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    d90e:	2e04      	cmp	r6, #4
    d910:	ea43 0304 	orr.w	r3, r3, r4
    d914:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d918:	462c      	mov	r4, r5
    d91a:	f000 8090 	beq.w	da3e <am_hal_gpio_pinconfig+0x1be>
    d91e:	4c6e      	ldr	r4, [pc, #440]	; (dad8 <am_hal_gpio_pinconfig+0x258>)
    d920:	6824      	ldr	r4, [r4, #0]
    d922:	ebc4 0901 	rsb	r9, r4, r1
    d926:	fab9 f989 	clz	r9, r9
    d92a:	ea4f 1959 	mov.w	r9, r9, lsr #5
    d92e:	f017 0f60 	tst.w	r7, #96	; 0x60
    d932:	bf04      	itt	eq
    d934:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    d938:	f364 0300 	bfieq	r3, r4, #0, #1
    d93c:	0084      	lsls	r4, r0, #2
    d93e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d942:	2902      	cmp	r1, #2
    d944:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d948:	d07c      	beq.n	da44 <am_hal_gpio_pinconfig+0x1c4>
    d94a:	f200 8082 	bhi.w	da52 <am_hal_gpio_pinconfig+0x1d2>
    d94e:	2901      	cmp	r1, #1
    d950:	bf08      	it	eq
    d952:	f042 0204 	orreq.w	r2, r2, #4
    d956:	f005 0518 	and.w	r5, r5, #24
    d95a:	f04f 0800 	mov.w	r8, #0
    d95e:	f004 041c 	and.w	r4, r4, #28
    d962:	0841      	lsrs	r1, r0, #1
    d964:	f020 0a03 	bic.w	sl, r0, #3
    d968:	270f      	movs	r7, #15
    d96a:	f021 0103 	bic.w	r1, r1, #3
    d96e:	40a7      	lsls	r7, r4
    d970:	26ff      	movs	r6, #255	; 0xff
    d972:	fa03 f404 	lsl.w	r4, r3, r4
    d976:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    d97a:	40ae      	lsls	r6, r5
    d97c:	9101      	str	r1, [sp, #4]
    d97e:	9300      	str	r3, [sp, #0]
    d980:	4683      	mov	fp, r0
    d982:	fa02 f505 	lsl.w	r5, r2, r5
    d986:	f000 f9ad 	bl	dce4 <am_hal_interrupt_master_disable>
    d98a:	9b00      	ldr	r3, [sp, #0]
    d98c:	9003      	str	r0, [sp, #12]
    d98e:	43ff      	mvns	r7, r7
    d990:	43f6      	mvns	r6, r6
    d992:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d996:	f8df e160 	ldr.w	lr, [pc, #352]	; daf8 <am_hal_gpio_pinconfig+0x278>
    d99a:	4850      	ldr	r0, [pc, #320]	; (dadc <am_hal_gpio_pinconfig+0x25c>)
    d99c:	9901      	ldr	r1, [sp, #4]
    d99e:	f1b9 0f00 	cmp.w	r9, #0
    d9a2:	d00b      	beq.n	d9bc <am_hal_gpio_pinconfig+0x13c>
    d9a4:	f00b 021f 	and.w	r2, fp, #31
    d9a8:	f04f 0901 	mov.w	r9, #1
    d9ac:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    d9b0:	f8df c148 	ldr.w	ip, [pc, #328]	; dafc <am_hal_gpio_pinconfig+0x27c>
    d9b4:	fa09 f202 	lsl.w	r2, r9, r2
    d9b8:	f84c 202b 	str.w	r2, [ip, fp, lsl #2]
    d9bc:	4a48      	ldr	r2, [pc, #288]	; (dae0 <am_hal_gpio_pinconfig+0x260>)
    d9be:	f04f 0c73 	mov.w	ip, #115	; 0x73
    d9c2:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    d9c6:	f8d3 c000 	ldr.w	ip, [r3]
    d9ca:	ea06 0c0c 	and.w	ip, r6, ip
    d9ce:	ea4c 0505 	orr.w	r5, ip, r5
    d9d2:	601d      	str	r5, [r3, #0]
    d9d4:	f851 300e 	ldr.w	r3, [r1, lr]
    d9d8:	403b      	ands	r3, r7
    d9da:	4323      	orrs	r3, r4
    d9dc:	f841 300e 	str.w	r3, [r1, lr]
    d9e0:	f85a 3000 	ldr.w	r3, [sl, r0]
    d9e4:	401e      	ands	r6, r3
    d9e6:	2400      	movs	r4, #0
    d9e8:	ea46 0608 	orr.w	r6, r6, r8
    d9ec:	f84a 6000 	str.w	r6, [sl, r0]
    d9f0:	6614      	str	r4, [r2, #96]	; 0x60
    d9f2:	9803      	ldr	r0, [sp, #12]
    d9f4:	f000 f97a 	bl	dcec <am_hal_interrupt_master_set>
    d9f8:	4620      	mov	r0, r4
    d9fa:	b005      	add	sp, #20
    d9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da00:	2c01      	cmp	r4, #1
    da02:	d015      	beq.n	da30 <am_hal_gpio_pinconfig+0x1b0>
    da04:	2c02      	cmp	r4, #2
    da06:	d032      	beq.n	da6e <am_hal_gpio_pinconfig+0x1ee>
    da08:	4836      	ldr	r0, [pc, #216]	; (dae4 <am_hal_gpio_pinconfig+0x264>)
    da0a:	e756      	b.n	d8ba <am_hal_gpio_pinconfig+0x3a>
    da0c:	2dc0      	cmp	r5, #192	; 0xc0
    da0e:	d029      	beq.n	da64 <am_hal_gpio_pinconfig+0x1e4>
    da10:	2d20      	cmp	r5, #32
    da12:	f47f af58 	bne.w	d8c6 <am_hal_gpio_pinconfig+0x46>
    da16:	4c2c      	ldr	r4, [pc, #176]	; (dac8 <am_hal_gpio_pinconfig+0x248>)
    da18:	5c24      	ldrb	r4, [r4, r0]
    da1a:	f014 0f09 	tst.w	r4, #9
    da1e:	f47f af4b 	bne.w	d8b8 <am_hal_gpio_pinconfig+0x38>
    da22:	e750      	b.n	d8c6 <am_hal_gpio_pinconfig+0x46>
    da24:	f3c1 4402 	ubfx	r4, r1, #16, #3
    da28:	2c07      	cmp	r4, #7
    da2a:	d127      	bne.n	da7c <am_hal_gpio_pinconfig+0x1fc>
    da2c:	482e      	ldr	r0, [pc, #184]	; (dae8 <am_hal_gpio_pinconfig+0x268>)
    da2e:	e744      	b.n	d8ba <am_hal_gpio_pinconfig+0x3a>
    da30:	4c25      	ldr	r4, [pc, #148]	; (dac8 <am_hal_gpio_pinconfig+0x248>)
    da32:	5c24      	ldrb	r4, [r4, r0]
    da34:	07a5      	lsls	r5, r4, #30
    da36:	d5e7      	bpl.n	da08 <am_hal_gpio_pinconfig+0x188>
    da38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    da3c:	e748      	b.n	d8d0 <am_hal_gpio_pinconfig+0x50>
    da3e:	f04f 0901 	mov.w	r9, #1
    da42:	e774      	b.n	d92e <am_hal_gpio_pinconfig+0xae>
    da44:	f005 0518 	and.w	r5, r5, #24
    da48:	f04f 0801 	mov.w	r8, #1
    da4c:	fa08 f805 	lsl.w	r8, r8, r5
    da50:	e785      	b.n	d95e <am_hal_gpio_pinconfig+0xde>
    da52:	f005 0518 	and.w	r5, r5, #24
    da56:	f04f 0801 	mov.w	r8, #1
    da5a:	f042 0204 	orr.w	r2, r2, #4
    da5e:	fa08 f805 	lsl.w	r8, r8, r5
    da62:	e77c      	b.n	d95e <am_hal_gpio_pinconfig+0xde>
    da64:	2814      	cmp	r0, #20
    da66:	f43f af2e 	beq.w	d8c6 <am_hal_gpio_pinconfig+0x46>
    da6a:	4820      	ldr	r0, [pc, #128]	; (daec <am_hal_gpio_pinconfig+0x26c>)
    da6c:	e725      	b.n	d8ba <am_hal_gpio_pinconfig+0x3a>
    da6e:	4c16      	ldr	r4, [pc, #88]	; (dac8 <am_hal_gpio_pinconfig+0x248>)
    da70:	5c24      	ldrb	r4, [r4, r0]
    da72:	0764      	lsls	r4, r4, #29
    da74:	d5c8      	bpl.n	da08 <am_hal_gpio_pinconfig+0x188>
    da76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    da7a:	e729      	b.n	d8d0 <am_hal_gpio_pinconfig+0x50>
    da7c:	4d1c      	ldr	r5, [pc, #112]	; (daf0 <am_hal_gpio_pinconfig+0x270>)
    da7e:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    da82:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    da86:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    da8a:	429e      	cmp	r6, r3
    da8c:	d00c      	beq.n	daa8 <am_hal_gpio_pinconfig+0x228>
    da8e:	0084      	lsls	r4, r0, #2
    da90:	4425      	add	r5, r4
    da92:	786e      	ldrb	r6, [r5, #1]
    da94:	429e      	cmp	r6, r3
    da96:	d013      	beq.n	dac0 <am_hal_gpio_pinconfig+0x240>
    da98:	78ae      	ldrb	r6, [r5, #2]
    da9a:	429e      	cmp	r6, r3
    da9c:	d00e      	beq.n	dabc <am_hal_gpio_pinconfig+0x23c>
    da9e:	78ed      	ldrb	r5, [r5, #3]
    daa0:	429d      	cmp	r5, r3
    daa2:	d00f      	beq.n	dac4 <am_hal_gpio_pinconfig+0x244>
    daa4:	4813      	ldr	r0, [pc, #76]	; (daf4 <am_hal_gpio_pinconfig+0x274>)
    daa6:	e708      	b.n	d8ba <am_hal_gpio_pinconfig+0x3a>
    daa8:	2300      	movs	r3, #0
    daaa:	0084      	lsls	r4, r0, #2
    daac:	005b      	lsls	r3, r3, #1
    daae:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dab2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    dab6:	f04f 0900 	mov.w	r9, #0
    daba:	e740      	b.n	d93e <am_hal_gpio_pinconfig+0xbe>
    dabc:	2302      	movs	r3, #2
    dabe:	e7f5      	b.n	daac <am_hal_gpio_pinconfig+0x22c>
    dac0:	2301      	movs	r3, #1
    dac2:	e7f3      	b.n	daac <am_hal_gpio_pinconfig+0x22c>
    dac4:	2303      	movs	r3, #3
    dac6:	e7f1      	b.n	daac <am_hal_gpio_pinconfig+0x22c>
    dac8:	0000f26c 	.word	0x0000f26c
    dacc:	08000100 	.word	0x08000100
    dad0:	0000f368 	.word	0x0000f368
    dad4:	0000f3a4 	.word	0x0000f3a4
    dad8:	0000f39c 	.word	0x0000f39c
    dadc:	400100e0 	.word	0x400100e0
    dae0:	40010000 	.word	0x40010000
    dae4:	08000102 	.word	0x08000102
    dae8:	08000103 	.word	0x08000103
    daec:	08000101 	.word	0x08000101
    daf0:	0000f2a0 	.word	0x0000f2a0
    daf4:	08000104 	.word	0x08000104
    daf8:	40010040 	.word	0x40010040
    dafc:	400100b4 	.word	0x400100b4

0000db00 <am_hal_gpio_state_read>:
    db00:	b1ca      	cbz	r2, db36 <am_hal_gpio_state_read+0x36>
    db02:	2831      	cmp	r0, #49	; 0x31
    db04:	d904      	bls.n	db10 <am_hal_gpio_state_read+0x10>
    db06:	f04f 33ff 	mov.w	r3, #4294967295
    db0a:	6013      	str	r3, [r2, #0]
    db0c:	2005      	movs	r0, #5
    db0e:	4770      	bx	lr
    db10:	2901      	cmp	r1, #1
    db12:	ea4f 1350 	mov.w	r3, r0, lsr #5
    db16:	f000 001f 	and.w	r0, r0, #31
    db1a:	d00e      	beq.n	db3a <am_hal_gpio_state_read+0x3a>
    db1c:	d315      	bcc.n	db4a <am_hal_gpio_state_read+0x4a>
    db1e:	2902      	cmp	r1, #2
    db20:	d109      	bne.n	db36 <am_hal_gpio_state_read+0x36>
    db22:	490e      	ldr	r1, [pc, #56]	; (db5c <am_hal_gpio_state_read+0x5c>)
    db24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    db28:	fa23 f000 	lsr.w	r0, r3, r0
    db2c:	f000 0001 	and.w	r0, r0, #1
    db30:	6010      	str	r0, [r2, #0]
    db32:	2000      	movs	r0, #0
    db34:	4770      	bx	lr
    db36:	2006      	movs	r0, #6
    db38:	4770      	bx	lr
    db3a:	4909      	ldr	r1, [pc, #36]	; (db60 <am_hal_gpio_state_read+0x60>)
    db3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    db40:	fa23 f000 	lsr.w	r0, r3, r0
    db44:	f000 0001 	and.w	r0, r0, #1
    db48:	e7f2      	b.n	db30 <am_hal_gpio_state_read+0x30>
    db4a:	4906      	ldr	r1, [pc, #24]	; (db64 <am_hal_gpio_state_read+0x64>)
    db4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    db50:	fa23 f000 	lsr.w	r0, r3, r0
    db54:	f000 0001 	and.w	r0, r0, #1
    db58:	e7ea      	b.n	db30 <am_hal_gpio_state_read+0x30>
    db5a:	bf00      	nop
    db5c:	400100a0 	.word	0x400100a0
    db60:	40010088 	.word	0x40010088
    db64:	40010080 	.word	0x40010080

0000db68 <am_hal_gpio_state_write>:
    db68:	2831      	cmp	r0, #49	; 0x31
    db6a:	d901      	bls.n	db70 <am_hal_gpio_state_write+0x8>
    db6c:	2005      	movs	r0, #5
    db6e:	4770      	bx	lr
    db70:	2905      	cmp	r1, #5
    db72:	d901      	bls.n	db78 <am_hal_gpio_state_write+0x10>
    db74:	2006      	movs	r0, #6
    db76:	4770      	bx	lr
    db78:	b570      	push	{r4, r5, r6, lr}
    db7a:	f000 031f 	and.w	r3, r0, #31
    db7e:	b082      	sub	sp, #8
    db80:	2201      	movs	r2, #1
    db82:	460d      	mov	r5, r1
    db84:	4604      	mov	r4, r0
    db86:	fa02 f603 	lsl.w	r6, r2, r3
    db8a:	f000 f8ab 	bl	dce4 <am_hal_interrupt_master_disable>
    db8e:	1e69      	subs	r1, r5, #1
    db90:	9001      	str	r0, [sp, #4]
    db92:	0960      	lsrs	r0, r4, #5
    db94:	2904      	cmp	r1, #4
    db96:	d81c      	bhi.n	dbd2 <am_hal_gpio_state_write+0x6a>
    db98:	e8df f001 	tbb	[pc, r1]
    db9c:	030c1017 	.word	0x030c1017
    dba0:	1f          	.byte	0x1f
    dba1:	00          	.byte	0x00
    dba2:	4b11      	ldr	r3, [pc, #68]	; (dbe8 <am_hal_gpio_state_write+0x80>)
    dba4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dba8:	9801      	ldr	r0, [sp, #4]
    dbaa:	f000 f89f 	bl	dcec <am_hal_interrupt_master_set>
    dbae:	2000      	movs	r0, #0
    dbb0:	b002      	add	sp, #8
    dbb2:	bd70      	pop	{r4, r5, r6, pc}
    dbb4:	4b0d      	ldr	r3, [pc, #52]	; (dbec <am_hal_gpio_state_write+0x84>)
    dbb6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dbba:	e7f5      	b.n	dba8 <am_hal_gpio_state_write+0x40>
    dbbc:	4a0c      	ldr	r2, [pc, #48]	; (dbf0 <am_hal_gpio_state_write+0x88>)
    dbbe:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dbc2:	4073      	eors	r3, r6
    dbc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dbc8:	e7ee      	b.n	dba8 <am_hal_gpio_state_write+0x40>
    dbca:	4b0a      	ldr	r3, [pc, #40]	; (dbf4 <am_hal_gpio_state_write+0x8c>)
    dbcc:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dbd0:	e7ea      	b.n	dba8 <am_hal_gpio_state_write+0x40>
    dbd2:	4b09      	ldr	r3, [pc, #36]	; (dbf8 <am_hal_gpio_state_write+0x90>)
    dbd4:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    dbd8:	e7e6      	b.n	dba8 <am_hal_gpio_state_write+0x40>
    dbda:	4a04      	ldr	r2, [pc, #16]	; (dbec <am_hal_gpio_state_write+0x84>)
    dbdc:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    dbe0:	4073      	eors	r3, r6
    dbe2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    dbe6:	e7df      	b.n	dba8 <am_hal_gpio_state_write+0x40>
    dbe8:	400100a8 	.word	0x400100a8
    dbec:	400100b4 	.word	0x400100b4
    dbf0:	40010088 	.word	0x40010088
    dbf4:	40010090 	.word	0x40010090
    dbf8:	40010098 	.word	0x40010098

0000dbfc <am_hal_gpio_interrupt_enable>:
    dbfc:	4b0f      	ldr	r3, [pc, #60]	; (dc3c <am_hal_gpio_interrupt_enable+0x40>)
    dbfe:	2200      	movs	r2, #0
    dc00:	4002      	ands	r2, r0
    dc02:	400b      	ands	r3, r1
    dc04:	4313      	orrs	r3, r2
    dc06:	d001      	beq.n	dc0c <am_hal_gpio_interrupt_enable+0x10>
    dc08:	2005      	movs	r0, #5
    dc0a:	4770      	bx	lr
    dc0c:	b530      	push	{r4, r5, lr}
    dc0e:	b083      	sub	sp, #12
    dc10:	460d      	mov	r5, r1
    dc12:	4604      	mov	r4, r0
    dc14:	f000 f866 	bl	dce4 <am_hal_interrupt_master_disable>
    dc18:	4b09      	ldr	r3, [pc, #36]	; (dc40 <am_hal_gpio_interrupt_enable+0x44>)
    dc1a:	9001      	str	r0, [sp, #4]
    dc1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dc20:	4322      	orrs	r2, r4
    dc22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    dc26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
    dc2a:	432a      	orrs	r2, r5
    dc2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    dc30:	9801      	ldr	r0, [sp, #4]
    dc32:	f000 f85b 	bl	dcec <am_hal_interrupt_master_set>
    dc36:	2000      	movs	r0, #0
    dc38:	b003      	add	sp, #12
    dc3a:	bd30      	pop	{r4, r5, pc}
    dc3c:	fffc0000 	.word	0xfffc0000
    dc40:	40010000 	.word	0x40010000

0000dc44 <am_hal_gpio_interrupt_clear>:
    dc44:	4b0c      	ldr	r3, [pc, #48]	; (dc78 <am_hal_gpio_interrupt_clear+0x34>)
    dc46:	2200      	movs	r2, #0
    dc48:	4002      	ands	r2, r0
    dc4a:	400b      	ands	r3, r1
    dc4c:	4313      	orrs	r3, r2
    dc4e:	d001      	beq.n	dc54 <am_hal_gpio_interrupt_clear+0x10>
    dc50:	2005      	movs	r0, #5
    dc52:	4770      	bx	lr
    dc54:	b530      	push	{r4, r5, lr}
    dc56:	b083      	sub	sp, #12
    dc58:	460d      	mov	r5, r1
    dc5a:	4604      	mov	r4, r0
    dc5c:	f000 f842 	bl	dce4 <am_hal_interrupt_master_disable>
    dc60:	4b06      	ldr	r3, [pc, #24]	; (dc7c <am_hal_gpio_interrupt_clear+0x38>)
    dc62:	9001      	str	r0, [sp, #4]
    dc64:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    dc68:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    dc6c:	9801      	ldr	r0, [sp, #4]
    dc6e:	f000 f83d 	bl	dcec <am_hal_interrupt_master_set>
    dc72:	2000      	movs	r0, #0
    dc74:	b003      	add	sp, #12
    dc76:	bd30      	pop	{r4, r5, pc}
    dc78:	fffc0000 	.word	0xfffc0000
    dc7c:	40010000 	.word	0x40010000

0000dc80 <am_hal_gpio_interrupt_status_get>:
    dc80:	b339      	cbz	r1, dcd2 <am_hal_gpio_interrupt_status_get+0x52>
    dc82:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc84:	b083      	sub	sp, #12
    dc86:	460c      	mov	r4, r1
    dc88:	4605      	mov	r5, r0
    dc8a:	f000 f82b 	bl	dce4 <am_hal_interrupt_master_disable>
    dc8e:	4b12      	ldr	r3, [pc, #72]	; (dcd8 <am_hal_gpio_interrupt_status_get+0x58>)
    dc90:	9001      	str	r0, [sp, #4]
    dc92:	f8d3 6214 	ldr.w	r6, [r3, #532]	; 0x214
    dc96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    dc9a:	4631      	mov	r1, r6
    dc9c:	2000      	movs	r0, #0
    dc9e:	ea40 0602 	orr.w	r6, r0, r2
    dca2:	460f      	mov	r7, r1
    dca4:	b96d      	cbnz	r5, dcc2 <am_hal_gpio_interrupt_status_get+0x42>
    dca6:	f04f 32ff 	mov.w	r2, #4294967295
    dcaa:	f04f 33ff 	mov.w	r3, #4294967295
    dcae:	4032      	ands	r2, r6
    dcb0:	403b      	ands	r3, r7
    dcb2:	9801      	ldr	r0, [sp, #4]
    dcb4:	e9c4 2300 	strd	r2, r3, [r4]
    dcb8:	f000 f818 	bl	dcec <am_hal_interrupt_master_set>
    dcbc:	2000      	movs	r0, #0
    dcbe:	b003      	add	sp, #12
    dcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcc2:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
    dcc6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    dcca:	4602      	mov	r2, r0
    dccc:	462b      	mov	r3, r5
    dcce:	430a      	orrs	r2, r1
    dcd0:	e7ed      	b.n	dcae <am_hal_gpio_interrupt_status_get+0x2e>
    dcd2:	2006      	movs	r0, #6
    dcd4:	4770      	bx	lr
    dcd6:	bf00      	nop
    dcd8:	40010000 	.word	0x40010000

0000dcdc <am_hal_interrupt_master_enable>:
    dcdc:	f3ef 8010 	mrs	r0, PRIMASK
    dce0:	b662      	cpsie	i
    dce2:	4770      	bx	lr

0000dce4 <am_hal_interrupt_master_disable>:
    dce4:	f3ef 8010 	mrs	r0, PRIMASK
    dce8:	b672      	cpsid	i
    dcea:	4770      	bx	lr

0000dcec <am_hal_interrupt_master_set>:
    dcec:	f380 8810 	msr	PRIMASK, r0
    dcf0:	4770      	bx	lr
    dcf2:	bf00      	nop

0000dcf4 <am_hal_iom_initialize>:
    dcf4:	2805      	cmp	r0, #5
    dcf6:	d901      	bls.n	dcfc <am_hal_iom_initialize+0x8>
    dcf8:	2005      	movs	r0, #5
    dcfa:	4770      	bx	lr
    dcfc:	b1e1      	cbz	r1, dd38 <am_hal_iom_initialize+0x44>
    dcfe:	b4f0      	push	{r4, r5, r6, r7}
    dd00:	f640 049c 	movw	r4, #2204	; 0x89c
    dd04:	4e0d      	ldr	r6, [pc, #52]	; (dd3c <am_hal_iom_initialize+0x48>)
    dd06:	fb04 f400 	mul.w	r4, r4, r0
    dd0a:	1935      	adds	r5, r6, r4
    dd0c:	4602      	mov	r2, r0
    dd0e:	78e8      	ldrb	r0, [r5, #3]
    dd10:	f010 0301 	ands.w	r3, r0, #1
    dd14:	d002      	beq.n	dd1c <am_hal_iom_initialize+0x28>
    dd16:	2007      	movs	r0, #7
    dd18:	bcf0      	pop	{r4, r5, r6, r7}
    dd1a:	4770      	bx	lr
    dd1c:	f040 0001 	orr.w	r0, r0, #1
    dd20:	f363 0041 	bfi	r0, r3, #1, #1
    dd24:	70e8      	strb	r0, [r5, #3]
    dd26:	5937      	ldr	r7, [r6, r4]
    dd28:	4805      	ldr	r0, [pc, #20]	; (dd40 <am_hal_iom_initialize+0x4c>)
    dd2a:	f360 0717 	bfi	r7, r0, #0, #24
    dd2e:	5137      	str	r7, [r6, r4]
    dd30:	4618      	mov	r0, r3
    dd32:	606a      	str	r2, [r5, #4]
    dd34:	600d      	str	r5, [r1, #0]
    dd36:	e7ef      	b.n	dd18 <am_hal_iom_initialize+0x24>
    dd38:	2006      	movs	r0, #6
    dd3a:	4770      	bx	lr
    dd3c:	1000229c 	.word	0x1000229c
    dd40:	00123456 	.word	0x00123456

0000dd44 <am_hal_iom_enable>:
    dd44:	b128      	cbz	r0, dd52 <am_hal_iom_enable+0xe>
    dd46:	6803      	ldr	r3, [r0, #0]
    dd48:	4a34      	ldr	r2, [pc, #208]	; (de1c <am_hal_iom_enable+0xd8>)
    dd4a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd4e:	4293      	cmp	r3, r2
    dd50:	d001      	beq.n	dd56 <am_hal_iom_enable+0x12>
    dd52:	2002      	movs	r0, #2
    dd54:	4770      	bx	lr
    dd56:	78c3      	ldrb	r3, [r0, #3]
    dd58:	079b      	lsls	r3, r3, #30
    dd5a:	d45d      	bmi.n	de18 <am_hal_iom_enable+0xd4>
    dd5c:	6843      	ldr	r3, [r0, #4]
    dd5e:	7a01      	ldrb	r1, [r0, #8]
    dd60:	b570      	push	{r4, r5, r6, lr}
    dd62:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dd66:	3304      	adds	r3, #4
    dd68:	031b      	lsls	r3, r3, #12
    dd6a:	3100      	adds	r1, #0
    dd6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    dd70:	bf18      	it	ne
    dd72:	2101      	movne	r1, #1
    dd74:	f3c2 0242 	ubfx	r2, r2, #1, #3
    dd78:	4291      	cmp	r1, r2
    dd7a:	bf0c      	ite	eq
    dd7c:	2201      	moveq	r2, #1
    dd7e:	2210      	movne	r2, #16
    dd80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    dd84:	68c3      	ldr	r3, [r0, #12]
    dd86:	b084      	sub	sp, #16
    dd88:	4604      	mov	r4, r0
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	d039      	beq.n	de02 <am_hal_iom_enable+0xbe>
    dd8e:	6843      	ldr	r3, [r0, #4]
    dd90:	4923      	ldr	r1, [pc, #140]	; (de20 <am_hal_iom_enable+0xdc>)
    dd92:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dd96:	3304      	adds	r3, #4
    dd98:	031a      	lsls	r2, r3, #12
    dd9a:	2300      	movs	r3, #0
    dd9c:	6243      	str	r3, [r0, #36]	; 0x24
    dd9e:	61c3      	str	r3, [r0, #28]
    dda0:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    dda4:	6902      	ldr	r2, [r0, #16]
    dda6:	6840      	ldr	r0, [r0, #4]
    dda8:	68e6      	ldr	r6, [r4, #12]
    ddaa:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    ddae:	2501      	movs	r5, #1
    ddb0:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    ddb4:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    ddb8:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    ddbc:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    ddc0:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    ddc4:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    ddc8:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    ddcc:	6223      	str	r3, [r4, #32]
    ddce:	b2c0      	uxtb	r0, r0
    ddd0:	fa22 f305 	lsr.w	r3, r2, r5
    ddd4:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    ddd8:	f604 0228 	addw	r2, r4, #2088	; 0x828
    dddc:	a901      	add	r1, sp, #4
    ddde:	9301      	str	r3, [sp, #4]
    dde0:	9602      	str	r6, [sp, #8]
    dde2:	f88d 500c 	strb.w	r5, [sp, #12]
    dde6:	f001 f857 	bl	ee98 <am_hal_cmdq_init>
    ddea:	6863      	ldr	r3, [r4, #4]
    ddec:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ddf0:	3304      	adds	r3, #4
    ddf2:	031b      	lsls	r3, r3, #12
    ddf4:	b960      	cbnz	r0, de10 <am_hal_iom_enable+0xcc>
    ddf6:	f44f 7180 	mov.w	r1, #256	; 0x100
    ddfa:	2202      	movs	r2, #2
    ddfc:	6221      	str	r1, [r4, #32]
    ddfe:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    de02:	78e3      	ldrb	r3, [r4, #3]
    de04:	f043 0302 	orr.w	r3, r3, #2
    de08:	70e3      	strb	r3, [r4, #3]
    de0a:	2000      	movs	r0, #0
    de0c:	b004      	add	sp, #16
    de0e:	bd70      	pop	{r4, r5, r6, pc}
    de10:	2202      	movs	r2, #2
    de12:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    de16:	e7f9      	b.n	de0c <am_hal_iom_enable+0xc8>
    de18:	2000      	movs	r0, #0
    de1a:	4770      	bx	lr
    de1c:	01123456 	.word	0x01123456
    de20:	00800040 	.word	0x00800040

0000de24 <am_hal_iom_power_ctrl>:
    de24:	b140      	cbz	r0, de38 <am_hal_iom_power_ctrl+0x14>
    de26:	b538      	push	{r3, r4, r5, lr}
    de28:	6803      	ldr	r3, [r0, #0]
    de2a:	4c85      	ldr	r4, [pc, #532]	; (e040 <am_hal_iom_power_ctrl+0x21c>)
    de2c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de30:	42a3      	cmp	r3, r4
    de32:	d003      	beq.n	de3c <am_hal_iom_power_ctrl+0x18>
    de34:	2002      	movs	r0, #2
    de36:	bd38      	pop	{r3, r4, r5, pc}
    de38:	2002      	movs	r0, #2
    de3a:	4770      	bx	lr
    de3c:	4604      	mov	r4, r0
    de3e:	4615      	mov	r5, r2
    de40:	b199      	cbz	r1, de6a <am_hal_iom_power_ctrl+0x46>
    de42:	2902      	cmp	r1, #2
    de44:	d80f      	bhi.n	de66 <am_hal_iom_power_ctrl+0x42>
    de46:	78c3      	ldrb	r3, [r0, #3]
    de48:	6840      	ldr	r0, [r0, #4]
    de4a:	079a      	lsls	r2, r3, #30
    de4c:	d519      	bpl.n	de82 <am_hal_iom_power_ctrl+0x5e>
    de4e:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    de52:	3304      	adds	r3, #4
    de54:	031b      	lsls	r3, r3, #12
    de56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    de5a:	f003 0306 	and.w	r3, r3, #6
    de5e:	2b04      	cmp	r3, #4
    de60:	d00c      	beq.n	de7c <am_hal_iom_power_ctrl+0x58>
    de62:	2003      	movs	r0, #3
    de64:	bd38      	pop	{r3, r4, r5, pc}
    de66:	2006      	movs	r0, #6
    de68:	bd38      	pop	{r3, r4, r5, pc}
    de6a:	2a00      	cmp	r2, #0
    de6c:	f000 80cf 	beq.w	e00e <am_hal_iom_power_ctrl+0x1ea>
    de70:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    de74:	2b00      	cmp	r3, #0
    de76:	d146      	bne.n	df06 <am_hal_iom_power_ctrl+0xe2>
    de78:	2007      	movs	r0, #7
    de7a:	bd38      	pop	{r3, r4, r5, pc}
    de7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    de7e:	2b00      	cmp	r3, #0
    de80:	d1ef      	bne.n	de62 <am_hal_iom_power_ctrl+0x3e>
    de82:	b3d5      	cbz	r5, defa <am_hal_iom_power_ctrl+0xd6>
    de84:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    de88:	3304      	adds	r3, #4
    de8a:	031b      	lsls	r3, r3, #12
    de8c:	2201      	movs	r2, #1
    de8e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    de92:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    de96:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    de9a:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    de9e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    dea2:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    dea6:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    deaa:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    deae:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    deb2:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    deb6:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    deba:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    debe:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    dec2:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    dec6:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    deca:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    dece:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    ded2:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    ded6:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    deda:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    dede:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    dee2:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    dee6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    deea:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    deee:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    def2:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    def6:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    defa:	3002      	adds	r0, #2
    defc:	b2c0      	uxtb	r0, r0
    defe:	f000 faed 	bl	e4dc <am_hal_pwrctrl_periph_disable>
    df02:	2000      	movs	r0, #0
    df04:	bd38      	pop	{r3, r4, r5, pc}
    df06:	6843      	ldr	r3, [r0, #4]
    df08:	1c98      	adds	r0, r3, #2
    df0a:	b2c0      	uxtb	r0, r0
    df0c:	f000 fabc 	bl	e488 <am_hal_pwrctrl_periph_enable>
    df10:	6863      	ldr	r3, [r4, #4]
    df12:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    df16:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df1a:	3304      	adds	r3, #4
    df1c:	031b      	lsls	r3, r3, #12
    df1e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    df22:	6863      	ldr	r3, [r4, #4]
    df24:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    df28:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df2c:	3304      	adds	r3, #4
    df2e:	031b      	lsls	r3, r3, #12
    df30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    df34:	6863      	ldr	r3, [r4, #4]
    df36:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    df3a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df3e:	3304      	adds	r3, #4
    df40:	031b      	lsls	r3, r3, #12
    df42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    df46:	6863      	ldr	r3, [r4, #4]
    df48:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    df4c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df50:	3304      	adds	r3, #4
    df52:	031b      	lsls	r3, r3, #12
    df54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    df58:	6863      	ldr	r3, [r4, #4]
    df5a:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    df5e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df62:	3304      	adds	r3, #4
    df64:	031b      	lsls	r3, r3, #12
    df66:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    df6a:	6863      	ldr	r3, [r4, #4]
    df6c:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    df70:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df74:	3304      	adds	r3, #4
    df76:	031b      	lsls	r3, r3, #12
    df78:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    df7c:	6863      	ldr	r3, [r4, #4]
    df7e:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    df82:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df86:	3304      	adds	r3, #4
    df88:	031b      	lsls	r3, r3, #12
    df8a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    df8e:	6863      	ldr	r3, [r4, #4]
    df90:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    df94:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    df98:	3304      	adds	r3, #4
    df9a:	031b      	lsls	r3, r3, #12
    df9c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    dfa0:	6863      	ldr	r3, [r4, #4]
    dfa2:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    dfa6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfaa:	3304      	adds	r3, #4
    dfac:	031b      	lsls	r3, r3, #12
    dfae:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    dfb2:	6863      	ldr	r3, [r4, #4]
    dfb4:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    dfb8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfbc:	3304      	adds	r3, #4
    dfbe:	031b      	lsls	r3, r3, #12
    dfc0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    dfc4:	6863      	ldr	r3, [r4, #4]
    dfc6:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    dfca:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfce:	3304      	adds	r3, #4
    dfd0:	031b      	lsls	r3, r3, #12
    dfd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    dfd6:	6863      	ldr	r3, [r4, #4]
    dfd8:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    dfdc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dfe0:	3304      	adds	r3, #4
    dfe2:	031b      	lsls	r3, r3, #12
    dfe4:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    dfe8:	6863      	ldr	r3, [r4, #4]
    dfea:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    dfee:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dff2:	3304      	adds	r3, #4
    dff4:	031b      	lsls	r3, r3, #12
    dff6:	f022 0201 	bic.w	r2, r2, #1
    dffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    dffe:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    e002:	07db      	lsls	r3, r3, #31
    e004:	d40a      	bmi.n	e01c <am_hal_iom_power_ctrl+0x1f8>
    e006:	2000      	movs	r0, #0
    e008:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    e00c:	bd38      	pop	{r3, r4, r5, pc}
    e00e:	6840      	ldr	r0, [r0, #4]
    e010:	3002      	adds	r0, #2
    e012:	b2c0      	uxtb	r0, r0
    e014:	f000 fa38 	bl	e488 <am_hal_pwrctrl_periph_enable>
    e018:	4628      	mov	r0, r5
    e01a:	bd38      	pop	{r3, r4, r5, pc}
    e01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e01e:	b953      	cbnz	r3, e036 <am_hal_iom_power_ctrl+0x212>
    e020:	6863      	ldr	r3, [r4, #4]
    e022:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e026:	3304      	adds	r3, #4
    e028:	031b      	lsls	r3, r3, #12
    e02a:	f503 7226 	add.w	r2, r3, #664	; 0x298
    e02e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    e032:	e883 000c 	stmia.w	r3, {r2, r3}
    e036:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    e03a:	f000 ff91 	bl	ef60 <am_hal_cmdq_enable>
    e03e:	e7e2      	b.n	e006 <am_hal_iom_power_ctrl+0x1e2>
    e040:	01123456 	.word	0x01123456

0000e044 <am_hal_iom_configure>:
    e044:	b128      	cbz	r0, e052 <am_hal_iom_configure+0xe>
    e046:	6803      	ldr	r3, [r0, #0]
    e048:	4a8b      	ldr	r2, [pc, #556]	; (e278 <am_hal_iom_configure+0x234>)
    e04a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e04e:	4293      	cmp	r3, r2
    e050:	d001      	beq.n	e056 <am_hal_iom_configure+0x12>
    e052:	2002      	movs	r0, #2
    e054:	4770      	bx	lr
    e056:	b111      	cbz	r1, e05e <am_hal_iom_configure+0x1a>
    e058:	6843      	ldr	r3, [r0, #4]
    e05a:	2b05      	cmp	r3, #5
    e05c:	d901      	bls.n	e062 <am_hal_iom_configure+0x1e>
    e05e:	2006      	movs	r0, #6
    e060:	4770      	bx	lr
    e062:	78c2      	ldrb	r2, [r0, #3]
    e064:	0792      	lsls	r2, r2, #30
    e066:	d501      	bpl.n	e06c <am_hal_iom_configure+0x28>
    e068:	2007      	movs	r0, #7
    e06a:	4770      	bx	lr
    e06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e070:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e074:	3304      	adds	r3, #4
    e076:	780a      	ldrb	r2, [r1, #0]
    e078:	7202      	strb	r2, [r0, #8]
    e07a:	031b      	lsls	r3, r3, #12
    e07c:	f241 0410 	movw	r4, #4112	; 0x1010
    e080:	b083      	sub	sp, #12
    e082:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    e086:	b942      	cbnz	r2, e09a <am_hal_iom_configure+0x56>
    e088:	f891 c008 	ldrb.w	ip, [r1, #8]
    e08c:	f1bc 0f03 	cmp.w	ip, #3
    e090:	d908      	bls.n	e0a4 <am_hal_iom_configure+0x60>
    e092:	2006      	movs	r0, #6
    e094:	b003      	add	sp, #12
    e096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e09a:	2a01      	cmp	r2, #1
    e09c:	f000 80c3 	beq.w	e226 <am_hal_iom_configure+0x1e2>
    e0a0:	2005      	movs	r0, #5
    e0a2:	e7f7      	b.n	e094 <am_hal_iom_configure+0x50>
    e0a4:	684f      	ldr	r7, [r1, #4]
    e0a6:	2f00      	cmp	r7, #0
    e0a8:	f000 80bb 	beq.w	e222 <am_hal_iom_configure+0x1de>
    e0ac:	4e73      	ldr	r6, [pc, #460]	; (e27c <am_hal_iom_configure+0x238>)
    e0ae:	fbb6 f6f7 	udiv	r6, r6, r7
    e0b2:	fb07 f206 	mul.w	r2, r7, r6
    e0b6:	f1c2 7237 	rsb	r2, r2, #47972352	; 0x2dc0000
    e0ba:	f502 42d8 	add.w	r2, r2, #27648	; 0x6c00
    e0be:	2a00      	cmp	r2, #0
    e0c0:	bf18      	it	ne
    e0c2:	3601      	addne	r6, #1
    e0c4:	4274      	negs	r4, r6
    e0c6:	4034      	ands	r4, r6
    e0c8:	fab4 f484 	clz	r4, r4
    e0cc:	f1c4 041f 	rsb	r4, r4, #31
    e0d0:	2c06      	cmp	r4, #6
    e0d2:	bfa8      	it	ge
    e0d4:	2406      	movge	r4, #6
    e0d6:	f5b7 6f37 	cmp.w	r7, #2928	; 0xb70
    e0da:	f240 80b7 	bls.w	e24c <am_hal_iom_configure+0x208>
    e0de:	f5a7 0274 	sub.w	r2, r7, #15990784	; 0xf40000
    e0e2:	4d67      	ldr	r5, [pc, #412]	; (e280 <am_hal_iom_configure+0x23c>)
    e0e4:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
    e0e8:	42aa      	cmp	r2, r5
    e0ea:	bf8c      	ite	hi
    e0ec:	f04f 0e00 	movhi.w	lr, #0
    e0f0:	f04f 0e01 	movls.w	lr, #1
    e0f4:	ea4f 024e 	mov.w	r2, lr, lsl #1
    e0f8:	3201      	adds	r2, #1
    e0fa:	fa02 f804 	lsl.w	r8, r2, r4
    e0fe:	fbb6 f5f8 	udiv	r5, r6, r8
    e102:	fb08 6815 	mls	r8, r8, r5, r6
    e106:	f1b8 0f00 	cmp.w	r8, #0
    e10a:	bf18      	it	ne
    e10c:	3501      	addne	r5, #1
    e10e:	fab5 f885 	clz	r8, r5
    e112:	f1c8 081f 	rsb	r8, r8, #31
    e116:	f1b8 0f07 	cmp.w	r8, #7
    e11a:	f240 8094 	bls.w	e246 <am_hal_iom_configure+0x202>
    e11e:	3c07      	subs	r4, #7
    e120:	4444      	add	r4, r8
    e122:	f104 0901 	add.w	r9, r4, #1
    e126:	f1b9 0f07 	cmp.w	r9, #7
    e12a:	d87a      	bhi.n	e222 <am_hal_iom_configure+0x1de>
    e12c:	f1a8 0807 	sub.w	r8, r8, #7
    e130:	f04f 0a01 	mov.w	sl, #1
    e134:	fa0a fa08 	lsl.w	sl, sl, r8
    e138:	f10a 3aff 	add.w	sl, sl, #4294967295
    e13c:	ea0a 0a05 	and.w	sl, sl, r5
    e140:	fa25 f508 	lsr.w	r5, r5, r8
    e144:	f1ba 0f00 	cmp.w	sl, #0
    e148:	bf18      	it	ne
    e14a:	3501      	addne	r5, #1
    e14c:	f8df 8158 	ldr.w	r8, [pc, #344]	; e2a8 <am_hal_iom_configure+0x264>
    e150:	4547      	cmp	r7, r8
    e152:	d87e      	bhi.n	e252 <am_hal_iom_configure+0x20e>
    e154:	f04f 0801 	mov.w	r8, #1
    e158:	fa08 f804 	lsl.w	r8, r8, r4
    e15c:	ebb8 0806 	subs.w	r8, r8, r6
    e160:	bf18      	it	ne
    e162:	f04f 0801 	movne.w	r8, #1
    e166:	ea4f 066c 	mov.w	r6, ip, asr #1
    e16a:	2e01      	cmp	r6, #1
    e16c:	d074      	beq.n	e258 <am_hal_iom_configure+0x214>
    e16e:	3d01      	subs	r5, #1
    e170:	086e      	lsrs	r6, r5, #1
    e172:	9600      	str	r6, [sp, #0]
    e174:	fb05 fa08 	mul.w	sl, r5, r8
    e178:	40a2      	lsls	r2, r4
    e17a:	fb0a 2202 	mla	r2, sl, r2, r2
    e17e:	ea4f 2a09 	mov.w	sl, r9, lsl #8
    e182:	f40a 66e0 	and.w	r6, sl, #1792	; 0x700
    e186:	f8df 90f4 	ldr.w	r9, [pc, #244]	; e27c <am_hal_iom_configure+0x238>
    e18a:	fbb9 fbf2 	udiv	fp, r9, r2
    e18e:	fb02 fa0b 	mul.w	sl, r2, fp
    e192:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    e196:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
    e19a:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    e19e:	9601      	str	r6, [sp, #4]
    e1a0:	0852      	lsrs	r2, r2, #1
    e1a2:	9e00      	ldr	r6, [sp, #0]
    e1a4:	4552      	cmp	r2, sl
    e1a6:	bf2c      	ite	cs
    e1a8:	465a      	movcs	r2, fp
    e1aa:	f10b 0201 	addcc.w	r2, fp, #1
    e1ae:	f8df b0fc 	ldr.w	fp, [pc, #252]	; e2ac <am_hal_iom_configure+0x268>
    e1b2:	fbb2 fafb 	udiv	sl, r2, fp
    e1b6:	0436      	lsls	r6, r6, #16
    e1b8:	ea45 25ce 	orr.w	r5, r5, lr, lsl #11
    e1bc:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    e1c0:	ea45 3508 	orr.w	r5, r5, r8, lsl #12
    e1c4:	fb0b 2b1a 	mls	fp, fp, sl, r2
    e1c8:	432e      	orrs	r6, r5
    e1ca:	f1bb 0f00 	cmp.w	fp, #0
    e1ce:	d10a      	bne.n	e1e6 <am_hal_iom_configure+0x1a2>
    e1d0:	f1ba 0f00 	cmp.w	sl, #0
    e1d4:	d007      	beq.n	e1e6 <am_hal_iom_configure+0x1a2>
    e1d6:	f10a 35ff 	add.w	r5, sl, #4294967295
    e1da:	ea15 0f0a 	tst.w	r5, sl
    e1de:	d102      	bne.n	e1e6 <am_hal_iom_configure+0x1a2>
    e1e0:	9d01      	ldr	r5, [sp, #4]
    e1e2:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
    e1e6:	2400      	movs	r4, #0
    e1e8:	4334      	orrs	r4, r6
    e1ea:	f8c3 c300 	str.w	ip, [r3, #768]	; 0x300
    e1ee:	f044 0401 	orr.w	r4, r4, #1
    e1f2:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    e1f6:	68cb      	ldr	r3, [r1, #12]
    e1f8:	690a      	ldr	r2, [r1, #16]
    e1fa:	60c3      	str	r3, [r0, #12]
    e1fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e200:	2300      	movs	r3, #0
    e202:	6102      	str	r2, [r0, #16]
    e204:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    e208:	4a1c      	ldr	r2, [pc, #112]	; (e27c <am_hal_iom_configure+0x238>)
    e20a:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    e20e:	fbb2 f7f7 	udiv	r7, r2, r7
    e212:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    e216:	f8c0 785c 	str.w	r7, [r0, #2140]	; 0x85c
    e21a:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    e21e:	4618      	mov	r0, r3
    e220:	e738      	b.n	e094 <am_hal_iom_configure+0x50>
    e222:	2400      	movs	r4, #0
    e224:	e7e1      	b.n	e1ea <am_hal_iom_configure+0x1a6>
    e226:	684f      	ldr	r7, [r1, #4]
    e228:	4a16      	ldr	r2, [pc, #88]	; (e284 <am_hal_iom_configure+0x240>)
    e22a:	4297      	cmp	r7, r2
    e22c:	d01e      	beq.n	e26c <am_hal_iom_configure+0x228>
    e22e:	4a16      	ldr	r2, [pc, #88]	; (e288 <am_hal_iom_configure+0x244>)
    e230:	4297      	cmp	r7, r2
    e232:	d016      	beq.n	e262 <am_hal_iom_configure+0x21e>
    e234:	4a15      	ldr	r2, [pc, #84]	; (e28c <am_hal_iom_configure+0x248>)
    e236:	4297      	cmp	r7, r2
    e238:	f47f af2b 	bne.w	e092 <am_hal_iom_configure+0x4e>
    e23c:	4a14      	ldr	r2, [pc, #80]	; (e290 <am_hal_iom_configure+0x24c>)
    e23e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e242:	4c14      	ldr	r4, [pc, #80]	; (e294 <am_hal_iom_configure+0x250>)
    e244:	e7d3      	b.n	e1ee <am_hal_iom_configure+0x1aa>
    e246:	f104 0901 	add.w	r9, r4, #1
    e24a:	e77f      	b.n	e14c <am_hal_iom_configure+0x108>
    e24c:	f04f 0e01 	mov.w	lr, #1
    e250:	e750      	b.n	e0f4 <am_hal_iom_configure+0xb0>
    e252:	f04f 0800 	mov.w	r8, #0
    e256:	e786      	b.n	e166 <am_hal_iom_configure+0x122>
    e258:	1eae      	subs	r6, r5, #2
    e25a:	0876      	lsrs	r6, r6, #1
    e25c:	9600      	str	r6, [sp, #0]
    e25e:	3d01      	subs	r5, #1
    e260:	e788      	b.n	e174 <am_hal_iom_configure+0x130>
    e262:	4a0d      	ldr	r2, [pc, #52]	; (e298 <am_hal_iom_configure+0x254>)
    e264:	4c0d      	ldr	r4, [pc, #52]	; (e29c <am_hal_iom_configure+0x258>)
    e266:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e26a:	e7c0      	b.n	e1ee <am_hal_iom_configure+0x1aa>
    e26c:	4a0c      	ldr	r2, [pc, #48]	; (e2a0 <am_hal_iom_configure+0x25c>)
    e26e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e272:	4c0c      	ldr	r4, [pc, #48]	; (e2a4 <am_hal_iom_configure+0x260>)
    e274:	e7bb      	b.n	e1ee <am_hal_iom_configure+0x1aa>
    e276:	bf00      	nop
    e278:	01123456 	.word	0x01123456
    e27c:	02dc6c00 	.word	0x02dc6c00
    e280:	007a11ff 	.word	0x007a11ff
    e284:	00061a80 	.word	0x00061a80
    e288:	000f4240 	.word	0x000f4240
    e28c:	000186a0 	.word	0x000186a0
    e290:	0003f070 	.word	0x0003f070
    e294:	773b1201 	.word	0x773b1201
    e298:	00213040 	.word	0x00213040
    e29c:	06031301 	.word	0x06031301
    e2a0:	0003f270 	.word	0x0003f270
    e2a4:	1d0e1201 	.word	0x1d0e1201
    e2a8:	00b71aff 	.word	0x00b71aff
    e2ac:	0003d090 	.word	0x0003d090

0000e2b0 <am_hal_itm_disable>:
    e2b0:	b510      	push	{r4, lr}
    e2b2:	4b25      	ldr	r3, [pc, #148]	; (e348 <am_hal_itm_disable+0x98>)
    e2b4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e2b8:	b9b3      	cbnz	r3, e2e8 <am_hal_itm_disable+0x38>
    e2ba:	4b24      	ldr	r3, [pc, #144]	; (e34c <am_hal_itm_disable+0x9c>)
    e2bc:	68da      	ldr	r2, [r3, #12]
    e2be:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e2c2:	60da      	str	r2, [r3, #12]
    e2c4:	68da      	ldr	r2, [r3, #12]
    e2c6:	01d2      	lsls	r2, r2, #7
    e2c8:	d5fc      	bpl.n	e2c4 <am_hal_itm_disable+0x14>
    e2ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e2ce:	4920      	ldr	r1, [pc, #128]	; (e350 <am_hal_itm_disable+0xa0>)
    e2d0:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    e2d4:	4a1f      	ldr	r2, [pc, #124]	; (e354 <am_hal_itm_disable+0xa4>)
    e2d6:	200f      	movs	r0, #15
    e2d8:	f04f 31ff 	mov.w	r1, #4294967295
    e2dc:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e2e0:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e2e4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e2e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e2ec:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e2f0:	021b      	lsls	r3, r3, #8
    e2f2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e2f6:	d4f9      	bmi.n	e2ec <am_hal_itm_disable+0x3c>
    e2f8:	f240 20f7 	movw	r0, #759	; 0x2f7
    e2fc:	f7ff fa90 	bl	d820 <am_hal_flash_delay>
    e300:	4b13      	ldr	r3, [pc, #76]	; (e350 <am_hal_itm_disable+0xa0>)
    e302:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e306:	4621      	mov	r1, r4
    e308:	2064      	movs	r0, #100	; 0x64
    e30a:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    e30e:	f023 0301 	bic.w	r3, r3, #1
    e312:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    e316:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    e31a:	4b0f      	ldr	r3, [pc, #60]	; (e358 <am_hal_itm_disable+0xa8>)
    e31c:	4013      	ands	r3, r2
    e31e:	2b00      	cmp	r3, #0
    e320:	d1f9      	bne.n	e316 <am_hal_itm_disable+0x66>
    e322:	3801      	subs	r0, #1
    e324:	d1f1      	bne.n	e30a <am_hal_itm_disable+0x5a>
    e326:	4a09      	ldr	r2, [pc, #36]	; (e34c <am_hal_itm_disable+0x9c>)
    e328:	68d3      	ldr	r3, [r2, #12]
    e32a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e32e:	60d3      	str	r3, [r2, #12]
    e330:	68d3      	ldr	r3, [r2, #12]
    e332:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e336:	d1fb      	bne.n	e330 <am_hal_itm_disable+0x80>
    e338:	4a03      	ldr	r2, [pc, #12]	; (e348 <am_hal_itm_disable+0x98>)
    e33a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e33e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e342:	2b00      	cmp	r3, #0
    e344:	d1fb      	bne.n	e33e <am_hal_itm_disable+0x8e>
    e346:	bd10      	pop	{r4, pc}
    e348:	40020000 	.word	0x40020000
    e34c:	e000edf0 	.word	0xe000edf0
    e350:	c5acce55 	.word	0xc5acce55
    e354:	00150511 	.word	0x00150511
    e358:	00800001 	.word	0x00800001

0000e35c <am_hal_mcuctrl_info_get>:
    e35c:	b4f0      	push	{r4, r5, r6, r7}
    e35e:	b121      	cbz	r1, e36a <am_hal_mcuctrl_info_get+0xe>
    e360:	2801      	cmp	r0, #1
    e362:	d038      	beq.n	e3d6 <am_hal_mcuctrl_info_get+0x7a>
    e364:	d320      	bcc.n	e3a8 <am_hal_mcuctrl_info_get+0x4c>
    e366:	2802      	cmp	r0, #2
    e368:	d002      	beq.n	e370 <am_hal_mcuctrl_info_get+0x14>
    e36a:	2006      	movs	r0, #6
    e36c:	bcf0      	pop	{r4, r5, r6, r7}
    e36e:	4770      	bx	lr
    e370:	4a41      	ldr	r2, [pc, #260]	; (e478 <am_hal_mcuctrl_info_get+0x11c>)
    e372:	684d      	ldr	r5, [r1, #4]
    e374:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e378:	694c      	ldr	r4, [r1, #20]
    e37a:	f003 0601 	and.w	r6, r3, #1
    e37e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e382:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e386:	700e      	strb	r6, [r1, #0]
    e388:	7208      	strb	r0, [r1, #8]
    e38a:	740b      	strb	r3, [r1, #16]
    e38c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e390:	60cb      	str	r3, [r1, #12]
    e392:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e396:	4328      	orrs	r0, r5
    e398:	6048      	str	r0, [r1, #4]
    e39a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e39e:	4323      	orrs	r3, r4
    e3a0:	2000      	movs	r0, #0
    e3a2:	614b      	str	r3, [r1, #20]
    e3a4:	bcf0      	pop	{r4, r5, r6, r7}
    e3a6:	4770      	bx	lr
    e3a8:	4a33      	ldr	r2, [pc, #204]	; (e478 <am_hal_mcuctrl_info_get+0x11c>)
    e3aa:	6993      	ldr	r3, [r2, #24]
    e3ac:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e3b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e3b4:	7008      	strb	r0, [r1, #0]
    e3b6:	704b      	strb	r3, [r1, #1]
    e3b8:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e3bc:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e3c0:	710b      	strb	r3, [r1, #4]
    e3c2:	6953      	ldr	r3, [r2, #20]
    e3c4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e3c8:	f003 0301 	and.w	r3, r3, #1
    e3cc:	2000      	movs	r0, #0
    e3ce:	708a      	strb	r2, [r1, #2]
    e3d0:	70cb      	strb	r3, [r1, #3]
    e3d2:	bcf0      	pop	{r4, r5, r6, r7}
    e3d4:	4770      	bx	lr
    e3d6:	4b28      	ldr	r3, [pc, #160]	; (e478 <am_hal_mcuctrl_info_get+0x11c>)
    e3d8:	4c28      	ldr	r4, [pc, #160]	; (e47c <am_hal_mcuctrl_info_get+0x120>)
    e3da:	681a      	ldr	r2, [r3, #0]
    e3dc:	600a      	str	r2, [r1, #0]
    e3de:	6858      	ldr	r0, [r3, #4]
    e3e0:	6048      	str	r0, [r1, #4]
    e3e2:	6898      	ldr	r0, [r3, #8]
    e3e4:	6088      	str	r0, [r1, #8]
    e3e6:	68d8      	ldr	r0, [r3, #12]
    e3e8:	60c8      	str	r0, [r1, #12]
    e3ea:	691d      	ldr	r5, [r3, #16]
    e3ec:	4824      	ldr	r0, [pc, #144]	; (e480 <am_hal_mcuctrl_info_get+0x124>)
    e3ee:	610d      	str	r5, [r1, #16]
    e3f0:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e3f4:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e3f8:	695d      	ldr	r5, [r3, #20]
    e3fa:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e3fe:	4b21      	ldr	r3, [pc, #132]	; (e484 <am_hal_mcuctrl_info_get+0x128>)
    e400:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e404:	6208      	str	r0, [r1, #32]
    e406:	f002 0201 	and.w	r2, r2, #1
    e40a:	614d      	str	r5, [r1, #20]
    e40c:	61cc      	str	r4, [r1, #28]
    e40e:	618a      	str	r2, [r1, #24]
    e410:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e414:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e418:	b2d0      	uxtb	r0, r2
    e41a:	f004 020f 	and.w	r2, r4, #15
    e41e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e422:	624a      	str	r2, [r1, #36]	; 0x24
    e424:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e428:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e42c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e430:	f004 020f 	and.w	r2, r4, #15
    e434:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e438:	628a      	str	r2, [r1, #40]	; 0x28
    e43a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e43e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e442:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e446:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e44a:	4302      	orrs	r2, r0
    e44c:	62ca      	str	r2, [r1, #44]	; 0x2c
    e44e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e452:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e456:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e45a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e45e:	b2c0      	uxtb	r0, r0
    e460:	0400      	lsls	r0, r0, #16
    e462:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e466:	b2d2      	uxtb	r2, r2
    e468:	431a      	orrs	r2, r3
    e46a:	b2e3      	uxtb	r3, r4
    e46c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e470:	630b      	str	r3, [r1, #48]	; 0x30
    e472:	2000      	movs	r0, #0
    e474:	bcf0      	pop	{r4, r5, r6, r7}
    e476:	4770      	bx	lr
    e478:	40020000 	.word	0x40020000
    e47c:	0000f3dc 	.word	0x0000f3dc
    e480:	0000f41c 	.word	0x0000f41c
    e484:	f0000f00 	.word	0xf0000f00

0000e488 <am_hal_pwrctrl_periph_enable>:
    e488:	b570      	push	{r4, r5, r6, lr}
    e48a:	b082      	sub	sp, #8
    e48c:	4604      	mov	r4, r0
    e48e:	f7ff fc29 	bl	dce4 <am_hal_interrupt_master_disable>
    e492:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e496:	4d0f      	ldr	r5, [pc, #60]	; (e4d4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e498:	4e0f      	ldr	r6, [pc, #60]	; (e4d8 <am_hal_pwrctrl_periph_enable+0x50>)
    e49a:	9001      	str	r0, [sp, #4]
    e49c:	00a4      	lsls	r4, r4, #2
    e49e:	68aa      	ldr	r2, [r5, #8]
    e4a0:	5933      	ldr	r3, [r6, r4]
    e4a2:	4313      	orrs	r3, r2
    e4a4:	60ab      	str	r3, [r5, #8]
    e4a6:	9801      	ldr	r0, [sp, #4]
    e4a8:	4434      	add	r4, r6
    e4aa:	f7ff fc1f 	bl	dcec <am_hal_interrupt_master_set>
    e4ae:	2077      	movs	r0, #119	; 0x77
    e4b0:	f7ff f9b6 	bl	d820 <am_hal_flash_delay>
    e4b4:	69ab      	ldr	r3, [r5, #24]
    e4b6:	6864      	ldr	r4, [r4, #4]
    e4b8:	4223      	tst	r3, r4
    e4ba:	d103      	bne.n	e4c4 <am_hal_pwrctrl_periph_enable+0x3c>
    e4bc:	2077      	movs	r0, #119	; 0x77
    e4be:	f7ff f9af 	bl	d820 <am_hal_flash_delay>
    e4c2:	69ab      	ldr	r3, [r5, #24]
    e4c4:	4b03      	ldr	r3, [pc, #12]	; (e4d4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e4c6:	699b      	ldr	r3, [r3, #24]
    e4c8:	4223      	tst	r3, r4
    e4ca:	bf0c      	ite	eq
    e4cc:	2001      	moveq	r0, #1
    e4ce:	2000      	movne	r0, #0
    e4d0:	b002      	add	sp, #8
    e4d2:	bd70      	pop	{r4, r5, r6, pc}
    e4d4:	40021000 	.word	0x40021000
    e4d8:	0000f45c 	.word	0x0000f45c

0000e4dc <am_hal_pwrctrl_periph_disable>:
    e4dc:	b570      	push	{r4, r5, r6, lr}
    e4de:	b082      	sub	sp, #8
    e4e0:	4604      	mov	r4, r0
    e4e2:	f7ff fbff 	bl	dce4 <am_hal_interrupt_master_disable>
    e4e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e4ea:	4d10      	ldr	r5, [pc, #64]	; (e52c <am_hal_pwrctrl_periph_disable+0x50>)
    e4ec:	4e10      	ldr	r6, [pc, #64]	; (e530 <am_hal_pwrctrl_periph_disable+0x54>)
    e4ee:	9001      	str	r0, [sp, #4]
    e4f0:	00a4      	lsls	r4, r4, #2
    e4f2:	68ab      	ldr	r3, [r5, #8]
    e4f4:	5932      	ldr	r2, [r6, r4]
    e4f6:	ea23 0302 	bic.w	r3, r3, r2
    e4fa:	60ab      	str	r3, [r5, #8]
    e4fc:	9801      	ldr	r0, [sp, #4]
    e4fe:	4434      	add	r4, r6
    e500:	f7ff fbf4 	bl	dcec <am_hal_interrupt_master_set>
    e504:	2077      	movs	r0, #119	; 0x77
    e506:	f7ff f98b 	bl	d820 <am_hal_flash_delay>
    e50a:	69ab      	ldr	r3, [r5, #24]
    e50c:	6864      	ldr	r4, [r4, #4]
    e50e:	4223      	tst	r3, r4
    e510:	d003      	beq.n	e51a <am_hal_pwrctrl_periph_disable+0x3e>
    e512:	2077      	movs	r0, #119	; 0x77
    e514:	f7ff f984 	bl	d820 <am_hal_flash_delay>
    e518:	69ab      	ldr	r3, [r5, #24]
    e51a:	4b04      	ldr	r3, [pc, #16]	; (e52c <am_hal_pwrctrl_periph_disable+0x50>)
    e51c:	699b      	ldr	r3, [r3, #24]
    e51e:	4223      	tst	r3, r4
    e520:	bf14      	ite	ne
    e522:	2001      	movne	r0, #1
    e524:	2000      	moveq	r0, #0
    e526:	b002      	add	sp, #8
    e528:	bd70      	pop	{r4, r5, r6, pc}
    e52a:	bf00      	nop
    e52c:	40021000 	.word	0x40021000
    e530:	0000f45c 	.word	0x0000f45c

0000e534 <am_hal_pwrctrl_low_power_init>:
    e534:	b530      	push	{r4, r5, lr}
    e536:	4b1f      	ldr	r3, [pc, #124]	; (e5b4 <am_hal_pwrctrl_low_power_init+0x80>)
    e538:	681a      	ldr	r2, [r3, #0]
    e53a:	b083      	sub	sp, #12
    e53c:	b912      	cbnz	r2, e544 <am_hal_pwrctrl_low_power_init+0x10>
    e53e:	4a1e      	ldr	r2, [pc, #120]	; (e5b8 <am_hal_pwrctrl_low_power_init+0x84>)
    e540:	6812      	ldr	r2, [r2, #0]
    e542:	601a      	str	r2, [r3, #0]
    e544:	4c1d      	ldr	r4, [pc, #116]	; (e5bc <am_hal_pwrctrl_low_power_init+0x88>)
    e546:	69a3      	ldr	r3, [r4, #24]
    e548:	05db      	lsls	r3, r3, #23
    e54a:	d502      	bpl.n	e552 <am_hal_pwrctrl_low_power_init+0x1e>
    e54c:	2000      	movs	r0, #0
    e54e:	b003      	add	sp, #12
    e550:	bd30      	pop	{r4, r5, pc}
    e552:	4d1b      	ldr	r5, [pc, #108]	; (e5c0 <am_hal_pwrctrl_low_power_init+0x8c>)
    e554:	491b      	ldr	r1, [pc, #108]	; (e5c4 <am_hal_pwrctrl_low_power_init+0x90>)
    e556:	7e2a      	ldrb	r2, [r5, #24]
    e558:	2001      	movs	r0, #1
    e55a:	4302      	orrs	r2, r0
    e55c:	2307      	movs	r3, #7
    e55e:	762a      	strb	r2, [r5, #24]
    e560:	9000      	str	r0, [sp, #0]
    e562:	461a      	mov	r2, r3
    e564:	f242 7010 	movw	r0, #10000	; 0x2710
    e568:	f7ff f95e 	bl	d828 <am_hal_flash_delay_status_check>
    e56c:	b110      	cbz	r0, e574 <am_hal_pwrctrl_low_power_init+0x40>
    e56e:	2004      	movs	r0, #4
    e570:	b003      	add	sp, #12
    e572:	bd30      	pop	{r4, r5, pc}
    e574:	6823      	ldr	r3, [r4, #0]
    e576:	f043 0301 	orr.w	r3, r3, #1
    e57a:	6023      	str	r3, [r4, #0]
    e57c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e582:	6263      	str	r3, [r4, #36]	; 0x24
    e584:	68eb      	ldr	r3, [r5, #12]
    e586:	b2db      	uxtb	r3, r3
    e588:	2b11      	cmp	r3, #17
    e58a:	d1df      	bne.n	e54c <am_hal_pwrctrl_low_power_init+0x18>
    e58c:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e590:	f360 5356 	bfi	r3, r0, #21, #2
    e594:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    e598:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e59c:	220f      	movs	r2, #15
    e59e:	f362 138b 	bfi	r3, r2, #6, #6
    e5a2:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e5a6:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e5aa:	f362 0305 	bfi	r3, r2, #0, #6
    e5ae:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e5b2:	e7cc      	b.n	e54e <am_hal_pwrctrl_low_power_init+0x1a>
    e5b4:	1000112c 	.word	0x1000112c
    e5b8:	4ffff000 	.word	0x4ffff000
    e5bc:	40021000 	.word	0x40021000
    e5c0:	40020000 	.word	0x40020000
    e5c4:	40020018 	.word	0x40020018

0000e5c8 <am_hal_rtc_osc_select>:
    e5c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e5cc:	2801      	cmp	r0, #1
    e5ce:	68d3      	ldr	r3, [r2, #12]
    e5d0:	bf0c      	ite	eq
    e5d2:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    e5d6:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e5da:	60d3      	str	r3, [r2, #12]
    e5dc:	4770      	bx	lr
    e5de:	bf00      	nop

0000e5e0 <am_hal_rtc_osc_disable>:
    e5e0:	4a03      	ldr	r2, [pc, #12]	; (e5f0 <am_hal_rtc_osc_disable+0x10>)
    e5e2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e5e6:	f043 0310 	orr.w	r3, r3, #16
    e5ea:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e5ee:	4770      	bx	lr
    e5f0:	40004200 	.word	0x40004200

0000e5f4 <am_hal_sysctrl_sleep>:
    e5f4:	b510      	push	{r4, lr}
    e5f6:	b082      	sub	sp, #8
    e5f8:	4604      	mov	r4, r0
    e5fa:	f7ff fb73 	bl	dce4 <am_hal_interrupt_master_disable>
    e5fe:	4a0f      	ldr	r2, [pc, #60]	; (e63c <am_hal_sysctrl_sleep+0x48>)
    e600:	9001      	str	r0, [sp, #4]
    e602:	b124      	cbz	r4, e60e <am_hal_sysctrl_sleep+0x1a>
    e604:	4b0e      	ldr	r3, [pc, #56]	; (e640 <am_hal_sysctrl_sleep+0x4c>)
    e606:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e60a:	07db      	lsls	r3, r3, #31
    e60c:	d511      	bpl.n	e632 <am_hal_sysctrl_sleep+0x3e>
    e60e:	6913      	ldr	r3, [r2, #16]
    e610:	f023 0304 	bic.w	r3, r3, #4
    e614:	6113      	str	r3, [r2, #16]
    e616:	f3bf 8f4f 	dsb	sy
    e61a:	4a0a      	ldr	r2, [pc, #40]	; (e644 <am_hal_sysctrl_sleep+0x50>)
    e61c:	4b0a      	ldr	r3, [pc, #40]	; (e648 <am_hal_sysctrl_sleep+0x54>)
    e61e:	6812      	ldr	r2, [r2, #0]
    e620:	601a      	str	r2, [r3, #0]
    e622:	bf30      	wfi
    e624:	f3bf 8f6f 	isb	sy
    e628:	9801      	ldr	r0, [sp, #4]
    e62a:	f7ff fb5f 	bl	dcec <am_hal_interrupt_master_set>
    e62e:	b002      	add	sp, #8
    e630:	bd10      	pop	{r4, pc}
    e632:	6913      	ldr	r3, [r2, #16]
    e634:	f043 0304 	orr.w	r3, r3, #4
    e638:	6113      	str	r3, [r2, #16]
    e63a:	e7ec      	b.n	e616 <am_hal_sysctrl_sleep+0x22>
    e63c:	e000ed00 	.word	0xe000ed00
    e640:	40020000 	.word	0x40020000
    e644:	5fff0000 	.word	0x5fff0000
    e648:	10001130 	.word	0x10001130

0000e64c <am_hal_uart_initialize>:
    e64c:	2801      	cmp	r0, #1
    e64e:	d901      	bls.n	e654 <am_hal_uart_initialize+0x8>
    e650:	2005      	movs	r0, #5
    e652:	4770      	bx	lr
    e654:	b169      	cbz	r1, e672 <am_hal_uart_initialize+0x26>
    e656:	b5f0      	push	{r4, r5, r6, r7, lr}
    e658:	2264      	movs	r2, #100	; 0x64
    e65a:	4e0e      	ldr	r6, [pc, #56]	; (e694 <am_hal_uart_initialize+0x48>)
    e65c:	fb02 f200 	mul.w	r2, r2, r0
    e660:	18b4      	adds	r4, r6, r2
    e662:	4603      	mov	r3, r0
    e664:	78e0      	ldrb	r0, [r4, #3]
    e666:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e66a:	b2fd      	uxtb	r5, r7
    e66c:	b11d      	cbz	r5, e676 <am_hal_uart_initialize+0x2a>
    e66e:	2007      	movs	r0, #7
    e670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e672:	2006      	movs	r0, #6
    e674:	4770      	bx	lr
    e676:	f040 0001 	orr.w	r0, r0, #1
    e67a:	70e0      	strb	r0, [r4, #3]
    e67c:	58b0      	ldr	r0, [r6, r2]
    e67e:	f8df e018 	ldr.w	lr, [pc, #24]	; e698 <am_hal_uart_initialize+0x4c>
    e682:	f36e 0017 	bfi	r0, lr, #0, #24
    e686:	50b0      	str	r0, [r6, r2]
    e688:	6263      	str	r3, [r4, #36]	; 0x24
    e68a:	7127      	strb	r7, [r4, #4]
    e68c:	6625      	str	r5, [r4, #96]	; 0x60
    e68e:	4628      	mov	r0, r5
    e690:	600c      	str	r4, [r1, #0]
    e692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e694:	10005644 	.word	0x10005644
    e698:	00ea9e06 	.word	0x00ea9e06

0000e69c <am_hal_uart_deinitialize>:
    e69c:	b128      	cbz	r0, e6aa <am_hal_uart_deinitialize+0xe>
    e69e:	6803      	ldr	r3, [r0, #0]
    e6a0:	4a07      	ldr	r2, [pc, #28]	; (e6c0 <am_hal_uart_deinitialize+0x24>)
    e6a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6a6:	4293      	cmp	r3, r2
    e6a8:	d001      	beq.n	e6ae <am_hal_uart_deinitialize+0x12>
    e6aa:	2002      	movs	r0, #2
    e6ac:	4770      	bx	lr
    e6ae:	78c2      	ldrb	r2, [r0, #3]
    e6b0:	2300      	movs	r3, #0
    e6b2:	f36f 0200 	bfc	r2, #0, #1
    e6b6:	70c2      	strb	r2, [r0, #3]
    e6b8:	6243      	str	r3, [r0, #36]	; 0x24
    e6ba:	7103      	strb	r3, [r0, #4]
    e6bc:	4618      	mov	r0, r3
    e6be:	4770      	bx	lr
    e6c0:	01ea9e06 	.word	0x01ea9e06

0000e6c4 <am_hal_uart_power_control>:
    e6c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e6c8:	6804      	ldr	r4, [r0, #0]
    e6ca:	4b36      	ldr	r3, [pc, #216]	; (e7a4 <am_hal_uart_power_control+0xe0>)
    e6cc:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e6d0:	429c      	cmp	r4, r3
    e6d2:	b083      	sub	sp, #12
    e6d4:	d003      	beq.n	e6de <am_hal_uart_power_control+0x1a>
    e6d6:	2002      	movs	r0, #2
    e6d8:	b003      	add	sp, #12
    e6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e6de:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e6e0:	4605      	mov	r5, r0
    e6e2:	f107 0008 	add.w	r0, r7, #8
    e6e6:	4691      	mov	r9, r2
    e6e8:	460e      	mov	r6, r1
    e6ea:	fa5f f880 	uxtb.w	r8, r0
    e6ee:	b181      	cbz	r1, e712 <am_hal_uart_power_control+0x4e>
    e6f0:	2902      	cmp	r1, #2
    e6f2:	d80c      	bhi.n	e70e <am_hal_uart_power_control+0x4a>
    e6f4:	b992      	cbnz	r2, e71c <am_hal_uart_power_control+0x58>
    e6f6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e6fa:	371c      	adds	r7, #28
    e6fc:	033f      	lsls	r7, r7, #12
    e6fe:	f04f 33ff 	mov.w	r3, #4294967295
    e702:	647b      	str	r3, [r7, #68]	; 0x44
    e704:	4640      	mov	r0, r8
    e706:	f7ff fee9 	bl	e4dc <am_hal_pwrctrl_periph_disable>
    e70a:	2000      	movs	r0, #0
    e70c:	e7e4      	b.n	e6d8 <am_hal_uart_power_control+0x14>
    e70e:	2006      	movs	r0, #6
    e710:	e7e2      	b.n	e6d8 <am_hal_uart_power_control+0x14>
    e712:	b322      	cbz	r2, e75e <am_hal_uart_power_control+0x9a>
    e714:	792b      	ldrb	r3, [r5, #4]
    e716:	bb3b      	cbnz	r3, e768 <am_hal_uart_power_control+0xa4>
    e718:	2007      	movs	r0, #7
    e71a:	e7dd      	b.n	e6d8 <am_hal_uart_power_control+0x14>
    e71c:	f7ff fae2 	bl	dce4 <am_hal_interrupt_master_disable>
    e720:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e724:	331c      	adds	r3, #28
    e726:	031b      	lsls	r3, r3, #12
    e728:	9001      	str	r0, [sp, #4]
    e72a:	6a1a      	ldr	r2, [r3, #32]
    e72c:	60aa      	str	r2, [r5, #8]
    e72e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e730:	60ea      	str	r2, [r5, #12]
    e732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e734:	612a      	str	r2, [r5, #16]
    e736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e738:	616a      	str	r2, [r5, #20]
    e73a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e73c:	61aa      	str	r2, [r5, #24]
    e73e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e740:	61ea      	str	r2, [r5, #28]
    e742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e744:	622b      	str	r3, [r5, #32]
    e746:	2301      	movs	r3, #1
    e748:	712b      	strb	r3, [r5, #4]
    e74a:	9801      	ldr	r0, [sp, #4]
    e74c:	f7ff face 	bl	dcec <am_hal_interrupt_master_set>
    e750:	682b      	ldr	r3, [r5, #0]
    e752:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e756:	42a3      	cmp	r3, r4
    e758:	d1d4      	bne.n	e704 <am_hal_uart_power_control+0x40>
    e75a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e75c:	e7cb      	b.n	e6f6 <am_hal_uart_power_control+0x32>
    e75e:	4640      	mov	r0, r8
    e760:	f7ff fe92 	bl	e488 <am_hal_pwrctrl_periph_enable>
    e764:	4648      	mov	r0, r9
    e766:	e7b7      	b.n	e6d8 <am_hal_uart_power_control+0x14>
    e768:	4640      	mov	r0, r8
    e76a:	f7ff fe8d 	bl	e488 <am_hal_pwrctrl_periph_enable>
    e76e:	f7ff fab9 	bl	dce4 <am_hal_interrupt_master_disable>
    e772:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e776:	331c      	adds	r3, #28
    e778:	031b      	lsls	r3, r3, #12
    e77a:	68aa      	ldr	r2, [r5, #8]
    e77c:	9000      	str	r0, [sp, #0]
    e77e:	621a      	str	r2, [r3, #32]
    e780:	68ea      	ldr	r2, [r5, #12]
    e782:	625a      	str	r2, [r3, #36]	; 0x24
    e784:	692a      	ldr	r2, [r5, #16]
    e786:	629a      	str	r2, [r3, #40]	; 0x28
    e788:	696a      	ldr	r2, [r5, #20]
    e78a:	62da      	str	r2, [r3, #44]	; 0x2c
    e78c:	69aa      	ldr	r2, [r5, #24]
    e78e:	631a      	str	r2, [r3, #48]	; 0x30
    e790:	69ea      	ldr	r2, [r5, #28]
    e792:	635a      	str	r2, [r3, #52]	; 0x34
    e794:	6a2a      	ldr	r2, [r5, #32]
    e796:	639a      	str	r2, [r3, #56]	; 0x38
    e798:	9800      	ldr	r0, [sp, #0]
    e79a:	712e      	strb	r6, [r5, #4]
    e79c:	f7ff faa6 	bl	dcec <am_hal_interrupt_master_set>
    e7a0:	4630      	mov	r0, r6
    e7a2:	e799      	b.n	e6d8 <am_hal_uart_power_control+0x14>
    e7a4:	01ea9e06 	.word	0x01ea9e06

0000e7a8 <am_hal_uart_configure>:
    e7a8:	6803      	ldr	r3, [r0, #0]
    e7aa:	4a7a      	ldr	r2, [pc, #488]	; (e994 <am_hal_uart_configure+0x1ec>)
    e7ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7b0:	4293      	cmp	r3, r2
    e7b2:	d001      	beq.n	e7b8 <am_hal_uart_configure+0x10>
    e7b4:	2002      	movs	r0, #2
    e7b6:	4770      	bx	lr
    e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e7be:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e7c2:	351c      	adds	r5, #28
    e7c4:	032d      	lsls	r5, r5, #12
    e7c6:	2700      	movs	r7, #0
    e7c8:	b084      	sub	sp, #16
    e7ca:	632f      	str	r7, [r5, #48]	; 0x30
    e7cc:	460e      	mov	r6, r1
    e7ce:	4604      	mov	r4, r0
    e7d0:	f7ff fa88 	bl	dce4 <am_hal_interrupt_master_disable>
    e7d4:	9001      	str	r0, [sp, #4]
    e7d6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e7d8:	f043 0308 	orr.w	r3, r3, #8
    e7dc:	862b      	strh	r3, [r5, #48]	; 0x30
    e7de:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e7e0:	2201      	movs	r2, #1
    e7e2:	f362 1306 	bfi	r3, r2, #4, #3
    e7e6:	862b      	strh	r3, [r5, #48]	; 0x30
    e7e8:	9801      	ldr	r0, [sp, #4]
    e7ea:	f7ff fa7f 	bl	dcec <am_hal_interrupt_master_set>
    e7ee:	f7ff fa79 	bl	dce4 <am_hal_interrupt_master_disable>
    e7f2:	9002      	str	r0, [sp, #8]
    e7f4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e7f6:	f367 0300 	bfi	r3, r7, #0, #1
    e7fa:	862b      	strh	r3, [r5, #48]	; 0x30
    e7fc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e7fe:	f367 2349 	bfi	r3, r7, #9, #1
    e802:	862b      	strh	r3, [r5, #48]	; 0x30
    e804:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e806:	f367 2308 	bfi	r3, r7, #8, #1
    e80a:	862b      	strh	r3, [r5, #48]	; 0x30
    e80c:	9802      	ldr	r0, [sp, #8]
    e80e:	f7ff fa6d 	bl	dcec <am_hal_interrupt_master_set>
    e812:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e814:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e818:	3b01      	subs	r3, #1
    e81a:	2b03      	cmp	r3, #3
    e81c:	d854      	bhi.n	e8c8 <am_hal_uart_configure+0x120>
    e81e:	e8df f003 	tbb	[pc, r3]
    e822:	020e      	.short	0x020e
    e824:	1114      	.short	0x1114
    e826:	495c      	ldr	r1, [pc, #368]	; (e998 <am_hal_uart_configure+0x1f0>)
    e828:	485c      	ldr	r0, [pc, #368]	; (e99c <am_hal_uart_configure+0x1f4>)
    e82a:	6832      	ldr	r2, [r6, #0]
    e82c:	0112      	lsls	r2, r2, #4
    e82e:	fbb0 f3f2 	udiv	r3, r0, r2
    e832:	b96b      	cbnz	r3, e850 <am_hal_uart_configure+0xa8>
    e834:	485a      	ldr	r0, [pc, #360]	; (e9a0 <am_hal_uart_configure+0x1f8>)
    e836:	6623      	str	r3, [r4, #96]	; 0x60
    e838:	b004      	add	sp, #16
    e83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e83e:	4959      	ldr	r1, [pc, #356]	; (e9a4 <am_hal_uart_configure+0x1fc>)
    e840:	4859      	ldr	r0, [pc, #356]	; (e9a8 <am_hal_uart_configure+0x200>)
    e842:	e7f2      	b.n	e82a <am_hal_uart_configure+0x82>
    e844:	4959      	ldr	r1, [pc, #356]	; (e9ac <am_hal_uart_configure+0x204>)
    e846:	485a      	ldr	r0, [pc, #360]	; (e9b0 <am_hal_uart_configure+0x208>)
    e848:	e7ef      	b.n	e82a <am_hal_uart_configure+0x82>
    e84a:	495a      	ldr	r1, [pc, #360]	; (e9b4 <am_hal_uart_configure+0x20c>)
    e84c:	485a      	ldr	r0, [pc, #360]	; (e9b8 <am_hal_uart_configure+0x210>)
    e84e:	e7ec      	b.n	e82a <am_hal_uart_configure+0x82>
    e850:	fbb1 f2f2 	udiv	r2, r1, r2
    e854:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e858:	626b      	str	r3, [r5, #36]	; 0x24
    e85a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    e85e:	626b      	str	r3, [r5, #36]	; 0x24
    e860:	fbb0 f0f1 	udiv	r0, r0, r1
    e864:	62aa      	str	r2, [r5, #40]	; 0x28
    e866:	6620      	str	r0, [r4, #96]	; 0x60
    e868:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e86a:	f36f 338e 	bfc	r3, #14, #1
    e86e:	862b      	strh	r3, [r5, #48]	; 0x30
    e870:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e872:	f36f 33cf 	bfc	r3, #15, #1
    e876:	862b      	strh	r3, [r5, #48]	; 0x30
    e878:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e87a:	6933      	ldr	r3, [r6, #16]
    e87c:	4313      	orrs	r3, r2
    e87e:	632b      	str	r3, [r5, #48]	; 0x30
    e880:	6973      	ldr	r3, [r6, #20]
    e882:	636b      	str	r3, [r5, #52]	; 0x34
    e884:	6871      	ldr	r1, [r6, #4]
    e886:	68b3      	ldr	r3, [r6, #8]
    e888:	68f2      	ldr	r2, [r6, #12]
    e88a:	430b      	orrs	r3, r1
    e88c:	f043 0310 	orr.w	r3, r3, #16
    e890:	4313      	orrs	r3, r2
    e892:	62eb      	str	r3, [r5, #44]	; 0x2c
    e894:	f7ff fa26 	bl	dce4 <am_hal_interrupt_master_disable>
    e898:	9003      	str	r0, [sp, #12]
    e89a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e89c:	f043 0301 	orr.w	r3, r3, #1
    e8a0:	862b      	strh	r3, [r5, #48]	; 0x30
    e8a2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e8a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e8a8:	862b      	strh	r3, [r5, #48]	; 0x30
    e8aa:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e8ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e8b0:	862b      	strh	r3, [r5, #48]	; 0x30
    e8b2:	9803      	ldr	r0, [sp, #12]
    e8b4:	f7ff fa1a 	bl	dcec <am_hal_interrupt_master_set>
    e8b8:	6825      	ldr	r5, [r4, #0]
    e8ba:	4b36      	ldr	r3, [pc, #216]	; (e994 <am_hal_uart_configure+0x1ec>)
    e8bc:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e8c0:	429d      	cmp	r5, r3
    e8c2:	d005      	beq.n	e8d0 <am_hal_uart_configure+0x128>
    e8c4:	2000      	movs	r0, #0
    e8c6:	e7b7      	b.n	e838 <am_hal_uart_configure+0x90>
    e8c8:	2300      	movs	r3, #0
    e8ca:	6623      	str	r3, [r4, #96]	; 0x60
    e8cc:	483b      	ldr	r0, [pc, #236]	; (e9bc <am_hal_uart_configure+0x214>)
    e8ce:	e7b3      	b.n	e838 <am_hal_uart_configure+0x90>
    e8d0:	69b1      	ldr	r1, [r6, #24]
    e8d2:	6a37      	ldr	r7, [r6, #32]
    e8d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e8d8:	b109      	cbz	r1, e8de <am_hal_uart_configure+0x136>
    e8da:	69f3      	ldr	r3, [r6, #28]
    e8dc:	bb3b      	cbnz	r3, e92e <am_hal_uart_configure+0x186>
    e8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e8e0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e8e4:	f103 021c 	add.w	r2, r3, #28
    e8e8:	0312      	lsls	r2, r2, #12
    e8ea:	2100      	movs	r1, #0
    e8ec:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e8f0:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e8f2:	f021 0120 	bic.w	r1, r1, #32
    e8f6:	6391      	str	r1, [r2, #56]	; 0x38
    e8f8:	b1b7      	cbz	r7, e928 <am_hal_uart_configure+0x180>
    e8fa:	f1b8 0f00 	cmp.w	r8, #0
    e8fe:	d12e      	bne.n	e95e <am_hal_uart_configure+0x1b6>
    e900:	6823      	ldr	r3, [r4, #0]
    e902:	4a24      	ldr	r2, [pc, #144]	; (e994 <am_hal_uart_configure+0x1ec>)
    e904:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e908:	2100      	movs	r1, #0
    e90a:	4293      	cmp	r3, r2
    e90c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e910:	d1d8      	bne.n	e8c4 <am_hal_uart_configure+0x11c>
    e912:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e914:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e918:	331c      	adds	r3, #28
    e91a:	031b      	lsls	r3, r3, #12
    e91c:	2000      	movs	r0, #0
    e91e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e920:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e924:	639a      	str	r2, [r3, #56]	; 0x38
    e926:	e787      	b.n	e838 <am_hal_uart_configure+0x90>
    e928:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e92c:	e7f4      	b.n	e918 <am_hal_uart_configure+0x170>
    e92e:	2201      	movs	r2, #1
    e930:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e934:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e938:	f000 fb32 	bl	efa0 <am_hal_queue_init>
    e93c:	6823      	ldr	r3, [r4, #0]
    e93e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e942:	42ab      	cmp	r3, r5
    e944:	d1be      	bne.n	e8c4 <am_hal_uart_configure+0x11c>
    e946:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e948:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e94c:	331c      	adds	r3, #28
    e94e:	031b      	lsls	r3, r3, #12
    e950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e952:	f042 0220 	orr.w	r2, r2, #32
    e956:	639a      	str	r2, [r3, #56]	; 0x38
    e958:	2f00      	cmp	r7, #0
    e95a:	d1ce      	bne.n	e8fa <am_hal_uart_configure+0x152>
    e95c:	e7d0      	b.n	e900 <am_hal_uart_configure+0x158>
    e95e:	2201      	movs	r2, #1
    e960:	4643      	mov	r3, r8
    e962:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e966:	4639      	mov	r1, r7
    e968:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e96c:	f000 fb18 	bl	efa0 <am_hal_queue_init>
    e970:	6823      	ldr	r3, [r4, #0]
    e972:	4a08      	ldr	r2, [pc, #32]	; (e994 <am_hal_uart_configure+0x1ec>)
    e974:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e978:	4293      	cmp	r3, r2
    e97a:	d1a3      	bne.n	e8c4 <am_hal_uart_configure+0x11c>
    e97c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e97e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e982:	331c      	adds	r3, #28
    e984:	031b      	lsls	r3, r3, #12
    e986:	2000      	movs	r0, #0
    e988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e98a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e98e:	639a      	str	r2, [r3, #56]	; 0x38
    e990:	e752      	b.n	e838 <am_hal_uart_configure+0x90>
    e992:	bf00      	nop
    e994:	01ea9e06 	.word	0x01ea9e06
    e998:	2dc6c000 	.word	0x2dc6c000
    e99c:	00b71b00 	.word	0x00b71b00
    e9a0:	08000003 	.word	0x08000003
    e9a4:	5b8d8000 	.word	0x5b8d8000
    e9a8:	016e3600 	.word	0x016e3600
    e9ac:	0b71b000 	.word	0x0b71b000
    e9b0:	002dc6c0 	.word	0x002dc6c0
    e9b4:	16e36000 	.word	0x16e36000
    e9b8:	005b8d80 	.word	0x005b8d80
    e9bc:	08000002 	.word	0x08000002

0000e9c0 <am_hal_uart_transfer>:
    e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9c4:	680f      	ldr	r7, [r1, #0]
    e9c6:	b091      	sub	sp, #68	; 0x44
    e9c8:	4605      	mov	r5, r0
    e9ca:	b13f      	cbz	r7, e9dc <am_hal_uart_transfer+0x1c>
    e9cc:	2f01      	cmp	r7, #1
    e9ce:	bf18      	it	ne
    e9d0:	2707      	movne	r7, #7
    e9d2:	d024      	beq.n	ea1e <am_hal_uart_transfer+0x5e>
    e9d4:	4638      	mov	r0, r7
    e9d6:	b011      	add	sp, #68	; 0x44
    e9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9dc:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e9e0:	690b      	ldr	r3, [r1, #16]
    e9e2:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e9e6:	688e      	ldr	r6, [r1, #8]
    e9e8:	9300      	str	r3, [sp, #0]
    e9ea:	f1b9 0f00 	cmp.w	r9, #0
    e9ee:	d031      	beq.n	ea54 <am_hal_uart_transfer+0x94>
    e9f0:	2e00      	cmp	r6, #0
    e9f2:	f000 819c 	beq.w	ed2e <am_hal_uart_transfer+0x36e>
    e9f6:	2800      	cmp	r0, #0
    e9f8:	f000 8097 	beq.w	eb2a <am_hal_uart_transfer+0x16a>
    e9fc:	6803      	ldr	r3, [r0, #0]
    e9fe:	4aa9      	ldr	r2, [pc, #676]	; (eca4 <am_hal_uart_transfer+0x2e4>)
    ea00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea04:	4293      	cmp	r3, r2
    ea06:	f000 8092 	beq.w	eb2e <am_hal_uart_transfer+0x16e>
    ea0a:	46b8      	mov	r8, r7
    ea0c:	9b00      	ldr	r3, [sp, #0]
    ea0e:	b10b      	cbz	r3, ea14 <am_hal_uart_transfer+0x54>
    ea10:	f8c3 8000 	str.w	r8, [r3]
    ea14:	2702      	movs	r7, #2
    ea16:	4638      	mov	r0, r7
    ea18:	b011      	add	sp, #68	; 0x44
    ea1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea1e:	1d0b      	adds	r3, r1, #4
    ea20:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    ea24:	f1b9 0f00 	cmp.w	r9, #0
    ea28:	d043      	beq.n	eab2 <am_hal_uart_transfer+0xf2>
    ea2a:	2f00      	cmp	r7, #0
    ea2c:	f000 8185 	beq.w	ed3a <am_hal_uart_transfer+0x37a>
    ea30:	2800      	cmp	r0, #0
    ea32:	f000 80eb 	beq.w	ec0c <am_hal_uart_transfer+0x24c>
    ea36:	6802      	ldr	r2, [r0, #0]
    ea38:	499a      	ldr	r1, [pc, #616]	; (eca4 <am_hal_uart_transfer+0x2e4>)
    ea3a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ea3e:	428a      	cmp	r2, r1
    ea40:	f000 80e7 	beq.w	ec12 <am_hal_uart_transfer+0x252>
    ea44:	2600      	movs	r6, #0
    ea46:	2702      	movs	r7, #2
    ea48:	f1bb 0f00 	cmp.w	fp, #0
    ea4c:	d0c2      	beq.n	e9d4 <am_hal_uart_transfer+0x14>
    ea4e:	f8cb 6000 	str.w	r6, [fp]
    ea52:	e7bf      	b.n	e9d4 <am_hal_uart_transfer+0x14>
    ea54:	2800      	cmp	r0, #0
    ea56:	d0dd      	beq.n	ea14 <am_hal_uart_transfer+0x54>
    ea58:	6803      	ldr	r3, [r0, #0]
    ea5a:	4a92      	ldr	r2, [pc, #584]	; (eca4 <am_hal_uart_transfer+0x2e4>)
    ea5c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea60:	4293      	cmp	r3, r2
    ea62:	d1d7      	bne.n	ea14 <am_hal_uart_transfer+0x54>
    ea64:	9b00      	ldr	r3, [sp, #0]
    ea66:	b10b      	cbz	r3, ea6c <am_hal_uart_transfer+0xac>
    ea68:	f8c3 9000 	str.w	r9, [r3]
    ea6c:	b1fe      	cbz	r6, eaae <am_hal_uart_transfer+0xee>
    ea6e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ea72:	2b00      	cmp	r3, #0
    ea74:	f040 8165 	bne.w	ed42 <am_hal_uart_transfer+0x382>
    ea78:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ea7a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ea7e:	311c      	adds	r1, #28
    ea80:	0309      	lsls	r1, r1, #12
    ea82:	698a      	ldr	r2, [r1, #24]
    ea84:	f3c2 1240 	ubfx	r2, r2, #5, #1
    ea88:	2a00      	cmp	r2, #0
    ea8a:	f040 818d 	bne.w	eda8 <am_hal_uart_transfer+0x3e8>
    ea8e:	f10a 33ff 	add.w	r3, sl, #4294967295
    ea92:	e003      	b.n	ea9c <am_hal_uart_transfer+0xdc>
    ea94:	6988      	ldr	r0, [r1, #24]
    ea96:	0680      	lsls	r0, r0, #26
    ea98:	f100 8151 	bmi.w	ed3e <am_hal_uart_transfer+0x37e>
    ea9c:	3201      	adds	r2, #1
    ea9e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    eaa2:	6008      	str	r0, [r1, #0]
    eaa4:	4296      	cmp	r6, r2
    eaa6:	d1f5      	bne.n	ea94 <am_hal_uart_transfer+0xd4>
    eaa8:	9b00      	ldr	r3, [sp, #0]
    eaaa:	b103      	cbz	r3, eaae <am_hal_uart_transfer+0xee>
    eaac:	601e      	str	r6, [r3, #0]
    eaae:	2700      	movs	r7, #0
    eab0:	e790      	b.n	e9d4 <am_hal_uart_transfer+0x14>
    eab2:	2800      	cmp	r0, #0
    eab4:	d0ae      	beq.n	ea14 <am_hal_uart_transfer+0x54>
    eab6:	6802      	ldr	r2, [r0, #0]
    eab8:	497a      	ldr	r1, [pc, #488]	; (eca4 <am_hal_uart_transfer+0x2e4>)
    eaba:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eabe:	428a      	cmp	r2, r1
    eac0:	d1a8      	bne.n	ea14 <am_hal_uart_transfer+0x54>
    eac2:	f1bb 0f00 	cmp.w	fp, #0
    eac6:	d001      	beq.n	eacc <am_hal_uart_transfer+0x10c>
    eac8:	f8cb 9000 	str.w	r9, [fp]
    eacc:	2f00      	cmp	r7, #0
    eace:	d0ee      	beq.n	eaae <am_hal_uart_transfer+0xee>
    ead0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    ead4:	2c00      	cmp	r4, #0
    ead6:	f040 816c 	bne.w	edb2 <am_hal_uart_transfer+0x3f2>
    eada:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eadc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eae0:	321c      	adds	r2, #28
    eae2:	0312      	lsls	r2, r2, #12
    eae4:	6990      	ldr	r0, [r2, #24]
    eae6:	f3c0 1000 	ubfx	r0, r0, #4, #1
    eaea:	2800      	cmp	r0, #0
    eaec:	f040 819d 	bne.w	ee2a <am_hal_uart_transfer+0x46a>
    eaf0:	6811      	ldr	r1, [r2, #0]
    eaf2:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    eaf6:	bf08      	it	eq
    eaf8:	f103 33ff 	addeq.w	r3, r3, #4294967295
    eafc:	d008      	beq.n	eb10 <am_hal_uart_transfer+0x150>
    eafe:	e190      	b.n	ee22 <am_hal_uart_transfer+0x462>
    eb00:	6991      	ldr	r1, [r2, #24]
    eb02:	06c8      	lsls	r0, r1, #27
    eb04:	d409      	bmi.n	eb1a <am_hal_uart_transfer+0x15a>
    eb06:	6811      	ldr	r1, [r2, #0]
    eb08:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    eb0c:	f040 814e 	bne.w	edac <am_hal_uart_transfer+0x3ec>
    eb10:	3401      	adds	r4, #1
    eb12:	42a7      	cmp	r7, r4
    eb14:	f803 1f01 	strb.w	r1, [r3, #1]!
    eb18:	d1f2      	bne.n	eb00 <am_hal_uart_transfer+0x140>
    eb1a:	2700      	movs	r7, #0
    eb1c:	f1bb 0f00 	cmp.w	fp, #0
    eb20:	f43f af58 	beq.w	e9d4 <am_hal_uart_transfer+0x14>
    eb24:	f8cb 4000 	str.w	r4, [fp]
    eb28:	e754      	b.n	e9d4 <am_hal_uart_transfer+0x14>
    eb2a:	4680      	mov	r8, r0
    eb2c:	e76e      	b.n	ea0c <am_hal_uart_transfer+0x4c>
    eb2e:	9301      	str	r3, [sp, #4]
    eb30:	4651      	mov	r1, sl
    eb32:	46bb      	mov	fp, r7
    eb34:	46b8      	mov	r8, r7
    eb36:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    eb3a:	b9f2      	cbnz	r2, eb7a <am_hal_uart_transfer+0x1ba>
    eb3c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eb3e:	b19e      	cbz	r6, eb68 <am_hal_uart_transfer+0x1a8>
    eb40:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eb44:	321c      	adds	r2, #28
    eb46:	0312      	lsls	r2, r2, #12
    eb48:	3901      	subs	r1, #1
    eb4a:	6994      	ldr	r4, [r2, #24]
    eb4c:	f3c4 1440 	ubfx	r4, r4, #5, #1
    eb50:	b11c      	cbz	r4, eb5a <am_hal_uart_transfer+0x19a>
    eb52:	e047      	b.n	ebe4 <am_hal_uart_transfer+0x224>
    eb54:	6993      	ldr	r3, [r2, #24]
    eb56:	069b      	lsls	r3, r3, #26
    eb58:	d441      	bmi.n	ebde <am_hal_uart_transfer+0x21e>
    eb5a:	3401      	adds	r4, #1
    eb5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    eb60:	6013      	str	r3, [r2, #0]
    eb62:	42b4      	cmp	r4, r6
    eb64:	d1f6      	bne.n	eb54 <am_hal_uart_transfer+0x194>
    eb66:	44a0      	add	r8, r4
    eb68:	9b00      	ldr	r3, [sp, #0]
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d09f      	beq.n	eaae <am_hal_uart_transfer+0xee>
    eb6e:	4638      	mov	r0, r7
    eb70:	f8c3 8000 	str.w	r8, [r3]
    eb74:	b011      	add	sp, #68	; 0x44
    eb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb7a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    eb7c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    eb7e:	1b14      	subs	r4, r2, r4
    eb80:	42b4      	cmp	r4, r6
    eb82:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    eb86:	bf28      	it	cs
    eb88:	4634      	movcs	r4, r6
    eb8a:	4622      	mov	r2, r4
    eb8c:	4618      	mov	r0, r3
    eb8e:	9302      	str	r3, [sp, #8]
    eb90:	f000 fa12 	bl	efb8 <am_hal_queue_item_add>
    eb94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb96:	9303      	str	r3, [sp, #12]
    eb98:	f7ff f8a4 	bl	dce4 <am_hal_interrupt_master_disable>
    eb9c:	9b03      	ldr	r3, [sp, #12]
    eb9e:	9008      	str	r0, [sp, #32]
    eba0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eba4:	331c      	adds	r3, #28
    eba6:	031b      	lsls	r3, r3, #12
    eba8:	9303      	str	r3, [sp, #12]
    ebaa:	e00d      	b.n	ebc8 <am_hal_uart_transfer+0x208>
    ebac:	f000 fa3c 	bl	f028 <am_hal_queue_item_get>
    ebb0:	b190      	cbz	r0, ebd8 <am_hal_uart_transfer+0x218>
    ebb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ebb4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ebb8:	331c      	adds	r3, #28
    ebba:	031b      	lsls	r3, r3, #12
    ebbc:	699a      	ldr	r2, [r3, #24]
    ebbe:	0692      	lsls	r2, r2, #26
    ebc0:	bf5c      	itt	pl
    ebc2:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    ebc6:	601a      	strpl	r2, [r3, #0]
    ebc8:	9b03      	ldr	r3, [sp, #12]
    ebca:	9802      	ldr	r0, [sp, #8]
    ebcc:	699b      	ldr	r3, [r3, #24]
    ebce:	069b      	lsls	r3, r3, #26
    ebd0:	f04f 0201 	mov.w	r2, #1
    ebd4:	a907      	add	r1, sp, #28
    ebd6:	d5e9      	bpl.n	ebac <am_hal_uart_transfer+0x1ec>
    ebd8:	9808      	ldr	r0, [sp, #32]
    ebda:	f7ff f887 	bl	dcec <am_hal_interrupt_master_set>
    ebde:	1b36      	subs	r6, r6, r4
    ebe0:	44a0      	add	r8, r4
    ebe2:	d0c1      	beq.n	eb68 <am_hal_uart_transfer+0x1a8>
    ebe4:	2001      	movs	r0, #1
    ebe6:	f7fe fe1b 	bl	d820 <am_hal_flash_delay>
    ebea:	f1b9 3fff 	cmp.w	r9, #4294967295
    ebee:	d001      	beq.n	ebf4 <am_hal_uart_transfer+0x234>
    ebf0:	f10b 0b01 	add.w	fp, fp, #1
    ebf4:	45d9      	cmp	r9, fp
    ebf6:	d9b7      	bls.n	eb68 <am_hal_uart_transfer+0x1a8>
    ebf8:	682a      	ldr	r2, [r5, #0]
    ebfa:	9b01      	ldr	r3, [sp, #4]
    ebfc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ec00:	429a      	cmp	r2, r3
    ec02:	eb0a 0108 	add.w	r1, sl, r8
    ec06:	f47f af01 	bne.w	ea0c <am_hal_uart_transfer+0x4c>
    ec0a:	e794      	b.n	eb36 <am_hal_uart_transfer+0x176>
    ec0c:	4606      	mov	r6, r0
    ec0e:	2702      	movs	r7, #2
    ec10:	e71a      	b.n	ea48 <am_hal_uart_transfer+0x88>
    ec12:	9200      	str	r2, [sp, #0]
    ec14:	f100 0248 	add.w	r2, r0, #72	; 0x48
    ec18:	f04f 0a00 	mov.w	sl, #0
    ec1c:	9202      	str	r2, [sp, #8]
    ec1e:	465a      	mov	r2, fp
    ec20:	4698      	mov	r8, r3
    ec22:	469b      	mov	fp, r3
    ec24:	4656      	mov	r6, sl
    ec26:	4613      	mov	r3, r2
    ec28:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    ec2c:	2a00      	cmp	r2, #0
    ec2e:	d152      	bne.n	ecd6 <am_hal_uart_transfer+0x316>
    ec30:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ec32:	b3a7      	cbz	r7, ec9e <am_hal_uart_transfer+0x2de>
    ec34:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ec38:	311c      	adds	r1, #28
    ec3a:	0309      	lsls	r1, r1, #12
    ec3c:	698a      	ldr	r2, [r1, #24]
    ec3e:	06d0      	lsls	r0, r2, #27
    ec40:	d432      	bmi.n	eca8 <am_hal_uart_transfer+0x2e8>
    ec42:	680a      	ldr	r2, [r1, #0]
    ec44:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    ec48:	f040 80aa 	bne.w	eda0 <am_hal_uart_transfer+0x3e0>
    ec4c:	f108 38ff 	add.w	r8, r8, #4294967295
    ec50:	e006      	b.n	ec60 <am_hal_uart_transfer+0x2a0>
    ec52:	698a      	ldr	r2, [r1, #24]
    ec54:	06d2      	lsls	r2, r2, #27
    ec56:	d41f      	bmi.n	ec98 <am_hal_uart_transfer+0x2d8>
    ec58:	680a      	ldr	r2, [r1, #0]
    ec5a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ec5e:	d161      	bne.n	ed24 <am_hal_uart_transfer+0x364>
    ec60:	3401      	adds	r4, #1
    ec62:	42bc      	cmp	r4, r7
    ec64:	f808 2f01 	strb.w	r2, [r8, #1]!
    ec68:	d1f3      	bne.n	ec52 <am_hal_uart_transfer+0x292>
    ec6a:	469b      	mov	fp, r3
    ec6c:	4426      	add	r6, r4
    ec6e:	f1bb 0f00 	cmp.w	fp, #0
    ec72:	f43f af1c 	beq.w	eaae <am_hal_uart_transfer+0xee>
    ec76:	f8cb 6000 	str.w	r6, [fp]
    ec7a:	2700      	movs	r7, #0
    ec7c:	e6aa      	b.n	e9d4 <am_hal_uart_transfer+0x14>
    ec7e:	9807      	ldr	r0, [sp, #28]
    ec80:	f7ff f834 	bl	dcec <am_hal_interrupt_master_set>
    ec84:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ec86:	9802      	ldr	r0, [sp, #8]
    ec88:	42bc      	cmp	r4, r7
    ec8a:	bf28      	it	cs
    ec8c:	463c      	movcs	r4, r7
    ec8e:	4641      	mov	r1, r8
    ec90:	4622      	mov	r2, r4
    ec92:	f000 f9c9 	bl	f028 <am_hal_queue_item_get>
    ec96:	9b01      	ldr	r3, [sp, #4]
    ec98:	1b3f      	subs	r7, r7, r4
    ec9a:	4426      	add	r6, r4
    ec9c:	d104      	bne.n	eca8 <am_hal_uart_transfer+0x2e8>
    ec9e:	469b      	mov	fp, r3
    eca0:	e7e5      	b.n	ec6e <am_hal_uart_transfer+0x2ae>
    eca2:	bf00      	nop
    eca4:	01ea9e06 	.word	0x01ea9e06
    eca8:	2001      	movs	r0, #1
    ecaa:	9301      	str	r3, [sp, #4]
    ecac:	f7fe fdb8 	bl	d820 <am_hal_flash_delay>
    ecb0:	f1b9 3fff 	cmp.w	r9, #4294967295
    ecb4:	9b01      	ldr	r3, [sp, #4]
    ecb6:	d001      	beq.n	ecbc <am_hal_uart_transfer+0x2fc>
    ecb8:	f10a 0a01 	add.w	sl, sl, #1
    ecbc:	45d1      	cmp	r9, sl
    ecbe:	d9ee      	bls.n	ec9e <am_hal_uart_transfer+0x2de>
    ecc0:	682a      	ldr	r2, [r5, #0]
    ecc2:	9900      	ldr	r1, [sp, #0]
    ecc4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ecc8:	428a      	cmp	r2, r1
    ecca:	eb0b 0806 	add.w	r8, fp, r6
    ecce:	d0ab      	beq.n	ec28 <am_hal_uart_transfer+0x268>
    ecd0:	469b      	mov	fp, r3
    ecd2:	2702      	movs	r7, #2
    ecd4:	e6b8      	b.n	ea48 <am_hal_uart_transfer+0x88>
    ecd6:	9301      	str	r3, [sp, #4]
    ecd8:	f7ff f804 	bl	dce4 <am_hal_interrupt_master_disable>
    ecdc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ecde:	9007      	str	r0, [sp, #28]
    ece0:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    ece4:	301c      	adds	r0, #28
    ece6:	9b01      	ldr	r3, [sp, #4]
    ece8:	0300      	lsls	r0, r0, #12
    ecea:	ac08      	add	r4, sp, #32
    ecec:	2200      	movs	r2, #0
    ecee:	6981      	ldr	r1, [r0, #24]
    ecf0:	06c9      	lsls	r1, r1, #27
    ecf2:	d409      	bmi.n	ed08 <am_hal_uart_transfer+0x348>
    ecf4:	6801      	ldr	r1, [r0, #0]
    ecf6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ecfa:	f102 0201 	add.w	r2, r2, #1
    ecfe:	d118      	bne.n	ed32 <am_hal_uart_transfer+0x372>
    ed00:	2a20      	cmp	r2, #32
    ed02:	f804 1b01 	strb.w	r1, [r4], #1
    ed06:	d1f2      	bne.n	ecee <am_hal_uart_transfer+0x32e>
    ed08:	a908      	add	r1, sp, #32
    ed0a:	9802      	ldr	r0, [sp, #8]
    ed0c:	9301      	str	r3, [sp, #4]
    ed0e:	f000 f953 	bl	efb8 <am_hal_queue_item_add>
    ed12:	9b01      	ldr	r3, [sp, #4]
    ed14:	2800      	cmp	r0, #0
    ed16:	d1b2      	bne.n	ec7e <am_hal_uart_transfer+0x2be>
    ed18:	4f45      	ldr	r7, [pc, #276]	; (ee30 <am_hal_uart_transfer+0x470>)
    ed1a:	469b      	mov	fp, r3
    ed1c:	9807      	ldr	r0, [sp, #28]
    ed1e:	f7fe ffe5 	bl	dcec <am_hal_interrupt_master_set>
    ed22:	e691      	b.n	ea48 <am_hal_uart_transfer+0x88>
    ed24:	469b      	mov	fp, r3
    ed26:	4426      	add	r6, r4
    ed28:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ed2c:	e68c      	b.n	ea48 <am_hal_uart_transfer+0x88>
    ed2e:	46b8      	mov	r8, r7
    ed30:	e71a      	b.n	eb68 <am_hal_uart_transfer+0x1a8>
    ed32:	469b      	mov	fp, r3
    ed34:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ed38:	e7f0      	b.n	ed1c <am_hal_uart_transfer+0x35c>
    ed3a:	463e      	mov	r6, r7
    ed3c:	e797      	b.n	ec6e <am_hal_uart_transfer+0x2ae>
    ed3e:	4616      	mov	r6, r2
    ed40:	e6b2      	b.n	eaa8 <am_hal_uart_transfer+0xe8>
    ed42:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    ed44:	6bab      	ldr	r3, [r5, #56]	; 0x38
    ed46:	1a9b      	subs	r3, r3, r2
    ed48:	429e      	cmp	r6, r3
    ed4a:	bf28      	it	cs
    ed4c:	461e      	movcs	r6, r3
    ed4e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    ed52:	4651      	mov	r1, sl
    ed54:	4632      	mov	r2, r6
    ed56:	4620      	mov	r0, r4
    ed58:	f000 f92e 	bl	efb8 <am_hal_queue_item_add>
    ed5c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ed5e:	f7fe ffc1 	bl	dce4 <am_hal_interrupt_master_disable>
    ed62:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    ed66:	371c      	adds	r7, #28
    ed68:	033f      	lsls	r7, r7, #12
    ed6a:	9005      	str	r0, [sp, #20]
    ed6c:	e00d      	b.n	ed8a <am_hal_uart_transfer+0x3ca>
    ed6e:	f000 f95b 	bl	f028 <am_hal_queue_item_get>
    ed72:	b188      	cbz	r0, ed98 <am_hal_uart_transfer+0x3d8>
    ed74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ed76:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ed7a:	331c      	adds	r3, #28
    ed7c:	031b      	lsls	r3, r3, #12
    ed7e:	699a      	ldr	r2, [r3, #24]
    ed80:	0692      	lsls	r2, r2, #26
    ed82:	bf5c      	itt	pl
    ed84:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    ed88:	601a      	strpl	r2, [r3, #0]
    ed8a:	69bb      	ldr	r3, [r7, #24]
    ed8c:	069b      	lsls	r3, r3, #26
    ed8e:	f04f 0201 	mov.w	r2, #1
    ed92:	a908      	add	r1, sp, #32
    ed94:	4620      	mov	r0, r4
    ed96:	d5ea      	bpl.n	ed6e <am_hal_uart_transfer+0x3ae>
    ed98:	9805      	ldr	r0, [sp, #20]
    ed9a:	f7fe ffa7 	bl	dcec <am_hal_interrupt_master_set>
    ed9e:	e683      	b.n	eaa8 <am_hal_uart_transfer+0xe8>
    eda0:	469b      	mov	fp, r3
    eda2:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eda6:	e64f      	b.n	ea48 <am_hal_uart_transfer+0x88>
    eda8:	461e      	mov	r6, r3
    edaa:	e67d      	b.n	eaa8 <am_hal_uart_transfer+0xe8>
    edac:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    edb0:	e6b4      	b.n	eb1c <am_hal_uart_transfer+0x15c>
    edb2:	9300      	str	r3, [sp, #0]
    edb4:	f7fe ff96 	bl	dce4 <am_hal_interrupt_master_disable>
    edb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    edba:	9006      	str	r0, [sp, #24]
    edbc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    edc0:	321c      	adds	r2, #28
    edc2:	0311      	lsls	r1, r2, #12
    edc4:	a808      	add	r0, sp, #32
    edc6:	2200      	movs	r2, #0
    edc8:	9b00      	ldr	r3, [sp, #0]
    edca:	e009      	b.n	ede0 <am_hal_uart_transfer+0x420>
    edcc:	680c      	ldr	r4, [r1, #0]
    edce:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    edd2:	f102 0201 	add.w	r2, r2, #1
    edd6:	d121      	bne.n	ee1c <am_hal_uart_transfer+0x45c>
    edd8:	2a20      	cmp	r2, #32
    edda:	f800 4b01 	strb.w	r4, [r0], #1
    edde:	d002      	beq.n	ede6 <am_hal_uart_transfer+0x426>
    ede0:	698c      	ldr	r4, [r1, #24]
    ede2:	06e4      	lsls	r4, r4, #27
    ede4:	d5f2      	bpl.n	edcc <am_hal_uart_transfer+0x40c>
    ede6:	f105 0648 	add.w	r6, r5, #72	; 0x48
    edea:	a908      	add	r1, sp, #32
    edec:	4630      	mov	r0, r6
    edee:	9300      	str	r3, [sp, #0]
    edf0:	f000 f8e2 	bl	efb8 <am_hal_queue_item_add>
    edf4:	b920      	cbnz	r0, ee00 <am_hal_uart_transfer+0x440>
    edf6:	4f0e      	ldr	r7, [pc, #56]	; (ee30 <am_hal_uart_transfer+0x470>)
    edf8:	9806      	ldr	r0, [sp, #24]
    edfa:	f7fe ff77 	bl	dcec <am_hal_interrupt_master_set>
    edfe:	e5e9      	b.n	e9d4 <am_hal_uart_transfer+0x14>
    ee00:	9806      	ldr	r0, [sp, #24]
    ee02:	f7fe ff73 	bl	dcec <am_hal_interrupt_master_set>
    ee06:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ee08:	9b00      	ldr	r3, [sp, #0]
    ee0a:	42bc      	cmp	r4, r7
    ee0c:	bf28      	it	cs
    ee0e:	463c      	movcs	r4, r7
    ee10:	4619      	mov	r1, r3
    ee12:	4630      	mov	r0, r6
    ee14:	4622      	mov	r2, r4
    ee16:	f000 f907 	bl	f028 <am_hal_queue_item_get>
    ee1a:	e67e      	b.n	eb1a <am_hal_uart_transfer+0x15a>
    ee1c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ee20:	e7ea      	b.n	edf8 <am_hal_uart_transfer+0x438>
    ee22:	4604      	mov	r4, r0
    ee24:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ee28:	e678      	b.n	eb1c <am_hal_uart_transfer+0x15c>
    ee2a:	4627      	mov	r7, r4
    ee2c:	e676      	b.n	eb1c <am_hal_uart_transfer+0x15c>
    ee2e:	bf00      	nop
    ee30:	08000001 	.word	0x08000001

0000ee34 <am_hal_uart_tx_flush>:
    ee34:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ee38:	b570      	push	{r4, r5, r6, lr}
    ee3a:	4604      	mov	r4, r0
    ee3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ee3e:	b183      	cbz	r3, ee62 <am_hal_uart_tx_flush+0x2e>
    ee40:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ee42:	b173      	cbz	r3, ee62 <am_hal_uart_tx_flush+0x2e>
    ee44:	4e13      	ldr	r6, [pc, #76]	; (ee94 <am_hal_uart_tx_flush+0x60>)
    ee46:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ee48:	fbb6 f0f0 	udiv	r0, r6, r0
    ee4c:	2802      	cmp	r0, #2
    ee4e:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ee52:	bf8c      	ite	hi
    ee54:	3829      	subhi	r0, #41	; 0x29
    ee56:	2001      	movls	r0, #1
    ee58:	f7fe fce2 	bl	d820 <am_hal_flash_delay>
    ee5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ee5e:	2b00      	cmp	r3, #0
    ee60:	d1f1      	bne.n	ee46 <am_hal_uart_tx_flush+0x12>
    ee62:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ee66:	351c      	adds	r5, #28
    ee68:	032d      	lsls	r5, r5, #12
    ee6a:	69ab      	ldr	r3, [r5, #24]
    ee6c:	071a      	lsls	r2, r3, #28
    ee6e:	d50e      	bpl.n	ee8e <am_hal_uart_tx_flush+0x5a>
    ee70:	4e08      	ldr	r6, [pc, #32]	; (ee94 <am_hal_uart_tx_flush+0x60>)
    ee72:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ee74:	fbb6 f0f0 	udiv	r0, r6, r0
    ee78:	2802      	cmp	r0, #2
    ee7a:	ea4f 1000 	mov.w	r0, r0, lsl #4
    ee7e:	bf8c      	ite	hi
    ee80:	3829      	subhi	r0, #41	; 0x29
    ee82:	2001      	movls	r0, #1
    ee84:	f7fe fccc 	bl	d820 <am_hal_flash_delay>
    ee88:	69ab      	ldr	r3, [r5, #24]
    ee8a:	071b      	lsls	r3, r3, #28
    ee8c:	d4f1      	bmi.n	ee72 <am_hal_uart_tx_flush+0x3e>
    ee8e:	2000      	movs	r0, #0
    ee90:	bd70      	pop	{r4, r5, r6, pc}
    ee92:	bf00      	nop
    ee94:	00b71b00 	.word	0x00b71b00

0000ee98 <am_hal_cmdq_init>:
    ee98:	2807      	cmp	r0, #7
    ee9a:	d901      	bls.n	eea0 <am_hal_cmdq_init+0x8>
    ee9c:	2005      	movs	r0, #5
    ee9e:	4770      	bx	lr
    eea0:	b1c9      	cbz	r1, eed6 <am_hal_cmdq_init+0x3e>
    eea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eea6:	684c      	ldr	r4, [r1, #4]
    eea8:	b194      	cbz	r4, eed0 <am_hal_cmdq_init+0x38>
    eeaa:	b18a      	cbz	r2, eed0 <am_hal_cmdq_init+0x38>
    eeac:	680e      	ldr	r6, [r1, #0]
    eeae:	2e01      	cmp	r6, #1
    eeb0:	d90e      	bls.n	eed0 <am_hal_cmdq_init+0x38>
    eeb2:	272c      	movs	r7, #44	; 0x2c
    eeb4:	f8df c09c 	ldr.w	ip, [pc, #156]	; ef54 <am_hal_cmdq_init+0xbc>
    eeb8:	fb07 f700 	mul.w	r7, r7, r0
    eebc:	eb0c 0507 	add.w	r5, ip, r7
    eec0:	f895 e003 	ldrb.w	lr, [r5, #3]
    eec4:	f01e 0301 	ands.w	r3, lr, #1
    eec8:	d007      	beq.n	eeda <am_hal_cmdq_init+0x42>
    eeca:	2007      	movs	r0, #7
    eecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eed0:	2006      	movs	r0, #6
    eed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eed6:	2006      	movs	r0, #6
    eed8:	4770      	bx	lr
    eeda:	f04e 0e01 	orr.w	lr, lr, #1
    eede:	00f6      	lsls	r6, r6, #3
    eee0:	f363 0e41 	bfi	lr, r3, #1, #1
    eee4:	f885 e003 	strb.w	lr, [r5, #3]
    eee8:	eb06 0804 	add.w	r8, r6, r4
    eeec:	f8df e068 	ldr.w	lr, [pc, #104]	; ef58 <am_hal_cmdq_init+0xc0>
    eef0:	f8c5 8008 	str.w	r8, [r5, #8]
    eef4:	606c      	str	r4, [r5, #4]
    eef6:	60ec      	str	r4, [r5, #12]
    eef8:	616c      	str	r4, [r5, #20]
    eefa:	612c      	str	r4, [r5, #16]
    eefc:	61ae      	str	r6, [r5, #24]
    eefe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ef02:	f85c 6007 	ldr.w	r6, [ip, r7]
    ef06:	f8df 8054 	ldr.w	r8, [pc, #84]	; ef5c <am_hal_cmdq_init+0xc4>
    ef0a:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    ef0e:	f368 0617 	bfi	r6, r8, #0, #24
    ef12:	f8d0 e008 	ldr.w	lr, [r0, #8]
    ef16:	f84c 6007 	str.w	r6, [ip, r7]
    ef1a:	6268      	str	r0, [r5, #36]	; 0x24
    ef1c:	61eb      	str	r3, [r5, #28]
    ef1e:	622b      	str	r3, [r5, #32]
    ef20:	f8ce 3000 	str.w	r3, [lr]
    ef24:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ef26:	7a09      	ldrb	r1, [r1, #8]
    ef28:	68c0      	ldr	r0, [r0, #12]
    ef2a:	6003      	str	r3, [r0, #0]
    ef2c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ef2e:	6906      	ldr	r6, [r0, #16]
    ef30:	6940      	ldr	r0, [r0, #20]
    ef32:	6837      	ldr	r7, [r6, #0]
    ef34:	4338      	orrs	r0, r7
    ef36:	6030      	str	r0, [r6, #0]
    ef38:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ef3a:	6840      	ldr	r0, [r0, #4]
    ef3c:	6004      	str	r4, [r0, #0]
    ef3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ef40:	0049      	lsls	r1, r1, #1
    ef42:	6804      	ldr	r4, [r0, #0]
    ef44:	f001 0102 	and.w	r1, r1, #2
    ef48:	6021      	str	r1, [r4, #0]
    ef4a:	4618      	mov	r0, r3
    ef4c:	6015      	str	r5, [r2, #0]
    ef4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef52:	bf00      	nop
    ef54:	10001134 	.word	0x10001134
    ef58:	0000f510 	.word	0x0000f510
    ef5c:	00cdcdcd 	.word	0x00cdcdcd

0000ef60 <am_hal_cmdq_enable>:
    ef60:	4603      	mov	r3, r0
    ef62:	b128      	cbz	r0, ef70 <am_hal_cmdq_enable+0x10>
    ef64:	6802      	ldr	r2, [r0, #0]
    ef66:	490d      	ldr	r1, [pc, #52]	; (ef9c <am_hal_cmdq_enable+0x3c>)
    ef68:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ef6c:	428a      	cmp	r2, r1
    ef6e:	d001      	beq.n	ef74 <am_hal_cmdq_enable+0x14>
    ef70:	2002      	movs	r0, #2
    ef72:	4770      	bx	lr
    ef74:	78c2      	ldrb	r2, [r0, #3]
    ef76:	f002 0202 	and.w	r2, r2, #2
    ef7a:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    ef7e:	b952      	cbnz	r2, ef96 <am_hal_cmdq_enable+0x36>
    ef80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ef82:	6811      	ldr	r1, [r2, #0]
    ef84:	680a      	ldr	r2, [r1, #0]
    ef86:	f042 0201 	orr.w	r2, r2, #1
    ef8a:	600a      	str	r2, [r1, #0]
    ef8c:	78da      	ldrb	r2, [r3, #3]
    ef8e:	f042 0202 	orr.w	r2, r2, #2
    ef92:	70da      	strb	r2, [r3, #3]
    ef94:	4770      	bx	lr
    ef96:	2000      	movs	r0, #0
    ef98:	4770      	bx	lr
    ef9a:	bf00      	nop
    ef9c:	01cdcdcd 	.word	0x01cdcdcd

0000efa0 <am_hal_queue_init>:
    efa0:	b410      	push	{r4}
    efa2:	2400      	movs	r4, #0
    efa4:	6004      	str	r4, [r0, #0]
    efa6:	6044      	str	r4, [r0, #4]
    efa8:	6084      	str	r4, [r0, #8]
    efaa:	60c3      	str	r3, [r0, #12]
    efac:	6102      	str	r2, [r0, #16]
    efae:	6141      	str	r1, [r0, #20]
    efb0:	f85d 4b04 	ldr.w	r4, [sp], #4
    efb4:	4770      	bx	lr
    efb6:	bf00      	nop

0000efb8 <am_hal_queue_item_add>:
    efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efba:	4604      	mov	r4, r0
    efbc:	6906      	ldr	r6, [r0, #16]
    efbe:	b083      	sub	sp, #12
    efc0:	fb06 f602 	mul.w	r6, r6, r2
    efc4:	460d      	mov	r5, r1
    efc6:	f7fe fe8d 	bl	dce4 <am_hal_interrupt_master_disable>
    efca:	68e7      	ldr	r7, [r4, #12]
    efcc:	68a2      	ldr	r2, [r4, #8]
    efce:	9001      	str	r0, [sp, #4]
    efd0:	1abb      	subs	r3, r7, r2
    efd2:	429e      	cmp	r6, r3
    efd4:	d826      	bhi.n	f024 <am_hal_queue_item_add+0x6c>
    efd6:	b196      	cbz	r6, effe <am_hal_queue_item_add+0x46>
    efd8:	6823      	ldr	r3, [r4, #0]
    efda:	4629      	mov	r1, r5
    efdc:	b1c5      	cbz	r5, f010 <am_hal_queue_item_add+0x58>
    efde:	19af      	adds	r7, r5, r6
    efe0:	6962      	ldr	r2, [r4, #20]
    efe2:	f811 0b01 	ldrb.w	r0, [r1], #1
    efe6:	54d0      	strb	r0, [r2, r3]
    efe8:	6823      	ldr	r3, [r4, #0]
    efea:	68e5      	ldr	r5, [r4, #12]
    efec:	3301      	adds	r3, #1
    efee:	42b9      	cmp	r1, r7
    eff0:	fbb3 f0f5 	udiv	r0, r3, r5
    eff4:	fb05 3310 	mls	r3, r5, r0, r3
    eff8:	6023      	str	r3, [r4, #0]
    effa:	d1f1      	bne.n	efe0 <am_hal_queue_item_add+0x28>
    effc:	68a2      	ldr	r2, [r4, #8]
    effe:	4432      	add	r2, r6
    f000:	60a2      	str	r2, [r4, #8]
    f002:	2401      	movs	r4, #1
    f004:	9801      	ldr	r0, [sp, #4]
    f006:	f7fe fe71 	bl	dcec <am_hal_interrupt_master_set>
    f00a:	4620      	mov	r0, r4
    f00c:	b003      	add	sp, #12
    f00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f010:	3101      	adds	r1, #1
    f012:	3301      	adds	r3, #1
    f014:	428e      	cmp	r6, r1
    f016:	fbb3 f0f7 	udiv	r0, r3, r7
    f01a:	fb07 3310 	mls	r3, r7, r0, r3
    f01e:	d1f7      	bne.n	f010 <am_hal_queue_item_add+0x58>
    f020:	6023      	str	r3, [r4, #0]
    f022:	e7ec      	b.n	effe <am_hal_queue_item_add+0x46>
    f024:	2400      	movs	r4, #0
    f026:	e7ed      	b.n	f004 <am_hal_queue_item_add+0x4c>

0000f028 <am_hal_queue_item_get>:
    f028:	b5f0      	push	{r4, r5, r6, r7, lr}
    f02a:	4604      	mov	r4, r0
    f02c:	6906      	ldr	r6, [r0, #16]
    f02e:	b083      	sub	sp, #12
    f030:	fb06 f602 	mul.w	r6, r6, r2
    f034:	460d      	mov	r5, r1
    f036:	f7fe fe55 	bl	dce4 <am_hal_interrupt_master_disable>
    f03a:	68a2      	ldr	r2, [r4, #8]
    f03c:	9001      	str	r0, [sp, #4]
    f03e:	4296      	cmp	r6, r2
    f040:	d81c      	bhi.n	f07c <am_hal_queue_item_get+0x54>
    f042:	b196      	cbz	r6, f06a <am_hal_queue_item_get+0x42>
    f044:	6863      	ldr	r3, [r4, #4]
    f046:	b1dd      	cbz	r5, f080 <am_hal_queue_item_get+0x58>
    f048:	4629      	mov	r1, r5
    f04a:	19af      	adds	r7, r5, r6
    f04c:	6962      	ldr	r2, [r4, #20]
    f04e:	5cd3      	ldrb	r3, [r2, r3]
    f050:	f801 3b01 	strb.w	r3, [r1], #1
    f054:	6863      	ldr	r3, [r4, #4]
    f056:	68e5      	ldr	r5, [r4, #12]
    f058:	3301      	adds	r3, #1
    f05a:	428f      	cmp	r7, r1
    f05c:	fbb3 f0f5 	udiv	r0, r3, r5
    f060:	fb05 3310 	mls	r3, r5, r0, r3
    f064:	6063      	str	r3, [r4, #4]
    f066:	d1f1      	bne.n	f04c <am_hal_queue_item_get+0x24>
    f068:	68a2      	ldr	r2, [r4, #8]
    f06a:	1b92      	subs	r2, r2, r6
    f06c:	60a2      	str	r2, [r4, #8]
    f06e:	2401      	movs	r4, #1
    f070:	9801      	ldr	r0, [sp, #4]
    f072:	f7fe fe3b 	bl	dcec <am_hal_interrupt_master_set>
    f076:	4620      	mov	r0, r4
    f078:	b003      	add	sp, #12
    f07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f07c:	2400      	movs	r4, #0
    f07e:	e7f7      	b.n	f070 <am_hal_queue_item_get+0x48>
    f080:	68e0      	ldr	r0, [r4, #12]
    f082:	4629      	mov	r1, r5
    f084:	3101      	adds	r1, #1
    f086:	3301      	adds	r3, #1
    f088:	428e      	cmp	r6, r1
    f08a:	fbb3 f5f0 	udiv	r5, r3, r0
    f08e:	fb00 3315 	mls	r3, r0, r5, r3
    f092:	d1f7      	bne.n	f084 <am_hal_queue_item_get+0x5c>
    f094:	6063      	str	r3, [r4, #4]
    f096:	e7e8      	b.n	f06a <am_hal_queue_item_get+0x42>
    f098:	6f727245 	.word	0x6f727245
    f09c:	65722072 	.word	0x65722072
    f0a0:	6e696461 	.word	0x6e696461
    f0a4:	6e692067 	.word	0x6e692067
    f0a8:	72726574 	.word	0x72726574
    f0ac:	20747075 	.word	0x20747075
    f0b0:	74617473 	.word	0x74617473
    f0b4:	000a7375 	.word	0x000a7375
    f0b8:	6f727245 	.word	0x6f727245
    f0bc:	6c632072 	.word	0x6c632072
    f0c0:	69726165 	.word	0x69726165
    f0c4:	6920676e 	.word	0x6920676e
    f0c8:	7265746e 	.word	0x7265746e
    f0cc:	74707572 	.word	0x74707572
    f0d0:	61747320 	.word	0x61747320
    f0d4:	0a737574 	.word	0x0a737574
    f0d8:	00000000 	.word	0x00000000
    f0dc:	304d4f49 	.word	0x304d4f49
    f0e0:	52534920 	.word	0x52534920
    f0e4:	00000a21 	.word	0x00000a21
    f0e8:	72617053 	.word	0x72617053
    f0ec:	6e75466b 	.word	0x6e75466b
    f0f0:	67644520 	.word	0x67644520
    f0f4:	6f422065 	.word	0x6f422065
    f0f8:	20647261 	.word	0x20647261
    f0fc:	74736554 	.word	0x74736554
    f100:	0000000a 	.word	0x0000000a
    f104:	353a3830 	.word	0x353a3830
    f108:	39343a33 	.word	0x39343a33
    f10c:	00000000 	.word	0x00000000
    f110:	2072614d 	.word	0x2072614d
    f114:	32203831 	.word	0x32203831
    f118:	00393130 	.word	0x00393130
    f11c:	706d6f43 	.word	0x706d6f43
    f120:	64656c69 	.word	0x64656c69
    f124:	206e6f20 	.word	0x206e6f20
    f128:	202c7325 	.word	0x202c7325
    f12c:	0a0a7325 	.word	0x0a0a7325
    f130:	00000000 	.word	0x00000000
    f134:	72617053 	.word	0x72617053
    f138:	6e75466b 	.word	0x6e75466b
    f13c:	6e655420 	.word	0x6e655420
    f140:	66726f73 	.word	0x66726f73
    f144:	20776f6c 	.word	0x20776f6c
    f148:	75626544 	.word	0x75626544
    f14c:	754f2067 	.word	0x754f2067
    f150:	74757074 	.word	0x74757074
    f154:	41552820 	.word	0x41552820
    f158:	0d295452 	.word	0x0d295452
    f15c:	0000000a 	.word	0x0000000a
    f160:	6c6c6548 	.word	0x6c6c6548
    f164:	55202c6f 	.word	0x55202c6f
    f168:	21545241 	.word	0x21545241
    f16c:	00000a0d 	.word	0x00000a0d
    f170:	656d6163 	.word	0x656d6163
    f174:	69206172 	.word	0x69206172
    f178:	2074696e 	.word	0x2074696e
    f17c:	75736572 	.word	0x75736572
    f180:	203a746c 	.word	0x203a746c
    f184:	0a0d7825 	.word	0x0a0d7825
    f188:	00000000 	.word	0x00000000
    f18c:	676b6c43 	.word	0x676b6c43
    f190:	73206e65 	.word	0x73206e65
    f194:	75746174 	.word	0x75746174
    f198:	53203a73 	.word	0x53203a73
    f19c:	6c637379 	.word	0x6c637379
    f1a0:	6572466b 	.word	0x6572466b
    f1a4:	202d2071 	.word	0x202d2071
    f1a8:	202c6425 	.word	0x202c6425
    f1ac:	43545265 	.word	0x43545265
    f1b0:	2043534f 	.word	0x2043534f
    f1b4:	6425202d 	.word	0x6425202d
    f1b8:	7478202c 	.word	0x7478202c
    f1bc:	61666c61 	.word	0x61666c61
    f1c0:	25206c69 	.word	0x25206c69
    f1c4:	000a0d64 	.word	0x000a0d64
    f1c8:	0a0a0a0a 	.word	0x0a0a0a0a
    f1cc:	0a0a0a0a 	.word	0x0a0a0a0a
    f1d0:	0a0a0a0a 	.word	0x0a0a0a0a
    f1d4:	0a0a0a0a 	.word	0x0a0a0a0a
    f1d8:	00000a0a 	.word	0x00000a0a
    f1dc:	4b4c4350 	.word	0x4b4c4350
    f1e0:	544e4920 	.word	0x544e4920
    f1e4:	000a0d21 	.word	0x000a0d21
    f1e8:	46455248 	.word	0x46455248
    f1ec:	544e4920 	.word	0x544e4920
    f1f0:	000a0d21 	.word	0x000a0d21
    f1f4:	4e595356 	.word	0x4e595356
    f1f8:	4e492043 	.word	0x4e492043
    f1fc:	0a0d2154 	.word	0x0a0d2154
    f200:	00000000 	.word	0x00000000

0000f204 <g_sBspUartConfig>:
    f204:	0001c200 00000060 00000000 00000000     ....`...........
    f214:	00000000 00000012 00000000 00000000     ................
	...

0000f22c <g_AM_BSP_CAM_HREF>:
    f22c:	00001003                                ....

0000f230 <g_AM_BSP_CAM_PCLK>:
    f230:	00001003                                ....

0000f234 <g_AM_BSP_CAM_VSYNC>:
    f234:	00003003                                .0..

0000f238 <g_AM_BSP_CAM_XCLK>:
    f238:	00000001                                ....

0000f23c <g_AM_BSP_CAM_Y0>:
    f23c:	00001003                                ....

0000f240 <g_AM_BSP_CAM_Y1>:
    f240:	00001003                                ....

0000f244 <g_AM_BSP_CAM_Y2>:
    f244:	00001003                                ....

0000f248 <g_AM_BSP_CAM_Y3>:
    f248:	00001003                                ....

0000f24c <g_AM_BSP_CAM_Y4>:
    f24c:	00001003                                ....

0000f250 <g_AM_BSP_CAM_Y5>:
    f250:	00001003                                ....

0000f254 <g_AM_BSP_CAM_Y6>:
    f254:	00001003                                ....

0000f258 <g_AM_BSP_CAM_Y7>:
    f258:	00001003                                ....

0000f25c <g_AM_BSP_GPIO_COM_UART_RX>:
    f25c:	00000000                                ....

0000f260 <g_AM_BSP_GPIO_COM_UART_TX>:
    f260:	00000000                                ....

0000f264 <am_hal_cachectrl_defaults>:
    f264:	00000308                                ....

0000f268 <g_AM_HAL_GPIO_INPUT>:
    f268:	00001003                                ....

0000f26c <g_ui8Bit76Capabilities>:
    f26c:	02800101 80010180 80800101 80808080     ................
    f27c:	80808080 80808008 01800180 80808080     ................
    f28c:	80808080 01800402 01010401 80808080     ................
    f29c:	00000101                                ....

0000f2a0 <g_ui8NCEtable>:
    f2a0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f2b0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f2c0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f2d0:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f2e0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f2f0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f300:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f310:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f320:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f330:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f340:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f350:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f360:	32221202 43231303                       .."2..#C

0000f368 <g_ui8Inpen>:
    f368:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f378:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f388:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f398:	00003130                                01..

0000f39c <g_AM_HAL_GPIO_DISABLE>:
    f39c:	00000003                                ....

0000f3a0 <g_AM_HAL_GPIO_OUTPUT>:
    f3a0:	00000403                                ....

0000f3a4 <g_ui8nCEpins>:
    f3a4:	02070707 00080802 01020202 01010101     ................
    f3b4:	01010101 01010101 01010101 01010101     ................
    f3c4:	01010101 08010101 01010008 01010101     ................
    f3d4:	00000101                                ....

0000f3d8 <g_AM_HAL_GPIO_OUTPUT_12>:
    f3d8:	00000703                                ....

0000f3dc <g_am_hal_mcuctrl_flash_size>:
    f3dc:	00004000 00008000 00010000 00020000     .@..............
    f3ec:	00040000 00080000 00100000 00200000     .............. .
	...

0000f41c <g_am_hal_mcuctrl_sram_size>:
    f41c:	00004000 00008000 00010000 00020000     .@..............
    f42c:	00040000 00080000 00100000 00060000     ................
	...

0000f45c <am_hal_pwrctrl_peripheral_control>:
	...
    f468:	00000001 00000004 00000004 00000002     ................
    f478:	00000008 00000008 00000004 00000008     ................
    f488:	00000008 00000008 00000008 00000008     ................
    f498:	00000010 00000010 00000010 00000020     ............ ...
    f4a8:	00000010 00000010 00000040 00000010     ........@.......
    f4b8:	00000010 00000080 00000004 00000004     ................
    f4c8:	00000100 00000004 00000004 00000200     ................
    f4d8:	00000020 00000020 00000400 00000004      ... ...........
    f4e8:	00000004 00000800 00000040 00000040     ........@...@...
    f4f8:	00001000 00000080 00000080 00002000     ............. ..
    f508:	00000100 00000100                       ........

0000f510 <gAmHalCmdQReg>:
    f510:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
    f520:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
    f530:	00000004 00000002 50005294 50005298     .........R.P.R.P
    f540:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
    f550:	5000529c 00000001 00000004 00000002     .R.P............
    f560:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
    f570:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
    f580:	00000004 00000002 50007294 50007298     .........r.P.r.P
    f590:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
    f5a0:	5000729c 00000001 00000004 00000002     .r.P............
    f5b0:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
    f5c0:	500082a8 00008000 5000829c 00000001     ...P.......P....
    f5d0:	00000004 00000002 50009294 50009298     ...........P...P
    f5e0:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
    f5f0:	5000929c 00000001 00000004 00000002     ...P............
    f600:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
    f610:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
    f620:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
    f630:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
    f640:	5000c250 00000001 00000004 00000002     P..P............
